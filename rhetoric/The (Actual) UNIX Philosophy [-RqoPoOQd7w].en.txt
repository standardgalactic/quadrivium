um
no okay i guess we go we'll go for it
uh the actual unix philosophy what is
the unix philosophy
um this video is going to be short and
sweet because but we're going to be
talking a lot more about unix philosophy
throughout all these videos that i have
and i i really need to clarify what it
is there's been a lot of
misunderstanding about what the unix
philosophy is out there so i'm actually
going to cite from the people who
created it
and this is indirectly from wikipedia
and um
oh god what do i have his name here oh
i'm spacing on his name he's an oxford
professor he gives a does a great
presentation on this
but
i can't remember his name i'm really
sorry but so this is it doug mckilroy
wrote and uh and he's the guy who
invented pipes you know the idea of
chaining something together in a pipe
he says the eunuch's philosophy is this
writing programs that do one thing and
do it well
and i'm going to interject that's when
everybody stops and i think that's it
but as uh this professor suggests and
many others
right it goes on to say
that you need to write programs that
work together
and write programs to handle text
streams
because it is the universal interface so
these two
secondary parts to the unix philosophy
are forgotten all the time all the time
they are forgotten all the time and
people wonder what's up with pipes and
stuff and i'm gonna the reason i have to
explain this is because you'll hear me
go off on other technologies that i will
not necessarily
uh throw into the bus right now i'll
wait till another day to do it but
usually what i do is because they use a
monolithic approach that discounts
uh all of all three of these okay
and i'm let you imagine what they are if
you want to take a guess right now at
some of the biggest applications to be
used in the unix world the unix and
linux world are not actually following
the eunuch's philosophy and you're like
well why what's the benefit of following
ux policy what do i get because i follow
unix philosophy and that we're going to
kind of go on so let's let's finish this
here people get this wrong all the time
they do the only thing well if you get
the rest personally my favorite list of
clarifications so this uh one of the uh
designers and creators of x the x window
system which has had problems but you
know when it came up it was nice mike
genkers says
small is beautiful make each program do
one thing well make build a prototype as
soon as possible choose portability over
efficiency store data in flat text files
okay json yes yellow yes but maybe just
you know call them call them files with
white space between each line one thing
for line use software leverage to your
advantage in other words take that each
piece of software and compare that you
know use them combined
uh use shell scripts to increase
leverage and portability
this people don't like hearing this but
this is where this is why creating a
shell script is way
better to initially get an idea of what
it is you're building if you even if you
want to build something else later avoid
captive user interfaces i have to use
this graphic user interface i have to
use this one unix program and nothing
else uh there's sort of some
you know takes on that these days
because you know we have kind of a
monolith model and then we have nine
every make every program a filter and
people don't know what filters are a
filter is just taking the output of one
program and feeding it into the input of
another program this is the most
fundamental idea of unix pipes and if
you don't know about unix pipes i mean
we can talk about this separately but
but that's what's up that's when you
take the idea you take and this allows
you to do things like this let's say i
wanted to put the date right here so i
can type um
you know exclamation point exclamation
point and then i can type h now and this
is a program so this causes my vi to
read the input on that line replace the
current line with the input uh from the
program that's going to run so this runs
a program and it puts that thing right
there i didn't have to do any extension
to vi i could have done this with vi and
not any not even vim it would have
worked
because these are these tools in in the
unix world have all been built to use
unix philosophy and people throw out the
benefit of writing filters and tools
like this all the time and they put
everything into a single program uh let
me give you another idea so another
example so you'll see me doing this all
the time so i can actually write a
programs like zetlink uh uh this is a
program that that runs my zelda cast and
searches for everything that has this
word in it philosophy for that keyword
and then it outputs all the lines of of
that of those little cast in to the
output now i can send this line to the
the bash command line underneath and
take its output and replace this line
with itself so you can write code inside
a vi that generates output could be even
another code so let me show you what i
do so i go exclamation point exclamation
point bash that sends that line to the
bash takes its output and replaces the
line with the output and i get
a line that it it went out fetched from
my repository which thing has a a unique
identifier for it where more than one
would have done that and it puts that
there that is not a plug-in that's not a
plug-in that's just using the unix
philosophy so i had to give a little
quick demonstration of that i'll do
other videos on using vim filters and
combining them with filters but this is
uh the unix philosophy is the reason
that when people approach learning the
terminal and unix or linux that you need
to consider
the
ecosystem of it it's not like just
you know vim or
just this ide or just this or that it's
the combination of all the pieces
together that make it powerful
and when you see me make decisions about
what i use and what are the most
powerful pieces of that tool set that
combined make a singular experience
that's why that's why that's why it has
to have you have a hard time pegging me
down on whether which you know uh
development environment that i like or
or this or that because because it's not
just one thing it's the entire thing and
you have to understand the basis for the
unix philosophy before you see the value
of any of these other things
and a lot of people don't a lot of
people don't if they do they don't use
it properly
because they don't they don't leverage
all of those things
so
yes i absolutely use multiple text
editors i use ed and vi sometimes ed is
a better text editor than vi you know
what can't be done that way emacs you
know and i'm gonna just say it i have a
lot of really good friends that use
emacs i will never use it why because it
doesn't follow the unix philosophy of
their own admission and installment says
the unix philosophy is not the biggest
deal the guy who made who ported ported
not made uh all of the you know commands
and stuff that ended up being in linux
for gnu you know doesn't even think
there's value in the unix philosophy
just pause on that for a second uh even
torvalds uses c-max micro version of
vmax so
i'm not against emacs if you wanted a
really monolithic all things are done in
this thing you can't escape it that's
fine but don't you dare say that that is
consistent with the eunuch's philosophy
because it is fundamentally and
categorically against the unix
philosophy unix philosophy is writing
lots of things that do one thing really
well and having those things connect and
having their their method of
communication be simple text output text
input and output that's it that's it and
then you uh you add filters and
everything and you can get around all
those those different things that are
happening okay so uh one last little
quick example of this before we leave it
um so so like if i wanted you know the
idea of um
of of like you know you can echo
something right and then you could uh
send that to something else right and
you see people do different commands all
the time with said and awk and tr and
all that i don't necessarily like those
but you could
you could change it to do any number of
things you could say i want to go to tr
and i want to cap i want all the s all
the s's to be
uh to be capitalized with s i guess
uh i'm doing it wrong i might have to
kill this video oh there we go so so
that just capitalizes so that's the idea
right tr is just a tool that does one
thing it does one transformation as it
goes and you can pipe one thing to the
next thing to the next thing to the next
thing so pipes are an implementation of
the unix philosophy the very most
important implementation of the unix
philosophy everything in unix is a pipe
everything in unix is a file and and it
can be piped to something else including
uh
everything you type all the processes
are all in slash proc and we'll talk
about that another day so the the moral
of the story is hey look there's our
people
uh i prefer vim
okay i'm gonna end the stream there
there's lots of opinions on this that
would be
