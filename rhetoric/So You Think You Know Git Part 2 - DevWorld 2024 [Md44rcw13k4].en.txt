[Music]
bu
it's nice to be here um I have to warn
you I am not going to be talking about
uh web 3 or crypto or AI I'm going to be
talking about really boring just get
command line so I hope that you
guys use git on the command line because
otherwise this is going to be pretty
boring talk and it's a little bit nerdy
but uh I've been giving talks on git for
I don't know 15 years now for for sort
of as long as I've been professionally
using git and I've been talking about
get again more recently I've been doing
it for a long time but more recently I
found out that a lot of people have been
how many people raise your hands if
you've never used anything other than
git as a Version Control
System okay so this is a different
generation than when I first kind of was
giving talks like these and so I thought
it was kind of interesting that git can
do a whole bunch of things that you may
not know about now I called this talk so
you think you know get but actually it's
so you think you know get part two did
anybody see my fdm version of this talk
talk okay okay so I didn't want to do
the exact same talk that was kind of my
plan you go and you give talks and you
don't you know you can give talks
multiple times but uh my other talk kind
of got a lot of views on YouTube and so
I didn't want to give the same talk
again so this is actually uh so you
think you know get part two get
revenge um it's exactly the same format
as the other one so if you like this
talk you can go on YouTube and watch
another 45 minutes of this same exact
type of thing but I'm not covering any
of the same topics so it turns out that
there's a lot of dumb that git does
and I can talk for hours about it um so
a little bit about me I was one of the
GitHub co-founders um I wrote the prit
book if you read the uh you know if you
go to the git website and read the book
that that was my sort of Open Source
book um and now we're working on a new
git client um which is available on
GitHub and I'll talk about that a little
bit later but I've been working in git
for a really long time and I found it
really interesting how many things it
can do um and that you probably don't
know so there's more than 145 command in
get um there was actually one introduced
in the last release this week called git
replay which I'm not going to talk about
today cuz it's a little bit boring but
they there's just keep coming up with
new commands so there's a lot of them
you probably don't know there's still an
average of 10 commits nine commits a day
every day every year so there's always
more stuff going in to get but most of
you probably learn five commands and you
use those same five commands and you
don't kind of go outside of that
everybody's nodding they're like I do
know that's five commands um so there's
10,000 commits in the last 3 years what
has been happening right how much of
this do you actually know so I'm just
going to give you a bunch of stuff that
git does today that you may not know
about I'm going to just do it as a
shotgun Buffet of of here's a bunch of
stuff that I'll talk about today um if
you don't want to take notes if anything
you find is interesting I put these
slides up at um the blog at git brother
so you can go and find the slides and
look up any of this stuff so just try to
see if there's anything that catches
your attention and then you can go look
it up later or we can talk about it over
beers tonight um okay so I'm just going
to hit them one is there's some new
commands in git called switch and
restore does anybody use switch or
restore handful of people okay so one of
the things that's sort of problematic
about git that people have been
complaining about for a long time is
that checkout is very overloaded so you
can do a lot of stuff with checkout so
you can switch branches check out Branch
you can revert a file check out the file
that'll revert it to whatever the the
version is in the index you can revert a
file to an older version of the file if
you say here's an old commit make the
file look like it looked like in that
commit instead of what it looks like now
you can also I don't know if you know
this you can patch checkout files so if
you do check out-p it'll do this
interactive thing and it'll say do you
want to revert this hunk and this hunk
and this hunk you don't have to do the
entire file which is kind of cool um but
again it's checkout and none of these
things are really checking out anything
right it's reverting stuff it's
switching stuff so get kind of put these
new porcelin commands in that just wrap
this so instead of writing get checkout
Branch you can say get switch branch and
it'll switch into that branch and
they've renamed some of the options to
it so you can say- C which is
essentially like get checkout DB it's
create a new branch and switch to it
right um I don't know what- C stands for
it could be create it could be cat who
knows right like the people who write
get have some interesting ideas from
time to time so could stand for pretty
much anything but switch is one the
other is restore so instead of saying
get checkout file in order to restore
the contents you can say get restore
file and it does exactly the same thing
essentially it's just they're just try
to make it so it's a little bit easier
for new users to say don't learn these
five things that checkout does learn
these ones that are a little bit more
domain specific and the options have
change to be a little bit more clear
what they're what they're doing so if
you want to restore from an older commit
you can say- Das source and and then do
it from that file and that'll work too
and the- P and and a couple of the other
commands but it just splits it up so if
you're teaching somebody G today you
might want to teach them switch and
restore rather than check out and all
the different things that it does um if
if you want to remember what these are
these are all the different things that
you can do with restore checkout switch
and reset check out and switch you can
switch branches restore and checkout you
can undo onstage changes restore and
reset you can undo stage changes reset
and switch you can move the head
reference and all of them you can
actually accidentally delete in
your working directory so be you know
just if you need to remember that this
is a handy guide for you um the next
thing I want to talk about is hooks how
many of you use hooks in your git
repositories so there's lots of things
you can do with hooks I don't know if
you know how many hooks there are there
are 28 hooks that you can use in git um
I'm not going to talk about all of them
I just want to talk about actually let's
get rid of the email stuff I assume most
of you aren't sending email patches to
mailing list let's get of the P perforce
Bridge stuff you probably don't care
about that let's get rid of the server
stuff you're probably not running your
own server right you're probably using
GitHub or something um and Microsoft
introduced a bunch of uh large
repository scaling stuff that has some
hooks in it that that even they don't
really use anymore so what we're really
looking at is these 11 hooks so you can
do stuff around your commits you can do
stuff around rewriting or like rebasing
or merging and you can do stuff around
switching branches or pushing um but you
probably don't want to go into dogit
Hooks and write your own your own
scripts um you can do that that's how
they're there that's how git tries to
use them but there's better ways of
using hooks that are much more
interesting so these are some examples
of what you can do with hooks you can
help with commit message formatting you
can install packages after you change
something you can update C tags right
and switch to tabs or spaces you can
lint stuff you can make sure you're not
committing large files there's all sorts
of stuff you can do with hooks um but
there's two things that I've seen used
that that I think are really valuable
now which help with managing hooks one
is a a package called pre-commit and the
other one's a package called husky um
pre-commit essentially you install this
this program you create a yaml file that
says here's the hooks that I want to do
so you're not putting the files and
you're saying here's uh how I want what
Hooks I want to run and then you install
this thing and then every time that you
commit after that it'll run those and
the the commit the yaml file looks like
this which is kind of cool so it's
almost like a gem file or something it
points at a repository and says this
repository has a whole bunch of hooks
that are defined in it and these are the
IDS of the hooks from that repository I
want you to run when I'm when I'm doing
stuff and they can hook into any of
these parts of of your work cycle um so
you can say okay these are sort of the
standard ones and some of the the hooks
I want to run and then I have this other
one called called Black in there and
then when you commit it has this nice
output and it says which one ran and
which ones passed and which one's
skipped and stuff like that and since
the yo files in your repository everyone
on your team can share them and use them
as well which is which is much nicer
than trying to pass hooks around to
people and have them have them use it um
and then the other one is Husky which is
very similar it's just it's an MPX thing
and you can keep your hooks in a husky
file and anybody who runs that it'll run
those hooks so mainly this is valuable
for sharing hooks with other people on
your team um and making sure that
everybody's running this lters or the
same hooks when they're running stuff um
the next one I want to talk about is
attributes how many of you have a dogit
attributes file in your
repository I'm getting less and less
fewer and fewer people doing these fun
things with Git so attributes is a way
of telling git certain things about file
extensions in your in your repository so
I'll give you a real dumb example um
that I think you know at least shows you
what it's capable of doing if you do get
diff and you have two images and get
sees it as a binary file it won't show
you the difference between the images
right it can't really do that it says
it's binary I can't do a diff on this
like I can with a text file so I just
say hey they they're different but
something you can do is you can run
files through an intermediate and then
diff that so for example you can use
something called exif tool on an image
it'll give you some Banda data about an
image and then you can say anything that
ends in PNG use this exif diff tool and
what the exif diff tool is just run exi
tool right and so what it'll do is it'll
run it through that and then diff the
output of that so instead of saying A
and B differ it'll say here's a
difference in the metadata of the files
right which is not the difference in the
files exactly but it's more useful than
a and b differ so it just gives you an
idea of some stuff that you can do and
how this works is it runs things through
called smudge and clean filters and so
what this does is if you have some files
and you say everything in. txt run it
through a smudge and then it will run it
through this program and then put it in
your working directory and then if you
say
uh you know you add or you commit it'll
run it through another filter before it
puts it into your repository so you can
do this on all sorts of stuff one dumb
example would be to implement something
like RCS keywords there's something like
half of this audience has never used
anything other than git but if you're
really old like I am and you've actually
used tools like CVS or RCS um they used
to have these things where you could put
these little headers into your files and
then when you check out the files it'll
fill them out and then when you commit
them it'll clean them back out again
right so you can say here's the version
or here's the last commit or here's
version history or something like that
um so when you check it out it actually
looks like this but in the source code
itself you look at it at GitHub it
doesn't have any of this this data on it
right um so you can do something like
this in git if you wanted to you could
you know write a a file that expands the
date and then just say hey I have this
filter called dater and the smudge is to
run it through this program the clean is
to run it through this Pearl expression
and then if you put this string into a
file and you say hey for everything that
that ends in in or all of my files run
it through this filter and then you
check it back out it'll have expanded
that out right so you can do this type
of thing it's a very simple example that
none of you will probably want to do but
it gives you an idea of what you can do
the biggest usage of this is a program
called lfs so if you're using git lfs
this is how git lfs works right it works
with this with this git attribute stuff
um git lfs is large files so if you're
working in a gaming industry or you have
you know large gaming assets or
something like that you don't want to
put all of that in to get because then
when you clone you get every version of
every large file and it's not very good
at that so what you do instead is
essentially you store pointers in the
repository and then you have these these
smudge and clean filters that check them
out and put them back in So if you use G
lfs
um and you install it and you track
something what that does is it updates
your git attributes file and then if you
do something like commit a movie file or
something like that it doesn't actually
start in git and push it to GitHub it um
pushes it to whatever your lfs server is
um which which also can be GitHub but in
a different way but the actual file that
it stores is three lines right it's not
the entire movie file it's just sort of
this pointer and then when the the clean
when the smudge filter looks at it it
says hey okay you have a smudge filter
on this here's the shaw I'll go out to
some third party server I'll pull down
the movie file and I'll put it in your
working directory as though that was
what was stored in get so that's how lfs
works but again you can do all sorts of
stuff with these filters another fun
thing is fix up commits so how many of
you use a rebasing type workflow rather
than a emerging type workflow okay so
it's 50/50 is you guys are wrong but
that's fine um but if you do use a
rebasing type workflow um there's a
really cool thing you can do so one of
the things actually one of the things
that I think GitHub kind of messed up is
the way that we do PO requests it's
really difficult you do your your
commits you do a nice series you say
okay I've documented my three commits
and stuff and they're really nicely
documented and I push them to to GitHub
um repository and open up a poll request
and now I get feed Fe back and if I get
feedback and it's feedback on you know
the first commit of the three it's
really difficult to fix it right to to
sort of amend that commit and add those
whatever the review is into that commit
what you usually do is you say hey I
fixed some review stuff right and you
add a fourth commit on top and you you
push it up because you don't want to
force push brance or something like that
um but if you didn't want to do that if
you wanted to say clean up your series
put the review Into the appropriate
commits in your history that you had had
and be able to fix that up it's really
difficult to do because what you have to
do is you have to sort of interactively
rebase and say stop at each thing and
pull in the new changes and commit it
there blah blah blah so git actually has
a really easy way of doing this um that
you probably don't know I'm actually
sorry I keep pulling the I'm curious
what audience who uses fixup and auto
squash nobody half five people okay so
what you can do if you wanted to do the
workflow that I was talking about is
let's say that we have this patch series
we have some Branch it has like five
commits on it um that's my nice series I
push it up somewhere I get some review
somebody says hey add this to the
documentation right so I can say okay
I'm going to add something to the
documentation I'm going to commit it but
instead of sort of rebasing and trying
to figure out what where to put it I can
say commit this but D- fix up and then I
give it the shaw of the commit that I
want it to be added to right so I want
to I want to fix up this commit with
sort of whatever I've done in this last
here and then um it's just d d fix up
there there's other things too you can
do like reword and there's a couple
different things that you can do but
it's essentially adding to the commit
history and then what it does is it's
actually kind of simple it does this
right so it just creates a new commit
that has a very specific commit message
in it that gives get information later
so it does keep adding to the history
but then you can say get rebase D- Auto
squash and you used to have to do dasi
and do this interactively anyways and it
would sort of it would essentially do an
interactive rebase but move things
around properly so that it would squash
them properly um but right now you
actually don't need to do that um as of
6 months ago or something you can say
rebase D- Auto squash and it will just
rebase it and then if you run get log
you can see that the all the Shaws
changed right it actually did rebase
your series but it took every you can do
this with multiple you got have five or
six fixup commits um and then Autos
squash everything and it it will do the
rebase automatically um if it has
problems or something it'll stop and you
can fix it and and you know rebase
continue or something but um It's
actually kind of a really nice workflow
if you're trying to keep a a patch
series clean um the other thing if
you're doing a rebase workflow and
you're trying to keep your series clean
you can use something called update refs
and the way that this works is if you
rebase stacks of branches so if you're
doing stack diffs if you're using
something like um oh um fabricator or
something like that right where you're
trying to do stacked Branch or stacked
diff workflows um stacked branch and
stack diffs are essentially you're doing
lots of different branches that are kind
of on top of each other right and so the
downside to this I actually don't use
this very much I don't really love this
most people do it because it's easier to
review sort of on GitHub because it kind
of splits up because GitHub you can't
really review commits you can only
really review branches and so people
like stacking branches to make them act
like commits right which is kind of
funny um but if you're doing that and
you have these things and and you want
to change something down at the bot the
the downside of this is if you merge in
patch one you just get patch one if you
merge in patch three you get all three
of them right they're all dependent so
if you're doing merges or something it's
a little but it whatever it doesn't
really matter if you're doing that and
you want to rebase something that's at
the bottom of this um it's a little bit
of a pain in the ass because if you
rebase this what will happen is it's not
going to move the references of the
other of the other commits right it will
just move the reference of whatever the
one you were on when you did the rebase
even though it does rebase the whole
series it doesn't actually move the
pointers of the other ones so recently
they introduced so you can see these are
exactly the same ones but some of them
are kind of they're off and so what you
have to do then is manually move the
pointers yourself right um I see some
people nodding there's a handful of
people that are most of you are real
bored right now about this I can tell
there's like three guys that are like oh
my god um
so that guy over there is GNA love the
other YouTube video too so so if you
say-- update refs what it will do is
essentially what you assume it would do
right is is it says hey I saw that there
were some references on commits that I
just rebased for you and so I moved them
for you right so you don't actually have
to do that um and so if you do it it
just does what you assume it should do
and it moves the references for you and
it'll move a whole stack um you can also
if you do this actually whether you do
this or not it's not a bad thing to just
globally add this configuration because
honestly it's probably a better default
um but they but get doesn't want to be
backwards incompatible so it tends not
to you have to add all of these sort of
updates um okay just like two more
things scaling get so if you have a huge
repository like hundreds of gigabytes
right um or hundreds of thousands or
millions of of uh files in your working
directory there's a whole bunch of work
that Microsoft has done almost
exclusively Microsoft has done recently
to try to scale get to run to be able to
do Windows development on git right um
and all of this stuff has been
upstreamed and so it's all available in
git um but and and I talked about this
in my other talk a bit I'm not really
going to go into it except to show you a
command that ships with Git now so
there's if you install git you get two
top level commands you get git and then
the 145 you know sub commands that git
will run and now you get a second one
called scaler and scaler is only used to
clone essentially um in my other I
talked about all of the things that it
does I'm not going to talk about any of
that other than to say if you clone with
scaler it will set up all of your
defaults to to deal with huge
repositories by default that that is you
don't have to set five other things um
so if you're curious you can it is you
know it's a git command you can go on g
like you can read about about the thing
but essentially all you have to do is
say instead of git clone you say scaler
clone and it sets it up a little bit
differently but it sets up all this
stuff it sets up pre-etching it sets up
up commit graph generation it sets up
your file system monitor for fast
stating um it sets up a partial cloning
you actually won't get all of the files
checked out by default you have to
individually say here's the three
subdirectories that I want um and it
does sparse checkout so um so yeah
anyways if you have a huge repository
checkout scaler it could be an easier
default for for for setting up large
repositories um and then the last good
thing that I'll talk about is work trees
how many of you use work
trees okay okay okay okay okay okay work
trees this is because of what I'll talk
about next which is what G Butler does I
get this type of thing a lot of why
aren't you talking about work trees and
partially it's because nobody really
uses work trees but they can be very
very valuable to some people so work
trees essentially is to enable to let
you to work on more than one branch at a
time so if you for example this is
probably very common you have a
feature did I did I set off an alarm did
I steal something um okay I'll I'll up
if that's what that is
um if you want to work on a feature and
then you somebody comes in is like hey
we need a bug fix right and then you're
like okay well now I have to stash
everything and kind of create a new
branch and switch it and fix it and push
it up and stuff like that work trees
help you not not need to do that because
it allows you to provide a new working
directory for each branch that you want
to work on at the same time and so the
way that works is very simple you have a
couple branches you say get work tree
add give it a branch name and a
directory and it will check out that
branch into a new directory and then you
can go work on it in that directory and
the cool thing is if you commit in that
work tree and then you go back to your
original one and you say what are my
branches it'll show you the branches
that you're working on in other work
trees right so it's a shared object
database you don't have to kind of move
objects back and forth anything you do
in any of them is visible in all of them
so the last thing is the other way to
solve this is with the project that I'm
working on which is called git buler
which kind of solves the same problem of
working on multiple branches at the same
time except instead of giving you a
different working directory for each one
we allow you to do all of them in one
working directory and we just remember
what hunks go in which virtual branches
and let you commit to them so it looks
kind of like this where you have a
different Lane per branch and you can
just kind of drag changes or files from
one lanee into another and when you
commit it looks like essentially that's
the only change that was in that Branch
like you were on it by itself right so
it's kind of nice and that all of this
is in one working directory so this is a
branch I can commit you can see there's
a commit thing in each Lane individually
so I can commit and change and update
and stuff all of them individually push
um and when I push um I get a different
branch on GitHub for each one of these
right so it's kind of like like stacked
branches would be dependent these are
completely independent branches that
live together so it's almost like taking
a merge product and then separating it
out into branches right and the nice
thing is since they all live in one
working directory you know that all of
these branches will merge cleanly
because it has to right um and so this
is how how we're working in the project
that we're working on
um and you can find it on GitHub as well
if you're interested in the project so
that is pretty much it if you thought
that was interesting and want to hear 10
other things random that get does
um you can go to our YouTube channel
there's a there's a video from my FM
version of this talk um other than that
let's get a beer tonight I would love to
hear about your workflows about your G
stuff thank you very much and have a
very very great conference thank
you
thank you thank you SC
