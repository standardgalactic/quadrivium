hello everyone in my last video i began
creating this little game where you fly
around a miniature version of the world
delivering packages to various cities
it was a lot of fun to work on and i was
also amazed by how many people were
interested in the project so i've
decided to continue experimenting with
it and see where things go
but first there's a problem the game
runs fine on my computer but it seems
other computers are not so fond of it
this message likes to pop up right at
the beginning saying that the machine
hasn't heard anything from the gpu in a
while so it's going to try turning it
off and on again
[Music]
unsurprisingly this crashes everything
to try figure it out i started by
setting the resolution of everything
extremely low so that it would actually
run on my little test device and then
one by one i switched them back to full
resolution until that error showed up
again
the main culprit turned out to be a
compute shade i had written that takes
all the country outlines and fills them
in with the index of each country
if you've seen the last video you might
remember how that was used to highlight
the countries as you fly over them and
also to figure out which country your
packages have actually landed in
so i could spend who knows how many
hours trying to optimize that code but
since it does run fine for me i decided
to just save the result as a regular
image file which can then simply be
loaded in instead of having to actually
compute it each time
i then made a few other optimizations
here and there before trying it out once
again on my test device
hopefully this is going to work and it
does seem to be running fairly well
admittedly one of my optimizations was
just turning off the clouds which i
guess is kind of cheating but i'll need
to revisit those later because they're
really slow
now something that's been bothering me a
bit is the quality of the color map i do
have it on the largest allowed size here
a whopping 16 000 pixels across but
considering how much ground it has to
cover that's not actually that big
the original map i downloaded is made up
of eight tiles each with a size of about
21 000 square pixels
i'm going to compromise a bit and scale
each of them down to around 8 000 square
pixels instead which doubles the
resolution we had before
this does not take up a fairly hefty 256
megabytes of graphics memory but i
really want that extra detail in
crispness
while i'm at it i think i'll also switch
maps from february to september just so
it's a little less snowy
i then also want to take the height map
and use it to regenerate the normal map
we created last video at this higher
resolution
i really love looking at this normal map
because it gives such a nice sense of
the shape of the terrain with the added
bonus of some pretty funky colors
here's a closer look at the higher
resolution natural colors as well as the
heights for this region
but the normal map is really the one
that i could stare at for hours
[Music]
as i was meandering about my eye was
drawn to this mysterious swirly shape in
west africa which i have noticed before
but somehow failed to investigate
looking it up i learned that it's this
incredible looking structure of
concentric rings known rather poetically
as the eye of the sahara
now something i've been wanting to
experiment with actually is rendering a
tiny piece of the earth in much greater
detail and this seems like a good excuse
to try that
so i'm using the earth explorer here to
track down the height map tiles for this
particular region around the eye
the data here has been captured with a
resolution of 3 arc seconds which
translates to about 90 meters per pixel
so downloading every high tile would be
hundreds of gigabytes of data
anyway here's the map i'm going to use
this is an area of about 540 square
kilometers going from black at sea level
to white at an elevation of around 900
meters
after some tweaks to the mesh generator
to create a flat plane instead of a
sphere here's the result
like before the heights have been
exaggerated so we can see things more
clearly i think i did maybe about
eight-fold vertical exaggeration
now i'd like to try flying around a bit
but it turns out my code for that has a
hard time coping with the concept of a
flat earth
i've quickly been working on fixing that
though and we can finally now head out
across the sands on an expedition to the
eye
i initially assumed it was an impact
crater because it reminded me of some of
the images i looked at while researching
craters for my old procedural planets
project
but apparently it was formed by natural
terrestrial processes
i have no idea how that happens but i'm
glad it did because it looks stunning
[Music]
i've quickly done one more test this
time in southern africa
i'm pretty happy with the detail of the
height maps but i haven't yet figured
out how to get my hands on equally
detailed color maps because if i disable
the interpolation here you can see just
how blocky it is at this extremely
zoomed in scale
still it's pretty fun to fly around
these mountains here
i'd love to be able to have the entire
world at this scale but that would
obviously involve dynamically streaming
the data in as you're playing which is
not something i feel like tackling at
the moment
so i'll leave this experiment here for
now and see if i can remember what we
were doing before i got sidetracked with
all of this
okay so we have these eight color tiles
which now need to be mapped to a sphere
we also have this little function for
converting a latitude and longitude to a
point on a sphere so we could just use
that to wrap up each of the eight tiles
like so
but if we look at the triangles of the
underlying mesh they look good around
the equator but get really pinched and
distorted near to the poles
so last video we made something called a
cubesphere which we then chopped up into
96 separate pieces to help with
rendering performance the idea being
that any pieces that are off the screen
can quickly be discarded
so we need to match each of those up
with the correct portion of the correct
color tile
my first attempt at this had some subtle
issues which i was worried might bother
the geography boyfriends out there so i
kept tinkering and thinkering and
eventually came up with this bit of code
here we begin by setting up our eight
texture tiles and then once all 96
little mesh pieces have been created we
loop through them and find their center
points each of which then gets converted
to a latitude and longitude using this
inverse function up here
we can then do some simple maths to
figure out which of the tiles each point
landed on which lets us assign the
correct texture to each mesh
i'm never quite sure if the words i'm
saying make any sense so here's a little
animation that shows essentially what
the code is doing
now if we just draw these textures the
same way as before it's not going to
quite work out we need to adjust the
shader to something like this so that
each mesh displays the correct little
portion of its texture
here are the texture coordinates we just
calculated and if we use those at last
we have the correct result
so we can now fly around our higher
resolution world and i'm not sure if the
difference will be all that noticeable
on video but the textures do look
significantly crispier when actually
playing it so i'm glad we went to the
trouble
it also allowed me to scale the world up
a bit without things getting too blurry
so i've made it about 50 bigger than
before
i also want to mention a small but very
annoying issue that i finally fixed if
you look closely you can see that the
plane appears to be vibrating and it's
been bugging me pretty much since the
beginning of the project
i eventually tracked it down to these
two lines of code for rotating the
camera to look at the player
and by just replacing those with a call
to this built-in look at function
suddenly everything was silky smooth
i don't understand what was going wrong
there but right now i'm just happy it's
fixed
all right now something i've been
itching to do for a while is make cities
light up at night and so i've started by
downloading this nice map of city lights
i'll first try simply drawing this
straight onto the terrain and let's see
how that looks
one problem i'm noticing with this is
that on steep terrain the lights get
stretched out which looks pretty strange
and overall it's just not quite looking
how i want
i think it might fit the style i'm going
for better if the lights were all
individual points which means it's time
to break out the compute shaders again
[Music]
so this code here gets run for every
light we want to create
and it basically just loops a bunch of
times and picks different random points
on a sphere
at each of these random points it looks
up the brightness of the corresponding
pixel in the light map and keeps track
of which point had the highest value
ultimately recording the winner in this
city lights buffer over here
then using gpu instancing i'm going to
draw little spheres at each of these
points with this shader
we start off in here by getting the
light that's currently being drawn and
then calculate a sort of time value
where 1 means midday and negative 1
means midnight
we can then set the color based on the
light's intensity and make it only
appear when our time value is below a
certain threshold
finally there's just some stuff for
positioning the mesh vertices and
sending that data along to eventually be
rendered over here
so let's try this out currently it's
daytime so no lights are visible but if
we rotate the sunlight over here we
should see some city lights starting to
appear
we can play around with the size of
these a bit i think they're too big at
the moment so i'll scale them down a
little
something like that maybe
and then all of them are currently
bright white so i'm going to tweak the
dim color over here to something more
orangier shred
i think that looks okay what doesn't
look so good though is this harsh
boundary where the lights switch from on
to off
but that should be easy to fix i'll just
go back to the compute shader where
we're creating the lights and give each
of them a random value which will affect
the time that they turn on
for completeness sake by the way here's
the code i'm using for generating all
these pseudorandom numbers
anyway let's then hop back over to the
shader we're using to draw the lights
and in here we can just add in that
random value to give some variation to
when the lights turn on
let's go test that quickly so here we
still have our harsh line like before
but if we increase the amount of time
variation we should see that getting
broken up with a bit of randomness which
i think looks a lot better
[Music]
i've gone and made a few small tweaks
and added a bloom effect which basically
just takes the brightest parts of the
image blurs it and then adds it back on
top of the original image to give us
this nice glowy effect
i followed this really nice tutorial to
implement that if you're interested in
the details
anyway i think i'll fly around a bit now
and enjoy the lights while i try to
figure out what i want to work on next
[Music]
all right so i've decided to spend some
time optimizing the world mesh you can
see if i switch on the wireframe view
the whole thing pretty much turns black
because there are a lot of vertices in
here but while i've hopped on previously
about evenly distributing points on a
sphere in reality we don't need nearly
as many points to describe the oceans or
flat areas of terrain as we do for
detailed mountainous regions for example
but as it stands if i want lots of
vertices in the mountains then i have to
have lots of vertices everywhere which
is why the world currently has a
monstrous 8.6 million of the things
so i want to try drastically reduce that
number which is very easy
while preserving the perceived detail of
the mesh which makes it somewhat less
easy
but i've got a few ideas for how to
tackle it so i'm going to mess around a
bit and see what happens
[Music]
well this is what happened
i do think it's pretty interesting
looking but not quite what i was going
for
all right i've made some alterations
hopefully it'll turn out better this
time
[Music]
uh there are some small areas where it
almost seems to work but most of it is
just nonsense
i have an idea though nope that didn't
help at all
[Music]
okay let's skip over a few frustrating
hours i've now written this little
compute shader and it begins by just
generating points on a sphere using the
exact same cubesphere approach we've
been using so far
then for each point it looks up the
height of the terrain as well as the
heights at four surrounding points
we can then calculate an error value
which is just the difference between the
height of the current point and the
average height of its neighbors
finally if that error is greater than
some threshold which tells us that it's
not a very flat region of terrain then
we add the current point to be used in
the mesh
also since this is taking place on a
sphere even completely flat terrain is
actually curved so i've specified this
underlying grid so that points can't get
spaced too far apart
so i'll run that quickly and here we can
see the points generated for one of the
terrain faces
at the moment the error threshold is set
to zero which is why it looks the same
as before but if i increase that value
just a little you can see the atlantic
ocean here has immediately lost most of
its points since the height values there
are all zero
so that's again why i have this grid
size here to make sure we get enough
points to render these flat regions
nicely
let me increase the error threshold a
little further and we can see more and
more points being removed so that's
obviously something we can play with to
try strike a balance between detail and
performance along with the resolution up
here
now these points still need to be
connected up as triangles in order for
them to actually be rendered
this is a problem i'd love to learn more
about but for now i'm just going to be
relying on the excellent triangle
library or more precisely the c-sharp
version of it to solve the problem for
me
there were some small squabbles at the
start but once those were ironed out it
worked very nicely
so here we can quickly take a look at
the triangulation it's generating from
our points
and here's what it looks like with the
full terrain which has come down from
about 9 million vertices to just over 1
million now
i should mention by the way there are
much clever solutions for this kind of
thing where the vertices are continually
updated based on the distance from the
camera and so on and i would like to
learn how to implement those techniques
but that's something for another day
for now let's just zoom in over here so
we can get a closer look
and i'm pretty happy with that the more
flat regions have obviously lost some
detail but all that's important really
is that the mesh captures the silhouette
of the terrain because once we add our
normal map back in that's going to take
care of all the little lighting details
we don't need to capture all of that
with geometry
one downside with this new method though
is it takes quite a while to generate
the world about 20 seconds or so so i
wrote a bit of code that just saves the
vertex positions and triangle indices to
a big file so it can very quickly be
loaded in when the game starts
all right something i'd like to try
adding to the game is wind so i'm going
to grab some forecast data from the us
weather service and that comes in some
unfamiliar format so i'm using a little
utility here to convert it into a nice
simple json file
here's what that data looks like first
it introduces itself and lets us know
we're going to be looking at the u
component of the wind which i guess is
the velocity along one axis
and if we scroll down a bit here are the
actual values
if we scroll all the way down to the
middle we should find the other axis of
the velocity and these are all in meters
per second it says
i have gone ahead and written some very
uninteresting code to load these values
into a texture so let's see what comes
out of that
in this little shader here i'll quickly
read the wind vector from the texture
and let's maybe output the speed of the
wind so i'll get the vector's length and
divide it by the maximum speed in the
file which was about 25 meters per
second
and here's what that looks like
i find it really interesting how clearly
defined the shapes of the continents are
i guess it does make sense that the wind
would experience a lot more friction
over the land and slow down but it's
very dramatic
let's go back to the shader quickly and
maybe we could try drawing the direction
of the wind in red and green like this
that's pretty cool looking i think but
what i'd really like to do is spawn in
some particles and have them actually
move around the globe based on this
vector field
so i've been writing a little comfy
shader and in here we have this particle
update kernel which runs for every
particle and simply gets the wind
velocity at the particle's current
position using this function up here
which does some little calculations to
convert the 2d velocity into a velocity
on a sphere
that velocity then just gets used to
update the particle's position
there's also a timer for each particle
and once it reaches zero the particle
gets respawned in this function at the
top which just creates a seed from the
particle's index and current position
and uses that to generate a new random
position for it and it also resets the
timer of course
so here's our little globe and i've
colored this based on the wind speed
with lighter shades of blue representing
higher speeds
let's go ahead and spawn in some
particles and see what happens
well there's a pleasant surprise this
actually seems to be working there's
even a cyclone over here and it's
rotating counterclockwise which i had to
look up is what they're supposed to do
in the northern hemisphere so that's a
nice confirmation that i didn't get
anything back to front in the velocity
calculations at least and if we go over
to the southern hemisphere here we can
see the cyclones twisting around in the
opposite direction
it's surprisingly entertaining to just
watch these points flowing around
it would be nice to see the weather
actually evolving over time though and i
guess i could blend between data from
different days to do that
i'd also love to try do some kind of
fluid simulation to generate believable
weather patterns but those are
challenges for some other time
right now i'm not even sure how i want
to actually implement this into the game
i've played around a bit with the old
cloud system getting them to move about
based on the wind and then perhaps the
player's speed could be affected by the
winds as well
the trouble is just that i'm not really
happy with how this is looking and i'm
struggling at the moment to figure out
how to go about improving it
but there are so many other aspects of
the project i'm excited to work on that
i think i might just leave this
experiment here for now and come back to
it later whenever inspiration decides to
strike
so let's move on to a little detail i've
been wanting to add for a while
the moon
so i'll grab the color map of the moon
and while we're at it i guess we might
as well grab this height map as well
because we can use the same code from
last video to generate a normal map from
it
have i mentioned i love looking at
normal maps
only the world space ones though there
are some good technical reasons for
preferring tangent space maps but then
you don't get the pretty colors which
are much more important to me
anyway we can slap this on a sphere and
just like that we have ourselves a moon
[Music]
let's now get this into over so after
referring to this little diagram i've
written some code that starts off by
calculating the moon's orbital plane and
then just makes it move around in a
circle on that plane
lastly it tilts the moon a tiny bit and
makes it spin on its axis in synchrony
with its orbit so the same side of the
moon is always facing the earth
let's see how that looks
so because the moon's orbiting at this
angle when looking at it from the earth
we'll sometimes be able to see a bit
more of the top and sometimes a bit more
of the bottom
and that gives the appearance that the
moon is rocking back and forth
but it should also appear to rock from
side to side and change size over time
because the moon's orbit is actually
slightly elliptical
this is much more detailed than is
necessary for the game but i'm not in
any particular rush and it sounds like
fun so let's do it anyway
in one of my old videos i played around
with some simple orbital simulations and
this here was a simulation using
newton's equation of gravity
what's nice about this approach is that
we can simulate the interactions of as
many bodies as we want
but on the other hand it can be a bit
finicky and also if you want to know the
position of a body at a certain moment
in time you have to run the whole
simulation up until that time to find it
out
so today i'd like to try a different
approach
say we have one big stationary body and
a second little body that orbits the
first
technically they'd both be orbiting
their shared center of mass but i'm
going to ignore that for today
now one way to define the shape of the
orbit is with two values called the
periapsis which is this distance of
closest approach and the apoapsis which
is the distance of the furthest point in
the orbit
those two bits of information together
define an ellipse and i've written a bit
of code here to visualize that
so this just starts by calculating some
properties of the ellipse and it then
generates a bunch of points along that
orbit and connects them up with the
lines to display them on the screen
and we can see that here
let me increase the apoapsis a bit just
to get a nice elongated orbit
what we need to do now is figure out
where along this orbit the body will be
at any moment in time
thanks to kepler we know one very
helpful fact which is that as the body
moves in its orbit the area that it
traces out in a certain amount of time
will always be the same
so say this is how far it moves in one
week then over the course of the next
week the distance it moves might be
different but the area it covers will be
exactly the same
with the power of geometry
we can transform this fact into an
equation which essentially relates where
the body would be if its orbit was a
simple circle to where it is on the
actual ellipse
so of course we'd like to solve the
equation for this angle big e but it
turns out there's no exact way to do
that
instead we can rearrange the equation
here so that if it's given the correct
value for that angle the function will
return zero
now all we need to do is keep guessing
values until one of them gets us at
least close to zero and that will be our
approximation of the answer
we don't have to guess completely
blindly thankfully we can use something
like newton's method which i've
implemented crudely over here and how
that works along with much more cool
stuff is explained in this wonderful
video
all right so to bring this all together
is this function called calculate point
on orbit and all it really has to do is
pass the kepler equation into newton's
method which should give us a very good
approximation of the angle we want and
it then simply takes that angle and
converts it to a point on the ellipse
let's see how that goes
so here we can see our little satellite
speeding up as it approaches the planet
whizzing past and then slowing down as
it moves further away
i'd say it's looking pretty good so
let's apply it to the moon
at its closest the moon is about 360 000
kilometers from the earth and at its
furthest around 405 000 kilometers
so i'll quickly change the position
calculation here to use our fancy new
orbit code
then i'd also like to add a little
visualization i am going to draw a white
line from the moon to the center of the
earth and a red line just going from the
moon out in the direction it's facing
if we watch this orbiting now we can see
from the red line how the slight
eccentricity of the orbit causes the
moon's rotation around its axis to
sometimes lag behind or shoot ahead of
its orbit around the earth
so if we look at the moon from the earth
again we should see it not only looks
like it's wobbling up and down but also
now from side to side and of course it
appears to grow and shrink over time as
well
this is far from super accurate what
i've done by the way there are many
details to take into account but i did
learn some new things so i'd say it was
worthwhile
now i thought i'd quickly set up the
earth's orbit around the sun as well and
here we can see the earth is currently
tilted away from the sun at least in the
northern hemisphere where our observer
currently is
so if i change the time of day here we
can see the sun appears pretty low in
the sky
fast forwarding about half a year though
we can see the earth is tilted towards
the sun which now appears much higher in
the sky at the same time of day
let's take a closer look at this
apparent motion of the sun and if we
actually draw a trail behind it as we're
stepping through the year in one day
increments we can see how that traces
out this famous sort of figure eight
known as an analemma in the sky
i was curious about this one lobe being
so much smaller than the other and i
learned that that's due to earth's orbit
also being slightly elliptical
so if i switch over here to a simple
circular orbit instead we can see how
the sun still traces out the same basic
shape but the lobes have now been
brought into balance
here i've just brought the tilt of the
earth down to zero as well and we can
see how the sun now appears at the same
spot in the sky every day i thought that
was quite fun to play with
now that we have the sun let's add in
the rest of the stars
my first thought was to just map a giant
texture like this one over the sky but
it didn't fit in very well
i then came across this nice compilation
of star data and i wrote a little script
to load that in
there's over a hundred thousand entries
in this thing but one of the attributes
is the star's apparent magnitude so we
can select only the ones that are bright
enough to be visible with the naked eye
the code then goes on to just calculate
the star's positions and draws them as
little spheres which i'll need to
optimize later
so over here we have about 9000 stars
which i've given some test colors and
sizes based on their brightness
this one here looks like the brightest
of them all which is serious
i'm incredibly bad at stars recognizing
constellations and all that stuff so i'd
need to consult a star chart to know if
i've actually loaded these incorrectly
but i'll just hope for the time being
one quick thing i could maybe check
though is just if the north star is
actually in the north
so i think it should be right about here
and it is so that's reassuring at least
all right so i'll bring the moon sun and
stars into the game soon but i first
want to finish up a rewrite i've been
doing of my old atmosphere shader
it's still very similar to the original
so have a look at that video if you're
interested in the details but there's
some nice little improvements and
optimizations
for example the original version did all
the expensive rematching calculations
for every pixel on the screen but this
is now split up into two much cheaper
steps
firstly since colors in the sky mostly
change quite gradually the sky can
actually be rendered at a pretty tiny
size and just scaled up
the biggest exception is the actual disk
of the sun so that's left out and just
drawn separately on top at full
resolution
the second step is for rendering the
atmosphere over the terrain which is
trickier because the result depends on
the depth of the terrain the main
trouble is that nearby pixels can have
very different depth values for example
around the edges of mountains so we'd
get some unappealing artifacts there if
we tried the same approaches with the
sky
from this paper though i learnt about a
nice technique to get around that
what we can do is render the atmosphere
again but instead of just storing the
end result like with the sky texture
we'll take two dimensional slices of
what the result looks like at different
depths and store that in a
three-dimensional texture
well actually we need two
three-dimensional textures because the
result has two parts
there's the light from the sun that
reaches us after scattering through the
atmosphere which is what we're looking
at on the left here but then there's
also something called transmittance
which tells us how much of the light
that's bounced off the terrain in the
direction of the camera is actually
going to reach the camera because some
of it will get scattered away as it
travels through the atmosphere
thankfully these textures can be really
tiny and still give good results
otherwise this obviously wouldn't be a
very good optimization at all here's the
code by the way where this is actually
applied so we first remap the terrain
depth to a value between 0 and 1 and
then that gets used to sample from the
correct slice of the 3d textures
or more precisely it will be used to
blend between the two closest slices to
smooth things out a bit
finally over here it's just applied to
the terrain color
so let's quickly see what this all looks
like
here we have just the light from the
atmosphere by itself
then here are the transmittance values
and lastly the original color from the
terrain
the terrain is looking a bit flash at
the moment so let's now bring all the
layers together and we get this which
has a much better sense of depth i think
okay let's finally have a look at what
all the stuff we've been adding actually
looks like in the game
[Music]
so hopefully you've been able to see the
stars twinkling in the background and we
should see those now slowly fading out
as the sun begins to rise
[Music]
i'll quickly veer off to the side here
because i want to show how we can see
the shadow that the earth casts on the
atmosphere
it doesn't perfectly line up with the
terrain unfortunately because for
annoying performance reasons the earth
is treated as a perfect sphere in the
atmosphere marching loop
anyway as we head out over the ocean you
might notice i have added in some little
wavy undulations onto the sphere here
just to try break up the perfect
smoothness of the horizon which i
thought looked a bit strange on this
miniature planet
this is done in the vertex shader just
by offsetting the heights of the
vertices a little bit based on some
layers of simplex noise as you can see
it's extremely crude
i would like to make it more lifelike
and i've actually already downloaded and
processed some wave direction data but i
still need to figure out what exactly
i'm going to do with that
in the meantime i have made some other
small improvements to the water for
example most lakes appear pretty much
completely black on the color map i'm
using
so i've tried to find alternative images
of some of the larger lakes and just fit
them in as best i can let's hop back
into our plane and maybe go pay those
lakes a wizard
perhaps we can even drop off some
packages there since that's still the
only thing you can actually do in the
game
i'm once again very guilty of neglecting
the gameplay and just getting lost in
all the little details
still some of you expressed interest
last time in simply being able to fly
about and see the sights which is why
i've tried to put at least some effort
into optimization this
episode you'll probably still need a
fairly powerful computer to run it but
i'll be making it freely available to
download for anyone who'd like to give
it a try
i'll also soon be making the source code
available to everyone in case some of
you are interested in taking a closer
look at that or even adding your own
features to it
or fixing my bugs of which i'm sure
there are many
i've had a lot of fun building this so
far and even if this last episode was
more about little tweaks and
improvements than new exciting things i
hope it's still been interesting to
follow the process
so thank you as always for watching and
until next time cheers
[Music]
you
