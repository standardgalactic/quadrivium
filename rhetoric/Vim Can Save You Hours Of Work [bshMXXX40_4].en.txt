some of the most common comments that i
get
from you guys the viewers is about vim
i've done so much content about
vm in the three years of the youtube
channel and i often say that i really
think
everybody owes it to themselves to learn
the vm text editor
if you spend any kind of time in a text
editor you really owe it to yourself
when that means if you're a programmer
or creative writer whatever it is you do
in a plain text editor
them can save you so much time but
people
often ask me like hey can you provide
real world examples of how
vim actually saves time because i think
a lot of people assume
you know vm is so hard to learn it's
going to take you weeks or months maybe
even years to really learn
vim is it worth it in the end does it
really save you time and
yes it is worth it and yes it saves you
hours and hours and hours of work
compared to
using a traditional text editor vim can
actually do some
pretty amazing things so today i just
wanted to give you some real world
examples
of how vim is much faster at getting
work
done than your traditional text editor
now let me switch to my desktop and i've
opened up
this bash script here that i wrote this
is just a simple d menu script there's
really nothing to see
as far as the script is just a quick and
dirty script but it's something we can
play with
and the first thing i want to show you
guys is moving lines around
moving lines of text within the document
because that's something you do
often especially when you do any kind of
scripting or programming and that's
something that
vm handles really well the most obvious
way to move a line is simply to
delete it and then go to the area where
you want to then
put it so to delete a line dd right and
then
navigate to wherever you want to put the
line and then type p
now most of the time i find
i'm deleting a line and pasting it right
after
the next line and that seems to be what
most people
end up doing for for the most part when
you're moving a line oftentimes you just
want to swap the current line
with the next line all you need to know
is that ddp
all one command swaps the current line
you're on with the next line you see
these two lines here
doom dot d slash config dot el and doom
dot d slash init dot el
if i just want to swap those lines just
remember ddp
just swaps the current line with the
next line you don't even have to think
about it
and again that's typically what you're
doing most of the time when you're
moving a line you're just moving it to
the next line you only really have to
think about
dd and then where to paste it if you're
moving
more than one line away one of the cool
things i've discovered with vm
is that you can quickly search for a
string of text
and find the line that contains that
string of text and then move that line
wherever it is you want in the document
and to do this
what i'm going to do is let me type
capital g on the keyboard i want to go
to the last line
of this document and i've got screen key
on
and that is not wanting to get out of my
way i'm going to turn
screen key off you guys really don't
need to see the
screen key commands but anyway i went to
the last line here in the document
by typing capital g and really i just
wanted to search for a string of text
ultimately you see the word ultimately
in the this line right here
i've got my cursor above it because i
want to be able to search for ultimately
so i can't be
past it so i'm going to do colon to get
into
command mode and then i'm going to type
slash ultimately
slash meaning search for the word
ultimately then i'm going to do another
slash and then i'm going to do
m for move where do i want to move this
line that contains ultimately
i want to move it to the end of the
document let's just do the dollar symbol
that means move it to the varian
and there you go it searched for the
line that contained the word ultimately
and it moved it to the last line now let
me you to undo that and put it back in
its correct place
and you could do fancier things with
that same kind of command instead of you
know searching for the string of text
finding that particular line
i could search for a string of text and
then select one of the lines around it
and move that line for example once
again i'm going to do colon slash
for search and we'll search for the word
ultimately but this time i'm going to do
slash
and i'm going to do plus 1 m
meaning find the line that contains
ultimately and then plus one
meaning i want the next line i don't
want the line width ultimately i want
plus one lines so i want the line with
alacrity that begins with alacrity here
find that line m for move where to move
it
dollar symbol of course would move it to
the end of the document but maybe i want
to move it
two lines up so i'm going to do minus
two meaning go
back to if i did plus two it would mean
move it forward two lines move it down
two lines
now when i run this command it may or
may not move it to where you think
because
when i move this up two lines it's not
going to be
one two you know you're thinking two
lines up well that's that blank line
right there well that's not exactly
imagine you're swapping these you know
in place
so really it's going to end up above
this ending case statement you see esac
it's going to be the line above that
actually is where it ends up i believe
let me
hit enter and actually check that yeah
that is exactly
where it ends up so let me you to undo
so that is you know moving lines
after you search for a particular string
of text i'm going to go back to the top
of this document
gigi to go to the first line again
capital g to go the last line gigi to go
the first
line by the way cursor positions i i
don't know if a lot of you guys know
this but
to go back to the last cursor position
that you were at
g semicolon so if i do g semicolon right
now it goes back to that esec
that ending esac statement because
that's where my cursor was
previous to that gg back to the top of
the document
one of the really cool things about vim
is visual mode
visual mode allows you to select blocks
of text it selects multiple lines of
text
you can almost think of visual mode and
vm as being kind of like a
multiple cursors kind of mode because
you once you select all these lines you
can then
run the same command on all the lines so
it's a really powerful thing
first of all let me indent multiple
lines
this actually doesn't require visual
mode you can actually just do this
straight in command mode
in them say i wanted to indent
this line here line 10 all the way down
to the end of this
array line 43 so if i wanted to indent
lines 10 through 43 i would type colon
for command mode i could do
10 comma 43 that's simply a range lines
10
to 43 and then do the greater than sign
that's the
right pointing chevron hit enter
and we just indented lines 10 through 43
you can see
the lines before it were not indented
the lines after it were not indented so
that's a really easy way to indent a
block of text
and you can always tell you know the
line numbers many of you guys are using
line numbers in vm
anyway so it's really easy to figure out
lines what to what before running any of
these commands if you don't have line
numbers turned on in vm i strongly
suggest that you actually turn on the
line numbers
one of the things that i've discovered
with vm and i use this all the time
in my scripting or maybe i'm importing
uh
comma separated values from a
spreadsheet i'm getting a list of items
or
importing maybe a table from my mysql
table or something you get this
kind of list of items and maybe it
doesn't have punctuation and it needs
punctuation or it has punctuation and
you want to remove the punctuation
you know you often find yourself with a
list of items in lines
and you need to add something to the
beginning of every line or delete
something from the beginning of
every line or add something to the end
of every line
that is something that's tedious and a
lot of work in a standard text editor
but in vim
vem makes this really easy so this
declare statement here
this is an array an array in bash
scripting typically
is something that's got parentheses and
then inside it it's got a bunch of
values that are wrapped in
double quotes and you can see that's
exactly what is happening here
but if instead of having these array
items
as individual items maybe i just want it
to be
all one item which would mean i would
need to get rid of all the double quotes
except
the very first one and the very last one
so it's really
just one big item in the array now
how would you go about doing this well
vm makes this really simple in a regular
text editor i would just have to go
in here through the mouse or the
keyboard get to every double quote and
delete it
then i just get into visual block mode
here
to get rid of the opening double quotes
i would type control
v to get into visual block mode and then
just go down
selecting all the double quotes i went
too far and then
once i've got to the end of the double
quotes type d on the keyboard for delete
and all of the opening double quotes are
now gone now i still have the ending
double quotes
to all of these lines so how do i get
rid of the
ending double quotes well for me i would
probably use a macro for this
so let me go up one line and i'm going
to type q
on the keyboard for record a macro so q
records a macro and then set it to
any key you want i'm going to set it to
two so you see at the bottom it says
recording at
two so everything i do from now on is a
recorded
macro and what do i want to record i
want to record this command here
j to go down one line and then the
dollar symbol to go to the end of the
line
x to delete the character at the end of
the line which is going to be double
quotes that's the last character on each
line
and then i want to type q to finish
recording that macro
and now i need to run that macro but we
need to know exactly how many times to
run that macro
i want to run it from this line here
that starts with awesome that's line 11
and i want to run it all the way to this
line here which is line
42 so 11 to 42 how many times would that
be
that's 31 right so let's try that
so let's do 31 at 2
and it ran that macro 31 times
and it removed all of those double
quotes now that
me talking it through you know takes a
little longer but honestly just
doing it i could have removed that
beginning double quote
and the ending double quote from all of
those items in seconds you know like
seriously like 5 seconds 10 seconds
it would have taken a couple of minutes
to do that
in your standard text editor and this
isn't a very long list
imagine this was hundreds of items or
thousands of items
it would take you hours maybe days to do
that in a regular text editor the
traditional way going through and having
to delete things
now let's imagine that this array
started life looking like this you know
it was
just this one item here and we need to
go back and
actually add the double quotes at the
beginning and at the end of each line
because that's a little trickier
how do you go about doing that well the
first thing i would do
is let's go back to this line here and
what we need to do again is to get into
visual block mode so do control v
and then select the next it looks like
30 lines so you could do 30 j 30 down
i need to go down one more so unless j
one more time select all of those lines
then you need to get into command mode
from here so do a colon
and when you do a colon from visual
block mode selecting lines you're going
to see
single quote less than sign comma single
quote greater than sign
what does that mean the single quote
less than sign is the first
line selected the comma is just a comma
the single quote greater than sign is
the last line selected
it's a range right it would be like 0
comma 5 is a range from 0 to 5.
this is a range from the first line i
selected
to the last line selected i want you to
do this on
all of those lines basically and what do
i want you to do well i want you to do
this
norm for normal mode space capital i
what does capital i in normal mode do in
vm
it gets you into insert mode at the
beginning of the line that you're
currently on so it's going to get me
into insert mode
on all of the lines selected at the very
beginning of the line
and then what do i want you to do i want
you to type
single double quote and if i hit enter
on that
we just added a double quote to all of
those lines now we still need to go back
and add the ending double quote now can
you guess how we would go about adding
the ending double quote well if you
guessed
very similarly then we're going to have
to get back into the command mode
actually visual block mode first let's
select all the lines actually i don't
need the line with quit
because it already has double quote at
the end so let's start with zsh
and go up to this line here because
alacrity also is going to need an ending
double quote
so let's get it back into command mode
so from here type colon
and then again it's a range from the
first line we selected to the last line
we have selected
again normal mode and this time in
normal mode what do you want to do i
want you to go to the
end of every line so the dollar symbol
then i want you to get into insert mode
just a lowercase i this time because i
want you to get into insert mode where
we're already at which is at the end of
the line
and then i want you to just type a
double quote
and that actually did not work we get
obviously an
error there it actually inserted the
double quotes but it inserted it
not at the very end of the line we're
one character off so what i'm going to
do is i'm going to you to undo
and then i'm going to type colon again
to get back into the command mode i'm
going to do a up arrow
to get back to that last command i did
and
what i want to do this time is instead
of doing the dollar symbol i
i'm gonna do capital a so in normal mode
i want to type capital a which means
append to the end of the line double
quote let's see if this works
and there we go so a little trial and
error there
i should have known that just i was not
going to do the very last character but
capital a
gets us that double quote at the very
end of the line
now one of the most common things i do
within vim i'm constantly typing cw
for change word for example if i go to
the top of this document here
and maybe i want to search for derek but
maybe i want to change derek
so maybe i want to do cw for change word
and i
type dt instead of derek right let me
undo that well i could i could certainly
do that so i'm always doing c
cw for change word you're often
misspelling a word and the easiest thing
to do is just
cw and then retype the word the correct
spelling
but what if you want to change multiple
words
that you've searched for now this is a
really neat command so
searching of course is just doing a
slash and then i'm going to search for
the word
the t-h-e because it's probably in this
document
a few times did you know that you can
actually change
the search terms for example let me hit
enter to actually go to that very first
instance of th
e now if i type cw i could change that
word
but what if instead of cw i typed
cgn cgn means change the next
search match so change the next match
of th e so c g n and you see
where i was at on th e disappeared i
could type something new maybe i want to
type th
e all caps then i'm going to hit escape
and then i get to
c g n again i go to the next instance of
the and i could change that to th e
escape now if i wanted to do this
multiple times instead of doing cgn
and then typing the word and escape
every time i could just type period on
the keyboard what is period
period means repeat the last command i
just did so if i did period
and you see otherwise is now otherwise
with th e capitalize if i do period
again
the next instance of the is the all
capitals
t-h-e and if i hit period one more time
there's no more instances of t-h-e
so let me escape and i'm gonna u to undo
a couple of times to get the
correct spelling of th e back into this
document i'm going to escape
one other thing that can save you all
kinds of time
if you're constantly typing the same
things
maybe lengthy names of something maybe
you're always adding the same
copyright or you're always referring to
the same
company or foundation or something you
know you can set up abbreviations
in vm for example if i wanted to let me
set up an abbreviation with colon
a b for abbreviation and i'm going to
set this abbreviation fsf
space what do i want the fsf
abbreviation to stand for i want it to
stand for
free software foundation
with the correct capitalization i'm
gonna hit enter on that now
let me just start typing something here
for example if i wanted to
write something about the free software
foundation instead of having to write
free software foundation three words
rather lengthy i could now just do the
fsf
was founded in 1985.
now did you guys notice when i typed fsf
it immediately expanded
to the free software foundation that's
pretty neat now
sometimes you may not want fsf to expand
to the free software foundation for
example
let me type o on the keyboard to get
into insert
mode on the next line i'm going to type
the fsf
space and then it expands to the free
software foundation
web address is fsf
and then i'm going to do control v
meaning
don't expand this dot org
and you see that time it it just keeps
fsf
as fsf it didn't expand it to the free
software foundation so
abbreviations are really neat again if
you find yourself
typing the same proper names for
companies or places or in this case
foundations
i strongly suggest you use abbreviations
they just make your life so much simpler
and they save you a ton of work
now let me delete those lines there the
last thing i want to mention
is running shield commands from within
vim most of you guys know you can run
shell commands within vm all you need to
do is do the colon to get into command
mode
type the exclamation point meaning what
i'm about to type is a shell command for
example if i did
exclamation point ls it's going to run
ls command
in the directory i'm currently in where
this file is located
and you know i get this ls here it
really doesn't do anything of course i
could pipe that into this document
you can do all kinds of really neat
things by using shell commands within
vim
but where it really comes in handy i
found is how many times have you opened
a file in vm and started editing it
and then you go to write it and it
complains hey this file is read only
because
you don't have permissions to actually
write that file maybe it was a file
that's owned by the root user and you
opened it
as your home user how do you get around
that well an easy way to get around that
is simply
using shell command mode within vim now
there's a lot of things you could do in
command mode to fix this problem
obviously you could
uh chmod the file to get the correct
permissions or
change ownership of the file or whatever
you want to do
but what a command a lot of vm users
just have memorized to get around that
read only error
is this command right here i'm going to
do colon w
for right of course space and then
exclamation sudo
all one word and that's basically saying
hey this next command is a shell command
what's the command
it's the sudo command space and then i
want you to run this command line
utility t t redirects output
somewhere where where am i redirecting
the output to
i want you to redirect it to the file
i'm currently working in so just do the
percent sign
and that is an easy work around if you
ever go to do
colon w and it says i can't write to
that file because you don't have
permissions just try colon w space
exclamation sudo space
t space percent sign now before i go i
want to thank a few special people i
want to thank the producers of the show
devon friend gabe corbinian mitchell
akamyarch 5530 chris chuck david the
other david donny dylan gregory lewis
paul pick vm scott and willie they are
the producers of this episode
without these guys you wouldn't know
about how vm can save you hours and
hours of work you wouldn't know about it
you also wouldn't know about it if it
wasn't for each and every one of these
ladies and gentlemen these are all my
supporters over on patreon because the
distrotube channel is sponsored
by you guys the community i sincerely
thank each and every one of you that
help support my work if you'd like to
support me consider doing so look for
distrotube over on patreon
alright guys peace eat your heart out vs
code
