who is going to start
you
okay
we have
written some questions for him
yes
my first question is
we don't see
much online and i'm very interested in
what he's doing now and is he still
working on and with ford
yes of course
uh can you hear me
yes yes
okay
i have a
wonderful version of color force
which i use
almost every day
i'm not doing anything impressive with
it just messing around with computers
um basically i'm retired
i spend a lot of time
exercising
trying to stay alive
making food
very very pleasant very pleasant life
and i
certainly don't want to be under any
kind of pressure
to produce things
so i'm
basically not
i have a number of applications in color
forth that i enjoy
um
they are
emphatically not portable
fourth to me i agree with ulrich it's a
personal language and i'm doing it my
way
and
[Music]
i would be happy to share ideas
but no one would be interested in my
fourth god
i'm not sure i think we're all
interested in everyone's ideas and
especially in yours
i would love to see it
um sometime maybe i can show it to you
but
i'm not set up to do that now well
what's the computer are you doing it at
the moment
sorry are you doing it on a ga 144
another computer
a special computer maybe
it's on a pc
i've got a
4k
display and it's all tuned to 4k
um
although i have it parametrized so i
could display it
on 2k
it doesn't work very well
that means it's small screen
4k
55 inch
55 big screen
55 inch 4k
display it's a pcl
television
okay
it works just fine
you only do force on it
or also other things
um i browse the web and
youtube
okay so
that is my fourth display
it's very nice to meet you
yeah thank you yeah go to old club here
from
1979 about
okay
and we are rather active still with a
few members maybe 30 members are active
and more than 100 members
are
are there but not not here normally
and we're all very happy
to use force because it's very flexible
and very basic you can do very smart
things with a few with a little bit of
god
it's always been my favorite language
i'm impressed i'm very happy i've
offended it i'm impressed with how many
people are interested
um
i gave up long ago
trying to promote fourth
yeah it's it's a hard sell
and
i would just rather
use it myself
yeah
i can understand that it's really a hard
sell
you can write beautiful code with it
with most people only do a stack
manipulations i believe
and that doesn't help
beautiful code is right
it's
back in the back in their old days
i thought that people would write their
own programs
and then fourth would be a great vehicle
for doing that
and
it would appear that a thousand people
out of uh
what eight billion
are willing to write their own programs
yes
most of them people like to copy and
paste only
question for check more
i really wonder what your most
used application does
the application i use
that
the application you mostly use
it's a clock
i have a
screen full of numbers
the date and time
the julian day
moonrise
moonset
the number of days till
things like daylight savings time
all of the
time questions that i ask myself have
got the answers
and it's a pretty display that sounds
nice thank you
one thing i have done
recently
is the new character set
you may be aware that i've done many
many different character sets
um this one is the prettiest
and simplest
and it has a unique property
normally what i have been doing
would be i would generate
a character
as a raster
library
i would have
what 48
symbols representing the characters
stored
in
ram
um
it finally occurred to me that computers
are much faster than they need to be
so instead of storing the
characters i store the code that
generates the characters
and when i want to display one i compute
it
computers are pretty fast to do that
with both perceptible delay
and it
saves memory
uh it adds flexibility you can edit your
characters uh on the fly
and you can invest
a fair amount of work in calculating a
character because it doesn't matter
so i've got pretty characters
uh
available on demand
i encourage people to design their own
characters it's fun
it's uh
it's easy
and it gives you uh another customizable
aspect of force yeah
very very nice uh so there's something
that is called display postscript on on
on mac os 10 for example or i don't know
whether it's called like this so this is
something like display force
so
a fourth program runs when you display
text
because it draws the characters
yep yep great
i like that
i'll show you the characters sometime
when i can
they're very pretty in 4k
i can draw very large characters
they're all scalable
and smooth curves
uh chuck this is done um
you gave a talk i think it was last
fourth day where you were writing
directly to the memory buffer
if that's what this system you're
describing is you're writing directly to
the memory buffer
oh yes you you have to have a
that
kind of
speed
if you go through the
windows
interface it's much too slow
of course
high tech
this is us kargers here
um
hi
uh from the interplanetary networking
special interest group
uh
i know you have been
for many years interested in space and
space exploration
have you
been working uh at some point uh about
the delayed tolerant networking
and interfacing with force
what is called dtm
i
i don't understand
dtn is a protocol
that
using binder protocol encapsulates the
tcp or
ltp glider transport protocol to connect
with the space it's used in the
international space station and
also in most
rovers
and
i
i've been
looking to
different languages to interface with
dtm
we are working with pinterest surf in
this in this project about
interplanetary internet
and i would like to know if you have
been interested at some point in in this
kind of communication
um
i'm indeed interested but i've
i've done nothing in that direction
in fact i haven't even been able to get
onto the internet
or
the
tools that windows provides
are
opaque to me
and
i've just been forced to deal with
things locally
thank you
hi chuck my name is bob flanders it's
pleasure to meet you sir
um
[Music]
yeah
somebody just brought up the original
listings
uh this is here bob nice nice to meet
you nice to see you in the group nice to
meet you too peter it's been a uh it's
been a long time coming um
[Music]
uh
there's kind of an interesting
little story about what's on the screen
on 2011 or thereabouts i got in touch
with chuck to
ask if he had any old code
for the ibm 1130 which was the first
computer he wrote fourth uh-oh of fully
working fourth on as i understand it in
fact the name of of fourth
would have been
f-o-u-r-t-h had it not been for the
1130s limited file system which only
allows five characters
so it had to be named for ph
to be a file on the 1130 just kind of
fun and
has led to the idea of it being
something that we go forth
um
so anyway in 2011 i sent a message to
him asking if he had any
uh old code for the to be 11 30 and he
said yeah he'll rummage around and
and he'll take a look and see what he
has and he found this
and he sent it to me but i missed the
message or something
well a few years later i guess it was
2017 or so
uh carl claunch who is a fellow ibm 1130
enthusiast
uh sent me a message that he had spoken
with chuck
and chuck had said i think i send it to
this guy flanders and
um but i've he'd since gotten rid of the
papers and so i rummaged around in my
gmail and i found it
and it turns out it's either a
pre-version one or pretty close to
version one
[Music]
copy of the code and the basic kernel
the you know the assemble level words
and then the additional words on top of
it
and um i had a
tiny
amount of
contribution
to helping
carl get it working on the on an ibm
1130 emulator
and uh carl actually has a working ibm
1130
and um
[Music]
he's he's gotten it working there was
one critical word that would probably
all be completely lost without
had it not had
that wasn't there in this version which
was period so you couldn't print out the
top of the stack
i think that the top of the stack may
have only been shown in the indicator on
the
on the 11 30 for the for the accumulator
and um it was a very interesting a very
interesting bit of work
to to
put it together and get it running there
were there are some typos or some not
typos but some some handwritten
notes on the code and there was some
things that needed to be
just a little bit maybe also we made
typos
putting it in
and um there is there's actually
floating about out there a version one
fourth of the ibm 1120.
the way i became interested in fourth
personally
was i was
hired by
mci telecommunications
like 1986 or thereabouts
and i had no fourth experience but a
friend recommended me
and i came in and the guy said well
listen let's let's give you a try first
thing i want you to do is write a word
that shows a time stamp
so i fumbled around and wrote a time
stamp then the next thing he said is i
want you to implement drivers
for a multi-port
serial card
and i wrote that and then he said okay
you got the job
and i ended up working for eight years
uh
using lmi fourth under some dos extender
to uh implement a system that ran on
at the end i think it was nearly a
thousand
uh what were called site controllers and
they were put in they're co-located at
the various mci facilities and talked to
digital cross connects and extended um
extended frame monitoring units and it
would send all the information back to a
central computer which would
then use its interface the fourth to do
things like you know a customer call say
hey i need a
a circuit from washington dc to
los angeles and they would go into the
digital cross connects hook up the
hook up to t1 get it all running and
then
you know go out and get it delivered to
the customer at their end points to
whatever provisions were necessary
and it was a very cool and interesting
system i haven't done much with fourth
since
um
but i'm always like i'm always looking
backwards like oh i want to do this i
want to work on like i'm writing 11 30
uh emulator
and things like that so it's always of
interest me to to do things with older
code
not necessarily
[Music]
uh new i program in c sharp and for i
[Music]
do a lot of sql stuff on the you know
regular it guy
anyway pleasure to meet you sir thank
you so much uh fourth is
is brilliant it was brilliant it is
brilliant and shall continue to be
better
okay
well i can
i can add a little bit to the 11 30
story
it isn't as if i was sitting in an
office
working with the 11 30.
the 11 30 was on the
abandoned production floor of a textile
mill
it was a huge room
about uh
go
200 feet long and 100 feet wide
and the exact center of it was this 11
30 which had been delivered by ibm
and nobody knew what to do with it
except me
and so that was the environment in which
forth was invented
it was uh
challenging in many ways
yeah
it was uh the 11 30 i've if there hadn't
been 11 30 in my high school this was
about 1972
when i started using one
you know at that time i had no
understanding of what i was doing
then been to the 11 30 i probably would
never have gotten into computing
but
that started my career
first minute computer yeah yeah
i call it my first personal computer
hi chuck
hey
um
we've met a couple of times and
many of us here will remember
the
august 1980 edition of bytes where you
introduced the language to
a much wider audience
but that was the time that you felt that
the software had been done
and you were now looking towards the
hardware could you
could you tell us a bit about um
how
you made that transition from
software to hardware and and and you you
move towards the
uh the novix um
uh
period of
of fourth history
yes i did feel the software had been
perfected
in the uh
in context of fourth
what i was doing at the time
was
putting off putting forth on many
different
computers
and interfacing it with many different
devices
and this of course is very easy to do
that's why fourth
exists
but
the interfacing with many different
devices got very frustrating because
these devices were badly designed
the interface i had to go through was
bizarre
baroque
and i got kind of tired of doing that
and i said well i could design a better
interface
i can design a better computer
now
people didn't do that at the time
this was um
the business of someone else
so it took really a leap of
a leap of faith
to abandon software for hardware
and i actually didn't because i
had to develop the software
to design the
hardware but thereafter my software
efforts went in the hardware direction
and simulators and layout tools
and it was very rewarding my my hardware
worked
and it worked
much better than anyone
expected or even would admit
and i'm still doing that in the sense of
the green arrays
multiprocessor chips
they are incredibly simple
incredibly effective
and totally unpopular
so
fourth hardware is just as
unacceptable as for software
yep and that's that's absolutely fine
some people like fourth like everybody
here would imagine other people don't
understand
um hi it's howard oakford here we we've
met a couple of times too i'd just like
to say
thank you you've made my career in
programming much more fun than it would
ever have been otherwise
maybe a thousand flowers bloom
thank you
g'day chuck uh i've met you once back in
88 back in the
australian uh symposium here
and uh but uh and i've been using fourth
since the early 80s you know i started a
big project
um with that and i've been using it ever
since and yes you know a lot of people
won't admit that it works so well you
know uh that's true with the hardware
and software and it also makes the
hardware a lot simpler we don't have to
use any complicated hardware
and you know that was my original fourth
board i did up you know with a rockwell
chips et cetera and then you know that
down into a module you know a little
credit card size module but this is
mid-80s and um and that was okay for the
mid-80s and now i use uh the p2
multi-core processor with 64 smartpins
etc
and um
and so
and i so you do a lot of embedded
control but
this is a this is a question i really
wanted to wanted to ask you you just
mentioned the green arrays it's got all
these processors on there i've got the
the propeller parallax propeller
processor we've got eight cogs well
eight cores
it has hub ram so it shares everything
and every every one of those cores can
access all the i o equally
but
when i look at the green arrays i can't
figure out how i can use it you're
saying it's an effective processor what
has it uh proved to be effective in you
know really
how can i use it for general embedded
control and
smart stuff
that's a good question
it has 144
computers
they aren't exactly cores they're
independent computers
they communicate with one another
and the ones around the edge communicate
with pins
so if you want to control a pin
you have to use the computer which is
attached to it
and that computer pretty much can't do
anything except run that pin and
communicate with its neighbors
so
you end up building a little network
of computers
not 144 but maybe half a dozen
that all cooperate
and communicate
in
running the protocol on that pin
it's a
it's a fun thing to do
it's totally different than any other
computer where you would just run a
serial processor
your your whole attention
is in coordinating the efforts of as
many
independent computers as you
want i i don't think i've done an
application with more than about uh
a few dozen computers
so also chuck so in talking about
applications
what what do you what if you had to
showcase an application say look you
know look how well it does this
um and and i'm
bearing in mind too that uh from what
you said already there's a bit of work
setting it all up for those calls to
communicate with one another or you know
those little cpus to communicate with
one another i'm familiar with the whole
architecture but uh what would you say
which you know you could hold up an
application and it's like
man you know
this does it so well
well one obvious applications run forth
to
you can use some of
some of the computers to drive a display
you can use some of the computers to
read a keyboard
um and you can put them together
to
run forth
uh i haven't done that i never got
around to doing that although
i got close
we've got
each computer has 64 words of ram
and one of the computers
interfaces with a um
flash memory
so there's
infinite infinite amounts of data
available
uh another set of three computers can
commute with uh
communicate with dram
so what you'd want to do is set up a
system whereby
you read code from flash you store it in
dram
and you read it back from dram and do
whatever you want to do
um
yeah so so with with you know so you
know i'm wondering why you haven't done
a pc with it yet come on you know you
can do it but the thing is
okay so i use chips you know so that so
that one's got 512k
of ram uh that and plus all the 4k ram
on each cpu etc and uh so it's really
easy to make it work and and if and i
talk to an io and i can even instruct
the i o to do something by itself it's a
smart io it has everything built into it
i you know i keep racking my brains
looking at the the green arrays and i
can't think you know like even if i
could get it to do something and boy
it'll be a lot of work you know it'll be
fun but it'll be a lot of work to do it
and you mentioned memory in displays for
instance said well there are a lot of
more effective ways of doing displays
but i i can do a vga or even
a hd display from the ram on this one um
but i have to add bolt on all that ram
onto the green arrays you know i'd
really love to see a greener raised one
that was had less cpus had a bit more
memory on each each one and and and and
more access to the i o when it was like
that would be really great you know i i
i you know
64 cpus forget about 144 give me 64. and
you know
as you said you don't need to use many
we'd love to have that we've had plans
for doing that
but we've never been able to make such a
chip
right yeah
and we'd have to integrate someone
else's
memory
onto our chip and that isn't easy to do
yeah well you know i appreciate i i just
wanted to ask you that question because
it's like it's it's the one thing that
bugs me it's like these fourth chips
right going right from the early days
anovics and all that and they're all
really great and and and then you know
like i've like i've got 21's i've got
the the
shabooms and everything like that but i
can't figure out how to use the green
array so i'd really love to see some um
application that i'll even forget about
application notes but just by showcase
something that showcased that particular
chip was used really well
well the the biggest advantage of the
144
is it doesn't use any energy
somebody have to put a lot of energy in
to make it work though that's the
trouble
yeah well thanks chuck yeah now i
appreciate it paul very much all your
work and we i let you know when we
we love fourth the other question can i
i just wanted to ask you nothing to do
with technical things but you know we
often talk about how
how is it that we can really promote
forth you know it's just that mindset
you know you've been you've had way more
experience with encountering the
opposition
and uh with with people to accepting
fourth and it's like well this before i
had fourth built into the
chip and silicon on on this particular
p2 chip and um
that was a hard task to get that done at
the time
and
but fourth is a dirty word you know
people just don't like companies don't
like mentioning it this is like what we
do you see anything that would help
break down that barrier
a killer app
we've been looking for a killer app for
50 years and haven't found one
no well after pcs you know i think i
think most of the fourth use you know
i've always used fourth on
micros
embedded
and and so
uh by
it's they're built into
airports and roadways and and all kinds
of vending machines anything you know um
and so they're all out there people just
don't see it but it keeps going 24 7.
and it's also my um my prototype like
the language that i use you probably
want a prototype this you know people
are used to using breadboards or force
you can move stuff around like that you
can fritz all you like with forth and uh
it's very quick so
you know i have a project now where they
are saying hey you know um
do it with arduino you know
c and everything else like this i'm
thinking they can ask me but i'm still
doing it my way because you know i can
get it done but um yeah but it's just
that opposition to it and
i i don't know if there's anything we
often talk about it on our group
on force 2020 how how we can
get young people interested it's not
going to be a killer app i think it's
going to be the easy use
how they're using it make it it's how to
make these force you know can use forth
easily
straight away
they say rpm um i have a question for
chuck
um
[Music]
chuck uh was the
sun uh um
forced in bios or or open force
open
how was the name open os
open boot open
yes exactly open boot was this not the
fourth killer app because this was
installed in so many computers and also
on the one laptop per child i know this
was
a really big a really big installation
of force
yes that's true but
bios is such a
obscure application that it didn't
attract any
anyway any any attention
it was a technical
triumph
the attention that open boot attracted
was
attempts to replace it
with conventional
software
that
didn't work uh fourth didn't work
to because there was not an industry
behind it
that's always been a problem
we
lack
large-scale support
yeah
intel came along and and killed
open firmware open not open boot open
firmware
um and
yeah intel was responsible for uefi
and that killed open firmware
but
forth really doesn't need
corporate support
to
prosper
it's it's an individual thing rather
than a collective
as you did check with george um being a
raised talk on uh you did a discussion
of that video how you got the
144 chipset to drive the video i was
very impressed that
you don't have
generic video hardware
driving the video in your demonstration
you had the green erase chips each
programming the timing
and that was significant of how
you got the green erase chip to do video
that
wouldn't be normally required
just
to produce an output for people to see
in applications
which don't really need consoles if you
manipulating data
you work the data and you produce
the storage of the of the output for the
for later
display for people to see
and so the video display was just just a
really fantastic
ability that the chip array could
actually program
and the speed
i think was absolutely significant
was the
the power savings that your trip said
that nobody else could do
and it was a lot of fun to program that
dga
and it was
it wasn't easy
uh timing was a big problem
and um
it was just fun
i would say so too
um it's quite unique that you've got
this hard way and you're interfacing the
green arrays into that hardware so
there's another
incredible example of what the green
arrays trip set can do
it can bang anything
it's got it's got the speed
and this is with a
an obsolete
geometry 180
nanometers this is this is
abandoned
competitive with uh
with the um
oh 10 nanometer geometries
quite
the the the greenery chipset to be
a risk processor
where everybody's going to
assist type processes with multi with
multi instructions
what you can do on a risk processor like
the green arrays
it's so much quicker
it may
need a little bit of effort to do the
stuff that needs to be done
but clearly
the number of instructions to do the
work
supersedes
the performance that any of the standard
processors can work with
and at the cost of power which is some
is cheaper on
i've got to jump in here a little bit
about
programming these machines chuck's
machines
i was one of the first
novix programmers
and
one of the early
green arrays
series of processors
jeff fox and i
at the beginning we're doing our
darndest
to pack as much code as we could into
those 64 words of ram
over years now we found that the
smaller amount of code the smallest
amount that you can put into a node
lets them use
the least power
because each node is cooperating sending
messages between them and when it isn't
running it isn't it's only got leakage
power going
so
look at
for the earlier speaker about
getting into
green arrays
programming
mind mode
look at the
examples that are on
the greenery's website you'll get a lot
of that
one of the things that i did sort of as
a skunk works pro
program
with a good friend of mine bill minch
who was also an early programmer for the
i think it was the 24
processor chip
was to
implement a virtual machine
to execute
e4
and we put
bills bill was the originator of e4 and
ting is taking it taken off with it in
assembly language we did it all in high
level
and we built a virtual machine using i
think it was three or four of the nodes
to
execute
e4 op codes 8-bit optos directly
and as that has facilitated actually
uh it's been moved and
uh greg bailey's version of poly fourth
four thinks code
is now running virtually on the
novik on the green arrays chip
and all of the development that's
happening currently
is being done
in
standard fourth
you do not need to know the details
just like every other processor
so
take a look at those application uh
write-ups on the green arrays website
for example if i may 10 words of code
forms
an ethernet manchester decoder and
receiver
converting the wiggly signals on the
twisted pairs
into bits going to the next node
wow
you know i i listen to all this and i
think wow this is
the stuff you guys are doing are
incredible
little chunks right
and then there's a question of
how could something like fourth be take
how do we take forth to the next level
how do we take it to
you know push it into the future
i'll tell you something you know i i
watch this one guy on youtube his name's
jeff gearling and he's and he's trying
to deal with
taking a video card
and getting it to run in a uh pcie
single lane um
on
some of the new raspberry pi
um compute boards
if
if you could do something like
build
a fourth driven
um
video card with an open interface that
could be
you know could be added to the
drivers and such could be added to that
would have some kind of a standard
interface
that's like you know will work with
opengl or
i don't know what the current
the modern uh the current video
standards are
if you could build something like that
that would then sit in like a pcie one
one lane pcie slot you sell a billion of
those because
the cm4
raspberry pi cm force
things are taking are are
becoming incredibly popular to build
some small
um
like you know systems with all with a
bunch of
slots in them and stuff like that for
multiple cpus and then having a uh you
know a pcie car or something like that
sitting in there to show have a video
it seems like a busy building
bob thank you uh track is busy building
a thing called hdforth from his last um
this
from his last discussion um and that
seems so significant what he's working
with
um
on an hdmi interface it'd be interesting
to see
further development that he's working on
on his hd4
the
hd4 has
evolved into what i call uhd force
even better
for the 4k display
wow um
it's running on a
pc
uh
x86
it's unique characteristic
is that
a lot of the code is an assembler
well
it's in machine language
and there's no assembler
there are
hex op codes for the x86 instructions
now
i had to memorize those up codes
um but it was as easy to memorize the up
codes as it was to memorize the
assembler code
and it gives you beautiful versatility
and efficiency
completely unportable
but that's that's what i use i call it
color forth but that's that's versions
i'm using now
and it is
the nicest fourth i've ever had
because it gives me
the closest
interface
with the
hardware
on the other hand
in the old days
when you wanted to interface to a chip
or a board
that chip or board was documented
and you could really download the spec
sheet
and
uh and work with it
nowadays there's no documentation
the best i have found is in windows
but
windows is incredibly complex incredibly
obscure
badly designed
almost impossible to work with and i
work with it when i must
but
it has turned me off trying to interface
with the larger world
as i said before i've never been able to
figure out how to get on the internet
the world has changed
and i'm afraid it's changed in such a
way as to disadvantage us
the uh
we'll call us hackers
you're supposed to sign on
to the corporate
vision
of computers
and if you don't or can't do that
you're being left behind
that
perhaps some of you know
uh werner venge's
science fiction novels
he has one called uh
oh fire in the sky something like that
in which
the problem of
buggy
you enormous software was mentioned
the spaceships of that era
were programmed in some obscure language
that nobody
could really master
and it was determined that you should
improve rewrite the software
so that it was simple
clean
bug-free
and entire planets
uh attempted to do so
they could not reproduce all of the
obscure bugs
in the existing software so it was not
useful
on existing spaceships
and the whole project led to
enormous costs
effort and failure
that would equate in today's view with
trying to reprogram windows say
or linux
in fourth
it
probably can't be
done it certainly is not
sound like much fun
because you have to reproduce the bugs
who wants to reduce banks
you want to get the bags out
since what you really need is just an ip
stack ethernet or wi-fi interface
and once you have those you're pretty
much good to go
sorry
the hard part is the wi-fi interface due
to proprietary firmware though
yes exactly
um
that that's why i went to the 144 rather
than trying to interface with the
existing world i wanted to try something
different
something standalone
now the 144
could drive a gpu
um
i don't know how to do that
i don't even know how to find out how to
do that
if it could be done
i mean if it can be done of course
but whether you can figure out how
is a completely different question
and i've given up on that chuck here's a
challenge
if you were to develop the 144 to do
bitcoining
everybody will stop using the gpu
processes
and
the sales of the 144 would go
through the roof
and you'd be making money over money
because the people out there wouldn't
realize just how fast these g 144s could
process the hash tables
quite right
but
among other things it takes money
to develop such right
ambitious applications
and we don't have any money
yeah oh right okay i have a uh i have an
open question for you chuck if i may
first of all let me say that i'm feel
very honored to to speak to you today
i mean uh fourth for me was a
fantastic concept since the 80s when i
was a student so definitely it's a
wonderful experience to speak to you now
for the question is related to iot
uh since fourth is by design very
very efficient in terms
of power consumption in terms of
processing efficiency i'm surprised that
iu
fourth is not more commonly used for all
developments based on iots where of
course energy consumption and
responsiveness and real-time aspects
absolutely critical what do you think
about this
i think that's an
absolutely wonderful application area
and
green arrays has
projects which are
trying to address that
the fact we use very little energy
is a no-brainer
but
haven't found the killer app
if you will
next week i have to go and explain to a
professor
at university of wyoming
why the fact that we don't run
standard high-level languages
in a pair of streaming glasses
is not a killer of our technology
the point is
the reason why people don't use our
chips is that we don't have these giant
fat
libraries of crappy code which they can
glue together which is all they know how
to do
they don't know how to write code they
don't know how to program
end of story
well that's the first i've got a
question for chuck if i may
yeah please go ahead ken
um
uh it's a historical question chuck um
when you made the transition from
software to hardware
in the very early 1980s
did you
[Music]
prototype
any of the early fourth hardware
using
i guess ttl at that time
before you before you moved to the the
the gate array of the uh
of the novicks um did you prototype any
of that stuff
thanks
yes i i did
i
um
i did build a prototype
of a fourth computer
in ttl
or seamless chips
um which was sort of a proof of
principle
um
but then
i moved to simulating the
gate array
as a more
helpful
design tool
and fourth
so the fourth
fourth hardware prototype didn't really
wasn't really helpful didn't go anywhere
it only helped to convince some other
people to support the
gatorade
okay thanks that's that's quite
fascinating so i guess you were on the
transition between
building prototypes and hardware
to simulating them
by
1981-82 i guess we had
16-bit pcs and
and simulation became a reality yeah
so i i see jared
yeah hello everybody
now you are muted
so
we just had a couple of words and then
your mic went off
no no no no no no sound
we can't hear you
it just broke
yeah
aha now comes the mic
no sound can you hear me yeah yeah yes
sounds good
no no no no no no no
no
not now
that's strange it was just uh again just
a word
maybe you would log off and log back in
of the zoom
like drop if you're having problems with
audio sometimes that fixes it yep
you may get a message
reinstalled uh yeah this is your
software like it happened to me
re-install windows yeah whatever you
want to do
[Laughter]
i want to
something that chuck will
love to see
i will put this on the chat
uh probably you have seen some of you i
am watching i started watching yesterday
on netflix
the billion dollar code battle
of over google earth and a german combat
company called terravision it's absolute
amazing a fantastic film
and this has to do
uh with this killer app we were speaking
uh before this is very this is very
interesting to watch
thank you
okay
i've got a question for chuck
um
yeah i just i'm just curious about the
changes in fourth from
the sort of the classic fourth
from the early 80s through to color
fourth and some of your
observations and reasons for
the kinds of design
the way forth has gone from
um
from the classic fourth to the fourth
you're using now
what what were some of the reasons that
drove some of those design decisions in
the more recent versions that you're
using now
wow
fourth was originally an interpreter
and
i had to learn how to make it into a
compiler
and that was largely
a question of confidence
the
the model i used was belgo
developed at stanford
and
i was a graduate student at stanford
and there's this team of half a dozen
people
who wrote a bell goal compiler
and
i said well if they can do it i can do
it
and so i wrote a standalone fourth
that was the first one
the
criteria was to make it simple because
i couldn't do anything complicated
and i think all of my later developments
of fourth implementations
were to try to make it simpler
originally fourth had a threaded
dictionary
and that hung on for a long time
perhaps until um
uhd fourth
now i don't have a threaded dictionary
i have dictionary broken into pieces
each piece there's the
each array
one array contains the words another
array contains parameters another array
contains the code address
this this lets me search
the name array
with this hardware instruction
um
but
really nothing has changed
i'm amazed that the original
concept structure of force
with this dictionary and stack
has remained for 50 years without
significant
alteration
um
at the moment i don't know how to make
it any simpler
and of course the hardware has changed
it was originally memory constrained and
now it's not
infinite amounts of memory force doesn't
know how to use infinite amounts of
memory
it's just not necessary so
i don't know where to go from here
i have a question which is not
about technology only
i mean
and as christian said i mean you are a
free mind right
um what what is the topic i mean
considering the news considering the way
the world is going at the moment what is
the topic that makes you passionate
about at the moment could be forth could
be ai or could be something not about
technology
ai goes back to my early days at the uh
what they call them
the early neural nets
i
i'm of two minds
you can see this played out in the full
full self driving cars
do you use artificial intelligence or do
you use pre-programmed decision making
um i'm
a pre-programmed decision maker so i
that that's the way i do things
if ai becomes
magic
as it has in the case of gold and chess
i'll be disturbed because
we can't understand how it does it
if we get ai in the form of a mobile
robot or a
mainframe in the cloud
that we don't know how it works
i don't know that we've accomplished
anything
if you've got the oracles of ancient
greece
who can answer your questions
how is that different if an ai is
answering your questions
but i don't know what side you can
download
i think i will stick with my
deterministic clock
and perhaps try to get precision time
protocol implemented or something like
that
chuck um this is dawn
you know we're working on this fpga base
fourth
and i'm very curious about your comments
on the dictionary because we haven't
implemented the
uh the outer interpreter in the
dictionary quite yet you know the
compiler part
um you said that you have three arrays
you you have the cfas
you have the strings the word the word
strings the name of the words
and then you have the data
uh um what is what's the data
because the data's usually on the stack
right so um
in the case of a constant it would be
the value of the constant
oh
okay so that so so that's yeah it's a
constant array
well it's an array of you can put
anything in it you want the address of a
variable
the value of a constant
i think those are the only two i
actually use
you have to have a data field
and in the case of a code
reference
the data field
merely indicates that it is a code
reference
but this has led the most efficient
implementation of all these things that
i've ever had
um i have a second question you know i'm
in the space business now i'm working on
space robotics
fourth has a very rich history in space
your um rtx
especially
i know that uh talking with dr king in
2010
um the goddard uh space laboratory had
him do some work implementing fourth for
one of their missions
um
can you talk a little bit about the
history of fourth and space
i programmed a reconnaissance satellite
once
um
but i had very little to do with it
because
the
nc 4000
was the
prototype of the
rtx
and yet i had
no contact with it at all nobody ever
asked me a question
nobody ever paid me money to do anything
so that whole
space
application went on without my
participation
so most of the space stuff was done by
fort inc
and elizabeth rather's people
well i
they were kind of the central focus john
john hayes and hopkins university yeah
johns hopkins university crew
what was his name
proved that fourth was provable language
which was uh an issue at the time
you could prove it was correct
although i don't know why that is
interesting because it's pretty obvious
it's correct
what's very interesting right now
that i found being in the space business
is fpgas are naturally
radiation immune so they're very much
favored
in space because the geometry
is much larger than the modern
microprocessors right so a radiation hit
is not going to impact an fpga
and i think this is a huge opportunity
for fourth um if you can imagine
a hundred robots working out in pluto
assembling something
and you have this low speed data link
and you're gonna send a c
binary blob up there every time you want
to change
code
[Laughter]
um you know fourth is interacted you
just make uh your your core words
deferred words and you you update as
necessary using text
i think it's
that's the same thing applies to the
over the year updates that tesla uses
i don't know how they do it but
i doubt they use the fourth model
okay we have a queue of people that
raise their hands to ask questions so
dimitri is next as far as i know
yeah i put my hand up after after dawn
uh
mike my question for chuck is
okay i've got i've got a few finite
lists uh what would you say are the most
important things about fourth
that someone learning the language needs
to know i'm
interested in those who are learning it
today i myself i'm quite young i've
learned fourth in the past couple years
uh so i was wondering what you what you
were your thoughts on this
the first thing you have to learn is how
to handle the stack
conventional programmers
don't think in stack terms
and there is a transition that takes oh
maybe a couple years
before you really know
what to put on the stack and what not to
put on the stack
and how to keep the stack clean
the
the processor used in green arrays chips
has a circular stack
so you can put things on it
leave it there and it will be forgotten
in an optimal way
you don't ever have to keep the stack
clean
and that's what i do in uhd 4th also i
have a circular stack
it's a little more expensive
but it's a hard lot a lot easier
beyond that
you've got to learn to factor
take a problem
break it into pieces
give names
to each
line of code
so that you can combine them into a
higher level
structure
that's
that's not unique to fourth
that that's the term that's a kind of
good programmer practice
that no one uses
c has made it
conventional to use very large
subroutines lots of parameters
and fourth has
very small subroutines with
almost no parameters
you have to make that mental transition
how many things do you recommend uh
leaving on the stack at a time like how
many things in the stack should a word
consume is there any rough guide on that
one or two on it yeah
the uh
the
ga4 uh ga144 has
eight deep stacks
it doesn't have 16 deep stacks
whatever but my uhd 4th has 8 deep
stacks that's all you need
yeah i think um
on the um fpga processor i'm working on
with uh don yeah we've implemented a
circular stacks and i think
i think it's 32 at the moment but i
thought 16 might be
a a reasonable depth
uh for
uh for fourth programming so that's
reassuring to know uh since others have
their hand up i asked my next question
which is um
uh what was it like working with fourth
compared to a fortran or algol
uh what was it about fortran or our goal
that made you think my i need to develop
the language forth
interactivity
as as others have said
in fortran
you have to recompile the entire
application
now i worked i worked in fortran
in fact an early version of fourth was
coded in fortran
and
it was a pain to have to recompile the
whole thing it took
half an hour maybe
and i wanted something that was uh
easier to
to patch
now there are two flavors of force that
i've seen
one is where you have a large
body a large dictionary with many things
in it and different vocabularies
the others which you don't know
vocabularies
and you recompile apps on top of each
other
that's the way my uhd4 works one of the
most
one of the most common apps i use
is the editor
it overlays whatever other app might be
active
because clearly it isn't interesting any
longer
and it
it compiles a new version of a block
and then i can recompile the app
recompile back block
to make the new app
so my compile times are zero
my edit times are trivial
and the application is tiny
so i have a lot of tiny apps instead of
one huge one
wow so
that really that really is fascinating
and i've tried out using blocks i think
it's implemented in the esp32 forth and
i found it
very very handy
my final question which follows on from
the previous one is uh do you think that
fourth still has uh these advantages
that you met that that you mentioned
uh do you think it still has these
advantages over languages today like c
and java and python
absolutely i haven't seen any progress
in the conventional language world
since uh
with fortran
all these languages are in fixed
notation
they are
not interactive
they are
huge
if nothing has changed in the last 50
years
what would you say is wrong with uh
infix notation
it's
it's a perversion
of
notation
and
concept and implementation
in
high school
people are taught infix notation
as algebra
and it is a pain
because it is unnatural
uh the hp calculators are much more
efficient
than
in in keystrokes
than an infix calculator
it's just a
path that society has taken
that
i
think is
suboptimal
yeah um i i would i would agree with you
uh and that concludes my questions by
the way yeah i would agree because i had
a a bug recently at work which was
caused by an infix operator i i got the
precedence for it wrong
and so it was evaluating it completely
incorrectly and i was thinking if i was
using fourth this would not happen
and it's amazing how how often
people run into these things you see
problems on facebook sometimes where
someone says solve this maths equation
and it's because it's confusing these
rules
are um
confusing they're good they're good for
mathematics but they're not actually as
intuitive as people think they are
they're only intuitive because we're
taught them
uh but yeah that's
that's it for me thank you uh for
answering my questions chuck and i will
continue learning
sure yeah
yeah thanks so next with the right hand
is james norris
please go ahead
we can't hear you james there you go can
you hear me yeah no
um i was wondering about the x86 hand
coding that you're doing would you
consider using assembler or why don't
you do it
assembler is just another layer of
software
that gets in your way
what i have is um
the hexop codes
with subscripts
which i will put a number on the stack
and the subscript indicates
how many bytes
that will take in the object code
and stringing these
numbers together
gives you a program
now this is totally inappropriate for
large programs this is insane
but for a one line
fourth definition
it's trivial
um would you be interested i wrote a
fourth base x86 assembler if you ever
want to do anything bigger
and my second question is
what about using fourth
as a
right now they're coming out with russ
trying to do this they figured out that
a lot of program languages have problems
like c plus plus
has memory management problems and
things like that and it causes all these
expensive bugs for like microsoft and
stuff and they spend millions of dollars
trying to fix bugs in their operating
system caused by the programming
language and so now they're trying to
come up with rust as a magic solution
what about fourth
you could take four that's really simple
you could put in all that error checking
that doesn't have what do you think
about that
yes you certainly could
um fourth doesn't have to be a
standalone language
it can be a module
in an operating system
um
it just doesn't seem to strike people's
fancy
and that was all my questions
okay thank you so gerald's next try
okay next try can you hear me now
yeah i was very sorry about the blur
before uh so chuck i wanted to ask just
because you also mentioned before that
not a lot has changed in force uh
regarding to the basic structure of
having a directory and having a stack
but i actually recall having a
discussion with you where you mentioned
investigating multiple stacks
and using locals even
did you have did you do any further
research or is this
just been a short excursion for you
no that that didn't lead anywhere useful
what i have done in um in uhd fourth
i've taken advantage of all the
registers that the x86 has
and
you could almost say that you could make
a fourth
register based instead of stack based
and i explored that a bit
and
abandoned it
and why is that this stack is absolutely
essential
you might not use it all the time
you might take advantage of the
registers
but if you don't have a stack on which
you can pass parameters
um you're crippled
and why did you give up on having even
more stacks
i don't use 40-point arithmetic so
there's no no reason
to have a floating point stack
and i have never found a use for any
other kind of stack
okay thank you
right thanks uh so our next uh
question come from greg
yeah well uh hello chuck uh it's a
pleasure to meet you um
actually i was curious about something
that was said earlier you mentioned as a
as a general rule um
just
limit the number of things on the stack
to maybe just two
um and and so just as a as a possible
example
if i were to
um
develop a uh a word that is to draw a
rectangle and it
it takes two points you know top left
bottom right let's say
as parameters that would that would be
four arguments on the stack so
i might think well uh maybe i should
start thinking about structures so maybe
i'll create a structure that's a point
object and so i could put two points on
the stack and you know that's only a
couple of
things placed on the stack but now i
have a structure that structure would be
i think in fourth would be typically
global
which some people might
look a stance at and say it's a it's a
global variable
i could also think of it in terms of
well maybe i could create an object
called a rectangle and the rectangle
might have
methods to set its points and to display
itself or whatever i decide make makes
sense
um and that i think fits well with the
noun verb
you know uh
structure that fourth i think encourages
you know
object you know action type of thing you
know machine on machine off sort of
thing
just curious as to what your thoughts uh
you know
would be on on how you might structure
and your thoughts uh some a problem like
that
and you know what are your thoughts on
structures and objects and that level of
abstraction uh
you know in addition to just the
basics of what fourth gives you
that that's one way of doing things
what i do
is i have a word at
that sets the cursor
takes two parameters
and
specifies the location on the screen
and then i have another word called
rectangle
that has the dimensions of the rectangle
that i'm going to draw at the cursor
so i've broken
it into two pieces instead of having one
large piece
and i can use the word at
for triangles as well
or for circles
um
now in the case of a triangle
it's a problem because you've got three
points
and i use a structure for that
a circle only has one parameter
the radius
so it's some stack
so to generalize and say everything
should be structures
is not right
and everything should be in a stack it's
not right either you have to be flexible
what are your thoughts on on objects
uh having uh you know a variety
i created an object in fourth
called the month
and this object had
the starting point in the year and the
number of days or something like that
this is a backpack very early
that's the only
object i've ever
i've ever done
and it was useless
i have much better ways of doing months
now
so i think object-oriented programming
is a mistake
there are not enough instances
of the object to make worth the
generalization
interesting all right
thank you for your thoughts on that
appreciate it
that's why they call it oops
[Laughter]
nice
okay francis please ask your questions
um hi chuck
can you hear me
okay hijack it's an honor to speak with
you uh following following for a while
and i just wanted to thank you for this
gift to us i was wondering if you could
speak a little bit about the motivations
for the circuit simulation software you
wrote its performance and its current
status
say again
so i was wondering if you could speak a
little bit about your motivations for
the circuit simulation software you used
to do the
layout electrical simulations its
performance and its current status
yeah
that is my
that's one of my favorite applications
it is one of the things that i've spent
most time on
and i think i've done the best jaw mode
um
there's there's two aspects to it
one is the circuit
logic diagologic uh description
and the other is a layout
if you are laying out a circuit board
or whether you're laying out a
chip
basically the same problem with
different geometries
and what i have learned to do is in both
cases
i do the layout
and from the layout
i derive the circuit
an array of transistors and
interconnects
okay
um it's extremely efficient extremely
intuitive
pretty
simple to implement
and gives wonderfully complete
results
uh i've
i've done a lot of circuit boards
but i've done even more chips
and the chip layout
well conventionally one has a
logic description of gates that are
interconnected and then you have to
derive the
the layout and i do it the other way the
layout is predominant
and the function of the layout is
determined
from it yeah
this is this is a strange
side effect
that there is no need to do a
validation
proving that the layout accurately
reflects the circuit
the layout is the circuit and is by
definition correct
amazing
and it's a lot of fun i enjoy working
with rectangles and layouts yeah
unfortunately
again just like the world doesn't let
you interface with
uh
chips or boards or gpus
the world doesn't let you interface with
chips any longer
you have to give it a
gds approved layout
which they will then validate
before they
construct a layout which vaguely
resembles the one that you worked from
to frustrating technological development
i would love to have a
chip making machine
something that will generate a prototype
chip
in a desktop
environment
[Music]
the world prefers to have
billion dollar fabs
yep yep
um just to just uh
yeah i i i asked that because i was uh
my daily job i do this as a maker and a
hobbyist on the side but in my daily job
i do uh chip design and process
development for uh it's one of some of
the one of the big uh superconductor
companies and this is uh a cool interest
of mine i thought i would ask about that
uh just another question
um what are what are the most
interesting one or two applications
you've seen and fourth from others that
you didn't see coming
the applications at four think does
you can go to their website for a list
but they've
done communication networks
device handlers
i did a
hollywood robot once
robot camera
um
cement making plants
i would love to see an f
full uh self-driving car
and
fourth
yeah
that's a
that's a heavy thing though
as soon as you get into applications
that
risk human lives
it's a whole new game and i've never
done one of those
um
and just a just a just last question in
hindsight has anything should have done
differently with regards to fourth and
uh setting it up developing it and all
that
looking back after all these
these years
no
in
in hindsight
i don't know that i've done particularly
well
but i don't
know that there's anything i would of or
could have done
differently in
back in what 19
70 or so
fourth
in a sense was competing
with microsoft
not directly but conceptually
and if
if we at four think
have developed an operating system
we could have competed with
microsoft
but we didn't
we couldn't
um
and
i'm perhaps glad we didn't
i'm much happier with where we are now
than where microsoft is now
microsoft has to be compatible
with the exception maybe of windows 11
with everything they have ever done
before
yeah
and that is a horrible
burden to bear
fourth
as it stands
well
fourth is free to reinvent the wheel and
i think that is a marvelous concept no
one should ever be afraid
to reinvent the wheel
and we do it every day
thank you chuck thank you
yeah thanks and uh howard
your turn
and please open the mic
hi hi chuck i've already had a turn uh
chatting to you but one more question
about
one's complement
the whole
used to be very popular a long time ago
the ip internet protocol uses a once
complement checksum
and
it has some interesting properties um i
have a feeling that it's a really good
way to go
and i observe that you you use one's
complement in the
in color forth
and uh i just want to hear your opinion
do you think that the world went wrong
when it moved over to
two's complement
no
i i
i'm worried about this
one of the main frames i programmed
early on those ones complement
arithmetic
but
twos is much more convenient
and it doesn't cost anything in hardware
so two's complement is definitely the
way to go
yeah i can i can understand that from
that point of view the thing thing i
like about one's compliment is that
you've got this extra
state
in the system in uh
normal normal um
two's confidence you've got zero and
you've got everything else and in one's
complement you've got plus zero and
minus zero
and it strikes me that it's very useful
to have this extra
state that can be used so you can have a
value is either 0 not 0 or
not set or some such and i think this
this whole idea of having three
states
in a value rather than 2
it brings it closer to the optimal um
number of symbols required to transmit
the data which i believe is e somebody
proved a long time ago
so it's closer to three than two anyway
it's just um
i think
discussion on computer file about that
two days ago all right hanging codes and
the transition
of following the edges of the
of the square
to get to that
okay thanks for the link
to that
okay thanks chuck
okay
right so
bob
you'll raise your hand
hello i'm raising my other hand
uh
okay i have a few one thing i'm
wondering when i heard you you
programmed a mainframe that was uh
one's compliment what mainframe was that
you remember
that's why i didn't name it okay
um
could it have been a spare uniback
no it might have been the uh
don't need this
was it when you developed the wrecks
the first super computer i i can't come
up with the name of it
right oh great all right great that's it
wow
or maybe one of its uh
input terminals something like that yeah
okay cool uh second question
uh
you mentioned compatibility you know and
how microsoft does maintain the
compatibility and then of course you've
just mentioned mainframes i was thinking
zvm which is the current version of z of
uh osm
mvs which is osmbt which is
os 360 has maintained compatibility
across since the 1960s when it first
started and evidently you could compile
the program today
on
cvm uh
z z os by the way i'm sorry cos
mainframe
and a run
and it just you know it was interesting
that you'd mentioned compatibility ibm
is having maintained that for all these
years
compatibility
guarantees there won't be any progress
yes
um
what is the smallest fourth human you
have run across what's the you know
what's the minimum
like if you could
i don't know exactly how you quantify it
but like the smallest amount of memory
the smallest amount of stock space what
is
what is that
what would that be
[Music]
the smallest one i've done was called cm
4th
for the novix i think it was
um
at four think we had
micro fourth
and mini fourth
which explored the range of having a
small kernel and everything else
compiled
um
e4 does that i believe
but uh
i've i've
heard references to these some
microcomputer
fourths that had very small kernels
i would say
a kernel should not be more than 4k
if you get it down to 1k that would be
nice
okay
cool
um
you mentioned in talking and i forget
who it was but you mentioned that the um
[Music]
two parameters back but you mentioned a
stack that's only eight feet
is that for like
as many levels as deep as you go or is
it
i i've never thought eight was awful
small
i i would think in terms of the circular
stack
with eight elements
so that you could put as many things on
the stack as you want but you only have
access to eight of them
now for the
my circuit
tracing
algorithms
i've needed to stack thousands deep
because as you trace a circuit you're
recursing and recursing and recursing
and that's a whole different concept
that i would have a software stack for
okay the hardware stack can be very
small four is too small
eight is small 16 is
plenty
okay cool
um
two more one is did you know that
the current
dot net implementation of languages
produce something called il and il is a
fourth flight stack language
so they actually you compile c into the
fourth like language
i don't know if you've done that
but i would say no because i haven't
understood what you've said
oh okay well us dot net is the
kind of like
um i'm sorry microsoft's answer to java
c-sharp is microsoft's answer to java
it's become very popular it's actually
very nice language if you're writing
that kind of software
um
but when it compiles it compiles down
into something called intermediate
language
which is actually a very fourth like
language
it's a stack based language i thought
that was i thought that was interesting
i didn't know if you had heard of that
or not
well
all infects languages
have to compile into a stack
so yeah
but the interesting thing is
this it doesn't compile
it doesn't compile to a
native it compiles to il il gets
compiled to native an intermediate
language yeah yes that is um
to me that is grossly inefficient
yeah why not write in
intermediate language
and um last thing is that you you've
talked about assembler and you don't
need to know the
x86 op codes and such like that
in the 1130 assembler you wrote an
assembly
i mean in 1134 you wrote an assembler so
you could write
11 30 instructions
in a fourth like notation
that was i mean it was right there right
at the beginning it was very cool
not only 11 30 all of my
all of my computers had assembly
uh words
and
i now think that that was a waste of
time
it was it was hard to figure out how to
construct the words it was hard to
remember how they were constructed it
was inefficient to implement the the
hexop codes are
on any computer
are far the simplest way of implementing
it was it was
it's interesting you're saying that
because it was just like that was when
we were looking at the code that was one
of the most intense parts of the code
starting to understand what's he doing
here and then like saying wow that we
thought we fought brilliant
so
[Music]
it wasn't it was fun it was it was uh
clever
um but it was
at least as difficult as it has codes
yeah
okay that's it i'm out of here i'm at
least i'm calling you thank you for your
time
okay thanks bob um
our next questions come from jan
bramkamp or jan brent camp i don't know
if my microphone is working yes
okay
so my question is
you've already rented about infix
notation and how it doesn't compose
and what do you think about a prefix
notation like lisp
i'm sorry i lost my earpiece
sorry let me repeat that um you've
already given us your opinion on infects
notation and how badly it composes
what's your
opinion on prefix notation languages
like lisp
um
they made an unfortunate choice
i believe the human brain
works on postfix
you
you accept data
you store it in your short term stack
and then you operate on it
you don't prefix things
okay short answer and
are you satisfied with it
yes i got my answer
okay
okay thanks john um
next is anton airtel
antoine please go ahead
oh uh
maybe your
my volume has been turned down
uh so that's what happened to gerald
so
we can't hear you
my selection give me the answer
no no no
no no no no
no no not again so yeah yeah no i can't
speak sorry
okay go ahead all right so um
the question is
what is your take on state smart words i
think you had them in your early fourth
systems and
then you eliminated them and i'm not
sure if you have them in in the recent
systems i don't think so but can you
talk a little bit about them and yeah
yeah
i think maybe that's an area in which
fourth has made some progress or at
least my fourth
and uhd fourth
is basically color force
and different words have different
colors
now
state smart words would have
different colors
for different states
for instance the color white
means execute immediately
the color green means compile
and
and those are the only two states that i
need
but i do have to be aware
in programming
for instance a conditional word like if
or then
is
an immediate word
and must be in white
if i have an if in green
it means
compile a reference to if
for future use
and that's basically what the speech
state smart words did
you didn't have to be aware
that they were
which state they were in
and they knew
but now i must be aware
to distinguish green from white
and that is a programming challenge
sometimes i get it wrong
thank you yep
yeah interesting
um yeah john
please
hello chuck again
um
how many items or how deep do you think
we should build the uh return stack in
our fpga port
32-bit fourth
that shouldn't matter
i would go with eight
eight okay
i i think the return stack
and the data stack
need not be the same length
but
by default i would make them the same
length so that until experience proved
otherwise
um
is that a circular stack that you're
talking about
it doesn't matter
okay
we actually implemented circular stacks
so that was uh dr
ting uh we shared the code with him he
said use circular stacks okay so we did
that dimitri implemented that it costs
nothing in hardware
uh my next question then to you is um
why don't you utilize
fpgas
because that is your desktop chip making
scenario today
and i will offer you when we get
finished i'll send you a complete system
that you can play with
and it's going to be in system bearer
log
um
and it's it's very beautiful code right
now it's like two pages of code to
implement a fourth processor basic
so why why haven't you used fpga for
development
because they wouldn't let me program
them in force
there you go
that's great
yes
literally the reason and the only reason
i would love to use an fpga but they
won't let me
i have i'd have to learn someone else's
ugly language yeah
remember that's only maybe five years
that there are open source two chains
for for fpga programming
thanks chuck
okay
oh not you're raising your hand and
you're putting it down and raising it
maybe you have a question
i i actually wasn't putting it down but
uh
go ahead sorry yeah uh i have a question
i think like
fourth is
uh like you know perceived as a runtime
language
right but it could be like a meta
language it could be like incredibly
like um expressive and like you know
um what are your thoughts about that uh
and also uh yeah i i can ask the next
question later
so what exactly was your question
oh sorry i
so
the question is um
we're thinking about stacks and what
stack to
use and like you know what kind of stack
size to use because like that's the
runtime for it right that's the fourth
where it's like um
you know we execute a
like
a stack base we have a stack based run
time right and that has like a certain
costs in terms of like you know
um
like sort certain performance costs and
it doesn't actually map to architectures
like gpus for example because there is
not even like a concept of stacks it's
just like i mean you could have like a
memory stack on the gpu sure but it's
gotta work on like you know uh look
great and i think i think
ford can be an amazing uh like compiler
you know like it's it's it's it's
i'm sorry i i
yeah i can be i'm super excited so i am
somewhat inarticulate and that can be
harsh sorry
well let me let me try to address that
yes like the stack is merely a tool that
forth uses
to express things compactly
and certainly fourth has applications
far beyond
stack oriented things and yes fourth
would make an excellent compiler
fourth would make a good language
translator force would make a good um
artificial intelligence effect
uh
and yes i i kind of agree fourth is a
middle language it lets you define an
application language suitable for your
environment
yes yes thank you i mean um also that's
that brings to the second question which
is
like
i also think like
having the
like you know the 144 chip
uh the
how like in terms of like the simplicity
uh that's that's the way to actually
reach like the energy uh
like
consumption uh to the minimum right
yep
and um
yeah do you think there could be other
constructs other than the stack
to like you know or like it could be
like i don't know um i was thinking
maybe it could be like a hardware
definition language where we define
those kinds of constructs for whatever
problem at hand
so the hardware could morph
depending on like what kind of
application is what wrong we redefine
the hardware sort of
you don't like need to be
you don't want to think restricted to a
stack you don't have to use a stack
for everything
as i said earlier you can have you can
have structures
which relieve the depth of the stack
and um
but the stack i think is in this at
least a small stack it's absolutely
essential for passing parameters
yes
i
i i think i also
come to that conclusion because like
it's super simple to pass parameters
and
yet i think like you know
at some level
it's it's it's all
like
it's it's it could be even like you know
that we implement the whole compiler and
assembly and like
like use the i i
sorry i can i can i can ramble
but also i i just want to say like i
i i thank you for for all the
inspiration and like for
everything i mean i i am i'm so so uh
happy that
uh i
briefly got to introduce you to some of
the work that i've been doing which
thank you very much i think we follow up
on that later
uh dimitri another one
oh it's a very short question it was it
was based on um
don's question
on the return stack and um in the
in the chat on peter jacket he was
saying well you know wouldn't the return
stack need to be deeper if you're going
to factor your code heavily
um
so chuck how could we have a return
stack of say eight steep uh
and still factor
our fourth code
oh now it's a question it's a question
of complexity
if you
if you have
too
deep a call sequence
this calls that calls that calls that
it gets complicated and you lose track
of what's going on
i rarely have more than two or three
levels of
nested calls
which is what the return stack is for
i see okay so it's quite flat too
yes because you can still
you can still um factor your application
into
lots of short words
but they're just not words that uh call
one another one another
in a chain they all kind of stay at the
same level
that's right
the other use of the return stack is to
hold
loop counts although that's not the only
way of doing it
so you want to consider how many nested
loops you have
as well as how many nested uh
calls
okay that makes sense to me now thank
you okay great
thanks so young for another question
yes this time my question is
regarding state smart words i found them
a pain in the posterior to work with
and wouldn't it be possibly easier to
have an always compiling fourth where
interactive code is compiled into an
anomalous function and
executed afterward just to be
immediately allocated
is there a downside to
setting up a fourth system like this
that it's always in compile mode
and
the
defining a word would only
move the uh compile location from the
scratch pad to the dictionary
yeah i'm
i'm a little bit out of my depth because
i don't know how state smart words are
done
conventionally
but i do i do agree there needs to be
two distinct
behaviors
one in which you're interpreting
and one in which you're compiling
and why do i need the interpreting state
at all
couldn't this be solved by
compiling into a temporary scratch pad
area
large enough to hold a line of code
earth 2
then
calling this code and
reusing the scratch pad for the next
interactive input so always comp being
in compile mode
yes you could do that and i think i did
that
once upon a time
what is the downside
it's no less clumsy you still have to be
aware of what you're doing
and um
it's just a different way
well say there's three ways of doing it
one you can have a state flag
two you can have different colors
or three you could have this
compiled scratch and execute
uh there's three ways of doing the same
thing
i think the color way is
is
latest
so
what i went into with g4 or macris
stellaris
is that yes there's a state variable
and some words respond to it and as soon
as you want to do heavy meta programming
and you need one of those state smart
uh words in another state smart word
they don't nest
that's really cool
and
at that point you're scratching your
head and
some fourth systems work around it by
providing non-state smart versions and
suddenly you have
to two or three times the number of
words
for those words
that got for special treatment
that's
that's bad yes
i would rethink the problem
which is why i asked
because
i have a state smart uh um
a state state smart question for chuck
so you know what i was thinking is um
you have a 32-bit wide fourth computer
in an fpga
but make the inside data bus
34 bits wide and then use the top four
bits for your state
or whether it's an immediate word
or
um
you know compile i guess it's compiling
an immediate is that the two two things
you need to figure out
i
i have done that
on
one of the early computers that i
had fabricated
had 21-bit words
whereas the memory was only 20 bits
and that extra bit was used as a flag
for various things
nice it was
not good it was
it was as awkward and confusing and
difficult as anything else
okay
um i
maybe i have a follow-up question and
another one on that you once talked
about the ice principle
interpret compile execute
and so if we
enroll everything into just compile
don't we lose the interpretation
capability
uh to calculate things uh
up front before we compile so do we need
interpret compile execute the ice
principle
um
you're exactly right we do need the
ability to calculate things
and that's why in color forth
as i'm compiling green words
i can interpret
interpolate white words to do the
calculation
yeah so so we we don't want to lose this
and maybe jan this also answers a little
bit of that
we don't want to lose the capability to
do execution while we compile and
calculate things and generate code or
whatever
right
i didn't
propose to
eliminate immediate words
anyway
my second question um
you've been once uh
talking about the map is not the
territory and i would like to hear your
current opinion on on the statement and
uh
how you think about abstraction
so
the map is not the territory
um but currently i prefer to work in the
territory
no that's not that's not accurate either
in the case of drawing characters
you can draw the character
or you can describe the character
and
long time ago i would draw the
characters
and that became a pain because i would
somehow move a pixel the wrong place
now i describe the character
and i've come up with i think a very
compact way of describing characters
so
i go back and forth between the map and
the territory
i see
yeah thank you thank you very much and
thank you very much for influencing my
life over the last 40 years
sure
yeah maybe without knowing it but uh he
did
the responsibility
right
next question come from travis
and you have to unmute so that we can
hear you
about eight deep return stacks
um
i found a number of different uses for
return stacks like
for instance i'll make a
a word i have a word that out
that a lot space in the dictionary
and then
deal
afterwards
and i'll
use the return stack as
scratch space for
storing the top of the here pointer
before and afterwards so i can restore
it and return it
including if an exception occurs
i'll catch the exception restore the
stat which the dictionary then re-throw
the exception
and also
in my fourth
i have to do with
uh exception frames
which go on this return stack
and furthermore there can be
nested exception frames
where one exception is within another
so
all the pop and furthermore the
multitasking uses the return stack
so
to store registers and all that so
in essence
i need far more than eight
uh
cells on the return stack to store all
the possible states
even if my code itself does not
go that deep
so what are your thoughts on this
i understand you can have a large you
can have a large multi-purpose return
stack certainly
um
my concern is that it's getting
complicated
and i tend not to like it being
complicated
i would observe that in the case of
circular stacks
when you get an exception
you don't need to do anything to the
stacks you just leave them the way they
are and get on your business
because you don't need to keep them
clean
um
so yeah
i think the simplest solution is to have
a small return stack
but i understand the
convenience of having a large return
stack
thank you
okay
uh we have two other
guys that want to ask questions john
hardy please
so me again uh i was just
i mean this returns takes an interesting
topic because it
it is necessary to discuss all sorts of
different aspects of force because
because the return stack is so critical
to the virtual machine
i'm interested in the changes that
happened in colorful
some of them have to do with
your use of
tail call optimization
as a way of reducing
so in other words optimizing away
calls
so they become jumps which means that
they use less stack space
um so
i can see that would reduce the size of
a return stack
um but one thing that seemed to get
thrown away
from my understanding of classic fourth
is
that you use
um
taco optimization as a looping mechanism
and that you when you do when you in
classic force when you redefine a word
or when you define a word you don't have
access to that word it's hidden until
you've finished defining it
whereas in color forth i believe the
word is
is visible so that you can call it so it
can be called by itself
um so can you talk a little bit about
that change
in the language
um and
you know like
what what are your thoughts about
the way you know ditching the idea of
the original fourth and going forward in
this way
the
the original way
would be my preference
that you rarely reference a word within
itself
more likely you want to redefine the
word add some functionality to its
previous definition
but
that was complicated
and awkward
and in color forth i just threw it away
and said okay i'll have to live with the
fact that if i want to redefine the name
of a word
i'll have to
say
word
colon word
[Music]
or zero
word
word zero stuff stuff
that's awkward but it doesn't happen
very often
yeah
actually
[Music]
i found that
in my fourth that doing it the way that
you did it before
it's simply a matter of linking
the
word that you're compiling into the
dictionary
you hit the semicolon at the end
and
it works
basically
like how it was where you
if you redefine the word you refer to
its old meaning from within the new word
without any work at all
yes that is that is exactly right
um
but in my current fourths
semicolon does not indicate end of word
it merely indicates return from word
return yeah
and so i have no word to
identify the end of the word
okay
john
another question or
no that's it actually
you're done thank you very much so
thank you
satisfied uh okay uh the last question
for today comes from james norris
i was wondering what the most fun thing
you ever worked on was
most fun thing
a fun thing is something that gives you
frequent
positive feedback
i have to say my
my chip layout
and simulation
um
it it took
years
five years
but i was immediately doing good work
after a one week
so i got this
positive feedback which continued and
continuously continued
the hard part of that was when you
submit a check for
for fabrication
and you have to wait three months
before you
know whether it worked or not
and what do you do during those three
months
but i have to say that was a lot of fun
for a lot of years
in fact this is great asking another
question
the trip simulation is fantastic i think
one of your very first projects you've
ever worked on
was the
the telescopic
pointing
and the
data analysis you did
interactively
in this on the system with all the other
astronomers watching the work output
because that is that is quite
significant
to use something as large as a radio
telescope
to capture the data live
and to
manipulate the data to generate those
graphs
that i think would be
significant
it was at the time
there was um
this this millimeter radio telescope was
being used to discover
interstellar molecular molecules
wow okay and you would
you would you would collect data and
display it and if there was a peak where
you expected to peak you discovered a
molecule
right and
the immediate feedback was very useful
for the astronomers
but they still required
that i record the raw data
so they could take it home and repeat
the analysis
even though that was completely
unnecessary
[Laughter]
brilliant
you've done the processing already
they were going to redo it probably not
as well because i had good statistics
live statistics forget about post
statistics
well guys i see and we had a fantastic
meeting today
we need to thanks thousand times to
chuck
but
there are people in the meeting
i see rob jude from australia do you
want to say hello and
anything to chuck no not questions but
only
hi
okay
[Laughter]
or do you have questions sorry
no questions
okay
who else i see a ray gardiner also from
australia very late in the night
ray
showed us in the group in the facebook
group fantastic pictures of his boards
with the rtx 2000
and image vision in australia for
machines for different machines so he's
he's a wonderful folder and incredible
incredible stuff
i see in the meeting ashley faniello
wanted to
show us uh the wonderful ignition do you
want to say anything
ashley
something to chuck
oh just hello chuck uh we met once in
2013 at the strange loop conference
but it's great to see you again it's
always great to hear what you have to
say
who else uh i see ilia teresa from
moscow he is chatting but he does not
like to talk what happens elia too much
vodka today
say hello to chad okay
okay i'm here but i'm afraid
with my new microphone uh
it's it will be not possible to hear me
okay very good it's very good i just
want to say hello
no more what else
hello
what else
and wish
everyone to be healthy
thank you thank you to you too
3 30 in the morning in australia it's a
indeed this is a
word by word translation of russian
hello be healthy
yeah
wonderful thank you ilya
i see also jonas carlson where are you
in the world jonas do you want to say
hello to chuck
you're muted
oh yeah one moment yes so yeah i'm in uh
bangkok
at the moment and uh
well
at the moment we're all stuck where we
are right so it's two years
so i had uh time to play with uh a lot
of things and the last thing i played a
few months ago
was a 6502 fourth
and i was
reading in parallel a lot of things
about color forth in
and
and i found similarities when i was
basically creating a system with an
online editor running on a 6502 where
each page 256 bytes what
maybe it was buffer size basically and
and this fourth
was a
a um byte-coded fourth actually it's
alphabetical bytecoded fourth so
i use d for dupe
and i use uh s for swap and so on and of
course the arithmetic operations are
plus and i remember reading
when i was working on this but you
actually liked the idea of a byte-coded
fourth
um but you never really went to do that
do you have any comments about that and
especially about the code bloat today
we have so big systems and they're
compiled
to yield hundreds of bytes
um
yeah so that's
my general question
[Applause]
if shark is there
um
other people have also
if it's a good strategy
the closest i've come to it is the uh
the
ga 144 instruction codes
they are uh
five bits
so i've effectively done byte coding
on the hardware
right
um microcontrollers
with arm v7m
have the t a b h and t h h instruction
which are basically
what you're asking for bytecode
jump tables
in mass manufactured cpus which can be
used yeah by the twelve
with a very tiny
interpreter
yeah i'm finally building my my
so-called alf alphabetical fourth which
is supposedly half readable kind of byte
code with the letters and and symbols
and i'm writing a very tiny
uh c compiler that compiles c to this
fourth and i have it kind of working for
functional c
uh we have no variables and i just the
other day i added uh
variables uh so
soon i'll be able to compile
c to fourth and the uh rationale for
this is
esp32
which i calculated that yes it's a very
powerful thing but one line of c code
usually ends up being about 80 bytes
of understanding code join us we are
saying bye bye bye we are finishing
bye-bye
thank you
great another another one here
um
holy nepo holy neptune is this correct
holy yeah
polly how are you
during this meeting
actually i want to
to
say that i've developed the
the close compiler for different micros
mcus
and the
first compiler includes assembly
disassembler and
compiler and closed cap
one special trick is that
once the assembly is generated the
disaster this assembly is generally auto
magically generated
and
the assembly that i
designed is based on algebraic
assembly so
every micro controller can be seen the
same because we used i use the same
sending tracking like a register and
immediate word
you can see that the all microcontroller
can be seen as a
forced chip
not the really false chip but
actually we if we say it is for chip
and it contains only register and
and immediate words so that way based on
these two words two two characters i can
design the assembly based on these two
so every microcontroller
seems the same
and the assembler has
i i can design the
assembly in different way
fantastic this is this is great news so
we we love to hear from you and we sent
all our regards to the fantastic fig
taiwan and all the great members you
have
also in
in the name of dr ting who is here and
he wanted to show
to show something but we will do this in
the next meeting because we are out of
time thank you holy
looking forward to hearing more about
that at a later time yeah if you are
interested
another friend here is igor matz nissa
from
estonia is this correct the name igor
yes
only to say
hello to chuck and we should wish him
well and etcetera but
do you hear me yes yeah but the mic is
not making noise but it will do
hello chuck thank you very much uh for
your creation and
i met fourth
first time in
my school and it made a big
movement in my development as
programmers thank you very much vermont
one more time and
be healthy in this time and
[Music]
i wish you many years and
[Music]
a lot of implement your plans
thank you eager
uh carsten
do you want to say uh hi to chuck and
bye bye
where are you from kirsten from germany
your microphone
i cannot
maybe you have to put on the volume
increase the volume carson
but okay
wave into the camera next time so carson
is from hamburg actually
all
across the city
and uh yeah
thank you very much carsten for
participating next next time we we talk
with you
roy also from germany do you want to say
bye bye to chuck and thanks etc
or ralph has no microphone who else
i have um
[Music]
you're muted bro jack i i want to say
hello from germany beautiful
and i was motivated to write my own
force my own tiny force
because everybody should write its own
tiny force before using a profession for
us i think and i learned it from you
i see also thomas gwepel from germany he
helped us putting the link in the
hackaday so i thank you very much to
thomas and he's also a great participant
here in our meetings
no sound thomas
thank you then if you have no sounds
thank you thank you again
who else
athlete from norway do you want to say
bye bye and thank you to charles
i'm a relative newbie in fourth and uh i
just want to say thank you and i find it
brilliant
thank you
anthony fogler do you want to say
bye-bye and thanks to chuck
yes i say hello to i say hello to chuck
and
thank you so much for all the difficult
nights i have to work through to find
bugs in my programs for three lately
it was a very enjoyable
and still today uh
two months ago i started a new project
with ford so it is still very alive for
me thank you
well er who else georgia from brazil
george is united do you want to say
oh hi are you listening
yes
oh hello i am georgia knight from from
brazil i i'd like to to say thank you
everyone especially peter for organizing
the disadvantage chuck for discovered
discovery like he says that this
incredible language it's amazing
it's more than a language it's a
philosophy
the the far few way to to think i don't
know i
i i really love this is it's uh it's a
pleasure to
to
to talk about it for if you with people
who likes for pizza
oh thanks thanks peter
uriki
john hardy chucky dr ching
everywhere everyone it's really really
really nice to
to stay with them today thank you for
your love in in in their language
georgia you are a great father i have
also here thomas from kern
thomas
thank you can you hear me thank you
chuck thank you everybody for this very
marvelous meeting
and i was using force beginning
i think 85 to 87 brought my ph oh no my
thesis in felix
was a great time so thank you all and
have a good time chuck
see you soon
bye bye
thank you thomas
hi i like to say thank you to chuck
moore
i am a
color for fun
i learning for
reading the color photo source
and
i changed my life with this barmelo's
language thank you
thank you pablo who is somebody else and
then we close cecil biona i don't know
philip ellie
yes charlotte
so chuck again many thanks for
the inspiration
you gave me during those years when i
was a student and still now and uh
and clearly you are a wonderful person
so thank you for everything
fantastic
thanks again chuck for being here
uh i've been following force for many
many many years and in my youth
when i first heard about force i was so
excited
somebody who wanted to keep things
simple rather than
[Music]
the abortions we had for programming at
the time so thanks again for your great
idea
and uh
what can i say
thank you again
well guys this was fantastic i don't
know if chuck uh agrees to that and we
do all
these meetings
sinking and thanking everybody in the
first community
all people from sv fig also who helped
us every meeting
and from all the communities in the
world
uh howard do you have a race racing hand
yeah uh chuck is there any chance i
could get my hands on your clock code
i'd like to put it in as an app in in
the color forth
you do you have any plans to
post it anywhere
i don't have a vehicle for posting
things
can you send it by email
i can send screen
captures maybe
i'll keep it in mind okay and also i'd
also like to see the source for your
your uh character
generator code
that interests me
that i would had would gladly publish
again if i had some way of doing it i
used to have a website
i keep thinking maybe i should
reactivate the website
but um
i haven't yet
okay if you come up with any way of
transferring it and i can help in any
way let me know and i'll
um i'll help you gladly
okay howard
yes
i want i want to thank you all for
inviting me it's been fun
and it's gratifying to see so many
interested
fourth people
i wish you all well
in your endeavors
thank you
thank you very much
thank you thank you very much for
joining us
thank you
thank you very much thank you everybody
thank you thank you
