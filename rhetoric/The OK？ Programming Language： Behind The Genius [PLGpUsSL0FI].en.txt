right over here right
where do i begin
so
okay
i guess we should start from
the beginning which would be when we
wrote the language and what was the
motivation for the language
so we were at facebook it was four guys
um we were in the
developer experience team it's called
developer experience team but it was it
was more about
the bottom line was about efficiency and
um and performance so we wanted to make
sure that all the different teams
um were working at their best and one of
the issues that we saw was that
there was just a code quality
problem where people were writing code
that was hard to maintain
um
you know even though they were using a
variety of different languages we found
that it was very hard to
inculcate a culture of code quality and
have everybody on the same page about
what constitutes good code that just
wasn't going anywhere so we decided um
you know we should talk to mark so i
talked to mark
and i said you know i think we need to
spend a bit more time on on properly
addressing this issue um we had done
like a scatter shot approach that you
know thus far
but
i i went to mark and i said you know can
we write our own language
we thought that it would be a good
opportunity to kind of take all the
things that we had learned throughout
our quite long careers at this point and
distill it into a
a language where you can write code that
is
performant
[Music]
high quality but most importantly you
know
we wanted the experience of writing the
code to to kind of reignite that spark
you know i think a lot of us all have
have memories of when we first
discovered programming
whether it was back in
you know for me it was primary school
making video games some of my friends it
was high school some of them didn't
really get there until uni but we all
had the same experience in the in the
early days there is that magic
and
i think that you know over time people
lose that sense of magic
because
i think as they learn about how how to
write code within the confines of their
language i think they find that it
becomes very
constrictive and um
and they start to feel like they're
fighting against the language so
we
you know we had a two-month um
runway to basically say let's see what
we can do in two months
and it was just the four of us you know
kind of in the same area in the office
and
we just saw what we could do and um two
months go by and you know the
stakeholders are kind of getting a bit
bit nervous about the time that was
taken and you know the deadlines looming
and i brought the guys into a meeting
and said you know how do we feel about
it do we feel like it's ready to kind of
be released and you know we can get a
couple of internal teams working within
the language and we all decided like you
know this this language has great
features and we set out designing it to
have certain features that we wanted it
to have
but it's it's actually missing something
and when we brainstormed it um we
effectively landed on the conclusion
that
we had taken the wrong approach so you
know you shouldn't write a language
where you've got like five or six ideas
in your head about
nice features to add to that language
and um just certain aspects about how
you would program in that language you
should instead forget about that
throw that all away and focus on
principles and values what are the
values you want to
be embedded in that language and to
therefore be
embedded in programs written in that
language so
you know we we knew we wanted things to
be minimalistic we think that modern day
languages have far too many abstractions
we wanted to give the the programmer
only that which they need to write great
code as opposed to what they want
because when you give people what they
want first of all there's no end to what
an individual wants and second of all
different people want different things
and so you end up you know you can end
up with a language that just has a bunch
of random that no one really cares
about and it makes it hard to understand
what's going on when you're coming onto
a new project
so
you know it was a tough conversation i
called up mark he was it was like 7pm i
think he was having dinner with his
family and just said hey can we
take a bit longer we want to start again
from scratch we had about a hundred
thousand lines of code at that point um
and you know he said
okay
and that
there was the there was a slight
inflection as he said that
which kind of begged the question you
know
okay
but you know
i'm giving you that i'm giving you the
i'm giving you the space that you need
to create a great language here but
there is that uncertainty and that was
actually the inspiration for the name of
the language okay with a question mark
the reason for that is because it's in
the question mark that the magic lives
the excitement you don't know where this
new language is actually going to become
worthwhile or just be chucked in the
trash no one knows but
is the unknown that is exciting about it
and so that's that's the the
origin of the actual name
so
we started over
we
started from principles and we
extrapolated to features rather than
going the other way around
and
you know
we're approaching the deadline again
and it happens again we get in a meeting
we say it's actually it's just it's not
right it's still not right
the
it was like
99.9 percent there
and the reason that we all still felt
that unease about it it wasn't like it
was incomplete and we had to just go and
add more things to fix it there was
still something fundamental that wasn't
right about it
and what we had discovered is we you
know we you think about other languages
like
java you know
languages that are very
you can you can tell by looking at the
language that it was written in a
hierarchical context you've got
inheritance in java you've got
these taxonomies it's like we think
about a big org chart
we found that by being
embedded within a corporate
context or writing a language we could
not help but
we couldn't help but kind of permeate
some of that
corporate context into the language
itself and we feared that we would have
the sa we'd be making the same mistake
that all these other languages have made
that we're trying to get away from so
you think about most um
popular modern languages today they're
typically backed by a big company
because they've got the capital to spend
on that so you've got go with google
russ started out with mozilla
typescript and the react framework or in
microsoft so
we said
hang on reaction facebook isn't it
anyway as much as we loved facebook we
had to walk away from that to really
capture
what what had become our mission for
quite a few months at that point which
is to change the needle on the culture
of programming so
i talked to mark and said
we're going to have to we're we're going
to resign the whole team resign it was
four guys at the beginning and we we had
a fifth come in about halfway through we
all resigned we all went to my friend's
uh garage and just started um
from scratch once again threw away
another hundred thousand lines of code
and um
you know the rest is history you know i
had no idea at the time
you know the initial intention was let's
just try and change the culture within
within this company facebook that we
were in um but i had no idea at the time
it would become as big as it is now and
i feel like
i i feel like the decisions we made
had we not made the decision to to step
away from the corporate environment and
kind of go and do it you know in an
isolated garage um
in rural australia i don't think that we
could have had that same success right
yes okay clinton yes quentin question
mark so that's an interest that's an
interesting story there so so what
happened with quentin was we knew that
we needed a mascot so not every language
has a mascot but think about you know um
rust has that little crab thing and and
the the go language has gophers and
um you know
i was inspired by seeing the female
butterfly from the raku language which
is the successor to pearl i think it's
pearl six or something like that
um you know seeing
the the conscious decision to kind of
take a social issue such as you know
women being underrepresented in stem um
and and capture that in the mascot that
actually had an influence on me so
so i obviously that language crashed and
burned but um
i wanted to try and take it
to the next step so you know we i just
had a sketch
initially we weren't thinking about any
of this stuff we're just like we need to
have a mascot but um i had a sketch of
just a big red question mark with eyes
and a mouth and you know it's just funny
a quentin question mark um but rob our
graphic designer um he when he
vectorized it and um because i just had
a crappy you know on a piece of paper
but he vectorized it professionalized it
and you know looking at the result you
could see in
quentin's eyes
a
you know it was hard to
hard to hard to describe it's kind of a
malaise
or um
maybe fear or melancholy but there is
there is an unease um in his eyes and um
you know when i saw that i just thought
this is the perfect opportunity to um
to
[Music]
do something special with this with this
character and at that point it really
was about being a character like
you know you think about most mascots
who are they what's their backstory
you're not you're never going to find
out
we wanted to change that so what we
wanted to do here is to combine all
these ideas about you know
like think about
some people have the idea that a
language should be
written in isolation of whatever the
social zeitgeist and the problems of the
era are and i strongly disagree with
that i think that you can't separate a
language from the social environment
in which it is found and in which it is
created and so
i
wanted to
give this mascot some traits which
reflected what was happening in in
modern times so
you know quintin has depression
effectively um
we wanted to
have a narrative structure to this
mascot so i think depression is a topic
that isn't really discussed enough you
know i've had depression i think
probably
either a majority or a large minority of
my friends currently have depression um
and you know probably about 30 to 50 of
them are currently on antidepressants so
this is an issue which afflicts you know
a lot of people um especially with
economic i mean like there's multiple
issues but
a lot of things are conspiring right now
to make the lives of of people
um suck quite a bit and
what we wanted to do with quentin is
kind of say okay you've got a question
mark who is immortal
um has eyes but no eyelids um
and is kind of
separate to the physical world so he has
no physical form he's purely digital um
you know what does that does that take a
toll on a person or in this case a
question mark to be that kind of to be
that kind of being and to live through
life where you know anyone that you ever
have an emotional attachment to
eventually passes away what we want to
see with quentin is him exploring that
and kind of learning
the effects of you know whenever you
write a program he's saying something
about how depressed he is you know
saying i don't think anyone gives a
about me things like that so
i think that um
you know and then there's also about
attachment issues so like if somebody
says they're going to self-harm if you
leave them is that them
sincerely expressing their internal pain
or is that a bargaining chip to retain
control over you and the answer is it's
a bit of both
so we want to take clinton and explore
all these themes in a narrative
structure that is progressed as the
language itself progresses so the idea
is that you know maybe
okay version 1.1 comes out and all of a
sudden quentin has a slightly different
personality he's got a different
situation in his narrative arc and
you'll kind of be given bits and pieces
of information about that when you run
programs so maybe like one out of five
times you're on a program you'll see at
the bottom quentin question mark says
and he'll just give a little bit of a
diatribe about
what's happening in his life at that
point in time
so we're very excited about that it's
really the first time it's been done in
any programming language and i hope that
it becomes a model for other languages
to build upon you know it's been it's
been a great experience doing it we've
gotten called up sachin nadal called me
he was saying you know i heard that mark
was sad to let you go
um
but uh you know if you guys need any
funding you can you can talk to me and i
said it's
don't worry about it like
when you're in a garage with
four other guys
and um you're all on the same page and
you're you're doing something which you
know will make the world a better place
money becomes completely irrelevant so
you know he was saying do i need to get
bill gates on the phone what has to
happen here how do we make this work and
i was just
it was the kind of thing where
i think that he knew
and
when i explained exactly what i've just
told you you know when i explained that
to him um
[Music]
he he got the message and said okay and
you know you hear that word and just
keeps coming back again and again it's
like going full circle that word is so
powerful because it communicates
understanding
and
i think that's that's really what this
language is about is about building
understanding creating great languages
and
and kind of rebooting the industry in a
way that allows us to start writing
great code again
and feeling the magic again so
yeah that's really all i have to say
[Music]
you
