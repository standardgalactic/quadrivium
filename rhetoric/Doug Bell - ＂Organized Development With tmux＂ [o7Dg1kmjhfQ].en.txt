I need a really silly little thing if
anyone wants to follow along or ask me
questions without actually standing up
and asking questions and projecting
it'll be easier if you use that little
website there so this is about
organizing my development with team ox
why is that so small all right yeah
maybe
all right so since showing is going to
be a lot easier than telling you I'm
just gonna show you right away what team
ox does but first as anyway here used
canoe screen all right so a lot of
people here kind of will probably find
this a little bit familiar a lot of
other people probably use tabbed
terminals now even even Windows has
finally gotten really good terminal
terminals and not like back in the day
with the command dot exe and notepad how
I learned how I learned to write Perl so
I can't really go over installing team
ox though I will say that it's available
in every package manager I've ever used
including open BSD and FreeBSD I've used
it in cygwin there's the windows
subsystem or sorry linux subsystem for
Windows which I've heard works it's the
the Ubuntu and Windows thing and now
with with all that docker in Windows
stuff you can probably get a good one
that way too
but suffice it to say that if you want
to try out team ox it'll be available
for your platform so to start out with
team ox since it's a command line
program we just need to run the t-box
command so once we run this command here
okay well we're back at a shell prompt
again but now we got this little this
little blue or sorry green bar down at
the bar
here and we got this over in the bottom
left here we've got what's called the
session name which defaults to zero and
we'll talk about what sessions are and
how to use them later but next to that
we have window information so I have one
window here window zero it's currently
running it's currently running Z shell
which is the shell that I use and this
little asterisk here says that this is
my current window so like most command
line programs were packing a lot of
information into a very very limited
amount of space and creating and
managing windows is one of the most
useful parts of T MUX so going to be
spending a lot of time talking about
this but finally over here on the right
we've got some information that I don't
really care about I got the the hostname
of my laptop and you can see the time
the screenshot was taken at yesterday
night at 4 o'clock so burning the
midnight oil
apparently otherwise this is just what
we had before we ran T box so I can type
a command in here I get some output on
my screen it's pretty amazing
and then yep and then when we're done we
can exit our shell and we've exited T
box so yeah that's all I got to say have
a good night oh no no okay okay okay so
how about instead of exiting we can
actually do a thing called detaching so
we can detach from a react amok session
and then later we can reattach to it
when we detached from a session
everything that we had in our session
keeps running so T McStays running in
the background anything in our session
keeps running waiting for us to get back
to it so let's start T mocks back up
again but this time let's detach instead
of exiting and we do this by typing
control B and then hitting the D key so
control B is
called the prefix so when we type this
we're telling t MUX that hey we're about
to tell you to do something and then D
of course stands for detach so if you're
a screen user you might remember that
control a is a prefix and later I'll
show you how to configure whatever
prefix you want personally I find
control B to be a finger workout so I
changed mine to control ass but so
wouldn't we detach after we did control
B and then D we're back to our terminal
session and you notice that he mucks
tells us that were detached and what
session we detached from but in the
background
our team X is still running so later if
we want to attach back to our session we
can run T much T MUX attached session or
for brevity T MUX attached or for even
more brevity T MUX a and when we do that
we're right back to where we started so
why is this useful
the most common use case you'll find for
this is SSH connections you'll connect
to your remote machine you'll start a
team accession and then everything that
you do in that team accession is on that
server and later if you get disconnected
or if you you know quit work for the day
when you come back tomorrow morning your
team accession is there how you left it
and you can get back right where you
were so for a lot of people this is
indeed the only reason they use T MUX
they just create one window one session
and then they just have that kind of
insurance that if their internet gets
unplugged they still have the code that
they were working on this is actually
also good for detaching tasks running
them in the background so if I run you
know a daemon or if I'm running a
long-running task I could run it using
no hub I could run it using disown but T
MUX makes this a little bit easier to
get back to where I was so if that
long-running task is spitting out tens
of thousands of line of output I can at
any time reattach my session and then
CEO hey this is this is where my
my process is and this is about how far
I think it has to go it's not impossible
to do these things with no hub and
disown it's just more difficult and
quite annoying
in fact so knowing I've never even tried
it so now that we've reattached we're
back in team ox we try some other
features so the name team ox stands for
terminal multiplexer making one terminal
act like multiple terminals and so the
first way we can do that is with Windows
so here we are back in team ox and
remember we already have the one window
open windows zero so let's open a
program I use vim for my editor so let's
run vim okay so now this window is busy
running vim in order for me to want to
do something else I'm gonna have to open
up a new window and I can open up a new
window using ctrl BC control B again is
the prefix and c is for create window so
when I do that I have a new window with
a new shell you can see down here my new
window is window number one it's running
Z shell my my shell and is our current
window you can also see that the old
window over here has a little dash next
to it that says that this is our last
window our previous window the last
window we were at again a lot of
information being packed into a very
very tiny space here probably not out
that important but well we'll get to why
that's mildly interesting so how now
that I have this new Z shell window how
do I get to my old window so there's
multiple ways in in true Tim Toyota fast
occurred yeah since it was the previous
window I can use control B&amp;L for last
window I can use control V and P since
it's the previous window numerically so
one will go to zero two would go to
total one or I can actually choose my
windows by number use
control b0 so to go to window zero
directly I can just choose it the last
one is a little more difficult because
the zero key is way over to the other
side of my keyboard but we'll go over
how to fix that also a little bit later
here so doing any one of those will
bring me back to them and then to get
back to the new window I could do ctrl
BL again because that was my last window
I can go to the next window numerically
or I can go directly to a new one yeah
so I can easily move back and forth
between our windows and now that I'm
back in my new window I can run a
command maybe look up T muxes
documentation which is a really good
thorough document I'm always impressed
by this and then when I'm done looking
at that I can exit the shell and we're
back to our last window and the window
that we had created is now destroyed so
the next thing that a new team-ups user
is going to come across is that once
you've entered T MUX your terminal
doesn't really work quite like it used
to
specifically the scroll bar doesn't
quite work how it used to so if I run a
command with a lot of outputs and then
if I try to use my mouse usually to to
scroll back up on my terminal window so
I can see that I'm scrolling through the
terminal here but not the output and
sometimes I won't actually even scroll
at all now this is mainly because the
mouse isn't enabled in team ox and I'll
go over you can enable that if you want
I don't but if I want to actually look
at all of this output T MUX is friendly
and hopefully putting this output in a
buffer for me and this is good because
it means that we can come back to this
later but it does mean that we need to
tell T mocks that we want to look at it
and we do that by entering what is
called copy mode and we enter copy mode
by hitting control B and then the that's
a left brace left left square bracket
left square bracket there we go
so in copy mode here we have two changes
down here the the name of our window is
encased in brackets to show that we're
in T Moxa's copy mode and then up here
there's two numbers the first one shows
what line we're on right now zero is the
bottom of the screen and then the second
shows the number of lines that we have
in the buffer so we I have about 200
lines up worth to go so I can move
through this buffer using left up right
and down I can use page up page down T
MUX also comes setup with less style
bindings so I can use hjkl control F to
go up control B to go down and then
lower case G to go to the top upper case
G to go to the bottom you can't actually
also configure other styles vim Emacs
whatever you'd like so I hit the G key I
scroll all the way to the up all the way
to the top and I can hit capital G and
scroll all the way to the bottom but I
can also move through the buffer by
searching for keywords again much like
last fin
Emacs all that I can use the question
mark to search up and I can use the
slash to search down so if I hit the
question mark you can see that T MUX
shows us that we're searching up and
then all I have to do is type in what I
want to look for I mean when I press
ENTER T MUX shows me the search results
it highlights all the matches that I
have and then it puts the cursor on the
bottom one since we were searching up
and then if I want o right there tells
us how many results we found this
actually was pretty recently added then
I like this a lot
so then I can move through my next my
results by pressing either lowercase n
to go to the next or uppercase n to go
to the previous I don't know why it's
not P but yeah so pressing n goes to the
next result here takes me up a little
bit bit in the page and then if I want
to exit copy mode I can hit Q to quit
and then I'm back at my command prompt
will the buffer continue to grow so the
buffer will continue to grow up to the
amount you set it to
I generally configure it to be about
10,000 lines and unfortunately for me
with the the job I had that's actually
not enough but I don't want to go too
far because you know memory is a thing
that is necessary for that so yeah you
can configure that to be basically as
tall as you want it to be so finally the
last thing about copy mode is is it's
called copy mode because we can copy
text from the buffer and then paste it
in later so I can start selecting text
by pressing the spacebar and I can then
just move through the text to select it
so if I just move down a couple of lines
I was select all this text and then I
can either press ctrl W or I can press
the Enter key to copy the text into the
the paste bin or the pasteboard or
clipboard clipboard that's the word and
then I can go back to my editor window
if I want and if I hit ctrl B and then
the right square bracket it'll paste the
text so some of that is a little bit
awkward
I will admit I don't use that very often
most of the time I just select the text
with our mouse and then copy and paste
who I want but when the text is too big
for a single screen of my terminal I end
up having to go to copy mode
pasting all you know copying all the
text I want and then moving it to where
I need it to be
okay so team ox can create then multiple
windows but what if I want to be able to
look at both my editor and my output
side by side so for this team ox
actually allows splitting windows into
panes so to split the window vertically
I use ctrl B and then the % and now our
window split into you can see I got them
still on the one side and a new shell on
the other side and I can split
horizontally using ctrl B and then the
double quotes I have no idea why these
were chosen
though the % at least looks like a
vertical split so now I split my right
pane into horizontally and I can keep
going and going on into uselessness each
pane has its own shell its own scroll
buffer and when we're done with a pane
we can exit the shell and the space case
reclaimed so now we're back here - we
got editor on one side the shell on the
other to switch between these panes we
can use ctrl B and then the left arrow
so control B and the arrow keys will
actually move us between the panes on
the window so control B left and now I'm
back in my editor and then if we split
this pain but we need to see it full
screen for for some reason we control B
and Z for zoom we can actually see the
plain full screen so I end up this one
took me unfortunately a long time to
learn and now I use it basically every
single day especially one copy and
pasting code to ask my you know
co-workers hey what am I doing wrong
here so when you're in zoom mode you can
again notice that down here we're
showing that we're zoomed so if you
forget well there's an indication here
but also if you forget and you try to
move panes or if you try to split a pain
it will DS oom first
then split your pain so that's a little
painful
so yeah I'll be here all week
those are the basics starting and
stopping t MUX attaching and detaching
from sessions creating destroying
switching windows creating district
sorry using the scroll buffer and copy
mode and then creating destroying and
switching panes so with only these
things T MUX is a very useful tool I got
around with using this only these
features for the longest time but after
a while you know I felt like trying to
customize this and with my new job here
I work at Grant Street group now I work
on like five or six tickets in add a
very small tickets and I all III
generally have to like switch between
tasks I have to go back to old tasks to
fix minor bugs and my code and it became
a lot of context switching so the rest
of this is about how to maximize your
efficiency with team ox and of course
the first thing we have to do is
customize it for our needs
team ox is highly configurable like all
good software I don't believe it can
send email yet but I think they're
working on it so I'm only going to be
able to go over the most useful things
especially for anyone who's just
starting out these are of course just
examples this is what I do if you have
if this isn't your need you know go
ahead try something else
so the team X configuration file is team
bucks Kampf in your home directory so if
you've never configured timox before
you're gonna have to create this so I'll
open up this file and my editor here and
then the first thing I do in team ox as
I changed the prefix like I said control
B default is kind of a finger workout
for me I could actually use the keyboard
correctly and maybe then it'd be using
both hands but I don't do that so
screen users will end up switching mr.
control a and I don't like do that
because it's actually useful for control
a by default that's bound in most shells
to move to the start of line so whenever
I'm in screen I try to use control a to
move the start line and then it doesn't
do anything and I'm wondering what the
heck
so instead I decided to start using
control s the s keys on the home row
under my fingers and I never ever use
control s for its initial purpose of cig
stop I've never actually had a reason to
use six-top but probably before my time
so yeah oh yeah quick question no sorry
I mean I will use control z putting in
the background that works and that also
stops it so hey so to change the prefix
I'm gonna use the set command I have to
give it the G option to make it a global
setting so this will set the prefix for
basically all the sessions all the
windows all the things that I create and
I'm going to set the prefix config to
control s the capital C here is control
after we change the prefix we're going
to do two more things here quick
first the default behavior for pressing
control B twice is to send control B to
the currently running a program in the
in the terminal so I don't need to do
that because control B isn't the prefix
anymore so I can unbind the existing
functionality of control B and then
finally I need a way to send control s
to the current program just in case like
I mean I don't know why I would use sync
stop but there might be a reason
eventually in the future in fact most of
the time I do it now is accidentally
which is always fun so what I'll do is
I'll bind control s to send the prefix
so what this means then is that if I
have if I you send the free if I hit the
prefix and then hit control s
I will send the prefix to the currently
running program so now my prefixes
control s control B is just control B
whatever control B does and if I press
control s twice it'll send control s
once to the program now for maximum
confusion I'm going to keep calling the
prefix control B throughout the rest of
this talk because that's what it's going
to be when you start out so that will
either limit the confusion or increase
it whichever so next thing I want to do
is I want to renumber my windows having
the window start at 0 is annoying our
window or I saw all our keyboards start
numbering at 1 so ones on the Left zeros
on the right so if I'm using the number
keys to switch between Windows if I want
the first window I have to go all the
way to the right side of the keyboard
which doesn't make any sense to me so
what I like to do then is to fix this
quick
I set the base index to 1 and then when
I add that to my configuration file and
then I'll have to restart it eventually
to get renumber in and the next thing I
have to configure as a vim user is I
have to configure the escape time the
default behavior of T MUX is to wait one
second after hitting the Escape key
before whatever escape sequence here
about the type is sent to the next
program and this is because escape this
gate key is is the first character in an
ansi escape sequence it's a way to send
special commands to terminals
extremely special commands like pressing
the left arrow to move the cursor left
pressing the right arrow to move it
right and trying to make bold text these
are all escape sequences and since we
use the arrow key to change panes
teamworks has to wait for that escape
sequence to be fully complete before it
can decide whether or not
to send it on to the program so normally
this takes almost no time however if
you're on a network or if you're on a
cellular device this might take longer
and longer so as a vim user though I
need escape to get me out of insert mode
and I need it fast so what I found is
that I will type the code that I'm
typing I'll hit the Escape key and then
immediately start trying to go up and
down in my file and start typing hjk and
I'll in my in my editor so ruining
whatever I'm trying to do so I can
configure T MUX then to spend less time
waiting for these things and just hope
that I'm never on a TCP connection with
a latency of you know a second so if I
set the escape time to 20 milliseconds
maybe that sounds about right
we'll never we'll never have more than a
40 second or 40 millisecond peeing right
so with that out of the way I can access
let's make it a little easier to move
panes I'm a vim user so in my head I
have mapped all of the arrows to hjkl
it's actually kind of freaky how often I
move to hjkl when I'm trying to for
example play a video game and move
around it's it's really weird how that's
now ingrained in my head so if I want to
I can bind the H key to select the pane
to left and then if I do control B and H
it'll go to left and then I can do the
same thing for J to go down K to go up
and L to go to the right but we're not
limited to just using the prefix here I
can also bind keys if I want so that if
I press them at any time they will do a
thing so I can make it so that for
example holding the Alt key will and
then hitting an arrow key will move me
through panes
so I can take all these binds that I
made and if I add the m4
no keyboards have a meta anymore so it's
called alt and then if I pass the N
option to say no prefix now if I hit alt
H at any time it'll bring me to the left
so once I've done all the configuration
I'm going to do
I can reload my config I could just
restart T MUX but I'm lazy so I'm going
to reload my confi in my current session
we can load the config using T muxes
source command much like bash source or
shell source and there's not really key
binding to do it so we can do that using
T muxes command line to sort of show the
command line I can do control B and then
colon and then the status bar down here
change to the command bar so this
command bar down here at the bottom lets
me execute T months commands indeed
everything in this config file so far
has been a team ox command if I wanted
to I could run all that stuff down here
on the command line and we'll actually
get to more fun with that later so to
load the command line remember we use
the source command and then we give it
the file that we want to source so this
is our home directories T MUX con file
so when I put that in it reads the file
and now you can see that my numbers on
the windows have changed so of course I
can't be maximally productive unless I
control how everything looks so T MUX
lets us change the color and position of
anything down here in the status bar for
example this like blue on is a green on
blue blue on green text down here like
I'm having really trouble seeing that I
use are you solarized for all my
terminals and this is not a good color
scheme for solarized and this this right
side over here takes up a lot of
I don't really need to know what day it
is
I mean I may forget what time it is but
that's what I have a phone for so let's
configure a couple other things first I
can set the status background to be
black and then I can set the status
foreground to be white so I'll have
black background white foreground and
the next I can configure the amount of
space that the left side which is the
session name and the right side which is
all that other stuff are allowed to take
up so I can set the status left length
to about 20 this this is what I have you
can obviously set your own but we'll get
into why you need some space over there
a little bit later and I don't want the
right side to take up as much space as
it's taking up so I'm also going to set
that to 20 and once I get all this
configured I can again reload my config
file and now we can see that everything
looks prettier and over here the host
name in the current time are being shown
so it'll actually team ox will adjust
how much it shows over there based on
how much space it has to show things and
this isn't actually that much or isn't
actually like the limit of what
teamworks can do there's people who put
battery monitors load monitors they they
really go can go overboard in the little
area over there if if bells and whistles
and gauges and dials are what you like
so one more there's a lot more
configuration to do but not much I can
go over however I will say that if you
like using a mouse in your terminals you
can set mouse mode on and then once
you're in Mouse mode the scroll wheel
will work you'll go into copy mode when
you try to select things and very much
works
much like Mouse mercs and vim or Emacs I
personally don't use it I prefer my
terminal to be a dumb texts displaying
thing but I know a lot of people who
like this so remember that detaching and
attaching sessions are one of t muxes
core features but what if I don't want
to reattach to the session that I
already have running so if I just run T
MUX again without trying to attach to my
to my session I get a new session you
can see down here our session is now
named one because I have a session zero
already and this is session 1 here so
now I have a new team accession
completely unrelated to any other team
work session I have running I can open
up new windows I can split them two
panes I can start programs just like any
other team like session and then when we
detach T MUX tells us that we detached
from session 1 so let's try attaching
again so if I run T MUX attached I get
the last session that I attached you
that's pretty handy but how do I get to
the first session session 0 so I use T
MUX attached with the - T option I can
specify what session I want to attach to
in this case one attached to session 0
ok well so T MUX doesn't like being run
inside T mocks so I forgot to detach
first all right so I detach and then I
run T MUX attached - T 0 and now I'm
back to where I was before editing my
config file so I want to know what
teamwork sessions exists or even whether
or not team Oakes is running I can run
team ox LS and that will list all the
running sessions their names and a
couple bits of information about them if
there's no team accession it'll tell you
no server running but in order for us to
really use multiple sessions properly
we're gonna have to have something a
little more descriptive than this 0 &amp; 1
we can instead give our sessions
descriptive names the project we're
working
or the gyro ticket we're working on we
can rename any session we have by using
the rename session command I can either
use the T MUX prompt back control V : to
run rename session or this is actually
bound to control V dollar slowing I
didn't know that and I never remember
that
so I usually end up using the command
prompt so I just need to type control V
:
and then rename session and then the
sessions name so I'm gonna call this one
my talk this is or maybe my talk then we
were on that command our sessions
renamed I can see down here that now my
session name is taking up a little more
space down on the left so that's why we
got cetera set it to 20 earlier it now
also shows up in team XLS so it's not
session 1 you know LS anymore it's now
session talk and also you can see team
Excel s will tell us whether or not a
session is attached so if someone else
is attached to the session or some other
terminal perhaps you can see that right
and right in the Alex output so if I
want to I can create a new session with
a name right away by using T MUX new
session or just t bux new the - s option
then allows me to specify a name when I
create the session so now I have a
session second session named bug-fix so
I use these a lot like I said my current
job has to be bouncing around between
four or five tickets a day each ticket
touches different files different tests
and no matter what two days later
someone's gonna come and say hey you
didn't quite do that right so can you
just make this one little tweak on this
line and it's really helpful to be able
to have my editor already open to that
window in that repository and just okay
yeah switch to the session make the
tweak run the tests and we're done
so for each ticket then I work on I
actually create a new session named
after the JIRA ticket that
that the works being done under that can
attach to whatever session I want to
work on do bunch of work when I get
interrupted to work on something else I
can go back to that session and so on
and so forth so this really helps reduce
the inertia of contacts wishing for me I
was actually really struggling when I
started at Grant Street of being able to
switch between four or five tickets a
day and I I kind of worked out how to do
this I now have a bunch of shell scripts
that actually like set up these sessions
set up repositories I use get work trees
so that I have different areas for every
ticket that I'm working on and it's it's
it's really been helping in addition
then to naming sessions I can also name
these windows like I may have mentioned
before actually I don't think I
mentioned before windows are named
generally with the program that's
running so you may have noticed down
here that since this window is running
vim it says it's running them and then
since this window is running Zed shell
that's running it just that's running
Zed shell and this is a pretty useful
default but let's create a new window
okay now I have two windows named Z show
and which ones which I don't know which
one I have my tests in I don't know
which one that I was looking up
documentation or logs in so instead I
can just rename the windows using ctrl V
and then comma or of course the the
rename window command this one I used so
often I actually do know the shortcut so
when I do ctrl V comma I get this
command line down here and then in the
prompt I have to block out the name
that's there and replace it with the
name that I want so this is my this is
gonna be my editor window once I've done
this this will stay the name even if I
run a different program in it
so this disables all the automatic
renaming of windows so now I can easily
remember which one has my editor which
one I'm running my tests in
and which one I've been looking at
documentation eventually longer longer
than I should have taken I realized that
I was doing the same thing over and over
and over and over again and when this
happens I like to take a step back and
say okay what what can I out of eight
what can I do so that I don't have to do
this boring stuff over and over and over
again so in this case I was creating the
same team oak sessions over and over and
over again whenever I write a blog post
I would create one with my editor and my
blog site generator on one side when I
was working on the sea pentesters back
end I'd have to have one window for my
code and one window for my tests so that
I could always like go back and forth
between the test results and my editor
and when I'm working on my antsy content
management system I need a window for
editing
I need window for testing and I need a
third window that runs all of the
databases that yancey supports I support
post grass my sequel and so we have to
run a version of those so that I can run
my tests against them the tests also
require a bunch of environment variables
that I need to set up and if I had to do
that every single time I would go nuts
even if I had to do it once a week I
would go nuts
worse in that last example there where I
got a set of the environment and
everything I'm going to forget and if I
forget I'm not running all my tests I'm
not running all my tests I'm gonna
release code that doesn't work and then
something's going to explode and
everyone's going to die and I will have
killed you
so to read this I can automate the setup
of my team of sessions so and I can do
that using T mocks commands remember we
were using T mocks clans to rename
sessions and the command prompt we were
using TMS command to configure T MUX in
the the configuration file T MUX also
has commands to create windows to create
panes to move between panes and even to
like
run programs in those those windows in
those panes so I can run but also I can
run these team expands from anywhere I
don't have to be inside tea mugs to run
these commands so indeed I can run a
bunch of clans to set up a session
before I attach to it so if I create a
session let's name it Yancey for the the
CMS that I work on and then if I pass
the dash D it immediately detaches so if
I do that nothing happens but if I go
back and look at the LS you can see that
my session did get created so now I can
run other commands to modify this
session and since I'll be doing this a
lot I I wrote a shell script to do it
for me
so here I create a new session and
detached from it and then first the next
thing I do is create a new window so
this is going to be my second window and
I'm going to split that window up into
two panes vertically so one over the
other
the first window is my editor so I'm
going to send it the vim command and
press Enter
and then the second window I'm going to
run the actual CMS in it this is the
second window in the first pane 2.0 the
bottom pane 2.1 i'm going to add those
environment variables i was mentioning
before and then i'm going to create a
new window the third window and run
Postgres and then i'm gonna split that
window and run my sequel that's Postgres
above my sequel and then if i wrap this
whole thing in a conditional I can see
if the session does not yet exist create
it but if it does exist all you do is
you go down to the bottom and you attach
to it
so I've been doing this I actually added
this to the UNC repository it's been so
useful
there's besides these shell scripts
there are other ways of doing this I've
been using something called T MUX a fire
but there's also something called T
Mosul but since I learned how to do it
using shell scripts now mostly I just
use it doing shell scripts T MUX a fire
and T Mosul were both kind of I guess
before it was as easy as it was to do it
using shell but but also these these two
things will actually help you organize
and manage your sessions if you don't
want to do that yourself using shell
scripts so that's how I've been using T
MUX to organize all my development and
kind of help me with switching between
all the various tasks I work on a given
day
do we have any questions yes
yeah so question is do I do is Sh into
the remote host before running T MUX and
then use the multiple team box windows
on the remote house and yes that's so
usually what I do is most places have
like a gateway host or a bastion host or
they're like my own development server
and what I'll do is I'll SSH to my
server the place where I put my team up
sessions and then if I need to go to
other places I will just open up a new
window and team ox and SSH to a further
server this involves of course setting
up SSH agents setting up SSH agent
forwarding and there's annoying things
about when you reattach to a team
accession you have to fix the SSH agent
forwarding a little bit it's it's it's a
lot of people have this annoyance and
I've I've got it as less annoying as I
can but it's still not unfortunately
turnkey but yeah so III for Grand Street
at least I spent all my development time
on the server for my personal laptop
well my development time is is just my
team work sessions are on my laptop here
looks like I got question from the
audience do you ever change the info on
the bottom right since you don't care
about it mmm I did yeah no I do not oh
right yes I got I get rid of the date I
just yeah basically I squeeze it all
down there I don't really need any of
that down there I do keep the time there
because it's a nice indication
especially at work it reminds me because
the old work servers are in this time
zone and I live in central time zone so
it's nice to say oh hey it's 5 o'clock
Chris is not in Pittsburgh Chris is
never going to get that review is never
gonna send that back to me so any other
questions comments concerns yes
it is yes so the question is is is how
can I get team ox share team accessions
and team ox now has a concept of a
socket and if you I believe it's I don't
I don't know unfortunately what the
command line but it's it's something you
pass to TIA MUX itself it must be
capital s yeah so - capital S will be a
socket file and then what you do is you
create a new socket file give that other
person permissions to that socket file
and then they can use that same socket
file to connect to it any team
accessions running in that socket file
so that's so basically all you need to
do is kind of set permissions on that
one file and then other people can
connect they want it to actually be you
okaythat's yeah that's a good idea of
changing changing the team account for
roots to be read or to say hey you are
roots
be careful yeah that's yeah no that's a
like yeah usually usually for me it's
just the prompt but yeah if I if I don't
notice the prompt then yeah alright
anything else yeah all right
yes ah this is just my vim but I have I
have yeah I have something similar in
that ah well I used to have something
similar but I made the slides and the
tea much confers from these slides but
you can actually get it to look like
this this power line thing this really
kind of fancy like this is using a
custom font to get these special arrows
down here and over here and this little
ln4 line is a custom font thing it's
it's this this is power line there's air
line there's all sorts of other things
and you can really get some fun
interesting stuff in your terminal that
was normally relegated to to GUI editors
alright thank you very much
[Applause]
