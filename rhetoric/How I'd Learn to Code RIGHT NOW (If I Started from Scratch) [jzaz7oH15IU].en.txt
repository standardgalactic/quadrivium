it's always funny to me because looking
back on how i learned to code back in
2014 is similar to how people now look
at videos of people in black and white
driving around and model t forwards i
thought back then that i was on the
cutting edge to be honest that i was
learning so quickly but now that i've
been a professional software developer
for so many years now that i've mentored
people who are learning to code who are
trying to become software developers
there's so much that i've learned that i
realized that i was not on the cutting
edge like i thought so in this video
what i want to do is really show you
exactly how i would learn to code if i
had to start all over start from scratch
right now to give myself the best
opportunity to land a job i'm talking
about not only learning materials i'm
talking about projects you can build
when to start applying like i'm gonna
lay it all out there as simply as i
possibly can so let's dive in if we were
to hop in a time machine back into 2014
and really see how i did this so if we
hop into delorean hit 88 miles an hour
[Music]
you would see that the process was
pretty straightforward first thing is i
have my friend who recommended that i
become a software developer he thought
it'd be a good fit i asked him how you
do that he said check out this headfirst
javascript book first and see if you
even like it i read that from cover to
cover so i learned javascript that way
and then i built two projects a tetris
app and also a google maps api app after
that i actually learned c sharp as well
through the head first c sharp book of
course i built two c sharp projects at
that point i was about nine maybe ten
months in i applied for a bunch of jobs
i eventually got a single interview and
off that single interview i landed a job
so that's the simple process that's the
abbreviated process of how i went from
no software developer to software
developer so let's start with that first
phase that i would really call the
learning the fundamentals phase so that
part where i was just going through the
head first javascript and learning about
javascript is what i would call learning
the fundamentals would i do that
differently the answer is no actually
that's one of the few things i would do
the same i see people get this wrong all
the time because they pick tutorials
that really kind of skim over the
fundamentals and they start getting into
projects and if they don't really know
the fundamentals well it's just a recipe
for disaster learning the fundamentals
basically means two things it means a
learning syntax so the rules of a
specific programming language and then b
which is the harder part how to think
like a programmer so programmatic
thinking problem solving thinking in
terms of steps the best advice i can
give you as far as learning the
fundamentals is pick a single learning
resource that is high quality meaning
that's carefully cultivated and that
requires you to engage with the material
one of the reasons the head first
javascript book is so darn effective is
because not only does it sort of like
hold your hand through a lot of some of
the more simple concepts but along the
way it is constantly asking you to
participate by doing little challenges
and activities for example in the head
first javascript book when they're
actually teaching you about arrays they
definitely take their time to explain
what an array is but then they also have
you do a challenge like this that really
helps you to break down and really work
with materials that become second nature
so look i personally recommend the head
first javascript book as an excellent
place to start but you can choose
anything that is a high quality and b
that requires your engagement being
engaged and actively doing something
while you're learning is the key to
learning anything so get off your butt
right now get engaged and go down below
and smash like button so you can learn
as fast as possible and also get new
videos when i put them out alright so
the next phase of the process of
learning to code for me was actually
building a tetris application the
question there is would i do that over
again so this one actually the answer is
no i would not build the tetris app all
over again tetris is a very complex
application it has a lot of moving parts
and for a new developer this is going to
be very challenging and look while
definitely setting that bar high for
yourself is a good thing it's actually
better to progressively build yourself
up to something complex like tetris just
like if you had a goal for running a
marathon which is 26 miles you would
progressively build yourself up to it so
maybe you'd start off with running maybe
one two or three miles and each week
you'd progress up to that that's the
same basic idea this means that i would
have built simpler apps like a to-do app
or a recipe app or a note-taking app or
a pomodoro timer or an expense tracker
the reason i take that approach now is
because i've seen especially with a lot
of my clients who follow this process is
that because they're using their skills
in different contexts and trying
different things they develop a stronger
skill set but they also better prepare
themselves for more complex projects
because when you start to understand
things in smaller projects it makes a
little bit easier to handle all of the
complexity later on and also you learn
to get frustrated and deal with your
frustrations way before you get to some
of the complex projects the next phase
of my journey was learning that second
programming language which was c sharp
in that case so the question is if i had
to do all over again would i learn c
sharp again
so the answer is yes but
yes i would definitely have myself learn
c-sharp again because i learned a lot of
things that i couldn't have learned in
javascript the object-oriented nature of
it it's much more of an object-oriented
paradigm and also the statically typed
nature and just there's so many
different things about just the net
framework i learned so
much but here's the thing i would have
actually started applying as i was
learning c sharp so even yes i learned c
sharp it helped me to land my first job
but honestly i think i was ready at
about the six month mark to start
applying for jobs it eventually took me
a year and i don't think i needed to go
through the process of learning c sharp
it was certainly helpful to help bolster
my resume so i would continue learning
that second programming language as i
started applying for jobs if i didn't
end up getting a job i would go back to
the drawing board and maybe focus a
little bit more on that second
programming language so the last phase
of my journey was the job hunt and you
think because i landed my first job in
my very first interview that there'd be
absolutely nothing i changed i did it
perfect but that's not true at all i
changed pretty much everything obviously
as i mentioned i think i waited way too
long to start applying i think i could
have got a job at the six month mark i
was ready so we already rehashed that
the second thing is i did a terrible job
of interview preparation that's so
important now i was very lucky that i
got hired by a company that wasn't very
traditional in how they hired their
software developers instead of having
them do like whiteboarding interviews or
asking them random questions about a
programming language they brought me in
we talked a little bit of technical
things but then we they just really had
me do a take-home project and apparently
the take-home project was good enough
and that was really my strongest skill
that it landed me a job but now looking
at the atmosphere for self-taught
developers you have to be much more
prepared than that so the first thing
that i would do differently about the
job hunt now is that would practice
interviewing so what i noticed about
going to the interview process is that i
was very nervous i had really good
skills but when you go into interview
you're unsure of yourself you don't want
to look silly and the problem is is
because you haven't practiced those
skills in a very similar situation where
you're feeling a little bit nervous when
you get in the interview it's like the
first time the nerves hit you you're
feeling very uncomfortable so now i
would practice interviewing all the time
i would have my girlfriend interview i
would have my parents interview me i had
other people i knew interview me just to
get in that sense where you're feeling
very very comfortable with things and
the second thing i would do differently
is i would practice leak coding and hack
rate problems much more regularly back
then in 2014 i did maybe five or ten
hackering problems and i was like okay i
got it i understand how it works but you
don't realize that you need to actually
go into it feeling very confident that
you can do a hacker rank problem in
front of someone else and that only
comes from a repeated practice over and
over and over again so if i was in the
job hunt phase i would be focusing on
doing that about two hours a day to
really build up those muscles so you're
confident when you go into an interview
so look as you can see there's a lot
that goes into learning to code to the
point where you are a professional so if
you're in the same position i was back
in 2014 you're learning this on your own
you want additional support and guidance
i have a paid mentorship program that if
you're interested in joining i will
leave a link in the description below of
how you can do that so other than that
that's all i've really got thank you so
much for watching and peace out
everybody
