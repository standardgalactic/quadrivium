[Music]
hi everybody I'm George I work at sobot
um and I'm going to talk tonight about
letting them do the typing as Tut said
as humans we're pretty bad at typing I
probably spend 8 n maybe even 10 hours a
day typing I still make mistakes all the
time I'm still really really bad at it
uh and I chose to use Vim I chose an
editor that's very efficient it's all
about saving keystrokes it's all about
making sure that you do the minimum
amount of work to get the maximum amount
of
effect so why would I spend all this
time typing which is this really slow
manual error prone process so we're
going to talk about all the different
ways that that Vim can kind of help you
out with that and reduce the amount of
typing you do first we need to sort of
talk a little bit about
philosophy V versus emex one of the
battles that's raged since the beginning
of time itself um now these are both
great editors but they have very
different philosophies so in VI like we
tend to modify what a key does by
switching mode so you might hit I to go
into insert mode and now when you hit
keys they add text to the document um
then when you're in normal mode hitting
Keys might make some kind of edit
whereas when you're in emac like you're
going to change what the key does by
holding down some modifier Keys you're
going to like hold down control or or
alt or shift or control alt and shift
you're going to kind of twist your hand
until we shapes um everything I'm going
to show you today involves staying in
insert mode and like holding down
modifier keys so it's going to feel very
emac
like but it still fits within Vim
philosophy um so like in one of the
things that makes Vim efficient is that
we like to think in terms of edits like
you start out in normal mode you go into
insert mode you do a little bit of
editing and then you get out again and
you've made a single edit which you can
repeat using the dot key and you can
undo it using the UK key but what if as
part of that edit you want to add some
text to your document that you know them
has definitely seen before like maybe
this text is a symbol in your program or
like something you've got in a register
or something that's in one of your files
that would conceptually be part of the
same edit let's um let's see what I mean
with a with a concrete
example
um so here's a document I know that VI
currently has the word hello in the a
register has the word world in the B
register and I want to quickly type
hello
world so what I could type is double
quote a to select the a register and you
can see the the keys I'm hitting down
there in the bottom right double quote a
and then P now I've got my hello then a
to go into insert mode and space escape
to get out of insert mode double quote B
to select the B register P again a again
to go into mode and return to end the
line and then Escape AP quite a lot of
keystrokes I didn't have to type out
hello world so you know I'm kind of
winning on that I didn't have to do the
error Pro and typing where I could have
made a typo but I made four different
edits I did a paste and insert a paste
and insert and if I hit dot to repeat my
edit I just repeat the last insert where
I put in a new line and if I hit you I'm
going to have to hit you like four times
to undo that that thing but conceptually
it was one edit like in in my mind it
was one edit of adding hello world to
the document so this is the kind of
thing where like I might want to stay in
insert mode and do something more
complicated than just adding a single
character um so what are some ways that
we can we can do this well I can use
controlr so if I go into insert mode I
can hit
controlr and you'll notice control R has
popped up down there but my cursor has
changed color and there's a little
double quote there the double quotes
there kind of as a hint to say hey tell
me a register like double quotes the key
you press in normal mode to tell them
next key coming up is the name of a
register so same tell me register so I'm
going to say register
a so I just pasted from register a
without ever leaving insert mode so I
can hit space immediately control R
again B for register B and return and
now if I hit escape to leave insert mode
and I press dot I can repeat that edit
like I've made one edit
but I did it using bits of text that
them had seen before and I did it kind
of using these control key sequences in
insert mode so are you all convinced
that I'm not some heretical emx user
that like it's okay to hold down the
control key in insert mode sometimes
cool um so one more thing to do with
registers there is a special register
called Dot and the dot register contains
whatever the last text you inserted was
the last time you were in insert mode
right so the last time I was in insert
mode I inserted hello space World new
line so if I go back into insert mode
and I hit control R and then I hit Dot I
reinsert that entire
thing but even cooler if I just hit
contr
a then just does that for me so have you
ever been in the situation where
like you've made an edit and you want to
repeat the edit you were about to hit
Dot and then you realize oh no wait last
time I wanted to change up to the
underscore but this time I there's no
underscore I want to change up to the
end of the word or last time I was
changing to the end of the word this
time I want to change to the bracket or
something but you you can't do it well
you can you can type the new command
like the change to underscore part and
then you can just hit contr a to repeat
the
insertion nice and fast little bit Emy
but you know still in the Vim philosophy
still very efficient still about making
Atomic edits that can be repeated and
undone so that's justifying why I'm
holding no control so let's really get
into the the meat of this um so we've
got a few of my favorite things in
insert mode control R and contr A but
the biggest category of things where you
want them to insert text for you more
than just one character at a time when
you're in insert mode is
completion um so like when you're in the
Shell you might hit tab to do tab
completion when you're in Vim there's
all this context that Vim has about your
project you know it's you've got all
these files open it's seen all the words
that you're typing and often if you're
doing you know especially if you're
programming you're repeating the same
words over and over again language
keywords symbols in your program class
names function names all that kind of
stuff so how can we do completion
um and everything I'm about to show you
is everything I've shown you so far and
everything I'm going to show you is all
like built into them so there's no
plugins involved in in any of this um
feel free to squeeze in there's a few
seats around the place don't
worry so um I've got a document here
containing some text and I want to type
the word quick so I'm going to go into
insert mode and hit
q but quick is like it's here it's in
the first line of my document so I
shouldn't have to type the whole thing
that's like three more key stes where I
could make a mistake who has time KN the
hands like that I'm sure it'll make a
mistake
yeah programming
um so instead I'm going to hit contrl P
control p is um vim's default keybinding
for completion uh P stands for previous
so it looks backwards through the
document for previous matches
so I typed q and the first thing it
finds is quick because if you go
backwards through the document the the
next thing you hit that starts with a qu
is is quick um and I can I can repeat
that I can keep hitting contrl P to
cycle through these options notice that
this one quickly has a file name after
it that's because that didn't come from
this file but Vim is smart enough to
look in more than just one place so V is
looking at like other files I have open
other parts of my project we'll get into
exactly where it looks a little bit
later on um and the opposite of previous
is next so as well as control P which
searches backwards through the document
for previous things I can hit contrl n
to go
forwards um for other things and you get
some like useful little context at the
bottom as well about where you are um
contrl n and contr p it's quite it's
quite simple it just matches on like the
word that you're typing and tries to
find a match for the rest of the word
but I'm kind of labeling the control n
and control keystrokes CU they're how
you browse through your different
options in all the other types of
completion that we're about to talk
about so like knowing those two is kind
of foundational everyone with me on
control and control
P you're very quiet you can can say
things it's
okay I gave this talk in London and I
told them they were being too quiet and
I expected people to behave like they do
in New York and be noisy and I'm giving
the talking you yo can you're all being
quiet again
in thanks wow you can tell I'm New
Yorker um so we've got control p and
contr N for simple word
completion
but I don't normally use themm for
typing words I normally use it for
typing programs so let's start talking
about some kind of programming specific
completions uh who is familiar with C
tags it's about half of this um so uh C
tags to refresh your mem if you haven't
met it it's a program that indexes your
source code and it finds the names of
things so like class names method names
function names that kind of stuff and it
finds where they are declared in your
software um so for example in this Ruby
program I have a class called human if
I've run C tags and there are various VM
plugins that will run C tags
automatically for you but if I have run
C tags then my my tags file will know
that the class human is declared in the
code. RB at line one which means that if
I have um the word human elsewhere in in
my file I can hit control and closing
square bracket oops and of course I
don't have a Tex
file and that totally worked last time I
gave this talk there we go okay um I
just hit a leader leader command that I
have set up to manually run the tags
when my Vim plugin is fail me um so I
have a tags file now and when I hit
control closing square bracket it jumps
from the character that's under the
cursor so like this symbol human to the
place where that was defined it will
jump across files so everyone happy with
cags so another use once you have this
tags file conveniently you have a list
of all these names that are in your
program so you can also use the tags
file for
completion um so say I've just typed
Capital H if I just hit contrl P which
what we saw before I get hello which is
part of a string and I get human which
is a symbol in my program and I get how
which is from some other file that I
don't really care
about what if I know that I want to type
a class name right like I know that this
is going to be um I know that this is
going to be a symbol for my program I
can tell them only complete from those
symbols so this is where it gets really
Emy I hit contr X which puts me in a
special sub mode of insert mode which is
completion mode and once I've hit contr
X I get this thing at the bottom that
says oh I'm in contr X mode I can hit
any of these things to all do different
kinds of
completion and in this case I want to
complete a tag so I use closing square
bracket control closing square bracket
and it just immediately completed human
as it says at the bottom it's the only
match right there wasn't anything else
in my tags file that started with a
capital H if I use control P I have to
scroll through all these other options
that aren't symbols in my program but
with contr x contr square bracket
straight to the one that a a symol of my
program so that's T
completion any questions so far everyone
with
me cool
um George when you did the C tag to go
to the definition y uh if it if the
definition is in a different file how do
you uh switch back to where you just
were if you want to go look up the
definition and then come back um there
is a thing called the jump list where
Vim remembers all the places you've
moved to if you use the kind of motion
that Vim considers to be a jump so like
if you just press J to go down a line
that's not considered to be a jump but
if you use like a jump to tag control
square bracket yeah that's considered to
be a jump and if you hit control o and I
they will go forwards and backwards to
the jump list um so I can show you even
just in this one file if I hit control
square bracket to jump to the definition
of human then I can hit control o to go
back to where I was before you think of
is like in and out so control like you
go you kind of drill in to look at
things and then you hit contrl o to go
back out to where you
were with tag navigation you can also
pop from the tag stack with contr t oh
cool I didn't know that so if I've gone
to this if I've gone to this tag I can
hit control T oh nice and that just pops
me back yeah which means as you follow
tags it creates a stack and you can pop
cool which means other jump that I may
have done won't be part of that that's
very useful and control goes across file
if you go another
F back y yeah exactly so control and I
guess control T will jump around between
files as
well excellent I always like it when I
give a talk of meet up and I learn
things it's
great we have one and we have that one
kind of standing City if you'd like to
come
in um so
the next type of completion that I find
useful as a programmer like another so
you've got symbols in your program
that's a common thing that you want to
type and you know you can kind of trust
your computer if you've got a tags file
to know what the symbols are another
thing is file names um file name
completion is quite useful so I'm going
to type ex because I have an examples oh
no I'm in the examples folder oh that's
why I didn't have a tag thanks my
working directory is wrong okay I'm
going to type Co for code because this
this file is a code file X again to go
into that sub completion mode and then
contr f f for file and code RB get
completed for me um this works kind of
similarly to uh to tab completion in the
Shell so if you hit um let me just
relaunch Vim from a different
directory oh I shouldn't have done
that okay um so I'm I'm now in a
different working directory so now I can
hit EX for examples contr xrl L Ohr X
control F sorry and then contr xrl F
again to complete the files in that and
I can use control n and control P to go
back and forward in that in that
list
um so if if you know that there's
something in the examples directory and
you want to reference it in your file
but you can't remember what it's called
well XR F XR F there's the
list and you know you didn't make a typo
cuz Bim did the typing for
you so that's F in
completion um any questions about that
one I have kind of a personal question
like when you learn this one com this
one like these modes that we have and
completion and different like heat
Strokes that we can hit and they are so
useful how do you do to remember them
you you force yourself into using them
for a week until they stick what do you
do so the things I've been talking about
it down right yeah and then like using
them for a few days reading from the
paper until you remember you get to yeah
but also in this case like the primary
thing you need to remember is control X
puts you in completion mode when you're
in insert mode and then a lot of the
things are kind of pneumonic from there
so like contrl f for file name or um
we're going to see control L for line
and a bet control square bracket for tag
well I use control square bracket when
I'm in normal mode for tags all the time
so that's kind of associated with tags
already in my memory so you know VI's
quite good at making like having
patterns you know the way that like
um D and capital d and c and capital c
you know like d is delete with a motion
capital D is delete to End of Line C is
change of the motion Capital C is change
to End of Line you you get these patents
which are a useful way of remembering
things um but let's move on to context
our word completion so it's all been
it's all been kind of fine so far but
like we're completing words surely
everyone's editor can do that I mean how
are we going to how are we going to show
off to the the emx crowd with just
completing words so let's let's get
fancy what if I want to pull in like the
middle part of this sentence I want to
say something like the slow brown fox
jumped over the lazy dock that's a very
similar sentence but it's not exactly
the same so I don't necessarily want to
yank it and put it and then edit it
maybe it's quicker to just start typing
the slow BR but as soon as I type BR
like now I'm into the stuff I want to to
pull in from from above so I can hit
contr X our old friend to put us in um
in completion mode and then I can hit
contrl
p andr x contr p again andr x contr p
again I now have two
options crl NR n CR XR p contr x contr p
x p x p x
p I just pulled in that whole sentence
without typing hardly anything um so
what was happening well the first time I
hitr xrl P Vim did what it normally does
with control P it completed the word but
because I hitr X first it also
remembered the context where it pulled
that completion from so when I hit XR P
again it was it knew like okay I'm
completing from this context and think
of the times esally in programming where
you type these patterns so I was pair
programming with a friend of mine a
couple of weeks ago and we were writing
some JavaScript tests and there was this
pattern that came up over and over again
you'd have it open parentheses some
description of what the thing we were
testing did comma function open
parentheses closed parentheses open
brace and then because of the test
framework we were using there was this
kind of with thing that happened next so
then there was with open parentheses
this closed parentheses open brace like
because of the restrictions of the
language we couldn't make any shorter
but it was this big repetitive thing um
and I I noticed what my friend James was
doing is is he would type it and then
type out the description by hand and
then type Fu and just hammer on contr XR
n over and over again or contr x contr p
over and over again and it would just
pull in the whole of this like long
string of JavaScript boiler plate that
we had to use so something where you
have repetitive structure that you have
to type over and over again this kind of
thing is is really useful um as with
regular completion like p and N both
work for searching previous and next p
tends to be my go-to because I'm more
likely to be repeating something that
just occurred before where I am rather
than repeating something that occurred
after where I am just typically that
seems to be what
happens um any questions on that one you
can't replay those commands easily
without hammering contr X control
P you can if you throw macro at it real
fast but there's no
you use period for that right um no
because you're still in insert mode so
it's all part of the same edit okay um
so even recording a macro I'm not sure
what that would do like I'm not sure if
that would replay with the contr X contr
P which would maybe pull from a
different context and get confused I've
never tried it if if you set a mark you
can do that
okay
um so that that's word completion
but what if we want to do more than just
words if we want to complete entire
lines again sometimes these boiler plate
structures that you get in software
they're not just words they're they're
entire lines like say you're testing
something again again with the testing
but tests tend to have quite repetitive
structure you know you're testing
something in a success case and then you
want to test it in a failure case it's
not like so similar that you can make an
abstraction but it's similar enough that
you just want to kind of pull in a
couple of lines at a time from the
previous thing and then tweak something
here and there so how do we do that well
I can start typing the
quick and then oh I already have a line
that matches this so X and want to guess
what complete a line will
be l contr l yeah um and this like contr
x contrl p this is context aware so if I
hit XR L again it pulls in the next
one um this is the number one thing that
I do when I'm pairing with people in Vim
where they go whoa what did you just
do um and I learned this from uh Mike
Burns who runs our stockhom office
because in my thought about interview
when I was pairing with him I said whoa
what did you just do so um this is a
good one to show show off show off but
also it's incredibly fast and it's
amazing how often it comes up like part
of the reason people often ask me and
Mike and other people who use this about
it is cu it's amazing how many times in
you're writing sofware you go you know
what I kind of just want those two lines
and then I'm going to take them a bit
so um that's x
l um possibly my favorite Vin thing of
all
time so we've got one more type of
completion everyone with me so far yeah
cool um so I'm going to go back to so
code and we're going to talk about uh
language aware Omni
completion so themm has a setting where
you can turn on kind of a file type
detection plugin system and if you have
that turned
on then it will do uh this thing called
Omni completion which is contr x contr o
what does omni completion do well say I
want
to do something to this string I have
this string that says hello name and
then I want to call some method on the
string I can't remember what the
method's called I kind I'll know it when
I see it but I just can't remember what
it's called if I hit contr X contr oops
contr X not function X x o I get a list
of all the methods that are available
for a ruby string just run through them
and go oh yeah capitalize that's the one
I wanted cool done
capitalize
um VI will VM will do a surprisingly
good job of this it will do it well if
the language plugin for that language
supports it it will try pretty hard if
you have syntax highlighting available
for that language like it will try and
do some stuff for you um you know things
like the word function in JavaScript the
highlighting knows that that's a
language keyword so even if you don't
have any other the JavaScript stuff
installed just by having the
highlighting it'll know it can complete
the word function and that kind of
thing um I don't use this as often as
the others but and when it's useful it's
it's really it's really
useful this is V be bones beam be yep I
haven't apart from the apart from C tags
which isn't n really a plugin it's more
of a third party external program um and
I I use a plugin to create my tags file
but apart from C tags nothing I'm shown
you is outside of normal standard then
there's no plugins no special anything
can I ask about the line numbers is that
a Plugin or is it a different that is
that is built in as well um you can type
colon set relative number I think yeah
if you type colon set relative number
then it will uh yeah and I I turned that
off before the talk so I could refer to
Absolute line numbers when I restarted
them because I was in the wrong
directory at time back home um the
better one is the one that in the zero
you get the actual line of that number
the actual number of the line sorry yeah
and and that's also built into them but
it's just a newer version of them I
haven't seen that before so if you want
to Traverse like up to line two above or
two below is it going to be like I could
throw in number and then shift G will
take me to whatever line number I want
if I have sequential indexed order what
Happ in relative mode so it works in the
same way so if I type to Capital G I'm
going to jump to here even though it's
labeled with a five okay but the thing
that this is useful for is if I want to
go up five lines from where I am I can
just type 5K okay and if I'm on like
line 97 of a file and I want to go up
then it's probably quicker to type 5K
than it is to type like 92 capital G um
and when you're doing like all kinds of
different motions you know oh I want to
delete how many lines three lines
because
you don't have to do so much mental
arithmetic um is pretty much the the
benefit of this one but if you're pair
programming it can drive you crazy
because as you're moving the cursor
around your pair is like online 7 that
no6
no5 stop moving the
cursor um so uh one more thing that I
want to talk about and then I'm done
which is customization and I still don't
mean plugins I just mean buil-in
settings uh because it wouldn't be Vim
if you couldn't just complet customize
all of how this works so going back to
the very beginning
um when I was when I was here and I was
showing you qu and control P to to
complete
quick and I said this looks in other
files and I'll talk more about where it
looks where it looks is based on the
complete setting so if I type set
complete I will just see what my setting
is without changing it it's kind of
useful to know um and what the complete
setting does is it tells them where to
look for
completions um so the rundown is uh this
is all default apart from case spell by
the way which I've added but everything
before the case spell is is default so
the dot means looking the current buffer
so the first set like the first things
you're going to see it will always be
from the file that you're in W is other
windows that you have open so if you had
like a split window with a file here and
a file here that file will come next
then other buffers
that you have loaded in in this tab or
any other tab then use unloaded buffers
so buffers that are Lo that are open but
they're not active in any window does
that make
sense um and then we've got T is
actually for your tags file so you can
complete tags just with control uh
control P so like that's completing
hello because it's well because it's in
an open buffer but also because it's in
my in my tag
file um
and what else oh and I is included files
so if you're using a language that has
explicit includes like in C where you
hash include something H or in Python
where you import from some
package then uh it will actually follow
those and look in those files for
completions um Ruby requires as well if
you're not using rails and you're
requiring things by hand
uh so that's kind of useful because you
know if you're including like a header
file or some other some other component
that you want to use you can you can
just out the box automatically complete
symbols or words from that
file um and then k spell is the one that
that I turn on beyond the defaults K
means look in the spelling dictionary
but k spell means looking the spelling
dictionary but only when spelling is
enabled um so let me show you what that
means Curr if I type Q and hit control p
i just get these options from the file
but if I col on set
spell Now spell checking is enabled and
if I type Q and hit contrl P suddenly I
get a lot more
options quick Qui qualified quoting
quotients
quotients quotient quotidian quotidian
quoth um if you can't quite remember how
to spell a word kind of hand what is
this loading is this loading from the
dictionary or from the from the from the
value from the variables have um this is
loading from the dictionary from the
diction yeah so if if you add uh in your
complete setting Co on set complete if
you just added comma K to the end then
it would always look in the dictionary
if you add comma k spell then it looks
in the dictionary but only when spell
checking is enabled so I have spell
checking enabled for example when I'm in
a get commit message when I'm in an
email cuz I write on my email in VI I
sent one too many emails with colon WQ
at the end of them and decided I'm just
going to switch to Map how did you tell
it to enable spell checking um I typed
colon set spell oh okay cool I miss that
um
yeah uh so that's it that's a little
tour of them completion um some stuff
about how I customize it and use it
these slides are here I'll throw that
link on the Meetup group as well and
this isn't just a slide deck it's a
document with all of my notes in so um
you can you can get the whole the whole
thing from there any
questions so one of the things I don't
know if you covered it because I came in
a bit late
um one of the things I found most
valuable when using Vim across teams is
being able to set a editor dot or a do
editor config file and be able to have
Vim map that accordingly either using
bash RC or vmrc files so that you can
make sure that tab indention and is it
spaces is it two is it four whatever it
may be is set up properly um do you use
that
yourself um so we at thoughtbot we have
a a set of company dot files which when
people join the company they're sort of
pointed in the direction of I never
installed them because I've had my own
dot files and I was like wait no you
remap the leader key I'm I'm
out but that at least is a fantastic
repository of like common patterns and
practices throughout the company so I
may disagree with the remapping the
leader key thing and I don't use the
whole the whole file but I certainly
like pull in I certainly pull in pieces
of that and so do other people and we
have an open source tool called RCM
which is maintained internally which
kind of takes what you're talking about
with having an editor RC and just takes
it to the next level where you could
have multiple directories of things and
they could be tagged and they could be
specific to host names you could have
your own dot files and your company's
dot files and then RCM just manages Sim
linking everything into the right place
and deals with all of that stuff so you
can easily keep your own stuff in
Version Control and share stuff around
your company so I'd recommend checking
out LCM yeah if you could throw the link
on that with the Meetup as well as this
that'd be wonderful I always love yep do
files and LCM I'll put them both in
there anything
else thanks for all your comments while
I was talking I was that was helpful I
love thanks thank
you
[Music]
