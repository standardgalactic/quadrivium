In this video, I'm going to discuss k-means clustering, and we're going to use Python,
and more specifically, we're going to use scikit-learn as our machine learning library.
So, what is the hypothetical example that we have here?
Imagine that we have 99 patients, and they're all using a smartwatch healthcare data app,
and this app continuously gathers data on them for a study,
but to comply with healthcare regulations, they need to actively sync that data with the researchers.
Now, to remind them to do so, there's this campaign of sending out emails, short message services,
WhatsApp messages, pamphlets, telephone call, and then long letters,
and that was, so there's six of these campaigns, and they sent out throughout the year.
The campaigns were numbered 1 to 32, and each campaign has only got one of these,
so say campaign number 3, for instance, would only be WhatsApp message.
Now, every time a patient responded to one of these, throughout the year, that is recorded,
so we know what patients responded to what campaign.
And the information that we really want here is to know what campaigns certain patients responded to,
and we want to use k-means clustering to do that.
So, in this example, I'm going to create five clusters,
and remember that five times seven, seven is the magic number here, is 35,
and that's way less than 99.
We've got a four within that margin so that we don't have too many clusters.
So I'm going to use five clusters here,
and the business intelligence in here is just going to tell me,
and in that cluster, which of the campaigns the patients responded to and which not.
So you can well imagine this might also work in a business sense where there's some marketing campaign,
and we're just going to look at the response with respect to sales.
So let's construct our little notebook.
We are here inside of Jupyter Notebook.
I always run this little cascading style sheet.
You can see it's style.css.
It lives inside of the same, in the same folder as this notebook,
and it's just the way it's set up, nice little blue and orange here for H1 and H2 in the text, etc.
Now I'm going to use the pandas library here just to manage my data,
and from that I'm only going to use the read excel and the merge functions,
so I don't import the whole of pandas.
And then we're also going to use the arange function there in numpy.
And then here we go, scikit-learn.
So we're going to go in the cluster and decomposition sections of scikit-learn,
and I'm going to import k-means, and then principal component analysis here.
Now I'm going to perhaps make a video on that all on its own,
but you'll see when we are going to use that.
Then I'm also going to use this Plotly to do my graphs.
It's not part of Anaconda, so you have to install it with pip install Plotly separately.
From the graphs objects in Plotly, I'm going to import go.
Go has the scatter plots, box and whisker plots, etc., just to make it easy.
And I want offline plotting.
I don't want to have to go to the Plotly servers for rendering.
And for that, I'm going to use the initialize notebook function here,
and then also the iPlot function.
And then I'm going to instantiate this, or at least start this,
or run this function in a notebook mode,
so we can have the notebooks render right inside of my Jupyter notebook here.
So let's look at the data that we're going to use.
I'm going to create two data frames.
It is the patientresponse.xlsx spreadsheet file, Excel spreadsheet file.
It has two sheets.
The first one, by default, is always zero, and then the second one is one.
So I'm going to import the two sheets as two separate data frames here.
The first one is going to be called df underscore campaign,
and the second, df underscore response.
And I'll show you what's inside of them,
so you can understand how they were constructed.
So let's have a look.
We have...
Let's just run this for Plotly as well.
Yeah, we've run.
So let's just have a look at the campaign data frame.
So we see the campaign ID.
So here we have, for instance, the last five.
I used the tail method here, 28.
It was a long letter sent out in November.
SMS is sent out in November.
December, there were email, which was campaign 30,
a WhatsApp, campaign 31, and a long letter, campaign 32.
Let's look at these responses.
And so here's the last five.
You see 323 responses from the 99 patients.
Here we have patient number 99 in India responding to campaign 32.
And what I've done is, I didn't show you here,
I've added a new column called N just to count,
because each of these is one instance.
Patient 99 responded to campaign ID once there,
and I want to be able to capture that
as one instance there of this happening.
So just fill this column with ones.
Now I'm going to merge these two.
You see the campaign ID.
We can merge on that campaign ID column.
So I needn't have put on equals campaign ID
in my merge function,
because that is the only column there
that is identical in both of these.
So let's run that and look what our merge data frame looks like now.
Very nice campaign ID, what it was, when it was run,
and the patient that responded to that,
and we're just counting one.
So let's create this pivot table to count each of these 32 campaigns.
We have, I'm going to create this table data frame.
I'm going to pivot,
and I want patient to be the index and the columns
to be the campaign ID and count the values.
So what I want is for these 32 campaigns
to become the top row there,
the column headers for my pivoted table.
Let me show you what that looks like.
So there was campaign 1, campaign 2, campaign 3,
and then the patients on this side.
And so when the patient did not respond to that campaign,
at the moment that's going to be an NAN value,
but you can see that patient 95,
they responded to campaign 25, for instance,
and campaign 30.
Now what I want to do is just to fill these NA values with zeros
and just reset this index,
because I want obviously patient here to be the index.
Let's have a look,
or at least campaign ID to be this campaign ID to be the index.
So that's campaign ID here, down here.
But we can see the 1 to 32 campaigns here.
And then, for instance, then patient number 95,
we can see again responded to 25 and to 30
and not to the others.
Then I'm also just going to extract a columns index here.
So by just calling table.columns 1,
and so that gives me this 1 to 32 here
because I want to use them later on
so that I can just keep this separately.
And that's when we're going to use
the principal components here
just to decompose into two dimensions, basically.
So let's use our k-means clustering here.
So I'm going to instantiate this
and call a cluster k-means,
and I'm going to use 5.
As I said, times 7 is 35,
which is way less than my 99 patients,
so we're safe there.
Let's just see that that was not imported up here.
Let's do that.
There we go.
That's the one that I missed.
Let's just wait for that to run.
We're just going to import then the k-means and the clustering.
So let's go down and just run that.
There we go.
Now I'm going to fit this k-means clustering,
and I'm going to have the result inside of a new column
in my table data frame,
and we see here the cluster.fit underscore predict table,
table columns from two.
So let's have a look at what that's done now.
So here we have this cluster.
So it looked down the row,
the campaigns that this patient responded to,
and it puts that patient here in cluster number three.
Now it starts counting at zero,
so that would actually be cluster four.
So that would be cluster one,
and that would be cluster four.
Now I'm going to do this principal component separation here,
because I want to reduce this dimensionality down to two.
And as I said,
I might make an extra video about this principal component separation,
just so that we can plot this as two-dimensional data,
say, in a scatter plot.
So there we have into an X and into a Y,
and you can see we use this PCA function here, fit transform.
And then for the columns, that's why I use my 1 to 32,
so that's going to be reduced down to an X and a Y coordinate.
I'm just going to create a new data frame,
because from table I only want patients cluster X and Y.
And so you can see I only have now patient cluster X and Y.
I'm going to merge that with the response data frame,
and call it final.
And this final I'm going to merge with the campaign,
so that I have this neatly all in a row.
Campaign 31 was WhatsApp December,
patient 64 responded to it.
That's the count of one.
Fell into this three, which is cluster four,
and it has an X and Y component.
Why?
Because I'm going to use Plotly to do all these scatter plots.
Now Plotly works by every individual thing on the figure itself as a trace,
so I'll just call it trace 0 to trace 4.
Go.scatter, so it's a scatter plot,
which takes an X and a Y argument here.
The X is going to be taken from this X column.
So I want to say patient cluster,
and where the cluster equals 0 is going to be my X,
and where the cluster 0 is going to be my Y.
I take the Y value from that,
and the X and Y value for that to populate my X and Y.
The name is then for trace 0 cluster 1,
and we can see I'm going to color it and put a line around it,
and I do that for all of them
until I make a list of all these traces for data,
and I'm going to plot the data.
So let's go.
There we go.
Beautiful interactive plot,
and we can see the clustering happening.
You can see the clustering happening with the various colors.
And here's the business intelligence from that.
So I'm going to create a column.
It's going to be populated with true or false.
So column 0, that would be my cluster 1.
I'm going to call it this column 0,
where the cluster was equal to 0.
And then I'm just going to do a value count
as I group by the true and falses in there.
So here are the patients who fell into this 0,
which is cluster 1,
and we can see that they responded to WhatsApp.
A little half to telephone,
and then very little to SMS pamphlet and long letter.
Remember, I had these six SMS there.
WhatsApp is there.
Pamphlets are there,
and telephone is there,
and then the long letter is there as well.
So we can see what they don't respond to.
We can see what they don't respond to.
I think the one that we haven't listed in this is email.
So the email was 0,
so there wasn't even email on here.
So we can see in future,
we should probably send this cluster of patients,
we should send them a WhatsApp
and perhaps a telephone call as well.
That's what they responded to
according to this instance of running the K-means cluster.
I can also then just see how many there were.
So there's 49 patients,
and I can actually just list them as well.
So I have them,
and I have a list of these patients now,
and I can target to them the campaigns,
running the campaigns in the second year.
So that's K-means clustering,
very easy to do in Python.
Why don't you give it a go?
