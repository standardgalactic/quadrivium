So now that you've installed Python, we're going to open a notebook and I'm going to show you around.
As a bonus, I'm going to show you how to construct your first matrices
and how to access certain of the elements inside of a matrix.
So here I am in a Jupyter notebook. This is a Windows system.
So how did I open this? Well, I clicked on Start.
I scrolled down till I saw Anaconda 3, open that, and there we have Jupyter notebook.
In macOS, please have a look at your Applications folder to find the Jupyter notebook.
And in Linux, you would open a terminal window and just type in Jupyter notebook.
So we are here in the Edge browser, which is my default on Windows.
So once I open that, the browser opens and I see my folder structure
as if this was a normal folder viewer, folder explorer.
So I'm going to go down to my Desktop, click on that.
And I see I have two folders on my Desktop.
I want to create a new folder.
So I'm going to just select New.
Remember, this was all in a browser.
And I'm going to go to Folder.
If I now go back to the Desktop, I would see Untitled Folder.
It might not jump back to the original page for you.
In some instances, it does.
Just navigate back to the Desktop.
I'm going to click on this little square here, which opens up the ability to rename that folder.
So I'm going to rename that and I'm going to type in Linear Algebra
with Sympy, Symbolic Python, Linear Algebra with Sympy and rename.
It is there.
And when you look at your Desktop, that folder will actually be there.
So let's do that.
Click on that.
And I'm inside of that folder now.
We can see that it's empty.
And what I want to do is create a new Python 3 file.
You see I have Julia 0.6.2 as well there.
That is because I installed that separately.
So we're going to go for Python 3.
And we see a new tab opens up.
It is untitled.
And here is our coding environment still within our browser.
And we can see this little cell that we can start typing some code into.
If we look above that though, this looks almost like a word processor.
Because I have file, edit, view, insert, some of the normal things that we expect.
And some buttons at the bottom which are just shortcuts for some of these menu items.
So if I click in that first cell, the most important thing to know is that there are different cell types.
I can do different things inside of each of these cells.
And that is what makes this notebook so beautiful and so powerful.
If you go up here to this drop down, you will note that you have code, markdown, raw NB convert and heading.
So there are four different types of cells.
Let's convert the cell to markdown.
Now markdown is like HTML, which is the language of web pages.
But there's some shortcuts so that you don't have to type in all the HTML code.
So imagine I want to change this into a large heading.
The largest heading that a web page can have.
Just in normal terms.
I would use one hashtag.
That's shift and three on my keyboard.
And I'm just going to type in title.
And I can run that cell by clicking on run or I can hold down shift and hit enter or shift and return.
And we see that was executed and we see title written in H1 form.
That's the largest HTML title tag.
H1.
Let's click on the second one.
I also want to change this to markdown.
And this one I want slightly smaller.
But instead of doing 2, which will be slightly smaller, 3 even smaller, 4 even smaller.
And you can go down to 6.
Let's just use normal HTML in case you are familiar with that.
So that will be heading 2.
And I close my square bracket and I'm going to type in subtitle.
And close H2.
If I now hold down shift and enter or shift and return, I see a size 2 heading, H2.
It's slightly smaller.
So instead of 2 hashtags, I can just use normal HTML.
The one thing I want to show you is a comment line.
So let's leave this third cell as code, which is the default.
And I'm just going to put one hashtag.
So this is not HTML or markup.
Any kind of markdown, markup, HTML, nothing like that.
This is actual Python code, but it is a comment line.
So I'm going to say this is a comment.
And when I execute this shift and enter, shift and return, nothing happens.
But I can see in there, which I didn't see up there, because this is a cell that contains actual code.
But if you start a line of code with a hashtag, Python will ignore that line.
That is where you leave comments to yourself should you come back to the code in future.
Or you give this file to someone else to have a look at and they want to know, why did you write this code?
What's happening here?
If you leave them some comments, that will help a lot.
So let's click in this new cell.
I'm going to comment it and I'm saying all I want to do is adding one and one.
So I want to do one plus one.
And that's very simple.
I'm going to type one.
Now you don't have to put spaces, but I put spaces in between things because it just looks a bit neater.
So one plus one with the spaces in between.
Again, I can just run it by clicking there or hold down shift and enter, shift return.
And look at that.
Now I suddenly have an output because there was a line of code that Python could execute.
One plus one is two.
And indeed, we saw, we know that it's two and we see a two right there.
Let's change this into markdown as well.
Click back in it.
And I'm going to use two hashtags because that's shorter.
Put my space and I'm going to say importing the Simpy library.
Shift and enter, shift and return.
And we see it's the same size as the subtitle.
Because Python is a language all on its own, there are extensions to that language though.
And we can import those extensions into Python so that we can use them as well.
And that's the beauty of Anaconda because when you download it and install the Anaconda,
it put a huge number of packages right there for you.
In one go, you don't have to worry about it.
So let's comment this cell.
And I'm going to say import Simpy.
And I'm going to use and use an abbreviation.
I'm going to use an abbreviation as well.
And the way that we do the import is a very simple line of code.
import Simpy as, let's use S-Y-M.
I'm just going to use S-Y-M for now because that looks easy.
So instead of having to type Simpy every time, I'm using this abbreviation for this import.
And lo and behold, it took a fraction of a second and the whole of Simpy was imported.
So I've expanded the base of Python now to also include Simpy.
But to use some of Simpy, I have to reference Simpy.
And I use that through the abbreviation.
Let's take a look at how that might work.
Now, instead of going all the way up, hitting code and then markdown, there's a bit of a shortcut.
I can hit Escape and you see that it turns from green to blue here.
I'm going to hit the M key and I'm going to hit Enter or Return.
And I'm back to green and you see it is now a markdown.
So that's a keyboard shortcut.
Escape, M, Enter or Return.
And now it is markdown.
Again, I'm going to make it a size 2 title and I'm going to say Enabling Lartec Printing.
Because what I want to do and the reason why I'm using Simpy or Symbolic Python,
I want to see nicely formatted mathematical printouts to the screen.
I don't want to see the normal computer printouts.
I want to see beautiful mathematics as I would read it in a textbook.
So I'm going to hold down Shift and hit Enter or Return.
And I see that was a nice size 2 heading.
And I'm going to say using Init Printing or enabling at least Init Printing.
There we go.
So Init Printing is a function inside of this extension Python.
So I have to reference, I have to tell, inside of Sympy,
so I have to tell the notebook here that please go look inside Sympy
and get this Init Printing for me.
Init Printing.
And I'm going to put these parentheses, Shift and 9 on my keyboard.
So Init Printing is this function that lives inside of Sympy.
I have to reference Sympy and I'm using the S-Y-M because that was the abbreviation.
And I have to pass this function a few arguments.
So that's how most computer languages work.
I have a function and I have to tell that, I have to give that function a few things
so that that function can actually do something useful.
And those things that I give it are arguments and I pass these arguments to the function
by typing them inside of, in the case of Python, these parentheses.
If I hold down Shift and hit Tab,
I can actually see a bit of the code of all of these possible arguments that I could pass
come up as a little tool tip.
So I can very quickly learn what arguments I can pass to a function
by the fact that if I'm inside of these parentheses,
I hit Shift and Tab.
It brings all of them up.
And we'll go through how these things are constructed.
The one that I'm interested in at the moment is this UseLartic.
So I'm going to say UseLartic.
And I'm just going to start typing.
And if I hit Tab, I see this auto-completion.
So that's very useful that you don't have to type in anything.
Always in Python, inside of the notebook here,
type the first few letters and hit Tab.
And it'll bring an option of all the possible things that start with those letters.
And you can select one of them.
And if there's just one, well, just hit Tab and it'll auto-complete for you there.
And inside of quotation marks, I'm going to say MathJax.
And that would be a way for Lartic printing to be enabled.
Shift-Enter, Shift-Return.
And now I have some form of very nice printing to the screen.
So for now, let's hit Escape, M, Enter.
And that changes our next cell to Markdown.
And I'm just going to leave a comment to myself.
I'm going to leave, or let's write that.
Let's write using the matrix function.
So using the matrix function.
There we go.
Let me leave a comment to myself.
Let's say creating a 2x2 matrix.
So how would I create a 2x2 matrix?
Once again, I've got a reference, SymPy.
And inside of SymPy, there is this function called matrix with an uppercase M.
Again, I've got to pass it some arguments.
So I put my parentheses.
And each row of a matrix has to be put in separately.
And the whole thing has to go inside of square brackets.
So I'm going to hit my open square bracket,
just as with all the other parentheses, quotation marks,
Python, at least, will automatically put the closing square bracket there for you.
So again, square bracket, because that would be my first row.
And in my first row, I want 3 and 4.
I'm going to hit right arrow to get out of that set of square brackets,
comma, space, and then my new set of square brackets.
And let's make that 5 and 7.
So note that there are two sets of square brackets inside of a larger set of square brackets.
And these are all arguments, so they go inside of parentheses.
And let's just hit Shift and Enter, Shift and Return.
And look at that beautiful printing to the screen.
This is what this latex printing does by using this init printing function.
And it prints this beautiful matrix to the screen.
And I see my first row there containing the elements 3 and 4,
and my second one containing the elements 5 and 7.
So very beautiful there, a very beautiful way to construct matrices.
Let's make another markdown.
Escape, Enter, or Return.
And again, I'm going to make this of size 2,
and I'm going to look at some of the inbuilt matrices.
The inbuilt matrices that are built into SimPy.
Now, the first one is the identity matrix.
So I'm going to leave a little comment to myself.
Identity matrix.
There we go.
And that is very simple.
Once again, it lives inside of SimPy.
So I've got a reference SimPy.
So I'm going to say sim.eyi.
And then, once again, if I do my little parentheses,
I can do Shift-Tab.
And it gives me, this time, not so many helpful tips there.
But what I do know is that it just wants the size of this.
And remember, identity matrices are n by n.
So I just have to put in the value of n.
And let's make this identity matrix a 3 by 3 matrix.
So I'm just going to say sim.ey3, Shift and Enter,
and there is an identity matrix.
Remember, there's 1s on the main diagonal
and 0s everywhere else.
So that's a 3 by 3 identity matrix.
Let's make a matrix of all 0s.
So I'm going to say all 0s.
And let's make that also a 3 by 3 matrix.
So that would be simple.
It's sim.0s.
And once again, I'm going to put in 3.
And I have a matrix that is of size square matrix,
of size 3 by 3, and everything is 0s.
Let's do all 1s.
And let's make this a 4 by 4 matrix.
And I think you've guessed it by now.
So it's sim.1s.
And with the argument 4.
And I have a 4 by 4 square matrix.
And all the entries are just 1.
The last one of these inbuilt functions I want to show you
is the diagonal matrix.
So let's do a diagonal matrix.
And I have to tell it what all the values on the main diagonal are going to be.
S-Y-M dot diag for diagonal.
And let's put in 3 and 4 and 5 and 2.
Notice that I just passed these as arguments.
And I separate them with commas.
Note that there are no sets of extra square brackets or anything like that.
And there we go.
A diagonal matrix only has values along the main diagonal.
And everything else is 0.
So that is a diagonal matrix.
The next thing I want to show you in this lesson
is just how to save a matrix object inside of a computer variable.
So let's hit escape, enter, or return.
And I'm going to do my usual two little hashtags there.
Pound signs, whatever you want to call them.
And then space to indicate again this is a second heading.
And I'm going to say saving a matrix object in a computer variable.
There we go.
So what I want to do is I'm going to create a 4x4 matrix.
And I'm going to save them inside of a computer variable.
So let's leave a little comment to ourselves.
I'm going to say creating the computer variable A, I'm going to call it,
that holds a 4x4 matrix.
And I'm going to use another line of comment.
I'm going to use a semicolon.
I'm going to show you what that does.
A semicolon suppresses screen output.
It's a suppresses screen output.
So I'm going to say A equals.
And now I'm going to do my matrix.
SYM dot matrix.
And I'm going to construct my 4x4 matrix.
Now I've already typed it in here.
So just to save me from having to do all this typing,
I'm going to copy and paste it in.
And you have to type it in.
But just about saving a bit of time.
So I see I have four columns.
And those are each of the rows.
And those rows go inside of their own little set of square brackets.
I put a semicolon after that.
And if I hit shift and enter, shift and return, nothing happens.
I have suppressed output to the screen with that semicolon.
What have I done here though?
I've created a matrix.
But instead of having to retype it every time I want to use it,
I'm going to store it inside of what is called a computer variable.
And that is just a bit of space in your computer's memory.
It's given a name and it holds an object.
And that object is of a certain type.
And in our instance here, that type is a Simpy matrix.
Now if I want to bring it back to the screen, I want to recall it.
So I'm just going to put a little comment to myself.
Recalling.
Recalling.
A.
And just A.
That's all I have to do now.
And if I do that, there is my 4x4 matrix.
I don't have to retype it every time I want to use it.
It is now saved as a computer variable.
And that computer variable has a name and it's given by me.
I chose that.
And you can choose your own.
There are some rules and regulations about what you can and cannot do.
But most of the time if you just use a single word, something descriptive.
And of course with matrices, in a textbook you'll usually see an uppercase letter.
So for instance A and I've used A there.
So I've created this little space in my memory.
It holds an object and that object has a type.
And that type is a Simpy matrix.
Let me show you.
I can use the Python function type.
Now that already exists inside of Python.
It's not part of Simpy.
So I don't have to reference its library or its package name.
So I can just say type.
And I pass A to it and it says there it's a Simpy matrix dense, mutable dense matrix.
And if you know anything about matrices, you'll know we get dense matrices.
That is where most of the values are actually not zero.
And we get sparse matrices.
Usually when they are huge, most of the elements are zero.
Here and there is a spattering of an actual value.
And that will be very memory inefficient to store such a big matrix.
So we just store the size of it and the address of the elements that are not zero.
And automatically all the other zeros are filled in.
So that would be a sparse matrix.
Yeah, everything has values.
So Python decided this will be a dense matrix.
Mutable means I can later go and change some of the values if I want.
It is not a fixed thing.
I can decide that I want to change one or two of the elements later.
It is a matrix as we can see there.
And it is part of a Simpy object.
So I had to use Simpy to generate this object.
Let's go on.
I am going to say escape M, enter.
And I want to do another title.
And I am going to say accessing elements of a matrix using addressing.
There we go.
And I want to get to certain values.
Now this is only a 4 by 4 matrix.
But imagine it was huge.
And I just want to reference some of the values or range of some of the values.
So I want to slice up, in other words, this matrix.
And the reason why I want to bring this into lesson 1 is we have got to understand and come to grips with the fact that Python starts counting at 0.
So what we would see as row 1, column 1, Python is going to see as row 0 and column 0.
And that is something to get used to.
So let's leave a little comment to ourselves.
And we are going to say the element in row 1, column 1.
And that is a 1.
So I am going to reference it.
And the way to reference it is by not using parentheses but square brackets.
So I am going to say a is 0, 0 because 1, 1, row 1, column 1 for Python is actually row 0, column 0.
So if I do that I see I get the value 1 back.
So let's play with this a bit.
Let's say the element in row 3 and column 2.
So because Python starts counting in 0 I might as well say a and what I want for row 3 that would be 3 minus 1 because it's actually 2 and 2 minus 1.
So that is going to give me row 3.
There's row 1, 2, 3, column 1, 2.
There's the 6.
So it's exactly the same as saying 2, 1 because it started counting at 0.
So please, please remember that.
Let's carry on.
Let's do the elements in row 1.
So I am going to say all the elements in row 1.
That's all I want printed to the scheme.
So again a and I am going to put my square brackets.
And I am going to say row 1 because it's always row, column 1.
So row 1, which is actually 0.
And then all the columns.
So columns 0, 1, 2, and 3.
Another little thing that's a bit awkward that you have to become used to.
I can't now say 0 to 3.
0 to 3 would mean 0, 1, 2, and 3.
By putting this colon in between, that's a nice way to compact your code.
So I don't have to say 0 and 1 and 2 and 3.
I put this colon in between so it says 0 to 3.
But what Python does in these instances, it leaves out the last value.
So it will actually only be 0, 1, and 2.
And that's only 3 columns.
I want all 4 columns.
Unfortunately, I have to reference 5 columns here because it's 0, 1, 2, 3, 4.
That means 5.
But there's only 4 columns.
But as I said, this last 4, it's not counted.
It counts up to but not including the last value.
So 0, 4 actually means 0, 1, 2, 3.
Very awkward.
But that's the way it is.
And if I do that, I see all the elements in the first row.
So all row, only row 0, which is actually row 1, and 0 to 3, which is actually written 0 to 4.
So just a little bit of getting used to.
Now there's an alternative shortcut.
I'm going to say row 0, and instead of 0 to 4, because I might not know how many columns there are,
I'm just going to use the shortcut, which is just the colon.
Just the colon all on its own.
And to Python, at least here in Simpy, it means just do all of them, irrespective of how many there are.
So I don't have to remember 0 to 27 if they are 28, 27 I should say.
So you don't have to go that, you don't have to type in all of those.
You can just use this little shortcut.
Now let's have a look at what the following will do.
I'm not going to leave a comment, I'm going to type it in, and you're going to guess what is going to happen.
I'm going to say 1 colon 4, comma 2 colon 4.
So let's see what's going to happen here.
It's going to be row, comma, column.
So let's look at the rows, which is 1 colon 4.
So it's going to start at 1, and it's not going to include that 4.
So it's going to be 1, 2, and 3.
But remember, that's not row 1, 2, and 3.
It starts counting at 0.
And the same goes for 2 to 4 as far as the columns.
That's 2 and 3 only.
But that's not the real column 2 and 3.
Let's have a look.
So there we go.
If we scroll back up and we look at where 2, 1, 3 is, there's 2, 1, 3, and then we have negative 2, 1, and 1.
So negative 2, 1, and 1.
So what it did for us was rows 2, 3, and 4, 2, 3, and 4 for columns 3 and 4.
And you see that subtraction by 1 because it started counting at 0.
So it is just something that you will have to become used to.
Now what if I don't want a contiguous set of columns or rows?
So I don't want 2, 3, and 4.
And the way that I would do that is let's just say all the rows, please, comma, and let's do the list of columns and those I put inside of parentheses.
So let's say 1, 3, and so that will be 2 and 4 in actual fact.
And now I have all the rows for columns 2 and columns 4, which would obviously be in Python, be 1 and 3.
So I'm skipping that. It's not 1, 2, and if I had to put a 4 there with 1, colon 4, that would be 1, 2, and 3.
It's just 1 and 3 that I want.
So please get used to this referencing and starting counting at 0.
It just takes a little bit of getting used to.
If you look at this code again, once you've used it a couple of times, it becomes very easy to slice a matrix.
So that would not be the normal stuff that you would look at when you start linear algebra.
But it is kind of the normal thing to look at when you look at writing computer code to do this.
It's becoming used to the language.
So this was more about becoming used to the language than actual bit of linear algebra.
But there you go.
You can construct the matrix.
You can save it as a computer variable.
And now we can start using it in linear algebra.
And that will come up in the next lesson.
Thank you.
