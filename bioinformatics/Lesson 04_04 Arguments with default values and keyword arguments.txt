so before we just passed two arguments we called it x and y we've called an a and b but we can
also pass these default values so here i've got a new function called func if you in c and it's a
b and i put c equals 100 and what is my function going to do it's going to print a line of text
which is we have let's have that we have the values a b and c and those are placeholder text so we're
going to pass that so let's call it but we only call we only add two arguments one and ten so the
one's going to go in the a the ten's going to go in the b but what's going to happen to the c because
it's going to try and proceed to the screen and then as you might expect it's going to take that
default value that i added there that's not to say that we can't change that default value here i'm
going to use the same function going to call it but i add one two and i add the third one called
three which is certainly different from this default value that's 100 so let's see what happens when we
execute that line of code certainly we have the values one two and three so that is very very useful
so your someone who uses these functions can emit that c as we did there and the default value will be
used now what about keyword arguments to pass this order problem because think about it now i've only
got three there but what if i had multiple ones and i want to use that function but it's been a while
since i've used that function i can't remember this exact order that it was because it is going to take
that order now that is where we get this very useful very useful um very useful uh format of of keywords
now look at this function function func2 now as i say the apologies i have this very ridiculously long
print statement here but it'll make sense in a little bit i don't know why i put it all in one line
needn't have done that anyway func2 a b c equals 100 so i definitely i have this ordered list a b and c
then i have the semicolon and after the semicolon i have more of of these default assigned arguments
but they're a bit different i say p equals 100 and q equals red so i'm going to print this ridiculously
long print statement and i'm not going to go through it you'll see what it actually prints and
then it's going to return a times b now let's just see what happens to these things now i'm going to call
the function first of all just with two values because remember all of these
c and p and q they have default values so that doesn't really matter i only need to pass these
two since those are already assigned so i only have to do that i can't call it with one though
because it'll tell me there's a problem you know what is the second value but certainly i do that
now let's just see what this ridiculously long print statement had in it it had the first
ordered argument value is three because three came first the second ordered argument is four
the third ordered argument was optional remember it's there c is 100 if you see a value of 100 here
you either pass the value of 100 so i could have said 3,4,100 or you omitted it and indeed i get back
100 because i didn't put it in here so it just used the default that was there let's see what
happened to the keyword p it took my value 100 and to the keyword q well it took the value red which
was there so nothing spectacularly happened and oh yes let's also return something useful like
multiplying c and 4 yielding 12 so that's my that's all of my print statements with the placeholders in
it but you can see what happens if we don't now let's start playing now we've seen this before i can add
something for c my ordered list a b and c so now instead of the 110 i'm going to see five everything
else stays the same now let's change p and instead of p being that 100 that it was i'm going to say p
equals pi now what happens three is still three second one's still four the fourth one we didn't add
which the third one we didn't add which was c which had a default value of 100 so the 100's still there
the p now changed to pi 3.141 etc the q still stays red and we're still multiplying three times one
still 12 now let's go for the q and q's place i'm now going to put hello and you can see that
exactly what you would think would happen and then instead of the c there's a two
okay but these are keyword arguments and that is what this whole section was about we can swap them
around so p and q needn't be in order so i'm passing three this is part of the ordered stuff so it's
going to be a b and c but now i'm swapping p and q around let's see what happens now still it works
because p is now oiler's number 2.718 etc and q is now it works as we pass it there but the order
doesn't matter so that's very beautiful for keywords and those keywords came after they came
after the semicolon so anything after the semicolon is does not require any kind of order to it you can
pass it in any kind of order and if you don't use it at all they do have these defaults so that's
beautiful so in this last but let's go really uh let's go bananas as i said yeah so we're going to
say q equals 2 so that came first then we have three and four and then we have a p and then we have
two so my order is now completely jumbled up but julia can handle that this function can handle that
it's so q now that's the thing i have to because it's a keyword i have to use q equals bananas i could
not just have said bananas because it would then accept that as the first uh the value for the first
argument a so i've got to use the the keywords actual name q equals bananas it'll then say three and
four as part of my ordered sequence there so a would be three b would be four then it sees the
p equals square root of three so again i have to use the keywords actual name and then this two is
going to become c so let's run that and you see exactly uh second time i've run it that's exactly
what we're going to see printed to the screen so if you have this long list of arguments use those
keywords remember that the keywords you you assign them with defaults but then and if you call them
they have to have the name of that keyword passed as well and you can give them useful names so that
you or someone who uses your code can remember what it stands for now in the next section we're going to
look with functions with a variable number of keywords so not just me listing how many they are
but allowing any number up to an infinite number of arguments to be used that's up next
you
