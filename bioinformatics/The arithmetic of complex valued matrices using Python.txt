Now if you've watched the pen and paper lecture on talking about an introduction at least to
complex matrices let's see how easy it is to deal with this using Python. So we've opened the
notebook that we've been working on complex valued vectors and matrices. Now do remember
watch the whole series because what is the aim of me showing you how to use Python for your
mathematics? First of all to aid your understanding of the mathematics. Well two just to show you
you can check your work you can do things so much easier especially those repetitive simple
calculations like a row times a column as far as the dot products concern you know there's a lot
of work involved there specifically when the matrices and vectors get big and it's just so
much easier to do it in Python. And then lastly well you can just pick up a bit of Python just by
looking at the mathematics. So do remember there's a link in the description down below to a video
that I where I show you just how to set up your Google Drive so that you can use Google Colab and
notebooks such as this and just type your Python code without having to install anything on your
system. As a quick reminder remember right at the start we did our import so we said from SymPy the
symbolic Python package we're going to import the init underscore printing function and then we call
that function so that when we use SymPy code the result of that code is going to look like our textbook.
And then from SymPy I imported some specific keywords the i keyword uppercase i that's the
imagining unit the symbols function to create mathematical symbols such that we can use them
as variables the matrix function uppercase m that's going to create matrix objects for us
the square root function the uppercase abs function that's going to calculate for instance
the absolute value of a real number but also the modulus of a complex number the adjoint function
the double o's well that stands for infinity the eq function that's for equations and the solve
function and then before we also just looked at the dagger function from the physics.quantum.dagger
module inside of SymPy I just showed you you can use that as well but that's more to do with
working with uh with SymPy and with Python as far as quantum mechanics is concerned so let's talk
about complex valued matrices we see a matrix here it's a two row three column complex valued matrix
it's uh given the uh at least the name a or the symbol a and we've got to recreate that because
that's what it was given we might as well create a computer variable with the same name just uppercase
a then the equal symbol remember that's the assignment operator and then i'm calling the matrix function
i'm just going to pass all the values as a python list object to this matrix function and i've got
to just remember that i'm going to go row by row so one and then two plus i and then three and then two
plus i again and then negative i and then seven and once that object's created i'm calling the reshape
method on that object which is like applying a function to this object and then saying two rows
comma three columns and then we're just printing a to the screen so just a bit of revision there
there you can see because we use the init underscore printing function right at the top we now get this
beautiful latech version of the output and it looks like our mathematical textbook not only that
it actually looks like this latech code that we used up here to create this matrix let me just double
click here to show you and there we see some latech code we see this backslash begin b matrix
one we just see the ampersand symbol the two plus i and then ampersand again three and then two
backslashes and then that's just some latech code if i just execute that that cell we see that is what
happens we see this mathematical type setting but our code is doing the exact same thing it's creating
this matrix object but it prints it out nicely to the screen there's a matrix b it's also two row three
column and i'm going to create it just in a slightly different way we can see i'm still passing a python
list object i know it's a list object because it's enclosed in square brackets but instead of you
know just doing all of those six elements in a row separated by commas i'm using a nested list object
so if you look closely there is a set of square brackets inside of the outer set of square brackets
and that is just row by row so we see one plus i comma i comma four minus i and then in the second
row i have another python list object but they're all inside of a larger set of square brackets and
that would be another way to create this instead of using the reshape method and if we print that to
the screen we see oh we've created a beautiful matrix object there so let's talk a little bit
about complex matrix arithmetic the first thing we always talk about is scalar matrix multiplication
and so let's just print b to the screen again by just calling b remember we assigned that matrix b
to the computer variable b so we can just call b and it gets printed to the screen but what we want
to calculate is minus one the scalar minus one times b and i'm just doing that minus one times b and you
can see we're just going to distribute that negative one through each of the elements so one plus i becomes
negative one minus i i becomes minus or negative i etc so if we want to add a and b which we can
because they both two row three column matrices and it's this element wise addition if we want to do
subtraction let's just print a to the screen again just so that we have it there and let's print out
negative one times b and there you can see so if we do element wise it's going to be one that little
one there added to this minus one minus i right there so what i've done is a plus negative one times
b just to show you that matrix subtraction is nothing other than the combination of scalar matrix
multiplication and matrix matrix addition so let's just run that and we see the result there indeed if i take
i and i add to that negative one negative i i'm just going to get the negative i because one added
to that negative one that's zero and let's just do straight off the bat let's just do a minus b
and you're going to see there the result is exactly the same so subtraction is not really something on
its own it's just this combination of scalar matrix multiplication and then matrix matrix addition
so let's look at complex matrix vector multiplication just remind ourselves to print a to the screen
before we created this vector u and then we just print it to the screen we see it is three column
column matrix and that means we can multiply a by u because we've got three columns in a and we've got
three rows at least i should say in u so just multiplying a times u very easy we just say a times u
and we see it is just dot products first row and the column second row and the column and our result
is a two by one matrix although we see the algebra hasn't taken place yet we don't see expansion there
of this multiplication so what we can do is we create a single object a times u put that inside
a parenthesis so we generate a single object and then we call the expand method on that so we just get
expansion of that multiplication and then we see our final result 19 plus 2i in 28 minus 5i if we think
about this complex matrix matrix multiplication i'm going to create this matrix c such that i can
multiply a by c so let's do that there's my matrix c again this time i've created it by nested list object
so square brackets inside of square brackets and it goes row by row so you see the one comma one
and then the two comma i and then the four plus two i and one there's c i'm going to just multiply a by
c i can do that because a is a two by three matrix c is a three by two matrix and the result's going to
be a two by two matrix once again we see that the expansion didn't take place and so we can just
create a single object a times c put it in parentheses to make sure that it's a single object
so that when i apply the expand method we see expansion and there we can see our final two by two
matrix it's a lot of fun it's so easy and it looks so nice if you use symbolic python give it a go
