In this video, I want to introduce you to the R programming language.
So eventually we're going to start looking at the language itself.
Now there's no ways that in a short video I can really introduce you to the whole of the programming language,
but I'm going to show you the essentials, specifically those things targeted towards what we ultimately are aiming for,
and that's to write code that will do some deep learning for us.
So once again, this document is available on RPUBs. I'm going to put it out on GitHub as well.
You can download this and install it.
A couple of things that we are going to go through.
You can see here that there is an interesting history to R, and you can read some of that right there on Wikipedia.
You've also got to download and install R.
And if we move down here, you'll note that there, and I'll put these links down below,
there is a link here to how to download R for your specific programming environment, for your operating system.
So that would be for Windows, for Mac OS, and for Linux.
You can find all the downloads and install instructions there.
It is simply downloading a file and running that file, and it'll install.
Now, there's a beautiful program called RStudio, and you see the link there.
You must also download and install that.
That creates an environment, a program, in which we're going to write the code,
and it's an absolutely phenomenal coding environment.
And whether you are new to R or whether you are an expert, it just makes the writing of code such a pleasure.
And it allows for the creation of much richer objects than just code.
You can write a book.
You can write documents, dissertations.
You can create websites.
You can create applications.
There's just no end to its capability.
So I really want you to install RStudio as well.
It's simply following those two links.
As I said, I'll link to that in the description to the video down below,
and also where to download all these files, both viewing them on Rpubs, this document,
which was created in RStudio, by the way, as all of these documents are,
and to the files themselves on GitHub.
So without further ado, let's get into a bit of the language.
Well, at least first, the RStudio coding environment,
as all the knocking and banging outside my office
where the construction of the new neuroscience unit has been done.
It really is an earful, so apologies for that.
Let's get started.
Once you've installed R and then RStudio,
you can open RStudio, and this is what it looks like.
Now, I've installed R version 3.5.1, the newest version as of the time of this recording.
You see its codename there is Feather Spray,
and installed it for a 64-bit Windows system, and here we have it.
It should be rather familiar to anyone who's opened a spreadsheet file before
or a word processing file such as Microsoft Word, etc.
And we have this menu system up above.
There's the normal file, and you can do new file and save and save as.
You can edit a few things.
A few things that you might not see in usual programs, plots, sessions, build, debug, profile, tools.
Tools is quite important because you can go down here to global options,
and you can set quite a few options.
For instance, here in appearance, you have some themes.
Some themes, the default here is Crimson Editor, Dawn, Dracula, Dreamweaver.
You can really set your coding environment to look the way that you want,
and I've increased the font size here to 16,
so it's easier for us to have a look at in this recording.
Now, there are basically four panels.
You can only see three at the moment, but there are four.
One, two, three here.
The fourth one is as we create a new file.
So this panel here is actually the bottom left panel.
It has a console, and a console is very simple.
You can just type lines of code here, two plus two,
and I'm going to hit enter, and we see the solution there.
Four, and there's a new line indicated there.
The one here indicates that there's only one element in the solution.
If there were more, they'd each have an address starting at one,
the first element, the second, the third.
That's what that one refers to.
When it runs over multiple lines, my answer,
the first element in a new line, it'll have its number here in square brackets.
As simple as that.
We also have a terminal here, which is very similar to a terminal
that you might find in macOS or in Linux.
What you might find in Windows as well.
In Windows, we call it the command prompt, of course.
So that's very similar, and you can interact with your computer
if you know how to use that kind of code.
Let's go back to the console.
On the upper right, there's three tabs usually.
The environment, and we'll see what happens as we start writing code.
The history of code that has gone before,
and connections we're not really going to deal with in this video series.
On the bottom right, we have the files,
which just shows the files in your current structure,
and you can also navigate as you would in a normal explorer of your folder structure,
your file structure on your computer.
Plots, if we've created any plots very nicely,
you can export these plots as PNGs, as PDFs.
Packages is very important.
As you read some of the history of R on Wikipedia,
you might notice that there is this base or core R
that can do a lot of statistical functions,
but there are countless other libraries or packages
that you can import that others have written.
It's all open source.
You can just install them.
Click on it and install it,
or hit install, and then type the name of the package.
It'll ask you what the default library is,
and that is we are in 3.5.
Some packages make use of other packages.
Those are called dependencies,
so just have that clicked as well.
So those are also installed.
So click the name of something.
Something, for instance, like Plotly,
which is a plotting library.
We see it comes up there,
and you can simply install it now.
It's available.
It's extended the functionality of R,
and there are so many of these.
There's a fantastic help system.
You can just type in the name of a function,
and we're going to talk about what functions are.
For instance, if you want to calculate the average or mean,
the keyword function is mean.
I can type in a mean,
and we can search for that.
Let's type it in the correct bar,
in the correct space, of course.
Mean, there we go.
Let's search for mean.
There we go.
That looks better.
The arithmetic mean, how to use it,
tells you what arguments are,
and we'll go through, you know,
what these things are very shortly.
But a fantastic help system.
Just type in what you're looking for,
and you'll get some help on that.
The RStudio website is also a fantastic resource
just to look for help.
Viewer is something I'll show you
if we create documents or dissertations or books
or whatever the viewer can display that for us.
So let's just jump into creating a new file,
and there we'll simply see this little down arrow there for new.
We could also go file, new file,
and we see our script, our markdown,
and our notebook, our markdown.
Shiny is a web application.
You can code in other languages,
create text files, presentations, documents,
HTML files, so much you can do.
Now we're going to create a new script.
All the documents that you see on RPUB for the series,
though, are created in markdown,
and we'll have a quick look at markdown as well.
But let's just create an R script,
and that's going to open up this left top,
this top left panel here, which was hidden.
As you can see, there's the console and terminal now
on the left, on the bottom left.
So here we just write lines of code.
So let's start with something very simple,
and that's just a comment.
And the comments are preceded by a hashtag,
and I'm just going to say this is a comment.
And if you want to leave comments for yourself
as you write code, just leave comments.
Anything in that line after this hashtag
is just totally ignored.
Now we see a number one there.
That's our first line of code,
and to execute that line of code,
as long as I'm anywhere in this line,
I can just hit the run,
and that will execute that line of code.
Now it's totally ignored by R
because it is preceded by this hashtag.
So I can just hit enter and move down a little bit,
create myself some space.
So let's leave ourselves a comment
that we're going to write some simple arithmetic,
if I can spell that,
arithmetic in this section.
So there we go, simple arithmetic,
and let's do the two plus two.
Again, I like to use spaces.
You don't have to use spaces.
So I've got two plus two there.
I'm going to click run,
and there we have exact same thing
down in the console here.
We see the four,
and there's only one element there,
so we see the four.
So you can try anything else.
Let's try some trigonometric function.
Let's ask for the sine of pi,
the sine function,
and we want pi over two.
So that's 90 degrees,
pi being 180 degrees,
pi radians.
And I executed it this time
by just holding down the control,
or command key if you're in a Mac,
control for PC and Windows,
and hitting the enter key.
And instead of being in that line
and running,
I can do the same thing
holding down control or command
and enter.
And we see the pi of 90 degrees,
or the sine of pi over two
or 90 degrees is just one.
So there's so many.
Let's do two minus two.
I'm holding down control,
hitting enter,
and I see that is zero.
So really try some of these.
And in the help section here,
if we go there,
let's just see what the cosine function would do.
And it tells me there,
you know,
it shows me the other
trigonometric functions there,
and you just do that.
Now a function is,
after a function,
you see these parentheses,
and then you pass something
to the function.
And these,
there's something
that is called an argument.
You always pass an argument
when you call a function.
Calling a function means writing it,
and then hitting control,
enter,
or return,
control,
enter,
or command return on a Mac.
And then you get,
you get this solution.
That's when you call a function,
but you have to pass,
to most functions at least,
you pass an argument.
And then in the details here,
it'll tell you.
It says there the arguments,
you can pass two arguments,
numeric or complex vectors,
and we'll get to what vectors are
in a little bit.
So there are so many of these
inbuilt functions,
trigonometric,
transcendental,
so many built-in functions
for arithmetic,
and I really want you
to play around with those.
The next thing I want to
just talk to you about
is an object.
Also,
we can also refer to this
as a computer variable
or computer variable name.
So I've written something
there,
two plus two,
but I might want to store
that value for later use
so that I don't have to write
that in all the time.
Let's create a computer variable,
and you can use any word.
Try to use words
that are descriptive.
So when you refer back
to this later in your code
that you know what is stored
inside of that object.
Now,
an object really is just
the space that is created
in your computer's memory
in which that object is stored
and that object has a type
depending on what kind of data
it holds.
So let's create
this computer variable
and I'm just going to call it
something like
my text.
As I said,
there's some restrictions on this,
so don't use words
that are already built into.
Don't use sign,
for instance,
the S-I-N
as a computer variable
or object name
that already exists,
so don't overwrite that
and don't use
illegal characters
such as spaces.
Now,
there are some conventions
that some people stick to.
This is camel case.
In other words,
there are two words there,
my and text.
There's no space between them.
The first letter is lowercase
but each subsequent word
starts with an uppercase.
So that's one way
of going about it.
Some people use snake case.
That will look something like this
where the words are strung together
with underscores.
Another popular way
is just to put dots in between.
So my dot text.
So let's do that.
And now,
instead of using an equal sign,
which you can,
but let's just use the convention
which is this symbol,
I'm going to hold down alt
on a Windows or PC or Linux,
hold down the alt
and hit the minus sign.
And you see this
less than
and minus sign come up.
That is
equal to an equal sign.
Let's put it that.
Just a,
it's an assignment operator.
I'm assigning something
to this object called my text.
And since I've called it my text,
let's pass some text.
Text is always passed
inside of quotation marks.
And I'm going to say
this is text.
I'm going to hold down control
and hit enter
or command and return.
And I now have my text.
Look what happened
on the right hand side here.
Under the elements tab,
under values,
there is a new variable
called my dot text
and what is held inside of that.
So you get this list
of all the things
that you've created
and what the value is
that's held inside
of this object.
And just remember
everything has a type.
So the type of the content
in this object
is a string.
A string
because it's inside
of quotation marks.
Let's create another one.
I'm going to call this one
my answer.
So I'm using camel case
in this instance,
holding down alt and minus
or option and minus.
And I'm going to store
in that my answer
is the solution
to two plus two.
Control enter,
command return
and we see my answer
is now there
and it's four.
And later on in my program,
I can just use my answer
and as I type it,
a tip even comes up
and it says,
well, my, there's something
that already exists
so I can just hit tab
and it'll auto complete for me.
If I now hit control
and enter, command and return,
we see the solution
pop up here in the bottom.
The, my answer,
it holds the value four
and the four is printed there.
So that four
is always stored
inside of my answer
and I can reuse that
all the time.
That makes it very,
very useful.
So next on,
let's move on
to something called a list.
So let's do this.
Let's do that.
There we go.
Let's do lists.
And a list is to something
that is more than
a single element.
Although in R,
even a single value like four
is actually also a list.
And R refers to these
as vectors.
Everything is stored
inside a vector,
which is just a list
of elements.
And a single value,
of course,
is also a list,
a vector.
And if it's a list
of integers,
it's a,
it's a,
it's a numerical vector.
And if it's a list
of text,
it's a text vector.
And that's,
that's just the term
that is used.
So let's create one.
And I'm going to call
this one temperature.
Temperature.
I'm going to hold down
Alt and minus,
Option and minus
to have this assignment operator.
And the way
that we put
lots of elements together
is to group them
inside of a vector.
We separate them
by commas,
but we use a function
called C.
I suppose for,
we're concatenating something,
we're putting something
together, C.
So let's have
some temperatures here.
Let's have a temperature
of 72 and 69
and another 72
and a 70,
a 70.
And there's four numbers.
Let's make it
a more barmy 85.
I'm going to hold down
Control and Enter
or Command and Return.
And now we see
temperatures saved up there.
Now look at it.
It says it's a numerical vector
and it has five elements.
So these are the addresses.
One, the colon means through.
One through five.
So there's number one,
there's number two,
there's number three,
there's number four,
there's number five.
So that is a list.
I just want to show you
another quick way to do this.
Let's create another one.
I'm going to call this one
MyList using CamelCase.
And I'm going to assign
that a sequence.
I can create a sequence
of value with a SEQ.
And you see SEQ comes up there.
There's actually
a little tooltip there.
And it says if you hit
the F1 key,
let's do that.
The help actually opens up
and it gives you
the sequence there
and how to use
the usage,
the arguments that can be passed,
some more details,
so all the help for sequence.
Now, a simple way to use sequence
is to state a start number.
So I'm going to say start at one,
stop at 10,
and go up in steps of one.
Let's execute that.
And we see what we have here
is a MyList.
It's numbers.
There are 10 places.
And it is the numbers
one through 10.
I started at one,
I ended at 10,
and I went up in steps of one.
So to create sequences
can be quite helpful.
If you want to know
how many elements there are,
just simply use the length function.
So I'm going to say
what is the length of MyList?
And very quickly,
it's going to tell me
it has 10 elements in there.
It just counts how many there are.
So that's quite useful.
The next thing I want to talk to you about
is just some for loops.
Let's do that.
Let's do for loops,
for loops.
Now, that is how you
iterate through something.
I'm going to iterate through
a piece of code
over and over again,
but I'm going to control
how this iteration works.
So let's create a variable.
I'm going to call it
MyNumbers.
ComputerVariable and Object.
AssignmentOperator.
I'm going to use a sequence.
And the sequence starts at 1,
ends at 10,
ends go up in steps of 1.
Let's do that.
So I have MyNumbers now,
very similar, of course,
to the MyList
that we just created above,
but I'm going to do that.
Let's create something
that holds a zero.
And I'm going to call that
sum.total.
And in sum.total,
I'm going to store the value 0.
Hold down Control,
hit Enter,
or Command and Return on a Mac.
And now we have this sum total.
Now I'm going to create this for loop.
And the keyword is for.
And I type in for.
And then I'm going to put in parentheses
what I want to happen.
I'm going to use a placeholder.
You can use any placeholder.
Many people use I.
Let's use I now.
So for I in my.numbers.
And you see the little tooltip coming up.
I'm just going to hit tab for auto-completion.
So what does this say?
It's actually, you know,
it's actually very close to just normal English.
It's saying for I in my numbers.
And you can see my numbers is 1, 2, 3, 4, 5, 6,
6, 7, 8, 9, 10.
So you can well imagine for I in my numbers means,
well, first take the 1,
then the next one, which is a 2,
then the next one, which is a 3.
You know, just go through each of the elements
that are held in the numerical vector
called my numbers.
We're just going to iterate through that.
And then after that,
what I want to happen during each of these loops
must go inside of curly braces.
So I put my curly braces there.
And whatever has to happen
happens inside of these curly braces.
Now, it's useful just to hit enter or return here.
And you see there's this automatic spacing
that happens that last,
when I was between those two braces,
the last one went to the bottom.
And there's this bit of padding there.
It's just, it just looks nice on the screen.
And that's something that RStudio is doing for you,
for you right here.
So what do we want to do?
Well, what we want to do is take sum total.
So I'm going to take sum total.
Remember at the moment that is zero.
And now I'm going to use the equal sign.
And it's going to look weird
the first time that you see this.
I'm going to say sum dot total,
again, plus i.
Now that doesn't look like
very good mathematical algebra there.
And certainly most computer languages
don't work like algebra.
What it does when it sees an equal sign
or an assignment operator.
And as I say,
normally we use this assignment operator,
but inside of these loops,
we'll use equal.
It says whatever's on the right-hand side,
execute that first
and then place it inside of
what is on the left.
So what is in sum total at the moment?
At the moment, sum total is an object
and it holds a value zero.
And i is at the moment
is the first element in my numbers,
which is one.
So it's zero plus one.
And that is one.
And this one now gets passed to sum total
and it gets,
that piece of memory,
that memory in your computer
gets overwritten
where it had the zero in it before.
Now it holds the value one.
So it's going to go through the second time.
Now remember,
i moves to the next element,
which is two.
Sum total still has the value one in it.
i is now two.
One plus two is three.
Three is now passed to sum total,
which now holds the value three.
And we go through each of these.
So let's run that.
And let's call sum total.
Sum dot total.
And see,
if I take the numbers one through ten
and I add all of them together,
what am I going to get?
Well, I get 55.
We can see the 55 here at the bottom.
And we can see sum total
has been updated here on the top to 55.
So that is very convenient
just to run through some code,
just doing something over and over again,
and then extracting some useful information.
From that.
Let's move on to functions.
And we're going to use
what we've just done now
inside of functions.
Now we've seen a little bit
of functions before.
We've seen the,
we've seen what the sign function looks like.
And we know that,
you know,
it's built into,
into R
and we have parentheses around that
when we pass an argument to that.
Say, for instance,
I just want to calculate
the average of the values.
One, two, three, four, five, six, seven, eight, nine, ten.
There's a built-in function called mean.
And I'm just going to pass my dot numbers
as an argument
to the mean function.
And we see at the bottom,
it's 5.5.
So the mean of one,
two, three, four, five, six, seven, eight, nine, ten
is 5.5.
Now,
this one's going to be a bit difficult.
I want you just to concentrate now
and I want to show you
something very beautiful, actually,
in that we can create
our very own functions.
So I'm going to call my function
my dot mean
just to,
you know,
be different from the inbuilt mean functions.
I'm going to give it my dot mean.
It's an object.
I give it a name.
But I want to tell R
that this is not a normal object,
that this is actually a function.
So I'm going to use my assignment operator
and I'm going to use the function keyword
just to tell R
that my mean is not a normal object,
it's actually a function.
And remember,
a function has arguments passed to it.
It doesn't always have to be.
There are some functions
that don't have arguments.
You still use the parentheses, though.
But I'm going to put
just a placeholder in there
and I'm going to call it VALS
so I can refer to VALS
some value that I'm going to pass
to my function.
So the argument
has the placeholder name VALS.
So in mean,
we passed, remember,
sum total as an argument.
The same here with VALS,
but it's just a placeholder.
So I've got this function
and again,
what happens to it
must go inside of curly braces.
So in between my two curly braces,
the second one was automatically put there
when I opened the first one,
I hit return or enter
so that it makes a new line
and it all looks very nice and neat.
So what I want to do inside of this,
I want to recreate the mean function.
Remember, the mean adds all the values
and divides by how many they are.
So I'm going to create
a computer variable called
number dot of dot elements.
It's a descriptive one.
I understand what it means.
So I'm going to assign to that,
I'm going to assign the length
of whatever the argument was
that is passed.
Remember, length just tells me
how many elements there are
and when I pass.
So that's one.
I want to create another one
called cumulative,
cumulative dot total.
And I'm going to initialize it
with the value zero.
The next thing I want my function to do
is go through a for loop.
So I'm going to say for I in VALS,
and that's exactly what we did up before.
So it's just going to iterate through
everything that I passed to this.
Again, what happens
goes inside of my curly braces.
What I wanted to do
is to say cumulative dot total
equals cumulative dot total plus I.
So exactly the same as we did
with the for loop before.
So whatever I pass to my function,
my mean,
it's just going to iterate
through all of them
and it's going to sum all of them up.
The first one plus the second one
plus the third one,
exactly as as before.
So now I want to go outside
of my set of curly braces
for my for loop
because that's all I want
my for loop to do.
Now I'm back in the curly braces
of my function.
And what I wanted to do
is to return something.
So return is a keyword
and whatever is inside
of these parentheses,
it returns.
And what I want to return to it
is the sum total
divided by how many there are.
So it's cumulative dot total
divided by number of elements.
Number of elements.
That's what I wanted to return.
And I'm going to just go outside
of that curly braces,
hit enter,
a control and enter,
command and return.
And I now have a new function
and we see it appear there.
My net, my dot mean.
And that is a function.
Let's test it out.
So I'm going to say my mean,
my dot mean,
I'm going to call that
and I'm going to pass
that my numbers to it.
The, the my dot numbers
that we created,
the one through 10.
Remember, I'm going to pass that
and I see my solution again
is 5.5,
just as the inbuilt mean function was.
So pause a bit,
look through this function again.
It is, it really is plain English.
It tells you what it's trying to achieve.
And it's very expressive.
Now, these things that I create
inside of the function,
they are these local variables
and something that I create
outside of a function,
those are global variables.
I'm not going to go into that,
but you can read up,
you can read up that exists
for many computer languages.
But it is,
it should be quite simple
to, to figure out
what is happening here.
I've created a function
called my mean.
It takes an argument,
which I can pass to it.
And in this instance,
I pass my numbers to it.
What I want to do
is to have two things,
sum up all those values
that is passed as this argument.
I want to know how many there are
so that I can return
this total divided by
how many there are,
which is the equation
for arithmetic mean.
And to do that,
I went through this,
well, there is an inbuilt function,
of course, in R
that can do this for you.
But I use this for loop inside
just to go through each of these
and just add them
so you can create
your very own functions.
The next thing I want to show you
is just to how to load a data set.
Now, how to do that?
I'm going to actually open
the source document
that I created for our pubs
and that is on GitHub.
So this looks very different.
This, you see,
it's a tab there.
This is the script file
we've created
and we can save that.
On this side,
we have an R markdown file.
So when I said file new,
this was not a script
but a markdown file.
And a markdown file
is like HTML
that you would know
in a website.
So you still see the lines of code
you're on the left-hand side.
It starts off with something.
Now, this will be created automatically.
This is YAML,
Y-A-M-L,
just another markup language.
A markup language is just a,
well, in some sense,
you can see it as a subset
of the full set of HTML code
which is used in websites,
the language for websites.
So it sets out a title
and an author
and then output.
I want this to be outputted
as an HTML document,
a table of content
to be set to true.
And that's where you see
that table of content
on my RPUBs files.
And I don't want
the sections numbered.
And now what happens
is you can write
normal paragraphs
and create all sorts
of nice things
but the R code itself
has to go inside
of these three ticks.
So that's on the top left
of my keyboard
next to the one key.
There's one, two, three of them
which indicates
we're starting
the R code
and one, two, three ticks
we've ended it.
Now this is some automatic
setup for this page.
Don't worry about that.
I've also included
some style,
a cascading style sheet here.
Don't worry about any of that.
I'm just saying
colorize my large headings
with this color,
my second largest headings
with this color,
my third largest headings
with that color
just creates a bit of
a bit of color
in my documents.
You see the orangey gold
and the blue
that I always use.
This is my PNG file
which is the logo
and this is how
I get that to be expressed.
Two hashtags here
though it's not comments
this is outside of the code
that just says
heading number two
so that gives me
a fairly large heading
and that heading
is introduction
and then I start
writing normal
normal paragraphs
normal English paragraphs
I write all of that
and if I want something
to look like code
but it's not really code
I put that inside
of these single
little tick marks
write more normal code
write more normal code
and here two hashtags
that is markup language
and it says
do heading number two again
so that's larger
normal text
normal text
heading
normal text
normal text
heading
etc etc etc
etc
I want this
this these
to appear as code
they're not executed
just as code
so they go inside
of those single ones
you see these two dollar signs
here
whatever I put inside
of these two dollar signs
is called
LARTECH
and LARTECH
and LARTECH is a way
to write mathematical expressions
and you see there
the Euler's number
e to the power of one
you see how that is created
little single little underscores
before and after word
changes that word
into italics
so that will be printed
in italics
if I put two of those
that will change to bold
so I open and close
a word
or a sentence
or some piece of a
part of a sentence
in these
and that becomes italic
and you can see it goes on
and here
I want to execute some text
so those goes inside of
three
of these little ticks
and it actually has
something here on the right hand side
I can actually run that content
it's called a chunk
this piece of code
is called a chunk
so that will be the code
that you write
as we wrote here
in the script file
that is something
that we write here
and it's called a chunk
and I do that
with just telling it
that we are writing an R
because you can specify
other things
inside of these set of curly braces
it says R code
is about to follow
and we close that R code
and that's how we go about it
so I just want to go down
to the section
I want to get to
there was the section
on the four loops
and you see the code
written there
I can execute that code
by just hitting that run
that current chunk
and we see the functions
bit coming up there
and there we are
with loading the data
now when I create a file
I can save the file
somewhere on my hard drive
now this document
is already saved
you see the little save icon
there is blanked out
it's saved at the moment
if I change anything
that will light up again
so I can save the changes
so I like to save these
on my hard drive somewhere
and if I want to import
a spreadsheet file
that contains some data
if I want to work
on some saved data
inside of a spreadsheet file
I want to import that file
what I usually do
is I save both this file
and that spreadsheet file
containing the data
inside of the same folder
on my computer's hard drive
or solid state drive
so that they're both in the same
and I can ask
use this get
wdget working directory function
if I write that line of code
it'll tell me
the address
to
on my hard drive
or my solid state drive
where this file is saved
but I can also set
a working directory
so I'm saying
set working directory
to the get working directory
so it's going to go out
and see where is this current file saved
and then pass that
to set working directory
so that this document
says when I look for files
I'm going to look inside
of this directory
where
or folder
where
this
our document
is saved anyway
so that if I want to refer
to a file
I can just simply refer
to that file
here we have
logistic regression dot csv
a comma separated value
spreadsheet file
and I don't have to type
the whole
address to it
so on windows
that would be c
colon
backslash
blah blah blah
and of course
on mac
that will be different
but I don't have to refer
to that
because I've set
the working directory
to the current working directory
where this file is saved
and I know
I've saved
logistic regression
in the same folder
or directory
that this markdown file
is saved in
so I don't have to refer
to that long address
and to import
a spreadsheet file
I use the read dot csv
this is a csv file
so I'm going to call
the function read dot csv
pass this as an argument
inside of quotation marks
and I'm going to pass that
to this object
that I'm conveniently
calling data
so let's set this working
directory first
by running that line of code
and you saw the little green
there as that got executed
and now we're going to
import that line of code
and run that line of code
so data is now imported
and if I look up here
I see there's new data
so that was values
we had functions before
but now on the top here
we have data
and if I click on this little
square on this side
it's actually going to open
something on the tab here
it's very small to see
but there you can actually
see the spreadsheet file
beautiful
and that's why I say
this is such a lovely
coding environment
and then I can actually
play around with this
filter some of the data
beautiful environment here
but let's get back to my file
so that's imported in data now
I can also call the view function
with an uppercase V
that will do exactly the same
as clicking on that little square
at the top there
this is close down
this bottom left
and that is how you import data
and that data is now ready to be used
and we're certainly going to use data
in this way
when we do create
our deep learning
or our deep neural networks
now we're going to use
tensorflow in this course
tensorflow of course
is Google's open source framework
for tensor calculations
those are the calculations
and the framework
we need to create
and run
our deep neural networks
and we're also going to install
Keras
now Keras
just sits
on top of tensorflow
it can also sit on top
of other frameworks
but we're going to use
Google's tensorflow
and it just makes
writing code a lot easier
it's much simpler code
it looks like R
it's very easy to do
so you don't have to do
the laborious coding
that is sometimes involved
with tensorflow
there are new versions
of tensorflow coming out
which is going to make
the writing of code
slightly easier
but Keras has become
so popular
that it's even built
into versions 1.9
and up of tensorflow
so you write a simple
line of code
it recreates that
in more complex
tensorflow
code behind the scenes
so that you don't have
to write that
complex code
but it's still
it's the same thing
it's still going to be
tensorflow code
so to install tensorflow
I want you to install
two packages first
one is called
reticulate
so you can come here
to packages
hit install
type reticulate
and install it
and the second one
is called dev tools
T-V-T-O-O-L-S
and you're going to do
that in exactly
the same way
now if you're
on a Windows machine
you also have to install
R-T-O-L-S
as you can see
there
R-T-O-L-S
and click on that link
which is in the document
I'll link to it as well
so on Windows
you have to install
that R-T-O-L-S
for dev tools to work
so install dev tools
and reticulate
on Windows
also install
this R-T-O-L-S
the R-T-O-L-S
you have to do
from the website
with dev tools
and reticulate
you can do that right here
and then we're going
to install tensorflow
and Keras
now to install these
simply follow this link
once again
in the description below
it is very simple
to install in tensorflow
and Keras
using dev tools
the description
cannot be easier
on these websites
just go to
tensorflow.rstudio.com
forward slash Keras
it'll show you
how to import tensorflow
and Keras
now for tensorflow
there are two versions
there's of course
the normal CPU version
that will run
on your computer
no problem
but if you have
an NVIDIA graphics
processing unit
a gaming card
you can use
the GPU version
that is much faster
than a CPU
it allows for
parallel execution
tensorflow
can use those
GPU cores
CUDA cores
so it's got to be
an NVIDIA GPU
and it'll run
a lot faster
now if you're
in a normal laptop
even if it does have
an NVIDIA graphics card
and I'm recording
on just such a laptop
and it has quite a
high end graphics card
in it
it's still not enough
when you get to
very large data sets
specifically
if you look at images
as your data set
to do some
deep neural networks
to learn from images
you are very quickly
going to run out
of the capacity
and specifically
the memory capacity
of that GPU
and that's just going
to be very frustrating
so for the kind of
things we're going
to do in this course
and if you're starting
off with deep learning
just install
the normal CPU version
it's going to run slower
but it's still going
to get the job done
if you're adventurous
or you have got
a monster desktop
with two Titan X
NVIDIA graphics GPUs
and then go ahead
install the GPU version
no problem
so that was a very
short introduction
to R
I think that's the
basics that you require
it is a lot to
for you know
in one video
to get used to
so perhaps pause
go through it again
these files are available
play with them
there's just one way
to go about this
though
sit down and start playing
it is fun
it is a lot of fun
and there's a great
sense of accomplishment
when you get something done
so really I just want
you to do it
we're also going
to write lines of code
when we create
our TensorFlow
deep learning models
so you will have to
write some lines of code
and as you write
those lines of code
in the future videos
that I will make
you just pick it up
along the way
so it really is fantastic
and an easy
and nice way to do it
this RStudio environment
is fantastic
I'm going to stick with R
for this introductory
series on deep learning
because it is
such a nice environment
as you can see
for yourself now
picking up the language
is very easy
and then to write
the same models
in Python
once you can do it
here in R
it's just a breeze
I mean it is
the smallest
tiniest little learning curve
so if you want to move
over to Python
which is the natural
language for TensorFlow
it's just
it's a no brainer
it's very easy to do
and perhaps I'll make
some videos
just to show you
how this works
in Python as well
stick to R for now
I mean R is fantastic
for normal data analysis
normal statistics
I'm going to use
I use the term normal
but just for that
workhorse
and creating
beautiful graphics
graphs
plots
that you can put
inside of your dissertations
inside of your publications
it's just a phenomenal
environment
as is Python
I mean Python R
there's this debate
which one should you do
do both
that's just the solution
to the problem
just learn how to do both
they are very similar
there's some quirks
specifically on the R side
that you've got to use
get used to
the Python side
it's actually much
much much easier
so once again
if you start with R
that just makes Python
a breeze
but learn how to use both
that would always be
my suggestion
it really is not a stretch
this is not difficult
really not difficult
to learn a computer
programming language
so I hope I've got you
excited
I hope you feel comfortable
that you can start
playing in R now
go and enjoy yourself
that you have
knowing how to do
that you can start
even when I'm
the Webb
of people
and when I'm
trying to ride
II
or what you're
using
I'm
trying to take
whatever you do
and I'm
just
with the
I'm
able to
deal
what you do
for me
