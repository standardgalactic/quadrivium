So, we're going to start off by introducing vectors. I've opened an IPython notebook here.
I've called my file chapter 1 underscore 0 underscore vectors. And here we go. In this
first cell, you can see I've just made it a heading 1, so it prints out nice and bold,
and all I've typed in there is an introduction to vectors. And in my second cell, which is normal
markdown, and let me show you what that markdown looks like. It's this basic HTML, importing the
required Python and then superscript, and this is the HTML code for the trademark sign,
and I'm putting it as superscript libraries. If I were to run that cell, there we go,
importing the required Python libraries, nicely printed. So, here we go. We're going to use
SymPy to do our vector analysis in. And to do that, I need to import SymPy, but not only SymPy,
some subsets of SymPy, all sorts of things that I want to import before we can start talking
about vectors. So, let's look at this first line. I say, from SymPy, import the following.
So these are just functions, code, or whatever you want to call it inside of SymPy that I want
to import, so that I don't have to refer to SymPy dot sine, SymPy dot cosine, or if I wanted to use an
abbreviation for SymPy, S-Y-M, so I wouldn't have to write SymPy dot sines, S-Y-M dot cosine, etc., etc.,
all the time. So these are all these functions within SymPy that I want to use in this program. I'm going to use
sine, cosine, tangent, exponent, square root, init underscore printing, we'll see what that is again,
and symbols. And SymPy has a subset of libraries called physics dot vector. If you were to type from
SymPy dot physics dot, you'll see there's a lot of stuff there, and I'm just using vector, and from that
I want to import everything. It's a bit lazy thing to do, because it's going to take up memory and take
up time to import all of these, but for now we're not doing anything too serious with vectors, so we
can do that. From the ipython dot core dot display library, I want to import this function called
image, with a capital I, see what that will do. And then from the warnings library, I want to import
filter warnings. And in this last instance, you'll see that I'm using the anaconda version of Python
on the Mac here, and I'm using the 2.7.8 version. And the only function that I'm going to use is the
print function, and the print function between the 2.x and 3.x versions of Python differ. I'm going,
even though this is 2.7.8, I'm going to use the print format that it's used in the 3.x series.
So I can do this, this is very neat, from future import print underscore function, and there's two
underscores there and two underscores there. So I can now use Python 3 code, as far as the print
function is concerned, inside my Python 2.7 here, and it'll still work. Now remember, I imported
init printing. There I have init underscore printing, open and close parenthesis, and that's going to
initialize pretty printing for me. We're using Simpy as a computer algebra system, so we want
nice LaTeX printer to the screen. We want to see those nice mathematical symbols. So I'm initializing
it there. And many times in the IPython notebook, you'll write some code that will execute, but it
makes these ugly pink warnings. And I had seen those appear, so I'm going to set filter warnings,
which I imported it there from the warnings library. We're going to set filter warnings,
open and close parentheses, open and close quotation marks. I like to use single quotation
marks, and I'm going to set it to ignore, so we're not going to have any of those ugly things.
So I'm in that cell. Let's just play that. I'm in this cell. Let's just play that so that code is
executed. So let's get to a vector. What is a vector? Well, a vector is this mathematical object
that contains a magnitude and a direction specified in a specific reference frame. Very important to
have a reference frame. Otherwise, your direction and your magnitude and your direction might not
mean much. So you've got to have this reference frame. So for now, in this first chapter, or actually
this .0 version of this chapter, we're going to introduce vectors. Now, we're not going to deal
with vectors much. We're going to deal with vector-based functions. But in order for us to
understand vector-based functions, we need to have this quick refresher course on a vector.
More importantly, we're going to state that a vector can be defined as an object that is not
invariant to axis transformation. So when you transform axis, you're going to have a different
object. This is opposed to a scalar quantity, which only has magnitude and is invariant to axis
transformation. It's not going to change the value if we transform axes. Not going to make a lot of
sense now. We'll get to it. Now, the figure below shows a vector. Now, let's just go down. There's
our figure. Now, unfortunately, there's my vector in red. What you will have to imagine is at the top
here, it has a little arrow sign. So this red is an arrow pointing up. Apologies for the arrow not being
there. It's a bit big for the screen here, but it starts at the origin and it goes up to a point
seems to be 3, 6. 3, 6 is the point there. But this is not a point 3, 6, x, y, 3, 6. It is a vector
going from the origin to the point 3, 6. What can we note about this? Well, it looks like it goes
3 units on the x-axis and 6 units on the y-axis. And that is how we construct this. So certainly it
has in this coordinate system, look, this is my reference frame. It's a Cartesian coordinate system
in two space. I have an x and a y coordinate system. And in this reference frame, I have this
direction. It seems to slope up in that direction and it has a magnitude because it has a certain length.
So I could put an angle down here so it will have a direction and it'll have a length and there's my
vector. But it seems to be comprised of these two components, an x component and a y component
that should be very familiar to you. Now in Python, before we define a vector, we have to define a
reference frame. Now in the simpy.physics.vector library, I have imported everything. And one of
those everythings, one of the functions is a reference frame. Capital R, capital F. And I'm
going to assign it to this computer variable called C. So I'm going to create a little space in memory.
I'm going to call that space C. And to that, I'm going to attach the following object, reference frame,
open and close parentheses, and I call it C. Try and call these things the same thing, otherwise it
might get confusion. And I use C for Cartesian, but I could have put any string there that I wanted.
So I have this reference frame called C, to which I can now refer. Now I'm going to create, let's just
run that so it's executed, creating a vector. So again, I'm creating a computer variable there. I'm
calling it vector. I could have called it anything. I could have called it, my dog is cute. Whatever I
want, I can use any string there or any number. There are keywords, of course, and you can't start
with funny symbols. Oh, there's all sorts of rules to these names. It doesn't matter. I've just called
mine vector. So I'm creating a space in memory and I'm calling it vector. And into that little space in
memory, I'm putting this object. And this is a vector that I'm putting in there. Now look how I refer.
C, remember, C is my coordinate system and it has a C.x and a C.y component. So my reference frame
in the x direction, my reference frame in the y direction. Isn't that beautiful? Now that is built
into the Simpi library and I can just use it. And I'm saying go three times in the x direction. So
one, two, three units plus six times that star. Remember that's shift eight on most keyboards and in
the y direction. So that's what I have. Now let's execute that. And I'm now putting that into memory.
So look at this print. And this is the difference between the versions two and three in Python. I've
got these parentheses. But because I've imported everything from the future, or at least the print
function from the future, I can use this version here, which looks like Python three. So print,
open and close parentheses, open and close these quotation marks, meaning that I've got to put a
string in between. The vector is expressed as colon space. So this is my print command. So I'm going to
print that to the screen. And then the new line, I'm going to print this whatever is held in memory
in this bucket called vector. Remember, which was this up here, which was this vector. So let's run
this piece of code. And that's beautiful. And I have three x hat c hat subscript x plus six c hat
subscript y. What does that mean? Well, that is the way Simpy makes its notation. That little hat
refers to the fact that that's a unit vector. A unit vector has a length of one. And it points in a
certain direction. So it actually only shows me direction. And this is our vector, we're going three
along the x axis and three along the y axis. So it's actually three times c hat subscript x plus
six times c hat. These hat, in physics, we refer to this hat as a unit vector. It has a length of one
in a certain direction. This direction will be an x and this and y. And it's called c here because I
called my reference frame c. Now note something else that this vector is simply the addition of two
vectors. One of magnitude three in the direction of the x axis. Oh, there's a horrible spelling
mistake. Let's make it, let's correct it now in the direction, direction of the x axis. And look at
this beautiful example. It's just HTML code that I have here. Let's run that because we've called the
cell a markdown type of cell. So if we go back to our figure here, look, I'm just going, I'm adding
two vectors, it seems three in the x direction. So three times this unit vector and six times the unit
vector in that direction. And if I add those two, so if this was one, and I had a little arrow there,
so this we call the tail and this we call the head. And I take a second one and its tail is by the first
one's head. And there's the head at the top. And if I were to combine these two by going from the
first one's tail to the last one's head, I seem to get that vector. And that's beautiful because that
brings us right into vector addition and subtraction. So let's make another vector. And again, just a
computer variable, a little space in memory. I'm calling that bucket, that space memory, another
underscore vector. I could have called it whatever I wanted within the limitations of what you can call
these things. And that equals two times. Again, I'm using my Cartesian reference frame that I
stipulated above. So twice in the x direction plus one in the y direction. So let's run that code. It's
in memory now. And I'm going to print to the screen the addition of the two vectors are. So it's my print
command, my open and close parentheses, my open and close quotation marks. If I have quotation marks,
everything in between will be a string. And it'll print directly as I've typed it there, even with that space
and on a new line, I will add these two vectors, vector plus another vector. So remember, the one was
three in the x direction, direction and six in the y direction. And this one's going to be two in the x direction,
one in the y direction. And if I add them, let's run this block of code, run it and lo and behold, it's now five in the
x direction and seven. So what happened, we just added the two components to each other, the x to the x and
the y to the y. That's all we've done. That's how you add, there's the plus mark, we add two vectors.
Now, in some pi, no, this was a computer variable, this vector and another vector. So please, please don't
get confused. I'm only calling them this so that I can refer to them out of computer memory. Remember,
mathematics doesn't work like that. Mathematics, we want an actual symbol that we can write down.
That's got nothing to do with a computer variable. That's a mathematical variable. So we must tell
some pi that we will now want to, instead of this x1 being a computer memory variable, I want it to be
a mathematical variable. And for that, we use this symbols that come straight from the some pi library
symbols. So I'm going to say x1, x2, y1, y2, those are now going to be symbols, open and close parentheses,
open and close single quotation marks, I can put a comma after that, but you can just put a space x1,
x2, xe. So if x1 is first, make x1 first there, because the order is important. The first one will refer
to the first one, the second one to the second one. This is just telling Python, every time I now type x1,
I want you not to see it as a computer variable name. I want you to see it as a mathematical symbol.
So let's just run that piece of code. Now let's make two new computer variables. I've called that
one v1 and v2. These are still computer variables. As I said, I could have written there, my dog is black
and white, whatever I want, I can call it like that, call it. So I've just called it v1 and v2 to refer
to vector one and vector two. But I'm going to, to these two buckets in memory, spaces in memory with
a bucket names v1 and v2. So this computer variables, I'm attaching these two following vectors.
x1, which is now not a computer variable, but a mathematical variable,
x1 times in the x direction and y1 in the y direction and x2 and y2. Let's run that block of
code and let's print it to the screen. So now I can just call that bucket in memory and whatever's
in memory there, which is this bit here, which is this bit will now print to the screen. And so let's
run this code and you can see it there already. It's beautiful. Look at that. Now x sub 1 is written
so nicely x sub 1. It looks like you've written it by hand in your paper notebook with pencil. Isn't
that beautiful? That's what the in it printing does, the pretty printing in Lartec. So it's x sub 1
in the x direction and y sub 1 in the y direction. And if I run v2 beautifully, that's x sub 2 in the x
direction and y sub 2. And now let's just add these two. Again, my error in spelling there,
in there. Oh, today has been a horrible day as far as spelling is concerned. Let's run that.
There we go. Now I'm going to say v1 and v2. Remember v1 is that vector, v2 is that vector. I'm
just referring to their computer variable names. And if I add them, look what SymPy does. It shows you
that it's just taking the x components and adding them together and taking the y components and adding
them together. That's how we do vector addition. And the same is going to go for vector subtraction.
Which one you put first, which one you put second is important and it's just going to subtract those
components in that direction in the reference frame that you used from each other. So vector
addition and vector subtraction is very easy. We can also multiply a scalar. Remember I said a scalar is
just a magnitude, just a value. It doesn't have a direction. I can multiply that by a vector. Again,
I'm going to introduce this variable a, call it symbols a. So I'm creating another mathematical variable.
And then this time I'm going to call it a and I'm just going to use it as a constant. You can use it
whatever you want. But now I'm going to say a times v1. Let's just run this bit of code so it executes.
Look what it did. It took my x1 and y1, which was my initial vector v1, and it multiplied a to each
of the components. That is scalar multiplication. This constant just gets multiplied inside of
the two components. The next thing is the magnitude of a vector. Now look back at our little picture up
here. Remember Pythagoras? What was going to be the magnitude or length of this line? Well, it's this
one squared plus that one squared equals this hypotenuse squared. If I take the square root of
that, what am I going to get? Lo and behold, I'm going to get the length of this. Same is going to
happen here to a vector if I get a vector's magnitude, except it's very easy to do. In Python, I'm just going
to say v1. Now that's the name, the computer variable name, but inside of that little bucket
in memory is a vector. And I'm going to say dot magnitude open and close parentheses. And lo and
behold, if I were to run that, look at this pretty. It's the square root of the one component squared
plus the other component squared. All that is is Pythagoras, nothing else. And that works beautifully for a
vector because my Cartesian coordinate system here has a 90 degree angle between the two axes.
Let's introduce another mathematical symbol. I'm going to call it z1. And if you write it like that,
Python will do it as an underscore. I'm going to make a new vector, call it v3, space and memory. So
this is a computer variable, but it's x1 and x direction plus y1 times the y direction plus z1 times the
z direction. And then just print it to the scheme by just simply typing on a new line v3.
If I were to do that, look at x1 in the x direction, y1 in the y and z1 in the z direction.
And lo and behold, if I were to calculate the magnitude of that, I can now just call v3 dot.
Once you put the dot and you hit the tab button, let's do that. I'm going to do that for you.
Well, let's take this out. If I were to type v3, look, I want to show you. If I were to type v3 dot,
and then the tab key, look at all the stuff I can call on that vector.
Arguments, cross, differentiate, do it, dot, dt express, magnitude is the one I want. Magnitude,
I can double click on it, open and close parentheses. And if I were to execute that,
I'm going to get x1 squared, y1 squared, z1 squared, the square root of that, that is still in three
dimensions, going to be the length or magnitude of my vector. Now, remember, we talked about the unit
vector. That is to take a vector. Remember, a vector has a magnitude and a direction. And I'm
going to take that vector, and I'm just going to get its unit vector. In other words, I'm going to
change the magnitude to one, but still in the direction of. If you think of a scalar, say the
number five, what is five? Well, this is five times a unit value of one. If I put five ones together,
I get five. It's five times one. Now, the same is happening here. I can take a vector and it has
a direction and a magnitude and a direction as opposed to scalar, which is this magnitude.
But I can keep the direction, but just bring the magnitude down to one. And how do we do that?
You might remember, you might be familiar with it. Well, we just take a vector and we divide each
component by the magnitude of that vector. In other words, you can also write one over the magnitude
times the vector, because one, the magnitude, remember, is a scalar, one over scalar, and we know
what a scalar times a vector is. We've done that. Remember, we said eight times V1.
So I'm just going to multiply that inside of each component. So remember here, V3 was a three-dimensional
vector. And each component is just divided by the magnitude of that whole vector. And this new vector
is a unit vector. It's still going to point in exactly the same direction as V3. But if I were to
calculate from this, if I were to calculate the magnitude of this whole vector, it was going to
equal a magnitude of one. Python is very easy. I'm going to say V3.Normalize, open and close parentheses.
And if I were to execute that line of code beautifully there, it shows you it is the length of that or the
magnitude of that vector is just divided. It becomes the denominator for each of the components.
Lastly, I just want to quickly look at the equality of vectors. And this is, remember, this is how we define
vectors. Let me just make the screen a bit smaller so we can try and fit this in. There we go. There are two
lines there. Again, apologies, there should be an arrowhead there and an arrowhead there. Now look at these two
vectors. They are of equal magnitude and they have the same direction. Even though they are in completely different
spots in the Cartesian coordinate plane here, if I were to drag this one down to that one, put the tail,
this is the tail, this is the tail, if I were to put that at the origin, these two would lie exactly on
top of each other. And these are equal. They are exactly the same. They're not even equal. They are
exactly the same vector. These two, remember that was an arrow and that was an arrow. Please just draw
that in with your imagination. These are exactly the same because no matter where we draw it, we do
just move it down so that its tail falls on the origin. So if they have equal magnitude and equal
direction, two vectors are exactly the same. Please remember that. So that's all for the introduction
to vectors. For most of you that's just a reminder, just a little bit of a refresher on vectors. And
now we can go on to using vectors in vector-based functions. And that's exciting stuff.
Any 주세요.
Okay.
The entire thing is that we have to do in the imagination of one which is 제품ator and commonly
is the tunnel web.
The pattern goes down a littlehun stems and is the tunnel.
