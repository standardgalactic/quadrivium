Let's become familiar with the mock data that we're going to use throughout this lecture
series. First of all we have our fancy style sheet there. You needn't do this. That's just
for me to get consistency through all of these lectures so that all these notebooks look sort
of similar. We're going to set up our Python environment. Those are the things that we're
going to import and the things that we're going to execute to expand Python's capabilities.
The first thing I want to do is to import NumPy and I'm going to use the abbreviation NP. I'm
going to comment out these lines. Now when I make these notebooks I just want to want to use
templates and then from these templates I just skip these lines by putting this little pound or
hashtag or hashtag or the pound sign in front of the of the line and that will comment out this line
and Python will ignore this line. So we skip down here to import matplotlib. That is a
plotting module. It has a sub module called piplot and I'm going to import that as the abbreviation
PLT. I'm going to import seaborne as SNS. All these as as as words you can use whatever name you want
but there are conventions most people stick to them so if we do share our code we all we all have the
same abbreviations. Now seaborne just extends matplotlib it just adds a few extra plots to the matplotlib and it
also adds a bit of eye candy. There's a lot more colorization and customization of the graphs that
you can do with seaborne. I'm going to import the very important pandas. That is what we use to play
with our data to reconstruct our data to get solutions and answers from our data sets pandas as PD and then
something I always do sometimes when you run these scripts there's not explicit error in the syntax of
the code the Python that you write but there's something that the Python interpreter or IPython does
not like and it will give you this ugly pink warning box and I like to ignore those. So from warnings I
import filter warnings those would be called filter warnings if I import something like this from
warnings import filter warnings filter warnings is one of the methods inside of the module or library
warnings so I can just reference the word directly filter warnings there I use it and I use this argument
whatever goes inside of these brackets behind the method is called an argument and I use the argument
which is in quotation marks in other words it's a string ignore. In IPython notebook you have these magics commands
percentage sign matplotlib so percentage matplotlib is one of them. Inline so there's no round brackets and
quotation marks as a space then in line that will render any matplotlib plots and seaborne plots for that matter right on the web page here it won't open a new window with the graph and sometimes you want that specifically if you want to save those to insert in a document that you want to submit for publication but in line is what we want here. Now I mentioned to you seaborne can really extend
your capabilities of plotting your capabilities of plotting graphs. This is not important for this course. Google seaborne. See what you can play with setting the style of seaborne, setting the context to a paper background, setting line widths. Certainly you don't have to do this you can just go with what the default settings for seaborne is.
So let's become familiar with our data. So let's become familiar with our data. The data set that we are going to use is MOOC underscore mock that's its name dot CSV. It's a comma separated value file that is one of the spreadsheet formats. Most spreadsheet formats can save your spreadsheet as a CSV file as opposed to its native
.xls.xlsx for Excel or the open document formats for LibreOffice etc. and numbers as far as the office suite for Apple is concerned. You can save your files as CSV. If it is a CSV file I have to use this method read underscore CSV and that is part of that's a code word Python code in the pandas
module. Because I imported. Because I imported import pandas as PD. I must say PD dot read. I can't just use read CSV. Otherwise I would have had to say from pandas import read CSV. Then I could just have used read CSV.
Oh, I have deleted some lines. Some code there. PD pandas dot read CSV. There we go. Pandas dot read CSV. Oh, there's another dot that has to go. And I'm going to read that as soon as it reads a data frame. It's going to import it inside of a computer variable, which I've
called data. That's called data. That computer variable data is actually a object and that object is a pandas data frame. Whenever you use read CSV, it becomes a data frame. This computer variable will become a data frame. Let's import it and we get an error. Why did we get that error? Because we never ran this block of code. We did not extend the Python language by running this block of code. Let's run that block of code.
And now if we go down here. And now if we go down here and run this, there would be no problems whatsoever. Now we need to see whether our data set was imported correctly. I've got the word data now. And so if I use data dot, let's do this. Let's write that. Data dot, if I were to hit the tab key, it gives me a list of all the things that is attached to data.
All the methods that I can apply to data.
So that it can work on the data frame. I just want to put three in there. Self, the self you can usually ignore. Don't worry about that. Three or n equals three. I can just put three there. It means please show me all the columns in the first three rows, please.
I just want to see if the data imported correctly. And lo and behold, there's the first three rows of our data. Again, Python counting from zero, one, two. So that's the first row, the second row, the third row. File numbers. Let's run through what our data set contains.
File numbers. File numbers. We don't want our patients to be identified. We have age, which might or might not be coded. In other words, we might have between yourself and all your investigators, you might say, we're just going to subtract five from every patient's age and then capture it here so that that de-identifies our patients.
Female and male, that's the wrong way to do that, remember. We want to de-identify that data as well. In other words, use codes. You would say use two, four, six, eight.
And the letters R, B, or C. If I entered any of those, that would be female. So we have the secret code behind the scene. For our purposes here, we've just put down male, female, male, female, et cetera. That's gender.
Delay. How many days before their symptoms developed until they presented to hospital in integer format? Stay. How long did they stay in the hospital before discharge?
Were they admitted to the intensive care unit? Yes or no? What was their retroviral disease status? Negative or positive? So no, yes, no. Did they have a CD4 count?
When you see something like NAN, that is PANDAS interpreting the fact that in the data set, in the spreadsheet, that was not a number. Not a number.
Then 57, so if it was left blank, or you said someone typed in not done, not performed, not applicable, anything other than a number, it would say NAN, not a number.
Heart rates, the admission heart rate, patient's admission temperature. If a CRP was done, and what the value of that CRP, a C-reactive protein, what the admission white cell count, the leukocyte count was, what the admission hemoglobin values were.
At surgery, was the appendix found to be ruptured? Yes or no? All the appendices were sent away for histological examination in the laboratory, and under the microscope, a call was made whether there was infection, yes for appendicitis, or no.
We took out a normal appendix. Was there any complications while the patient stayed in the hospital, yes or no? Wound infection, respiratory tract infection, urinary tract infections, bleeding, any complications?
We just coded as yes or no. And the mean Alvarado score, modified Alvarado score.
That is a scoring system where we predict whether a patient has appendicitis or not. That is our data. This is mock data. It does not belong to any true patient. These values were just thumb sucked to make this spreadsheet so that we can play with the data.
Now let's try and start finding out a bit more about our data set. Let's start playing around with it.
Now it's called data, and this is the way that we refer to a column. We use the name of the data frame, which is data, and with these square brackets, and then quotation marks, and then the exact name as it appears there.
You must use the uppercase G exactly as it's written there. Try never ever, when you do your spreadsheet, to have spaces. Spaces can cause problems.
But anyway, gender, just as it's written there. And from that, I put the dot, and then the method value underscore counts, open and close parentheses, but they empty. What does that do?
It will look down the gender column, and first of all, it will group everything that it finds. So female, male, there's a difference between those two.
If there was a spelling mistake, someone wrote males with an S, that will be deemed a different type of entry, and how many times that occurs will be counted.
So it's just going to count everything that it finds. Let's hit enter there, or shift enter, shift return, and we see it found the word male, 94 of them,
and it found the word female, 56. It didn't find anything else, so no one made a spelling mistake down that column.
Let's do value counts for some other things. So again, it's data, that's the name of the data frame, and the column.
So this and the whole thing together is how you refer to a column. There was an ICU column.
Do for me the value counts.
So it's dot, value counts. Once again, let me just show you.
If I were to write this, dot, if I hit the tab key, those would be what appears.
Now, value counts, unfortunately, one of those that do not appear.
You have to type out value counts.
It's not going to appear as a legitimate method for you to use.
But it is available. Use it all the time.
You can see, no appeared 136 times down that column, this ICU column, and yes, appeared 14 times.
14 patients went to the intensive care unit, 136 do not.
Let's look at the RVD status.
It's just for you to start getting a feel for your data, because how many patients were in this data set?
Well, let me click there, something nice to show you.
I'm here, and I can say, insert cell below.
It's going to do an empty cell below this.
Let's write data dot tail.
Give me the last three rows.
Oh, what did I do wrong?
It was not a proper write.
You cannot make spelling mistakes there.
Date dot tail.
So there's file 148, file 149, file 150.
So there are 150 entries.
150 patients were entered in this database.
So just to, if you were to print all of them out, which we can do,
you can just type in data, just data like that.
And it'll do all 150 there.
Well, it won't do all of them.
Within limits, it will skip the middle lot.
But you can't just look down a column of 150 values and sort of get an idea how many times things occur.
So this value counts is excellent.
Let's do the value counts for rupture.
At surgery, 60 were found to be ruptured.
90 were not, the appendix themselves.
When we send them away for analysis, it looks like 120 were taken out because, for the correct reason, they were inflamed.
And 30 were taken out.
No, they were normal.
And that's kind of par for the course.
These days we are a bit better at that.
That might be a bit high.
But again, this is just mock data.
80 did not develop any complications and 70 did.
So quite a high complication rate.
Now that's one way to look at our data.
Just value counts, value counts, value counts.
Human beings are much better with pictures, though.
So let's introduce the matplotlib.pyplot submodule, which I use the PLT, remember, PLT abbreviation for.
And we're also going to type, do an SNS.
Now look at the difference between these two.
The matplotlib.pyplot is quite a few lines of code.
I could write slightly better code.
But the SNS boxplot is a much easier syntax here.
It makes life much easier.
One line of code versus all this.
So let's just run through this boxplot very quickly.
What am I interested in?
I'm interested in drawing two plots.
I want to look at a boxplot of the age distribution in males and in females.
So I say PLT.figure empty there.
Inside of that argument, there's quite a few arguments that you can use.
Let's just do that.
If I were just to do that, you see all the arguments that it takes.
So you can play around with all sorts of things.
But if I leave it empty, all I'm telling IPython is please get ready to draw a figure.
I want to make two subplots.
I want to put male and female boxplots next to each other.
And so I would say PLT.subplot and you see 1, 2, 1.
And there's the other subplot, 1, 2, 2.
What does that mean?
It means draw it in one row, two columns, number one.
One row, two columns, number two.
So you're going to have this one row with two columns next to each other.
This is the way to do it.
Get used to it.
So subplot 1, I'm going to give it a title.
You can do it like this.
PLT.title.
Then the arguments is the title that you want to give.
Those are string values.
You have to put them in quotation marks, comma, font size equals 18.
What do I want to put in there?
The following.
Data.
Now, I'm using something a bit different here.
This is not purely matplotlib.
I'm using boxplot within pandas.
So I'm referencing the boxplot.
So I've created this plotting figure.
But I'm doing a boxplot as a method of data.
Data contains, remember, we just type data dot.
There's a lot you can do.
So data.
What do I want to do?
Take all the data gender column.
So I'm referring to that column.
Equals, equals, double equals.
Remember, that is an ask a question.
Is it equal to male?
When the answer is true, it'll take that row.
If it's not true, it won't take that row.
I want you then only the males to draw a boxplot.
But the column that I want you to do is the age column.
And we run through that again.
Now, this is not something I would normally use.
This is very laborious.
Look through that code.
It should make sense to you.
And there we draw one figure, two subplots, one row of them, two columns of subplots.
There is my boxplot of the male patients and of the female patients.
Very laborious.
Let's do it in SNS.
Seaborn.
Seaborn dot boxplot.
It takes a lot of arguments, but the ones I want to use is just take data and the age column.
So there's my first argument.
Look down the age column, and I want boxplots of that.
Comma, what's the next argument?
Group by.
So what do I want it split by the age?
Well, I want males and females.
And that's very easy.
I just say group it by data, gender column.
So that gender, the gender column.
Remember it found males and females, so it's going to group the ages by the gender.
And then I just want to give names to my plot.
You've got to be very careful which one comes first and which one comes second.
Okay.
Just note that you don't put the wrong title here to your two graphs.
But that's a much easier line of code.
Only the three arguments, and very easy to understand.
And look at those beautiful boxplots with statistical outliers even indicated for you by default.
Let's look at a violin plot.
A violin plot is something I use quite often.
I like a violin plot.
I've done a different type of violin plot here where I break them down into new, the data frames, into new data frames.
We'll have a look properly at how to do this with quite a few examples in this lecture series.
Let's just use, for purposes of this lecture, just this easy way of doing it.
SNS.violinplot.
We had SNS.boxplot.
Boxplot, now we have SNS.violinplot.
Exact same thing.
The data that I want, that's my age column.
Please group it by whatever you find in the gender column.
And give the names.
Exactly the same.
You'll see in both instances I use this semicolon.
If I don't use the semicolon, let's not use the semicolon, it's going to write this line of text there and then draw your plot.
The semicolon just gets rid of that.
You just get your graph.
And there's a violin plot.
Violin plots are kernel density estimates on their side.
So you can kind of see a much better idea of how the spread of the data was here.
Between 40 and 50, there was a bit more females before it went down and that sort of notch doesn't really occur here in the males.
So you get a much better idea of how your data was spread than just from a bland old boxplot.
I really like violin plots.
Speaking of a kernel density estimate, that's called a distplot.
So sns.distplot and now unfortunately this is not going to work because here I am referencing these two new, let's take out the comment line, take out the comment line, these two new data frames that I made.
I said create two new data frames.
They would both be, both these computer variables will be data frames because they are constructed from other data frames.
What data frames are they constructed from?
Well, from the original data one, square brackets, the column that I'm interested in equals equals males.
It's going to look down the gender column of the data data frame and when it finds male, it'll put it inside that row inside of male.
It'll run through the whole lot and only put males in this new one, only put females into this new one.
Run that.
Now I can reference these male age and bins.
What does that do?
Let's have a quick look.
There's a distribution plot.
So it's just going to make these bins of ages.
See those little bins?
So between that age and that age there were so many.
And then it also draws this beautiful smooth curve, which is basically this curve that you see here just on its side.
Same for the females I can do there.
There's another thing I can do.
I can S and S and S set style white.
So I'm only going to have a white background because there's a bit of a problem with the overlap of all these lines.
So I'm just changing the style.
Let's just redo the female.
The bins still 10.
What does that 10 mean?
It has to decide how wide this is, from what age to what age falls inside of one bin.
So you can give it the size of bins, whatever you like, but I'm just going to say kernel density estimate equals false.
It's another type of argument I can put in there.
If I ran that code, we're going to have a beautiful white background by the style that I set.
And this kernel density estimate is gone.
Now I only get, I only get this little histogram to tell me how many, and you can see we've also changed from a fraction.
This fraction will apply to this kernel density estimate, the area under the curve, which we'll have a lot to say about later on.
But it just gives me a normal histogram.
So these are normal ways just to get familiar with your data, to play with your data, and just to see what is my data set all about.
What is inside of there?
These are common tools for you to use to become familiar with your data set.
