In the next few videos, I want to introduce you to JuliaDB, the database structure inside of Julia.
You might have been using data frames before, but you have an alternative here in JuliaDB.
Here we have the website. It is juliadb.org, and you can read a little bit about this
new data structure inside of Julia. As it says here on the website, batteries included,
you can really import CSV files, create your own data, work with that data, very easily join
databases, many of the things that you would really expect of a database structure.
So I've created a new Julia notebook here. It's a Jupyter notebook, and you see I'm using Julia 0.6.2.
I'm going to click on title. Let's call this JuliaDB and rename, and it is now saved.
Noting that I am saving this notebook in the very same folder as which I have my CSV files,
and in later videos, we're going to get to that. First of all, let's change this first cell into
just markdown. It's very easy to do escape, enter, or return, and now suddenly it's a markdown cell.
I'm going to use markdown one hashtag or pound sign for h1 html type heading, and it's just type Julia DB,
and I'm going to hold down shift and enter, shift return, depending on whether you're on a
PC or Linux machine or on a Mac. Now, let's import some packages that we are going to use in this video series.
I'm going to say using, and of course, the first one is Julia DB. Now, I'm trusting the fact that
the three packages that I'm going to use, that you have installed them with a pkg.add inside of,
just a REPL inside of Julia. So I'm assuming that you have added these packages. So it's Julia DB
distributions. And the last one we're going to use is online stats. So if you haven't added these,
please go into your REPL and do pkg.add. Don't do it inside of a notebook. I'm going to hold down
shift and enter or shift and return. And there we go. All three of my packages have been imported,
ready to go. Now, the first function inside of Julia DB that I want to show you is the table function.
We can create tables as you would expect in a normal database. I'm going to hit escape,
enter or return again. Now it is a markdown cell. Let's do a size two heading. And I'm just going to
say the table. And I'm going to just put this little, it's on the top left hand side of my keyboard,
a little apostrophe there. And I'm going to say the table, open and close parentheses,
hit that little apostrophe again, the table function. And when I hit shift, enter, shift, return,
you can see by doing that inside of your markdown, it looks like code that you've actually written.
So if you do these markdown cells, you can make it appear like code if you use those, those little
marks. So the table function, there's a few ways in which you can create a table. I'm just going to do
it manually before eventually we just import a CSV file. So let's make some computer variables to
hold the list objects. I'm going to call my first one ID and I'm just going to use the collect function,
collect function, open, close parentheses. And what I want to do is collect values one through 10. So
that's just going to be one, two, three, four, five, six, seven, eight, nine, 10 in a list.
Semicolon to suppress the output to the screen. And I'm going to do an age. And let's just round
these off. And the way to do that, I'm going to use the round function. Do I really need to,
because I'm going to use integers. So I've got to put the dot, that means every single element in a list,
that function is applied to each of them. Let's make them integers, eight, eight bit integers at
least. And I want a random set of normal values. And I'm going to do 50 comma 20. So that's a normal
distribution with a mean of 50, a standard deviation of 20. I want that taken at random from a normal
distribution. And I want 10, 10 of those please. Again, I'll hit the semicolon to suppress output to the
screen. So what have I done here with this round dot function? So the rand normal 50 comma 20, the
mean of 50 and the standard deviation of 20, that's going to give me a set of real values,
10 of them as I specified here. But I want to round them those off to eight bit integers.
And so I'm going to specify the integer eight here as my type. And the round dot, as I said,
the dot notation means I'm going to round them off each one of the elements.
So I've got to put that dot there. Shift enter, shift return. And I've got my two, I have my two
lists there. Let's just make sure perhaps what their length are just to show you that indeed they
are, you know, there are 10 of them. So let's look at ID, the length of ID. Let's look at the length of
age, my age variable there. And I see 10 and 10, 10 in each. Let me just show you what the type,
the data type of these are. So I'm going to say type, type of, and we're going to look at ID
and comma, let's do type of age. Let's have a look at that. We see, as we expect with the collect
function, it's a six, the 64 bit integers and an array one dimensional and an array of eight bit
integers for the age variable. Now here comes the magic. I'm going to create a table. Let's call our
table table underscore one. So our first table, and I'm going to use the table function,
table function, open, close parentheses. Now the first, first method of doing this is just to list,
just to create arguments. So this is just arguments of all these lists that I want to add to my table.
So I'm going to do ID and age. And then I'm going to use the names keyword, the names keyword argument,
and names, and that goes inside of square brackets. And we're going to use symbol notation. And that will
give us column names, column headers. So I'm going to use symbol notation, which means as colon ID, comma,
and colon age. Let's do that age. And there we go. We've created table one. And look at this,
it says a table with 10 rows and two columns. I have as age, the 10 integers I have there and the idea,
at least in the age, the 10 random integers that I have. And we've created these column headers called
ID and age. Those are the names that I passed with the names keyword argument here. And we'll just see
these list of arguments. To start off with, those would just be these random lists that I'm importing,
or at least those random values that I'm importing. So that would be one way to create an easy way to
create a table. Now let's just extract one of the rows. And the indexing works exactly as you would
expect in Julia. Julia DB was created with Julia. So there's going to be nothing, nothing different
there. So let's say we take subject number three, I'm going to call that subject underscore three.
And with that, we're just going to use table one, table one. We've spelled table in a very weird way
there. Let's, let's correct that. That looks just a bit awkward. Let's do that. Table one,
going to recreate table one. There we go. So that when we have table one here, at least it doesn't
look too bad. Table one. And we are just going to use the square brackets for indexing. And now I have
subject three, and we can see the subject three had two variables, ID and age. And the ID was three,
and the age was 39. In my instance, at least this means I can extract if extract some information.
So I could say subject three dot, and with a dot notation, I can refer to one of the column headers.
So just look at the age. So subject three dot age, and it'll give me back 39. So imagine I had
multiple, multiple columns. It's easy to get back the value of any one specific
subject in that table, or row at least in that table. As far as indexing is concerned,
I can be easily just say table one, let's do, let's do three, two, five. And remember,
those are going to be the rows. So I see row three, four and five, inclusive of three and five. So
what if we don't want three to five, but we just want three specific rows back. So let's do table
one, table underscore one, and a list of the rows that I want back. So I've got to use another set
of square brackets. And I want rows three, five and eight. And now I see I'm going to see ID three,
five and eight there because that was row three, five and eight. I'm just going to copy and paste
from my second screen here table two that I've created. Let's have a look at that table two.
And table two was generated slightly differently in a number of ways. So instead of creating the lists
first, I'm just creating them one after the other as arguments separated by comma. So collect
one to 10 again. So there'll be one, two, three, four, five, six, nine, 10. The second is a list of
characters here, which this Roman numerals, strings, then if you want inside of quotation marks, so
you see them there, then I'm going to take again, I'm going to take 10 random variables from a normal
distribution with a mean of 16 standard deviation of four. And I'm doing round dot again, because I want
to round each of these. And this time I'm specifying that I wanted to have one decimal place. Second
set of normal distribution data point values with a mean of 12 and a standard deviation of three.
And for my names argument here, I'm going to list the column headers in symbol notation as ID,
group HB and WCC. And this time I'm introducing something new, a primary key. And I'm just identifying
a single primary key. Because remember, I can create tables. And if I have normalization,
there could be another key with another another table with another set of variables, but with the
same ID. So later on, when we join these, we can join them or do searches according to the primary
key across multiple tables. And that's what we want. So there we go, we have table two here,
we see the ID one through 10, we see Roman numerals, therefore group HB, we see see note that there's
just one decimal place and one decimal place. So we see columns three and four, there's HB and WCC.
So that's a nice table. Let me show you another way just to create a table. So the first and the
second was basically the same. But instead of, you know, just importing already created list,
I can create the list inside of that. But the second example at least showed you how to specify
one of the columns as a primary key, and you can specify more than one. So here we have, let's create
table three, and again a table. And I'm going to use the columns function, the columns function in this
instance. And with a columns function, I'm just going to use the names of the columns. And that is not
symbol notation. So I'm going to say ID equals the ID list that we created before. Let's create the second
one called CRP. And the CRP, I'm going to do the round function again. So I've got to do the dot
notation because I want it to be rounded. Each one of these I wanted rounded. And I'm going to round to
16 bit integers, 16 bit integers. And I want random values from a normal distribution, from a normal
distribution with a mean of 100 and a standard deviation of 20. And I want 10 of these. I'm going to move
along because I also want to specify a primary key. And this time I have to use the ID symbol.
And there we go, a new table. And I've used this time I've used the columns function as as one of
the arguments for the table function. And when I do these, I use I use the name of the column not in
symbol notation, just purely the names that you want the column to be specified and then equal to the list
that you want it to be outside of the columns function. That's where the closing
parentheses are. Outside of that, I'd specify a primary key. So in short, that's some ways to create
tables inside of JuliaDB. In the next video, we're going to start looking at proper ways of selecting
some of the rows inside of our table.
