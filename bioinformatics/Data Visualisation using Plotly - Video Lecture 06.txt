Now this is a very exciting lecture, a very exciting notebook that we're going to look at.
We're going to visualize data. This is one of the richest things we can do with data as human
beings. We can look at data and understand so much of it if those plots and graphs are correctly
created though. Now there are many plotting packages in Python. We really have this embarrassment
of riches. Matplotlib, perhaps the biggest of all of them. We also get Seaborn for statistical plots,
many others. The one that we're going to look at is called Plotly. Plot, L-Y, Plotly. You can go on
their website and learn more about all of the graphs that you can do with Plotlib because I'm
only going to show you a few. There's such a rich package that we can create so many plots. So we're
barely going to scratch the surface here. There's just too much. We'll be here for months if we look
at all of those. So I'm going to show you the basic ones, the most important ones. And remember,
you choose the plot by the type of data that your variable has. Data visualization number 06,
notebook 06. So let's look at the packages that we're going to use in this notebook.
We can use pandas as always. So we're going to import pandas as pd. And then we're going to import
Plotly. Now Plotly has many different modules inside of them and they approach how we generate these
plots in all in a different, a slightly different way. So the two that we're going to import here is
graph objects. So import Plotly.graph underscore objects. And we're going to do that with a
namespace abbreviation, GO for graph objects. Plotly.express. It's a fairly newish module and
makes it very easy, very easy to plot from a data frame object. So Plotly.express will import that as
Px. And then Plotly.io will import that as Pio and we'll use Pio immediately
using the templates.default property there. And we'll set that equal to Plotly underscore white.
There, that's a theme. And there's quite a few themes that you can find. So let's just
run this as well. And so that we import that because I just want to show you Pio.templates.
If we just say Pio and we use the templates attribute there, we see we get the default,
which is Plotly white. And I've set that as the default. You also have ggplot2, seaborne,
simply white, Plotly, Plotly white, Plotly dark, presentation, xgridoff, ygridoff, gridon, and none.
So these are different kinds of themes that you can do. Many people like to code with a dark or black
background. And you can do that right inside here of Colab. You can set this to a black background
and white text. And if you want to do plots there, then set it to a Plotly dark there. And your plots
will be, will have a nice dark background. But anyway, I like the white background. It's just easy
for us to see when we do this. Now, if you are doing this on a Mac, so suddenly when I run,
use Colab on my Mac, that's a retina type display, there is this magic percent config. And I can say
inline backend dot figure underscore format equals, equals, or equals retina, retina as a string.
And if I do that on a Mac, then those plots, specifically format plot lib, is going to be much
crisper. So this is on a Windows machine. I only want to record HD quality. And so I'll run that cell,
but this is not a Mac. So that's not going to really work for us. But in case you are using a Mac,
run that cell. And then of course the percent load underscore XT, google.colab.data underscore
table. Remember that's just for us to have these tables printed out nicely on the screen.
And then as before, with the two previous notebooks, our spreadsheet lives inside of our Google Drive.
So we're going to do that drive function. So let's import our data. As always,
we have to mount our drive. It's going to open a separate tab. We're going to log into our
our Google Drive once again. And we're going to copy that security code. And we're going to
paste it in here. And then I've got the percent ls. And that's Linux for, you know,
just show me what's inside of this folder or directory, list what is inside there. We'll have
that as well. So I'm going to log in and I'll see you on the other side. So we're going to import the
customers.csv file, a spreadsheet file there using read underscore csv, that function from pandas.
And we assign that to our computer variable df. And then there's an australia underscore rain.csv file.
Also going to import that. And I'm assigning that to the computer variable rain.
So we have two data frame objects here. So let's just look at the first one, df.
And we'll see some data about customers. We see an index there and then attrition underscore flag.
And you see existing customer, attracted customer. So these are customers that left
the financial institution. So customers that were lost. This is the kind of data set where we might
want to build an AI model, a machine learning model to predict what customers are going to leave
for the banking institution. For instance, we see age, how many dependents they have, the education
level, the marital status, the income category, etc. So quite an exciting data set there as far as
customers are concerned. So first of all, some attributes, shape attribute as always. We see we
have data on 10,127 customers and we have data on 14 variables. Let's have a look at those variables
using the columns attribute. And we see all of them listed there. And then perhaps more importantly,
we see the dtypes. We want to know what data type pandas things that these variables are in. And
remember, this is tidy data. Always remember when you have your spreadsheet, it's got to be tidy data.
So I want to introduce you to a new method called the info method. We've never seen that one. But what
that's going to do is just give you a little bit more information. It's still going to give you
all the column headers or my variables or 13 of them there, 14, I should say, and then non null.
And we see all of them 1127. They're all there. So there's no missing data there. So we get that
little extra piece of information. We show we get to see how much memory takes up 1.1 megabytes of
memory in our system and then obviously the dtype there as well. So I do remind you go to the Plotly
website. You can click on it there in the notebook. And there is a lot more. But let's just start
introducing ourselves to Plotly. So the first type of plot we're going to do is a bar plot. Now a bar
plot is a frequency plot. It's going to count how many times each sample space element
occurs. And we use a bar plot for categorical or discrete data. Categorical or discrete data.
So if we look up here and we look at attrition flag, that was an object. So that's going to be
categorical data. So let's just look at the value counts methods. I'm going to say DF dot attrition
underscore flag. So I can use the dot notation there to get to that column. And it's going to express that as
a panda series. And on that I'm calling the value underscore counts method. And remember,
I'm not putting normalize equals true as an argument. And so it's not going to give me the
relative frequency. It's going to give me the absolute values or the frequency. So 8,500 existing
customers and we lost 1627 customers. And that is ideal for creating a bar chart. Because every bar
must be a bar for a sample space element in a categorical or discrete variable. That's what we
use a bar plot for. So let's create this bar plot. And once again, as with most of these things,
it looks a bit complicated when you start. And on top of that, there's more than one way to go about
this. So let's do it this way. First of all, I'm going to create a computer variable. I'm going to
call it churn underscore fig. Remember churn, churning means losing customers. So churn underscore fig.
And I'm going to set to that an empty figure from the graph objects module in the plot.ly package.
Remember, we used the namespace abbreviation geo. So geo dot figure. And that's just going to create
an empty figure. And now we're going to have to add some some color to this figure, some information
to this figure. And for that, we add what is what are called traces. Trace is this thing on inside this
empty graph. So we're going to say churn underscore fig. That's our computer variable that holds an empty
figure object, a plotly figure object. And I'm going to use the add underscore trace method on that.
So what is it that I'm going to add to that? What traces I'm going to do? I'm going to add a bar chart
to that. So go dot bar. Now, what you've seen me do here also is use a lot of spacing. And when I create
graphs specifically, I like to do that. So what I'm going to do here is I'm just going to retype the code
just to show you because the first time you see this, it also looks a bit weird. So I just want to
show you how this works. So if I were to say churn underscore fig, and I'm going to set that to go dot
figure and f i g u r e and open and close parentheses. Okay, I've got my empty figure figure object there.
I'm going to say churn underscore fig. And then I'm going to do the add trace. So add underscore trace
and open my parentheses. And there's going to be automatic closing parentheses there. Now,
what I want to do here is not to start typing the arguments here, I'm going to press enter or return
because I want to list all the elements separately. Okay, so I'm going to say what I want there is a bar
chart. So it's already slightly different from you can see from the cell above. Okay, so a bar chart is
what I want to add to there and look at the tooltip that comes up that shows me all the different
arguments that I can pass just phenomenal. All these things, you can use all of them to change the look
and feel of your graphs. But I'm going to press enter or return once again, so that I now can list all
of these on my x axis, I want the following. So my x axis, I'm going to have two separate strings. So
I'm going to have my first one is going to be existing customers, and then lost customers. So
excuse me for copying and pasting this, I'm going to say Ctrl C. And so let's just go there and say
Ctrl V. So I'm going to have these two. And then on my y axis, also a Python list. And my list is going to
be 8500. And what was our other value 1627. 1627. So the reason why I do that, why I like to put things,
you know, with all these spaces, and not just start typing, as you could see there, there's so many
arguments that you can pass and it goes off the screen. And that becomes very difficult to read.
So I like to use this spacing. So let's run this and we see what it looks like. Now this was done very
manually. I typed in these values that I want to see on the x axis. And I typed in how high those bars
were going to be. So let's delete this one. And this is the one we have now simple bar chart. So
let's put a little code comment there for ourselves. Let's say simple bar chart. There we go. And if I
could spell simple, that'd be very nice. Now, it is a bar chart. And it indicates that this is a categorical
variable by one neat little visual cue. And that's the fact that there are, there's a big space between
the two bars. If you look at a bar chart, and if you look at a chart, and you see these bars and these
spaces between them, immediately that must denote to you, and hopefully the person who created that chart
knows what they were doing. But that's a visual cue that we're dealing with a categorical variable.
And it's a frequency chart. We're just showing a count, visually showing a frequency or count of
the sample space elements of a discrete or categorical variable, purely because it has this little space in
between. Now look at this. Why I love Plotly is because it's very interactive. When I hover over some
of these bars, immediately it comes up the existing customers, 8,500, and their lost customers,
comma 1625. So it's very interactive. And you actually see a bunch of things here at the top
that you can do. I can save this plot to my internal hard drive or to the cloud here as a PNG file,
because I might use Microsoft Word or Google Docs, and I'm writing a report, or use some PowerPoint,
whatever. And I just want to take a static image of this and put it in my report, you can just do that.
And there's all sorts of other things. And when these charts become more complex,
I'll show you a little bit more about that. Now let's just look at education level. For instance,
let's look at the sample space elements of the education. We'll see, we see uneducated,
graduate, college, unknown, high school, postgraduate, doctorate. And if we use the value underscore
counts method, we're actually going to get a count of all of these. So that might be something we want to
chart. But now they're too many. I don't want to type in all of those values. And I certainly,
neither the actual sample space elements or the frequency. So I've got to be a bit verbose with
how we go about this. As I say, that's this one way. And I just want to sort of build it up from
from one side, climbing this mountain. So what I'm going to do is I'm going to take this
df.educational score level. So that series called the value counts. And I want to save the values.
So there's a dot values attribute to this value counts. So dot values. So that's only going to be
the values. And then furthermore, I'm using the to list method on that. So the values attribute and
then the to list method. So that's going to convert this for me into a Python list. And remember,
when we did that plot, the x and the y, we passed those as Python lists. So now I can see the list
of values there. So all I want now is these, the actual names there, graduate, high school, unknown.
So the way to get to those would be df.educational score level. So that's the pain in the series,
calling the value counts argument, value counts method on that. And then instead of the dot values
attribute, I'm using the dot index attribute and then to list. So it's going to convert that series
into a list. I've assigned that to the levels computer variable. And now we see a list of those
strings, graduate, high school, unknown, uneducated, et cetera. Because now when I create my chart,
it's a bit easier to do one step easier, at least, and that we don't have to manually enter all of
that data. So I'm going to create another figure. I'm going to call it churn underscore figure again,
and call it something a bit better. Anyway, go dot figure and empty figure so that we can call this
add trace method on our figure. And to that, we're going to pass a bar chart. So go dot bar. On x,
I'm going to have this Python list, which are all my levels. And on y, I'm going to have totals.
And now you see something new, a marker. That's one of those plenty, plenty arguments we can use as
the marker. And I'm going to run this code and you'll just see what it does. But see what I mean
by it goes off the side of the page. And anyway, what I'm going to do is pass a dictionary to this
marker argument. And I'm going to do a color and a line. So color, colon, and then a whole list of
colors. And what I'm doing here is every bar is going to have a slightly different color.
And the colors that we're going to use, we're going to represent in this way. First one is just going
to be red. I just use the red keyword there as a string. And then I'm using this RGBA. RGB is red,
green, and blue. And A is for transparency. So it goes from zero to 255. So I'm going to have 50 red,
50 green, and 50 black. And that's going to give me quite a darkish gray. And then I want it to be
50% transparent. And the next bar and the next bar. So all I'm doing here is the building up specific
colors. And then the outside line of each of the bar, I want that to be color black and with one also
passed as key value pairs in a dictionary. So very overwhelming, but you'll soon get the hang of it.
So there I've introduced different colors to each of these. It still indicates to me that this is
categorical variable. And at least in actual fact, it is because we've got those discrete sample space
elements, don't we graduate high school, and we can see the majority of the customers here were
graduates. So let's add another little element. So this time, I'm going to use this exact figure that
I'm still busy with. And I'm going to add to it a brand new argument, a brand new method. So I'm still
with churn underscore fig. Now I'm using the update underscore layout and update underscore layout method.
And to that, I'm going to have a keyword called title. And I'm going to say title equals. And now I put in
a nice string, a number of customers, customers in each education level. And then I'm using the dot show
method there. So I'm still using that same figure. But this time, we've added a title and we can see the
nice title above there. By the way, I didn't mention it before. But you can clearly see the black outline and
the different levels of gray that I specified for each one of these. So let's add a little bit more
to our figure. So it's still churn underscore fig, still the same figure. Again, update underscore layout
that method. And now I'm going to have x axis and y axis as my two arguments. So I'm going to say x axis
equals, and instead of parsing a dictionary, remember way back when we first looked at Python, we can also
use the dict function. So I'm going to use a dict and I'm just saying title equals education level.
Remember, if I passed curly braces to it, I would have had to have both title, title would have had
to be in quotation marks, and then there would be a colon and then education level. So you can do
either of the two ways of doing a dictionary. And then we're going to call the dot show method again.
And now it's added also these x and y values, x and y axis values, education level on this side,
and counts on that side. And again, it's quite interactive. When I hover over each of these,
it's going to show me the exact value. So we interactive. And again, I've got all access to
all of these things that we'll see a little bit later. So let's just do something more just to show
even more of the properties that are available. So I'm going to overwrite my churn underscore fig.
There we go. It's a go dot figure. So let's add a trace. And the trace is going to be a bar,
x is going to be levels, y is going to be totals. And then I'm saying text equals levels. I'm going
to see what that's going to do. And then text position equals outside. Marker, I'm going to
have the color. So this, I'm setting this all as, as you can see there, as a dictionary. And
one of the key element, key value pairs, the value even is even a dictionary. So a dictionary inside of
a dictionary. So you just have to keep your wits about you. So color, colon, deep sky blue. So they're all
going to have the same color. The line is going to have a color of black and a width of one.
And then opacity is going to be 0.9. So yet another way to do that. I'm going to update the layout.
So churn underscore fig dot update layout. I'm going to add a title. I'm going to do another update
layout. I could have done all this in one, but I'm going to have an x axis title. I'm going to have x
x axis underscore tick angle. And I'm setting that to negative 25. And on the y axis, I'm just going
to have the dict of title. And then we're going to show the plot. So let's see all the things that
happened. So really a bit overwhelming, but I'm going to show you what's available. So first of all,
you see, we have categorical variable. We can see that because there's gaps between.
Now, remember when we said text equals levels, let's just set these actual values on top of all
the bars for us. And then the text position outside. So that's just going to write it just outside or on
top of each of these. And we can see the color and the outline as well. And then the tick angles,
we set to 25 degrees. And you can do that, you know, in case those words are too long and they start
overlapping with each other. You can add a little bit of a tick angle there. So you can see there's
so many things we can start adding to this and make it a really compelling chart. So let's do one more.
And in this instance, we've still got y's levels, x's totals, our markers there, but our orientation
is our new one. And we set that to h. And you'll see I've swapped around my y and my x axis,
because what's going to happen now is that we're going to have a horizontal bar chart and change
the color to orange as well. And when you have very long sample space elements, it's better to do
horizontal. So those, you don't have to put those words at an angle because that always looks a bit
amateurish. I don't know, I don't like it anyway. So those words are too long, the sample space elements
in my clever article variable there. I like to do a horizontal plot.
Great. Let's have a look at the cross tab. Remember that pandas function, pandas.cross tab,
it's going to create a contingency table. And we do one categorical variable against another. So we're
going to do attrition flag and education level. And we're going to set that as a contingency table. Let's
have a look at that. And there we see college, doctorate, graduate, but for each of my two customers,
the customers that we've lost and the customers that have stayed with us. So let's do levels as
attrition underscore edu columns dot to list. So we're using that to list. And this is what it's
going to give us. Remember, that's just going to give us again, those levels as far as all of these at
the top are concerned. So remember, the attrition flag is the one that goes on the left hand side,
that's the first one, and the second one that you mentioned there that goes across the top.
So if I call that the columns on this contingency table of mine, what it's going to do is going to
go across that top. And we did that as a two list. Now let's have a look at this. What I'm going to
extract from my contingency table now is the following, the attrition values and the existing
customer values. So I'm going to say from this little contingency table that I have, which is
actually just a pandas data frame, I'm going to use integer location. So I lock, I want the first row,
all the columns, and I'm going to do that as a list. So I pass the to list method there. And what that's
going to give me is all these first values, 154, 95, 487, 306. And if I do the second row,
that has an index of one, all the columns, that is going to give me that second bunch of values.
And you can go through all of this code. But let me show you what it comes out as. Because what we've
done here, if you look at this, we see that we've broken it up by lost customers and existing
customers. So how did we do that? Let's go back. I've created my empty figure. And I've added two
traces to that. See, there's a two to add underscore trace and another add underscore trace. So I've done
it twice. Both of them are bar charts. And the first one is levels and values. And the text is the
attracted values. And here we see the Y's existing values. And my text is existing values.
And outside there, I've put on the outside the actual values, not the the sample space elements.
So you can see very nicely, a very intuitive plot. I get a lot of information from this plot. I can see
that the graduate levels was the most and what education level of my lost customers while graduate
was also the the highest there. So yeah, I will I will totally agree with you very intimidating when
you start creating these plots. I'm going to show you, you know, how to do it slightly easier. But I want
to throw you in the deep end here just to show you what is possible, what control you can have
over your plots. And when it comes to bar plots, though, I would say, you know, you have to extract
the values that goes into your bar plot. Some of the other plots, you don't have to do this.
It automatically just is taken out from the outdated frame. But here with, with, with bar charts,
you really have to do this almost by hand. And I just want to show you, we added the two traces,
but why are they next to each other? That's in this update underscore layout, we have this bar mode,
and we set group, and that's going to group them together. So for both sets here, lost and existing
customers, we see them right next to each other. One other thing I want to show you, what I do love
about Plotly as well, these legends on the side, they're totally interactive. So if I click on lost
customers, it disappears from the data set. And now I only look at the existing customers,
I can bring them back, and I can take away the existing customers. Now I only see the lost customers,
very interactive type of plotting, and that's brought you by Plotly. So I've got a little advanced
exercise there for you. It might take you a little bit, but I've given you the whole solution there if
you, if you want to have, have a look at it. So next up, we're going to look at histograms. Now histograms
also going to give us this idea of a frequency count, but we're not going to see any gaps between
the bars, and that's going to indicate to us that this is a continuous numerical variable.
And as I mentioned before, I'm going to show you a slightly different way, and this time we're not
going to use the geograph objects, but we're going to use Plotly Express. So what I'm going to do here,
look at that, it's just much, much less code for us to write. I'm going to call my little figure
age underscore hist, a histogram of the age. So I'm going to say px, remember that's the namespace
abbreviation for the express module in Plotly, Plotly.express. And it has a function called
histogram. And all I have to pass to it is the data frame that contains my data and the variable
that I'm interested in as the x. So x equals customer age. And then I'm just going to call
the dot show method on this plot. And immediately, much simpler code, we can see a distribution
of the ages of all our customers. And we can see it's what we would call a normal distribution.
It's this bell shaped curve. So most of our customers was here. And we can even hover over
each of these little rectangles because they're just long, thin rectangles. And what it's going to
show us there is the count of each of those. And as you can see here, Plotly decided by itself
what the bin size is going to be. It decided what would be optimal. And what we can see it decided
the bin size is going to be is just a single age. So of customers age 38, there were 303 customers.
Of customers age 40, there were 361. Customers 42, there were 426. So it decided the bin size should
just be one. So just counting each of those values. Now we can bring a little bit more information to
that with something that I don't use too often, but a stacked histogram. And for a stacked histogram,
we're going to use the color argument. And it has nothing to do with choosing the actual color.
So let me show you. I'm going to do age underscore hist. So I'm just overwriting my computer variable
to that I'm passing this histogram object from Proto Express. So px dot histogram. First of all,
I'm telling it what data frame it comes from. On my x axis, I'm going to have the customer age,
but now I'm going to group it by one of my categorical variables. And that is the attrition flag.
And the keyword argument for that is color. So not the actual color, but how I want to group this
this plot by. So I'm going to group the ages by the attrition flag. I'm going to give it a title.
I'm going to give it an opacity so that it shines through a little bit so that we can see the two
the two separate sets of values. And then I'm going to add a marginal plot. And that's one of the
nice things in Plotly. We can add other plots on the margins of our plot. And what we're going to
do is a rug plot. And I'll show you what a rug plot looks like. So let's run this cell.
And there you go. We can see both of those on top of each other. So the Triton customers and the
existing customers. Now, if you look at that, the red ones are the Triton. Remember, they were
much smaller number of those. So it's stacked on top of each other. And that's why I really don't
like a stack because now it looks like this see-through red there. You know, you've got to
sort of see what the difference is looking towards the left between the top and the bottom of this
little pinkish, well, it's just a 70% opacity red there, you know, what the top and bottom of those
are. Fortunately, with Plotly, I can just hover over those and I can see, you know, see the actual values.
Anyway, the rug plot there is just, if we look at all the edges at the bottom,
each one of these marks would be one of our customers. And then many of them are on top
of each other. So you see some are a bit broader than others, but it also gives you some indication
of all the different customers. So that's one way to go about it. Let me show you this way.
Or what are we going to do here is just to change, actually just change these. So that customer underscore
age that was taken from the column header. Now that doesn't look good at all. So the way that we would
change that is using this labels, labels there. And with labels, we pass a dictionary and we say
the key value pairs. So customer underscore age, when you find that in a plot, please change it for me
to customer age. So that's certainly going to help us out as far as this is concerned, just to give us
that slightly better look. So we have customer age that looks a little bit better. And when we look
here, we'd had attrition underscore flag that now has customer group, because here I said when you find
attrition flag, please change it to customer group. So it just looks a little bit neater.
So let's have a look at this one. We're going to do sort of the same thing, but now we can use a graph
object instead of an express plot. So I'm going to say h underscore hist. I'm going to say go dot
figure. That's a blank figure. And I take that figure and I do the add trace to that. And what
do I want to add? Well, I want to add a go dot histogram. That's an uppercase h. And on the x-axis,
I want df dot customer underscore age. As simple as that. So here with the histogram, I really don't have
to worry about extracting all of these values as we did for the bar chart. Clearly bar charts take a lot of
work. But as you can see here, we get back the exact same thing. We get the exact same thing.
The thing about this graph objects, though, I can really create a much finer way of doing this.
So, you know, each trace I can design separately. You have given each of them a name. I've controlled
the bins. So I've got an x bins here. I'm passing a dick to that. I wanted to start at 25, end at 80,
and I want the bin size to be 5. And then for the attracted customers. And how do I get these
customer ages, by the way? I'm using conditionals. And I think you're pretty well familiar now what
these conditionals will do. And then in the end, I've got this bar mode equals overlay. And I've set
update my traces as another method there. And I'm setting the opacity to 75. And let's have a look at
what all of this is going to look like. So there we go. Now it is no longer stacked. It's just an
overlay. So they both start at zero at the bottom. But everything else, you know, I can still decide I
only want to see my existing customers. I only want to see my lost customers, etc. And look at these bins,
they're quite a bit broader now. And when I hover over these, it'll actually show me it goes from the age
of 35 to 39. And there's 1124 existing customers there. But if I hover over the lost customers,
again, the age of 35 to 39, and there's 177 in there. So quite a lovely thing to do. And there's a
little you can click on there if you want to read much more about histograms. So next up, we're going
to look at box and whisker plots. Now, if you page through a journal, read a journal online, you're going
to see a lot of box and whisker plots. They're really very neat plots. They give us a lot of
information. And it's all about the distribution, as a histogram is, about a continuous numerical
variable. So let's have a look at these box plots. I'm going to create a long computer variable there,
ages underscore churn bar underscore box underscore px. So this time, I'm going to use Plotly Express.
And I'm calling the box function there. First one, first element, first arguments, my data frame on my
x axis, I want attrition flag. So remember, I had my customers and my lost customers. On the y axis,
I want the ages, please. I'm giving it a title. And I'm changing some of the labels. So I know it's
going to do customer underscore age. But instead of that, I just want age. And I know it's going to do
attrition underscore flag. And for that, I just want customer group. And then I call the dot show method.
And let's have a look at a wonderful box and whisker plot. So there we go.
So because we've set x as the attrition flag, remember, that's a categorical variable,
the two sample space elements, existing customers and attracted customers. So it's going to do that
for me. And then I've put the change, the label to customer group here. And from customer underscore
age, we put the age there. So we see the age range there. And we see this box and whisker plot. So
what's a, what is a box and whisker plot all about? Very helpful. In Plotly, if I hover over there,
it's going to tell me what all these lines are. So we start right in the middle of my box there.
That's the median and the median for our age of the existing customers of 46. And then the top and
the bottom of the box, that is the quartile one and quartile three for the bottom and the top.
And you can see the quartile one is 41 age. So quarter of the customers, they were younger than 41.
And quartile three, three quarters were younger than 52. And then you see the whiskers and the whiskers
do something a little bit different. Because you can see on this side, I have the two little dots there.
And on this side, we don't have dots. Those dots are statistical outliers. Now,
how do we decide on statistical outliers? Now, first of all, on the minimum side,
there seems to be no statistical outliers. So the bottom whisker gives me the actual
youngest customer, 26. The top, it calls an upper fence. And then the top of those,
that was 73. So those two are suspected outliers. And how we count, how we calculate these fences is
we take the interquartile range. Remember, that's the difference between the third and the first
quartile. So third quartile minus first quartile. And we multiply that by one and a half. So we take
the interquartile range, multiply it by one and a half. And we add that to the third quartile,
and we subtract that from the first quartile. And if there are no values outside of those new fences,
then there's no outliers. If there are values outside of that fence, there'll be outliers.
So once again, the interquartile range plus this third quartile value. So 52 minus 41,
that's 11, multiplied by one and a half, added to 51. And that gets us close to the upper fence.
Sometimes there's a bit of rounding. So that gets us to the upper fence,
and then anything beyond that. So here with the attracted customers, there were no customer ages
above one and a half times above and below the third and the first quartiles. So these will
actually now be, the whiskers will actually be minimums and maximums. Okay, great stuff. So let's go
about the long way. And let's use graph objects. So what I'm going to do here is I'm going to create two
Python lists, the age of my existing customers and the age of my churn customers. And I'm going to use
just a bit of logic there. So conditionals, df.attrition underscore flag equals equals existing
customer equals equals attracted customer, take the custom age column, and convert that to a Python
list, please. So we're going to do all of that. So now I have these two lists, because I'm going to
build a separate trace for each. So still the go dot figure. And then as always, I'm going to add
one trace to it, I'm going to add another trace, both of those traces are draft object boxes. And
the y axis there, I have existing age on this one, I have churn age, the name, I'm going to give it as
existing customer, the name here, I'm going to give lost customer, the marker color, I'm going to give
that green. And so then I'm not using RGB colors, I'm just using some colors that have specified names.
And in this one, I'm adding a box mean, this is a new one, box mean equals true, and box points
equals all. So we're going to see what that is all about. This one, I'm going to say box mean equals
sd. So not true or false, but the string is d. And that box points all as well. And I'm going to do
an update layout all in one this time, title, the x-axis I'm passing as a dictionary, the y-axis I'm
passing a dictionary, because on the x-axis I have title group and title count. So let's see what this
looks like as far as this is concerned. So what those box points are, it's actually going to give
me all the edge values, all of them, and it does a bit of jitter, left and right spacing, so all the dots
are not on top of each other. So you can sort of see from the distribution of these dots as well,
you know, how the data was spread. So on the left side, we had box mean equals true. So it adds this
little dotted line. So as you can see there from the tooltip, as I hover over that, that mean is 46.26
and the median was 46. If I say box mean equals sd, it actually gives me this diamond. And the top and
bottom of the diamond is actually, that is the standard deviation that says there. So I can see
a mean and standard deviation, I can see a median, and I can see all my quartiles. So you can see a
lot of information. And once again, you know, we can just take one of them away and just zone in on
the ones that we that we do want. So box and whisker plots. Next up, we're going to look at scatter
plots. And that's where we compare numerical variables to each other. So we no longer have a categorical
variable in there, although I'll show you can, but it's all about numerical variables.
So there we go, scatter plots. On my x axis, I'm going to have a numerical variable. And on my y axis,
I'm also going to have a numerical variable. So those are pairs of values for each of my observations.
Let's use graph objects first. So I'm going to say age underscore mo b. So I'm going to have go dot
figure. And then to that, I'm going to add a trace. And what do what do I add? A scattered plot.
So I've got to tell each give specifics for the x and the y value of each of the markers that we're
going to have. So customer age, that's a continuous numerical variable and months on book. That's
another numerical variable. So it's pairs of numerical variable and the mode I have to set for
scatter plots. And I'm setting the mode to markers. You also get lines and markers plus lines. I just want
markers, just little dots. And then I'm going to update my layout. You've seen that before.
So let's have a look at our first scatter plot. So what that's going to do for us. So each value
that I hover on is going to be the age, the month on the books. As simple as that. So it's a scatter
plot. It's pairs of numerical variables. Each dot represents all this marker. Remember we said mode
equals markers. So each of these are markers. So each of these little marker dots is a specific
observation, a specific customer. And that's a thing I want to show you. Remember all of these at
the top. I can actually click and drag and select only a certain part of it. And I can actually pan
around with this tool. I can pan around and look at the different data. Or, you know, if I've lost my way,
now I can zoom in and zoom out. But I can just go back and reset the axis and all the data is there
again. So you can imagine that this can become very, very useful. So now we're going to use Plotly
Express for another scatter plot. So I'm going to do this age underscore mob underscore group underscore
px. Very descriptive of what my plot is going to be. It's a px dot scatter plot. First, I pass my data
frame. What do I want on the x axis? Customer age. What do I want on the y? Months on books.
But now I'm adding a size of my markers because I can add a third numerical variable to a scatter plot.
So I can actually have this almost three dimensional data here. So I'm going to set the size of my markers
to the dependent count. So how many dependents does my customer have? And that's going to determine
how large my dots are. And I'm also going to add a categorical variable to it. And that's
what I was alluding to. I'm going to separate two sets of values out. So by the attrition flag,
I'm going to have that. And then I'm going to add some marginal plots as well. So on marginal y,
I'm going to have a box plot. On marginal x, I'm going to have a box plot. Because remember,
originally my x and y axis, they're both numerical variables. So I might as well do,
you know, look at the distribution of that numerical variable and do box plots on my two margins.
I'm also going to add a trend line using ordinary least squares. And that is a linear regression model.
And we're going to do modeling as well. I'm going to show you just how to do modeling.
But Plotly will just do it for us and a little mathematical model to that as a trend line.
I'm going to add a title. And with the labels, I'm going to change all those values so that I don't
have those ugly underscores. And let's see what this plot turns out to be. And there we go.
So the first of all, the size of these dots, that gives me an indication of how many dependents they
have. So on this axis here, I see the distribution of the months there and on this side of the age.
So I can see these little marginal plots. And then I can see the two trend lines as well. So I have a
a little linear regression model there. Once again, you know, I can only look at the attracted customers.
So I can really zoom in just on some of them there, pan around, zoom around, whatever I need to do,
just to, if I'm going to present this data to someone, you know, just, you can really zoom in,
get very specific about, about your data. So here, we're just going to add histograms and rug plots,
show you a little something a little different. And there we go. So I've got histogram on this side,
and I've got a rug plot on that side. So really, you can do a lot of this. So let me show you another
way to add a dimension. And that is by this facet column. So that's a new one. And the facet column
is going to be attrition flag. And what that's going to be is create two separate ones for me.
There's a facet row, facet underscore row, and facet underscore column. So here's column. Now,
this time what I've done with the dependent count, I've added that to color. And now it's going to do
this sort of color separation. Now, it's not ideal here for this very discrete data. So if I do have a
continuous numerical, it'll be nice to add that. So the color is also going to give us some information.
And you can see my two linear regression models, these two little straight lines.
And it even shows me some statistics there, shows me this intercept, the slope,
and an r squared value. If you don't know what those are, don't worry about any of the scores,
you'll know exactly what linear regression is all about and how to calculate these values.
The last plot that we're going to look at is some time series data. Very nice to see how things change
over time. So let's look at the time series data. So remember the Australian rainfall. So let's just call
the info method on that. We see we have a lot of data there. There seems to be some missing data,
because not all the values are there. And we can see our d type there. So what I'm going to do here,
I'm going to do this, we're going to go do a line plot. I'm going to say rain, and then I'm going to say
rain dot location is Darwin. And or, so that's the or symbol remember, rain location equals Hobart.
So we're going to look at Darwin and Hobart. And on the x axis, we're going to have date. And on the y
axis, we're going to have max temp. And we're going to have color equals location. And we're going to
have the title and the labels. So let's just have a quick look at what this, what this looks like.
So there we see Hobart and Darwin, and we see the minimum maximum temperatures. And we can see the
years down here at the bottom. So that was x was date. And if we go up to date, we can see that date
was an object. Remember before we changed that to a date time series, remember date time data type. And
this is an object though, just a string. I just want to show you that plot.ly is clever enough to
understand what is going on here. And it will do, you know, it'll do this for us.
Let's look at one more scatter plot. We're going to do rain location is Darwin or Hobart again,
x is date, y is max temp, color by location. And then I'm setting the labels there. And I'm adding
this new one, update underscore x axis, arrange slider. So if I just want to take these sliders and move them
in, I can really zoom in on only certain of the dates. And that's fantastic. Once again,
why I love plot.ly because these things are interactive. While I'm giving a presentation,
I can really interact with these plots. And that's much better than, for me at least,
than study plots. So let's just look at one more. Let's just look at the, at the rainfall for these two.
And you can see clearly the difference in the rainfall, or at least when in the year the rainfall is,
and what the difference is between the two sides of Australia there, as far as the different dates
are concerned. So that's it. I'm just scratching the surface as far as what plot.ly can do.
But what I wanted to show you here is this different plots for different types of data.
So categorical variables will go bar charts for continuous numerical, we'll do box and whisker
plots or histograms. And for numerical variables, these scatter plots. And I wanted to show you the
difference, or at least that we have plot.ly express and the graph objects. And graph objects
much more verbose that you have to be as far as the code is concerned, but a lot more things that you
have control over. And then the plot.ly express perhaps a little bit easier. So go out there,
read up about plotting. It's a science in its own and how to convey data properly. What you didn't see
here are pie charts. Now pie charts, unless the circumstances are extreme, are not good plots.
Human beings are not good at interpreting the fraction of, you know, cutting up a pie. We are
very bad at that. And especially when you start adding 3D plots and you start, you know, angling the
pie chart a little bit, you can really cheat with those plots and overemphasize certain parts of the
data, which really isn't good. So really stay away from pie charts, please. And I think that's like a
little stab in the back of people who, you know, who produce, who produce good plots when they do their
presentations. Stay away from those, stay away from those pie plots. So go out there, try to learn more
about plot.ly and have a look at the other packages that are out there as far as plotting are concerned.
You know, choose your favorites and look at matplotlib, look at seaborne. There's so many of them out there
giving us wonderful plots.
