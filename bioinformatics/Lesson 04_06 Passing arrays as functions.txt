so a quick example of flow control inside of a function so I've created a
new function here call it flow function and flow funk and I am using a variable
number of arguments by using these ellipses or splat and what I'm going to
do is say print I can tell you how many arguments you passed I'm going to use
this inbuilt Julia function length again which is just going to count the number
of arguments that are passed and then remember this is a new line character
and I'm going to have this variable called I and I'm going to set it I equals one
and it doesn't exist outside of my function because remember here it's inside of a
function and now I have a for loop inside of a function so I'm going to iterate over
all the arguments that I passed by using this for n in arguments then I'm going to
print a line argument and then I remember I is one at the moment and we pass a tab in
and remember that is going to go through these arguments one by one and then a new
line and then we're going to increment I by one so I equals I plus one or short end I
plus equals one then we're going to end our for loop and then we're going to end our function
so you see there's a little bit of a problem here with the indentation didn't indent quite
properly in I Julia it doesn't matter it will still work so let's run that function let's
create that function and now let's call it and I'm going to pass all of these arguments
again Julia is one in a million two of them are values the rest are strings and look what it's done
so it says I can tell you how many arguments you've passed it was seven and then it's going
to run through the for loop so it's going to print argument then I remember I was one
and because it is looping through this n so the first time it goes through it'll be one
so the first argument was Julia now we increment I by one so the next time we run through I is now
two so it's going to print argument two to the screen n is now incremented to two so that'll be the
second argument that I passed and so on so quite nice now though let's pass some arrays as function
arguments so we've created these functions we've created these arguments we've even created the
keyword arguments we've created use the splat to create an infinite number possible infinite number
of arguments but what if I wanted to not pass a single value but I wanted to pass a whole array
so let's create an array or column vector here by the fact that I create this computer variable
called x vales and these square brackets indicate the fact that it is an array so it looks like I'm
going from negative three to three and I'm incrementing by a half so that's an array of values let's
create there we are negative three to three now let's create a function and I'm going to call my
function sqr and it's going to take a single argument called a and it's going to return a squared and
then end so it's a generic function with a single method now let's map let's use the map function that
is one way to use to use a function and then as an argument instead of passing a single value we pass
the whole array so it's map then I call my function and I don't use the parentheses and then pass an
argument I say comma and then so and then the x val so I'm mapping the array to the function and there
we go it's going to take every element and it's going to square so 3 becomes 9 negative 3 becomes 9
and negative 2.5 becomes 6.25 etc now I've left this out but you can certainly do get fly to plot
this and you'll see beautifully the x squared pattern that you will see now let's just have a
look at something map is not always the best thing to do most some of the functions least in in in in
in julia the inbuilt functions they have their own inbuilt mapping and I'm going to use this macro
called at time which will tell me how much time it takes to execute this line of code and how much
memory was used so remember in some older text you will see this using this one dot ten thousand
with the square brackets that's really been deprecated we we now use in julia we use the collect
syntax so I'm going to map the sine function and I'm going to do the sine function for values from one
to ten thousand so the sine of one sine of two sine of three sine of four sine of five sine going to go
through that ten thousand times let's see what happens that took 0.03 seconds and it used 1.29
megabytes of memory now let's time it again but instead of mapping I'm just going to use the inbuilt
so sine can map an array to it as part of an inbuilt ability and look at the difference now
it only used 0.009 seconds and only 361 kilobytes a lot less memory and a lot faster
and a lot faster than using the map function so map's not always ideal we also have this problem
when we use arrays now remember the arrays the square brackets tuples assist this list with these
parentheses if I have a function that takes two arguments and that it returns three times x plus two
times y I cannot call that function h with an array or with a tuple I'm going to get an error when I do
that now one way to get around it is the apply function but that's been deprecated as well we now
rather use the splat or ellipses so let's create our array three and four and our tuple three and four
let's have that and now create our function h which takes two arguments three times x plus two times y
and instead of just passing that array or tuple as an argument I use it as a splat
so h and array one splat and tuple one splat and you can see what happens it's going to pass three to
the x and four to the y so that would be one easy way of passing these arrays to a function
now except for numbers and characters or other plain data values of arguments are passed by reference
only and are not copied as you can read there they can therefore be altered so let's have a look at
this I'm going to create this computer variable called array underscore primes I'm going to pass it
as an array by these square brackets one two three five seven eleven thirteen seventeen and nine
and we're going to have an argument as to whether one is a prime number or not certainly juliet's not
but we can have that argument elsewhere so there's my array nine element array in a single column they're
all 64 but integers so let's create this function called add underscore ele add element and I've got a
single argument there a and it's going to use the internal the inbuilt julia function push with this
exclamation mark which means add to the end so it's going to take my argument and it's going to
slob on 23 at the end that's what the push exclamation mark I'll use that term for now push exclamation
mark does so let's run it and we pass to it the array of primes so I'm again passing an array
two I'm passing an array to a function and look what happened the 23 was lobbed on at the back
and that's permanent because if I call array primes now it's there it is still there okay so for now
we've just passed these normal arguments or keyword arguments or splat number of arguments but we can be
much more precise in what type of arguments we want to allow we can control that and we call that
using type parameters or a parametric method and that is up next
