Now let's go on to an example problem.
I'm doing this problem again in IPython notebook using SymPy as my extension to Python.
You can watch the lecture series on an introduction to Python for mathematics.
That is one of my playlists.
You needn't use Python like this.
You needn't worry about the coding here.
The IPython notebook is fantastic and as much as I can show you what the results are
without you understanding what the code is.
For those who want to get involved with the code, I'm just importing SymPy as this abbreviation SYM.
I'm also importing from SymPy this capital I which is the imaginary number I.
I'm doing pretty printing by calling SymPy.initPrinting
and I'm setting a few symbols.
The symbol T, alpha and beta.
I'm setting those T, alpha, beta there.
And I'm setting the variable X and Y to the functions X and Y.
And I'm going to define them as functions of T.
So here we have an equation.
On the left hand side I'm going to have the first derivative of X with respect to T.
And on the right hand side I have X plus 2Y.
So first of all, let's just run that.
Nothing will happen.
I'm just importing all of that.
Let's run this block of code.
And there's my first equation.
And here's my second equation.
As I say, you can pause and look at the code.
There's various ways to do this.
What is important here, we have a system of first order ordinary differential equations.
It's X prime and Y prime.
There they are.
X prime is X plus 2Y.
And Y prime is negative half X plus Y.
Important that both X and Y are functions of T here.
So we're dealing with a plane.
We're dealing with a vector field in a plane.
This is a system of equations.
I need to solve them together.
Now I'm going to define my matrix A.
Let me show you how easy this is.
Of course, if you use something, some computer algebra systems,
specifically SymPy, which is fantastic for this,
you can see immediately my matrix A is going to be 1 and 2 and negative 1 half and 1.
So that's how I define my matrix.
I am giving it a variable name uppercase A.
That's 1 and 2 and negative 1 half and 1.
That is my matrix A.
And then I'll just print A to the screen.
So there is my matrix A, 1 and 2, negative 1 half and 1.
I'm using the dot notation so that I'm sure that these are seen as floating point values, not as integers.
Now we can use the method of calculating the eigenvalues and then the eigenvectors.
So, so simple in SymPy.
I'm just going to say,
SYM referring to SymPy dot matrix A dot eigenvalues open close parenthesis.
If I do that, boom, out pops my two eigenvalues.
I see I have two eigenvalues, one there and one there.
The first one being 1 minus negative i and 1 being 1 plus positive i.
So those are my two eigenvalues.
Just to remind you, let's just use the first one.
We'll call that lambda sub 1.
That means alpha, there's my alpha is 1 and my beta is negative 1.
So let me just print that to the screen.
If you don't want to follow the code, I have alpha equals 1 and beta equals negative 1.
So that's the, that's the eigenvalue I'm going for.
I can also just do the eigenvectors very simply without having to do it by hand.
Of course, if you're not doing this in SymPy, you're doing it on pen, with pen and paper.
Use the eigenvalue eigenvector method and you'll get these values.
So for the eigenvalue 1 minus i, I get one eigenvector and it's 2i over 1.
And for the eigenvalue 1 plus i, I get one eigenvector.
It's negative 2i and 1, of course, the complex conjugate there.
I remind you of the following then.
To solve a system of first order ordinary differential equations.
I'm going to have this b sub 1 and b sub 2.
b sub 1 is going to be the real part of the first eigenvector
and b to the imaginary part of the first.
So if we look at this first eigenvector, I can use either of them, but let's stick with this one.
It's going to be 0 and 1 is going to be the real part because remember this 2i is 0 plus 2i.
So the real part is 0.
The real part here, this is 1 plus 0i.
So the real part there is 1.
And here we have 0 and 1 being the imaginary part and negative 2, 0 being the real part and negative 2, 0 being the imaginary part.
So just reminding you what b1 and b2 is.
I'm just defining a bunch of variables as symbols in this piece of code here.
I needn't worry about that.
Let's just run that so that I have this.
Now remember how we get this.
We have two unknowns x and y, two functions of t, x and y.
Remember that x sub 1 is beta sub 1 times the cosine of beta t minus b sub 2 sine of beta times t times e to the power alpha t.
Remember we chose alpha to be 1 and beta to be negative 1, our first eigenvalue there.
So that's where I'm going to plug in alpha and that's where I'm going to plug in beta.
And remember b1 will now just be the real part of k1 and b2 will be the imaginary part of the eigenvector k1.
So let's just run this block of code just to show you that we have x sub 1, x sub 2 then.
Remember is b sub 1 sine of beta t plus b sub 2 cosine of beta t times e to the power alpha t.
So let's just run this.
There's my b1 and there's my b2.
That's what I said.
If we look at k1, this is our k1.
It's 0 and 1 and 2 and 0.
0 and 1 and 2 and 0 is my b sub 1 and b sub 2.
I know how to construct x sub 1 and x sub 2 now.
And I can just plug in all my values.
And I will remember that in the end, right in the end, it will be, I'll have x equals something and y equals something.
Remember it will be x will be this b sub 1 and b sub 2 is a column vector.
So the first element will be the x values and the second element, in other words, row 2.
In other words, so that will refer to x and this will refer to y.
That will refer to x and that will refer to y.
And I just have to remember I have to put the c sub 1's and c sub 2's in.
So if I do all of that, combine them, I will have one equation with a c sub 1 and c sub 2 for x of t and one equation with a c sub 1 and c sub 2 for the y of t.
So to do that, I'm just going to run this piece of code just to import matplotlib.pyplot as plt and I'm just going to export it as part of this notebook.
So if I were to do that and I were to do the following, if I set the x of 0 to be 2 and the y of 0 to be 0, I can then solve for c sub 1 and c sub 2.
In other words, I'm going to get a final value for x of t and a final value for y of t.
So x of t is going to be e to the power t cosine of t and y of t is going to be negative e to the power t sine of t.
Here's a bit of code so that we can just do a plot of that.
Let's just do a plot of that.
I'm going to start at time equals 0.
Now, I can't use x and y in my code here because I've defined them as symbols, so I can't use them as variables.
So I'm just doing x value and y value, just some sub 2 variables.
And I've got this little step size of 0.1 and I'm just going to run this loop while time equals less than 2.
My x value is going to be 2 times exponent t.
And again, I can't use t, t is a symbol, so I'm using the variable time, times the sine of cosine of t.
Now, let's just, let's just correct that.
I say, let's just do, that shouldn't be a 2 there.
Let's just correct that.
I said, if I do that, let me just see if I did get my answers correct.
No, there is a 2 times there.
2 times, let's check it.
So, if I just change this code here, that will be twice that.
Let's check for yourself that that is correct.
x times e to the power t times the cosine of t and negative e to the power t sine of t.
Then I plot my point, because now I've got one point and one point.
And I'm plotting that m as red dots.
And I'm adding 0.012 t.
And this will carry on, carry on, carry on until such time as t is no longer less than 2.
And it will escape.
And I'm finally just going to plot that.
And there we go.
