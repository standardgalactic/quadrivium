There are certainly many environments available today that we can use to write our Julia code in.
In this video, I want to talk to you about the Pluto notebooks.
We're all familiar with Jupyter notebooks.
Pluto notebooks are a bit different.
There's the plot, Pluto.jl package that we're going to use.
We're going to install it, and we're going to use it to write some code.
So I can show you what Pluto, or what a Pluto notebook is all about.
So just a word or two on Julia environments.
Remember to keep separate and distinct environments for each of your Julia projects.
You should not install packages just inside of your base Julia installation.
One or two, for instance, I do install Pluto in the base environment, but there's only a handful of packages that I would install there.
We create a folder or a directory, depending on whether you're in the Mac world or in the Windows world.
We create a folder, and inside of that folder, we will create our notebooks, and we're going to install the packages, or at least the references to the packages, specific to that project.
So every time I start a new project, I reinstall the packages that are specific to that project that I'm working on.
And what you do there, you don't have this, I'm going to use the word cross-contamination, but this problem of dependencies and versions, they don't really talk to each other.
So we're just going to maintain an environment and packages only in that environment, and it all happens in a single folder.
So really keep your projects in its own folder, and we're going to generate an environment just using Julia's Package Manager, PKG.
So what does this folder structure, I'm just going to use the word folder instead of directory, what does your folder look like on your hard drive?
Well, this is a Mac, so on my side, I'm going to have users, forward slash users, and that's just the directory or the folder structure on my hard drive.
Then J-U-A-N, that's just my username, and then in my documents folder, I have a subfolder called Julia.
And in that Julia folder will be all my projects, and every project has a name, and as you can see there, I just use some placeholder text environment underscore name.
So I'm going to have a bunch of those subfolders in this folder structure.
And in that environment underscore name, whatever it's called, we're going to use Pluto demo for this video, you're going to find two files after you've generated this environment using Julia's Package Manager.
You're going to find the project.toml file and a source folder, src, and it's automatically going to generate a single file, a .jl file in that src folder for you.
After you've activated this environment, I'm going to show you how to do this, and you install your first package, you're also going to have a manifest.toml file.
And you can read up on the Package Manager on Julia's website about the project.toml file and the manifest.toml file.
What is kept in there to keep the versions or information about your project is kept in those files.
And as you see at the bottom there, once you've generated this environment, you're also going to have whatever you call that environment, it's also going to have an environment underscore name.
So that specific name of the environment.jl file for you ready to use.
So what does the code look like?
Well, first of all, you just have to open a terminal or command prompt, and you've got to navigate to where you have all your projects.
So in my instance, as you've seen before, it's users forward slash my name, forward slash documents, forward slash Julia.
And then we're going to type in Julia.
Now, I'm presuming that Julia is in your part of your path or your environment variable so that when you do type in Julia, your computer knows where to go get the Julia executable.
So Julia and then dash E, and then inside of single quotation marks using PKG, we're just going to use the package manager, and then semicolon, then package.generate, and then the name of this environment, the project that you're working on.
So in our instance, we're going to call a Pluto demo, and when we're done, you'll see inside of my Julia folder there, there'll be a Pluto demo folder.
And then we're going to just change into that directory.
So on terminal, no matter what terminal you use, it's usually CD, you're going to CD into the change directory into this folder, into the Pluto demo folder, and then we're going to type Julia dash dash project equals full stop.
That's going to activate this environment.
So you're no longer working in your base Julia installation, you're now working in this newly generated environment, Julia environment.
And then once we start Julia, and we go into the REPL, we're going to use using PKG, and then PKG.add.
And for instance, there's a package VegaLite that we're going to use, and then comma, you see preserve equals preserve direct.
Now there's a couple of those keyword, the values at least for the keyword, for the keyword preserve.
And preserve direct just means that this, the version that you're going to install now is going, it's going to stick to that version.
So it becomes very important when you do package development, for instance, that you really take control over the versions of different dependencies that you do have.
But for simple projects like this, I just use preserve direct, and it's always going to keep that version of the package that we started with.
Now, as I mentioned, I do install Pluto in my base Julia installation.
So I'll start the REPL again, but just in my base Julia installation, and we're going to install Pluto, but then use the code import Pluto, and then Pluto.run.
Remember, if we use import, we've got to reference that namespace.
So it's Pluto.run.
So you have to get to the run function, you have to use the Pluto, the word itself there, Pluto.run.
And then we're going to use a port address, and you can use available ports on your computer, 1, 2, 3, 4 is fine.
That's the example, at least on Pluto's website.
Remember, just a few things.
I do not save my files, my working notebooks, in the SRC subfolder.
I just save it in the first structure, in other words, in the project names folder, and where the project.toml file and manifest.toml files are.
And then I'm going to show you how to activate the environment in the notebook, because even though you try to activate it outside of, you've got to activate it in the notebook.
And I'm just going to show you how to use Markdown in Pluto, because that is different from a Jupyter Notebook.
And also just showcase the interactivity of the Pluto notebook environment.
So on my desktop here, we've opened a terminal.
And I'm just changing directory, as you can see there, changing directory into my documents forward slash Julia folder.
So that's where I want to be, because that is where I have my list of folders that contain all my projects.
So as mentioned, I'm going to type Julia, and then dash E, open a single quotation mark.
We're going to say using PKG.
So this would be the same as typing code in the REPL.
Semicolon, and then PKG dot generate.
Generate.
And then parentheses and a quotation mark.
And this is where we're going to write the name of our project.
So in my instance, I'm going to call it Pluto demo.
Of course, you give the name that is appropriate to the type of project that you are working on.
So I'm going to close my quotation marks, close the parentheses, and then close the single quotation mark there.
So let's just go back all the way there and just create that spelling error there.
And then all the way to the end, let's run this.
And there we can see generating project Pluto demo.
And we'll see inside of that folder, we now have a project.toml file.
We'll also have an SRC folder.
And inside of that SRC folder is a Pluto demo dot JL.
So it's the same name as our project name.
And dot JL.
So that's just a normal Julia file that you can open up using an IDE.
It will not open in Pluto though, although Pluto is saved as, Pluto notebooks are saved as .jl files.
But that is not a Pluto notebook, so that's not going to work for us.
So now we're just going to change directory into this folder that was generated using the pkg.generate function.
And now we can see we're there.
And if I type ls, or if you're in the window, you're going to type dir, you see the project.toml file.
And then an SRC that is going to be a folder inside of there.
But there's our project.toml file.
Now we want to activate this environment.
So I'm going to say Julia once again, and then dash dash project equals full stop or period.
And if I do that, we see Julia has started.
And it is 1.5.1 at the time of this recording.
But if I hit the right square bracket to go into my package manager,
we'll see I'm not in Julia at v1.5.
I'm in the Pluto demo environment.
So anything that I install here will only be for this environment.
It will not be available to any of the other environments or to my base Julia installation.
So here I'm going to say using pkg.
And then we can just start adding one or two packages.
So pkg.add.
Now you can do this in the package manager itself by the right square bracket.
But I prefer it here so that we can showcase this preserve keyword.
So let's do VegaLite as we promised.
So VegaLite.
Close my quotation marks, comma, preserve.
Equals.
And then all in uppercase preserve underscore direct.
As simple as that.
Preserve direct.
And there we go.
It's now going to install VegaLite for us.
And there we go.
Let's install something else as well.
Let's just install data frames.
The data frames package.
There we go.
Done.
So if I hit my right square bracket now to get into the package manager, I just type
st.
We see that we have data frames and VegaLite installed.
And we can see the versions there.
We're just going to install the newest versions.
We didn't specify the version that we wanted.
But that is there now specifically to this environment.
So let's just exit from Julia here now.
And if I type ls, you'll see there's a manifest.toml file now as well.
This contains the information about these packages that I have installed.
So what I'm going to do, I'm just going to quit the terminal and just restart it.
We're back in the terminal.
And I'm just going to type Julia.
And that's just going to start the base installation.
If I hit the right square bracket now, you see I'm in version 1.5.
So I haven't activated a specific environment.
And this is where I would add Pluto.
Now I've already done so, but I would just say add Pluto.
And as I say, it's one of the handful of packages that I do put in my base Julia installation.
I've done that already.
So let's just say import Pluto.
And it gives us a little bit of information there.
And we're going to say Pluto.run, the run function.
And for my port address, I'm just going to say 1234.
Now it might give you a little bit of information that you have to copy and paste into your browser.
So that it would navigate to this generated notebook.
In my instance, it's just going to happen automatically.
And we see we're in localhost 1234.
And we have a Pluto.jl notebook.
And you can see there's some sample notebooks that you can work through.
Or we can generate a new notebook.
So let's just generate a new notebook.
And there we have it.
A brand new notebook.
Live docs.
That gives you some information.
If you highlight some functions in Julia and look at the live docs, it's going to give you information about that function.
There is a little bit of feedback that you can give and statistics about your notebook.
But first of all, we're just going to save the notebook.
So I'm going to go up here and to save notebook.
And once you click on it, you're going to be in your home folder automatically.
I want to go to documents.
And you see it finds documents there.
And then I'm going to go into Julia.
And then I'm going to go into Pluto demo.
And that is where I'm going to save this file.
So you can see I'm in the same folder as manifest.toml and the project.toml file.
I'm not going to go into SRC and save it there.
So let's just call this one demo as well.
So it's demo.
And you see the autocompletion there.jl.
So I'm going to click that.
And I'm going to say choose.
And it wants to overwrite.
The default that it created.
And there we go.
And it's automatically saved.
Anything I type now is automatically saved.
But we're interested in writing some code.
So you see here we have one code cell.
And if I hover over it, you see a plus above and a plus underneath.
Let's increase the size of that so I can show you.
So the plus on top and the plus underneath.
And then also a little eyeball.
And that's going to hide our code.
Now the code that you write, the execution of that cell is above the cell.
So unlike a Jupyter Notebook where it's below the cell, it's going to be above.
So let's just start with some markdown.
Now that's very simple.
You can't see any drop-down menus here to change something into a markdown cell.
But you just type MD.
And you can do a quotation mark.
I'm going to do a single pound sign or hash symbol.
And I'm going to say Interactive Notebook.
That's going to be the name of this notebook.
Or at least the markdown first level name of it.
And I'm going to hold down Control and hit Return or Control and Enter.
When I do that, it's automatically going to create a new cell underneath.
If I just hit Shift and Enter, it'll execute the cell.
But it won't open a new one.
You'll have to go onto that little plus signs above or below.
So I'm going to hold down Control and hit Return.
And it's going to do what we're used to in a Jupyter Notebook at least.
It's just going to print this Interactive Notebook as a header.
Because I used a single hashtag that would be equivalent to an HTML H1 tag.
Now, if I hit on this little eyeball, it hides the code.
And now all I can see is obviously just the nice title of this page.
So let's make another one.
I'm going to say MD.
And we're just going to have two.
And we're going to say our libraries that we're going to use or our packages.
Libraries.
There we go.
Let's execute that.
I've got two hashtags there or symbol pound signs.
And so that's going to be slightly smaller.
And once again, I can just hide the text there.
So I didn't hit Control and Enter.
I hit Shift and Enter.
And you can see it didn't automatically create a new cell for me.
So let's just hit the plus there.
And that's it.
What we need to do now is just to use the Package Manager.
So I'm going to hold down Control and Return.
And that line is executed because what I want to do now is to activate the environment.
So activate.
Now, very importantly, with this activate function, parentheses, and then our quotation mark,
because we have to tell it where our project.toml file is.
Now, I've already saved this demo file here in the Pluto demo folder.
And I know that that contains the project.toml file and the manifest.toml file.
So this notebook and those two files are in the same folder.
So I don't have to go and type the whole address on my hard drive, my internal drive,
to get to that project.toml file.
I can just type it in directly.
So it's project.toml.
Close my quotation mark.
Close my parentheses.
But remember, please do the save first.
If you don't do that, you have to type in the whole address to that file.
So Control and Enter.
There we go.
And now this environment is activated.
And remember the two packages that we had installed,
because we say pkg.status,
now that's not going to print out in this notebook.
I'm just going to hit Control and Return.
But if I bring up my terminal window,
you'll see the status function being executed.
And there's my terminal.
And you can see things happening as we execute it.
But this last two lines,
you see my dataframes package and the Vega Lite package there.
Because we are inside of this specific environment.
We've activated this environment inside of Pluto,
in this Pluto notebook.
And you can see there,
Project Pluto version 0.1.0.
Now remember, we use the package manager actually to create packages.
But for, in this instance,
all we're going to use is just to showcase this notebook environment.
So as far as our libraries or packages are concerned,
let's just do Vega Lite then,
using Vega Lite,
Control and Return.
And you can see the little bar run up and down there.
It's executing that cell.
So it's pre-compiling the package for us.
And I can keep on typing in the meantime.
We're also going to use the dataframes package.
And then the last package we're going to use is one of the packages that is part of Julia.
We're just going to use the random package as well.
So let's create some data.
So let's make it mark down,
keep things nice.
And we say two, two quotation marks.
Let's have that two pound symbols, I should say.
Mark down and we're going to say we're just going to create our data.
And let's just hide that code so it looks nice.
So let's just create some random values.
I'm going to use a computer variable called VALS to hold this vector object and this array object.
And I'm going to say RAND 1000.
So this is going to generate a thousand values for us there.
I'm going to put the semicolon because I don't want that to be expressed to the screen.
So there we have a thousand values.
And let's create a dataframe from these.
So DF equals dataframe.
And what we're going to have is let's call it VAR1.
It's going to be the column name.
And I'm going to set that equal to VALS.
So we're going to have this single column in our dataframe.
And it's going to contain those a thousand rows for each of those,
one cell, one row for each of those values.
And then we can see the first five rows is going to be different from you because we did not seed
the seed of random number generator.
And now let's just investigate this data.
So let's say, let's say explore the data.
So this is going to be our section on exploring the data.
And let's create a new cell for ourselves at the bottom.
So let's just create a plot, just a histogram of these thousand values.
Now, unlike a Jupyter notebook, in a Pluto notebook, it is one line of code.
We can just execute one thing at a time.
If you want multiple things to be executed in one cell,
you've got to wrap it in a begin-end statement.
So I'm going to say begin.
And we're going to use,
we're going to pipe our dataframe into a plot.
And we're going to use the macro at VL, VL plot.
And what we want is we want a bar plot.
And we want the X to be, and inside of curly braces,
X, we're going to put a few things.
We're going to plot a var one is going to be on our X axis.
We're going to say bins equals true to create bins for us.
And then on the Y axis, we're just going to put counts.
So I do have a video out on the use of Vega-Lite.
It's a fantastic, fantastic plotting environment.
So have a look at that.
I'll put a link on in the description down below.
So we have a begin and end statements there that we wrap this,
what is essentially multi-line.
So a line of code there.
It looks like a single line of code,
but there's obviously quite a few things happening.
So let's have a look at that.
And there we go.
We see our histogram very neatly there.
Now what I'm going to do,
I'm just going to make this a tad smaller.
So I'm going to go up here to VALS,
where I have that line of code,
and I'm going to re-execute it.
So we're going to generate a thousand new values.
And what I want you to have a look at is very small here,
but I'm sure you'll see is that the values of my data frame
are going to change.
And the plot is going to update all in one go.
So let's hit shift and enter.
And you see the code ran, and we have different set of numbers,
and the histogram has changed.
Now try that for yourself, or just watch again.
I'm going to do that.
And we see it runs, and the plot changes immediately.
So that's the thing about Pluto Notebooks.
It is interactive, and there's a state that's created all the time.
And all the cells get updated to that state.
If something has changed, then a cell references some values in another cell.
So if I updated that cell with a thousand values,
that it contains the thousand values,
my data frame is going to reference that cell,
because I set my variable, my var1 there equal to those values.
And the plot has the data frame in it.
So those cells are somehow connected.
I mean, that's just logical, and things update.
So that's very different from a Jupyter Notebook,
where you have to really keep track of making changes,
and then making sure that if you generated some results from those values,
or some plots and graphs from those,
that you should rerun those cells manually,
so that they would update as well.
But here, in the Pluto Notebook, those are done at the same time.
So let's just do it one more time, and shift and enter.
And the data frame updated, and then the plot updated itself as well.
So that is very neat.
So in short, this is a Pluto Notebook.
It's a lovely coding environment just for you to experiment,
or just to explore your data.
Lovely for data exploration,
in as much as that you have this interactivity,
and this live update.
So I hope you enjoyed this video.
Give Pluto a try.
There's some wonderful environments.
Of course, the Jupyter Notebook is a fantastic coding environment.
You can also use Juno, which is an installation on top of Atom, the IDE.
You can use Visual Studio Code to write your code.
And now you can also use Pluto, a fantastic coding environment.
Explore all of these, and enjoy using Julia.
There are some social centers, which I teach you many to figure out later,
between that as you go.
There are a lot of themes.
So for the,...
let's launch a lot of themes practice in the lab.
After the meeting your Beispiel...
We look up sort of,
and interact with theourse of me.
And the plan is basically,
is to limit everything to place in my回去.
Now, I'm serie Mike is a very niño.
