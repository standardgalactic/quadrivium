Here we are in lesson two and we're going to look at types.
We're in Julia box, we're in the folder that we created to put our lesson files in.
You can either download this file, which I'll make available,
or you can just say new and create a new Julia notebook.
So let's go into types, which is our second lesson.
Once again, remember, these are all cells.
If I double click in the cell, first of all, you can see it is a markdown cell.
And I've marked it as a heading one, the largest type that can be displayed in HTML code there.
We'll look at the second cell there, my two little hashtags there, two little pound signs,
indicating that this is a heading two introduction.
So types, variable types.
Now, I've written a few things here. Let's just go through them.
Remember, just as in mathematics, we have numerical values, and they are of a certain type.
If I just have the value three, I could call that an integer.
If I have a value three over four, this fraction, I can call that a rational number, 0.75.
Now, the computer variables can also hold different types.
That's how a computer language is structured.
Now, remember, it's actually the object that's inside of the variable that has the type, but we'll get to that.
In computer jargon, specifically in Julia, these things are also called types.
Now, every time we create a variable, that variable holds something, and that something is of a type.
Say, for instance, we were to say x equals three, then the name of the variable is x, and it holds an integer value, which is three in this instance.
Now, this value that it holds is called an object in Julia, and everything that's held inside of variables in Julia are objects.
Now, Julia has a dynamic type system.
What does that mean?
It means you don't have to explicitly declare a data type when you create a variable.
Now, in languages with what we call a static type system, you will have to do something like this.
This comes from a different programming language.
I would have to say integer x equals three in this semicolon to end that line of code.
So, I would have to declare that this variable is going to hold objects that are of an integer value,
and here I've assigned one such object, and I called it three.
You don't have to do that in Julia, although you can, if you wanted to, you can declare a type.
And sometimes this is quite good to do, because when you declare a type, it holds that specific area in your computer's memory,
and it makes for quite a bit of faster code execution.
Now, the types that are available in Julia are formed in a hierarchical structure, and that's what we're going to have a look at next.
We're going to have a look at next.
We're going to have a look at next.
We're going to have a look at next.
come by next.
