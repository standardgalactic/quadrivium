So let's have a look at boolean switches. We have these boolean operators AND and OR.
So that's this AND sign which is shift 7 on most keyboards and shift backslash on most keyboards for these two little upright signs.
So let's use these just an example so you can quickly see.
I'm going to create the computer variable A. I'm going to put inside of it the integer value 7.
And here I ask two questions on either side of this AND sign.
And they've got to return either true or false.
So is prime A? That's true.
Is A equal to 7? That's also true. So they're both true.
And if I execute that, that is true.
Now, I've asked these questions on both sides, but they might be lines of execution of some function, etc.
Or the value that gets returned by a function.
It needn't just be these straightforward questions that I'm asking.
On the left-hand side here, is prime as a keyword.
It just evaluates whether a value is a prime or not.
Now, let's do this. A equals 9.
Now, is prime A? Now, 9 is not a prime.
So this is going to return false.
And on the right-hand side, we're asking the question, is the value that's inside of A at the moment, is it 9?
Yes, it is.
So I'm going to have a false and a true.
But they both have got to be true because that is an and sign.
So if we run this piece of code, it's going to return false because they both have to be true for us to return a true.
That's opposed to the or, which one or the other being true will give us a true return.
So is prime A? Now, A is 7 at the moment.
So that part is true.
But A is 7 is definitely not equal to 9.
So that part is false.
But if I execute this, I am going to get a true because one of the two is true.
And it needn't just be the first one because look at this.
I can say A equals 7.
So is A equal to 9?
So this is false now, whereas the second part is true.
But if I execute this line of code again, it's going to return a true because it's an or sign.
One or the other or both.
As long as one of them is true, it's going to return a true.
And look at this again.
A equals 9.
It is not a prime.
So it's a false on the side.
And again, a true on that side.
And the code executes to true because either one of them.
We only need one of them to be true.
So those are Boolean switches.
If we, in the next section of this lesson, we're going to take a look at the for loops.
Oh, loops.
.
.
.
.
.
.
.
.
.
