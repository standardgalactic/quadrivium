Good. Fantastic. In this lecture, which I'm actually going to divide up into smaller lectures because it's quite a bit of work we need to get here, we're going to look at motion. Motion of a particle along a path.
In healthcare, that might be the flow through an artery, it might be any kind of motion that you can imagine. In science, we can work out, we can work out the velocity, we can work out acceleration, all sorts of issues, the forces involved with that, torque, etc., etc., if we just know a little bit more about motion.
Now, from SymPy, I'm going to import all these functions from SymPy.Physics.VectorLibrary, I'm going to import everything from IPython.Core.Display, I'm going to import the image function, always with the filter warnings, almost always with the future print function, just so that you can run a Python 3.X code in versions 2.X.
So let's run that. Everything is loaded. I initialize pretty printing and I ignore filter warnings. As always with vectors, I've got to set a reference frame.
I'm going to use an X, Y coordinate system. Therefore, I call it C, I can call it whatever I want, and I attach this reference frame to the computer variable C, and I'm also introducing a mathematical symbol T, so it is no longer a computer variable T, but a mathematical symbol T.
We've seen how that works. Now, before we can look at motion, we have to look at arc length. Motion travels over a path, and for you to work out anything relating to that motion,
you've got to know what the length of that path is. So, image is what I introduced here from IPython.Core.Display, so I can just use it, takes one argument, file name, equals, and then in quotation marks, the image file, the PNG file, which in this instance I'm referencing directly, so it's got to be stored in the same folder as this IPython notebook.
There we go. So, imagine this here is just a graph of a function, and if I go from one point to the other, and I just use Pythagorean theorem, I can say that this path here between those points is almost equal to this,
and to do that, it's quite easy. Let me just introduce this new image here. Delta S, which is here by the Pythagorean theorem, the norm, the length of this, is just the square root of delta X squared plus delta Y squared.
Simple Pythagorean theorem. I can be very clever with my algebra. I can take our delta X all squared out as a common factor, so if I redistribute this in there, in there, I'm going to be back there.
If I have two expressions multiplied by each other, the square root of all of those would be just multiplying the square root of these two individually, and the square root of delta X squared is just delta X, so that's on its own, and the square root of this.
Now, we know from before, we know that if I want to look at the actual length of S, that's almost going to be the sum of I equals 1 to N over many, many tiny little segments, and if I take the limit as N goes to infinity of this, I am left with the integral.
So, very easily, if I have a function F of X equals Y, I can express arc length like this. That's very easy to do.
But we're dealing with vectors, and we do parametrize things, so we can't have dy dx. We're going to have expressions in terms of d dt of time.
So, it's not difficult to do. I'm going to show you. It's written in various textbooks. It's written in 110 different ways. Don't get confused between these.
I'm just going from time equals 0 to time equals N, and that time equals 0, I'll call A in time. The final time, I'll call B.
So, I'm just going from point A to point B, and divvying that up into various small little sections of time, so that the time, delta t, going from one little time spot to the next, would just be the N time minus the initial time divided by how many little of these little sections of time I have.
So, if I look at a tiny little segment, arc segments, it's almost going to be the following.
Very easy to see that it will be, as far as vectors are concerned, so I don't have F of X equals Y, but I have R equals the X of T and the Y of T.
So, I'm going to go from one little X, X at T, I minus 1, until the next T, the difference of that squared plus the difference of this squared.
I'm still stuck here with, basically, the Pythagorean theorem.
Introducing just the slope at a certain point for a parametrized function.
Remember, if I had a vector function, R equals the X of T and the Y of T.
If I were to take the derivative, I take the derivative of each of those separately.
In other words, I can write it like this.
It's that delta X there over delta T, just as we've done before, but I'm making a tiny little one so that I, that is the derivative, just doing algebraic manipulation, taking this denominator to the other side.
I'm left with this X of T, and it's there.
It can now be written as X prime of T at some spot times delta T, and the same goes for Y prime of T.
So I can just replace these two with these two over here.
In other words, my arc length is basically going to be this.
I can take delta T squared out as a common factor, bring it out all together, nothing sinister there, taking the limit as N goes to infinity of all these segments, and this is what I'm left with.
So if we're really looking for arc length for vector-based expressions, it's going to be the definite integral going from A to B of, this is basically velocity squared and velocity squared.
And add them together again, Pythagorean theorem, DT, very easy to expand this, just to add the third dimension Z of T there.
And usually this is one way that you'll see it written in the books, not as a function of T, but as a function of U.
But U equals from T0 to U equals T.
So this is the other way that you might see it.
Sometimes also it's not written as the X of T, Y of T, and Z of T, or U, but it's written as the F prime of U, the G prime of U, and the H prime of U, all exactly the same thing.
So don't worry too much there.
What we're interested in, if we take the derivative of S with respect to T, so it's distance divided by time, which is the speed.
Now velocity, remember, is actually speed, which is a magnitude plus a direction, but if I take its magnitude, it is just speed.
It is just speed.
So if I just showed you another way to rewrite this, what I am basically doing, let's run that, yeah, there we go.
So it's the derivative of an integral, so if you take the derivative of an antiderivative, it cancels out.
So there we go, that speed is just the square root of what we have there.
So let's have a little bit of an example.
Well, you can pause and just re-look at this.
It's really easy just to consider this.
So we have this position vector in three space.
There's our X of T, our Y of T, and our Z of T.
And we go from a point time equals one to point time equals Euler's number.
So let's introduce that as a vector.
We know how to do this now.
We've set our reference frame.
We've set T as a computer variable.
So we can just make, as a mathematical variable, we can make this computer variable, which I chose to call R sub T.
And I'm just printing it to the screen there.
If I ran this, you'll see beautifully 2T in the that unit direction, unit vector direction, natural log in that, and T squared in that.
I can take the derivative of that very simply by calling the .div function on this with respect to T in the C reference frame.
And there I have it.
2, 1 over T, 2T.
You'll notice that being the first derivative of each of those components.
We've done this before.
Now, I'm going to go a slightly laborious route to do this, just to show you that we're just going to do one of these.
So we need the first derivative squared, and the second derivative squared, the third derivative squared, and we're taking the square root of all of that.
Of that, which is called the integrand, we're now going to take the antiderivative or the definite integral going from A to B with respect to T.
So let's do that.
So I'm just divvying it up again.
So the 2, I'm just calling V of X, so velocity in the X direction, Y direction, Z direction.
I'm taking it directly from there.
The 2, the 1 over T, and the 2T, there they are.
I'm squaring them, and then my expression is going to be the addition of all of those squared.
And the integrand, that thing that I'm going to integrate, is the square root of that expression that I have there now.
Now just to show you what that expression was, instead of the integrand, so if I wrote integrand there, integrand, there we go, integrand through autocomplete.
Remember that is going to be the square root of all of that.
I don't want to show you that.
I just want to show you the expression, and there's a reason why I'm going to do that.
The reason is, if I take the integrate, now there's integrate up there, it's one of the functions in SunPy.
If I were to integrate this integrand, now remember the integrand is the part with the square root on it.
It takes the following arguments.
First of all, it takes what needs to be integrated, the integrand, which is what I had there.
And then comma, then this.
With respect to going from here till there.
And this is how you do e to the, just e, you say exponent to the power 1.
Anything to the power 1 is just itself.
Now if you were to run that, I used this example specifically to show you Python cannot do this integral.
It actually gets stuck.
If Python gets stuck, or SunPy gets stuck, very beautifully it just rewrites the integral for you.
And you see exactly there what it was.
The reason why I printed the expression to the screen for you here is just to show you, or to remind you of the fact that you can simplify this.
Sometimes if you simplify this, plug it back in there, then Python, or SimPy can do the integral.
So let's just consider simplifying this.
I can, first thing I can do is just get a common denominator, which I've done there.
This is the way SimPy would write it.
It will take the denominator outside.
So there's my numerator, there's my denominator.
So that's just a simplification of the inside.
And if you closely look at this part, that can certainly be rewritten as the following.
This I'm doing in my head.
I'm not asking SimPy to do this, although there are ways to do it, and we'll get into that later.
I'm just showing the algebra that's happening in my head.
So that's 2t squared plus 1.
If I square that, I'm left with that.
But remember, I'm actually taking the square root of that.
So my integrand is going to be this, the square root of this.
And the square root of something squared over that squared is just that over that.
That's all I'm left with.
And I'm going to call that my new integrand.
If I now integrate this new integrand, which is just a simplification of what I had up there,
perhaps this time SimPy can do that integrand.
And it can do that definite integral, and the answer is just e squared.
Very easy to do.
So don't get too involved with this.
This was just some algebra in my head, just because SimPy couldn't do this.
And this is just a long way I showed you, just to show you.
You can sit back, stop the video, relax, look over this,
just to see how I constructed doing this.
But there's certainly shorter pieces of code you can write to do that.
But at least you understand what happens now to get to speed, DSTT,
how to get to that using SimPy.
In the next lecture, I want to just calculate the position and velocity given acceleration.
First, we had given position, we took the first derivative to get velocity,
and we took its first derivative, or the second derivative, position,
and we got acceleration.
But what if I give you acceleration?
You have to work your way back.
And you can well imagine when we worked our way from position to velocity and acceleration,
we took derivatives.
So going from acceleration back to velocity, back to position,
that's obviously going to take the antiderivative.
Or in examples, we're going to do obviously the definite integral.
Looking forward to that.
Looking forward to that.
