Let's carry on by looking at splitting and joining strings.
Now, the method for the plus function in Julia cannot handle strings.
There is no method for strings.
In some languages you could say string plus another string to concatenate those two.
But you will remember from the lesson on functions that we can use multiplication.
There is a method for strings with the multiplication function.
So if I have I love times Julia, now I have to put this little space there because the concatenation here will not, by the multiplication function, will not put a space for you.
But if I were to just run that, I'm going to have I love Julia all in one go.
Now, there's also this string function and it takes all different arguments and the arguments here are two strings.
Again, I've got to put my little space there because this concatenation is also not going to put an automatic space for me.
So I can certainly do that.
Now, let's repeat strings.
What if you want to write out a few things a couple of times?
Here we just use the powers.
So I love Julia the string to the power three.
And if we do that, it's going to repeat three times.
I love Julia. I love Julia. I love Julia.
So that is the power function.
Now, how do we split things?
There is the split function.
And what the split function is going to do without any arguments except for the string is just going to look for the space character.
So let's run this.
Let's see what happens.
And if I split that, it's going to have I love and Julia.
So it's split on the three on the two spaces and it made three different sub strings here.
You can see this as an array, three element array of sub strings of Esky strings.
And there's just one one dimension, one column.
So they have I love Julia.
So the space spaces, as you can see, are removed.
But I can put a second argument in.
And that is where we just look at what we want the split to be.
So instead of putting no argument and it using space, we can say, well, please split for me on O.
Let's see what happens there.
So I space L, the O is gone.
And that's where the split is.
And then V, E, et cetera.
And then the split is at, there's a space there.
The split is at the O for obviously and another O in obviously.
Let's see what happens if I use the split function.
And instead of just a single value there, you can see there that I use double quotation marks.
So that's actually a string, not a character.
And if I, what would happen if I put something more than just a single character in there?
And as you can imagine, it splits on that word love and it removes that from our array that is the solution.
Now, what if I want to split everything?
Well, I just use this double quotation marks that is empty inside.
And now I have everything split.
Remember, as we did before by the index and just using a little for loop.
Now, we're going to look at regular expressions a bit later.
But in the meantime, have a look at this.
I'm going to create this computer variable called str underscore r and I'm going to put into it this string.
This is going to be a fairly extended sentence.
Let's run that.
I've put a semicolon there so it suppresses the output.
Now, look at this.
I'm going to say split this string, which is this is going to be a fairly extended sentence.
But do it this way.
So instead of just a whatever single letter, I'm using this R function here.
That tells Julia that I'm dealing with a regular expression here.
As I said, we'll have a look, an extensive look at that.
And an A and then this upright bar, which is usually shift and backslash on say on the Mac OS keyboard.
But anyway, A or E or I or O or U.
Let's see what happens now.
So whenever it finds either an A or an E or an I or an O or U.
So all these vowels that I've selected here, it's going to split.
And look at that.
That's quite an extensive split.
Now, once we split something up like this, we can join it up again.
So this means I'm going to join this split, which is just going to give me the sentence without that with all the vowels removed.
So this is going to be fairly extended sentence.
I see.
I think you can see what this is getting at.
So what I want to show you here is the split function.
And once you split, you can recombine them with a join function.
Next up, we're going to look at converting our strings into into integers and some other conversions.
So how do it?
