In this video, I'm going to show you how to use your Google account to use Python to do mathematics.
You won't have to install anything. Did you know that Python, the computer language that is so
famous, is great at doing all the math in your textbook? Python can do algebra, trigonometry,
calculus, linear algebra, and much, much more. Now, using Python can bring learning and doing
mathematics to life. It allows you to experiment with the work in your textbook so that you develop
a much richer understanding of the work. You can use Python to verify your results, and you can use
Python as a very sophisticated calculator to do all the tedious calculations for you. And all of this
is free of charge. Today, we're going to talk about setting up Python online using Google Drive. You
don't have to install anything. As long as you have access to Google Drive, you are good to go.
Fortunately, most of us have used Google Docs and Google Sheets, and we already have a Google account.
Just in case you don't, please go ahead and look online how to create a Gmail account
so that you have access to Google Drive. So in broad and basic terms, how does Python work? Well,
Python is a computer language. We write Python code, which a computer can read and execute. Now,
Python is a multi-use language. We can use Python to create programs and apps and even games. We can
use it to create websites and services. Python is arguably the number one language for data analysis,
and it is certainly the most used language in machine learning and artificial intelligence.
So as a computer language, the code consists of English-looking words that we call keywords.
They form the language. Now, by putting the keywords in a certain order, using the syntax of
the language, we get Python to do useful things. The reserved keywords are what constitutes the
language. Just like the word Python is an English word, we have that the word print, that's P-R-I-N-T,
print, is a reserved keyword in Python called a function. We can use the print function to print
something to the screen. Now, one of the reasons for the success of Python and other open-source
languages is that anyone can add new reserved keywords and syntax to the language, thereby extending
the capabilities of the language. Now, individuals or groups who add such functionality usually do it
for a very specific reason, mostly to solve a new problem. Such a new extension is put together in
a package. One such package is SymPy, which is short for symbolic Python. By adding SymPy to Python,
we get many new functions, classes and so on that extend the capabilities of Python to mathematics.
That is to say, symbolic mathematics. The SymPy package allows us to solve for x,
do symbolic integration and differentiation and so much more. There's also the NumPy package,
which is short for numerical Python. The added functionality in NumPy allows us to do numerical
mathematics. When we launch Python, we automatically get all the basic Python keywords and syntax.
Now, to use one of the many hundreds of additional packages requires us to first install those packages
and then to import them into the active Python session. While installation only happens once,
and then by the way, it isn't even required when using Google Drive since Google already downloaded
many of the packages to their own system. When you install Python to your local system, which I'll
cover in a different video, you have to both download and install that package and every time
you want to use that package, you have to import it. So the installation only happens once,
but every time you run Python and you want to use that package, you've got to import it.
Well, Google has done that all for you. It has downloaded and installed many, many packages,
so we don't have to worry about that. All we're going to do is import it every time that we want
to use it. Now, this is very easy, very simple. The import keyword in Python is used to import
packages. Now, before we go any further, let's set up our Google Drive so that we can use Python
to do mathematics. So here we are in a web browser. I am using Google Chrome and I've logged into my Google
Drive. So that will very simply be the URL drive.google.com. And as long as you have a Gmail
account, you're going to have access to Google Drive. Now, most of us have used at least Google
Docs before we could say new. And if we go down, there's Google Docs. And let's open one,
as mentioned very familiar to most of us. So let's go back to our Google Drive. And again,
new. And if we go down to more, we see we could do Google Drawings, Google My Maps, Google Sites,
Google Apps Script, and Google Jamboard. But we want something more. I'm going to click on Connect
More Apps. In the search bar, I'm going to start typing Colab. And we see that little one there,
Colaboratory. Let's click on that. We see at the moment of this recording, it's been downloaded,
it seems 55 million times. So let's click on that. And click on Install. And finally, continue.
Now it will ask you to sign into your Google account, you can go ahead and do that. And then finally make
Google Colab the default app for files that it can open. I'm going to say okay, and done. We can close
up this Google workspace marketplace. And if we now go to new, more, we see Google Colab. So most of us
just call it Google Colab, instead of using its full name. And this is it. This is our coding environment.
To write Python code, you need a development environment, an IDE, place where we type our
Google code. Google Colab is based on a project called Jupyter Notebooks or JupyterLab. But this is
provided by Google and everything runs on Google servers, and it's absolutely free of charge.
So I'm just going to close these release notes so that we have a bit more space. And there we go.
This is our coding environment. So let's explore a bit. First of all, right at the top, you can see
at the moment, this file, which is very much like a Google Doc, is called untitled 0.ipynb.
That's a very old sort of extension. It stood for IPython Notebooks, just to show that this is
actually all about Python. You can actually do other languages as well. But we're going to concentrate
on Python. So I can very quickly just highlight that section, delete it, and let's call this one
demo. So this is now demo.ipynb. And that's going to be saved directly to my Google Drive.
So the first two things that I really want you to have a look at is these two buttons here,
it says code, and it says text. Now this whole notebook is based on cells, you're just going to
create one cell after the other cell. And it can either be a code cell in which we're going to type
Python code, or it can be a normal text cell. And we see there's already one cell here
available to us. And that is going to be a normal coding cell. But if I hover in the middle,
I can see code and text pop up. And if I'm right below that code cell, I can see code and text. So
anywhere above and below, I can insert either a new code cell or a new text cell. So let's go right to the
top. And I'm just going to click on text. And that gives me a text cell and look, that's open just
above that default code cell that was already there. And it says double click or enter to edit.
So let's double click on that. And there you go, I've got a cell in which I can write normal text. So
I'm just going to write this is a sentence. There we go. This is a sentence. And I can now just click
outside of that, perhaps just in the next cell. And lo and behold, there we go. This is a sentence
as written as if this is a Google Doc, I can just write normal, normal English sentence. So let me
double click on it again, which opens it up so that we can edit it. So maybe I wanted to say sentence,
I'm going to highlight sentence, and perhaps I want to click bold. And now the sentence word is going to
be in bold. But look at that, that's a little bit of markup language, I see two star symbols in front
of sentence and behind sentence. And if you do that, we're going to see that it is bold, by the way,
look across here on the right hand side, you can see a little preview of the text that you are typing.
So let's click out of the cell. And now you can see that sentence is in bold. So let's just go up
and up again. So right at the top. So I'm not doing these sequentially. So I'm going right at the top,
and I'm going to enter a new text cell. Let's double click on it so that we can edit it. And you see
these two little T's here, it stands for toggle headings. And that's going to determine how big the
font is so that we can have a title, a subtitle and a sub subtitle. So let's click it once. And you see,
it does some boilerplate text for us. So there's a single pound symbol or hashtag symbol,
then a space. And then it says new section. If I get out of that cell, you see there at very large,
that is the largest font that we can have. So let's typically go back there. And maybe we'll call this,
let's replace that with title. So that might be the title. Let's go in between these two,
let's add another text cell there. And this time, I'm just going to do it manually. So I'm going to do
two hashtag symbols, and a space. And I'm going to call this sub title.
By the way, all I did was hold down shift and hit return or shift and enter. And that gave me
an execution of that cell. And so you can see title is big and subtitles a little bit smaller.
And then the normal, this is a sentence, that's just the normal paragraph. So you can well imagine
that this can be used just like a Google Doc or Microsoft Word, you can just create a normal
document, as long as everything you do goes inside of a text cell. And again, you can hover between any
of these text cells right in the middle. And you can add either a code cell, or a text cell.
So let's do the following, I'm going to do another text cell. And let's make it two hashtag symbols,
by the way, you can go all the way to six hashtag symbols or pound symbols. And that'll give you the
smallest sub sub sub sub subtitle. Sort of, it looks a bit odd when it gets that small anyway. And I'm going
to do package, I'm going to write package import. And I'm going to hold down shift and return or shift
and enter. Or I can just click out anywhere outside of this text cell. And there we go. So this section
is going to be about package imports. As it stands, a kernel of Python has been activated on the side of
Google. That's where your Python is going to run. And you can see that happening right at the top there
when you hit connect. Actually, as soon as you'd connect, that Python runtime is going to start.
So let's click on connect. And you see it is connecting at the moment. The little buttons go
green. And there we go, we see RAM usage and disk usage. A version of Python is now running on Google
servers. And I have access to it right here in my Google Colab notebook. So let's just type some Python
code. By the way, I'm going to be right here. And it's in a code cell. So yeah, I'm going to write
Python code. So I'm just going to say two space plus two. Now you don't need the spaces. But you know,
it looks a little bit neater when we do have spaces. And see that little play button. So when you are in a
code cell, you can hit the little play button. You can also just hold down shift and hit return just
as with a text cell. So let's hit that little button. It was very quick. And we see the code
was executed. And we get the result of the Python code right there. Two plus two is indeed four. Now,
this is not what we're here for, though, we want to extend the language. And that's what we spoke about
in the beginning. So let's add a new code cell. And the one package we spoke about a Simpy. And I also
mentioned that there's a keyword called import. So let's write some Python code import space
Simpy with two y's because that stands for symbolic Python. And as soon as I execute this,
we will see the little button run, we'll see a little check mark. And we see it took about one
second to do. And Simpy is now imported. Everything that's inside of the Simpy package is now available in
this Python session. So what Google did behind the scenes on their own servers, they downloaded
Simpy. So it's on their systems. But every time I want to use it, I have to import it. So if you had
Python on your own system, you would have had to install Simpy once. But then every time you write
some Python code, you would have to import it, you don't have to install it again. But you do have to
import it. Now this was just one way to use import. And if I want to use anything that's now inside of
Simpy, I have to reference Simpy. So let's type some Simpy code. So I'm going to say Simpy dot
init underscore printing. And I'm going to do open parenthesis, closed parenthesis. By the way,
there'll be some auto completion. So as soon as I type the open parenthesis, the closed parenthesis
was already put there for me. Now let's have a look at this. Anything in Python that has a keyword
directly followed by an open and closing parenthesis is called a function. And a function takes some input,
which we actually put inside of those parentheses. And the function does something with what you put
inside the parentheses and gives you some output. Now some functions like the init underscore printing
doesn't actually need anything to be given to that function. We don't actually pass and what we call
an argument inside of those parentheses, we can just execute this function. What this function actually
does, it allows mathematical typesetting to the screen. So when I do some mathematics with Python,
and the result gets printed out, it actually looks like your textbook, it looks like the mathematics
in your textbook. What happens behind the scenes is that it uses a language called LaTeX, which is
useful mathematical typesetting. So I'm going to execute this code cell by holding down shift and
hitting return or enter. Or remember, you can just hit the play button. Now that function is executed.
But just have a look at it. I could not just use the function init underscore printing. I had to say
simpy.init underscore printing open close parenthesis. Anything that I want to use that's inside of
simpy, I will have to say simpy dot and whatever that function or class or keyword might be that lives
inside of simpy, but is not part of the larger base Python. Now there's another way for us to do import,
and that's to import from the package exactly that which we want. Now there's another way to do
importing, and that's to import exactly what you want. So I'm going to import two things from simpy.
I'm going to say from simpy. So now I've got a new keyword here. Instead of import, I now have from.
So I'm going to say from simpy. Now I'm going to say import. And I'm going to list exactly what I
want to import from simpy. And I want, for instance, the sin function, which is this sin. And I want the
symbol pi, which is this py. So now I've imported something directly that I can use directly.
I don't have to say simpy dot sign or simpy dot pi. So let's execute this line of code. I'm going to hold
down shift hit return or enter. And there we go. I can now type directly the sin of pi. So sin is a
function inside of simpy. I'm extending what Python can do by these functions that live inside of Python.
But because I imported that function directly by using the from simpy import, I can now just use it
directly. I don't have to say simpy dot sign. I can just simply use sign. Same with pi. I can just
simply type the symbol pi. I don't have to say simpy dot pi. And so let's execute this. And you see
that the sin of pi is actually zero. We see the result there. If I did not do the from simpy import
those specific functions and keywords, I would have had to say simpy dot sign. And I would have had to say
simpy dot simpy dot pi. Now because I've imported simpy, this is also going to work.
And we see the result is also zero. So those are two ways that we can do the import. Either just say
import simpy, but then I really have to say simpy dot simpy dot simpy dot anytime I want to use
something inside of that package. Or I could just do the import of the things that I would need. So the
sign function, the symbol pi or the number pi, the irrational number pi. Now let's look at another
way to do this. I'm going to say import simpy as, so there's a new keyword as, and it's usually
something like SYM. I can use an abbreviation. It's called a namespace abbreviation. So let's hit shift
and return shift and enter. And now I can simply say something like SYM dot. Let's do the cosine
function, which is this COS cosine. And let's do pi. Now remember pi I can use directly because I've
already imported it as such. And let's hit shift and return shift and enter. And I see that the cosine
of pi is indeed negative one. But I did not have to write out the whole word simpy. So that I have to
say simpy dot, simpy dot. Now I can just say SYM dot. It's just a little bit shorter. And you can use
any abbreviation you want, really. Don't use reserved Python keywords though. And do remember that there
are some conventions that most of us stick to. For instance, numpy would just be import numpy as np.
That's just a common one. And there's many other common ones for all these packages.
Now some people like these abbreviations and some do not. Does it really take that much longer to
write simpy instead of SYM? Some would argue yes, because yes, it does take longer and others might
argue that it's just a little bit lazy. Now the last way that I want to show you to import a package
is dangerous. I'm going to show it to you, but I never use it. So I'm going to say from simpy import
star. And what that's going to do, it's going to import everything from simpy, just as we did here
with import simpy. But I don't have to use the simpy dot, simpy dot, or if I use the namespace
abbreviation SYM, that I have to use SYM dot, SYM dot, SYM dot. I can just use everything that's inside
of simpy without having to go to those lengths of typing the word dot, simpy dot, or SYM dot.
Now that might sound great, until you get to the point where you import more than one package,
and both sets of people who develop those packages use the same function names. One of the most famous
problems would be if I were to say import the following package. Import math. So I've imported
math now. That's a package. It's actually part of Python itself, but you actually, you have to import
it to get access to it. So I can say math dot sine of math dot pi. That's a different set of code
behind the scenes. Math dot sine and simpy dot sine, they're both going to do this trigonometric
function called the sine function, but they do it in very different ways. So let's do this. Math dot
sine and math dot pi. And now we get a numerical approximation of zero. We actually see one point
two, two, four, six, et cetera, times 10 to the power negative 16, which is this round of error,
because that just represents zero. It's a numerical approximation. So the sine function inside of the
math package is actually going to do numerical computation, whereas the sine function inside of
some pi is going to do symbolic calculations. And that's a big difference. And really, when we
want to do symbolic mathematics, we have to use the some pi package. It is great for symbolic
calculations. But look at this now, there's a sine function is why in in the math package, and there's
an S Y N function inside of the some pi package. So if I just said from some pi import star and from math
import star, and if I then use the sine function S I N, which one is it going to use? The one from the
math package or the one from the some pi package? And that can lead to some conflict and you'll have
to know how to deal with those. So it's best never to do from package import star. Rather use the whole word
or rather use a namespace abbreviation or import directly those functions that you want to use.
And then be careful not to import the functions directly from two packages and those two functions
have the exact same name from these two different packages. So be very careful there. So there we go.
We've seen how to set up our Google Drive so that we have access to Google Colab, which as you can see
is very much like a Google Doc. It's just another app that runs and I can do normal typesetting,
normal English sentences, but I can also write code. And then remember, by the way, in between
any of these code cells, I can add another code cell or another text cell. Beautiful. And we've
also seen how to import a package in different ways. Now the ones that we are going to work with
are some pi, we'll also work with a math package, and we'll also work with numpy, the numerical Python
package, but you've seen how to import these, and how the different methods can be used for the import of
what's inside of those packages. Remember that by importing packages we want to extend the functionality
of Python. And we can use Python to do our mathematics. And that's what we're going to do.
