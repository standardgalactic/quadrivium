So let's talk about matrices, the wonderful, very useful mathematical form of a matrix.
So a bit of a few differences between a matrix in computer science, or at least here in Julia,
and the mathematical variant, but in the end it all works out nicely.
Now the first thing I just want to get, to talk about is just this, what is a vector and what is an array?
Okay, so I'm asking this boolean question, is an array of 64-bit integers in a column format,
is that equal to a vector of 64-bit integers?
And the answer is going to be true.
Let's just toggle all of these, so we just get rid of all the output.
There, there we go.
There we go, there we go.
Where are we, where are we, where are we, there we go.
So, if we run this again, we see that it is true.
So, an array and a column vector, there's exactly the same thing.
But now let's ask an array, 64-bit integers in this row format, is that equal to a matrix?
And indeed, we are going to get the true back.
So even though we've referred to this as the row initially,
it actually means that we are talking about two dimensions.
And I'm not talking about the dimensions of a vector.
If I have a column vector with 10 values and 10 elements, that's a, that's a 10-dimensional array.
Yeah, we're just talking about rows and columns, referring to the two.
But as soon as you have a row, I mean, a row does have, a row does have columns in it.
So it is going to say a two there.
So, if it is an array, it doesn't matter if these are floats or integers,
but the two there actually means it is a matrix.
So let's create our first matrix.
And we're going to do it this way.
Remember when we did not put any commas in between, that meant that it was a row.
So this one, two, three is going to be a row.
I used the semicolon to jump to the second row, four, five, and six.
Semicolon to jump to the seven, eight, and nine.
So there we go.
It's a three by three array.
And you see 64-bit integers, all of them, and the two again.
So even if we just had one row, that will still be a two.
So now we have three rows and three columns.
Now, there are other ways to go about this.
Look at doing this.
I have these square brackets on the outside.
I have the semicolon separating the two.
But inside of that, instead of not having commas, I do have commas now.
But I also have these inner square brackets.
What do you think is going to happen there?
Well, we get this.
A six element array as far as just a column is concerned.
Okay, so that is the output that you're going to see from there.
Now, let's go on.
Let me do the exact same thing.
So I still have the commas.
I still have the square brackets inside of the larger set of square brackets.
But instead of a semicolon, there's just a space.
So that's another way to go about it.
And look what it did now.
Now, it took this one, two, three and made column vectors, a column vector out of it.
One, two, three and then four, five, six.
And that is just because there's a space there now and not the semicolon we had there.
So remember that little difference.
Now, let's mix things up.
Now, I'm going to have the inner brackets with the outer square brackets.
I'm going to still have the semicolon.
But now I'm not going to have the commas there.
So what's going to happen there?
Now, this is all for version four.
Anything after version three, I should say.
Up till now, that is up to 0.4.2.
I get these as two rows.
The one, two, three will now be across a row.
Four, five and six will be on the next row.
Now, once again, we're going to do this.
No commas, no semicolon, but still the inner brackets, inner square brackets.
And this will be almost the same as doing this with everything in.
This one with nothing in.
It's just going to give me this one long row.
So beware of your notation in Julia.
You're going to get different things depending on your use of square brackets,
your use of commas, and your use of a semicolon or a space.
Now, let's repeat some rows.
These are obviously going to be rows.
There's spaces in between.
So take this one, two, three, which is a row vector, and repeat it three times.
So we're going to get one, two, three, one, two, three, one, two, three.
What about this?
So that was doing it along the rows, but what about doing it like this?
I can specify row and column.
So if we do this, it says we'll make one row of it and three columns.
So there's my first one, two, three, my second one, two, three, and my third one, two, three.
Good.
So what will happen if we specify do it over two rows, rep mat, two rows and three columns?
I think you know what's going to come.
So I have the 1, 2, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3.
So what it did was it did this 1, 2, 3, 1, 2, 3, because this was specified as a column vector.
So that's what it wanted, and it wanted two rows of that, because there's a 1, 2, and a 3.
A next row of 1, 2, and 3.
And make three columns of all of that.
That's a column, that's a column, and that's a column.
Good.
So if I had 1, 2, 3 with the spaces in between and now make two rows and three columns of that,
there's my 1, 2, 3, another 1, 2, 3 and another 1, 2, 3.
So three columns of that and then two rows of that.
Excellent.
Now a matrix is indexed by its row and then by its column number.
So if I call a computer variable matrix, MAT, remember what that was?
We created it way up here, 1, 2, 3, 4, 5, 6, 7, 8, 9, a 3 by 3 matrix.
If I were to just refer to it, MAT, and then the square brackets, this is going to be the row value.
That's going to be the comma value.
So give me the element that is in row 2, column number 3, and then indeed that was the 6.
Now we can almost get the same thing here, just get index matrix 2, 3, and we're going to get back that 6.
Now let's just make a new column.
I'm going to use the rand function and I'm going to say 6, 5.
So between the values of 0 and 1 inclusive, I'm going to get a pseudo-random selection of values in 6 rows and 5 columns.
So there we go, a big 6 by 5 matrix of 64-bit floating values.
And I've called that MAT underscore rand.
Now let's make a rand-in function.
So that's slightly different.
So that means it comes from the standard normal distribution.
That means a mean of 0 and a standard deviation of 1 create for me from that a 3 by 3 matrix.
And there is my 3 by 3 matrix.
So that's the use of rand and rand-in just to create a matrix.
Let's create a tensor.
Well, let's call it a tensor for now.
Tens underscore rand.
And that is rand 3, 3, 4.
That means 3 rows, 3 columns, but it's going to be 4 values deep.
And this is going to be the front one, a 3 by 3 matrix.
And you see this colon, colon, colon, 1.
So that's the front one.
Behind it stands this 3 by 3 matrix.
Behind it stands this 3 by 3 matrix.
Behind this stands the 3 by 3 matrix.
You can always think of this as this elongated or rectangle at least.
3 by 3 on the front side and 4 deep.
Just to show you what the type of this is.
And it is an array, 64-bit floating values.
And now for the first time we see something else.
It's not 1, which is just a column, 2, which was a row, or then a 2 by 2, or a row and column matrix.
Now we see we've added this third dimension.
So let's create these two matrices just to show you how Julia handles matrix multiplication.
So I have these two matrices, 1, 2, 3, and 2.
So 1, 2 would be a row, 3, 2 would be a row, and 1, 3, 2, 4, 3, 2.
And it's the second one that is printed to the screen here, the 2 by 3.
Remember the rules of matrix multiplication.
The number of columns in the first matrix must equal the number of rows in the second matrix.
And the result in size.
So there we go, the 2, the 2 there is equal to the 2 there.
And the result will be this outside, but it will be a 2 by 3 matrix.
So you can only do it when this column size is the same as the second one's row size.
So I'm saying matrix A times matrix B.
And there we get, we, oh, let's just run that and then run the multiplication.
And there is our multiplication.
We can also do element-wise operations.
So that was matrix multiplication.
So I'm going to create these two arrays here.
Let's print them to the screen.
Or I should say just matrices.
So there they are, two 3 by 3 matrices.
You see them there, 64 bit integer values in both.
And instead of multiplying them, I'm using this dot multiply for syntax.
That means it's not normal mathematical matrix multiplication.
I'm taking one element and multiplying it by the same element in the other matrix.
So it's going to be 1 times 2 to give you 2.
The 3 times 3 to give you 9, etc.
So it's element by element.
And indeed there we see the 2 and we see the 9.
Now we can ask element-wise questions.
Let's just use the RAND function.
So between 0 and 1.
5 by 5, 2 5 by 5 matrices.
And I'm asking, on an element-for-element basis, is the value in matrix R smaller than the correspondent element in matrix S?
And I'm going to get this matrix of boolean values when it is smaller.
Again, as we did with the column vectors, I can say, well, take the first one and check element by element if its value is smaller than what is in there.
That's going to return something for me.
And if that is so, I'm going to add the value that is true.
I'm going to attach the value 100 there.
So I can now do that element-wise operation again and we should see false everywhere because everything in the mat R is now going to be larger.
Let's just look at the dimensions, sizes, etc. of a matrix.
Now remember a matrix B.
I can ask what its number of dimensions are by this NDIMS function and it returns 2.
There were rows and there were columns.
For the tens underscore end, remember there were 3.
We had this depth to it.
Size returns this tuple, and we'll talk about tuples, 2,3.
So it's got 2 rows and 3 columns.
See the difference between the number of dimensions there and the size of it.
And if we ask for the size of this tens underscore end, of course we're going to get a 3,3,4.
I can ask for the size of the number of rows in mat B.
And that is what rows refers to.
Rows is the first dimension.
And it tells me, well, there were 2 of those.
I can ask how many columns there were.
Well, there were 3 columns.
And I can also ask the length of the matrix, 6.
Because it's 2 by 3.
And that gives me all of those.
Now let's have a look at how Julia counts these 6.
Where do they go?
So I'm going to have this for loop inside of a for loop.
The outside is going to run from 1 till the size of the rows.
So first it's going to run through the first row.
And in the first row it's going to execute this little for loop and then run to the second row.
And inside I'm going to have for the columns.
So it's going to run from 1 till the columns.
So I'm printing element in a row with I and column.
There is the value at that position IJ.
Look at that section of a for loop.
And you see very quickly how it runs.
Element in row 1, column 1 is 1.
Element in row 1, column 2 is 3.
Element in row 1, column 3 is 2.
So let's check that.
Let's just run that.
And there we go.
We can see the rows are 1, 3, 2.
The columns are 1 and 4, 3 and 3, 2 and 2.
So you can work out exactly where the element, these 6 elements are.
So we've got this end to sub function that returns the row and column values of an element specified by its index.
So now I'm going to run from 1 to 6.
Remember the length of the matrix was 6.
And I'm going to say element I is matrix BI and has row and column value of such.
So this is going to work.
Element 1 is 1 and has a row and column value of 1, 1.
So that is what this end to sub returns for me.
So if you look at these two, this for loop inside of a for loop and this for loop down here, it will show you exactly how Julia goes about numbering these elements in a matrix.
Now remember I said the size returns a tuple.
So I can actually give each tuple a computer variable.
So I'm going to use RWS and CLMS for the size.
And remember that was a 2 by 3.
So RWS is now 2 and CLMS, so there will be rows and columns, is 3.
So I can print the number of rows are 2 and the number of columns are the number of columns, the number of columns is I should say.
Okay, proper English there.
There you go.
You can work out from this tuple or you can give each of these values in the tuple.
It's in computer variable.
Let's just have some special matrix functions, the identity matrix, I, and we're going to make it 5 by 5.
There we go.
1 is along the main diagonal.
0 is everywhere off of the main diagonal.
That's a 5 by 5 identity matrix.
I can make a matrix of all 0s specifying the number of rows and columns.
There we go.
A matrix of all 1s specifying how many rows and columns I want.
I can do a diagonal matrix and I can tell Julia what I want on that diagonal here.
I want to use a collection of this range from 1 to 5 with a step of 1.
So along the main diagonal, along the main diagonal, I'm going to get 1, 2, 3, 4, 5.
I can also specify what I want on my main diagonal by just using an array of values that should go inside of,
and then I'm using pi there, that should go inside of the main diagonal.
And there we have 3, negative 2, 3, and this is a shorter version at least of the value of pi there.
So count the number of 0s in something that has a main diagonal with values of 1 to 5.
It's going to return the count of the non-zero numbers.
And remember on a diagonal matrix, everything is 0 except everything on the main diagonal,
and there are only 5 values.
So count the non-zeros, I should be clear.
Now a matrix of boolean values, indeed, we can have that.
So just 3 by 5 set of true values, a 3 by 2 set of false values, that's all possible.
Now let's slice up an array.
That's quite a useful thing to do, but it can be a bit tricky.
So let's make this matrix, mat underscore slice.
It's a 5 by 6, 5 rows, 6 columns, using the rand function.
So that's values from 0 to 1 inclusive, et cetera, random selection there, 5 by 6 matrix.
We can look at it there.
Now I'm going to slice only by the first column.
That's all I want to see.
And remember it's rows, comma, columns.
So, and I use these square brackets because I'm asking the value at that index.
Now, we can see the column value is 1, so it's certainly going to be this first column.
But I want all the values in that first row, and I can use shorthand for that by this colon sign.
So it says all the values in row 1, comma, or the row and the column values.
Let's have a look what it returns.
So it says that's rows, so all the rows.
So that would be a row, that would be a row, that would be a row, that would be a row.
You can see how quickly one can get confused between the two in column 1.
So all the rows just in column 1.
Now, another way to look at it is to say go from 1 to the end.
That would be same as just having used that colon sign.
But I can say go from 1 to the end, so that's all the rows.
So that includes all the rows, but just for column 1.
And we get the exact same thing back.
Now, let's go from row 1 and 2 for all the columns.
Just row 1 and 2 for all the columns.
And there's row 1 and row 2 for all the columns.
Now, let's take the transpose of a matrix.
Remember, transpose makes all the values in a row, makes them column values, all the column values in a row value.
And we use this apostrophe there, mat underscore slice for that apostrophe.
That gives me the transpose.
And that's exactly the same thing as calling the transpose function on this matrix.
We're going to get exactly the same thing back.
There's an inverse of a matrix.
So I can have this matrix 1, 2 in the first row, 3, 4 in the second row.
And I can just ask for its inverse.
And you see the inverse there.
Now, remember, we can solve a linear system of equations in this format.
I'm going to make this matrix A of coefficients, my matrix of unknowns X there,
and my solution column matrix there, column vector there, I should say, B.
So let's cheat a little bit.
You can have a look at this.
So 3 times 2 is 6, minus 2, plus 8, that gives me 12.
But you can see all these values in brackets here.
They're 2, 2, 2, 1, 1, 1, 4, 4, 4.
So I've cheated a bit just to make a set up like this.
But imagine I put X in the place of 2, Y in the place of 1, and Z, or Z in the place of 4.
So it will read 3X minus 2Y plus 2Z equals 12.
And I have the system because the X's are the same for all three equations.
The Y value is the same for all three.
So from that, I can make this matrix of coefficients.
So I just take the coefficients 3, negative 2, and 2.
There they are, 3, negative 2, and 2.
2, 0, negative 2.
2, 0, negative 2.
3, 1, 3.
3, 1, 3.
There they are.
And the solutions are 12, negative 4, 19.
12, negative 4, 19.
Now I can write it like this.
A, which is this, times X.
Now this X is not just X.
It is a column vector which states X, Y, and Z.
So if I take A, which is this, times X, Y, and Z.
So it's a 3 by 3 matrix times a 3 by 1 matrix.
That equals a 3 by 1 matrix.
And there it is.
So I can divide both sides by A just to get X on its own, which is X, Y, and Z.
But in matrix format, that means taking the inverse.
So if I take the inverse on both sides, I land up with this.
X equals A inverse times B.
And that will give me the values for X, Y, and Z.
So let's do that in Julia.
So I've got my matrix of coefficients here.
3, negative 2, and 2, which makes up a row.
So there's the spaces in between.
The next row comes after the semicolon, etc.
And I have my column vector of my solution.
So I have A and B there.
There they are.
And instead of taking the inverse,
there is the shorthand, the shortcut in Julia that you can get used to.
So A and then there's this backslash B.
And that gives me my solutions, which should read 2, 1, 4.
Just as I had them there, 2, 1, 4.
It all works out.
But that is exactly the same way, which takes a bit longer with the Julia code,
to say the inverse of A times B.
That looks like that.
It's still 2, 1, 4.
So this is just the shorthand notation for A inverse times B.
Now arrays of a vector or matrix form can be concatenated.
Let's do that.
So I've got matrix A and matrix B here.
Mat A, mat B.
2 by 2 matrix, 2 by 2 matrix.
And I'm going to horizontally concatenate them.
First matrix A and then matrix B.
You can well imagine what's going to happen.
There's my 1, 2, 3, 4 there.
My 10, 11, 12, 13 there.
And it's concatenated them horizontally.
Okay, that would be the same as just doing that.
Remember, there's a space in between the two.
In other words, this is a row that has been produced.
And you see we get exactly the same.
We get VCAT, which is a vertical concatenation.
You see what happened there, which is the same as using a semicolon in the array format there.
Good.
Reshaping.
Let's take a linear and just an array of values.
We're going to collect from 2 to 12 in increments of 2.
So there we go, 2, 4, 6, 8, 10, 12.
And I can reshape them.
So reshape the array as a 2 by 3.
So this 2 by 3, 2 times 3 equals 6.
So it better work out to have the 6 elements there.
And it will reshape that for you into a 2 by 3 matrix.
Not a bang.
So this is not permanent.
So we can sort, remember, let's make a matrix.
We call it sort underscore mat.
And it's going to be a random value.
Choose from 1 to 10 in a 4 by 5 pattern for me, please.
There we go.
4 by 5 matrix of random integers.
See the random integers between 1 and 10 inclusive.
I can sort them by dimension 1.
What does that look like?
So let's just have a look at it.
So we had 7, 5, 8, 8, 5.
5, 5, 10, 10.
And what has it done here?
Look at the differences between these two matrices.
So it went down every single column.
So we have a 7, 5, 3, and 8.
And it put them in order 3, 5, 7, 8.
5, 5, 3, and 7 down this column.
And it made it change the rows.
So it goes column by column.
But it changes the rows in that column.
So that's what I mean by rows here.
Even though we put a 1 there.
So if I use the 2 there, it is going to go this way out.
So let's just go back up.
So we can see our matrix there.
It was 7, 5, 8, 8, 5.
So for each of the values in these five columns,
I'm going to sort them in a sending order,
which makes it a 5, 5, 7, 8, 8.
So don't get confused between the way that this sorting is done.
Let's use rank, determinant, and trace of a matrix.
Let's create this 4x4 matrix very quickly.
We're going to rank the matrix,
which is something we use in linear algebra.
It has a rank of 4.
The determinant, which is a difficult thing to work out in a 4x4 matrix,
doing that by hand takes a phenomenal amount of time.
And very quickly in Julia, we see the determinant at least as not 0.
And then the trace just adds the values on the main diagonal.
It can work out the trace for us very quickly, 25.
Now we can do the trace by hand.
I've just put in just for fun a little bit of some script here.
Remember, size returns a tuple to me.
So that's going to be the number of rows and the number of columns.
I'm making this global variable.
It exists outside of the for loop.
Call it my underscore trace.
I'm setting the value to 0.
So my trace, which starts off at 0 inside of this loop.
And remember, the loop is going to go from 1 to the number of rows.
And we're just going to choose the value at index ii.
So initially, it's going to be index at row 1, column 1.
Then row 2, column 2.
Then row 3, column 3.
And we're just going to keep on adding them with my trace.
My trace is something that existed outside.
So I can just call it directly in this print statement.
Please print my trace for me.
And lo and behold, we see it is also 25.
So that's a lot of fun with matrices.
And obviously, it gets a lot more powerful than that.
Just to give you some idea of how to work with a matrix.
Now, next up, we're going to look at just a bit of set theory and its calculations as far as Julia goes.
