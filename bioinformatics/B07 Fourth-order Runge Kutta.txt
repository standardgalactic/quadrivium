Good, we're going to move over to fourth order Ranga Cutter.
So imagine we're still dealing with x, moving along some step sides.
But y sub n, we're going to have this weighted average on this side,
instead of Euler just being a sub n, or f of x and y,
without our n value.
We're going to have this with n equals 4.
So we're going to have w sub 1, k sub 1, until w sub 4, k sub 4,
such that k sub 1, k sub 2, k sub 3, k sub 4 are these values.
For k sub 1, I'm just going to get the slope at the point,
which is what the differential equation is telling us.
At k sub 2, I'm going to move from x sub n some fraction of the step size,
not the full step size, and that fraction I'm going to call alpha sub 1.
I'm plugging in my y value, it's going to be the previous y value,
plus some fraction of the step size, times k sub 1.
I'm going to plug in for my x and y values.
For k sub 3, I'm again going to move on some fraction of the full step size,
so not the full step size, call that alpha sub 2.
And here we're going to have beta sub 2, another fraction of the step size, times k sub 1,
plus another fraction, beta sub 3, of the step size, times k sub 2.
And it comes even worse when it comes to k4, again a fraction of h,
and then beta sub 4, h, k sub 1, beta sub 5, h, k sub 2, beta sub 6, h, k sub 3.
So every k value builds on the 1 before, and we move along some fraction of the step size to get the values.
Okay, so imagine those would be my values that I've set up.
I'm going to w sub 4, k sub 4, and I were to tailor expand this,
and if I were to find parameters such that it ends up properly,
it agrees with a fourth order tailor polynomial,
which we're not going to do in this lecture series,
I'm going to end up with Ranga Kata fourth order,
which you're going to plug into a computer system, write code, use MATLAB, use Excel for that matter,
and you're going to get x and y values which you can plot,
which will give you a numerical estimation of the solution.
So here we go, y sub n plus 1 is going to be y sub n plus,
I'm going to weight these 1, 2, 2, 1, that adds up to 6,
so I've got to divide it by 6 to get the weighted average of those,
such that k sub 1, is this going to be the sub at the point?
k sub 2 is going to be x sub n plus the half of the step size for the x value,
and for the y value, the previous y value plus a half of the step size times the value I got for k1.
k sub 3 builds on that, I'm again going to move across half of the step size,
and y sub n, half of the step size times the k sub 2 value,
so it builds on that, and k sub 4, move the full step size across,
and then y sub n plus the full step size times k sub 3.
So I'm going to plug in all of those values there,
and for every time I'll give a new x sub 1 value,
new x sub n plus 1 value, new y sub n plus 1 value,
plot all of these.
Every time I'll have a local truncation error,
and then I'm going to have a global truncation error,
but for most problems that you set up as a model as a differential equation,
you can use different numerical methods,
but Ranga-Kata fourth order, RK4,
is the one that is used most often to start off with,
and will usually suit, or it suits the majority of purposes,
and if you are going to try to memorize anything,
this is obviously what you should do in real life,
obviously this is just going to be managed by some computer system.
