In the first tutorial we looked at how to use ChatGPT, that's GPT-4 and ChatGPT Plus,
to do our exploratory data analysis.
So we uploaded a CSV spreadsheet file onto ChatGPT using the code interpreter and we
just used some normal prompts, did a little bit of prompt engineering to get the results
that we want.
Now what we're going to do today is play with one of the plugins and a Notable plugin is
Notable.io.
So Notable.io is a website all on its own.
You can sign up for free and I'll just show you briefly how to do that.
And it gives you access to a notebook environment.
It's a very special kind of notebook environment because you can share with others.
It actually has some added functionality that you won't get in a normal notebook.
So if you haven't seen a notebook before, just look up Google Colab or Jupyter Notebooks.
It is a notebook environment.
It's a page that looks very much like a Word document, other than the fact that it runs
in a web browser.
And with a Word document, remember, you can format your text nicely.
You can add images.
You can add sounds even.
There's lots of things you can do with a Word document.
But with a notebook, you can also add code and see the results of that code.
So it's beautiful for a research document because you can put out all your thoughts,
your ideas.
You can just write them all out.
Format them nicely with headers and subheaders, sub-subtitles, etc.
But you can also put in code and you can see the analysis, the results of that code.
And that's exactly what Notable.io gives you.
It gives you a notebook in the cloud.
Now ChatGPT allows us to add some plugins.
So you have to go into the plugin store and search for the Notable plugin.
Now you've got to set these two things up that they work together.
So when you do that install, it'll ask you to do a few things while on one tab of your
browser you've got Notable open and the other one you set up your Notable tab and it takes
a little bit of setup.
And I've done it a couple of times and every time it's sort of different.
And I think it's just how the updates roll.
So you'll have to see what it asks you and just go with it.
I mean, it's not really not that difficult to set up the plugin.
What it would probably ask you to do is to set up two-factor authentication because
you want to try and keep things secure.
So why would we go through all of this?
We just used ChatGPT in the previous tutorial and it gave us all the results we wanted.
The problem is even though that chat that you're having, you know, is saved on the left hand
side on that sidebar.
Maybe you want something more permanent.
Maybe you want something that you can share with others.
Maybe you know, have this document that others can work on as well.
And that's what Notable.io is going to give you.
So what's going to happen is while you chat and the results are being created in ChatGPT,
it's also going to populate the notebook.
And in the end, you've got this notebook on Notable.io that you can just use again.
You can add to it just by going into the notebook itself, not using ChatGPT, and you can share
it with others.
As I mentioned, it is a real nice environment.
So we're going to open up Notable.io on one tab, and we're going to open ChatGPT on another
tab in our browser, and I'll show you how it works.
Here we are on the Notable website.
Note that it is N-O-T-E-A-B-L-E, Notable.io.
And this is where you're going to sign up for a free account.
And this is the access that we have to a notebook that will do the code for us, where the code
will be generated.
But it is a notebook such as Google Colab or Jupyter notebooks.
And as much as that you can have images, text, you can have nicely formatted text, hopefully
you know or have some experience with notebooks.
So go ahead and sign up for that free account.
And then we're going to use the Notable plugin in ChatGPT Plus that'll populate the solutions
that ChatGPT gives us right inside of our notebook.
Now I've already signed up for a free account, so I'm just going to log in.
Once you've logged in, you'll get to your space and this is where you'll see all your projects.
Now I've created one here called My First Projects, and what I'm going to do is just to click
on that and we get to a page where we can create our first notebook.
Now that's not what we're going to do, we'll just be in this project.
Now what you're going to do, you're going to go up to the URL at the top of the browser,
and you're going to select that URL and you're going to copy it into your clipboard because
we need to paste it into a chat session on ChatGPT.
So here we are in ChatGPT.
This is a brand new chat and I've selected GPT-4 since I am on the GPT Plus service.
On the little drop down box, we'll see that I have selected the Notable plugin.
There's Notable and I've put a little check mark there by clicking on that open box and
we can read on the left hand side.
It'll say create a notebook in Python, SQL and Markdown to explore data, visualize and
share notebooks with everyone.
So you'll have to search for this Notable app if it is the first time that you're using it
and make sure that it is available in your ChatGPT session.
So there's my first part of my prompt.
I said use this project and I've pasted that URL from the Notable website where my project
was open, let's just go back to that page, we can see where this project is open, there's
no notebooks here or if you've created notebooks, prior notebooks, it'll be listed here.
But in this my first project, project page of mine, there's no notebooks, but it is the
URL at the top here that I have copied and pasted.
So here we go.
I'm just saying use this project and I've just pasted that URL in.
Now I've submitted this as a message and the responses aren't understood.
I've set my first project with a project ID.
It gives us an ID as the active project.
How can I assist you further with this project?
So my next message, I'm just typing create a new notebook called eda.ipynb.
Now the .ipynb that is the extension of a notebook file.
So add that and I'm just going to call my notebook EDA for exploratory data analysis EDA, which
is once again, the example that I'm going to use.
So let's click on the send message button and see what happens.
And you can see the Notable plugin is working and saying using Notable and the little wheel
is spinning.
There's some work happening behind the scenes.
Now if we open this message, we can see the actual code that was used in sending this
message to Notable so that Notable knows what to do.
And we get the message back.
I've created a new notebook named eda.ipynb for you.
You can access and follow along with the notebook using the following link.
Now before we click on this link, let's just go back.
And now on this my first project page, we see we actually have a notebook called eda.ipynb.
So that notebook was generated.
So I can either open it here or let's just follow the link that was given to us by ChatGPT.
And there is our blank notebook.
And suppose we can make a whole video tutorial about using Notable as your notebook environment.
It is similar to using something like Miniconda and installing your own Python environments
such that you can use JupyterLab or Jupyter Notebooks, similar to using Google Colab.
If you've used that before, it's just a notebook environment.
And it works pretty much the same as many of these other than the fact that there's some
added extras.
And I would implore you just to take some time and give Notable.io a try, not through ChatGPT,
but just as your notebook environment.
Play around with it.
As I said, there's a few more added extras here, which you're not necessarily going to
get with other notebook environments.
So my next message, I'm saying add the title, and then I put it in quotation marks, data analysis
for the heart disease project.
So I'm just asking it to add a title to my notebook.
And if you've never seen notebooks before, it is this idea of being able to mix text, to
mix titles, subtitles, paragraphs, images, and code.
And the results of the code all in one place.
It's like a Word document, but much, much more powerful.
So let's have a look.
Again, we see that using Notable, that plugin is working.
It's generating some code that it's sending to Notable.
And it's now working on your notebook on your behalf.
And it says, I've added that title.
So let's go back and have a look.
And there it is.
It's put a markdown cell.
Now that's what we call these, see these little plus signs.
If I hover over them, I can add a new cell above the current cell, or I can add a cell
below the current cell.
Now the notebook started with a cell right up there.
And you know, we haven't used it because we've just asked it to add a title.
And you can see the text is quite large.
This is formatted text.
And the language used for formatting the non-coding part of a notebook is called Markdown.
And you can see that the cell is a Markdown cell.
And if I click it open, I see I can do Python, SQL, Markdown, or create a form.
So these are the cells.
And let's go to this one at the top.
We see that that was a Python cell.
So let's just type some Python code in there.
I just want to show you.
Let's do two plus two.
And I'm just going to execute it.
See that little play button there, which is going to execute that code.
And that's Python code that's going to run.
And we see, you know, the result printed right below that cell.
So this is the whole idea of cells will have coding cells.
When you execute that cell block, you get the results.
And then we have normal text cells like this as well.
So if you wanted to just create a new cell above this or below that manually, you can do
that.
You can use this absolutely without chat GPT.
Now I've typed add a subtitle.
And I'm going to call it data import.
And you can see I'm only capitalizing.
It's only uppercase for the D. It's just a bit of styling choice on my side.
Just so that when I look at the notebook later on, it's nicely styled, nicely formatted.
And I try and keep things neat that way.
Okay, so that's been added.
Let's go to the notebook, see what's happened.
And definitely we see data import there as the next cell.
We can see clearly it's smaller than the previous title, which I've kept as a very large text.
And I just asked GPT to make that a title.
And if it's used the biggest font that it can.
So let's just double click on that.
So if you double click on a text cell, a markdown cell, in other words, it'll show you how that
code was generated, or at least how that title was generated.
And it was generated by starting off with a pound symbol or a hashtag symbol, then a space.
So a single hashtag, that means the largest text size, or the largest font size, then if I look
at the data import, double click on that, you see it's two hashtag symbols.
So that'll be one size smaller.
And you can go up to six hashtag symbols or six pound symbols.
That'll give you the smallest sub, sub, sub, sub, sub, subtitle.
So that'll be the smallest.
If you don't put anything there, of course, that's just going to be normal text.
So that is how it's generated.
So now if you want to generate your own, now you can always just add a new cell there.
You can choose whether it's going to be Python, SQL, markdown.
So let's keep it marked down.
And I'm just going to write this as a, this is normal text.
So you can just type that there.
If you want something to be written in bold, you can do either two stars and say bold, two
stars is bold text.
The other way to do that is just double underscores.
And you can just say bold again.
So either double underscores before and after the word.
And if you put a single one, it's italics.
So it's either a single star or a single underscore, and then that'll be italicized.
And so if we just run this code block, I just held down shift and hit return of shift or enter.
And you can now see that's, that's normal text.
This is normal text.
Bold is bold text.
Bold again, italics.
So you can absolutely just add your own here.
And you can also move them around by just clicking and dragging on them.
See, there's that little symbol right there at the top.
These little colon, four colon symbols in a row.
So you can definitely do that.
And of course, we can simply just delete it.
Now, one of the beautiful things about this is that people can work on notebooks together.
So you can share these notebooks and someone can leave a comment for you.
And so if you collaborate, you can see on the right hand side collaborate with your team.
Many people can work on the same notebook, the same data analysis,
or you can share that with your with your colleagues.
For now, though, I'm just going to click on this little trash can.
And that's just going to delete that cell for me.
So we've done this cell now data import.
Let me let me also delete this one.
So we know we are stuck with this data import.
That's the last place that we left that we left chat GPT.
So let's go back to chat GPT.
Now, I've got some data CSV file common separated values spreadsheet file on GitHub.
And I've just pasted the URL for that CSV file on GitHub into my next prompt.
And I've and I've typed import the data from the URL.
And then I give it the URL.
And then I say and assign it to the variable named DF.
So let's do that.
So the one thing is, it's good if you have a little bit of Python knowledge,
it'll help you along.
And because I specifically enforcing the fact that the importation or the importing of
this data set, the spreadsheet file should be assigned to a computer variable that I'm calling DF.
It's quite a common thing to call your data, your spreadsheet files that are converted to data
frames to call them DF.
Let's just have a look at the code now.
And exactly that is what's happened.
It said import pandas as PD.
So that's the way if you don't know how Python works.
There's so many libraries out there that extend the functionality of the Python language.
And one of them is called pandas.
And pandas is great for importing and working with data.
So if your data is in the spreadsheet format, you can import that spreadsheet.
And then you can manipulate that data.
You can analyze that data.
You can create plots, et cetera, from that data.
And so the pandas library is one of the success stories or reasons why
why Python is such a success in data science itself.
So import pandas as PD.
And that's another common thing to do.
Pandas, you know, it's six letters to type pandas all the time.
Because if you want to use this extra functionality in this extra package,
you have to reference the package in the format that we're doing the import now.
There are other ways to do it.
We can discuss that at a later time.
But it's 1, 2, 3, 4, 5, 6 characters.
And we can just use these abbreviations.
So we say as PD.
So I don't have to write pandas every time.
I can just say PD.
So here we have df equals.
So the equal symbol in a computer language is not the equal symbol that we get in mathematics.
Yet it's an assignment operator.
It assigns what is to its right to whatever it's to its left.
And to the left of that assignment operator is the name that I asked for, df.
So we see the df.
And then it's going to use the read underscore csv function in this pandas package.
So it's saying PD dot read csv.
Read underscore csv.
That is the actual function.
And now it's passing that URL as a string object to this function.
And that now will import that data from GitHub.
And it'll assign it to this variable df.
It'll assign it to that to that variable df.
So that is a beautiful thing.
I just wrote some stuff in in chat GPT.
The data was somewhere on the web.
And it's just imported into this notebook.
And I've mentioned this before.
But the beauty of all of this is, if you work in chat GPT, sure enough, you can save.
Or this chat that you're having will be saved.
If I were to open this, you'll see all my previous chats that I've had.
It'll be saved there.
But it is much, much nicer to have this notebook generated for you from all the results.
And you can just go back to this notebook, share this notebook.
Everyone can look at the data analysis that was done.
It is such a nice thing to have a research notebook such as this.
Now, if you've seen my last video, you know that I like to tell chat GPT about the data, about the variables.
And I would actually use much more information that I've written here.
But you can read that.
And that just gives chat GPT some background knowledge about the data set.
If you are the one using and analyzing this data, it's good that you know something about this data and tell chat GPT.
Chat GPT will do a wonderful job of interpreting the results.
But you can give it a lot more power, a lot more accuracy if you tell it a little bit about the data.
For instance, describing what each of the variables are.
Again, if you just watched the previous video in the series,
I asked for specific EDA on the numerical variables, the categorical variables.
And we'll do that here as well.
So it's just good to tell chat GPT about these, perhaps the encoding.
Our response variable here is called heart disease with a zero.
If someone does not have heart disease and one, if they do, tell chat GPT about that encoding.
So it knows what that zero and that one means.
Usually I'll be more verbose than this.
But for the sake of this tutorial, there's a bit of brevity there in my prompt.
And I'm just going to tell chat GPT then about this data.
Next thing, I'm going to add another subtitle and I'm going to call it univariate summary statistics
and data visualization.
So let's just get that little quotation mark in the right spot.
There we go.
So my next prompt I'm typing, add a subtitle, univariate summary statistics and data visualization.
As before I said, I'd like to keep these notebooks nice and neat.
You're going to use them again a couple of weeks, a couple of months later, someone else is going to use them.
And it's very nice if they are formatted well, so that number one, you know what you were up to a couple of
weeks ago when you can't remember this data set anymore or this data analysis anymore.
Or again, if you shared with someone that they know what you're trying to achieve.
And then lastly, of course, we'd like our work to look neat.
So let's just go back to the notebook and see where we stand.
So there we go.
We've got our data analysis for the heart disease project.
Data import is a subtitle.
Here's a new subtitle, univariate summary statistics and data visualization.
Our data was imported there.
Now, usually I would do a bit of sanity check on the status when it is imported.
Let's do that just for fun.
I'm going to open this just to show you if I say pd.df is what our data frame is called, df.info.
So df is my object that is now it's a variable name, a computer variable name to it is that makes
a little space, creates a little space in your computer's memory.
And to that little space in the memory is assigned this object.
And this object is a pan as data frame.
And it is a representation of that spreadsheet file.
And now I'm going to call a method, which is a function applied to an object that already exists.
So the df data frame exists.
So I say .info and it's going to use this data frame and give us back some info on this data frame.
So let's execute that.
And this is still under the data import.
And then we get some information about this.
We see all the variables, the column headers, age, binary, sex, cholesterol, resting, ECG,
max heart rate, exercise, angina, heart disease.
We see non-null count.
There's 918 values, so 918 non-null.
So there's no missing values.
And you can see the interpretation of what Python thinks these data types are.
So it thinks that age is int64.
That's 64 but integers.
Integers are whole numbers.
Object, that is Python speak for a categorical variable.
It is the values that are in that column.
Int64 again, object again.
So you can see, you know, what kind of data Python thinks at the moment this is.
Let's just, let's just add one more.
I'm just going to say df.head.
So I'm calling the head method on this df object.
And head by default is just going to give us this nice little table of the first five rows of data.
And Python is zero index.
So it always starts counting at one.
So the first observation here is observation zero.
And this person was 40 years old.
It was a M for male, but binary agenda for simplicity used here.
Cholesterol value was 289 milligrams per deciliter.
And so you can just scroll along and see all of those first five rows of data.
And you also get a nice little graphic,
little bit of a plot there to give you some idea of the data.
So binary binary six is a binary categorical variable.
And there's two categories in there.
And we see these little bar plots giving you some indication.
Now, I said that this notebook environment of notable adds a little bit more.
And one of the things is that you get this little visualize button,
which you're not going to get in the Jupyter notebook,
and you're not going to get in Google Colab.
And if you click on that, it opens up this builder here.
You can filter the data, sample from it,
and you can build all sorts of different kinds of plots.
By just clicking on things, and that'll generate the code,
the Python code, and actually create the plot for you.
Now, that's not what we're going to do.
We're just using ChatGPT.
So back to ChatGPT.
Now, next up, I'm asking for a sub subtitle.
And what ChatGPT is going to do,
it's going to send a message to notable to use three pound symbols,
or three hashtag symbols in that text.
So we're going to go to the third largest font size.
So let's do that, and I'll show you what it looks like.
Let's go to the notebook, and you see that it's even smaller, age analysis.
So what I'm going to do, I'll probably run through, in real life,
I'll run through all of the variables, each and every column.
And I'll do a bit of summary statistics and data visualization for each one of those univariates.
I'm only looking at age, then I'll only look at binary sex, then I'll only look at cholesterol.
So I'm trying to just to start to tease out this knowledge,
this information that's inside of the data set.
I'm trying to understand what's going on here.
And one good way to start off with is just to look at the individual variables.
And that's why we're calling it univariate summary statistics.
Back to ChatGPT.
So next up, I'm asking you to calculate summary statistics of the age column,
include the count, mean, median, variance, standard deviation,
minimum, maximum range, quartiles, and the interquartile range.
So I'm trying to be specific here in telling it what summary statistics I want,
but you could also just leave it at summary statistics,
and it's going to decide, you know, which ones are most appropriate
by the way that the large language model works.
Then we can see the results.
It's all there.
But the beauty of all of this, it'll now be captured inside of our notebook.
And it lives there for later use.
Let's go have a quick look.
So there you can see the code that was generated.
It's asked for some description.
So the DF, you can see the DF.
And then in square brackets, we're calling the age column dot.
So that's a new object.
Now that's called a panda series object, by the way.
And we call the dot describe method on it, which will do a bunch of summary statistics.
And then it's also adding a couple more.
And then we just have this idea of a nice little print.
So this is actually a Python dictionary object that's going to do this nice printout for us.
And we can see the count, the mean, the median, the variance, the standard deviation, minimum,
maximum range, first quartile, median or second quartile, third quartile,
and the interquartile range.
You can start seeing this notebook is coming together quite nicely as a research document.
Next up, I'm going to say create a histogram with a kernel density estimate of the age column
at the title age distribution, at the horizontal axis, title age, at the vertical axis,
label count and add a grid to the plot.
Let's see what is generated.
It's generated our plot.
Let's go have a look.
So there's the code.
Now, sometimes you'll find that it'll actually execute the code and sometimes it won't.
So if it doesn't, remember, you can always just click the little play button there.
And then that block of code will be will be executed.
And look at that lovely plot.
We see a nice histogram with a nice grid at the back.
I like the grid.
You can obviously do whatever you like.
We see the title and we see the axis labels age and count.
And then we see the kernel density estimate.
This estimate, the continuous graph here that was drawn
to show this distribution of the age column.
And there's all our Python code.
And what a wonderful way to learn Python.
If you know a little bit of Python and you want to extend your knowledge
at quite a rapid pace, you know, let ChatGPT generate the code for you inside of a notable
notebook.
And you can see how all of this is done.
So as you use the Seaborn library, that is a library that uses matplotlib.
And there's matplotlib there as its back end is called.
And the Seaborn just makes life a little bit easier.
It's less code to generate these plots.
But it sits on top of matplotlib that does all the hard work.
And matplotlib is such a magnificently large and complicated plotting package in Python.
Again, one of the true success stories or why Python has become
the de facto language for data science.
Matplotlib is just another one of those reasons because it is it is a behemoth.
There's nothing, almost nothing that you cannot plot with matplotlib.
But because it's so big, so complex, because it allows you to do so much,
it's sometimes a little bit difficult to work with.
I do have a video on this channel, and it'll show you in 90 minutes,
you know, how to get on top of matplotlib.
So you can search for that.
And then, as I said, Seaborn sits on top of that.
And it just simplifies the code a little bit.
And there we can see we called the figure function from, from piplot.
So it's the piplot module inside of the matplotlib library
that has this function called figure.
We're setting the size of the figure.
SNS is now the abbreviation we're using for Seaborn.
And it has a function called histplot, histogram plot.
And we're going to plot a certain panda series, which is that column of the age.
We set KDE, kernel density estimate, to be true.
And arbitrarily, it's decided that there should be 20 bins.
You can absolutely control that right inside of ChatGPT.
You can tell it's start at 20, end at 100, and do intervals of 10.
You can state that in words.
It'll generate that code for you.
We see plt.title, plt.xlabel, plt.ylabel.
We notice that these had to be passed as strings inside of quotation marks.
Now in Python, you can use double quotation marks or single quotation marks.
We see plt.grid set to true.
And then eventually plt.show, which will actually generate the plot for us.
So what a beautiful way for us just to learn how to use Python.
Now back to ChatGPT.
So certainly watch the first video in the series,
where I showed you a few more things to do as far as EDA is concerned.
I'm going to add this little extra bit to this video now, just to entice you.
Let's just add a new title.
And I'm going to call that subtitle at the subtitle statistical analysis to the notebook.
And then also the sub subtitle ECG diagnosis grouped by heart disease.
And I'm adding that as a sub subtitle.
So just as a little bonus at the end of this video,
let's just do a little bit of statistical analysis instead of just the EDA.
And so there's my title and subtitle has been added.
And now say create a contingency table of expected values
using the heart disease and the resting ECG columns.
Let's do that.
And there we go.
There is a contingency table or table of expected values,
heart disease zero and one.
That's no heart disease and heart disease along the two rows.
And along the columns, we'll see as far as the resting ECG columns concerned,
that's a multilevel categorical variable.
There are three levels or three classes, left ventricular hypertrophy,
normal ECGs and ST segment changes.
And we see a table of expected values under the null hypothesis that these two categorical
variables are independent of each other.
They are not associated with each other.
And if you've taken a course in biostatistics specifically with us at GWU,
at the Milken Institute School of Public Health, we have our postgraduate course,
PUBH 6002 for biostatistics.
You'll learn all about these tests.
So if you want to see if two categorical variables are associated with each other,
a test that you can do is Pearson's chi-squared test for independence,
or Pearson's chi-squared test, or the chi-squared test for association.
Many names for the same thing. That's what we do in statistics.
We give the same thing, many, many names.
And so that is one test that we can do.
One of the assumptions for that test is that these expected values must be at least five.
And we can see 49.7, 83.3, 50.2, 84.6 are well above five.
So that's at least one of the one of the assumptions for the use of Pearson's chi-squared test
that is met there.
And then lastly, let's just create a prompt here where we actually do the chi-squared test.
So I'm going to say, perform a chi-squared test for independence,
or you can give it any of its other names,
to determine if the heart disease variable is independent of the resting ECG variable.
Use a 5% level of significance.
Let's add a little bit more.
Say, write a comment.
Now you can actually see me type slowly.
Write a comment about the results.
There we go.
So we see a x-squared statistic there of 10.02 that is quite big,
and hence our p-value that is much, much smaller than our level of significance.
And our level of significance, remember that this distribution of x-squared values
will follow a chi-squared distribution in this instance.
Remember how to calculate that.
That'll be the number of classes in the one variable, minus one,
times the number of classes in the other variable, minus one.
So in this instance, two minus one is one.
And three minus one is two.
Two times one is two.
So under two degrees of freedom, we'll get a chi-squared distribution.
We're willing to make a type one error 5% of the time.
And we see that this value that we have, 10.02 or more extreme for that distribution,
will occur in 0.0067 proportion.
And that's a value with a maximum of one times.
In other words, this is a very low probability of that happening, a small p-value.
And it's written, the comment there, the variables heart disease and resting ECG are dependent,
suggesting that there's a significant association between the ECG diagnosis
and the presence or absence of heart disease.
So let's go back to our notebook and we can see how all this was done.
Here is how the contingency table was generated.
Let's have a quick look at that.
I'll just play that so we can see there's our table of expected values.
And here's how the chi-squared test was done.
There is a module in the sci-py package, sci-py for scientific Python, the stats module.
Inside of that stats module, there is a function called chi2 underscore contingency.
And that is going to perform the chi-squared test for us.
We've created with the cross-tab function, a table of observed values.
In other words, a contingency table from these two panda series objects,
the column with heart disease and the columns with resting ECG.
And then we're going to call the chi-squared contingency function
and pass this contingency table to it.
And that's going to return a tuple of values.
First of all would be chi2.
That's our x-squared statistic, the p value for that.
And it returns two other values as well.
We just put underscores there.
We're not interested in them.
And then we set an alpha value of 0.05.
And then write this text out that will use all of those results.
And if we run that, we see there's our x-squared statistic.
There's our p value.
And then the conclusion, these variables are dependent.
So have a look at this notebook.
It is a wonderful research document.
And it was all generated without us lifting any coding fingers.
In other words, we just use ChatGPT.
And we just wrote a bunch of prompts.
And it generated all the results for us, but then also populated this notebook.
So this is a wonderful research document, which we can now share in our team.
There's a little share button up there.
And we can come back to it and just continue our analysis.
And if you know Python, of course, you need not use ChatGPT.
You can just go in between any of these cells and generate your own text.
So remember, if you wanted to leave a comment, say here, it's very easy just to add another
cell here.
And if I add another cell there, let's make it a markdown cell.
And you can say something about this.
You know, it seems like this is there's a little bit of a left tail there.
You can say something about this result.
You know, you can leave your ideas behind the results that you do see here or right at
the bottom here.
You know, we can add another cell here, make it a markdown cell.
Let's put a markdown cell there and say there is an association between these two variables.
And it might lead us to do some further analysis.
So wonderful here.
The notable plugin for ChatGPT is absolutely fantastic.
And I urge you, as I mentioned before, just to give a notable IO a look as well,
just as your coding environment.
Now, as always, think about getting one of these paid plans, because one thing you don't
want to do is to put any sensitive information out there.
Obviously, don't do it with ChatGPT either.
Now, you must have permission to put the data, you know, to use open tools like this,
tools that, you know, the data is going to be scrutinized or available to a third party,
which is not always, you know, legally the right thing for you to do.
And so just make sure that you don't do that with some of these paid plans.
Of course, you can safeguard that.
But please, please, if you're working with sensitive data, please make sure that you are
allowed to use that data in tools like this.
Of course, it is a wonderful tool when you just use simulated data or open data.
There's so much open healthcare data out there today.
And if you use that, of course, you should not be too concerned about using tools such
as ChatGPT and Notable and especially then if it is the simulated data.
So how was that tutorial for you?
I hope you found it at least interesting and can see all the potential that there is.
If you've never used with notebooks, now's the time to start looking at that notebooks.
What you also saw is that we were generating some Python code.
ChatGPT was generating the Python code.
So if you know nothing about Python, it's a brilliant way of learning how to use Python
because that ChatGPT with a Notable plugin is going to generate the Python code for you.
And you can see what it does and see how Python works.
It's a beautiful learning environment.
Even if you're not interested in that Python, at least you have a very nice research document.
As I said, you can go look at that document next week.
If you formatted it nicely and you added some nice text to it,
you'll remember the kind of analysis that you were trying to do.
Or if you comment on the results, you've got all that there.
But if you also want to share with your colleagues, you can share that notebook.
And lots of people can work on that notebook.
As I mentioned, just be careful of putting data on there that you're not supposed to share online.
