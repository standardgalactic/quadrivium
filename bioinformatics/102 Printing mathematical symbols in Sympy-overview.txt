In this lecture, we explore how to print mathematical symbols using the SymPy library in an IPython notebook. The focus is on "pretty printing," which enhances the visual representation of mathematical expressions, similar to writing by hand.

1. **Pretty Printing Setup**: To enable pretty printing, you import SymPy and initialize it with `sympy.init_printing()`. This changes how outputs are displayed within the notebook.

2. **Defining Symbols**: Various symbols can be defined using a list of Greek letters or other names available in SymPy. For instance, defining symbols like \( \theta \) (theta) allows for easy manipulation and display.

3. **Expression Display**:
   - Simple expressions such as \( \theta^3 \) are printed beautifully.
   - Complex algebraic expressions can be factorized and displayed neatly. For example, \( 2x^2 + xy \) is shown as \( x(2x + y) \).

4. **Integration**: 
   - Indefinite integrals, such as \(\int x^3 \, dx\), are printed with clarity.
   - Definite integrals from \( a \) to \( b \) can be displayed and computed using `sympy.integrate()`, which also offers symbolic integration.

5. **Differentiation**:
   - Derivatives like the third derivative of \( x + y^3 \) with respect to \( y \) are calculated and formatted elegantly.
   - Both explicit derivative notation (e.g., repeating 'y' three times for a third derivative) and shorthand methods (`doit()`) are demonstrated.

6. **Special Symbols**: Greek letters and other special characters can be easily mapped to symbols in SymPy, enhancing the clarity of mathematical notation when printed.

Overall, the lecture emphasizes using SymPyâ€™s capabilities to enhance the readability and presentation of mathematical computations in an IPython notebook environment.

