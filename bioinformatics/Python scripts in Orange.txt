In this short video I'm going to show you how to use the Python script
node inside of Orange. Sometimes you just don't have an interesting data set to work with
and so you can just open the Python script node and you can write a bit of code
and just generate your own data for use inside of Orange. I've opened Orange desktop here and you
see on the left hand side all these little different modules that I have. So let's open
the data one and what we want to import is just the Python script. So I'm just going to drag the
Python script right here to the screen. So let's double click on it and you see I already have a
little script here. Every time you create a script you can list it here. You can add a new one with
this plus sign. If you change anything you hit up you just hit update. There's a more button for you
to import scripts etc. And then you see a little Python console here at the bottom and with this
version of of Orange we're running Python 3.7.6 as we can see there. So there's my little script at the
top. So we're just going to use scikit-learn to generate some data and we're going to use the
the orange.data library just to to handle the data for us. So let's look at the script. By the way it's
right up there generate data. If you click on a new one you can double click on it and just rename it.
So let's have a look. It's a bit small there. From sklearn.datasets. So sklearn is scikit-learn.
So that's a library that's built into Orange here. It's one of the libraries in Python. sklearn.datasets.
We're going to import the make underscore classification function and that's the function that's actually
going to generate the data for us. It's going to be a classification problem and as much as the target
variable is going to be a categorical variable. Then from the numpy library I'm going to import two
functions where and c underscore. That's for concatenate c underscore and then from orange.data we're going
to import star and that just means we're going to import everything from this data library inside of the
orange package. Now here we're going to use our make classification function right away and it is
going to create two things for us. Two variables and that's why we save them here on the left hand
side. It's going to be two numpy arrays. X and Y. X for my feature matrix. Y for my target vector.
So we're going to say make classification. Now if you look at the make classification
function on the scikit-learn website you'll see there are plenty of arguments. We're going to use
the n underscore samples. A keyword argument there or just argument and that's we're going to set at
ten thousand. So we're going to generate ten thousand rows of data. The number of features n underscore
features. So that's the number of columns in our feature matrix. So the number of variables that are
going to be our independent variables. Our feature variables and we want five of them. In underscore
classes because this is a classification problem my Y is going to be a vector and I want us to have
two classes. So it's going to be this binary classification problem. Flip underscore Y and we
set that at two percent or 0.02. So it is just going to flip two percent of the values from one class to the
other class just to make things a bit more difficult for our learning algorithms. And then I'm just going
to set a random underscore state. A random set to 12. So every time I run this the script we're going to
generate the same random values. So my Y I just need to change that from the zeros and ones. This is a
binary class. We set n classes equals two there. So we're going to have zeros and ones there. I just
want to set that when it's zero I want it to have the string no. And when it's yes I want that to be
changed to a yes. The string yes. So for that we're going to use the numpy where function. So Y equals where
and then we use a bit of boolean logic when Y equals equals zero. So it goes down every one of those
elements in that vector. Is it zero? If it is so, if it returns a true we're going to change that to the
string no. If that's false, so in other words Y equals one, we're going to change that to yes. And
that's how the where function works. And now we've just got to combine this into, we've got to concatenate
these two, the matrix and the vector. And for that we're going to use this C underscore and then
inside of square brackets we're going to have X comma Y. So it's going to take every Y and connect
it to the right row in this feature matrix X. And then I'm going to convert that to a list object.
So I'm going to use this numpy array. I'm going to use a method called toList. I'm going to store
that in a computer variable called data array. So we're just concatenating X and Y there and we're
converting it to a Python list. Now next up the data tables that we see if you import a CSV file
that gets converted into this data table structure in Orange. We've got a, we've got to
tell Orange or we've got to use code so that Orange could know what kind of columns these are,
what kind of variables we're dealing with. Remember if you're drawing this, dragging a CSV file,
you can change that. You can change the type of a column. Because we're setting this with code,
we've got to actually just, or we can just set it with code here. So we're going to have these
five feature variables. So monthly underscore income, monthly expenses, bond repayment, vehicle
repayment, month and saldo. How much money is left in the bank at the end of the month for every
customer. So this monthly underscore income, I'm sending this to a continuous variable.
And you see the function there. So that comes from orange dot data, import star. So that's one of the
functions there in orange dot data. And I'm going to give it a name income. And the same I'm going to go
for all five of my feature variables. They're all going to be continuous variables. Because that's what
my classification is going to do. It is also going to normalize the data for me. So it's going to have a
mean of zero and a standard deviation of one. So vehicle repayment then also, and just naming that
vehicle and etc. You can see the pattern there. Then I'm going to create one more purchase, I'm going to
call it. And that's going to be a discrete variable. And it's going to be called purchase. And the values
are going to be no and yes. That is going to just relate to these that I've created up here, the no
and yes. So it was zeros and ones before we changed it to nos and yes. And now we're just creating this
variable no and yes. Because now I'm going to use this domain function. And look how we do that. We make
this python list. So it's all inside our square brackets. And we list all the feature variables
which we've specified there. And then comma a class variable. And that is going to be this discrete
variable here with yes and nos in it. And all I have to do now is use the table function and then
the dot form method on that table function. And I've got to specify the domain. So that's going to be
this whole domain here. And the data array. And remember the data array is this concatenated
x feature matrix and y target vector. We've put them all together there. And we've got to use this
from list. Because remember we created a two list conversion there. And so table dot from list.
The structure of my data table is going to be this domain. And we've listed how this what the structure
looks like. So that's a monthly income is a continuous variable. It's a continuous variable. And then my
class is a discrete variable. And that is my class. So I just create the structure of the table there.
And now we fill the table in. So there's the structure of the table. And we fill it with values
that we concatenated up there from the make classification function. And then inside of
orange there's the out underscore data object. So I've got to create a computer variable out dot data.
And I'm just going to assign that to this whole table that we've just generated up here. And you
can see on the left hand side there's some input variables in data, in data, in learner, in learners,
etc. And then out variables, out data, out learner, out testifying, out object. So we've got to use this
out data output variable. And I've created it there. And all we've got to do now, remember if we just
changed anything, just update it, hit the update button. But now we're just going to run the script.
And suddenly you see they're running script. It's executed without any problems. So there we go.
That was our Python script. And what we need to do now is just to check what was generated. So let's
go up there. And we're going to view a data table. So let's click on that data table. And we see there,
there we go, there's purchase, yes or no, yes, no, yes, no, yes, no. And we see this, the normalized
values here generated by the make classification function, income, expenses, bond, vehicle,
saldo. So it's all there. Remember, as always, the first thing we want to do is just a bit of
descriptive statistics. So we're just going to go for feature statistics. So let's have a look at that.
And we're going to color by purchase. So we see how many of the clients went for the purchase,
and how many did not go for the purchase. And across all the numerical variables, we see,
we see the graphical representation. But what we really are after is center. So that will be the
mean. And you can see the means at zero. And we're going to see dispersion. And that is the standard
deviation divided by the mean, the minimum, the maximum, and then the percentage of missing. Of
course, there are no missing values. Let's have a look at visualizing our data. What we could perhaps do
is just look at a scatterplot. So let's just look for a scatterplot. And there we go. For all our
numerical variables, they're all listed up here. So I can go income versus expense. And we can see
pretty poorly correlated there. We can go income versus bond. And we can see something interesting
going on there. Income versus the vehicle purchase. It's quite a quite a strong correlation there.
And income versus the month in saldo. You can see some interesting stuff going on there as well.
And that said, we've generated our own data using a Python script. So we needn't go into a Jupyter
notebook or open our Python IDE. We can type a Python script right here, generate some data.
And we can see that data. So just for just for information sake, let's also just create a data
sampler there. And if we have our data sampler, let's bring that in. Let's just take a fixed proportion.
70% of the data is going to be our training data and 30% is going to be our test data.
And let's just create one quick little model here. Let's do a random forest model.
There's our random forest model. I'm not going to go into it to set any kind of
any kind of parameters there. And let's see what that looks like. Let's do a test and score.
Test and score we see there. And we also bring in our data sampler.
Test and score. And you can see the model was running there. And if we have a look at it,
we see an area under the curve of 0.95. And what was done is five full cross validation there.
And that's it. We generated our own data. No need to have any data. We can just use a Python script
and generate our own data right inside of orange.
demonstrations nonetheless. So once we can use them again.
It's ourondeku. That's a good idea.
It's our number one of our very important points.
That's what we're using.
This Fleet Current Res Legislative Max Foundation has improbatedック.
And it's probably got a set of openings in our cycle desk when you're on our plateuape.
