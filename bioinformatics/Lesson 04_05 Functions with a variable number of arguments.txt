Let's carry on by looking at functions with a variable number of keywords. Up to now we've
only allowed a certain number of keywords. We've limited what keywords can be passed.
Now we can get beyond that by using these three dots. They are called a splat or ellipsis. Now
they might indicate the passing of no arguments, a single argument, or many many arguments. So
let's have a look at this. We have a function that we're going to define. I'm
calling it func3 and I'm just using this word args. I could use
anything I want but dot dot dot. So there's my splat and my function is going to do
something useful. It's going to use the print command and it's going to say I can
tell you how many arguments you passed and then the dollar sign remember that's
a placeholder and whatever value Julia generates after this dollar sign that's
what's going to be passed or whatever value is held in there. And I'm going to
use this inbuilt length function which is going to count, counts through a list so
it's going to tell me how many arguments I passed args there and it's going to
return that. So let's create this function. You see a generic function with a
single method. Now let's call just call it func3 and we pass no arguments
whatsoever. And as you can well imagine it says I can
tell you how many arguments you passed zero. So let's pass this argument. So
there's one, two, three, one, two, three, hundred thousand. So func3, one hundred
thousand. But that's just a single argument. So it's telling me I passed one
argument. Let's pass a single string and I say well there's still just a single
one. Now let's pass two arguments. You can see they separated by a comma.
Julia three comma three. Let's run that. And indeed we have two arguments and we
see we don't even have to keep them of the same type. So I'm passing Julia is one
in a million and some, two of them at least are just number values and the rest
are strings and certainly it just counts through of the, through those with the
length, inbuilt length function and we see there are seven arguments. And I just
created them. I just passed them and my function was originally created with
these splats or the splat I should say. So let's get a bit, show something a bit
more interesting. I'm creating a new function here and I pass it a single.
There is a single argument and I'm going to call that argument string array. And what
is it going to do? It's going to create a new variable inside of the function
called string underscore items and it's going to join, use the inbuilt Julia
function join and joins going to take that string array and it's going to
concatenate it sort of with this comma and this space and space. And it's going to
return this print line I like and then whatever was passed into the string items,
remember, which was a join on this string array argument that I passed to the
function food. Okay let's see what happens and I'm going to pass two arguments
but see here I'm passing them as an array or a vector. Let's use the term array so
it's in these square brackets and I have two, two values there in my array so I'm
calling this food function. Let's see what happens and it says I like Nutella and
honey. So beautiful there we see that it has joined the two arguments that I
passed. Well I actually passed the single argument which was an array and it
contained two values. So what happens if I forget these square brackets of an array
so I'm going to forget these square brackets and I'm just using a string I'm
just passing in the string what is the join function going to do on a single
string while you as you might have guessed it it's going to do this n,u,t okay so
that doesn't work. So to get around that so that someone does not have to pass an
array we use the ellipses so I didn't use args here I used the word strings sss
strings just to sort of joke about that this is a splat and I can pass any number
of things so if I were to now create this function and pass this single argument
called Nutella it keeps it all together so that join function is now going to see
what I've passed as just a single as a single argument and the join function is
is not going to split the word up but I can still do that and now I can still pass
more than one now it is going to be seen as three separate things so I like Nutella
honey and more Nutella good now just for clarity sake we can we can really do
something else I'm going to say a b and then use a splat and it's just return
printing the values for a b and s to the screen let's see what happens there so
let's have this function argues and now look what happens so 3 and 4 and then I'm
passing all of this other stuff 5 6 7 8 and a string called Julia and see what
happens the rest is actually passed as this tuple so a was 3 b was 4 and then s
which was a splat could take any number of values but it treats it as this tuple
with 5 6 7 8 and Julia in there so if I just call 3 and 4 and I pass nothing for
the s it's just going to return this empty tuple here so let's have some a lot
of fun so I've got the semicolon in this function of mine and then a splat so this
means that these are keywords can pass any number of keywords now remember the
keywords I'll just have to give them a name now as I pass them so let's call this
fun function and I'm going to say var1 is Julia var2 is language and val1 equals 3
and lo and behold look what gets returned this one column array and it's
actually these a collection of a key and its value so the key was var1 and its
value was Julia key var2 was var2 and its value was language and the key
v3 was val1 and its value was 3 so more so because I created them like this as a splat
and I gave them my own names they actually what what are called symbols with this
colon sign in front and this becomes very useful especially with databases or at
least some data sets and we'll certainly have a look at these symbols in a future
lecture okay so we've learned what splat is and how to create a long list of
functions in the next section we're just going to have a quick look at flow
control inside of a function and then we're going to pass some arrays as function
arguments
and
so
and
so
and
