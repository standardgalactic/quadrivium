Let's have a look at these scatter plots. We've seen them before, so it's plot, it's
data frame aware, so I'm passing it the name of my data frame, df. On the x-axis I'm going
to have variable 1, on the y-axis variable 2. So remember if you do use these aesthetics
for a point, or a geometry, that you really have to have equal number of, remember when
we looked at missing, there were no missing, and each of them, variable 1 and variable
2, had 200 entries for each, because this is x, y coordinates, and so you must have pairs
for both. I'm going to add another layer to, or another dimension to my data by using the
color argument, and to that I am looking at category 3. It's going to be points, but I
also want this line according to a linear model, so a straight line, to best fit all my data
points. Now I'm going to do something else, I'm going to pass this color key, category
3, and in theme, line width, remember that's going to be the line of this smooth geometry
linear model line, I'm going to make that 3 pixels. Let's have a look what happens, just
with this color key guide. There we go. So that was the name, remember, that we used before,
it takes more arguments, but here the name of this legend that we have on the side. So
I gave it this name, category space 3, to give us this legend, and you'll also see that
these lines are a bit thicker, because I used the line argument, line width argument of 3
pixels, as far as that line is concerned. You see the 3 lines, and they're both straight,
because we're using the linear model as the method for our smooth line. Let's look at something
else. We're going to add yet another dimension by this y group. Remember the y group, we can
do that. All we have to do this time is remember to pass the subplot underscore grid, and then
last time we only passed one argument to it, one geometry to it, that was geom.boxplot,
but I can add more than one. So geom.point and geom.smooth, this time again linear model,
and I want my line thickness there and my grid color in the theme. So it says variable 2 by
category 3, and category 3 had p, q, and r, so it is performing this subplot grid, and
the y group is split up by category 3. That's why it adds this title, this axis title by category
3. Good.
Next type of plot I want to show you, this one example, and that is this vertical and horizontal
lines. So let's pass data frame, x equals variable 1, y is variable 2, and I pass a y-intercept,
and I can pass this list of values 90 and 110. Geom.point, so it'll take the aesthetics x and y,
make points of them, but I'm also passing a horizontal line with a certain color, the color
is red, and the h line, the horizontal lines, are going to use the y-intercept argument values.
There's an x-intercept, I'm going to do that at 10 and 22, and the geometry of that is going
to be a v-line, and I'm passing a size. So you can see I can pass both color arguments
and size arguments to h-line and v-line geometries. Let's have a look at that.
So my two horizontal lines were indeed red at its default thickness, and the vertical lines,
they were at the default color, but I passed a size argument, so they're a bit thicker.
I'm going to look at the x and y-intercepts exactly where I placed them. I want to finish
off just by a few more examples, just some examples that you might not use too often.
First one is step lines, let's have a look at that. First one is horizontal, then vertical.
So I'm taking 30 random data point values, 30 random data point values, I'm attaching that
to the computer variables x and y, and I'm using those as my aesthetic, passing a point geometry.
But a second geometry I'm adding is the step
geometry, and I'm passing an argument direction to it. And you can get hv, which is horizontal,
vertical. So look at all of these points. The line goes from the point first horizontally,
and then vertically, and then vertically to the next point. Horizontally first, and then vertical to the
next point. If we do that the other way around, vh for the direction, it's going to take exactly
those same points, but it's going to go vertically first. So from that point, it went vertically down
first, the step line, and then horizontal. So you can do that in both directions. B swarm is a very
nice geometry. Again, data frame aware, my x aesthetic, my y aesthetic, and I'm adding another
dimension to my data by using color. And if I were to pass that for b swarm, that's very interesting.
So all I'm going to get is just the x, y values. But if it finds two of the same y value, it's going
to plot these little dots next to each other. So instead of making a straight line of them, it'll
actually cause a bit of jitter, move them separately, so you can actually see each and every
data point. So that is b swarm. Let's use continuous color scales. Now imagine this. Think about what
will happen if I pass the x aesthetic variable one and the y aesthetic variable two. I add a third
dimension by variable three. So I don't have categories. All three of these are numerical values.
What's going to happen now? Because I can't have these categories as far as my legend is concerned.
It's now got to be something else. And that is where we use this scale dot color continuous,
color underscore continuous, from a minimum value, comma a maximum value. And I'm setting my minimum
value, the minimum value for variable three. And my max value is data frame variable three column,
and I'm using the maximum function. So minimum function, maximum function, those are functions
in Julia itself. But as far as get fly is concerned, the color continuous wants a minimum value and a
min value, max value values. And theme, I'm making the default point size seven pixels.
So look at the contrast between these two. Here my key was a category, was categorical.
I found male and female. But what if the color that I do use to split up all my x and y values is a
continuous variable? That is when I use this scale dot color continuous. And there you see it goes from
the minimum value to the maximum value. It adds this gradient to it. So you can now see this third
dimension, which is variable three, added as a color to each of the x, y aesthetic. And that's
beautiful. That really looks good. Let's manually choose some colors. This is also fun. I'm going to
use the point geometry. But I'm using scale dot color discrete manual. So you can look at my color. It is
now categorical. Remember before it just chose the colors. But I can force those colors by scale dot
color discrete manual. And I'm going to pass because I know category three actually has three. You've
got to know how many different values there are, how many unique entries there are. So category three,
and I'm going to pass it these three colors as hexadecimal color. And I just want the point size
and the theme to be seven. So that's going to be give me nice, nice color plots. So I have forced
these colors. They are not those pink, deep sky blue colors that get fly users by default. I can force
the colors. And that actually looks quite nice. And lastly, I promise you there was another way to get
rid of those pesky grid lines. You see these grid lines, they become solid. If I mouse over, they're
there. Remember before we changed them to white. All I do now is instead of making them white, I say grid
line width, set that to zero pixels. So that's another neat little way of cheating a bit and just
getting rid of those grid lines. So exact same thing as before, still forcing those colors that I wanted
to, but now those grid lines are gone. I hope you've enjoyed this first look at get fly. It's a wonderful
package. You can do some good graphics. Certainly do most of what you would need in your day-to-day
work. And I'm sure it will, it will grow. It will, we would see a more different types of plots being
added and some more arguments to be able to pass so that we can change these elements a bit more.
And then lastly, I hope in the future that as far as the get fly websites concerned, more examples will
be added because at the moment it's a bit thin in explaining all the little subtleties of things
that can be added. But as it stands, it's a wonderful package. Play with get fly. You can do some real
professional plots for all your, your reports, papers and projects simply using get fly. Wonderful package.
