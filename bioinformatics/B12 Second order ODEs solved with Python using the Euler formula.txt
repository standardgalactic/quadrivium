Now we're going to move on to higher order equations again using the Euler formula. So
here we have again in Python, I'm in the IDLE, I've created a new file and we'll save that file
with a certain name. But it's higher order equations and we're going to use the Euler
formula for this. So what is a higher order equation? First of all, there we're going to
have Y double prime. These are higher order equations with constant coefficients, number
one, and the function should have X in it, a Y in it, and a Y prime with the Y double prime.
And we solve these by making or creating two differential equations. We're going to take
the Y prime and call it U, such that Y double prime is now just U prime. And U prime is now
a function of X, Y, and U. Let's look at an example, otherwise this might be a bit difficult
to understand. So here I have Y double prime plus X, Y prime plus Y. So you see I have a
function of X, of Y, of Y prime, and of Y double prime. So what do I do? I have to write it
as a function of X, Y, and Y prime. So all I did, I took X, Y prime and Y, and I took it
to the right hand side of the equation. And I introduced U prime, which is Y double prime,
and instead of the Y prime, I have U. So my U prime becomes minus XU minus Y. So I've just
brought everything to the right hand side to isolate Y prime, Y double prime. And Y double
prime equals U prime. So these two things are exactly the same. Instead of just putting
the Y prime as we have here, we now have U. That's all we're doing with these. So we've
created two first order differential equations here. My first one is Y prime equals U. There's
a first order equation. And here's my second first order differential equation, U prime.
So that is what we mean by creating two differential equations. And with the Euler formula, we're going
to solve it in the following way. Still X sub N plus 1 equals X sub N plus H. Nothing changes
there. But now Y sub N plus 1 is the old Y, Y sub N plus H times. Now this time it becomes
the U sub N. And what is U sub N? Well, actually U sub N plus 1 equals U sub N plus H times the
F of X sub N, Y sub N, U sub N. So this is of this equation. So I'm going to get a value
for X, a value for Y, and a value for U. And I'm going to plug it in here. This is the F
of X, Y, and U. This is it. So that bit there, I'm going to plug in the values of X, Y, and
U in there. That's going to give me these values, which I'll multiply by U and I'll add it to
the previous value, multiply by H, and add it to the previous value of U. So let's do
an example. Here we have Y double prime plus XY prime plus Y equals 0. I've rewritten it
just doing normal algebra and then written it as this equation of U prime. Now you're going
to get two initial values. Y sub 1, Y of 1 equals 1, and Y prime of 1. And what is Y prime
of 1? Let's just put it there. But remember, that's nothing other than U. So we were given
the initial value of U. And we were given the initial value of Y. And we see here we were
given values of X of 1. So let's put that in. Let's just correct this. So we're going
to have an initial value of X as 1. And the initial value of Y, there it is, Y equals 1.
And the initial value of U, which is Y prime, is 2. And let's use a step size of 0.05. Let's
write some code. So here we have the print statement. And the print statement says, I'm
going to print this in these single quotation marks. In other words, this is a string.
And backslash in stands for, in Python code, the carriage return, the enter button, new line
button. And I'm going to do this times three. So I'm just going to create three blank lines.
The only reason I'm putting it in is to teach you about the backslash in string, special
combination. And it's just going to neaten it up by just three blank lines, just to separate
my code. Then I'm going to print the string X. It's not a value. It's in these quotation marks.
So it's just going to literally print that string X. The comma, remember in Python, just
leaves a single space. Now here's another one of these special ones, backslash T. It's
a string. And because it's between these quotation marks, and that means tab. It's just a special
character for tab and then Y. Then I'm going to print the actual value of X, which at the
moment is one, a tab, and then the current value of Y, which is also one. Now we're going
to do our Y loop. We have to loop through this. Now just be very careful. As I come into this,
I have a value of Y, and I have a value of X, and I have a value of U. But I've got to
change the value of Y and U. But to change the value of Y, I need the value of U. So as it
comes in here, it's the old value of Y here, the old value of U. Remember, the right hand
side gets executed first, and then the new value is given to the variable on the left
hand side. Then I've got to do U. But remember, this is U sub N, and X sub N, and Y sub N.
Y sub N. But I've already changed Y. So this, if I just put Y here, this would already have
been Y sub N plus 1. But it's not, I need this. I need U of N, not U of N plus 1. And
if I do this, or let me apologize for that, I need Y sub N, not Y sub N plus 1. And you
have already gone on to. So if I just put Y in there, it's already the next Y. But that's
not it. I want the old Y. And the only way I can do that is if I just make a new variable
and give that the old Y value as it comes in. So at the moment, just follow it along. It's now
1. So this Y in is now 1. The Y changes here. So I'm no longer going to have a Y of 1. If I move
into this line of code, I'm going to have a new Y here. So I just have to tell it, just use the old
Y before going on. X now increases. Now I'm going to print the new value of X and the new
value of Y as it's changed. It's changed there. And it's changed there. Okay. Now with these
new values, I enter this loop. I now have a new X, Y and N value. But once again, I have
to give that value to this variable so that when I change it, I can still use it in the old
one. These two functions still have to have the previous value of U and Y in there. So
the one that comes second, if I had reversed these first at the U and then the Y, I would
have had to create UN equals U. Just because I changed it there, but I still want to use
the old one that's unchanged. Good. You have to save this before you can run it. So Command-S
or Control-S in Windows. And I hit the F5 button. There we go. So very neatly here, I have three
lines, empty lines of code. So if I re-ran this, I just have a separation. And look beautifully,
there's my tab working. So there's all my X values and all my Y values. So I'm starting
at 1 and 1, 1.05, 1.1, 1.15. So I can see my step size H is working well. And there's
all my values of Y. To get out of the shell, remember on both Windows and Mac, it's Control-D.
You can also just type exit with open and close parenthesis, but the keyboard shortcut Control-D
closes the shell and you're back into your program editor just to write and edit your code. So the
only trick here is to remember that you really want, you can, could have called this anything,
I've just called it Y sub N, Y N. You can't make a sub to create a variable name. And I only
use this here because I'm trying to explain the theory behind doing this, but writing the code
I have to actually do, do something else.
