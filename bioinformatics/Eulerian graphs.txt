So yesterday we started talking about walks and we went on trails and paths
and today I want to extend that by just talking about an Euler's walk.
Now remember walk is I just walk, walk, walk, I can revisit nodes, I can revisit edges
it doesn't really matter. Now there's this concept then again of a closed walk
and that is just where the start and the end is exactly the same node.
So I can run from home, run, run, run, come back and I stop at home again
that would be a walk or I can be dropped off somewhere, run and let Uber pick me up on the other side
that would be a walk but it's not closed because my start and end is not exactly the same.
So a walk, remember as I mentioned, revisit edges, revisit nodes.
An Euler's walk is very special and that is where all the edges, all the edges are used, all of them
and just once. So I can't retrace. I can't retrace.
Now let's stick to these closed ones so I can start and I can walk and I can walk and I can walk
and I'm back where I started. So it's closed because I started and ended this, all the edges were used
and they were just used just once. And there's a theorem that goes with this because look,
look at something very special that happened here. What is the degree of this one?
It's two. And the degree of this one, it's two. The degree of this one is two. The degree of this one is two.
And so there's a theorem that states, well first of all, let's just make sure that we're not talking
disconnected graphs because I can have this, this one and I can have this one.
So there's no ways to, to use, to start somewhere and get to that one.
So we are restricting ourselves to connected graphs. So if we have a connected graph and all the vertices,
all right nodes. Sometimes I like nodes more. Sometimes I like vertices more. At the moment I'm in kind of a nodes.
I like nodes. So if all the nodes have an even, even degree. If all the nodes in a connected graph have an even degree,
then that is an oiler's walk. I mean, if you think about it, just look at an isolated, if I were to try and prove that.
If I look at an isolated, if it's even, it means anytime I come in, I can leave. And I might go to others
and then I might visit it again, as long as I can leave again. As long as I can leave again.
And as long, as soon as I come in and it's odd, I can't leave. I can't leave. So that's quite easy to see in that way around.
So if they all, if they are all even, all of them in a connected graph, then I am going to be able to get an oiler's walk.
And conversely, an oiler's walk will have all of the nodes have an even number of edges. So you can prove it both way around.
So in short, that is an oiler's walk. A very simple concept.
So here we are Mathematica. Let's have a look at these Eulerian walks or Euler walk.
I'm going to create a graph G and let's do one that we have on the head on the board.
So it's going to be a graph. And let's just do the undirected edge list here.
So one was connected to two and two was connected to three. And what did we have?
Two was connected to five. And remember, that's for these undirected edges. It's escape.
You escape. So two is connected to five and three was connected to four and four was connected to five.
Four was connected to five. Close my list of edges there. And I want the vertex labels. I want the name of those.
So there we have, just slightly differently from what we had on the board, but we have our graph there.
Now there's a function called Eulerian graph Q. That's a question. I'm asking, is graph G, does it contain an Eulerian graph?
And you'll see it's false there. What Mathematica is doing here, it is looking at a closed walk.
It's looking, can I find a closed walk, not an open walk? And if it's only, if it's closed, will it fulfill this definition of an Eulerian graph.
So it's a closed, there must be a closed walk. So if I were just to try and find Eulerian cycle, it's called here cycle because it's closed.
It stops at the end. So that's the keyword that Mathematica uses. And we see I get back the empty set.
There is nothing that would be, that would be an Eulerian cycle, a closed Eulerian walk, in other words.
Let's make another graph. I'm also going to call it G. So it's going to overwrite that part in the memory and put in a new object.
And this new object is also going to be a graph. And this time I'm going to go for complete graph in five nodes.
Let's make vertex labels the name once again. And there we go. Now we can ask ourselves, is this an Eulerian walk, a closed Eulerian walk?
So I can say Eulerian graph Q. And I just pass the argument G. And it says true. I can, with this complete graph, visit all of the edges only once.
Let's find one of the possible ones. And what Mathematica is going to do, if it finds more than one, is this going to return the first one.
So I'm going to say find Eulerian cycle in G for me, please. And if we do that, there's the first one it found.
So let's trace it out. So it's one, to five, to four, to three, back to five, to two, to four, to one, and to three, and to two, and then back to one.
So it looks like, yes, we started and ended at one. So this is a closed and we used all the edges and we only used them once.
And if we look at it, we see one, two, three, four, one, two, three, four, one, two, three, four, one, two, three, four, one, two, three, four.
Indeed, all my nodes have an order or a number of edges which are even.
So we know that this was always going to be an Eulerian cycle.
Play around with some of these and have a look at these functions, learn more about them.
