Here we are in lesson 4. Functions. We are in JuliaBox. I have named my file functions04.
I have run my first cell of code here just checking that the kernel is loaded just using
plus two and two and it gives me four. Everything is working. Now let's take our first look at
functions. They are very powerful and they're immensely useful parts of code. Now there are
different ways of creating functions. There are different types of syntax to use and I'm just not
going to use a generic one at the start here as many books do to show you you know how to construct
or what is inside of a function. I want us to organically learn what to do with the functions
and what functions are. The first one that we are going to use does really look like a
mathematical function. You'll note here z or f of x and y equals x squared minus 3y. That's a
mathematical function. Two variables there. Two independent variables giving us a third.
Now instead of calling these variables we're going to call them arguments of course in most
computer languages and in Julia as well. We're going to call these x and y. We're going to call
them arguments. We can pass value to values to those arguments and depending on what we pass to it
we're going to get different values. So what are we going to get up to? We're going to certainly
discuss this single expression functions. That is the f of x that I showed you there, f of x and y at
least. We're going to look at multiple expression functions. So those will be two different syntax
ways of creating and using functions. We're going to talk about optional arguments. We're going to talk
about functions with a variable number of arguments. Here in f of x and y we've got two arguments. I'll show you
how to do a lot more. We're going to pass arrays as function arguments because here with f of x and y I can pass
two single values but I can pass arrays to those and get multiple answers back. We're going to look at
type parameters then and look at another syntax called stabby functions and some do blocks. We're
going to use functions as arguments. I don't always just pass normal values, string values, numbers, arrays, etc. as
arguments. We can also pass a function as an argument. We're going to look at nested functions, functions
inside of functions. And then we're going to get to the heart of the matter, the heart of how Julia sees
and works with functions and that's called multiple dispatch. Then just for a bit of fun we'll look at
some of the inbuilt functions and you'll see most of what we do with Julia are just based on built-in
functions already coded inside the base of Julia. And then just for some more fun it's always good just to
have a look at list comprehensions and even here in the function lesson. So first of all we're going to
start off with in the next section with single expression expression functions and that will take
that mathematical form.
