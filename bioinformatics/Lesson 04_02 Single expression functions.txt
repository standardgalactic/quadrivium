So let's start off by looking at our first form of syntax. We're going to use the single
expression functions. And you can see that it takes a very mathematical format, f of x and y,
so that f is the name really of my function. And I'm passing two arguments to it, two variables we
would say mathematics. And it's going to output by using this equal sign x squared minus 3y. So
let's execute that. And we get f, that's my number, my name of my function. And we see it's a genetic
function with one method. Now that method is all about multiple dispatch. And we're going to talk
about that right at the end to really understand how Julia deals with functions. So we have this
name f, that's our function name, and it takes two arguments. I needn't have called it f, I could have
used a normal name, I could have said function 001. Doesn't matter. But I called it f, just to show
this mathematical format that it takes. Now, let's pass two arguments to it, or two variables, as we
would say mathematics. But there we go. So two and one. Now f takes two arguments, x and y. So the first
one is going to take the value two, the second one is going to take the value one. So we're passing
arguments to our functions inside of these placeholders that we have at the top. And if
you think what the answer is going to be, well, two squared is four, minus three times one is three.
So four minus three is going to equal one. Let's see if that is so. Indeed, we get the answer one back.
Let's do it again. This time we're going to create a new single expression function. We're going to call
it g. Takes one argument and we're going to use the placeholder x. And it's going to return for us
x squared. And if I call that three, three squared is nine. It's as simple as that. So it's a very
shorthand form or syntax of creating a function. I just give it a name. And then in parentheses,
I'm just going to list with a comma all the arguments that it takes. And I'm going to use the
equal sign and just then an expression for what I want it to do. So that's single expression functions.
Next up, we're going to look at multiple expression functions if we want to do a little bit more.
