here we are the exciting world of regular expressions now we've seen a
little bit of regular expressions when we use the search function and as you
can read here the expressions are used to find patterns inside of text so you
can import a bit of text and you can look for certain patterns which makes
for wonderful kind of data mining from text a lot of things are possible now
Julia implements pill compatible regular expressions you can see there you can
google this look it up and the one syntax that I'm going to use here is just this
R and then the quotation marks let's have a look so I say here this is not
swearing I'm just going to show you I have this R in front of a string let's
just execute that there we go it's there but let's see what the type of this is
and it is this regex a regular expression so definitely a specific type inside of
Julia now let's have a look at this I'm going to have a string and it's called I
love Julia and I'm just going to ask is there a match for the word Julia and I
use this regular expression so it's not going to do a normal search as we as we
had up before which it's going to do this method of using this regular I
shouldn't say the word method here it's going to use this regular expression to
look inside of that and indeed it is true that is there now regular expressions
obviously case sensitive so if I had to if I had put a lowercase J there
obviously that is going to be false now let's go one step further than just
boolean returns so what I'm going to do in the next example because this is really
what I want to get to I'm going to use split and match combined now let me not
give it away let's have a look at what we're going to do I'm going to say text
one equals and I have this ABC ABCDEF ABCDEF and then BCD BCDE you can see what
we have there placed inside the computer variable called text one and there we
have now I'm going to use the split function on text one and I want it to be
split on the spaces let's do that and indeed there we have it ABC ABCDEF we have all of
them now look at this nice little for loop for me you can use regular
expressions on a for loop so I'm going to say for I in split text one and then the
space so what I'm actually saying for I in this element so it's going to look at
ABC then ABCDEF then ABCDEF GHI etc it's going to say is match the regular
expression R ABC so it's going to look for this ABC just that ABC and see does it
match in there and then this double ampersand sign that means if this was
true then execute that if this first one was false don't execute the second bit
that's what this double ampersand signs mean and then end let's execute that and
it's going to look down that list one by one because it's a for loop for I in this split
which gives me this array so the first one definitely there was an ABC and the second
one there was an ABC and the third one there was an ABC the BCD it left out so this bit
returned false for that iteration so it did not execute this second part so it found all the ABCs
and I can imagine how powerful that can be if you imported a bit of text and you were just looking
for certain words to bring them out or sub strings of little bits of text quite powerful now how would
you go about expanding on this now I'm going to use this dot or full stop as a wild card now let's
have a look at this I have text to and this is a sentence for this sentence I only want the words
with a dot in them so a dot is this full stop so I'm looking at the word finding the word sentence
and finding the word them that could be a very nice thing to do because I might want to not split
by word and the spaces between but I want to split by sentence so let me show you how that works
now again we're just going to split let me just run that again we're going to split the text on the
spaces just for now but you'll see where we'll eventually get to so I'm again going to split it
and I'm going to find for this match this dot I'm generally looking for words that in that have a dot
in them but remember a dot is a wild card and I have to I don't want it at the moment I just want it
to be a real dot so I have to escape the dot so escape dot means look for the real dot don't use dot
here as a wild card if this is true it's going to print that line so as we said there's only two
words with a dot in them sentence and full stop now let's build some more regular expressions text
three is this man can fan down with a pan while he ran away from danger horrible horrible sentence
as I said that my apologies but for good reason think what we're going to find here so again I'm just
going to split the text into each and every word by this split function here now look at this
is match a regular expression and I've put this prd in square brackets and then an what this means is
find any of these words attached any of these letters characters I should say attached to these two
so I can have pan or ran or dan that's what it's saying this is true print that line for me let's
see what happens and indeed it found pan ran and danger because there is a dan in there danger so if
you if you have different words but they have a common bit to them this is the way that you would
build it up say for instance you want not you want a result not to have those in so not pan not ran and
not dan you just put this power sign shift six on most keyboards in front of it so now we're going to
get back man can and fan you see why I did that ugly sentence just so that I have all these an words
anyway man can and fan good now let's use this wild card thing that I was talking about I'm not
going to use dot in its real sense I'm going to use it as a wild card so again we're just splitting
we're just splitting and now regular expression and and the wild card it says anywhere where there's an
an and anything after that it doesn't care so let's just see what it returns the only thing it returned
was danger because danger is the anything is the only one that had an and in and something that
followed the a in all the others remember pan ran man can fan had nothing after the a in except a
space and the space doesn't count here so a in with that and the reason why the space is not counting
remember is because we split it split it on the spaces so we just have this array of single words
okay let's use some ranges Anna and Barbara have a cat its name is Dan let's have that as our text
we're going to split it by the spaces so we're going to have Anna and and Barbara and have and a and cat
etc and that cat obviously is going to be cat comma and it's going to have this apostrophe s because
it's only splitting on the spaces and the last one's going to be Dan dot now I can say find this for me
is match are a to c in inside this brackets and they're all uppercase so see what it's going to
find for me anything that starts with an a or a b or a c capital letters now let's change this to text
five and now I'm going to have Anna and Barbara have a black cat now I've introduced this black and
this lower case c for cat and what if I still wanted to include that cat but it now has a lower
case c well I'll just say a to b and a c and it's got to start with these as you can see by that square
brackets so now I'm going to catch a lot more now at first glance this might be slightly confusing
because to turn the b for black cat and that's lower case as well but this is actually saying
a to b and c and because that's a lower case it's doing the lower case ones for those as well so
that's one that that can really catch you out just make sure you recognize what is going on there if
you wanted to use it now let's use this long long long long long long long sentence which will end soon
thank goodness now let's find words with at least two o's so again I'm going to split this on the spaces
and I'm going to use this way anything that has an o in it so there's no square brackets there so this o
can be anywhere and I want at least two of them which I put in these curly braces so let's run that
so it found long with two two o's three o's one two three four o's and the word soon it was all of
them had two or more double o's in them and that long didn't count now this is for interest sake let's
just change this to long go what let's put this over there what do you think is going to happen now
let's have a look because certainly there are two o's in there now let's have a look and it's still
not there because this is two of them in a row so certainly finding two o's that are separate from
each other is not caught by these curly braces now let's do this this long lesson which will end more or
less soon there we go now let's look at this I want these double s's but I'm putting wildcards in
front of them and behind them again I'm running down this array of words because I've split them
just by the space so let's look have a look at that so the only one that it found with a double s
was this lesson but it didn't find that less because there had to be something after that
and in the array it was just less l-e-s-s with nothing after the s this says this wildcard says
there must be something after this let's have a look at using this plus and star signs what do you
think is going to happen here well let me just tell you the plus see as I've used it here a double o
find for me anywhere in the word a double o and a plus means at least one or more whereas this
asterisk refers to zero or more so let's just have a look at that so look for me for any double o
somewhere where there's a double o or one or more of those so it found one and yet found one and two
of them actually and yet found quite a few of them and there's another soon there so you can use that
plus sign let's just do this with the ss and just see what happens it says zero or more because now
it's returning stuff with just a single s in them there's a single s there's a single s because that
is what the star means find something that is zero or more so it's going to find that s and then for
this s is zero or more now it's exactly the same as if we have just done this all I wanted is just
find me something with an s in it let's look for numbers inside of text now here is one there was a
significant difference between the two groups 33 versus 44 p value was 0.34 now this should say
insignificant because certainly it's not a significant p value let's save that this was
an insignificant there was an insignificant difference between the two groups 33 versus 44 p
equals 0.34 now let's find anything that has a number in it but if we're going to split on the spaces
we're certainly going to have this as an element in our array that with the comma as an element in
array and all of that in the array okay so let's have a look let's try and catch this
catching anything with a digit in it and I'm going to use this wildcard backslash d because I've got
to use this backslash d it's a it's a wildcard for digits I can't just put d because then it's going
to find it's going to find the letter d for me and indeed that's what we have we have this open
parentheses 33 the 44 with a comma and 0.034 with the closing parentheses now I can do this as well
it's going to achieve exactly the same thing find anything for me in this range with a 0 to 9 in it
it's going to be exactly the same we're going to do that now let's just change this again to
insignificant that's horrible let's do that we have the sentence again but now we've changed it ever so
slightly you'll see from the one at the top and I'm going to use this backslash w uppercase w
and what that's going to do for me is to return these digits but look at that the 44 is gone so
it's looking for something that has numbers in them but these other characters as well so that is a wild
card for alpha numerics find me anything that contains alpha numeric value so there's got to
be both characters and numbers in them now let's look at the substring we're almost there now there was
no statistically significant difference the p value was 0.3 the difference was not statistically significant
there was no significant difference you can well imagine that you're reading a journal article
import that text and this various ways I've just used three here of writing or stating by the use
of words that something was statistically insignificant and that's all you wanted to find in that text find
me all the sentences that are find me all the sentences that contain those words now one way that we could
split this up is by using this so backslash dot so that means this dot is not used as a wild card
so just remember that and then something with a space I want something with a dot and a space
that would be one way to split this up in sentences the only problem that you're going to have here
is over there so it wants a dot and a space so actually that's not going to cause a problem so
because there's a dot and a space so it's going to split this sentence off there so let's do that
and let's build up all these different ways so if you quickly paste through or run through an article
you might find all of these different ways to state things sometimes even these capitals this NS
so I'm going to use find for me no stat with a wild card that means anything that has no stat and
anything after that or not stat or no sig with a wild card not sig with a wild card or NS and if
that's true print that line for me and indeed it found all three of those sentences there was no
statistically significant difference the difference was not statistically significant there was no
significant difference so see how quickly you can find if you think how you can combine this with a p
value and these non-significant you can quickly go through an article you can find without having to read
all the article the whole article you can quickly gather this data from a text file just using regular
expressions so I hope that was a easy enough introduction to regular expressions they are very powerful
play with them they're quite a bit of fun
play with them
