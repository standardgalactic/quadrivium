Let's have a look at dictionaries. Now dictionaries are collections with two elements. So they build
on what we had with arrays and tuples and they really have a value and this idea of an index
gets expanded to this value of a key. Now the best way to do that is let's just create a dictionary.
So the dictionary is actually a little function called DICT, capital D there, dict, and functions
always are encased in these parentheses. And I have this one, this equal greater than sign, so it
forms this nice looking arrow sort of, and then 77. So that is my key and my value. My key is one and
the value it holds is 77. Here I have a key of two and its value is 66 and a key of three and it holds
a value one. So that'd be a first example of a dictionary and if we run it we see there it's a
dictionary and what it found was was these in 64 bit integer key and value values if I can put it
like that. Now we can use a different notation than this equal sign and greater than sign by using the
pair function. So if I pair one and 100 that means the one will be the key, 100 will be the value
only because it is inside of a DICT function. So let's run that and we see we get exactly the same
kind of notation on the output. The key two has a value 200, the key three has a value 300 and the
key one has a value 100. Now let's do something else. Let's have a look at this. I'm going to create
this new DICT and it is a DICT but I'm going to specify the data types, the type that it can hold
and it's any, any. So the key can be any and the value can be any. So I have three keys here, two, three
and one, two and three and I have values 77, 66 and then the string three and all of that is legal
because I have specified the fact that both the key and the values can hold any type or the type
any. Let's look at DICT three. I'm doing exactly the same thing but look at this. I've got keys now.
Again it's any, any as I specified but here I've got a string as a key and here I've got a tuple
actually as a key. So all of this works. I'm going to have, let's just run that and you'll see.
So I have a tuple as a key and a string as a value. Here I have a string or at least it is a string
because it's in double quotation marks and not in single quotation marks which would make it a
character. So there's a string and it holds a value one which is a 64, well at least an integer.
Now there are other ways to specify what key values are and this is the symbol notation where I use
colon and a word or a letter as we've done here and if I execute that code we'll see this symbol
notation that C, the key C holds the value 309, B 305, A 300 and I can assess the value in a dictionary
by just referencing its key. So the key is in the symbol notation for dict 4 which would be colon C
and again I get back the value 309. Now have a look at this using the get function for keys that do not
exist. So we have dict 4 remember there it is so it only has the symbol values A, B and C for the keys
and the values 300, 305 and 309 respectively. But now I'm going to use this get function, takes the
arguments dict 4 and then an H here as the key and I'm using symbol notation so it's colon H and just
in case it doesn't exist because here we called C and C did exist but what if I called something and
I'm not sure whether that key actually exists I can build in this error code that says that key does not
exist you could put anything in those quotation marks of course. So if I do call that it says that
key does not exist so that I don't hold my execution I don't get an error back I've actually allowed for
this but for that you have to use the get function. Now the B does exist so in this case Julia will
ignore this this does not exist because the key B in symbol form does exist and it just gives me
that value back. So I can check if a key value pair exists and I use the in function so I've got to use
this whole key and value here inside of parentheses so in symbol form the key A is 300 and I'm checking
whether that does exist so the whole key value pair that exists and indeed it is true. I can check to see
if a value if a value if a value actually has a key or at least the other way around to check if a key exists so I can
just the has key dict for and the D there that's going to return a false for me and I can add a key and a value to
the dictionary very easily I just reference the dictionary there dict for give it give a new key value a key name I should say and add a value.
As simple as that I can just add it like that and if I have dict 4 now we see that the D does exist. Now dictionaries are mutable
i.e. their values can be changed so remember we had C before but now I'm going to set the value to a thousand
and if I do that and just check you'll see that C indeed now holds a value of a thousand. I can also use the delete function
so I can say delete and that's a bang so that makes it permanent so dict 4 please remove key
with a value a and if I do run it now that key and its value is gone
it is gone. So I can find out a little bit more information about a dictionary so I can ask for the
keys that exist in dict 4 and there we go we see it's C B and D that are left after my bang deletion
there and the values in dict 4 it also has a length just as tuples do and just as arrays do a length
of dict and at the moment that is three but it has no size and it has no dimensions so we can't do that
so what we can do is say for K and V in dict 4 because remember there are two values there
there's a key and a value value so just using K and V in dict 4 print line the key has a value and I'm
using the dollar notation there just to reference those values so that so that just tells you every
time we run through all the elements in dict 4 if I can call them that there will be two values a key
value and a value value and we can run through that simple for loop to get there now a for loop
that can also be used to populate a dictionary so here I have an array of names June Mary and John
the string values square brackets this makes it an array I've given it the computer variable name
called name underscore vowels and I'm creating this dict and it is a dict by using this dict function
I'm giving it values so the key can be of abstract string type and the values can also be
abstract string and then actually empty parentheses so it's an empty dictionary as it stands
then we're going to run through this for loop s and n in enumerate name vowels now what's happening
here name vowels is a dictionary so we know it can take two values hence I can run a for loop with two
values and in enumerate enumerate enumerate just means run through this first the first element the
second element and the third element we've seen numerate before then name dict then pass its index
as the name x underscore dollar s so that's going to hold the value for the key so it's going to be x
underscore the key value and that equals n and n is the value that is passed there let's have a look
at what this code does for us we've run it let's call name dict and look at look at that so we have x
underscore and dollar s now s is just it runs through so don't get confused I think I almost got I did get
confused here so it's the s it's just running through the indexes of this one two and three
the n is going to actually hold those values so the name dict I'm going to have keys now named x underscore
one two and three and they are going to hold the values that are listed here june mary and john
one so look clearly how this is structured and which way around the keys and values are used in this
instance I can also iterate through a dictionary by key by the key value tuple so I say for k in keys
named dict so only the keys in named dict I'm going to just iterate through them and I can going to
print k is and then name dict and use its key there so that I can get the value back
so x1 is june x2 is mary x3 is john quite easy I can also iterate through a dictionary by key and value
separately we've done this before k and v separately run through that and print that to the screen so
really nothing difficult day I can also sort a dictionary let's do that so I've got dict 5 here
that's a dictionary it holds key values that are all abstract strings and integer 16 but integer values
for the values so I have a being 1 b being 2 c 3 you see that etc let's run that and we have dict 5 there
but you see the entries are all jumbled up they're certainly not in this order that I've done them
but I can use the sort function so I'm going to loop for k in the sort of the collection of the keys of dict 5
so this is almost the almost functional coding that I'm using here I'm using a bunch of functions to extract
this list of values through which I can iterate my for loop let's execute that and see
and that gives us an error at the moment it says that this value for dict or while loading in
in this line the expression starting on line 2 it says undefined error dict is not defined
okay so dict is there but it should be dict number 5 there's our error there let's just execute that
again and now we see a is 1 b is 2 c is 3 d is 4 e is 5 f is 6 so I had to sort all of those values
now let's dissect this for loop a little bit because it is as I said almost functional notation
so keys and dict 5 those are just going to be the keys a b c d a b c and d e f but I want
to collect those so we run through the values each of them but I want them sorted and because
these are a b c d e f that is how it's going to be sorted so the keys are going to give us back
the f c e b a d but if I now collect those it goes from look at what happened if we look at the type
this is a base key iterator for a dict but if I use the collect function on that it becomes a six
element array which means I can now iterate through it with a for loop and if I sort it it's going to
do an alphabetical sort for me so you see how I used function upon function upon function to create this
array of a b c d e f in the last section we're going to bring everything together I'm just going
to do a little bit of text mining just to show you how we can use the concept of collections just to
to do a bit of text mining
