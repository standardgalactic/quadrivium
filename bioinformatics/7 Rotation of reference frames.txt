in this lecture i want to look at the rotation of rectangular coordinates so we're going to have
this coordinate system xy we're going to rotate it through certain degrees and then we want to
express the coordinates of a vector in this new coordinate system the pictures will make life
easier it'll make it easy to understand what we're trying to do first of all as per usual we're going
to import some libraries here in python using the ipython notebook so from sympa i'm going to import
inner printing for my latic nice printing to the screen i'm also going to import symbols because i
want to change some variables into mathematical variables and i'm also going to use a matrix
i want to import the physics vector libraries as well so from that i import star that means everything
i want to display some images to the screens i've got to import ipython dot core dot display and from
that i'm going to import the image function and from warnings as always filter warnings is something
i always do so let's let's initialize the pretty printing and we ignore the filter warning so let's
just look what happens in two space we're going to start with that so we're going to consider a
cartesian coordinate system xy normal one you learned from school and we're going to rotate it
counterclockwise through theta radians to create a new coordinates coordinate system which i'm going
to call capital xy we're going to have a vector in red that has coordinates xy and we want to express
it in the new coordinates what do i mean by that let's run these blocks of code so i'm just saying image
which is what i've imported up there and it takes an argument file name equals and then in print in
in inverted commas um we we have the file name and that file this file is stored in the same folder
as this ipython notebook and this is what we have there we go so now it makes it makes life a bit
easier there's my x-axis there's my y-axis and i'm rotating it to an angle of theta degrees so that my new
x-axis is there capital x and my new y-axis is there and here's my red vector ob here o to b they see
the point b there and i want to express it so if i look in the in the normal lowercase xy coordinate
system obviously this vector is going to have components x there at point a i've just indicated
and it's going to have a y coordinate right there and if i rotate it if i rotate the reference frame
this red vector is going to have a new x component which is going to be down here noted capital x at
your point c and then parallel to the x-axis there it's going to have obviously a y component
point and all i'm stating is a new angle phi which is the angle the vector now makes with the new uppercase
x and axis there so in essence i just want to show you the two triangles that i formed here o a b
which is a 90 degree a right angle down here and and triangle o c b o b c here the light blue
one as opposed to the slide orange one at the bottom also right angle but with this
phi angle between the x-axis the new uppercase x-axis and the vector so let's just consider what happens
in vector o b c so o b c this blue one with this phi let's have a quick look what happens there so this
is just a file i'm importing again this file is in the same folder so i can just reference it directly
if i look at the cosine of phi the cosine of phi well that's going to be x that's a norm the the length
of this component divided by r now i'm just stating that r is the length i'm just putting r as the length
the magnitude of this vector b this vector ob here so if i were just to do some algebraic manipulation i
have the fact that x equals r cosine theta phi i should say just taking the r to that side and i also
note that the sine of phi the sine of phi is y over r in this little little remember so that there is that
component along the new y-axis that's the same as this length here so that's also y so it's y divided
by r and if i just get y on its own it's that now in the bigger triangle the oab triangle let's run that
let's see what happens there i'm now talking about the combination of those two theta and phi so the
cosine is going to be this lowercase x divided by r and sine is going to be this lowercase y
remember there's the y coordinate divided by r nothing special there and also just expressing
x on its own and y on its own there no problem now i'm going to make use of trigonometric identities
for double angles if i have the cosine of the sum or difference of two two angles i can use trigonometric
identities and the same goes for for the sine and this is what it is remember the cosine of the addition
of two angles becomes the cosine of one angle times the cosine of the other angle minus the sine of
one angle and sign of the other angle and for the addition of two angles the sign of that addition
becomes the sine of one angle, the cosine of the other one, plus the cosine of the first one and
the sine of the second one. Those trigonometric identities just have to remember. And it's R
times that, remember? It's R times the cosine and R times the sine. So it's R times this new
identity. And here we have R times the old identity. If I distribute this R in, and I just
group the terms, I'm going to put this R with this cosine phi, that R with that cosine phi, and then
I still have cosine theta. And minus, I'm going to put the R with the sine of phi, and I still have
the sine of theta left. I do remember though that R cosine phi, if I look up there, R cosine phi equals
upper x, and R sine phi equals upper y. So I'm just putting that back into these two. Now I have
lowercase x equals uppercase x cosine phi minus y sine theta, minus y sine theta. And lowercase y
here equals x, uppercase x sine theta plus y cosine theta. All you have to do now, I'm not going to do
it here, just solve for uppercase x and uppercase y. So get uppercase y on its own here, by taking it to
this side, taking negative x to this side, dividing both sides by sine theta, so that I have y on its
own, uppercase y, and substitute that into this one, then you're going to get an expression just for
uppercase x, do the same, and solve for uppercase x. If you do that, it's very easy algebraic manipulation,
you're going to get this. That uppercase x equals x cosine theta plus y sine theta. So all we have here is
the old coordinates x and y and the angle. Same for the new y coordinate, we just have the old x and y
coordinate values and the angle of rotation. Phi is missing from this. And usually we express this in
matrix form. So we have this column matrix x and y equals this matrix times that matrix. Now if you do
this matrix multiplication, this is a two by two matrix, a two by one matrix, so the result will be a two by one
matrix. Two rows, two columns, two rows, one column will result in two rows, one column, as we have
there. So it'll be cosine x plus x cosine theta plus y sine theta, and that's what we have there for x,
and y will be x minus x sine theta plus y cosine theta, just as we have there. And this is our matrix
of rotation. So I can plug in any x, y coordinate there, multiply it throughout by this, and I'm going
to get the new coordinates. It's exactly the same. I can do it by hand there, or I can do this matrix
multiplication here. So given any coordinates for the vector in the x, y plane, the above rotation
matrix can be used to express the vector coordinates in the new uppercase x, y plane. It's so simple to do.
So let's say example time, I'm going to introduce the Greek letter theta as a variable in Simpi, so I
equal it to symbols theta there. Let's run that. Now again, I'm going to create a reference frame. I'm
going to call my first reference frame c, that's my lowercase x, y, and the uppercase x, y, I'm going
to call a, so that I have two reference frames. I can now express my vector in either of these two
reference frames. So we've got to tell Python now what the, how these two are connected to each
other, that a is just c rotated through theta degrees. Now we use the right-hand rule now,
suddenly see the x, y plane in three space. Remember there's a z-axis as well. If you point your thumb
up the z-axis, you will note that your right-hand fingers curl in the counterclockwise rotation. So
any counterclockwise rotation, imagine if I looked at this again, and the z-axis comes out of me,
out towards you from the, from this point, out towards you. This rotation takes, when you put your
thumb towards yourself, this rotation is taking place counterclockwise, and that makes it positive
rotation. Okay, so this is how we do it. This is the code. We say a dot orient. We're going to orient
a according to c. So it's not c according to a. We're going to say a is oriented based upon c. And
there's three arguments here. One, two, three, where the last one is actually a combination of two
arguments. The first argument is, what is the base reference frame from which you are doing the
rotation? It's from c. What kind of rotation is it? And it's a string, so you've got to put it in
quotation marks. Axis. I'm going to do a rotation along a certain axis, and then we tell it by how
many degrees, theta degrees, and along what axis? Well, that is along c's z-axis. Again, imagine this
comes out of you at the screen. So along the z-axis, I'm going to, imagine there's a pin in there,
I'm just going to rotate around that axis. Axis. Okay, so there we go. That's how we do that.
And there is now, if I run that, Python has now gone ahead and it's coupled those two reference frames,
it knows which one is which. And now it becomes so easy to make this rotation matrix. We just say
a dot dcmc. So we're going to express vectors in, inside this new reference frame based on the old
one. So again, just note which way around you do your a's and c's. And there we have it. Now, it's
doing it in three space. But remember, there was our two space one, the cosine, sine, negative sine,
and cosine. They're still there. Cosine, sine, negative sine, cosine. But because it's in three
dimensions, it adds these zeros, and ones there, you'll see, if you do multiply then, by an x, y, z,
because now you're going to have a three by three matrix, you better have three rows here,
you just put zero for the z, because this is in two space. So that, that isn't a big problem.
And there you have it. If you explain to some by what kind of rotation you want to do,
it will give you this, you can multiply it, let's do that. And I thought a good time to introduce you
to how to set up a function in Python. A function is a short little program. And if you call that
function name, it's going to execute that little program and actually give you an answer. And this
is how you set it up. You use the keyword div, that's for define a function. Now, this is not the same as a
mathematical function. This is a computer function, a bit of code that gets executed. You give it the name,
and I'm calling it angle. And that angle, you tell it what kind of arguments it takes. So it takes,
I've just called it whatever I wanted, I called it CXCY and ROT. So I'm creating this function name
and the arguments that it takes, then you put a colon. If you hit enter after that colon,
it's going to give you white space there, which is one is the way Python tells itself that this is a
contained loop of code that it has to run through. So the first thing we're going to do, we're going to
have a, we're going to orient it up from C along some axis, and the angle I'm going to call ROT,
and the axis through which I do it is CZ. Then my function is going to, not all functions do,
but this function is going to return a value once it's finished. And what it does, it's going to return
this rotational matrix, which is this one up here, by a matrix that contains CXCY and zero. So you can
imagine what's going to happen here, I can enter a value because the CXCY and zero, these are, we
accept that's a constant, but CXCY are just computer variables. So I'm going to, I can attach in a value,
a number to that. So that is going to be this column here. Imagine I said five and four and zero. So if
this original vector had components five and four, I can write that as a column vector five and four.
And that's what I'm doing here. It's a matrix. Now look at the matrix, how you do a matrix. Remember,
we imported it up here. It's part of SimPy. It takes, where did we go? There we are. It takes open and
close parentheses, then open and close square brackets, and then every row goes inside of its
own square bracket, separated by a comma. So this is going to be one, two, three of those. So it's going
to multiply that by the rotation matrix. I'm actually doing exactly what is in this picture in this image
here. I'm doing that multiplication there. Now I'm introducing now this, I'm actually unsure if this
really works in Python 2.x. This is 3.4.1. So it might not work if you're running 2.7 or earlier
editions of Python. So Cx is going to be a float. That means a decimal value. And what is the decimal
value? It's going to be input, open and close parentheses, the string value. Input is something
that gets printed on the screen and it waits for you to enter a value. And that value that you enter
is going to be attached to Cx. Then it's going to ask you for a y component, Cy, and then an angle of
rotation. So now you have values for Cx, Cy, and Rot. Now I'm calling, remember there I call this angle,
I'm calling that definition. So it's going to execute this. And for Cx, Cy, and Rot, it's going to take
these three values, remember, which I'm going to give it, which I'm going to give. So let's run that
piece of code. Let me show you how this works. So look at that. So beautiful. It asked me for an
x component. So let's say it was 5 in that, in the x direction. I hit enter, the next line of code. So
that 5 was attached to Cx. So this Cx now will be 5. Let's say 4, enter, and the rotation in radians.
Now, unfortunately, I have to do this in decimals, because I'm calling floats our decimal values.
And I think a pi over 6, which is about 0.524. Round about there. Before I hit enter,
so I've got these three values now, it's going to call this definition. And with those three values,
it can now fill in the rotation there, which is about pi over 6.
It will do the matrix for me, and it will multiply it by this column vector, this column matrix,
containing the points 5, 4, 0.
5, 4, 0. So let me hit enter there. And there you go. In the new coordinate system,
the x, y components are going to be about 6.3 and about 0.96. Beautiful. And you can see clearly
there, if I rotate it by something like this, this new x component is obviously going to be
slightly longer than the old one. So while this was 5, this is probably be about 6 something now.
And while this one was 4, you can see the new one is much shorter.
So this is obviously not to scale, but you can see this through this rotation,
this was going to become shorter. So this actually makes some intuitive sense.
So you've now seen how to write a little program. You know how to connect the rotation of one
one reference frame onto the other, and how to work out this rotation matrix.
It's really wonderful stuff. SymPy makes things so easy to do.
