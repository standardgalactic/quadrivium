If you know me, you know that I'm a junkie when it comes to data visualization.
It's really lovely for me just to see those plots and it just brings out the knowledge that's hidden away in that data.
Now in Julia, we're spoiled because we have many packages.
When it comes to data visualization, Gatfly comes to mind, which produces wonderful plots itself.
It has many backends that we can use.
But today I want to introduce you to VegaLite.
It's really one of my favorite data visualization packages.
I'm going to open a notebook and interact and I'm going to show you just how easy it is to create beautiful plots in VegaLite.
Here we are in our interact notebook.
Learn a data visualization using VegaLite.
So really plotting is one of the most useful ways that I find of summarizing data.
I just love that visualization.
It really brings out that first bit of information from your data.
And as I've written here, the adage of pictures is worth a thousand words.
That really comes to mind.
So VegaLite is a graphics grammar based on JavaScript object notation, JSON.
And many of you will be familiar with JSON.
This is a programming language agnostic format for interchanging data.
And as such then, VegaLite itself, it uses a subset of JavaScript and it allows for rich interactive plotting.
And VegaLite itself, of course, it's a subset of Vega and Vega is a declarative language that generates visualizations for the web.
And you see that it can use canvas or SVG, scalable graphics format.
So VegaLite then, the VegaLite.jr package.
That's the Julia representation of the VegaLite grammar.
It really is ideal for visualizing tabular data.
So we've got to have this data in tidy format.
Tidy format or long form.
That means all your variables are across the tables in your flat file and each row is a subject in your data.
So as long as your data is in tidy form or long form, it really is going to work well.
So the VegaLite.jr package can work with many data structures.
So we're going to start off by just using Julia arrays, the type of Julia collection.
But it works really well with data frames objects.
And we're going to import the data frames package, for instance, after we've generated some data.
You can also use it with the CSV package, for instance.
Remember, if we import a spreadsheet file, a CSV file using the CSV.jr package, it's going to generate a data frame object for us.
Anyway, remember, there's also the VegaDatasets.jr package, and that creates, or at least is a Julia representation, again, of the VegaLite data set.
So with the VegaLite itself, there is a data set.
So you can play around with some of the data sets that you just import with the VegaDataset.jr package.
But we're going to simulate our own data because this is Julia.
So what I'm going to do here is just import the packages that I'm going to use.
So you see I'm going to use VegaLite.
I am going to import VegaDatasets because I'm going to show you just the first plot, just to give you an idea of what the VegaLite plots look like.
But thereafter, we'll do our own data.
So let's run that cell with Interact.
It's the same as with the Jupyter Notebook.
I'm just going to hold down Shift and hit Return here on my Mac.
And that's going to execute that code.
Of course, it's got a pre-compile now, and it'll take a second or two to run.
Now, this .jl file of mine, it lives inside of its own Julia environment.
I do have a video on creating Julia environments, and it's very important to create different environments for all your projects.
Don't just import packages in your base or generic Julia environment.
Now, we're also going to import random distributions and data frames.
So let's do that.
Random, because we're going to generate some random values.
Distributions, because I'm going to take random values from a normal distribution.
And then data frames, as I said, it is one of the best data structures to use with VegaLite.
So let me just show you what a Vega plot looks like, and there's a couple of lines of code.
And two things that you're going to note, first of all, a couple of things.
The data set is the population data set that I'm using from the Vega data sets.
And then you see this little operator there.
So on my keyboard, standard Mac 16-inch keyboard, 16-inch MacBook Pro keyboard, I should say, that's just shift and backslash.
And then the greater than symbol.
And that's the pipe operator, because I'm piping the data into the following thing.
And the following thing is this macro, at vlplot macro.
Remember, macros are used in Julia.
Fantastic.
I think using Julia, it just generates code.
So I see it at the moment, just as a function.
So I'm piping the data as first argument into this function.
That's what the pipe operator is going to do for me.
And then we're going to see some arguments.
The first argument I'm going to use is background equals light gray.
And then I'm doing a mark.
And you can see the set of curly braces.
Now it's going to look like, at first glance, like Julia dictionaries, but it is not Julia dictionaries.
It's just part of the syntax of JSON and how the at vlplot macro converts the code that we're going to write here into normal JSON.
And in actual fact, there's also a vlstring macro that you can write this plain common garden variety JSON to create these plots.
But we're going to stick to the common use case here, which is the at vlplot macro.
So there's a mark and it seems to be a box plot, but I'm using symbol notation.
So it's colon box plot.
There's an extent equals 1.5, an opacity.
There seems to be a title.
There's an x-axis and a y-axis.
The y-axis seems to have a title, etc.
We're going to go through all of these things.
And, of course, the first time you run a plot in Julia, it's going to take a second or two.
It shouldn't take too long.
And then we're going to see our first plot.
Remember, I've stated here a little light gray background.
And there we see it.
A lovely box and whisker plot.
And you see our population count here as our title that we stipulated there in the y-axis.
We see age here.
And we see these values 0, 5, 10.
They're sort of on their side, minus 90 degree angle.
And that is because age is seen here as an ordinal data type and not as continuous numerical.
And it's ordinal because of that colon O there after the age.
Anyway, we're going to learn all about that.
You see these statistical outliers here for the population count here on the older ages.
And that is because of this extent equals 1.5.
Great stuff.
That is what these plots look like.
They're very easy to create.
It's quite a nice plotting package.
And I'm using it more and more.
So let's start with the basics of a Vega-like plot.
So other than the data that we're going to have to use when we're plotting data, at a bare minimum, Vega-like requires two things.
An encoding and a mark.
Those two things.
There's also a transform.
That's an optional third thing that you can do on your own.
And that's where we want to transform the data.
That's the statistical manipulation of data.
For instance, there's an aggregate transform.
And one of the aggregates is a mean or median or standard deviation that you manipulate the data first before plotting it.
That's a transform.
Usually, though, when creating the plots, we're not interested in that transform.
So what we really just need is the two things, a mark and an encoding.
So let's generate some of our own data.
And then I'll tell you all about marks and encoding.
So I'm using a cedar random number generator seed.
So I'm using random.seed and then seed bang.
Remember, that's our function.
And I'm just using 12.
And if you use 12 as well, of course, we're going to generate the same cedar random numbers.
I'm creating two computer variables, independent and dependent.
My independent computer variable holds a unit range object.
So I'm saying from 0 to 9.9 in steps of 0.1.
And then I'm just going to, for each of those, I'm just going to add a bit of random noise.
And that comes from a standard normal distribution.
So independent dot plus.
Remember, the dot plus gives us element wise operation.
And as many values as there are in my independent, I'm creating in my dependent here because I'm just using the length of independent.
So that's all the same.
So let's put this together.
So the mark is what we are trying to plot, the type of plot.
So that's at VL plot.
And what we want to plot is the mark.
And that is a point.
Point, colon, point.
So simple notation that infers that we want a scatter plot because we just have these points.
And then the encoding is the actual data that we need to encode for the plotting.
And the encoding is what goes on the x-axis and what goes on the y-axis.
And we're just stipulating the two, our two list objects there, independent and dependent.
And if we plot that, we see a beautiful scatter plot, just like that.
And we see the mark was point, which is scatter.
And we see the x and y values, each pair of values for each of those dots.
And then we have just a nice little scatter plot.
Now, we need not only encode the x and the y-axis, we can actually split the data.
And we can split the data according to the sample space elements of some categorical variable.
So let's create a categorical variable.
I'm going to call a group.
Again, just from the RAND function, I pass a list to it with two strings, A and B.
And I want 100 values, please.
And now I've got my third encoding.
So I've got x, y, and now color, which has nothing to do with the actual color, color, pink, orange, red, and blue.
So it's just splitting my encoding up according to the sample space elements in that categorical variable.
So if I do that, we see we have still our dependent and independent variables, but split up by whether it's A or B.
And we see the legend on the right-hand side, A and B.
So the three parts or the three encodings that I can do, x, y, and color.
Now, instead of the single plot, I can plot A and B, those two sets of values separately.
And instead of using color, there's a sneaky little fourth type of encoding that we can do, and that's the column encoding.
So if we run this, I'm going to see two plots, one separately for A and one separately for B.
So instead of color, we can use column as well.
Now, that's very nice if my third variable was categorical, but what if it's continuous numerical?
So let's create another computer variable, and I'm going to call it scale.
And it's a random, just take random values between, on the interval of 10 to 20, and I want 100 of those.
And now my color is going to be scale, but scale is now a numerical variable.
It is no longer categorical.
So what is going to happen here?
Well, very nicely, because it's a numerical variable, we're going to get this scale here.
So it just goes from light to dark, and that allows us to take a scatter plot and visualize three numerical variables in one go.
So the darker these little marks, the higher, of course, that value is for that third numerical variable.
So that's brilliant.
Now we're going to get into what is very common, and that is when we encode a categorical variable by numerical values.
So we might have a questionnaire, and someone disagrees, they neither agree nor disagree, or they agree, whatever the case might be.
And we just encode that in the data captures one, two, and three.
And that means that these are categorical variables, even though they're numbers.
But they are not numbers, and we've got to tell VegaLite that we want them interpreted, for instance, as ordinal data or nominal data.
So let's create this new computer variable grade, and that's going to be a uniform random distribution of these three values.
So just pick from one, two, and three, 100 values, and they each have an equal likelihood of being chosen.
So there we go.
And now what we're going to do is, because we've got so many computer variables now, let's just build them all into a data frame.
So we're going to call my data frame df.
And remember, that's the notation for data frame.
We don't use, when we create the data frame, these are the column headers.
Independent, dependent, group, scale, and grade.
And uppercase, I use uppercase just to distinguish that these are column headers in my data frame.
And then we're going to assign to them these one, two, three, four, five lists that we created.
And then I'm using the first function there, and I'm passing the data frame, comma, three, because I want the first three rows to be printed to the screen, just to see that everything came in properly.
And then we see the first three.
We see my column headers, independent, dependent, group, scale, and grade.
Independent was correctly identified as a 64-bit float.
Data type, 64-bit float for dependent, the string, I might want those as categorical.
And remember, the data frames package, it does have a two-categorical function.
Scale is a 64-bit integer, but look at grade.
It was interpreted as a 64-bit integer.
But that's not what we wanted.
We wanted it to be ordinal categorical.
In other words, not numerical at all.
So what can we do?
Because if we do that, we're going to see a color scale.
We should see a color scale, because it is seen as a numerical value.
So here's my mark.
It's plot.
But look at that.
I'm piping data frame into.
So my data is now piped into the atVL plot macro.
So DF, and then my pipe operator, and then atVL plot.
So I'm just piping that as a first argument into that macro.
My mark is still point.
My x-axis is independent.
But now I'm referring to the column header, not to my computer variable that I had before.
So this is one of the columns inside of my new data frame.
So I'm using symbol notation.
So colon independent.
You can also just do your column headers inside of a data frame when you reference them as a string.
So I'm just showing you both, x and y there.
That's symbol notation for x and string notation for y.
And then the color is going to be grayed.
Now I am using string notation.
Grade and then colon O for ordinal.
So it says to atVL plot macro.
Please see this grade not as a 64 but int, but as an ordinal categorical variable.
So if we do that and we print that, we see grade is now 1, 2, and 3.
It is seen as a categorical variable.
So it's not a color scale as we would have expected.
So there's a bit for you to learn about as far as Vega plot is concerned there.
Remember, you can use symbol notation and strings.
And then we can interpret these as a data type that we require.
So I'm going to be a bit more verbose now just to show you how these things come together because what we've been using up until now is just some syntactic sugar.
In other words, this is some shorthand notation there, but we can be much more verbose and try and start to express things closer and closer to what proper JSON would be.
And there's just a couple of differences between JSON and how the Julie implementation of VegaLite.dl is.
So let's go for it.
So I'm piping DF into my at VL plot macro.
And now I'm saying mark equals point.
So I'm actually specifying that this is my mark.
Remember, we have marks and encodings, and we might also have transforms.
But we're sticking now with marks and encodings.
So I'm actually saying mark equals instead of just using the colon point.
And then I'm saying encoding.
And because I want to pass different things about my encoding, I put them in curly braces.
Once again, this is not part of a dictionary.
This is just part of the syntax of this macro.
So I have X, Y, and color, my three encodings.
X is going to be, and because I want to specify different things about X, I put it inside of curly braces.
And when you go to the VegaLite.dl website, you are going to see that these things form a hierarchy.
So under encoding, what you want to encode, and say on the X-axis, for instance, what are all the things that can go into the X-axis?
So there are all these properties that you can set, and it all forms part of this hierarchy.
So for the X-axis, I can say something like a field.
So the field is going to be the independent column in my data frame.
And the type, although it would be correctly interpreted anyway, but I'm forcing the issue here.
I'm saying type is quantitative.
So not ordinal, not nominal, but quantitative.
Y is the field equals the dependent column, and the type is also quantitative.
And color, the field is grade, and the type is ordinal.
So I'm going to get exactly the same plot as before.
No difference.
I just used a lot of syntactic sugar up front with this one.
Look how neat and short that is.
But now you can start seeing where this all comes from.
So now that you have this basics of a mark and an encoding,
and you know a little bit about the structure that the VegaLite at VL plot macro,
how it is manipulating or using at least that JSON, let's add some common plot elements.
For me, a plot must have a title, and it must have X and Y axis, axis titles.
So let's go for that.
So I'm piping DF into at VL plot macro.
I'm just saying point, not mark, because point is point.
A title.
I'm going to say title equals scatterplot.
And if there's some other things you can do with a title.
So if you wanted to do other things, because that's just the text of it,
but you can do the font size, the font type, the way it is,
and I'll show you in the next.
You can see it peeping at the bottom of the screen there,
but don't look there.
Look here now.
On the X axis, I'm just saying independent instead of field equals colon independent.
So you can leave things out.
The macro will know what to do.
And now I'm also passing a title.
Independent variable and dependent variable.
And if we looked up here, it just said independent and dependent,
as far as these were concerned.
And I just took that from the column header name.
But now I'm specifying something else.
Independent variable, dependent variable.
Color, the grade is ordinal, and the legend equals.
And there's things about the legend.
For instance, the color, et cetera.
But all I want is the title, but because I'm specifying down the hierarchy
some of the parameters of this encoding, I put that in curly braces as well.
So after a while, you'll start to know where these curly braces are supposed to go.
And there we go.
I get scatterplot as my title there.
I get my access titles.
And I get grade variable there as my legend title.
Beautiful.
So let's be much more verbose.
So you can see where all these things are coming from.
So I'm saying mark is colon point.
My title equals.
Now I'm not just using the title.
I want to specify a lot of stuff.
So that all goes inside of curly braces.
And if it's something even deeper, say one of these parameters here
has a set of arguments that I can use.
That will all go inside of a set of curly braces, et cetera.
So my text is scatterplot.
My align is left.
My anchor is start.
My color is steel blue.
And you can just go on the Mozilla website.
And you'll see all these named colors.
Otherwise, you can just use hex code.
My font size.
See the uppercase S there is 18.
My subtitle is data visualization.
And my subtitle color is also steel blue.
My encoding is the following.
X equals.
And certain things I want to set.
So it goes inside of curly braces.
Field equals independent.
Type is quantitative.
See, I'm using it as a string as opposed to using colon notation.
The symbol notation.
Then axis equals.
And down the hierarchy, because there are many things that you can set for the axis separately,
they'll have to go in curly braces.
The title is independent variable.
The title color is steel blue.
And the grid equals false.
So along the x-axis, I'm not going to see a grid.
For y, I've got a field, a type, again an axis, and a title color.
But this time, I've not said grid equals false.
The default is true, by the way.
So I'm going to see the y-axis grid.
Color, you see what I've done there.
Field is grade.
Type is nominal this time.
And legend, because there's a couple of things that you can set with a legend.
It goes inside curly braces.
It just makes sense.
It's just beautiful how you can string all these things together.
And you can see what's happened there.
You can see the colors, the way that the title is off-anchored to the start and then left aligned.
Everything quite beautiful there.
So I can become very verbose in how I want to create these Vega Light Plots.
Very nice.
The only thing I've really added here is just to show you we can specify the height and width as well.
So I'm going to say height is 200 with the 600.
So these are pixels.
And then everything else is the same, but you'll see I've used a lot more of the syntactic sugar,
just leaving out a lot more of the verbosity that I had before.
And there you can see 600 by 200 plot very nicely.
So let's look at some commonly used plots.
Histogram would be good just to show you the distribution.
It's going to bin your continuous numerical variable and just do a frequency count,
how many values fall in those little intervals.
So I'm going to create a new column in my data frame.
I'm going to call it height.
So I'm going to use the normal distribution.
So I'm saying distributions.normal just so you see where that normal comes from.
It comes from the distributions package.
So rand, distributions.normal, mean of 160, a standard deviation of 10, and I want 100 values, please.
And you're going to get a bit of a warning.
We haven't had an update, a proper update for the data frames package yet.
So there's some things there that have been deprecated.
Just something you see commonly in Julia as all the packages take their time to be upgraded.
So let's just plot this.
Now, here comes our first transform.
But it's a hidden transform.
And it is going to be a count.
The frequency count is the transform.
I'm going to show you here because you're actually going to, if you do histograms,
you're going to do this commonly.
But it's proper, perhaps, just to do it more verbose so you can see where the transform comes from.
But because this is the way we're going to use it most of the time, let me show you that first.
So piping df into the macro, setting a width, a title, it's a bar.
So the histograms are also just a type of bar plot because we're just going to count, do a frequency count.
So there's no colon histogram.
It's colon bar.
X is height.
I'm setting bin as true.
And title is height.
So it's going to bin and it's going to decide on the bin size on its own.
And on the y-axis, I'm using, I'm going to say I'm using a transform.
And you see that it's a count open and close parentheses.
So it's almost like a function that I'm using here.
So it says, for my y-axis, do a count of whatever is in the interval on the x-axis.
And I'm giving it a little title there.
So when that runs, you can see what has happened.
So the bin size is 10 there.
And all we're seeing are these frequency counts.
How many are in the interval 150 to 160, 160 to 170, etc.
So we can control the bin size in the way that I usually just control the bins.
The bin size is just setting the max bins.
So if I'm going to say max bins equals 5, it's going to still do its proper interval
so that it's nicely rounded depending on the values for my variable.
But I'm just specifying bins as max bins equals 5.
So it doesn't mean there will be 5.
But within a nice interval, you can see it used 20 as an interval now.
And I have 4 bins there.
And that does not exceed my max of 5 that I stipulated.
Density plots, they are also quite nice.
The mark for that is the area mark, colon area, as you can see there.
And I'm setting just a bit of opacity.
So we just have a bit of see-through.
And here comes my first transform.
So here you can see the encoding.
Remember, I could have put everything, the X and Y, in an encoding.
And this transform is the third thing other than the mark.
So it's a mark in encoding.
And here's a transform.
And this transform lives on its own.
Typically not how I use it.
But just notice that you can do all your transforms separately.
And with my transform, it's a list.
And inside of curly braces, then the density of the height.
So I'm doing a kernel density estimate of the height variable here.
And I'm setting a bandwidth of 3.
And then my X and Y, that has to do with this transform of mine.
So value as quantitative, and then on the y-axis as the density.
So on the x-axis, the height values, and on the y-axis, the density.
Type is also quantitative, and I've set a title layer.
So this is how we would typically use it, but it might not make a lot of sense when you see it like this.
And there we have our density plot of height.
Let's just add a little bit to this.
And all I'm going to do is add a color.
And I'm setting that to be nominal categorical.
So you see color there.
I'm still going to use my same transform, and then use the value and the density,
as far as what goes on the x and y-axis as concerned.
And that comes from this density keyword, or at least the variable that I decided to name there.
And then overall, I'm also setting opacity to 0.5 overall, so that we can see the two for A and B.
We can see the two distributions there.
So I'm going to show you a little bit more about transforms.
But this is how it will typically be used.
But it takes I'm getting used to, because it's not absolutely clear what is happening there.
But I think you get the idea now.
Box and whisker plots, fantastic for distributions, of course.
I've shown you a nice one in the introduction.
But let's just create another one.
I'm piping DF into my VL plot macro.
My mark is a box plot.
Extent equals 1.5.
What that does is it says, look for statistical outliers by adding 1.5 times the interquartile
range to the third quartile value and subtracting it from the first quartile value.
That will be the end of my whiskers.
And anything beyond that is statistical outliers.
I'm choosing a color for my mark.
So all the box plots are going to be orange with an opacity of 90%.
I'm setting width and height there.
On my y-axis, I'm putting group as ordinal.
And we know what the sample space elements there are.
And on my x-axis, I'm putting the numerical variable.
So these are going to be box plots that are horizontal.
See, I swapped x and y there.
And this domain argument, setting to false, that's the zero lines on your plots.
You can see if we go back up here, here on the left-hand side and at the bottom, those
are thicker gray lines.
You can set that to false and they won't show.
And then the size, 50, that would be how many pixels wide my boxes are.
So let's plot that.
And we see, indeed, this horizontal box plot height on the x-axis and then the two sample
space elements on the y-axis.
And you can see my suspected outlier there because my whiskers only go out to this extent
is 1.5 times the interquartile range.
Beautiful stuff.
Sometimes, though, you don't want to plot the box and whisker plots, but you only want
to create the actual data points.
And so instead of using box plot, I'm using my type as a point.
The color is still orange.
Everything else is still basically the same.
And now what we're going to get and see, I've put the x and y-axis for vertical ones
now.
So instead of the two box and whisker plots, I'm just getting an idea of all of the data
point values as they are there.
Notice again, though, the axes have these ticks lying on their side at minus 90 degrees.
And that is the default for categorical variables on the x-axis.
And we can fix that very easily with the label angle argument.
So I'm saying y, the x at least, is group.
And that's seen as ordinal categorical, the AMB.
And then the axis is going to be label angle equals 0.
So if I do that, lo and behold, the AMB is upright.
As simple as that.
So we've already seen the transforms.
And one of the transforms is aggregate.
And let me show you an easier way to use it.
And that is right inside of the encoding.
So not as transform on its own, but do it inside of the encoding.
So piping DF into VL plot, my mark is a point.
So I'm going to get a scatter plot.
My color is orange.
My width is 100.
On my x-axis, I'm going to have the group as ordinal data with a label angle of 0.
And then on the y-axis, I want the height, please.
Type is quantitative.
And now I'm bringing one of the transforms in right here.
And one of the most common ones are aggregate.
You can look on the VegaLite.jl website, you are going to see a couple of transforms.
One of them is aggregate.
And one of the aggregates is the mean.
So all we're going to do now is instead of all the values, all the values that we had up here,
we're just doing the two means.
And you can see that both of them there would just be over the 150 mark there.
So that's a better way of understanding where to bring in the transform.
So you could have brought the transform in separately, give it a name, etc.
But just to use it right inside of the encoding, actually, for me, is much more useful.
So let's just do bar charts.
Bar, just with histogram, we're using the mark bar.
Setting an overall opacity for my mark.
My x-axis, my y-axis.
And what we're doing now, again, is that common use case where we actually do this type of transform in this fashion.
So instead of aggregate equals, we're just actually stating count, open, close parentheses.
So you'll see on the website that that really is the common way to do these transforms.
So I just want a count of those sample space elements.
And color is going to be by the group.
But now you see something new, scale.
Remember, that has nothing to do with the variable we created before, our scale variable that went into our data frame.
No, no.
This is one of the keyword arguments there.
And I'm just specifying two different colors.
And if we plot that, we see A and B, and they color differently.
But because there's an overall opacity to my bar, we're going to see this mix of colors.
And, of course, the orange and the blue is going to give me this bit of green.
So it's with opacity, with bar charts.
Remember, it always can create this bit of color issues.
But you can see it's just the frequency count of the three sample space elements in the grade variable there.
And for each of those, we see group A and B, group A and B, group A and B, and how many there are.
So instead of doing it that way, remember I said we can do the transform as a keyword argument, and the type of transform is aggregate.
So I'm going to do exactly the same there as the count.
And now you can see where that count really comes from.
And because of my y-axis, I'm going to see a field that's also grade.
It was grade on the x-axis.
It is grade here.
And then type is quantitative, and aggregate is count.
And I'm saying stack equals nothing.
Nothing is the null value as far as vagalite is concerned.
So there we go, and we see exactly the same plot.
So stipulating aggregate is count there, or using it in this fashion as we did up there.
Exactly the same.
It's going to do exactly the same thing.
So to get rid of this color issue, of course, we can just use stack.
And because stack is going to be default for us here, we can just say bar with the x and the y in the color.
And I'm specifying color in this format now.
And what I've done here is I've just swapped group and grade around just so that we can see, nicely see the stack bar chart.
So all the three grades, one, two, and three for groups A and B, is created here as a stacked bar chart.
And that's it.
That's the introduction to vagalite.
I hope you enjoyed it.
Vagalite produces these wonderful plots.
Try them inside of Interact.
Interact is a great coding environment.
And I use that with my individual Julia environments.
I create environments.
If you're used to Python, of course, with Conda or virtual ENV, you can create different environments.
So that when you do install packages, it's only for that environment.
And you don't just keep on adding packages, packages, packages into your base Julia installation, which is not advisable.
And then with Interact here, it is going to pick up in what environment I am at the moment.
And it only looks for these packages that I've installed for that specific environment.
So when you have a look at this Mozilla developer website, there you'll see all the nice colors.
And if you run this code in the REPL, if you installed everything as I have from GitHub, and you run this, here it's only going to give me the codes for the versions.
But you can see in this environment that I have here, there's my project.toml file.
And it lists inside of this project of my LearnVegalite project environment, these are the packages that live inside of that environment.
And that'll be very different from any of my other projects for which I have an environment each.
And in my base Julia, there's nothing.
I don't install packages.
There.
So give this a thumbs up, follow, subscribe, leave a comment if there's anything else about VEGALITE you want to see.
But go and try it out.
Of course, you can use it inside of Juno.
In my instance here, running on Mac OS Catalina, I can't use the plot pane.
So I've disabled the plot pane, and that forces the plotting inside of my browser.
Even though I'm running it in Atom or Juno.
And if you're using Microsoft Visual Studio Code, it is just going to open a new tab, and you're going to see the plots in a new tab.
But using it here in Interact is very nice, and it really works beautifully.
There you go.
There you go.
There you go.
There you go.
We are not listening to this.
There you go.
Don't listen to it.
Don't listen to it.
If is a fail, you're ready to come up for anything else.
I'll listen to it.
Take this.
Here you go.
We're going back to it.
You were saying, Oh!
Don't listen to it.
Then I can't ask, I know.
It's a fail.
These are not listening to it.
As listening to it, you know.
You
