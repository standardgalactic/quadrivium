So let's look at characters. Now before we use the double quotation mark for single characters
we're going to use this single quotation marks. I'm using a new computer variable called str
underscore char and I put this single character in there. Let's just see what the
type of this is and that is of type char character. I can ask what the integer value of this character
x is and I get back 120. So this is ASCII text. Remember everything in your keyboard would have
almost everything would have an integer representation and the integer representation
of the character x is 120. So let's just look at what the zero is. That is this backslash zero
character that will be character number zero in the ASCII text. Now let's just run this again.
I love Julia and let's just see. We're going to say from one to the length of str underscore subset.
This is a Zyla Julia. Again say character number. We're going to loop through from one to 13. So
it's going to say character one, character two, character three is a tab. Then we're going to
run through that index from one to 13 with an ASCII integer value of and then we call it the int
as we did upstairs. String subset i and then a new line. Let's just run that. You'll quickly see
how that code is put together. So character one is the i and with an ASCII integer value of 73.
The space you see is 32. There is a space again after the love. It's 32 again.
So you can see the integer values in the ASCII text by this simple little loop and we call that
integer value of every character just by this int. And inside of that we put the computer variable
string underscore subset and call its index. So we go from character to character.
So let's just do this from for i in one from i in 97 to 104. So we're going to loop through 97,
98, 99, 100, 101, 102, 103, 104. And we print the character value. So char and then the index i
and then a tab. So let's get see what we get. So from 97 to 104 in ASCII text represents lowercase
A, B, C, D, E, F, G, H. Lovely. Now you can do all 0 to 127. Then you can just take these
little hashtags, pound signs away. These are just the comment marks. Remember, take them away. You can
run that, execute that cell and you can see everything from 0 to 127. Now let's do the following.
is valid. So I want to know, is character number 10, is that valid? Indeed, that is true. Now just to
show you, we are really dealing with integer values when we do have these single quotation mark
characters, H minus E, and that's going to be 3. Because H has an integer value, E has an integer
value, they're 3 apart, so we're going to get 3. We can say, is H less than E? No, it's not, because it
has a higher integer value. And if I take E and I add 3 to it, it's H. So Julia is seeing these single
quotation mark characters as integer values and it can do this arithmetic with it. But when it does
represent it, it's going to represent not the integer value, but indeed the character. Now let's step
over, away from ASCII to Unicode. Now the Unicode, this is the way you would write a Unicode character,
so not char with its integer value, but this backslash U and some numbers. So this is going to
read some character, we don't know what it is yet, X in F. Okay, let's run that block of code and we
say, oh it's this upside down A, which in mathematics of course stands for for all. So for all X in
this function capital F. Now just be a little bit careful because this, if we wanted the length of the
string now or the index of it, what does this Unicode character, does it take up just one space?
Well the reason I'm asking obviously means it's no. So let's just look at what the index value 1 is.
It is this upside down A, which as I say in math stands for for all, for all values of. But if I
were to ask for 2, I'm going to get this error. Try it out, you'll see you get that error. Now we can
see what is next, what comes after this, in this, after value number 1 in the string that contains
a Unicode character. And we use this function nextind. Let's look. And it says the next value
is 4. That tells us that that took up three spaces. This upside down A took up three spaces.
And this first space here is actually index number 4. So that means we've got this difference between,
we've got this difference between length because length is going to be false. Because that single
character takes up more than one space. So we can look at this end of this and we can look at length
and we see it's two different things. The length is still going to just count for us. That is going
to be 1, 2, 3, 4, 5, 6, 7, 8. But end of counts those three values for the upside down A for all sign
and takes up three spaces. So if you want to run through something, be careful, for instance in the
loop, be careful what you do if you do include Unicode characters. Great stuff. Next up, we're going to
look at splitting and joining strings.
