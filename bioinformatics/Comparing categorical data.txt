So in this lecture we're going to look at comparing categorical data.
Let's set up our style sheet.
There we go, just the normal things.
I've also added image this time to the ipython.core.display package here
so that I can just display some images on this notebook on this web page.
So what are we going to need to get the job done?
I'm going to import numerical python numpy and I'm going to use the abbreviation np.
I'm going to import pandas as pd.
From scipy.stats I'm going to import bays underscore mvs.
And then my old friend matplotlib.pyplot as plt.
C-bonus SNS.
Aspecial warnings from warnings import filter warnings.
I'm going to do my plots inline and filter warnings ignore.
Might not use all of them but those are the standard ones.
Let's compare categorical data.
Now in the previous lecture you remember we had two groups
and those groups were of nominal categorical type.
In other words it was with appendicitis, without appendicitis.
There's no way to order them.
It's not ordinal categorical data, it's nominal categorical data.
As I said I might have called them blue and pink.
There's no way to order that.
But the variable in each of those two groups that I wanted to compare to each other,
that variable was of ratio type, ratio numerical type.
Now what if that data was also categorical in some way?
What if it was also nominal categorical or even ordinal categorical?
What I'm thinking of here for instance are surveys with a Likert type scoring system.
Strongly agree if you give a survey to someone and you ask them to fill in based on a statement whether they strongly agree, agree, neither agree nor disagree, disagree, strongly disagree.
That would be an ordinal type categorical data.
There's some order to them.
It's still categorical because you can't say someone who chose disagree as twice as unhappy as someone who agrees, etc.
But that is all categorical data and I've got to, in two groups or even more than two groups, be able to compare categorical variables with each other as well.
To the rescue comes the most commonly used statistical test, the chi-square test.
So let's just import our mock data there.
We've done it a hundred times before.
Not a hundred.
pandas.readcsv, as soon as I use the readcsv method there and in brackets there and in inverted commas there.
In quotation marks I should say, mooc underscore mock dot csv.
It's a comma separated value file.
As soon as I use that, put it inside of a computer variable, that computer variable becomes an object and that object contains a pandas data frame.
We can look at the first five rows just to make sure it looks like everything imported beautifully, no problems there.
So the chi-square test.
I'm going to explain it by way of an example.
So imagine we could just able to make two groups, those with and without appendicitis, and we want to see whether the incidence of retroviral disease is different between the two groups.
I might as well have said those with and without retroviral disease in our study group, was there a difference in the rate of appendicitis or not.
It makes more sense the other way around, but it's going to work out exactly the same.
So I have to create a little table.
And that table is called a contingency table.
And it contains a certain number of rows and a certain number of columns.
It's a neat way to order things.
That, as I said, that table, usually two by two, but you can extend it.
Two by two meaning two rows, two columns, but you can extend it even more.
If you think of a five point Likert scale, of course, you're going to have at least five rows on the one side.
Or if you wanted to put that in the columns, you're going to have five columns.
Let's use the let's use the group by function this time.
So I'm going to create a new data frame.
Data was a data frame.
If I create something new, a new computer variable that would also be a data frame.
And this time, instead of making just new sub data frames,
remember we used the boolean operators equals equals or etc.
This time I'm going to use the group by.
We have seen it before.
So I'm going to call it a new data frame name.
Histo underscore group equals data dot group by.
And then you've got to tell it what column to group by.
And if you use the column there, you've got to reference the data name, the data frame name again.
So it's data square brackets, single quotes there.
Histo, you can use double quotes as well.
So it's going to split this data frame in two based on all the different values it finds in the Histo column.
Now our Histo column is only going to contain no and yes.
So it's only going to have no and yes split in this data group.
And let's just see how that works.
If it's split now and I look at the RVD column of this new split up data frame.
Histo underscore group RVD that column and we're going to just do value counts.
Again, what does value counts do?
Remember that finds all the whole variety of values that it can find and it counts each of them.
Again, we're just going to have yes and no's.
And this is what we find.
It tells us that our data frame is grouped by Histo column.
And what did it find in the Histo column?
No and yes.
No and yes.
That's all it found.
That is all that it found.
And inside of that it looked at the RVD column and in the RVD column it found no and yes as well.
But it now will do that for both.
It will do that for both of these group by splits.
So if the histology was no there was 16 negative patients and 14 positive patients as far as RVD is concerned.
And those with appendicitis there were 80 RVD negative and 40 RVD positive.
Now we can ask that.
Read this but it tells you how we split the data frame.
Now from this it's a linear little line there we've got to create this row and column effect.
Now you've got to do this by hand.
And what I'm going to use is this numpy dot array.
Remember we imported numpy as np.
So I'm going to do this array using this data up here.
I've got to do this by hand.
And I'm going to give it a computer variable name.
You can call it whatever you want.
I called it histo RVD observed.
Because that's what we observed in our study.
This contingency table 2 by 2 is going to be a contingency table.
It is our observed values.
Now look how I have to construct this array.
So very carefully I've got my round brackets there to open and close this array method.
Then square brackets for the whole thing.
So there's an open square bracket there and an open square bracket there.
And then I'm going to write down each and every row split by a comma.
So that first row goes in its own square brackets.
16, 14.
Let's go 16, 14.
And the other one 80, 40.
So these round brackets, remember they follow every method.
And inside of them go the arguments.
Inside of the, it takes a single argument.
And that single argument goes in these two square brackets here.
And then every row goes in its own square brackets, split by a comma.
Let's see what that looks like.
Now it's a 2 by 2.
Two rows, two columns.
My contingency table of observed data looks like this.
Now I made a little figure there just to clear things up so you can see exactly what it means.
So 16, 14, 18, 40.
16, 14, 80, 40.
That's what we have there.
So on the top, remember from this, that will be the RVD status.
And on this side the histo status.
So no.
And inside of no, histo no, I had no 16, 14, yes RVD.
No 16, 14, yes RVD.
No and yes.
And for the histo yes group, I had RVD no 80.
RVD yes 40.
So there we go.
80, 40.
And this is exactly what we've created here by this numpy array.
Once I have an array like this, I can now do the chi-squared test.
So you've got to do that step.
Now, the method that we're going to use is from the SciPy, Scientific Python module, the
stats sub-module.
And it's called chi2 underscore contingency open and close, these round brackets.
And it takes four, it takes a single argument, and the argument that it takes is this array.
And there I created it and I gave it this name, so it's going to take that value inside of
there.
Now let's just see right up there.
Now import.
Now see, this was never going to work because I never imported it directly like that.
So let's do that.
Chi2 underscore contingency.
And if I hit the tab key, it will, it will, it will auto complete that for me.
And that's wonderful to do.
Now look what happens if I rerun this again.
Remember I've run some others, so this is going to be out of sequence.
If I run this now, that becomes seven.
It's now the seventh set of block of code that it's executed.
And Python does that, and IPython does that.
It's not going to see these in order as the page goes down.
It's going to see these in order as how you execute it.
So the latest one that you've executed will be what is in memory.
And that can sometimes catch you out when you start changing what is inside of computer
variables, what values are inside of there, that you have to remember what the last one was.
So back to this Chi2 contingency, which will now work.
Well, would it have worked?
That's the question.
That's another interesting question.
Remember, I didn't say from scipy import stats.
I commented that line out.
Now I said scipy dot stats import base and that directly.
So look at that.
Another little catch out.
These kind of mistakes creep in all the time until you get used to them.
So it's good to see them here.
So I need not put or it won't work actually if I put stats dot.
I've got to just use the word itself.
Chi2 underscore contingency.
That's it.
Back to what it does.
It returns four values.
Therefore, you have to attach to it four different computer variables.
It returns the Chi2 value.
That's why I've called it ChiVal.
It returns our p-value probability.
So what is the p-value for?
Is there a difference in incidence in RVD status between those with and without appendicitis?
Or you could say it the other way around because this is two by two.
It's going to also give you back the degrees of freedom and expected.
It gives you back, well, the expected table is if you had this total.
So 80 plus 16, that is 96.
And that.
And 54.
And 30 on this side.
120 on this side.
So if you just add the columns and you add the row values,
there's a little equation that you can do to give you an expected.
What would you have expected?
And it's going to take your observed and measure it against this expected using the degrees of freedom to give us a p-value.
That's not important.
What's important?
It comes in this order.
So give it names so that the names make sense.
So let's run that.
And let's print these to the screen.
So the Chi2 value, that was 1.3.
It doesn't really mean something.
What we're after is the p-value.
And that was 0.25.
So there was no statistically significant difference between these.
Between the RVD status in the histology negative and positive group.
Just to show you the degrees of freedom, we're not going to do much for that.
This is 1 degree of freedom in my 2x2 contingency table.
And that was the expected.
Given the total, if I were to total these rows individually and total these columns individually and have a grand total of all the patients,
this is what I would have expected to see.
19.10.76.43.
And what I observed was very close to that.
Hence my p-value not being statistically significant.
And that is the Chi2 test for categorical data.
Just to remind you, you've got to create this little table.
One way to do that is to do this group by function.
Just so that you can get your values there.
You have to think about what you want from your data set.
And this is the way to create your array.
Now it could have been bigger.
You could have had another value there.
You could have had a comma there and another square bracket sets to make more rows, etc.
And then very simply, you run the Chi2Contingency function there.
It's one argument which is just your values.
And out pops four different values.
And it's the second one there.
I could have called these whatever I wanted, but it gives you back these things in order.
So name them like this so that you remember what each one is.
So that's quite an easy test to do.
The one thing that can catch you out, as it did here in our example,
remember how you imported things.
It's very important.
If I just said from scipy import stats,
I could have just referred to stats dot Chi2Contingency.
But if I imported it like this from scipy stats import Chi2Contingency,
I'd just use the word contingency.
Excellent.
