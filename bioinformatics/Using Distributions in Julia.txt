So here we are in the second lecture and the first one I was really just interested to see
whether I could do some basic medical statistics using Julia and more specifically using some of
the packages with which you can extend the base installation or base install of Julia and I
promised we'll look at one or two more of these packages and in this lecture I just want to look
at the distributions package. Remember in Julia we use this keyword using to import a package so I'm
going to import distributions once again we are in the Juno development environment instead of my
usual Jupyter notebooks so for Juno we just hover over the end of a line of code there in the Mac OS
which I'm here I'm going to hold down command and hit return on Windows and Linux we're going to use
the control key and hit enter. I do that you can see the little animation at the bottom it is busy
importing the distributions package once it stops spinning you'll get a little check mark there it
has been installed now I'm also going to import here the get fly plotting library plotting package now if
you've just started it up once again I warn you it's going to take quite some time to do it if you've
opened opened Juno before or Julia before and you've already imported it during that session obviously
it'll be a lot quicker but this I've just started up this computer now so the first time I am going
to import this get fly it's going to take quite some time and what I'll do I'll pause the video and
come back when it's done otherwise it really is just a waste of time you can see the spinning cubes at
the bottom just indicating that it is busy importing that that package and I'll just pause the video
and come back when it's done okay we're back and get fly has indeed imported the last thing I'm going
to import is the markdown package that's a small package that should go fairly quickly now I'm going
to just again use markdown dot pass and just to print something nice to the screen using distributions
in Julia there we go so the first thing we're going to do is just set a random seed value so srand and
I'm just going to use one two three that means the first time that I run this code if I open this file
and I run the code I'm going to get the same random results every time now before we use the package I
just want to show you that Julia has some random number commands and the first one that we are going
to use is r-a-n-d I'm going to use it in a special way I'm just going to ask it to choose a random
value from a set of values which I give it and so it's r-a-n-d open and close parentheses and I want
to go from one till ten inclusive in in steps of a half so I'm going to tell Julia that take the values
one one and a half two two and a half three three and a half up till ten and give me any one of them
at random give me one back and it gives me back the value two two dot there indicating that this
is a floating point value it's two point zero I can do more than that I can suggest that I want
more than one back and I'm going to add it to an array so there's my computer variable I'm calling
it x underscore rand using underscores there in my variable name is probably a bit old-fashioned
there anyway rand open and close parentheses and inside of that there are two arguments one is the
range that I wanted to use from one to a hundred in steps of a half and instead of just giving me back
one value I want now one ten value so I can introduce a comma then ten inside of this rand
command here and if I hit there I'm going to get this array back which is called a vector here
because it's a column of values I can click on it it'll tool open for me and then there are the
numbers 17 and a half 2 20 83 21 and a half all 10 of them chosen from this range of values from one
two hundred with a half value steps inclusive good now let's use a random number r-a-n-d-n that's going
to select a random number not from the set that I give it but from the standard normal distribution
and remember the standard normal distribution has a mean of zero and a standard deviation of
one so if I just were to run the code it gives me back 1.53 once again I can say don't only give
me back one of them give me back a hundred of them and I add that to the computer variable this time
I've just called it x underscore r-a-n-d-n you can call it whatever you want and there's my vector now
containing a hundred values but taken from a standard normal distribution just to show you that it is a
standard normal distribution I'm going to plot the density the kernel density estimate or density
estimate of these hundred values so I'm going to use the plot command which now comes straight from
gadfly so I can just use plot function there method there x equals my random numbers and I'm using the
density stat the geometry I'm using is a line and I'm giving my plot a name a title 100 values from
random n once again I'm going to run this code I'll have to pause the video because the first time
you plot something it takes time and there we go we can clearly see this is from a normal a standard
normal distribution centered at zero most of our values are going to be there trailing off to the
side and I asked for a hundred random values and it took those values used the equation for a density
estimate to draw that graph for me now let's just use instead of r-a-n-d-n let's just use the normal
distribution as is what we can do now or I should say this is part of the distributions package so I'm
still going to say r-a-n-d remember that was just going to give me back a random value and I could
give it a range from which to take but now inside of the parentheses there is something else I could say
now normal and that takes two arguments the mean and the standard deviation and I've attached the two
computer variable this time I've called it x underscore norm and I want a thousand of those so
rand still takes these two arguments the first argument where before we gave the range say from
one to a hundred and steps of a half now I want instructing Julia take the normal distribution with
a mean of a hundred and the standard deviation of 20 construct that and from that random variable
distribution give me a thousand values instantly done and there is my one thousand values drawn from
random normal variable distribution with a mean of a hundred and a standard deviation of 20 now look at
this Juno very nicely I can hover over that 20 click on it and drag it left and right left and right
I can ask for different values and it'll update the vector it'll update that vector let's just plot that
that should go a bit faster now and there we go that was almost instantaneous anyway now you can see
my density estimate here is centered around a mean of a hundred trailing off on both sides with a standard
deviation of 20 now I perhaps can illustrate this a bit better with a histogram and I will make a video
just on the on GAT fly as well but as you can see this is a histogram most of the values were
were around a hundred there good let's go and do some descriptive statistics just on these just to
make sure that we are indeed dealing with a normal distribution as if those plots weren't proof enough
anyway we can ask for the mean and for the thousand that I got this time around because remember I used
the Rand method there just give me random values back a thousand of them but take them not from a range
that I give you but take it from the normal distribution there with those parameters so indeed very close my
thousand values got there indeed a median would be close enough there as well the maximum value I got
was 172 the minimum was 37.69 standard deviation very close to 20 as we asked the square of that which
is the variance and I can also get certain quantiles the 50 percent 50th percentile whichever way you want to
want to say that 80 80th 95th 99th we can ask for the values there and we're going to get it back
as a vector so the that would be the median anyway the 50th and indeed there's the median up there 99.552
99.552 and you see the values go there the length of the vectors is going to tell us how many values
indeed there was a thousand in it we can ask for this thousand that we got what the skewness is and what the
ketosis is it'll work that out for us very well we can also fit an array of values to a distribution and
here we can use the fit command there and we say we want it as a normal distribution and we give it our thousand
values and it's going to tell us well that thousand that you have has a mean of 99.54547 which already
new and a standard deviation of 20.7 which is just what it grabbed there so fit is going to do that for
you let's look at another distribution the binomial distribution now remember there's two things to
a couple of things to the binomial distribution by meaning two you've got to have an outcome
only two outcomes and the flip of a coin for instance there's only heads or tails and also
you must have the fact that every time you run the experiment the previous outcome should not influence
the current outcome in other words if i just flipped a coin and i flipped it again the second flip
is not determined by the outcome of the first flip so i've got a little vignette here a little story
for you here let's imagine let's imagine that we do 30 cases of a certain procedure and the probability
of a complication occurs in two percent of cases let's make it 0.02 let's keep it there so that complication
the patient either has a complication or they don't so it is binomial and we know from historical data
that this complication occurs in two percent of these operative cases so that that occurrence of
that complication would be a success so don't look at the literal definition of the term success because
suddenly to have a complication is not a success but the the outcome that we're looking for happens in
two percent that outcome that two percent is our success rate and we can now ask the following so
give me i've used a computer variable name x underscore binom from the randomly select for me 500 cases
take it from a binomial distribution and this binomial distribution says if i were to do something 30
times so i in in the next 30 cases that i do that's my in my in value and the probability of something
occurring is only two percent so use that distribution and if i were to do this 30 with the incidence of
success of only two percent if i were to repeat this 500 times tell me in each time what
the the outcome is going to be and there you there you see it if i do these 30 cases in a row the first
time i did 30 cases i got zero complications zero success the second time i did the 30 cases in a row i
got two complications zero zero etc so that would give us this kind of if i could do a histogram of that
let's just go there let's draw a histogram of that and we see well indeed it was much the probability or
the likelihood of me having zero complications was pretty high if i only did 30 cases and and my my
success rate or my complication rates only two percent we can see that much better here with a density
with a density estimate here and indeed that is so your highest likelihood is going to be to in 30
cases you only do 30 at a time if i were to now report if i were to do a trial and i only included 30
cases if something occurred in only two percent of cases anyway i had this highest probability of in that
run of 30 to have no complications whatsoever i had a smaller likelihood of having one and then two and
three and it gets less and less and less as we go so that gives us an indication if i'm going to do
a trial and i'm only going to include 30 patients and something occurs in such a small percentage of
them the highest likelihood was in the run of 30 that i was going to get nothing whatsoever so those
are two of the probabilities there are many many more you see the website here you can just go on
there and there's a multitude of different distributions that you can use here's one example of a continuous
random variable and a discrete random variable i've shown you here but the distribution package is much
more than this does that and it can also give you a univariate analysis multivariate not analysis
univariate random variables multivariable random variables and even matrix variate random variable
so very powerful package indeed and as you can see here very very easy easy to use inside of
inside of julia and just asking for some random variables from a certain distribution indeed very easy to do
very powerful
you
very easy to use
you
you
you
pretty big
you
you
you
you
thatavons
