And here we are already in lecture two. What we are going to discuss is this shell that is where
you write your actual code. It is where you write code that gets executed line by line as you type
it in and hit enter. So you can construct the program in as much as the shell will remember
what you did previously but it won't allow you to construct a proper program. It is a good place
though to learn just what Python is all about. So to do that we're going to start looking at a bit of
arithmetic. The normal stuff of addition, subtraction, etc. And then I just want to end off with a bit of
the way to show you a way that computer programming language sees equations a bit more different than
normal algebra. So here we are in the shell and you'll see these little marks on the left hand
side here. The blinking cursor and you can start typing code. So here we go writing your first
Python code. Now as I mentioned all you can do here is type in one line and it will be executed.
And the best thing to start with is just some basic arithmetic. So I could just say four plus
three. Now you've noticed I've put these spaces in between. That really is up to you. Some people
like their code to look neat and they've always put those spaces. Some don't really care. There's
some conventions to try and stick to. I like those spaces to make things nice and neat. So I have typed
in four plus three and I hit enter and there's my answer seven. So really just one big massive fancy
calculator. So that's just addition. That's all I have to do. Let's look at subtraction. I can say
four minus three and lo and behold we have one. What about multiplication? What is four times three?
Remember times on a computer is the little star symbol which is usually shift eight and that is
twelve. Now let's go for division. Four divided by three and lo and behold what is going on now? We have
one. Now in any version below version three of Python. So here we have 2.7.6 as we can see up here.
We have the situation that Python sees by default all numerical values as integers.
So it's going to divide three into four and well let's do the other way around. Let's have three
three divided by four and that's zero. Now it is just seeing these values as integers.
To force it to see them as floating point and perhaps later we'll talk about data value data types.
You have to put in three point zero divided by four point zero and that's going to give you 0.75.
Now Python is seeing these as floating point values. Any decimals in computer programming language
specifically Python is called floating point values as opposed to integers. So just watch out when you do
this division. Now you needn't have the point zero. You can just say three point divided by four and a
point and it's still going to work. You needn't put those zeros in computer code. So that is a division.
There's also something called floor division. If we really just look at say something 13 divided divided
I put it twice. Okay that's going to leave me with a six because that is the closest integer
we are going to get when we divide two into six. It's going to be of course six point something.
And that is a called a floor division. Now if I do 13 and then percent which is shift five
let's have two again. What do I have one? That is called the modulus. So if I divide two into 13 that is
six will be the closest integer. We've seen that in the floor division there. Six times two is 12 and the
remainder is one. Let's have for instance 10 modulus 6. That should be four because the closest integer of
six divided into 10 would be one. One times six is six. If I do two I'm over 10. I can't have that.
So it's one and one times six is six and I have a remainder of four to get from six to 10. So that is
modulus. Now the last thing to look at this as far as simple arithmetic is concerned is just to look at
the exponent. Three squared at which we all know should be nine. So the square symbol is just putting
this multiplication sign twice. So three two stars in two that will give me nine. That is just simple
powers. So if I have three to the power three that is 27. So that is as far as basic
arithmetic is concerned. Now let's just move on just to variables. Now what is a variable? An algebra is
quite easy. We use a b c d usually x and y and we assign values to that. Now the same happens in computer
code. Things are just ever so slightly different. There's a different way a computer language looks
at a variable. So I'm going to use my first variable x equals let's make it two. And now I have stored
the value two inside of this variable which was created inside of computer codes like this empty
little bucket and I call it x and I can put anything in there. At the moment I've put in
two. So if I just type in x I'm going to get back two. Let's do y equals three. And if I then type in y
lone beholder three. Remember now if I said x divided by what? Well let's just first just have x plus y
just to make things clear. There's going to be two plus three that equals five. And if I have x divided by y
I'm going to land into trouble again. Okay for the reason that I did not let python know that these
should not be integers. I should have said x equals two point zero. Y equals five point zero. And if I
now have x divided by y I'm going to get the decimal value that I am after. Very last thing in this video
is just let's just have a look at the first little comparative operator. And that is if I say
x equals equals y. When you see the double equal sign like that and we'll get into this a bit more
later on because it's quite important specifically if we start writing little programs and we want
loops inside of them. This says is x equal to y? And of course the answer is false because x was
two two point zero and y was five point zero. So that is a question that you ask. It does not equate
one to the other. If I said x equals y what is going to happen now? Take a wild guess. What does x become
now? x now becomes five because what computer code does it looks at the right hand side of an equation sign
first and it says well what is y at the moment? Well y is five. Now that I have that I am going to give
that value to put it inside of the bucket on the left hand side and that bucket was x. So if I would say
x equals x x plus one now that makes no algebraic sense because if I put x both to the same side I'm
going to have zero equals one. That doesn't work. But we know x equals five at the moment. Once again the
computer code is going to look at the right hand side first. It has this bucket called x. At the
moment it has the value five inside of it. It's going to add one. Now it has six. This value six
and then it looks at the left hand side and says what must I do with the six now? Well I'm going to
put it inside of this bucket called x. So irrespective of what was next before, five was inside of this
x. It doesn't matter. It is now going to have the value six inside of it. So very importantly this is how
computer code works.
