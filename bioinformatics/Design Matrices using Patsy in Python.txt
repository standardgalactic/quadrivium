Hi there, my name is Jean Klopper and I'm a Surgeon and Research Fellow at the School
for Data Science and Computational Thinking at the University of Stellenbosch.
One of my aims is to provide educational resources for statistics, for data science and machine
learning.
Now this video is going to be about one of the packages in Python.
If you want an easy but thorough introduction to Python, I'm going to leave a link in the
description down below to one of my courses that you can take to get a certificate from
my research unit.
One of the most common things we do is to create models, whether they are linear regression
models or logistic regression models, and for that our data needs to be in a certain format.
As far as Python is concerned, I like to use a package called StatsModels, and to get your
data into StatsModels it really has to be in the correct format, and for that I use a package
called Patsy.
So in this video I'm going to show you how to use Patsy just to get your data into the
right format for the use in building linear models inside of StatsModels.
Patsy is also great to transform our data.
Sometimes we have a categorical data and we want to do one-hot encoding, or we want to
take the logarithm of one of our numerical variables.
I'll open a Colab notebook and I'll show you just how to use Patsy.
We've opened our Colab notebook design matrices.
Now this notebook, together with the data file that we're going to use, will be available
on GitHub and I will leave a link in the description down below.
So this notebook is going to be all about the Patsy package, and that is for building
design matrices and then also describing linear models.
We're going to concentrate on the designing of matrices.
So what this is about is having a data set and importing that data set and then transforming
it so that it is ready for use in other packages, specifically in StatsModels.
So think about creating a linear model, a logistic regression model, the data that you import from
a spreadsheet file, we can transform that data so that it is ready for use inside of StatsModels.
And it's something that we have to do, have to do quite often.
Now this is run in Google Colab, but I've left a little note for you there if you want
to install this on a local machine and also some hints to install Miniconda and create
environments for your project and only install the packages that you require for that project
inside of that environment.
But we're inside of Google Colab here and we see the table of content nicely neat on the
left-hand side and of course we don't need to do any of this installation.
Let's rather have a look at the packages that we're going to import.
We're going to import numpy and we're going to use this namespace abbreviation np and that's
quite standard as well as for pandas as pd and then we're just going to import patsy
and then from patsy we're going to import two functions so that we can use them directly,
dmatrices and dmatrix.
You see the tooltip coming up there.
So let's run the cell and we'll import those packages.
So the data that we're going to use, as I said it will be available on Github.
For this demonstration it is on my internal SSD.
So I'm going to run this code cell and it is going to allow me to import the file into
this active session.
I'm going to select choose file and that's going to open my file browser on my system
and I'm going to navigate to that csv file and click on it.
Good, that file is being imported and we can see at the bottom here user uploaded the file
data.csv and you see the byte size of it there.
So let's just use the read underscore csv function with the function inside of pandas and we're
going to import this file.
And if we use the head method there we'll see that we have the first five rows by default.
We see we have a categorical variable here, SSS.
Now I'll just go through the data set, this is a simulated data set so it does not come
from real patients.
So SSS is skin and soft tissue infection or sepsis and that really pertains to the post
operative period.
Patients who have had surgery and they can develop, wound sepsis would be the older term for that
but we refer to it as skin and soft tissue sepsis and we see it's a binary nominal categorical
variable.
We just see no yes, no yes there.
Now what we're going to do or what the aim was for this data set in other tutorials is
to build models that can predict whether a patient will develop skin and soft tissue sepsis
based on these following independent variables.
First is their BMI, that's their body mass index.
So it gives an idea of whether they are of normal built in size, whether they're overweight
or whether they're underweight.
Highest temperature.
So this was really a data set simulated for patients who came for emergency surgery and
in that period between admission and getting the emergency surgery what was the highest temperature
they had.
This would be in degrees Celsius here.
What was their highest heart rate in that period prior to their surgery.
So they came to emergency room and were seen and decided emergency surgery was required
during that time period.
The temperature, the heart rate, the blood pressure will be monitored multiple times.
So one of the typical things to do is just to look for the highest temperature, the highest
heart rate.
Pre-op WCC, that's the pre-operative white cell count.
White cell count is a type of infection cell and we can see for these simulated patients
their white cell count was indeed elevated.
Pre-operative CRP, C-reactive protein, is a protein in your blood, a level of which goes
up during certain types of inflammation and infection.
Another parameter that we use is pre-op platelets.
Platelet is a type of blood cell as well and it can increase or even decrease during severe
sepsis.
The grade, now that is the grade of wound that we're talking about.
So someone who goes for clean surgery, that would be encoded here as a one.
Clean contaminated surgery would be two.
And for instance, here we think of cutting into an uninfected area, but that contains organisms.
For instance, the bowel.
Three would then be contaminated.
So we were talking about appendicitis.
So an organ is already ruptured and there are organisms lying around.
And then you also get dirty wounds, which would be grade four, and that would be wounds of a traumatic
nature that there is a lot of soil or foreign body in the tissue with some devitalized tissue.
ASA, that is a grading system used for pre-operative illness.
So other illness that the patients have and one being healthy and the higher the number
goes, the more comorbidities, the more other disease they have.
And that gives an indication to the anesthetist of the risk of the anesthetic.
And then we have obturation.
And that is just how long the procedure took in minutes.
So just to explain this little simulated dataset.
So let's look at a very simple example.
We're just going to use a simple linear regression model.
So we're going to have one independent continuous numerical variable, and we're going to try
and predict the value of another continuous numerical variable.
And just to remind you what these are all about.
If it is a single independent variable, we have this column of ones that will be for
our intercept.
And this column here, x sub 1, x sub 2, those are the actual values for each of our observations
in the independent variable.
And we have to find these parameters beta sub 0 and beta sub 1.
And if we do this matrix vector multiplication, on the first line here, we're going to get
the predicted values.
If we choose these values, these parameter values, beta sub 0 and beta sub 1 properly.
Now we're going to do that by creating D matrices.
So design matrices, and you see the function there from Patsy, D matrices.
And we're going to pass as a formula what we are after.
So what we're trying to simulate here is the following.
We're trying to simulate pre-op CRP given pre-op white cell count.
So think of a scatter plot, and we have on our x-axis pre-op white cell count, and given
that we want to build a model that will predict the patient's pre-op CRP.
Sometimes we use CRP, at least changes in CRP, to make clinical judgements in surgery.
But it's not always available at all laboratories.
Again, this simple little model that we're just using here as a tutorial, we'll try and simulate
what the CRP is based on the white cell count.
Unfortunately, simple models like these are not very clinically relevant, but we're using
this as an example.
So we would use something that's very akin to what we would use in the R language for
statistical computing, and that's a formula.
So this one says pre-op CRP by pre-op white cell count.
So the first one's the one we're trying to predict, the dependent variable.
And then after the little tilde symbol, you'll have to find that on your keyboard, it's different
for many keyboards, we list the independent variables that we want to use as predictors.
So we're going to use the patient's white cell count to predict their CRP.
And then that goes inside of a set of quotation marks, so that is a string, and we just have
to tell this D matrices function where this data comes from.
So we're passing this instance of a data frame object, Df, that we assigned that import
to of our data.
And that is going to give us two objects.
So we're going to assign it to two variables, and it's typical to use y, a lower case y.
That is our dependent variable, that vector.
And then x is going to be this matrix that contains two columns.
We only have a single independent variable, but we also have to add that column of ones
so that we can have an intercept as well.
And so that feature matrix we usually use an upper case x for, but you can call, you can
use a computer variable name that might be more suitable to what you do.
So let's just look at the type of these variables, the instances of these objects that we created.
So for y, we ask what the type is, and we see it is a patsy.design underscore info dot
design matrix.
So it is a type of matrix, it's going to be a single column, because if we do y.shape,
if we look at the attribute, the shape attribute of this object, we see it's 281 rows along
one column.
And if we look at the first couple of those, and we're using indexing notation here, the
square brackets, colon five, that means start at, begin at the beginning, the first row,
and then the first five, and we see 29.3.
And if we go up to our data set here and we look at CRP, you see the first patient was 29.3,
right there.
The second patient was 29.9.
And if we go down there, we see 29.9.
So that's going to be a vector of our dependent variable.
Let's do the same.
Let's check on the metadata for x.
The type of x is also going to be a design matrix.
The shape of that will now be the same number of observations, the same number of rows, 281,
but we're going to have two columns, of course.
And if we look at the first five entries there, we see indeed that we have the white cell counts
there in the second column, but in the first column, we have all ones.
And that is how the linear algebra of this works.
For instance, if we use ordinary least squares, we need that column of ones.
Now these two objects, y and x, they are now ready for use inside of stats models if we
wanted to build a simple linear regression model.
Now we can add a couple more things to this D matrices, more arguments to the D matrices
function.
And the first one I want to show you is, well, we might have more than one independent variable.
So here would be a formula that we would use, you can see it right there.
So it starts with pre-op white cell count plus pre-op platelets.
And now we'll have two independent variables trying to predict this pre-op CRP.
So we just use the plus symbol and we can add any of the other numerical columns.
It might be that you require, or be in a situation that you don't want the intercept, the column
of all ones.
And that's very simple to do.
You just tag on a minus one at the end of your formula.
And I refer you back again, if we go up here, I'm talking about this formula, which we put
inside of quotation marks, building our linear model.
So we can also have this interaction of terms, we can use the colon symbol or multiplication
symbol that would be star, eight on my keyboard, the asterisk there.
So this is how we would do it, pre-op CRP, and we're going to try and predict that by pre-op
white cell count, pre-op platelets, and then the interaction between pre-op white cell count
and pre-op platelets.
And we can, as I said, also use this multiplication symbol as we've done there.
The last thing in this section, I just want to remind you that there's also a D matrix
function instead of D matrices.
And that's only going to give you the design matrix as far as the feature variables are concerned.
In other words, our column of ones, unless we want to omit that column or that intercept
column and just tag on minus one at the end.
But it's still just all the pluses and still put it inside of quotation marks.
But now we have the only the D matrix function.
So we only going to assign that to a single variable X.
Now that is to get our data into the correct format for use inside of stats models for instance.
But we can also transform the data before you use it inside of a model.
For instance, we might want to take the natural logarithm of one of the variables.
And it's very simple.
We're just going to wrap our variable inside of a function.
In this instance, we have the numpy function log.
That would be the natural log, perhaps it would be more useful just to transform with log base
10.
Irrespective of how you want to, what kind of transform you want to do, you can add this
function right inside of your formula.
So it's still going to go inside those quotation marks, but it'll just be a normal function
here in this instance, a function from the numpy library.
So very simple to do.
Now we've shown interaction, but we might want to create a brand new variable that does
not exist in our data set.
For instance, in this case here, we want to create a new variable which adds the patient's
white cell count and the op duration, the duration of the surgery.
So that's not a very natural thing or realistic thing to do, but this is only for demonstration
purposes.
The problem is if you want to add two variables to each other, we're going to have to use the
plus symbol, but that is telling Patsy that we want to just add more numerical variables
to our model.
So we wrap this inside of this I symbol.
So let's say I and then in the set of parentheses, add these two.
So for every patient, those two values are going to be added.
And that is now a new variable inside of our model.
And so very useful thing to do, but do remember to wrap that inside of I.
And if we show that, and I remember this was D matrix, so we're only going to see the feature
variables.
There's my column of ones.
Now we see this addition column, and then there's the CRP column, for instance.
So an example there.
We can also do statistical transformations.
One example would be to standardize all the values.
So to standardize it, you can take every value, you subtract from it, the mean of that variable,
and you divide by the standard deviation.
So again, here we're going to use D matrix.
So we're only going to have a feature matrix here.
And still inside of our quotation mark, we'll use the keyword standardize, and then pre-op
white cell count.
The data comes from the D of data frame.
And let's look at the first three values now.
So instead of pre-op white cell count, we'll now see a standardized version of this.
We can also center the data.
That is where we just subtract the mean from every value.
And the keyword for that would just be center.
And here we just center all the pre-op white cell counts before we import them.
Now we can also even create our own functions and change our variable.
And what we're trying to do here is just to convert the hour, the minutes, the obturation
was the minutes.
Let's convert that to hours.
I'm creating a function here.
So using the def keyword there, convert underscore hours with a single variable.
And we're going to return x divided by 60.
And we use it right inside of our formula here.
So D matrix and then pre-op white cell count plus convert hours obturation.
So running this function, we see that we have pre-op white cell count there, but then obturation
that is expressed in hours now.
So it is a user-defined function that we can use right inside of our formula.
We can also transform our categorical variables.
And what we can do here is just look at the grade.
Remember those were encoded with 1, 2, 3.
So if we look at the data type of that, of course, those are going to be 64-bit integers.
But that is just an encoding of a categorical variable.
So let's just see all the unique values, the sample space elements.
We see 1, 3, 2, 4.
So it just takes them in order in which they were seen.
So there's 4.
And what we can do here, because it's a categorical variable, we can use something such as one-hot
encoding.
So let's do that.
And the way to do that is with the C keyword here.
So I'm going to take grade and I'm going to pass it to this C keyword.
And if we look at those, we see instead of just grade, we now have three columns.
So remember this first column was all ones.
That's where I intercept.
Then we have three columns representing these four grades.
And then we have the pre-op wide cell count in the final column.
So this is one-hot encoding.
And you might be asking, why are there only three if there are four?
Well, what happens is the first one gets thrown out.
We don't need four values to represent these four sample space elements.
We only require three.
Because if we look at the first patient, the first patient had a grade of 1.
Now these columns would be for 2, 3, and 4.
And if they are 0, 0, 0, it means 0 for 2, it's not 2.
0 for 3, it's not 3.
0 for 4, it's not 4.
Well, the only thing that remains is 1.
And of course, when we build logistic regression models, we want to compare all the others to
the base case.
So in this instance, it works well for us.
So you can see that you only need three values for four sample space elements.
Now, the order, we might just be lucky in the order in which these values appear in our
data set from the first row down.
So it's best if we just specify the order.
So just to show you that first patient, the grade was indeed 1.
So let's specify an order.
And in this instance, I might want 4 to be my base.
So I'm just going to assign this Python list to a computer variable L.
And I put 4, 3, 2, 1.
And I can now use the C keyword again, and I'm using the grade, the independent variable,
but now I'm setting levels equals L.
So if we now look at it, the columns would now represent 3, 2, 1 in that order.
The first one is always removed.
So remember the first patient had a grade of 1.
So if these represent the columns, remember that first column of 1s, that's just our intercept.
So this would represent 3, 2, 1.
And indeed, there's a 1 inside of the 1 column.
And this is 1 hot encoding.
So only 1 of those will be 1.
And it is in the 1s column.
So we know that first patient had a grade of 1.
So it's very easy to do 1 hot encoding.
So that is it, the short version of what you can do with Patsy.
And it really is a great tool to use, a great package to use, just to get your data, transform
your data, get it ready to be in the correct format for use inside of a package such as
stats models, where you can do your linear regression and your logistic regression.
So we're going to give them some clear text numbers.
Thank you.
Thank you very much.
Thank you very much for watching.
Thank you.
Thank you very much.
