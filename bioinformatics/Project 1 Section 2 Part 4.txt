So let's change these coded values. Before we do that though we need to know a few things
about our data set and I wanted to show you just to how to play around and look at certain
cells, how to get to them because those would be the values we want to change, how to play
around with your data set a bit. First of all we have this size function and I passed
the argument data frame to it. It's going to return two values, the number of rows and
the number of columns. Therefore I passed two computer variable names on the left hand side
there and I've chosen n rows and n columns because that's quite descriptive. So the size returns
two values so I've got to have two computer variables on the left hand side. So let's
run that block of code and we see 120,6 indeed I have that tuple, two values, an ordered pair
that was returned the 120 rows in six columns. What if I want to know the value of a specific
cell? I can use its address, its row number and then its column number and I have to do
that in square brackets and it's always row comma column. So I can ask the data frame what
is in row 3 column number 4? Let's look what that value is, 16.02. Now I needn't refer to
it as row 4. Now remember there we have row 4 was var 1. I can refer to var 1 by its name.
Now this name does not go in quotation marks, it has a little colon before it. That's how
Julia in the data frames package refers to a column name. So I'm going to say in the data
frame row 3 in the var 1 column which is exactly the same as 4 so I should get exactly the same
value back. I can ask for quite a few rows using this colon separator. Remember we used from numbers
1 to 5 if I want to do a 4 loop and we're going to use a 4 loop very shortly. I can say the data
frame give me rows 3, 4 and 5 comma and if I just use the colon there it's shorthand for saying give
me all the columns. To show you let's run that. So I get all the columns and but I only get rows 1, 2 and 3.
See how the index changes to 1, 2 and 3 but these certainly were rows 3, 4 and 5.
I can pass a list like this 2 and 4, an array I should say 2 and 4 so I want only columns 2 and 4
but I want rows 3, 4 and 5. So you see how you can play around by just selecting certain things.
Now this would be the same as saying give me rows 3, 4 and 5 of the columns cat 1 and var 1. That was
columns 2 and 4 so I'm going to get back exactly the same values there. I can ask for specific rows as
long as I pass them as in array 2, 5 and 99 comma columns 2 to 4. So it's always row comma columns.
Now that we know how to do that, how to get to specific cells, let's change all the A's in the cat 1
column to minor infections. I'm going to change the actual data point values inside. Remember when we
imported, when we imported we saw A, A, A and there were B's further down. I want to change that A into
minor infection and all the B's. So I've got to run down each and every one. If I'm going to go to
column 1, I've got to run through every row. Check if it's A, I want it to write minor infection. If it
finds B, I want it to write major infection. So this is a little for loop that I'm going to write. So
there's my for end, end at the bottom loop and inside of it I'm going to do some boolean tests.
Now remember we had n rows, end columns. The n rows was 120. So I'm going to cycle through
from number 1 to number 120. So I'm going to loop through all of those rows and I'm using this
implicit computer variable here r. I could use anything there. I could have said i. It doesn't
matter. For r in 1 to 120 in essence and it's just going to run through all of those.
First, I'm going to indicate every time I run through I want a different cell and I'm going
to give that cell, I'm going to pass its value into this computer variable called temp. It's
just easier to work with it like that. So I have this computer variable temp and inside of it I'm
going to do, so at the moment it's row 1 in the category column. Whatever the value it finds in that
cell now goes into temp. Now get used to using this first part of the if statement. You're going to
do an if else end statement here. Always say is na, the temp, and then pass the computer
variable temp, which holds that value for the cell. Always test if it has a missing value, na.
Now we know we don't have any, so I'm just going to comment a line out here saying do nothing.
It's going to be ignored because of the hashtag there. But you might have data, CSV files as important,
as missing values, and you want to be able to do something to them. Else if, so if it's not that,
it's going to go to the next if statement. So we have to use the Julia code else if. If temp equals
equals, so I'm not equating these two to each other, I'm not saying temp equals, I'm saying is the value
that's inside temp, which is that one cell we're dealing with now. If it's A, then make that cell,
which is at the moment row 1 in the category column, make it minor infections. If it wasn't A,
we'll do the next if, else if, temp if it finds B. We're going to make it major infection.
Lastly, else, but I only have the A and B, so I'm just going to write there, do nothing,
just to have something there. End, end. So this last end is for my for loop, so it's going to run
through 120 times. And then we have the if, else if, else if, else end statements in the middle.
So I'm going to execute that section, nothing happens, but I tell you now, it's changed all
the A's to minor infection, all the B's to major infection. And I want to do the same to cat 2.
Remember we said if we find a C and X on R, we want it to be female. If it's an L,
a B, an F, I'm going to change it to male. Once again, I'm going to use this for end loop,
R in 1, 220 in essence. I'm going to do the same thing, put that cell value every time,
put it into temp. Now this R in temp is implicit. It's inside of this for end loop. Its scope is not
beyond this little loop. So when this loop is, when we finish executing this loop, I cannot call
temp and I cannot call R. They are inside of, their scope is inside of this loop. I'm going to run
through exactly the same thing. This is good to use this is NA for your first if and then else if for
the ones you're really interested in and the last else just being empty. It's good to learn this way
and as things get more complicated, you can start adding things. The only new thing here is this,
these double lines here. It's usually shift back, backslash most keyboards, especially on the Mac.
All we're saying is or. So if temp is C, yes or no, or is temp X, yes or no, or is temp R. If all three
of that turn returns a false, it's going to go to the next if else, else if statement. If any one of
them is true, because these are ors, not and, they don't all have to be true, because remember we used
C, X and R for female. It's going to turn that cell into female. If it finds L, B or F, it's going to
change it into male. So we're going to run that code cell. The last thing I want to do, the second
last thing I should say, I want to go down the var1 column and I want to subtract five from every
entry and I just have to do that. I'm going to say var, if I say df in that column, it's going to look
at all of those values at once. Well, it doesn't really happen at once, but we say it looks at them
all at once. I don't have to cycle through them with a for loop. And I'm going to subtract five
from all of them. And let's remember how computer system works. With the equal sign, it's going to
execute whatever's on the right hand side and then place a new value inside of that value. I can just
do it. And remember we had 38 for the first age. Now we have 33 for the first age. And because I
didn't use the semicolon, it's actually going to print those all to the screen for me as in data
array just for that column. All right. Lastly, in this little section, I want to change all the
column names. And this is how I'm going to do it. Rename exclamation mark. This exclamation mark,
that just means do it in place, not just for the sake of the execution of the cell, make it permanent.
It takes three arguments, the data frame name, the old category number and value and a new category.
So cat1, I want to be infection. I've got to use those little colons there. Cat2, I want gender,
var1 age, var2 HbA1c, var3 CRP. And if I execute all of this, I'm not going to use a semicolon at the
end. I want it to print to the screen so you can see. Patient ID, infection, gender, age, HbA1c,
CRP. Now instead of cat1, cat2, var1, 2 and 3. And minor infection, major infection for the
A, Bs and Cs. And females and males specifically, as we've indicated. And five subtracted from
everything. Now you don't have to do this. You don't have to change the names. Specifically,
if you want to keep the secrecy, the anonymity in this analysis, you don't have to do this.
I'm doing it here for illustrative purposes so that when we do the GATFY graphs,
things are just done automatically. I don't have to put them in by hand.
Now, one thing that is permanent that you would have to do is just to change all the
values back to what they were supposed to. We cannot do the data analysis on the false
ages that is not representative then of the sample that we are dealing with indeed. But
that's beautiful. All the hard work is now into a data frame that we can use. And in the
next section, most exciting, we're going to do some descriptive statistics where we start
getting a feeling for the data that we are working with by doing some descriptive statistics. Getting
some numbers and plotting some graphs gives us, as human beings, a good feeling for all of these
numbers because certainly looking at them like this does not mean a lot.
