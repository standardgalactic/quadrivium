So we've just looked at a system of equations and how to set them up as two separate equations so
that we can do numerical calculation on them. Now here's an example again using Python and we're
going to use fourth order Rangakata for our example here. Now let's start with the example
here. I have x prime of t equals 2x plus 4y and I've just put the 0t there. That won't
necessarily be in the problem set that you have to do. This is what you'll see and you
have y prime equals negative x plus 6y and you have these initial values. x of 0 equals
1 and y of 0 equals 5. We're going to do a step size of 0.05 and I've put t equals 0 here
because x is a function of t and y is a function of t. And of course for our initial value here
we were shown that t equals 0. So what we're going to do is we're going to set x prime as
our function in t, x and y. And our function y prime is our g of t, x and y. And that's
why I had the plus 0 t plus 0 t there. Just to show you that t is in that function but
in this example there's no t's. So we've got to move along. We've got to move along and
you can look at the code down here. We've quite a few things to do and we've got to remember
that t moves on. We're going to have x versus t and y versus t when we have an example like
this. Two graphs, two sets of solutions. As t moves on x is going to change and y is going
to change, both separate functions of t. But it is a system of equations in that they both
have to have, both have x and y in them. So they are related. And this is how we're going
to do that. We're going to say that x sub n plus 1 equals x sub n plus h over 6. We know
this now and we're going to have this weighted average of m1, twice m2, 3 times m3, 4 times
m4. I probably should not have put these in these brackets. That's actually just to show
you that there's m1. Every time you iterate these are not going to change. They are each
going to have a way to calculate them. And we see it down here from m1 to k1. So I won't
take them all away but we should probably not put them. It's not a, well I suppose it is
sub. But let's just do this now. Just to make the code easier to understand perhaps as we get
further along in this example. So I should actually change all of this then to m1, k1.
So let's leave them as m sub 1. You know by now how this works. And you're going to have
m sub 1, you're going to have m sub 2, m sub 3, m sub 4. But what I've done here already
I've alternated with k1. Because what you have to do, you have to know the 1 before you can
move on. You have to know k1 before you can move on to m2. You can't jump from calculating
m1 straight into calculating m2 because m2 contains k1. You have to know k1 before you
get to m2. So do k1 first. In the order that will be do m sub 1, then k sub 1, then m sub
2, then k sub 2. And how it's going to work is now m sub 1 is going to be the f of t, x
and y. And k is going to be the g of t, x and y. And we've got the two functions x prime
and y prime. One being f and one being g. Now we're just going to move along. m2, m sub
2 is now going to be the function of f. So all the m's are functions of f, of f. And all
the k's are the function g. That's y prime. But in order to do that, you have to plug into
your f equation this for t. So you'll have to make a new variable equating that variable
to this. A new variable for x. And x is the old x. h over 2 m sub 1. And a new variable
for y containing k sub 1. And that's why we had to do k sub 1 first. Now that we have m2,
we're going to move to k2. Because we need k2 to do m3. And now we're just going to use
the g function, the y prime function. And this is what we're going to plug in for t. Fortunately
t is always 0 here. This is what we're going to plug in for x. And this is what we're going
to plug in for y. And we're going to carry on. It's always very nicely written in textbooks.
I'm just going to go on to do all of those. I've written them in sequence. m1, k1, m2,
k2, k2. Because that's the way that you should think about it when you're doing code. So there's
our example. We've gone through it. Now, right at the beginning, or I should say I didn't do
this. I do have a video series on Python, which is in development. For us to draw a little graph
of all of these equations, we're going to import this add-on to the Python language called
matplotlib. And if you want to import an extension to the Python language, this is how you should
do it. We say import the library. And then there's this sub part of the library called
matplot. As plt. So every time I now use this variable plt, I can use some of the functionality
in this matplotlib.pyplot.sup extension. This is my initial values. x equals one dot. Remember,
I don't want integers. I want floating point values. y equals five dot. t equals zero. And my
step size is going to be 0.05. Next line of code, I'm going to print t, the value t as
a string. Now this backslash t is actually just the code word to tell Python I want to
tab. And I'm putting in these tabs because I just want things to look a bit better. So
I'm going to print t, two tabs, an x, two tabs, a y. And this backslash n is a carriage
return. So we're going to go to a next line. Then we're going to print the value of t, which
at the moment is 0, two tabs, and we're going to print the value of x, two tabs, we're going
to print the value of y. So for just the numerical values, I just put the variable out there clean.
And if I want to put a string t, just actually write the letter t, I've got to put them on
quotation marks. And if I want to use these special characters like tabs and carriage returns,
that means doing a new line, I've also, it's always strings and I've got to put them in
quotation marks. So our old friend is back, we're going to do a y loop. Now we're looping
on t, not on x, remember. So the first thing I wanted was m sub 1, and I'm just going to
call that m1 because every time I iterate through this, it's going to remain m sub 1, m sub 2,
m sub 3, m sub 4, it doesn't grow. And remember m sub 1 is just, it's just the f of t, x and
y. So there's my, it's twice x plus 4y, that was the x value that we have now at the moment,
that's where we stand, that's x sub n, y sub n, there's no t in this. I'm going to do k sub
1, remember that's the g function, so that's negative x plus 6y. And every time I have a
numerical value, I put the dot because I want the floating point. I think in the previous
videos when I did h divided by 2, I might have even forgotten those. So the answers might
be slightly out from what you might get. Now in order for me to do m2, remember for me
to do m2, where is m2? There. I need these values for t. Now we really don't need the t
value because there's no t in our equation, but certainly I need 4x and I need y, so I need
to calculate those first and then plug them into f. So what I've done here, I've called
them f t2, f x2, f y2, so that when I plug it into m2, I have 2 times, remember it's 2 times
x plus 4 times y, so it's not 2 times x, but 2 times f x2 and 4 times f y2.
And for me to do k2, I need to know new functions, new values of t, x and y, and that is the g function
that I've got to use. So I've named them gt2, gx2, gy2, you can name them whatever you want.
This is my little convention that I thumbs up. But according to the equations above, t grows
by t plus h divided by 2, x goes by h divided by 2 times m1, and y goes by h divided by 2
times k1. And it's those values that I plug into. k2 is, remember, the g of tx and y, which
says negative x plus 6y. But it's not x and it's not y, it's these new values that I've
just calculated. And that's how I run through this whole thing until I get to k4. Just the
same as what we had done before. I've got to go t, t goes by step size, x goes by this
weighted average of m's, and y goes by this weighted average of k's. As simple as that.
Then I want to print the value of t, my new value of t, which at the moment is now the
t sub n plus 1. It is the x sub n plus 1 and it's the y sub n plus 1 because I have grown
them by these values. That was t sub n plus 1, but I can't put that in code because that
will change the name of the variable. Remember, this is not pure algebra. It's computer code.
So this is t sub n plus 1 equals t sub n plus h. This is x sub n plus 1 equals x sub h plus
that and y sub n plus 1 equals y sub n plus that. So these are my new values. But when
I iterate back through, that becomes x sub 1 and y sub, x sub n and y sub n and I'm going
to do new, the new next set of values. Now this here is just some other code I wrote for
vpython. We can skip that. So now we're going to learn how to plot. So remember I had created
this variable plt, which incorporates everything in the mathplotlib extension with containing
the pyplot sub extension, if I can use those terms. So I'm going to say plt, which refers
now to the whole mathplotlib. Python code here, the ID, this IDLE is going to look into that
extension and it's going to find what to do with this thing, plot. So it's plt.plot and
I want to plot t versus x and I'm also going to plot t versus y. It's the same t, same t,
so we're going to have the same x-axis. The x-axis comes first and this is actually the y-axis.
So our y-axis is going to have values of x and of y and it's just going to have two separate
graphs here. And this is this code you have to learn. This is little red squares and this
is blue squares. This code how to do little triangles. I think we can even do, I think green
triangle might be something like this. I'm not 100% sure. Let's see. Green triangle, that's
what that says. And so it's going to plot those points, plot those points and right at the
end, I'm saying plot.show and then these two parentheses, that's actually going to bring
it up on screen. So this just saves it in memory and then you actually want to print
that. So let's say command s on the Mac or control s on the PC to save it and then f5 to
run. And there we go. So and there's the plot as well. Let's just look at this first. I have
values of t. These are my tabs I put in and you can see this. Value for x was a bit short
so that tab there didn't work properly. Later I will learn how to do this all properly. But
there's all my values. As t grows by 0.05 every time, there's my x value, my y value. So
that's t and x and t and y. You know, if I were to plot this, if I were to plot this, there's
a beautiful plot. And we have t, the value that you put first is on the bottom. And then
the next, the other value. So it's t and x and y and x. And one was green triangles and
the red squares, as I said, and there draws beautifully the two graphs, x versus t and y versus
t. Or I should say t versus x and t versus y. And that's beautiful. So I have x and y both
here on the y axis and I have t here on the x axis. So to stop this, I'm just going to
hit the close button there. And both in Mac and Windows, if you click here by these arrows
in the shell and you hit both on Mac and on Windows, you have to hit Ctrl D. That stops
the shell and now you're back into edit mode in your file here. So I hope that helped a bit.
You just have to really sit and think about how you would do this on paper. What are the
steps that you follow? And you convert those steps into code. It's not that difficult.
Actually, I mean, you could write much better code than this. This is actually a bit overdone,
I should say. And you could write little functions to do many of these things. And we'll learn about
them perhaps in my Python playlist, my Python series of lectures. Good.
