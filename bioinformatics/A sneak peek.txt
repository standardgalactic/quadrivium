So here we are in the IPython Notebook. It just runs right inside your browser. It's fantastic. It just doesn't get any better than this.
We're going to write lines of code and it's going to do the statistical analysis for us.
Now the beauty of Python is that so many people work on it. They see a problem, they write a new module or a library and you can just import it and it extends that Python language for you to use new types of code.
And here we have pandas as the main library that we're going to use here or module or whatever you want to call it.
We have import pandas as pd and we're importing all sorts of other things. The beauty of IPython Notebook, I write a few lines of code and I hit shift enter or shift return or I can just hit run sell.
See a little star there that changed to one while the stars there it is just executing that code and it's all there.
Don't worry about this code. I'm only going to show you what is possible or actually just a small bit of what is possible.
You can do so much more with pandas and Python.
So I've got this comma separated values file. It is a file of data written in Microsoft Excel.
It was saved as a CSV file as opposed to an Excel file. Doesn't matter. It lives on my hard disk.
I'm going to import that into Python with that line of code there.
Now I just want to make sure that it is there so I can write the first five entries there.
But it also shows me all the data points that I've collected.
Now this is mock data on appendicitis patients.
So it's just some random values there. They don't, it's not attached to any real patient.
But you can see there, there's my data set that was imported and you can see an index here at the left hand side done automatically for me.
Always as with Python, it starts with a zero. I don't want the zero. I want this patient file number to be my index.
I can do that with a line of code and do the first three rows there.
And you can see now file, the patient file becomes my index. Just easier for me to do.
Now here's a column of the age patients. We could say, well, can we just look at that column? Can we get some answers from that?
Lo and behold, there's a describe function. If I were to play that or execute that, it shows me there were 150 entries in that column.
The mean was 20.9. In other words, there was 150 patients. The mean age was 20.9 years. We see the standard deviation there, the minimum and the maximum, and our percentiles there.
Beautiful. Can I graph this? Not a problem. There's our line of code and I execute that.
This is called a distribution plot. So it gives me percentage wise with 100% being 1.0, a histogram and a kernel density estimate plot all in one.
That's fantastic. Now I've decided between the minimum and maximum to have 10 bins. You can have as many bins as you want.
Can you tell me in the gender column how many males and females there were? Well, there's the lines of code for that. Let's execute that.
It looks down the gender column. It sees what type of entries were there. Well, there were only two. It said male and female. So no spelling mistakes were made.
So there were only those two and there were 94 of the male type and 56 of the female type. Beautiful.
Now there's a command in pandas called group by, which is the best one to use here. I've done something else. I've created new data frames and new series. Don't worry about that.
I'm splitting it in two. I'm making two different data sets. One with just males and one with just females. And I'm looking at the age column of each describing that.
There we go. It says in the male, there were 94 with a mean age of 20. And in females, I can quickly see of the 56 females, their mean age was 22.
Can I draw some box plots of this? Because I'd like to do that when I submit this for publication. Beautiful box plots.
Is there something better than box plots? You bet. Violin plots. They are much better because not only do they give you the same data as a box plot, but they also give you the kernel density estimate.
So you can see how your data was, the spread in your data there, which you can't really get that easily from a box plot. So violin plots are fantastic.
Now, can we do some inferential statistics? Let's just look at the RVD column, retroviral disease column.
Apparently there were entries for no and yes. 96 no, 54 yes. Again, I'm just going to split my data frame into two different ones. Let's look at the age distribution now for the positive patients.
We see there were 54 of them and their mean age was 25 with a standard deviation you see. And for the negative patients, we see 96 of them with a mean age of 18.
So, is there a statistical difference between these two? Well, I'm going to use a normal t-test for this. I'm seeing my age distribution here as continuous data.
Let's import that function and I can execute it. Let's have a quick look. It says the p-value for difference in age between RVD positive and negative patients.
And I can calculate the p-value very significant if I were to choose 0.05 as my cutoff for significance. So there was a statistically significant difference in the age group between the positive and negative patients.
Now, let's plot that. Let's see. Again, a violin plot makes life. Very easy. We can see the distribution in age here. We have the positive and negative and we can see the medians marked there.
We can clearly see there's a difference between positive and negative patients and that's why our p-value was so significant.
Let's just look at the positive patients when it comes to rupture. And the negative patients when it comes to rupture. Now we have categorical data here. Can we do a chi-squared analysis?
Because we see in the rupture patients, 30 on histology had no rupture and 24 had. 61 didn't and 35 had in the negative group.
So let's import some functions that can do chi-squared analysis for us. There we go. We've created this 2 by 2 contingency table.
30 and 24, 61 and 35. And we can do the p-value on that, 0.431.
So chi-squared distributions there. We used a contingency table, I should say. I can do some chi-square analysis and get the p-value for that.
And we see there wasn't a statistically significant difference in rupture rates between the RVD positive and negative patients.
What about confidence intervals? Well, let's look at the delay. In the delay column, we see again, there were 150 entries and the mean time between onset of symptoms and coming to hospital was 4.2 days and the standard deviation there.
Can I just describe the 95% confidence intervals around that mean?
Well, there are two ways that I show you here how to do it. One is using the scikit.bootstrap function there.
Let's just import that. So, and let's print that. And it says, yes, remember it was 4.22. The 95% confidence intervals was from 3.8 to 4.6 days.
There's a better way to do it though than with that bootstrap data. And that's to use this Bayes MBS function. And if I were to import that, let's have a look at that.
It gives me a lot more data. And first of all, I can choose my percentage confidence interval. I can choose 80%, 90%, 95% by just typing in a value there.
And it actually gives me the confidence interval, upper and lower values for the mean, the variance and the standard deviation.
So it gives me all of those confidence intervals, but you'll see it's almost the same as the bootstrap values there as far as the lower and upper values.
So that's a very quick look, just scraping but the surface of what Pandas and Python can do. And it is just phenomenal.
I hope I've enticed you to make some effort to learn statistics using Python.
