in this section we're going to look at comprehensions now comprehension is not
from the word comprehend to understand something it actually just means generating stuff and
collecting them somehow so look at what we've done here you see these square brackets in a future
lecture we're going to look at what these brackets really mean but i'm running this very compact
form of the for loop it says n for n in one to five so if i just had the for n in one to five it was
going to loop through now there's going to be an n statement but it's going to loop through n is one
n is two equals three equals four and it's five but i've got this notation of n for n in in this
inside of this and if i execute this i'm going to have this variable called a and it's going to be
an array an array is just a list of values really and that is why this is called list comprehension
comprehension i've generated five numbers and i've placed it inside of this n value which i've
attached to this computer variable called a let's make a little bit more sense of it i'm not going
to call it a now i'm not going to store it anywhere i'm just going to have this list comprehension so
it's inside of these square brackets once again and i'm going to say i cubed for i in negative three
to three so it's going to take negative three is going to be my first negative three cubed is negative
27 then negative eight negative one etc let's just see that that is executed and again it's a seven
element array as it goes from negative three to three there's seven values that cubes every one and
i've generated i've generated and i've collected some items so that is called comprehension just to
show you if i say what is the type of this thing that i've just gotten back and it is indeed an array
an array we'll look at it in a future lecture it's just this list of values and there was my list
now just to show you what the curly braces does i'm doing the same thing i cubed for i in and i'm just
making it a bit shorter from negative two to two let's see what the type of that is because
everything inside there with these square brackets was an integer what these curly braces are doing is
just making all of the values from negative 27 to negative 28 it is attaching them to the type any
so that's the difference now i can combine things i can run a row within a row so i've just called
these rows and columns so two things remember i said n for n in now i'm saying row comma column for row in
comma column in let's see let's see what's going to happen here so it goes down the columns let me warn
you like of that first so it's going to say for row in one two three so there's my one then it jumps to
the second one the column for which it will be one now row two but we still with column one row three
we still with column one then it goes to the two for the row so back to the row one i should say and
then only does it go over to column two so we're going to have one two two two three two and then
in a row first we're going to have one three two three three three so you can clearly see the order
of execution of placing more than one variable in this list comprehension let's have a deeper look
at that so you can see what comes after the other here i'm using the rand keyword it's going to
generate take a random value and i've asked it to choose from value zero to nine and i want to place
it in a three by three grid three rows that's the first three three columns that's the second and i'm
attaching them to this computer variable called m there we go every time you run this it's going to
give you different values because it'll be chosen at random so i have eight nine zero one seven six two
eight zero now just to show you in what order this was done that it is down the columns remember
things have an index that is the number where it's placed and an index is a place if we run a race
someone comes first someone comes second someone comes third that is our index where you are placed
and i can use this enumerate keyword so i'm going to have this list comprehension i for i in enumerate
m now what enumerate does is the following i'm just going to run that line of code so you can see what
it does so it goes through the values enumerate is going to return for me the index and the actual
values you see the eight there there's the eight it was placed in position number one the nine is
below and that came in position number two so i for i so it's a list comprehension i'm going to
generate this bunch of things and i'm going to gather them together in an array that's list
comprehension but the enumerate gives me the index and then the value just to show you that we're
going down eight nine zero one seven six being values number one two three four five six seven eight
nine let's let's hit it home let's have a look at this now i'm going to delete that because we
needn't have that there i'm going to have this computer variable called a random value selected
from one to five either one two three four five and i want to make a list of twenty of those
so i'm creating this computer variable called a and i'm putting in a twenty random values each
being between one and five one and five inclusive i'm going to print to the screen this a now the
way that a is generated is again as an array don't worry about an array we're going to have a look at
this and it's just going to print this whole list of twenty numbers for me now i'm going to have this
create this computer variable called look for first i can call it whatever i like look for first and
i'm attaching to that the integer value for because i'm going to run this very special for loop with an if
statement in the inside of it but because enumerate here remember first i had a range operator i said
for i in one to five enumerate returns two things for me an index and then the value i better have
two computer variables because it does return enumerate returns two values so the first value is
the index i've called that computer variable ix and the first one is the second one is the actual
value the occurrence i'm going to just call that curr i could call it whatever now i'm going to have
this if statement if current curr at least equals equals look for first and look for first is for
so it's going to iterate through all these values are inside of a which is generated there it's going
to say is this for is it a for if not you know that if statement is not going to be executed because
of this break statement so i'm showing you a lot of things inside of this little code cell
we'll run through it let's run it perhaps it would make better sense so there's my a and i'm printing
it to the screen and there there's 20 values between one and five one and five including
now what i want to do is i want to run through it one by one and i do it through the enumerate because
the enumerate gives me two things back an index and i create a variable for that and the actual value i
create a value for that i'm looking at the actual value and i'm asking is it four if it is it's going
to print this line remember if it's false it just ends the index of the first occurrence of the
search value that's the string is going to print out for me if this is two and this is we look at
strings in the future but if i put this little dollar sign in front of it it's actually not going
to print that text but it's actually going to print the value inside of that variable so it's
a very nice way of putting values inside of strings is i x then break so look at this four was an index
number two and that's exactly what it prints out the index of the first occurrence of the search value
four is index number two that is what i printed out there using those values but then i use this break
because once it's found that i don't want it to go on in my if statement i want this whole thing just
to stop executing because i only want that first occurrence of four good let's carry on there's
another way to do this iteration and that is to do remember we had before when we created this let's go up
here when it went through rows first and then to the columns rows again to the second column
i can do it all in one go with using this zip command zip keyword for i in zip one to ten
101 to 110 501 to 510 print i so it's what it does that it doesn't go through one at a time it goes
through all of them at once so we'll have one 101 501 2 102 502 and prints them as such so that's what zip does
now what happens if they're not of equal length so i've made the first one a little bit shorter
so there's only one to four there's five elements there and there's five elements there
what julia will do is we'll just take the shortest one even if the shortest one is in the second
set or even if it's in the last set it's just going to take the shortest ones
so a lot for you to look at you can re-watch this section of list comprehension a bit difficult to
get used to but quite powerful
you
