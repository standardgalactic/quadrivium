And in this lecture, something very exciting, let's have a look at differential equations.
We're going to start with simple, ordinary differential equations with constant coefficients,
and perhaps later we'll look at something more complex.
So let's just defining, we've got to learn how to define a variable as a function.
Now before we used variables and we defined them as symbols, but you can also define them
as functions, and you're really going to need to do that if you want to solve differential
equations.
Again, I'm using the abbreviation SYM there for StumpPy, so I've got to refer to it SYM.init
underscore printing open and close, so I'm going to use pretty printing.
I'm going to have this variable T mapped to this symbol T as we did before, but now there's
a new thing, I'm going to have the variable Y mapped to this function Y.
Equation with a capital F, and this is how we use it.
I'm going to print to the string the second order ordinary differential equation, and this
is how we construct it.
I'm going to use an equation, so SYM.Equation, we did that before.
So we're going to have open and close parenthesis for this, open, and there's my closing parenthesis.
I'm going to take two arguments separated by a comma, and what is before this comma is the
left hand side of my equation.
What is to the right of the comma or after the comma is the right hand side of my equation.
On the left hand side, I'm going to have Y. It's open and close parenthesis T. So it's
a function Y. It's my dependent variable of this independent variable T. But it's not
Y of T. I want the second derivative of it. So imagine it's Y prime prime of T. So I'm
going to put .diff. Remember how to do just derivatives. So .diff. Now this is just for
printing. Nothing gets, I'm not solving it here. I just want to print it. So you use .diff,
and then how many times you want that derivative twice. So this would be how to write Y prime prime
of T. And I can use this Y open and close T because I've defined Y not as a symbol, but
as a function. So it expects these open and close parenthesis with the dependent variables
listed there. So this is a single dependent variable Y of T. It's the second derivative
of it minus the Y of T. And that's going to equal E to the power of T, which I have got
to invoke. SYM.EXP of T. Let's execute that code. Now it's going to do it in a way that you're
not used to writing it, but the order doesn't matter. This is the way that the order is going
to be done. So it's Y prime prime of T minus the Y of T equals E to the power T. So very simple
to do. So you've got to declare them as functions. So that means they can take dependent variables.
And then you just have to say .diff and how many times you want that derivative to respect
to what. So this is D squared, DT squared of the Y of T. So Y prime prime twice of T.
It's with respect to T. So that's why the T comes in there. And I want it twice minus the
Y of T, which is the C, comma. And then on the right hand side, I have E to the power
of T. To solve this is just as easy. So it's SYM.DSOLVE. Now we had solved before when we
did algebra. This is differential equation. So we're going to use this keyword DSOLVE.
Let's command DSOLVE. And then open and close parentheses. Here I still have this equation just
as I had there before. So DSOLVE is going to take my equation, my differential equation,
just as I had there before. Now it gets a bit confusing and that's why I'm going to do the
next example. So the DSOLVE takes two arguments in this instance. There are more that you can
add. We'll perhaps get into that in a later video. But I'm only using two arguments for
DSOLVE here. The first is my differential equation on the left hand side and the right side is
I want it to be solved for this, for Y of T. Let me just execute that and show you.
And I mean, be honest, that is fantastic. So I have Y of T equals, there's my first constant,
my second constant. If you just multiply these out to this differential equation by hand,
you'll see that is indeed the answer. I just wanted to make things slightly easier to understand.
I've taken a function here and I've attached it to a variable F. That's not a function F. I haven't
declared it up here as anything. So I'm using it purely as a variable and I'm setting that to this
equation. So it's an equation with my open and close parentheses. It has a comma. So whatever comes
before the comma is the left hand side of my equation. Whatever comes on the right is the right
hand side. It's exactly the same what we had. It's the second derivative of Y plus two times,
oh no, that's a bit different. I had minus Y of T plus twice the first derivative plus Y of T.
And just, if I just put F there now, I'm just going to print to the screen this variable F and this
variable F is just attached to this. I'm just doing this for clarity's sake. So look at this. I have Y
prime prime prime of T plus two Y prime of T plus Y of T equals E to the power T. And now I just wanted
to show you so that I don't have to rewrite that whole equation. I'm just referring to that whole
differential equation by its variable name. And there's the variable I attached it to. So it's
SYM dot D solve. And I'm just using two arguments here. As I say, there are more arguments to use,
but here, very simply, I'm going to have F and I'm going to, I want solutions for the Y of T. So if I do
that, there is my solution at the press of a button. Now let's look at something that you can do in your
head just to show you this really does work. Again, I'm just going to use this variable G. Don't get
confused. This is not a function. It's not the G of T or the G of Y or the G of X, anything. I'm just
using it as a normal variable just so that I can have cleaner code. So G equals an equation. And it
is Y of T. Y, remember, is still a function. So it takes an independent variable. So Y of T,
the first derivative of that. So that's Y. This says Y prime of T, comma, on the right hand side of my
equation, because I'm making this an equation, I just have T over the Y of T. So I can't just write
here T over Y. Remember, Y was declared as a function. It must have that T in it. And I'm
just printing my variable G to the screen. So there we have it. Y prime of T equals T over Y. Now you can
do this one in your head. You can bring Y T over to this side and the D T over to that side. And the
D T over to that side. So you're going to have Y of T, D Y, or D Y actually. And on this side,
you're going to have T D T. So you're going to have Y D Y on this side and T D T on this side.
If you just solve that, and here we go, I'm going to say S Y M dot D solve G Y of T, you know,
you're going to end up with plus minus the square root of T squared plus the constant. And lo and
behold, and it's really a pretty simple equation you can do in your head. And there we have two
solutions for Y. There's the first one, there's the second one, negative the square root
of a constant plus T squared and positive the square root of a constant plus T. So you just
have to get used to how to write these equations that you want to differentially get the solutions
for. So you have to declare that Y as a function of some dependent variables. And that variable
you have to declare as a symbol. You don't want it to be a normal variable. And whatever's
on the left and right hand side of your differential equation and to make it prime, prime, prime, prime,
prime, prime, prime, it just depends how many times you put your, with respect to what, as after the dot
diff. So it's very easy to do once, the first time you see it, it's very confusing what is going on here.
But just tease it out. It's very easy to construct these differential equations and just as easy to get
the analytical solutions for that. If you watch my second series on ordinary differential equations,
we do numerical calculations. You see you can use Python to write beautiful little pieces of code
that will just do numerical analysis for you for differential equations that you can't do analytically.
But yeah, these can be solved analytically, these examples that I've used here. And there you have
your beautiful solutions. Really nice.
