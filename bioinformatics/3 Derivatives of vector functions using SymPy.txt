So here we are in chapter 3 we're going to look at the calculus of vector functions and as far
as calculus is concerned more specifically we're going to look at the derivative. So let's have a
look. First of all we have to import the required Python libraries, modules, or packages. So in the
first line there from Simpy we're going to just import these functions. I just want to use sine
cosine. I've put tangent and exponent there. I don't think I'm going to use them in this chapter
though. Square root init printing for our latex or pretty printing so we can see nice mathematical
symbols on the screen and also symbols. Remember that's the function to turn a variable into a
mathematical variable as we know it. Then from the Simpy physics vector package there we're going to
import everything a bit lazily but we're not we're not going to do much so that's fine and then from
ipython core display I import image. Now that will help me to display any kind of jpeg or png etc images
that I might have that I want to display to the screen. I'm also going to import filter warnings
from the warnings library there and you know this one by now underscore underscore future underscore
underscore import printing function and so that if anyone wants to run this notebook and they're using
using versions 2.x that means 2.6, 2.5, 2.7 whatever of python that the way that python 3.x uses printing
will still work. We're going to import matplotlib.pyplot as this abbreviation plt so any function I want to
use I can just use this abbreviation in front of the function so that I don't have to type out this
whole long word every time and for ipython notebook this magic symbol there the percentage sign
the matplotlib inline it means if I plot anything it won't plot as a new window that pops up but it'll
actually show the plot right on the screen so let's run that nothing will happen everything is imported
into memory and now I'm just going to run these two inner printing open close parenthesis and filter
warnings I'm going to set to ignore just so that I don't get all these ugly pink warnings so let's start
off we know now the position vector it's a continuously changing vector in n space remember
we move away from points to actually this straight line that goes from the origin towards a certain
point and that's our vector and that vector has a magnitude and it has a direction remember also that
every vector requires a reference frame so let's call up reference frame that reference frame is a function
that comes from this simpy.physics.vector library and because I've imported all the functions from
there I can just use the function and I'm going to call it c just for cartesian but you can call it
whatever you like there we go let's run that line of code now let's define a three-dimensional position
vector and remember how we did that that's just parameterized to some extra parameter in this instance
let's make it t for time so that means we've got to tell python or simpy that hey look we don't want
t now to be used just as a normal computer memory variable we want it to be used as a mathematical
variable so we set t equal to symbols open and close parentheses open and close quotation marks t
then I'm going to make this new computer variable space and memory a bucket in memory into which I can put
stuff and I'm going to call that r underscore t it's just my convention you can call it whatever you
like that's not part of the mathematics it's just to store this vector in in in python so it's negative
cosine two times t negative cosine two t in the x direction of my my reference frame that I'm using
there and sine of two t in the y direction and then if I just may make a new line with rt it's actually
going to print that to screen in a beautiful way because we've initialized pretty printing so if I
were to run that there we go negative cosine of two t in the x direction that's our coordinate system
our reference frame c that's c hat subscript y that means in the direction of the x axis
that unit vector there has a length of one and then in the direction as shown there and sine two t
in that direction so let's make a quick plot just of this just to so that we can see what happens
to these points to the position vector as time goes by now can't use t because I've already told
python that I want that to be a mathematical symbol so let's introduce a new variable
and a variable can have any name it needn't just be a computer name variable there I used
r underscore t I'm using time I'm setting it to zero I'm creating this loop say while time is less
than eight well at the moment it's zero so that's going to pass the colon indicates to python that
it will do this white space so that becomes a little loop and I'm going to use matplotlib.pyplot
I'm going to use its plot function and I don't have to write up write up matplotlib.pyplot because I
used that remember I used this abbreviation plt so plt dot plot and it's going to plot this two
times time well at the moment time is zero so two times zero zero the negative the cosine of zero is
just one so on the x-axis we're going to have one on the y-axis two times zero zero sine of zero zero
and then the last argument so there's three arguments an x argument a y argument and then what you want the
markers to look like in this instance it's red circles r o for red little o for four circles there
and then remember my shorthand time plus equals 0.1 now remember if you want to write notes in code in
python you put this hashtag sign there um suppose you shouldn't call it hashtag anyway um if you put that
and now you just write time equals time plus one remember that was just shorthand so in anything
after this pound sign this hashtag sign will not be executed that's just little notes you can leave
for yourself or someone else who wants to read your code so this is this shorthand this plus equals 0.1
now let's let's correct that it's 0.1 so it's going to go from zero to 0.1 it's going to loop back it's
going to say what is time well at the moment in that bucket in memory i've got 0.1 it is less than
eight so let's run through the code again and then in the end plot dot show it's going to plot all these
points but now i actually need to put it to the screen with my semicolon there as we've discussed
before and there we go so there's zero on the x-axis there and there's zero on the y-axis there so you can
imagine the first vector was from there all the way out to that point there so that was there and
every time t increases this position vector as you can imagine this little arrow is going to point
successively in this direction and it's going to go anti-clockwise around and around now it's supposed
to be a circle with a radius two um but this is skewed a bit so it looks like an ellipse but you can see
this is zero to one and they're zero to one so that's actually perfect circle so that is what we
mean by parametrizing but this is now just a vector in two space so for every t i put in i'm going to get
two values out one x and one y value so my function my vector value position function r of t is going to
give me two is going to give me two values so mapping from one space to two space basically
so let's take the velocity vector so the velocity vector is always tangent to the curve at the position
of a vector remember from studies you might have had before at a tangent anywhere along this line you're
going to get the velocity vector tangent to the path at that point so this is easy it's a circle
but this is how you do it i'm going to use v of t for velocity v underscore t just because i used r
underscore t there so i'm going to use v underscore t here that's my computer variable and i'm going to
say r t now remember this was r t here negative cosine 2t in the x direction and sine 2t in the y
direction and i'm just going to call this function dot diff d-i-f-f that means differentiate
differentiate takes two arguments you can read in my notes here first is the variable with respect
to which you want to take so that will be say dr dt that is exactly what it means we're going to take
the derivative of this vector based function with respect to t and then comma you also have to tell
it in what reference frame you want to take that derivative simpi is powerful powerful powerful
library you can do all sorts of things so you have to tell it in this instance just stick to the
reference frame i gave you and let's do that now just think about what is the derivative how do you
how would you do this derivative well you just do it separately just do the derivative of x of t and
the derivative of y of t so what's the derivative of negative the cosine you'll have to use your
knowledge of of derivatives here so negative cosine that will be sine and then of 2t will be 2 so it's
2 sine of 2t and this is going to be 2 cosine of 2t for that derivative let's see if we write so i'm
taking the derivative there and just say vt just print it to the screen and lo and behold there we have
a 2 times the sine of 2t plus 2 times the cosine of 2t i hope i that's what i said sorry about that
but there you go so easy to do a vector derivative you state the vector dot take its derivative with
respect to what variable and in what reference frame now note that for a special case the special
case a circle your position vector and your velocity vector are always going to be
at right angle to each other so if the position vector was there this velocity vector was going to
point straight up so that's going to be over the position vector was there the velocity vector would
be there so there's always going to be they're always going to be orthogonal or they're going to form
a right angle so that's the special case of a circle and now we can check that by taking the dot product
of these two vectors which will result in a zero remember how to do a dot product we'll have to look at that
it's very easy to do in simpi you just say dot and that was something that was imported from
simpi when i did the import of the libraries above and you put the two vectors that you want to get the
dot product of and you separate it by a comma so r of t and v of t and indeed if we run that the dot
product of that is zero so we know that now we know that those two are so so much so that we can state
the theorem now if a position and a velocity vectors are orthogonal in other words the dot product is
zero then the magnitude of the position vector is constant a circle in two space or a sphere in three
space look at this now remember this was drawn skew so if you imagine this to be a perfect circle the
magnitude the radius is never going to change it's always going to be two two two two and if that is
only going to happen if these two are perpendicular to each other if they're orthogonal and we check
that by doing the dot product so do you remember how to do a dot product let's just do that quickly
let's introduce new mathematical symbols x sub one x sub two y sub one y sub two we're going to call
them symbols x one x two y one y two and let's create these two vectors i'm going to call my
first vector p1 my second vector i'm going to call p2 and it's going to be x sub one in the x direction
y sub one in the y direction x sub two and y sub two let's print that to the screen there we go print
vector p1 and print vector p2 let's do that there we go vector p1 beautiful there beautiful mathematics
beautiful printing to the screen i should say and remember how to do the dot product
well it's very simple say dot p1 and p2 simple i will tell you how that's done it's the x component
times the x component plus the y component times the y component now think about it here
if the first one position vector was in this direction the velocity vector would be in that
direction so the x would be a value but there's no x if a vector point straight up there's no change
in the x there so that would be zero so it will be something times zero and the same would go for
uh for the y's there'll be no y in this direction that's zero there'll be y there but at zero times
something as far as the magnitude is concerned so it'll give you zero remember the other way just
quickly to do so this image file name equals and inverted uh in in print and in quotation marks dot
underscore product of png so that is a picture file that is in the same folder as this notebook so i can
just reference it there and this is actually just a image that i'm printing to the screen so the dot product
of two vectors piece piece one and p2 is the norm and we i'll show you how to do norms very easily in
in an upcoming lecture so it's the norm of or the length then of one vector times the length of the
other times the cosine of the angle between them so there's one way there's your first way to do dot
product there's your second way to do a dot product let's do the acceleration acceleration is very
easy we're just going to take we're going to call it a underscore t that's taking the derivative of
the position vector so again i can just state the position vector dot diff with respect to comma and
in what reference frame and let's print that to the screen and very beautifully there's four times the
cosine of two t minus four times the sine of two t and that'll be the acceleration vector so very easy to
do differentiation of vector-valued functions in simpi fantastic
