In this section we're going to look at some plotting, just as a bit of fun.
Now, gadfly is a plotting library, actually a package.
Now that's the way Julia works.
You can use Julia to add to the language, writing some program,
which extends the functionality.
It's not part of the base.
Julia itself, you have to import it.
And we do that using this command, using, using gadfly.
I just want to go back to our start page here.
If I go to this little section there, you're going to see Julia images pre-compiled packages.
So it's already compiled inside of Julia box.
So when you import, it's going to be quite quick.
When you render your first plot, though, it might still take long.
Now, if you're running Julia off of your own computer, you've installed it.
When you import a package using command, it's going to take quite a bit of time.
But if I execute this line of code, you'll see it's going to be quite rapid.
Now, we're going to get to how to do functions.
So don't be too worried about this.
I'm just using the function f of x and the function g of x, being the sine of x and the cosine of x.
So don't worry about it.
We'll get to how to construct this and how this works.
Plot itself.
We're going to have a big look at gadfly and how to plot all sorts of interesting things.
We can just use this plot function.
Now, it does not exist in Julia.
It only exists because we imported gadfly.
We imported this package gadfly.
It takes these three arguments here.
The first one you see is inside of these square brackets.
It's very specifically so.
Don't worry about it.
We'll get to it.
And these two values here is to range on the x-axis from negative 2 pi to positive 2 pi.
So we're going to plot sine of x and cosine of x over those values.
As you can see, the little star there, that cell is executing.
And I warned you the first time that a plot is being rendered.
It's going to take a long time to be even longer on your own doing this on your own system.
So at least the importing of this package was quite quick using JuliaBox.
But you'll see now that the rendering or the compilation of all this code and doing the render,
that takes quite a bit of time.
And it's going to be a while before that plot appears.
But there it is.
It was really worth the while.
You can even zoom in a little bit.
Once you've zoomed into it, you can actually drag it around a bit, zoom out.
But beautifully there, we see the sine of x and the cosine of x from negative 2 pi to 2 pi.
And we see the graphs there, f sub 1, f sub 2, because we haven't told it what to name these.
So it's just doing that all on its own.
There's another way to construct it.
I needn't have constructed it just as two functions.
So I can just, inside of these square brackets, say, do for me the sine and the cosine of pi.
And you see the second time this now renders a graph.
It's actually quite a bit quicker.
But that is really beautiful indeed.
And look, it's right inside of your notebook.
So my notebook has nice text, formatted text.
It has code.
It has graphs in it.
These notebooks really are phenomenal.
Let's do x minus 1 cubed plus 1.
Let's just play with that.
So I'm going to create that function called h.
It's going to take an argument x.
And this is what the function does.
It takes a value x.
And it renders that for me.
I can say, now, plot h from negative 5 to positive 5.
If we rend that, we're going to get this beautiful cubed graph there.
I can also do this.
I don't need to put in a function there.
I can say, make this a function of x.
But look, just be mindful for now.
At the notation, it's this minus greater than sine.
So it's just like a little arrow of 1 over x from negative 4 to positive 4.
The reason why I showed you this is not because of the construction of this.
Just to show this ugly little line up and down the middle.
This is a hyperbole that should be on either side here.
But it does draw that.
So it's a little bit of an issue there.
Most computer algebra systems, plotting systems, are going to do that.
So what we can do is, let's just constrict ourselves.
Constrain ourselves, I should say, from 0 to positive sides.
We're only going to plot the positive x's there.
And if we do that, we see that that line disappears.
And we can see it's a hyperbola.
Okay.
We can just look at the error function, for instance.
So I could have called this a function itself.
Call the function then.
But I can just say x with this little arrow sign.
The error function from negative 3 to positive 3.
And we'll see this almost distribution function, the error function here, beautifully plotted.
So that's just to whet the appetite a bit.
The beautiful graphs that you can do in Julia rendered right here in the notebook.
So quite a bit of things we've gone through.
I think you get a good understanding now of at least the mathematical capabilities.
And we've really just touched on it.
I mean, it gets a lot more in depth than this.
But you've got a good feel for Julia, for the notebook itself, how beautiful the notebook is.
It really is phenomenal.
And how you can write your little cells, code cells, and execute them.
We can write quite complex code, multiple lines of code inside of the cell, execute them.
And it works beautifully.
And how you can write your little paper thing inundated completely so quickly.
I think you all know how to design a good project there, but you all know.
I've got a great idea ofeee that has a good idea of grant
