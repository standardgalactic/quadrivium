Lecture 3 introduces the Python `math` module, which enhances its ability to perform various mathematical calculations. Here are the key points:

1. **Importing the Math Module**: Use `import math` to access advanced mathematical functions and constants.

2. **Accessing Constants and Functions**:
   - Access constants like Pi (`math.pi`) and Euler's number (`math.e`).
   - Utilize specific functions such as factorial (`math.factorial(x)`), exponentiation (`math.exp(x)`), logarithms (`math.log(x, base)`, default is natural log), power calculations (`math.pow(base, exp)`), and square roots (`math.sqrt(x)`).

3. **Trigonometric Functions**:
   - Calculate trigonometric values like sine (`math.sin(x)`) and cosine.
   - Convert between degrees and radians using `math.radians(degrees)` and `math.degrees(radians)`.

4. **Precision and Rounding**: 
   - The module uses floating-point numbers, which can lead to slight rounding errors (e.g., sine of Pi).

5. **Additional Functions**:
   - Includes other advanced functions such as error and gamma functions.

Overall, the lecture highlights how to extend Python's arithmetic capabilities using the `math` module, perform complex calculations, and understand precision limitations with floating-point arithmetic.

Lecture 3 introduces the Python `math` module, which expands Python’s ability to perform advanced mathematical computations. Key points include:

1. **Importing the Math Module**: Use `import math` to access additional mathematical functions.
   
2. **Accessing Constants and Functions**:
   - Utilize constants like Pi (`math.pi`) and Euler's number (`math.e`).
   - Perform operations such as factorial (`math.factorial(x)`), exponentiation (`math.exp(x)`), logarithms with optional base (`math.log(x, base)`), power calculations (`math.pow(base, exp)`), and square roots (`math.sqrt(x)`).

3. **Trigonometric Functions**:
   - Calculate trigonometric values like sine (`math.sin(x)`) and cosine.
   - Convert between degrees and radians using `math.radians(degrees)` and `math.degrees(radians)`.

4. **Precision and Rounding**: 
   - The module deals with floating-point numbers, which may lead to slight rounding errors due to precision limits (e.g., calculating sine of Pi).

5. **Additional Functions**:
   - Access more complex functions like error and gamma functions for advanced calculations.

The lecture emphasizes extending Python’s arithmetic capabilities through the `math` module, enabling complex computations while highlighting limitations in floating-point precision.

