So, multiple dispatch. What really happens when we call a function? Well, actually a whole bunch
of them are created. Not just a single function. We declare a function function, give it a name,
tell it about the arguments, but there's actually quite a few of them get created. And each one of
them has to do with the data type, the type of the argument that you pass, the type of the value
that goes into the argument. So, a whole lookup table gets created with every function, stored with
the function. And when you generate code with an argument, Julia will look at what the type is of
that argument. Now, it's only for the ordered arguments. I'm only going to do that. And it
will decide which one of the functions to use. And those are called which one of the methods of
the function to use. So, when I create this function, cbd for cubed, for instance, a, and
it returns a cubed, I can pass anything into that a. I can post an integer and a float. And
each one of those are actually a different function. So, there's a whole family of these
little functions that are there, different implementations of that function. And these
are really called methods. So, when I call this function, say for instance, with an integer,
that Julia will generate code that uses the computer's central processing unit's integer
multiplication instruction set. Or the floating point value, the floating point multiplication
instruction set, specific to that computer. And the implementation of a function based on
arguments, that is what is called multiple dispatch. And you see it prominently on the Julia's
web page on the front page there, functions with multiple dispatch. So, again, remember
it's only for the positional arguments that it's going to do that lookup of which method
to use. And when I use that function again, and I use different data type, a new method will
be called, and that process is called overloading. So, let's look at the methods that can be called
for the plus function. And again, I can just use the code methods and pass the argument plus. It'll
take a while. Look, booleans, two booleans, an abstract float in a boolean, an integer and an integer.
So, these are all different methods for that plus function. Good. So, I can make use of this
plus plus and two and that, because it's a real number and a complex number, and that is one of
the defined methods for the plus function. If I put plus and I put two strings there, though,
that won't work, because that method is not defined for the plus function. Strangely enough,
it is, though, for the multiplication function. That is, one of the methods does take a string
and a string, and it's just going to concatenate them. I love Nutella, just like that. Now, we can
also do something else. We can call a function, and we're going to see which method is used, and we
use this macro at which. So, it's a multiplication true and true. These are two booleans, so we can
clearly, or we can guess at which of the methods of this multiplication function is going to be used
in this instance. True and true, these are both booleans, so x is a boolean, and y is of type boolean.
I can also ask what functions have integers as at least one of their methods, and that's going to
take a while, because there are many inbuilt Julia functions, and quite a few of them, so I would
suspect most of them at least, will have an integer in there, and you see 730 element arrays take
integers as one of the methods. So, that's beautiful. So, how can you use that? It's very powerful, because
you can put some constraints on your function. So, I'm going to create this function, my underscore
func, and you see I've created it one, two, three, four times here, and every time it's a function
with an end, and it returns something. It's the same name, though, but it means I'm going to, it's an
overloading, really. I'm using multiple dispatch to create multiple methods of this function, so that
when I pass these as arguments, there is a method for that. So, if I just write a comma b, that is
generic, and it really implies that master type called any. So, any of the subtypes of any can be passed,
and if Julia finds that, when I call this function for my two arguments, it's going to just return
this print function generic case. I'm doing my func again, and I'm going to say a as a real number,
b as a real number, and then it'll say both arguments are real numbers. a is real, just comma b, b as
then any, or a and b, b being real, a being any. So, let's run that. Let's run that, and let's pass
two numbers, my func pi comma three, my func pi comma three. Let's do that, and it says both arguments
are indeed numbers. So, that came from here. Both arguments are numbers because they're both
real. It's going to find whatever is more appropriate. So, they are both real. It isn't
a subtype of any, but real is like the first hurdle that it gets to. So, that's what it's going to return.
If I return this, which is a number, and Julia, which is just a string, it says the first argument
is a number, and that's what it did here. It said a is real, and b could have been any, and string is
a subtype of any. So, that's the closest method, or the method that was used to execute the calling
of that function. And if I pass Julia, and then exponent one, it says the second argument is a number.
I love Julia. Now, I did not have a method that was string string, but I do have this generic case
where it could be anything, and string is definitely, or ASCII string is a subtype of any. So, it was going
to use the generic case. And now, for this, if I just look at the method, it says it's a generic function,
my func, with four methods. Remember, we've always just seen generic function with one method.
Now, you know what it's all about. Now, usually, we just pass some ordered arguments, and it was just
any, because we didn't specify. That's how we landed up with one method. But here, we've created this
function, and it actually has, we have created four methods for it. That is lovely. Now, let's just look
at a few inbuilt Julia functions, functions, just for, for, just for pleasure. And we've, we've done
it before. I use it every time. Plus is a function. So, I needn't write two plus two. I can call the
function plus, and I can pass two arguments to it. We've seen, we've seen what that is. And just to
prove the fact, I can ask, what is the type of plus? Indeed, it is just a function. Filter is another
nice function to use. Just to show you, oh, there are so many. I'm going to touch on one or two here. Filter.
I, it's now the stabby function, and it's just going to filter for is even. Is even is also,
is also a, an inbuilt function. It's just going to test if a value that's passed to it is even,
and I'm going to pass to it, to this filter. Now, remember, the filter is just going to return
booleans. So, yes or no, and then if it is true, I should say true or false. If it is true,
then it's going to return that value that's held in I. And that takes the stabby function and the
second argument, which is my array, and my array is from one to 20. So, it's going to go one. It's
going to ask, is it even? It's going to return a false, because it's not even, and that gets ignored.
When it gets to two, it says, is even? Yes, it's true. And the filter will then let it through. So,
as you can well imagine, it's just going to return for me 2, 4, 6, 8 until 20.
Find and is prime is to another very useful one. So, I'm going to define this function called
prime underscore numbers. I'm going to say it should be of type integer or any of integer's subtypes,
such that I have this argument a, which is an array of t values, and it's a one column array. It's a
one column vector. That's what it's saying there. Okay. So, let's do that. And what it does is it
uses this inbuilt function called find is prime a. A bit difficult just to look at it like that.
Let's see. Let's just see there. Let's just run that, and then I'm going to call prime numbers,
and I'm going to run it from 1 to 20 so that you can see. So, that's why I said Julia doesn't think
that 1 is a prime number, and is 1 a prime number? You can divide by 1 in itself, but 1 is itself,
so is it a prime number? So, it's going to go from 1 to 20, and it gets past there. This is an array
with just one column. All of them are 64-bit integers. There's just one column. It's a vector,
actually a column vector from 1 to 20. It's not a matrix of 2 by 2, 3 by 2. It's just one single column.
That's what that one is for. They're all integers, and that's an array. And that is what I said there.
It must be an array, and it must only be one column. That's the only thing that it's going to accept.
And each and every one of these elements, as specified by the type there, has got to be an integer
or a subtype of integer. So, it certainly couldn't pass a bunch of irrational numbers there, a bunch of
floating-point values. And the function prime is find. So, again, it's going to return true or false.
True, then it will give me the value. False, it will just ignore. And there is this is prime,
is prime function, and just running through each of one, each individually of those values.
Now, we can simplify that function, actually. We can just call it function easy primes. A is an array,
such that it's all integer 64 elements, and it must be a single column array.
And this find is prime A, as we've seen before, end our function. And if we run easy primes now,
again, we're going to get exactly the same result.
Very lastly, let's just do some list comprehension. Not really part of functions, but always fun to do.
They really crop up everywhere. We've seen them before, but let's just take a quick look,
right, to end off this very nice section of functions. This is an added bonus.
So, I'm creating this matrix. And what does it do? I'm going to call it matrix one,
and it is x plus y for x in one to two, and y in one to three. Let's just run that,
and you're going to see what gets returned, this two by three array. So, what's happening here?
So, x is going to be this one to two, and y one, two, and three. So, it's going to say one plus one,
that gives me the two, then one plus two, so one and x, the next one and y. So, you can see the order
in which this gets executed. That gives me three, and one plus three is four. Now, it's going to jump
to the two and the x for the next row. So, two plus one is three, two plus two is four, two plus three is
five. So, that is lovely. Now, just to remember, you don't have to use this in keyword. You can also
use the equals keyword. That's going to give me exactly the same thing. And for a bit of fun,
let's get back to school. Create the 12 by 12 table. So, it's x times y for x in one to 12, y in one to 12.
Quick and dirty. If someone comes to you asking for the, very quickly, for the 12 times 12 table,
there you go. No problem at all. So, that's a bit of a mix of list comprehension. It's
building up values, building up an array, building up a matrix.
You can use it as part of functions here, but we've had a good, nice look at functions. Now,
they're absolutely powerful and there's this multiple dispatch of various methods in the
function that really make them powerful and you can take absolute control of that. I really hope you
enjoyed this lecture. Have some fun. Create your own functions. They are really powerful in Julia.
