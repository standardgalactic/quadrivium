Here in lecture 3 we're going to look at doing derivatives in SymPy.
So first of all, as always, opening a new notebook, we're going to say import SymPy as SYM,
just an abbreviation for our namespace there, and we're going to initialize prettyprinting,
sym.init underscore printing, open and close parentheses, and I'm going to map the variable A to the symbol A,
and B, X, Y, and Z to the appropriate symbols on the right-hand side.
So let's just run that by hitting Shift Enter, or just hitting the Run button there,
and this code gets executed, there's nothing to be printed to the screen, nothing happens,
we've just run that piece of code.
Now I'm going to introduce this variable name f, and I warn here that I'm only using f as a variable here,
it's not defined as a function.
In future lecture we're going to look at defining a function as opposed to a variable.
So this is symbolic Python, so I have referred to SymPy as SYM,
so if I want to use trigonometric functions such as cosine and sine,
I have to invoke this namespace Sym.Cosine X times Y,
and Sym.Sine Z times X.
X, Y, and Z are symbols here.
So this expression here I've attached to the variable f,
and I'm just going to print out the variable f,
and there we have the sine of X times Z plus the cosine of X times Y,
and it's printed in this pretty printing format because I've initialized that printer up here.
So let's look at just printing the first derivative.
So SYM dot capital D, we saw that in the previous lecture,
the derivative of f.
Now f is a variable referring to this expression up here with respect to X.
Lo and behold, it's going to do a partial derivative for us because there's not only an X in our expression,
there is Y and Z as well.
And the second derivative, remember how to do that, I can put two X's there,
let's execute that code, so we have the second partial derivative,
or instead of putting the two X's I could say X comma 2,
and there we go, it looks exactly the same.
Now partial derivatives need not only be with respect to a single variable.
We can have the following, I'm going to have my expression F there,
and I'm going to do the derivative, partial derivative with respect to X once,
with respect to Y three times, and with respect to Z twice.
Let's execute that code.
And you see this long partial derivative here, and it's going to be to the order,
and in series as I put it down there, first X, then Y three times, and Z twice.
Now let's actually do that first derivative.
Now perhaps I should start down here.
We've already done that by using the derivative, that's the printing statement,
and just adding a dot, do it at the end.
And if I execute that, I'm going to see it's negative Y times the sine of X, Y,
plus Z times the cosine of X, Z.
This is the proper way of doing it though.
I'm just going to use this keyword diff with a lowercase d, I, F, F.
So I'm going to take the derivative of F with respect to X, and I'm just going to print that out.
It's just going to do the equation, or get the solution for me.
So in essence I can say something like,
I'm dot diff diff diff, and let's give it a function.
Let's say it's X cubed with respect to X, and we know that should be 3X squared,
and if we execute that indeed it is 3X squared.
So I can either do the printing part and just do it instead of printing out the function itself,
or properly just calling the diff function there and just executing the code.
So I'm going to take the derivative of F with respect to X.
So I'm going to take the derivative of F with respect to X.
