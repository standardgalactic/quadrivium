Now you've seen me take pencil to paper and we looked at variables and expressions but now we're
going to do the same thing but using symbolic python. This is still very much an exploratory
video we're just trying to get used to how to do things in SymPy. One of the very exciting things
that we're going to do is we're going to create mathematical variables. Now that's not normal
for computer language but we can do it with SymPy and later on in this course it's really going to
help us solve for X. I have opened my Google Drive and I've navigated the folder structure so that
I'm in this folder that contains my notebooks for this course in algebra. I'm going to go to new
and more and a new Google Colab notebook. My new notebook is opened and the first thing I might
want to do is just to change the name of this notebook. I'm going to highlight this portion
that I want to replace and I'm going to just call it let's call it lecture number two. I'm going to
create a new text cell right at the top so I'm hovering above this code cell that was already
created for me. Just on top of that I'm going to hover click on text and let's give this notebook
a name or title at least. I'm going to double click there a single hashtag symbol and a space and I'm
just going to call it two and a space. I'm going to use this straight line as this way to demarcate
the number and the name and let's make this variables and expressions. I'm going to hold down
shift and hit return or enter and that line of markdown will be executed and I see a beautiful
title. The next thing that I might want to do just to try and keep this notebook nice and neat
is just to do the section where I'm going to do all the imports. So again I'm just going to hover in
the middle choose text and this time I want two hashtag symbols because I want the second largest
font size and that's going to be the size for all my all my sections and so I might write something
like packages and I know in this section I'm going to import all my packages. Now I'm going to import
sympy symbolic python later on we might learn other ways to import these packages and modules but
for now I'm just going to use the whole word. That is not the most efficient way to do this
but we're just learning as we go. I'm going to hold down shift and hit return or enter and what
you'll see at the top corner is it's connecting to a kernel that means python is starting on google
service so that I can actually see the code being executed. So we've imported sympy and the next thing
I might want to do is to initialize the printing that's pretty printing so that I do see nice
mathematical type setting for my results and that is a function that lives inside of sympy so I have
to say sympy dot and the function that I'm after is init underscore printing open and close parentheses
I know that this is a function because it has the open close parentheses this is not a function that
is part of base python it lives inside of the sympy package and because of the way that I imported
the package I have to reference the whole name of the package dot and then inner printing. So instead
of hitting shift and return I'm just going to click on the play button and that code is executed for me
and now we can simply just play a little bit. The first thing that we want to do is just create a new
section so let's do two hashtag symbols and I'm just going to call this symbols. The way that most
computer languages work is that we create variable names names that we decide just for ourselves and
we assign something to that name. The assignment happens with the mathematical equal symbol. Now an
equal symbol inside of a computer language is not the equal symbol we see in mathematics. In most computer
languages or let's say in many computer languages the equal sign is actually an assignment operator.
It assigns something that is to its right to the name that is to its left. So on the left hand side
of the assignment operator we have a name and that name is up to us. Now there are certain restrictions
so I cannot have illegal characters in my names. I cannot have spaces for instance in the name. So
there are some constraints but by and large that is up to you. So in this instance I am going to create
a variable named x. And now once again please note as it stands right now that x is a computer variable
name not a mathematical variable. And so usually we would create a list of values. Say for instance we
want to capture the age of some participants. I might call my variable age and I'll say age equals and then
I'll create a python list object and I'll just list all the ages. Now I've assigned that list object to
the variable name age and that is a computer variable name. But I'm using SymPy and SymPy stands
for symbolic Python. I can actually change the behavior of Python such that these variables actually
become mathematical variables. And that is not something that many languages can do. We can do
that in Python with the SymPy package. And the way that we're going to do that is to use a function
inside of SymPy called the symbols function. So I'm going to say SymPy dot symbols open parentheses.
So once again that is a function. I notice that that's a function because it's the two parentheses
the open close parentheses. And it is a function that is not available in base Python so I can't just
use it. I have to tell this kernel this running instance of Python that that function symbols lives
inside the SymPy package. Once again I have to do this because of the way I started my notebook off
by just saying import SymPy. As mentioned later on we'll see other ways to do this that is more
efficient. But for now I'm going to say x equals SymPy dot symbols and what we pass inside of a set of
parentheses that is called an argument. We give information to the function and our function now
is the symbols function. We give it information. We give it something to act upon. Every function in a
computer language does something but it has to do that something to something. And that's something
that it does its job on. Well that's the argument. Now some functions don't need arguments. Like look
at that inner printing. We didn't pass any arguments and that is quite fair. But here we need an argument
and we're going to pass this argument inside of quotation marks. Now you can use double quotation marks
or single quotation marks but it has to be inside of quotation marks. That tells the Python computer
programming language that this is a string object. Remember I said everything in Python is an object
or most things in Python are an object. And yeah this is a string object. And don't worry about it
now. Just accept it as is. You have to pass this argument inside of marks. Now I'm going to execute
this. I'm just going to hold down shift and hit return or enter. And now x this computer variable x has
been assigned the mathematical symbol x. And let's print this out. I'm going to just type x. That's it.
And my next line of code. And execute that. And look at that beautiful typesetting. Does that not look
like what you would expect in your mathematical textbook? Look at that beautiful x that's being
rendered to the screen. Now let me show you the example I spoke about before. Maybe I want something
like age equals. And I'm going to say well the first person was 56. The second person was 51. The next
person was 50. The next person was 66. Now look at this. I created a computer variable called age. I
assign to that with assignment operator a list object. And the list contains all these ages of these four
subjects with a comma in between each of these values. So if I execute the cell I now have this
computer variable with a name and all that does is create some space in computer memory where this
object is stored that I can now call this object. And if I execute that code I see there's the list of
all the ages. Now we've done the same to x but we've done something very special to this x. We've assigned
to it this instance of a mathematical symbol x which is now very different from a normal variable that just
holds some value. Let's just try that again. Let's do the same for y. Y equals some pi dot symbols.
And I'm going to say well make that y please. Hold down shift and hit enter and now I have a y. Now
look at this. I can say x plus y. What's going to happen? Well look at that beautiful x plus y. Just as
your textbook would do it. That is symbolic mathematics. Let me show you a different example. I'm going to say
let's say v equals the number 30 and w equals the number 40. So v, w, quite legitimate variable names.
I chose them. No problem. What if I now say v plus w? Well I'm going to get the actual execution. 30 plus
40 is 70. See how different that is from what we did up here. It did not print to the screen 30 plus 40.
No it just gave us the solution. That's numerical computation. What I'm doing up here is symbolic
computation. Very difficult for a computer to do. But Python can do that with the help of the simpy package.
So x is now a mathematical symbol. Y is a symbol. And when I say x plus y I've got nothing assigned
to x and y except it being mathematical symbols. And now it will do that symbolic computation for me.
X plus y. Versus if it was a good old numerical computation. It's just going to do the computation
for me. And that is very very nice. Now we can go even further with this symbols object. Let's do two
more. I'm going to say a comma b. And look at this. Another powerful thing. On the left hand side I can
do more than one variable. Here I'm doing two variables. As long as I separate them by commas.
That's the most important part. So let's do simpy dot symbols. And open and close parentheses.
And I'm going to do a and b. Now here comes a little trick. I can just say a space b. I don't
put commas inside of those quotation marks. We don't have to do that. Now outside of the quotation
marks but still within the parentheses I'm going to put a comma a space. And now I'm going to do
real equals true. Now look at what has happened here. First of all notice that there's my string.
It's inside of quotation marks. Comma. And now I have real equals true. In other words I've got
two arguments here. And all arguments must be separated by commas. Some arguments are very very
special. Instead of just the value of the argument which would be true in this case. This argument
actually has a keyword name. And its name is real. And I'm setting real to true. Now later on you'll see
this happen more and more. And you'll get used to it. For now please note that there are two arguments
here and they are separated by commas. Now what this symbols function can do is not only create
the symbols but I can put restrictions on those symbols. I'm going to say that mathematically
they must both be real numbers. So a and b can contain real numbers symbolically. So no complex
numbers or other kinds of numbers. Now SymPy has some built-in symbols. Look at this SymPy.pi for pi.
Look what happens now if I print this to the screen. I don't get a numerical approximation 3.141 etc.
I get the actual mathematical symbol pi. And SymPy knows the irrational value of pi. Yes of course
it will use it in computation and we can force it to do numerical approximation. We'll look at that a
little bit later. But look at that. It contains this symbol pi and that is a mathematical number pi.
So let's do something crazy with everything we have now. Let's build an expression. So look at my
expression. I'm going to say a times and let's do parentheses x plus y. Let's do that and see what
happens. Now a remember that was assigned there's a it was assigned to be a symbol and it's just left
to right. A was first and that's assigned to a and b was second and the second one that was listed there
was a b. Just here you don't need any commas remember. And now all of these things a b x and y
are mathematical symbols. They are no longer normal computer language variables. I've got my
parentheses x plus y. Again just as you would see it in a textbook and later on this is going to be
so powerful as we do distributing as we do factoring as we solve for x. This is just going to become
so important and powerful. Now let's go crazy. Look at this. I'm going to say a times. Now look at this
simpi dot sin. There's a sine function inside of simpi. That will do the sine calculation for us.
Now I'm going to say simpi dot pi. Let's say times b. And let's say plus three times x times y. Notice
that I'm using the star symbol for multiplication. Let's do minus four times x. Now everything here
the a the b the x and the y. I've already told python that these are symbols mathematical symbols. So it
knows what to do with them. I'm using the sine function and I am using the pi symbol as well. And
let's see what this expression looks like. Look at that a times the sine of pi times b plus three times
x times y minus four times x. And you can build any expression that you want. It is just absolutely
fantastic. So let's create a brand new section. I'm going to do a text cell or markdown cell. I'm just
going to put two hashtags. It's my indication, my font size indication for my sections. And let's say
signed numbers. Just want to think a little bit about positive and negative values. And so let's look at
this. Let's say negative 16 minus 14. So I'm just doing some simple arithmetic. And of course, that's
going to be negative 30. Now inside of this section, I want to show you something truly special. Let's
have a look at this negative 16, negative 14. I want to know, is this equal to negative 30? And the way
that we do that, because remember, I cannot use the equal symbol. That's an assignment operator. But what
about two equal symbols? And now I'm going to say negative 30. I already know the answer is negative
30. Those two equal symbols, that is much closer to what we think in mathematics as an equal symbol.
I have a left hand side, negative 16 minus 14. On the right hand side, I have negative 30. And that is
like I would write with pencil and paper, negative 16 minus 14 equals 30. That is an equation. And the left
hand side is equal to the right hand side. But what I'm doing here is something even more special.
Those double equal symbols there, those are actually a comparison operator. It's going to
compare the left hand side to the right hand side. And it's going to ask the question, is it really
equal to each other? Is the left hand side really equal to the right hand side? And that's a
mathematical statement. And statements can either be true or false. Remember, true and false are
Boolean values. And those are the only two things. There's no maybe here. It's either true or false.
So let's execute this. And we see the result is true. Indeed, negative 16 minus 14 is equal to
negative 30. And that is quite fantastic. Because now we can start thinking about the following.
Let me take negative 16. And I'm going to add to that a negative number, negative 14. Is this still
equal to negative 30? Of course, it's still equal to negative 30. You know that. You know that addition
is nothing other than in this instance here, this negative, this negative 16 minus 14, that that
negative is actually a positive in disguise. And we're taking this 14 and we're doing what we call
it's additive inverse, negative 14. That's the additive inverse of 14. Because if you add both
of them, you get to the additive identity, which is zero. And so those are additive inverses of each
other, 14 and negative 14. So when I say minus 14, I'm actually saying add to the negative 16,
another negative 14. And so is this equal to each other? Yes, of course it is. Because that subtraction
is nothing other than addition in disguise. So let's have a little bit of fun. Let's say 3 times
4. We all know that's got to be 12. But what if I want 3 times negative 4? Well, I've got to put that
negative 4 inside of a set of parentheses. Because I can't have multiplication and then the subtraction
symbols, the star and the little minus symbol right next to each other. So I have to do that negative 4
inside of parentheses. And now I'm going to get negative 12. What if I wanted to do negative 3
times 4? That's how I would do that. And now we see the result is also going to be negative 12.
What if I do negative 3 times negative 4? Well, that's going to give me a positive 12. And this is
what we have to learn here. A positive times a positive is a positive. A positive times a negative
is a negative. A negative times a positive is a negative. And a negative times a negative is a
positive. And that's what I mean by the sign of numbers. Very easy for us to look at. Now remember,
the same is going to hold for division. Let's have a positive divided by a negative 3 divided by 4.
Sorry, that's a positive divided by a positive. That gives me a positive result. What about a positive
divided by a negative? Well, that's also going to give me a negative. What about a negative negative
3 divided by a positive? That's going to give me a negative. And then a negative divided by a negative
negative 3 divided by, remember, I'm just using it here, but the forward slash is division. And I've
got negative 4 negative divided by negative. That's going to give me a positive result. So just those
couple of things that one has to remember. Now let's go absolutely crazy here with these signs. Now I've
already assigned x and y to be mathematical symbols. Remember anything in Python, as far as these variables
are concerned, you can reassign them. So they already exist, but you can just go ahead and let's say erase
them and write over them. So I'm going to have x, y and z this time. I'm going to say those are all
sympy dot symbols. And now I'm going to have quotation marks. Remember x space y space z. I have to keep them
in that order. And now I'm going to do something else. Remember before we said, well, these must be real numbers.
I can also do the following. Positive equals true. Now some pi is going to know that even though these
are absolutely valid mathematical variables, I'm making them all positive values. They have to only
hold positive values. Now look at this magic. What if I now say minus x times y? What do you think is
going to happen? Of course, it's got to be negative x, y. I'm telling you that x only holds positive values.
y only holds positive values. But now I'm saying negative a positive value. Now that becomes a
negative value. And a negative times a positive is going to give you back a negative. And this is how
you can solve these kind of problems in your textbook of managing signs and algebra. So let's do a
fantastically long one. Let's do the following. Let's have negative x. Let's do the following. Let's
multiply by y. Let's multiply by negative z. And let's divide by and I'm going to put inside of
parentheses the whole of the denominator. So I'm acting as if this is all of this is my numerator.
And I'm going to put all my denominator inside of parentheses just to make it clear what I'm doing.
Let's do x times and then a negative y. And let's do times a z. Let's do times another negative x. Let's
do times a negative y. Let's see what happens. And Simpi is going to be clever enough to realize that
this is negative one over xy. So it's going to do the numerator denominator for you work that out
perfectly. And it's going to get the sign correct. And you can force that issue by just telling
Simpi or Python in this instance through Simpi that these symbols are indeed positive values.
And so that's it for lecture number two. It's not really a long lecture. I just want to for you to
start getting familiar with using Python and using Simpi. We haven't done anything really crazy or really
useful just yet. But I promise you that is coming. Imagine you can just use these symbols,
write out expressions and solve those expressions. Do distribution, do factoring, solve for x,
calculate root. You can do all of that with Symbolic Python.
