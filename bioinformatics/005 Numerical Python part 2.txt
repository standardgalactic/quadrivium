Let's look at some more numerical Python here in part two and I'm going to introduce you just to
some more concepts regarding indexing of your arrays. And here we are in the shell. As always
I'm going to start with importing the module numerical Python and I'm going to give it a
short end notation in P. Let's create an array, which remember if I say it's going to be a
row vector, creating 10 elements. If I don't specify anything else, just the number of elements
I want in my array, it's going to start at zero and increment at one. So we have zero,
one, two, three, four, five, until nine. And the positions start counting at zero. So in
position zero, we have zero. In position nine, we have nine, but there are 10 elements. Now
we looked at before I can say very quickly, what is in value in a zero position? Indeed,
it's zero. If I say what is in the ninth position, it's going to give me nine. And if I say something
like 10, it's going to give me an error because lo and behold, they are not there is not a
position 10 because Python starts counting at zero. Now, the first thing we want to look
at is just to reshape this. I can say x dot shape equals, I have to put an equal sign in
there and let's make it two rows and five columns. So when you shape, it's going to take this row
vector and it's going to shape it into something that has two rows and five columns. So the rows
come first, the columns later, second, and you have to remember this equal sign. So if I do that,
and now I do x and lo and behold, there are two rows and two columns. So that makes it very useful for
creating for creating just this quick matrix. Now let's have something much larger. Let's have x equals
empty range here and let's do a 35 and let's say reshape. We've got to put a dot reshape.
Let's have it as 5 comma 7. Will that work? Yes, indeed it does. There we go. So instead of shape,
I used reshape and dot reshape and there's no equal sign there. So I've got 35 elements and I'm doing
five rows and seven columns. Of course, seven times five is 35, which is going to fit the number of
elements that I do have there. Now I can ask a numerical python to do something for me. Let's
say x is zero. What am I asking? What is in position zero? But what does zero here refer to? Well, it refers
to row. It's going to just give me the first row. And if I want the first column, what am I going to do
then? Well, let's before we get there, let's just look at a bit more row effects. What if I want the
first two rows? I will say zero colon two. And why two at the end? It says, well, give me anything from
row zero up until row two, not including row two. Remember, the first row would be row zero,
then row one. And there we have it, the seven, eight, nine, 10, 11, 12, and 13. So it's not going
to give me row two. And just to show you what row two is, remember, that'll be the 14 through 20,
through values of 20. Good. So I can specify which rows, but what about columns? Well, that's quite easy
to do. I can just have this. I can say, give me rows one. If I say row one to two, it's just going to
give me row one because it goes up until row two, not including. It doesn't include this last bit.
And then I can say comma. Now we get to the columns and I can say, give me column two up until column
four, which is just going to give me column two and column three. And that would be column,
this first lot would be column zero. This would be column two. So it's going to give me this column
and this column, but it's only going to give me row one. So it's only going to give me those. Let's
have a look and see if indeed that happens. And there we have it, just a nine and 10. Let's work
through it. So it's giving me row one until row two, but it doesn't include row two. So there's row zero,
there's row one. So I'm going to have the seven, eight, nine, 10, 11, 12, 13. But in that row,
I only want column two and column three, because it goes up until column four, not including.
So this is column zero, column one, column two and column three in this row. Lo and behold,
there's the nine and the 10. That is what it was going to give me. So I can really just use sub
areas, sub matrices of my larger matrix. It's called slicing. And there's some other things I can do.
If I just want all the rows from row two to the end, I can just do that. There we go. So it's going
to give me from row two, which is the 14, and then it goes until the end. Or if I alternatively wind
everything up to say row three, row three, there we go, we're going to have colon three. So that's
going to give me zero, one and two. Remember doesn't include this last one. So you can really go
in and you can have a good mixing up of these. One other thing I wanted to show you, just let's have
x equals np.arrange and let's arrange. Let's have it from, let's say 10. We're going to start at 10.
We're going to end at one and we're going to go in steps of negative one. We can certainly do that.
Now we'll have 10, nine, eight, et cetera. Let's just have a normal one. Let's just have np.arrange and
we're going to have 10. I can just also just ask for position number negative nine. What does that do?
That gives me a one. What it does there, I'll show you x again. What that does is remember that's
position zero up until position nine. If I put a negative in there, it just starts counting from
behind and it doesn't start counting at zero. So that would be negative one, negative two, negative three,
negative four, negative five, negative six, seven, eight, negative nine. And that's how we get to
this position here. That's how we get to this position right here. Okay, that's all I wanted to
show you of the second part of numerical python and it's certainly a lot of stuff that you can now
already play with. Just remember the broadcasting from the first video and then you can do some basics
with your arrays or with your matrices that you create here. Remembering that this is not linear
algebra, it's going to have broadcasting that means element to element.
