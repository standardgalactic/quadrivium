So this is the second video on histograms using Plotly and R.
Now I've had a question or two just about controlling the color of our histogram.
And so this is, in actual fact, then part two.
So what we can see here is my rpubs repository, rpubs.com forward slash, that's J-U-A-N and then H, clopper.
And you'll find all my documents here.
Remember, they were created in RStudio, saved as RMD files, that's R Markdown.
They were then knitted as HTML and uploaded.
You can also download the actual files here on my GitHub repository.
Remember, that's John Clopper, that's without the H.
And you'll see a lot of my repositories here.
The Plotly for R is where you'll find this growing list of files.
Download them so you can play with them on your own system.
If you don't know how to clone a GitHub repository, remember, you can always just download the zip file and then unzip that.
And all these files will be there for you.
So let's have a look at this HTML rendered file created in RStudio.
Let's just run through, just quickly catch up again.
Remember, a simple histogram.
All we did here was just to create a computer variable called WCC.
It was from a normal distribution, 100 values with a mean of 15, a standard deviation of 4.
And we created this histogram.
We called our first plot P1, plot underscore LY.
That is the function for creating plots in Plotly.
And I said X equals, and then you always remember that little tilde symbol WCC, and then the type, a histogram.
And very neatly, we'll see a histogram here.
Remember, histograms are for numerical variables, and it's going to bin the numerical variables.
So it's going to create these little sections.
It's going to create a bin.
So if I hover over this top one, you see they're 12 to 13.999.
So the numerical variable, it counts how many values fell between 12 and 13.999.
And then there, from 14 to 15.999, and it's just rounding that off.
It just means 16 is not included.
And there it goes from 16, so 16 is included in this bin, then up to 17.999.
So it's very easy to understand the histogram.
And you can see that this was 100 values taken from a normal distribution.
I showed you how to add title and axis labels, at least.
And for that, we just have this percentage greater than and percentage symbol there.
That just means we're piping this first function into the second one.
And the second part is a layout.
I've got three keyword arguments here, title, x-axis, and y-axis.
For the x-axis, we just have a string histogram of white cell count that gives us this nice little title up here.
And the x-axis, I want a couple of things to happen.
So I'm passing all those keyword arguments as a list.
So the list has a title and a zero line.
The zero line is just these black lines that are drawn, and sometimes they appear, sometimes I don't like them very much.
I always put that to false.
But the title is white cell count on the x-axis and the y-axis, or white cell count and count on the x-axis.
I showed you how to normalize the histogram.
We've just added a hist-norm equals probability.
So it's just going to take the number that was in there.
So if we go up, remember here, there was 24 in there, and it divides that 24 by how many there are in total.
In total, there were 100 values.
So that just gives us this 0.24.
So 24% of the values fell there.
Change the histogram into a horizontal histogram.
Very easy.
Instead of saying x equals, we just say y equals.
And everything else stays exactly the same.
So to plot two histograms, in other words, we take a numerical variable and we divide it into two.
In this instance, you can divide it into more than two by some categorical variable.
So we created a data frame, data dot frame, and we have two columns in there.
The first one's called group.
The other one's white cell count.
Inside of the white cell count, we just put the 100 values that we had created.
And in the group, we use the sample function, and it's going to choose between a and b.
It's going to create 200 of those.
And replacement equals true.
So 200 values, not 100, I meant.
And so it's going to have a, b, a, b, b, a, b, etc.
And we can group these 200 white cell count values, those that belong to a and those that belong to b.
And what we've done here is just to create two new data frames.
One's called group a, and the other one's called group b.
And we're going to use the filter function, which is part of the deep layer library.
So df, we're piping that or passing that as first argument to the filter function.
So we might as well have written filter.
And then the first argument would have been df, comma, and then a boolean question group equals equals a.
So that's only the values that return true.
So the values that do contain a will make it into this group a data frame, similarly for group b.
And then we have to plot them separately.
So plotly, I've just put an alpha value there of 0.7.
That's just a bit of transparency.
It's not normally how we do transparency, but I've put it in there.
And then I add separate histograms to this same plot.
See the pipe there?
I'm piping that, this plotly, into both of these histograms.
So x is the group a dollar sign, the white cell count.
The white cell count, so I'm doing both of those separately, giving them names so that we have this legend
on the side.
Otherwise, everything is exactly the same.
Remember, this is plotly.
So I can turn off group a, turn on group a, turn off group b, turn on group b.
Very nice here in plotly.
So let's change the colors.
The first way I'm going to show you is just to use the actual names of colors.
And there are a few colors that do have names, and you can use them directly.
So for P6 here, we have plot underscore Lee.
We're going to have x equals the white cell count.
The type is a histogram.
The histenormous probability.
And then the marker.
Now, if you see the word marker, markers are the lines, the actual dots for scatter plots,
these little rectangles for a histogram.
All of those, those are markers.
And I want a few keyword arguments here, so I'm going to put them in a list for the markers.
One is the color, and one is the line.
The color, I just want it to be light gray.
And then the border.
Because you see, by default, there's no borders in a plotly histogram.
But I can add borders saying line equals, and I want two things with that line.
So I'm going to put them in a list.
So the color is going to be dark gray, and the width is going to be two.
And then, again, I pipe that into a layout very nicely, and this is what we get.
See the dark gray border, the light gray interior, and everything else the same.
It looks beautiful, actually.
And so just by adding some elements here, keyword arguments, to the marker argument.
As simple as that.
So what if we want two?
Well, I mean, we can just do that individually, remember.
I've got group A white cell count and group B white cell count, each to the add histogram.
Remember, you could also say add underscore trace.
And then first argument, or you can put it anywhere because it's a keyword argument,
you would say type equals histogram.
So no problem there.
Add histogram works perfectly.
And now I can do that individually.
So the first one is going to be a teal color with a dark gray border, width of two pixels.
And the second one is going to be orange with a dark gray border, width of two.
And that is what it looks like.
And remember that I can always turn these off.
I can always turn group A off, so I can only see group B there.
Turn it back on.
Turn off group B so that I only see group A.
Very beautiful.
Another way to do it is just to use RGB, that's red, green, and blue, and RGBA,
which adds the opacity for us so we can control that.
So what I'm going to say is list, color equals, and then instead of naming it, I'm using RGBA.
That's going to take four values.
The red value from 0 to 255, 0 being none of that color whatsoever, and 255 maximum brightness for that color.
So 255 for the red, 165 for the green, 0 for the blue, and 1.0.
So it's not going to be transparent at all.
It shows the full color there for us.
And then the line, just RGB without the A, so I'm not putting any opacity in there.
So 169, 169, 169, that's a grayish color.
So for the one on top, the group B, I'm adding RGBA, and I'm putting that as a 0.7.
And again, the line color, I don't care about opacity there, so we just use RGB.
And very nicely, there we get our plot.
And once again, always I can turn off any of the two, or there's more than two, I can turn them off
so that I can just concentrate on the one that is left.
So very beautiful there.
You can really control the colors of these histograms.
I've shown you two ways.
I plan to make a video where we really go in depth into all the ways that you can control
colors inside of Plotly, and I hope you look forward to that one.
So that's it for adding color to your histograms.
We'll speak again in the next video.
Thank you.
Thank you.
Thank you.
Thank you.
