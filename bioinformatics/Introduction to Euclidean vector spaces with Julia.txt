So the noise that you're in the background, that's the attractive player in the field.
So what we're going to talk about in this video is just about vectors in Euclidean space.
So an introduction to linear algebra.
But what I want to motivate for is to make your notes inside of a computer coding environment
and to use that computer language to help you understand the topic
and also to prepare you for the future.
If you're going to learn linear algebra, linear algebra is used in many fields from data science to engineering, physics.
It's just used everywhere.
You might as well learn to use linear algebra with a coding language.
So I think there are many positives and it's easy to motivate for the fact that you should do your work with a computer language.
So we're going to use Julia.
Julia is a language for scientific computing.
And we're going to use one of its coding environments called Plutr, which is a notebook which runs inside of your browser.
And I've got other videos here on YouTube, which just shows you how to use and install it.
This video, though, is about vectors and about Euclidean space.
And so our notes are going to be nice and neat.
And we're also going to use just a bit of easy, very simple code just to check our results using vectors in Euclidean space.
So I'm not going to do a bunch of proofs.
If you want a video on the proofs, you'll hear me mention in the video, then certainly make one.
And I'll try to make some notes available that is very clear and precise about how to construct the proofs
and when you are dealing with vectors in Euclidean space.
And so let me show you what it looks like to do your work, to do your linear algebra
and to study really using computer language inside of a coding environment.
I've opened the Plutr notebook and as you can see, there we go, the whole lot.
So everything is typed.
All the notes are available in the link down below so you can load this notebook for yourself.
So vectors in Euclidean space, yes, you can do your mathematics work right here inside of a Plutr notebook.
It looks very neat.
As you can see, you can draw figures there.
You can write very beautiful code.
And I'll just along the way show you.
So it's a lot to learn.
We're going to learn about vectors in Euclidean space.
We're going to learn how to do calculations in the Julia language
and then also how to generate a notebook such as this.
So these are the cells right at the top.
So you'll see there's a little eyeball sign there with a line through it that's shown hide the code.
So if I open that, we can see the code.
So in the Plutr notebook, of course, the code is below the cell.
It's at the bottom of the cell and you see the execution up above.
The MD stands for markdown.
And then a set of quotation marks, open and close quotation marks.
And inside of there would go some normal English.
So there's my name, but there's also that little greater than sign.
And that indicates to Plutr that it should make this background here and make the code or make the execution,
at least of that cell, look good.
And I can just hide the code there.
And you see the pluses on top of the bottom.
So if I wanted to insert a new cell to write some code, that'd be fine.
So here's my title.
And that will also be a markdown cell.
So MD with an open and closed set of quotation marks there.
And then we're going to use these hashtag symbols in a space.
So a single hashtag, that will be the largest text.
That'll be an H1 tag in HTML.
And if I open the setup, you'll see the setup slightly smaller, the text than the title.
So this will be one smaller.
So two hashtags there.
And that's just how you do it.
You can go up to six hashtags.
That'll be the smallest.
But you put the MD and the opening and closing quotation marks there to indicate that a cell
is just a markdown cell, as opposed to a cell with some code in.
And here we see the code.
And if you're familiar with Julia, you'll have to be a little bit familiar with Julia before we start with this.
But what I've done here with the setup, I've created a computer variable called file.
And I'm using the assignment operator.
And in quotation marks, I've got this address to this project.toml file
inside of this folder structure on my hard drive.
And that project.toml file, that is a specific environment
for which we have this linear algebra with Julia, this project that I do have.
And you can watch my video, the description, the link in the description down below,
how to set up a notebook and a Julia environment.
So we're going to use the package, PKG package.
We're going to then activate, use PKG.activate to activate this project.toml file
by just passing file as an argument to the activate function there.
We're also going to use the linear algebra package that's built into Julia.
We're going to use the plots package with the plotly backend.
So you'll have to install those in this environment.
And again, the link will show you in the description, it'll show you how to do that.
And we can also use random, random module or random package that's built in.
And then also Pluto UI.
So you'll have to install Pluto UI as well.
So that's the setup.
So that is how you bring extra functionality into Julia
and how you activate this environment.
So a little bit then about what this video is all about.
Just vectors in Euclidean space.
So, you know, we use vectors quite a lot.
They're important as mathematical objects, as physical objects.
They find the uses in data structures, in engineering, physics, many other fields.
Throughout this notebook, we're going to just be concerned with these vectors in Euclidean space.
So that's the fundamental space in classical geometry, where we have the real number line.
As you can see here, if we get to points, let's get to those points.
Remember, we have the real number line.
And then we have the Cartesian plane.
That's our two real number lines orthogonal to each other with an intersection at x equals zero and y equals zero.
So all those x's are real numbers.
All the y's are real numbers.
And that gives us these, the ability to plot these points in the Cartesian plane.
If we add another orthogonal axis to that, another real number line, the z line, according to the right-hand rule,
we now have Euclidean space, three-dimensional space, etc.
So just have this point.
Now, a point requires two real numbers in these axes that you see in x-axis and y-axis.
Remember, they're both real numbers.
So we create this two-tuple.
A tuple is just a set of values, and there are two of them in this instance.
So if we want to plot a point in the Cartesian plane, we need a two-tuple.
And so there we see a point there, p3,2.
So a point, we'll use uppercase letters, and then no space, open, close parentheses, 3,2.
So that means on the first real number would be three.
So three along this, and you can see the three there at the bottom.
And then two along the second real line.
So I'm just taking two elements, one from each set of real numbers.
And that gives me this idea of R2.
And by the way, back and forth between code and the notebook and the actual topic under discussion, vectors in Euclidean space.
So let's just look at this.
So if I open that to show the code again, that'd be a markdown cell.
There we go.
So it's got to have the open and close set of quotation marks.
And how would I do that too as a number?
Well, we use LaTeX.
And all LaTeX code goes inside of a set of dollar symbols.
And there we go here at the end, this double-struck R or blackboard R to indicate a set of real numbers.
That'll be backslash mathbb for math blackboard.
And then R and then shift 6 on my keyboard for the caret symbol.
2, that means the uppercase or superscript 2.
And again, all of that is in a set of dollar symbols to indicate to the notebook that this is LaTeX code.
And that's just how you construct these.
So I'm showing you here so that I can pique your interest so that you can go look up and explore for yourself how to do this.
So there's our figure.
We're going to use the plots package for that.
And in Pluto, remember, if I have more than one line of code, I've got to wrap that into a begin and end statement.
And so I'm going to make X this array with a single value in it.
3, Y.
I'm going to assign the computer variable Y to this array with a single value 2.
Then I'm going to say plot X, Y.
And the series type is a symbol.
And symbol in Julia is always a colon, then a word.
So this will be colon scatter.
That's the scatter symbol.
Telling the plot function here that we want a single, or scatter plot at least.
And I'm giving it a title.
There's one of the arguments.
Figure 1.
So that's where the figure 1 comes.
Show access is false.
And the label is point.
So 3, 2 is going to be this point up here.
So I can just click on that point to isolate it.
Well, and anyway, here at the top, you can see I can download this as a PNG.
We can zoom in a little bit.
And then we can go back home, etc.
And that's why I love Plotly, because we have this great interactivity.
Now we've got this point on a real number line.
Now we've got this point in a plane.
But we needn't stop there, of course.
We can go to the Cartesian plane and rectangular coordinates.
There will be three elements.
And we can go up from there.
And we just denote hyperspace there as this double-struck R or blackboard R with a superscript N.
So that just means, you know, we can go beyond three-space.
So let's look at vectors as geometric objects.
So what I can do with this point is let's connect the origin to the point.
Such as that I have this little arrow.
So this would be the tail of the arrow at 0, 0.
And that will be the head of this arrow at the point.
And now this makes it a vector.
So instead of just a point, I now have a vector.
And the idea behind this vector would be that it has a magnitude, we'll see.
It's of a certain length.
And it makes a certain angle with a positive x-axis.
So there'll be an angle.
So this vector idea is a physical object.
A geometric object, at least.
It's going to be something that has a length and a direction.
But you can see clearly it comes from a point.
And I needn't have the tail yet, the origin.
Later on we'll see that the tail can be anywhere.
But if we bring it down so that the tail is at the origin here, it becomes what we call a position vector.
So it's easy to understand or intuitively understand a vector as this geometric object.
But we're more interested in vectors as mathematical objects.
So there are various ways that we can denote this, how we can write this.
Usually we'll name a vector in your textbook.
It'll usually be a boldface lowercase symbol.
So that's a boldface there, U.
So let's just open this up back to the notebook just to pique your interest.
So this is how it's done.
So this is how it's done.
It's a markdown cell.
So we see it's in the opening and closing dollar symbols.
So that's going to be LaTeX code.
And to get the boldface U would be Math BF.
So that's backslash Math BF.
So that's a keyword in LaTeX.
U that goes inside of the set of curly braces.
And then this large angle brackets, we do that with a left, backslash left, less than symbol.
And then close it with a backslash right, greater than symbol.
And that changes it to these big angle brackets and then just the 3,2 inside of there.
So it's very easy to pick up at least this type or the subset of LaTeX that's used in notebooks.
Anyway, so we can use these angle brackets to denote this vector 3,2.
So it'll go from the origin to the point 3,2 in the Cartesian plane.
We can also use this column vector notation.
And in linear algebra, you'll see a lot of this column vector.
And column vectors, we can write them with those angle brackets or the large parentheses, doesn't really matter.
And then we have the fact that we have the different axes here.
So the first one will appear at the top.
And then the second one, if we had the third one, as we can see here, here U, our vector U is an element of R3.
So we'll have X, Y, and Z.
But I told you we needn't stop there.
So just some genetic vector as an element of Rn will have components.
These are all called components.
And we write them down here as a single column vector.
Column meaning there's a single column, multiple rows.
So we spoke about this length idea of a vector.
So let's look at that magnitude of a vector.
Now it's very easy to work out the magnitude of a vector, even if I didn't tell you you would know.
Because if I have a vector like that, I can just close it off as this right-angled triangle.
And if I have a right-angled triangle, that becomes the hypotenuse.
The vector is now the hypotenuse.
And we all know how to calculate the length of the hypotenuse.
We just use the Pythagorean theorem.
So that'll be just the square root of this component, the X component, plus the square,
well, the square root of the square of these two added to each other.
So it's the square of the X component, the square of the plus the square of the Y component.
And we just take the square root of that and that gives us the hypotenuse.
So you can see again how I just constructed, used some Julia code in the plots library to construct
that little figure three there.
So what we have here, and I'm going to use both of the terminologies that we have.
This almost looks like an absolute symbol there.
So the absolute value of minus three is three.
So you can have the double lines there or the single lines.
I'm going to show, you're going to use both.
We have just used the single lines.
But clearly that's a boldface U.
So that's a vector.
And it's just the square of all the components.
And with the Pythagorean theorem, we need not just stop at the Cartesian plane.
We can go up into hyperspace.
And that means I just square all the components, add all of that, those squares,
and take the square root of that.
So let's say in Julia, we have this idea of creating a vector in Julia.
So I'm going to call my vector U.
So that's a computer variable.
And I assign something to that.
So how computer language works, remember, or Julia at least,
is this single equal sign is an assignment operator.
It assigns what is to the right to what is to its left.
So let's have a look at what is to its right.
To its right is this two values separated by a semicolon.
And it's enclosed in these square brackets.
That denotes a certain type.
And that type is an array.
And this array has two elements.
And they're separated by a semicolon.
And that really means that it's going to be like a column vector.
And we're going to use an array.
And we're going to express it or use it as a column vector.
So this thing on the right is an array.
This is one instance of an array.
So I am assigning an instance of an array to a computer variable U.
That U just denotes there's some physical space in memory.
And we're going to store this instance of this array into that computer variable,
into that space.
And you can see the return there.
It's a 64-bit integer array.
Three comma two.
And if I tore that down, you'll see the first value is three.
The second value is two.
Denoting this idea of this being a column vector.
If we use the type of function U there, we see indeed that that'll tell you,
if you pass anything to it, to the type of function,
it'll tell you what kind of Julia data type this is.
And it says, well, it's an array of 64-bit integers along axis one.
Now, axis one is the column axis.
As soon as you have rows or different columns, more than one column,
that becomes axis two.
And that'll change to a two.
And that's how you'll get a matrix or a row vector.
We'll see that later.
So just to show you that we've created this vector, this column vector,
but it is an actual fact and array.
So we can also just use the vector function, uppercase V.
Again, I'm now just going to use this, this array notation,
and I'm just going to separate things by a comma.
And that's just an alias for what we've done right up there.
Just note the difference.
But what we have is exactly the same thing.
And if we see the type of vector and then this list of elements three comma two,
that's still going to be an array of 64-bit integers along one axis one.
So let's look at our first problem then.
And so you might get this, that you have this vector in R4 with components three,
three, negative one, and two.
And we want to know what is the magnitude of that vector.
Now, first of all, you can't really visualize that vector,
because where are you going to put the fourth dimension?
But there's no problem in mathematics.
And we're just going to use the Pythagorean theorem.
Or we weigh up again here with this equation we had, equation five.
Remember, that's how to do it.
So all we're going to do, we're just going to square all those components.
And we're going to add that and take the square root of that.
And that's approximately 4.796.
That's, of course, tedious to do.
Maybe you'll have to do it in pencil and paper, pen and paper.
But of course, in Julia here, I can use the norm function.
And the norm function, because the norm of a vector is the same as the magnitude of a vector.
We use it in a slightly different context.
But anyway, I'm just passing this column vector to it.
And now remember, I'm using this notation, the square bracket notation,
where I put semicolons in between each of these values.
So the three, the three, the negative one, and the two, all the components,
I pass that as an argument to the norm function.
And when I execute that, I get the result there, 4.796 rounded off.
And that's exactly what we get there.
If you did it by hand and use the calculator or whatever.
Of course, this is Julia.
Let me just show you.
So let's just add a new little line right there.
I'm going to go to that plus symbol there.
And what is the square root of 23?
So sqrt is the function for square root.
I'm going to say 23.
I'm going to hold down shift and hit return or shift enter.
And there we go.
We see the result there.
So I really wasn't lying.
So that norm function is no matter what vector you give it or array,
then a column with column values, you're going to get, you're going to get the solution.
So we also talked about the idea of the direction a vector takes.
Now, once again, if we scroll all the way back up,
very easy to do with trigonometry because we still have right angle triangle.
And we have this length, the y length, we have the x length.
And in trigonometry, that's just the opposite and adjacent angles.
And the tangent of this angle here would be opposite divided by adjacent.
So that's as simple, really as simple as that.
So the tangent of that angle is y over x, the y component of the x component.
And if we take the inverse tangent function or the arctangent function of that, we just get the angle.
So here we have another little problem.
Calculate the direction of the vector in the first quadrant with components x equals 3 and y equals 2.
Well, very easy. I'm going to use the atan function.
Atan for inverse tangent or arctangent.
And I'm going to say 2 over 3.
And remember, you don't have a symbol on your keyboard, a divide symbol.
So we just use the forward slash 2 divided by 3.
And that gives me this solution in radians.
And if you want it in that in degrees, there's also the rad 2 deg radians 2 degrees function.
And then I pass this, again, this calculation, atan of 2 over 3 to it.
And I see it's about 33.69 degrees.
Very simple to do.
Let's do another problem.
Calculate the direction of the vector in the second quadrant of the plane.
So components x equals negative 3 and y equals 2.
So now what happens is we're interested in the angle between the positive x-axis
and this vector pointing towards the point from the origin to the point negative 3 comma 2.
So we're going to have this obtuse angle.
We're always going to go from the positive x-axis counterclockwise.
That's what we're interested in in quadrants 1 and 2.
But we see we get this result negative 0.58.
So what that is telling us, what that result is showing us,
if we just think about the inverse tangent function, is that's going to give us the angle
angle going in a clockwise direction from the negative x-axis up to our vector.
And to get the expression that we really want,
we really want, we've just got to add pi radiance to that.
And that's going to give us the other side, in other words,
from the positive x-axis all the way around counterclockwise to the vector.
So we get the real solution there, 2.55 radiance.
Now we're going to get to quadrants 3 and 4. Now there we express things differently.
So in quadrants 1 and 2, we want this idea of going counterclockwise from the positive
x-axis. So we're going to get this acute angle in quadrant 1 and this obtuse angle in quadrant 2.
But if we get to quadrant 3 and 4, what we actually want to do there is still go from
the positive x-axis but go downwards clockwise to the vector. And then, because it's clockwise,
we want that expressed as negative angles. So in the fourth quadrant, it'll be this negative
acute angle. And in the third quadrant, it's this negative obtuse angle. So let's just see.
So we've got this idea of, where were we? We've got this calculate the direction of the vector in
the third quadrant of the plane with components x equals negative 3 and y equals negative 2. So if
we do that, we get this solution 0.58. But what that is going to do, that's again, that is from the
negative x-axis going counterclockwise. And that's not what we want. We want from the positive x-axis going
downwards clockwise to that. So what do we have to do? We've got to add that to negative pi radiance.
And I've shown you pi there all along. Let me just show you how nice it is to get a pi symbol and code.
That's something you can't do in many other languages. I'm going to just hit in a code cell
my backslash and then pi and then the tab symbol. And that should give me pi. And there we go,
pi. And if I just do that, it's going to give me an approximation for the value of pi. So that's as
simple as that to get pi. And if I go just there, I can just delete that cell. So it's negative pi plus
that arctangent. And then we're going to get the real solution, negative 2.55 radiance. That's going
from the positive x-axis counterclockwise. So clockwise, I should say, downwards this obtuse angle.
And then when we get to the fourth quadrant, say x equals 3, y equals negative 2, we get this value
that we're interested in. This negative acute angle. Positive x-axis downwards clockwise to that.
So the only place that we need to make changes is in the second and third quadrants.
So using the arctangent function. So in the second quadrant, we're going to add pi to the solution.
And in the third quadrant, we're going to add negative pi to it. So if you remember that,
you're never going to make a mistake in calculating the correct angles or expressing them correctly.
So when are vectors equal? So we see these two vectors there. Now, I think you would agree just
looking at it, and that is how I designed them. They're pointing in the same direction and they have
the same magnitude. In vectors for us, looking from a linear algebra point of view, those are exactly
the same thing. So I can have this translation in space or on the plane, but it remains the same
vector. I can move that so the tail of the bottom one, the purple one, the vector 2 is also at the
origin. And then those two points, the two heads will coincide and we have exactly the same vector.
So vectors, no matter where I draw them on the plane, if they have the same magnitude and same
direction, they're exactly the same thing. Nothing changes. And you see my little argument there.
So that p, I've got the two, the vector p, the point p and the point q. So p would be at 0,
0 and q would be at 3, 2. So that would be this 0, 0 there and 3, 2.
Okay, if I look at the vector pq, that'll be just q1 minus q2 and q1 minus p1 and q2 minus p2.
And that gives us this 3, 2 because it's 3 minus 0 and 2 minus 0.
And if I have this point p prime and q prime, p prime sub 1 being negative 1, p prime sub 2 being
negative 1. And you see the values there for q prime, the two points. But if I do the subtraction
once again, I also end up at 3 comma 2. So really pq equals p prime q prime. But you can,
you can see that so intuitively there. Same direction, same magnitude is exactly the same vector.
That brings us just to this idea of row vectors. So we express them as a column. And mathematical,
and we do some calculations in future notebooks, if we get the row vectors become quite important as
well. And we can take a column vector and we have this, this operation called the transpose.
So you just make the column into a row. So every column component becomes an element in the row
component. So remember u, there was u. And it was 3 comma 2. I can twirl it down. It's 3 comma 2.
And now you use the transpose on that. And now it becomes this 64-bit integers in an array. So it's
an array of 64-bit integers expressed in this way, 3, 2. And so instead of it being a column there,
you see it's now a row. And this is how you do it. There's equation 8 makes, should make it all clear.
I have this vector u and r in space, u1, u2, all the way to un. And I take the transpose of that. So
that'd be u and then this superscript uppercase t. And every element there in the column becomes an
element in the row. So as simple as that, u transpose. And that becomes a useful thing to do.
Now let's look at a bit of vector arithmetic. Very important. So we're going to start by looking at
vector addition. And we see how we have, how we define vector addition. This is how we define it.
And it's very intuitive as well from, from figure number 5. So I've got my two vectors here. This one
at the bottom, this red one. And then this purple one here. And all I'm doing, this purple one was also
expressed as a position vector. So its tail was also down here and its head was, was somewhere here.
But we just move it so that its tail is at the head of the first vector. And then if we add them,
it's just adding the x components of the two and adding the y components of the two to get this top
one, this resultant vector. So if you look at equation 9 there, we just add the two components,
u1 and v1, u2 and v2, all the way down. So for all, so this upside down a, that means for all,
we just show you the light tick for that. That's all the light tick there. If you get your hands
on the notebook, you can study that. So we're just adding these components, as you can see. So for all
u and v elements of rn, it follows that u plus v is that. We're just adding the components in, and from
this figure it should make intuitive sense. So we are tasked in problem six with creating two random
vectors in r4, and we're going to add them. So in the random package, there's this idea of this
function random dot seed exclamation mark, that exclamation mark is called a bang. And you can
pass to that any integer, I'm passing 12 to it. So if I execute that, and then I use the random
package to generate random values, well they pseudo, pseudo random values, it's going to generate the
same values every time because I've seeded the pseudo random number generator. So what are we going to
do rand function there from the rand package? We use a unit range 1 colon 5. And because we don't
have a step size, the default step size of this unit range is 1. So from 1 to 5, it will have elements
1, 2, 3, 4, 5. So I'm saying take from the elements 1, 2, 3, 4, 5, and give me 4 back at random,
please. So what happens is 1, 2, 3, 4, and 5 is in a bucket, piece of papers, you know, 5 pieces of paper,
and I draw a piece of paper, and the first one was a 5. So I jotted down, throw the 5 back, mix them up
again, draw at random again. So every time each of those 5 values has an equal option, likely to have
been chosen. So what it came up with was 5, 4, 2, 4. And if you seeded the pseudo random number generator
with 12 as well, you're going to get exactly the same random values. I've created another vector, vector
underscore 2. And again, just from the random random function, again, with the same unit range,
four values, and it gave me vector 1, 5, 4, 3. And I just say vector 1 plus vector 2. And indeed,
5 is the 5, the first component. There we go, the 5 plus the 1, that's the 6. That's how I get with
this, the 6, the 4, the 5 is 9, etc. Very simple. But if you do that in code, it's even simpler.
Vector underscore 1 plus vector underscore 2 is going to give you that column vector. Very simple.
Scalar vector multiplication is just as simple. So we're going to take this scalar,
c, element of a real number, and u, that's an element of any arbitrary vector, then in space.
It follows that cu equals just multiplying every component by that scalar. And that scalar vector
multiplication is as simple as that. So problem 7, multiply vector 1 by 3. That'll just be 3 times
vector 1. As simple as that. And each element in vector 1 is now just multiplied by, by 3. What does
that do though? So one reason to like this, these Pluto notebooks is that you have the Pluto UI package
that we imported. And that allows us to create this variable c here. And we're going to use the macro
at bind. And we're going to bind to see this slider. And the slider uses a unit range from negative 2 to
2. As I said, we don't have a step size. So the step size by default is 1. So negative 2, negative 1,
0, 1, 0, 1, and 2. So this slider is going to be linked to that, to those values. So what I've done
here at the bottom is I've created this vector 2, 2, but I'm multiplying each one of them by c.
So what I'm doing here is this, this vector 2, 2, and all we're doing to this vector, we're scaling it.
So that will be negative 2 times the vector 2, 2. And that will be negative 1. Now it gets a bit
shorter. 0, there's no vector. Because if I 0 times 2 is 0, 0 times 2 is 0. 1, there's my original vector.
And it scales. So what does scalar vector multiplication do? Well, it just scales a vector,
makes it shorter and longer. It doesn't change the direction. And in as much as the line that runs
through that, it can go in the 180 degrees or pi radians opposite direction by making the scalar
negative for sure. But it stays in that same, stays in that same line.
So we can also then think of what it does to the magnitude. So the magnitude of this scalar vector
multiplication is just take that vector and just multiply it by the scalar, the magnitude of that
vector multiplied by the scalar. As simple as that. And that gives us this idea of how to subtract
vectors from each other. Because what I can do is I can just multiply the second vector by negative 1,
the scalar negative 1. Now it points in the opposite direction. So instead of a plus
v, I have a plus negative v. And that's the same as, or u plus negative v, that'd be the same as
u minus v. Exactly the same thing. u minus v is just u plus scalar vector multiplication that
n negative 1 times v. And that also gives us this sort of scalar vector division in as much as, as long
as that scalar is not zero, I can have this idea of dividing a vector by a scalar. And it's just this
reciprocal 1 over the scalar times u. So every element will just be multiplied by 1 over that scalar.
So that's very simple. Vector addition, that's basically all we have because vector subtraction
is still vector addition by adding a bit of scalar vector multiplication and just making that scalar
negative 1. So when you have these two operations basically, vector addition and scalar vector
multiplication. Now we get to something a bit different and that's the dot product between two
vectors. And you'll have to do a lot of examples, I think, in your exams, et cetera, of dot products.
And the other one is a cross product. So let's start with a dot product. And we see the definition
here in equation 14. So for all vectors u and v element and r n, so you can take any two vectors
in that space. As far as that u dot v, we write that as the u transpose dot v. And what that really is,
and when we get to matrices we'll see what that really means, is that we just multiply the components
pair by pair and we just add all of those. So u1 times v1 plus u2 times v2 plus. So you can see the
answer is going to be a scalar. So let's look at problem 8. Um, so we asked to generate two vectors
in r4 and calculate the dot product. So again, I'm going to see the pseudo random number generator.
I'm going to use the rand function twice and just generate these four. Now I've just said one to five,
but you can choose any unit range you want so that you don't just get elements between one and five.
You can make negative five to five, whatever you want. But four elements, that's important. So I've
got my two vectors again and because the pseudo random random number generator was was seeded with
a value 12, we get exactly the same two vectors as before. And then to do the dot product
is very simple in as much as we use the dot function dot function. And then we just put in
these two vectors separated by a comma and we get the answer 45. And here we go, I'm just going to show
you there's my two column vectors that we generated up there. So it's five times one plus four times
five plus two times four plus four times three. That's five plus 20 plus eight plus 12 and that gives
us 45 and there's the dot products 45. No problem. So what about the dot product of a vector with itself?
So we read here the dot product has some interesting properties. First, the dot product of a vector with
itself is always positive or it can be zero. So I'm talking U dot U. Now it's always positive because
what we're doing is component times component. In other words, that's component square if the vector
is dotted with itself and squares always positive. So we're just going to get a positive and the only way
that we can get zero is if it's the zero vector. And lo and behold, the zero vector of course does
exist. All the elements are just zero. So if we look at U dot U there and if the vector is three
comma four comma negative three and problem eight, it's three squared plus four squared plus negative
three squared and that gives us 34. And again, if I do that with a dot product, I'm going to get
the same answer 34 as simple as that.
So in actual fact, what we're doing here is just taking the dot product is nothing other
than just taking the magnitude of the vector and squaring it. As simple as that.
Another interesting fact that we'll see here is if the two vectors are orthogonal,
which is a fancy word for perpendicular to each other, their dot product will always be zero.
Or then if you do the dot product between two non-zero vectors and it turns out to be zero,
you know that those two vectors are orthogonal to each other. And you can see the code there.
So let's take these two, they're clearly orthogonal, three and five and negative five
and three. And if you take the dot product between those, it's zero.
Now there's three more properties that you'll see in your textbook is that there's this commutative
property and vector and the dot product between two vectors. We have this distribution over addition.
So U dot V plus W, that should be U dot V plus U dot W. And this distribution of the scalar as well,
as you can see there. So let's look at the dot product a bit differently, because what is it? I mean,
we're just multiplying the component wise and adding all the products, but what is it?
And the first way we're going to look at it is just this, the dot product is a function of the
angle between two vectors. And what we're going to do is we're going to use this, the law of cosines.
So if I have two sides of a triangle, A and B, and the angle between them being theta, and then
opposite theta, we'll get the other side of the triangle, we'll call that C. And then we get this
idea of the law of cosines that C squared equals A squared plus B squared minus 2BC cosine theta.
Now think about a triangle. Let's make A, the length of A. Let's make A a vector and B a vector,
and C a vector. And if A is a vector, its length is going to be the magnitude of A, and the length of
the side B is going to be the magnitude of the vector B, and then C. And I want you to play with
that. C would be A minus B. So draw yourself on paper some vectors and look at A minus B. So that's
A plus negative B. And translate that vector and you'll see it neatly forms that third side of the
triangle. So to write this out, C would then be, C squared would be A minus B, that magnitude of that
difference squared. A squared would be the magnitude of A squared. B would be the magnitude of B squared
minus 2BC. So there should be BC there. So let's fix that. So that's minus 2. Oh, AB is right.
And up there should be AB. There we go. Minus 2. AB. Here we go. Fixed. C squared equals A squared plus B
squared minus 2AB cosine theta. And that's what we have there. But let's look at what in equation 9 what
A minus B is. Remember that will be component wise subtraction A1 minus B1 and A2 minus B2 as a vector.
And if we take the magnitude of this A minus B, which is C, there'll be A1 minus B1 squared plus A2
minus B2 squared and add that and take the square root of all of that. And if we square both sides,
that's what we have. And if on the right hand side, we just expand these two squares, that's what we get.
And we just group these terms together. Then we get A1 squared plus A2 squared.
Well, that's the magnitude of A squared. B sub 1 squared plus B sub 2 squared. Well,
that's the magnitude of B squared. And minus 2 times A1B1 plus A2B2. Well, what is that? Well,
that's A dot B. So this is what we have left. So now A minus B magnitude squared, we have two equations
for it. There's 1 in 18 and there's 2 in number 2 and 19. So we just equate these two to each other
so that these magnitude squares, they all cancel out. The negative 2s cancel out. And I have this
new way to look at the dot product. The dot product is the magnitude of A times the magnitude of B
times the cosine of the angle between them. Or we can just take the arc cosine. Well,
take the magnitude towards the other side and take the arc cosine or inverse cosine function.
And that gives me theta. So let's just do that. Calculate the angle between these two vectors.
So that's very simple. And you can see the code for it there using the arc
ACOS for arc cosine or inverse cosine function. I'm taking the dot product of those two vectors
and dividing it by the product of the two magnitudes using the norm function. And again,
I can express this as radians 2 degrees with that function. And that gives us 38 degrees.
As simple as that. The Cauchy-Schwarz inequality. You see that there. You might be asked to do that.
And there's a little problem for you there using the dot product. And we also get this Minkowski
triangle inequality, which you see there. Now, I don't do any proofs in this video set, but let me know if
you want a video on how to do the proofs of these. They're actually quite fun to do. But you can see
that we have this little problem 11 then. The solution just taking the norm of the addition
and then the addition of the norms there. And you'll see, of course, that one is smaller than the other.
I skip over those quite quickly because what I want to get to really is this idea of orthogonal
projections, because that's really what a dot product is. Remember, we're getting a scalar out.
So let's look at these two. I have vector W in this image here. And vector A there. And I can take this
idea of the orthogonal component of W along A. So from W, I draw this line down to A, and it's
orthogonal to A, so that I can decompose W into two components, so that the one component
is along A and the other component is, of course, orthogonal to A. So what the dot product really
is and what we're going to see is really the multiplication of the component of W along A,
called the projection of W along A, and multiplied by A. And let me let the cat out the bag. If you
think of physics, work equals force times distance, but it's only the component of the force along the
displacement, force times displacement, but only the component of the force along the displacement
contributes to the work. And now you can think why if I have two orthogonal vectors that their dot
product is zero. Because if my force is totally orthogonal to the displacement, that force is doing
no work whatsoever, because there's no component of that force along the displacement vector.
Anyway, if you have a PNG file saved on your hard drive, you can use this local resource function.
And that local resource function is, of course, a function in the plot Pluto UI package. And you
can just reference it where it is on your hard drive, and it'll draw the figure for you, the PNG file for
you there. So that is the derivation of this idea of the projection of W along A.
So W, if you think of W, I can deconstruct it into U plus V. In other words, U is W minus V. Just a bit
of simple algebra. So U, remember, we're going to, that is the projection of W along A, and that's how we
write it P-R-O-J of W along A. So the little subscript A there. That is U. It's a different notation for
you. So that's W minus V. But if you think of what U is, it's now along A. So it's just a scalar
multiple of A. So we can write it as K times A. And that K times A there, remember that K is just a scalar.
So now that we have another way to write W, another way to write U, I should say, we started with
W equals U plus K. So we can rewrite W equals KA plus V. So what are we going to do if we have W
dot A? That's what we're interested in here. Well, I have W written differently here.
KA, K times A plus V dot A. So it's just rewriting W because we've got another way to write W there.
And if I do this, we've looked at those properties, that will be K times A dot A plus V dot A.
Look back at those properties. And A dot A, remember that's the square of the magnitude. So I have K
times the square of the magnitude of A plus VA. But V and A, they're orthogonal to each other,
if you look at the image. So that's zero. So just solving for K, I have K equals W dot A
divided by the magnitude square of A. So we have what K is. Now we can just put K back into what we have
here. U equals K times A. So U being the projection of W along A, that is the dot product of W and A
divided by the magnitude of A squared times A. So W dot A, that is going to give us a dot product
and that is a scalar divided by magnitude that's a scalar. So we have this big scalar
times A. And that's exactly what U is. It's this scaled version of A.
Now we can also work out this idea of the magnitude of the projections. So we just take the projection
here of U. And so that will be, we can also put double lines there, which means we can take this A
out as, on the right hand side here, as a magnitude. And we have a magnitude over magnitude squared,
so that's going to cancel. So this length of this component, this length of this component of W
long A, or the length of U, we see there as the absolute value of that dot product divided by A's
magnitude. And that's exactly where we get this idea of work equals force times difference, times
the displacement, those vectors. So it's this idea of W, if W was the force and A is the displacement,
it's this idea here. I'm just bringing the A over to the other side of the projection. So you get this
idea of what the dot product is used for. So instead of the dot product, we also get the cross product,
but first we just have to look at the unit vectors. And that's just taking a vector and scaling it down
so that its magnitude is 1. And the way that we do that is we just take a vector and we divide it by,
and we've already seen this, 1 over C times a vector. So it's a type of scalar
vector multiplication. But at the bottom we have the magnitude of U. So each component is just going
to be divided by the magnitude. And then we put this little hat symbol on top of it and it's no
longer boldface, and that's the unit vector of U. So it's still in the same direction as U, it just
has now, it has a magnitude of 1. So there's problem 12. I have U and that is 3, 4 and 0.
And I just want the magnitude of that. So I'll take the norm of that. So I've created the vector
underscore U there, take the norm of that, the norm is 5. And so I'm going to take vector U and
divide it by 5. So each component is going to be divided by 5. And then I get 0.6, 0.8 and 0.
So that's still in the same direction. It is just now has a unit length. So its magnitude is 1. Of
course, if we think of the three axes of Cartesian space, or the Cartesian plane then with this two
component, we have this unit vectors along each of the axes. And we call those the unit basis vectors.
And we write those as i hat, j hat, and k hat. And you can see the components there
making absolute sense. Because we have now this idea of the cross product.
So what happens with a cross product is a cross product is orthogonal to the plane created by
the two vectors that you're taking the cross product on. So if the two cross products are in
the plane, the result will be perpendicular to the plane. So I need that to have that third
dimension. And it's also the right hand rule and your thumb points in the direction. We write it as
u cross v as you can see there. And we do that by taking the determinant of this matrix here. But we
haven't studied matrices so I can't really explain to you what's going on there. Just trust me then that
if you take the determinant of this matrix and you write on the first row the three unit basis vectors
and as a as row vectors you write the two others. Now you have a little three by three matrix. You take
the determinant of that and that is just going to give you the cross product. We can also very easy in
Julia just use the cross function create my two vectors and the cross function cross with that would be
now look at this my vectors were along
two comma zero two two comma one comma zero. So I've got to express even though those vectors are on
the plane I've got to express them as as vectors in three space in R3
because my result is going to be in R3. So I have these two vectors on the in the plane but look at the
cross product it will have zero zero in the xy plane their components but negative five in the z
component. So it is going to be orthogonal to the plane. So what's the physical interpretation even
though we can't yet explain exactly what's going on here before we've looked at matrices is that if I
have these two vectors now look at this vector down the bottom here and this red vector going there and
all I've done is I've completed them by translation so that I can form this parallelogram.
So this parallelogram has an area and the base of it is well there's the point three so it has a base
of three and a height of two so it's base times perpendicular height three times two is six. The
area of this parallelogram formed by these two vectors these two position vectors the red one here
and the brown one down here they form a parallelogram if we extend it and translate the two of them and
the area of that well that's the cross product. We said it was six and lo and behold if you take the
cross product of those two vectors three and zero and five and two you get the um the norm of that
magnitude the norm of that vector that would just be six its length is six and that magnitude at least is
the area of this parallelogram. The magnitude of the cross product. Then we get this thing called the
scalar triple product. So I'm going to take first the cross product between the two vectors and that
resultant orthogonal vector to those two vectors. I dot that with u and then I get the scalar triple
product and this is how we do it the determinant of the three vectors written here as row vectors and
if I get that determinant that's going to give me the scalar triple product and what that really is is
those three vectors if they all position vectors they form a parallelepiped and this this scalar triple
product which is a scalar gives me the volume of that parallelepiped. Which brings us to this last idea
of spanning. Now if I think of the vectors the unit vectors basis unit vectors i hat and j hat a linear
combination of them and this is a linear combination is that i just take a vector and i multiply it by a
scalar and another vector multiplied by scale and i add that that i can get to any vector or any point
in the plane. So a scalar multiple a scalar um a linear combination of vectors so i take one comma zero
that's the unit vector along the x-axis and i multiply it by some value say three that ends me up at
three comma zero and i add to that three times the unit vector on the on the y-axis which is zero one
that gives me say i multiply that by five so that becomes zero five and zero five and three zero leaves
me at three five so i can get to the vector three five so i can get to anywhere with these two basis
vectors vectors and what we say about them is they span the whole of r2 those two vectors span because
the linear combination of them can get to any vector in the plane so if i use i j and k so zero one zero zero zero
zero one zero and zero zero one as my three standard basis vectors in r3 a linear combination of them
can get to a vector anywhere in space in three space anywhere those three vectors span the space
alternatively we say they are a basis for that space and it's because they are linearly independent
and when our vectors linearly independent well we can test for that and that's in a future notebook
is that one cannot be written as a linear combination of the other there's no way with a with a vector i hat
to get a linear combination of it in other words multiplying it by a scalar adding another multiple
of it to it and another multiple it i can never get to one zero there's just no way i can never get
away from the x-axis if i just have one zero in other words these two vectors are linearly independent of
each other and if they linearly independent of each other then they form this basis of they are a basis of
that space and we'll review all of that because it becomes very important
this notebook is all about the intuition that somehow that they that you can develop this idea in your
head that they span a space because a linear combination of them can reach anywhere in that space
so three things you've learned here first of all is the idea behind this as vectors in euclidean space
then how to use a notebook to generate your notes so that they look very nice and then how to just use
julia code to do all your your work for you so you might have to do it in pen and paper but you can
just always just verify your work with a single line of code and having your notes as neat as this
being able to visualize it and check your results with some code i think that's a very neat way of
understanding your mathematics and doing your mathematics
