This is our first lecture. We're going to take a closer look at Python, the coding environment
that we're going to use, and we're going to see a small project, a data science project.
This is a Google Colab notebook. As you can see, it's very well organized. On the left-hand side,
we have our table of contents, and we have a document that we can scroll down. This is a
Colab notebook, and it lives inside of my Google Drive, just as any Google Doc or any Google Sheet.
And so we see, if I highlight these, there seems to be these little cells, and that's exactly what
they are, and we're going to get to those. And inside of these cells, as you can see, I can put
titles, some bullet points there, nice little image there, very neatly written. It looks almost like a
Google Doc, but when we scroll down, we'll see that there's also some code in there. So before we start
off looking at Python, though, just a little word on data science. What data science is all about is
this idea of getting into the information that is hidden in data. We really generate so much data
these days. We truly live in information age, and what we have is we have access to hardware and software
that gives us this ability to find that knowledge that is hidden inside of our data.
Now, Python has become the leading language as far as data science is concerned, and really many leading
universities have campus-wide courses on data science using Python, and that's exactly what we're aiming
for here as well. So data science is really a science that brings together this array of approaches
to using data. And that's all about the generation of data, the capturing of data, the storage of that
data, verification of that data, manipulation of that data so that we can get to the story,
and then even statistics and modern storytelling, storytelling with that data through visualization
and modern algorithms such as machine learning algorithms. And we bring all of that together
in data science. And fortunately for us, data science has many common techniques. So it doesn't really
matter what real-world situation you use it in, or on what kind of faculty or department that you're
using, and whether you use it for astronomy, cosmology, physics, biology. And you see a long list,
the healthcare, economics, politics, engineering, it really doesn't matter. We can apply access to this
information inside of data. We can do that through data science. The only barrier to entry these days
though really is an access to the internet because this course was run in the Google Drive. So you
don't have to install anything on your local system. It all runs free of charge in the Google Cloud.
And what we really have then is this idea of putting our voices together to say that access to the
internet really has become a basic human right and all governments must work, I think, towards
towards that because it is this freedom of access of information and the knowledge inside that
information that really can solve so many problems. Poverty, hunger, climate change, illness,
and many of our current and future challenges we can just solve this way. Solve the problems of our
species, as Carl Sagan said, on a moat of dust suspended in a sunbeam. So really, really, if you think
about it, very powerful and exciting stuff. Now, the tools of data science is, of course, is a computer
language and the language that we've chosen here is Python, but there are many others. The Wolfram
language are Julia. There really is just that embarrassment of choices. Python has taken the lead
though because it is a very powerful language. It's very easy to learn and to understand and many
contributors throughout the world just give their time, mostly free of charge, just to expand
the language. And that's made it very, very powerful. Python's quite old. It was created by Guido
van Rossum way back in the 1980s and is really of late, say, in the last decade, probably because of
its use in data science that has become so popular. And as I've mentioned, we expand the language by the
idea of packages, modules, and libraries that we can import into the language to expand the capabilities of
the language. Now, to write the language, we need a coding environment, some program in which we can
write the code. If you want to write a letter, use Microsoft Word or Google Docs, you need software
to write something in. And the same goes for computer language, and that's called an IDE. In most cases,
an integrated development environment. So what we do with Google Colab, though, is we use the web browser
as a development environment. We can code right inside of a web browser. You can really install
Python on your local system and code inside of Python on your browser, on your system, or you can
log into your Google Drive and, of course, do it all online as we're going to do here.
So Google Colab. Now, Google Colab is built on something called the Jupyter Notebook, this idea of
a notebook environment. And what you can see here really is a notebook. And as much as if we do some
data science or some research, we can write normal English sentences as in a Word document, as you can
see here. But you can also write code and look at the results of the analysis of that code. So what you
have to do is you have to sign up for Google Drive. If you've got access to a Gmail account, of course, you
have access to a Google Drive. And you can always just click on New. And then a little drop down list is
going to appear. You can add a new folder, but of course, a new Google Doc, a new Google Sheet.
You might not immediately see a Google Colab there under the More section. You might have to go to
this little website here, colab.research.google.com. And if you open that, it'll open Google Colab for
you. And the next time you open your Google Drive, Google Colab will be there for you. So let's have a
little look at Google Colab. What is under the hood? Well, you've already seen these nice sentences.
I can just write them. And what I'm going to do, I'll highlight this one. And you can see it gets
highlighted. I'm going to double click on it. And there you can see it's a cell. And there's all the
text that I typed in, no problem. And I also get the ability to format my text just as in a word
processor. So I can do bold, italics, underline. I can put in a link. I can put in an image. I can
put in bullet points or numbered lists. All sorts of things I can do. And then on the right hand side,
you'll see I can move a cell up or down. I can comment on a cell just like you can do with Google
Docs. You can delete that. But you can also run the cell. And the way to run that is to hold down
shift and hit enter or return. And then that cell gets what we call it gets executed. Now this is
just normal English text. So there's really nothing to execute. And what we see here is of course is a
code cell. Now if I hover just between two code cells there or two cells there, you see the plus
code and plus text. Now that allows me to add a new cell in between these two. So if I click a text
cell, it is now a text cell and I can write my text there. So let's delete that. Or if I click on
code, just hover in between the two. If I code and now I have a cell that can enter code. And it's as
simple as that. Just those two things. And what we can see here is just some Python code. Very simple
code. Don't worry about it now. And you can see what's generated here at the bottom. So as the Google
Colab notebook stands at the moment, it is just serving up to my web browser, but it's not really
connected to any Python back end. And what we have to do is just click on that little connect button
there. And once we click on that connect button, it's going to spin up an instance for us way up in
the Google Cloud so that we can use Python right inside of our browser. Our browser speaks to Google.
The code gets run on Google's side and we just see the results of it on our side. Of course,
everything here is saved. So next time that I open this notebook, everything is still going to be
here. So now I can run this. So I've already told you about shift and enter or shift and return. But
there's also this little play button there. So if I click on that play button, see the little spinning
starts. That means my code is sent to Google. It gets analyzed and the results get sent back to me. And
all we've done there is created a little spreadsheet file. You can see there group A, group B,
and you can see some statistics there. How many samples there were, the mean, the standard deviation,
the minimum. And we see our quantiles there and the maximum. And I can simply say something like
df.boxplot. And I'm going to get a box and whisker plot of my code, of the data that we have there.
It really is that simple. We just write lines of code. And of course, in between, we can just put normal
English sentences. So if I generated this plot and I want to show my collaborators or talk about it a
little bit, I can either just add a comment or just write a code, a text cell, just with some normal
language in there. So very, very, very useful. So let me open this little cell here and you can see
there's some markdown in here. Now markdown is a very simplified computer language. I want to call it
a computer language, not really a computer language. It just formats and under certain circumstances,
if you have the right application open, you can format it with this language. So you can see there
in front of this word italics there, I've put an underscore and just after an underscore and that's
going to turn that word into italics. And of course, I can also do it with these little buttons,
but using markdown, if you get used to it, it's actually quite quick and easy to do.
Here you see I've used double underscores before and after the bold and that turns that word bold.
So if I hold down shift and return, shift and enter, you can see the italics there in my normal English
sentence and the bold there. Very easy. Now, if you in certain scientific programs, you'll know about
LaTeX, LaTeX, or TeX is really a language that allows us to do some mathematical typesetting.
And you can see here in equation one, you can see here the normal distribution. So how did I do that?
Very neatly written, if you can see, and printed out to the screen. Let's click on this little cell
and double click on it. And what we do is we have two little dollar symbols there
and opening and closing little two little dollar symbols. And what goes inside of it is some tick
or LaTeX and that allows for the creation of this nice little mathematical
equation that we can see there. So don't worry, we're not interested in those equations at the moment.
It's just about showing you what the notebook really can do. Which reminds me, if we go right
up to the top, you see our little logo there. So that little logo, there's the line of code. If I double
click on it, that's the little line of code. And that's just some HTML code that I popped in there.
Now this image is saved on my Google Drive. I'd simply got an open link to it. And I copy and pasted
that link. And I just made a tiny little change to the code. You've got to insert that little bit.
And you can display some images right inside of your Colab notebook as well. So if you have a static
image that you want to import. So if we have a look around the Google,
this Google Colab though, here on the left hand side, we see a table of contents. There's actually
four little icons. There's a search icon as well. Then there's this little code snippet. Now that's
very nice. So Google was very kindly put a few code snippets there. So let's say I want to import
directly from a Google Sheet. If I click on that, there's the code to do it. And in an empty cell,
you can just hit insert and that's going to insert that code for us. Very neat indeed. And then of
course, there is just a little explorer there. So you can see what is inside this folder at the moment.
I like to keep the table of contents open because I can just click on it. So how is this, you know,
how's this formatted? How does the Colab notebook know what goes inside here? Well, that just depends
on what I do with these cells. So you can see that's normal text in this cell, but this cell,
data science, survey example, that's quite a large text. And if I double click on that,
that's how it's done. So this is also part of a bit of formatting. And you get a single hashtag,
pound symbol like that. That's the largest text. Two is slightly smaller, three, four, five, six. You
can go up to six. That'll be the smallest sub, sub, sub, sub, sub, sub, subtitle if you want to do
that. So two would be the second largest. And you've got to put a little spacing between the two hashtag
or pound symbols and the first letter. And that's going to do that for us. And what the table of
content is going to do is just going to pick up on all of those things that are larger than just a
single, you know, just normal text. If I go in there, you'll see there's no pound symbol in front of it.
By the way, that's how you can also, that little double T's there. If I click on that,
it's just going to add one, two, three, four. It's going to add those little symbols for us,
but we're not interested in that. So that's simply how you do that. Well, let's just take that away.
We don't want that to be a title. Most definitely that's just a normal paragraph.
So what else can we see here? On the top here, we can see our normal
file. So you can locate in Drive, a new notebook, open a notebook, upload a notebook, all the normal
things, edit, copy and pasting, some view there, insert, insert a new column. Almost never use those
because we can just control what we have to do right here while we're working with the cells.
Runtime. Sometimes we would use runtime. The change runtime type is most important.
In a course where we use deep neural networks, machine learning or AI,
we also have access to a GPU, a graphics processing unit, and that allows us to execute our code much
faster. But we're not going to be using that in this course, just on data science. On the top right
there, there's also a little comment there. So if I'm in a cell, I can leave a little comment.
So if we share this document with each other, we can see those comments as we would do in Google,
in normal Google Docs. Of course, we can share that as well.
So let's do this little data science survey example. So this is a survey data that's available
on the internet. You can download it yourself, get access to that through a website called Kaggle.
Now, if you get into machine learning, a Kaggle website becomes very important in your life.
Other than running competitions, and which the competition is really fierce, and there's some
very big prize money put up by companies that want this problem solved using AI, there's also a lot of
data. Now, once a year, Kaggle sends out a survey to people who use Kaggle, and most commonly,
those will be data scientists. And they answer these questions, and at the end of every year,
there's this massive amount of data as far as all these data scientists are concerned. So we've downloaded
that set of data, and we're going to use that in just this little example of what is possible
when using Python for your data science. So I don't want you to be too concerned about the code here,
just show you, you know, what is possible. And by the end of this course, of course, you'll be able
to do all of this. Now, as I mentioned, there are many packages that allow us to expand what
Python can do. And what we do in this first cell, we import one of those. It's called SciPy. As you can
see, they're SciPy. And it has many modules, and one of its modules is the Stats module. So I'm going to
write the code from SciPy import Stats. And that's going to make all the functionality that's inside
of Stats available to me, which would not be available in just core Python or base Python,
but it's certainly now going to make that available for me. Now, there are many packages in Python that
allow us to create beautiful plots and graphs. And one that I particularly like to use is called Plotly,
because that gives us interactive plotting. And we'll see what that is all about. Now, this next
little cell here, it says percentage load underscore EXT, I should say. Now, that percentage marks that
keyword as a magic command. And we'll see one or two magic commands. This one is very specific to
Google Colab. So if I was running a Jupyter notebook on my local system, I certainly won't use something
like this. And all this magic command is going to do. It just renders tables very neatly to the screen.
So I always like to use that when I use Google Colab. And then there's a little function called
Drive inside of the google.colab package. And we're certainly going to do that because our dataset is
also saved on this Google Drive. Now, because of security, of course, we don't want anyone to have
access to all of our work. So you have to give this notebook special permission to access data on your
Google Drive. And that's what we do here. Now, what I'm going to do is I'm going to run this, which will
then mount my drive. And it is going to ask me to authenticate myself as a user. So a new tab is going to
open up and I'll have to sign in with my credentials, give this notebook access to my drive. A little
key will come up and which I have to copy and paste into this notebook. And for security reasons,
I'm just going to do this and you'll just see what the results are.
As you can see there, a little popup there, I can click on that, which will now take me to logging in
again to my Google Drive, giving it permission, giving me an authorization key, which I'll copy
and paste into that cell. And there we are. The drive is now mounted. And what I can do is use one
of those little magic commands again, %cd, and that will change the directory just as you have on your
computer where you can go through your directory or folder structure through some explorer or finder.
We can do the same. And in this instance, here's the address on this Google Drive of mine,
where the data is located. And what I'm doing is I'm changing directory to that data. So that's
what that cell does. And inside of this whole folder structure, that's where my data is. And the data
is a CSV file. Now we're going to talk about CSV file, comma, separated values files.
That's just a spreadsheet file. That's the name of it. And I'm going to import it so that it's now
inside of this notebook and I have access to it. Now I'm just going to delete some of the columns
because we certainly don't need them. And what we usually then do is just print a couple of rows
to the screen. And this is what the data looks like. You can see very much a spreadsheet that I have
imported. And because I used that original magic command, it prints very nicely to the screen.
Now, very importantly, we always want to know how big our dataset is. And there's a little attribute
called the shape attribute. And it shows me there that I've got 20,000 and 36 rows of data. So
20 more than 20,000 people data scientists from all over the world responded to this latest
survey. And the 355 were 355 columns inside of the spreadsheet. So let's just have a look,
little look at this. Let's look at the qualifications of the respondent. I might be interested to know
you know, what qualifications these data scientists from all over the world has. And that's a little
line of code that I have to write. And it shows me there that the vast majority of them have master's
degrees, degree 7,859 whereas 6,978 had bachelor's degrees and 2,302 had doctoral degrees.
So most data scientists really do have tertiary education, either bachelor's degrees, master's
degrees or doctoral degrees. And I might be interested in just plotting that out because
just to look at numbers, never fun. Looking at a spreadsheet full of numbers, never fun,
much easier just to create this nice little plot. And there we can see the vast majority have
master's degrees. And this is why I love Plotly because it's interactive. When I hover over these
bars, I see, I see a little pop-up information and we can really change that pop-up information.
Other nice thing about Plotly, of course, I can just zoom in and let's go back here. You see at the
top, I can reset the axis and we're back where we are. I can even save this as a PNG. So if I'm
writing a report, I can just save this as a nice PNG to my hard drive. So if I'm writing a report,
I've got this nice static image. So it's all about Python and R. So let's have a look at the different
languages. And I've just written some code there just to show us a bit of the languages. There's the
total number of people who responded saying what language they use. And you can see R is by far the
Python, I should say, is by far the most commonly used language there. But we also see R, C and then
SQL. Of course, that is a structured query language for database coding. So let's look at the coding
environments that most people use. And so certainly that was one of the survey question. And let's just
plot that out. And we see Jupyter Notebooks, which this Google Colab is a version of, is the most
commonly used coding environment as far as data science is concerned. So certainly if you learn
how to code in this environment, you are doing what most data scientists would do. Let's have a look at
income. And there's these income brackets, which I've just typed out there from the data. And we're
just going to plot that out. So we just have a look at, at what income these data scientists have. And
the vast majority of them are then 0 to 999. And what that is, what that is about, it's about
students at universities. So they're not really getting salary for their work. And I think that's where
the majority are. But you can certainly see this little spike here at the 100,000 to 125,000 dollars
per year mark. And that's certainly a good salary there for, for data scientists. Now there's this
perceptual problem of women being underrepresented minority groups, of course, by definition being
underrepresented as a minority, which is a real problem and which must be actively addressed.
So what we've done here is just look at these high income groups. So those are everyone above
100,000. That's just the choice that we've made. And just to see how many there are. And if they're
above 100,000, we'll call them high income and all the others will be not a high income. And then we're
just going to, for the sake purely of simplicity, just compare men and women here. So very simplistic
analysis of gender there. And if we look at a little cross table, let's have a look at that. So
question two then was, would then pertain to, to being in high income or not, not on high income.
And if we just establish that or print that out as fractions, they will definitely see that
as far, at least as the people who answer yes, between men and women, 6.6% of the men were,
of all the men were in high income group and much, much less so, of course, women in the high income
group. We can do chi-squared test for dependence between income group and gender. And we see
it is a significant result. So I just took two countries as well, say the United States and America,
of America and South Africa. And just isolate those two countries. Let's have a look as far as income
for data scientists are concerned. Let's go down there and just print this out as a table here.
And we can see, of course, there are many more respondents in the United States
at 2200 versus South Africa 141. And when it comes to being in the high income group,
there's, of course, proportion-wise in the United States, many more that are in the high income group
and definitely higher paid salaries as far as data science is concerned in the United States.
Now we can use a bit of machine learning, a bit of artificial intelligence to predict
in what income bracket someone is going to be. So I've selected some of my variables to serve as
predictors, feature variables in my machine learning model here. And we are just going to now use
random forests. So that is a decision tree. So let's just install that.
So sometimes you'll see that Google Colab has not installed all the packages that we commonly use.
And sometimes when there's a new one, such as these decision forests from
Google's TensorFlow that we have to import,
install it at least. And it's also very easy, as we can see here with the pip install. As I said,
don't worry about any of this code. This is just an example. So let's run that now because we've now
installed it. Now we can import this. We've got our classes of high income versus not high income.
So we see our two target variables there, no and yes. And we're just going to separate those out.
And we're going to do a little split of our data, keeping 30% as a test set. So we can see how well our
model does. And that is what machine learning is all about. At the end of this course, we're going
to look at machine learning. We're going to look at random forests and cannulaist neighbors as two
examples of machine learning. And what we can do there at the moment is to see that 92% are
not in the high income group. So certainly if I were just to suggest that everyone, you know,
any observation that comes up is in that group, I'll be correct 92.4888% of the time,
because there's this big class imbalance. So what we really need to do is to work at that.
We're not going to do that here. All I'm going to try and do is beat that 92% with my model. So I'm
instantiating my model there, designing and compiling my model there. And then we're going to just run
that model. We're going to learn from that machine learning. It's going to learn from the data. And
it's going to see, we're going to see just how well it does. Now we split the data initially. So we took
30% of the data out because that is data that the machine has not seen to learn from. So that we can use
that in our evaluation, which we run there. It's now evaluated. And we can see that there's some keys
available to this, our loss function, which we'll talk about at the end of the course and how accurate
this was. And if we look at the values, we see we just about beat it at 92.789%. So very simple little
model and was able to perform slightly better than just the baseline. What I want to show you here is
machine learning as something complex, but a few lines of code, and we can just run a machine learning
model. Now, this is a random forest. So it's very interpretable. So we can actually just plot out
how this random forest worked. How did it decide to put someone in the low or high income group as far
as that prediction is concerned. And we can also ask the question, which of our variables, the ones that we
chose to go into our model, you know, which ones were more important than others or which one of those
factors was, was important in the prediction. And you see that question three did that for us.
So this in brief is just a little example, but then into the introduction to the language,
to data science itself, and to this coding environment that we're going to use in this course.
