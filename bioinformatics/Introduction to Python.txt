in this video I'm going to introduce you to the programming language called Python now there's
the term language in there it's much much like a spoken or written human language now you don't
learn a new language by picking up a dictionary and memorizing all the words in the dictionary
now you start using it in the same applies to Python you've got to start using it and we're
going to start using it not too long from now but there are a few basic concepts that you have to
know about so I'm going to take roughly about an hour and just introduce you to some of it no don't
run away some it's going to look difficult and some it's a bit odd and strange and unfamiliar
you don't have to memorize anything and you don't have to understand everything in this in this hour
look at some of the concepts try and just familiarize like familiarize yourself with them
it actually is quite easy and it's quite a bit of fun open that google colab notebook and let's get
started and we are back here in google colab and python in a few minutes as you can see is the name
of my notebook there remember you can just click on there and the name at least on the left side of
this dot for the ip ynb file you can just hop over there change it whatever you like it's clinical
research you see there the three logos don't worry I'll show you how to do those logos before this
course is over but it's brought to you by myself my research group at the university of cape town
although this is for everyone it does follow the same chapters as we have in the course here a course
on understanding clinical research so python in a few minutes can it be done so remember this is not
learning the whole language we're not sitting with a dictionary when we try to learn a new human
spoken language and just learn all the words from the dictionary and then we can speak the language
no we're going to start using it and as we start using it everything becomes clear and really relatively
easy but there are a few basic concepts that we have to understand I think before we go so this is
going to be very simple simple introduction but it's going to give you enough so that we can just
start doing our statistical analysis once we get going so let's just start with a simple arithmetic
now we see on the right top side there my python 3 google compute engine back end is already running
we see the ram and the disk size there versus what is available to us so it's already running
so i've done a new code cell here remember so i'm just going to hover there and hit the code cell
and we're going to start entering some text and what i've done here is two space plus space two
seen this before two plus two we know that it's four now remember our little hashtag symbol here
when we write a line of code that means tells python everything after this please ignore that
so we can write it here at the end of our code because the two plus two is still going to be
seen by python still going to be executed but everything after this hashtag is going to
the pythons is going to ignore that so hold shift and enter as you can see there on a pc and linux
machine or return on a mac to execute that cell remember we can also just hit this little play
button so we're going to play it it gets sent to google google's massive computers executes that for me
and sends me the answer back and displays right here my browser and the answer is four
and of course we needn't just stop with just the two numbers it's just a massive calculator is what
python is here for us two plus two plus ten and of course the answer is going to be 14
subtraction just as easy that's the minus symbol on a keyboard and if i shift enter that shift return
that or hit the play button seven minus four is three we have looked at this before remember there is
no multiplication symbol on a keyboard most keyboards that i'm aware of anyway so we use the star symbol
that shift and eight on most keyboards certainly shift and eight on my keyboard so if i want to do
multiplication three times four that is going to be 12 division is the forward slash key again there's
no division symbol at least not the one that you learned about at school with a line and the dot on top
and the bottom there's nothing like that on the keyboard so we use the forward slash key so if i want to
divide three into 14 and otherwise 14 divided by 3 14 is the numerator above the line so 3 is the
denominator below the line 14 divide by 3 and we're going to get this numeric representation of
the solution this is just a representation of the solution this this is not an exact solution the exact
solution is 14 over 3 if you keep it in that fraction that's the exact solution but we get this
numerical approximation so it's going to truncate this long string of sixes with a seven which means
it's four and two-thirds and that if we were to write 14 and two-thirds that would be the exact
solution but here we get this numerical approximation we also get integer division remember that's the whole
number that you want to have so that's that four that we can see there so for that i'm going to use
two forward slash symbols that means three goes into 14 four whole times and there's going to be a bit
of a remainder to get from three times force 12 to get to 14 there's a remainder of two and to get to
that remainder if you're interested i'm just showing you some of these mathematical symbols
and that's the percentage if we just use the percent symbol there that's the remainder so three times
force 12 plus another two is 14 and there you get this whole the whole concept of division right here
inside of python powers sometimes we want to take something to the power again there's no specific
way to write powers you know the small little superscript there so we just use in python
two asterisks two little star symbols so three star star two means three to the power two
and of course three times three is nine so if we execute that we should see a nine and indeed we see a nine
the order of execution that is something that you must remember from school remember some
some of these operators should be done before others so multiplication and division come they
come before addition and subtraction so if i were to write three plus four times two it's not going to
go from left to right so it's not going to say three plus four seven and seven times two is 14
that would not be right multiplication comes before addition here so it's going to say four times two which
is eight and if we add three to that we should get 11 let's see and indeed we get 11 if my intention
was to do the addition first i just use as you did at school we use the parentheses so i'm saying
the parentheses come before multiplication in that order of execution so it's going to be three plus four
seven times two is 14 and now i'm going to get the desired 14 which might have been my original intention
so here's a little exercise for you six plus four times two divided by ten and my intention is to do
the addition first so if you want to pause the video just do this little solution if not just i'm going
to show it to you right now so there's our solution remember if i double click on that it's three little
hashtag symbols meaning it's the third small from the larger size three down two down to get to the third
one and our hidden cells there i can just toggle on that and it hides that for me and it opens it for
me again and there's the solution six plus four i put that inside of a set of parentheses so that gives
me 10 then it's going to multiply by the two but all of that is inside of another set of parentheses so
that i can do this whole numerator first and then i divide by the denominator which is 10 and that should
give me two and it's a 2.0 so that's a floating point number so in basic terms that is the mathematics
that would be on any calculator now let's just i'm going to say a quick word on functions most of what
we do in python is based on functions these keywords that are built into the language and if we import
other modules or libraries we get even more and that's fantastic that ecosystem and that's how we're
going to do our statistics by the way but everything is based on these functions a function is something
it's a keyword it's protected so you can't use it to do anything else you shouldn't you can but you
shouldn't it's built into that and you're going to pass this function something and it's going to do
something with this input that you gave it and remember we call these inputs arguments some other
languages call them parameters the in python we call them arguments suppose you can call them
parameters if you wanted to but we pass this to the function the function knows based on what you give
it the type of thing that you give it and it'll do something to it so here we have the print function
just as the single example just to to belabor the point and to to tell you about these definitions
like arguments it's going to take an argument and remember those arguments are always going to go
inside of a set of parentheses and in this case this argument that i'm giving it as a certain type and
the print function likes that we give it a a specific type and this type is a string and string go
inside of quotation marks we've heard this before so i put that this is easy full stop and i put that in
single quotes so that makes it a string the type of that thing that i'm passing to print the type of
the argument is a string and print likes those type of arguments and it can do something and the thing
that it's going to do it's going to print whatever i pass it to the screen so there we can see this is
easy you see it stripped away my quotation mark my my single quotes there so it's just printing that
string that sentence back to the screen so that's a function and an argument so only one i'm going to
show you because as i said this is not reading the dictionary um you're going to hear the word
dictionary again by the way but let's hang on before we get there you're not reading a dictionary
to learn the new language i'm just telling you these are the concepts and we're going to see
plenty of functions as we go so i mentioned this thing that we passed this argument is a certain
type of thing it is a string and certainly there are many data types inside of python and python is
fantastic in this way it it has many data types and it knows what what to do with certain data types
and it is all about this thing and we're going to call it a thing for now this kind of thing that
we're passing and we have this function called type and if we if we pass something to this function
type it's going to tell us what type this thing is that we pass to it so this thing is an int
short for integer a whole number and if i write 3.0 and i take the type of that for us human beings 3
and 3.0 is exactly the same thing but for computer it's not that's a floating point number
which is just another term for decimal a decimal a value with decimal points so 3.0 that's a floating
point number and remember i said something like put inside of quotation marks that is a string
let's see what that's called str that's the type of it so if you're ever stuck in something's not
working for you because you know perhaps it is the wrong kind of type that you are passing just look
at the type function remember the type function is very quickly going to tell you what type of thing
you are dealing with in this instance we're dealing with a string because it's inside of these
quotation marks now i mentioned before very quickly we're talking about libraries and modules and that's a
way for python to extend itself so the base of python we're standing at this three series of python
and 3.8 is out at the when i recorded this it contains a bunch of functions but we want to do
more than this what is system base python and so the there's this whole community around python that
just develops extra libraries and that just adds a bunch of new functionality including functions
to base python but we've got to import them first by the way this python is an open source it's free
free of charge and people work on a fee of charge so people take some of the free time and develop
these modules some people do work for companies that do support them in the development of these but
it's this is a fantastic community let's carry on the math is a module or library that we can add to
python and we add it by this import function so you're going to see import quite a bit so import math
math is the name of the library it contains a bunch of functionality and functions extra functions so we
just say import math and when we do that we have access to everything that's built inside of math
math so one of the first things to look at is those weird and wonderful irrational numbers the first
one is pi you can see the beautiful pi symbol there if you want to know how i got that pi symbol
there let me just lift the veil on that it's a text cell and you see these little dollar symbols on
either side that is something called latex l-a-t-e-x latex but call it latex and that is a type of code
and it is for typesetting and very useful for mathematical typesetting so if we want to write
mathematics on a document if you want to send it for publication and you want nice mathematical
symbols and formulas and equations and expressions in there use latex so inside of python in the notebook
here we use these dollar symbols to indicate that we're busy we are going to now pass some latex code
and pi is a specific symbol inside of latex and these specific symbols have forward slashes in
front of them so it's going to be forward slash pi pi and if i execute that we just get pi so that's
not part of python i'm just showing you that that is possible what we are interested in of course is
the value of python itself so there's a pi keyword inside of the math and to get to these extra ones
because they're not part of python itself we have to reference the library or module from which it
came so we have to say math and then a dot and then this new functionality that we want that is
built inside of this library or module so math dot pi i can't just say pi there's a way just to say pi
but we won't get there yet so i'm going to say math dot pi and there i see the value for pi at least to a
couple of decimal places euler's number e you might know it of math dot e another of these absolutely
phenomenal irrational numbers just like pi absolutely incredible values these i just have to say math dot e
and i get the representation of math dot e now we can also use the the exponent function exp you'll see
that a lot more than you'll see the dot e there exponent is exp exponent is the e itself well as
number and we're just raising it to the power one because any number mathematics that you raise to the
number one just stays that number so we're just saying exponent one e to the power one as i've written
for you there i let me just lift the veil on this little one because latex is sometimes it's fun it's e
and then we get this shift six caret symbol on my keyboard and then one and that caret means write a
little superscript in latex so i get this very beautiful e to the power one there in any way if i say
math dot exp and i pass the argument one i get exactly the same thing the euler's number trigonometric
functions we're not going to use them inside of data analysis much but it's just math dot sign
sin the mathematical abbreviation that we always use for the sine function and i want to do as you
can see here sine of pi over two let me just open that for you can see how that happens so that's
backslash sin that tells latex it's sine and then i have the set of curly braces on the outside because
i'm going to do something after the sine function and the forward slash fract means fractions and then
two sets of curly braces the numerator and the denominator and the numerator i'm putting a pi and the
denominator i'm putting a two this is all just fun it's not part of python but i just want to show
you it's fun so it's math dot pi for the python remember division is the forward slash so pi divided
by two and if i take the sine of that of course the sine of a half pi is just one these are done in
radians by the way if you remember that from school not in degrees so cosine is math dot cos and you see a
very funny looking answer here 6.123 e negative 17 so that's 6.123 times 10 to the power negative 17
if you remember anything from scientific notation that is all the zero comma all these zeros until
the 17th place we have a six so 0.0000 this is rounding errors that are made for very specific
reasons and within very specific constraints and because of these constraints that we have this
representation and you can just think of it 0.0000 there's basically zero that's what python is just
trying to tell us there it's just zero that number is just zero and certainly um the cosine of 90 degrees
pi over 2 is just zero logarithms don't worry about those that's too much that's certainly those kind of
round off it is never going to bother us in our statistical analysis at least not what we're
going to do here so if i'd want to take the natural logarithm if you remember what logarithms are
um some at sometimes some schools dropped the teaching of logarithms at school some still have it
you might know what logarithms are um we certainly can deal with logarithms inside of statistics
it's much better i suppose uh today to use what we call non-parametric tests instead of these
transformations log transformations i'm talking if i'm talking weird words here don't worry we'll get to
that but i can take the natural logarithm of e and of course the logarithm just says whatever the base
is i'm dealing with the base of e here it asks e to the power what gives me one well e to the uh or gives me
the natural logarithm e is just one e to the power one if i want the natural logarithm base 10 it's
asking there 10 to the power what gives me a thousand well 10 to the power 3 gives me a thousand
so log base 10 of a thousand should be 3 let's see oh 3 it is indeed square roots just as simple
it's the sqrt function so math dot sqrt and i pass a value of 256 so what's the square root of 256
it's 16 so a very simple little exercise for you now maybe it's also time for you to go get
something to drink or whatever this is going to be a slightly long video i want the tangent of pi over
four okay let's have a look at the solution i can just pull that down and yes i'm sure you would have
guessed this is math dot tan tan and i'm doing math dot pi divided by four and let's see what the tangent
is of pi over four and you again see this numerical representation 0.9999 that's one
python's just trying to tell you that it's one later on we'll have a look at how to do a round
off so if i were to round that to two decimal places of course the answer was going to be one
good let's move on to something very very important so we've we've done with a basic calculator
that you have on your phone and used to have in physical form i still have a
very fancy calculator in physical form i just love the the thing still love to use it computer
algebra system calculator really uh still fun to use anyway a computer variable now computer variable
you can describe this in different ways the way i want you to think about it is this this
name that you give to a space in your computer's memory you're going to name that little physical
space inside of your computer's memory you're going to give it a name and you give it a name
because then it sort of gets it gets locked down and you can start putting stuff into it meaning you
can you can assign things to live inside that piece of memory so that you can use it over and over again
and i've been using the term things all along that is a bit cringeworthy what we actually pass what
we actually put inside of that piece of memory is called an object everything is basically an object
even these arguments that we pass as an object and what we get back is an object and these objects
have types and we've looked at the types before so the type of just three was integer
but that three was an object more correctly it was an instance of a class of a certain class but
not to worry about that it's an object and i place this object inside of this piece of physical
memory in my computer and i give it a name
and that's much easier for us to do than writing the whole physical address in all sorts of weird
and wonderful code in real computer speak i just give it a name and that makes things very easy
now there's some constraints to this and these names that you can give and it's just best to start off
a name with a lowercase letter no numbers no uppercase letters etc you can use underscores etc but
just start with a lowercase number stick to the basics and make it very descriptive you're going
to view your code later on so you want to give a variable name something that's descriptive so
just looking at the variable name tells you what you stored inside of it
and the most common thing to do is just to string a bunch of words together so my computer variable name
is my variable name and you see i put underscores there because spaces would be illegal characters we
can't use illegal characters space and python mean something very different or can mean something
very different so i have to concatenate my words together but my variable name is very descriptive
to me if i say if i say mean of group one and i just put underscores in between that that that's easy
for me to when i look at the code or give it to someone else mean of group one or group a or mean
of placebo group you know if you name your variable something like that everyone knows what you're
talking about now that's called snake case because we're just creating this little snake of words
and then the less popular is camel case now in other languages like the wolfram language
which i also teach is uses camel case and that is where we put the words right up bunched up against
each other we save some typing by not having to put the underscores we start with a lower case but
every subsequent word is uppercase just so that when you look at it as a human being you can still
kind of see that these are different words so you would write my new variable like that
but certainly in python it's it's much more common to use the snake case and please please don't use the
python functions the built-in things don't call your don't call your variable print or type that is a
reserved keyword a reserved function inside of python so don't do that so let's get get a few done here i
have my value my underscore value and i'm using this equal sign now the equal sign you have got to get
used to that's called the assignment operator that's not the equal sign from school or from math definitely
not and we're going to say my value equals three that actually reads create a piece of memory
just allocate a piece of memory call it my underscore value and assign an object to it so i'm actually
just putting this inside that bucket i'm physically assigning what is on the right hand side
to what is on the left hand side of that assignment operator that's what it is an assignment operator
so i'm saying pass this object 3.0 this object is of a certain type remember it is a float i'm going
to pass this assign this float to this piece of my memory and i'm going to call this memory my underscore
value and that my underscore value that that is what we refer to as the computer x a computer variable
to some name so let's assign that there we go and now there's a little piece of the memory inside
google's computer not mine um that has this an instance of uh integer object and this object has a
value 3.0 not integer integer i should say float and it lives inside of this piece of memory now i can
just recall it by just using the name so if i just type my value it's going to go look in that piece
of memory and whatever object is stored in there it's just going to give back to me and we can look
at the type of my value just as we looked at the type of 3.0 and it says my value that computer variable
is storing a float object lovely stuff now one more thing about this assignment operator that you must
be aware of which is one of these quintessential things let's say that is what this video is all
about i'm just showing you these basics we are you know we're attempting just to read some words in the
dictionary but later on we're just going to use it and these things will really become second nature
because they're really easy i'm going to create this computer variable just called i and i'm free to do
that because that's not part of python it's not nothing that is uh that is uh kept by python i
equal is i equals zero so i'm using the term equal but that's not what it says it says assign whatever's
on the right hand side of me to what's on the left hand side of me to the right hand side of me is this
integer zero and and i'm to the left hand side of me is a computer variable name so i'm assigning
the zero to i and i can just on the new line type i that's just recalling it and it's going to print
zero that's what is inside of it now i want to give i another value but it's kind of an update
value and if you read that sentence i equals i plus one that line of code day this one here let me
highlight it i equals i plus one this is increase the size oh it's it's i think it's a fair size i
equals i plus one that makes no sense because in algebra if i take the i to the left hand side that
becomes i minus i and that's zero equals one and that's certainly not true because remember
as i said this is not an equal sign this is an an assignment operator so what is on the right hand
side on the right hand side is i plus one what is inside of i at the moment well the value zero
and if i add one to zero i get one so on the right hand side i actually have one and now i assign it to
what's on the left hand side on the left hand side is the computer variable i it already holds
something but that's not cast in stone in your computer you can rewrite over stuff over you can
delete something and store another document delete a document create another document
so it's not it's not there it's not chiseled in stone inside of the silicone no
we can just write over it so remember on the right hand side i now have zero plus one that's one
and i'm assigning that new value that new object i'm assigning to the computer variable on the left
hand side which is i now i equals one okay so that's a beautiful example of this not being an
equal sign and just to show you people are lazy and there's all these little shortcuts instead of
writing i equals i plus one we also just write i plus equals one that's just shorthand and you'll see
it everywhere and i just wanted to show it to you in case you saw it somewhere and didn't know what it
meant so what's happening here now that i plus equals one is the same as i equals i plus one
i at the moment is holding a value one i add another one to it that's two and now i'm reassigning
that to i so i is now two as simple as that so another little exercise time for a break but you can
certainly attempt this pause come back to the video whatever you want to do before we move on to list
objects which is another one of those important things so we're going to create a computer i want you
to create a computer variable to hold the string this is easy recall the computer variable and
confirm that the computer variable indeed holds an object that is a string off you go so here's the
solution simple to hold that open you could have given it any name you want i called it my underscore
string that's descriptive enough for me and i'm assigning to it what is on the right hand side here
and that is a string and it says this is easy full stop and so i now have that if i want to recall it
i just use the variable name and it's going to return to me whatever is in there see now the quotation
marks are still there i'm not using it inside of a print function although i could also now have said
print parentheses my underscore string then i would have gotten back this is easy full stop and the type of
my string if we were to do that it's just a string it's a string object str great stuff now let's move
on to objects collections and we first one we're going to look at is list objects there so a list
object is just something that we can do to store more than one element before we've just used single
values three three dot o one single string this is easy full stop now we're passing more than one thing
and we the first or the most common thing we have in python is called a list and we indicate the fact
there were more than one way to do it but the common way is just to use square brackets square brackets
one comma two comma three comma four comma five so i'm passing five elements or creating five elements
i should say inside of these set of square brackets and that is just a list and there we go we have a list
and or if i just type it in like that it's just going to return that list it's not saved in memory
under in a computer variable nothing it's just that now i needn't just stick to the bunch of
integers there yeah i'm mixing to an integer a string and a floating point value all in the same
and if i asked what is the type of this thing and i'm still using the square brackets there
so what is the type of this whole thing not what's inside of it but the type of the whole thing
it's a list object as simple as that so let's create a list object but this time around we're
going to store it in a computer variable and very descriptive there very original i'm calling it my
underscore list and i'm passing these four i have these four elements inside of this list that i create
and i assign that to the computer variable my list and let's recall my list and it's just that list
object that we get back one with elements one two three four now another useful function is just the
len function len and it's short for length so it'll tell me how many elements is inside of my
object my object is a list the length knows what to do this is actually shorthand for something
a bit deeper but that's not what we're interested in here it's a function len we passed it an argument
that argument is this object and it's called my list and it counts there are four elements and they
beautiful now we're going to get something called properties or attributes and methods so if we've
created an object an object will have um certain certain things about it and things you can do with
it it's built into this object that you created or an instance of this class and one of them is a method
and we get to that method by the dot notation so first i'm going to use my computer variable my list
which now contains this list object and then i say dot count and count is now called a method but it
looks very much like a function because it is really just a function behind the scenes so it's my underscore
list dot count and because it's a function but we now call it a method because we're using the dot
notation after an object we pass an argument to it which is three and the count function is going to
look at my list and it's just going to count how many times whatever i pass to it occurs in my list
so i'm asking there how many times does the value three occur in my list and it just occurred once
because remember the elements were one two three four so three just occurred once great stuff so that is
a method and we're going to see a bunch of methods most of what we're going to do are going to be
methods but just think of them as functions that you put at the end instead of at the front
and we'll see some attributes later or properties and attribute it just tells you something about that
object it's not it doesn't have parentheses and you don't pass arguments to it it's just some property
that we can elicit and we'll have a look at some of those a bit later so let's create another one
that's a bit more complex i'm creating my other list very original there and it's a it's a list
object and i have these three elements in it and two are integers and one is a string if we look at
the type still though it's going to look at the whole thing and just tell me that it is a list
slightly more complex again i can pass lists as elements of a list and that's called a nested list
so i've got this outside set of square brackets but inside i have two sets of square brackets
and each of those are lists so this is a nested list i've got list inside of a list
and that's completely allowed no problem there whatsoever if i now now to pass my nested list
which my computer variable that i created by the way if i pass that to the length function what are
we going to get we're going to get two because it takes us from the outside and it's seeing those
nested lists inside of it as a single element so i've got these two nested lists inside of
there are ways that you can drill down and we'll get to that now we can certainly add to a list
remember my list was just one two three four if i want to add to the end of it i use the dot append
and what is that append it is a method so it's like a function and i can pass an argument to it so i'm
just saying append which is good english for saying just add something so i'm going to add a five to
the end of it and if i now look at my list lo and behold the five is now going to be added to it
just a fun little function is the pop function and the pop function is going to pop off
the an element and it's going to pop off the last element and when i just do it like this
it is going to show me the element that is popping off removing it's the five because if i now look at
my list again i'm only back to the one two three four excellent now we come to indexing and slicing
indexing is a very important part of python and if you can think if we have a large data set full
of healthcare information we only want to extract certain patients or certain data we don't want all
the data when we analyze it we are after making groups analyzing subgroups etc so slicing or indexing
indexing let's use the term indexing very important so let's just recall what is held in my
other list and we see it was one two three one two three but the two was a string
and the thing about a list is that every element inside of a list has an address just like you have
an address and we can reference those addresses if we want to get to those values those the values of
those elements one of the things about python that you must learn is that python starts counting at zero
as zero based so the first element is actually the zero with element it has an address of zero the
second one has an address of one the third one has an address of two and it's all a bit of fun
so the three addresses there would be address zero address one and address two for those three
elements and we use addressing by square brackets as well this has nothing to do with a list this now
square brackets means something completely different because i write the computer variable there my other
list there we go square bracket zero it says give me the value that is in address number zero and because
python starts counting at one that's going to be the first element inside of my other list and that is the
one so if we want a second element i have to pass the address one and that is the string two
beautiful now instead of listing all the ones that i want i can also create this little range
and this range says give me values from zero to two now we've got to be very careful here
see the colon symbol there that indicates to python that we're asking for a whole range of values
values and from the zeroth value the two there is exclusive that's one way to look at it so it's
going to go up to address number two but it's not going to give me address number two the other way to
look at it well let's just stick to this way i think that's the easiest way to have a look at it
so it's actually going to be zero and one the two is not included the zero and one the zeroth element
and the first element in our little list my other list it was the one and the string two
so you can ask for this range i don't want you to try and memorize this now i just want for you to
be aware of the fact that this exists and as we start using it you'll see how much sense it makes
and actually how easy it is to use there's a little shorthand that i want you to know about
and that's the minus one that just indicates give me the minus one means the end element now it's
easy to see here because we've only got three elements here but if you have an enormous data set
you just want the last value it's very easy not to have to then know what its address is just type
minus one and that's going to give you the last one inside of the list now remember my nested list
it had two nested elements in it and so we can use these two sets of square brackets so the first
one says give me the first the first element one with an address of one that means it was the second
nested list and then give me the first value or the zero with a value in that so if i scroll back up
to my nested list well what we can do let's just recall it here so i'm going to insert a new code cell
i'm going to leave myself a comment to say recall recall my nested list and then let's just type my
nested list there we go my nested list there we go and if we recall it was a nested list of two
so the first one the one two three was the zeroth and the first was the three four five so i'm saying
give me that second one the three four five and in that the first element which was the three
as simple as that now we can also use indexing to change the values so i'm saying the last one
change it to four please remember i said it's not chiseled in silicone stone we can change the values
and now the last one is one two four dot o and you see i passed a little dot there i don't have to put
the zero in python i can just say four dot it's exactly the same thing but now i've changed that
value one other thing i want you to be aware of is the double colons and that just says up to number
two but two again is excluded so it say start at the beginning and give me up to two but exclude two
so that's the uh the the one the one and the four as we've written rewritten my other list
now for the other way around one till so that's going to give me the second element till the last
element the two and the four great stuff an exercise that i want you to do is the following
create a list with 10 elements from zero to nine now there's a you can look it up there's a very
easy way to do that and you don't have to type all the numbers but for now we're going to type all
those numbers use indexing to print the first five elements of the list and use anything to print every
second element now that i haven't shown you but maybe you can figure it out let's have a look at
the solution so there's the solution my list and i've had to type all of them there as i said there's
an easier way maybe you can look it up and see how to do that if i want the first five that's going
to be zero to six remember because the six was excluded and the one i didn't show you if you wanted
to look it up you would know how to do this but here's the solution you can use another colon and that
colon is going to be two in this instance because it says start at zero and skip give me every second
one and that's as simple as that now i'm going to get the zero the two the four the six and the eight
now that was lists i've introduced you to lists and we are going to see lists again let's move on to
tuples or tuples which way you want to pronounce it perhaps tuple because two sounds like tuple and
it sounds like two but tuples are actually n tuples n where n stands for any number you want you get a
three tuple and a four tuple that will be four elements anyway here we are creating a three tuple
or then a tuple and what we tell python that it is a tuple by by or tuple by putting it inside of
parentheses so here we have three five and the string two and there we go three five and two now
these certainly have addresses but the beautiful thing about tuple is the fact that i can give each
of those elements a name a computer variable name so i'm going to say one comma two comma three because
i'm just separating those three computer variables my tuple assign my tuple to those so every element
inside there is now going to have this very descriptive computer variable name so if i were to type one
it's going to give me back that first element which was three and the same for two it's going to give
me back the five and three was going to give me back the string two so i can name tuples now i can
also pass tuples to the length and that's going to give me the length of three i can use the same
indexing one thing i'm not showing you there but i really want to tell you about it tuples are cast
in stone they are what we call immutable whereas lists are mutable we can change the values of the
elements tuples are immutable you cannot change them when you've created them here that value is going to
stay the way that it is and there's good reason to to have this functionality now we're going to move
on to dictionaries now dictionaries are going to become very useful to us we're going to use them
in slightly different way it's actually just going to be what underlies what we're going to use but it's
it's good to know just what a dictionary is and where we had square brackets for list we had
these parentheses for tuples we have curly braces for strength for dictionaries and dictionaries are just
pairs of values the first one of the pair is the key or the name of it and the second one is the
value so these are key value pairs and we separate the key and the value by this colon symbol
so on the left is the key on the right is the value so my key is language and it's a string key
and my value is python and it's also a string value comma is the next one my next key is version and
it's a string and my value is three which is an integer then i have another string as a key and
another string as a value and you can mix these up of any types or almost any types so there's my
underscore dict for my dictionary and i can get to the keys by using the keys method remember the
method is like a function so i'm just saying my dict my underscore dict dot keys and it's going to give
me back the three keys that i had the language the version and the environment if i want the values
i say that use the dot values method and then i see the three if i want the whole item back i just get
dict dot items and i get language python version three environment notebook as this list i mean that
makes it a list and this makes it little tuples so key value pair actually little tuples now um
if i just want to get the value back of one of the keys so the value of the version key was three so i
just have to save my underscore dict dot get and i'm going to get that back there is the alternative
syntax remember i said right in the beginning the other way is to create lists instead of using
square brackets this was a shorthand notation and certainly here you see with dictionaries that those
curly braces were just shorthand notation it underlies or it will behind the scenes convert it to this
format it uses the dict function so everything is going to go inside of set of parentheses open and
closing parentheses you there you can see them and what we're passing to dict is a list and it's a list
of tuples and the tuples are the key value pairs so that's actually what's happening behind the scenes
just if you're interested in that and there we can see what we've created next up by the way remember
you can always hit pause and come back this is a long video and i said it's just a few minutes in
the end it's going to be a long few minutes but still it is just a few minutes sometimes we want
to iterate over code just repeat the execution of that code a couple of times that becomes very useful
and the two ways to loop through things are these two concepts that i'm going to show you in python
the for loop and the while loop so let's start with the for loop it really reads like english
i'm going to use this little loop to loop through the values zero to nine now inside of it let's just
break it down a little bit before we get to the proper structure there's this range function
it's a function inside of of python and i'm just passing one single value to it if i pass a single
value to it it's going to start at zero and go up in steps of one so it's going to be zero one two
three four five six seven eight nine it's going to stop at nine it's not going to include ten but
if you think of it if you start at zero you are getting ten elements back so that's the other way
to think about this that indexing i i said before but let's look at the whole for loop so let's say
for i in range 10 print i now four means we're going to loop through this i is just some placeholder
i'm using now that's got nothing to do this is internal to the for loop so it's just a placeholder
it's saying for i in range 10 and remember range 10 is going to create this list for me which is
zero one two three four five six seven eight nine so it's going to loop over each of them and then print
that one to the screen let me show you what it looks like it'll make more sense and then we get
those zero one two three four five six and eight nine everyone is printed as we loop through those
10 elements so another way to make it very useful if i say my underscore other underscore list remember
that was one two and four i'm going to loop through these elements in my other list and print them
so for element now element is this some word i came up with is this some placeholder inside of
this for loop outside of this for loop nothing is this this placeholder i could have put i there as
well or some other word i'm saying for element in my other list print element i'm going to show you
what it looks like before we get deeper into the construction of this for loop and there you see it's
just going to loop through print element and each element is just a separate one as i say that element
word has got nothing to do with it i could use any other word in there it's just a the loop counter
basically but look at the structure of the for loop i'm saying for and in those are very important
so i've had got to have the for and i've got to have the in i've got to have some counter name
just some name that you choose and then the thing that you that contains many things inside of it
so my other list contains three it's a list and contains three things in it then i've got to put a
colon and if you put that colon and hit enter you're going to get this white space here see that
white space the p is not under the f that's very important in python now this is set by default the
number of spaces it puts there in other idees that's development environments programs in which
you can write the code you can set how many spaces are in white space this is all done by default here
in our google colab but it really means something to python that white space i can't delete that
white space then things are not going to work for us okay something else i could loop over are the
keys in a dictionary that is something that has elements in it and i can always loop over elements
so for key again that's just the word i chose for key in my other dict dot keys there's going to be
those three keys print the key so that would be another way just to get back those three keys
okay the while loop is going to execute something while something while some while something holds
some constraint holds so i'm going to create a computer variable called i remember that has
nothing to do with that name that i choose there to loop over the i there so i'm going to create a
computer variable i and i'm going to assign to it the integer zero and then i'm going to use the while
loop and then some condition because i want to i'm going to keep on doing this loop until until this
condition is no longer met so while i is less than five print i and then i equals i plus one so let me
just show you what what it looks like so zero one two three four so at the beginning at zero is zero less
than five yes it is again the colon and see the white space going to be created automatically for you
print that i at that moment i is zero so i'm printing zero and then increment i by one so i is
zero add one to it as one reassign it to i now i is two now we loop back is two less than five yes it is
i can continue with this loop until i get to five is five less than five no it's not python's going to
execute that y loop and it's done it's done for so here's your exercise i want you to loop over the
following create a computer variable called my string and assign the string object this is easy full stop to
it and then i want you to loop over each character in the string and print it to the screen but i want
to give you some tips remember the range function we just said range 10 and then gave us one two three
four zero one two three four five six seven eight nine ten if i say put two numbers in there it's going
to go from the zero to the five but remember the five is not included so it's going to be zero one two
three four but it's a range object so if i pass that to the type function see that it's a range object
but i can loop over this range object just as we did with a 10 so for n in range zero to five print
n that's going to print for me the zero one two three four that's five elements but it you know it
excludes that five because it starts counting at zero so that's one tip for you the other tip for you
is remember if i were to write the word python inside of quotation marks that makes it a string
then i can index that string and so i can say give me the last one back that's just the n
so the solution i want you to come up with must include these tips please so let's have a look at
the solution so i'm going to create the string object my string let the computer variable my string
pass to it assign to it whatever's on the right hand side on the right hand side is the string
this is easy full stop i'm going to create a new computer variable to hold the length
the length of that so this is easy let's do this let's just type my string link as well so we can
just see how much how many it counted my string len so if i do that i'm going to 13 there's 13
characters inside of that string so now i can just loop over each of those remember when i showed you
the negative one it means each of those characters inside of the string actually has its own little
address so i can say for char and i just char is just the word i came up with you can have used i
again you could have said for i in range and that's zero to my string length and remember that's 13 so
it's going to go zero one two three four five zero and then 12 up till 12 the 13 is excluded but if you
start counting at zero that's the 13 and then i want you to print my string and then address each of
the characters in turn so if we print that out we're going to say this is easy full stop with the
spaces in between all of them great stuff now in the in the while loop we used conditional so i just
want to show you something about conditionals and these are if l if and else is the one that i want to
show you again this is just to show you that this exists if it's if any of this lecture is just just
too strange for you don't worry about it as we start using it it's going to be easy if you learn
a new language and i just take some random value number or word i should say from the dictionary
it doesn't make sense and until you've used it a couple of times it's difficult so this is just
introducing you to some concepts so i'm going to create a computer variable called i and i'm going
to assign the integer 23 to it and now i have this if else concept going on here so the if i is less
than 20 colon because if i hit enter i'm going to get this white space it means something to python
so it's going to look at this conditional is i less than 23 what is i it's 23 is 23 less than 20
no it's not under those circumstances what comes here will be ignored and then it'll jump to the
else statement and this else if i hit enter here i'm going to get that white space so i can't start
typing else there you physically have to remove that white space because the e and the i the e and
the i the e of else and the i of if have to be they have to be right under each other so if i is less
than 20 print smaller than 20 else colon so that there's white space very important to look at the
structure come back to it and look at it often print equal to or greater than 20 so indeed that is
what is going to to happen equal to or greater than 20 that smaller than 20 was not going to execute
because the conditional was false 23 is not less than 20 now you can keep on with these you can add
more conditionals as you go and in between we put in this l if it's short for other languages which
use the full else if but in python it's just l if so let's make a equal to 2 we assign 2 to the
computer variable a we assign 1 to the computer variable b now i'm going to say if b is greater
than a colon print b is greater than a do you think that's going to happen is 1 greater than 2
no l if a equal equal b now that's a new conditional we've never seen that one before so the double
equal symbol there that is a conditional it says is what is on the right hand side to me equal to what
is on the left hand side of me and it returns a true or false all these conditionals return boolean
values we haven't discussed those but this is true or false so is whatever's on the left of me 2 equal
to what's on the right of me 1 says 2 no it's not but if it was it's what's going to print a and b are equal
and then in the end of all of these things fail you know do something else and that is print a is
greater than b is 2 greater than 1 yes it is so guess which one is going to be printed to the screen
a is greater than b and it's a beautiful very simple example for you to figure out how if l if and
else statements work so an exercise for you it's a computer and i've put an example exercise there
for you because these last two things i just want to make some some something fun it's a famous
computer task and if people go for interviews they might be asked just to create this just to check if
they understand the language and but it's a fun little thing so it's a task we're going to say take
the numbers 0 through 21 in this case and for each number if it is divisible by the integer say 3
and divisible means there's no remainder it'll go into it completely then print the word foo f o o and
if it's if it's not if there's a remainder print bar and this is the way one way to go about it i'm just
showing you one way to go about it for i in range 22 so that's going to be 0 1 2 3 4 5 up till 21 which
is exactly what we want if i percentage 3 equals equals 0 so remember the percentage means that
i just want to just want the remainder and if something is divisible by the remainder is going
to be 0 so it's going to start at 0 and it's going to say is 0 divided by 3 does that have a remainder
of 0 if so print i that number that we are at the moment and and then print foo now you've seen
something new with a print function here as well i can concatenate stuff inside of the print function
so here i'm printing the value that's an i at the moment it'll start at 0 then go to 2 then go to 3
then go to 4 and then a comma and then a string so i can with commas i can concatenate lots of things
in the string and i'm concatenating it by a little space a colon symbol another space and foo just so
it prints nicely to the screen and if the remainder is not zero so if it's not divisible print the value
and then print bar so it's going to run down all of those and just do the foo bar thing for us
so foo remember we said if it if it has a remainder of zero and otherwise bar so zero one or two won't be
three is divisible by three with a remainder of zero six is divisible by three nine is divisible by three
so simple as that the last little fun thing i just want to show you something called list comprehension
and list comprehension is like a little for loop but we put it inside our square brackets this is
just some advanced stuff just some fun for you to have if you're interested in it my underscore set
equals i for i in range 51 so i for i in range 51 inside of square brackets that's going to be a list
object for me and i'm just going to print those first five elements zero one two three and four
i could say i for i in my set if i percentage three equals equals zero
now i'm getting the same sort of thing in a much shorter sentence now if you look at that that is a
bit advanced that is like some hectic syntax or grammar inside of a spoken human language
but i want you to look at and see if you can dissect what is going on there and as i said i'm just
showing you this for a bit of fun and uh let's do the following print the square of the number
if it is divisible by five so i squared for i in my set if i percentage five equals equals zero
that's how i would construct that so now it's going to print it's going to first select only the values
that are divisible by five and then it's going to square each of them i hope i hope you find that
as interesting as i find it but as it's not part of this course i just want to show you some of the
power of python and how you can construct something very complex basically so take all these values see
if they're divisible by five print them to the screen but square them at the same time that's a
short line of code and once you get the hang of it it's actually quite easy so that's my couple of
minutes introduction to python again maybe i have thrown the dictionary at you but that's not the
idea you don't have to remember any of this because it's only when we start using it that it starts
making sense that it'll get into your head and you'll see just how easy it was for me just to write
this little notebook it's from a long time of usage not from looking at it for the first time so
don't despair all of this is easy and as we start using it to do what we're actually here to do and
let's do some statistical analysis on healthcare data you'll see just how easy all of this really is
you
you
you
you
you
you
