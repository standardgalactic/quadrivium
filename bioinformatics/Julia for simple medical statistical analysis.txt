In this video I want to introduce you to the computer programming language called Julia.
Now it's a wonderful rainy cold Cape Town winter's day and I was rather curious,
I always use Python in the IPython notebook, but could I use Julia to do some of this analysis?
Now it's a computer programming language really for computer scientists, mathematicians, etc.
And I was wondering if a mere mortal, a mere surgeon like myself could use Julia.
Now I'm never going to move away from Python and the IPython notebook, they really are fantastic.
It's really phenomenal stuff to do your work with.
But I was wondering what I could do with Julia.
Now Julia has packages that you can import, they are like your Python modules,
but they're certainly not that well developed.
And I didn't know Julia that well that I could just write the code all on my own,
so I wanted to use some of these packages.
I'm also not going to use the IPython notebook for this demonstration,
I'm going to use a different development environment called Juno.
It's beautiful, it's built on light table and really looks well.
Certainly though for any kind of production work I'm going to stick with the IPython notebook and Project Jupiter.
I think it really doesn't get any better than that.
But let's go, let's have a look at Julia.
And I'm going to take you through this video at rather some pace.
There's quite a bit to do, I'm not going to stop and talk about all the syntax, just follow along.
And what I'm going to do is to show you a data frame, a database, which is just a spreadsheet of values that we're going to use.
Now I'm going to show you just how to construct one from scratch in this video,
and just import some of the random variables to populate my database.
But I'll mention quite a few times I think in the video that you just import a spreadsheet with your data and use it as such.
But I wanted to show you some of the functionality of Julia.
So going through some pace, maybe if I have some time later I'll break it down into slower sections and go through some of the syntax.
Julia is a phenomenal language.
And let's go have a look.
And so here we are in Juno.
You see that I have already typed everything I want to show you.
Let's start right at the beginning.
We're going to just import some of the packages that we're going to use.
The first one is a package called markdown, just so that we can print some text to the screen.
I'm going to use it probably not in the correct way, but you'll see how we do that.
So in Juno we just type using markdown and I'm going to hold down on the Mac the command key and hit enter.
Or on the PC that would be control and enter.
And you'll see at the bottom the little spinning disk went on while it imported.
Now markdown is not a big package.
That will go fairly quickly.
I'm now going to do the data frames package.
Again holding down command and enter or control enter.
And again you'll see a nice little animation down the bottom as this gets important.
And this takes quite some time.
Data frames is a big package.
And it takes a while to do.
There we go.
It's done.
The next one we're going to use is distributions.
We're just going to look at using random variable distributions.
Import that.
Done.
Now a big package called gatfly.
Now that is the package we're going to use to do some plotting or graphing on the screen.
Also a very big package and if that's the first one that you do load it might take quite some time.
Okay I cut the waiting period out in the video for you because depending on the system you use you could seriously go out and take out two gallbladders before coming back.
The last one we're going to use is the hypothesis tests.
This is the package that contains a few rudimentary statistical analysis and at the end we'll see how to use those.
Good.
This is how I'm going to use a markdown.
So it's markdown dot pass.
And it's just a string that I'm going to print to the screen.
And you see beautifully rendered here in Juno.
There we go.
So we're going to create our first data frame.
There it is.
Data frame.
We're going to use the word data frame there.
Capital D uppercase D uppercase F.
And I'm going to attach it to this computer variable called DF.
Just for data frame.
And it's going to contain two columns.
And see how the columns are just separated by a comma here.
The first column is going to be called A.
And there's no double quotation marks there.
So I'm not entering as a string.
That's just going to be the name of the column.
And I'm going to have a column B.
Column 1 is going to contain the integers 1 through 10.
And column B is going to contain the integers 2 through 20 but in steps of 2.
So I'm at the end of the line.
Hold down the command key.
Control key.
Hit enter.
And there you go.
So this is what Juno is going to do.
It's going to render the data frame there for you hidden.
But if you click on it.
There you go.
Beautifully.
It shows you that data frame on the screen.
So there's my column A and B.
And as I said, integers 1 through 10 in my column A.
And in the rows for column B we have 2 to 20.
And going up in steps of 2.
If I just click on it again, it hides itself.
That works rather well I think.
So some more markdown just to the text.
Let's select certain rows and columns.
So I can do that.
Referring to the data frame DF.
That was the computer variable name I gave my data frame.
And I can say the rows that I want.
Row 1 to 3.
Separated by a comma.
Then columns.
So it's row, comma, columns.
So I want rows 1 to 3.
And I want only column A.
Look how that goes in square brackets.
And there is this colon in front of the column name.
And I haven't attached that to another data frame name.
I'm just asking Julia just to select those rows and columns for me.
And if I do that, look at that again.
It's Cicero column A.
And just the first 3 rows rendered there.
Let's just show how to add a column named names containing just some strings.
So to do that I'm just going to refer to the data frame I've created up there.
DF.
And then in square brackets just the colon again.
Names.
So that is going to be the name of this third column.
And there's just 10 ABC string elements there.
Just some single characters.
So there's 10 of them.
So that will fit in nicely to my data frame.
Because I do have 10 rows in it.
And if I hit enter you see it is a vector.
And it's a vector ABC.
So Juno is only going to refer to this vector that you created.
This is a row vector.
Well it's actually a column vector I must say.
That's part of the mathematics of Julia.
So if you do have these commas in between.
It's going to do a column vector for you.
If you did not it would be a row vector.
If you didn't put the commas.
Anyway it's just showing me the vector of 10 dimensions I can say suppose.
That it's going to add to my data frame.
So let's create a new data frame by selecting only values of A in the names column.
So remember here we only selected some of the rows in a certain column.
Now let's do that.
We create a new data frame called data underscore A.
And it is from the data frame.
DF data frame.
The column names.
That are equal to.
So it's dot.
Double equal sign.
A.
Comma.
And the colon.
So you've got to learn how to use this syntax for Julia.
And if I were to hit command enter.
Control enter.
There we go.
So what it's done.
It's gone into the names column.
Names there.
And it's only selected the rows that contain the value A in them.
And gives me the corresponding rows in both columns A and B.
So that is my new data frame that I only select if I wanted to do some research.
And some of the research participants were selected to be in group A.
I could create a new data frame with only their values in it.
And this is the way to go about it.
What if I wanted to have more selection criteria.
The way to go about that is the same as this.
You're going to put parentheses around what you want to do.
So it's still the data frame in big square brackets.
Then look at this.
There's a parentheses there and there.
And it has the single ampersand sign there.
And another parentheses there and there.
So with the names column it contains the values of A.
And the B column has numbers greater than 4.
So if I were to do that it's still only A.
But now in the B column we're only going to have values that are larger than 4.
So 6, 14 and 20 there.
So you can build up quite a few criteria just to select parts of your database, your data frame.
And that's wonderful if you want to do some analysis on that.
So let's do some simple statistics on what we have.
I'm going to just ask Julia just to describe data A, the A column for me.
Now look what happens.
A spin there.
Nothing happens.
There's a check mark there.
So it was executed the way Juno works.
It is going to hide it for us in what is called the console.
And to view the console you have to hold in command and the little control I should say.
So even on the Mac it's control.
So it's control and the little tilde sign.
And the console opens up at the bottom.
And you can see it has described the A column.
So the mean for the values in the A column.
And remember data underscore A only contained the A's.
Where did we do it?
There.
There's our data frame.
So I'm going to look down column A here.
So it's values 1, 2, 3, 7 and 10.
It has a mean of 4.6.
Third quartile there.
A maximum.
The NA stands for rows that contain no data entries.
There were 0 of those.
And the percentage of that makes up 0.
So it gives us a little description there.
It starts there.
Min, first quartile, median, mean, third quartile, max.
The NA's and the NA percentages.
So I hit control and the tilde key again.
And it disappears.
So if we just were to look at the big data frame and just look at column A, we can just ask it to calculate the mean of all the values.
So there you go.
It's 5.5.
We can ask it to sum all the values.
10 plus 9 plus 8 plus 7.
I mean, that'd be 55.
The standard deviation.
The variance.
The minimum or the maximum.
There's lots of normal descriptive statistics that you can just do on any of the columns in your data frame.
Here we've asked us for some numerical calculations and we'll get all of those.
Let's ramp things up.
Make it a bit more interesting.
And we're going to populate just an empty data frame.
Data.
We're going to call this data.
So not DF.
I'm giving it a different name data.
And it's a data frame.
Open close parentheses.
So it's just an empty, an empty data frame.
There it is.
If I click on it, there's absolutely nothing in it.
Now what I'm going to do is just to create this data frame.
As I said, they're from scratch.
It's an empty.
But I'm going to populate it with columns and rows.
The normal way that you would go about it, obviously, is just to import a spreadsheet.
You can import a spreadsheet.
A spreadsheet that you've saved in Excel or another spreadsheet software.
If you save it as a CSV file, it's a bit easier.
But you're going to import your spreadsheet.
But what I'm going to do here is just to create one from scratch and put in random variables in it.
Just to show you how the distributions, the random variable distributions package works.
So first of all, I'm just going to create this empty array.
I'm going to call a gender array.
And I'm going to add just this single character F to it.
And you'll see it in a moment why I do that.
It's not necessary.
It's just for explanatory purposes.
So there we go.
It's this vector.
One by one.
One row column vector with the character F in it.
And now I'm going to create this little for loop.
So obviously if you just do your normal statistics, you know, import your spreadsheet file.
You needn't go through all of this.
But just to show you a little bit more of Julia here.
So I've got this for end loop.
So it's going to loop through this from this for to this end at the bottom from 1 to 199.
So it's going to go through the 199 times.
I'm going to create this random normal variable called rn.
So it's this rand in empty parentheses there.
So it takes a standard normal distribution.
So it's going to have a mean of 0.
And it's going to just randomly select values on either side of 0 as a standard normal distribution.
In other words, it's going to have a distribution has a standard deviation of 1.
So it's going to select that.
And if you think about it, it's either going to be positive or negative.
So what I'm going to do here, I'm going to run an if else end statement inside of it.
And I'm going to say if a chosen number that was equal to less than 0,
I'm going to append, see the exclamation mark there, the gender array with female else.
In other words, if the random number was positive, I'm going to append the gender array with male.
So I started with 1 and I'm going to add 199 other randomly selected male females.
So every time you run this, you're going to obviously have different results.
So what I want to do here is just create a column vector, male, female, male, female, male, female, just randomly.
So I'm at the end of the last end statement here.
And I'm just going to hold down command control hit enter.
And there it is. You see there it's executed.
If I wanted to look at it quickly, so there's gender array there, execute it.
And there you see it's this column vector 200 randomly, either male, female, male, female, male, female, male, female.
So if you ever wanted to create the entries in a column randomly, this would be one way of going about it.
There's obviously other ways, probably easier ways, more computer science-y ways of doing it properly.
So what I want to do now is to create this.
Remember, my data was an empty data frame.
I'm going to create this column called gender, colon gender.
And I'm going to add to it this gender array, which is my 200 rows of randomly selected male and female patients, just added to that.
So there we go.
It is now this.
When you do it this way, it's not going to give you the whole data frame.
It's just going to give you this vector, column vector that you added to it.
Now I'm going to do this the same.
And I'm going to go through a new, I'm going to create a new array called group array.
And I'm going to call it a, I'm going to, sorry, I'm going to call a group array.
And I'm going to add, just as I did before, just add something to it called A.
You don't have to do that.
You could have done that all in here.
It's just for demonstration purposes.
I'm going to do exactly the same.
And I'm going to randomly put in either A or B, A or B as if these patients belong to two different groups.
If I do that, that very quickly runs through.
If I look at my group array now, which is this vector.
And again, it's this random.
Let's go down.
So you can see it's this random A's and B's, A's and B's all the way down.
Click on it and it goes away.
And now I'm going to add that as another group in my data frame.
And I'm going to call this group, this column, I'm going to call a group and I'm going to attach this to it.
There we go.
And let's add some more columns.
I've got two columns now.
It was randomly selected male and female and randomly selected A, B.
So let's add some more columns.
So I'm going to refer to my data frame data and I'm going to add an age column, a days column, a temp column, a white cell count and a CRP column.
And I'm going to use random variable distributions.
And the way to go about it is this way.
Rand.
I'm going to use the normal distribution with a mean of 35 and a standard deviation of 10.
So that goes in these parentheses here.
comma 200.
I want, please give me 200 random variable, random values that is normally distributed around a mean of 35 with a standard deviation of 10.
Done.
And if I look at it now, it's just this vector, a column vector, 200 values.
I've asked for 200 of them and one after the other.
And they are randomly distributed around this normal distribution with a mean of 35 and a standard deviation of 10.
That's that's quite beautiful to do.
Let's do a days.
And we're going to use a Poisson distribution and we're going to give it a lambda value here of two.
And I want 200 of those as well, please.
And now I'm going to have an admission temperature.
And I want it to be from a normal random distribution around a mean of 38 with a standard deviation of 2.
And I want 200 of those, please.
The white cell count, I'm going to have a mean of 5 and a standard deviation of 5.
I want 200 of those.
And now I've just been a bit silly here.
This is definitely not a proper distribution.
But I just want to choose something different than a normal distribution.
So I'm going to have a lambda value of 2 for my Poisson distribution.
I want 200 of those.
And then what we do here, we add times 2 plus 100 to each of those.
So it's going to take each and every row entry, multiply it by 2 and add 100.
Just so that we get something you can see here.
Just so that we get this kind of values roundabout for our CRP.
As I said, it's not a proper way of having gone about that.
But just to add something different.
So data, if I just were to Command, Control, Enter behind that, there's my whole data frame now.
You can see it has gender, group, age, days, temperature, white cell count, CRP.
And I have 200 rows of entries for those.
So I created this data frame just by selecting random values.
I showed you how to generate it in real life.
You're obviously going to have real data inside of a spreadsheet.
And you can just import that spreadsheet file.
You don't have to go through all of this.
So I'm now going to use GATFLY, which is a popular plotting package for Julia.
So this is the way it works.
Because I said using GATFLY, it's now in memory.
And I can just use one of its keywords there, plot.
And then there's my open and close parentheses.
And there's the close one right at the back.
GATFLY takes data frames as entry values.
So I'm saying use my data data frame.
On the x-axis, please plot the values that are in gender.
And there are only two values in gender.
And they are categorical.
It's only going to be MF, MF.
The color, it's obviously then going to do two columns for us.
And I want you to choose two different colors for my two columns
based on the values that you find in gender.
It found two values.
So it's going to choose two colors.
And I want you to draw a histogram for me.
So that's the geometry.
That's the way that GATFLY works.
It draws these geometries.
So it's geometry.geom.histogram.
I want you to put in a guide.
You get the titles, the x, y, x labels, y labels.
That's the text that you can add to your plots.
So guide dot title.
I want it to be title gender.
And I want the y label just to be numbers.
So that's how you would construct a histogram.
I'm going to hit the command, control, enter.
And the first time you run a plot like this.
Also, you can probably swallow down a quick cup of coffee while you wait for this to render.
Okay, we're back.
I had my coffee.
Took out another two gallbladders.
It really takes quite a while to do the first one.
A bit annoying.
But there we go.
So there we go.
Gender in my title.
Numbers on my y label.
And it found only two values.
F and M.
So, so many males.
So many females here.
And it colored them indifferently because I asked it to use colors based on what it found.
It found two.
And these are the default colors.
The first one it chooses is a blue.
And then this nasty looking yellow for the second one.
Let's try a box plot.
So again, plot.
It takes a data frame as an entry.
On the x axis I want whatever you find in gender.
So immediately you know it's going to find two things.
And on the y column I want age.
But I want it to be a box plot this time.
So geom.boxplot.
And I'm going to just add a title called age difference between male and female.
Now the second time you run a plot it's going to be a bit quicker.
Certainly won't be time to do a major surgery while you wait.
And then you go two beautifully rendered box plots.
When you look on the internet you search for GatFly.
You'll get all sorts of interesting information as to how to increase the gaps between these.
It's all just extra arguments that you can put in there.
So what did it do on the x axis?
Well it found only two types of categorical entries in the gender column.
Female and male there.
And it took the age on the y axis.
And it created a nice box plot for us there.
Let's do a kernel density estimate.
So plot again data on the x axis.
I want the white cell count.
So it's going to be this distribution of white cell counts.
And color equals gender.
Now it's going to find two entries.
Again M and F.
So it's going to draw two density estimates for me there.
So the density and I'm going to call it that.
If that doesn't make too much sense look at the output.
There we go.
Because it found two types of entries it drew two graphs.
It's going to do male and female separately.
And there we have a kernel density estimate of the distribution.
And now remember I took white cell count as a normal distribution.
Around about 15 was somewhere there with a standard deviation.
And indeed I asked it to give me 200 random variables from that.
And you can see beautifully these are kind of normally distributed pattern that I do get there.
Let's just look at white cell count according to the groups.
Now remember there were groups A and B.
So this was going to look exactly the same.
And it seems as if this time because it's just random variables there was a bit of a difference here between groups A and B.
Let's just look at the CRP.
Remember I created that very awful distribution for CRP.
And this is for the whole.
I didn't say color equals group.
So it took all of them as one and you see this very funny distribution.
The reason why I wanted to do that.
Now every time you run this you're obviously going to get something different.
This being random and I didn't seed it with specific initial values.
So you're going to get a different plot.
But certainly you'd be a bit concerned just doing normal parametric analysis on a kind of distribution like this.
You're not going to be sure that indeed those CRPs came from a normal distribution or a normal population parameter.
So let's do something else.
Let's do some point plots.
So again I'm taking my data frame as an entry on the x-axis I want.
White Sock count on the y-entry I want CRP.
So it's going to take every single patient's entry.
And it's going to just do a scatter plot for us in essence to see if there's some correlation there with White Sock count and CRP.
I'm giving it a title again but this time I'm just going for points.
Points.
So all we're going to have now is just that.
And look because of that funny distribution I chose this is what we end up with.
Certainly because of the weird distribution I chose that looks a bit awful.
Anyway, so let's do something else.
Let's just do points again and this time we're going to see the distribution of CRP.
Now some of these values fall on top of each other so that's why it doesn't look like we have 200 values here.
So I asked in the x-axis just find me the different things you find in group.
Again it found two categories A and B and it's just going to plot the actual CRP values that it found.
So there were quite a few at 110, quite a few at 100 and it just plotted on top of each other.
Unfortunately I haven't found a way to do some jitter in these so that the points can be spread out so you can actually see how many there are.
Okay, let's create some sub data frames.
Remember we did that.
Let's call them something new.
We now want to create two groups.
I'm going to call them group A and group B.
So for group A I'm going to take from the data frame data.
I'm going to take the column called group and I only want entries that are equal to A.
And then because they were only A and B I could have said here equals B but the other way to do it is not equals A.
So again the data data frame, the group column where it doesn't find A.
In our example here it's just going to take all the B's.
So if I were to run those two you'll see now these two data frames will only be for A and this one only for B.
So it's a super selected all of those for me.
So let's just do some statistical analysis and now a look at that.
This is first have a look.
What was the mean of the white cell counts for the patients in group A that was 14-7.
Let's look at the standard deviation for almost five and that really is because of the distribution I chose up there.
And that is standard error of the mean.
We can also just ask for 95% confidence interval and that is the hypothesis test package I imported.
It has this function called CI, confidence interval, one sample t-test.
Don't be too concerned about the name that was given there.
So as this group A is my data frame that just contains patients from group A and I want the 95% confidence intervals for their white cell count.
Here we go, 13.7 to 15.9.
Let's look how that compares to our group B patients.
In this instance the mean white cell count was 15.2, 15.3, the standard deviation there, the standard error of the mean,
and the confidence intervals there, 14.3 to about 16.2.
So let's compare these two.
I can do a p-value that also comes from this package, from the hypothesis test package.
P-value, equal variance t-test, if we look at the two standard deviations there, almost exactly the same.
And I set it up that way so I can use this parametric test of equal variances.
One group A's white cell count comma group B's white cell count.
And if I were to enter you see a p-value of 0.5, so no significant difference there.
Just to show if they were not so, we could also do a Mann-Whitney-U test.
This is for interest to see where the Mann-Whitney-U came out.
It came about 0.4, 0.5 as well, I suppose you can round it off.
Which shows you, once again I suppose this is not proof of it, just not one example like this,
that the non-parametric test is a little less sensitive than the parametric test,
but don't use this example as an argument to say that that is always so.
Let's just look, because I chose CRP so badly, that perhaps we should not use a parametric test there.
Mann-Whitney-U on the CRP values between the two groups, but once again you see that wasn't really significant at all either.
So, I hope you learned something and see that you can do a bit of statistical, medical statistical analysis here,
run through the packages that you would need to import, how the data frame works,
created this data frame from scratch by these distributions.
Again, in real life you'll just import your Excel spreadsheet or your spreadsheet file
and you can do some pretty awesome graphing and some pretty awesome simple statistical analysis on your data.
Good.
