So in this video I want to talk to you about all the ways or at least many of the ways that you
can change colors of your plots and graphs in Plotly. Now we are here in our studio and I'm
going to show you the actual code as it's put together in our markdown file. Remember the
surrendered file is available on rpubs and this actual rmd file will be available on github as
well. So you can see the markup language at the top here just to instruct this coding to html what
to do. We see a title there author and the output is going to be html and the table of contents set
to true. So let's have a look at the libraries that we're going to use. I'm going to use a tibble as
always. I prefer that overt data frame. Just to print a data frame nicely to a web page I'm going
to use the dt library. Of course Plotly and then the rcolorbrewer. Now colorbrewer is a website that
you can visit and then there is this wonderful package in r that can make use of those colors.
As always I do use some cascading style sheets just to color the heading one, heading two and
heading three levels. I have a logo that I always insert in these rpubs documents and you can see
there how I how I add that. Now remember I am using the set working directory get working directory
function I'm using up here and this rmd file and this png file live in exactly the same folder.
So that by default then as I mentioned Plotly has some excellent colors and you can
customize them extensively and then if we add our rcolorbrewer package we can do even more.
So first of all let's create some data that we can work with. I'm going to just set the
pseudorandom number generator. I'm going to seed that with an integer one two three just so that
if we rerun this code we get exactly the same random values back. I'm going to create a computer
variable called cities and that is going to have a sample space of these one two three four five six
seven cities and as I quip there spot the odd one out. Anyway I want 200 of those at random and
replacement is true so that when one is drawn it goes that name gets goes back into the hat to be able
to redraw. So let's run all of our code. I'm going to run all the imports of my libraries there
and then if we go down let's create these random values. Off we go and we see on the right hand side
under global environment I see that I have 200 values in there. Now remember if we use the table
function on the cities that is going to give me back at least to the screen this little table
that just shows me the sample space values Boston Cape Town LA Miami New York City Seattle and San
Francisco and the number the count of those unique values amongst these 200. If I just use the names
function of on this table of cities I'm just going to save as a string vector then the names Boston
Cape Town and let's store that in a computer variable called city.names and you see I have my one two three
four five six seven cities there and if I use the as.numeric function on this table of the cities then
I'm only going to save the numbers the counts so let's do that and if I do have those it makes it
easier to create a bar chart now remember bar chart just shows us these counts so it's very good for a
categorical variable so let's create it there and we see plot underscore l y and I'm going to add to
that a trace and this trace type is a bar remember all of this could have just gone into that function
right there this is another way to do it on the x-axis is the city.names remember those are just the seven
names and the y-axis are those counts I'm doing some layout by putting a title x-axis and the y-axis
on the x-axis I want to list because I have both title and zero line both those keyword arguments and
something else that you'll see here I use fig.cap as part of my r notation up here and that just creates
a nice little caption for my figure if I render that out to html so there we go and we see the default
deep sky blue color it looks fantastic I can hover over those and see the counts we can see LA there 34
San Francisco also 34. so let's just change away from this deep sky blue default by using RGB and RGBA
now RGB stands for red green and blue and that is how your television works how your computer screen works
those red green and blue little dots on your screen and each of those can take up a value from zero that's
absolutely black to 255 which is maximum intensity so 256 levels there and if we push the red all the way
up to 255 and keep the others dark those pixels you're gonna see red and then you get these mixtures in
between the a is for opacity so I can also if I use RGBA add a fourth value and that ranges from zero to
one and that has to do with a bit of transparency so let's do that it's exactly the same plot but this
time I'm going to use the marker keyword and I'm going to pass the list to that because I want to
use the color and the line keyword arguments as part of this marker keyword argument so the color I'm just
going to use RGB that's 195 195 195 195 so that's sort of a light grayish color all the values being
the same there's not going to be a color cast no color dominates so that's just going to be on the
spectrum of pitch black to white and gray levels in between so this is going to be a lighter gray the
line as part of the marker tells plotly what you want the border of whatever you're trying to plot to be
so that color I'm going to use RGB 2020 20 20 that's very low intensity so that's going to appear very
dark and I want a pixel pixel width for this border of two everything else stays the same let's have a
look at that and now we can see our lighter gray and our very dark gray almost black border to these so
very easy to change the colors this might be more appropriate if you're going to submit it to a journal who
wants monochrome images so let's just add a bit of opacity to that so on the color here i'm going
to use this 255 and the red channel nothing in green and nothing in blue but i used rgba so i can put
this fourth value 0.6 that's the opacity 0 meaning that they from 0 to 1 as i said and that is from being
fully transparent at 0 to fully opaque at one so let's do a 0.6 there and you're going to see the
red is going to be a bit see-through and there we go so you can see those lines come through
as far as the red is concerned now i can individualize each of these bars i can give them each a value
so my marker here again i'm going to pass a list of values the color is what i'm after in this instance
and i need to pass values for all seven of them so you can see two of them are a bit different
and you've got to do it in the order that they did appear here that vector of names that you created
initially you have to follow that order so let's have a look at this and there you go see there's
no border the the color was the only keyword argument and here we can see the transparency
at 0.7 for all of them but you can see these two the la and the san francisco they were the highest
at the highest count so we colored them in red so you can really just individualize those colors
instead of using rgb and rgba we can actually use a list of named colors and if you go to this website
of the world wide web organization you can see a list of the color names that you can use and you
can see we said here silver silver red silver silver silver red and then the opacity remember this one
didn't have any opacity when we uh right at the beginning up there now i'm going to add some
opacity and that opacity has to go on its own and i'm just repeating 0.77 times so i have this vector
of 0.7 0.7 0.7 etc so let's have a look at that there we go it looks exactly the same those values i used
dwarf or silver in red and that's another way that we can do this by just using these these names of
the colors another way to go about it is just use hex colors hexadecimal color values also hsl use
saturation and lightness and hsv color sets that you can use so here i'm using the hexadecimal color set
and you see the i pass it as this vector of these strings and those are the values for red green and
blue c0 c0 c0 c0 and then ff00 that ff is maximum that's uh 2 to the power 4 16 so that's the maximum
value there and if we print this out again that just opacity there i'm just repeating 0.77 times again
exactly the same thing that we're going to get back now we've also got some inbuilt color palettes that
we can use and first of all though let's create a tibble and it's just going to hold all of these
values for us so there's my df is my computer variable a pass a tibble city and sale so city is
going to hold all my cities the 200 that we created before and then i'm just going to create another set of
values the length being the number of cities so those are equal i'm going to round it to one digit
and a mean of 100 and a standard deviation of 10 and then the data table function from the dt package
and that's going to print it to the screen very nicely here you can see you can run through all
of those you can even go for ascending and descending order you can show how many entries you want to see
at one time very nice the dt package so here we go we're going to add this trace the data's df
on the y-axis we want sale in on color by city remember that has nothing to do with color
if you wanted colors that would be with an s so let's just have a look at this box plot
and that is just going to give us these cities and then the sales on the y-axis as we asked
and that sale is now going to just be individualized for each of the cities and that's the default we
use there but let's use one of the color sets you see the color sets for instance they have set one
set two set three pastel one two and paired and dark to an accent and so those are the qualitative
qualitative palettes you get many sequential that's this light to dark palettes and you even get these
dark to light to dark palettes as well and examples of those would be dark 2 and brbg so let's just have
a look at two of these here's the dark two so let's have a look at that and indeed you'll see every dark
colors there and we're plotting out exactly the same thing by but by a certain palette and let's have a
look at this brown green and beige kind of color so you see goes from dark to light to dark so if you
go to the color brewer website you can certainly have a look and also look at things like color blindness
etc a lot for you to read and i've put a little of that from their web page our color brewer package
at least in here for you you can also go to color brewer 2.org and you can read more about these so
let's use that and one of the palettes is the paired palette so the way that we're going to do that
is say colors equals brewer dot pal pal for palette the number that i want is the length of the names of
the tables of the cities remember there were seven so that's going to give me seven colors back just
using the length if i knew it was seven i could just have said brewer dot pal and then seven comma
what i want is the paired palette so let's have a look at what that looks like
and there you go the paired palette that looks rather nice and let's use something else let's just
have a look at this now the thing is that many of these packages have between 8 and 12 possible
colors but you might have a need for more than just those 12 and you can certainly do that with our
color brewer package and we're going to use the color ramp palette function as a keyword argument
so this is how we would go about it first of all i'm just creating the sequence of values from negative
two to two and steps of 0.1 and on the y-axis i'm taking the sign of each of these values so i'm going
to create the scatter plot x is going to have my x values that sequence y is going to have the sign
values mode as markers so it's a scatter plot and the marker is a list size equals 10 and the color then
is this color ramp palette inside of that we have brewer dot pal
and we're asking for 10 there spectral is what we want and we want 41 of these colors please 41 colors
so let's have a look at that and see how that comes out
beautiful there we see our sign curve and we can see all these colors from red to blue and the 41 shades
that we can see they're absolutely fantastic so that's in short uh how to manage colors inside of
plot there there's really the sky's the limit you needn't stick stick to deep sky blue you can choose
whatever you like and there are many ways to go about this
you
