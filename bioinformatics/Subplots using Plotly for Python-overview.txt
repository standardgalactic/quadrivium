To create a subplot using Python with libraries like Matplotlib or Plotly, here’s how you can achieve various functionalities mentioned in your prompt:

### Using Matplotlib

Here's an example of creating subplots with different configurations using `matplotlib`.

```python
import matplotlib.pyplot as plt
import numpy as np

# Sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a figure and a grid of subplots (2x2 configuration)
fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 8))

# First subplot
axs[0, 0].plot(x, y1)
axs[0, 0].set_title('Sin Wave')

# Second subplot
axs[0, 1].plot(x, y2)
axs[0, 1].set_title('Cos Wave')

# Third subplot
axs[1, 0].hist(np.random.randn(1000), bins=30)
axs[1, 0].set_title('Histogram of Random Data')

# Fourth subplot spanning both columns in the second row
axs[1, 1].bar(['A', 'B', 'C'], [3, 7, 4])
axs[1, 1].set_title('Bar Chart Spanning Two Columns')

# Adjust layout for better spacing
plt.tight_layout()

# Show plot
plt.show()
```

### Using Plotly

Here’s how you can achieve similar results using `plotly.graph_objects`:

```python
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create a subplot layout with 2 rows and 2 columns
fig = make_subplots(rows=2, cols=2, 
                    specs=[[{'type': 'scatter'}, {'type': 'scatter'}],
                           [{'type': 'histogram'}, {'colspan': 2}]])

# Add traces to the subplots
fig.add_trace(go.Scatter(x=x, y=y1), row=1, col=1)
fig.add_trace(go.Scatter(x=x, y=y2), row=1, col=2)

fig.add_trace(go.Histogram(x=np.random.randn(1000)), row=2, col=1)

# Adding a bar chart that spans both columns in the second row
fig.add_trace(go.Bar(x=['A', 'B', 'C'], y=[3, 7, 4]), row=2, col=2)

# Update layout and titles
fig.update_layout(height=800, width=1000,
                   title_text="Subplots with Plotly")
fig.update_xaxes(title_text='X Axis', row=1, col=1)
fig.update_yaxes(title_text='Y Axis', row=1, col=1)
fig.update_xaxes(title_text='X Axis', row=1, col=2)
fig.update_yaxes(title_text='Y Axis', row=1, col=2)
fig.update_xaxes(title_text='Frequency', row=2, col=1)
fig.update_yaxes(title_text='Count', row=2, col=1)

# Show plot
fig.show()
```

### Key Points

- **Matplotlib**: Use `plt.subplots()` to create a grid of subplots. Adjust layout with `plt.tight_layout()`.
- **Plotly**: Use `make_subplots()` for creating complex subplot layouts and use `colspan` or `rowspan` in the `specs` argument to span across multiple columns/rows.
- Customize each subplot's axes, titles, and other properties as needed.

These examples should help you create various types of subplots with customized configurations. Adjust data and parameters according to your specific needs!

