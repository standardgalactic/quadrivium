so in this part of the lesson we're going to look at arrays it's quite a long section i'm going to
show you a lot of what arrays are all about and what you can do with arrays now in most instances
we're going to perform some functions on arrays and that's exactly what we're going to do in this
lesson i'm going to show you quite a few julia functions and how they impact arrays just to
showcase what an array is now first of all here's our first array i'm going to call it arr call it
whatever you want within the constraints of the syntax that is allowed in julia and you see i
enclose this in square brackets and i put commas in between the values so i have 10 12 14 16 and 18
and when i output that to the screen lo and behold we have the five element array they're all
integer 64s and you see this comma one comma one means we're talking about a column so if you use
other development interfaces such as develop environments i should say such as a light
table with a with a juno add-in it'll actually be called a vector a column vector because this is
indeed just what it is it is a column now let's just do a row vector so i'm going to call this array
underscore arr at least underscore row and you see i've still got my square brackets but i've
omitted the commas it's the spaces in between and if i run this section of code you see the output there
it is going to be a one by five array one row five columns all 64 but integer values and c comma two
this is now i don't really want to call it dimensions because it gets confusing as far as math is concerned
but as far as julia at least is concerned this two refers to this as being this is a row and you see
the one there meaning that that's a column now let's just use a function to populate an array
what i want to do is i'll just say sell all output toggle so we just get rid of what's to come
keep it as a surprise so array arr underscore rand and i use this rand function and it says five give
me five values and there i have a five element array they are 64 bit floating numbers values and they
are columns it's down a column and you see what rand does it chooses values from zero to one inclusive
and there's a cdo random selection of these values right there let's create an array in a different
way by using the fill function fill takes two values here seven comma ten i've called my array
sevens and if i element execute that you see it's a 10 element array of 64 bit integer values in a column
format and they're all sevens so the argument was what to fill your array with and how many elements
you want so 10 element array there i can also use it on strings so here i have a string i love julia
exclamation mark and i want three of those and lo and behold this is a three element array of ascii
string type again it's a column array now let's use this bang equivalent to our full function so it's
full bang and we're going to take lve which was our array there and this is what we're going to append
to the end and now i will have if we just select that section run it we see we have a three element
array now adding a bang to permanently change so that is still three let's run this again
i have a three element array i fill it and i add a fourth one and i still get three back
so clearly you see here this fill with the bang has not really changed this array and we'll get to
that now julia can repeat more than just a single value here we have rep mat function i have my array
here one two three as a column vector and i want it repeated three times let's run that there we go
we see a nine element array now of 64 bit integers in the column one two three one two three one two
three now using line space or lin space and log space so it goes like this lin space start stop and
how many elements you want so you're going to break this up the values one to twenty one in one to ten
twenty one equal uh bits and well i shouldn't say bits i mean little uh ranges type of you see is a
lin space of 64 bit values so that's a bit different from just being an array now let's print each of
those so for i in lins print line i in print line means it's going to all go in its own line and there
you see it starts at one it ends at ten and there are 21 of these little elements so it's taken
it's gone between one and ten and it seems to have added 0.45 to each step log space takes these
two arguments two and four and it says divide divide up some values between 10 to the power 2 and 10
to the power 4 now it's going to do by default it is going to do it is going to do 50 50 arrays 50
elements there so 10 to the power 2 is 200 10 to the power 4 is 10 000 there and it's got 50 equal
well there's a equal difference between each of these elements and there are 50 of them in total
let's do a few other things we're going to create two arrays of random values remember rand's going
to choose between zero and one inclusive and i want 20 of them for both of these computer variables
valz1 and valz2 i'm using semicolon just to suppress the output to the screen well in this case doesn't
really work um in ijulia here it's still going to output one of the two arrays for me at least
doesn't matter maximum valz1 let's run let's run that i want the maximum of all of those now every time
you run this you're going to get something different but it seems that value 0.9586 etc was the largest
of all the values of all the values in in one so you can clearly see this was valz2 that was
what was printed to the screen because valz1 certainly or valz2 certainly doesn't have this
number in it valz2 here as displayed i can say find max that returns the maximum value and its index
so it says in valz1 this number 0.95861 etc was the largest value and it was in position number one
same goes for minimum that's just going to return the minimum value and find min will return that
minimum value and its position extrema goes through an array and it's going to give us the minimum and
the maximum values in that array now just some descriptive statistics quite easy as well you can
i just ask for the mean of valz1 it'll give you that 0.551085 etc remember the equation for the
average or the mean is just summing all the values and dividing by how many values there are how many
elements there are and to count the elements in an array we just use the length function so sum all
the values divided by how many there are and it's just going to give us back exactly the same as what
mean did we can also ask for the median and we can also ask for the sample standard deviation
now i thought let's just include let's just include a bit of fun remember the equation for
the standard deviation sample standard deviation the population standard deviation just divides by n
but the sample standard deviation will be devised by n minus one so you take the average of all the
values and you're going to subtract from it from it each individual value and square that and divide
it by n over one and it's the sum of all of those the sum of all of those now let's just create that in a
little function so i'm going to create a function for this just for fun i'm going to call my function
sample standard deviation and it's going to take an argument x i'm going to implicitly have these little
computer variables here i'm going to have total and i'm setting that equal to zero so this is the
local variable with respect to this function won't exist outside of the function n is the length of
whatever array i pass to it so that i know how many elements there are and i'm defining this function
average and the average is going to sum all the elements in the array that i'm going to pass this
function divided by n which is the length now i'm going to run through a little loop for i in one to n
remember n is the length of the elements so it's going to run through all of the elements
it's going to total which is zero when we start it's going to update the total with the average
minus whatever element i am at the moment and square that so that's going to be this numerator bit here
and run through all of those so that i have a total a new total now total existed outside of this
for loop so it is explicit as far as this for loop is concerned but it's still implicit it's still a
local variable as far as the function is concerned but i can return something the square root of the
total which is now updated all these differences between each element in the average and divide by
n minus one and take the square root of that so there's my function it's a genetic function with a
single method because i which is any because i really didn't specify anything as far as limiting what
x should be now let's use our function stand sample standard deviation and i pass it the valves one
and it returns 0.314 what was the standard deviation 0.314 let's just make doubly sure i'm going to say
is julia's standard deviation equal to my sample standard deviation function and of course that's going
to return a true now we've seen maximum and find max and minimum and find min i just want to show you
what max and min does max and min will look through more than one array and it'll go element by element
and it's got to be of equal length these element i have so that they've got to have these pairs and
it'll just return the maximum of the two and same for minimum it's going to return the minimum of the two
now we can perform element wise operation so i can ask this boolean question for valves one and valves two
dot smaller than so it's going to compare the first element in valves one and the first element in valves
two and see if it is smaller and then run through all of them and it'll return this boolean it'll return
this boolean values here so false if it's not smaller than and true if it is smaller than now i can perform
this little uh change the value so i'm going to say in valves one and then then these square brackets
if valves one is less than valves two set that value in valves one equal to a hundred i'm just using a large
number now if i ask is everyone in valves two less than valves two and they will all be false because the
ones that did return it true will now suddenly change to a hundred uh almost getting to the end of this section
of the lesson let's do a few more things remember the collect it's going to start at one increment
in values of two and end at 21 i'm going to add that to odd and you see odd is now od i shouldn't
say just od i called it as an 11 element array one there it's a column vector one to 21 now i can use
the find function and that's just going to return the index value so find is odd in that so which of
those are odd values and it says one two three four five six seven eight nine ten and all of them all
of them were odd numbers and they were indeed all odd numbers so the find function here is going to
return just the index value for me uh return all the prime values for me in that and it gives me that
but it's the index of that so if you wanted the actual values you have to do this give the variable
name then find is prime in odd because in this square bracket it's just going to return an index
so it's going to show all the values in this od that are actually the prime numbers and you see
them there remember one is not a prime number we can just use this normal start stop instead of collect
so i'll call it nums but just remember this is a unit range it is not an array if i use collect
it's with start step and stop i can create an array but if i just use this range notation here 80 to 100
it's going to have the values 80 81 82 but as a unit range now i can still iterate through it because i can
just say any is prime numbers and it says true so the any is just going to return a true it's just
asking the question are there any prime values between 80 and 100 yes find the prime numbers
between 80 and 100 for and now you say 4 10 and 18 you see there so once again you can see what it
returned it returned the indices for me so if i wanted to return the actual values i've got to have the
indices since these are the indices i specify them for nums and that returns for me the three elementary
83 89 and 97 are prime numbers filter it's going to do the exact same thing for me but just give me
the values all in one go the all function on an array all is in integer nums yes indeed they all are so
they've all got to be true for this to return true so if i ask are they all even this is going to return
a false no they are not now just for a bit of fun i'm going to go to the type max of my 32 bit integer
values i'm going to subtract 10 million from them and then have this unit range from that till type max
i'm going to have this 10 million values and so you see there from that value to that value
and i'm going to use this macro at time to time finding all the prime numbers going through this list of
very 10 million very large values now the first time i run this it's a bit of a cheat because julia's got
to compile and everything not just execute it so the first time that you run this it's going to be very slow
the second time the code has been compiled optimized for the for my cpu in this computer and it'll show
the proper timings of all of this and the first time as i say this one is going to be very slow
remember i've got 10 million very very large values for it to go through and there you go
you see it found six four hundred and sixty five thousand eight hundred and seventeen elements so
there's prime values uh in those last uh and those last uh values and you see the runs took how long
they took and you see the 0.7 uh 72 percent gc time that it took so you can play a bit with that run
that code again you'll see you'll see what happens see the large memory allocation that was required to
do that so let's just have a small little array one two three four five and uh very last thing in this
i just want to show you combinations and permutations as it can be used on arrays so collect for me all
the combinations in ch and make three so take three of any of these and see how many combinations we can
come up with let's run that and it says you can have one two three one four one five one three four
one three five one four five two etc you'll see it's a 10 element array permutations works a little
bit different you can't choose how many of the elements you want to choose it's just going to go
through all that one two three four five and come up with all the different permutations and if you
know the equation for permutations you'll you'll you can calculate that there are exactly 120
permutations so quite a long section of this lesson this is going to be a very long lesson because i'm
introducing both collections and watch just giving you a showing of what can be done with them next up
we're going to modify our arrays
