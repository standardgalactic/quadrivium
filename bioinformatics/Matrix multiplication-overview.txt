To perform matrix multiplication in Python, you can use NumPy, which simplifies operations with matrices. Below are steps to create matrices and multiply them, similar to what you've described.

Firstly, ensure you have NumPy installed. If not, you can install it using pip:

```bash
pip install numpy
```

Here's how you can perform matrix multiplication in Python:

```python
import numpy as np

# Define the first matrix m1 (2x2)
m1 = np.array([[1, 2],
               [-1, 3]])

# Define the second matrix m2 (2x2)
m2 = np.array([[2, 1],
               [0, 1]])

# Perform matrix multiplication: m1 * m2
result_1 = np.dot(m1, m2)

print("Matrix m1:")
print(m1)

print("\nMatrix m2:")
print(m2)

print("\nResult of m1 * m2:")
print(result_1)

# Perform matrix multiplication: m2 * m1 (to demonstrate non-commutativity)
result_2 = np.dot(m2, m1)

print("\nResult of m2 * m1:")
print(result_2)

# Verify that the results are different to show non-commutative property
if not np.array_equal(result_1, result_2):
    print("\nm1 * m2 is NOT equal to m2 * m1 (non-commutative nature demonstrated)")
else:
    print("\nm1 * m2 is equal to m2 * m1 (which should not happen in general for matrix multiplication)")
```

### Explanation

- **Creating Matrices**: We use `np.array()` to create matrices. Here, `m1` and `m2` are both 2x2 matrices.
  
- **Matrix Multiplication**: The function `np.dot()` is used for multiplying two matrices.

- **Non-commutative Property**: By calculating both `m1 * m2` and `m2 * m1`, we can observe that the results differ, demonstrating the non-commutative property of matrix multiplication.

This code snippet demonstrates how to create matrices in Python using NumPy and perform multiplication on them while verifying the non-commutative nature of matrix multiplication.

The text describes how to create nested lists (matrices) and perform operations like matrix multiplication and scalar multiplication using programming. Hereâ€™s a summary:

1. **Creating Matrices**:
   - Matrices are created as nested lists.
   - Example matrices are defined, such as:
     - \( m_1 = \begin{bmatrix} 1 & 2 & -1 \\ 3 & 1 & 4 \end{bmatrix} \)
     - \( m_2 = \begin{bmatrix} -2 & 5 \\ 4 & -3 \\ 2 & 1 \end{bmatrix} \)
   - To suppress output in a programming environment, semicolons are used after matrix definitions.

2. **Matrix Dimensions**:
   - The dimensions of matrices can be checked to determine if multiplication is possible.
   - For example, \( m_1 \) (2x3) and \( m_2 \) (3x2) can be multiplied because the number of columns in \( m_1 \) matches the number of rows in \( m_2 \).

3. **Matrix Multiplication**:
   - The result of multiplying \( m_1 \) by \( m_2 \) is a 2x2 matrix.
   - Similarly, other multiplications are demonstrated, showing that order matters (e.g., \( m_2 \times m_3 \neq m_3 \times m_2 \)).

4. **Scalar Multiplication**:
   - Scalar multiplication involves multiplying each element of a matrix by a scalar value.
   - Example: \( 3 \times m_3 \) results in each element of \( m_3 \) being multiplied by 3.

The text emphasizes the ease of performing these operations using programming, highlighting both the syntax and logical structure needed for matrix manipulation.

