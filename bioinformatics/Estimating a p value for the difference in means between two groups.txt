Welcome to this video lecture where we're going to simulate a p-value.
So we're going to have two different groups, same numerical variable,
and we're going to compare the means between those.
Now under the null hypothesis, remember, there is no difference in the mean.
So we're going to use the simplest form of the null hypothesis.
So we're going to state that there's zero difference between the two means.
So two-tailed hypothesis with a zero difference.
And I'm going to use the Julia computer language to do this.
Now I do have a video lecture out on how to install Julia,
but just in case you haven't done so already, there's the website, julialang.org.
And you can just click on the download button there.
And you'll see at the time of the recording, we're at the current stable release of version 1.7.
And I'm going to do my coding in Visual Studio Code.
So you can just search for Visual Studio Code or code.visualstudio.com.
And you can download the appropriate version for your operating system.
Now I've set up my system so that I can type Julia in a command prompt or terminal window here on the Mac.
And it will start Julia for me.
There is a command that you can run.
And I'll show you the one for macOS on the screen.
So that will add Julia to your path environment as a path environment variable.
And you can just type Julia and it'll start automatically.
The reason why I do this is that I have separate environments for all my Julia projects.
And I install only the packages in that environment for that project.
I don't install any packages in my base Julia installation.
Once again, there's a description down below that'll take you to a video where I show you how to set this up.
So what I've got to do in my terminal window here is just to navigate to the folder that holds this environment for me.
So there we are in the environment.
I'm just going to show you the files that are in that environment.
And you'll see there's a project.toml file and a manifest.toml file.
And that holds all the information about the environment, the Julia environment that I've set up for all my data science projects.
And all I have to do now, because I've installed Visual Studio Code, is to type code, space, and a period or full stop.
Hit return or enter.
And that's going to start up Visual Studio Code for me.
And there we have Visual Studio Code.
And the file that I'm going to look at here is resampling under the null hypothesis.
By the way, for Visual Studio Code, if I click on these little buttons on the left-hand side,
you'll see all the extensions that pop up.
And you can do a search.
And there is Julia.
So you can see I've installed that extension.
And that is what allows me to use Julia inside of Visual Studio Code.
When I click on Settings there, tool down and I click Extension Settings.
And if I move down, you'll see the path on my system to my Julia file.
So it's applications Julia-1.7, the current version, at the time of this recording, .app,
forward slash contents, forward slash resources, forward slash Julia, forward slash pin, forward slash Julia.
So that this extension at least knows where to find my Julia executable.
So resampling under the null hypothesis.
So we're going to certainly look at that, but also there'll be a few other things in this tutorial.
We'll look at seeding the pseudo-random number generator, which is very new for version 1.7.
And we do that so that we get reproducible results when we call for random values.
I'm going to show you just how to create a data frame again.
Show you how to sample from categorical values using stats base.
Sample from a normal distribution using the distributions package.
Make sub data frames using the filter function.
So we're going to do some conditional selections so that we can create new sub data frames.
How to extract vectors from data frames.
How to do summary statistics of continuous numerical variables using stats base.
I'm going to draw a histogram and I'm going to use plotly.js as my plotting package.
I'm going to show you how to shuffle a vector.
So all the elements in a vector, how to shuffle them around at random.
And then how to calculate a p-value using the hypothesis test package just so that we can check on our results.
So as always, we start with the packages that we're going to use.
I'm going to use the data frames package.
I'm just going to be in that line that contains that code.
Hold down shift and hit return or enter.
And that's going to spawn the Julia REPL for me at the bottom here of Visual Studio Code.
And also activate the environment that I've set up.
Because if we see the Julia prompt here at the bottom, if I do my right square bracket, you'll see I'm not in the base installation of Julia.
I'm in the data science environment for Julia.
And by the way, if I just type ST then and hit enter, I see all the packages that are installed in this data science environment.
So there are all the packages and you can certainly look at those and install them for yourself.
And that'll be a good set of packages for data science projects.
Let's carry on.
We're going to use random.
That is a built-in package in base Julia.
Using distributions, stats base, plotly.js and hypothesis tests.
So the first thing we have to do is at least just set up our data.
And we're not going to import any data.
We'll just simulate some.
So I'm going to have a sample size of 1,000.
And I'm going to store that in the computer variable n.
And then I'm going to seed the pseudo-random number generator just with an integer 12.
If you use 12, we're going to all get the same results.
I'm just going to highlight both of those two lines of code.
The second one is setting up a data frame, and I've done that over multiple lines.
And I'm just going to execute, and I'll explain how I set that data frame up.
Holding down shift, hitting return or enter, and we're going to get a data frame.
And we can see there it's 1,000 rows and three columns.
So let's have a look at that.
I just use a computer variable df, quite common.
Use the data frame function, and that comes from the data frames package.
Just so that you know where these come from, I could say data frames dot.
And that'll do exactly the same thing, just to reference the fact that the data frame function
comes from the data frames package.
So I'm going to have three columns.
And you can just write any words without illegal characters.
And they don't have to be strings or symbols.
We just write, you know, the string, the letters themselves.
So id, I'm using a range there, 1 colon n.
And remember, n holds a value of 1,000.
Then I'm going to have a group column, and that is going to be the sample function from stats base.
And the first argument there is going to be a vector, and that vector contains two strings,
one Roman numeral 1, Roman numeral 2, and then comma n.
So it says sample with replacement from those two elements 1,000 times.
And then mass is going to come from, just could use generic variable mass,
that can be of a product, of an organism, of a human being, doesn't matter what it is.
I'm trying to be agnostic as far as our variables are concerned.
So I'm going to use the rand function to generate random values for me.
And I'm going to say, as first argument, take it from the normal distribution.
And now this normal function, remember, that comes from the distributions package.
So we can go there and say distributions dot, and that means we can see where that normal function comes from.
And it takes two arguments.
The first one is the mean, and the second one is the standard deviation.
So I say a normal distribution with a mean of 100, standard deviation of 10.
And I want, from that distribution, randomly select 1,000 values for me.
And that's how we end up with our variable, our data frame then, with 1,000 rows.
Now I want to make two sub-data frames.
I know that I have two groups by my categorical variable called group.
There is my categorical variable group.
And I'm going to use the filter function so that I only select rows which contain the value 1 in the group column.
So we use the filter function, and then I'm setting up this anonymous function here.
And instead of row, you can just say x, and then it'll be x, and then minus greater than, so a little arrow symbol.
Then you could have said x dot group.
But I'm going to use the word row because it kind of makes sense.
So go down row dot group.
And id, where the group at least equals equals, so that's conditional, is it equal to 1?
If that conditional returns true, it will be included.
If it's false, it won't be included.
And that's what the filter function will do.
So if we ran this, shift return, shift enter, we're going to get a new data frame.
It only has 479 rows, but you can see down the group column, we only have roman numeral 1.
So it's all our observations that fall into group 1.
And if we do that the same using the conditional for 2, we see 521 rows now.
And you can see under the group column, there's only roman numeral 2.
So we've created two sub data frames manually using the filter function.
Next up, what I like to do in many situations is just to extract a vector from a data frame column.
So I'm going to take all the mass, df dot mass.
So that's going to give me, that kind of notation is going to give me all the values in the mass column.
And I'm going to pass that as an argument to the collect function, which is going to return for me a standard Julia vector.
And I'm going to assign that to the computer variable mass.
So once that runs, I see now I have a 1000 element vector of 64-bit floating values, and that's exactly what we want.
And I'm going to do two more, where I just separately look at the masses for my new sub data frames, group underscore 1 and group underscore 2.
So I have those two vectors as well.
Remember, again, with the 479 and 521 elements.
And lastly, I just want to know the sample size of each of these, I should say.
So I'm just going to store those as n underscore 1 and n underscore 2 as Roman numerals.
And that is just passing this vector as an argument to the length function, so that I get back those two lengths.
So as always, we start with descriptive statistics if we want to know what's going on with our data.
And there's a describe function in the stats base package.
And if I pass that vector to it, we'll see down here, if we scroll down in our REPL route at the bottom, we see the summary stats.
We see the 479 elements.
There's zero missing.
The mean was 99.96.
The minimum was 69.
First quartile, median, third quartile, maximum.
And the only thing that you don't see there is the standard deviation, which could, of course, be helpful.
But, of course, you can just use the STD function to do that.
Let's also look at group 2, the masses of those in group 2.
And we see the 521 values, and they had a mean of 100.
And the question is, now, is there a difference between these two means?
So it's the same variable, mass, two different groups formed by the sample space elements of the categorical variable.
So group 1 and group 2.
Next up, we're going to visualize our data, and I'm going to do it using the plot function from PlotlyJS.
Remember, we imported PlotlyJS, so PlotlyJS.plot.
And I'm just doing multiple lines, which, of course, Visual Studio Code is going to underline with these little blue markers,
because it thinks there's a problem.
But it'll work fine.
My first argument is my data frame.
On my x-axis, I want mass.
And for my color argument, I'm setting that to using symbol notation here for group.
And remember, symbol notation there as well for that column mass.
So it's just going to separate out the masses for each of the two groups.
The kind of plot that I want is a histogram.
And then I just want to change the markers a little bit, because remember, with these two histograms drawn on top of each other,
you want a bit of transparency so that you can see both of the histograms.
So I'm going to set marker equals, and then the attribute, ATTR, I pass a value of 0.5 or half to opacity.
And then layout is going to give me access to the title argument and the bar mode argument.
And the bar mode, I'm setting to overlay so that the two are drawn on top of each other.
So let's run that.
Remember, this is Julia.
And there's a bit of work that needs to happen behind the scenes before the first plot is rendered.
So that's going to take a second or two.
And there we see, first of all, right at the bottom, you'll see a new icon there.
That's our Julia icon.
That's part of the Julia extension that we installed.
And that gives me all sorts of information in my current workspace.
For instance, we'll see some values there.
N is 1,000.
N sub 1 is 479.
We can see our data frame there.
So we get information on the variables.
And now we suddenly see a new tab with a plot.
And there you can see group 1 and group 2.
And because this is Plotly, I can click on that and remove one of the groups.
Now they're both removed.
Let's look at 1.
So I can see the histogram of these separately.
And that's what's lovely about Plotly.
And we can see the distribution there.
As far as the histogram is concerned, it looks very similar.
And we don't expect that there will be a difference between these two means.
So let's go about doing that.
And we start by just looking at what the difference is in our data set.
And I'm going to store that difference in the difference underscore in underscore means variable.
And I'm just passing our two vectors, holding the masses for both groups, passing that to the mean function, and just doing that subtraction.
And I get a difference of minus 0.16677, et cetera.
Now remember, there was no reason to subtract mass 2, the mean of mass 2, from the mean of the masses in group 1.
I could also have swapped that around.
And that will give me a positive 0.16677.
So that's very important to remember.
We have to look at both differences.
So now we're going to do this reassignment under the null hypothesis.
If you think about this very simple null hypothesis, that there's no difference between the two means,
that means it does not matter in which group any one of our instances falls.
We can just shuffle them around, reassign them to a different group.
Now what we're going to do is we're going to keep group 1 at that sample size and group 2 at the original sample size.
But we can just swap members around between those, so instances around those between the two.
Under the null hypothesis, there's no difference in the means between these two groups.
And what we say by that is, or what we mean by that is, it doesn't matter in which group our individuals fall.
The means are no different, and they shouldn't change.
And if we do that multiple times, every time, you know, we randomly reassign members to the two groups,
we calculate two new means, and we take the difference of the two means.
And then we build up a distribution of all those possible means.
So we just do that thousands of times over, and every time, under that reassignment,
we're going to get a different difference in means.
And we can build up that sampling distribution.
And remember that that sampling distribution should then start to approximate a normal distribution.
So let's do just that.
I'm going to set up an empty vector there, and I'm going to call it means.
And I'm going to do 5,000 reassignments.
And I'm going to do that with a little for loop.
So I'm going to say for i, which is just my counter, in 1 to resample.
So in 1 to 5,000.
So this loop is going to, this for loop is going to run 5,000 times.
And what are we going to use here is just the shuffle function.
As you can see there, the shuffle function comes from the random package.
So random.shuffle, and mass is just all the masses.
Remember, that's of all my subjects.
But I just randomly shuffle that.
And now I'm going to just assign that to a new computer variable, shuffled mass.
And now I'm going to create two new groups.
New group underscore 1.
And that is the shuffled mass.
So the order has been completely reshuffled.
But I'm going to go from 1 to n sub roman numeral 1.
Remember, that held a value of what my first sample size was.
So if I go from 1 to there, that gives me the same sample size.
And then new underscore group underscore 2.
That is also going to be shuffled.
And I'm using indexing again.
I'm starting at n underscore 1 plus 1.
So the very next subject, right till the end.
So it's that first lot and the second lot.
And they're all reshuffled.
So I've randomly reassigned individuals to new groups.
And then I'm going to use append bang.
So that exclamation mark there means I can just continuously append to what is at the moment.
At the first loop is an empty vector there.
And I'm going to append to this means computer variable the mean of the new group 1 minus the mean of new group 2.
So I'm just, every time this loop runs through, there'll be a new difference in means added to that empty vector.
So let's just do just that.
So I'm just going to hover over the end there.
Hold down shift, hit return.
And almost instantaneously, I have my 5000 values.
And what we're going to do here is just to plot them.
So I'm using plotly.js.plot again.
This time, slightly different notation because I'm not using a data frame.
I'm just using a vector to plot.
So I put that inside of square brackets.
Use the histogram function as you can see there.
On my x-axis, I want all those 5000 means.
And I'm adding a little bit of opacity.
And then outside of the square brackets is my layout.
And my layout is just going to contain a title.
So let's run that.
And there we can see my 5000 sampling units of sampling distribution.
So 5000 values there.
And you can see that approximating a normal distribution.
Now, our mean, our difference in means, that's our test statistic, falls somewhere there.
Remember, it was negative 0.16677.
So that's going to lie just to the left of the zero here.
But I could also have done the subtraction the other way around.
So I've just got to consider the positive side as well.
So positive 0.166.
And if you draw two lines up there, you can imagine I want the area of, if we were to use a function,
to the left of that towards negative infinity and to the right towards positive infinity.
What we're going to do here is just to ask what fraction of values was less than minus 0.16677.
And what added to that, the fraction of values that were more than that.
And that is going to approximate for us a p-value.
So let's just do that.
And it's a simple line of code here.
I'm going to sum over means dot less than difference in means.
Remember, my difference in means was my actual value.
So I'm wanting to know all the values, how many values are less than that in my whole vector of 5000 means.
And I'm using the dot operator there such that I can do that subtraction or that comparison at least element by element.
And because that returns true or false values for me and true is represented by a 1 and false is represented by a 0,
I can sum over all those.
And that sum is just going to tell me the number of values in all my 5000 means that was less than my actual difference in means.
And I'm going to add to that, doing the same things, the ones that were more than minus the difference in means.
So that's going to be positive 0.16677.
And I'm dividing that by 5000 once I do that addition.
So that tells me the fraction of my 5000 values that was less than my difference and more than the reflection on the other side of my difference in means.
And if we do that, we see 0.795.
So that is the approximating a p-value for me there.
Let's just use the hypothesis test package.
There's a p-value function in there.
And the argument that I'm going to use is the equivalence variance t-test.
And I've just got to pass the vector to vectors.
Mass underscore 1 and mass underscore 2.
And that's going to work out the p-value for me.
And we see it's 0.7932.
So very, very close to each other, those two.
And that is exactly how we approximate the p-value.
How we use the null hypothesis, this reassignment.
And we work out, just based on the actual difference in means that we have, that's our test statistic,
what fraction of values are less than and more than on either side of our resampled histogram, as you saw there.
So conceptually, a very clear understanding of where this p-value comes from,
how we have this p-value for the difference in means.
P-value for the difference in means.
You
