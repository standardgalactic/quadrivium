So, we want to do a little bit more than just that single expression, just that single block
of code that can be executed as in the mathematical expression we saw before. But what if we want
to do a little bit more? We've got to use a different syntax. And this is what we do.
We're actually going to declare this block of code. We're going to declare this function.
So we use this keyword function and then we give it a name. I've called it MLTPL, short
for multiple. Any name except for keywords and a few other normal Julia restrictions that
you can't use, but certainly MLTPL is no problem. Again, it's going to take two arguments and
I'm going to call them X and Y. The first thing that is going to happen when this function
is called, it's going to print a line and it's going to print a line that says the following
inside of a string. The first value is, and then we have this $X sign. This X refers to
that X, and this $, refers to the fact that this is a placeholder. So we will look at strings
in a different lesson, but this is how you would use it most of the time, I think. So
just putting in that placeholder and that $ sign is an escape sign just to say, look,
don't print that, but print the actual value that is inside of that variable. And then the
second value is that, which is the Y that comes from the value that's passed there.
And then we have this backslash N combination and that is just shorthand for new line. So
it's just going to be like an enter key or the return key, a carriage return. And then we're
going to have the $X again, the value that's an X, then this X, which is this multiply,
I suppose, in string format. And then the value of Y is colon and end. And then we see this
return keyword and it's going to take the value that's an X and multiply it by the value that's
in Y. And we end. All functions have to be ended. So this indentation that you see here,
that happens automatically here for me in iJulia. And you'll also note there's no colon that we put
after that as we might do in other languages such as Python. This is picked up by this interpreter
itself, by iJulia itself, I should say, these indentations forming this block of code. So let's
execute that. It gives us back this name. Remember before it gave us back the name F, but this time
I've called it MLTPL. And it says it's a generic function with one method. Again, method is all
about multiple dispatch and we're going to get to that. Now let's call this function by passing two
arguments to it. Now I call the function, this function now lives in memory and all of its methods
actually. As I said, we'll get to that in multiple dispatch. We call it and we pass a value for X and a
value for Y. It's in that order. These are ordered arguments. X comes before Y. The first thing that
I pass is going to go into X. The second thing I pass after the comma is going to go into Y.
So let's see what happens. Just as we expect, we get this string and it says the first value is three
and the second value is four. So see that dollar X sign and dollar Y sign. Those are placeholders.
It passes the actual values to it. And then we see the three times four is, and that is what is
returned. It returns the value that is X times Y. And indeed that is 12. Now do we always need this
return key? Let's see what happens if we emit that keyword. So here we have another function. I'm
going to call it MLTPL2. It takes two arguments, X and Y. Now this X and Y, it's this placeholders for
what gets passed. So we're going to print another little string, and this time I'm just using blah,
blah, blah, multiply. It doesn't matter. All I want to show is that X times Y, there's no return.
So let's see what happens now. It is a function, a genetic function with one method, no problem.
Let's call it and pass two values, blah, blah, blah, multiply, again 12. So I didn't need that
return keyword. But look at this. We go a bit crazy. I've got this new function. I'm calling it
MLTPL3, again with two arguments, print more, blah, blah. Now I have X plus Y and X times Y.
What's going to happen now? So don't be confused by using this name here, multiply, or some short
head for multiply. That was just my choice. I could call it anything within reason. But I'm passing
two expressions here, and I've got no return. What is going to happen? Again, it's a generic
function with one method. But now let's see what happens. I'm passing a 3, 4. Are we going to see
7 and a 12? No, we are not. This is what we're going to see. Blah, blah, blah, blah, blah. And then
we only see 12. So what Julia does is it will just automatically return this last line. It is going
to ignore this. It lives some way, I suppose, but you can't do anything with it. It's this
last line. It will take this last line, which is X times Y. Now, it needn't just be the one
thing. Remember, it was just one thing we did here in the last line. That's 12. We can
actually do some more. Look at this new math function of mine, a and b. Print. So again,
these are just placeholders. Before we used X and Y. Note that I now use a and b. It's going
to print. This function will return addition, subtraction, and multiplication of the values.
And then my placeholders a and b. And again, this is escape backslash to get the full stop
there. And then I'm going to have a plus b, a minus b, a times b. Now what's going to
happen now? Because it's all on the same line. Is it just going to do the a times b? There's
no return keyword because anything after the return will certainly be used. Let's see what
happens. And I'm going to call it with 3 and 4. And there you see my string. This function
will return addition, subtraction, and multiplication of the values 3 and 4. And I get this tuple
back. A tuple with 3 values 7, minus 1, and 12. And that becomes very useful. So first of
all, we've learned that it is the last line, irrespective of there being commas in it, will
be returned. Now because there's 3 things that are returned, I can actually use 3 computer
variables. I've named them ans 1, ans 2, ans 3, 4. I should say ans 1, 2, and 3. Call this
math function with its 2 arguments. And there we have, we get the return of this string with
this placeholders 3 and 4, and the tuple that it returns. But now I can ask what was answer
1, and indeed answer 1 was 7, referring to the fact that I got a tuple back of 3 values. So if I do
this kind of assignment, I'm going, this is going to be 7, this is going to be negative
1, and this is going to be 12. So it becomes a useful way of dealing, of using functions.
Now we've looked at two forms of syntax to create our functions. In the next section we're going
to concentrate a little bit more on these arguments. I'm going to show you how to deal
with optional arguments and default values.
