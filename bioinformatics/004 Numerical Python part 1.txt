In this lecture we're going to start looking at the module called Numerical Python.
Now we've just looked at the Math module and that increased our capabilities,
but we need to go a lot further.
We need to do a bit more.
And that is where Numerical Python comes in.
Let's have a look.
And here we are back in the shell.
And we have to import, as we did with the import math as we saw in lecture 3,
we've got to import Numerical Python.
And the way we do that is still with the keyword import,
but we didn't write out NumericalPy.
It is known as NumPy, NumericalPy.
And instead of just bringing in the whole package like this,
let's give it a shorthand name.
So we put keyword as and then np.
Now the same would happen for math.
Let's just have a quick look at math.
If I said import math as m.
Now remember I had to say math.py.
Now I can just say m.py.
Okay, I have shortened that name just to make it easier for myself to write.
Now no one would probably do that with a math module.
Just write math.py.
But this is what happens.
I am just shortening it because I have to invoke that method every time that I want to use it.
And NumPy traditionally is just imported as np.
So I can now just refer to it as np.
And it's going to be the same as math where we had np.sine for instance.
We can have np.something.
Now before we just looked at previous lectures just at some simple arithmetic.
But what we can also do is just assign variables.
So I could say x equals 3 and y equals 4.
And if I now said x plus y, it was going to be 7.
If I let z equals x plus y, and I just typed in z, that was now going to be 7.
Remember, it will look at the right hand side first of any equation.
That's what a computer program does.
So it's got this bucket or variable called x.
And what is inside of there?
Well, there's a value 3 at the moment.
Now it looks at the bucket called y.
What is inside of it?
There's 4.
I'm going to add these two.
That gives me 7.
And I'm going to put that value inside this new bucket called z, the variable z.
Now, let's have a look at what NumPy can do for us.
Numerical Python.
Let's say x equals np dot.
And the first thing we usually learn is, well, you'll see a whole lot of function pops in here,
in the shell here that tells me what I can put here after the dot.
And as you can see, it's frightening how many things there are.
And we certainly won't go through all of these.
But we're going to create an array.
Just an array.
If only I can spell array, that will also help array.
And let's just say, it says there, little tooltip, an object, data type, copy, order, etc, etc.
We don't have to do that.
Let's just say 10.
Just say 10.
And if I now hit x, it says, well, x equals array.
And there's just 10.
What has happened here?
Well, it's created this array.
And there's just a value of 10 inside of it.
Now, let's do something a bit more interesting.
I could say np.array.
And let's make it open and closing parenthesis.
But inside, I'm going to put these square brackets.
And inside the square brackets, I'm going to put some values.
1, 3, 8.
Let's have a look at x now.
Now, x is this array of integers 1, 3, and 8.
I can go a step further.
I can say np.array.
And I'm going to have these brackets again.
And square brackets.
And inside the square brackets, I'm going to have square brackets.
What about that?
I'm going to have 1, 3.
And say, for instance, 4, 2.
Let's have a look at what happens here.
So, x becomes this matrix now.
2 by 2 matrix.
Now, we will do linear algebra later.
And I suppose we're going to use more of another module for the linear algebra
and not numerical Python.
Numerical Python is really geared towards something other than pure linear algebra.
But that's what we've done there.
If I said x equals numpy dot array and parentheses and square brackets and just 1, 3, 4, 2.
What would have happened now is it would just be one long array.
It's not a 2 by 2.
Now, there is something I can do to switch it into a 2 by 2.
And we might have a look at that later.
So, now let's have y equals twice x.
2 times x.
What is going to happen to y now?
Well, y is this going to be a scalar multiple of my, I suppose I shouldn't, but I can call this a row vector.
So, it's 2 times each element.
2 times 1 is 2.
2 times 3 is 6.
2 times 4 is 8.
And then this 2 times the last 2 there gives me the 4.
Okay.
So, that's what y is.
Let's say, let's just make sure now.
Let's just make sure.
What is x?
X is that.
Y is that.
What do you think would be if I said x multiplied by y?
Now, if you know some linear algebra, you know this would not be allowed.
You can't get the dot product of these two matrices because they are both row vectors.
But, look at what happens here.
In numerical Python, this is called broadcasting.
So, what the broadcasting is going to do, it's going to just take element 1, element 1 and multiply those.
And that gives me 2.
Element 2 there.
But, it's actually 0, 1, 2, 3.
Okay.
So, we're going to have 3 times 6.
That gives me my 18.
4 times 8 gives me my 32.
And, twice times 4 is 8.
So, that's called broadcasting.
So, it's a special type of multiplication.
I could also have said x plus y.
And, that would just have given me the addition of all these elements.
What would happen if I said x0 like this?
What would that give me?
Well, that's what I mentioned.
I said, if we look at x here, that would be the 0th element, the first element, the second element, 0, 1, 2 and the third element.
So, I could just call, if I were to call x, let's call x number 2.
Which one would that be?
Well, that would be the 4 that we're calling.
So, I can create these arrays.
And, I can call any of the values.
And, I can do the arithmetic on it called broadcasting.
Now, just for this lecture, the second thing I want to show you is just this np.a range.
And, it says start, stop, step size and de-type, data type.
I hope you can see at the bottom.
I hope the video doesn't cut it off too much.
Let's have a look.
I'm just going to put the start value there.
And, now if I say x, look what it has done.
By default, if it's just one value, it takes the end.
And, it will always start at 0 and then go for 10 values.
That's 1, 2, 3, 4, 5, 6, 6, 9, 9 would be the 10th one.
There would be 10 here.
But, because we've included 0, we're still going to have that.
I can still say, apologies, I can still say give me the 0th element.
And, that is going to be 0.
And, give me the 10th element.
That is going to be, shouldn't have done that.
Let's have a look.
9.
And, that is the 9.
Because, we start counting at 0.
In other words, there isn't a 10th element.
Although, there are 10 elements in there.
Now, let's just use numpy.arrange.
And, let's do this.
The start value.
Let's start at 10.
Comma.
Let's stop at 21.
And, let's go in step sizes of 2.
If I now have x, look what it's done.
It's gone 10, 12, 14, 16, 18, 20.
Just as we expected.
And, it's going to stop there.
Just be careful.
Let's just say np.arrange.
10 to 20 in steps of 2.
That is not going to include the 20.
Because, it does, it never includes this,
a range never includes this final step.
This final value.
So, if you wanted it included,
you had to have gone slightly bigger than that.
Now, we've seen the value of x.
But, I can also ask it, what is x?
x.dtype.
What is the data type?
I can just ask it.
It says integer 64.
That is the data type.
So, it's seeing each of these as integers.
So, if I were to say x divided by 3,
what was going to happen?
Look at that.
It would say, it would do this broadcasting again.
So, it's 10 divided by 3.
But, that gives it a value of 3.
Because, remember, these are not floating values.
These are not floats.
Now, I can just quickly change it to a float.
I can use keywords such as, as float.
But, let's do it properly.
We're going to say x equals numpy.arrange.
And, we're going to start at 10.
We're going to end at 21.
We're going to go steps in 2.
And, we're going to say dtype equals, we want it to be float.
So, although there are different floats.
Float 16.
Float 32.
Float 64.
It will only take the value float here.
Or int.
Some others as well.
And, now look at it.
It's 10 dot, 12 dot, 14 dot, 16 dot, 18 dot, 20 dot.
And, if I now say x dot, dtype.
It will tell me it is now a float 64.
As opposed to an integer.
And, if I now divide each one by 3.
We see very neatly that it has gone along.
And, it has made floating point values of this.
So, very nice and neat way to make arrays, row vectors and we can do a lot with them.
