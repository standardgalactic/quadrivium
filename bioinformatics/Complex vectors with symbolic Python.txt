And so you've seen the video of how to take pen and paper and work with complex valued vectors.
Now I'm going to show you how to do the same thing very easily in Python.
Now do remember there is a link in the description down below to a video
where I show you just how you can set up your Google Drive, so just your Google account,
to use Python. You don't have to install anything and you absolutely don't need to know anything
about Python. So watch that video first if you haven't done so already. Just set up your Google
Drive and then just code along to do the mathematics. It'll help you understand the
mathematics and along the way you'll also learn a bit of Python. So let's look at complex numbers
inside of complex vectors, so complex valued vectors using Python. I'm here in my Google Drive and I've
opened a brand new Google Colab notebook. I've already populated this notebook. As before I
don't want you to sit around and wait for me to type because I really don't type that fast. Now
at the top, we see our title, complex valued vectors and matrices. And in this video, we're
just going to concentrate on vectors. I'm trusting that you've watched the pen and paper lecture on
working with complex valued vectors. And I just want to show you here how easy it is to do in Python.
So we see name and we see an affiliation. Remember these, if I just open them up, they are just
text cells. So let's hold down shift and hit enter. And that executes. As always, these notebooks are
produced under an open license. And you can find out more about that license here. In this section,
I'm just going to import the packages that I want for this notebook and do the setup. Now remember
Python, there's base Python, that's the actual language, but we can expand that language through
various packages. And some of these packages, or at least the functionality inside of that package
is what I import here. SymPy is symbolic Python. And in that package, there's a function called
init underscore printing. And what that function is going to do, it's going to take SymPy code and
express the result of that code as nicely formatted Lartec. In other words, it looks like your
mathematical textbook. So I say from SymPy import the name of the function. And I'm going to click on the
little play button there. But I can always just hold down shift and hit enter or return. Here we're
going to immediately call that function. I've imported it as such. It's right there. Therefore,
I can just call it as if it is a function that's inside of base Python because I've extended base
Python by adding this function. So let's call that function. Nothing's going to happen as far as we can
see on the screen at least. But behind the scenes, this notebook now knows if we execute SymPy code and it
requires Lartec formatting, it's going to do that. Now, there's a couple of other things that I want
to import from the SymPy package. I want to import I, that's uppercase I. And that is the symbol that
we're going to use for the imagining unit I, then a symbols function. So always commas in between,
remember, the symbols function is the function that's going to create mathematical symbols for me,
I see the matrix function there, that's uppercase M, that's going to create a matrix object,
the SQRT function that calculates the square root, ABS with an uppercase A, that is going to
calculate the modulus for us, as far as complex numbers are concerned, the adjoint function for
the emission adjoint. And then you see lowercase o, if you put it directly next to each other there,
that denotes infinity. So I'm going to execute that code. And then next, just because I want to show
you inside of SymPy, there's a physics module. Inside the physics module, there's a quantum module.
And inside of that, there's a dagger module. And then there's this object, this function that
creates at least an object, which is the emission adjoint. And that is the dagger function with an
uppercase D. So I'm just going to show you that these things would do exactly the same thing. There
we have adjoint. And here we have dagger, they're going to do the same thing. So one thing that you'll
notice here, I did not import the SymPy package as a whole. Now, certainly, you can just do that,
you can say from SymPy import star, that's never advised though, or you can just say import SymPy
as SYM. And then every time you want to use something inside of SymPy, you would have to say
some SYM dot, whatever namespace abbreviation you used. But what I like to do is just import from
these packages exactly what I need. And if later on in the notebook, I remember that I, you know,
want some other functionality, I would just come back here and just add that. So here's our first
complex valued vector section. So here's my vector. And we see the bold faced you there. Let me just
click on this double click on the cell so you can see how it was generated. It is just a text cell do
remember that you hover in between these cells. And you can add a code cell or a text cell. So this
is a text cell. There's my normal English. But you can see that I have this opening dollar symbol
symbol, and closing dollar symbol. And in between, we see some latex format formatting. So that's going
to give me mathematical typesetting. Here we see double dollar symbols. And so that's going to print
for us a nice, neat mathematics in the center of our screen. And then you also see I put these little
backticks in front and behind some words. And when this cell gets executed, that's going to look like
code text. So it's just a bit of formatting. And there you can see the result of all that formatting. So I'm using
a dark theme, obviously. And so you can see there the word matrix, the word reshape, and then the use because
they've got that little backticks around them. This is the formatting that we're going to see. And then nicely in the
middle of the screen, we see that you now you has three elements one plus two, I three and four minus I. And as you can
see there, you as an element of c three, that that is a complex vectors in three, there's three elements in
that vector. So we are just supposed to recreate this vector in Python. And so I'm going to use a name, I'm
just going to use lowercase u. Remember, that's up to you. That's your decision, as long as it's not a keyword in
Python, or doesn't have any illegal characters in it, like a space, you can call a computer variable, which
remember, it's just a name for a little reserved space in your computer memory, that's going to
store this object that you want to create. And we do that with an assignment operator, which is the
equal symbol. And so the equal symbol, the assignment operator is going to look to its right, so it's going
to take whatever is to its right, and it's going to assign it to whatever is to its left. And to its
left is the computer variable name, which, you know, is, is for you to decide on. So we're going to use
the matrix function that's uppercase M. And you can see it's a function because I see a set of
open and closing parentheses, and yellow there, there's the closing parentheses.
And inside of that, I'm passing a Python list. I know that it's a list object because it is square
brackets. So we say that there's a single argument in this matrix function, and that argument is a
Python list object. And a Python list object, it's just this object, and it contains these elements
separated by commas. And so how would I write one plus two times I? Well, there we go. It's one plus
two times I. And remember the uppercase I, we imported that from some pi. And that is the
imaginary unit. We also see the star symbol because the keyboard doesn't have a multiplication symbol.
So we use the star symbol. And that reads one plus two times I. Now you needn't put spaces in between,
I like to put the spaces, it just looks a bit cleaner. Then comma, and then just three, because
the second element is three. And then comma, there's my fourth, my third element, I should say,
four minus one times I. So you'll have to put that one times I there. So that's it. That's actually my
whole function that I've highlighted for you on the screen there. But we do notice that this is a
column vector. So we want actually three rows in one column. So I am going to call the reshape method.
Now remember, a method is a function that is applied to an object that already exists. So there's my
object, the matrix object. And so I'm just going to apply this function to that object. And in that
sense, we can call it a method. So it's going to be dot reshape. And the reshape just wants to take
this matrix object and reshape it into the number of rows and the number of columns. And so there I'm
going to put a three comma one. And then finally, I'm just going to call you this computer variable
that I've assigned this matrix object to so that it actually prints out to the screen. So let's run
that. And look at that, it looks exactly like the mathematical typesetting we did by hand. But because
we use that in it underscore printing function, this code will export something that looks like your
mathematical textbook. And so there we have our column vector, our complex valued vector. So it's very easy to
create these. I just want to tell you, you need not have used that reshape when it is just a
single array of values. And they just say, there we go, a list object is going to do a column vector
for you anyway. But I like to put that reshape and always just remember that I'm dealing with a three row
one column matrix, you can think of that, but it is a column vector. Now, let's talk a little bit about
the arithmetic of complex vectors. And here we just asked to calculate three times u. And that's very
simple. There's my code. And it's three times u. Again, do remember, you can always just hover in
between cells, add a code cell, it'll generate that new code cell for you. And you can just type your code
there. Do also remember that in a code cell, when I have a single hashtag symbol, that is where I can leave a
code comment to myself and Python is going to ignore everything on a single line that is, you know, that that
follows a hashtag symbol. And so here we just have three times u. And when I execute that by holding
down shift and hitting enter or return, I see that three, the scalar three has been multiplied by each
of these elements. So three times one plus two i gives me three plus six i. And three times three is
nine. And three times four minus i is 12 minus three i. So that's very, very simple. So we're talking
about vector addition and subtraction, let's create this second vector v, I'm going to assign it to the
the computer variable v. Again, that's up to you, my assignment operator, and I'm going to use the
matrix function again. And look, this time, I did not use the reshape just to show you you didn't
really have to but it's only because I only have a single list object there. It's a single array. So
I don't have nested list objects there so that I have more than one column. So I need to put the
reshape there. But as I say, I prefer to do that. And so there we have one and then three plus i and
then two minus i, all printed nicely to the screen. And now if I want to add u and v, I'm using the
computer variables to which I assigned these matrix objects. And so when I add those, we can see the
element wise addition has happened. And the same is going to happen when I do the subtraction. So there
I have u minus v. Now remember, there isn't really subtraction, let's put that in inverted commas,
because it really is just addition, and scalar vector multiplication combined, such as if I say
u plus negative one times v, which is actually what we have. So when we subtract, it's actually
negative one, the scalar negative one, and we're going to multiply that by the vector v. And then we're
going to add that to the vector u. So let's talk a little bit about the emission adjoint of a complex
number, at least a complex valued vector. And so there I have my vector u, it's an object that
already exists. And if I want to apply a method that is a function to the object that already exists,
I use the method. So the matrix object, Python knows that is there's a bunch bunch of functions
that it can apply to the certain object that's tied to this object, and that's built into this object.
So I can just call that I can say u dot adjoint. Open close parentheses, because adjoint is actually
a function, but I'm applying it as a method to an object that already exists. And then we see we have
our row vector now. And we have two plus one plus two i becomes one negative minus two i. And three
remains three because we have plus zero i, and four minus i becomes four plus i. So you see the emission adjoint
there. But if you remember, we imported the adjoint function. So we can actually use the adjoint
function now and just pass u as an argument to the adjoint function. So it's going to be exactly
the same. Now you need not have imported that adjoint function because it's already built into this
object. So you can always use it as a method. But if you want to use it as a function, you have to
import that specific function from Simpy, which I did right in the beginning, so I can use adjoint
as a function. And I remember I promised you there's this dagger object as well. So if we use the dagger
function, we see it's done exactly the same thing. So let's talk about the dot product of complex vectors.
And so I want to calculate u dot v. And remember, that's the emission adjoint of u times v. And this is
one way that you could do it. You could say u dot adjoint. That's going to do the emission adjoint
for me, as we've just seen. And then we're going to multiply that by v. And so that's going to give
us this result. Now, the problem is, this hasn't been simplified yet. And one of the ways to do that
is to do exactly what occurred in this line here. But I'm putting that inside of a set of parentheses
so that I get a single object back. So I'm taking all of that, putting it inside of a set of
parentheses. Now I get a single object. Now on that object, I can call the expand method.
And now all that simplification is going to take place. And I have my result,
which is 19 minus i. The dot product results in a scalar. And the scalar here is a complex number.
Now there's other ways to do it. I can also use the dot method. So I'm going to take u,
that's already my column vector, complex valued vector, dot, dot. And so the dot method is going
to apply the dot product. And so what do I want it to be dotted with? Well, I wanted it to be dotted
with v. So I'm going to put v as my first argument to this dot method. But I do need to tell Python
that I want the mission adjoint of u, that this is a complex valued vector, and I want the dot product
such that I include the mission adjoint. If you don't put that, it's going to just do,
try and do, I also want to put this in inverted commas, normal dot product. So it's not going to
take the complex conjugate of every value in u as it turns u into the transpose of u. So you have to say
the second keyword argument. So we actually use the name of the argument and the Simon operator,
and we set that to true. And that's going to do the exact same calculation for me.
Still, it has not done, you know, that that simplification, it has not
multiplied these two terms. So once again, I'm going to take all my previous code.
And there it is. Now, I don't have to put everything inside of a set of parentheses,
because it already ends in a parenthesis. And so I can just call the expand method there,
and we're going to get the exact same result, 90 minus i. The only difference is here, we're going
to see the value, a single number, 90 minus i, whereas before it was actually a Python list object,
and we had one element in the list object, which was 90 minus i. So that's that slight,
you know, difference between the two. But for our purposes here, just learning about
more advanced than the algebra, that's of no consequence to us here right now.
So let's look at creating a scalar c. And I'm going to create that as c, as one plus i,
and print that to the screen, because I want to do scalar vector multiplication. We've seen that
before. So it's a c times u. But I want it to be expanded. So I'm going to put c times u inside of
parentheses, because once I have a final parentheses there, I can just call the expand method on that.
And there we get the result of one plus i times u. But now I want to calculate this. Now remember,
we had two ways of doing it. It was c times u and take the emission adjoint of the scalar vector product.
Or I can take the complex conjugate of c and multiply directly with the emission adjoint of u.
So let's look at that. So again, I'm going to put everything in a set of parentheses such that I can,
you know, create one single object. And on that object, I call the expand method.
And what I want here is c dot adjoint. Now that adjoint is going to give me the complex adjoint.
And if I, you know, because that's a scalar c, but once it's a complex vector and I call adjoint,
it's actually going to do the emission adjoint for me. So it's, you know, it's the one single method,
but it knows how to deal with a single complex number and how to deal with a complex value vector.
And so let's do that multiplication. We see the result there. And now let's do it the other way
around. I'm going to do c times u, and then I'm going to call the adjoint method on this c times u.
And then also the expand after that, because, you know, I just wanted to expand it as well.
And you can see we get exactly the same result. So for this little example, we see what we had said
before. If you do the product first, the scalar vector product, and then take the emission adjoint
of that versus taking the complex conjugate of the scalar times the emission adjoint of your vector,
it's going to do exactly the same. It's going to do exactly the same thing. So let's do it here.
As far as taking c times u, the scalar c times u dot v. Now, remember, that's the same as this.
It is, you know, we have to take as far as that u is concerned, the first vector is concerned. We've
got to take the emission adjoint of that. We've just seen there's two ways to go about that.
So let's look at that. I'm going to say c times u, right there. So that's, you know,
it gives me one vector back. And then the dot method and v. But I'm saying her mission equals true,
because I do have to tell Python that it really needs to do a proper job here.
And then I call the expand method on all of that. And that gives me 18 minus 20i. And now let's do
that the other, the other way around. So I'm going to take c times u, and then take the adjoint of all
of that. So I'm first doing that multiplication, scalar vector multiplication, and then, you know,
calling the adjoint of that. So I'm taking the emission adjoint after that scalar vector
product. Then I'm calling the dot method and dotting that with v, and then ending up just with
the expand. So the simplification can take place. And we see 18 minus 20i. And then the other way
around, remember, if I have u dot c times v, I don't have to do anything to the c times v.
And so let's just do that u dot, and then c times v. I still have to say her mission equals true,
because u has to be, you know, we have to take the emission adjoint of u to do that dot product.
And now we see it's 20 plus 18i. As opposed to cu dot v, we have u dot cv, and we're going to get a
different result. Now, the last part in this section was just remember to calculate various
forms of the norm of a complex vector. And I do remind you here, the L2 norm of u,
that is just the square root of u dot u, or then the square root of the emission adjoint of u times u.
And there is a norm method. So once I have a complex vector u, I can just call the norm method.
By default, it's going to do the L2 norm. And then we can see it's the square root of 31.
Now, what I want to show you here, I'm going to take the square root. So there's my sqrt function.
Now remember, I imported that from from some pi so I can use it directly. It's not part of base
python. So if I didn't do that import, I can't use the sqrt function. And so I want to take the
square root of u dot u. So there's u dot u, but it is emission. And then after all of that,
I'm going to call the expand just so that there's simplification and we see the exact same result.
It's the square root of 31. Now, just to look at this, do remember, look at the pen and paper
lecture, you'll see how do we take this norm of c times u. And you can see the different ways to do
that. It would require the modulus of c. So let's print c to the screen just to remember what it is.
Now I'm going to pass c to the abs, uppercase abs, stands for absolute, but it's going to calculate
the modulus as far as a complex number is concerned. And there you can see it's the square root of one
squared plus one squared, which is the square root of two. That is the modulus of c. Now what I can do
is right here, I can just say c times u and then call the norm on that. And now we're going to get
square root of 62. And let's do it the other way around. Let's take the modulus of c. And I'm going
to multiply that by the norm. So that's the other other way of doing it. And we get exactly the same
result. So what we've done here is, if you read this little section up there, and remember from the
pencil and paper exercise, that there's the two ways that we can do that. And it gives us exactly
the same result. Now by default, as I said, we're going to get the l1 norm and the l2 norm. But I can
also call the l1 norm by just passing the argument one to this norm method. And that's going to do
this l1 norm, which is going to take the modulus of each of the elements in my complex vector and it's
just going to add that. So let's just look at the first element. Do remember that Python is zero
index, so it starts counting at zero, I'm using square brackets, and that's going to give me indexing
or addressing. So I just want the first element, which would be the zeroth element in this vector.
And that was one plus two i. So if I take the modulus, by taking this first, this first element,
one plus two i, and I'm passing that to the abs function, it's going to return the subject square
root of five, which is the square root of one squared plus two squared, that is square root of
five, absolutely. And so now what I want to do is I just want to take each one of those, remember there
were three elements in u, and I'm just going to add all their moduli. And there we get square root of
five plus three plus square root of 17. Another way to go about that is just to evaluate it. And what you
can do is say u.norm, one, and then eval f, I'm using the eval f method. And if I do that,
that's going to give me a numerical approximation of the square root of five plus three plus the square
root of 17. So in case you want to do that in SymPy, symbolic Python, once you have a SymPy type
object, you can always just call eval f, that eval f method, and that's going to give you a numerical
approximation. Now lastly, let's just remember this norm with respect to infinity. And that's just
going to look at the largest modulus. And I'm going to pass that infinity symbol, that's the two
lowercase o's as an argument, and we see square root of 17. And if again, if we look at those three
moduli, square root of five and three and square root of 17, certainly square root of 17 is the largest
of those three. And so this L infinity norm is going to be the square root of 17. So I hope you
can see just how easy it is. And if you just use normal Python, maybe numerical Python, you can do
all of this with numerical Python. But that's always just going to give you this in these numerical
approximations. At least with SymPy, you're going to see something that looks a lot more like your
textbook. And that's why I absolutely love SymPy.
