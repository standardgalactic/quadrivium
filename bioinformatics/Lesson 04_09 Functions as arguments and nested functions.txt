Now we can also pass a whole function as an argument. Instead of just an argument with a value or using our ellipsis to pass multiple ones, to pass keyword arguments, I can just pass a whole function as an argument.
So let's have a function here, I can call it string under core func, takes an argument, which I call s, and what it does is it takes that value of s and puts it into this variable called string and then it prints, I love string.
Now I have a second function called luv, and I'm not specifying anything in there, there's no argument specified there, but it just returns the string called julia.
If I now call string func and love, so this luv is a function, so that is a function passed as an argument.
So when I call this function string func, that's it up there, it's going to do that.
And it's going to look for what the argument was, and this argument was love, it will then execute that love, which just returns julia, which is actually just putting julia inside of the string of mine.
And if I print that string, it should just say, it should just say I love julia.
And off we go, I love julia.
So I've passed a function as an argument.
We can also nest functions.
Let's have a quick look at that.
So other than it just being an argument and a function, I can put a function inside of a function.
So here we have our function called nest.
Let's just get there.
We have our function called nest passed a single argument x, and it takes whatever that value of x is, multiplies it by 3, puts it in this computer variable z.
Now there's another function, which takes this value z, and it also multiplies it by 3, and then we just output this inside nest z.
So what's going to happen here?
Let's just run this.
Let's just run this and pass nest 5.
You see the answer is 45.
So what happened here?
We called nest.
Nest is up there.
It was 5.
It multiplied 5 times z, which is now 15, as a z.
And then you see down here we call inside nest.
So this is just a function that has been declared here.
So it's not going to run that block of code of the function unless we call it.
So here we call it inside nest with z, which is now 15.
Now it runs this function, and it takes that 15 as an argument, multiplies it by 3, and we get out 45.
Hence, we get the 45.
So remember, I can put a function inside of a function, but I'm just declaring that function here.
It's not going to run automatically.
I've got to call that function.
And as you can see, we've called it after declaring the function itself.
Next up, we get to the heart of functions in Julia,
and that is all about the methods that associate with a function,
and we're going to refer to the term multiple dispatch.
We'll have a question.
Thank you.
Thank you.
Yes, sir.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Please.
Thank you.
You have, appreciate it.
Thank you.
Tell me.
Thank you.
Thank you.
