So another video. In the first video we looked at vectors as far as linear algebra concerned, really the fundamental object in linear algebra.
Now we're going to move on to matrices. So I'm going to introduce you to the concepts in this video.
Now it's not going to be a single video because there's just too much to say so I'm going to chop this up into a couple of videos.
I think in the end there might be as many as nine. We'll see how it goes.
And the matrices are just as important. And whether you do cryptography, whether you do data analysis, data science, whether you do physics or engineering, matrices are just everywhere.
And that makes linear algebra probably one of the most fundamental and important subjects in mathematics today.
And that's why I'm showing you how to do this. So we're building up this intuitive understanding.
So we're not following a specific way that the textbooks usually present this because I want you to understand it and then it just becomes easier to do all of these.
We're going to start off with by looking at linear systems, I think in video number two, for this second set on matrices.
And that still requires you to sit with pen and paper and practice a lot if you have to do tests or exams or whatever.
But it's just so easy then to check your work in Julia.
And using a language such as Julia just makes it easier, I think, also to understand what is going on because we can draw some plots and we can really build up this intuitive understanding of what is going on.
So matrices is a really, really important subject.
And we're going to start with just by defining what a matrix is.
So Introduction to Matrices Part 1.
So we're just going to look at what matrices are and just how we can represent them in Julia.
So a series of many notebooks.
Let's get started.
So the first thing we've got to do, obviously, is just to activate this environment that we're in.
So remember, these files are on GitHub.
In our project.toml file and manifest.toml file is a list of all the packages that we do use.
Everything will be on GitHub.
So for me, this project, I generated this project in a folder called Linear Algebra with Julia.
And there you see the project.toml file.
So I've got the whole address there on my internal drive to where this project.toml file is.
And I'm saving that as a computer variable file just as we did in the previous video.
I'm using the PKG package manager and I'm using the activate function in the package manager.
So PKG.activate in the file.
And if all of that is run, of course, we will have availability of the packages in this environment.
And one of the base Julia packages that I'm going to use is Linear Algebra.
And you can read up about all the capabilities of which during this course we will use most of the functions in the Linear Algebra.
But if you want to check it out, check the Julia documentation and you can learn all about the Linear Algebra package.
So what is a matrix where we've looked at a vector?
And at least for me and the work that I do, everything revolves around a vector.
But we're going to work with matrices.
But we'll see that inside of a matrix is just basically a bunch of vectors.
So a vector in Euclidean space, that was lecture number one.
And everything revolves around that.
So check out that lecture again if you're not familiar with the work so that you just understand it,
get a good impression of what a vector is and what it does.
And that is more than this physical object with the magnitude and direction as we use in physics.
It's just so much more than that.
So what is a matrix?
Well, if you've used spreadsheet software before, you know a matrix is columns and rows of data.
We usually say rows and then columns and that's how we'll deal with it.
So there'll be so many rows of data across so many columns and every little cell has its own address.
So usually we use this uppercase letter A or M or whatever.
And then the subscript, as you can see in equation one here, MN.
So the M is the number of rows and say three rows.
And the N for November, that would be the number of columns.
So it's always rows and then columns.
And of course those will be natural numbers, M and N.
And so these elements then go inside these cells.
Every cell in your spreadsheet that has an address.
And so the same goes with the matrix.
And so this is the notation that we use in the equation two here.
We see A, three, four.
So there'll be three rows and four columns.
And you can clearly see there.
And I've put both notations there.
Some textbooks and some lectures would use square bracket notation.
Others use these large parentheses.
You can use either.
And of course, remember always when we open this up, you can see the Lartic there, how to do this.
The begin matrix and then the end matrix Lartic code there.
That's for the square matrix, the B matrix.
And then the parentheses one is this P matrix, as you can see there.
Anyway, these notebooks are available on GitHub.
You can have a look at how to generate this Lartic code.
And more importantly, what we're after here is just the three rows and four columns.
And then each of these little elements.
And for the most sake, we're going to stick to real numbers, but they can also be complex numbers.
But let's stick with the real numbers for now.
They each represent a number.
And you can see A, one, one.
That's row one, column one.
The next one here, A, one, two.
Row one, column two.
Row one, column three.
Row one, column four.
And then we jump down to row two, column one.
So it's always row comma column, as you can see there.
And that's how we index all these values.
So we can really represent all of them.
And the way that we're going to represent them, if you're trying to check the work that you're doing using code in Julia,
we're going to save these matrices as arrays.
Array is the data object that we're going to use to represent an array.
I mean, it's a normal English word.
It just means this list of values, basically.
And that's exactly what we're going to do.
So here in equation four, we can see this matrix.
One, two, three rows, four columns.
And we see they're all integer values.
And we can see there how to represent them once again.
But let's represent that in code.
And I'm going to use matrix underscore A.
That's my computer variable.
And inside of that, I'm going to store an instance of an array object.
And the array object has open and closing square brackets.
And the way that we're going to enter this, this is one way of doing it, is we're going to list the values by row.
So you see in equation four here, three, three, two, one.
So there they are, three, three, two, one.
And you see there's only spaces between those values.
So no commas, nothing else, the spaces.
So Julia will recognize those spaces as being jumping to the next column.
So three, three, two, one.
And then to tell Julia that this array has to jump to a second row, there's a semicolon.
So you can see the little semicolon there.
Then the next row, 3012, semicolon 4122.
I think you get the picture.
And when this is printed to the screen, remember this is a Pluto notebook.
So it's going to print above our code cell.
And you can see it's a three by four array of 64-bit integers.
All of these values are integers.
And it goes along two axes.
So the first axis will just be this values three, three, four.
If I just had this one single vector.
But we have a second axis of values here.
So we go across the columns as well.
So it's comma two there.
Now if you really wanted to enter these by column, three, three, four.
And then three, oh, one.
And then two, one, one.
And one, two, two.
You can also use this nested array.
So we've created matrix underscore B as my computer variable.
I'm assigning to that.
Remember equals is the assignment operator in Julia.
I'm assigning to that to whatever's on the right hand side.
And on the right hand side we see an array.
But it's actually an array of arrays.
There's little arrays inside of a bigger array.
So now I put commas between these.
Three, three, four.
But they go inside of a set of square brackets.
And then a space.
Not a semicolon, but a space.
And then my second little array, my third array, my fourth array, representing the four columns we have there.
So that's another way to do it.
And then we're just going to use a logical operator, which is this double equal sign.
It just says is the value on the left hand side equal to the value on the right hand side.
And if it is, it returns true.
And if it's not, it returns false.
And you can see it returns true there.
So both of these are the same thing.
They have the same values.
And in fact, we can use the type of function always to check what the type of.
Remember, Julia is all about data types.
And so we can ask what type this is.
And it got returned way up there when we actually created the instances of these objects.
We see type of matrix A.
So I'm passing matrix underscore A as an argument to the type of function.
And what do we get back?
It is an array and it contains values that are all 64-bit integers and along two axes.
And the same goes for matrix B.
I also just want to show you very quickly at the end of this first tutorial on matrices,
with a little bit of help from Julia,
is the fact that there are these convenience functions that will create values or matrices that can be quite useful,
depending on what kind of work you do.
The first one is the zeros function, Z-E-R-O-S,
or Z-E-R-O-S, depending where you're from.
3,4 passed there as two arguments,
and that's always row, comma, column.
So it's just going to give me three rows and four columns of all zeros.
You can still see it's a 3x4, an array of 64-bit floats.
So this time around, the zeros function returns floating point values or decimal values.
So you see 0.0, indicating that these are decimal values, real numbers.
And in Julia, those are called 64-bit floats.
64-bit is all about how big and on the positive side,
how small on the negative side is, the maximum values you can store.
And then again, along these two axes.
Then there's the ones function.
That's going to return for us 64-bit float representations of the number 1.
And again, it's rows, comma, column.
And then there's trues.
So true is a bit array, because there's only true and false.
True carries a bit value of 1 and false of 0.
So you're just going to get this array of 1s for trues and 0s for falses.
And again, we're just passing how many rows and commas we want of those.
As I said, depending on the kind of work you do,
these convenience functions might just be useful.
Maybe as placeholders, you can create an instance of these arrays as placeholders, etc.
So that's just a brief introduction.
So you know what a matrix is now.
We're just going to have these rows and columns.
We know how to represent them.
They, as an array inside of Julia, at least.
And even if you have to do this on paper, you understand,
we just put them in these square brackets or parentheses,
and we write it by row and by column.
That's it for this first introduction.
There should be, I think, about nine of these as far as matrices are concerned.
And we're really going to do a deep dive.
You know, we're going to end up doing things that are usually towards the back end
of an introductory linear algebra textbook.
Because I think for most textbooks,
there's a better way to represent the information
and for you to get used to the information.
The thing about linear algebra, though, is
you need knowledge of one part of it to understand the other part.
But to understand the other part, you need knowledge of the first part.
There's always a bit of a chicken and egg when you try and teach linear algebra.
But I think presenting it in this way sort of makes intuitive sense.
And it builds from the ground up this understanding,
even though we are probably in these next,
or this set of nine nextures is just about the matrices,
going to delve into things, as I say,
that are more towards the back end of the textbook.
But it gives you a good grounding as to understand where this is going
and how useful these things are,
how useful linear algebra is before we get to more deeper things
by delving slightly into the deeper things right in the front.
And I hope you understand what I'm trying to say there.
So I hope you enjoyed this one.
Please leave a comment because I'm quite willing to make more
and follow up videos of this and have a good discussion about this.
And what I'm really hoping for here is just to understand
that you can use a beautiful computer language
and you can use something else, Python, Wilfram language,
which you can use free of charge online in a browser these days.
It's just useful to be able to use a computer language to do these things
because many of the things that you can use linear algebra for,
you're going to do in a computer anyway.
So yeah, you've got to pass your tests and your exams and all of that.
You've got to do some of it with pen and paper,
pencil and paper, as I like to do.
But it's nice to just check your work here.
And as far as I'm concerned, and I really say this again and again,
it helps you develop a different attack on understanding what's going on
purely than just the textbook and the piece of paper in your teacher goes.
So leave a comment.
Let's have a discussion.
And like this video.
And as always, you have to subscribe.
See you in the next video.
See you in the next video.
