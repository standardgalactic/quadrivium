Now that we know a little bit more about vectors and how to represent them and their reference frames in Python,
let's look at vector-valued functions, because that is what we're after.
First thing I do, you see the first cell there, it's just heading 1, so it's just going to print out to the screen,
and then my second little cell, importing the required Python libraries.
Let's do that. Let's see what I'm importing.
From SymPy, I'm going to import the following functions, sine, cosine, tangent, exponent, that's e to the power whatever,
the square root, init underscore printing, remember that's pretty printing, the LaTeX printing,
so that on the screen it looks like beautiful handwritten math.
I'm going to import the symbols function and this new one, I don't think we've seen it before, EQ, equation.
Then from SymPy.physics.vector, again lazily, I'm going to import everything, that star means everything.
Now from IPython.core.display, we're going to import filter warnings.
From underscore, underscore, future, underscore, underscore, import print function.
So this is version 3.4 of Python, but in case someone runs this in 2.6, 2.7, whatever 2.x version,
the print function as is used here will still work.
And then from matplotlib.pyplot, I just import that as plt.
That is shorthand, so every time I want to reference any of the functions in matplotlib.pyplot,
I don't have to type out matplotlib.pyplot.whatever, I can just do plt and then matplotlib inline.
Okay, so of all of those, let's just execute that.
To execute, it's holding down the shift key and hitting enter or just hitting the play button there.
And then init printing, open and close parentheses, so that will initialize this pretty printing,
and filter warnings ignore, just so that I don't get those ugly pink boxes of text
with all sorts of warnings in them if the code is not, if there's problems with the code.
Visualizing a parametrized function.
How do we do that?
Let's start with an equation.
First of all, I'm just going to create these mathematical symbols, x, y, and t,
so that when I use x, y, and t, Python doesn't see it as computer variables,
but as mathematical variables.
So if I execute that, nothing happens.
Now, remember up here we imported this eq function, so eq, open and close parentheses,
it takes two parameters, one comma, the other.
So it's just separated by a comma, and whatever comes first,
that is just going to be to the left of the equal sign,
and that's on the, after the comma, it's going to be the right of the equal sign,
and lo and behold, it is an equation.
So I'm just saying y equals x squared.
Remember the double star signs, the double multiplication signs,
is there for power in Python, as opposed to a carrot that people might be more familiar with.
If I execute that, it says y equals x squared.
Look at that x.
Look at the superscript of the two there.
There's this beautiful Lartic or pretty printing there as I initialized it up there.
Okay, now let's introduce a parameter.
Now, we have this function, y equals x squared, f of x equals x squared,
but I want to parametrize it.
By that, we actually mean we're just going to import,
let's just fix parameter, I think.
Doesn't that look better?
We're going to introduce this parameter, an extra variable, into our equation,
and the first thing we're going to do,
now I'm just printing this to the screen.
This is not changing any of the math.
I'm making a new equation, x equals t,
and I'm only doing that there, not to execute any kind of code,
but just to print it to the screen.
But if I do that, what happens to y?
Well, that's quite right.
y becomes t squared.
Now, the parametrization means
if I plug in a value of t now,
I'm going to get two other values.
I'm going to get an x and a y.
So much so that that y is still going to equal x squared.
I hope that makes sense.
It's got to make some form of intuitive sense.
I've introduced this new variable t.
I've set it equal to x,
and that means, from y equals x squared,
that means y must be t squared.
So for every value t I give you now,
and let's let t represent time,
so time 0,
I'll have x equals 0,
and y equals 0,
and I can plot that 0, 0.
I can move t on time 1 second.
I'm now going to get x equals 1,
and y equals 1.
For time equals 2,
I'm going to get x equals 2,
and y equals 4.
So instead of this line,
y equals x squared,
I'm now going to get this movement of a particle.
Just because I've parametrized my function,
I've included,
inputted a new parameter,
and I've called it t here.
Now, let's just run a little bit of code here.
I'll explain to you what it is.
I'm making a new computer variable,
and I'm calling it time.
I can't use t,
because remember,
t is set here up as a mathematical variable,
but I want to introduce a new computer variable, time.
So it makes a little space in memory,
a little bucket into which I can put stuff,
and we call that bucket time,
and we put the value 0 inside of that little space
in the computer memory.
And this is called a while loop,
and the way Python does things,
it makes this indentation.
So see that colon after that line?
And if you then hit enter,
the text will be indented.
There'll be blank space there.
That is the way Python knows
that this is a loop of code
that it must run through and run through
until it exits this little loop somehow.
So I'm saying while time is less than 10.
Well, at the moment, time is 0.
0 is definitely less than 10,
so it'll jump through and execute this.
plt, remember, was matplotlib.pyplot,
and it's got this function called plot.
So I'm just going to write plt.plot.
And now I'm going to do,
it takes these parameters.
It's usually,
it's plotting a two-dimensional point,
and the first one is time,
which is now 0,
and the second one's going to be time squared.
So it's t and t squared.
It takes a third argument,
comma,
and then it takes in these parentheses,
single or double,
quotation marks, I should say.
b, o, b stands for blue,
and the zero,
that's not zero,
it's a lowercase o, actually,
b, o.
That o means a circle,
so it's going to be a blue circle.
So I'm going to plot little blue circles.
If I were to say red,
let's say that would be red squares,
would be rs,
but let's keep it blue,
round, little round circles.
So it's going to plot that for me.
At the moment,
it's going to be 0, 0,
and it'll plot that on a figure,
and then time plus equals 0.5.
Now, that's just shorthand,
that's just lazy coding.
I suppose most people would do that,
but it means time equals time plus 1.
Now you can see what a computer variable is,
because that is not an algebraic expression.
I can't say t equals t plus 1,
because if I subtract t from both sides,
it'll say 0 equals 1.
That doesn't work.
The way that a computer handles
a computer variable,
and I called it time there,
but I could have used any letter there.
I could have said p equals p plus 1,
and then I would have had to have p there,
and p up there, and p there.
Anyway, it says,
what is time at the moment?
It looks at the right-hand side
of this equation first,
this computer equation.
It says, well, at the moment is 0.
I'm going to put 1,
add 1, 2, add 0,
plus 1 is 1,
and I'm now going to put that value 1
into the new bucket.
So at the moment,
now time equals 1.
It's going to loop through,
and it'll do this conditional statement first.
It says, is time less than 10?
Well, 1 is less than 10, yes,
so it will loop through this again.
Now it's going to make a new plot.
1 comma, 1 squared is 1.
In a blue dot,
it's going to add another half.
Oh, I said 1.
I see I put down there half,
so it's going to increment by a half.
Let's put a half there, 0.05.
0.5, I should say.
So this is going to increment by a half
every time until we get to 10.5.
10.5, or 10 actually,
because I could put the equal sign there,
less than or equal to,
but I've done that.
So until it gets to 9.5 is still,
but if it gets to 10,
it's not going to execute this little loop anymore.
It's going to jump outside of the loop.
And outside of the loop,
it says plot dot show.
So that's just plotted the points in memory,
but now we actually want to plot this to the screen.
So we say plot dot show,
open and close parentheses.
Now the semicolon,
what the semicolon is there for,
you needn't put it.
If you don't have a semicolon,
it's going to give you some expression first,
and then the plot.
If you just want to skip that expression,
you can just leave it out.
I'll show you the difference.
So let's have it like that first,
and lo and behold there,
look at all those nice little dots
that drew every time t increased by a half.
And you can well imagine
if I made those little jumps
smaller and smaller and smaller,
it would be the smooth curve,
but because I've parametrized the function,
it actually means something is moving in time.
It's gone from just being a two-dimensional curve
to a path that something is actually traveling,
and that is what parametrizing a function does for us.
Let me just show you if I took that semicolon away
and I execute that again.
Oh, I see in this instance,
my apologies in this version,
it's not going to do that.
It's not going to write a little line of code there.
Okay, we move on.
Parametrizing a function now.
So if we think about it,
the original function can now be written
because I'm parametrizing something
as something that maps
a value from R1 to R2.
Now what does that R1 to R2 mean?
Remember what a function is.
A function is just this machine
that you give input to,
it does something,
and it spits out something.
If I say y equals x squared,
if I put in an x value of 2,
it goes through the machine,
and it spits out 4 on the other side.
But 2 is a single value.
On a one-dimensional line,
I can find 2 on a long line of real numbers.
And what it spits out 4,
if y equals x squared,
if it spits out 4,
4 can also be found on that line.
But if I parametrize a function,
I'm going to do something else now.
I'm going to move from one space,
so I'm going to find a value on the real line.
I'm going to put it into my machine,
and it's going to map that one value
that I put into two other values,
which is now on a two-axis coordinate system.
Not just on a line,
it's going to be somewhere on a plane.
So I put one value in,
and I get two values out.
This is what this mapping R1 to R2 means.
Let's have a look.
Remember, for vectors,
first of all,
we have to set a reference frame.
I'm calling my reference frame C,
because I've imported everything
from simpy.physics.vector.
I can just use the reference frame function
without putting anything in front of it.
So I can just run that piece of code.
It's in memory now.
We've got a reference frame.
I'm going to make this computer variable called RT,
and I'm going to set to that this vector value.
T times C sub x plus T squared times C sub y.
So I'm creating a vector in two-space.
We've seen that before.
Let's print that to the screen
by just typing the computer variable RT,
and it prints beautifully.
So what have I done now?
I have parametrized this equation,
but I've now turned it into a vector-valued function.
Have a look at this.
And this is how we write it.
R of T is my new function.
Remember, we had f of x before.
We changed it to f of T.
Now we have this function.
We call it R of T.
And that is in one space.
In other words,
I'm going to put one value in there for T.
If I had f of x equals x squared,
I'm going to put one value for x in there,
three or four or five or whatever
that I find on the real line.
But it's going to throw out two values for me.
Values in two-dimensional space
because this is a plane.
I get an x value and a y value,
which I can plot on a plane,
as we did with this blue dots up here.
So, usually for vectors,
we write these brackets,
these angled brackets.
And it's going to be x of T.
Remember, x of T was a function of T.
I said x equals T.
And I have a function y equals T.
Y was T squared.
That's what I'm doing.
So, there's my vector.
So, this is why we call it a vector function.
Because R,
usually we use R
because it's a position vector
from the origin pointing to some point in space.
And for any time T,
let's go back up here.
I can imagine from,
I can draw a little line
from the origin here to every line.
And every time T increases,
that vector is going to point
to another one of these dots.
Sequentially, sequentially.
So, that vector changes in time.
And you can see what this vector function
is doing down here.
Every time I put another T value in,
I'm going to get another x
and another y value.
Both of x and y
are functions of T.
So, I'm mapping
a one-dimensional value.
And I pop out on the other side
a two-dimensional value.
Good.
So, in essence,
because x was T
and y was T squared,
I have this.
R of T equals T,
T squared.
And if I were to plug in an R,
a value for T of 2,
I'm going to get the value 2, 4.
So, I'm plugging in a single value
and I get out two values.
And that is a vector-valued function.
Note that we have this underscore here,
just indicating that this is not just R,
not just a function,
it is a vector function.
So, from parametrizing a simple equation,
I now have a vector-valued function
and this is how we write it.
It's all pretty intuitive.
Thank you.
