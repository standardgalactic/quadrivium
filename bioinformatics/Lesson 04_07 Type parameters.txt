Good, let's look at type parameters or the parametric method.
Now it's certainly possible to limit a function to accepting only certain argument types. So look
what I've done here. I've created a function called it m. It takes one argument called x,
but I'm using these double colon signs and then int. What I'm saying is this argument must be
an integer. It's going to return 3 times x and then end. So let's do that. Let's call it m3 and
it returns 9. Now let's make things a little bit more interesting. I'm going to have this
if else statement. So if x is more than or equal to 0, it returns 3 times x. If it is not more to
equal to, which really means it's less than 0, a negative number, it's going to return 3 times x,
but still it must be, it must be an integer. And I've called my function n. So let's do that.
It's a generic function with one method. So I'm going to pass negative 3 to it and lo and behold,
it's going to return a 9. Now let's just look at this method. Now for the first time, we'll talk
about what this says there was one method. I can use the inbuilt methods function and look at the
methods or the single method that this function n of mine has. And it says, look, it's got one,
it's one method for generic function n and that takes in this argument x and it's a 64 bit integer.
So it means if I pass m3,3 or should have said n3,3 or no. So that is not an integer. That is not an
integer. That is not going to work. Now let's have a look at this. This is a slightly different
way of doing it. I'm going to use these parentheses and then the argument. So I have this function
arc underscore test. Now t is what is normally used. It says less than colon real. So it means
in our type hierarchy, it can be a real number or any of the subtypes of real.
That is going to be our type. And I said x must be of that type. So this is just a long way of saying
well, x must be real or any of the subtypes of real. And I can return x, the value of x by this
dollar is of type and then return the value that is in t. So if I do that, we're going to see the
following. If I just pass 3, it says 3 is of type integer 64. And if I say 3.3, it's going
to say well, it's a 64-bit float because float, both float and integer are subtypes of the real
type. If I pass the Euler's number, it says it's a 64-bit float. If I pass this pi, which is an
inbuilt value, it says it's the irrational number pi. And 7, and I use this two backslashes, it says
that's an irrational number. It's an integer divided by an integer. And just to remember, there is this
inbuilt Julia function called type of. So I can just say type of 7 over 3. And it says it's a 64-bit
integer. Both of them, numerator and denominator, as part of a rational or Julia is just an ASCII
string. Now, let's play around a little bit more. I can do the following. I can say, look, I'm going
to have this argument, this type of my argument called t. And there's two arguments, a and b,
and they must both be t. So I haven't specified what t must be. But what I've done here is as long
as they are the same. I'm going to use the inbuilt function called plus. It's going to add a and b.
So let's run that. And what I've done there is I've added two imaginary or two imaginary or complex
numbers here. 2 plus 3 plus the imaginary number i, 3 times i, and 1 plus 0i. So this is just 1,
but I am using the imaginary number there. So I am, these two are of the same type, and that will work.
So if I just use 2 plus 3, i am, and 1, that would return this error to say they don't match.
The type of the two arguments do not match. So we're getting to start to understand what this
method is all about. And that is where the real power of Julia is as far as functions go. And we're
working up towards that. But first of all, we're going to look at stabby functions and do blocks.
