In this lecture I want to talk to you about the parametric versus non-parametric statistical
tests. So we're almost there. We're almost going to import some data and compare groups to each
other and calculate p-values. One step before we get there though. Parametric versus non-parametric
statistical tests. As per usual we're just going to import run there just to import our stylesheet.
Now let's set our environment. I'm going to use from scipy module. I'm going to import the stats
sub-module from matplot or I'm going to import matplotlib.pyplot as plt as usual. I'm going to
import seaborne as sns and then from the warnings library there I'm going to import filter warnings.
As per usual I'm going to use my magic command there matplotlib inline to draw my graphs right
on this web page. This is just playing with seaborne just making some default values so that my graphs
look a bit different. Then I'm going to execute filter warnings ignore just ignore those ugly pink
warning messages. So remember previously from the central limit theorem that if I were to construct
the histogram of how many times certain means will occur and some will occur more commonly than others
slightly more difficult than that as I say there no surprise. In the grander scheme of things there
really are two different types of statistical tests called parametric and non-parametric.
And the reason why we make this differentiation is because if you use the correct one in the
correct situation you actually get a better statistical result. It is more representative
of the population out there so you get better inferential statistics. So I want to introduce
to you this qqplot. Qqplot is part of the scipy stats library. Very good to run your data past the qqplot
first before you decide whether to use a parametric or non-parametric test. So parametric test says to
patient a population parameter it suggests that the sample that you drew you drew a sample
of say 30 subjects and you take a certain variable and you take the values. We suggest that those that the
values for that variable come from a population in which those values are normally distributed.
So the parameter when we talk about a variable in a population we call it a parameter so we say the
parameter is normally distributed. So if I could do as far as human beings are concerned get the values of
of all six billion people for one variable I would call that a parameter and if that formed a normal
distribution a bell-shaped curve I would use a parametric test on that data. If the values in the population
are not normally distributed I would use a non-parametric test.
The qqplot is really there to help us decide whether our samples because now remember that's all we have
we don't have access to all six billion results we only have for instance our 30. Is there a test that
we can do to suggest it's only a suggestion that those 30 were taken from a normal distribution or
not. Qqplot to the rescue. First of all let's just generate 40 random variables we've done this before
we've played with this sort of thing before. I'm going to create a computer variable called rv1 underscore
values call it whatever I want. I'm going to call up because I am from scipy I imported stats so I have
to say stats dot before I can get into the stats sub module from that I want the normal distribution
so dot norm dot rvs the rvs method there says give me some random variable a random variable set please
but take it from a normal distribution takes three arguments lock scale and size separated by commas the
first argument lock is the mean so please let that normal distribution have a mean of 100 scale is
the standard deviation of 20 and from that please draw 40 samples so I know that these 40 are going
to come from a normal distribution I've asked the computer to do it for me and I've taken 40 of those
every time every time you run this you're going to get a different 40 from me now the qqplot is
otherwise known as a probability plot a prob plot and that is part of the stats sub library sub module
which is part of the scipy module so stats dot prob plot takes three arguments it takes three arguments
and we'll have a look at that what it really does um it checks then whether your values fit
a normal distribution it plots every value says they plots the data points against their own quartile
that's all it does it's then going to give you this r squared value as well and this r squared value
goes from zero to one one means there's an absolute fit and zero means there's no fit at all it really
does not come from a normal distribution let's see how we construct that we're going to tell python
plt remember there was matplotlib.pyplot it's abbreviation plt dot we're going to call the figure module
that says get ready to draw a figure make the fix size eight points eight comma eight wide and six high
so that's to construct it strictly speaking we don't need to use it here because we're using this
prop plot but you can do that no harm in that stats dot prop plot as i said three arguments first is the
values you want plotted and remember there's my 40 values there i call them rv underscore values dist equals
norm so you've got to tell it what kind of distribution you want to be to to test your values
against so the dist equals and there's various ones you can do norm is the one we want and it's got
to go in inverted commas either in in quotation marks either single or double doesn't matter
and then you say plot equals plt so use matplotlib.pyplot to do your plotting for you please so it takes
those and then eventually i say plot dot show if you do stuff and your plot doesn't show remember just
do plot dot show open close parentheses with this semicolon let's run that and there we go beautiful
a beautiful beautiful qq plot so this red line represents a normal distribution and the blues are
actually your 40 values and can you see they are very closely you can imagine they fall on this line and
we can see an r squared value there of 0.9956 so every time you run this you're going to get something
different that's very close to one and remember i set it up so i cheated a bit i took it from a normal
distribution so i better get a high r squared value here but you can see that's what it looks like
let's do something else let's take it from a different distribution rv2 two underscore values
stats dot this time not from the normal distribution but from the exponential distribution
dot rvs says give me a random variable set and this time it doesn't ask it's the exponential
distribution it doesn't ask for mean or standard deviation just the size 40 just give me 40 values
from the exponential distribution and let's plot that see here i didn't do the plot dot figure i didn't
do the plot dot show strictly speaking the stats dot prop plot has all of that built in sometimes it's
difficult to know when stuff is built in and when not and you just have to get used to to to the
different syntax so stats dot prop prop plot again the three arguments the values that i want
the distribution against which i want
my qq plot to be drawn and plot please use matplotlib.py plot
we can just run that straight off the bat and look at that as i say just a warning you're going to get
something different but now these blue dots clearly uh don't really follow i mean there's a bit that
does follow but it's all over the show and i get an i get an r squared value of 0.86 now it's a bit tricky
you know where is the cutoff is there some magical cutoff no there isn't clearly though you know here
the low 90s into the 80 percent here 0.86 and i know i cheated i know this is not a normal distribution
you can see this is an example you can almost see it makes a curve it must almost be like part of some
exponential curve isn't it an exponential curve is not a straight line so really that's the kind
of values that you're looking for that sample set does not come from a normal distribution
therefore you have to use a non-parametric test so if we just look at our normal t-test if we're
dealing with numerical data white cell count blood pressure systolic blood pressure some value for lab
result white you know as i said white cell count or urea whatever those are ratio type numerical data
the quintessential parametric test for that is the student's t-test student student was a
a name under which william gossett who while he worked for a brewing company published under the
pseudonym story goes that they didn't want for their competitors to know that he was working for them
and doing the statistical analysis but anyway that's his test t-test that's the quintessential
test that's the one we're going to use most of the time if our data set looks something like this
we were going to use a non-parametric t-test and samples of those would be the man whitney wilcoxon
rank sums test or man whitney you test we'll play around with some parametric and non-parametric
t-tests again these would be for ratio type numerical data when we deal with categorical data
we're going to use different types of tests excellent
