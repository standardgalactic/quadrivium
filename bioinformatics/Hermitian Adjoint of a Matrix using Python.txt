Now I'm going to trust that you've seen the pen and paper
lecture on how to think about the Hermitian adjoint of a
complex valued matrix. Let's look how easy that is to do with
Python. So I've opened the Google Colab notebook that we've
been working on complex valid vectors and matrices. As a
reminder, this is our setup. Please watch the video link in
the description down below as to how to set up your Google
Drive, so that you can type in Python code right in a Google
Colab notebook. You don't have to install Python on your own.
And do remember the aim here is just to show you how easy it is
to use Python. You know, it helps you understand your
mathematics. You can double check your work, but also to learn a
little bit of Python. So that was our setup. Please watch the
whole series. Otherwise, this might not make a lot of sense to
you. And then so let's go have a look at how easy it is to do or
to at least think about the Hermitian adjoint of a matrix. So
there's our matrix A. Just as a reminder, we've been using it for
a couple of videos now. There's our matrix A three by three
matrix. And if I want the Hermitian adjoint of that, I'm
just going to call the adjoint method on A. So I'm just going
to say A dot adjoint open close parentheses. Remember, a method
is a function, but it applies to the specific object. And there
we can see we can see it's the complex transpose. And we just
have the complex conjugate of each of those elements after doing
the transpose very easy to do. Now you will have noticed when we
did our import, we did import the adjoint function. So I can
also just have said adjoint and pass A as an argument inside of
that set of parentheses after adjoint. But it is built into the
matrix object. So I might as well just use the adjoint method. And
in the pen and paper lecture, we looked at this equality, we said if
we take A times A vector U, and we then take the emission adjoint,
that that's going to be exactly the same as first taking the
Hermitian adjoint of U, and multiplying that by the
Hermitian adjoint of A. So let's have a look at that, I'm
going to create a single object, A times U, I put that inside a
parentheses just so that I have a single object, and such that I
can call the adjoint method on that object. And if we look at
that, we see A times U, what we see the algebraic expansion has
not taken place. So what I could do is just do what I've just
done. So it's A times U as a single object inside parentheses, call
the adjoint method. And then on top of that call the expand method. And
that's going to do that algebraic expansion for me. So let's have a
look at that. And indeed, there we see 5 negative 5 minus 20i and
13 minus 4i. Just then to show you that at least as far as this matrix
and vectors is concerned, if I do the opposite, I say U dot adjoint times
A dot adjoint, and then call the expand method on all of that. See, I've put
it inside of a set of parentheses, so it becomes a single object, then call
the expand method just so that all that algebraic expansion happens as
well. We see we get exactly the same result. So A times U, and then taking the
mission adjoint, this is U dot adjoint times A dot adjoint. That's going to give
me exactly the same row vector. Now we did not do this in the pen and paper
lesson because it's just an expansion. Remember, if I multiply matrix by matrix,
it's just a series of dot products. So it is actually true then if I take a
matrix A times C, given that that multiplication is defined in the case of
the shape of A and C, and then I take the mission adjoint that's going to be
exactly the same as taking the mission adjoint of C times the mission adjoint
of A. So let's do that. Now I've run this notebook before. So the first instance, I did not do that
algebraic expansion, but now it does. In case you don't see the algebraic
expansion, remember you can always just call right at the end the dot expand
method, and that's going to do the algebraic expansion for you. But as we can
see, it was already done there. So that's taking A times C and then the
mission adjoint. But look at this. If we take the mission adjoint of C and we
multiply that by the mission adjoint of A, I put all of that inside of a set R
parentheses, so it becomes one object, and then call the expand method on
that, we see that we get exactly the same result. So just so much easier to do it
here in Python. You don't have to do all those long calculations by hand, even
though doing it by hand is actually quite a bit of fun.
