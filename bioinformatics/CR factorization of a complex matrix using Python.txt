Now I hope you've watched the pen and paper lecture on how to do CR factorization of a complex
valued matrix. That just takes a little bit of work. In Python though it is very easy to do.
Let's have a look. Let's carry on with the fun as far as CR decomposition, thinking about the
column space and the row space of a complex valued matrix is concerned. We're going to use Python
again. As a reminder, this is how we did our setup in our notebook. I'm trusting that when you find
this video that you watched all series because you know one video just builds after the other and
I will assume that you understand how to import and what this import of all these keywords mean.
Remember there's always a link in the description down below where I show you how to set up your
Google Drive so that you can use this Google Colab notebook. The same almost as a Google Doc and you
can type in your Python without having to install anything on your own system. So let's do a bit of
column space, row space and CR factorization of our complex matrices. So let's create this
three by three matrix that we see on the screen there. Again, I'm going to assign it to the computer
variable A. That's my choice. But hey, this matrix is called A so I might as well use that A. But
remember within reason you can just name your matrices whatever you want. The equal symbol in any
computer language or most computer languages I should say perhaps is the assignment operator. It
assigns what is to its right to what is to its left. And to its right I'm calling the matrix function
and that's going to create for me an instance of the matrix class. In other words, an object in Python
and that's going to be a matrix object. And I'm just going to pass all the elements as a Python list
object. We know that it's a Python list object because it's inside of square brackets and each
element is just separated by a comma. And what I'm doing is I'm going row by row. So it's I,
one, one, and then three, negative one, negative two plus three I, one, one, two plus I. And then
once that's created, once that object is created, I'm calling the reshape method. Remember method is
like a function. It is a function, but I'm just applying it after the object is being created.
And then I'm just passing the two arguments, three comma three. That'll mean it'll take this whole long
Python list object and it'll reshape it so that I have three rows and three columns. So let's print that to
the screen and we see there's our matrix. Now the, what we want to do is we want to do
some Gauss Jordan elimination, elementary row operations so that we get this in reduced row
echelon form. So there's my matrix A. I've named it A, so I can just call A dot and I'm calling the
RREF method on that object. And there we see, we see a leading ones as far as the pivots are
concerned. Unfortunately, we see the last row is all zeros. It's telling us that not all these
columns are linearly independent. If we look at row one, or at least column one, I should say that's
one, zero, zero. And the second one, zero, one, zero, that's telling us, well, those two columns,
as far as going from left to right, would be linearly independent. But certainly the last column is not
linearly independent. It is dependent upon the other two columns.
So one thing we can do is just call the column space method on our matrix. We're going to say
A dot column space. It's as simply as simple as that. And it's going to give us the linearly
independent columns, which means linear combination of those two is the space that I can span
as far as this matrix is concerned. But certainly I don't have three vector three column vectors there.
So the rank is only two. And that means that third column vector in A is going to be linearly
dependent. So what I'm going to do now, I'm going to create a matrix C as far as these two column
vectors are concerned. And it's just going to go row by row. So I'm going to say I comma one and comma
three comma negative one and then comma one comma one. And I'm just going to reshape that as a three by
two matrix. I'm going to call that my matrix C representing the column space vectors, the two
linearly independent column vectors in my matrix A. And this is about CR decomposition. So there's
my matrix C. I've got that. Let's look at just doing the row space. So I can just say A dot row space.
And it's going to calculate the row space for me. And that's very cool. It's going to report it back
back as these two nested lists as far as a list object is concerned. But what I want to do is I
want to reshape this because that's clearly a two by three matrix, this row space. And so there's my
matrix. I'm going to create it. I comma one comma one comma zero comma negative three minus I negative
six minus two times I. And then I'm going to reshape that into a two by three matrix. And then after all of
that is done, I'm going to call the RREF method on all of that. So I want elementary row operations.
Now, when I say elementary row operations in this section, one of the operations that I'm never going
to do, I'm never going to interchange columns or rows. So that is not on. And let's just do that.
And we see, there we go. That is the matrix R that we see right in front of us. And look at that.
There's something beautiful and it's hidden perhaps, but you can almost see what's going
to happen down there. Let's just create this matrix R from this. And so I'm just going to go
element by element and row by row. So one comma zero comma I comma zero comma one comma two.
I'm going to reshape that into a two by three matrix. I'm going to call that my matrix R.
And now I have the two, the two factors for, for my CR factorization or decomposition.
You see it there. And what we do see is that these first two, the zero one, zero and the zero one,
that's the noting for us that we're going to take one of column one and one of column two,
those two are linearly independent. But what this last column is showing us, it's telling us what
linear combination of the first column and the second column we need to get to the third column.
It's saying take I times the first column plus two times the second column. And that's going to give
you the third column in that matrix. And look at that. I've just printed that to the screen,
just using some large code that says I times the first column plus two times the second column.
And look at that. That does give us the third column. And so when you do the row space of your
matrix and you do Gauss-Jordan elimination on there, then it is going to tell you the linear
combinations in this final column that you would require. And that's actually quite,
quite fantastic if you think about it. So if I take C and I multiply it by R, lo and behold,
I get back my matrix A. And you can see the one in the, in the final column, the one,
the negative two plus three I and the two plus I definitely that is a linear combination of the
first two such that if we look up here, it's I times the first column plus two times the second column
gives me that third column, which means yes, it's rank. It's a rank two matrix. And we can see all
of the parts of that come out beautifully when we think about CR decomposition or CR factorization of a
matrix.
