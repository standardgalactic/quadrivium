In this lecture, I'm going to introduce you to pandas.
I'm going to break this up into a few shorter lectures
because it's quite a bit that we have to go through.
I'm also going to introduce you just to the basics of pandas first,
as you can see here, just to get you familiar with the package.
And then we'll move on to actually importing some data,
data that was created inside of a spreadsheet,
which is the normal way that you're going to go about using pandas.
So what is pandas?
Well, that is the module that does all the managing of the data force.
It's a phenomenal package.
You can see, I say, I love pandas.
It's absolutely phenomenal.
It has aspects of data analysis to it.
It has aspects of manipulating data as in a SQL database.
It is really absolutely phenomenal.
As per usual, it extends the base Python language to do a lot of things.
Let's get going.
So you see the first cell there.
If I double click on it, it's just normal text.
It's a markdown.
I'm just going to make all these notebooks look the same.
I'm just going to stick to this convention.
I'm just going to import the CSS style sheet.
You don't have to do that.
I'm doing that just for this nice grey background
and the blue and orange fonts there.
First things first though, this is the proper part.
We've got to import some things that we're going to use inside of this notebook.
We're going to extend Python by importing a few things.
And I want to run through these with you.
Now I've marked this with a comment there.
So I've just put the...
If I take it away, obviously you see that line of code will be executed.
But if I put the hashtag or pound sign in front,
that becomes a comment line and Python will ignore that.
So I'm going to import pandas as pd.
We've seen this before.
We import a module pandas and we're going to use its abbreviation.
So all the code words that were written into pandas,
I can now access by saying pd.
And whatever code word I want to use.
SciPy stands for Scientific Python.
That's a phenomenal package.
You can do an enormous amount.
Basically what you can do in commercial packages,
you can do with...
As far as mathematics is concerned, you can do in SciPy.
It has a bunch of sub-modules and this one is stats.
So from SciPy.Stats, I'm going to import this word here, norm.
And that stands for the normal distribution.
Now SciPy.Stats contains all sorts of distributions.
And what you can do with those distributions,
you can just say, give me samples,
1000 sample values,
but make them come from a normal distribution, please.
Make them come from any form of other distributions.
There is plenty and plenty of distributions,
but I just want the norm one for the purposes of this lecture.
We're going to skip those two that we'll use in future lectures.
Now this is an important one.
Import matplotlib.pyplot.
So it's the sub-module pyplot from the module matplotlib.
You can see the word plot there.
You can think to yourself, this is going to plot some graphs for me.
And it's phenomenal graphs.
You can just export them.
You can submit them for publication to research journals.
No problem.
Powerful package there.
And I'm going to import it again with its abbreviation PLT.
These abbreviations you can call whatever you want.
I'm going to call the PLT PD.
This is the norm.
This is what people use all over the world.
So I try to stick to these,
but you can use whatever abbreviation you want.
Seaborn just extends matplotlib.
It has a few extra plots in it.
And it just adds a nice design, I can say, to your plots.
It makes them look slightly better.
There's a bit of a design aesthetic to it,
plus a few extra bits.
And it's normal to import it as SNS.
Now from warnings, I want to import filter warnings.
Now this is something I always do.
Many times in the IPython notebook you've drawn code.
The code will still execute,
but the notebook wants to warn you
that there's something wrong with it.
It's still going to execute.
There's nothing wrong with the code itself.
It's just some interaction problems.
And then you get these ugly pink blocks of code.
And I absolutely hate those.
So you can set them to be ignored.
Now, so I've done all my imports here.
And I'm just leaving this space,
this empty line just to make the code look nice.
This is called the magics.
That percentage sign.
There's a few magics built into IPython.
And this matplotlib space inline.
That says whenever I want to plot something, draw a graph,
it will actually render it right in this web page.
If I didn't have that, an extra window will,
a pop-up window will appear with the graph.
And sometimes you want that because from that pop-up window,
you can actually manipulate the graph a bit more.
You can save it externally on your hard drive, as I say,
if you want to use it in a publication.
For purposes here though, I want the graphs that we're going to do,
I want them to appear right inside of the web page.
Now, filter warnings.
Remember, that's one of the methods there I've imported from warnings
or functions I've imported from warnings.
And it takes an argument.
Arguments go in these parentheses, these brackets.
And I put a string text in there, ignore.
And that says whenever it finds one of those things you might have done wrong
and wants to print that ugly pink text box, it'll just ignore that.
So we're going to run that code by clicking run up there.
Run cell, as you can see.
Or alternatively, when you're in that code cell,
you can just hit shift enter, shift return.
See the little star that was there?
It was executing.
Now it says this is the second block of code that I've executed.
Let's start off with pandas.
I just want to show you if I double click.
Where are we?
There we go.
If I double click there, it's just pandas.
And it's a heading one code cell.
So if I were to run that, it's going to render a nice H1 tag.
Introduction.
Pandas is a Python module.
Let's change that to module.
It's a bit of confusion.
When are things called a module?
And when are they a library?
Etc.
Really not important for us as healthcare researchers
to know the deep, dark secrets of modules and libraries.
Anyway, you can see I've included it in these open and close P tags.
So it's markdown cell.
So that becomes a paragraph.
And you'll remember the single little stars on both sides.
That makes this italics.
And there's a double in front and behind.
And a single in front and behind.
So this pandas is going to render an italics.
And the double as you saw when it was there before.
That would be bold text.
Okay.
So as I said very quickly you'll pick up the markup in HTML.
We're not going to use a lot of those.
Some basic pandas.
Now I'm actually going to call this a list.
Because it's more of a list than an array really.
But it's an array of values.
So what am I doing here?
I'm creating a space in memory.
A bucket.
I'm going to call that bucket values underscore one.
I could call it whatever I want.
I can call it I like my dog.
I can call it whatever I want.
There's some code words obviously you mustn't use.
Proper syntax that you use that is part of Python.
Restricted words.
And there's some restrictions as to special characters and numbers etc.
Underscores are fantastic.
You can just use them.
Values one.
Now I've put things in these square brackets.
Square brackets allows me to create a list of things.
And I'm going to put a comma in between each of them.
So I've just thumbsuck these values.
12.3, 14.2, 15.
So it's just values in a list.
Let's run that.
So instead of, remember we said a equals seven.
Where we introduced the notebook.
Well, instead of just one value I can put in a lot of values.
Now let's introduce some basic pandas.
I'm going to make a new bucket in memory.
I'm going to call it data underscore one.
And that's going to equal pd.
Remember that's my abbreviation for pandas.
Dot.
And now we're going to start using code that is within pandas.
And the first one I'm going to do is series with a capital S.
And then open and close my brackets there.
And inside of it I want to put this computer variable values.
Which holds this list.
That's what I'm doing.
Now this, what is inside of these that follows a word like series is the arguments.
There are arguments that go in there.
Now I'm just going to delete that quickly.
And just show you something.
Let's do that.
pd dot.
See that dot turns red.
If I now hit the tab key.
It'll give me a list of all the syntax.
Everything that pandas can do.
Look at that.
All computer code that you can execute.
Lovely stuff.
I can hit the capital S.
Now it will just see all the ones that start with S.
I can see series is the one I want.
So I can double click on that.
It will auto complete for me.
And watch this.
As soon as I open.
Just hit the open bracket there.
It's going to show me.
Give me a little tooltip as to what the arguments are that go in there.
Now most of these arguments have defaults.
So you don't even have to.
You don't have to put them in.
One that it does want is the data.
So you must put something inside of this series.
And what I wanted to put in there.
Remember was values 1.
So I'm going to say VA.
And if I hit tab again.
It'll find anything that I am allowed to put in there.
And values is what I want to put in there.
So I can double click on that values and it will auto complete for me.
Beautiful.
Now remember I said A equals 7.
And then I just said A and ran that.
It told me A was 7.
Just printing it to the screen.
Let's do that.
And lo and behold.
Look here.
That would be what a series looks like.
It almost looks like a small spreadsheet.
We have two columns.
And that list of values.
It's put each in its own row.
This on the left hand side is called the index.
Python always starts counting from zero.
So zero will actually be one.
So the first row contains the value 12.3.
The second row which has an index of 1.
That's how it works.
An index.
So a series is a list of values.
And it needn't just be numbers like it is here.
These are decimal points.
So they're floating points.
You can see they float 64.
64 but floating values.
Float means decimal.
Decimal value Z.
That's the data type that's inside here.
But the series.
The series like this is this row upon row.
Each with its own row number.
You can always ask the computer.
Remember I said you don't have to tell like other languages like C sharp etc.
You don't have to explicitly tell Python what type of data you're putting into a variable.
Python will infer from context.
But you can ask it if you're not sure.
So you can say type.
And then that's a Python code word.
And then values.
So you want to know what type of values or what type of data is values 1.
Well it is a list.
That's what we created there.
A list.
Now we can ask as well.
Let me just do this.
I'm going to say cell all output toggle.
So see what that does.
It hides all the output.
It hides all the output.
So where were we?
We were there.
And if I now execute it.
It will execute.
And it says pandas dot core dot series dot series.
It is a series object.
Where this values was a list object.
The computer bucket.
The computer variable had a list inside of it.
Data 1 has a series inside of it.
Now what makes a series?
Why would I not just use lists?
Why did I want to create a series?
This is the reason.
Look at this.
If I were to type data 1 now.
Let's do that.
To delete that and say data.
I can hit the tab.
It will auto complete.
The only DAT that it found when I hit the tab was data 1.
And if I say dot.
That dot is red.
Look if I hit tab.
Look at all the things I can now do with data 1.
Look at it.
Just look at it.
It's phenomenal what you can do.
But what I wanted to do is the describe.
So D.
Where are we now?
There we go.
D.
Describe is the one I want.
And I'm just going to open and close.
When I hit the open bracket.
It automatically puts the close one in for me.
I don't have to do that.
There's the tool tip.
I don't want any of those.
All of those are default values.
So I don't actually want any of this.
I just want to run that.
Look at this.
Phenomenal.
Basic descriptive statistics done for you.
It says there were 13 values in data 1.
Data underscore 1.
Which was a series remember.
There's 13 values in it.
The mean value is 14.
Standard deviation 2.5.
The minimum value is 9.9.
25th percentile.
The median.
Which is the 50th percentile.
Third quartile or 75th percentile.
15.4.
And the max value is 18.3.
So immediately you can do statistical analysis.
Just because you imported a list of values.
As a series.
It gets even better than that.
Remember we imported Seaborn.
When you type in SNS dot.
And tab.
You'll get a list of things that Seaborn can do.
What I want is this dist plot.
Distribution plot.
And I want a plot of data 1.
So those that pandas series.
I want it plotted as a distribution plot.
Look at that.
Phenomenal.
So it made a histogram.
We'll talk about what a histogram is.
So it just divide the things into these little bins.
It's called.
It looks like this bin goes from 9 to something else.
Now you can specify.
It is an argument.
Let's see.
Bins equals.
Let's make it.
10 bins.
If I now were to run this.
See.
It just made the bins a bit smaller.
So the value goes from there to there.
And.
It just tells us how many of those values were inside of that bin.
Now.
You'll see the y axis here.
What it does is.
It makes all of the values.
If you count all of them up.
To.
Be the space that contains 100% of all the values.
Now you can something like a hundred percent.
Can also be called a fraction.
Which is 1.0.
50% would be 0.5.
So that's what it does here.
It tells us that.
Between that value on the x axis.
And that value.
We found.
About 9% of all the values fell there.
That's a histogram.
See.
There were no values in that little range there.
But this.
This plot also does.
It draws for me.
This nice curve.
And you saw that values that I just thumb sucked.
To basically normally distributed.
There was some normal distribution to them.
What this does.
It bootstraps a lot of values.
And we'll talk about bootstrapping.
It's a statistical.
Exercise you can do.
But it bootstraps a lot of extra values.
So that it can create this distribution plot.
What's very nice about this distribution plot.
You don't have to remember what I say now.
We'll talk about it extensively.
In future lectures.
The area under this curve.
Is actually 1.
If I were to do calculus.
Or integral calculus.
On.
Function of this graph would be.
1.
Would be underneath.
Or 100%.
100% of the values.
Fall under this.
Don't worry about it.
Just a little taster.
Of what statistics is all about.
Now I'm going to create.
Values 2.
It's a new computer bucket.
And I'm going to create another series.
And obviously I'm going to put something inside.
Of this series.
Now before I just put that list of values in.
But here I want to do something else.
So one thing you can see.
Now we're never going to do this.
In our statistical analysis.
So this is just for interest sake.
So I'm putting inside of it.
Code that I wanted to execute.
So this.
You can see the open and close.
Turn green.
So all of this is going to go inside of this new series.
And what I want to put in it is this norm.
Remember we imported this normal distribution.
.rvs is random variables.
So I wanted to.
And I can actually.
You can see their size.
I say please.
Python.
Give me 13 samples drawn at random.
But they must come from a random distribution.
Norm.rvs must come from that.
Loc location.
It actually means the mean.
So I want the mean of those values to be 18.
I want the scale.
Scale means standard deviation.
I want the standard deviation to be 4.
And I want 13 values from there please.
Let's run that code.
It is now inside of.
Values 2.
Now.
Every time you run this block of code.
It will give you 13 different values.
Because they come from.
Come to you at random.
But from a normal distribution.
Now let's just move on.
Before we end this part of the lecture.
I'm just going to introduce you to the data frames.
So series was one.
Now the data frame is the other.
I'm going to make a new computer bucket.
Called data underscore 2.
And I'm going to make this empty data frame.
Why would I do that?
Why on earth would I want to do that?
The difference between a data frame and a series.
The series only had that one column.
With the index.
The data frame can have multiple columns.
And I can actually create columns.
By saying data underscore 2.
Which is now this empty data frame.
Open and close these square brackets.
And then put some text.
And that text is going to be the name of a column.
A column header.
Like in the spreadsheet.
You can type a name.
In the first row of all the columns.
That's what I want to do.
And I want to put in that column.
Values 1.
Remember my 13 values in my list.
So this is another way to do that.
Let's just look.
So it's printed out slightly differently from before.
Now it actually does create this little spreadsheet for you.
So I still have my indexes on the side.
But now I have a column name.
Now if you wanted to build stuff like this.
You could do that.
I'm just introducing you to the concepts here.
This is not the way we're normally going to use it.
You're going to have a spreadsheet with data.
And you're going to import that spreadsheet straight away.
You would not have to build a data frame like this.
I'm just introducing you here to a data frame.
So my data 2.
I can add another column.
This one I'm going to call var underscore 2.
And then that I'm going to put these 13 random values to.
Was this series.
So I can put a series inside of a frame.
A data frame.
Let's do that.
And now let's execute data 2.
And look.
Lo and behold.
There's now two columns.
And as I say.
Every time you execute this.
This is going to.
Comes from a random distribution with a mean of 18.
Now you're only drawing 13 values.
So your mean is never going to be 18.
It will be off of 18 most of the time.
Because it just drew 13.
If I drew a thousand from that normal distribution.
Probably my mean was going to be.
But look at this.
I can describe.
I can describe the whole data frame now.
And it's going to do two things.
It's going to do what we wanted before.
The normal descriptor statistics.
But it does it for each of my columns.
Hey.
Lo and behold.
Look.
It was close to 18.
It was close to 18.
With a standard deviation.
Very close to four there.
As you can see.
My minimum values.
My medians.
My maximum values.
Last thing.
Very quickly.
I'm just going to do this cell code.
And then we're going to stop.
So I'm going to make a new bucket.
I'm going to do something to my second data frame.
Which I created.
Data underscore two.
Now this is a bit of coding that you have to get used to.
So you're telling it.
Take data two.
And then take this column out of data two.
But you can't just refer to the column.
You have to refer to this whole name.
Of data two.
And you've got to put that inside of square brackets.
You've got to put this whole thing inside of square brackets.
Following data two.
So just get used to repeating this.
Data two.
Data two.
That column.
I only want the values.
From this column.
That are larger than 15.
So chuck out all the other ones.
And make a new data frame.
So this is what happens.
Every time I use a computer variable.
And then I attach something to it.
It will also become a data frame.
And then I'm just asking it to print it to the screen.
And it's going to create this new data frame.
And you can see.
It keeps the index values.
But these values are only.
It's going to make a new data frame.
But only where.
Values in column one.
This var one column.
Were larger than 15.
Good.
We'll stop here.
And we'll continue in the next lecture.
