Lastly, we're just going to do the while statement.
It's just going to evaluate and continue to do something while something holds true.
So computer variable, call it i, attach to it the integer value 1.
And now that it exists, remember the scope, so it exists outside of.
So while i is less than or equal to 5, do this.
So it's going to loop through this, up until this is no longer true.
So the first time it runs through, it's 1, because I've given it the value 1.
So it takes this value outside, it takes it from outside, whereas with a for loop I created
it within that for loop.
So while i is that, we're going to print i, and the shorthand I want to show you for i
equals i plus 1, it says this, i plus equals 1.
So remember this is not algebra.
When you write something like this, i equals i plus 1 is not algebra.
So if I take the i over to the left-hand side, it says 0 equals 1.
That's not how a computer works.
It's going to look at the right-hand side of this equation, and it's going to say, well,
what is in i at the moment?
Well, it's 1.
I add to that another one, which is 2.
And now I attach that 2 inside of the computer variable.
It's a little space in memory.
It's not a real mathematical variable.
And the shorthand of writing that, many computer languages have this shorthand.
Plus equals 1 means 1 equals i equals i plus 1.
If I put a minus there, it'll be i equals i minus 1.
It's just a little shorthand.
And as you can imagine, it's just going to execute and print 1 to 5.
Once again, this i exists outside of that.
And the last time it went through, remember i was 5, so it still allowed it through.
It added 1 to that, which made it 6.
It went around again, and now 6 was larger than 5, so it did not execute.
It just exited.
But i now is 6, as you can see there.
So that's it for flow control.
A lot to get used to, but very powerful stuff to use inside of your code.
