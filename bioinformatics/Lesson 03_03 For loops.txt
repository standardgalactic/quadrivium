So let's have a look at for loops. Now these loops are phenomenal and they almost read like
English sentences. Quite easy to follow along. So they are constructed like this. So let's have a
look. We have for and end. You've got to tell this little loop where to end things and it's going to
run around and around. This is our little raft running around and around in the river.
We create inside of this for loop a computer variable and this time I've called it i. I can
call it whatever I like within reason. I can't use Julia keywords and I can't use plus or minus
signs in between etc. But I've called it just i for i in 1 to 5. Now this 1 to 5 note there's no
brackets around it. There's no square brackets parentheses around it. So that makes this and
we'll have a closer look at this later. It's just a range object. It's just going to go one two three
four five. Print line we've seen before. It's just going to print a single line of text and
what it's going to print is inside of these parentheses and at the moment it is the value
that's inside of the computer variable called i. And then end. So we're going to run through this
through this through this. What this for loop does is it just evaluates whatever's there one to five.
So when it gets to five that's when we actually get two to the end of the of the code. So the first
time it runs through it's i is going to be one it's going to print one it's going to run through
it again and because this is just a range object it's going to go to two all automatically you don't
have to do anything but the integer value it jumps by an integer value. Let's run the code and you see
as you expect one two three four five to the screen. This little tab that you see there Julia
does that automatically for you or at least the notebook here does. If you write the four line and
you hit enter it does this little places this little tab to keep things nice for you no issue.
Now have a look at this. Now this one to five didn't have any brackets around it but now I'm
putting these square brackets around what happens here and it's these strings these and are and words
separated by comma. So these are three separate things and they just happen to be strings inside of
this these square brackets and I'm saying for word in this print word that's not print line just print
comma and this backslash t that means that a tab it's just going to leave a bit of space in between.
I'm going to execute this line of code so you just can you can see what happens. So there's this
computer variable called word each time that runs through it's going to take the one then the next one
then the next one as you can see it's these tab are tab words can't see the last tab there. Now we do
this in in teaching computer language by using these words that make sense. I just want to show you it
doesn't really matter what you call this I'm going to call it wrt don't know why just did wrt doesn't
matter it's not the word word doesn't mean anything it's just a computer variable that I came up with
because if I ran this code again exact same output so it doesn't matter what it is and this for loop
is clever enough to see that these this is a list of things actually called an array and we'll look at
these kind of things in the upcoming lecture and it's these three and every time it's going to take
one then the next one then the next one the print is this and I didn't say a print line here because I
wanted everything on the same line. If you just give it one string and there's no brackets around
it it's actually going to be clever enough to take each letter on its own and again I needn't have
written letter there I could have written any computer variable name there within with it that are within
the rules so it's j with a tab u with a tab l with a tab and it just iterates through each of those
characters now have a look at this now I'm iterating through something that's in within curly braces
so let's see what happens there and I'm calling my variable stuff just to show you that I can use
any word there within the rules so for stuff in this stuff that's inside this curly braces a 10 a 20
the word 30 and the square root of 1600 print line and I wanted to print stuff so whatever's in that
computer variable stuff through that loop then a tab and then the type of stuff that should be
interesting so we can see what 10 20 30 and square root of 1600 are and that's quite nice so this print
line so each is going to go on a separate line 10 is a 64-bit integer 20 is a 64-bit integer 30 is a
string and 40.0 is a 64-bit float now I want to show you something we created this these computer
variables first I called it word let's change it back to word just looks better it's good to write
code so that the code makes sense but I just wanted to show you it's not the actual word itself
so I've created this variable called word you have created a variable called letter you have created
a variable called stuff but it's inside of a for loop now this is called the scope of a variable
where does it exist I just want to show you that if you create a variable inside of a loop like this
it does not it ceases to exist outside of the loop unless unless something I'll tell you what that
something is so here I want to show you that it doesn't exist because I'm going to say stuff
and it's going to return an error now I don't just say stuff here and hit shift enter or shift return
because I know it's going to cause an error and sometimes you might know that something's going to
cause an error but you don't want your code to stop executing because that's what happens when there's an
error it just stops it executing and you don't want that in those cases put it inside of this try
catch in statement so try and then try something stuff if I just write the variable it's going to
output what that variable is but it doesn't exist its scope it only exists inside of this for loop
if that returns an error I catch that error and I put the error inside of a variable and here I've called
the variable x and I want to print two things I'm going to print a line where I tell what is the type of
the error and then there's this keyword show error in standard output and then the error itself in end
so this is a try catch uh it's a block of code that I am running and just to show you
so print line the type of the error it's an undefined variable error because that variable does not exist it
only existed inside the loop once that loop was finished it was wiped from memory and this the
show error standard output the error is stuff not defined so it's just a standard way if if ever you
have code that you're worried that's not going to execute place it here remember this little block of
code you can this is pretty standard stuff you can always have that in your code and put whatever you
you think might not work in there and then the rest of your code can go outside of this
now let's create stuff and put a string in it I exist if I just put stuff it says I exist there I
just put stuff and it threw up an error but I put it inside of this little try catch statement so it's
still con if if this happened the code wouldn't stop executing it would carry on now it exists now that
it exists I'm using it inside of the same for end loop there let's do the same thing
so it went 10 20 30 40 with the types of just as we had before but what is stuff now does it still
not exist does it cease to exist because it was in this no it actually doesn't because it existed before
it has a scope that lives outside of its scope is I exist outside of this for loop it is an explicit
variable it was explicitly created before this for loop and now if inside of a for loop its value
changes as it does first it was I exist then it was 10 then it was 20 then it was 30 then it was the
square root of 1600 it will keep the last value that it had as it should so that is just the scope of a
variable inside of a for loop just to show you one more thing about for loops you can nest for loops
inside of for loops so I'm running an outside for loop where a just iterates from this range object
from one to three inside of that is another for loop that goes from one to two and then I want
to print line a and b what do you think is going to happen it's going to say a equals one there's my one
b equals one and then prints it to the screen one and one but it stays within this inner little loop so
now it's going to go one two before it exits that little loop and goes to the larger outside loops
now moves over to two one two two and then three one three two so you can nest many for loops inside
of other for loops so we've learned quite a bit here we've learned about iterating through a for loop
and iterating through different things through a range object through these lists of arrays of text
through single left through the letters of a single word through this funny stuff that's all mixed up
and jumbled of any type and we've printed to the screen the type there of we've shown you that the
scope of this variable inside of a loop is just internal to that it ceases to exist outside I showed you
how to catch an error so that your program doesn't stop running and the pretty standard output as to what
to do to print it to the screen and then to show you if once it exists outside of this its scope is
outside of just this little loop it actually retains that value and then lastly how to nest the little
four loops inside of bigger loops
