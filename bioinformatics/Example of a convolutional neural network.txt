So in this video let's have a quick look at an example of a convolutional neural network.
So we've discussed some of the types of layers that go inside of a convolutional neural network
and what the idea is behind this convolutional or convolutional operation and that we're really
talking about images here. Images really work well when we when we talk about convolutional neural
networks. So we're going to use one of the data sets that is available right inside of KRS
and that's the MNIST data set. I'm quite sure you've heard of that. That's just tiny little
images of handwritten digits. They're all in monochrome in other words black and white
and they're all labeled. So someone wrote an eight and a seven and a six or I suppose all sorts of
people and those were just labeled by human beings as such. So let's import that and we're just going
to assign that to a computable computer variable called MNIST and what we are loading is this
data set underscore MNIST and that data set already has it's already been divided into a training and
test set so with these built-in data sets we don't have to worry too much about that. So all we have
to do is just assign for computer variables and as usual I'm going to call mine X underscore train
Y underscore train X underscore test Y underscore test and we see there that it's MNIST and then
as always with our the little dollar sign that's shift and four my keyboard and then train because
the training set and then the feature which is the actual images X and then it's the labels Y. So we're
going to do that both both for the training and the test set. So if we look at the dimensions just of
Xtrain we notice 60,000 2828. So what does this mean? Certainly this is something larger than we've seen
before. In other words we usually just had the feature variable and there were say 70 rows or 10,000
rows comma so many columns and the columns those were the number of features but this indicates that
we have 60,000 samples of 28 by 28 and that is what these images look like. They're little grayscale images
they're 28 pixels by 28 pixels so tiny little squares and then each value is just between 0 and 255
as we saw before and that's just the brightness value. So let's record those as just as as computer
variables. I'm going to call it image underscore img underscore rows and img underscore columns. That's
just the pixel dimension because what we need to do we need to reshape this as a tensor in a format that
our model is going to expect because what is missing from this 60,000 2828 is the number of channels.
So we have to add that so let's use the array underscore reshape function. So it takes Xtrain as our argument
and then we have to pass in the number of rows in Xtrain. So we use c
function and then the in row function of Xtrain then image rows image columns comma one. So we add that comma one at the
end just to show that there's one channel and we're going to do exactly the same for we're going to do
exactly the same for for the for the test set there and then we're just going to store an input shape
because as we pass our first layer or first data into this model we just need to know the input shape
and the input shape is going to be 28 by 28 by 1. That is the size of the images and comma one there's
one channel and this is the way it is set up. If you use other frameworks some of them might use the one
or the number of channels first and then the row and column size but here inside of keras using tensorflow
back end it is image width image height basically comma one or comma three in case it was a color image
with three channels. If we now look at the dimensions of Xtrain we know that it's 60,000 28 28 1.
Next up we have to of course we have to normalize our data sets and because each value
that's just between 0 and 255 we can just divide by the maximum which is 255 so that's going to bring
everything in this 0 to 1 range for us nicely. I'm going to create a computer variable called num
classes is 10 because I'm going to use the two underscore categorical to do the one hot encoding
remember they're 10 digits 0 1 2 3 4 5 6 7 8 9 and we so they're 10 classes and the way that we use
two categorical is we're going to pass the the variable there that contains our labels why train
and why test comma the number of classes in this instance they're 10 so that if we have a look at
this first example in the training set its label was and it starts getting coming from 0 so 0 1 2 3 4 5
so one hot encoding for the first little image being a 5.
So let's create our model and as always it's just going to be a sequential model so we pass
we're going to create a computer variable called model it's going to be a keras underscore model
underscore sequential we're going to pass a two-dimensional convolutional layer next 2d
because we have it is a 2d image it has two dimensions in other words it has a height and width
width and height and we're going to do 16 filters of 3 by 3 each so we have these nine values that
are going to pass over our 28 by 28 but we have 16 of them so you can imagine we're going to run
through it once and we're going to have a slightly smaller image our resultant image that we spoke
about before but we're going to stack 16 of them behind each other if you want to visualize that we're
still going to use an activation function the rectified linear unit and now we put that input
shape in of ours which was 28 by 28 by 1. next up is going to be a max pooling layer so that's going
to take a little 2 by 2 blocks and it's just going to take the maximum value out of that then we're
going to have some drop out we can have drop out layers here as well and we're going to drop a quarter
of of the values and then we're going to flatten so that 28 by 28 is going to be flattened in the 756
just single vector because we have to pass this to a to a multi-lay perceptron a densely connected neural
network at the end so our first dense layer there is just going to have 10 units or the activation
function is always relu we're going to have a 50 dropout and then another dense layer which is going
to be just 10 units because that is what we want our output we have the number of classes is 10 and the
activation they remember softmax and if we run the summary on that we note that we have 27 3 27 320
learnable parameters and that is really not bad if we consider the size of our input vector 28 times 28
now this is a i'm going to say straight off this is a horrible model this is not going to do
probably not going to do very well and we definitely add another second convolutional layer there maybe add the
number of the number of filters there or the kernels and then certainly have more than 10 units of my
first dense layer there if you really want to some good accuracy but this is just to demonstrate the
different layers that we have spoken about compiling that we're going to always have the loss the
categorical cross entropy the optimizer i chose here just for argument's sake is the delta optimizer and
the metric is going to be accuracy we'll make a batch size of 128 and we'll run through 12 epochs and then
pass the fit function pass the model to the fit function and have a validation split of 0.2 so if
you download this actual code you can run that and you'll have a look on our studio what the outcome is
going to be and then all i did at the end was just to create a score computer variable here we passed
the model to the evaluate function and we pass x test and y test and we concatenate this the test
loss and the score dollar loss so that's one of the values that is inside of the score and we see a test
loss of 0.18 and we see a test accuracy of about 96.45 percent so i encourage you to download this file
or create your own create your own convolutional neural network as you can see it really isn't that easy
and start start your first look at some other convolutional neural network using the inbuilt
using the inbuilt image data sets in future i'm going to show you how you can use your own images
if they do live on your internal drive how you can use them to pass it to because that's quite a bit
different than just using these these inbuilt images now there are lots of other image data sets
available as well c510 that those images with 10 classes c5100 these things are all built into
kerosene and i urge you to explore those
