Now numeric comparisons that's actually quite a bit of fun in writing computer code and writing
loops and decision-making trees you're gonna have to use comparisons all the time and when
you compare something to each other you're either going to have a true or false as a return so this
is called boolean logic which is just going to look at whether things are equal or unequal and
with unequal we mean greater than or less than something else so it's got to be countable in
some way and the first comparison is this equality comparison with double equal sign so I can just say
the following three equals equals three so I'm not assigning three to three this is not an equation
with the left-hand side or right-hand side when I put two equal signs there this is asking a question
is the left-hand side equal to the right-hand side and if I hit shift enter it returns a true it is
true that three equals three so I haven't assigned anything I haven't written an equation there I'm
asking a question just as much as I can say is three greater than three and that of course is going to
return false for me I can ask is three greater than or equal to three so it's either got to be greater
than or equal to if either of those things if either of those things are true it will return a true value
for me indeed because it is equal the less than I can say is three less than three of course that is
not so but if I say is three less than or equal to three yes indeed it is equal so it's one of those
things are true it's going to return that for me I can also say is something not equal to so three
not equal to three of course it is so that's going to return a false for me so comparisons you really
these type of comparisons come up in code all the time and it's good to know about them now there are these
special there are these special cases in special values in in computer language and Julia is no different
specifically in Julia we have this nan not a number it's a it's a type and usually comes up when you
have missing values say for instance in a spreadsheet you have missing values that missing value in amongst
all other values is not a number it's just nothing it's not it's not empty really it's just it's just
not a number and then we have positive infinity of course and negative infinity as values so let's look
at this curious thing called not a number let's say type of what is this what what kind of you know
what what kind of type is it well we see it's a 64 but floating point value now remember floating
points are decimals as I said we're going to get into what what types are what we see it's classified
in Julia as a 64 but float now we can ask the question is a not a number equal to not a number what do you
think that is going to return well it's going to return false it can't it can't evaluate these things
because not a number is not a number so how can you say that not a number is equal to not a number
it is not a number it's impossible for the computer to evaluate that I can also ask is not a number larger
than not a number again that's going to return a false for me let's look at infinity what is the type
of infinity well it's also a 64-bit floating point value but infinity now I'm going to show you
64-bit floats have a maximum and a minimum value above which the computer can't deal with and infinity
is well beyond that infinity is something very special but it is classified as a 64-bit floating
point system because the computer will have to deal with floating point values when it does calculations
so what if I add one to infinity let's do that infinity let's do this I'm going to say
infinity plus one is that larger than infinity and that is false remember infinity is a very special
mathematical concept infinity and adding more values to infinity doesn't make infinity bigger it is just
still infinity so it really is not bigger than adding one to infinity is not really bigger than
infinity even though it is held as a floating point value which actually if you do add one to that
something should be happening there we can very quickly just look at something else is infinity plus
one less than infinity no and there's a little reason why I put that in we'll have a look at that
later if you add one to a maximum value that a variable can hold or type can hold something funny
happens but in this case understand that that infinity is a specific mathematical entity
and we really we really have to deal with it as a mathematical concept now we can also do logical
tests using functions just as we had plus and minus and multiply and divide as functions we can also do that
over here so we can compare values and but this time we have to use words so we can say is equal that is
our little function is equal three comma three and indeed that is true they are I can ask if something is
finite is finite now stupid example here I'm just going to pass an integer there is an integer finite
indeed it's true it is it is really I can ask if something is infinite is infinite now three infinite
definitely not that's going to return a false for me now what about nan values I can say is nan
and let's put in a not a value and indeed that is true not a number is not a number now I just want to
show you something very peculiar let's have 0.0 negative 0.0 is that equal to 0 so here I'm just
using the normal boolean comparison here and it's going to say that is true I just want to show you
this though if I were to say if we were to say is equal those same things let's have negative 0.0
and we have just 0 there let's see what happens there that returns a false so we had it as true
when we used the operators here but if we use a function it returns false now there's reasons why
that was coded to do that you can create your own kind of comparisons you can write your own code
to develop new ones and there's a reason why these had to be separate for reasons that we we needn't
really be concerned about here just for you to be cognizant of the fact that you are going to get
true if you do this and for the same values you're going to get negative if you do that
now we used words but we could really also just do this
3 comma 3 so I can really just use those signs just as we did with plus and minus
it's still going to be a function and in this instance it's going to return a true for us
time you guys
you
you
you
you
you
you
you
you
