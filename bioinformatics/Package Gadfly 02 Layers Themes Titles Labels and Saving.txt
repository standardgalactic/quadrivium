So let's add some layers. So you can see this plot that the function from
GatFly that I've had before and I'm just going to add these layer functions
and they are separated by commas. So there's my first layer, here's my second
layer. It's separated by commas and it takes arguments inside of parentheses.
So what can I do? Inside of this I just use what I would have used for my
plotting. So I have my aesthetics x equals x values 2, y equals y values 2 and the
geometry I want for those sets of values is the point and in the second layer I
want them sorted. So I'm passing the sort function to the values as the aesthetic
before I actually plot some points on them as well. So two sets of plots actually
that I layer on top of each other and there you see them. Only problem is they
all colored in blue. I can't really distinguish between these two layers that
I've added to my plot. Now I can add some extra arguments to these layer functions
here but an easy way to get to get to it is just to to do some themes. Now let's do
this. I'm going to have my two layers again layer and layer and the first one is x
valves and y valves as two as far as my aesthetics are concerned and
geom.point and my second layer exactly what I've had before but I'm adding a
theme. And the theme takes a lot. There are a lot of arguments and depending on the
type of geometry you use you can introduce certain themes and some arguments to the
themes you use work for all plots. What we are going to pass here is default
color and because it's inside of this layer it's only going to pertain to these
little point geometries of these aesthetics in this layer. And I'm passing
passing it this value colorant orange. So there's certain colors that you can use
their words otherwise you can use hexadecimal values just with the hashtag. But this instance
I'm going to use orange. Let's look at what the output looks like. Now I can distinguish
between the two layers. The first one was this deep sky blue. That's what this blue is called
in case you were wondering. Deep sky blue all one word. And the second layer is now going
to have a default color called orange. So all the geometry and in this instance it's the
point geometry is going to be colored orange. Now I can distinguish the two sets of points.
Now I want to show you just to add a legend because as you can see by default here there's
no legend. Not for these point plots or scatter plots. And with that I also just want to show
you a different way to use the layers. You can use layers like this just to add a layer to a computer
variable. So I'm going to call it points1 and points2. And points1 is layer. My x and y
ascetics is point. And it has a theme and that default color is colorant deep sky blue. That's
what it was anyway. And points2 is another layer. In parentheses all the arguments that I would
have done before. It's point and theme. Default color colorant orange. Note there's no parentheses
there. It's colorant orange. And instead of orange as I said you can use hashtag and then the hexadecimal
values. Now I can invoke the plot function and instead of layers I've got points1 and points2
which refer to those layers. And this is how I'm going to add. This is how I'm going to add just that
little key to the side. And I use this keyword called guide. So that's a new one. Guide.manual
underscore color key. And it takes parentheses. It's a function. And it takes various arguments.
The first argument that it's going to take is just the title. Legend for this plot is what
I'm going to call the legend. Comma. And then you see we've got this list in square brackets. Set of
points. Sorted set of points. So I can actually pass string values to the legend that I'm going to
use. So the blue, these blue dots are going to be called set of points because that was the first lot
that was mentioned. The first layer that was mentioned. There's a second layer mentioned. So that's going to take
this string sorted set of points. And then comma, the last argument that it takes is you can actually
specify the colors. So again, I stuck to deep sky blue and orange there. So I passed deep sky blue and
orange to my legend. Now let's have a look at that. So we're going to get exactly the same plot as we had
before. But now we have this legend. And I specified this text legend for this plot. I specified this
text set of points and sorted set of points. And I specified these two colors all in this guide dot
manual color key. So great. Now you can add legends to your plot. Now one thing is this grid that we have
here, um, I can actually specify the color of this grid. So I'm going to do, just go back to an easy
one just with two layers again, the second one being orange, but inside of the theme, which applies
to the whole plot this time, look that it's outside of this layer, this layer with its open and closed
parentheses there. So it's going to apply to the whole, it's going to apply to the whole of the, uh, of the plot.
And instead, see in this one, I've got these dotted gray lines. Now it's all white. The background is all
white. And you can pass a different color to it. Now, if I, uh, if I hover over it, it's still going to
come up. But when I move away, I've changed the color to white. So you don't see those dotted lines.
Later on, I'll show you another way of getting rid of that by just decreasing the size of it really to zero.
But you can see the difference. Grid color, that is not the background color. That's this,
these gray lines. If I move away, they're white and you can't see them. They are still there.
And in this instance, when I move away, they're actually visible as this light gray.
So I can also change this mouse over color to white as well. That will make them disappear as well.
Let's do that. So everything stayed, stayed the same. I'm also changing the grid color focused argument in this,
this themes argument to white as well. So that's one kind of cheating way of getting rid of even if I mouse over now.
If I did a mouse over there, you can see the lines appear. If I do now, they do appear, but they're just white.
They're the same as the back, default background color of my plot.
Now let's just increase a line thickness a bit using another argument that we find inside a theme.
So the settings that we're going to pass is x is x values 2, y is y values 2. It's point.
I want a line in there as well, but I want a linear model as far as at least like least squares line that I've got in there.
Linear model line. And I can specify inside of the theme line width, and I want it to be 4px.
That's 4px. You've got to put the units in. You can use inches, centimeters. I think there's quite a few things.
So we've had this plot before, but inside of the theme, I can actually just make this whole line a lot thicker.
Good. Last thing I just wanted to look at were these themes. We'll get to add a lot more things to themes later,
but just as an introduction, we can also change the colors.
Now look what I've done here. So it's plot with a layer.
The first layer is going to be a point geometry with this, these aesthetics,
and it has a theme with a default point size of 10 pixels.
Instead of these small little ones, which are the default, I'm going to increase that.
In the second layer, I'm passing the same, I'm passing exactly the same aesthetics,
but I'm doing this linear model line called smooth method equals colon lm for line.
And the theme I pass to that is a line width of 4 pixels and a different color.
This time I'm doing default color equals colorant orange.
So I think you can well imagine what this is going to look like.
So what I've done now is I've changed the default size of this in the theme of the first layer.
The second layer is this linear model line and I've made it thicker with line width.
So you can see this line width there and the default color.
So looks quite spectacular there.
Last thing quickly for this section is I'm just going to add some labels.
We've seen how to add our legend.
But we can also introduce this new keyword called guide.
Guide.title, guide.xlabel, guide.ylabel.
And as you can well imagine, that is just going to put some text.
A title and x and y.
So you see the static that I passed there?
And the geometry was point.
But now I've got my title, my scatter plot.
That's the text that I use.
And x values and y values were the two strings that I passed here.
Lastly, if you want to save your plots, of course, this is iJulia inside of a Jupyter Notebook.
I can do various things.
But if I want to use Julia just to save these plots, I'm going to import this Cairo package using Cairo.
And I'm just going to import distributions as well because I've created a little plot here.
There you see the plot.
And I'm using some distributions there.
Don't be concerned about that and stat and all sorts of things that I'm using here.
It's just a normal plot function.
So don't worry what's inside of there.
But inside of Cairo, I have this draw function.
Draw.
It takes arguments.
The first argument, PNG, because I want a PNG, Portable Network Graphic File Format for my plot.
I give it a name.
And I can specify the size in either pixel size or inches or centimeters.
Here I've chosen 8 inches by 6 inches.
Comma.
And then it takes the actual plot.
So you can do it all in one as I've done here.
And if I run this, nothing is going to happen.
But if I were to go back, I suddenly see there it is.
My QQ plot has appeared.
And depending on the browser that you use, you can actually print that to the screen.
But it will save that for you.
In this instance, we're using Julia Box.
So I can go into my files here and sync and I can actually download it to my computer.
Good.
In the next section, we're going to import a data frame.
And that's what we're interested in.
Gadfly is data aware so I can actually plot some data straight from a data frame.
Outro
Thank you.
