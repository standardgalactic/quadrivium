all right I think we're ready to begin
um now it is my distinct honor to
introduce for you here today Hal ailson
and Gerald susman joining us remotely
from
Boston and yes
now they are of course the creators of
um structure and interpretation of
computer programs um also known as sip
sicp or simply the wizard book and I
needn't tell you about the enormous
impact this work has had on the computer
science curriculum both in the US and
elsewhere in the world and individually
on generations of developers including
most of us in this room so I'm not going
to tell you about their work on sicp I
just want to take a moment to tell you
about some of the other great work that
they're doing um starting with Hal so
Hal abson has been working for decades
on making things more open beginning
with um uh the open courseware
initiative at MIT which was as far as I
know one of the first or if not the
first such
initiative um making education more
accessible to people all around the
world um he's also worked on making
um uh comp the power of computation more
access ible starting with the logo
project back in the' 60s and' 7s and all
the way down to the uh MIT App Inventor
project which he's going to be telling
us about today I
believe and he's also worked on the
Creative Commons initiative which forms
the legal basis of making educational
materials and things placing creative
works of all kinds in the public domain
so this is all incredibly valuable stuff
and um I'm so glad that you're working
on this how and um Jerry in in addition
to his work on
sicp has also worked on numerous other
things he is of course one of the
creators along with guy steel of the
scheme programming language of which of
course racket is a member in that
family and he has also worked on
reforming the physics curriculum and
attempted to introduce the scheme
programming language into into the
physics curriculum into the specifically
into the teaching of classical mechanics
and formalizing some of the the
procedural aspects of classical
mechanics I don't know how much success
you've had with this Jerry but we'd all
be certainly very interested to hear how
well scheme is doing in the physics
curriculum in addition to that he's also
worked on fields two numerous list from
synthetic biology to um working on
amateur and professional telescopes so
he really is a polymath and you know
modern day renaissance man and I think
we are very privileged and honored to
have here Hal and Jerry so please take
it away
okay well I just want to say thank you
how and I are yeah honored to be appear
before you and we also uh greatly want
to congratulate you for doing wonderful
work in in developing software that's
clean and understandable and can help
people to and I think that everybody
everybody software engineer in the world
ought to be looking at things like
racket to understand how to do a good
job and that's some I really think
anyway I will start out let me um get my
screen uh shared for you
uh here it is
uh there we go okay I presume you can
see that my my screen um so of course we
are really interested how and I have
both been interested for our entire
lives in teaching people thinking we got
that idea basically from our teachers uh
Seymour paper and Marvin Minsky Seymour
actually wrote a book called teaching
children thinking okay and I they think
the most important thing that they they
taught us is that programming is a means
of expression in the same way that
writing your natural language English uh
or playing music or uh you know in fact
doing things like mathematics all of
those are means of of expression and
that programming is a new new means of
expression it's very very powerful and
something we should we should learn
about and make sure everybody in the
world knows about okay
now so I'm going to proceed by giving a
bit of of the philosophy of this stuff
okay uh I I started out in for me uh I
suppose I was teaching electrical
circuits in
1974 okay I was teaching I was my first
faculty teaching I suppose I was 1973
when I told what enm but I was teaching
circuits and I was observing I'm a I'm a
circuit guy I'm an old hand radio
operator and I observed that the way in
which uh we taught this stuff was not
the way the experts actually deal with
circuits right we we when we teach it we
put up equations Noe equations and
things like that but the fact is the
experts hardly ever write any equations
at all how come well the answer is that
the things that they we teach are the
things you could write in English text
and small numbers of mathematical
equations that could fit on a Blackboard
so I I decided it was important to write
down these things as procedures write
down the things that an actual expert
does and then write it as code that a
student could read and then the idea was
if a student could read that code the
student could learn the the techniques
of an expert and that's started and of
course I did this with originally with
Richard stalman who was an undergraduate
graduated Harvard at the time and uh I
hired him to work on things like this
with
me next uh in 1970s I continued this I
developed a class with Richard adley
Adler unfortunately deceased he got
killed in an automobile accident okay
but um uh the there there were students
who learned about electrical circuits
and programming we taught them this is a
24 unit subject that was taught by
Richard Nadler and me two years uh one
in 78 and one in 79 and uh we basically
that's be twice the size of an MIT class
we taught them how to do electrical
circuits and programming by by
incrementally writing a symbolic
electrical circuit analysis system in
lisp okay so Jerry actually let me just
stop you for a moment there is in
there's an artifact on the screen
blocking the titles of the slides ah
sorry I'll fix that I will fix that
that's easy okay it's a bug in the in
the zoom World got it perfect great yeah
looks I I I thought it wasn't there for
you but it might be for me anyway uh so
the next thing to realize that spent a
lot of time thinking about that I uh
talked a lot with my friend Joel Moses
and we decided that uh that programming
is really the abstract version of
engineering design okay it's the fact
that most of the time you have no idea
what you're trying to make is a a
partially defined goal but but in fact
when somebody tries to give you specs
that doesn't make sense what generally
is you figure out what specs you can
possibly eliminate Implement okay it's
not like but it's not like physical
systems where you have problems like uh
like tolerances like the parameters have
particular values plusus 5% okay on the
other hand what we are limited by is the
fact we make more complex things this
way we make things that are so humongous
so huge in number of parts that the main
problem is control the
complexity and so that's the that's a a
vision that got got into it that time
now uh right approximately that time
just after that how and I got together
and started teaching this class and I
think the the text on this slide is
probably the most important piece of
text that how and I ever wrote okay and
I'm going to read it to you slowly
computer science is not a science and
significance has little to do with
computers the computer Revolution is a
revolution in the way we think and the
way we express what we think the essence
of this change is the Emer of what might
best be called procedural epistemology
the study of the structure of Knowledge
from an imperative point of view as
opposed to the more declarative point of
view taken by classical mathematical
subjects mathematics provides a
framework for dealing precisely with not
what Notions of what is computation
provides a framework for just dealing
precisely with Notions of how
to so this is the idea is that for the
first time in history we can write
recipes okay for example that are
hundreds of pages of long and make sense
as opposed to recipes that would have to
take one page and therefore we can
explain to students things that couldn't
be explained without this kind of of
structure so then there was a REV
Revelation at that time and I want to
say it actually started earlier uh when
I was a freshman I was taught uh lisp
probably by
by by Bill
gosper okay we we used to go to to uh
Chinese restaurant
late in night I was member of the the
misy hackers group okay which a bunch of
undergraduates and others who just loved
playing with computers and basically did
what Minsky needed done okay and the
most important thing there is that over
one the dinner I believe gosper
explained to me the AAL apply
interpreter okay now here's of course a
very concrete syntax version of it and
you've all know that concrete syntax is
not the way you want to do things but in
fact it is the tightest little picture
that gives you with that's your
absolutely mechanical but what's going
on is EV Val takes an expression
environment and calls apply with the
procedure and its arguments because it
pulls those out of the expression okay
apply takes the procedure and the
arguments and makes a new environment
and then calls the Val on the body with
that that environment that's an
important Loop okay the amazing thing is
that there's a very similar thing which
I learned when I was a freshman about if
this was my the second term when I was
taking M uh which is the that there's
maxel equations and notice the important
thing here is the two curl equations b b
is is the magnetic field it says the
magnetic field is coming from the rate
of change of the electric field and the
electric field is coming from that's e
is coming from the rate of change of the
magnetic
field this is very similar to that other
idea okay by the way that the bottom is
is a conservation of charge which was
discovered by Benjamin Franklin uh and
Maxwell Maxwell credits him with that
but in any case maxw had this wonderful
combination he did he made this com
manipulation I suppose on the same day
he wrote down the equations for the
first time although they were not like
written in this beautiful um Vector
notation and he ends up with the equ
wave equation which is the which is a
traveling wave okay all of a sudden let
there be light that was light and that's
beautiful
and to me that the Revelation was that
these are the same idea that's the all
it's it's dual variables that occur
everywhere in in in physics and in every
other kind of engineering I know of okay
it's that there's that things like force
and the and and and distance or momentum
and and and and velocity I said it
wrong yes Force time distance is energy
okay I'm not going to get expound on
that right now but that's that's the
idea okay so the important reason for
studying programming in general is that
there's there's among other things
amazing intellectual impact that we have
on students by teaching them and things
like that we they get to confront all
sorts of things like what does Chicago
mean I once had an argument with a
philosopher that was almost came to a
fist fite over the meaning of the word
Chicago what does identical mean we only
a computer programmer understands that
two things are identical only if
modifying one changes the other okay
what is about the why are quotations
special the problem substitution occurs
okay the you know if you if you um if
you have John knows that the Morning
Star is is Venus and we all know the
Morning Star is the evening star it
doesn't mean John knows the me evening
star is Venus and there were all sorts
of other things like that you know there
are questions about why why if something
is Raven is black seeing a black raven
is evidence for that but seeing a white
a white coffee cup is not
right so but the next challenge is how
do we teach students to think uh this
way and we have to worry about again can
the code be written by and read by a
student as literature of the subject to
be taught that's the thing that I'm
thinking about and there are lots of
things like that say Hal and I also
taught together a class in signals and
systems with Bill Sebert about things
like that okay we can't do that right
now okay uh we had to get get somebody
from walking into the room uh and we
also worry about about things like one
thing I think is very important is
people have make this terrible idea
thinking that you should asham be
ashamed of yourself if you have a bug
that's not reasonable bugs are part of
the method of getting of get of of
making good good designs that's the
incremental path to making a good design
is to make something that almost works
and then fix it okay so I'm not going to
elaborate on that because we don't have
enough time today but I want to say that
of course there there are bugs that
don't make sense uh would you like uh
python is is an example full of full of
gotas like this you look at the what
what does this regly bracket mean is it
a said or is it a is it a dictionary um
much worse uh what about things like uh
like the difference between a uh a list
and a and a tupal you know in order to
make a tupal it has to have a comma okay
yeah know this is the kind of thing that
I when I learned this stuff because I
had to learn some python I lost half an
hour just trying to figure out why my
tupal didn't do the right thing okay um
anyway the other important thing is is
to think that if you can think about
using programming as a way of expressing
stuff then take complex deep stuff this
is Advanced classical mechanics where
one you're te think about hamiltonians
and Lans and that sort of stuff and the
law of motion at the level of of no
there's a theorem for why for example
uh the you know conservation laws are
the same as as as symmetries of the
universe okay well that these that you
start teaching that but the important
thing to realize is expressing the
methods in a computer language forces
them to be unambiguous and
computationally effective the task of
formulating a method as a computer
executable program and debugging that
program is a powerful exercise in the
learning process that's the goal there
and I've also been developing with my
friend Jack wisdom I that was previous
was Al Jack wisdom uh we fig we want to
understand general relativity that's
very not very easy okay the math is
usually impressionistically written it's
hard to tell what was actually said it's
a the the math is the math is written to
be ambiguous in the way just like
because math is a natural language okay
well but if you transform into computer
programs then Einstein's field equation
makes it perfectly clear is a perfectly
clear idea okay and we of course you
have to fill in all the details and you
right so why is programming important it
provides Pleasures they intellectual
Pleasures that's why it's important to
teach kids this okay it's a Phil it also
causes philosophical contemplation there
are all sorts of Eternal questions you
have to understand there's debugging is
fun okay and it's important as a way of
making incremental progress toward
getting an answer there's the pleasure
of discovery of good ideas for example I
not going explain that but for example U
that high order functions and expensable
genetic procedures makes automatic
differentiation essentially trivial okay
and the great thing about about math is
well our impressionistic math cosine
square of theta is cosine Theta time
cosine Theta but cosine minus 1 Theta is
not one over cosine Theta that should
make a little kid in in high school
really upset saying there's something
wrong but it's not really wrong it's a
natural language you have to get around
that and it's nice to be able to say
that precisely and programming bases
that
so I'm almost done got one more thing to
show you here's or here's one more thing
that the most important sentence in the
r rnrs in my opinion is right at the top
programming languages should be designed
not by piling feature upon feature but
by removing the weaknesses and
restrictions that make additional
features appear necessary and Marvin
Minsky said to me once anyone can learn
Lis in one day except that if they
already know fortun it will take three
days okay so and of course if you want
to have some fun as a book by Chris
Hansen and I where we elaborate on
better ways to make things very flexible
and finally I have a plug for the most
one of the most important things of all
that that we have to make in order to
make things democratized as how would
say to make it so everybody can access
things and so that every that that we
can all learn from everybody else's
stuff we want to write free liy software
that's like GPL and the books are right
and Talis to I suppose is com creative
comments by sherik okay meaning you have
to say say yes s been wrote this but
that's a different thing from you can
pass it around modify it do what you
like I can do that a moral principle and
I think you you should really support
the free s foundation and that's all I
have to say Let Me Now give this back to
how give it back okay um let me unshare
that's my problem there's a share
unshare there how long did I
take
okay hi everybody and thank thank you
for coming I'm going to be talking about
something that complement what Jerry
said which at the root are kind of the
same thing but takes a very different
perspective let me share and start this
um we didn't develop a food transfer
protocol I would otherwise make tea for
everybody and is captured in in this
distinction between not so much thinking
although I'll talk about thinking but
we're now in a world where this has real
implications for Action I'll talk a
little bit about the project I've been
doing which is called MIT App Inventor
but let me start kind of where Jerry
started I showed up at MIT in 1969 which
is way after Jerry but I was lucky
enough that almost the first person I
ran into when I showed up at MIT was Pap
who was course a math professor then and
soon after that Pap wrote this amazing
amazing amazing memo logo memo number
one called teaching children thinking
Jerry number two number two number two
which Jerry already
mentioned and what it
said was that this was about as Seymour
said presenting a grander vision of
educational technology but the point is
that the technology is something that
children themselves learn to manipulate
it children themselves right not
researchers like us not people in
industry but children
themselves and what what did they get
out of that an greater and more
articulate Mastery of the world right a
sense of the power of Applied knowledge
he didn't talk about really
understanding a lot of things this was
really about how children were thinking
about themselves as intellectual agents
paper paper uh came to MIT from working
at the lab of Jean Pi who great great
great great great uh educational
psychologist and paper formulated an
idea about the construction of knowledge
called called computation called comp
constructionist constru constructionism
constructionism means is a theory that
says I create my own knowledge by
building artifacts that I can share with
people and the thing that we should
realize is that by empowering people to
be using these great programming
languages like lisp and Racket and
scheme and all of that we are empowering
people to construct their own knowledge
by this Theory called constructionism
already for our book our
book as as Jerry hinted came directly
out of what Seymour was saying it's
about how we are thinking but even more
how children can think about things and
what children can
do paper was pretty amazingly together
with Marvin Minsky co-director of the
MIT AI lab and he was also the of the
MIT logo project which started in 19
actually 68 that's right and our our
motto there was that computers are for
kids but think a little bit
1968 1970 was a really really long time
ago and the idea that you would take
these really powerful machines like a
like our pdp10 and what you would do is
open them up to kids was uh was almost
heretical I mean people would come into
our lab and say something like show me
the robots and there just was not the
sense that these enormous devices that
we take for granted right now would be
things that you'd put in the hands of
kids that was the gener Genesis of logo
I wrote I wrote a book about logo for
the Apple logo for for a bunch of things
about taking effectively something very
very much like scheme scheme with a
syntax level and saying had you Empower
kids to be using
that and the buzzword is Jerry didn't
quite say it is computational thinking
peer actually was not peer was kind of
the first person to popularize this idea
of computational thinking again the key
word there is
thinking card actually didn't call it
computational thinking he called it
procedural
thinking which will give you a hint of
what's really important in the stuff
we're all
doing and we can list what we think is
important there there's ideas like like
procedures and iteration and recursion
and all of this
stuff and a lot of what's going on in
the world now because the world now is
kind of caught up with what we were
thinking in 1968 which sort of says gee
this idea of programming and expressing
things and programming languages are
actually a valuable thing to do in
education and I'm going to say again
that was not there in
1970 it's hard it's so long ago it's
hard to remember
that but these days I want to say we're
in a new transition something really has
happened over the last two years and I
want you to appreciate that that it's
not only a question of thinking the
infrastructure rure that we have right
now that kids can do can actually make a
real difference not only not only a
difference in their mind and how they
think about themselves but a difference
in the world so what's going on now is
we can Empower
kids to
really address authentic challenges and
build things that impact their life
their family their friends their
Community even their city and Country
and I'm talking about about uh I'm I'm
talking about middle school kids just
imagine the infrastructure we built
right now was so powerful that even kids
have this
ability that's something that hasn't
happened until a couple of years ago and
people still don't appreciate
it that you can anyone in particular
kids can create original apps that have
societ soal impact even if they have no
Technical Training Beyond Elementary
School even young kids they can do this
all over the world and even in the
poorest
communities now let me show you a couple
of examples of what that's like um
Darvey is one of the largest slums in
Asia it's outside of Mumbai it has about
a million people in it the average
income is is about $50 a
month right so dery's again major SL
dery is also is also home to the uh sort
of the dery tech girls and what they do
is they create applications and software
to improve the lives of the other people
In Dary right kids these are kids 13 to
16 right Dary girls can change and the
thing I want you to realize is kids
these days can do that so an example of
one of the things they did is they built
an app that's called Pon which means
water in their language that schedules
their family's time in the community
water distribution plant and of course
that's really meaningful to them because
that avoids fights and avoids arguments
people don't have to go there all day to
wait and of course for those you if
you're a 13-year-old girl that's
meaningful for you because who's your
family going to send to hang out at the
water distribution plan and be in the
FES
so this is an immediately relevant thing
that they can
do and what it shows that's
computational action because children
even in the poorest
communities can make things that improve
the lives for people around
them let me show you another example you
probably the Eastern European country of
mdova has been in the news because of
the threats from Russia
but outside of threats from Russia
Moldova also has a problem with
hepatitis B and there's an app that was
done by I think three high school girls
in
mova that says go find a good source of
water take a picture of it with your
mobile
phone uh fill out some comments there
are things you can fill out like the uh
the pump handle here is broken or the
quality of the water and then what they
can do is they can take that database
they can take that information and add
it to Google
Maps and what does that do that means
that anyone in mova anyone in the world
now has a resource where they can help
find good sources of
water right that's not a thing that was
in everybody's head even five years ago
right that that kids can make something
that has National impact
right so even children can create
valuable resources that have nationwide
scope or even worldwide scope and that
should be in our in in our Consciousness
when we think about why we're doing what
we're doing we're empowering everybody
even children to do this thing here's
another example from from the US um in
in Kentucky a very very simple app any
of you could make this it's the thing
that schedules that lists that I take my
medication but the important part is
that was done by a fourth grade girl who
was thinking about her grandfather who
has
Alzheimer and she said here is something
that would really improve the life of my
grandfather and I view this thing that
I'm doing as a tribute to my
grandfather right so this is not that
it's a great app it's how that girl
feels about her own sense of empowerment
and ability to do things in this world
of
computation so again even children can
draw on their personal
experiences to make life better for
others and to think about their own
sense of
power here here's another one that comes
from Hong Kong there's a thing called
dementia care companion there's there's
a lot of concern in Hong Kong about the
elderly and this is the kind of app that
you
expect somebody to have to help them it
has locator functions and alarms and
tips and what's really cool about it
that I never would have thought of in
this thing I don't know how many of you
would have thought of it it has
instructions and the instructions are
spoken in the in the voices of the
person's family member I just thought
that was wild I never would have
occurred to me and I said wow that
that's the kind that would occur to a
fifth grade kid but not to me and it's
an example of how by
empowering kids to do things they have a
different perspective on life and often
they make things that are better than we
the professionals would be thinking
about so again that's computational
action and it's about improving the
quality of life for family members but
also improving how you think of your own
ability to be a effective in this world
that we're all
creating final final one here's a final
one this is an app that was actually
done by MIT students that it reads these
urine sample strips and then basically
uses some AI to read what's on the strip
and do an interpretation of the
diagnosis and there it is being tested
in the village in Nicaragua so this can
happen all over the world
and again even students can make
Breakthrough Medical applications that
have
worldwide
implications this all works I should
mention this this stuff happens on our
MIT server App Inventor server which uh
actually runs out of the lab in this
building we have a million users a
month 70,000 a day and you can see a you
see a breakdown there about a quarter in
the US Taiwan and Mexico and Spain and
Spain are big big big users but it
really is all over the world uh almost
200
countries and that's what we're building
and that's the ability that we have to
empower
people and not only think about the
great ideas that come from being able to
do programming and building and
computation but the great ways that you
can think about yourself doing this
here's uh
here here's here's some very recent
Scopes we we have a there are 10 million
people who've used this system from
almost 195 almost 200 countries of which
47% almost half are in the developing
world this is not a thing about rich
countries only this is a worldwide
phenomenon and it's the kind of thing
that we are making
possible so again let me go back to
Seymour teaching children Thinking by
Seymour who at the same time he was
starting the MIT AI lab and thinking
about all this stuff was creating the Mi
the logo
project and what it was
about is not only ideas which are which
are incredible Jerry spoked about that
but it's about
how kids and everyone can think about
empowering themselves through this techn
building
thanks okay why don't you unshare let me
unshare
here okay well that was awesome thank
you so much alen Jerry um so of course
we have time for questions we have quite
a long discussion section
so please feel free to come to me
I'll just come up to me if you have
anything you'd like to discuss with
Howen Jerry um I guess I'll just start
by asking you this is scheme still your
language of choice and is your favorite
dialect of of scheme
racket that's for me for either of you
both of
you well well first of all if we have an
echo what's going on here
somebody's mine's turned off mine's
muted too hold on a second both of mine
are
muted something has making a well we
we'll solve the technical problem first
right this is not written in this
game yeah mine's mine's muted I think
mine is muted also in fact my entire so
somebody else has got a problem here
somebody has a a okay it seems I think
if I'm too close to the speakers it
might be picking it up okay okay anyway
uh anyway for me I will say that uh I
use scheme where than anything else uh
the reasons I use MIT G scheme is not
because uh it was done by my group
although it helps but the main reason is
because I know so much about its insides
that I can fix it and change it very
rapidly okay to do what I like okay
that's one thing but the other nice
thing about it is it's very good at
compiling numerical procedures into very
serious numerical code for next 6 okay
if I were starting again would be I'm
going to say something nasty if I were
starting again doing making the stuff
for sicm I would probably be using
Julia okay which is basically a scheme
with with with with syntax which I I
hate syntax I'd much rather use Lis
syntax but I'd be using Julia because
it's even better at numerical crunching
and on very very large scales and many
of the things I do require large
numerical crunches
I like to build uh you know I like to
build things that do Celestial mechanics
and things like that racket's a
wonderful thing but it has one one
problem for me it doesn't play well with
my most famous favorite interface in the
world which is emac by Contra contrast I
know it does have an there's an emac
interface but it I when I've tried it it
hasn't played well with emac and I live
in
emac I hardly touched a computer doing
anything else except for the emac emac
is very popular in this community and
you should try the latest racket mode
which is authored by Greg henders shot
and it's really good it's really good I
want to do that I haven't had the time
please send me email explaining count on
it you can count on everyone's gonna
send you an email about this okay fine
okay because I I I love I basically the
real thing I love is
emac okay
while we're waiting on more questions
I'd also like to mention one thing which
is uh when I was a kid I moved to a new
town which was Bombay Mumbai at the time
it was called Bombay um and you know I
was a was a kid I was 10 and I didn't
have any friends there and I was in this
big new town and every day I used to
walk a few blocks to get get to my
school bus Which would pick me up and
take me to my school which was like 15
miles away it was this huge enormous you
know big experience for a little kid and
the thing is every day in the morning I
would walk these four blocks from my
house to the bus stop and I would be
surrounded by people who didn't have
arms who didn't have legs and they would
just have their hands out and say you
know and then I was this little kid
faced with the daily choice of what to
do with the 10 Rupees lunch money that I
had in my pocket you know should I give
it to them one of these people or should
I eat my breakfast you know so it was it
was a very interesting formative
experience for me and I mention it
because I didn't know it at the time but
it wasn't something that was everywhere
in in Mumbai at the time I happened to
be living on the fringes of daravi which
is the community that you mentioned um
so it's incredible that this is a
community that um you know the world is
forgotten the man doesn't care about
them and you're empowering the kids and
the community members there to take
matters into their own hands and and uh
and fix these problems so that's that's
wonderful just wanted to say that
y uh thanks for a great talk I'm Sam
toin hawat uh one thing that's really
distinctive about sicp is the way that
it's been used for self-study and
self-education by so many people uh
around the world and but also it's been
a popular textbook uh used in lots of
places I used it as an undergraduate so
can you talk a little bit
about how you think about writing a book
that's
both useful for people trying to learn
something on their own with maybe
nothing more than a book that they
checked out from the library and also
writing a book that uh talented
Educators such as yourself can teach
from
I'm not sure it's I mean we we started
that book based on notes on a course
that we taught at
MIT and the thing that we forced
ourselves to do in this course is to
really focus on the
ideas so that's not true in every course
that you teach but here we were trying
to talk about fundamental
ideas to some really bright people who
were MIT beginning students and freshmen
but we tried but we didn't try to
clutter it up with a lot of details so
the book tries to be very clear about
what are the basic ideas and I think and
and also we had some really great ideas
to do on we came out of the the culture
of the MIT AI
lab where I I guess the key idea we talk
about was abstraction and you didn't see
that in a lot of other courses even now
if you look at
a if you look at most the programming
book about most languages they're going
to start by telling you what the
primitive data types of the language
are right pick up any book and you'll
see that in the beginning and what we we
start by saying what are the uh
abstractions and the means of
combination in that which is somewhat a
higher level and I think clearer and I
like we certainly were very conscious of
taking that perspective when we wrote
the book and I like to think that's one
of the reasons why people are able to
learn from it and people like it
I think there's another thing going on
here which is very interesting which has
to do with I believe that the way we
teach mathematics in general of which I
think of programming is a kind of
mathematical thing also but we meaning
it's symbolic reasoning and things like
that uh the we teach
mathematics incorrectly we teach it as a
set of
skills okay manipulate this expression
manipulate that expression you know poke
this thing you solve a quadratic
equation junk like that we don't teach
it as a language we don't teach it look
when I read a sentence of English I do
not look at the characters out of which
it's made I hardly see the characters I
rarely see even the words what I'm
seeing is a
meaning and I I know after having been
I'm 77 years old and I've done a lot of
of math and I can tell you I look at a
differential equation it's a sentence
okay and it's a sense that tells me how
something
moves and I think about the motion not
about the the characters in that sense
okay and I think that's a bug it's a bug
that the that the that that we teach
teach math and programming and stuff
like that that way the wonderful thing
about sicp is we don't teach people the
scheme we start speaking it the same way
you start a little child learns to speak
and listen to his parents and friends
talking David stop
talking okay David was David came in and
made a mistake yeah go
ahead all right any other questions yeah
I think we have one
here uh I'm William Bowman from
University of British Columbia so I
really appreciate the the philosophy
underlying sicp that computer science is
really a means of expressing yourself
and that's how I think about programming
languages in general but um particularly
because a lot of this work came out of
AI and we're now facing a new new form
of AI um one of the things I struggle
with when talking to new students is
they they think this means of expressing
yourself is dead now we can express
ourselves in natural language and all
programming will be solved in natural
language which I obviously disagree with
but I'm um
I'm I'm curious about your your take on
this or how you kind of address this in
the new generation of students who don't
see expressing yourselves in code in the
same
way yeah oops you turned on your okay
yeah yeah I'm really I'm really glad you
asked because I've been thinking about
that a lot and I think we all need to
think about that a lot because our our
our our first reaction is going to be to
resist it and say this is this is some
fantasy of the marketing people and
startup people but the idea you'll find
some actually some very smart people who
say gosh the appropriate programming
language right now is natural language
and we don't want to dismiss that out of
hand and if it doesn't work right now
you know look look at how how AI is
evolving and how you can interact with
things and correct them so we're we're
playing with that again thinking about
uh depart can Primary School students
Express themselves in that but I'm glad
you I'm glad you answered it I think
it's a very very serious question we're
thinking about this at MIT you know
should universities be teaching
programming at all or is there some more
deep fun deeper fundamental thing that
is not really about the syntax of a
programming language but more deeply the
ideas that we think about in a
programming language whether or not
they're EX expressed in the form of a
programming language or natural language
so I don't have an answer to that but
certainly I'm glad you asked because we
all should be thinking about that very
very seriously and I'm worried about it
too but I'm worried about it from the
point of view of we've had the same kind
of thing with mathematics okay
mathematics of course uh it persists and
the reason why it persists is because
you can't say in natural language some
of the things you can say in
mathematical expressions and that it's
very hard to imagine saying saying Max
equations and its
consequences without being able to do
that kind of writing and reading so
there's there are values to different
ways of expressing oneself as again
Minsky would say if you don't understand
something five different ways you don't
understand it so the fact that the fact
that one kind of expression
is currently becoming more dominant
again in the computation world doesn't
worry me because all of the ways of
expression will be
necessary hi I'm Greg from the a student
at the University of Washington so
you've mentioned uh difference between
programming and Mathematics several
times my question is how do you feel
about proof assistance such as the lean
programming language Pro or Pro proof
assistant don't to say that I can say
one thing it's great it's wonderful that
there are such things okay I want to be
very careful uh about that being able to
proofs are good and everybody does them
in even in their heads when they're
writing programs there are cases where
it's essential that something be true
and correct for example a garbage
collector but that's a small program
it's a one page thing if you that isn't
right you can't deug the system because
you know youve thrown away the
information you get you clear your
memory or something but the other but
the honest answer is that in order to
use a proof assistant or anything like
that you have to have a
specification and some some of
engineering yes you can specify
something you get a you get a you start
with a specification and you develop an
application or a mechanism I'm thinking
about electrical circuits or whatever it
doesn't matter you know signal
processing systems things like that
other times in again the same subject
electrical circuits you you figure out
what you want to what you can build as a
consequence of that you figure out what
specs you can achieve you other words
you're doing you're doing exploratory
engineering and in that case I don't
think it works very well to do to try to
group proofs because you have no idea
what you're trying to achieve until
you've achieved
it right a beautiful example of this is
it's easy to specify that a chest
program play plays legitimate legal
chess it's very hard to say what it
means to play good
chess okay do I help
you is that a reasonable answer that
H any other questions
um let's see I guess uh you mentioned
how you'd like to see scheme as L you
let me get away from the
speakers you mentioned Clark I I to hear
you a little louder okay yeah you
mentioned that you'd like to see scheme
as a way to describe U formal
mathematical language more
precisely um do you see room for other
DS dsl's domain specific Lang excuse me
there might be um more appropriate for C
Fields um in mathematics in general or
yeah how do you see that working
out but what you I'm trying to think of
an example what you're talking about
yeah I guess I guess what I'm saying is
because you mentioned in other places
how mathematical formalism itself is
kind of a is a language and um in many
cases it isn't precise enough or
explicit enough where a scheme is um so
could there be cases where we could have
similarly explicit languages for certain
subfields that are also you know not
necessarily scheme could be something
else sure well there are important
things that we don't have okay uh that
are essentially look when I'm thinking
about some mathem mathematical system
okay I'm often thinking in terms of
pictures okay me if I'm looking at some
a topology problem okay then drawing
little open sets you know things like
that and um I'm also also drawing
commutative diagrams okay and I'm doing
that in my head maybe on the chalkboard
I like chalk I don't like whiteboards
okay so I you know but I I'm drawing
these pictures and I'm reusing my visual
system to help do the
reasoning we don't have very good
interfaces for describing that kind of
stuff in it it appropriate for for doing
computational work so for example okay
I'm imagining supposing someone says oh
ah somebody's telling you the time is
running over
okay okay but you know supposing someone
says uh there is a continuous continuous
function between two you know two
topological spaces I'm immediately
seeing a picture of of two blobs and
there's I see for every open set in the
in the Target there is a an open set in
the source okay it's a picture you see
and how do I capture that the Mind's Eye
okay and that's not just good for math
it's for everything we don't have that
kind of of flavorful uh flavorful
language for describing things that are
essentially spatial and that depend upon
our visual systems do a lot of the a lot
of the hard work at the same time
there's a lot of work going on in
generative AI That's creating those
kinds of diagrams yes from from from
pictures and things so don't don't knock
that that could I that could easily
exist in a couple of years I hope
so
yes makes sense we have some questions
on the live stream well first a comment
without a doubt the sicp book has had a
lasting impact on how we think about
programming so of course um looking back
what are your Reflections on the book's
influence and what if anything would you
change or add to it
today well
even I mean even after we did it we
didn't do anything very much we didn't
do never did anything with types because
we sort of uh we we sort of don't don't
like that sort of thing we didn't do
really anything with classes you know
our our chapter 3 in srcp was one of the
first thing that started thinking about
object-oriented programming so we talked
about that but we didn't talk about
about classes and the way you organize
things like that so I would think if we
even shortly after the book was
published we said boy we didn't talk
about that very much so I'd certainly be
talking about that as an organization as
a way of organizing ideas so that's the
most obvious first one but you know
since then there are lots and lots of
things that we could talk about we've
said that book says nothing about user
interactions
right if you learn sicp you just don't
think about user inter interactions at
all and those are becoming even more
important than they were so there's a
lot of stuff that that if we were doing
this again we would put in well I would
want to say that I'd be careful not to
put too much into one bucket but I hate
his books that are a thousand pages and
cover
everything there seems to me very
important that what we did was a good
Colonel we if somebody wants another
book I think or if we wanted to write
another book on this stuff we want to
write a book about what you how just
said but I wouldn't want to say that
that's equivalent in the sense for the
for for a kernel thing I think what we
have there is good as that as good as it
could be that's why we never did any
further modification to
it so yes there are things that we
didn't talk about but again uh chick
kitchen sync books drive me nuts
that's very fair um that was a comment
from Gabby Corona we have another
comment um from Hunan so cool to see the
goats sicp is a book i' Return to for
inspiration and Enlightenment grateful
to Brian Harvey who I believe is the uh
professor at UC Berkeley for opening
this world to us
students that's
right um and there's there are two
questions that are closely related one
from Gab Corona and one from Armen Arman
K what is the future of MIT scheme in my
view it's the only scheme done right and
the related question what is your hope
for the future of scheme
languages o shots
fired I don't think scheme language
matters much at
all okay
think that uh what matters is the ideas
that are expressed I put what I thought
was the most important thing is what I
said in the when pointed at the R4 RS or
rnrs statement that the most important
thing is to not to re remove features
okay and keep and keep a language very
simple so that so that the only the only
features that are actually there are the
ones are needed okay it's a you know
making something very complicated is a
bad idea now MIT scheme has the problem
that the maintenance of it is not by
it's by a tiny
committee basically a few people headed
by Chris
Hansen that's that's and that's not good
so it can't last forever right then
again I can't last forever I'm 77 years
old okay and I don't really care very
much about about about that programming
language except or system except for the
fact that I use it a lot it works well
it works extremely well and it has it
has some amazing features that most
don't have uh but the but the real story
is that the language what matters is
what we what is the
ideas and I hope that the the ideas
survive I think the are mostly the ones
that come from the original lisp way
back from the time of John McCarthy and
his students okay it's not
me
okay yeah I just want to underline what
Jerry said about the key thing being the
ideas not really the centx and the
language in which they were expressed
and going back to what we were saying
before it might be that the appropriate
way to be expressing those ideas is
going to be natural language I don't
know but there's certainly a lot of
people working on that
I think natural languages too is not
dense enough to write very complex
things like languages that's the problem
yeah yeah the nice thing just like when
people try to make graphical interfaces
to programming languages okay they
there's not enough space the reason why
computer I say
uh designs of large electrical systems
are generally mostly most expressed in
in text not in you know in textual
descriptions like like uh
uh design languages forget the names of
some of them but right now but they they
you don't you draw the schematic
diagrams only for little Parts because
you can't make a schematic diagram big
enough physically that a person can look
at and the reason why text is so
dense with textual hyp so a formal
textual language is a powerful thing and
that can't go
away have a question here
here Jason heeman seat and Hall um I
wanted to ask a followup that uh design
philosophy that you described that I
think so many of us respect uh doesn't
seem like the foundational design to
Python and yet mit's gone that direction
for a course that I know you both love
very much why is that the right thing to
have
done it's
complicated okay I I think the answer is
not that not that uh python is in some
sense a better language I think it's a
much worse
language uh than the
scheme because partly partly because
it's it its complexity and in particular
its inconsistencies in its syntax make
it harder for students to learn which
means the amount of time wasted on
learning the syntactic structure that
could be going into teaching
ideas is
I I I've taught it so I've seen that
okay that that's a real a real drag on
the other hand there's one special thing
that that matters okay which is that
it's got access automatic access to
everything in the C library basically
because of a huge number of of of uh
interfaces that were built by people all
over the world okay that was partly
because of I suppose that was partly
because of the fact that it got adopted
by Google early now uh engineering has a
tension in it that's always been there
since the beginning of time is the
tension between the applications that
are desired and the the the what
basically industry wants the engineers
to be what they want them to know when
they gra where they go in for an
internship for example okay or versus
the what we call engineering science
which is the found of material that
tension is a is a pendulum that goes
back and forth over time when I was
beginning uh when I was in the beginning
undergraduate although I was in the math
department the electrical engineering
material was mostly about rotating
machines and you know about how to make
magnetic field make make optimize you
know coils to make magnetic fields right
and things like that okay that's what
industry
wanted okay then there was a reol ution
started by I suppose people like Gordon
Brown and other some other powerful
people Ernie Gilman and things like that
which was called engineering science and
then there were great textbooks written
on that by by people like like Amar Bose
and uh Ken Stevens on electrical
circuits and that was dominated dominant
for a while and then it goes back and
you know all of a sudden seos became so
important that that became part of the
of the of the the introductory
curriculum even though it actually is
very distracting because bipolars are
easier to work with from dellal point of
view right and you know what's happens
is that there's this fight between those
two things right now every student wants
to wants to have have have preparation
so that when they that next summer
they're going to get a $10,000 a month
job from Google or something like that
or Facebook or whatever
okay that's a pressure that pressure is
is dominant right now on the other hand
when how and I were beginning with sicp
the other the engineering science part
was dominant partly because people like
like armar BOS and later bill seert and
people like that so it's a historical
thing it's always been like that and I
expect it will always
be is that right H well I mean I expect
I mean I think with going on is there's
this tension between wanting to be clear
and minimalistic that's kind of the the
philosophy that that is in scheme really
about what are the fundamental ideas and
do that versus the world is now getting
enormous in terms of what people want to
do so one of the things that scheme does
not have at least in the way we did it
scheme does not have the include
statement which is critical critical to
the way people are doing python right
now right so when you when you're first
learning the question is do you want to
have the fundamental things so you can
construct what's going on or do you want
to sort of say there's this enormous
world with millions and millions of
capabilities and I can simply put put
them into my system and that's the
tension that's going on and that's a
really important kind of pedagogical s
tension for those of us who are teaching
things that's also true right
right so I don't know where that ends up
but it's a real tension that's
there since we're celebrating 40 Years
of magic I also want to um bring it back
to the book for a moment I think it's
Patrick Winston at MIT who's fond of
saying that in order to understand
something you need to understand it at
the level of its presentation and also
one level below so with that in mind
when you were writing the book um how
did you how did you do that and uh are
there any fun an does that you'd like to
share about your time writing the
book
well well I mean the critical thing you
got your and the critical thing for us
is we wrote this out of teaching that's
right that book
was what the third revision of notes
that we had put out for the course right
so anything that went into that book
started out by having to be something
that could be explained to students and
that really really dictat it's the style
of the thing it made it partly
minimalistic and partly us choosing to
really say you have to explain stuff and
Patrick know Patrick is absolutely
absolutely right about
that and indeed that's again
historically appropriate other books
that I've I learned from for example the
B and Stevens electrical circuits book
okay which is it's called introductory
Network Theory or something is an
example of a book that was written by
Bose because he was was teaching the
inro degree circuits class and he was
writing down his ideas of how you teach
that stuff uh I certainly the stuff I've
done with Jack wisdom is exactly the
same thing we taught the class for many
years before we wrote a book on on
Advanced classical mechanics you know
analytical
mechanics so it it's the idea that this
is what we tell students now we have to
be very precise and write it down very
very carefully so that that we're
capturing that those
ideas right
um any other
questions I think we have someone a
caller who'd like to
join um remote
callar callar 7 well I guess we'll wait
for them but in the
meantime oh oh yeah
surprise lecture we're in the middle of
it okay we're having people coming in
with that party you you guys can come in
and but say hi to everybody because
we're in the middle of the giving we're
having party hi everybody what's this
party about it's for you you guys for
you guys
surprise we've been picking them out all
all day
okay sorry but come in yes oh my gosh
anyway all you guys back we we were we
we certainly had no idea this was going
to happen yeah okay we have gifts
well that is a wonderful Community you
have there because they organized this
in a few days thank you I we'll find out
what it is you should open them should
open them they're very cool okay open
without
damaging they are unfortunately very
well wrapped okay we'll have to figure
this out but I see the method here's the
meth I found it I found the I found the
key okay sorry sorry everybody we uh yes
we we we we were talking to people by
the way I hope everybody there is
enjoying this discussion yeah no of
course of course the these are all part
of the conspiracy so we're very much
enjoying this actually the person who's
on the who's holding the cell phone is
it possible to go
behind oh it's a goodie yes I'll open
yours open
mine it's a do you need help 40 Years of
Magic by racket con man oh a thing from
racket con yes from racket thank you
everybody whatever it is okay it's a
music box music box kind of tight oh no
I we had no idea this was going to
happen at all let's who it
plays oh it's got a roll in it I see I
understand okay thank you Jared this one
that one I think is if you want to make
your own music of course how do well I
used to punch cards and I used to punch
actually paper tape way back in the
beginning that's what we were counting
on this way and then the
thing got it thank you
oh cool
oh oh wow thank
you thank you thank you thank you
you got to put the tape
in oh there's a there's
tape there you got thank you I got
wonderful I got put put it in
there it's it's like a punchard well
that's that's an amazing an amazing
outcome that we didn't
expect yeah yeah I think got started in
computers with a summer job with paper
punch paper tape you can make your own
you want make your own
music yes I should tell you by the way
that this brings back memories of
punching tapes for the PDP 6 before we
had anything was punch paper tape okay
way back in
1964 when they the pb6 had no software
on it and we had to have a loader the
loader would read a paper tap can you
show the tape to the camera so that the
audience here can see what you're
talking
wonderful oh here's a piece of paper
tape with holes in it maybe yeah I can
yeah
here see okay paper tape with holes in
it okay and I'm certainly yeah I
certainly have punch paper
tape now you have more thank you okay
very nice you have your very own music
box interpreters so you know go okay
well now we have to write a program to
uh to to run a little machine that runs
the paper G
punch sorry for the bloopers in
between we had no that's fine that's
fine little that's all right okay so is
there anything else anybody wants to ask
or talk about no I think that's it um
you all can feel free to continue with
the rry and um you know watch on the
live if you want uh it'll still be
streaming on conrack l.org and thank you
so much how and Jerry for joining us
congratulations again 40 Years of
magic okay thank you thank you thank you
thank
you hey and it was fun
a
