hello
everybody uh my name is Steve Hazel um
and I'm here to talk to you about my
passion for deleting
code uh and how Unstoppable I am also
it's a little bit it's a Manifesto and a
beginner's guide so uh I'm going to tell
you about why deleting code is the best
but if you have never coded before uh
I'm going to encourage you to you know
try deleting some code and see how it
feels okay so first of all who am I um I
started uh programming professionally in
1995 um I started a company in 2008 I
worked on that for about 10 years um i'
I've worked in a bunch of different
programming languages I've had a bunch
of different roles uh in the software
industry um all of that is just to say
you know I've had like I'm Going on 30
years in my career in software here so
these are not the crazy opinions of some
novice uh who doesn't know what they're
talking about these are the crazy
opinions of a middle-aged man who should
know
better uh I've also um I I checked just
before uh putting this talk together um
on my current project that I've been
working on for three or four years I
have net deleted over 10,000 lines of
code I've written about 100,000 lines
I've deleted about a 100,000 lines but
overall I'm in the red um which is great
I also at the at the company that I
started I was there for about 10 years
and my total over that entire experience
was negative uh much much more highly
negative in in the hundreds of thousands
um so I really have deleted I'm pretty
sure at this point in my whole career
I've deleted more code than I have
created and that's my goal is to to you
know die having deleted more code total
okay
um so when people get into programming
you know I think they think about it as
a creative Endeavor they think I'm going
to create some cool apps I'm going to
come up with some uh you know clever
algorithms um I'm going to write the
most beautiful expressive code that
everyone will think is just the best and
then I'm going to add more and more
features this is going to be great and
that's not what happens at all uh what
does happen is you rapidly find that uh
your code breaks every time you change
anything something somewhere else breaks
um you look at a file that you wrote six
months ago and you think what is going
on in here I don't understand this at
all and this is a mess who wrote
this uh code that used to work stops
working
mysteriously uh and you start you start
fantasizing about rewriting it all from
scratch which by the way doesn't work
don't do that uh so I this is the
reality of programming this is what it
really is when you really get into into
it this is the feeling this is what
you're going to feel about
programming uh I think I think the
problem is that when people think of
programming they're thinking of it like
doing a painting right they're thinking
I'm going to put a river I'm going to
put some happy little trees and just
whatever I feel I'm just going to put it
on that canvas uh but that's not that's
not the kind of endeavor that
programming is right it's more like uh
carving a sculpture out of marble by
removing marble uh or maybe a better
metaphor is it's like pruning right it's
like the your your the thing you're
creating is like a living changing thing
and you're pruning it to drive it in the
direction that you want this is a better
way to think about computer
programming uh so you're going to need
to do a lot of deleting code and deleted
code is amazing it is the best uh
deleted code has no bugs in it uh
deleted code never needs to be fixed on
the weekend uh it is 100% clear to
everybody how it works even six months
later uh it runs in zero milliseconds it
is absolutely the fastest you can get uh
it is infinitely scalable doesn't matter
how many users you have uh your deleted
code can handle them uh so it's really
the best code it's it's um absolutely As
Good As It Gets uh for what it's worth
Thanos was wrong you know to erase half
of the people in the Marvel Cinematic
Universe but I think he had like
potential as a computer programmer that
was
unrealized okay so how do you get away
with it you know we got to delete some
code how are we going to how are we
going to get people to let us
uh the first thing easy example
commented out code this thing happens
all the time when you are writing code
you're going to try a few different ways
to do it and you're going to you're
going to have one idea and it's not
going to pan out and you're going to get
another idea and that one kind of works
a little better but that first idea
there's still some advantages still
seems kind of good you comment it out
and leave it there because maybe you're
going to change your mind maybe you'll
want it later you know may maybe after
you get things basically working you'll
come back around to that first idea you
won't uh if that code sits there for
like a week you're never going to use it
like my whole career this is maybe
happened one time you're not going to
use it you don't need that code uh and
when you need it it's not going to be
right anymore because the code around it
will have changed uh but you won't have
been keeping the commented code up to
date right so uh it's not going to work
anyway um and worst case if you're wrong
about all of that you put it in your
Source control you put it in get and
like you can find it in there later you
don't need it like sitting there right
next to your perfectly good code that
actually does something by the way I was
I was trying to come up with a an image
for this slide that would like make
people think of like letting things go
like maybe something from a movie I
remembered something with like a
character named Elsa uh and there it is
that's the
one okay so deleting uh commented code
how does that work what you do is you're
you're going to select it you know and
then you're going to press the delete
key problem
solved I think even the non-programmers
are going to understand what just
happened
there uh okay so a little bit more of a
complicated example um there's something
that we talk about in computer
programming called don't repeat yourself
it's like a rule of thumb that people
use if you find yourself putting the
same code in over and over you know you
want to abstract that out make one
function that you're going to reuse
every time you want to do that tasks
instead of repeating the same code over
and over it's not actually quite right
um but it it's uh you know it's a start
so here's an example we're going to
we're going to send a a message to
somebody based on their target ID and we
got some text to send but we got to turn
it into a message and so there's like
kind of a few lines of code that do that
and every time you send a message you do
those few lines of code and it's very
repetitive and so the concept is you
make this like send message to ID thing
with that whoops with that repetitive
bit in it and then every time you want
to do that you just kind of uh do do the
send message to ID thing over again so
yeah good good concept but it's not
perfect it's not a perfect concept uh so
for example like if your function sends
a message you can call it send message
and that's great but like what if the
thing you're repeating over and over in
your code doesn't just send a message
you know it sends the the message if
it's short or if it's longer it stores
it and notifies whoever is going to get
the message that they they can pick it
up whenever they want now you got to
call it like send message if short or
store a
notify and then like also like what if
every time you do that you want to like
remove expired messages from the store
so now like if you were going to name
the function something it would be like
send message if short or store and
notify and remove expired message from
store uh it's it's a little ridiculous
this is the equivalent of like trying to
label this junk drawer right you're like
uh got to got to make it easier to see
what's in this drawer so I'm going to
like get my labeler and it'll say hammer
sunglasses snacks vampire teeth uh you
know it's not a not really much help
compared to just opening the drawer um
so that's that's kind of what doing that
is so this this is a bad idea a lot of
people confronted with this bad idea
decide well what I'm going to do is I'm
just going to shorten the name we'll
call it send notify message and that you
know now it's not not so long anymore
that's fantastic uh that's that's kind
of like doing this you put your stuff in
some boxes and you label them stuff more
stuff it's not a helpful name
so the rules of deleting code okay if
you want to delete code it's not okay to
delete it if it breaks the program okay
obviously people are not going to let
you get away with that okay and it's
also it's not okay to delete it if it
makes the program impossible to
understand you have to keep it possible
to understand or like eventually someone
is going to stop you so
you know you really have to you have to
follow the rules you have to think about
are people going to like this code when
I'm done deleting as much of it as I can
get away
with okay so another technique is
merging similar code so thing that
happens all the time in programming you
need to do something you write yourself
a little function to do it somebody else
needs to do the same thing they write a
little function to do almost the same
thing but it's not exactly the same
because they weren't thinking about all
the same stuff you were thinking about
but it's mostly the same maybe two or
three people do that and you got a bunch
of functions that do kind of the same
thing but not exactly the same thing uh
and when you find those It's a Wonderful
opportunity to delete some code so
here's a function that draws some
sparkles you give it a list of locations
and it iterates through that list and at
each location it makes a Sparkle and
draws it and there's some like error
checking that's what that try catch
thing is about uh somebody else maybe
writes another function they called it
Sparkle it takes a list of locations it
also takes some other stuff it iterates
over the locations and at every location
it makes a Sparkle and it draws it but
there's this other stuff it can do like
different styles of Sparkles and it can
it can scale them up so they're bigger
or smaller so great you find these
things in the code fantastic combine
them into one function that has all the
features now you get to delete one of
those functions and no one's going to be
mad at you uh this one it has the extra
features it does the error checking uh I
picked the name that I liked better I
picked the way of iterating that I liked
better it's perfect it's wonderful and
the other one you can
delete okay last major technique for
deleting code is simplify in code you
get some code that's too complicated you
can make it shorter and clearer and you
get to delete a bunch of lines of code
fantastic uh it's hard to simplify code
uh but it it's worth it um the main
thing here is you can't just go around
your codebase doing this you know when
you're working with other computer
programmers they like want to build
features and stuff which is a drag uh
but if you have to change the code
anyway you know if you're in there
building a feature and you got to touch
that code anyway uh hey you can do this
and no one's going to think it's
weird so here's an example of how I
would do something like that this
function gets an average for something
with an ID I don't know what it is uh
and there's some number of days so it's
like the average for this thing over
some number of days so what it does is
it gets the count of that thing it makes
sure that the ID is a string uh it adds
a base count I don't know why there's a
base count but there is I'm just making
up an example here uh and then it you
know it computes the average by dividing
the count by the number of days and it
Returns the average
uh it's okay but we can get rid of a lot
of lines of code first of all you go
check through the code if ID is always a
string we don't have to turn it into a
string just delete it fantastic uh next
uh this base count thing that we're
adding on a separate line uh well we
have to like mention count again you
mention count two times there that's not
great put it on one line you only
mention count once fantastic and in fact
go look at where a git count is used and
if base count always get gets added to
the result of get count let's just put
that in get count get count always has
the base count in it so now we get to
get rid of Base count from here
fantastic the next thing is now we're
calling the result of calling get count
count but like obviously it's the count
you just got the count so uh we can get
rid of that oh I actually did a
different one first same thing we're uh
we're um calling the result of dividing
count by days average but like we know
it's the average because we're returning
it from this function the function is
called get average so we don't need to
say what it's called same deal with
count you called get count obviously
it's the count you don't need to say
what it's called Uh so now we get a much
shorter uh function that is still quite
clear we got rid of uh most of the lines
of code right if you go back there just
kind of looking through the code and
figuring out where it's being redundant
and where it's um uh you know doing
things that don't need to be done like
turning ID into a string when it's
already a string you can get rid of most
of the lines of code this is a simplifi
example but I do this kind of thing
across giant files all day long I delete
so much code it's fantastic it's the
best uh I love it a lot so yeah you
should try it uh I think you're really
going to like it it's really an exciting
feeling to uh to create code by deleting
it um yeah creates better code uh you
can get your your numbers to go negative
there's something really compelling
about it uh that is my talk thank you
all right so
questions who's the first
question
great hi I'm not a programmer at all my
sence but um could you compare this with
economical language for texting or
something like that the same principle
that the least amount of words or
characters to
express yeah I think about um one of the
things that I I have to do sometimes at
work is write business emails and it's a
very similar thing where being
experienced people writing business
emails will give you three paragraphs
but like if you if you communicate with
somebody who writes business emails all
day every day like an exec at the
company they're going to give you like
five words like looks good go and do it
right that's what they say uh and it's
it's a very similar thing where it's
like I you don't need all this we can
delete it and we can just make it really
short and clear uh it's a skill you can
build it for sure yeah it's very very
related can you tell how experienced the
programmer is by how uh how much Cod he
writes um
well they he or she he or she yeah uh he
or she or they um yeah I would say more
experienced programmers are more prone
to winding up with a code change that
adds a feature but it actually deletes
more lines than it than it adds uh
happens more often with more experienced
programmers for sure absolutely
beginners will make three left turns
instead of a
right so um your thank you for the talk
uh your analogy you used was like the
bonsai tree that we let grow and then we
trim it do you think the long code is
necessary for short code
yeah so I I do think that when you first
start creating something new from
scratch it is natural to create a mess
and I actually think that it's it's kind
of good to let it get messy for a little
while people who are a little too
enthusiastic especially about don't
repeat yourself will kind of try to
prune prematurely before they know what
shape they want so I I think there is
something to that it's it's good to kind
of Let It Grow see what it wants to be
before you start to trim it down to the
essentials but that happens really at
the beginning of projects later on in a
project happens less and
less I just build beer
everywhere hi um I'm not a programmer at
all but I have some friends who are and
they kind of have this sentiment that uh
code in general now is getting sloppier
and sloppier here um do you get that
sense whether it's like people are
rushed more to like push product out or
because computers are getting so much
faster that you they can take some of
the inefficiencies away or is that just
not true at all yeah I I think maybe
there's a couple of different trends
that you know are are actually separate
but kind of lead to that effect for sure
you can get away with code being slower
now in terms of its like inherent
performance characteristics because
computers are faster so it doesn't
matter as much
um that leads to it being longer
sometimes uh another thing is just that
there's just a lot more computer
programmers in the world we've been
adding them rapidly and that means
there's a lot more inexperienced
computer programmers in the world I
think as a percentage so that that
probably tends in that direction also
there's AI creating code now uh I'd like
to see AI get good at deleting code
all right one last question um for me
um where where is The Sweet Spot between
spending time deleting code uh and
writing new
functions yeah
uh it's a lot further on the spending
time deleting code side of things than I
think people naively assume uh but there
certainly is is a trade-off there if
code is working and doesn't need to
change for any reason don't change it
right like obviously leave it alone it
might be ugly but it's fine and you you
can focus on something else if you need
to get in there and change that
code then you're paying a cost for it
being longer than it needs to be more
complex than it needs to be and you can
start to pay down that cost by reducing
it so it's sort of a calculus of
like do you need to change the code at
all if you need to change it are a lot
of people going to need to change it
soon and if that's if it's a area of
code that's about to get a lot more work
it will pay off a lot to work hard on
reducing it and clarifying it um so
depends on depends on how the code is
going to be
used all right thank you so much
fantastic talk
