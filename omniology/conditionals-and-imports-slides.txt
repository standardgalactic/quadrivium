CONDITIONALS
PLURALSIGHT AUTHOR
@dr_holderness
Practical Python for Beginners
Sarah Holderness

How Do We Make Decisions in a Program?
If it’s sunny and 
90° or higher 
☀ 🥵
Stay inside!
🏠
🌧
If it’s raining
Stay inside!
🏠
⛅ 
Otherwise …
Enjoy the 
outdoors!
🌳 
To make 
decisions we 
need to make 
comparisons 
inside if 
statements.
A conditional statement, or if statement, lets us make decisions in Python

The 6 Python Comparators
!=
NOT 
equal  
less than 
less than 
equal to  
equal  
greater than 
equal to  
greater than 
<
<=
==
>=
>
>>> temp = 95 
>>> temp == 95
Making a comparison is 
like asking the question: 
Is the temperature 
equal to 95?
True
Assigning 95 to the 
temp variable.
!=
Notice that assignment is 
1 = sign.  
And the equals to 
comparator is 2 == signs. 

The 6 Python Comparators
!=
NOT 
equal  
less than 
less than 
equal to  
equal  
greater than 
equal to  
greater than 
<
<=
==
>=
>
>>> temp < 90
Is the temperature 
less than 90?
False
!=
>>> temp = 95 
>>> temp == 95
True

An if Statement
weather.py
temperature = 95 
if temperature > 80:
Is temperature 
greater than 80?
An if statement lets us decide what to do: if True, then do this.
Assign 95 to the 
temperature variable
If this is True, let’s add 
something to do here

An if Statement
weather.py
> python3 weather.py 
It’s too hot!  
Stay inside!
temperature = 95 
if temperature > 80:
True
So these lines 
are run
An if statement lets us decide what to do: if True, then do this.
print("It's too hot!") 
print("Stay inside!")

if Code Block 
weather.py
> python3 weather.py 
It’s too hot!  
Stay inside!
Any indented code 
that comes after 
an if statement is 
called a code block
temperature = 95 
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!")

When the if Statement is False
weather.py
> python3 weather.py
False
So these lines are NOT run
And there is no output
temperature = 75 
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!")

The Program Continues After the if Code Block
weather.py
> python3 weather.py
False
The program keeps running after 
the if statement and its code 
block, so this is printed after.
temperature = 75 
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!") 
print("Have a good day!")
Have a good day!

Rules for Whitespace in Python
weather.py
  File "weather.py", line 6 
    print("Stay inside!") 
    ^ 
IndentationError: unexpected indent
temperature = 75 
if temperature > 80: 
  print("It's too hot!") 
    print("Stay inside!")
2 spaces indent
4 spaces indent
$ python3 weather.py
Whitespace indents in Python 
need to be consistent, 
otherwise there will be an 
IndentationError.

An if, else Statement
weather.py
False
How do we do something 
else here if this is False?
temperature = 75
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!")

temperature = 75
An if, else Statement
weather.py
> python3 weather.py 
Enjoy the outdoors!
Otherwise, 
then run the code block below 
If this statement is True, 
then run the code block below
else: 
    print("Enjoy the outdoors!")
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!")

if, elif, and else 
weather.py
False
True
> python3 weather.py 
It’s too cold!  
Stay inside!
So both of these 
lines are run.
elif temperature < 60: 
    print("It's too cold!") 
    print("Stay inside!")
else: 
    print("Enjoy the outdoors!")
temperature = 50
if temperature > 80: 
    print("It's too hot!") 
    print("Stay inside!")

temperature = 75 
if temperature > 80: 
    print("Stay inside!") 
elif temperature < 60: 
    print("Stay inside!") 
else: 
    print("Enjoy the outdoors!")
Can We Combine Two if Statements?
weather.py
Can we combine the ﬁrst 2 if 
statements? 
What if we wanted to shorten our 
program to only say: "Stay inside!" 
OR "Enjoy the outdoors!"
We’re repeating the 
print("Stay inside!") twice

temperature = 75 
if temperature > 80 or temperature < 60: 
    print("Stay inside!") 
else: 
    print("Enjoy the outdoors!")
Logical Operator - or 
weather.py
>
The keyword or lets you combine multiple 
comparisons. At least one needs to be True 
for the whole if statement to be True

temperature = 75 
if temperature > 80 or temperature < 60: 
    print("Stay inside!") 
else: 
    print("Enjoy the outdoors!")
weather.py
False
This is run
> python3 weather.py 
Enjoy the outdoors!
False
False
or
Logical Operator - or 
Only one comparison needs to be True for the if statement to be True

temperature = 50 
if temperature > 80 or temperature < 60: 
    print("Stay inside!") 
else: 
    print("Enjoy the outdoors!")
weather.py
This is run
> python3 weather.py 
Stay inside!
True
False
True
or
Logical Operator - or 
Only one comparison needs to be True for the if statement to be True

temperature = 75 
forecast = "rain" 
Store the Forecast as a String
weather.py
>
Let’s add another variable with 
the forecast as "rainy", "cloudy", 
or "sunny".

temperature = 75 
forecast = "rain" 
if temperature < 80 and forecast != "rain": 
    print("Go outside!") 
else: 
    print("Stay inside!") 
Logical Operator - and  
weather.py
>
The keyword and also lets you combine multiple 
comparisons. But both need to be True for the 
whole if statement to be True

temperature = 75 
forecast = "rain" 
if temperature < 80 and forecast != "rain": 
    print("Go outside!") 
else: 
    print("Stay inside!") 
weather.py
>
This is run
False
True
False
and
Logical Operator - and  
Both comparisons need to be True for the if statement to be True

temperature = 75 
forecast = "sunny" 
if temperature < 80 and forecast != "rain": 
    print("Go outside!") 
else: 
    print("Stay inside!") 
weather.py
>
This is run
True
True
True
and
Logical Operator - and  
Both comparisons need to be True for the if statement to be True

forecast = "rain" 
if not forecast == "rain": 
    print("Go outside!") 
else: 
    print("Stay inside!") 
Logical Operator - not  
weather.py
The keyword not lets you negate 
a comparison. And can help make 
the statement more readable.

forecast = "rain" 
if not forecast == "rain": 
    print("Go outside!") 
else: 
    print("Stay inside!") 
Logical Operator - not  
weather.py
This is run
False
True
not
The keyword not negates a comparison
Negate means make the opposite:  
not True becomes False, 
not False becomes True 

The 3 Python Logical Operators
not  
or 
and  
The keyword not lets 
you negate a comparison.
The keywords and and or let 
you combine multiple comparisons.

All of the Primitive Data Types
string 
>>> name = "Sarah"
int 
>>> amount = 10
float 
>>> tax = .06
boolean 
>>> answer = True
A boolean can store a 
True or False value.

raining = True 
if raining: 
    print("Stay inside!")
weather.py
This reads like English
You can set boolean variables 
to either True or False
> python3 weather.py 
Stay inside!
Evaluating Boolean Variables   

raining = True 
if not raining: 
    print("Go outside!") 
else: 
    print("Stay inside!")
Evaluating Boolean Variables   
weather.py
> python3 weather.py 
Stay inside!
This is run 
False
True
not

END OF SECTION

IMPORTING MODULES
PLURALSIGHT AUTHOR
@dr_holderness
Building Your First Application with 
Python
Sarah Holderness

A Random Rock, Paper, Scissors Game
computer_choice = 'scissors' 
user_choice = input("Do you want - rock, paper, or scissors?\n")
The user gets to pick a 
new choice for each game
The computer has the 
same choice every time
How can we randomly pick 
the computer’s choice?

When You Install Python
Python and its built-in 
types and functions
Python
math
datetime
random
os
…
…
…
…
Python standard library

The Standard Library 
Our programs so far have 
just used Python and its 
built-in types and functions
Python
math
datetime
random
os
…
…
…
…
But if you need something 
extra you can import it from 
the Python standard library

Looking Up the random Module

Using the Random Module
roll_dice.py
We need to import 
the module to use it
This function 
will return a 
random number 
between 1 and 6
import random 
roll = random.randint(1,6)

Printing Out the Result
roll_dice.py
> python3 roll_dice.py 
The computer rolled a 6
import random 
roll = random.randint(1,6)
print("The computer rolled a " + str(roll))
Don’t forget to convert the int 
to a string to concatenate it.
If we ran this more 
times we would see 
different random 
numbers generated.

Guess the What the Computer Rolled
roll_dice.py
> python3 roll_dice.py 
Guess the dice roll: 
6
import random 
roll = random.randint(1,6)
guess = int(input('Guess the dice roll:\n'))
We want to convert the input to an int 
so we can compare guess to roll.

Guess the What the Computer Rolled
roll_dice.py
> python3 roll_dice.py 
Guess the dice roll: 
6 
Correct! They rolled a 6
if guess == roll: 
    print("Correct! They rolled a " + str(roll))
import random 
roll = random.randint(1,6)
guess = int(input('Guess the dice roll:\n'))

Guess the What the Computer Rolled
roll_dice.py
> python3 roll_dice.py 
Guess the dice roll: 
6
if guess == roll: 
    print("Correct! They rolled a " + str(roll))
import random 
roll = random.randint(1,6)
guess = int(input('Guess the dice roll:\n'))
Why isn’t there 
output now?
We need an else statement 
for when the guess is wrong.

Guess the What the Computer Rolled
roll_dice.py
> python3 roll_dice.py 
Guess the dice roll: 
6 
Wrong! They rolled a 4
else: 
    print("Wrong! They rolled a " + str(roll))
if guess == roll: 
    print("Correct! They rolled a " + str(roll))
import random 
roll = random.randint(1,6)
guess = int(input('Guess the dice roll:\n'))

