Linear-­‐Time	  
Selec.on	  
Randomized	  
Selec.on	  (Analysis)	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Running	  Time	  of	  RSelect	  
Rselect	  Theorem	  :	  	  for	  every	  input	  array	  of	  length	  n,	  the	  average	  
running	  .me	  of	  Rselect	  is	  O(n)	  
-­‐-­‐	  	  holds	  for	  every	  input	  [no	  assump.ons	  on	  data]	  
-­‐-­‐	  “average”	  is	  over	  random	  pivot	  choices	  made	  by	  the	  algorithm	  

Randomized	  Selec.on	  
Rselect	  (array	  A,	  length	  n,	  order	  sta.s.c	  i)	  
0)	  	  	  	  if	  n	  =	  1	  	  	  return	  A[1]	  
1)  Choose	  pivot	  p	  from	  A	  uniformly	  
	  at	  random	  
2)  Par..on	  A	  around	  p	  	  
let	  j	  =	  new	  index	  of	  p	  
3)  If	  j	  =	  i,	  	  return	  p	  
4)  If	  j	  >	  i,	  	  return	  Rselect(1st	  part	  of	  A,	  j-­‐1,	  i)	  
5)  [if	  j<i]	  	  return	  Rselect	  (2nd	  part	  of	  A,	  n-­‐j,	  i-­‐j)	  	  
1st	  part	  
2nd	  part	  	  	  
jth	  
posi.on	  

Tim	  Roughgarden	  
Work	  per	  phase	  j	  
subproblem	  
Proof	  I:	  Tracking	  Progress	  via	  Phases	  
Note	  :	  Rselect	  uses	  <=	  cn	  opera.ons	  outside	  of	  recursive	  call	  [	  for	  
some	  constant	  c	  >	  0	  ]	  	  	  [from	  par..oning]	  
Nota.on	  :	  Rselect	  is	  in	  phase	  j	  if	  current	  array	  size	  between	  	  	  	  	  	  	  	  	  	  	  
and	  
-­‐ Xj	  =	  number	  of	  recursive	  calls	  during	  phase	  j	  
Note	  :	  running	  .me	  
	  of	  RSelect	  
<=	  array	  size	  
during	  phase	  j	  
#	  of	  phase	  j	  	  subproblems	  

Tim	  Roughgarden	  
Proof	  II:	  Reduc.on	  to	  Coin	  Flipping	  
Xj	  =	  #	  of	  recursive	  calls	  during	  phase	  j	  
Note	  :	  if	  Rselect	  chooses	  a	  pivot	  giving	  a	  25	  –	  75	  
split	  (or	  be_er)	  	  then	  current	  phase	  ends	  !	  
(new	  subarray	  length	  at	  most	  75	  %	  of	  old	  length)	  
Recall	  :	  probability	  of	  25-­‐75	  split	  or	  be_er	  is	  50%	  
So	  :	  E[Xj]	  <=	  	  expected	  number	  of	  .mes	  you	  need	  to	  ﬂip	  a	  fair	  coin	  
	  
	  	  	  	  	  	  	  	  	  	  	  to	  get	  one	  “heads”	  
	  	  	  	  	  	  	  (heads	  ~	  good	  pivot,	  tails	  ~	  bad	  pivot)	  
Size	  between
	  	  	  	  	  	  	  	  	  	  	  
and	  	  

Tim	  Roughgarden	  
Proof	  III:	  Coin	  Flipping	  Analysis	  
Let	  N	  =	  number	  of	  coin	  ﬂips	  un.l	  you	  get	  heads.	  
	  (	  a	  “geometric	  random	  variable”	  )	  
Note	  :	  E[N]	  =	  	  1	  	  +	  	  (1/2)*E[N]	  
Solu.on	  :	  E[N]	  =	  2
	  (Recall	  	  E[Xj]	  <=	  E[N])	  
1st	  coin	  
ﬂip	  
Probability	  
of	  tails	  
#	  of	  further	  coin	  ﬂips	  
needed	  in	  this	  case	  

Tim	  Roughgarden	  
Puing	  It	  All	  Together	  
Expected	  
running	  .me	  of	  
RSelect	  
=	  E[#	  of	  coin	  ﬂips	  N]	  =	  2	  
geometric	  sum,	  	  
	  <=	  1/(1-­‐3/4)	  =	  4	  
	  	  	  	  (*)	  
[LIN	  EXP]	  

