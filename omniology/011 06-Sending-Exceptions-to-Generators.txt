© Fred Baptiste 2018

Sending things to coroutines
.send(data)
à sends data to coroutine
.close()
à sends (throws) a GeneratorExit exception to coroutine
we can also "send" any exception to the coroutine
à throwing an exception to the coroutine
.throw(exception)
à the exception is raised at the point where the coroutine is suspended
© Fred Baptiste 2018

How throw() is handled
à generator does not catch the exception (does nothing)
à generator catches the exception, and does something
à yields a value
à exits (returns)
à raises a different exception
à exception propagates to caller
© Fred Baptiste 2018

Catch and yield
à generator catches the exception
à handles and silences the exception
à yields a value
à yielded value is the return value of the .throw() method
def gen():
while True:
try:
received = yield
print(received)
except ValueError:
print('silencing ValueError')
None has been yielded
à generator is now SUSPENDED
© Fred Baptiste 2018

Catch and exit
à generator catches the exception
à generator exits (returns)
à caller receives a StopIteration exception
this is the same as calling next() or send() to a generator that returns instead of yielding
can think of throw() as same thing as send(), but causes an exception to be sent 
instead of plain data
def gen():
while True:
try:
received = yield
print(received)
except ValueError:
print('silencing ValueError')
return None
StopIteration
à generator is now CLOSED
is seen by caller
© Fred Baptiste 2018

Catch and raise different exception
à generator catches the exception
à generator handles exception and raises another exception
à new exception propagates to caller
à generator is now CLOSED
def gen():
while True:
try:
received = yield
print(received)
except ValueError:
print('silencing ValueError')
raise CustomException
CustomException
is seen by caller
© Fred Baptiste 2018

close() vs throw()
close()
à GeneratorExit exception is raised inside generator
can we just call?
gen.throw(GeneratorExit())
yes, but…
with close(), Python expects the GeneratorExit, or StopIteration exceptions to propagate, 
and silences it for the caller
if we use throw() instead, the GeneratorExit exception is raised inside the caller context (if 
the generator lets it)
try:
gen.throw(GeneratorExit())
except GeneratorExit:
pass
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

