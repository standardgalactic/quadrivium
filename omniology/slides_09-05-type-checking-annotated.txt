Alex Aiken 
Compilers 
Type Checking 

Alex Aiken 
Type Checking 
• We have seen two examples of formal notation 
specifying parts of a compiler 
– Regular expressions 
– Context-free grammars 
 
• The appropriate formalism for type checking is 
logical rules of inference 
 

Alex Aiken 
Type Checking 
• Inference rules have the form 
If Hypothesis is true, then Conclusion is true 
 
• Type checking computes via reasoning 
If E1 and E2 have certain types, then E3 has a certain 
type 
 
• Rules of inference are a compact notation for “If-
Then” statements 

Alex Aiken 
Type Checking 
• The notation is easy to read with practice 
 
• Start with a simplified system and gradually add features 
 
• Building blocks 
– Symbol   is “and” 
– Symbol  is “if-then” 
– x:T is “x has type T” 

Alex Aiken 
Type Checking 
If e1 has type Int and e2 has type Int,           then e1 + e2 
has type Int 
 
(e1 has type Int  e2 has type Int)                 e1 + e2 has 
type Int 
 
(e1: Int  e2: Int)    e1 + e2: Int 
 

Alex Aiken 
Type Checking 
The statement  
(e1: Int  e2: Int)    e1 + e2: Int 
is a special case of  
Hypothesis1  . . .  Hypothesisn  Conclusion 
 
This is an inference rule 
 

Alex Aiken 
Type Checking 
• By tradition inference rules are written 
 ` Hypothesis … ` Hypothesis 
` Conclusion 
 
• Cool type rules have hypotheses and conclusions 
 ` e:T 
•   `  means “it is provable that . . .” 
 

Alex Aiken 
Type Checking 
  
i is an integer literal 
` i : Int 
 
 
` e1: Int     ` e2: Int   
` e1 + e2 : Int 
 
[Int] 
[Add] 

Alex Aiken 
Type Checking 
• These rules give templates describing how to type 
integers and + expressions 
 
• By filling in the templates, we can produce complete 
typings for expressions 

Alex Aiken 
Type Checking 
 
 
1 is an int literal     2 is an int literal 
` 1 : Int                   ` 2: Int   
` 1 + 2 : Int 
 

Alex Aiken 
Type Checking 
• A type system is sound if 
– Whenever ` e: T 
– Then e evaluates to a value of type T 
 
• We only want sound rules 
– But  some sound rules are better than others! 
 

Type Checking 
` e1: Int        ` e2: Int 
` e1 < e2 : Int 
` e1: T1 
` isvoid e1 : Bool 
` e1: Int          ` e2: Int 
` e1 / e2 : Bool 
` e1: T1 
` e2: T2 
⋮ 
  
` en: Tn 
` {e1; e2; … en; } : Tn 
Choose the type rules that are sound 
[Sequence] 
[Divide] 
[Compare]
[Isvoid] 

Alex Aiken 
Type Checking 
• Type checking proves facts e: T 
– Proof is on the structure of the AST 
– Proof has the shape of the AST 
– One type rule is used for each AST node 
 
• In the type rule used for a node e: 
– Hypotheses are the proofs of types of e’s subexpressions 
– Conclusion is the type of e 
 
• Types are computed in a bottom-up pass over the AST 
 
 

