©2019 MathByte Academy

Members are unique
Recall that members are guaranteed to be unique
So this should not work:
class Color(Enum):
red = 1
crimson = 1
carmine = 1
blue = 2
aquamarine = 2
but it works!!!
©2019 MathByte Academy

Aliases
class Color(Enum):
red = 1
crimson = 1
carmine = 1
blue = 2
aquamarine = 2
we still have unique members
but we now also have aliases
à in fact our enumeration contains only two members:
à Color.red
à Color.blue
The remaining "members" point to these two members:
Color.carmine à Color.red
list(Color) à Color.red, Color.blue
Color.crimson à Color.red
Color.aquamarine à Color.blue
Color.crimson is Color.red à True
Color.carmine is Color.crimson à True
©2019 MathByte Academy

Lookups
Lookups with aliases will always return the "master" member
class Color(Enum):
red = 1
crimson = 1
carmine = 1
blue = 2
aquamarine = 2
Color(1) à Color.red
Color['crimson'] à Color.red
Containment
Color.crimson in Color à True
©2019 MathByte Academy

Iterating Aliases
class Color(Enum):
red = 1
crimson = 1
carmine = 1
blue = 2
aquamarine = 2
list(Color) à Color.red, Color.blue
à the only way to see the aliases is to use __members__
Color.__members__
{
'red': <Color.red: 1>, 
'crimson': <Color.red: 1>, 
'carmine': <Color.red: 1>, 
'blue': <Color.blue: 2>, 
'aquamarine': <Color.aquamarine: 3>
}
à mappingproxy
à note how keys are different, but point to the same member
©2019 MathByte Academy

Ensuring Unique Values
à we may want to guarantee that our enumerations do not contain aliases (unique values)
à we could just be careful writing our code!
à or use the @enum.unique decorator
@enum.unique
class Color(Enum):
red = 1
crimson = 1
carmine = 1
blue = 2
aquamarine = 2
à ValueError: duplicate values found
(when class is compiled)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

