Piping

COMMAND
2
COMMAND
1
Pipes are used to redirect a stream from one program
to another program.  We can take the output of one
command and redirect it to the input of another.
Pipes

COMMAND
2
COMMAND
1
We use the pipe character ( | ) to separate two
commands.  The output of the first command will be
passed to the standard input of the second command.
The Syntax
❯command1 | command2

wc -l
ls
This example list the  files (non hidden files) in a
directory.  We pipe the output of ls to the word count
command.  The -l option tells wc to count the number of
lines.
ls | head
❯ls | head -10 
chapter1.txt
chapter2.txt
characters.txt
outline.txt
4

less
ls
This example pipes the output of ls to less.  the /usr/bin
directory typically contains a bunch of stuff, so it can be
nice to use less to read the results in a more
manageable way.
ls | less
❯ls -l /usr/bin | less

COMMAND
list.txt
less
ls
❯ls -l /usr/bin | less
❯ls -l /usr/bin > list.txt
Though both the > character and the | character are
used to redirect output, they do it in very different ways.
> connects a command to some file.
| connects a command to another command.
> vs | 

rev
date
This example shows the output of the date command
being piped to the rev command.  The end result is the
reverse of the current date! Very useful!
date | rev
❯date | rev
Wed Mar 31 18:16:43 PDT 2021
1202 TDP 04:61:81 13 raM deW

wc -l
ls
This example counts the number of files (non hidden
files) in a directory.  We pipe the output of ls to the
word count command.  The -l option tells wc to count
the number of lines.
ls | wc
❯ls | wc -l 
chapter1.txt
chapter2.txt
characters.txt
outline.txt
4

rev
tac
In this example, we are calling tac with a file and then
piping the output to rev.  The final result is the content of
file.txt printed "horizontally" and "vertically" reversed
tac | rev
❯tac file.txt | rev
first line
second line
third line
third line
second line
first line
enil driht
enil dnoces
enil tsrif

rev
cat
This example concatenates two files using cat and then
sorts them alphabetically.
cat | sort
❯cat colors.txt pets.txt | sort
red
orange
yellow
green
dogs
cats
chickens
cats
chickens
dogs
green
orange
red
yellow
red
orange
yellow
green
dogs
cats
chickens

head
cat
In this example, we are using cat to feed a file to head,
which cuts it down to the first 7 lines of the file and
passes it to tail, which then outputs the last 5 lines of
that "chunk" 
The end result is lines 3-7 are output to the screen
cat | head | tail
❯cat file | head -7 | tail -5
1 blah blah
2 blah blah
3 blah blah
4 blah blah
5 blah blah
6 blah blah
7 blah blah
8 blah blah
9 blah blah
10 blah blah
tail
1 blah blah
2 blah blah
3 blah blah
4 blah blah
5 blah blah
6 blah blah
7 blah blah
3 blah blah
4 blah blah
5 blah blah
6 blah blah
7 blah blah

tr
cat
We use the pipe character ( | ) to separate two
commands.  The output of the first command will be
passed to the standard input of the second command.
The Syntax
❯cat somefile | tr s $

tr
echo
This example uses tr to capitalize a string and then again
uses tr to remove all punctuation from the capitalized string.
echo | tr | tr
❯ echo "hello world..." |  tr “[:lower:]” “[:upper:]” | tr -d "[:punct:]"
hello world...
tr
HELLO WORLD...
HELLO WORLD
hello world...

This example displays the 3 largest files in the current directory, using ls, sort,
and head.
First, ls -lh lists out all the files in the current directory.  That output is passed to
sort, which sorts based on the fifth field (the file size).  The -h option is for
human readable sort (comparing 100b, 40k, 1g, etc), and the -r reverses the
order so that we end up with the largest files first.
Finally, that output is passed to head, which limits the results to the first 3.
ls | sort | head
❯ls -lh | sort -rhk 5 | head -3
*NOTE: this is not the preferred way to find large files! Use the du command instead

wc
cat
In this example, I'm using cat to concatenate three files
together before piping the output to wc to get a count
of the total number of words.
An Example
❯cat file1 file2 file3 | wc -w
hello 
world
I love
animals
bye
hello 
world
I love
animals
bye
6

wc
cat
hello 
world
I love
animals
bye
6
hello 
world
I love
animals
bye
What if I wanted to create a file
with the output of cat?

The tee program reads standard input and copies it
both to standard output AND to a file.  This allows us to
capture information part of the way through a pipeline,
without interrupting the flow.
enter the 
tee command
❯command1 | tee file.txt | command2
command
2
command
1
file

❯cat file1 file2 file3 | tee combo.txt | wc -w
wc
cat
hello 
world
I love
animals
bye
6
hello 
world
I love
animals
bye

❯ls -l /usr/bin | tee allfiles.txt | less
less
ls
allfiles.txt

