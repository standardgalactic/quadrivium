 
 
 

2 
 
Published by OpenTask, Republic of Ireland 
 
Copyright © 2012 by OpenTask 
 
Copyright © 2012 by Software Diagnostics Services 
 
Copyright © 2012 by Dmitry Vostokov 
 
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or 
transmitted, in any form or by any means, without the prior written permission of the publisher.  
 
You must not circulate this book in any other binding or cover, and you must impose the same 
condition on any acquirer.  
 
Product and company names mentioned in this book may be trademarks of their owners.  
 
OpenTask books and magazines are available through booksellers and distributors worldwide. For 
further information or comments send requests to press@opentask.com. 
 
A CIP catalog record for this book is available from the British Library. 
 
ISBN-l3: 978-1-908043-39-9 (Paperback) 
 
First printing, 2013 
Revision 2 (June 2015) 
 
 

3 
 
 
 
 
 
 
 
 
 
 
 
 
Hello Everyone, my name is Dmitry Vostokov, and I introduce systemic software diagnostics today. 
This is a version one of the Webinar in order not to overwhelm you with concepts. I decided to keep 
this presentation as simple as possible and as short as possible.  
 
 

4 
 
 
 
 
 
 
 
 
 
 
 
 
I suppose you all enjoy diagnosing software problems but feel a bit restricted by the traditional 
software troubleshooting and debugging techniques. If you are also bored to death by software trace 
analysis in a large software factory, you may find a material presented here refreshing. But first we 
need to explain some phrases we use such as software diagnostics and also systems theory that is 
sometimes called general systems theory.  
 
 

5 
 
 
 
 
 
 
 
 
 
 
 
Software Diagnostics can be defined as the recognition of patterns of abnormal (or irregular) software 
structure and behavior in various software artifacts such as memory snapshots and software traces 
and logs. It needs to be distinct from software problem solving because there can be unnoticed, 
hidden problems that first need to be diagnosed. This is especially true for system monitoring and 
diagnosing emergent problems. At the same time software diagnostics is a part of software problem 
solving such as software troubleshooting and debugging that is always done incrementally and 
iteratively. 
 
 

6 
 
 
 
 
 
 
 
 
 
 
 
Now we try to give a definition to systems theory with a focus on software systems. Please find that 
we stress on the generality of systems theories, not a theory of general systems here as there is no 
such thing as a general system. Thanks to Facets of Systems Science book that pointed to that 
distinction. I put a reference to such a wonderful book at the end of this presentation. A diagram here 
makes the notion of systems clear. An example such as a building is too trivial to discuss here. For, a 
non-trivial example, we can find a narrative fiction system in a real or imaginary world as clearly 
embedded and delineated with certain narrative parts serving various functions. At the same time 
consider a bounded region of memory with components inside associated with certain functions and 
having interfaces. So we are concerned with general similarities in organized systems and not with 
banalities such as statements that a software system consists of subsystems. 
 
 

7 
 
 
 
 
 
 
 
 
 
 
 
Why do we need general systems approach? Because of the organized complexity of software as 
human artifacts we would like to look at other organized complex artifacts of human activity and find 
common traits to improve our diagnostics and ultimately problem-solving ability.  
 
 

8 
 
 
 
 
 
 
 
 
 
 
 
This Webinar is a loose association of ideas from general systems theory with proposed and already 
implemented applications to diagnostics, troubleshooting and debugging. Due to time constraints I 
didn’t include all that I planned initially with many slides omitted, so I plan to update this webinar 
next year or include missing material in other webinars. 
 
 

9 
 
 
 
 
 
 
 
 
 
 
 
Software diagnostics can be defined as a search for patterns in software execution artifacts, so it is 
essentially pattern-driven. This aspect was covered in the previous Webinar on pattern-driven 
software diagnostics and a link to it you can find at the end of this presentation on Resources slide. 
Here we cover systemic approach: using other systems because of similarities between them and 
software systems. 
 
 

10 
 
 
 
 
 
 
 
 
 
 
For this obvious statement about the relationship of a software program as a system and its 
environment I’d like to highlight two patterns such as Not My Version (that also exists in a hardware 
variant) and Changed Environment that we discerned some time ago. The recent proliferation of 
value added software and malware is covered in structural and behavioral patterns related to 
Hooksware. 
 
Not My Version:  
http://www.dumpanalysis.org/blog/index.php/2008/06/19/crash-dump-analysis-patterns-part-65/  
 
Changed Environment: 
http://www.dumpanalysis.org/blog/index.php/2007/03/19/crash-dump-analysis-patterns-part-10/ 
 
Hooksware: 
http://www.dumpanalysis.org/blog/index.php/2008/08/10/hooksware/ 

11 
 
 
 
 
 
 
 
 
 
 
 
Now we come to the use of common aspects of human systems in software diagnostics that is 
currently considered as a deterministic, mechanistic machine-like system in the mainstream of 
software engineering and computer science. In the past, such anthropomorphic attempts had failed 
(for example, the so-called organismic approaches at the end of the 19th and beginning of 20th 
century). This was mainly to the unknown functioning of organisms and self-organized societies). 
 
 

12 
 
 
 
 
 
 
 
 
 
 
 
As software systems are created by humans, we can use methods of certain disciplines to study 
software artifacts. Now we know much more in humanities and social sciences compared with a 
century ago. 
 
 

13 
 
 
 
 
 
 
 
 
 
 
 
A typical example is using literary narratology for structuring software traces and logs which are 
viewed as stories of computation. The link to another webinar on Software Narratology is provided on 
the resources slide. 
 
 

14 
 
 
 
 
 
 
 
 
 
 
 
So far we have seen examples of the so-called isomorphic systems: systems which have similar 
properties and methods. This is a typical example of General Systems Approach. 
 
 

15 
 
 
 
 
 
 
 
 
 
 
 
As a consequence, we also have isomorphic patterns. For example, patterns of narrative in fiction and 
in software artifacts. Another example is a similarity of memory dump analysis patterns in crash 
dumps from Windows and core dumps from UNIX-based operating systems. 
 
 

16 
 
 
 
 
 
 
 
 
 
 
 
We can also consider similarities between different software artifact types. For example, memory 
dumps can contain traces and logs can contain minidumps. 
 
 

17 
 
 
 
 
 
 
 
 
 
 
 
Still another example is a similarity between different types of diagnostics activity such as between 
software trace analysis and network trace analysis where packet headers represent software trace 
messages. 
 
 

18 
 
 
 
 
 
 
 
 
 
 
 
Extension of a metaphor can be thought of as a function which projects vocabulary, ideas, theories and 
methods from one discipline to another and enriches both. I personally rediscovered isomorphism 
between systems several years ago and called it a metaphorical bijection. 
 
 

19 
 
 
 
 
 
 
 
 
 
 
 
The new disciplines can be created in such a manner. As an example, I repeat here software 
narratology that covers all types of narratives in software construction and post-construction phases. 
 
 

20 
 
 
 
 
 
 
 
 
 
 
 
One of the general system-properties is the notion of complementarity where two or more 
independent things improve our diagnostics abilities. In software diagnostics, we have Memory Dump 
vs. Software Traces. As noted previously, network traces are considered the same as software traces 
in principle. 
 
 

21 
 
 
 
 
 
 
 
 
 
 
 
In addition to software artifact complementarity, there is also a complementarity of reports such as 
when several observers (or software diagnosticians) see different patterns. The obvious solution is to 
use checklists. 
 
 

22 
 
 
 
 
 
 
 
 
 
 
 
Here we mean Malware / Victimware dichotomy. You can find the reference to Victimware 
presentation on Further Reading slide later.  
 
 

23 
 
 
 
 
 
 
 
 
 
 
 
By decomposition of software behavior, we mean using different tools to trace different aspects of 
software behavior simultaneously in order to reduce diagnostics artifact complexity. 
 
 

24 
 
 
 
 
 
 
 
 
 
 
 
Systemic approaches are often associated with holism where the whole sum is more than the sum of 
its parts. Even if we use different tools for tracing different aspects, we should strive to record all 
possible events and use artifact analysis tools to do filtering for us later. In such cases, we minimize an 
impact of not recording important events especially for first fault cases. 
 
Fiber bundled memory dump: 
http://www.dumpanalysis.org/blog/index.php/2009/07/12/fiber-bundle-of-memory-space/ 
 

25 
 
 
 
 
 
 
 
 
 
 
 
Another notion that arises in systems science is the so-called complexity. Here we provide an example 
relation for memory dump analysis. For memory dumps the complexity (or diagnostics difficulty) 
depends on structural complexity (the number of components and their relationships), the number of 
diagnostics tools and their commands, and the number of patterns in a catalog. The more patterns we 
have, the better, the more tools and commands we have the easier is a diagnosis. For example, GDB 
has less number of commands, so to make the diagnostics effective the same as WinDbg debugger 
from Debugging Tools for Windows we have to use additional tools such as vmmap and diagnostic 
reports in addition to core dumps. 
 
 

26 
 
 
 
 
 
 
 
 
 
 
 
Software diagnostics is also a first fault software problem tool because patterns are first faults. Of 
course, it depends on whether artifacts are collected on the first fault occurrence or not. I put here a 
link to a book by Dan Skwire that first pointed to me such important distinction.   
 
First fault vs. second fault tools: 
http://www.dumpanalysis.org/First+Fault+Software+Problem+Solving 
 
 

27 
 
 
 
 
 
 
 
 
 
 
 
Software Diagnostics Services plans to release a workbench tool to help with day-to-day software 
diagnostics tasks. 
 
Software Diagnostics Workbench: 
http://www.patterndiagnostics.com/software-diagnostics-workbench  
 
 

28 
 
 
 
 
 
 
 
 
 
 
 
I rarely make jokes during presentations. However, today we have an example of my abnormal 
behavior. Here is a systems joke: Mhole in a Whole (moles or memory holes). It has to do with 
parallels with intelligence analysis via HUMINT and SIGINT. 
 
 

29 
 
 
 
 
Software Diagnostics Institute: 
http://www.dumpanalysis.org 
 
Memory Dump Analysis Anthology: Volumes 1 - 6: 
http://www.patterndiagnostics.com/ultimate-memory-analysis-reference 
 
Software Trace and Memory Dump Analysis: Patterns, Tools, Processes and Best Practices: 
http://www.patterndiagnostics.com/STMDA-materials 
 
Introduction to Pattern-Driven Software Problem Solving: 
http://www.patterndiagnostics.com/PDSPSI-materials 
 
Introduction to Software Narratology: 
http://www.patterndiagnostics.com/Introduction-Software-Narratology-materials 
 
Introduction to Pattern-Driven Software Diagnostics: 
http://www.patterndiagnostics.com/Introduction-Software-Diagnostics-materials 
 
Victimware: 
http://www.patterndiagnostics.com/Victimware-materials 
 
 

30 
 
 
 
 
 
 
 
 
 
 
 
Next planned Webinar will be focused on abductive reasoning where consequences are used to infer 
possible and most likely explanations that guide further troubleshooting and debugging efforts. We 
also cover the difference between abduction, deduction, and induction.  
 

