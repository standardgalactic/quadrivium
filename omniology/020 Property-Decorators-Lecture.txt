©2019 MathByte Academy

The property Class
The property class can be instantiated in different ways:
x = property(fget=get_x, fset=set_x)
The class defines methods (getter, setter, deleter) that can take a callable as an argument 
and returns the instance with the appropriate method now set
Could create it this way instead:
x = property()
x = x.getter(get_x)
x = x.setter(set_x)
or
x = property(get_x)
x = x.setter(set_x)
©2019 MathByte Academy

def MyClass:
def __init__(self, language):
self._language = language
def language(self):
return self._language
language = property(language)
remind you of decorators?
Instead we can write:
def MyClass:
def __init__(self, language):
self._language = language
@property
def language(self):
return self._language
we now have a property language
with a getter method defined
Next, we may want to define a setter method as well
©2019 MathByte Academy

def MyClass:
def __init__(self, language):
self._language = language
@property
def language(self):
return self._language
at this point language is now a property instance
def set_language(self, value):
self._language = value
this is a setter method
which we need to assign to the 
language property
language = language.setter(set_language)
But again, we can rewrite this using the @ decorator syntax:
@language.setter
def language(self, value):
self._language = value
©2019 MathByte Academy

If you find this a bit confusing, think of doing it this way first:
def MyClass:
def __init__(self, language):
self._language = language
@property
def language(self):
return self._language
lang_prop = language
def language(self, value):
self._language = value
language = lang_prop.setter(language)
redefine the symbol language as a method
assign the setter method to the property object
make the language symbol refer 
to the property object again
del lang_prop
delete lang_prop symbol
from namespace
store a reference to the language object
(of type property)
(setter returns the property object itself)
©2019 MathByte Academy

To summarize, we can use decorators to create property type objects as well:
def MyClass:
def __init__(self, language):
self._language = language
@property
def language(self):
return self._language
@language.setter
def language(self, value)
self._language = value
function name defines the property instance name (symbol)
language is now a property instance (an object)
we use the setter method of the language property object
important to use the same name, 
otherwise we end up with a new 
symbol for our property!
(we'll see this in the code video)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

