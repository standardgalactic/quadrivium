© 2019 MathByte Academy

The update method
updates one dictionary based on items in something else
à three forms
d1.update(d2)
d1.update(iterable)
d1.update(keyword-args)
à iterable must contain iterables with 2 elements each: (key, value)
à argument name will become key
à argument value will become value
(similar to dict(a=10, b=20))
© 2019 MathByte Academy

d1.update(d2)
à for every (k, v) in d2
à if k not in d1, inserts (k, v) in d1
à if k in d1, updates value for k in d1
d1 and d2 are two dictionaries
d1 = {'a': 1, 'b': 2}
d2 = {'b': 20, 'c': 30}
d1.update(d2)
d1 à {'a': 1, 'b': 20, 'c': 30}
'b' was updated
'c' was inserted
à insertion order is maintained (3.6+)
© 2019 MathByte Academy

d1.update(keyword-args)
similar to how keyword arguments are used to create a dictionary
à argument names must be valid identifiers
d1 = {'a': 1, 'b': 2}
d1.update(b=20, c=30)
d1 à {'a': 1, 'b': 20, 'c': 30}
'b' was updated
'c' was inserted
à insertion order is maintained (3.6+)
à order of keyword arguments is preserved (3.6+)
© 2019 MathByte Academy

d1.update(iterable)
à must be an iterable of iterables containing two elements
à key, value
[('b', 20), ['c', 30]]
(('b', 20), ('c', 30))
(('b', 20), ['c', 30])
à but also more complex iterables
à even generators
d1 = {'a': 1, 'b': 2}
d1.update(it)
d1 à {'a': 1, 'b': 20, 'c': 30}
d1 = {'a': 1, 'b': 2}
d1.update(((k, ord(k)) for k in 'bcd'))
((k, ord(k)) for k in 'bcd')
à 'b': 98, 'c': 99, 'd': 100
d1 à {'a': 1, 'b': 98, 'c': 99, 'd': 100}
à insertion order is preserved (3.6+)
© 2019 MathByte Academy

Unpacking dictionaries
works similar to unpacking a dictionary into keyword arguments in function calls
d = {'a': 1, 'b': 2}
def func(**kwargs):
print(kwargs)
func(**d)
kwargs à {'a': 1, 'b': 2}
à for function arguments, keys must be valid identifiers
à not for unpacking dictionaries in general
d1 = {'a': 1, 'b': 2}
d2 = {'a': 10, (0,0): 'origin'}
d3 = {'b': 20, 'c': 30, 'a': 100}
d = {**d1, **d2, **d3}
à insertion order is preserved (3.6+)
à last "update" wins
d à {'a': 100, 'b': 20, (0,0): 'origin', 'c': 30}
(argument order 
preserved 3.6+)
© 2019 MathByte Academy

Copying Dictionaries
shallow copies
container object is a new object
copied container element keys/values are shared references with original object
d_copy = d.copy()
d_copy = {**d}
d_copy = dict(d)
à all these methods result in shallow copies
d_copy = {k: v for k, v in d.items()}
à dictionaries are independent dictionaries
à but the keys and values are shared references
(inserts, deletes are independent)
(slower, don't use for a simple copy)
© 2019 MathByte Academy

Deep Copies
If a shallow copy is not sufficient, we can create deep copies of dictionaries
à no shared references
à even with nested dictionaries
can do it ourselves
à sometimes requires recursion, have to be careful with circular references
this might be needed if we don't want a true deep copy, but only a partial deep copy
simpler to use copy.deepcopy
from copy import deepcopy
à works for custom objects, iterables, 
dictionaries, etc
d1 = d.deepcopy()
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

