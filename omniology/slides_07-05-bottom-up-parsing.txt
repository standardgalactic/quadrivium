Alex Aiken 
Compilers 
Bottom-Up Parsing 

Alex Aiken 
Bottom-Up Parsing 
• Bottom-up parsing is more general than 
(deterministic) top-down parsing 
– And just as efficient 
– Builds on ideas in top-down parsing 
 
• Bottom-up is the preferred method 
 

Alex Aiken 
Bottom-Up Parsing 
• Bottom-up parsers don’t need left-factored 
grammars 
 
• Revert to the “natural” grammar for our example: 
E  T + E | T 
T  int * T | int | (E) 
 
• Consider the string: int * int + int 

Alex Aiken 
Bottom-Up Parsing 
Bottom-up parsing reduces a string to the start symbol 
by inverting productions 
 
 
int  * int + int 
T  int 
int  * T  + int 
T  int * T 
T + int 
T  int 
T + T 
E  T 
T + E 
E  T + E 
E 

Alex Aiken 
Bottom-Up Parsing 
Note the productions, read backwards, trace a 
rightmost derivation 
int * int + int 
T  int 
int * T  + int 
T  int * T 
T + int 
T  int 
T + T 
E  T 
T + E 
E  T + E 
E 

Alex Aiken 
Bottom-Up Parsing 
 
Important Fact #1 about bottom-up parsing: 
 
A bottom-up parser traces a rightmost derivation in 
reverse 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
T + int 
T + T 
T + E 
E 
E 
T 
E 
+ 
int 
* 
int 
T 
int 
T 

Alex Aiken 
Bottom-Up Parsing 
+ 
int 
* 
int 
int 
int * int + int 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
+ 
int 
* 
int 
int 
T 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
T + int 
T 
+ 
int 
* 
int 
int 
T 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
T + int 
T + T 
T 
+ 
int 
* 
int 
T 
int 
T 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
T + int 
T + T 
T + E 
T 
E 
+ 
int 
* 
int 
T 
int 
T 

Alex Aiken 
Bottom-Up Parsing 
int * int + int 
int * T  + int 
T + int 
T + T 
T + E 
E 
E 
T 
E 
+ 
int 
* 
int 
T 
int 
T 

Bottom-Up Parsing 
-(id + id) + id 
-(id + id) + E’ 
-(id + id) + E 
-(E’ + id) + E 
-(E’ + E’) + E 
-(E’ + E) + E 
-(E) + E 
-E’ + E 
E’ + E 
E 
For the given grammar, what is the correct series of 
reductions for the string:  -(id + id) + id 
  
E  E’ | E’ + E 
E’ -E’ | id | (E) 
-(id + id) + id 
-(E’ + id) + id 
-(E’ + E’) + id 
-(E’ + E) + id 
-(E) + id 
-E’ + id 
E’ + id 
E’ + E’ 
E’ + E 
E 
-(id + id) + id 
-(E’ + id) + id 
-(E’ + E’) + id 
-(E’ + E’) + E’ 
-(E’ + E) + E’ 
-(E) + E’ 
-E’ + E’ 
E’ + E’ 
E’ + E 
E 
-(id + id) + id 
-(id + E’) + id 
-(id + E) + id 
-(E’ + E) + id 
-(E) + id 
-E’ + id 
E’ + id 
E’ + E’ 
E’ + E 
E 

