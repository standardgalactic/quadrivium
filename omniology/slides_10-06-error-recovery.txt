Alex Aiken
Compilers
Error Recovery

Alex Aiken
Error Recovery
• As with parsing, it is important to recover from type errors
• Detecting where errors occur is easier than in parsing
– There is no reason to skip over portions of code
• The problem: 
– What type is assigned to an expression with no legitimate type?
– This type will influence the typing of the enclosing expression

Alex Aiken
Error Recovery
• Assign type Object to ill-typed expressions
let y : Int x + 2  in  y + 3
a workable solution but with cascading errors

Alex Aiken
Error Recovery
• Introduce a new type No_type for use with ill-typed 
expressions
• Define No_type C for all types C
• Every operation is defined for No_type
– With a No_type result
let y : Int x + 2  in  y + 3

Error Recovery
if true then x else 1 fi
Bool
Int
No_type
No_type
if true then x else 1 fi
Bool
Int
No_type
Int
if true then x else 1 fi
Bool
Int
Object
Object
Choose the correct labeling of types for the 
code fragment, using No_type as described in 
the video. Assume that x is not defined.
if true then x else 1 fi
Bool
Int
Object
No_type

Alex Aiken
Error Recovery
• A “real” compiler would use something like No_type
• However, there are some implementation issues
– The class hierarchy is not a tree anymore
• The Object solution is fine in the course project

