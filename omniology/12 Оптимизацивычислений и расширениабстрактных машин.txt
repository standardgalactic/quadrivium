Оптимизация вычислений 
и расширения
абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
В данной лекции будут рассмотрены вопросы, относящиеся к возможным направлениям и 
стратегиям повышения вычислительной производительности программных систем, а 
также моделированию этих направлений и стратегий путем внесения «конструктивных 
изменений» в инструкции и среду вычислений абстрактных машин.  
 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Содержание лекции
1.
Недостатки «классической» реализации КАМ-
вычислений
2.
Пути оптимизации КАМ-кода
3.
Расширение системы инструкций КАМ для поддержки 
многоместных операций и рекурсивных вычислений
4.
Стратегии вычислений. Вызов по имени и по значению
5.
Теоремы Черча-Россера о стратегиях вычислений
6.
Понятие о «ленивых» вычислениях и пути их реализации
7.
Оптимизация кода в .NET
8.
Библиография
 
 
 
Комментарий к слайду  
 
В ходе лекции будут исследованы проблемы эффективности реализации языков 
программирования и абстрактных машин на примере категориальной абстрактной 
машины.  
 
Прежде всего, будут проанализированы недостатки рассмотренной в ходе предыдущих 
лекций базовой модификации категориальной абстрактной машины и  сформулированы 
возможные направления оптимизации программ, представленных в терминах инструкций 
«классической» КАМ. 
 
В частности, будет предложено расширение системы инструкций КАМ с целью 
поддержки многоместных операций с параметрами функций, а также для реализации 
рекурсивных вычислений. 
 
Кроме того, будет представлена попытка классификации вычислительных стратегий, 
существующих в современных языках программирования. При этом существенное 
внимание будет уделено анализу вызова функций с передачей параметров по имени и по 
значению, а также будут рассмотрены и обсуждены формулировки теорем Черча-Россера 
о стратегиях вычислений. 
 
Наконец, будет изложено введение в понятийный аппарат «ленивых» (т.е. выполняемых 
по мере необходимости) вычислений и рассмотрены возможные пути их реализации. 
 
Формальное исследование вычислительных стратегий категориальной абстрактной 
машины позволит провести сравнительный анализ возможностей по оптимизации кода 
КАМ и виртуальной машины, применяемой в технологической платформе .NET. 
 
Лекция завершится обзором литературы для более глубокого исследования материала. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Важнейшие работы по стратегиям вычислений (1)
1934 – А. Черч (Alonso Church) предложил ламбда-исчисление 
и исследовал порядок вычисления ламбда-термов
1936 – С. Клини (S.C. Kleene) доказал реализуемость 
рекурсивных вычислений средствами ламбда-исчисления
1936 – Г. Плоткин (G.D. Plotkin) исследовал вычисления с
вызовом по имени и по значению на основе λ-исчисления
1950-е – Х. Карри (Haskell B. Curry) разработал 
комбинаторную логику как формальную систему с 
возможностью моделирования рекурсивных вычислений
 
 
 
Комментарий к слайду  
 
Кратко остановимся на наиболее значительных (с точки зрения данного курса) этапах 
эволюции теории и практики реализации вычислительных стратегий в формальных 
теориях и языках программирования. Заметим, что рассматриваемая проблематика 
является основополагающей для современного computer science, и в силу этого 
обстоятельства значительное количество исследований, рассмотренных нами в ходе 
изложения курса, окажется востребованным. 
 
В 30-х г.г. А. Черч (Alonso Church) предложил исчисление ламбда-конверсий или ламбда-
исчисление и применил его для исследования теории множеств. Вклад ученого был 
настолько фундаментальным, что теория (до сих пор называемая ламбда-исчислением и 
часто именуемая в литературе ламбда-исчислением Черча) является основополагающей и 
для рассматриваемых нами вопросов. 
 
Что касается рекурсивных вычислений, то принципиальная реализуемость рекурсии 
средствами математической теории была доказана С. Клини (S.C. Kleene) еще в 30-х г.г.,  
причем фундаментом рассуждений служило ламбда-исчисление. 
 
Исследования различных стратегий передачи параметров при обращении к функциям 
языков программирования  (в частности, вызова функций по имени и по значению) на 
основе ламбда-исчисления были проведены Г. Плоткиным (G.D. Plotkin). Заметим, что 
полученные результаты значительно позднее (уже в 70-х г.г.) были использованы для 
моделирования вычислений в ранних версиях языка функционального программирования 
ML. 
 
Несколько ранее, в 50-х г.г., Х. Карри (Haskell Curry) предложил теорию функций без 
переменных (иначе называемых комбинаторами), известную в настоящее время как 
комбинаторная логика. Эта теория представляет собой формальный язык, аналогичный 
языку функционального программирования и позволяющий моделировать вычисления в 
среде абстрактных машин, в значительной мере схожих с виртуальной машиной .NET. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Важнейшие работы по стратегиям вычислений (2)
1960-е – П. Лендин (Peter J. Landin) разработал SECD-
машину – математическую формализацию для 
вычисления ламбда-термов
1970-е – К. Уодсворт (Christopher P. Wadsworth) предложил 
механизм редукции графов для моделирования 
«ленивых» вычислений в ламбда-исчислении
1970-е – Д. Тернер (David Turner) предложил аналогичный 
механизм для «ленивых» вычислений в комбинаторах
 
 
 
Комментарий к слайду  
 
Продолжим систематизацию наиболее значительных (с точки зрения данного курса) 
этапов эволюции теории и практики реализации вычислительных стратегий в формальных 
теориях и языках программирования. 
 
В 60-х г.г., уже в эпоху высокоуровневых языков программирования,  П. Лендином (Peter 
J. Landin) была разработана так называемая SECD-машина, а именно, математическая 
формализация для реализации вычислений в терминах ламбда-выражений. Кроме того, 
тем же автором был создан формальный язык ISWIM (If  you See What I Mean), 
представляющий 
собой 
вариант 
расширенного 
ламбда-исчисления 
и 
ставший 
впоследствии прообразом языка программирования ML, который, в свою очередь, 
эволюционировал в исследуемый нами язык программирования SML. 
 
Позднее, уже в 70-х г.г., К. Уодсворт (Christopher P. Wadsworth) предложил механизм 
редукции графов для моделирования так называемых «ленивых» (т.е. выполняемых 
исключительно по мере необходимости) вычислений с помощью фундаментальной 
формальной теории  исчисления ламбда-конверсий. 
 
Несколько позже Д. Тернером (David Turner) был представлен аналогичный механизм для 
«ленивых» вычислений в более приближенной к практике программирования формальной 
системе, а именно, в терминах выражений комбинаторной логики. 
 
 

 
Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Важнейшие работы по стратегиям вычислений (3)
1975 – Г.Плоткин (G.D. Plotkin) развил исследования SECD-
машины и применил результаты для моделирования 
вычислений на языке программирования ML
1980-е – П. Кюрьен (Pierre-Louis Curien) с группой 
французских ученых создал КАМ как развитие SECD-
машины и реализовал «ленивые» вычисления на КАМ
1980-е – Р. Хьюс (R.J.M. Hughes) предложил 
суперкомбинаторы как метод реализации языков 
программирования с оптимизацией вычислений
 
 
Комментарий к слайду  
 
Завершим систематизацию наиболее значительных (с точки зрения данного курса) этапов 
эволюции теории и практики реализации вычислительных стратегий в формальных 
теориях и языках программирования. 
 
Исследования различных стратегий передачи параметров при обращении к функциям 
языков программирования  (в частности, вызова функций по имени и по значению) были 
проведены Г. Плоткиным (G.D. Plotkin) на основе развития формализации SECD-машины 
П. Лендина. Полученные результаты значительно позднее (уже в 70-х г.г.) легли в основу 
стратегии моделирования вычислений в ранних версиях языка функционального 
программирования ML. 
 
Затем, в 80-х г.г., группой французских ученых в составе П.-Л. Кюрьена, (Pierre-Louis 
Curien), Г. Кузино (Guy Cousineau), М. Мони (Michel Mauny) и ряда других 
исследователей удалось усовершенствовать формализацию SECD-машины П. Лендина и 
создать на ее основе так называемую категориальную абстрактную машину, или, 
сокращенно, КАМ, исследование возможностей оптимизации кода которой и будет 
составлять предмет нашего дальнейшего рассмотрения. 
 
Примерно 
в 
тот 
же 
период 
Р. 
Хьюсом 
(R.J.M. 
Hughes) 
было 
предложено  
усовершенствование 
комбинаторной 
логики 
и 
создана 
формальная 
система 
суперкомбинаторов (т.е. комбинаторов, на которые наложены некоторые дополнительные 
ограничения), которая, в частности, позволяет моделировать методы реализации языков 
программирования с возможностью оптимизации вычислений. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Недостатки «классической»
реализации вычислений на КАМ
1.
Громоздкость вычислений
2.
Поддержка только одноместных операций
3.
Отсутствие поддержки рекурсивных вычислений 
4.
Многократное вычисление повторяющихся фрагментов 
программы
5.
Порядок вычислений предопределен и заведомо не 
оптимален
 
 
 
Комментарий к слайду  
 
Как было показано в ходе предыдущей лекции, такая формализация вычислительной 
машины как категориальная абстрактная машина позволяет вполне удовлетворительно 
реализовать модель транслятора языка функционального программирования. 
 
Кроме того, как показывает практика, именно КАМ наиболее подходит для использования 
в качестве виртуальной машины при реализации современных профессиональных языков 
функционального программирования (в частности, языка CaML), в том числе и с 
объектными расширениями (в частности, языка Object CaML). 
 
Тем не менее, в том базовом варианте построения категориальной абстрактной машины,  
который мы исследовали в ходе предыдущих лекций, существует ряд объективных 
недостатков, 
не 
позволяющих 
реализовать 
передовые 
стратегии 
вычислений, 
необходимые современным системам программирования. 
 
Перечислим наиболее существенные (с учетом целей и задач нашего курса) из этих 
недостатков. 
 
Прежде всего, обращает на себя внимание некоторая громоздкость вычислений, которая, 
хотя и объяснима отчасти низкоуровневым характером категориальной абстрактной 
машины,  но все же неоправданно велика. Оказывается, что причиной такой ситуации 
является ограничение на использование категориальной абстрактной машиной только 
одноместных операций. 
 
 
Другим существенным недостатком КАМ является отсутствие поддержки рекурсивных 
вычислений, 
которое, 
как 
мы 
увидим 
впоследствии, 
устраняется 
посредством 
модификации среды вычислений.  
 
Наконец, очевидно, что повторяющиеся фрагменты программы требуют многократных 
вычислений, поскольку порядок вычислений предопределен и заведомо не оптимален. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Возможные пути оптимизации КАМ-кода
1.
Переход к многоместным операциям 
2.
Введение дополнительных функциональных инструкций 
для сокращения текста программ и ускорения 
вычислений
3.
Введение дополнительных функциональных инструкций 
для поддержки рекурсивных вычислений 
4.
Поддержка вычислений по необходимости или 
«ленивых» (lazy) вычислений
 
 
 
Комментарий к слайду  
 
Выявив и оценив недостатки «классической» реализации категориальной абстрактной 
машины, наметим возможные направления оптимизации программ на языке инструкций 
КАМ. 
 
Прежде всего, для решения проблемы громоздкости вычислений (которая, как 
отмечалось, вытекает из ограниченности системы команд КАМ только одноместными 
инструкциями), необходимо осуществить переход к многоместным операциям, изменив 
синтаксис и семантику языка программирования категориальной абстрактной машины. 
 
Кроме того, в целях оптимизации кода категориальной абстрактной машины 
целесообразно ввести ряд дополнительных функциональных инструкций, которые 
обеспечивали бы ускорение вычислений при одновременном сокращении и повышении 
удобочитаемости текстов программ для КАМ. 
 
Затем, чтобы устранить сложности, возникающие с поддержкой категориальной 
абстрактной машиной рекурсивных вычислений, необходимо не только модифицировать 
среду, 
но 
и 
расширить 
язык 
программирования 
КАМ 
дополнительными 
функциональными инструкциями.  
 
Наконец, следует рассмотреть вопрос о реализации на основе категориальной абстрактной 
машины поддержки вычислений по необходимости, иначе называемых «ленивыми» (lazy).  
 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Переход к многоместным операциям
1. Заменим одноместные «встроенные» функции 
двуместными. 
Приведем пример записи двуместной функции сложения:
+ <x, y> = ε o <ε o <‘+, x >, y>.
2. C учетом характеристических равенств, получим
соотношение
ε o < Λ(x) o y, z > = x o <y, z>,
соответствующее правилу редукции в ККЛ.
 
 
 
Комментарий к слайду  
 
Приступим к реализации усовершенствований категориальной абстрактной машины с 
целью оптимизации стратегии вычислений. 
 
Прежде всего, для решения проблемы громоздкости вычислений, которая обусловлена  
ограниченностью 
системы 
команд 
КАМ 
только 
одноместными 
инструкциями, 
необходимо осуществить переход к многоместным операциям. 
 
Заменим «встроенные» в систему команд категориальной абстрактной машины 
одноместные функции на двухместные.  
 
В частности, (в целях экономии времени, рассуждая без ограничения общности) приведем 
пример записи двухместной функции сложения: 
 
+ <x, y> = ε o <ε o <‘+, x >, y>. 
 
C учетом характеристических равенств для категориальной абстрактной машины, 
выведенных в ходе предыдущих лекций, получим соотношение 
 
ε o < Λ (x) o y, z > = x o <y, z>, 
 
 
которое находится в полном соответствии с правилами редукции, принятыми в 
формальной системе категориальной комбинаторной логики, на основе которой построена 
КАМ. 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Добавление многоместных КАМ-инструкций
Расширим таблицу состояний КАМ инструкциями:
T
C
S
|
T’
C’
S’
true
if a b c
sm
|
S
a c
m
false
if a b c
sm
|
S
b c
m
(a, b)
add c
S
|        {a+b}
C
S 
(a, b) 
eq c
S
|     true/false
C
S 
Введены операции сравнения if, проверки условия eq и 
сложения add.
Пример. КАМ-код для сложения чисел 2 и 3 сократится:
push quote 2 swap quote 3 cons add.
 
 
 
Комментарий к слайду  
 
Продолжим обсуждение осуществления перехода к многоместным операциям в языке 
программирования категориальной абстрактной машины. Пересмотрим цикл работы 
(схему смены состояний) категориальной абстрактной машины, расширив пространство 
состояний КАМ дополнительными инструкциями, которые, по аналогии с основными 
командами КАМ, представим в форме следующей таблицы: 
 
Старое состояние КАМ 
Новое состояние КАМ 
Терм 
Код 
Стек 
Терм 
Код 
Стек 
true 
if a b c 
sm 
S 
a c 
m 
false 
if a b c 
sm 
S 
b c 
m 
(a, b) 
add c 
S 
{a + b} 
C 
S 
(a, b) 
eq c 
S 
true / false 
C 
S 
 
Как видно из приведенной таблицы, пространство состояний категориальной абстрактной 
машины расширено посредством введения операций сравнения if, проверки условия eq, а 
также сложения add. Проиллюстрируем практическую эффективность программного кода 
усовершенствованной категориальной абстрактной машины следующим примером. 
Рассмотрим программу категориальной абстрактной машины, вычисляющую сумму 
целых чисел 2 и 3 в «классической» версии «языка программирования» КАМ: 
 
push cur (push push cdr swap quote 1 cons app swap push cur (cdr) swap quote 2 cons app cons 
app) swap quote + cons app. 
 
Запрограммируем ту же задачу в усовершенствованной версии КАМ: 
 
 
push quote 2 swap quote 3 cons add. 
 
Как видно, объем программы сократился более чем втрое. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Поддержка рекурсии
Расширим таблицу состояний КАМ еще двумя 
дополнительными инструкциями:
T
C
S
|
T’
C’
S’
t
dum c
S
|
$Y
C
S
[a:b]
wind c
(t$Y)S |       (t.[a:b])
C
S
Введены операции аппликации wind и dum для 
обработки рекурсивных объектов.
 
 
 
Комментарий к слайду  
 
Рассмотрим, каким образом можно решить проблему с рекурсивными вычислениями в 
категориальной абстрактной машине, которая сводится к принципиальной цикличности и 
потенциальной бесконечности обрабатываемых инструкций. 
 
Чтобы устранить сложности, возникающие с поддержкой категориальной абстрактной 
машиной рекурсивных вычислений, необходимо расширить язык программирования КАМ 
дополнительными функциональными инструкциями.  
 
Пересмотрим цикл работы (схему смены состояний) категориальной абстрактной 
машины, расширив пространство состояний КАМ дополнительными инструкциями, 
которые, по аналогии с основными командами абстрактной машины, представим в форме 
следующей таблицы: 
 
 
Старое состояние КАМ 
Новое состояние КАМ 
Терм 
Код 
Стек 
Терм 
Код 
Стек 
T 
dum c 
S 
$Y 
C 
S 
[a : b] 
wind c 
(t $Y) S 
(t. [a : b]) 
C 
S 
 
 
Как видно из приведенной таблицы, пространство состояний категориальной абстрактной 
машины расширено посредством введения операций wind и dum для обработки 
рекурсивных объектов. 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Стратегии вычислений
При вычислении с вызовом по значению (call-by-value) 
все выражения должны быть означены до аппликации.
При вычислении с вызовом по имени (call-by-name) до 
аппликации необходима подстановка термов вместо всех 
вхождений формальных параметров до означивания.
При вычислении с вызовом по необходимости (call-by-
need) ранее вычисленные значения аргументов хранятся, 
если необходимо их повторное использование.
Замечание. Возможность ленивых вычислений в языках 
функционального программирования обусловлена теоремой Черча-
Россера.
 
 
 
Комментарий к слайду  
 
До сих пор рассматривались варианты абстрактных машин, реализующих механизм 
означивания переменных, известный под  названием вызова по значению. Однако 
существуют и другие стратегии вычислений. Рассмотрим более подробно возможные 
подходы к означиванию переменных. 
 
При вычислении с вызовом по значению (call-by-value) все выражения должны быть 
означены до вычисления операции аппликации. 
 
При вычислении с вызовом по имени (call-by-name) до вычисления операции аппликации 
необходима подстановка термов вместо всех вхождений формальных параметров до 
означивания. Именно эта стратегия лежит в основе «ленивых» (lazy), «отложенных» 
(delayed) или «замороженных» (frozen) вычислений, которые принципиально необходимы 
для обработки потенциально бесконечных структур данных. 
 
Наконец, при вычислении с вызовом по необходимости (call-by-need) ранее вычисленные 
значения аргументов сохраняются в памяти компьютера только в том случае, если 
необходимо их повторное использование. 
 
Чтобы устранить сложности с поддержкой категориальной абстрактной машиной 
«ленивых» вычислений, пересмотрим цикл работы КАМ, расширив пространство 
состояний 
дополнительными 
инструкциями 
для 
«замораживания» 
(freeze) 
и 
«размораживания» (unfreeze), которые представим в форме следующей таблицы: 
 
Старое состояние КАМ 
Новое состояние КАМ 
Терм 
Код 
Стек 
Терм 
Код 
Стек 
s 
(freeze C).C1 
S 
С.s 
C1 
S 
C.s 
unfreeze.C 
S 
s 
C 
S 
s 
unfreeze.C 
S 
s 
C 
S 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Теоремы Черча-Россера
Теорема Черча-Россера. Пусть E1 = E2 ламбда-термы. 
Тогда существует ламбда-терм E такой, что E1=E и E2=E.
(“=“ понимается в смысле отношения конвертируемости).
Теорема Черча-Россера (1). Если в языке вызовы по 
имени и по значению приводят к определенному 
результату, то это один и тот же результат. 
Теорема Черча-Россера (2). Если вычисление значения 
выражения приводит к определенному результату, то к 
нему всегда приводит вызов по имени и не всегда – по 
значению.
 
 
 
Комментарий к слайду  
 
Сформулируем ряд теорем, известных по именам их авторов как теоремы Черча-Россера и 
позволяющих установить особенности различных вычислительных стратегий, а также 
взаимосвязей между ними. 
 
Заметим, что возможность «ленивого» связывания переменных с их значениями в языках 
функционального программирования вытекает из формулировки теорем Черча-Россера. 
 
Поскольку доказательство теорем Черча-Россера выходит за рамки настоящего курса, 
ограничимся приведением формулировок теорем как таковых. 
 
Теорема Черча-Россера.  
 
Пусть E1 и E2 суть ламбда-выражения, причем справедливо соотношение: E1 = E2.  
 
 
Тогда существует ламбда-выражение E такое, что выполнены следующие условия: во-
первых, E1 = E, и, во-вторых, E2 = E. 
 
Заметим, что символ “=“ в формулировке теоремы понимается в смысле отношения 
конвертируемости. 
 
Теорема Черча-Россера (1).  
 
Если в языке вызовы по имени и по значению приводят к определенному результату, то 
это один и тот же результат.  
 
Теорема Черча-Россера (2). 
 
Если вычисление значения выражения приводит к определенному результату, то к нему 
всегда приводит вызов по имени и не всегда – по значению. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Возможные способы реализации стратегии
«ленивых» вычислений
1)
расширения абстрактных машин («чистые» SECD и
КАМ реализуют стратегию вызова по значению; 
необходима модификация среды вычислений);
2)
редукция графов как механизм преобразования
ламбда-термов для обеспечения единственности
означивания каждого аргумента;
3)
исследование комбинаторов специального вида
(суперкомбинаторов) и разработка алгоритмов
оптимизации кода.
 
 
 
Комментарий к слайду  
 
После выяснения особенностей различных вычислительных стратегий, а также  
взаимосвязей между ними, наметим возможные направления реализации стратегии 
«ленивых» вычислений. 
 
Наиболее очевидным, исходя из специфики курса, представляется подход, при котором 
пересматривается 
цикл 
работы 
категориальной 
абстрактной 
машины, 
причем 
пространство 
состояний 
расширяется 
дополнительными 
инструкциями 
для 
«замораживания» (freeze) и «размораживания» (unfreeze), ранее (в ходе данной лекции) 
представленными нами в виде таблицы.  
 
Напомним, что ни SECD-машина П. Лендина, ни категориальная абстрактная машина в 
«чистом», «классическом» представлении не обладают способностью поддержки 
реализации механизма отложенного означивания переменных. 
 
Другим возможным подходом к реализации «ленивой» стратегии вычислений может 
служить использование механизма редукции графов для преобразования ламбда-
выражений, который обеспечивает единственность означивания для каждого аргумента. 
 
Наконец, еще одним теоретически интересным и практически важным подходом к 
реализации стратегии отложенных вычислений является предложеное Р. Флойдом 
усовершенствование 
комбинаторной 
логики 
в 
виде 
формальной 
системы 
суперкомбинаторов.  
 
Заметим, что последнее направление является весьма важным еще и в силу того 
обстоятельства, 
что 
оно 
позволяет 
моделировать 
методы 
реализации 
языков 
программирования с возможностью алгоритмизированной оптимизации программного 
кода. 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Преимущества использования 
платформы .NET для оптимизации кода
1)
использование виртуальной машины с универсальным
высокоуровневым ассемблером MSIL;
2)
централизованная «сборка мусора», обработка ошибок
и исключительных ситуаций;
3)
языковая интероперабельность (разработка компонент
проекта на наиболее целесообразных языках
программирования);
4)
широкий спектр унифицированных предопределенных
типов и структур данных.
 
 
Комментарий к слайду  
 
Подводя итоги сравнительного анализа стратегий вычисления и направлений их 
оптимизированной реализации на основе категориальной абстрактной машины, можно 
сделать 
следующие 
выводы 
(в сопоставлении 
КАМ 
с 
виртуальной 
машиной 
технологической платформы Microsoft .NET). 
 
Во-первых, необходимо отметить, что в рамках рассматриваемой инструментально- 
технологической платформы Microsoft .NET используется виртуальная машина с 
универсальным высокоуровневым ассемблером (известным под названием Microsoft 
Intermediate Language, или, сокращенно, MSIL) принципиально подобная КАМ. 
Абстрактная машина .NET транслирует исходный текст на языке программирования в код 
MSIL, который в значительной степени является аналогичным  КАМ-коду. 
 
Во-вторых, виртуальная машина инструментально-технологической платформы Microsoft 
.NET является достаточно универсальным решением и предусматривает такие важнейшие 
механизмы поддержки проектирования и реализации языков программирования, как 
централизованная «сборка мусора», обработка ошибок и исключительных ситуаций. 
Кроме того, виртуальная машина .NET, как и категориальная абстрактная машина, 
отличается высокой аппаратной совместимостью, поскольку реализует целый ряд 
механизмов, обеспечивающих безопасную схему вычислений. 
 
В-третьих, виртуальная машина .NET, в отличие от категориальной абстрактной машины, 
поддерживает 
широкую 
языковую 
интероперабельность, 
то 
есть 
возможность 
одновременной 
разработки 
программных 
проектов 
на 
различных 
языках 
программирования  в условиях одной и той же универсальной среды вычислений.  Таким 
образом, представляется принципиально возможной и практически реализуемой 
разработка компонент проекта на наиболее целесообразных языках программирования. 
 
В-четвертых, виртуальная машина .NET обеспечивает поддержку универсальной среды 
вычислений с широким спектром унифицированных предопределенных типов и структур 
данных. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Вопросы, рассмотренные в рамках курса
1)
классификация подходов к программированию;
2)
математическое обоснование функционального
программирования (ламбда-исчисление, 
комбинаторная логика, теория категорий);
3)
синтаксис и семантика языков программирования;
4)
теория типов и типизация;
5)
рекурсивные вычисления;
6)
реализация языков программирования (SECD, КАМ);
7)
стратегии вычислений и оптимизация кода. 
 
 
 
Комментарий к слайду  
 
Завершая первую часть учебного курса, посвященного исследованию современных языков 
программирования (на примере языка программирования SML) и поддерживающих их 
сред вычислений (на примере инструментально-технологической платформы .NET), 
кратко резюмируем содержание рассмотренных вопросов и проблем. 
 
Прежде всего, нами была рассмотрена история развития языков программирования, а 
также построен вариант классификации современных подходов к программированию. 
 
Затем было дано представление важнейших математических формальных систем, которые 
составляют теоретическое основание современных подходов к  программированию и, 
прежде всего, функционального подхода. В частности, были рассмотрены исчисление 
ламбда-конверсий, комбинаторная логика, а также теория категорий и теория вычислений 
Д. Скотта. 
 
Далее, посредством перечисленных теорий были формализованы такие важнейшие 
аспекты языков программирования, как синтаксис и семантика. 
 
Кроме того, было исследовано интуитивно ясное понятие типа, изучены основы теории 
типов и типизации в языках программирования. 
 
После этого, мы перешли к рассмотрению вопросов, связанных с представлением 
рекурсивных функций и множеств, а также к формализации рекурсивных вычислений. 
 
Еще одним пунктом исследований стали важнейшие аспекты реализации языков 
программирования, включая схему трансляции в промежуточнные коды виртуальных 
машин SECD и КАМ. 
 
Наконец, были исследованы в сравнении различные стратегии вычислений и оптимизации 
кода. 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Вопросы, планируемые к дальнейшему 
рассмотрению в рамках курса
1)
математическое обоснование объектного подхода к
программированию (на примере языка C#);
2)
компонентное проектирование интегрированных
гетерогенных программных систем (на примере
языков SML и C#);
3)
теория и практика разработки событийно управляемых
приложений;
4)
сравнительное исследование функционального и
объектно-ориентированного подходов к
программированию. 
 
 
 
Комментарий к слайду  
 
Вполне естественно, что, исходя из обширного спектра и существенной глубины 
рассматриваемой проблематики, ряд важнейших аспектов реализации современных 
языков программирования (в рамках первой части курса) был лишь обозначен или 
изложен весьма конспективно. 
 
В связи с этим, в ходе дальнейшего исследования планируется систематическое изучение 
следующих вопросов: 
 
1) математическое обоснование объектного подхода к программированию (на 
примере языка программирования C#); 
 
2) компонентное проектирование интегрированных гетерогенных программных 
систем (на примере языков функционального программирования SML и объектно-
ориентированного программирования C#); 
 
3) теория и практика разработки событийно управляемых приложений; 
 
4) сравнительное исследование функционального и объектно-ориентированного 
подходов к программированию.  
 
Дальнейшие исследования, согласно практике, сложившейся на протяжении первой части 
курса, будут проводиться синтетически по направлениям теоретического обоснования 
программирования на основе современных формальных систем computer science и 
современной практики проектирования и реализации программного обеспечения на 
основе универсальной и прогрессивной программно-инструментальной платформы 
Microsoft .NET. 
  
 
 

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (1)
1.
Barendregt H.P. The lambda calculus (revised edition), 
Studies in Logic, 103, North Holland, Amsterdam, 1984
2.
Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, 
Amsterdam, 1958
3.
Kleene S.C. λ-definability and recursiveness. Duke Math. J., 
pp. 340-353, 1936 
4.
Hughes R.J.M. Super combinators: a new implementation 
method for applicative languages. Proc. of the 1982 ACM 
Symposium on LISP and Functional Programming, 
Pittsburgh, 1982
5.
Landin P.J. The next 700 programming languages. CACM, 9, 
pp. 157-164, 1966
 
 
 
 
Комментарий к слайду  
 
К сожалению, в рамках времени, отведенных на одну лекцию, можно лишь в общих 
чертах охарактеризовать основные направления теории представления вычислительных 
стратегий и рассмотреть отдельные примеры, связанные с практикой их реализации. Для 
более детального ознакомления с особенностями, достижениями и проблемами в области 
исследований вычислительных стратегий рекомендуется следующий список литературы: 
 
1. Barendregt H.P. The lambda calculus (revised edition), Studies in Logic, 103, North Holland, 
Amsterdam, 1984 
 
2. Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, Amsterdam, 1958  
 
3. Kleene S.C. λ-definability and recursiveness. Duke Math. J., pp. 340-353, 1936  
 
4. Hughes R.J.M. Super combinators: a new implementation method for applicative languages. 
Proc. of the 1982 ACM Symposium on LISP and Functional Programming, Pittsburgh, 1982 
 
5. Landin P.J. The next 700 programming languages. CACM, 9, pp. 157-164, 1966 
 
Кратко остановимся на источниках. Работа [1] является энциклопедией ламбда-
исчисления – фундаментальной формальной теории для данного курса. Работа [2] 
содержит описание формальной системы комбинаторной логики. В работе [3] 
исследуются модели рекурсивных вычислений. В работах [4,5] обсуждаются вопросы 
практической 
реализации 
языков 
программирования, 
в 
том 
числе 
на 
основе 
суперкомбинаторов.  

Современные языки программирования и .NET: I семестр
Лекция 12: Оптимизация вычислений и расширения абстрактных машин
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (2)
6.
Turner D.A. A new implementation technique for applicative 
languages. Software – Practice and Experience, 9:21-49, 1979
7.
Plotkin G.D. Call-by-name, call-by-value and the λ-calculus. 
Theoretical computer science, 1, pp. 125-159, 1936 
8.
Cousineau G., Curien P.-L., Mauny M. The categorical 
abstract machine. Science of Computer Programming 8(2): 
173-202, 1987
9.
Wadsworth C.P. Semantics and pragmatics of the λ-calculus. 
PhD Thesis, University of Oxford, 1981  
 
 
 
Комментарий к слайду  
 
Продолжим обсуждение работ, посвященных исследованию важнейших вычислительных 
стратегий. 
 
Приведем окончание библиографического списка. 
 
6. Turner D.A. A new implementation technique for applicative languages. Software – Practice 
and Experience, 9:21-49, 1979 
 
7. Plotkin G.D. Call-by-name, call-by-value and the λ-calculus. Theoretical computer science, 1, 
pp. 125-159, 1936  
 
8. Cousineau G., Curien P.-L., Mauny M. The categorical abstract machine. Science of 
Computer Programming 8(2): 173-202, 1987. 
 
9. Wadsworth C.P. Semantics and pragmatics of the λ-calculus. PhD Thesis, University of 
Oxford, 1981.   
 
В работе [6] излагаются вопросы практической реализации языков функционального 
программирования. В работе [7] представлен сравнительный анализ вычислительных 
стратегий. Работа [8] содержит описание категориальной абстрактной машины. Работа [9] 
посвящена исследованию семантического и прагматического аспектов исчисления 
ламбда-конверсий. 
 
 
 
 

