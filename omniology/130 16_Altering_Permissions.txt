Altering
Permissions 

To change the permissions of a file or directory, we can
use the chmod command (change mode).
To use chmod to alter permissions, we need to tell it:
- Who we are changing permissions for
- What change are we making?  Adding? Removing?
- Which permissions are we setting?
chmod
chmod mode file
❯

u - user (the owner of the file)
g - group (members of the group the file belongs to
o - others (the "world"
a - all of the above
When specifying permissions with chmod, we use a
special syntax to write permission statements.
First, we specify the "who" using the following values:
chmod
chmod mode file
❯

- (minus sign) removes the permission
+ (plus sign) grants the permission
= (equals sign) set a permission and removes others
Next, we tell chmod "what" we are doing using the
following characters:
chmod
chmod mode file
❯
r - the read permission
w - the write permission
x - the execute permission
Finally, the "which" values are:

- (minus sign) removes the permission
+ (plus sign) grants the permission
= (equals sign) set a permission and removes others
Next, we tell chmod "what" we are doing using the
following characters:
All Togther Now
chmod mode file
❯
r - the read permission
w - the write permission
x - the execute permission
Finally, the "which" values are:

-rw-r--r--
Owner Group World
-rw-rw-r--
Owner Group World
chmod g+w file.txt
❯
Add write permissions to the group

-rw-rw-r--
Owner Group World
-r--r--r--
Owner Group World
chmod a-w file.txt
❯
Remove write permissions from all

-rw-rw-r--
Owner Group World
-rwxrw-r--
Owner Group World
chmod u+x file.txt
❯
Add executable permissions for owner
y3    2

-rwxrwxr--
Owner Group World
-r--r--r--
Owner Group World
chmod a=r file.txt
❯
Set permissions to read ONLY for all. 

chmod also supports another way of representing
permission patterns: octal numbers (base 8).  Each digit
in an octal number represents 3 binary digits.
chmod octals
Octal
0
1
2
3
4
5
6
7
Binary
000
001
010
011
100
101
110
111
File Mode
---
--x
-w-
-wx
r--
r-x
rw-
rwx

Octal
0
1
2
3
4
5
6
7
Binary
000
001
010
011
100
101
110
111
File Mode
---
--x
-w-
-wx
r--
r-x
rw-
rwx
chmod 755 file.txt
❯
111101101
Owner Group World
rwx
Owner Group World
r-xr-x

There may be times we want to start a shell as
another user, from within our own shell session. 
We can use the su command to do just that.
For example, su - hermione would create a
new login shell for the user hermione.  We
would need to enter Hermione's passsword.
To leave the session, type exit.
Changing 
Our Identity
su - hermione
❯

In Linux systems, there is a super user called
root.  The root user can run any command and
access any file on the machine, regardless of
the file's actual owner.  
The root user has tons of power and could
easily damage or even destroy the system by
running the wrong commands!
For this reason, Ubuntu locks the root user by
default. 
Root User

Even if the root user is locked by default, we
can still run specific commands as the root
user by using the sudo command.
Individual users are granted an "allowed" list
of commands they can run as the super user.
Run sudo -l to see the permitted commands for
your particular user.
Sudo
sudo -l
❯
User colt may run the
following commands:
 (ALL : ALL) ALL

By default, Ubuntu disables logins to the root
account.  Instead, the initial user is granted full
access to all superuser priveleges:
"User colt may run the following commands:
 (ALL : ALL) ALL"
Subsequent users won't have full sudo
privileges by default, but the original user can
grant them.
Sudo + Ubuntu
sudo -l
❯
User colt may run the
following commands:
 (ALL : ALL) ALL

To run a command as the root user, prefix it
with sudo.  You will then need to enter the
password for your account.
For example to update Ubuntu, I would need
to run apt update. However, I can't do this as
my "regular" user, as it's something that
impacts all users. 
Instead, I need to run the command as the root
user using sudo apt update
Sudo
sudo apt update
❯
[sudo] password for colt: 

The chown command is used to change the
owner and/or the group owner of a specific
file or directory.  
To make bojack the owner of file.txt, we would
run chown bojack file.txt
chown
chown USER[:GROUP] FILE(s)
❯
chown bojack file.txt
❯

To change the owner of a file and the file
group owner at once we can provide both
using chown USER:GROUP FILE.
For example, chown bojack:horses file.txt will
change the owner of file.txt to bojack AND
changes the file group owner to the group
named horses.
chown
chown bojack:horses file.txt 
❯

To only change the group owner of a file, we
can run chown :GROUP FILE
For example, chown :horses file.txt will
change the file group owner of file.txt to the
group named horses.
chown
chown :horses file.txt 
❯

To view the groups that a given user belongs
to, run groups USERNAME
For example, to see which groups hermione is
part of, run groups hermione
groups
groups USERNAME
❯

We can create new groups using the
addgroup command.
To create a new group called friends, we
would run addgroup friends
Creating Groups
addgroup GROUPNAME
❯

To add a user to a group, use the adduser
command. 
To add hermione to friends, we would run
adduser hermione friends
Adding Group Members
adduser USER GROUP
❯
Don't screw around with groups unless
you know what you are doing! 
This is just a 30 second intro.

