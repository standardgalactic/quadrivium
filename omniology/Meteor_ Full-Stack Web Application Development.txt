	








Meteor: Full-Stack Web Application Development
Meteor: Full-Stack Web Application Development
Credits
Preface
What this learning path covers
What you need for this learning path
Who this learning path is for
Reader feedback
Customer support
Downloading the example code
Errata
Piracy
Questions
I. Module 1
1. Getting Started with Meteor
The full-stack framework of Meteor
Meteor's requirements
Using Chrome's developer tools
Using Git and GitHub
Installing Meteor
Installing Git
Creating our first app
Creating a good folder structure
Preadd style files
Adding basic packages
Adding a core package
Adding a third-party package
Variable scopes
Meteor's folder conventions and loading order
Loading assets on the server
Meteor's command-line tool
Updating Meteor
Deploying Meteor
Summary
2. Building HTML Templates
Writing templates in Meteor
Building the basic templates
Adding templates and partials
Displaying data with template helpers
Setting the data context for a template
Using the {{#with}} block helper
"this" in template helpers and template callbacks
Adding events

Block helpers
Listing posts
Spacebars syntax
Accessing parent data contexts
Passing data to helpers
Summary
3. Storing Data and Handling Collections
Meteor and databases
Setting up a collection
Adding post examples
Querying a collection
Updating a collection
Database everywhere
Differences between client and server collections
Summary
4. Controlling the Data Flow
Syncing data â€“ the current Web versus the new Web
Removing the autopublish package
Publishing data
Publishing only parts of data
Publishing specific fields
Lazy loading posts
Switching subscriptions
Some notes on data publishing
Summary
5. Making Our App Versatile with Routing
Adding the iron:router package
Setting up the router
Switching to a layout template
Adding another route
Moving the posts subscription to the Home route
Setting up the post route
Creating a single-post publication
Adding the post route
Linking the posts
Changing the website's title
Summary
6. Keeping States with Sessions
Meteor's session object
A better way for simple reactivity
Using sessions in template helpers
Session and hot code pushes
Rerunning functions reactively
Stopping reactive functions
Using autorun in a template
The reactive session object
Summary

7. Users and Permissions
Meteor's accounts packages
Adding the accounts packages
Adding admin functionality to our templates
Adding a link for new posts
Adding the link to edit posts
Adding the login form
Creating the template to edit posts
Creating the admin user
Adding permissions
A note on security
Creating routes for the admin
Preventing visitors from seeing the admin routes
Summary
8. Security with the Allow and Deny Rules
Adding a function to generate slugs
Creating a new post
Saving a post
Editing posts
Updating the current post
Restricting database updates
Removing the insecure package
Adding our first allow rules
Adding a deny rule
Adding posts using a method call
Method stubs and latency compensation
Changing the button
Adding the method
Calling the method
Summary
9. Advanced Reactivity
Reactive programming
The invalidating cycle
Building a simple reactive object
Rerunning functions
Creating an advanced timer object
Reactive computations
Stopping reactive functions
Preventing run at start
Advanced reactive objects
Summary
10. Deploying Our App
Deploying on meteor.com
Deploying on meteor.com using a domain name
Backup and restore databases hosted on meteor.com
Deploying on other servers
Bundling our app

Deploying using Demeteorizer
Deploying using Meteor Up
Setting up the server
Deploying with mup
Outlook
Summary
11. Building Our Own Package
The structure of a package
Creating our own package
Adding the package metadata
Adding the package
Releasing our package to the public
Publishing our package online
Updating our package
Summary
12. Testing in Meteor
Types of tests
Testing packages
Adding package tests
Running the package tests
Testing our meteor app
Testing using Jasmine
Adding unit tests to the server
Adding integration tests to the client
Adding a test for the visitors
Adding a test for the admin
Acceptance tests
Nightwatch
Laika
Summary
A. Appendix
List of Meteor's command-line tool commands
The iron:router hooks
II. Module 2
1. Optimizing Your Workflow
Introduction
Installing Meteor
Getting ready
How to do it...
How it works...
There's more...
Finding documentation for Meteor
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
Getting help with questions
How to do itâ€¦

How it worksâ€¦
Stack Overflow
Meteor forums
The #meteor on IRC
There's moreâ€¦
Setting up your project file structure
Getting ready
How to do itâ€¦
How it worksâ€¦
client/server
main/lib
public/private
both
There's moreâ€¦
See also
Setting up your development environment
Getting ready?
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Using the web console
Getting ready
Safari
Firefox
Chrome
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
Deploying a test app to Meteor
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Deploying to Meteor using a CNAME redirect
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Deploying to a custom hosted environment
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Deploying with Meteor Up (MUP)

Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Using CoffeeScript
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Using CSS compilers
Getting ready
How to do itâ€¦
Using Stylus
Using Less
Using SCSS / SASS
How it worksâ€¦
See also
2. Customizing with Packages
Introduction
Adding Meteor packages
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Removing Meteor packages
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
Discovering new packages with Atmosphere
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating a multipage application with Iron Router
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Building a custom package
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦

See also
Using npm modules
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Publishing custom packages to Atmosphere
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
3. Building Great User Interfaces
Introduction
Inserting templates with Spacebars
Getting ready
How to do it...
How it works...
There's moreâ€¦
Inserting raw HTML using triple braces
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Creating dynamic lists
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Building a smooth interface with Bootstrap
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating customized global helpers
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating custom components
Getting ready
How to do itâ€¦
How it worksâ€¦

There's moreâ€¦
See also
Using reactivity with HTML attributes
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Using dynamic templates
Getting ready
How to do it...
How it worksâ€¦
There's moreâ€¦
See also
Animating DOM elements
Getting ready
How to do it...
How it worksâ€¦
There's moreâ€¦
See also
4. Creating Models
Introduction
Implementing a simple collection
Getting ready
How to do it...
How it works...
See also
Using the Session object
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Sorting with MongoDB queries
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Filtering with MongoDB queries
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating upsert MongoDB queries
Getting ready
How to do itâ€¦

How it worksâ€¦
There's moreâ€¦
See also
Implementing a partial collection
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
5. Implementing DDP
Introduction
Reading the DDP stream
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Using client-only collections
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Implementing multiserver DDP
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Integrating DDP with other technologies
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
6. Mastering Reactivity
Introduction
Creating and consuming a reactive value
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Using Ajax query results in ReactiveVar
Getting ready
How to do itâ€¦
How it worksâ€¦
See also

Making a custom library reactive
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Updating Blaze templates without Mongo
Getting ready
How to do itâ€¦
How it worksâ€¦
See also
Using inline data to modify UI elements reactively
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Integrating a jQuery UI
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
7. Using Client Methods
Introduction
Creating dynamic graphs with SVG and Ajax
Getting ready
How to do it...
How it works...
See also
Using the HTML FileReader to upload images
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating a coloring book with the Canvas element
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
8. Integrating Third-party Libraries
Introduction
Using npm packages directly
Getting ready
How to do it...
How it works...

There's more...
See also
Building graphs with D3.js
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Creating cutting-edge UIs with Polymer
Getting ready
Creating your app and folders
Creating your files
Configuring Bower and installing Polymer
Adding helper Meteor packages
Configuring Meteor
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
9. Securing Your Application
Introduction
Basic safety â€“ turning off autopublish
Getting ready
Project setup
Creating a basic template
Adding CSS styling
How to do it...
How it works...
See also
Basic safety â€“ removing insecure
Getting ready
How to do it...
How it works...
See also
Securing data transactions with allow and deny
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Hiding data with faÃ§ades
Getting ready
How to do it...
How it works...
See also
Protecting the client with browser-policy
Getting ready

Scaffolding setup
Add CDN-hosted bootstrap
Add inline and eval() scripts
How to do it...
How it works...
See also
10. Working with Accounts
Introduction
Implementing OAuth accounts packages
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Customizing the accounts login
Getting ready
How to do it...
How it works...
There's moreâ€¦
See also
Performing two-factor authentication
Getting ready
Creating our baseline application
Signing up for the Twilio SMS service
Creating an SMS service on Twilio
Installing the twilio-node npm package
Creating and testing the sendTwilio() method
How to do it...
How it works...
There's moreâ€¦
See also
11. Leveraging Advanced Features
Introduction
Building custom server methods
Getting ready
Project setup
Creating a simple app
How to do it...
How it works...
There's moreâ€¦
See also
Creating custom EJSON objects
Getting ready
Declaring the Swatch object
Modifying Swatches.insert()
Changing Swatch colors
How to do itâ€¦

How it worksâ€¦
There's moreâ€¦
See also
Handling asynchronous events
Getting ready
Creating a baseline Meteor app
Obtaining your Twitter Access Tokens
Initializing twit
Creating the Tweets collection, and building a stream reader
Tracking and testing changes
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Using asynchronous functions
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
12. Creating Useful Projects
Introduction
Creating RESTful web services
Getting ready
Creating the baseline application
Installing and configuring Postman
How to do it...
How it works...
There's moreâ€¦
See also
Creating a complete app with Iron Router
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Deploying apps to mobile devices
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦
See also
Adding social sharing
Getting ready
How to do itâ€¦
How it worksâ€¦
There's moreâ€¦

See also
III. Module 3
1. Getting Started with Meteor
CoffeeScript for Meteor
Objects and arrays
Logical statements and operators
Functions
Binding
Jade for Meteor
HTML tags
Templates and components
Helpers
Stylus for Meteor
CSS tags
Variables
Functions/mixins
Templates, helpers, and events
Templates
Creating helpers
Events
The event loop and the merge box
The event loop
The merge box
The beginning of our online shop
The must-have packages
File structure
Summary
2. Publish and Subscribe Patterns
Template-level subscriptions
Setting up products for the online shop
Building the publisher
Subscribing to the publisher
Database relationships
One to one
One to many
Many to many
Publishing with relations
Publishing products with images (one to one)
Publishing orders with details (one to many)
Publishing a tag with products (many to many)
Key, foreign key, options, and filter
Aggregation publishers
The aggregation framework
Publishing the results
External API publishers
The HTTP package
Summary

3. Front-end Patterns
Responsive design
General settings
Bootstrap
Jeet grid systems with Rupture
Super helpers
Defining a Blaze helper
Making a global dictionary
Variable types
Session variables
Persistent variables
File scope variables
The ReactiveVar variables
Forms
Meteor Methods
Autoform
Loading data
Designing the loading indicator
Implementing the loading indicator
Animations and transitions
Animating with CSS
Executing animations in Meteor
SEO
Prerender.io
Using Meta
Schema.org
Summary
4. Application Patterns
Filtering and paging collections
Router gotchas
Stateful pagination
Filtering
Security
Roles
Collection2
Deny rules
Custom deny rules
The Meteor methods â€“ round 2
Managing the wait time
Browser policy
Framing
Content
External APIs
Synchronization
Webhooks
Summary
5. Testing Patterns

Behavior tests
Unit tests
Summary
6. Deployment
Setting up Modulus
Setting up Compose
Setting up Kadira
Setting up an SSL certificate
Summary
B. Bibliography
Index

	






	





	


	








	

 !"#$#

	





Copyright Â© 2016 Packt Publishing
All rights reserved. No part of this course may be reproduced, stored in a retrieval system, or transmitted
in any form or by any means, without the prior written permission of the publisher, except in the case of
brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this course to ensure the accuracy of the information
presented. However, the information contained in this course is sold without warranty, either express or
implied. Neither the authors, nor Packt Publishing, and its dealers and distributors will be held liable for
any damages caused or alleged to be caused directly or indirectly by this course.
Packt Publishing has endeavored to provide trademark information about all of the companies and
products mentioned in this course by the appropriate use of capitals. However, Packt Publishing cannot
guarantee the accuracy of this information.
Published on: November 2016
Published by Packt Publishing Ltd.
Livery Place
35 Livery Street
Birmingham B3 2PB, UK.
ISBN 978-1-78728-775-4
www.packtpub.com


	
Fabian Vogelsteller
Isaac Strack
Marcelo Reyna
 
Riccardo Mancinelli
Rohit Mukherjee
Isaac Strack
Jebin B V
Ryan Wilcox
Brad Cypert
David Ryan Speer

!
Onkar Wani
"
Abhinash Sahu
#	
Shraddha Falebhai

#
Meteor is the weapon of choice for start-ups in todayâ€™s world as itâ€™s an incredibly powerful and fun
platform that allows you to build real-time web applications quickly and easily and in pure JavaScript. It
provides developers with tools and flexibility to build a fully-fledged production app.
Meteor aims to create single-page applications where real time is the default. It takes care of the data
synchronization and updating of the DOM. If data changes, your screen will be updated. These two
basic concepts make up a lot of the work we do as web developers, and with Meteor this happens
without any extra line of code.
It is modular and declarative, supports data-on-the-wire, is well supported by a thriving development
community, and implements full-stack reactivity to create a great impact on your day-to-day
development efforts.
As Meteor is modular and well supported, it works easily with all of your favorite JavaScript
frameworks. You can use the entire Meteor stack, or you can mix and match it with community
packages to complement your existing infrastructure / skill set.

$
Module 1, %#	

, This module takes you from the installation of
Meteor to building a fully working web blog. You will start with the basic concepts and folder structure
of a Meteor project, learning how Meteor templates work. Learn how to retrieve and send data to the
server and manipulate the database content. Routing will later make your example app look and behave
like a real website. Also, youâ€™ll get to grips with Meteorâ€™s reactivity concept that can rerun functions
when data changes while youâ€™re building your own reactive object, and package it later for drop-in use.
After your app is ready, you will learn about ways of deploying your app on different types of servers.
Finally, we will take a look at testing packages and the applications.
Module 2, 
&, This module starts with simple recipes designed for quick reference, and
culminating in advanced recipes that walk you through building and deploying a complete application, it
covers all the major areas of Meteor development, including lesser-known and undocumented features.
You will have instant access to step-by-step recipes, accompanied by clear, concise explanations on
optimizing your workflow.
Module 3, 
'(

, Module starts off with a refresher on the basics of JavaScript
programming such as templates, CoffeeScript, the Event Loop, and the Merge Box, amongst others. You
then learn how to map real-world data and optimize the dataâ€™s publishers to output data with the least
amount of work done by the server with some subscribe and publish patterns. Following this, you will
see how to optimize and secure the web application and maintain applications without breaking other
features. Finally, you will learn how to deploy a secure production-ready application while learning to
set up modulus, compose with Oplog tracking and SSL certificates, as well as error tracking with
Kadira.

%	
$
Module 1:
To follow the examples in the modules, you will need a text editor to write the code. Itâ€™s highly
recommended to use Sublime Text as your IDE, as it has a wide range of plugins for almost every task a
web developer could think of.
You will also need a modern browser to see your results. As many examples use the browser console to
make changes to the database and to see the results of the code snippets, I recommend Google Chrome.
Its Developer tools web inspector has everything a web developer needs to work and debug websites
with ease.
Additionally, you can use Git and GitHub to store your success every step along the way and in order to
go back to the previous versions of your code.
The code examples for each chapter will also be available on GitHub at
https://github.com/frozeman/book-building-single-page-web-apps-with-meteor, where each commit in
this repository correlates with one chapter of the module, giving you an easy way to see what was added
and removed in each step along the way
Module 2:
This module assumes that you have a working knowledge of JavaScript and HTML. Being familiar with
Node, npm, GitHub and the command line/terminal will be very helpful (but not critical) to getting the
most out of the recipes in this book.
You will find recipes to install Meteor on Mac OS X or Linux, with links to using Meteor on Windows
and Google Chromebooks. In every instance, you will need access to the Internet to download Meteor
and community packages, and you will need installation privileges for your developer machine
regardless of the operating system.
For deployment to production environments or to mobile devices, the requirements will vary from recipe
to recipe. To complete all of the recipes successfully, you will need your own hosted server and DNS
domain as well as iOS, Android, or Windows mobile devices and SDKs.
Module 3:
â€¢ Meteor version 1.1.0.2 or above
â€¢ A Unix system such as a Mac or Linux computer


$
If you are a web developer who is familiar with Meteor and has basic knowledge of web development,
and you now want to explore new paradigms of single-page, real-time applications, this course is
perfectly suited for you.


Feedback from our readers is always welcome. Let us know what you think about this courseâ€”what you
liked or disliked. Reader feedback is important for us as it helps us develop titles that you will really get
the most out of.
To send us general feedback, simply e-mail 	

, and mention the courseâ€™s
title in the subject of your message.
If there is a topic that you have expertise in and you are interested in either writing or contributing to a
book, see our author guide at www.packtpub.com/authors.

		
Now that you are the proud owner of a Packt course, we have a number of things to help you to get the
most from your purchase.
 
$&

You can download the example code files for this course from your account at
http://www.packtpub.com. If you purchased this course elsewhere, you can visit
http://www.packtpub.com/support and register to have the files e-mailed directly to you.
You can download the code files by following these steps:
1. Log in or register to our website using your e-mail address and password.
2. Hover the mouse pointer on the '##( tab at the top.
3. Click on  
)!.
4. Enter the name of the course in the  box.
5. Select the course for which youâ€™re looking to download the code files.
6. Choose from the drop-down menu where you purchased this course from.
7. Click on  
.
You can also download the code files by clicking on the 
 button on the courseâ€™s webpage at
the Packt Publishing website. This page can be accessed by entering the courseâ€™s name in the 
box. Please note that you need to be logged in to your Packt account.
Once the file is downloaded, please make sure that you unzip or extract the folder using the latest
version of:
â€¢ WinRAR / 7-Zip for Windows
â€¢ Zipeg / iZip / UnRarX for Mac
â€¢ 7-Zip / PeaZip for Linux
The code bundle for the course is also hosted on GitHub at https://github.com/ PacktPublishing/Meteor-
Full-Stack-Web-Application-Development. We also have other code bundles from our rich catalog of
books, videos, and courses available at https://github.com/PacktPublishing/. Check them out!
!
Although we have taken every care to ensure the accuracy of our content, mistakes do happen. If you
find a mistake in one of our coursesâ€”maybe a mistake in the text or the codeâ€”we would be grateful if
you could report this to us. By doing so, you can save other readers from frustration and help us improve
subsequent versions of this course. If you find any errata, please report them by visiting
http://www.packtpub.com/submit-errata, selecting your course, clicking on the !	
 link, and entering the details of your errata. Once your errata are verified, your submission will be
accepted and the errata will be uploaded to our website or added to any list of existing errata under the
Errata section of that title.

To view the previously submitted errata, go to https://www.packtpub.com/books/content/support and
enter the name of the course in the search field. The required information will appear under the !
section.
#%
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At Packt, we take
the protection of our copyright and licenses very seriously. If you come across any illegal copies of our
works in any form on the Internet, please provide us with the location address or website name
immediately so that we can pursue a remedy.
Please contact us at 
	

 with a link to the suspected pirated material.
We appreciate your help in protecting our authors and our ability to bring you valuable content.-
*	
If you have a problem with any aspect of this course, you can contact us at
	

, and we will do our best to address the problem.

# +, 	
-
		
	
	





	

	

 -, "$ 
Welcome to this book on Meteor. Meteor is an exciting new JavaScript framework, and we will soon see
how easy it is to achieve real and impressive results with less code.
In this chapter, we will learn what the requirements are and what additional tools we need to get started.
We will see how simple it is to get our first Meteor application running and what a good basic folder
structure for a Meteor app could be. We will also learn about Meteor's automatic build process and its
specific way of loading files.
We will also see how to add packages using Meteors official packaging system. At the end of the
chapter, we will take a short look at Meteor's command-line tool and some of its functions.
To bring it together, we will cover the following topics:
â€¢ The full-stack framework of Meteor
â€¢ Meteor's requirements
â€¢ Installing Meteor
â€¢ Adding basic packages
â€¢ Meteor's folder conventions and loading order
â€¢ Meteor's command-line tool
	

 
Meteor is not just a JavaScript library such as jQuery or AngularJS. It's a full-stack solution that contain
frontend libraries, a Node.js-based server, and a command-line tool. All this together lets us write large-
scale web applications in JavaScript, on both the server and client, using a consistent API.
Even with Meteor being quite young, already a few companies such as https://lookback.io,
https://respond.ly, and https://madeye.io use Meteor in their production environment.
If you want to see for yourself what's made with Meteor, take a look at http://madewith.meteor.com.
Meteor makes it easy for us to build web applications quickly and takes care of the boring processes
such as file linking, minifying, and concatenating of files.
Here are a few highlights of what is possible with Meteor:
â€¢ We can build complex web applications amazingly fast using templates that automatically
update themselves when data changes
â€¢ We can push new code to all clients on the fly while they are using our app
â€¢ Meteor core packages come with a complete account solution, allowing a seamless integration
of Facebook, Twitter, and more
â€¢ Data will automatically be synced across clients, keeping every client in the same state in almost
real time
â€¢ Latency compensation will make our interface appear super fast while the server response
happens in the background.

With Meteor, we never have to link files with the 
 tags in HTML. Meteor's command-line
tool automatically collects JavaScript or CSS files in our application's folder and links them in the
 file, which is served to clients on initial page load. This makes structuring our code in
separate files as easy as creating them.
Meteor's command-line tool also watches all files inside our application's folder for changes and
rebuilds them on the fly when they change.
Additionally, it starts a Meteor server that serves the app's files to the clients. When a file changes,
Meteor reloads the site of every client while preserving its state. This is called a 
.
In production, the build process also concatenates and minifies our CSS and JavaScript files.
By simply adding the  and  core packages, we can even write all styles in LESS and code
in CoffeeScript with no extra effort.
The command-line tool is also the tool for deploying and bundling our app so that we can run it on a
remote server.
Sounds awesome? Let's take a look at what's needed to use Meteor.

./	
Meteor is not just a JavaScript framework and server. As we saw earlier, it is also a command-line tool
that has a whole build process for us in place.
Currently, the operating systems that are officially supported are as follows:
â€¢ Mac OS X 10.6 and above
â€¢ Linux x86 and x86_64 systems
â€¢ Windows
0
The Windows installer is still in development at the time of writing this book. Please follow the
wiki page at https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows.
This book and all examples use 
)*+.
'$.


We will also need Google Chrome or Firefox with the Firebug add-on installed to follow examples that
require a console. The examples, screenshots, and explanations in this book will use Google Chrome's
developer tools.
'$""1	
I highly recommend using "1	 when working with web projects, such as the one we will work on in
this book. Git and GitHub help us to back up our progress and let us always go back to previous states
while seeing what we've changed.
Git is a version control system, which was created in 2005 by the inventor of Linux, Linus Torvalds.
With Git, we can 
 any state of our code and later go back to that exact state. It also allows
multiple developers to work on the same code base and merge their results together in an automated
process. If conflicts appear in this process, the merging developer is able to resolve those 

by removing the unwanted lines of code.
I also recommend registering an account at http://github.com, as this is the easiest way to browse our
code history. They have an easy to use interface as well as a great Windows and Mac app.
To follow the code examples in this book, you can download all code examples for each chapter from
the book's web page at https://www.packtpub.com/books/content/support/17713.
Additionally, you will be able to clone the book's code from http://github.com/frozeman/book-building-
single-page-web-apps-with-meteor. Every tag in this repository equals to one chapter of the book and
the commit history will help you to see the changes, which were made in each chapter.

+

$
Installing Meteor is as easy as running the following command in the terminal:
	



That's it! This will install the Meteor command-line tool (, the Meteor server, MongoDB
database, and the Meteor core packages (libraries).
0
All command-line examples are run and tested on Mac OS X and can differ on Linux or Windows
systems.
+

$"
To install Git, I recommend installing the GitHub app from https://mac.github.com or
https://windows.github.com. We can then simply go inside the app to # and click on the
+

2
 button inside the  tab.
If we want to install Git manually and set it up via the command line, we can download the Git installer
from http://git-scm.com and follow this great guide at https://help.github.com/articles/set-up-git.
Now, we can check whether everything was installed successfully by opening the terminal and running
the following command:


 
$&

You can download the example code files for all Packt books you have purchased from your account at
http://www.packtpub.com. If you purchased this book elsewhere, you can visit
http://www.packtpub.com/support and register to have the files e-mailed directly to you.
This should return us a list of Git options. If we get , we need to check
whether the  binary was correctly added to our  !" environment variable.
If everything is fine, we are ready to create our first Meteor app.

$	
To create our first app, we open the terminal, go to the folder where we want to create our new project,
and enter the following commands:
	

Meteor will now create a folder named ##. The HTML, CSS, and JavaScript files that
Meteor created for us inside this folder are already a fully working Meteor app. To see it in action, run
the following commands:


Meteor will now start a local server for us on port $%%%. Now, we can open our web browser and
navigate to 
&&$%%%. We will see the app running.
This app doesn't do much, except showing a simple reactive example. If you click on the 

button, it will increase the counter:
For later examples, we will need Google Chrome's developer tools. To open the console, we can press
#
 +  +  on Mac OS X or click on the menu button on the upper-right corner of Chrome,
select 
3 and then 

.
The 

 allow us to inspect the DOM and CSS of our website, as well as having a console
where we can interact with our website's JavaScript.

$$
		
For this book, we will build our own app from scratch. This also means we have to set up a sustainable
folder structure, which helps us to keep our code organized.
With Meteor, we are very flexible concerning our folder structure. This means we can put our files
wherever we want, as long as they are inside the app's folder. Meteor treats specific folders differently,
allowing us to expose files only on the client, the server, or both. We will take a look at those specific
folders later.
But, first let's get our hands dirty by deleting all preadd files in our newly created application folder and
creating the following folder structure:
###
#'
#
#
#

#%


To fully focus on the Meteor code but still have a pretty-looking blog, I strongly recommend to
download the code that accompanies this chapter from the book's web page at http://packtpub.com/
books/content/support/17713. They will contain already two drop-in-place style files
(
 and ), which will let your example blog look pretty in the
upcoming chapters.
You can also download these files directly from GitHub at https://github.com/frozeman/book-building-
single-page-web-apps-with-meteor/tree/chapter1/my-meteor-blog/client/styles and copy them to the #
#&& folder manually.
Next, we need to add some basic packages so that we can start building our app.

$$
Packages in Meteor are libraries that can be added to our projects. The nice thing about Meteor packages
is that they are self-contained units, which run out of the box. They mostly add either some templating
functionality or provide extra objects in the global namespace of our project.
Packages can also add features to Meteor's build process such as the  package, which lets us
write our app's style files with the  preprocessor syntax.
For our blog, we will need two packages at first:
: This is a Meteor core package and will compile our style files on the fly to CSS
(#)#: This is a third-party library for date parsing and formatting
$$
To add the  package, we can simply open the terminal, go to our projects folder, and enter the
following command:


Now, we are able to use any * files in our project, and Meteor will automatically compile them
in its build process for us.
$%$
To add a third-party package, we can simply search for packages on either https://atmospherejs.com,
which is the frontend for Meteors packaging system, or use the command-line tool, 

.
For our blog, we will need the (#)# package that allows us later to
simply manipulate and format dates.
Packages are namespaced with the authors name followed by a colon.
To add the  package, we simply enter the following command:

After the process is done, and we restarted our app using , we will have the  object
available in our app global namespace and we can make use of it in the upcoming chapters.
Should we ever want to add only specific version of a package, we can use the following command:

 ! 

If you want a version in the 1.0.0 (but not the 2.0.0) range use the following command:

"##
To update only packages we can simply run the following command:
	$	%

Additionally, we can update only a specific package using the following command:
	
That's it! Now we are fully ready to start creating our first templates. You can jump right into the next
chapter, but make sure you come back to read on, as we will now talk about Meteor's build process in
more detail.

4

To understand Meteor's build process and its folder conventions, we need to take a quick look at variable
scopes.
Meteor wraps every code files in an anonymous function before serving it. Therefore, declaring a
variable with the ' keyword will make it only available in that file's scope, which means these
variables can't be accessed in any other file of your app. However, when we declare a variable without
this keyword, we make it a globally available variable, which means it can be accessed from any file in
our app. To understand this, we can take a look at the following example:
&&!)
'+,-../
0,-../
After Meteor's build process, the preceding lines of code will be as follows:
112
'+,-../
0,-../
31/
This way, the variable created with  is a local variable of the anonymous function, while the other
one can be accessed globally, as it could be created somewhere else before.

.

$
Though Meteor doesn't impose restrictions concerning our folder names or structure, there are naming
conventions that help Meteor's build process to determine the order in which the files need to be loaded.
The following table describes the folder and their specific loading order:


2

This is loaded only on the client.
&


This will not be wrapped in an anonymous function. This is made for libraries that
declare top-level variables with '. Additionally, files in this folder will be
loaded before other files on the client.
'
Files in this folder will only be served on the server.


This folder can contain assets used on the client, such as images, ',
or . Folders and files inside the public folder are available on the
client from root, &.

'
This folder can contain assets that will only be available on the server. These files
are available through   API.

Files and subfolders inside a  folder will be loaded before other files, where
 folders in deeper folders will be loaded before the files in  folders of their
parent folders.

Files inside this folder won't be touched or loaded by Meteor at all.


When we want to use local packages, we can add them to this folder and Meteor
will use those packages, even if one with the same name exists in Meteor's official
package system. (However, we still have to add the packages using 
)
The following table describes filenames that have created a specific loading order:


 2
* Files with this name are loaded last, whereas files in deeper folders are loaded before the
files of their parent folders
**
Files outside of the former mentioned folders in this table are loaded on both the client and
server
So, we see that Meteor gathers all files except the ones inside 
, 
', and .
Additionally, files are always loaded in the alphabetical order, and files in subfolders are loaded before
the ones in parent folders.
If we have files outside the  or ' folder and want to determine where the code should be
executed, we can use the following variables:
1452
&&6
3
146'2
&&6'
3
We also see that code inside a * file is loaded last. To make sure a specific code only loads when
all files are loaded and the DOM on the client is ready, we can use the Meteor's 
1 function:
4
112
&*
!)7849
')'

*&
3/
2$
To load files from inside the 
' folder on the server, we can use the   API as follows:
 !19:5;/
&&
 <19:5;
Here,  is a file path relative to the 
' folder, for example, '&
..

If we provide a callback function as the second parameter, the  1 method will run
asynchronously. So, we have two ways of retrieving the content of an assets file:
&&6
'7- !1../
&&8
 !1..9192
&&7)
&&=
>?++9))
3/
0
If the first example returns an error, our current server code will fail. In the second example, our code
will still work, as the error is contained in the  parameter.
Now that we understand Meteor's basic folder structure, let's take a brief look at the Meteor's command-
line tool.

.

Now that we know already about Meteor's build process and folder structure, we will take a closer look
at what we can do with the command-line tool that Meteor provides.
As we saw when using the  command, we need to be inside a Meteor project so that all actions
will be performed on this project. For example, when we run , we add a package to
the project where we are currently in.
'$
If Meteor releases a new version, we can simply update our project by running the following command:
	
If we want to go back to a previous version, we can do this by running the following command:
	$
#&"
This would set our project back to release version 0.9.1.

%$
Deploying our Meteor app to a public server is as easy as running the following command:
			
This would ask us to register a Meteor developer account and deploy our app at http://my-app-
name.meteor.com.
For a full introduction on how to deploy a Meteor app, refer to Chapter 10, ',#.
In the Appendix, you can find a full list of Meteor commands and their explanations.

	%
In this chapter, we learned what Meteor requires to run, how to create a Meteor application, and how the
build process works.
We understand that Meteor's folder structure is rather flexible, but that there are special folders such as
the , ', and  folder, which are loaded in different places and order. We also saw how
to add packages and how to use the Meteor command-line tool.
If you want to dig deeper into what we've learned so far, take a look at the following parts of the Meteor
documentation:
â€¢ https://www.meteor.com/projects
â€¢ https://www.meteor.com/tool
â€¢ https://docs.meteor.com/#/full/whatismeteor
â€¢ https://docs.meteor.com/#/full/structuringyourapp
â€¢ https://docs.meteor.com/#/full/usingpackages
â€¢ https://docs.meteor.com/#/full/assets
â€¢ https://docs.meteor.com/#/full/commandline
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter1.
Now that we've set up our project's basic folder structure, we are ready to start with the fun part of
Meteorâ€”templates.

 5, 6	
$12

After we successfully installed Meteor and set up our folder structure, we can now start building the
basic templates for our blog.
In this chapter, we will learn how templates are built. We will see how to display data and how some
parts can be altered using helper functions. We will take a look on adding events, using conditions, and
understanding data contexts, all in templates.
The following is an overview of what will be covered in this chapter:
â€¢ The basic template structure
â€¢ Displaying data
â€¢ Writing template helper functions
â€¢ Using conditions in templates
â€¢ Data contexts and how those can be set
â€¢ Nesting templates and data context inheritance
â€¢ Adding events
â€¢ Building block helpers
0
If you jump right into this chapter without setting up the folder structure in the Chapter 1,
!



	

, download the previous chapter's code examples from either the
book's web page at https://www.packtpub.com/books/content/support/17713 or from the GitHub
repository at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter1.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
$

Normally when we build websites, we build the complete HTML on the server side. This was quite
straightforward; every page is built on the server, then it is sent to the client, and at last JavaScript added
some additional animation or dynamic behavior to it.
This is not so in single-page apps, where every page needs to be already in the client's browser so that it
can be shown at will. Meteor solves this problem by providing templates that exists in JavaScript and
can be placed in the DOM at some point. These templates can have nested templates, allowing for an
easy way to reuse and structure an app's HTML layout.
Since Meteor is so flexible in terms of folder and file structure, any * page can contain a
template and will be parsed during Meteor's build process. This allows us to put all templates in the #
#&&
 folder, which we created in the Chapter 1, !




	

. This folder structure is chosen as it helps us organizing templates when our app grows.

Meteor's template engine is called , which is a derivative of the handlebars template engine.
Spacebars is built on top of 6
7, which is Meteor's reactive DOM update engine.
0
Blaze can generate reactive HTML directly using its API, though it's more convenient to use Meteor's
Spacebars or a third-party template language built on top of Blaze such as Jade for Meteor.
For more detail about Blaze, visit https://docs.meteor.com/#/full/blaze and https://github.com/
mquandalle/meteor-jade.
What makes Spacebars so exciting is its simplicity and reactivity. Reactive templates mean that some
parts of the template can automatically change when the underlying data changes. There is no need of
manual DOM manipulation and inconsistent interfaces belong to the past. To get a better understanding
of Meteor, we will start with the basic HTML files for our app:
1. Let's create an  file in our ##& folder with the
following lines of code:

44<&
&

"@
&
0
Note that our  file doesn't contain the & tags, as Meteor
gathers all  and  tags in any file and builds up its own  file,
which will be delivered to the user. Actually, we can also name this file 

.
2. Next, we run our Meteor app from the command line by typing the following command:


This will start a Meteor server with our app running.
3. That's it! We can open our browser, navigate to 
&&$%%%, and we should
see 1


.
What happens here is that Meteor will look through all the HTML files available in our app's folder,
concatenating the content of all  and  tags, which it finds and serve them to the clients
as its index file.
If we take a look at the source code of our app, we will see that the  tag is empty. This is
because Meteor sees the content of the  tag as its own templates, which will be injected with its
corresponding JavaScript template when the DOM is loaded.

0
To see the source code, don't use the Developer Tools' 

, as this will show us the source
code after the JavaScript is executed. Right-click on the website instead and select 4 $	 in
Chrome.
We will also see that Meteor already linked all kinds of JavaScript files in our  tag. These are
Meteor's core packages and our add third-party packages. In production, these files will be concatenated
into one. To see this in action, go to the terminal, quit our running Meteor server using &
 + &, and run
the following command:
	
If we now take a look at the source code, we will see that there is only one cryptic-looking JavaScript
file linked.
For the next steps, it is better to go back to our developer mode by simply quitting Meteor and running
the  command again, since this will reload the app faster when file changes occur.

6	
$

Now, let's add the basic templates to our blog by creating a file called  in the #
#&&
 folder. This template will serve as the wrapper template for
our blog layout. To build the basic templates, perform the following steps:
1. Add the following lines of code to , which we just created:

-AA

'-AA
B446 

&B


-A&A"&
&

-A&A &
&
&
&'
&
'-AA

&
&'
&

2. Next, we will create the home page template, which will later list all our blogs posts. In the
same templates folder as , we will create a file named  with the
following lines of code:

-AA
22C)33
CC@<
"=.')
D'6

22&)33
&

3. The next file will be a simple 	 page and we save it as  with the following
code snippet:

-AA
22C)33
CC 

+
9
9


?
'9
****


+:;:B;
:B;
&&
22&)33
&

As you can see, we used a 22C)33 block helper to wrap our texts. The curly braces
are handlebars syntax, which Blaze uses to bring logic to the HTML. The
22C)3322&)33 block will transform all markdown syntax inside
into HTML when the template gets rendered.
0
The markdown text cannot be indented as we do with the HTML tags because the markdown
syntax interprets indentation as code.
4. To be able to use 22C)33 block helper, we need to first add the ) core
package to our app. To do this, we quit our running app in the terminal using &
 + & and type
the following command:
%
5. Now we can run the  command again to start our server.
However, when we now go to our browser, we will still see 1


. So how can we make now our
templates visible?

$


To show the home template in the app, we need to open , which we created earlier, and
perform the following steps:
1. We replace "@ with the following template inclusion helper:
2233
2. If we go back to our browser now, we see that the text is gone and the  template, which
we created earlier, has appeared with its header and menu.
3. To complete the page, we need to show the  template in the  template. We do this
by simply adding another template inclusion helper to the  section of the 
template in our  file, as follows:

2233
&
4. If we go back to the browser, we should see the following screenshot:
If we would now switch 2233 for 2233, we would see our  template instead.


%$ 


Each template can have functions, which are called 
 helpers, and they can be used inside the
template and child templates.
In addition to our custom helper functions, there are three callback functions that are called when the
template is created, rendered, and destroyed. To display data with template helpers, perform the
following steps:
1. To see the three callback functions in action, let's create a file called ( and save it to
our ##&&
& folder with the following code snippet:
!
-12
1.5
./
3/
!
-12
1.E
./
3/
!
-12
1.7
./
3/
If we now open the console of our browser, we will see the first two callbacks are being fired.
The last one will only fire if we dynamically remove the template.
2. To display data in the  template, we will create a helper function that will return a simple
string as follows:
!

12

"
12
.!
)
"!4+&./
3
3/
3. Now if we go to our  file, add the 22
"
33 helper after the
22)33 block helper, and save the file, we will see the string appearing in our
browser, but we will notice that the HTML is escaped.
4. To make Meteor render the HTML correctly, we can simply replace the double curly braces
with triple curly braces, as shown in the following line of code, and Blaze won't let the HTML
escape:
222
"
333

0
Note that in most of our templates helper, we -
 use triple stache 222333 as this
opens the door for XSS and other attacks. Only use it if the HTML returned is safe to be
rendered.
5. Additionally, we can return unescaped HTML using double curly braces, but we need to return
the string passed through the 6
<66 function, as shown in the following
example:
!

12

"
12
)6
661.!

)"!4+&./
3
3/

$&

Now that we've seen how we can display data using a helper, let's see how we can set the whole data
context of a template:
1. For the next examples, we will create a file called 
 in our ##
&&
 folder and add the following code snippet:

-AF
A

22!33&

&

2. Now that we have our F
 template, we can add it to our  template by
passing some data as follows:
22F
!-A=)

.

9A33
This will show the text in the F
 template because we were displaying it
using 22!33.

Remember that filenames don't really matter as Meteor is collecting and concatenating them
anyway; however, the template name matters since we use this to reference templates.
Setting the context in HTML is not very dynamic, as it is hardcoded. To be able to dynamically
change the context, it is better to set it using a 
 helper function.
3. To do this, we must first add the helper to our  templates helpers, which returns the data
context, as follows:
!

12
&&

5"
12
2
!.!)



.9
>2
.!A>A.
3
3/
3
3/
4. Now we can add this helper as the data context to our F
 template inclusion
helper, as follows:
22F
5"
33

5. Also, to show the nested data object we return, we can use Blaze dot syntax in the
F
 template by adding the following line of code to the template:

22>33&

This will now display both the ! and the >, which was returned by our
helper functions.
'$889 ::


Another way of setting the data context is by using the 22C)33 block helper. The following code
snippet has the same result as the former inclusion helper that utilizes the helper function:
22C)5"
33
22F
33
22&)33
We would even get the same results in the browser when we don't use a subtemplate and just add the
content of the F
 template inside the 22C)33 block helper, as follows:
22C)5"
33

22!33&


22>33&

22&)33

;;






In Meteor,  in template helpers is used differently in template callbacks such as 1,
1, and 1.
As already mentioned, templates have three callback functions that are fired in different states of the
template:
â€¢ : This fires when the template gets initiated but is not yet in the DOM
â€¢ : This fires when the template and all its sub templates are attached to the DOM
â€¢ : This fires when the template is removed from the DOM and before the instance
of the template gets destroyed
In these callback functions,  refers to the current template instance. The instance object can access
the templates DOM and comes with the following methods:
â€¢ 16: This method finds all elements that match
6 and returns a jQuery object from those elements.
â€¢  16: This method finds all elements that match
6, but returns the plain DOM elements.
â€¢ 16: This method finds the first element that matches
6 and returns a plain DOM element.
â€¢ >: This object contains the first element in the template.
â€¢ >: This object contains the last element in the template.
â€¢ : This object contains the templates data context
â€¢ 1G: A reactive !1 function that is stopped
when the template instance is destroyed.
â€¢ '): This object contains the <H,) instance for this template. <H,)
are the building blocks of reactive templates.
Inside helper functions,  refers only to the current data context.
To make these different behaviors visible, we will take a look at some examples:
â€¢ When we want to access the DOM of a template, we must do it in the rendered callback because
only at this point, the template elements will be in the DOM. To see it in action, we edit our
( file as follows:
!
-12
1.E
./

'(	()*+,-(.
	/0(1
3/

This will replace the first 
 tag that is created by the 22C)33 block helper, which we
put there before, with the string we set. Now when we check the browser, we will see that the
first 
 tag that contained our blog's introduction text has been replaced.
â€¢ For the next example, we need to create an additional template JavaScript file for our
F
 template. To do this, we create a new file called 
( in our

 folder and save it using the following code snippet:
!
F
-12
1.E5F
.9/
3/
!
F

12
512
1.5+"
.9/
3
3/
This will add the rendered callback as well as a helper called 5 to our
F
 template helpers. To make this helper run, we also need to add this helper
to our F
 template as follows:

22533&

When we now go back to the console of our browser, we see that the data context object has been
returned for all the  callbacks and helpers from our rendered !

template. We can also see that helpers will run before the rendered callback.
0
In case you need access to the templates instance from inside a template helper, you can use
!
1 to get it.
Now let's use make our template interactive using events.

$
To make our template a bit more dynamic, we will add a simple event, which will reactively rerun the
5 helper we created earlier.
First, however, we need to add a button to our F
 template:
0&
To catch the click event, open 
( and add the following ' function:
!
F
'12
..19
2
61.>.941%9II/
3
3/
This will set a session variable called > to a random number.
0
We will talk in depth about sessions in the next chapter. For now, we only need to know that when a
session variable changes, all functions that get that session variable using
61.,. will run again.
To see this in action, we will add a 61 call to the 5 helper, and return the
former set's random number as follows:
!
F

12
512
1.5+"
.9/
2

'(3()1
3
3/
If we go to the browser, we will see the "	 button. When we click on it, we see
a random number appearing just above the button.
0
When we use the !
 template multiple times in our  template, we will see
that each instance of that template helper will display the same random number. This is because the
session object will rerun all its dependencies, all of which are instances of the "
 helper.
Now that we have covered template helpers, let's create a custom block helper.

6


Block helpers are templates that wrap the content of the block. They can be used to show content in
different ways depending on conditions, or they can be used to add extra functionality to the blocks
content, for example, some JavaScript calculation on its DOM elements.
In the following example, we will build a simple block helper that will show content based on a Boolean
condition.
To do this, we will to add the following code snippet at the end of our 
 file:

-A"
F
A
'
B4<"
&B
22C33

522!
<33&

2233

F22!
<33&

22&33
&'
&

The 22!
<33 is a predefined placeholder for the block's content. The
same applies for 22!
<33.
When  (in this example, we use the template's context as a simple Boolean) is , it will show
the given !
<. Otherwise, it will show the !
<
content.
To see how we can use the recently created template as a block helper, take a look at the following
example, which we can add to  template:
22C"
F
33

65&

2233

6@&

22&"
F
33
Now we should see the following screenshot:

When we now change , which we pass to 22C"
F
33, to , we
should see the content after the 2233 instead.
We can also use a helper function to replace the Boolean value, so that we can switch the block helper
dynamically. Additionally, we can pass key-value arguments and access them by their key inside the
block helper template, as shown in the following code example:
22C"
F
,-33

22&"
F
33
We can also access the given argument by its name in the block template as follows:

-A"
F
A
'
B4<"
&B
22C 433

22&33
&'
&


0
Note that the data context for the block's content will be the one from the template in which the block
appears, not the one of the block helper template itself.
Block helpers are a powerful tool because they allow us to write self-contained components that, when
packed into a package, can be used as a drop-in-place functionality by others. This feature has the
potential to allow for a vibrant marketplace, like the marketplace we see in jQuery plugins.

2$
Now that we have walked through all ways of using helpers and data, I want to introduce a block helper
named 22C33, which we will probably find the most useful.
If we go through all the examples completed up to now, we can see that it is better to delete all the
examples of data context from our  template, the 
 file, and its 
(
JavaScript file so that we can continue to build our blog cleanly.
The next step is to add a list of blog entries to our home page. For this, we need to create a template for a
post preview. This can be done by performing the following steps:
1. We create a file called 
=+ in our ##&&

 folder and save it with the following code snippet:

-A
=+A
'-A
+=A
J-ACA2233&&J

22
33&

'-AA
2233
&'
&'
&

This template will be used for each post we display in the home page.
2. To make it appear, we need to add a 22C33 helper to the  template, as follows:
22C
+33
22
=+33
22&33
When the 
+ helper, which we pass to the 22C33 block helper, returns an
array, the content of 22C33 will be repeated for each item in the array, setting the array
item as the data context.
3. To see this in action, we add the 
+ helper in our ( file to the template
helpers, as follows:
!

12
&&


+12
:
2
.46.9

.<9

.9
.G,.9

511$9..1
39
2
.4G.9

.+
9

.9
.G,.9
511K9..1
3
;/
3
3/
4. As we can see, we return an array where each item is an object containing our post's data
context. For 5, we use the  function of our previously added third-party
package. This will generate dummy timestamps of a few days in the past. If we now go to our
browser, we will see the two posts listed, as shown in the following screenshot:

5. To display 5 from our post item in the correct format, we need to create a helper
function to format the timestamp. However, because we want to use this helper in other
templates later, we need to make it a global helper that can be accessed by any template. To do
this, we create a file named 
#
( and save it to our ##
& folder, as it doesn't belonging to any specific template.
6. To register a global helper, we can use Meteor's !
"
 function:
!
"
1.!.919
2
)1
2
.>).
1>)1/
..
1=6861/

11.++++./
3
3/
7. Now, we only have to add the helper to our 
=+ template by replacing the content of
the footer with the following code snippet:
'-AA
5677+86
6996:;

77+86369977995:
&'
Now, if we save both the files and go back to our browser, we will see a relative date added to our blog
post's footer. This works because we pass the time and a type string to the helper, as follows:
22!5A>)A33
The helper then returns the formatted date using a  function.
With this global helper, we can now format any Unix timestamp, in any template to relative times, ISO
time strings, and a standard date format (using the LLLL format, which converts to Thursday, September
4, 1986, 8:30 P.M.).
Now that we have already used the 22C)33 and 22C33 block helpers, let's take a look at the
other default helpers and syntax that Blaze uses.

%&
To wrap it all up, lets summarize the Spacebars syntax:
1


22
33
The template helper can be a property from the template's data context
or a template helper function. If a helper function and a property with
the same name exist, the template helper will use the helper function
instead.
22!
33
The inclusion helper is for a template and always expects a template
object or null.
22!


-
>
:-5;33
With the 22!
33 helper, you can render
a template dynamically by providing a template helper returning a
template name for the template parameter. When the helper would
rerun and return a different template name, it will replace the template
on this position with the new one.
22C<"
33
...
22&<"
33
A block helper that contains both HTML and the Spacebars syntax.
By default, Spacebars comes with the following four default block helpers:
â€¢ 22C3322&33
â€¢ 22C3322&33
â€¢ 22C)3322&)33
â€¢ 22C3322&33
The 22C33 block helper allows us to create simple conditions, as follows:
22C"
@E <33
B6)&B
2233
=)
22&33
The 22C33 block helper works the same as 22C33, but with swapped logic.

The 22C)33 block, as seen earlier, will set a new data context to its content and containing
templates, and the 22C33 block helper will render multiple times, setting a different data context
for each iteration.
$&
To complete our journey through the Spacebars syntax, let's take a closer look at the template helper
syntax that we used to display data. As we've already seen, we can display data using the double curly
braces syntax, as follows:
22733
Inside this helper, we can access the properties of an object using the dot syntax:
228(633
We can also access a parent data context using a path-like syntax:
22&!

33
Additionally, we can move more than just one context up:
22&&
33
This feature allows us to be very flexible about the data context.
0
If we want to do the same from inside a template helper, we can use the Template API
!

71), where  is the number of steps up to access the data context of parent
templates.
!

71% is the same as !
71, or  if we are in a
template helper.
#$

Passing data to helpers can be done in two different ways. We can pass arguments to a helper as follows:
22"
A 6A5
33
Then, we can access it in the helper as follows:
!
!

12
"
1698(2
&& )
&&6-.6.
&&8(-5


3
3/
Besides this, we can pass data in the form of key-values:
22"
6-A 6A8(-7
33
This time, however, we need to access them as follows:
!
!

12
"
12
&& )
&&6-.6.
&&8(-7

3
3/
Be aware that block and inclusion helpers act differently because they always expect objects or key-
values as arguments:
22!
6-A=)'
A33
&&8
22!
(@733
If we want to pass only a single variable or value to an inclusion or block helper, Meteor would objectify
the argument, as we can see with the following code snippet:
22C<A6A33

22&<33
We would then need to typecast the passed argument if we want to use it in a helper function as follows:
!
<
12
6@!612
&&?619
/
3
3/
Beisdes, we can also simply display the string in our block helper template using
22!
<33 as follows:

-A<A
B2233&B

22!
<33
&

We can also pass another template helper as an argument to an inclusion or block helper, as shown in the
following example:
22!
"
@E 8(A)

A$%%33
Though passing data to template helpers and inclusion/block helpers are slightly different, arguments
can be quite flexible when using helpers to generate them.

	%
Reactive templates are one of the most impressive features of Meteor, and once we get used to them, we
probably won't look back to manual DOM manipulation anymore.
After reading this chapter, we should know how to write and use templates in Meteor. We should also
understand its basic syntax and how to add templates.
We saw how to access and set data in templates and how to use helpers. We learned about different types
of helpers, such as inclusion helpers and block helpers. We also built our own custom block helpers and
used Meteor's default helpers.
We learned that templates have three different callbacks, for when the template gets created, rendered,
and destroyed.
We learned how to pass data to helpers, and how this differs in normal helpers and block helpers.
To dig deeper, take a look at the following documentations:
â€¢ https://docs.meteor.com/#/full/templates_api
â€¢ https://www.meteor.com/blaze
â€¢ https://docs.meteor.com/#/full/blaze
â€¢ https://atmospherejs.com/meteor/spacebars
â€¢ http://momentjs.com
You can find this chapter's code examples either at https://www.packtpub.com/books/content/support/
17713 or on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter2.
With all this new knowledge about templates, we are ready to add data to our database and see how we
can display it in our home page.

 <, $1
$



In the previous chapter, we learned how to build templates and display data in them. We built the basic
layout of our app and listed some post examples on the front page.
In this chapter, we will add post examples persistently to our database on the server. We will learn how
we can access this data later on the client and how Meteor syncs data between clients and the server.
In this chapter, we'll cover the following topics:
â€¢ Storing of data in Meteor
â€¢ Creating collections
â€¢ Adding data to a collection
â€¢ Querying data from a collection
â€¢ Updating data in a collection
â€¢ What "database everywhere" means
â€¢ The difference between the server's and the client's databases
0
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713 or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter2.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.

Meteor currently uses MongoDB by default to store data on the server, although there are drivers
planned for use with relational databases too.
0
If you are adventurous, you can try one of the community-built SQL drivers, such as the
 package from https://atmospherejs.com/numtel/mysql.
MongoDB is a NoSQL database. This means it is based on a flat document structure instead of a
relational table structure. Its document approach makes it ideal for JavaScript as documents are written
in BJSON, which is very similar to the JSON format.
Meteor has a 
	 approach, which means that we have the same API to query the
database on the client as well as on the server. Yet, when we query the database on the client, we are
only able to access the data that we  to a client.

MongoDB uses a data structure called 

, which is the equivalent of a table in a SQL database.
Collections contain documents, where each document has its own unique ID. These documents are
JSON-like structures and can contain properties with values, even with multiple dimensions, as follows:
2
ALAA@K<H
<'MNEK(@A9
A>AA47>A9
A
ABJ$MOP9
A>
A2
A8AA@A
3
3
These collections are used to store data in the server's MongoDB as well as the client-side 
collection, which is an in-memory database mimicking the behavior of the real MongoDB.
0
We'll discuss more about  at the end of this chapter.
The MongoDB API allows us to use a simple JSON-based query language to get documents from a
collection. We can pass additional options to only ask for  or 
 the returned documents.
These are very powerful features, especially on the client side, to display data in various ways.

$	


To see all this in action, let's get right on it by creating our first collection.
We create a file called ( inside our ## folder. We need to create it
in the root folder so that it will be available on both the client and the server. Now let's add the following
line of code to the ( file:
-)451.
./
This will make the  variable globally available, as we haven't used the ' keyword, which
would restrict it to the scope of this file.
45 is the API used to query the database and it comes with the following basic
methods:
â€¢ : This method is used to insert documents into the database
â€¢ 
: This method is used to update documents or parts of them
â€¢ 
: This method is used to insert or update documents or parts of them
â€¢ ': This method is used to delete documents from the database
â€¢ : This method is used to query the database for documents
â€¢ 8: This method is used to return only the first matched document

$&

To query the database for posts, we need to add some post examples. This has to be done on the server,
as we want to add them persistently. To add an example post, perform the following steps:
1. We create a file called ( inside our ##&' folder. Inside this
file, we will use the 4
1 function to execute the code on the start of the
server.
2. We then add the post example, but only when the collection is empty. So to prevent this, we add
them every time we restart the server, as follows:
4
112
1.6'./
&&C67# 


111---%2
1. 
./
'-:
2
.4G.9
.##.9

.+
.9
.+
.9
511K9..19
.D7.
39
2
.46.9
.##.9

.<
.9
.+
.9
511O9..19
.D7.
39
2
.4!.9
.##.9

.7
.9
.+
.9
511$9..19
.D7.
39
2
.4G.9

.##.9

.6
.9
.+
.9
511J9..19
.D7.
39
2
.4G.9
.##.9

.Q
.9
.+
.9
511B9..19
.D7.
3
;/
&&)
L191
2
1
/
3/
3
3/
Now, when check out the terminal, we should see something similar to the following screenshot:
0
We can also add dummy data using the Mongo console instead of writing it in our code.
To use the Mongo console, we start the Meteor server using , and then in a second terminal
we run , which brings us to a Mongo shell.

Here, we can simply add documents using MongoDB's syntax:
	


'7(,<
(=

(
(=

	(-	

(=
/(-	

(=
8">#?#@?!@!=
(AB(
9
)

*	%$


The server did restart when we saved our changes. At this point, Meteor added five post examples to our
database.
0
If the server didn't restart, it means that we made a mistake in the syntax somewhere in our code. When
we manually reload our browser or check out the terminal, we will see the error that Meteor gives us and
we can fix it.
In case we messed up something in the database, we can always reset it using the 
command in the terminal.
We can see these posts by simply opening up the console in our browser and typing the following
command:
;

')')1
This will return an array with five items, each of them being one of our example posts.
To list these newly inserted posts in our front page, we need to replace the content of our 
+
helper in the ( file with the following lines of code:
!

12

+12
1239225#B33/
3
3/
As we can see, we returned the collections cursor directly in the helper. This return value then gets
passed to the 22C33 block helper in our  template, which will then iterate over each post
while rendering the 
=+ template.
0
Note that 1 returns a cursor, which is more efficient when used in an 22C33
block helper, whereas 11 will return an array with the document objects.
Using 1, we can manipulate the documents before returning them.
We pass an options object as the second parameter to the 1 function. The option we are passing
will sort the result based on 5 and #B. The #B value means it will be sorted in
descending order (B means ascending order).
Now, when we check out our browser, we will see that all of our five posts are listed, as shown in the
following screenshot:


'$


Now that we know how to insert and fetch data, let's take a look at how to update data in our database.
As we've already seen before, we can use the console of our browser to play with the database. For our
next examples, we will use only the console to see how Meteor reactively changes the templates when
we change data.
To be able to edit a post in our database, we first need to know the L field of its entry. To find this
out, we need to type the following command:
;

')')1
This will return us all the documents in the  collection, as we are not passing any specific query
object.
In the returned array, we need to take a look at the last item, with the %% title, and copy the
L field to the clipboard using & + & (or &
 + & if we're on Windows or Linux).
0
We can also simply use 81, which will give us the first document it finds.
Now that we have L, we can simply update the title of our fifth post by typing the following
command:
;

	'(8	CD(=7
7(.
0(99)1
As soon as we execute this command, we will notice that the title of the fifth post has changed to our
new title, and if we now reload the page we will see that the title stays the same. This means the change
was persistently made to the database.
To see Meteor's reactivity across clients, open up another browser window and navigate to

&&$%%%. When we now change our title again by executing the following
command, we will see that all the clients get updated in real time:
;

	'(8	CD(=7
7(8
(99)1

% 
In Meteor, we can use the browser console to update data, which means that we can update the database
from the client. This works because Meteor automatically syncs these changes to the server and updates
the database accordingly.
This happens because we have the 
 and  core packages added to our project
by default. The 
 package automatically publishes all documents to every client, whereas
the  package allows every client to update database records by its L field. Obviously, this
works well for prototyping but is infeasible for production, as every client can manipulate our database.
If we remove the  package, we will need to add "allow and deny" rules to determine what a
client is allowed to update and what they are not; otherwise, all updates will get denied. We will take a
look at setting these rules in a later chapter, but for now this package serves us well, as we can
immediately manipulate the database.
In the next chapter, we will see how to manually publish only certain documents to a client. We will start
that by removing the 
 package.

 



Meteor has a 
	 approach. This means it provides the same API on the client as well
as on the server. The data flow is controlled using a publication subscription model.
On the server sits the real MongoDB database, which stores data persistently. On the client, Meteor has a
package called , which is a pure in-memory database mimicking most of MongoDB's
query and update functions.
Every time a client connects to its Meteor server, Meteor downloads the documents that the client has
subscribed to and stores them in its local  database. From here, they can be displayed in a
template or processed by functions.
When the client updates a document, Meteor syncs it back to the server, where it is passed through any
allow/deny functions before being persistently stored in the database. This also works the other way;
when a document in the server-side database changes, it will automatically sync to every client that is
subscribed to it, keeping every connected client up to date.

	%
In this chapter, we learned how to store data persistently in Meteor's MongoDB database. We also saw
how we can query collections and update documents. We understood what the "database everywhere"
approach means and how Meteor keeps every client up to date.
To dig deeper into MongoDB and to query and update collections, take a look at the following
resources:
â€¢ https://www.meteor.com/full-stack-db-drivers
â€¢ https://www.meteor.com/mini-databases
â€¢ https://docs.meteor.com/#/full/collections
â€¢ http://docs.mongodb.org/manual/core/crud-introduction/
â€¢ http://docs.mongodb.org/manual/reference/operator/query/
You can find this chapter's code examples either at https://www.packtpub.com/books/content/support/
17713 or on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter3.
In the next chapter, we will see how to control the data flow using publications and subscriptions so that
we send only the necessary documents to the clients.

 =, 

$
 
In the previous chapter, we learned how to store data in our database persistently. In this chapter, we will
take a look at how we can tell Meteor what to send to the clients.
Until now, this all worked magically because we used the 
 package, which synced all of
the data with every client. Now, we will control this flow manually, sending only the necessary data to
the client.
In this chapter, we'll cover the following topics:
â€¢ Synchronizing data with the server
â€¢ Publishing data to clients
â€¢ Publishing partial collections
â€¢ Publishing only the specific fields of documents
â€¢ Lazy loading more posts
0
If you want to jump right into the chapter and follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713, or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter3.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
%$>		 

In the current Web, most pages are either static files hosted on a server or dynamically generated by a
server on a request. This is true for most server-side-rendered websites, for example, those written with
PHP, Rails, or Django. Both of these techniques required no effort besides being displayed by the
clients; therefore, they are called 
 clients.
In modern web applications, the idea of the browser has moved from thin clients to 
 clients. This
means most of the website's logic resides on the client and the client asks for the data it needs.
Currently, this is mostly done via calls to an API server. This API server then returns data, commonly in
JSON form, giving the client an easy way to handle it and use it appropriately.
Most modern websites are a mixture of thin and fat clients. Normal pages are server-side-rendered,
where only some functionality, such as a chat box or news feed, is updated using API calls.

Meteor, however, is built on the idea that it's better to use the calculation power of all clients instead of
one single server. A pure fat client or a single-page app contains the entire logic of a website's frontend,
which is send down on the initial page load.
The server then merely acts as a data source, sending only the data to the clients. This can happen by
connecting to an API and utilizing AJAX calls, or as with Meteor, using a model called 	
?
	. In this model, the server offers a range of publications and each client decides which
dataset it wants to subscribe to.
Compared with AJAX calls, the developer doesn't have to take care of any downloading or uploading
logic. The Meteor client syncs all of the data automatically in the background as soon as it subscribes to
a specific dataset. When data on the server changes, the server sends the updated documents to the
clients and vice versa, as shown in the following diagram:
0
If this does sound insecure, be assured that we can set rules that filter changes on the server side. We
will take a look at these possibilities in Chapter 8, 
	

#	'.

$		
$
To work with Meteor's publications/subscriptions, we need to remove the 
 package,
which was added by default to our project.
This package is useful for rapid prototyping, but infeasible in production since all of the data in our
database would be synced to all the clients. This is not only insecure but also slows down the data
loading process.
We just run the following command from inside our ## folder on the terminal:
	

Now we can run  again to start our server. When we check out the website, we will see that all
our posts from the previous chapter are gone.
They are not really gone, however. The current server just didn't publish any yet, and the client just
didn't subscribe to any; therefore, we can't see them.

#	
$
In order to access the post on the client again, we need to tell the server to publish it to subscribing
clients.
To do so, we will create a file called 
( inside the ##&'
folder and add the following lines of code:
4
1.#
.912
1/
3/
The 4
 function will create a publication called #
 and return a cursor with
all the posts from the  collection in that publication.
Now, we only have to tell the client to subscribe to this publication and we will see our posts again.
We create a file called 
( inside the ##& folder with the
following content:
41.#
./
Now, when we check out our website, we can see that our blog posts have reappeared.
This happens because the client will subscribe to the #
 publication when the

( file is executed, which happens right before the page is fully loaded, as Meteor
adds the 
( file automatically to the head of the document for us.
This means that the Meteor server sends the website first and the JavaScript builds the HTML on the
client; then, all the subscriptions get synced, which populate the client's collections, and the template
engine, 6
7, can display the posts.
Now that we have our posts back, let's see how we can tell Meteor to send only a subset of the
documents from the collection.

#	
$
%
To make our front page future-ready, we will need to limit the amount of posts shown on it, as we will
probably have a lot of posts added with time.
For this, we will create a new publication called #
, where we can pass a  option
to the posts' 1 function and add it to our 
( file, as follows:
4
1.#
.912
12392
J9
25#B3
3/
3/
We add a  option, with which we sort the posts in descending order on the 5 field.
This is necessary to ensure that we get the latest posts and then limit the output. If we only sort the data
on the client, it might happen that we leave out newer posts, as the server publication would send only
the first two documents it found, regardless of whether they are the latest ones or not.
Now we just have to go to 
( and change the subscription to the following line of
code:
41.#
./
If we check out our browser now, we will see that only the last two posts appear on our front page, since
we only subscribed to two, as shown in the following screenshot:

0
We must be aware that if we keep the code for the old subscription alongside the code for the new
subscription, we will subscribe to both. This means Meteor merges both subscriptions and therefore
keeps all the subscribed documents in our client-side collections.
We need to either comment out the old subscription or remove it before adding the new one.

#	
$

To improve publications, we can also determine which fields we want to publish from the document. For
example, we can only ask for the  and  properties instead of all other properties.
This speeds up the synchronization of our subscriptions since we don't require the whole post but only
the necessary data and short descriptions when listing posts on the front page.
Let's add another publication to our 
( file:
4
1.
#
.912
12392
2
B
3
3/
3/
As this is just an example, we pass an empty object as a query to find all the documents, and as the
second parameter to 1, we pass an options object containing the  object.
Every field that we give a value of B will be included in the returned document. If we rather want to
work by excluding fields, we can use the field name and set the value to %. However, we can't use both
including and excluding fields, so we need to choose what fits better, depending on the document size.
Now we can simply change the subscription in our 
( file to the following line of
code:
41.
#
./
Now, when we open the browser, it will present us with a list of our posts. Only the titles are present and
the description, time, and author fields are empty:


27%
$
Now that we've gone through these simple examples, let's put them all together and add a nice lazy load
feature to our posts' list on the front page.
Lazy loading is a technique that loads additional data only when the user desires it or when they scroll to
the end. This can be used to increase page load, since the data to be loaded is limited. To do this, let's
perform the following steps:
1. We need to add a lazy load button to the bottom of the list of posts on the front page. We go to
our  file and add the following button at the end of our  template, right below
the 22C
+33 block helper:
-AHA+&
2. Next, we will add the publication that will send a flexible number of posts to our

( file, as follows:
4
1.H#
.912
12392
9
2
%
39
25#B3
3/
3/
Basically, it's a combination of what we learned earlier.
â€¢ We used the  option, but instead of setting a fixed number, we used the 
parameter, which we will later pass to this publication function.
â€¢ Previously, we used the  option and excluded the  field.
â€¢ We can just include  to get the same result. This will be safer, as it ensures that we
won't get any extra fields in case the documents get extended:
2
B9
B9
5B9

B9
B
3
â€¢ We sorted the output to make sure we are always returning the latest posts.
Now that we have set our publication, let's add a subscription so that we can receive its data.

0
Be aware that we need to remove any other subscription beforehand so that we are not subscribing to
any other publication.
To do this, we need to make use of Meteor's  object. This object can be used on the client side
to set variables reactively. This means every time we change this session's variable, it will run every
function that uses it again. In the following example, we will use the session to increase our posts' lists'
number when clicking on the lazy load button:
1. First, in the 
( file, we add the following lines of code:
671.H+.9J/
!112
41.H#
.9
61.H+./
3/
2. Then we set the H+ session variable to J, which will be the initial number of
posts shown on the front page.
3. Next, we create a !1 function. This function will run at the start time and
later at any time when we change the H+ session variable to another value.
4. Inside this function, we subscribe to H#
, giving the H+ value
as a second parameter. This way, every time the session variable changes, we change our
subscription with a new value.
5. Now we only need to increase the session value by clicking on the lazy load button and the
subscription will change, sending us additional posts. To do this, we add the following lines of
code to our ( file at the end:
!
'12
.H.19
2
'+-61.H+./
61.H+.9+RJ/
3
3/
This code will attach a  event to the lazy load button. Every time we click on this button,
we get the H+ session and it increases by two.
6. When we check out our browser, we should be able to click on the lazy load button at the
bottom of our posts list and it should add two more posts. This should happen every time we
click on the button until we reach our five example posts.
This doesn't make much sense when we have only five posts, but when there are more than 50 posts,
limiting the initially shown posts to 10 will noticeably speed up page loading time.

We then need to change only the session's default value to 10 and increase it by 10, and we have a nice
lazy loading effect.

 $	
Now that we have the nice logic of lazy loading in place, let's take a look at what happens here under the
hood.
The 1 function , which we created earlier, will run the first time the code gets executed,
subscribing us to the H#
 publication. Meteor then sends the first two documents of the
 collection, as the  we first sent is J.
The next time we change the H+ session, it changes the subscription by changing the
limit to the value we passed to the publication function.
Meteor then checks which documents exist in our client-side database in the background and requests to
download the missing ones.
This will also work the other way when we decrease the session value. Meteor removes the documents
that don't match the current subscription/subscriptions.
So, we can try this; we open the console of our browser and set the session limit to O:
61.H+.9O/
This will immediately display all five example posts in our list. When we now set it back to a smaller
value, we will see how they are removed:
61.H+.9J/
To ensure that they are gone, we can query our local database to check, as follows:
11/
This will return us an array of two items, showing that Meteor removed the posts that we are not
subscribing to anymore, as shown in the following screenshot:


	
$
The publication and subscription model makes it fairly easy to receive and send data to the client, but as
with every call to the server, sending and requesting data is expensive, as the server and the client both
have to process the requests. Therefore, keep a few things in mind when building an app:
â€¢ Subscribe only to the documents that are necessary to make up the screen.
â€¢ Avoid sending fields with large content when we don't need them. This keeps our data stream
leaner and faster.
â€¢ If we're using  or 
 in our publication, we need to make sure we're sorting it on the
server so that we get the required data first and not some wrong tail of it.
You also should be aware that the 4
1 function is not reactive. This means you can't
use make one cursor depending on the result of another one, like you would mostly do on the client. For
example, the following code snippet will not work, as it will never rerun when the comment count in the
 collection changes:
4
1..91
=2
'
-12L
=3/
512L2
33/
3/
To solve this, you can either publish posts and comments separately and connect them in the client or
use a third-party package, which allows for reactive publications such as the great
)
#
 package at https://atmospherejs.com/reywood/publish-composite.
0
Note that the only case where the 4
1 function reruns is when the 

changes so that = which is accessible in this function will change.

	%
In this chapter, we created a few publications and subscribed to them. We used the  and 
options to modify the number of published documents and created a simple lazy load logic for the front
page of our blog.
To dig deeper into what we learned, we can take a look at Chapter 3, 
'
"
&
. While the following Meteor documentation will give us details about the options we can use
in the collections 1 functions:
â€¢ https://www.meteor.com/livequery
â€¢ https://www.meteor.com/ddp
â€¢ https://docs.meteor.com/#/full/publishandsubscribe
â€¢ https://docs.meteor.com/#/full/collections
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter4.
In the next chapter, we will give our app what makes a real appâ€”different pages and routes.

 @, $(	4
 
	$
Since we've made it to this chapter, we should already have a good understanding of Meteor's template
system and how data synchronization between a server and clients works. After digesting this
knowledge, let's get back to the fun part and make our blog a real website with different pages.
You might ask, "What do pages do in a single-page app?" The term "single page" is a bit confusing, as it
doesn't mean that our app consists of only one page. It's rather a term derived from the current way of
doing things, as there is only one page sent down from the server. After that, all the routing and paging
happens in the browser. There aren't any pages requested from the server itself anymore. A better term
here would be "client-side web application," though $
$ is the current used name.
In this chapter, we will cover the following topics:
â€¢ Writing routes for our static and dynamic pages
â€¢ Changing subscriptions based on routes
â€¢ Changing the title of the website for each page
So let's not waste time and get started by adding the  package.
0
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/content/
support/17713 or from the GitHub repository at https://github.com/frozeman/book-building-single-page-
web-apps-with-meteor/tree/chapter4.
These code examples will also contain all the style files, so we don't have to worry about adding CSS
code along the way.
$	$
Routes are the URLs of a specific page in our app. In a server-side-rendered app, routes are defined
either by the server's/framework's configuration or the folder structure on the server.
In a client-side app, routes are simply paths that the app will use to determine which pages to render.
The steps to perform inside the client are as follows:
1. The website is sent down to the client.
2. The JavaScript file (or files) is loaded and parsed.
3. The router code will check which current URL it is on and run the correct route function, which
will then render the right templates.


To use routes in our app, we will make use of the  package, a router specifically
written for Meteor, which makes it easy to set up routes and combine them with subscriptions.
4. To add the package, we cancel any running Meteor instance, go to our ##
folder, and type the following command:

5. If we are done with this, we can start Meteor again by running the  command.
When we go back to the console of our browser, we will see an error saying: F8S>

A&A. Don't worry; we will deal with this in the next section.

$		
In order to use the router, we need to set it up. To keep our code organized, we will create a file called
( directly in the root of our ## folder with the following code:
E12
!
..
3/
The router configuration allows you to define the following default templates:
!

The layout template will be used as the main wrapper. Here, subtemplates will
be rendered in the 2233 placeholder, which has to be placed
somewhere in the template.
G!
 This template will be rendered if the current URL has no defined route.
!

This template will be shown when subscriptions for the current route are
loading.
For our blog, we will just define the !
 property for now.
Perform the following steps to set up the router:
1. To create our first route, we need to add the following lines of code to the ( file:
E
112
1.".92

.&.9

..
3/
3/
0
You can also name the " route as  (in lowercase). Then we can leave the manual
template definition out, as  will look automatically for a template called 
for that route.
For simplicity, we define the template manually to keep all routes consistent throughout the
book.

2. If we now save this file and get back to our browser, we will see the  template rendered
twice. This happens not because  adds !
 by default to the
body of our app, but because we added it manually as well as by using 2233 in
, it gets rendered twice.
To prevent the double appearance of the  template, we need to remove the 2233
helper from the  tag inside our  file.
When we check out the browser, we will now see the  template rendered only once.

 $
%	

Even though we passed a template to our " route using 
, we are not rendering
this template dynamically; we are just showing the layout template with its  subtemplates.
To change this, we need to replace the 2233 inclusion helper inside our layout template with
2233.
The 2233 helper is a placeholder helper provided by , where route templates
get rendered.
After doing this, when we check out the browser, we shouldn't see any change, as we are still rendering
the  template, but this time dynamically. Then we proceed as follows:
1. In order to see whether this is true, we will add a not found template to our app, by adding the
following template to our  file after the layout template:

-AGA
'-AA
B>&B
JT
).S&J
&'
&

2. Now we need to add the G!
 property to the E1
function of (:
E12
!
..9
<+	(<(
3/
When we now navigate to 
&&$%%%& in our browser, we will see
the G template being rendered instead of our  template:

If we click on the 1 link in the main menu, we will get back to our front page, as this link was
navigating to "&" We have successfully added our first route. Now let's move on to create the second
route.

$	
Having a front page doesn't make a real website. Let's add a link to our 	 page, which has been in
our drawer since Chapter 2, "..
.
To do this, just duplicate the " route and change the values to create an   route, as follows:
E
112
1.".92

.&.9

..
3/
1. .92

.&.9

..
3/
3/
That's it!
Now, when we go back to our browser, we can click on the two links in the main menu to switch
between our 1 and 	 pages, and even typing in 
&&$%%%& will
bring us straight to the corresponding page, as shown in the following screenshot:


$	1	
In order to load the right data for each page, we need to have the subscription in the routes instead of
keeping it in the separate 
( file.
The  has a special function called 
1 , which is ideal for that
purpose. Using this function, we can reactively update subscriptions belonging to a specific route.
To see it in action, add the 
1 function to our " route:
1.".92

.&.9

..9


')7
,

'6E	

6=
2

'(E-())1
9
3/
The ,	
A.
7%
2.35B line from the 	,C file needs to be placed at the
start of the ( file and before the E1 function:
1452
671.H+.9J/
3
This has to wrapped inside the 14523 condition, as the session object is only
available on the client.
The 
1 function is 
 like the !1 function we used
before. This means it will rerun and change the subscription when the H+ session
variable changes.
In order to see it working, we need to delete the ##&&

( file, so there are not two points where we subscribe to the same publication.
When we now check the browser and refresh the page, we will see the  template still shows all the
example posts. Clicking on the lazy-load button increases the number of posts listed, though this time
everything happens through our reactive 
1 function.
0
The  comes with more hooks, which you can find as a short list in the Appendix.

To complete our routes, we only need to add the post routes, so we can click on a post and read it in full
detail.

$		
To be able to show a full post page, we need to create a post template, which can be loaded when the
user clicks on a post.
We create a file called 
 inside our ##&&
 folder
with the following template code:

-A
A
B2233&B
J22
33&J

22!5A>)A332233
&
'-A
5A
22C)33
2233
22&)33
&'
&

This simple template displays all the information of a blog post and even reuses our
22!33 helper we created earlier in this book from our 
#
( file. We
used this to format at the time the post was created.
We can't see this template yet, as we first have to create a publication and route for this page.
$$
	

In order to show the full post's data in this template, we need to create another publication that will send
the complete post document to the client.
To do so, we open our ##&'&
( file and add the following
publication:
4
1A#
A912
123/
3/
The  parameter, which has been used here, will be later provided from our subscription method so
that we can use the  parameter to reference the correct post.

0
A slug is a document title, which is formatted in a way that is usable in a URL. Slugs are better than just
appending the document ID to the URL, as they are readable and understandable by visitors. They are
also an important part of a good SEO.
So that we can use slugs, every slug has to be unique. We will take care of that when we create the posts.
Assuming that we pass the right slug such as ##, this publication will send down the
post containing this slug.
$	
In order for this route to work, it needs to be dynamic because every linked URL has to be different for
each post.
We will also render a loading template until the post is loaded. To start, we add the following template to
our ##&&
&:

-AA
'-AA
B+&B
&'
&

Additionally, we have to add this template as the default loading template to our
E1 call in the (:
E12
!
..9
G!
.G.9
+	((=

We then add the following lines of code to our E
1 function to create a dynamic route:
1..92

.&
&.9

.
.9
)812
41.#
.9
/
39
12
812
3/
3
3/

The .&
&. path is a dynamic route, where  can be anything and will be passed to
the routes functions as 
. This way we can simply pass the given slug to the
#
 subscription and retrieve the correct document for the post matching this slug.
The )81 function works like the 
1 function, though will automatically
render !
, we set in the E1 until the subscriptions are ready.
The 1 function in this route will set the data context of the 
 template. We basically look in
our local database for a post containing the given slug from the URL.
0
The 81 method of the  collection works like 1, but returns only the first found
result as a JavaScript object.
Let's sum up what happens here:
1. The route gets called (through a clicked link or by reloading of the page).
2. The )81 function will then subscribe to the right post identified by the given 
parameter, which is a part of the URL.
3. Because of the )81 function, the !
 will be rendered until the
subscription is ready. Since this will happen very fast on our local machine, so we probably
won't see the loading template at all.
4. As soon as the subscription is synced, the template gets rendered.
5. The 1 function will then rerun, setting the data context of the template to the current post
document.
Now that the publication and the route are ready, we can simply navigate to

&&$%%%&
&## and we should see the 
 template
appear.
2$
Although we've set up the route and subscription, we can't see it work, as we need the right links to the
posts. As each of our previously added example posts already contains a  property, we just have to
add them to the links to our posts in the 
=+ template. Open the ##&
&
&
=+ file and change the link as follows:
J-A
&2233A2233&&J
Finally, when we go to our browser and click on the title of a blog post, we get redirected to a page that
shows the full post entry, like the entry shown in the following screenshot:


$$ .

Now that we have the routes of our posts working, we are only missing the right titles being displayed
for each page.
Sadly, & is not a reactive template in Meteor, where we could let Meteor do the work
of changing titles and meta tags.
0
It is planned to make the  tag a reactive template, but probably not before version 1.0.
To change the document title, we need to come up with a different way of changing it, based on the
current route.
Luckily,  has the   1 function, which can also be used in the
E1 function to run before every route. In this function, we have access to the
data context of the current route, so we can simply set the title using native JavaScript:
E12
!
..9
G!
.G.9
FF')7
;

G'7

	

9)1
'C
G')HH0C
F'))
(,,I(J1


(,,I(J

3')1
9
3/
Using #,(A8
	$,,
	$:B, we get the current post of the route. We then check
whether it's an object; if so, we add the post title to the  metatag. Otherwise, we just take the
route name.
Doing this in E1 will call the  for every route.
If we now take a look at our browser's tab, we will see that the title of our website changes when we
move throughout the website:


If we want to make our blog cooler, we can add the ##
 package. This
will add a progress bar at the top of our pages when changing routes. We just need to run the following
command from our app's folder:
	


	%
That's it! Our app is now a fully working website with different pages and URLs.
In this chapter, we learned how to set up static and dynamic routes. We moved our subscriptions to the
routes so that they change automatically, based on the route's needs. We also used slugs to subscribe to
the right posts and displayed them in the 
 template. Finally, we changed our website's title so that
it matches the current route.
To learn more about , take a look at its documentation at https://github.com/
EventedMind/iron-router.
You can find this chapter's code examples either at https://www.packtpub.com/books/content/support/
17713 or on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter5.
In the next chapter, we will take a deeper look at Meteor's session object.

 D, E$ 
We already used Meteor's session object when we implemented our lazy load technique in an earlier
chapter. In this chapter, we want to take a deeper look at it and learn how it can be used to create
template-specific reactive functions.
In this chapter, we will cover the following topics:
â€¢ What sessions are
â€¢ How hot code pushes affect sessions
â€¢ Rerunning template helpers using sessions
â€¢ Rerunning functions
â€¢ Creating template-specific reactive functions
0
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713 or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter5.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
.C
The 6 object provided by Meteor is a reactive data source and serves mainly to preserve global
states throughout hot code reloads, though it won't preserve its data when the page is manually reloaded,
making it different from PHP sessions.
0
A hot code reload happens when we upload new code and the server pushes those updates to all clients.
The 6 object is a reactive data source. This means wherever this session variable is used in a
reactive function, it will rerun that function when its value changes.
One use of the session variable can be to maintain global states of our app, for example, to check
whether the user has their sidebar visible or not.
The session object is not useful for simple data communication between templates and other parts of the
app, as maintaining this would quickly become a nightmare and naming collisions could occur.
 %
%
If we wanted to use something for intra-app communication, it's better to use Meteors '#'
package, which comes with a 6 like E', object.

To use it, we can simply add it using '#'.
This object then needs to be instantiated and comes with a reactive 1 and 1 function like the
 object:
,E',-)E',1.'./
&&))'
E',1/
&&9

E',1.)'./
For more custom reactivity, we can build our own custom reactive object using Meteor's !
package. To read more about this, refer to Chapter 9, #

.

For reactive variables that are tied to a specific template instance, check out my
H
#' package at https://atmospherejs.com/frozeman/template-var.

'$


As all template helper functions are reactive functions, a good place to use a session object is inside such
a helper.
Reactive means that when we use a reactive object inside this function, that function will rerun when the
reactive object changes, additionally rerendering this part of the template.
0
Template helpers are not the only reactive functions; we can also create our own using
!112U3, as we saw in earlier chapters.
To demonstrate the usage of sessions in a template helper, perform the following steps:
1. Let's open our ##&&
&( file and add the
following helper code anywhere in the file:
!

12
&&
F
12
61.6F
./
3
3/
This creates the F
 helper, which returns the value of the
6F
 session variable.
2. Next, we need to add this helper to our home template itself by opening the my-meteor-blog/
client/templates/home.html file and adding the helper above our {{#each postsList}} block
helper:
J!6
22F
33&&J
3. Now, let's open up our browser at 
&&$%%%. We will see the static text we
add appearing in our blog's home page. Yet, to see Meteor's reactive session at work, we need to
open up the browser's console and type the following line of code:
61.6F
.9.=(./
This is illustrated in the following screenshot:

Immediately after we pressed /
, we saw the text added to our template. This is because when we
call 61.6F
.9, Meteor will rerun every reactive function
wherein we called 61.6F
. before. For template helpers, this will
rerun only this specific template helper, rerendering only this part of the template.
We can try this by setting different values for the 6F
 session variable so that we can
see how the text will change at all times.
	
A hot code push is when we change files and the Meteor server pushes these changes to the clients.
Meteor is smart enough to reload the page, without losing the values of HTML forms or sessions.
Therefore, sessions can be used to keep user states consistent over hot code pushes.
In order to see this, we set the value of 6F
 to anything we want and see the website
updating to this value.
When we now go to our  file and make a minor change, for example, removing
 around the 22F
33 helper and saving the file, we see that our sessions

state is kept, even though the page reloads with the new changed template. This is demonstrated in the
following screenshot:
0
If we manually reload the page using the browser's refresh button, the session will not be able to persist
the change and the text will disappear.
To overcome this limitation, there are many packages in Meteor's package repository that reactively
store data in the browser's local storage to persist across page reloads. One of them is called

# and can be found at http://atmospherejs.com/package/persistent-session.

	$	
%
To rerun functions based on session changes, Meteor provides the !1 function,
which we used before to change the lazy load subscription.
The !1 function will make every function we pass to it reactive. To see a simple
example, we will create a function that will alert a text every time the function reruns.
0
The ! package is what the session uses under the hood to make the reactivity work. In Chapter
9, #

, we will take a deeper look at this package.
Perform the following steps to rerun functions reactively:
1. Let's create a new file called (, but this time in the root of the ##
folder, with the following content:
1452
!112
'
-61.6F
./
1
/
3/
3
0
We will need the ( file in later chapters. Therefore, we created it in the root folder,
making it accessible on the client and the server.
However, as Meteor's session object is only available on the client, we will use the
145 condition in order to execute the code only on the client.
When we now check out our browser, we will see an alert that displays . This is
because the function passed to !1 will also run when the code is
executed, at a time when we haven't set our session.
2. To set a session variable's default value, we can use
671.6F
.9.4!.. This will set the
session without running any reactive functions, when the value of the session is undefined. If
the value of the session variable was already set, 7 won't change the variables at
all.
3. In our example, we probably don't want an alert window to appear when the page is loaded. To
prevent this first run, we can use the !5
 object, which is passed as the
first argument to our function and which provides us with a property called E. This
property will be set to  at the first run of the function. When we use this, we can prevent
the display of the alert at the start:

!112
'
-61.6F
./
1SE2
1
/
3
3/
4. Now let's go to the browser's console and set the session to any value to see the alert appear:
61.6F
.9."S./
The output of this code is demonstrated in the following screenshot:
0
When we run the same command again, we will not see the alert window show up, as Meteor is smart
enough to prevent reruns when the session's value doesn't change. If we set it to another value, the alert
will appear again.
$	
The !5
 object, passed as the first argument, also gives us a way to stop the
function from being reactive at all. To try this, we will change the function so that it stops its reactivity
when we pass the 
 string to the session:
!112
'
-61.6F
./
1SE2
161.6F
.9.
.2
1.@

'G./

1/
32

1
/
3
3
3/
Now, when we go to our browser's console and run 61.6F
.9
.
., the reactive function will stop being reactive. To test this, we can try to run
61.6F
.9. . and we will see that the alert
window won't appear.
0
If we make a code change and a hot code reload happens, the reactive function will become reactive
again, as the code was executed again.
The preceding example also uses a function called 61. This function can compare
two scalar values while preventing unnecessary recomputations, compared to using
61.6F
---.
.. Using 61 would
only rerun this function when the session variable changes 
 or  that value.
0
In our example, however, this function doesn't make a difference, as we called 61
before as well.

'$		

Although it could be useful to use !1 globally in our app in some cases, it can
become quickly hard to maintain those global reactive functions as our app grows.
Therefore, it is good practice to bind reactive functions to the templates for which they perform actions.
Luckily, Meteor offers a special version of !1 that is tied to a template instance
and stops automatically when the template gets destroyed.
To make use of this, we can start the reactive function in the 1 or rendered callback. To start,
let's comment out our previous example from the ( file so that we won't get two alert windows.
Open our ( file and add the following lines of code:
!
-12
112
161.6F
./
3/
3/
This will create the reactive function when the home template is created. When we go to the browser's
console and set the 6F
 session to a new value, we will see the alert window appear,
as shown in the following screenshot:

Now, when we switch the templates by clicking on the 	 link in the menu and we set the
6F
 session variable again to another value using the browsers console, we won't see
the alert window appear as the reactive 1 was stopped when the template was
destroyed.
0
Note that all !1 functions return a !5
 object, which can
be used to stop the reactivity of the autorun at any time using !5

1:
,E'G-!1123/
&&7)

E'G
1/

C
We've seen that the session object can rerun a function when its value is changed. This is the same
behavior as that of the 1 and 81 functions of collections, which will rerun functions
when the underlying data in the collection changes.
We can use sessions to keep user states across hot code pushes, such as states of drop-down menus or
pop-ups. However, keep in mind that without a clear naming convention, these session variables can
soon become hard to maintain.
For more specific reactive behavior, it is good to build a custom reactive object using Meteor's
! core package, which we will cover in Chapter 9, #

.

	%
In this chapter, we learned what we can do with Meteor's reactive session object. We used it to rerun
template helpers and our own custom functions, and we made a reactive function template specific using
the 1 and 1 callbacks.
To dig deeper, take a look at Meteor's documentation about sessions and reactivity at the following
resources:
â€¢ https://docs.meteor.com/#/full/reactivity
â€¢ https://docs.meteor.com/#/full/session
â€¢ https://docs.meteor.com/#/full/reactivevar_pkg
â€¢ https://www.meteor.com/tracker
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter6.
In the next chapter, we will create the admin user and backend for our blog, laying down the foundation
to create and edit posts.

 F, '#
Having worked through the previous chapters, we should have a working blog by now. We can click on
all links and posts, and even lazy load more posts.
In this chapter, we will add our backend login and create the admin user. We will also create the
template to edit posts and make an edit button visible to the admin user so that they can edit and add
new content.
In this chapter, we will learn the following concepts:
â€¢ Meteor's  package
â€¢ Creating users and a log in
â€¢ How to restrict certain routes to only logged-in users
0
You can delete all the session examples from the previous chapter, as we won't need them to
progress with our app. Delete the session's code from ##&(, #
#&&
&(, and ##&&

&, or download a fresh copy of the previous chapter's code.
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713 or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter6.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
.	$
Meteor makes it very easy to add authentication to our web app using its  package. The
 package is a complete login solution tied to Meteor's core. Created users can be identified
by ID in many of Meteor's server-side functions, for example, in a publication:
4
1A
A912
&&'
=/
3
Additionally, we can add support for login via Facebook, GitHub, Google, Twitter, Meetup, and Weibo
by simply adding one or more of the #* core packages.
Meteor also comes with a simple login interface, an extra template that can be added using the 22
<33 helper.

All registered user profiles will be stored in a collection called ?, which Meteor creates for us. All
the processes in authentication and communication use the 	#  (#) protocol
and most external services use OAuth.
For our blog, we will simply create one admin user, which when logged in will be able to create and edit
posts.
0
If we want to use one of the third-party services to log in, we can work through this chapter first, and
then add one of the previously mentioned packages.
After we add the additional packages, we can open up the $ form. We will see a button where we
can configure the third-party services for use with our app.

$	$
To start using a login system, we need to add the # and #
)
packages to our app, as follows:
1. To do so, we open up the terminal, navigate to our ## folder, and type the
following command:


	


2. After we have successfully added the packages, we can run our app again using the 
command.
3. As we want to prevent the creation of additional user accounts by our visitors, we need to
disallow this functionality in our  package, . First, we need to open up our
##&( file, which we created in the previous chapter, and remove all
of the code, as we won't need the session examples anymore.
4. Then add the following lines of code to this file, but make sure you don't use
145, as we want to execute the code on both the client and the server
this time:
 12
5 5
3/
This will forbid any call of  ?1 on the client and the #
 package will not show the $ button to our visitors.
0
This option doesn't seem to work for third-party services. So, when using third-party services,
everybody can sign up and edit posts. To prevent this, we will need to create "deny" rules for
user creation on the server side, which is beyond the scope of this chapter.

$	
%	

The best way to allow editing of our post is to add an ! link to our post's page, which can only
be seen if we are logged in. This way, we save rebuilding a similar infrastructure for an additional
backend, and make it easy to use as there is no strong separation between frontend and backend.
First, we will add a   link to our  template, then add the ! link to the post's

 template, and finally add the login buttons and form to the main menu.
$
 
Let's begin by adding a   link. Open the  template at ##&
&
& and add the following lines of code just above the 22C

+33 block helper:
22C?33
-A&#
A-A>)A5)
&
22&33
The 22?33 helper comes with the # package, which was installed
when we installed our  packages. It will return the current logged-in user, or return null if no
user is logged in. Using it inside an 22C33 block helper allows us to show content only to logged-in
users.
$

To edit posts, we simply add an ! link to our 
 template. Open up 
 from the
same folder and add 22C?3322&33 after 2233, as follows:

22!5A>)A332233
22C?33
V-A&#
&2233AF
&
22&33
&
$
$
Now that we have both links to add and edit posts, let's add the login form. We can create our own form,
but Meteor already comes with a simple login form, which we can style to fit our design.
Since we added the # package previously, Meteor provides us with the 22
<33 template helper, which works as a drop-in-place template. To add this, we will
open our  template and add the following helper inside our menu's & tags, as
follows:

B446 

&B


-A&A"&
&

-A&A &
&
&
77:I
99

$

Now we are only missing the template to edit the posts. To add this, we will create a file called
 inside our ##&&
 folder, and fill it with the
following lines of code:

-AA
'-AA


!


-AA-AA
-A )
A'-A2233A
&

7

-A
A
-A6



A
)-A$A22
33&
&

5
-AA)-AB%A
-A<
A2233&
&

-AA-A'A6'&
&
&'
&

As we can see, we have added the helpers for 2233, 22
33, and 2233,
which will come later from the post's data. This simple template, with its three text fields, will allow us
to edit and create new posts later.
If we now check out our browser, we will notice that we can't see any of the changes we made so far,
apart from the $ link in the corner of our website. To be able to log in, we first need to add our
admin user.

$	
Since we deactivated the creation of users from the client, as a security measure we will create the
admin user on the server in the same way we created our example posts.
Open the ##&'&( file and add the following lines of code
somewhere inside 4
1123:
1411---%2
1.5 ./
 ?12
.(.9
.(	
.9

).BJ$M.9

2
.D7.
3
3/
3
If we now go to our browser, we should be able to log in using the user we just created, and we
immediately see that all the edit links appear.
However, when we click any of the edit links, we will see the G template appearing because
we didn't create any of our admin routes yet.
$
Meteor's  package doesn't come by default with configurable permissions for users.
To add permission control, we can add a third-party package such as the

)H package, which can be found on Atmosphere at
http://atmospherejs.com/deepwell/authorization and which comes with a complex role model.
If we want to do it manually, we can add the simple  properties to our user document when we
create the user, and then check for these roles in our allow/deny roles when we create or update posts.
We will learn about allow/deny rules in the next chapter.
If we create a user using the  ?1 function, we can't add a custom property, so
we need to update the user document after we have created the user, as follows:
'=- ?12
.(.9
.(	
.9


).BJ$M.9

2
.D7.
3
3/
&&
4
1=922
239
33
By default, Meteor publishes the , , and 
 properties of the currently
logged-in user. To add additional properties, such as our custom  property, we need to add a
publication, to access the  property on the client as well, as follows:
1. Open the #&&'&
( file and add the following
publication:
4
1AEA912
1=2
412L=3922
B33/
32
1/
3
3/
2. In the ##&( file, we add the subscription as follows:
1452
41AEA/
3
3. Now that we have the  property available on the client, we can change 22C
?3322&33 in the  and 
 templates to 22C
?3322&33 so that only admins can see the buttons.
	%
The user can only update their own 
 property using the following command:
,

	'K
D=7
7	
7;	
(/E(999)
If we want to update the  property, we will fail. To see this in action, we can open up the
browser's console and type the following command:
,

	',
')C=7
7
7

999)1

This will give us an error stating: 	
, as shown in the following screenshot:
0
If we want to allow users to edit other properties such as their  property, we need to add a
4)1 rule for that.

$	
Now that we have an admin user, we can add the routes, which lead to the  template. Though
in theory the  template is available to every client, it doesn't create any risk, as the allow and
deny rules are the real security layer, which we will take a look at in the next chapter.
To add the route to create posts, let's open up our ##&( file and add the
following route to the E
1 function:
1.5.92

.&#
.9

..
3/
This will simply show the  template as soon as we click on the   link on our
home page, as shown in the following screenshot:

We see that the form is empty because we did not set any data context to the template, and therefore the
2233, 22
33, and 2233 placeholders in the template displayed nothing.
To make the edit post route work, we need to add subscriptions similar to those we did for the 
route itself. To keep things G (which means .G	
), we can create a custom
controller, which both routes will use, as follows:
1. Add the following lines of code after the E1/ call:
5-E512
)812
41.#
.9


/
39
12
812
3/
3
3/
2. Now we can simply edit the  route, remove the )81 and 1 functions, and
add 5 instead:
1..92

.&
&.9

.
.9
.5.
3/
3. Now we can also add the F route by just changing the 
 and the 

properties:
1.F.92

.&#
&.9

..9
.5.
3/
4. That's it! When we now go to our browser, we will be able to access any post and click on the
! button, and we will be directed to  template.
If you are wondering why the form is filled in with the post data, take a look at 5,
which we just created. Here, we return the post document inside the 1 function, setting the data
context of the template to the post's data.
Now that we have these routes in place, we should be done. Shouldn't we?
Not yet, because everybody who knows the &#
 and &#
&# routes
can simply see the  template, even if he or she is not an admin.
#$$	
To prevent visitors from seeing admin routes, we need to check whether the user is logged in before we
show them the routes. The  comes with a E< 1 hook,
which can be run for all or some routes. We will use this to run a function to check whether the user is
logged in; if not, we will pretend that the route doesn't exist and simply display the G
template.
Add the following code snippet at the end of the ( file:

'+-12
1S41VV
S41VV
S412
1.G./
32
1/
3
3/
E< 1+92:.5.9.F
.;3/
Here, first we create the +1 function, which will be executed before the 5
 and F routes because we pass them as the second arguments to the
E< 1 function.
Inside the +1, we check whether the user is logged in, which will return the user
document when calling 41, and if they have the role . If not, we simply render
the G template and don't continue to the route. Otherwise, we run 1, which will
continue to render the current route.
That's it! If we now log out and navigate to the &#
 route, we will see the 
template.
If we log in, the template will switch and immediately show the  template.
This happens because the +1 function becomes reactive as soon as we pass it to
E< 1, and since 41 is a reactive object, any change to the
user's status will rerun this function.
Now that we have created the admin user and the necessary templates, we can move on to actually
creating and editing the posts.

	%
In this chapter, we learned how to create and log in users, how we can show content and templates only
to logged-in users, and how routes can be altered depending on the login status.
To learn more, take a look at the following links:
â€¢ https://www.meteor.com/accounts
â€¢ https://docs.meteor.com/#/full/accounts_api
â€¢ https://docs.meteor.com/#/full/meteor_users
â€¢ http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol
â€¢ https://github.com/EventedMind/iron-router/blob/devel/Guide.md#using-hooks
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter7.
In the next chapter, we will learn how we can create and update posts and how to control updates to the
database from the client side.

 H, 	% 

 %
	

In the previous chapter, we created our admin user and prepared the  template. In this
chapter, we will make this template work so that we can create and edit posts using it.
To make it possible to insert and update documents in our database, we need to set constraints so that not
everybody can change our database. In Meteor, this is done using the allow and deny rules. These
functions will check documents before they are inserted into the database.
In this chapter, you will cover the following topics:
â€¢ Adding and updating posts
â€¢ Using the allow and deny rules to control the updating of the database
â€¢ Using methods on the server for more flexibility
â€¢ Using method stubs to enhance user experience
0
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713 or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter7.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
$	$
	$
In order to generate slugs from our post's titles, we will use the # library, which
comes with a simple 1 function. Luckily, a wrapper package for this library already exists on
the Meteor package servers. To add it, we run the following command from the terminal in our #
# folder:
E




This will extend , which is used by default in Meteor, with extra string functions such as
L1, to generate a slug from strings.

$ 
Now that we can generate slugs for each created page, we can proceed to add the saving process to the
 template.
To do so, we need to create a JavaScript file for our  template by saving a file called
( to the ##&&
 folder. Inside this file, we will add
an event for the  button of the template:
!
'12
..19
2

'71/
1.'./
3
3/
Now, if we go to the &#
 route and click on the # button, the # log
should appear in the browser's console.
$
In order to save the post, we will simply take the form's content and store it in the database. Later, we'll
redirect to the newly created post page. To do so, we extend our click event with the following lines of
code:
!
'12
..19
2

'71/
'-9
-41/
We get the current user so that we can add him later as the post's author. We then generate a slug from
the post's title using our 1 function:
'-L1'/
Following this, we insert the post document into the  collection using all other form fields. For
the 5 property, we get the current Unix timestamp using the  package, which we
added in Chapter 1, !



	

.
The ) field will later help us to determine by which user this post was created:
12
'9
9


'9

'9
5119

9
)L
3912
12
&&

1/
32
&&E

E1..923/
3
3/
The second argument we pass to the 1 function is a callback function provided by Meteor that
will receive an error argument if something goes wrong. If an error happens, we alert it, and if
everything goes fine, we redirect to the newly inserted post using our generated slug.
Since our route controller will then subscribe to a post with this slug, it will be able to load our newly
created post and display it in the post template.
Now, if we go to the browser, fill in the form, and click on the  button, we should have created our
first own post!

!$
So saving works. What about editing?
When we click on the ! button in the post, we will be shown the  template again. This
time, however, the form fields are filled with the data from the post. So far so good, but if we press the
 button now, we will create another post instead of updating the current one.
'$	
Since we set the data context of the  template, we can simply use the presence of the post's
L field as an indicator to update, instead of inserting the post data:
!
'12
..19
2

'71/
'-9
-419
L-/&&)

&&F

1L2

1L922
'9


'9
'
33912
12
&&

1/
32
&&E

E1..92L3/
3
3/
&&6 ,F
32
&&!

3

3
3/
Knowing the L, we can simply update the current document using the  property. Using 
will only overwrite the , 
, and  fields. The other fields will be left as they
are.
Note that we now also need to create the L variable on top of the function in order to access the
 property of the current data context in the callback later. This way, we can later redirect to our
edited post page.
Now, if we save the file and go back to our browser, we can edit the post and click on , and all
changes will be saved as expected to our database.
Now, we can create and edit posts. In the next section, we will learn how to restrict updates to the
database by adding the allow and deny rules.

$	
Until now, we simply added the insert and update functionality to our  template. However,
anybody can insert and update data if they just type an  statement into their browser's console.
To prevent this, we need to properly check for insertion and update rights on the server side before
updating the database.
Meteor's collections come with the allow and deny functions, which will be run before every insertion or
update to determine whether the action is allowed or not.
The allow rules let us allow certain documents or fields to be updated, whereas the deny rules overwrite
any allow rules and definitely deny any action on its collection.
To make this more visible, let's visualize an example where we define two allow rules; one will allow
certain documents'  fields to be changed and another will allow only editing of the

 fields, but an additional deny rule can prevent one specific document to be edited in
any case.
$	$
To start using the allow and deny rules, we need to remove the  package from our app so that
no client can simply make changes to our database without passing our allow and deny rules.
Quit the running  instance using &
 + & in the terminal and run the following command:


After we have successfully removed the package, we can run Meteor again using the 
command.
When we now go to our browser and try to edit any post, we will see an alert window stating 
. Remember that we added this 1 call before, when an update or insert action failed?
$	

 	

In order to make our posts editable again, we need to add allow rules to enable database updates again.
To do so, we will add the following allow rules to our ##&( file,
but in this case we'll execute them only on the server side by checking against Meteor's 6'
variable, as follows:
146'2
)12
1=92

&&!9
)
=WW)---=WW
41/
39
In the insertion 	 rule , we will insert the document only if the post owner matches the current user
and if the user is an admin, which we can determine by the  property we added in the
previous chapter.
If the allow rule returns , the insertion of the document will be denied. Otherwise, we will
successfully add a new post. Updating works the same way, just that we only check whether the current
user is an admin:

1=9992
&&?
41/
39
&&)
:.).;
3/
3
The arguments passed to the 
 function are listed in the following table:



=
The user ID of the current logged-in user, who performs that 
 action

The document from the database, without the proposed changes

An array with field parameters that will be updated
 The modifier the user passed to the 
 function, such as 2
2..A A392B33
The  property, which we specify last in the allow rule's object, determines which fields of the
current document should be passed to the update rule. In our case, we only need the ) property for
our update rule. The  property exists for performance reasons, to prevent unnecessarily large
documents from being passed to the rule's functions.

0
Additionally, we can specify the '1 rule and the 1 function. The '1
rule will get the same arguments as the 1 rule and allow or prevent removal of documents.
The 1 function can be used to transform the document before being passed to the allow or
deny rules, for example, to normalize it. However, be aware that this won't change the document that
gets inserted into the database.
If we now try to edit a post in our website, we should be able to edit all posts as well as create new ones.

$%	

To improve security, we can fix the owner of the post and the time when it was created. We can prevent
changes to the owner and the 5 and  fields by adding an additional deny rule to our
 collection, as follows:
146'2
&& )
12

1=9992
&&5.)95
L19.).VVL19
.5.VVL19../
3
3/
3
This rule will simply check whether the  argument contains one of the restricted fields. If it
does, we deny the update to this post. So, even if our previous allow rules have passed, our deny rule
ensures that the document doesn't change.
We can try the deny rule by going to our browser's console, and when we are at a post page, typing the
following commands:
;

	';

G')C=7
7(
((
(99)1
This should give you an error stating 	
, as shown in the following
screenshot:

Though we can add and update posts now, there is a better way of adding new posts than simply
inserting them into our  collection from the client side.

$	$

Methods are functions that can be called from the client and will be executed on the server.
	
%
The advantage of methods is that they can execute code on the server, having the full database and a stub
method on the client available.
For example, we can have a method do something on the server and simulate the expected outcome in a
stub method on the client. This way, the user doesn't have to wait for the server's response. A stub can
also invoke an interface change, such as adding a loading indicator.
One native example of a method call is Meteor's 51 function, which will
execute a client-side function, inserting the document immediately into the local  database
as well as sending a request executing the real  method on the server. If the insertion is
successful, the client has the document already inserted. If an error occurs, the server will respond and
remove the inserted document from the client again.
In Meteor, this concept is called 
%, as the interface reacts immediately to the user's
response and therefore compensates the latency, while the server's round trip will happen in the
background.
Inserting a post using a method call enables us to simply check whether the slug we want to use for the
post already exists in another post. Additionally, we can use the server's time for the 5
property to be sure we are not using an incorrect user timestamp.
$$	
In our example, we will simply use the method stub functionality to change the text of the  button
to 6'U while we run the method on the server. To do so, perform the following steps:
1. To start, let's first change the  button's static text with a template helper so that we can
change it dynamically. Open up ##&&
&
 and replace the  button code with the following code:

-AA-A'A22'<!33&
2. Now open ##&&
&( and add the
following template helper function at the beginning of the file:
671.'<.9.6'./
!

12
'<!12
61.'<./
3
3/

Here, we return the session variable named '<, which we set to the default value,
6', earlier.
Changing the session will allow us to change the text of the  button later while saving the
document.
$
Now that we have a dynamic  button, let's add the actual method to our app. For this, we will create
a new file called ( directly in our ## folder. This way, its code will be
loaded on the server and the client, which is necessary to execute the method on the client as a stub.
Add the following lines of code to add a method:
412
1
72
162
61.'<.9.6'./
3
3
3/
This will add a method called . Inside this method, the stub functionality is already added
by making use of the 6 property, which is made available in the  object of the
function by Meteor.
The  object also has the following properties:
â€¢ 1: This is a function that when called will prevent the method from blocking other
method calls
â€¢ =: This contains the current user's ID
â€¢ ?=1: This a function to connect the current client with a certain user
â€¢ : This is the connection on the server through which this method is called
If 6 is set to , the method is not run on the server side but as a stub on the client.
Inside this condition, we simply set the '< session variable to 6'U so that the button
text will change:
412
1
72
162
61.'<.9.6'./

32
To complete the method, we will add the server-side code for post insertion:
'-41/
&&
1S
))4F1M%B9AT)

A/
Here, we get the current user to add the author name and owner ID.
We throw an exception with )4F if the user is not logged in. This will stop the
execution of the method and return an error message we define.
We also search for a post with the given slug. If we find one, we prepend a random string to the slug to
prevent duplicates. This makes sure that every slug is unique, and we can successfully route to our
newly created post:
1812
73

7-
7R.#.R
4161$P1$/
Before we insert the newly created post, we add 5 using the  library and the
 and ) properties:
&&

'

75-11/

7-
/

7)-L/
1
7/
After we insert the document, we return the corrected slug, which will then be received in the callback
of the method call as the second argument:
&&)'


7/
3
3
3/



$
Now that we have created our  method, we can change the code in the submit event,
where we inserted the post earlier in our ( file, with a call to our method:
'-L1'/
41..92
'
9


'
'9
39192
61.'<.9.6'./
12
1/
3
&&")1
'

E1..923/
3/
As we can see in the callback of the method call, we route to the newly created post using the 
variable we received as the second argument in the callback. This ensures that if the  variable is
modified on the server side, we use the modified version to route to the post. Additionally, we reset the
'< session variable to change the text to 6' again.
That's it! Now, we can create a new post and save it using our newly created  method.
However, editing will still be done from the client side using 
1, as we now have
allow and deny rules, which make sure that only allowed data is modified.

	%
In this chapter, we learned how to allow and deny database updates. We set up our own allow and deny
rules and saw how methods can improve security by moving sensitive processes to the server side. We
also improved our procedure of creating posts by checking whether the slug already exists and adding a
simple progress indicator.
If you want to dig deeper into the allow and deny rules or methods, take a look at the following Meteor
documentations:
â€¢ http://docs.meteor.com/#/full/allow
â€¢ http://docs.meteor.com/#/full/deny
â€¢ https://docs.meteor.com/#/full/methods_header
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter8.
In the next chapter, we will make our interface real time by constantly updating the post's timestamps.

 I, %
Now our blog is basically complete, as we can create and edit entries. In this chapter, we will make use
of Meteor's reactive templates to make our interface timestamps update itself. We will build a reactive
object that will rerun the template helper, which displays the time when the blog entries were created.
This way, they will always display the correct relative time.
In this chapter, we will cover the following topics:
â€¢ Reactive programming
â€¢ Rerunning functions manually
â€¢ Building a reactive object using the ! package
â€¢ Stopping reactive functions
0
If you've jumped right into the chapter and want to follow the examples, download the previous
chapter's code examples from either the book's web page at https://www.packtpub.com/books/
content/support/17713 or from the GitHub repository at https://github.com/frozeman/book-
building-single-page-web-apps-with-meteor/tree/chapter8.
These code examples will also contain all the style files, so we don't have to worry about adding
CSS code along the way.
$$
As we already saw throughout the book, Meteor uses something called %.
One problem that a developer has to solve when building a software application is the consistency of the
data represented in the interface. Most modern applications use something called 
4 


 (4), where the controller of a view makes sure that it always represents the current state
of the model. The model is mostly a server API or a JSON object in the browser memory.
The most common ways of keeping consistent interfaces are as follows (courtesy:
http://manual.meteor.com):
â€¢ #

: Periodically (for example, every second), fetch the current value of the thing, see
whether it's changed, and if so, perform the update.
â€¢ !: The thing that can change emits an event when it changes. Another part of the program
(often called a controller) arranges to listen for this event, gets the current value, and performs
the update when the event fires.
â€¢ 6$: Values are represented by objects that implement some interface, such as
<,. Then, a "bind" method is used to tie two <, together so
that when one value changes, the other is updated automatically. Sometimes, as a part of setting
up the binding, a transformation function can be specified. For example, G can be bound to
< with the ?

5 transformation function.

These patterns are good, but they still need a lot of code to maintain the consistency of the data
represented.
Another pattern, although not yet as commonly used, is $$. This pattern is a
declarative way of binding data. It means when we use a reactive data source such as a 6
variable or 45, we can be sure that reactive functions or template helpers that use
these will rerun as soon as its value changes, always keeping the interface or calculations based on these
values updated.
The Meteor manual gives us an example use case where reactive programming comes in handy:



0







0
1	
*.




	




1
*
210

		
".3	


0










*%
4)5

	






6





0

708

8


*#	

4
5
	

&4
5

8
8





	



0



	*
To make this example happen in the aforementioned patterns, we can quickly see how complex it gets
compared to reactive programming (courtesy: http://manual.meteor.com):
â€¢ If we use poll and diff, the UI will be unacceptably laggy. After the user clicks, the screen won't
actually update until the next polling cycle. Also, we have to store the old selection set and diff
it against the new selection set, which is a bit of a hassle.
â€¢ If we use events, we have to write some fairly tangled controller code to manually map changes
to the selection or to the name of the selected item, onto updates to the UI. For example, when
the selection changes, we have to remember to update both the B tag and (typically) two
affected  tags. What's more, when the selection changes, we have to automatically register
an event handler on the newly selected item so that we can remember to update B. It is
difficult to structure clean code and maintain it, especially as the UI is extended and redesigned.
â€¢ If we use bindings, we will have to use a complex 
$	$ (2) to express
the complex relationships between the variables. The DSL will have to include indirection (bind
the contents of B not to the name of any fixed item, but to the item indicated by the current
selection), transformation (capitalize the name), and conditionals (if more than one item is
selected, show a placeholder string).
With Meteor's reactive template engine, Blaze, we can simply use the 22C33 block helper to
iterate over a list of elements and add some conditions for each element based on user interaction or on
an item's property to add a selected class.
If the user now changes the data or the data coming in from the server changes, the interface will update
itself to represent the data accordingly, saving us a lot of time and avoiding unnecessary complex code.


$%

One key part of understanding the reactive dependencies is the invalidate cycle.
When we use a reactive data source inside a reactive function, such as
!112U3, the reactive data source itself sees that it is inside a
reactive function and adds the current function as a dependency to its dependency store.
Then, when the value of the data source changes, it invalidates (reruns) all its dependent functions and
removes them from its dependency store.
In the rerun of the reactive function, it adds the reactive function back to its dependency store so that
they will rerun on its next invalidation (value change) again.
This is the key to understand the reactive concept, as we will see in the following example.
Imagine that we have two 6 variables set to :
61..9/
61..9/
Moreover, We have the !1 function, which uses both these variables:
!112
1.E'#./
161..2
61../
3
3/
We can now call 61..9, but the reactive function will not rerun,
because it was never called in the first run, as the  session variable was set to .
If we now call 619, the function will rerun.
Additionally, if we now set 61..9, it will rerun as well, as in the
second rerun, 61.. can add this reactive function as a dependency.
Because the reactive data sources source will always remove all dependencies from its store on every
invalidation and add them back in the rerun of the reactive function, we can set
619 and try to switch it to 61..9.
The function will 
 rerun again, as 61.. was never called in this run!
Once we understand this, we can make more fine-grained reactivity, keeping reactive updates to a
minimum. The console output of the explanation looks similar to the following screenshot:


6	
$
C
As we saw, a C is an object that when used inside a reactive function, will rerun the
function when its value changes. The Meteor's 6 object is one example of a reactive object.
In this chapter, we will build a simple reactive object that will rerun our 22!33 template
helper at time intervals so that all the relative times are updated correctly.
Meteor's reactivity is made possible through the ! package. This package is the core of all
reactivity and allows us to track dependencies and rerun these whenever we want.
Perform the following steps to build a simple reactive object:
1. To get started, let's add the following code to the ##&( file:
1452
E'!-)!7
/
3
This will create a variable named E'! on the client with a new instance of
!7
.
2. Below the E'! variable, but still inside the 145
condition, we will add the following code to rerun all dependencies of our E'!
object every 10 seconds:
4='112
&&#
'B%
E'!1/
39B%%%%/
The 4=' will run the function every 10 seconds.
0
Meteor comes with its own implementation of =' and !. Even
though they work exactly as their native JavaScript equivalents, Meteor needs these to reference
the right timeout/interval for a specific user on the server side.
Meteor comes with its own implementation of =' and !. Even though they
work exactly as their native JavaScript equivalents, Meteor needs these to reference the right timeout/
interval for a specific user on the server side.
Inside the interval, we call E'!1. This will invalidate every dependent
function, causing it to rerun.

	$	
So far, we have no dependency created, so let's do that. Add the following code below
4=':
!112
E'!
1/
1.G#./
3/
If we now get back to our browser console, we should see 		 every 10 seconds, as our
reactive object reruns the function.
We can even call E'!1 in our browser console and the function will rerun
as well.
These are good examples, but don't make our timestamps update automatically.
To do this, we need to open up ##&&
#
( and add the
following line at the top of our ! helper function:
E'!
1/
This will make every 22!33 helper in our app rerun every 10 seconds, updating the
relative time while it passes. To see this, go to your browser and create a new blog entry. If you save the
blog entry now and watch the time created text, you will see that it changes after a while:

$C
The previous example was a simple demonstration of a custom reactive object. To make it more useful,
it is better to create a separate object that hides the !7
 functions and adds
additional functionality.
Meteor's reactivity and dependency tracking allows us to create dependencies even when the

1 function is called from inside another function. This dependency chain allows more
complex reactive objects.
In the next example, we will take our  object and add a  and 
 function to it.
Additionally, we will also make it possible to choose a time interval at which the timer will rerun:
1. First, let's remove the previous code examples from the ( and 
#

( files, which we added before, and create a new file named
E'!( inside ##& with the following content:
E'!-112
&&5
E'!12
L
-)!7
/
L'=-/
3/
E'!/
31/
This creates a classic prototype class in JavaScript, which we can instantiate using )
E'!1. In its constructor function, we instantiate a )
!7
 and attach it to the function.
2. Now, we will create a 1 function, which will start a self-chosen interval:
E'!-112
&&5
E'!12
L
-)!7
/
L'=-/
3/
E'!

-1'2
'L-/
L'=-4='112
&&'A'A
LL
1/
39B%%%*'/

3/
E'!/
31/
This is the same code as we used before with the difference that we store the interval ID in
L'= so that we can stop it later in our 
1 function. The interval passed
to the 1 function must be in seconds;
3. Next, we add the 
1 function to the class, which will simply clear the interval:
E'!


-12
4='1L'=/
3/
4. Now we only need a function that creates the dependencies:
E'!

-12
L

1/
3/
Our reactive timer is ready!
5. Now, to instantiate the  and start it with whatever interval we like, add the following
code after the E'! class at the end of the file:
-)E'!1/
1B%/
6. At last, we need to go back to our 22!33 helper in the 
#
(
file, and  the 1 function, and every relative time in the interface will update
as time goes by.
7. To see the reactive timer in action, run the following code snippet in our browser's console:
!112
1/
1.!S./
3/
8. We should now see J logged every 10 seconds. If we now run 
1, the
timer will stop running its dependent functions. If we call 1J again, we will see
Timer ticked! now appearing every two seconds, as we set the interval to J:

As we can see, our  object is now rather flexible, and we can create any number of time intervals
to be used throughout the app.

	
Meteor's reactivity and the ! package is a very powerful feature, as it allows event-like
behavior to be attached to every function and every template helper. This reactivity is what keeps our
interface consistent.
Although we only touched the ! package until now, it has a few more properties that we should
take a look at.
We already learned how to instantiate a reactive object. We can call )!7
,
which can create and rerun dependencies using 
1 and 1.
$	
When we are inside a reactive function, we also have access to the current computational object, which
we can use to stop further reactive behavior.
To see this in action, we can use our already running  and create the following reactive function
using !1 in our browser's console:
'-%/
'=G-12
1.E.RR../
1---B%
!5

1/
3/
!112
1/
=G1/
RR/
3/

1/
1J/
Here, we create =G1 to show how we can access the current computation as well
from nested functions. In this inner function, we get the computation using
!5
, which gives us the current !5
 object.
We use the  variable, we created before the !1 function, to count up.
When we reach 10, we call !5

1, which will stop the
dependency of the inner and the !1 functions, making them nonreactive.

To see the results quicker, we stop and start the  object with an interval of two seconds at the end
of the example.
If we copy and paste the previous code snippet into our browser's console and run it, we should see
	$&& appearing 10 times:
The current computational object is useful to give us control over reactive dependencies from inside the
dependent functions.
#$	
The ! 5
 object also comes with the E property, which we have used
in an earlier chapter.
Reactive functions, for example, when created using !1 also run when they are
parsed by JavaScript for the first time. If we want to prevent this, we can simply stop the function before
any code is executed when checking whether E is :
!112
1/
1E
/
&&7
3/

0
We don't need to get the current computation here using !5
, as
!1 gets it already as its first argument.
Also, when we stop a !1 function, as described in the following code, it will
never create the dependency for the session variable, as 61 was never called in the first
run:
!112
1E
/
61.,./
3
To make sure that we make the function depending on the , session variable, we need to put it
before the  statement.
C
The ! package has a few more advanced properties and functions that allow you to control
when dependencies are invalidated (!1 and
!5
'1) and allow you to register additional callbacks on it
(!='1).
These properties allow you to build complex reactive objects, which are out of the scope of this book. If
you want to get a deeper understanding of the ! package, I recommend that you take a look at
the Meteor manual at http://manual.meteor.com/#tracker.

	%
In this chapter, we learned how to build our own custom reactive object. We learned about
!7

1 and !7
1 and saw how
reactive dependencies have their own computational objects, which can be used to stop its reactive
behavior and prevent running at start.
To dig deeper, take a look at the documentation for the ! package and see detailed property
descriptions for the !5
 object at the following resources:
â€¢ https://www.meteor.com/tracker
â€¢ https://docs.meteor.com/#/full/tracker
â€¢ https://docs.meteor.com/#/full/tracker_computation
â€¢ https://docs.meteor.com/#/full/tracker_dependency
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter9.
Now that we have finalized our blog, we will take a look at how to deploy our app on servers in the next
chapter.

 -K, 
%$(	
Our app is now ready to be deployed. In this chapter, we will see how we can deploy our app on
different servers to make it public and show the world what we built.
Meteor makes it easy to deploy applications on its own server infrastructure. It's free and quick to do,
but probably not the right place for a production environment. Therefore, we will take a look at manual
deployment as well as some great tools built to deploy on any Node.js server.
In this chapter, we will cover the following topics:
â€¢ Registering a Meteor developer account
â€¢ Deploying on Meteor's own server infrastructure
â€¢ Bundling and deploying Meteor manually
â€¢ Deploying using Demeteorizer
â€¢ Deploying using Meteor Up
0
If you want to have the full app we've built in this book to deploy, download the code from the
book's web page at https://www.packtpub.com/books/content/support/17713 or from the GitHub
repository at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter10.
This code won't have the part where dummy posts are created, so you can have a clean blog to
start with on your own server.

%$,
Meteor provides its own hosting environment, where everybody can deploy apps with a single
command, for free. In order to deploy apps, Meteor creates a developer account for us so that we can
manage and deploy our apps later. To start, let's perform the following steps to deploy our app on
meteor.com:
1. Deploying on a subdomain of meteor.com is as simple as running the following command in the
terminal from our app's folder:
	83I
We can freely choose the subdomain we want to deploy on. If
5>)< is already taken, Meteor will ask us to log in to the owner's
account to overwrite the currently deployed app, or we will have to choose another name.
2. If the domain name is free, Meteor will ask us to provide an e-mail address so that it can create
a developer account for us. After entering the e-mail address, we will receive an e-mail with a
link to set up our Meteor Developer account, as shown in the following screenshot:

3. To create our account, we need to follow the link given by Meteor so that we can fully set up
our account by adding a username and a password, as shown in the next screenshot:
4. After we have done that, we get access to our developer account's page, where we can add e-
mail addresses, check our last login, and authorize other Meteor developers to log in to our apps
(though we have to add the ##'
 package first).
5. Now, to finally deploy our app, we need to log in with our Meteor Developer account in the
terminal by using , entering our credentials, and running the 

command again:

	83I
6. Using the HX command, we can allow other
Meteor developers to deploy to our app's subdomain, as shown in the following screenshot:
7. If we want to update our deployed app, we can simply run 
 from inside
our app's folder. Meteor will ask us for our credentials, and we can then deploy our app.
If we're on a friend's computer and want to use our Meteor account, we can do so using 
. Meteor will keep us logged in and everybody can redeploy any of our apps. We need to make
sure we use  when we're finished.

%$,	$
We can also host our app on meteor.com, but can define our own domain name.
To do this, we simply deploy using our domain name, as follows:
	
This will host the app on meteor.com, but with no direct URL such as myapp.meteor.com.
To point our domain to the app on the Meteor servers, we need to change the  of our domain to
the IP address of  (which is B%KJJJB%B$$ at the time of writing this

book), or the 5> 4F record to . You can do this at the provider where you
registered your domain under the DNS configuration.
Meteor will then get a request from our domain and redirect internally to the server where our app is
located.
6	,
If you ever need to back up your database or move it to another server, you can get temporary Mongo
database credentials for the deployed database using the following command:
		$
This will get something like the following credentials:
DB/E	" L#"L
		CC
You can then use the credentials from the preceding output to back up your database using

:
		"	 L#"L

DB	

/E		CC
This will create a folder named 
&

LL where you are and put the dump files
of the database inside.
To restore it to another server, use , with the last argument being the folder where you
put the database dump:


	 L#"L


	

/ECC
			CC
If you simply want to put the data into your local Meteor app's database, start the Meteor server using 
 and run the following command:

	M##"


%$
Meteor's free hosting is great, but when it comes to using an app in production, we want to be in control
of the server we're using.
Meteor allows us to create a bundle of our application so that we can deploy it on any Node.js server.
The only downside to this is that we need to install certain dependencies ourselves. Additionally, there
are two packages out there that make deploying apps almost as simple as Meteor itself, though their
configuration is still needed.
6	
$	
In order to deploy our app on our own server, we need to have a Linux server with the latest version of
Node.js and NPM installed. The server should have the same platform as our local machine on which we
will create the bundle. If you want to deploy your app on another platform, take a look at the next
section. Now let's build the app by performing the following steps:
1. If our server fits the aforementioned requirements, we can go to our app's folder on our local
machine and run the following command:
F		I<
2. This will create  

<G with a *H file inside. We can then upload this
file to our server and extract it under Y&6& 

 for example. Then we go to the
extracted folder and run the following commands:
	


	

3. This will install all the NPM dependencies. After they're installed, we set the necessary
environment variables:
/	,G3NGCKO-(
	


	

(
/	OGG+CKO-(	/	(
/	,FD-CKO-(
	
	


	(
/	;GO+!#!#
The 
 commands will set the 48>08L?E+, E88!L?E+, and 4 =+L?E+ environment
variables.
4. As this manual deployment doesn't come with preinstalled MongoDB, we need to either install
it on our machine or use a hosted service such as Compose (http://mongohq.com). If we rather
want to install MongoDB on our server ourselves, we can follow the guide at
http://docs.mongodb.org/manual/installation.
5. The E88!L?E+ variable should be the URL of the domain pointing to our server. If our app
sends e-mails, we can additionally set our own SMTP server or use a service such as Mailgun
(http://mailgun.com) and change the SMTP host in the 4 =+L?E+ variable.

We can also specify the port on which we want our app to run using the 8E! environment
variable. If we don't set the 8E! variable, it will use port N% by default.
6. After we set these variables, we go to the root folder of our app and start the server using the
following command:


If you want to make sure your application is restarted in case it crashes or when the server is
rebooted, take a look at the ' NPM package, which is explained at https://github.com/
nodejitsu/forever.
If everything goes fine, our app should be reachable at '.
N%N%.
In case we run into trouble by manually deploying our app, we can use the next approach.

%$	$7
The disadvantage of using  is that most node modules are already compiled, and
therefore can cause problems in the server's environment. Hence comes Demeteorizer, which is very
similar to  but will additionally unpack the bundle and create a 
(
file with all the node dependencies and the correct node version for the project. Here is how we deploy
using Demeteorizer:
1. Demeteorizer comes as an NPM package, which we can install using the following command:
	
E
0
If the 
 folder doesn't have the right permissions, use  before the command.
2. Now we can go to our app's folder and type the following command:
EP
3. This will output the ready-to-distribute app to the ###' folder.
We just copy this folder to our server, set the same environment variables as described earlier,
and run the following command:


	


This should start our app on the port we specified.


%$	$'
The previous steps help us to deploy our app on our own server, but this method still requires us to
build, upload, and set the environment variables.
' (	) aims to make deploying as easy as running 
. However, if we
want to use Meteor Up, we need to have full admin rights on the server.
Additionally, this allows us to auto-restart the app in case it crashes, using the ' NPM package,
as well as start the app when the server reboots, using the 
 NPM package. We can also revert
to the previously deployed version, which gives us a good basis for deployment on the production
environment.
0
The next steps are for more advanced developers, as they require setting up  rights on the server
machine. Therefore, if you're inexperienced in deployment, consider using a service such as Modulus
(http://modulus.io), which offers online Meteor deployment using its own command-line tool, available
at https://modulus.io/codex/meteor_apps.
Meteor Up will set up the server and deploy our app as follows:
1. To install 
 on our local machine, we type the following command:
	
	
2. Now we need to create a folder for our deployment configuration, which could be in the same
folder where our app is located:
%P	
P	
	
3. Meteor Up creates a configuration file for us, which will look like the following:
2
A'A:
2
AAAA9
AAAA9
A
)AA
)A
&&
1
&&A
AAY&&LA
3
;9
A
4A9
A
>A9
A,AA%B%JPA9

A
A9
A

>AAA9
A

AA&?&&4&#

A9
A'A2
A8E!AN%9
AE88!L?E+AA
&&

A9
A48>08L?E+A
A&&N(K	B%%J$&4 

A9
A4 =+L?E+A
A
&&
ZM%

(NK(K	

ONK&A
39
A
5@!ABO
3
4. Now we can edit this file to work for our server environment.
5. First, we will add the SSH server authentication. We can provide either our RSA key file or a
username and a password. If we want to use the latter, we need to install 
, a tool used
to provide SSH passwords without using the command line:
A'A:
2
AAA6'A9
AAA(A9
A
)AAHA
&&
1
&&A
AAY&&LA
3
;9
0
To install 
 for our environment, we can follow the steps at https://gist.github.com/
arunoda/7790979, or if you're on Mac OS X, take a look at http://www.hashbangcode.com/blog/
installing-sshpass-osx-mavericks.
6. Next, we can set some options, such as choosing to install MongoDB on the server. If we use a
service such as Compose, we will set it to :
A
4A9
If we already have Node.js installed on our server, we will also set the next option to :
A
>A9
If we want to mention a specific Node.js version, we can set it as follows:
A,AA%B%JOA9

Meteor Up can also install PhantomJS for us, which is necessary if we use Meteor's spiderable
package, which makes our app crawlable by search engines:
A
A9
In the next option, we will set the name of our app, which can be the same as our app's folder
name:
A

>AA##A9
Finally, we point to our local app folder so that Meteor Up knows what to deploy:
A

AAY&##A9
7. Meteor Up also lets us preset all the necessary environment variables, such as the correct
48>08L?E+ variable:
A'A2
AE88!L?E+AA
&&6'A9
A48>08L?E+AA&&
)	
&
A9
A8E!AN%N%
39
8. The last option sets the time Meteor Up will wait for before checking whether the app started
successfully:
A
5@!ABO
$	
In order to set up the server using Meteor Up, we need a no-password access to . Perform the
following steps to set up the server:
1. To enable no-password access, we need to add our current user to the server's  group:


5
:

2. Then add >8 66@7 to the  file:



3. Now replace the Z ++-1 ++ ++ line with the following line:
Q
F--'F--)3G;F22.BF--


%$ 	
If everything has worked fine, we can set up our server. The following steps explain how we can deploy
with 
:
1. Run the following command from inside the local ###
 folder:
	
	
This will configure our server and install all requirements chosen in our configuration file.
Once this process is done, we can deploy our app any time by running the following command
from the same folder:
		
This way, we can also create production and staging environments by creating two separate Meteor Up
configurations with two distinct app names, and deploy it to the same server.

(	

Currently, Meteor limits native deployment to its own servers, with limited control over the
environment. Planned is an enterprise-grade server infrastructure called "
&%, which will make
deploying and scaling Meteor apps as simple as Meteor itself.
Nonetheless, with Meteor's simplicity and great community, we already have a rich set of tools available
to deploy to any Node.js-based hosting and PaaS environment.
0
For example, if we wanted to deploy on Heroku, we can take a look at the build pack by Jordan Sissel at
https://github.com/jordansissel/heroku-buildpack-meteor.

	%
In this chapter, we learned how to deploy Meteor and how simple deploying on Meteor's own server
infrastructure can be. We also used tools such as Demeteorizer and Meteor Up to deploy on our own
server infrastructure.
To read more about the specific deployment methods, take a look at the following resources:
â€¢ https://www.meteor.com/services/developer-accounts
â€¢ https://docs.meteor.com/#/full/deploying
â€¢ https://www.meteor.com/services/build
â€¢ https://github.com/onmodulus/demeteorizer
â€¢ https://github.com/arunoda/meteor-up
You can find the full example code of this app, ready for deployment, at https://www.packtpub.com/
books/content/support/17713 or on GitHub at https://github.com/frozeman/book-building-single-page-
web-apps-with-meteor/tree/chapter10.
In the next chapter, we will create a package of our previously created E'! object and
publish it to Meteor's official package repository.

 --, 6	
$(	( #$
In this chapter, we will learn how to build our own package. Writing packages allows us to create
closed-functionality components that can be shared between many apps. In the second half of the
chapter, we will publish our app on Atmosphere, Meteor's third-party package repository, at
https://atmospherejs.com.
In this chapter, we will cover the following topics:
â€¢ Structuring a package
â€¢ Creating a package
â€¢ Publishing your own package
0
In this chapter, we will package the E'! object that we built in Chapter 9,
#

. To follow the examples in this chapter, download the previous chapter's
code examples from either the book's web page at https://www.packtpub.com/books/content/
support/17713 or from the GitHub repository at https://github.com/frozeman/book-building-
single-page-web-apps-with-meteor/tree/chapter10.
		$
A package is a bundle of JavaScript files that exposes only specific variables to a Meteor app. Other
than in a Meteor app, package files will get loaded in the loading order we specify.
Every package needs a 
( file that contains the configuration of that package. In such a file,
we can add a name, description, and version, set the loading order, and determine which variables
should be exposed to the app. Additionally, we can specify unit tests for our packages to test them.
An example of a 
( file can look like this:
12
AA9
A4(9D'6
A9
'A%%BA9
A
&&A
3/
?11
9)2


1../

G1.&#)#(.9../
3/
!11
2

1:AA9AA;9:AA9A'A;/


G1A&(A9:AA9A'A;/
3/
We can structure the files and folders in our package as we wish, but a good basis is the following
arrangement:
â€¢ : This contains the package's unit tests and the ( file
â€¢ : This contains third-party libraries used by the package
â€¢ EF 74F: This contains simple instructions on how to use the package
â€¢ 
(: This contains the package's metadata
â€¢ (: These are one or more files that contain the package code
To test a package, we can use Meteor's  package, which is a simple unit testing package. If
we have tests, we can run them using the following command:

	%
5	%:
This will start a Meteor app at 
&&$%%%, which runs our package tests. To see how
to write a package, take a look at the next chapter.

$	 $
To create our own package, we will use our E'! object, which we built in Chapter 9,
#

:
1. We go to our terminal, in our app's folder and run the following command:
	%
2. This will create a folder named 
 with a '# folder inside it. Inside
the '# folder, Meteor has already created a 
( file and some
example package files.
3. Now we can delete all the files inside the '# folder, except the 
(
file.
4. Then we move the ##&&E'!( file, which we
created in Chapter 9, #

, to our newly created '# package
folder.
5. Lastly, we open the copied E'!( file and remove the following lines:
-)E'!1/
1B%/
Later, we'll instantiate the  object inside the app itself and not in the package file.
We should now have a simple folder with the default 
( file and our
E'!( file. This is almost it! We just need to configure our package and we are ready
to use it in our app.
$$
To add the package's metadata, we open the file called 
( and add the following lines of
code:
12
A#'#A9
A 
(9)#'
'A9
'A%%BA9
&&

A
&&&H&#'#A
3/
This adds a name to the package as well as a description and a version.
Note that the package name is namespaced with the author's name. This exists so that packages with the
same name can be made distinct through the names of their authors. In our case, we choose #

, which is not a real username. To publish the package, we need to use our real Meteor developer
username.
After the 1 function come the actual package dependencies:
?11
2
&&4
B%

'G1.4F!F8E	B%./
&&)4


1..9../
&&
E'!'


1.E'!./
&&))

G1.E'!(.9../
3/
Here, we define the version of the Meteor core packages this package should use:
â€¢ With 
1, we define an additional package (or packages) this package depends on.
Note that these dependencies won't be accessible to the app itself, which uses this package.
0
Additionally, there exists 

1, which not only makes another package available in
the package's files, but also adds it to the Meteor app itself so that it can be accessed by the app's
code.
â€¢ If we use a third-party package, we must specify the minimum package version as follows:
	
'(
;%"##(=(
()1
0
We can also pass in a third parameter, 2)3, to specify that the dependent package
will only be used if it is already added to the app by the developer. This can be used to enhance
a package when other packages are present.
â€¢ In the second parameter of the 
1 function, we can specify whether to load it on the
client, server, or both, using an array:
	
'(%(=R((=(
(S)1


We don't really need to import the ! package, as it's already a part of Meteor's core
#
 package (added by default to any Meteor app); we do this here for the
sake of an example.
â€¢ We then use 

1.E'!. to define which variable of the package
should be exposed to the Meteor app using this package. Remember that we created the
E'! object inside the E'!( file using the following lines of
code:
E'!-112

31/
0
Note that we didn't use ' to create the variable. This way, it is accessible in all the other files
of the package and can also be exposed to the app itself.
â€¢ Lastly, we tell the package system which files belong to the package, using

G1. We can have multiple calls of 
G1 one after the other.
This order will then specify the loading order of the files.
Here, we can again tell Meteor where to load the fileâ€”on the client, the server, or bothâ€”using
:..9.'.;.
In this case, we only provide the E'! object on the client, as Meteor's reactive
functions exist only on the client side.
0
If you want to see a full list of methods on the 
 object, take a look at Meteor's
documentation at http://docs.meteor.com/#packagejs.
$$
Copying a package folder to the ##&
 folder is not enough to tell Meteor to
use the package. There are additional steps that we need to follow:
1. To add the package, we need to go to our app's folder from the terminal, quit any currently
running  instance, and run the following command:
%
2. We then need to instantiate the E'! object in our app. To do this, we add the
following lines of code to our ##&( file:

1452
-)E'!1/
1B%/
3
3. Now we can start the Meteor app again using  and open our browser at

&&$%%%.
We shouldn't see any difference, as we just replaced the E'! object that was already there
in our app with the E'! object from our #'# package.
To see the timer run, we can open our browser's console and run the following code snippet:
!112
1/
1../
3/
This should log  every 10 seconds, showing us that the package is actually working.


$	$	

It's very easy to release a package to the world, but for people to use our package, we should add a
readme file so they can know how to use our package.
Create a file called EF 74F in the package folder we created earlier and add the following code
snippet:
CE'!
!
'''
CC=
#'#
CC?
!9)'
'!-)E'!1/
!'B%
!1B%/
!()'
!1/
!

!
1/
As we can see, this file uses the markdown syntax. This way, it will look good on GitHub and
http://atmospherejs.com, which is the website where you can browse all the available Meteor packages.
With this readme file, we will make it easy for other people to use the package and appreciate our work.
#	
$	$

After we have saved the readme file, we can push the package to GitHub or any other online Git
repository, and add the repository's URL to the 12U3 variable of

(. Keeping the code on GitHub keeps it safe and allows others to fork and improve it. Let's
perform the following steps to push our package online:
1. To publish our package, we can simply run the following command from inside the 

folder in the terminal:

	

This will build and bundle the package and upload it to Meteor's package servers.
2. If everything goes fine, we should be able to find our package by typing the following
command:


This is illustrated in the following screenshot:
3. We can then show all of the information about the found package using the following command:

%
This is illustrated in the following screenshot:
4. To use the package version from the Meteor server, we can simply move the 
&
'# folder somewhere else, remove the 
 folder, and run 
to start the app.
Now Meteor won't find any package with that name in the 
 folder and will look
online for that package. Since we published it, it will be downloaded and used in our app.

5. Should we want to use a specific version of our package in the app, we can run the following
command from inside our app's folder in the terminal:
%##"
Now our package is released and we can see it on Atmosphere at 
&&
(&
#&'#, as shown in the following screenshot:

0
Note that this is just an example of a package and was never actually released. However, a published
version of this package under my name can be found at http://atmospherejs.com/frozeman/reactive-
timer.
'$	$
If we want to release a new version of our package, we can simply increase the version number in the

( file and publish a new version using the following command from inside the 

folder:
	

To make our app use the latest version of our package (as long as we didn't specify a fixed version), we
can simply run the following command from inside our app's folder:
	%
If we want to update all packages, we can run the following command:
	$	%


	%
In this chapter, we created our own package from our E'! object. We also learned how
simple it is to publish a package on Meteor's official packaging system.
To dig deeper, read the documentations at the following resources:
â€¢ https://docs.meteor.com/#/full/writingpackages
â€¢ https://docs.meteor.com/#packagejs
â€¢ https://www.meteor.com/services/package-server
â€¢ https://www.meteor.com/isobuild
You can find this chapter's code examples at https://www.packtpub.com/books/content/support/17713 or
on GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter11.
This code example contains only the package, so in order to add it to the app, use the code example of
the previous chapter.
In the next chapter, we will take a look at testing our app and package.

 -5, $
In this final chapter, we will discuss how we can test a Meteor app.
Testing is a comprehensive topic and it goes beyond the scope of this chapter. To keep it simple, we will
briefly cover two tools available, as they are certainly different, and show a simple example for each.
In this chapter, we will cover the following topics:
â€¢ Testing the '# package
â€¢ Using Jasmine to conduct unit tests on our app
â€¢ Using Nightwatch to conduct acceptance tests on our app
0
If you want to jump right into the chapter and follow the examples, download the code of
Chapter 10, ',#, which contains the finished example app, either from the
book's web page at https://www.packtpub.com/books/content/support/17713 or from the GitHub
repository at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/
tree/chapter10.
%
Tests are pieces of code that test other pieces of code or functionality of an app.
We can divide tests into four general groups:
â€¢ ': In this test, we test only a small unit of our code. This can, for example, be a function
or a piece of code. Unit tests should not call other functions, write to the hard disk or database,
or access the network. If such functionality is needed, one should write stubs, which are
functions that return the expected value without calling the real function.
â€¢ +$: In this test, we combine multiple tests and run them in different environments
to make sure that they still work. The difference in this test compared to the unit test is that we
are actually running connected functionalities, such as calling the database.
â€¢ 	
: This can be a unit test or tests in the interface, but will only test the
functionality of a feature/function without checking for side effects, such as whether or not
variables were cleaned up properly.
â€¢ : This runs tests on the full system, which can, for example, be a web browser.
The idea is to mimic the actual user as much as possible. These tests are very similar to user
stories that define a feature. The downside is that they make it hard to track down bugs, as the
test occurs on a higher level.
In the following examples, we will mostly write functional tests for simplicity.

$$
In the previous chapter, we built a package out of the E'! object. A good package should
always contain unit tests so that people can run them and be sure that changes to that package don't
break its functionality.
Meteor provides a simple unit test tool for packages, called !!, which we will use to test our
package:
1. To add tests, we need to copy the #'# package, which we
built in the previous chapter, to the ##&
 folder of our app. This
way, we can make changes to the package, as Meteor will prefer the package in the 

folder over one in its package servers. If you removed the package, simply add it back using the
following command:
%
0
Additionally, we need to make sure we delete the ##&&
E'!( file, which we should have if we used the code example from Chapter
10, ',#, as a basis.
2. Then we open the 
( file from our 
 folder and add the following lines of
code to the end of the file:
!11
2

1.#'#.9../

1..9../

G1.&(.9../
3/
This will include our #'# package and  when
running tests. It will then run the ( file, which will contain our unit tests.
3. Now, we can create the tests by adding a folder called  to our package's folder and create
a file called ( inside.
Currently, the  package is not documented by Meteor, but it is tiny, which means it
is very simple.
Basically, there are two functions, !1 and
! 19
. They both run a simple test function, which we
can pass or fail using 19, !1, or
?1.

For our package tests, we will simply test whether E'!L'= is not
null after we started the timer, and we will know whether the timer runs or not.
$$
The test is built by first describing what will be tested.
To test for L'=, we add the following lines of code to our ( file:
!1.!L'=

.9
12
'-)E'!1/
1B/
!1L'=S--/

1/
3/
Then we start a timer and test whether its L'= property is not null anymore. At the end, we
stop the timer again to clean up the test.
The next test we will add to our ( file will be asynchronous, as we need to wait for the timer
to run at least once:
! 1.!.919
2
'-9
-)E'!1/
1B/
!112
1/
1SE
-/
3/
4!112
19/

1/

1/
39B%B%/
3/
Let's take a look at what is happening in this asynchronous test:

â€¢ First, we started the timer again with an interval of 1 second and created a variable called .
We then switched this variable to  only when our reactive !1
function ran. Note that we used 1SE to prevent the  variable from being
set when the function runs the first it's executed, as we only want the "tick" after 1 second to
count.
â€¢ We then used the 4!1 function to check whether  was changed to
. The 
1 tells ! 1 that the test is over and outputs the
result. Note that we also stopped the timer, as we always need to clean up after each test.
	$$
To finally run the test, we can run the following command from our app's root folder:

	%
%
This will start a Meteor app and run our package tests. To see them, we navigate to

&&$%%%:

We can also run a test for more than one package at the same time by naming multiple packages
separated by spaces:

	%
%
To see if the test works, we will deliberately make it fail by commenting out
4='1 in the ##&
&'#&
E'!( file, as shown in the following screenshot:

We should always try to make our test fail, as a test could also be written in a way that it never succeeds
or fails (for example, when 
1 was never called). This would stop the execution of other tests,
as the current one could never finish.
A good rule of thumb is to test functionality as if we are looking at a black box. If we customize our
tests too much depending on how a function is written, we will have a hard time fixing tests as we
improve our functions.

$	
To test the app itself, we can use Velocity Meteor's official testing framework.
Velocity itself doesn't contain tools for testing, but rather gives testing packages such as Jasmine or
Mocha a unified way to test Meteor apps and report their output in the console or the apps interface
itself using the '#
 package.
Let's quote their own words:
9
	


:







*.









9



*9











*%


09
	






*
This is taken from http://velocity.meteor.com. Additionally, Velocity adds features such as Meteor stubs
and automatic stubbing. It can create mirror apps for isolated testing and run setup code (fixtures).
We will now take a look at unit and integration tests using Jasmine and acceptance tests using
Nightwatch.
$	$L
To use Jasmine with Velocity, we need to install the (( package along with the
'#
 package.
To do this, we'll run the following command from inside our apps folder:
	
Then we install Jasmine for Meteor using the following command:



In order that Velocity can find the tests, we need to create the following folder structure:
###
#
#(
#
#
#
#'
#

Now, when we start the Meteor server using , we will see that the Jasmine package has
already created two files in the &##&&(&'& folder,
which contains stubs for our packages.
$	
Now we can add unit tests to the client and the server. In this book, we will only add a unit test to the
server and later add integration tests to the client to stay within the scope of this chapter. The steps to do
so are as follows:
1. First, we create a file called 
6
( within the &##&&
(&'& folder and add the following command:
1..912
This will create a test frame describing what the test inside will be about.
2. Inside the test frame, we call the F1 and F1 functions, which will
run before and after each test, respectively. Inside, we will create stubs for all Meteor functions
using 461 and clean them afterwards using
461:
F112
461/
3/
F112
461/
3/
0
A stub is a function or object that mimics its original function or object, but doesn't run actual
code. Instead, a stub can be used to return a specific value that the function we test depends on.
Stubbing makes sure that a unit test tests only a specific unit of code and not its dependencies.
Otherwise, a break in a dependent function or object would cause a chain of other tests to fail,
making it hard to find the actual problem.
3. Now we can write the actual test. In this example, we will test whether the 
method we created previously in the book inserts the post, and makes sure that no duplicate slug
will be inserted:
1..912

819.8.G112
&&/
2.6!.3/
3/


819../

8149..,12LM$JB9

2.D.33/

819..G112
&&(/
212
BJ$M/
33/
3/
First, we create stubs for all the functions we are using inside the  method to
make sure that they return what we want.
Especially, take a look at the 
819A8A call. As we can see, we call a
fake function and return a fake document with just a title. Actually, we can return anything as
the  method only checks whether a document with the same slug was found or
not.
4. Next, we actually call the method and give it some post data:
41..92
.4!.9

.+
.9
.+
.9
.#.
39192
5. Inside the callback of the method, we add the actual tests:

1<1/
&&)

151.#./

1<0!1N/
&&)


1"'<5@12
.4!.9

.+
.9
.+
.9
9
5BJ$M9
)M$JB9
.D.
3/

3/
3/
First, we check whether the error object is null. Then we check whether the resultant slug of the
method contains the .#. string. Because we returned a fake document in the
81 function earlier, we expect our method to add some random number to
the slug such as .##'M$.. Therefore, we check whether the length
is bigger than the eight characters of the original .#. string.
At last, we check whether the 1 function was called with the expected values.
0
To fully understand how you can test Jasmine, take a look at the documentation at
https://jasmine.github.io/2.0/introduction.html.
You can also find a good cheat sheet of Jasmine functions at http://www.cheatography.com/
citguy/cheat-sheets/jasmine-js-testing.
6. Finally, we close the 1 function at the beginning:
3/
If we now start our Meteor app again using , after a while we'll see a green dot appearing in
the top-right corner.
Clicking on this dot gives us access to Velocity's #
 and it should show us that our test
has passed:

To make our test fail, let's go to our ##&( file and comment out the
following lines:
1812
73

7-
7R.#.R
4161$P1$/
This will prevent the slug from getting changed, even if a document with the same slug already exists,
and fail our test. If we go back and check in our browser, we should see the test as failed:

We can add more tests by just adding a new 1.H.9123/
function.
$$

Adding integration tests is as simple as adding unit tests. The difference is that all the test specification
files go to the ##&&(&& folder.
Integration tests, unlike unit tests, run in the actual app environment.
$
In our first example test, we will test to ensure that visitors can't see the # button. In the
second test, we will log in as an administrator and check whether we are able to see it.
1. Let's create a file named 
<6
( in our ##&&
(&& folder.
2. Now we add the following code snippet to the file and save it:
1.,.912
1.
.912

''-F1.7=,./
<H1!
9'/

11'1.>).:%;<71/
3/
3/
Here we manually create a ' HTML element and render the  template inside. After that, we
check whether the >) link is present.
If we go back to our app, we should see the integration test added and passed:

In case the test doesn't show up, just quit and restart the Meteor app in the terminal again.

$
In the second test, we will first log in as administrator and then check again whether the button is
visible.
We add the following code snippet to the same 
<6
( file as the one we used
before:
1.! .912
F112
41/
3
1.
.9
12
''-F1.7=,./
<H1!
9'/
4@)1.(	
.9.BJ$M.9
12
!G112

11'1.>).:%;<71/

1<?1/
1/
3/
3/
3/
3/
Here we add the  template to a ' again, but this time we log in as an admin user, using our
admin credentials. After we have logged in, we call !G1 to give Meteor time
to re-render the template and then check whether the button is now present.
Because this test runs asynchronously, we need to call the 1 function, which we passed as an
argument to the 1 function, telling Jasmine that the test is over.
0
Our credentials inside the test file are secure, as Meteor doesn't bundle files in the  directory.
If we now go back to our browser, we should see the two integration tests as passed:

After creating a test, we should always make sure we try to fail the test to see whether it actually works.
To do so, we can simply comment out the >) link in ##&
&
&.
0
You can run Velocity tests using PhantomJS as follows:


You first need to install PhantomJS globally with 
#
(. Be aware that
this feature is experimental at the time of writing this book and might not run all your tests.


Though we can test client and server code separately with these tests, we can't test the interaction
between the two. For this, we need acceptance tests, which, if explained in detail, would go beyond the
scope of this chapter.
At the time of this writing, there is no acceptance testing framework that is implemented using Velocity,
though there are two you can use.
0$ 
The ) package allows you to run an acceptance test in a simple way as
follows:
A"@A12

1A
&&BJK%%B$%%%A
)GF,1AA9B%%%
1A"@A
1/
3
Though the installation process is not as straightforward as installing a Meteor package, you need to
install and run MongoDB and PhantomJS yourself before you can run the tests.
If you want to give it a try, check out the package on atmosphere-javascript website at
https://atmospherejs.com/clinical/nightwatch.
2
If you want to test the communication between the server and the client, you can use Laika. Its
installation process is similar to Nightwatch, as it requires separate MongoDB and PhantomJS
installations.
Laika spins up a server instance and connects multiple clients. You then can set up subscriptions or
insert and modify documents. You can also test their appearance in the clients.
To install Laika, go to http://arunoda.github.io/laika/.
0
At the time of this writing, Laika is not compatible with Velocity, which tries to run all the files in the
test folder in Laika's environment, causing errors.

	%
In this final chapter, we learned how to write simple unit tests using the (( package for
Meteor's official testing framework, Velocity. We also took a brief look at possible acceptance test
frameworks.
If you want to dig deeper into testing, you can take a look at the following resources:
â€¢ http://velocity.meteor.com
â€¢ http://jasmine.github.io
â€¢ http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing
â€¢ http://doctorllama.wordpress.com/2014/09/22/bullet-proof-internationalised-meteor-
applications-with-velocity-unit-testing-integration-testing-and-jasmine/
â€¢ http://arunoda.github.io/laika/
â€¢ https://github.com/xolvio/velocity
You can find this chapter's code files at https://www.packtpub.com/books/content/support/17713 or on
GitHub at https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/
chapter12.
Now that you have read the whole book, I assume you know a lot more about Meteor than before and
are as excited about this framework as I am!
If you have any questions concerning Meteor, you can always ask them at http://stackoverflow.com,
which has a great Meteor community.
I also recommend reading through all Meteor subprojects at https://www.meteor.com/projects, and study
the documentation at https://docs.meteor.com.
I hope you had a great time reading this book and you're now ready to start making great apps using
Meteor!

& , &
This appendix contains a list of Meteor's command-line tool commands and a short description of
 hooks.
2.


(


Using  is the same as using . This will start a Meteor server
for our app and watch file changes.
 This will initialize a Meteor project by creating a folder with the same name with
some initial files.


This will update our current Meteor app to the latest release. We can also use

##H to fix our Meteor app to a specific release.



This will deploy our Meteor app to.
We can pass the ## option to remove a deployed app

L
This will create a folder with our bundled app(s) code ready to be deployed on our
own server.
&'



This will add or remove a Meteor core package to/from our project.

This will list all Meteor packages our app is using.

This will give us access to our local MongoDB shell. We need to also have our
application started with  at the same time.
If we need access to the mongo database of a app deployed on meteor.com, use 


##
But be aware that these credentials are only valid for 1 minute.

(


This will reset our local development database to a fresh state. This won't work
when our application is running. Be aware that this will remove all our data stored
in our local database.


This will download and display the logs for an app we deployed at 


This searches for Meteor packages and releases, whose names contain the specified
regular expression.
)
This shows more information about a specific package or release: name, summary,
the usernames of its maintainers, and, if specified, its home page and Git URL.


This publishes our packages. We must before go to the package folder using the cd
command, log in to our Meteor account using .
To publish a package for the first time, we use 
##
.

##

This publishes a build of an existing package version from a different architecture.
,







*
Currently, the supported architectures for Meteor are 32-bit Linux, 64-bit Linux,
and Mac OS. The servers for Meteor 
 run with a 64-bit Linux.

#

This publishes a release of Meteor. This takes in a JSON configuration file.
For more detail, visit https://docs.meteor.com/#/full/meteorpublishrelease.

This claims a site deployed with an old Meteor version with our Meteor developer
account.

This logs us in to our Meteor developer account.

This logs us out of our Meteor developer account.

(

)
This prints the username of our Meteor developer account.
#
 This will run tests for one or more packages. For more information, refer to
Chapter 12, .
	

.

This catches for miscellaneous commands that require authorization to use.
Some example uses of meteor  include adding and removing package
maintainers and setting a home page for a package. It also includes various help
functions for managing a Meteor release.

	
The following table contains a list of router controller hooks:

This function can overwrite the default behavior of the route. If we define this
function, we have to manually render the template using 1.
<  This function runs before the route gets rendered. Here, we can put extra custom
actions.
  
This function runs after the route gets rendered. Here, we can put extra custom
actions.
E
This function runs once when the route is first loaded. This function doesn't run
again on a hot code reloads or when the same URL is navigated again.
E
This function will be called every time the route is called.
6
This function runs once when leaving the current route to a new route.


This function can return subscription(s) that affect 1 in the action
hooks
)8
This function can return subscription(s), but will automatically render the
!
 until those are ready.

The return value of this function will be set as the data context of this routes
template.
A full explanation of these hooks can be found at the following resources:
â€¢ https://github.com/EventedMind/iron-router/blob/devel/Guide.md#layouts
â€¢ https://github.com/EventedMind/iron-router/blob/devel/Guide.md#hooks
â€¢ https://github.com/EventedMind/iron-router/blob/devel/Guide.md#rendering-templates-with-
data

# ++, 	
5

,;3



0

	
	



 -, (7$G	
 
In this chapter, we will cover the following topics:
â€¢ Installing Meteor
â€¢ Finding documentation for Meteor
â€¢ Getting help with questions
â€¢ Setting up your project file structure
â€¢ Setting up your development environment
â€¢ Using the web console
â€¢ Deploying a test app to Meteor
â€¢ Deploying to Meteor using a CNAME redirect
â€¢ Deploying to a custom hosted environment
â€¢ Deploying with Meteor Up (MUP)
â€¢ Using CoffeeScript
â€¢ Using CSS compilers
+	
Welcome to the wonderful world of Meteor! This chapter will walk you through some of the best
practices for optimizing your Meteor workflow. From installing Meteor to deploying your finished
application on your own custom server, the recipes found here will get you up and running and provide a
great reference as you start working with Meteor on a daily basis.

+

$
The folks at Meteor have made installation a breeze. As long as the system you're working on (Linux or
Mac OS X) is reasonably up to date, installing Meteor should be very simple. We have included it as a
recipe so that when you're installing Meteor on a new machine, you have it handy. We will also include
installation instructions directly from GitHub, just in case you want to use a development branch.
"$%
You must have  installed in order to install Meteor. If you are on Mac OS X,  is already
installed. If you are on Linux,  is usually installed. To check for , open a terminal window
and execute the following command:

If  is installed, you will receive the following message:
(	(((
If  isn't installed, you will receive a message similar to the following:


3

To install , use 
# or  (depending on your Linux version). The following is the
command to install  on Ubuntu. Simply replace 
# with  in the command to install it
on Fedora, Debian, or CentOS:

	

You should see an installation message, with perhaps a prompt to install. Complete the installation
process; you will then be ready to install Meteor.
1 ,,,
Open a terminal window and execute the following command:
	



1  ,,,
The 
&&& command is used to retrieve an installation script
directly from Meteor. Once the script is downloaded, the V argument tells your system to execute
the script, which installs Meteor at &&&& (which should be in your path). Once
the entire script is executed, you will be able to run the  command from any location.

.,,,
The preceding recipe covers the default/stable Meteor installation. If you'd like to install Meteor directly
from the source code or if you'd like to install a development branch (for example, the current nightly),
you can do so using .
The Meteor repository is located at https://github.com/meteor/meteor. You can find various development
branches at this location, in addition to the main Meteor repository.
Assuming you have  installed and would like to install the main Meteor build, open a terminal
window and execute the following command:

This will clone the latest Meteor build into a subfolder named . Note that this does not install
Meteor globally on your machine. This means that in order to run the  command, you will need
to navigate to (or reference) the  folder where you just cloned the Meteor repository.

Various other installation arguments and customizations can be used, depending on your situation. To
see more comprehensive instructions, visit the Meteor GitHub main EF 74F page at
https://github.com/meteor/meteor.

$	
Meteor has finally reached version 1.0, and as such, it's various libraries and features are beginning to
stabilize. However, there are still some parts of Meteor that are in flux. It is therefore important to have
the latest documentation handy. This recipe will show you where you can find the official Meteor
documentation when you need it.
1 M
Simply navigate to http://docs.meteor.com/ in a browser and bookmark the page.
1  M
That's all there is to it. The Meteor folks keep the documentation up to date, and you can be sure to find
all production-ready features, along with a lot of great advice, at that location.
.M
If you would like to have an offline copy of the documentation and still make sure you have the latest
and greatest version of documentation, you can use Meteor's GitHub repository to serve up a local copy
of the latest documentation.
To get the initial copy of the documentation, navigate to where you would like to store the
documentation (for example, your 7 directory) and clone the latest Meteor repository with
the following command:

If you've already done this, and would like to make sure you have the latest and greatest, navigate to the
 subfolder (created when you did the initial Git clone) and run the following command:
	

This will update the Meteor repository with the latest and greatest.
Once you've got the latest documentation, you can access it via a web browser by navigating to the
 directory:


Then, run the  command:

Once the packages are updated, the Meteor documentation project will start and you will see the
following in the command line:

:,
	
M###
You can now use a browser to navigate to 
&&$%%%& and read the latest
documentation.

"$
 /	
The more you use Meteor, the more familiar the major packages will become. However, you may also
want to start branching out and doing more advanced things with some of the lesser-known packages.
You may also come up with an idea for a new application of Meteor. In any case, you will eventually run
into a situation where you need more information than what is contained in the documentation. Here are
some quick tips on where to go when you need your questions answered.
1 M
There are three major sources for getting your questions answered:
1. For specific technical questions or problems, head over to http://stackoverflow.com/questions/
tagged/meteor. Search for questions others have already asked; if you can't find an answer, go
ahead and submit a question of your own.
2. For general questions and comments, visit the Meteor forums at https://forums.meteor.com/.
3. To work in real time with multiple Meteor developers (including members of the core team),
you can visit the IRC #meteor chat room on .
1  M
Let's look at some tips on using each of the previously mentioned resources.
(
 
Stack Overflow is a very active community of developers, many of whom are eager to help others with
their technical questions. For Meteor-specific help, once you've navigated to http://stackoverflow.com/
questions/tagged/meteor, you can perform a search using the keywords that best describe your question,
for example, if you are interested in getting Meteor to work inside a PhoneGap application, you may
want to search all the tagged NO questions for ', as follows:
This will search all the previously submitted questions tagged with the keyword NO, which also
contain the word ' somewhere in the question. You will want to look through the results to see
whether your question has already been asked. If one of the questions (and the answer to that question)
satisfies your needs, great! If your question hasn't been answered already, you can ask your own
question.
Click on the button labeled *	:

Fill out the details of your question. Don't forget to include tags to more easily identify and categorize
your question. Submit your question and the Stack Overflow community will most likely have an
answer for you very quickly.
	
Meteor forums are also very active, with lots of enthusiastic Meteor developers visiting the site daily.
You can ask questions, view discussions, and leave comments on a lot of different Meteor-related topics.
Most of the time, if you have a technical question or problem, it's best to use Stack Overflow. However,
forums are also a great resource for more abstract or specific questions about Meteor.
9+
The #meteor IRC channel is a great channel to join in and listen to. You'll be able to interact with all
kinds of brilliant developers, many of whom are willing to answer your questions immediately. Do keep
in mind that most questions or problems you're having (especially when you're new to Meteor) have
already been addressed on Stack Overflow or the Meteor forums, and it is courteous to first check and
make sure your question hasn't been answered there before asking in the IRC chat.
.M
Keep in mind that since Meteor is still new, there are many who are struggling with questions that you
may be able to answer. Also, when you find the answer to your own question, it may be worth putting it
up on Stack Overflow. This will help you save time for other people who may run into the same
problem.
Answering other people's questions on Stack Overflow, the Meteor forums, and even on #meteor IRC is
a great way to contribute to the community.

Don't forget to answer your own questions on Stack Overflow, if you happen to find the answers
yourself!

$	%	C
		
When you spin up a new project in Meteor, the default file configuration is built to get you up and
running immediately. That's great, but if you're looking to keep your code optimized and easily
understood, you'll need to tweak the file structure a bit. The following recipe maps out the file structure
that you can use for the majority of your projects.
"$%
You'll want to create a new base Meteor project, which we will then modify to suit our needs. In a
terminal window, navigate to the folder where you would like to create the project and enter the
following command to create a project called G!
:
<+	

 
$&

You can download the example code files from your account at http://www.packtpub.com for all the
Packt Publishing books you have purchased. If you purchased this book elsewhere, you can visit
http://www.packtpub.com/support and register to have the files e-mailed directly to you. Optionally, the
code samples can also be downloaded from https://github.com/strack/PacktMeteorRecipes.
This will create the base file structure. Now, navigate to the folder in the File Explorer window of your
choice. For this exercise, we'll use a Mac OS X Finder window so that we can visualize the folder
structure:

Always start with a fresh Meteor project (don't try to create your folder structure manually). Even
though the file structure looks simple, there are hidden files and folders created by the 
 command that you can't live without!

1 M
To set up your project file structure, proceed with the following steps:
1. In your root folder, delete the default , (, and  files. 

 should now
appear empty, similar to the following screenshot:

Instead of deleting the base , , and ( files, you could break them apart using the
code/file entries discussed in the following steps.
2. Create the following subfolders in your root folder:
â—¦
â—¦'
â—¦
â—¦
'
â—¦

3. Navigate to the  subfolder. Create a new file named . Edit this file and add
the following code (taken from G!
):

G!
&
&

B@4S&B
2233
&

-AA
54&

T.'
2233&

&

4. Create a new subfolder in the  folder named 
.
5. Inside 
, create a new file called (. Edit this file, adding the following code
(taken from the 45 section of G!
():
&&%
671..9%/

!

1212
61../
3
3/
!
'12..12&&
)
61..961..RB/
3
3/
6. Create a new subfolder in the  folder named . Create two subfolders named

 and .
7. Inside , create a new file called .
8. Navigate to the ' subfolder. Create a new file named '(. Add the following
code to the '( file and save the changes:
4
112
&&'
3/
Your completed file structure should now look like the following screenshot:
1  M
We'll break down this file structure in pairs for the most part. This is because for almost every folder,
there is another folder that serves the opposite purpose.


?
The  folder is interpreted by Meteor as code that belongs exclusively to the client. The '
folder is the exact opposite and tells Meteor that any files contained inside should only apply to server-
side processing.
Having separate  and ' folders logically separates your code (making it easier to
visualize), saves unnecessary processing, and prevents errors (client templates and rendering code will
throw errors if processed by the server).
Inside of the  folder, we've placed a 
 subfolder and two files, both with the main
prefix ( and (). The 
 subfolder is for our benefit, separating out HTML
and JavaScript so that when we go back and review our code, it will be easy to read and segment.
?

The  prefix is used to tell Meteor: 

. When Meteor goes about processing and
compiling files, it waits to process anything named  until the very end. This helps in situations
where libraries or scripts need to be initialized before you can take advantage of them.
Conversely, the  folder tells Meteor: 

. Anything placed inside, or as a child of, the
 folder will be run first by Meteor at runtime. This is a great place to put global variables, common
libraries not already included as packages (see Chapter 2, &
7	
(), and of course
any style sheets. This is why we've included a 
 and  subfolder and have created an
initial generic  file.
Using the  prefix and the  folder together helps us maintain proper sequences and ensures that
our styles load as quickly as possible.
	
?
The 
 folder is a repository for assets that need to be accessed globally. It's a very good place to
store non-sensitive information, such as images and text files. It's also easy to remember. If you need
something to be shown publicly, put it in the 
 folder.
The 
' folder is the opposite. It's a place to store assets that can only be seen by the server. This
is a good place to put moderately sensitive information (you'll want additional security, such as a
database, for the information you want to keep more secure). Any files placed in the 
' folder
can be referenced by the server with no special path or navigation arguments.

The  folder stands all by itself as the folder accessible by both the client and the server. When you
are creating models and collections (see Chapter 4, &
) you'll want to put the declarations
in a file inside of the  folder. The main reason for doing this is so that you don't duplicate code,
and you can ensure that both the client and the server are working from the same model declarations.

.M
Obviously, you don't need to create this file structure from scratch every time. You can use your favorite
script engine (Grunt, Gulp, Shell Script, and so on) and create a script that can make the necessary
changes with a single command. Alternatively, you can create the template once, copy the entire folder
to a new location, and then use it as if it were a new project.
If you do decide to use this recipe rather than an automated script, make sure you update your base
template to the latest Meteor build periodically and each time you make a copy. This can be done very
easily in a terminal window. Navigate to the root folder (for example Y&7&4&
G!
) and run the following command:
	
You will either receive a message letting you know that the folder is already up to date, or Meteor will
update the project to the latest version.


â€¢ Chapter 2, &
7	
(

$	%	

While you're developing your project, there are several default packages and settings that make your
debugging and development work much easier. This recipe will give you suggestions to help create an
ideal development environment.
"$%P
You'll want to make sure you have Meteor installed (of course), and you will need a default project file
structure set up. You can either use the 

<


 recipe from earlier in this
chapter, or create a brand new Meteor project using the :; command.
This recipe assumes that you have some Mongo collections and/or some kinds of user accounts set up. If
you don't have a collection added, you may want to add one just for testing purposes. To do so, create a
file named :
(;&&( and enter the following line of code:
5-)451.5./
With a project in place and at least one Mongo collection to monitor, we're ready to start developing and
debugging!
1 M
First, we want to make sure that the  and 
 packages are installed, which is
usually the case with a default Meteor project.
1. In a terminal window, navigate to the root folder of your project and enter the following
command:


This will list all the packages used by your project. You should receive something similar to the
following:
	
"# 

"# 
	" "
T
2. If the 
 or  packages are missing, you can add them manually by
entering the following commands:
	



3. Next, install the ' smart package. In the terminal window, enter the following
command:



After a short installation process, you should receive a message indicating that the
' package was installed correctly.
4. Start your  project by entering the following command in your terminal window:

5. Open your app in a browser by navigating to 
&&$%%%. Once there, press
&
 +  and look towards the bottom-left of the screen. You will see a small expandable
dashboard, similar to the following screenshot:
Clicking on any of the collection names or the 	 tab will let you view, update, delete,
and insert records, as shown in the following screenshot:
This comes in very handy when you're building your app, as you have instant access to your collections
and user account profiles.
1  M
The following line is all that's needed to install a package:



This tells Meteor to go and find the ' package, with all of its dependencies, and add
the package to your project. This is a third-party package, and more details on the package can be found
at https://atmospherejs.com/msavin/mongol.
Once installed, you can access it on your browser page by the &
 +  shortcut. Under the hood, the
 package is monitoring for any collections, specifically filtering user-account-related collections
into the 	 tab. Other than that, all collections are treated the same, and this interface just
simplifies your debugging/development process when you need to see what's going on inside your
collections.
.M
Mongol is very new but it is getting better all the time. You can read about all it's current features and
preview upcoming features by visiting https://github.com/msavin/Mongol.


â€¢ The #
, 
, and $ recipes in
Chapter 2, &
7	
(
â€¢ The 
=

 and 
= recipes in
Chapter 9, >#


'$ 

Sometimes modifying your code while debugging is just too slow. This recipe will introduce you to the
web console and give you some pointers on using it.
"$%
We will need a sandbox to play in. For the purpose of this recipe, we'll use one of the default examples
built into Meteor.
In a terminal window, enter the following command:
/	
Once created, navigate to the  folder and start Meteor:


We can now navigate to our leaderboard example page (
&&$%%%) using the web
browser of our choice.
We need to enable the web console in various browsers. In no particular order, here's how to get to the
web console on the browsers you're likely to be working with:

Enable the 
 menu by going to  | # |  (&'?, shortcut if you prefer)
and making sure the  
		 option is enabled:
Now, on any web page, click on  !
 under 
 (or use the &' + #
 + &
shortcut):

This will bring up the web console, as shown in the following screenshot:
&
On any web page, click on the 
 menu option (&' + #
 + @ shortcut) under 
 | 

:
The web console now appears as shown in the following screenshot:


On any web page, click on the 

 menu item (&' + #
 +  shortcut) under 4 |

:
This will bring up the web console, as shown in the following screenshot:
1 M
To show what's possible with a web console, let's create a new scientist, and add some points to Tesla.
Because, Imma let you finish, but Nikola Tesla was the greatest scientist of all time. Of. All. Time.
1. If you haven't done so already, navigate to 
&&$%%%&.
2. Now, open the web console if it's not already open.
3. In the console, run the following command:
:;

'762	*%69)
4. The name 1 $ will now be in the list. You can select his name and add some
points:

5. Now, let's give Tesla the love he deserves. First, let's find the L value for the Tesla record.
Run the following command in the console:
:;
G'763%+
69)
6. Harvest the L valuefrom the result and modify the score, similar to the following:
:;
	'7C6;B	U	LV/>@V69=
7
7
MM>! M99)
Tesla will now be placed at the top of the leaderboard:

7. One last manipulation, let's deselect any of the scientists mentioned in the preceding screenshot.
Enter the following command in the console:
:2


'6
;6=)
You will notice that, now no scientist is selected.

You can run through the previous commands in the web console by pressing the up or down arrow keys.
1  M
The web console acts as an extension of your code. You are able to receive log messages, call exposed
methods and events, or change and instantiate global variables. You are able to do this dynamically in
real time, which can have a lot of advantages as you're testing or debugging.
With a few well-composed lines of code, we were able to replicate the behavior found in the event
handlers and methods that belong to the app. In other words, we were able to manually test things, rather
than having to modify, save, and retest the code. This kind of impromptu testing can really save us time.

.M
The web console and the associated development tools can perform all kinds of client-side debugging
and testing tasks. You can run prewritten scripts, pause code during execution, monitor variables and the
call stack, and even create your own methods and variables dynamically.

The web console varies a little bit from browser to browser, but you can find instructions that apply to
nearly every web console at https://developers.google.com/chrome-developer-tools/docs/console.


%$
As you've come to expect, Meteor makes just about everything easier to do. Testing your application on
a server is no exception. This recipe will show you how to deploy your application to Meteor servers,
where you can test (and show off!) your new application.
"$%
The only requirement for this recipe is that you have a working application.
Your app doesn't need to be fancy or complete, but it should at least render something on the screen so
that you can verify it is running on Meteor servers.
For this recipe, we will use the default  example, which is created using the following
command in a terminal window:
/	
1 M
To deploy a test app to Meteor, proceed with the following steps:
1. First, you need to pick an application name.
The application name will appear on Meteor servers as a subdomain of the URL where your app
is being served, such as 
&&
(.
However, there are a lot of people testing applications on Meteor servers. Chances are pretty
good that a generic name, such as "myproject" or "leaderboard", is already taken. So, we need to
pick something unique.
For this recipe, I will use this application name 

. You will obviously need to
pick something else. I got here first!

Your project and application name do 
 need to match. The application name is only an
identifier so that Meteor servers know how to route to your application.
2. Now that we've selected an application name, we will open a terminal window and navigate to
the root directory of our project:

3. Once we're in the correct folder, we will issue the 
 command as follows:
		%	

4. Meteor will bundle and deploy your application. Upon completion, you should see something
similar to the following in the terminal window:
B		%	I
K	
3
	%	
5. Navigate to the URL Meteor gave you (in this case, 
&&

)
in a browser and you will see your newly deployed application, as follows:
1  M
It's magic! The folks at Meteor are sorcerers!
Actually, the core development team has worked very hard to make deployment as easy as possible.
Under the hood, your local Meteor installation is packaging the correct files, compiling package lists and
dependencies, and then sending a request to the Meteor servers. Once the Meteor servers receive the
request, all the necessary error checking is done, and the packages, database, and application are created
and initialized. A virtual host address is added, and voila! Your app is up and running.
There's a lot more detail (and code) involved, but this should give you a general idea of what goes into
deploying to the Meteor test servers. Aren't you glad you didn't have to write all of that code?

.M
You probably noticed that you had to create a Meteor developer account in order to deploy. This is as it
should be, because if there were no login/security details, someone could come along and override your
deployment with one of their own.
This requirement, however, is quite flexible, allowing you to add other users or even organizations so
that multiple people can deploy or update your app.
To set up an organization, navigate to https://www.meteor.com/account-settings/organizations and click
on the button labeled 0!("0+Q+(0 at the bottom of the screen. You can then add individual
users to the organization, similar to the following screenshot:
Once you've deployed your application, you can authorize the changes made by an individual or an
organization through the H command. Use the following syntax to add
authorized accounts:
ERSR
ES
So, for example, we would use the following to add the 
 organization to our deployed
app:
E	%	%
Likewise, if we wanted to remove authorization (for example, let's remove the J account), we
would enter something like this:

E	%
% 

Meteor developer accounts have other useful functions as well. To explore what you can do with your
account, please visit https://www.meteor.com/account-settings.


â€¢ The 
 recipe in Chapter 2, &
7	
(


%$	$0!
Deploying to Meteor test servers is all well and good, but what if you want to use your own custom
domain name? The folks at Meteor have created a simple way for you to do just that. This recipe will
show you how to take advantage of this simple, yet powerful feature.
"$%
You will need to create a 0! redirect to  on the hosting service where
your domain is registered. How to do this varies pretty widely, so consult your hosting service's
knowledge base on the exact steps. For this recipe, we'll use the cPanel interface of a hosting service for
the 

 domain.
Enter the subdomain you wish to use in your 0! redirect (for example,


) and set the redirect location to . Click on 
0! to submit the record:
1 M
Let's assume the subdomain we're going to use is 

. In order to deploy to the
Meteor environment, perform the following steps:
1. Once you have your 0! redirect properly set, open a terminal window, navigate to the
root directory of your project, and enter the following:
		%	
2. Meteor will deploy your app and provide feedback as the bundling, uploading, and serving steps
are completed:
B		%	I
K	
3
	%	

3. To verify the application, navigate to your application's URL (for example,

&&

) in a browser. If everything was deployed correctly, you
will see your application up and running.
1  M
This Meteor deployment feature is nearly identical to the default deployment, with just a little bit of
extra code built in to interpret the origin of 0! redirect.
When a request comes in to  via a 0! redirect, Meteor takes the
0! redirect's original destination and uses it as the unique identifier for the application
deployment. Meteor also uses future requests to  from this 0! redirect to
serve the application.
In this particular case, the original 0! destination was 

. When the
request is redirected to , Meteor recognizes the 0! redirect and uses it to
direct traffic to the deployed application.


â€¢ The '



 recipe in this chapter


%$	
When you are ready to actually deploy your app to a production environment, you will need to convert
your Meteor application to a straight up Node application. There are multiple methods to do this, all of
which are (currently) manual processes and not for the beginner. A lot can go wrong. This recipe will
show you how to manually deploy your Meteor application to a production server as a Node application.
"$%
As mentioned, there are multiple methods and server configurations that can successfully host a Node
application. There are, however, some commonalities, all of which you will need for this recipe.
First, you will need a hosted $6 database.
Your MongoDB database can be hosted remotely or on the same machine from where you will deploy
your Node application. For this recipe, we have deployed a default MongoDB database to the same
machine where we will host the app. Our 48>08L?E+ value will therefore be:
,G3NGCKO-
 L#"L

Installation instructions (and tutorials) for MongoDB can be found at http://docs.mongodb.org/manual/
installation/.
Free or cheap but dedicated MongoDB service hosting also exists. Run a quick Internet search for
'
 or visit http://www.mongodb.com/partners/cloud for a list of providers.
Next, your hosting environment will need the latest stable Node and npm modules.
Installation instructions for each of these programs are beyond the scope of this book. For installation
instructions and advice on how to get started, visit the following:
â€¢ Node (http://nodejs.org)
â€¢ npm (https://www.npmjs.com/)

The latest or nightly builds of these programs will likely cause you problems in a production
environment. Be sure to use the stable versions, unless you have thoroughly tested a different version.
Lastly, you will need the ' npm module installed in your hosting environment. From a terminal
window on your hosted environment, run the following command:
	
$

Note that you may need to use the  command to install the package globally. This will depend on
how npm was installed on your server. The preceding command will install ' on your machine,
and you are now ready to prepare and deploy your application to production.
1 M
To deploy to a custom hosted environment, proceed with the following steps:
1. Open a terminal window in your development environment and navigate to the root folder of
your Meteor project. In this root folder, execute the following command:
RSR/S
Replace the placeholders in the preceding line of code with your build location (for example:
Y&7&&) and an architecture (the options are NPLPM,
NPLPM, and NPL$J). The ## option is optional
if you are building this on the same server where you will deploy your app.
2. Meteor will bundle, extract, and repackage a clean production copy of your Meteor project,
preparing it to be used in your hosting environment. While it is being built, Meteor will update
you with the status in the terminal window.
3. Once the build is finished, navigate to the build folder you specified, for example, if you
specified Y&7&& as your build location, you would need to enter
the following command:
PB


4. In the build folder, you will see a  file with a name similar to :#
(#
;H.
So, for example, if the name of my project was , the name of the  file
would be H.
5. Make a note of the name and location because you'll need it when you copy and extract the
build to your server.
6. For this recipe, let's assume you're using a Linux server to host your production application.
Let's create a 

 folder using the following terminal command:
%		
7. Next, copy the  file from your development environment to the &&


& folder in your production-hosted environment.
If you build your application on a different machine, you can transfer it via SCP, FTP, a
common file server, a Git repository, and so on. It really doesn't matter how you copy it over, as
long as a copy of the  file is now in your hosted environment.
8. Once it's copied over, run the following command on the  file:
$/RSE

This will extract the file to a folder named . If you navigate to the  folder, you
will find a EF 74F file. The next steps in this recipe are taken from this EF 74F file, so feel
free to check them out for a more concise set of instructions. If you check the contents of the
folder, you should see something similar to the following:
EF 74F(
'(
9. We will now install the npm packages needed to run our application. Navigate to &

&' and execute the following command:
	

0
Note that we did not use the X argument, as we are only installing the local npm packages
specified in the bundled folder.
10. Next, we will need to set the 8E! and 48>08L?E+ export arguments so that Node knows
how to host our application. Enter the following commands in the terminal window:
/	;GO+!#!#
/	,G3NGCKO-
 L#"L
These two export commands tell your Node server what port to listen on, and where to find the
 hosted instance (we're using a local instance in this example).
You will also want to configure the E88!L?E+ and 4 =+L?E+ environment variables. The
syntax to enter them is similar to the following export commands:
/	OGG+CKO-(	R
S(
/	,FD-CKO-(
	
	


	(
Now, we can run our application. Instead of using the default  command, remember that we
installed the npm ' package. The ' package allows us to run our Node application and
will automatically restart it if we encounter an error. Run the following command in the terminal
window:


This command instructs Node to start ( as a node application, and to restart it if there are any
issues.

You can stop the application later on by issuing the following command from the & directory:

	

Now it's time to test whether your application is successfully running by opening a browser and pointing
it to your host environment, on the port you specified, for example, if our production environment was
hosting the 



 subdomain, and we specify 
N%N%, as shown in the
preceding example, we would navigate to 
&&



N%N% in a
browser.
Your app should be up and serving pages.
1  M
Node is built to run as quickly as possible. To do so, it will run a little differently on different hardware
and software configurations. This means that the Node and npm packages you use in your development
environment (for example, on MAC OS X) are slightly different than the corresponding Node and npm
packages in your production environment (for example, Linux Ubuntu 12.4 LTS Precise). This is
especially true for foundational packages, such as the npm fibers package.
Also, although Meteor is built on top of Node, it isn't a native Node application. There are some
additional layers of abstraction and processing that make your life easier as a developer, but they don't
make for the prettiest native Node production environment.
The  command takes care of this for us and creates a build without the npm packages
installed. Instead, it lists any of the npm packages as dependencies. Because the specific npm packages
aren't included (Meteor listed them in a package manifest file instead), there are no compatibility issues.
We simply tell Node to find and install the packages specific to the current environment, using the
package manifest file as a sort of a laundry list. We did this when we issued the 

command.
Once npm has read the manifest file, retrieved and installed all the needed packages, and informed us
that the installation was completed correctly, we can run our new native Node application.
We then set some export variables (8E!, 48>08L?E+, E88!L?E+, and 4 =+L?E+) and ran our
application using the ' npm package, rather than the normal node command. Using '
helps us with not having to go back to the server every time it crashes. Ideally, we would never have an
application crash, but we live in the real world, and ' is a huge time saver when an app restart
is needed.
.M
If our application is truly production-ready, we also want it to start automatically whenever the server
reboots. There are various ways to do this, depending on the operating system your production server is
running on, and we won't cover all of them.
We will give an example script and instructions on how to do this on Ubuntu and let you modify the
script as needed for other environments.
Whenever an Ubuntu server restarts, it runs any *
 script found in the &&&
folder. We'll assume that our application is located at &&

&


&&,

that we are going to listen on 
N%N%, and that we are using the local MongoDB service (feel free
to adjust these settings as appropriate).
Using a terminal window with  privileges, add the following 

 script to &&
& to your production server:
C



C&&&


1#

)


&&

&


&&

48>08L?E+-&&JKB%K8E!-N%N%

E88!L?E+-.
&&
.

4 =+L?E+-.
&&
)	
&.
'(


Let's break down what this script does.
The first two lines ( and 
) tell the OS when to run this script. In this case, we run it
as soon as the local file systems are ready, and we stop it as soon as a shutdown request comes in.
We then have our script that will be run. We navigate to our application folder using &&


&


&.
Then, we declare the location of our MongoDB service and the port we would like the Node to listen on.
Finally, we execute the ' command, asking it to start ( as a Node application.
The Meteor Group is currently working on a project called "
&%, which will make deployment to
custom servers as easy as deployment to their test servers. Once Galaxy is available, it will make this
recipe obsolete, but that's a good thing! As mentioned, this recipe covers only one way of deploying to
production. You may find another, easier method just by browsing https://forums.meteor.com or visiting
other sources for Meteor information.


â€¢ The !

	
6
 recipe in this chapter
â€¢ The '	

$A$(B recipe in this chapter
â€¢ The '
 recipe in Chapter 12, &
$(<



%$ 'A'#B
We would be remiss if we didn't add one final method of deploying Meteor apps to a production server.
This method is called ' ('#). Using a fairly simple configuration file, MUP vastly
simplifies the server deployment process. And until we get to see what Galaxy (Meteor's deployment
platform) looks like, MUP is the easiest way to deploy to a custom environment. This recipe will show
you how to deploy your app to a custom server using Meteor Up.
"$%
To complete this recipe, you will need a working Meteor application. It doesn't need to be fancy, but it
does need to be functional so you can see whether it was installed properly on your server at a glance.
1 M
MUP is installed via npm. It needs to be installed globally, so we will use the # argument. To deploy
your app to a custom server using MUP, perform the following steps:
1. To install MUP, open a terminal window and execute the following command:

#
This will take a bit to install, but once complete, you'll be ready to configure and use MUP to
deploy your application.
2. To run 
, navigate to the root folder of your project in a terminal window and enter
the following command:
	
You will receive a message similar to the following:
V	;DE0
This process will create two files in your project's root folder. We don't need to worry about the
first file ((). We will configure our app using the second file, named

(.
3. Now, we'll configure 
(. Open the :
(;&
( file in an editor.
The top part of the file will have our remote server information. It should look similar to the
following lines of code:
A'A:
2
AAAA9
AAAA9
A
)AA
)A
&&
1
&&A
AAY&&LA

3
;9
The  property will be the name of the server you will be accessing via SSH/SCP. If our
server name was #
#', the host property would look similar to
the following:
AAA#
#'A9
The  and 
) properties are the user/pass combination you would use if you
were to  into the remote server.
The next four properties help us to configure our server. If we want MUP to install Mongo,
Node, or PhantomJS (all necessary to deploy via MUP), we can specify the code as follows:
A
4A9
A
>A9
A,AA%B%$$A9
A
A9

As of the printing of this book, the latest stable Node version is %B%$$. You may want to
check this and modify the , property as appropriate.
If Mongo/Node/PhantomJS is already installed, you can change the preceding properties to
 (which will speed up your deployment).
Next, we specify specify what we want our app to be called. This is done by modifying the


> property:
A

>AA:#

##;A9
We need to specify the folder on our local machine where our to-be-deployed app is located.
This is determined in the 

 property:
A

AA&
&&&

A9
The last property we need to set is '. This instructs Node which E88!L?E+ and 8E! to
run our Meteor application from. If, for example, we were redirecting incoming HTTP traffic to
a localhost, on 
B$$K (which is done using a reverse-proxy, such as , or a virtual
host, such as 
), our ' configuration would look like the following code:
A'A2
AE88!L?E+AA
&&A9
A8E!AB$$K
39

4. Now let's configure our remote server with 

. In the terminal window, navigate to
your project's root folder and enter the following command:
	
	
This will install MongoDB, Node, and PhantomJS on the remote server. It will also configure
our remote server environment and install some helper npm packages, such as 
.
5. Let's deploy our app with 

. Once the 

 command is complete, we'll
be ready to deploy our app. Execute the following command in the terminal window:
		
MUP will bundle your app locally, upload the build, configure the requisite npm packages on the remote
server, and then serve up your app. As it runs through this process, MUP will give you status updates in
the terminal.
Once complete, your app should be up and running. Test it out by either visiting your external URL (for
example, 
&&##') or by logging in to a remote server via 66", and
testing the build with a  command on the localhost (for example, 

&&$%%%).
You may have a bit of troubleshooting to do to make sure your virtual host or reverse-proxy is
configured properly, but after some small adjustments, you'll find that, at present, MUP is definitely the
best way to deploy to a custom server.
1  M
MUP takes all the steps we would normally have to implement manually (as in the '




 recipe in this chapter) and implements them automatically. There are three
main parts to pulling this off successfully.
First, MUP creates a default configuration file when we execute the 
 command. We edit the
newly created file with all the settings to install the right software on the remote server, configure
environment variables, and upload our production build.
Second, we use 
 to install all the needed software on the remote server, as specified in
the 
( configuration file.
Lastly, our application is bundled, uploaded, extracted, initialized with environment variables, and set to
run on the remote server. This is all accomplished with the 

 command.
MUP performs these tasks based on the configuration file we edited.


There are many additional settings we can configure and some great features of MUP that we can
explore by visiting the MUP repo, which is found at https://github.com/arunoda/meteor-up.


â€¢ The '



 recipe in this chapter

'$
Many people prefer CoffeeScript to the standard JavaScript syntax. If you are one of those people with a
preference, Meteor has you covered. This recipe will show you how to quickly enable CoffeeScript in
your development environment.
"$%
Nothing is needed to prepare for this recipe, other than having Meteor installed, and a project created so
that you can begin using CoffeeScript.
1 M
To use CoffeeScript, proceed with the following steps:
1. Open a terminal window and navigate to the root folder of your project.
2. Enter the following command:

	
You should see the following response in the terminal window:

	=
"#
CoffeeScript is now installed and ready to go!
You can test the installation by creating a  file and adding a script (for example, add
 to your  folder). When you start your Meteor application with the 
command, the script should execute as designed.

You can uninstall CoffeeScript easily. Simply execute the following terminal command:

	
1  M
Behind the scenes, the CoffeeScript package you just installed looks for any and all * and
* files, compiles them into native JavaScript, and then bundles them for use in your
running Meteor application.
0
As with all other files in a running Meteor application, changes to your CoffeeScript are immediately
processed.



â€¢ The #
 recipe in Chapter 2, &
7	
(

'$

As any CSS junkie already knows, using standard CSS to create style sheets can be tedious, redundant
work. Many designers and developers prefer to use a dynamic style sheet language or preprocessors,
such as Less, Stylus, and SCSS/SASS.
Meteor not only enables the use of preprocessors, but also treats them just like any other file so that
changes are reflected immediately.
This recipe will show you how to enable some of the more popular CSS compilers in your Meteor
application.
"$%
Nothing is needed to prepare for this recipe, other than having Meteor installed, and a project created so
that you can begin using CSS compilers.
1 M
We're going to cover three different preprocessors, as they all work in a similar way.
'$%
	
1. Open a terminal window and navigate to the root folder of your project.
2. Enter the following command:


You should see a response similar to the following in the terminal window:


=
"#L
Stylus is now installed and ready to be used. You can test this by creating a  file and
adding a script (for example, add  to your & folder).
When you start your Meteor application with the  command, Stylus files will be processed and
proper CSS will be rendered.

You can use the  code in Meteor as well. Just add 	
.. to your  files, and
Meteor takes care of the rest.
'$2
1. Open a terminal window and navigate to the root folder of your project.
2. Enter the following command:



You should see the following response in the terminal window:


=
"#">
Now the Less package is installed, and you can use the Less stylesheet syntax to create your
CSS.
As with Stylus, you can test this by creating a  file and adding some style declarations (for
example, add  to your & folder).
When you start your Meteor application with the  command, the Less files will be compiled by
Meteor into standard CSS and rendered as usual.

If you're fond of using 	
 statements in your Less stylesheets, make sure you use the

 extension. Otherwise, Meteor will automatically import and compile any and all
 files it can find.
'$?
1. Open a terminal window and navigate to the root folder of your project.
2. Enter the following command:




You should see a response similar to the following in the terminal window:




=
 ""
SCSS and SASS files can now be used to style your CSS. Just as before, you can test this by creating a
 or  file and adding some style declarations (for example, add  to your
& folder).
When you start your Meteor application with the  command, the SCSS or SASS files will be
compiled by Meteor into standard CSS and rendered.
1  M
When you installed any of the preprocessors with the  command, it installed the
corresponding npm packages tailored to work inside of Meteor.
As with other files, Meteor will monitor changes to any *, , , and  files,
compile the changes into CSS, and render the changes immediately.



â€¢ The #
 recipe in Chapter 2, &
7	
(

 5, 	7$ #$
In this chapter, we will cover the following topics:
â€¢ Adding Meteor packages
â€¢ Removing Meteor packages
â€¢ Discovering new packages with Atmosphere
â€¢ Creating a multipage application with Iron Router
â€¢ Building a custom package
â€¢ Using npm modules
â€¢ Publishing custom packages to Atmosphere
+	
The package system in Meteor makes your development life much easier. It also speaks to one of
Meteor's core principlesâ€”modular development. If you want to use the entire default Meteor stack,
great! If you don't like a particular part and want to swap it out with a third-party package, great! It's
completely up to you. Meteor allows you to quickly add and remove functionality, use the latest code
shared by others, and create your own reusable code segments. This chapter will provide you with the
recipes needed to take full advantage of the Meteor packages system.

$$
The core 
"	 (") have developed over 140 packages for you to use.
These packages provide features and functionality ranging from simple display tweaks, to fully
integrated account management. Not only are these packages useful, but they're extremely easy to add to
your project. In addition to the core MDG packages, there are hundreds of third-party packages
available, all of which are free and could be just as easily added. This recipe will show you how to add
Meteor packages to your project.
"$%
You will need Meteor installed and have a project created. Any project will do. You should also have a
terminal window open and navigate to the root folder of your project, for example, if the name of your
project is 
!, located in the Y&7&4( folder, you would
enter the following command in a terminal window:
PB
,;
	%
+

1 ,,,
Let's install the  package as an example. This package removes the 300 ms delay for
mobile/touchscreens.
In your terminal window, in the root folder, enter the following command:

%
This will install the bootstrap package into your project, with a message similar to the following:
1  ,,,
The :
; command tells Meteor to find the named package in the
Meteor packages registry and copy the appropriate files over to your project. In addition, the package
name is added to the declaration files of your project so that when Meteor starts up your project, the
appropriate files for the named project are added and executed.

.M
As mentioned, you can install third-party packages using the same  command. The
difference between a core MDG package and a third-party package is that third-party packages have the
creator's account ID as a prefix, for example, to add the excellent HammerJS package to your app, you
need to enter the following command:





Other recipes in this chapter will walk you through discovering and implementing third-party packages,
so stay tuned!


â€¢ The '		
#
 recipe in this chapter

$$
Removing Meteor packages is just as easy as adding them. This recipe will show you how to quickly
remove a Meteor package.
"$%
You will need Meteor installed and have a project created. You should also have a terminal window
open and navigate to the root folder of your project. For example, if the name of your project is

!, located in the Y&7&4( folder, enter the following
command in a terminal window:
PB
,;
	%
+

1 M
Let's remove the  Meteor package. In your terminal window, enter the following command:


This will remove the  package.
1  M
The ':
; command will direct Meteor to look for the named
package in your project declaration files and remove the declaration and source files for the package
from your project.
.M
It's sometimes very helpful to check and see which packages you have added to your project. To see this
list, enter the following command in your terminal window:


This will give you a quick list of all the packages contained in your project.

$ $ 
Meteor is an emerging platform, growing in popularity every day. The Meteor community is coming up
with new packages and integrations with existing JavaScript libraries on almost a daily basis. Because
the core Meteor team doesn't have time to test and apply every new package made by the community, a
package registry, with a streamlined installation process, has been created. This package registry is
called Atmosphere. Atmosphere has a clean, simple UI, which allows you to search for, rate, and
discover new packages by popularity. This recipe will show you how to use Atmosphere to find and
implement both Meteor and third-party packages.
"$%
There's nothing really to do here, but you'll definitely want to have Meteor installed and a project
created to start using the packages listed on Atmosphere right away!
1 M
To discover new packages with Atmosphere, proceed with the following steps:
1. In a browser, navigate to https://atmospherejs.com. You should see a very simple page with a
centered search input box. Let's look for the official Twitter 
 package.
2. Type in the word 
 and watch the search results appear as you type. You should see
something similar to the following screenshot:
You'll notice that each card in the search results has some statistics at the bottom. The down
arrow statistic is the number of downloads, which (with the age of the package) is the primary
statistic in the search results ranking. You will see a star, which represents the number of

developers that have favorited/starred the package. Finally, you will see a gray line in the
background, indicating popularity over time.
0
The second result ()
) is the official Twitter Bootstrap package.
3. Click on the )
 card and an overview of the package will appear. You will see
additional information about the package. This includes usage instructions, a link to the GitHub
repository (if available), an expanded history of the package, related packages, dependants, and
dependencies. At the very top of the page will be the instructions to add the package to your
project:
4. You can copy the text and execute it in a terminal window, in your root project folder, as shown
in the following code:


	
After a brief download process, the official Bootstrap package will be installed in your project.
As mentioned in the previous example, Atmosphere has several additional discovery options.
There are links to the package contributors' profiles (so you can see other packages they may
have contributed to), as shown in the following screenshot:

There are links to related packages, as shown in the following screenshot:
There are links to dependants and dependencies as well, as shown in the following screenshot:

Any of these links will help you to discover other packages that will complement the original package
and could be useful in your application.
Yet even more options exist for discovering packages in Atmosphere. If you navigate back to the home
page at https://atmospherejs.com/ and scroll down, you will see sections for $, ',
, and . All of these are worth perusing to discover some of the latest and greatest
packages available for use:
Feel free to explore and discover. You'll find some hidden gems in Atmosphere, and more than anything
else, you'll come to realize that a Meteor package exists for almost everything. If it doesn't, create one
yourself, with the 
 recipe found later in this chapter.
1  M
The Atmosphere site simply puts a user-friendly wrapper on top of the Meteor package repository. It
does this very well, and the contributors/creators of the site are to be commended. Atmosphere is
improving over time, and you can contribute to its success if you are so inclined. You can check out
what's coming down the pipe by visiting the Atmosphere FAQ, found at https://atmospherejs.com/i/faq.

.M
If you're in a hurry or really really love the command line, you can perform searches in a terminal
window, in the root folder of your project. Here's an example of a CLI-based search:


	
The results will be listed, with a brief explanation for each result, in alphabetical order:
Be sure to note that the results from this can be pretty hefty (there's no prioritization of results), so the
effectiveness in using a CLI-based search will vary.


â€¢ The 
 and (

#
 recipes in this
chapter

$	
$
 +
	
Iron Router is an extremely useful Atmosphere package. It allows you to quickly and easily add multiple
server pages to your Meteor project. This recipe will show you how to configure your project to use Iron
Router.
"$%
You need to have Meteor installed. You will also need a blank Meteor project (see the 


<


 recipe in Chapter 1 , ,
7>%	).
Finally, you will need to add the Iron Router package to your Meteor project. You can reference the
#
 recipe found previously in this chapter, or enter the following command in
your terminal window, in the root folder of your project:

1 M
We are going to create a very simple example of multiple pages and we will use a fresh blank project to
do so.
1. First, set up the route paths for the multiple pages. Create a subfolder called  in the
 subfolder of your project. This can be done in a terminal window with the following
command after navigating to the root folder of your project:
%
2. Now, create a new file named ( in the  folder. Open the ( file
in a text editor, add the following code, and save your changes:
E12.
.3/
E
1121.B.92
.&.3/
1.J.92
.&.3/
3/
3. Next, open your  file, located in the  subfolder, in an editor. Add the
following template declarations to the bottom of the file and save your changes:

-A
A
2233
&


-ABA
'=G=E6!
&'

&


-AJA
'=6F58>7
&'
&

4. Now, open the ( file found at :
(;&&
&
( in an editor. Locate the !
' method and change the
'. function body to the following:
!
'12
..12
E1>1--.B.[
E1.J.E1.B./
3
3/
5. Save your changes to all the files and run your application using the  command.
When you navigate to your project's home page in a browser (
&&$%%%&),
you should see something similar to the following screenshot:
6. Click on the button marked 
, or navigate to 
&&$%%%&
& and the screen should change to the following:

7. You can continue to toggle between the two pages by clicking on the onscreen button.
1  M
Iron Router uses the path in your URL to invoke events in both the client and server. In most cases
(unless you explicitly set the Iron Router path to render on the server, using the ) parameter) the
events and subsequent rendering happen in the client only.
In essence, Iron Router uses the path as an arguments list, invoking functions and rendering appropriate
templates based on the information contained in the path.
Let's break down the code we just entered to get Iron Router up and running, starting with (:
E12
.
.
3/
This code snippet tells Iron Router to use the 
 tag named 
 as the main/
default template for the page.
We created the 
 template in , like so:

-A
A
2233
&

The  statement found in this template is known as the main yield. It is a placeholder for other
templates that will be rendered once Iron Router completes its mapping process.
Continuing, in (, we have the E
 function:

E
112
1.B.92

.&.
3/
1.J.92

.&.
3/
3/
This creates two mapped routes, using the  function. In each function call, the first
parameter specifies the name of the route, and because we didn't specify a specific template, it also
implies the name of the template to use. In this case, we used the B and J templates,
which we created in :

-ABA
'=G=E6!
&'
&


-AJA
'=6F58>7
&'
&

These are very simple templates, and this is what makes them easy to understand for our example. Each
template renders a simple ' element with a message inside of it, indicating what page the user is on.
Going back to (, each  function call has a path argument inside of it. This
path argument tells Iron Router what to look for in the URL to determine mapping. In the case of our
first page (rendering the B template), the 
 element was set to "/", or the root path. In the
case of our second page (rendering the J template), the 
 was set to "/second".
At this point, Iron Router was properly mapped, meaning this will have rendered the appropriate
template based on the mapped routes. We wanted to make switching back and forth between the two
routes easy, so we modified the ( script as follows:
!
'12
..12
E1>1--.B.[
E1.J.E1.B./
3
3/
Now, when our button is clicked, we are checking to see whether the name of the currently mapped
route (found using E1>1) is B. If it is, we tell Iron
Router to change the currently rendered template (and the URL path) to our second template, named
J, with a 
 value set to "/second". If the currently mapped route isn't B, then we
toggle back to the original mapped route.

The E statement changes the URL path, thereby setting events in motion to render the
appropriate template and insert it into the main yield.
.M
Iron Router is a very sophisticated and powerful package, with many helpful features including pre-
rendering events, setting data context, and access to server-side functions. If you are looking to build a
multipage Meteor application, you will want to peruse the full documentation, found at
https://github.com/EventedMind/iron-router.


â€¢ The &

	

 recipe in Chapter 12, &
$(<


6	
$	$
As you become more familiar with Meteor, you will want to start creating your own custom package,
which consolidates the code you may find useful in multiple projects. This recipe will walk you through
the basics of creating your own personal Meteor package.
"$%
The only thing you need for this recipe is Meteor and a text editor.
1 M
We will create a package that will allow us to easily write to the console in not only the client web
console, but also in the server terminal console.
1. To create a new baseline package, open a terminal window and navigate to where you would
like your package to reside. Once there, execute the following command:
	%R,DBS
	%
Make sure you replace :4=7; with your own Meteor Developer Account ID or with
the ID of the Meteor organization you belong to, for example (and for the rest of this chapter),
we will use the 
 organization. So our command will look like the following:
	%	%
	%
2. We will now add the code for our package. Open the file named 
( and add the
following code:
!-2
12
1/
41.'.9/
3
3/
Save your changes and create a new file in the same folder named '
(.
Open this file for editing and add the following code:
412
'12
1/
3
3/
3. We now need to make a few modifications to 
(, to make sure our package will
work properly. Open 
( and modify the ?1 method to look like
the following:

?11
2

'G1.B%$J./

G1(
	%
(=((/
	<
'(

	%
(=(
()1
3/
Next, add the following code inside the ?1 method, just after the last

 G1 call:
?11
2

G1.'
(.9.'./
'	/	)7
	/	'(+
;%()1
9
3/
Finally, modify the !1 method by removing the prefix from the test's
filename, like so:
!11
2

1../

1.

./

G1(
	%


(/
3/
4. Save all your changes, and your package will be ready to be used in an application. Select a
project you have underway, or create a default Meteor project using the 
command, and add a subfolder named :
(;&
&. Copy the

& folder and paste it into the :
(;&
& folder. Then, in a
terminal window, execute the following command:
	%
	%
Your custom package will be registered for use in your project, and you can now start your
application:

Open a browser, navigate to 
&&$%%% and open the web console. In the
web console, enter the following command:
:+
;%'(	%
%0()
You should see the following screen in the browser console:

You should see the following in the server terminal console:
Congratulations! You've just created your own personal package.
1  M
Packages in Meteor are really just collections of organized files, with a configuration file that tells
Meteor how to use those files.
In this case, we created a default package template using the ##

command. Note that we followed the :);:
; naming convention, which
Meteor requires if we want to publish this package on Atmosphere for others to use (refer to the
(

#
 recipe in this chapter for details).
Once created, we added our functionality, which was very simple. We just called 1 on
the client and on the server.
Then, we modified the configuration file, which is always named 
(. The following table
shows the three sections that this file contains:
1 This contains the name, summary, and version number of our package.
?1
This lists dependencies and exposes the methods available in our package.
!1
This lists dependencies and test methods to be run during testing.
For this recipe, we didn't modify the 1 method. Meteor autocreated this section
for us and gave us a , which is required.


Version numbers for packages follow the 4$A4B specification (3
digits + an optional wrap, such as B%J#L). More information on the SemVer specification
can be found at http://semver.org/
The bulk of our changes occurred in ?1, so we'll go through each item in this
method.
The 
'G1 method specifies which version of Meteor the core packages used in
your package should come from. This comes in handy because Meteor is updated pretty regularly, and
some of the dependencies needed to run your package may change in later versions. This method allows
you to 7 the release versions of the dependency packages you use in your app to prevent
compatibility issues.
The 
G1 method allows us to include files found in our package directory and to
specify whether they are client or server-specific. In our case, we used 
G1 with a
 parameter to tell Meteor that the 
( file was client-specific. We then used a
' parameter to tell Meteor that the '
( file was server-specific.
We then used the 

1 method to declare/expose the ! object. This is what
enabled us to use the !1 call in the browser's web console.
Finally, we have the !1 method. It contains two 
1 method calls, which
declare the package dependencies needed to run the 
#( file during testing.

The 
1 method isn't exclusive to testing. You can use it in the ?1 method
as well to include the MDG core or third-party packages.
After completing our modifications, we copied our entire package over to the 
& subfolder in
our project. This is necessary for any non-deployed package. When you use the 
command to add a package, Meteor checks for the package in two places: in the online Meteor package
repository (Atmosphere) and in the :
(;&
& subfolder. In this case, because
our package isn't deployed to Atmosphere, we had a copy of our package in the 
& subfolder.
.M
Several other options exist for configuring packages (some of which are included in other recipes in this
chapter). A complete list of these can be found in the Meteor documentation, found at
http://docs.meteor.com/#/full/packagejs.


â€¢ The $ and (

#
 recipes in this chapter
â€¢ The 

 recipe in Chapter 11, #2


'$	

0#$$ (0#) has thousands of modules available. Knowing how to add an npm
module for use in your Meteor project gives you access to all of those modules. This recipe will show
you how to do this.
"$%
You will need to make sure that you have Meteor and Node/npm installed.
You will also need a project that makes use of a custom-built package. We will be using the project from
the 
 recipe, found in this chapter.
1 M
We first need to add a reference to the npm package that we would like to add, which in this case is
going to be the  module.
1. Inside your custom package (the one in the 
& subfolder of your app), in the

( file, add an >

 statement to the end of the file, as shown in the
following example:
>

12
AAA%PJA
3/
2. Now we need to add an >
 reference to the  module and change our
1 command to use a rainbow of fruit flavors. Change your '#
( file so it looks like the following example:

3	U'(
()1
412
'19)2
1/
3
3/
3. Save your changes and we are ready to test our updated package. Navigate to

&&$%%% in a browser, open the browser web console, and execute the
following command a few times:
:+
;%'(

()
4. If you switch to your console window, you should see a multicolored response, as shown in the
following screenshot:

1  M
The >

 declaration in 
( tells Meteor that whenever it starts, it needs to go
and install the npm modules listed. In this case, we are telling Meteor to go and fetch the 
module, version %PJ, from the npm registry.
The >
 function call in '#( makes the  module functionality
available on the server. Now, any time we make a 1 call, the string passed into the call
can have a  reference added to it. In our case, we chose ), which makes every letter
from the string printed out to the console appear in a different color.

To see all the various options available in the npm  module, visit https://npmjs.org/package/
colors.
.M
You can use any npm module you would like in a custom Meteor package. Some of them rely on
asynchronous methods and events, so you will have to wrap those modules with specific asynchronous
Meteor methods. You can read more about these methods in Chapter 11, #2
.


â€¢ The $
 recipe in Chapter 8, 

.

â€¢ The "

 recipe in Chapter 11,
#2


#	
$	$
When you've created a useful package and want to share it with the world, Atmosphere is the way to go.
This recipe will show you how to upload your custom package to Atmosphere and provides some best
practices for maintaining your package moving forward.
"$%
To create a quick Atmosphere package, please complete the $ recipe found in this
chapter.
You will also need to create a blank repository on GitHub. Assuming you have a GitHub login, navigate
to the home page (https://github.com) and create a new repository:
Add a title and description to your repository and click on the button marked %.
To populate your new Git repository, you will need the Git URL, which can be copied from the home
page of your new Git project. It should look something like https://github.com/strack/packt-testpack.git.
Remember this URL, as you will be using it to populate the content of your new repository.
1 M
To register and upload our package, we need to check our configuration file, upload our code to GitHub,
and then deploy our package.
1. To configure 
(, open the 
( file found in the root folder of your
package. In our case, the file is located at :
(;&
&
&

(. We will first modify the summary, as shown in the following example:
&&<9#

 (B
F
	;%(9
Next, we will add the GitHub URL to the  property:
&&?E+0

 (	

%	%
	%(9

You will notice that the documentation property references the EF 74F file, which means
that our GitHub documentation will serve a dual purpose. Open EF 74F and add the
following line:
7 
9
 

2. To push the code to GitHub, save all of your files and navigate to the root folder of your
package (not the root folder of your application) in a terminal window. In our case, the root
folder is :
(;&
&
&. Enter the following lines to populate
the GitHub repository:

F
68

6
	

%
	%
	%
	
$6	6
	


3. To publish to Atmosphere, call 
 with the following command once it is
completed:
	

Voila! You have added your package to Atmosphere.

We deployed all packages directly from the 
 subfolder of an application. A best practice is to
develop and deploy your package on its own, independent of any application. Refer to the 

 recipe.
You can see your package live on Atmosphere by navigating to https://atmospherejs.com and searching
for it by name, as shown in the following screenshot:

As with any other Meteor package found in Atmosphere, you can add it to any of your projects using the
 command in the terminal.
1  M
Atmosphere reads the 
( file for the data that needs to be published, checks to make sure all
information is accurate, and then publishes a link to your project from a GitHub repository. In this
specific case, we added a summary to our file, specified the GitHub URL in the  property, and (after
creating the GitHub repository) called 
 to deploy packages.
.M
More instructions on how to publish to Atmosphere can be found at https://atmospherejs.com/i/
publishing.


â€¢ The #
 and '		
#
 recipes in this
chapter

 <, 6	
$"'+
In this chapter, we will cover the following topics:
â€¢ Inserting templates with Spacebars
â€¢ Inserting raw HTML using triple braces
â€¢ Creating dynamic lists
â€¢ Building a smooth interface with Bootstrap
â€¢ Creating customized global helpers
â€¢ Creating custom components
â€¢ Using reactivity with HTML attributes
â€¢ Using dynamic templates
â€¢ Animating DOM elements
+	
Like everything else in Meteor, UI development is designed to be simple, elegant, and powerful. With
just a few imperative commands, you can create sophisticated and dynamic user interfaces, significantly
speeding up your prototyping/wireframing efforts.
The recipes in this chapter will walk you through the most common UI- and template-building
techniques, which will form the foundation for your Meteor apps moving forward.

+$
 
 is Meteor's templating language. All 	 (C
 (() elements in Meteor
are created programmatically using Meteor's default templating engine, 6
7. Elements can therefore
be created using pure JavaScript. Using JavaScript to create HTML elements, however, isn't exactly
quick and easy.
Inspired by the popular HTML templating language 1
, Spacebars makes it incredibly easy to
structure and declare your HTML elements using templates. And, it gives you access to all the reactive
and dynamic features of Meteor. This recipe will show you how to create templates using the Spacebars
syntax.
"$%
You will need Meteor installed and have a project created. We recommend that you have a simple
project, similar to the one found in the 

<


 recipe in Chapter 1,
,
7>%	, but any project will do. You will need to locate your  tag, which is
usually found inside your  file.
1 ,,,
To make this recipe just a little bit more useful, we are going to create two templates and nest one inside
of the other, using the following steps:
1. First, create a file named 
 and add it to your  folder:
2. Open 
 in an editor, add the following code, and save your changes:

-A!
A
'-AA!'
&'
'-AJ%%A)-AB%%ZA-A
A
2233
&'
&


-AA
-AB%%A-AO%A-AM%A-AC$MNA
#)-A$A-AC$BMA&
&


3. Next, open your  file (or the  file that contains your  tag) and edit
your  tag by adding the following code:

22!
33
&
4. Save the changes, start Meteor if it isn't already running, and navigate to your Meteor-hosted
page in a browser (usually 
&&$%%%):
1  ,,,
We created two templates, with the first one being a very simple ' element:

-AA
-AB%%A-AO%A-AM%A-AC$MNA
#)-A$A-AC$BMA&
&

We gave the template a  attribute value as AA and added the well-formed HTML 
element with position and appearance attributes. We also created a parent template, as follows:

-A!
A
'-AA!'
&'
'-AJ%%A)-AB%%ZA
2233

&'
&

This template also has a name (A!
A) and contains a ' element, containing the
title of our template. We declared an ' element, and we inserted our template named  between
the ' and &' tags using the 2233 command.
Finally, in , we inserted the !
 template between the main  and
& tags, again using the 2233 command, which is also known as 

	.
As you can see, the content of our templates consists primarily of HTML tags. This is the fundamental
building block of our UI, and it's how we've been creating templates from the very beginning. Anything
contained inside double braces (22U33) is a command meant for Blaze, Meteor's templating engine. In
this case, we told Blaze to:
1. Insert the !
 template into our  element.
2. Insert the  template into our ' element, inside !
.
.M
You can read all about templates in the official Meteor documentation, found at
http://docs.meteor.com/#/full/templates.

+$ 12	$

Occasionally, you will want to insert raw HTML into your Meteor page. This is typically done when you
have HTML generated by another process or library. This recipe will show you how to render your raw
HTML inside a Meteor template.
"$%
You will need Meteor installed and have a project created with at least one template in it. We
recommend that you use the files created in the 


	
 recipe found in this
chapter.
If you don't have a 
( file in your  folder already, you should create one to keep
your template 
 and ' logic separate from other JavaScript you may be running.
1 M
Identify the name of your root template and open the file containing your template definition. In our
case, the root template is named !
, which can be found in our 

file, which is in our :
(;& folder. Proceed with the following steps to insert
raw HTML using triple braces:
1. Insert the following line, just before the &
 tag, and save your changes:

-A!
A

777D
999
&

Now, open your 
( file and add the following helper function:
!
!

12)=12
A'E)"!4+S&&'A/
3
3/
2. Save your changes, start Meteor if it isn't already running, and navigate to your Meteor-hosted
page in a browser (usually 
&&$%%%). You should see the rendered HTML
at the bottom of your screen, as shown in the following screenshot:

1  M
We created and then called our !
!
)= helper function by
adding the 222)=333 tag at the bottom of our template and declaring the )=
helper in our 
( file.
The triple-braced tag informs Blaze that the object returned from the helper will be raw HTML and
needs to be rendered as such. Accordingly, Blaze expects a string and will attempt to render it.
To see how Blaze would normally treat raw HTML, change the triple-braced tag to a double-braced tag
122)=33 save your file, and view the result in your browser, as shown in the following
screenshot:



â€¢ The &
	
9!#<1 recipe in Chapter 7, $&



$%

The Meteor Spacebars syntax supports the rapid development of lists, tables, and other displays of data
through the use of template block tags. Used within templates, block tags can quickly add dynamic lists
and even customize the look and feel of each element, based on its unique attributes. This recipe will
show you how to use the C block tag to display multiple elements of a collection inside a Blaze
template.
"$%
We will use the code from the 


	
 recipe, found in this chapter, as our
baseline project.
If you haven't already done so, create and save a new file in your :
(;& folder
called 
(.
Create and save a new file in your :
(;& folder called (.
We will want to make one modification to the HTML in the 
 file. We will change
the height of our ' element from J%% to N%%:
'-6!##6 )-AB%%ZA-A
A
Finally, we want to add the  package to our project to help us generate some random colors and
positions. In a terminal window, navigate to your project root and enter the following command:

1 M
To create a dynamic list, proceed with the following steps:
1. First, let's declare a 
 collection. Open (, add the following code,
and save your changes:
6
-)451.
./
2. Now, let's add shapes to the page dynamically. Open your 
 file, make the
following changes to the  template, and save your changes:

-AA
77W
2	
99
-A77/99A-A7799A-AM%A-A7799A
#)-A$A-A7799A&
7799
&


3. We will now create the template helper, which returns our dynamic collection. Open

(, add the following helper function, and then close and save your changes:
!

12
'6
12
6
1/
3
3/
4. We can now dynamically add shapes to the 
 collection, and they will be rendered on our
page. Open the JavaScript console in your browser and enter the following command:
:2	

'7/ ##=?#=(W" M>?@(=(W??(9)
You should see a green circle with a dark border appear on the screen, similar to the following
screenshot:
Let's add more circles to prove that our template is rendering all the shapes in the 6

collection.
5. In 
(, add the following code:
!
!
'12.'.192
'
9
/

1\--
2

-
\#1.C
.1/

-
T#1.C
.1
/
3

2

-\/

-T/
3
-:.COO.9.C<M$N$B.9.KN$< $.9.C%% <B<.9
.CBM$JKO.9.CGG K%%.;9
-E19
-E1/
6
12
9
993/
39
..19241.6
./
3
3/
6. We now want to display the total number of shapes, so we need to add a 
5 function
to the !
!

 method call:
!
!

12

512
6
11/
39
)=12
@)4





-A!
A
'-AA

22
533&'
7. Let's add a 6
 method for good measure. Open/create the '( file, found
in your :
(;&' folder, and add the following code:
412
6
12
6
'123/
3
3/
8. Save all your changes, start Meteor if it isn't already running, and navigate to your Meteor-
hosted page in a browser (usually 
&&$%%%).
Now, as you click in your browser, new circles will appear and the upper-left part of the screen
will display your 
 collection count:

Feel free to add as many shapes as you would like or reset back to zero by double-clicking anywhere on
the screen.
1  M
We created the !
'6
 helper in 
(, which returns a cursor to
the 
 collection. This sets the data context for our template and is accessible using the 22C
'6
33 block tag, which we added to our  template in 
.
Because templates and template helpers are reactive computations, they react when the collection is
updated. This reaction causes Blaze to re-render the page, using the dynamic template found within the
C block tag.
.M
Other block helpers exist and they are just as easy to use. Refer to the Spacebars documentation on
GitHub for a more detailed explanation, which is available at https://github.com/meteor/meteor/blob/
devel/packages/spacebars/README.md.


â€¢ The 

 recipe in Chapter 4, &

â€¢ The &
	
9!#<1 recipe in Chapter 7, $&



6	
$ 6
As a web developer, one of the biggest drains on your time comes from styling your pages. Bootstrap
offers an elegant, simple design with enough ready-to-use component styles to get you up and running
quickly, without having to get bogged down writing CSS. This recipe will walk you through a few of the
Bootstrap component styles and give you a sampling of how easy they are to use.
"$%
We will be using the &

 recipe found in this chapter as a baseline for our code.
We will also need to add the official Bootstrap package to our Meteor project using Meteor's package
repository. Open a terminal window, navigate to the root folder of your project, and enter the following
command:


	

There are other packages that are complementary to the official Bootstrap package. You can find a
complete list of these at https://atmospherejs.com/?q=bootstrap.
1 M
We will make our title and collection count presentable using the  and ' styles built in to
Bootstrap. Proceed with the following steps to build a smooth interface with Bootstrap:
1. First, let's modify our title, adding a sub ' tag and styling it like a Bootstrap button. Open

, make the following code changes, and save your file:
'-AA2	
88
56
2	
6

66:
22
533
5:
&'
2. After this change, your title should look much more presentable, as shown in the following
screenshot:

3. We will now add the ' style to the entire title, giving it a distinct, intentional look. Open

 again and replace the title ' tag with the following code:
'-A''#A
'-A#A
'-A'#A
'-AA-A'#A6

55&'
&'
'-A''#A
'-A6
A-A#)
'#A
22
533
&'
&'
&'
&'
4. Save these changes and your page should be updated. The 

	 section
should now appear in a distinct ' style, similar to the following screenshot:

5. Lastly, let's turn our count button into an actual button. Open 
( and change the
 event to a specific  event. This event is placed at the bottom of the
!
!
' function:
!
!
'12
U
(%W
2	
(192
41.6
./
3
3
We have now disabled double-click as the method of resetting our 
 collection and
transferred it to the 

	 total. By clicking on the orange button, the
collection will reset to zero:

1  M
Changing the look and feel of a page using Bootstrap is simply a matter of adding the correct CSS
 declarations and structuring our HTML appropriately.
To style the 
 collection count, we added the  and #) value to the 
attribute. This allows the Bootstrap CSS to appropriately style the ' tag, making it appear as an
orange button.
To style our title, we had to first create the scaffolding for the ' tag. We did this by essentially
wrapping our ' tag with a ' tag. We then appropriately structured the containing tags by
adding ', ', '#, and '# to the  attributes. The other
 declarations ('#, '#, and '#) are strictly style
declarations, changing the color/shape but not affecting the overall structure or layout.
.M
Bootstrap is very robust and comes with excellent documentation. You can learn more about Bootstrap
at http://getbootstrap.com/.


â€¢ The #
 and '		
#
 recipes in
Chapter 2, &
7	
(

$	7$



As you begin to really dig into templates, you'll soon discover how truly great template helpers are. You
can access data inline and drastically reduce the amount of code you need to write.
You will, however, eventually run into a situation where you find yourself repeating the same logic in
multiple, in-template helpers. Wouldn't it be great if there was a way to create global helpers accessible
from any template? Well, Meteor has a solution for this too! This recipe will show you how to create
global template helpers using the !
"
 function.
"$%
We will use the codebase from the 

	


 recipe, found in this
chapter. Please follow that recipe first or download the corresponding codebase.
1 M
We're going to make a global random color generator and add random colors to all the objects on the
screen by performing the following steps:
1. Open 
, found in your :
(;& folder, and make the
following changes to the color attributes of the  template:

-AA
22C'6
33
-A2233A-A2233A-AM%A-A22833A
#)-A$A-A22833A&22&33
&

2. We will also use the 5 helper in our ' title to give it a bit of (random) color.
Inside the !
 template, look for and modify the ' title as follows:
'-A'#A
'-AA-A'#A

677899A6
55&'
3. Save your changes and start your Meteor app if it isn't already started. As you view your Meteor
page in your browser, you will notice that the circles have all turned black. This is because
although we are referencing the global helper, we haven't actually created it yet.
4. So, let's take care of that. Open 
(, found in your :
(
;& folder, and add the following function at the bottom:
!
"
1.5.912
-:.COO.9.C<M$N$B.9.KN$< $.9.C%% <B<.9
.CBM$JKO.9.CGG K%%.;/
E1/
3/

5. Once you save the changes, your page will refresh and the circles will now have a random color,
as will the title bar of your app. To prove that it is indeed using the global 5 helper,
open another browser window, navigate to your page (usually 
&&$%%%),
and view the results side by side. As you click on the page to add circles or refresh the page, the
colors will change at random and will be different from one browser window to the next, as
shown in the following screenshot:
1  M
The !
"
 function declares a helper that can be seen in context with any
template. Think of it as a way to declare global functions, accessible within the Spacebars syntax.
The first argument of !
"
 is a string value, which contains the name of
our helper (the name to be used to reference it inline, inside our templates). When deciding on a name
for a global helper, keep in mind that it is indeed global. It should therefore be unique, to prevent
conflicts, or the value could be overridden by a template-specific helper. Our example is very simple, so
we can get away with 5; however, as you build more sophisticated templates, it's a good idea
to give your helpers more distinct names. The value returned is obviously a randomly selected color,
using the same technique that we used in the original !
 click event handler.
We then used the global helper in two different templates. First, we replaced 2233 and
2233 in the circle's ' declaration with 22533, causing our circles to appear
with a random color every time. Finally, we added a -A22533A attribute to
our ' title, which randomly assigns a text color upon page refresh.

.M
There are obviously some very advanced techniques you can accomplish with global helpers, using
other template-related methods such as !
1 and !
7.
All of these can't be covered in this recipe, but we encourage you to explore the Meteor documentation
to familiarize yourself with what global helpers can do.

For a good overview of the available template utilities, consult the Meteor documentation at
http://docs.meteor.com/#/full/templates_api.


â€¢ The 


	
 and $

	
".


 recipes in
this chapter

$	
Adding and using templates in Meteor is a great way to speed up your workflow. Using Meteor's built-in
content block helpers can further streamline your workflow by allowing nested and deferred template
calls. In essence, you can combine and nest templates to create your own "components". This recipe will
show you how to build a basic Spacebars custom block helper using !
<.
"$%
We will use the codebase from the 

	


 recipe found in this
chapter. Please follow that recipe first, or download the corresponding codebase.
1 M
Proceed with the following steps to create custom components:
1. We need to make the template-specific 
5 helper global so we can use it inside our
component. In 
(, delete the 
5 function found in the
!
!

1 method call, and add the following function to
the bottom of the page:
!
"
1.
5.912
6
11/
3/
2. Now, we will create our component. We will first create a ' template, which will
use the newly created 
5 helper. Create a new template file, named
', in your :
(L;& folder. Open this file in a text editor
and add the following template code:

-A'A
'-A''#A
'-A6
A-A#)
'#A
22
533
&'
&'
&

3. To create a custom ' block tag, add the ' template in the same file, complete
with a !
< reference, as follows:

-A'A
'-A''#A
'-A#A
'-A'#A
'-AA-A'#A6


55&'
&'
22!
<33
&'
&'
&

4. Our component is now complete! Let's use it in our code. Open 
 and
completely remove the ' element block, including the code inside the !

template. The only element left after this change will be the ' element. Just above the
' element, we are going to call our ' template using the 22C:

;33 block tag, as follows:

-A!
A
77W99
77:99
7799
'
5. Save all your changes, start your Meteor instance if it isn't already running, and view the results
in your browser. You will notice that nothing has changed. We have the same functionality as
before; only now, we have created a custom Spacebars component (formally, a custom block
helper), and we could add more components to the ' tag as needed or enter explicit
HTML, for example, replacing 22'33 with
'22
533&' will display the 

	 without the use
of the ' template, similar to the following screenshot (not very pretty, but you get
the point):
If you inspect the element in your browser, you will notice that manually entered 'U&' has
been inserted in the placeholder block, similar to the following example:

'-A''#A

5:"?5:

&'
1  M
The key to building block helpers resides in the !
< function. We created a
new ' template and used 22!
<33 inside that template to specify
a placeholder. This placeholder (called a  
) can be specified later, rather than having to be
specified explicitly inside the ' template. This simple addition of a content block turns our
' template into a 
.
Once we created our block helper, along with the template meant to go inside the block helper, we added
a 6
 block tag with 22C'33 and the ending 22&'33 calls. Inside this block,
we called our new ' template using 22'33, which is inserted in the 22
!
<33 placeholder. At runtime, all these template functions get executed in
order, and Blaze renders the actual HTML DOM elements.
.M
Custom block helpers can also utilize the C, C, and C logic through the use of
?=<. Using these commands, you can create reusable, dynamic block helpers and
templates, further streamlining your development process.

For a thorough walkthrough of all the options available, see the GitHub documentation on Spacebars,
found at https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md.


â€¢ The 


	
 and &

7 recipes in this
chapter

'$% 12	
One of the hidden gems in Meteor is the extremely granular control you have over how HTML is
rendered. Blaze was designed in such a way that you can modify, add, or remove HTML element
attributes dynamically without affecting anything else in the DOM! This recipe will walk you through
the use of dynamic, reactive data inside element attributes.
"$%
We will use the codebase from the &


 recipe, the previous recipe in this
chapter. Please follow that recipe first or download the corresponding codebase.
1 M
Proceed with the following steps to use reactivity with HTML attributes:
1. We first need to create a new ' template. Open ' in your :
(
;& folder and add the following code:

-A'A
'-A''#'#A


-AA-.5.
-A22<033A&


-AA-.5.
-ACA
'-A22533A&
&'
&

2. We now need to add our new template to our ' content block so that we can input a new
background color and turn it on and off. Open 
 (also in the  folder)
and modify the !
 template, adding a template call just below the 22
'33 call, similar to the following:
22C'33
77:99
77:99
22&'33
3. On the very next line, add a  attribute to the ' element so that we can change the
background color, like so:
'-AN%%A)-AB%%ZA-A
A

6%77899A
4. In the preceding code, we have set up references to two helper functions: 5 and
<0. We will now create these global template helpers. Open 
( and append
the following two functions:

!
"
1.5.912
161.<0.9261.5./
3/
3/
!
"
1.<0.912
61.<0./
3/
5. If we save these changes and open the web console in your browser, we can now
programmatically change and toggle the background color. In the web console, execute the
following two lines:
:2


'(8(=(
()
:2


'(
IN(=)
These three things should have changed on your screen:
â—¦The background should now be light grey in color
â—¦The checkbox to the top-right of your ' tag should be checked
â—¦The word 
$$% should now appear in the top-right text box
Your screen should now look similar to the following screenshot:

6. All that's left is to hook up events to the checkbox's and textbox's 
 elements. Create a
new file named '( in your :
(L;& folder and add the
following ' handler declarations:
!
''12.C5.192
61.<0.9!/
39.C59
C5.192
1S61.5.9!'2
61.5.9!'/
3
3
3/
7. Save your changes and your elements will now affect the background. Checking/unchecking the
checkbox will toggle the background color, and changing the value in the textbox will
dynamically change the displayed background.
8. We want to observe the effect this has on the DOM. Open the '
 panel in your
browser and locate the ' element. As you toggle the background on and off using the
checkbox, observe the attribute list inside the top ' tag. You'll notice that the 

attribute appears and disappears, depending on the state of the checkbox, similar to the
following screenshot:
As you can see, the attribute doesn't just become empty. It is removed altogether. You will also notice
that when this happens, neither the screen nor the elements view are refreshing. That's because the DOM
is not being rebuilt. The attribute is being added and removed, according to the state of 22533.
Similarly, when you modify the value in the textbox, nothing else is affected (no screen refreshes, or lost
states).
1  M
With the introduction of the Blaze templating engine, Meteor stopped manipulating strings and started
interacting with DOM trees / DOM elements directly. This change simplifies the development process in
comparison to other templating libraries because DOM elements don't have to be re-rendered every time
there is a change to the HTML.
In the case of the  attribute, the only argument inside the attribute is a reference to the 5
helper function. If the value from a helper function or data context is /, and if that
value is the only value in an attribute, Blaze automatically removes the attribute, rather than rendering it
with no value in it.
So, in this case, when the 22533 helper function returned  (when 6<0 is
 or ), Blaze was removing the  attribute from the ' element.


â€¢ The 


	
 recipe in this chapter
â€¢ The $
<
 recipe in Chapter 4, &


'$%

Meteor has yet another templating trick up its sleeve! In addition to custom code blocks, reactive data
contexts, and all the other various template niceties, Meteor also allows you to dynamically switch
between rendered templates. This recipe will show you how to dynamically render templates, using the
!
 helper.
"$%
We will use the codebase from the &


 recipe found in this chapter. Please
follow that recipe first or download the corresponding codebase.
1 ,,,
We will add a dynamic template that will switch our shapes from circles to squares, when rendered.
Proceed with the following steps to use dynamic templates:
1. First, we need to create our alternate template. Inside 
, located in your
:
(;& folder, add the following template, just below the declaration for
the existing  template:

-A)A
22C'6
33
-A2233A-A2233A)-AN%A-AN%A
-A2233A#)-A$A-A2233A&
22&33
&

2. We will need a data context for this template. Fortunately, we can reuse the 6
 collection.
Open 
(, make a copy of the '6
 function, and add it to a new
!
)
1 method call, as follows:
!
)
12'6
12
6
1/
3
3/
Now, we will add logic to toggle between the  and ) templates, based on the
6!
 variable. At the bottom of 
(, add the following

1 method call:
!
!

12
+	')7
+	2

'(+	()1
'0+	)7+	((1
2


'(+	(=+	)1
9
+	1

9
3/
3. All that's left to do is to add the dynamic template declaration and create an easy way to toggle
between the templates. Let's take care of the declaration first. Open 
 and
modify the double brackets inside the ' element as follows:
'-AN%%A)-AB%%ZA-A
A
22:+		+	33
&'
4. Now, we will add some toggle buttons and hook up the events to change the value of the
6!
 variable. Open ' and add the following template at
the bottom:

-A'
A
'-A''#A
-A5A-A#
'#A&
-A6A-A#
'#A)&
&'
&

5. We need to include the '
 template in our block helper. Open 

and add the following template inclusion just before the 22&'33 block tag:
22C'33

77:
	
99
22&'33
6. One last addition, to hook up the events, and we're ready to roll. Create a '( file in
your :
(;& folder and add the following code:
!
'
'12..192
61.!
.9!5/
3
3/
7. Save all your changes, start your Meteor project if it isn't already running, and navigate to your
project in a browser (usually 
&&$%%%). You will see two buttons at the
top-right corner of the screen. Click on them, back and forth, to see the shapes on the screen
toggle between circles and squares, similar to the following screenshot:

1  M
!
 takes a 
 argument and renders the template with the appropriate
name. Because we make the template argument dynamic and reactive, using the !
 helper,
the rendered template will change as the value of 6!
 changes. This ability to
dynamically render templates is the basis for the popular Meteor package . It can be
used in multiple situations where you would like to switch out templates, based on reactive data sources.
.M
Iron Router takes dynamic templates to an entirely new level. The documentation for Iron Router can be
found at https://github.com/iron-meteor/iron-router/blob/devel/Guide.md.


â€¢ The &


	

 recipe in Chapter 2, &
7	

(
â€¢ The &


 recipe in this chapter
â€¢ The $
<
 in Chapter 4, &

â€¢ The &

	

 recipe in Chapter 12, &
$(<


$(

Meteor has a very elegant way of rendering DOM elements in our web apps, but until now, this hasn't
included animations. Fortunately for us, Meteor now supports animations, including animations when an
element is first added to the DOM. This recipe will walk you through how to use standard CSS
animation techniques inside Meteor.
"$%
We will use the codebase from the $

 recipe found in this chapter. Please follow
that recipe first or download the corresponding codebase.
1 ,,,
We will animate the shapes from our previous recipe, demonstrating animation both before and after the
elements are first created and rendered.
Because we used SVG elements instead of DOM elements, we need to modify jQuery to be able to use
5 and '5. Fortunately, there is a custom package available that will add SVG
support and add Meteor UI event support at the same time.
1. In a terminal window, navigate to the root folder of your project and execute the following line:
		%
This will install the # package, which includes support for SVG in jQuery.
2. We will now add a very simple hover animation effect. Open or create a  file in
your :
(;&&& folder and add the following code:
92

B/
O%%%#/
3
'9'2

%/
3
3. Save your changes, start your Meteor project if it isn't already started, and navigate to your
project URL in a browser (usually 
&&$%%%). If you don't have shapes on
your screen, click to add some and then hover over the shapes. As you hover, you will notice
that the shapes will fade out slowly, and as you move the mouse away, the shapes will fade in
slowly until they return to full opacity. Now we will use jQuery to move all the shapes on the
screen at once. Inside ', add the following template at the bottom:

-A'A
'-A''#A

-A>'A-A#
'#A#-A#A&
-A'A-A#
'#A#-AA&
&'
&

4. Inside 
, add a call to the new ' template, just before the
'
 declaration:
22C'33
22'33
77:
99
22'
33
22&'33
We now add the code for the  events by modifying '(, adding the following
function at the bottom:
!
''12
..192
'
-11..[1..1../
1
--%/
'-!/
L1
9192
',-4141*J%%R.
./
'8-R,/
'-
1.1.R8R.9.R8R../
11..9/
3/
3
3/
5. We also want to add a little bit of polish to our ' buttons, so add the following CSS to the
 file, at the bottom:
''2
#J%
/
3
6. Save all these changes and your web page should now contain two new buttons, labeled  and

	. As you click on these buttons alternately, all the shapes on the screen will move their
location randomly, back and forth diagonally across your screen.
7. We will now use the built-in animation hooks, called L, to animate shapes as they are
added dynamically to the DOM. Open 
 and make the following
modifications to both the  and ) templates:

22C'6
33
77WF99
5

6
	6
77F99
22&3

22C'6
33
77WF99
5

6
	6
77F99
22&33
8. We have one final step and that is to add the initial  state to the shapes, via our
 CSS declaration. Open  and add the following declaration at the
bottom:
92
1#$%%
9#B%%
/

%/
3
9. Save your changes and test out the new animations functionality by either adding new shapes to
the screen (clicking anywhere), or by changing the shapes from circles to squares, and back
again (clicking on the  and   buttons). As you click, you will see the shape(s) fade in and
move into place from the left.
1  M
Because Blaze now renders objects according to the DOM, rather than rendering according to text-based
HTML tags, it is aware of the styles and conditions of the created elements, for example, because we
added the 
% style to our ' shape elements in , elements underneath the
mouse will fade out and stay faded out, even when we click on / add new shapes. Using jQuery, we can
programmatically add styles and transformations, as we did in '( with the 1
functions. Blaze will respect these changes as well because programmatic changes to the CSS/DOM are
remembered, even when new elements are added.
The L declaration contains three event handlers:
F This is fired before a DOM node is rendered so that we can manipulate its position,
map where the node will go when animated, and then animate the node as it is
rendered.
'F This is fired before a DOM node is removed. We check to see whether there is an
outgoing animation and animate the node if so. Otherwise, we just remove it.

'F
This is fired when a DOM node changes the indexed position in the DOM. We can
add any animations before, and then during the index change, to create an
animation effect.
For our sample, we only need to worry about inserting and removing elements. Each element has the
CSS  class assigned to it, by virtue of the template, which offsets the intended position by
(-300,-100). The way we animate is by having the element appear on the screen in the offset position
(with the  class in effect), and then by removing the  class, which triggers a
transition/animation because the element moves to its intended position. Thanks to L and the
F event handler, we can programmatically remove  declarations to elements,
right after they are initially rendered, causing them to animate. This makes the shapes seem to fade in
from the top-left. Similarly, we can then add them back right before the elements are removed in order to
perform an outgoing animation.
We declare which elements will be affected by wrapping the elements in the
22C 33U22& 33 block helpers, which causes the F and
'F handlers to fire on the wrapped elements.
.M
We expect some changes as Meteor continues to improve animation support, although the major
functionality is already there. Meanwhile, you can walk through how L works by adding
breakpoints to the client source, in the 
&

#&#
( file, similar to the following screenshot:
You can also get a (slightly) more thorough explanation at https://github.com/strack/meteor-animation-
hooks.


â€¢ The $

	
".


 recipe in this chapter

 =, $

In this chapter, we will cover the following topics:
â€¢ Implementing a simple collection
â€¢ Using the Session object
â€¢ Sorting with MongoDB queries
â€¢ Filtering with MongoDB queries
â€¢ Creating upsert MongoDB queries
â€¢ Implementing a partial collection
+	
The Meteor data model is designed to be very easy to develop. Gone are the days of worrying about
lengthy SQL statements, database drivers, and rigidly structured database tables. In its place is a
straightforward, JSON-based document model that lets you focus on the functionality of your
application. This chapter contains the most common recipes to interact with MongoDB and the reactive
model context inside Meteor.

+
$



Collections are the medium of communication between the client and the server, with changes being
pushed down to the client and requests being pushed up to the server. This recipe will show you how and
where to declare a collection for use on both the client and the server.
"$%
First, you will need Meteor installed and have a project created. To create a standard project file
structure, please see the 

<


 recipe in Chapter 1, ,
7>
%	.
For this particular exercise, you will also need to have the 
 and  packages
installed (which are installed by default). If you need to add them, please see the #

 recipe in Chapter 2, &
7	
(.
1 ,,,
To implement a simple collection, proceed with the following steps:
1. Create a new file in your  folder, called 
(.
2. Open the 
( file in an editor, and declare a MongoDB comments collection by
entering the following:
5-)451../
3. Now, open the ( file in your client's 
 folder 1:
(
;&&
&(), add an action to the  event
handler, which will insert a record into the 5 collection:
!
'12..12&&
)
61..961..RB/
8

'7/(+

W(J
'8
')')J")9)1
3
3/
4. We need to add a comments helper as well. Locate the !

 method
and add the following helper to the beginning:
!

12

')7
8
')1
9=

3/

5. Save these changes.
6. Open your  page (:
(;&&), add a 22
C33 template fragment to the  template as specified in the following example,
and save your changes:

-AA
77W
99
5:77/995:
7799

&

7. Now, open a terminal window, navigate to the :; folder of your project, and start up
Meteor:
R	S

8. In a web browser, navigate to 
&&$%%%& and click on the button on the
screen several times. The result should add comments with each click, similar to this:
1  ,,,
The declaration in 
( is read by both the client and the server:
5-)451../
This instantiates the model and manifests as a collection called 5.
The changes to ( consist of an extra action in the  event:

512.!C.R
1511RB3/
This adds a comment object to the 5 collection on the client, which is quickly propagated to a
minimongo on the client and then to MongoDB on the server. The UI is updated instantly because of the
second change in (:
1251/
3
The  helper is a  	, which means that it reruns itself every time there is a
change in one of the  & (observed properties) it contains. In this example,
51 is a reactive context, and therefore, whenever there is a change in the 5
collection, this  helper will rerun.
Provided that the MongoDB collection (server side) ratifies the change, the UI will stay updated. If there
was a conflict or some problem with the transaction, the server will send a corrective message, and
Minimongo will be updated with the correct state. But, in this case, since we have no conflicts or
latency, the change stuck, and comments are added after each click.
This template is reactive, which means when a change is found in the 5 collection, this
function will be updated, and Blaze will re-render the 22CU33 template block added to
:
22C33
'2233&'
22&33


â€¢ The &

 and $

	
".


 recipes in Chapter 3,
!
$


'$C
The  C is a global client-side object, and as such, is part of the client model. Though it's not
part of any collection, the Session object can be used in a reactive context, which means you can use it
to make reactive methods rerun whenever it is changed. This recipe will show you how to use the
Session object to update the elements on your page.
"$%
You will need to have Meteor installed and a project created. To create a standard project file structure,
please see the 

<


 recipe in Chapter 1, ,
7>%	. A
quick default project will work just as well for this recipe.
1 M
To use the Session object, proceed with the following steps:
1. Open the ( file in your client's 
 folder 1:
(;&&

&() and add a  helper to the beginning of
!

, as follows:
!

12
')7
2

'(()(.8	>(1
9=

2. Open  and add the greeting to your  template, as follows:

-AA
5M:77995M:
3. If Meteor is not already running, initiate it by navigating to your project root folder in a terminal
window and run the  command:
R	S

4. Now, open a browser, navigate to 
&&$%%%&, and open your web console.
5. In the web console, enter and execute the following command:
:2


'((=(D
2

G()
The greeting on your screen should have changed from 
= to +C	
$(C, as shown in the following screenshot:

1  M
Adding a call to 6 inside the  template helper tells Meteor to look for a value
placed in the greeting key of the 6 collection. As the collections are reactive contexts in
Meteor, changes made in the 6 collection (even when executed through the web console) are
instantly reflected in the UI.
0
The 6 object is literally a  object. It lasts only until the next manual page refresh. If you
want something more permanent, you will need to use offline storage or a MongoDB collection. Make
sure to include this fact in your design/development plans.
.M
As of %IB, Meteor also provides single reactive variables. They can be used in place of the
6 object, have a cleaner syntax, can be any type of object, and support checking for changes
before a reactive invalidation is triggered.
To use reactive variables, add the '#' package to your Meteor project:

You can then declare and use a variable instead of the 6  object:
-E',1A@5
MA/

12
1/
3
This variable (declared properly) can be manipulated in the same way as the Session object, with cleaner
syntax. The following command entered in the web debug console will change the display accordingly:
:
'(D
()
The preceding command will result in something similar to the following screenshot:


â€¢ The $

	
".


 recipe in Chapter 3, !
$

â€¢ The &

 value and $
7

	


recipes in Chapter 6, 




$ $6/	
There are many times when you will need to sort a collection. Most recent comments, alphabetized lists,
and bank transactions by amount are all good examples. This recipe will show you how to sort
MongoDB collections, using the options in your 1 request.
"$%
We will be using the 

 recipe found in this chapter as a baseline. please
follow that recipe in preparation for this activity.
1 M
To perform sorting with MongoDB queries, proceed with the following steps:
1. In your  file (located at :
(;&&), make the
following modification to the 22CU33 template fragment:
22C33
'22337799&'
22&33
2233
2. Next, modify the 5 action inside the  event handler, found in
:
(;&&
&(:
!
'12
..12
&&
99'..
1
S--..
1AT
A/
512.!C.9
O/2'M)9)1
3
3/
3. Finally, inside (, modify the 1 arguments to specify a  comments by its
 in descending order (#B):
!

12

12
512397
7"99/
39

3/

4. Save all the changes and run Meteor if necessary. Navigate to 
&&$%%%&,
click on the button on the screen several times, and watch as the comments are sorted by a
comment number:
1  M
The crux of this recipe is found in the 1 method arguments. We modified how the number was
being stored by adding a random number so that if we do nothing else, the comments will appear out of
order. But by adding 22#B33 to the  helper, we are giving results to Blaze
that are sorted in descending order by the randomly generated  property. To sort in ascending
order, use B as your parameter. To sort in descending order, use #B.
The rest of the changes are to support the sorting change. First, ( was modified so that the
 property could be assigned at random and added to the comment object when it is inserted into
the 5 collection:
512.!C.9
O/2'M)3/
The last change is made to  to display the new  property in the UI:
'22337799&'
.M
You can perform complex sorts using multiple properties if the need arises. To do so, simply add the
additional property key to the  option, with either an ascending (B) or descending(#B) value,
similar to the following:

5123922

B#B9

JB33/


â€¢ The 


	
 recipe in Chapter 3, !
$



$ $6/	
Whether you're performing searches, organizing records, or narrowing down results, sooner or later,
you'll want to filter the results of your collections. This recipe shows you how to limit the number of
records in a collection, using MongoDB's  method options.
"$%
We will use the project created in the 
	
'6 recipe, found in this chapter.
Please complete that recipe, and use the files as a baseline for this recipe.
1 M
To filter MongoDB queries, proceed with the following steps:
1. Make the following change to the  helper function in :
(
;&&
&(:
!

12

12
517R >@!S9=7
7"99/
39

3/
2. Save ( and start Meteor if necessary. Navigate to 
&&$%%%&;
click the button on the screen several times and watch as only the comments that contain an
even number are displayed. Your results after multiple clicks should look similar to the
following screenshot:

3. Change the regular expression in ( to only show comments that contain an odd number
by making the following change to the query:
517R"M?L&S9922#B33/
4. Save your changes and observe the change to your UI, which should look similar to the
following screenshot:
1  M
By adding a selector to the 1 statement in the query, the collection is paired down to match
whatever is specified in the selector. In this case, the selector was a regular expression, which returned
results only if the  property contained at least one even number, and subsequently, if the
 property contained at least one odd number.
Notice that this didn't change the 22#B33 predicate in any way and that it works
exactly the same, regardless of how we changed the query.

There is a healthy range of selectors that you can use to limit/filter your collection. For a complete list,
check out the MongoDB query operators list found at http://docs.mongodb.org/manual/reference/
operator/query/.

.M
Moving the filter to the server side provides security and performance advantages as the non-matching
results are never sent down the wire to the client in the first place. In fact, 1 is most commonly
found on the server, using the Meteor publish and subscribe functionality. For an example of 1
being used on the server, please see the 


 recipe found in this chapter.


â€¢ The 


 and 
	
'6 recipes in this
chapter

$	$6/	
As you are developing applications, on occasion, you will run into a situation where you need to either
update an existing record, or insert a record if it doesn't exist already. This is done traditionally using
conditional operators such as .
Through MongoDB, Meteor removes the burden of checking by allowing you to upsert (update + insert)
records using a simple syntax. This recipe will show you how.
"$%
We will again use the project created in the 
	
'6 recipe, found in this chapter.
Please create a fresh copy of this recipe, and use the files as a baseline for this recipe.
We will also be using the official ( package. To add the ( package, navigate to
your project's root folder in a terminal window. Once there, execute the following command:


This will add the ( package, and you're now ready to complete this recipe.
1 M
We first need to increase the likelihood of duplicate records and identify the time at which each
comment was inserted or updated. Proceed with the following steps to create upsert MongoDB queries:
1. Open the :
(;&&
&( file and modify
!
' as follows:
..12

61..961..RB/
87
/(+

W(=
O/2'")=
')'(=

()
91
,'(K	
(=8)1
3
2. We will now create a server method for the 
 function. By default, Meteor only allows
modifications on the client by L, and since an L value may not exist, we need to create a
server method for our 
 function. Open :
(;&'&'(
and add the following method to the bottom of the file:
412
?
1)52

5
12)5392)53/
3
3/
3. Finally, we will modify :
(;&& to display the timestamp
on each comment in the  collection:
22C33
'22332233 7799&'
22&33
4. Save your changes, start the Meteor if it is not already running, and navigate to

&&$%%%&.
5. Continuously, click on the button on the screen, and observe how, instead of new records being
added on each and every click, if a record already exists, the record's timestamp is updated.
1  M
In '(, we created a method by declaring the ?
 method inside
4.
This method receives a new comment object ()5) as an argument and calls 
 on the
5 collection. The first argument (the selector) tells MongoDB to look for any entries that
match the  property found in the )5 object. The second argument (the modifier) tells
MongoDB which fields to insert/update on the 
 object.
If a match is found, the fields are updated. If no match is found, a new record is inserted, with the )5
object providing the values.
In , we simply added the new  property to the display:
'223322332233&'
In (, we first remove the 51 statement. We then create the )5 object,
populating it with a random number, some text, and a timestamp using 11 to
convert the timestamp into a readable format. Finally, we make a call to the ?
 server-
side method, with a 4 statement.
The result confirms that our 
 function is working properly, as each new comment (with a new
 property) is added to our list, and each existing comment (with an already existing 
property) has its timestamp updated.
.M
Meteor simplifies things a bit by adding the actual 
 function, rather than setting
2
3 inside a traditional MongoDB 
 query. Both 
 or 
 can be
used in Meteor, and it's really up to you to choose.


Extensive documentation exists on updating and upserting records in a MongoDB collection. You can
find more details at http://docs.mongodb.org/manual/reference/method/db.collection.update/.


â€¢ The 

 recipe in Chapter 11, #2


+
$



Partial collections are collections sent down the wire from the server that contain only part of the
information available on each record. This is useful for hiding properties or fields, and also for paring
down the size of records containing a lot of information. In other words, partial collections can help with
security and performance. This recipe will show you how to implement a partial collection on the server.
"$%
Let's use the &

'6 recipe found in this chapter as a baseline for this recipe.
Create a fresh copy of this recipe and then proceed to the other preparations.
Let's spruce things up just a bit as well while we're at it. In a terminal window, navigate to the root
project folder and execute the following command:


	
This will add the 
 CSS framework. We now want to take advantage of 
, so
open up your  file (found in :
(;&&) and make the following
changes to the  template:

-AA

5

6	6:
77W
99
5

66:77/997799
5
	

66:
7799
5
	:
5:
7799
5:
5	:5:8%,5:5	:

&

These changes will use some of the default 
 component styles to make our display look
similar to the following screenshot:

We now need to remove the 
 default Meteor package. In the terminal window, execute
the following command:
	

This will temporarily  your application; in that no records from the 5 collection are
being sent down the wire to the client, so no records will be displayed in the UI. Don't worry, we'll fix
this!
You are now ready to move on to the recipe.
1 M
First, since we removed 
, we need to prepare the client to subscribe to the 
data stream. To implement a partial collection, proceed with the following steps:
1. Open :
(;&&
&( and add the following code to the
very top of the document:
,

'(
()1
2. While we have ( open, let's also change what we sort, by making the following change
to the  helper function and save your changes:
12
5179=7
7"93/
39
3. Next, we need to have the server publish the 5 data collection. We'll simultaneously
remove the text field from the response stream, implementing a 


. Open
:
(;&'&'(, add the following code, and save your changes:
4
1..912
512392233/
3/

We can now immediately see that the text field is no longer being displayed in the UI, as shown
in the following screenshot:
4. Let's clean up our UI a little bit now and make it obvious that the records are being reordered.
Open  again, make the following changes, and save the file:
'-A#A7799

-A#)A
7799
&

&'
Now, when you click on the button to update the  property, the timestamp will be updated,
and the ordering of the records will change with each click (click several times to really see the
effect in action):
1  M
The crux of this recipe is found inside '( where we added the  field specifier to the
MongoDB query (in the 4
1U statement):

4
1..91251239
7
7/
99/
3
This field specifier tells the MongoDB query to exclude the text field/property from the results. Once
this change has been made,  still tries to call 2233 in the template, but since it's null,
it doesn't appear. We then removed the call to display 2233 altogether, because it wasn't needed.
.M
The  field specifier can be made &
	, as we have seen in the preceding section, by only
listing the fields we don't want to see. To do this, simply use the  (or %) parameter for each
field you don't want to see, and the rest of the fields will be included by default. For example:
1239 7
7"
= 
99/
The field specifier can also be made 
	, which means that only the fields specified will be
included by using the  (or B) parameter. This would look similar to the following code:
1239 7
7M=>99/

To read more about the  field specifier, check out the official Meteor documentation at
http://docs.meteor.com/#/full/fieldspecifiers.


â€¢ The 
=

 recipe in Chapter 9, >#


 @, +
$#
In this chapter, we will cover the following topics:
â€¢ Reading the DDP stream
â€¢ Using client-only collections
â€¢ Implementing a multiserver DDP
â€¢ Integrating DDP with other technologies
+	
Fundamental to Meteor is the concept of real-time applications, with the client and server interacting
with each other using the principle of  . The folks at Meteor have developed a protocol
for this real-time client-server communication, called the 	#
 (#). As with
everything else in Meteor, DDP is a discreet (albeit core) library, which you can use separately. The
recipes in this chapter will show you how DDP works and give you some ideas about what you can do
with it outside of its default use in Meteor.

$#
To truly understand what is going on with DDP (and for debugging purposes) it's useful to be able to
read the DDP stream. Seeing DDP in action can not only help with the debugging process, but can also
help you to better understand how flexible and useful this protocol is. This recipe will show you how to
use Arunoda Susiripala's most excellent DDP Analyzer.
"$%
You will need Meteor, Node, and npm installed. For installation instructions, visit the following URLs:
â€¢ Nodeâ€”http://nodejs.org
â€¢ npmâ€”https://www.npmjs.com/
You will also need a project. You can use pretty much any project you like. Because it offers a decent,
controllable amount of client-server communication (in other words, DDP streams), we will use the
 example application. Note that you can also use your own Meteor project if you like. We are
only using this as an example because it's convenient and because we can control the flow of data.
To install the  example, open a terminal window, navigate to a directory of your choice, and enter
the following command:
/	
Go ahead and start your Meteor application by entering the following commands:


You are now ready to install and run the DDP Analyzer on the  app.
1 ,,,
1. First, we need to install the DDP Analyzer. In a terminal window, enter and execute the
following command:
	
	E
Note that you may need to use  when using the X operator to make the Analyzer
available from anywhere and to make sure it has proper permissions. After a brief installation
process, the Analyzer will be installed and ready to be used.
2. Start the Analyzer proxy by entering the following command:
	E	/
You will get a message similar to the following:

BB;;/2	M#M#

V/	

		
/	BB;CBV<FK-+C8G33V8+DG3CKO-	
M#M#

3. We now need to restart our Meteor instance with the environmental variable mentioned in the
preceding step. In your terminal window, stop the  if it is still running and enter the
following commands:
/	BB;CBV<FK-+C8G33V8+DG3CKO-	
M#M#

4. Once the  starts the backup, navigate to 
&&$%%% in a browser
and the DDP Analyzer will be ready for action.
5. Perform several tasks, such as adding new  items, completing/editing existing items, and
so on.
6. Take a look at the DDP stream in the terminal window where you started the DDP Analyzer. It
will look similar to the following screenshot:
You will be able to see all the messages intended for the clients. The numbers in yellow tell you
which client it was sent to/from. Messages preceded by +0 indicate that the message was sent
from the server to the client. If the message is preceded by (', this indicates the message and
outbound request from the client to the server. The messages are in plain text following the
color-coded texts.

With the DDP Analyzer, you can really get under the hood, seeing exactly how DDP works.
You'll quickly realize how flexible and simple the protocol is, and you will gain a better
understanding of what you can do with it inside your Meteor (or other) applications.
1  ,,,
DDP, oversimplified, is a series of messages between two end points. The messages show updates,
additions, and deletions, and are transmitted over websockets. This means the messages can be sent in
real time, rather than waiting for the traditional client request polling. This cuts down on traffic (chatter)
and ensures that the messages are delivered as quickly as possible.
The DDP Analyzer uses the DDP protocol and listens in on the streaming conversation between your
browser and the Meteor application. When you changed the port that DDP executes through using the
77L7FG ?+!L58>>F5!=8>L?E+- command, you rerouted your app through port $%$%. The DDP
Analyzer listened on this port, proxied the connection to port $%%%, and logged all the traffic
approaching it in the terminal window.
.M
Once you have finished, be sure to either open a new terminal window or change your environment
variable back to port $%%% using the following command:
/	BB;CBV<FK-+C8G33V8+DG3CKO-	
M###
If you don't, your application will stop working because DDP is still running through port $%$%.


â€¢ The $
	 recipe in Chapter 1, ,
7>%	

'$

%


To truly understand how DDP works, it's helpful to try 	 as far as communicating with
data over the wire is concerned. The best way to do this (and a quite helpful recipe to boot!) is to let the
client continue to take advantage of the built-in Mongo collections and programmatically send updates
from the server based on some simple logic. This recipe will walk you through creating a client-only
collection and manipulating this collection with calls on the server side.
"$%
We are going to need a sample project to use as a baseline. For this baseline, we will quickly create a
bookmark application. No bells and whistles, just a simple list of bookmark titles and URLs.
To do this, we first need our default template scaffolding. Please create a new project called
 using the 

<


 recipe in Chapter 1, ,
7>
%	, as your starting file structure.
We need to add and remove some Meteor packages. Start by removing the 
 package.
Open a terminal window, navigate to the root folder of your project, and execute the following
command:
	

Next, let's add the 
 package. Execute the following command in your terminal window:


	
We will now add the HTML and JavaScript needed to create our  program.
Replace the contents of your :
(;&& file with the following:

5
%O&
&

2233
&

-AA
'-A#A
22C33
'-A
2233A
'-A
#A

-AA-AA
-A


#'A&

&
22C33

$-A
#A

-AA
'-A2233A&$
2233
$-A
#A2233&$
22&33
&'
'-A
#A
22C33
-A2233A2233&
2233
'-A
#
A


-AA-A#A

-A?E+A&
&'
22&33
&'
&'
22&33


-AA-A#
A-A>)<4A
'-AA&
&'
&

Next, in your :
(;&&
 folder, add the following to (:
41../
Then, create a 
"
( file in the same 
 folder and add the following

 function:
!

1212?E+1/
39
12VV/
39
1261.4.9
LWW61.4.9L/
39
1261.4.9
L[A
#)AA
#A/
39
12VV/
3
3/
In the same 
"
( file, add the following ' function:

!
'12
..12
61.4.9L/
39
..12
61.4.9L/
39
.
#
.12
1!'S--2
41.
!.9L9
!'9192
1/
3/
3
61.4.9/
39
.

#
.12
15--B$WW!'S--
2
41.
!.9L9
!'9192
1/
61.4.9/
3/
3
39
.C>)<4.12
?E+12
.).
3/
39
.
#

.12
1!'S--2
41.
6E5.9L9
!'9192
1/
3/
3
39
.

#

.12
15--B$WW!'S--2
41.
6E5.9L9
!'9192
1/
3/
3
39

..12
41.'<4.9L9192
3/
3
3/
Now, we need a bit of styling. Open the  file found in your :
(;&&
 folder and replace the existing styles with the following:
&*566*&
2
#HBO/
3
#2
#1JOO9JOO9JOO/
#1JJB9JJB9JJB/
#)B
/
#M
M
%%/
#)##)/
#)/

'/

MO
BO
BO
/
J%
/
#/
#/
#)I%Z/
#/
3

#
2
)I%Z/
3
We need to declare our URLs collection, so create a ( file in your :
(
;& folder and add the following 45 declaration and
6

  function:
?E+-)451AA/
1
6

@S-..2
6

@-12
1%9--/
3/
3

Finally, we add some server logic. Open :
(;&'&'( and replace any
existing code with the following:
4
1..912
?E+1/
3/
412

!192
'-?E+81/
1S/
1WWS--2
?E+
192233/
A
A/
3
AA/
39

6E5192
'-?E+81/
1S/
1WWS--2
&& 
.'
-@1.
.[.
&&.R/
?E+
192233/
A
A/
3
AA/
39
'<412
?E+'1/
A'A/
3
3/
Save all your changes, start up your  instance, and navigate to your project in a browser
(usually 
&&$%%%). If everything went correctly, you will now have a working
 app, where you can add URLs and (by double-clicking) add/change the titles for the
bookmarks. The following screenshot is a sample of how the browser will look when it is complete:

1 M
We are going to add a counter at the bottom of our  page. This counter will tell us how
many secure and non-secure links we have (determined by whether the link starts with 
).
1. First, we will add the client-only collection called  and subscribe to it. If we declare
the collection anywhere in the  folder, the server will not be able see it. Hence, it will
be a client-only collection. Open the ( file in your client 
 folder (:
(
;&&
&() and add the following two lines around the existing
41.. command, as follows:
I,8
,8'6
6)1
41../
,

'(
(=,GDB'))1
2. While we are in the 
 folder, let's open the 
"
( file and add the
reactive !

 function which we'll need to display the counts. Add the
following function to the bottom of the file:
!

12
<4512

<4581/
3
3/
3. Now let's add the HTML template. Open , found in your  folder, and add
the following code around the  tag:

2233
77:%
99
&
5	6%6:
77WI,899
56
6:
5

66:
5
	

6		%6:5
	:
77
899
5
	

6		%6:5
	:
77
899
5:
5:
7799
5	:
4. We'll pretty up our counter a bit with some CSS as well. Open your  file, found in
your / director, and add the following CSS declaration:
C2

'/
/
#O%
/
3
5. We have some real work to do now on the server side. We need to count and sort the bookmarks
as they are added, removed, or changed. Open your '( file, found in your '
folder, and add the following 4
 function:
4
1..912
'-/
'-%/
'5-%/
'H-/
'-?E+1'512
&&!878 
&&!878E'
&&!8785
3/

H-/
1AA992
59
55
3/
1/
6
112

1/
3/
3/
6. Inside the preceding code block, we have three !878 comments. We first need to create the
 listener. Directly under the &&!878  comment, add the following code:
&&!878 
'/=)7
'
HH
-8
')

.'(	
())7

8JJ1
'0E)

'6
6==7

8
8
9)1
9
7
JJ1
'0E)

'6
6==7

8
9)1
9
9=
7. Next is the ' listener. Directly under the &&!878E' comment, add the
following code:
&&!878E'
'/=)7


KO-
')')1

8C'
=')7

HH
-8
')

.'(	
()1
9)1


81

'6
6==7

8=

8
8
9)1
9=

8. Finally, the  listener. Add the following code directly under the &&!8785
comment:
&&!8785
'/=)7
'
HH
-8
')

.'(	
())7

8JJ1
1

'6
6==7

8=

8
8
9)1
9
9
9. Save all your changes, start your  instance if it isn't already started, and navigate to
your project in a browser (usually 
&&$%%%). You should see a small
information button at the bottom-right corner of your screen with a count of secure and non-
secure links. Add some new links, delete others, and watch the count change instantly in your
browser, similar to the following screenshot:

1  M
All of the client-side code we just added is exactly the same as it would be for a regular Mongo
collection. As far as the client is concerned, everything is normal.
On the server, however, we'd need to manually update the DDP stream with the  and
 messages, based on the changes made to the ?E+ collection.
To accomplish this, we start by using the function passed as an argument in the 4
1
function arguments:
4
1..9 ')7

3/
This function is rerun every time a client subscribes to the DDP stream. Inside the function, we create a
 using the 45'51 function:
'-?E+1'512

3/
Inside the '5 function, if a document is added (except when initializing), we check
whether the  property begins with 
 to see whether we can increment the 5 (secure
count) variable; otherwise, we'll just increment the normal  variable.
If a document is removed, we have to do a bit of trickery, but we will recalculate the 5 and
 variables.
If a document's  variable is changed, we will perform the same check as we did in  and move
the increment from  to 5.
These three situations will happen as the ?E+ collection changes in real time. Therefore, after each
change, we will call the 1 function, which sends a message to the client via DDP,
mimicking the automatic change messages that would be sent if we were modifying the 
collection normally.
You will notice that the  collection is never used on the server. Instead, we send messages to
the client through the AA subscription channel, as in the following example:
1AA992

3/
This is an important distinction. The client does not subscribe to the actual MondoDB collection.
Instead, it subscribes to a 77 messaging channel. In this case, we're letting the client do the heavy

lifting for us by sending the AA subscription messages into the  client-only
collection. In essence, the server is sending data changes over the wire, and the client, being none the
wiser, is treating the messages as actual data changes.
The rest of the method is cleanup for when a client unsubscribes, using 
1 to complete
the initialization. It includes making a 1 call, which does the same thing as a
1 call (mimics a data change and sends it over the wire to the subscribed clients).
The final step in initialization is to call 1, which lets the subscribed client know that all
the initial data changes have been sent.


â€¢ The 


 recipe in Chapter 4, &

â€¢ The 
=

 recipe in Chapter 9, >#


+
$	
#
The fun doesn't stop with a single client and server DDP connection. Oh no! Indeed, Meteor has invited
everybody to the DDP party, and in this recipe, we're going to see how two Meteor servers can speak to
each other using DDP.
"$%
We will be using the code base from the $

 recipe, found in this chapter.
Please create an instance of this project and start your  server.
For this project, we will change the color of the bookmark titles, based on whether the links are secure
or not; so we need to make one change to our first project to make the color dependent on the !

property (which we will create in this recipe). Open the 
"
( file, found in the
:
(;&&
 folder of the first project. Locate the
!

 section and make the following change to the  function:
!

12
U
12
61.4.9L[A
#)A
!
/
39
U
As we will be implementing another Meteor server instance, we will also need to create a new Meteor
project. In a terminal window, navigate to a location outside your root project folder, and enter the
following commands in the terminal window:
	%
	%
	

	M#M#
This will properly initialize our second server instance and start it up on port $%$%.
We're now ready to get our second Meteor project talking to our first project!
1 M
We're going to change the color of the bookmark titles using a new bookmark property called
!
. Our new (second) project will check bookmarks as they come across the DDP wire and add
a !
 property if needed. Let's get started.

1. First, we will want to make use of the 6@1 function we're familiar with
from the $

 recipe. Add the following prototype modifier to the
bottom of the 
( file, found in your second project's root folder:
1
6

@S-..2
6

@-12
1%9--/
3/
3
2. Now, we want to create a server-only file so that we can concentrate on the task at hand. Create
a ' folder in your project root and then create and open a file named 775(
for editing.
3. In the 775( file, add the following code to connect and subscribe to the 
collection from our first project:
-771A
&&$%%%A/
?E+-)451AA9/
1AA/
4. Now, we create a function that checks a record to see whether the !
 variable has been
set or not. If it hasn't and if there's an  property to check, it will update the record with the
appropriate !
 variable. Add the following function to the bottom of
775(:
6!
1921SVV!

/
1+)51@1.
.
!
-.
#./

!
-.
#./
?E+
19/
3
5. The last piece of the puzzle is to add a call to the 6!
 function we just created,
whenever a record is added or changed. We do this by calling the '5 function
and the ?E+1 cursor. Add the following code to the bottom of 775(:
?E+1'5126!
9
6!
3/
6. Open a browser and navigate to your project (usually 
&&$%%%). The
colors of each bookmark should correspond to the security types of the bookmark links, similar
to the following screenshot:

1  M
Inside our second project, we are declaring the ?E+ collection and subscribing to changes just like we
would in a normal  app. The difference here is that we're establishing a connection to an
existing Meteor server, using the 7751 function:
 -771A
&&$%%%A/
?E+-)451AA9/
We passed the handle to this connection as an argument, called , when we declared our ?E+
collection. This tells Meteor that we're interested in the collection (more accurately, the DDP messages)
coming from our first server.
To avoid redundant code, we created the 6!
 function, which listens to the changes made
to the ?E+ collection and sets the !
 property to correspond with the security type of the 
property. We then use the 6!
 function as the event handler for both  and
 events coming through the DDP wire via '5.

.M
Using DDP as a client isn't unique to Meteor. You can use DDP with nearly any technology. You'll see
an example in the 

''(	


 recipe, found later in this chapter.


â€¢ The 


 recipe in Chapter 4, &

â€¢ The 

''(	


 recipe in this chapter

+$$# 
$
The party never stops with DDP! DDP libraries are available for most major programming languages
and platforms, and you can very quickly get your client, server, or even hardware devices talking to your
Meteor server without much effort. This recipe will show you how to connect to a Meteor server using
DDP from a >( program.
"$%
We'll want to use the code base from the $

 recipe, found in this chapter.
Please create an instance of that project and start your  server.
You will need Node and npm installed to complete this recipe. They are installed with Meteor by
default. However, if you need instructions on how to install Node.js and npm, they can be found on the
following websites:
â€¢ Nodeâ€”http://nodejs.org
â€¢ NPMâ€”https://www.npmjs.com/
We will also need to make sure that the 
 npm module is installed. Open a terminal window and
execute the following command:
	
	

When installing 
 modules globally, you may need to use the  command, similar to the
following command:

	$

1 M
We will create a Node service that will check the  properties for records in our ?E+ collection to
make sure they're secure (HTTPS). If they aren't secure, the Node service will call our Meteor

6E5 method and change the  properties to be secure. To integrate DDP with other
technologies, perform the following steps:
1. We first create the project folder. In a terminal window, create a  folder and  to
this directory, and add the 
 
 module by executing the following commands:
%%
%
	
	
2. We now want to create our service. Create a file in the  directory named
(. Open it for editing and declare the DDP connection by adding the following code:

'775-1A
A/
'
-)77512
AA9

$%%%9

A)A9
9
E9
E!O%%9
59

,.B.
3/
3. We now want to connect to our Meteor server using the 1 function and display the
result of a successful subscription in the console window. Append the following code to
(:

112
12
1/
31../

1..9:;912
'-8(1
/
1/
3
3/
4. Finally, we will listen to the messages coming across the DDP wire using the 1 function.
We will check all the  and  messages and replace the URL with a secure URL
where needed, using the 1 function to invoke the remote Meteor server 
6E5
method. Append the following code to (:

1..912
'-
FD68>
1/
)12
AA
AA
'-/
12
1S@1.
.2
-
1.
.9
.
./

1.
6E5.9:9
;91921S
1/
3
3

3
/

/
3
3/
1
6

@S-..2
6

@-12
1%9--/
3/
3
Okay, we're now ready to run our Node service. Save all your changes, and make sure you have
an instance of your original Meteor project open in a browser (usually

&&$%%%) so that you can see the changes. They'll happen quickly, so
don't blink!
5. In a terminal window, navigate to your  folder and enter the following command:

In your web browser, every link that was previously using 
 will now be using 
. If
you add another link and intentionally try to enter the link as 
, the running node service
will immediately change it to 
. If you look in the terminal window where you ran the
node ( command, you'll see the word 	 for every converted link and your web
browser will look something like the following screenshot:

1  M
The Meteor server is listening for client subscription requests using DDP. Since we are using a DDP
 library built for Node (using the 
 
 module), we are able to declare our connection
using the new 7751 function, connect and subscribe to the  channel, and monitor all
messages coming through DDP using the 1 function:
'
-)77512
AA9

$%%%9

3/

112


1..9/

3/

1..912


3/
Finally, if we want to make a modification, we can do so by invoking the Meteor server's remote
 using the 1 function:

1.
6E5.9/
You'll notice that we had to do nothing on the Meteor server side to get this to work. That's the beauty of
DDP; the protocol is the same for any compatible DDP library. As long as both systems are using the
DDP protocol, the languages, hardware, and operating systems of the systems are immaterial and don't
affect communications between the servers.
As you can tell, the DDP protocol is quite powerful because it's simple and clean. There are many other
aspects to DDP, for which you will want to consult the Meteor and the corresponding GitHub
documentation.
.M
You can see a fairly up-to-date list of available DDP clients by visiting Meteoropedia at
http://www.meteorpedia.com/read/DDP_Clients.


â€¢ The $

 and 

''( recipes in this chapter

 D, $%
In this chapter, you will learn the following topics:
â€¢ Creating and consuming a reactive value
â€¢ Using Ajax query results in ReactiveVar
â€¢ Making a custom library reactive
â€¢ Updating Blaze templates without Mongo
â€¢ Using inline data to modify UI elements reactively
â€¢ Integrating the jQuery UI
+	
$$ is an emerging development methodology, where changes to data automatically
trigger changes to the rest of the system. This allows you, the developer, to write code declaratively and
let the reactive elements manage any changes. Meteor is, perhaps, the best and most fully developed
implementation of reactive programming available today. By understanding the core concepts of
reactive programming, you can use the ! (formerly 7
) library to create simple, declarative
code while avoiding the usual pitfalls associated with reactive and asynchronous JavaScript
programming. The recipes in this chapter will give you simple, clear examples of how the major
components of Meteor's reactive model work.

$	$
	
!, simply put, is Meteor's variable tracking system. It is used to manage reactive values, data
structures, and computations (functions that consume reactive values). This recipe will show you how to
create reactive values, and perform computations on those values, using !1. In
other words, it will teach you how reactive programming works inside Meteor. This recipe will come in
handy as a foundation for more complex functionalities.
"$%
For the sake of simplicity, we will be using a default Meteor project, with the '#' package
added to it. Open a terminal window, navigate to where you would like to create your root project, and
execute the following commands:
	
	


You are now ready to start using reactive variables.
1 ,,,
We are going to modify the text of a button, based on a reactive variable; so we will need to create the
button and hook up the reactive context.
1. Open your project in your favorite text editor and edit the '
 file,
adding an ID to the  element, as shown in the following example:
 (O(54&
2. Now, open '
( and add the following lines of code just below the 
145 condition:
1452
+/O4'(8%,()1
+%'')7
'(WO()/'+/'))1
9)1
3. Finally, add the following line inside the !
' declaration, just below
the 61 function in the .. function:
61AA/
+/
'(F0()1
4. Save your changes and navigate to 
&&$%%% in a browser. Once there,
click on the button labeled 
 and watch the text change to $J:

You can manually change the value of the button text by opening a console window in your
browser and using the !1 command, as shown in the following example:
:+/
'(;	
()
The button text will change to whatever value you set it to, instantly.
1  ,,,
The preceding example seems oversimplified, but we have two things to say about that.
First, it's simple because Meteor was built to make your code very simple and easy to follow. This
makes your development and debug efforts significantly less time consuming.
Notice how the process of declaring a reactive variable is made up of one line of code. When we added
the !-)E',1.54. statement, we were simply declaring a
variable (and initializing its value to .54.), but we know by the declaration that it is a reactive
variable.
Next, we encapsulated an extremely straightforward jQuery statement inside a !1
block. This block is called a 	. Reactive computations run once initially and then
rerun (are recomputed) whenever a change is made to any reactive variables contained inside. So, in this
example, we told ! to monitor the value of !(a reactive variable) and automatically
run (hence the term ) the code block again when it would change.

Notice that we don't have to worry about any time conditions, such as "is this the first run?" or "okay,
when there's a changeâ€¦." We just simply declare the jQuery statement and let ! figure out the
timing for us.
This is what the term $$ means. There is one set of code for the
initialization and another set of code for changes. Besides the variable declarations, your entire code
base can be written as normal, plain old JavaScript.
Second, what it's doing under the hood is anything but simple! To create this frontend simplicity for you,
the programmer, Meteor implements reactive providers and reactive computations.
We'll sacrifice a bit of fidelity to make the concept simpler to understand. When !
is called, it does four things:
â€¢ It creates a computation
â€¢ It sets !5
 to that computation
â€¢ It calls the function that was passed to it
â€¢ It sets !5
 to 
A computation is essentially an event handler function and contains a reference to the function that was
passed to !. The event that the computation is waiting for is a call to the

' method. When the ' method is called, the computation
reruns the function it contains.
Now we come to the function. The function passed to ! is considered a reactive
function if it contains . A reactive provider is an object that has functions to get and
set some value, and keeps track of dependencies. When the  function is called, it does three things:
1. It checks to see whether !5
 has a value.
2. If it does, the computation is added to an internal list.
3. It returns the value of the variable that the getter requested.
Both steps 1 and 2 are performed by making a call to 
1, which is a method found on a
dependency object. The '#' library automates this part, so you don't have to call the

1 method directly. All you have to do is use the reactive variable!
Likewise, when the  function is called, it does two things:
â€¢ It changes the value of the internal variable
â€¢ For every computation in the internal list, the '1 method is called
The '1 methods are called in a loop by making a call to 1, which is a

 method found on a dependency object. Again, '#' takes care of this for you.
You're welcome!
When each computation is invalidated, it reruns the function that it contains. And the entire loop starts
over with the newly rerun function calling the getters, which return their values (like the  value of

our E button) and add the computations to the provider's internal list, waiting once again for
the setter to be called.
Even though they are extremely oversimplified (any core MDG members reading this are probably
spitting coffee right nowâ€¦), here is what the E', and  objects do:
E',1'2
	'	

)
'L
-)!7
/


'L,-'/
',-12
	')=
	
L

1/

L,/
3/
',-1),2
	
L,-),/
		
')
L
1/
3/
/
3
12

	



+%8	
'
-)!5
19
!5
/
&&5='9
&&)
!='123/

/
3
There are two things that we left out, for clarity, but are important in order to have a complete
understanding. First, the 
1 helper method also sets up an ='1 listener, which
removes the computation from the reactive provider's internal list. Second, computations are checked to
see whether they already exist in an internal list before they are added.

Why are the computations removed when the computation is invalidated, you may ask? The answer, in
short, is that it makes the entire computation ##' loop very elegant. It keeps all
the computations up to date and the dependent functions only run once each, no matter how many times
a getter is called inside the same function. If they weren't removed, the functions would be run multiple
times, which is .
So let's review what we did in this recipe:
â€¢ The  method creates a computation and passes your function to this computation
â€¢ The computation has an =' method that, among other things, runs your function
â€¢ After  has created a computation, it runs your function once, using the
=' method
â€¢ Your function has reactive variables in it, which have to-do lists
â€¢ As your function runs, getters are called, which add the computations to the to-do lists
â€¢ Setters are also called, which execute the to-do lists and clear them
â€¢ Because your functions in the to-do lists have reactive variables, the process is repeated (the
functions are rerun)
â€¢ Lather, rinse, and repeat
Again, this explanation is drastically simplified, and therefore, pretty inaccurate; however, conceptually,
it will hopefully give you a good understanding of what's happening under the hood.
.M
Meteor also provides the E'7 object, which runs exactly like E',, but can
store collections of reactive variables in key-value pairs. The syntax is exactly the same as for
E',, but you will need to add a key to the  and  methods, as shown in the following
code:
!1/&&E',
G1(+/(/&&E'7

!1.54./&&E',
G1(+/(9.54.&&E'7
To use E'7, simply add the '# package using the following terminal
command:

Lastly, you don't have to use E',, or E'7, and can instead 	
reactive providers. Please see the 

 recipe found in this chapter as an
example.


â€¢ The &

 recipe in Chapter 3, !
$

â€¢ The 

 recipe in this chapter

'$C&/	%	
4
Whenever we use Ajax, requesting (and even receiving) data is pretty easy. The complications come in
when we have to update the UI with new or updated data. With Meteor's reactive programming
capabilities, this is no longer an issue. In this recipe, you will see how to update your UI with Ajax
results, using Meteor's E', library.
"$%
To get up and run quickly, we will use a default Meteor project with a few packages added. Open a
terminal window, navigate to where you would like to create your root project, and execute the
following commands:
/
/

	


	

We are now ready to build a reactive Ajax query!
1 M
We will be pulling the weather data from 
)
, using their free (but for testing
only) API. We will take the results from our 
)
 queries and put them into a
E', library so that they can then be consumed reactively by our Blaze templates.
Let's start by modifying the UI:
1. Open (' and add a call to our soon-to-be-created ) template,
just under the call to the existing  template, as shown in the following code:
2233
77:99
2. We will also want to repurpose the counter in our  template to tell us what the starting
longitude will be. Change the description in the 
 element inside the  template, as
follows:

-AA
54&

X
7799&

&

3. Next, add our ) template, which is just a simple table with a bit of prettiness added,
thanks to bootstrap! At the bottom of (', add the following template:


-A)A
22C
33
-AA

&
)&

&
&
&

22C
33
-22'33
2233&
22
33&
22
33&
2233&
&
22&33
&
&
22&33
&

4. Save your changes and navigate to 
&&$%%%. While nothing (except the
description of the counter) will change, we will very soon want to view our weather data.
5. Let's open ('( and declare our E', libraries. Just below
671, add the following code:
671AA9%/

O41
6. We will now modify the .. function to increment the counter and make our
Ajax call. Locate the function inside the !
' section and modify the
code as follows:
&&)
'2

'66)5@#)
61AA961AARM/


2


'66=#)
.')1
0
Don't forget to update the counter increment to M; otherwise, your ) data won't change
much as you click.

7. Next, we need to add !
)
 so that our UI will populate properly.
Just after the !
' section, add the following:
!
)
12

12
1S)/
)1/
39
'12
1)WW):%;--A5A
AA/

A)A/
39

12
1)WW):%;
):%;
/

AA/
39

12
1

/

AA/
39
12
1
/

AA/
3
3/
8. Finally, we need to add our Ajax call and the asynchronous callback function once the result
comes in. Just after the !
)
 section, add the following two
functions:
@12
'B-R61AA9
J-BRO/
"!!1A
&&

)
&&JO&
&[-BJ9ARBRA9BO9ARJRA9B%W-A9
'@/
3
'@192
1WW2

')-FD68>
1/
)1)/
3
3
9. Save all your changes and click on the button on the project page in your browser. You should
see something similar to the following screenshot:
As you click, the weather results for a given area, moving towards north, will be displayed.
1  M
In this instance, we didn't use a Mongo collection, which is automatically reactive. Instead, we made
calls to 
)
 and updated a E', library (in this case, the
)+ variable) using the  method. Because the template helpers rely on a call to the 
method of that same E',, they are automatically rerun when the E', is
updated. Let's break it down.

We first created the ) template in our HTML:

-A)A
22C
33

22&33
&

The template iterates over the 
 helper object using an 22C33 block, populating an
HTML table with the results.
Next, inside our client-side JavaScript, we declared our reactive variable, ), using a new
E', library:
)-)E',/
We then used )1 in our 
 helper object, which is in
!
)
:

12

)1/
3
By using it here, we set up a dependency so that anytime )1 is called, the data for
the template is refreshed and the template is updated/rerun.
Finally, we hooked up our button to an Ajax call using "!!1, and we passed the
'@ function as a callback ("!!199):
@12
'B-
"!!1AA9'@/
3
Once the callback is triggered, it massages the data from the Ajax call and repopulates our reactive
variable using )1:
'@192

)1)/
3
As mentioned in the preceding section, when this  function is called, it invalidates the template
functions and reactively updates our UI.

You can see very clearly in the callback function ('@), and in the weather template
helper function (
), that the calls are regular, plain JavaScript. We're literally just calling a 
or  function. Because the object we're calling those functions on is a E',, all the
reactive dependencies and UI updates are handled for us.
You can begin to quickly see how powerful Meteor's reactive programming model is. Instead of messing
around with events and handlers or worrying about callback hell, we used a simple, clean  command
and let Meteor handle all the details for us.


â€¢ The &

 recipe in Chapter 3, !
$

â€¢ The &

 recipe in this chapter

$	
%
Because we so often deal with variables and data, it can go unnoticed that Meteor's reactivity doesn't
only work with reactive values. Any function from any JavaScript library can be turned into a reactive
provider. This recipe will show you how to create your own reactive providers using the
!
1 and !1 commands.
"$%
To keep the example simple, we will use a default Meteor project, with a 
 package, and a
random color generator. Open a terminal window, navigate to where you would like to create your root
project, and execute the following commands:






	
E%

1 M
Let's pretend you have a (pretty awesome) library called . Your  object
likes to roar. A lot. Mostly because "rawr" means "I love you" in dinosaur, but also because the
colorsaurus wants to share as many random colors as possible with all his friends. Whenever you ask
this motley beast for a color, he instantly gives you a random color. This is obviously the most useful
library ever written, so let's get to work building it!
1. Open '( and add the following  object just below the
!
 declarations, inside the 45 conditional:
-2
12
51/
39
)E12
1.)./
3
3/
2. While we're in '(, let's add the  helper function. Locate the
!

 method and add the following to the top of the method:
!

12
')7


')1
9=


3/
3. Save your changes, navigate to 
&&$%%%, and in the console window, type
the following commands:
:


')
:

O')
4. You should get a random color and a nice, short  from our friend, the 
function:
5. It's not reactive yet, but we need to prepare our UI first, for all the awesomeness that a reactive
 function can unleash. Open ' and make the
following modifications to the  template:
 (8(54&

 
67799AT.'

2233&

6. We now need to change our  event to make  roar. In
'(, modify the !
' section as follows:
!
'12
..12
&&)
61AA961AARB/


O')1
3
3/
7. All that's left to do is make  reactive and set up an  function. Open
'( again and add the following reactive statements, including adding the
!7
 object:
B	+%B	1
-2
12

B		')1
51/
39
)E12
1.)./
B	')1
3
3/
8. Now, add a ! function, immediately after the  code block,
as shown in the following code:
!112
1.C5.1.#.9
1/
1..1.#.91/
3/
9. Save your changes, go to your browser, and click on the button as many times as your little
'colorsaurus-lovin' heart wishes. You'll get some really great color combinations, as shown in
the following screenshot:
1  M
Notice how the button, text, and the page background change, and they all change to random, separate
colors. That's because we used a reactive library function that returns a random color each time it is
called instead of returning a set variable.

By having our 1 function return the result of 51, we are ensuring that every
time 1 is called, we get a different result.
We added 7

1 to the returning function, which logs the computations that are
created by either ! or by a reactive template (see the &


 recipe found in this chapter for a full explanation).
Finally, we called 7
1, which runs the logged computations.
Every part of the code is separate fromâ€”and therefore not dependent onâ€”the other code parts or
libraries. Through the !7
 object, Meteor keeps track of everything for us so we
can add or remove reactive dependencies at will. Try, for example, running the following line in your
browser console:
:+%'')7
'

'))19)1
Now, every time you click the button on the page, you get yet another random color from the
, printed to your console:
This is reactive programming at its very best. Rawr!


â€¢ The $

	
".


 recipe in Chapter 3, !
$

â€¢ The &

 recipe in this chapter

'$6
7
 	$
Not everything in our UI has to be dependent on Mongo collections. We can, in fact, use pretty much
any reactive object inside our templates, and changes will appear instantly. This recipe will quickly
show you how to use custom collections to populate and update UI templates.
"$%
Let's start with a base Meteor project and add the 
 and '#' packages. In a
terminal window, navigate to where you would like your project to reside and enter the following
commands:






	


Finally, open a browser and navigate to 
&&$%%% so that you can see updates in
real time.
1 M
We will create a simple array of button press snapshots, with a new element being added to the array
every time the button on the page is clicked. Subsequently, these buttons will be added to the UI using a
22C33 template block.
1. First, open  and add the following block to the  template, just after
the 
 element and just before the closing &
 tag, as shown in the following
example:
77W;


99
5

6	

6:W77O%995:
7799
&

2. We now need to add a reactive variable and append some helpers to the
!

 object. Open ( and add the following
highlighted code:
1452
	


O41
&&%
671AA9%/
!

12
12

61AA/
39
;


')7
	


')1
9=
O%')7

%1
9
3/
3. All that's left to do is to update the 
 variable each time the button is pressed. Inside
!
', in the .. event handler, add the following
lines of code immediately after the 61 call:
61AA961AARB/
C	


	


')RS1
C	


	
'7%2

'66)9)1
	



'C	


)1
4. Save all of your changes, go to your browser, and start clicking on the button labeled 
.
You should see a new button created each time you click on the button, similar to the following:
1  M
When we added the  helper function to the !

 object,
we simply replaced what we would usually use a Mongo collection for with a simple array stored inside
a E', element:

-)E',/
Collections are reactive providers, which means they track and rerun computations as appropriate. The

 object is also a reactive provider, and therefore, does the exact same thing. It reruns any

stored computations / reactive functions whenever the value is updated. In this case, it reruns
computations when the array is modified, and 
1 is called as a result.


â€¢ The &

 recipe in Chapter 3, !
$

â€¢ The &

 recipe in this chapter

'$
%'+


%
Typically, when elements in an HTML page are rendered, then that rendering isn't directly linked to any
of the data used to create them, for example, if we have an array of objects, we may generate some
HTML by iterating over the array and adding ' elements for each object in the array. Unless we
do something to manually link them to the array of objects, these newly created elements aren't
associated with the data that created them in any way. This leads to all kinds of development
shenanigans, as developers try to shoehorn in associative data, which is used in events and other
downstream functions. Long story short, using only existing web technologies, it's difficult to keep all of
the data exactly in sync with your HTML DOM elements. Meteor has been designed to help solve this
problem gracefully, keeping track of the context of each DOM element and therefore allowing instant
access to the data used to create the element in the first place. This recipe will walk you through how to
retrieve and use the data associated with individual DOM elements.
"$%
We will use the code base from the $
7

	

 recipe, found in this
chapter. Please complete that recipe and then add the  package by running the following
terminal command in the root folder of your project:
:E%
Have your browser open to 
&&$%%% as well so we can see the changes in real
time.
1 ,,,
We are going to add some functionality to the existing button creation. First, we'll add a random color to
each new button; second, we'll remove this color when the buttons are clicked; and third, we'll restore
the color based on the associative inline data.
So let's get started. We need to update the  template, setting the initial background colors for new
buttons. We also need a way to remove those colors at random. We'll do this by adding a new control
button.
1. Open your  file (probably ) and modify the  template to look
like the following:

-AA
 6I654&
5686:G,05:

T.'
2233&

22C33
'-A#
A

6%778996:

C22E33&'
22&33
&

2. We now need to add the 5 helper to !

 and modify the
data object being stored to make room for the new color. We also need to refine the 
events on the buttons to differentiate between adding a new button and removing a button's
color. Open your ( file (probably called () and make the following changes
to the variable declarations and the helpers:
1452

-)E',/
O4'#)1
!

12
12
')1
39
12

1/
39
E12
/
39
8')7

1
3
3/

3. Now, we need to modify the existing  event, add a new event to remove color, and add
one final handler to set up all the new buttons to regain their color when clicked. Make the
following changes to the !
' section:
!
'12
. WI.12
&&)
11RB/
'L
-
1VV:;/
I7
8')=
%')
91
C	


	
'I)1

1L
/
39
(%W8(')7

IPP',')Y'))1
'(	

()RIS
%8((1
9=
(%	

('=)7
+
%8
1
9
3/
4. Save all your changes and click on the 
 Button on your screen 5-10 times. You'll
notice that all the new buttons being added have a random color assigned to them, as shown in
the following screenshot:
5. Now, click on the (J button multiple times. At random, the buttons will lose their random
color and change to the default # blue color provided by 
, as shown in
the following screenshot:

Any of the buttons that have lost their color can regain the color by clicking directly on the button.
1  ,,,
The crux of this recipe is found inside the .
. event handler. There, we assign the
5 attribute of the clicked button to :
.
.192
!5- 
/
3
In this case, there is a reference to the associated data object for that DOM element. Meteor keeps track
of how each element is created. So when an event is fired inside the template, Meteor provides the data
object as the 
1
 (the ) in the event handler. In this way, Meteor can provide instant access to
the inline data for each rendered element.
Notice that even after we manually changed the 5 using the .
C5. event, Meteor still has a reference to the data object used to render the element. This
becomes important because we now no longer need to store data as an attribute of the DOM
elementâ€”no more # or #)' attributes that clutter up the UI and potentially
expose data. The data objects, though hidden from the UI, are available instantly and inline. So no fancy
calculations or DOM manipulation needs to be done in order to access the necessary contextual data.

.M
The preceding example uses the default Meteor !
 event handlers, so of course, the data is
available. But, even if you bypass Meteor's !
 event handlers and use, say, jQuery events
instead, the associated data will be available by calling the <H71 function of the
element.
Setting up the event handler is a little bit tricky in this case. We have to first move the population of each
button to a new template because the jQuery  event handler must be run inside of a
1 function callback. To accomplish this, make the following changes to your  file
(probably ):

-AA
-A<A54&
-A5A84S&

T.'
2233&

22C33
77:I99
22&33
&

5	6I6:
5

6	

6

6%778996:
W77O%995:
5	:
You will also need to remove the .
. event handler from
!
'. Once you've removed the event handler, add the (]1
event handler inside a !
E code block, to be run immediately upon the
rendering of a new button, as shown in the following code:
!
<-12
1.
.112
!5-
<H71/
3/
3/
Lastly, because we moved the ' rendering to the new < template, we need to move the
E and 5 helpers from !

 to a newly created
!
<
 block, as shown in the following code:
!
<
12
E12
/
39

512
/
3
3/
That's a lot of work for the same result, but it helps to illustrate the flexibility of the Blaze/Meteor
associative data capabilities. We only had to slightly modify the event helper to point to
<H71 rather than . Although the same keyword exists in
each event handler, the  inside the jQuery event handler refers to the DOM element, rather than the
associated data object inside the original Meteor event handler. <H71 takes a
DOM element as an argument and retrieves the associated inline data for that element.
In either case, getting to the associated data is very straightforward and allows you to do anything to
your UI programmatically, without having to worry about destroying/altering the data associated with
each rendered element.


â€¢ The 


	
 and &

 recipes in Chapter 3,
!
$


+$$C*	%'+
The jQuery library is crazily popular, and for good reason. When used properly, it can speed up the
development process and give us reliable ways of doing things that would otherwise take a lot of coding
effort.
A complement to jQuery is jQuery UI, which is a set of widgets, themes, and animation effects. With
jQuery UI, you can quickly create drag and drop components, sortable lists, and lots of other useful UI
niceties.
This recipe will walk you through creating a jQuery UI-sortable widget inside a Meteor template.
"$%
For this recipe, we will definitely want client and server folders to keep the code clean and readable. To
accomplish this, we will rely on our default template scaffolding. Please create a new project called
) using the 

<


 recipe in Chapter 1, ,
7>
%	, as your starting file structure.
Once you've completed the scaffolding, we will need to add the  package to our project.
In a terminal window, navigate to the root folder of your project and run the following command:
:E%
We will also want a nice theme, so let's use the adapted version of Google's Material Design theme, for
funzies. Enter the following command in the same terminal window:
:?
	

Next, we want to get a customized version of jQuery UI directly from (. Navigate to
http://jqueryui.com/ in a browser and click on 	 
, placed toward the right:

In the download builder, make the following selections:
â€¢ Select the latest stable version
â€¢ Uncheck the $$
 

 checkbox under 
â€¢ Check the $$
 

 checkbox under '+ 
â€¢ Check the 
 checkbox under +
â€¢ At the bottom, select 0  from the  dropdown
Your selections will look similar to the following screenshot:


All we need is the sortable interaction and the UI core. Everything else just adds to our file size, so we'll
leave it out. Click on  
, unzip the downloaded file once complete, locate the (#
( file, and copy it to your :
(;&&&
 folder.
We could simply pull in jQuery UI using a community package, but it's a bit bulkier and it doesn't help
us see how non-packaged third-party libraries can be used inside Meteor. So, we'll go with this manual
installation.
Open a browser to 
&&$%%% so we can see the changes in real time. We are now
ready to add the jQuery UI-sortable widget to our project.
1 ,,,
We will create color swatches, which will display the hexadecimal code they represent, and they will be
sortable, which means we can move them around via drag and drop.
1. To accomplish this, we first need to create a 6) collection, accessible on both the client
and the server. In your :
(;&& folder, create/edit a file named
( and add the following collection declaration:
6)-)451.)./
2. Next, let's create our UI using a template named ). Open/create the :
(
;&& file, remove all the contents, and add the following code:

6)&
&

2233
&

-AA
BT5S&B
'-A+A
22C)33
'-A)A
-A#2233A
2233&'2233&'
22&33
&'

-A>)A
-AA-A#
A
'-A>)5A&
&


3. We will want to style it just a little bit to make the swatches consistently sized. Open/create a
file named :
(;&&&& and add the
following CSS declarations:
)2
#B%%
/
#)B%%
/

#/
)/
#/
3
C+2
)OJ%
/
3
4. Finally, we will create the logic needed to add swatches and be able to drag them around the
screen. Open/create the :
(;&&
&( file, delete
anything inside the file, and add the following !

 and E
declarations:
!

12
)12
6)123922B33/
3
3
E-2
G12#B/39
1921R&J/39
+12RB/3
3/
5. Now, the fun part! We will create the (] object with its 
1 function
and hook up our  event handler using regular jQuery. In order for the
 and  event handlers to be added properly, we need to declare them inside a
!
1 function. In the same ( file, just below the E
declaration, enter the following code:
!
-12
1.C+.12

192
'-1%/
'-
'11%/
'-11%/
')E-/
1S2
)E-
EG1<H71/

31S2
)E-
E+1<H71/
32
)E-
E1<H719<H71
/
3
6)
1<H71L9
22)E33/
3
3/
1.C>).112
')5-512..9
..3/
6)12)59
6)11RB3/
3/
3/
Save all of your changes and hop over to your browser. The page should have a nice, stylish blue button
labeled 0! (2(. Every time you click on this button, a new swatch will be added with a random
color. If you drag and drop any of the swatches from one position to another, the swatches will be
reordered appropriately. This reordering is not temporary. If you refresh the page or open another
browser window, the reordering you did via drag and drop will remain.
So, for example, let's say you move a swatch from the last element to the first. The change will stick and
any other clients/browsers that open to the same page will instantly reflect the change.
When the following purple swatch is dragged and dropped, the changes will be as shown, as displayed
on the right-hand side of the following screenshot:

It is instantly updated in every UI, as shown in the following screenshot:
1  ,,,
Thanks to our  event handler, whenever a swatch is added using 6)1, a rank
is assigned to that swatch:
1.C>).112

6)1296)11RB3/
3/
If we look at the ) helper inside !

, we can see that the
Mongo 51 query is sorted by :

)12
6)123922B33/
3
This preserves the order of the swatches in the UI and allows us to manipulate their order as a result of
drag and drop.
Inside of our 
1 function, we were identifying where in the list the swatch had been
dragged and dropped to. Once we determine where the swatch is located, we calculate a new rank for
that swatch using the E helper functions. We then immediately update the )
collection with the new rank, which propagates and makes the position of the UI change permanent.
.M
The key takeaway here is that while jQuery (or any other third-party library) may be used to make direct
DOM manipulations, these manipulations won't persist beyond a single user's session, or even beyond
the next DDP change from the server.
To make the manipulations permanent and to fully utilize the Blaze rendering engine's fantastic reactive
programming model, we need to modify the datasource (in this case, the ) collection). The
modification is handled immediately, and with no effort on our part, through reactivity.
So, to review, third-party libraries can go right ahead and manipulate DOM elements in a Meteor
application, with the third-party code being executed inside a !
1 function
block.
To make the changes "stick", we simply update the corresponding Mongo collection as well. Using this
technique, we can integrate nearly every JavaScript library out there (if someone hasn't already done it
for us on https://atmospherejs.com/).


â€¢ The 

<


 recipe in Chapter 1, ,
7>%	
â€¢ The $

$

 recipe in this chapter

 F, '$

In this chapter, you will learn the following topics:
â€¢ Creating dynamic graphs with SVG and Ajax
â€¢ Using the HTML FileReader to upload images
â€¢ Creating a coloring book with the Canvas element
+	
Web programming, on the client side, has come a long way since the inception of HTML. Up until
recently, it was necessary to write/use third party 
%

 libraries to do simple things, such as build
graphs, read files, and draw on the screen. But that cute lil' bucktoothed kid we all knew and disliked has
grown up! With powerful, easy to use scripting and graphics APIs and objects now supported in nearly
every browser, web programming is finally ready to be used on its own. The recipes in this chapter will
go through some of the most popular Web API objects, and show you how to implement them inside
Meteor.

$%$ 4"C&
While there are a lot of graphing libraries out there (all of which you can use in Meteor, by the way!) it's
good to know how to implement fundamental shapes inside an HTML page, using 4" 
.
Sometimes implementing a full-fledged graphing library is overkill, and having a working knowledge of
SVG in your back pocket can be very useful. However, this is a Meteor recipe; we not only want to see
an example of SVG, but we want to see it in action! This recipe will teach you how to stream a live data
source into MongoDB collections, and then represent that dynamic collection graphically, using SVG
tags.
"$%
We will be using a default project installation, with , ', and  folders, to keep the
code clean and readable. In a terminal window, navigate to where you would like your project to reside,
and execute the following commands:

	

	

	Y
%
%

%
We also want to make use of a few packages, and remove the 
 package, so let's do that
now. Run the following commands in the terminal window:
	

	
%

E%

We're now ready to start creating our SVG streaming data graph.
1 ,,,
Our project is going to read the comments stream from http://www.meetup.com/, which is freely
available, and very easy to use. We will record the comments from the stream, and display a sum total of
comments by state. We will need to create the interface, which will display state totals as a vertical bar
chart, and will also show us the last comment made, along with a picture of the Meetup Group it came
from.
0
0

We are using the data stream collecting code for demonstration purposes only! There is no redundancy
checking or hardening built into it. We strongly recommend against using this code as-is in anything
even resembling a production application.
Proceed with the following steps to create dynamic graphs with SVG and Ajax:
1. We will first create the SVG element with the  of <. We will then create a
 element for each individual state, and adjust the height using the 6
template. Inside the :
(;&& folder, create a  file, add
the following HTML code, and save the file:

2233
&

-AA
'-A<A)-AN%%A-AP%%A
22C633
22633
22&33
&'
'-A5A22533&'
-AA-A2233A&
&


-A6A
)-A22)33A-A22"33A
-A2233A
-A2233/#
%N/A&
-AOA-A22T33A-AA2233
2233&
&

2. We want to provide some basic styling on our page, so let's get that out of the way. In the
:
(;& folder, create a  file, and add the following style
declarations:
2
#."'#>.9#/
#HBJ
/
3
C<2
$
C/
3
C52
#
B%
/
3

C2
)J%%
/
#
B%
/
3
3. Next, let's set up the 5 and 5! collections. To keep things cleaner,
logic-wise, on the client we will use some server-side logic to aggregate the incoming
comments. We first need to declare our collections for use on both the client and the server. In
the :
(;&& folder, create a new file called (, and add the
following two declarations to the file:
5-)451../
5!-)451.!./
4. Next, let's set up monitoring for the 6 data, and add a code to count the
totals. As we removed the 
 package, we need to declare our 5
publication, and at the same time, we want to update the totals for a state whenever any new
comments come in. We can accomplish this by using the 4
1 function and
using the '51 method. In your :
(;&'&
folder, create a new file called '
#'(, and add the following method:
4
1A6A912
'-5123/
'H-/
'512
192
1H/
'!-41.<5.9/
'!-41.<6.9/
'!-
5!8123/
1S!VVS!/
!-L
1!91992
L-/
1!2
'6-
L@1!92L3/
16L-6
VV512..9..3/
L-512..9
..3/
3
L/
3/
'8(-29!:%;9
!3/
5!
128(398(/

3
3/
H-/
/
3/
5. We also need to declare the 4
1 method for our state totals by country, so
let's do that as well. Append the following to the end of the '
#'( file:
4
1A
7A912
5!123/
3/
6. We need to keep track of the country that we are monitoring, and what the last comment and
picture from the Meetup Group were. The most straightforward way to do this is through
6 variables, so let's create a file called '
#( in the :
(
;&& folder, and add the following three variables at the top:
671AA9AA/
671A5A9A>A/
671AA9
A
&&BM((H&#
A/
7. Now that we have specified the country that we will be monitoring, we can add our
4 statements, which both take the country as a parameter. In the
'
#( file, add the following statements inside a !
block:
!112
41A
7A961../
41A6A961../
3/
8. We will hook up the data later, but we still need to add the !

 method for
displaying the latest pictures and comments, based on the 6 variables declared in the
preceding steps. In the '
#( file, add the following code just below the
! block:
!

12
12
61../
39
512
61.5./
3
3/

9. In anticipation of incoming data from the client, we need a few 
 methods, to message
data and perform 
6 on our Mongo DB collections. We also want a quick way to
reset our collections, because the sheer amount of data we're collecting can get messy for a
sample application. As such, we will create the following server-side methods:
â—¦4: This is used for inserting a message into our 5 collection.
â—¦<6: This is used to aggregate the total number of 5, by state.
â—¦<5: This is used to aggregate totals, by country.
â—¦7<: This is used to reset the 5 and 5! collections.
Open '
#'( and add the following code:
412
412
'
4-23/
2

4-
/

4-
/

4-
/

4-1

L
[


L
LAA/

4 -7)1/
3
12
1/
/
3
51
4/
39
<612
51:22339
2
2L2AA392B3339
22AA#B33;/
39
<512
51:22339
2
2L2392B333;/
39
7<12
5'123/
5!'123/
1.5'./
3
3/
10. With our server-side helper logic all in place, it's time to read and parse the data stream. In the
'
#( file, add the following , , 
,
, and  websocket functions:

4
612
'-23/
')/
'?E+-A)&&
&J&'LA/
-12
?E+-VV?E+/
)-)@61?E+/
)
-
/
)-/
)-/
/
3/
-12
)WW)1/
3/

-12
1A4
A/
3/
-12
'L-FD68>
1/
1L

L

61..9
L

L

L/
61.5.9L/
41.4.9L/
&&
3/
-12
1A4
A/
3/
/
3
11. With the data stream all ready to go, all that's left is to add our display logic, and flip the switch.
In the '
#( file, locate the !

 code block,
and add the following helper function just below the 5 event (don't forget the
comma!):
512
61.5./
39

2
')7

8+
G'72

'(()9)1
'0)RS1


+


1
1
24N.!##1
24N*@##1
C	'
+
='
==)7
G791
G


1
G/1
G
1
GPP'24N.Y'
))1
G
%*PP'24N*)1
G
%;
YG
%*1
G
1
G1
9)1
9
3/
12. We need a few style helpers to properly position our text data, and to let us know where the
most recent comment was added (to make the things all fancy!). Append the following
!

 code block to the bottom of the '
#( file:
!
6
12
T12
RYY1"&J/
39
\12
)#YY1)*J/
39
12
161.6.9
.CJKB./
/
3
3/
13. Using the !
 method block, we will turn our data stream on and update
our 6 session variable whenever a new comment is posted, using a simple
 method. Enter the following code at the bottom of your '
#(
file:
!
-12
46-)4
61/
461/
112
'-581
261..3922 #B33/

161.6.9/
3/
3
14. Save all changes, and open a browser (if you haven't already) to 
&&$%%%.
Wait just a bit, and you should see the new comments coming in, with state totals being updated,
as shown in the following screenshot:
15. Let it run for a bit, so that more states appear. If you let it run long enough, you'll eventually get
all 50 states (and maybe even Puerto Rico!). If you would like to reset your collection, open
your browser console and enter the following command:
:,'(
BI()

1  ,,,
As mentioned in the recipe introduction, there are two critical pieces to graphing dynamic data. The first
has to do with rendering SVG objects, and can be found mostly in the HTML template code, in the
:
(;& & file. We first used the 2233 template
inclusion to reference our  template. The template itself declares our ' element, then runs a
standard 22C33 control structure on the 6 collection:

-AA
5
:
22W 633
22633
7799
5
:

&

We set the width and height of the ' element directly (note that they are 
 CSS style attributes,
but are actual element attributes instead), and add a unique  attribute for CSS styling as well, as
shown in the following example:
'-A<A)-AN%%A-AP%%A
In the 6 template, we create a  element and set pretty much every attribute
dynamically:
â€¢ ): This is set based on the number of comments.
â€¢ : This is set based on the total number of states.
â€¢ : This is the vertical position and is set based on position in the data collection.
â€¢ : This is the color value which is set to green if it was the last state updated.
We likewise set the position of the text SVG element to make sure it lines up with the corresponding
 element:

-A6A
 -A22)33A -A22"33A
-A2233A

-A2233/#
%N/A&
 /-AOA -A22T33A-AA2233
2233&
&

It's important to understand that SVG elements are not positioned relative to other elements inside the
same ' block. This is why we had to set the position of each element. Also, some attributes
() and  for example) can be set directly. SVG elements are truly a hybrid between a
bonafide DOM element and a graphic element.


For a great introduction to SVG, you can read the MDN SVG tutorial, found at
https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial.
The second critical piece surrounds the use of the @6 HTML5 Web API object, found in our
4
6 function of the '
#( file. In this function, we prepare a pretty
standard Ajax (actually @6) call by setting handlers for , 
, and
:
4
612
	 -


 -

 -
3
The one we are most interested in is the  handler, where we parse the data (which comes
in as a string) into an FD68> object:
'L-FD68>
1/
We then (conditionally) set the  variable, which immediately changes the image displayed in
our  template. We likewise update 5 to change the displayed comment:
1L

L

61..9/
61.5.9L/
Finally, we make a 4 method to the server-side .4. method, which puts things in
motion to update our state totals:
41.4.9L/

The @6 object also has a good MDN tutorial, found at https://developer.mozilla.org/en-US/
docs/WebSockets.
A few more odds and ends can be found in the code we used, such as the 
package, which lets us do summations and groupings on the MongoDB collections (official support
coming soon!) via the . method, but this recipe was meant to focus on the SVG and Ajax
(@6) aspects.


â€¢ The &

 recipe in Chapter 3, !
$

â€¢ The "
 recipe in Chapter 11, #2


'$12
	
$
Adding files via a web application is a pretty standard functionality nowadays. That doesn't mean that
it's easy to do, programmatically. New browsers support Web APIs to make our job easier, and a lot of
quality libraries/packages exist to help us navigate the file reading/uploading forests, but, being the
coding lumberjacks that we are, we like to know how to roll our own! In this recipe, you will learn how
to read and upload image files to a Meteor server.
"$%
We will be using a default project installation, with , ', and  folders, and with the
addition of a special folder for storing images. In a terminal window, navigate to where you would like
your project to reside, and execute the following commands:
	
	
	Y
%
%

%
%
Note the dot in the  folder. This is really important because we don't want the Meteor
application to automatically refresh every time we add an image to the server! By creating the images
folder as , we are hiding it from the eye-of-Sauron-like monitoring system built into Meteor,
because folders starting with a period are "invisible" to Linux or Unix.
Let's also take care of the additional Atmosphere packages we'll need. In the same terminal window,
execute the following commands:


	
	

We're now ready to get started on building our image upload application.
1 M
We want to display the images we upload, so we'll be using a layout package
('
) for display purposes. We will also initiate uploads via drag and drop, to
cut down on UI components. Lastly, we'll be relying on an npm module to make the file upload much
easier. Let's break this down into a few steps, starting with the user interface.
1. In the :
(;& folder, create a file called 
 and
add the following templates and 
 inclusions:

B=S&B

22
33
22
H33
&

-A
A
22C5
@-O%
7-A%JA
-A45A
33
22C33
2233
22&33
22&533
&


-A
HA
'-A
HA-A22
33A7
&'
&


-AA
22CFA45A33
-A2233A
-A
#A
-A)22@33A&
22&F33
&

2. We want to add just a little bit of styling, including an "active" state for our drop zone, so that
we know when we are safe to drop files onto the page. In your :
(;&&
folder, create a new  file and enter the following CSS style directives:
2
#CO%O/
#HJ/
3
'C
H2

/
O
/
JZ/
)IPZ/
B%%
/
/
#B%%
/

#/
$
CKNIN/
CKNN/
#1JB%9J%%9J%%9%O/
3
'C
H'2
#CJKP%/
CJKP%/
#1$I9BKM9IP9%$/
3

#2
#)M%%
/
3
3. We now want to create an = collection to store references to our uploaded image files.
To do this, we will be relying on !L(0. EJSON is Meteor's extended version of JSON, which
allows us to quickly transfer binary files from the client to the server. In your :
(
;&& folder, create a file called G( and add the MongoDB collection by
adding the following line:
=-)451../
4. We will now create the G object, and declare an EJSON type of G to be used
on both the client and the server. After the preceding = declaration, enter the following
code:
G-12
-VV23/
-/

-
/
-/
H-H/
3/
5. To properly initialize G as an EJSON type, we need to implement the
D68>,1, 

1, and D68>,1 methods. We will then declare
G as an EJSON type using the FD68>!
1 method. Add the following code
just below the G function declaration:
GD68>,-12
)G12
9


9
FD68>D68>,19
HH
3/

3/
G

-2
G9

>12
.G.
39
1
2
1--
WW
H--
H/
39
12
)G12
9


9
9
HH
3/
39
D68>,12
2
9


9
FD68>D68>,19
HH
3/
3
3/
FD68>!
1.G.9GD68>,/
0
The EJSON code used in this recipe is heavily inspired by Chris Mather's Evented Mind file
upload tutorials. We recommend checking out his site and learning even more about file
uploading at https://www.eventedmind.com.
6. Even though it's usually cleaner to put client-specific and server-specific code in separate files,
because the code is related to the G code we just entered, we are going to put it all in
the same file. Just below the FD68>!
1 function call in the preceding step, add the
following 45 and 46' code:
1452
L1G

92
192
'E-)GE/

'-/
-VV123/
E-12
-)?N 1E/
19/
3/
E-12
1E/
3/
E  <1/
3
3/
L1G92
192
)G119/
3
3/
3/
146'2
'->
1../
'
->
1.
./
L1G

92
'19
2
'-
(1
'@799/
'<-)<1/
)G619<9
/
3
3/
3/
7. Next, we will add some = collection  helpers. We will provide the ability to add
either references (URIs) to images, or to upload files into our  folder on the server. To
do this, we need some 4. In the :
(;&'& folder,
create an 
#'( file, and enter the following code:
412
?E+12
=123/
39

=401G2
G'1..923/
=12.&.RG3/

3
3/
8. We now need to establish the code to process/serve images from the  folder. We need
to circumvent Meteor's normal asset serving capabilities for anything found in the (hidden)
 folder. To do this, we will use the  npm module, and redirect any content requests
accessing the =& folder address to the actual  folder found on the server. Just
after the 4 block entered in the preceding step, add the following
@ 

"1 function code:
'->
1../
@ 

"11992
'-&^_&_&1*&1/
1S--2
'-
'@7R.&&.R:B;/
'-G619/
)"1J%%92
.5#!
...
3/
)1/
1/
32
1/
3
3/
9. Our images 
 template is entirely dependent on the = collection, so we need to
add the appropriate reactive !

 function on the client side. In your
:
(;&& folder, create an 
#( file, and add
the following code:
!


12
12
=1/
3
3/
10. If we add pictures we don't like and want to remove them quickly, the easiest way to do that is
by double clicking on a picture. So, let's add the code for doing that just below the
!

 method in the same file:
!

'12
.
#.12
='12
LL
3/
3
3/

11. Now for the fun stuff. We're going to add drag and drop visual feedback cues, so that whenever
we drag anything over our drop zone, the drop zone will provide visual feedback to the user.
Likewise, once we move away from the zone, or actually drop items, the drop zone should
return to normal. We will accomplish this through a 6 variable, which modifies the
CSS class in the '
H element, whenever it is changed. At the bottom of the

#( file, add the following !

 and
!
' code blocks:
!

H
12

12
61.
./
3
3/
!

H'12
.'C
H.12

'71/
61.
.9.'./
39
.'C
H.12

'71/
61.
./
3
3/
12. The last task is to evaluate what has been dropped in to our page drop zone. If what's been
dropped is simply a URI, we will add it to the = collection as is. If it's a file, we will
store it, create a URI to it, and then append it to the = collection. In the

#( file, just before the final closing curly bracket inside the
!

H' code block, add the following event handler logic:
.'C
H.12

3=
(	W	E(')7
	B')1
2


'(	()1

V+

1


'V+
B'(/
())'(()1

C.'V+

=7
	(/(
9)1

'
)7
C'
='==)7
<'='=)7
,'(	D,N(==')7
')7

'

)1
9
9)1
9)
9)1
9
'
)7
C'
='==)7
,'(KO-(=')'(
())1
9)1
9
')7
F
2'')7

')1
C'
=')7

F'(
()1
9)1
'),'(KO-(=
)1
9)1
9
9
3/
13. Save all your changes and open a browser to 
&&$%%%. Find some
pictures from any web site, and drag and drop them in to the drop zone. As you drag and drop
the images, the images will appear immediately on your web page, as shown in the following
screenshot:

As you drag and drop the dinosaur images in to the drop zone, they will be uploaded as shown
in the following screenshot:

Similarly, dragging and dropping actual files will just as quickly upload and then display
images, as shown in the following screenshot:

14. As the files are dropped, they are uploaded and saved in the & folder:

1  M
There are a lot of moving parts to the code we just created, but we can refine it down to four areas.
First, we created a new G object, complete with the internal functions added via the
8(

-2U3 declaration. The functions added here ( 
>, ,
, D68>, and D68>,) are primarily used to allow the G object to
be 7 and 7 properly on the client and the server. Normally, this isn't needed, as we
can just  into Mongo Collections directly, but in this case it is needed because we want to use
the GE and Node  packages on the client and server respectively to directly load and save
image files, rather than write them to a collection.
Second, the underscore L1 method is used on the client side to create the 1 function,
and on the server side to create the '1 function.  takes the file(s) that were dropped, reads
the file into an  <, and then calls the included , which uploads the file to the
server. The ' function on the server side reads the  <, and writes the subsequent
image file to a specified location on the server (in our case, the  folder).
Third, we created an 

 event handler, using the .
C
H. event. This handler
determines whether an actual file was dragged and dropped, or if it was simply an HTML 
element, which contains a URI link in the  property. In the case of a file (determined by

), we call the G command, and pass a callback with an immediate
41.
=40.U method. In the case of an  tag, we parse the URI from the
 attribute, and use 41.?E+. to update the = collection.
Fourth, we have our 
 functions for updating the UI. These include !


functions, !
' functions, and the @ 

"1
function, used to properly serve uploaded images without having to update the UI each time a file is
uploaded. Remember, Meteor will update the UI automatically on any file change. This unfortunately
includes static files, such as images. To work around this, we store our images in a file invisible to
Meteor (using ). To redirect the traffic to that hidden folder, we implement the 1
method to listen for any traffic meant to hit the .&&. folder, and redirect it accordingly.
As with any complex recipe, there are other parts to the code, but this should cover the major aspects of
file uploading (the four areas mentioned in the preceding section).
.M
The next logical step is to not simply copy the URIs from remote image files, but rather to download,
save, and serve local copies of those remote images. This can also be done using the GE and
Node  libraries, and can be done either through the existing client code mentioned in the preceding
section, or directly on the server, as a type of  job.

For more information on GE, please see the MDN FileReader article, located at
https://developer.mozilla.org/en-US/docs/Web/API/FileReader.


â€¢ The $
 recipe in Chapter 8, 

.

â€¢ The &

/, <
 recipe in Chapter 11, #2


$
$ 


There are now multiple ways to display graphics on a web page. DOM elements, SVG, WebGL, and,
perhaps the most user-friendly, the 5' element. Using JavaScript, the 5' element provides a
flexible graphics area where you can paint, erase, color, cut and paste to your heart's content. A good
representation of what you can do with the 5' element is found in this recipe, where you will
learn how to build a coloring book app from scratch.
"$%
Get your crayons! Okay, maybe those won't be needed (don't use them on your monitor!) but what we're
about to create is the next best thing, so let's get the app structure and packages out of the way, so we can
start coloring!
In addition to the usual suspects, we will need some specialty folders to make the grouping of our code
cleaner and more manageable. Open a terminal window, navigate to where you would like to create your
root project, and execute the following commands:
%
%
%Y
%	
	
%7=
=	9

1 M
It may not seem like it on the surface, but there's actually a lot to developing a coloring book
application. You have to worry about user preferences, undo/redo, picking colors, erasing, and so on. We
will tackle these steps one at a time, adding packages and functionality as we go along.
1. First, we will add user management packages. Meteor has some fantastic out-of-the-box
functionality for user account management, and we will take advantage of that functionality. In
a terminal window, navigate to your :
(; folder and add the following two
Meteor libraries by entering the following commands:

	




2. We will want to display these on the screen, so let's add the necessary UI elements and style
them appropriately. Create a file called # in your :
(;&&
folder, and add the following code:


22<33
&
Your page will look very spartan at the moment, but just like that, we already have accounts and
account creation! In a browser, navigate to 
&&$%%% and you should see
the accounts dialog dropdown at the top left of your screen, similar to the following screenshot:
3. Let's finish up the visual aspects of our UI by adding a toolbar, where we can see color swatches
and adjust the size of our brush; and let's also add our ' element, with a background
' to display the picture we want to color. In the same # file, add the
following template inclusions in the  element block:

22<33
2233
'-A
A&'
22
33
&
4. The 
 template is actually the easiest, so we'll add the code for that first. Add the
following template code just below the & tag:

-A
A
'-A
A-A#
A=
&'
&

5. Now we add the  and the ) templates, which use a bit of SVG and
4( to display our brush and color swatches. Just below the template code added in
the preceding step, add the following code:

-AA
'-A#HA-A#HA
'-A#
')A

-AK%A)-AK%A
-A
22433A
-A$OA-A$OA
-A22
')H33A
-A22
')33A&
&'
&'
22C5@-O%
7-A%JA
-A45A33
22C)33
22)33
22&33
22&533
&


-A)A
22CFA45A33
'-A)A
-A#2233/A
2233&'
22&F33
&

6. To get everything all pretty, we need to add some Atmosphere packages, and just a bit of CSS
styling. In a terminal window, navigate to your :
(; folder and run the
following commands:


	
	

7. Next, create a file named # in the :
(;&& folder, and
add the following style declarations:
C
2
C/
$
C/
)N%%
/
P%%
/
#M
/
#$/
#/
B%%
/

/
3

C
2

#'/
#'/

/
1.E)0=G./

%
/
B%%
/
)N%%
/
P%%
/
H#III/
3
#
2
#)##/
3
C#2

/
#)JJ%
/
J%
/

B%
/
3
##2

/
%
/
3
)2
O%
/
)O%
/
#M
/
CJ
/
#O%
/
#H%N/
#/
#O
/
3
L2

/

B%%
/
J$
/
)O%
/
3
#H2

/
B%
/

B%
/
$
C/
#M%
/

)KP
/
KP
/
3
8. Note that the 
 element has a background image in it, called .E @E0=G.`You
can either obtain this picture from the source files for this recipe, or you can add your own
image to be colored. The image 
 have a transparent background, and will look better if it is
N%%P%% pixels, but in any case, the image you want displayed should go into the :
(
;&
& folder, and you should change the  property in the preceding
step, so that it will display properly on the screen.
9. We will need to be able to change brush sizes, change colors, and paint/erase on the canvas, and
we want to do that no matter what device we are on, so we will use the official "(
package. We also want to include global shortcut keys for undo (
 + C) and redo (
 +

 + C), so we'll add a handy library that does that! In a terminal window, in your
:
(; folder, enter the following two commands:
 #>C"

10. It's cleaner and easier to use "( events in the !
' block, so we
want to add the jQuery plugin for the "( file. As Meteor piggybacks on jQuery event
handlers, if the plugin is added to jQuery, it's added to Meteor! As of this writing, the most
reliable way to add the plugin is to manually copy the 
 script file into your :
(
;&&
& folder. You can either obtain the script by going to
http://hammerjs.github.io/jquery-plugin/ and following the instructions there, or by creating a
file in your 
 folder called ((, and adding the following code:
112
1
---..WW2
1:.(.9.(.;9/
31

---.(.2
11.(.91.(./
32
1(]9"/
3
3119"2
19
2
'-1/
1S1AA2
1AA9)"1:%;9
/
3
3
-1
2
112
19
/
3/

3/
&&(]'
"4

-11F2
1
92
F19
9/
112


9

3/
3/
31"4

/
3/
11. We will now add the  ', , and 6) collections. As mentioned
previously, we will need to keep track of our undo/redo, through recording activities. We will
also need to keep track of color swatches, user preferences for brush size, and so on. To do this,
we will declare three MongoDB collections. In your :
(;&& folder, create
a file called #( and add the following code:
6)-)451.)./
-)451.
./
 '-)451.'./
We'll be using these later on, on both the client and on the server, but for now we're all done.
You can close the #( file and move on to the next step.
12. Let's add the server-side logic for the preferences and undo/redo history. As unbelievable as this
may seem, the server-side code for the coloring book is very light, compared to the client code.
So, we're going to get it out of the way. We need to do several things on the server:
â—¦Initialize swatches and other preferences
â—¦Allow new swatches to be added, if desired
â—¦Track and recall our painting activity (undo/redo)
â—¦Clear everything out, so we can start over
In your :
(;&'& folder, create a file called #'( and add
the following 4 declaration:
412
6)1=2
&&-
1S=/
&&)')9
16)812=3/
&&)
6)12.C%B.9=3/
6)12.C.9=3/

6)12.CBM%.9=3/
6)12.CPKJJ.9=3/
6)12.CKM$.9=3/
6)12.CJKB.9=3/
6)12.CJIN%I.9=3/
6)12.C%%%.9=3/
39
6)12
&&-
1S=/
&&.9)
1S6)81232
6)129=3/
3
39
 '12
&&9
1S=/
&& '
 ''12=3/
39
"1
62
&&).''
9
&&.9
1S
6VVS=/
&&'

 ''12
:2 2
6 3392=3;3
3
3/
13. Now add the  +1 event handler in the same file:
 +112
&&9)''=
=-L/
1S=/
&&9).'
9.H
1S812=32
12=9HBB9.CKM$.3/
3
&&)9.H)
41.6).9=/
3/

14. It's time to build the main logic that allows us to draw on the screen, using the '
element. Create a file called #( in the :
(;&& folder
and add the following initial default values that control what we are drawing, and what our
paintbrush color should be:
671.).9/
671..9.CKM$./
15. Because it's used in multiple places, we want to create a )+ function that will draw/
erase parts of the screen as needed. Add the following code just below the
67 declarations:
&&**)+**##
)&
)+-1999H2
1H
@-H/
1
6-/
161..2
5
8
-.#./
32
5
8
-.#'./
3
1/
'!19/
!19/
1/
1/
3
16. Now, add some helper functions that help us clean up the screen, or calculate the paint stroke
positioning, relative to the page:
&&****##



-1'2
2

=1'#
'!+9

=1'#
'!!

3/
3
&&**)
**##

)
-1 2
E1%9%9'1.).9

'1../
3
Whenever the user lifts their mouse/stylus/finger off of the screen, we want to record what they
just drew, so let's add a snapshot-taking function just below our helpers:
&&**6
**##
'

&&
6
-12
'=-4=1/
1S=/
&&5'5'
5
8
-.#'./
''-':%;7?E+1/
'
-7)1/
&&)#9
&&


'"-61../
1"2
'6
-61.6
./
41.".96
/
61..9%/
3
&&6' '"
 '12
=9
''9
 
3/
3/
17. When we first log in, or when we go up and down the undo/redo history chain, we need to
repaint the screen. Add the following helper function just below the 6
 helper:
&&**
 '**##
)
&&&&)

 '-1=92
' - '12=39
22 #B331/
1S 2
/
3
1S :;- #B/
)
1/

'8(-)=1/
8(-12
)=19%9%/
3/
61.6
.9 :;/
8(- :;'/
3/
18. Okay, we're ready for the final touches, which include enabling our toolbar, and hooking up all
the touch/mouse events to adjust brush sizes, change colors, paint and erase. In your
:
(;&& folder, create a file named 
#(, and add the
following interaction event handler code:
!
-12
&&)('
'6H-1.C#H.1/
&&)
B%J
'-6H1../
1.
.12J3/
3/
19. In that same file, add the !

 function for displaying brush size, color
preference, and so on:
!

12
)12
&&E)
6)124=13/
39

')12
&&
9)
'
-8124=13/
&&9)9

1

H-YY1
H&J/

/
39
412
&&).9
161..[../
3
3/
20. Let's also add the interactivity logic, via the !
' helper block:
!
'12
.
C#H.1'2
&&
9H

61.G.9'/
61.EH.9/
39
.
C#H.1'2
&&).H9
1S61.EH.9/
&&)9
9(
'
-8124=13/
1S
/
&&)
'(-61.G./
(-'#(/
&&)H
')6H-
HR(/
&&
9H
61.G.9'/
&&)H$)

1)6H-K%WW)6H-$2
&&(



H-)6H/

12L
L39
/
3
39
.

C#H.1'2
&&(.

61.G./
61.EH.9/
39
.
C#H.1'2
&&..
61..91S61../
3
3/
21. We have a little bit of logic/event handling for the ) template as well, so let's create a file
called 
#)( in the :
(;&& folder, and add the
following event listener and event interaction logic:
&&

'
&&(
!
)-12
1.).1/
3/
!
)'12
.
).1'2
&&
9/

'
-8124=13/
1S
/
&&)'))



-/
&&


12L
L39
/
3
3/
22. Two more files and we're done! We have quite a bit of interaction to handle in the 

template (where our ' element is), so let's create a file called 
#
( in
the :
(;&& folder, and add our initialization logic, via the
!
 method block. Add the following code to the 
#
(
file:
!

-12
&&')))
'-1.C
./
&&'
-':%;51.J./
&&

H'
'12
)N%%9P%%
&& >7

'(
31/
&&))B%J
'1..1.
.12J3/
&&))

D-5
-../
&&6
869(
'-1'2
'
'71/
3/
23. On preference changes, or on login/logout of a user, we have to perform some reactive logic to
clean up or initialize our canvas. Add two  method blocks just below
!

, as follows:
&&E')'
&&


112
&&
9
'
-8124=13/
1S
/
&&)
6-
/
@-
H/
3/

&&E')'
&&?9

112
&&).1=9
'=-4=1/
1S=2
)
1/
/
3
&&)9


9
&&


 '1=961..VV%/
3/
3/
24. The last item of business for the 
 template is to hook up the drawing events
themselves. When we start drawing, we need event handlers for 
, 
',

, and we also need one to clean everything up when we 
 on the page. Add
the following !
' method block to the bottom of 
#
(:
!

'12
.
'C
.1'2
&&))
161.).9
WW4=12
&&

-1'/
&&
)
)+19/
&&


-/
3
39
.
C
.1'2
&&
9)))
-1'/
&&'))
61.).9/
39
.
C
.1'2
&&)'S
61.).9/
&&))9
6
1/
39
.
C
.1'2

&&
)
1/
&&)

41. './
3
3/
25. All that's left now is the ) event logic, so that we have proper undo/redo. Quickly make
a file called 
#( in your :
(;&& folder and add the
following code:
!
'12
.).1'2
&&.99&&

'+-
 '124=131/
1S+/
&&=.5!E+Ra547Ra9).9&&

11S'QWWS'QVV1'5S--I%/
&&
9
'"-61..VV%/
&&)6"=G!R547Ra99&&

1'Q
"##/
&&)9

"RR/
&&).
!=4F6 5F)
&&.D'6
9.

1"%VV"+#B/
&&9)

61..9"/
3
3/
Whew! We made it through! Save all of your changes and navigate to your project in a browser,
via 
&&$%%%. After you log in/create an account, you should see a nice

color palette, a picture of your choice, and a brush size/preview. The following features are
available:
â—¦Double-click on the brush preview to toggle .. mode
â—¦Click and drag left and right on the brush preview to resize the brush
â—¦Double-click on the page to erase and clear your undo history
â—¦Press &
 + C or &' + C to undo your strokes
â—¦Press 
 + &
 + C or 
 + &' + C to redo your strokes
â—¦Log out and in with another user, to allow multi-user use
Do note that your undo/redo history chain is preserved, even if you log out. Once you log back
in, you can go through your paint creations, stroke by stroke.
If you are a particularly awesome artist like my daughter, and you have properly coded
everything, your page will look similar to the following masterpiece:
1  M
Oh boy! That was a lot of code, just to demonstrate how the ' element works, wasn't it? Instead
of going through all of it step by step, let's go through the important pieces, related to the 5'
element.

Inside of 
#
(, we initialize our '. In the
!

1 helper block, we first find our ' element using
1.C
.:
'-1.C
./
We then get the context (the handle) using the very appropriately-named 51 function. We
only want the 2D representation and not the 3D, so we pass .J. as the argument to 5:
-':%;51.J./
Moving on to #(, we have several uses for the context, passed around in the global 
variable. In the )+ function, we set the size (@), color (6) and we set
the type of stroke (5
8
) according to whether we are erasing
(.#.) or laying down some paint (.#'.):
)+-1999H2

/. -H/

/
%2 -/
161..2
5
8
-.#./
32
5
8
-.#'./
3

Once all that is set/determined, we tell the canvas that we are starting to draw (); we move
our stroke ('!, !) and then we clean up (, ):
;1/
+19/
+19/

;1/

%1/
To save database space/transactions, we don't record every stroke. Instead, we wait for a stroke to be
finished (the .
C
. event) and we add a snapshot of the entire canvas. We did this
inside the 6
 helper function, with a call to the '7?E+1 method:
''-':%;7?E+1/
Once we have the ' graphics element represented as data, we simply save it to the
 ' collection, via  '1:

 '12
=9
''9
 
3/
Retrieving and displaying a saved screenshot from the  ' Collection is just as easy. The
 handle takes care of the drawing for us. All we have to do to get that monkey to dance is give it the
data. So, inside 
 ', we create a new =1 object and we add a  to that
8(. We then call )=1 when the + event callback is triggered:
'8(-)=1/
8(-12
)=19%9%/
3/
Lastly, and most simply, if we want to )
 the screen, we simply call E1 with the
dimensions we want cleared (in this case, the ) and  of the canvas):
E1%9%9'1.).9'1../
There's a lot of Meteor magic going on, in coordination, so that we are using as little functional
programming as possible, but that coordination is covered in other recipes.
.M
Actually, there's a whole lot more! We could have added custom color swatches (use
41.6).9.C. to do that from the console, by the way),
or enabled drag and drop, and the storing of other pictures. You can use the $
".2

 recipe found in this chapter to do that, if you would like.
The core functionality, however, will remain the same: reference a ' object, grab the context,
and draw, baby draw!

For an informative and thorough tutorial on HTML canvas, please visit:
http://www.html5canvastutorials.com/.


â€¢ The #
 recipe in Chapter 2, &
7	
(
â€¢ The 


	
 and &

7 recipes in
Chapter 3, !
$

â€¢ The &

 recipe in Chapter 6, 



â€¢ The $
".2
 recipe in this chapter

 H, +$$%2
In this chapter, you will learn the following topics:
â€¢ Using npm packages directly
â€¢ Building graphs with D3.js
â€¢ Creating cutting-edge UIs with Polymer
+	
With so many third-party packages available via Atmosphere it's very easy to build, basically, anything!
If you have a specific development needâ€”some type of logic or libraryâ€”chances are someone else has
already packaged it up for you (and if they haven't, what a great opportunity for you!).
That being said, not all packages are created equal. Some will have fantastic documentation, with
samples and tutorials on how to implement a library inside Meteor. Others, not so much. In either case,
you will at some point need to roll up your sleeves and do a bit of work yourself. In this chapter, we will
go over a few of the more popular third-party libraries, and show you how to implement them in Meteor.

'$$
%
We have seen from the $ recipe in Chapter 2, &
7	
(, how to
wrap npm packages inside your own personal package, using the >

1 directive. That's all
well and good, but what if we want to just use npm directly, without creating a custom package?
Arunoda Susiripala â€” one of the most prolific (and brilliant) Meteor community developers, has written
a package that helps us do just that. In this recipe, you will learn how to use the 

package to implement a npm module directly in your code. Specifically, we will use the
"( module on the server to properly format JavaScript code, as you might see in
markdown or in an online code editor.
"$%
We will be using a default project installation, with the , ', and  folders, to keep
the code clean and readable. We will also use the 
' folder for some static content, so let's add
that while we're at it. In a terminal window, navigate to where you would like your project to reside, and
execute the following commands:
	
	
	Y
%7=
=	=9
We also want to make use of the 
 package, so let's do that now. Run the following
commands in the terminal:
%
	

Lastly, we will want to open a browser to 
&&$%%%, so we can watch the fun!
We're now ready to start creating our direct npm integrations.
1 ,,,
We will be adding the "( Node module and adding some sample code to leverage the
module, using an inline template as our work area. Proceed with the following steps to use npm
packages directly:
1. We will first add the "( Node module. To add a direct-use npm module, we will
make a simple declaration in the 
( file that was automatically added to our
project when we added 
. Open :
(;&
(
and add the following declaration:
2
6
66!>#6
3

If you look in the terminal window where Meteor is running, you will see something similar to
the following text:
				


:,


Our "( module is now ready to use!
2. We will now create the server logic needed to use "(. Create a file named
'( in the :
(;&'& directory. Open that file for editing and
add the following code:
412
12
51/
3
3/
'5-12
'+-4
E1.(./
'- !1../
-+1.('
.99/
'/
3/
3. Next, let's create a sample code file in the 
' folder. We are going to use a base text file
for the code we will highlight to make the syntax much easier (rather than try to do it in a
JavaScript ', which can be messy with escape sequences). Meteor lets us use the :
(
;&
'& folder to store static files only visible on the server. Create a file in the

' folder, called , and add some (valid) JavaScript to the file. We will reuse
the '5-U function from the preceding step, but you can put anything you want
inside there, provided it's valid JavaScript. Once you've added some code, save your changes.
4. We now need to create a simple code panel template. Create a file in :
(
;&& named . Open that file for editing, and add the following code:

2233
&

-AA

-A(A222333&

&

5. With the template in place, we can add !

, and use
41. Create a file in :
(;&& called 
#(
and add the following code:
!

12
12
61../

3
3/
4
112
41..9192
1/
61..9/
3/
3/
After saving these changes, your code from the ( file will be visible, albeit with little/
no CSS formatting. If you check your browser, you should see something similar to the
following screenshot:
6. Well, that's not all that impressive, is it? Let's really highlight what is happening with some
custom CSS. In a browser, navigate to the official list of "( themes, found at
https://github.com/isagalaev/highlight.js/tree/master/src/styles and pick any theme you like.
Simply click on the name of the theme, click on the button labeled  , and copy the
corresponding CSS code. Then, create a file named  in your :
(
;&& folder, paste the code you copied, and save the file. Your formatted text
should now have some noticeable formatting and coloring, similar to the following screenshot
(this is the 6H+ theme, copied from HL at the link
that we mentioned previously):

1  ,,,
Inside of our '( file, we created a simple 4 method, available on (and called by) the
client via 41. We created a separate function that is called inside of the method even
though we didn't have to (we could have just put the logic directly in the method call), because we
wanted to keep our code clean and illustrative. Inside the 51 function, we make direct use of a
npm module by using 4
E1:
'+- ,	OU1.(./
Quickly referencing our text file via  !1, we pipe our sample code into the
"( file in the 1 method, which takes the language (.('
.)
as an argument, to let the module know what language highlighting we would like to see in the resultant
formatted text:
'- F


+/1../
-+1.('
.99/
'/
We return the formatted text, which is subsequently updated in the client UI, through the
61.. variable. The template renders the raw HTML string, thanks to the use of
222
333 rather than double, and the CSS file we added takes care of the eye
candy for us.
In a nutshell, it really is that simple â€” by adding the 
 package, we can simply
declare which npm modules we would like to use in our 
( file, and then use them
directly in Meteor, via the 4
E1 function.

.,,,
As you may be aware, npm runs strictly asynchronously and is non-blocking. This means that a lot of
the times when you want to use an npm module in Meteor, and want to do so synchronously, you need to
wrap the call in an   wrapper. We will explore how to do this in more depth in Chapter 11,
#2
0 but the 
 package allows us to do this quickly/
easily as well, via the  )
1 and  61 methods.

To learn more about  )
 and other methods available in 
, please see
the introduction available at https://atmospherejs.com/meteorhacks/npm.
Lastly, even though it's undocumented (and therefore not officially supported/subject to change), there
are some npm modules used by the core Meteor server libraries that are exposed and usable on the
server side. To use any of these, simply use >
1 in your server code, and you don't need
to implement anything else. You can use them directly. The current list, as of 'B%J, is as follows:
â€¢ L

â€¢ 

â€¢ 
â€¢ &
â€¢ 
â€¢ 
â€¢ 
â€¢ 

â€¢ '
â€¢ #
#


â€¢ 
â€¢ 


â€¢ The $ recipe in Chapter 2, &
7	
(
â€¢ The 
	".
 recipe in Chapter 3, !
$


â€¢ The "
 and $
 recipes in Chapter 11,
#2


6	
$$ <,C
Using third-party libraries to render content inside Meteor is simple and easy to do, and there are a lot of
great libraries out there. One of our personal favorites is the 7$( library (http://d3js.org/). It's well-
documented, well-supported, and is a representative example of how to implement other (mostly) self-
contained graphics rendering libraries. In this recipe we will create a demo graph application, complete
with animations, using 7$(
"$%
We will be using a default project installation, with the , ', and  folders, and we
will of course need the official 7$( package. In a terminal window, navigate to where you would like
your project to reside, and execute the following commands:
M
	
M
	
M
	Y
%7=
=9
M
M

With that out of the way, let's build us some sample graphs in D3!
1 M
Normally, the 7$( data sources are updated manually, or as the result of a feed, with an 

statement of some kind being called. Because Meteor enables reactive computations (see the &


 recipe in Chapter 6, 


), we are going to put the
7$( rendering logic right into a !1 computation instead. Let's set up our
reactive data source, throw that rendering logic into an , and add some animations for good
measure!
1. We first need to create and initialize the + collection. Create a file named (
in your :
(;&& folder, and add the following code:
+-)451../
Let's add an initialization of that collection as well. In your :
(;&'&
folder, create a file named '( and add the following 4
 function
code:
4
112
1S+112
+12. .9%NBPK3/
+12.<.9%BMIJ3/
+12.5.9%JKNJ3/

+12.7.9%MJO$3/
+12.F.9BJK%J3/
+12.G.9%JJNN3/
+12.0.9%J%BO3/
+12.".9%P%IM3/
+12.=.9%PIPP3/
+12.D.9%%BO$3/
+12.Q.9%%KKJ3/
+12.+.9%M%JO3/
+12.4.9%JM%P3/
+12.>.9%PKMI3/
+12.8.9%KO%K3/
+12..9%BIJI3/
+12.].9%%%IO3/
+12.E.9%OINK3/
+12.6.9%P$JK3/
+12.!.9%I%OP3/
+12.?.9%JKON3/
+12.,.9%%IKN3/
+12.@.9%J$P%3/
+12.\.9%%BO%3/
+12.T.9%BIKM3/
+12.a.9%%%KM3/
3
3/
2. While we have '( open, let's add a quick helper method to update the frequency,
which we will use a bit later. Add the following code to '(:
412

G192
+
1239
2233/
3
3/
3. Now, we will add some simple scaffolding and styling. Our HTML is extremely simple, because
7$( is doing the heavy lifting. That said, we do want to put our ' element into a Meteor
Template. Navigate to your :
(;&& folder, create a file named
, and add the following code:

2233
&

-AA
'-AA&'
&


Let's add some simple styling to adjust fonts and colors, and so on. Create a file named
:
(;&& and add the following CSS declarations:
2
/
3
'2
)/
3
2
B%
#/
3

9
2
/
C%%%/

#
F/
3

2

/
3
We are now ready to add the 7$( rendering logic, inside /. The
following code is taken almost line-for-line from Mike Bostock's awesome introductory tutorial
on 7$(. The easiest thing to do would be to take the existing code base from that tutorial,
copy and paste it into a local file, and then modify it. To do this, navigate in a browser to
http://bl.ocks.org/mbostock/3885304 and copy everything inside the 
 tag to the
ending &
 tag. Create a file named ( in your :
(
;&& folder, and paste the code into the new file (about 60 lines of code).
We will now modify the code from that page in the following four ways:
â—¦Wrap all of the code inside a !
 callback
â—¦Wrap and extend the $  rendering code inside an 
computation
â—¦Move and modify the axes rendering code outside the 
â—¦Change data to point to our +1 Mongo query
The completed !
 callback is listed in the following code. It
mainly consists of the 7$( sample code, with the preceding four modifications highlighted.
If it's easier, you can simply copy and paste from below, rather than making the modifications
yourself. However, it's worthwhile to at least go over the changes, to see how the code was
modified. In your ( file, make the following modifications to the existing code:
+	')7
	+	')%=

(IE
'-2
J%9J%9$%9M%39

)-IP%##9
-O%%#
#/
.

/
'

	
()
/ -$1
'(FI8BV<N*DAZ-,3G;[O2+K4.\X](
	'(())
E<1:%9);9B/
F-2GYY((
=

/


 -$1
'R#=#"?S)
1:9%;/
' -$'1
1
1AA/
' -$'1
1
1AA
1B%9AZA/
./
'24N)
Y
Y')
''-$1AA

1A'A
1A)A9)RR
1AA9R
R


1AA
1AA9A1ARRA9AR

RAA/
'

1AA
1AA9AA
1AA9A1%9ARRAA
1 /
'

1AA
1AA9AA
1 


1AA
1AA9A1#I%A
1AA9P
1AA9AKBA
1A#A9AA
1AGA/

&&@'7$(!1

'')7
&&=9
&&)+
-
')')1
'0)1
&&!7$(.#
9
&&)$ 1(



 1AA
'=')7C19)1
&&8)1)H9)


1


1AA
1AA9AA
1AA9121/3
1A)A9<1
'66=#)
'66=)

')
1AA9121/3
1AA912#
1/3/
&&89)()



')
' ##)

'6
6)
'66=')7'U)19)
'66=')7
'U)19)1
3/
3/
4. We can now create and call the H function. Our page should be rendering correctly
now (check at 
&&$%%% and see for yourself), but it's not moving or doing
anything else. Let's change that by changing to random frequency values for our letters.
Towards the bottom of (, just after the  block, and just before the ending
bracket for the rendered  block, add the following timer call:

3/&&###1
(

0(
E?


,
D'E= ##)1
3/&&##1
Finally, add the H1 function at the very bottom of the file, after everything else:
&&8H
H-12
&&
)%#JO
'+-YY141*JP9
&&)%#BOZ
G-141*%BO/
&&
+-1:+;/
&&
'9
&&.)L
41.
G.9+9G/
3/
Save all of your changes, and your bar chart should be hopping along happily, similar to the
following screenshot:

1  M
There are two key rules to remember when integrating 7$( (and, by extension, any other rendering
engine):
1. Put all your DOM/SVG manipulation logic inside !
1
2. Make the data source reactive, and wrap the rendering logic inside !1
We followed rule #1 when we added the entire 7$( logic from the tutorial inside of
!
1. This tells Blaze to keep its (awesome, yet grubby) hands off
everything we'll be doing. We're essentially telling Blaze to go have a smoke break, while we implement
some good ol' fashioned DOM/SVG manipulation (and animations!).
Then, instead of relying on a non-reactive data source, where we would have to periodically check for
updates and/or call an 
1 function whenever results change, we used Meteor's declarative,
reactive programming style by wrapping the 7$( logic inside an  function. That 
function will re-run every time there's a change to the + collection, thanks to '-
+11; which is a reactive data source.
In other words, we followed rule #2 by creating a 7$(-friendly reactive computation, instead of
using a functional (non-reactive) data model, like a hobo. Mike Bostock would be proud of us, as the
avoidance of functional programming is one of the core tenets of 7$(.
It seems like we wrote a lot of code because of the 7$( sample code, and there are some details we're
leaving out, such as moving the  and  axes rendering logic outside the  function (because
we don't want to re-render it every time), but it really is that simple. Notice how incredibly simple (and
loosely-coupled) our update statement is, inside the H1 function: one. single. line.
When it comes to third-party renderers, wrap using 1 and be reactive using 1.

Wrap using 1, be reactive using 1.
.M
We strongly encourage you to look deeper into 7$(, which (as mentioned) runs on the same
declarative programming principle as Meteor. There's a reason it integrates so cleanly, and for SVG
graphs and animations, it really is top notch.

Tutorials for 7$( can be found at https://github.com/mbostock/d3/wiki/Tutorials.


â€¢ The &

 recipe in Chapter 3, !
$


â€¢ The &
	
9!#<1 recipe in Chapter 7, $&



$	$$'+ #
%
Polymer (https://www.polymer-project.org/) is ambitious. It is ambitious in the very best possible way,
in that, if it succeeds, it will make our development lives so much better.
One of the largest time-wasting activities we as web developers go through is tweaking CSS,
repositioning DOM elements, and trying to manually code animations. It's not that those things are bad
(some of us quite enjoy well-designed components); It's that nearly every time, our efforts are thrown
away when a new project or design theme is introduced.
Through the use of reusable, reliable components that work the same on every modern browser (or at
least that's the goal â€” ambitious, right?), Polymer intends to abstract the design from the development,
allowing developers to focus on development, and designers to focus on design.
This recipe will show you how to use Polymer components inside a Meteor application.
"$%
We are going to break down the actual recipe into two parts: configuring Meteor and Polymer and
adding Polymer elements to our app. Because of this, we are going to handle the configuration and setup
in the !

 step to keep the code and explanation of the code easier to understand.
$%	

We will need several folders and subfolders we don't normally use, so let's get our entire file structure
out of the way. Open a terminal window, navigate to where you would like to create your root project,
and execute the following commands:
	
	
	
	
	
	Y
%		

%7=
9
%			
$%	

To save time creating files one by one later on, let's create them all right now. In the same terminal
window, in your :
(; folder, execute the following commands:

	






	
	

	
	

	
	


	
	

	





$	$6 

$#
%
6  is the safest and best way to install the Polymer libraries, as it makes sure we have the latest and
greatest. You will want to make sure that you have Bower installed. If you don't, in your terminal
window run the following command:
	


You may need to run npm as  because you're installing globally. If so, run the following command:

	

With Bower installed, we want to tell Bower where we would like the Polymer components installed. In
Meteor, that is in the 
/
 folder. In a text editor, open the :
(
;&) file, add the following line and save your changes:
2AAA
&
&A3
We are now ready to initialize our project using Bower. In a terminal window, in your :
(
;& directory, enter the following command:

Bower is about to ask you a lot of questions! The good news is the answer to most of them is the 

key, or a  and then the 
 key. Even better news is that most of the answers don't really matter.
But, you do need to go through this, so that Bower will generate the )( file for you, which
will keep track of which Polymer libraries we install (more on that in a minute), so answer the questions
similar to the following example:
^;2	
^
##"
^
	
^
^	



	%/	
^
^%

^

^

^	
^

	

	
^3
^

^X

^%%
	%
		

	

^X
You will then get a preview of your )( file, as shown in the following screenshot:
Provided that 
', and :U; are in place, type > and hit /
. Your Bower
configuration is now complete!
We are now ready to install the Polymer libraries. In the same terminal window, enter the following
commands, one after another, allowing one to complete before moving on to the next:

	


	



			



	

On the last install, Bower will ask you what version of 
 and #
 will be
supporting 
##. Select the version that the other components are dependent
upon (as of this writing, this is :;C^%O%).
$
$
There are three third-party packages we need to add. One of them, ('
), will
assist with our layout, and the other two, ((# and
'H), will allow Polymer elements to be added to our Meteor project with
the least amount of pain (we suspect that this will get better in the future, but for now this is the
workaround; and honestly it's not really so bad). In a terminal window, in your :
(;&
folder, enter the following commands:

	

%

E
$	$
Setup is almost done! Meteor generally gets along with other frameworks, but because Polymer has
some pre-rendering DOM manipulations (which are really cool, but mess with Meteor's mojoâ€¦) we
have to be able to inject an attribute into the  tag, and we also need to ensure that the base

 and )
 files are referenced properly.
In an editor, open the :
(;&'&'( file, and add the following HTML
injection code:
4
112
=()4"1.?'.912
-
1..9.'./
3
3/
Now we will take care of the baseline file references. Open :
(;&&

&& and add the following code:


-A&
&)
(&
)
(A&

&
&
One last step (this is for 'H to be able to consolidate all the component references), open
:
(;&&
 and add the following lines:
S##5
##
-A
A-A&
&
&
A
S##6##
-A
A-A&
&#&A
Setup is complete! Let's start Meteor (run the  command in the terminal), open a browser to

&&$%%%, and start using Polymer components!
1 M
Two caveats to what we're about to do: first, currently Polymer plays best with the Chrome browser. The
samples below will work in other browsers, but there are some idiosyncrasies, such as  or

 events, that may cause a little bit of frustration. Second, due to timing issues, as you're

making changes to your code, there may be some instances where you will need to manually refresh
your browser (which is a very rare thing when using Meteor!).
Keep in mind that Polymer is nowhere near being a B% product â€” you are on the cutting edge with
this recipe â€” so you'll have to bear with us, as we go through the fundamentals of using Polymer inside
Meteor. Optimizing the timing and events and other behaviors across all other browsers would be a book
in itself, so let's focus on the foundational part, and as Meteor and Polymer progress, these issues will
work themselves out.
1. We will first add our CSS styling. Polymer does the heavy lifting here, so let's get what little
CSS we have to contribute out of the way. Open :
(;&&
 and add the following CSS declarations:
92
B%%Z/
%/
#.E7.9#/
3
2
)N%Z/
O%
/
3
'!2

#/
)J%/
3
'<2

#/
)O/
'##
/
3


#2
)/
3


#:;2
1PP9B$$9JMM/
)/
3
2. Let's take a look at the 
## component, using a static representation,
just to see what we're playing around with. Open :
(;&&

, and add the following line just below the AU
A entry in the
5
 section:
-A
A
-A&
&
##&&

##A

Now open , found in the same folder, and add the following code:

'-AA

##-AA&
##
&'
&
In your browser, after 'H recompiles your , you should see something
similar to the following screenshot:
3. Now that we have confirmed that Polymer is working correctly, let's put the 
#
# component into a Meteor template, and create the ability to add multiple cards,
based on a Mongo collection. Open :
(;&&( and add the
following line:
 -)451../

4. Now let's create our template. You'll remember that we're using '
 to
control the layout, so we will need to wrap our template declarations inside the
22CU33 blocks, as appropriate. Open :
(;&&

&
# and add the following code:

-AA
22C5@-JPO-O
7-A%JA-A45A33
22C33
22533
22&33
22&533
&


-A5A
22CFA5A33
'

##-A2233A
&
##
&'
22&F33
&

Again, the majority of the previous code relates to layout. The actual call to dynamically
populate 
## components is found in the 5 template, and
references 2233 in the  attribute.  comes free, as it will be a property
for each record in the   collection.
5. Let's now create the !

 function for passing the   collection, via
the 51 function. Open :
(;&&
&

#( and add the following code:
!

12
12
 11/
3
3/
6. While we're at it, lets make deleting records very simple. In 
#(, add the
following event handler at the bottom:
!
'12
.
##.12
 '12LL3/
3
3/
7. We now need to modify our main template to reference our new dynamic template. Open
 and modify the contents to look like the following:


5

66:
77:
99
5:
&
8. Save all your changes, look in your browser (give 'H a second to do its thing), and
you should see a completely blank page. Wow! That's only because our   collection is
empty. Let's fix that. In your browser console, execute the following commands:
:F

'7
((9)
:F

'7
(

(9)
As you enter each command, a new card will pop into place, with the Meteor logo, and David
Glasser's smiling happy childhood picture, as shown in the following screenshot:
The command line is so 1960's! Let's update our page to use some paper-elements components,
and give us an easy way to add more GitHub authors.
9. Open :
(;&
 and add links for the components we will be
using (which are found in our 
&
& folder, by the wayâ€¦) just below the
AU
A declaration. When finished, your file should look like the following:

S##5
##
-A
A-A&
&
&
A
5%6	66	
				
				6:
5%6	66	
		

		
6:
5%6	66	
			
			6:
5%6	66	
		
		6:
-A
A-A&
&
##&&

##A
S##6##
-A
A-A&
&#&A
Let's create our  template, which will contain a 

#
 component, and a


# component. Open :
(;&&
&
#
 and add the following code:

-AA
'-A!A


#
#-A!A
+
-AA

-A#
A-A=
A
&

#
#
&'
'-A<A


#-AA-AA
-A%A

&

#
&'
&

There's nothing special about the preceding code, Meteor-wise. It's all just straight up Polymer
formatting and configuration.

To learn more about Polymer components, please visit:
https://www.polymer-project.org/docs/polymer/polymer.html.
10. We will want to add a new card whenever we perform a search, that is, whenever we hit /

inside our 

#
 component, or click on our 

# component. Open


#(, found in the same &
& folder, and add the following
code:
!
'12
.
C=
.12
15S-B$/
 1/
39
.

#.12
 1/
3
3/
 12
'=
-1.C=
.9
,-=
'1/
=
1/
1S,VV1 812,3/
=
'1../
 12,3/
3
11. The very last step is to add a template inclusion for our  template to .
Open :
(;&& and add the following highlighted code:

5

66:
77:
99
5:
'-AA
2233
&'
&
All done! Check out your app in the browser, allowing for refresh/recompiling, and you should
be able to add as many GitHub author cards as you would like. Add some authors (suggestions:
 ,  , $ ,  , '
 , 
H , 
 ,
 ) and new cards will appear after each entry, as shown in the following
screenshot:

1  M
Very rarely do we need to refer to the !

 section to fully understand what's going on, but the
context around where and how to place Polymer files is important, so let's start there. We directed
Bower to put any and all Polymer files into a subfolder belonging to :
(;&
&.
Meteor treats files in the 
 folder differently than other foldersâ€”it treats them as static, and will
not process the ( or  files found inside.
This is to our advantage, because there are currently some pretty nasty conflicts between the Polymer
and Meteor renderers. Specifically, both use the 22#33 notation and the

 tag, and interpret them differently. To resolve these conflicts (Nobel peace prize
incoming!...) we "fence off" each framework, allowing Polymer to link to anything in the 

folder, and having Meteor ignore everything in the same place. It's almost like the 

"	 (") planned it that way! Of course they did, anticipating and encouraging the use of other
opinionated frameworks. MDG truly does want Meteor to play well with others, and in this case, it
allows us to use Polymer in our applications.
A couple of other adjustments had to be made, such as inserting link elements into our  block,
and injecting the unresolved attribute into the  element, but these are small, one-time issues,
and once they're complete, we are free to use Polymer components to our heart's content.

As for the use of the Polymer components themselves, we can either use them directly (as shown in step
#2) with no involvement from Meteor, or we can incorporate them into our 22CU33 template or
other template inclusions. We then have access to the normal Meteor !

 and
!
', which gives us easy, declarative-style access to reactive data.
Specifically, if we look at the 
# file, we will see that we are using the 22C
33 and 2233 template helpers, to iterate and render 
##
components on the fly:

-AA

77W
99
22533
7799

&


-A5A


##-A77
99A
&
##

&

In 
#( and 
#(, we make use of !
' to interpret

, , and , and are able to use the in-context (inline) data to modify
records, such as when we delete a record, using the  '12LL3
statement:
!
'12
.
##.12
 '12L
C3/
3
3/
.M
There are a very large number of interaction and compatibility/performance nuances between Polymer
and Meteor, which are beyond the scope of this recipe (and this book). We recommend perusing Stack
Overflow (http://stackoverflow.com/questions/tagged/meteor), the Meteor forums
(https://forums.meteor.com/), or just lifting the hood and experimenting, to gain more experience in
properly integrating Polymer and Meteor.


â€¢ The #
 recipe in Chapter 2, &
7	
(
â€¢ The &


 recipe in Chapter 3, !
$


â€¢ The 

 recipe in Chapter 4, &


 I, 	$G	

In this chapter, you will learn the following topics:
â€¢ Basic safety â€“ turning off 

â€¢ Basic safety â€“ removing 
â€¢ Securing data transactions with ) and 
â€¢ Hiding data with faÃ§ades
â€¢ Protecting the client with )#

+	
Meteor makes development and prototyping as fast and easy as possible. To accomplish this, there are
some default packages installed that have no business in a production application. As you prepare your
app for production, you will want to remove the packages that make prototyping easier, and replace
them with some security best practices, to make your application more secure. In this chapter, we will go
through the baseline security mechanisms needed to prepare an application for production.

6%>	$		

Quickly and easily accessing your data saves you an enormous amount of time when you're prototyping!
The 
 package, which is installed by default in every newly-created Meteor app, enables
you to quickly manage and access your data collections, so that you can churn out great code. When the
time comes, however, broadcasting every field in every data collection is inefficient and unsecure. This
recipe will show you the basics of removing the 
 package, and implementing your own

/ code to keep your app working as intended.
"$%
We will create a very basic application, displaying simple text cards on the screen, and then show the
effects of 
 and /
 on those cards. To do this, we need to create our
folder structure, add some basic templates, and add a bit of styling.
#C	
In a terminal window, create your root project by entering the following commands:

	


	


	
Y
%7=
=9

$

In a text editor, create a file named ( in your :
(;&& folder,
and add the following line:
5L
-)451.
./
Next, create a file named :
(;&& and add the following

 and  declarations:

'-AA
22
33
&'
&

-A
A
$-A)#
A
&$
22C
33
'-A2233A
'-AA&'

'-AA22L33&'
'-AA&'
'-AA2233&'
'-A)A)&'
'-A)A22)33&'
&'
22&33
&

We need to add just a little bit of logic for display and creation, and we're ready to move on to styles.
Create a new file named :
(;&&

(, and add the
following !

 and !
' functions:
!


12

12
5L
123922B331/
39
12
1[../
3
3/
!

'12
.C)#
.12

'71/
'-.
C.R5L
1231/
5L
123/
39
..12

'71/
'-1S/
5L

12LL392233/
39
..12

'71/
5L
'12LL3/
3
3/
$%
$
We need just a touch of CSS to make things more visually appealing. Create a file named :
(
;&& and add the following CSS:
2
#.'./
3

2

#/
#)B%/
B%/
J
C/
#%JB/
%JO%JO/

%O/
'#
/
3
2
)I%Z/
/
3
2
#1JO9BJB9$P9%$P/
3
2
#)/
%J%/

%B/

#%$/
3
'2
#1K9BN%9JB9%KP/
#%J/
3
Your app should now be up and running. Navigate to 
&&$%%% in a browser, and
double click on the  label to create some new cards. Click on the & tag in a card to modify the
sharing property (the card will turn green) and double click on the  tag to delete a card. Your screen,
after playing with it a bit, will look simlar to the following screenshot:

If everything is copacetic, we're ready to remove the 
 package.
1 ,,,
Proceed with the following steps to turn off 
:
1. In a new terminal window (keep Meteor running!), navigate to your :
(; and
enter the following command:
	

The screen on your web page will now show no results, and if you do a count on the
5L
 collection, even if you have many records created, the count will come back as
K:

2. We will now add 
 and . The 5L
 collection still exists.
Because we removed the 
 package, however, the communication between the
client and the server has been severed. To restore it, we need to add a 
 method on the
server, and a  method on the client. Create a file named :
(
;&'&#'( and add the following 
 function
call:
4
1.
.912
5L
123/
3/
3. Now, create a file named :
(;&&#( and
add the following 1 function call:
41.
./
All done! You have successfully removed the 
 package, and re-created the

/ calls necessary to allow the client to still see the 5L
 collection.

Your browser should now display results properly when you create, modify, and delete using the clicks
and double clicks mentioned previously.
1  ,,,
In a nutshell, 
 checks to see what collections exist, and automatically writes your

 and  function calls for you. It does this for every collection it can find, and is
therefore neither performant nor secure.
By removing 
, we stopped the 
 and  functions from
automatically being called. Because of this, we had to re-create those calls, creating a simple

1 call (on channel .
.) on the server, and a 1 call (on the same .
.
channel) on the client.
Our 1 statement in the 
 function retrieves everything, which is inherently not secure or
performant, but we will be fixing that in other recipes. The focus of this recipe was on how to remove
the 
 package, without affecting the functionality of our application.


â€¢ The 
 recipe in Chapter 2, &
7	
(

6%>$	
Right after removing 
, we will want to control how data is added, removed, and
updated, and put in some security measures, as appropriate. To enable this level of control, we need to
remove the appropriately-named  package. To restore functionality after removing the
 package, we will need to utilize a basic ) declaration. This recipe
shows you how to do exactly that.
"$%
We will use the 
=

 recipe found in this chapter as our baseline. Once
you have completed that recipe, make a copy of the #
 folder (note: you will
need all subfolders, including the hidden  folder), rename it to ##,
start your app using the  command in the terminal, and you will be ready to proceed.
1 ,,,
Just like the previous recipe for 
, we simply need to remove the  package,
and then restore functionality.
1. In a new terminal window (keep Meteor running!), navigate to the root of your project and enter
the following command:


Your application now disallows any client changes to the 5L
 collection. Try to add a
new card, share a card, or delete a card, and you will be unable to do so. Whether through the UI
using clicks and double clicks, or even programmatically through the web console, you will be
unable to make any changes, as shown in the following screenshot:

2. Okay, now we need to get our super powers back! Open the :
(;&'&
#'( file, and add the following code to the bottom of the file:
5L
)12
1=92
/
39

1=99>92
/
39
'1=92

/
3
3/
After saving these changes, our , 
, and ' capabilities have been
restored. You can now add, modify, and delete as many cards as you would like, either through
the UI or programmatically through the web console.
1  ,,,
The  package does almost exactly the same thing for data collection security that

 does for publish security â€“ it finds every collection it can and automatically creates a
) function for all functions (, 
, and '). By removing the
 package, we prevented our 5L
 collection from allowing any client-side changes.
To remedy this, and to prepare for more granular security (see later recipes in this chapter for details),
we called 5L
)1 and enabled all collection modifications by returning  for
every checking function.
So, although the net security of our application hasn't changed, we are now prepared to modify our
publishing and security settings to make our application production-ready.


â€¢ The 
 recipe in Chapter 2, &
7	
(

	$ 

 %
Properly configured, Meteor collections are quite secure. The granular control we have over what is
allowed and what is not allowed enables us to secure our applications appropriately. In this recipe, you
will learn how to use ) and  to secure your collections and control access.
"$%
Using the 
= recipe found in this chapter, we already have an application
with both the 
 and  packages removed. Once we add and configure the
appropriate user  packages, we will be ready to proceed.
Using a copy of the 
= recipe as a baseline, open a terminal window,
navigate to your project root, and execute the following commands:



	


If your app isn't already running, make sure to start it using the  command.
We now need to add the < template, and modify our  statement, to add an
) property to each record.
Open your :
(;&& file and add the < template
inclusion just below the  tag, as shown in the following example:

77:I
99
'-AA

Next, open your :
(;&&

( file and modify the
!

' insert logic to add ), and only fire if there is a logged-in user. Your
code changes should look as follows:
!

'12
.C)#
.12

'71/
'0,
D'))1
'-.
C.R5L
1231/
5L
12 =,
D')9)/
39
Finally, in your browser, create a new user, and make sure you are logged in as that user (the name of the
user doesn't matter â€“ we suggest using a fake one such as B	).

Now, whenever you create new cards, the   section will be filled in with the logged-in user's
unique ID, as shown in the following screenshot:
1 ,,,
The current state of the application is not secure. Anybody can , ' and 
 any of
the cards, even if they belong to another user! We are going to fix this situation by using the
)1 and 1 declarations.
1. First, we will require a logged-in user for . Open your :
(;&'&
#'( file, locate the 5L
)1 function call, and
make the following modification to the  function declaration:
5L
)12
1=92
'
D0)1
39
You will now no longer be able to create new cards while being logged out (you can test this if
you would like).
2. Next, we will allow only the owner of a record to 
 or ' cards. In the same
#'( file, modify the 
 and ' function declarations as
follows:

1=99>92
'
D)1
39
'1=92

'
D)1
3
3. Save your changes, and test your new rules by logging in as a new user (create one if needed),
trying to change results, trying to add new cards without being logged in, and so on. With these
rules in place, only a logged-in user will be able to create new cards, and only the owner of a
card can modify the card or delete it.
1  ,,,
All client-side attempts to alter collections in any way flow through two callbacks: ) and . In
order for a collection change to be accepted by the server, the incoming change must receive one 
response from one of the ) functions (for example, we return  on the  function if the
=S-), and must receive zero  responses from any of the  functions.
In this particular case, we are doing a simple check on , under the ) callback, to make
sure the user is logged in, which translates to =S-. For 
 and ', the check is
to see if the logged-in user is the owner/creator of the card, through 
()--=).
There is no limit to the number of ) or  callbacks you can declare, although it's usually best
to consolidate them when possible, using a "pessimistic" security model (only allow what is needed,
rather than allowing everything and only denying what is needed).
.M
The preceding ) rules work just fine, if only the UI is being used. However, it's possible for
someone to open the console window and make direct collection manipulation calls, which could cause
some problems.
First, our check for  is only =S-. Any additional fields, or even a malicious
, can be added via the command line, for example, let's say that I am in possession of the
= for another user (not hard to get, it's found in the ) field of each card). I could easily
 a card with something nasty in the text, or 
 the text and owner of an existing cart, so
as to make it appear that another user was the one that created the note.
For example, If I am logged in as J	, and I know that the = value for
B	 is .N'J00INETIJ., I can run the following command in the browser
console, and potentially get B in trouble:
:8
C	
'7/(32<.0WWQ000(=(! NN&!OX
& (9)
We can handle this in several ways. We can either make our ) callback functions more complex,
with multiple U statements, or we can use the  callback to prohibit certain behavior. In
:
(;&'&#'(, create a new  callback with the
following code:

5L
12
1=92
1)S-=/
39

1=99>92
1>S-BVV
S1Y>81../
3
3/
For , if )S-=, the  callback will return . For 
, if an
attempt is made to modify any field except shared, the  callback will return  as well. Using
these two callback functions, we have further tightened security, and taken away any console line
shenanigans.


For a breakdown of what's possible with ) and , consult the official Meteor documentation
available at http://docs.meteor.com/#/full/allow.

1$ R
Some of our security (and performance) problems can be resolved through limiting access to certain
fields and records in our data collections, for example, if the ) field of a record isn't sent to the
client, a potential hacker will never be able to get the = value of another user. Likewise, if only
records belonging to a certain =, or ones marked for sharing, are passed to the client, private
records can stay private and visible only to the user that created them. This recipe will show you how to
create a faÃ§ade to limit fields and records being sent to the client.
"$%
Please complete the 


	
	 recipe found in this chapter,
including the additional  callback functions found in the .-D section. Once completed,
and your Meteor app is running, you are ready to use this recipe.
1 ,,,
We are going to modify the 
 function on the server so that it only returns records that are
owned by or shared with the logged-in user, and we will stop broadcasting the ) field.
1. Open the :
(;&'&#'( file, locate the
5L

 section, and make the following changes to the
5L
1 method:
4
1.
.912
5L
'7
R7
9=
7

D9
S
9=
7
7#99)1
3/
2. Now that the ) field is no longer visible on the client, we can remove the following two
lines from our open template in the :
(;&& file:
'-A)A)&'
'-A)A22)33&'
3. With those changes saved, any given logged-in user will only be able to see cards that have been
created by that same user, or cards that have been shared. If you log in to two different
browsers, with two different users, you will be able to see how sharing makes records visible to
the other user, and vice versa. The following screenshot shows an example of two users sharing
some records, and not sharing others:

1  ,,,
By modifying the selector and the  option, we were able to limit the recordset being published
to the client. The client, try as it might, will never be able to see any of the records excluded by the
selector, nor any of the excluded , because the server simply isn't sending them when it is
publishing.
Specifically, we used a 2:U;3 selector to limit which records are published, by including only
records created by the current user ()=), or records that have been shared
(). We used the 22)%33 option, to return all  except ).
This 
 approach is less secure than a 	

 approach, but to keep this recipe simpler, we
decided to tell the query what fields to exclude (optimistic) rather than what fields to include
(pessimistic).
To whitelist, rather than blacklist, enumerate the fields you would like displayed, and pass a value of B
with them (for example: 2B9LB9B3). All fields not specified will
automatically not return with the query.


â€¢ The 2
	
'6 recipe in Chapter 4, &


#$
  
%
Securing your database is pretty straightforward in Meteor, but what about client-side security? Meteor
has you covered there as well, using standard 5#6# and \#G#
8
 safeguards. This recipe will walk you through adding the )#
 package, and
configuring basic client-side security.
"$%
We will create a brand new project as usual, but we will be keeping the default files, creating some
 scripting functionality along the way.

$	
In a terminal window, navigate to where your project root will be, and execute the following commands:




%7=
=9

Y

0
Visit the official Bootstrap 06 page, located at http://getbootstrap.com/getting-
started/ and scroll to the section marked as 60. Copy the contents from that section, and
insert them into the  block of your :
(;&&#
file. When finished, your changes should look similar to the following code:

#&
50-
	822:
5%6

66	
/
	

	MM 


	

6:
50G	:
5%6

66	
/
	

	MM 


	

6:
50-
	A2	:
5
	
6	
/
	
	MM 


	
6:5
	:
&



AB
While we have # open, let's modify the template, adding some indicators, an
inline script in an  attribute, and a new section for displaying '1 results. Modify your
 template so that it looks like the following code:

-AA
54&

T.'

5

66:77995:
&

5	:.
" 778995	:
56
	'(/#E0()1,'(	+()16:
5

66:I
	05:
5:
&

We have a bit of logic to add, so that the template will be displayed properly. First, we will create a
simple collection called !. Create a file named :
(;&&( and add
the following line:
!-)451../
Now, configure the server method 
! to simulate someone erasing the database. Create a file
named :
(;&'&( and add the following code:
412

!12
!'123/
3
3/
Next, we need to modify the  template helpers and events to be "vulnerable" to our clever hacks!
Open :
(;&&#(, modify the
!

 section to the following:
!

12
12
7
/+
')')1
2


'((='6/Y 6))1
9')7

'(VOOGO(=)1
9
/1
9=
8')7

2

'(()1
9
3/
Finally, modify !
' to add a record to the ! collection, rather than
updating the  variable. Your code should look similar to the following:
!
'12
..12
&&)
+

'7(%(9)1
3
3/
Once all of these changes are saved, our application is thoroughly "hacked" with an '1 being used
to double the normal click counter, an inline script that will remove all records from our !
collection, and with scripts and styles being used from an alternate site (the Bootstrap CDN).
Navigate to 
&&$%%%& and play around with the buttons for a bit. After a few
clicks, your screen will look similar to the following screenshot:

To activate the inline "hack", click the button labelled 6J â€“ a notice will come up that you've
been hacked, and after you click on (E3 the ! collection will be cleaned out. The notice will look
something like the following screenshot:
You're now ready to shut down all these expert hacking techniques!
1 ,,,
To secure our application, we will add the )#
 package, and then configure it
appropriately for our environment.
1. In a new terminal window, navigate to the root folder of your project (keep your app running!)
and execute the following command:

	
Your application will now have lost all Bootstrap formatting, and the '1 function which
was doubling your counter and the eval() function, which was doubling your counter, will no
longer work. When you click the 
 button, your counter will increment but the double
counter will not. Your screen should look similar to the following screenshot, with a lot of errors
in the web console explaining that the unsafe "hacks" from before are no longer allowed:

2. We will now fine-tune our security settings with <). The inline
scripting vulnerability still exists (click on 6J if you would like to test it), and our
formatting, which we don't consider a hack, is no longer working. So, we are currently not strict
enough in one area (inline scripts) and too strict in another (refusing all content from the
Bootstrap CDN, a trusted source). Let's rectify that. Create a new file named 
( in
the :
(;&'& folder. Add the following two lines, and save your
changes:
<))681
.
&&
&./
<))6
81
.
&&
&./
3. Our Bootstrap formatting has been restored! Now, let's disallow inline scripts, as well as prevent
connections to any servers. Add the following two lines to the 
( file and save your
changes:
<))=6
1/
<))51/
The inline script that was erasing our ! collection will now no longer run. However, by
disallowing all connections, we have inadvertently destroyed the 77 connection to our server.
We need to rectify that by whitelisting our &&$%%% address for HTTP and for
websockets (for 77).
4. Add the following three lines to the end of the 
( file and save your changes:

'?-LLLLLLE88!L?E+/
<))581?/
<))581?
1.
.9
.)./

As we are dealing with your browser's security policy, a manual refresh is required each time
you make a change to 
(.
Refresh your browser one final time, and now everything that should be allowed is working, and
everything that shouldn't (inline scripts, '1, etc.) is prohibited. Your screen, after a few
clicks, should look like the following screenshot:
1  ,,,
By default, installing the )#
 package will disable the '1 scripts, and only allow
resources (images, etc) from your site. This is why just adding )#
 disabled the double
counter '1 script, and stripped away all the Bootstrap files.

To allow Bootstrap resources, we whitelisted the styles and scripts of the Bootstrap CDN, using the two
<) functions â€“ )681 and
)6
81.
Next, we shut off inline scripts with the )=6
1 function. We also prevented
any and all AJAX / remote server calls, using the )51 function.
Being this strict also broke our server's DDP connection, which we restored using the
)581 function, for both HTTP and ).


There are many other options available to us (this is just a primer), so if you would like to really fine-
tune your security settings, we recommend the most excellent article from Arunoda Susiripala, located at
https://meteorhacks.com/xss-and-meteor.html, and the )#
 documentation, found on
Atmosphere: https://atmospherejs.com/meteor/browser-policy.

 -K, $ 	
In this chapter, you will learn the following topics:
â€¢ Implementing OAuth accounts packages
â€¢ Customizing the accounts login
â€¢ Performing two-factor authentication
+	
Critical to nearly every application we build is some type of authentication and user identification.
Usually, we will spend days and weeks developing an accounts system, when we could spend that time
programming our app. Meteor solves this problem, and solves it well. From integrations with major
OAuth providers (Twitter, Google, Facebook, etc.) to a simple, secure password-based system, adding
accounts and authentication inside of your Meteor app is quick and painless. The recipes in this chapter
will cover the most important aspects of Meteor's  packages, enabling you to easily take care
of user accounts and move on to other things.

+
$(		$
Today, there are so many popular authentication services available, with such large user bases, that it's
kind of silly not to take advantage of those services. If you use the accounts system of a major service,
like Twitter or GitHub, you instantly tap into an enormous user base which can increase the use of your
app. This recipe will show you how to implement an OAuth accounts system in a Meteor app, using the
Twitter accounts service as an example.
"$%
We are going to focus almost exclusively on the accounts and authentication piece of our application,
and as such, we only need a very simple, baseline application.
In a terminal window, create your root project by entering the following commands:


%7=
=9
Y


	

That's all it takes. Everything else will be done inside our recipe, so let's get going!
1 ,,,
We will add the appropriate  packages, and configure our Twitter login service. Proceed with
the following steps:
1. In a new terminal window (keep your application running), navigate to the root folder of your
project, and enter the following two commands:




This will add several dependent packages, so you don't have to. How thoughtful and
gentlemanly of Meteor to do that for us!

You can just as easily use another authentication service by replacing #)
used in this step with any of the following: #, #,
#, #
, #), or ##
'

2. Open :
(;&&)# and add the following
template inclusion just after the starting  tag:


77:I
99
3. Save this change, and navigate to your app in a browser (usually

&&$%%%&). At the top-left of your screen you will see a red button that
says $	 2$, as shown in the following screenshot:
4. Click on $	 2$ button, and a set of instructions for configuring your Twitter
app will appear. Follow those instructions 1
, entering your  (API key) and
consumer  key(API secret) where appropriate.

For this recipe, the value you enter in the website field is going to be

&&BJK%%B$%%% rather than 
&&$%%%. Twitter doesn't
allow the use of .
5. With your service configured, you are ready to log in. Click on the blue (formerly red) button
labeled $+ with Twitter, and a new window should pop up, asking you to authorize your
app, as shown in the following screenshot:

6. Once you authorize the app, you should be logged in, indicated by a status change in the login
button, as shown in the following screenshot:

1  ,,,
This recipe is pretty packaged up, so there's not a lot of code involved. That said, we can dissect what's
going on, so that we can understand where to tweak this recipe when needed.
Let's do a deep dive into how the authentication piece is working. #) relies on the
#, # and ) packages. If we crack open each of those
packages, we can see just how much legwork has been done for us:
Put as simply as possible, # and #) give you a responsive UI, and
make calls to #, which handles all of the account administration. #
helps # by handling the OAuth-specific events and calls. # is
configured by the ) package, which provides specific URLs and parameters needed to use
Twitter's OAuth service.
Here's a more detailed explanation:
The # package is a generic accounts package that accepts different types of login
methods, provides helper methods for account administration, and helps maintain the  collection.
The  collection is where we store logged-in state, preferences, and profile information.
One of the exposed methods in # is  +"1,
which can be used by more specific login packages (such as # or #

)) to register handlers for login information:

When # gets a request for a login, that request has a certain 
, and has certain
' parameters. # runs the information through all the login handlers that were
registered, and lets each of those handlers respond with either  ("this is not my login
method"),  ("the credentials were wrong"), or '7 object ("login was accepted"),
including a token for reconnecting easily.
The # package builds off of the # by registering a login handler of
type: .., and exposing some helpers of its own. The # helpers allow us to
configure a specific OAuth service. Each OAuth service requires customized URLs and parameters. We
chose the Twitter OAuth service, and therefore used the ) and #)
packages to configure those URLs and parameters.
The # packages is also responsible for handling the message/callback from the
OAuth service, via the popup authentication form. That is, when the popup authentication from Twitter
was complete, it redirected to 
&&$%%%&L&) and had an OAuth
token to pass to our app. The # package evaluates that particular URL (because we
configured it with the ) package), snatches up the token, and then attempts a login, using the
 +41 with some JSON that looks similar to the following:
2
 :22
+% A$8"]?E@?$MM%<$KD<F,)Q0=5?B(TM"KLA
2 AJ)N# \5J8,@%L4L 4
H#0P#A
339


;3
The login handler that # registered receives this JSON, and confirms with the
(Twitter) OAuth service that the token is valid. If it is valid, a  profile is created/updated in the
 collection, and '7 (containing a login token, among other things) is passed to the
client via a callback function. Because of the callback, and because the client is subscribing to the
 collection, the client sees that there is a logged-in user, and acts accordingly.
The ) and #) packages contain convenience methods that work on top of
# and #. For example, the ) package has a server file
()L'() that declares the specific Twitter URLs, registers the ) service
through the 8 6'1 method, and even creates a Twitter-specific credential
call, as shown in the following code:
!)'5-
1!962
8 '51
!96/
3/
The #) packages creates the 4@!)1 method, and
declares which profile fields are visible on the client, using
  G1.
.M
Sometimes, seeing how the user and configuration information is stored can be helpful in understanding
what's going on under the hood. We can do this using the  command in a terminal
window. Open a new terminal window (keep your application running), navigate to your project root,
and enter the following command:

You will now have command line access to the collections that store user information and login service
configurations.
To view the Twitter configuration settings, enter the following command:
:C
C28')
You will see the configuration for your Twitter login service, as shown in the following code:
2A'AA)A9
AQAAJJJ$$$MMJJMM$$A9
AAAIIINKPPP$A9

A6AA


A9ALAA7<TG5A
3
If you would like to reconfigure your Twitter login service, you can remove the entry using the
following command:
:C
C28'79)
Once you do this, you can follow the instructions on the screen and re-enter your Twitter credentials as
you did in the preceding recipe.
To view the different states of a logged in user, run and re-run the following command:
:

G')
Go ahead and experiment with this, running it when the user is logged out, when the user is logged in,
and when the user doesn't exist yet. Pay special attention to the ' section and you'll be able to
see how logins are handled by both the ) and  login services.


â€¢ The &
7

 recipe in this chapter
â€¢ The 

 and "
 recipes in Chapter 11,
#2


	7$	
$
Packaged accounts logins are great and all, but they don't always go with the design of the rest of our
page, or they provide too much functionality when all we need is a little functionality. This recipe will
show you how to customize Meteor's accounts packages using the Twitter OAuth service as an example.
"$%
We will essentially be using the 
,#

 recipe found in this chapter as
our baseline, but we aren't going to add the # package, and therefore will not be
configuring the Twitter service through the UI, so we need to roll our own.
In a terminal window, create your root project by entering the following commands:




%7=
=9

Y


	

Open a new terminal window (keep your app running) and add the #) and the
'# packages:




We now need to configure our login service manually, using the API key and API secret from our
existing Twitter service (the one we created with the 
,#

 recipe).
Create a file named :
(;&'&#( and add the following code,
replacing the appropriate sections with your key and secret:
6'5
12
'A)A39
2
2
AQAA: =Q

);A9
AAA: =

);A
3
3
/

When you copy your keys from the Twitter Apps page, there's usually an extra space character on the
end. Make sure you remove that character (e.g. ABJ$A needs to be ABJ$A) or your
authentication will fail!

We are now ready to build our own customized login.
1 ,,,
To build our own login, we'll need a couple of buttons, and some type of indicator that we're logged in.
Easy peasy.
1. Open :
(;&&)# and add the following
template:

-A+A
22C?33
'-AA-A#A+&'
-A22
33A-AA
2233
'-AA-A#A+&'
22&33
&

2. We now want to call our template. Make the following changes inside the  tag, and
save the file:

5

66:
77:
-99
B@4S&B
2233
&'
&
3. Create a new file named :
(;&&

(, and add
the following + template helpers:
!
+
12

12
'-41/
WW
'/
3
3/
4. Now, let's hook up our login and logout buttons. In the same 

( file,
add the following events declarations:
!
+'12
.C.12
4@!)1/

39
.C.12
41/
3
3/
5. Save your changes, and navigate to your app in a browser (usually

&&$%%%). You should see a login button, as shown in following
screenshot:
6. If you click the 2$ button and authorize the Twitter app when prompted by the popup
window, you will be authenticated and your Twitter avatar will appear, next to a 2$	 button,
as shown in the following screenshot:

1  ,,,
Starting in the + template, we make use of the 22C?33 helper, which
checks to see whether 41 is  or not. In other words, if a user is logged in,
? returns .
If ? is , we add a 2$	 button, and an  tag, with the  attribute set to a
property found on the user profile. Specifically, 
 returns the
')
LL property if a user is logged in.
For the login and logout events, we simply call the 4@!)1 (provided by
the #) package) and the 41 methods. Meteor takes care of the
rest for us.
.M
The accounts interface itself is quite customizable, with many packages available at
https://atmospherejs.com/?q=accounts-ui.
We suggest installing the ## package and experimenting with CSS/styling.
You can get a great overview of what options and DOM elements are available by checking out the raw
repository available at https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled.
Pay particular attention to the L and L( files, as they'll
give you some pointers on what's possible.


â€¢ The 
,#

 recipe in this chapter

#$ 	
We can make any application more secure (and safer from bots or hack attempts) by providing two-
factor authentication. Two-factor authentication requires an individual to verify their identity using two
separate methods. One such method, SMS text verification, has become quite popular, due to its
convenience and difficulty in mimicking. This recipe will show you how to create two-factor
authentication in a Meteor app, using the Twitter OAuth and Twilio SMS services.
"$%
Using the &
7

 recipe found in this chapter, we already have an application
that authenticates against Twitter. We will expand that recipe, and add the Twilio SMS service to send a
6-digit verification code for our second authentication challenge. So that we can focus on the
authentication part of the recipe, we will set up the Twilio service here rather than in the main recipe.
$	


Please follow the &
7

 recipe found in this chapter, and recreate that project,
changing the name from )# to )#.
$$	 

Navigate to https://www.twilio.com/try-twilio in a browser, or visit the home page at
https://www.twilio.com/, and click on the +"0'# link on the top right.
Enter the necessary information to create an account, and click ".
Verify that you're human by entering your phone number and clicking on &. Shortly thereafter,
you will receive a text message (if not, you can retry). Enter the code from that message into the verify
section, and click on the 4% button.
You will now have a phone number generated for you. Accept the default number, or choose one for
yourself (the default one is free), and click on the "G		 button.

Make a note of your assigned phone number, as you will need it later in this recipe.
Congratulations, you're all set up with a trial account from Twilio!
$ 

While logged in to Twilio, click on your name in the top right corner of the page. Select the 	
option to go to the 	 $ page. There you will be presented with two sets of API keys. You
can use either of those for testing, but would obviously want to use the Live credentials for a production
application. Your screen should look like the following screenshot:

Decide which credentials you'll be using, and make note of both the 	+ and the 	.
+

$ 
$
Stop your application (&
 + &) in the terminal, and enter the following command:
%
	
Run your application again by entering the following command:

You will receive a message letting you know that 
 has been initialized, as shown
in the following example:
:	
		
E
:	

		
Before starting our app again, we will need to declare that we are going to use the )# npm
package. Open the newly-created :
(;&
( file, and add the following
declaration:

2
666""##6
3
Now, start your application back up again in the terminal, using the  command, as shown in the
preceding examples.
With the )# npm package installed, all that's left to do is create a Twilio messaging method
and test it.
$$ 
AB
Create a new file named :
(;&'&)( and add the following code,
replacing the  6=7,  !, and !)> as appropriate:
!)-1
92
4)
 11
992
'!)-4
E1.).
1.:T8?E 6=708F6"FEF;.9
.:T8?E !08F6"FEF;./
'
>-.RB.R
/
')-.:!@=+=8>?4<FE !!FE>RB>?4<FE;./
!)412

>9
)9

39192
12
WW1/
32
WW19/
3
3/
31
9/
3/
A good chunk of time could be spent explaining what all the preceding code does, but sufficeth to say,
the !)41 method gets called using 4)
 1 with a callback,
because Twilio is an npm module and therefore requires the wrapper. You should now be able to send
messages to your phone, which you can test by opening a new terminal window (keep your app
running), navigating to your root folder, and using the  command to test.
If your mobile number were OOONPKO$%I, you would enter the following:


:
+'(???!@L?M#&(=(
(='=)7
'=)19)

If everything is set up properly, you will get a text message on your phone, similar to the following
screenshot:
If something went wrong, the console will spit out an error message, and you can trace down the source
of your error.
Hopefully everything went right, and we are now ready to complete our two-factor authentication
recipe!
1 ,,,
We'll start by getting everything running smoothly on the server side, incorporating a new login state
called '. Once the server side is complete, we'll then build out the different user states in our
UI.
We will need to generate a 6-digit code to be sent to the user, and we can leverage an existing Meteor
package to do so.
1. In a new terminal window (keep your app running), in the project root, enter the following
command:

2. Now, create a file named :
(;&&
( and add the following
code:
E-12
' -:%9B9J9$9M9O9P9K9N9I;/
'-../
)12
R-E1 /
3

/
3/
3. We've just extended the random package to spit out simple codes of any length we choose. You
can test this if you would like by entering E1P in the web console.
4. Open :
(;&'&#( and append the following declaration:
''G-:.')'.9
.')
.;/
  
G12+=?'G9
8?:;3/
5. Now, to make sure that the ')' property exists on each
account, we will initialize it both when an account is created, and when a user logs in
successfully. Append the following code to #(:
 5?11
92
1
98(/
198(/
')-23/
')-E1P/
')'-/

-

/
/
3/
 +11
2
1

S--..2
4
1

L9
2
2A')'A9
A')AE1P
3
3
/
3
3/
6. Everything is in place for us to now create the SMS authentication challenge. Create a new file
named :
(;&'&#( and add the following
4 declarations:
412
51
2
1S=/
')5-E1P/
1
S-2

4
1
=9
2
2A')
A
9
A')A)533/
32
4
1
=9
2
2A')A)533/
3
'?-481=/
!)1?')
9
?')/
39
'512
1S=/
'?-481=/
1S?/
1?')--2
4
1
=9
2
2A')'A33/
3
3
3/
7. With everything on the server set, we now need to update our templates and events on the client
side. Let's first create some kind of visual sign that we've successfully authenticated. Open
[
(;&&)# and modify the  element as
follows:
-A22633A54&
8. Now open )#( in the same folder and make the following addition to the
!

 declaration:
12
61../
3=
2')7
K
,
')1
'K
HHK


)
(


(1
((1
9

9. Finally, make the following changes to the .. event handler:
..12
&&)
K
,
')1
'K
HHK


)7
2


'((=2

'(()J")1
9
7
'(E0()1
9
3
10. Everything else is done. We now only need to provide a way to make our server calls. Open
:
(;&&)# and make the following changes to the
+ template:

-A+A
5

66:
5

6	66	6:
22C?33
'
-AA-AA-A#
#A+&'
56	6

66:
-A22
33A-AA
5:
2233
'
-AA-AA-A#
#A+&'
22&33
&'
77WK
99
77:
-99
7799
&'
&

11. We now need to create the + template, with conditionals based on whether the
user is verified or not. Append the following template to the bottom of )#:

-A+A
22C'33
'-A##A

-A

#A&

&'
2233
'-A#
A-A
A
'-A#
#A-A5A

-A

#
A&


&'


-AA-A
>A-A#
#A
-A2233A
&'
'-A#
A-A
A


-AA-A'5A-A#
#A
-AA
'-A#
#A-A,A

-A

#A&

&'
&'
22&33
&

12. We have the tiniest bit of CSS to add to make our profile pic behave. Open the file named
:
(;&&)# and add the following CSS declarations:
C
2
#MM
/
%%/
3
C
2

%%/
3
13. Open :
(;&&

( and add the following
helpers:
!
+
12
'12
'?-41/
1?WW?')'/
39
12
'?-41/
?WW?')
/
3
3/
14. Last of all, we need to add the event handlers for the buttons to send SMS texts and to verify the
code found in the SMS messages. Append the following code to 

(:
!
+'12
.C5.12
'
>-1.C
>.'1/
1S
>

>-1.C
>.1.
./

1S
>--B%/
41.5.9
>/
39
.C,.12
''5-1.C'5.'1/
1S'5--P/
41.'5.9'5/
3
3/
15. Save all your changes, and go ahead and test your new UI. Upon authenticating via Twitter, you
will receive two text prompts and two buttons, as shown in the following screenshots:
The button on the left will send a randomized code to the phone number you specify (or the
saved phone number, if one exists). The button on the right will submit a verification code. If
you entered the correct code (found in the text message sent to your phone), you will be
verified, and your screen will look similar to the following screenshot:
Congratulations, you've just implemented two-factor authentication in your Meteor app!
1  ,,,
Several things had to be accomplished in order for two-factor authentication to work. First, we had to
extend the users collection with a new service named ). Some of the
') properties needed to be exposed for use on the client, and we had to set

')' to  whenever a new user was created, or when a user
logs in using Twitter OAuth. Inside of our #( file, we accomplished both of these tasks,
first by calling the   
G1 method, and then by listening and
updating via the  5?1 and the  +1 event handlers:
  
G12+=? <=
8?:;3/
 5?11
92

')-E1P/




1

3/
 +11
2

2
26

6
=
A')AE1P
3

3/
We added two server methods to helps us with verifying the user. The first, 51,
generates a new 6 digit random code, updates the ') property, and then
sends the code to the specified phone number via the Twilio service. The second, '51,
receives manual input from the user, checks the manually entered code against the
') property, and updates ')' to
 if they match:
412

8 1
2
1S=/
')5-E1P/

 
+')1
39
8 12

1?')--2
4
1
=9
2
26

633/
3
3
3/

With the addition of the ' property, and the server methods used to change the '
property from  to , we can now use ' in our UI. We created a helper method,
!
+', that checks to see if the
')' property is set to . We then use this helper in our
+ template to show that the user is logged in and verified:

-A+A
77W99
'-A##A

-A
 	%A&

&'
77
99

7799
&

The rest of the event handlers and helpers on the UI are used for convenience, or to make calls to the
server methods previously outlined.
The simplified version is this: we extended the  collection, adding a ' property. We
used the SMS text and verification to change the value of the ' property. We disallow any
activity in the client UI unless '--. This check, as a complement to checking if there is
a logged in user, allows us to require two-factor authentication in our UI.
.M
This model of extending the  collection with new ' properties can be used for pretty
much anything, and is not just limited to SMS text challenges. By adding and exposing new '
properties, you can control what features are available, depending on the user status. Imagine being able
to limit some features of the UI, based on the subscription plan a user has purchased. Or imagine
remembering layout and view preferences based on the saved preferences of the user. All of this, and
more, is possible by extending the  collection.


â€¢ The 

	


 recipe in Chapter 3, !
$


â€¢ The $
 recipe in Chapter 8, 

.

â€¢ The &
7

 recipe in this chapter
â€¢ The $
 recipe in Chapter 11, #2


 --, 2$$	
In this chapter, we will cover the following topics:
â€¢ Building custom server methods
â€¢ Creating custom EJSON objects
â€¢ Handling asynchronous events
â€¢ Using asynchronous functions
+	
There are some unique functions Meteor offers that make our lives in a full-stack development
environment even easier. This chapter will go into these lesser-advertised areas of functionality,
providing you with even more under the hood knowledge to make your applications elegant and
powerful.

6	
$	
The majority of communications we perform between the client and server in Meteor is done via DDP.
There are times, however, where direct server calls can come in very handy. For example, while you're
testing, or as an admin, you may create some .. helper methods to make debugging easier. In
other instances, you may want to make very secure or very simple methods available to reduce the
vulnerability or complexity of your code. In any case, server methods are a staple of development, and
this recipe will walk you through creating and using server-side methods, using the
41 function.
"$%
To create server methods, we first need a basic application. We'll quickly create a color swatch app.
Nothing fancy, but once we're done, we will be able to create server methods with good visual feedback.
#C	
You will need Meteor installed, and have a project created. In a terminal window, create your root
project by entering the following commands:






Y
%7=
=9


	

$

Create a file named :
(;&&
( and add the following code:
6)-)451.)./
5-12
'5-.C./
)15M2
5R-E1.%PG./
3
5/
3
Next, create a file named :
(;&&( and add the following code:
!

12
)12
6)11/
3

3
!
'12
.C)5.12
6)12513/
3
3
Create some simple styling by creating a file named :
(;&&
with the following style declarations:
)2

#/
N/
)N/
#%O/
#
B/
3
C)52

/
#
%O/
3
Finally, create your templates by creating :
(;&& and adding the
following templates:

'-AA
'-A)5A-A##A

-A

#
A&

&'
2233
&'
&

-AA
22C)33
'-A)A-A#2233A&'
22&33
&

Save all your changes, navigate to 
&&$%%% in a browser, and click the button
with the plus sign on it repeatedly to add random color swatches. You should see something similar to
the following screenshot:

You are now ready to create some helper server methods.
1 ,,,
We will create two server methods. One to clear the 6) collection, and one that adds only
unique colors.
1. First, let's build the 6)1 function. Create a file named :
(
;&'&( and add the following 4 declaration:
412
6)12
6)'123/
3
3/
In your browser console, enter the following command:
:,'(2
()

All your color swatches should disappear. Don't fret, friend, you can always create more
swatches by clicking the button on the screen.
2. Next, let's create the ?6)1 function. Open ( from the
preceding step and add the following declaration just after the 6) declaration:
6)12
6)'123/
3=
KU2'8)7
'2
G'789))1
2

'789)1
9
3. Now, open :
(;&&(, and make the following change to
the !
' declaration:
!
'12
.C)5.12
,'(KU2(=8'))1
3
3
Now, as you click on the button to add colors, you will find that, eventually, no new swatches
will be added. This is because the total number of unique colors is 27. If you start with no
swatches, your screen will eventually look similar to the following screenshot:

You won't be able to add more than the 27 colors, no matter how many times you click the
button.
1  ,,,
We created two calls on the server by creating code inside the ' folder. These calls are exposed
to the client because we declared them using the 41 function.
The 6)1 method we created in the ( file is , in that, unless you
know it's there, there's no easy way to know that it exists. The ?6)1 method is used
inside of the  event for our button, so someone could discover it by looking at our client code.
In both cases, the methods are not called through an Ajax/traditional server call, but are instead
automatically exposed by Meteor, and , very easy to invoke via the 41 method, which
accepts the name of the method as the first parameter, and any additional parameters, as method
arguments.
.M
If you pass a callback function as the last argument in 41, the callback will be
automatically invoked when the server method has completed execution. You can use this to perform
actions after the call is complete. The following is an example.
Open :
(;&'&( and make the following changes to
?6)1 function:
?6)1)52
16)812)53/
6)12)53/
2
')')1
3
Now, in your browser console, quickly reset the 6) collection:
:,'(2
()
Finally, make the following manual call to ?6)1 multiple times:
:,'(KU2(=8')=
'=)7
')19)
Each time you run that command, the console will print out the total number of swatches. Meteor is
auto-running the callback you passed, populating the data parameter with the results from the
?6)1 method.



â€¢ The $
	 recipe in Chapter 1, ,
7>%	
â€¢ The #
 recipe in Chapter 2, &
7	
(

$	!L(0C
It's pretty easy to pass simple objects between the client and the server using DDP. But did you know
that you can pass custom, named objects complete with methods? The folks at Meteor have extended
JSON to allow customized, complete objects to be passed over DDP, without you having to worry about
serialization/deserialization. This recipe will teach you how to create and use custom EJSON objects,
and pass those custom objects between the client and the server.
"$%
We will be using the previous recipe found in this chapter, 

, as a
baseline. Please complete that recipe, and then make the following modifications.

$ C
Create a new file named :
(;&&)( and add the following code to the
file:
6)-12
-/
3
6)

-2
6)9
)12
-51/
39
612
A4AR/
3
3
%$ ,AB
In preparation for using EJSON objects, which are not the normal, plain objects MongoDB expects, we
need to layer our objects by one level when inserting. In the web console, execute the following line to
clear out the 6) collection:
:,'(2
()
Now, open :
(;&'&( and modify the 6)1
method as follows:
?6)1)52


2

'7
2'8)9)1
3
$$ 

The layering on insert will break our UI a bit, but that's okay, we can recover because we're awesome.
Inside the :
(;&&( file, in the !


section, and just below the ) helper, add the following helper:
3=
')7


1
9
Lastly, let's add the following ' declaration, so that we can change the color of our swatches:
!
'12
.).12
)-51/
6)
1L9/
3
3
Save your changes, and test in a browser by clicking on any of the added swatches. The corresponding
swatch should change to a random color each time you click. You are now ready to proceed with
creating custom EJSON objects.
1 M
As mentioned, Meteor takes care of the serialization and deserialization for us. We just need to declare
our object as an EJSON object. Proceed with the following steps to create a custom EJSON object:
1. Let's add the 
> and D68>, functions. Open the :
(
;&&)( file, and add the following two functions to the
6)

 declaration, just below the 61 function:
3=
	3')7
(2(1
9=
A2G34')7
7


91
9
2. Next we need to declare our object with FD68>!
. In the same )( file, at
the very bottom, add the following function call:

FD68>!
1A6)A9D68>,1'2
)6)1'/
3/
3. We're now ready to use our EJSON object methods. Open the :
(;&&
( file, and make the following changes to !
':
.).12



')1
6)
1L9/

'

2'))1
9
In the browser, add some new swatches and click on them with your browser console window
open. The swatches will change colors, and they will tell you what their new colors are in the
console. Your screen should look similar to the following screenshot:
1  M
When known FD68> objects are inserted into, or retrieved from MongoDB, Meteor automatically
serializes and deserializes the objects using the FD68> library.
To do this properly, the objects themselves have to have at least two methods. First, the object must have
the 
> function, which aids in mapping the object to the declared FD68> object. Second, the
object must have the D68>,1 function, so that Meteor can properly serialize the object to a
string/standard JSON value. Without the D68>,1 function, MongoDB would choke on the
object, and refuse to insert it. Transporting the object over DDP would be equally unfeasible.

The other action needed is to declare the FD68> object, which we did in )( with the
FD68>!
1 function. This function takes a D68>,1 function as an argument,
which (exactly as it sounds) takes the JSON value passed over the wire and instantiates an actual object
of the appropriate type. In our case, this was a 6) object, and the only property needing to be
created was the  property, which was passed in through the constructor.
Once the previous methods are declared, and the !
 function called, Meteor takes care of the rest
for us, and stores our objects rather cleverly in MongoDB. As an example, here is what the raw JSON
looks like for one of our serialized 6) objects:
2
ALAAFH40!0>aN<MEA9
A)A2
AFD68>
AA6)A9
AFD68>'A2
AFD68>AACPPGA
3
3
3
.M
The FD68> object has other helper functions that you can declare in an object to aid in the development
and use of FD68> objects.
The 1 method can be implemented on an FD68> object to perform a deep copy with logic. If
you don't declare the 1 function, Meteor uses D68>,1 instead.
The 1 method takes another object as a parameter and performs a custom comparison of
your choosing. If you don't declare the 1 function, Meteor simply takes both objects,
performs a D68>,1 transformation on each, and compares the result.

Learn more about the EJSON library by viewing the Meteor documentation, found here:
https://www.meteor.com/ejson.


â€¢ The  

 recipe in this chapter

1
$%	
Meteor is a reactive framework. As you've probably noticed, it's built on top of >(, but when
writing or using packages, it somehow magically avoids all of the callback and event loop drama you'd
normally face with >(. Meteor lets you code in a declarative, synchronous-like style. This recipe
will show you one of the ways Meteor does this, and how you can handle asynchronous events coming
in from a third-party package. In this case, we will read an incoming Twitter stream from the npm )
package.
"$%
We need to quickly set up a test application on Twitter and load the npm ) module, so we'll do that
here, so as not to distract from the recipe itself. Note that you can use any asynchronous event stream
you would like for this recipe, including the standard ='1 method, which could be used
to mimic an asynchronous event stream.
$

Open a terminal window, navigate to where you would like your project to reside, and enter the
following commands:
	
	
	
Y
%7=
=9
%
	

Instead of starting Meteor like usual, this will instead create a file called :
(
;&
(. Open that file in an editor and add the following declaration:
2
666"" #6
3
Save your changes, and in the terminal, run the  command again:

($%	 
Use a browser to log in to http://twitter.com, and then navigate to https://apps.twitter.com. Create a new
app, following the instructions, and click on the E% tab to obtain your Consumer
Key + Secret and a valid Access Token + Secret found on that page. @
, as we will
need to reference it a bit later.


For Meteor-specific instructions on setting up a Twitter App, please see the 
,#


 recipe, found in Chapter 10, %	
#
*
+
7$ 
Create a file named :
(;&'&#)( and add the following code,
replacing the L, L, L, and
LL with the information you obtained previously. When completed, your file
should look similar to the following code:
!)-4
E1.)./
!)-)!)12
L.G4MJ$$I4EN.9
L
.EJ%J5D57,4(J@(>P]H.9
L.NF$4?I=OF8 $7'7a4.9
LL
.KKQNH
7E(IBM.
3/

!)-1)2
'8(-23/
1S)8(/
8(L-)L/
8(-)/
8(-.	.R)L/
8(/
3
$ 

3	
$
Create a file named :
(;&&( and add the following line:
!)-)451.)./
Now, create a file named :
(;&'&)#( and add the
following code:
-23/
412
!)612
1--..2
1
S-
1/
!)'123/

/
3
-!)1.&.92

3/
1.).91)2
'
!-
!)1)/
1
!/
3/
3
3
$$$
Create a file named :
(;&&!( and add the following
code:
!112
1!)11/
3/
Now, navigate in a browser to 
&&$%%%, open the console window, and enter the
following command:
:,'(+2(=(A2	()
In your terminal window where you started Meteor with the  command, you should periodically
see some JSON-formatted tweets. If tweets aren't showing up, it may be that the query you used isn't
popular enough (this is a live Twitter feed!), so you can select something else, like  or , if you
want to see a steady stream.
Lastly, you will want to test the !) collection tracking. In the browser console, enter the following
command, and run it multiple times:
:+

'7+
')')9)
If everything is set up properly, you will see a growing table of entries in your console.
To turn off the Twitter feed and to clear out the !) collection, enter the following in the browser
console:
:,'(+2(=(()
With everything all cleaned up, let's proceed to the recipe.

1 M
This recipe concentrates on only one thing: handling asynchronous events synchronously. As such, there
are one two very simple steps as follows:
1. Open :
(;&'&)#(, and add the following
 statement to the  handler, as follows:
1.).91)2
'
!-
!)1)/
1
!/
+

'
	+)1
3/
Because the event handler is an asynchronous event, if you try turning the stream on as-is, you
will get a very nasty error stating the following:
,

<
2. Modify the  handler as follows:
1.).9 ,V'
1)2
'
!-
!)1)/
1
!/
!)1
!/
3)/
You can now turn on the stream in the browser console, as follows:
:,'(+2(=(A2	()
As entries come in from the stream, they will populate in the Tweets collection, and you will see
the results in your browser console, similar to the following:
1  M
To accomplish the declarative, reactive environment we've come to know and love, the Meteor server
intentionally runs on a single thread per request. Therefore, when you create some type of asynchronous
action, such as listening to a >( event stream, the callback (handler) for that asynchronous action
operates on a different thread. When the callback is fired, if you try to call Meteor functions (like

!)1 for example ), Meteor will throw an error, because the callback and the main
Meteor server are on different threads. In addition, if you used any global variables with values, you
can't guarantee that those values have remained the same while the asynchronous call was waiting. Some
other operation could have changed the environment!
Meteor has an elegant way of dealing with this situation, using 4F'1.
By wrapping the callback function with 4F'1, a 2 is created. The
Fiber keeps track of the variables and their values (the environment), and knows that sooner or later the
callback is going to be called.
In the meantime, the Fiber removes the operation from the event loop, so that the operation isn't
blocking any other operations. Once the callback is ready, the Fiber puts the operation back into the
event loop, restores the environment, and the operation completes.
In this particular case, when we use 41.!)6.9U we are sending a
request to the Meteor server on a single thread. The !) service is started on that thread but
the events (the incoming stream) are asynchronous. By wrapping the handler for 1 with
4F'1, we are instructing Meteor to "take a snapshot" of the current
environment. Meteor then takes the current operation out of the event loop so that other things can get
through. Then, we wait.
When the stream has new data, the event fires, which triggers the callback. Meteor (or more accurately,
the Fiber) sees that the callback is ready, restores the environment from the snapshot created using
4F'1, and puts the operation back on the event loop. This process
happens again and again, as many times as needed, whenever a new Tweet comes in and triggers the
callback function.
At the risk of oversimplifying, 4F'1 wraps some code into the Fiber and
then waits, without blocking any other code operations. Once the wrapped code is ready/activated, the
Fiber makes sure that the code is executed on the correct thread with the correct data.
.M
We can be very granular about what code is wrapped, and we can separate out wrapped code, to make
the overall code easier to read.
Add the following function to the top of the )#( file:
)

=-4F'11
!2
!)1
!/
3/
Now, revert  by removing the 4F'1 wrapping, and call
)

=1 instead of !)1, as follows:

1.).91)2
'
!-
!)1)/
1
!/
		D
'
	+)1
3/
This will operate exactly the same as wrapping the entire callback function.
One last alternative, we could take the entire callback out, wrap it with a user-friendly name, and use
that name in the callback section, as shown in the following example:
)

5-4F'1
1)2
'
!-
!)1)/
1
!/
!)1
!/
3
/

1.).9)

5/

The most concise explanation of Fibers, Futures, and 4F'1 can be found
here: http://bit.ly/meteor-fibers-explained. Make sure to thoroughly review all the links from that page!


â€¢ The 
,#

 recipe in Chapter 10, %	
#


'$%		
>(, for all its awesomeness, has a flaw: callbacks. Being asynchronous and non-blocking has a
ton of advantages, and we can't imagine life without it. But, wouldn't it be great if there were a way to
avoid the "callback hell" by writing our code in a synchronous style but still reaping the benefits of
asynchronous code? As you might have guessed, Meteor has a way of doing just that. This recipe will
show you how to write and handle asynchronous functions in a synchronous style using
4)
 1.
"$%
Because brevity breeds clarity, we will keep this recipe as simple as possible.
Open a terminal window, navigate to where you would like your project to reside, and enter the
following commands:
	
	
	
	
%


1 M
We are going to simulate a delayed call to an asynchronous method, using the standard JavaScript
!1 function.
1. First, let's prep for the server call. Open :
(;&)
#
( and modify
the !
' function, as follows:
..12
/#1
'/5?)7
/JJ1
U66J/J6%61
,'(
8(=U='=)7

')1
9)1
9
3
2. Create a file named :
(;&'&( and add the following
asynchronous function:
5-192
'+-YY141*$%%%/
!112
WW19RA
SA/

39+/
3/
3. Now, add a simple 4 declaration, using 4)
 1 to write
synchronous-style code, as follows:
412
512
1.
.R/
1/
'5-4)
 15/
'-51/
/
3
3/
4. Open a browser to 
&&$%%%, open the browser console, and click the
button on the screen. As you look at the server terminal, you will immediately see five log
entries, printed in consecutive order, similar to the following:
	"%
	 %
	M%
	>%
	?%
In the Browser window, you will see five log entries. These entries, however, will not be
immediate, and will likely be out of order, similar to the following example:
"%	0
>%	0
 %	0
?%	0
M%	0
5. Click the button again, and notice the random order and time of completion for each of the five
server calls.
1  M
4)
 1 is a bit of syntactic sugar for running asynchronous calls as if they were
synchronous. As discussed in the "
 recipe from this chapter, Fibers and
Futures are the way that Meteor handles asynchronous logic. In this case, we are dealing with what
would be considered a 

 in >(.
Meteor defines a standard asynchronous function as a function as follows:
â€¢ Takes a callback as the last argument
â€¢ Is non-blocking

â€¢ Executes the callback upon completion
The signature of the callback passed in is always the same. There are two arguments, the first of which is
an  object. If there is an , this object will have a value, otherwise, the  argument
will be .
The second argument is a  object. If the call does not return an  object as its first parameter,
this data argument will have data in it that can be used by the callback function.
In our case, we declared a standard asynchronous function named 51. The signature of
51 looks as shown in the following example:
19
Nothing in 51 will block the event loop, even though we're making a call to
='1. The ='1 call is asynchronous, and is therefore non-blocking (very
much like an ajax call, or a file i/o operation, etc). Once ='1 is complete, it invokes our
callback, 19R...
In the 4 declaration, we created a method named 5. Inside of 5,
we first make sure it won't clog up the event loop by calling 1.
We then take our standard asynchronous function (as defined previously) and we wrap it with the
4)
 15 command.
Once wrapped, we can use the wrapped call as if it were synchronous. It's not. There will be a delay in
the result, but our operation will wait until the asynchronous call is complete, which allows us to better
understand what is happening. If we look at the lines of code after 4)
 1, we can
easily wrap our heads around what is happening:
'-51/
/
The  variable is being assigned to the result of the call. We then return  like we would
in a synchronous function. Easy peasy.
.M
The rule for using 4)
 1 can be stated this way: any time you have a standard
asynchronous function, where you would normally have to nest your logic in the callback, you can
instead wrap the function and use the result as if it were a synchronous call.
Under the hood, Meteor is wrapping a Fiber/Future and automatically implementing the ,
1, 1, and )1 pieces for you. But don't worry about that. If you just stick with
the idea that )
 1 is turning asynchronous functions with callbacks into standard functions
without callbacks, you'll be well on your way to writing elegant, declarative code.



â€¢ The " 
 recipe in this chapter

 -5, $'	
#C
In this chapter, we will cover the following topics:
â€¢ Creating RESTful web services
â€¢ Creating a complete app with Iron Router
â€¢ Deploying apps to mobile devices
â€¢ Adding social sharing
+	
Somewhere along your journey towards learning Meteor, you'll reach a point where you will have
mastered the fundamentals. At that point, you will want to start putting all the fundamentals together
into the applications or packages that are actually useful. It's a big development world out there, with
many opportunities. The Meteor landscape is still in its infancy, and if you've followed all (or most) of
the recipes in this book, you're probably ready to start defining that landscape. This last chapter will
walk you through four of the most useful recipes that apply to most projects. It will give you an even
more solid foundation for going out on your own to define, discover, and build!

$!	
 
Alas, alas, the entire development world hasn't caught on to how amazing the DDP protocol is (yet!).
Data-over-the-wire is an amazing concept, and we believe that it (or something like it) is the future of
how applications will communicate. In the meantime, we have some very useful and well-established
protocols that, if implemented in our applications, increase the reach and accessibility of our apps for
other platforms.
The granddaddy of all of these protocols is REST. REST is mature, well-defined, and has been
implemented in nearly every programming language imaginable. It wouldn't surprise us to discover that,
if/when we contact an alien race, the first signal will be a 86! request. Given its current status (and our
most likely option for peaceful interstellar negotiations), we will want to add REST capabilities to some
of our applications. This recipe will walk you through implementing a server-side REST implementation
using Iron Router.
"$%
Since we're only dealing with the REST part of an app in this recipe, we don't need anything fancy. A
simple, standard Meteor app will do, with just a couple of server-side files.
$


Open a terminal window, navigate to where you would like your project root to be, and enter the
following:
OV2+2	
OV2+2	
OV2+2	Y
%	
	
%



+

$$	$#
We need a way to manually call our REST service, and the Postman plugin/app for Chrome is as good as
any. If you have your own way of manually calling REST services, feel free to use it. If not, here's how
to install Postman:
1. In a browser, navigate to http://getpostman.com and click on the " link towards the
bottom. A preview of the Postman app will pop up, and towards the top-right corner will be a
button to install Postman. Click on that button, follow the directions, and open Postman.
2. In the request window in Postman, under the 0
 tab, enter the following URL:
	
M###	
3. Next, click on the 1 button, and enter the following under the 1 | 4
	 sections:

8+			

4. When complete, your screen should look like the following screenshot:
We're now ready to build our REST service and test it using Postman.
1 ,,,
Proceed with the following steps to create RESTful web services:
1. First, we will declare the ] collection. Create a file named :
(
;&'&&( and add the following code:
]-)451../
2. Next, we will add the )" function. Create a file named :
(
;&'&
&EF6!( and add the following function to the bottom:
)"12

5-J%%/

"1.5#
.9.

&(./

"1. #5# )#8.9.*./

"1. #5# )#".9
.89\#E#@95#!
9 
./
3
3. We will now write the code to handle 0F! requests. At the very top of the EF6!( file, create
the following E1 method call:
E1.&
.92
).'.
3
112
&&)
)"1/
&&



1.0F!

_./
3/
Save all of your changes, make sure your app is running, and click on the  button in
Postman. In the results section, click on the 6% tab and the  button. You should see the
following message:
Congratulations, you've just created your first REST service!
4. Now, let's move on to 
 calls. We are going to assume that a 86! query is asking to see
any quotes in our ] collection that are owned by a particular user. In EF6!(, remove
the last semicolon from the 1 function call (we are chaining commands, so it's important
that you do this) and add the following code where you removed the semicolon:

112
)"1/
'-)/
1S2

1.>
_./
/
3
'-]12
)
31/

1D68>1/
3
5. It doesn't make much sense to test a 86! query until we have some data in our collection, does
it? Let's take care of that right now by adding support for ?!. Immediately after the code you
just entered (as a continuation of the function chain), add the following code:

112
)"1
'
]-
/
1S
]2


1.
./
3
'
-]
12
L
]
392

]
3/

1.]
S_./
3/
0
Note that we have a semicolon at the end, which means we're done and can start using our fully
functional service!
6. In Postman, change the service type from 0F! to ?!. In the input field, click on the button
labeled  , and enter the following JSON code:
2A
A2
AA2AAAD+>'A9
AAA609A9
A)AAA
3
33
Your screen should look like the following screenshot:
7. Click on the  button, and in just a few milliseconds, the response area will display the
following message:
[	0

8. Repeat the preceding steps as many times as you would like, varying the quote/author and
owner as desired.
9. We can now test the 86! query. Change the service type from ?! to 86!, and enter the
following JSON in the input field:
2A)AAA3
10. Click on the  button, and on the output window, click on the #% button. The output will
be some well-formatted JSON with at least one entry, similar to that in the following screenshot:
You have just written a simple yet fully functional REST service in Meteor!
1  ,,,
The heavy lifting for this recipe is done by Iron Router. When we add the  package, that
package listens for all incoming requests on the server side. We configured Iron Router to listen on the

&&:

;&
& route for the 0F!, 86!, and ?! requests. To get Iron Router to
listen on that particular route, we used the E1.&
. method call. Importantly,
we declared that, that route is to be handled on the server side using the 2).'.3
parameter.
Chaining each type of request to the 1 call, we used the 1, 
1, and 
1
method calls. In each of these, we can read the JSON data passed in with the request by referencing
:;.
Finally, we are able to send a response by using Iron Router's 
 object, which we used to form
the headers and to send messages back to the calling client.
.M
As usual, we've tried to keep the functionality to a minimum, to reduce the signal-to-noise of what this
recipe is about. There's enough here, however, to give you a good taste of what is possible with REST
services using Iron Router. If you would like more information and specifics on what the RESTful

functions in Iron Router can do, please visit the Iron Router guide at: https://github.com/iron-meteor/
iron-router/blob/devel/Guide.md#server-routing.


â€¢ The &


	

 recipe in Chapter 2, &
7	

(
â€¢ The &

	

 recipe in this chapter

$
 +	
From nearly the beginning of Meteor, the development emphasis has been on "smart" client-based
applications. We left the server-dominated world behind a long time ago, and as a result, the single-page
model is extremely well-supported inside the Meteor development stack.
Essential to this type of application is the  package (https://atmospherejs.com/iron/
router). Yes, you technically could build a multi-functional, mobile-first app without Iron Router, but it
would be much more time consuming and complex by comparison. Think of Iron Router as the
equivalent of using a microwave versus cooking outdoors on a campfire. With no utensils. In a
rainstorm. With rabies-carrying raccoons all up in your business. Okay, okay, maybe it's not that bad, but
you get the pointâ€”you should use Iron Router.
This recipe will walk you through the building of a fully functional, quote tracking service with a single-
page app frontend built using Iron Router.
"$%
We would usually add a lot of preparation steps to a recipe, but in this one, we need to build everything
in one go as part of the recipe. As such, we are only going to add the bare minimum here.
Open a terminal window, navigate to where you would like your application root to be, and enter the
following commands:
[
F		
[
F		
[
F		Y
%7=9


	

We've got a lot of work to do, so let's get started!
1 M
The major sections of this recipe are as follows:
â€¢ Creating the top '
â€¢ Adding user authentication
â€¢ Adding the ] collection
â€¢ Adding Iron Router routes
â€¢ Creating page transition animations
â€¢ Displaying the ] collection
â€¢ Adding and editing ]
â€¢ Deploying the App

There will be a little crossover from section to section, but we should be able to keep things fairly clean,
so if you would like to switch out some functionality or add some features, feel free to do so as we move
along.
1. First up, we need to create the top '.
We will be using the standard Bootstrap ' elements because we don't want to spend a
large chunk of time with CSS styling. Once you're more comfortable with CSS, you can extend
or replace the Bootstrap styling and make it your own.
First, since this is a mobile-oriented app, let's set our headers, and use a Google font. Create a
new file named :
(;&& and add the following
declarations:

-A')
A-A)-'#)9
#-B%9#-B%9#-%A
-.
&&
&[-E).
-..
-.&.
&
Create a new file named :
(;&& and add the
following template, which will act as the foundation for our navigation toolbar:

-AA
'-A''#'##
A
-A'A
'-A'#A
-A'#A-A#A-A&A

-A

#A&
&

-AA-A'#
A
#-A
A#-A'#
A

-A#A!'&


-A#A&


-A#A&


-A#A&

&
&'
'-A'#

A
-A''#''#A
S##+)##
&
&'
&'
S## 


)##
&


We will want to temporarily add a  element afterwards, just so we can check the display
(we will remove it when we implement ):

2233
&
Lastly, we have some minor CSS to add, to make sure everything upcoming runs smoothly.
Create a file named :
(;&& and add the following CSS
declarations:
2#.E).9#/3

2'#
/
/)
B%%Z/B%%Z/#C/
O%
/3

#2#C/COOO/3

#2#H$/#J/3
#2#
BM/#HJ/
#CKKK/#O%Z/
/
BO/)O/O/3

#
2#
BM/3
2#HJ/3
2#H$/3
2#J/#
B/3
2%JO/3
2#
B/3
#2I/3
#2CO%/#HM/3
2. Next, we need to add user authentication.
Because we've had experience with it in the past, we will enable authentication using Twitter.
We will also use some stylized login buttons that fit in with our Bootstrap toolbar. Open a
terminal window, navigate to your project root, and enter the following commands:




	M
We now need to add the < template to our toolbar. Open :
(
;&& and locate the comment that reads as follows:
S##+)##
Replace this comment with the following code:
22<33
Save your changes and navigate to your app in a browser. The top-right corner will contain a
$	  button. Click on this button and configure Twitter according to the

instructions, just as we did in the 
,#

 recipe in Chapter 10,
%	
#
.
After configuration, you may want test the login with your Twitter account. If everything is
satisfactory, we can move on to the meat of our application.
3. Let's add the ] collection.
We're definitely ready to add our ] collection, but we want to have some control over
what records will be sent to the client, based on whether the user is logged in or not. To
accomplish this, we need to remove 
. In a terminal window, in our project root
directory, enter the following command:
	

Next, create a file named :
(;&&( and add the following line
to that file:
]-)451../
Ordinarily, we would add a  command in a client-only file and a 

command in a server-only file, but the logic is so simple that we'll just add them directly to the
( file in this case. Add the following code to ( and save your changes:
1452
41../
32
4
1..912
]12
)=
3/
3
3
4. Up next, we need to add our Iron Router routes.
When you add Iron Router, the changes needed in the running Meteor instance are pretty major.
Technically, you could add Iron Router without stopping your app, but we recommend stopping
your Meteor app while installing and configuring Iron Router.
Once you've stopped your app, enter the following command in the terminal window:

Let's now declare our default layout template. Create a file named :
(;&&
( and add the following line:
E12!
..3/

Now that our layout template is being called by Iron Router, we no longer need the body
element we temporarily put in the  file. Open :
(;&&
 and remove the entire & segment.
We also have a placeholder in  for our application pages, which we need to fill
in with the customary Iron Router yield directive. In , locate the following line:
S## 


)##
Replace that line with the following code:
2233
We have two routes to create, so let's do that now. Open :
(;&&
( and add the following E
 declaration:
E
112
1..92

.&.9

..
3/
1..92

.&&L.9

..912
]812L
L3/
3
3/
3/
We've created our routes, and now we need to create placeholder templates for those routes.
Create a file named :
(;&& and add the following
template:

-AA
'-A
A
B
&B
&'
&

Create a file named :
(;&& and add the following
template:

-AA
'-A

#A
B
&B
&'
&


You can now start your app back up (enter the  command in your terminal) and test the
routes. As you navigate to 
&&$%%% and to

&&$%%%&&BJ$M, you should see pages similar to those in the
following screenshot:
5. We will now create page transition animations.
There's an excellent Atmosphere package out there called . With an Iron Router-
specific package created by Percolate Studios, we can extend  to do Iron Router
route transitions with very little fuss. In a terminal window, enter the following command:
	
Create a file named :
(;&&( and add the following
transition declaration as a !
 helper:
!

12
12
1992
1
--AA.##./
.##./
3
3
3/
We also need to surround our 2233 inclusion with the  template helper.
Open  and add the following wrapper around the inclusion:
77W	((	

99
2233
7799
Save your changes and navigate again to 
&&$%%%&
&BJ$M. Once
the page loads, click on the book icon in the top-left corner of the page. The main page should
slide into place. The reverse animation will occur if you click the back button in your browser.
6. We are now ready to display the ] collection.

We will display some light summary information for each quote in our main template and then
expand that into a lot more detail for the detail template. Let's start with the main template.
Open :
(;&&, remove the B placeholder tag, and add
the following code, which iterates over the ] collection and creates group items for each
one:

-AA
'-A
A
5

6
	6:
77WU
99
5

6
	U6:
5
	

6		
	6:5
	:
5>

6
	6:77995>:
77W
<99
5

6/
	6:77995:
7799
5:
7799
5:
&'
&

We need to add a couple of helpers to support the previously created template, so create a file
named :
(;&&( and add the following code:
!

12
12
]11/
39
G12
'-/
1S:;/
L
1
1.9.912
'!-.C.R/
2!3/
3/
3
3/
We will also need a  event handler, which will get us to the  page template
whenever we click on a quote group item. Add the following code to the bottom of the
( file:
!
'12
.#.12

E1.&&.RL/
3
3/
Save your changes. Now let's programmatically add a couple of entries to the ]
collection. Navigate in a browser to 
&&$%%%&. Make sure that you are
logged in with your Twitter account, open the browser console, and execute the following
command two or so times:
[

'7,
D')=(U(=
U(U(=(U(=

(
=
=(9)
After doing so, your screen should look similar to the following screenshot:
If you click on one of the items, the generic detail page should slide into view. Let's now take
care of the  page template, so that it will display the details of our quotes. Open the
:
(;&& file and replace the template contents with the
following:

-AA
'-A

#A
'-AA
22C33
2233
$-AA2233&$
'-AA2233&'

'-A)A
'-A
#A#2233&'
&'
'-A)A
22CG33
'-A##
A2233&'
22&33
&'
22&33
&'
&'
&

Save your changes and click on one of the placeholder quotes. You should see a screen come
into view that looks similar to the following screenshot:
The tags aren't showing up because we haven't added the necessary helpers yet. Create a file
named :
(;&&( and add the following helpers declaration:
!

12
G12
'-/
1S:;/
L
1
1.9.912
'!-.C.R/
2
!
3/

3/
3
3/
Look back in your browser; the tags should now appear on the detail page template.
7. Now that we've got our display taken care of, let's add the ability to edit and insert new 
objects.
First, let's adjust the  file and add an editing toggle button. Open
 and add the following ' element just before the last &' tag:
&'
5

66:
5

6	6:
5
	

6	77
996:5
	:
5:
5:
&'
&

Next, let's add the input fields for editing/inserting. In the same  file, in the
22C33 section, add the title input field. Do this using the Bootstrap 
#

 styling, like so:
22C33
5

6				6:
5
	

6		6
66:+5
	:
5		6/66	6


66	66677996:
5:
2233
Next is the 
#
 element for the  body. Add the following just after the
 group in the preceding code snippet:
&'
5

6		6:
5
	

6		6
6U6:[5
	:
5/6	U66	U6
6>6


66:77U99
5/:
5:
2233

We need an 
#
 element for the author. Add that just below the  group, as
follows:
&'
5

6		6:
5		6/66	6


66	66677996:
5
	

6		6
66:F5
	:
5:
2233
Last but not least for the template are the tags. Just below the  group, add the following
code:
&'
5

6
6:
5/6	
66	
6


66
6?6:77
995/:
5:
2233
We have a couple of extra helpers to add. Open ( and add the following two helpers
immediately after the G helper block, in the
!

1 method (don't forget the extra comma at the top!):
39

')7
'2

'(())^
(	%((		(1
9=
')7
'2

U
'((=))1
9
3/
We now need to add the event handler for toggling between editing and display. We also need to
add a submit button. So, let's kill two birds with one stone and give our toggle button the ability
to turn into a submit button depending on the state. At the bottom of (, add the
following Template ' declaration:
!
'12
.#.12

'71/
'-61..9/
1WW4=12
'
]-23/


]-1.C
#.'1/

]-1.C
#.'1/

]-1.C
#.'1/

]-1.C
#.'1/

])-4=1/
]
12
LL
392

]
3/
3
1SWWS4=1/
61..91S/
3
3/
Save your changes, navigate to display a single quote, and click on the pencil icon at the bottom
right. You can change the generic quote into a specific quote, as shown in the following
screenshot:

Click on the checkmark and your changes should be saved, as shown in the following
screenshot:

We've taken care of editing; now we need to allow the user to add new quotes. The logic we're
going to use will piggyback on our editing. When the "new qoute" button is clicked, we will
instantly create a new  object in the ] collection and then navigate to the editing
screen. Open :
(;&& and add the following button group
just after the last 22&33 tag, but still inside the #
 &' tag:
22&33
56W6

6
	U6:
5

6%6:
5
	

6			
6:5
	:
5:
5:
&'
&'
&

When this button is clicked, we want to insert a new object into the ] collection and then
navigate to the editing screen. Open ( and add the following event handler inside the
!
'1 method call, just after the # event handler
(again, don't forget the comma!):

39
(%U(')7
'0,
D'))1
[

'7,
D')9=
'=)7
'0)7
2


'((=)1
O'(U(J)1
9
9)1
9
3/
Save all of your changes, navigate to 
&&$%%% in a browser, and you
should see a big blue plus sign at the bottom of the quote group. Click on the button and you'll
be taken to a fresh, clean editing screen similar to the following sceenshot. Here, you can enter a
new quote:

8. With all functionality in place, we are ready to deploy our app.
We can deploy our app wherever we would like to (please refer to one of the many deployment
recipes in Chapter 1, ,
7>%	 for details), but for this recipe we'll pick the
easiest/quickest way to deploy, which is directly to the Meteor servers.
Stop your application from running in the terminal using &
 + & and execute the following
command, replacing :##; with whatever you would like:

	R
S
In our case, we used the following command:
		%U

Wait for your app to build and then upload, and you should get a familiar message, similar to the
following:
B		%U

3
		%U

Navigate to your newly-deployed app, configure Twitter if needed (you will need a new Twitter
app ID, one that points to your new deployment URL), log in, and add some quotes. When
you're finished, your app should look similar to the following screenshot:

Congratulations! You've just created and deployed a complete application in eight steps. You should be
proud of yourself. Go get a soda or a celebratory slice of pizza. You deserve it!

1  M
Since each of the preceding steps involves recipes from other chapters, we won't focus too much on the
code specifics. Instead, we'll have a general overview of what each step does and add detail where
needed.
We first added our top menu/navbar. Using the ' and '##
 CSS classes built
in to Bootstrap, we were able to position our ' at the top of our screen with very little effort. We
added a web font (thank you, Google!) and set the parameters for use on mobile devices in our header
file.
For user authentication, we relied on the default Meteor packages for accounts (specifically the
#) package). For formatting, we used the excellently designed <
package created by Ian Martorell. He did the heavy lifting for us, so all we had to do was add the
package and place our 22<33 inclusion in the correct place.
We declared the ] collection in a file visible to the client and the server, as usual, and added a

 function that will only send those results to the client which were created by the logged in
user.
We added the Iron Router package and took advantage of the E
1 and the
!
 helpers of that package to implement a baseline layout template, a main template,
and a details template.
We next leveraged a bit of wizardry from Percolate Studios, called . They've created a plugin
for  that allows you to wrap the 2233 directive and point it to a template helper,
where we perform some quick logic to say, "If we're going to the main page, go left to right. If not, go
right to left." It's a well-designed package and is very easy to implement!
Our next steps (displaying, editing, and creating quotes) could be considered the meat of the recipe, but
because all the scaffolding was already in place, and because this type of functionality is so easy to
implement in Meteor, we simply used an 22CU33 directive, some reactive data bindings, and a
few  event handlers to display and edit the records from the ] collection.
In fact, the most complicated bit in the entire project was taking the  property and parsing it into an
array using L
1. Think about that for a second. The most technically "challenging" part of our
entire app was parsing a string. Meteor is pretty awesome, isn't it?
Our last step was deployment, which is also pretty straightforward, since we have already done it a few
times in Chapter 1, ,
7>%	.
Taken as a whole, the building of an entire app from scratch seems daunting. Breaking it down into
discreet steps made it not only straightforward, but actually pretty fun as well. We hope that you enjoyed
it, and we hope that you will take this recipe, modify it and expand on it, and create some quick, useful
apps of your own!

.M
If you examined the finished product of this recipe closely, you probably noticed that there is some
missing functionality and some refinement that still needs to happen. For example, there's currently no
way to delete a quote, we can't sort by tags/subject/author, and we actually deployed without removing
the insecure package.
In other words, there are a lot of other recipes from previous chapters we could apply to improve the
app. We will leave you to that, as you build and expand your own applications, and we can't wait to see
what you come up with!


â€¢ The '



 recipe in Chapter 1, ,
7>%	
â€¢ The #
 recipe in Chapter 2, &
7	
(
â€¢ The 

	


 recipe in Chapter 3, !
$


â€¢ The 
,#

 recipe in Chapter 10, %	
#



%$

What good is building single-page apps with all kinds of cool functionality if you're only going to make
it available as a web page? This recipe will take you through all the steps necessary to test and deploy
your app to an iOS device.
"$%
You need an app to complete this recipe. We will be using the app created in the &


	

 recipe found earlier in this chapter. If you don't have your own app you would like
to deploy, please complete that recipe first and then come back to this one to learn how to deploy your
app.
1 M
There are two parts to deploying your application. The first is testing it on a device while using the
server-side code that has already been deployed to a production URL. The second is to prepare an app
build for deployment to the App Store.
1. First, let's set up our mobile app building environment. To deploy to an iOS device, you will
need an Apple developer license, a machine running Mac OS X, and Xcode installed on that
machine.
To obtain an Apple Developer license, visit https://developer.apple.com/programs/ and follow
the links/instructions to join the iOS Developer program.
Once you have joined the program, download and install Xcode from
https://developer.apple.com/xcode/downloads/. You will need to properly configure Xcode,
including adding certificates and mobile provisions as needed. There is a learning curve
involved, and we strongly recommend that you take some time to learn the development,
certification, and the App Store submission processes before proceeding.
Open a terminal window, navigate to your app directory, and enter the following command:


%
This can take a while, but make sure that the SDK is installed properly and fix any errors or
outstanding installation items as directed.
Once completed, enter the following command:
	
You're now properly configured, and can test/deploy your app on an iOS device.
2. Let's now test our app on an iOS device.

Connect your iOS device to your machine via a USB cable. Enter the following command in the
command line:


R		S
Here, :#

#; is replaced by the URL for your deployed server instance. In
our case, we used the following command (all on one line, of course):


	%U

The application will be built and bundled, and then \ will open. Once the app has been
compiled in \, you will see the following message at the top-middle of the \ app:
Select your iOS device from the dropdown menu and click the play button, as displayed in this
screenshot:

Make sure that your device is unlocked, and after some download and code push activity, an
icon with the Meteor logo will appear on your device. The app will quickly open; then, after a
short delay, your app will run just as if you pulled it up in a browser, but it is running as a full-
fledged application on your device! Here's a screenshot of the ] app running on an
iPhone:

3. The next step is to build a standalone mobile app file.

Once you've tested everything and it's working as it should be, you will want to create an actual
app file that you can submit to the Apple App Store. When you installed a test app on your
mobile device, Meteor auto-created several assets for your app. You can view these assets by
navigating to the :
(;&&&'#&
folder, as shown in the following screenshot:
You can use these resources or swap them out as needed. Once you've got your correct icons
and splash screens in place, you will need to create a file named :
(
;&#( and add the following parameters, at a bare minimum:
 

12
.:

;.9

.7


.9

'.%%B.
3/
 

12
.
..&&#P%
.9
.
LJ..&&#P%	J
.
3/
 

612
.
..&
&7Y

.9
.
LJ..&
&7	JY

.9
.
O..&
&7#OPN	JY

.
3/
You can, of course, change anything you would like in this file, and there are several other
parameters you can add to further tweak the installation. See the :
(
;&&&'#& file for a good solid list of
options.
Once you're satisfied with your configuration, navigate to the root app directory and enter the
following command in the terminal (all on one line, of course):
R	S
R		S
For example, our command for the ] application would look like this (all on one line, of
course):
P

	%U

Once completed, you can open the project directory in \ (in our case, the project directory
would be Y&&&
() and configure to your heart's content. Once everything
is correct and running how you would like it, you can sign the app and submit it to the Apple
App Store.
1  M
Meteor leverages the ' library, \, and your Mac's operating system to bundle, compile,
and package your application. The emphasis is to get it into \, where you can then manipulate the
app as you would any native app, testing or deploying or submitting to the App Store.
The specifics on what to do inside \ and while submitting to the Apple App Store are beyond the
scope of this book. If you would like more Meteor-specific app building information, please visit
https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store.

.M
Everything is brain surgery the first time. Building and deploying a mobile app is no exception. Here are
some tips to help you troubleshoot, should things go wrong:
â€¢ ;
;: If your app is being built but is taking forever to "boot up" on the device,
or if you just get a blank screen, first try making sure all of your network and Xcode
configurations are correct. You can do this by building a brand new Meteor project using
##

 and deploying that barebones app to your mobile device.
If it comes up properly, you've successfully gotten a "dial tone" and you can start finding out
which package or piece of code is the source of your slow-loading woes.
â€¢ +	$		: If you are using Iron Router and you don't
have your Iron Router routes configured properly, the app will usually refuse to load. If you are
running into problems, implement the bare minimum routes, with no fancy code, and see if you
can get the routes to come up on the device. Again, start simple.
â€¢ '	
: You don't have to always push to the actual device. Using the 
 or  commands will boot up a simulator in almost no time,
where you can test and debug much more quickly than you could on an actual device.
â€¢ 'S.
$: If there's a problem, check the logs, found in the bottom-right panel of
Xcode. You can also set breakpoints using Xcode while the app is running on your device,
which can help you isolate potential problems.
Above all else, stick with it. We can assure you that deploying to mobile devices, once you're properly
configured, is extremely straightforward, with very high rates of success. Don't give up! Have faith that
very soon it will just "click" and you won't have any problems/anxiety about building a mobile
application. It will, in fact, become fun and extremely rewarding as you see your app in the App Store or
on people's devices. It's worth the learning curve!


â€¢ The &

	

 recipe in this chapter

$
$
With the ever-increasing demand to integrate social media into your apps, you'll want to gain a basic
understanding of how to send/post/share directly from within your app. This recipe will show you how
to add Twitter posting (tweets) to your application.
"$%
We will be using the Quotes application, from the &

	

 recipe
found earlier in this in this chapter. Please complete that recipe before proceeding.
We will also be using the 
 ) module to complete this recipe. For a step-by-step recipe with a
full explanation of each step, please see the first part of the "
 recipe in
Chapter 11, #2
.
Quickly, here are the steps you'll need to install and configure the ) module:
1. Execute the following terminal commands:
%
	

2. Open 
( and add the following code:
2
A)AABBJ%A
3
3. Run the following terminal command:

4. Create :
(;&'&#)( and add the following
configuration:
!)-4
E1.)./
!)-)!)12
L.U.9
L.U.9
L.U.9
LL.U.
3/
With our Twitter keys, tokens, and secrets all in place, and with ) initialized, we are ready to start
tweeting!

1 M
We need to create a server method, update our UI, and give an indication that a quote has been shared.
Thanks to twit, the actual call to the Twitter API is fairly easy. Let's get started.
1. First, let's create the ) server method.
Create a file named :
(;&'&)( and add the following
4 declaration:
412
)12
3
3/
We will first do our checking to make sure that a user is logged in and that we were passed the
 argument of a valid  variable. In the ) function call, add the following lines:
1SVVS=/
'-]812L3/
1SVVSVVS/
We now need to manipulate the  and  strings, making sure it's only BM%
maximum in length. Just below the previously inserted lines, add the following string
manipulation logic:
')-.A./
1B$N2
)R-1%9B$O/
)R-.A./
32
)R-R.A##.R/
3
1)BM%2
)-)1%9B$KR../
3
After combing the quote, we are ready to send the tweet! Just below the string manipulation
logic, add the following !)
1 function and wrapped callback function:
!)
1.&
.92)39
4F'1199
2
]
12L3922)33/
3
/
)/

Our method is complete. Let's modify our UI.
2. We'll start modifying our UI by adding the share button.
Open the :
(;&& file and add the following button
just below the # button, inside the parent container element:
'-AA
'-A##
#A

&'
5

6	778996
66:77+/99
5:
&'
We want to give our button just a slight downward nudge, so add the following CSS directive at
the bottom of the :
(;&& file:
C#)2#
JM/3
We need to add a couple of additional helpers for our button, as well. Open :
(
;&&(, and add the following two helper functions to the bottom of
the !

 code block (don't forget the comma on the line before, as
usual!):
12

3=
+/')7
'
)^(
((
(1
9=
8')7
'
)^(


(((1
9
3/
All that's left is hooking up the click event. Open the :
(;&&
( file, locate the !
' declaration, and add the
following click ' handler just inside the closing bracket (don't forget the comma on the
line just before the handler!):
39
(%W(')7
'
)1
,'((=
C)1
9
3/

Save all of your changes, navigate to your app in a browser (usually

&&$%%%), click on a quote to pull up the details page, and click on the
button labeled ,,, shown in the following screenshot:
Give your server a moment or two to send the tweet. The ,,, button will turn green and the
text will change to . Your tweet will be live on Twitter, as shown in the following
screenshot:

1  M
The important code is all found in the :
(;&'&)( file, in the
4123 declaration.
We are calling !)
1, which takes a callback for its last argument. That callback is
asynchronous because ) is a Node module. Because it is asynchronous, we need a way of
preserving the current state of the environment while the call is out and we need a way of putting the
process back into the ' loop when the callback is executed (see the "

recipe in Chapter 11, #2
, for a full explanation).
We accomplish both of these items by wrapping the callback with 4F'1.
When the callback does fire, we update the ] collection, adding a 2)3
property to the corresponding quote.
This property, in turn, causes our UI to update with the green button and disallows additional tweets
(checked in the ' handler, in :
(;&&().
So, just like that, we've added social sharing. From here, you can take and expand this recipe to other
social platforms to be even more seamlessly integrated in to your applications.
.M
It is very, very important that we caution against using the preceding code in production! We stripped
out all the security and error handling. There is no validation, and the example is hard-wired for a single
server-side user. If you use this code as it is in a production app, something not so pleasant will happen,
and it won't be our fault (no blamezies allowed!).
Instead, we recommend that you flesh these elements out, particularly around allowing the use of the
logged-in user's access token rather than that of a hard-wired user.
With just a little bit of spit and polish, you can easily use this code to complement your Meteor apps and
extend the functionality to Facebook, Instagram, LinkedIn, Pinterest, and so on.

For a full write-up on what you can do with the ) module, please visit https://github.com/ttezel/twit.


â€¢ The #
 recipe in Chapter 2, &
7	
(
â€¢ The "
 recipe in Chapter 11, #2

â€¢ The &

	

 recipe in this chapter

# +++, 	
<
	


#
	
	
E+



	




 -, "$ 
Meteor is a framework that is essentially fast for the purpose of development even if you program at a
slow pace. The aim of this book is to increase your development speed and improve quality. There are
two key ingredients required to improve development: compilers and patterns. Compilers add
functionality to your coding language, while patterns increase the speed at which you solve common
programming issues.
This book will mostly cover patterns, but we'll use this chapter to quick start compilers and understand
how they relate to Meteorâ€”a vast but simple topic. The compilers that we will look at are as follows:
â€¢ CoffeeScript
â€¢ Jade
â€¢ Stylus
We will review some basic knowledge you should have about Meteor. This will cover the following:
â€¢ Templates, helpers, and events
â€¢ The event loop and the merge box
â€¢ The must-have packages
â€¢ Folder structure

CoffeeScript is a compiler for JavaScript that adds "syntactic sugar" inspired by Ruby, Python, and
Haskell; it effectively makes the writing of JavaScript easier and more readable. CoffeeScript simplifies
the syntax of functions, objects, arrays, logical statements, binding, managing scope, and much more.
All CoffeeScript files are saved with a  extension. We will cover functions, objects, logical
statements, and bindings as these are some of the most commonly used features.
(C%
CoffeeScript gets rid of curly braces (23), semicolons (/), and commas (9). This alone saves you from
repeating unnecessary strokes on the keyboard. Instead, CoffeeScript emphasizes on the proper use of
$. Tabbing will not only make your code more readable, but it will be a key factor in making the
code work as well. In fact, you are probably already tabbing the right way! Let's look at some examples:
W8G<<VV28OD;+
-



 
$&


You can download the example code files from your account at http://www.packtpub.com for all the
Packt Publishing books you have purchased. If you purchased this book elsewhere, you can visit
http://www.packtpub.com/support and register to have the files e-mailed directly to you.
Here, we are creating an object named  that contains two keys:  and .
The equivalent in JavaScript will be this:
AF4F28OD;+GK+;K+
'-2
9

3/
Much easier! As you can see, we have to  to indicate that both the  and 
properties are a part of . The ' word is not allowed in CoffeeScript because CoffeeScript
automatically applies it for you. Let's have a look at how we would make an array:
W8G<<VV28OD;+
L-:
AB&BPA
AO&PMA
A$&$JA
AK&PMA
;
AF4F28OD;+$GK+;K+
'L/
L-:AB&BPA9AO&PMA9A$&$JA9AK&PMA;/
Here, we can see that we don't need to have any commas, but we do need to have brackets to determine
that this is an array.
2$

CoffeeScript removes a lot of parenthesis (1) in logical statements and functions as well. This makes
the logic of the code much easier to understand at first glance. Let's look at an example:
W8G<<VV28OD;+
-AA'LL
AF4F28OD;+$GK+;K+
'/
1'LL2
-AA/
3

In this example, we can clearly see that CoffeeScript is easier to read and write. CoffeeScript effectively
replaces the entire 
 in any logical statement.
Operators such as WW, VV, and S-- are replaced by words to make the code more readable. Here is a list
of the operators that you will be using the most:

L

---

S--

S

WW

VV
99

99 
	9

Let's look at a slightly more complex logical statement and see how it is compiled:
W8G<<VV28OD;+
C6

AA(






	LAA
L-A
A

L-AA
AF4F28OD;+GK+;K+
1L---AA2
L-A
A/
32

L-AA/
3
Notice how the context of  is passed to the 	 symbol without the need for a period, making
	L equal to L.
	
A JavaScript function is a block of code designed to perform a particular task. JavaScript has a couple of
ways of creating functions that are simplified in CoffeeScript. They look like this:
AF4F28OD;+
&&6''
'L)-12
1A"@SA/
3
&&7
L)12
1A"@SA/
3
CoffeeScript uses # instead of the 1 keyword. The following example outputs a
L) function:
W8G<<VV28OD;+
C5
L)-#
A"@SA
AF4F28OD;+GK+;K+
'L)/
L)-12
1A"@SA/
3
Once again, we will use a tab to specify the contents of the function so that there is no need for curly
braces (23). This means that you have to make sure that you have the entire logic of the function tabbed
under its namespace.
What about our parameters? We can use 1
B9
J# where 
B and 
J are parameters. Let's make
our L) function output our name:
W8G<<VV28OD;+
L)-1#
A"C23A

AF428OD;+$GK+;K+
'L)/
L)-12
1A"AR/
3
In this example, we can see how parameters are placed inside parentheses. We are also doing $

. CoffeeScript allows the programmer to easily add logic to a string by escaping the string
with C23. Also notice that, unlike JavaScript, you do not have to return anything at the end of the
function, CoffeeScript automatically returns the output of the last command.
6$
In Meteor, we will often find ourselves using the properties of  within nested functions and
callbacks. 	$ is very useful for these types of cases and helps to avoid saving data in
additional variables. Function binding sets the value of the  object inside the function to the value
of  outside the function. Let's look at an example:
W8G<<VV28OD;+
C+.(
C-
C
C
CE)
4ALA9#

In this case, the  object will return a top-level object such as the browser window. This is not
useful at all. Let's bind  now:
W8G<<VV28OD;+
C+.(
C-
C
C
CE)
4ALA9-

The key difference is the use of - instead of the expected # to define the function. Using - will
make the callback's  object equal to the context of the executing function. The resulting compiled
script is as follows:
AF4F28OD;+
41ALA911L2

12
51L/
3/
31/
CoffeeScript will improve your coding quality and speed. Still, &

	. When you
start combining functions with nested arrays, things can get complex and difficult to read, especially
when the functions are constructed with multiple parameters. Let's look at a common query that does not
look as readable as you would expect it to be:
W8G<<VV28OD;+




:AA9AA;
9
B
#
ASA
This collection query is passing three parameters: the  object, the 
 object, and the
callback function. To differentiate between the first two objects, we had to place a comma at the same
level as the function and then, indent the second parameter. This is unwieldy, but we can use variables in
order to make the query more readable:
W8G<<VV28OD;+
-

:AA9AA;

-
B


9
9#
ASA
Go to coffeescript.org and play around with the language by clicking on the "try coffeescript" link.

L
Jade works much like CoffeeScript but it is used for HTML instead. I recommend that you install the
( package. All the Jade files are saved with a ( extension. This section will
cover the most used aspects of Jade in Meteor such as HTML tags, components, and helpers.
12$
Much like CoffeeScript, Jade is a language that depends heavily on tabbing. When you want to add
children to an HTML tag, you simply use tab. Tag IDs and classes can be added using the CSS selector
notation (.
C.). This means classes are expressed with a dot () and IDs are
expressed with a pound (C). Let's look at an example:
AFBV
'C

1#-AA5S
50*+,-$GK+;K+:
'-AA
-AA
#-AA5S&
&
&'
As you can see, 
 attributes such as # are added with parenthesis. Symbols such as ,
, and 
	 are not required anymore. In this example, we have a ' tag with an  attribute of
AA, a  tag with a  attribute of list, and a  tag with a special attribute of #
.
You will find yourself using special attributes often for the 
 tags to add ', 
,
and other attributes.


Meteor templates are Jade components. In Meteor, we define a template with the template tag and apply
the special  attribute to create a reusable HTML block. In Jade, when we create a template, we
create a component as well. This looks as follows:
AFBV

1-AA
$"@S
50*+,-$GK+;K+:

-AA

$"@S&$
&

Now we can use this template as a Jade component anywhere in our views. To call a Jade component,
you simply prepend a plus sign to the name of the template. Let's look at an example where we want to
place a  page inside a L page:
AFBV

1-AA
$"@S

1-ALA
R
50*+,-$GK+;K+:

-AA
$"@S&$
&


-ALA
2233
&

That's it! Notice that we have prepended the plus (R) sign to the name of the template to call it. This is
equivalent to using 2233 in SpaceBars (Meteor's version of Handlebars). Components can
have parameters as well, which can be later used in the templates' instance. Let's make our example
output someone's name:
AFBV

1-AA
$"2233

1-ALA
R1-A46A
W8G<<VV28OD;+
!


AA#
!
1
50*+,-$GK+;K+:

-AA
$"2233&$
&


-ALA

22-A46A33
&

Adding attributes to your templates can make your templates flexible as shown in the preceding
example. Still, it is unlikely that you will have to use this as templates "soak up" data from their parent
context.
1

Helpers in Meteor are functions that return data before rendering to the view. We use helpers for
iteration, logical statements, and variables. The two basic helpers are  and , but adding the
#
 package will add a dictionary of other useful helpers to keep your code
from repeating. Let's have a look at how we can use our helpers:
AFBV

1-ALLA



2233


2233
50*+,-$GK+;K+:

-ALLA
22C33
22C33

-AA2233&

2233

2233&

22&33
22&33
&

In this example, the  helper is iterating through the return value of another helper named 
and if the  helper resolves to , then we will render 
 with the 
variable.
It's important to understand that everything that is not an HTML tag is a helper, and that if you want to
use a helper within a tag, you need to use 2233 or C23 to express this.
Go to jade-lang.com and ( to know more specific information. With this information,
you should be able to do just about anything.

%
	
Stylus works much like CoffeeScript and Jade but it is for CSS. I recommend that you install
. This package is preinstalled with useful tools such as D and E
.
All Stylus files are saved with a  extension. There are only three things that we need to learn
about Stylus: CSS tags, variables, and functions.
$
Stylus is a language that does away with the need for semicolons (/) and curly braces (23) in exchange
for making good use of tabbing. Let's look at an example:
2+X-K2
&&+.'

'##
&& E!B


)B%%Z
B%%Z


')#



We can see in  E!B how properties are defined for a class by tabbing those properties in 

is used to select an HTML tag with the 
 class that is a child of the '##
 class. Let's look at how  E!B compiles:
Y822$GK+;K+;FO+"Y
'##2

/
)B%%Z/
B%%Z/

/
')#/
3
'##
2
/
3
Now let's add a more complex selector:
2+X-K2
&&+.'

'##

&& E!B

&& E!J
*

#
'#
 E!J has a combination of special CSS2 selectors: specific parent () and all elements (*). In this
particular order, the CSS2 selectors are picking the "any first sibling" element only and applying the
rules. Let's look at how  E!J compiles:
Y822$GK+;K+;FO+ Y
'##*2

#/
'#/
3
Let's add a new class to the current class that aligns the object to the top:
2+X-K2
&&+.'

'##
&& E!B

&& E!J

&& E!$
W)#


%
 E!$ uses an ampersand (W) to describe an element that is not a child but instead is concatenated
with the extra class. Let's look at how  E!$ compiles:
Y822$GK+;K+;FO+MY
'##)#
2

%/
3
4

Unlike CSS, Stylus supports variables. This keeps a lot of things manageable when we want to make
major changes to the look of our site. Suppose we have two colors that we want to use throughout our
site, but we know that these colors are going to change. Let's define them as variables so that we can
easily modify them later:

2+X-K2

#-C
#-C$$$$$$
#

#
#
#'
#

#
Easy right? In this example, both 
# and # are variables. Stylus
optionally supports the use of the money sign () to indicate a variable. This can make it easier to spot
variables.
	?&
Unlike CSS, Stylus supports functions too. LESS, Stylus, and % () refer to functions as
&. Functions will make your CSS concoctions much easier to share across a project. We will cover
the two types of mixins in Stylus: mixins and transparent mixins.
Mixins are functions that take a defined set of parameters. Let's take a look at how we can write a mixin:
2+X-K2
199
#)##
#
#)##
#
#)###
##

1O%%9%9#
Y822$GK+;K+Y
2
#)##O%%/
#O%%/
#)##%/
#%/
#)####/
###/
3

In this example, we first define the  mixin, and then we apply the mixin to the 
HTML tag. However, there is a much easier and effective way of doing this via a transparent mixin.
A transparent mixin, basically, takes all the parameters and saves them in an  variable
without you having to define anything. Let's have a look:
2+X-K2
1
#)#


1
$
Y822$GK+;K+Y
2
#)#
$/

$/
3
Notice how we did not have to define every single parameter in the mixin, and the  variable
simply passed all the arguments that it could find. This is especially useful for keeping the code flexible.
Stylus essentially upgrades CSS in such a way that it makes the code much easier to manage and
therefore, ends up saving us a lot of development time.
Go to stylus-lang.com and learnboost.github.io/stylus to learn more about Stylus.


3
3
Now that we are on the same page for the languages that we are going to use throughout the book, let's
do a quick review of some of the elements that we will use during our development process.
Templates, helpers, and events are used to build the frontend of your application. Using them effectively
is the key to how we design our backend as well (which we will address in Chapter 2, (
(

).


Meteor templates are the special blocks of HTML code that generate Meteor template objects
(!

). It is through Meteor template objects that we wire the HTML code
to logic. People who have worked with an MVC framework will refer to these templates as views. This
is a key concept to understand.
Open up your terminal and create a new project:

C
Now let's add our languages:

	
U
U

Remove the three visible files from &L (do not remove any of the files starting with a
dot), and create &&(. This is something that exists in one way or another in
every Meteor project. Let's program:


4<
1-A')
A-A#-9#
-B%9#-B%A
1-A

##)#

#
A-AA

RL

I highly recommend adding these metatags to make your site mobile-friendly right from the beginning.
With this snippet of code, we are effectively starting up the very first thing that Meteor is going to render
before running any code. Once this is rendered, Jade takes care of rendering L
. Let's
program this in a new file, &&L
(:


C	

1-AL
A
B"@S
Behind the scenes, Meteor is compiling our Jade templates and putting them all in one big file. You will
never have to worry about loading L
( before ( when it comes
to templating.
Throughout the book, we will use )# and )#
 to easily navigate to different templates.
$

We have already discussed what helpers are in Jade, but how do we create helpers in Meteor? Let's go
back to our L project and create &&L
. It is
important to understand that Meteor helpers are used to control the variables in our template. People
who have worked with an MVC framework can view this file as a controller. Let's write our first helper:
W
C	
!
L


AA#
A46A
Notice that the helper is defined within the 
 function of the Meteor template object:
!
L

1L
. Helpers are mostly functions
that will return anything you want them to including Meteor collection cursors. Let's bring all this
together now:

C	

1-AL
A
B"2233
This will output "46 inside the B HTML tag. Let's add a slightly more complex
helper:
W
C	
!
L


A
A#
A6A

A4A
:
2
A<A
3
2
A>A
3

;

C	

1-AL
A
)

B"22
332233


2233
In this example, we are using ) to set up the & of the HTML tags that belong to it; this
data context is equivalent to 
. Data context refers to the value of  inside a helper. So if
you set up an object as the data context,  will be equivalent to that object. Also, we iterate through
 with an  statement so that we can list out their names.
!
Meteor taps into common JavaScript HTML events such as click, change, and focus. An event is
anything that happens to an HTML element that you are listening to. Suppose we want to be able to
change the name of a person to one of the children by clicking on them. We do this through the
templates' event map. Let's take a look at an example of how we can do this without using reactivity or
collections:
W
C	
!
L
'
AA#
1ABAA"C2	3A
Easy! So to catch template events, we need to use the
!
L
'1L'L
 function. In this particular
example, we are using jQuery to replace text.
The '
 is an object where the properties specify a set of events to be handled. These events
may be specified in any of the following ways:
CE)
AA#
CE
AA#
CE8E'
A9'A#
The key  of the event is composed of two parts: the first is always a type of event (click, hover,
change, and so on) while the second is always a CSS selector.


$&
Before diving into Meteor, it is critical to understand what the event loop and the merge box are and how
they can adversely affect your code. Both are relatively complex in the way that they were programmed,
so we will focus on understanding the general concept.


The event loop is like a queue; it runs a series of functions one by one. Because functions are processed
sequentially, each function effectively blocks others from being processed until the function is done.
In other words, the event loop functions much like a single-line conveyor belt where things are being
inspected. For every inspection made, the line is stopped and nothing moves.
Meteor uses Fibers â€“ a NodeJS library â€“ to get around this issue. Many of the functions that you will run
will be on a separate fiber. What does this mean? This means that the functions will run on a separate
conveyor belt for processing. Still, not all functions are built this way, you need to make sure your
server-side functions do not block the server.
So which functions could potentially cause the server to get blocked? 41,
4
1, and  function that does not run inside a fiber on the server. Let's see how
we can unblock each one and when we should do this.
Functions defined under the 41 that you know are going to take a long time to
process, should always run on a Fiber or defer time consuming code to a Fiber. We can quickly solve
this by calling the 	1 function from within the method. Let's look at an example:
W,V+VGO,V+*GB2
4
C<+85Q=>0
L#
4!#
AA
9P%%%%
C>8>#<+85Q=>0
LL#
	1
4!#
AA
9P%%%%
In this example, when you run 41ALA, the server will be blocked.
When the server is blocked, other visitors won't be able to reach your site! Instead if you run
41ALLA, the server will continue to function properly but
consume more resources to do so.

4
1 can be easily unblocked after installing the 
package as well. This one will be particularly useful when we start to make very complex publishers that
might consume a lot of resources. Let's look at an example:
W,V+VGO;KI-D2*
C<+85Q=>0
4
AL =LA9#
"!!A
&&&
A
C>8>#<+85Q=>0
4
AL =LLA9#
	1
"!!A
&&&
A
In this example, we are waiting for an HTTP call to respond. This will certainly block the server if we
subscribe to L =L, so we use L =LL instead.
All other functions that run on the server and you know are going to block the server, should run on a
fiber. Meteor has a special function to help us make this easy. It is called 4)
 1.
Let's see how this works:
W,V+VGOK3I-G8ZVB<K38+DG3
L-4)
 #
4!#
AA
9P%%%%

It is very important to keep the event loop in mind, especially when we're connecting our web
application to external services that are going to cause massive delays to our server.
$&
The merge box is the algorithm that identifies all the changes that are happening to the database. It
basically handles publishers, subscribers, and reactivity. The merge box also handles the initial load of
data using DDP messages.
It is important to understand that we can communicate directly with the merge box via all the commands
that are available to us under the 4
1 function. The more optimal we can make our
4
 functions, the faster the site will load.

$$	

Throughout the book we will be developing an e-commerce website to help us understand the core
concepts of advanced Meteor web development. Let's begin by creating a new project:
C
	
	$
Atmospherejs.com has always been the "go to" website to find packages. Here you will find thousands
of packages produced by the community for free. There are a handful of packages that we absolutely
need to install to make our website function properly.
First, we install the languages:

	
U
U



Next, the router and functions that will help us with SEO and routing:
%
%E
%






E

	
E


0
0+0": Do not run Meteor yet! Canonical could mess up your project unless you have it set up
correctly.
We will need a couple of packages as well to help us manage publishers:
	E		


	

%

	
%
%
These next packages will extend Meteor's functions:
//	%
 



%



	


 @  	





%


We will need these packages to properly manage time:


E
For the last set, we'll be using a couple of additional packages that will make the design process much
faster:
%%
E
	

/	



	
We need to remove some packages for security too:
	



All of these packages will be explained in more detail throughout the book, but all of these are must-
haves. The first package that we need to explain is the )H package.
This package makes sure that all incoming traffic is routed to your E88!L?E+, so it is particularly
useful when you want all the traffic to go to your SSL site. The first thing that we need to do before
running Meteor is set up canonical to run only in the production environment.
Create &'&, and add this code:
W


'>87FLF>,A'
A

'E88!L?E+81AA#B
4
#

' 5Q 0FL5 >8>=5 +L7=6 <+F-
This code snippet effectively sets your  5Q 0FL5 >8>=5 +L7=6 <+F environment variable to
make sure that canonical is inactive while you are developing.
What are environment variables? These variables are defined within the scope of the deployment, and
they make sure that the project knows information before the build finishes on the server. Information
such as what database to use, which domains to use, and other setup information can usually be found in
these variables. We will cover this information in the final chapter.


		
A proper file structure is tremendously important in Meteor. We have found that the best way to work is
with functional top-level modules. This means that every folder is a micro-service, and therefore can act
on its own. This allows for a lot of modularity in the project, and it's very easy for others to understand
what it is that you are trying to accomplish. In this section, we will cover this file structure and Meteor's
special folders.
Let's look at a sample web application folder structure:
&L
&L
&
&L
&&LCE?>68>5+=F>! >76FE,FE
&L
&&
&L
&&&L')(CE?>68>5+=F>!8>+T
&L
&&&L
&L
&&&
&L
&&'
&L
&&'&L
CE?>68>6FE,FE8>+T
&L
&&'&L
In this folder structure,  is the micro-service, and it is composed of a route, view, controller, and
publisher. The files placed under a & directory will be published to the client and will only run
on the client. The files placed under a &' directory will only run and be accessible on the server.
If a file is placed in none of these directories, then the file will run on both the client and server. The
expected structure goes like this:
&
(L
&
(L&L
&&


&'&


&&&&
&&&&'&

&
(L&
&&&
&&
&&)
&
(L&
&
&&

&&
&&
&'&

&'&

It's important to note that the & directory will always run before any other code does. Let's place our
canonical file under the &L&&' directory.
Let's create our first module: the router. Create the &&&( directory, and
we will only have one layout throughout the project. Now let's code our layout:
-FXGK+AFBV

86
1-A#NA
&&# )'
1-A

##)#

#
A-AA
&&#7

1-A#A-A
-A
&&#4
1-A')
A-A#-9#
-B%9#-B%A


1-AA
R!
1
-'
R!
1
-
Here, we have introduced the !
 component. This component may be used to
render other templates dynamically by changing the value of a variable to the name of the template we
want to render. We decided to use two variablesâ€”' and â€” that are controlled by the
router. So, basically, the  variable will be changing to different strings that are equal to the
names of our templates.
We will create our  module in the next chapter to learn not only how to use the router but also
how to properly subscribe to data.

	%
We have addressed a lot of things in this chapter. We can now program faster because we have tools
such as CoffeeScript, Jade, and Stylus to help us. Also, we have learned how to use templates, helpers,
and events to work with our Meteor frontend. Understanding the event loop and the merge box has made
us a bit more precautious when it comes to running complex, time-consuming operations. Finally, we
began to build a project, and we adopted a folder structure that is going to make development quicker.
In the next chapter, we will cover two of the most important parts that make a Meteor application viable:
Meteor publishers and Meteor subscribers. With these patterns, you will be able to produce sites that
load quickly and that do not put too much strain on the server.

 5, #	
	#
This is by far the most important chapter in this book. The way we control our publishers and
subscribers is going to define how quickly our application responds in production. Publishers and
subscribers are the link between our database and the client. The server uses publishers to publish
information to the client, while the client requests information from the publishers by subscribing to
them. This is all managed via the 4
 and 4 functions. We
should be able to produce the data that the client wants to see with two objectives in mind:
â€¢ Reduce stress from the server
â€¢ Send only the information that the client needs
This chapter will teach you the different patterns that you can use to attain these objectives for every
template that you build. Here is an overview of the topics we will cover to understand these patterns:
â€¢ Template-level subscriptions
â€¢ Database relationships
â€¢ Publishing with relations
â€¢ Aggregation publishers
â€¢ External API publishers



	
This pattern attaches the 4 functions to templates. The key advantage of
subscribing from the template is the ability to isolate the template and know that it still works when it is
rendered.
Many Meteor developers attach their subscription methods to their routes. This means that the template
will only render with the correct data at that particular route.
With this pattern, we will be able to reuse templates anywhere without worrying about data.
$		

Let's start by setting up a  collection in MongoDB for our L
 project. In
Chapter 1, !



	

 we learned that we need to place this definition under the
&&& directory:
W

	
	

	-)45A
A
C
C
C

C

It's important to note that we are adding 	 at the beginning of the  variable. This compiles
into . In CoffeeScript for Meteor, we do this to define a globally scoped variable.
This means that the  variable now exists in every CoffeeScript file that we will create.
We need to add a permission file as well so that we can modify the collection from the console. The
)/ functions are rules that add a layer of security to the collections. If an ) rule returns
 for a given action, it will allow the change to pass. For now, we are going to set all the rules to
allow everything. We will address permissions when we look at roles in Chapter 4, #
(

.
W
W
	

	
C	



4
#
)
#

#
'#
We use the 4
 function to make sure that we have set up  as a collection
before we set the )/ rules. Now that we have a collection, let's make the landing page to
show us a list of products. Let's build the  first in the &
& directory:
	
	


1-A
A
$#

This view is just a placeholder. We always need to create the template object before we can actually
begin working with the publishers and subscribers.
6	
$	

Let's construct a simple publisher for our view using the 4
 function. This publisher
will send only 10 documents to the subscribed clients. We'll discuss pagination in Chapter 4, #

(

.
W	

	
C	
4
A
L
A9#
239
B%
	$	

This is where the magic begins. We are going to use the !

5
function to subscribe to our publisher. The 5 function runs whenever an instance of the
template is created in the DOM. So, if we place a 4 function within this function,
this will automatically resubscribe whenever the template is used. Let's give it a shot:

W	
	

!

5#
	-
	A
L
A
The  function is, basically, a special version of the ! function.
What does this do? This is meant to rerun whenever its dependencies change. The difference with this
special function is that it will automatically stop subscriptions. You'll notice that we are binding
 to the context by using -, so we can use the special  function
within the  block. As expected, the  functions exactly as
4 does. However, it plays a key part in automatically stopping subscriptions as
well.
Wait! There's more. This snippet of code can be overwritten by other 5 hooks. This means
that if we were to define a second 5 function, the first function will not run. We change this
behavior using the 
# package. This package, basically, concatenates
5, E, and 7 functions so that they cannot be overwritten. Let's
take a look:
W	
	

!
A
A9#
	-
	A
L
A
We only need to change the first line of the code. This is done so that we can attach multiple functions to
the 5 template hook without overwriting any other functions.



Our collections will always be related in one way or another to other collections in our database. This
topic is going to examine the three different types of relationships you should be thinking about when
you are designing your database.
The shape that our database will take ultimately defines what our publishers are going to look like. If
your data is all mashed up in just one or two different collections, you will very quickly find yourself
struggling to filter data. If your data is spread too far between collections, the code will become difficult
to maintain in the long run. So what is the solution to this problem?
The solution to database relationships is to understand how the data is going to be used in the client, how
often it is going to be modified, and how large the set can be.
Let's build out the rest of our collections to get a notion of what good relationships look like.
(
A one to one database relationship describes how one MongoDB document in a collection will be linked
to only one other MongoDB document in another collection. You can think of this as a JavaScript object
inside another object.
In Meteor, you should create a one to one relationship for a subset of fields that you will use sparingly,
that will have unique interfaces, or that you will use without necessarily requiring access to the product.
With this relationship, it is going to be very easy to build an image uploader and a collage of images
showing only L.
Start by adding a collection that will handle our products' images: =. We are going to
assume that our frontend is going to have multiple types of images, each one being presented in a
different part of the interface that we are building:
W
	C
	C
C
	=-)45A
LA
C
C

CL
CL
CL
C
L
CL
W

W	C

	C
C	



4
#
=)

#

#
'#
The = collection is going to contain a field named 
. This field establishes
our relationship by saving the unique L field from the  collection. This means that every
time we want to publish a product with =, we need to query the database as well by
searching for L within =. So a helper would look like this:
W8G<<VV28OD;+
!


AA#
=8
	L
(%
A one to many database relationship describes how one MongoDB document in one collection will be
linked to many MongoDB documents in another collection. You can think of this as an array of
JavaScript objects that exists under a particular field but the data is so complex that you need to separate
it.
Now let's create an 8 collection. This collection is going to function as a cart. While your first
instinct may be to create a 5 collection, you will quickly find that you are duplicating the order
information (one for the cart and one for the order, once it is placed). We can easily identify whether an
order is new or not by adding a  field:
W

W

C
	8-)45AA
C
C1A)A9A
A9A
A
CL

C
C
C
C
C
C
C
C
CL
Let's not forget to add permissions for the collection as well. We need to do this every time we create a
new collection to secure the collection from hackers and ensure that the client can modify the collection
accordingly. We will cover more on this in the 
 section of Chapter 4, #
(

.

W

W


C	



4
#
8)
#

#
'#
Something is wrong with this, the products are not defined in the collection! We intentionally created an
order summary collection that is going to have a one to many relationship with order details. We do not
know how extensive the order actually might be. If we include a field that holds an array of products,
this list will not only be difficult to manage, but also could potentially become large enough that it will
crash the database.
Let's put the details of our order in a separate collection called 87:
W

WC
C
C
	87-)45ALA
C
C
C

C

C
C
C
C
C
C
C
C
C
W

WC

C
C	



4
#
87)
#

#
'#
Perfect! Now we can say one 8 has many 87. In this scenario, each document in
the 87 collection represents a single product and the details about that product within the
order. We have added the  field to identify to which specific order the details (or in this case, the
products) belong to.

This is excellent design. By separating the details from the order, we are capable of controlling exactly
which data the server sends down to the client. Remember, the goal here is to send the least amount of
data possible to the client so that the site loads quickly and stress on the server is reduced. Managing
inserts and updates as well becomes easier. As we do not need to deal with indexing a details array, we
can simply use IDs to find and manipulate data. Now when the shop admin subscribes to the 8
collection, we can do this in such a way that the server only sends the data the admin needs to see the
orders. Clicking on an order would then lead to subscribing to only that orders' details.
%%
A many to many database relationship describes how many MongoDB documents in one collection will
be linked to many MongoDB documents in another collection. You can think of this as a table where
you repeat information and only change the information of one field for every row so that you can filter
the information by that row.
These types of relationships require a $
. In the case of MongoDB, a mapping table is a
separate collection. A mapping table is the part that repeats information in every row without actually
duplicating entries; it simply makes pairs between each collection ID.
In the example that we are going to program, we want to create a many to many relationship between
products and tags because a product can have many tags and a tag can have many products. The
mapping table in this case is going to save each ID pair. So if a product has two tags, there will be two
entries in the mapping table with the same product ID but each with a different tag ID. If a tag is a part
of two products, then the mapping table will have two entries with the same tag ID but each one with a
different product ID.
It's important to note that these types of relationships are often overlooked because of their complexity.
If for some reason you find yourself trying to match two collections with arrays from each collection,
you are definitely attempting a "many to many" relationship.
To explain this relationship, we are going to create a ! collection for our products:
W

W

C
	!-)45AA
C
C
W

W


C	



4
#
!)
#

#
'#

You will notice that in this type of relationship the ! collection has nothing to associate to a product,
but if it did, it would have to be an array of products to which the tag belongs to. To establish the
relationship, we will create the mapping table, that is, the ! collection:
W

W	
C
	
C
C
	!-)45A
LA
C
C

C
W

W

	
C
C	



4
#
!)
#

#
'#
This collection allows us to have any combination of relations between  and !. Suppose
we want to see all the products related to one tag. In this case, we will first query the mapping table for
that tag and then query the tags using the result.
Beware! Many to many relationships can be difficult to spot. If you are stuck at any point during your
database design process, do not forget to consider this possibility.

#	
$ 

We understand how our collections are related, but how can we make it easy to publish data with these
relationships?
In Meteor, it can be problematic to publish relationships because of reactivity and the way publishers
work. You would expect that by simply making two queries to two related collections and returning an
array will publish a perfectly reactive collection. This is not the case. A 4
 function
does not rerun when dependencies change. This means that if a relationship is broken, the related
document will remain published, or worse if a new relationship is made by another client, the related
data will not publish.
To take care of database relationships and reactivity in Meteor, we use the 
H

#
)# package. This package automatically takes care of subscribing to new data in the
most efficient way possible when relationships are broken. If you are familiar with MySQL, this
package makes JOINs a breeze.
#	
$	 $AB
We will be working with the &
 directory, this module will be our landing page. First, let's set
up a route for our view:
W	
	
C
G)EA&A9
A
A
#
G)+AA9
A
A
We are using the G)E function to define the path of our landing page and the
G)+ function to define which layout template to use. You will notice that the
G)+ function is taking in two parameters: the first one defines which layout
template to render, and the second one defines where to render within that layout template.
Now we can work on the publisher. The goal is to publish 10 products paired with only their
L:
W	

	
C	
4
A
A9#
	



B%


:
2
A
A

=
3
;
	1
Notice the 

 key of the object that we are passing through the 	 function. All the
objects inside the array must have at least a  key. Optionally, they can take  and
L. In this case, we use  to express that the L field in the  collection is
equal to the string of the 
 field in the = collection. This is the most efficient
way to publish data. The package will automatically make sure that all changes to the collections are
reflected in real time.
The 4
 function has one peculiarity: when data changes, the cursor will react
accordingly, but the function holding the cursor will not. The impact of this is obvious when it comes to
creating relationships. Let's look at what our code would look like without using a package to handle our
relationships:
WBG3G+8GBV+*D2D3+GXGKO;OGAV8+

L-239B%
C4
)L

-
L
1
#

L
CG
L-=




CE
:
L9L;
In this case, suppose that for some reason the order of the  collection changes. This will
make 
L change reactively as you would expect on the client, but because there were
no changes to the = collection and 4
 does not rerun when there is a
change in one of its dependencies, the images of the newly published products will not be published
reactively!
#	
$ 
A%B
Now we will work on our 8 and 87 collections. Let's set up our template, route,
and subscriber for the function that creates orders. We can name this module as  and store it under
the  directory:
W


1-AA

$#
W

!
AA9#
	-
-6AA
	AA9

Notice that the  variable is going to get our order L by using the 6 variables. We do
this because the 6 variables are reactive; if for some reason the value changes, this makes sure
that the subscriber reruns. The subscriber reruns because the variable is defined within the 	
function.
Also, we are passing an object as an argument to the 	 function so that the publisher knows
what order we are talking about:
W
C
G)EA&A9
AA
#
G)+AA9
AA
We need to publish three different collections to have all the information that our cart needs: 8,
87, and . This publisher can follow the same logic that we found in the first
publisher:
W

C	
4
AA91
-23#

LF


	
8

L

A)A


:
2
AA
87


JO


:
2
LA
A

3

;
3
;
	1
This publisher is predefining defaults for the function by passing 
-23 within the parameters
(another useful shortcut that CoffeeScript provides). After making sure that 
 exists and is
not a blank string, we establish our relationships. We need to make sure that the status of 8 has the
A)A value for security, so we hardcode it in the  key.
Notice that in this case, we are making use of L. This indicates that the 87
collection has a 
 field that contains a string equal to the L field of the 
collection.
For now, we are going to limit 87 to JO.
#	
$$ 	A%%B
We definitely want to be able to filter our products via tags. We can follow the same pattern from the
previous topic. Let's modify our 
 module.
First, our subscriber needs to reactively change to an array of tags _ids. We can use a 6 variable
for now to set an array of tag _ids so that we can easily modify this directly from the console:
W	
	

!
A
A9#
	-
CL
-6A
A
-23
LF

L9

	A
A9
We use underscore's L function to make sure that the  variable has a  key, if
 exist. Now our publisher is going to get a bit more complex:
W	

	
C	
4
A
A91
-23#
-B%

LF


	

!

L




:
2
!
AA


:
2

LA
A





:
2
=
A
A
3
;
3
;
3
;

	






:
2
A
A
=
3
;
	1
While the code may seem long, the logic is easy to understand. First, we filtered our ! collection by
using the  array that we had defined in our subscriber. Then we chained the relations using a
combination of  and L. The function that the mapping table (!)
serves is clear in this scenario.

E%3$%33

The core concepts to understand from the 
H

#)# package are
simply the options provided within the 	 function.
Both  and L default to the L field. The  always makes reference to a field
within the collection while the L always makes reference to a field of the parent
collection.
The 
 and  options are equivalent to the second and first arguments (respectively) of a
Meteor - MongoDB query: 19
.
There are many packages that work similar to 
H

#)#, and we are
not exploring them in this book, but they are certainly worth keeping an eye on: )
#

, 
H
'#
, and H
#. I have
found the last package to be the best of the bunch because it is simple to use and forces the developer to
create smarter database relationships.

$$$	

Sometimes our database has a considerable amount of information that we want to synthesize. Some
developers choose to publish all the information to the client and have the client synthesize it. This, as
we have learned so far, can have a negative impact on performance. Other developers might use
4 to return the synthesized data. This is definitely better for the client, but it will take a
toll on our server if the computation is large.
The best way to handle a problem like this is to use MongoDB's aggregation framework to take the hard
work of the calculation to our database, and then we can pair the results with the 4

special functions: 	, 	, and 	'.
$$$ 
MongoDB's aggregation framework uses the concept of a pipeline to process data. A pipeline is,
basically, a series of steps that Mongo is going to follow to produce the data you need.
We have installed support for the aggregation framework by adding .
This gives us access to all of the framework's server-side commands. The most common commands that
you will end up using are , 
, and 
(.
Let's build a publisher for our  module and start by building the template:
W



1-AA
$#
C&&&
!
AA9#
	-
	AA
W

C
G)EA&A9
AA
#
G)+AA9
AA
Now we need to build a collection that exists only on the client. Our server will communicate with this
collection manually. We specifically place this collection on the client side because we do not want the
server to record data onto the database. We can append the collection to the (&&&
) client controller file:
W


	L-)45ALA

!
AA9#
	-
	AA
As this collection is client-side, we have differentiated it with an underscore at the beginning of the
name. This, of course, is not required, but it helps prevent duplicate collection names.
Our goal is to publish the sum of the total and subtotal for the A
A orders. The steps for our
pipeline are simple:
1. Filter the collection to show orders with status equal to A
A.
2. Sum the totals of every filtered order:
C&&'&L

4
AA9#
-8:
2

A
A
3
2


L

AA

AA

AA
3
;

To use the aggregation framework, you use the  function that is attached to the collection
object; 8, in this case. This function only takes an array as a parameterâ€”this is because the array
is the ordered set of steps that the framework is going to follow. Each step is represented by an object
within the array and always begins with an operator.
Here we have decided to use  to filter the orders to find the pending orders, and then we have
used 
 to accumulate the values of  and . Notice that the 
 expression
has a mandatory L key. This key defines how we want to group the collection. By setting the L key
to , we are stating that we want all the documents in the collection grouped into one single object.

 is an accumulator operator. When you use an operator like this, you can access a document
property by using the money sign () followed by the name of the field within a string. Also, you can
access objects within objects using the dot notation (AA).
The result of  is an array containing a single object with the keys: , , and
.
#	
$	

Publishing the results is much easier than it seems. We only need to use the 	 function that is
bound to 4
. The 	 function, basically, informs the subscriber that data has
been added to the published set:
W


C	
4
AA9#
-8:
2

A
A
3
2


L

AA

AA

AA
3
;
%:%;
	ALA9AA9:%;
The last two lines make sure that the  array exists, and if it does not, then we publish the first
object within the array to our L collection. The 	 function has three required
parameters. The first parameter is the name of the collection, the second is the L of the document, and
the third is the document.
Notice that these kinds of publishers are not reactive, which means that we do not need to add a
	 or 	' function. We can take this a step further though. Instead of creating a
collection for every module that needs an aggregation publisher, we can create one master collection that
manages all our aggregation publishers.
First, we remove our L collection and create a new   collection:

W


!
AA9#
	-
	AA
W


	 -)45AA
Now, we need to modify our publisher:
W


C	
4
AA9#
-8:
2

A
A
3
2


L

AA

AA

AA
3
;
%:%;
	AA9AA9:%;
With this, we can now access our values by calling the following function on our client-side console:
 8AA
It's important to understand that as soon as we leave the route, the subscriber will be stopped and the
 collection will be cleared. This default behavior gives this collection a lot of flexibility.
Why is using the aggregation framework with a publisher more effective than with 4?
The Meteor methods are designed to trigger critical functions within our server and respond with a
simple message. On the other hand, publishers are designed to control data sets. You will very quickly
find that publishers are easier to control and optimize than methods.

!&
#+	

These types of publishers should be avoided. They are great to get raw data from external services such
as  or /	, but they tend to be little bit slower because this involves actively communicating
with another server. When we are integrating with other servers, we should always build a separate
synchronization server. We will talk about APIs in another chapter.
Still, this publishing pattern can be useful in edge cases, so it is important to know that this option exists.
1#$
HTTP is a protocol for collaborative systems; it is the protocol that allows users to connect to web
pages. The HTTP protocol can be used to access data from other servers from our own server.
We are going to use Meteor's integrated HTTP E module to communicate with Stripe's servers.
We chose to integrate with Stripe because it is a payment processor that is easy to integrate and more
reliable than most other payment processors in the market. We have added this package when we ran

. This module has all the functions that you would expect: , 
, 
,
and . For this topic, we are only going to cover the  function.
Our goal is to get data from Stripe. Start by creating a free account in Stripe. After you have created
your account, go to your dashboard and set it to AA.
Now create a payment by clicking on T#%. Use the following data for the payment:
â€¢ 	: B%
â€¢ 0	: MJMJMJMJMJMJMJMJ
In our test environment, we do not need to add CVC, and Stripe automatically sets the expiration date to
a year from today.
Click on 	$ and copy your test secret key. We are going to use this to authorize our
request.
We can start by creating a new publisher under &L
; we are only going to get
the last three chargesâ€”we will modify this later:
W


C	
4
AA9#

4
ALA9#
	1
"!!A
&&

&'B&[-$A9

A HAA<!F6!6F5EF!QFTA

19-

L91
-
	AA9
AC2413A9



The 	 function that we are using here has been made available via the
 package. It works the same way as the 	 function does in
4; this makes sure that the publisher does not block the server while it is waiting for
information from Stripe to arrive. Unblocking the aggregation publishers is crucial! If we do not unblock
the publisher, then we risk the client becoming unresponsive when the user navigates away from the
page.
You might be asking yourself: can't we just make the HTTP request on the client and not worry about
blocking the server? No, we cannot. If you were to run this function on the client, you would have to
expose your secret key, and this is a major security flaw.
The "!! function has three important fields: the URL, the 
 object, and the callback
function. The URL is the address that Stripe provides in their API documentationâ€”in this case, we have
used the & URL and passed a parameter  to get the last three sales. The options object
is used to pass all the information that the request needs. In this case, we will use the  key to
set our  H header. There are several keys that the options object can take; you can find
these at docs.meteor.com. Our callback function receives the result from the request. As with most
functions in Meteor, it returns two arguments; the first one is an error object that is undefined if there is
no error, while the second one is the actual result.
In this case, the data that we are looking for is contained within  as an array. We
can then easily publish the data with our 	 function. Notice that we are binding both the callback
and the L function, so we can have access to 	.
Let's subscribe to our new publisher to see our data:
W


!
AA9#
	-
	AA
	ALA
Try running  11 in your console to see the results.

	%
In this chapter, we learned how to isolate subscribers from templates using template hooks. Also, we
learned how to optimize the structure of our database depending on how we are going to use it. When it
comes to publishers, we learned how to return every possible data structure without breaking reactivity.
We covered aggregation publishers and learned how to synthesize data before we publish it, without
hurting the performance of the server.
In the next chapter, we will cover a handful of frontend techniques that will help us to keep our code
flexible and our frontend looking great.

 <, #
This chapter will cover a useful set of patterns that will speed up your frontend workflow. Meteor makes
it easy to build rich frontend experiences, but we have to be careful with the number of computations
our interface requires to function. Too many computations will slow down mobile devices. In this
chapter, we are going to learn how to keep our computations short, DOM simple, and animations
effective. You will learn the following topics:
â€¢ Responsive design
â€¢ Super helpers
â€¢ Variable types
â€¢ Quick forms
â€¢ Loading
â€¢ Animations
â€¢ Search engine optimization
$
An application is always judged by how it looks. Now that we know how to make it perform, we need to
learn how to make it look good. Nowadays, it is common practice to build the frontend while keeping
the following two things in mind:
â€¢ 
: This style of design makes your site concise by exposing only the necessary
elements to have the site functioning. Less is more.
â€¢ : This style of programming makes your site usable everywhere, no matter how big
the screen is. The HTML markup will always adapt depending on the width of the screen.
Here, we are only going to cover how to program a responsive frontend because minimalism is a vast
and highly debatable topic.
"
$
The first layer of customization begins with the H#
#
 package that we have already installed. Follow these steps to set this up:
Create the following directory:
&L&&
&
(.
(Leave the JSON file empty.)
Run the Meteor project using this:

You will notice three new files have been added. These files will compile at runtime to produce your
version of Twitter Bootstrap.

Open &L&&
&
(, and make sure that all
variables are set to :
76C66C

	

	
69=
2
AA2
A'A9
AA9
AHA9
A
A9
A
A9
AA9
AA9
A
A9
AA9
AA9
AA9
AA9
AA9
A
#A9
A
)A9
A#
A9
A
#
A9
A'A9
A'A9
AA9
A
A9
A
A9
AA9
AA9
A(A9
AA9
AA9
A
#A9
AA9
A#
A9
A
A9
A
'#A9
A)A9
AA9
AA9
A
A9
A

'A9

AA9
A
'#A
3
3
By setting all the variables to , we are reeling in all the functionality that 
 has. If
there is anything you do not want to use from the framework, you can deactivate it by setting it to
 in this file.
You will need to manually restart Meteor for these changes to take effect. So press &
 + & on your
terminal to stop Meteor and run the  command again.
Now we can edit 
. Start by opening the &L&&
&


 directory. Here, you are going to find a library of the Stylus
variables that we can play with.
Let's remove rounded corners and modify button border colors:
C

	

		


&&+CBBM
##[-%

##[-%

##[-%


&&+CBOP
##[-C$$$
##[-C
##[-##
#
#[-C
#
#[-#

#
#[-#
#
##[-C
##[-#
##[-##
##[-C
##[-#
##[-##
#)#[-C

#)#[-#)
#)#[-#)#
##[-C
##[-#
##[-##
What if we need to use bootstrap mixins and variables for custom style sheets? We can use the
	
 command whenever we need to gain access to everything:
	
AL&
&&

A
Let's customize our products page by adding a large promoter. Rewrite the products template with a new
C
 header:
	
	


1-A
A
'C


C

$T<
Before we write our product styles, let's create a global style sheet for any application-wide styling at
&L&&. Here, we are going to make sure that our initial views are set
correctly so that we may properly make use of relative units:
C


99CLL)#9CLL)#

99

B%%Z
With this set of rules, we are basically making sure that everything has the height of the viewport
including our first 
 DOM element. This technique allows us to have relative percentage
heights work as expected.
We also need to set the root DOM element for BlazeLayout. Let's do this in a client/server configuration
file:
C&L&&
45
<H+E..
Now, create the directory for the 
 styles: &
&&
. We
will start by importing our variables into the file and setting some simple rules to make the promoter
look good:

	
	


	
AL&
&

A
C

C

#

N%Z
Great, this sets up our 
 section for any promotional images that we may want to add, and the
site looks decent (but not good enough yet) on mobile.
6
Bootstrap is a library of CSS rules that makes development of simple layouts quick, thanks to the library
of classes that it includes.
Let's extend our products template to upgrade our C
 header and add a C section.
We will use bootstrap to manage the grid in this case:
	
	


1-A
A
'C


C

'
')
'##BJ
$T<
C
'
')
'##BJ##M
$#

##
###J#

##'##B
O#JM"6


'##BJ##M
$#

##
###J#

##'##B
O#>77'
'##BJ##M

$#

##
###J#

##'##B
O#4<)0
We are doing quite a few things here but nothing complex. First, we wrapped the contents of our
C
 header in bootstraps' grid. Bootstrap grids work only as advertised when they are under a
) class. The  class controls our page-wide breakpoints.
Bootstrap columns are set using the # class prefix followed by the target screen size, then an
optional offset indicator, and finally, the number of columns that the element will span or offset:
'#H#
#


6 (
##* <768px
###*
##* =768px
###*
##* =992px
###*
##* =1200px
###*
Bootstrap has a total of 12 columns (this can be modified in our ' file); each column
supports offsetting and nesting too. Remember, the smallest screen size will override all other screen
sizes if the other screen sizes are not defined. So, if you want three columns of every size, you will only
need to define it for the smallest size screen. In this example, we are separating our C section
into three columns of every size above 768 px and treating this as a single column in anything below
768 px.
If at any point you need to nest bootstrap columns, then you will need to place these new columns under
a ) class. The following example centers a six-column long ' inside another six-column long
':
')
'##P
'##P
')
'##P###$

We are using Font Awesome to create some icons for our C section as well. Here, we are
using one of the Font Awesome's lesser known $ feature. To use this feature, you only need
to wrap a set of Font Awesome icons with a 
# element.
Font Awesome has a list of about 500 icons. If you want to use a different set of icons, feel free to check
out the list of icons online at http://fortawesome.github.io/Font-Awesome/icons.
Now let's add a little bit of Jeet and Rupture to our frontend.
L$% 		
The version of Stylus that we have installed () comes packaged with a lot of
useful mixins, the most notable ones being L and 		. Jeet is a grid system that is superior to
Twitter Bootstrap because it is more flexible, and Rupture is a set of functions that simplifies media
queries. Knowing how to leverage both Jeet and Twitter Bootstrap will increase the quality of your
frontend designs.
Let's patch up our C
 header to make our page more user friendly for users that are in
landscape mode on smaller devices:
	
	


	
AL&&
&

A
	
A(A&& (
C

C

#

N%Z
R)1##&&=)#
R
1&& '

$%Z
R
1&& '

1B&$
B%%Z
C
R)1##&&=)#
R
1&& '

1J&$
B%%Z

)B%%Z&&8'


Rupture adds several mixins to easily control the 	 queries: ), ', ),

, 
 and many more. You will find yourself using ), 
, and

 more often than the rest. To use these mixins in Stylus, we simply prefix a plus sign (R)
before the command.
In this example, we are using R)1## to define the CSS rules for all the
devices whose widths are below bootstrap's # breakpoint. Then we will use R
1 and
R
1 to define CSS rules for portrait and landscape modes.
Next, we will use Jeet to control master columns using the 1 mixin. This mixin takes in a fraction
that defines the width of the element as a fraction. Consider the numerator as the number of columns
that you want the element to take up and the denominator as the total number of columns:
1)&
In this example, when we switch to landscape mode on a small device, our C
 header is one
column wide out of three, while our C section is two columns wide out of three.

	

In Meteor, you will quickly find yourself repeating helpers among templates for simple things such as
formatting. We can prevent repetition by creating a global dictionary of functionsâ€”this is what we call a
super helper. To do this, we are going to tap into Meteor's rendering engineâ€”Blaze.
It is important to understand that Blaze is deeply integrated with Spacebars, and Spacebars is Meteor's
updated version of HandlebarsJS. HandlebarsJS is a JavaScript templating engine that enables the use of
helpers and components on the frontend using 2233. This legacy means that Spacebars has a lot of the
HandlebarsJS functionality. So, much of the documentation found in HandlebarsJS applies to Meteor
helpers as well.
$6
7

Meteor exposes the !
"
 function to create global helpers. Let's create
something to help us format money:
WC


!
"
ALA91'#
L>'
AC21'&B%%G1J3A
As you can see, the syntax for a global helper is exactly the same as it would be for a template helper.
Now, we can use this helper in any template. Let's create a product template under our &

directory for our 
 template and try it out here:
	
	

1-A
A
'##BJ##M##$
C

O2233
'


22L
33
We will need to patch our products template as well:
	
	


1-A
A
'C


C


C



CL

'
')


R

Let's add some temporary entries to our products collection. We will use these entries throughout the rest
of the chapter:
;
,86	
6
46'
11%

A>5A

B%II

AB
6A

III

AD>A

NII
W	
	

!
A
A9#

!




#
1
Note that in this data schema we are defining 
 in cents. This is a common practice when dealing
with money in JavaScript to avoid arithmetic floating point issues. What does this mean? Go to your
web browser's console, and run the following operation: %BR%J. Oddly enough, JavaScript does
not respond with %$; it responds with %$%%%%%%%%%%%M instead. The reason for this is JavaScript's
internal 64-bit floating point representation of decimal numbers. This means that JavaScript does not
fully understand what a decimal number is. This is why, we do not use decimal numbers when we deal
with money, we just use the smallest available denomination.

$$

%
Wait, we can still make this formatter more widely available in our application. Let's turn this into a
dictionary and share it with our controllers. In other words, we want to be able to use a helper such as
2233 and use this in our CoffeeScript in the form of 
 as well:
WC


	-
1'#
L>'
AC21'&B%%G1J3A
!
"
AA9#

First, we create an object that holds our definitions, and we make it global using 	 (which is equal to
). Then we place this object of definitions inside a global helper. Simple! Now we know how to
build a super helper that we can use anywhere. To test this, type 1B%II in your
browser's console; this should return ;U-K,II;.

4
%
There are four types of variables that we need to understand to optimize our frontend workflow: ,
, 
, and 4. With these variables, we can build dynamic sites easily based
on how the user is interacting with the view.
The session variables are variables that exist only during a session. A session begins whenever a user
hits the site. These variables can be shared across routes and are reactive.
The persistent variables are variables that are stored in local storage so that they can be read even after
the session closes.
The file scoped variables are variables that only exist within the scope of the file. These are generally
not reactive.
The ReactiveVar variables can be scoped to the file or globally and are reactive. These variables do not
persist the way session variables do.


Some Meteor developers believe that session variables are overused. This is definitely true, if you are
not managing them. For the most part, session variables should be used to handle data that is shared
across multiple routes in your application, have no place in your database, need reactivity, and persist
through a hot code reload.
If you stop and think about it, not many things require all of these attributes. At first, you may rely on
them heavily to control your frontend, but as your frontend becomes more minimal, you will realize
there is no need for them.
Still, if you are going to use them, you should follow two rules to maintain them, as shown here:
â€¢ Template-based taxonomy
â€¢ Clear them if you are not going to use them
The taxonomy of session variables should always follow the 
' pattern to
keep them from polluting each other. Suppose we want to control a global alert using session variables,
the session variable would look like this:
6A
A9
Once our user leaves the view, we should clear the session variable. The  function is added by the
JPJJ
# package that we installed in Chapter 1, !



	

:
W86	
66	
6	


!
A
A9#
6A
A

W8
6	
6	


!
A
A9#
61

Do not use session variables along with Meteor methods to obtain server data. While the method works,
it makes your data vulnerable and easy to modify on the client.
Also, try to stay away from using session variables that are composed of complex objects with multiple
keys or arrays. You will quickly find yourself using lesser lookup tools such as L and
L@ to use the data.
#

Persistent variables are session variables that persist through a session. In Meteor, a common session
variable will reset if the user refreshes the page. Persistent variables leverage AmplifyJS, which in turn
uses HTML5 local storage and fallbacks to store the variable inside the user's browser. These types of
variables exist because of the JPJJ
# package.
We can use this variable to keep track of our users' orders, in case they leave the site and are not logged
in. So, if the user opens up an order and fills it with items, they can come back to it later without making
a user account on our site.
Let's create an ## button that will leverage the persistent variables:
W	
	
!

'
A##A1'#
WN



L-6AA
-88L
WD
G
(/


L-8
A)A
L
%
%
%

L-L
W2



6AA9L

W<
-88L
W8%

	
-878

	L
L

WD

/

87
L9

B
8
L9

L
B
	

	


WD

/

87
B

	L
L
8
L9

L
B
	

	

We will need to build a publisher for this to work, but we have to make a choice. As we have both

 and 
 template, each one could subscribe to a publisher and pull in the same data.
Should we subscribe from the 
 or the 
 template? Let's do both! Extending the
products publisher will ensure that we get all the data that the template needs while the attached
publisher will help us manage our "product details" page and promos when we need it to:
W	

	
C	
4
A
A91
-23#


LF


	
8


L

A)A


:
2
87
AA
3
;
Then we wire up our subscriber with the order key on the client side:
W	
	

!
A
A9#
	-

-6AA
LF

L9

	A
A9
With this, now we can add products to an order, refresh the site, and still come back to our order. Let's
finish building the publisher for the 
 template:
W	

	C	
4
A
A91
-23#


LF



	



L




:
2
A
A
=
3
2
!
A
A


:
2
!
LAA

3
;
3
;

LF


	
8

L

A)A


:
2
87
AA





3
;
	1
Notice that our product is bringing in only the data that is pertinent to that product and for that order.
Now we can program our subscriber:
W	
	
!
A
A9#
	-
-23
C0
=7

-	L
L9



C0
-6AA
LF

L9

	A
A9





These are the types of variables you will want to use most of the time. What are they? They are regular
variables! This means that they are not reactive, so watch out. Regular variables are scoped for the file
only, so you do not need to worry about interfering with the variables that are named the same in other
files.
These variables are useful for things such as lists that you know will not change and that you will not
need anywhere else in the application. To use one, simply type out a variable outside your Meteor-
specific functions.
4

The ReactiveVar variables are reactive variables that are not available to the console in the way that
session variables are. This makes them great for things that are reactive and that we want to keep
relatively difficult to access for the user from the console.
If at any point you are creating a highly reactive interface, you should fill it up with these variables so
that you do not have to worry about managing them. These variables cleared automatically if there is a
hot code reload or a page refresh.
To create a reactive variable, you simply define a variable with its constructor:
'L'-)E',1
##'
This variable will expose setter and getter functions. This means that you use the  command to see
the value of the variable and the  command to change it:
C0''
'L'1
C6''
'L'AA
Let's use the ReactiveVar variables to create a rich number input interface for our quantity field. We will
start by defining a route name as L with a 
 parameter:
W
C
G)EA&A9

G)EA&&
&A9
ALA
#
G)+AA9
ALA

We can wire up our product with a new button that will take us to the modify quantity view and passes
to our product ID:
W	
	
!
A
A9#

!

'
A##A1'#

A#A#
G)EALA9

	L
	
	

1-A
A
'##BJ##M##$
C

O2233
'


22
33
####
 5
###]
Now we need to design a responsive number pad. First, let's add a global '# class to
our &L&& directory so that we can easily align things vertically:
C


'#

'
T1#O%Z

O%Z
We will use Jeet to control this design since it requires more specific control of our DOM elements. Let's
start by creating the layout of the page in our L template:

CU

1-ALA
'CL


C
B#'#2233
C#


'
J#'#2233
'

#'#
##J
'##

#'#
##J
Notice that we are using the '# class on the element that we want to align vertically.
We are going to make each of these elements a large button. Also, we will create a  helper to
write out our numbers to the number pad, and the  helper will be our reactive variable. Let's have
a look at our styles before we create our helpers:

CU

	
AL&&
&

A
	
A(A&& (
CL
')
#

)
C
O%Z
B
%
C#

O%Z
99##


JOZ
1B&$9%9$
J9
%
In this example, we have passed the parameters to Jeet:  and . Gutter makes sure that
there are no margins, while cycle makes sure that the elements can only make rows with a maximum of

3 elements per row. We have made each section take up exactly 50 percent of the height of the screen
but ensured that scrolling wouldn't happen by setting ') to hidden. Knowing that we are
always going to have four rows of numbers, we set our height for each number to 25 percent.
Now let's put our E', variable knowledge to work. First, we set up our variable and attach it
to the template instance using this:
W
CU
WF

W


!
ALA9#
	-)E',1
Let's build the  helper and the helper that will render our () reactive variable:
W
CU

!
L

W8

	
AA#
L
:B9J9$9M9O9P9K9N9I9%;91'9#
6'
WN
W
	
AA#
!
11
We need to handle the events to update our E', variable:
W
CU

!
L'
W8
%%%	
AA1'9#
-1

)L-AC23C2	3A

)L-AC2	3A

)L
WO


AA1'9#
-1

%9#B
A##A1'9#
WN



L-6AA
-88L
WN
-1



->
WN	DB

-8G)E1


WD
G
(/


L-8
A)A
L
%
%
%

L-L
W2



6AA9L
W<
-88L
W8%

	
-878


L
L

WD

/


87
L9


8
L9

L
B


*


*

WD

/

87




L
8
L9

L
B


*


*
G)EA
A
If you take a good look at how the ## event works, you will notice that it is almost
identical to the event that we wrote for the products template. We are effectively repeating ourselves at
this moment, but we will make our code less repetitive through 4 later.
Notice how we are using ReactiveVar the same way as we would use a session variable with the
difference that we are not exposing the variable to the console. This helps to make the interface a bit
more secure.
Let's not forget to add our publishers for this view to work, we will need , 8, and
87:
W
CU
!
ALA9#
	-)E',1
	-
	ALA9

G)E1


6AA
W

CUC	

4
ALA91
-23#


LF



	


L


	
8

L

A)A


:
2
AA
87





3
;
	1
We learned how to build a custom form using ReactiveVar variables. The topic covers ReactiveVar and
touches on Jeet. We learned how to use reactive variables to create rich UX.


So far, our buttons and forms have been highly inefficient because they are not easy to repeat, and
therefore, not easy to maintain. There are two ways that we can use to make our code easier to manage:
â€¢ Meteor Methods
â€¢ Autoform
With Meteor Methods, we can easily create 
 and 	 functions while autoforms can
identify the structure of a collection and generate form elements from it. This provides a decent layer of
security without much effort as well. Autoform and Meteor Methods can be used together as well for
further security.
The autoform method can be implemented through the  and
J packages.

Meteor Methods can be used on the client or the server. They are created by using the
41(## function and run with the
41#9 function. Running a meteor
method from the client causes 2 versions of the same function to run. One runs on the server and
manipulates data while the other runs on the client and simulates data manipulation. This is what we call
a Method Stub. Let's look at some example code to understand this concept:
WB8-DV3+2DBV
4
L#
AA
WB2VO4VO2DBV
4
L#
A=.)A
WO8-DV3+2DBV
4ALA
Once you run the function, the Meteor Method activates both the server-side and client-side functions.
So the server in this case will log "I don't want to say hello" to the console while the client will log
"hello". This is a special feature that Meteor provides to help validate code or run other functions in
parallel on the server without exposing sensitive data to the client.
Still, it is important to note that the client-side method will run immediately while the server-side
method will take longer. The client-side code should, therefore, be used for simulation while the server-
side code should be used for validation.

Let's define and use a Meteor Method that runs on both the client and the server. Let's start by redefining
the ## events that we had programmed earlier:
W
C

4
A##A1
-239#
C

C
C

C
-88


-8


C=8.

L-8
A)A
L
%
%
%

L-L
C6'
45
6AA9L
CG
-88L
C5

-878


L
L

C=
87
L9



8
L9

L




*




*


C=
87




L
L
8
L9

L




*



*

CE
19
Notice that we have modified the way that we are setting our persistent session variable. The server does
not have a session object, so we need to make sure that this snippet of code only runs on the client using
45. We have modified the rest of our code to accept quantity, a product ID, and an
order ID, which is all we need to be able to manage both the events.
Also, we added a line at the end of the method to check for a callback function and run it, if it exists.
Observe how we have accepted a function as one of our parameters in the beginning of the function. To
follow in Meteor's footsteps, we return  as the error object and  as the result after the
function has completed. Now let's replace the events:
W
CU
C ''
C'
!
ALA9#

!
L


!
L'

A##A1'9#
C0
-1



->

4A##A9
6AA

G)E1



19#

G)EA
A
W	
	
!
A
A9#

!

'
A##A1'#
4A##A9
6AA

	L
B
19#

G)EA
A
Meteor Methods are great to create rich and easily repeatable user interfaces, but you will eventually
find yourself repeating certain patterns if you are only updating a single collection. This is where
autoforms come in.
	
The  plugin was installed together with the J plugin. Both of these work
together to quickly create forms that support error handling for you. Documentation on these plugins is
vast, but it is necessary to read this to make your views safe and easy to build. You can find this
documentation at https://github.com/aldeed/meteor-autoform. We are going to cover a simple pattern to
show you how to easily manipulate autoforms.
To use autoform, you need to first create a J schema for your collection. This defines the
rules that autoform is going to use to validate and generate our input fields. Let's populate our products
schema:
WC

	
	
C
	-)45A
A
6)6
6



6
A>A



6
A7
A




6
A6Q?A





>
AA
In this snippet of code, we are defining every field within a )6
6 constructor, then we
have attached the schema to the collection using the 6 function. The 6
6
constructor takes an object where the first key defines the name of the field and the object within that
key defines the way the field will behave. We will dive into this further in the next chapter.
Attaching a schema to our collections makes sure that the client-side console commands cannot add
information to the database that is not a part of the schema. Let's reset our project to make sure our new
products adapt to the new schema:


Now we can create a simple insert form for our products collection using autoforms. Let's create the
template and route:
	
C	

1-AL
A
$#

'
')
'##BJ
RG-AA
-AA
-AL
A
'G-AA
R]G-AA-AA

-AA
R]G-A
A
R]G-A
A
R]G-AA

##
 
W	
	
C
G)EA&A9

G)EA&
&A9
AL
A
#
G)+AA9
AL
A
Notice that we do not need to write a controller to make this work. There are two critical components
that we need to understand in this case: G and ]G.
When we use G with a collection, we have to declare the name of the collection using the
 parameter. Also, we need to define whether the form is doing an insert, update, or
method call using the 
 parameter, and finally, we give the form an  that will be used as the
HTML  attribute for the form. Additionally, we pass the 
'G parameter to make sure
that the data persists through hot code reloads. There are several other parameters that autoform takes,
but these are the most commonly used.
The ]G component specifically creates a 
$ input field that can easily handle
errors. Notice that we can add HTML attributes (such as  and 
) to
these components as well as parameters. There are a variety of ways to customize these inputs but we
recommend only two: modifying the CSS directly or leveraging G=
 and
G==' to build new elements.
Let's customize our 
 field a little bit more:
'#
1-A22CG=='-.
.33
##22&33A
#22G+!-A
A33
RG=
-A
A'-AA
G=='-A
A



###


#22G4-A
A33
By doing this, we are very easily adding a 
 to our field using bootstraps' classes, but this
can be useful for adapting our forms to any framework, if needed.
There is still a bit of an issue with this form though, people input prices in dollars instead of cents, but
our schema only accepts cents. Let's transform this data before it is submitted using autoform's :

W	
C	
 G"AL
A9
!71
#


-

*B%%


!G1
#


-

&B%%


Autoform has a long list of hooks, but by far the most useful one for transformations is !7.
This function runs every time the form is converted to a document for processing, this includes before
the errors are processed. We do not use the "before hook" because this hook will run after processing
errors. Also, we are using a !G hook to make sure that our 
 field stays intact after a
code reload. Autoform has the following hooks:





#
 

#







#
 

#


6
6
F
!7
!4
!G
6
6
With this, we can quickly create forms and modify them to the way we like while preserving usability.
Stay away from fields that require arrays! They are difficult to manage in our application and can always
be expressed as a new collection in our models.

2$
The performance of our frontend can suffer if we do not load data correctly because it can make the
DOM redraw quickly multiple times. If the calculations are complex, then we need to wait for all our
data to be available and calculate everything in one single sweep. If we do not wait for data, then
calculations will run as the data is received, which in turn will cause the DOM to redraw multiple times
very quickly.
To solve this issue, we can easily check whether our subscribers are ready and show a loading symbol
until they are.
$$
$
We start by creating a loading template. Let's use font awesome to handle our animations and make sure
that we can easily change the color of the loader:


1-AA
'C

'1-A22L33A'##
#O##



C
B%%Z
In this case, we are using the #
 class to make the cog spin and adding a L helper
that will take bootstraps' # classes to define colors. Also, we made sure that the loader fills the
contents of whatever is holding it so that everything aligns nicely when we use it.
+
$
$
Let's implement the loading indicator for our list of products. Due to the way we are going to implement
this, we could easily have our interface show the loading indicator for each product or the list of
products. It will be more efficient to control the latter.
So let's modify our products template:
	
	


1-A
A
'C


C



C

CL

'
')
+	

	
O


R


'1-ABP%
/A
RL-A#
A

Meteor core exposes a special !

E helper that checks whether the
subscriptions made in that template instance are all in the ready state. This is one of the hidden
advantages of using 	 from our !
 function instead of
4.
In this case, we only run the  iteration on the 
 variable until all subscriptions are ready.
Before this happens, we render our  component in our primary color.
The advantage to this pattern is that we can control exactly where we want our loader to be and when we
want it to appear.


Animation for the web is a vast field that is still growing and can get highly complex if you want it to
be. At the end of the day though, efficient animations are what make a real difference. How do you
make an animation efficient? You keep it simple, and you let the browser animate it for you. Stay away
from using JavaScript to identify positions and change colors. Animations that are heavy on JavaScript
will always have terrible performance. This poor performance happens because JavaScript cannot run
effectively in all devices, so multiple changes to the DOM occur at the maximum allowed speed of the
device without using video memory.
Canvas is an HTML element that is designed to render changes using JavaScript and WebGL.
Animating anything through canvas will boost performance, but it is meant more for applications that
want to do graphically intensive work such as 3D rendering or sprite animations for a game. We will not
cover canvas in this book because you will probably never need it.
Ignoring the power of canvas leaves us with two CSS tools to make rich animations:  and
. The  property is meant for complex animations that require keyframes,
while the  property is meant for simple change-of-state animations. Let's look at an
example of each to first understand how they work, then we will apply them to Meteor.
$ 
The  property is the easiest property to understand. You basically define which property
you are going to animate and how, within a CSS property:

566


It's important to realize that because of %
	0 (another useful Stylus plugin included in this
package), we do not have to worry about vendor prefixes for this particular property. Nib will handle
this for us automatically. By adding the transition property to the  class, we are telling the browser
to animate any change that occurs on the defined property. How do these changes occur? With new
classes. Let's look at a small example:


$%%#

%


B
With this set of CSS rules, we are making the box invisible until the  class is dynamically added.
Once the class is added, then the DOM element will fade in. The available timing functions are: ,
, #, #, ##, 
#, and 
#.
The  property is a bit more complex because it does not require a dynamic class to activate
the animation:












	
%Z

O%Z

B%%Z

As you can see, the difference between a transition and an animation is the level of control you can have
over the animation. By using an  and the 	 selector, we can control at
which point of the animation we want our properties to change and to what. You can change the number
on the keyframe to whatever number you want.
Notice that the  property has a few new parameters: , ,
and 
. The  parameter defines how many times an animation is
going to play; you can set this to infinite or a specific number. The  defines the state at
which you want the element to be when it is not animating: ) sets values to the last defined
keyframe, ) to the first defined keyframe, both sets to  and , and  will do
nothing (default). The 
 controls whether an animation is playing or not (paused or
running).
We can use a second CSS selector to control our 
, if we need to in the same way that we
did for our  property.
!&	$
In Meteor, it is very easy to control the classes that are rendered on the DOM using helpers, so we can
quickly inject a class that will trigger our CSS animation. We will have issues when we want to trigger
animations on elements that do not exist in the DOM.
For example, once our products have loaded, they just pop in. What if we want to make the list fade in
and the loader fade out instead? This is where Meteor's hidden 	L function comes into play.
At the time of writing, this feature is in beta and is still a bit buggy. The best way to handle all the issues
that this is causing is through the 
 package. This avoids the need to
understand the issues that  currently has and how to get around them.

The  package is designed to intercept Blaze by using the 	L function that is made
available in the context of the !
 function. It is very easy to use and comes
packaged with VelocityJS, a jQuery plugin that handles transitions somewhat effectively. We can use a
combination of both to help keep things simple.
To customize momentum, we need to register momentum plugins that handle the three hooks that can
occur in our DOM: F, 'F, and 'F.
F Occurs when a DOM element is created
'F Occurs when a DOM element is destroyed
'F
Occurs when a DOM element is moved from it's DOM location (sorting can cause
this to be triggered)
Let's build the plugin named # that will control the fading in and out of our loading indicator
of our products:
WC


4.#.91
#
F19#
1
5A
'A
<1
4!#
1'5A'A
9JO%
'F1#
1'
%9JO%9A8A9#
1'1
We use the  variable to modify the elements that we are going to inject into the DOM, and we
always use < with the  variable as a parameter to render. Notice that in this case,
when we insert, we are adding three classes before the items are rendered to the DOM, and then after
250 milliseconds, we remove the invisible class.
When an element is removed, we will use ' to modify 
 and bring this down to % in
exactly JO% milliseconds. Velocity takes in a callback command that we will use to finally remove the
element from the DOM.
Now we can add our styles and place the helper inside our view:

	
	


CL

'
')
J'	6
6)
!

E


'##BJ##M##$
R


'1-ABP%
/A
RL-A#
A
C


'#


W


O%%

B
W'

%
Notice that we have added a 1
-A#A component that defines which
plugin to use around the area that is going to render elements with animations. Then we create the
classes that will use CSS transition to make each DOM element fade in.

!(
Meteor has one big problem. It does not support server-side rendering out of the box. This means that
robots don't know how to parse our pages because the server does not render the page, the client does!
There are many ways to solve this issue. You can try using  to enable server-side
rendering or you can let a service automate this for you for free. We are going to use a service to keep
things simple.
#,
Meet prerender.io, the easiest way to get your site parsed. Prerender.io is mostly a free service that
understands exactly how to parse your page. It basically navigates to your )

 and parses each
page, and then when a bot hits our )

, our server will fetch the parsed page from prerender.io and
respond with this instead.
The service is free for the webapps that have a minimal number of pages that get hit by bots. The more
dynamic and the more pages you have, the higher the price will be, but this is unlikely unless you are
building a highly dynamic public web page. Even then, the 
 project can be
downloaded and set up personally (so it's still free).
We have installed the 
 package to easily set up the service. The only thing
that is left is for us is to authorize. First, go to www.prerender.io and open an account, then click the
+022(E!0 tab on their navbar, and copy your token. Now paste your token under the
configuration file:
WC

	

A
!A9AA
Simple! Your site is now crawl-able. Now let's configure our router to work with prerender and add a
404 page:
W
45
!
#

-:
A!
LL@75A
A!
LLA
A!
A
A!
A
AA
;
L
9	')
))
E-

	
E1
))
E-
G)EG-
#
G)+AA9
ALA
Notice that we are creating a global !
 hook function and setting

E to  by default. Then, we check whether our subscriptions are ready using
	
E1 and set 
E to . It's important to understand that
	
E1 only checks for subscriptions made through 	 within the
template!
Also, notice that we are creating a list of exceptions. This is to ensure that we only check for subscribers
on templates that need them.
This pattern ensures prerender does not cache the page until it has actually loaded all the data. Why not
use G)E global triggers? Sadly, these triggers do not have access to the template instance that
is being rendered (since there can be many). If you need more control, you can set this per route/
template.
Let's work on our 404 page template:
C

1-ALA
'CL

'#'#
$M%MS
OS
To make sure our 404 page prints out the correct 404 response, we are going to have to use 4.
'$
To control prerender, we need to use the H# package. This package basically
injects a template to our  HTML tag so that we can easily set tags. Prerender uses tags to identify
whether the page should respond with a 404. We can use Meta to set our title, description, keywords,
and robots properties as well. Let's start by making our 404 page respond with a 404:
WC
!
ALA9#
4:
2

AA


A
##A
AM%MA
3
2
AA


AA
A9)A
3
;
The 4 object has only four functions: , !, , and . It is unlikely that
you will use  because metatags do not persist through routes. Both the  and  functions
require an array of objects, and each object requires all the three keys: , 

, and
.
In the preceding example, we are setting 
## to M%M and  to
9). With this, we ensure that our 404 page in fact returns a 404 error and that
crawlers do not index the page.
Also, we need to configure 4 so that the name of the page is always correct:
W
45
4


A54A
AA

Since 4 is controlling our  tag, we need to remove that tag from (.
,$
Now that our site is crawl-able, we want our products to shine for search engines. Let's upgrade our
products to enable Rich Snippets. Rich Snippets follow schema.org standards to build structured data for
search engine crawlers such as Google to interpret. With this information, search engines can present
your data on their site more prominently, make searches more effective, and even use it in other services.
Following their guidelines is a good idea because Google uses these guidelines for its crawler.
To do this, all we need to do is set as many schema.org's properties as possible on our product page.
Visit http://schema.org/Product for a full list of the available properties. The properties that are most
used are:

#%
%

 (required)
!
The name of the product

?E+
The URL of the product


!
The description of the product

8GGFE8<DF5!
This includes multiple parameters that define the
price of the object

 (required)
>
The price of the product

5
(required)
!1=68MJBK
:?67;
The currency of the price
Now let's put this to practice using the 47 spec:
	
	

1-A
A
C
1

-A
&&&A
O1

-AA2233
'1

-AA


-A
&&&8A
1

-A
5A-A?67A


1

-A
A22
33
####
 B5
### 5
As you can see, to use the 47 spec, you need to add a variety of custom attributes to your
view. For the most part, anytime you are going to declare what a particular thing is, you need to express
this via the 
 and 
 attributes. When we want to declare properties under this
declaration, we need to make sure our DOM elements are children of this declaration and that the
property is declared through the 

 attribute.

	%
This chapter covered several useful patterns that make the implementation of rich and minimal
interfaces easy. First, we learned how to use the Twitter Bootstrap framework together with Jeet and
Rupture; this improved the way we organize our DOM. Also, we learned how to make super
helpersâ€”functions that we can call in both views and controllers.
We took a dive into the different kinds of variables that we can use to keep our code safe and to create
rich interfaces. Also, we learned how to use Meteor Methods and autoform to easily save information.
We covered how to implement a simple loading indicator and how to get animations working in Meteor.
To finish up, we learned how to implement a little SEO using prerender.io and the 4 package.
The next chapter will cover application-wide patterns. Chapter 4, #
(

 will teach us how
to filter and page through collections, how to fully secure our application, and how to integrate with
external APIs.

 =, 
#
This chapter will cover application-wide patterns that share server- and client- side code. With these
patterns, your code will become more secure and easier to manage. You will learn the following topics:
â€¢ Filtering and paging collections
â€¢ Security
â€¢ External API

$$$


So far, we have been publishing collections without thinking much about how many documents we are
pushing to the client. The more documents we publish, the longer it will take the web page to load. To
solve this issue, we are going to learn how to show only a set number of documents and allow the user to
navigate through the documents in the collection by either filtering or paging through them.
Filters and pagination are easy to build with Meteor's reactivity.
	$
Routers will always have two types of parameters that they can accept: query parameters, and normal
parameters. Query parameters are the objects that you will commonly see in site URLs followed by a
question mark (#
[
-B), while normal parameters are the type that you define within
the route URL (&#
&L&#
#J).
It is a common practice to set query parameters on things such as pagination to keep your routes from
creating URL conflicts.
A URL conflict happens when two routes look the same but have different parameters. A products route
such as &
&
 collides with a product detail route such as &
&
#
. While both the routes are differently expressed because of the differences in their normal parameter,
you arrive at both the routes using the same URL. This means that the only way the router can tell them
apart is by routing to them programmatically. So the user would have to know that the
G)E1 command has to be run in the console to reach either one of the products pages
instead of simply using the URL.
This is why we are going to use query parameters to keep our filtering and pagination stateful.
	
$
Stateful pagination is simply giving the user the option to copy and paste the URL to a different client
and see the exact same section of the collection. This is important to make the site easy to share.
In Chapter 2, ((

 we had created a products publisher and subscriber to
elaborate on our publishers. Now we are going to understand how to control our subscription reactively
so that the user can navigate through the entire collection.

First, we need to set up our router to accept a page number. Then we will take this number and use it on
our subscriber to pull in the data that we need. To set up the router, we will use a G)E query
parameter (the parameter that places a question mark next to the URL).
Let's set up our query parameter:
W	
	

!
A
A9#
	-
-6A
A

	3'<O[;'6	6))#
LF

L9

-6AA
LF

L9

	A
A9
!




	

:
<O[;'6	6)#
+		

6%/	6:
<O
[;
	3'<O[;'6	6))J"
6%	
	6:
3'<O[;'6	6))"5#
	#


	3'<O[;'6	6))"
<O
[;
		

What we are doing here is straightforward. First, we extend the filter object with a 
 key that gets
the current value of the page query parameter, and if this value does not exist, then it is set to %.
] is a reactive data source, the  function will resubscribe when the value
changes. Then we will create a helper for our view so that we can see what page we are on and the two
events that set the page query parameter.
But wait. How do we know when the limit to pagination has been reached? This is where the

# package is very useful. It uses a publisher's special function to count
exactly how many documents are being published.
Let's set up our publisher:
W	

	
C	
4
A
A91
-23#
-B%
	C	


%		
	Y



"

LF


	
!

!


LA
A
	
	C	


:

;

8
	

=6	
6=
;
')
O
	

	
	C	


:

;


LF



	1
To publish our counts, we used the 5
 function. This function takes in a few
parameters:
5
)999


Note that we used the E parameter to prevent the  function from running prematurely.
By doing this, we generate a counter that can be accessed on the client side by running 5
A
A. Now you might be thinking, why not use 11 instead? In
this particular scenario, this would be an excellent idea, but you absolutely have to use the 5
function to make the count reactive, so if any dependencies change, they will be accounted for.
Let's modify our view and helpers to reflect our counter:
W	
	


!





#
G)E]1A
A%
LL
#
L
->1G)E]1A
A%
L)-B%RL
*B%
L
-5A
A
L)L

	
	


1-A
A
'C



CL

'
')
'#
&&# 0=> !=8>
'##M

##

'#

#'#
'##M
##22
33
'##M

LL

##
#

#'#
'

&&#E87?5!6
R1
-A#A

Great! Users can now copy and paste the URL to obtain the same results they had before. This is exactly
what we need to make sure our customers can share links. If we had kept our page variable confined to a
6 or a E',, it would have been impossible to share the state of the webapp.

$
Filtering and searching, too, are critical aspects of any web app. Filtering works similar to pagination;
the publisher takes additional variables that control the filter. We want to make sure that this is stateful,
so we need to integrate this into our routes, and we need to program our publishers to react to this. Also,
the filter needs to be compatible with the pager. Let's start by modifying the publisher:
W	

	
C	
4
A
A91
-23#
-B%

L
-



*


B
79
	

C
V		


C/=

/	


	
66


LF


	
!


:

!


:



;

5
9A
A9
;

E
	




LF



	1
To build any filter, we have to make sure that the property that creates the filter exists and L
our  object based on this. This makes our code easier to maintain. Notice that we can easily add
the filter to every section that includes the  collection. With this, we have ensured that the
filter is always used even if tags have filtered the data. By adding the filter to the 5

function, we have ensured that the publisher is compatible with pagination as well.
Let's build our controller:
W	
	

!
A
A9#
	-

-

>1G)E]1A
A%
G)E]AA

	A
A9

!







#
G)E]AA

!

'

AA1'#
-1'!'1
LF

-
G)E]



First, we have renamed our  object to 
 to keep things consistent between the publisher and
subscriber. Then we have attached a  key to the 
 object that takes the value of the search
query parameter. Notice that we can pass an undefined value for , and our subscriber will not
fail, since the publisher already checks whether the value exists or not and extends filters based on this.
It is always better to verify variables on the server side to ensure that the client doesn't accidentally
break things. Also, we need to make sure that we know the value of that parameter so that we can create
a new  helper under the 
 helper. Finally, we have built an event for the search bar. Notice
that we are setting query parameters to  whenever they do not apply. This makes sure that they do
not appear in our URL if we do not need them.
To finish, we need to create the search bar:
	
	


1-A
A
'C


C


'C
C

CL

'

')
&&#6F E5"
'##BJ
'#
#


##1
-AA

-A6
A
H-AA-AA

-AA'-A22
33A

1-A
#'/

/A####J

Notice that our search input is somewhat cluttered with special attributes. All these attributes ensure that
our input is not doing the things that we do not want it to for iOS Safari. It is important to keep up with
nonstandard attributes such as these to ensure that the site is mobile-friendly. You can find an updated
list of these attributes here at https://developer.apple.com/library/safari/documentation/
AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html.

	%
Many packages secure certain parts of the Meteor stack, but even then, you cannot rely on these
packages completely. Also, you have to be very careful about the packages you choose! Some packages
might intercept core functions to funnel information out of your application. This means that you should
always have a look at the source code of the package before you install it.
This topic is usually an oversight to novice Meteor developers, and yet it is one of the most important
topics to know about. To secure our webapp we need to:
â€¢ Define roles (set distinctions between users)
â€¢ Define schemas for every collection (limit how they can modify fields)
â€¢ Define deny rules (limit who can modify fields)
â€¢ Use methods, when necessary, to check parameters (ensure complex security when needed)
â€¢ Set browser policies


Using roles, just about every web application creates a distinction between users and what they are
allowed to do. To help us manage roles easily, we have installed the  package. With
this package, we are going to control who hits our routes and who may modify our collections.
This package makes the E==E function available, which uses a  collection
to make sure that the user is in the correct role:
E==E#8E#(9:)
;9

Suppose you need to check whether a user is an  or a  before they access a certain
function. For this, you will simply do the following:
E==E4=19:AA9AA;
C)
Let's add an  role to our application. We can start by creating an initialization file that will
automatically build our admin user:
WC

C
	
4
#
C?
411%
- ?
A	A

)ABJ$MA
E?!E9:AA;

Notice that we are using the E?!E function to set the new user's role to
, and this takes place on the server side. Always set user roles on the server side. Next, let's build
a login route that can be accessed only if you are not already logged in:
WC
G)EA&A9
AA
F:E!LL;
#
<H+AA9
AA
To make sure roles run at the right moment when our user first hits the site, we need to make sure that
G)E activates after roles have been loaded. To do this we use
G)EH1 and G)E)1.
C&L&&
45
<H+E..
G)E)1
4
#
C=HG)E
!1
#
E
1G)ELH
G)EH1


1
The G)E function accepts a F parameter and a F
parameter. This can be used to redirect the user based on roles. Both these parameters are arrays of
functions so that many triggers can be added to each route. To make it easier for us, we are going to
create a dictionary of triggers under a global E! object. Notice that we do not execute the function
within the triggers array, so we do not include parentheses.
Let's start by moving the & folder to the &L folder. This will make sure that the E!
object is the first thing that is defined. After doing this, we should define two triggers:
WC


	E!-
LL19#
4=1
E
E



A&A
L19#
E==E4=19:AA;
E
E


A&A
Notice that when G)E calls these functions, it will include a  object and a
 function. The  object has information about the route that we are trying to
connect to and our previous route, while the  function is used to redirect a user. In this case,
we have attempted to redirect to the previous route if it exists, if it does not exist, then we redirect to
root.
Now, let's add the L trigger to every route except 
 and :
WC


	E!-
LL19#

L19#

G)E:E!L;9

:A
A9AA9AA9ALA;
We can easily create a global trigger that does not apply to the 
 nor the  routes using
the G)E function. We don't have to worry about
including our M%M route since by default; it does not run triggers.
To finish up, let's build a custom login page:


1-AA
'C

''#
')
'##BJ##P###$

'#
F


###1
-AA


-AA'-A2233A
H-AA
-AA
-AA
'#
)


)
###1
-A
)A

-A
)A

')
'##BJ
'#)2233
##
#+=
W
!
AA9#
	-)E',
!
'
AA1'9#
'
'71
-1AA'1

)-1A
)A'1
C5F
LF
1
-
&_&9AA
-1+)51

AF'A

C5)

)LF

)
A)'A


4@)9
)91#


1A
A'AA
G)EAA



!


AA#
!
11
Here, we have used Meteor's core 4@) function to log in, and we have
kept a track of the errors using a E', variable.


5
Suppose a malicious user visits the site and quickly identifies one of our collections in the browser
console. They are going to update one of the products by calling the 
 function.
Because our site is insecure, they can successfully call something like this:
W,
K


1A
A922A'A33
This will successfully create a field that should not exist for that particular product!
With the J package, we are going to secure our collections by white-listing
fields. This makes sure that the allowed users can only set acceptable values on our collections and that
these values meet certain criteria.
A  field can take the following parameters:
#
'


This defines the type of the value. This can be any JavaScript primitive: 6,
>, <, 7, 8(, or an array of primitives such as
:8(;, :6;.

This is only available if 
>. This defines whether a number is a
decimal. This can be  or .


This defines whether the field is required on insert. This can be  or .
F
This checks whether the string matches the defined F expression. This can be
any F expression such as &^: #a;&.

#
'
), This checks whether the string matches any of the values in an array. This can be
only an array of strings such as :A0A9A<A;.

This allows any combination of values and objects to be placed as values. This can
be only  or .
?

This defines whether the field can be updated. This can be only  or .
=
This defines whether the field can be inserted. If this field is set to ,

 must be set as well. This can be only  or .
,
This defines the value that the field will take during an operation. This can be a
 only.

This defines the custom function that will validate the field. This can be a
 only.

This defines whether the value of the field should be unique. This can be only
 or .
With these parameters, it is easy to lock down every collection including the 4
collection and increase the security of our app drastically.
As we will save all our numerical data in hundreds, we will never use the  parameter. You
should always avoid decimals regardless of whether you are dealing with money or not.
Both the , and  parameters expose variables and functions within their context that
are critical to understand:
&

	
'
=
Boolean. This checks whether the field is being inserted.
?

Boolean. This checks whether the field is being updated.

&

	
'


Boolean. Check whether the field is being upserted.
=
String. This checks the current =. Returns 9 if it
does not exist and is  for all server-initiated functions.
G!5 Boolean. This checks whether the field is being modified by the
server-side code.
6
Boolean. This checks whether the field is being modified.
'
Anything. If 69 then this will be the value of the field.


String. If 6 and ?
9 then this will be
the operator that modifies the value (
, 
, !6,
, and so on).
1A#
A
This is a function that returns an object. This gets the object
representation of a field that is being modified. From this object, you
can use 6, ', and 
 to get more information.
For example, 1AA' will return the
value of the field name, if it is set.
With these functions, we can add custom validators and custom automatic values depending on the state
of the modification. Also, we can check what the values of other fields are and react to them if we need
to. If your validation requires complex queries with other collections, DO NOT RELY ON THIS
PACKAGE!. This tool is strictly to control collection-specific values and not relationships. Remember
that not all our collections are available on the client side, and therefore, are incapable of being validated
properly. We will address these kinds of validations in the next topic.
Let's secure all our collections. We will only show the 8 and 87 collections
schemas:
WC



C
	8-)45AA
86)6
6



6
),:A)A9A
A9A
A;
L


>


>
L

>




>
L

>
,#
	=
7)1
	?

8=7)1
GB
,86C
6
876)6
6


6



6



>


>


>


8(



AA

>
AA

>


>
As you can see, the pattern for white-listing a field within our collection is a simple object that contains
the 5J parameters. Notice that we can define rules for subobjects using MongoDB's dot
notation. This means that we can set rules for arrays and object arrays in the same fashion as well:




:8(;
A

A

6
A

A

>
Still, you do not have to set complex rules often since they are clear indicators that a new collection
should be created.
Notice that we are not using any complex custom validation in our schema besides  and 
.
Why? Should we check whether the user is an admin, or whether the modification originated from the
server-side code, or whether the order belongs to the customer?
While we could start adding a few lists of checks for each field, the true source of the problem stems
from allowing users to modify our collection directly from the console. To fully secure our orders, we
need to modify the allow/deny rules and use trusted code.
It is important to understand that these schemas are used by server-side code too. This makes sure that
neither the client nor the server can mess up our keys.
%	

Now that we know the fields that will be in our collections, we need to make sure that the server allows
the right people to modify these collections. To do this, we first need to understand exactly how the
allow/deny rules work.
Meteor has two core functions that control whether a collection modification is allowed or not:
4) and 4.
The 4) functions allow a collection to be modified as soon as one of the rules resolves to
. Also, this means that the other allow rules are not evaluated! Knowing this, some developers

cram logic into a single allow rule that could easily fail. This is bad practice because the code will be
difficult to maintain.
On the other hand, the 4 functions will always run and trump a 4) rule
that resolves to . To manage our deny rules effectively, we are going to use the
) package. With this package, we can easily build reusable and readable rules
to be set on our collections.
Let's begin by removing all the allow rules from our project. Then we can set some rules for our
8 collection:
C




C	



4
#
C 
8
A
A
+=1
"EAA

AA


1
With this simple rule, we have denied anything that does not match this rule. This package integrates
directly with our  package, so we can easily use the "E function. This rule makes sure
that only an admin user can update an order's  field via the console. To make sure that the rule
is applied, we have used the 

 function.
There are three things that we need to understand about the deny rules: logic, integrated functions, and
custom functions.
Logic in rules decides whether they act as ANDs or ORs. If we have multiple functions inside a rule,
then we define AND rules. The function that we have defined for our orders is an AND rule because this
checks += AND "E AND 
 before allowing a modification to pass. If
we want to create an OR rule, we simply create a new rule. Let's try this:
8
A
A
+=1
"EAA

AA


1
8
:AA9A'A;
'1


1
Here, we are stating that a user may 
 += AND "E AND 
 OR
never /'.

The package comes with a handful of integrated functions to help in applying the rules:
	
'
'1
This prevents DB operations
+=1
This allows DB operations if logged in
"?=1#
This allows DB operations if user ID is a particular string
"E1
"E12
9

3
This allows DB operations if user belongs to a particular role

1

This allows DB operations on certain top-level fields only (this
will not identify arrays and subobjects)


1

This allows DB operations on all top-level fields except these
(this will not identify arrays and subobjects)
	%	

While the  package functions are useful, you may find yourself needing custom functions for
more precise handling of your security. To build a custom function, you need to use the
64 function:
649

1
99999
This function accepts two parameters:  and . The  function allows the
modification of fields before they enter the  function, while the  function is an extended
version of 4. The  function passes several arguments that include information about
the document being modified and the user. These arguments are: 
, , =,
, , and . The last two arguments ( and ) are only
passed if 
 is equal to 
.
Let's add a custom function:

WC



64A?=8)A9
1
999#
1L
Here, we are defining an ?=8) function that checks whether the ID of the currently logged
in user is equal to the  field or the L field on the modified document.

Notice that the logic of the rule denies a database operation if the user is not the owner of the document.
Now we can use this rule to secure our  collection:
WC



64A?=8)A9

6
1:A
A;1:4;
?=8)1

:AA;


1
6
1:AA9A
A9A'A;1:4
;
"EAA


1
Notice that we are attaching rules to the 4 collection in a different way. We do this
because the 4 collection is a special collection that is initialized in a different way than
the rest of our collections, with this we have ensured that the rules are properly attached.
In this example, we are allowing our users freely to modify the  field from the console, and only
the admin user can modify all users from the console.
However, now that we have locked the code from the client, how are we supposed to make things work?
Running code directly from an event on the client will fail because the code is untrusted. We need to
build a trusted code that will handle changes to the database. The solution is simple: Meteor methods.
>	5
We have already covered how 4 work, but we have not discussed the difference
between trusted and untrusted code.

Trusted code can modify multiple documents at once by setting  to  and can use an
arbitrary Mongo selector to find the documents to modify. It bypasses any access control rules set up by
allow and deny. Trusted code includes all server code and 4.
Untrusted code can modify only a single document at once that is specified by its L. The modification
is allowed only after checking any applicable allow and deny rules. Untrusted code cannot perform
upserts. Untrusted code includes client code such as event handlers and the console.
This means that whenever we directly modify a collection on the client, we are running untrusted code
that is limited by our deny rules. Knowing this, it becomes obvious that most code, especially complex
code with relationships, should run on a Meteor method.
But wait. Can a user modify the code of the method on the client side? They most certainly can, but
remember that the code runs in a stub. The stub makes sure that the correct code runs on the server,
while the client-side code updates the collections temporarily until the server responds. This is what
Meteor calls ('+.
So, if someone tampers with the client-side version of our Meteor method, the server-side version will
still run normally and the UI will update correctly.
It's important to understand though that 4 will still be bound to the rules we had set
on 5J, which is a great feature inside a team environment where not everyone understands
the structure of all data models.
So where should we use untrusted code? The answer depends greatly on your application, but for the
most part, you will want everything to run on trusted code because it is easier to maintain and safer.
Untrusted code should be used mostly to control things that the database is not connected to, or
information that is allowed to be just about anything that the user wants.
In order to use 4 properly, we need to run validation on 4 as well.
We do this using Meteor's core  package. Let's upgrade our ## method:
W
C

4
A##A1
-23#
C,

9
48
1488169

6
>

C=8.




C,
A)A
))4FM%O9A> )A
L-L

First, we have used the  function to validate the structure of the 
 object and to ensure that
each key inside the object matches the correct type of data primitive. When the validation fails, the
function will automatically stop and return a =K=
 error to the client.
Next, we have checked the status of the order. If the order is not new, then we throw a
4F. This will short circuit the function as well and return the  object to the client.
When you are settings errors inside the Meteor methods, you will always use ))
4F1 to communicate the error.
We do not need to worry about doing anything else with our errors. We will see how to keep track of our
application errors in a different topic.
The  function takes only two variables:
'9

The ' parameter takes the variable that will be analyzed, while the 
 parameter takes the
validator. The pattern can be as simple as a JavaScript primitive such as 6, >, and
<, an array of validators, an object of validators, or as complex as a function. The pattern
simply needs to return  for the validation to pass.
Meteor includes a handful of useful 
 functions through the 4 object:
#	
'
4 1
This allows any value to pass validation.
4=1
This allows any 32-bit integer.
= and >> are not allowed.
48(=1(
 This allows an object to include key/
value pairs that are not defined in the
object. The example that we used does

#	
'
not allow other key/value pairs from
entering the method.
48
1#

This allows a value to be .
If the value is defined, then the
#
 will be evaluated
instead.
4881
B9
J9
This allows a value to pass if it matches
any of the defined patterns.
4@11'23
This runs  and passes the
defined value as the first parameter. If
the function returns , then
validation passes.
Now this is all grand and makes us feel much more secure, but the fact of the matter is that we are
sharing our server-side logic on the client. This means that we absolutely cannot include sensitive data
inside a Meteor method. If we do want to pass sensitive data, it is best to store it in a server-side variable
and call it, or if you want to go an extra mile, you can separate the client-side method from the server
using folders.
$$ 
The first chapter gave us a brief explanation of the impact that blocking can have on our client. To
summarize this, if a function is waiting for a third-party or doing something that takes long, you should
unblock the function. However, what impact can this have?
Remember that methods are placed on a conveyor belt. When we unblock a function, we place the
method in a different conveyor belt where we cannot put other methods. This means that if another
method depends on the unblocked method to complete, there can be a serious issue because the method
can run before, during, or after the unblocked method.
Notice that our ## method does not have an unblock function. This is to make sure
that the server adds items to the cart in the same order as the client. So what do we do if we have
something inside the method that can be placed in a separate conveyor belt? Can there be something that
can happen in parallel and the user does not have to wait to continue?

41 is a special, undocumented function that can take a particular
snippet of code and run it in a separate conveyor without blocking the function from which it was called.
Suppose we want to notify the admin every time a new order has been created, as shown here:
W
C

4
A##A1
-23#
C,

C=8.


46'
4#
F
A	A
A	A
(A>)5SA
A6)A

In this example, we have wrapped the F function in a 4 function to make
the e-mail run in parallel. This benefits the performance of your code by running deferred functions in
parallel and focusing on producing only the results that matter to the user. By doing this, we ensure that
the e-mail, a process that we know takes a long time to finish, does not block the server as well.
6 
%
Now that we can secure our collections and functions, we need to protect our application as a whole. We
can achieve this protection using the )#
 package. Let's install it now:
)#

So what exactly does this package do? By adding this, we are opening an access to a series of
configuration options that will help us to set our application headers and content security policies to
protect from cross-site scripting and data injection attacks.
These kinds of attacks are often used to steal your data (data theft), change the way your site looks
(website defacement), and distribute malware. We definitely want to avoid all these attacks.
So how does this work? By adding the package, we have already protected our application against many
attacks by default, but we need to be able to control this. To do this, the package exposes two objects
each with a particular set of functions: <) and
<). Both these functions must be set in the server.

$
With <), we can control whether our web application can be rendered
inside an iframe or not. We have three functions to control this:
	
'
*)1
This will never render in an iframe regardless of the
origin.
*!81 This will only render in iframes created by the
specified origin. This may take only one 
string and may be called only once. Also, it is not
fully supported in WebKit.
*) 1
This will render in any iframe.
You will find yourself using <))1 most of the time, but it is
important to understand that you will still be able to iframe your app if origins are the same.

With <), we can control exactly how the content will be loaded into our
web application. We have many functions for this. However, we will actually end up using only a few.
The functions are:
	
'
*)=6
1
This allows DOM script tags to run.
7FG ?+!.
*)=6
1 This does not allow DOM script tags to run.
*)F'1
This allows the building of JavaScript from strings
by using the ' function.
*)F'1
This does not allow the building of JavaScript from
strings by using the ' function.

	
'
7FG ?+!.
*)=61
This allows inline styles and style DOM elements to
run.
7FG ?+!.
*)=61
This does not allow inline styles and style DOM
elements to run.
There are more! The next set of functions defines a white-list of content types and how they are allowed
to load. 5!
 can take the value of: 6
, 8(, =, 4, G, G, and
5.
	
'
*)5!
81
*)6
81
*)8(81
*)=81
*)481
*)G81
*)G81
*)581
This allows the 5!
 to be loaded from
the  string. This function can be called
multiple times and has a support for wildcards. If a
protocol (
 / 
) is not specified, then
BOTH are allowed.
*)5!
7?1
This allows the 5!
 to be loaded from
a  URL. This will allow base64-encoded
images to render.

	
'
*)5!
681
This allows the 5!
 to be loaded from
the same origin as the webapp.
*)5!
1
This does not allow 5!
 to be loaded.
*)68G 1
This allows all types of content to be loaded from
the same origin as the webapp.
*)7?G 1
This allows all types of content to be loaded from a
 URL.
*)8G 1
This allows all types of content to be loaded from
the specified .
*) 1
This does not allow any type of content to be
loaded from anywhere.
Depending on what we want our application to achieve, we may have to tweak our rules. Let's configure
our security policy to the recommended options:
WC



4
#
C')


<))1
C'

<))=6
1
L-:
.*#.
.*
.
.
.
.
.
;
LL91L#
<))8G A
&&C2L3A

!&
#+
Now that we know how to secure our application, we need to understand how to keep external data
sources up to date. There are two patterns that we can use to ensure that the information on our server is
recent: %7 and  .
%7
Synchronization will, basically, get data from our source continuously and refresh the database. This
type of technique is useful when we need to save information from our data source and use that
information to produce analytical data via the aggregation framework.
To keep our servers synchronized, we need to make sure that the process that fetches information does
not block the server. We can ensure that this happens using nonblocking functions like
4='.
Let's synchronize with Stripe. First, we will need to create a collection to capture payments, then we will
have to set permissions and our Stripe secret, and finally, we will build the HTTP 0F! function:
WC


		
C
	-)45A
A
WC


	
	
C	



4
#
C>

:AA9A'A9A
A;
'1


1
WC


	
	6
-
A#A

A
#A
W
	
	

L6
9
L
1
-23#

-
B%%

LL
L
9

L
LL
"!!A
&&

&'B&A9

A HAA<C26
3A



19#

L[91#

L9

L
-L
6
L

LL

))4F
4='6
L
9$P%%%%%
Notice that when we created our collection, we did not give it a schema. We did this because we wanted
to make sure that our collection is flexible in case the data from our endpoint changes. To secure our
collection, we need to make sure that nobody can modify this in any way except for trusted code. Then
we have created a configuration object that is going to hold our Stripe secret and public key.
Also, we have created a &
&'&
 directory. Here, we have added the
L
 function to the 6
 object that we had defined in our _ directory. To
have this work properly, we had to pass a 
 object to control the way we are requesting data from
Stripe's servers. Expect to pass 
 for every 0F! request you build since this controls the
endpoints' 
. Stripe explains in their documentation that we can get the next page of data
by first checking whether there is more data via the L key and then passing in the last object
ID from which to start via the L parameter.
At the end of this all, we have used the 4='19
 function to make sure that the function runs every hour. Are we done yet? Not
quite. While this code will definitely populate our  collection, it could potentially crash our
server as well. Why? The request always queries from the beginning of time up to today, which makes
the server progressively take longer. Another important issue is that if there is one 0F! request being
processed and it has not finished within the hour, another request could start in parallel and consume
even more resources.
We can prevent this by controlling our intervals and limiting the time frame our interval uses to get the
data.
First, let's make sure that we only have one interval running at a time:

W
	
	

L6
9
	

1
-23#
2		

C
2		

C

-
B%%

LL
L
9
L
LL
"!!A
&&

&'B&A9

A HAA<C26
3A



19#

L[91#

L9

L
-L
6


LL


2		

C


2		

C

))4F

C:
,
D2		
=M@####

C

6

L'1
Notice that we are keeping payments together under a 
 object now. Then we have simply set
and checked a L Boolean key to see whether the process is running or not. Now if we were

to reduce the interval to 1 millisecond, it would only GET from the external API after the previous
request is done processing.
Now, we can use the L parameter to ensure that we only get the latest information.
To do this, we will have to use the  function to filter data by time and get the latest payment
information:
W
	
	

L6
9


1
-23#
6

L
6

L-

-
B%%

LL
L
9
L
LL


C
')')
G'66)
'"#=6
6)/')

C	;
GC=


"

C	
C/	

C
C	

In this example, we have simply used  to identify a Unix timestamp from 10 days ago. The
 object is made available using the ( package. Notice that we are using the
1 function to set 81AA consistently between our development and production
environments. Then we have queried the server, and if the payment exists, we will use the ID of the
payment as our L parameter.
It is important to understand that we can make this query easily only because the information that Stripe
sends includes a Unix timestamp. Not every API has a Unix timestamp. Most likely, you will end up
inserting or transforming their data to fit your own. This can be easily addressed by extending their
response when needed.


Webhooks are the way through which other servers can communicate directly with ours. They, basically,
make a 86! request to one of our endpoints to inform our server that something has happened.
In the case of Stripe, we are going to add an endpoint that will catch all of Stripe's charge webhooks. To
do this, we will use the ' package.
E' is an excellent package that makes it easy to maintain a RESTful API with version control
and user authentication. It runs only on the server side for security.
First, we need to create an instance of E'. This instance will hold the routes for the first version
of our endpoint:
WC


	
	6
-
AA

A
A

'B)E'

A
A
'A'BA
Here, we have attached our new server-side endpoint to the global 6
 object under the  and
'B keys. This will make it easy to create new routes for version 1 anywhere in our server. The
E' instance takes in a handful of parameters, the ones that you will end up using the most are:
#
'


String defines the parent route of all the endpoints. If we define 
 as
A
A and a route as AA, then the path for the route will be E88!L?E+&

&.
'
String defines the version number of the API and adds it to the parent route. If we
define ' as A'BA, then all the routes will take this form:
E88!L?E+&
&'B&.
5 Boolean sets whether the route is accessible from external domains. Default: .
Now let's create an endpoint that updates the  collection. To create an endpoint, we need to
define a route on our E' instance. To do this, we simply call the global object that we had
defined and use the E function:

W
	
	


4
#
6
'BEAA9

#

-	[(



L
9


	1
Now our endpoint can catch Stripe's webhook notifications. Notice that the information that the 86!
request contains is located in the 	 object. After analyzing this object, we can see that
the object that Stripe is sending. In this case, Stripe sends an object with a  key, which in turn
contains an ( key that holds the information of the payment. If you want to see the information
that Stripe is responding with, simply log in to the console.
Also, we are returning a 	1 function, which notifies Stripe that the request was processed. This
makes sure that Stripe does not have to make a second attempt to notify our server.
The E function can handle all types of HTTP requests including , 
, , 
,
and 
. The endpoints have these variables in their context to help handle requests:
&

'

The 4 object after authentication passes.
=
The 4= string after authentication passes.

Parameters defined in the URL string:
E88!L?E+&
&'B&&
To access the  parameter, you would call 	.
 Query parameters defined in the URL string:
E88!L?E+&
&'B&[-
To access the  parameter, you would call 	].

&

'

The body of the request. This is the equivalent to 	.

A NodeJS request object.


A NodeJS response object.
1
This function must be called after handling a response.
Now, we can set up webhooks from Stripe by going to their settings page and creating a webhook. Make
sure to point their URL to the one that we built.
We can send a couple of test hooks, too, to make sure that everything works as intended. By using both
the synchronization pattern and the webhooks pattern, we are able to keep our data up to date. You
should always use both patterns if the API allows you to. Why? This is because their webhooks server
could potentially fail.

	%
This chapter covered three important things: how to control the amount of data that we publish, how to
secure our app, and how to better integrate with an external API. We learned a pattern to build
pagination that functions with filters as well. Then we learned how to build user roles and schemas to
secure access to our application better. Next, we understood the limitations of allow/deny rules and
addressed these limitations by writing effective deny rules. We quickly realized these deny rules were
blocking functions from all the event handlers because they are insecure. To get around this limitation,
we learned how to build trusted code. Towards the end, integrating Stripe taught us how to create a
nonblocking synchronization function and how to use ' to catch incoming messages from
external servers.
The next chapter is going to cover the basics of how to test and maintain our code. With the next
chapter, we will be able to share our code without fearing that someone else will break it.

 @, $#
This chapter will cover testing patterns that ensure our code is easy to maintain. With these patterns, you
will learn how to implement regression testingâ€”a method to identify if the new code breaks the old
code before the code goes into production. Building tests is crucial to maintain code and collaborate
with others. You will learn the following topics:
â€¢ Behavior tests
â€¢ Unit tests
Testing in Meteor is still under heavy development, but the functions that we will cover are basic and are
unlikely to change.
6
Behavior tests are known as end-to-end tests too. The purpose of a behavior test is simple: it makes sure
that a feature of the project is working. A feature refers to the business logic behind the application. For
example, a feature of our current project is viewing a list of products in our landing page. Another
feature is the ability to add a variable quantity of products to the order.
To run behavior tests in Meteor, we essentially need to build a robot that can visit our website and try to
make these features work. While this sounds complex, the Meteor Velocity project simplifies much of
this when paired with Cucumber.
Velocity is a project that sets the stage for other testing frameworks to use. It works by creating mirrors
of the project where tests can run.
Cucumber is a specification-by-example testing framework. It is meant to describe application features
in plain English before they are programmed. In a collaboration setting, these tests are the ones that
matter most because they make sure that the application is behaving as expected. We will use the
Cucumber package now because it is one of the only testing frameworks that support behavior tests that
are currently available to Meteor.
To build tests, we first need to install the ' package:
/
This package automatically installs Velocity and all other required packages. Now run the Meteor
command to start up the server. The following two things are going to happen:
â€¢ A new browser window will open if there are any tests to run
â€¢ The current project will have a dot on the top-right side
The new browser window is what we call a  and is the client that is going to run all the behavior
tests that we define. While this is great, it is annoying to have a second browser window open and close
every time we run the Meteor command.

To get rid of the second browser window, we can use 
( to run tests. To do this, we will
simply run the Meteor command with some settings:
2V-V3DK,CIOG.2VO	

PhantomJS is a headless browser. A headless browser is a web browser (such as Safari and Chrome)
without a "
'+ ("'+). In other words, it's a browser for robots, and this is exactly
what our robot needs to run our tests.
Let's make a custom Meteor alias with this command. Open the Y&L
 directory with
your favorite text editor. If you use Sublime Text 3, you can run the following command:

P
C	
In this file, add this line to the end of the document:
WP
C	
'-.6F+F>=?4L<E8@6FE-
(.
Now completely quit your terminal, and then open it again. Go to your project and run the '
command to start your project.
Go to the project URL. Here, you will notice a blue circle on the top-right corner of the project. Click
this to reveal the velocity test dashboard. Whenever tests fail, here you will see why they failed. All tests
are rerun every time there is a change in the code.

Let's start by building our first behavior test. In this test, we are going to check whether we can add
items to the order. To do this, we need to program two key components:
â€¢ Features
â€¢ Steps
 are, basically, snippets of code in JavaScript or CoffeeScript that interpret the 	. Step
snippets are automatically generated after writing a feature. Therefore, we need to start by writing the
description of the feature.
All our tests are going to be saved under the & directory. Behavior tests will always go under the
& folder. At the time of this writing book, this has been mandatory because Velocity runs
under these special directories only:
W



G 5
 
=)
6=
<
0'=
	'
6 
@='A&A
 =)A##A
!='
)B
Notice that the file ends in  and is located under the & directory. Placing files
under the  directory is mandatory as well for the testing suite to be able to identify your
feature files.
This file is written in the Gherkin language. If you want to add comments, you can use the pound sign
(C) just we do in CoffeeScript. The G keyword describes the feature; this can be anything as
long as it helps you to identify what the feature is. After this, we can see three lines that describe the
purpose of the feature. This description can also be anything you want since this does not affect the test,
but it is common to use the following syntax to help identify whether the feature is useful or not:
 :;
=):;
6:;

Next, we will find the < and 6 keywords. Both are a list of actions that lead to a
result. For each feature, there can be multiple scenarios that test the different parts of the feature. The
< keyword defines a list of actions to be taken before running the ones under the
6 keyword. Try to keep backgrounds short and simple, and keep in mind that they will run for
every scenario.
Also, notice that we have an 	' keyword directly above the 6 keyword; this keyword
controls where 6 is going to run. If you do not include a keyword, it will only run when you
run ## in your terminal. If you include 	', the test will run every time you make
changes to your web application. Also, you can include 	 to ignore the test completely.
The 0', @,  , and ! keywords are commands that run the steps in our test code:
â€¢ 0': The purpose of 0' is to put the app in a known state before any interaction occurs.
â€¢ @: The purpose of @ is to describe the key action the user performs.
â€¢  : The purpose of   is to write scenarios more fluently. They, basically, substitute  
with the previous keyword.
â€¢ !: The purpose of ! is to observe and evaluate outcomes. This phrase will always
make sure that the system has produced something.
Now that we have programmed our first feature, let's generate the steps that will execute the feature.
Run your alias command:

Once the server has started, Velocity will produce a command you can use to tail the projects'
. Open up a separate terminal without deactivating Meteor and run that command. It
should look something like this:
K

XGK		C
	

Now you will see something like this:

If you don't, you can restart the Meteor project without leaving . Here, we can see the
JavaScript version of the steps that the feature is expecting. Let's rewrite these in CoffeeScript under the
special &
L directory. This directory must always be a sibling to the related
 files.
Copy the code snippets and create a new file under the &&&&&

L&
 directory. We are going to convert these snippets to
CoffeeScript, since this is what we have been working with all along. You can do this quickly at
http://js2.coffee.
Notice that each function passes a  variable at the end and calls the 
1 function.
When tests run, this indicates that the function has not been built yet and appears as pending in the
Cucumber log. We can remove the  variable after we have finished working with the
function. Notice that arguments are passed as well.
Running tests with this code will not work; we need to initialize the test properly. To do this, we begin
by using CoffeeScripts'  function and attaching the commands to the 
 function.
You need to do this for every test file:
W



	C

	

#
..

-#

	0'
	@
	!
Now that the tests are actually running, we can dive deeper. The first function that we will address is
0'. 0' needs to make sure that the user is completely new and has no active order. To do this,
we are going to use &	. Fixtures are 4 exclusively available in testing. We can
use these methods to clear our database or add seed data. Let's start by making a fixture that ensures that
the user is anonymous and another fixture that clears all the orders:
W

/
C/

#
..
4
ALA#
	=
	?=
ALA#
8'23
87'23
Now, we can call these methods in the 0' function (or any other function) using the
	' function:
W



	C

	

#
..

-#
	0'&^=&9#
	'ALA
	'ALA
Notice that we are using 	', but we can use 	 too since this is a call to
4. Now let's program @:
W



	C

	

#
..


-#

-1..
	0'&^=&9#

	@&^='A1:^A;*A&91
#
	)
'1
'E88!L?E+9

	@&^=)A1:^A;*A&9
1#
	)
)GFA*A
)G,A
A
A
#1BC23A
1
The 	) object gives access to an instance of webdriver. This means that we can use the
webdriver functions to simulate user clicks, inspect elements, and browse the Web. Notice that we can
require NPM modules through the  function as well. In this case, we will require the 
module to help identify routes.
The first @ function requires a single argument defined by the regular expression. In this case, it is
the 
 variable. Arguments will always be listed one by one as they are defined in the regular
expression, and they will end with the callback function (which we do not need to use): 1B9
J9$9#.
The second @ function needs to wait for the DOM to load before acting on it. To do this, we will use
the )GF and )G, functions. If the elements do not render, then the test
will fail due to a timeout in this function. Remember that if you ever want to see what the test is doing,
you can browse to your mirror.
You can find a full list of the available webdriver functions at http://webdriver.io/api.html, but here is a
list of the ones you will use the most:
	
'
)GF1:99';
Default timeout: O%%, reverse: .
This waits for an element to render on
the DOM. Setting the ' flag to
 will instead wait for the element
to stop existing.
)G,1:99'; Default timeout: O%%, reverse: .

	
'
This waits for an element to be visible
(checks that the display CSS property is
not set to any, that the element is not
outside the viewport, and that the

 CSS property is not set to
%). Setting the ' flag to 
will instead wait for the element to be
invisible.
1
51
51
51
This clicks an element. Can take in a
CSS selector.
,19'
,19'
This sends a sequence of keystrokes to
an element. Can use unicode characters
as well to simulate things such as
backspace and arrow keys. The
, function will append to a
set value.
!1
,1
This gets the node text or input value.
5
19


 19
This gets data on a CSS property or
DOM element attribute. The


 variable will return an
object instead of a string.
11'G0
This uses data obtained from any 
function. The first parameter is always
the value of the  function.
Now let's build our ! function and use  to evaluate that everything proceeded as expected:

W



	C

	

#
..

-#

	!&^='
)
&9#
	)
)G,ALA
!AL#1BA
1#


ABA
Here, we have used the  function to work with the value from the  node. We use Chai
to check whether the value obtained is correct. The list of Chai functions is long, and you will find
yourself using most of them. They are easy to guess though! You can find all of these functions here:
http://chaijs.com/api/bdd.

'
Unit tests are much easier to build than behavior tests. These tests make sure that only a section of the
web application is working correctly, such as 4 or a template helper.
Unit tests make it quicker to find bugs in broken behavior tests. They should be used mostly in parts that
you know can break easily, such as a publisher or a particular helper.
To run unit tests, we are going to use the (( package:



Now create two directories: &(&& and &(&'&
. These are the special directories where ( runs tests. Let's build a quick test for
the 
 publisher:
W


	


	
C	C

#
..
A
A9#
A
A9#
C6F!?

-41A
A

1
CF\F5?!F

-81
C,FE=GT



<?1
Jasmine is simple. First, you use the  function to describe the object of the feature, and then
you use the  function to explain each part of the feature that should work. It is common to divide the
evaluating function into three blocks: 6F!?, F\F5?!F and ,FE=GT. At setup, we make sure that
everything is ready for the test to run, then we execute a series of functions, and finally, we use the Chai
expressions to verify whether the test passes or fails.
Unit tests are great for testing peculiarities in your code that users might not see reflected visually. Have
a look at the Jasmine documentation at http://jasmine.github.io/2.3/introduction.html for a collection of
great examples.

	%
In this chapter, we learned how to build simple tests for our web application. In addition, we learned that
they are a crucial part of the development process in order to maintain the application in both a team and
nonteam setting. Behavior tests are the tests that make sure that the application is running all the features
as expected, while unit tests are the tests that make sure that only particular weak spots are running as
expected. Be careful with testing. While it is important to keep tests active for maintenance, it is more
important to focus on the programming of the product. If you do not have time to write a full behavior
test, write at least one unit test on a function that is critical for the web application to work.
In the next chapter, we are going to cover how to deploy our web application to a production quality
server and how to identify errors produced by the application easily, once the application is running.

 D, 
%
This chapter will cover the steps needed to make our web application live. Also, you will learn how to
set up an SSL certificate and how to track errors occurring in production actively. This chapter will
cover the following topics:
â€¢ Setting up Modulus.io
â€¢ Setting up Compose.io
â€¢ Automatic error tracking
â€¢ Setting up an SSL certificate
$		
	
Modulus is currently the best place to host a Meteor project. Why? It is easy to set up and maintain.
While there are several other services where we can obtain the same results, every single one of them
requires more expertise with servers and a considerable amount of time on your end. We are not
developing a server. We are developing an application.
Modulus.io provides support for sticky sessions, web sockets, and free SSL endpoints.
Keep in mind that Meteor's Galaxy hosting service is going to be released soon and will undoubtedly
become the best place to host a Meteor web application. Until then, Modulus is the way to go.
Let's start by creating a free account at http://modulus.io:

Next, you need to install the H tool and the 5+= tool. Run the following
commands in your terminal:
	
$E
	
$
This did not work! If your 
 command fails, then you need to install  and 
.
To make sure that we install 
 properly, we need to add ) first. Install this by running this
command:
6'
2-	

*



)6
Once this is done, run this command:



When this command finishes installing everything, we will have both  and 
 available globally
from our command line.
Now we can install both H and  easily:
	
$E
	
$
Excellent. Now we have all the tools that we need. Let's create a new project (if you want to feel like a
pro, you can use the CLI too):
Make sure to select 0,L as the runtime environment for the project and set the size of memory of
the servo to -I56. If you find there is a lot of traffic coming in, you can increase the memory of the
server at any time to scale your application easily.

Once you have created your servo, go to the +0++(0 tab:

Now copy the URL that has been generated for the project found next to the G	#C'2 text:
Scroll all the way to the end of the page to the !04+(0!04+62!. The first thing that we
need to do is set the E88!L?E+ environment variable. Paste the project URL here. Make sure it has the

 protocol. Here, we are taking advantage of Modulus' secure SSL endpoint. The
)H package will make sure that all routes will hit our E88!L?E+:

Next, we need to set up our database. We cannot deploy this yet because the application is not aware of
where it is supposed to save information.

$	
Although Modulus.io offers MongoDB hosting, Modulus does not grant access to Meteor's 
$
$
feature and does not have any support for multiple replica sets. Both these features are must-haves for
production and this is why.
A MongoDB Replica Set is an exact copy of your database. When you first create a database in
Compose, you are automatically given a primary Replica Set with a secondary Replica Set to support it.
Since failures happen, the secondary Replica Set exists to replace the primary replica set immediately
when the primary fails. In the database world, this is known as data redundancy.
This layer of security adds an interesting problem; how do the secondary databases know about the
changes that are happening to the primary? The operations log, or oplog for short, is a special collection
that Mongo uses to record all the changes that are being made to the database. These changes are read by
the Replica Sets to reflect all necessary changes.
Great, now let's understand how Meteor uses the oplog. Meteor's default 
 and  method of
watching changes in the database is slow. It works by comparing changes between the database and the
client every 10 seconds. This creates multiple unnecessary hits on your database by default and is not
fast (since a change can occur 9 seconds before Meteor looks for changes) as well. To make Meteor
perform better, the Meteor team tapped into Mongo's oplog. By listening for changes in Mongo's oplog,
Meteor knows exactly when and which changes to push to the client. This is called oplog tailing.
Oplog tailing drastically improves Meteor's reactivity performance by effectively tailing Mongo's
operations log. It is guaranteed that a production app will not run smoothly without taking advantage of
this feature.
Create your account with 
:

Now create a new MongoDB:

Now click the ' tab. Here, we need to add a user that will have access to the database and the oplog.
This is the user that Modulus will use. In the following example, we are setting the user to , the
password to , and 
 to :
Click on the  tab. Copy the database URI that you see displayed under 
'+:
Notice the  and 
) sections of the string. We are going to replace these fields with
the user credentials that we had defined previously.
Go back to Modulus.io and visit the project's +0++(0 page. Scroll to the
!04+(0!04+62! section. Here, we need to add the URI that we had just copied in to
two different variables: 48>08L?E+ and 48>08L8+80L?E+.
The 48>08L?E+ will look like this:
&&	BB%BIK9B$
B%NB%&L
Notice that you can remove the query parameters (anything after and including the question mark).
The 48>08L8+80L?E+ will look like this:
&&	BB%BIK9B$
B%NB%&[6-L

Notice that we have modified the information after the trailing slash to
&[6-L
 where L
 is the name of the database.
Excellent! This is the last time we will have to configure anything for our project's deployment. Now we
can use the  CLI to deploy.
Go to your terminal and run the following command to log in to your user:


If you use your GitHub account to create your Modulus account, then pass the  flag:


Follow the instructions on the command line. Once you are logged in, you will need to make sure that
you are in your Meteor project's  directory (where you run the Meteor command). From here, run
the following command to deploy to your new server:

	
Modulus will ask which project you want to deploy to and begin. What does Modulus do? It first
identifies that the project is a Meteor project, then it runs 7 to convert the project into a
common Node.js app. This app is then deployed to the server and automatically initiated.

$	E
Perfect! Now that we can deploy production quality web applications, we need to understand how to
identify issues with them. This is where  comes into the picture. Kadira is a Meteor-
specific performance and error-monitoring tool. It will collect 4F triggered on both the
client and the server. It will also show performance data for publishers and subscribers.
Kadira does this and more, and the starting plan is completely free. Let's begin by signing up. After you
have signed up, you need to create a new app:
Decide a name for the app, and enter the same in the field, and click on :
Once created, you will see a view like this:

To finish, you will need to copy the code in step 2 and install the  and
H packages:
%
%
%
E
The H package improves the description of the errors from the client side.
Kadira will take advantage of this package automatically. It is important to note that the
H package is optional because it is still in active development and can cause
strange behavior in Meteor. Now, let's create a configuration file for Kadira:
WC

%

'>87FLF>,A
A
Q.

=.9..
We are done! With this simple configuration, we can now easily track application errors and more on
Kadira:

You will notice the ! tab on the top-left side of the screen. This tab will show us a list of all the
errors that will occur in our application. Have a look at  and their academy to learn more
about optimizing your Meteor web application.

$	2
2, or 	2%, is a technology that creates an encrypted connection between clients and
the server. This is necessary if we want to ensure that the data transferred to our server is encrypted; this
includes data such as credit card information.
Setting up SSL can be painful because it requires some command-line knowledge. We like to buy our
SSL certificates from https://www.namecheap.com/ because they are cheap and they get the job done.
The cheapest SSL certificate that you can get is #2; you can find the offering at this endpoint:
https://www.namecheap.com/security/ssl-certificates/single-domain.aspx.
After buying the certificate, you will need to generate a $$/	 (). Let's do
this. You will be first redirected to your #		%. Click on $:
Now click 0 and leave the window open:
Next, open up a terminal at your project directory, and create a & directory by running:
%




Now, let's use 
 to create our CSR. Run this command:
	

U
%
 #>!%	%



This will give you a prompt for your site contact information; all the information fields must be filled
out with your company or your information. The most important field is the  field,
which must be ))). Including the ))) will secure both
))) and .
The command has created a 
' file and a ' file; you can check this by
running:

Keep 
' somewhere safe! You will need this later. Now open the ' file with
any text editor such as Sublime, Atom, or, if you prefer something more basic, you can use nano or vim.
You can view the contents of the current directory folder by running:
	
Copy all the text in this file. This should look like this:
#####<F0=>5FE!=G=5 !FEF]?F6!#####
 
#####F>75FE!=G=5 !FEF]?F6!#####
Go to namecheap, and change the select box to ( and paste the CSR to namecheap's !
textarea field. This should look like this:
Now fill out the approver information:

Make sure that the e-mail you select is active and under your control! If you cannot receive e-mails from
the e-mail that you have selected, you will not be able to apply the SSL certificate to your webapp! In
the next screen, simply submit your order and wait for the 24
 e-mail to arrive:

Copy your validation code, and click on the  link in the e-mail. This will take you to another site
where you need to paste the validation code you copied and click on 0&:

Close the window, and wait until you receive a new e-mail with a ZIP file. Download the ZIP file and
unzip it. This will contain four files:  !F5 E,
584878E6  !5 , 584878E6 7,66'5 ,
and )))LL.

Now, we need to use these files to create a Certificate Authority Bundle for Modulus. This is, basically,
a concatenated version of all our certificates. Generate this by issuing this command in your command
line where the certificates are located:
CC
8G,GBGO2FB4228F8G,GBGO2FF+
8F
F+
V/8FO:C
This command will produce a new L directory with all the certificates
concatenated.
Now browse to the Modulus.io administration page; make sure that you have already pointed your
custom URL to your instance of Modulus by adding your domain name to the custom domains list.
Click on the plus icon:
Now open the 
' file that was generated together with the CSR, and copy the entire text
inside the file. Paste the information to the #E% textarea. Then open the
L file, copy the information here, and paste it to the  textarea:

Make sure to point your certificate to the ))) domain and the #))) domain.
Now to complete the process, we need to make sure that the )H
package routes traffic to the secured domain. Scroll to the !04+(0!04+62! section,
and replace E88!L?E+ with your domain starting with the 
 protocol. Your E88!L?E+ should
look like this: 
&&.
You might need to restart your server to make sure that all your settings take effect. Now go to your site,
and you will see that you are automatically directed to a properly secured version of your site!

	%
This chapter is straightforward. We learned how to deploy our application to a production server hosted
by modulus.io. Also, we learned how to set up our Modulus project to a production quality database
server provided by Compose. We chose Compose over Modulus because we can set up oplog tailing for
Meteor through it. To help us track application errors, we installed Kadira. Also, we learned how to set
up an SSL certificate for our server to secure our site further. With this knowledge, we can build
production quality web applications.

& 6, 6
$%
â€¢ Building Single-page Web Apps with Meteor, Fabian Vogelsteller
â€¢ Meteor Cookbook, Isaac Strack
â€¢ Meteor Design Patterns, Marcelo Reyna

+&

â€¢ About route
â—¦creating / Adding another route
â€¢ acceptance test
â—¦about / Types of tests, Acceptance tests
â—¦Nightwatch / Nightwatch
â—¦Laika / Laika
â€¢ accounts
â—¦URL / There's moreâ€¦
â€¢ account settings
â—¦URL / There's moreâ€¦
â€¢ accounts login
â—¦customizing / Customizing the accounts login, How to do it..., There's moreâ€¦
â€¢ accounts packages
â—¦about / Meteor's accounts packages
â—¦adding / Adding the accounts packages
â€¢ admin functionality, adding to templates
â—¦about / Adding admin functionality to our templates
â—¦link, adding for new posts / Adding a link for new posts
â—¦link, adding for edit posts / Adding the link to edit posts
â—¦login form, adding / Adding the login form
â€¢ admin routes
â—¦creating / Creating routes for the admin
â—¦visitors, preventing from viewing / Preventing visitors from seeing the admin routes
â€¢ admin user
â—¦creating / Creating the admin user
â—¦permissions, adding / Adding permissions
â—¦security / A note on security
â—¦routes, creating / Creating routes for the admin
â€¢ advanced reactive objects
â—¦about / Advanced reactive objects
â€¢ advanced timer object
â—¦creating / Creating an advanced timer object
â€¢ aggregation framework
â—¦about / The aggregation framework
â€¢ aggregation publishers
â—¦about / Aggregation publishers
â—¦results, publishing / Publishing the results
â€¢ Ajax
â—¦dynamic graphs, creating with / Creating dynamic graphs with SVG and Ajax, How to
do it..., How it works...
â€¢ Ajax query results

â—¦using, in ReactiveVar / Using Ajax query results in ReactiveVar, How to do itâ€¦, How it
worksâ€¦
â€¢ allow rules
â—¦adding / Adding our first allow rules
â€¢ animations
â—¦about / Animations and transitions
â—¦executing, in Meteor / Executing animations in Meteor
â€¢ app
â—¦creating / Creating our first app
â—¦folder structure, creating / Creating a good folder structure
â—¦drop-in-place style files / Preadd style files
â—¦deploying, on meteor.com / Deploying on meteor.com
â—¦deploying, on other servers / Deploying on other servers
â—¦creating, Iron Router used / Creating a complete app with Iron Router, How to do itâ€¦,
How it worksâ€¦, There's moreâ€¦
â€¢ app deployment, on meteor.com
â—¦about / Deploying on meteor.com
â—¦domain name, used / Deploying on meteor.com using a domain name
â—¦databases, backing up / Backup and restore databases hosted on meteor.com
â—¦databases, restoring / Backup and restore databases hosted on meteor.com
â€¢ app deployment, on other servers
â—¦about / Deploying on other servers
â—¦app, building / Bundling our app
â—¦demeteorizer, using / Deploying using Demeteorizer
â—¦Meteor Up (mup), using / Deploying using Meteor Up
â€¢ Apple Developer license
â—¦URL / How to do itâ€¦
â€¢ apps
â—¦deploying, to mobile devices / Deploying apps to mobile devices, How to do itâ€¦,
There's moreâ€¦
â€¢ Arunoda Susiripala
â—¦URL / See also
â€¢ asynchronous events
â—¦handling / Handling asynchronous events, Getting ready, How to do itâ€¦, How it
worksâ€¦, There's moreâ€¦
â—¦baseline Meteor app, creating / Creating a baseline Meteor app
â—¦Twitter Access Tokens, obtaining / Obtaining your Twitter Access Tokens
â—¦twit, initializing / Initializing twit
â—¦Tweets collection, creating / Creating the Tweets collection, and building a stream
reader
â—¦stream reader, building / Creating the Tweets collection, and building a stream reader
â—¦changes, tracking / Tracking and testing changes
â—¦changes, testing / Tracking and testing changes
â€¢ asynchronous functions
â—¦using / Using asynchronous functions, How to do itâ€¦, How it worksâ€¦, See also
â€¢ Atmosphere

â—¦new packages, discovering with / Discovering new packages with Atmosphere, How to
do itâ€¦
â—¦URL / How to do itâ€¦, There's moreâ€¦, See also
â—¦custom packages, publishing to / Publishing custom packages to Atmosphere, Getting
ready, How to do itâ€¦, How it worksâ€¦
â€¢ Atmosphere FAQ
â—¦URL / How it worksâ€¦
â€¢ Atmospherejs.com / The must-have packages
â€¢ autoform plugin
â—¦about / Autoform
â—¦reference link / Autoform
â€¢ autopublish
â—¦turning off / Basic safety â€“ turning off autopublish, Getting ready, How to do it..., How
it works...
â—¦project, setting up / Project setup
â—¦basic template, creating / Creating a basic template
â—¦CSS styling, adding / Adding CSS styling
â€¢ autopublish package
â—¦removing / Removing the autopublish package
6
â€¢ basic templates
â—¦building / Building the basic templates
â€¢ behavior tests
â—¦about / Behavior tests
â—¦running / Behavior tests
â—¦steps / Behavior tests
â—¦feature / Behavior tests
â—¦Given command / Behavior tests
â—¦when command / Behavior tests
â—¦And command / Behavior tests
â—¦Then command / Behavior tests
â€¢ bindings
â—¦about / Reactive programming
â€¢ Blaze / Writing templates in Meteor
â€¢ Blaze helper
â—¦defining / Defining a Blaze helper
â€¢ Blaze templates
â—¦updating, without Mongo / Updating Blaze templates without Mongo, How to do itâ€¦,
See also
â€¢ block helpers
â—¦about / Block helpers
â—¦creating / Block helpers
â€¢ blog entries
â—¦adding / Listing posts
â€¢ Bootstrap

â—¦used, for building smooth interface / Building a smooth interface with Bootstrap, How
to do itâ€¦, How it worksâ€¦
â—¦URL / Getting ready, There's moreâ€¦
â—¦about / Bootstrap
â€¢ browser-policy
â—¦used, for protecting client / Protecting the client with browser-policy
â€¢ BrowserPolicy.framing
â—¦*.framing.disallow() function / Framing
â—¦*.framing.restrictToOrigin(origin) function / Framing
â—¦*framing.allowAll() function / Framing

â€¢ callback functions, templates
â—¦created / "this" in template helpers and template callbacks
â—¦rendered / "this" in template helpers and template callbacks
â—¦destroyed / "this" in template helpers and template callbacks
â€¢ Canvas
â—¦about / Animations and transitions
â€¢ Canvas element
â—¦coloring book, creating with / Creating a coloring book with the Canvas element, How
to do itâ€¦
â€¢ CDN-hosted bootstrap
â—¦adding / Add CDN-hosted bootstrap
â—¦URL / Add CDN-hosted bootstrap
â€¢ Certificate Signing Request (CSR) / Setting up an SSL certificate
â€¢ Chai
â—¦about / Behavior tests
â—¦URL / Behavior tests
â€¢ Chrome
â—¦web console, enabling / Chrome
â€¢ Chrome's developer tools
â—¦using / Using Chrome's developer tools
â€¢ client
â—¦protecting, with browser-policy / Protecting the client with browser-policy
â—¦CDN-hosted bootstrap, adding / Add CDN-hosted bootstrap
â—¦inline script, adding / Add inline and eval() scripts, How to do it..., How it works...
â—¦eval() script, adding / Add inline and eval() scripts, How to do it..., How it works...
â€¢ client-only collections
â—¦using / Using client-only collections, Getting ready, How to do itâ€¦, How it worksâ€¦
â€¢ client collection
â—¦versus server collection / Differences between client and server collections
â€¢ clinical-nightwatch
â—¦about / Nightwatch
â€¢ closures
â—¦about / HTML tags
â€¢ CNAME redirect

â—¦used, for deploying to Meteor / Deploying to Meteor using a CNAME redirect, How it
worksâ€¦
â€¢ CoffeeScript
â—¦using / Using CoffeeScript
â—¦working / How it worksâ€¦
â—¦about / CoffeeScript for Meteor
â—¦URL / Behavior tests
â€¢ CoffeeScript, for Meteor
â—¦about / CoffeeScript for Meteor
â—¦objects / Objects and arrays
â—¦arrays / Objects and arrays
â—¦logical statements / Logical statements and operators
â—¦operators / Logical statements and operators
â—¦functions / Functions
â—¦binding / Binding
â€¢ collection
â—¦about / Meteor and databases
â—¦setting up / Setting up a collection
â—¦querying / Querying a collection
â—¦updating / Updating a collection
â€¢ collections
â—¦about / Implementing a simple collection
â—¦paging / Filtering and paging collections
â€¢ coloring book
â—¦creating, with Canvas element / Creating a coloring book with the Canvas element,
How to do itâ€¦
â€¢ command-line tool, Meteor
â—¦about / The full-stack framework of Meteor, Meteor's command-line tool
â€¢ command-line tools, Meteor
â—¦run / List of Meteor's command-line tool commands
â—¦create <name> / List of Meteor's command-line tool commands
â—¦update / List of Meteor's command-line tool commands
â—¦deploy <site name> / List of Meteor's command-line tool commands
â—¦bundle <folder_name> / List of Meteor's command-line tool commands
â—¦add/remove <package name> / List of Meteor's command-line tool commands
â—¦list / List of Meteor's command-line tool commands
â—¦mongo / List of Meteor's command-line tool commands
â—¦reset / List of Meteor's command-line tool commands
â—¦logs <site name> / List of Meteor's command-line tool commands
â—¦search / List of Meteor's command-line tool commands
â—¦show / List of Meteor's command-line tool commands
â—¦publish / List of Meteor's command-line tool commands
â—¦publish-for-arch / List of Meteor's command-line tool commands
â—¦publish-release / List of Meteor's command-line tool commands
â—¦claim / List of Meteor's command-line tool commands
â—¦login / List of Meteor's command-line tool commands
â—¦logout / List of Meteor's command-line tool commands

â—¦whoami / List of Meteor's command-line tool commands
â—¦test-packages / List of Meteor's command-line tool commands
â—¦admin / List of Meteor's command-line tool commands
â€¢ Compose
â—¦setting up / Setting up Compose
â€¢ context variables and functions
â—¦this.isInsert / Collection2
â—¦this.isUpdate / Collection2
â—¦this.Upsert / Collection2
â—¦this.userId / Collection2, Webhooks
â—¦this.isFromTrustedCode / Collection2
â—¦this.isSet / Collection2
â—¦this.value / Collection2
â—¦this.operator / Collection2
â—¦this.field () / Collection2
â—¦this.user / Webhooks
â—¦this.urlParams / Webhooks
â—¦this.queryParams / Webhooks
â—¦this.bodyParams / Webhooks
â—¦this.request / Webhooks
â—¦this.response / Webhooks
â—¦this.done() / Webhooks
â€¢ core Meteor Development Group (MDG) packages / Adding Meteor packages
â€¢ core package
â—¦adding / Adding a core package
â€¢ CSS
â—¦animating with / Animating with CSS
â€¢ CSS compilers
â—¦using / Using CSS compilers
â€¢ CSS styling
â—¦adding / Adding CSS styling
â€¢ current Web
â—¦versus new Web / Syncing data â€“ the current Web versus the new Web
â€¢ custom components
â—¦creating / Creating custom components, How to do itâ€¦, There's moreâ€¦
â€¢ custom EJSON objects
â—¦creating / Creating custom EJSON objects, How to do itâ€¦, How it worksâ€¦, See also
â—¦Swatch object, declaring / Declaring the Swatch object
â—¦Swatches.insert(), modifying / Modifying Swatches.insert()
â—¦Swatch colors, changing / Changing Swatch colors
â€¢ custom hosted environment
â—¦deploying to / Deploying to a custom hosted environment, Getting ready, How to do
itâ€¦, How it worksâ€¦, There's moreâ€¦
â€¢ custom library
â—¦making, reactive / Making a custom library reactive, How to do itâ€¦, How it worksâ€¦
â€¢ custom package
â—¦tests folder / The structure of a package

â—¦lib folder / The structure of a package
â—¦README.md file / The structure of a package
â—¦package.js file / The structure of a package
â—¦myPackage.js file / The structure of a package
â—¦testing / The structure of a package
â—¦creating / Creating our own package
â—¦package metadata, adding / Adding the package metadata
â—¦adding / Adding the package
â—¦releasing, to public / Releasing our package to the public
â—¦publishing online / Publishing our package online
â—¦updating / Updating our package
â—¦building / Building a custom package, How to do itâ€¦, How it worksâ€¦
â—¦publishing, to Atmosphere / Publishing custom packages to Atmosphere, How to do
itâ€¦
â€¢ custom server methods
â—¦building / Building custom server methods, How to do it..., How it works...
â—¦project setup / Project setup
â—¦simple app, creating / Creating a simple app
â€¢ cutting edge UIs
â—¦creating, with Polymer / Creating cutting-edge UIs with Polymer, How to do itâ€¦, How
it worksâ€¦, There's moreâ€¦

â€¢ D3.js
â—¦used, for building graphs / Building graphs with D3.js, How to do itâ€¦, How it worksâ€¦
â—¦URL / Building graphs with D3.js
â—¦tutorials, URL / There's moreâ€¦
â€¢ data
â—¦displaying, with template helpers / Displaying data with template helpers
â—¦syncing / Syncing data â€“ the current Web versus the new Web
â—¦publishing / Publishing data
â—¦hiding, facades used / Hiding data with faÃ§ades, How to do it..., How it works...
â—¦loading / Loading data
â€¢ database
â—¦updating / Database everywhere
â€¢ database relationships
â—¦about / Database relationships
â—¦one to one / One to one
â—¦one to many / One to many
â—¦many to many / Many to many
â€¢ database updates
â—¦restricting / Restricting database updates
â—¦insecure package, removing / Removing the insecure package
â—¦allow rule, adding / Adding our first allow rules
â—¦deny rule, adding / Adding a deny rule
â€¢ data context
â—¦setting, for template / Setting the data context for a template

â—¦about / Creating helpers
â€¢ data on the wire principle / Introduction
â€¢ data publishing
â—¦notes / Some notes on data publishing
â€¢ data transactions
â—¦securing, allow used / Securing data transactions with allow and deny, How to do it...,
How it works..., There's moreâ€¦
â—¦securing, deny used / Securing data transactions with allow and deny, Getting ready,
How to do it..., How it works..., There's moreâ€¦
â€¢ DDP Analyzer
â—¦installing / Getting ready
â€¢ DDP clients
â—¦URL / There's moreâ€¦
â€¢ DDP stream
â—¦reading / Reading the DDP stream, Getting ready, How to do it..., How it works...
â€¢ default templates
â—¦layoutTemplate / Setting up the router
â—¦notFoundTemplate / Setting up the router
â—¦loadingTemplate / Setting up the router
â€¢ demeteorizer
â—¦used, for app deployment on other servers / Deploying using Demeteorizer
/ Setting up Compose
â€¢ deny function / Custom deny rules
â€¢ deny rule
â—¦adding / Adding a deny rule
â€¢ Deps.Computation object
â—¦about / Stopping reactive functions
â€¢ details (one to many)
â—¦orders, publishing with / Publishing orders with details (one to many)
â€¢ development environment
â—¦setting up / Setting up your development environment, Getting ready?, How to do itâ€¦,
How it worksâ€¦
â€¢ Distributed Data Protocol (DDP) / Introduction
â—¦integrating, with other technologies / Integrating DDP with other technologies, Getting
ready, How to do itâ€¦, How it worksâ€¦
â€¢ documentation, Meteor
â—¦searching / Finding documentation for Meteor, There's moreâ€¦
â—¦URL / How to do itâ€¦
â€¢ Document Object Model (DOM) / Inserting templates with Spacebars
â€¢ do function / Behavior tests
â€¢ domain-specific language (DSL) / Reactive programming
â€¢ DOM elements
â—¦animating / Animating DOM elements, How to do it..., How it worksâ€¦, There's
moreâ€¦
â€¢ dynamic graphs
â—¦creating, with SVG / Creating dynamic graphs with SVG and Ajax, How to do it...,
How it works...

â—¦creating, with Ajax / Creating dynamic graphs with SVG and Ajax, How to do it...,
How it works...
â€¢ dynamic lists
â—¦creating / Creating dynamic lists, How to do itâ€¦, How it worksâ€¦
â€¢ dynamic templates
â—¦using / Using dynamic templates, How to do it..., How it worksâ€¦
!
â€¢ eval() script
â—¦adding / Add inline and eval() scripts, How to do it..., How it works...
â€¢ Evented Mind file upload tutorials
â—¦URL / How to do itâ€¦
â€¢ event loop
â—¦about / The event loop and the merge box, The event loop
â€¢ events
â—¦adding, to templates / Adding events
â—¦about / Reactive programming, Templates, helpers, and events, Events
â€¢ example posts
â—¦adding / Adding post examples
â€¢ external API publishers
â—¦about / External API publishers
â—¦HTTP package / The HTTP package
â€¢ external APIs
â—¦filtering / Filtering and paging collections, Filtering
â—¦about / External APIs, Webhooks
â—¦webhooks / External APIs, Webhooks
â—¦synchronization / Synchronization
â€¢ {{#each}} block helper / Listing posts

â€¢ facades
â—¦used, for hiding data / Hiding data with faÃ§ades, How to do it..., How it works...
â€¢ fetch property
â—¦about / Adding our first allow rules
â€¢ Fibers
â—¦URL / There's moreâ€¦
â€¢ fields field specifier
â—¦URL / There's moreâ€¦
â€¢ file scope variables
â—¦about / File scope variables
â€¢ filter / Key, foreign key, options, and filter
â€¢ filtering
â—¦performing, with MongoDB queries / Filtering with MongoDB queries, How to do itâ€¦,
How it worksâ€¦
â€¢ findOne() method
â—¦about / Adding the post route

â€¢ Firefox
â—¦web console, enabling / Firefox
â€¢ fixtures
â—¦using / Behavior tests
â€¢ foreign key / Key, foreign key, options, and filter
â€¢ forms
â—¦about / Forms
â€¢ function
â—¦adding, for generating slugs / Adding a function to generate slugs
â€¢ functional test
â—¦about / Types of tests
â€¢ function binding
â—¦about / Binding
â€¢ Function re-run / Rerunning functions
â€¢ functions
â—¦rerunning / Rerunning functions reactively
â€¢ functions, BrowserPolicy.content
â—¦*.content.allowInlineScripts() / Content
â—¦*.content.disallowInlineScripts() / Content
â—¦*.content.allowEval() / Content
â—¦*.content.disallowEval() / Content
â—¦*.content.allowInlineStyles() / Content
â—¦*.content.disallowInlineStyles() / Content
â—¦*.allowScriptOrigin(origin) / Content
â—¦*.allow<ContentType>DataUrl() / Content
â—¦*.allow<ContentType>SameOrigin() / Content
â—¦*.allowSameOriginForAll() / Content
â—¦*.allowDataUrlForAll() / Content
â—¦*.allowOriginForAll(origin) / Content
â—¦*.disallowAll() / Content
"
â€¢ Galaxy / Outlook, There's moreâ€¦
â€¢ Git
â—¦using / Using Git and GitHub
â—¦installing / Installing Git
â€¢ GitHub
â—¦using / Using Git and GitHub
â—¦URL / Getting ready, There's moreâ€¦
â€¢ global dictionary
â—¦making / Making a global dictionary
â€¢ global helpers
â—¦customized global helpers, creating / Creating customized global helpers, How to do
itâ€¦, How it worksâ€¦, There's moreâ€¦
â€¢ Graphical User Interface (GUI) / Behavior tests
â€¢ graphs
â—¦building, with D3.js / Building graphs with D3.js, How to do itâ€¦, How it worksâ€¦

1
â€¢ help, with questions
â—¦major sources / How to do itâ€¦
â€¢ helpers
â—¦about / Templates, helpers, and events, Creating helpers
â€¢ Highlights.js themes
â—¦URL / How to do it...
â€¢ hot code push
â—¦about / Session and hot code pushes
â—¦session object, using with / Session and hot code pushes
â€¢ hot code reload
â—¦about / The full-stack framework of Meteor
â€¢ HTML attributes
â—¦reactivity, using with / Using reactivity with HTML attributes, How to do itâ€¦
â€¢ HTML canvas
â—¦URL / There's moreâ€¦
â€¢ HTML FileReader
â—¦used, for uploading images / Using the HTML FileReader to upload images, Getting
ready, How to do itâ€¦, How it worksâ€¦, There's moreâ€¦
â€¢ HTTP package
â—¦about / The HTTP package
+
â€¢ icon stacking feature
â—¦about / Bootstrap
â€¢ images
â—¦uploading, HTML FileReader used / Using the HTML FileReader to upload images,
How to do itâ€¦, How it worksâ€¦
â€¢ images (one to one)
â—¦product, publishing with / Publishing products with images (one to one)
â€¢ implied parenthesis / Logical statements and operators
â€¢ inclusive / There's moreâ€¦
â€¢ inline data
â—¦used, for modifying UI elements reactively / Using inline data to modify UI elements
reactively, How to do it..., How it works..., There's moreâ€¦
â€¢ inline script
â—¦adding / Add inline and eval() scripts, How to do it..., How it works...
â€¢ insecure package
â—¦removing / Removing the insecure package, Basic safety â€“ removing insecure, How to
do it..., How it works...
â€¢ insert() rule
â—¦about / Adding our first allow rules
â€¢ integrated functions
â—¦never() / Deny rules
â—¦ifLoggedIn() / Deny rules
â—¦ifHasUserId() / Deny rules

â—¦ifHasRole() / Deny rules
â—¦onlyProps() / Deny rules
â—¦exceptProps() / Deny rules
â€¢ integrations test
â—¦about / Types of tests
â—¦adding, to client / Adding integration tests to the client
â—¦test, adding for visitors / Adding a test for the visitors
â—¦test, adding for admin / Adding a test for the admin
â€¢ invalidating cycle, reactive dependencies
â—¦about / The invalidating cycle
â€¢ iron-router package
â—¦adding / Adding the iron:router package
â€¢ Iron Router
â—¦about / Creating a multipage application with Iron Router
â—¦multipage application, creating with / Creating a multipage application with Iron
Router, How to do itâ€¦, How it worksâ€¦
â—¦URL / There's moreâ€¦, There's moreâ€¦, There's moreâ€¦, Creating a complete app with
Iron Router
â—¦used, for creating app / Creating a complete app with Iron Router, How to do itâ€¦, How
it worksâ€¦, There's moreâ€¦
â€¢ {{#if}} block helper / Spacebars syntax
L
â€¢ Jade
â—¦about / Jade for Meteor
â€¢ Jade, for Meteor
â—¦about / Jade for Meteor
â—¦HTML tags / HTML tags
â—¦templates / Templates and components
â—¦components / Templates and components
â—¦helpers / Helpers
â€¢ Jasmine
â—¦used, for testing app / Testing using Jasmine
â€¢ Jeet
â—¦about / Jeet grid systems with Rupture
â€¢ Jeet grid systems, with Rupture / Jeet grid systems with Rupture
â€¢ jQuery plugin
â—¦URL / How to do itâ€¦
â€¢ jQuery UI
â—¦integrating / Integrating a jQuery UI, Getting ready, How to do it..., There's moreâ€¦
â—¦URL / Getting ready
E
â€¢ Kadira
â—¦setting up / Setting up Kadira
â€¢ key / Key, foreign key, options, and filter

2
â€¢ Laika
â—¦about / Laika
â—¦installing / Laika
â€¢ latency compensation
â—¦about / Method stubs and latency compensation
â€¢ layout template
â—¦switching to / Switching to a layout template
â€¢ lazy loading
â—¦posts / Lazy loading posts
â—¦about / Lazy loading posts
â€¢ Less
â—¦using / Using Less
â€¢ less package
â—¦adding / Adding a core package
â€¢ loading indicator
â—¦designing / Designing the loading indicator
â—¦implementing / Implementing the loading indicator

â€¢ #meteor IRC channel
â—¦about / The #meteor on IRC
â€¢ many to many database relationship / Many to many
â€¢ mapping table
â—¦about / Many to many
â€¢ MDN FileReader article
â—¦URL / There's moreâ€¦
â€¢ MDN SVG tutorial
â—¦URL / How it works...
â€¢ MDN tutorial
â—¦URL / How it works...
â€¢ meetup
â—¦URL / How to do it...
â€¢ merge box
â—¦about / The event loop and the merge box, The merge box
â€¢ Meta
â—¦using / Using Meta
â€¢ Meteor
â—¦about / The full-stack framework of Meteor
â—¦full-stack framework / The full-stack framework of Meteor
â—¦reference link / The full-stack framework of Meteor
â—¦features / The full-stack framework of Meteor
â—¦command-line tool / The full-stack framework of Meteor
â—¦requisites / Meteor's requirements
â—¦installing / Installing Meteor, Installing Meteor, Getting ready, There's more...
â—¦variable scopes / Variable scopes

â—¦folder conventions and loading order / Meteor's folder conventions and loading order
â—¦assets, loading / Loading assets on the server
â—¦updating / Updating Meteor
â—¦deploying / Deploying Meteor
â—¦MongoDB, using / Meteor and databases
â—¦accounts packages / Meteor's accounts packages
â—¦documentation, searching for / Finding documentation for Meteor, There's moreâ€¦
â—¦quick tips, on getting help with questions / Getting help with questions
â—¦deploying to, CNAME redirect used / Getting ready, How it worksâ€¦
â—¦URL / There's moreâ€¦, See also, There's moreâ€¦
â—¦animations, executing in / Executing animations in Meteor
â€¢ Meteor-specific app
â—¦URL / How it worksâ€¦
â€¢ Meteor.Collection
â—¦insert method / Setting up a collection
â—¦update method / Setting up a collection
â—¦upsert method / Setting up a collection
â—¦remove method / Setting up a collection
â—¦find method / Setting up a collection
â—¦findOne method / Setting up a collection
â€¢ meteor.com
â—¦app, deploying on / Deploying on meteor.com
â€¢ Meteor.defer(<function>) function / Managing the wait time
â€¢ Meteor.publish function / Publishing data
â€¢ Meteor app
â—¦testing / Testing our meteor app
â€¢ Meteor data model
â—¦about / Introduction
â€¢ Meteor documentation
â—¦URL / There's moreâ€¦
â€¢ Meteor forums
â—¦about / Meteor forums
â—¦URL / There's moreâ€¦
â€¢ Meteor GitHub
â—¦URL / There's more...
â€¢ meteorhacks$npm
â—¦URL / There's more...
â€¢ Meteor methods
â—¦about / Meteor Methods
/ The Meteor methods â€“ round 2
â€¢ Meteor packages
â—¦about / Adding basic packages
â—¦less package / Adding basic packages
â—¦jeeeyul-moment-with-langs / Adding basic packages
â—¦core package, adding / Adding a core package
â—¦third-party package / Adding a third-party package
â—¦adding / Adding Meteor packages, Getting ready, There's moreâ€¦

â—¦removing / Removing Meteor packages
â€¢ Meteor repository
â—¦URL / There's more...
â€¢ Meteor Up (mup)
â—¦about / Deploying using Meteor Up
â—¦used, for app deployment on other servers / Deploying using Meteor Up
â—¦used, for setting up server / Setting up the server
â—¦deploying with / Deploying with mup
â€¢ Meteor Up (MUP)
â—¦deploying with / Deploying with Meteor Up (MUP), How to do itâ€¦
â—¦about / Deploying with Meteor Up (MUP)
â—¦working / How it worksâ€¦
â—¦URL / How it worksâ€¦
â€¢ methods
â—¦about / Adding posts using a method call
â—¦advantages / Method stubs and latency compensation
â—¦stub method / Method stubs and latency compensation
â—¦adding / Adding the method
â—¦calling / Calling the method
â€¢ Millennium Development Goal (MDG) core / How it worksâ€¦
â€¢ minimalism design
â—¦about / Responsive design
â€¢ mirror / Behavior tests
â€¢ mixins
â—¦about / Functions/mixins
â€¢ mobile devices
â—¦apps, deploying / Deploying apps to mobile devices
â€¢ Modulus
â—¦about / Setting up Modulus
â—¦setting up / Setting up Modulus
â€¢ Modulus.io
â—¦URL / Setting up Modulus
â€¢ Mongo
â—¦Blaze templates, updating without / Updating Blaze templates without Mongo, How to
do itâ€¦, See also
â€¢ MongoDB
â—¦using / Meteor and databases
â€¢ MongoDB collection
â—¦URL / There's moreâ€¦
â€¢ MongoDB database
â—¦about / Getting ready
â—¦URL / Getting ready
â€¢ MongoDB queries
â—¦sorting with / Sorting with MongoDB queries, How to do itâ€¦, There's moreâ€¦
â—¦filtering with / Filtering with MongoDB queries, How to do itâ€¦, There's moreâ€¦
â€¢ MongoDB query operators list
â—¦URL / How it worksâ€¦

â€¢ MongoDB Replica Set / Setting up Compose
â€¢ MongoDB service hosting
â—¦URL / Getting ready
â€¢ msavin$mongol package
â—¦URL / How it worksâ€¦
â€¢ multi-server DDP
â—¦implementing / Implementing multiserver DDP, Getting ready, How to do itâ€¦, How it
worksâ€¦
â€¢ multipage application
â—¦creating, with Iron Router / Creating a multipage application with Iron Router, How to
do itâ€¦, How it worksâ€¦, There's moreâ€¦
â€¢ {{#myBlockHelper}} helper / Spacebars syntax
â€¢ {{/myBlockHelper}} helper / Spacebars syntax
â€¢ {{> myTemplate}} helper / Spacebars syntax
â€¢ {{myProperty}} helper / Spacebars syntax
0
â€¢ new packages
â—¦discovering, with Atmosphere / Discovering new packages with Atmosphere, How to
do itâ€¦, There's moreâ€¦
â€¢ Nightwatch
â—¦about / Nightwatch
â—¦installing / Nightwatch
â€¢ Node
â—¦URL / Getting ready, Getting ready, Getting ready
â€¢ Node Package Manager (NPM)
â—¦about / Using npm modules
â—¦URL / Getting ready
â€¢ npm
â—¦URL / Getting ready, Getting ready
â€¢ Npm.depends declaration / How it worksâ€¦
â€¢ Npm.require function / How it worksâ€¦
â€¢ npm colors module
â—¦URL / How it worksâ€¦
â€¢ npm modules
â—¦using / Using npm modules, How to do itâ€¦, How it worksâ€¦
â€¢ npm packages
â—¦using, directly / Using npm packages directly, Getting ready, How to do it..., How it
works..., There's more...
(
â€¢ OAuth accounts packages
â—¦implementing / Implementing OAuth accounts packages, How to do it..., How it
works..., There's moreâ€¦
â€¢ one to many database relationship / One to many
â€¢ one to one database relationship / One to one

â€¢ online shop project
â—¦about / The beginning of our online shop
â—¦packages, requisites / The must-have packages
â—¦file structure / File structure
â€¢ oplog tailing feature / Setting up Compose
â€¢ Optimistic UI / The Meteor methods â€“ round 2
â€¢ options / Key, foreign key, options, and filter
â€¢ orders
â—¦publishing, with details (one to many) / Publishing orders with details (one to many)
â€¢ organization, setting up
â—¦URL / There's moreâ€¦
#
â€¢ package
â—¦about / The structure of a package
â—¦structure / The structure of a package
â€¢ packages
â—¦testing / Testing packages
â€¢ package tests
â—¦adding / Adding package tests
â—¦running / Running the package tests
â€¢ parameters, collection field
â—¦Type / Collection2
â—¦Decimal / Collection2
â—¦Optional / Collection2
â—¦regEx / Collection2
â—¦allowedValues / Collection2
â—¦Blackbox / Collection2
â—¦denyUpdate / Collection2
â—¦denyInsert / Collection2
â—¦autoValue / Collection2
â—¦Custom / Collection2
â—¦Unique / Collection2
â€¢ parameters, Restivus
â—¦apiPath / Webhooks
â—¦Version / Webhooks
â—¦enableCors / Webhooks
â€¢ partial collection
â—¦about / Implementing a partial collection
â—¦implementing / Getting ready, How to do itâ€¦, There's moreâ€¦
â€¢ partial data
â—¦publishing / Publishing only parts of data
â€¢ pattern functions, Meteor
â—¦Match.Any() / The Meteor methods â€“ round 2
â—¦Match.Integer() / The Meteor methods â€“ round 2
â—¦Match.ObjectIncluding() / The Meteor methods â€“ round 2
â—¦Match.Optional() / The Meteor methods â€“ round 2

â—¦Match.OneOf() / The Meteor methods â€“ round 2
â—¦Match.Where() / The Meteor methods â€“ round 2
â€¢ persistent-session
â—¦URL / Session and hot code pushes
â€¢ persistent variables
â—¦about / Persistent variables
â€¢ poll and diff / Reactive programming
â€¢ polyfill libraries / Introduction
â€¢ Polymer
â—¦URL / Creating cutting-edge UIs with Polymer, How to do itâ€¦
â—¦used, for creating cutting edge UIs / Creating cutting-edge UIs with Polymer, How to
do itâ€¦, How it worksâ€¦, There's moreâ€¦
â—¦app, creating / Creating your app and folders
â—¦folders, creating / Creating your app and folders
â—¦files, creating / Creating your files
â—¦Bower, configuring / Configuring Bower and installing Polymer
â—¦installing / Configuring Bower and installing Polymer
â—¦helper Meteor packages, adding / Adding helper Meteor packages
â—¦Meteor, configuring / Configuring Meteor
â€¢ PositiveSSL
â—¦about / Setting up an SSL certificate
â—¦reference link / Setting up an SSL certificate
â€¢ Postman
â—¦installing / Installing and configuring Postman, How to do it..., There's moreâ€¦
â—¦configuring / Installing and configuring Postman, How to do it..., There's moreâ€¦
â—¦URL / Installing and configuring Postman
â€¢ post route
â—¦setting up / Setting up the post route
â—¦single-post publication, creating / Creating a single-post publication
â—¦adding / Adding the post route
â—¦posts, linking / Linking the posts
â€¢ posts
â—¦lazy loading / Lazy loading posts
â—¦creating / Creating a new post
â—¦saving / Saving a post
â—¦editing / Editing posts
â—¦current post, updating / Updating the current post
â—¦adding, method call used / Method stubs and latency compensation
â€¢ posts subscription
â—¦moving to Home route / Moving the posts subscription to the Home route
â€¢ Prerender.io
â—¦about / Prerender.io
â€¢ products
â—¦publishing, with images (one to one) / Publishing products with images (one to one)
â€¢ products (many to many)
â—¦tag, publishing with / Publishing a tag with products (many to many)
â€¢ project file structure

â—¦setting up / Setting up your project file structure, Getting ready, How to do itâ€¦, How it
worksâ€¦
â—¦client folder / client/server
â—¦server folder / client/server
â—¦main folder / main/lib
â—¦lib folder / main/lib
â—¦public folder / public/private
â—¦private folder / public/private
â—¦both folder / both
â€¢ publication/subscription
â—¦about / Syncing data â€“ the current Web versus the new Web

â€¢ raw HTML
â—¦inserting, triple braces used / Inserting raw HTML using triple braces, How to do itâ€¦,
How it worksâ€¦
â€¢ raw repository
â—¦URL / There's moreâ€¦
â€¢ reactive computation
â—¦about / How it works..., How it works...
â€¢ reactive computations
â—¦about / Reactive computations
â—¦reactive functions, stopping / Stopping reactive functions
â—¦run, preventing at start / Preventing run at start
â€¢ reactive contexts
â—¦about / How it works...
â€¢ reactive functions
â—¦stopping / Stopping reactive functions
â—¦making template-specific / Using autorun in a template
â€¢ reactive object
â—¦about / Building a simple reactive object
â€¢ reactive programming
â—¦about / Reactive programming, Introduction
â—¦invalidating cycle / The invalidating cycle
â€¢ reactive providers
â—¦about / How it works...
â€¢ reactive session object
â—¦about / The reactive session object
â€¢ reactive templates / Writing templates in Meteor
â€¢ reactive value
â—¦creating / Creating and consuming a reactive value, How to do it..., How it works...,
There's moreâ€¦
â—¦consuming / Creating and consuming a reactive value, How to do it..., How it works...,
There's moreâ€¦
â€¢ ReactiveVar
â—¦Ajax query results, using / Using Ajax query results in ReactiveVar, How to do itâ€¦,
How it worksâ€¦

â€¢ ReactiveVar variables
â—¦about / The ReactiveVar variables
â€¢ reactivity
â—¦about / Reactive programming
â—¦using, with HTML attributes / Using reactivity with HTML attributes, How to do itâ€¦
â€¢ relations
â—¦publishing with / Publishing with relations
â€¢ remove() rule
â—¦about / Adding our first allow rules
â€¢ repeatable functions / Forms
â€¢ requisites, Meteor
â—¦about / Meteor's requirements
â—¦Chrome's developer tools / Using Chrome's developer tools
â—¦Git / Using Git and GitHub
â—¦GitHub / Using Git and GitHub
â€¢ responsive design
â—¦about / Responsive design
â—¦general settings / General settings
â€¢ REST / Creating RESTful web services
â€¢ RESTful web services
â—¦creating / Creating RESTful web services, Getting ready
â—¦baseline application, creating / Creating the baseline application
â—¦Postman, installing / Installing and configuring Postman, How to do it..., How it
works...
â—¦Postman, configuring / Installing and configuring Postman, How to do it..., How it
works...
â€¢ router
â—¦setting up / Setting up the router
â—¦gotchas / Router gotchas
â€¢ router controller hooks
â—¦action / The iron:router hooks
â—¦onBeforeAction / The iron:router hooks
â—¦onAfterAction / The iron:router hooks
â—¦onRun / The iron:router hooks
â—¦onRerun / The iron:router hooks
â—¦onStop / The iron:router hooks
â—¦subscriptions / The iron:router hooks
â—¦waitOn / The iron:router hooks
â—¦data / The iron:router hooks
â€¢ Running for the xx time / Stopping reactive functions
â€¢ Rupture
â—¦about / Jeet grid systems with Rupture

â€¢ Safari
â—¦web console, enabling / Safari
â€¢ SASS

â—¦using / Using SCSS / SASS
â€¢ Sassy CSS (SCSS)
â—¦about / Functions/mixins
â€¢ scaffolding
â—¦setup / Scaffolding setup
â€¢ Schema.org
â—¦about / Schema.org
â—¦reference link / Schema.org
â€¢ SCSS
â—¦using / Using SCSS / SASS
â€¢ secure functions / Forms
â€¢ Secure Remote Password (SRP) protocol
â—¦about / Meteor's accounts packages
â€¢ security
â—¦about / Security
â—¦roles / Roles
â—¦collection2 / Collection2
â—¦deny rules / Deny rules
â—¦custom deny rules / Custom deny rules
â—¦Meteor methods / The Meteor methods â€“ round 2
â—¦wait time, managing / Managing the wait time
â—¦browser policy / Browser policy
â—¦framing / Framing
â—¦content / Content
â€¢ semver specification
â—¦URL / How it worksâ€¦
â€¢ sendTwilio() method
â—¦creating / Creating and testing the sendTwilio() method
â—¦testing / Creating and testing the sendTwilio() method
â€¢ SEO
â—¦about / SEO
â—¦Prerender.io / Prerender.io
â—¦Meta, using / Using Meta
â—¦Schema.org / Schema.org
â€¢ server collection
â—¦versus client collection / Differences between client and server collections
â€¢ session object
â—¦about / Meteor's session object
â—¦using, in template helpers / Using sessions in template helpers
â—¦using, with hot code push / Session and hot code pushes
â€¢ Session object
â—¦about / Using the Session object
â—¦using / Using the Session object, How to do itâ€¦, How it worksâ€¦
â€¢ session variables
â—¦about / Session variables
â€¢ simple collection

â—¦implementing / Implementing a simple collection, Getting ready, How to do it..., How it
works...
â€¢ simple reactive object
â—¦building / Building a simple reactive object
â—¦functions, rerunning / Rerunning functions
â€¢ smooth interface
â—¦building, with Bootstrap / Building a smooth interface with Bootstrap, How to do itâ€¦,
How it worksâ€¦
â€¢ SMS service
â—¦creating, on Twilio / Creating an SMS service on Twilio
â€¢ social sharing
â—¦adding / Adding social sharing, Getting ready, How to do itâ€¦, There's moreâ€¦
â€¢ sorting
â—¦performing, with MongoDB queries / How to do itâ€¦, How it worksâ€¦, There's moreâ€¦
â€¢ Spacebars
â—¦about / Writing templates in Meteor
â—¦used, for inserting templates / Inserting templates with Spacebars, How to do it..., How
it works...
â—¦URL / There's moreâ€¦
â€¢ Spacebars syntax
â—¦about / Spacebars syntax
â—¦parent data contexts, accessing / Accessing parent data contexts
â—¦data, passing to helpers / Passing data to helpers
â€¢ special attributes
â—¦about / HTML tags
â€¢ specific fields
â—¦publishing / Publishing specific fields
â€¢ Square
â—¦about / External API publishers
â€¢ SSL
â—¦about / Setting up an SSL certificate
â€¢ SSL certificate
â—¦setting up / Setting up an SSL certificate
â—¦URL, for buying / Setting up an SSL certificate
â€¢ Stack Overflow
â—¦about / Stack Overflow
â—¦URL / Stack Overflow, There's moreâ€¦
â€¢ stateful pagination
â—¦about / Stateful pagination
â€¢ string interpolation
â—¦about / Functions
â€¢ Stripe
â—¦about / External API publishers
â€¢ Stylus
â—¦using / Using Stylus
â—¦about / Stylus for Meteor
â€¢ Stylus, for Meteor

â—¦about / Stylus for Meteor
â—¦CSS tags / CSS tags
â—¦variables / Variables
â—¦mixins / Functions/mixins
â—¦functions / Functions/mixins
â€¢ Stylus Nib
â—¦about / Animating with CSS
â€¢ subscriptions
â—¦switching / Switching subscriptions
â€¢ super helpers
â—¦about / Super helpers
â—¦Blaze helper, defining / Defining a Blaze helper
â—¦global dictionary, making / Making a global dictionary
â€¢ supported attributes
â—¦URL / Filtering
â€¢ SVG
â—¦dynamic graphs, creating with / Creating dynamic graphs with SVG and Ajax, How to
do it..., How it works...
â€¢ SVG templates / Creating dynamic graphs with SVG and Ajax
â€¢ Swatches.insert()
â—¦modifying / Modifying Swatches.insert()
â€¢ Swatch object
â—¦declaring / Declaring the Swatch object
â€¢ synchronization
â—¦about / Synchronization

â€¢ tab
â—¦about / Objects and arrays
â€¢ tabbing
â—¦about / Objects and arrays
â€¢ tag
â—¦publishing, with products (many to many) / Publishing a tag with products (many to
many)
â€¢ template, for editing posts
â—¦creating / Creating the template to edit posts
â€¢ template-level subscriptions
â—¦about / Template-level subscriptions
â—¦products, setting up for online shop / Setting up products for the online shop
â—¦publisher, building / Building the publisher
â—¦subscribing, to publisher / Subscribing to the publisher
â€¢ template helpers
â—¦data, displaying with / Displaying data with template helpers
â—¦session object, using / Using sessions in template helpers
â€¢ templates
â—¦writing / Writing templates in Meteor
â—¦adding / Adding templates and partials

â—¦data context, setting for / Setting the data context for a template
â—¦callback functions / "this" in template helpers and template callbacks
â—¦events, adding / Adding events
â—¦block helpers / Block helpers
â—¦inserting, with Spacebars / Inserting templates with Spacebars, How to do it..., How it
works...
â—¦about / Templates, helpers, and events, Templates
â€¢ template utilities
â—¦URL / There's moreâ€¦
â€¢ test app
â—¦deploying, to Meteor / Deploying a test app to Meteor, How to do itâ€¦, How it worksâ€¦
â€¢ testing, with Jasmine
â—¦about / Testing using Jasmine
â—¦unit tests, adding to server / Adding unit tests to the server
â—¦integration tests, adding to client / Adding integration tests to the client
â€¢ tests
â—¦about / Types of tests
â—¦unit test / Types of tests
â—¦integrations test / Types of tests
â—¦functional test / Types of tests
â—¦acceptance test / Types of tests
â€¢ third-party package
â—¦adding / Adding a third-party package
â€¢ third party packages / Introduction
â€¢ this.$(selectorString) method / "this" in template helpers and template callbacks
â€¢ this.autorun(runFunc) object / "this" in template helpers and template callbacks
â€¢ this.data object / "this" in template helpers and template callbacks
â€¢ this.find(selectorString) method / "this" in template helpers and template callbacks
â€¢ this.findAll(selectorString) method / "this" in template helpers and template callbacks
â€¢ this.firstNode object / "this" in template helpers and template callbacks
â€¢ this.lastNode object / "this" in template helpers and template callbacks
â€¢ this.view object / "this" in template helpers and template callbacks
â€¢ this in template helpers
â—¦about / "this" in template helpers and template callbacks
â—¦examples / "this" in template helpers and template callbacks
â€¢ this object
â—¦unblock() property / Adding the method
â—¦userId property / Adding the method
â—¦setUserId() property / Adding the method
â—¦connection property / Adding the method
â€¢ transform() function
â—¦about / Adding our first allow rules
â€¢ transitions
â—¦about / Animations and transitions
â€¢ transparent mixin / Functions/mixins
â€¢ triple braces

â—¦used, for inserting raw HTML / Inserting raw HTML using triple braces, How to do
itâ€¦, How it worksâ€¦
â€¢ Twilio
â—¦URL / Signing up for the Twilio SMS service
â€¢ twilio-node npm package
â—¦installing / Installing the twilio-node npm package
â€¢ Twilio SMS service
â—¦signing up for / Signing up for the Twilio SMS service
â€¢ twit module
â—¦URL / There's moreâ€¦
â€¢ Twitter
â—¦URL / Obtaining your Twitter Access Tokens
â€¢ two-factor authentication
â—¦performing / Performing two-factor authentication, Getting ready, How to do it..., How
it works..., There's moreâ€¦
â—¦baseline application, creating / Creating our baseline application
â—¦Twilio SMS service, signing up for / Signing up for the Twilio SMS service
â—¦SMS service on Twilio, creating / Creating an SMS service on Twilio
â—¦twilio-node npm package, installing / Installing the twilio-node npm package
â—¦sendTwilio() method, creating / Creating and testing the sendTwilio() method
â€¢ {{> Template.dynamic template=templateName [data=dataContext]}} helper / Spacebars syntax
'
â€¢ UI elements
â—¦modifying reactively, inline data used / Using inline data to modify UI elements
reactively, How to do it..., There's moreâ€¦
â€¢ unit test
â—¦about / Types of tests
â—¦adding, to server / Adding unit tests to the server
â€¢ unit tests
â—¦about / Unit tests
â—¦running / Unit tests
â—¦URL / Unit tests
â€¢ upsert MongoDB queries
â—¦creating / Creating upsert MongoDB queries, How to do itâ€¦, How it worksâ€¦
â€¢ utc() function / Synchronization
â€¢ {{#unless}} block helper / Spacebars syntax
4
â€¢ variable scopes
â—¦about / Variable scopes
â€¢ variable types
â—¦about / Variable types
â—¦session variables / Session variables
â—¦persistent variables / Persistent variables
â—¦file scope variables / File scope variables

â—¦ReactiveVar variables / The ReactiveVar variables

â€¢ web console
â—¦using / Using the web console, Getting ready
â—¦enabling, in Safari / Safari
â—¦enabling, in Firefox / Firefox
â—¦enabling, in Chrome / Chrome, How to do itâ€¦
â—¦working / How it worksâ€¦
â—¦about / There's moreâ€¦
â—¦URL / There's moreâ€¦
â€¢ webdriver functions
â—¦URL / Behavior tests
â—¦waitForExist() / Behavior tests
â—¦waitForVisible() / Behavior tests
â—¦rightClick(selector) / Behavior tests
â—¦click(selector) / Behavior tests
â—¦doubleClick(selector) / Behavior tests
â—¦leftClick(selector) / Behavior tests
â—¦setValue() / Behavior tests
â—¦addValue / Behavior tests
â—¦getText(selector) / Behavior tests
â—¦getValue(selector) / Behavior tests
â—¦getCssProperty() / Behavior tests
â—¦getAttribute() / Behavior tests
â—¦then(function(valueFromGet)) / Behavior tests
â€¢ webhooks
â—¦about / Webhooks
â€¢ websites title
â—¦changing / Changing the website's title
â€¢ {{#with}} block helper
â—¦using / Using the {{#with}} block helper
â—¦about / Spacebars syntax
S
â€¢ Xcode
â—¦URL / How to do itâ€¦

