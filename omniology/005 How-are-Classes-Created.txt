© 2019 MathByte Academy

Classes are created somehow…
class Person:
pass
When Python encounters a class as it compiles (executes) our code
à a symbol Person is created in the namespace
à that symbol is a reference to the class Person (it is an object)
à how does Python create that class?
à a class is an instance of type
à that's why a class is also called a type
à type is a callable
(and is in fact a type (class) itself, and inherits from object)
© 2019 MathByte Academy

The inner mechanics of class creation
Step 1: The class body is extracted (basically just a blob of text, but it is valid code)
class Person:
planet = 'Earth'
name = property(fget=lambda self: self._name)
def __init__(self, name):
self._name = name
class body
Step 2: A new dictionary is created – this will be the namespace of the new class
Step 3: the body code is executed inside that namespace, thereby populating the namespace
(Think of this code directly inside a module: after the code has been executed, the 
module namespace will contain planet, name, __init__)
Step 4: A new type instance is created using the name of the class, the base 
classes and the populated dictionary
class name
à type(class_name, class_bases, class_dict) © 2019 MathByte Academy

Calling type
à type is itself a class
what happens when we call type?
à type(class_name, class_bases, class_dict)
à creates an instance of type
what happens when we call a custom class (e.g. Person('Alex'))?
à creates an instance of that custom class (e.g. Person instance)
à which will be a type (or class)
à named class_name
à inherits from class_bases
à class dictionary will be class_dict
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

