© 2019 MathByte Academy

Metaclasses aren't always the best approach…
à metaclasses are very powerful
à but they can be hard to understand when reading code
à sometimes decorators can work just as well
à generally easier to understand
à more functional in nature
© 2019 MathByte Academy

Decorating Classes
@my_dec
class MyClass:
…
recall what the decorator @ syntax actually does with a function:
@my_dec
def my_func():
pass
def my_func():
pass
my_func = my_dec(my_func)
à
same with class
@my_dec
class MyClass:
pass
class MyClass:
pass
MyClass = my_dec(MyClass)
à
© 2019 MathByte Academy

Decorating Classes
à write a decorator that expects a class as the input
à and returns the tweaked class
def savings_account(cls):
cls.account_type = 'Savings'
return cls
@savings_account
class BankAccount:
def __init__(self, account_number, balance):
self.account_number = account_number
self.balance = balance
same as doing this:
class BankAccount:
def __init__(self, account_number, balance):
self.account_number = account_number
self.balance = balance
BankAccount = savings_account(BankAccount)
à class is created first
à then it's decorated
© 2019 MathByte Academy

Can even make the decorator parametrized
def apr(rate):
def inner(cls):
cls.apr = apr
cls.apy = …
return cls
return inner
à account_type is a decorator factory
à it returns a decorator
@apr(0.02)
class SavingsAccount():
pass
@apr(0.0)
class CheckingAccount():
pass
à could use a metaclass instead
à would need to pass the rate parameter to the metaclass
à possible, we haven't learned that yet
à overkill!
© 2019 MathByte Academy

Class decorators can be used to…
create, delete or modify class attributes
à plain attributes
à modify methods
à maybe even apply decorators to class methods
à this is also metaprogramming
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

