8
© 2001 by CRC Press LLC
Partial Differential 
Equations
8.1
INTRODUCTION
Different engineering disciplines solve different types of problems in their respective
ﬁelds. For mechanical engineers, they may need to solve the temperature change
within a solid when it is heated by the interior heat sources or due to a rise or
decrease of its boundary temperatures. For electrical engineers, they may need to
ﬁnd the voltages at all circuit joints of a computer chip board. Temperature and
voltage are the variables in their respective ﬁelds. Hence, they are called ﬁeld
variables. It is easy to understand that the value of the ﬁeld variable is space-
dependent and time-dependent. That is to say, that we are interested to know the
spatial and temporal changes of the ﬁeld variable. Let us denote the ﬁeld variable
as . and let the independent variables be xi which could be the time t, or, the space
coordinates as x, y, and z. In order not to overly complicate the discussion, we
introduce the general two-dimensional partial differential equation which governs
the ﬁeld variable in the form of:
(1)
where the coefﬁcient functions A, B, and C in the general cases are dependent on
the variables x1 and x2, and the right-hand-side function F, called forcing function
may depend not only on the independent variables x1 and x2 but may also depend
on the ﬁrst derivatives of . There are innumerable of feasible solutions for Equation
1. However, when the initial and/or boundary conditions are speciﬁed, only particular
solution(s) would then be found appropriate.
In this chapter, we will discuss three simple cases when A, B, and C are all
constants. The ﬁrst case is a two-dimensional, steady-state heat conduction problem
involving temperature as the ﬁeld variable and only the spatial distribution of the
temperature needs to be determined, Equation 1 is reduced to a parabolic partial
differential equation named after Poisson and Laplace when the forcing function F
is not equal to, or, equal to zero, respectively. This is a case when the coefﬁcient
functions in Equation 1 are related by the condition B2–4AC<0.
The second case is a one-dimensional, transient heat conduction problem. Again,
the ﬁeld variable is the temperature which is changing along the longitudinal x-axis
A x x
x
B x x
x x
C x x
x
F x x
x
x
1
2
2
1
2
1
2
2
1
2
1
2
2
2
2
1
2
1
2
,
,
,
                               
,
, ,
,
(
) ∂
∂
+ (
)
∂
∂∂
+ (
) ∂
∂
=
∂
∂
∂
∂




φ
φ
φ
φ
φ
φ

© 2001 by CRC Press LLC
of a straight rod and also in time. That is, x1 becomes x and x2 become the time t.
Equation 1 is reduced to an elliptical partial differential equation. This is a case
when B2–4AC = 0.
The third case is the study of the vibration of a tightened string. The ﬁeld variable
is the lateral deﬂection of this string whose shape is changing in time. Equation 1
is reduced to a hyperbolic partial differential equation. If x is the longitudinal axis
of the string, then same as in the second case, the two independent variables are x
and t. This is a case when B2–4AC>0.
The reason that these problems are called parabolic, elliptical, and hyperbolic
is because their characteristic curves have such geometric features. Readers inter-
ested in exploring these features should refer to a textbook on partial differential
equations.
Details will be presented regarding how the forward, backward, and central
differences discussed in Chapter 4 are to be applied for approximating the ﬁrst and
second derivative terms appearing in Equation 1. Repetitive algorithms can be
devised to facilitate programming for straight-forward computation of the spatial
and temporal changes of the ﬁeld variable. Numerical examples are provided to
illustrate how these changes can be determined by use of either QuickBASIC,
FORTRAN, MATLAB, or, Mathematica programs.
Although explanation of the procedure for numerical solution of these three
types of problems is given only for the simple one- and two-dimensional cases, but
its extension to the higher dimension case is straight forward. For example, one may
attempt to solve the transient heat conduction problem of a thin plate by having two
space variables instead of one space variable for a long rod. The steady-state heat
conduction problem of a thin plate can be extended for the case of a three-dimen-
sional solid, and the string vibration problem can be extended to a two-dimensional
membrane problem.
8.2
PROGRAM PARABPDE — NUMERICAL SOLUTION 
OF PARABOLIC PARTIAL DIFFERENTIAL EQUATIONS
The program ParabPDE is designed for numerically solving engineering problems
governed by parabolic partial differential equation in the form of:
(1)
and  is a function of t and x and satisﬁes a certain set of supplementary conditions.
Equation 1 is called a parabolic partial differential equation. For example,  could
be the temperature, T, of a longitudinal rod shown in Figure 1 and the parameter a
in Equation 1 could be equal to k/c where k, c, and  are the thermal conductivity,
speciﬁc heat, and speciﬁc weight of the rod, respectively. To make the problem more
speciﬁc, the rod may have an initial temperature of 0°F throughout and it is com-
pletely insulated around its lateral surface and also at its right end. If its left end is
to be maintained at 100°F beginning at the time t = 0, then it is of interest to know
∂
∂=
∂
∂
φ
φ
t
a x
2
2

© 2001 by CRC Press LLC
how the temperatures along the entire length of the rod will be changing as the time
progresses. This is therefore a transient heat conduction problem. One would like
to know how long would it take to have the entire rod reaching a uniform temperature
of 100°F.
If the rod is made of a single material, k/c would then be equal to a constant.
Analytical solution can be found for this simple case.1 For the general case that the
rod may be composed of a number of different materials and the physical properties
k, c, and  would not only depend on the spatial variable x but may also depend on
the temporal variable t. The more complicated the variation of these properties in x
and t, the more likely no analytical solution is possible and the problem can only
be solved numerically. The ﬁnite-difference approximation of Equation 1 can be
achieved by applying the forward difference for the ﬁrst derivative with respective
to t and central difference for the second derivative with respect to x as follows (for
t at ti and x at xj):
If k/c  is changing in time and also changing from one location to another, we
could designate it as ai,j. As a consequence, Equation 1 can then be written as:
(2)
Since the initial temperature distribution T is known, the above expression
suggests that for a numerical solution we may select an appropriate increment in t,
t, and the temperature be determined at a ﬁnite number of stations, N. It is advisable
to have these stations be equally spaced so that the increment x is equal to L/(N–1)
where L is the length of the rod, and the instants are to be designated as t1 = 0, t2 =
t,…, ti = (i–1)t, and the stations as x1 = 0, x2 = x,…, xj = (j–1)∆x,…, and xN =
(N–1)x = L. The task at hand is then to ﬁnd T(ti,xj) for i = 1,2,… and j = 1,2,…,N.
It can be noticed from Equation 2 that the there is only one temperature at ti + 1 and
can be expressed in terms of those at the preceding instant ti as:
FIGURE 1.
 could be the temperature, T, of a longitudinal rod.
∂
∂=
−
∂
∂
=
−
+
(
)
+
−
+
T
t
T
T
t
and
T
x
T
T
T
x
i
j
i j
i j
i j
i j
˙
     
     
˙
,
,
,
,
,
1
2
2
1
1
2
2
∆
∆
T
T
t
a
T
T
T
x
i
j
i j
i j
i j
i j
i j
+
−
+
−
=
−
+
(
)
1
1
1
2
2
,
,
,
,
,
,
∆
∆

© 2001 by CRC Press LLC
(3)
Equation 3 is to be used for j = 2 through j = N–1. For the last station, j = N,
which is insulated,the temperatures on both side of this station can be assumed to
be equal (the station N + 1 is a ﬁctitious one!). The modiﬁed equation for this
particular station is:
(4)
For generating the temperatures of the rod at N stations for any speciﬁed time
increment t until the temperatures are almost all equal to 100°F throughout, the
program ParabPDE has been applied. It is listed below along with a typical printout
of the results.
FORTRAN VERSION
T
T
a
t
x
T
T
T
i
j
i j
i j
i j
i j
i j
+
−
+
=
+ (
)
−
+
(
)
1
2
1
1
2
,
,
,
,
,
,
∆
∆
T
T
a
t
x
T
T
i
N
i N
i N
i N
i N
+
−
=
+ (
)
−
(
)
1
2
1
2
,
,
,
,
,
∆
∆

© 2001 by CRC Press LLC
Sample Output

© 2001 by CRC Press LLC
QUICKBASIC VERSION
MATLAB APPLICATIONS
A MATLAB version of ParabPDE can be created easily by converting the
QuickBASIC program. The m ﬁle may be arranged as follows:

© 2001 by CRC Press LLC
For solving the sample transient temperature problem, this m ﬁle can be called
and interactive MATLAB instructions can be entered through keyboard to obtain
the temperature distribution of the rod at various times:

© 2001 by CRC Press LLC
Notice that results of temperature distributions which have been terminated using
ﬁve differentials of 1, 0.1, 0.01, 0.001, and 0.0001 Fahrenheit are saved in Tsave
and then later plotted. Since T is a row matrix, the transpose of T, T, is stored in
an appropriate column of Tsave. If the temperatures were rounded, the rod reaches
a uniform temperature distribution of 100°F when the required temperature differ-
ential is selected to be 0.001°F. If the ﬁfth curve for the temperature differential
equal to 0.0001 is plotted, it will be too close to the forth curve and also the plot
function provides only four line types (solid, broken, dot, and center lines), the ﬁfth
set of results is therefore not saved in Tsave. Figure 2 shows a composite graph with
axes labels and markings of the curves by making use of the MATLAB commands
xlabel, ylabel, and text.
MATHEMATICA APPLICATIONS
The heat conduction problem of an insulated rod previously discussed in the
versions for FORTRAN, QuickBASIC, and MATLAB can be solved by application
of Mathematica as follows:
FIGURE 2.
A composite graph with axes labels and markings of the curves by making use
of the MATLAB commands xlabel, ylabel, and text.

© 2001 by CRC Press LLC
In[1]: = (n = 11; rk = 0.037; c = 0.212; rho = 168; dt = 1; dx = 0.1;
c1 = rk/c/rho*dt/dx^2; nm1 = n–1;)
In[2]: = (t = Table[0,{n}]; tn = Table[0,{n}]; t[[1]] = 100; tn[[1]] = 100; tdf = 1;
tm = 0; ﬂag1 = 0;
In[3]: = (While[ﬂag1 = = 0, Do[tn[[j]] = t[[j]] + c1*(t[[j–1]]–2*t[[j]] + t[[j + 1]]),
{j,2,nm1}];
tn[[n]] = t[[n]] + 2*c1*(t[[nm1]]-t[[n]]);tm = tm + dt;ﬂag1 = 1;
Do[If[Abs[tn[[I]]-t[[I]]]>tdf, ﬂag1 = 0; Break, 
Continue],{i,n}];
Do[t[[I]] = tn[[I]],{i,n}]]; Print[“t = “,tm]; Print[N[tn,3]])
Out[3] = t = 24
{100., 65.7, 37.5, 18.5, 7.83, 2.85, 0.892, 0.241, 0.0561, 0.0116, 0.00394}
The temperature distribution of the heated rod after 24 seconds is same as
obtained by the FORTRAN, QuickBASIC, and MATLAB versions when every
component of two consecutive temperature distribution, kept as {t} and {tn}, differ
no more than the allowed set value of tdf = 1 degree in In[2]. Any component has
a difference exceeding the tdf value will cause ﬂag1 to change from a value of 1 to
0 and the Break command in the second Do loop in In[2] to exit and to continue
the iteration. ﬂag1 is created to control the While command which determines when
the iteration should be terminated. The N[tn,3] instructs the components of {tn} be
printed with 3 signiﬁcant ﬁgures.
When tdf is changed to a value of 0.5, Mathematica can again be applied to yield
In[4]: = t = (Table[0,{n}]; tn = Table[0,{n}]; t[[1]] = 100; tn[[1]] = 100; 
tdf = 0.5; tm = 0; ﬂag1 = 0;)
In[5]: = (While[ﬂag1 = = 0,Do[tn[[j]] = t[[j]] + c1*(t[[j–1]]–2*t[[j]] + t[[j + 1]]),
{j,2,nm1}];
tn[[n]] = t[[n]] + 2*c1*(t[[nm1]]-t[[n]]);tm = tm + dt;ﬂag1 = 1;
Do[If[Abs[tn[[I]]-t[[I]]]>tdf, ﬂag1 = 0; Break, 
Continue],{i,n}];
Do[t[[I]] = tn[[I]],{i,n}]]; Print[“t = “,tm]; Print[N[tn,3]])
Out[5]: = t = 49
{100., 75.5, 53.2, 34.9, 21.3, 12., 6.24, 3., 1.35, 0.617, 0.413}
Notice that Mathematica takes only 49 seconds, one second less than that
required for the FORTRAN, QuickBASIC, and MATLAB versions. The reason is
that Mathematica keeps more signiﬁcant digits in carrying out all computations.
To show more on the effect of changing the tdf value, the following Mathematica
runs are provided:

© 2001 by CRC Press LLC
In[6]: = t = (Table[0,{n}]; tn = Table[0,{n}]; t[[1]] = 100; tn[[1]] = 100;
tdf = 0.1; tm = 0; ﬂag1 = 0;)
In[7]: = (While[ﬂag1 == 0, Do[tn[[j]] = t[[j]] + c1*(t[[j–1]]–2*t[[j]] + t[[j + 1]]),
{j,2,nm1}];
tn[[n]] = t[[n]] + 2*c1*(t[[nm1]]-t[[n]]);
tm = tm + dt; ﬂag1 = 1;
Do[If[Abs[tn[[I]]-t[[I]]]>tdf, ﬂag1 = 0; Break,
Continue],{i,n}];
Do[t[[I]] = tn[[I]],{i,n}]]; Print[“t = “,tm];
Print[N[tn,3]])
Out[7]: = t = 462
{100., 93.9, 88., 82.3, 77.1, 72.5, 68.5, 65.3, 63., 61.6, 61.1}
In[8]: = t = (Table[0,{n}]; tn = Table[0,{n}]; t[[1]] = 100; tn[[1]] = 100;
tdf = 0.05; tm = 0; ﬂag1 = 0;)
In[9]: = (While[ﬂag1 == 0, Do[tn[[j]] = t[[j]] + c1*(t[[j–1]]–2*t[[j]] + t[[j + 1]]),
{j,2,nm1}];
tn[[n]] = t[[n]] + 2*c1*(t[[nm1]]-t[[n]]);
tm = tm + dt; ﬂag1 = 1;
Do[If[Abs[tn[[I]]-t[[I]]]>tdf, ﬂag1 = 0; Break,
Continue],{i,n}];
Do[t[[I]] = tn[[I]],{i,n}]]; Print[“t = “,tm];
Print[N[tn,3]])
Out[9]: = t = 732
{100., 97., 94., 91.2, 88.5, 86.2, 84.2, 82.6, 81.5, 80.8, 80.5}
In[10]: = t = (Table[0,{n}]; tn = Table[0,{n}]; t[[1]] = 100; tn[[1]] = 100;
tdf = 0.0001; tm = 0; ﬂag1 = 0;
In[11]: = (While[ﬂag1 == 0, Do[tn[[j]] = t[[j]] + c1*(t[[j–1]]–2*t[[j]] + t[[j + 1]]),
{j,2,nm1}];
tn[[n]] = t[[n]] + 2*c1*(t[[nm1]]-t[[n]]);
tm = tm + dt; ﬂag1 = 1;
Do[If[Abs[tn[[I]]-t[[I]]]>tdf, ﬂag1 = 0; Break,
Continue],{i,n}];
Do[t[[I]] = tn[[I]],{i,n}]]; Print[“t = “,tm]; Print[N[tn,3]])
Out[11]: = t = 3159
{100., 100., 100., 100., 100., 100., 100., 100., 100., 100., 100.}
For tdf = 0.1 and tdf = 0.05, Mathematica continues to take lesser time than the
other version; but when tdf = 0.0001, Mathematica needs two additional seconds. The

© 2001 by CRC Press LLC
reason is that seven signiﬁcant ﬁgures are required in the last case, rounding may
have resulted in earlier termination of the iteration when the FORTRAN, Quick-
BASIC, and MATLAB versions are employed.
8.3
PROGRAM RELAXATN — SOLVING ELLIPTICAL PARTIAL 
DIFFERENTIAL EQUATIONS BY RELAXATION METHOD
The program Relaxatn is designed for solving engineering problems which are
governed by elliptical partial differential equation of the form:
(1)
where  is called the ﬁeld function and F(x,y) is called forcing function. When the
steady-state heat conduction of a two-dimensional domain is considered,2 then the
ﬁeld function becomes the temperature distribution, T(x,y), and the forcing function
becomes the heat-source function, Q(x,y). If the distribution of T is inﬂuenced only
by the temperatures at the boundary of the domain, then Q(x,y) = 0 and Equation
1 which is often called a Poisson equation is reduced to a Laplace equation:
(2)
The second-order, central-difference formulas (read the program DiffTabl) can
be applied to approximate the second derivatives in the above equation at an arbitrary
point x = xi and y = yj in the domain as:
and
By substituting both of the above equations into Equation 2 and taking equal
increments in both x- and y-directions, the reduced equation is, for x = y,
(3)
The result is expected when the temperature distribution reaches a steady state
because it states that the temperature at any point should be equal to the average of
its surrounding temperatures.
∂
∂
+ ∂
∂
= (
)
2
2
2
2
φ
φ
x
y
F x y
,
∂
∂
+ ∂
∂
=
2
2
2
2
0
T
x
T
y
∂
∂
=
−
+
(
)
−
+
2
2
1
1
2
2
T
x at x y
T
T
T
x
i
j
i
j
i j
i
j
 
,
˙
,
,
,
∆
∂
∂
=
−
+
(
)
−
+
2
2
1
1
2
2
T
y at x y
T
T
T
y
i
j
i j
i j
i j
 
,
˙
,
,
,
∆
T
T
T
T
T
i j
i
j
i
j
i j
i j
,
,
,
,
,
=
+
+
+
(
)
−
+
−
+
1
4
1
1
1
1

© 2001 by CRC Press LLC
Before we proceed further, it is appropriate at this time to introduce a numerical
case. Suppose that a plate which initially (at time t = 0) has a temperature equal to
0°F throughout and is insulated along a portion of its boundary, is suddenly heated
at its upper left boundary to maintain a linearly varying temperature Tb as shown in
Figure 3. If this heating process is to be maintained, we are then interested in
knowing the temperature distribution, changed from its initial state of uniformly
equal to 0°F if given sufﬁcient time to allow it to reach an equilibrium (steady) state.
Numerically, we intend to calculate the temperatures, denoted as a matrix [T], at a
selected number of locations. Therefore, the plate is ﬁrst divided into a gridwork of
M rows and N columns along the x- and y-directions, respectively, as indicated in
Figure 1. The directions of x- and y-axes are so selected for the convenience of
associating them with the row and column of the temperature matrix [T] which is
of order M by N. The values of M and N should be so decided such that the
increments x and y are equal in order to apply Equation 3. To be more speciﬁc,
let M = 10 and N = 20 and the linear temperature variation along the upper left
boundary Tb be:
(4)
Here, Ti,j is to be understood as the temperature at the location (xi,yj). Equation
4 describes the temperature along the left boundary y = y1 but only for xi in the
range of i = 1 to i = 6.
Since the temperatures at the stations which are on the insulated boundaries of
the plate are also involved, these unknown temperatures need to be treated differently.
By an insulated boundary, it means that there is no heat transfer normal to the
boundary. Since the heat ﬂow is depended on the temperature difference across that
FIGURE 3.
A plate, which initially (at time t = 0) had a temperature equal to 0°F throughout,
insulated along a portion of its boundary and suddenly heated at its upper left boundary to
maintain a linearly varying temperature Tb.
T
i
for
i
i,
     
     
, ,
,
1
10
1
1 2
6
=
−
(
)
=
…

© 2001 by CRC Press LLC
insulated boundary, mathematically it requires that T/n = 0 there, n being the
normal direction. At the vertical boundaries x = xM, we have T/n = T/x = 0 since
x is the normal direction. Based on the central difference and considering two
increments in the x direction, at a yjth station we can have:
or
(5)
Since xM + 1 is below the bottom boundary of the plate shown in Figure 3, there
is no need to calculate the temperatures there, however Equation 5 enables the
temperatures at the stations along the bottom boundary of the plate TM,j for j = 1 to
N to be averaged. Returning to Equation 4, we notice that if Equation 5 is substituted
into it, the resulting equation which relates only to three neighboring temperatures is:
(6)
Notice that j = 1 and j = N are not covered in Equation 6. These two cases
concerning the insulated stations at the left and right bottom corners of the plate
will be discussed after we address the two vertical, insulated boundaries y = y1 and
y = yN.
For the boundaries y = y1, ∂T/∂n becomes ∂T/∂y. Again, we can apply the central
difference for double y increments to obtain:
or
(7)
Thus, the modiﬁed Equation 3 for the left insulated boundary is:
(8)
In a similar manner, we can derive for the right insulated boundary y = yN
or
∂
∂
(
) =
−
(
)
=
+
−
T
x at
x
y
T
T
x
M
j
M
j
M
j
 
,
˙
,
,
1
1
2
0
∆
T
T
M
j
M
j
+
−
=
1
1
,
,
T
T
T
T
for
j
N
M j
M
j
M j
M j
,
,
,
,
   
  
, ,
,
=
+
+
(
)
=
…
−
−
−
+
1
4 2
2 3
1
1
1
1
∂
∂
(
) =
−
(
)
=
T
y at
x y
T
T
y
i
i
 
,
˙
,
,
1
1
0
2
2
0
∆
T
T
i
i
,
,
0
2
=
T
T
T
T
for
i
i
i
i
i
,
,
,
,
     
     
, ,
1
11
11
2
1
4
2
7 8 9
=
+
+
(
)
=
−
+
∂
∂
(
) =
−
(
)
=
+
−
T
y at
x y
T
T
y
i
N
i N
i N
 
,
˙
,
,
1
1
2
0
∆

© 2001 by CRC Press LLC
(9)
and
(10)
Having derived Equations 6, 8, and 10, it is easy to deduce the two special
equation for the corner insulated stations to be:
(11)
and
(12)
We have derived all equations needed for averaging the temperature at any station
of interest including those at the insulated boundaries by utilizing those at its
neighboring stations. It suggests that a continuous upgrading process can be devel-
oped which assumes that the neighboring temperatures are known. This so-called
relaxation method starts with an initial assumed distribution of temperature [T(0)]
and continues to use Equations 3 and 6 to 12 until the differences at all locations
are small enough. Mathematically, the process terminates when:
(13)
where  is a prescribed tolerance of accuracy and k = 0,1,2,… is the number of
sweeps in upgrading the temperature distribution. Superscripts (k + 1) and (k) refer
to the improved and previous distributions, respectively. The order of sweep will
affect how the temperatures should be upgraded. For example, if the temperatures
are to be re-averaged from top to bottom and left to right, referring to Figure 1, then
Equation 3 is to be modiﬁed as:
(14)
Notice that the neighboring temperatures in the row above, i–1, and in the column
to the left, j–1, have already been upgraded while those in the row below, i + 1, and
in the column to the right, j + 1, are yet to be upgraded. Similar modiﬁcations are
to be made to Equations 6 to 12 during relaxation.
T
T
i N
i N
,
,
+
−
=
1
1
T
T
T
T
for i
i N
i
N
i
N
i N
,
,
,
,
     
 
,
=
+
+
(
)
=
−
+
−
1
4
2
8 9
1
1
1
T
T
T
M
M
M
,
,
,
1
2
11
1
2
=
+
(
)
−
T
T
T
M N
M N
M
N
,
,
,
=
+
(
)
−
−
1
2
1
1
T
T
i j
k
j
N
i
M
i j
k
,
,
+
(
)
=
=
( )
∑
∑
−
<
1
1
1
ε
T
T
T
T
T
i j
k
i
j
k
i
j
k
i j
k
i j
k
,
,
,
,
,
+
(
)
−
+
(
)
+
( )
−
+
(
)
+
( )
=
+
+
+
(
)
1
1
1
1
1
1
1
1
4

© 2001 by CRC Press LLC
The program Relaxatn is developed according to the relaxation method
described above. For solving the problem shown in Figure 3, both FORTRAN and
QuickBASIC versions are made available for interactively specifying the tolerance.
Sample results are presented below.
FORTRAN VERSION

© 2001 by CRC Press LLC
Sample Results
The program Relaxatn is ﬁrst applied for an interactively entered value of equal
to 100. Only one relaxation needs to be implemented as shown below. The temper-
ature distribution for Sweep #1 is actually the initial assumed distribution. One
cannot assess how accurate this distribution is. The second run speciﬁes that be

© 2001 by CRC Press LLC
equal to 1. The results show that 136 relaxation steps are required. For giving more
insight on how the relaxation has proceeded, Sweeps #10, #30, #50, #100, and #137
are presented for interested readers. It clearly indicates that a tolerance of equal to
100 is deﬁnitely inadequate.

© 2001 by CRC Press LLC
QUICKBASIC VERSION

© 2001 by CRC Press LLC
Sample Results
Irregular Boundaries
Practically, there are cases where the domain of heat conduction have boundaries
which are quite irregular geometrically as illustrated in Figure 4. For such cases, the
equation derived based on the relaxation method, Equation 3, which states that the
temperature at any point has the average value of those at its four neighboring points
if they are equally apart, has to be modiﬁed. The modiﬁed equation can be derived
using a simple argument applied in both x and y directions. For example, consider
the temperature at the point G, TG, in Figure 4. First, let us investigate the horizontal,
y direction (for convenience of associating x and y with the row and column indices
i and j, respectively as in Figure 2). We observe that TG is affected more by the
temperature at the point C, TC, than by that at the point I, TI because the point C is
closer to the point G than the point I. Since the closer the point, the greater the
inﬂuence, based on linear variation of the temperature we can then write:
(15)
where the increment from point I to point G is the regular increment y while that
between G and C is less and equal to y with  having a value between 0 and
1. Similarly, along the vertical, x direction and considering the points B, G, and H
and a regular increment x, we can have:
(16)
T
y
y
y T
y
y
y T
T
T
G
C
I
C
I
=
+ ′
+
′
+
=
+ ′
+
′
+ ′
∆
∆
∆
∆
∆
∆
β
β
β
β
β
β
1
1
1
T
x
x
x T
x
x
x T
T
T
G
B
H
B
H
=
+
′
+
′
+
′
=
+
′
+
′
+
′
∆
∆
∆
∆
∆
∆
α
α
α
α
α
α
1
1
1

© 2001 by CRC Press LLC
where like , 	  has a value between 0 and 1. As often is the case, the regular
increments x and y are taken to be equal to each other for the simplicity of
computation. Equations 15 and 16 can then be combined and by taking both x and
y directions into consideration, an averaging approach leads to:
(17)
For every group of ﬁve points such as B, C, G, H, and I in Figure 4 situated at
any irregular boundary, the values of 	 and  have to be measured and Equation
17 is to be used during the relaxation process if the boundary temperatures are
known.
If some points along an irregular boundary are insulated such as the points B
and C in Figure 4, we need to derive new formula to replace Equation 6 or Equation
10. The insulated condition along BC requires Tn = 0 where n is the direction
normal to the cord BC when the arc BC is approximated linearly. If the values of ‘
and ‘ are known, we can replace the condition T/n = 0 with
(18)
The remainder of derivation is left as a homework problem.
MATLAB APPLICATION
A Relaxatn.m ﬁle can be created to perform interactive MATLAB operations
and generate plots of the temperature distributions during the course of relaxation.
This ﬁle may be prepared as follows:
FIGURE 4.
There are cases where the domain of heat conduction have boundaries which
are quite irregular geometrically.
T
T
T
T
T
G
B
H
C
I
=
+
′
+
′
+
′
+
+ ′
+
′
+ ′




1
2
1
1
1
1
1
1
α
α
α
β
β
β
∂
∂
= ∂
∂
+ ∂
∂
= ∂
∂
+ ∂
∂
=
′ ∂
∂
+ ′ ∂
∂
=
T
n
TdX
Xdn
TdY
Ydn
T
X
T
Y
T
X
T
Y
sin
cos
θ
θ
α
β
0

© 2001 by CRC Press LLC
This ﬁle can be applied to solve the sample problem run by ﬁrst specifying the
boundary temperatures described in Equation 4 to obtain an initial distribution by
entering the MATLAB instructions:

© 2001 by CRC Press LLC
The fprintf command enables a label be added, in which the format %3.0f
requests 3 columns be provided without the decimal point for printing the value of
NR, and \n requests that next printout should be started on a new line. The Relaxatn.m
can now be utilized to perform the relaxations. Let ﬁrst perform one relaxation by
entering
>> NR = NR + 1; fprintf(‘Sweep # %3.0f \n’,NR), [D,T] = feval(A:Relaxatn’,T]
The resulting display of the error deﬁned in Equation 13 and the second tem-
perature distribution is:

© 2001 by CRC Press LLC
In case that we need to have the 30th temperature distribution by performing
29 consecutive relaxations, we enter:
>> for NR = 3:30; [D,T] = feval(A:Relaxatn',T]; end
>> fprintf('Sweep # %3.0f \n',NR),D,T
The resulting display of the error deﬁned in Equation 13 and the 30th temperature
distribution is:
To obtain a plot of this temperature distribution after the initial temperature
distribution has been relaxed 29 times, with gridwork and title as shown in Figure 5a,
the interactive MATLAB instructions entered are:
>> V = 0:1:50; contour(T,V’), grid, title(‘* After 30 relaxations *’)
Notice that 51 contours having values 0 through 50 with an increment of 1
deﬁned in the row matrix V. In Figure 5a, the contour having a value equal to 0 is

© 2001 by CRC Press LLC
FIGURE 5.
After 38 relaxations (a) and after 137 relaxations (b).

© 2001 by CRC Press LLC
along the upper edge (Y = 10) and right edge (X = 20), the ﬁrst curved contour of
the right has a value equal to 1, and the values of the contours are increased from
right to left until the point marked “5” which has a temperature equal to 50 is
reached. It should be noted that along the left edge, the uppermost point marked
“10” has a temperature equal to zero and the temperatures are increased linearly (as
for the initial conditions) to 50 at the point marked with “5”, and from that point
down to the point marked “1” the entire lower portion of the left edge is insulated.
For obtaining the 137th sweep, we can continue to call the service Relaxatn.m
by similarly applying the MATLAB instructions as follows:
>> for NR = 31:137; [D,T] = feval(A:Relaxatn',T]; end
>> fprintf('Sweep # %3.0f \n',NR),D,T
The resulting display of the error deﬁned in Equation 13 and the 137th temper-
ature distribution is:

© 2001 by CRC Press LLC
Figure 5b shows the 137th temperature distribution when the interactive MAT-
LAB instructions entered are:
>> V = 0:1:50; contour(T,V’), grid, title(‘* After 137 relaxations *’)
Notice that area near the insulated boundaries at the right-lower corner has ﬁnally
reached a steady-state temperature distribution, i.e., changes of the entire temperature
distribution will be insigniﬁcant if more relaxations were pursued.
MATHEMATICA APPLICATIONS
To apply the relaxation method for ﬁnding the steady-state temperature distri-
bution of the heated plate already solved by the FORTRAN, QuickBASIC, and
MATLAB versions, here we make use of the Do, If, and While commands of
Mathematica to generate similar results through the following interactive opera-
tions:
In[1]: = t = Table[0,{10},{20}]; eps = 100; nr = 0; d = eps + 1;
In[2]: = Do[t[[i,1]] = (I–1)*10,{i,2,6}];
In[3]: = (While[d>eps, d = 0;nr = nr + 1;
Do[Do[ts = t[[i,j]]; t[[i,j]] = .25*(t[[I–1,j]] + t[[I + 1,j]]
+ t[[i,j–1]] + t[[i,j + 1]]);
d = Abs[ts-t[[i,j]]] + d;,{j,2,19}],{i,2,6}];
Do[ts = t[[i,1]]; t[[i,1]] = .25*(t[[I–1,1]] + t[[I + 1,1]]
+ 2*t[[i,2]]); d = Abs[ts-t[[i,1]]] + d;
Do[ts = t[[i,j]]; t[[i,j]] = .25*(t[[I–1,j]] + t[[I + 1,j]]
+ t[[i,j–1]] + t[[i,j + 1]]);
d = Abs[ts-t[[i,j]]] + d;,{j,2,19}];
If[i = = 7,Continue, ts = t[[i,20]];
t[[i,20]] = .25*(t[[I–1,20]] + t[[I + 1,20]] + 2*t[[i,19]]);
d = Abs[ts-t[[i,20]]] + d;],{i,7,9}];
ts = t[[10,1]]; t[[10,1]] = .5*(t[[9,1]] + t[[10,2]]);
d = Abs[ts-t[[10,1]]] + d;
Do[ts = t[[10,j]]; t[[10,j]] = .25*(2*t[[9,j]] + t[[10,j–1]]
+ t[[10,j + 1]]); d = Abs[ts-t[[10,j]]] + d;,{j,2,19}];
ts = t[[10,20]]; t[[10,20]] = .5*(t[[9,20]] + t[[10,19]]);
d = Abs[ts-t[[10,20]]] + d;])
In[4]: = Print[“Sweep #”,nr]; Round[N[t,2]]
Out[4] = Sweep #2
{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{10, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{20, 9, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

© 2001 by CRC Press LLC
{30, 13, 5, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{40, 18, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{50, 20, 8, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{17, 11, 5, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{ 6, 5, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{ 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{ 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
Notice that In[2] initializes the boundary temperatures, nr keeps the count of
how many sweeps have been performed, and the function Round is employed in
In[4] to round the temperature value to a two-digit integer. When the total temper-
ature differences, d, is limited to eps = 100 degrees, the t values obtained after two
sweeps are slightly different from those obtained by the other versions, this is again
because Mathematica keeps more signiﬁcant digits in all computation steps than
those in the FORTRAN, QuickBASIC, and MATLAB programs. By changing the
eps value from 100 degrees to 1 degree, Mathematica also takes 137 sweeps to
converge as in the FORTRAN, QuickBASIC, and MATLAB versions:
In[5]: = t = Table[0,{10},{20}]; eps = 1; nr = 0; d = eps + 1;
In[6]: = Do[t[[i,1]] = (I–1)*10,{i,2,6}];
In[7]: = Print[“Sweep #”,nr]; Round[N[t,2]]
Out[7] = Sweep #137
{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{10, 8, 7, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
{20, 16, 13, 10, 8, 7, 5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0},
{30, 24, 19, 15, 12, 9, 8, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0},
{40, 30, 23, 18, 15, 12, 10, 8, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1, 0, 0},
{50, 34, 26, 20, 16, 13, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 0, 0},
{35, 30, 25, 21, 17, 15, 12, 10, 8, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 0},
{29, 27, 24, 21, 18, 15, 13, 11, 9, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 1},
{26, 26, 23, 21, 18, 16, 13, 11, 9, 8, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1},
{26, 25, 23, 21, 18, 16, 13, 11, 9, 8, 7, 5, 4, 4, 3, 2, 2, 2, 1, 1}}
The above results all agree with those obtained earlier.
WARPING ANALYSIS OF A TWISTED BAR WITH NONCIRCULAR CROSS SECTION
As another example of applying the relaxation method for engineering analysis,
consider the case of a long bar of uniform rectangular cross section twisted by the
two equal torques (T) at its ends. The cross section of the twisted bar becomes
warped as shown in Figure 6. If z-axis is assigned to the longitudinal direction of
the bar, to ﬁnd the amount of warping at any point (x,y) of the cross sectioned
surface, denoted as W(x,y), the relaxation method can again be employed because

© 2001 by CRC Press LLC
W(x,y) is governed by the Laplace equation.3 Due to anti-symmetry of W(x,y), that
is W(–x,y) = W(x,–y) = –W(x,y), only one-fourth of the cross section needs to be
analyzed. Let us consider a rectangular region 0≤x≤a and 0≤y≤b. It is obvious that
the anti-symmetry leads to the conditions W(x,0) = 0 and W(0,y) = 0 along two of
the four linear boundaries. To derive the boundary conditions along the right side
x = a and the upper side y = b, we have to utilize the relationships between the
warping function W(x,y) and shear stresses 
xz and 
yz which are:
(19,20)
where G and  are the shear rigidity and twisting angle of the bar, respectively.
Along the boundaries x = a and y = b, the shear stress should be tangential to the
lateral surface of the twisted bar requires:
(21)
where s is the variable changed along the boundary. Along the upper boundary y =
b, dy/ds = 0 and dx/ds = 1 and along the right boundary x = a, dx/ds = 0 and dy/ds =
1. Consequently, Equation 19 reduces to:
(22,23)
To apply the relaxation method for solving W(x,y) which satisﬁes the Laplace
equation for 0<x<a and 0<y<b and the boundary conditions W(0,y) = W(x,0) = 0
FIGURE 6.
In the case of a bar of uniform rectangular cross section twisted by the two
equal torques (T) at its ends, the cross section of the twisted bar becomes warped as shown.
τ
θ
τ
θ
xz
yz
G
W
x
y
and
G
W
y
x
=
∂
∂
−




=
∂
∂
+




     
     
∂
∂
−




−∂
∂
+




=
W
x
y dy
ds
W
y
x dx
ds
0
∂
∂
= −
=
∂
=
=
W
y
x
for y
b
and
W
x
y
for x
a
   
 
     
     
   
 

© 2001 by CRC Press LLC
and Equations 22 and 23, let us partition the rectangular region 0≤x≤a and 0≤y≤b
into a network of MxN using the increments x = a/(M–1) and y = b/(N–1). In
ﬁnite-difference forms, Equations 22 and 23 yield, respectively:
(24)
and
(25)
where xi = (i–1)x and yj = (j–1)y. Equations 24 and 25 can be combined to yield
a ﬁnite-difference formula for relaxing the corner point (xM,yN). That is:
(26)
Program Relaxatn.m has been modiﬁed to develop a new m ﬁle Warping.m
for the warping analysis which uses input values for a, b, M, N, and which is needed
in Equation 13 for termination of the relaxation. MATLAB statements for sample
application of Warping.m are listed below along with the m-ﬁle itself. The mesh
plot of the warping surface W(x,y) obtained after 131 sweeps of relaxation by
initially assuming W(x,y) = 0 throughout the entire region and an  value equal to
100 is shown in Figure 7.
FIGURE 7.
The result for  = 100 when a = 30 and b = 20 means that each of the 600
gridpoints is allowed to have, on average, a difference equal to 1/6 during two consecutive
relaxations.
W x y
y
b
W x b
y
x
y
for i
M
i
N
i
i
,
,
     
 
, ,
,
=
≡
(
) =
−
(
) −
=
…
−
∆
∆
2 3
1
W x
x
a y
W a
x y
y
x
for
j
N
M
j
j
j
=
≡
(
) =
−
(
) +
=
…
−
,
,
     
   
, ,
,
∆
∆
2 3
1
W x
a y
b
W a y
W x
b
b x
a y
M
N
N
M
≡
≡
(
) =
(
) +
(
) +
−
[
]
−
−
,
.
,
,
5
1
1
∆
∆

© 2001 by CRC Press LLC
Notice that the variable Nrelax keeps track how many sweeps have been per-
formed during the relaxation procedure, it is an output argument like W which can
be printed if desired. The exit ﬂag, FlagExit, is initially set equal to zero and changed
to a value of unity when the total error, SumOfDs, is less than and allowing the
relaxation to be terminated.
Figure 7 is the result for  = 100 when a = 30 and b = 20 which means that each
of the 600 gridpoints is allowed to have, on average, a difference equal to 1/6 during
two consecutive relaxations. The W values are found to be in the range of –154 and
24.8 for = 100. When is set equal to 1 which means that each gridpoint is allowed
to have, on the average, a difference of 1/600, the mesh plot of W is shown in
Figure 8. The W values are now all equal to or less than zero.

© 2001 by CRC Press LLC
It is noteworthy that if the cross section of the twisted rod is square, that is when
a = b, there is no warping along the x = y line as illustrated by the mesh plot shown in
Figure 9. This case is left as a homework problem for the readers to work out the details.
FIGURE 8.
FIGURE 9.

© 2001 by CRC Press LLC
8.4
PROGRAM WAVEPDE — NUMERICAL SOLUTION OF WAVE 
PROBLEMS GOVERNED BY HYPERBOLIC PARTIAL 
DIFFERENTIAL EQUATIONS
Program WavePDE is designed for numerical solution of the wave problems gov-
erned by the hyperbolic partial differential equation.1 Consider the problem of a
tightened string shown in Figure 10. The lateral displacement u satisﬁes the equation:
(1)
where x is the variable along the longitudinal direction of the string and a is the
wave velocity related to the tension T in the string and the mass m of the string by
the equation:
(2)
Together with the governing equation of u, Equation 1, there are also so-called
initial conditions prescribed which may be expressed as:
(3,4)
f(x) in Equation 3 describe the initial position while v0(x) describes the initial
velocity of the tightened string. And, also there are so-called boundary conditions
which in the case of a string at both ends are:
(5,6)
FIGURE 10.
The problem of a tightened string.
∂
∂
=
∂
∂
2
2
2
2
2
u
t
a
u
x
a
T
m
2 =
u t
x
f x
and
u t
x
t
v x
=
(
) = ( )
∂
=
(
)
∂
=
( )
0
0
0
,
     
     
,
u t x
x
and
u t x
x
L
N
,
     
     
,
=
=
(
) =
=
=
(
) =
1
0
0
0

© 2001 by CRC Press LLC
If the string is made of a single material, T/m would then be equal to a constant.
Analytical solution can be found for this simple case. For the general case that the
string may be composed of a number of different materials and the mass m is then
a function of the spatial variable x. The more complicated the variation of these
properties in x and t, the more likely no analytical solution possible and the problem
can only be solved numerically.
The ﬁnite-difference approximation of Equation 1 can be achieved by applying
the central difference for the second derivatives for both with respect to the space
variable x and the time variable t. If we consider the displacement u only a ﬁnite
number of stations, say N, deﬁned with a spatial increment x and using a time
increment of t, then specially, for t at ti and x at xj, we can have:
and
Substituting the above expressions into Equation 1, we obtain:
(7)
Equation 7 is to be applied for j = 2 through j = N–1. Initially for t = t1 = 0,
Equation 7 can be applied for i = 2, then ui–1,j≡ u(t1,xj) term is simply f(xj) and can
be calculated using Equation 3, and the ui,j–1, ui,j, and ui,j + 1 terms can be calculated
using the forward-difference approximations of Equation 4 which are, for k =
2,3,…,N–1
(8)
Since both f(x) and v0(x) are prescribed, use of Equation 7 enables all u to be
calculated at t = t3 and at all in-between stations xj, for j = 2,3,…,N–1. When u
values at t = t2 and t = t3 are completely known, Equation 7 can again be utilized to
compute u at t = t4 for i = 4 and so forth. Because the string is tightened, we expect
the magnitudes of u values to continuously decrease in time. That is, for a speciﬁed
tolerance, we may demand that the computation be terminated when
(9)
∂
∂
=
−
−
(
)
−
+
2
2
1
1
2
2
u
t
u
u
u
t
i
j
i j
i
j
,
,
,
∆
∂
∂
=
−
+
(
)
−
+
2
2
1
1
2
2
u
x
u
u
u
x
i j
i j
i j
,
,
,
∆
u
u
u
a t
x
u
u
u
i
j
i
j
i j
i j
i j
i j
+
=
−
+
= −
+
+ 



−
+
(
)
1
1
2
1
1
2
2
,
,
,
,
,
,
∆
∆
u t
x
u t x
v x
t
f x
v x
t
k
k
k
k
k
2
1
0
0
,
,
(
) = (
) +
(
)
= (
) +
(
)
∆
∆
max.
j=2~N-1ui j, < ε

© 2001 by CRC Press LLC
It should be noted that the obtained u values are only for the selected increments
t and x. Whether or not the results will change if either increment is reduced,
need be tested.
Equation 7 relates the displacement at xj at t = ti + 1 to the displacements at the
same location xj at two previous instants ti and ti–1, and also those of its left and
right neighboring points at one time increment earlier, t = ti. This is an approximation
which ignores the inﬂuences of the displacements of its left and right neighboring
points at the present time t = ti + 1, namely ui + 1,j–1 and ui + 1,j + 1. These inﬂuences can
be taken into consideration if the central-difference approximation for the curvature
term in the x domain is applied for t = ti + 1 instead of at t = ti in derivation of Equation
7. Reader is urged to work Problem 5 to ﬁnd the effect of this change.
A computer program called WavePDE has been developed for generating the
deﬂection of the string at N stations for any speciﬁed time increment t until the
deﬂection are almost all equal to zero throughout. The program allows interactive
speciﬁcation of the values of a, L, t, and x, and requires the user to deﬁne
FUNCTION Subprograms F(X) and V0(X). Both FORTRAN and QuickBASIC
versions are listed below along with a sample application.
QUICKBASIC VERSION

© 2001 by CRC Press LLC
Sample Application
The two function subprograms F and V0 listed in the program WavePDE are
prepared for a string that has a length equal to 32 cm and is fastened at its two ends.
At time t = 0, the string is lifted at x = 24 cm upward up 2 cm and then released
from rest. That is, for Equations 3 and 4, we have a particular case of f(x) = x/12
in cm for 0≤x≤24 cm and f(x) = 8(x/4) in cm for 24<x≤32, and v0(x) = 0. Suppose
that the wave velocity, a in Equation 1, is equal to 90 cm/sec2. We may be interested
in knowing the lateral displacements at 15 stations between its two ends equally
spaced at an increment of x = 2 cm for t>0. To perform the step-by-step calculation
according to Equation 7, let us compute these displacements using a time increment
of t = 0.001 second and proceed until t reaches 2 second or when the maximum
displacement umax is less than or equal to 0.001. In view of the small t, the results
are to be printed after t has been increased by 0.1 second. An interactive run of the
program WavePDE is presented below:

© 2001 by CRC Press LLC

© 2001 by CRC Press LLC
MATLAB APPLICATIONS
A MATLAB version of WavePDE.m can be developed to run the sample
problem as follows:
When this function is applied for generating displacements using a time incre-
ment of 0.001 and a storing increment of 0.1, the MATLAB commands, the data
for plotting, and the resulting graph (Figure 2) having 21 curves each with 17 points
are as follows:

© 2001 by CRC Press LLC
Notice that solid, broken, dotted, and dot center lines and in that order are used
repeatedly for plotting the 21 curves in Figure 11. The ﬁrst four curves have been
marked using the text command. Form the 21st column listed above, we observe
that maximum initial displacement of 2 cm has only been reduced to 0.8529 cm
after two seconds. It should be pointed out that in WavePDE.m the computation
should also be ended when the sum of the absolute values of displacements is less
than the speciﬁed tolerance.

© 2001 by CRC Press LLC
MATHEMATICA APPLICATION
Mathematica can be applied to investigate the string vibration problem by the
following interactive operations:
In[1]: = f[fx_]: = If[x>24, 8x/4, x/12]
In[2]: = (asq = 81000; dt = 0.001; dx = 2: n = 15; eps = .1; tend = 2; dtp = 0.1;
v0 = 0; np = 100; c = (dt/dx)^2*asq; exitﬂagg = 0; t = 0)
In[3]: = u0 = Table[0.{j,n + 2}]; Do[x = (j–1)*dx; u0[[j]] = f[x];,{j,n + 2}];
In[4]: = (Print["t = ",N[t,3]," String's Displacements are: "];
Print[N[u03]])
Out[4]: = t = 0 String's Displacements are:
{0, 0.167, 0.333, 0.5, 0.667, 0.833, 1., 1.17, 1.33, 1.5, 1.67, 1.83,
2., 1.5, 1., 0.5, 0}
FIGURE 11.
Solid, broken, dotted, and dot center lines are used repeatedly for plotting the
21 curves in this ﬁgure.

© 2001 by CRC Press LLC
In[5]: = t = t + dt; u = u0 + dt*v0; un = Table[0.{j,n + 2}]; nc = 2;
In[6]: = (While[exitﬂag == 0, usum = 0; Do[un[[j + 1]] =-u0[[j + 1]] + c*u[[j]]
+ 2*(1–c)*u[[j + 1]] + c*u[[j + 2]];
usum = usum + Abs[un[[j + 1]]];,{j,n}];
t = t + dt; If[(usum<eps)||(t>tend), exitﬂag = 1; Break,
u0 = u; u = un;];
If[nc = = np, Print["t = ",N[t,3],
"
 String's Displacements are: "];
Print[N[u,3]]; nc = 1;, nc = nc + 1]])
Out[6]: = t = 0.1 String's Displacements are:
{0. 0.167, 0.333, 0.5, 0.667, 0.833, 0.997, 1.14, 1.21, 1.07, 0.795,
0.692, 0.499, 0.359, 0.131, 0.0961, 0}
t = 0.2 String's Displacements are:
{0. 0.163, 0.315, 0.423, 0.418, 0.24, –0.0295, –0.184, –0.285,
–0.515, –0.632, –0.474, –0.749, –0.564, –0.287, –0.168, 0}
t = 0.3 String's Displacements are:
{0. –0.449, –0.818, –1.01, –1.12, –1.31, –1.47, –1.47, –1.45, –1.22,
–0.95, –0.812,–0.691, –0.514, –0.298, –0.193, 0}
t = 0.4 String's Displacements are:
{0. –0.42, –0.88, –1.26, –1.54, –1.63, –1.49, –1.44, –1.36, –1.17,
–0.98, –0.829, –0.7, –0.456, –0.371, –0.146, 0}
t = 0.5 String's Displacements are:
{0. 0.242, 0.411, 0.285, 0.0344, 0.00989, –0.0857, –0.355, –0.0622,
–0.774, –0.804, –0.803, –0.6, –0.528, –0.308, –.177, 0}
t = 0.6 String's Displacements are:
{0. 0.0971, 0.341, 0.481, 0.695, 0.976, 1.1, 1.01, 0.896, 0.855,
0.68, 0.546, 0.217, 0.0517, –0.0764, –0.0592, 0}
t = 0.7 String's Displacements are:
{0. 0.183, 0.289, 0.523, 0.706, 0.82, 0.958, 1.11, 1.38, 1.59, 1.82,
1.74, 1.62, 1.44, 1.15, 0.663, 0}
t = 0.8 String's Displacements are:
{0. 0.207, 0.297, 0.481, 0.724, 0.808, 0.913, 1.17, 1.2, 1.24, 1.1,
0.893, 0.689, 0.567, 0.481, 0.273, 0}
t = 0.9 String's Displacements are:
{0. 0.164, 0.296, 0.379, 0.495, 0.44, 0.296, 0.0756, –0.104, –0.411,
–0.537, –0.51, –0.563, –0.57, –0.537, –0.323, 0}

© 2001 by CRC Press LLC
t = 1.0 String's Displacements are:
{0. –0.22, –0.459, –0.725, –1.05, –1.15, –1.31, –1.34, –1.28, –1.31
–1.2, –0.888, –0.539, –0.463, –0.53, –0.197, 0}
t = 1.1 String's Displacements are:
{0. –0.564, –0.992, –1.41, –1.64, –1.81, –1.69, –1.47, –1.25, –1.03,
–1.06, –0.878, –0.651, –0.485, –0.361, –0.127, 0}
t = 1.2 String's Displacements are:
{0. –0.0102, 0.0177, 0.194, 0.133, –0.126, –0.447, –0.714, –0.804,
–0.869, –0.789, –0.8, –0.639, –0.479, –0.324, –0.165, 0}
t = 1.3 String's Displacements are:
{0. 0.134, 0.357, 0.611, 0.813, 0.91, 0.897, 0.944, 0.815, 0.674,
0.465, 0.222, –0.0661, –0.0771, –0.0758, –0.135, 0}
t = 1.4 String's Displacements are:
{0. 0.227, 0.43, 0.455, 0.57, 0.721, 1.07, 1.3, 1.47, 1.56, 1.67,
1.64, 1.53, 1.38, 1.03, 0.484, 0}
t = 1.5 String's Displacements are:
{0. 0.207, 0.32, 0.515, 0.561, 0.869, 1.08, 1.12, 1.09, 1.18, 1.27,
1.24, 1.16, 0.882, 0.515, 0.268, 0}
t = 1.6 String's Displacements are:
{0. 0.122, 0.339, 0.368, 0.499, 0.531, 0.534, 0.281, 0.0675, –0.0461,
–0.285, –0.451, –0.579, –0.613, –0.48, –0.205, 0}
t = 1.7 String's Displacements are:
{0. –0.106, –0.269, –0.467, –0.732, –0.909, –1.19, –1.31, –1.25,
–1.2, –1.08, –0.995, –0.837, –0.533, –0.156, 0.00405, 0}
t = 1.8 String's Displacements are:
{0. –0.585, –1.2, –1.55, –1.65, –1.72, –1.74, –1.58, –1.38, –1.66,
–0.903, –0.718, –0.701, –0.542, –0.366, –0.166, 0}
t = 1.9 String's Displacements are:
{0. 0.0718, –0.0337, –0.188, –0.197, –0.4499, –0.591, –0.741, –0.937,
–1.02, –0.919, –0.742, –0.546, –0.481, –0.362, –0.203, 0}
t = 2.0 String's Displacements are:
{0. 0.0356, 0.543, 0.699, 0.666, 0.816, 0.828, 0.853, 0.708, 0.399,
0.0934, –0.0436, –0.0906, –0.161, –0.192, –0.0974, 0}
The results are in complete agreement with those obtained previously.

© 2001 by CRC Press LLC
8.5
PROBLEMS
PARABPDE
1. Expand the program ParabPDE to print out the computed temperature
distribution along the entire rod only when the temperature at an interac-
tively speciﬁed location reaches an interactively entered value. The time
required to reach this condition should be printed as shown below. Call
this new program ParaPDE1.
Enter the x value at which a desired temperature is to be speciﬁed: 6.0
Enter the temperature to be reached, in °F: 50
It takes X.XXXXXE + 00 seconds.
Notice that a format of E13.5 is to be used to print out the time.
2. Consider the transient heat-conduction problem where k/cρ = 0.00104
ft2/sec, t = 1 sec, x = 1”, and at the left end of the rod, x = 0, the
temperature u is equal to 50°F initially but equal to 0°F for t>0. Compute
the temperatures at x = 1”, 2”, and 3” when t = 1, 2, and 3 seconds.
3. Use the same data as in the program ParabPDE, but modify the program
for the case when the right end is not insulated but is maintained at 0°F
until t = 100 seconds and then is heated at 100°F afterwards. Print out
the times required for the station at the mid-length reaches to 10°F, 20°F,
at 10°F increments until 100°F.
4. Study the effect of changing the value of DT in the program ParabPDE
on tﬁnal, the time required for reaching the uniform distribution of 100°F
throughout the rod. Tabulate DT vs. tﬁnal.
5. Change the steady-state temperature from 100°F to 75°F and generate a
plot similar to that shown in Figure 2.
6. For the rod shown in Figure 1, one-half of the surface insulation, for x/L =
0.4 to x/L = 0.7, is to be removed and the temperature for that portion of
the rod is to be maintained at 70°F. Modify the program ParabPDE is
accommodate for the computation needed to determine how long it takes
to reach a stable temperature distribution.
7. Apply MATLAB and Mathematica (using ParaPDE.m) to solve the
transient heat-conduction problem by decreasing x from 1 to 0.5.
RELAXATN
1. For the problem treated by the program Relaxatn except that the temper-
ature is equal to 100°F along the top boundary, perform the relaxation by
upgrading T starting from the top boundary instead of from the bottom
boundary to expedite the convergence. Modify the program Relaxatn to
perform this new sweeping process.
2. Round the right lower corner of the square plate with a radius equal to 5
and consider this corner as an insulated boundary. Modify the program

© 2001 by CRC Press LLC
Relaxatn and rerun the problem to print out the converged temperature
distribution.
3. Initially, the temperatures are assumed to be equal to zero everywhere in
the plate shown in Figure 12 except those on the boundary. Carry out one
complete relaxation (starting from the top row and from left to right, and
then down to the next row and so on) cycle to upgrade the unknown
temperatures.
4. Complete the derivation of relaxation equations for the temperatures at
the points B and C shown in Figure 2 by use of Equation 18 and by
considering the cord BC only. Derive the equation for the point B by
averaging the effects of both cords AB and BC.
5. For the problem described in Problem 3, derive a matrix equation of order
5 for direct solution of the ﬁve unknown temperatures (two between points
A and F, and three along the bottom insulted boundary) based on the
ﬁnite-difference formulas, Equations 3, 6, 8, 10, 11, or, 12. Compare the
resulting temperature distribution with that obtained in Problem 3.
6. Rework Problem 3 if the boundary DEFG is insulated but TD and TG
remain equal to 100°F.
7. Initially, the temperatures are assumed to be equal to zero everywhere in
the  shown in Figure 13 except those on the boundary. Carry out one
complete relaxation (starting from the top row and from left to right, and
then down to the next row and so on) cycle to upgrade the unknown
temperatures. The points A, B, and D are on a straight line.
8. Rework Problem 7 if the boundary ABCD is insulated but TD remains
equal to 100°F.
9. Following the same process as in Problem 8, but obtain the direct solution
of the temperature distribution for Problem 7.
FIGURE 12.
Problem 3.

© 2001 by CRC Press LLC
10. The warping of a twisted bar of uniform rectangular cross section already
depicted by the mesh plot shown in Figures 5 and 6 also can be observed
using the contour plotting capability of MATLAB. Apply program Warp-
ing.m and the command contour to generate a contour plot for a = 30 and
b = 20 using = 100 and = 1 (Figures  14A and 14B, respectively).
FIGURE 13.
Prtoblem 7.
FIGURE 14A.
Problem 10.

© 2001 by CRC Press LLC
11. Direct solution of the warping function W(X,Y) can also be obtained
following the procedure described in Problem 8. For a rectangular cross
section (-a≤X≤a and -b≤Y≤b) of a twisted rod, the warping W(X,Y) needs
to be found only for the upper right quadrant 0≤X≤a and 0≤Y≤b which
in general can be divided into a gridwork of (M + 1)x(N + 1). The
antisymmetry conditions W(X = 0,Y) = W(X,Y = 0) = 0 reduces to only
(M + 1)x(N + 1)-(M + N + 1) = MxN unknowns, i.e., only solving those
W’s for X>0. That means we have to derive a system of MxN linear
algebraic equations: along the boundaries X = a and Y = b, Equations 23
to 25 are to be used and for the interior grid points (0<X<a and 0<Y<b),
Equation 3 is to be used. Generate such a matrix equation and then apply
FIGURE 14B.
Problem 10.
FIGURE 15.
Problem 4.

© 2001 by CRC Press LLC
the program Gauss to ﬁnd these MxN W’s. Compare the resulting W
distribution with those obtained by the relaxation method shown in
Figures 5 and 6 for a = 30 and b = 20.
12. Same as Problem 11 except for the case a = b = 20 and for comparing
with Figure 7.
13. Solve the warping problem by Mathematica.
WAVEPDE
1. For the string problem analyzed in the Sample Application, modify the
program slightly so that the times required for the string to have the
magnitudes of its maximum displacements reduced to 0.8, 0.6, 0.4, and
0.2, and the corresponding deﬂected shapes can be printed.
2. Rearrange the subprogram FUNCTION F in the program WavePDE to
consider the case of an initial, upward lifting the mid-third (8≤x≤16 cm)
of the string by 1 cm. Rerun the program using the same input data as in
the Sample Application.
3. Consider a string which is composed of two different materials even
though it is subjected to a uniform tension T so that the left and right one-
thirds (i.e., , 0≤x≤8 cm and 24≤x≤32 cm, respectively) of the string has
a wave velocity a = 80 cm/sec while its mid-third (i.e., 8≤x≤16 cm) has
a wave velocity a = 90 cm/sec. Modify and then rerun program WavePDE
using the other input same as in the Sample Application.
4. A tightened string of length L equal to 1 ft is lifted as shown in 15 and
is released with a velocity distribution v = y(t = 0,x)/t = 2sinx/L in
ft/sec. If the constant T/m appearing in Equation 2 is equal to 8,100
ft2/sec2, use a time increment t = 0.0005 sec and a space increment x =
0.1L and apply Equation 7 to ﬁnd the y values at t = 0.001 sec and for
the stations x2 and x3.
5. In approximating Equation 1 by ﬁnite differences, we may keep the same
approach for 2u/t2 as in deriving Equation 7 but to apply the second
central-difference formula for 2u/t2 not at t = ti but at t = ti + 1. The
resulting equation, for C = (at/x)2, is:
Derive a matrix equation for solving the unknowns uj for j = 1,2,…,N–1,
at t = ti + 1. Note that the boundary conditions are ui + 1,0 = ui + 1,N = 0. Write
a program WavePDE.G which uses the Gaussian Elimination method to
solve this matrix equation and run it for the Sample problem to compare
the results.
6. Change the MATLAB m ﬁle WavePDE to solve Problem 4.
7. Apply Mathematica to solve Problem 4.
−
+
+
(
)
−
= −
+
+
−
+
+
+
−
Cu
C u
Cu
u
u
i
j
i
j
i
j
i
j
i j
1
1
1
1
1
1
2
2
,
,
,
,
,

© 2001 by CRC Press LLC
8.6
REFERENCES
1. C. R. Wylie, Jr., Advanced Engineering Mathematics, Chapter 9, Second Edition,
McGraw-Hill, New York, 1960.
2. J. P. Holman, Heat Transfer, McGraw-Hill, New York, 1963.
3. S. Timoshenko and J. N. Goodier, Theory of Elasticity, Chapter 11, Second Edition,
McGraw-Hill, New York, 1951.

