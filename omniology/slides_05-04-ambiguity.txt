Alex Aiken 
Compilers 
Ambiguity 

Alex Aiken 
Ambiguity 
• Grammar 
E  E + E | E  E | (E) | id 
 
• String 
id  id + id 
 
 
 

Alex Aiken 
Ambiguity 
This string has two parse trees 
E 
E 
E 
E 
E 
* 
id 
+ 
id 
id 
E 
E 
E 
E 
E 
+ 
id 
* 
id 
id 

Alex Aiken 
Ambiguity 
• A grammar is ambiguous if it has more than one 
parse tree for some string 
– Equivalently, there is more than one right-most or 
left-most derivation for some string 
 
• Ambiguity is BAD 
– Leaves meaning of some programs ill-defined 
 
 

Ambiguity 
S  SS | a | b 
E  E + E | id 
S  Sa | Sb 
E  E’ | E’ + E 
E’ -E’ | id | (E) 
 
Which of the following grammars are ambiguous? 

Alex Aiken 
Ambiguity 
• There are several ways to handle ambiguity 
 
• Most direct method is to rewrite grammar 
unambiguously 
 
E  E’ + E | E’ 
E’  id  E’ | id | (E)  E’| (E) 
 
• Enforces precedence of  over + 
 

Alex Aiken 
Ambiguity 
E 
E 
E 
E 
E 
* 
id 
+ 
id 
id 
E 
E 
E 
E 
E 
+ 
id 
* 
id 
id 

Alex Aiken 
Ambiguity 
• Consider the grammar 
       E  if E then E 
            | if E then E else E 
            | OTHER 
 

Alex Aiken 
Ambiguity 
• The expression 
               if E1 then if E2 then E3 else E4  
has two parse trees 
if 
E1 
if 
E2 
E3 
E4 
if 
E1 
if 
E2 
E3 
E4 

Alex Aiken 
Ambiguity 
• else matches the closest unmatched then  
 
    E    MIF                   /* all then are matched */       
     |  UIF                   /* some then is unmatched */ 
MIF  if E then MIF else MIF     
        |   OTHER 
UIF  if E then E 
        |   if E then MIF else UIF   

Alex Aiken 
Ambiguity 
• The expression if E1 then if E2 then E3 else E4  
if 
E1 
if 
E2 
E3 
E4 
if 
E1 
if 
E2 
E3 
E4 

Ambiguity 
S  Sa | Sb |  
S  SS’ 
S’ a | b 
S  Sa | Sb 
S  S | S’ 
S’ a | b 
 
Choose the unambiguous version 
of the given ambiguous grammar:  S  SS | a | b 

Alex Aiken 
Ambiguity 
• Impossible to convert automatically an ambiguous 
grammar to an unambiguous one 
 
• Used with care, ambiguity can simplify the grammar 
– Sometimes allows more natural definitions 
– We need disambiguation mechanisms 

Alex Aiken 
Ambiguity 
• Instead of rewriting the grammar 
– Use the more natural (ambiguous) grammar 
– Along with disambiguating declarations 
 
• Most tools allow precedence and associativity 
declarations to disambiguate grammars 
 
 

Alex Aiken 
Ambiguity 
• Consider the grammar            E  E + E | int  
• Ambiguous: two parse trees of int + int + int 
E 
E 
E 
E 
E 
+ 
int 
+ 
int 
int 
E 
E 
E 
E 
E 
+ 
int 
+ 
int 
int 
• Left associativity declaration:   %left  + 

Alex Aiken 
Ambiguity 
• Consider the grammar  E  E + E | E  * E | int  
– And the string int + int * int 
E 
E 
E 
E 
E 
+ 
int 
* 
int 
int 
E 
E 
E 
E 
E 
* 
int 
+ 
int 
int 
• Precedence declarations:  %left  + 
      %left  * 
 

