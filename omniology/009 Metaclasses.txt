© 2019 MathByte Academy

Finally…
we have reached the point where metaclasses becomes easy!
à we saw how type is used to create classes
type(name, bases, dict_)
à we saw how we can customize type by subclassing it and overriding __new__
MyType(name, bases, dict_)
à tedious!
get the class code as text
create the class dictionary
exec the code within that dictionary
determine the bases
call type (or MyType)
© 2019 MathByte Academy

Creating classes normally
à to create a new type (class), we usually don't call type
class Student(Person):
pass
somehow Python does all the manual steps we were doing
à class name, bases, class dictionary, class body code
à and calls type(name, bases, dict_)
à so if we have
class MyType(type):
def __new__(cls, name, bases, dict_):
…
à we just want to tell Python
use this
instead of this
à "this" has a technical name…
à metaclass
© 2019 MathByte Academy

Metaclass
à to create a class, another class is used
à typically type
à the class used to create a class, is called the metaclass of that class
à by default Python uses type as the metaclass
à but we can override this
class Person(metaclass=MyType):
…
à so default is actually:
class Person(metaclass=type):
…
© 2019 MathByte Academy

Putting it together
class MyType(type):
def __new__(mcls, name, bases, cls_dict):
# tweak things
# create the class itself via delegation
new_class = super().__new__(mcls, name, bases, cls_dict)
# tweak some more
# and return the new class
return new_class
first argument is the metaclass (MyType)
class Person(metaclass=MyType):
def __init__(self, name):
self.name = name
second argument is the name of the class being created
does all the manual steps: name, code, class dict, 
bases
then calls MyType(name, bases, cls_dict)
à MyType.__new__(MyType, name, bases, cls_dict)
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

