Alex Aiken 
Compilers 
Structure of a Compiler 

Alex Aiken 
Intro to Compilers 
1. Lexical Analysis 
2. Parsing 
3. Semantic Analysis 
4. Optimization 
5. Code Generation 
 

Alex Aiken 
Intro to Compilers 
• First step: recognize words. 
– Smallest unit above letters 
 
This is a sentence. 
 
 
 

Alex Aiken 
Intro to Compilers 
 
 
 
ist his ase nte nce 
 
 

Alex Aiken 
Intro to Compilers 
• Lexical analysis divides program text into “words” or 
“tokens” 
 
if x == y then z = 1; else z = 2; 
 
 
 

Alex Aiken 
Intro to Compilers 
• Once words are understood, the next step is to understand 
sentence structure 
 
• Parsing = Diagramming Sentences 
– The diagram is a tree 
 
 

Alex Aiken 
Intro to Compilers 
This 
line 
is 
a 
longer 
sentence 
verb 
article noun 
article adjective 
noun 
subject 
object 
sentence 

Alex Aiken 
Intro to Compilers 
if x == y then z = 1; else z = 2; 
 
if-then-else 
x 
y 
z 
1 
z 
2 
== 
assign 
relation 
assign 
predicate 
else-stmt 
then-stmt 

Alex Aiken 
Intro to Compilers 
• Once sentence structure is understood, we can try to 
understand “meaning” 
– This is hard! 
 
• Compilers perform limited semantic analysis to catch 
inconsistencies 

Alex Aiken 
Intro to Compilers 
• Example: 
Jack said Jerry left his assignment at home. 
 
• Even worse: 
Jack said Jack left his assignment at home? 

Alex Aiken 
Intro to Compilers 
• Programming languages 
define strict rules to 
avoid such ambiguities 
 
{ 
 int Jack = 3; 
 { 
  
int Jack = 4; 
  
cout << Jack; 
 } 
} 
 

Alex Aiken 
Intro to Compilers 
• Compilers perform many semantic checks besides 
variable bindings 
 
• Example: 
Jack left her homework at home. 
 
• A “type mismatch” between her and Jack; we know 
they are different people 

Alex Aiken 
Intro to Compilers 
• Optimization has no strong counterpart in English 
– But a little bit like editing 
 
• Automatically modify programs so that they 
– Run faster 
– Use less memory 
 

Alex Aiken 
Intro to Compilers 
 
 
X = Y * 0   is the same as  X = 0 
 
 

Alex Aiken 
Intro to Compilers 
• Produces assembly code (usually) 
 
• A translation into another language 
– Analogous to human translation 

Alex Aiken 
Intro to Compilers 
• The overall structure of almost every compiler 
adheres to our outline 
 
• The proportions have changed since FORTRAN 

