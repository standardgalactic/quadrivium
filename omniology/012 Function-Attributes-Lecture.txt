©2019 MathByte Academy

Function Attributes, Classes and Instances
What happens when attributes are functions is different!
class MyClass:
def say_hello():
print('Hello World!')
my_obj = MyClass()
MyClass.say_hello
<function __main__.MyClass.say_hello()>
<bound method MyClass.say_hello of <__main__.MyClass
object at 0x10383f860>>
my_obj.say_hello
Same with getattr:
getattr(my_obj, 'say_hello')
<bound method MyClass.say_hello of <__main__.MyClass
object at 0x10383f860>>
MyClass.say_hello() à 'Hello World!'
my_obj.say_hello() à TypeError
say_hello() takes 0 positional 
arguments but 1 was given
bound?
method?
©2019 MathByte Academy

Methods
method is an actual object type in Python
like a function, it is callable
but unlike a function if is bound to some object
and that object is passed to the method as its first parameter
my_obj.say_hello()
à say_hello is a method object
à it is bound to my_obj
à when my_obj.say_hello is called, the bound object my_obj is 
injected as the first parameter to the method say_hello
so it's essentially calling this:
MyClass.say_hello(my_obj)
One advantage of this is that say_hello now has a handle to the object's 
namespace!
à the object it is bound to
à but there's more to it than just calling the function this way – method object
©2019 MathByte Academy

à instance
à function
Methods
Methods are objects that combine:
__self__
__func__
à the instance the method is bound to
à the original function (defined in the class)
calling obj.method(args)
à method.__func__(method.__self__, args)
(of some class)
à like any object it has attributes
class Person:
def hello(self):
pass
p = Person()
p.hello.__self__
p.hello.__func__
©2019 MathByte Academy

Instance Methods
This means we have to account for that "extra" argument when we define functions in our 
classes – otherwise we cannot use them as methods bound to our instances
These functions are usually called instance methods
class MyClass:
def say_hello(obj):
print('Hello World!')
we often call this an instance method
but not actually a method object yet!
at this point it's just a regular function
my_obj = MyClass()
my_obj.say_hello
now it's a method
and is bound to my_obj, an instance of MyClass
instance method
first param will receive instance object
my_obj.say_hello()
à 'Hello World!'
à MyClass.say_hello(my_obj)
©2019 MathByte Academy

Instance Methods
Of course functions in our classes can have their own parameters
When we call the corresponding instance method with arguments à passed to the method as well
class MyClass:
language = 'Python'
def say_hello(obj, name):
return f'Hello {name}! I am {obj.language}. '
And the method still receives the instance object reference as the first argument
python = MyClass()
python.say_hello('John')
à 'Hello John! I am Python'
java = MyClass()
java.language = 'Java'
java.say_hello('John')
à 'Hello John! I am Java'
à we have access to the instance (and class) attributes!
à MyClass.say_hello(python, 'John')
à MyClass.say_hello(java, 'John')
©2019 MathByte Academy

Coding
©2019 MathByte Academy

