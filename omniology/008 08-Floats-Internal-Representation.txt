
The float class is Python's default implementation for representing real numbers
The Python (CPython) float is implemented using the C double type which (usually!) implements
the IEEE 754 double-precision binary float, also called binary64
The float uses a fixed number of bytes
8 bytes
(but Python objects have some overhead too)
24 bytes
(CPython 3.6 64-bit)
64 bits
These 64 bits are used up as follows:
sign
1 bit
exponent 11 bits
significant digits
52 bits
range [-1022, 1023]
15-17 significant (base-10) digits
significant digits
for simplicity, all digits except leading and trailing zeros
1.5E-5 1.5 x 10-5
exponent is -5
1.2345
1234.5
12345000000
12345e-50
1.2345e10
0.00012345

Representation: decimal
Numbers can be represented as base-10 integers and fractions:
0.75

7
10 +
5
100
0.256

2
10 +
5
100 +
6
1000
7 × 10−1 + 5 × 10−2
2 × 10−1 + 5 × 10−2 + 6 × 10−3
2 significant digits
3 significant digits
123.456 
1 × 100 + 2 × 10 + 3 × 1 + 4
10 +
5
100 +
6
1000

1 x 102 + 2 × 101 + 3 × 100 + 4 × 10−1 + 5 × 10−2 + 6 × 10−3
6 significant digits
In general:
𝑑=
෍
𝑖=−𝑚
𝑛
𝑑𝑖× 10𝑖
sign = 0 for positive
sign = 1 for negative
𝑑= (−1)𝑠𝑖𝑔𝑛෍
𝑖=−𝑚
𝑛
𝑑𝑖× 10𝑖

Some numbers cannot be represented using a finite number of terms
𝑑= (−1)𝑠𝑖𝑔𝑛෍
𝑖=−𝑚
𝑛
𝑑𝑖× 10𝑖
but even some rational numbers
1
3 = 0.33 ሶ3
= 3
10 +
3
100 +
3
1000 + …
Obviously numbers such as
2 = 1.4142 …
𝜋= 3.14159 …

Representation: binary
Numbers in a computer are represented using bits, not decimal digits
instead of powers of 10, we need to use powers of 2
0.11 2
=
1
2 + 1
4 10
=
1 × 2−1 + 1 × 2−2 10
This representation is very similar to the one we use with decimal numbers
but instead of using powers of 10, we use powers of 2
=
0.5 + 0.25
10
=
0.75
10
Similarly,
0.1101 2
=
1
2 + 1
4 + 0
8 + 1
16 10
=
1 × 2−1 + 1 × 2−2 + 0 × 2−3 + 1 × 2−4 10
=
0.5 + 0.25 + 0.0625
10
=
0.8125
10
a binary representation
𝑑= (−1)𝑠𝑖𝑔𝑛෍
𝑖=−𝑚
𝑛
𝑑𝑖× 2𝑖

The same problem that occurs when trying to represent 1
3 using a decimal expansion also 
happens when trying to represent certain numbers using a binary expansion
0.1 = 1
10
Using binary fractions, this number does not have a finite representation
0.1 10 = 0. 0 0011 0011 0011 … 2
= 0
2 +
0
4 + 0
8 + 1
16 + 1
32
+ 0
64 + 0
128 + 1
256 + 1
512 +
0
1024 +
0
2048 +
1
4096 +
1
8192 +
…
= 1
16 + 1
32 + 1
256 + 1
512 +
1
4096 +
1
8192 +
…
= 0.0625 + 1
32 + 1
256 + 1
512 +
1
4096 +
1
8192 +
…
base 10
= 0.09375 + 1
256 + 1
512 +
1
4096 +
1
8192 +
…
= 0.09765625 + 1
512 +
1
4096 +
1
8192 +
…
= 0.099609375 +
1
4096 +
1
8192 +
…
= 0.0999755859375 +
…

So, some numbers that do have a finite decimal representation, 
0.75
10 =
0.11 2
0.8125
10 = 0.1101 2
0.1 10 = 0 0011 0011 0011 … 2
finite
finite
infinite
exact float representation
approximate float representation
do not have a finite binary representation, 
and some do

Code

