© 2019 MathByte Academy

Missing Keys
standard dictionary (dict)
d = {}
d['a']
à KeyError
à can use the get method to handle default values for non-existent keys
d.get('a', 100)
d['a'] = d.get('a', 0) + 1
à general pattern for counters
à we get 100 if 'a' is not present, but 'a' is still not in dictionary
à works, but possibly have to remember to always use the same default in multiple places for same dict
in general: d.get(key, value)
à value could be returned from calling a callable
à easier would be to define the default once (per dict)
© 2019 MathByte Academy

defaultdict
à collections module
à subclass of dict type
(defaultdict instance IS-A dict instance)
defaultdict(callable, […])
callable is called to calculate a default
remaining arguments are simply passed 
to dict constructor
d = defaultdict(lambda: 'python')
à callable must have zero arguments
à default is None
and None will be the default value
d['a']
à 'python'
d à {'a': 'python'}
à entry has been created
d à {}
à referred to as a factory method
à so has all the functionality of a standard dict
© 2019 MathByte Academy

Other Factory Functions
Often we want to initialize values to 0, an empty string, an empty list, etc
int() à 0
defaultdict(lambda: 0)
defaultdict(int)
has the same effect
list() à []
defaultdict(lambda: [])
defaultdict(list)
has the same effect
à factory must simply be a callable that can take zero arguments and returns the desired 
default value
à can even be a function that calls a database and returns some value
à function does not have to be deterministic
à can return different values every time it is called
à factory is invoked every time a default value is needed
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

