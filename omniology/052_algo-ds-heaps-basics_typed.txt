Data	  Structures	  
Heaps	  and	  Their	  
Applica4ons	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Heap:	  Supported	  Opera4ons	  
-­‐ 	  A	  container	  for	  objects	  that	  have	  keys	  
-­‐ 	  Employer	  records,	  network	  edges,	  events,	  etc.	  
Insert:	  add	  a	  new	  object	  to	  a	  heap.	  
	  Running	  4me	  :	  O(log(n))	  
Extract-­‐Min:	  remove	  an	  object	  in	  heap	  with	  a	  minimum	  key	  
value.	  [4es	  broken	  arbitrarily]	  
	  Running	  4me	  :	  O(log	  n)	  	  	  [n	  =	  #	  of	  objects	  in	  heap]	  
Also	  :	  HEAPIFY	  ( 	  
	  	  ),	  DELETE(O(log(n))	  4me)	  
n	  batched	  Inserts	  	  	  
in	  O(n)	  4me	  
Equally	  well,	  
EXTRACT	  MAX	  

Tim	  Roughgarden	  
Applica4on:	  Sor4ng	  
Canonical	  use	  of	  heap	  :	  fast	  way	  to	  do	  repeated	  minimum	  
computa4ons.	  
	  
Example	  :	  Selec4onSort	  ~	  
	  linear	  scans,	   	  	  	  	  	  	  	  run4me	  on	  array	  of	  
	  
	  
	  
	  
	  	  	  	  	  	  	  	  	  	  	  	  length	  n	  
Heap	  Sort	  :	  1.)	  insert	  all	  n	  array	  elements	  into	  a	  heap	  
	  	  	  	  	  	  	  	  	  2.)	  Extract-­‐Min	  to	  pluck	  out	  elements	  in	  sorted	  order	  
	  
Running	  Time	  =	  2n	  heap	  opera4ons	  =	  O(nlog(n))	  4me.	  
	  =>	  op4mal	  for	  a	  “comparison-­‐based”	  sor4ng	  algorithm!	  

Tim	  Roughgarden	  
“Priority	  Queue”	  –	  synonym	  for	  a	  heap.	  
	  
Example	  :	  simula4on	  (e.g.,	  for	  a	  video	  game	  )	  
-­‐ Objects	  =	  event	  records	  [ 	  
	  
	  	  ]	  
-­‐ 	  Key	  	  =	  4me	  event	  scheduled	  to	  occur	  
-­‐ 	  Extract-­‐Min	  =>	  yields	  the	  next	  scheduled	  event	  
Applica4on:	  Event	  Manager	  
Ac4on/update	  to	  occur	  at	  
given	  4me	  in	  the	  future	  

Tim	  Roughgarden	  
I	  give	  you	  :	  a	  sequence	  x1,…,xn	  of	  numbers,	  one-­‐by-­‐one.	  
You	  tell	  me	  :	  at	  each	  4me	  step	  i,	  the	  median	  of	  {x1,….,xi}.	  
Constraint	  :	  use	  O(log(i))	  4me	  at	  each	  step	  i.	  
Solu4on	  :	  maintain	  heaps	  	  	  HLow	  :	  supports	  Extract	  Max	  
	  
	  
	  	  	  	  	  	  	  	  	  	  HHigh	  :	  supports	  Extract	  Min	  
Key	  Idea	  :	  maintain	  invariant	  that	  ~	  i/2	  smallest	  (largest)	  elements	  in	  
	  
	  
	  
	  
	  
	  
	  	  	  	  	  	  	  	  	  HLow	  (HHigh)	  
You	  Check	  :	  1.)	  can	  maintain	  invariant	  with	  O(log(i))	  work	  
	  	  	  	  	  	  	  	  	  	  2.)	  given	  invariant,	  can	  compute	  median	  in	  O(log(i))	  work	  
Applica4on:	  Median	  Maintenence	  

Tim	  Roughgarden	  
Applica4on:	  Speeding	  Up	  Dijkstra	  
Dijkstra’s	  Shortest-­‐Path	  Algorithm	  
	  
-­‐ Naïve	  implementa4on	  =>	  run4me	  =	  	  
-­‐ 	  with	  heaps	  =>	  run4me	  =	  O(m	  log(n))	  
#	  ver4ces 	  #	  edges	  
#	  loop	  
itera4os	  
Work	  per	  itera4on	  
[linear	  scan	  through	  
edges	  for	  minimum	  
computa4on]	  

