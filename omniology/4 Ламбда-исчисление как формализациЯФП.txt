Ламбда-исчисление
как формализация языка 
функционального 
программирования
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
В данной лекции будут рассмотрены вопросы, относящиеся к истории развития, 
идеологии, математическому основанию и обзору возможностей ламбда-исчисления – 
математической 
формализации, 
моделирующей 
языки 
функционального 
программирования. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Содержание лекции
1.
Функция в математике и программировании
2.
Эволюция ламбда-исчисления
3.
Бестиповое ламбда-исчисление А. Черча: алфавит, 
аксиомы, правила вывода
4.
Преимущества ламбда-исчисления как формальной 
системы
5.
Ламбда-исчисление как формализация языка SML
6.
Библиография
 
 
 
Комментарий к слайду  
 
В ходе лекции будут рассмотрены важнейшие научные исследования, относящиеся к 
эволюции 
подходов 
к 
математическому 
моделированию 
ключевой 
сущности 
функционального подхода к программированию, а именно, функции. При этом будет 
особо отмечено то обстоятельство, что понятие функции различным образом 
интерпретируется в математической теории и в практике программирования.   
 
Далее будет представлено формальное введение в бестиповый вариант ламбда-
исчисления, первоначально предложенный А. Черчем. Согласно традиции, изложение 
формальной теории будет вестись в следующей последовательности: алфавит, аксиомы и 
правила вывода.  
 
По результатам представленной теории будут сделаны выводы о преимуществах и 
недостатках 
ламбда-исчисления 
для 
моделирования 
конструкций 
языков 
функционального программирования. При этом существенное внимание будет уделено 
формализации языка функционального программирования SML, который изучается на 
протяжении всего курса. 
 
Лекция завершится обзором литературы для более глубокого исследования материала. 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Общие сведения о λ-исчислении
Ламбда-исчисление – математическая теория, 
предназначенная для формализации обозначения и 
переобозначения как предмета программирования
Классическая логика (и большинство других разделов 
математики) неудовлетворительны для решения данной 
проблемы
Основной объект ламбда-исчисления – функция
 
 
 
Комментарий к слайду  
 
Для формализации понятия «функция» была построена математическая теория, известная 
сегодня под названием ламбда-исчисления. Более точно это исчисление следует называть 
исчислением ламбда-конверсий.  
 
Под конверсией понимается преобразование объектов исчисления (а в программировании 
– функций и данных) из одной формы в другую. Исходной задачей в математике было 
стремление к упрощению формы выражений. В программировании именно эта задача не 
является столь существенной, хотя, как мы увидим в дальнейшем, использование ламбда-
исчисления как исходной формализации может способствовать упрощению вида 
программы, т.е. вести к оптимизации программного кода. 
 
Кроме того, конверсии обеспечивают переход к вновь введенным обозначениям и, таким 
образом, позволяют представлять предметную область в более компактном или более 
детальном виде, или, говоря математическим языком, изменять уровень абстракции по 
отношению к предметной области. Эту возможность широко используют также языки 
объектно-ориентированного и структурно-модульного программирования в иерархии 
объектов,  фрагментов программ и структур данных. На этом же принципе основано 
взаимодействие компонентов приложения в .NET. Именно в этом смысле переход к 
новым обозначениям является одним из важнейших элементов программирования в 
целом, и именно ламбда-исчисление (в отличие от многих других разделов математики), 
как оказывается, является адекватным способом формализации переобозначений. 
 
Поскольку основным объектом ламбда-исчисления является функция, этот подход 
является 
весьма 
продуктивным 
при 
моделировании 
языков 
функционального 
программирования. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Функция в математике и программировании
Математической функцией f с областью определения A 
и областью значений B называется множество 
упорядоченных пар (a,b)∈A×B, таких что если (a,b1)∈f и 
(a,b2)∈f, то b1=b2.
Функцией в языке программирования называется 
конструкция этого языка, описывающая правила 
преобразования аргумента (т.н. фактического параметра) 
в результат.
 
 
 
Комментарий к слайду  
 
 
Заметим, однако, что под термином «функция» в математической формализации и 
программной реализации имеются в виду различные понятия.  
 
Так, математической функцией f с областью определения A и областью значений B 
называется множество упорядоченных пар   
 
(a,b) ∈ A×B, 
 
таких, что если  
 
(a,b1) ∈ f и (a,b2) ∈f,  
 
то 
b1=b2. 
 
 
 
В свою очередь, функцией в языке программирования называется конструкция этого 
языка, описывающая правила преобразования аргумента (так называемого фактического 
параметра) в результат.  
 
 

 
Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
История развития ламбда-исчисления (1)
1924 – М. Шенфинкель (Moses Shönfinkel) разработал 
простую (simple) теорию функций
1934 – А. Черч (Alonso Church) предложил ламбда-исчисление
и применил его для разработки теории множеств
1958 – Х. Карри (Haskel Curry) создал ламбда-исчисление для 
программирования без переменных – комбинаторную 
логику
 
 
Комментарий к слайду  
 
Напомним ход эволюции теорий, лежащих в основе современного подхода к ламбда-
исчислению. 
 
Еще в 1924 г. М. Шенфинкель (Moses Shönfinkel) разработал простую (simple) теорию 
функций, которая фактически являлась исчислением объектов-функций и предвосхитила 
появление ламбда-исчисления. 
 
Затем в 1934 г. А. Черч (Alonso Church) предложил собственно исчисление ламбда-
конверсий или ламбда-исчисление и применил его для исследования теории множеств. 
Вклад ученого был настолько фундаментальным, что теория до сих пор называется 
ламбда-исчислением и часто именуется в литературе ламбда-исчислением Черча. 
 
Позднее, в 1940 г., Х. Карри (Haskell Curry) предложил теорию функций без переменных 
(иначе называемых комбинаторами), известную в настоящее время как комбинаторная 
логика. Эта теория является развитием ламбда-исчисления и представляет собой 
формальный 
язык, 
аналогичный 
языку 
функционального 
программирования 
и 
позволяющий более наглядно моделировать вычисления в среде абстрактных машин, в 
значительной мере схожих с виртуальной машиной .NET.   
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
История развития ламбда-исчисления (2)
1960-е – Р. Хиндли (Roger Hindley) исследовал типизацию в 
комбинаторной логике для моделирования языков 
функционального программирования со строгой 
типизацией
1960-е – П. Лендин (Peter Landin) использовал ламбда-
исчисление для анализа языка ALGOL 60
1960-е – П. Лендин создал вычислительную модель в форме 
абстрактной машины SECD для моделирования языков 
со строгой типизацией, в частности ML
 
 
 
Комментарий к слайду  
 
Позднее, уже в 60-х г.г. Р. Хиндли (Roger Hindley) разработал выводимость типов (type 
inference), т.е. возможность неявно определить тип выражения, исходя из типов 
выражений, которые его окружают. Именно эта возможность широко используется в 
современных языках программирования, таких как SML и Haskell.  
 
Также в 60-х г.г. П. Лендин (Peter Landin) создал первую абстрактную машину на основе 
расширенного ламбда-исчисления. Машина получила название SECD и формализовала 
вычисления на языке программирования ISWIM (If you See What I Mean), который 
впоследствии стал прообразом языка функционального программирования ML.  
 
Наконец, в 70-х г.г. Р. Милнер (Robin Milner) создал полиморфную систему типизации для 
языка функционального программирования ML, которая вместе с развернутым описанием 
того же автора положила начало стандартизации этого языка программирования. Язык 
ML, составляющий  ядро более позднего языка SML, в полной мере формализуется 
посредством ламбда-исчисления.   
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
История развития ламбда-исчисления (3)
1970-е – П. Кюрьен (Piere Curien) и др. создали 
категориальную абстрактную машину, на основе которой 
был реализован CaML, один из современных диалектов 
ML
1970-е – К. Уодсворт (Christopher Wadsworth) предложил 
механизм редукции графов для моделирования 
«ленивых» вычислений в ламбда-исчислении
1970-е Д. Тернер (David Turner) предложил аналогичный 
механизм для «ленивых» вычислений в комбинаторах
 
 
 
Комментарий к слайду  
 
Уже в 70-е г.г. группой ученых института INRIA (Франция), ведущую роль в работе 
которой сыграл Пьер Кюрьен, была создана еще одна абстрактная машина, основанная на 
смене состояний и получившая название категориальной абстрактной машины, или, 
сокращенно, КАМ. Теория категорий в форме категориальной комбинаторной логики, 
которая является теоретическим фундаментом для КАМ, по сути, представляет собой 
вариант ламбда-исчисления. С помощью КАМ был реализован еще один современный 
диалект ML, получивший название CaML (по имени машины). 
 
В 70-х г.г. произошли произошли еще два значительных события в истории ламбда-
исчисления. К. Уодсвортом и Д. Тернером были предложены механизмы оптимизации 
вычислений посредством редукции графов, причем оба механизма существенно 
использовали ламбда-исчисление (первый – в чистом виде, а второй – в форме 
комбинаторной логики).  
 
Таким образом, практически все ранее созданные формализации языков функционального 
программирования (включая абстрактные машины и средства оптимизации вычислений) 
базируются на фундаменте ламбда-исчисления в той или иной его форме. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Ламбда-исчисление: основные компоненты
Алфавит – множество допустимых символов
Утверждения – правила образования терминальных 
символов
Аксиомы – элементарные утверждения, истинность 
которых принимается без доказательства
Правила вывода – правила преобразования одних 
символов (объектов) языка в другие
 
 
 
Комментарий к слайду  
 
Перейдем к описанию ламбда-исчисления как формальной системы. Согласно 
математической практике, необходимо определить следующие элементы теории: 
• алфавит; 
• утверждения; 
• аксиомы; 
• правила вывода. 
 
При этом под алфавитом  понимается множество символов, допустимых в нотации той 
или иной формализации. 
 
 
Утверждения 
устанавливают 
правила 
образования 
терминальных 
символов 
математической теории. 
 
 
Под аксиомами понимаются элементарные утверждения, которые считаются истинными 
без необходимости доказательства истинности. 
 
 
Правила вывода определяют правила преобразования одних символов (объектов), 
исследуемых в теории,  в другие объекты. 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Ламбда-исчисление: алфавит
Константы: c1, c2, … - малые буквы латинского 
алфавита, возможно, с индексами
Переменные: x, y, … - малые буквы латинского 
алфавита, возможно, с индексами
Выражения (термы): M, N, … - заглавные буквы 
латинского алфавита, возможно, с индексами
Специальные символы: “(“, “)”, “.”
 
 
 
Комментарий к слайду  
 
Рассмотрим алфавит ламбда-исчисления. 
 
Допускаются элементы четырех видов: 
1) константы; 
2) переменные; 
3) выражения (или, иначе, термы); 
4) специальные символы. 
 
При этом принимаются следующие обозначения. 
 
Константы c1, c2, … обозначаются малыми буквами латинского алфавита, возможно, с 
индексами. 
 
Переменные x, y, … обозначаются малыми буквами латинского алфавита, возможно, с 
индексами. 
 
Выражения (или, иначе, термы) M, N, … обозначаются заглавными буквами латинского 
алфавита, возможно, с индексами. 
 
Допускается использование следующих специальных символов (взяты в кавычки и 
разделены запятыми): “(“, “)”, “.”  
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Ламбда-исчисление: построение термов
Термы определяются индукцией по построению.
Все переменные и константы являются термами.
Для любых термов M, N и переменной x верно, что
1)
(λx.M) – терм;
2)
(MN) – терм.
При этом выражение (MN) обозначает  операцию 
аппликации (применения функции к аргументу), а 
(λx.M) – абстракции. 
Никакой другой набор символов не является термом.
 
 
 
Комментарий к слайду  
 
Рассмотрим далее порядок конструирования допустимых для заданного алфавита ламбда-
выражений, или, иначе, термов. 
 
Ламбда-термы строятся по индукции (порядок построения можно считать определением) 
следующим образом. 
 
Базис индукции: любая переменная или константа является ламбда-термом по 
определению. 
 
Шаг индукции: если M, N – произвольные ламбда-термы и x –произвольная переменная, 
то справедливо, что: 
• во-первых, выражение (λx.M) является допустимым ламбда-термом; 
• во-вторых, выражение (MN) является допустимым ламбда-термом. 
 
Заметим, что при этом ламбда-выражение (MN) обозначает операцию аппликации (или 
применения функции к аргументу), а ламбда-выражение (λx.M)  – операцию абстракции.  
 
 
Кроме того, примем, что никакой другой набор символов не является допустимым 
ламбда-термом. 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Ламбда-исчисление: аксиомы
Следующие аксиомы задают свойства отношения 
конвертируемости (приводимости одного терма к 
другому), обозначаемого символом “=”.
(α) λx.a = λz.[z/x]a;
(β) (λx.a)b = [b/x]a.
Аксиома (α) означает возможность подстановки терма z 
вместо всех вхождений переменной x в терм а.
Аксиома (β) означает возможность редукции (упрощения
вида) терма в левой части путем подстановки b вместо
всех вхождений переменной x в терм а.
 
 
 
Комментарий к слайду  
 
После определения алфавита и порядка построения допустимых ламбда-выражений 
посредством операций аппликации и абстракции, перечислим аксиомы ламбда-
исчисления. 
 
Отметим, что употребляемый ниже символ “=” понимается в ламбда-исчислении как 
обозначение отношения конвертируемости, которым связываются соединенные этим 
значком ламбда-выражения. Конвертируемость двух ламбда-выражений означает, что 
одно 
ламбда-выражение 
может 
быть 
преобразовано 
к 
другому. 
Отношение 
конвертируемости моделирует переобозначения и во многих отношениях, как уже 
отмечалось,  напоминает процесс программирования. 
 
Следующие аксиомы задают свойства отношения конвертируемости: 
 
 
(α) λx.a = λz.[z/x]a; 
 
(β) (λx.a)b = [b/x]a. 
 
Аксиома (α) означает возможность подстановки терма z вместо всех вхождений 
переменной x в ламбда-выражение а. 
 
Аксиома (β) означает возможность редукции (то есть упрощения вида) ламбда-выражения 
в левой части путем подстановки b вместо всех вхождений переменной x в ламбда-
выражение а. Фактически редукция означает возможность создания (в ламбда-исчислении 
или на языке программирования) одной функции (ламбда-выражения) как сокращенной 
записи другой функции (ламбда-выражения). 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Ламбда-исчисление: правила вывода
Следующие правила вывода термов задают свойства 
отношения конвертируемости:
(μ) если a=b, то ca=cb;
(ν) если a=b, то ac=bc;
(ξ) если a=b, то λx.a= λx.b;
(ρ) a=a (рефлексивность);
(σ) если a=b, то b=a (симметричность);
(τ) если a=b и b=c, то a=c (транзитивность).
 
 
 
Комментарий к слайду  
 
Перечислим правила вывода термов, которые задают характеристики отношения 
конвертируемости: 
 
(μ) если a=b, то ca=cb;  
(ν) если a=b, то ac=bc;  
(ξ) если a=b, то λx.a= λx.b;  
(ρ) a=a (рефлексивность); 
(σ) если a=b, то b=a (симметричность); 
(τ) если a=b и b=c, то a=c (транзитивность). 
 
Как видно из перечисленных выше свойств,  отношение конвертируемости обладает, в 
частности, свойствами рефлексивности, симметричности и транзитивности. Первое из 
только что перечисленных свойств означает конвертируемость произвольного ламбда-
выражения к самому себе, второе – двунаправленность вывода ламбда-выражений 
конвертированием, а третье – возможность опускать промежуточные этапы конверсии для 
цепочек вывода. 
 
Именно в силу фундаментальности отношения конвертируемости для ламбда-исчисления 
эта теория известна также под другим, более точно характеризующим ее суть названием, а 
именно, как исчисление ламбда-конверсий. 
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Соглашения об обозначениях
•
скобки для операции аппликации восстанавливаются по 
ассоциации влево:
x y = (x y), x y z = ((x y) z), …
•
избыточные скобки могут опускаться:
(x y) = x y, ((x y) z) = x y z, …
•
скобки для операции абстракции восстанавливаются по 
ассоциации вправо:
λxy.M = (λx.(λy.M)), λxyz.M = (λx.(λy. (λz.M))), …
 
 
 
Комментарий к слайду  
 
К сожалению, относительная простота описания предыдущих этапов формальной теории 
ламбда-конверсий (алфавита, аксиом и правил вывода) порождает довольно громоздкие 
выкладки при моделировании вычислений.  
 
В этой связи из соображения экономии пространства для вывода соотношений 
принимаются следующие умолчания, позволяющие значительно сократить запись и 
увеличить удобство прочтения и обработки ламбда-выражений. 
 
Во-первых, скобки для операции аппликации восстанавливаются по ассоциации влево, 
например:  
 
x y = (x y), x y z = ((x y) z), … 
 
Во-вторых, избыточные скобки могут опускаться, например:  
 
(x y) = x y, ((x y) z) = x y z, … 
 
В-третьих, скобки для операции абстракции восстанавливаются по ассоциации вправо, 
например: 
 
λxy.M = (λx.(λy.M)), λxyz.M = (λx.( λy. (λz.M))), … 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Примеры ламбда-термов 
1)
x (переменная);
2)
1 (константа);
3)
λx.x (функция тождества);
4)
λx.x + 1 (функция инкремента – прибавления
единицы);
5)
( λx.x + 1)2 = [2/x](λx.x + 1) =  2+1 = 3 (вычисление
значения функции);
6)
a $ b (недопустимый ламбда-терм).
 
 
 
Комментарий к слайду  
 
Проиллюстрируем формальное описание исчисления ламбда-конверсий необходимыми 
содержательными примерами. Рассмотрим следующие шесть ламбда-термов, возможно, с 
цепочками вывода: 
1) 
x; 
2) 
1; 
3) 
λx.x; 
4) 
λx.x + 1; 
5) 
(λx.x + 1)2 = [2/x]( λx.x + 1) =  2+1 = 3; 
6) 
a $ b. 
 
Согласно правилам построения алфавита, первый из ламбда-термов является переменной, 
а второй – константой. 
 
Третий ламбда-терм, согласно правилам построения выражений, представляет собой 
ламбда-абстракцию переменного терма x к самому себе, т.е. определяет функцию 
тождества. 
 
Четвертый ламбда-терм отличается от третьего тем, что добавляет к аргументу x 
константу 1, т.е. определяет функцию инкремента (или прибавления единицы). Заметим, 
что в алфавите ламбда-исчисления отсутствует функция сложения как таковая, так что  
возможны различные интрепретации символа «+» (будем считать его далее «встроенной» 
функцией сложения). 
 
Пятый ламбда-терм обозначает подстановку согласно аксиоме (α) константы 2 вместо 
всех вхождений x в выражение x+1 (вычисление значения функции в число 3 возможно 
при корректной интерпретации символа «+»). 
 
Шестой ламбда-терм недопустим из-за вхождения неопределенного символа «$». 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Примеры элементарных программ на SML (1)
1)
x (переменная, тип определяется в процессе 
трансляции);
2)
1 (константа);
3)
fn x => x (функция тождества);
4)
fn x => x+1 (функция инкремента);
5)
(fn x => x+1) 2 (вычисление значения функции, 
в результате выполнения получается 3)
 
 
 
Комментарий к слайду  
 
Проиллюстрируем соответствие между математической моделью языка функционального 
программирования – ламбда-исчислением и языком функционального программирования 
SML. 
 
Несмотря на то, что мы еще не изучали синтаксис языка, соответствие между ламбда-
исчислением и функциональным языком настолько естественно, что сопоставление 
ламбда-термов SML-выражениям происходит практически интуитивно и не нуждается в 
дальнейших комментариях. 
 
Приведем фрагменты SML-программ, соответствующих допустимым ламбда-термам из 
предыдущего слайда: 
 
1) 
x (переменная, тип которой определяется в процессе трансляции на этапе 
контроля типизации в соответствии с выводом типов); 
2) 
1 (константа); 
3) 
fn x => x (функция тождества); 
4) 
fn x => x+1 (функция инкремента); 
5) 
(fn x => x+1) 2 (вычисление значения функции, в результате выполнения 
получается целое число 3). 
 
 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Примеры элементарных функций на SML (2)
Функция f с формальным параметром x  и телом b 
задается следующим описанием: fun f  x = b, например,
fun f x = 1+x;
Для вычисления значения выражения необходимо 
произвести аппликацию функции к данному выражению:
f  4;
При вычислении значения функции аппликация 
производится к ближайшему аргументу:
f 2 + 3; означает (f 2)+3, а не f(2+3).
 
 
 
Комментарий к слайду  
 
Продолжим иллюстрацию соответствия между программами на языке SML и ламбда-
выражениями, исследовав операцию аппликации функции к аргументу. 
 
Рассмотрим описание функции инкремента с предыдущего слайда: 
 
fun f x = 1+x; 
 
Здесь нужно учитывать, что в общем случае функция f языка программирования SML, 
имеющая формальный параметр x  и тело b, задается следующим описанием: 
 
fun f  x = b; 
 
Для вычисления значения выражения необходимо произвести аппликацию функции к 
данному выражению, для аппликации функции f к целому числу 4 нужно записать: 
 
f  4; 
 
 
 
При вычислении значения функции аппликация производится к ближайшему аргументу. 
Так, запись 
 
 
f 2 + 3;  
 
означает порядок аппликации (f 2)+3, а не f(2+3), т.е. находится в полном соответствии с 
соглашениями о скобках, принятыми  в ламбда-исчислении. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Преимущества ламбда-исчисления
1.
Лаконичность (небольшое количество аксиом и правил 
вывода)
2.
Интуитивная ясность
3.
Иллюстративность (прозрачность графической 
интерпретации)
4.
Полнота (представимость произвольной функции)
5.
Естественная близость к языкам функционального 
программирования (SML, Scheme, Haskell, Miranda, Hope, 
Clean)
 
 
 
Комментарий к слайду  
 
Рассмотрев формальное построение исчисления ламбда-конверсий (алфавит, аксиомы и 
правила вывода выражений) и сопоставив основные элементы (переменная, константа)  и 
операции (аппликация, подстановка) этой теории с базовыми элементами (переменная, 
константа)  и элементарными программами (объявление и аппликация функции) языка 
SML, можно сделать вывод о следующих несомненных преимуществах ламбда-
исчисления как математической модели языка функционального программирования: 
 
2) 
лаконичность (ограниченный необходимыми элементами алфавит, два способа 
построения выражений – аппликация и абстракция,  небольшое количество 
аксиом и правил вывода); 
 
3) 
интуитивная ясность (обозначения являются краткими и легко доступны для 
понимания); 
 
4) 
иллюстративность (ламбда-термы легко интерпретируются не только с 
помощью алгебраической записи, но и посредством визуальной интерпретации 
в виде графов, причем редукция, т.е. упрощение вида графов соответствует 
бета-редукции ламбда-термов); 
 
5) 
полнота (в ламбда-исчислении возможно представить произвольную, в 
частности, сколь угодно сложную, функцию); 
 
6) 
естественная близость к языкам функционального программирования (SML, 
Scheme, Haskell, Miranda, Hope, Clean) была проиллюстрирована на примере 
SML на двух предыдущих слайдах. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (1)
1.
Barendregt H.P. The lambda calculus (revised edition), 
Studies in Logic, 103, North Holland, Amsterdam, 1984
2.
Schönfinkel M. ‘Über die Bausteine der matematischen 
Logik, Math. Annalen 92, pp. 305-316, 1924. Translation 
printed as ‘On the building blocks of mathematical logic’, in 
van Heijenoort, J. (ed.), From Frege to Gödel, Harvard 
University Press, 1967
3.
Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, 
Amsterdam, 1958
4.
Hindley J.R., Seldin J.P. Introduction to combinators and λ-
calculus. London Mathematical Society Student Texts, 1, 
Cambridge University Press, 1986
 
 
 
Комментарий к слайду  
 
 
К сожалению, в рамках времени, отведенных на одну лекцию, можно лишь в общих 
чертах охарактеризовать такую многоаспектную и гибкую теорию, как исчисление 
ламбда-конверсий. Мы ограничились рассмотрением лишь наиболее существенных 
аспектов этой формализации языков функционального программирования.  
 
Для более детального ознакомления с особенностями, достижениями и проблемами в 
области ламбда-исчисления рекомендуется следующий список литературы: 
 
1. Barendregt H.P. The lambda calculus (revised edition), Studies in Logic, 103, North Holland, 
Amsterdam, 1984 
 
2. Schönfinkel M. ‘Über die Bausteine der matematischen Logik, Math. Annalen 92, pp. 305-
316, 1924. Translation printed as ‘On the building blocks of mathematical logic’, in van 
Heijenoort, J. (ed.), From Frege to Gödel, Harvard University Press, 1967 
 
3. Curry H.B., Feys R. Combinatory logic, vol.I, North Holland, Amsterdam, 1958 
 
4. Hindley J.R., Seldin J.P. Introduction to combinators and l-calculus. London Mathematical 
Society Student Texts, 1, Cambridge University Press, 1986 
 
Кратко остановимся на источниках. Работа [1] является энциклопедией ламбда-
исчисления. Работа [2] содержит обсуждение так называемых простых (simple) функций и 
предваряет появление ламбда-исчисления. Работы [3,4] посвящены расширению ламбда-
исчисления – комбинаторной логике. 
 

 
Современные языки программирования и .NET: I семестр
Лекция 4: Ламбда-исчисление как формализация ЯФП
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография (2)
1.
Turner D.A. A new implementation technique for applicative 
languages. Software – Practice and Experience, 9:21-49, 1979
2.
Gordon M.J.C. Progaramming language theory and its 
implementation. Prentice-Hall, 1988
3.
Hughes J. Why functional programming matters. The 
Computer Journal, 32(2)98-107, April 1989 
4.
Hindley J.R. The principal type-scheme of an object in 
combinatory logic. Trans. Amer. Math. Soc., 146:29-60, 1969
5.
Milner R., Tofte M., Harper R., McQueen D. The definition 
of Standard ML (Revised 1997). The MIT Press, 1997
 
 
Комментарий к слайду  
 
 
Продолжим обсуждение библиографии. 
 
Работы [1-3] посвящены вопросам реализации языков программирования, в частности, на 
основе функционального подхода. Работа [4] содержит обсуждение типизации в 
комбинаторной логике, как мы увидим впоследствии, адекватно моделирующей 
типизацию языка SML. Работа [5] посвящена описанию синтаксиса и возможностей языка 
SML. 
 

