arXiv:cs/0511006v2  [cs.LO]  4 Mar 2008
Under consideration for publication in Math. Struct. in Comp. Science
Logical Relations for Monadic Types‚Ä†
JE AN GOUBAULT-LARRE CQ1 ‚Ä°
S  L AWOMIR LASOTA2¬ß
DAVID NOWAK3¬∂
1 LSV, ENS Cachan, CNRS, INRIA
2 Institute of Informatics, Warsaw University
3 Research Center for Information Security, AIST
Received June 2005
Logical relations and their generalizations are a fundamental tool in proving properties
of lambda-calculi, e.g., yielding sound principles for observational equivalence. We
propose a natural notion of logical relations able to deal with the monadic types of
Moggi‚Äôs computational lambda-calculus. The treatment is categorical, and is based on
notions of subsconing, mono factorization systems, and monad morphisms. Our approach
has a number of interesting applications, including cases for lambda-calculi with
non-determinism (where being in logical relation means being bisimilar), dynamic name
creation, and probabilistic systems.
Keywords: logical relations, monads, semantics, typed lambda-calculus.
Contents
1
Introduction
3
1.1
Motivation and context.
3
1.2
Outline.
4
2
Preliminaries
4
3
Lifting of a Monad to a Scone
5
‚Ä† A preliminary version of this paper was presented at the 11th Annual Conference of the Euro-
pean Association for Computer Science Logic (CSL‚Äô02), Edinburgh, Scotland, 22‚Äì25 September 2002
(Goubault-Larrecq et al., 2002).
‚Ä° Work partially supported by the RNTL project EVA, and the ACI jeunes chercheurs ‚ÄúS¬¥ecurit¬¥e infor-
matique, protocoles cryptographiques et d¬¥etection d‚Äôintrusions‚Äù.
¬ß Work partially supported by the Polish KBN grant 7 T11C 002 21, and the IST-2005-16004 Integrated
Project SENSORIA: Software Engineering for Service-Oriented Overlay Computers.
¬∂ Work partially supported by the ACI jeunes chercheurs ‚ÄúS¬¥ecurit¬¥e informatique, protocoles cryp-
tographiques et d¬¥etection d‚Äôintrusions‚Äù.

4
Lifting of a Monad to a Subscone
7
4.1
eT on objects.
9
4.2
eT on morphisms.
9
4.3
Unit eŒ∑.
9
4.4
Multiplication e¬µ.
10
5
Lifting of a Monad to Relations
11
6
Lifting Monoidal Structures
13
6.1
Monoidal Categories
13
6.2
Unit element eI.
15
6.3
Tensor product e‚äó.
15
6.4
Associativity eŒ±.
15
6.5
Left unit e‚Ñì.
16
6.6
Right unit er.
17
6.7
Symmetric Monoidal Categories
17
6.8
Commutativity e‚Ñì.
18
6.9
Lifting Cartesian Products
19
6.10 Terminal object e1.
19
6.11 Binary product e√ó.
20
7
Lifting Strong, Monoidal, and Commutative Monads to a Scone and a Subscone
20
7.1
Lifting Strong Monads
20
7.2
Monoidal Monads
23
7.3
Commutative Monads
26
8
Building Monad Morphisms from Adjunctions
27
8.1
Eilenberg-Moore algebras.
27
8.2
Kleisli category.
28
8.3
Monad Morphisms from Adjunctions
28
8.4
Monoidal, and Strong Monad Morphisms from Monoidal Adjunctions
29
9
Lifting Closed Structures to the Subscone
34
10 Examples
39
10.1 Lift, Exceptions, State, Non-Determinism, and Continuations in Set
Set
Set
40
10.2 Labelled transition systems and bisimulations
42
10.3 Discrete Probabilities and Subprobabilities
42
10.4 Logical relations for dynamic name creation
44
10.5 Fun With Categories I: Taking CCC Ã∏= Set
Set
Set, the Example of Cpo
Cpo
Cpo
47
10.6 Fun With Categories II: Making CCC and C Distinct, e.g., CCC = Cpo
Cpo
Cpo, C = Ord
Ord
Ord 49
10.7 Fun With Categories III: The Case CCC = FS
FS
FS, C = T op
T op
T op
53
10.8 Fun With Categories IV: Metric Spaces
58
11 Related work.
63
12 Conclusions
64
Appendix A
Monoidal Monads, Commutative Monads
68
A.1 From Mediators to Strengths and Dual Strengths
68
A.2 From Strengths and Dual Strengths to Mediators
70
A.3 Monoidal Monad Morphisms
72
A.4 Commutative Monads are Monoidal
73
2

Appendix B
Proof of Lemma 8.3
74
Appendix C
Composition of Monoidal Adjunctions
77
Appendix D
Proof of Proposition 8.6
79
1. Introduction
1.1. Motivation and context.
Logical relations and their generalizations (Mitchell, 1996) are a fundamental tool in
proving properties of lambda-calculi, e.g., characterizing lambda-deÔ¨Ånability (Plotkin, 1980;
Jung and Tiuryn, 1993; Alimohamed, 1995; Fiore and Simpson, 1999), proving equational
completeness (Statman, 1985; Mitchell, 1996), studying parametric polymorphism (Reynolds, 1983;
Ma and Reynolds, 1992; Lazi¬¥c and Nowak, 2000) notably. On the other hand, Moggi‚Äôs
computational lambda-calculus (Moggi, 1991) has proved useful to deÔ¨Åne various notions
of computations on top of the lambda-calculus: side-eÔ¨Äects, input-output, continuations,
non-determinism (Wadler, 1992), probabilistic computation (Ramsey and PfeÔ¨Äer, 2002)
in particular.
What should then be a natural notion of logical relation for Moggi‚Äôs computational
lambda-calculus? Although there is no unique answer to this question, we propose one
that is satisfying in practice. We shall demonstrate the relevance of our approach by
illustrating our construction on monads for non-determinism, dynamic name creation,
and probabilistic computation.
Moggi‚Äôs insight is based on categorical semantics: while categorical models of the Œª-
calculus are cartesian closed categories (CCCs), the computational lambda-calculus re-
quires CCCs with a strong monad (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt). The monadic types of the computational
lambda-calculus are given by the syntax:
œÑ ::= b|œÑ ‚ÜíœÑ|œÑ √ó œÑ|TTT (œÑ)
where b ranges over a set B of so-called base types, and TTT(œÑ) is meant to denote the type
of computations of type œÑ. Compared to the lambda-calculus, Moggi‚Äôs calculus has an
additional val operation, of type œÑ ‚ÜíTTT(œÑ), and an additional let x = u in v construct,
of type TTT(œÑ ‚Ä≤) provided u has type TTT(œÑ) and v has type TTT(œÑ ‚Ä≤) under the assumption x : œÑ.
Every computational lambda-term has a unique interpretation as a morphism in a CCC
with a strong monad. In fact the category Comp
Comp
Comp whose objects are types and whose
morphisms are terms up to Œ≤Œ∑-conversion is the free CCC-with-a-strong-monad over the
set B.
Accordingly, our study will rest on categorical principles. While there is a Ô¨Çurry of
generalizations of logical relations (Kripke logical relations (Mitchell, 1996), lax logical
relations (Plotkin et al., 2000), pre-logical relations (Honsell and Sannella, 2002), etc.),
we use subscones (Mitchell and Scedrov, 1993) as a unifying framework for deÔ¨Åning
logical relations. Recall that subscones over Set
Set
Set allow one to deÔ¨Åne logical relations,
and subscones over the presheaf category Set
Set
SetI lead to I-indexed Kripke logical rela-
tions (Mitchell and Scedrov, 1993). Technically, the development in (Mitchell and Scedrov, 1993)
3

is based on unique lifting of the CCC structure to the subscone. Our whole endeavor then
reduces to Ô¨Ånding appropriate liftings of monads on categories CCC to the subscone category
(C 
‚à©| |) (see Section 4).
The important property of logical relations is the so-called Basic Lemma (Mitchell, 1996):
meanings of a lambda-term in diÔ¨Äerent models w.r.t. related environments are related.
This is immediate for subscones, and stems from the fact that Comp
Comp
Comp is the free CCC-with-
a-strong-monad on B (a trivial adaptation of Proposition 5.2 in (Mitchell and Scedrov, 1993)).
In particular, that any two closed terms that are in logical relation are observationally
equivalent is immediate.
1.2. Outline.
We return to preliminaries in Section 2. We then deÔ¨Åne liftings of monads to scones in Sec-
tion 3; this is simpler than for subscones, and of independent interest. The construction
is based on the use of monad morphisms. We then lift monads to subscones in Section 4,
using a mono factorization system. The important case where the target category CCC is
a product of two categories is investigated in Section 5: this is where binary logical re-
lations arise, allowing us to compare two models. We terminate our lifting construction
by lifting the monoidal structure and monad strength in Sections 6 and 7, respectively.
Section 8 establishes a result by which adjunctions give rise to monad morphisms. In
Section 9, we return to the basics of subscone theory. While the standard construction
of the CCC structure over the subscone requires a functor | | that commutes with Ô¨Ånite
products, we show that the use of mono factorization systems, as in Section 4, allows us
to relax this requirement to | | being only monoidal. While we do not make any use here
of this observation, monoidal functors are more natural from a categorical point of view
than product preserving ones, and we feel it should be interesting in future applications
(we have some already, but we refrain from including them in this paper).
It remains to test the relevance of our construction (Section 10): the logical rela-
tions thus deÔ¨Åned characterize bisimulations when TTT is the non-determinism monad (as
suggested in (Lazi¬¥c and Nowak, 2000)), a generalization of Larsen and Skou‚Äôs proba-
bilistic bisimulations (Larsen and Skou, 1991) when TTT is a measure monad (Giry, 1981;
Jones, 1990), and a notion close to Pitts and Stark‚Äôs logical relations for observational
equivalence of programs that create names dynamically (Pitts and Stark, 1993; Stark, 1998).
We comment on related work in Section 11 and conclude in Section 12.
2. Preliminaries
Fix two categories CCC and C and a functor | | : CCC ‚ÜíC.
Consider the comma category (C ‚Üì| |), whose objects
are tuples ‚ü®S, f, A‚ü©, with f : S ‚Üí|A| in C and whose
morphisms are pairs ‚ü®g, h‚ü©: ‚ü®S, f, A‚ü©‚Üí‚ü®S‚Ä≤, f ‚Ä≤, A‚Ä≤‚ü©, g :
S ‚ÜíS‚Ä≤ in C and h : A ‚ÜíA‚Ä≤ in CCC, such that the diagram
on the right commutes in C.
S
g

f / |A|
|h|

S‚Ä≤
f ‚Ä≤ / |A‚Ä≤|
(1)
This category is the scone of CCC over C via | |, (C ‚Üì| |). (We extend here terminology of
4

(Mitchell and Scedrov, 1993), where the name scone was reserved to the case C = Set
Set
Set,
| | = CCC(1, ) only.) The projection functor U : (C ‚Üì| |) ‚ÜíCCC maps ‚ü®S, f, A‚ü©to A and the
morphism ‚ü®g, h‚ü©to h.
In the sequel we shall be especially interested in the case where C = Set
Set
Set, and | | =
CCC(1, ) is the global section functor, where 1 is terminal in CCC. Another interesting situation
arises when CCC = C√óC and |(A, B)| = A√óB, assuming that C has Ô¨Ånite products. Objects
of the scone then represent binary relations between objects in C. In this case, given two
functors | |1 : CCC1 ‚ÜíC and | |2 : CCC2 ‚ÜíC, we may deÔ¨Åne | | : CCC ‚ÜíC, for CCC = CCC1√óCCC2,
by |(A1, A2)| = |A1|1√ó|A2|2.
Further assume we are given a monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) on CCC. When CCC = CCC1√óCCC2, the monad
TTT on CCC will be usually deÔ¨Åned pointwise, by two monads TTT 1 and TTT 2 on CCC1 and CCC2,
respectively: TTT(A1, A2) = (TTT 1(A1),TTT 2(A2)).
3. Lifting of a Monad to a Scone
By lifting of a monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) to the scone (C ‚Üì| |) of CCC over C we mean a monad
( eT , eŒ∑, e¬µ) on (C ‚Üì| |) such that the diagram
(C ‚Üì| |)
e
T /
U

(C ‚Üì| |)
U

CCC
TTT
/ CCC
(2)
commutes, i.e. U ‚ó¶eT = TTT ‚ó¶U and moreover
UeŒ∑ = Œ∑Œ∑Œ∑U and Ue¬µ = ¬µ¬µ¬µU.
(3)
By UeŒ∑ and Œ∑Œ∑Œ∑U we mean the two
possible compositions of a natural
transformation with U, similarly Ue¬µ
and ¬µ¬µ¬µU. The equations (3) amount
to the requirement that the two dia-
grams on the right commute, for all
objects X in (C ‚Üì| |):
TTT 2UX
(2)
¬µ¬µ¬µUX
zuuuuuuuu
TTTUX
(2)
TTTUX
(2)
TTTU eTX
(2)
UX
U eŒ∑X
/
Œ∑Œ∑Œ∑UX
<y
y
y
y
y
y
y
U eTX
U eTX
U eT 2X
U e¬µX
o
In other words, the functor U together with the identity natural transformation is a
morphism of monads from eT to TTT. (We recall monad morphisms shortly.) Note that
the equations (3) determine the CCC-components of eŒ∑ and e¬µ unambiguously. Moreover,
diagram (2) determines the CCC-component of the action of eT on objects and morphisms,
i.e. ‚ü®S, f, A‚ü©is necessarily mapped to ‚ü®eS, ef,TTTA‚ü©, for some eS, ef and a morphism ‚ü®g, h‚ü©is
necessarily mapped to ‚ü®eg,TTTh‚ü©, for some eg.
Our notion of lifting could be stated more generally, for an arbitrary pair of categories,
a functor from the Ô¨Årst one to the second one and a monad on the second category. In
fact, in the next section we consider a lifting of TTT to another category, namely a suitable
subcategory of (C ‚Üì| |).
To be able to give an appropriate lifting we assume another monad (T,
,
) on C such
5

that the two monads TTT and T are related by a monad morphism from TTT to T, i.e. a
natural transformation
œÉ : T| | ‚áí|TTT|
making the following two diagrams commute, for each object A in CCC:
T2|A|
|A|
{vvvvvvv
TœÉA

T|A|
œÉA

T|A|
œÉA

T|TTTA|
œÉTT
T A

|A|
|A|
={
{
{
{
{
{
{
|Œ∑Œ∑Œ∑A|
/ |TTTA|
|TTTA|
TTT 2A

|¬µ¬µ¬µA|
o
(4)
To be formal, a monad morphism is a pair (| |, œÉ) satisfying the equations above. We
shall however continue to say that œÉ is a monad morphism, when | | is understood.
Having œÉ, we deÔ¨Åne eT on objects by
‚ü®S, f, A‚ü©

/
‚ü®TS, œÉA ‚ó¶Tf,TTTA‚ü©
exploiting that if S
f / |A| then TS
Tf / T|A|
œÉA / |TTTA| is a morphism. On mor-
phisms we deÔ¨Åne eT by
‚ü®g, h‚ü©

/
‚ü®Tg,TTTh‚ü©
since from
S
f /
g

|A|
|h|

S‚Ä≤
f ‚Ä≤ / |A‚Ä≤|
we deduce that
TS
Tf /
Tg

T|A|
œÉA / |TTTA|
|TTT h|

TS‚Ä≤
Tf ‚Ä≤ / T|A‚Ä≤|
œÉA‚Ä≤ / |TTTA‚Ä≤|
commutes,
by naturality of œÉ. Moreover, we put
eŒ∑‚ü®S,f,A‚ü©= ‚ü®S,Œ∑Œ∑Œ∑A‚ü©and e¬µ‚ü®S,f,A‚ü©= ‚ü®S,¬µ¬µ¬µA‚ü©.
Checking that this deÔ¨Ånes a monad is straight-
forward. First, to check that unit and mul-
tiplication are well deÔ¨Åned it is suÔ¨Écient to
merge the commuting diagrams (4) and com-
plete them with naturality squares for
 and
 as shown on the right.
Unit eŒ∑ and multiplication e¬µ are natural since
they are deÔ¨Åned pointwise and Œ∑Œ∑Œ∑, ¬µ¬µ¬µ,
 and
 are. Verifying monad laws is immediate, by
the same argument.
S
f

S / TS
Tf

T2S
T2f

S
o
T2|A|
|A|
{vvvvvvv
TœÉA

T|A|
œÉA

T|TTTA|
œÉTT
T A

|A|
|A|
={
{
{
{
{
{
{
|Œ∑Œ∑Œ∑A|
/ |TTTA|
TTT 2A

|¬µ¬µ¬µA|
o
The monad morphism (4) can be equivalently given by a lifting of | | to the categories
6

of algebras of the monads, i.e. by a functor e| | : CCCTTT ‚ÜíCT making the diagram commute:
CCCTTT
f
| | /
UTT
T 
CT
UT

CCC
| |
/ C
where CCCTTT and CT denote categories of algebras of the monads and UTTT and UT denote
the obvious forgetful functors. In fact, for Ô¨Åxed monads TTT and T and a Ô¨Åxed functor | |,
there is a one-to-one correspondence between the monad morphisms œÉ and liftings of | | to
algebras. The proof of this fact can be found in (Appelgate, 1965) or in (Johnstone, 1975).
4. Lifting of a Monad to a Subscone
Following, and slightly extending (Mitchell and Scedrov, 1993), we may call the subscone
of CCC over C the full subcategory (C 
‚à©| |) of (C ‚Üì| |) consisting of all objects ‚ü®S, f, A‚ü©
with f a mono, written S 
f / |A| . (We shall actually deÔ¨Åne the subscone slightly
diÔ¨Äerently below.)
When C = Set
Set
Set and |A| is given by CCC(1, A), each object S 
/ |A| in the subscone
represents a subset of global elements of A. In the binary case, i.e. when CCC = CCC1√óCCC2 and
|(A1, A2)| = CCC1(11, A1)√óCCC2(12, A2), S 
/ |(A1, A2)| corresponds to a binary relation
on global elements of A1 and A2‚Äîwhen A1 and A2 are the respective denotations of
type œÑ in two given models, this will be the logical relation at type œÑ.
For technical reasons, we require that C has a mono factorization system. This is
essentially an epi-mono factorization (Adamek et al., 1990), except we relax part of the
deÔ¨Ånition: we keep the mono part but do not require the epis in the sequel. Alternately,
this is a factorization system where one of the classes of morphisms is required to consist
of monos only.
Formally, a mono factorization system is given by two distinguished subclasses of mor-
phisms in C, the so-called pseudoepis
/ /
and the so-called relevant monos  
/ .
The latter must be monos, while the former are not required to be epis. Both classes
must be closed under composition with isomorphisms.
Each morphism f in C must factor as f = m ‚ó¶e for some
pseudoepi e and some relevant mono m; and each commut-
ing square (5) has a diagonal making both triangles com-
mute as in (6). We call this diagonal morphism the diagonal
Ô¨Åll-in. Note that the diagonal Ô¨Åll-in is necessarily unique
and that whenever the lower-right triangle commutes, the
upper-left triangle does too. Furthermore, the latter prop-
erty guarantees that the factorization f = m ‚ó¶e is unique
up to iso.
¬∑
/ /

¬∑

¬∑ 
/ ¬∑
(5)
¬∑
/ /

¬∑

 ¬∑ 
/ ¬∑
(6)
In particular, we do not require neither pseudoepis nor relevant monos to be closed under
composition, which holds true for an epi-mono factorization system, see e.g. (Adamek et al., 1990,
7

Chapter 14). But it is easy to deduce from the diagonal Ô¨Åll-in property that a composi-
tion of two pseudoepis is pseudoepi indeed, and similarly a composition of two relevant
monos is a relevant mono, see e.g. (Barr, 1998). It is also proved there that both classes
contain all isomorphisms.
In fact, the factorization of f as m‚ó¶e determines uniquely a so-called relevant subobject
of the codomain, deÔ¨Åned as follows. Two relevant monos in C with the same codomain,
S1  f1 / S
and S2  f2 / S
are called equivalent if and only if there exist g1 and g2
making the two triangles commute:
S1
g2
/
 o
f1
 @
@
@
@
@
@
S2
g1
o
oO
f2
~~~~~~~
S
i.e., f1 ‚ó¶g1 = f2 and f2 ‚ó¶g2 = f1. A relevant subobject of S is an equivalence class of
relevant monos with codomain S. Equivalently, we could take as objects of the subscone
all relevant subobjects of |A|, for all objects A in CCC. We prefer to keep the simpler
presentation, despite the fact that this implies that some constructions in the sequel are
only determined up to isomorphism, e.g., (7) below.
We come back to the deÔ¨Ånition of the subscone:
DeÔ¨Ånition 4.1. Given two categories CCC, C, a functor | | : CCC ‚ÜíC, and a mono factoriza-
tion system on C, the subscone of CCC over C is the full subcategory (C 
‚à©| |) of (C ‚Üì| |)
consisting of all objects ‚ü®S, f, A‚ü©with f a relevant mono S 
f / |A| .
It may seem that the notation (C 
‚à©| |) is too vague, as it does not mention CCC or the
mono factorization system explicitly. It will be clear that making all parameters explicit
would make the notation extremely heavy.
Additionally, we shall assume that Te is pseudoepi for every morphism e in a subclass
of all pseudoepis called relevant pseudoepis, which we shall deÔ¨Åne shortly. This will be
used in Diagram (11) below. In most applications, it will suÔ¨Éce to check that T preserves
pseudoepis.
Note the following simple and important fact:
Fact 4.2. The Ô¨Årst component g of a morphism ‚ü®g, h‚ü©(recall that
S
g

 
/ |A|
|h|

S‚Ä≤ 
/ |A‚Ä≤|
com-
mutes) in a subscone is uniquely determined by the second component h.
This is because the bottom arrow is now mono.
Let us deÔ¨Åne a lifting of the monad to the subscone by analogy with (2) and (3) for the
scone. In the binary case mentioned at the beginning of this section, this corresponds to a
lifting of a monad to the category of binary relations (as objects) and relation preserving
functions (as morphisms).
8

4.1. eT on objects.
The lifting eT on objects is given by the mono
part of the mono factorization of the lifting
of the previous section: ‚ü®S, f, A‚ü©is taken to
‚ü®eS, m,TTTA‚ü©given by the diagram on the right.
TS
Tf /
e 
T|A|
œÉA

eS 
m / |TTTA|
(7)
We call pseudoepis e arising in this way T, œÉ-relevant pseudoepis. That is, a T, œÉ-relevant
pseudoepi is the pseudoepi part of a factorization of a morphism of the form œÉA ‚ó¶Tf,
where f is a relevant mono. For short, we shall call them relevant pseudoepis when T
and œÉ are clear from context.
Clearly eT is deÔ¨Åned only up to iso. Formally, the construction would be unambiguous if
we worked with subobjects of |TTTA|, which are determined uniquely.
4.2. eT on morphisms.
Given a morphism ‚ü®g, h‚ü©, the diagram on the
right commutes. Then the action of eT on ‚ü®g, h‚ü©
will be obtained from the unique diagonal guar-
anteed by (6). We construct diagram (9) below
from two copies of (7).
S
g
<<<< 
f
/ |A|
|h|
!D
D
D
S‚Ä≤ 
f ‚Ä≤
/ |A‚Ä≤|
(8)
All four given faces of the cube com-
mute. Both front and back faces com-
mute by deÔ¨Ånition of eT on objects: they
are copies of diagram (7). The right-
hand face is a naturality square of œÉ;
the top face is by application of T to
diagram (8), hence commutes by deÔ¨Å-
nition of morphisms in the subscone.
TS
Tf
/
e

Tg
!D
D
D
D
T|A|
œÉA

T|h|
$II
I
I
TS‚Ä≤
Tf ‚Ä≤
/
e‚Ä≤

T|A‚Ä≤|
œÉA‚Ä≤

eS  m
/ |TTTA|
|TTT h|
$II
I
I
eS‚Ä≤ 
m‚Ä≤
/ |TTTA‚Ä≤|
(9)
Now, an instance of diagram (5) can be found in (9) by two walks from TS to |TTTA‚Ä≤|: one
starts with the pseudoepi TS
e / / eS , the other ends with the relevant mono eS‚Ä≤ 
m‚Ä≤ / |TTTA‚Ä≤| .
Since all faces commute, there is an arrow eS
/ eS‚Ä≤ as in diagram (6), making the two
newly created faces of the cube commute. This arrow is unique by Fact 4.2. Now eT‚ü®g, h‚ü©
is given by the bottom face. Functoriality follows immediately from uniqueness of the
diagonal arrow in (6).
4.3. Unit eŒ∑.
The (C-component of the) unit eŒ∑‚ü®S,f,A‚ü©is de-
Ô¨Åned by post-composing
S with the pseu-
doepi part of the mono factorization in (7).
This is well-deÔ¨Åned since everything in sight
in the diagram on the right commutes. Indeed,
the right triangle is the monad morphism dia-
gram (4) (left), the upper square is the natu-
rality of
 while the lower one is a copy of (7).
S 
f
/
S

|A|
|Œ∑Œ∑Œ∑A|

|A|
{xxxxxxx
TS
Tf /
e 
T|A|
œÉA
#F
F
F
F
F
F
F
eS 
m
/ |TTTA|
(10)
9

4.4. Multiplication e¬µ.
The (C-component of the) multiplication e¬µ‚ü®S,f,A‚ü©will be induced by a diagram similar
to (9) (below).
Again, all the faces not having the
dashed arrow or the required dotted ar-
row as edge commute. The front face
and the lower half of the back face
are instances of (7), deÔ¨Åning eT‚ü®S, f, A‚ü©
and eT 2‚ü®S, f, A‚ü©, respectively. The up-
per half of the back face is by appli-
cation of T to the front face. The right-
hand face is the other monad morphism
diagram (4) (right), which we had not
used yet, while the upper one is a nat-
urality square for
.
T2S
T2f
/
Te 
S
222222222222
T2|A|
TœÉA 
|A|
66666666666
TeS
Tm
/
ee

+
+
+
+
+
+
+
+
+
T|TTTA|
œÉTT
T A

TS
Tf
/
e
T|A|
œÉA

eeS
 
e
m /
!
!
TTT 2A

|¬µ¬µ¬µA|
#H
H
H
H
H
eS 
m
/ |TTTA|
(11)
Note that Te is a pseudoepi, since e is a relevant pseudoepi by construction, and T maps
relevant pseudoepis to pseudoepis. The composition ee ‚ó¶Te is necessarily a pseudoepi as
well (Barr, 1998). We may use this result, or use a diagonal (6) twice. Here, and in some
other cases later, we prefer to do so.
First, similarly as in diagram (9) we Ô¨Ånd an instance of diagram (5) by two walks
from T2S to |TTTA|, one starting with Te and the other ending with m. Hence, the unique
dashed arrow exists and makes the two triangles commute. One of them, involving the
pseudoepi Te, is the upper part of the left-hand side. The other one, namely that involving
the relevant mono m, allows us to apply (5) again, since the following two walks from
TeS to |TTTA| commute: one starting with the pseudoepi ee and the other consisting of
the dashed arrow followed by m. Hence, the unique dotted arrow exists and makes the
bottom face as well as the triangle in the left-hand face commute. The multiplication
e¬µ‚ü®S,f,A‚ü©is then deÔ¨Åned by the bottom face of the cube.
VeriÔ¨Åcation of the monad laws is a formality due to the following:
Fact 4.3. Given two parallel arrows in (CCC 
‚à©| |), say ‚ü®g1, h1‚ü©and ‚ü®g2, h2‚ü©, they are equal
whenever the second components h1 and h2 are.
The proof is immediate by Fact 4.2. Using this fact, and knowing that second components
of eŒ∑ and e¬µ satisfy the monad laws (as they are unit and multiplication of TTT, respectively),
we deduce immediately that eŒ∑ and e¬µ satisfy the monad laws too. Similarly one proves
naturality of eŒ∑ and e¬µ. We shall use this argument extremely often in the sequel.
It is useful to summarize the ingredients we have used here. To lift a monad (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ)
on CCC to (C 
‚à©| |), we need:
10

(i) a category C and a functor | | : CCC ‚ÜíC,
(ii) a monad (T,
,
) on C,
related to (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) by a monad morphism (| |, œÉ) from TTT to T,
(iii) a mono factorization system on C,
(iv) T maps relevant pseudoepis to pseudoepis.
Recall that to lift the CCC structure of CCC to the subscone, we additionally require C to
be a CCC with pullbacks, and | | to preserve Ô¨Ånite products (Mitchell and Scedrov, 1993).
Description of the construction can be found e.g., in (Goubault-Larrecq and Goubault, 2003),
Section 5.4. We shall see in Section 9 that the existence of a mono factorization system
on C allows us to relax the requirements on | | somewhat.
5. Lifting of a Monad to Relations
Recall that we would like to lift monads to categories of binary relations as objects.
Hence, assume in this section that CCC is a product category, CCC = CCC1√óCCC2 and that both
CCC1 and CCC2 are equipped with monads TTT 1 and TTT 2, and functors | |1 : CCC1 ‚ÜíC and
| |2 : CCC2 ‚ÜíC. A monad TTT on CCC can be deÔ¨Åned pairwise: TTT‚ü®A1, A2‚ü©= ‚ü®TTT 1A1,TTT 2A2‚ü©and
similarly we deÔ¨Åne | | : CCC ‚ÜíC by |(A1, A2)| = |A1|1√ó|A2|2.
To this aim we assume binary products
in C, i.e., for each pair of objects A1, A2
of C, an object A1 √ó A2 in C, together
with two morphisms œÄ1 : A1 √óA2 ‚ÜíA1
and œÄ2 : A1 √ó A2 ‚ÜíA2 satisfying the
requirement that for every morphisms
f1 and f2, there is a unique morphism
h making the whole diagram commute.
We write ‚ü®f1, f2‚ü©for h.
C
f1
)T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
h
#
f2
5555555555555555
A1 √ó A2
œÄ1
/
œÄ2

A1
A2
In the same vein monad morphisms from TTT 1 to T and from TTT 2 to T induce a monad
morphism from TTT to T. Indeed, given any two monad morphisms
œÉ1 : T| |1 ‚áí|TTT 1|1
and
œÉ2 : T| |2 ‚áí|TTT 2|2,
we can deÔ¨Åne œÉ(A1,A2) : T(|A1|1√ó|A2|2) ‚Üí|TTT 1A1|1√ó|TTT 2A2|2 by
œÉ(A1,A2) = ‚ü®œÉ1
A1 ‚ó¶TœÄ1, œÉ2
A2 ‚ó¶TœÄ2‚ü©,
(12)
where œÄ1 and œÄ2 denote the projections from |A1|1√ó|A2|2.
The situation gets much simpler when C = Set
Set
Set, | |1 = CCC1(11, ) and | |2 = CCC2(12, ),
where we assume that CCC1 and CCC2 have terminal objects, 11 and 12 respectively. Each
object S 
/ |(A1, A2)| in the subscone deÔ¨Ånes a binary relation (again noted S) on
global elements of A1 and A2. Obviously Set
Set
Set satisÔ¨Åes all requirements from previous
sections, with surjections as pseudoepis and injections as relevant monos.
For a moment imagine that TTT 1 and TTT 2 are strong monads and that we are able to lift
strong monads to subscones ‚Äì this will be tackled in detail in the following Sections 6
and 7. Given two CCCs CCC1 and CCC2 with respective strong monads TTT 1 and TTT 2, the fact
11

that Comp
Comp
Comp is the free CCC with strong monad on the set B of base types means that
there are two representations of CCCs-with-strong-monads, J K1 and J K2, from Comp
Comp
Comp to
CCC1 and CCC2 respectively: they are the natural meaning functions for monadic types and
computational Œª-terms.
Our construction of a lifting together
with
standard
constructions
on
sub-
scones
(Mitchell and Scedrov, 1993)
yield another representation of CCCs-
with-strong-monads J K from Comp
Comp
Comp to
(Set
Set
Set 
‚à©| |). That J K is a lifting means that
U ‚ó¶J K = ‚ü®J K1, J K2‚ü©, i.e., the diagram on
the right commutes. When CCC1 and CCC2 are
concrete categories, this means that
(Set
Set
Set 
‚à©| |)
U

Comp
Comp
Comp
J K
5l
l
l
l
l
l
l
l
l
‚ü®J K1,J K2‚ü©
/ CCC1 √ó CCC2
‚àÄa1 ‚ààJŒìK1 , a2 ‚ààJŒìK2 .(a1, a2) ‚ààJŒìK ‚áí(JtK1 (a1), JtK2 (a2)) ‚ààJœÑK
(13)
for all terms t of type œÑ in the context Œì = x1 : œÑ1, . . . , xn : œÑn; representations of Œì are
taken to be products of the representations of œÑ1, . . . , œÑn; JœÑK is a relation between JœÑK1
and JœÑK2, deÔ¨Åned by induction on types œÑ (the case where œÑ is a base type is arbitrary):
(f1, f2) ‚ààJœÑ ‚ÜíœÑ‚Ä≤K ‚áê‚áí‚àÄ(a1, a2) ‚ààJœÑK .(f1(a1), f2(a2)) ‚ààJœÑ ‚Ä≤K
((a1, a‚Ä≤
1), (a2, a‚Ä≤
2)) ‚ààJœÑ √ó œÑ‚Ä≤K ‚áê‚áí(a1, a2) ‚ààJœÑK ‚àß(a‚Ä≤
1, a‚Ä≤
2) ‚ààJœÑ‚Ä≤K
(B1, B2) ‚ààJTTTœÑK ‚áê‚áí(B1, B2) ‚ààeTJœÑK
These equations (except possibly the last one) are the standard deÔ¨Ånition of a logical
relation. (13) is the already cited Basic Lemma.
Further simpliÔ¨Åcation is gained when CCC1 = CCC2 = Set
Set
Set, the three monads TTT 1, TTT 2 and T
are identical and both | |1 and | |2 are identity functors. The monad morphism œÉ reduces
to distributivity of the monad T over binary product, and (12) rewrites to
œÉ(A1,A2) = ‚ü®TœÄ1, TœÄ2‚ü©: T(A1√óA2) ‚ÜíTA1√óTA2
where by T we denote a given single monad on Set
Set
Set. This is a particularly important
special case, so we study it in more detail.
Every binary relation S ‚äÜA1 √ó A2 has a representation S  ‚ü®œÄS 1,œÄS 2‚ü©/ A1√óA2 where
the arrow is the inclusion induced by two projections œÄS1 : S ‚ÜíA1 and œÄS2 : S ‚ÜíA2. In
fact, the full subcategory of the subscone consisting exclusively of inclusions instead of all
injections is equivalent to the whole subscone, so without loss of generality we consider
only inclusions in the rest of this section.
Recall the action of a lifted monad eT
on a relation S  ‚ü®œÄS 1,œÄS 2‚ü©/ A1√óA2 :
TS
T‚ü®œÄS 1,œÄS2‚ü©/

T(A1√óA2)
œÉ(A1,A2)

eS 
/ TA1√óTA2
The functor eT maps a relation S to the relation between sets TA1 and TA2 deÔ¨Åned
as the direct image of the function ‚ü®TœÄS1, TœÄS2‚ü©: T S ‚ÜíTA1√óTA2, since the middle
(dashed) triangle in the following diagram commutes by the universal property of product
12

(together with all other triangles):
TS
T‚ü®œÄS1,œÄS 2‚ü©




‚ü®TœÄS1,TœÄS2‚ü©
~



	


TœÄS1
z
TœÄS 2

T(A1√óA2)
eeeeee
TœÄ1
reeeeeeeeeeeeeeeeeeeeee
‚ü®TœÄ1,TœÄ2‚ü©
o o
wo o
TœÄ2
%L
L
L
L
L
L
L
L
TA1
TA1√óTA2
œÄ‚Ä≤
1
o
œÄ‚Ä≤
2
/ TA2
where by œÄ‚Ä≤
1 and œÄ‚Ä≤
2 we denote two projections from TA1√óTA2.
It is instructive to look at some concrete example before going to more technical
Sections 6 and 7. Further examples are presented in more detail in Section 10. Consider
TA = PÔ¨Ån(A), the Ô¨Ånite powerset monad on Set
Set
Set. If we assume for simplicity that œÄS1
and œÄS2 are simply inclusions, then the function TœÄS1 takes a Ô¨Ånite relation R ‚äÇS to its
domain, i.e. {x|‚àÉy¬∑(x, y) ‚ààR}, and TœÄS2 takes R to its codomain, i.e., {y|‚àÉx¬∑(x, y) ‚ààR}.
Hence, the image of the function ‚ü®TœÄS1, TœÄS2‚ü©is a relation eS between Ô¨Ånite subsets of A1
and A2 that contains precisely domain-codomain pairs of Ô¨Ånite relations R ‚äÜS. Hence
(B1, B2) ‚ààeS iÔ¨Ä
‚àÄb1 ‚ààB1.‚àÉb2 ‚ààB2.(b1, b2) ‚ààS
‚àß
‚àÄb2 ‚ààB2.‚àÉb1 ‚ààB1.(b1, b2) ‚ààS.
(Pitts, 1996) also considers lifting of certain constructions on objects to corresponding
constructions on relations over these objects. The concept of lifting is similar to ours,
although technically diÔ¨Äerent. The notion of ‚Äùrelation‚Äù used in the paper is given by a so
called relational structure on a category, and is fairly abstract. On the other hand, Pitts
restricts to categories of domains, usually deÔ¨Åned as least solutions of recursive domain
equations. The interest of the author is mainly in questions related to domain theory.
One of main results gives conditions for existence of lifting of the solution of an equation
in the following sense: given a domain deÔ¨Åned by D = Œ¶(D), is there a relation ‚àÜon D
such that ‚àÜ= Œ¶(‚àÜ)? Strong monads and their liftings are not considered in the work
of Pitts. Although, for certain types of relational structures the approach of Pitts seems
to yield similar liftings as ours. E.g., in the case of binary relations, the function space
is lifted precisely as logical relations are usually deÔ¨Åned on a function type, and hence
exactly like in the case of lifting to subscones.
6. Lifting Monoidal Structures
6.1. Monoidal Categories
In this section, and the following ones, we assume that each of the categories CCC and C is
equipped with a monoidal structure. In other words, we assume that (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and
(C, ‚äó, I,
,
l,
r) are monoidal categories (Mac Lane, 1971). This will allow us to extend
our lifting of a monad to one of a strong monad in the following Section 7.
This means that I is an object of C, ‚äóis a functor from C √ó C to C, and
A,B,C :
13

(A ‚äóB) ‚äóC ‚ÜíA ‚äó(B ‚äóC),
lA : I ‚äóA ‚ÜíA,
rA : A ‚äóI ‚ÜíA are natural isomorphisms
called the associativity, the left unit and the right unit laws respectively, making the
following squares commute.
((A ‚äóB) ‚äóC) ‚äóD
A‚äóB,C,D/
A,B,C‚äóidD

(A ‚äóB) ‚äó(C ‚äóD)
A,B,C‚äóD/ A ‚äó(B ‚äó(C ‚äóD))
(A ‚äó(B ‚äóC)) ‚äóD
A,B‚äóC,D
/ A ‚äó((B ‚äóC) ‚äóD)
idA‚äóB,C,D
O
(14)
(A ‚äóI) ‚äóB
A,I,B
/
rA‚äóidB
&M
M
M
M
M
M
M
M
M
M
A ‚äó(I ‚äóB)
idA‚äólB
xqqqqqqqqqq
A ‚äóB
(15)
And similarly for III, ‚äó‚äó‚äó, Œ±Œ±Œ±, ‚Ñì‚Ñì‚Ñì, rrr.
We prefer to work in a slightly more general setting compared to (Mitchell and Scedrov, 1993),
where cartesian structure was assumed. In Section 9 we show how this added generality
can be exploited for a fragment of linear lambda calculus. Typically, our categories will
have Ô¨Ånite products, then I will be a terminal object, ‚äówill be binary product, and
,
l
and
r will be the obvious isomorphisms.
We also assume that | | is a monoidal functor (Eilenberg and Kelly, 1966). That is,
there is a mediating pair (,
i), composed of a natural transformation
A,B : |A| ‚äó|B| ‚Üí
|A ‚äó‚äó‚äóB| and a morphism
i : I ‚Üí|III| satisfying the following coherence conditions:
(|A| ‚äó|B|) ‚äó|C|
|A|,|B|,|C| /
A,B‚äóid|C|

|A| ‚äó(|B| ‚äó|C|)
id|A|‚äóB,C

|A ‚äó‚äó‚äóB| ‚äó|C|
A‚äó
‚äó
‚äóB,C

|A| ‚äó|B ‚äó‚äó‚äóC|
A,B‚äó
‚äó
‚äóC

|(A ‚äó‚äó‚äóB) ‚äó‚äó‚äóC|
|Œ±Œ±Œ±A,B,C|
/ |A ‚äó‚äó‚äó(B ‚äó‚äó‚äóC)|
(16)
I ‚äó|A|
i‚äóid|A|

l|A|
#H
H
H
H
H
H
H
H
H
|III| ‚äó|A|
III,A

|A|
|III ‚äó‚äó‚äóA|
|‚Ñì‚Ñì‚ÑìA|
;v
v
v
v
v
v
v
v
v
(17)
|A| ‚äóI
id|A|‚äói

r|A|
#H
H
H
H
H
H
H
H
H
|A| ‚äó|III|
A,III

|A|
|A ‚äó‚äó‚äóIII|
|rrrA|
;v
v
v
v
v
v
v
v
v
(18)
Finally, we assume that pseudoepis and relevant monos form a so-called monoidal mono
factorization system, i.e., for every two pseudoepis e1, e2, then e1‚äóe2 is again a pseudoepi.
This name stems from (Ambler, 1991), DeÔ¨Ånition 5.2.1, p.91.
We deÔ¨Åne below a lifting of the monoidal structure to the subscone: we show that the
14

subscone is a monoidal category ((C 
‚à©| |), e‚äó, eI, eŒ±, e‚Ñì, er) in such a way that U( eAe‚äóeB) =
U eA ‚äó‚äó‚äóU eB, UeI = III, UeŒ± e
A, e
B, e
C = Œ±Œ±Œ±U e
A,U e
B,U e
C, Ue‚Ñìe
A = ‚Ñì‚Ñì‚ÑìU e
A, Uer e
A = rrrU e
A. Lifting to scones is
omited here but can be easily extracted from diagrams below by dropping all factoriza-
tions.
6.2. Unit element eI.
Let eI be the triple ‚ü®I,
i,III‚ü©as built from the diagram on
the right, obtained from a factorization of
i.
I
i
?
?
?
?
?
?
eI 
I 
i
/ |III|
(19)
6.3. Tensor product e‚äó.
We build the tensor product ‚ü®S1, m1, A1‚ü©e‚äó‚ü®S2, m2, A2‚ü©in the obvious way: compose
m1 ‚äóm2 with the mediating natural transformation
, and factorize.
The tensor product is then given by
‚ü®S12, m12, A1 ‚äó‚äó‚äóA2‚ü©on the right. This
is similar to the construction of eT.
S1 ‚äóS2
m1‚äóm2/
e12

|A1| ‚äó|A2|
A1,A2

S12 
m12
/ |A1 ‚äó‚äó‚äóA2|
(20)
6.4. Associativity eŒ±.
This is more involved, but basically similar to the construction of the multiplication of
the monad in the subscone. In the diagram below, e12 ‚äóidS3 is pseudoepi because both
e12 (given by Diagram 20) and idS3 are pseudoepis, and because our mono factorization
system is monoidal. The two front faces and the two back faces are derived from the
deÔ¨Ånition of e‚äó, the top face is a naturality square for
, the right face is the coherence
condition (16). The dashed arrow, and then the dotted arrow bŒ±, are by the diagonal
Ô¨Åll-in property of our factorization system. The desired associativity morphism is then
the pair (bŒ±,Œ±Œ±Œ±A1,A2,A3) (bottom face).
15

(S1 ‚äóS2) ‚äóS3
(m1‚äóm2)‚äóm3/
e12‚äóidS3

S1,S2,S3
(P
P
P
P
P
P
P
(|A1| ‚äó|A2|) ‚äó|A3|
A1,A2 ‚äóidA3 
|A1|,|A2|,|A3|
)T
T
T
T
T
T
T
T
T
S1 ‚äó(S2 ‚äóS3)
m1‚äó(m2‚äóm3)
/
idS1‚äóe23

|A1| ‚äó(|A2| ‚äó|A3|)
id|A1|‚äóA2,A3

S12 ‚äóS3
m12‚äóm3
/
e(12)3

6
6
6
6
6
6
6
6
6
6
|A1 ‚äó‚äó‚äóA2| ‚äó|A3|
A1‚äó
‚äó
‚äóA2,A3 
S1 ‚äóS23
m1‚äóm23
/
e1(23)

|A1| ‚äó|A2 ‚äó‚äó‚äóA3|
A1,A2‚äó
‚äó
‚äóA3

S(12)3 
m(12)3/
bŒ±
(
|(A1 ‚äó‚äó‚äóA2) ‚äó‚äó‚äóA3|
|Œ±Œ±Œ±A1,A2,A3| )T
T
T
T
T
T
T
T
T
S1(23) 
m1(23)
/ |A1 ‚äó‚äó‚äó(A2 ‚äó‚äó‚äóA3)|
(21)
The inverse is given by a very similar diagram (below).
(S1 ‚äóS2) ‚äóS3
(m1‚äóm2)‚äóm3/
e12‚äóidS3

(|A1| ‚äó|A2|) ‚äó|A3|
A1,A2 ‚äóidA3 
S1 ‚äó(S2 ‚äóS3)
m1‚äó(m2‚äóm3)
/
idS1‚äóe23 
S1,S2,S3
‚àí1
hPPPPPPP
|A1| ‚äó(|A2| ‚äó|A3|)
id|A1|‚äóA2,A3

|A1|,|A2|,|A3|
‚àí1
iTTTTTTTTT
S12 ‚äóS3
m12‚äóm3
/
e(12)3

|A1 ‚äó‚äó‚äóA2| ‚äó|A3|
A1‚äó
‚äó
‚äóA2,A3 
S1 ‚äóS23
m1‚äóm23
/
e1(23)

vn n n n
|A1| ‚äó|A2 ‚äó‚äó‚äóA3|
A1,A2‚äó
‚äó
‚äóA3

S(12)3 
m(12)3/ |(A1 ‚äó‚äó‚äóA2) ‚äó‚äó‚äóA3|
S1(23) 
m1(23)
/
bŒ±‚àí1
h
|A1 ‚äó‚äó‚äó(A2 ‚äó‚äó‚äóA3)|
|Œ±Œ±Œ±A1,A2,A3
‚àí1|
iTTTTTTTTT
(22)
6.5. Left unit e‚Ñì.
Let ‚ü®S, m, A‚ü©be any object of the subscone. We build the diagram below. The left triangle
in the upper back face is the deÔ¨Ånition of eI, the rest of this face corresponds to two ways
of writing
i ‚äóm, the lower back face is the deÔ¨Ånition of eI e‚äó‚ü®S, m, A‚ü©. The upper, slanted
face is a naturality square for
l.
16

Finally, the right-
most
triangle
is
the
coherence
condition (17).
As usual, we Ô¨Årst
derive the dashed,
then the dotted ar-
row b
l by diagonal
Ô¨Åll-ins. The desired
left unit is (b
l,‚Ñì‚Ñì‚ÑìA).
I ‚äóS
idI‚äóm
/
i‚äóidS
$H
H
H
H
H
H
H
H
H
eI‚äóidS 
lS
........................
I ‚äó|A|
i‚äóid|A|

l|A|
........................
III ‚äóS
i‚äóidS/
e12

6
6
6
6
6
6
6
6
6
|III| ‚äóS
id|III|‚äóm/ |III| ‚äó|A|
III,A

S12 
m12
/
b
l
$
|III ‚äó‚äó‚äóA|
|‚Ñì‚Ñì‚ÑìA|
#H
H
H
H
H
H
H
H
H
S 
m
/ |A|
(23)
The inverse to b
l is also given by a diagonal Ô¨Åll-in. Start from S, then go to S (again) by
the identity morphism‚Äîthis is a pseudoepi‚Äî, then follow m,
‚Ñì‚Ñì‚ÑìA
‚àí1 to |III ‚äó‚äó‚äóA|; or start
from S, climb along
l‚àí1
S , then follow eI ‚äóidS, e12, m12 (a mono) to |III ‚äó‚äó‚äóA|. The diagonal
Ô¨Åll-in is then an arrow from S to S12, which is inverse to b
l by Fact 4.3.
6.6. Right unit er.
This works exactly
as for the left unit,
see diagram on the
right. The right tri-
angle is the coher-
ence condition (18).
The
desired
right
unit
is
given
by
(b
r,rrrA).
The inverse of b
r is
built as for b
l.
S ‚äóI
m‚äóidI
/
idS‚äói
$H
H
H
H
H
H
H
H
H
idS‚äóeI 
rS
........................
|A| ‚äóI
id|A| ‚äói

r|A|
........................
S ‚äóIII
idS‚äói/
e12

6
6
6
6
6
6
6
6
6
S ‚äó|III|
m‚äóid|III|/ |A| ‚äó|III|
A,III

S12 
m12
/
b
r
$
|A ‚äó‚äó‚äóIII|
|rrrA|
#H
H
H
H
H
H
H
H
H
S 
m
/ |A|
(24)
Finally, all required naturality, isomorphism, and coherence conditions hold by Fact 4.3.
We recap what we need to lift monoidal structure to the subscone:
(i.a) monoidal categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and (C, ‚äó, I,
,
l,
r),
and a monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
6.7. Symmetric Monoidal Categories
We now assume that we have got, and want to preserve symmetric monoidal structure.
Recall that a symmetric monoidal category (C, ‚äó, I,
,
l,
r,
 ) is a monoidal category
(C, ‚äó, I,
,
l,
r), together with a commutativity natural transformation
 A,B : A ‚äóB ‚Üí
B ‚äóA obeying the following coherence conditions.
The Ô¨Årst coherence condition is
 B,A ‚ó¶
 A,B = idA‚äóB, which implies that
 is actually
17

a natural isomorphism. The others are:
(A ‚äóB) ‚äóC
 A,B‚äóidC/
A,B,C

(B ‚äóA) ‚äóC
B,A,C

A ‚äó(B ‚äóC)
 A,B‚äóC

B ‚äó(A ‚äóC)
idB‚äó A,C

(B ‚äóC) ‚äóA
B,C,A / B ‚äó(C ‚äóA)
(25)
I ‚äóA
 I,A
/
lA
"E
E
E
E
E
E
E
E
A ‚äóI
rA
|yyyyyyyy
A
(26)
We now need | | to be a symmetric monoidal functor, that is, it should be monoidal
and satisfy the extra coherence condition:
|A1| ‚äó|A2|
 |A1|,|A2|/
A1,A2

|A2| ‚äó|A1|
A2,A1

|A1 ‚äó‚äó‚äóA2|
|cccA1,A2| / |A2 ‚äó‚äó‚äóA1|
(27)
6.8. Commutativity e‚Ñì.
We lift the commutativity to the subscone, assuming CCC and C are symmetric monoidal,
as follows. The back and front face are the deÔ¨Ånition of the two tensor products of
‚ü®S1, m1, A1‚ü©and ‚ü®S2, m2, A2‚ü©, the top face is by naturality of commutativity, the right
face is coherence (27). Finally b
 is given by a diagonal Ô¨Åll-in, and all expected diagrams
commute by Fact 4.3.
S1 ‚äóS2
m1‚äóm2
/
e12

 S1,S2
&M
M
M
M
M
M
M
|A1| ‚äó|A2|
A1,A2

 |A1|,|A2|
(Q
Q
Q
Q
Q
Q
Q
S2 ‚äóS1
m2‚äóm1
/
e21

|A2| ‚äó|A1|
A2,A1

S12
b
 
&
 
m12 / |A1 ‚äó‚äó‚äóA2|
|cccA1,A2|
(Q
Q
Q
Q
Q
Q
Q
S21 
m21
/ |A2 ‚äó‚äó‚äóA1|
(28)
We recap what we need to lift symmetric monoidal structure to the subscone:
18

(i.b) symmetric monoidal categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr,ccc)
and (C, ‚äó, I,
,
l,
r,
 ),
and a symmetric monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
6.9. Lifting Cartesian Products
An important special case of symmetric monoidal structure is that given by Ô¨Ånite prod-
ucts. This is given by one terminal object 111 such that, for every object A in CCC, there is
a unique morphism A
!
‚àí‚Üí111, and by a binary product operation as explained in Section 5.
For any two morphisms f from A to A‚Ä≤, g from B to B‚Ä≤, we write f √óg for the morphism
‚ü®f ‚ó¶œÄ1, g ‚ó¶œÄ2‚ü©from A √ó B to A‚Ä≤ √ó B‚Ä≤.
It is well-known that binary product can be turned into a functor from CCC √ó CCC to CCC,
which is symmetric monoidal with unit 1, associativity ‚ü®œÄ1 ‚ó¶œÄ1, ‚ü®œÄ2 ‚ó¶œÄ1, œÄ2‚ü©‚ü©, left unit
œÄ2, right unit œÄ1, and commutativity ‚ü®œÄ2, œÄ1‚ü©.
When CCC and C are both equipped with Ô¨Ånite products, and | | is a functor from CCC to
C that is monoidal with respect to these products, then the construction of Sections 6.1
and 6.7 yields a symmetric monoidal structure on (C 
‚à©| |) that we claim stems from a
Ô¨Ånite product structure on the subscone.
To this end, we assume that | | satisÔ¨Åes
the coherence condition on the right,
for i ‚àà{1, 2}. We shall say that such a
functor is cartesian monoidal. (Then | |
is automatically symmetric monoidal.)
|A1| √ó |A2|
œÄi
%J
J
J
J
J
J
J
J
J
J
A1,A2

|A1 √ó A2|
|œÄi|
/ |Ai|
(29)
6.10. Terminal object e1.
Let e1 be the object ‚ü®I,
i,111‚ü©given by dia-
gram (19). Specializing this diagram to
the case at hand, this is given as the
unique object up to iso making the fol-
lowing diagram commute:
1
i
?
?
?
?
?
?
eI 
I 
i
/ |111|
(30)
For any object ‚ü®S, m, A‚ü©of the
subscone, there is a unique arrow
‚ü®u, v‚ü©from ‚ü®S, m, A‚ü©to ‚ü®I,
i,111‚ü©.
Indeed, v is the unique arrow !
from A to 111, and u is given by
eI‚ó¶!; u is also unique, by Fact 4.3.
1
i
!B
B
B
B
B
B
B
eI 
I 
i
/ |111|
S 
m /
!
:
u
?
|A|
|v|
>}
}
}
}
}
}
19

6.11. Binary product e√ó.
Specializing the deÔ¨Ånition (20) of the
lifted tensor product e‚äóto the case at
hand yields the object ‚ü®S12, m12, A1 ‚äó‚äó‚äó
A2‚ü©= ‚ü®S1, m1, A1‚ü©e√ó‚ü®S2, m2, A2‚ü©de-
Ô¨Åned by the diagram on the right.
S1 √ó S2
m1√óm2/
e12

|A1| √ó |A2|
A1,A2

S12 
m12
/ |A1 √ó A2|
(31)
The ith projection ‚ü®eœÄi, œÄi‚ü©is
then given by the diagram on
the right. The back square is
a copy of (31), the right trian-
gle is an instance of the coher-
ence condition (29), while the
top, slanted face is by stan-
dard properties of œÄi. From
two routes from S1 √ó S2 to
|Ai|, we get eœÄi by a diagonal
Ô¨Åll-in.
S1 √ó S2
m1√óm2/
œÄi
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
e12

|A1| √ó |A2|
A1,A2

œÄi
<<<<<<<<<<<<<<<<<<
S12 
m12
/
eœÄi
'
|A1 √ó A2|
|œÄi|
M
M
M
M
&M
M
M
M
M
Si 
mi
/ |Ai|
It remains to show that whenever we have two subscone morphisms ‚ü®ef1, f1‚ü©from ‚ü®S, m, A‚ü©
to ‚ü®S1, m1, A1‚ü©and ‚ü®ef2, f2‚ü©from ‚ü®S, m, A‚ü©to ‚ü®S2, m2, A2‚ü©, there is a unique morphism
‚ü®eh, h‚ü©from ‚ü®S, m, A‚ü©to the product ‚ü®S12, m12, A1√óA2‚ü©such that ‚ü®eœÄi, œÄi‚ü©‚ó¶‚ü®eh, h‚ü©= ‚ü®efi, fi‚ü©
(i ‚àà{1, 2}). Existence is assured: take h = ‚ü®f1, f2‚ü©, eh = e12 ‚ó¶‚ü®ef1, ef2‚ü©, which satisÔ¨Åes
the claim: this is an easy consequence of the diagram above. Uniqueness follows from
the uniqueness of h given by the deÔ¨Ånition of binary product in CCC, and from Fact 4.3
guaranteeing the uniqueness of eh.
As is now usual, we recap what we need to lift products to the subscone:
(i.c) categories CCC and C with Ô¨Ånite products,
and a cartesian monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
7. Lifting Strong, Monoidal, and Commutative Monads to a Scone and a
Subscone
Once we have got a monoidal structure on CCC and C, we may consider strong monads
TTT and T instead of just monads on each category. This is what we need to develop a
theory of logical relations for Moggi‚Äôs monadic Œª-calculus. We shall also consider the
more demanding cases of monoidal monads, and of commutative monads.
7.1. Lifting Strong Monads
That T is a strong monad means that a strength natural transformation
tA,B : A‚äóTB ‚Üí
T(A ‚äóB) is given such that the diagrams in DeÔ¨Ånition 3.2 in (Moggi, 1991) commute,
that is:
20

I ‚äóTB
tI,B /
lTB
&L
L
L
L
L
L
L
L
L
L
T(I ‚äóB)
T lB

TB
(32)
A ‚äóB
idA‚äóB/
A‚äóB
%L
L
L
L
L
L
L
L
L
L
A ‚äóTB
tA,B

T(A ‚äóB)
(33)
(A ‚äóB) ‚äóTC
A,B,TC

tA‚äóB,C
/ T((A ‚äóB) ‚äóC)
T A,B,C

A ‚äó(B ‚äóTC)idA‚äótB,C
/ A ‚äóT(B ‚äóC)
tA,B‚äóC
/ T(A ‚äó(B ‚äóC))
(34)
A ‚äóT2B
tA,TB/
idA‚äóB

T(A ‚äóTB)
T tA,B / T2(A ‚äóB)
A‚äóB

A ‚äóTB
tA,B
/ T(A ‚äóB)
(35)
Formally, a strong monad is a four-tuple (T,
,
,
t) where (T,
,
) is a monad and
t
is a strength making the above diagrams commute.
By lifting of TTT to (C ‚Üì| |) we now mean a strong monad, i.e. a monad ( eT , eŒ∑, e¬µ)
together with a strength etX,Y : X e‚äóeTY ‚ÜíeT(X e‚äóY ), such that diagram (2) commutes,
equations (3) hold and
UetX,Y = tttUX,UY ,
i.e., U preserves strength.
To be able to give an appropriate lifting, we extend the monad morphism to a strong
monad morphism, i.e., a monad morphism making the following additional diagram
commute, which relates the strengths tttA1,A2 and
t|A1|,|A2|:
|A1| ‚äóT|A2|
t|A1|,|A2|/
id|A1|‚äóœÉA2 
T(|A1| ‚äó|A2|)
T(A1,A2 )

|A1| ‚äó|TTTA2|
A1,TT
T A2 
T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

|A1 ‚äó‚äó‚äóTTTA2|
|tttA1,A2|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
(36)
Having lifted TTT to scones and subscones in previous sections, we only need to give a
lifting of the strength ttt. For scones this is straightforward‚ÄîdeÔ¨Åne et pointwise by
et‚ü®S1,m1,A1‚ü©,‚ü®S2,m2,A2‚ü©= ‚ü®tS1,S2,tttA1,A2‚ü©.
Verifying that this is well-deÔ¨Åned amounts to pasting together a naturality square for
21

t and a diagram (36):
S1 ‚äóTS2
m1‚äóTm2
/
tS1,S2

|A1| ‚äóT|A2|
t|A1|,|A2|

A1,TT
T A2‚ó¶(id|A1|‚äóœÉA2 )/ |A1 ‚äó‚äó‚äóTTTA2|
|tttA1,A2|

T(S1 ‚äóS2)
T(m1‚äóm2)
/ T(|A1| ‚äó|A2|)
œÉA1‚äóA2‚ó¶T(A1,A2) / |TTT(A1 ‚äó‚äó‚äóA2)|
The upper side of this diagram is precisely ‚ü®S1, m1, A1‚ü©e‚äóeT‚ü®S2, m2, A2‚ü©in the scone while
the lower side is eT(‚ü®S1, m1, A1‚ü©e‚äó‚ü®S2, m2, A2‚ü©). (We let the interested reader deÔ¨Åne for
herself the tensor product e‚äóin the scone.) Checking naturality of et and strength laws is
immediate since et, eŒ±, er, eŒ∑ and e¬µ are all deÔ¨Åned pointwise.
Now we move to subscones. Call eT the lifted monad deÔ¨Åned in (7), (9), (10) and (11)
in Section 4.
As in previous sections, et in subscones will diÔ¨Äer from the case of scones only in its
C-component ÀÜ
t, and this component will be induced as a unique diagonal guaranteed by
diagram (6) in the diagram below.
S1 ‚äóTS2
idS1‚äóTm2
/
idS1‚äóe‚Ä≤
2

tS1,S2
&M
M
M
M
M
M
M
S1 ‚äóT|A2|
m1‚äóidT|A2|
/
idS1‚äóœÉA2

|A1| ‚äóT|A2|
id|A1| ‚äóœÉA2

t|A1|,|A2|
(Q
Q
Q
Q
Q
Q
Q
T(S1 ‚äóS2)
T(m1‚äóm2)
/
Te12

T(|A1| ‚äó|A2|)
T(A1,A2 )

S1 ‚äóf
S2
idS1‚äóm‚Ä≤
2
/
e‚Ä≤
12

2
2
2
2
2
2
2
2
2
S1 ‚äó|TTTA2|
m1‚äóid|TT
T A2|
/ |A1| ‚äó|TTTA2|
A1,TT
T A2

TS12
Tm12
/
e‚Ä≤

T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

S‚Ä≤
12 
m‚Ä≤
12
/
ÀÜ
t
&
|A1 ‚äó‚äó‚äóTTTA2| |tttA1,A2|
(Q
Q
Q
Q
Q
Q
Q
Q
g
S12 
m‚Ä≤
/ |TTT(A1 ‚äó‚äó‚äóA2)|
(37)
As ingredients of this diagram we have used:
‚Äî An instance TS2
Tm2/
e‚Ä≤
2 
T|A2|
œÉA2

f
S2 
m‚Ä≤
2
/ |TTTA2|
of Diagram (7) deÔ¨Åning eT‚ü®S2, m2, A2‚ü©; this is tensored
by S1 on the left to get the upper left square of the back face. Notice that idS1 ‚äóe‚Ä≤
2
is pseudoepi because our mono factorization system is monoidal.
‚Äî An instance S1 ‚äóf
S2
m1‚äóm‚Ä≤
2 /
e‚Ä≤
12 
|A1| ‚äó|TTTA2|
A1,TT
T A2

S‚Ä≤
12 
m‚Ä≤
12
/ |A1 ‚äó‚äó‚äóTTTA2|
of Diagram (20) deÔ¨Åning the tensor
22

product of ‚ü®S1, m1, A1‚ü©with eT‚ü®S2, m2, A2‚ü©= ‚ü®f
S2, m‚Ä≤
2,TTTA2‚ü©; this is the lower square of
the back face. (Note that the upper right square of the back face commutes trivially.)
‚Äî Another instance S1 ‚äóS2
m1‚äóm2 /
e12

|A1| ‚äó|A2|
A1,A2

S12 
m12
/ |A1 ‚äó‚äó‚äóA2|
of Diagram (20) deÔ¨Åning the ten-
sor product ‚ü®S12, m12, A1 ‚äó‚äó‚äóA2‚ü©of ‚ü®S1, m1, A1‚ü©with ‚ü®S2, m2, A2‚ü©; we apply T to this
square to get the upper half of the front face.
‚Äî Another instance of Diagram (7) deÔ¨Åning the application of eT to the just mentioned
tensor product ‚ü®S12, m12, A1 ‚äó‚äó‚äóA2‚ü©: this is the lower half of the front face.
‚Äî A naturality square for
t (top face), and
‚Äî An instance of Diagram (36), which deÔ¨Ånes the right face.
As usual, the dashed and the dotted arrows are given by diagonal Ô¨Åll-ins, therefore
et = (ÀÜ
t,ttt) is well-deÔ¨Åned. Again, checking naturality of et and strength laws is immediate
by Fact 4.3.
Here is the Ô¨Ånal set of ingredients for lifting a strong monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) on category CCC
to (C 
‚à©| |):
(i.a) monoidal categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and (C, ‚äó, I,
,
l,
r),
and a monoidal functor | | : CCC ‚ÜíC,
(ii.a) a strong monad (T,
,
,
t) on C, related to (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) by
a strong monad morphism (| |, œÉ) deÔ¨Åned in (4) and (36),
(iii.a) a monoidal mono factorization system on C.
(iv) T maps relevant pseudoepis to pseudoepis.
7.2. Monoidal Monads
Several strong monads are in fact monoidal‚Äîin fact all the monads of Section 10 are
monoidal, except the continuation and continuation-like monads. While this notion is
not needed in Moggi‚Äôs account of computation (Moggi, 1991), this occurs naturally, and
will be used in Section 8.4. A monoidal monad is a four-tuple (T,
,
,
d), where
dA,B :
TA ‚äóTB ‚ÜíT(A ‚äóB) is a mediator natural transformation, making the following
diagrams commute:
I ‚äóTB
lTB
 A
A
A
A
A
A
A
A
A
A
A
A
I‚äóidTB 
TI ‚äóTB
dI,B 
T(I ‚äóB)
T lB
/ TB
(38)
TA ‚äóI
rTA
 A
A
A
A
A
A
A
A
A
A
A
A
idTA‚äóI 
TA ‚äóTI
dA,I 
T(A ‚äóI)
T rA
/ TA
(39)
23

A ‚äóB
A‚äóB/
A‚äóB
(Q
Q
Q
Q
Q
Q
Q
TA ‚äóTB
dA,B

T(A ‚äóB)
(40)
(TA ‚äóTB) ‚äóTC
TA,TB,TC

dA,B‚äóidTC/ T(A ‚äóB) ‚äóTC
dA‚äóB,C/ T((A ‚äóB) ‚äóC)
T A,B,C

TA ‚äó(TB ‚äóTC)
idTA‚äódB,C
/ TA ‚äóT(B ‚äóC)
dA,B‚äóC
/ T(A ‚äó(B ‚äóC))
(41)
T2A ‚äóT2B
dTA,TB/
A‚äóB

T(TA ‚äóTB)
T dA,B / T2(A ‚äóB)
A‚äóB

TA ‚äóTB
dA,B
/ T(A ‚äóB)
(42)
Diagrams (38), (39), (41) state that T is a monoidal functor with mediating pair
(d,
I). Diagram (40) states that
 is a so-called monoidal natural transformation, while
Diagram (42) states that
 is another monoidal natural transformation.
Given any monoidal monad (T,
,
,
d) on C, it is easy to check that (T,
,
,
t) is a
strong monad, where
tA,B =
dA,B ‚ó¶(A ‚äóidTB). Furthermore,
t‚Ä≤
A,B deÔ¨Åned as
dA,B ‚ó¶
(idTA‚äó
B) is a dual strength, that is, a natural transformation
t‚Ä≤
A,B : TA‚äóB ‚ÜíT(A‚äóB)
obeying the obvious duals of the strength laws (32), (33), (34), (35). (Formally, a dual
strength is a strength on the dual monoidal category (C, I, ‚äóop,
‚àí1,
r,
l), where A ‚äóop B
is deÔ¨Åned as B ‚äóA.)
Moreover, the strength
t and the dual strength
t‚Ä≤ are compatible with the associativity,
in the sense that the diagram below commutes.
(A ‚äóTB) ‚äóC
tA,B‚äóidC/
A,TB,C 
T(A ‚äóB) ‚äóC
t‚Ä≤
A‚äóB,C / T((A ‚äóB) ‚äóC)
T A,B,C

A ‚äó(TB ‚äóC)
idA‚äót‚Ä≤
B,C/ A ‚äóT(B ‚äóC)
tA,B‚äóC / T(A ‚äó(B ‚äóC))
(43)
Finally, the strength and
the dual strength commute,
in the sense that the di-
agram on the right com-
mutes. In fact, the common
diagonal from TA ‚äóTB to
T(A ‚äóB) is just
dA,B.
TA ‚äóTB
tTA,B
/
t‚Ä≤
A,TB

T(TA ‚äóB)
T t‚Ä≤
A,B

T2(A ‚äóB)
A‚äóB

T(A ‚äóTB)T tA,B
/ T2(A ‚äóB)
A‚äóB/ T(A ‚äóB)
(44)
In general, a monoidal monad can be deÔ¨Åned equivalently as a monad with a strength
and a dual strength that make the diagrams (43) and (44) commute. See Appendix A,
in particular Appendix A.1 and Appendix A.2, for a proof.
It is natural to deÔ¨Åne a monoidal monad morphism from (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) to (T,
,
,
d) as
24

a monad morphism œÉ from (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) to (T,
,
) making the following diagram commute:
T|A1| ‚äóT|A2|
d|A1|,|A2|/
œÉA1 ‚äóœÉA2 
T(|A1| ‚äó|A2|)
T(A1,A2)

|TTTA1| ‚äó|TTTA2|
TT
T A1,TT
T A2 
T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

|TTTA1 ‚äó‚äó‚äóTTTA2|
|dddA1,A2|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
(45)
Every monoidal monad morphism œÉ is also a strong monad morphism from (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt)
to (T,
,
,
t), and also from (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt‚Ä≤) to (T,
,
,
t‚Ä≤), where tttA,B = dddA,B ‚ó¶(Œ∑Œ∑Œ∑A ‚äó‚äó‚äóidTTT B),
tA,B =
dA,B ‚ó¶(A ‚äóidTB), ttt‚Ä≤
A,B = dddA,B ‚ó¶(idTTT A ‚äó‚äó‚äóŒ∑Œ∑Œ∑B),
t‚Ä≤
A,B =
dA,B ‚ó¶(idTTT A ‚äó
B). In
Appendix A.3, we show that the monoidal monad morphisms are exactly the natural
transformations œÉ that are both a strong monad morphism and a dual strong monad
morphism.
One may think that lifting monoidal monads to scones and subscones is easy: get
the strength and the dual strength from the mediator, and lift them as in Section 7.1.
However, it is not immediately clear that what one would get would arise as strength and
dual strengths of a mediator, in particular that (44) would commute. Let us therefore
state the construction explicitly. This mimicks the construction of the lifted strength
from Section 7.1. For scones, the lifted mediator is again deÔ¨Åned pointwise by
ed‚ü®S1,m1,A1‚ü©,‚ü®S2,m2,A2‚ü©= ‚ü®dddS1,S2,
dA1,A2‚ü©
For subscones, we mimick Diagram (37) in Diagram (46) below. We let the reader check
all commutations.
TS1 ‚äóTS2
Tm1‚äóTm2
/
e‚Ä≤
1‚äóe‚Ä≤
2

dS1,S2
&N
N
N
N
N
N
N
T|A1| ‚äóT|A2|
œÉA1 ‚äóœÉA2

d|A1|,|A2|
(R
R
R
R
R
R
R
R
T(S1 ‚äóS2)
T(m1‚äóm2)
/
Te12

T(|A1| ‚äó|A2|)
T(A1,A2 )

f
S1 ‚äóf
S2
m‚Ä≤
1‚äóm‚Ä≤
2
/
e‚Ä≤
12

3
3
3
3
3
3
3
3
3
|TTTA1| ‚äó|TTTA2|
TT
T A1,TT
T A2

TS12
Tm12
/
e‚Ä≤

T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

S‚Ä≤
12 
m‚Ä≤
12
/
ÀÜ
d
&
|TTTA1 ‚äó‚äó‚äóTTTA2||dddA1,A2|
(Q
Q
Q
Q
Q
Q
Q
Q
g
S12 
m‚Ä≤
/ |TTT(A1 ‚äó‚äó‚äóA2)|
(46)
So, to lift a monoidal monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) on category CCC to (C 
‚à©| |), we require:
25

(i.a) monoidal categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and (C, ‚äó, I,
,
l,
r),
and a monoidal functor | | : CCC ‚ÜíC,
(ii.b) a monoidal monad (T,
,
,
d) on C, related to
the monoidal monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) on CCC by
a monoidal monad morphism (| |, œÉ) deÔ¨Åned in (4) and (45),
(iii.a) a monoidal mono factorization system on C.
(iv) T maps relevant pseudoepis to pseudoepis.
7.3. Commutative Monads
In the case of symmetric monoidal categories CCC and C, recall that if we also want to
make the subscone a symmetric monoidal category, it suÔ¨Éces to replace (i.a) by (i.b),
which requires | | to be a symmetric monoidal functor. This case occurs notably if we
want to lift a commutative monad to the subscone.
Recall that a strong monad (T,
,
,
t) is commutative if and only if, letting
t‚Ä≤
A,B be
the dual strength T B,A ‚ó¶
tB,A ‚ó¶
 TA,B, then Diagram (44) commutes.
Let
dA,B be the common diagonal
A‚äóB ‚ó¶
Tt‚Ä≤
A,B ‚ó¶
tTA,B =
A‚äóB ‚ó¶TtA,B ‚ó¶
t‚Ä≤
A,TB.
We can check that
d is then a media-
tor , whence every commutative monad
is monoidal. In fact, a monoidal monad
is commutative if and only if the follow-
ing additional diagram commutes (see Ap-
pendix A.4).
TA ‚äóTB
 TA,TB

dA,B / T(A ‚äóB)
T  A,B

TB ‚äóTA
dB,A
/ T(B ‚äóA)
(47)
For convenience, we shall now understand commutative monads as monoidal monads
satisfying (47). The lifting of monoidal monads of Section 7.2 then yields a lifting of
commutative monads, by Fact 4.3. Therefore, to lift a commutative monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) on
category CCC to (C 
‚à©| |), we require:
(i.b) symmetric monoidal categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr,ccc) and (C, ‚äó, I,
,
l,
r,
 ),
and a symmetric monoidal functor | | : CCC ‚ÜíC,
(ii.c) a commutative monad (T,
,
,
d) on C, related to
the commutative monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) on CCC by
a monoidal monad morphism (| |, œÉ) deÔ¨Åned in (4) and (45),
(iii.a) a monoidal mono factorization system on C.
(iv) T maps relevant pseudoepis to pseudoepis.
When C has all Ô¨Ånite products and we consider the induced symmetric monoidal struc-
ture, we might require that the monoidal monad (T,
,
,
d) is not just commutative but
even cartesian, by which we mean that T is a cartesian monoidal functor with mediating
pair (d,
I). (Recall that T is always a monoidal functor with this very mediating pair.)
This means that TœÄi‚ó¶
dA,B = œÄi, i ‚àà{1, 2}. We just do not need this in our constructions;
but it is often easier to prove that a monad is cartesian and infer that it is commutative
26

than to prove that it is commutative directly: we shall see examples of cartesian monads
in Section 10.
8. Building Monad Morphisms from Adjunctions
It is often the case that we have a (strong) monad on CCC, and wish to build another one
on C related to the latter by a monad morphism. The following results are then of some
help.
Recall that, given two categories C and D, a pair of functors F : C ‚ÜíD and U : D ‚ÜíC
is an adjunction F ‚ä£U if and only if there are natural transformations Œ∑. : . ‚ÜíUF. (the
unit of the adjunction) and «´. : FU. ‚Üí. (the counit) such that «´F (A) ‚ó¶FŒ∑A = idF (A) and
U«´A ‚ó¶Œ∑U(A) = idU(A). F is said to be left adjoint to U, U is right adjoint to F.
Then any adjunction F ‚ä£U gives rise to a monad (UF, Œ∑., U«´F.) on C. Conversely,
there are two standard ways of retrieving an adjunction from a monad (T, Œ∑, ¬µ) on C,
from Eilenberg-Moore algebras, or from the Kleisli category of the monad.
8.1. Eilenberg-Moore algebras.
A T -algebra is a morphism T (A)
s
/ A , for some object A of C, satisfying the com-
mutativity conditions:
T 2(A)
¬µA
wooooo
T (s)

T (A)
s
T (A)
s
T (A)
s
A
Œ∑A 8r
r
r
r
r
idA
/ A
A
A
(48)
A is called the support of the algebra, s its structure map. A morphism from T (A)
s
/ A
to T (B)
u
/ B is a morphism f : A ‚ÜíB in C that commutes with structure maps, i.e.,
such that f ‚ó¶s = u ‚ó¶T (f). T -algebras together with these morphisms forms a category
T -Alg.
Then F T ‚ä£U T is an adjunction, where U T : T -Alg ‚ÜíC maps objects T (A)
s
/ A
to A and morphisms f from T (A)
s
/ A to T (B)
u
/ B to the underlying morphism
f from A to B in C; and where F T : C ‚ÜíT -Alg maps the object A to the T -algebra
T 2(A)
¬µA / T (A) , and the morphisms A
f / B to f seen as morphism from F T (A)
to F T (B). The unit of the adjunction is Œ∑, while the counit «´ is given on each T -algebra
T (A)
s
/ A as the morphism s itself, from F T U T ( T (A)
s
/ A ) = T 2(A)
¬µA / T (A)
to T (A)
s
/ A .
Moreover, the monad of this adjunction is the original monad (T, Œ∑, ¬µ).
27

8.2. Kleisli category.
The objects of Kleisli(T ) are the objects of C, while the morphisms
A
f / B
of
Kleisli(T ) are the morphisms A
f / T (B) of C. To avoid confusion, we write f the
morphisms f seen as a morphism in Kleisli(T ). The identity idA on the object A in
Kleisli(T ) is Œ∑A, while composition g ‚ó¶f is ¬µC ‚ó¶T (g) ‚ó¶f, where A
f / T (B) and
B
g / T (C) in C.
DeÔ¨Åne FT : C ‚ÜíKleisli(T ) as mapping the object A to A, and the morphism
A
f / B to the morphism from A to B in Kleisli(T ) deÔ¨Åned as Œ∑B ‚ó¶f. DeÔ¨Åne UT :
Kleisli(T ) ‚ÜíC as mapping the object A to T (A), and the morphism f from A to B in
Kleisli(T ) to ¬µB ‚ó¶T (f). Then FT ‚ä£UT is an adjunction, whose unit is Œ∑, and whose
counit «´ is the identity morphism from FT UT (A) to T (A) in C, seen as a morphism from
FT UT (A) to A in Kleisli(T ). The monad of FT ‚ä£UT is again (T, Œ∑, ¬µ).
8.3. Monad Morphisms from Adjunctions
Proposition 8.1. Let (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) be a monad on a category CCC, | | : CCC ‚ÜíC be a functor
with a left adjoint D
D
D : C ‚ÜíCCC. Let Àô«´A : D
D
D|A| ‚ÜíA be the counit of the adjunction,
ÀôŒ∑E : E ‚Üí|D
D
D(E)| be the unit of the adjunction.
DeÔ¨Åne T = | | ‚ó¶TTT ‚ó¶D
D
D = |TTTD
D
D|,
E =
Œ∑Œ∑Œ∑D
D
D(E)
 ‚ó¶ÀôŒ∑E,
E =
¬µ¬µ¬µD
D
D(E) ‚ó¶TTT Àô«´TTTD
D
D(E)
. Finally,
let œÉA = |TTT Àô«´A| : T|A| ‚Üí|TTTA|. Then (T,
,
) is a monad on C and (| |, œÉ) is a monad
morphism from TTT to T.
Proof. Let F ‚ä£U be any adjunction generating the monad, i.e., such that UF = TTT,
whose unit is Œ∑Œ∑Œ∑, and whose counit «´ is such that ¬µ¬µ¬µ = U«´F . We may choose, e.g., F T ‚ä£U T
or FT ‚ä£UT . Compose the adjunction D
D
D ‚ä£| | with F ‚ä£U, yielding an adjunction
FD
D
D ‚ä£|U|. The unit of this adjunction (on object E) is
Œ∑Œ∑Œ∑D
D
D(E)
 ‚ó¶ÀôŒ∑E, its counit (on object
A) is «´A ‚ó¶F(Àô«´UA).
The monad of this adjunction is (|UFD
D
D|,
Œ∑Œ∑Œ∑D
D
D(.)
 ‚ó¶ÀôŒ∑.,
U(«´FD
D
D(.) ‚ó¶F(Àô«´UFD
D
D(.)))
). But
the monad of F ‚ä£U is (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ), so UF = TTT and ¬µ¬µ¬µ = U«´F . It follows that the monad of
FD
D
D ‚ä£|U| is (|TTTD
D
D|,
Œ∑Œ∑Œ∑D
D
D(.)
 ‚ó¶ÀôŒ∑.,
¬µ¬µ¬µD
D
D(.) ‚ó¶TTT(Àô«´TTTD
D
D(.))
). This is (T,
,
), which is therefore a
monad.
It remains to show that œÉ = |TTT Àô«´| is a monad morphism from TTT to T. This is checked
using the following diagrams. In the left diagram, the top triangle is one of the adjunction
laws, the bottom square is by naturality of |Œ∑Œ∑Œ∑|; so œÉA (bottom arrow) composed with
|A| (leftmost vertical path) equals |Œ∑Œ∑Œ∑A| (rightmost path from |A| to |TTTA|).
28

In the right diagram, the
top square is by naturality
of |TTT Àô«´|, the bottom square
is by naturality of |¬µ¬µ¬µ|, so
œÉA (bottom arrow) com-
posed with
|A| (leftmost
vertical path) equals |¬µ¬µ¬µA|‚ó¶
œÉTTT A ‚ó¶TœÉA (the other path
from top left to bottom
right).
|A|
ÀôŒ∑|A|

id|A|
H
H
H
H
$H
H
H
H
ÀõÀõD
D
D|A|
ÀõÀõ
| Àô«´A|
/
|Œ∑Œ∑Œ∑D
D
D|A||

|A|
|Œ∑Œ∑Œ∑A|

ÀõÀõTTTD
D
D|A|
ÀõÀõ
|TTT Àô«´A| / |TTTA|
ÀõÀõTTTD
D
D
ÀõÀõTTTD
D
D|A|
ÀõÀõÀõÀõ|TTTD
D
D|TTT Àô«´A||/
|TTT Àô«´TT
TD
D
D|A||

ÀõÀõTTTD
D
D|TTTA|
ÀõÀõ
|TTT Àô«´TT
T A|

ÀõÀõTTTTTTD
D
D|A|
ÀõÀõ
|TTTTTT Àô«´A|
/
|¬µ¬µ¬µD
D
D|A||

|TTTTTTA|
|¬µ¬µ¬µA|

ÀõÀõTTTD
D
D|A|
ÀõÀõ
|TTT Àô«´A|
/ |TTTA|
Note that we could have checked the required diagrams directly; the proof would be
longer than going through adjunctions, as we did.
8.4. Monoidal, and Strong Monad Morphisms from Monoidal Adjunctions
We Ô¨Årst reproduce the argument of Proposition 8.1 in the monoidal case. While monads
correspond to adjunctions in well-deÔ¨Åned ways, only monoidal monads can be linked to
so-called monoidal adjunctions. This is the reason why we deal with monoidal monads
Ô¨Årst.
Let (C, IC, ‚äóC, Œ±C, ‚ÑìC, rC) and (D, ID, ‚äóD, Œ±D, ‚ÑìD, rD) be two monoidal categories. Let
F ‚ä£U be an adjunction, where F : C ‚ÜíD, U : D ‚ÜíC, with unit Œ∑, and counit «´. This
is a monoidal adjunction if and only if F and U are monoidal functors (with respective
mediating pairs (Œ∏F , ŒπF ) and (Œ∏U, ŒπU)), and the unit Œ∑ and the counit «´ are monoidal
natural transformations, by which we mean that the following diagrams commute:
IC
ŒπU /
Œ∑IC
"F
F
F
F
F
F
F
F
F
U(ID)
U(ŒπF )

UF(IC)
(49)
A ‚äóC B
Œ∑A‚äóCŒ∑B
/
Œ∑A‚äóCB

UF(A) ‚äóC UF(B)
Œ∏U
F (A),F (B)
wnnnnnnn
U(F(A) ‚äóD F(B))
U(Œ∏F
A,B)
xrrrrrr
UF(A ‚äóC B)
(50)
ID
ŒπF

F(IC)
F (ŒπU )
/ FU(ID)
«´ID
cFFFFFFFF
(51)
FU(A) ‚äóD FU(B)
Œ∏F
U(A),U(B)xqqqqqq
«´A‚äóD«´B

F(U(A) ‚äóC U(B))
F Œ∏U
A,Bzuuuuu
FU(A ‚äóD B)
«´A‚äóDB
/ A ‚äóD B
(52)
The value of monoidal adjunctions is their relation with monoidal monads (Section 7.2).
Recall that a monoidal monad on C is a tuple (T, Œ∑, ¬µ, d), where (T, Œ∑, ¬µ) is a monad on
C and dA,B is a natural transformation from T A ‚äóC T B to T (A ‚äóC B) such that the
following diagrams commute:
29

IC ‚äóC T B
‚ÑìC
T B
!C
C
C
C
C
C
C
C
C
C
C
C
C
Œ∑IC ‚äóCidT B 
T IC ‚äóC T B
dIC,B 
T (IC ‚äóC B)
T ‚ÑìC
B
/ T B
(38)
T A ‚äóC IC
rC
T A
!C
C
C
C
C
C
C
C
C
C
C
C
C
idT A‚äóCŒ∑IC 
T A ‚äóC T IC
dA,IC 
T (A ‚äóC IC)
T rC
A
/ T A
(39)
A ‚äóC B
Œ∑A‚äóCŒ∑B/
Œ∑A‚äóCB
(Q
Q
Q
Q
Q
Q
Q
Q
T A ‚äóC T B
dA,B

T (A ‚äóC B)
(40)
(T A ‚äóC T B) ‚äóC T C
Œ±C
T A,T B,T C

dA,B‚äóCidT C
/ T (A ‚äóC B) ‚äóC T C
dA‚äóCB,C/ T ((A ‚äóC B) ‚äóC C)
T Œ±C
A,B,C

T A ‚äóC (T B ‚äóC T C)
idT A‚äóCdB,C
/ T A ‚äóC T (B ‚äóC C)dA,B‚äóCC
/ T (A ‚äóC (B ‚äóC C))
(41)
T 2A ‚äóC T 2B
dT A,T B/
¬µA‚äóC¬µB 
T (T A ‚äóC T B)
T dA,B / T 2(A ‚äóC B)
¬µA‚äóCB

T A ‚äóC T B
dA,B
/ T (A ‚äóC B)
(42)
The following lemmas show respectively that every monoidal adjunction gives rise to
a monoidal monad, that every monoidal monad yields a monoidal adjunction between
the base category and the Kleisli category of the monad, and that monoidal adjunctions
compose to yield monoidal adjunctions. Except for the Ô¨Årst, the arguments are tedious
computations, and therefore relegated to appendices‚Ä†.
Lemma 8.2. Let F ‚ä£U be a monoidal adjunction, with unit Œ∑ and counit «´, where
F : C ‚ÜíD, U : D ‚ÜíC. Let T be UF, ¬µA be U«´F (A), and dA,B be UŒ∏F
A,B ‚ó¶Œ∏U
F (A),F (B).
Then (T, Œ∑, ¬µ, d) is a monoidal monad on C.
Proof. (T, Œ∑, ¬µ) is a monad by Proposition 8.1. We check the mediator laws (38), (39),
(40), (41), (42) for d.
Diagram (38) is obtained by considering the following diagram. The top left triangle is
a copy of (49), tensored by UF(B) on the right. The square next to it on its right is a
naturality square for Œ∏U. The next trapezoid on the right (the top right trapezoid) is U
applied to a coherence square (17) for Œ∏F , ‚ÑìC and ‚ÑìD. The bottom face, atop the curved
‚Ä† These results are folklore, and were conÔ¨Årmed in discussions with Paul-Andr¬¥e Melli`es, Fran¬∏cois
Lamarche, and Albert Burroni notably. However, we have been unable to Ô¨Ånd references on this.
We have often been directed to the pioneering paper (Street, 1972), but could not Ô¨Ånd the expected
results therein.
30

arrow ‚ÑìC
UF (B), is another instance of a coherence square (17) for Œ∏F , ‚ÑìC and ‚ÑìD.
IC ‚äóC UF(B)
Œ∑IC ‚äóCidUF (B)
/
ŒπU ‚äóCidUF (B)
U
U
*U
U
‚ÑìC
UF (B)
2
UF(IC) ‚äóC UF(B)
Œ∏U
F (IC ),F (B)
/ U(F(IC) ‚äóD F(B))
U(Œ∏F
IC,B) / UF(IC ‚äóC B)
UF (‚ÑìC
B)

U(ID) ‚äóC UF(B)
U(ŒπF )‚äóCidUF (B)
O
Œ∏U
ID,F (B)
/ U(ID ‚äóD F(B))
U(ŒπF ‚äóDidF (B))
O
U(‚ÑìD
F (B))
*U
U
U
U
U
U
U
U
U
U
U
U
UF(B)
Now the topmost composition of arrows is tIC,B, the bottommost arrow from IC ‚äóC
UF(B) to UF(B) is ‚ÑìC
T B, and the rightmost vertical arrow is T ‚ÑìC
B.
Diagram (39). This is checked by similar arguments, replacing the coherence square (17)
by (18).
Diagram (40). This is the diagram
on the right, an instance of Di-
agram (50), stating that Œ∑ is a
monoidal
natural
transformation.
We recognize dA,B as the right-
most composition of vertical arrows,
hence the desired Diagram (33).
A ‚äóC B
Œ∑A‚äóCŒ∑B
/
Œ∑A‚äóCB
#H
H
H
H
H
H
H
H
H
H
H
H
H
H
H
H
UF(A) ‚äóC UF(B)
Œ∏U (F (A),F (B))

U(F(A) ‚äóD F(B))
UŒ∏F
A,B

UF(A ‚äóC B)
Diagram (41). For space reasons, we Ô¨Çip the diagram so that arrows involving strengths
are vertical, and arrows involving associativities are horizontal. Also, we drop most sub-
scripts, which are inferrable from context.
(UF(A) ‚äóC UF(B))
‚äóCUF(C)
Œ±C
/
Œ∏U ‚äóCidUF (C) 
(coherence (16) for Œ∏U)
UF(A)‚äóC
(UF(B) ‚äóC UF(C))
idUF (A)‚äóCŒ∏U

U(F(A) ‚äóD F(B))
‚äóCUF(C)
Œ∏U
'P
P
P
P
P
P
P
P
UŒ∏F ‚äóCidUF (C) 
UF(A)‚äóC
U(F(B) ‚äóD F(C))
Œ∏U
vnnnnnnnn
idUF (A)‚äóCUŒ∏F

UF(A ‚äóC B)
‚äóCUF(C)
Œ∏U 
(natur-
ality of
Œ∏U)
(U applied to coherence (16) for Œ∏F )
U((F(A)
‚äóDF(B))
‚äóDF(C))
UŒ±D/
U(Œ∏F ‚äóDidF (C))
wnnnnnnnn
U(F(A)‚äóD
(F(B)‚äóD
F(C)))
U(idF (A)‚äóDŒ∏F ) (P
P
P
P
P
P
P
P
(natur-
ality of
Œ∏U)
UF(A)‚äóC
UF(B ‚äóC C)
Œ∏U

U(F(A ‚äóC B)
‚äóDF(C))
UŒ∏F 
U(F(A)‚äóD
F(B ‚äóC C))
UŒ∏F

UF((A ‚äóC B)
‚äóCC)
UF Œ±C
/
UF(A‚äóC
(B ‚äóC C))
The vertical arrows on the left compose to form dA‚äóCB,C ‚ó¶(dA,B ‚äóC idUF (C)), while the
vertical arrows on the right compose to form dA‚äóCB,C ‚ó¶(idUF (A) ‚äóC dB,C), whence the
result.
31

Diagram (42). Similarly, we Ô¨Çip the diagram so that vertical arrows become horizontal
and conversely:
UFUF(A) ‚äóC UFUF(B)
U«´F (A)‚äóCU«´F (B)
/
Œ∏U 
(naturality of Œ∏U)
UF(A) ‚äóC UF(B)
Œ∏U

U(FUF(A) ‚äóD FUF(B))
U(«´F (A)‚äóD«´F (B))
[
[
[
-[
[
[
[
[
[
UŒ∏F 
UF(UF(A) ‚äóC UF(B))
UF Œ∏U 
(U applied to (52))
U(F(A) ‚äóD F(B))
UŒ∏F

UFU(F(A) ‚äóD F(B))
U«´F (A)‚äóD F (B)
c
c
c
c
c
c
1c
c
c
c
c
c
c
UF UŒ∏F 
UFUF(A ‚äóC B)
U«´F (A‚äóC B)
/
(naturality of U«´)
UF(A ‚äóC B)
We recognize T dA,B ‚ó¶dT A,T B as the leftmost composition of vertical arrows, and the
rightmost vertical composition is dA,B. Also, the top horizontal arrow is ¬µA ‚äóC ¬µB, while
the bottom arrow is ¬µA‚äóCB.
Lemma 8.3. Let (C, IC, ‚äóC, Œ±C, ‚ÑìC, rC) be a monoidal category, and let (T, Œ∑, ¬µ, d) be a
monoidal monad on C.
Let D be the Kleisli category of T , ID = IC, ‚äóD be deÔ¨Åned on objects by A ‚äóD B =
A ‚äóC B and on morphisms by letting f ‚äóD g (in D) be the morphism d ‚ó¶(f ‚äóC g) in C;
let Œ±D = Œ∑ ‚ó¶Œ±C, ‚ÑìD = Œ∑ ‚ó¶‚ÑìC, rD = Œ∑ ‚ó¶rC. Then (D, ID, ‚äóD, Œ±D, ‚ÑìD, rD), is a monoidal
category.
Moreover, FT ‚ä£UT is a monoidal adjunction. The mediating pairs of FT and UT are
(Œ∏FT , ŒπFT ) and (Œ∏UT , ŒπUT ) respectively, where Œ∏FT
A,B : FT (A) ‚äóD FT (B) ‚ÜíFT (A ‚äóC B)
(in Kleisli(T )) is the morphism Œ∑A‚äóCB in C, ŒπFT : ID ‚ÜíFT (IC) (in Kleisli(T )) is Œ∑IC,
Œ∏UT
A,B : UT (A) ‚äóC UT (B) ‚ÜíUT (A ‚äóD B) (in C) is dA,B, and ŒπUT : IC ‚ÜíUT (ID) (in C) is
Œ∑IC.
Finally, FT ‚ä£UT generates the monoidal monad, in the sense that UT FT = T , Œ∑ is the
unit of the adjunction and of T , ¬µA = UT «´F (A) where «´ is the counit of the adjunction,
and dA,B = UT Œ∏FT
A,B ‚ó¶Œ∏UT
FT (A),FT (B).
Proof. Tedious. See Appendix B.
Lemma 8.4. Let C
D
D
D
/ CCC
| |
o
F
/ D
U
o
be a diagram of functors. Assume that these
functors are monoidal; let (,
i) be the mediating pair of | |, (Œ∏Œ∏Œ∏,iii) that of D
D
D, (Œ∏U, ŒπU) that
of U, (Œ∏F , ŒπF ) that of F.
Then FD
D
D and |U| are monoidal functors, with respective mediating pairs (FŒ∏Œ∏Œ∏‚ó¶Œ∏F , Fiii‚ó¶
ŒπF ) and (
Œ∏U ‚ó¶
,
ŒπU ‚ó¶
i).
Furthermore, if D
D
D ‚ä£| | and F ‚ä£U are monoidal adjunctions, then FD
D
D ‚ä£|U| is a
monoidal adjunction, too.
Proof. Straightforward. See Appendix C.
32

The following proposition is then both similar and proved similarly to Proposition 8.1.
Proposition 8.5. Let (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and (C, ‚äó, I,
,
l,
r) be monoidal categories.
Let (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) be a monoidal monad on CCC, | | : CCC ‚ÜíC and D
D
D : C ‚ÜíCCC be monoidal
functors, yielding a monoidal adjunction D
D
D ‚ä£| |. Let Àô«´A : D
D
D|A| ‚ÜíA be the counit of the
adjunction, ÀôŒ∑E : E ‚Üí|D
D
D(E)| be the unit of the adjunction. Let (,
i) be the mediating
pair of | |, (Œ∏Œ∏Œ∏,iii) be the mediating pair of D
D
D.
DeÔ¨Åne T = | | ‚ó¶TTT ‚ó¶D
D
D = |TTTD
D
D|,
E =
Œ∑Œ∑Œ∑D
D
D(E))
 ‚ó¶ÀôŒ∑E,
E =
¬µ¬µ¬µD
D
D(E) ‚ó¶TTT Àô«´TTTD
D
D(E)
,
dE,F =
|TTTŒ∏Œ∏Œ∏E,F ‚ó¶dddD
D
DE,D
D
DF | ‚ó¶
TTTD
D
DE,TTTD
D
DF . Finally, let œÉA = |TTT Àô«´A| : T|A| ‚Üí|TTTA|. Then (T,
,
,
d)
is a monoidal monad on C and (| |, œÉ) is a monoidal monad morphism from TTT to T.
Proof. Let F = FTTT , U = UTTT . By Lemma 8.3, F ‚ä£U is a monoidal adjunction which
generates the monoidal monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd). Compose the monoidal adjunction D
D
D ‚ä£| |
with the monoidal adjunction F ‚ä£U, yielding the adjunction FD
D
D ‚ä£|U|. This is also a
monoidal adjunction by Lemma 8.4.
By Lemma 8.3, this monoidal adjunction generates a monoidal monad, and this is
(T,
,
,
d) as stated in the Proposition. Indeed, all cases except the mediator have been
dealt with in Proposition 8.1, and the mediator is by deÔ¨Ånition
U(FŒ∏Œ∏Œ∏ ‚ó¶Œ∏F )
 ‚ó¶
Œ∏U ‚ó¶
 =
|UFŒ∏Œ∏Œ∏| ‚ó¶
UŒ∏F ‚ó¶Œ∏U ‚ó¶
 = |TTTŒ∏Œ∏Œ∏| ‚ó¶|ddd| ‚ó¶
.
It remains to check the monoidal monad morphism Diagram (45). This is given by the
following diagram:
ÀõÀõTTTD
D
D|A1|
ÀõÀõ
‚äó
ÀõÀõTTTD
D
D|A2|
ÀõÀõ

/
|TTT Àô«´A1|‚äó|TTT Àô«´A2|

(naturality of |ddd| ‚ó¶
)
ÀõÀõÀõÀõÀõ
TTTD
D
D|A1|
‚äó‚äó‚äóTTTD
D
D|A2|
ÀõÀõÀõÀõÀõ
|ddd|/
ÀõÀõÀõÀõÀõTTT
 
D
D
D|A1|
‚äó‚äó‚äóD
D
D|A2|
!ÀõÀõÀõÀõÀõ
|TTTŒ∏Œ∏Œ∏| /
|TTT (Àô«´A1‚äó
‚äó
‚äóÀô«´A2 )|
"E
E
E
E
E
E
E
E
E
E
E
E
E
E
E
E
E
E
(52)
ÀõÀõTTTD
D
D(|A1| ‚äó|A2|)
ÀõÀõ
|TTTD
D
D
|

|TTTA1| ‚äó|TTTA2|

ÀõÀõTTTD
D
D|A1 ‚äó‚äó‚äóA2|
ÀõÀõ
|TTT Àô«´A1‚äó
‚äó
‚äóA2|

|TTTA1 ‚äó‚äó‚äóTTTA2|
|ddd|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
We can in fact prove something similar with just strong monads. Unfortunately, it
seems that we cannot use the nice trick of going through some adjunction generating the
strong monad. The proof therefore goes through extremely tedious diagram checking.
Proposition 8.6. Let (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr) and (C, ‚äó, I,
,
l,
r) be monoidal categories.
Let | | be a monoidal functor from CCC to C, with mediating pair (,
i), D
D
D be a monoidal
functor from C to CCC, with mediating pair (Œ∏Œ∏Œ∏,iii), and assume that D
D
D ‚ä£| | is a monoidal
adjunction.
DeÔ¨Åne T = | | ‚ó¶TTT ‚ó¶D
D
D = |TTTD
D
D|,
E =
Œ∑Œ∑Œ∑D
D
D(E))
 ‚ó¶ÀôŒ∑E,
E =
¬µ¬µ¬µD
D
D(E) ‚ó¶TTT Àô«´TTTD
D
D(E)
, œÉA =
|TTT Àô«´A| : T|A| ‚Üí|TTTA|.
DeÔ¨Åne also
tE,F as the composite |TTTD
D
DŒ∏Œ∏Œ∏E,F ‚ó¶tttD
D
DE,D
D
DF | ‚ó¶
D
D
DE,TTTD
D
DF ‚ó¶( ÀôŒ∑E ‚äóidTF ).
Then (T,
,
,
t) is a strong monad on C and (| |, œÉ) is a strong monad morphism from
TTT to T.
33

Proof. Because of Proposition 8.1, we only have to check the strength laws (32), (33),
(34), (35) for
t, and the strong monad morphism law (36). As we said, this is tedious,
hence relegated to Appendix D.
9. Lifting Closed Structures to the Subscone
If we are to lift the whole structure of a cartesian-closed category together with a strong
monad on it, to the subscone, the only thing that remains is to lift exponential objects.
As this is essentially the subject of (Mitchell and Scedrov, 1993) (together with the fact
that subscones generalize logical relations), it would be legitimate to skip over this con-
struction, knowing that it has been dealt with elsewhere.
However, we notice that the standard lifting construction of exponentials to the sub-
scone requires | | to preserve products, at least up to natural isos. That is, it requires
|111| ‚àº=
1, |A √ó B| ‚àº= |A| √ó|B|. This is certainly the case for the functor | | = CCC(111, ), which
is the standard choice in sconing constructions (Mitchell and Scedrov, 1993).
Until now, we have only assumed that | | was a monoidal (Section 6.1), resp. a sym-
metric monoidal (Section 6.7), resp. a cartesian monoidal (Section 6.9) functor. It would
therefore be nice if we could dispense with the stringent requirement that | | preserved
monoidal or cartesian structure exactly. This would also aÔ¨Äord us some added generality.
It turns out that having a monoidal mono factorization system is all we need: expo-
nentials lift to the subscone without any additional requirements compared to Section 6.
This only requires a slight adjustment of the standard exponential lifting diagrams.
Recall that an exponential, or internal hom object (on the right), in a monoidal category
(C, ‚äó, I,
,
l,
r), is an object BA together with a morphism App from BA ‚äóA to B and,
for every morphism u from C ‚äóA to B, a morphism Œõ(u) from C to BA satisfying the
two equations
C ‚äóA
Œõ(u)‚äóidA /
u
'P
P
P
P
P
P
P
P
P
P
P
P
P
P
BA ‚äóA
App

B
(53)
for every morphism u from C ‚äóA to B (Œ≤-equivalence), and
Œõ

C ‚äóA
v‚äóidA / BA ‚äóA
App
/ B

= v
(54)
for every morphism v from C to BA (Œ∑-equivalence). Œõ(u) is called the curriÔ¨Åcation or
the abstraction of u.
A more traditional deÔ¨Ånition is to require the existence of a unique morphism Œõ(u) as
in Diagram (53). Uniqueness is indeed implied by (54): if there were two morphisms v
and v‚Ä≤ such that u = App ‚ó¶(v ‚äóidA) = App ‚ó¶(v‚Ä≤ ‚äóidA), then v = Œõ(App ‚ó¶(v ‚äóidA)) =
Œõ(u) = Œõ(App ‚ó¶(v‚Ä≤ ‚äóidA)) = v‚Ä≤. Conversely, uniqueness of Œõ(u) implies Diagram (54):
take u = App ‚ó¶(v ‚äóidA) in Diagram (53).
Exponentials on the right are unique up to iso when they exist. A monoidal category
34

is said to be monoidal closed (on the right) if and only if the exponential BA exists for
all objects A and B. Similarly, we call exponential on the left any object AB with a
morphism qqA from A ‚äóAB to B such that, for every morphism u from A ‚äóC to B,
there is a unique morphism (u)Œõ from C to AB such that u = qqA ‚ó¶(idA ‚äó(u)Œõ). In
a symmetric monoidal category, it is equivalent to require the existence of exponentials
on the right or on the left, and they coincide up to iso. A category with Ô¨Ånite products
that is also monoidal closed (for the monoidal structure induced by the product) is called
cartesian closed.
Note that, in a monoidal closed category, there is a functor
A for each object A, which
maps every object B to BA, and every morphism B
f
‚àí‚ÜíB‚Ä≤ to f A = Œõ(f ‚ó¶App), from BA
to B‚Ä≤A. In fact, there is a bifunctor from Cop √ó C to C mapping A, B to BA.
Moreover, the functor
A preserves monos: if m is mono, then so is mA = Œõ(m‚ó¶App). It
suÔ¨Éces to show that there is at most one morphism f such that Œõ(m‚ó¶App)‚ó¶f = h where
h is given. Indeed, App‚ó¶(h‚äóid) = App‚ó¶(Œõ(m‚ó¶App)‚äóid)‚ó¶(f ‚äóid) = m‚ó¶App‚ó¶(f ‚äóid) by
(53); if there were two such morphisms f and f ‚Ä≤, then m‚ó¶App‚ó¶(f‚äóid) = m‚ó¶App‚ó¶(f ‚Ä≤‚äóid),
so App ‚ó¶(f ‚äóid) = App ‚ó¶(f ‚Ä≤ ‚äóid) since m is mono. Applying Œõ on both sides implies
f = f ‚Ä≤ by (54).
Once this is known, the standard way of lifting exponentials to the subscone is to
require that CCC and C are cartesian closed, C has pullbacks, and that | | preserves Ô¨Ånite
products (exactly, or up to natural iso). This standard construction actually does not
require cartesian closedness, and works equally well with monoidal closed categories,
assuming C has pullbacks and | | preserves unit and tensor.
We recall this construction now. As | | preserves unit, the unit (terminal object in the
cartesian closed case) eI is ‚ü®I, idI,III‚ü©witness by the arrow I
idI
‚àí‚Üí|III| = I, tensor product
(binary product in the cartesian closed case) is given by ‚ü®S1, m1, A1‚ü©e‚äó‚ü®S2, m2, A2‚ü©=
‚ü®S1 ‚äóS2, m1 ‚äóm2, A1‚äó‚äó‚äóA2‚ü©, and the exponential ‚ü®eS1
2, em1
2, A2
A1‚ü©= ‚ü®S2, m2, A2‚ü©‚ü®S1,m1,A1‚ü©
is given by the square on the left below.
eS1
2
 
e
m1
2
/
‚Ñì1
2

A2
A1
Œõ
 
|App|‚ó¶
 
id|A2A1| ‚äóm1
!!

A2
A1 ‚äóS1
id|A2A1|‚äóm1

A2
A1 ‚äó|A1|
A2
A1 ‚äó‚äó‚äóA1

|App|

S2
S1 
m2S1
/ |A2|S1
|A2|
where the vertical morphism Œõ

|App| ‚ó¶

id|A2A1| ‚äóm1

is Œõ applied to the composition
of vertical morphisms on the right, the morphism m2S1 is mono because
S1 preserves
monos, and em1
2 is mono because pullbacks preserve monos. (We temporarily revert to
the notation  
/
to denote all monos.)
35

Application from ‚ü®eS1
2, em1
2, A2
A1‚ü©e‚äó‚ü®S1, m1, A1‚ü©in the subscone is given by
eS1
2 ‚äóS1
e
m1
2‚äóidS1 /
‚Ñì1
2‚äóidS1 
A2
A1 ‚äóS1
id‚äóm1 /
Œõ(|App|‚ó¶(id‚äóm1))‚äóidS1

A2
A1 ‚äó|A1|
S2
S1 ‚äóS1 m2S1 ‚äóidS1
/
App

|A2|S1 ‚äóS1
App

S2 
m2
/ |A2|
A2
A1 ‚äó‚äó‚äóA1

|App|
o
where the top left square is the deÔ¨Ånition of the exponential ‚ü®eS1
2, em1
2, A2
A1‚ü©tensor S1
on the right. The bottom left square and the right square commute by (53). Then,
application in the subscone is ‚ü®App ‚ó¶(‚Ñì1
2 ‚äóid), |App|‚ü©.
Abstraction of the morphism ‚ü®u, v‚ü©in the subscone from ‚ü®S, m, A‚ü©e‚äó‚ü®S1, m1, A1‚ü©to
‚ü®S2, m2, A2‚ü©is then the pair ‚ü®Àúu, Œõ(v)‚ü©given by the diagram
S 
m
/
eu
$
Œõ(u)
7777777777777
|A|
|Œõ(v)|

eS1
2
e
m1
2
/ /
 _
‚Ñì1
2 
A2
A1
Œõ(|App|‚ó¶(id‚äóm1))

S2
S1 
m2S1
/ |A2|S1
where eu is given by the universal property of pullbacks. To this end, we must Ô¨Årst check
that the outer contour of the diagram commutes. We leave this to the reader.
The equations (53) and (54) then hold in the subscone, because they hold in CCC, and
using Fact 4.3.
In the case we are interested in here, | | does not preserve unit and tensor. Rather,
we have required | | to be a monoidal functor, a strictly weaker notion. We have already
seen in Section 6 that this was enough to lift monoidal structure to the subscone, using
a monoidal mono factorization. We now realize that this is also enough to lift monoidal
closed structure to the subscone. This requires only minor adjustments to the construc-
tions above.
First, we require that the functor
A preserves relevant monos, for all A. While it
always preserves monos, it is not clear that it should preserve relevant monos, hence the
added assumption. (We return to our convention that  
/
denotes relevant monos
only.) We might also require that pullbacks preserve relevant monos, but this is not
necessary, as we can use the mono factorization instead. Summing up, the exponential
36

‚ü®eS1
2, em1
2, A2
A1‚ü©= ‚ü®S2, m2, A2‚ü©‚ü®S1,m1,A1‚ü©is given by the diagram on the left below.
bS1
2
ee1
2
/ /

eS1
2
 
e
m1
2 /
‚Ñì1
2

A2
A1
Œõ(|App|‚ó¶‚ó¶(id‚äóm1))

A2
A1 ‚äóS1
id|A2A1| ‚äóm1

A2
A1 ‚äó|A1|
A2A1 ,A1

A2
A1 ‚äó‚äó‚äóA1

|App|

S2
S1 
m2S1
/ |A2|S1
|A2|
(55)
where the vertical morphism Œõ (|App| ‚ó¶
 ‚ó¶(id ‚äóm1)) is Œõ applied to the composition of
vertical morphisms on the right, the morphism m2S1 is a relevant mono by our assumption
that
S1 preserves relevant monos, the topmost horizontal composition of arrows (from
bS1
2 to
A2
A1) is given by pullback, and is factored as ee1
2 followed by em1
2; and Ô¨Ånally the
morphism ‚Ñì1
2 is given by a diagonal Ô¨Åll-in, from two paths from bS1
2 to |A2|S1.
Application from ‚ü®eS1
2, em1
2, A2
A1‚ü©e‚äó‚ü®S1, m1, A1‚ü©is then given by ‚ü®d
App, |App|‚ü©as given
in the diagram below.
eS1
2 ‚äóS1
e
m1
2‚äóidS1 /
‚Ñì1
2‚äóidS1 
eApp

A2
A1 ‚äóS1
id‚äóm1 /
Œõ(|App|‚ó¶‚ó¶(id‚äóm1))‚äóidS1

A2
A1 ‚äó|A1|
A2A1 ,A1

S2
S1 ‚äóS1 m2S1‚äóidS1
/
App

|A2|S1 ‚äóS1
App

S2 
m2
/ |A2|
A2
A1 ‚äó‚äó‚äóA1

|App|
o
SApp# 
mApp
1
d
App
7
(56)
The top left square comes from the deÔ¨Ånition of the exponential ‚ü®eS1
2, em1
2, A2
A1‚ü©, tensored
by S1 on the right. The bottom left square commutes because App ‚ó¶(m2S1 ‚äóidS1) =
App‚ó¶(Œõ(m2 ‚ó¶App)‚äóidS1) = m2 ‚ó¶Appby (53). The right square commutes by (53) again.
The outer contour, deÔ¨Åned by em1
2‚äóm1 on the top,
A2A1 ,A1 on the right, eApp on the left,
mApp at the bottom, is the deÔ¨Ånition of the tensor product ‚ü®eS1
2, em1
2, A2
A1‚ü©e‚äó‚ü®S1, m1, A1‚ü©
in the subscone. d
App is given by a diagonal Ô¨Åll-in, considering the two paths eApp followed
by |App| ‚ó¶mApp and App ‚ó¶(‚Ñì1
2 ‚äóidS1) followed by m2 from eS1
2 ‚äóS1 to |A2|.
Given
any morphism
‚ü®u, v‚ü©
in
the
subscone from ‚ü®S, m, A‚ü©e‚äó‚ü®S1, m1, A1‚ü©
to
‚ü®S2, m2, A2‚ü©,
by
deÔ¨Ånition
the
following
diagram
commutes.
The
top
square
is
the
deÔ¨Ånition
of
‚ü®S, m, A‚ü©e‚äó‚ü®S1, m1, A1‚ü©.
S ‚äóS1
m‚äóm1/
e.1 
|A| ‚äó|A1|
A,A1 
S.1 
m.1 /
u 
|A ‚äó‚äó‚äóA1|
|v|

S2
m2
/ |A2|
(57)
37

Abstraction
of
the
morphism
‚ü®u, v‚ü©
in
the
subscone
from
‚ü®S, m, A‚ü©e‚äó‚ü®S1, m1, A1‚ü©
to ‚ü®S2, m2, A2‚ü©is then
the pair ‚ü®ee1
2 ‚ó¶Àúu, Œõ(v)‚ü©
given by the diagram:
S 
m
/
eu
#
Œõ(u‚ó¶e.1)
444444444444444
|A|
|Œõ(v)|

bS1
2
ee1
2
/ /
 _

eS1
2  
e
m1
2 /
‚Ñì1
2wwww
{www
A2
A1
Œõ(|App|‚ó¶‚ó¶(id‚äóm1))

S2
S1 
m2
S1
/ |A2|S1
(58)
In this diagram, eu is given by the universal property of pullbacks, and this will be justiÔ¨Åed
by the fact that the two outer paths from S to |A2|S1 are equal, which we have to check.
First, we note the identity
Œõ(s) ‚ó¶t = Œõ(s ‚ó¶(t ‚äóidC))
(59)
whenever t is a morphism from A to B, and s from B ‚äóC to D. Indeed, Œõ(s) ‚ó¶t =
Œõ(App‚ó¶((Œõ(s)‚ó¶t)‚äóidC)) (by (54)) = Œõ(App‚ó¶(Œõ(s)‚äóidC)‚ó¶(t‚äóidC)) = Œõ(s‚ó¶(t‚äóidC))(by
(53)). It follows that the lower path from S to |A2|S1 in Diagram 58 is
m2S1 ‚ó¶Œõ(u ‚ó¶e.1)
=
Œõ(m2 ‚ó¶App) ‚ó¶Œõ(u ‚ó¶e.1)
=
Œõ(m2 ‚ó¶App ‚ó¶(Œõ(u ‚ó¶e.1) ‚äóidS1))
(by (59))
=
Œõ(m2 ‚ó¶u ‚ó¶e.1)
(by (53))
while the upper one is
Œõ(|App| ‚ó¶
 ‚ó¶(id ‚äóm1)) ‚ó¶|Œõ(v)| ‚ó¶m
=
Œõ(|App| ‚ó¶
 ‚ó¶(id ‚äóm1) ‚ó¶((|Œõ(v)| ‚ó¶m) ‚äóidS1))
(by (59))
=
Œõ(|App| ‚ó¶
 ‚ó¶(|Œõ(v)| ‚äóid|A1|) ‚ó¶(m ‚äóm1))
=
Œõ(|App| ‚ó¶|Œõ(v) ‚äó‚äó‚äóidA1| ‚ó¶
 ‚ó¶(m ‚äóm1))
(by naturality of
)
=
Œõ(|v| ‚ó¶
 ‚ó¶(m ‚äóm1))
(by (53))
and these two quantities are equal by Diagram (57).
Finally, the equations (53) and (54) then hold in the subscone, because they hold in
CCC, and using Fact 4.3.
We sum up what we need to lift exponentials to the subscone, as usual. To lift expo-
nentials on the right:
(i.a.r) monoidal closed (on the right) categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr)
and (C, ‚äó, I,
,
l,
r), and a monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
(v) C has pullbacks.
(vi.r)
A preserves relevant monos.
Exponentials are given by (55), application by (56), abstraction by (58).
The construction works equally well to lift exponentials on the left, reversing arguments
to tensor products, so we require in this case:
38

(i.a.l) monoidal closed (on the left) categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr)
and (C, ‚äó, I,
,
l,
r) and a monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
(v) C has pullbacks.
(vi.l) A preserves relevant monos.
Clearly, in the symmetric monoidal closed case we require the following to get a sym-
metric monoidal closed subscone:
(i.b) symmetric monoidal closed categories (CCC,‚äó‚äó‚äó,III,Œ±Œ±Œ±,‚Ñì‚Ñì‚Ñì,rrr,ccc)
and (C, ‚äó, I,
,
l,
r,
 ), and a symmetric monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
(v) C has pullbacks.
(vi)
A preserves relevant monos.
And in the cartesian closed case, we require:
(i.c) cartesian closed categories CCC and C,
and a cartesian monoidal functor | | : CCC ‚ÜíC,
(iii.a) a monoidal mono factorization system on C.
(v) C has pullbacks.
(vi)
A preserves relevant monos.
Putting all conditions together, we get a notion of subscone for categorical models
of Moggi‚Äôs meta-language, i.e., for cartesian closed categories with a strong monad, we
require:
(i.c) cartesian closed categories CCC and C,
and a cartesian monoidal functor | | : CCC ‚ÜíC,
(ii.a) a strong monad (T,
,
,
t) on C, related to (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) by
a strong monad morphism (| |, œÉ) deÔ¨Åned in (4) and (36),
(iii.a) a monoidal mono factorization system on C.
(iv) T maps relevant pseudoepis to pseudoepis.
(v) C has pullbacks.
(vi)
A preserves relevant monos.
10. Examples
At this point, we suspect the reader is relatively fed up with categorical diagrams and
general abstract nonsense. It is therefore time to instantiate our constructions. We start
with fairly easy cases in the category Set
Set
Set of sets in Section 10.1. We examine in more
detail the non-determinism monad in Section 10.2, then the discrete probability monad
in Section 10.3. A more demanding case is the name creation monad, which involves
presheaves, and which we deal with in Section 10.4. We then engage in a series of examples
demonstrating the diÔ¨Éculties of Ô¨Ånding the right mono factorization system, and the
need for varying categories, in particular for choosing CCC and C distinct, in situations of
practical interest. Doing this, we shall see that our construction often produces deÔ¨Ånitions
39

in the style of bisimulation, sometimes in the style of observational equivalence, and will
in one case assume yet another style (existence of related reÔ¨Ånements, see the end of
Section 10.7). This will keep us busy from Section 10.5 to Section 10.8. These sections
will unfortunately be rather mathematically demanding; it does not seem there was any
escaping it.
10.1. Lift, Exceptions, State, Non-Determinism, and Continuations in Set
Set
Set
As in Section 5, suppose C1 = C2 = C = Set
Set
Set, and | |1 and | |2 are identities. In
particular, | | is the cartesian product functor from Set
Set
Set√óSet
Set
Set to Set
Set
Set. Below we summarize
the action of eT on a relation S 
/ A1√óA2 , for diÔ¨Äerent computational monads T of
Moggi (Moggi, 1991). This is parameterized by a binary relation RE on exceptions in E
in the exception monad A + E, by a binary relation RSt on states in the state monad
(A√óSt)St, and by a binary relation RR in the continuation monad RRA.
Monad T
relation eS ‚äÜTA1√óTA2
TA = A‚ä•= A ‚à™{‚ä•}
eS = S ‚à™{(‚ä•, ‚ä•)}
TA = A + E
(v1, v2) ‚ààeS ‚áê‚áí(v1, v2) ‚ààS ‚à®(v1, v2) ‚ààRE
TA = (A√óSt)St
(f, g) ‚ààeS ‚áê‚áí‚àÄs1, s2 ‚ààSt.
(s1, s2) ‚ààRSt ‚áí(œÄ1(fs1), œÄ1(gs2)) ‚ààS ‚àß(œÄ2(fs1), œÄ2(gs2)) ‚ààRSt
TA = PÔ¨Ån(A)
(B1, B2) ‚ààeS ‚áê‚áí
‚àÄb1 ‚ààB1.‚àÉb2 ‚ààB2.(b1, b2) ‚ààS ‚àß
‚àÄb2 ‚ààB2.‚àÉb1 ‚ààB1.(b1, b2) ‚ààS
TA = RRA
(Œ±1, Œ±2) ‚ààeS ‚áê‚áí
`
‚àÄk1, k2.(‚àÄa1, a2.(a1, a2) ‚ààS ‚áí(k1(a1), k2(a2)) ‚ààRR) ‚áí
(Œ±1(k1), Œ±2(k2)) ‚ààRR
¬¥
We examine each case in more detail. We take surjections as pseudoepis, injections as
relevant monos. This is the canonical choice for an epi-mono factorization system on
Set
Set
Set. Note that condition (iv), that T maps relevant pseudoepis to pseudoepis, is always
satisÔ¨Åed when C = Set
Set
Set. In fact, T preserves pseudoepis: every pseudoepi (surjective
function) e : A ‚ÜíB has a section m : B ‚ÜíA (i.e., e‚ó¶m = idB), by the Axiom of Choice.
Then Te ‚ó¶Tm = idTB, showing that Te is surjective, hence pseudoepi.
10.1.1. Lift monad A‚ä•. The monad morphism œÉ from (A √ó B)‚ä•to A‚ä•√ó B‚ä•maps ‚ä•
to (‚ä•, ‚ä•), and every pair (x, y) ‚ààA √ó B to itself. This is a commutative monad, hence
monoidal, hence strong. The mediator
dA,B from A‚ä•√ó B‚ä•to (A √ó B)‚ä•maps (‚ä•, y) and
(x, ‚ä•) to ‚ä•, and (x, y) where x ‚ààA and y ‚ààB to itself. Note that it is not a cartesian
monad, because (œÄ2)‚ä•‚ó¶
dA,B maps (‚ä•, y) to ‚ä•, while œÄ2(‚ä•, y) = y. Nonetheless, all
required conditions are satisÔ¨Åed to lift T to a commutative monad on the subscone.
10.1.2. Exception monad A + E. The monad morphism œÉ from (A √ó B) + E to (A +
E) √ó (B + E) maps the pair (x, y) ‚ààA √ó B to itself, and the exception e ‚ààE to the
40

pair (e, e). The strength
tA,B from A √ó (B + E) to (A √ó B) + E maps (x, y) with x ‚ààA
and y ‚ààB to (x, y), and (x, e) with x ‚ààA and e ‚ààE to e. (This is not a commutative
monad.) Therefore this lifts to a monoidal monad on the subscone. As shown in the
table above, the lifted monad relates two values v1 and v2 if and only if both are non-
exceptional values (in A) and are related by S, or both are exceptions related by some a
priori relation RE.
10.1.3. State transformer monad (A √ó St)St. The monad morphism œÉ from ((A √ó B) √ó St)St
to (A √ó St)St √ó (B √ó St)St maps f : St ‚Üí(A √ó B) √ó St to the pair of functions mapping
s ‚ààSt to (v1, s‚Ä≤) and to (v2, s‚Ä≤) respectively, where f(s) = ((v1, v2), s‚Ä≤). The strength maps
(x, f) ‚ààA√ó(B √ó St)St to the function mapping s ‚ààSt to ((x, y), s‚Ä≤), where (y, s‚Ä≤) = f(s).
(Again, this is not a commutative monad.)
It follows that our lifting constructions apply, yielding the lifted monad described in
the table above. Note that f : St ‚ÜíA1√óSt, g : St ‚ÜíA2√óSt can be read as the transition
functions of deterministic transition systems, which go from a state s to another state s‚Ä≤
and emit a value in A1 (resp. in A2). These transition functions are in relation by eS if
and only if, for any two states that are in relation via RSt, the values emitted by Ô¨Åring
the transitions by f and g are in relation by S, and the target states after the transition
are in relation via RSt again. This states that f and g are in relation by eS if and only if
RSt is a bisimulation between states.
10.1.4. Finite powerset (non-determinism) monad PÔ¨Ån(A). The monad morphism from
PÔ¨Ån(A √ó B) to PÔ¨Ån(A) √ó PÔ¨Ån(B) maps every relation R ‚äÜA √ó B to the pair consisting of
its domain {x|‚àÉy ¬∑ (x, y) ‚ààR} and its codomain {y|‚àÉx ¬∑ (x, y) ‚ààR}. The mediator
dA,B
maps X ‚äÜA and Y ‚äÜB to the relation X √ó Y ‚äÜA √ó B, and makes T a commutative
monad.
Our construction in the case of the Ô¨Ånite powerset monad PÔ¨Ån() in fact expands to:
(B1, B2) ‚ààeS iÔ¨ÄB1 = {x|(x, y) ‚ààR} and B2 = {y|(x, y) ‚ààR} for some R ‚äÜS. (Recall
that eT maps relations S to the direct image eS of ‚ü®TœÄ1, TœÄ2‚ü©: T S ‚ÜíTA1√óTA2, see the
end of Section 5.) This is equivalent to the condition given in the table above, which is
the more usual way of deÔ¨Åning bisimulations.
Indeed, if B1 = {x|(x, y) ‚ààR} and B2 = {y|(x, y) ‚ààR} for some R ‚äÜS then for
every b1 ‚ààB1 by construction there is some b2 ‚ààB2 such that (b1, b2) ‚ààR, therefore
(b1, b2) ‚ààS since R ‚äÜS, and symmetrically for every b2 ‚ààB2 there is some b1 ‚ààB1 such
that (b1, b2) ‚ààS: B1 and B2 are bisimilar.
Conversely, if B1 and B2 are bisimilar (in the sense just given), then let R be the
restriction of S to B1 √óB2. For every b1 ‚ààB1, by bisimilarity there is some b2 ‚ààB2 such
that (b1, b2) ‚ààS, so (b1, b2) ‚ààR, therefore b1 ‚àà{x|(x, y) ‚ààR}; so B1 ‚äÜ{x|(x, y) ‚ààR}.
The reverse inclusion is obvious, so B1 = {x|(x, y) ‚ààR}. The other equality B2 =
{y|(x, y) ‚ààR} is by symmetry.
That logical relations on powersets deÔ¨Åne bisimulations was conjectured in (Lazi¬¥c and Nowak, 2000)
and, for pre-logical relations, in (Honsell and Sannella, 2002).
Note that there is nothing special with the Ô¨Ånite powerset monad here. We might have
taken the set of all subsets instead, or the set of all subsets of cardinality at least Œ± and
41

strictly less than Œ≤, where Œ± < Œ≤ are two cardinal numbers such that Œ± ‚â§1, and every
Ô¨Ånite product of cardinals between Œ± (inclusive) and Œ≤ (exclusive) is again so. The Ô¨Ånite
powerset monad is the case Œ± = 0, Œ≤ = ‚Ñµ0; the lift monad is the case Œ± = 0, Œ≤ = 2.
Note also that although this monad is always commutative, it is a cartesian monad if
and only if Œ± ‚â•1. Indeed, T is a cartesian monad if and only if the domain of the relation
X √ó Y is X, and its codomain is Y . This is wrong if Y or X is allowed to be empty,
but holds as soon as X and Y are non-empty. In particular, the Ô¨Ånite-and-non-empty
powerset monad (for serial non-determinism‚Äîno state is Ô¨Ånal) is cartesian.
10.1.5. The continuation monad RRA. The monad morphism œÉ from RRA√óB to RRA √ó
RRB maps Œ± : RA√óB ‚ÜíR to the pair (Œ±1, Œ±2), where Œ±1 maps k1 ‚ààRA to Œ±(k1 ‚ó¶œÄ1)
and Œ±2 maps k2 ‚ààRB to Œ±(k2 ‚ó¶œÄ2). The strength
tA,B maps (x, Œ±) ‚ààA √ó RRB to the
function mapping k ‚ààRA√óB to Œ±(Œªy ‚ààB ¬∑ k(x, y)). This monad is not commutative.
Our construction yields the rather opaque condition in the table above, where a1, a2
are values, k1, k2 are continuations, and Œ±1, Œ±2 are programs, taking continuations to
answers in R. Intuitively, think of continuations as computation environments (a toplevel
loop, a shell) that take the result of a program and print something (called an answer,
in R) on a computer terminal. To evaluate a program Œ± in continuation (environment)
k, apply Œ± to k. For simplicity, assume that the relation RR on answers is equality. The
condition then states that two programs are related by eS if and only if they give identical
answers when evaluated in related continuations (environments), where two environments
are related if and only if they print the same answer on values that are related by S, i.e.,
if and only if they do not make any diÔ¨Äerence between S-related values. This is a form
of observational equivalence.
10.2. Labelled transition systems and bisimulations
The case TA = PÔ¨Ån(A) allows one to deÔ¨Åne labelled transition systems as elements of
(TA)A√óL, with labels in L and states in A, as functions mapping states a and labels ‚Ñìto
the set of states a‚Ä≤ such that a
‚Ñì
‚àí‚Üía‚Ä≤. Our monad lifting eS in this case is parameterized
by a binary relation on RL on labels and is deÔ¨Åned by:
(f1, f2) ‚ààeS
‚áê‚áí
‚àÄa1, a2, ‚Ñì1, ‚Ñì2 ¬∑ (a1, a2) ‚ààS ‚àß(‚Ñì1, ‚Ñì2) ‚ààRL ‚áí
(
‚àÄb1 ‚ààf1(a1, ‚Ñì1).‚àÉb2 ‚ààf2(a2, ‚Ñì2).(b1, b2) ‚ààS ‚àß
‚àÄb2 ‚ààf2(a2, ‚Ñì2).‚àÉb1 ‚ààf1(a1, ‚Ñì1).(b1, b2) ‚ààS
In case RL is the equality relation, the relation eS relates f1 and f2 iÔ¨ÄS is a strong
bisimulation between the labelled transition systems f1 and f2.
10.3. Discrete Probabilities and Subprobabilities
DeÔ¨Åning TTTA to be space of all probability distributions over the space A allows us to
deÔ¨Åne probabilistic transition systems as objects of (TTTA)A. In principle, this should work
just like ordinary transition systems (Section 10.2).
In fact, deÔ¨Åning what the right spaces should be, and ensuring that the required monads
42

exist and have the required properties, is much subtler. For one, as far as we know, the
category of measurable spaces and measurable functions is not known to be cartesian
closed. As we don‚Äôt want to delve into measure theoretic considerations at this point, let
us deal with a simpler case: the monad of discrete (sub-)probability distributions over
Set
Set
Set.
A discrete sub-probability distribution ŒΩ over some set A is simply a function mapping
each element x ‚ààA to some non-negative number ax ‚ààR+, so that P
x‚ààA ax ‚â§1. This
sum, which is in general inÔ¨Ånite, denotes the supremum of all partial sums P
x‚ààB ax,
when B ranges over the Ô¨Ånite subsets of A. It is an easy exercise to show that only
countably many coeÔ¨Écients ax can be non-zero, then. A discrete probability distribution
additionally satisÔ¨Åes P
x‚ààA ax = 1. The Dirac distribution Œ¥x0 at x0 maps x0 to 1 and
every x Ã∏= x0 to 0. Accordingly, we write P
x‚ààA axŒ¥x for the discrete distribution mapping
x to ax. The measure of a subset B of A under ŒΩ = P
x‚ààA axŒ¥x is ŒΩ(B) = P
x‚ààB ax.
Let TTTA be the set of all discrete (sub-)probability distributions over A, Œ∑Œ∑Œ∑A map x ‚ààA
to Œ¥x ‚ààTTTA, and ¬µ¬µ¬µA be deÔ¨Åned as mapping ŒΩ2 = P
ŒΩ‚ààTTT A aŒΩŒ¥ŒΩ ‚ààTTT 2A to the discrete
distribution ¬µ¬µ¬µA(ŒΩ2) such that ¬µ¬µ¬µA(ŒΩ2)(B) = P
ŒΩ‚ààTTT A aŒΩŒΩ(B) for every B ‚äÜA; in other
words, ¬µ¬µ¬µA(ŒΩ2) = P
x‚ààA
 P
ŒΩ‚ààTTT A aŒΩŒΩ({x})

Œ¥x. It is easy to check that (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ) is a monad
on Set
Set
Set. Moreover, it is strong: the strength tttA,B maps x ‚ààA and ŒΩ = P
y‚ààB byŒ¥y ‚ààTTTB
to P
y‚ààB byŒ¥(x,y).
Our construction in the case of the (sub-)probability distribution monad on Set
Set
Set yields
the following. Again, TTT = T, and recall that eT maps relations S on A1 √ó A2 to the direct
image eS of ‚ü®TœÄ1, TœÄ2‚ü©: TS ‚ÜíTA1√óTA2. In other words, given ŒΩ1 ‚ààTTTA1, ŒΩ2 ‚ààTTTA2,
(ŒΩ1, ŒΩ2) ‚ààeS if and only if there is a discrete (sub-)probability distribution ŒΩ on S such
that ŒΩ1(B1) = ŒΩ((B1 √ó A2) ‚à©S) for every B1 ‚äÜA1 and ŒΩ2(B2) = ŒΩ((A1 √ó B2) ‚à©S) for
every B2 ‚äÜA2.
Write ŒΩ1 as P
x1‚ààA1 ax1Œ¥x1, ŒΩ2 as P
x2‚ààA2 bx2Œ¥x2. Then (ŒΩ1, ŒΩ2) ‚ààeS if and only if there
is a discrete (sub-)probability distribution ŒΩ = P
x1‚ààA1,x2‚ààA2
(x1,x2)‚ààS
cx1,x2Œ¥(x1,x2) on S such
that ax1 = P
x2‚ààA2/(x1,x2)‚ààS cx1,x2 for all x1 ‚ààA1 and bx2 = P
x1‚ààA1/(x1,x2)‚ààS cx1,x2 for
all x2 ‚ààA2. This may be pictured by requiring that we have a matrix of non-negative
reals cx1,x2 such that: the only non-zero entries (x1, x2) of this matrix are such that
(x1, x2) ‚ààS; the sum of the x1 row is ax1; the sum of the x2 column is bx2. This is a
well-known problem in probability theory: Ô¨Ånd ŒΩ on the product A1 √ó A2 having given
marginals ŒΩ1 and ŒΩ2 and whose support {(x1, x2) ‚ààA1√óA2|ŒΩ({(x1, x2)}) Ã∏= 0} is included
in S.
Let us play with the deÔ¨Ånition of eS for a moment. Consider the disjoint sum A1 ‚äïA2,
and the smallest equivalence ‚â°S relation containing S. It is easy to see that, for every
‚â°S-equivalence class C,
((C ‚à©A1) √ó A2) ‚à©S = (A1 √ó (C ‚à©A2)) ‚à©S
(60)
It follows that if there is a discrete distribution ŒΩ with support contained in S and whose
marginals are ŒΩ1 and ŒΩ2, then for any ‚â°S-equivalence class C, ŒΩ1(C ‚à©A1) = ŒΩ2(C ‚à©A2).
Indeed, ŒΩ1(C ‚à©A1) = ŒΩ(((C ‚à©A1) √ó A2) ‚à©S), ŒΩ2(C ‚à©A2) = ŒΩ((A1 √ó (C ‚à©A2)) ‚à©S); then
use (60).
43

Conversely, if ŒΩ1(C‚à©A1) = ŒΩ2(C‚à©A2) for every ‚â°S-equivalence class C, then whenever
x1 ‚â°S x2, let dx1,x2 = ŒΩ1(C ‚à©A1) = ŒΩ2(C ‚à©A2), where C is the equivalence class of x1
(equivalently, of x2). Now deÔ¨Åne ŒΩ as P
(x1,x2)‚ààA1√óA2
x1‚â°Sx2
dx1,x2Ã∏=0
ax1 bx2
dx1,x2 Œ¥(x1,x2). Clearly the support
of ŒΩ is contained in the relation ‚â°S, and ŒΩ1 and ŒΩ2 are the marginals of ŒΩ. So (ŒΩ1, ŒΩ2) ‚ààf
‚â°S.
Let S be saturated if and only if, for any x1 ‚ààA1, x2 ‚ààA2, x1 ‚â°S x2 implies
(x1, x2) ‚ààS. We have just shown the following: for any saturated relation S ‚äÜA1 √ó A2,
(ŒΩ1, ŒΩ2) ‚ààeS if and only if ŒΩ1(C ‚à©A1) = ŒΩ2(C ‚à©A2) for every ‚â°S-equivalence class C. The
restriction to saturated relations is not too demanding; indeed, we can always saturate
any binary relation S by considering the restriction of ‚â°S to A1 √ó A2 instead.
Analogously with Section 10.2, we may deÔ¨Åne a probabilistic labelled transition system
as an element of (TTTA)A√óL. Then two such transition systems f1 and f2 are in relation if
and only if:
‚àÄx1 ‚ààA1, x2 ‚ààA2, ‚Ñì1, ‚Ñì2 ‚ààL.(x1, x2) ‚ààS
‚àß
(‚Ñì1, ‚Ñì2) ‚ààRL ‚áí
(61)
(f1(x1, ‚Ñì1), f2(x2, ‚Ñì2)) ‚ààeS
When S is saturated, this condition is equivalent to: for every x1 ‚ààA1, x2 ‚ààA2, ‚Ñì1, ‚Ñì2 ‚àà
L, if x1 ‚â°S x2 and (‚Ñì1, ‚Ñì2) ‚ààRL then for every ‚â°S-equivalence class C, f1(x1, ‚Ñì1)(C ‚à©
A1) = f2(x2, ‚Ñì2)(C ‚à©A2). This is exactly Larsen and Skou‚Äôs (Larsen and Skou, 1991)
notion of probabilistic bisimulation, when L1 = L2, RL is the equality relation, and A1
and A2 are Ô¨Ånite. To see this, write p‚Ñì(x) = f1(x, ‚Ñì) if x ‚ààA1, p‚Ñì(x) = f2(x, ‚Ñì) if x ‚ààA2,
and rewrite the condition above as: if x1 ‚â°S x2 then for every ‚â°S-equivalence class C,
p‚Ñì(x1)(C) = p‚Ñì(x2)(C).
It is therefore fair to say that any saturated relation S (and by extension, any relation
at all) such that f1 and f2 are in relation at type A √ó L ‚ÜíTTTA, as deÔ¨Åned in (61), is
again a probabilistic bisimulation.
A note on discreteness: the monad of discrete (sub-)probability distributions is enough
to model coin Ô¨Çips P
x‚àà{0,1} 1/2Œ¥x. One may argue that, in any Ô¨Ånite computation of
a Œª-term augmented with coin Ô¨Çips, only Ô¨Ånite linear combinations of Dirac measures
(simple valuations) will ever crop up, so that discrete distributions are general enough to
accomodate all practical forms of probabilistic choice. This would not be true in the case
of inÔ¨Ånite computations, where at least all least upper bounds of directed chains of sim-
ple distributions (quasi-simple valuations (Goubault-Larrecq, 2005)) would be needed.
Notwithstanding the fact that we should incorporate Ô¨Åxpoints in the language and re-
place Set
Set
Set with some other category such as Cpo
Cpo
Cpo, this would exceed the realm of discrete
distributions anyway: for example, the Lebesgue measure on [0, 1] is a quasi-simple val-
uation but is deÔ¨Ånitely not discrete.
10.4. Logical relations for dynamic name creation
Consider the categorical model of dynamic name creation deÔ¨Åned in (Stark, 1996). Let I
be the category of Ô¨Ånite sets and injective functions, and Set
Set
SetI be the category of functors
from I to Set
Set
Set and natural transformations (the category of covariant presheaves over I).
44

For short, write TTTAs for TTT(A)(s) and similarly for other notations. Let + denote disjoint
union in I.‚Ä°
We deÔ¨Åne the strong monad (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) on Set
Set
SetI by:
‚Äî TTTA = colims‚Ä≤ A( + s‚Ä≤) : I ‚ÜíSet
Set
Set.
On objects, this is given by TTTAs = colims‚Ä≤ A(s + s‚Ä≤), i.e., TTTAs is the set of all
equivalence classes of pairs (s‚Ä≤, a) with s‚Ä≤ ‚ààI and a ‚ààA(s + s‚Ä≤) modulo the smallest
equivalence relation ‚â°such that (s‚Ä≤, a) ‚â°(s‚Ä≤‚Ä≤, A(ids+j)a) for every morphism s‚Ä≤
j
‚àí‚Üís‚Ä≤‚Ä≤
in I (intuitively, given a set of names s, elements of TTTAs are formal expressions (ŒΩs‚Ä≤)a
where all names in s‚Ä≤ are bound and every name free in a is in s + s‚Ä≤‚Äîmodulo the
fact that (ŒΩs‚Ä≤, s‚Ä≤‚Ä≤)a ‚â°(ŒΩs‚Ä≤)a for any additional set of new names s‚Ä≤‚Ä≤ not free in a). We
shall write [s‚Ä≤, a] the equivalence class of (s‚Ä≤, a).
On morphisms s1
i
‚àí‚Üís2, TTTAi maps [s‚Ä≤, a] to the equivalence class of [s‚Ä≤, A(i + ids‚Ä≤)a].
‚Äî For any f : A ‚ÜíB in Set
Set
SetI, TTTfs : TTTAs ‚ÜíTTTBs is deÔ¨Åned by TTTfs[s‚Ä≤, a] = [s‚Ä≤, f(s +
s‚Ä≤)a]. This is compatible with ‚â°because f is natural.
‚Äî Œ∑Œ∑Œ∑As : As ‚ÜíTTT As is deÔ¨Åned by Œ∑Œ∑Œ∑Asa = [‚àÖ, a].
‚Äî ¬µ¬µ¬µAs : TTT 2As ‚ÜíTTTAs is deÔ¨Åned by ¬µ¬µ¬µAs[s‚Ä≤, [s‚Ä≤‚Ä≤, a]] = [s‚Ä≤ + s‚Ä≤‚Ä≤, a].
‚Äî tttA,Bs : As√óTTTBs ‚ÜíTTT(A√óB)s is deÔ¨Åned by tttA,Bs(a, [s‚Ä≤, b]) = [s‚Ä≤, (Ainlss‚Ä≤a, b)] where
inlss‚Ä≤ : s ‚Üís + s‚Ä≤ is the canonical injection.
Furthermore, TTT is a commutative monad, whose mediator
dA,Bs : TTTAs √ó TTTBs ‚ÜíTTT(A √ó
B)s maps ([s‚Ä≤, a], [s‚Ä≤‚Ä≤, b]) to [s‚Ä≤ + s‚Ä≤‚Ä≤, (A(ids + inls‚Ä≤s‚Ä≤‚Ä≤)a, A(ids + inrs‚Ä≤‚Ä≤s‚Ä≤)b)], where inrs‚Ä≤‚Ä≤s‚Ä≤ :
s‚Ä≤‚Ä≤ ‚Üís‚Ä≤ + s‚Ä≤‚Ä≤ is the other canonical injection. In fact, TTT is a cartesian monad. Indeed,
(TTT œÄ1‚ó¶
dA,B)s maps ([s‚Ä≤, a], [s‚Ä≤‚Ä≤, b]) to [s‚Ä≤+s‚Ä≤‚Ä≤, A(ids+inls‚Ä≤s‚Ä≤‚Ä≤)a] = [s‚Ä≤, a], so TTTœÄ1‚ó¶
dA,B = œÄ1,
and similarly TTTœÄ2 ‚ó¶
dA,B = œÄ2.
It is important to note how ‚â°works. The category I has pushouts: in particular, if
s0
i1
‚àí‚Üís1 and s0
i2
‚àí‚Üís2 are two morphisms in I, then there is a Ô¨Ånite set s1 +s0 s2 and two
morphisms s1
j1
‚àí‚Üís1 +s0 s2, s2
j2
‚àí‚Üís1 +s0 s2 such that j1 ‚ó¶i1 = j2 ‚ó¶i2‚Äîtake s1 +s0 s2 to
be the disjoint sum s1 + s2 modulo the equivalence relation relating i1(a0) = i2(a0) for
every a0 ‚ààs0.
It follows that (‚àó) for every a1 ‚ààA(s + s1), a2 ‚ààA(s + s2), (s1, a1) ‚â°(s2, a2) if
and only if there is a Ô¨Ånite set s12 and two arrows s1
j1
‚àí‚Üís12 and s2
j2
‚àí‚Üís12 such that
A(ids1 + j1)a1 = A(ids2 + j2)a2.
We take CCC1 = CCC2 = C = Set
Set
SetI, hence objects in the subscone give rise to I-indexed
Kripke logical relations. Furthermore, | |1 = | |2 = | | is the identity functor and T is just
TTT. The category Set
Set
SetI has a mono factorization consisting of pointwise surjections and
pointwise injections.
As in Section 5, the monad morphism œÉ‚ü®A1,A2‚ü©s : T(A1 √ó A2)s ‚ÜíTTTA1s √ó TTTA2s is
equal to ‚ü®TœÄ1, TœÄ2‚ü©s. That is to say
œÉ‚ü®A1,A2‚ü©s[s‚Ä≤, (a1, a2)] = ([s‚Ä≤, a1], [s‚Ä≤, a2])
where s‚Ä≤ ‚ààI, a1 ‚ààA1(s + s‚Ä≤), a2 ‚ààA2(s + s‚Ä≤).
‚Ä° Note that + is not a coproduct in I. In fact, I does not have a coproduct. However + is functorial
in both components, associative, and has a neutral element, and this is all we need.
45

Again as in Set
Set
Set, every functor S from I to A1 √ó A2 has a representation
‚ü®œÄS1, œÄS2‚ü©: S ÷í‚ÜíA1 √ó A2
where each arrow ‚ü®œÄS1, œÄS2‚ü©s : Ss ÷í‚ÜíA1s √ó A2s is an inclusion.
Hence, S is a family of relations Ss between A1s and A2s, functorial in s (for each
s‚Ä≤
i
‚àí‚Üís‚Ä≤‚Ä≤, Si is the appropriate restriction of A1i √ó A2i). Recall from Section 5 that eS
is deÔ¨Åned as the direct image of ‚ü®TœÄS 1, TœÄS2‚ü©. So, (‚Ä†) [s1, a1] eSs [s2, a2] if and only
if for some s‚Ä≤ ‚ààI, a‚Ä≤
1 ‚ààA1s‚Ä≤, a‚Ä≤
2 ‚ààA2s‚Ä≤, (s1, a1) ‚â°(s‚Ä≤, a‚Ä≤
1), (s2, a2) ‚â°(s‚Ä≤, a‚Ä≤
2) and
a‚Ä≤
1 S(s + s‚Ä≤) a‚Ä≤
2.
Using (‚àó) above, (s1, a1) ‚â°(s‚Ä≤, a‚Ä≤
1) means that there is a Ô¨Ånite set s‚Ä≤
1 and two arrows
s1
j1
‚àí‚Üís‚Ä≤
1, s‚Ä≤ j‚Ä≤
1
‚àí‚Üís‚Ä≤
1 in I such that: (a) A1(ids +j1)a1 = A1(ids +j‚Ä≤
1)a‚Ä≤
1. Similarly, (s2, a2) ‚â°
(s‚Ä≤, a‚Ä≤
2) means there is a Ô¨Ånite set s‚Ä≤
2 and two arrows s2
j2
‚àí‚Üís‚Ä≤
2, s‚Ä≤ j‚Ä≤
2
‚àí‚Üís‚Ä≤
2 in I such that: (b)
A2(ids +j2)a2 = A2(ids +j‚Ä≤
2)a‚Ä≤
2. Consider arrows j‚Ä≤
1 and j‚Ä≤
2, which both have s‚Ä≤ as source,
and build their pushout s0 = s‚Ä≤
1 +s‚Ä≤ s‚Ä≤
2, with arrows s‚Ä≤
1
j‚Ä≤‚Ä≤
1
‚àí‚Üís0, s‚Ä≤
2
j‚Ä≤‚Ä≤
2
‚àí‚Üís0. Let j be j‚Ä≤‚Ä≤
1 ‚ó¶j‚Ä≤
1 =
j‚Ä≤‚Ä≤
2 ‚ó¶j‚Ä≤
2. By applying A1(ids+j‚Ä≤‚Ä≤
1 ) to both sides of (a), A1(ids+(j‚Ä≤‚Ä≤
1 ‚ó¶j1))a1 = A1(ids+j)a‚Ä≤
1.
By applying A2(ids + j‚Ä≤‚Ä≤
2 ) to both sides of (b), A2(ids + (j‚Ä≤‚Ä≤
2 ‚ó¶j2))a2 = A2(ids + j)a‚Ä≤
2.
Since a‚Ä≤
1 S(s + s‚Ä≤) a‚Ä≤
2 and S is functorial, A1(ids + j)a‚Ä≤
1 S(s + s0) A2(ids + j)a‚Ä≤
2, so
A1(ids + (j‚Ä≤‚Ä≤
1 ‚ó¶j1))a1 S(s + s0) A2(ids + (j‚Ä≤‚Ä≤
2 ‚ó¶j2))a2.
So if (s1, a1) eSs (s2, a2) then there are arrows s1
i1
‚àí‚Üís0 and s2
i2
‚àí‚Üís0, namely i1 = j‚Ä≤‚Ä≤
1 ‚ó¶j1
and i2 = j‚Ä≤‚Ä≤
2 ‚ó¶j2, such that A1(ids + i1)a1 S(s + s0) A2(ids + i2)a2.
Conversely, if the latter holds, then (‚Ä†) above clearly holds for s‚Ä≤ = s0, a‚Ä≤
1 = A1(ids +
i1)a1 and s‚Ä≤
2 = A2(ids + i2)a2.
eSs ÷í‚ÜíTTTA1s √ó TTTA2s is thus given by
[s1, a1] eSs [s2, a2]
‚áê‚áí
‚àÉs0 ‚ààI ¬∑ ‚àÉi1 : s1 ‚Üís0 ‚ààI ¬∑ ‚àÉi2 : s2 ‚Üís0 ‚ààI¬∑
(A1(ids + i1)a1) S(s + s0) (A2(ids + i2)a2)
(62)
where a1 ‚ààA1(s + s1) and a2 ‚ààA2(s + s2).
From (62) we deÔ¨Åne a logical relation for Moggi‚Äôs metalanguage, as suggested in Sec-
tion 5, by induction on types œÑ. Each relation JœÑK is a functor from I to Set
Set
Set √ó Set
Set
Set, so
that JœÑK s is a binary relation for each type œÑ and each Ô¨Ånite set s. We have:
(f1, f2) ‚ààJœÑ ‚ÜíœÑ‚Ä≤K s
‚áê‚áí
‚àÄs‚Ä≤, i : s ‚Üís‚Ä≤ ‚ààI, (a1, a2) ‚ààJœÑK s‚Ä≤ ¬∑
(f1s‚Ä≤(i, a1), f2s‚Ä≤(i, a2)) ‚ààJœÑ ‚Ä≤K s‚Ä≤
((a1, a‚Ä≤
1), (a2, a‚Ä≤
2)) ‚ààJœÑ √ó œÑ‚Ä≤K s
‚áê‚áí
(a1, a2) ‚ààJœÑK s ‚àß(a‚Ä≤
1, a‚Ä≤
2) ‚ààJœÑ ‚Ä≤K s
([s1, a1], [s2, a2]) ‚ààJTTTœÑK s
‚áê‚áí
‚àÉs0, i1 : s1 ‚Üís0, i2 : s2 ‚Üís0 ‚ààI ¬∑
(A1(ids + i1)a1, A2(ids + i2)a2) ‚ààJœÑK (s + s0)
This is similar to the logical relations of (Pitts and Stark, 1993; Stark, 1998). While
(62) is roughly similar to the notion of logical relation of (Pitts and Stark, 1993), this
paper does not rest on Moggi‚Äôs computational Œª-calculus. On the other hand (Stark, 1998)
does rest on the computational Œª-calculus but does not deÔ¨Åne a suitable notion of logical
relation.
Zhang and Nowak show in (Zhang and Nowak, 2003) that the logical relation above is
46

in fact strictly weaker than Pitts and Stark‚Äôs logical relation (Pitts and Stark, 1993) when
restricted to the latter‚Äôs nu-calculus; Zhang and Nowak also claim that by reinstantiating
our construction of the subscone with CCC1 = CCC2 = Set
Set
SetI as above but C = Set
Set
SetI‚Üí, where
I‚Üíis the comma category whose objects are the morphisms of I, another Kripke logical
relation is obtained that coincides with Pitts and Stark‚Äôs on the nu-calculus up to Ô¨Årst
order. This is in fact wrong, but Zhang (Zhang, 2005) shows that this can be repaired by
replacing I‚Üíby the category PI‚Üíwhose objects are, again, morphisms of I, but whose
morphisms are pullback diagrams in I. It extends it to the full monadic meta-language,
and rests purely on semantic principles, while Pitts and Stark‚Äôs deÔ¨Ånition of their logical
relation relies on normalization properties of the nu-calculus.
10.5. Fun With Categories I: Taking CCC Ã∏= Set
Set
Set, the Example of Cpo
Cpo
Cpo
The constructions of this paper apparently allow for some considerable degree of freedom.
We may choose distinct categories for CCC and C, diÔ¨Äerent monads TTT and T, several monad
morphisms œÉ, several mono factorization systems, and so on.
However, the examples we have given until now used none of these degrees of freedom.
By taking CCC = C = Set
Set
Set notably, we have essentially narrowed down our possible choices
to just one. So let us have fun, trying to vary various parameters, and see what happens.
We start by keeping CCC = C, but with categories CCC other than Set
Set
Set or presheaf categories.
We shall then look at several mono factorization systems.
The aim of this section is to show that, at least if we keep CCC = C, our freedom is
considerably restricted.
Imagine CCC is Cpo
Cpo
Cpo, the category of cpos and continuous maps. By cpo we mean any
ordered set such that any directed family of elements has a least upper bound. See
(Abramsky and Jung, 1994; Gierz et al., 1980; Gierz et al., 2003) for background infor-
mation on cpos and related topics. We always assume cpos to be equipped with their
Scott topology.
Imagine the monad we are interested in on Cpo
Cpo
Cpo is that of demonic non-determinism,
whereby intuitively, non-deterministic choices are in the hand of a malevolent external
adversary. The traditional monad TTT modeling this is the Smyth powerdomain construc-
tion: TTTA = Q(A) consists of all compact non-empty upward-closed subsets of A, ordered
by reverse inclusion ‚äá. One problem here is that Q(A) need not be a cpo. It is one
if A, equipped with its Scott topology, is a sober topological space; for example, if A
is a continuous cpo. So we should restrict to some cartesian-closed category consisting
of continuous cpos only. We know what these categories should be, by Jung‚Äôs results
(Jung, 1990), but this is a bit complicated for an illustration. (We shall return to these
categories anyway in Section 10.7, out of necessity, but will avoid them as long as we
can.)
Instead, take Heckmann‚Äôs characterization of the upper power domain (Heckmann, 1990)
(without the top element, which would be the empty compact in Q(A) above). Let
2 = {0, 1} be the Sierpi¬¥nski space, i.e., the two-element cpo with 0 < 1. Let [A ‚Üí2] be
the set of Scott-continuous functions from A to 2; this is canonically isomorphic to the
space of Scott opens of A, through the map sending f ‚àà[A ‚Üí2] to f ‚àí1{1}. DeÔ¨Åne ‚ä§
47

as Œªx ¬∑ 1 in [A ‚Üí2], ‚ä•as Œªx ¬∑ 0; least upper bounds ‚äîand greatest lower bounds ‚äìare
deÔ¨Åned pointwise. Following Heckmann, U‚àó(A) is the set of continuous linear non-trivial
second-order predicates, i.e., the set of Scott-continuous functionals F from [A ‚Üí2]
to 2 that preserve ‚ä§and meets ‚äì(linearity), and map ‚ä•to 0 (non-triviality). (See
(Heckmann, 1990, Chapter 19) for the rationale behind this construction, and for related
theorems. While our constructions will work for several other power constructions, we
only take one as illustration.)
U‚àóis a monad TTT on Cpo
Cpo
Cpo. Its action on morphisms h : A ‚ÜíB is given by TTT(h) =
ŒªF ‚ààU‚àó(A), f ‚àà[B ‚Üí2] ¬∑ F(f ‚ó¶h). Its unit is given by Œ∑Œ∑Œ∑A(x) = Œªf ‚àà[A ‚Üí2] ¬∑ f(x)
(x ‚ààA), and its multiplication is given by ¬µ¬µ¬µA(G) = Œªf ‚àà[A ‚Üí2]¬∑G(ŒªF ‚ààU‚àó(A)¬∑F(f))
(G ‚ààU2
‚àó(A)). The strength is given by tttA,B = Œª(x, F) ‚ààA √ó U‚àó(B) ¬∑ Œªf ‚àà[A √ó B ‚Üí
2] ¬∑ F(Œªy ‚ààB ¬∑ f(x, y)). Note that these are the same formulae as those deÔ¨Åning the
continuation monad.
It turns out that if A is a continuous cpo, then U‚àó(A) and Q(A) are naturally isomor-
phic. They key result here is the Hofmann-Mislove Theorem (Abramsky and Jung, 1994,
Corollary 7.2.10). The isomorphism maps any upward-closed compact subset Q of A
to the continuous linear functional Œªf ‚àà[A ‚Üí2] ¬∑ Q ‚äÜf ‚àí1{1}, and conversely, maps
any continuous linear functional F to the intersection of all opens O of A such that
F(œáO) = 1. (The hard part of the Hofmann-Mislove theorem is to show that this is
compact, as soon as A is sober.) While this shows the connection between U‚àóand Q, we
shall not use this until Section 10.7.
To apply our construction of logical relations, we need a mono factorization system.
In Cpo
Cpo
Cpo, there are at least three:
‚Äî The trivial mono factorization. Here, relevant monos are isos, and pseudoepis are
arbitrary morphisms. This exists in every category, and is completely uninteresting in
every category: given any binary relation S between A1 and A2, i.e., S 
m/ A1 √ó A2 ,
then S is in fact the whole of A1 √ó A2 (up to iso).
‚Äî The epi / regular mono factorization. Recall that a mono is regular if and only if it
is the equalizer of a parallel pair. Let us describe regular monos more concretely in
Cpo
Cpo
Cpo.
A regular mono m : C 
/ B in Cpo
Cpo
Cpo is a Scott-closed subset of B, up to isomor-
phism. More precisely, m is the composite of an iso from C to some Scott-closed
subset m(C) of B, with the canonical inclusion of m(C) in B.
An epi is any continuous function e : A
/ / C such that e(A) is dense in C, i.e.,
such that cl(e(A)) = C, where cl denotes the (Scott) topological closure operator.
Equivalently, such that e‚àí1(U) Ã∏= ‚àÖfor any non-empty Scott-open U of C.
It is well-known that this yields a mono factorization system on Cpo
Cpo
Cpo. We skip the
details, which are not very interesting at this point.
‚Äî The extremal epi / mono factorization. Recall that the extremal pseudoepis are
the morphisms A
e / B such that, whenever e can be written as the composite
A
/ B‚Ä≤  m / B where m is mono, then m is actually iso.
Many categories CCC have a mono factorization system where the pseudoepis are the ex-
tremal pseudoepis, as shown by Freyd and Kelly: by Proposition 2.3.4 of (Freyd and Kelly, 1972),
48

this is the case if CCC has all Ô¨Ånite limits and admits intersections of monos (i.e., limits
of all classes of monos ( XŒ±  mŒ± / B )Œ±‚àà‚Ñ¶); or if CCC has all Ô¨Ånite colimits and admits
colimits of all classes of extremal pseudoepis ( B
eŒ± / / YŒ± )Œ±‚àà‚Ñ¶; or if CCC has all Ô¨Ånite
limits, all Ô¨Ånite colimits, and composites of coequalizers are coequalizers. In all these
cases, extremal pseudoepis are in fact epis; in the third case, they are regular, i.e.,
coequalizers of parallel pairs. By the way, the argument of Freyd and Kelly in fact
shows that CCC has a mono factorization system as soon as CCC has pullbacks (not nec-
essarily all limits) and admits non-empty intersections of monos: the factorization of
any given morphism A
f / B is the intersection of the class of all monos mŒ± such
that f factors through mŒ±, i.e., such that f can be written A
eŒ± / CŒ±  mŒ± / B . (In
this case, it is unknown whether pseudoepis are epi.)
While monos in Cpo
Cpo
Cpo are simple to characterize‚Äîthey are just the injective continuous
maps‚Äîextremal epis have a much more complicated structure, which we therefore
elude.
It turns out that we have been unable to show that the functor TTT = U‚àómapped relevant
pseudoepis to pseudoepis, despite our eÔ¨Äorts. We shall see in the next sections that this is
not needed. All we have to do is make C slightly diÔ¨Äerent from CCC, and T slightly diÔ¨Äerent
from TTT.
10.6. Fun With Categories II: Making CCC and C Distinct, e.g., CCC = Cpo
Cpo
Cpo, C = Ord
Ord
Ord
Consider C = Ord
Ord
Ord, the category of partial orders and monotonic maps. There is an
obvious forgetful functor | |0 : Cpo
Cpo
Cpo ‚ÜíOrd
Ord
Ord. In the following, if A ‚äÜB, we write ‚ÜëB A
the subset {x ‚ààB|‚àÉy ‚ààA ¬∑ y ‚â§x}.
In any partial order A, say that a subset is Ô¨Ånitary if and only if it is of the form
‚ÜëA E with E Ô¨Ånite. In the following, we take TA as the space of non-empty Ô¨Ånitary
subsets of A, ordered by reverse inclusion ‚äá. Why should we take this? Well, we have
seen above that the space TTTA = U‚àó(A) could be identiÔ¨Åed with the space of compact
non-empty upward-closed subsets of A, ordered by reverse inclusion. For our construction
to work out, in particular to be able to Ô¨Ånd a suitable monad morphisms, T should in
a sense mimic TTT in the category C. By going from CCC = Cpo
Cpo
Cpo to C = Ord
Ord
Ord, we keep the
ordering but forget about the (Scott-) topology. It turns out that, if we just know about
the ordering ‚â§, there are many possible topologies from which it may arise. Precisely,
there are many topologies with ‚â§as specialization quasi-ordering ‚Äî the one deÔ¨Åned so
that x is less than or equal to y if and only if every open containing x must also contain
y. One is the Scott-topology. The Ô¨Ånest is the AlexandroÔ¨Ätopology, whose opens are
all upward-closed subsets. In all these topologies, the only subsets that are guaranteed
to be compact upward-closed are the Ô¨Ånitary subsets. The latter then intuitively form a
concept similar to the notion of compact upward-closed subsets. This should be checked
formally, by verifying the axioms for monad morphisms, which we do right away.
Note in passing that there is a slightly distinct presentation of TA, as set of Ô¨Ånite
non-empty antichains (sets E where no two distinct elements are comparable), ordered
49

in the Smyth ordering ‚â§‚ôØdeÔ¨Åned by E ‚â§‚ôØE‚Ä≤ if and only if every element of E‚Ä≤ is greater
than or equal to some element of E.
For every map f : A ‚ÜíB, Tf maps the Ô¨Ånitary subset ‚ÜëA {x1, . . . , xn} to ‚ÜëB
{f(x1), . . . , f(xn)}. This deÔ¨Ånes a monad on Ord
Ord
Ord, together with unit
A : A ‚ÜíTA
deÔ¨Åned by
A(x) =‚ÜëA {x}, multiplication
A : T2A ‚ÜíTA deÔ¨Åned by
A(‚ÜëTA {‚ÜëA
E1, . . . , ‚ÜëA En}) =‚ÜëA
Sn
i=1 Ei. This is in fact a commutative monad, with mediator
dA,B : TA √ó TB ‚ÜíT(A √ó B) deÔ¨Åned by
dA,B(‚ÜëA E, ‚ÜëB F) =‚ÜëA√óB (E √ó F). The
corresponding strength maps (x, ‚ÜëB {y1, . . . , ym}) to ‚ÜëA√óB {(x, y1), . . . , (x, ym)}.
The required monad morphism œÉA
0 : T|A|0 ‚Üí|TTTA|0 maps ‚ÜëA E to the function
Œªf ‚àà[A ‚Üí2] ¬∑ E ‚äÜf ‚àí1{1}. (We identify truth with 1, so that E ‚äÜf ‚àí1{1} denotes 1
if true, 0 if false.) The latter function is continuous, because E is Ô¨Ånite, so this indeed
deÔ¨Ånes a map to |TTTA|0. This is clearly natural in A. Let us check the monad morphism
laws (4). First, œÉA
0 ‚ó¶
|A|0 maps x ‚ààA to Œªf ‚àà[A ‚Üí2] ¬∑ {x} ‚äÜf ‚àí1{1} = Œªf ‚àà[A ‚Üí
2] ¬∑ f(x) = |Œ∑Œ∑Œ∑A|0(x). Second, Ô¨Åx an element ‚ÜëTA {‚ÜëA E1, . . . , ‚ÜëA En} in T2|A|0. This is
mapped by TœÉA
0 to ‚Üë|TTT A|0 {Œªf ¬∑ E1 ‚äÜf ‚àí1{1}, . . . , Œªf ¬∑ En ‚äÜf ‚àí1{1}}; then by œÉTTT A
0
to ŒªF ‚àà[TTT A ‚Üí2] ¬∑ ‚àÄi, 1 ‚â§i ‚â§n ¬∑ (Œªf ¬∑ Ei ‚äÜf ‚àí1{1}) ‚äÜF ‚àí1{1} = ŒªF ¬∑ ‚àÄi, 1 ‚â§i ‚â§
n ¬∑ F(Œªf ¬∑ Ei ‚äÜf ‚àí1{1}) = 1; then by |¬µ¬µ¬µA|0 to Œªf ¬∑ ‚àÄi, 1 ‚â§i ‚â§n ¬∑ Ei ‚äÜf ‚àí1{1}. On the
other hand, ‚ÜëTA {‚ÜëA E1, . . . , ‚ÜëA En} is mapped by
A to ‚ÜëA (E1 ‚à™. . .‚à™En), then by œÉA
0
to Œªf ¬∑ E1 ‚à™. . . ‚à™En ‚äÜf ‚àí1{1}, so the diagram on the right of (4) commutes.
We may also check that œÉA
0 is a strong monad morphism. Diagram (36) states that
we may indeed compute the map sending (x, ‚Üë|A2|0 {y1, . . . , ym}) ‚àà|A1|0 √ó T|A2|0 to
Œªf ‚àà[A1 √ó A2 ‚Üí2] ¬∑ {(x, y1), . . . , (x, ym)} ‚äÜf ‚àí1{1} in two diÔ¨Äerent ways.
Now we have at least three mono factorization systems on Ord
Ord
Ord, which are much simpler
as in Cpo
Cpo
Cpo:
1
The trivial mono factorization system, which is, as usual, uninteresting.
2
The epi / regular mono factorization. Here the epis are just the surjective monotone
maps, while the regular monos are embeddings, i.e., maps m such that x ‚â§y if and
only if m(x) ‚â§m(y).
It is not quite obvious that the epis are the surjective monotone maps. Here is a quick
proof of the diÔ¨Écult implication. Assume e epi from A to C. For any two upward-
closed subsets U, V of C, the characteristic functions œáU, œáV : C ‚Üí2 are monotone.
If œáU ‚ó¶e = œáV ‚ó¶e then U = V . In other words, if e(A) ‚à©U = e(A) ‚à©V then U = V .
Consider any z ‚ààC, and build U =‚ÜëC z, V =‚ÜëC (e(A) ‚à©U). It is easy to check that
V ‚äÜU, so e(A) ‚à©V ‚äÜe(A) ‚à©U; the converse inclusion is obvious. So U = V . It
follows that z ‚ààV , i.e., there is an element z‚Ä≤ ‚â§z such that z‚Ä≤ ‚ààe(A)‚à©‚ÜëC z, whence
z ‚ààe(A).
The factorization of A
f / B goes through the middle object C deÔ¨Åned as the image
f(A) of A by f, equipped with the ordering inherited from B.
This is a monoidal mono factorization (condition (iii.a)): the product of two surjective
monotone maps e1 : A1 ‚ÜíC1 and e2 : A2 ‚ÜíC2 is clearly again surjective.
Condition (vi), that
A preserves regular monos, is obvious from the remark that
A
is a right-adjoint, so it preserves limits, in particular equalizers.
It remains to show that T preserves epis (condition (iv)). Fix an epi e from A to B in
50

Ord
Ord
Ord. It is clear that every ‚ÜëB {y1, . . . , yn} ‚ààTB is the image of ‚ÜëA {x1, . . . , xn} ‚ààTA
by Te, where for each i, xi is any element such that e(xi) = yi. So Te is surjective,
that is, epi.
3
The extremal epi / mono factorization. The monos are just the injective monotone
maps, while the extremal epis are the quotient maps. A quotient map A
q / / C is
by deÔ¨Ånition the map sending x ‚ààA to its equivalence class in C = A/‚â°, for some
equivalence relation ‚â°on A. (This is up to post-composition with an iso, naturally.)
The ordering on C is then given as the smallest transitive relation ‚â§C such that x ‚â§y
in A implies q(x) ‚â§C q(y) in C. Equivalently, q is a quotient map if and only if it is
surjective and, for every subset V of C, V is upward-closed in C if and only if q‚àí1(V )
is upward-closed in A. The factorization of A
f / B goes through the middle object
C deÔ¨Åned as the image f(A) of A by f, equipped with the ordering ‚â§C deÔ¨Åned as
the smallest transitive relation such that x ‚â§y in A implies f(x) ‚â§C f(y) in C.
This is also a monoidal mono factorization (condition (iii.a)): if q1 : A1 ‚ÜíA1/‚â°1 and
q2 : A2 ‚ÜíA2/‚â°2 are quotient maps, then q1 √ó q2 is the quotient map from A1 √ó A2
to (A1 √ó A2)/‚â°, where (x1, x2) ‚â°(y1, y2) if and only if x1 ‚â°1 y1 and x2 ‚â°y2.
T also preserves extremal epis (condition (iv)). Indeed, let q : A ‚ÜíC be an extremal
epi, that is, a quotient map, for some equivalence relation ‚â°on A. In particular,
C = A/‚â°. By construction, q(x) ‚â§q(x‚Ä≤) if and only if x(‚â§‚à™‚â°)‚àóy, where (‚â§‚à™‚â°)‚àó
is the reÔ¨Çexive transitive closure of the union of the two relations ‚â§and ‚â°. For any
y ‚ààC, let x be any element such that q(x) = y. To show that Tq is quotient, we must
show that for any subset U of TC, if (Tq)‚àí1(U) is upward-closed then so is U. Let
‚ÜëC {y1, . . . , ym} be an element of TC, and ‚ÜëC {y‚Ä≤
1, . . . , y‚Ä≤
n} any larger element (wrt.
‚äá, i.e., a smaller subset). We may assume without loss of generality that {y1, . . . , ym}
and {y‚Ä≤
1, . . . , y‚Ä≤
n} are antichains, and that {y1, . . . , ym} ‚â§‚ôØ
C {y‚Ä≤
1, . . . , y‚Ä≤
n}: for each j,
1 ‚â§j ‚â§n, there is i, 1 ‚â§i ‚â§m, such that yi ‚â§C y‚Ä≤
j. Since q is surjective, write
yi = q(xi), y‚Ä≤
j = q(x‚Ä≤
j). In particular: (‚àó) for each j there is i such that xi(‚â§‚à™‚â°)‚àóx‚Ä≤
j.
Then (Tq)‚àí1(‚ÜëC {y1, . . . , ym}) is the set of elements x ‚ààA such that xi(‚â§‚à™‚â°)‚àóx
for some i, 1 ‚â§i ‚â§m. Similarly, (Tq)‚àí1(‚ÜëC {y‚Ä≤
1, . . . , y‚Ä≤
n}) is the set of elements
x ‚ààA such that x‚Ä≤
j(‚â§‚à™‚â°)‚àóx for some j, 1 ‚â§j ‚â§n. By (‚àó) above, every such x is
also such that xi(‚â§‚à™‚â°)‚àóx for some i, 1 ‚â§i ‚â§m. So (Tq)‚àí1(‚ÜëC {y1, . . . , ym}) con-
tains (Tq)‚àí1(‚ÜëC {y‚Ä≤
1, . . . , y‚Ä≤
n}). Since (Tq)‚àí1(U) is upward-closed (for the ‚äáordering),
(Tq)‚àí1(‚ÜëC {y‚Ä≤
1, . . . , y‚Ä≤
n}) must also be in (Tq)‚àí1(U), that is, ‚ÜëC {y‚Ä≤
1, . . . , y‚Ä≤
n} is in U.
So U is upward-closed, and Tq is therefore quotient.
Explicitly, one can show that the equivalence relation ‚â°‚Ä≤ deÔ¨Åned by the quotient map
Tq on TA, that is the relation deÔ¨Åned by ‚ÜëA {x1, . . . , xm} ‚â°‚Ä≤‚ÜëA {x‚Ä≤
1, . . . , x‚Ä≤
n} if and
only if Tq(‚ÜëA {x1, . . . , xm}) = Tq(‚ÜëA {x‚Ä≤
1, . . . , x‚Ä≤
n}), can be deÔ¨Åned equivalently by:
for every i there is j such that xi(‚â§‚à™‚â°)‚àóx‚Ä≤
j, and for every j there is i such that
x‚Ä≤
j(‚â§‚à™‚â°)‚àóxi.
This much gives us an instance of our construction for logical predicates, i.e., logical
relations of arity one. As for the Set
Set
Set example, binary predicates are obtained by letting
CCC be Cpo
Cpo
Cpo √ó Cpo
Cpo
Cpo, keeping C = Ord
Ord
Ord, deÔ¨Åning |A1, A2| = A1 √ó A2, TTT as T √ó T, and the
monad morphism œÉA1,A2 by œÉA1,A2(‚ÜëA1√óA2 {(x1, y1), . . . , (xm, ym)}) = (Œªf1 ‚àà[A1 ‚Üí
51

2] ¬∑ {x1, . . . , xm} ‚äÜf ‚àí1
1 {1}, Œªf2 ‚àà[A2 ‚Üí2] ¬∑ {y1, . . . , ym} ‚äÜf ‚àí1
2 {1}). Take for mediat-
ing pair
A1,A2,B1,B2 : |A1, A2| ‚äó|B1, B2| ‚Üí|(A1, A2) √ó (B1, B2)| deÔ¨Åned as mapping
((x1, x2), (y1, y2)) to ((x1, y1), (x2, y2)), and the obvious morphism
i : 1 ‚Üí|1|. Then
checking that œÉ is a strong monad morphism presents no diÔ¨Éculty.
Let‚Äôs now look at the form of the binary logical relations we get in this setting, de-
pending on the mono factorization system we consider.
Epi / regular mono factorization, binary case. In this setting, a binary relation
S 
m/ A1 √ó A2 between A1 and A2 is just a subset S of A1√óA2, up to iso. The ordering
on S is inherited from that on A1 √ó A2.
Given such a subset S ‚äÜA1 √ó A2, with inclusion embedding m, our construction Ô¨Årst
builds œÉA1,A2 ‚ó¶Tm: this maps any Ô¨Ånitary subset ‚ÜëS {(x1, y1), . . . , (xm, ym)} ‚ààTS (i.e.,
where (xi, yi) ‚ààS for every i) to (Œªf1 ‚àà[A1 ‚Üí2] ¬∑ {x1, . . . , xm} ‚ààf ‚àí1
1 {1}, Œªf2 ‚àà[A1 ‚Üí
2] ¬∑ {y1, . . . , ym} ‚ààf ‚àí1
2 {1}). Then factor this arrow through an object eS, which embeds
into TTTA1 √óTTTA2: eS is the subset of all (F1, F2) ‚ààTTT A1 √óTTTA2 such that there are Ô¨Ånitely
many pairs of related elements (x1, y1) ‚ààS, . . . , (xm, ym) ‚ààS having the property that
F1(f1) = 1 if and only if f1 maps every xi to 1, and F2(f2) = 1 if and only if f2 maps
every yi to 1.
Extremal epi / mono factorization, binary case. In this framework, and up to
iso, a binary relation S 
m/ A1 √ó A2 between A1 and A2 is again a subset S of A1√óA2,
together with an ordering ‚™Øsuch that (x1, x2) ‚™Ø(y1, y2) implies x1 ‚â§y1 and x2 ‚â§y2.
Call (S, ‚™Ø) a sub-order of A1 √ó A2.
Given such a sub-order, it can be checked that eS relates exactly the same func-
tions as with the epi / regular mono factorization. Only the ordering on eS changes:
instead of being inherited from that on TTTA1 √ó TTTA2, it is the ordering ‚â§C deÔ¨Åned
above, with C = eS. In other words, ‚â§e
S is the smallest transitive relation such that
(Œªf1 ‚àà[A1 ‚Üí2] ¬∑ {x1, . . . , xm} ‚ààf ‚àí1
1 {1}, Œªf2 ‚àà[A1 ‚Üí2] ¬∑ {y1, . . . , ym} ‚ààf ‚àí1
2 {1}) ‚â§e
S
(Œªf1 ‚àà[A1 ‚Üí2] ¬∑ {x‚Ä≤
1, . . . , x‚Ä≤
n} ‚ààf ‚àí1
1 {1}, Œªf2 ‚àà[A1 ‚Üí2] ¬∑ {y‚Ä≤
1, . . . , y‚Ä≤
n} ‚ààf ‚àí1
2 {1}) when-
ever ‚ÜëS{(x1, y1), . . . , (xm, ym)} ‚äá‚ÜëS{(x‚Ä≤
1, y‚Ä≤
1), . . . , (x‚Ä≤
n, y‚Ä≤
n)}, that is whenever for every j,
1 ‚â§j ‚â§n, there is an i, 1 ‚â§i ‚â§m, such that (xi, yi) ‚™Ø(x‚Ä≤
j, y‚Ä≤
j).
We now make two remarks.
Remark. Comparing the eÔ¨Äect of the two mono factorizations above, it is clear that
they deÔ¨Åne exactly the same relations, i.e., the same sets underlying the space eS. The
two constructions only diÔ¨Äer in the orderings on eS. This is due to the fact that the set
underlying the middle object C in a factorization A
e / / C 
m / B of a map f : A ‚ÜíB
is the image of A under f in both cases. This need not be the case in all categories, see
the epi / regular mono case in Cpo
Cpo
Cpo (Section 10.5).
Remark. The binary relation eS that we got above, for whichever of the two mono
factorizations we examined, is a bit disappointing. Indeed, it only relates functionals of
the form Œªf ‚àà[A ‚Üí2] ¬∑ {x1, . . . , xm} ‚ààf ‚àí1{1}, where A is A1 or A2; equivalently, of
the form Œªf ‚àà[A ‚Üí2] ¬∑ ‚àÄi ¬∑ f(xi) = 1. The latter only encodes Ô¨Ånite non-deterministic
choice, among x1, . . . , xm, while elements of TTTA encode general non-deterministic choice,
typically among the elements of a compact saturated subset, which is not necessarily
Ô¨Ånitary. eS does not relate any element of TTTA to any other, unless it encodes Ô¨Ånite non-
52

determinism. The core of the problem is our choice of the category C as Ord
Ord
Ord, which keeps
all ordering information, but forgets about all continuity properties.
10.7. Fun With Categories III: The Case CCC = FS
FS
FS, C = T op
T op
T op
This can be repaired by choosing another category for C, which will keep all necessary
information related to continuity. The obvious choice is T op
T op
T op, the category of topological
spaces. One of the novelties here is that for one choice of mono factorization, the pseu-
doepis won‚Äôt be surjective maps. Another one is that we shall see cases where T maps
relevant pseudoepis to pseudoepis but does not preserve pseudoepis.
Before we delve into the subject proper, we must note that choosing C = T op
T op
T op incurs
several problems.
First, T op
T op
T op is not cartesian closed. This is not too serious. We can for example deÔ¨Åne a
logical relation at arrow types œÑ1 ‚ÜíœÑ2 that would be deÔ¨Åned only when the denotation of
œÑ1 is exponentiable. Recall that a topological space X is exponentiable if and only if the
exponential object Y X exists for every topological space Y . It is well-known that the ex-
ponentiable spaces are exactly the core-compact spaces (Escard¬¥o and Heckmann, 2002),
i.e., those whose lattice of opens is continuous. In particular, every continuous cpo is
locally compact, hence core-compact, when seen as a topological space. Another possi-
bility is to replace T op
T op
T op by one of its cartesian-closed subcategories T op
T op
T opC, of which there
are many: Day‚Äôs Theorem indeed states that, given any class C of topological spaces,
the category T op
T op
T opC of so-called C-generated spaces, with continuous maps as morphisms,
is cartesian-closed as soon as C is a productive class. See (Escard¬¥o et al., 2004) for de-
tails. Examples of productive classes include continuous cpos (domain generated spaces),
or compact spaces (compactly generated spaces). In all these cases, T op
T op
T opC is coreÔ¨Çective
in T op
T op
T op, meaning that there is a functor C : T op
T op
T op ‚ÜíT op
T op
T opC that is right adjoint to the
inclusion functor ‚äÜfrom T op
T op
T opC into T op
T op
T op. This immediately implies that any mono fac-
torization system on T op
T op
T op transports to one on T op
T op
T opC: if A
f / B in T op
T op
T opC factors as
A
e / / C 
m / B in T op
T op
T op, then it factors as A
e/ / C(C)  m
/ B in T op
T op
T opC, and m is
clearly again a mono in T op
T op
T opC. Since product √óC in T op
T op
T opC is given by A √óC B = C(A √ó B)
(Escard¬¥o and Heckmann, 2002, Section 5), the adjunction ‚äÜ‚ä£C is monoidal: C preserves
product on the nose. It follows that we can transport a strong monad on T op
T op
T op to one on
T op
T op
T opC, gaining a cartesian-closed structure along the way.
We will refrain from doing so explicitly, since we wouldn‚Äôt learn much. We shall there-
fore concentrate on the T op
T op
T op case. Note in passing that, taking C consisting of just the
Sierpi¬¥nski space 2, T op
T op
T opC will be the category of AlexandroÔ¨Äspaces (Escard¬¥o and Heckmann, 2002,
Example (2)), which is equivalent to Ord
Ord
Ord; in other words, taking C = {2} gives back the
construction of Section 10.6.
Second, the product of cpos in T op
T op
T op does not coincide with their product in Cpo
Cpo
Cpo.
Precisely, any cpo A deÔ¨Ånes a topological space |A|, where A is equipped with its Scott
topology. But the product topology, i.e., that of |A| √ó |B|, is in general strictly coarser
than the Scott topology on the product, i.e., the topology on |A √ó B|. The obvious
choice of mediating morphism
A,B : |A| √ó |B| ‚Üí|A √ó B|, namely the identity map, will
53

therefore fail to be continuous in general. We repair this by considering CCC to be some
cartesian-closed subcategory of continuous cpos, instead of the whole of Cpo
Cpo
Cpo. Indeed,
in this case it is well-known that the Scott topology and the product topologies agree:
|A| √ó |B| = |A √ó B|.
There are many choices for CCC, then. The Ô¨Årst, historically, is the category of Scott
domains, i.e., algebraic bounded-complete cpos. Other candidates are Jung‚Äôs category
FS
FS
FS of FS-domains, or that cL
cL
cL of continuous L-domains (Jung, 1990). We observe that
TTTA is an FS-domain as soon as A is, because TTTA is a closed subset of [[A ‚Üí2] ‚Üí2],
and closed subsets of FS-domains are again FS-domains. So TTT deÔ¨Ånes a monad on FS
FS
FS.
We shall therefore use CCC = FS
FS
FS is the rest of this section. It won‚Äôt be necessary to know
exactly what FS-domains really are. The interested reader is refered to (Jung, 1990).
We take the corresponding monad T on C = T op
T op
T op as follows. Let TA be the set of
continuous linear non-trivial second-order predicates on A, just as TTTA, but equipped
with the weak topology instead of the Scott topology. The weak topology is the topology
generated by the basis of opens 2O = {F ‚ààTA|F(œáO) = 1}, where œáO is the indicator
function of the open O of A. Note in passing that any f ‚àà[A ‚Üí2] must be of the form
œáO for some open O of A. Our choice of the weak topology is justiÔ¨Åed by the fact that
T will preserve pseudoepis (condition (iv)), see below.
The weak topology is in general coarser than the Scott topology, which thwarts the
existence of a monad morphism œÉA : T|A| ‚Üí|TTTA|. (The identity map does not Ô¨Åt, as it
would fail to be continuous.) However, when A is a continuous cpo, the two topologies
coincide‚Äîanother good reason to take CCC to consist solely of continuous cpos. The classical
argument is as follows. Since TTT A is a continuous cpo, its Scott topology has a basis
consisting of opens of the form ‚Üë‚ÜëF, where F ‚ààTTTA, ‚Üë‚ÜëF = {G ‚ààTTTA|F ‚â™G}, and
‚â™is the usual way-below relation: F ‚â™G if and only if every directed family whose
supremum is above G contains an element above F. By the HoÔ¨Äman-Mislove theorem,
we may equate linear functionals with upward-closed compacts, and then Q ‚â™Q‚Ä≤ if and
only if the interior
‚ó¶
Q of Q contains Q‚Ä≤. Then ‚Üë‚ÜëQ = {Q‚Ä≤|Q‚Ä≤ ‚äÜ
‚ó¶
Q} = 2
‚ó¶
Q is a weak open.
It follows that, when A is continuous, the identity map from T|A| to |TTTA| is continuous,
and therefore deÔ¨Ånes a monad morphism from TTT to T.
Now we have at least four mono factorization systems on T op
T op
T op:
1
The trivial mono factorization system, which is, as usual, uninteresting.
2
The epi / regular mono factorization. This is close to the corresponding one in Cpo
Cpo
Cpo
or in Ord
Ord
Ord: regular monos are embeddings of closed subsets (i.e., m : C 
/ B is a
regular mono if and only if m is a homeomorphism onto a closed subset of B), and
epis are continuous maps with dense image. Note that e : A ‚ÜíC is epi if and only
if C equals the closure of e(A) in C, or equivalently, e‚àí1(V ) is non-empty for every
non-empty open V of C.
3
The extremal epi / mono factorization. This is much simpler to describe as in Cpo
Cpo
Cpo,
and is similar to Ord
Ord
Ord. The monos are just the injective continuous maps, while the
extremal epis are the quotient maps. A quotient map A
q / / C is by deÔ¨Ånition the
map sending x ‚ààA to its equivalence class in C = A/‚â°, for some equivalence relation
‚â°on A. (Again, up to postcomposition with isos.) Equivalently, q is a quotient map
54

if and only if q is surjective and, for every subset V of C, V is open in C if and only
if q‚àí1(V ) is open in A.
4
What we shall call the intermediate mono factorization: the pseudoepis are the con-
tinuous surjective maps, and the relevant monos are the embeddings of subspaces
(i.e., m : C 
/ B is an embedding, that is, a homeomorphism onto some subspace,
not necessarily closed, of B).
All of these are candidates for our construction. As usual, the main property to check
is that T should preserve pseudoepis, or at least map relevant pseudoepis to pseudoepis.
Epi / regular mono factorization. Let e be a pseudoepi from A to C, that is, an
epi: for every non-empty open V of C, e‚àí1(V ) is non-empty. It suÔ¨Éces to show that
Te‚àí1(2O) is non-empty for any non-empty open O of C. (This is the point in choosing
to equip TC with the weak topology.) Now Te‚àí1(2O) is the set of all F ‚ààTA such
that Œªf ‚àà[C ‚Üí2] ¬∑ F(f ‚ó¶e) is in 2O, i.e., such that F(œáO ‚ó¶e) = 1, or equivalently
F(œáe‚àí1(O)) = 1. By assumption, e‚àí1(O) is non-empty: let x ‚ààe‚àí1(O), then F =
A(x) =
Œªf ‚àà[A ‚Üí2] ¬∑ f(x) is in Te‚àí1(2O).
Condition (iv) obtains. We also have to check condition (iii.a), that this mono fac-
torization system is monoidal. But products of epis are always epi, so this is clear.
Intermediate mono factorization. Here pseudoepis are surjective continuous maps.
This is one case where T does not preserve pseudoepis. Take A = N with the discrete
topology, and C = N with the coÔ¨Ånite topology, whose opens are ‚àÖand all complements
of Ô¨Ånite sets of integers. Now consider e : A ‚ÜíC the identity map. Since the topology of
A is Ô¨Åner than that of C, e is continuous; e is also clearly surjective. We claim that Te is
not surjective. It is an easy exercise to show that the elements of TA are all of the form
Œªf ‚àà[A ‚Üí2] ¬∑ E ‚äÜf ‚àí1{1}, where E is some Ô¨Ånite non-empty subset of A. (And this
comes from free if we consider that A is sober, from the correspondence between TA and
Q(A), and the fact that the upward-closed compacts of A are the Ô¨Ånite subsets E of A.)
Now consider the functional G ‚ààTC that maps f ‚àà[C ‚Üí2] to 1 if f is not identically
0, and maps the zero function to 0. G is trivially continuous, and preserves ‚ä§. That
G preserves binary inÔ¨Åma rests on the fact that the intersection of any two non-empty
opens is again non-empty in C. Assume now that G is the image by Te of some functional
Œªf ‚àà[A ‚Üí2]¬∑E ‚äÜf ‚àí1{1}, in other words, G = Œªg ‚àà[C ‚Üí2]¬∑E ‚äÜ(g ‚ó¶e)‚àí1{1}. For any
integer n ‚ààN, G(œáC\{n}) = 1, so E cannot contain n; i.e., E is empty, a contradiction.
However, T maps relevant pseudoepis to pseudoepis. The crucial, albeit trivial, obser-
vation is:
Fact 10.1. If T preserves relevant monos and œÉA is a relevant mono, then all relevant
pseudoepis are iso. In particular, T maps relevant pseudoepis to isos, hence to pseudoepis.
Indeed, a relevant pseudoepi is the pseudoepi part of the factorization of œÉA ‚ó¶Tm, where
m is a relevant mono. Since by assumption œÉA ‚ó¶Tm is a relevant mono, we conclude by
uniqueness of factorizations up to iso.
In our case, œÉA is the identity map between T|A| and |TTTA|; remember these two
coincide because the Scott topology agrees with the weak topology on continuous cpos.
It remains to show that Tm is a relevant mono as soon as m : C ‚ÜíB is. Remember
55

that a relevant mono m is a homeomorphism onto its image, i.e., an injective, continuous
and open map. Tm is continuous. It is injective, too: if Tm(F) = Tm(F ‚Ä≤), then for
every open O‚Ä≤ of A, F(œá0‚Ä≤ ‚ó¶m) = F ‚Ä≤(œá0‚Ä≤ ‚ó¶m). In particular, for every open O of C,
taking O‚Ä≤ = m(O) (since m is an open map), F(œám(O) ‚ó¶m) = F ‚Ä≤(œám(O) ‚ó¶m). Now
œám(O) ‚ó¶m = œám‚àí1(m(O)) = œáO since m is injective, so F(œá0) = F ‚Ä≤(œáO): so F = F ‚Ä≤.
Finally, Tm is open. Since 2O ‚à©2O‚Ä≤ = 2(O ‚à©O‚Ä≤), the sets 2O form a basis of the weak
topology, that is, every open subset of TC is a union S
i‚ààI 2Oi. It is easy to check that
Tm(S
i‚ààI 2Oi) equals S
i‚ààI 2m(Oi), which is clearly open. So Tm is a relevant mono.
We have therefore established condition (iv): T maps relevant pseudoepis to pseu-
doepis, although T does not map pseudoepis to pseudoepis.
To lift the cartesian structure to the subscone, we also have to check condition (iii.a),
that this mono factorization system is monoidal. This is again clear: the product of two
surjective continuous maps is again surjective and continuous.
Extremal epi / mono factorization. Since T does not preserve surjective maps,
it is unlikely that it will preserve extremal epis. Moreover, Fact 10.1 does not apply,
since T does not preserve injective maps. Take indeed m : C ‚ÜíB be the identity from
C = N with the discrete topology, to B = N with its AlexandroÔ¨Ätopology. Then Tm
maps Œªf ¬∑{2} ‚äÜf ‚àí1{1} and Œªf ¬∑{2, 3} ‚äÜf ‚àí1{1} to the same element Œªg ¬∑{2} ‚äÜg‚àí1{1},
because for any AlexandroÔ¨Ä-continuous (i.e., monotone) function g : B ‚Üí2, g(2) = 1 if
and only if g(2) = g(3) = 1.
Let us now consider the form of binary logical relations in the above topological set-
tings. Again, we look at each available mono factorization. We will not consider the
extremal epi / mono factorization. We will in fact also avoid the intermediate mono
factorization system. In the intermediate system, T does not preserve pseudoepis, and
Fact 10.1 does not apply, because œÉA1,A2 will not be a relevant mono in general.
In the binary case, |A1, A2| = A1 √ó A2 (there is no ambiguity in writing √ó here,
as products of continuous cpos coincide with topological products), and for every FS-
domains A1 and A2, œÉA1,A2 maps F ‚ààT(A1 √ó A2) to the pair of maps Œªf1 ‚àà[A1 ‚Üí
2] ¬∑ F(f1 ‚ó¶œÄ1) and Œªf2 ‚àà[A2 ‚Üí2] ¬∑ F(f2 ‚ó¶œÄ2). Here œÄ1 and œÄ2 denote Ô¨Årst and second
projections, respectively.
Epi / regular mono factorization, binary case. A binary relation S 
m/ A1 √ó A2
between A1 and A2 is, up to iso, a closed subset S of A1 √ó A2. It is easy to check that
our construction builds a lifted relation eS between TA1 and TA2 deÔ¨Åned by (F1, F2) ‚ààeS
if and only if (F1, F2) is in the closure of the set
eS0
=
(
(G1, G2) ‚ààTA1 √ó TA2|‚àÉG ‚ààTS ¬∑
(63)
‚àÄf1 ‚àà[A1 ‚Üí2] ¬∑ G1(f1) = G(Œª(x1, x2) ‚ààS ¬∑ f1(x1))
‚àß‚àÄf2 ‚àà[A2 ‚Üí2] ¬∑ G2(f2) = G(Œª(x1, x2) ‚ààS ¬∑ f2(x2))
)
It is easier to understand this through the Hofmann-Mislove isomorphism. Any element
Gi of TAi can be written as ŒªœáO ¬∑ Qi ‚äÜO for some non-empty compact upward-closed
56

subset Qi of Ai, i = 1, 2. Similarly G corresponds to some non-empty compact upward-
closed subset Q of S. The condition ‚àÄf1 ‚àà[A1 ‚Üí2] ¬∑ G1(f1) = G(Œª(x1, x2) ‚ààS ¬∑ f1(x1))
is then equivalent to: for every open subset O1 of A1, Q1 ‚äÜO1 if and only if Q ‚äÜ
(O1√óA2)‚à©S. Since the upward-closed subsets of a topological space are exactly those that
are the intersection of all opens containing them, this is equivalent to Q ‚äÜ(Q1 √óA2)‚à©S.
Summing this up,
eS0
=
{(ŒªœáO ¬∑ Q1 ‚äÜO, ŒªœáO ¬∑ Q2 ‚äÜO)|
‚àÉQ non-empty compact upward-closed subset of S ¬∑ Q ‚äÜ(Q1 √ó Q2) ‚à©S}
By TychonoÔ¨Ä‚Äôs Theorem, Q1 √ó Q2 is compact, so (Q1 √ó Q2) ‚à©S is compact since S is
closed. Since Q1 √ó Q2 is upward-closed in A1 √ó A2, (Q1 √ó Q2) ‚à©S is upward-closed in S,
so in fact eS0 consists of those pairs (ŒªœáO ¬∑Q1 ‚äÜO, ŒªœáO ¬∑Q2 ‚äÜO) such that (Q1 √óQ2)‚à©S
is non-empty. In other words, and up to the Hofmann-Mislove Theorem, eS0 relates those
compacts Q1 and Q2 such that Q1 contains an element x1 and Q2 contains x2 so that
(x1, x2) are related by S.
Remember, then, that eS is the topological closure of eS0. However, we claim that eS0 is
closed in the weak topology. To show this, it is enough to show that eS0 is Scott-closed,
since the weak topology and the Scott topology coincide on TA for any continuous
cpo A. First, eS0 is downward-closed (with respect to the product ‚äá√ó ‚äáof reversed
inclusion). Second, if (Q1i, Q2i), i ‚ààI, forms a directed family (wrt. ‚äá) of pairs of
non-empty compact upward-closed subsets such that (Q1i √ó Q2i) ‚à©S Ã∏= ‚àÖfor all i, we
note that ((Q1i √ó Q2i) ‚à©S)i‚ààI forms a directed family of non-empty compact subsets of
A1 √ó A2, because S is closed in A1 √ó A2. Since A1 √ó A2 is sober, its least upper bound
(its intersection) is again non-empty and compact, see e.g., (Abramsky and Jung, 1994,
Corollary 7.2.11). It follows that
 T
i‚ààI Q1i √ó T
i‚ààI Q2i

‚à©S = T
i‚ààI(Q1i √óQ2i)‚à©S, so the
least upper bound T
i‚ààI Q1i√óT
i‚ààI Q2i is again in eS0. We conclude that eS0 is Scott-closed,
hence closed, so that eS = eS0.
Note that eS does not have the form of a bisimulation relation; rather, Q1 and Q2 are
related by eS if and only if Q1 and Q2 have related reÔ¨Ånements, where a reÔ¨Ånement x of
a compact Q is an element x ‚ààQ, i.e., if ‚Üëx is an element above Q in Q(X).
Transposing this back to the realm of functionals, we see that (G1, G2) ‚ààeS if and only
if there is a reÔ¨Ånement x1 of G1, i.e., an element x1 of A1 such that G1 ‚â§
A1(x1), and
a reÔ¨Ånement x2 of G2 such that (x1, x2) ‚ààS.
It would have been tempting to guess that eS would be characterized by the following
relation bbS, in the style of observational equivalence. DeÔ¨Åne bS as the set of all (f1, f2) such
that whenever (x1, x2) ‚ààS then f1(x1) = f2(x2); then bbS is the set of (G1, G2) such that
whenever (f1, f2) ‚ààbS, G1(f1) = G2(f2). Clearly, (G1, G2) ‚ààeS0 implies (G1, G2) ‚ààbbS.
However, the converse does not seem to hold.
57

10.8. Fun With Categories IV: Metric Spaces
Among the degrees of freedom aÔ¨Äorded by our constructions, observe that we have the
option to consider categories that are not cartesian-closed, but, say, just symmetric
monoidal closed.
The categories of ultrametric spaces, and of complete ultrametric spaces, are cartesian-
closed. It is even possible to equip these categories with a probability monad. The main
diÔ¨Éculty is to show that the space of all probability measures on an ultrametric space can
be equipped with a distance that makes it ultrametric. See (de Vink and Rutten, 1999,
Lemma 4.3). Let us take the stance of working inside the larger category Met
Met
Met of metric
spaces‚Äîfor whatever practical reason. Our reason is to provide an example: we wish to
show how our construction works on the symmetric monoidal closed, but not cartesian-
closed, category Met
Met
Met.
Precisely, we consider the category Met
Met
Met of metric spaces and non-expansive maps. We
write dA for the distance on A, and allow distances to take the value +‚àû. (This is as in
(Lawvere, 1973), who considers additional relaxations on the notion of distance.) In other
words, a distance dA on A is any function from A to R+ ‚à™{+‚àû}, such that dA(x, y) = 0
if and only if x = y, for every x, y ‚ààA; dA(x, y) = dA(y, x) for every x, y ‚ààA; and
dA(x, z) ‚â§dA(x, y) + dA(y, z) for every x, y, z ‚ààA. A map f is non-expansive from A to
B if and only if dB(f(x), f(x‚Ä≤)) ‚â§dA(x, x‚Ä≤) for every x, x‚Ä≤ ‚ààA.
Every metric space A has a topology, generated by its open balls B(x, «´) = {y|dA(x, y) <
«´}, for which it is HausdorÔ¨Ä. There is a cartesian product on Met
Met
Met: A √ó B is the set
of pairs (x, y), x ‚ààA, y ‚ààB, with distance dA√óB deÔ¨Åned by dA√óB((x, y), (x‚Ä≤, y‚Ä≤)) =
max(dA(x, x‚Ä≤), dB(y, y‚Ä≤)). There is no corresponding notion of exponential.
On the other hand, Met
Met
Met is symmetric monoidal closed. The tensor product A‚äó‚äó‚äóB is the
set of pairs (x, y), x ‚ààA, y ‚ààB, with distance dA‚äó
‚äó
‚äóB deÔ¨Åned by dA‚äó
‚äó
‚äóB((x, y), (x‚Ä≤, y‚Ä≤)) =
dA(x, x‚Ä≤) + dB(y, y‚Ä≤). The exponential CB is the set of non-expansive maps f from B to
C, with distance dCB(f, f ‚Ä≤) = supx‚ààB dC(f(x), f ‚Ä≤(x)). (This is well-deÔ¨Åned because we
allow distances to take the value +‚àû.) The underlying topology of A ‚äó‚äó‚äóB, as well as of
A √ó B, is the product topology of A and B.
As far as monads are concerned, we shall look at the probability monad on Met
Met
Met. I.e., we
consider general, not just discrete probabilities. This will provide a non-trivial example
of our construction. A measure on A is by convention a measure on the Borel œÉ-algebra
of its topology. A probability measure maps A to 1. A natural choice for a probability
monad M1 on Met
Met
Met is to let M1(A) be the set of all probability measures on A, equipped
with the Hutchinson metric:
dTTT A(ŒΩŒΩŒΩ,ŒæŒæŒæ) =
sup
g‚ààMet
Met
Met(A,[0,1])

Z
x‚ààA
g(x)dŒΩŒΩŒΩ ‚àí
Z
x‚ààA
g(x)dŒæŒæŒæ

making M1(A) a metric space. (Some call it the Kantorovitch metric; one may also call
it the L1 metric.) It can be checked that M1 gives rise to a monoidal monad. We skip
the details.
Now take C = CCC = Met
Met
Met. There is a natural epi-mono factorization on Met
Met
Met: relevant
monos are isometric embeddings, that is, maps m : C ‚ÜíB such that dB(m(x), m(y)) =
58

dC(x, y) for all x, y ‚ààC. Pseudoepis from A to C are surjective non-expansive maps from
A to C. It is fairly easy to see that this yields a monoidal mono factorization system on
Met
Met
Met.
It is then tempting to choose T and TTT to be M1, but this would expose some diÔ¨Écul-
ties. Indeed, we know that M1 preserves pseudoepis (condition (iv)), that is, surjective
non-expansive maps, in some cases but not in general. E.g., if f is continuous surjec-
tive from A to B, and both A and B are compact HausdorÔ¨Ä, then M1(f) is surjective
(Bourbaki, 1969, 2.4, Lemma 1); similarly if the underlying topological space of A is an
analytic space (Bourbaki, 1969, 2.4, Proposition 9).
Instead, we choose T as a continuation-like monad that is as close to M1 as possible.
(Remember the Q and U‚àómonads in T op
T op
T op.) Let Cb(A) be the vector space of all bounded
non-expansive functions from the metric space A to R, with the sup norm: for all g ‚àà
Cb(A), ||g|| = supx‚ààA |g(x)|. Let LA be the vector space of all continuous linear forms
on Cb(A), that is, of all continuous linear functions F : Cb(A) ‚ÜíR. Recall that a linear
function F from Cb(A) to R is continuous if and only if it is Lipschitz, i.e., if and only if
||F|| = sup||g||=1 |F(g)| is a well-deÔ¨Åned real (i.e., not +‚àû). Then ||F|| is called the norm
of F. Let L1
A be the subset of those F in LA of norm 1. Finally, let TA be the subset of
those F in L1
A which are positive, i.e., such that g ‚â•0 implies F(g) ‚â•0. Both L1
A and
TA inherit the distance on LA that is induced by norm. Equivalently, TA is a metric
space whose distance is deÔ¨Åned by dTA(F, G) = supg‚ààMet
Met
Met(A,[‚àí1,1]) |F(g) ‚àíG(g)|. T then
deÔ¨Ånes an endofunctor on Met
Met
Met by letting Tf map F ‚ààTA to Œªg ‚ààCb(B) ¬∑ F(g ‚ó¶f), for
every non-expansive map f from A to B.
The space M1(A) of all probability measures on A embeds in TA by ŒΩŒΩŒΩ 7‚ÜíŒªg ‚àà
Cb(A) ¬∑
R
x‚ààA g(x)dŒΩŒΩŒΩ. In fact, the distance on probability measures on A inherited from
the metric structure on TA is a slight variant of the Hutchinson metric introduced above.
Moreover, if A is compact, then every element of TA arises from a probability measure
in this way, by the Riesz Representation Theorem. This makes TA a metric space that
is arguably close enough to a space of probability measures.
The point of this deÔ¨Ånition of T is that T preserves pseudoepis in Met
Met
Met. The proof is
similar to that of (Bourbaki, 1969, 2.4, Lemma 1).
Lemma 10.2. If f is any surjective non-expansive map from A to B, then Tf is surjective
from TA to TB.
Proof. Let Œªf be the function mapping g ‚ààCb(B) to g ‚ó¶f. Note that Œªf(g) is bounded
and non-expansive, hence in Cb(A). Also, ||Œªf(g)|| = supx‚ààA |g(f(x))| = supy‚ààB |g(y)|
(since f is surjective) = ||g||, so that Œªf is an isometric embedding of Cb(B) into Cb(A).
Let H be the range of Œªf in Cb(A). H is a linear subspace of Cb(A), which is by
construction isometrically isomorphic to Cb(B). In particular, Œª‚àí1
f
is a continuous linear
map from H to Cb(B).
Given G ‚ààTB, G‚ó¶Œª‚àí1
f
is therefore a continuous linear form on H. By the Hahn-Banach
Theorem, G‚ó¶Œª‚àí1
f
can be extended to a continuous linear form F on Cb(A), with the same
norm, i.e., ||F|| = ||G ‚ó¶Œª‚àí1
f ||. The latter means that ||F|| = suph‚ààCb(A),||h||=1 |F(h)| =
suph‚ààH,||h||=1 |G(Œª‚àí1
f (h))| = supg‚ààCb(B),||g‚ó¶f||=1 |G(g)| = ||G|| = 1.
59

As far as positivity is concerned, we Ô¨Årst note that ||G|| = G(Œªy ‚ààB ¬∑ 1). Indeed, Ô¨Årst,
||Œªy ‚ààB¬∑1|| = 1, so ||G|| ‚â•G(Œªy ‚ààB¬∑1). To show the converse inequality, note Ô¨Årst that
for every g ‚ààCb(B), we may write g as the diÔ¨Äerence g+ ‚àíg‚àíof two positive functions,
so |G(g)| = |G(g+)‚àíG(g‚àí)| ‚â§max(G(g+), G(g‚àí)) (since G(g+), G(g‚àí) ‚â•0); if ||g|| = 1,
then g+(y) ‚â§1 and g‚àí(y) ‚â§1 for all y ‚ààB, so |G(g)| ‚â§G(Œªy ‚ààB ¬∑ 1); taking the sup
over all g, ||G|| ‚â§G(Œªy ‚ààB ¬∑ 1).
Then F(Œªx ‚ààA ¬∑ 1) = F(Œªf(Œªy ‚ààB ¬∑ 1)) = G(Œªy ‚ààB ¬∑ 1). So F(Œªx ‚ààA ¬∑ 1) = ||G|| =
||F||. If F was not positive, there would be some g ‚ààCb(A), g ‚â•0, with F(g) < 0. We
may assume without loss of generality that g ‚â§1, so Œªx ‚ààA¬∑1 ‚àíg(x) is of norm at most
1. But then ||F|| ‚â•F(Œªx ‚ààA ¬∑ 1 ‚àíg(x)) = F(Œªx ‚ààA ¬∑ 1) ‚àíF(g) > F(Œªx ‚ààA ¬∑ 1), a
contradiction. So F is positive.
Finally, Tf(F) = Œªg ‚ààCb(B)¬∑F(g‚ó¶f) = Œªg ‚ààCb(B)¬∑G(Œ∑(g‚ó¶f)) = Œªg ‚ààCb(B)¬∑G(g) =
G. Since G is arbitrary, Tf is surjective.
T can be used to form a monoidal monad on Met
Met
Met. DeÔ¨Åne
A as the function mapping
x ‚ààA to Œªg ‚ààCb(A) ¬∑ g(x). This is natural in A, and non-expansive in x. DeÔ¨Åne
A as
mapping F ‚ààT2A to Œªg ‚ààCb(TA) ¬∑ F(ŒªG ‚ààTA ¬∑ G(g)). It requires a bit more work
to show that
A is well-deÔ¨Åned and non-expansive in F; it is however clear that this is
natural in A. Furthermore, the monad laws are satisÔ¨Åed, so that (T,
,
) is a monad on
Met
Met
Met. The strength
tA,B maps (x, G) ‚ààA ‚äóTB to Œªh ‚ààCb(A ‚äóB) ¬∑ G(Œªy ‚ààB ¬∑ h(x, y)).
To deÔ¨Åne a notion of binary metric logical relations, we take CCC = Met
Met
Met √ó Met
Met
Met, deÔ¨Åne
a monad TTT on CCC pointwise (i.e., TTT(A1, A2) = (TA1, TA2)). It remains to deÔ¨Åne a monad
morphism from TTT to T.
DeÔ¨Åne |A1, A2| as the cartesian product A1 √ó A2, much as in Set
Set
Set. Note that the
only diÔ¨Äerence between cartesian product and tensor product is that their distances
diÔ¨Äer: dA1√óA2((x, y), (x‚Ä≤, y‚Ä≤)) is the max of the distances dA1(x, x‚Ä≤) and dA2(y, y‚Ä≤), while
dA1‚äóA2((x, y), (x‚Ä≤, y‚Ä≤)) is the sum of the same distances.
Similarly as in Set
Set
Set, deÔ¨Åne the monad morphism œÉA1,A2 as ‚ü®TœÄ1, TœÄ2‚ü©. That is, for every
F ‚ààT(A1 √ó A2), œÉA1,A2(F) = (Œªg1 ‚ààCb(A1) ¬∑ F(Œª(x, y) ¬∑ g1(x)), Œªg2 ‚ààCb(A2) ¬∑ F(Œª(x, y) ¬∑
g2(y))). We let the reader check all required properties. Then (| |, œÉ) is a monoidal monad
morphism. It is also easy to check that Met
Met
Met has pullbacks: the pullback of f : A ‚ÜíC
and g : B ‚ÜíC is the subspace of A √ó B consisting of all (x, y) such that f(x) = g(y);
and
A preserves relevant monos:
A maps f : B ‚ÜíC to Œªg ‚ààBA ¬∑ f ‚ó¶g, which is an
isometric embedding as soon as f is.
This yields the following notion of binary metric logical relation JœÑK between metric
spaces JœÑK1 and JœÑK2 indexed by types in a linear version of Moggi‚Äôs meta-language. The
types are:
œÑ ::= b|1|œÑ ‚äóœÑ|œÑ ‚àí‚ó¶œÑ|TTT (œÑ)
where b ranges over base types, ‚àí‚ó¶is linear implication, and TTT() is a syntactic, strong
monad. It is easy to craft a calculus based on this type algebra. The linear Œª-terms are
60

given by:
s, t, u, v, ...
::=
x| ‚àó| let‚àó= s in t|s ‚äót| letx ‚äóy = s in t|st|Œªx ¬∑ s
| vals| letval x = s in t
The typing rules are those of Moggi‚Äôs calculus, except for its linear Ô¨Çavor. Contexts Œì are
multisets of bindings x : œÑ, with pairwise distinct variable parts x, and comma denotes
multiset union.
(V ar)
x : A ‚ä¢x : A
Œì ‚ä¢s : 1
‚àÜ, x : 1 ‚ä¢t : œÑ
(1E)
Œì, ‚àÜ‚ä¢let ‚àó= s in t : œÑ
(1)
‚ä¢‚àó: 1
Œì ‚ä¢s : œÑ ‚äóœÑ‚Ä≤
‚àÜ, x : œÑ, y : œÑ ‚Ä≤ ‚ä¢t : œÑ ‚Ä≤‚Ä≤
(‚äóE)
Œì, ‚àÜ‚ä¢letx ‚äóy = s in t : œÑ ‚Ä≤‚Ä≤
Œì ‚ä¢s : œÑ
‚àÜ‚ä¢t : œÑ ‚Ä≤
(Pair)
Œì, ‚àÜ‚ä¢s ‚äót : œÑ ‚äóœÑ ‚Ä≤
Œì ‚ä¢s : œÑ ‚àí‚ó¶œÑ ‚Ä≤
‚àÜ‚ä¢t : œÑ
(App)
Œì, ‚àÜ‚ä¢st : œÑ ‚Ä≤
Œì, x : œÑ ‚ä¢s : œÑ ‚Ä≤
(Abs)
Œì ‚ä¢Œªx ¬∑ s : œÑ ‚àí‚ó¶œÑ ‚Ä≤
Œì ‚ä¢s : TTT(œÑ)
‚àÜ, x : œÑ ‚ä¢t : TTT(œÑ ‚Ä≤)
(Let)
Œì, ‚àÜ‚ä¢let valx = s in t : TTT(œÑ ‚Ä≤)
Œì ‚ä¢s : œÑ
(V al)
Œì ‚ä¢vals : TTT(œÑ)
Conversion rules are given by judgments Œì ‚ä¢s ‚Üít : œÑ (which we write s ‚Üít when Œì
and œÑ are clear or irrelevant), of which the most important are:
let ‚àó= ‚àóin s ‚Üís
‚ä¢s ‚Üí‚àó: 1
let x ‚äóy = s ‚äót in u ‚Üíu[x := s, y := t]
letx ‚äóy = s in x ‚äóy ‚Üís
(Œªx ¬∑ s)t ‚Üís[x := t]
Œªx ¬∑ sx ‚Üís
(x not free in s)
let valx = vals in t ‚Üít[x := s]
letval x = s in val x ‚Üís
let valx = let val y = s in t in u
‚Üí
letval y = s in let valx = t in u
There are other rules, notably the infamous commutative conversion rules‚Äîwhich orig-
inate in (Prawitz, 1965)‚Äîand which we won‚Äôt state. The interpretation in symmetric
monoidal closed categories follows the same lines as those of the ordinary Œª-calculus with
a monadic type, replacing cartesian products by tensor products. Our constructions then
yield a notion of subscone for this kind of calculus and models, requiring conditions (i.b),
(iii.a), (iv), (v), and (vi).
Note that JœÑ ‚äóœÑ ‚Ä≤Ki = JœÑKi ‚äóJœÑ ‚Ä≤Ki, JœÑ ‚àí‚ó¶œÑ ‚Ä≤Ki = JœÑ ‚Ä≤Ki
JœÑKi, JTTT(œÑ)Ki = T JœÑKi. Then the
deÔ¨Ånition of the subscone specializes to:
(f1, f2) ‚ààJœÑ ‚àí‚ó¶œÑ‚Ä≤K
‚áê‚áí
‚àÄa1 ‚ààJœÑK1 , a2 ‚ààJœÑK2 ¬∑
(a1, a2) ‚ààJœÑK ‚áí(f1(a1), f2(a2)) ‚ààJœÑ‚Ä≤K
((a1, a‚Ä≤
1), (a2, a‚Ä≤
2)) ‚ààJœÑ ‚äóœÑ‚Ä≤K
‚áê‚áí
(a1, a2) ‚ààJœÑK ‚àß(a‚Ä≤
1, a‚Ä≤
2) ‚ààJœÑ‚Ä≤K
Finally, (F1, F2) ‚ààJTTT(œÑ)K if and only if there is F ‚ààT JœÑK such that
F1(g1)
=
F(Œª(x, y) ‚ààJœÑK ¬∑ g1(x)) for every g1 ‚ààCb(JœÑK1)
F2(g2)
=
F(Œª(x, y) ‚ààJœÑK ¬∑ g2(y)) for every g2 ‚ààCb(JœÑK2)
61

(Up to isomorphism, relevant monos are inclusions, so we may consider that JœÑK ‚äÜJœÑK1 √ó
JœÑK2.) This condition implies that, if (F1, F2) ‚ààJTTT(œÑ)K, then for every g1 ‚ààCb(JœÑK1) and
g2 ‚ààCb(JœÑK2) such that g1(a1) = g2(a2) for every (a1, a2) ‚ààJœÑK, then F1(g1) = F2(g2).
It turns out that this is equivalent to it, just as in the case of the continuation monad:
(F1, F2) ‚ààJTTT(œÑ)K if and only if, for every g1 ‚ààCb(JœÑK1) and g2 ‚ààCb(JœÑK2) such that
g1(a1) = g2(a2) for every (a1, a2) ‚ààJœÑK, then F1(g1) = F2(g2).
The diÔ¨Écult if direction is proved as follows. Assume that F1(g1) = F2(g2) for every
g1 ‚ààCb(JœÑK1) and g2 ‚ààCb(JœÑK2) such that g1(a1) = g2(a2) for every (a1, a2) ‚ààJœÑK.
Let S be JœÑK, and H be the subspace of Cb(S) of those functions of the form Œª(x, y) ‚àà
S ¬∑ g1(x) + g2(y), where g1 ranges over Cb(JœÑK1), g2 ranges over Cb(JœÑK2). Let F0(g) be
deÔ¨Åned as F1(g1)+F2(g2) for every g = Œª(x, y) ‚ààS¬∑g1(x)+g2(y) in H. This is independent
of the choice of g1 and g2, since if g can also be written as Œª(x, y) ‚ààS ¬∑ g‚Ä≤
1(x) + g‚Ä≤
2(y),
then by construction g1(a1) ‚àíg‚Ä≤
1(a1) = g‚Ä≤
2(a2) ‚àíg2(a2) for every (a1, a2) ‚ààS = JœÑK, so
F1(g1‚àíg‚Ä≤
1) = F2(g‚Ä≤
2‚àíg2), which implies F1(g1)+F2(g2) = F1(g‚Ä≤
1)+F2(g‚Ä≤
2). It is easy to see
that F0 is a continuous linear form, so it extends to a continuous linear form F with the
same norm on the whole of Cb(S), by the Hahn-Banach Theorem. By the same argument
as in Lemma 10.2, F is a positive linear form. Clearly F1(g1) = F(Œª(x, y) ‚ààJœÑK ¬∑ g1(x))
for every g1 ‚ààCb(JœÑK1), and F2(g2) = F(Œª(x, y) ‚ààJœÑK ¬∑ g2(y)) for every g2 ‚ààCb(JœÑK2),
whence the claim.
In other words, the logical relation at TTT(œÑ) types is deÔ¨Åned by a formula in the style
of observational equivalence.
It is reasonable to represent the set of probabilistic transition systems on a metric space
A as the metric space TAA of all non-expansive maps from the set of states A to the set
of probability measures on A. The subscone construction provides a condition when two
such probabilistic transition systems are related. Given any relation S on A (deÔ¨Åning a
metric subspace of A√óA), deÔ¨Åne the relation eS on TAA by: for any non-expansive maps
f1, f2 from A to TA, (f1, f2) ‚ààeS if and only if, for every (a1, a2) ‚ààS, there is F ‚ààTS
such that
f1(a1)(g1)
=
F(Œª(x, y) ‚ààS ¬∑ g1(x)) for every g1 ‚ààCb(A)
f2(a2)(g2)
=
F(Œª(x, y) ‚ààS ¬∑ g2(y)) for every g2 ‚ààCb(A)
or, equivalently, for every g1, g2 ‚ààCb(A) such that g1(x) = g2(y) for every (x, y) ‚ààS, then
f1(a1)(g1) = f2(a2)(g2). In case A is compact, by the Riesz Representation Theorem, we
may replace positive continuous linear functionals on Cb(A) by probability measures.
Rephrasing the above, we get: for any non-expansive maps f1, f2 from A to the space of
probability measures on A, (f1, f2) ‚ààeS if and only if, for every (a1, a2) ‚ààS, there is a
probability measure ŒΩ on S such that
f1(a1)(X1)
=
ŒΩ((X1 √ó A) ‚à©S) for every measurable subset X1 of A
f2(a2)(X2)
=
ŒΩ((A √ó X2) ‚à©S) for every measurable subset X2 of A
We retrieve a notion of probabilistic bisimulation: S is a bisimulation on the space A of
states between the transition systems f1 and f2 if and only if eS relates f1 and f2.
In passing, we have just shown that the observational-equivalence-style deÔ¨Ånition of eS
62

coincides with the bisimulation-style deÔ¨Ånition, using the Riesz Representation Theorem.
This can be seen as a form of a completeness theorem.
The notion above is formally analogous to the notion of probabilistic bisimulation of
(Desharnais et al., 2002); i.e., the formulas we use and theirs for deÔ¨Åning bisimulations
is the same. This is also formally analogous to metric bisimulations as introduced by
de Vink and Rutten (de Vink and Rutten, 1999) for ultrametric spaces, and extended
by Worrell (Worrell, 2000) to generalized metric spaces. A diÔ¨Äerence is that the latter
authors use a coalgebraic approach; in particular, their construction requires a T functor
that preserves isometric embeddings (our relevant monos), while we require it to preserve
pseudoepis (surjective non-expansive maps).
11. Related work.
One succesful approach to categorical generalization of logical relations is the setting
of (Hermida, 1993) based on Ô¨Åbrations. We do not assume in this paper the forgetful
functor to be a Ô¨Åbration, similarly to other authors (e.g. (Plotkin et al., 2000)). Even if
we lose thereby the equivalence to logic, this is justiÔ¨Åed, since we do not focus on logical
rules corresponding to logical relations in this paper.
We have already said that there is no unique notion of monad lifting. One of the
simplest is the lifting, proposed in (Crole and Pitts, 1992), eT of TTT, which maps the object
‚ü®S, f, A‚ü©of the scone to ‚ü®S, |Œ∑Œ∑Œ∑A|‚ó¶f,TTTA‚ü©. This is a special case of our notion of lifting on the
scone (C ‚Üì| |) (Section 3), taking T the identity monad and œÉA = |Œ∑Œ∑Œ∑A|. Turi (Turi, 1996)
considers lifting monads to the category of coalgebras of a given endofunctor. This is a
special case of our framework, when CCC = C (and TTT = T) and moreover only objects of
the form S
f / |S| are taken into consideration, and only morphisms of the form ‚ü®g, g‚ü©.
This deÔ¨Ånes the category of | |-coalgebras as a proper subcategory of scones. Turi uses
a simpler version of our monad morphisms, namely distributivity law of a monad over
an endofunctor; monad morphisms involve two monads and a functor between distinct
categories. Turi‚Äôs distributivity laws are similar enough to monad morphisms that we had
called the latter distributivity laws for monads in the conference version of this paper. This
also inÔ¨Çuenced (Goubault-Larrecq and Goubault, 2003), where comonad morphisms are
used, but are called distributivity laws for comonads. (This relies on pullbacks, whereas we
use mono factorization systems.) Calling these monad morphisms distributivities turned
out to be a bad choice, as distributivity laws denote a close but diÔ¨Äerent concept, due to
Jon Beck (Beck, 1969); also, while distributivity laws tend to be rare, monad morphisms
abound.
In (Power and Watanabe, 2002) diÔ¨Äerent possible ways to combine a monad and a
comonad were studied in a systematic way. In particular, the authors used a notion of a
distributivity of a monad over a comonad (and dual distributivity of the comonad over the
monad). This is a stronger notion than monad morphisms, as it requires commutativity
of two copies of diagrams (4), one for the monad and another one for the comonad. On
the other hand, both the monad and the comonad live in a single category, unlike in our
case.
We also note that neither Pitts nor Turi deal with subscones.
63

(Kinoshita and Power, 1999) consider lifting a monad on Set
Set
Set to the category of rela-
tions in Set
Set
Set. This is a particular case of our setting. However, the main topic of this
paper is a more complex situation of lax logical relations and data-reÔ¨Ånement for the
computational lambda calculus. A subsequent paper (Power and Tanaka, 2000) develops
further the ideas of (Kinoshita and Power, 1999). It addresses in particular lax logical
relations for the computational lambda calculus and for the linear lambda calculus.
In the same way that we lift a monad to relations, Rutten (Rutten, 1998) deÔ¨Ånes an
extension of an endofunctor in Set
Set
Set to a category of relations. The latter has relations as
morphisms between sets. An endofunctor extends to relations iÔ¨Äit preserves weak pull-
backs(which in particular implies preserving monos), and if so, the extension is unique.
(This is actually a special case of a more general fact, proved in (Carboni et al., 1990)
for regular categories.) The approach taken by Rutten is diÔ¨Äerent from ours, where rela-
tions are objects rather than morphisms. Hence, Rutten imposes a diÔ¨Äerent functoriality
condition: the action of a lifted endofunctor on a composition of two relations must coin-
cide with a composition of actions of the lifted endofunctor on these two relations. This
amounts to closedness under composition of relations yielded by the lifted endofunctor.
(Pitts, 1991) proposes the Evaluation Logic for reasoning about programs with com-
putational eÔ¨Äects. It is based on the computational lambda-calculus (Moggi, 1991). Se-
mantics of Pitts‚Äô Evaluation Logic is studied further in (Moggi, 1995).
(Pitts, 1996) considers litÔ¨Ång of certain constructions on domains to relations on these
domains. He focuses on categories on domains and does not consider (strong) monads.
Instead of category of relations he assumes a relational structure, relaxing a notion of
mapping (morphism) of relations.
12. Conclusions
The main contribution of this paper is a natural extension of logical relations able to
deal with monadic types. We illustrate its naturality and its practical value by demon-
strating that various notions of bisimulations and a non-trivial notion of logical relation
for dynamic name creation are instances of our construction. Besides, our construction
provides a natural integration between notions of simulations for transition systems (pos-
sibly probabilistic), higher-order computation (the import of the Œª-calculus), and limited
forms of side-eÔ¨Äects (e.g., dynamic names), yielding streamlined criteria for observational
equivalence of those combined systems.
Acknowledgments
We are grateful to Masahito Hasegawa, John Power, Ian Stark, Paul-Andr¬¥e Melli`es,
Fran¬∏cois Lamarche, Vincent Danos, and Albert Burroni, and the anonymous referees for
their useful comments.
64

References
Abramsky, S. and Jung, A. (1994). Domain theory. In Abramsky, S., Gabbay, D. M.,
and Maibaum, T. S. E., editors, Handbook of Logic in Computer Science, volume 3,
pages 1‚Äì168. Oxford University Press.
Adamek, J., Herrlich, H., and Strecker, G. (1990). Abstract and Concrete Categories.
Wiley, New York.
Alimohamed, M. (1995). A characterization of lambda deÔ¨Ånability in categorical models
of implicit polymorphism. Theoretical Computer Science, 146(1‚Äì2):5‚Äì23.
Ambler, S. J. (1991). First Order Linear Logic in Symmetric Monoidal Closed Categories.
PhD thesis, University of Edinburgh.
Appelgate, H. (1965).
Acyclic models and resolvent functors.
PhD thesis, Columbia
University.
Barr, M. (1998). The separated extensional Chu category. Theory and Applications of
Categories, 4(6):137‚Äì147.
Beck, J. (1969). Distributive laws. In Seminar on Triples and Categorical Homology
Theory, pages 119‚Äì140. Springer-Verlag LNM 80.
Bourbaki, N. (1969). Int¬¥egration, volume IX. DiÔ¨Äusion CCLS.
Carboni, A., Kelly, G. M., and Wood, R. J. (1990). A 2-categorical approach to change
of base and geometric morphisms I. Report 90-1, Department of Pure Mathematics,
University of Sydney.
Crole, R. and Pitts, A. (1992).
New foundations for Ô¨Åxpoint computations: Fix-
hyperdoctrines and the Ô¨Åx-logic. Information and Computation, 98:171‚Äì210.
de Vink, E. P. and Rutten, J. J. M. M. (1999). Bisimulation for probabilistic transition
systems: A coalgebraic approach. Theoretical Computer Science, 221(1‚Äì2):271‚Äì293.
Desharnais, J., Edalat, A., and Panangaden, P. (2002). Bisimulation for labelled Markov
processes. Information and Computation, 179(2):163‚Äì193.
Eilenberg, S. and Kelly, G. M. (1966). Closed categories. In Proceedings of the Conference
on Categorical Algebra at La Jolla, pages 421‚Äì562. Springer-Verlag.
Escard¬¥o, M. and Heckmann, R. (2001‚Äì2002). Topologies on spaces of continuous func-
tions. Topology Proceedings, 26(2):545‚Äì564.
Escard¬¥o, M., Lawson, J., and Simpson, A. (2004). Comparing cartesian closed categories
of (core) compactly generated spaces. Topology and Its Applications, 143(1‚Äì3):105‚Äì
146.
Fiore, M. and Simpson, A. (1999). Lambda deÔ¨Ånability with sums via Grothendieck log-
ical relations. In Proceedings of the 4th International Conference on Typed Lambda-
Calculi and Applications (TLCA‚Äô99), pages 147‚Äì161. Springer-Verlag LNCS 1581.
Freyd, P. J. and Kelly, G. M. (1972). Categories of continuous functors i. Journal of
Pure and Applied Algebra, 2(3):169‚Äì191.
Gierz, G., Hofmann, K. H., Keimel, K., Lawson, J. D., Mislove, M., and Scott, D. S.
(1980). A Compendium of Continuous Lattices. Springer Verlag.
Gierz, G., Hofmann, K. H., Keimel, K., Lawson, J. D., Mislove, M., and Scott, D. S.
(2003). Continuous lattices and domains. In Encyclopedia of Mathematics and its
Applications, volume 93. Cambridge University Press.
65

Giry, M. (1981). A categorical approach to probability theory. In Banaschewski, B.,
editor, Categorical Aspects of Topology and Analysis, pages 68‚Äì85. Springer Verlag
LNM 915.
Goubault-Larrecq, J. (2005). Extensions of valuations. Mathematical Structures in Com-
puter Science, 15(2):271‚Äì297. An early version is available as LSV Research Report
LSV-02-17, Nov. 2002.
Goubault-Larrecq, J. and Goubault, E. (2003). On the geometry of intuitionistic S4
proofs. Homology, Homotopy and Applications, 5(2):137‚Äì209.
Goubault-Larrecq, J., Lasota, S., and Nowak, D. (2002). Logical relations for monadic
types. In Proceedings of the 16th International Workshop on Computer Science Logic
(CSL‚Äô02). Springer-Verlag LNCS 2471.
Heckmann, R. (1990). Power Domain Constructions (Potenzbereich-Konstruktionen).
PhD thesis, Universit¬®at des Saarlandes.
Hermida, C. A. (1993). Fibrations, logical predicates and indeterminates. PhD thesis,
University of Edinburgh, Department of Computer Science. Also published as ECS-
LFCS-93-277.
Honsell, F. and Sannella, D. (2002). Prelogical relations. Information and Computation,
178:23‚Äì43.
Johnstone, P. (1975). Adjoint lifting theorems for categories of algebras. Bulletin of the
London Mathematical Society, 7:294‚Äì297.
Jones, C. (1990). Probabilistic Non-Determinism. PhD thesis, University of Edinburgh.
Technical Report ECS-LFCS-90-105.
Jung, A. (1990). The classiÔ¨Åcation of continuous domains. In Proc. IEEE Symp. Logic
in Computer Science (LICS‚Äô90), pages 35‚Äì40. IEEE Computer Society Press.
Jung, A. and Tiuryn, J. (1993). A new characterization of lambda deÔ¨Ånability. In Proceed-
ings of the 1st International Conference on Typed Lambda-Calculi and Applications
(TLCA‚Äô93), pages 245‚Äì257. Springer Verlag LNCS 664.
Kinoshita, Y. and Power, J. (1999). Data-reÔ¨Ånement for call-by-value programming lan-
guages.
In Computer Science Logic, 13th International Workshop, CSL ‚Äô99, 8th
Annual Conference of the EACSL, Madrid, Spain, September 20-25, 1999, Proceed-
ings, pages 562‚Äì576.
Larsen, K. G. and Skou, A. (1991). Bisimulation through probabilistic testing. Informa-
tion and Computation, 94:1‚Äì28.
Lawvere, F. W. (1973). Metric spaces, generalized logic, and closed categories. Rendiconti
del Seminario Matematico e Fisico di Milano, 43:135‚Äì166.
Lazi¬¥c, R. and Nowak, D. (2000). A unifying approach to data-independence. In Pro-
ceedings of the 11th Internal Conference on Concurrency Theory (CONCUR‚Äô2000),
pages 581‚Äì595. Springer-Verlag LNCS 1877.
Ma, Q. and Reynolds, J. C. (1992). Types, abstraction, and parametric polymorphism,
part 2. In 7th International Conference on Mathematical Foundations of Program-
ming Semantics (MFPS‚Äô91), pages 1‚Äì40. Springer-Verlag LNCS 598.
Mac Lane, S. (1971). Categories for the Working Mathematician, volume 5 of Graduate
Texts in Mathematics. Springer-Verlag.
Mitchell, J. C. (1996). Foundations for Programming Languages. MIT Press.
66

Mitchell, J. C. and Scedrov, A. (1993). Notes on sconing and relators. In B¬®orger, E.,
J¬®ager, G., Kleine B¬®uning, H., Martini, S., and Richter, M. M., editors, Proceedings
of the 6th International Workshop on Computer Science Logic (CSL‚Äô92), pages 352‚Äì
378. Springer Verlag LNCS 702.
Moggi, E. (1991). Notions of computation and monads. Information and Computation,
93:55‚Äì92.
Moggi, E. (1995). A semantics for evaluation logic. Fundam. Inform, 22(1/2):117‚Äì152.
Pitts, A. and Stark, I. (1993). Observable properties of higher order functions that dy-
namically create local names, or: What‚Äôs new? In Borzyszkowski, A. and Soko lowski,
S., editors, Proceedings of the 18th International Symposium on Mathematical Foun-
dations of Computer Science (MFCS‚Äô93), pages 122‚Äì141. Springer-Verlag LNCS 711.
Pitts, A. M. (1991).
Evaluation logic.
In Birtwistle, G., editor, IVth Higher Order
Workshop, BanÔ¨Ä1990, Workshops in Computing, pages 162‚Äì189. Springer-Verlag,
Berlin.
Pitts, A. M. (1996). Relational properties of domains. Information and Computation,
127(2):66‚Äì90.
Plotkin, G., Power, J., Sannella, D., and Tennent, R. (2000).
Lax logical relations.
In Proceedings of the 7th International Colloquium on Automata, Languages and
Programming (ICALP‚Äô2000), pages 85‚Äì102. Springer Verlag LNCS 1853.
Plotkin, G. D. (1980). Lambda-deÔ¨Ånability in the full type hierarchy. In Seldin, J. and
Hindley, J., editors, To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus
and Formalism, pages 363‚Äì373. Academic Press.
Power, J. and Tanaka, M. (2000). Axiomatics for data reÔ¨Ånement in call by value pro-
gramming languages.
Power, J. and Watanabe, H. (2002). Combining a monad and a comonad. Theoretical
Computer Science, 280(1‚Äì2):137‚Äì162.
Prawitz, D. (1965). Natural Deduction, A Proof-Theoretical Study. Almqvist and Wiskell,
Stockholm.
Ramsey, N. and PfeÔ¨Äer, A. (2002). Stochastic lambda calculus and monads of proba-
bility distributions. In Proceedings of the 29th Annual ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages (POPL‚Äô02), pages 154‚Äì165.
Reynolds, J. C. (1983). Types, abstraction and parametric polymorphism. In Proceedings
of the 9th World Computer Congress (IFIP‚Äô83), pages 513‚Äì523. North-Holland.
Rutten, J. (1998). Relators and metric bisimulations. In Proceedings of the 1th Workshop
on Coalgebraic Methods in Computer Science (CMCS ‚Äô98), volume 11 of ENTCS,
pages 1‚Äì7. Elsevier Science.
Stark, I. (1996). Categorical models for local names. Lisp and Symbolic Computation,
9(1):77‚Äì107.
Stark, I. (1998). Names, equations, relations: Practical ways to reason about new. Fun-
damenta Informaticae, 33(4):369‚Äì396.
Statman, R. (1985). Logical relations and the typed Œª-calculus. Information and Control,
65(2‚Äì3):85‚Äì97.
Street, R. (1972). The formal theory of monads. Journal of Pure and Applied Algebra,
2:149‚Äì168.
67

Turi, D. (1996). Functorial Operational Semantics and its Denotational Dual. PhD thesis,
Free University, Amsterdam.
Wadler, P. (1992). Comprehending monads. Mathematical Structures in Computer Sci-
ence, 2:461‚Äì493.
Worrell, J. (2000).
On Coalgebras and Final Semantics.
PhD thesis, Keble College,
Oxford University Computing Laboratory.
Zhang, Y. (2005).
Relations logiques cryptographiques ‚Äî Qu‚Äôest-ce que l‚Äô¬¥equivalence
contextuelle des protocoles cryptographiques et comment la prouver ? PhD thesis,
Laboratoire Sp¬¥eciÔ¨Åcation et V¬¥eriÔ¨Åcation, Ecole Normale Sup¬¥erieure de Cachan.
Zhang, Y. and Nowak, D. (2003). Logical relation for dynamic name creation. In Pro-
ceedings of the 17th International Workshop on Computer Science Logic (CSL‚Äô03),
pages 575‚Äì588. Springer-Verlag LNCS 2803.
Appendix A. Monoidal Monads, Commutative Monads
A.1. From Mediators to Strengths and Dual Strengths
Let (T,
,
,
d) be a monoidal monad. Let
tA,B =
dA,B ‚ó¶(A ‚äóidTB),
t‚Ä≤
A,B =
dA,B ‚ó¶
(idTA ‚äó
B). We show that
t is a strength,
t‚Ä≤ a dual strength, and that Diagrams (43)
and (44) commute.
Diagram (32). This is exactly Diagram (38).
Diagram (33). This is exactly Diagram (40).
Diagram (34). This is shown by the diagram below. The topmost row is
tA‚äóB,C, while
the bottommost composition of morphisms from T((A ‚äóB) ‚äóC) to T(A ‚äó(B ‚äóC)) is
idA ‚äó
tB,C followed by
tA,B‚äóC.
(A ‚äóB) ‚äóTC
A‚äóB‚äóid
/
A,B,TC

(A‚äóB)‚äóid
(40)
)R
R
R
R
R
R
R
R
R
R
R
(naturality
of
)
T(A ‚äóB) ‚äóTC
dA‚äóB,C
/
(mediator law (41))
T((A ‚äóB) ‚äóC)
T A,B,C

(TA ‚äóTB) ‚äóTC
dA,B‚äóid
O
TA,TB,TC

TA ‚äó(TB ‚äóTC)
id‚äódB,C
/
(functoriality
of ‚äó)
TA ‚äóT(B ‚äóC)
dA,B‚äóC
/ T(A ‚äó(B ‚äóC))
A ‚äó(B ‚äóTC)
A‚äó(B‚äóid)
5l
l
l
l
l
l
l
l
l
l
l
id‚äó(B‚äóid)
/ A ‚äó(TB ‚äóTC)id‚äódB,C
/ A ‚äóT(B ‚äóC)
A‚äóid
O
68

Diagram (35).
A ‚äóT2B
A‚äóid/
id‚äóB

(functoriality
of ‚äó)
TA ‚äóT2B
dA,TB/
T A‚äóTid
'O
O
O
O
O
O
O
O
O
(naturality
of
d)
id‚äóB
(monad
law)
+
T(A ‚äóTB)
T(A‚äóid)
/ T(TA ‚äóTB)
T dA,B/ T2(A ‚äóB)
A‚äóB

T2A ‚äóT2B
dTA,TB
7n
n
n
n
n
n
n
n
n
A‚äóB

A ‚äóTB
A‚äóid
/ TA ‚äóTB
dA,B
/
(mediator
law (42))
T(A ‚äóB)
So
 is a strength. That
‚Ä≤ is a dual strength is proved similarly. We use Diagram (39)
instead of Diagram (38) to prove the dual form of Diagram (32).
Diagram (43). In the diagram below, the top row is
tA,B ‚äóid followed by
t‚Ä≤
A‚äóB,C, while
the bottom row is id ‚äó
t‚Ä≤
B,C followed by
tA,B‚äóC.
(A ‚äóTB)
‚äóC
(A‚äóid)
‚äóid/
A,TB,C

(A‚äóid)‚äóC
+W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
W
(functoriality
of ‚äó)
(TA ‚äóTB)
‚äóC
dA,B‚äóid/ T(A ‚äóB)
‚äóC
id‚äóC /
T(A ‚äóB)
‚äóTC
dA‚äóB,C/ T((A ‚äóB)
‚äóC)
T A,B,C

(TA ‚äóTB) ‚äóTC
dA,B‚äóid
7o
o
o
o
o
o
o
o
o
TA,TB,TC

TA ‚äó(TB ‚äóTC)
id‚äódB,C
'O
O
O
O
O
O
O
O
O
A‚äó
(TB ‚äóC)
id‚äó
(id‚äóC)
/
A‚äó(id‚äóC)
3g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
(functoriality
of ‚äó)
(naturality
of
)
A‚äó
(TB ‚äóTTTC) id‚äódB,C
/
A‚äó
T(T ‚äóC)
A‚äóid/
TA‚äó
T(B ‚äóC)
dA,B‚äóC
/
(mediator
law (41))
T(A‚äó
(B ‚äóC))
Diagram (44). This is the diagram below, where the top row is
tTA,B, the leftmost vertical
arrows form
t‚Ä≤
A,TB, the rightmost ones form Tt‚Ä≤
A,B followed by
A‚äóB, and the bottom
row is TtA,B followed by
A‚äóB. Note that, as announced, the common diagonal from the
69

top left corner to the bottom right corner is
dA,B.
TA ‚äóTB
TA‚äóid
/
id‚äóTB

id‚äóid
P
P
P
P
P
P
P
P
P
P
P
P
(monad laws
and functor-
iality of ‚äó)
'P
P
P
P
P
P
P
P
P
P
P
P
T2A ‚äóTB
dTA,B
/
id‚äóT B 
(natur-
ality of
d)
T(TA ‚äóB)
T(id‚äóB)

T2A ‚äóT2B
A‚äóB 
dTA,TB
W
W
W
W
W
W
W
+W
W
W
W
W
W
(mediator
law (42))
TA ‚äóT2B
dA,TB

T A‚äóid/
(natur-
ality of
d)
T2A ‚äóT2B
A‚äóB/
dTA,TB
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@ (mediator
law (42))
TA ‚äóTB
dA,B
O
O
O
O
O
O
O
O
O
O
O
O
'O
O
O
O
O
O
O
O
O
O
O
T(TA ‚äóTB)
T dA,B

T2(A ‚äóB)
A‚äóB

T(A ‚äóTB)
T(A‚äóid)
/ T(TA ‚äóTB)T dA,B
/ T2(A ‚äóB)
A‚äóB / T(A ‚äóB)
A.2. From Strengths and Dual Strengths to Mediators
Let (T,
,
) be a monad such that
t is a strength and
t‚Ä≤ is a dual strength making
Diagrams (43) and (44) commute. Let
d be the common diagonal of Diagram (44), i.e.,
dA,B =
A‚äóB ‚ó¶Tt‚Ä≤
A,B ‚ó¶
tTA,B =
A‚äóB ‚ó¶TtA,B ‚ó¶
t‚Ä≤
A,TB. We show that
d is a mediator,
which means that we check Diagrams (38), (39), (40), (41), and (42). By convention, call
(32‚Äô), (33‚Äô), (34‚Äô), (35‚Äô) the dual diagrams satisÔ¨Åed by the dual strength
t‚Ä≤.
First, notice that
tA,B =
dA,B ‚ó¶(A ‚äóidTB). Indeed, using the deÔ¨Ånition
dA,B =
A‚äóB ‚ó¶Tt‚Ä≤
A,B ‚ó¶
tTA,B,
dA,B ‚ó¶(A ‚äóidTB) is the top row of the following diagram, while
tA,B is the bottom composition of arrows from A ‚äóTB to T(A ‚äóB).
A ‚äóTB
A‚äóidTB/
tA,B
)R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
TA ‚äóTB
tTA,B / TTA ‚äóB
T t‚Ä≤
A,B/ T2(A ‚äóB)
A‚äóB / T(A ‚äóB)
T(A ‚äóB)
T(A‚äóidB)
O
(naturality
of
t)
T A‚äóB
w
w
w
w
w
w
(33‚Ä≤)
;w
w
w
w
w
w
idT(A‚äóB)
(monad law)
?
Diagram (38) is then just Diagram (32).
Diagram (39). Similarly,
t‚Ä≤
A,B =
dA,B‚ó¶(idTA‚äó
B) (here we use the other characterization
of
dA,B as
A‚äóB ‚ó¶TtA,B ‚ó¶
t‚Ä≤
A,TB and (33)), so Diagram (39) is just Diagram (32‚Äô).
Diagram (40). Immediate using (33) and
tA,B =
dA,B ‚ó¶(A ‚äóidTB):
dA,B ‚ó¶(A ‚äó
B) =
tA,B ‚ó¶(A ‚ó¶idB) =
A‚äóB.
Diagram (41). This one is harder, and is proved by considering the diagram below. The
top row is
dA,B ‚äóidTC, the rightmost vertical arrows form
dA‚äóB,C followed by TA,B,C,
while the leftmost ones form
TA,TB,TC followed by idTA ‚äó
dB,C, and the bottommost
70

row is
dA,B‚äóC.
(TA ‚äóTB)
‚äóTC
t‚Ä≤
A,TB
‚äóid/
TA,TB,TC

(dual
strength
law
(34‚Äô))
T(A ‚äóTB)
‚äóTC
TtA,B
‚äóid/
t‚Ä≤
A‚äóTB,TC

(natur-
ality
of
t‚Ä≤)
T2(A ‚äóB)
‚äóTC
t‚Ä≤
T(A‚äóB),TC

A‚äóB‚äóid
/
(dual strength
law (35‚Äô))
T(A ‚äóB)
‚äóTC
t‚Ä≤
A‚äóB,TC

T((A ‚äóTB)
‚äóTC)
T(tA,B
‚äóid)/
TA,TB,TC

((43))
T(T(A ‚äóB)
‚äóTC)
Tt‚Ä≤
A‚äóB,TC

T((A ‚äóB)
‚äóTC)
TtA‚äóB,C

TA‚äó
(TB ‚äóTC)
t‚Ä≤
A,TB‚äóTC
/
id‚äót‚Ä≤
B,TC

(natur-
ality
of
t‚Ä≤)
T(A‚äó
(TB ‚äóTC))
T(id‚äót‚Ä≤
B,TC)

T2((A
‚äóB)
‚äóTC)
T2
A,B,TC

T2
tA‚äóB,C
/
(T2 of
strength
law
(34))
(A‚äóB)‚äóTC
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
3h
h
h
h
h
h
h
h
h
h
h
h
h
h
T3((A
‚äóB)
‚äóC)
T3
A,B,C

T
"E
E
E
E
E
E
E
E
(natur-
ality of
T )
T((A‚äóB)‚äóC)
/
(monad law)
(naturality of
)
T2((A ‚äóB)
‚äóC)


TA‚äó
T(B ‚äóTC)
id‚äóTtB,C

T(A‚äó
T(B ‚äóTC))
T(id‚äóTtB,C )

TtA,B‚äóTC
/
(natur-
ality
of T t)
T2(A‚äó
(B ‚äóTC))
T2(id‚äótB,C )

T2((A ‚äóB)
‚äóC)
T2
A,B,C

(natur-
ality
of
)
 /
T((A ‚äóB)
‚äóC)
TA,B,C

TA‚äó
T2(B ‚äóC)
id‚äóB‚äóC

T(A‚äó
T2(B ‚äóC))
T(id‚äóB‚äóC )

TtA,T(B‚äóC)
/
(T of strength
law (35))
T2(A‚äó
T(B ‚äóC))
T2
tA,B‚äóC
/
T3(A‚äó
(B ‚äóC))
TA‚äó(B‚äóC)
HHH
#HHH
TA‚äó
T(B ‚äóC)
t‚Ä≤
A,T(B‚äóC)
/
T(A‚äó
T(B ‚äóC))
TtA,B‚äóC
/
T2(A‚äó
(B ‚äóC))
 /
T(A‚äó
(B ‚äóC))
Diagram (42). First, we notice that
A‚äóB ‚ó¶TdA,B ‚ó¶
t‚Ä≤
TA,TB
=
dA,B ‚ó¶(A ‚äóidTB)
(64)
This is shown using the
diagram on the right.
The left-hand side is the
path from the top left
corner to the bottom
right corner on the right
that
goes
down
then
right,
and
the
right-
hand side is the path go-
ing right then down.
T2A ‚äóTB
A‚äóid
/
t‚Ä≤
TA,TB 
(dual strength
law (35‚Äô))
TA ‚äóTB
t‚Ä≤
A,TB

T(TA ‚äóTB)
T tA,TB 
T(A ‚äóTB)
T tA,B

T2(A ‚äóTB)
A‚äóTB
h
h
h
h
3h
h
h
h
h
T2
tA,B 
(naturality
of
)
T2(A ‚äóB)
A‚äóB

T3(A ‚äóB)
T(A‚äóB)
h
h
h
h
h
3h
h
h
h
h
T A‚äóB 
(monad law)
T2(A ‚äóB)
A‚äóB
/ T(A ‚äóB)
By symmetry, the following also holds:
A‚äóB ‚ó¶TdA,B ‚ó¶
tTA,TB
=
dA,B ‚ó¶(idTA ‚äó
B)
(65)
Diagram (42) then follows. The top row below is
dTA,TB, while the leftmost vertical
71

arrows form
A ‚äó
B.
T2A ‚äóT2B
tT2A,TB/
A‚äóidT2B

(natur-
ality
of
t)
T(T2A ‚äóTB)
T t‚Ä≤
TA,TB/
T(A‚äóidTB)

(64)
T2(TA ‚äóTB)
TA‚äóTB/
T2
dA,B

(naturality
of
)
T(TA ‚äóTB)
T dA,B

T3(A ‚äóB)
T(A‚äóB)/
T A‚äóB

(monad
law)
T2(A ‚äóB)
A‚äóB

TA ‚äóT2B
tTA,TB
/
idTA‚äóB

(65)
T(TA ‚äóTB) T dA,B
/ T2(A ‚äóB)
A‚äóB
'O
O
O
O
O
O
O
O
O
O
O
O
TA ‚äóTB
dA,B
/ T(A ‚äóB)
A.3. Monoidal Monad Morphisms
We Ô¨Årst show that every monoidal monad morphism from (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ddd) to (T,
,
,
d) is
both a strong monad morphism from (TTT ,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) to (T,
,
,
t) and (by symmetry) a dual
strong monad morphism from (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt‚Ä≤) to (T,
,
,
t‚Ä≤), where
tA,B =
dA,B‚ó¶(A‚äóidTB),
t‚Ä≤
A,B =
dA,B ‚ó¶(idTA ‚äó
B). This is by the following diagram.
|A1| ‚äóT|A2|
|A1| ‚äóid/
|Œ∑Œ∑Œ∑A1|‚äóœÉA2
(4)
(R
R
R
R
R
R
R
R
R
R
R
R
R
id‚äóœÉA2 
T|A1| ‚äóT|A2|
d|A1|,|A2|/
œÉA1 ‚äóœÉA2

(monoidal
monad
morphism
(45))
T(|A1| ‚äó|A2|)
T(A1,A2 )

|A1| ‚äó|TTTA2|
|A1|‚äóid
/
A1,TT
T A2

(naturality
of
)
|TTTA1| ‚äó|TTTA2|
TT
T A1,TT
T A2

T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

|A1| ‚äó‚äó‚äóTTTA2
|Œ∑Œ∑Œ∑A1‚äó
‚äó
‚äóid|
/ |TTT A1 ‚äó‚äó‚äóTTTA2|
|dddA1,A2|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
Conversely, let œÉ be both a strong monad morphism from (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt) to (T,
,
,
t) and
a dual strong monad morphism from (TTT,Œ∑Œ∑Œ∑,¬µ¬µ¬µ,ttt‚Ä≤) to (T,
,
,
t‚Ä≤). Let
d be the common
diagonal of Diagram (44), i.e.,
dA,B =
A‚äóB ‚ó¶Tt‚Ä≤
A,B ‚ó¶
tTA,B =
A‚äóB ‚ó¶TtA,B ‚ó¶
t‚Ä≤
A,TB.
DeÔ¨Åne ddd similarly.
In the diagram below, the top row is
d|A1|,T|A1|, while the leftmost vertical arrows from
72

œÉA1 ‚äóœÉA2 followed by
TTT A1,TTT A2. The bottom row is |dddA1,A2| followed by |¬µ¬µ¬µA1‚äó
‚äó
‚äóA2|.
T|A1| ‚äóT|A2|
t‚Ä≤
|A1|,T|A2|/
id‚äóœÉA2

(naturality
of
t‚Ä≤)
T(|A1| ‚äóT|A2|)
T t|A1|,|A2|/
T(id‚äóœÉA2 )

(strong
monad
morphism
(45))
T2(|A1| ‚äó|A2|)
|A1|‚äó|A2|/
T2
A1,A2

(natur-
ality
of
)
T(|A1| ‚äó|A2|)
T A1,A2

T|A1| ‚äó|TTTA2|
t‚Ä≤
|A1|,|T
TT A2|
/
œÉA1 ‚äóid

(dual
strong
monad
morphism
(45‚Äô))
T(|A1| ‚äó|TTTA2|)
T A1,TT
T A2

T2|A1 ‚äó‚äó‚äóA2|
TœÉA1‚äó
‚äó
‚äóA2

|A1‚äó
‚äó
‚äóA2| /
(monad
morph-
ism (4))
T|A1 ‚äó‚äó‚äóA2|
œÉA1‚äó
‚äó
‚äóA2

|TTTA1| ‚äó|TTTA2|
TT
T A1,TT
T A2

T|A1 ‚äó‚äó‚äóTTTA2|
œÉA1‚äó
‚äó
‚äóT
T
T A2

T|tttA1,A2|/
(naturality
of œÉ)
T|TTT(A1 ‚äó‚äó‚äóA2)|
œÉTT
T (A1‚äó
‚äó
‚äóA2)

|TTTA1 ‚äó‚äó‚äóTTTA2|
|ttt‚Ä≤
A1,TT
T A2|
/ |TTT(A1 ‚äó‚äó‚äóTTTA2)|
|TTTtttA1,A2|
/ TTT 2(A1 ‚äó‚äó‚äóA2)

|¬µ¬µ¬µA1‚äó
‚äó
‚äóA2|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
A.4. Commutative Monads are Monoidal
Let (T,
,
,
) be a strong monad on a symmetrical monoidal category. Let
t‚Ä≤
A,B be
the dual strength T B,A ‚ó¶
tB,A ‚ó¶
 TA,B. That T is a commutative monad means that
Diagram (44) commutes. To show that
dA,B =
A‚äóB‚ó¶Tt‚Ä≤
A,B‚ó¶tTA,B =
A‚äóB‚ó¶TtA,B‚ó¶t‚Ä≤
A,TB
is a mediator, it then suÔ¨Éces to show that Diagram (43) commutes. In the diagram below,
the top row is
tA,B ‚äóidC followed by
t‚Ä≤
A‚äóB,C, the bottom row is idA ‚äó
t‚Ä≤
B,C followed
by
tA,B‚äóC. The two triangles involving
 on the left side are instances of the identity
 ‚ó¶
 = id.
(A ‚äóTB)
‚äóC
tA,B‚äóid/
 
$I
I
I
I
I
I
I
I
I
id

T(A ‚äóB)
‚äóC
 
/
C‚äó
T(A ‚äóB)
tC,A‚äóB /
T(C‚äó
(A ‚äóB))
T  /
(T of
coher-
ence
(25))
T((A ‚äóB)
‚äóC)
T A,B,C

(A ‚äóTB)
‚äóC
A,TB,C

(coher-
ence
(25))
C‚äó
(A ‚äóTB)
id‚äótA,B
:u
u
u
u
u
u
u
u
u
(naturality
of
 )
 
o
T((C ‚äóA)
‚äóB)
T C,A,B
O
T( ‚äóid)

(C ‚äóA)
‚äóTB
C,A,TB
O
 ‚äóid

tC‚äóA,B
(strength
law
(34))
4j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
T((A ‚äóC)
‚äóB)
T A,C,B

A‚äó
(TB ‚äóC)
id

(A ‚äóC)
‚äóTB
A,C,TB

tA‚äóC,B
(naturality
of
t)
4j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
T(A‚äó
(C ‚äóB))
T(id‚äó )
%J
J
J
J
J
J
J
J
J
A‚äó
(TB ‚äóC)
id‚äó /
A‚äó
(C ‚äóTB)
id‚äó 
dIIIIIIIII
id‚äótC,B
/
(strength
law (34))
A‚äó
T(C ‚äóB)
tA,C‚äóB
:t
t
t
t
t
t
t
t
t
id‚äóT  /
A‚äó
T(B ‚äóC)
tA,B‚äóC
/
(naturality
of
t)
T(A‚äó
(B ‚äóC))
73

We now observe that Diagram (47) commutes:
TA ‚äóTB
 /
 

TB ‚äóTA
tTB,A/ T(TB ‚äóA)
T / T(A ‚äóTB)
TtA,B/ T2(A ‚äóB)
A‚äóB/
(naturality
of
)
T(A ‚äóB)
T 

TB ‚äóTA
id
9t
t
t
t
t
t
t
t
t
t
tTB,A
/ T(TB ‚äóA)
T / T(A ‚äóTB)
TtA,B
/ T2(A ‚äóB)
T2
 
/
id
9s
s
s
s
s
s
s
s
s
s
T2(B ‚äóA)
B‚äóA/ T(B ‚äóA)
Indeed, the leftmost triangle is by
 ‚ó¶
 = id, the inner parallelogram obviously commutes,
and the top and bottom rows are the two ways of writing
dA,B.
Conversely, given any monoidal monad
making Diagram (47) commute, we
claim that the derived strength
t and
dual strength
t‚Ä≤ are related by
t‚Ä≤
A,B =
T B,A ‚ó¶
tB,A‚ó¶
 TA,B. Equivalently, since
 ‚ó¶
 = id, we check that
t‚Ä≤
A,B ‚ó¶
 B,TA =
T B,A ‚ó¶
tB,A. This is obvious:
B ‚äóTA
 B,TA /
B‚äóidTA

(naturality
of
 )
TA ‚äóB
idTAB

TB ‚äóTA
 TB,TA

dB,A /
(47)
T(B ‚äóA)
T  B,A

TA ‚äóTB
dA,B
/ T(A ‚äóB)
Appendix B. Proof of Lemma 8.3
We Ô¨Årst check that (D, ID, ‚äóD, Œ±D, ‚ÑìD, rD) is a monoidal category. Write ‚ó¶the notion of
composition in D = Kleisli(T ), i.e., g‚ó¶f = ¬µ ‚ó¶T g ‚ó¶f.
‚Äî Functoriality of ‚äóD. First, ‚äóD applied to the identity on (A, B) is idA ‚äóD idB =
idFT (A) ‚äóD idFT (B) = FT (idA) ‚äóD FT (idB) = FT (idA ‚äóC idB) = FT (idA‚äóCB) =
idFT (A‚äóCB) = idA‚äóDB.
Second, ‚äóD preserves composition. Indeed, let f, f ‚Ä≤, g, g‚Ä≤ be morphisms from A to B,
from A‚Ä≤ to B‚Ä≤, from B to C and from B‚Ä≤ to C‚Ä≤ respectively in D. Then the composition
of g‚äóDg‚Ä≤ with f‚äóDf ‚Ä≤ in D is the morphism ¬µC‚äóCC‚Ä≤‚ó¶T (dC,C‚Ä≤‚ó¶(g‚äóCg‚Ä≤))‚ó¶dB,B‚Ä≤‚ó¶(f‚äóCf ‚Ä≤)
in C. The following diagram then commutes:
A ‚äóC A‚Ä≤
f‚äóCf‚Ä≤/
(g‚ó¶f)‚äóC(g‚Ä≤‚ó¶f‚Ä≤)
-
TB ‚äóC TB‚Ä≤
dB,B‚Ä≤
/
T g‚äóCT g‚Ä≤ 
(naturality
of d)
T(B ‚äóC B‚Ä≤)
T (g‚äóCg‚Ä≤)

T 2C ‚äóC T 2C‚Ä≤
dT C,T C‚Ä≤/
¬µC ‚äóC¬µC‚Ä≤
I
I
I
I
I
I
I
$I
I
I
I
I
I
I
(42)
T(TC ‚äóC TC‚Ä≤)
T dC,C‚Ä≤

T 2(C ‚äóC C‚Ä≤)
¬µC‚äóC C‚Ä≤

T(C ‚äóC C‚Ä≤)
The top right route from A ‚äóC A‚Ä≤ to T (C ‚äóC C‚Ä≤) is (g ‚äóD g‚Ä≤)‚ó¶(f ‚äóD f ‚Ä≤), while the
straight line diagonal is (g‚ó¶f) ‚äóD (g‚Ä≤‚ó¶f ‚Ä≤).
‚Äî Naturality of Œ±D. Let f, g, h be morphisms from A to A‚Ä≤, B to B‚Ä≤ and C to C‚Ä≤
respectively in D. Then Œ±D composed in D with (f ‚äóD g) ‚äóD h is ¬µ ‚ó¶T (Œ∑ ‚ó¶Œ±C) ‚ó¶d ‚ó¶
((d ‚ó¶(f ‚äóC g)) ‚äóC h) = T Œ±C ‚ó¶d ‚ó¶(d ‚äóC id) ‚ó¶((f ‚äóC g) ‚äóC h) (the route going all the
way down then right from the top left corner to the bottom right corner below), while
74

f ‚äóD (g ‚äóD h) composed with Œ±D in D is ¬µ ‚ó¶T (d ‚ó¶(f ‚äóC (d ‚ó¶(g ‚äóC h)))) ‚ó¶Œ∑ ‚ó¶Œ±C =
¬µ‚ó¶T d‚ó¶T (id ‚äóC d)‚ó¶T (f ‚äóC (g ‚äóC h))‚ó¶Œ∑ ‚ó¶Œ±C (the other route, going right then down).
(A ‚äóC B) ‚äóC C
Œ±C
/
(f‚äóCg)‚äóCh 
(naturality
of Œ±C)
A ‚äóC (B ‚äóC C)
Œ∑
/
f‚äóC(g‚äóCh)

(natur-
ality
of Œ∑)
T(A ‚äóC (B ‚äóC C))
T (f‚äóC(g‚äóCh))

(TA‚Ä≤ ‚äóC TB‚Ä≤)
‚äóCTC‚Ä≤
dA‚Ä≤,B‚Ä≤ ‚äóCidT C‚Ä≤

Œ±C /
(mediator
law (41))
TA‚Ä≤ ‚äóC (TB‚Ä≤ ‚äóC TC‚Ä≤)
idT A‚Ä≤ ‚äóCdB‚Ä≤,C‚Ä≤

T(TA‚Ä≤‚äóC
(TB‚Ä≤ ‚äóC TC‚Ä≤))
T (idT A‚Ä≤ ‚äóCdB‚Ä≤,C‚Ä≤ )

T(A‚Ä≤ ‚äóC B‚Ä≤)
‚äóCTC‚Ä≤
dA‚Ä≤‚äóCB‚Ä≤,C‚Ä≤

TA‚Ä≤‚äóC
T(B‚Ä≤ ‚äóC C‚Ä≤)
dA‚Ä≤,B‚Ä≤‚äóCC‚Ä≤

T(TA‚Ä≤‚äóC
T(B‚Ä≤ ‚äóC C‚Ä≤))
T dA‚Ä≤,B‚Ä≤‚äóCC‚Ä≤

T((A‚Ä≤ ‚äóC B‚Ä≤)
‚äóCC‚Ä≤)
T Œ±C / T(A‚Ä≤ ‚äóC (B‚Ä≤ ‚äóC C‚Ä≤))
Œ∑
/
idT (A‚Ä≤‚äóC(B‚Ä≤‚äóCC‚Ä≤))
(monad law)
'P
P
P
P
P
P
P
P
P
P
P
P
P
P
P
T 2(A‚Ä≤‚äóC
(B‚Ä≤ ‚äóC C‚Ä≤))
¬µA‚Ä≤‚äóC(B‚Ä≤‚äóCC‚Ä≤)

T(A‚Ä≤‚äóC
(B‚Ä≤ ‚äóC C‚Ä≤))
‚Äî Naturality of ‚ÑìD. Let f be any morphism from B to B‚Ä≤ in D. Then the composition of
f with ‚ÑìD in D is ¬µ ‚ó¶T f ‚ó¶Œ∑ ‚ó¶‚ÑìC (route going right then down), while the composition
of ‚ÑìD with (idD ‚äóD f) is ¬µ ‚ó¶T (Œ∑ ‚ó¶‚ÑìC) ‚ó¶d ‚ó¶(Œ∑ ‚äóC f) (dented route going down then
right).
IC ‚äóC B
‚ÑìC
/
idIC ‚äóCf 
(naturality
of ‚ÑìC)
B
Œ∑B
/
f 
(naturality
of Œ∑)
TB
T f

IC ‚äóC TB‚Ä≤
‚ÑìC
T B‚Ä≤
/
Œ∑IC ‚äóidT B‚Ä≤ 
TB‚Ä≤
Œ∑T B‚Ä≤
/
idT B‚Ä≤
H
H
H
H
H
H
H
(monad
law)
$H
H
H
H
H
H
H
T Œ∑B‚Ä≤

T 2B‚Ä≤
¬µB

TIC ‚äóC TB‚Ä≤
dIC ,B‚Ä≤ 
(38)
T(IC ‚äóC B‚Ä≤)
T ‚ÑìC
B‚Ä≤
9s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
T 2B‚Ä≤
¬µB‚Ä≤
/ TB‚Ä≤
‚Äî Naturality of rD is obtained similarly, using (39) instead of (38).
‚Äî Œ±D, ‚ÑìD, rD are isomorphisms: indeed Œ±D = FT (Œ±C), Œ±C is an isomorphism, and every
functor preserves isomorphisms. Similarly for ‚ÑìD and rD. Since they are natural, they
are natural isomorphisms.
‚Äî Pentagon identity (14). We have to check that (dropping subscripts) Œ±D‚ó¶Œ±D =
(idD ‚äóD Œ±D)‚ó¶Œ±D‚ó¶(Œ±D ‚äóD idD). Note that the left-hand side is ¬µ ‚ó¶T (Œ∑ ‚ó¶Œ±C) ‚ó¶Œ∑ ‚ó¶Œ±C =
T Œ±C ‚ó¶Œ∑ ‚ó¶Œ±C = Œ∑ ‚ó¶Œ±C ‚ó¶Œ±C (by naturality of Œ∑, T f ‚ó¶Œ∑ = Œ∑ ‚ó¶f for any f). Now notice
75

that by (40), d ‚ó¶(Œ∑ ‚äóC Œ∑) = Œ∑. Also, ¬µ ‚ó¶T Œ∑ = id. So the right-hand side is:
¬µ ‚ó¶T (d ‚ó¶(Œ∑ ‚äóC (Œ∑ ‚ó¶Œ±C))) ‚ó¶[Œ±D‚ó¶(Œ±D ‚äóD idD)]
=
¬µ ‚ó¶T (d ‚ó¶(Œ∑ ‚äóC Œ∑)) ‚ó¶T (id ‚äóC Œ±C) ‚ó¶[Œ±D‚ó¶(Œ±D ‚äóD idD)]
=
¬µ ‚ó¶T Œ∑ ‚ó¶T (id ‚äóC Œ±C) ‚ó¶[Œ±D‚ó¶(Œ±D ‚äóD idD)]
(by (40))
=
T (id ‚äóC Œ±C) ‚ó¶[Œ±D‚ó¶(Œ±D ‚äóD idD)]
=
T (id ‚äóC Œ±C) ‚ó¶¬µ ‚ó¶T (Œ∑ ‚ó¶Œ±C) ‚ó¶(Œ±D ‚äóD idD)
=
T (id ‚äóC Œ±C) ‚ó¶T Œ±C ‚ó¶(Œ±D ‚äóD idD)
=
T (id ‚äóC Œ±C) ‚ó¶T Œ±C ‚ó¶d ‚ó¶((Œ∑ ‚ó¶Œ±C) ‚äóC Œ∑)
=
T (id ‚äóC Œ±C) ‚ó¶T Œ±C ‚ó¶d ‚ó¶(Œ∑ ‚äóC Œ∑) ‚ó¶(Œ±C ‚äóC id)
=
T (id ‚äóC Œ±C) ‚ó¶T Œ±C ‚ó¶Œ∑ ‚ó¶(Œ±C ‚äóC id)
(by (40))
=
Œ∑ ‚ó¶(id ‚äóC Œ±C) ‚ó¶Œ±C ‚ó¶(Œ±C ‚äóC id)
(by naturality of Œ∑)
and we are done, since by the pentagon identity (14) for Œ±C, Œ±C ‚ó¶Œ±C = (id ‚äóC Œ±C) ‚ó¶
Œ±C ‚ó¶(Œ±C ‚äóC id).
‚Äî Triangle identity (15). We must check that (idD ‚äóD ‚ÑìD)‚ó¶Œ±D = rD. The left-hand side
is ¬µ ‚ó¶T (d ‚ó¶(Œ∑ ‚äóC (Œ∑ ‚ó¶‚ÑìC)) ‚ó¶Œ∑ ‚ó¶Œ±C = ¬µ ‚ó¶T (d ‚ó¶(Œ∑ ‚äóC Œ∑) ‚ó¶(id ‚äóC ‚ÑìC)) ‚ó¶Œ∑ ‚ó¶Œ±C =
¬µ ‚ó¶T (Œ∑ ‚ó¶(id ‚äóC ‚ÑìC)) ‚ó¶Œ∑ ‚ó¶Œ±C (by (40)) = T (id ‚äóC ‚ÑìC) ‚ó¶Œ∑ ‚ó¶Œ±C (by the monad laws)
= Œ∑ ‚ó¶(id ‚äóC ‚ÑìC) ‚ó¶Œ±C (by naturality of Œ∑) = Œ∑ ‚ó¶rC (by the triangle identity (15) in C)
= rD, which is the right-hand side.
We must now check that FT ‚ä£UT is a monoidal adjunction. We already know that it
is an adjunction.
‚Äî (Œ∏FT , ŒπFT ) is mediating for F. Indeed, both Œ∏FT
A,B and ŒπFT are just identity morphisms
in D, from which the coherence conditions (16), (17) and (18) are clear. The Ô¨Årst
reduces to showing that FT (Œ±C) = Œ±D, the second to FT (‚ÑìC) = ‚ÑìD, the third to
FT (rC) = rD, which hold by construction.
‚Äî (Œ∏UT , ŒπUT ) is mediating for UT . Indeed, the Ô¨Årst coherence condition (16) is just Di-
agram (41), since UT Œ±D = UT FT Œ±C = T Œ±C. The second coherence condition (17) is
exactly Diagram (38), and the third, (18), is exactly Diagram (39).
‚Äî The unit Œ∑ and the counit «´ are monoidal natural transformations. (Recall that «´A
is the identity morphism from T A to T A in C, seen as a morphism from T A to A
in D.) Indeed, Diagram (49) (in C) means that Œ∑IC = UT (ŒπFT ) ‚ó¶ŒπUT = UT (id) ‚ó¶Œ∑IC,
which is obvious. Diagram (50) states that UT (Œ∏FT
A,B)‚ó¶Œ∏UT ‚ó¶(Œ∑A ‚äóC Œ∑B) = Œ∑A‚äóCB, i.e.,
dA,B ‚ó¶(Œ∑A ‚äóC Œ∑B) = Œ∑A‚äóCB, which is just Diagram (40). Turning to diagrams in D,
Diagram (51) means that «´ID‚ó¶FT (ŒπUT )‚ó¶ŒπFT is the identity in D; seen as a morphism
in C, this is
¬µ ‚ó¶T (id) ‚ó¶[FT (ŒπUT )‚ó¶ŒπFT ]
=
¬µ ‚ó¶[FT (ŒπUT )‚ó¶ŒπFT ]
=
¬µ ‚ó¶¬µ ‚ó¶T (FT (ŒπUT )) ‚ó¶ŒπFT
=
¬µ ‚ó¶¬µ ‚ó¶T (Œ∑T IC ‚ó¶Œ∑IC) ‚ó¶Œ∑IC = Œ∑IC
(by the monad laws), and the latter is just the identity on ID in D, as required. Finally,
Diagram (52) means that «´A‚äóDB‚ó¶FT Œ∏UT ‚ó¶Œ∏FT = «´A ‚äóD «´B. Seen as a morphism in C,
76

the left-hand side is
¬µA‚äóCB ‚ó¶T «´A‚äóDB ‚ó¶[FT Œ∏UT ‚ó¶Œ∏FT ]
=
¬µA‚äóCB ‚ó¶T id ‚ó¶[FT Œ∏UT ‚ó¶Œ∏FT ]
=
¬µA‚äóCB ‚ó¶[FT Œ∏UT ‚ó¶Œ∏FT ]
=
¬µA‚äóCB ‚ó¶¬µT (A‚äóCB) ‚ó¶T (FT Œ∏UT ) ‚ó¶Œ∏FT
=
¬µA‚äóCB ‚ó¶¬µT (A‚äóCB) ‚ó¶T (Œ∑T (A‚äóCB) ‚ó¶dA,B) ‚ó¶Œ∑A‚äóCB
which we recognize as the long trip in the diagram below from the top left corner
that goes down, right, and up to the top right corner.
TA ‚äóC TB
Œ∑A‚äóCB

dA,B
/
(natur-
ality
of Œ∑)
T(A ‚äóC B)
idT (A‚äóC B)
/
Œ∑T (A‚äóC B)

(monad law)
T(A ‚äóC B)
T(TA ‚äóC TB) T dA,B
/ T 2(A ‚äóC B)
T Œ∑T (A‚äóC B)
'O
O
O
O
O
O
O
O
O
O
O
idT 2(A‚äóC B)
(monad law)
/ T 2(A ‚äóC B)
¬µA‚äóC B
O
T 3(A ‚äóC B)
¬µT (A‚äóC B)
7o
o
o
o
o
o
o
o
o
o
o
Then the composition of arrows from the top left corner to the top right corner is
dA,B. This is exactly the desired morphism «´A ‚äóD «´D of D, which, seen as a morphism
of C, is dA,B ‚ó¶(idT A ‚äóC idT B) by deÔ¨Ånition.
We check Ô¨Ånally that FT ‚ä£UT generates the monoidal monad. The only thing to check
is dA,B = UT Œ∏FT
A,B ‚ó¶Œ∏UT
FT (A),FT (B). This is clear, since the right-hand side is UT (idA‚äóDB) ‚ó¶
dA,B = dA,B.
Appendix C. Composition of Monoidal Adjunctions
We Ô¨Årst show that |U| is a monoidal functor, with mediating pair (
Œ∏U ‚ó¶
,
ŒπU ‚ó¶
i).
We must check all three coherence conditions (16), (17), (18).
77

Diagram (16).
(|U(A)| ‚äó|U(B)|)
‚äó|U(C)|

/
‚äóid|U(C)| 
(coherence (16) for
)
|U(A)|‚äó
(|U(B)| ‚äó|U(C)|)
id|U(A)| ‚äó

|U(A) ‚äó‚äó‚äóU(B)|
‚äó|U(C)|

'O
O
O
O
O
O
O
O
|Œ∏U|‚äóid|U(C)| 
|U(A)|‚äó
|U(B) ‚äó‚äó‚äóU(C)|

woooooooo
id|U(A)| ‚äó|Œ∏U|

ÀõÀõU(A ‚äóD B)
ÀõÀõ
‚äó|U(C)|
 
(natur-
ality of
)
(| | applied to coherence (16) for Œ∏U)
ÀõÀõÀõÀõÀõÀõÀõ
(U(A)
‚äó‚äó‚äóU(B))
‚äó‚äó‚äóU(C)
ÀõÀõÀõÀõÀõÀõÀõ
|Œ±Œ±Œ±| /
|Œ∏U‚äó
‚äó
‚äóidU(C)|
wpppppppp
ÀõÀõÀõÀõÀõÀõÀõ
U(A)‚äó‚äó‚äó
(U(B)‚äó‚äó‚äó
U(C))
ÀõÀõÀõÀõÀõÀõÀõ
|idU(A)‚äó
‚äó
‚äóŒ∏U| 'N
N
N
N
N
N
N
N
(natur-
ality of
)
|U(A)|‚äó
ÀõÀõU(B ‚äóD C)
ÀõÀõ

ÀõÀõÀõÀõÀõ
U(A ‚äóD B)
‚äó‚äó‚äóU(C)
ÀõÀõÀõÀõÀõ
|Œ∏U| 
ÀõÀõÀõÀõÀõ
U(A)‚äó‚äó‚äó
U(B ‚äóD C)
ÀõÀõÀõÀõÀõ
|Œ∏U|

ÀõÀõÀõÀõÀõ
U((A ‚äóD B)
‚äóDC)
ÀõÀõÀõÀõÀõ
|UŒ±D|
/
ÀõÀõÀõÀõÀõ
U(A‚äóD
(B ‚äóD C))
ÀõÀõÀõÀõÀõ
Diagram (17).
I ‚äó|UA|
l|UA|
(R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
i‚äóid|UA|

|III| ‚äó|UA|
(coherence
condition
(17))
|ŒπU|‚äóid|UA|

III,UA
)S
S
S
S
S
S
S
S
S
S
S
S
S
S
S
ÀõÀõUIDÀõÀõ ‚äó|UA|
UID,UA

(natur-
ality
of
)
|III ‚äó‚äó‚äóUA|
|ŒπU‚äó
‚äó
‚äóidUA|
ullllllllllllll
|‚Ñì‚Ñì‚ÑìUA|
/ |UA|
ÀõÀõUID ‚äó‚äó‚äóUA
ÀõÀõ
(coherence
condition
(17))
ÀõÀõÀõÀõŒ∏U
ID,A
ÀõÀõÀõÀõ

ÀõÀõU(ID ‚äóD A)
ÀõÀõ
|U‚ÑìD
A|
6m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
Diagram (18). This is checked by a diagram similar to the latter.
By the same reasoning, FD
D
D is also a monoidal functor, with mediating pair (FŒ∏Œ∏Œ∏ ‚ó¶
Œ∏F , Fiii ‚ó¶ŒπF ).
We now check the monoidal adjunction conditions (49), (50), (51), (52). Let Àô«´ the
counit, and ÀôŒ∑ the unit of D
D
D ‚ä£| |, and «´«´«´ the counit, and Œ∑Œ∑Œ∑ the unit of F ‚ä£U.
78

Diagram (49).
I
i
/
ÀôŒ∑
i
((49) for D
D
D ‚ä£| |)
)R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
R
|III|
|ŒπU|
/
|iii|

|Œ∑Œ∑Œ∑III|
((49) for F ‚ä£U)
)T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
ÀõÀõUIDÀõÀõ
|UŒπF|

|D
D
DI|
|Œ∑Œ∑Œ∑D
D
DI|
)T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
T
(naturality
of |Œ∑Œ∑Œ∑|)
|UFIII|
|UF ID|

|UFD
D
DI|
Diagram (50).
A ‚äóB
ÀôŒ∑A‚äóÀôŒ∑B
/
ÀôŒ∑A‚äóB

((50) for
D
D
D ‚ä£| |)
|D
D
DA| ‚äó|D
D
DB|
|Œ∑Œ∑Œ∑D
D
DA|‚äó|Œ∑Œ∑Œ∑D
D
DB| /
D
D
DA,D
D
DBrrrr
yrrrr
(natur-
ality
of
)
|UFD
D
DA| ‚äó|UFD
D
DB|
UFD
D
DA,UFD
D
DB
xqqqqqqqqqq
|D
D
DA ‚äó‚äó‚äóD
D
DB|
|Œ∏Œ∏Œ∏A,B|www
{www
|Œ∑Œ∑Œ∑D
D
DA‚äó
‚äó
‚äóŒ∑Œ∑Œ∑D
D
DB| /
|Œ∑Œ∑Œ∑D
D
DA‚äó
‚äó
‚äóD
D
DB|

((50) for
F ‚ä£U)
|UFD
D
DA ‚äó‚äó‚äóUFD
D
DB|
|Œ∏U
FD
D
DA,FD
D
DB|
xrrrrrrrrrr
|D
D
D(A ‚äóB)|
|Œ∑Œ∑Œ∑D
D
D(A‚äóB)|

(natur-
ality
of |Œ∑Œ∑Œ∑|)
ÀõÀõU(FD
D
DA ‚äóD FD
D
DB)
ÀõÀõ
|UŒ∏F
D
D
DA,D
D
DB|
yssssssssss
|UF(D
D
DA ‚äó‚äó‚äóD
D
DB)|
|UFŒ∏Œ∏Œ∏A,B|
{vvvvvvvvv
|UFD
D
D(A ‚äóB)|
Diagrams (51) and (52) are dealt with similar, and give rise to similar veriÔ¨Åcations.
Appendix D. Proof of Proposition 8.6
Diagram (32) is obtained by considering the following diagram. We drop subscripts on
natural transformations so as to save space; they can be inferred from context.
I ‚äó|TTTD
D
DF|
ÀôŒ∑I‚äóid/
i‚äóid
O
O
O
O
O
(49)
'O
O
O
O
O
l|TT
TD
D
DF |
2
(17)
|D
D
DI| ‚äó|TTTD
D
DF|

/ |D
D
DI ‚äó‚äó‚äóTTTD
D
DF|
|ttt| / |TTT(D
D
DI ‚äó‚äó‚äóD
D
DF)|
|TTTŒ∏Œ∏Œ∏| / |TTTD
D
D(I ‚äóF)|
|TTTD
D
D
lF |

|III| ‚äó|TTTD
D
DF|
|iii|‚äóid
O

/
(natural-
ity of
)
|III ‚äó‚äó‚äóTTTD
D
DF|
|iii‚äó
‚äó
‚äóid|
O
|ttt|
/
(natural-
ity of |TTT|)
|‚Ñì‚Ñì‚ÑìT
TTD
D
DF |
1
|TTT(III ‚äó‚äó‚äóD
D
DF)|
|TTT (iii‚äó
‚äó
‚äóid)|
O
|TTT‚Ñì‚Ñì‚ÑìD
D
DF |
P
P
P
P
P
'P
P
P
P
P
|TTT (17)|
(32)
|TTTD
D
DF|
We have also decorated the interior of each face with the justiÔ¨Åcation why its edges
commute. For example, the top left triangle is a copy of (49), one of the diagrams stating
79

that the adjunction is monoidal. The bottom face, whose bottom edge is a curved arrow,
commutes by the coherence square (17) for
. The rightmost parallelogram commutes by
|TTT| applied to another coherence square (17), this time for Œ∏Œ∏Œ∏. Now the topmost compo-
sition of arrows is
tI,F, the bottommost arrow from I ‚äó|TTTD
D
DF| to |TTTD
D
DF| is
lTF , and the
rightmost vertical arrow is TlF .
Diagram (33). This is the diagram below. We recognize
tE,F as the rightmost composi-
tion of vertical arrows, idE ‚äó
F as the topmost composition of horizontal arrows, and
E‚äóF is the diagonal from E ‚äóF to |TTTD
D
D(E ‚äóF)|.
E ‚äóF
id‚äóÀôŒ∑F
/
ÀôŒ∑E‚äóÀôŒ∑F
T
T
T
T
T
T
T
T
*T
T
T
T
T
T
(functoriality of ‚äó)
ÀôŒ∑E‚äóF
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
(monoidal
adjunction
(50))
E ‚äó|D
D
DF|
id‚äó|Œ∑Œ∑Œ∑D
D
DF |
/ E ‚äó|TTTD
D
DF|
ÀôŒ∑E‚äóid

|D
D
DE| ‚äó|D
D
DF|
id‚äó|Œ∑Œ∑Œ∑D
D
DF |
/
D
D
DE,D
D
DF

(naturality of
)
|D
D
DE| ‚äó|TTTD
D
DF|
D
D
DE,TT
TD
D
DF

|D
D
DE ‚äó‚äó‚äóD
D
DF|
|id‚äó
‚äó
‚äóŒ∑Œ∑Œ∑D
D
DF |
/
|Œ∑Œ∑Œ∑D
D
DE‚äó
‚äó
‚äóD
D
DF|
(strength law (33))
*V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
|Œ∏Œ∏Œ∏E,F |

|D
D
DE ‚äó‚äó‚äóTTTD
D
DF|
|tttD
D
DE,D
D
DF |

|D
D
D(E ‚äóF)|
|Œ∑Œ∑Œ∑D
D
D(E‚äóF )|
*V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V
V(naturality of |Œ∑Œ∑Œ∑|) |TTT(D
D
DE ‚äó‚äó‚äóD
D
DF)|
|TTTŒ∏Œ∏Œ∏E,F |

|TTTD
D
D(E ‚äóF)|
Diagram (34). For reasons of space, we Ô¨Çip the diagram so that arrows involving strengths
are vertical, and arrows involving associativities are horizontal. Again, we drop most
80

subscripts from natural transformations, which are inferrable from context.
(E ‚äóF)
‚äó|TTTD
D
DG|
(naturality of
)
(monoidal
adjunction
(50))

/
( ÀôŒ∑E‚äóÀôŒ∑F )‚äóid
::::::::::::::::::
ÀôŒ∑E‚äóF ‚äóid

E ‚äó(F‚äó
|TTTD
D
DG|)
id‚äó( ÀôŒ∑F ‚äóid)

E ‚äó(|D
D
DF|‚äó
|TTTD
D
DG|)
ÀôŒ∑E‚äóid
yssssssssss
id‚äó

(|D
D
DE|‚äó
|D
D
DF|)
‚äó|TTTD
D
DG|

/
‚äóid 
(coherence
(16)
of
)
|D
D
DE|‚äó
(|D
D
DF|‚äó
|TTTD
D
DG|)
id‚äó
(functor-
iality of
‚äó)
E‚äó
|D
D
DF ‚äó‚äó‚äóTTTD
D
DG|
id‚äó|t|

|D
D
D(E ‚äóF)|
‚äó|TTTD
D
DG|


(naturality
of
)
ÀõÀõÀõÀõÀõ
D
D
DE
‚äó‚äó‚äóD
D
DF
ÀõÀõÀõÀõÀõ
‚äó|TTTD
D
DG|
|Œ∏Œ∏Œ∏|‚äóid
=|Œ∏Œ∏Œ∏|‚äó|id|
o


|D
D
DE|‚äó
ÀõÀõÀõÀõÀõ
D
D
DF‚äó‚äó‚äó
TTTD
D
DG
ÀõÀõÀõÀõÀõ

|yyyyyyyy
id‚äó|ttt|

E‚äó
|TTT(D
D
DF ‚äó‚äó‚äóD
D
DG)|
id‚äó|TTTŒ∏Œ∏Œ∏|

ÀõÀõÀõÀõÀõ
D
D
D(E ‚äóF)
‚äó‚äó‚äóTTTD
D
DG
ÀõÀõÀõÀõÀõ
|ttt|

(naturality
of |ttt|)
ÀõÀõÀõÀõÀõÀõÀõ
(D
D
DE
‚äó‚äó‚äóD
D
DF)
‚äó‚äó‚äóTTTD
D
DG
ÀõÀõÀõÀõÀõÀõÀõ
|Œ∏Œ∏Œ∏‚äó
‚äó
‚äóid|
=|Œ∏Œ∏Œ∏‚äó
‚äó
‚äóTTT id|
o
|ttt|

|Œ±Œ±Œ±|
/
ÀõÀõÀõÀõÀõÀõÀõ
D
D
DE‚äó‚äó‚äó
(D
D
DF‚äó‚äó‚äó
TTTD
D
DG)
ÀõÀõÀõÀõÀõÀõÀõ
|id‚äó
‚äó
‚äóttt|

|D
D
DE|‚äó
ÀõÀõÀõÀõÀõ
TTT(D
D
DF
‚äó‚äó‚äóD
D
DG)
ÀõÀõÀõÀõÀõ
id‚äó|TTTŒ∏Œ∏Œ∏|
GGG
#G
G
G
G
G
E‚äó
|TTTD
D
D(F ‚äóG)|
ÀôŒ∑E‚äóid

ÀõÀõÀõÀõÀõÀõÀõ
TTT
0
B
@
D
D
D(E
‚äóF)
‚äó‚äó‚äóD
D
DG
1
C
A
ÀõÀõÀõÀõÀõÀõÀõ
|TTTŒ∏Œ∏Œ∏|

(coherence |TTT(16)| of Œ∏Œ∏Œ∏)
ÀõÀõÀõÀõÀõÀõÀõ
TTT
0
B
@
(D
D
DE‚äó‚äó‚äó
D
D
DF)
‚äó‚äó‚äóD
D
DG
1
C
A
ÀõÀõÀõÀõÀõÀõÀõ
|TTT (Œ∏Œ∏Œ∏‚äó
‚äó
‚äóid)|
o
|TTTŒ±Œ±Œ±|
#H
H
H
H
H
H
H
(strength
law (34)) ÀõÀõÀõÀõÀõÀõÀõ
D
D
DE‚äó‚äó‚äó
TTT(D
D
DF
‚äó‚äó‚äóD
D
DG)
ÀõÀõÀõÀõÀõÀõÀõ
|id‚äó
‚äó
‚äóTTTŒ∏Œ∏Œ∏|
S
S
S
S
S
S
S
S
S
S
S
)S
S
S
S
S
S
S
S
S
|ttt|

(naturality
of
)
|D
D
DE|‚äó
|TTTD
D
D(F ‚äóG)|


ÀõÀõÀõÀõÀõÀõÀõ
TTT
0
B
@
D
D
DE‚äó‚äó‚äó
(D
D
DF‚äó‚äó‚äó
D
D
DG)
1
C
A
ÀõÀõÀõÀõÀõÀõÀõ
|TTT (id‚äó
‚äó
‚äóŒ∏Œ∏Œ∏)|
T
T
T
T
T
T
T
T
)T
T
T
T
T
T
T
(naturality
of |ttt|)
ÀõÀõÀõÀõÀõ
D
D
DE‚äó‚äó‚äó
TTTD
D
D(F ‚äóG)
ÀõÀõÀõÀõÀõ
|ttt|

ÀõÀõÀõÀõÀõTTT
 
D
D
DE‚äó‚äó‚äó
D
D
D(F ‚äóG)
!ÀõÀõÀõÀõÀõ
|TTTŒ∏Œ∏Œ∏|

ÀõÀõÀõÀõÀõÀõÀõ
TTTD
D
D
0
B
@
(E
‚äóF)
‚äóG
1
C
A
ÀõÀõÀõÀõÀõÀõÀõ
|TTTD
D
D
|
/
ÀõÀõÀõÀõÀõTTTD
D
D
 
E‚äó
(F ‚äóG)
!ÀõÀõÀõÀõÀõ
The vertical arrows on the left compose to form tA‚äóCB,C, while the vertical arrows on
the right compose to form id ‚äóC tB,C followed by tA,B‚äóCC, whence the result.
81

Diagram (35). This is the diagram below. Again, the diagram is Ô¨Çipped sideways, and
certain subscripts have been dropped. The topmost arrow from E ‚äó|TTTD
D
D|TTTD
D
DF|| to E ‚äó
|TTTD
D
DF| is idE ‚äó
F by deÔ¨Ånition, while the bottommost arrow from |TTTD
D
D|TTTD
D
D(E ‚äóF)|| to
|TTTD
D
D(E ‚äóF)| is ¬µ¬µ¬µE‚äóF . The rightmost composition of vertical arrows, from E ‚äó|TTTD
D
DF| to
|TTTD
D
D(E ‚äóF)| is ¬µ¬µ¬µE‚äóF , is
tE,F , and the lefmost one is
tE,TF followed by TtE,F . (Recall
that T = |TTTD
D
D|.)
E ‚äó
ÀõÀõTTTD
D
D|TTTD
D
DF|
ÀõÀõ
idE‚äó|TTT Àô«´TT
TD
D
DF |
/
ÀôŒ∑E‚äóid

(functoriality of ‚äó)
E ‚äó
ÀõÀõTTT 2D
D
DF
ÀõÀõ
idE‚äó|¬µ¬µ¬µD
D
DF | / E ‚äó|TTTD
D
DF|
ÀôŒ∑E‚äóid|T
T
TD
D
DF |

|D
D
DE| ‚äó
ÀõÀõTTTD
D
D|TTTD
D
DF|
ÀõÀõ
id‚äó|TTT Àô«´TT
TD
D
DF |
=|id|‚äó|TTT Àô«´TT
TD
D
DF |
/
D
D
DE,TT
TD
D
D|TT
TD
D
DF |

(naturality
of
)
|D
D
DE| ‚äó
ÀõÀõTTT 2D
D
DF
ÀõÀõ
D
D
DE,TT
T 2D
D
DF

|id|‚äó|¬µ¬µ¬µD
D
DF |
)R
R
R
R
R
R
R
R
R
R
R
R
R
R
(naturality
of
)
ÀõÀõD
D
DE ‚äó‚äó‚äóTTTD
D
D|TTTD
D
DF|
ÀõÀõ
|id‚äó
‚äó
‚äóTTT Àô«´TT
TD
D
DF |
/
|tttD
D
DE,D
D
D|T
T
TD
D
DF ||

(naturality
of |ttt|)
ÀõÀõD
D
DE ‚äó‚äó‚äóTTT 2D
D
DF
ÀõÀõ
|tttD
D
DE,TT
TD
D
DF|

|id‚äó
‚äó
‚äó¬µ¬µ¬µD
D
DF |
!C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
|D
D
DE| ‚äó|TTTD
D
DF|
D
D
DE,TT
TD
D
DF

ÀõÀõTTT(D
D
DE ‚äó‚äó‚äóD
D
D|TTTD
D
DF|)
ÀõÀõ
|TTT (id‚äó
‚äó
‚äóÀô«´TT
TD
D
DF )|
/
(adjunction law)
|TTT (D
D
D ÀôŒ∑E‚äó
‚äó
‚äóidD
D
D|TT
TD
D
DF | )|
O
O
O
O
O
O
'OO
|TTTŒ∏Œ∏Œ∏E,|T
TTD
D
DF ||

|TTT(D
D
DE ‚äó‚äó‚äóTTTD
D
DF)|
|TTTtttD
D
DE,D
D
DF|

ÀõÀõTTTD
D
D(E ‚äó|TTTD
D
DF|)
ÀõÀõ
|TTTD
D
D( ÀôŒ∑E‚äóid|TT
TD
D
DF | )|

(natur-
ality
of |TTTŒ∏Œ∏Œ∏|)
ÀõÀõÀõÀõÀõTTT
 
D
D
D|D
D
DE|‚äó‚äó‚äó
D
D
D|TTTD
D
DF|
!ÀõÀõÀõÀõÀõ
|TTT (Àô«´D
D
DE‚äó
‚äó
‚äóÀô«´TT
TD
D
DF )|
p
p
8p
p
p
p
p
p
|TTTŒ∏Œ∏Œ∏|D
D
DE|,|T
T
TD
D
DF ||
woooooooooooo
|D
D
DE ‚äó‚äó‚äóTTTD
D
DF|
|tttD
D
DE,D
D
DF |

ÀõÀõTTTD
D
D(|D
D
DE| ‚äó|TTTD
D
DF|)
ÀõÀõ
|TTTD
D
D
D
D
DE,TT
TD
D
DF|

ÀõÀõTTT 2(D
D
DE ‚äó‚äó‚äóD
D
DF)
ÀõÀõ
|¬µ¬µ¬µD
D
DE‚äó
‚äó
‚äóD
D
DF|
)R
R
R
R
R
R
R
R
R
R
R
R
R
R
(strength law |(35)|)
|TTT 2Œ∏Œ∏Œ∏E,F|

ÀõÀõTTTD
D
D|D
D
DE ‚äó‚äó‚äóTTTD
D
DF|
ÀõÀõ
|TTT Àô«´D
D
DE‚äó
‚äó
‚äóT
T
TD
D
DF|
F
monoidal
adjunction
law |TTT(52)|
ÀõÀõÀõTTTD
D
D|tttD
D
DE,D
D
DF|
ÀõÀõÀõ

|TTT(D
D
DE ‚äó‚äó‚äóD
D
DF)|
|TTTŒ∏Œ∏Œ∏E,F|

ÀõÀõTTTD
D
D|TTT(D
D
DE ‚äó‚äó‚äóD
D
DF)|
ÀõÀõ
|TTT Àô«´TT
T (D
D
DE‚äó
‚äó
‚äóD
D
DF )|
=
(naturality of |TTT Àô«´|)
ÀõÀõÀõTTTD
D
D|TTTŒ∏Œ∏Œ∏E,F |
ÀõÀõÀõ

ÀõÀõTTTD
D
D|TTTD
D
D(E ‚äóF)|
ÀõÀõ
|TTT Àô«´TT
TD
D
D(E‚äóF )|
/
(naturality of |TTT Àô«´|)
ÀõÀõTTT 2D
D
D(E ‚äóF)
ÀõÀõ
|¬µ¬µ¬µD
D
D(E‚äóF )|
/ |TTTD
D
D(E ‚äóF)|
(naturality
of |¬µ¬µ¬µ|)
Diagram (36). Again, we Ô¨Çip the diagram sideways. We recognize |tttA1,A2| as the right-
most vertical arrow,
t|A1|,|A2| as the leftmost composition of vertical arrows, id|A1| ‚äóœÉA2
followed by
A1,TTT A2 on the top row, and T(A1,A2) followed by œÉA1‚äó
‚äó
‚äóA2 on the bottom
82

row.
|A1| ‚äó
ÀõÀõTTTD
D
D|A2|
ÀõÀõ
id|A1| ‚äó|TTT Àô«´A2| /
ÀôŒ∑|A1| ‚äóid

(functoriality
of ‚äó)
|A1| ‚äó|TTTA2|
id
(adjunction law)
/
ÀôŒ∑|A1| ‚äóid

|A1| ‚äó|TTTA2|
A1,TT
T A2 / |A1 ‚äó‚äó‚äóTTTA2|
|tttA1,A2|

(naturality
of |ttt|)
ÀõÀõD
D
D|A1|
ÀõÀõ ‚äó
ÀõÀõTTTD
D
D|A2|
ÀõÀõ
|id|‚äó|TTT Àô«´A2|/
D
D
D|A1|,TT
TD
D
D|A2|

(naturality
of
)
ÀõÀõD
D
D|A1|
ÀõÀõ ‚äó|TTTA2|
| Àô«´A1|‚äóid|T
T
T A2|
l
l
l
l
6l
l
l
l
l
D
D
D|A1|,TT
T A2

ÀõÀõD
D
D|A1| ‚äó‚äó‚äóTTTD
D
D|A2|
ÀõÀõ |id‚äó
‚äó
‚äóTTT Àô«´A2| /
(naturality
of |ttt|)
ÀõÀõÀõtttD
D
D|A1|,D
D
D|A2|
ÀõÀõÀõ

ÀõÀõD
D
D|A1| ‚äó‚äó‚äóTTTA2
ÀõÀõ
|Àô«´A1‚äó
‚äó
‚äóidT
TT A2|
6m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
m
(naturality
of
)
ÀõÀõÀõtttD
D
D|A1|,A2
ÀõÀõÀõ

ÀõÀõTTT(D
D
D|A1| ‚äó‚äó‚äóD
D
D|A2|)
ÀõÀõ|TTT (id‚äó
‚äó
‚äóÀô«´A2 )|/
ÀõÀõÀõTTTŒ∏Œ∏Œ∏|A1|,|A2|
ÀõÀõÀõ

(monoidal natural
transformation law |TTT(52)|)
ÀõÀõTTT(D
D
D|A1| ‚äó‚äó‚äóA2)
ÀõÀõ
|TTT (Àô«´A1‚äó
‚äó
‚äóidA2 )|
,X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
ÀõÀõTTTD
D
D(|A1| ‚äó|A2|)
ÀõÀõ
|TTTD
D
D
A1,A2|
/ ÀõÀõTTTD
D
D|A1 ‚äó‚äó‚äóA2|
ÀõÀõ
|TTT Àô«´A1‚äó
‚äó
‚äóA2|
/ |TTT(A1 ‚äó‚äó‚äóA2)|
83

