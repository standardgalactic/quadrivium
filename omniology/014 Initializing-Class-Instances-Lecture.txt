©2019 MathByte Academy

Initializing Class Instances
When we instantiate a class, by default Python does two separate things:
à creates a new instance of the class
à initializes the namespace of the class
class MyClass:
language = 'Python'
obj = MyClass()
obj.__dict__ à {}
We can provide a custom initializer method that Python will use instead of its own:
class MyClass:
language = 'Python'
def __init__(obj, version):
obj.version = version
notice that __init__ is defined to 
work as a bound instance method
©2019 MathByte Academy

Deconstructing  this…
class MyClass:
language = 'Python'
def __init__(obj, version):
obj.version = version
language is a class attribute
à in class namespace
__init__ is a class attribute
à in class namespace
(as a function)
when we call MyClass('3.7')
à Python creates a new instance of the object with an empty namespace
à if we have defined an __init__ function in the class
à it calls obj.__init__('3.7')
à bound method
à MyClass.__init__(obj, '3.7')
à our function runs and adds version to obj's namespace
à version is an instance attribute
obj.__dict__ à {'version': '3.7'} 
a standard convention is to use an argument named self
self (convention)
©2019 MathByte Academy

Important!
By the time __init__ is called
Python has already created the object and a namespace for it (like a __dict__ in most cases)
then __init__ is called as a method bound to the newly created instance
We can actually also specify a custom function to create the object
__new__
we'll come back to this later
But __init__ is not creating the object, it is only running some code after the 
instance has been created
©2019 MathByte Academy

Coding
©2019 MathByte Academy

