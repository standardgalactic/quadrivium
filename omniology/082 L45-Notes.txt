Peter Dalmaris
Lecture 45
Arduino Step by Step
SD card storage 
Local ﬁle storage 
The Arduino has a tiny amount of memory in which a sketch can store data, or where the 
sketch itself is being kept. 
The ATmega micro-controllers in the Arduino contain 3 types of memory: SRAM, ﬂash, and 
EEPROM. 
Static RAM (static random-access memory) is volatile, and is where your sketches store 
values that belong to variables from things like sensor readings. Volatile memory is cheap 
and fast, but as soon as power is lost, it is erased. Therefore, it is only used as a temporary 
place to store data. 
In an expression like int ledPin = 13, you are storing the number “13” in static RAM. In 
the Arduino Uno where the ATmega 328 is used, there are only two thousand bytes 
available in the static RAM. It sounds like its a lot, but it isn’t. Your computer probably has a 
million times more RAM available to the programs that run on it. 
Flash memory is non-volatile, so when power is turned oﬀ, its contents remain safe. Flash is 
where your sketches and the Arduino bootloader (a special program that helps the Arduino 
start executing the sketch when power is applied, or with uploading a new sketch) are 
stored. The ATmega 328 has 32k bytes of this memory. You don’t normally use this memory 
to store data, but you can if you want to (this is a topic for another lecture, but for the very 
curious of you, have a look at the PROGMEM keyword). 
Finally, EEPROM (Electrically Erasable Programmable Read-Only Memory), like ﬂash, is also 
non-volatile. It is a good place to store data permanently that should not be erased in case 
a new sketch is uploaded. Things like serial numbers, ids and the like can be stored here. 
The ATmega 328 has only 1k byte of EEPROM available, so it is deﬁnitely not mass storage. 
On the Arduino, on-board storage is very limited. For applications like data logging, or 
running a web server with multiple pages and images, the build-in memory is not enough, 
so we turn to SD cards for help. 
SD cards 
SD cards have matured over the years. Their sizes have expanded 
to many giga-bytes, and their prices have dropped to a few cents 
per gigabyte. Compared to build-in memory, SD cards oﬀer a really 
good mass storage solution. On the Arduino, an SD card can be 
used with the appropriate hardware extension and with an easy to 
use library that comes with the IDE. Your Arduino Ethernet shield 
comes with a micro-SD card slot, but you can also get them as a 
separate breakout board.  
#1

Peter Dalmaris
Lecture 45
Arduino Step by Step
In this lecture, I will show you how to take 
advantage of SD card mass storage using 
a cheap (less than $2 on eBay) breakout. 
You will need a breakout like the one in this 
image, and an SD card. I’m using an 
ancient 256MB card in my demos, which 
works just ﬁne. 
You could also use a micro-SD card 
breakout like this one; the instructions to 
get it working are identical. 
Before getting into the demo, there’s one 
thing I need to discuss: the SPI buss. 
The SPI bus 
The SPI (Serial Peripheral Interface) bus is a way of connecting multiple slave devices to a 
master. Unlike I2C, which we played with back in lecture 9 where we learned about the 
BMP08 barometric sensor, the SPI bus provides full duplex (two-way) communication 
between master and slave using two wires. The I2C interface supports half-duplex, so that 
data can ﬂow only one way at a time. There is also a wire that provides a clock signal to the 
slave so that both devices are synchronised, and a fourth wire that is used for selecting one 
of the many slave devices that may be available. 
In summary, this table shows the pins used by the SPI bus, which we will be using to 
connect the breakout board to the Arduino: 
The SPI bus oﬀers itself as a topic for a full lecture, so I will not go into more details now. 
For now, simply keep in mind the functions of each of the SPI bus pins. 
Pin
Stands for…
Purpose…
CS or SS
Chip Select OR Slave Select
Selects a slave device
MOSI
Master Out Slave In
The master device uses it to transmit data to the 
slave device
SCLK
Shared/Serial Clock
Used to syncronise the master and slave devices
MISO
Master In Slave Out
The slave device uses it to transmit data to the 
master device
#2

Peter Dalmaris
Lecture 45
Arduino Step by Step
Demo 1: Connect and get card info 
Here is what we’ll do in the ﬁrst Demo: 
1.
We will connect the SD card breakout to the Arduino. 
2.
We will prepare an SD card for use with the breakout. 
3.
We will upload a sketch that prints out information about the card and conﬁrm that it 
works. 
Connection 
The pins which we should use to connect 
the breakout depend on the Arduino you 
are using. On an Arduino Uno, these pins 
are: 
• MOSI on digital pin 11 
• MISO on digital pin 12 
• CLK on digital pin 13 
• CS can vary, but to keep things tidy I use 
digital pin 10. 
• Power: some boards work with either 
3.3V or 5V, or both. The one I use in this 
demo works with both, and I connected 
it to the 5V pin on the Arduino. Be careful 
in case yours only accepts 3.3V to not 
connect it to the 5V pin on the Arduino! 
• Ground: connect to a GND pin on the 
Arduino. 
Done with the wirings, so let’s move on to the sketch. 
Prepare an SD card 
The Arduino SD card library works with SD cards that contains FAT16 or FAT32 partitions.  
Most SD cards will work out of the box. However, if you are having any issues that prevent 
you from using it with the Arduino, it is a good idea to format it. On a Mac, you can do this 
by using the Disk Utility, and on Windows by right-clicking on the SD Card icon and clicking 
on the Format option.  
Once your SD card is formatted and ready, insert it into the SD card slot and plug the 
Arduino to your computer. Let’s have a look at the ﬁrst sketch. 
#3

Peter Dalmaris
Lecture 45
Arduino Step by Step
Sketch 
Let’s try something simple ﬁrst: Get information about our SD card. 
The sketch we’ll look at makes use of un-documented classes in the SD library. Typically a 
vendor does not provide documentation for certain features because they either had no 
time to write it up, or because they don’t want users to know about them. In this case, this 
library has been out for some time now, so it is more likely that Arduino (the company) does 
not want you to use certain features as they are probably subject to change. But since they 
are used in some of the examples that come with the IDE, we can try them out and see 
what they do! 
Open the CardInfo sketch by clicking on File —> Examples —> SD —> CardInfo. Here’s 
what you get (slightly edited from the original): 
#4
#include <SD.h> 
Sd2Card card; 
SdVolume volume; 
SdFile root; 
const int chipSelect = 10;     
void setup() 
{ 
  Serial.begin(9600); 
  Serial.print("\nInitializing SD card..."); 
  pinMode(10, OUTPUT);     // change this to 53 on a mega 
  if (!card.init(SPI_HALF_SPEED, chipSelect)) { 
    Serial.println("initialization failed. Things to check:"); 
    Serial.println("* is a card is inserted?"); 
    Serial.println("* Is your wiring correct?"); 
    Serial.println("* did you change the chipSelect pin to match your shield or 
module?"); 
    return; 
  } else { 
   Serial.println("Wiring is correct and a card is present.");  
  } 
  // print the type of card 
  Serial.print("\nCard type: "); 
  switch(card.type()) { 
    case SD_CARD_TYPE_SD1: 
      Serial.println("SD1"); 
      break; 
    case SD_CARD_TYPE_SD2: 
      Serial.println("SD2"); 
      break; 
    case SD_CARD_TYPE_SDHC: 
      Serial.println("SDHC"); 
      break; 
    default: 
      Serial.println("Unknown"); 
  } 
Sd2Card, SdVolume and SdFile are classes in the SD 
library that not documented. We use them here as a way to 
access information about the SD card, volumes in the card, 
and the root. Because they are not documented, they 
could change at any time so you should avoid using them 
in your sketches.
We’ll use digital pin 10 as Slave Select for the SD breakout.
This tries to initialise the card object.
Retrieve the type of SD you are using.

Peter Dalmaris
Lecture 45
Arduino Step by Step
… continues from previous page … 
#5
  // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32 
  if (!volume.init(card)) { 
    Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted 
the card"); 
    return; 
  } 
  // print the type and size of the first FAT-type volume 
  uint32_t volumesize; 
  Serial.print("\nVolume type is FAT"); 
  Serial.println(volume.fatType(), DEC); 
  Serial.println(); 
   
  volumesize = volume.blocksPerCluster();    // clusters are collections of blocks 
  volumesize *= volume.clusterCount();       // we'll have a lot of clusters 
  volumesize *= 512;                         // SD card blocks are always 512 bytes 
  Serial.print("Volume size (bytes): "); 
  Serial.println(volumesize); 
  Serial.print("Volume size (Kbytes): "); 
  volumesize /= 1024; 
  Serial.println(volumesize); 
  Serial.print("Volume size (Mbytes): "); 
  volumesize /= 1024; 
  Serial.println(volumesize); 
   
  Serial.println("\nFiles found on the card (name, date and size in bytes): "); 
  root.openRoot(volume); 
   
  // list all files in the card with date and size 
  root.ls(LS_R | LS_DATE | LS_SIZE); 
} 
void loop(void) { 
  
}
Tries to get a handle on a valid partition
If there is no valid partition, exit this function (program 
ends)
Gets and prints out statistics about the SD 
card.

Peter Dalmaris
Lecture 45
Arduino Step by Step
When you run this sketch on your Arduino, you will see something like this, assuming that 
your SD card is properly formatted: 
#6

Peter Dalmaris
Lecture 45
Arduino Step by Step
Demo 2 
Demo 1 was about getting the SD card 
breakout working. Now, let’s make use of 
it. Let’s start logging sensor data onto our 
card, and then use the card on the 
computer to do some basic data analysis 
ad plotting. 
We’ll use another slightly modiﬁed example 
that comes with the IDE.  
For this demo, use the hardware from 
Demo 1 with the addition of a photo-
resistor, a thermistor, and a 1kΩ resistor 
used as voltage dividers for the sensors. 
A thermistor is an analog sensor that 
changes its resistance depending on the 
temperature. Electrically, it works like the 
photo-resistor. 
Here’s is the sketch. My changes are 
highlighted in red, and commends are in 
bubbles. 
This sketch represents the recommended 
way to access and use an SD card. 
… continues next page … 
#7

Peter Dalmaris
Lecture 45
Arduino Step by Step
Other than the comments in the code box above, it is worth mentioning that with the 
print(data) function you can write ASCII text to the SD card. If you want to write numbers, 
you can use print(data, BASE), where BASE can be BIN for binary, DEC for decimal, HEX 
for hexadecimal and OCT for octal. 
You can also write bytes or arrays of bytes by using the write(data) or write(buﬀer, length) 
function. This way of writing to the card may have a better performance and it is something 
worth while remembering if you are building a higher-speed data logger.  
#8
#include <SD.h> 
const int chipSelect = 10; 
void setup() 
{ 
  Serial.begin(9600); 
  Serial.print("Initializing SD card..."); 
  pinMode(10, OUTPUT); 
  if (!SD.begin(chipSelect)) { 
    Serial.println("Card failed, or not present"); 
    return; 
  } 
  Serial.println("card initialized."); 
} 
void loop() 
{ 
  String dataString = ""; 
  for (int analogPin = 0; analogPin < 2; analogPin++) { 
    int sensor = analogRead(analogPin); 
    dataString += String(sensor); 
    if (analogPin < 1) { 
      dataString += ",";  
    } 
  } 
  File dataFile = SD.open("datalog.txt", FILE_WRITE); 
  if (dataFile) { 
    dataFile.println(dataString); 
    dataFile.close(); 
    Serial.println(dataString); 
  }   
  else { 
    Serial.println("error opening datalog.txt"); 
  }  
}
Include the SD library.
Use digital pin 10 as the slave select pin (SPI bus).
Attempt to initialise the SD device.
If the device can’t be initialised, exit the setup function 
and end execution of this program.
Initialise the string use to construct the record that 
eventually will be stored in a ﬁle on the SD card. 
Instead of a String, you could use a PString as was 
shown in the Ethernet lectures. 
Connect analog sensors 
to pins 0 and 1, and loop 
through them. Take a 
reading from each one, 
convert to a String and 
add it to the dataString, 
then append a comma 
so that values are 
separated.
SD.open attempts to open the ﬁle, with write 
permissions. If a ﬁle cannot be opened, the 
function will return FALSE. If it can, it will 
return an object of type File.
You can save text to a ﬁle like 
you do with a serial connection: 
just call the print or println 
function on the ﬁle object 
(dataﬁle, in this example).
Remember to call the close function on the File 
object in order to commit any changes.

Peter Dalmaris
Lecture 45
Arduino Step by Step
Another point worth remembering is that the write speed 
depends on several conditions: the actual speed of the SD 
card (although modern SD cards are much faster than the 
Arduino’s ability to write on them), the speed of the SPI 
bus, the sampling rate of your project, the type of data you 
are writing (ASCII is slower than bytes). If you hit a 
performance block, try to determine the slowest 
component of the system and try to ﬁnd a way to optimise 
it. 
Here’s the monitor output as sensor data are being 
captured (right): 
Remove the SD card from the Arduino and insert it in your 
computer’s card reader.  
You’ll see something like this (below): 
The time stamp for the DATALOG.TXT ﬁle is 1 Jan 2000 
because the Arduino does not have a real time clock, so 
time will initialise to this date every time it is reset. I will 
show you how to use a real time clock in another lecture. 
Finally, open the DATALOG.TXT ﬁle. You will see something 
like this: multiple lines containing the sensor readings, 
delimited by a comma. It’s a standard text ﬁle that you can 
import to a spreadsheeting program for analysis and 
charting. 
#9

Peter Dalmaris
Lecture 45
Arduino Step by Step
Demo 3 
In this last demo, we’ll look at how we can browse directories and ﬁles stored on your SD 
card. This is useful in order to create and maintain a hierarchical ﬁle system in which ﬁles 
are stored. Even though it is unusual for an Arduino sketch to be managing too many ﬁles, 
basic ﬁle management can be setup by creating folders and putting ﬁles in them, instead of 
placing everything in the root (which is still a folder).  
Looking at the SD class documentation, you see functions like mkdir() and rmdir() which 
create or remove a directory, and exists() which checks for the existence of a ﬁle or 
directory. 
This example sketch comes with the IDE and browses the ﬁle system on the SD card and 
prints out the directories and their contents. 
The sketch in this Demo contains a recursive structure, which simply means a function 
that calls itself. It sounds fancy, but it is merely a convenient way to code operations that 
repeat themselves. 
In the sketch that follows, I have provided annotations for only those parts that we haven’t 
already seen in Demos 1 and 2. 
… see next page … 
#10

Peter Dalmaris
Lecture 45
Arduino Step by Step
#11
#include <SD.h> 
File root; 
void setup() 
{ 
  Serial.begin(9600); 
  Serial.print("Initializing SD card..."); 
  pinMode(10, OUTPUT); 
  if (!SD.begin(10)) { 
   Serial.println("initialization failed!”); 
   return; 
  } 
  Serial.println("initialization done."); 
  root = SD.open("/"); 
  printDirectory(root, 0);   
  Serial.println("done!"); 
} 
void loop() 
{  } 
void printDirectory(File dir, int numTabs) { 
  while(true) { 
     File entry =  dir.openNextFile(); 
     if (! entry) { 
      break; 
     } 
     for (uint8_t i=0; i<numTabs; i++) { 
       Serial.print('\t'); 
     } 
     Serial.print(entry.name()); 
     if (entry.isDirectory()) { 
       Serial.println("/"); 
       printDirectory(entry, numTabs+1); 
     } else { 
       Serial.print("\t\t"); 
       Serial.println(entry.size(), DEC); 
     } 
     entry.close(); 
   } 
} 
Include the SD library.
Declare an object named root which is of class File. Looking 
at the documentation, you learn that this kind of object can 
represent both normal ﬁles and directories (a directory is 
just a special kind of ﬁle).
SD.open() tries to open the ﬁle or directory named in the 
parameter. In this case it is the root directory “/“. The function 
open returns a reference to a File object, so we store this 
reference to variable root.
Calls the printDirectory function and passes two parameters: a 
reference to the File object root (which now contains information 
about the root directory), and an integer number that is used by 
the function to nicely format its output (more about this below).
This is an interesting control structure. It is a 
loop that never ends (“while(true)”) but from 
which the sketch exist (“break”) when the File 
openNextFile() returns false. This happens when 
there is no regular ﬁle or directory left to return.
Prints out tab characters depending on the level of 
the current directory. Each time a new directory is 
found, numTabs is increased by one.
Print out the name of the current ﬁle (which may be 
a directory. “entry” is the name of the File object 
that contains this information, and “name” is one of 
its attributes. Hence, entry.name prints out the 
name of the ﬁle.
If variable “entry” is pointing to a directory, then 
print a “/“ and call (recursive operation) the function 
printDirectory, so we can have a look inside. Pass 
the entry object and increase the tabs number by 
one to intent the ﬁle names in this directory.
If this is a regular ﬁle, add two tabs and print out 
the size of the ﬁle in bytes, as a decimal.
Close the ﬁle.
Declare an object of type File, that will be used as a handle 
to the root directory.
Calls a new instance of his function.

Peter Dalmaris
Lecture 45
Arduino Step by Step
This is what the monitor output looks like: 
An exercise 
You now know how to write text data to your SD card! 
But what about reading? I did not show you how to read text from the card because I’d like you to 
work this function out your self. Have a look at the documentation page for the read function, and a 
sample sketch that shows you how to read text from a text ﬁle.
#12
Directory
Directory
Size 
(bytes)

