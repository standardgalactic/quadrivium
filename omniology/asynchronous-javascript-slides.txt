@danappleman   danappleman.com
Dan Appleman
Asynchronous JavaScript

Why Asynchronous Operations Matter

Your Computer Can Do More Than One Thing 
at a Time

Your Computer Can Do More Than One Thing 
at a Time

RTX 2080 Graphics 
Card
2944 CPU cores
Intel Core i9-10850K
10 CPU cores
20 simultaneous threads
Today’s Hardware

JavaScript
Engine
Page Load
Event queue
Browser or Operating System API

JavaScript
Engine
Page Load
Event queue
Browser or Operating System API
Mouse click

JavaScript
Engine
Page Load
Event queue
Browser or Operating System API
Mouse click
Request + 
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Mouse click
Request + 
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Callback

Callbacks

setTimeout(callback, delay, other params…)
The setTimeout Function
Calls the specified callback function after a delay specified in milliseconds

Promises

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Pending

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Fulfilled
Resolved
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Fulfilled
Resolved
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Rejected

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Rejected
Rejected
Callback

JavaScript
Engine
Event queue
Browser or Operating System API
Promise +
Callbacks
Rejected
Rejected
Callback

Demo
Creating a Promise
Using a Promise
- Two timeouts, one after the other
- No nested callbacks

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

let f = new Promise(
(resolve,reject)=>{…}
)
f.then( success, failure)
f.then( success1 )
.then( success2 )
.catch ( failure )
t Your executor function has both resolve 
(success) and reject (failure) function 
parameters
t You can pass a failure, or rejected callback 
to your then statement
t Use the catch method to handle failures for 
the entire chain
Handling Errors

Demo
Promise.race
Promise.all

Yes, asynchronous operations can be 
confusing!
- Practice and experimentation helps
For LWC async operations, you can use 
async functions!

Async Functions

delay('timeout one', 1000).then(
(theMessage)=> {
console.log(theMessage);
return delay('timeout two', 2000);
}).then(
(theMessage) => {console.log(theMessage); });
This Code Is Not Exactly Intuitive

You now have a solid foundation on 
asynchronous JavaScript
- Callbacks
- Promises
- Async functions
LWCs support async functions!
- Aura components do not
- Most Aura (and Visualforce) still uses 
callbacks
Speaking of Salesforce…
A Bit of 
Perspective

Up Next:
Exploring JavaScript in Lightning Components

