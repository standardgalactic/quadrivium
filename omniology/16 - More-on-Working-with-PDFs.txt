Manipula(ng PDFs and Text with Code Interpreter 
 
Next, we'll explore how the code interpreter can be used to work with PDF and text 
documents.  
 
For instance, I have a PDF document here, the SpaceX Falcon Rocket User’s guide. 
 
 
It's a lengthy document of 88 pages about SpaceX’s Falcon 9 rocket. However, I'm not 
entirely sure about all its details, which is why I'm going to use the code interpreter. 
 
I'm going to start a new code interpreter, upload the PDF document titled "Bill.pdf": 
 
 
 
I then specify what I want to do with it. For instance, I might request a summary of the PDF, 
and gives me the code: 
 
import PyPDF2 
 
# File path 
file_path = "/mnt/data/falcon-users-guide-2021-09.pdf" 
 
# Open the PDF file in read-binary mode 
with open(file_path, "rb") as file: 
    # Create a PDF file reader object 
    pdf_reader = PyPDF2.PdfFileReader(file) 
 

    # Get the number of pages in the PDF 
    num_pages = pdf_reader.numPages 
 
    # Initialize an empty string to hold the text content of the PDF 
    pdf_text = "" 
 
    # Loop through each page in the PDF 
    for page_num in range(num_pages): 
        # Get the text content of the page 
        page_text = pdf_reader.getPage(page_num).extractText() 
 
        # Add the text content of the page to the overall text content 
        pdf_text += page_text 
 
# Display the first 2000 characters of the text content 
pdf_text[:2000] 
 
The code interpreter extracts the text from the document using a Python library called 
PyPDF2, which includes a tool called PdfFileReader, and outputs the first 2000 characters. 
 
 
 
Code Interpreter tells me the pdf is a user guide for SpaceX’s Falcon rocket, and lists some of 
the sections: 
1. Guide Purpose 
2. Company Descrip6on 
3. Falcon Program Overview 
4. Falcon Launch Vehicle Safety 
5. Falcon Reliability, with subsec6ons focusing on: 
a. Engines 
b. Avionics 
c. Staging Architecture and Design 
 
I further prompt: “what else can you do with this pdf” 

 
 
ChatGPT explained that the code interpreter can extract text, summarize content, search for 
specific information, retrieve metadata and count the number of pages. 
 
It can also further: 
 
 
For example, I asked:  
“give me a summary of every instance where 'propellant' is mentioned” 
 
The search returned several interesting results eg: 
"Propellant is not loaded into the vehicle until the vehicle is erected for launch. Significantly 
improves safety by eliminating hazardous ground handling operations required for systems 
that use solid propellant cores or boosters. Rocket-grade kerosene and liquid oxygen as 
primary propellants. Reduces health hazards to processing, integration, and recovery 
personnel compared to systems that use high toxicity primary propellants." 
 
Finally, I asked the interpreter:  “Extract the full text and save it as a text file” 
 

 
 
This operation makes it easier to work with the content later on. Unfortunately, there are 
several unnecessary white spaces in the words, eg:  
“Spa ce  Exp lora t ionTe chno log ies  Cor p. 
  
Al l righ ts r e se rved.” 
 
which can be distracting. To rectify this, I asked the interpreter:  
 
 
And it gives me a better result. 
 
This kind of task can be incredibly useful, especially for non-developers. Even if you are a 
developer, while these tasks may not be overly complicated to execute with some basic 
Python knowledge, why bother if you have multiple files to process? With the code 
interpreter, you can feed in multiple PDFs, convert them into text, extract or modify them, 
and then perform some analysis or ask for a summary. 
 
So, while this is a simple example, it shows another interesting use case for different types of 
data that can be uploaded. It's not restricted to CSV files or JSON datasets. You can upload 
images, PDFs, and text files. We'll explore working with video in the next section. 

 
 

