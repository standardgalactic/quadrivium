PLURALSIGHT AUTHOR
@dr_holderness
Dictionaries, JSON, and Pip
Sarah Holderness

acronyms =     ['LOL',            'IDK',          'TBH'] 
translations = ['laugh out loud', "I don't know", 'to be honest'] 
del acronyms[0] 
del translations[0] 
print(acronyms) 
print(translations)
['IDK', 'TBH'] 
["I don't know", 'to be honest']
Maintaining Two Lists
If we add or delete from one list… 
We have to do the same thing in the other list.

A Dictionary Maps Keys to Values
acronyms = {'LOL': 'laugh out loud',  
            'IDK': "I don't know",  
            'TBH': 'to be honest'}
Key
Value
'LOL'
'laugh out loud' 
'IDK'
"I don’t know"
'TBH'
'to be honest' 
key
assign to
value
These would be the keys and 
values stored in the dictionary.
Each item is known as a 
"key-value pair".

A Dictionary Maps Keys to Values
acronyms = {'LOL': 'laugh out loud',  
            'IDK': "I don't know",  
            'TBH': 'to be honest'}
laugh out loud
To look up a value in a dictionary, 
we send in a key. 
(Instead of an index in a list.)
print(acronyms['LOL'])

Dictionaries Can Hold Anything
Dictionaries, like lists, can hold anything you want: numbers, strings, a 
mix of both, and other objects.
Dictionary of strings to strings
Dictionary of strings to numbers
Dictionary of anything
acronyms = {'LOL': 'laugh out loud', 'IDK': "I don't know"}
menu = {'Soup': 5, 'Salad': 6}
A menu item’s name is the key, 
and its price is the value. 
my_dict = {10: 'hello', 2: 6.5}

Creating a Dictionary and Adding Values
Create an empty dictionary:
Adding new dictionary items:
acronyms = {}
acronyms['LOL'] = 'laugh out loud' 
acronyms['IDK'] = "I don't know" 
acronyms['TBH'] = 'to be honest' 
print(acronyms)
{'IDK': "I don't know", 'LOL': 'laugh out loud',  
'TBH': 'to be honest'}
Notice our 3 key-value pairs 
are there, but order is random 
in a dictionary.

Updating Values in Our Dictionary
Our current dictionary:
print(acronyms)
{'IDK': "I don't know", 
 'LOL': 'laugh out loud',  
 'TBH': 'to be honest'}
Let’s update the value for TBH:
acronyms['TBH'] = 'honestly'
A value is updated the same 
way a value is added.
Looking up the same value:
print(acronyms['TBH'])
honestly

Removing Dictionary Items
You can delete an item from a dictionary by looking up its key
acronyms = {'LOL': 'laugh out loud',  
            'IDK': "I don't know",  
            'TBH': 'to be honest'} 
del acronyms['LOL'] 
print(acronyms)
{'IDK': "I don't know", 'TBH': 'to be honest'}
To delete a value in a dictionary, we send 
in a key just like when we look up a value.

Get an Item that Might Not Be There
Trying to access a key that doesn’t exist will cause an error
definition = acronyms['BTW']
KeyError: 'BTW'
# Get a value that might not be there 
definition = acronyms.get('BTW') 
print(definition)
None
If you want to get a word in the dictionary, use get()
Using get() won’t 
crash your program.
None is a type that represents 
the absence of a value.

None Type
None means the absence of a value, and evaluates to False in a conditional.
acronyms = {'LOL': 'laugh out loud', 'IDK': "I don't know"} 
definition = acronyms.get('BTW') 
if definition: 
    print(definition) 
else: 
    print("Key doesn't exist")
Key doesn’t exist
definition equals None 
because the key doesn’t exist
False because definition is None
So this is run

Using a Dictionary to Translate a Sentence
acronyms = {'LOL': 'laugh out loud',  
            'IDK': "I don't know",  
            'TBH': 'to be honest'} 
sentence = 'IDK' + ' what happened ' + 'TBH' 
translation = acronyms.get('IDK') +' what happened '+ acronyms.get('TBH')
Look up the value of each acronym 
in the acronyms dictionary

Using a Dictionary to Translate a Sentence
acronyms = {'LOL': 'laugh out loud',  
            'IDK': "I don't know",  
            'TBH': 'to be honest'} 
sentence = 'IDK' + ' what happened ' + 'TBH' 
translation = acronyms.get('IDK') +' what happened '+ acronyms.get('TBH')
IDK what happened TBH 
I don't know what happened to be honest
print('sentence:', sentence) 
print('translation:', translation)

Combining Lists and Dictionaries

Breakfast, Lunch, and Dinner Lists
Let’s say we have three separate menu lists: Breakfast, Lunch, Dinner…
breakfast = ['Egg Sandwich','Bagel','Coffee']
lunch = ['BLT','PB&J','Turkey Sandwich']
dinner = ['Soup','Salad','Spaghetti','Taco']
How would we combine these 
into one list?

A List of Lists
You can have a container of containers - menus is a list of lists.
menus = [ ['Egg Sandwich','Bagel','Coffee'], 
          ['BLT','PB&J','Turkey Sandwich'], 
          ['Soup','Salad','Spaghetti','Taco'] ]
Breakfast Menu:  ['Egg Sandwich', 'Bagel', 'Coffee'] 
Lunch Menu:      ['BLT', 'PB&J', 'Turkey Sandwich'] 
Dinner Menu:     ['Soup', 'Salad', 'Spaghetti', 'Taco']
1st list
3rd list
2nd list
print('Breakfast Menu:\t', menus[0]) 
print('Lunch Menu:\t',     menus[1]) 
print('Dinner Menu:\t',    menus[2])

Getting an Item from a Two-dimensional List
You can use get two indexes to get an individual item
menus = [ ['Egg Sandwich','Bagel','Coffee'], 
          ['BLT','PB&J','Turkey Sandwich'], 
          ['Soup','Salad','Spaghetti','Taco'] ]
['Egg Sandwich', 'Bagel', 'Coffee']
1st list
A good start! Now we just need 
to get the second item in this list.
How would you get this item?
print(menus[0])

Getting an Item from a Two-dimensional List
You can use get two indexes to get an individual item
menus = [ ['Egg Sandwich','Bagel','Coffee'], 
          ['BLT','PB&J','Turkey Sandwich'], 
          ['Soup','Salad','Spaghetti','Taco'] ]
Bagel
The list at index 0 in the outer list, 
the item at index 1 in the inner list
How would you get this item?
print(menus[0][1])

A Dictionary of Lists
We could also use a dictionary for our menus with keys for Breakfast, 
Lunch and Dinner
menus = { 'Breakfast': ['Egg Sandwich','Bagel','Coffee'], 
          'Lunch':     ['BLT','PB&J','Turkey Sandwich'], 
          'Dinner':    ['Soup','Salad','Spaghetti','Taco'] }
Breakfast Menu:  ['Egg Sandwich', 'Bagel', 'Coffee'] 
Lunch Menu:      ['BLT', 'PB&J', 'Turkey Sandwich'] 
Dinner Menu:     ['Soup', 'Salad', 'Spaghetti', 'Taco']
Using the keys to 
access each list
print('Breakfast Menu:\t', menus['Breakfast']) 
print('Lunch Menu:\t',     menus['Lunch']) 
print('Dinner Menu:\t',    menus['Dinner'])

A Dictionary of Lists
We could also use a dictionary for our menus with keys for Breakfast, 
Lunch and Dinner
Breakfast Menu:  ['Egg Sandwich', 'Bagel', 'Coffee'] 
Lunch Menu:      ['BLT', 'PB&J', 'Turkey Sandwich'] 
Dinner Menu:     ['Soup', 'Salad', 'Spaghetti', 'Taco']
What if we had a 
lot more menus, is 
there better way to 
print each one? 
menus = { 'Breakfast': ['Egg Sandwich','Bagel','Coffee'], 
          'Lunch':     ['BLT','PB&J','Turkey Sandwich'], 
          'Dinner':    ['Soup','Salad','Spaghetti','Taco'] }
print('Breakfast Menu:\t', menus['Breakfast']) 
print('Lunch Menu:\t',     menus['Lunch']) 
print('Dinner Menu:\t',    menus['Dinner'])

Printing the Dictionary Menu Items
menus = { 'Breakfast': ['Egg Sandwich','Bagel','Coffee'], 
          'Lunch':     ['BLT','PB&J','Turkey Sandwich'], 
          'Dinner':    ['Soup','Salad','Spaghetti','Taco'] }
Breakfast 
Lunch 
Dinner
This defaults to just returning 
the keys in a dictionary… 
Which is not what we want.
for item in menus: 
    print(item)

Using a Dictionary’s Key and Value in a for Loop
menus = { 'Breakfast': ['Egg Sandwich','Bagel','Coffee'], 
          'Lunch':     ['BLT','PB&J','Turkey Sandwich'], 
          'Dinner':    ['Soup','Salad','Spaghetti','Taco'] }
Breakfast :  ['Egg Sandwich', 'Bagel', 'Coffee'] 
Lunch :      ['BLT', 'PB&J', 'Turkey Sandwich'] 
Dinner :     ['Soup', 'Salad', 'Spaghetti', 'Taco']
Now the loop has 
access to both the key 
and the value here.
for name, menu in menus.items(): 
    print(name, ':', menu)

Using Dictionaries to Represent Objects
person = {'name': 'Sarah Smith',  
          'city': "Orlando",  
          'age': '100'} 
print(person.get(’name’), 'is', person.get('age'), 'years old.')
Sarah Smith is 100 years old.
Let’s say we have a person and we want to represent their 
attributes, such as their name, age, and city they’re from. 
We could use a dictionary where the 
attributes are saved as key, value pairs. 

Reading JSON and Installing Packages with Pip

We Want a Program that Lists the Current 
People in Space
>>> python3 space_people.py 
The people currently  
in space are: 
Sergey Ryzhikov 
Kate Rubins 
Sergey Kud-Sverchkov 
Mike Hopkins 
Victor Glover 
Shannon Walker 
Soichi Noguchi
Web Server
HTTP Request 
to api.open-notify.org/
astros.json  
HTTP Response 
with the current people  
in space

HTTP Request 
HTTP Request 
pluralsight.com
HTTP Response 
HTML can be returned 
and displayed as a web 
page in your browser
Web Server
Your Computer

Some Websites Return Raw Data 
HTTP Request
HTTP Response 
JSON data is returned and 
different applications can 
do different things with it
Usually the raw data is returned under the API (Application 
Programming Interface) for the website such as api.twitter.com 
Your Computer
Web Server

JSON Data
A common use of JSON is to exchange data to/from a web server.
json = { 
    "number":4, 
    "students": 
        [ 
            {"name":"Sarah Holderness", "email":"sarah@example.com"}, 
            {"name":"Harry Potter", "email":"harry@example.com"}, 
            {"name":"Hermione Granger", "email":"hermione@example.com"}, 
            {"name":"Ron Weasley", "email":"ron@example.com"} 
        ] 
}
JSON format can be a mix of lists and 
dictionaries like we’ve seen before

JSON - JavaScript Object Notation
json = { 
    "number":4, 
    "students": 
        [ 
            {"name":"Sarah Holderness", "email":"sarah@example.com"}, 
            {"name":"Harry Potter", "email":"harry@example.com"}, 
            {"name":"Hermione Granger", "email":"hermione@example.com"}, 
            {"name":"Ron Weasley", "email":"ron@example.com"} 
        ] 
}
JSON started in JavaScript but now can be used in any programming 
language, including Python

How Do We Do an HTTP Request in Python?
The requests library allows us 
to do an http request.  
 
However, requests is not 
installed with Python so we 
need to install it ourselves.
If you do a web search for "Python http request" the first result should 
be for the requests library. 

Ensure PIP is Installed
<<< pip3 --version 
pip 20.2.3 from /Library/Frameworks/Python.framework/
Versions/3.9/lib/python3.9/site-packages/pip (python 3.9) 
pip is used to install any package from the Python Package Index
If Python 3 is installed the command pip3 
should work on a Mac or pip on Windows.  
(Otherwise add pip to the Path.)

Installing the Requests Package
<<< pip3 requests 
Collecting requests 
... 
Successfully installed requests-2.25.0
Now that the requests package is 
installed, we can use it in a program!
You will need an internet connection since the 
packages are downloaded from the internet.

Where Do We Want to Request Data From?
open-notify.org - This API returns the current number of people in space. 
When known it also returns the names and spacecraft those people are on.
The api we want to send http the 
request to: 
api.open-notify.org/astros.json

How many humans are in space right now in JSON?
{ 
    "message": "success", 
    "number": NUMBER_OF_PEOPLE_IN_SPACE, 
    "people": [ 
      {"name": NAME, "craft": SPACECRAFT_NAME}, 
      ... 
    ] 
}
Making a request to http://api.open-notify.org/astros.json, will return the 
following JSON format.

How Do We Do an HTTP Request in Python?
import requests
First, we import the requests module

How Do We Do an HTTP Request in Python?
import requests
Then we call requests.get() and 
pass in our http address: 
api.open-notify.org/astros.json
response = requests.get('http://api.open-notify.org/astros.json')

How Do We Get JSON from the Response?
Call response.json() to decode 
the JSON from the response.
json  = response.json()
import requests
response = requests.get('http://api.open-notify.org/astros.json')

Now We Can Print the JSON Data
{ 
    'message': 'success',  
    'number': 7,  
    'people': [ 
        {'craft': 'ISS', 'name': 'Sergey Ryzhikov'},  
        {'craft': 'ISS', 'name': 'Kate Rubins'},  
        … 
}
json stores the JSON as a dictionary
print(json)
json  = response.json()
import requests
response = requests.get('http://api.open-notify.org/astros.json')

How Do We Print the Names of the 
People in Space?
{ 
    'message': 'success',  
    'number': 7,  
    'people': [ 
        {'craft': 'ISS', 'name': 'Sergey Ryzhikov'},  
        {'craft': 'ISS', 'name': 'Kate Rubins'},  
        … 
}
json  =
json['people']
How do we get this list of people?
We can use the people key. 
Now let’s print this list.

Printing the People in Space
import requests 
response = requests.get('http://api.open-notify.org/astros.json') 
json  = response.json()
{'craft': 'ISS', 'name': 'Sergey Ryzhikov'} 
{'craft': 'ISS', 'name': 'Kate Rubins'} 
{'craft': 'ISS', 'name': 'Sergey Kud-Sverchkov'} 
...
We can use a loop to print 
each item in this list.
Each item is a dictionary, but 
we just want the name part.
for person in json['people']: 
    print(person)

Printing the People in Space
import requests 
response = requests.get('http://api.open-notify.org/astros.json') 
json  = response.json()
Sergey Ryzhikov 
Kate Rubins 
Sergey Kud-Sverchkov 
...
We can use the key 'name' 
key to get just the name.
Great! We’re able to print the 
names of the people in space.
for person in json['people']: 
    print(person['name'])

Final Touch: Adding a Heading
import requests 
response = requests.get('http://api.open-notify.org/astros.json') 
json  = response.json()
The people currently in space are: 
Sergey Ryzhikov 
Kate Rubins 
Sergey Kud-Sverchkov 
...
Print a heading 
for clarity.
for person in json['people']: 
    print(person['name'])
print('The people currently in space are:')

