
800 East 96th Street
Indianapolis, Indiana 46240  USA
Cisco Press
CCIE Routing and Switching 
Ofﬁcial Exam Certiﬁcation Guide 
Second Edition
Wendell Odom, CCIE No. 1624
Contributing Authors: Jim Geier and Naren Mehta

ii 
CCIE Routing and Switching Ofﬁcial Exam Certiﬁcation Guide, 
Second Edition
Wendell Odom, CCIE No. 1624
Contributing authors: Jim Geier and Naren Mehta
Copyright © 2006 Cisco Systems, Inc.
Cisco Press logo is a trademark of Cisco Systems, Inc.
Published by:
Cisco Press
800 East 96th Street 
Indianapolis, IN 46240 USA
All rights reserved. No part of this book may be reproduced or transmitted in any form or by any means, electronic or mechanical, 
including photocopying, recording, or by any information storage and retrieval system, without written permission from the publisher, 
except for the inclusion of brief quotations in a review.
Printed in the United States of America 1 2 3 4 5 6 7 8 9 0
First Printing   February 2006
Library of Congress Cataloging-in-Publication Number: 2004113160
ISBN: 1-58720-141-0
Trademark Acknowledgments
All terms mentioned in this book that are known to be trademarks or service marks have been appropriately capitalized. Cisco Press or 
Cisco Systems, Inc. cannot attest to the accuracy of this information. Use of a term in this book should not be regarded as affecting the 
validity of any trademark or service mark.
Warning and Disclaimer
This book is designed to provide information about the Cisco CCIE Routing and Switching Written Exam, No. 350-001. Every effort 
has been made to make this book as complete and as accurate as possible, but no warranty or ﬁtness is implied.
The information is provided on an “as is” basis. The authors, Cisco Press, and Cisco Systems, Inc. shall have neither liability nor 
responsibility to any person or entity with respect to any loss or damages arising from the information contained in this book or from 
the use of the discs or programs that may accompany it.
The opinions expressed in this book belong to the author and are not necessarily those of Cisco Systems, Inc.
Corporate and Government Sales
Cisco Press offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales.
For more information please contact:
U.S. Corporate and Government Sales
1-800-382-3419
corpsales@pearsontechgroup.com
For sales outside the U.S. please contact:
International Sales
international@pearsoned.com
Feedback Information
At Cisco Press, our goal is to create in-depth technical books of the highest quality and value. Each book is crafted with care and preci-
sion, undergoing rigorous development that involves the unique expertise of members from the professional technical community.
Readers’ feedback is a natural continuation of this process. If you have any comments regarding how we could improve the quality of 
this book, or otherwise alter it to better suit your needs, you can contact us through e-mail at feedback@ciscopress.com. Please make 
sure to include the book title and ISBN in your message.
We greatly appreciate your assistance.

 iii
Publisher
John Wait
Editor-in-Chief
John Kane
Cisco Representative
Anthony Wolfenden
Cisco Press Program Manager
Jeff Brady
Executive Editor
Brett Bartow
Production Manager
Patrick Kanouse
Senior Development Editor
Christopher Cleveland
Copy Editor
Bill McManus
Technical Editors
Maurilio Gorito, Rus Healy, Paul Negron, William R. Parkhurst
Editorial Assistant
Raina Han
Cover and Book Designer
Louisa Adair
Composition
Interactive Composition Corporation
Indexer
Lisa Stumpf

iv 
About the Author
Wendell Odom, CCIE No. 1624, is a senior instructor with Skyline Advanced Technology Services 
(http://www.skyline-ats.com), where he teaches the QOS, CCIE, and SAN courses. Wendell has 
worked in the networking arena for 20 years, with jobs in pre- and post-sales technical consulting, 
teaching, and course development. He has authored several Cisco Press books, including the best-
selling CCNA INTRO and ICND Exam Certiﬁcation Guides, the Cisco QoS Exam Certiﬁcation 
Guide, and the introductory text Computer Networking First-Step.
About the Contributing Authors
Jim Geier, author of Chapters 22 and 23, is the founder of Wireless-Nets, Ltd., (www.wireless-nets 
.com) and the company’s principal consultant. His 25 years of experience includes the analysis, 
design, development, installation, and support of numerous wired and wireless network systems for 
cities, enterprises, airports, retail stores, manufacturing facilities, warehouses, and hospitals 
throughout the world. Under Wireless-Nets, Ltd., Jim founded the Independent Wireless 
Networking Academy (www.wirelessnetworkingacademy.com) to prepare people for working in 
the wireless networking industry. He has instructed hundreds of people on designing and deploying 
wireless LAN solutions. 
Jim is the author of several books, including Wireless LANs: Implementing Interoperable Networks, 
Second Edition (SAMS), Certiﬁed Wireless Analysis Professional—Ofﬁcial Study Guide (McGraw-Hill), 
Wireless Networks First-Step (Cisco Press), Wireless Networking Handbook (Macmillan), and 
Network Reengineering (McGraw-Hill). Jim is the author of hundreds of articles for industry 
magazines and online publications, such as Network Computing, Network World, Wi-FiPlanet.com, 
and Mobilepipeline.com. He has been writing about computer networking topics, with emphasis on 
wireless systems, for the past 12 years. He is currently the editor-in-chief and regular contributor of 
mobilizedsoftware.com, an online publication providing education to enterprises involved with 
implementing mobile wireless systems. 
Jim has been an active member of the IEEE 802.11 Working Group, developing international 
standards for wireless LANs. He has also been an active member within the Wi-Fi Alliance, 
responsible for certifying interoperability of 802.11 (“Wi-Fi”) wireless LANs. He served as 
Chairman of the IEEE Computer Society, Dayton Section, and Chairman of the IEEE International 
Conference on Wireless LAN Implementation. Jim is an advisory board member of several leading 
wireless LAN companies and an advisor for the Certiﬁed Wireless Network Professional (CWNP) 
independent certiﬁcation program for people deploying wireless LANs.
Jim’s education includes a bachelor’s and master’s degree in electrical engineering and a master's 
degree in business administration. 
Contact Jim at jimgeier@wireless-nets.com.

 v
Naren Mehta, CCIE No. 9797 (Routing and Switching, Security), author of Chapters 19 and 20, is 
a senior partner and director of training for an internationally known training and consulting 
company that specializes in providing customized, one-to-one training, for CCIE lab students and 
consulting for Cisco networks. Naren has been in the training and consulting ﬁeld for the past 15 
years and teaching Cisco certiﬁcation courses ranging from CCNA to CCIE (written and lab) for the 
past 7 years. His experience includes the analysis, design, installation, training, and support for 
various Cisco networks for ﬁnancial, manufacturing, utility, and healthcare industries. His specialty 
is explaining complex concepts in such a way that it becomes easier for anybody to understand them. 
Naren has been a source of inspiration, motivation, and encouragement for many of his students who 
wanted to pursue their CCIE lab certiﬁcation and helped them pass their CCIE Routing and 
Switching and Security lab certiﬁcation exams. He has an MBA in marketing and ﬁnance, an MS in 
industrial engineering, and a BS in mechanical engineering.
About the Technical Reviewers
Maurilio Gorito, CCIE No. 3807, works for Cisco Systems, Inc., as part of the CCIE team. As 
content manager, Maurilio is responsible for managing the content development process for the 
CCIE Routing and Switching lab and written exams and proctoring the CCIE Routing and 
Switching, Service Provider, and CCIE Security lab exams.
Rus Healy, CCIE No. 15025, is program manager for Technical Training and Certiﬁcations for 
Microwave Data Systems in Rochester, New York, a leading manufacturer of data radios for 
industrial and public-safety applications. His other interests include bicycling, woodworking, and 
camping with his family. Rus completed his CCIE Routing and Switching certiﬁcation while 
working on this book. He also holds a CCDP and three Microwave Data Systems technical 
certiﬁcations. He lives in the Finger Lakes region of western New York with his wife, Nancy, and 
their two children, Gwen and Trevor.
Paul Negron, CCIE No. 14856, has been involved with networking technologies for 13 years. He 
has been a senior instructor for Skyline Advanced Technical Services for the past 5 years. He has 
been involved with the designing of core network services for a number of service providers. He 
currently instructs all the CCIP level courses as well as the Advanced BGP, MPLS, and QOS 
courses. Paul has six years experience with Satellite Communications as well as six years with Cisco 
platforms. Paul holds several Cisco certiﬁcations, including CCIE Service Provider.
William R. Parkhurst, Ph.D., CCIE No. 2969, is a design consultant with Cisco Systems 
specializing in IP core and mobile wireless networks. Before his current position, Bill was on the 
CCIE team and managed the development of the CCIE Service Provider and Voice tracks. Bill holds 
a Ph.D. in electrical and computer engineering from Wichita State University and a bachelor’s 
degree in political science from the University of Maryland. Bill is the author of three Cisco Press 
books: Routing First-Step, Cisco OSPF Command and Conﬁguration Handbook, and Cisco BGP-4 
Command and Conﬁguration Handbook.

vi 
Dedication
For Lavinnie Viola McCoy Odom, aka Granny, Aunt Bill, and cousin “it.” Thanks for the hugs, 
prayers, late-night fried egg sandwiches, and sheets warmed by the heater in the dead of winter. 
1914–2004.

 vii
Acknowledgments
Setting out to write a CCIE-level book can be a bit intimidating. However, having the right set 
of technical editors has made the process much less difﬁcult and has made the text much better. 
Maurilio and Bill provided considerable technical input, as well as providing unique insights based 
on their roles inside Cisco’s CCIE program. Rus did a great job of helping us keep the right depth 
to meet a typical candidate, as he had just passed his CCIE Routing and Switching written exam as 
we started this project, and just completed his Routing and Switching lab by conclusion of the book. 
(Congrats, Rus!) And thanks to Paulie for jumping in to help with the tech edits later in the writing 
process. Together they made many valuable comments that improved the book.
The production team, headed by Patrick Kanouse, did their usual excellent job. Like the “behind the 
scenes” people in many businesses, their speciﬁc efforts may not be obvious to the public, but it’s 
no less appreciated by me. Thanks for cleaning up my Southern English, drawing nice ﬁgures from 
my beautiful PowerPoints, and putting up with my repetitive, “That’s what I asked for, but I changed 
my mind—can I make one more change?” e-mails. You folks make me look good on paper—if only 
you could be in charge of my wardrobe too, I’d look good all the time!
Brett Bartow, executive editor, did his usual New-York-Yankees-like job in helping steer this project 
to completion. In between talking about sports, Brett worked through the many changes in direction 
with this book, and helped guide us to the right product. He found Jim and Naren, who were vital to 
the process as well. And yes, so the whole world knows, he did win his fantasy baseball league in 
2005—again proving he’s a really smart guy.
Chris Cleveland developed this book, which means he got to see the rawest form of the materials, 
and multiple times. Chris continues to be simply the best in the business—You da man, Chris C!
Jim Geier and Naren Mehta came through by writing two of the nine parts of the text. Jim, an 
accomplished author with wireless technologies, did his usual wonderful job on the wireless 
chapters of the book. Thanks, Jim, for adding your depth of knowledge to my weakest area for this 
book! Naren brought a great depth of experience to his multicast chapters, as he spends most days 
teaching CCIE lab prep courses. I expect to see some good CCIE-level books from Naren in the 
future!
On the personal side, my wife Kris gets big praise for just being her usual wonderful self even when 
things get a little tough with the writing schedule. I could not do it without you doll! And ﬁnally, 
without the daily grace and mercy from Jesus, none of these books would ever be possible—thanks 
for watching over every little hair on my head.

viii 
This Book Is Safari Enabled
The Safari® Enabled icon on the cover of your favorite technology book 
means the book is available through Safari Bookshelf. When you buy this 
book, you get free access to the online edition for 45 days.
Safari Bookshelf is an electronic reference library that lets you easily search 
thousands of technical books, ﬁnd code samples, download chapters, and 
access technical information whenever and wherever you need it.
To gain 45-day Safari Enabled access to this book:
■
Go to http://www.ciscopress.com/safarienabled
■
Complete the brief registration form
■
Enter the coupon code T6H4-5DXH-4KC2-I9HE-AJF6
If you have difﬁculty registering on Safari Bookshelf or accessing the online 
edition, please e-mail customer-service@safaribooksonline.com.

 ix
Contents at a Glance
Introduction
xxxi
Part I
Bridging and LAN Switching
3
Chapter 1
Ethernet Basics
5
Chapter 2
Virtual LANs and VLAN Trunking
27
Chapter 3
Spanning Tree Protocol
57
Part II
TCP/IP
89
Chapter 4
IP Addressing
91
Chapter 5
IP Services
131
Chapter 6
TCP/IP Transport and Application Services
151
Part III
IP Routing
171
Chapter 7
IP Forwarding (Routing)
173
Chapter 8
RIP Version 2
201
Chapter 9
EIGRP
229
Chapter 10
OSPF
255
Chapter 11
IGP Route Redistribution, Route Summarization, and Default Routing
313
Chapter 12
Fundamental BGP Operations
355
Chapter 13
BGP Routing Policies
417
Part IV
Quality of Service
483
Chapter 14
Classiﬁcation and Marking
485
Chapter 15
Congestion Management and Avoidance
515
Chapter 16
Shaping and Policing
551
Part V
WAN
587
Chapter 17
Synchronous Serial Links and Protocols
589
Chapter 18
Frame Relay
607

x 
Part VI
IP Multicast
627
Chapter 19
Introduction to IP Multicasting
629
Chapter 20
IP Multicast Routing
679
Part VII
Security
739
Chapter 21
Security
741
Part VIII
Enterprise Wireless Mobility
783
Chapter 22
IEEE 802.11 Fundamentals
785
Chapter 23
Wireless LAN Solutions
825
Part IX
OSI and Cisco Device Basics
847
Chapter 24
Miscellaneous Networking Theory and Practices
849
Part X
Appendixes
865
Appendix A
Answers to the “Do I Know This Already?” Quizzes 
867
Appendix B
CCIE Routing and Switching Exam Updates: Version 1.0
891
Appendix C
MPLS
895
Appendix D
Decimal to Binary Conversion Table
953
Glossary
959
Index
1012

 xi
Contents
Introduction
xxxi
Part I
Bridging and LAN Switching
2
Chapter 1
Ethernet Basics
5
“Do I Know This Already?” Quiz
5
Foundation Topics
8
Ethernet Layer 1: Wiring, Speed, and Duplex
8
RJ-45 Pinouts and Category 5 Wiring
8
Auto-negotiation, Speed, and Duplex
9
CSMA/CD
10
Collision Domains and Switch Buffering
10
Basic Switch Port Configuration
12
Ethernet Layer 2: Framing and Addressing
14
Types of Ethernet Addresses
16
Ethernet Address Formats
17
Protocol Types and the 802.3 Length Field
18
Switching and Bridging Logic
19
Foundation Summary
25
Memory Builders
25
Fill in Key Tables from Memory
25
Definitions
25
Further Reading
25
Chapter 2
Virtual LANs and VLAN Trunking
27
“Do I Know This Already?” Quiz
27
Foundation Topics
31
Virtual LANs
31
VLAN Configuration
31
Using VLAN Database Mode to Create VLANs
32
Using Configuration Mode to Put Interfaces into VLANs
34
Using Configuration Mode to Create VLANs
35
Private VLANs
36
VLAN Trunking Protocol
38
VTP Process and Revision Numbers
39
VTP Configuration
40
Normal-Range and Extended-Range VLANs
42
Storing VLAN Configuration
43
VLAN Trunking: ISL and 802.1Q
44
ISL and 802.1Q Concepts
44
ISL and 802.1Q Configuration
45
Allowed, Active, and Pruned VLANs
48
Trunk Configuration Compatibility
48

xii 
Configuring Trunking on Routers
49
802.1Q-in-Q Tunneling
51
Foundation Summary
53
Memory Builders
54
Fill in Key Tables from Memory
54
Definitions
54
Further Reading
55
Chapter 3
Spanning Tree Protocol
57
“Do I Know This Already?” Quiz
57
Foundation Topics
61
802.1D Spanning Tree Protocol
61
Choosing Which Ports Forward: Choosing Root Ports and Designated Ports
61
Electing a Root Switch
61
Determining the Root Port
63
Determining the Designated Port
64
Converging to a New STP Topology
65
Topology Change Notification and Updating the CAM
66
Transitioning from Blocking to Forwarding
67
Per-VLAN Spanning Tree and STP over Trunks
68
STP Configuration and Analysis
70
Optimizing Spanning Tree
73
PortFast, UplinkFast, and BackboneFast
73
PortFast
74
UplinkFast
74
BackboneFast
75
PortFast, UplinkFast, and BackboneFast Configuration
75
PortChannels
76
Load Balancing Across PortChannels
76
PortChannel Discovery and Configuration
77
Rapid Spanning Tree Protocol
78
Multiple Spanning Trees: IEEE 802.1s
80
Protecting STP
82
Root Guard and BPDU Guard: Protecting Access Ports
82
UDLD and Loop Guard: Protecting Trunks
83
Foundation Summary
85
Memory Builders
87
Fill in Key Tables from Memory
87
Definitions
87
Further Reading
87
Part II
TCP/IP
89
Chapter 4
IP Addressing
91
“Do I Know This Already?” Quiz
91
Foundation Topics
94

 xiii
IP Addressing and Subnetting
94
IP Addressing and Subnetting Review
94
Subnetting a Classful Network Number
95
Comments on Classless Addressing
97
Subnetting Math
97
Dissecting the Component Parts of an IP Address
97
Finding Subnet Numbers and Valid Range of IP Addresses—Binary
98
Decimal Shortcuts to Find the Subnet Number and Valid Range 
of IP Addresses
99
Determining All Subnets of a Network—Binary
102
Determining All Subnets of a Network—Decimal
104
VLSM Subnet Allocation
105
Route Summarization Concepts
107
Finding Inclusive Summary Routes—Binary
108
Finding Inclusive Summary Routes—Decimal
109
Finding Exclusive Summary Routes—Binary
110
CIDR, Private Addresses, and NAT
111
Classless Interdomain Routing
111
Private Addressing
113
Network Address Translation
113
Static NAT
115
Dynamic NAT Without PAT
116
Overloading NAT with Port Address Translation
117
Dynamic NAT and PAT Configuration
118
IP Version 6
119
IPv6 Address Formats
120
Aggregatable Global Unicast Addresses
120
Simple IPv6 Configuration
121
IPv6 Addressing Summary
123
Foundation Summary
125
Memory Builders
128
Fill in Key Tables from Memory
128
Definitions
129
Further Reading
129
Chapter 5
IP Services
131
“Do I Know This Already?” Quiz
131
Foundation Topics
134
ICMP
134
ICMP Unreachable
135
Time Exceeded ICMP Message
136
ICMP Redirect
137
ARP, Proxy ARP, Reverse ARP, BOOTP, and DHCP
137
ARP and Proxy ARP
137
RARP, BOOTP, and DHCP
139

xiv 
HSRP, VRRP, and GLBP
141
Network Time Protocol
143
Foundation Summary
146
Memory Builders
148
Fill in Key Tables from Memory
148
Definitions
148
Further Reading
149
Chapter 6
TCP/IP Transport and Application Services
151
“Do I Know This Already?” Quiz
151
Foundation Topics
154
TCP and UDP
154
TCP Connections and Port Numbers
155
TCP Error Recovery
157
TCP Dynamic Windowing
157
TCP Header Miscellany
159
TCP/IP Applications
160
Passive and Active Mode FTP
161
Application Authentication and Privacy
163
Network Management and SNMP
163
SNMP Protocol Messages
165
SNMP MIBs
166
SNMP Security
167
Foundation Summary
168
Memory Builders
168
Fill in Key Tables from Memory
168
Definitions
169
Further Reading
169
Part III IP Routing
171
Chapter 7
IP Forwarding (Routing)
173
“Do I Know This Already?” Quiz
173
Foundation Topics
177
IP Forwarding
177
Process Switching, Fast Switching, and Cisco Express Forwarding
178
Building Adjacency Information: ARP and Inverse ARP
179
Frame Relay Inverse ARP
180
Static Configuration of Frame Relay Mapping Information
183
Disabling InARP
184
Classless and Classful Routing
185
Multilayer Switching
186
MLS Logic
186
Using Routed Ports and PortChannels with MLS
187
MLS Configuration
188

 xv
Policy Routing
191
Foundation Summary
197
Memory Builders
198
Fill in Key Tables from Memory
198
Definitions
199
Further Reading
199
Chapter 8
RIP Version 2
201
“Do I Know This Already?” Quiz
201
Foundation Topics
204
RIP Version 2 Basics
204
RIP Convergence and Loop Prevention
205
Converged Steady-State Operation
206
Triggered (Flash) Updates and Poisoned Routes
208
RIP Convergence When Routing Updates Cease
210
Convergence Extras
212
RIP Configuration
213
Enabling RIP and the Effects of Autosummarization
214
RIP Authentication Configuration
216
RIP Next-Hop Feature and Split Horizon
219
RIP Offset Lists
220
Route Filtering with Distribute Lists and Prefix Lists
222
Foundation Summary
225
Memory Builders
227
Fill in Key Tables from Memory
227
Definitions
227
Further Reading
227
Chapter 9
EIGRP
229
“Do I Know This Already?” Quiz
229
Foundation Topics
233
EIGRP Basics and Steady-State Operation
233
Hellos, Neighbors, and Adjacencies
233
EIGRP Updates
236
The EIGRP Topology Table
238
EIGRP Convergence
240
Input Events and Local Computation
241
Going Active on a Route
243
Stuck-in-Active
245
Limiting Query Scope
246
EIGRP Configuration
246
EIGRP Configuration Example
246
EIGRP Load Balancing
249
EIGRP Configuration Options That Are Similar to RIP
250

xvi 
Foundation Summary
251
Memory Builders
253
Fill in Key Tables from Memory
253
Definitions
253
Further Reading
253
Chapter 10
OSPF
255
“Do I Know This Already?” Quiz
255
Foundation Topics
260
OSPF Database Exchange
260
OSPF Router IDs
260
Becoming Neighbors, Exchanging Databases, and Becoming Adjacent
261
Becoming Neighbors: The Hello Process
263
Flooding LSA Headers to Neighbors
264
Requesting, Getting, and Acknowledging LSAs
265
Designated Routers on LANs
266
Designated Router Optimization on LANs
266
DR Election on LANs
268
Designated Routers on WANs and OSPF Network Types
269
Caveats Regarding OSPF Network Types over NBMA Networks
270
Example of OSPF Network Types and NBMA
271
SPF Calculation
274
Steady-State Operation
275
OSPF Design and LSAs
275
OSPF Design Terms
276
LSA Types and Network Types
277
LSA Types 1 and 2
278
LSA Type 3 and Inter-Area Costs
281
LSA Types 4 and 5, and External Route Types 1 and 2
284
OSPF Design in Light of LSA Types
286
Stubby Areas
287
OSPF Configuration
290
OSPF Costs and Clearing the OSPF Process
292
Alternatives to the OSPF Network Command
295
OSPF Filtering
295
Filtering Routes Using the distribute-list Command
295
OSPF ABR LSA Type 3 Filtering
297
Filtering Type 3 LSAs with the area range Command
299
Virtual Link Configuration
299
Configuring OSPF Authentication
301
OSPF Stub Router Configuration
303
Foundation Summary
305
Memory Builders
310
Fill in Key Tables from Memory
310
Definitions
310
Further Reading
311

 xvii
Chapter 11
IGP Route Redistribution, Route Summarization, and Default Routing
313
“Do I Know This Already?” Quiz
313
Foundation Topics
317
Route Maps, Prefix Lists, and Administrative Distance
317
Configuring Route Maps with the route-map Command
317
Route Map match Commands for Route Redistribution
319
Route Map set Commands for Route Redistribution
320
IP Prefix Lists
321
Administrative Distance
323
Route Redistribution
324
The Mechanics of the redistribute Command
324
Redistribution Using Default Settings
325
Setting Metrics, Metric Types, and Tags
328
Redistributing a Subset of Routes Using a Route Map
329
Mutual Redistribution at Multiple Routers
333
Preventing Suboptimal Routes by Setting the Administrative Distance
335
Preventing Suboptimal Routes by Using Route Tags
338
Using Metrics and Metric Types to Influence Redistributed Routes
340
Route Summarization
342
EIGRP Route Summarization
344
OSPF Route Summarization
344
RIP Route Summarization
345
Default Routes
345
Using Static Routes to 0.0.0.0, with redistribute static
347
Using the default-information originate Command
348
Using the ip default-network Command
349
Using Route Summarization to Create Default Routes
350
Foundation Summary
352
Memory Builders
353
Fill in Key Tables from Memory
353
Definitions
353
Further Reading
353
Chapter 12
Fundamental BGP Operations
355
“Do I Know This Already?” Quiz
355
Foundation Topics
360
Building BGP Neighbor Relationships
361
Internal BGP Neighbors
362
External BGP Neighbors
365
Checks Before Becoming BGP Neighbors
366
BGP Messages and Neighbor States
368
BGP Message Types
368
Purposefully Resetting BGP Peer Connections
369

xviii 
Building the BGP Table
370
Injecting Routes/Prefixes into the BGP Table
370
The BGP network Command
370
Redistributing from an IGP, Static, or Connected Route
373
The Impact of Auto-Summary on Redistributed Routes and the network Command
375
Manual Summaries and the AS_PATH Path Attribute
378
Adding Default Routes to BGP
381
The ORIGIN Path Attribute
382
Advertising BGP Routes to Neighbors
383
The BGP Update Message
383
Determining the Contents of Updates
384
Example: Impact of the Decision Process and NEXT_HOP on BGP Updates
386
Summary of Rules for Routes Advertised in BGP Updates
392
Building the IP Routing Table
392
Adding eBGP Routes to the IP Routing Table
392
Backdoor Routes
393
Adding iBGP Routes to the IP Routing Table
394
Using Sync and Redistributing Routes
396
Disabling Sync and Using BGP on All Routers in an AS
398
Confederations
399
Configuring Confederations
401
Route Reflectors
404
Foundation Summary
410
Memory Builders
414
Fill in Key Tables from Memory
414
Definitions
414
Further Reading
415
Chapter 13
BGP Routing Policies
417
“Do I Know This Already?” Quiz
417
Foundation Topics
423
Route Filtering and Route Summarization
423
Filtering BGP Updates Based on NLRI
424
Route Map Rules for NLRI Filtering
427
Soft Reconfiguration
428
Comparing BGP Prefix Lists, Distribute Lists, and Route Maps
428
Filtering Subnets of a Summary Using the aggregate-address Command
429
Filtering BGP Updates by Matching the AS_PATH PA
430
The BGP AS_PATH and AS_PATH Segment Types
431
Using Regular Expressions to Match AS_PATH
433
Example: Matching AS_PATHs Using AS_PATH Filters
436
Matching AS_SET and AS_CONFED_SEQ
439
BGP Path Attributes and the BGP Decision Process
442
Generic Terms and Characteristics of BGP PAs
442
The BGP Decision Process
444

 xix
Clarifications of the BGP Decision Process
445
Two Final Tiebreaker Steps in the BGP Decision Process
445
Adding Multiple BGP Routes to the IP Routing Table
446
Mnemonics for Memorizing the Decision Process
446
Configuring BGP Policies
448
Background: BGP PAs and Features Used by Routing Policies
448
Step 0: NEXT_HOP Reachable
450
Step 1: Administrative Weight
450
Step 2: Highest Local Preference (LOCAL_PREF)
453
Step 3: Choose Between Locally Injected Routes Based on ORIGIN PA
456
Step 4: Shortest AS_PATH
457
Removing Private ASNs
457
AS_PATH Prepending and Route Aggregation
458
Step 5: Best ORIGIN PA
461
Step 6: Smallest Multi-Exit Discriminator
461
Configuring MED: Single Adjacent AS
463
Configuring MED: Multiple Adjacent Autonomous Systems
464
The Scope of MED
464
Step 7: Prefer Neighbor Type eBGP over iBGP
465
Step 8: Smallest IGP Metric to the NEXT_HOP
465
The maximum-paths Command and BGP Decision Process Tiebreakers
465
Step 9: Lowest BGP Router ID of Advertising Router (with One Exception)
466
Step 10: Lowest Neighbor ID
466
The BGP maximum-paths Command
466
BGP Communities
468
Matching COMMUNITY with Community Lists
472
Removing COMMUNITY Values
473
Filtering NLRI Using Special COMMUNITY Values
474
Foundation Summary
476
Memory Builders
480
Fill in Key Tables from Memory
480
Definitions
480
Further Reading
480
Part IV Quality of Service
483
Chapter 14
Classification and Marking
485
“Do I Know This Already?” Quiz
485
Foundation Topics
489
Fields That Can Be Marked for QoS Purposes
489
IP Precedence and DSCP Compared
489
DSCP Settings and Terminology
490
The Class Selector PHB and DSCP Values
491
The Assured Forwarding PHB and DSCP Values
491
The Expedited Forwarding PHB and DSCP Values
492

xx 
Non-IP Header Marking Fields
493
Ethernet LAN Class of Service
493
WAN Marking Fields
493
Locations for Marking and Matching
494
Cisco Modular QoS CLI
495
The Mechanics of MQC
496
Classification Using Class Maps
497
Using Multiple match Commands
498
Classification Using NBAR
499
Classification and Marking Tools
500
Class-Based Marking (CB Marking) Configuration
500
CB Marking Example
501
CB Marking of CoS and DSCP
505
Network-Based Application Recognition
507
CB Marking Design Choices
508
Marking Using Policers
509
Policy Routing for Marking
510
Foundation Summary
511
Memory Builders
513
Fill in Key Tables from Memory
513
Definitions
513
Further Reading
513
Chapter 15
Congestion Management and Avoidance
515
“Do I Know This Already?” Quiz
515
Foundation Topics
519
Cisco Router Queuing Concepts
519
Software Queues and Hardware Queues
519
Queuing on Interfaces Versus Subinterfaces and Virtual Circuits
520
Comparing Queuing Tools
520
Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ
521
FIFO Queuing
521
Priority Queuing
522
Custom Queuing
523
Weighted Fair Queuing
524
WFQ Scheduler: The Process
525
WFQ Drop Policy, Number of Queues, and Queue Lengths
526
Types of WFQ Queues
527
WFQ Configuration
527
Class-Based WFQ and Low-Latency Queuing
529
CBWFQ Basic Features and Configuration
529
Defining and Limiting CBWFQ Bandwidth
532
Low-Latency Queuing
534
Defining and Limiting LLQ Bandwidth
537

 xxi
LLQ with More Than One Priority Queue
538
Miscellaneous CBWFQ/LLQ Topics
538
Queuing Summary
538
Weighted Random Early Detection
539
How WRED Weights Packets
541
WRED Configuration
542
LAN Switch Congestion Management and Avoidance
542
Cisco 3550 Switch Egress Queuing
543
Cisco 3550 Congestion Avoidance
545
Comparisons Between Cisco 3550 and 2950 Switches
547
Foundation Summary
549
Memory Builders
549
Fill in Key Tables from Memory
549
Definitions
549
Further Reading
549
Chapter 16
Shaping and Policing
551
“Do I Know This Already?” Quiz
551
Foundation Topics
555
Traffic-Shaping Concepts
555
Shaping Terminology
555
Shaping with an Excess Burst
557
Underlying Mechanics of Shaping
557
Traffic-Shaping Adaptation on Frame Relay Networks
559
Class-Based Shaping Configuration
559
Tuning Shaping for Voice Using LLQ and a Small Tc
561
Configuring Shaping by Bandwidth Percent
564
CB Shaping to a Peak Rate
565
Adaptive Shaping
565
Frame Relay Traffic Shaping Configuration
565
FRTS Configuration Using the traffic-rate Command
567
Setting FRTS Parameters Explicitly
568
FRTS Configuration Using LLQ
569
FRTS Adaptive Shaping
570
Policing Concepts and Configuration
571
CB Policing Concepts
571
Single-Rate, Two-Color Policing (One Bucket)
571
Single-Rate, Three-Color Policer (Two Buckets)
573
Two-Rate, Three-Color Policer (Two Buckets)
573
Class-Based Policing Configuration
575
Single-Rate, Three-Color Policing of All Traffic
575
Policing a Subset of the Traffic
576
CB Policing Defaults for Bc and Be
577
Configuring Dual-Rate Policing
577

xxii 
Multi-Action Policing
578
Policing by Percentage
578
Committed Access Rate
579
Foundation Summary
582
Memory Builders
584
Fill in Key Tables from Memory
584
Definitions
584
Further Reading
585
Part V
WAN
587
Chapter 17
Synchronous Serial Links and Protocols
589
“Do I Know This Already?” Quiz
589
Foundation Topics
592
Synchronous Serial Links
592
T1 Framing and Encoding
592
T1 Alarms
594
Carrier Detect and Interface Resets
594
Point-to-Point Protocol
595
PPP Link Control Protocol
596
Basic LCP/PPP Configuration
597
Multilink PPP
598
MLP Link Fragmentation and Interleaving
600
PPP Compression
601
PPP Layer 2 Payload Compression
602
Header Compression
602
Foundation Summary
604
Memory Builders
605
Fill in Key Tables from Memory
605
Definitions
605
Further Reading
605
Chapter 18
Frame Relay
607
“Do I Know This Already?” Quiz
607
Foundation Topics
610
Frame Relay Concepts
610
Frame Relay Data Link Connection Identifiers
610
Local Management Interface
611
Frame Relay Headers and Encapsulation
612
Frame Relay Congestion: DE, BECN, and FECN
613
Adaptive Shaping, FECN, and BECN
614
The Discard Eligibility Bit
615
Frame Relay Configuration
615
Frame Relay Configuration Basics
615
Frame Relay Payload Compression
619
Frame Relay Fragmentation
620

 xxiii
Foundation Summary
623
Memory Builders
624
Fill in Key Tables from Memory
624
Definitions
625
Further Reading
625
Part VI IP Multicast
627
Chapter 19
Introduction to IP Multicasting
629
“Do I Know This Already?” Quiz
629
Foundation Topics
632
Why Do You Need Multicasting?
632
Problems with Unicast and Broadcast Methods
632
How Multicasting Provides a Scalable and Manageable Solution
635
Multicast IP Addresses
638
Multicast Address Range and Structure
638
Well-Known Multicast Addresses
638
Multicast Addresses for Permanent Groups
639
Multicast Addresses for Source-Specific Multicast Applications and Protocols
640
Multicast Addresses for GLOP Addressing
640
Multicast Addresses for Private Multicast Domains
640
Multicast Addresses for Transient Groups
641
Summary of Multicast Address Ranges
641
Mapping IP Multicast Addresses to MAC Addresses
642
Managing Distribution of Multicast Traffic with IGMP
643
Joining a Group
644
Internet Group Management Protocol
645
IGMP Version 1
645
IGMPv1 Host Membership Query Functions
646
IGMPv1 Host Membership Report Functions
647
IGMPv1 Leave Mechanism
651
IGMPv1 Querier
651
IGMP Version 2
651
IGMPv2 Leave Group and Group-Specific Query Messages
654
IGMPv2 Querier
656
IGMPv1 and IGMPv2 Interoperability
657
IGMPv2 Host and IGMPv1 Routers
657
IGMPv1 Host and IGMPv2 Routers
658
IGMPv1 and IGMPv2 Routers
658
Timers Used in IGMPv1 and IGMPv2
659
IGMP Version 3
659
Comparison of IGMPv1, IGMPv2, and IGMPv3
661
Multicast Listener Discovery Protocol
662
LAN Multicast Optimizations
662
Cisco Group Management Protocol
663

xxiv 
IGMP Snooping
669
Router-Port Group Management Protocol
673
Foundation Summary
676
Memory Builders
676
Fill in Key Tables from Memory
677
Definitions
677
Further Reading
677
References in This Chapter
677
Chapter 20
IP Multicast Routing
679
“Do I Know This Already?” Quiz
679
Foundation Topics
683
Multicast Routing Basics
683
Overview of Multicast Routing Protocols
684
Multicast Forwarding Using Dense Mode
684
Reverse-Path-Forwarding Check
685
Multicast Forwarding Using Sparse Mode
687
Multicast Scoping
689
TTL Scoping
689
Administrative Scoping
690
Dense-Mode Routing Protocols
690
Operation of Protocol Independent Multicast Dense Mode
691
Forming PIM Adjacencies Using PIM Hello Messages
691
Source-Based Distribution Trees
692
Prune Message
693
PIM-DM: Reacting to a Failed Link
695
Rules for Pruning
697
Steady-State Operation and the State Refresh Message
699
Graft Message
700
LAN-Specific Issues with PIM-DM and PIM-SM
702
Prune Override
702
Assert Message
703
Designated Router
704
Summary of PIM-DM Messages
705
Distance Vector Multicast Routing Protocol
706
Multicast Open Shortest Path First
706
Sparse-Mode Routing Protocols
707
Operation of Protocol Independent Multicast Sparse Mode
707
Similarities Between PIM-DM and PIM-SM
707
Sources Sending Packets to the Rendezvous Point
708
Joining the Shared Tree
710
Completion of the Source Registration Process
712
Shared Distribution Tree
714
Steady-State Operation by Continuing to Send Joins
715

 xxv
Examining the RP’s Multicast Routing Table
716
Shortest-Path Tree Switchover
717
Pruning from the Shared Tree
719
Dynamically Finding RPs and Using Redundant RPs
720
Dynamically Finding the RP Using Auto-RP
721
Dynamically Finding the RP Using BSR
724
Anycast RP with MSDP
726
Summary: Finding the RP
728
Bidirectional PIM
729
Comparison of PIM-DM and PIM-SM
730
Foundation Summary
732
Memory Builders
736
Fill in Key Tables from Memory
736
Definitions
736
Further Reading
737
Part VII Security
739
Chapter 21
Security
741
“Do I Know This Already?” Quiz
741
Foundation Topics
745
Router and Switch Device Security
745
Simple Password Protection for the CLI
745
Better Protection of Enable and Username Passwords
746
User Mode and Privileged Mode AAA Authentication
747
Using a Default Set of Authentication Methods
748
Using Multiple Authentication Methods
749
Groups of AAA Servers
750
Overriding the Defaults for Login Security
751
PPP Security
752
Layer 2 Security
752
Switch Security Best Practices for Unused and User Ports
753
Port Security
754
Dynamic ARP Inspection
758
DHCP Snooping
761
IP Source Guard
763
802.1X Authentication Using EAP
764
General Layer 2 Security Recommendations
766
Layer 3 Security
768
IP Access Control List Review
769
ACL Rule Summary
770
Wildcard Masks
772
General Layer 3 Security Considerations
772
Smurf Attacks, Directed Broadcasts, and RPF Checks
772
Inappropriate IP Addresses
774
TCP SYN Flood, the Established Bit, and TCP Intercept
775

xxvi 
Foundation Summary
778
Memory Builders
780
Fill in Key Tables from Memory
780
Definitions
781
Further Reading
781
Part VIII  Enterprise Wireless Mobility
783
Chapter 22
IEEE 802.11 Fundamentals
785
“Do I Know This Already?” Quiz
785
Foundation Topics
788
802.11 Physical Layer Standards
788
802.11a
788
802.11b
789
802.11g
790
802.11n
791
Comparison of 802.11 Standards
791
Wireless System Configuration
791
Infrastructure Mode Configuration
792
Ad Hoc Mode Configuration
794
Wireless Hardware Components
794
Radio Cards
795
Access Points
795
Antennas
795
Repeaters
796
Bridges
797
Routers
797
Radio Frequency Peripherals
797
Infrastructure Mode Operation
798
Scanning
798
Passive Scanning
798
Active Scanning
799
Connecting with a Network
799
Data Transfer
799
Roaming
800
Ad Hoc Mode Operation
800
Wireless Configuration Parameters
801
SSID
802
RF Channels
803
Transmit Power
804
Data Rates
804
Power-Save Mode
805
RTS/CTS
806
Fragmentation
808
RTS/CTS and Fragmentation Summary
808

 xxvii
Wireless Medium Access
809
Wireless Security
810
WEP
811
TKIP
811
AES
812
WPA
812
Open System Authentication
812
Shared Key Authentication
812
Virtual Private Networks
813
Comparing Wireless Security
813
RF Signal Concepts
814
Modulation
814
RF Signal Characteristics
815
Gain
816
Signal-to-Noise Ratio
816
Spread Spectrum
817
Orthogonal Frequency Division Multiplexing
818
FCC Rules
819
RF Interference
819
Multipath
820
Foundation Summary
822
Memory Builders
822
Definitions
823
Further Reading
823
Chapter 23
Wireless LAN Solutions
825
“Do I Know This Already?” Quiz
825
Foundation Topics
828
Cisco Structured Wireless-Aware Network
828
Wireless Domain Services
828
Intrusion Detection System
829
Cisco SWAN Hardware
831
Cisco Wireless LAN Hardware
832
CiscoWorks Wireless LAN Solution Engine
834
Automatic Access Point Configuration
834
Assisted Site Surveys
835
Centralized Firmware Updates
835
Dynamic Grouping
835
VLAN Configuration
835
Multiple Service Set Identifier Support
835
Customizable Thresholds
835
Fault Status
836
Intrusion Detection System
836
Security Policy Monitoring
836

xxviii 
Secure User Interface
836
Air/RF Scanning and Monitoring
836
Self-Healing Functions
837
Reporting, Trending, Planning, and Troubleshooting
837
Applying Wireless LANs in Enterprises
837
Enterprise Security
837
Voice Services
839
Public Wireless LANs
840
Small Office and Home Wireless LANs
842
Foundation Summary
845
Memory Builders
845
Fill in Key Tables from Memory
845
Definitions
845
Further Reading
845
Part IX OSI and Cisco Device Basics
847
Chapter 24
Miscellaneous Networking Theory and Practices
849
“Do I Know This Already?” Quiz
849
Foundation Topics
851
The OSI and TCP/IP Models
851
OSI Layers
851
OSI Layering Concepts and Benefits
854
OSI Terminology
855
OSI Layer Interactions
856
Router Operation Miscellany
858
Cisco IOS Software Boot Sequences and the Configuration Register
858
The Configuration Register
858
The boot system Command
859
CLI Help Features
860
Foundation Summary
862
Memory Builders
863
Fill in Key Tables from Memory
863
Definitions
863
Part X
Appendixes
865
Appendix A Answers to the “Do I Know This Already?” Quizzes
867
Appendix B CCIE Routing and Switching Exam Updates: Version 1.0
891
Appendix C MPLS
895
Appendix D Decimal to Binary Conversion Table
953
Glossary
959
Index
1012

 xxix
Icons Used in This Book
PC
PC with
Software
Sun
Workstation
Macintosh
Terminal
File 
Server
Web
Server
Cisco Works
Workstation
Printer
Laptop
IBM
Mainframe
Cluster
Controller
Router
Bridge
Hub
Catalyst
Switch
Multilayer
Switch
ATM
Switch
Communication
Server
Gateway
Network Cloud
Line: Ethernet
Line: Serial
Line: Switched Serial
Route/Switch 
Processor
LAN2LAN
Switch
Label Switch
Router
ATM router
Headquarters
Branch 
Office
House, Regular
ONS 15540
Optical
Services
Router
Cisco 
MDS 9500   
Fibre 
Channel 
JBOD
Enterprise 
Fibre Channel disk
Cisco 
MDS 9500

xxx 
Command Syntax Conventions
The conventions used to present command syntax in this book are the same conventions used in the 
Cisco IOS Command Reference, which describes these conventions as follows:
■
Boldface indicates commands and keywords that are entered literally as shown. In actual 
conﬁguration examples and output (not general command syntax), boldface indicates 
commands that are manually input by the user (such as a show command).
■
Italics indicate arguments for which you supply actual values.
■
Vertical bars | separate alternative, mutually exclusive elements.
■
Square brackets, [ ], indicate optional elements.
■
Braces, { }, indicate a required choice.
■
Braces within brackets, [{ }], indicate a required choice within an optional element.

 xxxi
Introduction
The Cisco Certiﬁed Internetwork Expert (CCIE) certiﬁcation may be the most challenging and 
prestigious of all networking certiﬁcations. It has received numerous awards, and certainly has built 
a reputation as one of the most difﬁcult certiﬁcations to earn in all of the computing world. Having 
a CCIE certiﬁcation opens doors professionally, typically results in higher pay, and looks great
on a résumé.
Cisco currently offers several CCIE certiﬁcations, with several others that are no longer offered. The 
following list details the currently available CCIE certiﬁcations as of the time of publication of this 
book; check http://www.cisco.com/go/ccie for the latest information. The certiﬁcations are listed in 
the order in which they were made available to the public.
■
CCIE Routing and Switching 
■
CCIE Security
■
CCIE Service Provider (formerly known as Communications and Services)
■
CCIE Voice
■
CCIE Storage Networking
Each of the CCIE certiﬁcations requires the candidate to pass both a written exam and a one-day 
hands-on lab exam. The written exam is intended to test your knowledge of theory, protocols, and 
conﬁgurations that follow good design practices. The lab exam proves that you can conﬁgure and 
troubleshoot actual lab gear. 
Why Should I Take the CCIE Routing and Switching Written Exam?
The ﬁrst and most obvious reason to take the CCIE Routing and Switching written exam is that it 
is the ﬁrst step toward obtaining the CCIE Routing and Switching certiﬁcation. Also, you cannot 
schedule a CCIE lab exam until you pass the appropriate written exam. In short, if you want all the 
professional beneﬁts of a CCIE Routing and Switching certiﬁcation, you start by passing the written 
exam.
The beneﬁts of getting a CCIE certiﬁcation are varied, but here are just a few of the reasons:
■
Better pay
■
Better career advancement/new job
■
Applies to certain minimum requirements for Cisco Channel Partners, making you more 
valuable to Channel Partners
■
Better movement through the problem-resolution process when calling the Cisco TAC
■
Prestige
■
Credibility for consultants and customer engineers, including the use of the Cisco CCIE logo

xxxii 
The other big reason to take the CCIE Routing and Switching written exam is that it recertiﬁes an 
individual’s associate-, professional-, and expert-level Cisco certiﬁcations. In other words, passing 
any CCIE written exam recertiﬁes that person’s CCNA, CCNP, CCIP, CCSP, CCDP, and so on. 
(Recertiﬁcation requirements do change, so please verify the requirements at Cisco.com.)
The CCIE Routing and Switching Written Exam 350-001
The CCIE Routing and Switching written exam, at least as of the time of publication, consists
of a 2-hour exam administered at a proctored exam facility afﬁliated either with Pearson VUE 
(http://www.VUE.com/cisco) or Thomson Prometric (http://www.2test.com). The exam typically 
includes approximately 100 multiple-choice questions, with no simulation questions currently on the 
written exam. Because the written exam is typically followed at some point by an attempt at passing 
the lab exam, Cisco has little motivation to add simulator questions to any of the CCIE written 
exams.
As with most exams of any kind, everyone wants to know what is on the exam. Cisco provides 
general guidance as to topics on the exam in the CCIE Routing and Switching written exam 
blueprint, the most recent copy of which can be accessed at http://www.cisco.com/go/ccie. 
Cisco changes both the written and lab blueprints over time, and with CCIE, Cisco seldom, if ever, 
changes the exam number. (Cisco changes the exam numbers of the associate- and professional-
level certiﬁcations when it makes major changes to what is covered on those exams.) Knowing that 
the content will change over time, this book includes Appendix B, “CCIE Exam Updates.” This 
appendix will include coverage of any newly added topics to the CCIE Routing and Switching 
written exam. When Cisco changes the blueprint, the authors will add content to cover the new 
topics at http://www.ciscopress.com/title/1587201410, with that content also being available to all 
readers who have bought the earlier edition of the book. For future printings, Cisco Press will put 
that new content into Appendix B.
The CCIE Routing and Switching written exam blueprint, as of the time of publication, is as follows:
I.
General Networking Theory 
A. OSI Models 
B. General Routing Concepts 
C. Standards 
D. Protocol Mechanics 
E. Commands 
II.
Bridging and LAN Switching 
A. Transparent 
B. LAN Switching 
C. MLS 

 xxxiii
D. Data Link Layer 
E. Ethernet 
F. Catalyst IOS Conﬁguration Commands 
III. IP 
A. Addressing 
B. Services 
C. Applications 
D. Transport 
E. IPv6 
F. Network Management 
IV. IP Routing 
A. OSPF 
B. BGP 
C. EIGRP 
D. Route ﬁltering and Policy Routing 
E. DDR 
F. RIPv2 
G. The use of ‘show’ and ‘debug’ commands 
V.
QoS 
A. Trafﬁc classiﬁcation 
B. Congestion management 
C. Congestion avoidance
VI. WAN 
A. Frame Relay 
B. Physical Layer 
C. Leased Line Protocols 
VII. IP Multicast 
A. IGMP/CGMP 
B. Addressing 
C. Distribution Trees 
D. PIM-SM Mechanics 
E. Rendezvous Points 
F. RPF 

xxxiv 
VIII. Security 
A. Access Lists 
B. LAN security
C. Device Security/Access
D. Spooﬁng
IX. Enterprise Wireless Mobility 
A. Standards 
B. Hardware 
C. SWAN 
D. RF Troubleshooting 
E. VoWLAN 
F. Products 
The blueprint tells you what major topics to study, and which not to study by implication. However, 
the blueprint does not provide many details about the scope and depth covered for each topic. For 
example, the blueprint lists BGP, without any details. While the lack of details on the depth and 
breadth of coverage may be a little frustrating, the positive perspective is that the lab can cover far 
more details—so it is never a bad idea to study too many details for the written exam, because the 
extra topics are probably topics that could be on the lab exam anyway.
Knowing what topics Cisco does not list in the blueprint is also useful, particularly topics that Cisco 
has removed from earlier blueprints. For example, Cisco announced the removal of ISDN/DDR, 
IS-IS, ATM, and SONET from the written exam blueprint during the summer if 2005, making it a 
reasonable strategy to simply not study those topics today. Also, there is a possibility that MPLS 
might be added back to the exam—check http://www.cisco.com/go/ccie for the latest information 
regarding MPLS or any other new or deleted blueprint topics. 
About the CCIE Routing and Switching Ofﬁcial Exam Certiﬁcation Guide,
Second Edition
This section provides a brief insight into the contents of the book, the major goals, and some of the 
book features that you will encounter when using this book. 
Book Organization
This book contains nine major parts, one corresponding to each of the nine parts of the CCIE 
Routing and Switching written exam blueprint. Each part has one or more chapters covering the 
major topic areas inside each part of the blueprint. 

 xxxv
The order of the parts inside the book mostly matches the blueprint, with one exception: Part I in the 
blueprint (General Networking Theory) is covered as Part IX, “OSI and Cisco Device Basics,” of 
this book. We decided to make the blueprint’s Part I be the ﬁnal part of the book for two main 
reasons: ﬁrst, many of the topics in that part of the blueprint are more easily covered as part of other 
topics, so the details were included in other parts of the book. Second, several of the topics from 
Part I of the blueprint are relatively basic, being covered on the CCNA exam, so we actually debated 
whether to bother including the topics in this book at all. However, to be complete, the topics are 
included, but placed at the end of the book.
Each part of the book has one or more chapters. Some have a single chapter, such as Part VII, 
“Security.” However, Part III, “IP Routing,” has seven chapters, and a lot of page count.
Beyond the chapters in the nine major parts of the book, you will ﬁnd several useful appendixes 
gathered in Part X. In particular, Appendix B, “CCIE Exam Updates,” as mentioned earlier, will be 
updated online at http://www.ciscopress.com/title/1587201410 when appropriate to provide you 
with the most up to date material. Appendix C covers MPLS, because it was being considered for 
inclusion in the CCIE Routing and Switching written exam blueprint at the time of publication. 
Please check http://www.cisco.com and the web page for this book at http://www.ciscopress.com/
title/1587201410 to see the latest information about whether or not you need to read the MPLS 
appendix. Also included in Part X is a decimal to binary conversion chart for reference in Appendix D.
Following is a description of each part’s coverage:
■
Part I, “Bridging and LAN Switching” (Chapters 1–3)
This part focuses on LAN Layer 2 features, speciﬁcally Ethernet (Chapter 1), VLANs 
and trunking (Chapter 2), and Spanning Tree Protocol (Chapter 3). 
■
Part II, “TCP/IP” (Chapters 4–6)
This part is titled “IP” to match the blueprint, but it might be better titled “TCP/IP” 
because it covers details across the spectrum of the TCP/IP protocol stack. It includes 
IP addressing (Chapter 4), IP services like DHCP, ARP, and ICMP (Chapter 5), and 
protocol details for TCP, UDP, and application layer protocols (Chapter 6).
■
Part III, “IP Routing” (Chapters 7–13)
This part covers some of the more important topics on the exam, and is easily 
the largest part of the book. It covers Layer 3 forwarding concepts (Chapter 7), 
followed by three routing protocol chapters, one each about RIP, EIGRP, and OSPF 
(Chapters 8 through 10, respectively). Following that, Chapter 11 covers route 
redistribution between IGPs. At the end, two chapters (12 and 13) hit the details 
of BGP.

xxxvi 
■
Part IV, “Quality of Service” (Chapters 14–16)
This part covers the more popular QoS tools, including some MQC-based tools, as 
well as several older tools, particularly FRTS. The chapters include coverage of 
classiﬁcation and marking (Chapter 14), queuing and congestion avoidance (Chapter 15), 
plus shaping, policing, and link efﬁciency (Chapter 16).
■
Part V, “WAN” (Chapters 17–18)
The WAN coverage in the blueprint shrunk in the summer of 2005 with the removal 
of ATM, SONET, ISDN, and DDR. The potential addition of MPLS back into the 
CCIE Routing and Switching written blueprint (see http://www.cisco.com for the 
latest, or this book’s page at http://www.ciscopress.com/title/1587201410) would add 
another WAN-oriented topic. The book’s WAN section covers two main topics: 
point-to-point protocols and concepts (Chapter 17) and Frame Relay (Chapter 18).
■
Part VI, “IP Multicast” (Chapters 19–20)
This is one of the two parts of the book that cover topics that are mostly ignored for 
the CCNP exam. As a result, the text assumes that the reader has no knowledge of 
multicast before beginning this part. Chapter 19 covers multicast on LANs, including 
IGMP and how hosts join multicast groups. Chapter 20 covers multicast WAN topics.
■
Part VII, “Security” (Chapter 21)
Given the CCIE tracks for both Security and Voice, Cisco has a small dilemma 
regarding whether to cover those topics on CCIE Routing and Switching, and if so, in 
how much detail. This part covers a variety of security topics appropriate for CCIE 
Routing and Switching, in a single chapter. This chapter focuses on switch and router 
security. (Note that Voice, whose protocols were formerly covered on CCIE Routing 
and Switching, is not covered in the current blueprint or in this book.)
■
Part VIII, “Enterprise Wireless Mobility” (Chapters 22–23)
Cisco added wireless LAN coverage to the blueprint in summer 2004. The coverage 
focuses on wireless LAN concepts and protocols, along with RF properties of the 
wireless signals. The coverage is comprised of two chapters: Chapter 22, covering 
802.11 wireless LAN fundamentals, and Chapter 23, covering deployment solutions.
■
Part IX, “OSI and Cisco Device Basics” (Chapter 24)
The ﬁnal part of the book covers a few topics from the ﬁrst part of the blueprint, and 
is mainly a catch-all chapter for a few small topics that were not appropriate for any 
other part of the book. 

 xxxvii
■
Part X, “Appendixes”
— Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes”
This appendix lists the questions covered at the beginning of each chapter and 
their corresponding answers.
— Appendix B, “CCIE Routing and Switching Exam Updates: Version 1.0” 
As of the ﬁrst printing of the book, this appendix contains only a few words 
that reference the web page for this book at http://www.ciscopress.com/title/
1587201410. As the blueprint evolves over time, the authors will post new 
materials at the website. Any future printings of the book will include the latest 
newly added materials in printed form inside Appendix B.
— Appendix C, “MPLS” 
This appendix covers many of the basics of MPLS, with some focus on the issues 
between the CE and PE routers. This coverage is an appendix because, as of press 
time, Cisco had not made a ﬁnal decision about whether to add MPLS coverage back 
to the CCIE Routing and Switching exam. Please check http://www.ciscopress. 
com/title/1587201410 for information about whether you should study this 
section.
— Appendix D, “Decimal to Binary Conversion Table” 
This appendix lists the decimal values 0 through 255, with their binary 
equivalents.
— (CD-only) Appendix E, “IP Addressing Practice” 
(This appendix is in a PDF on the CD, in printable format.) This appendix lists 
several practice problems for IP subnetting and ﬁnding summary routes. The 
explanations to the answers use the shortcuts described in the book.
— (CD-only) Appendix F, “Key Tables for CCIE Study” 
(This appendix is in a PDF on the CD, in printable format.) This appendix lists 
the most important tables from the core chapters of the book. The tables have 
much of the content removed. You can print the PDF, and then ﬁll in the table 
from memory, checking your answers against the tables in the book. 

xxxviii 
Book Features
The core chapters of this book have several features that help you make the best use of your time:
■
“Do I Know This Already?” Quizzes—Each chapter begins with a quiz that helps you to 
determine the amount of time you need to spend studying that chapter. If you follow the 
directions at the beginning of the chapter, the “Do I Know This Already?” quiz directs you to 
study all or particular parts of the chapter.
■
Foundation Topics—These are the core sections of each chapter. They explain the protocols, 
concepts, and conﬁguration for the topics in that chapter.
■
Foundation Summary—The “Foundation Summary” section of this book departs from the 
typical features of the “Foundation Summary” section of other Cisco Press Ofﬁcial Exam 
Certiﬁcation Guides. This section does not repeat any details from the “Foundation Topics” 
section; instead, it simply summarizes and lists facts related to the chapter, but for which a 
longer or more detailed explanation is not warranted.
■
Key Points—Throughout the “Foundation Topics” section, a Key Point icon has been placed 
beside the most important areas for review. After reading a chapter, when doing your ﬁnal 
preparation for the exam, take the time to ﬂip through the chapters, looking for the Key Point 
icons, and review those paragraphs, tables, ﬁgures, and lists.
■
Fill in Key Tables from Memory—The more important tables from the chapters have been 
copied to PDF ﬁles available on the CD as Appendix F. The tables have most of the information 
removed. After printing these mostly-empty tables, you can use them to improve your memory 
of the facts in the table by trying to ﬁll them out. This tool should be useful for memorizing key 
facts. 
■
CD-based practice exam—The companion CD contains multiple-choice questions and a 
testing engine. The CD includes two question banks: one that consists of all the “Do I Know 
This Already?” quiz questions, and another set that includes questions unique to the CD. As part 
of your ﬁnal preparation, you should practice with these questions to help you get used to the 
exam-taking process, as well as help reﬁne and prove your knowledge of the exam topics. 
■
Key Terms and Glossary—The more important terms mentioned in each chapter are listed at 
the end of each chapter under the heading “Deﬁnitions.” The glossary, found at the end of the 
book, lists all the terms from the chapters. When studying each chapter, you should review the 
key terms, and for those terms about which you are unsure of the deﬁnition, you can review the 
short deﬁnitions from the glossary. 
■
Further Reading—Each chapter includes a suggested set of books and websites for additional 
study on the same topics covered in that chapter. Often, these references will be useful tools for 
preparation for the CCIE Routing and Switching lab exam. 



Part I: Bridging and LAN 
Switching
Chapter 1
Ethernet Basics
Chapter 2
Virtual LANs and VLAN Trunking
Chapter 3
Spanning Tree Protocol

4     Chapter : Part I: Bridging and LAN Switching

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Bridging and LAN Switching 
— Transparent 
— LAN Switching 
— Data Link Layer 
— Ethernet 
— Catalyst IOS Conﬁguration Commands 
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching written exam topics: 
■Ethernet cabling
■Ethernet framing and addressing
■CSMA/CD
■Switch forwarding logic

C H A P T E R 1
Ethernet Basics 
It’s no surprise that the concepts, protocols, and commands related to Ethernet are a key part 
of the CCIE Routing and Switching written exam. Almost all campus networks today are 
built using Ethernet technology. Also, Ethernet technology is moving into the WAN with the 
emergence of metro Ethernet. Even in an IT world, where technology changes rapidly, you can 
expect that ten years from now, Ethernet will still be an important part of the CCIE Routing and 
Switching written and lab exams. 
For this chapter, if I had to venture a guess, probably 100 percent of you reading this book 
know a fair amount about Ethernet basics already. I must admit, I was tempted to leave it out. 
However, I would also venture a guess that at least some of you have forgotten a few facts about 
Ethernet. So you can read the whole chapter if your Ethernet recollections are a bit fuzzy—
or you could just hit the highlights. For exam preparation, it is typically useful to use all the 
refresher tools: take the “Do I Know This Already?” quiz, complete the deﬁnitions of the terms 
listed at the end of the chapter, print and complete the tables in Appendix F, “Key Tables for 
CCIE Study,” and certainly answer all the CD-ROM questions concerning Ethernet.
“Do I Know This Already?” Quiz
Table 1-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
Table 1-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping 
Foundation Topics Section
Questions Covered 
in This Section
Score
Ethernet Layer 1: Wiring, Speed, and Duplex
1–5
Ethernet Layer 2: Framing and Addressing
6–7
Switching and Bridging Logic
8
Total Score

6     Chapter 1: Ethernet Basics
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can ﬁnd 
the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following denotes the correct usage of pins on the RJ-45 connectors at the 
opposite ends of an Ethernet cross-over cable? 
a. 1 to 1
b. 1 to 2
c. 1 to 3
d. 6 to 1
e. 6 to 2
f. 6 to 3
2.
Which of the following denotes the correct usage of pins on the RJ-45 connectors at the 
opposite ends of an Ethernet straight-through cable? 
a. 1 to 1
b. 1 to 2
c. 1 to 3
d. 6 to 1
e. 6 to 2
f. 6 to 3
3.
Which of the following commands must be conﬁgured on a Cisco IOS switch interface to 
disable Ethernet auto-negotiation? 
a. no auto-negotiate
b. no auto
c. Both speed and duplex
d. duplex
e. speed
4.
Consider an Ethernet cross-over cable between two 10/100 ports on Cisco switches. One 
switch has been conﬁgured for 100-Mbps full duplex. Which of the following is true about 
the other switch?
a. It will use a speed of 10 Mbps.
b. It will use a speed of 100 Mbps.
c. It will use a duplex setting of half duplex.
d. It will use a duplex setting of full duplex.

“Do I Know This Already?” Quiz     7
5.
Consider an Ethernet cross-over cable between two 10/100/1000 ports on Cisco switches. 
One switch has been conﬁgured for half duplex, and the other for full duplex. The ports 
successfully negotiate a speed of 1 Gbps. Which of the following could occur as a result of 
the duplex mismatch? 
a. No frames can be received by the half-duplex switch without it believing an FCS error 
has occurred.
b. CDP would detect the mismatch and change the full-duplex switch to half duplex.
c. CDP would detect the mismatch and issue a log message to that effect.
d. The half-duplex switch will erroneously believe collisions have occurred.
6.
Which of the following Ethernet header type ﬁelds is a 2-byte ﬁeld? 
a. DSAP
b. Type (in SNAP header)
c. Type (in Ethernet V2 header)
d. LLC Control 
7.
Which of the following standards deﬁnes a Fast Ethernet standard? 
a. IEEE 802.1Q
b. IEEE 802.1U
c. IEEE 802.1X
d. IEEE 802.1Z
e. IEEE 802.1AB
f. IEEE 802.1AD
8.
Suppose a brand-new Cisco IOS–based switch has just been taken out of the box and cabled 
to several devices. One of the devices sends a frame. For which of the following destinations 
would a switch ﬂood the frames out all ports (except the port upon which the frame was 
received)? 
a. Broadcasts
b. Unknown unicasts
c. Known unicasts
d. Multicasts

8     Chapter 1: Ethernet Basics
Foundation Topics
Ethernet Layer 1: Wiring, Speed, and Duplex 
Before making an Ethernet LAN functional, end-user devices, routers, and switches must be cabled 
correctly. To run with fewer transmission errors at higher speeds, and to support longer cable 
distances, variations of copper and optical cabling can be used. The different Ethernet speciﬁcations, 
cable types, and cable lengths per the various speciﬁcations are important for the exam, and are 
listed in the “Foundation Summary” section. 
RJ-45 Pinouts and Category 5 Wiring
You should know the details of cross-over and straight-through Category 5 (Cat 5) or Cat 5e 
cabling for most any networking job. The EIA/TIA deﬁnes the cabling speciﬁcations for Ethernet 
LANs (http://www.eia.org and http://www.tiaonline.org), including the pinouts for the RJ-45 
connects, as shown in Figure 1-1.
Figure 1-1
RJ-45 Pinouts with Four-Pair UTP Cabling
The most popular Ethernet standards (10BASE-T, 100BASE-T, and 1000BASE-T) each use two 
twisted pairs (speciﬁcally pairs 2 and 3 shown in Figure 1-1), with one pair used for transmission 
in each direction. Depending on which pair a device uses to transmit and receive, either a straight-
through or cross-over cable is required. Table 1-2 summarizes how the cabling and pinouts work.
Table 1-2
Ethernet Cabling Types 
KEY 
POINT
Type of Cable
Pinouts
Key Pins Connected
Straight-through
T568A (both ends) or T568B (both ends)
1 – 1; 2 – 2; 3 – 3; 6 – 6
Cross-over
T568A on one end, T568B on the other
1 – 3; 2 – 6; 3 – 1; 6 – 2
KEY 
POINT

Ethernet Layer 1: Wiring, Speed, and Duplex     9
Many Ethernet standards use two twisted pairs, with one pair being used for transmission in each 
direction. For instance, a PC network interface card (NIC) transmits on pair 1,2 and receives on 
pair 3,6; switch ports do the opposite. So, a straight-through cable works well, connecting pair 1,2 
on the PC (PC transmit pair) to the switch port’s pair 1,2, on which the switch receives. When the 
two devices on the ends of the cable both transmit using the same pins, a cross-over cable is 
required. For instance, if two connected switches send using the pair at pins 3,6 and receive on 
pins 1,2, then the cable needs to connect the pair at 3,6 on one end to pins 1,2 at the other end, and 
vice versa.
Cisco also supports a switch feature that lets the switch ﬁgure out if the wrong cable is installed: 
Auto-MDIX (automatic medium-dependent interface crossover) detects the wrong cable and 
causes the switch to swap the pair it uses for transmitting and receiving, which solves the cabling 
problem. (As of publication, this feature is not supported on all Cisco switch models.)
Auto-negotiation, Speed, and Duplex
By default, each Cisco switch port uses Ethernet auto-negotiation to determine the speed and 
duplex setting (half or full). The switches can also set their duplex setting with the duplex 
interface subcommand, and their speed with—you guessed it—the speed interface subcommand. 
Switches can dynamically detect the speed setting on a particular Ethernet segment by using a few 
different methods. Cisco switches (and many other devices) can sense the speed using the Fast 
Link Pulses (FLP) of the auto-negotiation process. However, if auto-negotiation is disabled on 
either end of the cable, the switch detects the speed anyway based on the incoming electrical 
signal. You can force a speed mismatch by statically conﬁguring different speeds on either end of 
the cable, causing the link to no longer function.
Switches detect duplex settings through auto-negotiation only. If both ends have auto-
negotiation enabled, the duplex is negotiated. However, if either device on the cable disables 
auto-negotiation, the devices without a conﬁgured duplex setting must assume a default. Cisco 
switches use a default duplex setting of half duplex (HDX) (for 10-Mbps and 100-Mbps 
interfaces) or full duplex (FDX) (for 1000-Mbps interfaces). To disable auto-negotiation on a 
Cisco switch port, you simply need to statically conﬁgure the speed and the duplex settings.
Ethernet devices can use FDX only when collisions cannot occur on the attached cable; a 
collision-free link can be guaranteed only when a shared hub is not in use. The next few topics 
review how Ethernet deals with collisions when they do occur, as well as what is different with 
Ethernet logic in cases where collisions cannot occur and FDX is allowed.
NOTE
Cross-over cables can also be used between a pair of PCs, swapping the transmit pair 
on one end (1,2) with the receive pins at the other end (3,6).

10     Chapter 1: Ethernet Basics
CSMA/CD
The original Ethernet speciﬁcations expected collisions to occur on the LAN. The media was 
shared, creating a literal electrical bus. Any electrical signal induced onto the wire could collide 
with a signal induced by another device. When two or more Ethernet frames overlap on the 
transmission medium at the same instant in time, a collision occurs; the collision results in bit 
errors and lost frames. 
The original Ethernet speciﬁcations deﬁned the Carrier Sense Multiple Access with Collision 
Detection (CSMA/CD) algorithm to deal with the inevitable collisions. CSMA/CD minimizes the 
number of collisions, but when they occur, CSMA/CD deﬁnes how the sending stations can 
recognize the collisions and retransmit the frame. The following list outlines the steps in the 
CSMA/CD process:
1.
A device with a frame to send listens until the Ethernet is not busy (in other words, the device 
cannot sense a carrier signal on the Ethernet segment).
2.
When the Ethernet is not busy, the sender begins sending the frame.
3.
The sender listens to make sure that no collision occurred.
4.
If there was a collision, all stations that sent a frame send a jamming signal to ensure that all 
stations recognize the collision.
5.
After the jamming is complete, each sender of one of the original collided frames randomizes 
a timer and waits that long before resending. (Other stations that did not create the collision 
do not have to wait to send.)
6.
After all timers expire, the original senders can begin again with Step 1.
Collision Domains and Switch Buffering
A collision domain is a set of devices that can send frames that collide with frames sent by another 
device in that same set of devices. Before the advent of LAN switches, Ethernets were either 
physically shared (10BASE2 and 10BASE5) or shared by virtue of shared hubs and their Layer 1 
“repeat out all other ports” logic. Ethernet switches greatly reduce the number of possible 
collisions, both through frame buffering and through their more complete Layer 2 logic.
By deﬁnition of the term, Ethernet hubs:
■
Operate solely at Ethernet Layer 1
■
Repeat (regenerate) electrical signals to improve cabling distances
■
Forward signals received on a port out all other ports (no buffering)
As a result of a hub’s logic, a hub creates a single collision domain. Switches, however, create a 
different collision domain per switch port, as shown in Figure 1-2.
KEY 
POINT
KEY 
POINT

Ethernet Layer 1: Wiring, Speed, and Duplex     11
Figure 1-2
Collision Domains with Hubs and Switches
Switches have the same cabling and signal regeneration beneﬁts as hubs, but switches do a lot 
more—including sometimes reducing or even eliminating collisions by buffering frames. When 
switches receive multiple frames on different switch ports, they store the frames in memory 
buffers to prevent collisions. 
For instance, imagine that a switch receives three frames at the same time, entering three different 
ports, and they all must exit the same switch port. The switch simply stores two of the frames in 
memory, forwarding the frames sequentially. As a result, in Figure 1-2, the switch prevents any 
frame sent by Larry from colliding with a frame sent by Archie or Bob—which by deﬁnition puts 
each of the PCs attached to the switch in Figure 1-2 in different collision domains.
When a switch port connects via cable to a single other non-hub device—for instance, like the 
three PCs in Figure 1-2—no collisions can possibly occur. The only devices that could create a 
collision are the switch port and the one connected device—and they each have a separate twisted 
pair on which to transmit. Because collisions cannot occur, such segments can use full-duplex 
logic.
When a switch port connects to a hub, it needs to operate in HDX mode, because collisions might 
occur due to the logic used by the hub.
NOTE
NICs operating in HDX mode use loopback circuitry when transmitting a frame. This 
circuitry loops the transmitted frame back to the receive side of the NIC, so that when the NIC 
receives a frame over the cable, the combined looped-back signal and received signal allows the 
NIC to notice that a collision has occurred.
Larry
Archie
Bob
SW1
Larry
1 Collision Domain
10BASE-T, using Shared hub
Multiple Collision Domain
10BASE-T, using Switch
Solid Lines Represent
Twisted Pair Cabling
Archie
Bob
Hub1
KEY 
POINT

12     Chapter 1: Ethernet Basics
Basic Switch Port Conﬁguration
The three key conﬁguration elements on a Cisco switch port are auto-negotiation, speed, and 
duplex. Cisco switches use auto-negotiation by default; it is then disabled if both the speed and 
duplex are manually conﬁgured. You can set the speed using the speed {auto | 10 | 100 | 1000} 
interface subcommand, assuming the interface supports multiple speeds. You conﬁgure the duplex 
setting using the duplex {auto | half | full} interface subcommand.
Example 1-1 shows the manual conﬁguration of the speed and duplex on the link between Switch1 
and Switch4 from Figure 1-3, and the results of having mismatched duplex settings. (The book 
refers to speciﬁc switch commands used on IOS-based switches, referred to as “Catalyst IOS” by 
the Cisco CCIE blueprint.)
Figure 1-3
Simple Switched Network with Trunk
Example 1-1
Manual Setting for Duplex and Speed, with Mismatched Duplex 
switch1# sssshhhhoooowwww    iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaa    0000////11113333
FastEthernet0/13 is up, line protocol is up 
  Hardware is Fast Ethernet, address is 000a.b7dc.b78d (bia 000a.b7dc.b78d)
  MTU 1500 bytes, BW 100000 Kbit, DLY 100 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation ARPA, loopback not set
  Keepalive set (10 sec)
  Full-duplex, 100Mb/s
! remaining lines omitted for brevity
! Below, Switch1’s interface connecting to Switch4 is configured for 100 Mbps, 
! HDX. Note that IOS rejects the first dddduuuupppplllleeeexxxx command; you cannot set duplex until
! the speed is manually configured.
switch1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
switch1(config)# iiiinnnntttt    ffffaaaa    0000////11113333
switch1(config-if)# dddduuuupppplllleeeexxxx    hhhhaaaallllffff
Duplex will not be set until speed is set to non-auto value
switch1(config-if)# ssssppppeeeeeeeedddd    111100000000
PC1
SW1
R4
0/13
000a.b7dc.b78d
0200.3333.3333
0200.4444.4444
000f.2343.87cd
0/13
R3
0/6
0/4
0/3
0010.a49b.6111
SW4

Ethernet Layer 1: Wiring, Speed, and Duplex     13
05:08:41: %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/13, changed state 
 to down
05:08:46: %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/13, changed state 
 to up
switch1(config-if)# dddduuuupppplllleeeexxxx    hhhhaaaallllffff
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! NOT SHOWN: Configuration for 100/half on Switch4’s int fa 0/13. 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Now with both switches manually configured for speed and duplex, neither will be 
! using Ethernet auto-negotiation. As a result, below the duplex setting on Switch1 
! can be changed to FDX with Switch4 remaining configured to use HDX. 
switch1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
switch1(config)# iiiinnnntttt    ffffaaaa    0000////11113333
switch1(config-if)# dddduuuupppplllleeeexxxx    ffffuuuullllllll
05:13:03: %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/13, changed state 
to down
05:13:08: %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/13, changed state 
to up
switch1(config-if)#^^^^ZZZZ
switch1# sssshhhh    iiiinnnntttt    ffffaaaa    0000////11113333
FastEthernet0/13 is up, line protocol is up 
! Lines omitted for brevity
  Full-duplex, 100Mb/s
! remaining lines omitted for brevity
! Below, Switch4 is shown to be HDX. Note 
! the collisions counters at the end of the sssshhhhoooowwww    iiiinnnntttteeeerrrrffffaaaacccceeee command. 
switch4# sssshhhh    iiiinnnntttt    ffffaaaa    0000////11113333
FastEthernet0/13 is up, line protocol is up (connected)
  Hardware is Fast Ethernet, address is 000f.2343.87cd (bia 000f.2343.87cd)
  MTU 1500 bytes, BW 100000 Kbit, DLY 1000 usec,
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation ARPA, loopback not set
  Keepalive set (10 sec)
  Half-duplex, 100Mb/s
! Lines omitted for brevity
  5 minute output rate 583000 bits/sec, 117 packets/sec
     25654 packets input, 19935915 bytes, 0 no buffer
     Received 173 broadcasts (0 multicast)
     0 runts, 0 giants, 0 throttles
     0 input errors, 0 CRC, 0 frame, 0 overrun, 0 ignored
     0 watchdog, 173 multicast, 0 pause input
     0 input packets with dribble condition detected
     26151 packets output, 19608901 bytes, 0 underruns
     54 output errors, 5 collisions, 0 interface resets
     0 babbles, 54 late collision, 59 deferred
     0 lost carrier, 0 no carrier, 0 PAUSE output
     0 output buffer failures, 0 output buffers swapped out
continues
Example 1-1
Manual Setting for Duplex and Speed, with Mismatched Duplex (Continued)

14     Chapter 1: Ethernet Basics
The statistics on switch4 near the end of the example show collisions (detected in the time during 
which the ﬁrst 64 bytes were being transmitted) and late collisions (after the ﬁrst 64 bytes were 
transmitted). In an Ethernet that follows cabling length restrictions, collisions should be detected 
while the ﬁrst 64 bytes are being transmitted. In this case, Switch1 is using FDX logic, meaning 
it sends frames anytime—including when Switch4 is sending frames. As a result, Switch4 receives 
frames anytime, and if sending at the time, it believes a collision has occurred. Switch4 has 
deferred 59 frames, meaning that it chose to wait before sending frames because it was currently 
receiving a frame. Also, the retransmission of the frames that Switch4 thought were destroyed due 
to a collision, but may not have been, causes duplicate frames to be received, occasionally causing 
application connections to fail and routers to lose neighbor relationships.
Ethernet Layer 2: Framing and Addressing
In this book, as in many Cisco courses and documents, the word frame refers to the bits and bytes 
that include the Layer 2 header and trailer, along with the data encapsulated by that header and 
trailer. The term packet is most often used to describe the Layer 3 header and data, without a Layer 
2 header or trailer. Ethernet’s Layer 2 speciﬁcations relate to the creation, forwarding, reception, 
and interpretation of Ethernet frames. 
The original Ethernet speciﬁcations were owned by the combination of Digital Equipment Corp., 
Intel, and Xerox—hence the name “Ethernet (DIX)” shown in Figure 1-4, which shows the various 
Ethernet frame formats. Later, in the early 1980s, the IEEE standardized Ethernet, deﬁning parts 
(Layer 1 and some of Layer 2) in the 802.3 Media Access Control (MAC) standard, and other parts 
of Layer 2 in the 802.2 Logical Link Control (LLC) standard. Later, the IEEE realized that the 1-
byte DSAP ﬁeld in the 802.2 LLC header was too small. As a result, the IEEE introduced a new 
frame format with a Sub-Network Access Protocol (SNAP) header after the 802.2 header, as shown 
in the third style of header in Figure 1-4. Later, in 1997, the IEEE added the original DIX V2 
framing to the 802.3 standard as well.
Table 1-3 lists the header ﬁelds, along with a brief explanation. The more important ﬁelds are 
explained in more detail after the table.
02:40:49: %CDP-4-DUPLEX_MISMATCH: duplex mismatch discovered on FastEthernet0/13
(not full duplex), with Switch1 FastEthernet0/13 (full duplex).
! Above, CDP messages have been exchanged over the link between switches. CDP
! exchanges information about Duplex on the link, and can notice (but not fix)
! the mismatch. 
Example 1-1
Manual Setting for Duplex and Speed, with Mismatched Duplex (Continued)
KEY 
POINT

Ethernet Layer 2: Framing and Addressing     15
Figure 1-4
Ethernet Framing Options
Table 1-3
Ethernet Header Fields 
KEY 
POINT
Field
Description
Preamble (DIX)
Provides synchronization and signal transitions to allow proper clocking 
of the transmitted signal. Consists of 62 alternating 1s and 0s, and ends 
with a pair of 1s.
Preamble and Start of 
Frame Delimiter (802.3)
Same purpose and binary value as DIX preamble; 802.3 simply renames 
the 8-byte DIX preamble as a 7-byte preamble and a 1-byte Start of 
Frame Delimiter (SFD).
Type (or Protocol Type) 
(DIX)
2-byte ﬁeld that identiﬁes the type of protocol or protocol header that 
follows the header. Allows the receiver of the frame to know how to 
process a received frame.
Length (802.3)
Describes the length, in bytes, of the data following the Length ﬁeld, up 
to the Ethernet trailer. Allows an Ethernet receiver to predict the end of 
the received frame.
Destination Service Access 
Point (802.2)
DSAP; 1-byte protocol type ﬁeld. The size limitations, along with other 
uses of the low-order bits, required the later addition of SNAP headers.
Source Service Access 
Point (802.2)
SSAP; 1-byte protocol type ﬁeld that describes the upper-layer protocol 
that created the frame.
continues
Dest.
Address
Preamble
T
y
p
e
Source
Address
FCS
Data
Ethernet (DIX) and Revised (1997) IEEE 802.3
8
6
6
    2 Variable 4
Original IEEE Ethernet (802.3)
IEEE 802.3 with SNAP Header
7
1
6
6
2
1
1
1-2
Variable
4
Dest.
address
Preamble
D
S
A
P
S
S
A
P
Source
address
FCS
Data
SD
Length
Control
802.3
802.2
802.3
7
1
6
6
2
1
1
1-2
3           2     Variable    4
Dest.
address
Preamble
D
S
A
P
S
S
A
P
Source
address
FCS
Data
SD
Length
Control
TYPE
OUI
802.3
802.2
802.3
SNAP
KEY 
POINT

16     Chapter 1: Ethernet Basics
Types of Ethernet Addresses
Ethernet addresses, also frequently called MAC addresses, are 6 bytes in length, typically listed in 
hexadecimal form. There are three main types of Ethernet address, as listed in Table 1-4.
Most engineers instinctively know how unicast and broadcast addresses are used in a typical 
network. When an Ethernet NIC needs to send a frame, it puts its own unicast address in the Source 
Address ﬁeld of the header. If it wants to send the frame to a particular device on the LAN, the 
sender puts the other device’s MAC address in the Ethernet header’s Destination Address ﬁeld. 
If the sender wants to send the frame to every device on the LAN, it sends the frame to the 
FFFF.FFFF.FFFF broadcast destination address. (A frame sent to the broadcast address is named 
a broadcast or broadcast frame, and frames sent to unicast MAC addresses are called unicasts or 
unicast frames.) 
Multicast Ethernet frames are used to communicate with a possibly dynamic subset of the devices 
on a LAN. The most common use for Ethernet multicast addresses involves the use of IP multicast. 
For example, if only 3 of 100 users on a LAN want to watch the same video stream using an IP 
multicast–based video application, the application can send a single multicast frame. The three 
interested devices prepare by listening for frames sent to a particular multicast Ethernet address, 
Field
Description
Control (802.2)
1- or 2-byte ﬁeld that provides mechanisms for both connectionless and 
connection-oriented operation. Generally used only for connectionless 
operation by modern protocols, with a 1-byte value of 0x03.
Organizationally Unique 
Identiﬁer (SNAP)
OUI; 3-byte ﬁeld, generally unused today, providing a place for the 
sender of the frame to code the OUI representing the manufacturer of the 
Ethernet NIC.
Type (SNAP)
2-byte Type ﬁeld, using same values as the DIX Type ﬁeld, overcoming 
deﬁciencies with size and use of the DSAP ﬁeld.
Table 1-4
Three Types of Ethernet/MAC Address
Type of Ethernet/MAC 
Address
Description and Notes
Unicast 
Fancy term for an address that represents a single LAN interface. The 
I/G bit, the most signiﬁcant bit in the most signiﬁcant byte, is set to 0.
Broadcast 
An address that means “all devices that reside on this LAN right 
now.” Always a value of hex FFFFFFFFFFFF.
Multicast 
A MAC address that implies some subset of all devices currently on 
the LAN. By deﬁnition, the I/G bit is set to 1.
Table 1-3
Ethernet Header Fields (Continued)

Ethernet Layer 2: Framing and Addressing     17
processing frames destined for that address. Other devices may receive the frame, but they ignore 
its contents. Because the concept of Ethernet multicast is most often used today with IP multicast, 
most of the rest of the details of Ethernet multicast will be covered in Chapter 19, “Introduction 
to IP Multicasting.”
Ethernet Address Formats 
The IEEE intends for unicast addresses to be unique in the universe by administering the 
assignment of MAC addresses. The IEEE assigns each vendor a code to use as the ﬁrst 3 bytes of 
its MAC addresses; that ﬁrst half of the addresses is called the Organizationally Unique Identiﬁer 
(OUI). The IEEE expects each manufacturer to use its OUI for the ﬁrst 3 bytes of the MAC 
assigned to any Ethernet product created by that vendor. The vendor then assigns a unique value 
in the low-order 3 bytes for each Ethernet card that it manufactures—thereby ensuring global 
uniqueness of MAC addresses. Figure 1-5 shows the basic Ethernet address format, along with 
some additional details.
Figure 1-5
Ethernet Address Format
Note that Figure 1-5 shows the location of the most signiﬁcant byte and most signiﬁcant bit in each 
byte. IEEE documentation lists Ethernet addresses with the most signiﬁcant byte on the left. However, 
inside each byte, the leftmost bit is the least signiﬁcant bit, and the rightmost bit is the most 
signiﬁcant bit. Many documents refer to the bit order as noncanonical; other documents refer to 
it as little-endian. Regardless of the term, the bit order inside each byte is important for understanding 
the meaning of the two most signiﬁcant bits in an Ethernet address:
■
The Individual/Group (I/G) bit
■
The Universal/Local (U/L) bit
Table 1-5 summarizes the meaning of each bit.
1st Byte
1st Byte
2nd Byte
3rd Byte
4th Byte
5th Byte
6th Byte
I/G
Bit
OUI
Most
Significant
Bit
Most
Significant Byte
Least
Significant
Bit
U/L
Bit
Least
Significant Byte
Vendor-Assigned
KEY 
POINT

18     Chapter 1: Ethernet Basics
Table 1-5
I/G and U/L Bits 
The I/G bit signiﬁes whether the address represents an individual device or a group of devices, and 
the U/L bit identiﬁes locally conﬁgured addresses. For instance, the Ethernet multicast addresses used 
by IP multicast implementations always start with 0x01005E. Hex 01 (the ﬁrst byte of the address) 
converts to binary 00000001, with the most signiﬁcant bit being 1, conﬁrming the use of the I/G bit. 
Protocol Types and the 802.3 Length Field
Each of the three types of Ethernet header shown in Figure 1-4 has a ﬁeld identifying the format 
of the Data ﬁeld in the frame. Generically called a Type ﬁeld, these ﬁelds allow the receiver of an 
Ethernet frame to know how to interpret the data in the received frame. For instance, a router might 
want to know whether the frame contains an IP packet, an IPX packet, and so on. 
DIX and the revised IEEE framing use the Type ﬁeld, also called the Protocol Type ﬁeld. The 
originally-deﬁned IEEE framing uses those same 2 bytes as a Length ﬁeld. To distinguish the style 
of Ethernet header, the Ethernet Type ﬁeld values begin at 1536, and the length of the Data ﬁeld 
in an IEEE frame is limited to decimal 1500 or less. That way, an Ethernet NIC can easily 
determine whether the frame follows the DIX or original IEEE format. 
The original IEEE frame used a 1-byte Protocol Type ﬁeld (DSAP) for the 802.2 LLC standard type 
ﬁeld. It also reserved the high-order 2 bits for other uses, similar to the I/G and U/L bits in MAC 
addresses. As a result, there were not enough possible combinations in the DSAP ﬁeld for the needs 
of the market—so the IEEE had to deﬁne yet another type ﬁeld, this one inside an additional IEEE 
SNAP header. Table 1-6 summarizes the meaning of the three main Type ﬁeld options with Ethernet. 
Table 1-6
Ethernet Type Fields 
Field
Meaning
I/G
Binary 0 means the address is a unicast; Binary 1 means the address is a multicast or 
broadcast.
U/L
Binary 0 means the address is vendor assigned; Binary 1 means the address has been 
administratively assigned, overriding the vendor-assigned address.
NOTE
Often, when overriding the MAC address to use a local address, the device or device 
driver does not enforce the setting of the U/L bit to a value of 1. 
KEY 
POINT
Type Field
Description
Protocol Type
DIX V2 Type ﬁeld; 2 bytes; registered values now administered by the IEEE
DSAP
802.2 LLC; 1 byte, with 2 high-order bits reserved for other purposes; registered 
values now administered by the IEEE
SNAP 
SNAP header; 2 bytes; uses same values as Ethernet Protocol Type; signiﬁed by 
an 802.2 DSAP of 0xAA

Switching and Bridging Logic     19
Switching and Bridging Logic
In this chapter so far, you have been reminded about the cabling details for Ethernet along with 
the formats and meanings of the ﬁelds inside Ethernet frames. A switch’s ultimate goal is to deliver 
those frames to the appropriate destination(s) based on the destination MAC address in the frame 
header. Table 1-7 summarizes the logic used by switches when forwarding frames, which differs 
based on the type of destination Ethernet address and on whether the destination address has been 
added to its MAC address table.
Table 1-7
LAN Switch Forwarding Behavior 
For unicast forwarding to work most efﬁciently, switches need to know about all the unicast MAC 
addresses and out which interface the switch should forward frames sent to each MAC address. 
Switches learn MAC addresses, and the port to associate with them, by reading the source MAC 
address of received frames. You can see the learning process in Example 1-2, along with several 
other details of switch operation. Figure 1-6 lists the devices in the network associated with 
Example 1-2, along with their MAC addresses. 
Figure 1-6
Sample Network with MAC Addresses Shown
KEY 
POINT
Type of 
Address
Switch Action
Known unicast
Forwards frame out the single interface associated with the destination address
Unknown unicast 
Floods frame out all interfaces, except the interface on which the frame was 
received
Broadcast
Floods frame identically to unknown unicasts
Multicast
Floods frame identically to unknown unicasts, unless multicast optimizations are 
conﬁgured
PC1
SW1
VLAN 1:
IP Address       10.1.1.1
MAC Address 000a.b7dc.b78d
VLAN 1:
IP Address       10.1.1.4
MAC Address 000f.2343.87c0
R4
0/13
000a.b7dc.b78d
0200.3333.3333
0200.4444.4444
000f.2343.87cd
0/13
R3
0/6
0/4
0/3
0010.a49b.6111
SW4

20     Chapter 1: Ethernet Basics
Example 1-2
Command Output Showing MAC Address Table Learning 
Switch1# sssshhhhoooowwww    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss----ttttaaaabbbblllleeee    ddddyyyynnnnaaaammmmiiiicccc
          Mac Address Table
------------------------------------------
Vlan    Mac Address       Type       Ports
----    -----------       ----       -----
   1    000f.2343.87cd    DYNAMIC    Fa0/13
   1    0200.3333.3333    DYNAMIC    Fa0/3
   1    0200.4444.4444    DYNAMIC    Fa0/13
Total Mac Addresses for this criterion: 3
! Above, Switch1’s MAC address table lists three dynamically learned addresses, 
! including Switch4’s FA 0/13 MAC.
! Below, Switch1 pings Switch4’s management IP address.
Switch1# ppppiiiinnnngggg    11110000....1111....1111....4444
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.1.1.4, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/2/4 ms
! Below Switch1 now knows the MAC address associated with Switch4’s management IP
! address. Each switch has a range of reserved MAC addresses, with the first MAC 
! being used by the switch IP address, and the rest being assigned in sequence to
! the switch interfaces – note 0xcd (last byte of 2nd address in the table above) 
! is for Switch4’s FA 0/13 interface, and is 13 (decimal) larger than Switch4’s 
! base MAC address. 
Switch1# sssshhhhoooowwww    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss----ttttaaaabbbblllleeee    ddddyyyynnnnaaaammmmiiiicccc
          Mac Address Table
------------------------------------------
Vlan    Mac Address       Type       Ports
----    -----------       ----       -----
   1    000f.2343.87c0    DYNAMIC    Fa0/13
   1    000f.2343.87cd    DYNAMIC    Fa0/13
   1    0200.3333.3333    DYNAMIC    Fa0/3
   1    0200.4444.4444    DYNAMIC    Fa0/13
Total Mac Addresses for this criterion: 4
! Not shown: PC1 ping 10.1.1.23 (R3) PC1's MAC in its MAC address table 
------------------------------------------
Vlan    Mac Address       Type       Ports
----    -----------       ----       -----
   1    000f.2343.87c0    DYNAMIC    Fa0/13
   1    000f.2343.87cd    DYNAMIC    Fa0/13
   1    0010.a49b.6111    DYNAMIC    Fa0/13

Switching and Bridging Logic     21
   1    0200.3333.3333    DYNAMIC    Fa0/3
   1    0200.4444.4444    DYNAMIC    Fa0/13
Total Mac Addresses for this criterion: 5
! Above, Switch1 learned the PC’s MAC address, associated with FA 0/13, 
! because the frames sent by the PC came into Switch1 over its FA 0/13.  
! Below, Switch4’s MAC address table shows PC1’s MAC off its FA 0/6
switch4# sssshhhhoooowwww    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss----ttttaaaabbbblllleeee    ddddyyyynnnnaaaammmmiiiicccc
          Mac Address Table
-------------------------------------------
Vlan    Mac Address       Type        Ports
----    -----------       --------    -----
   1    000a.b7dc.b780    DYNAMIC     Fa0/13
   1    000a.b7dc.b78d    DYNAMIC     Fa0/13
   1    0010.a49b.6111    DYNAMIC     Fa0/6
   1    0200.3333.3333    DYNAMIC     Fa0/13
   1    0200.4444.4444    DYNAMIC     Fa0/4
Total Mac Addresses for this criterion: 5
! Below, for example, the aging timeout (default 300 seconds) is shown, followed 
! by a command just listing the mac address table entry for a single address.  
switch4# sssshhhhoooowwww    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss----ttttaaaabbbblllleeee    aaaaggggiiiinnnngggg----ttttiiiimmmmeeee 
Vlan    Aging Time
----    ----------
   1     300
switch4# sssshhhhoooowwww    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss----ttttaaaabbbblllleeee    aaaaddddddddrrrreeeessssssss    0000222200000000....3333333333333333....3333333333333333
          Mac Address Table
-------------------------------------------
Vlan    Mac Address       Type        Ports
----    -----------       --------    -----
   1    0200.3333.3333    DYNAMIC     Fa0/13
Total Mac Addresses for this criterion: 1
Example 1-2
Command Output Showing MAC Address Table Learning (Continued)

22     Chapter 1: Ethernet Basics
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 1-8 lists the different types of Ethernet and some distinguishing characteristics of each type.
Table 1-8
Ethernet Standards
Switches forward frames when necessary, and do not forward when there is no need to do so, thus 
reducing overhead. To accomplish this, switches perform three actions:
■
Learn MAC addresses by examining the source MAC address of each received frame 
■
Decide when to forward a frame or when to ﬁlter (not forward) a frame, based on the 
destination MAC address
■
Create a loop-free environment with other bridges by using the Spanning Tree Protocol
Type of Ethernet
General Description
10BASE5
Commonly called “thick-net”; uses coaxial cabling
10BASE2
Commonly called “thin-net”; uses coaxial cabling
10BASE-T
First type of Ethernet to use twisted-pair cabling
DIX Ethernet Version 2
Layer 1 and Layer 2 speciﬁcations for original Ethernet, from Digital/Intel/
Xerox; typically called DIX V2
IEEE 802.3
Called MAC due to the name of the IEEE committee (Media Access 
Control); original Layer 1 and 2 speciﬁcations, standardized using DIX V2 as 
a basis 
IEEE 802.2
Called LLC due to the name of the IEEE committee (Logical Link Control); 
Layer 2 speciﬁcation for header common to multiple IEEE LAN 
speciﬁcations
IEEE 802.3u
IEEE standard for Fast Ethernet (100 Mbps) over copper and optical cabling; 
typically called FastE
IEEE 802.3z
Gigabit Ethernet over optical cabling; typically called GigE
IEEE 802.3ab
Gigabit Ethernet over copper cabling

Foundation Summary     23
The internal processing algorithms used by switches vary among models and vendors; regardless, 
the internal processing can be categorized as one of the methods listed in Table 1-9.
Table 1-10 lists some of the most popular Cisco IOS commands related to the topics in this chapter. 
Table 1-9
Switch Internal Processing
Switching Method
Description
Store-and-forward
The switch fully receives all bits in the frame (store) before forwarding the 
frame (forward). This allows the switch to check the FCS before forwarding 
the frame, thus ensuring that errored frames are not forwarded.
Cut-through
The switch performs the address table lookup as soon as the Destination 
Address ﬁeld in the header is received. The ﬁrst bits in the frame can be sent 
out the outbound port before the ﬁnal bits in the incoming frame are received. 
This does not allow the switch to discard frames that fail the FCS check, but 
the forwarding action is faster, resulting in lower latency. 
Fragment-free
This performs like cut-through switching, but the switch waits for 64 bytes to 
be received before forwarding the ﬁrst bytes of the outgoing frame. According 
to Ethernet speciﬁcations, collisions should be detected during the ﬁrst 64 
bytes of the frame, so frames that are in error because of a collision will not be 
forwarded.
Table 1-10
Catalyst IOS Commands for Catalyst Switch Conﬁguration
Command
Description
interface vlan 1
Global command; moves user to interface conﬁguration mode for a 
VLAN interface
interface fastethernet 0/x
Puts user in interface conﬁguration mode for that interface
duplex {auto | full | half}
Used in interface conﬁguration mode; sets duplex mode for the 
interface
speed {10 | 100 | 1000 | auto | 
nonegotiate}
Used in interface conﬁguration mode; sets speed for the interface
show mac address-table [aging-
time | count | dynamic | static] 
[address hw-addr] [interface 
interface-id] [vlan vlan-id]
Displays the MAC address table; the security option displays 
information about the restricted or static settings
show interface fastethernet 0/x
Displays interface status for a physical 10/100 interface
show interface vlan 1
Displays IP address conﬁguration for VLAN

24     Chapter 1: Ethernet Basics
Table 1-11 outlines the types of UTP cabling. 
Table 1-12 lists the pertinent details of the Ethernet standards and the related cabling.
Table 1-11
UTP Cabling Reference
UTP 
Category
Max Speed 
Rating
Description
1
—
Used for telephones, and not for data
2
4 Mbps
Originally intended to support Token Ring over UTP
3
10 Mbps
Can be used for telephones as well; popular option for Ethernet in 
years past, if Cat 3 cabling for phones was already in place
4
16 Mbps
Intended for the fast Token Ring speed option
5
1 Gbps
Very popular for cabling to the desktop
5e
1 Gbps
Added mainly for the support of copper cabling for Gigabit Ethernet
6
1 Gbps+
Intended as a replacement for Cat 5e, with capabilities to support 
multigigabit speeds
Table 1-12
Ethernet Types and Cabling Standards
Standard
Cabling
Maximum Single Cable 
Length
10BASE5
Thick coaxial
500 m
10BASE2
Thin coaxial
185 m
10BASE-T
UTP Cat 3, 4, 5, 5e, 6
100 m
100BASE-FX
Two strands, multimode
400 m
100BASE-T
UTP Cat 3, 4, 5, 5e, 6, 2 pair
100 m
100BASE-T4
UTP Cat 3, 4, 5, 5e, 6, 4 pair
100 m
100BASE-TX
UTP Cat 3, 4, 5, 5e, 6, or STP, 2 pair
100 m
1000BASE-LX
Long-wavelength laser, MM or SM ﬁber
10 km (SM)
3 km (MM)
1000BASE-SX
Short-wavelength laser, MM ﬁber
220 m with 62.5-micron ﬁber; 
550 m with 50-micron ﬁber 
1000BASE-ZX
Extended wavelength, SM ﬁber
100 km
1000BASE-CS
STP, 2 pair
25 m
1000BASE-T
UTP Cat 5, 5e, 6, 4 pair
100 m

Memory Builders     25
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
Auto-negotiation, half duplex, full duplex, cross-over cable, straight-through cable, 
unicast address, multicast address, broadcast address, loopback circuitry, I/G bit, U/L bit, 
CSMA/CD
Refer to the CD-based glossary to check your answers.
Further Reading
For a good reference for more information on the actual FLPs used by auto-negotiation, refer to 
the Fast Ethernet web page of the University of New Hampshire Research Computing Center’s 
InterOperability Laboratory, at http://www.iol.unh.edu/training/fe/.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Bridging and LAN Switching 
■LAN Switching 
■MLS 
■Catalyst IOS Conﬁguration Commands 
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching written exam topics: 
■VLANs
■VTP
■VLAN trunking

C H A P T E R 2
Virtual LANs and VLAN Trunking 
This chapter continues with the coverage of some of the most fundamental and important LAN 
topics with coverage of VLANs and VLAN trunking. As usual, for those of you current in your 
knowledge of the topics in this chapter, review the items next to the Key Point icons spread 
throughout the chapter, plus the “Foundation Summary,” “Memory Builders,” and “Q&A” 
sections at the end of the chapter.
“Do I Know This Already?” Quiz
Table 2-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Assume that VLAN 28 does not yet exist on Switch1. Which of the following commands, 
issued from any part of global conﬁguration mode (reached with the conﬁgure terminal 
exec command) would cause the VLAN to be created? 
a. vlan 28
b. vlan 28 name fred
c. switchport vlan 28
d. switchport access vlan 28
e. switchport access 28
Table 2-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Virtual LANs
1–2
VLAN Trunking Protocol
3–5
VLAN Trunking: ISL and 802.1Q
6–9
Total Score

28     Chapter 2: Virtual LANs and VLAN Trunking
2.
Which of the following are the two primary motivations for using private VLANs? 
a. Better LAN security
b. IP subnet conservation
c. Better consistency in VLAN conﬁguration details
d. Reducing the impact of broadcasts on end-user devices
e. Reducing the unnecessary ﬂow of frames to switches that do not have any ports in the 
VLAN to which the frame belongs
3.
Which of the following VLANs can be pruned by VTP on an 802.1Q trunk? 
a. 1–1023
b. 1–1001
c. 2–1001
d. 1–1005
e. 2–1005
4.
An existing switched network has ten switches, with Switch1 and Switch2 being the only 
VTP servers in the network. The other switches are all VTP clients and have successfully 
learned about the VLANs from the VTP servers. The only conﬁgured VTP parameter on all 
switches is the VTP domain name (Larry). The VTP revision number is 201. What happens 
when a new, already-running VTP client switch, named Switch11, with domain name Larry 
and revision number 301, connects via a trunk to any of the other ten switches? 
a. No VLAN information changes; Switch11 ignores the VTP updates sent from the two 
existing VTP servers until the revision number reaches 302.
b. The original ten switches replace their old VLAN conﬁguration with the conﬁguration 
in Switch11.
c. Switch11 replaces its own VLAN conﬁguration with the conﬁguration sent to it by one 
of the original VTP servers.
d. Switch11 merges its existing VLAN database with the database learned from the VTP 
servers, because Switch11 had a higher revision number.

“Do I Know This Already?” Quiz     29
5.
An existing switched network has ten switches, with Switch1 and Switch2 being the only 
VTP servers in the network. The other switches are all VTP clients, and have successfully 
learned about the VLANs from the VTP server. The only conﬁgured VTP parameter is the 
VTP domain name (Larry). The VTP revision number is 201. What happens when an already-
running VTP server switch, named Switch11, with domain name Larry and revision number 
301, connects via a trunk to any of the other ten switches? 
a. No VLAN information changes; all VTP updates between the original VTP domain and 
the new switch are ignored.
b. The original ten switches replace their old VLAN conﬁguration with the conﬁguration 
in Switch11.
c. Switch11 replaces its old VLAN conﬁguration with the conﬁguration sent to it by one of 
the original VTP servers.
d. Switch11 merges its existing VLAN database with the database learned from the VTP 
servers, because Switch11 had a higher revision number.
e. None of the other answers is correct.
6.
Assume that two brand-new Cisco switches were removed from their cardboard boxes. PC1 
was attached to one switch, PC2 was attached to the other, and the two switches were 
connected with a cross-over cable. The switch connection dynamically formed an 802.1Q 
trunk. When PC1 sends a frame to PC2, how many additional bytes of header are added to the 
frame before it passes over the trunk?
a. 0
b. 4
c. 8
d. 26
7.
Assume that two brand-new Cisco Catalyst 3550 switches were connected with a cross-over 
cable. Before attaching the cable, one switch interface was conﬁgured with the switchport 
trunk encapsulation dot1q, switchport mode trunk, and switchport nonegotiate 
subcommands. Which of the following must be conﬁgured on the other switch before 
trunking will work between the switches? 
a. switchport trunk encapsulation dot1q
b. switchport mode trunk
c. switchport nonegotiate
d. No conﬁguration is required. 

30     Chapter 2: Virtual LANs and VLAN Trunking
8.
When conﬁguring trunking on a Cisco router fa0/1 interface, under which conﬁguration 
modes could the IP address associated with the native VLAN (VLAN 1 in this case) be 
conﬁgured? 
a. Interface fa 0/1 conﬁguration mode
b. Interface fa 0/1.1 conﬁguration mode
c. Interface fa 0/1.2 conﬁguration mode
d. None of the other answers is correct
9.
Which of the following is false about 802.1Q? 
a. Encapsulates the entire frame inside an 802.1Q header and trailer
b. Supports the use of a native VLAN
c. Allows VTP to operate only on extended-range VLANs
d. Is chosen over ISL by DTP

Virtual LANs     31
Foundation Topics
Virtual LANs
In an Ethernet LAN, a set of devices that receive a broadcast sent by any one of the devices in the 
same set is called a broadcast domain. On switches that have no concept of virtual LANs (VLAN), 
a switch simply forwards all broadcasts out all interfaces, except the interface on which it received 
the frame. As a result, all the interfaces on an individual switch are in the same broadcast domain. 
Also, if the switch connects to other switches and hubs, the interfaces on those switches and hubs 
are also in the same broadcast domain.
A VLAN is simply an administratively deﬁned subset of switch ports that are in the same broadcast 
domain. Ports can be grouped into different VLANs on a single switch, and on multiple interconnected 
switches as well. By creating multiple VLANs, the switches create multiple broadcast domains. 
By doing so, a broadcast sent by a device in one VLAN is forwarded to the other devices in that 
same VLAN; however, the broadcast is not forwarded to devices in the other VLANs.
With VLANs and IP, best practices dictate a one-to-one relationship between VLANs and IP 
subnets. Simply put, the devices in a single VLAN are typically also in the same single IP subnet. 
Alternately, it is possible to put multiple subnets in one VLAN, and use secondary IP addresses on 
routers to route between the VLANs and subnets. Also, although not typically done, you can 
design a network to use one subnet on multiple VLANs, and use routers with proxy ARP enabled 
to forward trafﬁc between hosts in those VLANs. (Private VLANs might be considered to consist 
of one subnet over multiple VLANs as well, as covered later in this chapter.) Ultimately, the CCIE 
written exams tend to focus more on the best use of technologies, so this book will assume that 
one subnet sits on one VLAN, unless otherwise stated.
Layer 2 switches forward frames between devices in the same VLAN, but they do not forward 
frames between two devices in different VLANs. To forward data between two VLANs, a 
multilayer switch (MLS) or router is needed. Chapter 7, “IP Forwarding (Routing),” covers the 
details of MLS. 
VLAN Conﬁguration
Conﬁguring VLANs in a network of Cisco switches requires just a few simple steps: 
Step 1
Create the VLAN itself. 
Step 2
Associate the correct ports with that VLAN. 
KEY 
POINT

32     Chapter 2: Virtual LANs and VLAN Trunking
The challenge relates to how some background tasks differ depending on how the Cisco VLAN 
Trunking Protocol (VTP) is conﬁgured, and whether normal-range or extended-range VLANs are 
being used.
Using VLAN Database Mode to Create VLANs
To begin, consider Example 2-1, which shows some of the basic mechanics of VLAN creation in 
VLAN database conﬁguration mode. VLAN database conﬁguration mode allows the creation of 
VLANs, basic administrative settings for each VLAN, and veriﬁcation of VTP conﬁguration 
information. Only normal-range (VLANs 1–1005) VLANs can be conﬁgured in this mode, and 
the VLAN conﬁguration is stored in a Flash ﬁle called VLAN.DAT. 
Example 2-1 demonstrates VLAN database conﬁguration mode, showing the conﬁguration on 
Switch3 from Figure 2-1. The example shows VLANs 21 and 22 being created.
Figure 2-1
Simple Access and Distribution 
Example 2-1
VLAN Creation in VLAN Database Mode–Switch3 
! Below, note that FA 0/12 and FA0/24 missing from the list, because they have 
! dynamically become trunks, supporting multiple VLANs.
Switch3# sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff
VLAN Name                             Status    Ports
---- -------------------------------- --------- -------------------------------
1    default                          active    Fa0/1, Fa0/2, Fa0/3, Fa0/4
                                                Fa0/5, Fa0/6, Fa0/7, Fa0/8
                                                Fa0/9, Fa0/10, Fa0/11, Fa0/13
                                                Fa0/14, Fa0/15, Fa0/16, Fa0/17
                                                Fa0/18, Fa0/19, Fa0/20, Fa0/21
                                                Fa0/22, Fa0/23
PC1
SW1
R3
Fa0/0
Gi0/1
R1
VLAN 21
Subnet 10.1.21.x/24
VLAN 22
Subnet 10.1.22.x/24
Fa0/2
R2
R4
Fa0/7
Fa0/12
Fa0/24
Fa0/3
Fa0/1
SW3
SW2
Fa0/5
SW4

Virtual LANs     33
! Below, “unsup” means that this 2950 switch does not support FDDI and TR
1002 fddi-default                     act/unsup 
1003 token-ring-default               act/unsup 
1004 fddinet-default                  act/unsup 
1005 trnet-default                    act/unsup 
! Below, vvvvllllaaaannnn    ddddaaaattttaaaabbbbaaaasssseeee moves user to VLAN database configuration mode.
! The vvvvllllaaaannnn    22221111 command defines the VLAN, as seen in the next command output
! (sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt), VLAN 21 is not in the “current” VLAN list.
Switch3# vvvvllllaaaannnn    ddddaaaattttaaaabbbbaaaasssseeee
Switch3(vlan)# vvvvllllaaaannnn    22221111
VLAN 21 added:
    Name: VLAN0021
! The sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt command lists the VLANs available to the IOS when the switch 
! is in VTP Server mode. The command lists the VLANs in numeric order, with 
! VLAN 21 missing.
Switch3(vlan)# sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt
  VLAN ISL Id: 1
    Name: default
    Media Type: Ethernet
    VLAN 802.10 Id: 100001
    State: Operational
    MTU: 1500
    Backup CRF Mode: Disabled
    Remote SPAN VLAN: No
  VLAN ISL Id: 1002
    Name: fddi-default
    Media Type: FDDI
    VLAN 802.10 Id: 101002
    State: Operational
    MTU: 1500
    Backup CRF Mode: Disabled
    Remote SPAN VLAN: No
! Lines omitted for brevity
! Next, note that sssshhhhoooowwww    pppprrrrooooppppoooosssseeeedddd lists VLAN 21. The vvvvllllaaaannnn    22221111 command 
! creates the definition, but it must be “applied” before it is “current”.
Switch3(vlan)# sssshhhhoooowwww    pppprrrrooooppppoooosssseeeedddd
  VLAN ISL Id: 1
    Name: default
    Media Type: Ethernet
    VLAN 802.10 Id: 100001
    State: Operational
    MTU: 1500
    Backup CRF Mode: Disabled
    Remote SPAN VLAN: No
continues
Example 2-1
VLAN Creation in VLAN Database Mode–Switch3 (Continued)

34     Chapter 2: Virtual LANs and VLAN Trunking
Using Conﬁguration Mode to Put Interfaces into VLANs
To make a VLAN operational, the VLAN must be created, and then switch ports must be assigned 
to the VLAN. Example 2-2 shows how to associate the interfaces with the correct VLANs, once 
again on Switch3. 
  VLAN ISL Id: 21
    Name: VLAN0021
    Media Type: Ethernet
    VLAN 802.10 Id: 100021
    State: Operational
    MTU: 1500
    Backup CRF Mode: Disabled
    Remote SPAN VLAN: No
! Lines omitted for brevity
! Next, you could aaaappppppppllllyyyy to complete the addition of VLAN 21, 
! aaaabbbboooorrrrtttt to not make the changes and exit VLAN database mode, or 
! rrrreeeesssseeeetttt to not make the changes but stay in VLAN database mode.  
Switch3(vlan)# ????
VLAN database editing buffer manipulation commands:
  abort  Exit mode without applying the changes
  apply  Apply current changes and bump revision number
  exit   Apply changes, bump revision number, and exit mode
  no     Negate a command or set its defaults
  reset  Abandon current changes and reread current database
  show   Show database information
  vlan   Add, delete, or modify values associated with a single VLAN
  vtp    Perform VTP administrative functions.
! The aaaappppppppllllyyyy command was used, making the addition of VLAN 21 complete.
Switch3(vlan)# aaaappppppppllllyyyy
APPLY completed.
! A sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt now would list VLAN 21.
Switch3(vlan)# vvvvllllaaaannnn    22222222    nnnnaaaammmmeeee    cccccccciiiieeee----vvvvllllaaaannnn----22222222
VLAN 22 added:
    Name: ccie-vlan-22
! Above and below, some variations on commands are shown, along with the 
! creation of VLAN 22, with name ccie-vlan-22.
! Below, the vvvvllllaaaannnn    22222222 option is used on sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt and sssshhhhoooowwww    pppprrrrooooppppoooosssseeeedddd
! detailing the fact that the apply has not been done yet.  
Switch3(vlan)# sssshhhhoooowwww    ccccuuuurrrrrrrreeeennnntttt    22222222
VLAN 22 does not exist in current database
Switch3(vlan)# sssshhhhoooowwww    pppprrrrooooppppoooosssseeeedddd    22222222
  VLAN ISL Id: 22
! Lines omitted for brevity
! Finally, the user exits VLAN database mode using CTRL-Z, which does 
! nnnnooootttt    inherently apply the change. CTRL-Z actually executes an aaaabbbboooorrrrtttt. 
Switch3(vlan)# ^^^^ZZZZ
Example 2-1
VLAN Creation in VLAN Database Mode–Switch3 (Continued)
KEY 
POINT

Virtual LANs     35
Using Conﬁguration Mode to Create VLANs
At this point, the two new VLANs (21 and 22) have been created on Switch3, and the two 
interfaces are now in the correct VLANs. However, Cisco IOS switches support a different way to 
create VLANs, using conﬁguration mode, as shown in Example 2-3.
NOTE
At the end of Example 2-1, VLAN 22 had not been successfully created. The 
assumption for Example 2-2 is that VLAN 22 has been successfully created.
Example 2-2
Assigning Interfaces to VLANs–Switch3
! First, the sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss command assigns the VLAN numbers to the
! respective interfaces. 
Switch3# ccccoooonnnnffffiiiigggg    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Switch3(config)# iiiinnnntttt    ffffaaaa    0000////3333
Switch3(config-if)# sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss    vvvvllllaaaannnn    22222222
Switch3(config-if)# iiiinnnntttt    ffffaaaa    0000////7777
Switch3(config-if)# sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss    vvvvllllaaaannnn    22221111
Switch3(config-if)# ^^^^ZZZZ
! Below, sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff lists these same two interfaces as now being in 
! VLANs 21 and 22, respectively. 
Switch3# sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff
VLAN Name                             Status    Ports
---- -------------------------------- --------- -------------------------------
1    default                          active    Fa0/1, Fa0/2, Fa0/4, Fa0/5
                                                Fa0/6, Fa0/8, Fa0/9, Fa0/10
                                                Fa0/11, Fa0/13, Fa0/14, Fa0/15
                                                Fa0/16, Fa0/17, Fa0/18, Fa0/19
                                                Fa0/20, Fa0/21, Fa0/22, Fa0/23
21   VLAN0021                         active    Fa0/7
22   ccie-vlan-22                     active    Fa0/3
! Lines omitted for brevity 
! While the VLAN configuration is not shown in the running-config at this point, 
! the sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss command that assigns the VLAN for the interface is in the
! configuration, as seen with the sssshhhhoooowwww    rrrruuuunnnn    iiiinnnntttt    ffffaaaa    0000////3333 command.  
Switch3# sssshhhhoooowwww    rrrruuuunnnn    iiiinnnntttt    ffffaaaa    0000////3333
interface FastEthernet0/3
switchport access vlan 22
Example 2-3
Creating VLANs in Conﬁguration Mode–Switch3 
! First, VLAN 31 did not exist when the sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss    vvvvllllaaaannnn    33331111    command was 
! issued. As a result, the switch both created the VLAN and put iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaa0000////8888 
! into that VLAN. Then, the vvvvllllaaaannnn    33332222 global command was used to create a 
continues
KEY 
POINT

36     Chapter 2: Virtual LANs and VLAN Trunking
Example 2-3 shows how the switchport access vlan subcommand creates the VLAN, as needed, 
and assigns the interface to that VLAN. Note that in Example 2-3, the show vlan brief output lists 
fa0/8 as being in VLAN 31. Because no ports have been assigned to VLAN 32 as of yet, the ﬁnal 
line in Example 2-3 simply does not list any interfaces.
The VLAN creation process is simple but laborious in a large network. If many VLANs exist, and 
they exist on multiple switches, instead of manually conﬁguring the VLANs on each switch, you 
can use VTP to distribute the VLAN conﬁguration of a VLAN to the rest of the switches. VTP will 
be discussed after a brief discussion of private VLANs.
Private VLANs
Engineers may design VLANs with many goals in mind. In many cases today, devices end up in 
the same VLAN just based on the physical locations of the wiring drops. Security is another 
motivating factor in VLAN design: devices in different VLANs do not overhear each other’s 
! VLAN from configuration mode, and the nnnnaaaammmmeeee subcommand was used to assign a 
! non-default name.
Switch3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Switch3(config)# iiiinnnntttt    ffffaaaa    0000////8888
Switch3(config-if)# sssswwwwiiiittttcccchhhhppppoooorrrrtttt    aaaacccccccceeeessssssss    vvvvllllaaaannnn    33331111
% Access VLAN does not exist. Creating vlan 31
Switch3(config-if)# eeeexxxxiiiitttt
Switch3(config)# vvvvllllaaaannnn    33332222
Switch3(config-vlan)# nnnnaaaammmmeeee    cccccccciiiieeee----vvvvllllaaaannnn----33332222
Switch3(config-vlan)# ^^^^ZZZZ
Switch3# sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff
VLAN Name                             Status    Ports
---- -------------------------------- --------- -------------------------------
1    default                          active    Fa0/1, Fa0/2, Fa0/4, Fa0/5
                                                Fa0/6, Fa0/9, Fa0/10, Fa0/11
                                                Fa0/13, Fa0/14, Fa0/15, Fa0/16
                                                Fa0/17, Fa0/18, Fa0/19, Fa0/20
                                                Fa0/21, Fa0/22, Fa0/23
21   VLAN0021                         active    Fa0/7
22   ccie-vlan-22                     active    Fa0/3
31   VLAN0031                         active    Fa0/8
32   ccie-vlan-32                     active 
! Portions omitted for brevity
Example 2-3
Creating VLANs in Conﬁguration Mode–Switch3 (Continued)

Virtual LANs     37
broadcasts. Additionally, the separation of hosts into different VLANs and subnets requires an 
intervening router or multilayer switch between the subnets, and these types of devices typically 
provide more robust security features.
Regardless of the design motivations behind grouping devices into VLANs, good design practices 
typically call for the use of a single IP subnet per VLAN. In some cases, however, the need to 
increase security by separating devices into many small VLANs conﬂicts with the design goal of 
conserving the use of the available IP subnets. The Cisco private VLAN feature addresses this 
issue. Private VLANs allow a switch to separate ports as if they were on different VLANs, while 
consuming only a single subnet. 
A common place to implement private VLANs is in the multitenant offerings of a service provider 
(SP). The SP can install a single router and a single switch. Then, the SP attaches devices from 
multiple customers to the switch. Private VLANs then allow the SP to use only a single subnet for 
the whole building, separating different customers’ switch ports so that they cannot communicate 
directly, while supporting all customers with a single router and switch.
Conceptually, a private VLAN includes the following general characterizations of how ports 
communicate:
■
Ports that need to communicate with all devices
■
Ports that need to communicate with each other, and with shared devices, typically routers
■
Ports that need to communicate only with shared devices
To support each category of allowed communications, a single private VLAN features a 
primary VLAN and one or more secondary VLANs. The ports in the primary VLAN are 
promiscuous in that they can send and receive frames with any other port, including ports 
assigned to secondary VLANs. Commonly accessed devices, such as routers and servers, are 
placed into the primary VLAN. Other ports, such as customer ports in the SP multitenant 
model, attach to one of the secondary VLANs. 
Secondary VLANs are either community VLANs or isolated VLANs. The engineer picks the type 
based on whether the device is part of a set of ports that should be allowed to send frames back 
and forth (community VLAN ports), or whether the device port should not be allowed to talk to 
any other ports besides those on the primary VLAN (isolated VLAN). Table 2-2 summarizes the 
behavior of private VLAN communications between ports. 

38     Chapter 2: Virtual LANs and VLAN Trunking
VLAN Trunking Protocol
VTP advertises VLAN conﬁguration information to neighboring switches so that the VLAN 
conﬁguration can be made on one switch, with all the other switches in the network learning the 
VLAN information dynamically. VTP advertises the VLAN ID, VLAN name, and VLAN type for 
each VLAN. However, VTP does not advertise any information about which ports (interfaces) 
should be in each VLAN, so the conﬁguration to associate a switch interface with a particular 
VLAN (using the switchport access vlan command) must still be conﬁgured on each individual 
switch. Also, the existence of the VLAN IDs used for private VLANs is advertised, but the rest of 
the detailed private VLAN conﬁguration is not advertised by VTP.
Each Cisco switch uses one of three VTP modes, as outlined in Table 2-3.
Table 2-2
Private VLAN Communications Between Ports
KEY 
POINT
Description of Who can Talk 
to Whom
Primary 
VLAN Ports
Community 
VLAN Ports1
Isolated 
VLAN Ports1
Talk to ports in primary VLAN 
(promiscuous ports)
Yes
Yes
Yes
Talk to ports in the same 
secondary VLAN (host ports)
N/A2
Yes
No
Talks to ports in another 
secondary VLAN
N/A2
No
No
1Community and isolated VLANs are secondary VLANs.
2Promiscuous ports, by definition in the primary VLAN, can talk to all other ports.
Table 2-3
VTP Modes and Features*
KEY 
POINT
Function
Server 
Mode
Client 
Mode
Transparent 
Mode
Originates VTP advertisements
Yes
No
No
Processes received advertisements in order to update 
its VLAN conﬁguration
Yes
Yes
No
Forwards received VTP advertisements 
Yes
Yes
Yes
Saves VLAN conﬁguration in NVRAM or VLAN.DAT
Yes
No
Yes
Can create, modify, or delete VLANs using 
conﬁguration commands
Yes
No
Yes
*CatOS switches support a fourth VTP mode (off), meaning that the switch does not create, listen to, or forward VTP 
updates.

VLAN Trunking Protocol     39
VTP Process and Revision Numbers
The VTP update process begins when a switch administrator, from a VTP server switch, adds, 
deletes, or updates the conﬁguration for a VLAN. When the new conﬁguration occurs, the VTP 
server increments the old VTP revision number by 1, and advertises the entire VLAN 
conﬁguration database along with the new revision number.
The VTP revision number concept allows switches to know when VLAN database changes have 
occurred. Upon receiving a VTP update, if the revision number in a received VTP update is larger 
than a switch’s current revision number, it believes that there is a new version of the VLAN 
database. Figure 2-2 shows an example in which the old VTP revision number was 3, the server 
adds a new VLAN, incrementing the revision number to 4, and then propagates the VTP database 
to the other switches.
Figure 2-2
VTP Revision Number Basic Operation
Cisco switches default to use VTP server mode, but they do not start sending VTP updates until 
the switch has been conﬁgured with a VTP domain name. At that point, the server begins to send 
its VTP updates, with a different database and revision number each time its VLAN conﬁguration 
changes. However, the VTP clients in Figure 2-2 actually do not have to have the VTP domain 
name conﬁgured. If not conﬁgured, the client will assume it should use the VTP domain name in 
the ﬁrst received VTP update. However, the client does need one small bit of conﬁguration, 
namely, the VTP mode, as conﬁgured with the vtp mode global conﬁguration command.
VTP clients and servers alike will accept VTP updates from other VTP server switches. When 
using VTP, for better availability, a switched network using VTP needs at least two VTP server 
switches. Under normal operations, a VLAN change could be made on one server switch, and the 
other VTP server (plus all the clients) would learn about the changes to the VLAN database. Once 
learned, VTP servers would then store the VLAN conﬁguration permanently (for example, in 
NVRAM), whereas clients do not permanently store the conﬁguration.
1  Add New VLAN
4  Rev 3       Rev 4
5  Sync New VLAN Info
VTP
Client
VTP
client
VTP
Server
3  Send VTP Advertisement
4   Rev 3       Rev 4
3  Send VTP Advertisement
5  Sync New VLAN Info
2  Rev 3       Rev 4
KEY 
POINT

40     Chapter 2: Virtual LANs and VLAN Trunking
The support of multiple VTP servers introduces the possibility of accidentally changing the VLAN 
conﬁguration for the network. When a VTP client or VTP transparent switch ﬁrst connects via a 
trunk to the network, it cannot affect the existing conﬁguration, because in these modes the switch 
does not originate VTP updates. However, if a newly added switch in VTP server mode attaches 
via a trunk, it has the capability to change the other switch VLAN conﬁgurations with its own. It 
will change the other switch VLAN conﬁgurations, assuming the following are true about the 
newly added switch: 
■
The new link connecting the new switch is trunking.
■
The new switch has the same VTP domain name as the other switches.
■
The new switch’s revision number is larger than that of the existing switches.
■
Same password, if conﬁgured on the existing switches.
The revision number and VTP domain name can be easily seen with a Sniffer trace; to prevent DoS 
attacks with VTP, set VTP passwords, which are encoded as message digests (MD5) in the VTP 
updates. Also, some installations simply use VTP transparent mode on all switches, which 
prevents switches from ever listening to other switch VTP updates and erroneously deleting their 
VLAN conﬁguration databases.
VTP Conﬁguration 
VTP sends updates out all active trunk interfaces (ISL or 802.1Q). However, with all default 
settings from Cisco, switches are in server mode, with no VTP domain name conﬁgured, and they 
do not send any VTP updates. Before any switches can learn VLAN information from another 
switch, at least one switch must have a bare-minimum VTP server conﬁguration—speciﬁcally, 
a domain name.
Example 2-4 shows Switch3 conﬁguring a VTP domain name to become a VTP server and 
advertise the VLANs it has conﬁgured. The example also lists several key VTP show commands. 
(Note that the example begins with VLANs 21 and 22 conﬁgured on Switch3, and all default 
settings for VTP on all four switches.)
Example 2-4
VTP Conﬁguration and show Command Example 
! First, Switch3 is configured with a VTP domain ID of CCIE-domain.
Switch3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Switch3(config)# vvvvttttpppp    ddddoooommmmaaaaiiiinnnn    CCCCCCCCIIIIEEEE----ddddoooommmmaaaaiiiinnnn
Changing VTP domain name from NULL to CCIE-domain
Switch3(config)# ^^^^ZZZZ
! Next, on Switch1, the VTP status shows the same revision as Switch3, and it 
! learned the VTP domain name CCIE-domain. Note that Switch1 has no VTP-related
KEY 
POINT

VLAN Trunking Protocol     41
Example 2-4 shows examples of a few VTP conﬁguration options. Table 2-4 provides a complete 
list, along with explanations.
! configuration, so it is a VTP server; it learned the VTP domain name from.
! Switch3.
Switch1# sssshhhh    vvvvttttpppp    ssssttttaaaattttuuuussss
VTP Version                     : 2
Configuration Revision          : 2
Maximum VLANs supported locally : 1005
Number of existing VLANs        : 7
VTP Operating Mode              : Server
VTP Domain Name                 : CCIE-domain
VTP Pruning Mode                : Disabled
VTP V2 Mode                     : Disabled
VTP Traps Generation            : Disabled
MD5 digest                      : 0x0E 0x07 0x9D 0x9A 0x27 0x10 0x6C 0x0B 
Configuration last modified by 10.1.1.3 at 3-1-93 00:02:55
Local updater ID is 10.1.1.1 on interface Vl1 (lowest numbered VLAN interface found)
! The sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff command lists the VLANs learned from Switch3. 
Switch1# sssshhhhoooowwww    vvvvllllaaaannnn    bbbbrrrriiiieeeeffff
VLAN Name                             Status    Ports
---- -------------------------------- --------- -------------------------------
1    default                          active    Fa0/1, Fa0/2, Fa0/3, Fa0/4
                                                Fa0/5, Fa0/6, Fa0/7, Fa0/10
                                                Fa0/11, Fa0/13, Fa0/14, Fa0/15
                                                Fa0/16, Fa0/17, Fa0/18, Fa0/19
                                                Fa0/20, Fa0/21, Fa0/22, Fa0/23
                                                Gi0/2
21   VLAN0021                         active    
22   ccie-vlan-22                     active    
1002 fddi-default                     active    
1003 token-ring-default               active    
1004 fddinet-default                  active 
1005 trnet-default                    active    
Table 2-4
VTP Conﬁguration Options 
Option
Meaning
domain
Sends domain name in VTP updates. Received VTP update is ignored if it does not 
match a switch’s domain name. One VTP domain name per switch is allowed.
password
Used to generate an MD5 hash that is included in VTP updates. Received VTP 
updates are ignored if the passwords on the sending and receiving switch do not 
match.
mode 
Sets server, client, or transparent mode on the switch.
continues
Example 2-4
VTP Conﬁguration and show Command Example (Continued)

42     Chapter 2: Virtual LANs and VLAN Trunking
Normal-Range and Extended-Range VLANs
Some VLAN numbers are considered to be normal, whereas some others are considered to be extended. 
Normal-range VLANs are VLANs 1–1005, and can be advertised via VTP versions 1 and 2. These 
VLANs can be conﬁgured in VLAN database mode, with the details being stored in the VLAN.DAT 
ﬁle in Flash. 
Extended-range VLANs range from 1006–4094, inclusive. However, these additional VLANs 
cannot be conﬁgured in VLAN database mode, nor stored in the VLAN.DAT ﬁle, nor advertised 
via VTP. In fact, to conﬁgure them, the switch must be in VTP transparent mode. (Also, you should 
take care to avoid using VLANs 1006–1024 for compatibility with CatOS-based switches.)
Both ISL and 802.1Q support extended-range VLANs today. Originally, ISL began life only 
supporting normal-range VLANs, using only 10 of the 15 bits reserved in the ISL header to 
identify the VLAN ID. The later-deﬁned 802.1Q used a 12-bit VLAN ID ﬁeld, thereby allowing 
support of the extended range. Following that, Cisco changed ISL to use 12 of its reserved 15 bits 
in the VLAN ID ﬁeld, thereby supporting the extended range. 
Table 2-5 summarizes VLAN numbers and provides some additional notes.
Option
Meaning
version
Sets version 1 or 2. Servers and clients must match version to exchange VLAN 
conﬁguration data. Transparent mode switches at version 2 forward version 1 or 
version 2 VTP updates.
pruning
Enables VTP pruning, which prevents broadcasts from being propagated on a 
per-VLAN basis to switches that do not have any ports conﬁgured as members of 
that VLAN. 
interface
Speciﬁes from which interface a switch picks the source MAC address for VTP 
updates.
Table 2-5
Valid VLAN Numbers, Normal and Extended  
KEY 
POINT
VLAN 
Number
Normal or 
Extended?
Can be Advertised 
and Pruned by VTP 
Versions 1 and 2?
Comments
0
Reserved
—
Not available for use
1
Normal
No
On Cisco switches, the default VLAN 
for all access ports; cannot be deleted 
or changed
2–1001
Normal
Yes
Table 2-4
VTP Conﬁguration Options (Continued)

VLAN Trunking Protocol     43
Storing VLAN Conﬁguration 
Catalyst IOS stores VLAN and VTP conﬁguration in one of two places—either in a Flash ﬁle 
called VLAN.DAT or in the running conﬁguration. (Remember that the term “Catalyst IOS” refers 
to a switch that uses IOS, not the Catalyst OS, which is often called CatOS.) IOS chooses the 
location for the conﬁguration information based in part on whether the switch is in VTP server or 
transparent mode, and in part based on whether the VLANs are normal-range VLANs or extended-
range VLANs. Table 2-6 describes what happens based on what conﬁguration mode is used to 
conﬁgure the VLANs, the VTP mode, and the VLAN range. 
Of particular interest for those of you stronger with CatOS conﬁguration skills is that when you 
erase the startup-conﬁg ﬁle, and reload the Cisco IOS switch, you do not actually erase the normal-
VLAN 
Number
Normal or 
Extended?
Can be Advertised 
and Pruned by VTP 
Versions 1 and 2?
Comments
1002–1005
Normal
No
Deﬁned speciﬁcally for use with FDDI 
and TR translational bridging
1006–4094
Extended
No
Table 2-6
VLAN Conﬁguration and Storage
Function
When in VTP Server Mode
When in VTP 
Transparent Mode
Normal-range VLANs can be 
conﬁgured from
Both VLAN database and 
conﬁguration modes
Both VLAN database and 
conﬁguration modes
Extended-range VLANs can be 
conﬁgured from
Nowhere—cannot be conﬁgured
Conﬁguration mode only
VTP and normal-range VLAN 
conﬁguration commands are 
stored in
VLAN.DAT in Flash
Both VLAN.DAT in Flash 
and running conﬁguration1
Extended-range VLAN 
conﬁguration commands stored in
Nowhere—extended range not 
allowed in VTP server mode
Running conﬁguration only
1When a switch reloads, if the VTP mode or domain name in the VLAN.DAT file and the startup-config file differ, the 
switch uses only the VLAN.DAT file’s contents for VLAN configuration.
NOTE
The conﬁguration characteristics referenced in Table 2-6 do not include the interface 
conﬁguration command switchport access vlan; it includes the commands that create a VLAN 
(vlan command) and VTP conﬁguration commands.
Table 2-5
Valid VLAN Numbers, Normal and Extended  (Continued)
KEY 
POINT

44     Chapter 2: Virtual LANs and VLAN Trunking
range VLAN and VTP conﬁguration information. To erase the VLAN and VTP conﬁguration, you 
must use the delete ﬂash:vlan.dat exec command. Also note that if multiple switches are in VTP 
server mode, if you delete VLAN.DAT on one switch and then reload it, as soon as the switch 
comes back up and brings up a trunk, it learns the old VLAN database via a VTP update from the 
other VTP server.
VLAN Trunking: ISL and 802.1Q
VLAN trunking allows switches, routers, and even PCs with the appropriate NICs to send trafﬁc 
for multiple VLANs across a single link. In order to know to which VLAN a frame belongs, the 
sending switch, router, or PC adds a header to the original Ethernet frame, with that header having 
a ﬁeld in which to place the VLAN ID of the associated VLAN. This section describes the protocol 
details for the two trunking protocols, followed by the details of how to conﬁgure trunking.
ISL and 802.1Q Concepts
If two devices are to perform trunking, they must agree to use either ISL or 802.1Q, because there 
are several differences between the two, as summarized in Table 2-7. 
ISL and 802.1Q differ in how they add a header to the Ethernet frame before sending it over 
a trunk. ISL adds a new 26-byte header, plus a new trailer (to allow for the new FCS value), 
encapsulating the original frame. This encapsulating header uses the source address (listed as SA 
in Figure 2-3) of the device doing the trunking, instead of the source MAC of the original frame. 
ISL uses a multicast destination address (listed as DA in Figure 2-3) of either 0100.0C00.0000 or 
0300.0C00.0000. 
802.1Q inserts a 4-byte header, called a tag, into the original frame (right after the Source Address 
ﬁeld). The original frame’s addresses are left intact. Normally, an Ethernet controller would expect 
to ﬁnd either an Ethernet Type ﬁeld or 802.3 Length ﬁeld right after the Source Address ﬁeld. With 
an 802.1Q tag, the ﬁrst 2 bytes after the Address ﬁelds holds a registered Ethernet type value of 
0x8100, which implies that the frame includes an 802.1Q header. Because 802.1Q does not 
actually encapsulate the original frame, it is often called frame tagging. Figure 2-3 shows the 
contents of the headers used by both ISL and 802.1Q.
Table 2-7
Comparing ISL and 802.1Q
KEY 
POINT
Feature
ISL
802.1Q
VLANs supported
Normal and extended range1
Normal and extended range
Protocol deﬁned by
Cisco
IEEE
Encapsulates original frame or inserts tag
Encapsulates
Inserts tag
Supports native VLAN
No
Yes
1ISL originally supported only normal-range VLANs, but was later improved to support extended-range VLANs as well.

VLAN Trunking: ISL and 802.1Q     45
Figure 2-3
ISL and 802.1Q Frame Marking Methods
Finally, the last row from Table 2-7 refers to the native VLAN. 802.1Q does not tag frames sent 
inside the native VLAN. The native VLAN feature allows a switch to attempt to use 802.1Q 
trunking on an interface, but if the other device does not support trunking, the trafﬁc for that one 
native VLAN can still be sent over the link. By default, the native VLAN is VLAN 1.
ISL and 802.1Q Conﬁguration
Cisco switches use the Dynamic Trunk Protocol (DTP) to dynamically learn whether the device 
on the other end of the cable wants to perform trunking and, if so, which trunking protocol to use. 
DTP learns whether to trunk based on the DTP mode deﬁned for an interface. Cisco switches 
default to use the DTP desirable mode, which means that the switch initiates sending DTP 
messages, hoping that the device on the other end of the segment replies with another DTP message. 
If a reply is received, DTP can detect whether both switches can trunk and, if so, which type of 
trunking to use. If both switches support both types of trunking, they choose to use ISL. (An 
upcoming section, “Trunk Conﬁguration Compatibility,” covers the different DTP modes and how 
they work.)
With the DTP mode set to desirable, switches can simply be connected, and they should 
dynamically form a trunk. You can, however, conﬁgure trunking details and verify the results with 
show commands. Table 2-8 lists some of the key Catalyst IOS commands related to trunking. 
ISL Header
26 bytes
CRC
4 bytes
Encapsulated Ethernet Frame
VLAN
DA   Type   User   SA   LEN   AAAA03   HSA   VLAN   BPDU   INDEX   RES
BPDU
Dest
Src
Len/Etype
Data
FCS
Dest
Src
Etype
Tag
Len/Etype
Data
FCS
Priority
VLAN-ID
Original
Frame
Tagged
Frame
KEY 
POINT

46     Chapter 2: Virtual LANs and VLAN Trunking
Figure 2-4 lists several details regarding Switch1’s trunking conﬁguration and status, as shown in 
Example 2-5. R1 is not conﬁgured to trunk, so Switch1 will fail to negotiate trunking. Switch2 is 
a Catalyst 3550, which supports both ISL and 802.1Q, so they will negotiate trunking and use ISL. 
Switch3 and Switch4 are Catalyst 2950s, which support only 802.1Q; as a result, Switch1 
negotiates trunking, but picks 802.1Q as the trunking protocol.
Figure 2-4
Trunking Conﬁguration Reference for Example 2-5       
Table 2-8
VLAN Trunking–Related Commands
KEY 
POINT
Command
Function
switchport | no switchport
Toggle deﬁning whether to treat the interface as a switch 
interface (switchport) or as a router interface (no switchport)
switchport mode
Sets DTP negotiation parameters
switchport trunk
Sets trunking parameters if the interface is trunking
switchport access 
Sets nontrunking-related parameters if the interface is not 
trunking
show interface trunk
Summary of trunk-related information 
show interface type number trunk
Lists trunking details for a particular interface
show interface type number 
switchport
Lists nontrunking details for a particular interface
Example 2-5
Trunking Conﬁguration and show Command Example–Switch1 
! The administrative mode of dynamic desirable (trunking) and negotiate (trunking 
! encapsulation) means that Switch1 attempted to negotiate to trunk, but the 
! operational mode of static access means that trunking negotiation failed. 
! The reference to “operational trunking encapsulation” of native means that
! no tagging occurs.
SW1
Gi0/1
R1
Not Configured
to Trunk
Defaults to DTP Desirable
Supports ISL or .1Q
Defaults to DTP Desirable
Does Not Support ISL (2950)
Defaults to DTP Desirable
Does Not Support ISL (2950)
Fa0/12
Fa0/24
Fa0/1
SW2
SW4
SW3

VLAN Trunking: ISL and 802.1Q     47
Switch1# sssshhhhoooowwww    iiiinnnntttt    ffffaaaa    0000////1111    sssswwwwiiiittttcccchhhhppppoooorrrrtttt
Name: Fa0/1
Switchport: Enabled
Administrative Mode: dynamic desirable
Operational Mode: static access
Administrative Trunking Encapsulation: negotiate
Operational Trunking Encapsulation: native
Negotiation of Trunking: On
Access Mode VLAN: 1 (default)
Trunking Native Mode VLAN: 1 (default)
Administrative private-vlan host-association: none 
Administrative private-vlan mapping: none 
Operational private-vlan: none 
Trunking VLANs Enabled: ALL
Pruning VLANs Enabled: 2-1001
Protected: false
Unknown unicast blocked: disabled
Unknown multicast blocked: disabled
Voice VLAN: none (Inactive)
Appliance trust: none
! Next, the sssshhhhoooowwww    iiiinnnntttt    ggggiiiigggg    0000////1111    ttttrrrruuuunnnnkkkk    command shows the configured mode
! (desirable), and the current status (N-ISL), meaning negotiated ISL. Note
! that the trunk supports the extended VLAN range as well.
Switch1# sssshhhhoooowwww    iiiinnnntttt    ggggiiiigggg    0000////1111    ttttrrrruuuunnnnkkkk
Port      Mode         Encapsulation  Status        Native vlan
Gi0/1     desirable    n-isl          trunking      1
Port      Vlans allowed on trunk
Gi0/1     1-4094
Port      Vlans allowed and active in management domain
Gi0/1     1,21-22
Port      Vlans in spanning tree forwarding state and not pruned
Gi0/1     1,21-22
! Next, Switch1 lists all three trunks – the segments connecting to the other 
! three switches – along with the type of encapsulation.  
Switch1# sssshhhhoooowwww    iiiinnnntttt    ttttrrrruuuunnnnkkkk
Port      Mode         Encapsulation  Status        Native vlan
Fa0/12    desirable    n-802.1q       trunking      1
Fa0/24    desirable    n-802.1q       trunking      1
Gi0/1     desirable    n-isl          trunking      1
Port      Vlans allowed on trunk
Fa0/12    1-4094
continues
Example 2-5
Trunking Conﬁguration and show Command Example–Switch1 (Continued)

48     Chapter 2: Virtual LANs and VLAN Trunking
Allowed, Active, and Pruned VLANs
Although a trunk can support VLANs 1–4094, several mechanisms reduce the actual number of 
VLANs whose trafﬁc ﬂows over the trunk. First, VLANs can be administratively forbidden from 
existing over the trunk using the switchport trunk allowed interface subcommand. Also, any 
allowed VLANs must be conﬁgured on the switch before they are considered active on the trunk. 
Finally, VTP can prune VLANs from the trunk, with the switch simply ceasing to forward frames 
from that VLAN over the trunk. 
The show interface trunk command lists the VLANs that fall into each category, as shown in the 
last command in Example 2-5. The categories are summarized as follows:
■
Allowed VLANs—Each trunk allows all VLANs by default. However, VLANs can be 
removed or added to the list of allowed VLANs by using the switchport trunk allowed 
command.
■
Allowed and active—To be active, a VLAN must be in the allowed list for the trunk (based 
on trunk conﬁguration), and the VLAN must exist in the VLAN conﬁguration on the switch. 
With PVST+, an STP instance is actively running on this trunk for the VLANs in this list.
■
Active and not pruned—This list is a subset of the “allowed and active” list, with any 
VTP-pruned VLANs removed. 
Trunk Conﬁguration Compatibility
In most production networks, switch trunks are conﬁgured using the same standard throughout the 
network. For instance, rather than allow DTP to negotiate trunking,, many engineers conﬁgure 
trunk interfaces to always trunk (switchport mode trunk) and disable DTP on ports that should 
not trunk. IOS includes several commands that impact whether a particular segment becomes a 
trunk. Because many enterprises use a typical standard, it is easy to forget the nuances of how the 
related commands work. This section covers those small details.
Fa0/24    1-4094
Gi0/1     1-4094
Port      Vlans allowed and active in management domain
Fa0/12    1,21-22
Fa0/24    1,21-22
Gi0/1     1,21-22
Port      Vlans in spanning tree forwarding state and not pruned
Fa0/12    1,21-22
Fa0/24    1,21-22
Gi0/1     1,21-22
Example 2-5
Trunking Conﬁguration and show Command Example–Switch1 (Continued)
KEY 
POINT

VLAN Trunking: ISL and 802.1Q     49
Two IOS conﬁguration commands impact if and when two switches form a trunk. The switchport 
mode and switchport nonegotiate interface subcommands deﬁne whether DTP even attempts to 
negotiate a trunk, and what rules it uses when the attempt is made. Additionally, the settings on 
the switch ports on either side of the segment dictate whether a trunk forms or not. 
Table 2-9 summarizes the trunk conﬁguration options. The ﬁrst column suggests the conﬁguration 
on one switch, with the last column listing the conﬁguration options on the other switch that would 
result in a working trunk between the two switches.
Conﬁguring Trunking on Routers
VLAN trunking can be used on routers and hosts as well as on switches. However, routers do not 
support DTP, so you must manually conﬁgure them to support trunking. Additionally, you must 
manually conﬁgure a switch on the other end of the segment to trunk, because the router does not 
participate in DTP.
Table 2-9
Trunking Conﬁguration Options That Lead to a Working Trunk
KEY 
POINT
Conﬁguration Command 
on One Side1
Short 
Name
Meaning
To Trunk, 
Other Side 
Must Be
switchport mode trunk
Trunk 
Always trunks on this end; sends 
DTP to help other side choose to 
trunk
On, desirable, 
auto
switchport mode trunk; 
switchport nonegotiate
Nonegotiate
Always trunks on this end; does not 
send DTP messages (good when 
other switch is a non-Cisco switch) 
On
switchport mode dynamic 
desirable
Desirable
Sends DTP messages, and trunks 
if negotiation succeeds
On, desirable, 
auto
switchport mode dynamic 
auto
Auto
Replies to DTP messages, and 
trunks if negotiation succeeds
On, desirable
switchport mode access
Access
Never trunks; sends DTP to help 
other side reach same conclusion
(Never trunks)
switchport mode access; 
switchport nonegotiate
Access (with 
nonegotiate)
Never trunks; does not send DTP 
messages
(Never trunks)
1When the switchport nonegotiate command is not listed in the first column, the default (DTP negotiation is active) 
is assumed.
NOTE
If an interface trunks, then the type of trunking (ISL or 802.1Q) is controlled by the 
setting on the switchport trunk encapsulation command. This command includes an option 
for dynamically negotiating the type (using DTP) or conﬁguring one of the two types. See 
Example 2-5 for a sample of the syntax. 

50     Chapter 2: Virtual LANs and VLAN Trunking
The majority of router trunking conﬁgurations use subinterfaces, with each subinterface being 
associated with one VLAN. The subinterface number does not have to match the VLAN ID; rather, 
the encapsulation command sits under each subinterface, with the associated VLAN ID being 
part of the encapsulation command. Also, because good design calls for one IP subnet per VLAN, 
if the router wants to forward IP packets between the VLANs, the router needs to have an IP 
address associated with each trunking subinterface.
You can conﬁgure 802.1Q native VLANs under a subinterface or under the physical interface 
on a router. If conﬁgured under a subinterface, you use the encapsulation dot1q vlan-id native 
subcommand, with the inclusion of the native keyword meaning that frames exiting this 
subinterface should not be tagged. As with other router trunking conﬁgurations, the associated 
IP address would be conﬁgured on that same subinterface. Alternately, if not conﬁgured on a 
subinterface, the router assumes that the native VLAN is associated with the physical 
interface. In this case, the encapsulation command is not needed under the physical interface; 
the associated IP address, however, would need to be conﬁgured under the physical interface. 
Example 2-6 shows an example conﬁguration for Router1 in Figure 2-1, both for ISL and 802.1Q. In 
this case, Router1 needs to forward packets between the subnets on VLANs 21 and 22. The ﬁrst part 
of the example shows ISL conﬁguration, with no native VLANs, and therefore only a subinterface 
being used for each VLAN. The second part of the example shows an alternative 802.1Q conﬁguration, 
using the option of placing the native VLAN (VLAN 21) conﬁguration on the physical interface.  
Example 2-6
Trunking Conﬁguration on Router1 
! Note the subinterface on the fa 0/0 interface, with the eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn 
! command noting the type of trunking, as well as the VLAN number. The 
! subinterface does not have to be the VLAN ID. Also note the IP addresses for 
! each interface, allowing Router1 to route between VLANs. 
interface fastethernet 0/0.1
 ip address 10.1.21.1 255.255.255.0
 encapsulation isl 21
!
interface fastethernet 0/0.2
 ip address 10.1.22.1 255.255.255.0
 encapsulation isl 22
! Next, an alternative 802.1Q configuration is shown. Note that this 802.1Q configuration
! places the IP address
! for VLAN 21 on the physical interface; the router simply associates the 
! physical interface with the native VLAN. Alternatively, a subinterface could be
! used, with the eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ddddooootttt1111qqqq    22221111    nnnnaaaattttiiiivvvveeee command specifying that the router
! should treat this VLAN as the native VLAN. 
interface fastethernet 0/0
  ip address 10.1.21.1 255.255.255.0
!
interface fastethernet 0/0.2
  ip address 10.1.22.1 255.255.255.0
  encapsulation dot1q 22
KEY 
POINT

VLAN Trunking: ISL and 802.1Q     51
Note also that the router does not have an explicitly deﬁned allowed VLAN list. However, the 
allowed VLAN list is implied based on the conﬁgured VLANs. For instance, in this example, 
Router1 allows VLAN 1 (because it cannot be deleted), VLAN 21, and VLAN 22. A show 
interface trunk command on Switch1 would show only 1, 21, and 22 as the allowed VLANs 
on FA0/1. 
802.1Q-in-Q Tunneling
Traditionally, VLANs have not extended beyond the WAN boundary. VLANs in one campus 
extend to a WAN edge router, but VLAN protocols are not used on the WAN.
Today, several emerging alternatives exist for the passage of VLAN trafﬁc across a WAN, 
including 802.1Q-in-Q, Ethernet over MPLS (EoMPLS), and VLAN MPLS (VMPLS). While 
these topics are more applicable to the CCIE Service Provider certiﬁcation, you should at least 
know the concept of 802.1 Q-in-Q tunneling.
Also known as Q-in-Q or Layer 2 protocol tunneling, 802.1Q-in-Q allows an SP to preserve 
802.1Q VLAN tags across a WAN service. By doing so, VLANs actually span multiple 
geographically dispersed sites. Figure 2-5 shows the basic idea.
Figure 2-5
Q-in-Q: Basic Operation 
C1-SW1
C2-SW1
SP:
Customer1: VLAN 5
Customer1: VLAN 6
VLANs 100-199
VLANs 100-500
C1-SW2
C2-SW2
SP-SW2
VLAN
ID 100
Data
VLAN
ID 6
Eth.
Header
VLAN
ID 100
Data
VLAN
ID 5
Eth.
Header
SP-SW1
VLAN
ID 100
Data
Eth.
Header
VLAN
ID 100
Data
Eth.
Header
VLAN
ID 100
Data
Eth.
Header
VLAN
ID 100
Data
Eth.
Header
KEY 
POINT

52     Chapter 2: Virtual LANs and VLAN Trunking
The ingress SP switch takes the 802.1Q frame, and then tags each frame entering the interface with 
an additional 802.1Q header. In this case, all of Customer1’s frames are tagged as VLAN 5 as they 
pass over the WAN; Customer2’s frames are tagged with VLAN 6. After removing the tag at 
egress, the customer switch sees the original 802.1Q frame, and can interpret the VLAN ID 
correctly. The receiving SP switch (SP-SW2 in this case) can keep the various customers’ trafﬁc 
separate based on the additional VLAN tags.
Using Q-in-Q, an SP can offer VLAN services, even when the customers use overlapping VLAN 
IDs. Customers get more ﬂexibility for network design options, particularly with metro Ethernet 
services. Plus, CDP and VTP trafﬁc passes transparently over the Q-in-Q service. 

Foundation Summary     53
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 2-10 lists some of the most popular IOS commands related to the topics in this chapter. 
(The command syntax was copied from the Catalyst 3550 Multilayer Switch Command 
Reference, 12.1(20)EA2. Note that some switch platforms may have differences in the 
command syntax.) 
Table 2-10
Catalyst IOS Commands Related to Chapter 2
Command
Description
show mac address-table [aging-time | 
count | dynamic | static] [address hw-addr] 
[interface interface-id] [vlan vlan-id]
Displays the MAC address table; the security 
option displays information about the restricted or 
static settings
show interfaces [interface-id | vlan vlan-id] 
switchport | trunk] 
Displays detailed information about an interface 
operating as an access port or a trunk
show vlan [brief | id vlan-id | 
name vlan-name | summary] 
EXEC command that lists information about 
VLAN
show vlan [vlan]
Displays VLAN information
show vtp status
Lists VTP conﬁguration and status information
switchport mode {access | dot1q-tunnel | 
dynamic {auto | desirable} | trunk}
Conﬁguration command setting nontrunking 
(access), trunking, and dynamic trunking (auto 
and desirable) parameters
switchport nonegotiate
Interface subcommand that disables DTP 
messages; interface must be conﬁgured as trunk or 
access port
switchport trunk {allowed vlan vlan-list} | 
{encapsulation {dot1q | isl | negotiate}} | 
{native vlan vlan-id} | 
{pruning vlan vlan-list}
Interface subcommand used to set parameters used 
when the port is trunking
switchport access vlan vlan-id 
Interface subcommand that statically conﬁgures 
the interface as a member of that one VLAN

54     Chapter 2: Virtual LANs and VLAN Trunking
Table 2-11 lists the commands related to VLAN creation—both the VLAN database mode 
conﬁguration commands (reached with the vlan database privileged mode command) and the 
normal conﬁguration mode commands.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
VLAN, broadcast domain, DTP, VTP pruning, 802.1Q, ISL, native VLAN, 
encapsulation, private VLAN, promiscuous port, community VLAN, isolated 
VLAN, 802.1Q-in-Q, Layer 2 protocol tunneling
NOTE
Some command parameters may not be listed in Table 2-11.
Table 2-11
Catalyst 3550 VLAN Database and Conﬁguration Mode Command List
VLAN Database
Conﬁguration
vtp {domain domain-name | password 
password | pruning | v2-mode | 
{server | client | transparent}}
vtp {domain domain-name | ﬁle ﬁlename | 
interface name | mode {client | server | 
transparent} | password password | pruning | 
version number}
vlan vlan-id [backupcrf {enable | disable}] 
[mtu mtu-size] [name vlan-name] [parent 
parent-vlan-id] [state {suspend | active}] 
vlan vlan-id1
show {current | proposed | difference}
No equivalent
apply | abort | reset 
No equivalent
1Creates the VLAN and places the user in VLAN configuration mode, where commands matching the VLAN database 
mode options of the vlan command are used to set the same parameters.

Memory Builders     55
Refer to the CD-based glossary to check your answers.
Further Reading
The topics in this chapter tend to be covered in slightly more detail in CCNP Switching exam 
preparation books. For more details on these topics, refer to the CCNP BCMSN Exam Certiﬁcation 
Guide and the CCNP Self-Study: CCNP BCMSN Exam Certiﬁcation Guide, Second Edition, listed 
in the introduction to this book.
Cisco LAN Switching, by Kennedy Clark and Kevin Hamilton, is an excellent reference for 
LAN-related topics in general, and certainly very useful for CCIE written and lab exam 
preparation.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Bridging and LAN Switching 
■Transparent 
■LAN Switching  
■Catalyst IOS Conﬁguration Commands
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching exam topics: 
■IEEE 802.1D Spanning Tree Protocol
■PortFast, UplinkFast, and BackboneFast
■BPDU Guard, Root Guard, UDLD, and 
Loop Guard
■Cisco PVST+ and IEEE 802.1s MST
■IEEE 802.1w Rapid STP
■EtherChannels

C H A P T E R 3
Spanning Tree Protocol
Spanning Tree Protocol (STP) is probably one of the most widely known protocols covered on 
the CCIE Routing and Switching written exam. STP has been around a long time, is used in 
most every campus network today, and is covered extensively on the CCNP BCMSN exam. This 
chapter covers a broad range of topics related to STP.
“Do I Know This Already?” Quiz
Table 3-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Assume that a non-root 802.1D switch has ceased to receive Hello BPDUs. Which STP 
setting determines how long a non-root switch waits before trying to choose a new 
Root Port? 
a. Hello timer setting on the Root
b. Maxage timer setting on the Root
c. Forward Delay timer setting on the Root
d. Hello timer setting on the non-root switch
e. Maxage timer setting on the non-root switch
f. Forward Delay timer setting on the non-root switch
Table 3-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
802.1D Spanning Tree Protocol
1–6
Optimizing Spanning Tree
7–9
Protecting STP
10
Total Score

58     Chapter 3: Spanning Tree Protocol
2.
Assume that a non-root 802.1D switch receives a Hello BPDU with the TCN ﬂag set. Which 
STP setting determines how long the non-root switch waits before timing out CAM entries? 
a. Hello timer setting on the Root
b. Maxage timer setting on the Root
c. Forward Delay timer setting on the Root
d. Hello timer setting on the non-root switch
e. Maxage timer setting on the non-root switch
f. Forward Delay timer setting on the non-root switch
3.
Assume that non-root Switch1 (SW1) is blocking on a 802.1Q trunk connected to Switch2 
(SW2). Both switches are in the same MST region. SW1 ceases to receive Hellos from SW2. 
What timers have an impact on how long Switch1 takes to both become the Designated Port 
on that link and reach forwarding state? 
a. Hello timer setting on the Root
b. Maxage timer setting on the Root
c. Forward Delay timer on the Root
d. Hello timer setting on SW1
e. Maxage timer setting on SW1
f. Forward Delay timer on SW1
4.
Which of the following statements are true regarding support of multiple spanning trees over 
an 802.1Q trunk? 
a. Only one common spanning tree can be supported.
b. Cisco PVST+ supports multiple spanning trees if the switches are Cisco switches.
c. 802.1Q supports multiple spanning trees when using IEEE 802.1s MST.
d. Two PVST+ domains can pass over a region of non-Cisco switches using 802.1Q trunks 
by encapsulating non-native VLAN Hellos inside the native VLAN Hellos.
5.
When a switch notices a failure, and the failure requires STP convergence, it notiﬁes the Root 
by sending a TCN BPDU. Which of the following best describes why the notiﬁcation is 
needed? 
a. To speed STP convergence by having the Root converge quickly.
b. To allow the Root to keep accurate count of the number of topology changes.
c. To trigger the process that causes all switches to use a short timer to help ﬂush the CAM.
d. There is no need for TCN today; it is a holdover from DEC’s STP speciﬁcation.

“Do I Know This Already?” Quiz     59
6.
Two switches have four parallel Ethernet segments, none of which forms into an EtherChannel. 
Assuming 802.1D is in use, what is the maximum number of the eight ports (four on each 
switch) that stabilize into a forwarding state? 
a. 1
b. 3
c. 4
d. 5
e. 7
7.
Two switches have four Ethernet segments connecting them, with the intention of using an 
EtherChannel. Port fa 0/1 on one switch is connected to port fa0/1 on the other switch; port 
fa0/2 is connected to the other switch’s port fa0/2; and so on. An EtherChannel can still form 
using these four segments, even though some conﬁguration settings do not match on the 
corresponding ports on each switch. Which settings do not have to match? 
a. DTP negotiation settings (auto/desirable/on)
b. Allowed VLAN list
c. STP per-VLAN port cost on the ports on a single switch
d. If 802.1Q, native VLAN
8.
IEEE 802.1w does not use the exact same port states as does 802.1D. Which of the following 
are valid 802.1w port states? 
a. Blocking
b. Listening
c. Learning
d. Forwarding
e. Disabled
f. Discarding
9.
What STP tools or protocols supply a “maxage optimization,” allowing a switch to bypass the 
wait for maxage to expire when its Root Port stops receiving Hellos? 
a. Loop Guard
b. UDLD 
c. UplinkFast
d. BackboneFast
e. IEEE 802.1w

60     Chapter 3: Spanning Tree Protocol
10.
A trunk between switches lost its physical transmit path in one direction only. Which of the 
following features protect against the STP problems caused by such an event? 
a. Loop Guard
b. UDLD 
c. UplinkFast
d. PortFast
e. UplinkFast

802.1D Spanning Tree Protocol     61
Foundation Topics
802.1D Spanning Tree Protocol
Although many CCIE candidates already know STP well, the details are easily forgotten. For 
instance, you can install a campus LAN, possibly turn on a few STP optimizations and security 
features out of habit, and have a working LAN using STP—without ever really contemplating 
how STP does what it does. And in a network that makes good use of Layer 3 switching, each STP 
instance might span only three to four switches, making the STP issues much more manageable—
but more forgettable in terms of helping you remember things you need to know for the exam. 
This chapter reviews the details of IEEE 802.1D STP, and then goes on to related topics—802.1w 
RSTP, multiple spanning trees, STP optimizations, and STP security features.
STP uses messaging between switches to stabilize the network into a logical, loop-free topology. 
To do so, STP causes some interfaces (popularly called ports when discussing STP) to simply not 
forward or receive trafﬁc—in other words, the ports are in a blocking state. The remaining ports, 
in an STP forwarding state, together provide a loop-free path to every Ethernet segment in the 
network. 
Choosing Which Ports Forward: Choosing Root 
Ports and Designated Ports
To determine which ports forward and block, STP follows a three-step process, as listed in 
Table 3-2. Following the table, each of the three steps is explained in more detail.
Table 3-2
Three Major 802.1D STP Process Steps
Electing a Root Switch
Only one switch can be the root of the spanning tree; to select the root, the switches hold an 
election. Each switch begins its STP logic by creating and sending an STP Hello bridge protocol 
KEY 
POINT
Major Step
Description
Elect the Root switch
The switch with the lowest bridge ID wins; the standard bridge ID 
is 2-byte priority followed by a MAC address unique to that 
switch.
Determine each switch’s Root 
Port
The one port on each switch with the least cost path back to the 
root.
Determine the Designated Port 
for each segment
When multiple switches connect to the same segment, this is the 
switch that forwards the least cost Hello onto a segment. 

62     Chapter 3: Spanning Tree Protocol
data unit (BPDU) message, claiming to be the root switch. If a switch hears a superior Hello—a 
Hello with a lower bridge ID—it stops claiming to be root by ceasing to originate and send Hellos. 
Instead, the switch starts forwarding the superior Hellos received from the superior candidate. 
Eventually, all switches except the switch with the best bridge ID cease to originate Hellos; that 
one switch wins the election and becomes the root switch. 
The original IEEE 802.1D bridge ID held two ﬁelds:
■
The 2-byte Priority ﬁeld, which was designed to be conﬁgured on the various switches to 
affect the results of the STP election process.
■
A 6-byte MAC Address ﬁeld, which was included as a tiebreaker, because each switch’s 
bridge ID includes a MAC address value that should be unique to each switch. As a result, 
some switch must win the root election.
The format of the original 802.1D bridge ID has been redeﬁned. Figure 3-1 shows the original and 
new format of the bridge IDs. 
Figure 3-1
IEEE 802.1D STP Bridge ID Formats
The format was changed mainly due to the advent of multiple spanning trees as supported by Per 
VLAN Spanning Tree Plus (PVST+) and IEEE 802.1s Multiple Spanning Trees (MST). With the 
old-style bridge ID format, a switch’s bridge ID for each STP instance (possibly one per VLAN) 
was identical if the switch used a single MAC address when building the bridge ID. Having 
multiple STP instances with the same bridge ID was confusing, so vendors such as Cisco Systems 
used a different Ethernet BIA for each VLAN when creating the old-style bridge IDs. This 
provided a different bridge ID per VLAN, but it consumed a large number of reserved BIAs in 
each switch.
The System ID Extension allows a network to use multiple instances of STP, even one per VLAN, 
but without the need to consume a separate BIA on each switch for each STP instance. The System 
ID Extension ﬁeld allows the VLAN ID to be placed into what was formerly the last 12 bits of the 
Priority
(0 – 65,535)
System ID
(MAC Address)
System ID Extension
(Typically Holds VLAN ID)
Priority
Multiple
of 4096
6 Bytes
System ID
(MAC Address)
2 Bytes
12 Bits
4 Bits
Original Format
Bridge ID
System ID
Extension
(MAC Address
Reduction)
6 Bytes

802.1D Spanning Tree Protocol     63
Priority ﬁeld. A switch can use a single MAC address to build bridge IDs, and with the VLAN 
number in the System ID Extension ﬁeld still have a unique bridge ID in each VLAN. The use of 
the System ID Extension ﬁeld is also called MAC address reduction, because of the need for many 
fewer reserved MAC addresses on each switch.
Determining the Root Port
Once the root is elected, the rest of the switches now need to determine their Root Port (RP). The 
process proceeds as described in the following list:
1.
The root creates and sends a Hello every Hello timer (2 seconds default).
2.
Each switch that receives a Hello forwards the Hello after updating the following ﬁelds in the 
Hello: the cost, the forwarding switch’s bridge ID, forwarder’s port priority, and forwarder’s 
port number.
3.
Switches do not forward Hellos out ports that stabilize into a blocking state.
4.
Of all the ports in which a switch receives Hellos, the port with the least calculated cost to the 
root is the RP.
A switch must examine the cost value in each Hello, plus the switch’s STP port costs, in order to 
determine its least cost path to reach the root. To do so, the switch adds the cost listed in the Hello 
message to the switch’s port cost of the port on which the Hello was received. For example, 
Figure 3-2 shows the loop network design and details several STP cost circulations.
Figure 3-2
Calculating STP Costs to Determine RPs
In Figure 3-2, SW1 happened to become root, and is originating Hellos of cost 0. SW3 receives 
two Hellos, one with cost 0 and one with cost 38. However, SW3 must then calculate its cost to 
reach the root, which is the advertised cost (0 and 38, respectively) plus SW3’s port costs (100 and 
19, respectively). As a result, although SW3 has a direct link to SW1, the calculated cost is lower 
SW1
RP
Fa0/4
Cost 19
BL
DP
DP
DP
DP
RP
RP
Cost 1
Cost 19
Cost 19
Cost out fa0/1 = 0 +
100 = 100; cost out
fa0/4 = 38 + 19 = 57!
Fa0/1
Cost 100
Root
Hello Cost 0
Loop Design – All Port Costs 19 Unless Shown
SW3
SW2
SW4
Adding my incoming cost
setting fields for forwarder’s
bridge ID, port priority, and
port number.
Hello Cost 38
Hello Cost 19
Hello Cost 0

64     Chapter 3: Spanning Tree Protocol
out interface fa0/4 (cost 57) than it is out interface fa0/1 (cost 100), so SW3 chooses its fa0/4 
interface as its RP.
While the costs shown in Figure 3-2 might seem a bit contrived, the same result would happen 
with default port costs if the link from SW1 to SW3 were Fast Ethernet (default cost 19), and the 
other links were Gigabit Ethernet (default cost 4). Table 3-3 lists the default port costs according 
to IEEE 802.1D. Note that the IEEE updated 802.1D in the late 1990s, changing the suggested 
default port costs. 
Table 3-3
Default Port Costs According to IEEE 802.1D
When a switch receives multiple Hellos with equal calculated cost, it uses the following 
tiebreakers:
1.
Pick the lowest value of the forwarding switch’s bridge ID.
2.
Use the lowest port priority of the neighboring switch. The neighboring switch added its own 
port priority to the Hello before forwarding it.
3.
Use the lowest internal port number (of the forwarding switch) as listed inside the received 
Hellos.
Note that if the ﬁrst tiebreaker in this list fails to produce an RP, this switch must have multiple 
links to the same neighboring switch. The last two tiebreakers simply help decide which of the 
multiple parallel links to use.
Determining the Designated Port
A converged STP topology results in only one switch forwarding onto each LAN segment. The 
switch that forwards onto a LAN segment is called the designated switch for that segment, and 
NOTE
Many people think of STP costs as being associated with a segment; however, the cost 
is actually associated with interfaces. Good design practices dictate using the same STP cost on 
each end of a point-to-point Ethernet segment, but the values can be different. 
Speed of Ethernet
Original IEEE Cost
Revised IEEE Cost
10 Mbps
100
100
100 Mbps
10
19
1 Gbps
1
4
10 Gbps
1
2

802.1D Spanning Tree Protocol     65
the port that it uses to forward frames onto that segment is called the Designated Port (DP). By 
deﬁnition, only the DP on that segment should forward frames onto the segment. 
To win the right to be the DP, a switch must send the Hello with the lowest advertised cost onto 
the segment. For instance, consider the segment between SW3 and SW4 in Figure 3-2 before the 
DP has been determined on that segment. SW3 would get Hellos directly from SW1, compute its 
cost to the root over that path, and then forward the Hello out its fa 0/4 interface to SW4, with cost 
100. Similarly, SW4 will forward a Hello with cost 38, as shown in Figure 3-2. SW4’s fa 0/3 port 
becomes the DP due to its lower advertised cost. 
Only the DP forwards Hellos onto a LAN segment as well. In the same example, SW4 keeps 
sending the cost-38 Hellos out the port, but SW3 stops sending its inferior Hellos. 
When the cost is a tie, STP uses the same tiebreakers to choose the DP as when choosing an RP: 
lowest forwarder’s bridge ID, lowest forwarder’s port priority, and lowest forwarder’s port 
number.
Converging to a New STP Topology
STP logic monitors the normal ongoing Hello process when the network topology is stable; when 
the Hello process changes, STP then needs to react and converge to a new STP topology. When 
STP has a stable topology, the following occurs:
1.
The root switch generates a Hello regularly based on the Hello timer. 
2.
Each non-root switch regularly (based on the Hello timer) receives a copy of the root’s 
Hello on its RP. 
3.
Each switch updates and forwards the Hello out its Designated Ports.
4.
For each blocking port, the switch regularly receives a copy of the Hello from the DP on that 
segment. (The switches do not forward Hellos out blocking interfaces.) 
When some deviation from these events occurs, STP knows that the topology has changed and that 
convergence needs to take place. For instance, one simple case might be that the root switch loses 
power; the rest of the switches will not hear any Hello messages, and after the maxage timer 
expires (default 10 times Hello, or 20 seconds), the switches elect a new root based on the logic 
described earlier in this chapter. 
For a more subtle example, consider Figure 3-3, which shows the same loop network as in 
Figure 3-2. In this case, however, the link from SW1 to SW2 has just failed.

66     Chapter 3: Spanning Tree Protocol
Figure 3-3
Reacting to Loss of Link Between SW1 and SW2
The following list describes some of the key steps from Figure 3-3:
1.
SW2 ceases the receive Hellos on its RP.
2.
Because SW2 is not receiving Hellos over any other path, it begins a new root election by 
claiming to be root and ﬂooding Hellos out every port.
3.
SW4 notices that the latest Hello implies a new root switch, but SW4 ends up with the same 
RP (for now). SW4 forwards the Hello out toward SW3 after updating the appropriate ﬁelds 
in the Hello.
4.
SW3 receives the Hello from SW4, but it is inferior to the one SW3 receives from SW1. So, 
SW3 becomes the DP on the segment between itself and SW4, and starts forwarding the 
superior Hello on that port.
Remember, SW1 had won the earlier election; as of Steps 3 and 4, the Hellos from SW1 and 
SW2 are competing, and the one claiming SW1 as root will again win. The rest of the process 
results with SW3’s fa0/4 as DP, SW4’s fa 0/3 as RP, SW4’s fa 0/2 as DP, and SW3’s fa 0/4 
as RP. 
Topology Change Notiﬁcation and Updating the CAM
When STP reconvergence occurs, some Content Addressable Memory (CAM) entries might 
be invalid (CAM is the Cisco term for what’s more generically called the MAC address table, 
switching table, or bridging table on a switch). For instance, before the link failure shown in 
Figure 3-3, SW3’s CAM might have had an entry for 0200.1111.1111 (Router1’s MAC address) 
pointing out fa0/4 to SW4. (Remember, at the beginning of the scenario described in Figure 3-3, 
Loop Design – All Port Costs 19 Unless Shown
SW1
Fa0/4
Cost 19
Disabled
Fa0/3
Fa0/2
Fa0/4
Disabled
Cost 1
SW1’s bridge ID is better.
So I’m sending the
superior Hello on this
segment. I am now DP!
Fa0/1
Cost 100
MAC 0200.1111.1111
Root
SW3
SW2
SW4
My RP failed. I am
receiving no other Hellos.
I must be the root now!
Hello Root =
Sw2 Cost 0
Hello Root =
Sw2 Cost 19
Hello Root =
Sw1 Cost 0
Hello Root =
Sw1 Cost 100
R1
1
1
2
3
4

802.1D Spanning Tree Protocol     67
SW3 was blocking on its fa0/1 interface back to SW1.) When the link between SW1 and SW2 
failed, SW3 would need to change its CAM entry for 0200.1111.111 to point out port fa0/1.
To update the CAMs, two things need to occur:
■
All switches need to be notiﬁed to time out their CAM entries. 
■
Each switch needs to use a short timer, equivalent to the forward delay timer (default 15 seconds), 
to time out the CAM entries. 
Because some switches might not directly notice a change in the STP topology, any switch that 
detects a change in the STP topology has a responsibility to notify the rest of the switches. To do 
so, a switch simply notiﬁes the root switch in the form of a Topology Change Notiﬁcation (TCN) 
BPDU. The TCN goes up the tree to the root. After that, the root notiﬁes all the rest of the switches. 
The process runs as follows:
1.
A switch experiencing the STP port state change sends a TCN BPDU out its Root Port; it 
repeats this message every Hello time until it is acknowledged.
2.
The next switch receiving that TCN BPDU sends back an acknowledgement via its next 
forwarded Hello BPDU by marking the Topology Change Acknowledgement (TCA) bit in 
the Hello.
3.
The switch that was the DP on the segment in the ﬁrst two steps repeats the ﬁrst two steps, 
sending a TCN BPDU out its Root Port, and awaiting acknowledgement from the DP on that 
segment.
By each successive switch repeating Steps 1 and 2, eventually the root receives a TCN BPDU. 
Once received, the root sets the TCA ﬂag on the next several Hellos, which are forwarded to all 
switches in the network, notifying them that a change has occurred. A switch receiving a Hello 
BPDU with the TCA ﬂag set uses the short (forward delay time) timer to time out entries in 
the CAM.
Transitioning from Blocking to Forwarding
When STP reconverges to a new, stable topology, some ports that were blocking might have been 
designated as DP or RP, so these ports need to be in a forwarding state. However, the transition 
from blocking to forwarding state cannot be made immediately without the risk of causing loops.
To transition to forwarding state but also prevent temporary loops, a switch ﬁrst puts a formerly 
blocking port into listening state, and then into learning state, with each state lasting for the length 
of time deﬁned by the forward delay timer (by default, 15 seconds). Table 3-4 summarizes the key 
points about all of the 802.1D STP port states.

68     Chapter 3: Spanning Tree Protocol
Table 3-4
IEEE 802.1D Spanning Tree Interface States
In summary, when STP logic senses a change in the topology, it converges, possibly picking 
different ports as RP, DP, or neither. Any switch changing its RPs or DPs sends a TCN BPDU 
to the root at this point. For the ports newly designated as RP or DP, 802.1D STP ﬁrst uses the 
listening and learning states before reaching the forwarding state. (The transition from forwarding 
to blocking can be made immediately.) 
Per-VLAN Spanning Tree and STP over Trunks
If only one instance of STP was used for a switched network with redundant links but with 
multiple VLANs, several ports would be in a blocking state, unused under stable conditions. The 
redundant links would essentially be used for backup purposes.
The Cisco Per VLAN Spanning Tree Plus (PVST+) feature creates an STP instance for each 
VLAN. By tuning STP conﬁguration per VLAN, each STP instance can use a different root 
switch and have different interfaces block. As a result, the trafﬁc load can be balanced across the 
available links. For instance, in the common building design with distribution and access links in 
Figure 3-4, focus on the left side of the ﬁgure. In this case, the access layer switches block on 
different ports on VLANs 1 and 2, with different root switches.
Figure 3-4
Operation of PVST+ for Better Load Balancing
With different root switches and with default port costs, the access layer switches end up sending 
VLAN1 trafﬁc over one uplink and VLAN2 trafﬁc over another uplink. 
State
Forwards 
Data Frames?
Learn Source MACs of 
Received Frames?
Transitory or 
Stable State?
Blocking
No
No
Stable
Listening
No
No
Transitory
Learning
No
Yes
Transitory
Forwarding
Yes
Yes
Stable
Disabled
No
No
Stable
3550
Root
VLAN1
ISL
.1Q
.1Q
FWD
VLAN1
FWD
VLAN2
Root
VLAN2
FWD
VLAN2
FWD
VLAN1
.1Q
.1Q
2950
3550
2950

802.1D Spanning Tree Protocol     69
Using 802.1Q with STP requires some extra thought as to how it works. 802.1Q does not support 
PVST+ natively; however, Cisco switches do support PVST+ over 802.1Q trunks. So, with all 
Cisco switches, and PVST+ (which is enabled by default), PVST+ works ﬁne. 
When using 802.1Q with non-Cisco switches, the switches must follow the IEEE standard 
completely, so the trunks support only a Common Spanning Tree (CST). With standard 802.1Q, 
only one instance of STP runs only over the native VLAN, and that one STP topology is used 
for all VLANs. Although using only one STP instance reduces the STP messaging overhead, it 
does not allow load balancing by using multiple STP instances, as was shown with PVST+ in 
Figure 3-4.
When building networks using a mix of Cisco and non-Cisco switches, along with 802.1Q 
trunking, you can still take advantage of multiple STP instances in the Cisco portion of the 
network. Figure 3-5 shows two general options in which two CST regions of non-Cisco switches 
connect to two regions of Cisco PVST+ supporting switches.
Figure 3-5
Combining Standard IEEE 802.1Q and CST with PVST+
The left side of Figure 3-5 shows an example in which the CST region is not used for transit 
between multiple PVST+ regions. In this case, none of the PVST+ per-VLAN STP information 
needs to pass over the CST region. The PVST+ region maps the single CST instance to each of 
the PVST+ STP instances. 
3550
ISL
Non-native VLAN STP
BPDUs trunked, sent to
0100.0CCC.CCCD
PVST+ Region
.1Q
.1Q
.1Q
.1Q
.1Q
STP Only Over
Native VLAN
CST Region 1
CST Region 2
.1Q
2950
3550
Non-Cisco
Non-Cisco
Non-Cisco
Non-Cisco
Non-Cisco
2950
3550
ISL
PVST+ Region
.1Q
.1Q
.1Q
.1Q
2950
3550
2950
Non-Cisco

70     Chapter 3: Spanning Tree Protocol
The rest of Figure 3-5 shows two PVST+ regions, separated by a single CST region (CST 
Region 2). In this case, the PVST+ per-VLAN STP information needs to pass through the CST 
region. To do so, PVST+ treats the CST region as a single link and tunnels the PVST+ BPDUs 
across the CST region. The tunnel is created by sending the BPDUs using a multicast destination 
MAC of 0100.0CCC.CCCD, with the BPDUs being VLAN tagged with the correct VLAN ID. As 
a result, the non-Cisco switches forward the BPDUs as a multicast, and do not interpret the frames 
as BPDUs. When a forwarded BPDU reaches the ﬁrst Cisco PVST+ switch in the other PVST+ 
region, the switch, listening for multicasts to 0100.0CCC.CCCD, reads and interprets the BPDU.
STP Conﬁguration and Analysis
Example 3-1, based on Figure 3-6, shows some of the basic STP conﬁguration and show commands. 
Take care to note that many of the upcoming commands allow the parameters to be set for all 
VLANs by omitting the VLAN parameter, or set per VLAN by including a VLAN parameter. 
Example 3-1 begins with SW1 coincidentally becoming the Root switch. After that, SW2 is conﬁgured 
to become root, and SW3 changes its Root Port as a result of a conﬁgured port cost in VLAN 1. 
Figure 3-6
Network Used with Example 3-1
NOTE
802.1Q, along with 802.1S Multiple-instance Spanning Tree (MST), allows 802.1Q 
trunks for support multiple STP instances. MST is covered later in this chapter.
Example 3-1
STP Basic Conﬁguration and show Commands 
! First, note the Root ID column lists the root’s bridge ID as two parts, 
! first the priority, followed by the MAC address of the root. The root cost of 
! 0 implies that SW1 (where the command is executed) is the root. 
SW1#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    rrrrooooooootttt
                                        Root    Hello Max Fwd
Vlan                   Root ID          Cost    Time  Age Dly  Root Port
---------------- -------------------- --------- ----- --- ---  ------------
VLAN0001         32769 000a.b7dc.b780         0    2   20  15                  
VLAN0011         32779 000a.b7dc.b780         0    2   20  15                  
VLAN0012         32780 000a.b7dc.b780         0    2   20  15                  
VLAN0021         32789 000a.b7dc.b780         0    2   20  15                  
VLAN0022         32790 000a.b7dc.b780         0    2   20  15                  
SW1
Fa0/4
Fa0/3
Fa0/4
Fa0/2
Fa0/3
Fa0/2
Fa0/1
Fa0/1
Fa0/2
Fa0/4
Fa0/1
Fa0/3
SW3
SW2
SW4
Core Design

802.1D Spanning Tree Protocol     71
! The next command confirms that SW1 believes that it is the root of VLAN 1.
SW1#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111    rrrrooooooootttt    ddddeeeettttaaaaiiiillll
  Root ID    Priority    32769
             Address     000a.b7dc.b780
             This bridge is the root
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
! Next, SW2 is configured with a lower (better) priority than SW1, 
! so it becomes the root. Note that because SW2 is defaulting to use 
! the system ID extension, the actual priority must be configured as a
! multiple of 4096. 
SW2#ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
SW2(config)#ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111    pppprrrriiiioooorrrriiiittttyyyy    ????
  <0-61440>  bridge priority in increments of 4096
SW2(config)#ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111    pppprrrriiiioooorrrriiiittttyyyy    22228888666677772222
SW2(config)#^^^^ZZZZ
SW2#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111    rrrrooooooootttt    ddddeeeettttaaaaiiiillll
VLAN0001         
  Root ID    Priority    28673
             Address     0011.92b0.f500
             This bridge is the root
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
! The System ID Extension field of the bridge ID is implied next. The output
! does not separate the 4-bit Priority field from the System ID field. The output 
! actually shows the first 2 bytes of the bridge ID, in decimal. For VLAN1, 
! the priority is 28,763, which is the configured 28,672 plus the VLAN ID, 
! because the VLAN ID value is used in the System ID field in order to implement  
! the MAC address reduction feature. The other VLANs have a base priority 
! of 32768, plus the VLAN ID - for example, VLAN11 has priority 32779,
! (priority 32,768 plus VLAN 11), VLAN12 has 32780, and so on.
SW2#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    rrrrooooooootttt    pppprrrriiiioooorrrriiiittttyyyy
VLAN0001         28673
VLAN0011         32779
VLAN0012         32780
VLAN0021         32789
VLAN0022         32790
! Below, SW3 shows a Root Port of Fa 0/2, with cost 19. SW3 gets Hellos
! directly from the root (SW2) with cost 0, and adds its default cost (19).
! This next command also details the breakdown of the priority and system ID.
SW3#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111
VLAN0001
  Spanning tree enabled protocol ieee
  Root ID    Priority    28673
             Address     0011.92b0.f500
             Cost        19
continues
Example 3-1
STP Basic Conﬁguration and show Commands (Continued)

72     Chapter 3: Spanning Tree Protocol
             Port        2 (FastEthernet0/2)
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
  Bridge ID  Priority    32769  (priority 32768 sys-id-ext 1)
             Address     000e.837b.3100
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
             Aging Time 300
Interface        Role Sts Cost      Prio.Nbr Type
---------------- ---- --- --------- -------- --------------------------------
Fa0/1            Altn BLK 19        128.1    P2p 
Fa0/2            Root FWD 19        128.2    P2p 
Fa0/4            Desg FWD 19        128.4    P2p 
Fa0/13           Desg FWD 100       128.13   Shr 
! Above, the port state of BLK and FWD for each port is shown, as well as the 
! Root port and the Designated Ports.
! Below, Switch3’s VLAN 1 port cost is changed on its Root Port (fa0/2), 
! causing SW3 to reconverge, and pick a new RP.
SW3#ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
SW3(config)#iiiinnnntttt    ffffaaaa    0000////2222
SW3(config-if)#ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111    ccccoooosssstttt    111100000000
SW3(config-if)#^^^^ZZZZ
! The next command was done immediately after changing the port cost on
! SW3. Note the state listed as “LIS,” meaning listen. STP has already 
! chosen fa 0/1 as the new RP, but it must now transition through listening
! and learning states.
SW3#sssshhhh    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    vvvvllllaaaannnn    1111
VLAN0001
  Spanning tree enabled protocol ieee
  Root ID    Priority    28673
             Address     0011.92b0.f500
             Cost        38
             Port        1 (FastEthernet0/1)
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
  Bridge ID  Priority    32769  (priority 32768 sys-id-ext 1)
             Address     000e.837b.3100
             Hello Time   2 sec  Max Age 20 sec  Forward Delay 15 sec
             Aging Time 15 
Interface        Role Sts Cost      Prio.Nbr Type
---------------- ---- --- --------- -------- --------------------------------
Fa0/1            Root LIS 19        128.1    P2p 
Fa0/2            Altn BLK 100       128.2    P2p 
Fa0/4            Desg FWD 19        128.4    P2p 
Fa0/13           Desg FWD 100       128.13   Shr 
Example 3-1
STP Basic Conﬁguration and show Commands (Continued)

Optimizing Spanning Tree     73
The preceding example shows one way to conﬁgure the priority to a lower value to become 
the root. Optionally, the spanning-tree vlan vlan-id root {primary | secondary} [diameter 
diameter] command could be used. This command causes the switch to set the priority lower. The 
optional diameter parameter causes this command to lower the Hello, forward delay, and maxage 
timers. (This command does not get placed into the conﬁguration, but rather it acts as a macro, 
being expanded into the commands to set priority and the timers.)
Optimizing Spanning Tree
Left to default settings, IEEE 802.1D STP works, but convergence might take up to a minute or 
more for the entire network. For instance, when the root fails, a switch must wait on the 20-second 
maxage timer to expire. Then, newly forwarding ports spend 15 seconds each in listening and 
learning states, which makes convergence take 50 seconds for that one switch.
Over the years, Cisco added features to its STP code, and later the IEEE made improvements as 
well. This section covers the key optimizations to STP.
PortFast, UplinkFast, and BackboneFast
The Cisco-proprietary PortFast, UplinkFast, and BackboneFast features each solve speciﬁc STP 
problems. Table 3-5 summarizes when each is most useful, and the short version of how they 
improve convergence time.
Table 3-5
PortFast, UplinkFast, and BackboneFast
NOTE
When using the primary option, the spanning-tree vlan command sets the priority 
to 24,576 if the current root has a priority larger than 24,576. If the current root’s priority is 
24,576 or less, this command sets this switch’s priority to 4096 less than the current root. With 
the secondary keyword, this switch’s priority is set to 28,672. Also note that this logic applies 
to when the conﬁguration command is executed; it does not dynamically change the priority if 
another switch later advertises a better priority.
KEY 
POINT
Feature
Requirements for Use
How Convergence Is Optimized
PortFast
Used on access ports that are not 
connected to other switches or hubs
Immediately puts the port into forwarding 
state once the port is physically working
UplinkFast
Used on access layer switches that 
have multiple uplinks to 
distribution/core switches
Immediately replaces a lost RP with an 
alternate RP, immediately forwards on the 
RP, and triggers updates of all switches’ 
CAMs
BackboneFast
Used to detect indirect link failures, 
typically in the network core
Avoids waiting for Maxage to expire when 
its RP ceases to receive Hellos; does so by 
querying the switch attached to its RP

74     Chapter 3: Spanning Tree Protocol
PortFast 
PortFast optimizes convergence by simply ignoring listening and learning states on ports. In 
effect, convergence happens instantly on ports with PortFast enabled. Of course, if another switch 
is connected to a port on which PortFast is enabled, loops may occur. So, PortFast is intended for 
access links attached to single end-user devices. To be safe, you should also enable the BPDU 
Guard and Root Guard features when using PortFast, as covered later in this chapter.
UplinkFast
UplinkFast optimizes convergence when an uplink fails on an access layer switch. For good STP 
design, access layer switches should not become root or become transit switches. (A transit switch 
is a switch that forwards frames between other switches.) Figure 3-7 shows the actions taken when 
UplinkFast is enabled on a switch, and then when the Root Port fails.
Figure 3-7
UplinkFast Operations
Upon enabling UplinkFast globally in a switch, the switch takes three actions:
■
Increases the root priority to 49,152
■
Sets the post costs to 3000
■
Tracks alternate RPs, which are ports in which root Hellos are being received
As a result of these steps, SW3 can become root if necessary, but it is unlikely to do so given the 
large root priority value. Also, the very large costs on each link make the switch unlikely to be used 
as a transit switch. When the RP port does fail, SW3 can fail over to an alternate uplink as the new 
RP and forward immediately.
SW1
Fa0/1
Fa0/3
Fa0/2
RP:
FWD
Alt. RP:
BLK
Makes Fa0/2 the RP
Moves to forwarding state immediately
Sends multicasts for each
source MAC for local MACs
Enable Uplink Fast:
Sets priority to 49,152
Sets port costs to 3000
Tracks alternate RPs
MAC 0200.3333.3333
0200.3333.3333
0100.0CCD.CDCD
Root Switch
Priority 8192
Non-Root Switch
Priority (Default) 32768
Access Design
SW3
SW2
RP Link
Failure Occurs
Dst. MAC
Src. MAC
R3
1
4
2
3

Optimizing Spanning Tree     75
The ﬁnal step in Uplink Fast logic causes the switches to time-out the correct entries in their 
CAMs, but it does not use the TCN process. Instead, the access switch ﬁnds all the MAC addresses 
of local devices and sends one multicast frame with each local MAC address as the source MAC— 
causing all the other switches to update their CAMs. The access switch also clears out the rest of 
the entries in its own CAM.
BackboneFast
BackboneFast optimizes convergence for any generalized topological case, improving 
convergence when an indirect failure occurs. When some direct failures occur (for instance, a 
switch’s RP interface fails), the switch does not have to wait for maxage to expire. However, when 
another switch’s direct link fails, resulting in lost Hellos for other switches, the downstream 
switches indirectly learn of the failure because they cease to receive Hellos. Any time a switch 
learns of an STP failure indirectly, the switch must wait for maxage to expire before trying to 
change the STP topology.
BackboneFast simply causes switches that indirectly learn of a potential STP failure to ask their 
upstream neighbors if they know about the failure. To do so, when the ﬁrst Hello goes missing, a 
BackboneFast switch sends a Root Link Query (RLQ) BPDU out the port in which the missing 
Hello should have arrived. The RLQ asks the neighboring switch if that neighboring switch is still 
receiving Hellos from the root. If that neighboring switch had a direct link failure, it can tell the 
original switch (via another RLQ) that this path to the root is lost. Once known, the switch 
experiencing the indirect link failure can go ahead and converge without waiting for maxage 
to expire.
PortFast, UplinkFast, and BackboneFast Conﬁguration
Conﬁguration of these three STP optimizing tools is relatively easy, as summarized in Table 3-6.
Table 3-6
PortFast, UplinkFast, and BackboneFast Conﬁguration
NOTE
All switches must have BackboneFast conﬁgured for it to work correctly.
Feature
Conﬁguration Command
PortFast
spanning-tree portfast (interface subcommand)
spanning-tree portfast default (global)
UplinkFast
spanning-tree uplinkfast [max-update-rate rate] (global)
BackboneFast
spanning-tree backbonefast (global)

76     Chapter 3: Spanning Tree Protocol
PortChannels
When a network design includes multiple parallel segments between the same pair of switches, 
one switch ends up in a forwarding state on all the links, but the other switch blocks all but one of 
the ports of those parallel segments. As a result, only one of the links can be used at any point 
in time. Using Fast EtherChannel (FEC) (using FastE segments) and Gigabit EtherChannel 
(GEC) (using GigE segments) allows the combined links to be treated as one link from an STP 
perspective, so that all the parallel physical segments are used. (When conﬁguring a Cisco switch, 
a group of segments comprising an FEC or GEC is called a PortChannel.) Most campus designs 
today use a minimum of two segments per trunk, in a PortChannel, for better availability. That 
way, as long as at least one of the links in the EtherChannel is up, the STP path cannot fail, and no 
STP convergence is required.
Load Balancing Across PortChannels
When a switch decides to forward a frame out a PortChannel, the switch must also decide which 
physical link to use to send each frame. To use the multiple links, Cisco switches load balance 
the trafﬁc over the links in an EtherChannel based on the switch’s global load-balancing 
conﬁguration. 
Load-balancing methods differ depending on the model of switch and software revision. Generally, 
load balancing is based on the contents of the Layer 2, 3, and/or 4 headers. If load balancing is 
based on only one header ﬁeld in the frame, a bitmap of the low-order bits is used; if more than 
one header ﬁeld is used, an XOR of the low-order bits is used. 
For the best balancing effect, the header ﬁelds on which balancing is based need to vary among 
the mix of frames sent over the PortChannel. For instance, for a Layer 2 PortChannel connected 
to an access layer switch, most of the trafﬁc going from the access layer switch to the 
distribution layer switch is probably going from clients to the default router. So most of the 
frames have different source MAC addresses, but the same destination MAC address. For 
packets coming back from a distribution switch toward the access layer switch, many of the 
frames might have a source address of that same router, with differing destination MAC 
addresses. So, you could balance based on source MAC at the access layer switch, and based 
on destination MAC at the distribution layer switch—or balance based on both ﬁelds on 
both switches. The goal is simply to use a balancing method for which the ﬁelds in the 
frames vary.
The port-channel load-balance type command sets the type of load balancing. The type options 
include using source and destination MAC, IP addresses, and TCP and UDP ports—either a single 
ﬁeld or both the source and destination.

Optimizing Spanning Tree     77
PortChannel Discovery and Conﬁguration
You can explicitly conﬁgure interfaces to be in a PortChannel by using the channel-group number 
mode on interface subcommand. You would simply put the same command under each of the 
physical interfaces inside the PortChannel, using the same PortChannel number. 
You can also use dynamic protocols to allow neighboring switches to ﬁgure out which ports should 
be part of the same PortChannel. Those protocols are the Cisco-proprietary Port Aggregation 
Protocol (PAgP) and the IEEE 802.1AD Link Aggregation Control Protocol (LACP). To dynami-
cally form a PortChannel using PAgP, you still use the channel-group command, with a mode of 
auto or desirable. To use LACP to dynamically create a PortChannel, use a mode of active or 
passive. Table 3-7 lists and describes the modes and their meanings.
Table 3-7
PAgP and LACP Conﬁguration Settings and Recommendations
When PAgP or LACP negotiate to form a PortChannel, the messages include the exchange 
of some key conﬁguration information. As you might imagine, they exchange a system ID to 
determine which ports connect to the same two switches. The two switches then exchange other 
information about the candidate links for a PortChannel; several items must be identical on the 
links for them to be dynamically added to the PortChannel, as follows: 
■
Same speed and duplex settings.
■
If not trunking, same access VLAN. 
■
If trunking, same trunk type, allowed VLANs, and native VLAN. 
■
On a single switch, each port in a PortChannel must have the same STP cost per VLAN on all 
links in the PortChannel. 
■
No ports can have SPAN conﬁgured.
PAgP 
Setting
LACP 802.1AD 
Setting
Action 
on
on
Disables PAgP or LACP, and forces the port into the PortChannel
off
off
Disables PAgP or LACP, and prevents the port from being part of a 
PortChannel
auto
passive
Uses PAgP or LACP, but waits on other side to send ﬁrst PAgP or 
LACP message
desirable
active
Uses PAgP or LACP, and initiates the negotiation
NOTE
Using auto (PAgP) or passive (LACP) on both switches prevents a PortChannel from 
forming dynamically. Cisco recommends the use of desirable mode (PAgP) or active mode 
(LACP) on ports that you intend to be part of a PortChannel.

78     Chapter 3: Spanning Tree Protocol
When PAgP or LACP completes the process, a new PortChannel interface exists, and is used as if 
it were a single port for STP purposes, with balancing taking place based on the global load-
balancing method conﬁgured on each switch. 
Rapid Spanning Tree Protocol
IEEE 802.1w Rapid Spanning Tree Protocol (RSTP) enhances the 802.1D standard with one goal 
in mind: improving STP convergence. To do so, RSTP deﬁnes new variations on BPDUs between 
switches, new port states, and new port roles, all with the capability to operate backwardly 
compatible with 802.1D switches. The key components of speeding convergence with 802.1w 
are as follows:
■
Waiting for only three missed Hellos on an RP before reacting (versus ten missed Hellos via 
the maxage timer with 802.1D)
■
New processes that allow transition from the disabled state (replaces the blocking state in 
802.1D) to learning state, bypassing the concept of an 802.1D listening state
■
Standardization of features like Cisco PortFast, UplinkFast, and BackboneFast
■
An additional feature to allow a backup DP when a switch has multiple ports connected to the 
same shared LAN segment
To support these new processes, RSTP uses the same familiar Hello BPDUs, using some previously 
undeﬁned bits to create the new features. For instance, RSTP deﬁnes a Hello message option for the 
same purpose as the Cisco proprietary RLQ used by the Cisco BackboneFast feature. 
RSTP takes advantage of a switched network topology by categorizing ports, using a different link 
type to describe each. RSTP takes advantage of the fact that STP logic can be simpliﬁed in some 
cases, based on what is attached to each port, thereby allowing faster convergence. Table 3-8 lists 
the three RSTP link types.
Table 3-8
RSTP Link Types
Link Type
Description
Point-to-point
Connects a switch to one other switch; Cisco switches treat FDX links in which 
Hellos are received as point-to-point links.
Shared
Connects a switch to a hub; the important factor is that switches are reachable off that 
port.
Edge
Connects a switch to a single end-user device.

Optimizing Spanning Tree     79
In most modern LAN designs with no shared hubs, all links would be either the point-to-point 
(a link between two switches) or edge link type. RSTP knows that link-type edge means the port 
is cabled to one device, and the device is not a switch. So, RSTP treats edge links with the same 
logic as Cisco PortFast—in fact, the same spanning-tree portfast command deﬁnes a port as 
link-type edge to RSTP. In other words, RSTP puts edge links into forwarding state 
immediately.
RSTP takes advantage of point-to-point links (which by deﬁnition connect a switch to another 
switch) by asking the other switch about its status. For instance, if one switch fails to receive its 
periodic Hello on a point-to-point link, it will query the neighbor. The neighbor will reply, stating 
whether it also lost its path to the root. It is the same logic as BackboneFast, but using IEEE 
standard messages to achieve the same goal. 
RSTP also redeﬁnes the port states used with 802.1D, in part because the listening state is no 
longer needed. Table 3-9 compares the port states deﬁned by each protocol.
Table 3-9
RSTP and STP Port States
In RSTP, a discarding state means that the port does not forward frames, receive frames, or 
learn source MAC addresses, regardless of whether the port was shut down, failed, or simply 
does not have a reason to forward. Once RSTP decides to transition from discarding to forwarding 
state (for example, a newly selected RP), it goes immediately to the learning state. From 
that point on, the process continues just as it does with 802.1D. RSTP no longer needs the 
listening state because of its active querying to neighbors, which guarantees no loops during 
convergence.
RSTP uses the term port role to refer to whether a port acts as an RP or a DP. RSTP uses the 
RP and DP port roles just as 802.1D does; however, RSTP adds several other roles, as listed in 
Table 3-10.
Administrative State
STP State (802.1D)
RSTP State (802.1w)
Disabled
Disabled
Discarding
Enabled
Blocking
Discarding
Enabled
Listening
Discarding
Enabled
Learning
Learning
Enabled
Forwarding
Forwarding

80     Chapter 3: Spanning Tree Protocol
Table 3-10
RSTP and STP Port Roles
The Alternate Port concept is like the UplinkFast concept—it offers protection against the loss of 
a switch’s RP by keeping track of the Alternate Ports with a path to the root. The concept and 
general operation is identical to UplinkFast, although RSTP might converge more quickly via its 
active messaging between switches.
The Backup Port role has no equivalent with Cisco-proprietary features; it simply provides 
protection against losing the DP attached to a shared link when the switch has another physical 
port attached to the same shared LAN.
You can enable RSTP in a Cisco switch by using the spanning-tree mode rapid-pvst global 
command. Alternatively, you can simply enable 802.1s MST, which by deﬁnition uses 802.1w 
RSTP.
Multiple Spanning Trees: IEEE 802.1s
IEEE 802.1s Multiple Spanning Trees (MST), sometimes referred to as Multiple Instance STP 
(MISTP) or Multiple STP (MSTP), deﬁnes a way to use multiple instances of STP in a network 
that uses 802.1Q trunking. The following are some of the main beneﬁts of 802.1s:
■
Like PVST+, it allows the tuning of STP parameters so that while some ports block for one 
VLAN, the same port can forward in another VLAN.
■
Always uses 802.1w RSTP, for faster convergence.
■
Does not require an STP instance for each VLAN; rather, the best designs use one STP 
instance per redundant path.
If the network consists of all MST-capable switches, MST is relatively simple to understand. A 
group of switches that together uses MST is called an MST region; to create an MST region, the 
switches need to be conﬁgured as follows:
1.
Globally enable MST, and enter MST conﬁguration mode by using the spanning-tree mode 
mst command.
RSTP Role
Deﬁnition
Root Port
Same as 802.1D Root Port.
Designated Port
Same as 802.1D Designated Port.
Alternate Port
Same as the Alternate Port concept in UplinkFast; an alternate Root Port.
Backup Port
A port that is attached to the same link-type shared link as another port on the 
same switch, but the other port is the DP for that segment. The Backup Port is 
ready to take over if the DP fails.

Optimizing Spanning Tree     81
2.
From MST conﬁguration mode, create an MST region name (up to 32 characters) by using 
the name subcommand. 
3.
From MST conﬁguration mode, create an MST revision number by using the revision 
command.
4.
From MST conﬁguration mode, map VLANs to an MST STP instance by using the instance 
command.
The key to MST conﬁguration is to conﬁgure the same parameters on all the switches in the region. 
For instance, if you match VLANs 1–4 to MST instance 1 on one switch, and VLANs 5–8 to 
MST instance 1 on another switch, the two switches will not consider themselves to be in the same 
MST region, even though their region names and revision numbers are identical.
For example, in Figure 3-8, an MST region has been deﬁned, along with connections to non-
MST switches. Focusing on the left side of the ﬁgure, inside the MST region, you really need 
only two instances of STP—one each for roughly half of the VLANs. With two instances, 
the access layer switches will forward on their links to SW1 for one set of VLANs using one MST 
instance, and forward on their links to SW2 for the other set of VLANs using the second 
MST instance.
Figure 3-8
MST Operations
One of the key beneﬁts of MST versus PVST+ is that it requires only one MST instance for a group 
of VLANs. If this MST region had hundreds of VLANs, and used PVST+, hundreds of sets of STP 
3550
Root
Instance1
ISL
.1Q
.1Q
.1Q
.1Q
.1Q
.1Q
.1Q
FWD
Instance1
FWD
Instance2
Root
Instance2
FWD
Instance2
FWD
Instance1
2950
2950
Non-MST Region
MST appears as a
single switch to the
outside world
IST
Topology
Non-MST Region
MST Region
Non-Cisco
Non-Cisco
Non-Cisco
Non-Cisco
3550
3550

82     Chapter 3: Spanning Tree Protocol
messages would be used. With MST, only one set of STP messages is needed for each MST 
instance. 
When connecting an MST region to a non-MST region or to a different MST region, MST makes 
the entire MST region appear to be a single switch, as shown on the right side of Figure 3-8. An 
MST region can guarantee loop-free behavior inside the MST region. To prevent loops over the 
CST links connecting the MST region to a non-MST region, MST participates in an STP instance 
with the switches outside the MST region. This additional STP instance is called the Internal 
Spanning Tree (IST). When participating in STP with the external switches, the MST region is 
made to appear as if it is a single switch; the right side of Figure 3-8 depicts the STP view of the 
left side of the ﬁgure, as seen by the external switches.
Protecting STP
The ﬁnal section in this chapter covers four switch conﬁguration tools that protect STP from 
different types of problems or attacks, depending on whether a port is a trunk or an
access port. 
Root Guard and BPDU Guard: Protecting Access Ports
Network designers probably do not intend for end users to connect a switch to an access port that 
is intended for attaching end-user devices. However, it happens—for instance, someone just may 
need a few more ports in the meeting room down the hall, so they ﬁgure they could just plug a 
small, cheap switch into the wall socket. 
The STP topology can be changed based on one of these unexpected and undesired switches being 
added to the network. For instance, this newly added and unexpected switch might have the lowest 
bridge ID and become the root. To prevent such problems, BPDU Guard and Root Guard can be 
enabled on these access ports to monitor for incoming BPDUs—BPDUs that should not enter 
those ports, because they are intended for single end-user devices. Both features can be used 
together. Their base operations are as follows: 
■
BPDU Guard—Enabled per port; error disables the port upon receipt of any BPDU.
■
Root Guard—Enabled per port; ignores any received superior BPDUs to prevent a switch 
connected to this port from becoming root. Upon receipt of superior BPDUs, this switch puts 
the port in a loop-inconsistent state, ceasing forwarding and receiving frames until the 
superior BPDUs cease.
With BPDU Guard, the port does not recover from the err-disabled state unless additional 
conﬁguration is added. You can tell the switch to change from err-disabled state back to an up state 

Protecting STP     83
after a certain amount of time. With Root Guard, the port recovers when the undesired superior 
BPDUs are no longer received.
UDLD and Loop Guard: Protecting Trunks
Both UniDirectional Link Detection (UDLD) and Loop Guard protect a switch trunk port from 
causing loops. Both features prevent switch ports from errantly moving from a blocking to a 
forwarding state when a unidirectional link exists in the network.
Unidirectional links are simply links for which one of the two transmission paths on the link has 
failed, but not both. This can happen as a result of miscabling, cutting one ﬁber cable, unplugging 
one ﬁber, GBIC problems, or other reasons. Because STP monitors incoming BPDUs to know 
when to reconverge the network, adjacent switches on a unidirectional link could both become 
forwarding, causing a loop, as shown in Figure 3-9.
Figure 3-9
STP Problems with Unidirectional Links
Figure 3-9 shows the ﬁber link between SW1 and SW2 with both cables. SW2 starts in a blocking 
state, but as a result of the failure on SW1’s transmit path, SW2 ceases to hear Hellos from SW1. 
SW2 then transitions to forwarding state, and now all trunks on all switches are forwarding. 
Even with the failure of SW1’s transmit cable, frames will now loop counter-clockwise in the 
network.
UDLD uses two modes to attack the unidirectional link problem. As described next, both modes, 
along with Loop Guard, solve the STP problem shown in Figure 3-9:
■
UDLD—Uses Layer 2 messaging to decide when a switch can no longer receive frames from 
a neighbor. The switch whose transmit interface did not fail is placed into an err-disabled 
state.
■
UDLD aggressive mode—Attempts to reconnect with the other switch (eight times) after 
realizing no messages have been received. If the other switch does not reply to the repeated 
additional messages, both sides become err-disabled.
SW1
DP
FWD
RP
FWD
RP
FWD
Root
DP
FWD
DP
FWD
Tx
Rx
Non-DP
BLK
One Trunk, Two Fiber Cables
Hello Cost 19
SW3
SW2
1
3
2
No more Hellos. I must
be the DP. Let me
transition to forwarding!

84     Chapter 3: Spanning Tree Protocol
■
Loop Guard—When normal BPDUs are no longer received, the port does not go through 
normal STP convergence, but rather falls into an STP loop-inconsistent state.
In all cases, the formerly blocking port that would now cause a loop is prevented from migrating 
to a forwarding state. With both types of UDLD, the switch can be conﬁgured to automatically 
transition out of err-disabled state. With Loop Guard, the switch automatically puts the port back 
into its former STP state when the original Hellos are received again.

Foundation Summary     85
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Topic icon.
Table 3-11 lists the protocols mentioned in this chapter and their respective standards documents. 
Table 3-11
Protocols and Standards for Chapter 3 
Table 3-12 lists the three key timers that impact STP convergence.
Table 3-12
IEEE 802.1D STP Timers
Table 3-13 lists some of the key IOS commands related to the topics in this chapter. (The command 
syntax for switch commands was taken from the Catalyst 3550 Multilayer Switch Command 
Reference, 12.1(20)EA2.) Also refer to Table 3-5 for several other commands.
Name
Standards Body
RSTP 
IEEE 802.1W
MST
IEEE 802.1S
STP
IEEE 802.1D
LACP
IEEE 802.1AD
Dot1Q trunking
IEEE 802.1Q
PVST+
Cisco 
PagP
Cisco 
Timer
Default 
Purpose
Hello
2 sec
Interval at which the root sends Hellos
Forward 
Delay
15 sec
Time that switch leaves a port in listening state and learning state; also 
used as the short CAM timeout timer
Maxage
20 sec
Time without hearing a Hello before believing that the root has failed

86     Chapter 3: Spanning Tree Protocol
Table 3-13
Command Reference for Chapter 3 
Command
Description
spanning-tree mode {mst | pvst | 
rapid-pvst}
Global conﬁg command that sets the STP mode
[no] spanning-tree vlan x
Enables or disables STP inside a particular VLAN when 
using PVST+
spanning-tree vlan vlan-id {forward-time 
seconds | hello-time seconds | max-age 
seconds | priority priority | {root {primary 
| secondary} [diameter net-diameter 
[hello-time seconds]]}}
Global conﬁg command to set a variety of STP 
parameters
spanning-tree vlan x cost y
Interface subcommand used to set interface costs, 
per VLAN
spanning-tree vlan x port-priority y
Interface subcommand used to set port priority, per 
VLAN
channel-group channel-group-number 
mode {auto [non-silent] | desirable 
[non-silent] | on | active | passive}
Interface subcommand that places the interface into a 
port channel, and sets the negotiation parameters
channel-protocol {lacp | pagp}
Interface subcommand to deﬁne which protocol to use 
for EtherChannel negotiation
interface port-channel port-channel-
number
Global command that allows conﬁguration of 
parameters for the EtherChannel
spanning-tree portfast
Interface subcommand that enables PortFast on the 
interface
spanning-tree uplinkfast
Global command that enables UplinkFast
spanning-tree backbonefast
Global command that enables BackboneFast
spanning-tree mst instance-id priority 
priority
Global command used to set the priority of an MST 
instance
spanning-tree mst conﬁguration
Global command that puts user in MST conﬁguration 
mode
show spanning-tree root | brief | summary
EXEC command to show various details about STP 
operation
show spanning-tree uplinkfast | 
backbonefast
EXEC command to show various details about 
UplinkFast and BackboneFast

Memory Builders     87
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
CST, STP, MST, RSTP, Hello timer, Maxage timer, Forward Delay timer, blocking state, 
forwarding state, listening state, learning state, disabled state, alternate state, discarding 
state, backup state, Root Port, Designated Port, superior BPDU, PVST+, UplinkFast, 
BackboneFast, PortFast, Root Guard, BPDU Guard, UDLD, Loop Guard, LACP, PAgP
Refer to the CD-based glossary to check your answers.
Further Reading
The topics in this chapter tend to be covered in slightly more detail in CCNP Switching exam 
preparation books. For more details on these topics, refer to CCNP BCMSN Exam Certiﬁcation 
Guide and CCNP Self-Study: CCNP BCMSN Exam Certiﬁcation Guide, Second Edition, listed in 
the introduction to this book.
Cisco LAN Switching, by Kennedy Clark and Kevin Hamilton, covers STP logic and operations 
in detail.


Part II: TCP/IP
Chapter 4
IP Addressing
Chapter 5
IP Services
Chapter 6
TCP/IP Transport and Application Services

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP 
— Addressing 
— IPv6 
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching exam topics: 
■CIDR
■NAT

C H A P T E R 4
IP Addressing
Complete mastery of IP addressing and subnetting is required for any candidate to have a 
reasonable chance at passing both the CCIE written and lab exam. In fact, even the CCNA exam 
has fairly rigorous coverage of IP addressing and the related protocols. For the CCIE exam, 
understanding these topics is required to answer much deeper questions—for instance, a question 
might ask for the interpretation of the output of a show ip bgp command and a conﬁguration 
snippet to decide what routes would be summarized into a new preﬁx. To answer such questions, 
the basic concepts and math behind subnetting need to be very familiar. 
“Do I Know This Already?” Quiz
Table 4-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
In what subnet does address 192.168.23.197/27 reside? 
a. 192.168.23.0
b. 192.168.23.128
c. 192.168.23.160
d. 192.168.23.192
e. 192.168.23.196
Table 4-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
IP Addressing and Subnetting
1–4
CIDR, Private Addresses, and NAT
5–8
IP Version 6
9
Total Score

92     Chapter 4: IP Addressing
2.
Router1 has four LAN interfaces, with IP addresses 10.1.1.1/24, 10.1.2.1/24, 10.1.3.1/24, and 
10.1.4.1/24. What is the smallest summary route that could be advertised out a WAN link 
connecting Router1 to the rest of the network, if subnets not listed here were allowed to be 
included in the summary? 
a. 10.1.2.0/22
b. 10.1.0.0/22
c. 10.1.0.0/21
d. 10.1.0.0/16
3.
Router1 has four LAN interfaces, with IP addresses 10.22.14.1/23, 10.22.18.1/23, 10.22.12.1/23, 
and 10.22.16.1/23. Which one of the answers lists the smallest summary route(s) that could 
be advertised by R1 without also including subnets not listed in this question? 
a. 10.22.12.0/21
b. 10.22.8.0/21
c. 10.22.8.0/21 and 10.22.16.0/21
d. 10.22.12.0/22 and 10.22.16.0/22
4.
Which two of the following VLSM subnets, when taken as a pair, overlap? 
a. 10.22.21.128/26
b. 10.22.22.128/26
c. 10.22.22.0/27
d. 10.22.20.0/23
e. 10.22.16.0/22
5.
Which of the following protocols or tools includes a feature like route summarization, plus 
administrative rules for global address assignment, with a goal of reducing the size of Internet 
routing tables? 
a. Classless interdomain routing
b. Route summarization
c. Supernetting
d. Private IP addressing

“Do I Know This Already?” Quiz     93
6.
Which of the following terms refers to a NAT feature that allows for signiﬁcantly fewer 
IP addresses in the enterprise network as compared with the required public registered 
IP addresses? 
a. Static NAT
b. Dynamic NAT
c. Dynamic NAT with overloading
d. PAT
e. VAT
7.
Consider an enterprise network using private class A network 10.0.0.0, and using NAT to 
translate to IP addresses in registered class C network 205.1.1.0. Host 10.1.1.1 has an open 
www session to Internet web server 198.133.219.25. Which of the following terms refers to 
the destination address of a packet, sent by the web server back to the client, when the packet 
has not yet made it back to the enterprise’s NAT router? 
a. Inside Local
b. Inside Global
c. Outside Local
d. Outside Global
8.
Router1 has its fa0/0 interface, address 10.1.2.3/24, connected to an Enterprise network. 
Router1’s S0/1 interface connects to an ISP, with the interface using a publicly-registered 
IP address of 171.1.1.1/30,. Which of the following commands could be part of a valid NAT 
overload conﬁguration, with 171.1.1.1 used as the public IP address? 
a. ip nat inside source list 1 int s0/1 overload
b. ip nat inside source list 1 pool fred overload
c. ip nat inside source list 1 171.1.1.1 overload
d. None of the answers is correct.
9.
Which of the following show a legal equivalent representation of the IPv6 address 
2000:0000:0000:0BEA:0000:0000:FE11:1111? 
a. 2000:0:0:BEA:0:0:FE11:1111
b. 2000::BEA:0:0:FE11:1111
c. 2000::BEA::FE11:1111
d. 2:0:0:BEA::FE11:1111
e. 2000:0:0:BEA::FE11:1111

94     Chapter 4: IP Addressing
Foundation Topics
IP Addressing and Subnetting
You need a postal address to receive letters; similarly, computers must use an IP address to be able 
to send and receive data using the TCP/IP protocols. Just as the postal service dictates the format 
and meaning of a postal address to aid the efﬁcient delivery of mail, the TCP/IP protocol suite 
imposes some rules about IP address assignment so that routers can efﬁciently forward packets 
between IP hosts. This chapter begins with coverage of the format and meaning of IP addresses, 
with required consideration for how they are grouped to aid the routing process.
IP Addressing and Subnetting Review
First, here’s a quick review of some of the core facts about IPv4 addresses that should be fairly 
familiar to you:
■
32-bit binary number.
■
Written in “dotted decimal” notation (for example, 1.2.3.4), with each decimal octet 
representing 8 bits.
■
Addresses are assigned to network interfaces, so computers or routers with multiple interfaces 
have multiple IP addresses.
■
A computer with an IP address assigned to an interface is an IP host.
■
A group of IP hosts that are not separated from each other by an IP router are in the same 
grouping.
■
These groupings are called networks, subnets, or preﬁxes, depending on the context.
■
IP hosts separated from another set of IP hosts by a router must be in separate groupings 
(network/subnet/preﬁx).
IP addresses may be analyzed using classful or classless logic, depending on the situation. 
Classful logic simply means that the main class A, B, and C rules from RFC 791 are considered. 
The next several pages present a classful view of IP addresses, as reviewed in Table 4-2.
With classful addressing, class A, B, and C networks can be identiﬁed as such by their ﬁrst several 
bits (shown in the last column of Table 4-1) or by the range of decimal values for their ﬁrst octets. 
Also, each class A, B, or C address has two parts (when not subnetted): a network part and a host 
part. The size of each is implied by the class, and can be stated explicitly using the default mask 

IP Addressing and Subnetting     95
for that class of network. For instance, mask 255.0.0.0, the default mask for class A networks, has 
8 binary 1s and 24 binary 0s, representing the size of the network and host parts, respectively.
Subnetting a Classful Network Number
With classful addressing,  and no subnetting, an entire class A, B, or C network is needed on each 
individual instance of a data link. For example, Figure 4-1 shows a sample internetwork, with 
dashed-line circles representing the set of hosts that must be in the same IP network—in this case 
requiring three networks. Figure 4-1 shows two options for how IP addresses may be assigned and 
grouped together for this internetwork topology.
Figure 4-1
Sample Internetwork with Two Alternatives for Address Assignment—Without and With Subnetting
Table 4-2
Classful Network Review
KEY 
POINT
Class of 
Address
Size of Network 
and Host Parts
of the Addresses
Range of 
First Octet 
Values
Default Mask 
for Each Class 
of Network
Identifying Bits 
at Beginning of 
Address
A
8/24
1–126
255.0.0.0
0
B
16/16
128–191
255.255.0.0
10
C
24/8
192–223
255.255.255.0
110
D
—
224–239
—
1110
E
—
240–255
—
1111
R3
R1
SW1
172.31.103.41
E0/0
Client3
Network 172.31.0.0
Network 130.2.0.0
Option 1: Use Classful Networks for Each Group
Option 2: Use Subnets of One Classful Network
Network 8.0.0.0
Subnet 172.31.103.0
255.255.255.0
Subnet 172.31.13.0
255.255.255.0
Subnet 172.31.11.0
255.255.255.0

96     Chapter 4: IP Addressing
Option 1 uses three classful networks; however, it wastes a lot of IP addresses. For example, all 
hosts in class A network 8.0.0.0 must reside on the LAN on the right side of the ﬁgure. 
Of course, the much more reasonable alternative is to reserve one classful IP network 
number, and use subnetting to subdivide that network into at least three subdivisions, called 
subnets. Option 2 (bottom of Figure 4-1) shows how to subdivide a class A, B, or C network into 
subnets. 
To create subnets, the IP addresses must have three ﬁelds instead of just two—the network, subnet, 
and host. When using classful logic to interpret IP addresses, the size of the network part is still 
deﬁned by classful rules—either 8, 16, or 24 bits based on class. To create the subnet ﬁeld, the host 
ﬁeld is shortened, as shown in Figure 4-2.
Figure 4-2
Formats of IP Addresses when Subnetting
To determine the size of each ﬁeld in a subnetted IP address, you can follow the three easy steps 
shown in Table 4-3. Note that Figure 4-1 also showed alternative addressing for using subnets, 
with the last column in Table 4-3 showing the size of each ﬁeld for that particular example, which 
used class B network 172.31.0.0, mask 255.255.255.0.
NOTE
The term internetwork refers to a collection of computers and networking hardware; 
because TCP/IP discussions frequently use the term network to refer to a classful class A, B, or C 
IP network, this book uses the term internetwork to refer to an entire network topology, as shown 
in Figure 4-1.
Table 4-3
Finding the Size of the Network, Subnet, and Host Fields in an IP Address
KEY 
POINT
Name of Part of 
the Address
Process to Find Its Size
Size per Figure 4-1 Example
Network
8, 16, or 24 bits based on class rules
16
Subnet
32 minus network and host bits
8
Host
Equal to the number of binary 0s in the 
mask
8
Network
Host
Class A
8
x
Subnet
24 – x
Network
Host
Class B
16
Subnet
16 – x
x
Host
Network
Class C
x
Subnet
8 – x
24
KEY 
POINT

IP Addressing and Subnetting     97
Comments on Classless Addressing
The terms classless and classful can be applied to three popular topics that are all related to IP. 
This chapter explains classful and classless IP addressing, which are relatively simple concepts. Two 
other chapters explain the other uses of the terms classless and classful: Chapter 7, “IP Forwarding 
(Routing),” describes classless/classful routing, and Chapter 8, “RIP Version 2,” covers classless/
classful routing protocols.
Classless IP addressing, simply put, means that class A, B, and C rules are ignored. Each address 
is viewed as a two-part address, formally called the preﬁx and the host parts of the address. The 
preﬁx simply states how many of the beginning bits of an IP address identify or deﬁne the group. 
It is the same idea as using the combined network and subnet parts of an address to identify a 
subnet. All the hosts with identical preﬁxes are in effect in the same group, which can be called a 
subnet or a preﬁx. 
Just as a classful subnet must be listed with the subnet mask to know exactly which addresses 
are in the subnet, a preﬁx must be listed with its preﬁx length. The preﬁx itself is a dotted-
decimal number. It is typically followed by a / symbol, after which the preﬁx length is listed. 
The preﬁx length is a decimal number that denotes the length (in bits) of the preﬁx. For example, 
172.31.13.0/24 means a preﬁx of 172.31.13.0 and a preﬁx length of 24 bits. Also, the preﬁx can 
be implied by a subnet mask, with the number of 1s in the binary version of the mask implying 
the preﬁx length. 
Classless and classful addressing are mainly just two ways to think about IP address formats. For 
the exam, make sure to understand both perspectives and the terminology used by each.
Subnetting Math 
Knowing how to interpret the meaning of addresses and masks, routes and masks in the routing 
table, addresses and masks in ACLs, and conﬁgure route-ﬁltering are all very important topics 
for the CCIE Routing and Switching written and lab exams. This section covers the binary math 
brieﬂy, with coverage of some tricks to do the math quickly without binary math. Several subsequent 
chapters cover the conﬁguration details of features that require this math.
Dissecting the Component Parts of an IP Address
First, deducing the size of the three parts (classful view) or two parts (classless view) of an IP 
address is important, because it allows you to analyze information about that subnet and other 
subnets. Every internetwork requires some number of subnets, and some number of hosts per 
subnet. Analyzing the format of an existing address, based on the mask or preﬁx length, allows 

98     Chapter 4: IP Addressing
you to determine whether enough hosts per subnet exist, or whether enough subnets exist to 
support the number of hosts. The following list summarizes some of the common math facts about 
subnetting related to the format of IP addresses:
■
If a subnet has been deﬁned with y host bits, there are 2y – 2 valid usable IP addresses in the 
subnet, because two numeric values are reserved.
■
One reserved IP address in each subnet is the subnet number itself. This number, by deﬁnition, 
has binary 0s for all host bits. This number represents the subnet, and is typically seen in 
routing tables.
■
The other reserved IP address in the subnet is the subnet broadcast address, which by deﬁnition 
has binary 1s for all host bits. This number can be used as a destination IP address to send 
a packet to all hosts in the subnet.
■
When you are thinking classfully, if the mask implies x subnet bits, then 2x possible 
subnets exist for that classful network, assuming the same mask is used throughout the 
network.
■
Although there are no truly reserved values for the subnet numbers, two (lowest and highest 
values) may be discouraged from use in some cases:
— Zero subnet—The subnet ﬁeld is all binary 0s; in decimal, each zero subnet is the 
exact same dotted-decimal number as the classful network number, potentially 
causing confusion.
— Broadcast subnet—The subnet ﬁeld is all binary 1s; in decimal, this subnet’s 
broadcast address is the same as the network-wide broadcast address, potentially 
causing confusion.
In Cisco routers, by default, zero subnets and broadcast subnets work ﬁne. You can disable the use 
of the zero subnet with the no ip subnet-zero global command. The only time that using the zero 
subnet typically causes problems is when classful routing protocols are used.
Finding Subnet Numbers and Valid Range of IP Addresses—Binary 
When examining an IP address and mask, the process of ﬁnding the subnet number, the broadcast 
address, and the range of valid IP addresses is as fundamental to networking as is addition and 
subtraction for advanced math. Possibly more so for the CCIE Routing and Switching lab exam, 
mastery of the math behind subnetting, which is the same basic math behind route summarization 
and ﬁltering, will improve your speed completing complex conﬁgurations on the exam.
The range of valid IP addresses in a subnet begins with the number that is one larger than the 
subnet number, and ends with the address that is one smaller than the broadcast address for the 
KEY 
POINT

IP Addressing and Subnetting     99
subnet. So, to determine the range of valid addresses, just calculate the subnet number and 
broadcast address, which can be done as follows:
■
To derive the subnet number—Perform a bit-wise Boolean AND between the IP address 
and mask
■
To derive the broadcast address—Change all host bits in the subnet number from 0s to 1s
A bitwise Boolean AND means that you place two long binary numbers on top of each other, 
and then AND the two bits that line up vertically. (A Boolean AND results in a binary 1 only if 
both bits are 1; otherwise, the result is 0.) Table 4-4 shows an easy example based on subnet 
172.31.103.0/24 from Figure 4-1.
Probably most everyone reading this already knew that the decimal subnet number and broadcast 
addresses shown in Table 4-4 were correct, even without looking at the binary math. The important 
part is to recall the binary process, and practice until you can conﬁdently and consistently ﬁnd the 
answer without using any binary math at all. The only parts of the math that typically trip people 
up are the binary to decimal and decimal to binary conversions. When working in binary, keep in mind 
that you will not have a calculator for the written exam, and that when converting to decimal, 
you always convert 8 bits at a time—even if an octet contains some preﬁx bits and some host bits. 
(Appendix D, “Decimal to Binary Conversion Table,” contains a conversion table for your reference.)
Decimal Shortcuts to Find the Subnet Number and Valid Range of IP Addresses
Many of the IP addressing and routing related problems on the exam come back to the ability to 
solve a couple of classic basic problems. One of those problems runs as follows:
Given an IP address and mask (or preﬁx length), determine the subnet number/preﬁx, broad-
cast address, and range of valid IP addresses.
If you personally can already solve such problems with only a few seconds’ thought, even with 
tricky masks, then you can skip this section of the chapter. If you cannot solve such questions 
Table 4-4
Binary Math to Calculate the Subnet Number and Broadcast Address
Address
172.31.103.41
1010 1100 0001 1111 0110 0111 0010 
1001
Mask
255.255.255.0
1111 1111 1111 1111 1111 1111 0000 
0000
Subnet Number (Result of AND)
172.31.103.0
1010 1100 0001 1111 0110 0111 0000 
0000
Broadcast
172.31.103.255
1010 1100 0001 1111 0110 0111 1111 
1111
KEY 
POINT

100     Chapter 4: IP Addressing
easily and quickly, this section can help you learn some math shortcuts that allow you to ﬁnd the 
answers without needing to use any Boolean math. 
To solve the “ﬁnd the subnet/broadcast/range of addresses” type of problem, at least three of the 
four octets should have pretty simple math. For example, with a nice, easy mask like 255.255.255.0, 
the logic used to ﬁnd the subnet number and broadcast address is intuitive to most people. The 
more challenging cases occur when the mask or preﬁx does not divide the host ﬁeld at a byte 
boundary. For instance, the same IP address 172.31.103.41, with mask 255.255.252.0 (preﬁx /22), 
is actually in subnet 172.31.100.0. Working with the third octet in this example is the hard part, 
because the mask value for that octet is not 0 or 255; for the upcoming process, this octet is called 
the interesting octet. The following process ﬁnds the subnet number, using decimal math, even 
with a challenging mask:
Step 1
Find the mask octets of value 255; copy down the same octets from the IP 
address.
Step 2
Find the mask octets of value 0; write down 0s for the same octets.
Step 3
If one octet has not yet been ﬁlled in, that octet is the interesting octet. Find 
the subnet mask’s value in the interesting octet, and subtract it from 256. 
Call this number the “magic number.”
Step 4
Find the integer multiple of the magic number that is closest to, but not 
larger than, the interesting octet’s value. 
An example certainly helps, as shown in Table 4-5, with 172.31.103.41, mask 255.255.252.0.
The table separates the address into its four component octets. In this example, the ﬁrst, second, 
and fourth octets of the subnet number are easily found from Steps 1 and 2 in the process. Because 
the interesting octet is the third octet, the magic number is 256 – 252, or 4. The integer multiple 
of 4, closest to 103 but not exceeding 103, is 100—making 100 the subnet number’s value in the 
third octet. (Note that you can use this same process even with an easy mask, and Steps 1 and 2 
will give you the complete subnet number.)
NOTE
The next several pages of this chapter describe some algorithms you can use to ﬁnd 
many important details related to IP addressing, without needing to convert to and from binary. 
In my experience, some people simply work better performing the math in binary until the 
answers simply start popping into their heads. Others ﬁnd that the decimal shortcuts are more 
effective. 
If you use the decimal shortcuts, it is best to practice them until you no longer really use the 
exact steps listed in this book; rather, the processes should become second nature. To that end, 
CD-only Appendix E, “IP Addressing Practice,” lists several practice problems for each of the 
algorithms presented in this chapter.

IP Addressing and Subnetting     101
A similar process can be used to determine the subnet broadcast address. This process assumes 
that the mask is tricky. The detailed steps are as follows:
Step 1
Start with the subnet number.
Step 2
Decide which octet is interesting, based on which octet of the mask does 
not have a 0 or 255.
Step 3
For octets to the left of the interesting octet, copy down the subnet number’s 
values into the place where you are writing down the broadcast address.
Step 4
For any octets to the right of the interesting octet, write down 255 for the 
broadcast address.
Step 5
Calculate the magic number: ﬁnd the subnet mask’s value in the interesting 
octet and subtract it from 256.
Step 6
Take the subnet number’s interesting octet value, add the magic number to it, 
and subtract 1. Fill in the broadcast address’s interesting octet with this number.
Table 4-6 shows the 172.31.103.41/22 example again, using this process to ﬁnd the subnet 
broadcast address.
Table 4-5
Quick Math to Find the Subnet Number—172.31.103.41, 255.255.252.0
Octet
Comments
1
2
3
4
Address
172
31
103
41
Mask
255
255
252
0
Equivalent to /22.
Subnet number results after 
Steps 1 and 2
172
31
0
Magic number will be 256 – 252 = 4.
Subnet number after 
completing the interesting octet 
172
31
100
0
100 is the multiple of 4 closest to, but 
not exceeding, 103.
Table 4-6
Quick Math to Find the Broadcast Address—172.31.103.41, 255.255.252.0
Octet
Comments
1
2
3
4
Subnet number (per Step 1)
172
31
100
0
Mask (for reference)
255
255
252
0
Equivalent to /22
Results after Steps 1 to 4
172
31
255
Magic number will be 256 – 252 = 4
Subnet number after 
completing the empty octet
172
31
103
255
Subnet’s third octet (100), plus magic 
number (4), minus 1 is 103

102     Chapter 4: IP Addressing
Determining All Subnets of a Network—Binary
Another common question, typically simply a portion of a more challenging question on the CCIE 
written exam, relates to ﬁnding all subnets of a network. The base underlying question might be 
as follows: 
Given a particular class A, B, or C network, and a mask/preﬁx length used on all subnets of 
that network, what are the actual subnet numbers?
The answers can be found using binary or using a simple decimal algorithm. This section ﬁrst 
shows how to answer the question using binary, using the following steps. Note that the steps 
include details that are not really necessary for the math part of the problem; these steps are mainly 
helpful for practicing the process.
Step 1
Write down the binary version of the classful network number; that value 
is actually the zero subnet as well.
Step 2
Draw two vertical lines through the number, one separating the network 
and subnet parts of the number, the other separating the subnet and host 
part.
Step 3
Calculate the number of subnets, including the zero and broadcast subnet, 
based on 2y, where y is the number of subnet bits.
Step 4
Write down y-1 copies of the binary network number below the ﬁrst one, 
but leave the subnet ﬁeld blank.
Step 5
Using the subnet ﬁeld as a binary counter, write down values, top to bottom, 
in which the next value is 1 greater than the previous.
Step 6
Convert the binary numbers, 8 bits at a time, back to decimal.
This process takes advantage of a couple of facts about the binary form of IP subnet numbers:
■
All subnets of a classful network have the same value in the network portion of the subnet 
number.
■
All subnets of any classful network have binary 0s in the host portion of the subnet number.
Step 4 in the process simply makes you write down the network and host parts of each subnet 
number, because those values are easily predicted. To ﬁnd the different subnet numbers, you then 
NOTE
If you have read the last few pages to improve your speed at dissecting a subnet without 
requiring binary math, it is probably a good time to pull out the CD in the back of the book. CD-
only Appendix E, “IP Addressing Practice,” contains several practice problems for ﬁnding the 
subnet and broadcast address, as well as for many other math related to IP addressing. 
KEY 
POINT

IP Addressing and Subnetting     103
just need to discover all possible different combinations of binary digits in the subnet ﬁeld, because 
that is the only part of the subnet numbers that differs from subnet to subnet.
For example, consider the same class B network 172.31.0.0, with Static Length Subnet Masking 
(SLSM) assumed, and a mask of 255.255.224.0. Note that this example uses 3 subnet bits, so there 
will be 23 subnets. Table 4-7 lists the example.
At this point, you have the zero subnet recorded at the top, and you are ready to use the subnet ﬁeld 
(the missing bits in the table) as a counter to ﬁnd all possible values. Table 4-8 completes the process.
Table 4-7
Binary Method to Find All Subnets—Steps 1 Through 4
Octet
Subnet
1
2
3
4
Network number/zero subnet
10101100
000 11111
000     00000
00000000
2nd subnet
10101100
000 11111
    
   00000
00000000
3rd subnet
10101100
000 11111
    
   00000
00000000
4th subnet
10101100
000 11111
    
   00000
00000000
5th subnet
10101100
000 11111
    
   00000
00000000
6th subnet
10101100
000 11111
   
    00000
00000000
7th subnet
10101100
000 11111
   
    00000
00000000
8th subnet (2y = 8); broadcast subnet
10101100
000 11111
    
   00000
00000000
Table 4-8
Binary Method to Find All Subnets—Step 5
Octet
Subnet
1
2
3
4
Network number/zero subnet
10101100
00011111
000    00000
00000000
2nd subnet
10101100
00011111
001    00000
00000000
3rd subnet
10101100
00011111
010    00000 
00000000
4th subnet
10101100
00011111
011    00000 
00000000
5th subnet
10101100
00011111
100    00000 
00000000
6th subnet
10101100
00011111
101    00000 
00000000
7th subnet
10101100
00011111
110    00000 
00000000
8th subnet (2y = 8); broadcast subnet
10101100
00011111
111    00000 
00000000

104     Chapter 4: IP Addressing
The ﬁnal step to determine all subnets is simply to convert the values back to decimal. Take care 
to always convert 8 bits at a time. In this case, you end up with the following subnets: 172.31.0.0, 
172.31.32.0, 172.31.64.0, 172.31.96.0, 172.31.128.0, 172.31.160.0, 172.31.192.0, and 172.31.224.0.
Determining All Subnets of a Network—Decimal
You may have noticed the trend in the third octet values in the subnets listed in the previous 
paragraph. When assuming SLSM, the subnet numbers in decimal do have a regular increment 
value, which turns out to be the value of the magic number. For example, instead of the binary 
math in the previous section, you could have thought the following:
■
The interesting octet is the third octet.
■
The magic number is 256 – 224 = 32.
■
172.31.0.0 is the zero subnet, because it is the same number as the network number.
■
The other subnet numbers are increments of the magic number inside the interesting octet.
If that logic already clicks in your head, you can skip to the next section in this chapter. If not, the 
rest of this section outlines an decimal algorithm that takes a little longer pass at the same general 
logic. First, the question and the algorithm assume that the same subnet mask is used on all subnets 
of this one classful network—a feature sometimes called Static Length Subnet Masking (SLSM). 
In contrast, Variable Length Subnet Masking (VLSM) means that different masks are used in the 
same classful network. The algorithm assumes a subnet ﬁeld of 8 bits or less just to keep the steps 
uncluttered; for longer subnet ﬁelds, the algorithm can be easily extrapolated.
Step 1
Write down the classful network number in decimal.
Step 2
For the ﬁrst (lowest numeric) subnet number, copy the entire network 
number. That is the ﬁrst subnet number, and is also the zero subnet.
Step 3
Decide which octet contains the entire subnet ﬁeld; call this octet the 
interesting octet. (Remember, this algorithm assumes 8 subnet bits or less, 
so the entire subnet ﬁeld will be in a single interesting octet.)
Step 4
Calculate the magic number by subtracting the mask’s interesting octet 
value from 256.
Step 5
Copy down the previous subnet number’s noninteresting octets onto the 
next line as the next subnet number; only one octet is missing at this point.
Step 6
Add the magic number to the previous subnet’s interesting octet, and write 
that down as the next subnet number’s interesting octet, completing the next 
subnet number.
KEY 
POINT

IP Addressing and Subnetting     105
Step 7
Repeat Steps 5 and 6 until the new interesting octet is 256. That subnet is 
not valid. The previously calculated subnet is the last valid subnet, and also 
the broadcast subnet.
For example, consider the same class B network 172.31.0.0, with SLSM assumed, and a mask of 
255.255.224.0. Table 4-9 lists the example.
You can use this process repeatedly as needed until the answers start jumping out at you without 
the table and step-wise algorithm. For more practice, refer to CD-only Appendix E.
VLSM Subnet Allocation 
So far in this chapter, most of the discussion has been about examining existing addresses and 
subnets. Before deploying new networks, or new parts of a network, you must give some thought 
to the ranges of IP addresses to be allocated. Also, when assigning subnets for different locations, 
you should assign the subnets with thought for how routes could then be summarized. This section 
covers some of the key concepts related to subnet allocation and summarization. (This section 
focuses on the concepts behind summarization; the conﬁguration of route summarization 
is routing protocol–speciﬁc and thus is covered in the individual chapters covering routing 
protocols.)
Table 4-9
Subnet List Chart—172.31.0.0/255.255.224.0 
Octet
Comments
1
2
3
4
Network number
172
31
0
0
Step 1 from the process.
Mask
255
255
224
0
Magic number is 256 – 224 = 32.
Subnet zero
172
31
0
0
Step 2 from the process.
First subnet
172
31
32
0
Steps 5 and 6; previous interesting octet 0, 
plus magic number (32).
Next subnet
172
31
64
0
32 plus magic number is 64.
Next subnet
172
31
96
0
64 plus magic number is 96.
Next subnet
172
31
128
0
96 plus magic number is 128.
Next subnet
172
31
160
0
128 plus magic number is 160.
Next subnet
172
31
192
0
160 plus magic number is 192.
Last subnet (broadcast)
172
31
224
0 
The broadcast subnet in this case.
Invalid; easy-to-recognize 
stopping point
172
31
256
0
256 is out of range; when writing this one 
down, note that it is invalid, and that the 
previous one is the last valid subnet.

106     Chapter 4: IP Addressing
Many organizations purposefully use SLSM to simplify operations. Additionally, many internetworks 
also use private IP network 10.0.0.0, with an SLSM preﬁx length of /24, and use NAT for connecting 
to the Internet. By using SLSM, particularly with a nice, easy preﬁx like /24, operations and 
troubleshooting can be a lot easier.
In some cases, VLSM is required or preferred when allocating addresses. VLSM is typically 
chosen when the address space is constrained to some degree. The VLSM subnet assignment 
strategy covered here complies with the strategy you may remember from the Cisco BSCI course 
or from reading the Cisco Press CCNP Routing certiﬁcation books.
Similar to when assigning subnets with SLSM, you should use an easily summarized block of 
addresses for a new part of the network. Because VLSM network addresses are likely constrained 
to some degree, you should choose the speciﬁc subnets wisely. The general rules for choosing 
wisely are as follows:
Step 1
Determine the shortest preﬁx length (in other words, the largest block) 
required.
Step 2
Divide the available address block into equal-sized preﬁxes based on the 
shortest preﬁx from Step 1.
Step 3
Allocate the largest required subnets/preﬁxes from the beginning of the IP 
address block, leaving some equal-sized unallocated address blocks at the 
end of the original large address block.
Step 4
Choose an unallocated block that you will further subdivide by repeating 
the ﬁrst three steps, using the shortest required preﬁx length (largest 
address block) for the remaining subnets.
Step 5
When allocating very small address blocks for use on links between 
routers, consider using subnets at the end of the address range. This leaves 
the largest consecutive blocks available in case future requirements change.
For instance, imagine that a network engineer plans a new site installation. He allocates 
the 172.31.28.0/23 address block for the new site, expecting to use the block as a single 
summarized route. When planning, the engineer then subdivides 172.31.28.0/23 per the subnet 
requirements for the new installation, as shown in Figure 4-3. The ﬁgure shows three iterations 
through the VLSM subnet assignment process, because the requirements call for three different 
subnet sizes. Each iteration divides a remaining block into equal sizes, based on the preﬁx 
requirements of the subnets allocated at that step. Note that the small /30 preﬁxes were allocated 
from the end of the address range, leaving the largest possible consecutive address range for 
future growth.
KEY 
POINT

IP Addressing and Subnetting     107
Figure 4-3
Example of VLSM Subnet Allocation Process
Route Summarization Concepts 
The ability to recognize and deﬁne how to most efﬁciently summarize existing address ranges is 
an important skill on both the written and lab exams. For the written exam, the question may not 
be as straightforward as, “What is the most efﬁcient summarization of the following subnets?” 
Rather, the math required for such a question might simply be part of a larger question. Certainly, 
such math is required for the lab exam. This section looks at the math behind ﬁnding the best 
summarization; other chapters cover speciﬁc conﬁguration commands.
Good IP address assignment practices should always consider the capabilities for route summarization. 
For instance, if a division of a company needs 15 subnets, an engineer needs to allocate those 15 subnets 
from the unused portions of the address block available to that internetwork. However, assigning 
subnets 10.1.101.0/24 through 10.1.115.0/24 would be a poor choice, because those do not easily 
summarize. Rather, allocate a range of addresses that can be easily summarized into a single route. 
For instance, subnets 10.1.96.0/24 through 10.1.110.0/24 can be summarized as a single 10.1.96.0/20 
route, making those routes a better choice.
There are two main ways to think of the word “best” when you are looking for the “best summarization”:
■
Inclusive summary routes—A single summarized route that is as small a range of addresses 
as possible, while including all routes/subnets shown, and possibly including subnets that do 
not currently exist.
172.31.28.0.0/23 (172.31.28.0 Through 172.31.29.255)
Requirements:
3 /25’s
2 /27’s
3 /30’s
Allocated
Pass 1: /25 prefixes
Block 172.31.28.0/23
Allocated
Allocated
Unallocated
172.31.28.0/25
172.31.28.1 –
172.31.28.126
172.31.28.128/25
172.31.28.129 –
172.31.28.254
172.31.29.0/25
172.31.29.1 –
172.31.29.126
172.31.29.128/25
172.31.29.129 –
172.31.29.254
Allocated
Pass 2: /27 prefixes
Block 172.31.29.128/25
Allocated
Unallocated Unallocated
172.31.29.128/27
172.31.29.160/27
172.31.29.192/27
172.31.29.224/27
Step 3: /30 prefixes
Allocate High End:
172.31.29.252/30,
172.31.29.248/30,
172.31.29.244/30
Allocated
Unallocated
KEY 
POINT

108     Chapter 4: IP Addressing
■
Exclusive summary routes—As few as possible summarized routes that include all to-be-
summarized address ranges, but excluding all other routes/subnets.
For instance, with the VLSM example in Figure 4-3, the network engineer purposefully planned 
so that an inclusive summary of 172.31.28.0/23 could be used. Even though not all subnets are 
yet allocated from that address range, the engineer is likely saving the rest of that address range 
for future subnets at that site, so summarizing using an inclusive summary is reasonable. In other 
cases, typically when trying to summarize routes in an internetwork for which summarization was 
not planned, the summarization must exclude routes that are not explicitly listed, because those 
address ranges may actually be used in another part of the internetwork.
Finding Inclusive Summary Routes—Binary
Finding the best inclusive summary lends itself to a formal binary process, as well as to a formal 
decimal process. The binary process runs as follows: 
Step 1
Write down the binary version of each component subnet, one on top of the other.
Step 2
Inspect the binary values to ﬁnd how many consecutive bits have the exact 
same value in all component subnets. That number of bits is the preﬁx length.
Step 3
Write a new 32-bit number at the bottom of the list by copying y bits from 
the prior number, y being the preﬁx length. Write binary 0s for the remaining 
bits. This is the inclusive summary.
Step 4
Convert the new number to decimal, 8 bits at a time.
Table 4-10 shows an example of this process, using four routes, 172.31.20.0, .21.0, .22.0, and .23.0, 
all with preﬁx /24. The second example adds 172.31.24.0 to that same list.
NOTE
The terms inclusive summary, exclusive summary, and candidate summary are simply 
terms I invented for this book.
Table 4-10
Example of Finding the Best Inclusive Summary—Binary
Octet 1
Octet 2
Octet 3
Octet 4
172.31.20.0/24
10101100
00011111
000101      00
00000000
172.31.21.0/24
10101100
00011111
000101      01
00000000
172.31.22.0/24
10101100
00011111
000101      10
00000000
172.31.23.0/24
10101100
00011111
000101      11
00000000
Preﬁx length: 22
Inclusive summary
10101100
00011111
000101      00
00000000

IP Addressing and Subnetting     109
The trickiest part is Step 2, in which you have to simply look at the binary values and ﬁnd the point at 
which the bits are no longer equal. You can shorten the process by, in this case, noticing that all 
component subnets begin with 172.31, meaning that the ﬁrst 16 bits will certainly have the same values.
Finding Inclusive Summary Routes—Decimal
To ﬁnd the same inclusive summary using only decimal math, use the following process. The 
process works just ﬁne with variable preﬁx lengths and nonconsecutive subnets. 
Step 1
Count the number of subnets; then, ﬁnd the smallest value of y, such that 
2y => that number of subnets. 
Step 2
For the next step, use a preﬁx length based on the longest preﬁx length of 
the component subnets, minus y.
Step 3
Pretend that the lowest numeric subnet number in the list of component 
subnets is an IP address. Using the new, smaller preﬁx from Step 2, 
calculate the subnet number in which this pretend address resides.
Step 4
Repeat Step 3 for the largest numeric component subnet number and the 
same preﬁx. If it is the same subnet derived as in Step 3, the resulting subnet 
is the best summarized route, using the new preﬁx.
Step 5
If Steps 3 and 4 do not yield the same resulting subnet, repeat Steps 3 and 
4 with another new preﬁx length of 1 less than the last preﬁx length.
Table 4-11 shows two examples of the process. The ﬁrst example has four routes, 172.31.20.0, 
.21.0, .22.0, and .23.0, all with preﬁx /24. The second example adds 172.31.24.0 to that same list.
Table 4-11
Example of Finding the Best Summarizations
Step
Range of .20.0, .21.0, .22.0,
and .23.0, /24
Same Range, Plus 172.31.24.0
Step 1 
22 = 4, y = 2
23 = 8, y = 3
Step 2 
24 – 2 = 22
24 – 3 = 21
Step 3 
Smallest subnet 172.31.20.0, with /22, 
yields 172.31.20.0/22
Smallest subnet 172.31.20.0, with /21, 
yields 172.31.16.0/21
Step 4
Largest subnet 172.31.23.0, with /22, 
yields 172.31.20.0/22 
Largest subnet 172.31.24.0, with /22, 
yields 172.31.24.0/21
Step 5
—
21 – 1 = 20; new preﬁx
Step 3, 2nd time
—
172.31.16.0/20
Step 4, 2nd time
—
172.31.16.0/20; the same as prior step, 
so that is the answer

110     Chapter 4: IP Addressing
With the ﬁrst example, Steps 3 and 4 yielded the same answer, which means that the best inclusive 
summary had been found. With the second example, a second pass through the process was 
required. CD-only Appendix E contains several practice problems to help you develop speed and 
make this process second nature.
Finding Exclusive Summary Routes—Binary
A similar process, listed next, can be used to ﬁnd the exclusive summary. Keep in mind that the 
best exclusive summary can be comprised of multiple summary routes. Once again, to keep it 
simple, the process assumes SLSM. 
Step 1
Find the best inclusive summary route; call it a candidate exclusive 
summary route.
Step 2
Determine if the candidate summary includes any address ranges it should 
not. To do so, compare the summary’s implied address range with the implied 
address ranges of the component subnets.
Step 3
If the candidate summary only includes addresses in the ranges implied by 
the component subnets, the candidate summary is part of the best exclusive 
summarization of the original component subnets.
Step 4
If instead the candidate summary includes some addresses that match the 
candidate summary routes and some addresses that do not, split the current 
candidate summary in half, into two new candidate summary routes, each 
with a preﬁx 1 longer than before.
Step 5
If the candidate summary only includes addresses outside the ranges implied 
by the component subnets, the candidate summary is not part of the best 
exclusive summarization, and it should not be split further.
Step 6
Repeat Steps 2 through 4 for each of the two possible candidate summary 
routes created at Step 4.
For example, take the same ﬁve subnets used with the inclusive example—172.31.20.0/24, .21.0, 
.22.0, .23.0, and .24.0. The best inclusive summary is 172.31.16.0/20, which implies an address range 
of 172.31.16.0 to 172.31.31.255—clearly, it includes more addresses than the original ﬁve subnets. 
So, repeat the process of splitting the summary in half, and repeating, until summaries are found that 
do not include any unnecessary address ranges. Figure 4-4 shows the idea behind the logic. 
The process starts with one candidate summary. If it includes some addresses that need to be 
summarized and some addresses it should not summarize, split it in half, and try again with each 
half. Eventually, the best exclusive summary routes are found, or the splitting keeps happening 
until you get back to the original routes. In fact, in this case, after a few more splits (not shown), 
the process ends up splitting to 172.31.24.0/24, which is one of the original routes—meaning that 
172.31.24.0/24 cannot be summarized any further in this example.

CIDR, Private Addresses, and NAT     111
Figure 4-4
Example of Process to Find Exclusive Summary Routes
CIDR, Private Addresses, and NAT
The sky was falling in the early 1990s in that the commercialization of the Internet was rapidly 
depleting the IP Version 4 address space. Also, Internet routers’ routing tables were doubling 
annually (at least). Without some changes, the incredible growth of the Internet in the 1990s would 
have been stiﬂed. 
To solve the problems associated with this rapid growth, several short-term solutions were created, 
as well as an ultimate long-term solution. The short-term solutions included classless interdomain 
routing (CIDR),  which helps reduce the size of routing tables by aggregating routes, and Network 
Address Translation (NAT), which reduces the number of required public IP addresses used by 
each organization or company. This section covers the details of CIDR and NAT, plus a few related 
features. The ﬁnal major section of this chapter looks at the long-term solution to this problem—
namely, IP Version 6 (IPv6).
Classless Interdomain Routing
CIDR is a convention deﬁned in RFCs 1517 through 1520 that calls for aggregating routes for 
multiple classful network numbers into a single routing table entry. The primary goal of CIDR is 
to improve the scalability of Internet routers’ routing tables. Imagine the implications of an Internet 
router being burdened by carrying a route to every class A, B, and C network on the planet! 
CIDR uses both technical tools and administrative strategies to reduce the size of the Internet 
routing tables. Technically, CIDR uses route summarization, but with Internet scale in mind. 
172.31.16.0/20: 16.0 Thru 31.255
172.31.16.0/21: 16.0 thru 23.255
172.31.16.0/21: 24.0 thru 31.255 
172.31.16.0/22:
16.0 Thru 19.255
172.31.16.0/22:
20.0 Thru 23.255
172.31.24.0/21:
24.0 Thru 27.255
172.31.28.0/22:
28.0 Thru 31.255
Too Inclusive:
Split!
Too Inclusive:
Split!
Too Inclusive:
Split!
Range completely
outside range to
be summarized;
stop splitting.
Range completely
outside range to
be summarized;
stop splitting.
Range is
exclusively from
target range —
keep this as part
of best exclusive
summary!
Too inclusive:
keep splitting!
(Details not
shown.)
Routes to Summarize:
172.31.20.0/24 (20.0 thru 20.255)
172.31.21.0/24 (21.0 thru 21.255)
172.31.22.0/24 (22.0 thru 22.255)
172.31.23.0/24 (23.0 thru 23.255)
172.31.24.0/24 (24.0 thru 24.255)

112     Chapter 4: IP Addressing
For instance, CIDR might be used to allow a large ISP to control a range of IP addresses from 
198.0.0.0 to 198.255.255.255, with the improvements to routing shown in Figure 4-5.
Figure 4-5
Typical Use of CIDR
ISPs 2, 3, and 4 need only one route (198.0.0.0/8)  in their routing tables to be able to forward 
packets to all destinations that begin with 198. Note that this summary actually summarizes 
multiple class C networks—a typical feature of CIDR. ISP 1’s routers contain more detailed 
routing entries for addresses beginning with 198, based on where they allocate IP addresses for 
their customers. ISP 1 would reduce its routing tables similarly with large ranges used by the 
other ISPs.
CIDR attacks the problem of large routing tables via administrative means as well. As shown in 
Figure 4-5, ISPs are assigned contiguous blocks of addresses to use when assigning addresses for 
their customers. Likewise, regional authorities are assigned large address blocks, so when individual 
companies ask for registered public IP addresses, they ask their regional registry to assign them an 
address block. As a result, addresses assigned by the regional agency will at least be aggregatable 
into one large geographic region of the world. For instance, the Latin American and Caribbean 
Internet Addresses Registry (LACNIC, http://www.lacnic.net) administers the IP address space of 
the Latin American and Caribbean region (LAC) on behalf of the Internet community.
In some cases, the term CIDR is used a little more generally than the original intent of the RFCs. 
Some texts use the term CIDR synonymously with the term route summarization. Others use the 
term CIDR to refer to the process of summarizing multiple classful networks together. In other 
cases, when an ISP assigns subsets of a classful network to a customer who does not need an entire 
class C network, the ISP is essentially performing subnetting; once again, this idea sometimes 
gets categorized as CIDR. But CIDR itself refers to the administrative assignment of large address 
blocks, and the related summarized routes, for the purpose of reducing the size of the Internet 
routing tables.
ISP #1
198.0.0.0 -
198.255.255.0
Route to 198.0.0.0 Mask 
255.0.0.0 Points to ISP #1
Route to 198.0.0.0 Mask 
255.0.0.0 Points to ISP #1
Route to 198.0.0.0 Mask 
255.0.0.0 Points to ISP #1
Customer #1
198.8.3.0/24
Customer #2
198.4.2.0/24
198.4.3.0/24
Customer #3
198.1.0.0
ISP #2
ISP #3
ISP #4
KEY 
POINT

CIDR, Private Addresses, and NAT     113
Private Addressing
One of the issues with Internet growth was the assignment of all possible network numbers to 
a small number of companies or organizations. Private IP addressing helps to mitigate this 
problem by allowing computers that will never be directly connected to the Internet to not use 
public, Internet-routable addresses. For IP hosts that will purposefully have no direct Internet 
connectivity, you can use several reserved network numbers, as deﬁned in RFC 1918 and listed 
in Table 4-12.
In other words, any organization can use these network numbers. However, no organization is 
allowed to advertise these networks using a routing protocol on the Internet. Furthermore, all 
Internet routers should be conﬁgured to reject these routes.
Network Address Translation
NAT, deﬁned in RFC 1631, allows a host that does not have a valid registered IP address to 
communicate with other hosts on the Internet. NAT has gained such wide-spread acceptance 
that the majority of enterprise IP networks today use private IP addresses for most hosts 
on the network and use a small block of public IP addresses, with NAT translating between 
the two. 
NAT translates, or changes, one or both IP addresses inside a packet as it passes through a router. 
(Many ﬁrewalls also perform NAT; for the CCIE Routing and Switching exam, you do not need 
to know NAT implementation details on ﬁrewalls.) In most cases, NAT changes the (typically 
private range) addresses used inside an enterprise network into address from the public IP address 
space. For instance, Figure 4-6 shows static NAT in operation; the enterprise has registered 
class C network 200.1.1.0/24, and uses private class A network 10.0.0.0/8 for the hosts inside 
its network.
NOTE
Because CIDR deﬁnes how to combine routes for multiple classful networks into a 
single route, some people think of this process as being the opposite of subnetting. As a result, 
many people refer to CIDR’s summarization results as supernetting.
Table 4-12
RFC 1918 Private Address Space
KEY 
POINT
Range of IP Addresses
Class of 
Networks
Number of 
Networks
10.0.0.0 to 10.255.255.255
A
1
172.16.0.0 to 172.31.255.255
B
16
192.168.0.0 to 192.168.255.255
C
256

114     Chapter 4: IP Addressing
Figure 4-6
Basic NAT Concept
Beginning with the packets sent from a PC on the left to the server on the right, the private IP 
source address 10.1.1.1 is translated to a public IP address of 200.1.1.1. The client sends a packet 
with source address 10.1.1.1, but the NAT router changes the source to 200.1.1.1—a registered 
public IP address. Once the server receives a packet with source IP address 200.1.1.1, the server 
thinks it is talking to host 200.1.1.1, so it replies with a packet sent to destination 200.1.1.1. The 
NAT router then translates the destination address (200.1.1.1) back to 10.1.1.1. 
Figure 4-6 provides a good backdrop for the introduction of a couple of key terms, Inside Local 
and Inside Global. Both terms take the perspective of the owner of the enterprise network. In 
Figure 4-6, address 10.1.1.1 is the Inside Local address, and 200.1.1.1 is the Inside Global address. 
Both addresses represent the client PC on the left, which is inside the enterprise network. Address 
10.1.1.1 is from the enterprise’s IP address space, which is only locally routable inside the 
enterprise—hence the term Inside Local. Address 200.1.1.1 represents the local host, but the 
address is from the globally routable public IP address space—hence the name Inside Global. 
Table 4-13 lists and describes the four main NAT address terms.
Table 4-13
NAT Terminology 
KEY 
POINT
Name
Location of Host Represented 
by Address
IP Address Space in Which Address 
Exists
Inside Local 
address
Inside the enterprise network
Part of the enterprise IP address space; 
typically a private IP address
Inside Global 
address
Inside the enterprise network
Part of the public IP address space
10.1.1.1
e0/0
s0/0
10.1.1.2
NAT
Internet
170.1.1.1
Server
SA 10.1.1.1
SA 200.1.1.1
Inside Local
10.1.1.1
10.1.1.2
Inside Global
200.1.1.1
200.1.1.2
DA 10.1.1.1
DA 200.1.1.1
Inside
Outside

CIDR, Private Addresses, and NAT     115
Static NAT
Static NAT works just like the example in Figure 4-6, but with the IP addresses statically mapped 
to each other via conﬁguration commands. With static NAT:
■
A particular Inside Local address always maps to the same Inside Global (public) 
IP address.
■
If used, each Outside Local address always maps to the same Outside Global (public) 
IP address.
■
Static NAT does not conserve public IP addresses.
Although static NAT does not help with IP address conservation, static NAT does allow an 
engineer to make an inside server host available to clients on the Internet, because the inside server 
will always use the same public IP address. 
Example 4-1 shows a basic static NAT conﬁguration based on Figure 4-6. Conceptually, the NAT 
router has to identify which interfaces are inside (attach to the enterprise’s IP address space) or 
outside (attach to the public IP address space). Also, the mapping between each Inside Local and 
Inside Global IP address must be made. (Although not needed for this example, outside addresses 
can also be statically mapped.)
Name
Location of Host Represented 
by Address
IP Address Space in Which Address 
Exists
Outside Local 
address
In the public Internet; or, outside the 
enterprise network
Part of the enterprise IP address space; 
typically a private IP address
Outside Global 
address
In the public Internet; or, outside the 
enterprise network
Part of the public IP address space
Example 4-1
Static NAT Conﬁguration 
KEY 
POINT
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! E0/0 attaches to the internal Private IP space, so it is configured as an inside
! interface. 
iiiinnnntttteeeerrrrffffaaaacccceeee    EEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....3333    222255555555....222255555555....222255555555....0000
    iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee
! S0/0 is attached to the public Internet, so it is defined as an outside 
! interface.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    222200000000....1111....1111....222255551111    222255555555....222255555555....222255555555....0000
    iiiipppp    nnnnaaaatttt    oooouuuuttttssssiiiiddddeeee
continues
Table 4-13
NAT Terminology (Continued)

116     Chapter 4: IP Addressing
The router is performing NAT only for inside addresses. As a result, the router processes packets 
entering E0/0—packets that could be sent by inside hosts—by examining the source IP address. 
Any packets with a source IP address listed in the Inside Local column of the show ip nat 
translations command output (10.1.1.1 or 10.1.1.2) will be translated to source address 
200.1.1.1 or 200.1.1.2, respectively, per the NAT table. Likewise, the router examines the 
destination IP address of packets entering S0/0, because those packets would be destined for 
inside hosts. Any such packets with a destination of 200.1.1.1 or .2 will be translated to 10.1.1.1 
or .2, respectively.
In cases with static outside addresses being conﬁgured, the router also looks at the destination 
IP address of packets sent from the inside to the outside interfaces, and the source IP address of 
packets sent from outside interfaces to inside interfaces.
Dynamic NAT Without PAT
Dynamic NAT (without PAT), like static NAT, creates a one-to-one mapping between an Inside 
Local and Inside Global address. However, unlike static NAT, it does so by deﬁning a set or pool 
of Inside Local and Inside Global addresses, and dynamically mapping pairs of addresses as 
needed. For example, Figure 4-7 shows a pool of ﬁve Inside Global IP addresses—200.1.1.1 
through 200.1.1.5. NAT has also been conﬁgured to translate any Inside Local addresses whose 
address starts with 10.1.1.
The numbers 1, 2, and 3 in Figure 4-7 refer to the following sequence of events:
1.
Host 10.1.1.2 starts by sending its ﬁrst packet to the server at 170.1.1.1. 
2.
As the packet enters the NAT router, the router applies some matching logic to decide if the 
packet should have NAT applied. Because the logic has been conﬁgured to mean “translate 
Inside Local addresses that start with 10.1.1,” the router dynamically adds an entry in the NAT 
table for 10.1.1.2 as an Inside Local address. 
3.
The NAT router needs to allocate a corresponding IP address from the pool of valid Inside 
Global addresses. It picks the ﬁrst one available (200.1.1.1 in this case) and adds it to the NAT 
table to complete the entry.
! Next, two inside addresses are mapped, with the first address stating the 
! Inside Local address, and the next stating the Inside Global address. 
iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    ssssttttaaaattttiiiicccc    11110000....1111....1111....2222    222200000000....1111....1111....2222
iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    ssssttttaaaattttiiiicccc    11110000....1111....1111....1111    222200000000....1111....1111....1111
! Below, the NAT table lists the permanent static entries from the configuration.
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ttttrrrraaaannnnssssllllaaaattttiiiioooonnnnssss
Pro Inside global      Inside local       Outside local      Outside global
--- 200.1.1.1          10.1.1.1           ---                --
--- 200.1.1.2          10.1.1.2           ---                ---
Example 4-1
Static NAT Conﬁguration (Continued)

CIDR, Private Addresses, and NAT     117
Figure 4-7
Dynamic NAT
With the completion of step 3, the NAT router can actually translate the source IP address, and 
forward the packet. Note that as long as the dynamic NAT entry exists in the NAT table, only host 
10.1.1.2 can use Inside Global IP address 200.1.1.1.
Overloading NAT with Port Address Translation
As mentioned earlier, NAT is one of the key features that helped to reduce the speed at which the 
IPv4 address space was being depleted. NAT overloading, also known as Port Address Translation 
(PAT), is the NAT feature that actually provides the signiﬁcant savings of IP addresses. The key to 
understanding how PAT works is to consider the following: From a server’s perspective, there is 
no signiﬁcant difference between 100 different TCP connections, each from a different host, and 
100 different TCP connections all from the same host.
PAT works by making large numbers of TCP or UDP ﬂows from many Inside Local hosts appear 
to be the same number of large ﬂows from one (or a few) host’s Inside Global addresses. With PAT, 
instead of just translating the IP address, NAT also translates the port numbers as necessary. And 
because the port number ﬁelds are 16 bits in length, each Inside Global IP address can support over 
65,000 concurrent TCP and UDP ﬂows. For instance, in a network with 1000 hosts, a single public 
IP address used as the only Inside Global address could handle an average of six concurrent ﬂows 
from each host to and from hosts on the Internet.
10.1.1.1
10.1.1.2
NAT
Internet
170.1.1.1
Server
SA 10.1.1.2
SA 200.1.1.1
Inside Local
10.1.1.2
Inside Global
200.1.1.1
Inside
Outside
1
2
3
4
NAT Table After First Packet
Inside Local
Inside Global
NAT Table Before First Packet
Criteria for Hosts to NAT:
10.1.1.0 - 10.1.1.255
NAT Pool:
200.1.1.1
200.1.1.2
200.1.1.3
200.1.1.4
200.1.1.5
KEY 
POINT

118     Chapter 4: IP Addressing
Dynamic NAT and PAT Conﬁguration
Like static NAT, dynamic NAT conﬁguration begins with identifying the inside and outside 
interfaces. Additionally, the set of Inside Local addresses is conﬁgured with the ip nat inside 
global command. If you are using a pool of public Inside Global addresses, the set of addresses is 
deﬁned by the ip nat pool command. Example 4-2 shows a dynamic NAT conﬁguration based on 
the internetwork shown in Figure 4-7. The example deﬁnes 256 Inside Local addresses and two 
Inside Global addresses. 
Example 4-2
Dynamic NAT Conﬁguration 
KEY 
POINT
! First, the iiiipppp    nnnnaaaatttt    ppppoooooooollll    ffffrrrreeeedddd command lists a range of IP addresses. The iiiipppp nnnnaaaatttt 
! iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    lllliiiisssstttt    1111    ppppoooooooollll    ffffrrrreeeedddd    command points to ACL 1 as the list of Inside 
! Local addresses, with a cross-reference to the pool name. 
iiiinnnntttteeeerrrrffffaaaacccceeee    EEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....3333    222255555555....222255555555....222255555555....0000
    iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    222200000000....1111....1111....222255551111    222255555555....222255555555....222255555555....0000
    iiiipppp    nnnnaaaatttt    oooouuuuttttssssiiiiddddeeee
!
iiiipppp    nnnnaaaatttt    ppppoooooooollll    ffffrrrreeeedddd    222200000000....1111....1111....1111    222200000000....1111....1111....2222    nnnneeeettttmmmmaaaasssskkkk    222255555555....222255555555....222255555555....222255552222
iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    lllliiiisssstttt    1111    ppppoooooooollll    ffffrrrreeeedddd
! 
aaaacccccccceeeessssssss----lllliiiisssstttt    1111    ppppeeeerrrrmmmmiiiitttt    11110000....1111....1111....0000    0000....0000....0000....222255555555
! Next, the NAT table begins as an empty table, because no dynamic entries had
! been created at that point.
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ttttrrrraaaannnnssssllllaaaattttiiiioooonnnnssss
! The NAT statistics show that no hits or misses have occurred. Hits occur when
! NAT looks for a mapping, and finds one. Misses occur when NAT looks for a NAT
! table entry, does not find one, and then needs to dynamically add one.
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ssssttttaaaattttiiiissssttttiiiiccccssss
Total active translations: 0 (0 static, 0 dynamic; 0 extended)
Outside interfaces:
  Serial0/0
Inside interfaces: 
  Ethernet0/0
Hits: 0  Misses: 0
Expired translations: 0
Dynamic mappings:
-- Inside Source
access-list 1 pool fred refcount 0
 pool fred: netmask 255.255.255.252
    start 200.1.1.1 end 200.1.1.2
    type generic, total addresses 2, allocated 0 (0%), misses 0
! At this point, a Telnet session from 10.1.1.1 to 170.1.1.1 started.

IP Version 6     119
IP Version 6
The ultimate solution to rapidly growing Internet routing tables and IPv4 address depletion was 
the development of IPv6, which deﬁnes 128-bit source and destination addresses. At the risk of 
being derided 20 years from now, I’ll venture a guess that IPv6 has more addresses than we’ll ever 
need. IPv6 can support over a trillion, trillion IP addresses per person on the planet—with plenty 
! Below, the 1 “miss” means that the first packet from 10.1.1.2 did not have a
! matching entry in the table, but that packet triggered NAT to add an entry to the
! NAT table. Host 10.1.1.2 has then sent 69 more packets, noted as “hits” because 
! there was an entry in the table. 
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ssssttttaaaattttiiiissssttttiiiiccccssss
Total active translations: 1 (0 static, 1 dynamic; 0 extended)
Outside interfaces:
  Serial0/0
Inside interfaces: 
  Ethernet0/0
Hits: 69  Misses: 1
Expired translations: 0
Dynamic mappings:
-- Inside Source
access-list 1 pool fred refcount 1
 pool fred: netmask 255.255.255.252
    start 200.1.1.1 end 200.1.1.2
    type generic, total addresses 2, allocated 1 (50%), misses 0
! The dynamic NAT entry is now displayed in the table.
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ttttrrrraaaannnnssssllllaaaattttiiiioooonnnnssss
Pro Inside global      Inside local       Outside local      Outside global
--- 200.1.1.1          10.1.1.2           ---                ---
! Below, the configuration uses PAT via the oooovvvveeeerrrrllllooooaaaadddd parameter. Could have used the 
! iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    lllliiiisssstttt    1111    iiiinnnntttt    ssss0000////0000    oooovvvveeeerrrrllllooooaaaadddd command instead, using a single
! IP Inside Global IP address.
NAT(config)# nnnnoooo    iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    lllliiiisssstttt    1111    ppppoooooooollll    ffffrrrreeeedddd
NAT(config)# iiiipppp    nnnnaaaatttt    iiiinnnnssssiiiiddddeeee    ssssoooouuuurrrrcccceeee    lllliiiisssstttt    1111    ppppoooooooollll    ffffrrrreeeedddd    oooovvvveeeerrrrllllooooaaaadddd
! To test, the dynamic NAT entries were cleared after changing the NAT 
! configuration. Before the next command was issued, host 10.1.1.1 had created two 
! Telnet connections, and host 10.1.1.2 created 1 more TCP connection.
NAT# cccclllleeeeaaaarrrr    iiiipppp    nnnnaaaatttt    ttttrrrraaaannnnssssllllaaaattttiiiioooonnnnssss    ****
! Before the next command was issued, host 10.1.1.1 had created two 
! Telnet connections, and host 10.1.1.2 created 1 more TCP connection. Note that 
! all three dynamically mapped flows use common Inside Global 200.1.1.1.
NAT# sssshhhhoooowwww    iiiipppp    nnnnaaaatttt    ttttrrrraaaannnnssssllllaaaattttiiiioooonnnnssss
Pro Inside global      Inside local       Outside local      Outside global
tcp 200.1.1.1:3212     10.1.1.1:3212      170.1.1.1:23       170.1.1.1:23
tcp 200.1.1.1:3213     10.1.1.1:3213      170.1.1.1:23       170.1.1.1:23
tcp 200.1.1.1:38913    10.1.1.2:38913     170.1.1.1:23       170.1.1.1:23
Example 4-2
Dynamic NAT Conﬁguration (Continued)

120     Chapter 4: IP Addressing
of publicly routable addresses for everyone. Plus, the structure is well established for CIDR-like 
allocation of address blocks, keeping Internet routing tables small.
So, why hasn’t the world moved to IPv6? Well, CIDR, NAT, and other tools have made the IPv4 
address space much more manageable. The killer app that drives IPv6 may well be the growth 
of mobile wireless phones and handhelds, or it may be the sensor revolution. Of more direct 
interest is that the most basic features of IPv6 now appear on the written and lab CCIE Routing 
and Switching exams.
IPv6 Address Formats
IPv6 addresses have eight quartets of hex digits, separated by colons. Each quartet consists of four hex 
digits, which together represent 16 bits. The rules for encoding the actual hex values are as follows:
■
Each quartet is separated by a colon (:).
■
In a quartet, leading hex 0s can optionally be omitted.
■
If one or more consecutive quartets are hex 0000, then the set of consecutive all-0 quartets can be 
represented as a null quartet (::), no matter how many consecutive all-0 quartets are in this range.
■
Only one use of :: is allowed in a single IPv6 address. 
For example, the following IPv6 address is shown in three different valid formats. The ﬁrst one 
uses no shortcuts; the next removes leading 0s in each quartet; and the last abbreviates multiple, 
consecutive, all-0 quartets with ::.
0123:0078:0000:0000:9ABC:0000:0000:DEF0
123:78:0:0:9ABC:0:0:DEF0
123:78::9ABC:0:0:DEF0
All three versions are legal and common, but router command output generally shows the briefest 
form so that command output best ﬁts on the visible screen. Also, notice that there were two places 
in the address with two consecutive all-0 quartets. The :: shortcut implies one or more consecutive 
all-0 quartets, so using this abbreviation in more than one place would be ambiguous. 
Aggregatable Global Unicast Addresses 
IPv6 deﬁnes several different types of unicast addresses. The format used for publicly registered 
addresses is called aggregatable global unicast. The term aggregatable refers to fact that these 
addresses can be easily aggregated to reduce the problem of large Internet routing tables. The term 
global refers to the fact that the address is a registered public IP address, routable through the 
global Internet. In short, when a company obtains a registered IPv6 preﬁx from a Regional Internet 
KEY 
POINT

IP Version 6     121
Authority, the addresses follow the aggregatable global unicast format. For short, most people call 
them global addresses.
The original global address format was a little more complicated. The current version of the format 
contains three ﬁxed-length major parts. Conceptually, the format is like the network, subnet, and 
host organization of an IPv4 address, except the ﬁxed-length ﬁelds do not require a subnet mask 
equivalent. Figure 4-8 shows the format and details.
Figure 4-8
Aggregatable Global Address Format
With IPv4, to use public addresses, you obtain a preﬁx from one of the numbering authorities—
maybe a classful network, or maybe just a small block deﬁned with a preﬁx. With IPv6, you would 
get an assigned block with a 48-bit preﬁx. The ﬁrst 3 bits are always binary 001, leaving 45 bits 
in the preﬁx that can be assigned by IANA and its member local, national, or regional registries. 
As a result, there are 245 possible preﬁxes to assign, or roughly 32 trillion possible preﬁxes. And, 
as is the case with CIDR, large numbers of consecutive preﬁxes are assigned to ISPs and local, 
national, or regional registries to aid in managing the growth of Internet routing tables.
Once you have a registered preﬁx, you can subdivide it using the subnet ID ﬁeld. For each link, 
you could pick a different value for this ﬁeld, just like you pick different subnet numbers for IPv4. 
With 16 bits, each IPv6 preﬁx holder can assign more than 65,000 subnets within that address 
space.
Finally, IPv6 global addresses allow for the dynamic assignment of the interface ID portion of the 
addresses, as well as for static assignment. And, because IEEE MAC addresses already have a 
proven method to ensure global uniqueness, IPv6 uses the MAC to create the ﬁnal 64 bits of the 
address, called the interface ID. To create the interface ID dynamically, IPv6 splits the MAC in 
half, and puts hex FFFE in the middle. (The format of the interface ID portion is called EUI-64.) 
For non-LAN interfaces on a router, a MAC is borrowed from another interface, or created from 
the router serial number, much like routers create the node part of Novell IPX addresses on a 
router.
Simple IPv6 Conﬁguration
Figure 4-9 shows a small, sample network that is used in this section to show basic IPv6 connectivity 
using global addresses.
1st 3 bytes
of MAC
FFFE
2nd 3 bytes
of MAC
Subnet ID
16 bits
64 bits, EUI-64 format
48 bits
Begins with binary 001, meaning
the initial hex digit is 2 or 3
Inverts bit 7 of MAC when
creating the IPv6 address
Interface ID
Global Routing Prefix
KEY 
POINT

122     Chapter 4: IP Addressing
Figure 4-9
Sample Dual-Stack IPv4/IPv6 Network
The routers use dual stacks (both IPv4 and IPv6 addresses are assigned to the interfaces) for this 
network. Hosts with dual stacks (running both IPv4 and IPv6) would be able to send IPv4 or IPv6 
packets, and the routers could accommodate either. This relatively simple example of IPv6 uses 
global addresses and a minimal OSPF conﬁguration. Example 4-3 shows the conﬁguration and 
a working ping.
Example 4-3
Conﬁguring Dual-Stack IPv4/IPv6 with OSPF 
KEY 
POINT
! The iiiippppvvvv6666    uuuunnnniiiiccccaaaasssstttt----rrrroooouuuuttttiiiinnnngggg command enables IPv6 forwarding on this router.
! The iiiippppvvvv6666    cccceeeeffff command is optional, but it does cause CEF switching of IPv6.
Router1# sssshhhhoooowwww    rrrruuuunnnn
!lines omitted for brevity
!
ip cef
iiiippppvvvv6666    uuuunnnniiiiccccaaaasssstttt----rrrroooouuuuttttiiiinnnngggg
iiiippppvvvv6666    cccceeeeffff
! The iiiippppvvvv6666    aaaaddddddddrrrreeeessssssss command lists the global routing prefix and IPV6 subnet 2. 
! The ////66664444 means that only the first 64 bits defines the prefix, and the 
! eeeeuuuuiiii----66664444 parameter means that the router should dynamically create the rest of the
! address for the interface. Note that the :::::::: at the end of the address implies
! 3 quartets of 0s, which will be replaced with the EUI-64 interface id.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss    0000222200000000....1111111111111111....1111111111111111
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....2222....1111    222255555555....222255555555....222255555555....0000
    iiiippppvvvv6666    aaaaddddddddrrrreeeessssssss    2222000000001111::::0000::::0000::::2222::::::::////66664444    eeeeuuuuiiii----66664444
    iiiippppvvvv6666    oooossssppppffff    1111    aaaarrrreeeeaaaa    0000
! Above, the iiiippppvvvv6666    aaaaddddddddrrrreeeessssssss command does the same thing it did for fa0/0, but this 
! time with a subnet value of 3. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....3333....1111    222255555555....222255555555....222255555555....0000
    iiiippppvvvv6666    aaaaddddddddrrrreeeessssssss    2222000000001111::::0000::::0000::::3333::::::::////66664444    eeeeuuuuiiii----66664444
    iiiippppvvvv6666    oooossssppppffff    1111    aaaarrrreeeeaaaa    0000
! The iiiippppvvvv6666    rrrroooouuuutttteeeerrrr    oooossssppppffff    1111 command creates an IPv6 OSPF process; the command
! was automatically created when the iiiippppvvvv6666    oooossssppppffff    1111    aaaarrrreeeeaaaa    0000 commands were added 
! under the fa0/0 and s0/1 interfaces. These two commands enable OSPF on the 
! respective interfaces, and identify the OSPF process id and area number.
R1
R2
Fa0/0
Fa0/0
S0/1
S0/1
Subnet 2
Subnet 3
172.31.0.0, /24 prefixes
IPv6 Prefix 2001:0:0
Subnet: 2, 3, or 4
Interface ID: Dynamically Allocated
Subnet 4

IP Version 6     123
IPv6 Addressing Summary
Besides global addresses, other styles of IPv6 addresses exist. Table 4-14 lists and brieﬂy describes 
the different types of addresses.
iiiippppvvvv6666    rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    lllloooogggg----aaaaddddjjjjaaaacccceeeennnnccccyyyy----cccchhhhaaaannnnggggeeeessss
! Next, the full IPv6 addresses are shown. Note that the interfaces have 2 
! addresses; one is the automatically generated link-local address, beginning with
! FE80, used for some protocols on the local link. Note the subnets can be seen
! in the third quartet. 
Router1# sssshhhh    iiiippppvvvv6666    iiiinnnntttt    bbbbrrrriiiieeeeffff
FastEthernet0/0            [up/up]
    FE80::11FF:FE11:1111
    2001::2:0:11FF:FE11:1111
Serial0/1                  [up/up]
    FE80::11FF:FE11:1111
    2001::3:0:11FF:FE11:1111
Virtual-Access1            [up/up]
    unassigned
! Below, the ping from R1 to R2’s fa0/0 works. 
Router1# ppppiiiinnnngggg    2222000000001111::::::::4444::::0000::::22222222FFFFFFFF::::FFFFEEEE22222222::::2222222222222222 
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 2001::3:0:22FF:FE22:2222, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/2/4 ms
Table 4-14
IPv6 Address Type Summary 
KEY 
POINT
Type of Address
Deﬁnition and Purpose
Aggregatable global 
unicast
Unicast IPV6 address; must be globally unique. Registered unique globally 
routable address.
Link-local unicast
Required for each IPv6 interface. Used for processes occurring only on the 
local link; not routable.
Site-local unicast
Intended for use only within a site. Included in the IPv6 deﬁnitions in RFC 
3513, but deprecated in RFC 3879.
Centrally assigned 
unique local
Similar to IPv4 private addresses; a range of IPv6 addresses that will not be 
assigned as public globally routable addresses.
IPv4-compatible 
unicast
Used mainly for migration to IPv6 when the core is still IPv4. IPv6 addresses 
are 96 binary 0s, followed by the interface’s assigned IPv4 address.
continues
Example 4-3
Conﬁguring Dual-Stack IPv4/IPv6 with OSPF (Continued)

124     Chapter 4: IP Addressing
This short section on IPv6 just scratches the surface of IPv6 features in general, and Cisco routers 
in particular. The “Further Reading” section near the end of the chapter lists a couple of good 
references for additional details about IPv6.
Type of Address
Deﬁnition and Purpose
Anycast
The conﬁguration of the same IPv6 unicast address on multiple hosts, with 
IPv6 routing packets to the closest host. Used with redundant identical 
services for load balancing.
Multicast
Includes some nonrouted and some routable ranges. Large range (all 
addresses beginning with FF). Used instead of broadcast addresses.
Broadcast
Nonexistent in IPv6. For instance, ARP is replaced by Neighbor Discovery 
(ND) messages, which use a reserved IPv6 multicast address.
Table 4-14
IPv6 Address Type Summary (Continued)

Foundation Summary     125
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the Foundation Topics section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 4-15 lists and brieﬂy explains several variations on NAT. 
Table 4-16 lists the protocols mentioned in this chapter and their respective standards documents. 
Table 4-15
Variations on NAT
Name
Function
Static NAT
Statically correlates the same public IP address for use by the same local host 
every time. Does not conserve IP addresses. 
Dynamic NAT
Pools the available public IP addresses, shared among a group of local hosts, but 
with only one local host at a time using a public IP address. Does not conserve 
IP addresses. 
Dynamic NAT with 
overload (PAT)
Like dynamic NAT, but multiple local hosts share a single public IP address by 
multiplexing using TCP and UDP port numbers. Conserves IP addresses.
NAT for overlapping 
address
Can be done with any of the ﬁrst three types. Translates both source and 
destination addresses, instead of just the source (for packets going from 
enterprise to the Internet).
Table 4-16
Protocols and Standards for Chapter 4
Name
Standardized In
IP 
RFC 791
Subnetting
RFC 950
NAT
RFC 1631
Private addressing
RFC 1918
CIDR
RFCs 1517–1520
IPv6
RFC 3587, RFC 3513, many others 

126     Chapter 4: IP Addressing
Table 4-17 lists and describes some of the most commonly used IOS commands related to the 
topics in this chapter. 
Figure 4-10 shows the IP header format.
Table 4-17
Command Reference for Chapter 4
Command
Description
ip address ip-address mask [secondary]
Interface subcommand to assign an IPv4 address
ipv6 address ipv6-preﬁx/preﬁx-length eui-64
Interface subcommand to assign an IPv6 global 
unicast address
ipv6 unicast-routing
Globally enables IPv6 in a router
ip nat {inside | outside}
Interface subcommand; identiﬁes inside or outside 
part of network
ip nat inside source {list {access-list-number | 
access-list-name} | route-map name} {interface 
type number | pool pool-name} [overload]
Global command that deﬁnes the set of inside 
addresses for which NAT will be performed, and 
corresponding outside addresses
ip nat inside destination list {access-list-
number | name} pool name
Global command used with destination NAT
ip nat outside source {list {access-list-number | 
access-list-name} | route-map name} pool pool-
name [add-route]
Global command used with both destination and 
dynamic NAT 
ip nat pool name start-ip end-ip {netmask 
netmask | preﬁx-length preﬁx-length}[type 
rotary]
Global command to create a pool of addresses for 
dynamic NAT
show ip nat statistics
Lists counters for packets and for NAT table entries, 
as well as basic conﬁguration information
show ip nat translations [verbose]
Displays the NAT table
clear ip nat translation {* | [inside global-ip 
local-ip] [outside local-ip global-ip]}
Clears all or some of the dynamic entries in the 
NAT table, depending on which parameters are used
debug ip nat
Issues log messages describing each packet whose 
IP address is translated with NAT
show ip interface [type number] [brief]
Lists information about IPv4 on interfaces
show ipv6 interface [brief] [[interface-type 
interface-number] [preﬁx]]
Lists information about IPv6 on interfaces

Foundation Summary     127
Figure 4-10
IP Header
Table 4-18 lists the terms and meanings of the ﬁelds inside the IP header.
Table 4-18
IP Header Fields 
Field
Meaning
Version
Version of the IP protocol. Most networks use IPv4 today, with IPv6 becoming more 
popular. The header format reﬂects IPv4.
Header Length
Deﬁnes the length of the IP header, including optional ﬁelds. Because the length of 
the IP header must always be a multiple of 4, the IP header length (IHL) is multiplied 
by 4 to give the actual number of bytes.
DS Field
Differentiated Services Field. This byte was originally called the Type of Service (ToS) 
byte, but was redeﬁned by RFC 2474 as the DS Field. It is used for marking packets for 
the purpose of applying different quality of service (QoS) levels to different packets.
Packet Length
Identiﬁes the entire length of the IP packet, including the data.
Identiﬁcation
Used by the IP packet fragmentation process. If a single packet is fragmented into 
multiple packets, all fragments of the original packet contain the same identiﬁer, so 
that the original packet can be reassembled. 
Flags
3 bits used by the IP packet fragmentation process.
Fragment Offset
A number set in a fragment of a larger packet that identiﬁes the fragment’s location 
in the larger original packet.
Time to Live 
(TTL)
A value used to prevent routing loops. Routers decrement this ﬁeld by 1 each time 
the packet is forwarded; once it decrements to 0, the packet is discarded.
Protocol
A ﬁeld that identiﬁes the contents of the data portion of the IP packet. For example, 
protocol 6 implies a TCP header is the ﬁrst thing in the IP packet data ﬁeld.
continues
Version
Identification
Flags (3)
Fragment Offset (13)
Header Checksum
Protocol
Time to Live
Source IP Address
Destination IP Address
Optional Header
Fields and Padding
DS Field
0
8
16
24
32
Packet Length
Header
Length

128     Chapter 4: IP Addressing
Table 4-19 lists some of the more common IP protocol ﬁeld values.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Field
Meaning
Header 
Checksum
A value used to store a frame check sequence (FCS) value, whose purpose is 
to determine if any bit errors occurred in the IP header (not the data) during 
transmission.
Source IP 
Address
The 32-bit IP address of the sender of the packet.
Destination IP 
Address
The 32-bit IP address of the intended recipient of the packet.
Optional header 
ﬁelds and 
padding
IP supports additional header ﬁelds for future expansion via optional headers. Also, 
if these optional headers do not use a multiple of 4 bytes, padding bytes are added, 
comprised of all binary 0s, so that the header is a multiple of 4 bytes in length. 
Table 4-19
IP Protocol Field Values
KEY 
POINT
Protocol Name
Protocol Number
ICMP
1
TCP
6
UDP
17
EIGRP
88
OSPF
89
PIM
103
Table 4-18
IP Header Fields (Continued)

Memory Builders     129
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
subnet, preﬁx, classless IP addressing, classful IP addressing, CIDR, NAT, IPv6, 
IPv4, subnet broadcast address, subnet number, subnet zero, broadcast subnet, 
subnet mask, private addresses, aggregatable global unicast address, SLSM, VLSM, 
Inside Local address, Inside Global address, Outside Local address, Outside Global 
address, PAT, overloading, quartet, EUI-64, dual stack, global routing preﬁx, subnet 
ID, interface ID
Further Reading
All topics in this chapter are covered to varying depth for the CCNP Routing exam. For more 
details on these topics, refer to CCNP BSCI Exam Certiﬁcation Guide, Third Edition, and CCNP 
Self-Study: CCNP BSCI Exam Certiﬁcation Guide, Third Edition, listed in the introduction to 
this book.
For more information on IPv6, refer to http://www.cisco.com/en/US/partner/tech/tk872/
tsd_technology_support_protocol_home.html. This website requires a CCO username and 
password.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■General Networking Theory
— Standards
■IP
— Services
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching exam topics: 
■ICMP
■DHCP
■NTP
■HSRP

C H A P T E R 5
IP Services
IP relies on several protocols to perform a variety of tasks related to the process of routing 
packets. This chapter provides a reference for the most popular of these protocols. 
“Do I Know This Already?” Quiz
Table 5-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
What ICMP message is used by a router when the router tries to forward a packet to a host 
on an attached subnet, but the host does not respond to ARP requests? 
a. Echo Request
b. Time Exceeded
c. Source Quench
d. Destination Unreachable
e. Host Unreachable
f. Port Unreachable
Table 5-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This 
Section
Score
ICMP
1–3
ARP, Proxy ARP, Reverse ARP, BOOTP, and DHCP
4–6
HSRP, VRRP, and GLBP
7
Network Time Protocol
8
Total Score

132     Chapter 5: IP Services
2.
What ICMP message does the Cisco IOS traceroute command rely upon? 
a. Echo Request
b. Source Quench
c. Time Exceeded
d. Destination Unreachable
e. Host Unreachable
3.
What ICMP message implies that a packet arrived at a host, but there was no application 
listening on the TCP or UDP port number listed as the destination port in the packet? 
a. Echo Request
b. Source Quench
c. Destination Unreachable
d. Host Unreachable
e. Port Unreachable
4.
Two hosts, named PC1 and PC2, sit on subnet 172.16.1.0/24, along with router R1. A web 
server sits on subnet 172.16.2.0/24, which is connected to another interface of R1. At some 
point, both PC1 and PC2 send an ARP request before they successfully send packets to the 
web server. With PC1, R1 makes a normal ARP reply, but for PC2, R1 uses a proxy ARP reply. 
Which two of the following answers could be true given the stated behavior in this network? 
a. PC2 set the proxy ﬂag in the ARP request.
b. PC2 encapsulated the ARP request inside an IP packet.
c. PC2’s ARP broadcast implied that PC2 was looking for the web server’s MAC address.
d. PC2 has a subnet mask of 255.255.0.0.
e. R1’s proxy ARP reply contains the web server’s MAC address.
5.
Host PC3 is using DHCP to discover its IP address. Only one router attaches to PC3’s subnet, 
using its fa 0/0 interface, with an ip helper-address 10.5.5.5 command on that same interface. 
That same router interface has an ip address 10.4.5.6 255.255.252.0 command conﬁgured as 
well. Which of the following are true about PC3’s DHCP request? 
a. The destination IP address of the DHCP request packet is set to 10.5.5.5 by the router.
b. The DHCP request packet’s source IP address is unchanged by the router.

“Do I Know This Already?” Quiz     133
c. The DHCP request is encapsulated inside a new IP packet, with source IP address 
10.4.5.6, and destination 10.5.5.5.
d. The DHCP request’s source IP address is changed to 10.4.5.255.
e. The DHCP request’s source IP address is changed to 10.4.7.255.
6.
Which of the following statements are true about BOOTP, but not true about RARP? 
a. The client can be assigned a different IP address on different occasions, because the 
server can allocate a pool of IP addresses for allocation to a set of clients.
b. The server can be on a different subnet from the client.
c. The client’s MAC address must be conﬁgured on the server, with a one-to-one mapping 
to the IP address to be assigned to the client with that MAC address.
d. The client can discover its IP address, subnet mask, and default gateway IP address.
7.
R1 is HSRP active for virtual IP address 172.16.1.1, with HSRP priority set to 115. R1 is 
tracking three separate interfaces. An engineer conﬁgures the same HSRP group on R2, also 
connected to the same subnet, only using the standby 1 ip 172.16.1.1 command, and no other 
HSRP-related commands. Which of the following would cause R2 to take over as HSRP 
active?  
a. R1 experiences failures on tracked interfaces, totaling 16 or more lost points.
b. R1 experiences failures on tracked interfaces, totaling 15 or more lost points.
c. R2 could conﬁgure a priority of 116 or greater.
d. R1’s fa0/0 interface fails.
e. R2 would take over immediately.
8.
Which of the following NTP modes in a Cisco router requires a predeﬁnition of the IP 
address of an NTP server?  
a. Server mode
b. Static client mode
c. Broadcast client mode
d. Symmetric active mode

134     Chapter 5: IP Services
Foundation Topics
ICMP
The Internetwork Control Message Protocol (ICMP) allows for testing and troubleshooting of 
the TCP/IP internetwork layer by deﬁning messages that can be used to determine whether the 
network can currently deliver packets. In fact, ICMP is a required component of every IP 
implementation, as described in the following brief excerpt from RFC 792:
Occasionally a gateway or destination host will communicate with a source host, for example, 
to report an error in datagram processing. For such purposes this protocol, the Internet Control 
Message Protocol (ICMP), is used. ICMP uses the basic support of IP as if it were a higher 
level protocol; however, ICMP is actually an integral part of IP, and must be implemented by 
every IP module.
While “ping packets,” also known as ICMP echo requests and ICMP echo replies, are well known, 
ICMP includes a variety of different message types for varying purposes. Table 5-2 lists the most 
important of these message types.
Table 5-2
ICMP Message Types
KEY 
POINT
Message
Purpose
Destination Unreachable 
Tells the source host that there is a problem delivering a packet.
Time Exceeded
The time it takes a packet to be delivered has become too long; the packet 
has been discarded.
Source Quench
The source is sending data faster than it can be forwarded; this message 
requests that the sender slow down.
Redirect
Used by a router to tell a host to use a different, better router when sending 
packets to that same IP address in the future.
Echo
Used by the ping command to verify connectivity.
Address Mask 
Request/Reply
Used to inquire about and learn the correct subnet mask to be used.
Router Advertisement 
and Selection
Used to allow hosts to dynamically learn the IP addresses of the routers 
attached to the subnet.

ICMP     135
Each ICMP message contains a Type ﬁeld and a Code ﬁeld. The Type ﬁeld implies the message 
types from Table 5-2, with the Code ﬁeld implying a subtype. For instance, many people refer to 
the messages generated by the ping command as ICMP Echo Request and ICMP Echo Reply, but 
in reality, the two messages have the same message type (Echo) and different codes (Request 
and Reply). The remaining coverage of ICMP explains some details behind several of the 
types and codes for ICMP messages.
ICMP Unreachable
When a device realizes that a packet cannot be delivered to its destination, the device sends an 
ICMP Unreachable message. To help determine the root cause of why the packet cannot be 
delivered, the ICMP Unreachable message includes one of ﬁve code ﬁeld values to convey the 
reason for the failure. For instance, in Figure 5-1, assume that Fred is trying to connect to the web 
server, called Web. Table 5-3, following the ﬁgure, lists the key ICMP Unreachable message 
codes, along with an example set of circumstances from Figure 5-1 that would result in each 
Unreachable code.
Figure 5-1
Sample Network for ICMP Unreachable Examples
Table 5-3
ICMP Unreachable Codes 
KEY 
POINT
Unreachable Code
Meaning
Example
Network Unreachable 
A router has no route matching 
the destination IP address of the 
packet.
Router A does not have a route to 
10.1.2.0/24; sends an Unreachable 
to Fred.
Host Unreachable
The packet arrives at the last 
router, but the host does not 
reply to ARP requests.
Host Web is turned off. Router B 
sends Fred a Host Unreachable 
message.
Can’t Fragment
A packet is longer than the 
outgoing link’s MTU, but the 
packet has the Don’t Fragment 
(DF) bit set.
Router A defaults to a 1500-byte 
MTU, and the packet is 1600 bytes 
with the DF bit set. 
continues
Fred
10.1.2.14
Web
B
A
10.1.3.0/24
10.1.1.0/24
10.1.2.0/24

136     Chapter 5: IP Services
Time Exceeded ICMP Message
The ICMP Time Exceeded message notiﬁes a host when a packet it sent has been discarded because 
it was “out of time.” Packets are not actually timed, but to prevent packets from being forwarded 
forever when there is a routing loop, each IP packet header includes a Time to Live (TTL) ﬁeld. 
Routers decrement TTL by 1 every time they forward a packet; if a router happens to decrement 
TTL of a packet to 0, the router discards the packet and sends an ICMP Time Exceeded message 
to the sender of the original packet. 
The Cisco IOS trace command uses the Time Exceeded message and the IP TTL ﬁeld to its 
advantage. The trace command sends three packets, each with TTL set to 1, resulting in an ICMP 
Time Exceeded message being returned by the ﬁrst router in the route (because that router 
decrements TTL to 0, discards the packet, and returns a Time Exceeded message). The trace 
command then sends another three packets with a TTL of 2, then another set with a TTL of 3, and 
so on, until it gets a response from the host. Example 5-1 shows this trace command on RouterA 
from Figure 5-1, with debug messages from RouterB listing the Time Exceeded messages sent 
from RouterB back to RouterA. 
Unreachable Code
Meaning
Example
Protocol Unreachable
The packet reached the 
destination host, but the host is 
not running that transport layer 
protocol.
Somehow, host Web does not have 
its TCP software running. Host 
Web sends the Unreachable 
message to Fred.
Port Unreachable
The packet is delivered to the 
destination host, but there is 
no process listening on the 
destination port.
Host Web is working, but the web 
server software is not currently 
running. Host Web sends the 
Unreachable message to Fred. 
Example 5-1
ICMP debug on RouterB, When Running trace Command on RouterA
RouterA# ttttrrrraaaacccceeee    11110000....1111....2222....11114444
Type escape sequence to abort.
Tracing the route to 10.1.2.14
  1 10.1.3.253 8 msec 4 msec 4 msec
  2 10.1.2.14 12 msec 8 msec 4 msec
RouterA#
RouterB#
ICMP: time exceeded (time to live) sent to 10.1.3.251 (dest was 10.1.2.14)
ICMP: time exceeded (time to live) sent to 10.1.3.251 (dest was 10.1.2.14)
ICMP: time exceeded (time to live) sent to 10.1.3.251 (dest was 10.1.2.14)
Table 5-3
ICMP Unreachable Codes (Continued)

ARP, Proxy ARP, Reverse ARP, BOOTP, and DHCP     137
ICMP Redirect
ICMP Redirect messages allow a host’s default gateway router to inform local hosts of a better 
router to use to reach certain destinations. To do so, a router sends an ICMP Redirect to the host 
to tell it the IP address of the better alternative router. For example, in Figure 5-2, the PC uses 
RouterB as its default router, but RouterA’s route to subnet 10.1.4.0/24 is a better route. Following 
the steps in Figure 5-2:
1.
The PC sends a packet, destined for subnet 10.1.4.0/24, to RouterB.
2.
RouterB forwards the packet based on its own routing table.
3.
RouterB sends the ICMP Redirect message to the PC, telling it to forward future packets 
destined for 10.1.4.0/24 to RouterA instead. 
4.
The PC sends future packets to that host directly to RouterA.
Figure 5-2
Example of an ICMP Redirect
Ironically, the host can ignore the redirect and keep sending the packets to RouterB.
ARP, Proxy ARP, Reverse ARP, BOOTP, and DHCP
The heading for this section may seem like a laundry list of a lot of different protocols. However, 
these ﬁve protocols do have one central theme, namely that they help a host learn information so 
that it can successfully send and receive IP packets. Speciﬁcally, ARP and proxy ARP deﬁne 
methods for a host to learn another host’s MAC address, whereas the core functions of RARP, 
BOOTP, and DHCP deﬁne how a host can discover its own IP address, plus additional related 
information. 
ARP and Proxy ARP
You would imagine that anyone getting this far in their CCIE study would already have a solid 
understanding of the Address Resolution Protocol (ARP, RFC 826). However, proxy ARP 
Redirect
3
2
1
A
B
Host
Packet 1
Packet 2
Packet 1
ICMP redirect
—use Router A
4
KEY 
POINT

138     Chapter 5: IP Services
(RFC 1027) is often ignored, in part because of its lack of use today. To see how they both work, 
Figure 5-3 shows an example of each, with Fred and Barney both trying to reach the web server 
at IP address 10.1.2.200.
Figure 5-3
Comparing ARP and Proxy ARP
Fred follows a normal ARP process, broadcasting an ARP request, with R1’s E1 IP address as the 
target. The ARP message has a Target ﬁeld of all 0s for the MAC address that needs to be learned, 
and a target IP address of the IP address whose MAC address it is searching, namely 10.1.1.1 in 
this case. The ARP reply lists the MAC address associated with the IP address, in this case, the 
MAC address of R1’s E1 interface. 
Proxy ARP uses the exact same ARP message as ARP, but the ARP request is actually requesting 
a MAC address that is not on the local subnet. Because the ARP request is broadcast on the local 
subnet, it will not be heard by the target host—so if a router can route packets to that target host, 
the router issues a proxy ARP reply on behalf of that target. 
For instance, Barney places the web server’s IP address (10.1.2.200) in the target ﬁeld, because 
Barney thinks that he is on the same subnet as the web server due to Barney’s mask of 255.0.0.0. 
The ARP request is a LAN broadcast, so R1, being a well-behaved router, does not forward the ARP 
broadcast. However, knowing that the ARP request will never get to the subnet where 10.1.2.200 
resides, R1 saves the day by replying to the ARP on behalf of the web server. R1 takes the web 
server’s place in the ARP process, hence the name proxy ARP. Also, note that R1’s ARP reply 
contains R1’s E1 MAC address, so that Barney will forward frames to R1 when Barney wants 
to send a packet to the web server.
NOTE
The ARP message itself does not include an IP header, although it does have 
destination and source IP addresses in the same relative position as an IP header. The ARP 
request lists an IP destination of 255.255.255.255. The ARP Ethernet protocol type is 0x0806, 
whereas IP packets have an Ethernet protocol type of 0x0800.
R1
ARP Reply
Source = R1-E1-MAC
Web Server:
10.1.2.200/24
GW = 10.1.2.1
Interface: E1
MAC: R1-E1-MAC
10.1.1.1/24
Barney: 10.1.1.102
Mask: /8
GW = 10.1.1.1
Fred: 10.1.1.101
Mask: /24
GW = 10.1.1.1
Interface: E2
MAC: R1-E2-MAC
10.1.2.1/24
DHCP Server:
10.1.2.202/24
DNS Server:
10.1.2.203/24
ARP Request
Target = 10.1.1.1
ARP Reply
Source = R1-E1-MAC
Proxy logic
used by R1!
ARP Request
Target = 10.1.2.200

ARP, Proxy ARP, Reverse ARP, BOOTP, and DHCP     139
Before the advent of DHCP, many networks relied on proxy ARP, conﬁguring hosts to use the 
default masks in their respective networks. Regardless of whether the proxy version is used, the 
end result is that the host learns a router’s MAC address to forward packets to another subnet.
RARP, BOOTP, and DHCP
The ARP and proxy ARP processes both occur after a host knows its IP address and subnet mask. 
RARP, BOOTP, and DHCP represent the evolution of protocols deﬁned to help a host dynamically 
learn its IP address. All three protocols require the client host to send a broadcast to begin 
discovery, and all three rely on a server to hear the request and supply an IP address to the client. 
Figure 5-4 shows the basic processes with RARP and BOOTP.
Figure 5-4
RARP and BOOTP—Basic Processes
A RARP request is a host’s attempt to ﬁnd its own IP address. So RARP uses the same old ARP 
message, but the ARP request lists a MAC address target of its own MAC address and a target IP 
address of 0.0.0.0. A preconﬁgured RARP server, which must be on the same subnet as the client, 
receives the request and performs a table lookup in its conﬁguration. If that target MAC address 
listed in the ARP request is conﬁgured on the RARP server, the RARP server sends an ARP reply, 
after entering the conﬁgured IP address in the Source IP address ﬁeld.
BOOTP was deﬁned in part to improve IP address assignment features of RARP. BOOTP uses 
a completely different set of messages, deﬁned by RFC 951, with the commands encapsulated 
inside an IP and UDP header. With the correct router conﬁguration, a router can forward the 
BOOTP packets to other subnets—allowing the deployment of a centrally located BOOTP server. 
Also, BOOTP supports the assignment of many other tidbits of information, including the subnet 
mask, default gateway, DNS addresses, and its namesake, the IP address of a boot (or image) 
IP
Hannah
IP: ?.?.?.?
MAC: 0200.1111.1111
Hey Everybody! My MAC Address Is
0200.1111.1111. If You Are a RARP
Server, Please Tell Me My IP Address!
1
1
RARP Broadcast
RARP Reply
2
MAC 
0200.1111.1111   10.1.1.1 
0200.1234.5678   10.1.1.2
0200.5432.1111   10.1.1.3
Configuration
RARP
Your IP Address Is  
10.1.1.1
RARP Server
2
Hannah
IP: ?.?.?.?
MAC: 0200.1111.1111
MAC 
IP   
  
Gateway
0200.1111.1111
10.1.1.1    
  
0200.1234.5678 10.1.1.2
  
0200.5432.1111 
10.1.1.3
10.1.1.200    
10.1.1.200
10.1.1.200
  
Hey Everybody! My MAC Address Is
0200.1111.1111. If You Are a BOOTP 
Server, Please Tell Me My IP Address!
1
1
BOOTP Broadcast 
BOOTP Reply
2
Configuration
10.1.1.200
BOOTP
Your IP Address Is 10.1.1.1  
Your Default Gateway Is 10.1.1.200
…
BOOTP Server 
2
R1
KEY 
POINT
KEY 
POINT

140     Chapter 5: IP Services
server. However, BOOTP does not solve the conﬁguration burden of RARP, still requiring that 
the server be preconﬁgured with the MAC addresses and IP addresses of each client. 
DHCP represents the next step in the evolution of dynamic IP address assignment. Building on the 
format of BOOTP protocols, DHCP focuses on dynamically assigning a variety of information 
and provides ﬂexible messaging to allow for future changes, without requiring predeﬁnition of 
MAC addresses for each client. DHCP also includes temporary leasing of IP addresses, enabling 
address reclamation, pooling of IP addresses, and, recently, dynamic registration of client DNS 
fully qualiﬁed domain names (FQDNs). (See http://www.ietf.org/internet-drafts/draft-ietf-dhc-
fqdn-option-11.txt for more information on FQDN registration.) 
DHCP servers typically reside in a centralized location, with remote routers forwarding the LAN-
broadcast DHCP requests to the DHCP server by changing the request’s destination address to 
match the DHCP server. This feature is called DHCP relay agent. For instance, in Figure 5-3, if 
Fred and Barney were to use DHCP, with the DHCP server at 10.1.2.202, R1 would change Fred’s 
DHCP request from a source and destination of 255.255.255.255, to a source of 10.1.1.255 
(directed broadcast of Fred’s subnet) and destination of 10.1.2.202. The DHCP request would then 
be routed to the DHCP server, and the DHCP response would be forwarded to destination 
10.1.1.255. The router would then broadcast the DHCP response back onto that subnet, as the 
destination address is Fred’s subnet’s broadcast address. The only conﬁguration requirement on 
the router is an ip helper-address 10.1.2.202 interface subcommand on its E1 interface.
Alternatively, R1 could be conﬁgured as a DHCP server—a feature that is not popular in production 
networks, but is certainly fair game for the CCIE written and lab exams. Example 5-2 shows R1’s 
conﬁguration for a DHCP relay agent, as well as an alternative for R1 to provide DNS services for 
subnet 10.1.1.0/24.
Example 5-2
DHCP Conﬁguration Options—R1, Figure 5-3 
! UDP broadcasts coming in E0 will be forwarded as unicasts to 10.1.2.202.
! The source IP will be changed to 10.1.1.255, so that the reply packets will be
! broadcast back out E0.
iiiinnnntttteeeerrrrffffaaaacccceeee    EEEEtttthhhheeeerrrrnnnneeeetttt1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....1111    222255555555....222255555555....222255555555....0000
    iiiipppp    hhhheeeellllppppeeeerrrr----aaaaddddddddrrrreeeessssssss    11110000....1111....2222....222200002222
! Below, an alternative configuration, with R1 as the DHCP server. R1 assigns IP
! addresses other than the excluded first 20 IP addresses in the subnet, and informs the
! clients of their IP addresses, mask, DNS, and default router. Leases are for 0 days,
! 0 hours, and 20 minutes.
iiiipppp    ddddhhhhccccpppp    eeeexxxxcccclllluuuuddddeeeedddd----aaaaddddddddrrrreeeessssssss    11110000....1111....1111....0000    11110000....1111....1111....22220000
!
iiiipppp    ddddhhhhccccpppp    ppppoooooooollll    ssssuuuubbbbnnnneeeetttt1111
            nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....1111....0000    222255555555....222255555555....222255555555....0000
            ddddnnnnssss----sssseeeerrrrvvvveeeerrrr    11110000....1111....2222....222200003333
            ddddeeeeffffaaaauuuulllltttt----rrrroooouuuutttteeeerrrr    11110000....1111....1111....1111
            lllleeeeaaaasssseeee    0000    0000    22220000
KEY 
POINT

HSRP, VRRP, and GLBP     141
Table 5-4 summarizes some of the key comparison points with RARP, BOOTP, and DHCP.
HSRP, VRRP, and GLBP
IP hosts can use several methods of deciding which default router or default gateway to use—
DHCP, BOOTP, ICMP Router Discovery Protocol (IRDP), manual conﬁguration, or even by 
running a routing protocol (although having hosts run a routing protocol is not common today). 
The most typical methods—using DHCP or manual conﬁguration—result in the host knowing a 
single IP address of its default gateway. Hot Standby Router Protocol (HSRP), Virtual Router 
Redundancy Protocol (VRRP), and Gateway Load Balancing Protocol (GLBP) represent a 
chronological list of some of the best tools for overcoming the issues related to a host knowing 
a single IP address as its path to get outside the subnet. 
HSRP allows multiple routers to share a virtual IP and MAC address so that the end-user hosts do 
not realize when a failure occurs. Some of the key HSRP features are as follows:
■
Virtual IP address and virtual MAC active on the Master router
■
Standby routers listen for Hellos from the Active router, defaulting to a 3-second hello interval 
and 10-second dead interval
■
Highest priority (IOS default 100, range 1–255) determines the active router, with pre-emption 
disabled by default
■
Supports tracking, whereby a router’s priority is decreased when a tracked interface fails
■
Up to 255 HSRP groups per interface, enabling an administrative form of load balancing
Table 5-4
Comparing RARP, BOOTP, and DHCP
KEY 
POINT
Feature
RARP
BOOTP
DHCP
Relies on server to allocate IP addresses
Yes
Yes
Yes
Encapsulates messages inside IP and UDP, so they can be 
forwarded to a remote server
No
Yes
Yes
Client can discover its own mask, gateway, DNS, and 
download server
No
Yes
Yes
Dynamic address assignment from a pool of IP addresses, 
without requiring knowledge of client MACs
No
No
Yes
Allows temporary lease of IP address
No
No
Yes
Includes extensions for registering client’s FQDN with a DNS
No
No
Yes
KEY 
POINT

142     Chapter 5: IP Services
■
Virtual MAC of 0000.0C07.ACxx, where xx is the hex HSRP group
■
Virtual IP address must be in the same subnet as the routers’ interfaces on the same LAN
■
Virtual IP address must be different from any of routers’ individual interface IP addresses
Example 5-3 shows a typical HSRP conﬁguration, with two groups conﬁgured. Routers R1 and 
R2 are attached to the same subnet, 10.1.1.0/24, both with WAN links (S0/0.1) connecting them 
to the rest of an enterprise network. The example contains the details and explanation of the 
conﬁguration.
Example 5-3
HSRP Conﬁguration 
! First, on Router R1, two HSRP groups are configured. R1 has a higher priority
! in group 21, with R2 having a higher priority in group 22. R1 is set to preempt
! in group 21, as well as to track interface s0/0.1 for both groups.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....2222    222255555555....222255555555....222255555555....0000
    ssssttttaaaannnnddddbbbbyyyy    22221111    iiiipppp    11110000....1111....1111....22221111
    ssssttttaaaannnnddddbbbbyyyy    22221111    pppprrrriiiioooorrrriiiittttyyyy    111100005555
    ssssttttaaaannnnddddbbbbyyyy    22221111    pppprrrreeeeeeeemmmmpppptttt
    ssssttttaaaannnnddddbbbbyyyy    22221111    ttttrrrraaaacccckkkk    SSSSeeeerrrriiiiaaaallll0000////0000....1111
    ssssttttaaaannnnddddbbbbyyyy    22222222    iiiipppp    11110000....1111....1111....22222222
    ssssttttaaaannnnddddbbbbyyyy    22222222    ttttrrrraaaacccckkkk    SSSSeeeerrrriiiiaaaallll0000////0000....1111
! Next, R2 is configured with a higher priority for HSRP group 22, and with 
! HSRP tracking enabled in both groups. The tracking “decrement” used by R2,
! when S0/0.1 fails, is set to 9 (instead of the default of 10).
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....1111    222255555555....222255555555....222255555555....0000
    ssssttttaaaannnnddddbbbbyyyy    22221111    iiiipppp    11110000....1111....1111....22221111
    ssssttttaaaannnnddddbbbbyyyy    22221111    ttttrrrraaaacccckkkk    SSSSeeeerrrriiiiaaaallll0000////0000....1111
    ssssttttaaaannnnddddbbbbyyyy    22222222    iiiipppp    11110000....1111....1111....22222222
    ssssttttaaaannnnddddbbbbyyyy    22222222    pppprrrriiiioooorrrriiiittttyyyy    111100005555
    ssssttttaaaannnnddddbbbbyyyy    22222222    ttttrrrraaaacccckkkk    SSSSeeeerrrriiiiaaaallll0000////0000....1111    9999
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! On R1 below, for group 21, the output shows that R1 is active, with R2 
! (10.1.1.2) as standby.
! R1 is tracking s0/0.1, with a default “decrement” of 10, meaning that the 
! configured priority of 105 will be decremented by 10 if s0/0.1 fails. 
Router1# sssshhhh    ssssttttaaaannnnddddbbbbyyyy    ggggrrrroooouuuupppp    22221111
FastEthernet0/0 - Group 21
  State is Active
    2 state changes, last state change 00:00:45
  Virtual IP address is 10.1.1.21
  Active virtual MAC address is 0000.0c07.ac15
    Local virtual MAC address is 0000.0c07.ac15 (default)
  Hello time 3 sec, hold time 10 sec
    Next hello sent in 2.900 secs
  Preemption enabled
KEY 
POINT

Network Time Protocol     143
HSRP is Cisco proprietary, has been out a long time, and is widely popular. VRRP (RFC 3768) 
provides a standardized protocol to perform almost the exact same function. The Cisco VRRP 
implementation has the same goals in mind as HSRP, but with these differences:
■
VRRP uses a multicast virtual MAC address (0000.5E00.01xx, where xx is the hex VRRP 
group number).
■
VRRP does not support interface tracking (at least in the 12.2T/12.3 mainline releases).
■
In Cisco IOS Software 12.2T/12.3 mainline releases, VRRP defaults to use pre-emption, but 
HSRP defaults to not use pre-emption. 
■
The VRRP term Master means the same thing as the HSRP term Active.
GLBP is a newer Cisco-proprietary tool that adds load-balancing features in addition to gateway-
redundancy features. Hosts still point to a default gateway IP address, but GLBP causes different 
hosts to send their trafﬁc to one of up to four routers in a GLBP group. To do so, the GLBP Active 
Virtual Gateway (AVG) assigns each router in the group a unique virtual MAC address, following 
the format 0007.B400.xxyy, where xx is the GLBP group number, and yy is a different number for 
each router (01, 02, 03, or 04). When a client ARPs for the (virtual) IP address of its default 
gateway, the GLBP AVG replies with one of the four possible virtual MACs. By replying to ARP 
requests with different virtual MACs, the hosts in that subnet will in effect balance the trafﬁc 
across the routers, rather than send all trafﬁc to the one active router. 
Network Time Protocol
NTP Version 3 (RFC 1305) allows IP hosts to synchronize their time-of-day clocks with a 
common source clock. For instance, routers and switches can synchronize their clocks to make 
event correlation from an SNMP management station more meaningful, by ensuring that any 
events and traps have accurate time stamps.
By design, most routers and switches use NTP client mode, adjusting their clocks based on the 
time as known by an NTP server. NTP deﬁnes the messages that ﬂow between client and server, 
  Active router is local
  Standby router is 10.1.1.2, priority 100 (expires in 7.897 sec)
  Priority 105 (configured 105)
    Track interface Serial0/0.1 state Up decrement 10
  IP redundancy name is "hsrp-Fa0/0-21" (default)
! NOT SHOWN—R1 shuts down S0.0.1, lowering its priority in group 21 by 10. 
! The ddddeeeebbbbuuuugggg below shows the reduced priority value. However, R2 does not become
! active, because R2’s configuration did not include a ssssttttaaaannnnddddbbbbyyyy    22221111    pppprrrreeeeeeeemmmmpppptttt command.
Router1# ddddeeeebbbbuuuugggg    ssssttttaaaannnnddddbbbbyyyy 
*Mar  1 00:24:04.122: HSRP: Fa0/0 Grp 21 Hello  out 10.1.1.1 Active  pri 95 vIP 10.1.1.21
Example 5-3
HSRP Conﬁguration (Continued)
KEY 
POINT

144     Chapter 5: IP Services
and the algorithms a client uses to adjust its clock. Routers and switches can also be conﬁgured as 
NTP servers, as well as using NTP symmetric active mode—a mode in which the router or switch 
mutually synchronizes with another NTP host. 
NTP servers may reference other NTP servers to obtain a more accurate clock source as deﬁned 
by the stratum level of the ultimate source clock. For instance, atomic clocks and Global 
Positioning System (GPS) satellite transmissions provide a source of stratum 1 (lowest/best 
possible stratum level). For an enterprise network, the routers and switches can refer to a low-
stratum NTP source on the Internet, or purpose-built rack-mounted NTP servers, with built-in 
GPS capabilities, can be deployed. 
Example 5-4 shows a sample NTP conﬁguration on four routers, all sharing the same 10.1.1.0/24 
Ethernet subnet. Router R1 will be conﬁgured as an NTP server. R2 acts as an NTP static client 
by virtue of the static conﬁguration referencing R1’s IP address. R3 acts as an NTP broadcast 
client by listening for R1’s NTP broadcasts on the Ethernet. Finally, R4 acts in NTP symmetric 
active mode, conﬁgured with the ntp peer command.
Example 5-4
NTP Conﬁguration 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! First, R1’s configuration, the nnnnttttpppp    bbbbrrrrooooaaaaddddccccaaaasssstttt command under interface fa0/0
! causes NTP to broadcast NTP updates on that interface. The first three of the 
! four global NTP commands configure authentication; these commands are identical 
! on all the routers.
R1# sssshhhhoooowwww    rrrruuuunnnnnnnniiiinnnngggg----ccccoooonnnnffffiiiigggg
interface FastEthernet0/0
 ntp broadcast
!
ntp authentication-key 1 md5 1514190900 7
ntp authenticate
ntp trusted-key 1
ntp master 7
! Below, the “127.127.7.1” notation implies that this router is the NTP clock 
! source. The clock is synchronized, with stratum level 7, as configured on the
! nnnnttttpppp    mmmmaaaasssstttteeeerrrr    7777 command above. 
R1# sssshhhhoooowwww    nnnnttttpppp    aaaassssssssoooocccciiiiaaaattttiiiioooonnnnssss 
      address         ref clock     st  when  poll reach  delay  offset    disp
*~127.127.7.1      127.127.7.1       6    22    64  377     0.0    0.00     0.0
 * master (synced), # master (unsynced), + selected, - candidate, ~ configured
R1# sssshhhhoooowwww    nnnnttttpppp    ssssttttaaaattttuuuussss
Clock is synchronized, stratum 7, reference is 127.127.7.1
nominal freq is 249.5901 Hz, actual freq is 249.5901 Hz, precision is 2**16
reference time is C54483CC.E26EE853 (13:49:00.884 UTC Tue Nov 16 2004)
clock offset is 0.0000 msec, root delay is 0.00 msec
root dispersion is 0.02 msec, peer dispersion is 0.02 msec
KEY 
POINT

Network Time Protocol     145
! R2 is configured below as an NTP static client. Note that the nnnnttttpppp    cccclllloooocccckkkk----ppppeeeerrrriiiioooodddd 
! command is automatically generated as part of the synchronization process, and 
! should not be added to the configuration manually.
R2# sssshhhhoooowwww    rrrruuuunnnn    |    bbbbeeeeggggiiiinnnn    nnnnttttpppp
ntp authentication-key 1 md5 1514190900 7
ntp authenticate
ntp trusted-key 1
ntp clock-period 17208144
ntp server 10.1.1.1
end
! Next, R3 has been configured as an NTP broadcast client. The nnnnttttpppp    bbbbrrrrooooaaaaddddccccaaaasssstttt    cccclllliiiieeeennnntttt 
! command on R3 tells it to listen for the broadcasts from R1. This configuration
! relies on the nnnnttttpppp    bbbbrrrrooooaaaaddddccccaaaasssstttt subcommand on R1’s Fa0/0 interface, as shown at the
! beginning of this example.
R3# sssshhhhoooowwww    rrrruuuunnnn
interface Ethernet0/0
 ntp broadcast client
! R4’s configuration is listed, with the nnnnttttpppp    ppppeeeeeeeerrrr 
! command implying the use of symmetric active mode.   
R4# sssshhhhoooowwww    rrrruuuunnnn    |    bbbbeeeegggg    nnnnttttpppp
ntp authentication-key 1 md5 0002010300 7
ntp authenticate
ntp trusted-key 1
ntp clock-period 17208233
ntp peer 10.1.1.1
Example 5-4
NTP Conﬁguration (Continued)

146     Chapter 5: IP Services
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 5-5 lists the protocols mentioned in this chapter and their respective standards documents. 
Table 5-6 lists some of the most popular Cisco IOS commands related to the topics in this chapter. 
Table 5-5
Protocols and Standards for Chapter 5
Name
Standardized In
ICMP
RFCs 792 and 950
ARP
RFC 826
Proxy ARP
RFC 1027
RARP
RFC 903
BOOTP
RFC 951
DHCP
RFC 2131
DHCP FQDN option
Internet-Draft 
HSRP
Cisco proprietary
VRRP
RFC 3768
GLBP
Cisco proprietary
CDP
Cisco proprietary
NTP
RFC 1305
Table 5-6
Command Reference for Chapter 5 
Command
Description
ip dhcp pool name
Creates DHCP pool
default-router address [address2...address8]
DHCP pool subcommand to list the gateways 

Foundation Summary     147
Command
Description
dns-server address [address2...address8]
DHCP pool subcommand to list DNS servers 
lease {days [hours][minutes] | inﬁnite}
DHCP pool subcommand to deﬁne the lease length
network network-number [mask | preﬁx-length]
DHCP pool subcommand to deﬁne IP addresses that 
can be assigned
ip dhcp excluded-address low-address 
high-address]
DHCP pool subcommand to disallow these 
addresses from being assigned
host address [mask | preﬁx-length]
DHCP pool subcommand, used with hardware-
address or client-identiﬁer, to predeﬁne a single 
host’s IP address
hardware-address hardware-address type
DHCP pool subcommand to deﬁne MAC address; 
works with host command 
show ip dhcp binding [ip-address]
Lists addresses allocated by DHCP
show ip dhcp server statistics
Lists stats for DHCP server operations
standby [group-number] ip [ip-address 
[secondary]]
Interface subcommand to enable an HSRP group and 
deﬁne the virtual IP address
standby [group-number] preempt [delay 
{minimum delay | reload delay | sync delay}]
Interface subcommand to enable pre-emption and set 
delay timers
standby [group-number] priority priority
Interface subcommand to set the HSRP group 
priority for this router 
standby [group-number] timers [msec] 
hellotime [msec] holdtime
Interface subcommand to set HSRP group timers
standby [group-number] track interface-type 
interface-number [interface-priority]
Interface subcommand to list HSRP tracked 
interfaces and deﬁne priority values deducted when 
the interface fails
show standby [type number [group]] [active | 
init | listen | standby] [brief | all]
Lists HSRP statistics
ntp peer ip-address [version number]
[key keyid] [source interface] [prefer]
Global command to enable symmetric active
mode NTP 
ntp server ip-address [version number]
[key keyid] [source interface] [prefer]
Global command to enable static client mode NTP
ntp broadcast [version number]
Interface subcommand on an NTP server to cause 
NTP broadcasts on the interface
continues
Table 5-6
Command Reference for Chapter 5 (Continued)

148     Chapter 5: IP Services
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
HSRP, VRRP, GLBP, ARP, RARP, proxy ARP, BOOTP, DHCP, NTP symmetric active 
mode, NTP server mode, NTP client mode, NTP
Refer to the CD-based glossary to check your answers.
Command
Description
ntp broadcast client
Interface subcommand on an NTP client to cause it 
to listen for NTP broadcasts
ntp master [stratum]
Global command to enable NTP server
show ntp associations
Lists associations with other NTP servers and clients
show ntp status
Displays synchronization status, stratum level, and 
other basic information
Table 5-6
Command Reference for Chapter 5 (Continued)

Memory Builders     149
Further Reading
More information about several of the topics in this chapter can be easily found in a large number 
of books and online documentation. The RFCs listed in Table 5-5 of the “Foundation Summary” 
section also provide a great deal of background information for this chapter. Here are a few 
references for more information about some of the less popular topics covered in this chapter:
■
Proxy ARP—http://www.cisco.com/en/US/tech/tk648/tk361/
technologies_tech_note09186a0080094adb.shtml 
■
GLBP—http://www.cisco.com/en/US/partner/products/sw/iosswrel/ps1839/
products_white_paper09186a00801541c8.shtml 
■
VRRP—http://www.cisco.com/univercd/cc/td/doc/product/software/ios120/120newft/
120limit/120st/120st18/st_vrrpx.htm 

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■General Networking Theory 
— Standards
— Protocol Mechanics
■IP
— Applications
— Transport
— Network Management
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching exam topics: 
■TCP
■UDP
■TCP/IP applications
■SNMP management

C H A P T E R 6
TCP/IP Transport and 
Application Services
This last of the three chapters in this part of the book covers a wide variety of topics in TCP/IP’s 
transport and application layers. Because most of the basics related to these topics should be 
familiar to the typical CCIE Routing and Switching candidate, the chapter brieﬂy hits the 
highlights, summarizes key facts about the protocols, and expands upon particular features in 
some cases.  
“Do I Know This Already?” Quiz
Table 6-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following items are features of both TCP and UDP? 
a. Identiﬁcation of application processes by using Port numbers
b. Error recovery
c. Flow control
d. Supplying a header checksum
Table 6-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
TCP and UDP
1–3
TCP/IP Applications
4–5
Network Management and SNMP
6–7
Total Score

152     Chapter 6: TCP/IP Transport and Application Services
2.
Which of the following TCP code bits are not used for connection initiation or termination? 
a. PSH
b. RST
c. SYN
d. FIN
e. ACK
f. URG
3.
Which of the following statements is always true about TCP ﬂow control and error recovery? 
a. A TCP sender considers a connection’s dynamic window size to be based on the Win-
dow Size ﬁeld in segments received on that connection.
b. A TCP sender can use a window size based on the average between two settings: the 
advertised window and the congestion window. 
c. After packet loss, a TCP sender both resends the lost TCP segment and sets the URG 
code bit. 
d. The TCP Acknowledgement header ﬁeld contains the number associated with the last 
byte of data that was acknowledged. 
4.
Which of the following statements are true regarding a protocol, its use of TCP or UDP, and 
its well-known port number(s)? 
a. HTTP uses TCP well-known port 80.
b. SMTP uses UDP well-known port 53.
c. LDAP uses TCP well-known port 443.
d. SNMP uses TCP well-known port 162.
e. POP3 uses TCP well-known port 110.
5.
Which of the following are true regarding active and passive mode FTP? 
a. Active mode causes the FTP server to initiate the TCP connection to the FTP client.
b. Active mode causes the FTP server to allocate and begin listening on a dynamic unused 
port, and notify the FTP client of that port number so the client can connect to that port.
c. Passive mode causes the FTP server to allocate and begin listening on a dynamic unused 
port, and notify the FTP client of that port number so that the client can connect to that 
port.
d. Passive mode does not require any port numbers to be passed in either direction between 
the client and server; the client simply creates a data connection to the server’s well-
known port 20.

“Do I Know This Already?” Quiz     153
6.
Which of the following are true about SNMP security? 
a. SNMP Version 1 calls for the use of community strings that are passed as clear text.
b. SNMP Version 2c calls for the use of community strings that are passed as MD5 mes-
sage digests generated with private keys.
c. SNMP Version 3 allows for authentication using MD5 message digests generated with 
private keys.
d. SNMP Version 3 authentication also requires concurrent use of encryption, typically 
done with DES.
7.
Which of the following statements are true regarding features of SNMP based on the SNMP 
version? 
a. SNMP Version 2 added the GetNext protocol message to SNMP.
b. SNMP Version 3 added the Inform protocol message to SNMP.
c. SNMP Version 2 added the Inform protocol message to SNMP.
d. SNMP Version 3 expanded the SNMP Response protocol message so that it must be 
used by managers in response to Traps sent by agents.
e. SNMP Version 3 enhanced SNMP Version 2 security features, but not other features.

154     Chapter 6: TCP/IP Transport and Application Services
Foundation Topics
TCP and UDP
The Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) are the two most 
popular transport layer protocols in the TCP/IP suite. UDP consumes fewer bytes of overhead and 
requires less processing. TCP requires more overhead and more processing, but offers many useful 
functions, including error recovery. Table 6-2 summarizes the key comparisons between the two 
protocols.
The TCP and UDP headers differ in length (20 and 8 bytes, respectively), mainly because TCP has 
more functions to support. Figure 6-1 shows the TCP and UDP header formats. Note that the TCP 
header shows the Options ﬁeld, which extends the length of the TCP header past 20 bytes, but 
always to some multiple of 4 bytes. 
Table 6-2
TCP and UDP Functional Comparison
Function
TCP
UDP
Multiplexing using 
ports
Yes; port numbers uniquely identify the processes 
(socket programs) on the computers sending and 
receiving the data.
Same as TCP.
Ordered data 
transfer 
Yes; TCP reorders any data that is received out of order.
No; UDP has no 
concept of ordering 
of data.
Reliable transfer
Yes; TCP acknowledges data, resending lost segments, 
using the Sequence and Acknowledgment ﬁelds in the 
TCP header.
Not supported by 
UDP.
Flow control
Yes; TCP uses a granted (advertised) window, as well as 
a congestion window, to control each TCP sender’s 
dynamic window.
Not supported by 
UDP.
Connections
Yes; the three-message TCP connection setup process 
initializes the port numbers.
UDP is 
connectionless.
IP protocol type
6
17
Base RFC
793
768
KEY 
POINT

TCP and UDP     155
Figure 6-1
TCP and UDP Headers
Note that UDP operates identically to TCP in regard to the Port Number ﬁelds and the Header 
Checksum ﬁeld. The UDP Length ﬁeld identiﬁes the length of the UDP message, including the 
UDP header and data. The ﬁelds inside the TCP header are explained in the next few sections of 
this chapter. 
TCP Connections and Port Numbers
Two host applications using TCP must establish a TCP connection before data can ﬂow. Each 
connection exists between a pair of TCP sockets, with a socket being deﬁned as an IP address 
of the host, the port number used, and the transport layer protocol (TCP in this case). The 
connection establishment process essentially initializes the sockets, including the source and 
destination ports, as well as the Sequence and Acknowledgement ﬁelds. Figure 6-2 depicts a 
typical three-way TCP connection establishment, as well as the typical four-way connection 
termination process.
Source Port 16
Destination Port 16
Sequence Number 32
TCP Header
Bit 31
Bit 0
Acknowledgement Number 32
Code Bits 6
Window 16
Urgent Pointer 16
Header Checksum 16
Res. 6
HLen 4
Options and Padding (Multiple of 32)
Data (Variable)
Source Port 16
Destination Port 16
Message Length 16
Header Checksum 16
UDP Header
Bit 31
Bit 0
KEY 
POINT

156     Chapter 6: TCP/IP Transport and Application Services
Figure 6-2
TCP Connection Establishment and Termination
In the connection establishment phase, the two hosts select port numbers, select the Sequence and 
Acknowledgement ﬁelds, and use TCP code bits to identify the messages in the three-way 
handshake for connection establishment. First, for port numbers, the server must already be 
listening for connection requests from clients, with those requests being to a particular well-
known port—in this case, HTTP port 80. (Well-known ports are listed at http://www.iana.org.) 
The client picks a currently unused port number to use as the source port, typically a value of 1024 
or greater. Note in Figure 6-2 that when comparing the segments going in opposite directions, the 
Port Number ﬁelds are reversed.
The TCP header includes several 1-bit ﬁelds, called code bits or ﬂags, that are used for a variety 
of purposes. The SYN and ACK ﬂags identify segments as either the ﬁrst or second in a new TCP 
connection: a segment with just the SYN ﬂag set is the ﬁrst segment in a new connection, and a 
segment with both SYN and ACK set is the second segment in a new connection. These ﬂags allow 
hosts to easily recognize new connection requests.
The initial sequence numbers can be set to any valid value, and often are not set to 0. Remember 
that error recovery, using these ﬁelds, happens independently in both directions. So, the ﬁrst 
segment in the three-way handshake of Figure 6-2 sets the left-to-right sequence number; the 
second segment sets the right-to-left sequence number and also acknowledges the ﬁrst segment; 
and the third segment acknowledges the right-to-left sequence number.
Connection termination can be accomplished in one of several ways. The most benign case uses 
a four-segment ﬂow, as shown in the bottom half of Figure 6-2, with the ACK and FIN ﬂags 
being used.
Web Browser
(Port 1027)
Web Server
(Port 80)
SPORT=1027, DPORT=80, SEQ=200, SYN
SPORT=80, DPORT=1027, SEQ=1450, ACK=201, SYN, ACK
SPORT=1027, DPORT=80, SEQ=201, ACK=1451, ACK
TCP Connection Establishment, Initiated by Client
SPORT=1027, DPORT=80, ACK, FIN
SPORT=80, DPORT=1027, ACK
SPORT=80, DPORT=1027, ACK, FIN
SPORT=1027, DPORT=80, ACK
TCP Connection Termination, Initiated by Client

TCP and UDP     157
TCP Error Recovery 
To perform error recovery, TCP acknowledges the receipt of data; when data is not acknowledged, 
the TCP sender can resend the data. Figure 6-3 shows an example in which the web server sends 
three 1000-byte segments, with the second segment being lost, and the data being recovered.
Figure 6-3
TCP Error Recovery
The example shows a case of error recovery in which the sender (the web server) got an 
acknowledgement that implied that at least one segment was lost. Note that the Acknowledgement 
ﬁeld states the next expected byte—not the last acknowledged byte. Also note that the 
Acknowledgement (and Sequence) ﬁelds number the bytes, not the TCP segments. Also, the 
sender keeps a timer, based on TCP’s Measured Round-Trip Time (MRTT), so that if an expected 
acknowledgement is not received, the sender can resend all the unacknowledged data without 
waiting for the receiver to request a repeat.
TCP Dynamic Windowing
Like many other protocols that perform error recovery, TCP uses a sliding window mechanism to 
perform ﬂow control. The mechanics are probably familiar to most readers—the receiver states a 
window size, in bytes, using the Window ﬁeld of its TCP segments sent over the TCP connection. 
This window is sometimes called the receiver’s window, the receiver’s advertised window, or the 
granted window. The sender can then send only one window’s worth of data to the receiver without 
receiving an acknowledgement. The end goal with this basic dynamic windowing is to allow the 
receiver to dictate how fast the sender can send data, thereby protecting the receiver from running 
out of memory. The receiver can increase or decrease the sender’s window size for the connection 
by changing the window size stated in subsequent TCP segments. For instance, in Figure 6-3, the 
web server would have needed a window size of at least 3000 to send the ﬁrst three segments 
shown in the ﬁgure.
Web
Browser
Web
Server
1000 Bytes of Data, Sequence = 1000
1000 Bytes of Data, Sequence = 2000
1000 Bytes of Data, Sequence = 3000
No Data, Acknowledgment = 4000
No Data, Acknowledgment = 2000
1000 Bytes of Data, Sequence = 2000
                     I Probably Lost One.
                  ACK What I Got in
Order!
I Just Got 2000-2999, 
and I Already Had
3000-3999. Ask for
4000 Next.
       He Lost the Segment
 with Sequence =
 2000. Resend It!

158     Chapter 6: TCP/IP Transport and Application Services
Interestingly, TCP senders limit their dynamic window based on two different factors—the 
popularly known advertised window, described in the previous paragraph, and another mechanism 
that allows the sender to react to packet loss by lowering the size of the window. This additional 
mechanism, deﬁned in RFC 2581 as “TCP Congestion Control,” deﬁnes the details of how TCP 
should react to segment loss by slowing down. In effect, a TCP sender uses a sliding window, with 
the sliding window being the smaller of the two possible values—either the window granted to the 
sender by the receiver, or the calculated window deﬁned in RFC 2581. This calculated window is 
called the congestion window (CWND), and is the most important part of TCP Congestion 
Avoidance logic. This logic is summarized in the following list, with details to follow:
1.
At connection establishment, CWND is set to a low value, often equal to one maximum 
segment size (MSS).
2.
If no segments are lost, CWND grows using Slow Start logic, which increases CWND at an 
exponential rate.
3.
For each lost segment, CWND is halved.
4.
After the lost segments have been successfully re-sent, CWND grows again, beginning with 
Slow Start. 
5.
After loss of segment(s), while CWND grows, it grows using Slow Start logic until CWND 
reaches a value of half the original CWND. Then, CWND slows down its growth, using an 
algorithm called Congestion Avoidance, which increases CWND at a linear rate.
More generally, the algorithm starts with a small window. The window grows rapidly, but when 
congestion occurs, the window is limited by lowering the CWND variable. Once the data is 
successfully re-sent, CWND can grow rapidly—but not too rapidly, because this TCP sender 
might have been causing the congestion that resulted in the original packet loss. The next few 
paragraphs take a closer look at the component steps in the list.
In Step 1, the TCP sender can send only one maximum size segment before requiring an 
acknowledgement—a relatively severe, small window. The TCP maximum segment size (MSS) 
deﬁnes the largest allowed size of the TCP Data ﬁeld, not counting the TCP header itself. With the 
typical IP MTU default on most interfaces being 1500 bytes (MTU includes the IP header, by the 
way), the typical MSS is 1460. 
In Step 2, CWND grows exponentially, using an algorithm called TCP Slow Start—a seemingly 
contradictory name. (Slow Start can be thought of as “slower than if there were no congestion 
window concept.”) CWND is likely to grow to some number larger than the granted window over 
the course of a few seconds.
KEY 
POINT

TCP and UDP     159
Most loss occurs because of congestion, so in Step 3, CWND is lowered quickly. The idea 
is simple: slow down TCP senders when packets are lost, which in turn should decrease 
network congestion. The reaction, halving CWND for each lost segment, means that the 
reaction is swift.
In Steps 4 and 5, the segments have been recovered, and the sender could be limiting its 
window based on the recently-lowered CWND. CWND can grow again at this point, but rather 
than rush immediately to the previous-high CWND value, the RFC calls for a less-aggressive 
growth rate as CWND approaches its value prior to the segment loss. Figure 6-4 depicts a graph 
of what happens with CWND upon segment loss, and how the sender grows CWND after the 
packet loss.
Figure 6-4
CWND Growth with Slow Start and Congestion Avoidance After Multiple Segment Loss
The graph shows the changes to CWND from connection establishment through multiple segment 
loss. Because multiple segments were lost, the TCP sender halved CWND multiple times, and in 
this case, CWND was lowered to its minimum value—a single MSS. Before lowering CWND, the 
sender calculated a variable called Slow Start Threshold (SSThresh), which is half of the original 
CWND before segments were lost. 
Now back to Steps 4 and 5. In Step 4, the sender grows CWND using the exponential Slow Start 
logic, until CWND reaches SSThresh, at which point it grows CWND more slowly, using TCP 
Congestion Avoidance logic. Essentially, the SSThresh variable identiﬁes the threshold at which 
the sender stops using Slow Start logic, and transitions to using Congestion Avoidance logic, to 
grow CWND.
TCP Header Miscellany
Thus far, this chapter has reviewed many of the features of TCP, including many of the TCP 
Header ﬁelds. Table 6-3 lists the Header ﬁelds not mentioned elsewhere in this chapter, with a brief 
explanation of each one.
CWND
SSthresh
Single mss
Slow Start and
Congestion Avoidance
Time

160     Chapter 6: TCP/IP Transport and Application Services
TCP/IP Applications
Although most CCIE candidates use the TCP/IP application protocols on a regular basis, some of 
the underlying details may be easily ignored while using the protocols. Therefore, Table 6-4 
summarizes the base RFC, transport layer protocol, and TCP or UDP port number used by many 
of the more popular TCP/IP application protocols. 
Table 6-3
Remaining TCP Header Fields 
Field Name
Function
PSH
Meaning “Push,” this code bit (represented by Code bits in the TCP header 
diagram in Figure 6-3) is set by a TCP sender to cause the TCP receiver to 
immediately pass that segment’s data to the receiver’s application socket, along 
with all other in-order data that the receiver has yet to give to the application.
URG
Meaning “Urgent,” this code bit (represented by Code bits in the TCP header 
diagram in Figure 6-3) is set by the TCP sender to cause the TCP receiver to 
immediately pass this segment’s data to the receiving application process. Any 
other data that had been received earlier on this connection, but not yet passed 
to the application, does not have to be passed to the receiving application at 
this time.
Urgent Pointer
Used only when the URG bit is set, this 16-bit ﬁeld deﬁnes the offset into this one 
segment’s Data ﬁeld at which the urgent data ends. 
Offset (HLEN)
Deﬁnes the length of the header (HLEN), alternately called the offset to reach the 
end of the header. The value in the ﬁeld, multiplied by 4, is the actual header 
length in bytes.
Checksum
Checksum computed against the TCP header, not including the TCP data.
Table 6-4
TCP/IP Application Layer Protocols 
Protocol
Transport Protocol
Well-Known Port
RFC
Telnet
TCP
23
318
FTP
TCP
20, 21
959
TFTP
UDP
69
1350
SMTP
TCP
25
2821
POP3
TCP
110
1939
IMAP
TCP
143
3501
TLS/SSL*
TCP
443
2246
LDAP
TCP
389
2251
KEY 
POINT

TCP/IP Applications     161
* SSL is defined by Netscape, with TLS being a very similar protocol based on SSL and standardized by the IETF.
The next few sections cover a handful of topics related to some of the application layer protocols.
Passive and Active Mode FTP
FTP clients and servers use the typical TCP/IP client/server model for the FTP control connection, 
with the client initiating a TCP connection to well-known FTP port 21. FTP transfers commands 
and command acknowledgements over the this TCP control connection. However, at some point, 
data needs to be transferred—and FTP uses a separate but correlated TCP connection for the actual 
data transfer. 
FTP clients use one of two modes, passive or active, to deﬁne the details of how an FTP data 
connection is established. With FTP active mode, the server initiates the TCP connection to the 
client, but with FTP passive mode, the client initiates the connection to the server. But passive 
mode has a few twists as well, as shown in Figure 6-5. The top part of the ﬁgure shows a passive 
FTP data connection establishment:
1.
The server allocates a dynamic unused port number and starts listening on that port.
2.
The server uses the FTP PORT command to tell the client on which port the server is now 
listening.
3.
The client allocates a local unused port number.
4.
The client initiates a new data connection to the server.
5.
The server conﬁrms that this one data connection request came from the same client to which 
the server sent the message in Step 2.
KEY 
POINT
Protocol
Transport Protocol
Well-Known Port
RFC
HTTP
TCP
80
2616
DNS
TCP/UDP
53
1034, 1035
NetBIOS Name Service
UDP
137
1002
NetBIOS Datagram
UDP
138
1002
NetBIOS Session Service
TCP
139
1002
SNMP
UDP
161, 162
Various
BGP
TCP
179
Various
RIP
UDP
520
Various
Table 6-4
TCP/IP Application Layer Protocols (Continued)

162     Chapter 6: TCP/IP Transport and Application Services
Figure 6-5
Passive and Active FTP Behavior
The bottom half of Figure 6-5 shows an active FTP data connection establishment:
1.
The client allocates a dynamic unused port number and starts listening on that port.
2.
The client uses the FTP PORT command to tell the server on which port the client is now 
listening.
3.
The server uses well-known port 20.
4.
The server initiates a new data connection to the client. 
Table 6-5 compares the two FTP modes with regard to the key points shown in Figure 6-5.
Table 6-5
Comparison of FTP Active and Passive Modes
KEY 
POINT
Active Mode
Passive Mode
Port number on client
Dynamic port
Dynamic port
Port number on server
20
Dynamic port
Who ﬁrst listens on a local port, in preparation 
for an incoming TCP connection?
Client
Server
Who uses the FTP PORT command to tell the 
other host on which port it is listening?
Client
Server
Who initiates the connection?
Server
Client
FTP Client
FTP Server
Sends PORT 2001  over Control Connection
Allocates unused port 2001
and listens for new connections
New Data Connection: SYN, DPORT=2001, SPORT=4100
Passive Mode
1
Is source IP of this new
request the right host?
5
2
Allocates unused port 4100
3
4
FTP Client
Allocates unused port 4100
and listens for new connections
FTP Server
Sends PORT 4100  over Control Connection
Simply uses well-known
port 20
New Data Connection: SYN, DPORT=4100, SPORT=20
Active Mode
3
2
1
4

Network Management and SNMP     163
Application Authentication and Privacy
Many of the application layer protocols mentioned in this chapter have built-in authentication 
through the use of a basic password mechanism. However, many of these protocols—for instance, 
Telnet, FTP, and TFTP—send the usernames and passwords in clear text. 
Some of the more recently deﬁned or updated protocols provide stronger security. For example, 
Secure Shell (SSH) provides an alternative to Telnet but with strong authentication and privacy. 
SSH was originally intended as a secure replacement for the Unix r-commands. SSH uses IPsec 
encryption for privacy and authentication. POP3 is another example of stronger authentication, 
with a hash algorithm used to create a one-time digest of the password, which allows 
authentication without sending the password in clear text.
Secure Sockets Layer (SSL) is a particularly important security protocol related to TCP/IP 
applications. SSL gets its name in part from the fact that it sits just below the TCP/IP application 
protocol, with those applications using sockets. SSL provides security to any application that uses 
SSL by using a message digest for strong authentication, and by using encryption for privacy. SSL 
was originally created by Netscape to be used with HTTP, creating a secure HTTP protocol that 
is often called HTTPS for “HTTP Secure.” Netscape has developed speciﬁcations up through SSL 
Version 3. 
SSL has been standardized by the IETF in RFC 2246 and renamed Transport Layer Security 
(TLS). (Note that TLS Version 1 and SSL Version 3 are not completely compatible, but they 
perform the same type of functions.) Because SSL/TLS provides strong authentication and privacy 
for any application that uses it, the IETF has deﬁned several RFCs that detail how unsecure, older 
applications can use TLS for better security. For example, HTTP, SMTP, POP3, and IMAP all have 
RFCs that deﬁne how they could use TLS. 
Network Management and SNMP
This ﬁnal section of the chapter summarizes some of the core SNMP concepts and details, 
particularly with regard to features of different SNMP versions. The Simple Network 
Management Protocol (SNMP), or more formally, the Internet Standard Management Framework, 
uses a structure in which the device being managed (the SNMP agent) has information that the 
management software (the SNMP manager) wants to display to someone operating the network. 
Each SNMP agent keeps a database, called a Management Information Base (MIB), that holds a 
large variety of data about the operation of the device on which the agent resides. The manager 
collects the data by using SNMP.

164     Chapter 6: TCP/IP Transport and Application Services
SNMP has been deﬁned with four major functional areas to support the core function of allowing 
managers to manage agents:
■
Data Deﬁnition—The conventions for syntax for how to deﬁne the data to an agent or 
manager. These speciﬁcations are called the Structure of Management Information (SMI). 
■
MIBs—Over 100 Internet standards deﬁne different MIBs, each for a different technology 
area, with countless vendor-proprietary MIBs as well. The MIB deﬁnitions conform to the 
appropriate SMI version.
■
Protocols—The messages used by agents and managers to exchange management data. 
■
Security and Administration—Deﬁnitions for how to secure the exchange of data between 
agents and managers.
Interestingly, by separating SNMP into these major functional areas, each part has been improved 
and expanded independently over the years. However, it is important to know a few of the main 
features added for each ofﬁcial SNMP version, as well as for a pseudo-version called SNMPv2c, 
as summarized in Table 6-6.
Table 6-6 hits the highlights of the comparison points between the various SNMP versions. As you 
might expect, each release builds on the previous one. For example, SNMPv1 deﬁned community 
strings for use as simple clear-text passwords. SNMPv2 removed the requirement for community 
strings—however, backward compatibility for SNMP communities was deﬁned via an optional 
RFC (1901). Even SNMPv3, with much better security, supports communities to allow backward 
compatibility.
Table 6-6
SNMP Version Summaries
KEY 
POINT
SNMP Version
Description
1
Uses SMIv1, simple authentication with communities, but used MIB-I originally.
2
Uses SMIv2, removed requirement for communities, added GetBulk and Inform 
messages, but began with MIB-II originally.
2c
Pseudo-release (RFC 1905) that allowed SNMPv1-style communities with 
SNMPv2; otherwise equivalent to SNMPv2.
3
Mostly identical to SNMPv2, but adds signiﬁcantly better security, although it 
supports communities for backward compatibility. Uses MIB-II.
NOTE
The use of SNMPv1 communities with SNMPv2, based on RFC 1901, has popularly 
been called SNMP Version 2c, with c referring to “communities,” although it is arguably not a 
legitimate full version of SNMP.

Network Management and SNMP     165
The next few sections provide a bit more depth about the SNMP protocol, with additional details 
about some of the version differences.
SNMP Protocol Messages
The SNMPv1 and SNMPv2 protocol messages (RFC 3416) deﬁne how a manager and agent, or 
even two managers, can communicate information. For instance, a manager can use three different 
messages to get MIB variable data from agents, with an SNMP Response message returned by the 
agent to the manager supplying the MIB data. SNMP uses UDP exclusively for transport, using 
the SNMP Response message to both acknowledge receipt of other protocol messages and supply 
SNMP information.
Table 6-7 summarizes the key information about each of the SNMP protocol messages, including 
the SNMP version in which the message ﬁrst appeared.
Table 6-7
SNMP Protocol Messages (RFCs 1157 and 1905) 
KEY 
POINT
Message 
Initial 
Version
Response 
Message
Typically 
Sent By
Main Purpose
Get
1
Response
Manager
A request for a single variable’s value.
GetNext 
1
Response
Manager
A request for the next single MIB leaf 
variable in the MIB tree. 
GetBulk
2
Response
Manager
A request for multiple consecutive 
MIB variables with one request. 
Useful for getting complex structures, 
for example, an IP routing table. 
Response
1
None
Agent
Used to respond with the information 
in Get and Set requests.
Set
1
Response
Manager
Sent by a manager to an agent to tell 
the agent to set a variable to a 
particular value. The agent replies 
with a Response message.
Trap
1
None
Agent
Allows agents to send unsolicited 
information to an SNMP manager. 
The manager does not reply with any 
SNMP message.
Inform
2
Response
Manager
A message used between SNMP 
managers to allow MIB data to be 
exchanged.

166     Chapter 6: TCP/IP Transport and Application Services
The three variations of the SNMP Get message, and the SNMP Response message, are typically 
used when someone is actively using an SNMP manager. When a user of the SNMP manager asks 
for information, the manager sends one of the three types of Get commands to the agent. The agent 
replies with an SNMP Response message. The different variations of the Get command are useful, 
particularly when the manager wants to view large portions of the MIB. An agent’s entire MIB—
whose structure can vary from agent to agent—can be discovered with successive GetNext 
requests, or with GetBulk requests, using a process called a MIB walk. 
The SNMP Set command allows the manager to change something on the agent. For example, the 
user of the management software can specify that a router interface should be shut down; the 
management station can then issue a Set command for a MIB variable on the agent. The agent sets 
the variable, which tells Cisco IOS Software to shut down the interface. 
SNMP Traps are unsolicited messages sent by the agent to the management station. For example, 
when an interface fails, a router’s SNMP agent could send a Trap to the SNMP manager. The 
management software could then highlight the failure information on a screen, e-mail ﬁrst-level 
support personnel, page support, and so on. Also of note, there is no speciﬁc message in response 
to the receipt of a Trap; technically, of the messages in Table 6-7, only the Trap and Response 
messages do not expect to receive any kind of acknowledging message.
Finally, the Inform message allows two SNMP managers to exchange MIB information about 
agents that they both manage. 
SNMP MIBs
SNMP Versions 1 and 2 included a standard generic MIB, with initial MIB-I (version 1, RFC 
1156) and MIB-II (version 2, RFC 1213). MIB-II was actually created in between the release 
of SNMPv1 and v2, with SNMPv1 supporting MIB-II as well. After the creation of the MIB-II 
speciﬁcation, the IETF SNMP working group changed the strategy for MIB deﬁnition. Instead 
of the SNMP working group creating standard MIBs, other working groups, in many different 
technology areas, were tasked with creating MIB deﬁnitions for their respective technologies.
As a result, hundreds of standardized MIBs are deﬁned. Additionally, vendors create their own 
vendor-proprietary MIBs. 
The Remote Monitoring MIB (RMON, RFC 2819) is a particularly important standardized MIB 
outside MIB-II. An SNMP agent that supports the RMON MIB can be programmed, through 
SNMP Set commands, to capture packets, calculate statistics, monitor thresholds for speciﬁc MIB 
variables, report back to the management station when thresholds are reached, and perform other 
tasks. With RMON, a network can be populated with a number of monitoring probes, with SNMP 
messaging used to gather the information as needed. 

Network Management and SNMP     167
SNMP Security
SNMPv3 added solid security to the existing SNMPv2 and SNMPv2c speciﬁcations. SNMPv3 
adds two main branches of security to SNMPv2: authentication and encryption. SNMPv3 
speciﬁes the use of MD5 and SHA to create a message digest for each SNMPv3 protocol message. 
Doing so enables authentication of endpoints, as well as prevent data modiﬁcation and 
masquerade types of attacks. Additionally, SNMPv3 managers and agents can use Digital 
Encryption Standard (DES) to encrypt the messages, providing better privacy. (SNMPv3 suggests 
future support of Advanced Encryption Standard [AES] as well, but that is not a part of the original 
SNMPv3 speciﬁcations.) The encryption feature remains separate due to the U.S. government 
export restrictions on DES technology.

168     Chapter 6: TCP/IP Transport and Application Services
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 6-8 lists some of the SNMP-related protocol speciﬁcations mentioned in this chapter, and 
refers to their respective standards documents. Note that Table 6-4 lists most of the other protocols 
in the chapter.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http//www.ciscopress.com/title/1587201410. 
Table 6-8
Protocols and Standards for Chapter 6
Name
Standardized in Many Documents, Including the following 
RFCs . . .
SNMP Version 1
1155, 1156, 1212, 1157, 1213, 1215
SNMP Version 2
1902–1907, 3416
SNMP Version 2c
1901
SNMP Version 3
2578–2580, 3410–3415
Good Starting Point:
3410

Memory Builders     169
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
passive mode FTP, active mode FTP, SNMP agent, SNMP manager, Get, GetNext, 
MRTT, GetBulk, MIB-I, MIB-II, Response, Trap, Set, Inform, SMI, MIB, CWND, 
SSThresh, window, Slow Start, Congestion Avoidance, MSS, MTU, socket, TCP 
code bits, TCP ﬂags, receiver’s advertised window, MIB walk
Refer to the CD-based glossary to check your answers.
Further Reading
Because this chapter focuses on TCP/IP protocols, much more information can be found in the 
RFCs mentioned earlier in the chapter.
A wonderful reference for the topics in this chapter is Douglas Comer’s classic book 
Internetworking with TCP/IP, considered by many to be the bible of TCP/IP.
Any further reading of SNMP-related RFCs should begin with RFC 3410, which provides a great 
overview of the releases, and points to the more important of the vast number of SNMP-related 
RFCS.


Part III: IP Routing
Chapter 7
IP Forwarding (Routing)
Chapter 8
RIP Version 2
Chapter 9
EIGRP
Chapter 10
OSPF
Chapter 11
IGP Route Redistribution, Route Summarization, 
and Default Routing
Chapter 12
Fundamental BGP Operations
Chapter 13
BGP Routing Policies

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— Route Filtering and Policy Routing
■WAN
— Frame Relay
In addition, this chapter covers information 
related to the following speciﬁc CCIE Routing 
and Switching exam topics: 
■IP forwarding
■Classless and classful routing 
■Cisco Express Forwarding (CEF)
■Frame Relay Inverse ARP
■Multilayer Switching (MLS)

C H A P T E R 7
IP Forwarding (Routing)
Chapter 7 begins the largest part of the book. This part of the book, containing Chapters 7 
through 13, focuses on the topics that are the most important and popular for both the CCIE 
Routing and Switching written and practical (lab) exams. 
Chapter 7 begins with coverage of the details of the forwarding plane—the actual forwarding of 
IP packets. This process of forwarding IP packets is often called IP routing, or simply routing. 
Also, many people also refer to IP routing as the data plane, meaning the plane (topic) related 
to the end-user data.
Chapters 8 through 13 cover the details of the IP control plane. In contrast to the term data 
plane, the control plane relates to the communication of control information—in short, routing 
protocols like OSPF and BGP. These chapters cover the routing protocols on the exam, 
one chapter per routing protocol, plus an additional chapter on redistribution and route 
summarization.
“Do I Know This Already?” Quiz
Table 7-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
Table 7-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
IP Forwarding
1–6
Multilayer Switching
7–8
Policy Routing
9–10
Total Score

174     Chapter 7: IP Forwarding (Routing)
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can ﬁnd 
the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
What command is used to enable CEF globally for IP packets? 
a. enable cef
b. ip enable cef
c. ip cef
d. cef enable
e. cef enable ip
f. cef ip
2.
Which of the follow triggers an update to a CEF FIB? 
a. Receipt of a Frame Relay InARP message with previously unknown information
b. Receipt of a LAN ARP reply message with previously unknown information
c. Addition of a new route to the IP routing table by EIGRP
d. Addition of a new route to the IP routing table by adding an ip route command
e. The removal of a route from the IP routing table by EIGRP
3.
Router1 has a Frame Relay access link attached to its s0/0 interface. Router1 has a PVC 
connecting it to Router3. What action triggers Router3 to send an InARP message over the 
PVC to Router1? 
a. Receipt of a CDP multicast on the PVC connected to Router1
b. Receipt of an InARP request from Router1
c. Receipt of a packet that needs to be routed to Router1 
d. Receipt of a Frame Relay message stating the PVC to Router1 is up
4.
Three routers are attached to the same Frame Relay network, have a full mesh of PVCs, and 
use IP addresses 10.1.1.1/24 (R1), 10.1.1.2/24 (R2), and 10.1.1.3 (R3). R1 has its IP address 
conﬁgured on its physical interface; R2 and R3 have their IP addresses conﬁgured on multipoint 
subinterfaces. Assuming all the Frame Relay PVCs are up and working, and the router 
interfaces have been administratively enabled, which of the following is true? 
a. R1 can ping 10.1.1.2.
b. R2 cannot ping 10.1.1.3.
c. R3 can ping 10.1.1.2.
d. In this case, R1 must rely on mapping via InARP to be able to ping 10.1.1.3.

“Do I Know This Already?” Quiz     175
5.
Three routers are attached to the same Frame Relay network, with a partial mesh of PVCs: 
R1-R2 and R1-R3. The routers use IP addresses 10.1.1.1/24 (R1), 10.1.1.2/24 (R2), and 
10.1.1.3/24 (R3). R1 has its IP address conﬁgured on its physical interface; R2 has its IP address 
conﬁgured on a multipoint subinterface; and R3 has its IP address conﬁgured on a point-to-
point subinterface. Assuming all the Frame Relay PVCs are up and working, and the router 
interfaces have been administratively enabled, which of the following is true? Assume no 
frame-relay map commands have been conﬁgured.
a. R1 can ping 10.1.1.2.
b. R2 can ping 10.1.1.3.
c. R3 can ping 10.1.1.1.
d. R3’s ping 10.1.1.2 command results in R3 not sending the ICMP Echo packet.
e. R2’s ping 10.1.1.3 command results in R2 not sending the ICMP Echo packet.
6.
Router1 has an OSPF-learned route to 10.1.1.0/24 as its only route to a subnet on class A 
network 10.0.0.0. It also has a default route. When Router1 receives a packet destined for 
10.1.2.3, it discards the packet. Which of the following commands would make Router1 
use the default route for those packets in the future? 
a. ip classless subcommand of router ospf
b. no ip classful subcommand of router ospf
c. ip classless global command
d. no ip classless global command
e. no ip classful global command
7.
Which of the following commands is used on a Cisco IOS Layer 3 switch to use the interface 
as a routed interface instead of a switched interface? 
a. ip routing global command
b. ip routing interface subcommand
c. ip address interface subcommand
d. switchport access layer-3 interface subcommand
e. no switchport interface subcommand

176     Chapter 7: IP Forwarding (Routing)
8.
On a Cisco 3550 switch with Enterprise Edition software, the ﬁrst line of the output of a show 
interface vlan 55 command lists the state as “Vlan 55 is down, line protocol is down down.” 
Which of the following might be causing that state to occur? 
a. VLAN interface has not been no shut yet.
b. The ip routing global command is missing from the conﬁguration.
c. On at least one interface in the VLAN, a cable that was previously plugged in has been 
unplugged.
d. VTP mode is set to transparent.
e. The VLAN has not yet been created on this switch.
9.
Imagine a route map used for policy routing, in which the route map has a set interface default 
serial0/0 command. Serial0/0 is a point-to-point link to another router. A packet arrives at this 
router, and the packet matches the policy routing route-map clause whose only set command 
is the one just mentioned. Which of the following general characterizations is true? 
a. The packet will be routed out interface s0/0; if s0/0 is down, it will be routed using the 
default route from the routing table.
b. The packet will be routed using the default route in the routing table; if there is no 
default, the packet will be routed out s0/0.
c. The packet will be routed using the best match of the destination address with the 
routing table; if no match is made, the packet will be routed out s0/0.
d. The packet will be routed out interface s0/0; if s0/0 is down, the packet will be 
discarded.
10.
Router1 has an fa0/0 interface and two point-to-point WAN links back to the core of the 
network (s0/0 and s0/1, respectively). Router1 accepts routing information only over s0/0, 
which Router1 uses as its primary link. When s0/0 fails, Router1 uses policy routing to 
forward the trafﬁc out the relatively slower s0/1 link. Which of the following set commands 
in Router1’s policy routing route map could have been used to achieve this function? 
a. set ip default next-hop
b. set ip next-hop
c. set ip default interface
d. set ip interface

IP Forwarding     177
Foundation Topics
IP Forwarding
IP forwarding, or IP routing, is simply the process of receiving an IP packet, making a decision 
of where to send the packet next, and then forwarding the packet. The forwarding process needs 
to be relatively simple, or at least streamlined, for a router to forward large volumes of packets. 
Ignoring the details of several Cisco optimizations to the forwarding process for a moment, the 
internal forwarding logic in a router works basically as shown in Figure 7-1. 
Figure 7-1
Forwarding Process at Router3, Destination Server1
The following list summarizes the key steps shown in Figure 7-1.
1.
A router receives the frame and checks the received frame check sequence (FCS); if errors 
occurred, the frame is discarded. The router makes no attempt to recover the lost packet.
2.
If no errors occurred, the router checks the Ethernet Type ﬁeld for the packet type, and extracts 
the packet. The Data Link header and trailer can now be discarded.
3.
Assuming an IP packet, the router checks its IP routing table for the most speciﬁc preﬁx match 
of the packet’s destination IP address.
R3
IP Routing Table
R1
GW is
103.3
Compare packet
destination with
routing table
Solid lines
show packet
flow
Update TTL and
Header Checksum
E0/0
103.3
S0/0.3333
13.1
Client 3
Telnet Server –
172.31.11.201
172.31.0.0, /24 Prefixes
2
1
6
3
5
4
172.31.103.0/24   Connected       E0/0
172.31.13.0/24     Connected       S0/0.3333
172.31.11.0/24     172.31.13.1      S0/0.3333
172.31.13.1    DLCI 100
Adjacency Information
Insert into Header
IP Packet
IP Packet
IP Packet
FR
Header
FR
Trailer
IP Packet
Eth.
Header
Type = 0x0800
Passed FCS
Eth.
Trailer
IP Packet
Eth.
Header
Eth.
Trailer
KEY 
POINT
KEY 
POINT

178     Chapter 7: IP Forwarding (Routing)
4.
The matched routing table entry includes the outgoing interface and next-hop router; this 
information points the router to the adjacency information needed to build a new Data Link 
frame. 
5.
Before creating a new frame, the router updates the IP header TTL ﬁeld, requiring a 
recomputation of the IP header checksum.
6.
The router encapsulates the IP packet in a new Data Link header (including the destination 
address) and trailer (including a new FCS) to create a new frame.
The preceding list is a generic view of the process; next, a few words on how Cisco routers can 
optimize the routing process by using Cisco Express Forwarding (CEF).
Process Switching, Fast Switching, and Cisco Express Forwarding
Steps 3 and 4 from the generic routing logic shown in the preceding section are the most 
computation-intensive tasks in the routing process. A router must ﬁnd the best route to use for 
every packet, requiring some form of table lookup of routing information. Also, a new Data Link 
header and trailer must be created, and the information to put in the header (like the destination 
Data Link address) must be found in another table. 
Cisco has created several different methods to optimize the forwarding processing inside routers, 
termed switching paths. This section examines the two most likely methods to exist in Cisco router 
networks today: fast switching and CEF.
With fast switching, the ﬁrst packet to a speciﬁc destination IP address is process switched, meaning 
that it follows the same general algorithm as in Figure 7-1. With the ﬁrst packet, the router adds an 
entry to the fast-switching cache, sometimes called the route cache. The cache has the destination 
IP address, the next-hop information, and the data link header information that needs to be added to 
the packet before forwarding (as in Step 6 in Figure 7-1). Future packets to the same destination 
address match the cache entry, so it takes the router less time to process and forward the packet.
Although it is much better than process switching, fast switching has a few drawbacks. The ﬁrst 
packet must be process switched. The cache entries are timed out relatively quickly, because 
otherwise the cache could get overly large as it has an entry per each destination address, not per 
destination subnet/preﬁx. Also, load balancing can only occur per destination with fast switching. 
CEF overcomes the main shortcoming of fast switching. CEF optimizes the route lookup process 
by using a construct called the Forwarding Information Base (FIB). The FIB contains information 
about all the known routes in the routing table. Rather than use a table that is updated when new ﬂows 
appear, as did Cisco’s earlier fast-switching technology, CEF loads FIB entries as routes are added 
and removed from the routing table. CEF does not have to time out the entries in the FIB, does not 
require the ﬁrst packet to a destination to be process switched, and allows much more effective 
load balancing over equal-cost routes.

IP Forwarding     179
When a new packet arrives, CEF routers ﬁrst search the FIB. Cisco designed the CEF FIB structure 
as a special kind of tree, called an mtrie, that signiﬁcantly reduces the time taken to match the 
packet destination address to the right CEF FIB entry. 
The matched FIB entry points to an entry in the CEF adjacency table. The adjacency table lists 
the outgoing interface, along with all the information needed to build the Data Link header and 
trailer before sending the packet. When a router forwards a packet using CEF, it easily and quickly 
ﬁnds the corresponding CEF FIB entry, after which it has a pointer to the adjacency table entry—
which tells the router how to forward the packet. 
Table 7-2 summarizes a few key points about the three main options for router switching paths.
The ip cef global conﬁguration command enables CEF for all interfaces on a Cisco router. The 
no ip route-cache cef interface subcommand can then be used to selectively disable CEF on an 
interface. On many of the higher-end Cisco platforms, CEF processing can be distributed to the 
linecards. Similarly, Cisco multilayer switches use CEF for Layer 3 forwarding, by loading CEF 
tables into the forwarding ASICs.
Building Adjacency Information: ARP and Inverse ARP
The CEF adjacency table entries list an outgoing interface and a Layer 2 and Layer 3 address 
reachable via that interface. The table also includes the entire data link header that should be used 
to reach that next-hop (adjacent) device. 
The CEF adjacency table must be built based on the IP routing table, plus other sources. The IP 
routing table entries include the outgoing interfaces to use and the next-hop device’s IP address. 
To complete the adjacency table entry for that next hop, the router needs to know the Data Link layer 
address to use to reach the next device. Once known, the router can build the CEF adjacency table 
entry for that next-hop router. For instance, for Router3 in Figure 7-1 to reach next-hop router 
172.31.13.1 (Router1), out interface s0/0.3333, Router3 needed to know the right Data-Link 
connection identiﬁer (DLCI) to use. So, to build the adjacency table entries, CEF uses the IP ARP 
cache, Frame Relay mapping information, and other sources of Layer 3-to-Layer 2 mapping 
information. 
Table 7-2
Matching Logic and Load-Balancing Options for Each Switching Path
KEY 
POINT
Switching Path
Tables that Hold the
Forwarding Information
Load-Balancing Method
Process switching
Routing table
Per packet
Fast switching
Fast-switching cache (per ﬂow route 
cache)
Per destination IP address
CEF
FIB and adjacency tables
Per a hash of the packet source and 
destination, or per packet

180     Chapter 7: IP Forwarding (Routing)
First, a quick review of IP ARP. The ARP protocol dynamically learns the MAC address of another 
IP host on the same LAN. The host that needs to learn the other host’s MAC address sends an ARP 
request, sent to the LAN broadcast address, hoping to receive an ARP reply (a LAN unicast) from 
the other host. The reply, of course, supplies the needed MAC address information.
Frame Relay Inverse ARP
IP ARP is widely understood and relatively simple. As a result, it is hard to ask difﬁcult questions 
about ARP on an exam. However, the topics of Frame Relay Inverse ARP (InARP), its use, defaults, 
and when static mapping must be used lend themselves to being the source of tricky exam questions. 
So, this section covers Frame Relay InARP to show some of the nuances of when and how it is used.
InARP discovers the DLCI to use to reach a particular adjacent IP address. However, as the term 
Inverse ARP implies, the process differs from ARP on LANs; with InARP, routers already know 
the Data Link address (DLCI), and need to learn the corresponding IP address. Figure 7-2 shows 
an example InARP ﬂow.
Figure 7-2
Frame Relay InARP
Unlike on LANs, a packet does not need to arrive at the router to trigger the InARP protocol; 
instead, an LMI status message triggers InARP. After receiving an LMI PVC Up message, each 
router announces its own IP address over the VC, using an InARP message, as deﬁned in RFC 
1293. Interestingly, if you disable LMI, then the InARP process no longer works, because nothing 
triggers a router to send an InARP message.
While InARP itself is relatively simple, implementation details differ based on the type of 
subinterface used in a router. For a closer look at implementation, Figure 7-3 shows an example 
Frame Relay topology with a partial mesh and a single subnet, in which each router uses a different 
interface type for its Frame Relay conﬁguration. (You would not typically choose to conﬁgure 
NOTE
In production Frame Relay networks, the conﬁguration details are chosen to purposefully 
avoid some of the pitfalls that are covered in the next several pages of this chapter. For example, 
when using mainly point-to-point subinterfaces, with a different subnet per VC, all the problems 
described in the rest of the Frame Relay coverage in this chapter can be avoided.
R4
R2
172.31.124.4
172.31.124.2
InARP: I am 172.31.124.4
InARP: I am 172.31.124.2
LMI Status:
DLCI 200 up
LMI Status:
DLCI 400 up
KEY 
POINT

IP Forwarding     181
Frame Relay on physical, point-to-point and multipoint subinterfaces in the same design—indeed, 
it wreaks havoc with routing protocols if you do so. This example does so just to show in more 
detail in the examples how InARP really works.) Example 7-1 points out some of the basic show 
and debug commands related to Frame Relay InARP, and one of the oddities about InARP relating 
to point-to-point subinterfaces. 
Figure 7-3
Frame Relay Topology for Frame Relay InARP Examples
NOTE
All ﬁgures with Frame Relay networks in this book use Global DLCI conventions 
unless otherwise stated. For instance, in Figure 7-3, DLCI 300 listed beside Router3 means that, 
due to Local DLCI assignment conventions by the service provider, all other routers (like 
Router4) use DLCI 300 to address their respective VCs back to Router3.
Example 7-1
Frame Relay InARP show and debug Commands 
! First, Router1 configures Frame Relay on a multipoint subinterface.
Router1# sssshhhh    rrrruuuunnnn
! Lines omitted for brevity
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....11111111    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....111133334444....1111    222255555555....222255555555....222255555555....0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    333300000000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    444400000000
! Lines omitted for brevity
! Next, the serial interface is sssshhhhuuuutttt and nnnnoooo    sssshhhhuuuutttt, and the earlier InARP entries
! are cleared, so the example can show the InARP process.
Router1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Router1(config)# iiiinnnntttt    ssss    0000////0000
Router1(config-if)# ddddoooo    cccclllleeeeaaaarrrr    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnnaaaarrrrpppp
Router1(config-if)# sssshhhhuuuutttt
Router1(config-if)# nnnnoooo    sssshhhhuuuutttt
Router1(config-if)# ^^^^ZZZZ
continues
R3
R4
R1
DLCI 300
172.31.134.0/24
DLCI 400
DLCI 100
Pt-Pt
134.3
Physical
134.4
Mpt
134.1

182     Chapter 7: IP Forwarding (Routing)
The example show commands from Router1 detail the fact that InARP was used; however, the last 
show command in Example 7-1 details how Router3 actually did not use the received InARP 
information. Cisco IOS Software knows that only one VC is associated with a point-to-point 
subinterface; any other IP hosts in the same subnet as a point-to-point subinterface can be reached 
only by that single DLCI. So, any received InARP information related to that DLCI is unnecessary. 
For instance, whenever Router3 needs to forward a packet to Router1 (172.31.134.1), or any other 
host in subnet 172.31.134.0/24, Router3 already knows from its conﬁguration to send the packet 
! Messages resulting from the ddddeeeebbbbuuuugggg    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    eeeevvvveeeennnntttt command show the
! received InARP messages on Router1. Note the hex values 0xAC1F8603 and
! 0xAC1F8604, which in decimal are 172.31.134.3 and 172.31.134.4 (Router3
! and Router4, respectively). 
Router1# ddddeeeebbbbuuuugggg    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    eeeevvvveeeennnnttttssss
*Mar  1 00:09:45.334: Serial0/0.11: FR ARP input
*Mar  1 00:09:45.334: datagramstart = 0x392BA0E, datagramsize = 34
*Mar  1 00:09:45.334: FR encap = 0x48C10300
*Mar  1 00:09:45.334: 80 00 00 00 08 06 00 0F 08 00 02 04 00 09 00 00 
*Mar  1 00:09:45.334: AC 1F 86 03 48 C1 AC 1F 86 01 01 02 00 00 
*Mar  1 00:09:45.334: 
*Mar  1 00:09:45.334: Serial0/0.11: FR ARP input
*Mar  1 00:09:45.334: datagramstart = 0x392B8CE, datagramsize = 34
*Mar  1 00:09:45.338: FR encap = 0x64010300
*Mar  1 00:09:45.338: 80 00 00 00 08 06 00 0F 08 00 02 04 00 09 00 00 
*Mar  1 00:09:45.338: AC 1F 86 04 64 01 AC 1F 86 01 01 02 00 00 
! Next, note the sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp    command output does include a “dynamic”
! keyword, meaning that the entries were learned with InARP. 
Router1# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp
Serial0/0.11 (up): ip 172.31.134.3 dlci 300(0x12C,0x48C0), dynamic,
              broadcast,, status defined, active
Serial0/0.11 (up): ip 172.31.134.4 dlci 400(0x190,0x6400), dynamic,
              broadcast,, status defined, active
! On Router3, sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp only lists a single entry as well, but 
! the format is different. Because Router3 uses a point-to-point subinterface,
! the entry was not learned with InARP, and the command output does not include
! the word “dynamic.” Also note the absence of any Layer 3 addresses.
Router3# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp
Serial0/0.3333 (up): point-to-point dlci, dlci 100(0x64,0x1840), broadcast
          status defined, active
KEY 
POINT
NOTE
Example 7-1 included the use of the do command inside conﬁguration mode. The 
do command, followed by any exec command, can be used from inside conﬁguration mode to 
issue an exec command, without having to leave conﬁguration mode.
Example 7-1
Frame Relay InARP show and debug Commands (Continued)
KEY 
POINT

IP Forwarding     183
over the only possible DLCI on that point-to-point subinterface—namely, DLCI 100. So, although 
all three types of interfaces used for Frame Relay conﬁguration support InARP by default, point-
to-point subinterfaces ignore the received InARP information.
Static Conﬁguration of Frame Relay Mapping Information 
In Figure 7-3, Router3 already knows how to forward frames to Router4, but the reverse is not true. 
Router3 uses logic like this: “For packets needing to get to a next-hop router that is in subnet 
172.31.124.0/24, send them out the one DLCI on that point-to-point subinterface—DLCI 100.” 
The packet then goes over that VC to Router1, which in turn routes the packet to Router4. 
In the admittedly poor design shown in Figure 7-3, however, Router4 cannot use the same kind of 
logic as Router3, as its Frame Relay details are conﬁgured on its physical interface. To reach 
Router3, Router4 needs to send frames over DLCI 100 back to Router1, and let Router1 forward 
the packet on to Router3. In this case, InARP does not help, because InARP messages only ﬂow 
across a VC, and are not forwarded; note that there is no VC between Router4 and Router3. 
The solution is to add a frame-relay map command to Router4’s conﬁguration, as shown in 
Example 7-2. The example begins before Router4 has added the frame-relay map command, and 
then shows the results after having added the command.
Example 7-2
Using the frame-relay map Command—Router4 
! Router4 only lists a single entry in the sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp command 
! output, because Router4 only has a single VC, which connects back to Router1.
! With only 1 VC, Router4 could only have learned of 1 other router via InARP.
Router4# sssshhhh    rrrruuuunnnn
! lines omitted for brevity
interface Serial0/0
 ip address 172.31.134.4 255.255.255.0
 encapsulation frame-relay
Router4# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp
Serial0/0 (up): ip 172.31.134.1 dlci 100(0x64,0x1840), dynamic,
              broadcast,, status defined, active
! Next, proof that Router4 cannot send packets to Router3’s Frame Relay IP address.
Router4# ppppiiiinnnngggg    111177772222....33331111....111133334444....3333
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 172.31.134.3, timeout is 2 seconds:
.....
Success rate is 0 percent (0/5)
! Next, static mapping information is added to Router4 using the ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp
! interface subcommand. Note that the command uses DLCI 100, so that any packets
! sent by Router4 to 172.31.134.3 (Router3) will go over the VC to Router1, which
! will then need to route the packet to Router3. The bbbbrrrrooooaaaaddddccccaaaasssstttt keyword tells
continues

184     Chapter 7: IP Forwarding (Routing)
Keep in mind that you probably would not choose to build a network like the one shown in 
Figure 7-3 using different subinterface types on the remote routers, nor would you typically put 
all three non-fully-meshed routers into the same subnet unless you were seriously constrained 
in your IP address space. 
In cases where you do use a topology like that shown in Figure 7-3, you can use the conﬁguration 
described in the last few pages. Alternatively, if both Router3 and Router4 had used multipoint 
subinterfaces, they would both have needed frame-relay map commands, because these two 
routers could not have heard InARP messages from the other router. However, if both Router3 and 
Router4 had used point-to-point subinterfaces, neither would have required a frame-relay map 
command, due to the “use this VC to reach all addresses in this subnet” logic.
Disabling InARP
In most cases for production networks, using InARP makes sense. However, InARP can be 
disabled on multipoint and physical interfaces using the no frame-relay inverse-arp interface 
subcommand. InARP can be disabled for all VCs on the interface/subinterface, all VCs on the 
interface/subinterface for a particular Layer 3 protocol, and even for a particular Layer 3 protocol 
per DLCI. 
Interestingly, the no frame-relay inverse-arp command not only tells the router to stop sending 
InARP messages, but also tells the router to ignore received InARP messages. For instance, the 
no frame-relay inverse-arp ip 400 subinterface subcommand on Router1 in Example 7-2 not 
only prevents Router1 from sending InARP messages over DLCI 400 to Router4, but also causes 
Router1 to ignore the InARP received over DLCI 400.
! Router4 to send copies of broadcasts over this VC.
Router4# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Router4(config)# iiiinnnntttt    ssss0000////0000
Router4(config-if)# ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp    iiiipppp    111177772222....33331111....111133334444....3333    111100000000    bbbbrrrrooooaaaaddddccccaaaasssstttt
Router4(config-if)# ^^^^ZZZZ
Router4# ppppiiiinnnngggg    111177772222....33331111....111133334444....3333
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 172.31.134.3, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 20/20/20 ms
NOTE
Remember, Router3 did not need a frame-relay map command, due to the logic used 
for a point-to-point subinterface.
Example 7-2
Using the frame-relay map Command—Router4 (Continued)

IP Forwarding     185
Table 7-3 summarizes some of the key details about Frame Relay Inverse ARP settings in IOS.
Classless and Classful Routing
So far this chapter has reviewed the basic forwarding process for IP packets in a Cisco router. The 
logic requires matching the packet destination with the routing table, or with the CEF FIB if CEF 
is enabled, or with other tables for the other options Cisco uses for route table lookup. (Those 
options include fast switching in routers and NetFlow switching in multilayer switches, both of 
which populate an optimized forwarding table based on ﬂows, but not on the contents of the 
routing table.) 
Classless routing and classful routing relate to the logic used to match the routing table, speciﬁcally 
for when the default route is used. Regardless of the use of any optimized forwarding methods (for 
instance, CEF), the following statements are true about classless and classful routing:
■
Classless routing—When a default route exists, and no speciﬁc match is made when comparing 
the destination of the packet and the routing table, the default route is used.
■
Classful routing—When a default route exists, and the class A, B, or C network for the 
destination IP address does not exist at all in the routing table, the default route is used. If any 
part of that classful network exists in the routing table, but the packet does not match any 
of the existing subnets of that classful network, the router does not use the default route and 
thus discards the packet.
Typically, classful routing works well in enterprise networks only when all the enterprise routes are 
known by all routers, and the default is used only to reach the Internet-facing routers. Conversely, 
for enterprise routers that normally do not know all the routes—for instance, if a remote router has 
only a few connected routes to network 10.0.0.0 and a default route pointing back to a core site— 
classless routing is required. For instance, in an OSPF design using stubby areas, default routes 
are injected into the non-backbone areas, instead of advertising all routes to speciﬁc subnets. As a 
Table 7-3
Facts and Behavior Related to InARP
KEY 
POINT
Fact/Behavior
Point-to-Point 
Multipoint or Physical
Does InARP require LMI?
Always
Always
Is InARP enabled by default?
Yes
Yes
Can InARP be disabled?
No
Yes
Ignores received InARP messages?
Always1
When InARP is disabled
1Point-to-point interfaces ignore InARP messages because of their “send all packets for addresses in this subnet using 
the only DLCI on the subinterface” logic.
KEY 
POINT

186     Chapter 7: IP Forwarding (Routing)
result, classless routing is required in routers in the stubby area, because otherwise non-backbone 
area routers would not be able to forward packets to all parts of the network.
Classless and classful routing logic is controlled by the ip classless global conﬁguration command. 
The ip classless command enables classless routing, and the no ip classless command enables 
classful routing.
Multilayer Switching
Multilayer Switching (MLS) refers to the process by which a LAN switch, which operates at 
least at Layer 2, also uses logic and protocols from layers other than Layer 2 to forward data. 
The term Layer 3 switching refers speciﬁcally to the use of the Layer 3 destination address, 
compared to the routing table (or equivalent), to make the forwarding decision. (The latest 
switch hardware and software from Cisco uses CEF switching to optimize the forwarding of 
packets at Layer 3.)
MLS Logic
Layer 3 switching conﬁguration works similarly to router conﬁguration—IP addresses are assigned 
to interfaces, and routing protocols are deﬁned. The routing protocol conﬁguration works just like 
a router; however, the interface conﬁguration on MLS switches differs slightly from routers, using 
VLAN interfaces, routed interfaces, and PortChannel interfaces. 
VLAN interfaces give a Layer 3 switch a Layer 3 interface attached to a VLAN. Cisco sometimes 
refers to these interfaces as switched virtual interfaces (SVIs). To route between VLANs, a switch 
simply needs a virtual interface attached to each VLAN, and each VLAN interface needs an 
IP address in the respective subnets used on those VLANs.
When using VLAN interfaces, the switch must take one noticeable but simple additional step 
when routing a packet. Like typical routers, MLS makes a routing decision to forward a packet. 
As with routers, the routes in an MLS routing table entry list an outgoing interface (a VLAN 
interface in this case), as well as a next-hop layer 3 address. The adjacency information (for example, 
NOTE
Make sure to review Table 8-7 in Chapter 8, “RIP Version 2,” for a comparison of 
classful addresses, classful routing, and classful routing protocols.
NOTE
Although it is not a requirement, the devices in a VLAN are typically conﬁgured in the 
same single IP subnet. However, you can use secondary IP addresses on VLAN interfaces to 
conﬁgure multiple subnets in one VLAN, just like on other router interfaces. 
KEY 
POINT

Multilayer Switching     187
the IP ARP table or the CEF adjacency table) lists the VLAN number and the next-hop device’s 
MAC address to which the packet should be forwarded—again, typical of normal router operation. 
At this point, a true router would know everything it needs to know to forward the packet. An MLS 
switch, however, then also needs to use Layer 2 logic to decide out which physical interface to 
physically forward the packet. The switch will simply ﬁnd the next-hop device’s MAC address in 
the CAM and forward the frame to that address based on the CAM.
Using Routed Ports and PortChannels with MLS
In some point-to-point topologies, VLAN interfaces are not required. For instance, when an 
MLS switch connects to a router using a cable from a switch interface to a router’s LAN 
interface, and the only two devices in that subnet are the router and that one physical interface 
on the MLS switch, the MLS switch can be conﬁgured to treat that one interface as a routed 
port. (Another typical topology for using router ports is when two MLS switches connect for 
the purpose of routing between the switches, again creating a case with only two devices in the 
VLAN/subnet.) 
A routed port on an MLS switch has the following characteristics:
■
The interface is not in any VLAN (not even VLAN 1).
■
The switch does not keep any Layer 2 switching table information for the interface.
■
Layer 3 settings, such as the IP address, are conﬁgured under the physical interface—just like 
a router.
■
The adjacency table lists the outgoing physical interface or PortChannel, which means that 
Layer 2 switching logic is not required in these cases.
Ethernet PortChannels can be used as routed interfaces as well. To do so, as on physical routed 
interfaces, the no switchport command should be conﬁgured. (For PortChannels, the physical 
interfaces in the PortChannel must also be conﬁgured with the no switchport command.) Also, 
when using a PortChannel as a routed interface, PortChannel load balancing should be based on 
Layer 3 addresses because the Layer 2 addresses will mostly be the MAC addresses of the two 
MLS switches on either end of the PortChannel. PortChannels may also be used as Layer 2 
interfaces when doing MLS. In that case, VLAN interfaces would be conﬁgured with IP address, 
and the PortChannel would simply act as any other Layer 2 interface.

188     Chapter 7: IP Forwarding (Routing)
Table 7-4 lists some of the speciﬁcs about each type of Layer 3 interface.
MLS Conﬁguration
The upcoming MLS conﬁguration example is designed to show all of the conﬁguration options. The 
network design is shown in Figures 7-4 and 7-5. In Figure 7-4, the physical topology is shown, 
with routed ports, VLAN trunks, a routed PortChannel, and access links. Figure 7-5 shows the 
same network, with a Layer 3 view of the subnets used in the network. 
Figure 7-4
Physical Topology: Example Using MLS
Table 7-4
MLS Layer 3 Interfaces 
KEY 
POINT
Interface
Forwarding to Adjacent 
Device
Conﬁguration Requirements
VLAN interface
Uses Layer 2 logic and L2 MAC 
address table
Create VLAN interface; VLAN 
must also exist
Physical (routed) interface
Forwards out physical interface
Use no switchport command to 
create a routed interface
PortChannel (switched) 
interface
Not applicable; just used as 
another Layer 2 forwarding path
No special conﬁguration; useful 
in conjunction with VLAN 
interfaces
PortChannel (routed) 
interface
Balances across links in 
PortChannel
Needs no switchport command in 
order to be used as a routed 
interface; optionally change load-
balancing method
SW1
MLS
FA0/0
FA0/1
FA0/0
MLS
SW2
SW3
SW4
VLAN 12
VLAN 11
Server 1
Server 2
Server 3
Server 4
VLAN 12
VLAN 11
R1
R2
T
T
T
T
T
R
R
R
T
R
— Trunk (also a switchport)
— Routed Port

Multilayer Switching     189
Figure 7-5
Layer 3 Topology View: Example Using MLS
A few design points bear discussion before jumping into the conﬁguration. First, SW1 and SW2 
need Layer 2 connectivity to support trafﬁc in VLANs 11 and 12. In other words, you need a Layer 2 
trunk between SW1 and SW2, and for several reasons. Focusing on the Layer 2 portions of the 
network on the right side of Figure 7-4, SW1 and SW2, both distribution MLS switches, connect 
to SW3 and SW4, which are access layer switches. SW1 and SW2 are responsible for providing 
full connectivity in VLANs 11 and 12. To fully take advantage of the redundant links, SW1 and 
SW2 need a Layer 2 path between each other. Additionally, this design uses SW1 and SW2 as 
Layer 3 switches, so the hosts in VLANs 11 and 12 will use SW1 or SW2 as their default gateway. 
For better availability, the two switches should use HSRP, VRRP, or GLBP. Regardless of which 
protocol is used, both SW1 and SW2 need to be in VLANs 11 and 12, with connectivity in those 
VLANs, to be effective as default gateways.
In addition to a Layer 2 trunk between SW1 and SW2, to provide effective routing, it makes sense 
for SW1 and SW2 to have a routed path between each other as well. Certainly, SW1 needs to be 
able to route packets to router R1, and SW2 needs to be able to route packets to router R2. However, 
routing between SW1 and SW2 allows for easy convergence if R1 or R2 fails. 
Figure 7-4 shows two alternatives for routed connectivity between SW1 and SW2, and one option 
for Layer 2 connectivity. For Layer 2 connectivity, a VLAN trunk needs to be used between the 
two switches. Figure 7-4 shows a pair of trunks between SW1 and SW2 (labeled with a circled T) 
as a Layer 2 PortChannel. The PortChannel would support the VLAN 11 and 12 trafﬁc. 
To support routed trafﬁc, the ﬁgure shows two alternatives: simply route over the Layer 2 
PortChannel using VLAN interfaces, or use a separate routed PortChannel. First, to use the Layer 2 
MLS
SW1
172.31.21.0/24
172.31.22.0/24
172.31.23.0/24
MLS
SW2
Server 1
Server 2
Server 4
Server 3
R1
R2
V11
V11
V12
V12
VLAN 11
172.31.11.0/24
VLAN 12
172.31.12.0/24
Vx
— VLAN Interface x

190     Chapter 7: IP Forwarding (Routing)
PortChannel, SW1 and SW2 could simply conﬁgure VLAN interfaces in VLANs 11 and 12. The 
alternative conﬁguration uses a second PortChannel that will be used as a routed PortChannel. 
However, the routed PortChannel does not function as a Layer 2 path between the switches, so the 
original Layer 2 PortChannel must still be used for Layer 2 connectivity. Upcoming Example 7-3 
shows both conﬁgurations.
Finally, a quick comment about PortChannels is needed. This design uses PortChannels between 
the switches, but they are not required. Most links between switches today use at least two links 
in a PortChannel, for the typical reasons—better availability, better convergence, and less STP 
overhead. This design includes the PortChannel to point out a small difference between the routed 
interface conﬁguration and the routed PortChannel conﬁguration.
Example 7-3 shows the conﬁguration for SW1, with some details on SW2.
Example 7-3
MLS-Related Conﬁguration on Switch1 
! Below, note that the switch is in VTP transparent mode, and VLANs 11 and 12 are
! configured, as required. Also note the iiiipppp    rrrroooouuuuttttiiiinnnngggg global command, without which
! the switch will not perform Layer 3 switching of IP packets. 
vvvvllllaaaannnn    11111111
!
vvvvllllaaaannnn    11112222
! The iiiipppp    rrrroooouuuuttttiiiinnnngggg global command is required before the MLS will perform 
! Layer 3 forwarding.
iiiipppp    rrrroooouuuuttttiiiinnnngggg
!
vvvvttttpppp    ddddoooommmmaaaaiiiinnnn    CCCCCCCCIIIIEEEE----ddddoooommmmaaaaiiiinnnn
vvvvttttpppp    mmmmooooddddeeee    ttttrrrraaaannnnssssppppaaaarrrreeeennnntttt
! Next the nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt command makes PortChannel a routed port. On a routed
! port, an IP address can be added to the interface. 
iiiinnnntttteeeerrrrffffaaaacccceeee    PPPPoooorrrrtttt----cccchhhhaaaannnnnnnneeeellll1111
    nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....22223333....222200001111    222255555555....222255555555....222255555555....0000
! Below, similar configuration on the interface connected to Router1. 
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////1111
    nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....22221111....222200001111    222255555555....222255555555....222255555555....0000
! Next, the configuration shows basic PortChannel commands, with the 
! nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt command being required due to the same command on PortChannel. 
iiiinnnntttteeeerrrrffffaaaacccceeee    GGGGiiiiggggaaaabbbbiiiittttEEEEtttthhhheeeerrrrnnnneeeetttt0000////1111
    nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt
    nnnnoooo    iiiipppp    aaaaddddddddrrrreeeessssssss
    cccchhhhaaaannnnnnnneeeellll----ggggrrrroooouuuupppp    1111    mmmmooooddddeeee    ddddeeeessssiiiirrrraaaabbbblllleeee
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    GGGGiiiiggggaaaabbbbiiiittttEEEEtttthhhheeeerrrrnnnneeeetttt0000////2222
    nnnnoooo    sssswwwwiiiittttcccchhhhppppoooorrrrtttt
    nnnnoooo    iiiipppp    aaaaddddddddrrrreeeessssssss

Policy Routing     191
As stated earlier, the routed PortChannel is not required in this topology. It was included to show 
an example of the conﬁguration, and to provide a backdrop from which to discuss the differences. 
However, as conﬁgured, SW1 and SW2 are Layer 3 adjacent over the routed PortChannel as well 
as via their VLAN 11 and 12 interfaces. So, they could exchange IGP routing updates over three 
separate subnets. In such a design, the routed PortChannel was probably added so that it would be 
the normal Layer 3 path between SW1 and SW2; care should be taken to tune the IGP implementation 
so that this route is chosen instead of the routes over the VLAN interfaces.
Policy Routing
All the options for IP forwarding (routing) in this chapter had one thing in common: The destination 
IP address in the packet header was the only thing in the packet that was used to determine how 
the packet was forwarded. Policy routing allows a router to make routing decisions based on 
information besides the destination IP address.
    cccchhhhaaaannnnnnnneeeellll----ggggrrrroooouuuupppp    1111    mmmmooooddddeeee    ddddeeeessssiiiirrrraaaabbbblllleeee
! Next, iiiinnnntttteeeerrrrffffaaaacccceeee    VVVVLLLLAAAANNNN    11111111 gives Switch1 an IP presence in VLAN11. Devices in VLAN
! 11 can use 172.31.11.201 as their default gateway. However, using HSRP is
! better, so Switch1 has been configured to be HSRP primary in VLAN11, and Switch2 
! to be primary in VLAN12, with tracking so that if Switch1 loses its connection 
! to Router1, HSRP will fail over to Switch2.
iiiinnnntttteeeerrrrffffaaaacccceeee    VVVVllllaaaannnn11111111
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11111111....222200001111    222255555555....222255555555....222255555555....0000
    nnnnoooo    iiiipppp    rrrreeeeddddiiiirrrreeeeccccttttssss
    ssssttttaaaannnnddddbbbbyyyy    11111111    iiiipppp    111177772222....33331111....11111111....222255554444
    ssssttttaaaannnnddddbbbbyyyy    11111111    pppprrrriiiioooorrrriiiittttyyyy    99990000
    ssssttttaaaannnnddddbbbbyyyy    11111111    ttttrrrraaaacccckkkk    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////1111
! Below, VLAN12 has similar configuration settings, but with a higher (worse)
! HSRP priority than Switch2’s VLAN 12 interface.  
iiiinnnntttteeeerrrrffffaaaacccceeee    VVVVllllaaaannnn11112222
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11112222....222200001111    222255555555....222255555555....222255555555....0000
    nnnnoooo    iiiipppp    rrrreeeeddddiiiirrrreeeeccccttttssss
    ssssttttaaaannnnddddbbbbyyyy    11112222    iiiipppp    111177772222....33331111....11112222....222255554444
    ssssttttaaaannnnddddbbbbyyyy    11112222    pppprrrriiiioooorrrriiiittttyyyy    111111110000
    ssssttttaaaannnnddddbbbbyyyy    11112222    ttttrrrraaaacccckkkk    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////1111
NOTE
For MLS switches to route using VLAN interfaces, two other actions are required: The 
corresponding VLANs must be created, and the ip routing global command must have been 
conﬁgured. (MLS switches will not perform Layer 3 routing without the ip routing command, 
which is not enabled by default.) If the VLAN interface is created before either of those actions, 
the VLAN interface sits in a “down and down” state. If the VLAN is created next, the VLAN 
interface is in an “up and down” state. Finally, after adding the ip routing command, the interface 
is in an “up and up” state.
Example 7-3
MLS-Related Conﬁguration on Switch1 (Continued)

192     Chapter 7: IP Forwarding (Routing)
Policy routing’s logic begins with the ip policy command on an interface. This command tells IOS 
to process incoming packets with different logic before the normal forwarding logic takes place. 
(To be speciﬁc, policy routing intercepts the packet after Step 2, but before Step 3, in the routing 
process shown in Figure 7-1.) IOS compares the received packets using the route map referenced 
in the ip policy command. Figure 7-6 shows the basic logic.
Figure 7-6
Basic Policy Routing Logic
Specifying the matching criteria for policy routing is relatively simple compared to deﬁning the 
routing instructions using the set command. The route maps used by policy routing must match 
either based on referring to an ACL (numbered or named IP ACL, using the match ip address 
command) or based on packet length (using the match length command). To specify the routing 
instructions—in other words, where to forward the packet next—the set command is used. 
Table 7-5 lists the set commands, and provides some insight into their differences.
Table 7-5
Policy Routing Instructions (set Commands) 
Command
Comments 
set ip next-hop ip-address
[. . . ip-address]
Next-hop addresses must be in a connected subnet; forwards to the 
ﬁrst address in the list for which the associated interface is up.
set ip default next-hop ip-address
[. . . ip-address]
Same logic as previous command, except policy routing ﬁrst 
attempts to route based on the routing table.
Policy
Routing
Enabled?
Match
1st
Clause?
Match
2nd
Clause?
Permit
or
Deny?
Yes
Yes
Yes
Yes
Permit
Deny
No
No
No
Match
Last
Clause?
No
Route Based on
set Command
Destination Based
Routing (Normal)
KEY 
POINT

Policy Routing     193
The ﬁrst four set commands in Table 7-5 are the most important ones to consider. Essentially, you 
set either the next-hop IP address or the outgoing interface. Use the outgoing interface option only 
when it is unambiguous—for instance, do not refer to a LAN interface or multipoint Frame Relay 
subinterface. Most importantly, note the behavior of the default keyword in the set commands. 
Use of the default keyword essentially means that policy routing tries the default (destination 
based) routing ﬁrst, and resorts to using the set command details only when the router ﬁnds no 
matching route in the routing table.
The remaining set commands set the bits inside the ToS byte of the packet; refer to Chapter 14, 
“Classiﬁcation and Marking,” for more information about the ToS byte and QoS settings. Note that 
you can have multiple set commands in the same route-map clause. For instance, you may want 
to deﬁne the next-hop IP address and mark the packet’s ToS at the same time.
Figure 7-7 shows a variation on the same network used earlier in this chapter. Router3 and Router4 
are now at the same site, connected to the same LAN, and each has PVCs connecting to Router1 
and Router2.
Figure 7-7
Policy Routing Example on Router3
Command
Comments 
set interface interface-type 
interface-number [. . . interface-
type interface-number]
Forwards packets using the ﬁrst interface in the list that is up.
set default interface interface-type 
interface-number [. . . interface-
type interface-number]
Same logic as previous command, except policy routing ﬁrst 
attempts to route based on the routing table.
set ip precedence number | name
Sets IP precedence bits; can be decimal value or ASCII name.
set ip tos [number]
Sets entire ToS byte; numeric value is in decimal.
Table 7-5
Policy Routing Instructions (set Commands) (Continued)
S0/0.134
S0/0.32
172.31.123.2
103.4
103.3
E0/0
Client 3
172.31.0.0, /24 Prefixes
GW is
103.3
DLCI 400
R3
R4
R1
R2
Telnet Server–
172.31.11.201
KEY 
POINT

194     Chapter 7: IP Forwarding (Routing)
Example 7-4 shows three separate policy routing conﬁgurations on Router3. The ﬁrst 
conﬁguration forwards Telnet trafﬁc over the PVC to Router2 (next hop 172.31.123.2). The next 
conﬁguration does the same thing, but this time using the set interface command. The ﬁnal option 
shows a nonworking case with Router3 specifying its LAN interface as an outgoing interface.
Example 7-4
Policy Routing Example on Router3 
! Below, Router3 is configured with three route maps, one of which is enabled on
! interface e0/0 with the iiiipppp    ppppoooolllliiiiccccyyyy    rrrroooouuuutttteeee----mmmmaaaapppp    ttttoooo----RRRR2222----nnnneeeexxxxtttthhhhoooopppp command. The two 
! route maps that are not referenced in the iiiipppp    ppppoooolllliiiiccccyyyy command are used
! later in the configuration.
Router3# sssshhhh    rrrruuuunnnn
! Lines omitted for brevity
interface Ethernet0/0
 mac-address 0200.3333.3333
 ip address 172.31.104.3 255.255.255.0
 ip policy route-map to-R2-nexthop
!
interface Serial0/0.32 point-to-point
 ip address 172.31.123.3 255.255.255.0
 frame-relay interface-dlci 200   
!
interface Serial0/0.3333 point-to-point
 ip address 172.31.134.3 255.255.255.0
 frame-relay interface-dlci 100   
! 
access-list 111 permit tcp any any eq telnet
! This route-map matches all telnet, and picks a route through R2.
route-map to-R2-nexthop permit 10
 match ip address 111
 set ip next-hop 172.31.123.2
! This route-map matches all telnet, and picks a route out E0/0.
route-map to-R4-outgoing permit 10
 match ip address 111
 set interface Ethernet0/0
! This route-map matches all telnet, and picks a route out S0/0.32.
route-map to-R2-outgoing permit 10
 match ip address 111
 set interface Serial0/0.32
! debugging is enabled to prove policy routing is working on Router3.
Router3# ddddeeeebbbbuuuugggg    iiiipppp    ppppoooolllliiiiccccyyyy 
Policy routing debugging is on
! Not shown, a Client3 tries to telnet to 172.31.11.201
! Below, a sample of the debug messages created for a single policy-routed packet.
06:21:57: IP: route map to-R2-nexthop, item 10, permit
06:21:57: IP: Ethernet0/0 to Serial0/0.32 172.31.123.2
KEY 
POINT

Policy Routing     195
The ﬁrst two route maps in the example were relatively simple, with the last route map showing 
why specifying a multi-access outgoing interface is problematic. In the ﬁrst two cases, the telnet 
works ﬁne; to verify that it was working, the debug ip policy command was required.
The third route map (to-R4-outgoing) sets the output interface to Router3’s E0/0 interface. Because 
Router3 does not have an associated next-hop IP address, Router3 sends an ARP request asking 
for 172.31.11.201’s MAC address. As shown in the show ip arp command output, Router3 never 
completes its ARP entry. To work around the problem, assuming that the goal is to forward the 
packets to Router4 next, the conﬁguration in Router3 should refer to the next-hop IP address 
instead of the outgoing interface E0/0.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Next, Router3 uses a different route-map. This one sets the outgoing interface to 
! S0/0.32.  The Outgoing interface option works, because it is a point-to-point 
! subinterface
Router3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Router3(config)# iiiinnnntttt    eeee    0000////0000
Router3(config-if)# iiiipppp    ppppoooolllliiiiccccyyyy    rrrroooouuuutttteeee----mmmmaaaapppp    ttttoooo----RRRR2222----oooouuuuttttggggooooiiiinnnngggg
Router3(config-if)# ^^^^ZZZZ
! Not shown, the same user with default gateway of Router3 tries to telnet again.
! Below, the sample debug messages are identical as the previous set of messages.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
06:40:51: IP: route map to-R2-outgoing, item 10, permit
06:40:51: IP: Ethernet0/0 to Serial0/0.32 172.31.123.2
! Next, switching to a third route-map that sets the outgoing interface to E0/0.
Router3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
Router3(config)# iiiinnnntttt    eeee    0000////0000
Router3(config-if)# iiiipppp    ppppoooolllliiiiccccyyyy    rrrroooouuuutttteeee----mmmmaaaapppp    ttttoooo----RRRR4444----oooouuuuttttggggooooiiiinnnngggg
Router3(config-if)# ^^^^ZZZZ
! Not shown, the same user with default gateway of Router3 tries to telnet again.
! Router3 actually sends an ARP request out e0/0, looking for
! the IP address in the destination of the packet – 172.31.11.201, the address
! to which the user is telnetting.  Also below, Router3 shows that the ARP table 
! entry for 172.31.11.201 is incomplete.
Router3# sssshhhh    iiiipppp    aaaarrrrpppp
Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  172.31.11.201           0   Incomplete      ARPA   
Internet  172.31.104.3           − 
0200.3333.3333  ARPA   Ethernet0/0
Internet  172.31.104.4            0   0200.4444.4444  ARPA   Ethernet0/0
Example 7-4
Policy Routing Example on Router3 (Continued)

196     Chapter 7: IP Forwarding (Routing)
NOTE
Policy Routing for this particular topology fails due to a couple of tricky side effects 
of ARP. At ﬁrst glance, you might think that the only thing required to make the to-R4-outgoing 
policy work is for R4 to enable proxy ARP. In fact, if R4 is then conﬁgured with an ip proxy-
arp interface subcommand, R4 does indeed reply to R3’s ARP for 172.31.11.201. R4 lists its 
own MAC address in the ARP reply. However, R3 rejects the ARP reply, because of a basic 
check performed on ARPs. R3’s only IP route matching address 172.31.11.201 points over 
the WAN interface, and routers check ARP replies to make sure they list a sensible interface. 
From R3’s perspective, the only sensible interface is one through which the destination might 
possibly be reached. So, R3’s logic dictates that it should never hear an ARP reply regarding 
172.31.11.201 coming in its fa0/0 interface, so R3 rejects the (proxy) ARP reply from R4. To 
see all of this working in a lab, re-create the topology, and use the debug ip arp and debug 
policy commands.

Foundation Summary     197
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
listed in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in the “Foundation Topics” section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 7-6 lists the protocols mentioned in or pertinent to this chapter and their respective standards 
documents.
Table 7-7 lists some of the key IOS commands related to the topics in this chapter. (The command 
syntax for switch commands was taken from the Catalyst 3550 Multilayer Switch Command 
Reference, 12.1(20)EA2.) Router-speciﬁc commands were taken from the IOS 12.3 mainline 
command reference.)
Table 7-6
Protocols and Standards for Chapter 7
Name
Standardized In
Address Resolution Protocol (ARP)
RFC 826
Reverse Address Resolution Protocol (RARP)
RFC 903
Frame Relay Inverse ARP (InARP)
RFC 2390
Frame Relay Multiprotocol Encapsulation
RFC 2427
Differentiated Services Code Point (DSCP)
RFC 2474
Table 7-7
Command Reference for Chapter 7 
Command
Description
[no] ip classless
Enables classless (ip classless) or classful (no ip classless) forwarding
show ip arp
EXEC command that displays the contents of the IP ARP cache
show frame-relay map
Router exec command that lists the mapping information between 
Frame Relay DLCIs and Layer 3 addresses
frame-relay interface-dlci
Conﬁguration command that associates a particular DLCI with a 
subinterface
[no] switchport 
Switch interface subcommand that toggles an interface between a Layer 
2 switched function (switchport) and a routed port (no switchport)
continues

198     Chapter 7: IP Forwarding (Routing)
Refer to Table 7-5 for the list of set commands related to policy routing.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410.
Command
Description
clear frame-relay inarp
Router exec command that clears all InARP-learned entries from the 
Frame Relay mapping table
[no] ip route-cache cef
Interface subcommand that enables or disables CEF switching on an 
interface
[no] ip cef
Global conﬁguration command to enable (or disable) CEF on all 
interfaces
debug frame-relay events
Displays messages about various events, including InARP messages
show frame-relay map
Displays information about Layer 3 to Layer 2 mapping with Frame 
Relay
frame-relay map protocol 
protocol-address {dlci} 
[broadcast] [ietf | cisco] 
Interface subcommand that maps a Layer 3 address to a DLCI
[no] frame-relay inverse-
arp [protocol] [dlci]
Interface subcommand that enables or disables InARP
[no] ip routing
Enables IP routing; defaults to no ip routing on a multilayer switch
ip policy route-map
map-tag
Router interface subcommand that enables policy routing for the 
packets entering the interface
Table 7-7
Command Reference for Chapter 7 (Continued)

Memory Builders     199
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
policy routing, process switching, CEF, MLS, ARP, proxy ARP, routed interface, 
InARP, fast switching, TTL, classless routing, classful routing, FIB, adjacency table, 
control plane, switched interface, data plane, IP routing, IP forwarding
Refer to the CD-based glossary to check your answers.
Further Reading
For a good reference on load balancing with CEF, refer to http://cisco.com/en/US/partner/tech/
tk827/tk831/technologies_tech_note09186a0080094806.shtml. This website requires a CCO 
account. 

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— RIP Version 2
— The use of show and debug commands

C H A P T E R 8
RIP Version 2
Chapters 8 through 11 each focus on a single routing protocol. This chapter covers Routing 
Information Protocol (RIP) Version 2, including most of the features, concepts, and commands. 
Chapter 11, “IGP Route Redistribution, Route Summarization, and Default Routing,” covers 
some RIP details, in particular, route redistribution between RIP and other routing protocols, 
and route summarization.
“Do I Know This Already?” Quiz
Table 8-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following items are true of RIP Version 2? 
a. Supports VLSM
b. Sends Hellos to 224.0.0.9
c. Allows for route tagging
d. Deﬁnes inﬁnity as 255 hops
e. Authentication requires 3DES
Table 8-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
RIP Version 2 Basics
1–2
RIP Convergence and Loop Prevention
3–5
RIP Conﬁguration
6–8
Total Score

202     Chapter 8: RIP Version 2
2.
In an internetwork that solely uses RIP, once the network is stable and converged, which of 
the following is true? 
a. Routers send RIP updates every 30 seconds.
b. Routers send RIP updates every 90 seconds.
c. Routers send Hellos every 10 seconds, and send updates only when routes change.
d. A routing update sent out a router’s s0/0 interface includes all RIP routes in the IP routing 
table.
e. A RIP update’s routes list the same metric as is shown in that router’s IP routing table.
3.
R1 previously had heard about only one route to 10.1.1.0/24, metric 3, via an update received 
on its s0/0 interface, so it put that route in its routing table. R1 gets an update from that same 
neighboring router, but the same route now has metric 16. R1 immediately sends a RIP update 
out s0/0 that advertises a metric 16 route for that same subnet. Which of the following are true for 
this scenario? 
a. Split horizon must have been disabled on R1’s s0/0 interface.
b. R1’s update is a triggered update.
c. R1’s metric 16 route advertisement is an example of a poison reverse route.
d. The incoming metric 16 route was the result of a counting-to-inﬁnity problem.
4.
R1 is in a network that uses RIPv2 exclusively, and RIP has learned dozens of subnets via 
several neighbors. Which of the following commands display the current value of at least one 
route’s Invalid timer? 
a. show ip route
b. show ip rip database
c. debug ip rip
d. debug ip rip event
5.
R1 is in a network that uses RIPv2 exclusively, and RIP has learned dozens of subnets via 
several neighbors. From privileged exec mode, the network engineer types in the command 
clear ip route. What happens? 
a. R1 removes all routes from its IP routing table.
b. R1 removes only RIP routes from its IP routing table.
c. After the command, R1 will relearn its routes when the neighboring router’s Update 
timers cause them to send their next updates.
d. R1 immediately sends updates on all interfaces, poisoning all routes, so that all neighbors 
immediately send triggered updates—which allow R1 to immediately relearn its routes.

“Do I Know This Already?” Quiz     203
e. R1 will relearn its routes immediately by sending RIP requests out all its interfaces.
f. None of the other answers is correct.
6.
R1 has learned a route to 10.1.1.0/24 using RIPv2, which is R1’s only working routing 
protocol. Which of the following addresses point to information that deﬁnitively identiﬁes the 
IP address of the neighboring router from which R1 learned this route? 
a. The “via” IP address listed in a route in the show ip route command output
b. The “from” IP address listed for a route in the show ip route 10.1.1.0 command output
c. The “via” IP address listed in a route in the show ip rip database command output
d. The source IP address listed in the debug heading message, before the detailed output 
listing each route, in messages from the debug ip rip command
7.
R1 has been conﬁgured for RIPv2, including a network 10.0.0.0 command. Which of the 
following statements are true about R1’s RIP behavior? 
a. R1 will send advertisements out any of its interfaces in network 10.
b. R1 will process received advertisements in any of its interfaces in network 10.
c. R1 will send updates only after receiving a RIP Hello message from a neighboring 
router.
d. R1 can disable the sending of routing updates on an interface using the passive-interface 
interface subcommand.
e. R1 will advertise the subnets of any of its interfaces connected to subnets of network 10.
8.
Which of the following represents a default setting for the Cisco IOS implementation of 
RIPv2? 
a. Split horizon is enabled on all types of interfaces.
b. Split horizon is disabled on Frame Relay physical interfaces and multipoint subinterfaces.
c. The default authentication mode, normally set with the ip rip authentication mode 
interface subcommand, is MD5 authentication.
d. RIP will send triggered updates when a route changes.

204     Chapter 8: RIP Version 2
Foundation Topics
RIP Version 2 Basics
RIP is the only routing protocol covered on the CCIE Routing and Switching exam that is not also 
covered on the CCNP exams. Although covered on the CCNA exams, in years past, RIPv2 was 
not part of CCNA, either. So, while many CCIE candidates might already know many of the 
features and conﬁguration options of RIP, many CCNPs have never really had to study or use 
RIPv2 to any great extent in order to pass any Cisco exams. This chapter summarizes the protocol 
features and gives speciﬁc examples of many RIPv2 concepts and conﬁguration options.
Note that the Routing and Switching blueprint speciﬁcally lists RIPv2 but does not list RIPv1. 
Regardless, just for completeness, some of the coverage in this chapter mentions the differences 
between RIP Versions 1 and 2. Table 8-2 lists and brieﬂy describes the RIP features, noting with 
an asterisk those features that are found only in RIPv2.
Table 8-2
RIP Feature Summary 
KEY 
POINT
Function
Description
Transport 
UDP, port 520. 
Metric
Hop count, with 15 as the maximum usable metric, and 16 considered to be 
inﬁnite.
Hello interval
None; RIP relies on the regular full routing updates instead.
Update destination
Local subnet broadcast (255.255.255.255) for RIPv1; 224.0.0.9 multicast for 
RIPv2.
Update interval
30 seconds.
Full or partial updates
Full updates each interval. For on-demand circuits, allows RIP to send full 
updates once, and then remain silent until changes occur, per RFC 2091. Full 
updates each interval.
Triggered updates
Yes, when routes change.
Multiple routes to the 
same subnet
Allows installing 1 to 6 (default 4) equal-metric routes to the same subnet in a 
single routing table. 
Authentication*
Allows both plain-text and MD5 authentication.
Subnet mask in 
updates*
RIPv2 transmits the subnet mask with each route, thereby supporting VLSM, 
making RIPv2 classless. This feature also allows RIPv2 to support 
discontiguous networks.
VLSM*
Supported as a result of the inclusion of subnet masks in the routing updates.

RIP Convergence and Loop Prevention     205
RIP exchanges routes by sending RIP updates on each interface based on an Update timer (update 
interval). A RIP router advertises its connected routes, as well as other RIP-learned routes that are 
in the router’s IP routing table. Note that RIP does not keep a separate topology table. RIP routers 
do not form neighbor relationships, nor do they use a Hello protocol—each router simply sends 
updates, with destination address 224.0.0.9. (Note: RIPv1 uses broadcast address 255.255.255.255.) 
RIPv2 uses the same hop-count metric as RIPv1, with 15 being the largest valid metric, and 16 
considered to be inﬁnity. Interestingly, a RIP router does not put its own metric in the route of a 
sent routing update; rather, it ﬁrst adds 1 to each metric when building the update. For instance, 
if RouterA has a route with metric 2, it advertises that route with metric 3—in effect, telling the 
receiving router what its metric should be.
When Cisco RIP routers learn multiple routes to the same subnet, the lowest-metric route is 
chosen, of course. If multiple equal-hop routes exist, the router (by default) installs up to 4 such 
routes in its routing table, or between 1 and 6 of such routes, based on the ip maximum-paths 
number command under the router rip command.
RIP Convergence and Loop Prevention
The most interesting and complicated part of RIP relates to loop-prevention methods used during 
convergence after a route has failed. Some protocols, like OSPF, IS-IS, and EIGRP, include loop 
prevention as a side effect of their underlying route computations. However, RIP, like other 
distance vector protocols, uses several loop-prevention tools. Unfortunately, these loop-prevention 
tools also signiﬁcantly increase convergence time—a fact that is certainly the biggest negative 
feature of RIP, even for RIPv2. Table 8-3 summarizes some of the key features and terms related 
to RIP convergence, with further explanations following the table. 
Function
Description
Route Tags*
Allows RIP to tag routes as they are redistributed into RIP.
Next Hop ﬁeld*
Supports the assignment of a next-hop IP address for a route, allowing a router 
to advertise a next-hop router that is different from itself.
* RIPv2-only features
Table 8-3
RIP Features Related to Convergence and Loop Prevention 
KEY 
POINT
Function
Description
Split horizon
Instead of advertising all routes out a particular interface, RIP omits the routes whose 
outgoing interface ﬁeld matches the interface out which the update would be sent. 
Triggered 
update
The immediate sending of a new update when routing information changes, instead of 
waiting for the Update timer to expire.
continues
Table 8-2
RIP Feature Summary (Continued)

206     Chapter 8: RIP Version 2
The rest of this section shows examples of the convergence features, using RIP show and debug 
command output to show examples of their use. Figure 8-1 shows the sample internetwork that 
is used in these examples of the various loop-prevention tools. 
Figure 8-1
Sample Internetwork Used for Loop-Prevention Examples
Converged Steady-State Operation
Example 8-1 shows a few details of R1’s operation while all interfaces in Figure 8-1 are up and 
working. The example lists the basic (and identical) RIP conﬁguration on all four routers; 
conﬁguration will be covered in more detail later in the chapter. As conﬁgured, all four routers are 
Function
Description
Route 
poisoning
The process of sending an inﬁnite-metric (hop count 16) route in routing updates 
when that route fails.
Poison reverse
The act of advertising a poisoned route (metric 16) out an interface, but in reaction to 
receiving that same poisoned route in an update received on that same interface.
Update timer
The timer that speciﬁes the time interval over which updates are sent. Each interface 
uses an independent timer, defaulting to 30 seconds.
Holddown 
timer
A per-route timer (default 180 seconds) that begins when a route’s metric changes to a 
larger value. The router does not add an alternative route for this subnet to its routing 
table until the Holddown timer for that route expires. 
Invalid timer
A per-route timer that increases until it receives a routing update that conﬁrms the 
route is still valid, upon which the timer is reset to 0. If the updates cease, the Invalid 
timer will grow until it reaches the timer setting (default 180 seconds), after which the 
route is considered invalid.
Flush 
(Garbage) 
timer
A per-route timer that is reset and grows with the Invalid timer. When the Flush timer 
mark is reached (default 240 seconds), the router removes the route from the routing 
table and accepts new routes to the failed subnet.
Table 8-3
RIP Features Related to Convergence and Loop Prevention (Continued)
R3
Failing interfaces
R1
E0/0
103.3/24
R4
R2
E0/0
103.4/24
S0/0.1
13.2/30
S0/0.2
24.1/30
S0/0.3
13.1/30
S0/0.4
24.2
Fa0/0
11.1/24
Fa0/0
11.2/24
Network 172.31.0.0

RIP Convergence and Loop Prevention     207
using only RIPv2, on all interfaces shown in Figure 8-1. Read the comments in Example 8-1 for 
explanations of the output.
Example 8-1
Steady-State RIP Operation in Figure 8-1 
! All routers use the same three lines of RIP configuration.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    vvvveeeerrrrssssiiiioooonnnn    2222
! Below, the sssshhhhoooowwww    iiiipppp    pppprrrroooottttooooccccoooollll command lists many of RIP’s operational settings, 
! including RIP timers, version used, and neighbors from which RIP updates have 
! been received (listed as “Routing Information Sources”).
R1# sssshhhhoooowwww    iiiipppp    pppprrrroooottttooooccccoooollll
Routing Protocol is "rip"
  Sending updates every 30 seconds, next due in 24 seconds
  Invalid after 180 seconds, hold down 180, flushed after 240
  Outgoing update filter list for all interfaces is not set
  Incoming update filter list for all interfaces is not set
  Redistributing: rip
  Default version control: send version 2, receive version 2
    Interface             Send  Recv  Triggered RIP  Key-chain
    FastEthernet0/0       2     2                             
    Serial0/0.3           2     2                                    
  Automatic network summarization is in effect
  Maximum path: 4
  Routing for Networks:
    172.31.0.0
  Routing Information Sources:
    Gateway         Distance      Last Update
    172.31.11.2          120      00:00:15
    172.31.13.2          120      00:00:08
  Distance: (default is 120)
! Below, the current Invalid timer is listed by each RIP route. Note that it took 
! about 3 seconds between the above sssshhhhoooowwww    iiiipppp    pppprrrroooottttooooccccoooollllssss command and the upcoming
! sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee command, so the last update from 172.31.13.2 (above) 
! was 8 seconds; 3 seconds later, the Invalid timer for a route learned from 
! 172.31.13.2 is now 11 seconds.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route
continues

208     Chapter 8: RIP Version 2
Triggered (Flash) Updates and Poisoned Routes
When RIP knows for sure that a route to a subnet has failed, RIPv2 can converge to an alternate 
route typically in less than a minute. Example 8-2 details the steps behind one such example, using 
Figure 8-1, with the steps outlined in the following list (the comments in Example 8-2 refer to 
these steps by number):
1.
RIP debug messages show R1’s RIP updates, including R1’s use of split horizon.
2.
R3’s E0/0 interface is shut down, simulating a failure.
3.
R3 immediately sends a triggered update (also called a ﬂash update), because R3 knows for 
sure that the route has failed. R3’s advertised route is a poisoned route to 172.31.103.0/24. 
4.
R1 immediately (due to triggered updates) advertises a poison reverse route for 172.31.103.0/24, 
back to R3, and sends a triggered update out its fa0/0 interface. 
5.
R1 removes its route to 172.31.103.0/24 from its routing table.
6.
R1 waits for R2’s next update, sent based on R2’s Update timer on its fa0/0 interface. That 
update includes a route to 172.31.103.0/24. R1 adds that route to its routing table.
Gateway of last resort is not set
     172.31.0.0/16 is variably subnetted, 4 subnets, 2 masks
R       172.31.24.0/30 [120/1] via 172.31.11.2, 00:00:18, FastEthernet0/0
C       172.31.11.0/24 is directly connected, FastEthernet0/0
C       172.31.13.0/30 is directly connected, Serial0/0.3
R       172.31.103.0/24 [120/1] via 172.31.13.2, 00:00:11, Serial0/0.3
! Below, the sssshhhhoooowwww    iiiipppp    rrrriiiipppp    ddddaaaattttaaaabbbbaaaasssseeee command lists information for each route 
! considered by RIP.
R1# sssshhhhoooowwww    iiiipppp    rrrriiiipppp    ddddaaaattttaaaabbbbaaaasssseeee
172.31.0.0/16    auto-summary
172.31.11.0/24    directly connected, FastEthernet0/0
172.31.13.0/30    directly connected, Serial0/0.3
172.31.24.0/30
    [1] via 172.31.11.2, 00:00:01, FastEthernet0/0
172.31.103.0/24
[1] via 172.31.13.2, 00:00:23, Serial0/0.3
NOTE
The show ip rip database command lists all RIP learned routes, and all connected 
routes that RIP is advertising. 
Example 8-1
Steady-State RIP Operation in Figure 8-1 (Continued)

RIP Convergence and Loop Prevention     209
Example 8-2
R1’s Convergence for 172.31.103.0/24 upon R3’s E0/0 Interface Failure 
! First, the ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp command enables RIP debugging. This command will show
! messages that show every route in the sent and received updates. 
R1# ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp
RIP protocol debugging is on
! (Step 1) Below, the output exhibits split horizon—for example, 172.31.103.0/24
! is not advertised out s0/0.3, but it is advertised out fa0/0.
*Mar  3 22:44:08.176: RIP: sending v2 update to 224.0.0.9 via Serial0/0.3 (172.31.13.1)
*Mar  3 22:44:08.176: RIP: build update entries
*Mar  3 22:44:08.176:  172.31.11.0/24 via 0.0.0.0, metric 1, tag 0
*Mar  3 22:44:08.176:  172.31.24.0/30 via 0.0.0.0, metric 2, tag 0
*Mar  3 22:44:12.575: RIP: sending v2 update to 224.0.0.9 via FastEthernet0/0 (172.31.11.1)
*Mar  3 22:44:12.575: RIP: build update entries
*Mar  3 22:44:12.575:  172.31.13.0/30 via 0.0.0.0, metric 1, tag 0
*Mar  3 22:44:12.575:  172.31.103.0/24 via 0.0.0.0, metric 2, tag 0
! Next, R1 receives a RIP update from R3. The metric 1 route in the update below
! is R1’s best route, and is placed into R1’s routing table. Note that the metric
! in the received update is R1’s actual metric to reach the route.
*Mar  3 22:44:21.265: RIP: received v2 update from 172.31.13.2 on Serial0/0.3
*Mar  3 22:44:21.269:      172.31.24.0/30 via 0.0.0.0 in 2 hops
*Mar  3 22:44:21.269:      172.31.103.0/24 via 0.0.0.0 in 1 hops
! (Step 2) R3’s E0/0 interface is shut down at this point. (Not shown).
! (Step 3) Below, R1 receives a triggered update, with two poison routes from R3—
! the same two routes that R3 advertised in the previous routing update above.
! Note that the triggered update only includes changed routes, with full updates
! continuing on the same update interval. 
*Mar  3 22:44:46.338: RIP: received v2 update from 172.31.13.2 on Serial0/0.3
*Mar  3 22:44:46.338:      172.31.24.0/30 via 0.0.0.0 in 16 hops  (inaccessible)
*Mar  3 22:44:46.338:      172.31.103.0/24 via 0.0.0.0 in 16 hops  (inaccessible)
! (Step 4) Above, R1 reacts to its receipt of poisoned routes, sending a triggered
! update out its fa0/0 interface. Note that the debug refers to the triggered
! update as a flash update.
*Mar  3 22:44:48.341: RIP: sending v2 flash update to 224.0.0.9 via FastEthernet 0/0 
  (172.31.11.1)
*Mar  3 22:44:48.341: RIP: build flash update entries
*Mar  3 22:44:48.341:  172.31.103.0/24 via 0.0.0.0, metric 16, tag 0
! (Step 4) R1 also sends a triggered update out s0/0.3 to R3, which includes 
! a poison reverse route to 172.31.103.0/24, back to R3. R1 does not send back a 
! poison route to 172.31.24.0, because R1’s route to 172.31.24.0 was
! pointing towards R2, not R3—so R1’s route to 172.31.24.0/24 did not fail.
*Mar  3 22:44:48.341: RIP: sending v2 flash update to 224.0.0.9 via Serial0/0.3 
(172.31.13.1)
! (Step 5) Below, note the absence of a route to 103.0/24 in R1’s routing table.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111100003333....0000
% Subnet not in table
! (Step 6) Below, 23 seconds since the previous ddddeeeebbbbuuuugggg message, R2’s next routing 
! update arrives at R1, advertising 172.31.103.0/24. Following that, R1 now has
! a 2-hop route, through R2, to 172.31.103.0/24.
continues

210     Chapter 8: RIP Version 2
If you examine the debug message time stamps in Example 8-2, you will see that between 25 and 
45 seconds passed from when R1 heard the poisoned routes until R1 heard R2’s new routing 
update with a now-best route to 172.31.103.0/24. While not on par with EIGRP or OSPF, this 
convergence is reasonably fast for RIP. 
RIP Convergence When Routing Updates Cease
When a router ceases to receive routing updates, RIP must wait for some timers to expire before 
it decides that routes previously learned from the now-silent router can be considered to be failed 
routes. To deal with such cases, RIP uses its Invalid, Flush, and Holddown timers to prevent loops. 
Coincidentally, RIP’s convergence time increases to several minutes as a result.
Example 8-3 details just such a case, where R1 simply ceases to hear RIP updates from R3. (To 
create the failure, R3’s s0/0.1 subinterface was shut down, simulating failure of a Frame Relay 
PVC.) The example uses the internetwork illustrated in Figure 8-1 again, and begins with all 
interfaces up, and all four routes known in each of the four routers. The example follows this 
sequence (the comments in Example 8-3 refer to these steps by number):
1.
R3’s s0/0.1 subinterface fails, but R1’s Frame Relay subinterface stays up—so R1 must use 
its timers to detect route failures.
2.
R1’s Invalid and Flush timers for route 172.31.103.0/24 grow because it does not hear any 
further updates from R3.
3.
After the Invalid timer expires (180 seconds) for R1’s route to 172.31.103.0/24, R1 begins a 
Holddown timer for the route. Holddown starts at (default) 180 seconds, and counts down.
*Mar  3 22:45:11.271: RIP: received v2 update from 172.31.11.2 on FastEthernet0/0
*Mar  3 22:45:11.271:      172.31.24.0/30 via 0.0.0.0 in 1 hops
*Mar  3 22:45:11.271:      172.31.103.0/24 via 0.0.0.0 in 2 hops
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111100003333....0000
Routing entry for 172.31.103.0/24
  Known via "rip", distance 120, metric 2
  Redistributing via rip
  Last update from 172.31.11.2 on FastEthernet0/0, 00:00:01 ago
  Routing Descriptor Blocks:
  * 172.31.11.2, from 172.31.11.2, 00:00:01 ago, via FastEthernet0/0
Route metric is 2, traffic share count is 1
NOTE
Do not confuse the term triggered update with the term triggered extensions to RIP. 
RFC 2091 deﬁnes how RIP can choose to send full updates only once, and then be silent, to 
support demand circuits. The feature is enabled per interface by the ip rip triggered interface 
subcommand.
Example 8-2
R1’s Convergence for 172.31.103.0/24 upon R3’s E0/0 Interface Failure (Continued)

RIP Convergence and Loop Prevention     211
4.
The Flush timer expires after a total 240 seconds, or 60 seconds past the Invalid timer. As a 
result, R1 ﬂushes the route to 172.31.103.0/24 from its routing table, which also removes the 
Holddown timer for the route.
Example 8-3
R1 Ceases to Hear R3’s Updates: Invalid, Flush, and Holddown Timers Required 
! First, the ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp    eeeevvvveeeennnntttt command is used, which displays messages when
! updates are sent and received, but does not display the contents of the updates.
R1# ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp    eeeevvvveeeennnntttt
RIP event debugging is on
! (Step 1) Not Shown: R3’s S0/0.1 subinterface is shut down.
! (Step 2) Below, the Invalid timer for 172.31.103.0/24 has reached 35, meaning 
! that 35 seconds have passed since the last received update from which this route 
! was learned. An Invalid timer over 30 seconds means that at least one RIP
! update was not received.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
E1 - OSPF external type 1, E2 - OSPF external type 2
i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
ia - IS-IS inter area, * - candidate default, U - per-user static route
o - ODR, P - periodic downloaded static route
Gateway of last resort is not set
172.31.0.0/16 is variably subnetted, 4 subnets, 2 masks
R       172.31.24.0/30 [120/1] via 172.31.11.2, 00:00:09, FastEthernet0/0
C       172.31.11.0/24 is directly connected, FastEthernet0/0
C       172.31.13.0/30 is directly connected, Serial0/0.3
R       172.31.103.0/24 [120/1] via 172.31.13.2, 00:00:35, Serial0/0.3
! Below, one example set of ddddeeeebbbbuuuugggg messages are shown. (Many more ddddeeeebbbbuuuugggg messages 
! occurred while waiting for convergence, but those were omitted.) The messages 
! about R1’s received updates from R2 occur every 30 seconds or so. The contents 
! include a 2-hop route to 172.31.103.0/24, which R1 ignores until the Flush timer 
! expires. 
*Mar  3 21:59:58.921: RIP: received v2 update from 172.31.11.2 on FastEthernet0/0
*Mar  3 21:59:58.921: RIP: Update contains 2 routes
! (Step 3) Below, the Invalid timer expires, roughly 3 minutes after the failure.
! Note that the route is listed as “possibly down,” which occurs when the
! Invalid timer has expired but the Flush timer has not. Note that the sssshhhhoooowwww    iiiipppp
! rrrroooouuuutttteeee command does not list the Flush timer settings, but the upcoming sssshhhhoooowwww    
! iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111100003333....0000 command does.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
E1 - OSPF external type 1, E2 - OSPF external type 2
continues

212     Chapter 8: RIP Version 2
At the end of the example, the only remaining step for convergence is for R1 to receive R2’s next 
regular full routing update, which includes a two-hop route to 172.31.103.0/24. R2 will send that 
update based on R2’s regular update interval. R1 would place that route in its routing table, 
completing convergence.
Note that either the Flush timer or the Holddown timer must expire before new routing information 
would be used in this case. Here, the Flush timer for route 172.31.103.0/24 expired ﬁrst, resulting 
in the route being removed from R1’s routing table. When the route is ﬂushed (removed), any 
associated timers are also removed, including the Holddown timer. Had the Holddown timer been 
smaller, and had it expired before the Flush timer, R1 would have been able to use the route 
advertised by R2 at that point in time.
Convergence Extras 
Convergence in Example 8-3 took a little over 4 minutes, but it could be improved in some cases. 
The RIP timers can be tuned with the timers basic update invalid hold-down ﬂush subcommand 
i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
ia - IS-IS inter area, * - candidate default, U - per-user static route
o - ODR, P - periodic downloaded static route
Gateway of last resort is not set
        172.31.0.0/16 is variably subnetted, 4 subnets, 2 masks
R       172.31.24.0/30 [120/1] via 172.31.11.2, 00:00:20, FastEthernet0/0
C       172.31.11.0/24 is directly connected, FastEthernet0/0
C       172.31.13.0/30 is directly connected, Serial0/0.3
R       172.31.103.0/24 is possibly down,
          routing via 172.31.13.2, Serial0/0.3
! (Step 3) Next, the command shows the metric as inaccessible, meaning an 
! infinite metric, as well as the current Flush timer (3:23), which counts up. 
! Also, the Holddown timer for this route has started (at 180 seconds), with 159 
! seconds in its countdown. The Holddown timer prevents R1 from using the route 
! heard from R2.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111100003333....0000
Routing entry for 172.31.103.0/24
  Known via "rip", distance 120, metric 4294967295 (inaccessible)
  Redistributing via rip
  Last update from 172.31.13.2 on Serial0/0.3, 00:03:23 ago
  Hold down timer expires in 159 secs
! (Step 4) Below, just after 4 minutes has passed, the Flush timer has expired, 
! and the route to 172.31.103.0/24 has been flushed from the routing table.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111100003333....0000
% Subnet not in table
Example 8-3
R1 Ceases to Hear R3’s Updates: Invalid, Flush, and Holddown Timers Required (Continued)

RIP Conﬁguration     213
under router rip, although care should be taken when changing these timers. The timers should 
be consistent across routers, and smaller values increase the chance of routing loops being formed 
during convergence. 
The clear ip route * command also speeds convergence by removing all routes from the routing 
table, along with any per-route timers. In Example 8-3, the clear ip route 172.31.103.0 command 
would have worked as well, just deleting that one route. Because the clear command bypasses 
loop-prevention features by deleting the route and timers, it can be risky, but it certainly speeds 
convergence. Also, after the clear command, R1 would immediately issue RIP request packets, 
which cause the neighboring routers to send full routing updates to R1, instead of waiting on their 
next update time. 
RIP Conﬁguration
The second half of the chapter explains the majority of the options for conﬁguring RIPv2. Make 
sure to review the full list of commands, and command syntax, listed in Table 8-6 of the “Foundation 
Summary” section for this chapter.
Figure 8-2 shows the internetwork that will be used to demonstrate RIP conﬁguration throughout 
the rest of the chapter. Note that most of the subnets are part of network 172.31.0.0, except where 
noted. 
Figure 8-2
Sample Internetwork Used for RIP Conﬁguration Examples
Network 172.31.0.0, Except where Shown
R3
R1
E0/0
103.3/24
13.2/30
23.1/30
14.1/30
16.1/24
Fa0/0
13.1/30
11.1/24
11.201/24
211.202/24
R4
FR
VLAN 11
172.31.11.0/24
E0/0
104.144/26
24.1/30
14.2/30
R5
E0/0
105.5/24
25.1/30
R6
R2
E0/0
Fa0/0
10.1.106.6/24
10.1.26.6/24
11.2/24
16.6/24
10.1.26.2/24
25.2/30
24.2/30
23.2/30
11.202/24
S2
OSPF
S1
RIP
212.202/24
213.202/24
221.202/24
222.202/24
223.202/24

214     Chapter 8: RIP Version 2
The next three examples explain the conﬁguration for the network in Figure 8-2. Before gathering 
the output for the three examples, all the routers were conﬁgured based on the following design 
goals:
■
Only RIPv2 is used, except as noted.
■
MD5 authentication is used between S1, R1, and R2 on the LAN. (Note: S1 will be intentionally 
misconﬁgured.)
■
Simple text authentication is used between R1 and R4.
■
S2 speaks only OSPF; only R2 will perform redistribution from OSPF into RIP, and advertise 
over the LAN, to demonstrate RIP’s next-hop feature.
■
R5’s IP address on the Frame Relay cloud will be conﬁgured on the physical serial interface, 
not a subinterface, to show the effect of the default behavior of no ip split-horizon.
Enabling RIP and the Effects of Autosummarization
Example 8-4 covers basic RIP conﬁguration, the meaning and implication of the RIP network 
command, and the effects of the default setting for autosummarization. To examine just those 
functions, Example 8-4 shows the related RIP conﬁguration on R1, R2, and R6, along with some 
command output. 
Example 8-4
Basic RIP Conﬁguration on R1, R2, R4, and S1 
! First, the three lines of configuration are the same on R1 and S1 
! (Point 1): the vvvveeeerrrrssssiiiioooonnnn    2222 command tells R1 to send and receive only RIPv2
! updates, and to ignore RIPv1 updates. The nnnneeeettttwwwwoooorrrrkkkk command must have a classful 
! network as the parameter.  
rrrroooouuuutttteeeerrrr    rrrriiiipppp
        vvvveeeerrrrssssiiiioooonnnn    2222
        nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
! Next, the configuration for R2 and R6 is shown, which includes a nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000 
! command, enabling RIP on their interfaces in network 10.0.0.0.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
        vvvveeeerrrrssssiiiioooonnnn    2222
        nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
        nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
! Below, R1 shows that only v2 updates are being sent and received, and that
! autosummarization is in effect. Note also the Key-chain information for 
! authentication, which will be covered in a later example.
R1# sssshhhh    iiiipppp    pppprrrroooottttooooccccoooollll
Routing Protocol is "rip"
  Sending updates every 30 seconds, next due in 26 seconds
  Invalid after 180 seconds, hold down 180, flushed after 240
  Outgoing update filter list for all interfaces is not set
  Incoming update filter list for all interfaces is not set

RIP Conﬁguration     215
A couple of points from this example need a little more explanation. The RIP network command 
only allows for a classful network as a parameter, which in turn enables RIP on all of that router’s 
interfaces that are part of that network. Enabling RIP on an interface makes the router begin 
sending RIP updates, listening for RIP updates (UDP port 520), and advertising that interface’s 
connected subnet. 
Because the RIP network command has no way to simply match one interface at a time, a RIP 
conﬁguration may enable these three functions on an interface for which some or all of these 
functions are not required. The three RIP functions can be individually disabled on an interface 
with some effort. Table 8-4 lists these three functions, along with how to disable each feature.
  Redistributing: rip
  Default version control: send version 2, receive version 2
    Interface             Send  Recv  Triggered RIP  Key-chain
    FastEthernet0/0        2     2                    carkeys         
    Serial0/0.3            2     2                                    
    Serial0/0.4            2     2                    anothersetofkeys
    Serial0/0.6            2     2                                    
  Automatic network summarization is in effect
  Maximum path: 4
  Routing for Networks:
! lines omitted for brevity
! Below, the sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11110000....0000....0000....0000 command lists all of R1’s known routes to 
! network 10.0.0.0; the only route is for 10.0.0.0/8, because R2 and R6
! automatically summarize (by default) at the classful network boundary.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11110000....0000....0000....0000
Routing entry for 10.0.0.0/8
  Known via "rip", distance 120, metric 1
  Redistributing via rip
  Last update from 172.31.11.2 on FastEthernet0/0, 00:00:01 ago
  Routing Descriptor Blocks:
    172.31.16.6, from 172.31.16.6, 00:00:08 ago, via Serial0/0.6
        Route metric is 1, traffic share count is 1
  * 172.31.11.2, from 172.31.11.2, 00:00:01 ago, via FastEthernet0/0
Route metric is 1, traffic share count is 1
Table 8-4
RIP Per-Interface Actions, and How to Disable Them Once Enabled
KEY 
POINT
RIP Function
How to Disable
Sending RIP updates
Make the interface passive: conﬁgure router rip, followed by passive-
interface type number
Listening for RIP updates
Filter all incoming routes using a distribute list
Advertising the 
connected subnet
Filter outbound advertisements on other interfaces using distribute lists, 
ﬁltering an interface’s connected subnet
Example 8-4
Basic RIP Conﬁguration on R1, R2, R4, and S1 (Continued)

216     Chapter 8: RIP Version 2
Another way you can limit advertisements on multiaccess networks is to use the neighbor
ip-address RIP subcommand. This command tells RIP to send unicast RIP updates to that 
neighbor. For instance, when using a multipoint Frame Relay subinterface, there may be four 
routers reachable using that subinterface. If you want to send RIP updates to only one of them, 
make the interface passive, and then use the neighbor command to cause RIP to send updates, 
but only to that one neighbor.
RIP uses autosummarization at classful network boundaries by default. In Example 8-4, R2 and 
R6 connect to parts of classful networks 10.0.0.0/8 and network 172.31.0.0/16. Advertisements 
sent out interfaces in network 172.31.0.0/16 advertise a summarized route of the complete class A 
network 10.0.0.0/8. In the example, R2 and R6 both advertise a summarized network 10.0.0.0 to R1. 
As a result, as seen with the show ip route 10.0.0.0 command on R1, R1 knows two equal-cost 
routes to classful network 10.0.0.0. In this case, R1 would send some packets meant for subnet 
10.1.106.0/24 through R2 ﬁrst, a seemingly poor choice. To advertise the subnets of network 
10.0.0.0, R2 and R6 could be conﬁgured with the no auto-summary command under router rip. 
Note that RIPv2 allows for discontiguous networks, but autosummarization must be disabled for 
a design using discontiguous networks to work.
RIP Authentication Conﬁguration
RIP authentication, much like EIGRP and OSPF authentication, requires the creation of keys 
and requires authentication to be enabled on an interface. The keys are used either as clear-text 
passwords or as the secret (private) key used in an MD5 calculation. 
Multiple keys are allowed, and are grouped together using a construct called a key chain. A key 
chain is simply a set of related keys, each of which has a different number and may be restricted 
to a time period. By allowing multiple related keys in a key chain, with each key valid during 
speciﬁed time periods, the engineer can easily plan for migration to new keys in the future. (NTP 
is recommended when keys are restricted by time ranges.)  
Cisco IOS enables the RIP (and OSPF and EIGRP) authentication process on a per-interface basis, 
referring to the key chain that holds the keys with the ip authentication key-chain name interface 
subcommand. The router looks in the key chain and selects the key(s) valid at that particular time. 
With RIP, the type of authentication (clear-text password or MD5 digest) is chosen per interface 
as well, using the ip rip authentication mode {text | md5} interface subcommand. If this command 
is omitted, the authentication type defaults to text, meaning that the key is used as a clear-text password.
Example 8-5 shows the RIP authentication conﬁguration for R1, R2, and R4, and includes a few 
additional comments.

RIP Conﬁguration     217
Example 8-5
RIP Authentication (R1, R2, R4, and S1) 
! First, R1 Config
! Chain “carkeys” will be used on R1’s LAN. R1 will use key “fred” for 
! about a month, and then start using “wilma.” 
kkkkeeeeyyyy    cccchhhhaaaaiiiinnnn    ccccaaaarrrrkkkkeeeeyyyyssss
        kkkkeeeeyyyy    1111
            kkkkeeeeyyyy----ssssttttrrrriiiinnnngggg    ffffrrrreeeedddd
            aaaacccccccceeeepppptttt----lllliiiiffffeeeettttiiiimmmmeeee    00008888::::00000000::::00000000    JJJJaaaannnn    11111111    2222000000005555    00008888::::00000000::::00000000    FFFFeeeebbbb    11111111    2222000000005555
            sssseeeennnndddd----lllliiiiffffeeeettttiiiimmmmeeee    00008888::::00000000::::00000000    JJJJaaaannnn    11111111    2222000000005555    00008888::::00000000::::00000000    FFFFeeeebbbb    11111111    2222000000005555            
        kkkkeeeeyyyy    2222
            kkkkeeeeyyyy----ssssttttrrrriiiinnnngggg    wwwwiiiillllmmmmaaaa
            aaaacccccccceeeepppptttt----lllliiiiffffeeeettttiiiimmmmeeee    00008888::::00000000::::00000000    FFFFeeeebbbb    11110000    2222000000005555    00008888::::00000000::::00000000    MMMMaaaarrrr    11111111    2222000000005555
            sssseeeennnndddd----lllliiiiffffeeeettttiiiimmmmeeee    00008888::::00000000::::00000000    FFFFeeeebbbb    11110000    2222000000005555    00008888::::00000000::::00000000    MMMMaaaarrrr    11111111    2222000000005555
! Next, key chain “anothersetofkeys” defines the key to be used with R4.
kkkkeeeeyyyy    cccchhhhaaaaiiiinnnn    aaaannnnooootttthhhheeeerrrrsssseeeettttooooffffkkkkeeeeyyyyssss
    kkkkeeeeyyyy    1111
        kkkkeeeeyyyy----ssssttttrrrriiiinnnngggg    bbbbaaaarrrrnnnneeeeyyyy
! Next, R1’s interface subcommands are shown. First, the key chain is referenced 
! using the iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn command, and the iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmooooddddeeee    mmmmdddd5555 
! command causes the router to use an MD5 digest of the key string. 
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
        iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11111111....1111    222255555555....222255555555....222255555555....0000
        iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmooooddddeeee    mmmmdddd5555
        iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    kkkkeeeeyyyy----cccchhhhaaaaiiiinnnn    ccccaaaarrrrkkkkeeeeyyyyssss
! Below, R1 enables RIPv2 authentication on the subinterface connecting to R4, 
! using simple text authentication in this case (default).
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....4444    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
        iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11114444....1111    222255555555....222255555555....222255555555....222255552222
        iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    kkkkeeeeyyyy----cccchhhhaaaaiiiinnnn    aaaannnnooootttthhhheeeerrrrsssseeeettttooooffffkkkkeeeeyyyyssss
! R2 Config – R2 Config – R2 Config
! Next, on R2, the key chain name (housekeys) differs with R1’s key chain name (carkeys), but
! the key string “fred” is the same. R2’s LAN interface has MD5 authentication
! enabled to match the authentication type used on R1’s LAN interface.
kkkkeeeeyyyy    cccchhhhaaaaiiiinnnn    hhhhoooouuuusssseeeekkkkeeeeyyyyssss
    kkkkeeeeyyyy    1111
        kkkkeeeeyyyy----ssssttttrrrriiiinnnngggg    ffffrrrreeeedddd
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11111111....2222    222255555555....222255555555....222255555555....0000
    iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmooooddddeeee    mmmmdddd5555
    iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    kkkkeeeeyyyy----cccchhhhaaaaiiiinnnn    hhhhoooouuuusssseeeekkkkeeeeyyyyssss
! R4 Config – R4 Config – R4 Config
! Next, R4 enables RIP authentication on its subinterface connecting to R1, but 
! without a iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmooooddddeeee    mmmmdddd5555 command, it uses the key as simple 
! text. 
kkkkeeeeyyyy    cccchhhhaaaaiiiinnnn    bbbbooooaaaattttkkkkeeeeyyyyssss
    kkkkeeeeyyyy    1111
continues

218     Chapter 8: RIP Version 2
Although the comments in Example 8-5 explain the more important details, one other point needs 
to be made regarding the key lifetimes. The conﬁguration shows that two of the keys’ lifetimes 
overlap by a day. On that day, RIP would use the key with the lowest key number. By using 
such logic, you could start by conﬁguring one key. Later, you could then add a second key on all 
        kkkkeeeeyyyy----ssssttttrrrriiiinnnngggg    bbbbaaaarrrrnnnneeeeyyyy
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11114444....2222    222255555555....222255555555....222255555555....222255552222
    iiiipppp    rrrriiiipppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    kkkkeeeeyyyy----cccchhhhaaaaiiiinnnn    bbbbooooaaaattttkkkkeeeeyyyyssss
! S1 Config – S1 Config – S1 Config
! No Authentication is Configured, in order to induce the authentication failure.
! Commands below are on R1  
!Below, the sssshhhhoooowwww    iiiipppp    pppprrrroooottttooooccccoooollll command lists the key chains used for authentication. 
R1# sssshhhh    iiiipppp    pppprrrroooottttooooccccoooollll
Routing Protocol is "rip"
  Sending updates every 30 seconds, next due in 26 seconds
  Invalid after 180 seconds, hold down 180, flushed after 240
  Outgoing update filter list for all interfaces is not set
  Incoming update filter list for all interfaces is not set
  Redistributing: rip
  Default version control: send version 2, receive version 2
    Interface             Send  Recv  Triggered RIP  Key-chain
    FastEthernet0/0       2     2                    carkeys         
    Serial0/0.3           2     2                                    
    Serial0/0.4           2     2                    anothersetofkeys
    Serial0/0.6           2     2                                    
  Automatic network summarization is in effect
  Maximum path: 4
  Routing for Networks:
    172.31.0.0
  Routing Information Sources:
    Gateway         Distance      Last Update
    172.31.16.6          120      00:00:09
    172.31.11.2          120      00:00:18
    172.31.13.2          120      00:00:04
    172.31.14.2          120      00:00:08
  Distance: (default is 120)
! Above, note that 172.31.11.201 (S1’s LAN IP address) is not listed as an 
! information source, because authentication failed with S1. (S1 simply omitted 
! any RIP authentication configuration.) 
! Below, the ddddeeeebbbbuuuugggg output shows a reaction to the unauthenticated update received
! from S1.
R1# ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp    eeeevvvveeeennnnttttssss
RIP event debugging is on
Jan 11 10:57:34.914: RIP: ignored v2 packet from 172.31.11.201 (invalid authentication)
Example 8-5
RIP Authentication (R1, R2, R4, and S1) (Continued)

RIP Conﬁguration     219
the routers, with overlapping time periods—but still use the original key. Finally, you could either 
let the ﬁrst key expire or delete the ﬁrst key, allowing for easy migration.
RIP Next-Hop Feature and Split Horizon
This section covers the split horizon and next-hop features of RIPv2. These two features do not 
typically need to be considered at the same time, but in some cases they do. The example used in 
this section shows how the two features may be needed in the same design.
First, Cisco IOS controls the split horizon setting per interface, using the [no] ip split-horizon 
interface subcommand. Split horizon is on by default, except for cases in which Frame Relay is 
conﬁgured with the IP address on the physical interface. 
The RIPv2 next-hop feature allows a RIP router to advertise a different next-hop router than the 
advertising router. To demonstrate the next-hop feature in Example 8-6, S2 will not run RIP at all, 
but rather will use OSPF to advertise routes to R2. R2 will in turn redistribute the OSPF routes 
into RIP, and advertise those routes to the other routers. When R2 advertises the OSPF-learned 
routes over the LAN, R1 learns these routes. However, because of the next-hop feature, R1 will 
point to S2 as the next-hop router. To cause that to happen, R2 advertises S2 as the next-hop router 
in R2’s RIP updates.
Interestingly, for this example to work, the split horizon feature must be disabled on R2’s fa0/0 
interface. With split horizon enabled on fa0/0 (the default conﬁguration), R1 would not normally 
advertise the redistributed routes out R2’s fa0/0 interface, because R2’s outgoing interface for 
those routes is also fa0/0. So, to force R2 to advertise those routes out fa0/0, thereby showing an 
example of RIP’s advertisement of a different next-hop router, R2 must disable split horizon on 
fa0/0. Example 8-6 shows the details. 
Example 8-6
RIP Next-Hop Feature 
! R2 Config
! Note that split horizon is disabled on R2’s fa0/0.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    111177772222....33331111....11111111....2222    222255555555....222255555555....222255555555....0000
    nnnnoooo    iiiipppp    sssspppplllliiiitttt----hhhhoooorrrriiiizzzzoooonnnn
! Next, R2 has a basic OSPF configuration, with simple redistribution into RIP.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....11111111....0000    0000....0000....0000....222255555555    aaaarrrreeeeaaaa    0000
!
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111    mmmmeeeettttrrrriiiicccc    2222
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
continues

220     Chapter 8: RIP Version 2
RIP Offset Lists
RIP offset lists allow RIP to add to a route’s metric, either before sending an update, or for routes 
received in an update. The offset list refers to an ACL (standard, extended, or named) to match the 
routes; any matched routes have the speciﬁed offset, or extra metric, added to their metrics. Any 
routes not matched by the offset list are unchanged. The offset list also speciﬁes which routing 
updates to examine by referring to a direction (in or out) and, optionally, an interface. If the 
interface is omitted from the command, all updates for the deﬁned direction will be examined. 
Example 8-7 shows R1, which offsets the metric by 13 for any routes in the range 172.31.208.0/21, 
for R1’s updates sent out toward the branches (R3–R6). (The example uses the same network 
from Figure 8-2.) Similarly, R2 uses the same ACL matching logic, but R2 offsets the metric 
upon receipt of inbound routing updates on its LAN interface (fa0/0). 
The routes in the 172.31.208.0/21 range are loopbacks on S1, advertised by S1 with metric 1; 
unchanged, R1 and R2 would have routes with a metric of 1 to these subnets, and the branch 
! On R2, the three OSPF-learned routes are listed; these will be the routes that 
! RIP redistributes to R1 and the rest of the routers.
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
     172.31.0.0/16 is variably subnetted, 13 subnets, 2 masks
O       172.31.223.0/24 [110/2] via 172.31.11.202, 02:01:40, FastEthernet0/0
O       172.31.222.0/24 [110/2] via 172.31.11.202, 02:01:40, FastEthernet0/0
O       172.31.221.0/24 [110/2] via 172.31.11.202, 02:01:40, FastEthernet0/0
! lines omitted for brevity
! Below, R2’s first ddddeeeebbbbuuuugggg message mentions “172.31.11.2” as the update source of 
! the next update. After that, the three messages, one per route, highlight the
! Next Hop field listing 172.31.11.202 (S2) as the next hop.
R2# ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp
RIP protocol debugging is on
Jan 11 10:58:12.874: RIP: sending v2 update to 224.0.0.9 via FastEthernet0/0
    (172.31.11.2)
! some lines omitted for brevity.
Jan 11 10:58:12.878:     172.31.221.0/24 via 172.31.11.202, metric 2, tag 0
Jan 11 10:58:12.878:     172.31.222.0/24 via 172.31.11.202, metric 2, tag 0
Jan 11 10:58:12.878:     172.31.223.0/24 via 172.31.11.202, metric 2, tag 0
! Below, on R1, note the route to 172.31.221.0/24 points to next hop of S2. In a    
! bit of a misnomer, the output lists the “last update from” information as if S2
! (172.31.11.202) sent the last routing update, but S2 is not even running RIP. 
! The second-to-last line lists the actual update’s source (“from 172.31.11.2”).
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....222222221111....0000
Routing entry for 172.31.221.0/24
 Known via "rip", distance 120, metric 2
 Redistributing via rip
 Last update from 172.31.11.202 on FastEthernet0/0, 00:00:05 ago
 Routing Descriptor Blocks:
 * 172.31.11.202, from 172.31.11.2, 00:00:05 ago, via FastEthernet0/0
Route metric is 2, traffic share count is 1
Example 8-6
RIP Next-Hop Feature (Continued)
KEY 
POINT

RIP Conﬁguration     221
routers would have routes with a metric of 2. After conﬁguring the offset lists, the branches will 
have a metric of 15 for these routes. As a result, the branch routers will not advertise these routes 
any farther, because the advertised metric would have to be 16—which of course is inﬁnite in RIP. 
Example 8-7
RIP Offset Lists 
! R1 Config
! Note that the ooooffffffffsssseeeetttt----lllliiiisssstttt command is a subcommand of the rrrroooouuuutttteeeerrrr    rrrriiiipppp command.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    ooooffffffffsssseeeetttt----lllliiiisssstttt    11111111    oooouuuutttt    11113333    SSSSeeeerrrriiiiaaaallll0000////0000....3333
    ooooffffffffsssseeeetttt----lllliiiisssstttt    11111111    oooouuuutttt    11113333    SSSSeeeerrrriiiiaaaallll0000////0000....4444
    ooooffffffffsssseeeetttt----lllliiiisssstttt    11111111    oooouuuutttt    11113333    SSSSeeeerrrriiiiaaaallll0000////0000....6666
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
!
aaaacccccccceeeessssssss----lllliiiisssstttt    11111111    ppppeeeerrrrmmmmiiiitttt    111177772222....33331111....222200008888....0000    0000....0000....7777....222255555555
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!    RRRR2222    CCCCoooonnnnffffiiiigggg
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    ooooffffffffsssseeeetttt----lllliiiisssstttt    11111111    iiiinnnn    11113333    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000    
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
!
aaaacccccccceeeessssssss----lllliiiisssstttt    11111111    ppppeeeerrrrmmmmiiiitttt    111177772222....33331111....222200008888....0000    0000....0000....7777....222255555555
! Next, R1 lists the three routes learned from S1 with metric 1. The offset list
! on R1 did not change the offset (metric) for inbound updates to R1.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity.
172.31.0.0/16 is variably subnetted, 13 subnets, 2 masks
R       172.31.211.0/24 [120/1] via 172.31.11.201, 00:00:28, FastEthernet0/0
R       172.31.213.0/24 [120/1] via 172.31.11.201, 00:00:28, FastEthernet0/0
R       172.31.212.0/24 [120/1] via 172.31.11.201, 00:00:28, FastEthernet0/0
! Next, R1’s next update to R4, out interface s0/0.4, is shown. Without the 
! offset list, R1 would advertise the listed routes with metric 2; in this
! case, it added 13 more to the metric, for a total metric of 15.
R1# ddddeeeebbbbuuuugggg    iiiipppp    rrrriiiipppp
RIP protocol debugging is on
R1#
Jan 11 16:51:02.659: RIP: sending v2 update to 224.0.0.9 via Serial0/0.4 (172.31.14.1)
Jan 11 16:51:02.659: RIP: build update entries
! lines omitted for brevity
Jan 11 16:51:02.663:  172.31.211.0/24 via 0.0.0.0, metric 15, tag 0
Jan 11 16:51:02.663:  172.31.212.0/24 via 0.0.0.0, metric 15, tag 0
Jan 11 16:51:02.663:  172.31.213.0/24 via 0.0.0.0, metric 15, tag 0
! Next, R2 lists the three routes learned from S1 with metric 14, because the
! offset list on R2 processes incoming updates. The offset list dictated that
! R2 add 13 to the received metric, which was 1 for these three routes.
continues

222     Chapter 8: RIP Version 2
Route Filtering with Distribute Lists and Preﬁx Lists
Outbound and inbound RIP updates can be ﬁltered at any interface, or for the entire RIP process. 
To ﬁlter the routes, the distribute-list command is used under router rip, referencing an IP ACL 
or an IP preﬁx list. Any subnets matched with a permit clause in the ACL make it through; any 
that match with a deny action are ﬁltered. The distribution list ﬁltering can be performed for either 
direction of ﬂow (in or out) and, optionally, for a particular interface. If the interface option is 
omitted, all updates coming into or out of the RIP process are ﬁltered. (Routes can also be ﬁltered 
at redistribution points, a topic covered in Chapter 11.)
The generic command, when creating a RIP distribution list that uses an ACL, is
ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt {access-list-number | name} {iiiinnnn    |    oooouuuutttt} [interface-type interface-number]
Example 8-8 shows an inbound distribution list on router R2, ﬁltering routes in the 172.31.196.0/22 
range. For this example, R2 now receives several /24 and /30 routes from S2, using RIPv2. The 
routes are in the range of 172.31.192.0/21, and the goal is to ﬁlter the upper half of that numeric 
range. (Again, the network of Figure 8-2 is used for this example.)
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity.
     172.31.0.0/16 is variably subnetted, 13 subnets, 2 masks
R       172.31.211.0/24 [120/14] via 172.31.11.201, 00:00:28, FastEthernet0/0
R       172.31.213.0/24 [120/14] via 172.31.11.201, 00:00:28, FastEthernet0/0
R       172.31.212.0/24 [120/14] via 172.31.11.201, 00:00:28, FastEthernet0/0
! Finally, R4 learned metric 15 routes from both R1 and R2 for these routes. R4
! will not advertise these routes to other routers, as they would be infinite 
! metric routes. Note that R4 puts both equal-metric routes into its routing 
! table below.
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....222200008888....0000    222255555555....222255555555....222244448888....0000    lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss
! lines omitted for brevity
      172.31.0.0/16 is variably subnetted, 13 subnets, 2 masks
R       172.31.211.0/24 [120/15] via 172.31.13.1, 00:00:13, Serial0/0.1
                        [120/15] via 172.31.23.2, 00:00:09, Serial0/0.2
! Lines omitted for brevity
Example 8-8
RIP Distribution List 
! The example begins with a list of the routes that should be filtered. Note that
! the lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss option below makes the command list all routes in the range.
! The highlighted lines are the ones that will be filtered.
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111199992222....0000    222255555555....222255555555....222244448888....0000    lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss 
! Lines omitted for brevity; in this case, the legend was deleted
Example 8-7
RIP Offset Lists (Continued)
KEY 
POINT
        

RIP Conﬁguration     223
A RIP distribute list might refer to a preﬁx list instead of an ACL to match routes. Preﬁx lists are 
designed to match a range of subnets, as well as a range of subnet masks associated with the 
subnets. The distribute list must still deﬁne the direction of the updates to be examined (in or out), 
and optionally an interface. 
Chapter 11 includes a more complete discussion of the syntax and formatting of preﬁx lists; this 
chapter focuses on how to call and use a preﬁx list for RIP. To reference a preﬁx list, use the 
following router rip subcommand: 
ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    {pppprrrreeeeffffiiiixxxx list-name} {iiiinnnn    | oooouuuutttt    } [interface-type interface-number]
Example 8-9 shows the syntax, with the preﬁx list denying all /30 routes from the range 172.31.192.0/21. 
The preﬁx list permits all other subnets. 
172.31.0.0/16 is variably subnetted, 24 subnets, 3 masks
R       172.31.195.0/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.194.0/24 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.196.4/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.195.4/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.197.0/24 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
R       172.31.196.0/30 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
R       172.31.195.8/30 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
! R2’s Configuration follows. aaaacccccccceeeessssssss----lllliiiisssstttt    2222 denies all subnets in the 
! 172.31.196.0/22 range, which is the set of subnets that need to be filtered.
! The ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    2222    iiiinnnn    ffffaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt0000////0000 command tells RIP to filter inbound
! RIP updates that come in fa0/0.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    2222    iiiinnnn    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
!
aaaacccccccceeeessssssss----lllliiiisssstttt    2222    ddddeeeennnnyyyy            111177772222....33331111....111199996666....0000    0000....0000....3333....222255555555
aaaacccccccceeeessssssss----lllliiiisssstttt    2222    ppppeeeerrrrmmmmiiiitttt    aaaannnnyyyy
! Below, the results show three less subnets in the larger 172.31.192.0/21 range.
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111199992222....0000    222255555555....222255555555....222244448888....0000    lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss 
! Lines omitted for brevity; in this case, the legend was deleted
    172.31.0.0/16 is variably subnetted, 21 subnets, 3 masks
R       172.31.195.0/30 [120/1] via 172.31.11.202, 00:00:22, FastEthernet0/0
R       172.31.194.0/24 [120/1] via 172.31.11.202, 00:00:22, FastEthernet0/0
R       172.31.195.4/30 [120/1] via 172.31.11.202, 00:00:22, FastEthernet0/0
R       172.31.195.8/30 [120/1] via 172.31.11.202, 00:00:22, FastEthernet0/0
Example 8-8
RIP Distribution List (Continued)

224     Chapter 8: RIP Version 2
Example 8-9
RIP Preﬁx List 
! The example begins with a list of the routes that should be filtered. Note that
! the lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss option below makes the command list all routes in the range.
! The highlighted lines are the ones that will be filtered.
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111199992222....0000    222255555555....222255555555....222244448888....0000    lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss 
! Lines omitted for brevity; in this case, the legend was deleted
      172.31.0.0/16 is variably subnetted, 24 subnets, 3 masks
R       172.31.195.0/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.194.0/24 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.196.4/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.195.4/30 [120/1] via 172.31.11.202, 00:00:18, FastEthernet0/0
R       172.31.197.0/24 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
R       172.31.196.0/30 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
R       172.31.195.8/30 [120/1] via 172.31.11.202, 00:00:19, FastEthernet0/0
! R2’s configuration follows. The “wo2” prefix list limits the mask range to 
! only /30 with the “ge 30 le 30” parameters. It matches any subnets between 
! 172.31.192.0 and 172.31.199.255. Note that the pppprrrreeeeffffiiiixxxx----lllliiiisssstttt commands are global commands.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx    wwwwoooo2222    iiiinnnn    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    wwwwoooo2222    sssseeeeqqqq    5555    ddddeeeennnnyyyy    111177772222....33331111....111199992222....0000////22221111    ggggeeee    33330000    lllleeee    33330000
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    wwwwoooo2222    sssseeeeqqqq    11110000    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000    lllleeee    33332222
! Below, note the absence of /30 routes in the specified range, and the presence 
! of the two /24 routes seen at the beginning of Example 8-8.
R2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....33331111....111199992222....0000    222255555555....222255555555....222244448888....0000    lllloooonnnnggggeeeerrrr----pppprrrreeeeffffiiiixxxxeeeessss 
! Lines omitted for brevity; in this case, the legend was deleted
     172.31.0.0/16 is variably subnetted, 19 subnets, 3 masks
R       172.31.194.0/24 [120/1] via 172.31.11.202, 00:00:23, FastEthernet0/0
R       172.31.197.0/24 [120/1] via 172.31.11.202, 00:00:23, FastEthernet0/0

Foundation Summary     225
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with a Key Point icon.
Table 8-5 lists the protocols mentioned in this chapter and their respective standards documents. 
Table 8-6 lists some of the most signiﬁcant Cisco IOS commands related to the topics in this 
chapter. 
Table 8-5
Protocols and Standards for Chapter 8
Protocol or Feature
Standard
RIP (Version 1)
RFC 1058
RIP (Version 2)
RFC 2453
RIP Update Authentication
RFC 2082
RIP Triggered Extensions for On-Demand Circuits
RFC 2091
Table 8-6
Command Reference for Chapter 8 
Command
Command Mode and Description
router rip
Global conﬁg; puts user in RIP conﬁguration mode 
network ip-address
RIP conﬁg mode; deﬁnes classful network, with all interfaces in 
that network sending and able to receive RIP advertisements
distribute-list [access-list-number | 
name | preﬁx name] | {in | out} 
[interface-type | interface-number]
RIP conﬁg mode; deﬁnes ACL or preﬁx list to ﬁlter RIP updates
ip split-horizon
Interface subcommand; enables or disables split horizon
passive-interface [default] 
{interface-type interface-number}
RIP conﬁg mode; causes RIP to stop sending updates on the 
speciﬁed interface
timers basic update invalid 
holddown ﬂush
RIP conﬁg mode; sets the values for RIP timers
version {1 | 2}
RIP conﬁg mode; sets the RIP version to version 1 or version 2
continues

226     Chapter 8: RIP Version 2
No single chapter in this book covers the details of the three uses of the terms classful and classless. 
This chapter mentions the ﬁnal of the three ways in which the terms are used—speciﬁcally, their 
use regarding routing protocols. (IPv1 and IGRP are classful routing protocols, and RIPv2, EIGRP, 
OSPF, and IS-IS are classless routing protocols.) Table 8-7 summarizes and compares the three 
uses of these terms.
Command
Command Mode and Description
offset-list {access-list-number | 
access-list-name} {in | out} offset 
[interface-type interface-number]
RIP conﬁg mode; deﬁnes rules for RIP to add to the metrics of 
particular routes
neighbor ip-address
RIP conﬁg mode; identiﬁes a neighbor to which unicast RIP 
updates will be sent
show ip route rip
User mode; displays all routes in the IP routing table learned 
by RIP
show ip rip database
User mode; lists all routes learned by RIP, even if a route is not 
in the routing table because of a route with lower administrative 
distance
debug ip rip
Enable mode; displays details of RIP processing
show ip protocols
User mode; lists RIP timer settings, current protocol status, 
autosummarization actions, and update sources
clear ip route {network [mask] | *}
Enable mode; clears the routing table entry, and with RIP, sends 
RIP requests, quickly rebuilding the routing table
show ip interface [type number] 
[brief]
User mode; lists many interface settings, including split horizon
key chain name-of-chain
Global conﬁg; deﬁnes name of key chain for routing protocol 
authentication
key key-id
Key conﬁg mode; identiﬁes a key by number
key string
Key conﬁg mode; deﬁnes the text of the key
send-lifetime [start-time {inﬁnite | 
end-time | duration seconds}]
Key conﬁg mode; deﬁnes when the key is valid to be used for 
sent updates
accept-lifetime [start-time {inﬁnite 
| end-time | duration seconds}]
Key conﬁg mode; deﬁnes when the key is valid for received 
updates
ip rip authentication key-chain 
name-of-chain
Interface mode; enables RIP authentication on the interface
ip rip authentication mode 
{text | md5}
Interface mode; deﬁnes RIP authentication as clear text (default) 
or MD5
Table 8-6
Command Reference for Chapter 8 (Continued)

Memory Builders     227
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Topic icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
Holddown timer, Invalid timer, Flush timer, Garbage timer, authentication, Update 
timer, triggered updates, ﬂash updates, split horizon, route poisoning, poison 
reverse, counting to inﬁnity, hello interval, full update, partial update, Route Tag 
ﬁeld, Next Hop ﬁeld, Triggered Extensions to RIP for On-Demand Circuits, MD5, 
offset list, preﬁx list, distribution list, distance vector, metric
Refer to the CD-based glossary to check your answers.
Further Reading
This chapter focuses on TCP/IP protocols; much more information can be found in the RFCs 
mentioned throughout the chapter. 
The RIP RFCs listed in Table 8-5 provide good references for RIP concepts.
Jeff Doyle’s Routing TCP/IP, Volume I, Second Edition, (Cisco Press) has several wonderful 
conﬁguration examples and provides a good explanation of the concepts.
Table 8-7
Comparing the Use of the Terms Classless and Classful 
As the terms 
pertain to . . .
Meaning of “Classless”
Meaning of “Classful”
Addressing 
(Chapter 4)
Class A, B, and C rules are not used; add-
resses have two parts, the preﬁx and host.
Class A, B, and C rules are used; addresses 
have three parts, the network, subnet, and host.
Routing 
(Chapter 7)
If no speciﬁc routes are matched for a 
given packet, the router forwards based on 
the default route.
The router ﬁrst attempts a match of the classful 
network. If found, but none of the routes in that 
classful network matches the destination of a 
given packet, the default route is not used.
Routing protocols 
(Chapter 8)
Routing protocol does not need to assume 
details about the mask, as it is included in 
the routing updates; supports VLSM and 
discontiguous networks.
Routing protocol does need to assume details 
about the mask, as it is not included in the 
routing updates; does not support VLSM and 
discontiguous networks.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— EIGRP
— The use of show and debug commands

C H A P T E R 9
EIGRP
This chapter covers most of the features, concepts, and commands related to EIGRP. Chapter 11, 
“IGP Route Redistribution, Route Summarization, and Default Routing,” covers a few other 
details of EIGRP—in particular, route redistribution, route ﬁltering when redistributing, and 
route summarization.
“Do I Know This Already?” Quiz
Table 9-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following items are true of EIGRP? 
a. Authentication can be done using MD5 or clear text.
b. Uses UDP port 88.
c. Sends full or partial updates as needed.
d. Multicasts updates to 224.0.0.10.
2.
Four routers (R1, R2, R3, and R4) are attached to the same VLAN. R1 has been conﬁgured 
for an EIGRP Hello timer of 3. R2 has been conﬁgured with a metric weights 0 0 0 1 0 0 
command. R3 has been conﬁgured with a hold time of 11 seconds. Their IP addresses are 
Table 9-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
EIGRP Basics and Steady-State Operation
1–4
EIGRP Convergence 
5–7
EIGRP Conﬁguration
8–9
Total Score

230     Chapter 9: EIGRP
10.1.1.1, 10.1.1.2, 10.1.1.3, and 10.1.1.4, with /24 preﬁxes, except R4, which has a /23 preﬁx 
conﬁgured. All other related parameters are set to their default. Select the routers that are able 
to collectively form neighbor relationships. 
a. R1
b. R2
c. R3
d. R4
e. None of them can form a neighbor relationship.
3.
In the following command output, what do the numbers in the column labeled “H” represent? 
R1# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    nnnneeeeiiiigggghhhhbbbboooorrrrssss
IP-EIGRP neighbors for process 1
H   Address
Interface
Hold Uptime
SRTT
RTO
Q
Seq
                                             (sec)          (ms)         Cnt  Num
2   172.31.11.2
Fa0/0
4 00:03:10      1    4500    0
233
1   172.31.11.202
Fa0/0         11 00:04:43      1    4500    0   81
0   172.31.11.201
Fa0/0         14 00:05:11   1927    5000    0   84
a. The current Hold Time countdown
b. The number of seconds before a Hello is expected
c. The order in which the neighbors came up
d. None of the other answers are correct
4.
Which of the following is not true regarding the EIGRP Update message? 
a. Updates require an acknowledgement with an Ack message.
b. Updates can be sent to multicast address 224.0.0.10.
c. Updates are sent as unicasts when they are retransmitted.
d. Updates always include all routes known by a router, with partial routing information 
distributed as part of the EIGRP Reply message.
5.
The output of a show ip eigrp topology command lists information about subnet 10.1.1.0/24, 
with two successors, and three routes listed on lines beginning with “via.” How many feasible 
successor routes exist for 10.1.1.0/24? 
a. 0 
b. 1
c. 2
d. 3
e. Cannot determine from the information given

“Do I Know This Already?” Quiz     231
6.
The following command output shows R11’s topology information for subnet 10.1.1.0/24. 
Then R11 and R12 (IP address 10.1.11.2) are connected to the same LAN segment. Then R11’s 
EIGRP Hold Time expires for neighbor R12. Which of the following is true about R11’s ﬁrst 
reaction to the loss of its neighbor R12? 
R11# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy
! lines omitted for brevity
P 10.1.1.0/24, 1 successors, FD is 1456
        via 10.1.11.2 (1456/1024), FastEthernet0/0
        via 10.1.14.2 (1756/1424), Serial0/0.4
a. R11 sends Updates to all neighbors poisoning its route to 10.1.1.0/24.
b. R11 replaces the old route through 10.1.11.2 with the feasible successor route through 
10.1.14.2.
c. R11 sends Query messages to all other neighbors to ensure that the alternate route through 
10.1.14.2 is loop free, before using the route.
d. R11 ﬁrst Queries only neighbors on interface fa0/0 for alternative routes before Querying 
the rest of its neighbors.
7.
EIGRP router R11 has just changed its route to subnet 10.1.2.0/24 to the active state, and has sent 
a Query to ﬁve neighbors. Which of the following is true about the next step taken by R11? 
a. R11 adds a new route to 10.1.2.0/24 to the routing table as soon as it receives an EIGRP 
Reply that describes a new route to 10.1.2.0/24.
b. R11 can add a new route to 10.1.2.0/24 after receiving Reply messages from all 
5 neighbors.
c. R11 can add a new route for 10.1.2.0/24 to the routing table, even without 5 Reply 
messages, once the Hold timer expires.
d. R11 can add a new route for 10.1.2.0/24 to the routing table, even without 5 Reply 
messages, once the Dead timer expires.
8.
EIGRP router R11 has ﬁve interfaces, with IP address 10.1.1.11/24 (interface fa0/0), 
10.1.2.11/24, 10.1.3.11/24, 10.1.4.11/24, and 10.1.5.11/24. Its EIGRP conﬁguration is shown 
below. Which of the following answers is true regarding this router? 
router eigrp 1
 network 10.1.0.0 0.0.3.255
 passive-interface fa0/0
a. R11 will send EIGRP Updates out fa0/0, but not process received EIGRP Updates.
b. R11 will advertise connected subnets 10.1.3.0/24 and 10.1.4.0/24.
c. R11 will advertise subnets 10.1.1.0/24 and 10.1.2.0/24, as well as attempt to send Hellos 
and Updates on the related interfaces.
d. The network command does not match any interfaces, so EIGRP will essentially do nothing.

232     Chapter 9: EIGRP
9.
EIGRP router Br1 is a branch router with two Frame Relay subinterfaces (s0/0.1 and s0/0.2) 
connecting it to distribution routers. It also has one LAN interface, fa0/0. No other routers 
connect to the Br1 LAN. Which of the following scenarios prevent router Br1 from sending 
EIGRP Hellos out its fa0/0 interface? 
a. The inclusion of the passive-interface fa0/0 command on Br1
b. The inclusion of the eigrp stub command on Br1
c. The inclusion of the eigrp stub receive-only command on Br1
d. The lack of a network command that matches the IP address of Br1’s fa0/0 interface

EIGRP Basics and Steady-State Operation     233
Foundation Topics
EIGRP Basics and Steady-State Operation
Many CCIE candidates have known, at least at some point, many of the details of EIGRP operation 
and conﬁguration. EIGRP is widely deployed and is thoroughly covered on the CCNP BSCI exam. 
With that in mind, this chapter strives to review the key terms and concepts brieﬂy, and get right 
to speciﬁc examples that detail EIGRP operation on a Cisco router. To that end, the chapter begins 
with Table 9-2, which lists some of the key features related to EIGRP.
Hellos, Neighbors, and Adjacencies
After a router has been conﬁgured for EIGRP, and its interfaces come up, it attempts to ﬁnd 
neighbors by sending EIGRP Hellos (destination 224.0.0.10). Once a pair of routers have heard 
each other say Hello, they become adjacent—assuming several key conditions are met. Once 
Table 9-2
EIGRP Feature Summary
KEY 
POINT
Feature
Description
Transport 
IP, protocol type 88 (does not use UDP or TCP).
Metric
Based on constrained bandwidth and cumulative delay by default, and 
optionally load, reliability, and MTU.
Hello interval
Interval at which a router sends EIGRP Hello messages on an interface.
Hold timer
Timer used to determine when a neighboring router has failed, based on 
a router not receiving any EIGRP messages, including Hellos, in this 
timer period.
Update destination address
Normally sent to 224.0.0.9, with retransmissions being sent to each 
neighbor’s unicast IP address.
Full or partial updates
Full updates are used when new neighbors are discovered; otherwise, 
partial updates are used.
Authentication
Supports MD5 authentication only.
VLSM/classless
EIGRP includes the mask with each route, also allowing it to support 
discontiguous networks and VLSM.
Route Tags
Allows EIGRP to tag routes as they are redistributed into EIGRP.
Next-hop ﬁeld
Supports the advertisement of routes with a different next-hop router 
than the advertising router. 
Manual route summarization
Allows route summarization at any point in the EIGRP network.
Multiprotocol
Supports the advertisement of IPX and AppleTalk routes. 

234     Chapter 9: EIGRP
neighbors pass the checks in the following list, they are considered to be adjacent. At that point, 
they can exchange routes and are listed in the output of the show ip eigrp neighbor command.
■
Must pass the authentication process
■
Must use the same conﬁgured AS number
■
Must believe that the source IP address of a received Hello is in that router’s primary connected 
subnet on that interface
■
K values must match
The wording of the third item in the list bears a little further scrutiny. The primary subnet of an 
interface is the subnet as implied by the ip address command that does not have the secondary 
keyword. An EIGRP router looks at the source IP address of a Hello; if the source IP address is a 
part of that router’s primary subnet of the incoming interface, the Hello passes the IP address 
check. 
This logic leaves open some interesting possibilities. For example, if the routers are misconﬁgured 
with different subnet masks, the check may still pass. If one router has conﬁgured 10.1.2.1/24, and 
the other has conﬁgured 10.1.2.2/23, they could become adjacent, assuming all the other checks 
pass. While EIGRP supports secondary IP addresses and subnets, EIGRP sources its messages 
from the address in the primary subnet, and the IP addresses of neighbors must be in the subnet of 
the primary subnets. 
The last item in the list mentions K values; K values are constants that deﬁne the multipliers 
used by EIGRP when calculating metrics. The settings can be changed with a router eigrp 
subcommand metric weights tos k1 k2 k3 k4 k5. The command defaults to a setting of 0 1 0 1 0 0, 
meaning that only bandwidth and delay are used to calculate the metric. (The examples in this 
chapter habitually change the settings to 0 0 0 1 0 0, which removes bandwidth from the calculation 
and makes the metrics in the examples a little more obvious.)
Besides simply checking to see if the right parameters agree, the Hello messages also serve as an 
EIGRP keepalive. Adjacent routers continue to multicast Hellos based on each interface’s EIGRP 
hello interval. If a router fails to hear from a neighbor for a number of seconds, deﬁned by the 
EIGRP Hold Time for that neighbor, all routes through the neighbor are considered to have failed.
Example 9-1 shows how a router displays some of the basic information regarding EIGRP operations 
based on Figure 9-1. The example begins with four routers (R1, R2, S1, and S2) that have only 
their common LAN interfaces up, just to show the Hello process. By the end of the example, the 
R2-to-R5 PVC will come up, but the EIGRP adjacency will fail due to a K-value mismatch.
KEY 
POINT

EIGRP Basics and Steady-State Operation     235
Figure 9-1
Sample Internetwork Used for EIGRP Examples
Example 9-1
Forming EIGRP Adjacencies
! First, a ddddeeeebbbbuuuugggg is initiated on R1.
R1# ddddeeeebbbbuuuugggg    eeeeiiiiggggrrrrpppp    ppppaaaacccckkkkeeeetttt    hhhheeeelllllllloooo
EIGRP Packets debugging is on
    (HELLO)
Jan 11 13:27:19.714: EIGRP: Received HELLO on FastEthernet0/0 nbr 172.31.11.201
Jan 11 13:27:19.714:   AS 1, Flags 0x0, Seq 0/0 idbQ 0/0 iidbQ un/rely 0/0 peerQ
  un/rely 0/0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! S2’s LAN interface brought up, not shown
! Below, a pair of log messages appear, announcing the new neighbor; this message 
! appears due to the default rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp subcommand eeeeiiiiggggrrrrpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss.
Jan 11 13:27:19.995: EIGRP: New peer 172.31.11.202
Jan 11 13:27:19.995: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.11.202 
  (FastEthernet0/0) is up: new adjacency
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Next, only neighbors who become adjacent—those that pass all the required 
! checks for the parameters—are listed. The Hold timer is shown; it starts at 
! its maximum, and decrements towards 0, being reset upon the receipt of any EIGRP
! packet from that neighbor. The “H” column on the left states the order in 
! which the neighbors became adjacent. 
R1# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    nnnneeeeiiiigggghhhhbbbboooorrrrssss
IP-EIGRP neighbors for process 1
H   Address                 Interface       Hold Uptime   SRTT   RTO  Q  Seq
                                           (sec)         (ms)       Cnt Num
2   172.31.11.2             Fa0/0              4 00:03:10    1  4500  0  233
1   172.31.11.202           Fa0/0             11 00:04:43    1  4500  0  81
0   172.31.11.201           Fa0/0             14 00:05:11 1927  5000  0  84
! Below, the PVC between R2 and R5 came up, but R5’s K values do not match R2’s.
! Both messages below are log messages, with no debugs enabled on either router.
! Next message on R5 !!!!!!!!!!
03:55:51: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.25.2 (Serial0) is down: K-value 
  mismatch
! Next message on R2 !!!!!!!!!!
Jan 11 13:21:45.643: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.25.5 (Serial0/0.5) 
  is down: Interface Goodbye received
104.4/24
E0/0
105.5/24
E0
25.5/24
S0
25.2/24
S0/0.5
24.2/30
S0/0.4
11.2/24
11.1/24
11.201/24
11.202/24
211.202/24
221.202/24
Fa0/0
Fa0/0
24.1/30
S0/0.2
14.2/30
S0/0.1
14.1/30
S0/0.4
S1
S2
R4
R5
R1
R2
VLAN 1
172.31.11.0/24
Network 172.31.0.0

236     Chapter 9: EIGRP
Note that when the PVC between R2 and R5 comes up, the message on R5 is pretty obvious, 
but the message at R2 says nothing about K values. Some later releases of Cisco IOS mistake 
invalid EIGRP K-value settings as a newer EIGRP message called a Goodbye message. Goodbye 
messages allow routers to tell each other that they are shutting down in a graceful fashion; be 
aware that this message may simply be the result of a K-value mismatch.
Interestingly, the Hello and Hold time parameters do not need to match for EIGRP neighbor 
relationships to form. In fact, a router does not use its own timers when monitoring a neighbor 
relationship—instead, it uses each neighbor’s stated timers, as exchanged in the Hello messages. 
For example, in Example 9-1, R2 has been conﬁgured with Hello and Hold timer settings at 2 and 
6 seconds, respectively, with R1 defaulting to 5 and 15 seconds. As R1 monitors its neighbor 
connection to R2, R1 resets the Hold timer to 6 seconds upon receipt of an EIGRP message. With 
a hello interval of 2 seconds, R1’s listing for hold time for R2 shows it ﬂuctuating between 6 and 4, 
assuming no Hellos are lost. Note the show ip eigrp neighbors command on R1 near the end 
of the example—under normal operation, this value ﬂuctuates between 6 and 4 seconds. The other 
neighbors default to Hello and Hold time of 5 and 15, so R1’s Hold time in the command output 
ﬂuctuates between 15 and 10 for these neighbors, assuming no Hellos are lost.
EIGRP Updates
Once routers are adjacent, they can exchange routes using EIGRP Update messages. The process 
follows this general sequence:
1.
Initially, full updates are sent, including all routes except those omitted due to split horizon.
2.
Once all routes have been exchanged, the updates cease.
3.
Future partial updates occur when one or more routes change.
4.
If neighbors fail and recover, or new neighbor adjacencies are formed, full updates are sent.
EIGRP uses the Reliable Transport Protocol (RTP) to send the multicast EIGRP updates. EIGRP 
sends updates, waiting on a unicast EIGRP ACK message from each recipient. Figure 9-2 shows 
the general idea over a LAN.
Figure 9-2
EIGRP Use of RTP on a LAN
KEY 
POINT
KEY 
POINT
S1
S2
RTO Expired for
Neighbor 172.31.11.2
– Resend!
Start RTO Timer
Update, to 224.0.0.10
ACK, to 172.31.11.1
R1
R2
4
1
2
ACK, to 172.31.11.1
3
3
Hello, to 172.31.11.2
5

EIGRP Basics and Steady-State Operation     237
RTP allows the Updates to be sent as multicasts. If any neighbors fail to acknowledge receipt of 
the multicasted update, RTP resends Updates as unicasts just to those neighbors. The steps run 
as follows, using Figure 9-2 as an example:
1.
The EIGRP sender (R1 in Figure 9-2) starts a Retransmission Timeout (RTO) timer for each 
neighbor when sending a reliable message like an Update. (Cisco IOS actually calculates a 
Smoothed Round-Trip Time, or SRTT, to each neighbor, and derives RTO from the SRTT; both 
values are shown in the show ip eigrp neighbor output. These values vary over time.) 
2.
R1 sends the multicast EIGRP Update.
3.
R1 notes from which neighbors it receives an EIGRP ACK for the Update.
4.
RTO expired before router R2 sent its EIGRP ACK.
5.
R1 resends the Update, this time as a unicast, and only to the neighbor(s) that did not reply 
within the RTO time (R2 in this case).
This process allows efﬁcient multicasting of updates under normal circumstances, and efﬁcient 
retransmission when ACKs do not arrive in time. 
EIGRP and RTP use a simple acknowledgement process with a window size of one message. Each 
Update packet has a sequence number, with the returned ACK message conﬁrming receipt of the 
message by listing that same sequence number. Example 9-2 shows the location of the sequence 
number information in both show and debug commands. (In the example, R1 does a no shut on 
a loopback interface [IP address 172.31.151.1/24], with R1 sending an update advertising the 
newly-available route.) 
Example 9-2
Sequence Numbers in EIGRP Updates and ACKs 
! First, note the sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    nnnneeeeiiiigggghhhhbbbboooorrrr output on router R2. The last column 
! lists the sequence number last used by that neighbor to send a “reliable” 
! packet. So, R2 expects R1’s next reliable EIGRP message to have sequence number
! 225. Also, the RTO calculations are listed for each neighbor. Note 
! that the SRTT value is 0 until some reliable packets are exchanged, as SRTT
! is calculated based on actual round-trip time measurements. 
R2# sssshhhh    iiiipppp    eeeeiiiiggggrrrrpppp    nnnneeeeiiiigggghhhhbbbboooorrrr
IP-EIGRP neighbors for process 1
H   Address                 Interface       Hold Uptime   SRTT   RTO  Q  Seq
 (sec)         (ms)       Cnt Num
2   172.31.11.1             Fa0/0            5 01:14:03    1     200  0  224
1   172.31.11.202           Fa0/0           13 01:15:36    1     200  0  92
0   172.31.11.201           Fa0/0           13 01:16:04  257    1542  0  96
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! R1 – R1 – R1 – R1
! Next, the ddddeeeebbbbuuuugggg command on R1 enables debug for Update and Ack packets.
continues

238     Chapter 9: EIGRP
The EIGRP Topology Table
EIGRP uses three tables: the neighbor table, the topology table, and the IP routing table. The 
neighbor table keeps state information regarding neighbors, and is displayed using the show ip eigrp 
neighbors command. EIGRP Update messages ﬁll the routers’ EIGRP topology tables. Based 
on the contents of the topology table, each router chooses its best routes and installs these routes 
in its respective IP routing table.
An EIGRP router calculates the metric for each route based on the components of the metric. 
When a neighboring router advertises a route, the Update includes the metric component values 
for each route. The router then considers the received metric values, as well its own interfaces 
settings, to calculate its own metric for each route. The default metric components are cumulative 
delay, in tens of microseconds, and the constraining bandwidth for the entire route, in bits per 
second. By setting the correct K values in the metric weights command, EIGRP can also 
consider link load, reliability, and MTU. Cisco recommends not using those values, in large part 
due to the ﬂuctuation created by the rapidly changing calculated metrics and repeated routing 
reconvergence. 
Figure 9-3 depicts the general logic relating to the metric components in a routing update, showing 
the units on the bandwidth and delay commands versus the contents of the updates. 
R1# ddddeeeebbbbuuuugggg    eeeeiiiiggggrrrrpppp    ppppaaaacccckkkkeeeetttt    uuuuppppddddaaaatttteeee    aaaacccckkkk
EIGRP Packets debugging is on
    (UPDATE, ACK)
! Not Shown: R1’s loop0 is “nnnnoooo    sssshhhhuuuuttttddddoooowwwwnnnn,” interface address 172.31.151.1/24.
! Below, the ddddeeeebbbbuuuugggg messages show R1’s update, and each of the other three routers’
! Acks. Note R1’s update has “sequence” 225, and the Acks list that same sequence
! number after the slash.
Jan 11 14:43:35.844: EIGRP: Enqueueing UPDATE on FastEthernet0/0 iidbQ un/rely 0/1 serno 
  207-207
Jan 11 14:43:35.848: EIGRP: Sending UPDATE on FastEthernet0/0
Jan 11 14:43:35.848:   AS 1, Flags 0x0, Seq 225/0 idbQ 0/0 iidbQ un/rely 0/0 serno 207-207
Jan 11 14:43:35.848: EIGRP: Received ACK on FastEthernet0/0 nbr 172.31.11.202
Jan 11 14:43:35.852:   AS 1, Flags 0x0, Seq 0/225 idbQ 0/0 iidbQ un/rely 0/0 peerQ un/rely 
  0/1
Jan 11 14:43:35.852: EIGRP: Received ACK on FastEthernet0/0 nbr 172.31.11.2
Jan 11 14:43:35.852:   AS 1, Flags 0x0, Seq 0/225 idbQ 0/0 iidbQ un/rely 0/0 peerQ un/rely 
  0/1
NOTE
A router considers its interface delay settings, as deﬁned with the delay interface 
subcommand, when calculating EIGRP metrics. The delay command’s units are tens of 
microseconds, so a delay 1 command sets the interface delay as 10 microseconds.
Example 9-2
Sequence Numbers in EIGRP Updates and ACKs (Continued)

EIGRP Basics and Steady-State Operation     239
Figure 9-3
EIGRP Update and Computing the Metric
Because the received update includes the neighbor’s metric components, a router can calculate the 
advertising neighbor’s metric for a route—called the reported distance (RD). A router can, of 
course, also calculate its own metric for a particular route, after adding its own interface delay and 
considering whether it should adjust the value for the constraining bandwidth. For example, 
consider the four steps outlined in Figure 9-3:
1.
R1 advertises a route, with bandwidth = 10,000 and delay = 100.
2.
R2 calculates the RD for this route per the received K values.
3.
R2 updates its topology table, adding delay 1000 because the interface on which R2 received 
the update has a delay setting of 1000. It also uses a new bandwidth setting, because the received 
Update’s bandwidth (10,000) was greater than R2’s incoming interface’s bandwidth (1544).
4.
R2’s update to another neighbor includes the new (cumulative) delay and the new (constraining) 
bandwidth.
Assuming default K-value settings, the EIGRP formula for the metric calculation is
Metric = 256 (107/bandwidth) + 256 (delay) 
The show ip eigrp topology command lists the RD and the locally computed metric for the entries 
in the EIGRP topology table. Example 9-3 shows a few details of where the RD and local metric 
can be seen in show command output. The example is based on Figure 9-1, with all routers and 
interfaces now working properly. Also, to keep things simple, the delay command has been used 
to set all links to delay 1 (LANs), delay 2 (WANs), or delay 3 (loopbacks). Also, the metric 
weights 0 0 0 1 0 0 command was used on each router, taking bandwidth out of the calculation, 
making the calculated metrics a little more meaningful in the command output.
Calculate RD per
Received K Values
Interface Settings:
Delay 100
Bandwidth 10,000
Update:
Subnet 1
Delay 100
Bandwidth 10,000
(MTU, Load, Reliability)
R1
Interface Settings:
Delay 1000
Bandwidth 1544
Metrics:
RD = 256 (10,000,000/10,000) + 256 (100) = 281,600
Metric = 256 (10,000,000/1,544) + 256 (1100) = 1,939,631
R2
1
2
4
Update:
Subnet 1
Delay 1100
Bandwidth 1,544
(MTU, Load, Reliability)
Topology Table:
Subnet 1
Delay 100 + 1000 = 1100
Bandwidth 1,544
(MTU, Load, Reliability)
Calculate My Metric
3
KEY 
POINT

240     Chapter 9: EIGRP
The show ip eigrp topology command lists a few additional very important concepts and terms 
related to how EIGRP chooses between multiple possible routes to the same preﬁx. First, the term 
feasible distance (FD) refers to this router’s best calculated metric among all possible routes to 
reach a particular preﬁx. The FD is listed as “FD is x” in the command output. The route that has 
this best FD is called the successor route, and is installed in the routing table. The successor route’s 
metric is by deﬁnition called the feasible distance, so that metric is what shows up in the routes 
shown with the show ip route command. These additional terms all relate to how EIGRP processes 
convergence events, which is explained next.
EIGRP Convergence
Once all the EIGRP routers have learned all the routes in the network, and placed the best routes 
(the successor routes) in their IP routing tables, their EIGRP processes simply continue to send 
Hellos, expect to receive Hellos, and look for any changes to the network. When those changes do 
occur, EIGRP must converge to use the best available routes. This section covers the three major 
Example 9-3
EIGRP Topology Table
! First, the numbers in parentheses show this router’s (R1’s) calculated metric,
! then a “/”, then the RD. For example, S1 advertised the route to 211.0/24, with 
! R1 calculating S1’s metric (the RD) as 768. DDDDeeeellllaaaayyyy    3333 was set on S1’s loopback 
! (where 211.0/24 resides), so its metric was 3*256=768. R1’s metric adds delay 1,
! for a metric of 4*256=1024.
R1# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy
IP-EIGRP Topology Table for AS(1)/ID(172.31.16.1)
Codes: P - Passive, A - Active, U - Update, Q - Query, R - Reply,
       r - reply Status, s - sia Status 
P 172.31.151.0/24, 1 successors, FD is 768
         via Connected, Loopback1
P 172.31.211.0/24, 1 successors, FD is 1024
        via 172.31.11.201 (1024/768), FastEthernet0/0
P 172.31.24.0/30, 1 successors, FD is 768
        via 172.31.11.2 (768/512), FastEthernet0/0
        via 172.31.14.2 (1024/512), Serial0/0.4
! Lines omitted for brevity
! Below, the metric in the IP routing table entries match the first number in 
! the parentheses, as well as the number listed as “FD is…” in the output above.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! omitted legend for brevity
     172.31.0.0/16 is variably subnetted, 9 subnets, 2 masks
D       172.31.211.0/24 [90/1024] via 172.31.11.201, 00:29:42, FastEthernet0/0
D       172.31.24.0/30 [90/768] via 172.31.11.2, 00:29:44, FastEthernet0/0
! Lines omitted for brevity
KEY 
POINT

EIGRP Convergence     241
components of EIGRP convergence: input events, local computation (which includes looking for 
feasible successors), and using active querying to ﬁnd alternative routes.
Table 9-3 lists several of the key EIGRP terms related to convergence. Following the table, the text 
jumps right into what EIGRP does when a topology or metric change occurs. 
Input Events and Local Computation
An EIGRP router needs to react when an input event occurs. The obvious input events are when a 
router learns of new preﬁxes via newly received routing updates, when an interface fails, or 
when a neighbor fails. Because EIGRP sends updates only as a result of changed or new topology 
information, a router must consider the update and decide if any of its routes have changed. 
When an input event implies that a route has failed, the router performs local computation, a fancy 
term for a process that can be boiled down to relatively simple logic. In short, the result of local 
computation is that the router either is able to choose a replacement route locally, without having 
to ask any neighbors, or is required to ask neighbors for help. Simply put, for a failed route, local 
computation does the following:
■
If FS routes exist, install the lowest-metric FS route into the routing table, and send Updates 
to neighbors to notify them of the new route.
■
If no FS route exists, actively query neighbors for a new route. 
To be an FS route, a route must meet the feasibility condition, deﬁned as follows:
The RD must be lower than this router’s current FD for the route. 
Table 9-3
EIGRP Features Related to Convergence
KEY 
POINT
EIGRP Convergence 
Function
Description
Reported distance (RD)
The metric (distance) of a route as reported by a neighboring router
Feasible distance (FD)
The metric value for the lowest-metric path to reach a particular subnet
Feasibility condition
When multiple routes to reach one subnet exist, the case in which one route’s 
RD is lower than the FD
Successor route
The route to each destination preﬁx for which the metric is the lowest metric
Feasible successor (FS)
A route that is not a successor route but meets the feasibility condition; can 
be used when the successor route fails, without causing loops
Input event
Any occurrence that could change a router’s EIGRP topology table
Local computation
An EIGRP router’s reaction to an input event, leading to the use of a feasible 
successor or going active on a route
KEY 
POINT

242     Chapter 9: EIGRP
The local computation is best understood by looking at an example. Figure 9-4 shows the same 
network as in Figure 9-1, but with delay values shown. Example 9-4 begins with R4 using a successor 
route to 172.31.211.0/24, through R1. R4 also has an FS route to 172.31.211.0/24 through R2. The 
example shows what happens when the PVC from R1 to R4 fails, and R4’s neighbor relationship with 
R1 fails, causing R4 to perform local computation and start using its FS route through R2.
Figure 9-4
Network Used for EIGRP Convergence Examples
NOTE
The routers have disabled the use of bandwidth in the EIGRP metric calculation, so all 
metrics in Example 9-4 are multiples of 256.
Example 9-4
Local Computation: R1-R4 Link Fails; R4 Finds an FS to 172.31.211.0/24 Through R2 
! First, the current successor route on R4 points out S0/0.1, to R1, metric 2048.
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity
     172.31.0.0/16 is variably subnetted, 9 subnets, 2 masks
D       172.31.211.0/24 [90/2048] via 172.31.14.1, 00:01:46, Serial0/0.1
! Below, the FD is listed as 2048 as well. The topology entry for the successor
! has the same 2048 metric listed as the first number in parentheses; the second
! number is the RD on R1 (1280). The second topology entry for this route lists
! metric 2560, RD 1280; with RD in the second route being less than the FD, this
! second route meets the feasibility condition, making it an FS route. 
R4# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy
IP-EIGRP Topology Table for AS(1)/ID(172.31.104.4)
Codes: P - Passive, A - Active, U - Update, Q - Query, R - Reply,
r - reply Status, s - sia Status 
! lines omitted for brevity
P 172.31.211.0/24, 1 successors, FD is 2048
        via 172.31.14.1 (2048/1280), Serial0/0.1
        via 172.31.24.2 (2560/1792), Serial0/0.2
! Next, R4 loses Neighbor R1, with EIGRP Finite State Machine (FSM) debug on.
R4# ddddeeeebbbbuuuugggg    eeeeiiiiggggrrrrpppp    ffffssssmmmm
105.5/24
E0
25.5/24
S0
25.2/24
S0/0.5
24.2/30
S0/0.4
11.2/24
11.201/24
11.202/24
Delay: 3
211.202/24
Delay: 3
221.202/24
Delay: 4
Delay: 2
Delay: 3
151.1/24
Fa0/0
11.1/24
24.1/30
S0/0.2
14.2/30
S0/0.1
Delay: 3
Delay: 3
Delay: 3
14.1/30
S0/0.4
104.4/24
E0/0
S1
S2
R4
R5
R1
R2
VLAN 1
172.31.11.0/24

EIGRP Convergence     243
Going Active on a Route
The second branch in the local computation logic causes the EIGRP router to ask its neighbors 
about their current best route to a subnet, hoping to ﬁnd an available, loop-free alternative route 
to that subnet. When no FS route is found, the EIGRP router goes active for the route. Going 
active is jargon for the process of changing a route’s status to active. Once the router is active, 
EIGRP multicasts Query messages to its neighbors, asking the neighbors if they have a valid 
route to the subnet. The neighbors should unicast EIGRP Reply packets back to the original 
router, stating whether or not they have a current loop-free route with which to reach that 
preﬁx. 
Once a router receives Reply messages from all the neighbors to which it sent Queries, the router 
updates its topology table with all the new information learned in the Reply messages, recomputes 
metrics for any known routes, and chooses a new successor. Of course, if no routes to that subnet 
are found, this router simply does not add a route to the routing table.
EIGRP FSM Events/Actions debugging is on
Jan 12 07:17:42.391: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.14.1 (Serial0/0.1) 
  is down: holding time expired
! Below, ddddeeeebbbbuuuugggg messages have been edited to only show messages relating to
! the route to 172.31.211.0/24. R4 looks for an FS, finds it, replaces the old
! successor with the FS, and sends updates telling neighbors about the new route.
Jan 12 07:17:42.399: DUAL: Destination 172.31.211.0/24
Jan 12 07:17:42.399: DUAL: Find FS for dest 172.31.211.0/24. FD is 2048, RD is 2048
Jan 12 07:17:42.399: DUAL: 172.31.14.1 metric 4294967295/4294967295
Jan 12 07:17:42.399: DUAL: 172.31.24.2 metric 2560/1792 found Dmin is 2560
Jan 12 07:17:42.399: DUAL: Removing dest 172.31.211.0/24, nexthop 172.31.14.1
Jan 12 07:17:42.403: DUAL: RT installed 172.31.211.0/24 via 172.31.24.2
Jan 12 07:17:42.403: DUAL: Send update about 172.31.211.0/24.  Reason: metric chg
Jan 12 07:17:42.403: DUAL: Send update about 172.31.211.0/24.  Reason: new if
! Finally, note that the FD is unchanged; the FD is never raised until the route
! has been actively queried. The new route info has been put in the routing table.
R4# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy
! lines omitted for brevity
P 172.31.211.0/24, 1 successors, FD is 2048
        via 172.31.24.2 (2560/1792), Serial0/0.2
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! Lines omitted for brevity
D       172.31.211.0/24 [90/2560] via 172.31.24.2, 00:00:25, Serial0/0.2
NOTE
The EIGRP term “active” refers to a route for which a router is currently using the 
Query process to ﬁnd a loop-free alternative route. Conversely, a route is in passive state when 
it is not in an active state.
Example 9-4
Local Computation: R1-R4 Link Fails; R4 Finds an FS to 172.31.211.0/24 Through R2 (Continued)
KEY 
POINT

244     Chapter 9: EIGRP
The neighboring routers view any received Query messages as an input event. Each neighbor 
router’s behavior when receiving a Query can be summarized as follows:
1.
If the router does not have an entry in its topology table for that subnet, it sends an EIGRP 
Reply packet stating that it has no route.
2.
If the router’s successor for that subnet is unchanged, or an FS is found, the neighbor sends 
back an EIGRP Reply message with the details of the route.
3.
If the conditions in step 1 or 2 do not exist, the router itself goes active, and withholds its EIGRP 
response to the original Query, until all of its neighbors respond.
Note that the logic in the third step can result in a route for which the Active Querying process 
never completes. Routes that stay in active state too long are considered to be stuck-in-active 
routes. The related concepts are covered in the next section. 
Example 9-5 shows an example of the Query process. The example is again based on Figure 9-4, 
with R4 again losing its neighbor relationship with R1. In this case, R4’s local computation will 
not ﬁnd an FS for its failed route to 172.31.151.0/24, so it must go active.
Example 9-5
R1-R4 Link Fails; R4 Actively Queries for 172.31.151.0/24 
! First, the sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy command only lists the successor route, and no
! FS routes. This command does not list non-FS routes.
R4# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooo
! Lines omitted for brevity
P 172.31.151.0/24, 1 successors, FD is 1536
        via 172.31.14.1 (1536/768), Serial0/0.1
! Below, the sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy    aaaallllllll----lllliiiinnnnkkkkssss command includes non-FS routes, 
! in this case including the non-FS route to 151.0/24 through R2. Note that this 
! alternate non-FS route’s RD is 1792, which is more than the FD of 1536.
R4# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy    aaaallllllll----lllliiiinnnnkkkkssss 
! Lines omitted for brevity
P 172.31.151.0/24, 1 successors, FD is 1536, serno 175
        via 172.31.14.1 (1536/768), Serial0/0.1
        via 172.31.24.2 (2560/1792), Serial0/0.2
! Next, the FSM debug is again enabled, and R4 loses neighbor R1.
R4# ddddeeeebbbbuuuugggg    eeeeiiiiggggrrrrpppp    ffffssssmmmm
Jan 12 07:16:04.099: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.14.1 (Serial0/0.1) 
  is down: holding time expired
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
! Below, R4 looks for an FS for route 172.31.151.0/24, and does not find one—
! so it enters active state. R4 sends a query to its one remaining neighbor (R2),
! and keeps track of the number of outstanding Queries (1). Upon receiving the 
! Reply from R2, it can update its topology table, and repeat local computation,
! and use the now-best route through R2.
Jan 12 07:17:42.391: %DUAL-5-NBRCHANGE: IP-EIGRP(0) 1: Neighbor 172.31.14.1 (Serial0/0.1) 
  is down: holding time expired
KEY 
POINT
KEY 
POINT

EIGRP Convergence     245
Of particular note in this example, look for the debug message starting with “Dual: rcvreply:” 
(highlighted). This message means that the router received an EIGRP Reply message, in this case 
from R2. The message includes R2’s valid routing information for 172.31.151.0/24. Also note that 
the FD was recomputed, whereas it was not in Example 9-4 when an FS route was found.
Stuck-in-Active
Any router in active state for a route must wait for a Reply to each of its Query messages. It is 
possible for a router to wait several minutes for all the replies, because neighboring routers might 
also need to go active, and then their neighbors might need to go active, and so on—each 
withholding its Reply message until it in turn receives all of its Reply messages. In normal 
Jan 12 07:17:42.391: DUAL: linkdown: start - 172.31.14.1 via Serial0/0.1
Jan 12 07:17:42.391: DUAL: Destination 172.31.151.0/24
Jan 12 07:17:42.391: DUAL: Find FS for dest 172.31.151.0/24. FD is 1536, RD is 1536
Jan 12 07:17:42.395: DUAL:  172.31.14.1 metric 4294967295/4294967295
Jan 12 07:17:42.395: DUAL:  172.31.24.2 metric 2560/1792 not found Dmin is 2560
Jan 12 07:17:42.395: DUAL: Dest 172.31.151.0/24 entering active state.
Jan 12 07:17:42.395: DUAL: Set reply-status table. Count is 1.
Jan 12 07:17:42.395: DUAL: Not doing split horizon
Jan 12 07:17:42.459: DUAL: rcvreply: 172.31.151.0/24 via 172.31.24.2 metric 2560/1792
Jan 12 07:17:42.459: DUAL: reply count is 1
Jan 12 07:17:42.459: DUAL: Clearing handle 0, count now 0
Jan 12 07:17:42.463: DUAL: Freeing reply status table
Jan 12 07:17:42.463: DUAL: Find FS for dest 172.31.151.0/24. FD is 4294967295, RD is 
  4294967295 found
Jan 12 07:17:42.463: DUAL: Removing dest 172.31.151.0/24, nexthop 172.31.14.1
Jan 12 07:17:42.463: DUAL: RT installed 172.31.151.0/24 via 172.31.24.2
Jan 12 07:17:42.467: DUAL: Send update about 172.31.151.0/24.  Reason: metric chg
Jan 12 07:17:42.467: DUAL: Send update about 172.31.151.0/24.  Reason: new if
! Next, note that because R4 actively queried for the route, the FD could change.
R4# sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooo
IP-EIGRP Topology Table for AS(1)/ID(172.31.104.4)
Codes: P - Passive, A - Active, U - Update, Q - Query, R - Reply,
       r - reply Status, s - sia Status 
P 172.31.151.0/24, 1 successors, FD is 2560
via 172.31.24.2 (2560/1792), Serial0/0.2
NOTE
Query messages use reliable transmission via RTP and are multicasts; Reply messages 
are reliable and are unicasts. Both are acknowledged using Ack messages. 
NOTE
The EIGRP term Diffusing Update Algorithm (DUAL) refers to the totality of the logic 
used by EIGRP to calculate new routes. The term is based on the logic used as Query messages 
go outward from a router, with the outward movement stopped when routers Reply. 
Example 9-5
R1-R4 Link Fails; R4 Actively Queries for 172.31.151.0/24 (Continued)

246     Chapter 9: EIGRP
operation, the process should complete; to handle exception cases, EIGRP includes a timer called 
the Active timer, which limits the amount of time in which a route can stay active. If the Active 
timer expires before a router receives all of its Reply messages, the router places the route in a 
stuck-in-active state. The router also brings down any neighbors from which no corresponding 
Reply was received, thinking that any neighbors that did not send a Reply are having problems.
In some conditions—large, redundant networks, ﬂapping interfaces, or networks with lots of 
packet loss, to name a few—neighbors might be working ﬁne, but their Reply messages may not 
complete within the Active timer. To avoid the downside of having the route become stuck-in-active, 
and losing all routes through a possibly still-working neighbor, you can disable the Active timer 
by using the timers active-time disabled subcommand under router eigrp. 
Limiting Query Scope
Although disabling the Active timer can prevent stuck-in-active routes, a better solution to the 
prolonged wait for Reply messages is to limit the scope of Query messages. By reducing the number 
of neighbors that receive the messages, and by limiting the number of hops away the queries ﬂow, 
you can greatly reduce the time required to receive all Reply messages.
Two methods can be used to limit query scope. The ﬁrst is route summarization. When a Query 
reaches a router that has a summarized route, but not the speciﬁc route in the query, the router 
immediately replies that it does not have that route. For instance, a router with the route 
172.31.0.0/16 in its topology table, upon receiving a query for 172.31.151.0/24, immediately 
sends a Reply, stating it does not have a route to 172.31.151.0/24. With well-designed route 
summarization, EIGRP queries can be limited to a few hops. (Chapter 11, “IGP Redistribution, 
Route Summarization, and Default Routing,” covers route summarization details.)
The use of EIGRP stub routers also limits the query scope. Stub routers, by deﬁnition, should not be 
used as transit routers for trafﬁc. In Figure 9-4, R5 would be a classic candidate to be a stub router. 
Also, if R4 should not be used to forward trafﬁc from R1 over to R2, or vice versa, R4 could be a stub 
as well. In either case, non-stub routers do not send Query messages to the stub routers, knowing that 
the stub routers should not be transit routers. (Stub router conﬁguration is covered in the next section.)
EIGRP Conﬁguration
This section explains the majority of the options for EIGRP conﬁguration. The “Foundation Summary” 
section includes the full syntax of the commands, along with some comments, in Table 9-6.
EIGRP Conﬁguration Example
Example 9-6 lists the conﬁguration for R1, R2, R4, and R5 from Figure 9-4. The routers were 
conﬁgured based on the following design goals:
■
Enable EIGRP on all interfaces.

EIGRP Conﬁguration     247
■
Conﬁgure K values to ignore bandwidth.
■
Conﬁgure R5 as an EIGRP stub router.
■
Ensure that R2’s LAN interface uses a Hello and Hold time of 2 and 6, respectively.
■
Conﬁgure R4 to allow 75 percent of interface bandwidth for EIGRP updates.
■
Advertise R4’s LAN subnet, but do not attempt to send or receive EIGRP updates on the LAN.
Example 9-6
Basic EIGRP Conﬁguration on R1, R2, R4, and R5 
! Below, R1 EIGRP-related configuration
! The default metric weights are “0 1 0 1 0 0”. 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    mmmmeeeettttrrrriiiicccc    wwwweeeeiiiigggghhhhttttssss    0000    0000    0000    1111    0000    0000
! R2 EIGRP-related configuration
! Note the commands used to change the Hello and Hold Time values per interface.
! R2’s Hellos advertise the timer values, and other routers on the LAN use these 
! values on their neighbor relationship with R2. Also below, note the use of the 
! inverse mask to match a subset of interfaces on a single nnnneeeettttwwwwoooorrrrkkkk    command.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    hhhheeeelllllllloooo----iiiinnnntttteeeerrrrvvvvaaaallll    eeeeiiiiggggrrrrpppp    1111    2222
    iiiipppp    hhhhoooolllldddd----ttttiiiimmmmeeee    eeeeiiiiggggrrrrpppp    1111    6666
!
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....11111111....2222    0000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....22224444....0000    0000....0000....1111....222255555555
    mmmmeeeettttrrrriiiicccc    wwwweeeeiiiigggghhhhttttssss    0000    0000    0000    1111    0000    0000
! R4 EIGRP-related configuration
! Below, the percentage of the interface bandwidth used for EIGRP is changed. The
! value can go over 100% to allow for cases in which the bandwidth has
! been artificially lowered to impact the EIGRP metric. Also note that R4 makes
! its e0/0 interface passive, meaning no routes learned or advertised on E0/0.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    66664444
    iiiipppp    bbbbaaaannnnddddwwwwiiiiddddtttthhhh----ppppeeeerrrrcccceeeennnntttt    eeeeiiiiggggrrrrpppp    1111    111155550000
!
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    ppppaaaassssssssiiiivvvveeee----iiiinnnntttteeeerrrrffffaaaacccceeee    EEEEtttthhhheeeerrrrnnnneeeetttt0000////0000        
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    mmmmeeeettttrrrriiiicccc    wwwweeeeiiiigggghhhhttttssss    0000    0000    0000    1111    0000    0000
! R5 EIGRP-related configuration
! Below, note R5’s configuration as a stub area.
continues

248     Chapter 9: EIGRP
EIGRP allows for better control of the three functions enabled on an interface by the EIGRP 
network command. (The three functions are advertising the connected subnet, sending routing 
updates, and receiving routing updates.) Unlike RIP, but like OSPF, the EIGRP network command 
supports conﬁguration of an optional wildcard mask (as seen on R4 in Example 9-6),  allowing 
each interface to be matched individually—and making it simple to enable EIGRP on a subset of 
interfaces. Also, a LAN subnet might have a single router attached to it, so there is no need to 
attempt to send or receive updates on those interfaces. By enabling EIGRP on the interface with a 
network command, and then conﬁguring the passive-interface command, you can stop the router 
from sending Hellos. If a router does not send Hellos, it forms no neighbor adjacencies, and it then 
neither sends nor receives updates on that LAN. 
Example 9-6 also shows R5 conﬁgured as an EIGRP stub router. R5 announces itself as a stub 
router via its EIGRP Hellos. As a result, R2 will not send Query messages to R5, limiting the scope 
of Query messages. 
The eigrp stub command has several options, with the default options (connected and summary) 
shown on the last line of Example 9-6. (Note that the eigrp stub command was typed, and IOS 
added the connected and summary options in the conﬁguration.) Table 9-4 lists the eigrp stub 
command options, and explains some of the logic behind using them.
Note that the stub option still requires the stub router to form neighbor relationships, even in 
receive-only mode. The stub router simply performs less work and reduces the query scope.
Example 9-6 also shows the EIGRP hello interval and hold time being set. These parameters can 
be set per interface using the interface subcommands ip hello-interval eigrp asn seconds and 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    nnnneeeettttwwwwoooorrrrkkkk    111177772222....33331111....0000....0000
    mmmmeeeettttrrrriiiicccc    wwwweeeeiiiigggghhhhttttssss    0000    0000    0000    1111    0000    0000
    eeeeiiiiggggrrrrpppp    ssssttttuuuubbbb    ccccoooonnnnnnnneeeecccctttteeeedddd    ssssuuuummmmmmmmaaaarrrryyyy
Table 9-4
EIGRP Features Related to Convergence
KEY 
POINT
Option
This Router Is Allowed To…
connected
Advertise connected routes, but only for interfaces matched with a network 
command.
summary
Advertise auto-summarized or statically conﬁgured summary routes. 
static
Advertise static routes, assuming the redistribute static command is conﬁgured.
redistributed
Advertise redistributed routes, assuming redistribution is conﬁgured.
receive-only
Not advertise any routes. This option cannot be used with any other option.
Example 9-6
Basic EIGRP Conﬁguration on R1, R2, R4, and R5 (Continued)

EIGRP Conﬁguration     249
ip hold-time eigrp asn seconds, respectively. The default EIGRP hello interval defaults to 5 
seconds on most interfaces, with NBMA interfaces whose bandwidth is T1 or slower using a hello 
interval of 60 seconds. The hold time defaults to 15 and 180 seconds, respectively—three times 
the default hello interval. However, if you change the hello interval, the hold time default does not 
automatically change to three times the new hello interval; instead, it remains at 15 or 180 seconds. 
EIGRP Load Balancing
EIGRP allows for up to six equal-metric routes to be installed into the IP routing table at the same 
time. However, because of the complex EIGRP metric calculation, metrics may often be close to 
each other, but not exactly equal. To allow for metrics that are somewhat close in value to be 
considered equal, and added to the IP routing table, you can use the variance multiplier command. 
The multiplier deﬁnes a value that is multiplied by the lowest metric (in other words, the FD, 
which is the metric of the successor route). If any other routes have a better metric than that 
product of variance * FD, those other routes are considered equal, and added to the routing table. 
Once the multiple routes for the same destination are in the routing table, EIGRP allows several 
options for balancing trafﬁc across the routes. Table 9-5 summarizes the commands that impact 
how load balancing is done with EIGRP, plus the other commands related to installing multiple 
EIGRP routes into the same subnet. Note that these commands are all subcommands under router 
eigrp.
NOTE
EIGRP allows only FS routes to be considered for addition as a result of using the 
variance command. Otherwise, routing loops could occur. 
Table 9-5
EIGRP Route Load-Balancing Commands 
Router EIGRP 
Subcommand
Meaning
variance
Any FS route whose metric is less than the variance value multiplied by the 
FD is added to the routing table (within the restrictions of the maximum-
paths command). 
maximum-paths {1..6}
The maximum number of routes to the same destination allowed in the routing 
table. Defaults to 4.
trafﬁc-share balanced
The router balances across the routes, giving more packets to lower-metric routes. 
trafﬁc-share min
Although multiple routes are installed, sends trafﬁc using only the lowest-
metric route.
trafﬁc-share balanced 
across-interfaces
If more routes exist than are allowed with the maximum-paths setting, the 
router chooses routes with different outgoing interfaces, for better balancing.
No trafﬁc-share 
command conﬁgured
Balances evenly across routes, ignoring EIGRP metrics. 

250     Chapter 9: EIGRP
EIGRP Conﬁguration Options That Are Similar to RIP
Although EIGRP and RIPv2 differ quite a bit in their underlying operation, several of their 
features are conﬁgured almost identically. This section details these features. You can refer to 
Chapter 8, “RIP Version 2,” for more information on the conﬁguration syntax for these features.
■
Authentication—EIGRP conﬁgures authentication almost exactly like RIP. EIGRP 
authentication commands use a keyword of eigrp asn instead of rip, using the ASN 
conﬁgured by the router eigrp command. For example, the interface subcommand ip eigrp 1 
authentication key-chain carkeys enables EIGRP MD5 authentication on the interface, 
pointing to a key chain called “carkeys.” Also, EIGRP does not support simple-text 
authentication, instead defaulting to MD5. Therefore, it does not use an equivalent of the 
ip rip authentication mode {text | md5} command.
■
Route ﬁltering—Conﬁgured with the distribute-list command, EIGRP route ﬁltering is 
conﬁgured identically to RIP route ﬁltering—with one important difference in the underlying 
operation. With RIP, incoming ﬁlters prevent the information from getting into the IP routing table; 
with EIGRP, an incoming ﬁlter prevents topology information from getting into the topology table. 
■
Offset lists—EIGRP uses the same syntax for the offset-list command as RIP, but with an 
interesting underlying bit of logic. EIGRP does not advertise an integer metric, but rather 
advertises the components of the metric, including constraining bandwidth and cumulative 
delay. An EIGRP offset list increments only the delay value in the EIGRP metric. For 
instance, an inbound offset list adding an offset of 1 results in a net increase in the metric 
of 256, because it increases delay by 1, and EIGRP multiplies the delay setting by 256.
■
Autosummarization—EIGRP, like RIP, defaults to use auto-summarization; like RIPv2, 
autosummarization can be disabled with the no auto-summary command under router eigrp.
■
Split horizon—EIGRP bounds its updates using split horizon logic, like RIP. Split horizon 
can be disabled per interface by using the no ip split-horizon eigrp asn interface subcommand. 
Note that, like RIP, most interfaces default to split horizon, with the notable exception of a 
physical serial interface conﬁgured for Frame Relay. 
■
Clearing IP routing tables—The clear ip route * command clears the IP routing table. 
However, because EIGRP keeps all possible routes in its topology table, a clear ip route * 
does not cause EIGRP to send any messages or learn any new topology information; the 
router simply reﬁlls the IP routing table with the best routes from the existing topology table. 
The clear ip eigrp neighbor command clears all neighbor relationships, which clears the 
entire topology table on the router. The neighbors then come back up, send new updates, and 
repopulate the topology and routing tables. The clear command also allows for clearing all 
neighbors that are reachable out an interface, or based on the neighbor’s IP address. (The 
generic syntax is clear ip eigrp neighbors [ip-address | interface-type interface-number].)

Foundation Summary     251
Foundation Summary
This section lists additional details and facts to round out coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with a Key Point icon.
Table 9-6 lists some of the most popular Cisco IOS commands related to the topics in this chapter. 
Also refer to Table 9-4 for a few additional commands related to load balancing.
Table 9-6
Command Reference for Chapter 9 
Command
Command Mode and Description
router eigrp as-number 
Global conﬁg; puts user in EIGRP conﬁguration mode for 
that AS
network ip-address [wildcard-mask] 
EIGRP conﬁg mode; deﬁnes matching parameters, compared 
to interface IP addresses, to pick interfaces on which to 
enable EIGRP
distribute-list [access-list-number | 
name] {in | out} [interface-type | 
interface-number]
EIGRP conﬁg mode; deﬁnes ACL or preﬁx list to use for 
ﬁltering EIGRP updates
ip split-horizon eigrp asn
Interface subcommand; enables or disables split horizon
passive-interface [default] {interface-
type interface-number}
EIGRP conﬁg mode; causes EIGRP to stop sending Hellos 
on the speciﬁed interface, and thereby to also stop receiving 
and/or sending updates
ip hello-interval eigrp asn seconds
Interface subcommand; sets the interval for periodic Hellos 
sent by this interface
ip hold-time eigrp asn seconds
Interface subcommand; sets the countdown timer to be used 
by a router’s neighbor when monitoring for incoming EIGRP 
messages from this interface
auto-summary
EIGRP conﬁg mode; enables automatic summarization at 
classful network boundaries
metric weights tos k1 k2 k3 k4 k5
EIGRP conﬁg mode; deﬁnes the per-ToS K values to be used 
in EIGRP metric calculations
ip bandwidth-percent eigrp asn 
percent
Interface subcommand; deﬁnes the maximum percentage of 
interface bandwidth to be used for EIGRP messages
continues

252     Chapter 9: EIGRP
Table 9-7 summarizes the types of EIGRP packets and their purposes. 
Command
Command Mode and Description
timers active-time [time-limit | 
disabled]
EIGRP conﬁg mode; sets the time limit for how long a route 
is in active state before becoming stuck-in-active
show ip route eigrp asn
User mode; displays all EIGRP routes in the IP routing table 
show ip eigrp topology [as-number | 
[[ip-address] mask]] [active | all-links | 
pending | summary | zero-successors]
User mode; lists different parts of the EIGRP topology table, 
depending on the options used
show ip eigrp interfaces [interface-
type interface-number] [as-number]
User mode; lists EIGRP protocol timers and statistics per 
interface
show ip eigrp trafﬁc [as-number]
User mode; displays EIGRP trafﬁc statistics
show ip protocols
User mode; lists EIGRP timer settings, current protocol 
status, automatic summarization actions, and update sources
show ip eigrp asn neighbors
User mode; lists EIGRP neighbors
clear ip eigrp neighbors [ip-address | 
interface-type interface-number]
Enable mode; disables current neighbor relationships, 
removing topology table entries associated with each 
neighbor
clear ip route {network [mask] | *}
Enable mode; clears the routing table entries, which are then 
reﬁlled based on the current topology table
show ip interface [type number]
User mode; lists many interface settings, including split 
horizon
eigrp log-neighbor-changes
EIGRP subcommand; displays log messages when neighbor 
status changes; enabled by default
Table 9-7
EIGRP Message Summary
KEY 
POINT
EIGRP Packet
Purpose
Hello
Identiﬁes neighbors, exchanges parameters, and is sent periodically as a 
keepalive function
Update
Informs neighbors about routing information
Ack
Acknowledges Update, Query, and Response packets
Query
Asks neighboring routers to verify their route to a particular subnet
Reply
Sent by neighbors to reply to a Query
Goodbye
Used by a router to notify its neighbors when the router is gracefully shutting down
Table 9-6
Command Reference for Chapter 9 (Continued)

Memory Builders     253
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory 
about some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
hello interval, full update, partial update, Route Tag ﬁeld, Next Hop ﬁeld, MD5, 
DUAL, Hold timer, K value, neighbor, adjacency, RTP, SRTT, RTO, Update, Ack, 
query, Reply, Hello, Goodbye, RD, FD, feasibility condition, successor route, 
feasible successor, input event, local computation, active, passive, going active, 
stuck-in-active, query scope, EIGRP stub router, limiting query scope, variance
Refer to the CD-based glossary to check your answers.
Further Reading
Jeff Doyle’s Routing TCP/IP, Volume I, Second Edition, (Cisco Press) has several excellent examples 
of conﬁguration, as well as several examples of the DUAL algorithm and the Active Query process.
EIGRP Network Design Solutions, by Ivan Pepelnjak, contains wonderfully complete coverage 
of EIGRP, at least as it existed at the latest publication date. It also has great, detailed examples of 
the Query process.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— OSPF
— The use of show and debug commands

C H A P T E R 10
OSPF
This chapter covers OSPF, the only link-state routing protocol covered by the CCIE Routing and 
Switching exam blueprint. As with the other routing protocol chapters, this chapter includes 
most of the features, concepts, and commands related to OSPF. Chapter 11 “IGP Route 
Redistribution, Route Summarization, and Default Routing,” covers a few other details of OSPF, 
in particular, route redistribution, route ﬁltering in redistribution, and route summarization.
“Do I Know This Already?” Quiz
Table 10-1 outlines the major sections in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
R1 has received an OSPF LSU from R2. Which of the following methods may be used 
by R1 to acknowledge receipt of the LSU from R2? 
a. TCP on R1 acknowledges using the TCP Acknowledgement ﬁeld.
b. R1 sends back an identical copy of the LSU.
c. R1 sends back an LSAck to R2.
d. R1 sends back a DD packet with LSA headers whose sequence numbers match the 
sequence numbers in the LSU.
Table 10-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
OSPF Database Exchange
1–5
OSPF Design and LSAs
6–9
OSPF Conﬁguration
10–12
Total Score

256     Chapter 10: OSPF
2.
Fredsco has an enterprise network with one core Frame Relay connected router, with a hub-
and-spoke network of PVCs connecting to ten remote ofﬁces. The network uses OSPF 
exclusively. The core router (R-core) has all ten PVCs deﬁned under multipoint subinterface 
s0/0.1. Each remote router also uses a multipoint subinterface. Fred, the engineer, conﬁgures 
an ip ospf network non-broadcast command under the subinterface on R-core and on the 
subinterfaces of the ten remote routers. Fred also assigns an IP address to each router from 
subnet 10.3.4.0/24, with R-core using the .100 address, and the remote ofﬁces using .1 
through .10. Assuming all other related options are using defaults, which of the following 
would be true about this network? 
a. The OSPF hello interval would be 30 seconds.
b. The OSPF dead interval would be 40 seconds.
c. The remote routers could learn all routes to other remote routers’ subnets, but only if 
R-core became the designated router.
d. No designated router will be elected in subnet 10.3.4.0/24.
3.
Which of the following interface subcommands, used on a multipoint Frame Relay 
subinterface, creates a requirement for a DR to be elected for the attached subnet? 
a. ip ospf network point-to-multipoint
b. ip ospf network point-to-multipoint non-broadcast
c. ip ospf network non-broadcast
d. None of these answers is correct.
4.
The following routers share the same LAN segment and have the stated OSPF settings: R1: 
RID 1.1.1.1, hello 10, priority 3; R2: RID 2.2.2.2, hello 9, priority 4; R3, RID 3.3.3.3, priority 
3; and R4: RID 4.4.4.4, hello 10, priority 2. The LAN switch fails, recovers, and all routers 
attempt to elect an OSPF DR and form neighbor relationships at the same time. No other 
OSPF-related parameters were speciﬁcally set. Which of the following is true about 
negotiations and elections on this LAN? 
a. R1, R3, and R4 will expect Hellos from R2 every 9 seconds.
b. R2 will become the DR but have no neighbors.
c. R3 will become the BDR.
d. R4’s dead interval will be 40 seconds.
e. All routers will use R2’s hello interval of 9 once R2 becomes the designated router.

“Do I Know This Already?” Quiz     257
5.
Which of the following must be true in order for two OSPF routers that share the same LAN 
data link to be able to become OSPF neighbors?
a. Must be in the same area
b. Must have the same LSRefresh setting
c. Must have differing OSPF priorities
d. Must have the same Hello timer, but can have different dead intervals
6.
R1 is an OSPF ASBR that injects an E1 route for network 200.1.1.0/24 into the OSPF 
backbone area. R2 is an ABR connected to area 0 and to area 1. R2 also has an Ethernet 
interface in area 0, IP address 10.1.1.1/24, for which it is the designated router. R3 is a router 
internal to area 1. Enough links are up and working for the OSPF design to be working 
properly. Which of the following is true regarding this topology? (Assume no other routing 
protocols are running, and that area 1 is not a stub area.) 
a. R1 creates a type 7 LSA and ﬂoods it throughout area 0.
b. R3 will not have a speciﬁc route to 200.1.1.0/24.
c. R2 forwards the LSA that R1 created for 200.1.1.0/24 into area 1.
d. R2 will create a type 2 LSA for subnet 10.1.1.0/24 and ﬂood it throughout 
area 0.
7.
R1 is an OSPF ASBR that injects an E1 route for network 200.1.1.0/24 into the OSPF 
backbone area. R2 is an ABR connected to area 0 and to area 1. R2 also has an Ethernet 
interface in area 0, IP address 10.1.1.1/24, for which it is the designated router. R3 is a router 
internal to area 1. Enough links are up and working for the OSPF design to be working 
properly. Which of the following are true regarding this topology? (Assume no other routing 
protocols are running, and that area 1 is a totally NSSA area.) 
a. R3 could inject internal routes into the OSPF domain.
b. R3 will not have a speciﬁc route to 200.1.1.0/24.
c. R2 forwards the LSA that R1 created for 200.1.1.0/24 into area 1.
d. R2 will create a type 2 LSA for subnet 10.1.1.0/24 and ﬂood it throughout 
area 0.

258     Chapter 10: OSPF
8.
The routers in area 55 all have the area 55 stub no-summary command conﬁgured under 
the router ospf command. OSPF has converged, with all routers in area 55 holding an 
identical link-state database for area 55. All IP addresses inside the area come from the range 
10.55.0.0/16; no other links outside area 55 use addresses in this range. R11 is the only ABR 
for the area. Which of the following is true about this design? 
a. The area is a stubby area.
b. The area is a totally stubby area.
c. The area is an NSSA.
d. ABR R11 is not allowed to summarize the type 1 and 2 LSAs in area 55 into the 
10.55.0.0/16 preﬁx due to the no-summary keyword.
e. Routers internal to area 55 can have routes to speciﬁc subnets inside area 0.
f. Routers internal to area 55 can have routes to E1, but not E2, OSPF routes. 
9.
R1 is an OSPF ASBR that injects an E1 route for network 200.1.1.0/24 into the OSPF 
backbone area. R2 is an ABR connected to area 0 and to area 1. R2 also has an Ethernet 
interface in area 0, IP address 10.1.1.1/24, for which it is the designated router. R3 is a 
router internal to area 1. Enough links are up and working for the OSPF design to be 
working properly. Which of the following are true regarding this topology? (Assume no 
other routing protocols are running, and that area 1 is not a stubby area.) 
a. R3’s cost for the route to 200.1.1.0 will be the cost of the route as it was injected into the 
OSPF domain by R1, without considering any internal cost.
b. R3’s cost for the route to 200.1.1.0 will include the addition of R3’s cost to reach R1, 
plus the external cost listed in the LSA.
c. R3’s cost for the route to 10.1.1.0/24 will be the same as its cost to reach ABR R2.
d. R3’s cost for the route to 10.1.1.0/24 will be the sum of its cost to reach ABR R2 plus 
the cost listed in the type 3 LSA created for 10.1.1.0/24 by ABR R2.
e. It is impossible to characterize R3’s cost to 10.1.1.0/24 because R3 uses a summary type 
3 LSA, which hides some of the costs.
10.
R1 and R2 each connect via Fast Ethernet interfaces to the same LAN, which should be in 
area 0. R1’s IP address is 10.1.1.1/24, and R2’s is 10.1.1.2/24. The only OSPF-related 
conﬁguration is as follows: 
hostname R1
router ospf 1
 network 0.0.0.0 255.255.255.255 area 0
 auto-cost reference-bandwidth 1000
! 
hostname R2
router ospf 2
 network 10.0.0.0 0.0.0.255 area 0

“Do I Know This Already?” Quiz     259
Which of the following statements are true about the conﬁguration? 
a. The network command on R2 does not match IP address 10.1.1.2, so R2 will not 
attempt to send Hellos or discover neighbors on the LAN.
b. The different process IDs in the router ospf command prevent the two routers from 
becoming neighbors on the LAN.
c. R2 will become the DR as a result of having a cost of 1 associated with its Fast Ethernet 
interface.
d. R1 and R2 could never become neighbors due to the difference in cost values.
e. R1’s OSPF cost for its Fast Ethernet interface would be 10.
11.
Which of the following are true about setting timers with OSPF? 
a. The ip ospf dead-interval minimal hello-multiplier 4 interface subcommand sets the 
hello interval to 4 ms.
b. The ip ospf dead-interval minimal hello-multiplier 4 interface subcommand sets the 
dead interval to 4 seconds.
c. The ip ospf dead-interval minimal hello-multiplier 4 interface subcommand sets the 
hello interval to 250 ms.
d. On all interfaces, the ip ospf hello-interval 30 interface subcommand changes the hello 
interval from 10 to 30. 
e. The ip ospf hello-multiplier 5 interface subcommand sets the dead interval to ﬁve times 
the then-current hello interval. 
f. Cisco IOS defaults the hello and dead intervals to 30/120 on interfaces using the OSPF 
nonbroadcast network type.
12.
R1 has been conﬁgured for OSPF authentication on its fa0/0 interface as shown below. Which 
of the following is true about the conﬁguration? 
iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaa0000////0000
    iiiipppp    oooossssppppffff    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn----kkkkeeeeyyyy    hhhhaaaannnnnnnnaaaahhhh    
    iiiipppp    oooossssppppffff    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    
    iiiipppp    oooossssppppffff    mmmmeeeessssssssaaaaggggeeee----ddddiiiiggggeeeesssstttt----kkkkeeeeyyyy    2222    mmmmdddd5555    jjjjeeeessssssssiiiieeee    
rrrroooouuuutttteeeerrrr    oooossssppppffff    2222
    aaaarrrreeeeaaaa    0000    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmeeeessssssssaaaaggggeeee----ddddiiiiggggeeeesssstttt
a. R1 will attempt simple-text authentication on the LAN with key hannah.
b. R1 will attempt MD5 authentication on the LAN with key jessie.
c. R2 will attempt OSPF type 2 authentication on fa0/0.
d. R2 will attempt OSPF type 3 authentication on fa0/0.

260     Chapter 10: OSPF
Foundation Topics
Link-state routing protocols deﬁne the content and structure of data that describes network 
topology, and deﬁne the processes by which routers exchange that detailed topology information. 
The name “link state” refers to the fact that the topology information includes information about 
each data link, along with each link’s current operational state. All the topological data together 
comprises the link-state database (LSDB). Each link-state router applies the Dijkstra algorithm to 
the database to calculate the current-best routes to each subnet.
This chapter breaks down the OSPF coverage into three major sections. The ﬁrst section details 
how the topology data is exchanged. The second section covers OSPF design and the contents of 
the LSDB, which comprises different types of link-state advertisements (LSAs). (The second 
section covers both design and the LSDB because the design choices directly impact which types 
of LSAs are forwarded into the differing parts of an OSPF network.) The third section covers the 
majority of the OSPF conﬁguration details of OSPF for this chapter, although a few conﬁguration 
topics are interspersed in the ﬁrst two sections.
OSPF Database Exchange
OSPF deﬁnes ﬁve different messages that routers can use to exchange LSAs. The process by 
which LSAs are exchanged does not change whether a single area or multiple areas are used, so 
this section will use a single OSPF area (area 0). 
OSPF Router IDs
Before an OSPF router can send any OSPF messages, it must choose a unique 32-bit dotted-
decimal identiﬁer called the OSPF router identiﬁer (RID). Cisco routers use the following 
sequence to choose their OSPF RID, only moving on to the next step in this list if the previous step 
did not supply the OSPF RID:
1.
Use the router ID conﬁgured in the router-id id subcommand under router ospf.
2.
Use the highest numeric IP address on any currently “up and up” loopback interface.
3.
Use the highest numeric IP address on any currently “up and up” non-loopback interface.
NOTE
This chapter addresses the functions of OSPF Version 2. It ignores OSPF Version 3 
(RFC 2740), which was introduced primarily to support IPv6.
KEY 
POINT

OSPF Database Exchange     261
The sequence and logic are very simple, but some details are hidden in the sequence:
■
The interface from which the RID is taken does not have to be matched by an OSPF network 
command.
■
OSPF does not have to advertise a route to reach the RID’s subnet.
■
The RID does not have to be reachable per the IP routing table.
■
Steps 2 and 3 look at the then-current interface state to choose the RID when the OSPF 
process is started.
■
Routers consider changing the OSPF RID when the OSPF process is restarted, or when the 
RID is changed via conﬁguration.
■
If a router’s RID changes, the rest of the routers in the same area will have to perform a 
new SPF calculation.
■
If the RID is conﬁgured with the router-id command, and the command remains unchanged, 
that router’s RID will never change.
For these reasons, many people set their RIDs with the router-id command and use an obvious 
numbering scheme to make it easy to identify a router by its RID. 
Becoming Neighbors, Exchanging Databases, and Becoming Adjacent
OSPF directly encapsulates the ﬁve different types of OSPF messages inside IP packets, using 
IP protocol 89, as listed in Table 10-2.
Table 10-2
OSPF Messages
KEY 
POINT
Message
Description
Hello
Used to discover neighbors, bring a neighbor relationship to a 2-way state, 
and monitor a neighbor’s responsiveness in case it fails
Database Description 
(DD or DBD)
Used to exchange brief versions of each LSA, typically on initial topology 
exchange, so that a router knows a list of that neighbor’s LSAs
Link-State Request 
(LSR)
A packet that identiﬁes one or more LSAs about which the sending router 
would like the neighbor to supply full details about the LSAs
Link-State Update 
(LSU)
A packet that contains fully detailed LSAs, typically sent in response to an 
LSR message
Link-State 
Acknowledgement 
(LSAck)
Sent to conﬁrm receipt of an LSU message

262     Chapter 10: OSPF
These messages together allow routers to discover each other’s presence (Hello), learn which 
LSAs are missing from their LSDBs (DD), request and reliably exchange the LSAs (LSR/LSU), 
and monitor their neighbors for any changes in the topology (Hello). Note that the LSAs 
themselves are not OSPF messages—an LSA is a data structure, held inside a router’s LSDB, and 
exchanged inside LSU messages. 
When a particular data link ﬁrst comes up, OSPF routers ﬁrst become neighbors using the Hello 
message. At that point, they exchange topology information using the other four OSPF messages. 
Figure 10-1 outlines the overall process between two routers. 
Figure 10-1
Overview of OSPF LSDB Exchange
Figure 10-1 shows the overall message ﬂow, along with the neighbor state on each router. An 
OSPF router keeps a state machine for each neighbor, listing the current neighbor state in the 
output of the show ip ospf neighbor command. These neighbor states change as the neighbors 
progress through their messaging; in this example, the neighbors settle into a full state, meaning 
fully adjacent, once the process is completed. 
The “Foundation Summary” section at the end of this chapter includes a reference table
(Table 10-13) listing the neighbor states and their meanings. The next few sections explain the 
details behind the process shown in Figure 10-1.
Init
2-way
ExStart
DR Election,
if needed
DR Election,
if needed
Exchange
Loading
Full
Hello, Seen [null], RID 1.1.1.1
RID 1.1.1.1
R1
RID 2.2.2.2
R2
Hello, Seen [1.1.1.1], RID 2.2.2.2
Hello, Seen [1.1.1.1, 2.2.2.2], RID 1.1.1.1
Hello, DR=z.z.z.z
DD (LSA Headers)
DD (LSA Headers)
DD (LSA Headers)
...
LSR, LSU, LSAck (Full LSAs)
...
Neighbor State
Down
(R1 to R2 Link comes up ...)
Init
2-way
ExStart
Exchange
Loading
Full
Neighbor State
Down

OSPF Database Exchange     263
Becoming Neighbors: The Hello Process
Hello messages perform three major functions: 
■
Discover other OSPF-speaking routers on common subnets
■
Check for agreement on some conﬁguration parameters
■
Monitor health of the neighbors to react if the neighbor fails 
To discover neighbors, Cisco OSPF routers listen for multicast Hello messages sent to 224.0.0.5—
the All OSPF Routers multicast address—on any interfaces that have been enabled for OSPF. The 
Hellos are sourced from that router’s primary IP address on the interface—in other words, Hellos 
are not sourced from secondary IP addresses. (OSPF routers will advertise secondary IP addresses, 
but they will not send Hellos from those IP addresses, and never form neighbor relationships using 
secondary addresses.) 
Once two routers discover each other by receiving Hellos from the other router, the routers 
perform the following parameter checks based on the receive Hellos:
■
Must pass the authentication process
■
Must be in the same primary subnet, including same subnet mask
■
Must be in the same OSPF area
■
Must be of the same area type (stub, NSSA, and so on) 
■
Must not have duplicate RIDs
■
OSPF Hello and Dead timers must be equal
If any of these items do not match, the two routers simply do not form a neighbor relationship. 
Also of note is one important item that does not have to match: the OSPF process ID (PID), as 
conﬁgured in the router ospf process-id command. (Also, the MTU must be equal for the DD 
packets to be successfully sent between neighbors, but this parameter check is technically not part 
of the Hello process.) 
The third important function for a Hello is to maintain a heartbeat function between neighbors. 
The neighbors send Hellos every hello interval; failure to receive a Hello within the longer dead 
interval causes a router to believe that its neighbor has failed. The hello interval defaults to 
10 seconds on LAN interfaces and 30 seconds on T1 and slower WAN interfaces; the dead interval 
defaults to four times the hello interval. 
Example 10-1 lists some basic OSPF command output related to the neighbor establishment with 
Hellos, and the hello and dead intervals.
KEY 
POINT

264     Chapter 10: OSPF
Flooding LSA Headers to Neighbors
Once two routers hear Hellos, and the parameter check passes, they do not immediately send 
packets holding the LSAs. Instead, each router creates and sends Database Description (DD, or 
sometimes called DBD) packets, which contain the headers of each LSA. The headers include 
enough information to uniquely identify each LSA. Essentially, the routers exchange a list of all 
the LSAs they each know about; the next step in the process is letting a router request a new copy 
of any old or unknown LSAs. 
The DD messages use an OSPF-deﬁned simple error-recovery process. Each DD packet, which 
may contain several LSA headers, has an assigned sequence number. The receiver acknowledges 
Example 10-1
Hello Mismatches and Basic Neighbor Parameters
! Below, ddddeeeebbbbuuuugggg messages show that this router disagrees with the hello and dead
! intervals on router 10.1.111.4; The “C” and “R” mean “configured” and “received,”
! respectively, meaning that this router uses 30/120 for hello/dead, and the other
! router is trying to use 10/40.
R1# ddddeeeebbbbuuuugggg    iiiipppp    oooossssppppffff    hhhheeeelllllllloooo
OSPF hello events debugging is on
Jan 12 06:41:20.940: OSPF: Mismatched hello parameters from 10.1.111.4
Jan 12 06:41:20.940: OSPF: Dead R 40 C 120, Hello R 10 C 30  Mask R 255.255.255.0 C 
  255.255.255.0
! Below, R1’s hello and dead intervals are listed for the same interface.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    ssss    0000////0000....111100000000
Serial0/0.100 is up, line protocol is up 
  Internet Address 10.1.111.1/24, Area 0 
  Process ID 1, Router ID 1.1.1.1, Network Type NON_BROADCAST, Cost: 64
  Transmit Delay is 1 sec, State DR, Priority 1 
  Designated Router (ID) 1.1.1.1, Interface address 10.1.111.1
  No backup designated router on this network
  Timer intervals configured, Hello 30, Dead 120, Wait 120, Retransmit 5
! Lines omitted for brevity
! Below, R1 shows a neighbor on S0/0.100, in the full state, meaning the routers
! have completed LSDB exchange. Note the current Dead timer counts down, in this 
! case from 2 minutes; the value of 1:58 means R1 last received a Hello from
! neighbor 10.1.111.6 two seconds ago.  
R1# sssshhhh    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhhbbbboooorrrr    6666....6666....6666....6666
 Neighbor 6.6.6.6, interface address 10.1.111.6
    In the area 0 via interface Serial0/0.100 
    Neighbor priority is 0, State is FULL, 8 state changes
    DR is 10.1.111.1 BDR is 0.0.0.0
    Poll interval 120
    Options is 0x42
    Dead timer due in 00:01:58
    Neighbor is up for 00:17:22
! Lines omitted for brevity

OSPF Database Exchange     265
a received DD packet by sending an identical DD packet back to the sender. The sender uses a 
window size of one packet, then waits for the acknowledgement before sending the next DD 
packet. 
Requesting, Getting, and Acknowledging LSAs
Once all LSA headers have been exchanged using DD packets, each neighboring router has a list 
of LSAs known by the neighbor. Using that knowledge, a router needs to request a full copy of 
each LSA that is missing from its LSDB. 
To know if a neighbor has a more recent copy of a particular LSA, a router looks at the sequence 
number of the LSA in its LSDB and compares it to the sequence number of that same LSA learned 
from the DD packet. Each LSA’s sequence number is incremented every time the LSA changes. 
So, if a router received (via a DD packet) an LSA header with a later sequence number for a 
particular LSA (as compared with the LSA in the LSDB), that router knows that the neighbor has 
a more recent LSA. For example, R1 sent R2 an LSA header for the type 1 LSA that describes R1 
itself, with sequence number 0x80000004. If R2’s database already held that LSA, but with a 
sequence number of 0x80000003, then R2 would know that it needs to ask R1 to send the latest 
copy (sequence number 0x80000004) of that LSA. 
Routers use Link-State Request (LSR) packets to request one or more LSAs from a neighbor. The 
neighboring router replies with Link-State Update (LSU) packets, which hold one or more full 
LSAs. As shown in Figure 10-1, both routers sit in a loading state while the LSR/LSA process 
continues. Once the process is complete, they settle into a full state, which means that the two 
routers should have fully exchanged their databases, resulting in identical copies of the LSDB 
entries for that area on both routers.
The LSR/LSA process uses a reliable protocol that has two options for acknowledging packets. 
First, an LSU can be acknowledged by the receiver of the LSU simply repeating the exact same 
LSU back to the sender. Alternatively, a router can send back an LSAck packet to acknowledge 
the packet, which contains a list of acknowledged LSA headers.
At the end of the process outlined in Figure 10-1, two neighbors have exchanged their LSDBs. As 
a result, their LSDBs should be identical. At this point, they can each independently run 
the Dijkstra Shortest Path First (SPF) algorithm to calculate the best routes from their own 
perspectives.
NOTE
New LSAs begin with sequence number 0x80000001, increase, and then wrap back 
to 0x7FFFFFFF. If the LSA made it to sequence number 0x80000000, the LSA must be 
reﬂooded throughout the network.

266     Chapter 10: OSPF
Designated Routers on LANs
OSPF optimizes the LSA ﬂooding process on multiaccess data links by using the concept of a 
designated router (DR). Without the concept of a DR, each pair of routers that share a data 
link would become fully adjacent neighbors. Each pair of routers would directly exchange their 
LSDBs with each other as shown in Figure 10-1. On a LAN with only six routers, without a DR, 
15 different pairs of routers would exist, and 15 different instances of full database ﬂooding 
would occur. OSPF uses a DR (and backup DR, or BDR) on a LAN or other multiaccess 
network. The ﬂooding occurs through the DR, signiﬁcantly reducing the unnecessary exchange of 
redundant LSAs.
The next section goes through the basics of the DR/BDR process on LANs, which is followed by 
coverage of options of OSPF network types and how they impact OSPF ﬂooding on Frame Relay 
links.
Designated Router Optimization on LANs
Figure 10-2 depicts the DR ﬂooding optimization that occurs with sending DD packets over 
a LAN. 
Figure 10-2
DR Optimization on a LAN
NOTE
DRs have one other major function besides improving the efﬁciency of LSA ﬂooding 
process. They also create a type 2 LSA that represents the subnet. LSA types are covered in the 
next major section, “OSPF Design and LSAs.”
R2
R1
DROther (1.1.1.1)
Steps:
1. R1 sends DD to all DR Mcast address (224.0.0.6)
2. DR sends unicast acknowledgement by repeating same DD
3. DR sends DD with same info as multicast to all SPF routers (224.0.0.5)
DROther (2.2.2.2)
DR (8.8.8.8)
BDR (7.7.7.7)
DD, to 224.0.0.6
(All_DR)
DD, in
Acknowledgement,
to R1, Unicast
S1
S2
1
2
DD, to
224.0.0.5
(All_SPF)
3
Legend:
DR
Designated Router
BDR
Backup DR
DROther
Neither the DR or BDR

OSPF Database Exchange     267
Routers that are not the DR (including the BDR) send DDs to the DR by sending them to multicast 
address 224.0.0.6, the All OSPF DR Routers multicast address. The DR then acknowledges the 
DDs with a unicast DD (Step 2 in Figure 10-2). The DR then ﬂoods a new DD packet to all OSPF 
routers (multicast address 224.0.0.5). 
Figure 10-2 shows the three main steps, but the non-DR routers also need to acknowledge the DD 
packet sent in Step 3. Typically, the acknowledgment occurs by the other routers each replying 
with a unicast DD packet. 
Example 10-2 shows the output of a show ip ospf neighbor command on R1 from Figure 10-2. 
Note that R1 is in a full state with S2, which is the DR, with OSPF RID 8.8.8.8. R1 is also in 
a full state with S1, the BDR, OSPF RID 7.7.7.7. However, R1 is in a 2WAY state with R2, 
RID 2.2.2.2. 
When a DR is used on a link, routers end up as DR, BDR, or neither; a router that is neither 
DR or BDR is called a DROther router. The DR and BDR form full adjacencies with all other 
neighbors on the link, so they reach a full state once the database exchange process is complete. 
However, two neighbors that are both DROthers do not become fully adjacent—they stop at the 
2WAY state, as shown in Example 10-2. Stopping at the 2WAY state between two DROther routers 
is normal; it simply means that the Hello parameter-match check worked, but the neighbors do not 
need to proceed to the point of exchanging DD packets, because they do not need to when a DR 
is present.
To describe the fact that some neighbors do not directly exchange DD and LSU packets, OSPF 
makes a distinction between the terms neighbors and adjacent, as follows:
■
Neighbors—Two routers that share a common data link, that exchange Hello messages, and 
the Hellos must match for certain parameters.
■
Adjacent (fully adjacent)—Two neighbors that have completed the process of fully 
exchanging DD and LSU packets directly between each other.
NOTE
In topologies without a DR, the DD and LSU packets are typically sent to the 
224.0.0.5. All OSPF Routers multicast IP address.
Example 10-2
The show ip ospf neighbor Command
R1# sssshhhh    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhhbbbboooorrrr    ffffaaaa    0000////0000
Neighbor ID     Pri   State           Dead Time   Address         Interface
2.2.2.2           1   2WAY/DROTHER    00:00:35    10.1.1.2        FastEthernet0/0
7.7.7.7           1   FULL/BDR        00:00:38    10.1.1.3        FastEthernet0/0
8.8.8.8           1   FULL/DR         00:00:34    10.1.1.4        FastEthernet0/0

268     Chapter 10: OSPF
Note that although DROther routers do not exchange DD and LSU packets directly with each 
other, like R1 and R2 in Figure 10-2, the DROther routers do end up with an identical copy of the 
LSDB entries by exchanging them with the DR.
DR Election on LANs
As noted in Figure 10-1, if a DR is elected, the election occurs after the routers have become 
neighbors, but before they send DD packets and reach the ExStart neighbor state. When an OSPF 
router reaches the 2-way state with the ﬁrst neighbor on an interface, it has already received at least 
one Hello from that neighbor. If the Hello messages state a DR of 0.0.0.0—meaning none has been 
elected—the router waits before attempting to elect a DR. This typically occurs after a failure on 
the LAN. OSPF routers wait with the goal of giving all the routers on that subnet a chance to ﬁnish 
initializing after a failure so that all the routers can participate in the DR election—otherwise, 
the ﬁrst router to become active would always become the DR. (The time period is called the 
OSPF wait time, which is set to the same value as the Dead timer.) 
However, if the received Hellos already list the DR’s RID, the router does not have to wait before 
beginning the election process. This typically occurs when one router lost its connection to the 
LAN, but other routers remained and continued to work. In this case, the newly-connected router 
does not attempt to elect a new DR, assuming the DR listed in the received Hello is indeed the 
current DR.
The election process allows for the possibility of many different scenarios for which routers may 
and may not become the DR or BDR. Generally speaking, the following rules govern the DR/BDR 
election process:
■
Any router with its OSPF priority set to between 1–255 inclusive can try to become DR by 
putting its own RID into the DR ﬁeld of its sent Hellos.
■
Routers examine received Hellos, looking at other routers’ priority settings, RIDs, and 
whether each neighbor claims to want to become the DR.
■
If a received Hello implies a “better” potential DR, the router stops claiming to want to be DR 
and asserts that the better candidate should be the DR.
■
The ﬁrst criteria for “better” is the router with the highest priority. 
■
If the priorities tie, the router with the higher RID is better.
■
The router not claiming to be the DR, but with the higher priority (or higher RID, in case 
priority is a tie) becomes the BDR.
KEY 
POINT

OSPF Database Exchange     269
■
If a new router arrives after the election, or an existing router improves its priority, it cannot 
preempt the existing DR and take over as DR (or as BDR).
■
Once a DR is elected, and the DR fails, the BDR becomes DR, and a new election is held for 
a new BDR.
Once the DR is elected, LSA ﬂooding continues as illustrated previously in Figure 10-2.
Designated Routers on WANs and OSPF Network Types
Using a DR makes good sense on a LAN because it improves LSA ﬂooding efﬁciency. 
Likewise, not using a DR on a point-to-point WAN link also makes sense, because with only 
two routers on the subnet, there is no inefﬁciency upon which to improve. However, on 
nonbroadcast multiaccess (NBMA) networks, arguments can be made regarding whether a DR 
is helpful. So, OSPF includes several options that include a choice of whether to use a DR on 
WAN interfaces. 
Cisco router interfaces can be conﬁgured to use, or not use, a DR, plus a couple of other key 
behaviors, based on the OSPF network type for each interface. The OSPF network type determines 
that router’s behavior regarding the following:
■
Whether the router tries to elect a DR on that interface
■
Whether the router must statically conﬁgure a neighbor (with the neighbor command), or ﬁnd 
neighbors using the typical multicast Hello packets
■
Whether more than two neighbors should be allowed on the same subnet
For instance, LAN interfaces default to use an OSPF network type of broadcast. OSPF broadcast 
networks elect a DR, use Hellos to dynamically ﬁnd neighbors, and allow more than two routers 
to be in the same subnet on that LAN. For HDLC and PPP links, OSPF uses a network type of 
point-to-point, meaning that no DR is elected, only two IP addresses are in the subnet, and 
neighbors can be found through Hellos. 
Table 10-3 summarizes the OSPF interface types and their meanings. Note that the interface type 
values can be set with the ip ospf network type interface subcommand; the ﬁrst column in the 
table lists the exact keyword according to this command. Also, for cases in which a DR is not 
elected, all routers that become neighbors also attempt to become adjacent by the direct exchange 
of DD, LSR, and LSU packets.
KEY 
POINT

270     Chapter 10: OSPF
Caveats Regarding OSPF Network Types over NBMA Networks
When conﬁguring OSPF over Frame Relay, the OSPF network type concept can become a bit 
troublesome. In fact, many CCIE Routing and Switching lab preparation texts and lab books focus 
on the variety of combinations of OSPF network types used with Frame Relay for various 
interfaces/subinterfaces. The following list contains many of the key items you should check when 
looking at an OSPF conﬁguration over Frame Relay, when the OSPF network types used on the 
various routers do not match: 
■
Make sure the default Hello/Dead timers do not cause the Hello parameter check to fail. (See 
Table 10-3 for the defaults for each OSPF network type.)
■
If one router expects a DR to be elected, and the other does not, the neighbors may come up, 
and full LSAs be communicated. However, show command output may show odd information, 
and next-hop routers may not be reachable. So, make sure all routers in the same NBMA 
subnet use an OSPF network type that either does use a DR or does not.
■
If a DR is used, the DR and BDR must have a permanent virtual circuit (PVC) to each other 
router in the subnet. If not, not all routers will be able to learn routes, because the DR must 
forward the DD and LSU packets to each of the other routers. Routers without a PVC to each 
other router should be prevented from becoming a DR/BDR. 
■
If one router requires a static neighbor command, typically the other router on the other 
end of the PVC does not require a neighbor command. For clarity, however, it is better to 
conﬁgure neighbor commands on both routers.
Table 10-3
OSPF Network Types
KEY 
POINT
Interface Type
Uses DR/
BDR?
Default 
Hello 
Interval
Requires a 
neighbor 
Command?
More than 2 
Hosts Allowed 
in the Subnet?
Broadcast 
Yes
10
No
Yes
Point-to-point1
No
10
No
No
Nonbroadcast2 (NBMA) 
Yes
30
Yes
Yes
Point-to-multipoint
No
30
No
Yes
Point-to-multipoint nonbroadcast
No
30
Yes
Yes
Loopback
No
—
—
No
1 Default on Frame Relay point-to-point subinterfaces.
2 Default on Frame Relay physical and multipoint subinterfaces.

OSPF Database Exchange     271
Two very simple options exist for making OSPF work over Frame Relay—both of which do 
not require a DR and do not require neighbor commands. If the design allows for the use of point-
to-point subinterfaces, use those, take the default OSPF network type of point-to-point, and no 
additional work is required. If multipoint subinterfaces are needed, or if the conﬁguration must not 
use subinterfaces, adding the ip ospf network point-to-multipoint command on all the routers 
works, without requiring additional effort to manually deﬁne neighbors or worry about which 
router becomes the DR.
Example of OSPF Network Types and NBMA
On NBMA networks with an OSPF network type that requires that a DR be elected, you must 
take care to make sure the correct DR is elected. The reason is that the DR and BDR must each 
have a PVC connecting it to all the DROther routers—otherwise, LSA ﬂooding will not be possible. 
So, with partial meshes, the election should be inﬂuenced by conﬁguring the routers’ priority and 
RIDs such that the hub site of a hub-and-spoke partial mesh becomes the DR. Figure 10-3 shows 
an example network for which R1 should be the only router allowed to become DR or BDR.
Figure 10-3
Network Used in the Frame Relay Priority and Network Type Example
Example 10-3 depicts the following scenarios relating to DR election in Figure 10-3:
■
The R1, R3, and R5 conﬁguration is correct for operating with default OSPF network type 
nonbroadcast in a partial mesh.
■
R6 has omitted the ip ospf priority interface subcommand, causing it to inadvisably become 
the DR.
■
R4 will be used as an example of what not to do, in part to point out some interesting facts 
about OSPF show commands.
RID 1.1.1.1
10.3.1.3/23
S0/0.1 Mpt
S0/0.1 P-P
S0/0
Phy.
S0.1 Mpt
S0.1 Mpt
E0/0
R1
R4
R5
R6
R3
10.3.1.4/23
10.1.111.0/24
FR
E0/0
10.5.1.5/24
E0/0
10.6.1.6/24
E0/0

272     Chapter 10: OSPF
Example 10-3 shows only the nondefault OSPF conﬁguration settings; also, the routers have an 
obvious RID numbering scheme (1.1.1.1 for R1, 2.2.2.2 for R2, and so on).
NOTE
Figure 10-3 and Example 10-3 do not depict a suggested design for Frame Relay and 
OSPF. With this topology, using point-to-point subinterfaces in all cases, using four small (/30) 
subnets, and defaulting to OSPF network type point-to-point would work well. Such a design, 
however, would not require any thought regarding the OSPF network type. So, this example 
is purposefully designed to provide a backdrop from which to show how the OSPF network 
types work.
Example 10-3
Setting Priority on NBMA Networks 
! R1 configuration—the nnnneeeeiiiigggghhhhbbbboooorrrr commands default to a priority value of 0, 
! meaning R1’s perception of that neighbor is priority 0. 
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    lllloooogggg----aaaaddddjjjjaaaacccceeeennnnccccyyyy----cccchhhhaaaannnnggggeeeessss    ddddeeeettttaaaaiiiillll
    nnnneeeettttwwwwoooorrrrkkkk    0000....0000....0000....0000    222255555555....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....3333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....4444
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....5555
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....6666    
! R3 configuration—R3’s interface priority is set to 0; R1 will use the higher 
! of R3’s announced priority 0 (based on R3’s iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy interface 
! subcommand) and the priority value on R1’s nnnneeeeiiiigggghhhhbbbboooorrrr command, which defaulted 
! to 0. So, R3 will not ever become a DR/BDR. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....1111    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....111111111111....3333    222255555555....222255555555....222255555555....0000
    iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy    0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100000000
! R4 configuration—note from Figure 10-3 that R4 is using a point-to-point 
! subinterface, with all defaults. This is not a typical use of a point-to-point
! subinterface, and is shown to make a few points later in the example.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    0000....0000....0000....0000    222255555555....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
! R5’s configuration is equivalent to R3 in relation to the OSPF network type
! and its implications.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000....1111    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....111111111111....5555    222255555555....222255555555....222255555555....0000
    iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy    0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100000000
!!!!
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    0000....0000....0000....0000    222255555555....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
! R6 configuration—R6 forgot to set the interface priority with the iiiipppp    oooossssppppffff    
!!!!    pppprrrriiiioooorrrriiiittttyyyy    0000 command, defaulting to priority 1.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    0000....0000....0000....0000    222255555555....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000

OSPF Database Exchange     273
! Below, the results of R6’s default interface priority of 1—R6, with RID
! 6.6.6.6, and an announced priority of 1, wins the DR election. Note that the
! command is issued on R1. 
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhhbbbboooorrrr
Neighbor ID     Pri   State           Dead Time   Address         Interface
6.6.6.6           1   FULL/DR         00:01:52    10.1.111.6      Serial0/0
3.3.3.3           0   FULL/DROTHER    00:01:46    10.1.111.3      Serial0/0
N/A               0   ATTEMPT/DROTHER   —        10.1.111.4       Serial0/0
5.5.5.5           0   FULL/DROTHER    00:01:47    10.1.111.5      Serial0/0
! Next, R1’s nnnneeeeiiiigggghhhhbbbboooorrrr command was automatically changed to “priority 1” based on
! the Hello, with priority 1, that R1 received from R6. To prevent this dynamic
! reconfiguration, you could add an iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy    0000 command under R6’s s0/0.1 
! interface.
R1# sssshhhhoooowwww    rrrruuuunnnn | bbbbeeeegggg    rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
router ospf 1
    nnnneeeettttwwwwoooorrrrkkkk    0000....0000....0000....0000    222255555555....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....6666    pppprrrriiiioooorrrriiiittttyyyy    1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....3333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....4444
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....111111111111....5555
! lines omitted for brevity
! Below, R4 is OSPF network type “point to point,” with Hello/dead of 10/40. 
! R1’s settings, based on Table 10-3, would be nonbroadcast, 30/120.
R4# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    ssss    0000////0000....1111
Serial0/0.1 is up, line protocol is up 
  Internet Address 10.1.111.4/24, Area 0 
  Process ID 1, Router ID 4.4.4.4, Network Type POINT_TO_POINT, Cost: 1562
  Transmit Delay is 1 sec, State POINT_TO_POINT,
  Timer intervals configured, Hello 10, Dead 40, Wait 40, Retransmit 5
! lines omitted for brevity
! Below, R4 changes its network type to yet a different value, one that expects
! nnnneeeeiiiigggghhhhbbbboooorrrr commands, but does not expect a DR to be used.
R4# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R4(config)# iiiinnnntttt    ssss    0000////0000....1111
R4(config-subif)# iiiipppp    oooossssppppffff    nnnneeeettttwwwwoooorrrrkkkk    ppppooooiiiinnnntttt----ttttoooo----mmmmuuuullllttttiiiippppooooiiiinnnntttt    nnnnoooonnnn----bbbbrrrrooooaaaaddddccccaaaasssstttt 
! Next, R1 and R4 become neighbors now that the Hello parameters match. Note that
! R1 believes that R4 is DROther.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhhbbbboooorrrr
Neighbor ID     Pri   State           Dead Time   Address         Interface
! lines omitted for brevity
4.4.4.4           1   FULL/DROTHER    00:01:56    10.1.111.4      Serial0/0
! Below, R4 agrees it is in a full state with R1, but does not list R1 as DR,
! because R4 is not using the concept of a DR at all due to R4’s network type.
R4# sssshhhh    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhh
Neighbor ID     Pri   State           Dead Time   Address         Interface
1.1.1.1           0   FULL/ —       00:01:42    10.1.111.1      Serial0/0.1
Example 10-3
Setting Priority on NBMA Networks (Continued)

274     Chapter 10: OSPF
The ﬁrst and most important point from Example 10-3 is the actual behavior of the two ways to set 
the priority in the example. The Cisco IOS Conﬁguration Guide at Cisco.com states that the OSPF 
neighbor command deﬁnes the priority of the neighbor. However, in practice, a router’s neighbor 
priority setting is compared with the priority inside the Hello it receives from that neighbor—
and the larger of the two values is used. In this example, R1’s neighbor 10.1.111.6 command 
(with default priority of 0) was overridden by R6’s Hello, which was based on R6’s default OSPF 
interface priority of 1. So, during DR election, R1 and R6 tied on OSPF priority, and R6 won due 
to its larger (6.6.6.6 versus 1.1.1.1) RID. R1 even automatically changed its neighbor command 
dynamically to neighbor 10.1.111.6 priority 1 to reﬂect the correct priority for R6.
Also note that, although neighbors must be statically conﬁgured for some network types, the 
neighbor command needs to be conﬁgured on only one router. R3 and R5, with correct working 
conﬁgurations, did not actually need a neighbor command. 
Finally, it might seem that all is now ﬁne between R1 and R4 by the end of the example, but even 
though the neighbors are fully adjacent, R4 cannot route packets to R3, R5, or R6 over the Frame 
Relay network. For instance, R5 could have some routes that point to 10.1.111.4 (R4’s Frame 
Relay IP address) as the next hop. However, because R5 is using a multipoint subinterface, R5 will 
not know what PVC to use to reach 10.1.111.4. (Chapter 7, “IP Forwarding (Routing),” covers how 
Frame Relay mapping occurs, and the logic used on multipoint and point-to-point subinterfaces.) In 
this case, the routers with multipoint subinterfaces would need to add frame-relay map commands; 
for example, R5 would need a frame-relay map ip 10.1.111.4 100 broadcast command, causing 
packets to next-hop 10.1.111.4 to go over DLCI 100 to R1, which would then route the packet 
on to R4. Keep in mind that R4’s conﬁguration is not a recommended conﬁguration.
SPF Calculation
So far, this chapter has covered a lot of ground related to the exchange of LSAs. Regardless of the 
OSPF network type and whether DRs are used, once a router has new or different information in its 
LSDB, it uses the Dijkstra SPF algorithm to examine the LSAs in the LSDB and derive the math-
equivalent of a ﬁgure of a network. This mathematical model has routers, links, costs for each link, 
and the current (up/down) status of each link. Figure 10-4 represents the SPF model of a sample 
network.
Figure 10-4
Single-Area SPF Calculation: Conceptual View
C 100
C 100
R2
R5
S2
VLAN 1
Route S2 – R1 – R5 : Cost 1 + 100 + 10 = 111
Route S2 – R2 – R5 : Cost 1 + 64 + 10 = 75
10.5.1.0/24
10.5.25.0/24
10.5.15.0/24
C 10
C 50
C 1
C 64
C 1
C 1
10.1.1.0/24
S1

OSPF Design and LSAs     275
Humans can easily see the conclusion that the SPF algorithm will reach, even though the 
algorithm itself is fairly complicated. SPF on a router ﬁnds all possible routes to each subnet, 
adds the cost for each outgoing interface in that route, and then picks the path with the least cost. 
OSPF then places those least (shortest) cost routes into the routing table. For example, S2 
calculates two possible routes to subnet 10.5.1.0/24, with the better route being out S2’s VLAN 
1 interface, with R2 as the next-hop router. Also note in Figure 10-4 that the cost values are per 
interface, and it is each outgoing interface’s cost that SPF adds to come up with the total cost of 
the route. 
Steady-State Operation
Even after a network has stabilized, all routers in the same area have the exact same LSAs, and 
each router has chosen its best routes using SPF, the following is still true of routers running 
OSPF:
■
Each router sends Hellos, based on per-interface hello intervals.
■
Each router expects to receive Hellos from neighbors within the dead interval on each 
interface; if not, the neighbor is considered to have failed.
■
Each router originally advertising an LSA reﬂoods each LSA (after incrementing its sequence 
number by 1) based on a per-LSA Link-State Refresh (LSRefresh) interval (default 
30 minutes).
■
Each router expects to have its LSA refreshed within each LSA’s MaxAge timer (default 
60 minutes).
OSPF Design and LSAs
This section covers two major topics: 
■
OSPF design 
■
OSPF LSA types
Although these might seem to be separate concepts, most OSPF design choices directly impact the 
LSA types in a network and impose restrictions on which neighbors may exchange those LSAs. 
This section starts with an OSPF design and terminology review, and then moves on to LSA types. 
Toward the end of the section, OSPF area types are covered, including how each variation changes 
how LSAs ﬂow through the different types of OSPF stubby areas.

276     Chapter 10: OSPF
OSPF Design Terms
OSPF design calls for grouping links into contiguous areas. Routers that connect to links in 
different areas are Area Border Routers (ABRs). ABRs must connect to area 0, the backbone area, 
and one or more other areas as well. Autonomous System Boundary Routers (ASBRs) inject routes 
external to OSPF into the OSPF domain, having learned those routes from wide-ranging sources 
from the Border Gateway Protocol (BGP) on down to simple redistribution of static routes.
Figure 10-5 shows the terms in the context of a simple OSPF design.
Figure 10-5
OSPF Design Terminology
Networks can use a single OSPF area, but using OSPF areas helps speed convergence and reduce 
overhead in an OSPF network. Using areas provides the following beneﬁts:
■
Generally smaller per-area LSDBs, requiring less memory. 
■
Faster SPF computation due to the sparser LSDB.
■
A link failure in one area only requires a partial SPF computation in other areas.
■
Routes may only be summarized at ABRs (and ASBRs); having areas allows summarization, 
again shrinking the LSDB and improving SPF calculation performance.
Transit Network
Area x
Internal Router
Area y
R3
R2
R5
R4
R1
Stub Network
Area Border
Router
Area Border
Router
Backbone
Router
Backbone
Router
Area 0
Backbone
Area
Autonomous System
Border Router
ABR1
BB2
ASBR1
ABR2
BB2
Another
Routing
Protocol
KEY 
POINT

OSPF Design and LSAs     277
When comparing the use of one area versus using many areas, the number of routers or subnets 
does not shrink, but the size of the LSDB on most routers should shrink. The LSDB shrinks 
because an ABR does not pass denser and more detailed type 1 and 2 LSAs from one area to 
another—instead, it passes type 3 summary LSAs. LSA types 1 and 2 can be thought of as the 
detailed topology information that causes most of the computing-intensive parts of the SPF 
algorithm; by representing these detailed type 1 and 2 LSAs in a different way in other areas, 
OSPF achieves its goal of reducing the effects of SPF.
LSA Types and Network Types
Table 10-4 lists the LSA types and their descriptions for reference; following the table, each type 
is explained in more detail, in the context of a working network.
Table 10-4
OSPF LSA Types
KEY 
POINT
LSA 
Type
Common 
Name
Description 
1 
Router
One per router, listing RID and all interface IP addresses. Represents 
stub networks as well. 
2 
Network
One per transit network. Created by the DR on the subnet, and 
represents the subnet and the router interfaces connected to the 
subnet.
3 
Net Summary
Created by ABRs to represent one area’s type 1 and 2 LSAs when 
being advertised into another area. Deﬁnes the links (subnets) in the 
origin area, and cost, but no topology data.
4 
ASBR Summary
Like a type 3 LSA, except it advertises a host route used to reach an 
ASBR.
5 
AS External
Created by ASBRs for external routes injected into OSPF. 
6 
Group 
Membership
Deﬁned for MOSPF; not supported by Cisco IOS.
7 
NSSA External
Created by ASBRs inside an NSSA area, instead of a type 5 LSA.
8
External 
Attributes
Not implemented in Cisco routers.
9–11
Opaque
Used as generic LSAs to allow for easy future extension of OSPF; 
for example, type 10 has been adapted for MPLS trafﬁc 
engineering.

278     Chapter 10: OSPF
Before diving into the coverage of LSA types, two more deﬁnitions are needed:
■
Transit network—A network over which two or more OSPF routers have become neighbors, 
so trafﬁc can transit from one to the other.
■
Stub network—A subnet on which a router has not formed any neighbor relationships.
Now on to the LSA types!
LSA Types 1 and 2
Each router creates and ﬂoods a type 1 LSA for itself. These LSAs describe the router, its inter-
faces (in that area), and a list of neighboring routers (in that area) on each interface. The LSA itself 
is identiﬁed by a link-state ID (LSID) equal to that router’s RID.
Type 2 LSAs represent a transit subnet for which a DR has been elected. The LSID is the RID of 
the DR on that subnet. Note that type 2 LSAs are not created for subnets on which no DR has been 
elected.
Armed with an LSDB with all the type 1 and 2 LSAs inside an area, a router’s SPF algorithm 
should be able to create a topological graph of the network, calculate the possible routes, and 
ﬁnally choose the best routes. For example, Figure 10-6 shows a sample internetwork that is used 
in several upcoming examples. Figure 10-7 shows a graphical view of the type 1 and type 2 LSAs 
created in area 3.
Figure 10-6
Network Used in LSA Examples
R33
R3
Transit, with DR
10.3.0.0/23
Transit, no DR
10.3.13.0/24
C 1
E0/0
C 10
C 64
C 64
C 1
RID 10.3.3.33
Area 3
Stub 10.3.2.0/23
RID 3.3.3.3
Area 4
Area 5
R4
E0/0
C 1562
RID 4.4.4.4
10.4.1.4/23
10.4.14.0/24
R5
E0/0
C 50
C 100
C 64
RID 5.5.5.5
RID
2.2.2.2
10.5.1.5/24
10.5.25.0/24
10.5.15.0/24
C 100
S2
Area 0
RID
8.8.8.8
RID
1.1.1.1
ASBR
RID
7.7.7.7
10.1.1.0/24
Externals:
192.168.1.0/24 (E1)
192.168.2.0/24 (E2)
R1
R2
S1

OSPF Design and LSAs     279
Figure 10-7
Graph of Type 1 and 2 LSAs for Area 3
For subnets without a DR, the type 1 LSAs hold enough information for the SPF algorithm to 
create the math model of the topology. For example, R1 and R3 use point-to-point subinterfaces, 
and the OSPF point-to-point network type. SPF can match up the information shown in the type 
1 LSAs for R1 and R3 in Figure 10-7 to know that the two routers are connected. 
For transit networks with DRs, OSPF uses a type 2 LSA to model the subnet as a node in the SPF 
mathematical model. Because the SPF process treats the type 2 LSA as a node in the graph, this 
LSA is sometimes called a pseudonode. The type 2 LSA includes references to the RIDs of all 
routers that are currently neighbors of the DR on that subnet. That information, combined with the 
type 1 LSAs for each router connected to the subnet represented by the type 2 LSA, allows SPF 
to construct an accurate picture of the network. 
Example 10-4 shows the LSAs in area 3 (Figures 10-6 and 10-7) via show commands. 
Example 10-4
LSA Types 1 and 2 in Area 3 
! R3’s LSDB is shown, with type 1 LSAs listed as “Router Link States” and
! type 2 LSAs as “Net Link States.” The command output shows a section for each LSA
! type, in sequential order.  
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee
            OSPF Router with ID (3.3.3.3) (Process ID 1)
            Router Link States (Area 3)
continues
LSA Type 1
RID 10.3.3.33
E0/0
Stub 10.3.2.33/23
Cost 1
Represents
R33
Represents Transit
Net 10.3.0.0/23
Represents R3
Represents R1
E0/0
10.3.1.33
To Transit with DR 10.3.1.3
Cost 1
E0/0
10.3.1.3
Transit with DR 10.3.1.3
Cost 10
S0/0.1
Stub 10.3.13.2/24
To RID 1.1.1.1
Cost 64
S0/0.3
Stub 10.3.13.1/24
To RID 3.3.3.3
Cost 64
To RID 10.3.3.33
Interface 10.3.3.33
To RID 3.3.3.3
Interface 10.3.1.3
LSA Type 2
DR 10.3.1.3
Subnet
10.3.0.0/23
LSA Type 1
RID 3.3.3.3
LSA Type 1
RID 1.1.1.1

280     Chapter 10: OSPF
Link ID         ADV Router      Age         Seq#       Checksum Link count
1.1.1.1         1.1.1.1         1203        0x80000025 0x0072C3 2
3.3.3.3         3.3.3.3         779         0x80000027 0x003FB0 3
10.3.3.33       10.3.3.33       899         0x80000020 0x002929 2
                Net Link States (Area 3)
Link ID         ADV Router      Age         Seq#       Checksum
10.3.1.3        3.3.3.3         1290        0x8000001F 0x00249E
! Lines omitted for brevity
! Next, the specific LSA’s link ID is included in the sssshhhhoooowwww command, listing detail
! for the one LSA type 2 inside area 3. Note that the “Link ID” is the DR’s
! interface address on the subnet. The nnnneeeettttwwwwoooorrrrkkkk keyword refers to the network LSAs (type 2 LSAs).
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    nnnneeeettttwwwwoooorrrrkkkk    11110000....3333....1111....3333
            OSPF Router with ID (3.3.3.3) (Process ID 1)
                Net Link States (Area 3)
Routing Bit Set on this LSA
LS age: 1304
Options: (No TOS-capability, DC)
LS Type: Network Links
Link State ID: 10.3.1.3 (address of Designated Router)
Advertising Router: 3.3.3.3
LS Seq Number: 8000001F
Checksum: 0x249E
Length: 32
Network Mask: /23
      Attached Router: 3.3.3.3
      Attached Router: 10.3.3.33
! Next, the type 1 LSA for R3 is listed. The link ID is the RID of R3. Note that
! the LSA includes reference to each stub and transit link connected to R3. The router 
! keyword refers to the router LSAs (type 1 LSAs).
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    rrrroooouuuutttteeeerrrr    3333....3333....3333....3333
            OSPF Router with ID (3.3.3.3) (Process ID 1)
                 Router Link States (Area 3)
  LS age: 804
  Options: (No TOS-capability, DC)
  LS Type: Router Links
  Link State ID: 3.3.3.3
  Advertising Router: 3.3.3.3
  LS Seq Number: 80000027
  Checksum: 0x3FB0
  Length: 60
  Number of Links: 3
    Link connected to: another Router (point-to-point)
     (Link ID) Neighboring Router ID: 1.1.1.1
     (Link Data) Router Interface address: 10.3.13.3
     Number of TOS metrics: 0
     TOS 0 Metrics: 64
Example 10-4
LSA Types 1 and 2 in Area 3 (Continued)

OSPF Design and LSAs     281
The show ip ospf database command lists the LSAs in that router’s LSDB, with LSA type 1 LSAs 
(router LSAs) ﬁrst, then type 2 (network link states), continuing sequentially through the LSA 
types. Also note that the LSDB for area 3 should be identical on R33, R3, and R1. However, on 
R1, the show ip ospf database command lists all of R1’s LSDB entries, including LSAs from 
other areas, so using an internal router to look at the LSDB may be the best place to begin 
troubleshooting a problem. Also note the costs for the routes on R3 and R1 at the end of the 
example—the SPF algorithm simply added the outgoing costs along the routes, from each router’s 
perspective.
LSA Type 3 and Inter-Area Costs
ABRs do not forward type 1 and 2 LSAs from one area to another. Instead, ABRs advertise type 
3 LSAs into one area in order to represent subnets described in both the type 1 and 2 LSAs in 
another area. Each type 3 summary LSA describes a simple vector—the subnet, mask, and the 
ABR’s cost to reach that subnet, as shown in Figure 10-8.
    Link connected to: a Stub Network
     (Link ID) Network/subnet number: 10.3.13.0
     (Link Data) Network Mask: 255.255.255.0
     Number of TOS metrics: 0
     TOS 0 Metrics: 64
! Note that R3’s LSA refers to a transit network next, based on its DR RID –
! these lines allow OSPF to know that this router (R3) connects to the transit 
! network whose type 2 LSA has LSID 10.3.1.3.
    Link connected to: a Transit Network
     (Link ID) Designated Router address: 10.3.1.3
     (Link Data) Router Interface address: 10.3.1.3
     Number of TOS metrics: 0
      TOS 0 Metrics: 10
! Below, the routes from R3 and R1 to 10.3.2.0/23 are shown. Note the cost values
! for each reflect the cumulative costs of the outgoing interfaces used to reach
! the subnet—for instance, R3’s cost is the sum of its outgoing interface cost
! (10) plus R33’s outgoing interface cost (1). R1’s cost is based on three outgoing
! links: R1 (cost 64), R3 (cost 10), and R33 (cost 1), for a total of 75. Also
! note that the time listed in the route is the time since this LSA first arrived 
! at the router, even if the LSA has been refreshed due to the LSRefresh interval.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff    1111 | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
O       10.3.2.0/23 [110/11] via 10.3.1.33, 17:08:33, Ethernet0/0
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
O       10.3.2.0/23 [110/75] via 10.3.13.3, 17:10:15, Serial0/0.3
NOTE
To signify a network that is down, the appropriate type 1 or 2 LSA is changed to show 
a metric of 16,777,215 (224 – 1), which is considered to be an inﬁnite metric to OSPF.
Example 10-4
LSA Types 1 and 2 in Area 3 (Continued)

282     Chapter 10: OSPF
Figure 10-8
Representation of Area 3 Subnets as Type 3 LSAs in Area 0
Example 10-5 focuses on the three subnets inside area 3, looking at the type 3 summary LSAs 
created for those subnets by ABR R1. Note that the example shows commands on S2; S2 has 
identical area 0 LSDB entries as compared with R1. 
Example 10-5
LSA Type 3 Created by R1 for Area 3’s Subnets 
! S2, internal to area 0, does not have the type 1 and 2 LSAs seen by R3 back in 
! Example 10-4. However, type 3 LSAs (listed as “Summary Net Links”) show all 
! three subnets inside area 3. R1 is listed as the advertising router because it
! created the type 3 LSAs.
S2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee
! Lines omitted for brevity
                Summary Net Link States (Area 0)
Link ID         ADV Router      Age         Seq#       Checksum
10.3.0.0        1.1.1.1         257         0x80000001 0x00A63C
10.3.2.0        1.1.1.1         257         0x80000001 0x009A45
10.3.13.0       1.1.1.1         261         0x80000021 0x007747
! Lines omitted for brevity
! Below, note that the ssssuuuummmmmmmmaaaarrrryyyy keyword is used to view type 3 LSAs. The metric 
! reflects R1’s cost to reach the subnet inside area 3. 
S2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    ssssuuuummmmmmmmaaaarrrryyyy    11110000....3333....0000....0000
            OSPF Router with ID (8.8.8.8) (Process ID 1)
               Summary Net Link States (Area 0)
  Routing Bit Set on this LSA
  LS age: 341
  Options: (No TOS-capability, DC, Upward)
  LS Type: Summary Links(Network)
  Link State ID: 10.3.0.0 (summary Network Number)
  Advertising Router: 1.1.1.1
  LS Seq Number: 80000001
  Checksum: 0xA63C
  Length: 28
  Network Mask: /23
         TOS: 0   Metric: 74 
! Next, S2’s routes to all three subnets are listed. S2 calculates its cost
! based on its cost to reach R1, plus the cost listed in the type 3 LSA. For
S2
R1
Area 0
R2’s Three Type 3 LSAs:
Routing Table:
Add: My cost to reach
R1 (cost 1) to Type 3
LSA’s costs
Subnet 10.3.2.0/23, Cost 75
Subnet 10.3.0.0/23, Cost 74
Subnet 10.3.13.0/24, Cost 64
10.3.2.0/23: Cost 76
10.3.0.0/23: Cost 75
10.3.13.0/24: Cost 65

OSPF Design and LSAs     283
Example 10-5 shows how S2 calculated its cost to the area 3 subnets. Routers calculate the cost 
for a route to a subnet deﬁned in a type 3 LSA by adding the following items:
1.
The calculated cost to reach the ABR that created and advertised the type 3 LSA.
2.
The cost as listed in the type 3 LSA.
You can see the cost of the type 3 LSA with the show ip ospf database summary link-id 
command, and the cost to reach the advertising ABR with the show ip ospf border-routers 
command, as shown in Example 10-5.
The beauty of this two-step cost calculation process is that it allows a signiﬁcant reduction in 
the number of SPF calculations. When a type 1 or 2 LSA changes in some way that affects the 
underlying routes—for instance, a link failure—each router in the area runs SPF, but routers inside 
other areas do not. For instance, if R3’s E0/0 is shut down, all three routers in area 3 run SPF inside 
that area, and the counter for area 3 in the show ip ospf statistics command increments. However, 
routers not inside area 0 do not run SPF, even though they update their routing tables—a process 
called a partial run, partial SPF, or partial calculation.
! example, the cost (above) in the type 3 LSA for 10.3.0.0/23 is 74; S2 adds
! that to S2’s cost to reach ABR R1 (cost 1), for a metric of 75. 
S2# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnncccclllluuuuddddeeee    11110000....3333
O IA    10.3.13.0/24 [110/65] via 10.1.1.1, 00:16:04, Vlan1
O IA    10.3.0.0/23 [110/75] via 10.1.1.1, 00:05:08, Vlan1
O IA    10.3.2.0/23 [110/76] via 10.1.1.1, 00:05:12, Vlan1
! Next, S2’s cost to reach RID 1.1.1.1 is listed as cost 1.
S2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    bbbboooorrrrddddeeeerrrr----rrrroooouuuutttteeeerrrrssss
OSPF Process 1 internal Routing Table
Codes: i—Intra-area route, I—Inter-area route
i 1.1.1.1 [1] via 10.1.1.1, Vlan1, ABR, Area 0, SPF 18
i 2.2.2.2 [1] via 10.1.1.2, Vlan1, ABR, Area 0, SPF 18
i 7.7.7.7 [1] via 10.1.1.3, Vlan1, ASBR, Area 0, SPF 18
! Below, the sssshhhhoooowwww    iiiipppp    oooossssppppffff    ssssttttaaaattttiiiissssttttiiiiccccssss command lists the number of SPF calculations.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ssssttttaaaatttt
OSPF process ID 1
------------------------------------------
  Area 0: SPF algorithm executed 6 times
  Area 3: SPF algorithm executed 15 times
  Area 4: SPF algorithm executed 6 times
  Area 5: SPF algorithm executed 5 times
! Lines omitted for brevity
Example 10-5
LSA Type 3 Created by R1 for Area 3’s Subnets (Continued)
KEY 
POINT

284     Chapter 10: OSPF
For example, imagine that R3’s LAN interface fails. R33 then updates its type 2 LSA, listing a 
metric of 16,777,215. R1 in turn updates its type 3 LSA for 10.3.0.0/23, ﬂooding that throughout 
area 0. The next step shows the computational savings: S2, using the two-step calculation, simply 
adds its cost to R1 (still 1) to 16,777,215, ﬁnds the number out of range, and removes the route from 
the IP routing table. S2 did not have to actually run the SPF algorithm to discover a new SPF tree.
Of particular importance is that partial calculations happen without any route summarization. With 
OSPF, route summarization does help reduce the overall number of routes that require SPF 
calculations, but route summarization is not required for partial calculations to occur.
LSA Types 4 and 5, and External Route Types 1 and 2
OSPF allows for two types of external routes, aptly named types 1 and 2. The type determines 
whether only the external metric is considered by SPF when picking the best routes (external type 2, 
or E2), or whether both the external and internal metrics are added together to compute the metric 
(external type 1, or E1). 
When an ASBR injects an E2 route, it creates a type 5 LSA for the subnet. The LSA lists 
the metric. The ASBR then ﬂoods the type 5 LSA throughout all areas. The other routers simply 
use the metric listed in the LSA; no need exists to add any cost on any links internal to the OSPF 
domain.
To support E1 routes, the ASBR creates both an LSA type 4 for itself and a type 5 LSA. Both types 
of LSAs are ﬂooded throughout the OSPF domain, including being forwarded by ABRs into other 
areas. Other routers calculate their costs to reach E1 routes in a manner similar to how metrics for 
LSA type 3 routes are calculated—by calculating the cost to reach the ASBR, and then adding the 
cost listed in the type 5 LSA. Figure 10-9 outlines the mechanics of how the LSAs are propagated, 
and how the metrics are calculated.
Figure 10-9
LSA Types 4 and 5 Propagation and the Effect on Type 1 External Routes
R3
Area 3
R1
• Cost to E2 Route: Metric in
LSA Type 5
• Cost to E1 Route: Add:
My Cost to ABR R1, Plus
the LSA Type 4’s Cost, Plus
the LSA Type 5’s Cost
Externals:
192.168.1.0/24 (E1)
192.168.2.0/24 (E2)
1
2
3
• Change/Flood Type 4:
List R1’s Metric to Reach
the ASBR
• Flood Type 5’s, Metric
Unchanged
Area 0
S1
• Create/Flood Type 4 (7.7.7.7)
• Create/Flood Type 5’s, Metric 20
ASBR
RID 7.7.7.7
ABR
RID 1.1.1.1
Internal
Router
Note: Arrows Show Propagation of LSAs.
KEY 
POINT
KEY 
POINT

OSPF Design and LSAs     285
E1 routes by deﬁnition include the cost as assigned when the ASBR injected the route into OSPF, 
plus any cost inside the OSPF domain. To calculate the cost for the E1 route, a router inside a 
different area must use two steps to calculate the internal cost, and a third step to add the external 
cost. For example, when R3, internal to area 3, calculates the cost to reach 192.168.2.0/24 (an E1 
route), R3 adds the following:
■
R3’s calculated area 3 cost to reach ABR R1 (RID 1.1.1.1).
■
R1’s cost to reach the ASBR that advertised the route (S2, RID 7.7.7.7). R1 announces this 
cost in the forwarded LSA type 4 that describes a host route to reach ASBR 7.7.7.7.
■
The external metric for the route, as listed in the type 5 LSA created by the ASBR.
Example 10-6 shows the components of the metrics and LSAs for two external routes: 
192.168.1.0/24 E1 with metric 20, and 192.168.2.0/24 E2, also with metric 20.
Example 10-6
Calculating the Metric for External Types 1 and 2 
! R3 has learned the two LSA type 5s.
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee | bbbbeeeeggggiiiinnnn    TTTTyyyyppppeeee----5555
              Type-5 AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
192.168.1.0     7.7.7.7         1916        0x8000002B 0x0080EF 0
192.168.2.0     7.7.7.7         1916        0x80000028 0x00FEF2 0
! Next, the detail for E2 192.168.2.0 is listed, with “metric type” referring 
! to the external route type E2. (192.168.1.0, not shown, is type 1.)
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    eeeexxxxtttteeeerrrrnnnnaaaallll    111199992222....111166668888....2222....0000
            OSPF Router with ID (3.3.3.3) (Process ID 1)
        Type-5 AS External Link States
  Routing Bit Set on this LSA
  LS age: 1969
  Options: (No TOS-capability, DC)
  LS Type: AS External Link
  Link State ID: 192.168.2.0 (External Network Number)
  Advertising Router: 7.7.7.7
  LS Seq Number: 80000028
  Checksum: 0xFEF2
  Length: 36
  Network Mask: /24
    Metric Type: 2 (Larger than any link state path)
    TOS: 0 
    Metric: 20 
    Forward Address: 0.0.0.0
    External Route Tag: 0
! Next, R1’s advertised cost of 1 between itself and the ASBR is listed. Note
! that S1’s RID (7.7.7.7) is listed, with the ABR that forwarded the LSA into
continues

286     Chapter 10: OSPF
OSPF Design in Light of LSA Types
OSPF’s main design trade-offs consist of choosing links for particular areas, with the goal of 
speeding convergence, reducing memory and computing resources, and keeping routing tables 
small through route summarization. For instance, by using a larger number of areas, and the 
implied conversion of dense types 1 and 2 LSAs into sparser type 3 LSAs, the OSPF LSDBs can 
be made smaller. Also, link ﬂaps in one area require SPF calculations only in that area, due to the 
partial calculation feature. Additionally, ABRs and ASBRs can be conﬁgured to summarize routes, 
reducing the number of type 3 LSAs introduced into other areas as well. (Route summarization is 
covered in Chapter 11, “IGP Route Summarization, Route Redistribution, and Default Routes.”)
The OSPF design goals to reduce convergence time, reduce overhead processing, and improve 
network stability can be reached using the core OSPF protocols and features covered so far. 
Another key OSPF design tool, stubby areas, will be covered next. 
! area 3, R1 (RID 1.1.1.1) also listed.
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    aaaassssbbbbrrrr----ssssuuuummmmmmmmaaaarrrryyyy 
            OSPF Router with ID (3.3.3.3) (Process ID 1)
        Summary ASB Link States (Area 3) 
  Routing Bit Set on this LSA
  LS age: 923
  Options: (No TOS-capability, DC, Upward)
  LS Type: Summary Links(AS Boundary Router)
  Link State ID: 7.7.7.7 (AS Boundary Router address)
  Advertising Router: 1.1.1.1
  LS Seq Number: 8000000A
  Checksum: 0x12FF
  Length: 28
  Network Mask: /0
    TOS: 0     Metric: 1 
! Below, R3’s calculated cost to R1 (64) and then to S2 (7.7.7.7) are listed. Note
! that the total of 65 is the cost 64 to reach the ABR, plus the cost 1 for the
! ABR to reach the ASBR.
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    bbbboooorrrrddddeeeerrrr----rrrroooouuuutttteeeerrrrssss
OSPF Process 1 internal Routing Table
Codes: i—Intra-area route, I—Inter-area route
i 1.1.1.1 [64] via 10.3.13.1, Serial0/0.1, ABR, Area 3, SPF 30
I 7.7.7.7 [65] via 10.3.13.1, Serial0/0.1, ASBR, Area 3, SPF 30
! Below, each route is noted as E1 or E2, with the E1 route’s metric including
! the external cost (20), plus cost to reach the ASBR (65).
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnncccclllluuuuddddeeee    111199992222....111166668888
O E1 192.168.1.0/24 [110/85] via 10.3.13.1, 00:50:34, Serial0/0.1
O E2 192.168.2.0/24 [110/20] via 10.3.13.1, 00:50:34, Serial0/0.1
Example 10-6
Calculating the Metric for External Types 1 and 2 (Continued)

OSPF Design and LSAs     287
Stubby Areas
OSPF can further reduce overhead by treating each area with one of several variations of rules, 
based on a concept called a stubby area. Stubby areas take advantage of the fact that to reach 
subnets in other areas, routers in an area must forward the packets to some ABR. Without stubby 
areas, ABRs must advertise all the subnets into the area, so that the routers know about the subnets. 
With stubby areas, ABRs quit advertising type 5 (external) LSAs into the stubby area, but instead 
ABRs create and advertise default routes into the stubby area. As a result, internal routers use 
default routing to forward packets to the ABR anyway. However, the internal routers now have 
sparser LSDBs inside the area. 
The classic case for a stubby area is an area with one ABR, but stubby areas can work well for 
areas with multiple ABRs as well. For example, the only way out of area 3 in Figure 10-6 is 
through the only ABR, R1. So, R1 could advertise a default route into area 3 instead of advertising 
any external type 5 LSAs. 
Also in Figure 10-6, area 5 has two ABRs. If area 5 were a stubby area, both ABRs would inject 
default routes into the area. This conﬁguration would work, but it may result in suboptimal routing. 
OSPF deﬁnes several different types of stubby areas. By deﬁnition, all stubby areas stop type 5 
(external) LSAs from being injected into them by the ABRs. However, depending on the variation, 
a stubby area may also prevent type 3 LSAs from being injected. The other variation includes 
whether a router inside the stubby area can redistribute routes into OSPF, thereby injecting an 
external route. Table 10-5 lists the variations on stubby areas, and their names.
Note in Table 10-5 that all four stub area types stop type 5 LSAs from entering the area. When the 
name includes “totally,” type 3 LSAs are also not passed into the area, signiﬁcantly reducing the size 
of the LSDB. If the name includes “NSSA,” it means that external routes can be redistributed into 
OSPF by routers inside the stubby area; note that the LSAs for these external routes would be type 7.
NOTE
Before moving on, a comment is in order about the relative use of the word 
“summary” in OSPF. The typical uses within OSPF include the following: 
■Type 3 LSAs are called summary LSAs in the OSPF RFCs.
■Type 5 and 7 external LSAs are sometimes called summary LSAs, because the LSAs 
cannot represent detailed topology information.
■The term LSA summary refers to the LSA headers that summarize LSAs and are sent inside 
DD packets.
■The term summary can also be used to refer to summary routes created with the area range 
and summary-address commands.

288     Chapter 10: OSPF
Conﬁguring a stub area is pretty simple—all routers in the area need the same stub settings, as 
conﬁgured in the area stub command. Table 10-6 lists the options.
Example 10-7, based on Figure 10-6, shows the results of the following conﬁguration:
■
Area 3 is conﬁgured as a totally NSSA area.
■
R3 will inject an external route to 192.168.21.0/24 as a type 7 LSA.
■
Area 4 is conﬁgured as a totally stubby area.
■
Area 5 is conﬁgured as simply stubby.
Table 10-5
OSPF Stubby Area Types
KEY 
POINT
Area Type
Stops Injection of 
Type 5 LSAs?
Stops Injection of 
Type 3 LSAs?
Allows Creation of 
Type 7 LSAs Inside 
the Area?
Stub
Yes
No
No
Totally stubby
Yes
Yes
No
Not-so-stubby area 
(NSSA)
Yes
No
Yes
Totally NSSA
Yes
Yes
Yes
Table 10-6
Stub Area Conﬁguration Options
KEY 
POINT
Stub Type
Router OSPF Subcommand
NSSA
area area-id nssa
Totally NSSA
area area-id nssa no-summary
Stub
area area-id stub 
Totally stubby
area area-id stub no-summary
Example 10-7
Stub Area Example 
! R3, in a totally NSSA area, knows intra-area routes (denoted with an “IA” 
! near the front of the output line from sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee), but the only 
! inter-area route is the default route created and sent by R1, the ABR.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
     10.0.0.0/8 is variably subnetted, 3 subnets, 2 masks
O       10.3.2.0/23 [110/11] via 10.3.1.33, 00:00:00, Ethernet0/0
O*IA 0.0.0.0/0 [110/65] via 10.3.13.1, 00:00:00, Serial0/0.1
! Still on R3, the LSA type 3 summary, created by ABR R1, is shown first. 
! Next, the External NSSA LSA type 7 LSA created by R3 is listed.

OSPF Design and LSAs     289
R3# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee | bbbbeeeeggggiiiinnnn    SSSSuuuummmmmmmmaaaarrrryyyy
        Summary Net Link States (Area 3)
Link ID         ADV Router      Age         Seq#       Checksum
0.0.0.0         1.1.1.1         704         0x80000004 0x00151A
          Type-7 AS External Link States (Area 3)
Link ID         ADV Router      Age         Seq#       Checksum Tag
192.168.21.0    3.3.3.3         17          0x80000003 0x00C12B 0
! R1, because it is attached to area 3, also has the R3-generated NSSA external 
! LSA. Note the advertising router is R3, and it is an E2 external route.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    nnnnssssssssaaaa----eeeexxxxtttteeeerrrrnnnnaaaallll
            OSPF Router with ID (1.1.1.1) (Process ID 1)
        Type-7 AS External Link States (Area 3)
          Routing Bit Set on this LSA
          LS age: 188
          Options: (No TOS-capability, Type 7/5 translation, DC)
          LS Type: AS External Link
          Link State ID: 192.168.21.0 (External Network Number )
          Advertising Router: 3.3.3.3
          LS Seq Number: 80000003
          Checksum: 0xC12B
          Length: 36
          Network Mask: /24
            Metric Type: 2 (Larger than any link state path)
            TOS: 0 
            Metric: 20 
            Forward Address: 10.3.13.3
            External Route Tag: 0
! Below, the same command on R2, not in area 3, shows no type 7 LSAs. ABRs
! convert type 7 LSAs to type 5 LSAs before forwarding them into another area. 
R2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee    nnnnssssssssaaaa----eeeexxxxtttteeeerrrrnnnnaaaallll
            OSPF Router with ID (2.2.2.2) (Process ID 2)
! Next, R2 does have a type 5 LSA for the subnet; R1 converts the type 7 to a type 
! 5 before flooding it into other areas.
R2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee | bbbbeeeeggggiiiinnnn    TTTTyyyyppppeeee----5555
                Type-5 AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
192.168.1.0     7.7.7.7         521         0x80000050 0x003615 0
192.168.2.0     7.7.7.7         521         0x8000004D 0x00B418 0
192.168.21.0    1.1.1.1         1778        0x80000019 0x006682 0
continues
Example 10-7
Stub Area Example (Continued)

290     Chapter 10: OSPF
The legend in the top of the output of a show ip route command lists several identiﬁers that pertain 
to OSPF. For example, the acronym “IA” refers to interarea OSPF routes, E1 refers to external 
type 1 routes, and E2 refers to external type 2 routes.
OSPF Conﬁguration
This section covers the core OSPF conﬁguration commands, along with the OSPF conﬁguration 
topics not already covered previously in the chapter. (If you happened to skip the earlier parts of 
this chapter, planning to review OSPF conﬁguration, make sure to go back and look at the earlier 
! Below, R4 is in a totally stubby area, with only one inter-area route.
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
O*IA 0.0.0.0/0 [110/1563] via 10.4.14.1, 00:11:59, Serial0/0.1
! R5, in a stubby area, has several inter-area routes, but none of the 
! external routes (e.g. 192.168.1.0). R5’s default points to R2.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
10.0.0.0/8 is variably subnetted, 7 subnets, 3 masks
O IA    10.3.13.0/24 [110/115] via 10.5.25.2, 13:45:49, Serial0.2
O IA    10.3.0.0/23 [110/125] via 10.5.25.2, 13:37:55, Serial0.2
O IA    10.1.1.0/24 [110/51] via 10.5.25.2, 13:45:49, Serial0.2
O IA    10.4.0.0/16 [110/1613] via 10.5.25.2, 13:45:49, Serial0.2
O*IA 0.0.0.0/0 [110/51] via 10.5.25.2, 13:45:49, Serial0.2
! Below, R5’s costs on its two interfaces to R1 and R2 are highlighted. Note that
! the default route’s metric (51) comes from the 50 below, plus an advertised
! cost of 1 in the summary (type 3) for default 0.0.0.0/0 generated by R2. R5
! simply chose to use the default route with the lower metric.
R5# sssshhhh    iiiipppp    oooossssppppffff    iiiinnnntttt    bbbbrrrriiiieeeeffff
Interface    PID   Area            IP Address/Mask    Cost  State Nbrs F/C
Se0.1        1     5               10.5.15.5/24       64    P2P   1/1
Se0.2        1     5               10.5.25.5/24       50    P2P   1/1
Et0          1     5               10.5.1.5/24        10    DR    0/0
! Next, R2 changes the cost of its advertised summary from 1 to 15.
R2# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)# rrrroooouuuutttteeeerrrr    oooossssppppffff    2222
R2(config-router)# aaaarrrreeeeaaaa    5555    ddddeeeeffffaaaauuuulllltttt----ccccoooosssstttt    11115555
! Below, R5’s metrics to both R1’s and R2’s default routes tie,
! so both are now in the routing table.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
! lines omitted for brevity
O*IA 0.0.0.0/0 [110/65] via 10.5.25.2, 00:00:44, Serial0.2
               [110/65] via 10.5.15.1, 00:00:44, Serial0.1
Example 10-7
Stub Area Example (Continued)

OSPF Conﬁguration     291
examples in the chapter. These examples cover OSPF stubby area conﬁguration, OSPF network 
types, plus OSPF neighbor and priority commands.)
Example 10-8 shows conﬁguration for the routers in Figure 10-6, with the following design goals 
in mind:
■
Proving that OSPF PIDs do not have to match on separate routers
■
Using the network command to match interfaces, thereby triggering neighbor discovery 
inside network 10.0.0.0 
■
Conﬁguring S1’s RID as 7.7.7.7
■
Setting priorities on the backbone LAN to favor S1 and S2 to become the DR/BDR
■
Conﬁguring a minimal dead interval of 1 second, with hello multiplier of 4, yielding a 
250-ms hello interval on the backbone LAN
Example 10-8
OSPF Conﬁguration Basics and OSPF Costs 
! R1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! R1 has been configured for a (minimal) 1-second dead interval, and 1/4-second 
! (250 ms) hello interval based on 4 Hellos per 1-second dead interval.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....1111    222255555555....222255555555....222255555555....0000
    iiiipppp    oooossssppppffff    ddddeeeeaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    mmmmiiiinnnniiiimmmmaaaallll    hhhheeeelllllllloooo----mmmmuuuullllttttiiiipppplllliiiieeeerrrr    4444
! R1 uses the same stub area configuration as in Example 10-7, with nnnneeeettttwwwwoooorrrrkkkk
! commands matching based on the first two octets. Note that the nnnneeeettttwwwwoooorrrrkkkk commands 
! place each interface into the correct area.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    aaaarrrreeeeaaaa    3333    nnnnssssssssaaaa    nnnnoooo----ssssuuuummmmmmmmaaaarrrryyyy
    aaaarrrreeeeaaaa    4444    ssssttttuuuubbbb    nnnnoooo----ssssuuuummmmmmmmaaaarrrryyyy
    aaaarrrreeeeaaaa    5555    ssssttttuuuubbbb
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    0000
    nnnneeeettttwwwwoooorrrrkkkk    11110000....3333....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    3333
    nnnneeeettttwwwwoooorrrrkkkk    11110000....4444....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    4444
    nnnneeeettttwwwwoooorrrrkkkk    11110000....5555....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    5555
! R2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! The R2 configuration also uses the Fast Hello feature, otherwise it
! would not match hello and dead intervals with R1. 
interface FastEthernet0/0
 ip address 10.1.1.2 255.255.255.0
    iiiipppp    oooossssppppffff    ddddeeeeaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    mmmmiiiinnnniiiimmmmaaaallll    hhhheeeelllllllloooo----mmmmuuuullllttttiiiipppplllliiiieeeerrrr    4444
! Below, R2 uses a different PID than R1, but the PID is only used locally. 
! R1 and R2 will become neighbors. Also, all routers in a stubby area must be
! configured to be that type of stubby area; R2 does that for area 5 below.
continues

292     Chapter 10: OSPF
OSPF Costs and Clearing the OSPF Process
Example 10-9 highlights a few details about clearing (restarting) the OSPF process, and looks at 
changes to OSPF costs. This example shows the following sequence:
1.
R3’s OSPF process is cleared, causing all neighbors to fail and restart.
2.
R3’s log-adjacency-changes detail conﬁguration command (under router ospf) causes more 
detailed neighbor state change messages to appear. 
rrrroooouuuutttteeeerrrr    oooossssppppffff    2222
    aaaarrrreeeeaaaa    5555    ssssttttuuuubbbb
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    0000
    nnnneeeettttwwwwoooorrrrkkkk    11110000....5555....22225555....2222    0000....0000....0000....0000    aaaarrrreeeeaaaa    5555
! R3 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Note that R3’s aaaarrrreeeeaaaa    2222    nnnnssssssssaaaa    nnnnoooo----ssssuuuummmmmmmmaaaarrrryyyy command must match the settings
! on R1. Likewise, below, R4’s stub settings must match R1’s settings for area 4.
.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    aaaarrrreeeeaaaa    3333    nnnnssssssssaaaa    nnnnoooo----ssssuuuummmmmmmmaaaarrrryyyy
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    3333
! R4 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    aaaarrrreeeeaaaa    4444    ssssttttuuuubbbb    nnnnoooo----ssssuuuummmmmmmmaaaarrrryyyy
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    4444
! S1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! S1 matches hello and dead intervals on the LAN. Also, it sets its OSPF 
! priority to 255, the maximum value, hoping to become the DR.
iiiinnnntttteeeerrrrffffaaaacccceeee    VVVVllllaaaannnn1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....3333    222255555555....222255555555....222255555555....0000
    iiiipppp    oooossssppppffff    ddddeeeeaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    mmmmiiiinnnniiiimmmmaaaallll    hhhheeeelllllllloooo----mmmmuuuullllttttiiiipppplllliiiieeeerrrr    4444
    iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy    222255555555
! Below, S1 sets its RID manually, removing any reliance on an interface address.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrroooouuuutttteeeerrrr----iiiidddd    7777....7777....7777....7777
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....0000....0000    0000....0000....222255555555....222255555555    aaaarrrreeeeaaaa    0000
! S2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Below, S2 also matches timers, and sets its priority to 1 less than S1, hoping
! to be the BDR.
iiiinnnntttteeeerrrrffffaaaacccceeee    VVVVllllaaaannnn1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....1111....4444    222255555555....222255555555....222255555555....0000
    iiiipppp    oooossssppppffff    ddddeeeeaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    mmmmiiiinnnniiiimmmmaaaallll    hhhheeeelllllllloooo----mmmmuuuullllttttiiiipppplllliiiieeeerrrr    4444
    iiiipppp    oooossssppppffff    pppprrrriiiioooorrrriiiittttyyyy    222255554444
!
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
Example 10-8
OSPF Conﬁguration Basics and OSPF Costs (Continued)

OSPF Conﬁguration     293
3.
R5 has tuned its cost settings with the ip ospf cost 50 interface subcommand under S0.2 in 
order to prefer R2 over R1 for reaching the core.
4.
R2 is conﬁgured to use a new reference bandwidth, changing its cost calculation per interface.
Example 10-9
Changing RIDs, Clearing OSPF, and Cost Settings 
R3# cccclllleeeeaaaarrrr    iiiipppp    oooossssppppffff    pppprrrroooocccceeeessssssss
Reset ALL OSPF processes? [no]: yyyy
! Above, all OSPF processes are cleared on R3. R3 has the lllloooogggg----aaaaddddjjjjaaaacccceeeennnnccccyyyy----cccchhhhaaaannnnggggeeeessss
!    ddddeeeettttaaaaiiiillll command configured, so that a message is generated at each state 
! change, as shown below for neighbor R33 (RID 192.168.1.1). (Messages for
! other routers are omitted.)
00:02:46: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from FULL to DOWN, 
  Neighbor Down: Interface down or detached
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from DOWN to INIT, 
  Received Hello
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from INIT to 2WAY, 
  2-Way Received
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from 2WAY to EXSTART, 
  AdjOK?
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from EXSTART 
  to EXCHANGE, Negotiation Done
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from EXCHANGE 
  to LOADING, Exchange Done
00:02:53: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.1.1 on Ethernet0/0 from LOADING to FULL, 
  Loading Done
! Next R5 has costs of 50 and 64, respectively, on interfaces s0.2 and s0.1.
R5# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    bbbbrrrriiiieeeeffff
Interface    PID   Area            IP Address/Mask    Cost  State Nbrs F/C
Se0.2        1     5               10.5.25.5/24       50    P2P   1/1
Se0.1        1     5               10.5.15.5/24       64    P2P   1/1
Et0          1     5               10.5.1.5/24        10    DR    0/0
! Below, S0.1’s cost was based on bandwidth of 64, using formula 108 / bandwidth,
! with bandwidth in bits/second. 
R5# sssshhhh    iiiinnnntttt    ssss    0000....1111
Serial0.1 is up, line protocol is up 
  Hardware is HD64570
  Internet address is 10.5.15.5/24
  MTU 1500 bytes, BW 1544 Kbit, DLY 20000 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation FRAME-RELAY
  Last clearing of "show interface" counters never
! Next, R2’s interface costs are shown, including the minimum cost 1 on fa0/0. 
R2# sssshhhhoooo    iiiipppp    oooossssppppffff    iiiinnnntttt    bbbbrrrriiiieeeeffff
Interface    PID   Area            IP Address/Mask    Cost  State Nbrs F/C
Fa0/0        2     0               10.1.1.2/24        1     BDR   3/3
Se0/0.5      2     5               10.5.25.2/24       64    P2P   1/1
! Below, R2 changes its reference bandwidth from the default of 100 Mbps to 
! 10,000 Mbps. That in turn changes R2’s calculated cost values to be 100 times 
continues

294     Chapter 10: OSPF
While Examples 10-8 and 10-9 show some details, the following list summarizes how IOS 
chooses OSPF interface costs:
1.
Set the cost per neighbor using the neighbor neighbor cost value command. (This is valid 
only on OSPF network types that allow neighbor commands.)
2.
Set the cost per interface using the ip ospf cost value interface subcommand.
3.
Allow cost to default based on interface bandwidth and the OSPF Reference Bandwidth (Ref-
BW) (default 108). The formula is Ref-BW / bandwidth (bps).
4.
Default based on bandwidth, but change Ref-BW using the command ospf auto-cost 
reference-bandwidth value command within the OSPF process.
The only slightly tricky part of the cost calculation math is to keep the units straight, because the 
IOS interface bandwidth is kept in kbps, and the auto-cost reference-bandwidth command’s 
units are Mbps. For instance, on R5 in Example 10-9, the cost is calculated as 100 Mbps divided 
by 1544 kbps, where 1544 kbps is equal to 1.544 Mbps. The result is rounded down to the nearest 
integer, 64 in this case. On R2’s fa0/0, the bandwidth is 100,000 kbps, or 100 Mbps, making the 
calculation yield a cost of 1. After changing the reference bandwidth to 10,000, which means 
10,000 Mbps, R2’s calculated costs were 100 times larger.
! larger than before. Note that IOS allows this setting to differ on the routers,
! but recommends against it.
R2# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R2(config)# rrrroooouuuutttteeeerrrr    oooossssppppffff    2222
R2(config-router)# aaaauuuuttttoooo----ccccoooosssstttt    rrrreeeeffffeeeerrrreeeennnncccceeee----bbbbaaaannnnddddwwwwiiiiddddtttthhhh    11110000000000000000
% OSPF: Reference bandwidth is changed. 
        Please ensure reference bandwidth is consistent across all routers.
R2# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    bbbbrrrriiiieeeeffff
Interface    PID   Area            IP Address/Mask    Cost  State Nbrs F/C
Fa0/0        2     0               10.1.1.2/24        100   BDR   3/3
Se0/0.5      2     5               10.5.25.2/24       6476  P2P   1/1
NOTE
When choosing the best routes to reach a subnet, OSPF also considers whether a route 
is an intra-area route, inter-area route, E1 route, or E2 route. OSPF prefers intra-area over all 
the rest, then interarea, then E1, and ﬁnally E2 routes. Under normal circumstances, routes to a 
single subnet should all be the same type; however, it is possible to have multiple route paths to 
reach a single subnet in the OSPF SPF tree, but with some of these routes being a different type. 
Example 11-7 in Chapter 11 demonstrates this.
Example 10-9
Changing RIDs, Clearing OSPF, and Cost Settings (Continued)
KEY 
POINT

OSPF Conﬁguration     295
Alternatives to the OSPF Network Command
As of Cisco IOS Software Release 12.3(11)T, OSPF conﬁguration can completely omit the 
network command, instead relying on the ip ospf process-id area area-id interface subcommand. 
This new command enables OSPF on the interface and selects the area. For instance, on R3 in 
Example 10-8, the network 10.3.0.0 0.0.255.255 area 3 command could have been deleted and 
replaced with the ip ospf 1 area 3 command under S0/0.1 and e0/0.
The network and ip ospf area commands have some minor differences when secondary IP 
addresses are used. With the network command, OSPF advertises stub networks for any 
secondary IP subnets that are matched by the command. (“Secondary subnet” is jargon that refers 
to the subnet in which a secondary IP address resides.) The ip ospf area interface subcommand 
causes any and all secondary subnets on the interface to be advertised as stub networks—unless 
the optional secondaries none parameter is included at the end of the command. 
OSPF Filtering
Intra-routing–protocol ﬁltering presents some special challenges with link-state routing protocols 
like OSPF. Link-state protocols do not advertise routes—they advertise topology information. 
Also, SPF loop prevention relies on each router in the same area having an identical copy of the 
LSDB for that area. Filtering could conceivably make the LSDBs differ on different routers, 
causing routing irregularities.
IOS supports three variations of what could loosely be categorized as OSPF route ﬁltering. These 
three major types of OSPF ﬁltering are as follows:
■
Filtering routes, not LSAs—Using the distribute-list in command, a router can ﬁlter the 
routes its SPF process is attempting to add to its routing table, without affecting the LSDB.
■
ABR type 3 LSA ﬁltering—A process of preventing an ABR from creating particular type 3 
summary LSAs.
■
Using the area range no-advertise option—Another process to prevent an ABR from 
creating speciﬁc type 3 summary LSAs.
Each of these three topics is discussed in sequence in the next few sections.
Filtering Routes Using the distribute-list Command
For RIP and EIGRP, the distribute-list command can be used to ﬁlter incoming and outgoing 
routing updates. The process is straightforward, with the distribute-list command referring to 
ACLs or preﬁx lists. With OSPF, the distribute-list command ﬁlters what ends up in the IP routing 
table, and on only the router on which the distribute-list command is conﬁgured. 

296     Chapter 10: OSPF
The following rules govern the use of distribute lists for OSPF, when not used for route 
redistribution with other routing protocols:
■
Distribute lists can be used only for inbound ﬁltering, because ﬁltering any outbound OSPF 
information would mean ﬁltering LSAs, not routes. 
■
The inbound logic does not ﬁlter inbound LSAs; it instead ﬁlters the routes that SPF chooses 
to add to that one router’s routing table.
■
If the distribute list includes the incoming interface parameter, the incoming interface is 
checked as if it were the outgoing interface of the route.
That last bullet could use a little clariﬁcation. For example, if R2 learns routes via RIP or EIGRP 
updates that enter R2’s s0/0 interface, those routes typically use R2’s s0/0 interface as the outgoing 
interface of the routes. The OSPF LSAs may have been ﬂooded into a router on several interfaces, 
so an OSPF router checks the outgoing interface of the route as if it had learned about the routes 
via updates coming in that interface.
Example 10-10 shows an example of two distribute lists on R5 from Figure 10-6. The example 
shows two options to achieve the same goal. In this case, R5 will ﬁlter the route to 10.4.8.0/24 via 
R5’s S0.2 subinterface (to R2), instead using the route learned from R1. Later, it uses a route map 
to achieve the same result.
NOTE
The distribute-list command, when used for route distribution between OSPF and 
other routing protocols, does control what enters and leaves the LSDB. Chapter 11 covers more 
on route redistribution.
Example 10-10
Filtering Routes with OSPF distribute-list Commands on R5 
! R5 has a route to 10.4.8.0/24 through R2 (10.5.25.2, s0.2)
R5# sssshhhh    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnnccccllll    11110000....4444....8888....0000
O IA    10.4.8.0/24 [110/1623] via 10.5.25.2, 00:00:28, Serial0.2
! Next, the ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt command refers to a prefix list that permits 10.4.8.0
!    /24.
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----11110000----4444----8888----0000    sssseeeeqqqq    5555    ddddeeeennnnyyyy    11110000....4444....8888....0000////22224444
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----11110000----4444----8888----0000    sssseeeeqqqq    11110000    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000    lllleeee    33332222
!!!!
RRRRoooouuuutttteeeerrrr    oooossssppppffff    1111
    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx    pppprrrreeeeffffiiiixxxx----11110000----4444----8888----0000    iiiinnnn    SSSSeeeerrrriiiiaaaallll0000....2222
! Below, note that R5’s route through R2 is gone, and instead R5 uses its route
! through R1 (s0.1). But the LSDB is unchanged!
R5# sssshhhh    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff |     iiiinnnnccccllll    11110000....4444....8888....0000
O IA    10.4.8.0/24 [110/1636] via 10.5.15.1, 00:00:03, Serial0.1
! Not shown: the earlier ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt command is removed.
! Below, note that the ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt command with the rrrroooouuuutttteeee----mmmmaaaapppp option does not
! have an option to refer to an interface, so the route map itself has been
! configured to refer to the advertising router’s RID (2.2.2.2).
KEY 
POINT

OSPF Conﬁguration     297
Example 10-10 shows only two ways to ﬁlter the routes. The distribute-list route-map option, 
added in Cisco IOS Software Release 12.2(15)T, allows a much greater variety of matching 
parameters, and much more detailed logic with route maps. For instance, this example showed 
matching a preﬁx as well as the RID that advertised the LSA to R5, namely 2.2.2.2 (R2). Refer to 
Chapter 11 for a more complete review of route maps and the match command.
OSPF ABR LSA Type 3 Filtering
ABRs do not forward type 1 and 2 LSAs from one area into another, but instead create type 3 LSAs 
for each subnet deﬁned in the type 1 and 2 LSAs. Type 3 LSAs do not contain detailed information 
about the topology of the originating area; instead, each type 3 LSA represents a subnet, and a cost 
from the ABR to that subnet. The earlier section “LSA Type 3 and Inter-Area Costs” covers the 
details and provides an example.
The OSPF ABR type 3 LSA ﬁltering feature allows an ABR to ﬁlter type 3 LSAs at the point where 
the LSAs would normally be created. By ﬁltering at the ABR, before the type 3 LSA is injected 
into another area, the requirement for identical LSDBs inside the area can be met, while still 
ﬁltering LSAs. 
To conﬁgure type 3 LSA ﬁltering, you use the area number ﬁlter-list preﬁx name in | out 
command under router ospf. The referenced preﬁx list is used to match the subnets and masks to 
be ﬁltered. The area number and the in | out option of the area ﬁlter-list command work together, 
as follows:
■
When in is conﬁgured, IOS ﬁlters preﬁxes going into the conﬁgured area.
■
When out is conﬁgured, IOS ﬁlters preﬁxes coming out of the conﬁgured area.
RRRRoooouuuutttteeeerrrr    oooossssppppffff    1111
ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    rrrroooouuuutttteeee----mmmmaaaapppp    lllloooosssseeee----11110000----4444----8888----0000    iiiinnnn 
! Next, ACL 48 matches the 10.4.8.0/24 prefix, with ACL 51 matching R2’s RID. 
aaaacccccccceeeessssssss----lllliiiisssstttt    44448888    ppppeeeerrrrmmmmiiiitttt    11110000....4444....8888....0000
aaaacccccccceeeessssssss----lllliiiisssstttt    55551111    ppppeeeerrrrmmmmiiiitttt    2222....2222....2222....2222
! Below, the route map matches the prefix (based on ACL 48) and the advertising
! RID (ACL 51, matching R2’s 2.2.2.2 RID). Clause 20 permits all other prefixes.
route-map lose-10-4-8-0 deny 10
mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    44448888
mmmmaaaattttcccchhhh    iiiipppp    rrrroooouuuutttteeee----ssssoooouuuurrrrcccceeee    55551111
rrrroooouuuutttteeee----mmmmaaaapppp    lllloooosssseeee----11110000----4444----8888----0000    ppppeeeerrrrmmmmiiiitttt    22220000
! Above, note the same results as the previous distribute list.
R5# sssshhhh    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnnccccllll    11110000....4444....8888....0000
O IA    10.4.8.0/24 [110/1636] via 10.5.15.1, 00:01:18, Serial0.1
Example 10-10
Filtering Routes with OSPF distribute-list Commands on R5 (Continued)

298     Chapter 10: OSPF
Example 10-11 should clarify the basic operation. ABR R1 will use two alternative area ﬁlter-list 
commands, both to ﬁlter subnet 10.3.2.0/23, the subnet that exists between R3 and R33 in 
Figure 10-6. Remember that R1 is connected to areas 0, 3, 4, and 5. The ﬁrst area ﬁlter-list 
command shows ﬁltering the LSA as it goes out of area 3; as a result, R2 will not inject the LSA 
into any of the other areas. The second case shows the same subnet being ﬁltered going into 
area 0, meaning that the type 3 LSA for that subnet still gets into the area 4 and 5 LSDBs. 
Example 10-11
Type 3 LSA Filtering on R1 with the area ﬁlter-list Command 
! The command lists three lines of extracted output. One line is for the 
! type 3 LSA in area 0, one is for area 4, and one is for area 5.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa    ssssuuuummmmmmmmaaaarrrryyyy | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
       Link State ID: 10.3.2.0 (summary Network Number)
       Link State ID: 10.3.2.0 (summary Network Number)
       Link State ID: 10.3.2.0 (summary Network Number)
! Below, the two-line prefix list denies subnet 10.3.2.0/23, and then permits
! all others.
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    ffffiiiilllltttteeeerrrr----ttttyyyyppppeeee3333----11110000----3333----2222----0000    sssseeeeqqqq    5555    ddddeeeennnnyyyy    11110000....3333....2222....0000////22223333
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    ffffiiiilllltttteeeerrrr----ttttyyyyppppeeee3333----11110000----3333----2222----0000    sssseeeeqqqq    11110000    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000    lllleeee    33332222
Next, the aaaarrrreeeeaaaa    ffffiiiilllltttteeeerrrr----lllliiiisssstttt command filters type 3 LSAs going out of area 3.
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
R1(config-router)# aaaarrrreeeeaaaa    3333    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx    ffffiiiilllltttteeeerrrr----ttttyyyyppppeeee3333----11110000----3333----2222----0000    oooouuuutttt
R1(config-router)# ^^^^ZZZZ
! Below, R1 no longer has any type 3 LSAs, in areas 0, 4, and 5. For 
! comparison, this command was issued a few commands ago, listing 1 line
! of output for each of the other 3 areas besides area 3.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
! Below, the previous aaaarrrreeeeaaaa    ffffiiiilllltttteeeerrrr----lllliiiisssstttt command is replaced by the next command
! below, which filters type 3 LSAs going into area 0, with the same prefix list.
aaaarrrreeeeaaaa    0000    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx    ffffiiiilllltttteeeerrrr----ttttyyyyppppeeee3333----11110000----3333----2222----0000    iiiinnnn
! Next, only 2 type 3 LSAs for 10.3.2.0 are shown—the ones in areas 4 and 5.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
  Link State ID: 10.3.2.0 (summary Network Number)
  Link State ID: 10.3.2.0 (summary Network Number)
! Below, the configuration for filtering type 3 LSAs with the aaaarrrreeeeaaaa    rrrraaaannnnggggeeee command,
! which is explained following this example. The existing aaaarrrreeeeaaaa    ffffiiiilllltttteeeerrrr----lllliiiisssstttt 
! commands from earlier in this chapter have been removed at this point.
R1(config-router)# aaaarrrreeeeaaaa    3333    rrrraaaannnnggggeeee    11110000....3333....2222....0000    222255555555....222255555555....222255554444....0000    nnnnooootttt----aaaaddddvvvveeeerrrrttttiiiisssseeee
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa    ssssuuuummmmmmmmaaaarrrryyyy | iiiinnnncccclllluuuuddddeeee    11110000....3333....2222....0000
R1#

OSPF Conﬁguration     299
Filtering Type 3 LSAs with the area range Command
The third method to ﬁlter OSPF routes is to ﬁlter type 3 LSAs at an ABR using the area range 
command. The area range command performs route summarization at ABRs, telling a router to 
cease advertising smaller subnets in a particular address range, instead creating a single type 3 
LSA whose address and preﬁx encompass the smaller subnets.
When the area range command includes the not-advertise keyword, not only are the smaller 
component subnets not advertised as type 3 LSAs, the summary route is not advertised as a type 
3 LSA either. As a result, this command has the same effect as the area ﬁlter-list command with 
the out keyword, ﬁltering the LSA from going out to any other areas. An example area range 
command is shown at the end of Example 10-11.
Virtual Link Conﬁguration
OSPF requires that each non-backbone area be connected to the backbone area (area 0). OSPF also 
requires that the routers in each area have a contiguous intra-area path to the other routers in the 
same area, because without that path, LSA ﬂooding inside the area would fail. However, in some 
designs, meeting these requirements might be a challenge. You can use OSPF virtual links to 
overcome these problems. 
For instance, in the top part of Figure 10-10, area 33 connects only to area 3, and not to area 0. 
Figure 10-10
The Need for Virtual Links
Area 33
R4
Area 3
Virtual Link – Transit Area 3
Area 4
Area 0
S1
Virtual Link
Area 4’s Failed Links
have a          on them
R33
R3
R1
R7
R8
R6
R5

300     Chapter 10: OSPF
One straightforward solution to area 33’s lack of connection to the backbone area would be to 
combine areas 3 and 33 into a single area, but OSPF virtual links could solve the problem as well. 
An OSPF virtual link allows a pair of routers to tunnel OSPF packets inside IP packets, across the 
IP network, to some other router that is not on the same data link. A virtual link between R3 and 
R1 gives area 33 a connection to area 0. Also note that R3 becomes an ABR, with a full copy of 
area 0’s LSDB entries.
While the top part of Figure 10-10 simply shows a possibly poor OSPF area design, the lower part 
shows what could happen just because of a particular set of link failures. The ﬁgure shows several 
failed links that result in a partitioned area 4. As a result of the failures, R7 and R8 have no area 4 
links connecting to the other three routers in area 4. A virtual link can be used to connect R4 and 
R8—the requirement being that both R4 and R8 connect to a common and working area—
recombining the partitions through the virtual link. (A better solution than the virtual link in this 
particular topology might be to trunk on R4 and R8, create a small subnet through the LAN switch, 
and put it in area 4.)
Example 10-12 demonstrates a virtual link conﬁguration between R33 and R1, as shown in 
Figure 10-10. Note that the virtual link cannot pass through a transit area that is a stubby area, 
so area 3 has been changed to no longer be a stubby area.
Example 10-12
Virtual Link Between R3 and R1 
! R1 has not learned subnet 10.3.2.0 yet, because area 33 has no link to area 0.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnnccccllll    11110000....3333....2222....0000
R1#
! the aaaarrrreeeeaaaa    vvvviiiirrrrttttuuuuaaaallll    lllliiiinnnnkkkk commands point to the other router’s RID, and the 
! transit area over which the virtual link exists—area 3 in this case. Note that
! timers can be set on the aaaarrrreeeeaaaa    vvvviiiirrrrttttuuuuaaaallll----lllliiiinnnnkkkk command, as well as authentication.
! It is important when authenticating virtual links to remember that 
! the virtual links themselves are in area 0.
! R1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
        aaaarrrreeeeaaaa    3333    vvvviiiirrrrttttuuuuaaaallll----lllliiiinnnnkkkk    3333....3333....3333....3333
! R3 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
        aaaarrrreeeeaaaa    3333    vvvviiiirrrrttttuuuuaaaallll----lllliiiinnnnkkkk    1111....1111....1111....1111
! Below, the status of the virtual link is listed.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    vvvviiiirrrrttttuuuuaaaallll----lllliiiinnnnkkkkssss 
Virtual Link OSPF_VL0 to router 3.3.3.3 is up
  Run as demand circuit
  DoNotAge LSA allowed.
  Transit area 3, via interface Serial0/0.3, Cost of using 64
  Transmit Delay is 1 sec, State POINT_TO_POINT,

OSPF Conﬁguration     301
Conﬁguring OSPF Authentication
One of the keys to keeping OSPF authentication conﬁguration straight is to remember that it 
differs signiﬁcantly with RIPv2 and EIGRP, although some of the concepts are very similar. The 
basic rules for conﬁguring OSPF authentication are as follows:
■
Three types are available: type 0 (none), type 1 (clear text), and type 2 (MD5).
■
Authentication is enabled per interface using the ip ospf authentication interface 
subcommand.
■
The default authentication is type 0 (no authentication).
■
The default can be redeﬁned using the area authentication subcommand under router 
ospf.
■
The keys are conﬁgured as interface subcommands.
■
Multiple keys are allowed per interface; if conﬁgured, OSPF sends multiple copies of each 
message, one for each key. 
Table 10-7 lists the three OSPF authentication types, along with the commands to enable each 
type, and the commands to deﬁne the authentication keys. Note that the three authentication types 
can be seen in the messages generated by the debug ip ospf adjacency command.
  Timer intervals configured, Hello 10, Dead 40, Wait 40, Retransmit 5
     Hello due in 00:00:02
     Adjacency State FULL (Hello suppressed)
     Index 3/6, retransmission queue length 0, number of retransmission 1
     First 0x0(0)/0x0(0) Next 0x0(0)/0x0(0)
     Last retransmission scan length is 1, maximum is 1
     Last retransmission scan time is 0 msec, maximum is 0 msec
! Because R1 and R3 are also sharing the same link, there is a neighbor
! relationship in area 3 that has been seen in the other examples, listed off 
! interface s0/0.3. The new virtual link neighbor relationship is shown as well,
! with interface VL0 listed.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    nnnneeeeiiii
! Lines omitted for brevity
Neighbor ID     Pri   State           Dead Time   Address         Interface
3.3.3.3           0   FULL/ —         —        10.3.13.3        OSPF_VL0
3.3.3.3           0   FULL/ —       00:00:10    10.3.13.3        Serial0/0.3
! Below, subnet 10.3.2.0/23, now in area 33, is learned by R1 over the Vlink.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff | iiiinnnnccccllll    11110000....3333....2222....0000
O IA    10.3.2.0/23 [110/75] via 10.3.13.3, 00:00:10, Serial0/0.3
Example 10-12
Virtual Link Between R3 and R1 (Continued)
KEY 
POINT

302     Chapter 10: OSPF
Example 10-13 (again based on Figure 10-6) shows examples of type 1 and type 2 authentication 
conﬁguration routers R1 and R2. (Note that S1 and S2 have been shut down for this example, but 
they would need the same conﬁguration as shown on R1 and R2.) In this example, both R1 and 
R2 use their fa0/0 interfaces, so their authentication conﬁguration will be identical. As such, the 
example shows only the conﬁguration on R1.
Example 10-13 shows two working examples of OSPF authentication, neither of which uses 
the area number authentication under router ospf. Some texts imply that the area 
Table 10-7
OSPF Authentication Types
KEY 
POINT
Type
Meaning
Enabling Interface 
Subcommand
Authentication Key Conﬁguration 
Interface Subcommand
0
None
ip ospf authentication null
—
1
Clear text
ip ospf authentication
ip ospf authentication-key key-value
2
MD5
ip ospf authentication 
message-digest
ip ospf message-digest-key key-number 
md5 key-value
Example 10-13
OSPF Authentication Using Only Interface Subcommands
! The two iiiipppp    oooossssppppffff commands are the same on R1 and R2. The first enables
! type 1 authentication, and the other defines the simple text key.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    oooossssppppffff    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn
    iiiipppp    oooossssppppffff    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn----kkkkeeeeyyyy    kkkkeeeeyyyy----tttt1111
! Below, the neighbor relationship formed, proving that authentication works.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    nnnneeeeiiiigggghhhhbbbboooorrrr    ffffaaaa    0000////0000
Neighbor ID     Pri   State           Dead Time   Address         Interface
2.2.2.2           1   FULL/BDR        00:00:37    10.1.1.2        FastEthernet0/0
! Next, each interface’s OSPF authentication type can be seen in the last line
! or two in the output of the sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttteeeerrrrffffaaaacccceeee command.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    ffffaaaa    0000////0000
! Lines omitted for brevity
  Simple password authentication enabled
! Below, both R1 and R2 change to use type 2 authentication. Note that the key 
! must be defined with the iiiipppp    oooossssppppffff    mmmmeeeessssssssaaaaggggeeee----ddddiiiiggggeeeesssstttt----kkkkeeeeyyyy interface subcommand. Key 
! chains cannot be used.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000
    iiiipppp    oooossssppppffff    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    mmmmeeeessssssssaaaaggggeeee----ddddiiiiggggeeeesssstttt
    iiiipppp    oooossssppppffff    mmmmeeeessssssssaaaaggggeeee----ddddiiiiggggeeeesssstttt----kkkkeeeeyyyy    1111    mmmmdddd5555    kkkkeeeeyyyy----tttt2222
! Below, the command confirms type 2 (MD5) authentication, key number 1.
R1# sssshhhhoooowwww    iiiipppp    oooossssppppffff    iiiinnnntttt    ffffaaaa    0000////0000 | bbbbeeeeggggiiiinnnn    aaaauuuutttthhhh
! Lines omitted for brevity
Message digest authentication enabled
Youngest key id is 1

OSPF Conﬁguration     303
authentication command is required—in fact, it was required prior to Cisco IOS Software 
Release 12.0. In later IOS releases, the area authentication command simply tells the router to 
change that router’s default OSPF authentication type for all interfaces in that area. Table 10-8 
summarizes the effects and syntax of the area authentication router subcommand. 
The keys themselves are kept in clear text in the conﬁguration, unless you add the service 
password-encryption global command to the conﬁguration.
The last piece of authentication conﬁguration relates to OSPF virtual links. Because virtual links 
have no underlying interface on which to conﬁgure authentication, authentication is conﬁgured on 
the area virtual-link command itself. Table 10-9 shows the variations of the command options for 
conﬁguring authentication on virtual links. Note that beyond the base area number virtual-link 
rid command, the parameters use similar keywords as compared with the equivalent interface 
subcommands.
OSPF Stub Router Conﬁguration
Deﬁned in RFC 3137, and ﬁrst supported in Cisco IOS Software Release 12.2(4)T, the OSPF stub 
router feature—not to be confused with stubby areas—allows a router to either temporarily or 
permanently be prevented from becoming a transit router. In this context, a transit router is simply 
Table 10-8
Effect of the area authentication Command on OSPF Interface Authentication Settings
KEY 
POINT
area authentication Command
Interfaces in That Area Default 
to Use…
<no command>
Type 0
area num authentication
Type 1
area num authentication message-digest
Type 2
Table 10-9
Conﬁguring OSPF Authentication on Virtual Links
KEY 
POINT
Type
Command Syntax for Virtual Links
0
area num virtual-link router-id authentication null
1
area num virtual-link router-id authentication authentication-key key-value
2
area num virtual-link router-id authentication message-digest message-digest-key 
key-num md5 key-value
NOTE
OSPF authentication is a good place for tricky CCIE lab questions—ones that can be 
solved in a few minutes if you know all the intricacies. 

304     Chapter 10: OSPF
one to which packets are forwarded, with the expectation that the transit router will forward the 
packet to yet another router. Conversely, non-transit routers only forward packets to and from 
locally attached subnets. 
Figure 10-11 shows one typical case in which a stub router might be useful.
Figure 10-11
OSPF Stub Router
Both ASBR1 and ASBR2 advertise defaults into the network, expecting to have the capability 
to route to the Internet through BGP-learned routes. In this case, ASBR2 is already up, fully 
converged. However, if ASBR1 reloads, when it comes back up, OSPF is likely to converge faster 
than BGP. As a result, ASBR1 will advertise its default route, and OSPF routers may send packets 
to ASBR1, but ASBR1 will end up discarding the packets until BGP converges.
Using the stub router feature on the ASBRs solves the problem by making them advertise inﬁnite 
metric routes (cost 16,777,215) for any transit routes—either for a conﬁgured time period or until 
BGP convergence is complete. To do so, under router ospf, the ASBRs would use either the max-
metric router-lsa on-startup announce-time command or the max-metric router-lsa on-startup 
wait-for-bgp command. With the ﬁrst version, the actual time period (in seconds) can be set. With 
the second, OSPF waits until BGP signals that convergence is complete or until 10 minutes pass, 
whichever comes ﬁrst.
Default Routes
Internet
BGP
BGP
ASBR1 Come Up:
OSPF Convergence: 1 minute
BGP Convergence: 5 minutes
2
OSPF and BGP
Already Converged
1
ABR1
ASBR1
ASBR2
ABR2

Foundation Summary     305
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with a Key Point icon.
Table 10-10 lists some of the key protocols regarding OSPF. 
Table 10-11 lists some of the most popular IOS commands related to the topics in this chapter. 
Also, refer to Tables 10-7 through 10-9 for references to OSPF authentication commands.
Table 10-10
Protocols and Corresponding Standards for Chapter 10
Name
Standard
OSPF Version 2
RFC 2328
The OSPF Opaque LSA Option
RFC 2370
The OSPF Not-So-Stubby Area (NSSA) Option
RFC 3101
OSPF Stub Router Advertisement
RFC 3137
Trafﬁc Engineering (TE) Extensions to OSPF Version 2
RFC 3630
Table 10-11
Command Reference for Chapter 10 
Command
Command Mode and Description
router ospf process-id 
Global conﬁg; puts user in OSPF conﬁguration mode for that 
PID.
network ip-address [wildcard-mask] 
area area
OSPF conﬁg mode; deﬁnes matching parameters, compared 
to interface IP addresses, to pick interfaces on which to 
enable OSPF.
ip ospf process-id area area-id 
[secondaries none]
Interface conﬁg mode; alternative to the network command 
for enabling OSPF on an interface.
neighbor ip-address [priority number] 
[poll-interval seconds] 
[cost number] [database-ﬁlter all]
OSPF conﬁg mode; used when neighbors must be deﬁned, it 
identiﬁes the neighbor’s IP address, priority, cost, and poll 
interval. 
auto-cost reference-bandwidth ref-bw
OSPF conﬁg mode; changes the numerator in the formula to 
calculate interface cost for all OSPF interfaces on that router.
continues

306     Chapter 10: OSPF
Command
Command Mode and Description
router-id ip-address
OSPF conﬁg mode; statically sets the router ID.
ospf log-neighbor-changes [detail]
EIGRP subcommand; displays log messages when neighbor 
status changes. On by default.
passive-interface [default] 
{interface-type interface-number}
OSPF conﬁg mode; causes OSPF to stop sending Hellos on the 
speciﬁed interface. OSPF will still advertise the subnet as a 
stub network.
area area-id stub [no-summary]
OSPF conﬁg mode; sets the area type to stub or totally 
stubby.
area area-id nssa [no-redistribution] 
[default-information-originate 
[metric] [metric-type]] [no-summary]
OSPF conﬁg mode; sets the area type to NSSA or totally 
NSSA.
area area-id default-cost cost
OSPF conﬁg mode; sets the cost of default route created by 
ABRs and sent into stubby areas.
area area-id nssa translate type7 
suppress-fa
OSPF conﬁg mode; sets an NSSA ABR to set the forwarding 
address to 0.0.0.0 for the type 5 LSAs it translates from type 
7.
area area-id range ip-address mask 
[advertise | not-advertise] [cost cost]
OSPF conﬁg mode; summarizes routes into a larger preﬁx at 
ABRs. Optionally ﬁlters type 3 LSAs (not-advertise option).
area {area-id} ﬁlter-list preﬁx {preﬁx-
list-name in | out}
OSPF conﬁg mode; ﬁlters type 3 LSA creation at ABR.
distribute-list [ACL] | [route-map 
map-tag] in [int-type | int-number]
OSPF conﬁg mode; deﬁnes ACL or preﬁx list to ﬁlter what 
OSPF puts into the routing table.
area area-id virtual-link router-id 
[authentication [message-digest | 
null]] [hello-interval seconds] 
[retransmit-interval seconds] 
[transmit-delay seconds] [dead-
interval seconds] [[authentication-
key key] | [message-digest-key key-id 
md5 key]]
OSPF conﬁg mode; creates a virtual link, with typical 
interface conﬁguration settings to overcome fact that the link 
is virtual.
ip ospf hello-interval seconds
Interface subcommand; sets the interval for periodic Hellos. 
ip ospf dead-interval {seconds | 
minimal hello-multiplier multiplier}
Interface subcommand; deﬁnes the dead interval, or 
optionally the minimal dead interval of 1 second.
Table 10-11
Command Reference for Chapter 10 (Continued)

Foundation Summary     307
Command
Command Mode and Description
ip ospf name-lookup
Global command; causes the router to use DNS to correlate 
RIDs to host names for show command output.
ip ospf cost interface-cost
Interface subcommand; sets the cost.
ip ospf mtu-ignore
Interface subcommand; tells the router to ignore the check for 
equal MTUs that occurs when sending DD packets.
ip ospf network {broadcast | non-
broadcast | {point-to-multipoint 
[non-broadcast] | point-to-point}}
Interface subcommand; sets the OSPF network type on an 
interface.
ip ospf priority number-value
Interface subcommand; sets the OSPF priority on an 
interface.
ip ospf retransmit-interval seconds
Interface subcommand; sets the time between LSA 
transmissions for adjacencies belonging to an interface.
ip ospf transmit-delay seconds
Interface subcommand; deﬁnes the estimated time expected 
for the transmission of an LSU.
max-metric router-lsa [on-startup 
{announce-time | wait-for-bgp}]
OSPF conﬁg mode; conﬁgures a stub router, delaying the 
point at which it can become a transit router.
show ip ospf border-routers
User mode; displays hidden LSAs for ABRs and ASBRs.
show ip ospf [process-id [area-id]] 
database
User mode; has many options not shown here. Displays the 
OSPF LSDB.
show ip ospf neighbor [interface-type 
interface-number] [neighbor-id] [detail]
User mode; lists information about OSPF neighbors.
show ip ospf [process-id] summary-
address
User mode; lists information about route summaries in OSPF.
show ip ospf virtual-links
User mode; displays status and info about virtual links.
show ip route ospf
User mode; displays all OSPF routes in the IP routing table. 
show ip ospf interface [interface-type 
interface-number] [brief]
User mode; lists OSPF protocol timers and statistics per 
interface. 
show ip ospf statistics [detail]
User mode; displays OSPF SPF calculation statistics.
continues
Table 10-11
Command Reference for Chapter 10 (Continued)

308     Chapter 10: OSPF
Table 10-12 summarizes many OSPF timers and their meaning. 
Command
Command Mode and Description
clear ip ospf [pid] {process | 
redistribution | counters [neighbor 
[neighbor-interface] [neighbor-id]]}
Enable mode; restarts the OSPF process, clears redistributed 
routes, or clears OSPF counters.
debug ip ospf hello
Enable mode; displays messages regarding Hellos, including 
Hello parameter mismatches.
debug ip ospf adj
Enable mode; displays messages regarding adjacency 
changes.
show ip ospf interface [type number] 
[brief]
User mode; lists many interface settings.
Table 10-12
OSPF Timer Summary 
Timer
Meaning
MaxAge
The maximum time an LSA can be in a router’s LSDB, without receiving a newer 
copy of the LSA, before the LSA is removed. Default is 3600 seconds.
LSRefresh
The timer interval per LSA on which a router reﬂoods an identical LSA, except for a 
1-larger sequence number, to prevent the expiration of MaxAge. Default is 1800 
seconds.
Hello
Per interface; time interval between Hellos. Default is 10 or 30 seconds, depending on 
interface type.
Dead
Per interface; time interval in which a Hello should be received from a neighbor. If 
not received, the neighbor is considered to have failed. Default is four times Hello.
Wait
Per interface; set to the same number as the dead interval. Deﬁnes the time a router 
will wait to get a Hello asserting a DR after reaching a 2WAY state with that 
neighbor. 
Retransmission
Per interface; the time between sending an LSU, not receiving an acknowledgement, 
and then resending the LSU. Default is 5 seconds.
Inactivity
Countdown timer, per neighbor, used to detect when a neighbor has not been heard 
from for a complete dead interval. It starts equal to the dead interval, counts down, 
and is reset to be equal to the dead interval when each Hello is received.
Poll Interval
On NBMA networks, the period at which Hellos are sent to a neighbor when the 
neighbor is down. Default is 60 seconds.
Table 10-11
Command Reference for Chapter 10 (Continued)

Foundation Summary     309
Table 10-13 lists OSPF neighbor states and their meaning. 
Timer
Meaning
Flood (Pacing)
Per interface; deﬁnes the interval between successive LSUs when ﬂooding LSAs. 
Default is 33 ms.
Retransmission 
(Pacing)
Per interface; deﬁnes the interval between retransmitted packets as part of a single 
retransmission event. Default is 66 ms.
Lsa-group 
(Pacing)
Per OSPF process. LSA’s LSRefresh intervals time out independently. This timer 
improves LSU reﬂooding efﬁciency by waiting, collecting several LSAs whose 
LSRefresh timers expire, and ﬂooding all these LSAs together. Default is 240 
seconds.
Table 10-13
OSPF Neighbor States
State
Meaning
Down
No Hellos have been received from this neighbor for more than the dead interval.
Attempt
This router is sending Hellos to a manually conﬁgured neighbor.
Init
A Hello has been received from the neighbor, but it did not have the router’s RID in 
it. This is a permanent state when Hello parameters do not match. 
2WAY
A Hello has been received from the neighbor, and it has the router’s RID in it. This is 
a stable state for pairs of DROther neighbors.
ExStart
Currently negotiating the DD sequence numbers and master/slave logic used for DD 
packets.
Exchange
Finished negotiating, and currently exchanging DD packets.
Loading
All DD packets exchanged, and currently pulling the complete LSDB entries with 
LSU packets.
Full
Neighbors are adjacent (fully adjacent), and should have identical LSDB entries for 
the area in which the link resides. Routing table calculations begin.
Table 10-12
OSPF Timer Summary (Continued)

310     Chapter 10: OSPF
Table 10-14 lists several key OSPF numeric values. 
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
LSDB, Dijkstra, link-state routing protocol, LSA, LSU, DD, Hello, LSAck, RID, 
neighbor state, neighbor, adjacent, fully adjacent, 2-Way, 224.0.0.5, 224.0.0.6, area, 
stub area type, network type, external route, E1 route, E2 route, Hello timer, Dead Time/
Interval, sequence number, DR, BDR, DROther, priority, LSA ﬂooding, DR election, 
SPF calculation, partial SPF calculation, full SPF calculation, LSRefresh, hello time/
interval, MaxAge, ABR, ASBR, internal router, backbone area, transit network, stub 
network, LSA type, stub area, NSSA, totally stubby area, totally NSSA area, virtual 
link, stub router, transit router, SPF algorithm, All OSPF DR Routers, All OSPF Routers
Refer to the CD-based glossary to check your answers.
Table 10-14
OSPF Numeric Ranges
Setting
Range of Values
Single interface cost
1 to 65,535 (216 – 1)
Complete route cost
1 to 16,777,215 (224 – 1)
Inﬁnite route cost
16,777,215 (224 – 1)
Reference bandwidth (units: Mbps)
1 to 4,294,967
OSPF PID
1 to 65,535 (216 – 1)

Further Reading     311
Further Reading
Jeff Doyle’s Routing TCP/IP, Volume I, Second Edition—every word a must for CCIE Routing 
and Switching.
Cisco OSPF Command and Conﬁguration Handbook, by Dr. William Parkhurst, covers every 
OSPF-related command, with examples of each one.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— OSPF
— EIGRP
— Route Filtering 
— RIPv2
— The use of show and debug commands

C H A P T E R 11
IGP Route Redistribution, 
Route Summarization, and 
Default Routing
This chapter covers several topics related to the use of multiple IGP routing protocols. IGPs can 
use default routes to pull packets toward a small set of routers, with those routers having learned 
routes from some external source. IGPs can use route summarization with a single routing 
protocol, but it is often used at redistribution points between IGPs as well. Finally, route 
redistribution by deﬁnition involves moving routes from one routing source to another. This 
chapter takes a look at each topic.
“Do I Know This Already?” Quiz
Table 11-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
Table 11-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Route Maps, Preﬁx Lists, and Administrative 
Distance
1–2
Route Redistribution
3–6
Route Summarization
7–8
Default Routes
9
Total Score

314     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
1.
A route map has several clauses. A route map’s ﬁrst clause has a permit action conﬁgured. 
The match command for this clause refers to an ACL that matches route 10.1.1.0/24 with a 
permit action, and matches route 10.1.2.0/24 with a deny action. If this route map is used for 
route redistribution, which of the following are true? 
a. The route map will attempt to redistribute 10.1.1.0/24. 
b. The question does not supply enough information to determine if 10.1.1.0/24 is 
redistributed.
c. The route map will not attempt to redistribute 10.1.2.0/24. 
d. The question does not supply enough information to determine if 10.1.2.0/24 is 
redistributed.
2.
Which of the following routes would be matched by this preﬁx list command: ip preﬁx-list 
fred permit 10.128.0.0/9 ge 20? 
a. 10.1.1.0 255.255.255.0
b. 10.127.1.0 255.255.255.0
c. 10.200.200.192 255.255.255.252
d. 10.128.0.0 255.255.240.0
e. None of these answers is correct.
3.
A router is using the conﬁguration shown below to redistribute routes. This router has several 
working interfaces with IP addresses in network 10.0.0.0, and has learned some network 10 
routes with EIGRP and some with OSPF. Which of the following is true about the 
redistribution conﬁguration? 
router eigrp 1
 network 10.0.0.0
 redistribute ospf 2
!
router ospf 2
 network 10.0.0.0 0.255.255.255 area 3
 redistribute eigrp 1 subnets
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11115555....0000....0000....0000
Routing entry for 15.0.0.0/24, 5 known subnets
  Attached (2 connections)
  Redistributing via eigrp 1
O E1    10.6.11.0 [110/84] via 10.1.6.6, 00:21:52, Serial0/0/0.6
O E2    10.6.12.0 [110/20] via 10.1.6.6, 00:21:52, Serial0/0/0.6
C       10.1.6.0 is directly connected, Serial0/0/0.6
O IA    10.1.2.0 [110/65] via 10.1.1.5, 00:21:52, Serial0/0/0.5
C       10.1.1.0 is directly connected, Serial0/0/0.5
a. EIGRP will not advertise any additional routes due to redistribution.
b. OSPF will not advertise any additional routes due to redistribution.

“Do I Know This Already?” Quiz     315
c. Routes redistributed into OSPF will be advertised as E1 routes.
d. The redistribute ospf 2 command would be rejected due to missing parameters.
4.
Examine the following router conﬁguration and excerpt from its IP routing table. Which 
routes could be redistributed into OSPF? 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    nnnneeeettttwwwwoooorrrrkkkk    11112222....0000....0000....0000
rrrroooouuuutttteeeerrrr    oooossssppppffff    2222
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp    1111    ssssuuuubbbbnnnneeeettttssss
    nnnneeeettttwwwwoooorrrrkkkk    11113333....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    3333
An excerpt from the routing table is shown next:
C       12.1.6.0 is directly connected, Serial0/0/0.6
D       12.0.0.0/8 [90/2172416] via 13.1.1.1, 00:01:30, Serial0/0/0.5
C       13.1.1.0 is directly connected, Serial0/0/0.5
a. 12.1.6.0
b. 12.0.0.0
c. 13.1.1.0
d. None of the above
5.
Two corporations merged. The network engineers decided to redistribute between one company’s 
EIGRP network and the other company’s OSPF network, using two mutually redistributing 
routers (R1 and R2) for redundancy. Assume that as many defaults as is possible are used 
for the redistribution conﬁguration. Assume that one of the subnets in the OSPF domain is 
10.1.1.0/24. Which of the following is true about a possible suboptimal route to 10.1.1.0/24 
on R1—a route that sends packets through the EIGRP domain, and through R2 into the OSPF 
domain?
a. The suboptimal routes will occur unless the conﬁguration ﬁlters routes at R1.
b. R1’s administrative distance must be manipulated, such that OSPF routes have an 
administrative distance less than EIGRP’s default of 90.
c. EIGRP prevents the suboptimal routes by default.
d. Using route tags is the only way to prevent the suboptimal routes. 
6.
Which of the following statements is true about the type of routes created when redistributing 
routes? 
a. Routes redistributed into OSPF default to be external type 2.
b. Routes redistributed into EIGRP default to external, but can be set to internal with a 
route map.
c. Routes redistributed into RIP are external by default.
d. Routes redistributed into OSPF by a router in an NSSA area default to be external type 1.

316     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
7.
Which of the following is not true about route summarization? 
a. The advertised summary is assigned the same metric as the lowest-metric component 
subnet.
b. The router does not advertise the summary when its routing table does not have any of 
the component subnets.
c. The router does not advertise the component subnets.
d. Summarization, when used with redistribution, prevents all cases of suboptimal routes.
8.
Which of the following is true of route summarization? 
a. OSPF can summarize routes only on ABRs and ASBRs.
b. EIGRP summarization is conﬁgured with a router eigrp subcommand.
c. RIPv2 summarization has the same features as EIGRP summarization, other than the 
syntax differences in the ip summary-address command.
d. RIPv1 allows the ip summary-address command to be used.
9.
Which of the following is/are true regarding the default-information originate router 
subcommand? 
a. It is not supported by EIGRP.
b. It causes OSPF to advertise a default route, but only if a static route to 0.0.0.0/0 is in that 
router’s routing table.
c. The always keyword on the default-information originate command, when used for 
OSPF, means OSPF will originate a default route even if no default route exists in its 
own IP routing table. 
d. None of the other answers are correct.

Route Maps, Preﬁx Lists, and Administrative Distance     317
Foundation Topics
Route Maps, Preﬁx Lists, and Administrative Distance
Route maps, IP preﬁx lists, and administrative distance (AD) must be well understood to do well 
with route redistribution topics on the CCIE Routing and Switching written exam. This section 
focuses on the tools themselves, followed by coverage of route redistribution.
Conﬁguring Route Maps with the route-map Command
Route maps provide programming logic similar to the If/Then/Else logic seen in other programming 
languages. A single route map has one or more route-map commands in it, and routers process 
route-map commands in sequential order based on sequence numbers. Each route-map command 
has underlying matching parameters, conﬁgured with the aptly named match command. (To 
match all packets, the route-map clause simply omits the match command.) Each route-map 
command also has one or more optional set commands that you can use to manipulate information—
for instance, to set the metric for some redistributed routes. The general rules for route maps are 
as follows: 
■
Each route-map command must have an explicitly conﬁgured name, with all commands that 
use the same name being part of the same route map.
■
Each route-map command has an action (permit or deny).
■
Each route-map command in the same route map has a unique sequence number, allowing 
deletion and insertion of single route-map commands.
■
When a route map is used for redistribution, the route map processes routes taken from the 
then-current routing table.
■
The route map is processed sequentially based on the sequence numbers.
■
Once a particular route is matched by the route map, it is not processed beyond that matching 
route-map command (speciﬁc to route redistribution).
■
When a route is matched in a route-map statement, if the route-map command has a permit 
parameter, the route is redistributed (speciﬁc to route redistribution).
■
When a route is matched in a route-map statement, if the route-map statement has a deny 
parameter, the route is not redistributed (speciﬁc to route redistribution).

318     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Route maps can be confusing at times, especially when using the deny option on the route-map 
command. To help make sure the logic is clear before getting into redistribution, Figure 11-1 
shows a logic diagram for an example route map. (This example is contrived to demonstrate some 
nuances of route map logic; a better, more efﬁcient route map could be created to achieve the same 
results.) In the ﬁgure, R1 has eight loopback interfaces conﬁgured to be in class A networks 32 
through 39. Figure 11-1 shows how the contrived route-map picky would process the routes.
Figure 11-1
Route Map Logic Example
First, a few clariﬁcations about the meaning of Figure 11-1 are in order. The top of the ﬁgure 
begins with the set of connected networks (32 through 39), labeled with a “B,” which is the set of 
routes still being considered for redistribution. Moving down the ﬁgure, four separate route-map 
commands sit inside this single route map. Each route-map clause (the clause includes the 
underlying match and set commands) in turn moves routes from the list of possible routes (“B”) 
34, 35, 36, 38
Not Matched
End of List: implied deny all
Null
route-map picky deny 40
match ip address 33
B
B
33, 34, 35, 36, 38
Not Matched
route-map picky deny 33
match ip address d-38-p39
B
33, 34, 35, 36, 38, 39
Not Matched
route-map picky permit 25
match ip address d-36-p-37
B
33, 34, 35, 36, 37, 38, 39
Not Matched
Matched
32
Permit
route-map picky permit 10
match ip address 32
B
32, 33, 34, 35, 36, 37, 38, 39
B
33, 34, 35, 36, 38, 39
C
32, 37
A
33, 39
C
32, 37
A
39
C
32, 37
A
null
C
32, 37
A
null
C
32
A
A The set of routes to redistribute
B Routes for which no decision
has been made yet
C The set of routes that are not
redistributed
Matched
37
Matched
39
Permit
Deny
Matched
33
Deny
Deny
ACL 32:
Permits Network 32
Default Deny Any at End
ACL 33:
Permits Network 33
Default Deny Any at End
ACL d-36-p-37:
Denies Network 36
Permits Network 37
Default Deny Any at End
ACL d-38-p-39:
Denies Network 38
Permits Network 39
Default Deny Any at End

Route Maps, Preﬁx Lists, and Administrative Distance     319
to either the list of routes to redistribute (“A”) or the list to not redistribute (“C”). By the bottom 
of the ﬁgure, all routes will be noted as either to be redistributed or not to be redistributed.
The route map chooses to redistribute a route only if the route-map command has a permit 
option; the only time a route-map clause chooses to not redistribute a route is when the clause 
has a deny option. Ignoring the matching logic for a moment, the ﬁrst two route-map commands 
(sequence numbers 10 and 25) use the permit option. As a result of those clauses, routes are either 
added to the list of routes to redistribute (“A”) or left in the list of candidate routes (“B”). The third 
and fourth clauses (sequence numbers 33 and 40) use the deny option, so those clauses cause 
routes to be either added to the list of routes to not redistribute (“C”), or left in the list of candidate 
routes (“B”). In effect, once a route-map clause has matched a route, that route is ﬂagged either 
as to be redistributed or as not to be redistributed, and the route is no longer processed by the 
route map.
One point that can sometimes be confused is that if a route is denied by an ACL used by a match 
command, it does not mean that the route is prevented from being redistributed. For instance, the 
match ip address 32 command in clause 10 refers to ACL 32, which has one explicit access 
control entry (ACE) that matches network 32, with a permit action. Of course, ACL 32 has an 
implied deny all at the end, so ACL 32 permits network 32, and denies 33 through 39. However, 
denying networks 33 through 39 in the ACL does not mean that those routes are not 
redistributed—it simply means that those routes do not match route-map clause 10, so those 
routes are eligible for consideration by a later route-map clause. 
The following list summarizes the key points about route map logic when used for redistribution:
■
route-map commands with the permit option either cause a route to be redistributed or leave 
the route in the list of routes to be examined by the next route-map clause.
■
route-map commands with the deny option either ﬁlter the route or leave the route in the list 
of routes to be examined by the next route-map clause.
■
If a clause’s match commands use an ACL, an ACL match with the deny action does not 
cause the route to be ﬁltered. Instead, it just means that route does not match that particular 
route-map clause.
■
The route-map command includes an implied deny all clause at the end; to conﬁgure a permit 
all, use the route-map command, with a permit action, but without a match command.
Route Map match Commands for Route Redistribution
Route maps use the match command to deﬁne the ﬁelds and values used for matching the routes 
being processed. If more than one match command is conﬁgured in a single route-map clause, a 
route is matched only if all the match commands’ parameters match the route. The logic in each 
KEY
POINT

320     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
match command itself is relatively straightforward. Table 11-2 lists the match command options 
when used for IGP route redistribution. 
Route Map set Commands for Route Redistribution
When used for redistribution, route maps have an implied action—either to allow the route to be 
redistributed or to ﬁlter the route so that it is not redistributed. As described earlier in this chapter, 
that choice is implied by the permit or deny option on the route-map command. Route maps can 
also change information about the redistributed routes by using the set command. Table 11-3 lists 
the set command options when used for IGP route redistribution. 
Table 11-2
match Command Options for IGP Redistribution
match Command
Description
match interface interface-type interface-number 
[... interface-type interface-number]
Looks at outgoing interface of 
routes
*match ip address {[access-list-number | access-list-name] | 
  preﬁx-list preﬁx-list-name}
Examines route preﬁx and preﬁx 
length
*match ip next-hop {access-list-number | access-list-name}
Examines route’s next-hop 
address
*match ip route-source {access-list-number | access-list-
  name}
Matches advertising router’s IP 
address
match metric metric-value
Matches route’s metric
match route-type {internal | external [type-1 | type-2] | level-1 | 
level-2}
Matches route type
match tag tag-value [...tag-value]
Tag must have been set earlier
*Can reference multiple numbered and named ACLs on a single command.
Table 11-3
set Command Options for IGP Redistribution
set Command
Description
set level {level-1 | level-2 | level-1-2 | stub-area | 
backbone}
Deﬁnes database(s) into which the route is 
redistributed 
set metric metric-value
Sets the route’s metric for OSPF, RIP, and 
IS-IS
set metric bandwidth delay reliability loading mtu
Sets the IGRP/EIGRP route’s metric values
set metric-type {internal | external | type-1 | type-2}
Sets type of route for IS-IS and OSPF
set tag tag-value
Sets the unitless tag value in the route

Route Maps, Preﬁx Lists, and Administrative Distance     321
IP Preﬁx Lists
IP preﬁx lists provide mechanisms to match two components of an IP route: 
■
The route preﬁx (the subnet number) 
■
The preﬁx length (the subnet mask)
The redistribute command cannot directly reference a preﬁx list, but a route map can refer to a 
preﬁx list by using the match command. 
A preﬁx list itself has similar characteristics to a route map. The list consists of one or more 
statements with the same text name. Each statement has a sequence number to allow deletion of 
individual commands, and insertion of commands into a particular sequence position. Each 
command has a permit or deny action—but because it is used only for matching packets, the 
permit or deny keyword just implies whether a route is matched (permit) or not (deny). The 
generic command syntax is as follows:
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt list-name [sssseeeeqqqq    seq-value] {ddddeeeennnnyyyy    network/length | ppppeeeerrrrmmmmiiiitttt network////
length}[ggggeeee ge-value] [lllleeee le-value]
The sometimes tricky and interesting part of working with preﬁx lists is that the meaning of the 
network/length, ge-value, and le-value parameters changes depending on the syntax. The network/
length parameters deﬁne the values to use to match the route preﬁx. For example, a network/length 
of 10.0.0.0/8 means “any route that begins with a 10 in the ﬁrst octet.” The ge and le options are 
used for comparison to the preﬁx length—in other words, to the number of binary 1s in the subnet 
mask. For instance, ge 20 le 22 matches only routes whose masks are /20, /21, or /22. So, preﬁx 
list logic can be summarized into a two-step comparison process for each route:
1.
The route’s preﬁx must be within the range of addresses implied by the preﬁx-list command’s 
network/length parameters.
2.
The route’s preﬁx length must match the range of preﬁxes implied by the preﬁx-list 
command.
The potentially tricky part of the logic relates to knowing the range of preﬁx lengths checked by 
this logic. The range is deﬁned by the ge-value and le-value parameters, which stand for greater-
than-or-equal-to and less-than-or-equal-to. Table 11-4 formalizes the logic, including the default 
values for ge-value and le-value. In the table, note that conf-length refers to the preﬁx length 
conﬁgured in the network/preﬁx (required) parameter, and route-length refers to the preﬁx length 
of a route being examined by the preﬁx list. 

322     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Several examples can really help nail down preﬁx list logic. The following routes will be examined 
by a variety of preﬁx lists, with the routes numbered for easier reference:
1.
10.0.0.0/8
2.
10.128.0.0/9
3.
10.1.1.0/24
4.
10.1.2.0/24
5.
10.128.10.4/30
6.
10.128.10.8/30
Next, Table 11-5 shows the results of seven different one-line preﬁx lists applied to these six 
example routes. The table lists the matching parameters in the preﬁx-list commands, omitting the 
ﬁrst part of the commands. The table explains which of the six routes would match the listed preﬁx 
list, and why. 
Table 11-4
LE and GE Parameters on IP Preﬁx List, and the Implied Range of Preﬁx Lengths
Preﬁx List Parameters
Range of Preﬁx Lengths
Neither
conf-length = route-length
Only le 
conf-length <= route-length <= le-value
Only ge 
ge-value <= route-length <= 32
Both ge and le
ge-value <= route-length <= le-value
Table 11-5
Example Preﬁx Lists Applied to the List of Routes 
preﬁx-list Command 
Parameters
Routes 
Matched
Results
10.0.0.0/8
1
Without ge or le conﬁgured, both the preﬁx (10.0.0.0) 
and length (8) must be an exact match.
10.128.0.0/9
None
Without ge or le conﬁgured, the preﬁx (10.128.0.0) 
and length (9) must be an exact match, so none of the 
routes match.
10.0.0.0/8 ge 9
2–6
The 10.0.0.0/8 means “all routes whose ﬁrst octet is 
10,” effectively representing an address range. The 
preﬁx length must be between 9 and 32, inclusive.
10.0.0.0/8 ge 24 le 24
3, 4
The 10.0.0.0/8 means “all routes whose ﬁrst octet is 
10,” and the preﬁx range is 24 to 24—meaning only 
routes with preﬁx length 24.

Route Maps, Preﬁx Lists, and Administrative Distance     323
Administrative Distance
A single router can learn routes using multiple IP routing protocols, as well as via connected and 
static routes. When a router learns a particular route from multiple sources, the router cannot use 
the metrics to determine the best route, because the metrics are based on different units. So, the 
router uses each route’s administrative distance (AD) to determine which is best, with the lower 
number being better. Table 11-6 lists the default AD values for the various routing sources. 
preﬁx-list Command 
Parameters
Routes 
Matched
Results
10.0.0.0/8 le 28
1–4
The preﬁx length needs to be between 8 and 28, 
inclusive.
0.0.0.0/0
None
0.0.0.0/0 means “match all preﬁxes, with preﬁx length 
of exactly 0.” So, it would match all routes’ preﬁxes, 
but none of their preﬁx lengths. Only a default route 
would match this preﬁx list.
0.0.0.0/0 le 32
All
The range implied by 0.0.0.0/0 is all IPv4 addresses. 
The le 32 then implies any preﬁx length between 0 and 
32, inclusive. This is the syntax for “match all” preﬁx 
list logic.  
Table 11-6
Administrative Distances
KEY 
POINT
Route Type
Administrative Distance
Connected
0
Static
1
EIGRP summary route
5
EBGP
20
EIGRP (internal)
90
IGRP
100
OSPF
110
IS-IS
115
RIP
120
EIGRP (external)
170
iBGP (external)
200
Unreachable
255
Table 11-5
Example Preﬁx Lists Applied to the List of Routes (Continued)

324     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
The defaults can be changed by using the distance command. The command differs amongst all 
three IGPs covered in this book. The generic versions of the distance router subcommand for RIP, 
EIGRP, and OSPF, respectively, are as follows:
ddddiiiissssttttaaaannnncccceeee distance 
ddddiiiissssttttaaaannnncccceeee    eeeeiiiiggggrrrrpppp internal-distance external-distance
ddddiiiissssttttaaaannnncccceeee    oooossssppppffff {[iiiinnnnttttrrrraaaa----aaaarrrreeeeaaaa dist1] [iiiinnnntttteeeerrrr----aaaarrrreeeeaaaa dist2] [eeeexxxxtttteeeerrrrnnnnaaaallll dist3]}
As you can see, EIGRP and OSPF can set a different AD depending on the type of route as well, 
whereas RIP cannot. You can also use the distance command to set a router’s view of the AD per 
route, as is covered later in this chapter.
Route Redistribution
Although using a single routing protocol throughout an enterprise might be preferred, many 
enterprises use multiple routing protocols due to business mergers and acquisitions, organizational 
history, or in some cases for technical reasons. Route redistribution allows one or more routers to 
take routes learned via one routing protocol and advertise those routes via another routing protocol 
so that all parts of the internetwork can be reached.
To perform redistribution, one or more routers run both routing protocols, with each routing 
protocol placing routes into that router’s routing table. Then, each routing protocol can take all or 
some of the other routing protocol’s routes from the routing table and advertise those routes. This 
section begins by looking at the mechanics of how to perform simple redistribution on a single 
router, and ends with discussion of tools and issues that matter most when redistributing on 
multiple routers.
The Mechanics of the redistribute Command
The redistribute router subcommand tells one routing protocol to take routes from another 
routing protocol. This command can simply redistribute all routes or, by using matching logic, 
redistribute only a subset of the routes. The redistribute command also supports actions for 
setting some parameters about the redistributed routes—for example, the metric. 
The full syntax of the redistribute command is as follows:
rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee protocol [process-id] [lllleeeevvvveeeellll----1111 | lllleeeevvvveeeellll----1111----2222 | lllleeeevvvveeeellll----2222] [as-number] [mmmmeeeettttrrrriiiicccc 
metric-value] [mmmmeeeettttrrrriiiicccc----ttttyyyyppppeeee    type-value] [mmmmaaaattttcccchhhh {iiiinnnntttteeeerrrrnnnnaaaallll | eeeexxxxtttteeeerrrrnnnnaaaallll    1111 | eeeexxxxtttteeeerrrrnnnnaaaallll    2222}] [ttttaaaagggg 
tag-value] [rrrroooouuuutttteeee----mmmmaaaapppp    map-tag] [ssssuuuubbbbnnnneeeettttssss]
The redistribute command identiﬁes the routing source from which routes are taken, and the 
router command identiﬁes the routing process into which the routes are advertised. For example, 
the command redistribute eigrp 1 tells the router to take routes from EIGRP process 1; if that 
command were under router rip, the routes would be redistributed into RIP, enabling other RIP 
routers in the network to see some or all routes coming from EIGRP AS 1.

Route Redistribution     325
The redistribute command has a lot of other parameters as well, most of which will be described 
in upcoming examples. The ﬁrst few examples use the network shown in Figure 11-2. In this 
network, each IGP uses a different class A network just to make the results of redistribution more 
obvious. Also note that the numbering convention is such that each of R1’s connected WAN 
subnets has 1 as the third octet, and each LAN subnet off R3, R4, and R5 has 2 as the third octet.
Figure 11-2
Sample Network for Default Route Examples
Redistribution Using Default Settings
The ﬁrst example conﬁguration meets the following design goals:
■
R1 redistributes between each pair of IGPs—RIP, EIGRP, and OSPF. 
■
Default metrics are used whenever possible; when required, the metrics are conﬁgured on the 
redistribute command.
■
Redistribution into OSPF uses the non-default subnets parameter, which causes subnets to be 
advertised into OSPF.
■
All other settings use default values.
Example 11-1 shows R1’s conﬁguration for each routing protocol, along with show commands 
from all four routers to highlight the results of the redistribution. 
Example 11-1
Route Redistribution with Minimal Options 
! EIGRP redistributes from OSPF (process ID 1) and RIP. EIGRP must
! set the metric, as it has no default values. It also uses the 
! nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy command so that subnets will be redistributed into
! EIGRP.
continues
R1
R3
R5
13.1.2.3/24
13.1.1.0/24
15.1.1.0/24
Fa0/0
15.1.2.5/24
Fa0/0
RID
1.1.1.1
RID 5.5.5.5
.3
0/0/0.1
.5
0/0.1
.1
.1
.1
R4
14.1.2.4/24
14.1.1.0/24
Fa0/0
.4
0/0/0.1
RIP
Network 13.0.0.0
OSPF 1 (Two Areas, with R5 as ABR)
Network 15.0.0.0
EIGRP 1
Network 14.0.0.0

326     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111    mmmmeeeettttrrrriiiicccc    1111555544444444    5555    222255555555    1111    1111555500000000                                                
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    mmmmeeeettttrrrriiiicccc    1111555544444444    5555    222255555555    1111    1111555500000000                                                            
    nnnneeeettttwwwwoooorrrrkkkk    11114444....0000....0000....0000
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! OSPF redistributes from EIGRP (ASN 1) and RIP. OSPF defaults the
! metric to 20 for redistributed IGP routes. It must also use the
! ssssuuuubbbbnnnneeeettttssss option in order to redistribute subnets. 
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrroooouuuutttteeeerrrr----iiiidddd    1111....1111....1111....1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp    1111    ssssuuuubbbbnnnneeeettttssss
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    ssssuuuubbbbnnnneeeettttssss
    nnnneeeettttwwwwoooorrrrkkkk    11115555....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
! RIP redistributes from OSPF (process ID 1) and EIGRP (ASN 1). RIP
! must set the metric, as it has no default values. It also uses the 
! nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy command so that subnets will be redistributed into
! EIGRP.
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp    1111    mmmmeeeettttrrrriiiicccc    2222
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111    mmmmeeeettttrrrriiiicccc    3333
    nnnneeeettttwwwwoooorrrrkkkk    11113333....0000....0000....0000
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! R1 has a connected route (x.x.1.0) in networks 13, 14, and 15, as well as
! an IGP-learned route (x.x.2.0).
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity
     10.0.0.0/24 is subnetted, 1 subnets
C       10.1.1.0 is directly connected, FastEthernet0/0
     13.0.0.0/24 is subnetted, 2 subnets
C       13.1.1.0 is directly connected, Serial0/0/0.3
R       13.1.2.0 [120/1] via 13.1.1.3, 00:00:07, Serial0/0/0.3
     14.0.0.0/24 is subnetted, 2 subnets
D       14.1.2.0 [90/2172416] via 14.1.1.4, 00:58:20, Serial0/0/0.4
C       14.1.1.0 is directly connected, Serial0/0/0.4
     15.0.0.0/24 is subnetted, 2 subnets
O IA    15.1.2.0 [110/65] via 15.1.1.5, 00:04:25, Serial0/0/0.5
C       15.1.1.0 is directly connected, Serial0/0/0.5
! R3 learned two routes each from nets 14 and 15.
! Compare the metrics set on R1’s RIP rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee command to the metrics below.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    rrrriiiipppp
     14.0.0.0/24 is subnetted, 2 subnets
R       14.1.2.0 [120/2] via 13.1.1.1, 00:00:19, Serial0/0/0.1
R       14.1.1.0 [120/2] via 13.1.1.1, 00:00:19, Serial0/0/0.1
     15.0.0.0/24 is subnetted, 2 subnets
R       15.1.2.0 [120/3] via 13.1.1.1, 00:00:19, Serial0/0/0.1
R       15.1.1.0 [120/3] via 13.1.1.1, 00:00:19, Serial0/0/0.1
Example 11-1
Route Redistribution with Minimal Options (Continued)
  

Route Redistribution     327
Metrics must be set via conﬁguration when redistributing into RIP and EIGRP, whereas OSPF 
uses default values. In the example, the two redistribute commands under router rip used hop 
counts of 2 and 3 just so the metrics could be easily seen in the show ip route command output 
on R3. The EIGRP metric in the redistribute command must include all ﬁve metric components, 
even if the last three are ignored by EIGRP’s metric calculation (as they are by default). The 
command redistribute rip metric 1544 5 255 1 1500 lists EIGRP metric components of bandwidth, 
delay, reliability, load, and MTU, in order. OSPF defaults to cost 20 when redistributing from an 
IGP, and 1 when redistributing from BGP.
The redistribute command redistributes only routes in that router’s current IP routing table. When 
redistributing from a given routing protocol, the redistribute command takes routes listed in the 
IP routing table as being learned from that routing protocol. Interestingly, the redistribute 
command can also pick up connected routes. For example, R1 has an OSPF route to 15.1.2.0/24, 
and a connected route to 15.1.1.0/24. However, R3 (RIP) and R4 (EIGRP) redistribute both of 
these routes—the OSPF-learned route and one connected route—as a result of their respective 
! R4 learned two routes each from nets 13 and 15.
! EIGRP injected the routes as external (EX), which are considered AD 170. 
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    eeeeiiiiggggrrrrpppp
     13.0.0.0/24 is subnetted, 2 subnets
D EX    13.1.1.0 [170/2171136] via 14.1.1.1, 00:09:57, Serial0/0/0.1
D EX    13.1.2.0 [170/2171136] via 14.1.1.1, 00:09:57, Serial0/0/0.1
     15.0.0.0/24 is subnetted, 2 subnets
D EX    15.1.2.0 [170/2171136] via 14.1.1.1, 01:00:27, Serial0/0/0.1
D EX    15.1.1.0 [170/2171136] via 14.1.1.1, 01:00:27, Serial0/0/0.1
! R5 learned two routes each from nets 13 and 14. 
! OSPF by default injected the routes as external type 2, cost 20.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
     13.0.0.0/24 is subnetted, 2 subnets
O E2    13.1.1.0 [110/20] via 15.1.1.1, 00:36:12, Serial0/0.1
O E2    13.1.2.0 [110/20] via 15.1.1.1, 00:36:12, Serial0/0.1
     14.0.0.0/24 is subnetted, 2 subnets
O E2    14.1.2.0 [110/20] via 15.1.1.1, 00:29:56, Serial0/0.1
O E2    14.1.1.0 [110/20] via 15.1.1.1, 00:36:12, Serial0/0.1
! As a backbone router, OSPF on R1 created type 5 LSAs for the four E2 subnets.
! If R1 had been inside an NSSA stub area, it would have created type 7 LSAs.
R5# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa | bbbbeeeeggggiiiinnnn    TTTTyyyyppppeeee----5555
        Type-5 AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
13.1.1.0        1.1.1.1         1444        0x80000002 0x000785 0
13.1.2.0        1.1.1.1         1444        0x80000002 0x00FB8F 0
14.1.1.0        1.1.1.1         1444        0x80000002 0x00F991 0
14.1.2.0        1.1.1.1         1444        0x80000002 0x00EE9B 0
Example 11-1
Route Redistribution with Minimal Options (Continued)

328     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
redistribute ospf commands. As it turns out, the redistribute command causes the router to use 
the following logic to choose which routes to redistribute from a particular IGP protocol:
1.
Take all routes in my routing table that were learned by the routing protocol from which routes 
are being redistributed.
2.
Take all connected subnets matched by that routing protocol’s network commands.
Example 11-1 shows several instances of exactly how this two-part logic works. For instance, R3 
(RIP) learns about connected subnet 14.1.1.0/24, because RIP redistributes from EIGRP, and R1’s 
EIGRP network 14.0.0.0 command matches that subnet. 
The redistribute command includes a subnets option, but only OSPF needs to use it. By default, 
when redistributing into OSPF, OSPF redistributes only routes for classful networks, ignoring 
subnets. By including the subnets option, OSPF redistributes subnets as well. The other IGPs 
redistribute subnets automatically; however, if at a network boundary, the RIP or EIGRP auto-
summary setting would still cause summarization to use the classful network. In Example 11-1, 
if either RIP or EIGRP had used auto-summary, each redistributed network would show just the 
classful networks. For example, if RIP had conﬁgured auto-summary in Example 11-1, R3 would 
have a route to networks 14.0.0.0/8 and 15.0.0.0/8, but no routes to subnets inside those class A 
networks.
Setting Metrics, Metric Types, and Tags
Cisco IOS provides three mechanisms for setting the metrics of redistributed routes, as follows:
1.
Call a route map from the redistribute command, with the route map using the set metric 
command. This method allows different metrics for different routes.
2.
Use the metric option on the redistribute command. This sets the same metric for all routes 
redistributed by that redistribute command. 
3.
Use the default-metric command under the router command. This command sets the metric 
for all redistributed routes whose metric was not set by either of the other two methods.
The list implies the order of precedence if more than one method deﬁnes a metric. For instance, if 
a route’s metric is set by all three methods, the route map’s metric is used. If the metric is set on 
the redistribute command and there is a default-metric command as well, the setting on the 
redistribute command takes precedence.
The redistribute command also allows a setting for the metric-type option, which really refers to 
the route type. For example, routes redistributed into OSPF must be OSPF external routes, but they 
can be either external type 1 (E1) or type 2 (E2) routes. Table 11-7 summarizes the defaults for 
metrics and metric types.
KEY 
POINT
KEY 
POINT
KEY 
POINT

Route Redistribution     329
Redistributing a Subset of Routes Using a Route Map
Route maps can be referenced by any redistribute command. The route map may actually let all 
the routes through, setting different route attributes (for example, metrics) for different routes. Or, 
it may match some routes with a deny clause, which prevents the route from being redistributed. 
(Refer to Figure 11-1 for a review of route map logic.) 
Figure 11-3 and Example 11-2 show an example of mutual redistribution between EIGRP and 
OSPF, with some routes being either ﬁltered or changed using route maps. 
Figure 11-3
OSPF and EIGRP Mutual Redistribution Using Route Maps
The following list details the requirements for redistribution from OSPF into EIGRP. These 
requirements use R1’s perspective, because it is the router doing the redistribution.
■
Routes with next-hop address 15.1.1.5 (R5) should be redistributed, with route tag 5.
Table 11-7
Default Metrics and Route Metric Types in IGP Route Redistribution
KEY 
POINT
IGP into Which Routes Are 
Redistributed
Default 
Metric
Default (and Possible) Metric Types
RIP
None 
RIP has no concept of external routes
EIGRP
None
External
OSPF
20/1*
E2 (E1 or E2)
IS-IS
0
L1 (L1, L2, L1/L2, or external)
* OSPF uses cost 20 when redistributing from an IGP, and cost 1 when redistributing from BGP.
Subnet
Tagged 5      15.1.2.0/24
R4
R1
R5
14.1.1.4/24
15.1.1.5
15.1.1.0/24
15.1.6.0/24
Fa0/0
15.1.2.5/24
Fa0/0
Fa0/0
RID 1.1.1.1
RID 6.6.6.6
R6
14.0.0.0 on the Left (EIGRP)
15.0.0.0 on the Right (OSPF)
From Other EIGRP Routers:
14.2.16.0/23
14.2.18.0/23
14.2.20.0/24
14.2.21.0/24
14.2.22.4/30
14.2.22.8/30
14.3.8.0/24         Tagged 99
14.3.9.0/24         Tagged 99
Externals:
15.6.11.0/24 (E1)
15.6.12.0/24 (E2)
Tagged 6

330     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
■
E1 routes sourced by R6 (RID 6.6.6.6) should be redistributed, and assigned a route tag of 6.
■
No other routes should be redistributed.
The requirements for redistributing routes from EIGRP into OSPF are as follows, again from R1’s 
perspective:
■
Routes beginning with 14.2, and with masks /23 and /24, should be redistributed, with metric 
set to 300.
■
Other routes beginning with 14.2 should not be redistributed.
■
Routes beginning with 14.3 should be redistributed, with route tag 99.
■
No other routes should be redistributed.
Most of the explanation of the conﬁguration is provided in the comments in Example 11-2, with 
a few additional comments following the example.
Example 11-2
Route Redistribution Using Route Maps 
! No metrics are set on the rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    commands; either the default metric
! is used, or the route maps sssseeeetttt the metrics. The ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc command
! sets the unused EIGRP metric parameters to “1” because something must be
! configured, but the values are unimportant. 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111    rrrroooouuuutttteeee----mmmmaaaapppp    oooossssppppffff----iiiinnnnttttoooo----eeeeiiiiggggrrrrpppp
    nnnneeeettttwwwwoooorrrrkkkk    11114444....0000....0000....0000
    ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc    1111555544444444    5555    1111    1111    1111
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! While this configuration strives to use other options besides the options
! directly on the rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee command, when used by OSPF, you must still
! include the ssssuuuubbbbnnnneeeettttssss    keyword for OSPF to learn subnets from other IGPs.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrroooouuuutttteeeerrrr----iiiidddd    1111....1111....1111....1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp    1111    ssssuuuubbbbnnnneeeettttssss    rrrroooouuuutttteeee----mmmmaaaapppp    eeeeiiiiggggrrrrpppp----iiiinnnnttttoooo----oooossssppppffff
    nnnneeeettttwwwwoooorrrrkkkk    11115555....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
! ACL A-14-3-x-x matches all addresses that begin 14.3. ACL A-15-1-1-5 matches 
! exactly IP address 15.1.1.5. ACL A-6-6-6-6 matches exactly address 6.6.6.6.
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    ssssttttaaaannnnddddaaaarrrrdddd    AAAA----11114444----3333----xxxx----xxxx
    ppppeeeerrrrmmmmiiiitttt    11114444....3333....0000....0000    0000....0000....222255555555....222255555555
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    ssssttttaaaannnnddddaaaarrrrdddd    AAAA----11115555----1111----1111----5555
    ppppeeeerrrrmmmmiiiitttt    11115555....1111....1111....5555
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    ssssttttaaaannnnddddaaaarrrrdddd    AAAA----6666----6666----6666----6666
    ppppeeeerrrrmmmmiiiitttt    6666....6666....6666....6666
! The prefix lists matches prefixes in the range 14.2.0.0 through 14.2.255.255, 
! with prefix length 23 or 24.
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    eeee----iiiinnnnttttoooo----oooo    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11114444....2222....0000....0000////11116666    ggggeeee    22223333    lllleeee    22224444

Route Redistribution     331
! rrrroooouuuutttteeee----mmmmaaaapppp    oooossssppppffff----iiiinnnnttttoooo----eeeeiiiiggggrrrrpppp was called by the rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee command under rrrroooouuuutttteeeerrrr 
! eeeeiiiiggggrrrrpppp, meaning that it controls redistribution from OSPF into EIGRP.
! Clause 10 matches OSPF routes whose next hop is 15.1.1.5, which is R5’s serial
! IP address. R1’s only route that meets this criteria is 15.1.2.0/24. This route
! will be redistributed because the rrrroooouuuutttteeee----mmmmaaaapppp clause 10 has a ppppeeeerrrrmmmmiiiitttt action.
! The route tag is also set to 5.
rrrroooouuuutttteeee----mmmmaaaapppp    oooossssppppffff----iiiinnnnttttoooo----eeeeiiiiggggrrrrpppp    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    nnnneeeexxxxtttt----hhhhoooopppp    AAAA----11115555----1111----1111----5555
    sssseeeetttt    ttttaaaagggg    5555
! Clause 15 matches OSPF routes whose LSAs are sourced by router with RID 6.6.6.6,
! namely R6, and also have metric type E1. R6 sources two external routes, but
! only 15.6.11.0/24 is E1. The route is tagged 6.
rrrroooouuuutttteeee----mmmmaaaapppp    oooossssppppffff----iiiinnnnttttoooo----eeeeiiiiggggrrrrpppp    ppppeeeerrrrmmmmiiiitttt    11115555
    mmmmaaaattttcccchhhh    iiiipppp    rrrroooouuuutttteeee----ssssoooouuuurrrrcccceeee    AAAA----6666----6666----6666----6666
    mmmmaaaattttcccchhhh    rrrroooouuuutttteeee----ttttyyyyppppeeee    eeeexxxxtttteeeerrrrnnnnaaaallll    ttttyyyyppppeeee----1111
    sssseeeetttt    ttttaaaagggg    6666
!!!!    rrrroooouuuutttteeee----mmmmaaaapppp    eeeeiiiiggggrrrrpppp----iiiinnnnttttoooo----oooossssppppffff    was called by the    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    command under rrrroooouuuutttteeeerrrr    
! oooossssppppffff, meaning that it controls redistribution from EIGRP into OSPF.
! Clause 10 matches using a prefix list, which in turn matches prefixes that begin
! with 14.2, and which have either a /23 or /24 prefix length. By implication, it 
! does not match prefix length /30. The metric is set to 300 for these routes.
rrrroooouuuutttteeee----mmmmaaaapppp    eeeeiiiiggggrrrrpppp----iiiinnnnttttoooo----oooossssppppffff    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    eeee----iiiinnnnttttoooo----oooo
    sssseeeetttt    mmmmeeeettttrrrriiiicccc    333300000000
! Clause 18 matches routes that begin 14.3. They are tagged with a 99.
rrrroooouuuutttteeee----mmmmaaaapppp    eeeeiiiiggggrrrrpppp----iiiinnnnttttoooo----oooossssppppffff    ppppeeeerrrrmmmmiiiitttt    11118888
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    AAAA----11114444----3333----xxxx----xxxx
    sssseeeetttt    ttttaaaagggg    99999999
! Next, the example shows the routes that could be redistributed, and then
! shows the results of the redistribution, pointing out which routes were
! redistributed. First, the example shows, on R1, all routes that R1 could
! try to redistribute into EIGRP.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11115555....0000....0000....0000
Routing entry for 15.0.0.0/24, 5 known subnets
Attached (2 connections)
Redistributing via eigrp 1
O E1    15.6.11.0 [110/84] via 15.1.6.6, 00:21:52, Serial0/0/0.6
O E2    15.6.12.0 [110/20] via 15.1.6.6, 00:21:52, Serial0/0/0.6
C       15.1.6.0 is directly connected, Serial0/0/0.6
O IA    15.1.2.0 [110/65] via 15.1.1.5, 00:21:52, Serial0/0/0.5
C       15.1.1.0 is directly connected, Serial0/0/0.5
! R4 sees only two of the five routes from 15.0.0.0, because only two matched either of
! the rrrroooouuuutttteeee----mmmmaaaapppp clauses. The other three routes matched the default ddddeeeennnnyyyy clause.
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11115555....0000....0000....0000
Routing entry for 15.0.0.0/24, 2 known subnets
continues
Example 11-2
Route Redistribution Using Route Maps (Continued)

332     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Redistributing via eigrp 1
D EX    11115555....6666....11111111....0000 [170/2171136] via 14.1.1.1, 00:22:21, Serial0/0/0.1
D EX    11115555....1111....2222....0000 [170/2171136] via 14.1.1.1, 00:22:21, Serial0/0/0.1
! Still on R4, the sssshhhhoooowwww    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooollllooooggggyyyy command displays the tag. This command 
! filters the output so that just one line of output lists the tag values.
R4# sssshhhhoooo    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooo    11115555....6666....1111....0000    222255555555....222255555555....222255555555....0000 | iiiinnnnccccllll    ttttaaaagggg
         Administrator tag is 5 (0x00000005)
R4# sssshhhhoooo    iiiipppp    eeeeiiiiggggrrrrpppp    ttttooooppppoooo    11115555....6666....11111111....0000    222255555555....222255555555....222255555555....0000 | iiiinnnnccccllll    ttttaaaagggg
         Administrator tag is 6 (0x00000006)
! Next, the example shows the possible routes that could be redistributed from
! EIGRP into OSPF. 
! The next command (R1) lists all routes that could be redistributed into OSPF.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11114444....0000....0000....0000
Routing entry for 14.0.0.0/8, 10 known subnets
  Attached (1 connections)
  Variably subnetted with 3 masks
  Redistributing via eigrp 1, ospf 1
D       14.3.9.0/24 [90/2297856] via 14.1.1.4, 00:34:48, Serial0/0/0.4
D       14.3.8.0/24 [90/2297856] via 14.1.1.4, 00:34:52, Serial0/0/0.4
D       14.1.2.0/24 [90/2172416] via 14.1.1.4, 00:39:27, Serial0/0/0.4
C       14.1.1.0/24 is directly connected, Serial0/0/0.4
D       14.2.22.8/30 [90/2297856] via 14.1.1.4, 00:35:49, Serial0/0/0.4
D       14.2.20.0/24 [90/2297856] via 14.1.1.4, 00:36:12, Serial0/0/0.4
D       14.2.21.0/24 [90/2297856] via 14.1.1.4, 00:36:08, Serial0/0/0.4
D       14.2.16.0/23 [90/2297856] via 14.1.1.4, 00:36:34, Serial0/0/0.4
D       14.2.22.4/30 [90/2297856] via 14.1.1.4, 00:35:53, Serial0/0/0.4
D       14.2.18.0/23 [90/2297856] via 14.1.1.4, 00:36:23, Serial0/0/0.4
! Next, on R5, note that the two /30 routes beginning with 14.2 were correctly 
! prevented from getting into OSPF. It also filtered the redistribution of the
! two routes that begin with 14.1. As a result, R5 knows only 6 routes in 
! network 14.0.0.0, whereas R1 had 10 subnets of that network it could have 
! redistributed. Also below, note that the /23 and /24 routes inside 14.2 have
! metric 300.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11114444....0000....0000....0000
Routing entry for 14.0.0.0/8, 6 known subnets
  Variably subnetted with 2 masks
O E2    14.3.9.0/24 [110/20] via 15.1.1.1, 00:22:41, Serial0/0.1
O E2    14.3.8.0/24 [110/20] via 15.1.1.1, 00:22:41, Serial0/0.1
O E2    14.2.20.0/24 [110/300] via 15.1.1.1, 00:22:41, Serial0/0.1
O E2    14.2.21.0/24 [110/300] via 15.1.1.1, 00:22:41, Serial0/0.1
O E2    14.2.16.0/23 [110/300] via 15.1.1.1, 00:22:41, Serial0/0.1
O E2    14.2.18.0/23 [110/300] via 15.1.1.1, 00:22:41, Serial0/0.1
! The sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaabbbbaaaasssseeee command confirms that the route tag was set
! correctly. 
R5# sssshhhhoooowwww    iiiipppp    oooossssppppffff    ddddaaaattttaaaa    eeeexxxxtttteeeerrrrnnnnaaaallll    11114444....3333....8888....0000 | iiiinnnnccccllll    TTTTaaaagggg
External Route Tag: 99
Example 11-2
Route Redistribution Using Route Maps (Continued)

Route Redistribution     333
Mutual Redistribution at Multiple Routers
When multiple routers redistribute between the same two routing protocol domains, several potential 
problems can occur. One type of problem occurs on the redistributing routers, because those 
routers will learn a route to most subnets via both routing protocols. That router uses the AD to 
determine the best route when comparing the best routes from each of the two routing protocols; 
this typically results in some routes using suboptimal paths. For example, Figure 11-4 shows a 
sample network, with R3 choosing its AD 110 OSPF route to 10.1.2.0/24 over the probably better 
AD 120 RIP route.
Figure 11-4
OSPF and RIP Redistribution
NOTE
Route maps have an implied deny clause at the end of the route map. This implied 
deny clause matches all packets. As a result, any routes not matched in the explicitly conﬁgured 
route-map clauses match the implied deny clause, and are ﬁltered. Both route maps in the 
example used the implied deny clause to actually ﬁlter the routes.
NOTE
The OSPF conﬁguration for this network matches only the interfaces implied by the 
OSPF box in Figure 11-4. RIP does not have a wildcard-mask option on the network command, 
so R1’s and R3’s network commands will match all of their interfaces, as all are in network 
10.0.0.0.
R2
R3
R1
R5
10.1.2.0/24
10.1.3.0/24
10.1.1.0/24
10.1.4.0/24
10.1.5.0/24
10.1.23.0/24
10.1.12.0/24
10.1.34.0/24
10.1.15.0/24
10.1.45.0/24
Fa0/0
S0/0/0.2
RID
4.4.4.4
S0/0/0.3
Possible routes to 10.1.2.0/24:
RIP 1 hop through R2, AD 120
OSPF cost 244 through R4, AD 110
S0/0/0.5
RIP – AD 120
OSPF Area 0 – AD 110
R1 Redistributes
RIP into OSPF
R4

334     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
In Figure 11-4, R3 learns of subnet 10.1.2.0/24 via RIP updates from R2. Also, R1 learns of the 
subnet with RIP and redistributes the route into OSPF, and then R3 learns of a route to 10.1.2.0/24 
via OSPF. R3 chooses the route with the lower administrative distance; with all default settings, 
OSPF’s AD of 110 is better that RIP’s 120.
If both R1 and R3 mutually redistribute between RIP and OSPF, the suboptimal route problem 
would occur on either R1 or R3 for each RIP subnet, all depending on timing. Example 11-3 shows 
the redistribution conﬁguration, along with R3 having the suboptimal route shown in Figure 11-4. 
However, after R1’s fa0/0 interface ﬂaps, R1 now has a suboptimal route to 10.1.2.0/24, but R3 
has an optimal route.
Example 11-3
Suboptimal Routing at Different Redistribution Points 
! R1’s related configuration follows: 
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrroooouuuutttteeeerrrr----iiiidddd    1111....1111....1111....1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    ssssuuuubbbbnnnneeeettttssss
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....11115555....1111    0000....0000....0000....0000    aaaarrrreeeeaaaa    0000
!
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc    1111
! R3’s related configuration follows: 
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrroooouuuutttteeeerrrr----iiiidddd    3333....3333....3333....3333
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    ssssuuuubbbbnnnneeeettttssss
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....33334444....3333    0000....0000....0000....0000    aaaarrrreeeeaaaa    0000
!
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc    1111
! R3 begins with an AD 120 OSPF route, and not a RIP route, to 10.1.2.0/24. 
R3# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
O E2    10.1.2.0 [110/20] via 10.1.34.4, 00:02:01, Serial0/0/0.4
! R1 has a RIP route to 10.1.2.0/24, and redistributes it into OSPF, causing R3 
! to learn an OSPF route to 10.1.2.0/24. 
R1# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
R       10.1.2.0 [120/1] via 10.1.12.2, 00:00:08, FastEthernet0/0
! Next, R1 loses its RIP route to 10.1.2.0/24, causing R3 to lose its OSPF route.
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# iiiinnnntttt    ffffaaaa    0000////0000
R1(config-if)# sssshhhhuuuutttt
! R3 loses its OSPF route, but can then insert the RIP route into its table.

Route Redistribution     335
The key concept behind this seemingly odd example is that a redistributing router processes only 
the current contents of its IP routing table. When this network ﬁrst came up, R1 learned its RIP 
route to 10.1.2.0/24, and redistributed into OSPF, before R3 could do the same. So, R3 was faced 
with the choice of putting the AD 110 (OSPF) or AD 120 (RIP) route into its routing table, and R3 
chose the lower AD OSPF route. Because R3 never had the RIP route to 10.1.2.0/24 in its routing 
table, R3 could not redistribute that RIP route into OSPF. 
Later, when R1’s fa0/0 failed (as shown in Example 11-3), R3 had time to remove the OSPF route 
and add the RIP route for 10.1.2.0/24 to its routing table—which then allowed R3 to redistribute 
that RIP route into OSPF, causing R1 to have the suboptimal route.
To solve this type of problem, the redistributing routers must have some awareness of which routes 
came from the other routing domain. In particular, the lower-AD routing protocol needs to decide 
which routes came from the higher-AD routing protocol, and either use a different AD for those 
routes or ﬁlter the routes. The next few sections show a few different methods of preventing this 
type of problem. 
Preventing Suboptimal Routes by Setting the Administrative Distance
One simple and elegant solution to the problem of suboptimal routes on redistributing routers is 
to ﬂag the redistributed routes with a higher AD. A route’s AD is not advertised by the routing 
protocol; however, a single router can be conﬁgured such that it assigns different AD values to 
different routes, which then impacts that one router’s choice of which routes end up in that router’s 
routing table. For example, back in Figure 11-4 and Example 11-3, R3 could have assigned the 
OSPF-learned route to 10.1.2.0/24 an AD higher than 120, thereby preventing the original 
problem.
Figure 11-5 shows a more complete example, with a route from the RIP domain (10.1.2.0/24) and 
another from the OSPF domain (10.1.4.0/24). Redistributing router R3 will learn the two routes 
both from RIP and OSPF. By conﬁguring R3’s logic to treat OSPF internal routes with default 
AD 110, and OSPF external routes with AD 180 (or any other value larger than RIP’s default of 
120), R3 will choose the optimal path for both RIP and OSPF routes.
R3# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
R       10.1.2.0 [120/1] via 10.1.23.2, 00:00:12, Serial0/0/0.2
! Not shown: R1 brings up its fa0/0 again
! However, R1 now has the suboptimal route to 10.1.2.0/24, through OSPF.
R1# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
O E2    10.1.2.0 [110/20] via 10.1.15.5, 00:00:09, Serial0/0/0.5
Example 11-3
Suboptimal Routing at Different Redistribution Points (Continued)

336     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Figure 11-5
The Effect of Differing ADs for Internal and External Routes
Example 11-4 shows how to conﬁgure both R1 and R3 to use a different AD for external routes 
by using the distance ospf external 180 command, under the router ospf process. 
Example 11-4
Preventing Suboptimal Routes with the distance Router Subcommand 
! Both R1’s and R3’s configurations look like they do in Example 11-3’s, but with the   
! addition of the ddddiiiissssttttaaaannnncccceeee command. 
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    ddddiiiissssttttaaaannnncccceeee    oooossssppppffff    eeeexxxxtttteeeerrrrnnnnaaaallll    111188880000
! R3 has a more optimal RIP route to 10.1.2.0/24, as does R1.
R3# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
R       10.1.2.0 [120/1] via 10.1.23.2, 00:00:19, Serial0/0/0.2
! R1 next…
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000_
RRRR       10.1.2.0 [120/1] via 10.1.12.2, 00:00:11, FastEthernet0/0
! R1 loses its next-hop interface for the RIP route, so now its OSPF route, with
! AD 180, is its only and best route to 10.1.2.0/24.
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# iiiinnnntttt    ffffaaaa    0000////0000
R1(config-if)# sssshhhhuuuutttt
R1(config-if)# ddddoooo    sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
O E2    10.1.2.0 [180/20] via 10.1.15.5, 00:00:05, Serial0/0/0.5
R4
R2
R3
R1
10.1.4.0/24
10.1.2.0/24
10.1.4.0/24
RIP
RIP – AD 120
OSPF:
Internal AD 110
External AD 180
10.1.2.0/24
RIP
10.1.2.0/24
RIP
10.1.2.0/24
OSPF E2
10.1.2.0/24
OSPF E2
10.1.4.0/24
OSPF Int.
10.1.4.0/24
RIP
10.1.4.0/24
OSPF Int.
Routing Info for 10.1.2.0/24
Routing Info for 10.1.4.0/24
• For 10.1.2.0/24: Pick AD 120 RIP
route over AD 180 OSPF route
• For 10.1.4.0/24: Pick AD 110
OSPF route over AD 120 RIP 
route

Route Redistribution     337
EIGRP supports the exact same concept by default, using AD 170 for external routes and 90 for 
internal routes. In fact, if EIGRP were used instead of OSPF in this example, neither R1 nor R3 
would have experienced any of the suboptimal routing. You can reset EIGRP’s distance for internal 
and external routes by using the distance eigrp router subcommand. (At presstime, neither the 
IS-IS nor RIP distance commands support setting external route ADs and internal route ADs to 
different values.)
In some cases, the requirements may not allow for setting all external routes’ ADs to another value. 
For instance, if R4 injected some legitimate external routes into OSPF, the conﬁguration in 
Example 11-4 would result in either R1 or R3 having a suboptimal route to those external routes 
that pointed through the RIP domain. In those cases, the distance router subcommand can be used 
in a different way, inﬂuencing some or all of the routes that come from a particular router. The 
syntax is as follows:
ddddiiiissssttttaaaannnncccceeee {distance-value ip-address {wildcard-mask} [ip-standard-list] [ip-extended-
  list] 
This command sets three key pieces of information: the AD to be set, the IP address of the router 
advertising the routes, and, optionally, an ACL with which to match routes. With RIP, EIGRP, and 
IS-IS, this command identiﬁes a neighboring router’s interface address using the ip-address 
wildcard-mask parameters. With OSPF, those same parameters identify the RID of the router 
owning (creating) the LSA for the route. The optional ACL then identiﬁes the subset of routes for 
which the AD will be set. The logic boils down to something like this: 
Set this AD value for all routes, learned from a router that is deﬁned by the IP address 
and wildcard mask, and for which the ACL permits the route.
Example 11-5 shows how the command could be used to solve the same suboptimal route problem 
on R1 and R3, while not causing suboptimal routing for other external routes. The design goals 
are summarized as follows:
■
Set a router’s local AD for its OSPF routes for subnets in the RIP domain to a value of 179, 
thereby making the RIP routes to those subnets better than the OSPF routes to those same 
subnets. 
■
Do not set the AD for any other routes.
Example 11-5
Using the distance Command to Reset Particular Routes’ ADs 
! R1 config. Note that the command refers to 3.3.3.3, which is R3’s RID. Other
! commands not related to resetting the AD are omitted. Of particular importance,
! the ddddiiiissssttttaaaannnncccceeee command on R1 refers to R3’s OSPF RID, because R3 created the OSPF
! LSAs that we are trying to match—the LSAs created when R3 injected the 
! routes redistributed from RIP.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    ddddiiiissssttttaaaannnncccceeee    111177779999    3333....3333....3333....3333    0000....0000....0000....0000    oooonnnnllllyyyy----rrrriiiipppp----rrrroooouuuutttteeeessss
continues

338     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Preventing Suboptimal Routes by Using Route Tags
Another method of preventing suboptimal routing on the redistributing routers is to simply ﬁlter the 
problematic routes. Using subnet 10.1.2.0/24 as an example again, R3 could use an incoming 
distribute-list command to ﬁlter the OSPF route to 10.1.2.0/24, allowing R3 to use its RIP route to 
10.1.2.0/24. R1 would need to perform similar route ﬁltering as well to prevent its suboptimal route.
Performing simple route ﬁltering based on IP subnet number works, but the redistributing routers 
will need to be reconﬁgured every time subnets change in the higher-AD routing domain. The 
administrative effort can be improved by adding route tagging to the process. By tagging all routes 
taken from the higher-AD domain and advertised into the lower-AD domain, the distribute-list 
command can make a simple check for that tag. Figure 11-6 shows the use of this idea for subnet 
10.1.2.0/24.
Route tags are simply unitless integer values in the data structure of a route. These tags, typically 
either 16 or 32 bits long depending on the routing protocol, allow a router to imply something 
about a route that was redistributed from another routing protocol. For instance, R1 can tag its 
OSPF-advertised route to 10.1.2.0/24 with a tag—say, 9999. OSPF does not deﬁne what a tag of 
9999 means, but the OSPF protocol includes the tag ﬁeld in the LSA so that it can be used for 
administrative purposes. Later, R3 can ﬁlter routes based on their tag, solving the suboptimal route 
problem.
Figure 11-6 and Example 11-6 depict an example of route tagging and route ﬁltering, used to solve 
the same old problem with suboptimal routes. R1 and R3 tag all redistributed RIP routes with tag 
9999 as they enter the OSPF domain, and then R1 and R3 ﬁlter incoming OSPF routes based on 
the tags. This design works well because R1 can tag all redistributed RIP routes, thereby removing 
the need to change the conﬁguration every time a new subnet is added to the RIP domain. (Note 
that both R1 and R3 will tag routes injected from RIP into OSPF as 9999, and both will then ﬁlter 
OSPF-learned routes with tag 9999. Figure 11-6 just shows one direction to keep the ﬁgure less 
cluttered.)
!
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    ssssttttaaaannnnddddaaaarrrrdddd    oooonnnnllllyyyy----rrrriiiipppp----rrrroooouuuutttteeeessss
    ppppeeeerrrrmmmmiiiitttt    11110000....1111....11112222....0000
    ppppeeeerrrrmmmmiiiitttt    11110000....1111....3333....0000
    ppppeeeerrrrmmmmiiiitttt    11110000....1111....2222....0000
    ppppeeeerrrrmmmmiiiitttt    11110000....1111....22223333....0000
! R3 config. Note that the command refers to 1.1.1.1, which is R1’s RID. Other
! commands not related to resetting the AD are omitted. Also, the only-rip-routes
! ACL is identical to R1’s only-rip-routes ACL.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
ddddiiiissssttttaaaannnncccceeee    111177779999    1111....1111....1111....1111    0000....0000....0000....0000    oooonnnnllllyyyy----rrrriiiipppp----rrrroooouuuutttteeeessss
Example 11-5
Using the distance Command to Reset Particular Routes’ ADs (Continued)

Route Redistribution     339
Figure 11-6
Filtering with Reliance on Route Tags
Example 11-6
Using Route Tags and Distribute Lists to Prevent Suboptimal Routes at Redistributing 
Routers 
! R1 config. The rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee command calls the route map that tags routes taken
! from RIP as 9999. ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt looks at routes learned in OSPF that were
! earlier tagged by R3.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    ssssuuuubbbbnnnneeeettttssss    rrrroooouuuutttteeee----mmmmaaaapppp    ttttaaaagggg----rrrriiiipppp----9999999999999999
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....11115555....1111    0000....0000....0000....0000    aaaarrrreeeeaaaa    0000
    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ttttaaaagggg----9999999999999999    iiiinnnn
! Clause 10, a ddddeeeennnnyyyy clause, matches all tagged 9999 routes—so those 
! routes are filtered. Clause 20 permits all other routes, because with no mmmmaaaattttcccchhhh
! subcommand, the clause is considered to “match all.”
rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ttttaaaagggg----9999999999999999    ddddeeeennnnyyyy    11110000
    mmmmaaaattttcccchhhh    ttttaaaagggg    9999999999999999
!
rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ttttaaaagggg----9999999999999999    ppppeeeerrrrmmmmiiiitttt    22220000
! tag-rip-9999 matches all routes (it has no mmmmaaaattttcccchhhh command), and then
! tags them all with tag 9999. This rrrroooouuuutttteeee----mmmmaaaapppp is used only for routes taken from
! RIP into OSPF.
rrrroooouuuutttteeee----mmmmaaaapppp    ttttaaaagggg----rrrriiiipppp----9999999999999999    ppppeeeerrrrmmmmiiiitttt    11110000
    sssseeeetttt    ttttaaaagggg    9999999999999999
! R3 Config
! The R3 configuration does not have to use the same names for route maps, but
continues
R4
R2
R3
R1
10.1.4.0/24
10.1.2.0/24
RIP – AD 120
OSPF: AD 110
Filtering Routes with Tag 9999
10.1.2.0/24
RIP
10.1.2.0/24
RIP
10.1.2.0/24
Tag 9999
10.1.2.0/24
Tag 9999
Filter incoming OSPF routes:
Don’t put routes tagged 9999 in
my routing table!
When injecting RIP
routes into OSPF, tag
them with 9999

340     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
The last few lines of the example show the largest negative of using route ﬁltering to prevent the 
suboptimal routes. When R3 loses connectivity to R2, R3 does not use the alternate route through 
the OSPF domain. R3’s ﬁltering of those routes occurs regardless of whether R3’s RIP routes are 
available or not. As a result, using a solution that manipulates the AD may ultimately be the better 
solution to this suboptimal-routing problem.
Using Metrics and Metric Types to Inﬂuence Redistributed Routes
A different set of issues can occur for a router that is internal to a single routing domain, like R4 
and R5 in Figure 11-4. The issue is simple—with multiple redistributing routers, an internal router 
learns multiple routes to the same subnet, so it must pick the best route. As covered earlier in the 
chapter, the redistributing routers can set the metrics; by setting those metrics with meaningful 
values, the internal routers can be inﬂuenced to use a particular redistribution point.
! the essential elements are identical, so the route maps are not repeated here.
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    rrrriiiipppp    ssssuuuubbbbnnnneeeettttssss    rrrroooouuuutttteeee----mmmmaaaapppp    ttttaaaagggg----rrrriiiipppp----9999999999999999
    nnnneeeettttwwwwoooorrrrkkkk    11110000....1111....33334444....3333    0000....0000....0000....0000    aaaarrrreeeeaaaa    0000
    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ttttaaaagggg----9999999999999999    iiiinnnn
! R3 (shown) and R1 have RIP routes to 10.1.2.0, as well as other routes from the
! RIP domain. Also, note that the OSPF LSDB shows the tagged values on the routes.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
R       10.1.2.0 [120/1] via 10.1.23.2, 00:00:26, Serial0/0/0.2
R3# sssshhhh    iiiipppp    oooossssppppffff    ddddaaaattttaaaa  bbbbeeeeggggiiiinnnn    TTTTyyyyppppeeee----5555
                Type-5 AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
10.1.1.0        1.1.1.1         834         0x80000006 0x00CE86 9999
10.1.1.0        3.3.3.3         458         0x80000003 0x0098B7 9999
10.1.2.0        1.1.1.1         834         0x80000006 0x00C390 9999
10.1.2.0        3.3.3.3         458         0x80000003 0x008DC1 9999
! lines omitted for brevity
! Next, the unfortunate side effect of filtering the routes—R3 does not have an
! alternative route to RIP subnets, although OSPF internal routers (like R4
! in Figure 11-6) will.
R3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# iiiinnnntttt    ssss0000////0000////0000....2222
R3(config-subif)# sssshhhhuuuutttt
R3(config-subif)# ^^^^ZZZZ
R3# sssshhhh    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....2222....0000
R3#
Example 11-6
Using Route Tags and Distribute Lists to Prevent Suboptimal Routes at Redistributing 
Routers (Continued)

Route Redistribution     341
Interestingly, internal routers may not use metric as their ﬁrst consideration when choosing the 
best route. For instance, an OSPF internal router will ﬁrst take an intra-area route over an inter-
area route, regardless of their metrics. Table 11-8 lists the criteria an internal router will use when 
picking the best route, before considering the metrics of the different routes.
To illustrate some of these details, Example 11-7 focuses on R4 and its routes to 10.1.2.0/24 and 
10.1.5.0/24 from Figure 11-4. The example shows the following, in order:
1.
R1 and R3 advertise 10.1.2.0/24 as an E2 route, metric 20. R4 uses the route through R3, 
because R4’s cost to reach ASBR R3 is lower than its cost to reach ASBR R1.
2.
After changing R1 to advertise redistributed routes into OSPF as E1 routes, R4 uses the E1 
routes through R1, even though the metric is larger than the E2 route through R3.
3.
R4 uses it higher-metric intra-area route to 10.1.5.0/24 through R5. Then, the R4-R5 link fails, 
causing R4 to use the OSPF external E2 route to 10.1.5.0/24—the route that leads through the 
RIP domain and back into OSPF via the R3-R2-R1-R5 path.
Table 11-8
IGP Order of Precedence for Choosing Routes Before Considering the Metric
IGP 
Order of Precedence of Metric
RIP
No other considerations
EIGRP
Internal, then external
OSPF
Intra-area, inter-area, E1, then E2*
IS-IS
L1, L2, external
* For E2 routes whose metric ties, OSPF also checks the cost to the advertising ASBR.
Example 11-7
Demonstration of the Other Decision Criteria for Choosing the Best Routes 
! R4 has E2 routes to all the subnets in the RIP domain, and they all point to R3.
R4# sssshhhh    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
10.0.0.0/24 is subnetted, 10 subnets
O       10.1.15.0 [110/128] via 10.1.45.5, 00:03:23, Serial0/0/0.5
O E2    10.1.12.0 [110/20] via 10.1.34.3, 00:03:23, Serial0/0/0.3
O E2    10.1.3.0 [110/20] via 10.1.34.3, 00:03:23, Serial0/0/0.3
O E2    10.1.2.0 [110/20] via 10.1.34.3, 00:03:23, Serial0/0/0.3
O E2    10.1.1.0 [110/20] via 10.1.34.3, 00:03:23, Serial0/0/0.3
O       10.1.5.0 [110/65] via 10.1.45.5, 00:03:23, Serial0/0/0.5
O E2    10.1.23.0 [110/20] via 10.1.34.3, 00:03:23, Serial0/0/0.3
! R4 chose the routes through R3 instead of R1 due to the lower cost to R3.
R4# sssshhhhoooowwww    iiiipppp    oooossssppppffff    bbbboooorrrrddddeeeerrrr----rrrroooouuuutttteeeerrrrssss 
OSPF Process 1 internal Routing Table
Codes: i - Intra-area route, I - Inter-area route
continues

342     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Route Summarization
Route summarization creates a single route whose numeric range, as implied by the preﬁx/preﬁx 
length, is larger than the one or more smaller component routes. For example, 10.1.0.0/16 is a 
summary route that includes component subnets 10.1.1.0/24, 10.1.4.132/30, and any other subnets 
with the range 10.1.0.0 through 10.1.255.255. 
The following list details some of the key features that the three IGPs covered in this book have in 
common with regard to how route summarization works (by default):
■
The advertised summary is assigned the same metric as the currently lowest-metric 
component subnet.
■
The router does not advertise the component subnets.
■
The router does not advertise the summary when its routing table does not have any of the 
component subnets.
■
The summarizing router creates a local route to the summary, with destination null0, to 
prevent routing loops.
i 1.1.1.1 [128] via 10.1.45.5, Serial0/0/0.5, ASBR, Area 0, SPF 13
i 3.3.3.3 [64] via 10.1.34.3, Serial0/0/0.3, ASBR, Area 0, SPF 13
! (Not Shown): R1 is changed to redistribute RIP routes as E1 routes by 
! adding the mmmmeeeettttrrrriiiicccc----ttttyyyyppppeeee    1111 option on the rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee command on R1.
! R4 picks routes through R1 because they are E1 routes, even though the metric
! (148) is higher than the routes through R3 (cost 20)
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
10.0.0.0/24 is subnetted, 10 subnets
O E1    10.1.2.0 [110/148] via 10.1.45.5, 00:00:11, Serial0/0/0.5
! lines omitted for brevity
! R4’s route to 10.1.5.0/24 below is intra-area, metric 65
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....5555....0000
O       10.1.5.0 [110/65] via 10.1.45.5, 00:04:48, Serial0/0/0.5
! (Not Shown): R4 shuts down link to R5
! R4’s new route to 10.1.5.0/24 is E2, learned from R3, with metric 20
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    11110000....1111....5555....0000\\\\
O E2    10.1.5.0 [110/20] via 10.1.34.3, 00:10:52, Serial0/0/0.3
NOTE
I use the term component route to refer to a route whose range of IP addresses is a 
subset of the range speciﬁed by a summary route; however, I have not seen this term in other 
reference materials from Cisco.
Example 11-7
Demonstration of the Other Decision Criteria for Choosing the Best Routes (Continued)

Route Summarization     343
■
Summary routes reduce the size of routing tables and topology databases, indirectly 
improving convergence.
■
Summary routes decrease the amount of speciﬁc information in routing tables, sometimes 
causing suboptimal routing.
Figure 11-7 depicts the suboptimal-routing side effect when using route summarization. It also 
depicts the effect of using a summary to null0 on the summarizing router.
Figure 11-7
Route Summarization Suboptimal Routing and Routing to Null0
In Figure 11-7, R4 learned two paths to summary route 10.0.0.0/8, and picked the route through 
R3 based on the metric. Because R4 does not have a route for 10.2.2.0/24, R4 then sends any 
packets to that subnet based on its route to network 10.0.0.0/8, through R3. So, although subnets 
like 10.2.2.0/24 may be topologically closer to R4 through R1, R4 sends the packets via the scenic, 
suboptimal route through R3.
Also note that R4’s summary route to 10.0.0.0/8 matches packets for which the component subnet 
does not exist anywhere in the network. In that case, routers like R4 forward the packets based on 
the larger summary, but once the packet reaches the router that created the summary, the packet is 
discarded by the summarizing router due to its null route. For instance, Figure 11-7 shows R4 
forwarding a packet destined to 10.3.3.1 to R3. R3 does not have a more speciﬁc route than its 
route to 10.0.0.0/8, with next-hop interface null0. As a result, R3 discards the packet.
The sections that follow provide a few details about summarization with each routing protocol.
R3
R4
R1
Subnets That All
Begin with 10.1
R3 Routing Table:
10.1.1.0/24…
10.1.2.0/24…
10.2.2.0/24…
10.0.0.0/8, to null0
R4 Routing Table:
10.0.0.0/8, to R3
Subnets That All
Begin with 10.2
Subnet 10.2.2.0/24
Packet to 10.3.3.1
Packet to 10.2.2.1
Summary 10.0.0.0/8
Summary 10.0.0.0/8
Both packets match my
best route to 10.0.0.0/8,
which points to R3
• Packet to 10.3.3.1 matches
route to Null0 – Discard
• Packet to 10.2.2.1 matches
specific route – Forward
Represents Routing Updates
Represents Example Packets

344     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
EIGRP Route Summarization
EIGRP provides the easiest and most straightforward rules for summarizing routes as compared 
with RIPv2, OSPF, and IS-IS. To summarize routes, the ip summary-address eigrp as-number 
network-address subnet-mask [admin-distance] command is placed under an interface. If any of 
the component routes are in that router’s routing table, EIGRP advertises the summary route out 
that interface. The summary is deﬁned by the network-address subnet-mask parameters.
One of the more interesting features of the EIGRP summary is the ability to set the AD of the 
summary route. The AD is not advertised with the route; the summarizing router, however, uses 
the conﬁgured AD to determine whether the null route for the summary should be put into its 
routing table. The EIGRP AD for summary routes defaults to 5.
OSPF Route Summarization
All OSPF routers in the same area must have identical LSDBs after ﬂooding is complete. As a 
result, all routers in the same OSPF area must have the same summary routes, and must be missing 
the same component subnets of each summary. To make that happen, OSPF allows route 
summarization only as routes are injected into an area, either by an ABR (inter-area routes) or by 
an ASBR (external routes).
OSPF uses two different conﬁguration commands to create the summary routes, depending on 
whether the summary is for inter-area or external routes. Table 11-9 lists the two commands. Both 
commands are conﬁgured under router ospf.
The commands have a couple of important attributes. First, the area range command speciﬁes an 
area; this area is the area in which the component subnets reside, with the summary being 
advertised into all other areas. Also, the area range command can set the cost for the summary 
route, instead of using the lowest cost of all component routes. Also, the not-advertise keyword 
can essentially be used to ﬁlter the subnets implied by the summary, as covered in Chapter 10, 
“OSPF.”
The summary-address command summarizes external routes as they are injected into OSPF as 
an ASBR. The cost can be assigned, and the routes can be ﬁltered using the not-advertise 
keyword.
Table 11-9
OSPF Route Summarization Commands
KEY 
POINT
Where used
Command
ASBR
summary-address {{ip-address mask} | {preﬁx mask}} [not-advertise] [tag tag]
ABR
area area-id range ip-address mask [advertise | not-advertise] [cost cost]

Default Routes     345
RIP Route Summarization
RIP route summarization is weird in comparison to route summarization in the other IGPs, but at 
ﬁrst glance, it appears to work just like EIGRP. To summarize routes, RIP uses the interface 
subcommand ip summary-address rip ip-address ip-network-mask. It can be used on any 
interface out which RIP advertises routes. If any of the component routes are in that router’s 
routing table, RIP advertises the summary route out the interface, as deﬁned by the ip-address 
ip-network-mask parameters. It also ceases advertising the component routes out that interface. 
So far its sounds just like EIGRP summarization; however, there are a couple of unique 
restrictions. First, RIP route summarization works only with RIPv2, because RIPv1 does not 
support VLSM. Also, RIP does not allow supernetting—for instance, the command ip summary-
address rip 172.16.0.0 255.254.0.0, which would combine two class B networks into one 
summary, is not supported by RIP. Finally, on a single interface, only one ip summary-address 
rip command is allowed per classful network. In other words, RIP would not allow a router to 
create two summary routes, one for 10.1.0.0/16 and one for 10.2.0.0/16, and advertise both out the 
same interface. EIGRP has none of these restrictions.
Default Routes
Routers forward packets using a default route when there are no speciﬁc routes that match a 
packet’s destination IP address in the IP routing table. Routing protocols can advertise default 
routes, with each router choosing the best default route to list as that router’s gateway of last resort. 
This section covers how a router can create a default route and then cause an IGP to advertise the 
default route.
In addition to the advertisement of default routes, each router may use one of two options for how 
the default route is used. As described in Chapter 7, “IP Forwarding (Routing),” each router’s 
conﬁguration includes either the (default) ip classless command or the no ip classless command. 
With ip classless, if a packet’s destination does not match a speciﬁc route in the IP routing table, 
the router uses the default route. With no ip classless, the router ﬁrst checks to see if any part of 
the destination address’s classful network is in the routing table. If so, that router will not use the 
default route for forwarding that packet. 
Cisco IOS supports ﬁve basic methods of advertising default routes with IGPs, four of which are 
covered here. One method for advertising a default route is for one routing protocol to redistribute 
another routing protocol’s default route. Because route redistribution has already been covered 
NOTE
The topic of default routing requires discussion of the conﬁguration on one router, plus 
conﬁguration of the other routers using the same IGP. For this section, I will call the router with 
the default routing conﬁguration the “local” router, and other routers using the same IGP “other” 
routers.

346     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
heavily, this section of the chapter covers other methods. Of the other four methods, not all are 
supported by all IGPs, as you can see in Table 11-10. 
Interestingly, when a router learns of multiple default routes, using any of these methods, it will 
use the usual process for choosing the best route: administrative distance, route type (per Table 11-9, 
earlier in this chapter), and lowest metric, in that order.
Figure 11-8 shows a sample network used with all the default route examples, in which R1 is the 
local router that conﬁgures the default routing commands. 
Figure 11-8
Sample Network for Default Route Examples
Table 11-10
Four Methods for Learning Default Routes
KEY 
POINT
Feature
RIP
EIGRP
OSPF
Static route to 0.0.0.0, with the redistribute static command
Yes
Yes
No
The default-information originate command
Yes
No
Yes
The ip default-network command
Yes
Yes
No
Using summary routes
No
Yes
No
NOTE
Table 11-10 has details that may be difﬁcult to memorize. To make it easier, you could 
start by ignoring the use of summary static routes, because it is not recommended by Cisco. 
Then, note that RIP supports the other three methods, whereas EIGRP supports two methods 
and OSPF supports only one—with EIGRP and OSPF not supporting any of the same options.
R1
R9
R3
R5
13.1.2.3/24
13.1.1.0/24
15.1.1.0/24
17.1.1.0/24
Fa0/0
15.1.2.5/24
Fa0/0
17.1.2.7/24
Fa0/0
RID 1.1.1.1
RID 5.5.5.5
.3
0/0/0.1
.5
0/0.1
.1
.1
.1
.1
.7
R4
14.1.1.4/24
14.1.1.0/24
10.1.1.102/24
Fa0/0
Fa0/0
.4
0/0/0.1
R7
RIP
Network 13.0.0.0
OSPF 1 (Two Areas, with R5 as ABR)
Network 15.0.0.0
IS-IS (Both Routers Are L2)
Network 17.0.0.0
EIGRP 1
Network 14.0.0.0

Default Routes     347
Using Static Routes to 0.0.0.0, with redistribute static
Routers consider a route to 0.0.0.0/0 as a default route. RIP and EIGRP support redistribution of 
static routes, including such a default static route. The rules and conditions for redistributing static 
defaults into RIP and EIGRP are as follows:
■
The static ip route 0.0.0.0 0.0.0.0 and redistribute static commands need to be conﬁgured 
on the same local router.
■
The metric must be defaulted or set, using the same methods covered earlier in this chapter.
■
The redistribute command can refer to a route map, which examines all static routes (not just 
the default).
■
EIGRP treats the default route as an external route by default, with default AD 170.
■
This method is not supported by OSPF.
Example 11-8 shows how R1 can inject defaults via RIP to R3 and via EIGRP to R4. The EIGRP 
conﬁguration refers to a route map that examines all static routes, matching only static default 
routes. If other static routes existed, EIGRP would not advertise those routes based on the 
route map. 
Example 11-8
Static Default Route with Route Redistribution 
! R1 Config—note that iiiipppp    ccccllllaaaasssssssslllleeeessssssss is configured, but it does not impact the
! advertisement of the static route at all. 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    ssssttttaaaattttiiiicccc    rrrroooouuuutttteeee----mmmmaaaapppp    jjjjuuuusssstttt----ddddeeeeffffaaaauuuulllltttt
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    11114444....0000....0000....0000
    ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc    1111555544444444    11110000    1111    1111    1111
!
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    ssssttttaaaattttiiiicccc
    nnnneeeettttwwwwoooorrrrkkkk    11113333....0000....0000....0000
    ddddeeeeffffaaaauuuulllltttt----mmmmeeeettttrrrriiiicccc    1111
!
iiiipppp    ccccllllaaaasssssssslllleeeessssssss
! The static route is configured next, followed by the prefix list that matches 
! the default route, and the route map that refers to the prefix list.
iiiipppp    rrrroooouuuutttteeee    0000....0000....0000....0000    0000....0000....0000....0000    11110000....1111....1111....111100002222
!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    zzzzeeeerrrroooo----pppprrrreeeeffffiiiixxxx    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000
!
rrrroooouuuutttteeee----mmmmaaaapppp    jjjjuuuusssstttt----ddddeeeeffffaaaauuuulllltttt    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    zzzzeeeerrrroooo----pppprrrreeeeffffiiiixxxx
!
continues
KEY
POINT

348     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Using the default-information originate Command
OSPF does not support redistribution of statically deﬁned default routes. Instead, OSPF requires 
the default-information originate router subcommand, which essentially tells OSPF to 
redistribute any default routes found in the routing table, either static routes or routes from another 
routing protocol. The following list summarizes the default routing features when using the 
default-information originate command with OSPF:
■
Redistributes any default route (0.0.0.0/0) in the routing table.
■
The command can set the metric and metric type directly, with OSPF defaulting to cost 1 and 
type E2.
■
OSPF allows the use of the always keyword, which means a default is sourced regardless of 
whether a default route is in the routing table.
■
Not supported by EIGRP.
■
Supported by RIP, with some differences. (Refer to the text following Example 11-9 for an 
explanation of the differences.)
rrrroooouuuutttteeee----mmmmaaaapppp    jjjjuuuusssstttt----ddddeeeeffffaaaauuuulllltttt    ddddeeeennnnyyyy    22220000
! Next, R3, the RIP router, lists R1 (13.1.1.1) as its gateway of last resort,
! based on the RIP route to 0.0.0.0/0, next hop 13.1.1.1.
R3# sssshhhh    iiiipppp    rrrroooouuuutttteeee
! Lines omitted for brevity
Gateway of last resort is 13.1.1.1 to network 0.0.0.0
     13.0.0.0/24 is subnetted, 2 subnets
C       13.1.1.0 is directly connected, Serial0/0/0.1
C       13.1.2.0 is directly connected, FastEthernet0/0
R*   0.0.0.0/0 [120/1] via 13.1.1.1, 00:00:12, Serial0/0/0.1
! Next, R4, the EIGRP router, lists R1 (14.1.1.1) as its gateway of last resort,
! based on the EIGRP route to 0.0.0.0/0, next hop 14.1.1.1. Note that the default
! points to 0.0.0.0/0, AD 170, as it is an external route, due to the EX listed
! in the output of the sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee command.
R4# sssshhhh    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity
Gateway of last resort is 14.1.1.1 to network 0.0.0.0
D    10.0.0.0/8 [90/2172416] via 14.1.1.1, 00:01:30, Serial0/0/0.1
     14.0.0.0/24 is subnetted, 2 subnets
C       14.1.2.0 is directly connected, FastEthernet0/0
C       14.1.1.0 is directly connected, Serial0/0/0.1
D*EX 0.0.0.0/0 [170/2172416] via 14.1.1.1, 00:01:30, Serial0/0/0.1
Example 11-8
Static Default Route with Route Redistribution (Continued)
KEY
POINT

Default Routes     349
Example 11-9 shows an example of using the default-information originate command with 
OSPF. In this case, R1 has learned a route to 0.0.0.0/0 via BGP from R9 in Figure 11-8. 
As mentioned earlier, RIP does support the default-information originate command; however, 
the command behaves slightly differently in RIP than it does in OSPF. With RIP, this command 
creates and advertises a default route if either no default route exists or a default route was learned 
from another routing protocol. However, if a static route to 0.0.0.0/0 is in the local routing table, 
the default-information originate command does not cause RIP to inject a default—the reason 
behind this behavior is that RIP already supports redistribution of static routes, so redistribute 
static should be used in that case.
Using the ip default-network Command
RIP and EIGRP can inject default routes by using the ip default-network command. To do so, the 
following must be true on the local router:
■
The local router must conﬁgure the ip default-network net-number command, with net-
number being a classful network number.
■
The classful network must be in the local router’s IP routing table, via any means.
■
For EIGRP only, the classful network must be advertised by the local router into EIGRP, again 
through any means.
■
This method is not supported by OSPF.
When using the ip default-network command, RIP and EIGRP differ in how they advertise the 
default. RIP advertises a route to 0.0.0.0/0, but EIGRP ﬂags its route to the classful network as a 
candidate default route. Because EIGRP ﬂags these routes as candidates, EIGRP must then also 
be advertising those classful networks. However, because RIP does not ﬂag the classful network 
as a candidate default route, RIP does not actually have to advertise the classful network 
referenced in the ip default-network command.
Example 11-9
Static Default Route with Route Redistribution
rrrroooouuuutttteeeerrrr    oooossssppppffff    1111
    nnnneeeettttwwwwoooorrrrkkkk    11115555....0000....0000....0000    0000....222255555555....222255555555....222255555555    aaaarrrreeeeaaaa    0000
    ddddeeeeffffaaaauuuulllltttt----iiiinnnnffffoooorrrrmmmmaaaattttiiiioooonnnn    oooorrrriiiiggggiiiinnnnaaaatttteeee
! R5 has a default route, defaulting to type E2, cost 1. It as advertised as a
! type 5 LSA.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    oooossssppppffff
O*E2 0.0.0.0/0 [110/1] via 15.1.1.1, 00:18:07, Serial0/0.1
R5# sssshhhh    iiiipppp    oooossssppppffff    ddddaaaattttaaaa | bbbbeeeeggggiiiinnnn    TTTTyyyyppppeeee----5555
                 Type-5 AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
0.0.0.0         1.1.1.1         1257        0x80000001 0x008C12 1

350     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Example 11-10 shows the key difference between RIP and EIGRP with regard to the ip default-
network command. In this case, R1 will advertise about classful network 10.0.0.0 using EIGRP 
due to the auto-summary command.
Using Route Summarization to Create Default Routes
Generally speaking, route summarization combines smaller address ranges into a small number of 
larger address ranges. From that perspective, 0.0.0.0/0 is the largest possible summary, because it 
includes all possible IPv4 addresses. And, as it turns out, EIGRP route summarization supports 
summarizing the 0.0.0.0/0 supernet, effectively creating a default route.
Because route summarization causes a null route to be created for the summary, some Cisco 
documentation advises against using route summarization to create a default route. For example, 
Example 11-10
Static Default Route with Route Redistribution
! EIGRP will advertise classful network 10.0.0.0/8 due to its nnnneeeettttwwwwoooorrrrkkkk command,
! matching R1’s fa0/0 interface, and the aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy command. Also, R1 must have
! a route to classful network 10.0.0.0/8, in this case due to a static route.
! RIP will not advertise classful network 10.0.0.0/8, but it will still be able
! to inject a default route based on the iiiipppp    ddddeeeeffffaaaauuuulllltttt----nnnneeeettttwwwwoooorrrrkkkk command. 
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    1111
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    11114444....0000....0000....0000
    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
!
rrrroooouuuutttteeeerrrr    rrrriiiipppp
    vvvveeeerrrrssssiiiioooonnnn    2222
    nnnneeeettttwwwwoooorrrrkkkk    11113333....0000....0000....0000
!
iiiipppp    ccccllllaaaasssssssslllleeeessssssss
iiiipppp    ddddeeeeffffaaaauuuulllltttt----nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
iiiipppp    rrrroooouuuutttteeee    11110000....0000....0000....0000    222255555555....0000....0000....0000    11110000....1111....1111....111100002222
! On R3, RIP learns a route to 0.0.0.0/0 as its default.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    rrrriiiipppp
R*   0.0.0.0/0 [120/1] via 13.1.1.1, 00:00:19, Serial0/0/0.1
! On R4, note that EIGRP learned a route to 10.0.0.0/8, shown with a * that 
! flags the route as a candidate default route. 
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
! lines omitted for brevity
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route
Gateway of last resort is 14.1.1.1 to network 10.0.0.0
D*   10.0.0.0/8 [90/2172416] via 14.1.1.1, 00:05:35, Serial0/0/0.1
     14.0.0.0/24 is subnetted, 2 subnets
C       14.1.2.0 is directly connected, FastEthernet0/0
C       14.1.1.0 is directly connected, Serial0/0/0.1

Default Routes     351
in Figure 11-8, imagine that R9 is owned by this network’s ISP, and R1 learns a default route 
(0.0.0.0/0) via EBGP from R9. However, when R1 conﬁgures an EIGRP default route using route 
summarization, R1 will also create a local route to 0.0.0.0/0 as well, but with destination null0. 
The EBGP route has a higher AD (20) than the EIGRP summary route to null0 (AD 5), so R1 will 
now replace its BGP-learned default route with the summary route to null0—preventing R1 from 
being able to send packets to the Internet.
Route summarization can still be used to create default routes with the proper precautions. The 
following list details a few of the requirements and options:
■
The local router creates a local summary route, destination null0, using AD 5 (EIGRP), when 
deciding if its route is the best one to add to the local routing table.
■
EIGRP advertises the summary to other routers as AD 90 (internal).
■
This method is not supported by RIP and OSPF.
■
To overcome the caveat of EIGRP’s default route being set to null by having a low AD, set 
the AD higher (as needed) with the ip summary-address command.
Example 11-11 lists a sample conﬁguration on R1 again, this time creating summary routes to 
0.0.0.0/0 for EIGRP.
Example 11-11
EIGRP and IS-IS Conﬁguration for Creating Default Summary Routes 
! EIGRP route summarization is done under s0/0/0.4, the subnet connected to R4. In this
! example, the AD was changed to 7 (default 5) just to show how to change the AD. To
! avoid the problem with the default route to null0 on R1, the AD should have been set
! higher than the default learned via BGP. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....4444    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11114444....1111....1111....1111    222255555555....222255555555....222255555555....0000
    iiiipppp    ssssuuuummmmmmmmaaaarrrryyyy----aaaaddddddddrrrreeeessssssss    eeeeiiiiggggrrrrpppp    1111    0000....0000....0000....0000    0000....0000....0000....0000    7777
! In this example, R1 has two sources for a local route to 0.0.0.0/0: EIGRP 
! (AD 7, per the iiiipppp    ssssuuuummmmmmmmaaaarrrryyyy----aaaaddddddddrrrreeeessssssss command), and BGP from R9 
! (AD 20). R1 installs the EIGRP route based on the lowest AD.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    eeeeiiiiggggrrrrpppp
      14.0.0.0/8 is variably subnetted, 3 subnets, 2 masks
D       14.1.2.0/24 [90/2172416] via 14.1.1.4, 00:01:03, Serial0/0/0.4
D       14.0.0.0/8 is a summary, 05:53:19, Null0
D*   0.0.0.0/0 is a summary, 00:01:08, Null0
! Next, R4’s EIGRP route shows AD 90, instead of the AD 7 configured at R1. AD is 
! a local parameter—R4 uses its default AD of 90 for internal routes.
R4# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    eeeeiiiiggggrrrrpppp
D*   0.0.0.0/0 [90/2172416] via 14.1.1.1, 00:01:14, Serial0/0/0.1

352     Chapter 11: IGP Route Redistribution, Route Summarization, and Default Routing
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with Key Point icons.
Table 11-11 lists some of the most relevant Cisco IOS commands related to the topics in this 
chapter. Also refer to Tables 11-2 and 11-3 for the match and set commands.
Table 11-11
Command Reference for Chapter 11 
Command
Command Mode and Description
redistribute protocol [process-id] {level-1 | level-
1-2 | level-2} [as-number] [metric 
metric-value] [metric-type type-value] [match 
{internal | external 1 | external 2}] [tag 
tag-value] [route-map map-tag] [subnets]
Router conﬁg mode; deﬁnes the routing protocol from which 
to take routes, several matching parameters, and several things 
that can be marked on the redistributed routes.
ip preﬁx-list list-name [seq seq-value] {deny 
network/length | permit network/length}
[ge ge-value] [le le-value]
Global conﬁg mode; deﬁnes members of a preﬁx list, which 
match a preﬁx (subnet) and preﬁx length (subnet mask).
ip preﬁx-list list-name sequence-number 
description text
Global conﬁg; sets a description to a line in a preﬁx list.
distance {ip-address {wildcard-mask}} 
[ip-standard-list] [ip-extended-list]
Router conﬁg mode; identiﬁes the route source, and an optional 
ACL to deﬁne a subnet of routes, for which this router’s AD is 
changed. Inﬂuences the selection of routes by selectively 
overriding default AD.
distance eigrp internal-distance external-
distance
EIGRP conﬁg; sets the AD for all internal and external routes.
distance ospf {[intra-area dist1] [inter-area 
dist2] [external dist3]}
OSPF conﬁg; sets the AD for all intra-area, interarea, and 
external routes.
ip summary-address eigrp as-number network-
address subnet-mask [admin-distance]
Interface mode; conﬁgures an EIGRP route summary.
ip summary-address rip ip-address 
ip-network-mask
Interface mode; conﬁgures a RIP route summary.
area area-id range ip-address mask [advertise | 
not-advertise] [cost cost]
OSPF mode; conﬁgures an OSPF summary between areas.
summary-address address mask {level-1 | 
level-1-2 | level-2}
IS-IS mode; conﬁgures an IP summary route.

Memory Builders     353
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” sections tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
default route, route redistribution, external route, aggregate route, route map, IP 
preﬁx list, summary route, component route, gateway of last resort
Refer to the CD-based glossary to check your answers.
Further Reading
Routing TCP/IP, Volume I, Second Edition, by Jeff Doyle and Jennifer DeHaven Carroll
CCIE Practical Studies, Volume II, by Karl Solie and Leah Lynch
Command
Command Mode and Description
summary-address {{ip-address mask} | 
{preﬁx mask}} [not-advertise] [tag tag]
OSPF mode; conﬁgures an OSPF summary of external routes.
ip default-network network-number
Global conﬁg; sets a network from which to derive default 
routes.
default-information originate [route-map 
map-name]
IS-IS conﬁg; tells IS-IS to advertise a default route if it is in 
the routing table.
default-information originate [always] 
[metric metric-value] [metric-type type-value] 
[route-map map-name]
OSPF conﬁg; tells OSPF to advertise a default route, either if 
it is in the routing table or always.
ip route preﬁx mask {ip-address | interface-type 
interface-number [ip-address]} [distance] 
[name] [permanent] [tag tag]
Global conﬁg; used to create static IP routes, including static 
routes to 0.0.0.0 0.0.0.0, which denotes a default route.
Table 11-11
Command Reference for Chapter 11 (Continued)

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— BGP
— The use of show and debug commands

C H A P T E R 12
Fundamental BGP Operations
Chapters 12 and 13 of this book cover what might be the single most important topic on both 
the CCIE Routing and Switching written and lab exams—Border Gateway Protocol (BGP) 
Version 4. This chapter focuses on how BGP accomplishes its fundamental tasks: 
1.
Forming neighbor relationships
2.
Injecting routes into BGP from some other source
3.
Exchanging those routes with other routers
4.
Placing routes into IP routing tables
All of these BGP topics have close analogies with those of BGP’s IGP cousins, but of course 
there are many differences in the details. 
While this chapter focuses on how BGP performs its central role as a routing protocol, Chapter 13, 
“BGP Routing Policies,” moves on to cover routing policies—the methods used with BGP to 
limit or change how BGP ﬁlters routes and chooses the best routes among multiple routes to the 
same preﬁx.
“Do I Know This Already?” Quiz
Table 12-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
Table 12-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This 
Section
Score
Building BGP Neighbor Relationships
1–3
Building the BGP Table
4–8
Building the IP Routing Table
9–12
Total Score

356     Chapter 12: Fundamental BGP Operations
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can ﬁnd 
the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Into which of the following neighbor states must a neighbor stabilize before BGP Update 
messages may be sent? 
a. Active
b. Idle
c. Connected 
d. Established
2.
BGP neighbors check several parameters before the neighbor relationship can be completed. 
Which of the following is not checked? 
a. That the neighbor’s router ID is not duplicated with other routers
b. That the neighbor command on one router matches the update source IP address on the 
other router
c. If eBGP, that the neighbor command points to an IP address in a connected network
d. That a router’s neighbor remote-as command refers to the same autonomous system 
number (ASN) as in the other router’s router bgp command (assuming confederations 
are not used)
3.
A group of BGP routers, some with iBGP and some with eBGP connections, all use loopback 
IP addresses to refer to each other in their neighbor commands. Which of the following 
statements are false regarding the conﬁguration of these peers? 
a. IBGP peers require a neighbor ip-address ibgp-multihop command for the peer to 
become established.
b. eBGP peers require a neighbor ip-address ebgp-multihop command for the peer to 
become established.
c. eBGP and iBGP peers cannot be placed into the same peer group.
d. For eBGP peers, a router’s BGP router ID must be equal to the IP address listed in the 
eBGP neighbor’s neighbor command.

“Do I Know This Already?” Quiz     357
4.
A router has routes in the IP routing table for 20.0.0.0/8, 20.1.0.0/16, and 20.1.2.0/24. BGP 
on this router is conﬁgured with the no auto-summary command. Which of the following is 
true when using the BGP network command to cause these routes to be injected into the BGP 
table? 
a. The network 20.0.0.0 command would cause all three routes to be added to the BGP 
table.
b. The network 20.0.0.0 mask 255.0.0.0 command would cause all three routes to be 
added to the BGP table.
c. The network 20.1.0.0 mask 255.255.0.0 command would cause 20.1.0.0/16 and 
20.1.2.0/24 to be added to the BGP table.
d. The network 20.0.0.0 command would cause only 20.0.0.0/8 to be added to the BGP 
table.
5.
A router has conﬁgured redistribution of EIGRP routes into BGP using the command 
redistribute eigrp 1 route-map fred. This router’s BGP conﬁguration includes the no auto-
summary command. Which of the following are true? 
a. route-map fred can consider for redistribution routes listed in the IP routing table as 
EIGRP-learned routes.
b. route-map fred can consider for redistribution routes in the IP routing table listed as 
connected routes, but only if those interfaces are matched by EIGRP 1’s network com-
mands.
c. route-map fred can consider for redistribution routes that are listed in the EIGRP topol-
ogy table as successor routes but that are not in the IP routing table because a lower 
administrative distance (AD) route from a competing routing protocol exists.
d. route-map fred can consider for redistribution routes listed in the IP routing table as 
EIGRP-learned routes, but only if those routes also have at least one feasible successor route.
6.
Using BGP, R1 has learned its best route to 9.1.0.0/16 from R3. R1 has a neighbor connection 
to R2, over a point-to-point serial link using subnet 8.1.1.4/30. R1 has auto-summary 
conﬁgured. Which of the following is true regarding what R1 advertises to R2? 
a. R1 advertises only 9.0.0.0/8 to R2, and not 9.1.0.0/16.
b. If the aggregate-address 9.0.0.0 255.0.0.0 BGP subcommand is conﬁgured, R1 adver-
tises only 9.0.0.0/8 to R2, and not 9.1.0.0/16.
c. If the network 9.0.0.0 mask 255.0.0.0 BGP subcommand is conﬁgured, R1 advertises 
only 9.0.0.0/8 to R2, and not 9.1.0.0/16.
d. None of the other answers is correct.

358     Chapter 12: Fundamental BGP Operations
7.
Which of the following statements are false regarding what routes a BGP router can advertise 
to a neighbor? (Assume no confederations or route reﬂectors are in use.) 
a. To advertise a route to an eBGP peer, the route cannot have been learned from an iBGP 
peer.
b. To advertise a route to an iBGP peer, the route must have been learned from an eBGP 
peer.
c. The NEXT_HOP IP address must respond to a ping command.
d. Do not advertise routes if the neighboring router’s AS is in the AS_PATH.
e. The route must be listed as valid in the output of the show ip bgp command, but it does 
not have to be listed as best.
8.
Several different routes were injected into BGP via various methods on R1. Those routes were 
then advertised via iBGP to R2. R2 summarized the routes using the aggregate-address 
summary-only command, and then advertised via eBGP to R3. Which of the following are 
true about the ORIGIN path attribute of these routes? 
a. The routes injected using the network command on R1 have an ORIGIN value of IGP.
b. The routes injected using the redistribute ospf command on R1 have an ORIGIN value 
of IGP.
c. The routes injected using the redistribute command on R1 have an ORIGIN value of 
EGP.
d. The routes injected using the redistribute static command on R1 have an ORIGIN 
value of incomplete.
e. If the as-set option was not used, the summary route created on R2 has an ORIGIN code 
of IGP.
9.
Which of the following statements is true regarding the use of BGP synchronization? 
a. With BGP synchronization enabled, a router can add an iBGP-learned route to its IP 
routing table only if that same preﬁx is also learned via eBGP.
b. With BGP synchronization enabled, a router cannot consider an iBGP-learned route as a 
“best” route to that preﬁx unless the NEXT_HOP IP address matches an IGP route in 
the IP routing table.
c. BGP synchronization can be safely disabled when the routers inside a single AS either 
create a full mesh of BGP peers or create a hub-and-spoke to the router that learns the 
preﬁx via eBGP.
d. None of the other answers is correct.

“Do I Know This Already?” Quiz     359
10.
Which of the following statements are true regarding the operation of BGP confederations? 
a. Confederation eBGP connections act like normal (nonconfederation) eBGP connections 
with regard to the need for the neighbor ebgp-multihop command for nonadjacent 
neighbor IP addresses.
b. iBGP-learned routes are advertised over confederation eBGP connections.
c. A full mesh of iBGP peers inside a confederation sub-AS is not required.
d. None of the other answers are correct.
11.
R1 is BGP peered to R2, R3, R4, and R5 inside ASN 1, with no other peer connections inside 
the AS. R1 is a route reﬂector, serving R2 and R3 only. Each router also has an eBGP 
connection, through which it learns the following routes: 1.0.0.0/8 by R1, 2.0.0.0/8 by R2, 
3.0.0.0/8 by R3, 4.0.0.0 by R4, and 5.0.0.0/8 by R5. Which of the following are true regarding 
the propagation of these routes? 
a. NLRI 1.0.0.0/8 is forwarded by R1 to each of the other routers.
b. NLRI 2.0.0.0/8 is sent by R2 to R1, with R1 forwarding only to R3.
c. NLRI 3.0.0.0/8 is sent by R3 to R1, with R1 forwarding to R2, R4, and R5.
d. NLRI 4.0.0.0/8 is sent by R4 to R1, but R1 does not forward the information to R2 or 
R3.
e. NLRI 5.0.0.0/8 is sent by R5 to R1; R1 reﬂects the route to R2 and R3, but not to R4.
12.
R1 is in confederation ASN 65001; R2 and R3 are in confederation ASN 65023. R1 is peered 
to R2, and R2 is peered to R3. These three routers are perceived to be in AS 1 by eBGP peers. 
Which of the following is true regarding the conﬁguration of these routers? 
a. Each of the three routers has a router bgp 1 command. 
b. Both R2 and R3 need a bgp confederation peers 65001 BGP subcommand.
c. R1 needs a bgp confederation identiﬁer 1 BGP subcommand.
d. Both R2 and R3 need a bgp confederation identiﬁer 65023 BGP subcommand.

360     Chapter 12: Fundamental BGP Operations
Foundation Topics
Like Interior Gateway Protocols (IGPs), BGP exchanges topology information in order for routers 
to eventually learn the best routes to a set of IP preﬁxes. Unlike IGPs, BGP does not use a metric 
to select the best route among alternate routes to the same destination. Instead, BGP uses several 
BGP path attributes (PAs) and an involved decision process when choosing between multiple 
possible routes to the same subnet. 
BGP uses the BGP autonomous system path (AS_PATH) PA as its default metric mechanism when 
none of the other PAs has been overly set and conﬁgured. Generally speaking, BGP uses PAs to 
describe the characteristics of a route; both this chapter and Chapter 13 cover the wide variety of 
BGP PAs. The AS_PATH attribute lists the path, as deﬁned by a sequence of autonomous system 
numbers (ASNs) through which a packet must pass to reach a preﬁx. Figure 12-1 shows an example.
Figure 12-1
BGP AS_PATHs and Path Vector Logic
Figure 12-1 shows a classic case of how BGP uses path vector logic to choose routes. In the ﬁgure, R1 
learns of two AS_PATHs by which to reach 9.0.0.0/8—through ASNs 2-3 and through ASNs 5-4-3. 
If none of the routers has used routing policies to inﬂuence other PAs that inﬂuence BGP’s 
choice of which route is best, R1 will choose the shortest AS_PATH—in this case, AS_PATH 2-3. 
In effect, BGP treats the AS_PATH as a vector, and the length of the vector (the number of ASNs 
in the path) determines the best route. With BGP, the term route still refers to traditional hop-
by-hop IP routes, but the term path refers to the sequence of autonomous systems used to reach 
a particular destination. 
ASN 2
R4
ASN 5
R5
ASN 1
R1
ASN 3
R7
Network
9.0.0.0/8
9.0.0.0/8
  AS_PATH 2, 3
  AS_PATH 5, 4, 3
ASN 4
R6

Building BGP Neighbor Relationships     361
This chapter follows a similar sequence as several of the IGP chapters. First, the text focuses on 
neighbor relationships, followed by how BGP exchanges routing information with its neighbors. 
The chapter ends with a section covering how BGP adds IP routes to a router’s IP routing table 
based on the BGP topology table. 
Building BGP Neighbor Relationships
BGP neighbors form a TCP connection with each neighbor, sending BGP messages over the 
connections—culminating in BGP Update messages that contain the routing information. Each 
router explicitly conﬁgures its neighbors’ IP addresses, using these deﬁnitions to tell a router with 
which IP addresses to attempt a TCP connection. Also, if a router receives a TCP connection 
request (to BGP port 179) from a source IP address that is not conﬁgured as a BGP neighbor, the 
router rejects the request. 
After the TCP connection is established, BGP begins with BGP Open messages. Once a pair of BGP 
Open messages has been exchanged, the neighbors have reached the established state, which is the 
stable state of two working BGP peers. At this point, BGP Update messages can be exchanged.
This section examines many of the details about protocols and conﬁguration for BGP neighbor 
formation. If you are already familiar with BGP, Table 12-2 summarizes some of the key facts 
found in this section.
Table 12-2
BGP Neighbor Summary Table 
BGP Feature
Description and Values
TCP port
179
Setting the keepalive interval and hold time 
(using the bgp timers keepalive holdtime router 
subcommand or neighbor timers command, 
per neighbor)
Default to 60 and 180 seconds; deﬁne time between 
keepalives and time for which silence means the 
neighbor has failed
What makes a neighbor internal BGP (iBGP)?
Neighbor is in the same AS
What makes a neighbor external BGP (eBGP)?
Neighbor is in another AS
How is the BGP router ID (RID) determined?
In order: 
The bgp router-id command
The highest IP of an up/up loopback at the time that 
the BGP process starts
The highest IP of another up/up interface at the time 
that the BGP process starts.
continues

362     Chapter 12: Fundamental BGP Operations
Internal BGP Neighbors
A BGP router considers each neighbor to be either an internal BGP (iBGP) peer or an external 
BGP (eBGP) peer. Each BGP router resides in a single AS, so neighbor relationships are either 
with other routers in the same AS (iBGP neighbors) or with routers in other autonomous systems 
(eBGP neighbors). The two types of neighbors differ only slightly in regard to forming neighbor 
relationships, with more signiﬁcant differences in how the type of neighbor (iBGP or eBGP) 
impacts the BGP update process and the addition of routes to the routing tables.
iBGP peers often use loopback interface IP addresses for BGP peering to achieve higher 
availability. Inside a single AS, the physical topology often has at least two routes between each 
pair of routers. If BGP peers use an interface IP address for their TCP connections, and that 
interface fails, there still might be a route between the two routers, but the underlying BGP TCP 
connection will fail. Any time two BGP peers have more than one route through which they can 
reach the other router, peering using loopbacks makes the most sense.
Several examples that follow demonstrate BGP neighbor conﬁguration and protocols, beginning 
with Example 12-1. The example shows some basic BGP conﬁguration for iBGP peers R1, R2, 
and R3 in AS 123, with the following features, based on Figure 12-2.
BGP Feature
Description and Values
How is the source IP address used to reach a 
neighbor determined?
Deﬁned with the neighbor update-source 
command; or, by default, uses the outgoing interface 
IP address for the route used to reach the neighbor
How is the destination IP address used to reach 
a neighbor determined?
Explicitly deﬁned on the neighbor command
Auto-summary*
Off by default, enabled with auto-summary router 
subcommand
Neighbor authentication
MD5 only, using the neighbor password command
* Cisco changed the IOS default for BGP auto-summary to be disabled as of Cisco IOS Software Release 12.3.
Table 12-2
BGP Neighbor Summary Table (Continued)

Building BGP Neighbor Relationships     363
Figure 12-2
Sample Network for BGP Neighbor Conﬁguration
■
The three routers in ASN 123 will form iBGP neighbor relationships with each other 
(full mesh).
■
R1 will use the bgp router-id command to conﬁgure its RID, rather than use a loopback.
■
R3 uses a peer-group conﬁguration for neighbors R1 and R2. This allows fewer conﬁguration 
commands, and improves processing efﬁciency by having to prepare only one set of outbound 
Update packets for the peer group. (Identical Updates are sent to all peers in the peer group.)
■
The R1-R3 relationship uses BGP MD5 authentication, which is the only type of BGP 
authentication supported in Cisco IOS.
IBGP
IBGP
IBGP
EBGP
EBGP
Network 21.0.0.0/8
Subnet 22.1.1.0/24
R5
10.1.34.4
10.1.134.4
IBGP
10.1.34.3
10.1.134.3
172.16.16.6
172.16.16.1
ASN 678
ASN 45
ASN 123
R7
RID
111.111.111.111
R9
R4
R6
R8
EBGP
IBGP
IGP
Network 31.0.0.0/8
Subnet 32.1.1.0/24
RID
3.3.3.3
RID
8.8.8.8
RID
9.9.9.9
RID
7.7.7.7
RID
6.6.6.6
RID
2.2.2.2
RID
5.5.5.5
RID
4.4.4.4
R3
R2
R1

364     Chapter 12: Fundamental BGP Operations
Example 12-1
Basic iBGP Conﬁguration of Neighbors 
! R1 Config—R1 correctly sets its uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee to 1.1.1.1 for both R2 and R3, 
! in order to match the R2 and R3 nnnneeeeiiiigggghhhhbbbboooorrrr    commands. The first three highlighted 
! commands below were not typed, but added automatically as defaults by IOS 12.3 
!—in fact, IOS 12.3 docs imply that the defaults of ssssyyyynnnncccc and aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy at 
! IOS 12.2 has changed to nnnnoooo    ssssyyyynnnncccc and nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy    as of IOS 12.3. Also, R1 
! knows that neighbors 2.2.2.2 and 3.3.3.3 are iBGP because their rrrreeeemmmmooootttteeee----aaaassss values
! match R1’s rrrroooouuuutttteeeerrrr    BBBBGGGGPPPP command.
iiiinnnntttteeeerrrrffffaaaacccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    1111....1111....1111....1111    222255555555....222255555555....222255555555....222255555555
!
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    rrrroooouuuutttteeeerrrr----iiiidddd    111111111111....111111111111....111111111111....111111111111
    bbbbggggpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    ppppaaaasssssssswwwwoooorrrrdddd    sssseeeeccccrrrreeeetttt----ppppwwww
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! R3 Config—R3 uses a peer group called “my-as” for combining commands related
! to R1 and R2. Note that not all parameters must be in the peer group: R3-R2 does
! not use authentication, but R3-R1 does, so the nnnneeeeiiiigggghhhhbbbboooorrrr    ppppaaaasssssssswwwwoooorrrrdddd command was
! not placed inside the peer group, but instead on a nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111 command. 
iiiinnnntttteeeerrrrffffaaaacccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    3333....3333....3333....3333    222255555555....222255555555....222255555555....222255555555
!
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss
    nnnneeeeiiiigggghhhhbbbboooorrrr    mmmmyyyy----aaaassss    ppppeeeeeeeerrrr----ggggrrrroooouuuupppp
    nnnneeeeiiiigggghhhhbbbboooorrrr    mmmmyyyy----aaaassss    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    mmmmyyyy----aaaassss    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    ppppeeeeeeeerrrr----ggggrrrroooouuuupppp    mmmmyyyy----aaaassss
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    ppppaaaasssssssswwwwoooorrrrdddd    sssseeeeccccrrrreeeetttt----ppppwwww
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    ppppeeeeeeeerrrr----ggggrrrroooouuuupppp    mmmmyyyy----aaaassss
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! Next, R1 has two established peers, but the fact that the status is “established”
! is implied by not having the state listed on the right side of the output, under
! the heading State/PfxRcd. Once established, that column lists the number of
! prefixes learned via BGP Updates received from each peer. Note also R1’s
! configured RID, and the fact that it is not used as the update source. 
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy 
BGP router identifier 111.111.111.111, local AS number 123
BGP table version is 1, main routing table version 1
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4   123      59      59        0    0    0 00:56:52        0
3.3.3.3         4   123      64      64        0    0    0 00:11:14        0

Building BGP Neighbor Relationships     365
A few features in Example 12-1 are particularly important. First, note that the conﬁguration does 
not overtly deﬁne peers as iBGP or eBGP. Instead, each router examines its own ASN as deﬁned 
on the router bgp command, and compares that value to the neighbor’s ASN listed in the 
neighbor remote-as command. If they match, the peer is iBGP; if not, the peer is eBGP.
R3 in Example 12-1 shows how to use the peer-group construct to reduce the number of conﬁ-
guration commands. BGP peer groups do not allow any new BGP conﬁguration settings; they 
simply allow you to group BGP neighbor conﬁguration settings into a group, and then apply that 
set of settings to a neighbor using the neighbor peer-group command. Additionally, BGP builds 
one set of Update messages for the peer group, applying routing policies (as covered in Chapter 13) 
for the entire group—rather than one router at a time—thereby reducing some BGP processing 
and memory overhead. 
External BGP Neighbors
The physical topology between eBGP peers is often a single link, mainly because the connection 
is between different companies in different autonomous systems. As a result, eBGP peering can 
simply use the interface IP addresses for redundancy, because if the link fails, the TCP connection 
will fail because there is no longer an IP route between the peers. For instance, in Figure 12-2, the 
R1-R6 eBGP peering uses interface IP addresses deﬁned in the neighbor commands. 
When IP redundancy exists between two eBGP peers, the eBGP neighbor commands should use 
loopback IP addresses to take advantage of that redundancy. For example, two parallel links exist 
between R3 and R4. With neighbor commands that reference loopback addresses, either of 
these links could fail, but the TCP connection would remain. Example 12-2 shows additional 
conﬁguration for the network in Figure 12-2, showing the use of loopbacks between R3 and R4, 
and interface addresses between R1 and R6.
Example 12-2
Basic eBGP Conﬁguration of Neighbors  
! R1 Config—This example shows only commands added since Example 12-1.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....6666    rrrreeeemmmmooootttteeee----aaaassss    666677778888
! R1 does not have a nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....6666    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee command configured. R1 
! uses its s0/0/0.6 IP address, 172.16.16.1, because R1’s route to 172.16.16.6 
! uses s0/0/0.6 as the outgoing interface, as seen below.
RRRR1111####    sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    111177772222....1111....11116666....6666
Routing entry for 172.16.16.0/24
  Known via "connected", distance 0, metric 0 (connected, via interface)
  Routing Descriptor Blocks:
  * directly connected, via Serial0/0/0.6
      Route metric is 0, traffic share count is 1
RRRR1111####    sssshhhhoooowwww    iiiipppp    iiiinnnntttt    bbbbrrrriiiieeeeffff    |    iiiinnnncccclllluuuuddddeeee    0000////0000////0000....6666
Serial0/0/0.6              172.16.16.1     YES manual up                    up
continues

366     Chapter 12: Fundamental BGP Operations
The eBGP conﬁgurations differ from iBGP conﬁguration in a couple of small ways. First, the 
neighbor remote-as commands refer to a different AS than does the router bgp command, which 
implies that the peer is an eBGP peer. Second, R3 had to conﬁgure the neighbor 4.4.4.4 ebgp-
multihop 2 command (and R4 with a similar command) or the peer connection would not have 
formed. For eBGP connections, Cisco IOS defaults the IP packet’s TTL ﬁeld to a value of 1, based 
on the assumption that the interface IP addresses will be used for peering (like R1-R6 in Example 12-2). 
In this example, if R3 had not used multihop, it would have sent packets to R4 with TTL 1. 
R4 would have received the packet (TTL 1 at that point), then attempt to route the packet to its 
loopback interface—a process that would decrement the TTL to 0, causing R4 to drop the packet. 
So, even though the router is only one hop away, think of the loopback as being on the other side 
of the router, requiring that extra hop.
Checks Before Becoming BGP Neighbors
Similar to IGPs, BGP checks certain requirements before another router may become a neighbor, 
reaching the BGP established state. Most of the settings are straightforward; the only tricky part 
relates to the use of IP addresses. The following list describes the checks that BGP performs when 
forming neighbor relationships:
1.
The router must receive a TCP connection request with a source address that the router ﬁnds 
in a BGP neighbor command. 
! R3 Config—Because R3 refers to R4’s loopback (4.4.4.4), and R4 is an eBGP
! peer, R3 and R4 have added the nnnneeeeiiiigggghhhhbbbboooorrrr    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp command to set TTL to 2.
! R3’s update source must be identified as its loopback in order to match
! R4’s nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333 commands.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    rrrreeeemmmmooootttteeee----aaaassss    44445555
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    llllooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp    2222
! R3 now has three working neighbors. Also note the three TCP connections, one for
! each BGP peer. Note that because R3 is listed using a dynamic port number, and
! R4 as using port 179, R3 actually initiated the TCP connection to R4.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy
BGP router identifier 3.3.3.3, local AS number 123
BGP table version is 1, main routing table version 1
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
1.1.1.1         4   123     247     247        0    0    0 03:14:49        0
2.2.2.2         4   123     263     263        0    0    0 03:15:07        0
4.4.4.4         4    45      17      17        0    0    0 00:00:11        0
R3# sssshhhhoooowwww    ttttccccpppp    bbbbrrrriiiieeeeffff
TCB       Local Address           Foreign Address        (state)
649DD08C  3.3.3.3.179             2.2.2.2.43521          ESTAB
649DD550  3.3.3.3.179             1.1.1.1.27222          ESTAB
647D928C  3.3.3.3.21449           4.4.4.4.179            ESTAB
Example 12-2
Basic eBGP Conﬁguration of Neighbors  (Continued)
KEY 
POINT

Building BGP Neighbor Relationships     367
2.
A router’s ASN (on the router bgp asn command) must match the neighboring router’s 
reference to that ASN with its neighbor remote-as asn command. (This requirement is not 
true of confederation conﬁgurations.)
3.
The BGP RIDs of the two routers must not be the same.
4.
If conﬁgured, MD5 authentication must pass.
Figure 12-3 shows the ﬁrst three items in the list graphically, with R3 initiating a BGP TCP 
connection to R1. The circled numbers 1, 2, and 3 in the ﬁgure correspond to the item numbers in 
the previous list. Note that R1’s check at Step 2 uses the neighbor command R1 identiﬁed as part 
of Step 1.
Figure 12-3
BGP Neighbor Parameter Checking
In Figure 12-3, R3 initiates a TCP connection with its update source IP address (3.3.3.3) as the 
source address of the packet. The ﬁrst check occurs when R1 receives the ﬁrst packet, looks at the 
source IP address of the packet (3.3.3.3), and ﬁnds that address in a neighbor command. The 
second check has R1 comparing R3’s stated ASN (in R3’s BGP Open message) to R1’s neighbor 
command it identiﬁed at Step 1. Step 3 checks to ensure the BGP RIDs are unique, with the BGP 
Open message stating the sender’s BGP RID.
While the check at Step 1 might seem intuitive, interestingly, the reverse bit of logic does not have 
to be true for the neighbors to come up. For instance, if R1 did not have a neighbor 3.3.3.3 
update-source 1.1.1.1 command, the process shown in Figure 12-3 would still work. Succinctly 
put, only one of the two routers’ update source IP addresses needs to be in the other router’s 
neighbor command for the neighbor to come up. Examples 12-1 and 12-2 showed the correct 
update source on both routers, and that makes good sense, but it works with only one of the two.
R3
R1
RID
3.3.3.3
BGP Open
Message
RID
111.111.111.111
Note: R3’s Loopback IP Address is 3.3.3.3
Src.-IP
3.3.3.3
Dest.-IP
1.1.1.1
Dest.-Port
179
Syn
RID
3.3.3.3
ASN
123
TCP Reply (SYN, ACK)
TCP Connection Up (ACK)
router bgp 123
neigh 1.1.1.1 update-source loopback1
neigh 1.1.1.1 remote-as 123
neighbor  3.3.3.3  remote-as  123
1
2
3

368     Chapter 12: Fundamental BGP Operations
BGP uses a keepalive timer to deﬁne how often that router sends BGP keepalive messages, and a 
Hold timer to deﬁne how long a router will wait without receiving a keepalive message before 
resetting a neighbor connection. The Open message includes each router’s stated keepalive timer. 
If they do not match, each router uses the lower of the values for each of the two timers, 
respectively. Mismatched settings do not prevent the routers from becoming neighbors. 
BGP Messages and Neighbor States
The desired state for BGP neighbors is the established state. In that state, the routers have formed 
a TCP connection, and they have exchanged Open messages, with the parameter checks having 
passed. At this point, topology information can be exchanged using Update messages. Table 12-3 
lists the BGP neighbor states, along with some of their characteristics. Note that if the IP addresses 
mismatch, the neighbors settle into an active state.
BGP Message Types
BGP uses four basic messages. Table 12-4 lists the message types and provides a brief description 
of each. 
Table 12-3
BGP Neighbor States
State
Listen for 
TCP?
Initiate 
TCP?
TCP 
Up?
Open 
Sent?
Open 
Received?
Neighbor 
Up?
Idle
No
Connect
Yes
Active
Yes
Yes
Open sent
Yes
Yes
Yes
Yes
Open conﬁrm
Yes
Yes
Yes
Yes
Yes
Established
Yes
Yes
Yes
Yes
Yes
Yes
Table 12-4
BGP Message Types 
Message
Purpose
Open
Used to establish a neighbor relationship and exchange basic parameters.
Keepalive
Used to maintain the neighbor relationship, with nonreceipt of a keepalive message 
within the negotiated Hold timer causing BGP to bring down the neighbor connection. 
(The timers can be conﬁgured with the bgp timers keepalive holdtime subcommand or 
the neighbor [ip-address | peer-group-name] timers keepalive holdtime BGP 
subcommand.)
KEY 
POINT
KEY 
POINT
KEY 
POINT

Building BGP Neighbor Relationships     369
Purposefully Resetting BGP Peer Connections
Example 12-3 shows how to reset neighbor connections by using the neighbor shutdown 
command and, along the way, shows the various BGP neighbor states. The example uses routers 
R1 and R6 from Figure 12-2, as conﬁgured in Example 12-2.
Message
Purpose
Update
Used to exchange routing information, as covered more fully in the next section.
Notiﬁcation
Used when BGP errors occur; causes a reset to the neighbor relationship when sent.
Example 12-3
Examples of Neighbor States 
! R1 shuts down R6’s peer connection. ddddeeeebbbbuuuugggg    iiiipppp    bbbbggggpppp shows moving to a down state,
! which shows as “Idle (Admin)” under sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy.
R1# ddddeeeebbbbuuuugggg    iiiipppp    bbbbggggpppp
BGP debugging is on for address family: BGP IPv4
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
R1(config-router)# nnnneeeeiiiigggghhhh    11110000....1111....11116666....6666    sssshhhhuuuuttttddddoooowwwwnnnn
R1#
*Mar  4 21:01:45.946: BGP: 10.1.16.6 went from Established to Idle
*Mar  4 21:01:45.946: %BGP-5-ADJCHANGE: neighbor 10.1.16.6 Down Admin. shutdown
*Mar  4 21:01:45.946: BGP: 10.1.16.6 closing
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy | iiiinnnncccclllluuuuddddeeee    11110000....1111....11116666....6666
10.1.16.6     4   678     353     353        0    0    0 00:00:06 Idle (Admin)
! Next, the nnnnoooo    nnnneeeeiiiigggghhhhbbbboooorrrr    sssshhhhuuuuttttddddoooowwwwnnnn command reverses the admin state. The various 
! debug messages (with some omitted) list the various states. Also note that the
! final message is the one log message in this example that occurs due to the
! default configuration of bbbbggggpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss. The rest are the result of
! a ddddeeeebbbbuuuugggg    iiiipppp    bbbbggggpppp command.
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
R1(config-router)# nnnnoooo    nnnneeeeiiiigggghhhh    11110000....1111....11116666....6666    sssshhhhuuuuttttddddoooowwwwnnnn
*Mar  4 21:02:16.958: BGP: 10.1.16.6 went from Idle to Active
*Mar  4 21:02:16.958: BGP: 10.1.16.6 open active, delay 15571ms
*Mar  4 21:02:29.378: BGP: 10.1.16.6 went from Idle to Connect
*Mar  4 21:02:29.382: BGP: 10.1.16.6 rcv message type 1, length (excl. header) 26
*Mar  4 21:02:29.382: BGP: 10.1.16.6 rcv OPEN, version 4, holdtime 180 seconds
*Mar  4 21:02:29.382: BGP: 10.1.16.6 went from Connect to OpenSent
*Mar  4 21:02:29.382: BGP: 10.1.16.6 sending OPEN, version 4, my as: 123, holdtime 180 
  seconds
*Mar  4 21:02:29.382: BGP: 10.1.16.6 rcv OPEN w/ OPTION parameter len: 16
BGP: 10.1.16.6 rcvd OPEN w/ remote AS 678
continues
Table 12-4
BGP Message Types (Continued)

370     Chapter 12: Fundamental BGP Operations
All BGP neighbors can be reset with the clear ip bgp * exec command, which, like the neighbor 
shutdown command, resets the neighbor connection, closes the TCP connection to that neighbor, 
and removes all entries from the BGP table learned from that neighbor. The clear command will 
be shown in the rest of the chapter as needed, including in coverage of how to clear just some 
neighbors. 
Building the BGP Table
The BGP topology table, also called the BGP Routing Information Base (RIB), holds the network 
layer reachability information (NLRI) learned by BGP, as well as the associated PAs. An NLRI is 
simply an IP preﬁx and preﬁx length. This section focuses on the process of how BGP injects 
NLRI into a router’s BGP table, followed by how routers advertise their associated PAs and NLRI 
to neighbors. 
Injecting Routes/Preﬁxes into the BGP Table
Unsurprisingly, an individual BGP router adds entries to its local BGP table by using the same 
general methods used by IGPs: by using the network command, by hearing the topology 
information via an Update message from a neighbor, or by redistributing from another routing 
protocol. The next few sections show examples of how a local BGP router adds routes to the BGP 
table by methods other than learning them from a BGP neighbor.
The BGP network Command 
This section, and the next section, assumes the BGP no auto-summary command has been 
conﬁgured. Note that as of the Cisco IOS Software Release 12.3 Mainline, no auto-summary is the 
default; earlier releases defaulted to use auto-summary. Following that, the section, “The Impact of 
*Mar  4 21:02:29.382: BGP: 10.1.16.6 went from OpenSent to OpenConfirm
*Mar  4 21:02:29.382: BGP: 10.1.16.6 send message type 1, length (incl. header) 45
*Mar  4 21:02:29.394: BGP: 10.1.16.6 went from OpenConfirm to Established
*Mar  4 21:02:29.398: %BGP-5-ADJCHANGE: neighbor 10.1.16.6 Up
NOTE
Chapter 13 covers how the clear command can be used to implement routing policy 
changes without resetting the neighbor completely, using a feature called soft reconﬁguration.
NOTE
Technically, BGP does not advertise routes; rather, it advertises PAs plus a set of NLRI 
that shares the same PA values. However, most people simply refer to NLRI as BGP preﬁxes or 
BGP routes. This book uses all three terms. However, because there is a distinction between a 
BGP route in the BGP table and an IP route in the IP routing table, the text takes care to refer to 
the BGP table or IP routing table to distinguish the two tables.
Example 12-3
Examples of Neighbor States (Continued)

Building the BGP Table     371
Auto-Summary on Redistributed Routes and the network Command,” discusses the impact of the 
auto-summary command on both the network command and the redistribute command.
The BGP network router subcommand differs signiﬁcantly from the network command used by 
IGPs. The BGP network command instructs that router’s BGP process to do the following:
Look for a route in the router’s current IP routing table that exactly matches the 
parameters of the network command; if the IP route exists, put the equivalent NLRI into 
the local BGP table.
With this logic, connected routes, static routes, or IGP routes could be taken from the IP routing 
table and placed into the BGP table for later advertisement. When the router removes that route 
from its IP routing table, BGP then removes the NLRI from the BGP table, and notiﬁes neighbors 
that the route has been withdrawn.
Note that the IP route must be matched exactly when the no auto-summary command is 
conﬁgured or used by default.
Table 12-5 lists a few of the key features of the BGP network command, whose generic syntax is:
nnnneeeettttwwwwoooorrrrkkkk    {network-number [mmmmaaaasssskkkk    network-mask]} [rrrroooouuuutttteeee----mmmmaaaapppp    map-tag]
*NEXT_HOP is a BGP PA that denotes the next-hop IP address that should be used to reach the NLRI.
Example 12-4 shows an example network command as implemented on R5 of Figure 12-4 (R5’s 
BGP neighbors have been shut down so that the BGP table shows only BGP table entries created 
by the network commands on R5). In Example 12-4, R5 uses two network commands to add 
21.0.0.0/8 and 22.1.1.0/24 to its BGP table. 
Table 12-5
Key Features of the BGP network Command
Feature
Implication
No mask is conﬁgured
Assumes the default classful mask.
Matching logic with no auto-summary 
conﬁgured
An IP route must match both the preﬁx and preﬁx length 
(mask).
Matching logic with auto-summary 
conﬁgured
If the network command lists a classful network, it 
matches if any subnets of the classful network exist.
NEXT_HOP of BGP route added to the 
BGP table*
Uses next hop of IP route.
Maximum number injected by the 
network command into one BGP 
process
200
Purpose of the route-map option on the 
network command
Can be used to ﬁlter routes and manipulate PAs, including 
NEXT_HOP*.
KEY 
POINT
KEY 
POINT

372     Chapter 12: Fundamental BGP Operations
Figure 12-4
Sample BGP Network, with IP Addresses 
Example 12-4
Examples of Populating the BGP Table via the network Command 
! On R5, the nnnneeeettttwwwwoooorrrrkkkk commands specifically match prefixes 21.0.0.0/8 and 22.1.1.0/24. The
! omission of the mask on the first command implies the associated classful mask
! of 255.0.0.0, as the IP address listed (21.0.0.0) is a class A address.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    44445555
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss
    nnnneeeettttwwwwoooorrrrkkkk    22221111....0000....0000....0000
    nnnneeeettttwwwwoooorrrrkkkk    22222222....1111....1111....0000    mmmmaaaasssskkkk    222255555555....222255555555....222255555555....0000
! The nnnneeeeiiiigggghhhhbbbboooorrrr commands are not shown, as they are not pertinent to the topics
! covered in this example.
! Next, the two routes matched by the nnnneeeettttwwwwoooorrrrkkkk    commands are indeed in the IP 
! routing table. Note that the route to 21.0.0.0/8 is a connected route, and the
! route to 22.1.1.0/24 is a static route.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    22221111    |    22222222
IBGP
IBGP
IBGP
10.1.23.2
10.1.12.2
10.1.23.3
10.1.12.1
EBGP
EBGP
R5
10.1.34.4
10.1.134.4
IBGP
10.1.34.3
10.1.134.3
10.1.45.5
10.1.57.5
10.1.57.7
10.1.78.7
10.1.78.8
10.1.68.8
10.1.68.6
10.1.45.4
172.16.16.6
172.16.16.1
10.1.69.6
10.1.69.9
EIGRP 6
ASN 678
ASN 45
ASN 123
R6
R9
R7
R8
R8: RIP Only
EBGP
IBGP
Networks 30 Through 39
Via redistribute eigrp 6 Command
Networks 20 Through 29
Via Network Command
RID
3.3.3.3
RID
4.4.4.4
RID
5.5.5.5
RID
7.7.7.7
RID
8.8.8.8
RID
6.6.6.6
RID
111.111.111.111
RID
2.2.2.2
R4
R3
R2
R1

Building the BGP Table     373
Redistributing from an IGP, Static, or Connected Route
The BGP redistribute subcommand can redistribute static, connected, and IGP-learned routes. 
The mechanics of the BGP redistribute command work very similarly with redistribution as 
covered in Chapter 11, “IGP Route Redistribution, Route Summarization, and Default Routing”; 
however, this section covers a few nuances that are unique to BGP.
BGP does not use the concept of calculating a metric for each alternate route to reach a particular 
preﬁx. Instead, BGP uses a step-wise decision process that examines various PAs to determine the 
best route. As a result, redistribution into BGP does not require any consideration of setting 
metrics. However, as covered in Chapter 13, a router might need to apply a route map to the 
redistribution function to manipulate PAs, which in turn affects the BGP decision process. If a 
metric is assigned to a route injected into BGP, BGP assigns that metric value to the BGP Multi-
Exit Discriminator (MED) PA, which is commonly referred to as metric.
Example 12-5 shows R6 (from Figure 12-4) ﬁlling its BGP table through route redistribution from 
Enhanced IGRP (EIGRP) process 6 (as conﬁgured in Example 12-5 with the router eigrp 6 
command) and redistributing a single static route. EIGRP on R6 learns routes only for 
networks 30 through 39. The goals of this example are as follows:
■
Redistribute EIGRP routes for networks 31 and 32 
C    21.0.0.0/8 is directly connected, Loopback20
     22.0.0.0/24 is subnetted, 1 subnets
S       22.1.1.0 [1/0] via 10.1.5.9
! Below, the prefixes have been added to the BGP table. Note that the NEXT_HOP
! PA has been set to 0.0.0.0 for the route (21.0.0.0/8) that was taken from a 
! connected route, with the NEXT_HOP for 22.1.1.0/24 matching the IP route.
R5# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 38, local router ID is 5.5.5.5
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         0.0.0.0                  0         32768 i
*> 22.1.1.0/24      10.1.5.9                 0         32768 i
NOTE
Although this point is not unique to BGP, keep in mind that redistribution from an IGP 
causes two types of routes to be taken from the routing table—those learned by the routing 
protocol, and those connected routes for which that routing protocol matches with a network 
command. 
Example 12-4
Examples of Populating the BGP Table via the network Command (Continued)

374     Chapter 12: Fundamental BGP Operations
■
Redistribute the static route to network 34, and set the MED (metric) to 9
■
Do not accidentally redistribute the connected routes that are matched by EIGRP’s network 
commands
■
Use the Cisco IOS 12.3 default setting of no auto-summary
Example 12-5 shows the mistake of accidentally redistributing additional routes—the connected 
subnets of network 10.0.0.0 matched by EIGRP network commands. Later in the example, a route 
map is added to prevent the problem. 
Example 12-5
Example of Populating the BGP Table via Redistribution 
! R6 redistributes EIGRP 6 routes and static routes below, setting the metric on
! redistributed static routes to 9. Note that EIGRP 6 matches subnets 10.1.68.0/24
! and 10.1.69.0/24 with its nnnneeeettttwwwwoooorrrrkkkk command.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    666677778888
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    ssssttttaaaattttiiiicccc    mmmmeeeettttrrrriiiicccc    9999
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp    6666
!
rrrroooouuuutttteeeerrrr    eeeeiiiiggggrrrrpppp    6666
    nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
! 
iiiipppp    rrrroooouuuutttteeee    33334444....0000....0000....0000    222255555555....0000....0000....0000    nnnnuuuullllllll0000
! Commands unrelated to populating the local BGP table are omitted.
! R6 has met the goal of injecting 31 and 32 from EIGRP, and 34 from static. 
! It also accidentally picked up two subnets of 10.0.0.0/8 because EIGRP’s nnnneeeettttwwwwoooorrrrkkkk
! 11110000....0000....0000....0000 command matched these connected subnets. 
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 1, local router ID is 6.6.6.6
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 10.1.68.0/24     0.0.0.0                  0         32768 ?
*> 10.1.69.0/24     0.0.0.0                  0         32768 ?
*> 31.0.0.0         10.1.69.9           156160         32768 ?
*> 32.1.1.0/24      10.1.69.9           156160         32768 ?
*> 34.0.0.0/24      0.0.0.0                  9         32768 ?
! Below, note the metrics for the two EIGRP routes. The sssshhhhoooowwww    iiiipppp    bbbbggggpppp command output
! above shows how BGP assigned the MED (metric) that same value.
R6# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    eeeeiiiiggggrrrrpppp
     32.0.0.0/24 is subnetted, 1 subnets
D       32.1.1.0 [90/156160] via 10.1.69.9, 00:12:17, FastEthernet0/0
D    31.0.0.0/8 [90/156160] via 10.1.69.9, 00:12:17, FastEthernet0/0
! Below, the rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    eeeeiiiiggggrrrrpppp command has been changed to the following, using
! a route map to only allow routes in networks in the 30s.
rrrreeeeddddiiiisssstttt    eeeeiiiiggggrrrrpppp    6666    rrrroooouuuutttteeee----mmmmaaaapppp    jjjjuuuusssstttt----33330000----ssssoooommmmeeeetttthhhhiiiinnnngggg

Building the BGP Table     375
Also note that the NEXT_HOP PA for each route either matches the next hop of the redistributed 
route or is 0.0.0.0 for connected routes and routes to null0.
The Impact of Auto-Summary on Redistributed Routes and the network Command
As it does with IGPs, the BGP auto-summary command causes a classful summary route to be 
created if any component subnet of that summary exists. However, unlike IGPs, the BGP auto-
summary router subcommand causes BGP to summarize only those routes injected due to 
redistribution on that router. BGP auto-summary does not look for classful network boundaries 
in the topology, and it does not look at routes already in the BGP table. It simply looks for routes 
injected into the BGP due to the redistribute and network commands on that same router.
The logic differs slightly based on whether the route is injected with the redistribute command 
or the network command. The logic for the two commands is summarized as follows:
■
redistribute—When the redistribution process would normally inject subnets of a classful 
network, do not inject the subnets into the routing table, but instead inject the classful 
network.
■
network—For network commands that list a classful network number and no mask 
parameter, inject the classful network if at least one subnet of that classful network exists in 
the IP routing table. 
While the preceding deﬁnitions are concise for study purposes, a few points deserve further 
emphasis and explanation. First, for redistribution, the auto-summary command causes the 
redistribution process to inject only classful networks into the local BGP table, and no subnets. 
The network command, with auto-summary conﬁgured, still injects subnets based on the same 
logic already described in this chapter. In addition to that logic, if a network command matches 
the classful network number, BGP injects the classful network, as long as at least any one subnet 
of that classful network exists in the IP routing table.
! The route map and ACLs used for the filtering are shown next. As a result, the
! two subnets of 10.0.0.0/8 will not be redistributed into the BGP table.
R6# sssshhhhoooowwww    rrrroooouuuutttteeee----mmmmaaaapppp
route-map just-30-something, permit, sequence 10
  Match clauses:
    ip address (access-lists): permit-30-39 
  Set clauses:
  Policy routing matches: 0 packets, 0 bytes
R6# sssshhhhoooowwww    aaaacccccccceeeessssssss----lllliiiisssstttt
Standard IP access list permit-30-39
    10 permit 32.0.0.0, wildcard bits 7.255.255.255 (1538 matches)
20 permit 30.0.0.0, wildcard bits 1.255.255.255 (1130 matches)
Example 12-5
Example of Populating the BGP Table via Redistribution (Continued)
KEY 
POINT

376     Chapter 12: Fundamental BGP Operations
Example 12-6 shows an example that points out the impact of the auto-summary command. The 
example follows these steps on router R5 from Figure 12-2:
1.
10.15.0.0/16 is injected into BGP due to the redistribute command.
2.
Auto-summary is conﬁgured, BGP is cleared, and now only 10.0.0.0/8 is in the BGP table.
3.
Auto-summary and redistribution are disabled.
4.
The network 10.0.0.0 command, network 10.12.0.0 mask 255.254.0.0 command, and 
network 10.14.0.0 mask 255.255.0.0 command are conﬁgured. Only the last of these three 
commands exactly matches a current route, so only that route is injected into BGP.
5.
Auto-summary is enabled, causing 10.0.0.0/8 to be injected, as well as the original 10.14.0.0/
16 route.
Example 12-6
Auto-Summary Impact on Routing Tables 
! R5 has shut down all neighbor connections, so the output of sssshhhhoooowwww    iiiipppp    bbbbggggpppp    only shows 
! routes injected on R5.
! Step 1 is below. Only 10.15.0.0/16 is injected by the current configuration. Note that
! the unrelated lines of output have been removed, and route-map only15 only
! matches 10.15.0.0/16. 
R5# sssshhhhoooowwww    rrrruuuunnnn | bbbbeeee    rrrroooouuuutttteeeerrrr    bbbbggggpppp
rrrroooouuuutttteeeerrrr    bbbbggggpppp    5555
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    rrrreeeeddddiiiissssttttrrrriiiibbbbuuuutttteeee    ccccoooonnnnnnnneeeecccctttteeeedddd    rrrroooouuuutttteeee----mmmmaaaapppp    oooonnnnllllyyyy11115555
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! Below, note the absence of 10.0.0.0/8 as a route, and the presence of 10.15.0.0/16,
! as well as the rest of the routes used in the upcoming steps.
R5# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee    11110000....0000....0000....0000
Routing entry for 10.0.0.0/8, 4 known subnets
  Attached (4 connections)
  Redistributing via eigrp 99, bgp 5
  Advertised by bgp 5 route-map only15
C       10.14.0.0/16 is directly connected, Loopback10
C       10.15.0.0/16 is directly connected, Loopback10
C       10.12.0.0/16 is directly connected, Loopback10
C       10.13.0.0/16 is directly connected, Loopback10
! Only 10.15.0.0/16 is injected into BGP.
R5# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 2, local router ID is 5.5.5.5
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 10.15.0.0/16     0.0.0.0                  0         32768 ?
! Next, step 2, where aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy is enabled. Now, 10.15.0.0/16 is no longer 

Building the BGP Table     377
! injected into BGP, but classful 10.0.0.0/8 is.
R5# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    5555
R5(config-router)# nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
R5(config-router)# ^^^^ZZZZ
R5# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    **** 
R5# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 2, local router ID is 5.5.5.5
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 10.0.0.0         0.0.0.0                  0         32768 ?
! Now, at step 3, nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy disables automatic summarization, redistribution is 
! disabled, and at step 4, the nnnneeeettttwwwwoooorrrrkkkk commands are added. Note that 10.12.0.0/15 is
! not injected, as there is no exact match, nor is 10.0.0.0/8, as there is no exact
! match. However, 10.14.0.0/16 is injected due to the exact match of the prefix and 
! prefix length.
R5# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R5(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    5555
R5(config-router)# nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
R5(config-router)# nnnnoooo    rrrreeeeddddiiiisssstttt    ccccoooonnnnnnnn    rrrroooouuuutttteeee----mmmmaaaapppp    oooonnnnllllyyyy11115555
R5(config-router)# nnnnoooo    rrrreeeeddddiiiisssstttt    ccccoooonnnnnnnneeeecccctttteeeedddd
R5(config-router)# nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000
R5(config-router)# nnnneeeettttwwwwoooorrrrkkkk    11110000....11112222....0000....0000    mmmmaaaasssskkkk    222255555555....222255554444....0000....0000
R5(config-router)# nnnneeeettttwwwwoooorrrrkkkk    11110000....11114444....0000....0000    mmmmaaaasssskkkk    222255555555....222255555555....0000....0000
R5(config-router)# ^^^^ZZZZ
R5# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****
R5# sssshhhh    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    nnnneeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 10.14.0.0/16     0.0.0.0                  0         32768 i
! Finally, aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy is re-enabled (not shown in the example).
! 10.14.0.0/16 is still an exact match, so it is
! still injected. 10.0.0.0/8 is also injected because of the nnnneeeettttwwwwoooorrrrkkkk    11110000....0000....0000....0000 command. 
R5# sssshhhh    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    nnnneeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  10.0.0.0         0.0.0.0                  0         32768 i
*  10.14.0.0/16     0.0.0.0                  0         32768 i
Example 12-6
Auto-Summary Impact on Routing Tables (Continued)

378     Chapter 12: Fundamental BGP Operations
Manual Summaries and the AS_PATH Path Attribute
As covered in the last several pages, a router can add entries to its BGP table using the network 
command and route redistribution. Additionally, BGP can use manual route summarization to 
advertise summary routes to neighboring routers, causing the neighboring routers to learn 
additional BGP routes. BGP manual summarization with the aggregate-address command differs 
signiﬁcantly from using the auto-summary command. It can summarize based on any routes 
in the BGP table, creating a summary of any preﬁx length. It does not always suppress the 
advertisement of the component subnets, although it can be conﬁgured to do so. 
The aggregate route must include the AS_PATH PA, just like it is required for every other NLRI 
in the BGP table. However, to fully understand what this command does, you need to take a closer 
look at the AS_PATH PA. 
The AS_PATH PA consists of up to four different components, called segments, as follows:
■
AS_SEQ (short for AS Sequence)
■
AS_SET 
■
AS_CONFED_SEQ (short for AS Confederation Sequence)
■
AS_CONFED_SET
The most commonly used segment is called AS_SEQ. AS_SEQ is the idea of AS_PATH as shown 
back in Figure 12-1, with the PA representing all ASNs, in order, through which the route has been 
advertised. 
However, the aggregate-address command can create a summary route for which the AS_SEQ 
must be null. When the component subnets of the summary route have differing AS_SEQ values, 
the router simply can’t create an accurate representation of AS_SEQ, so it uses a null AS_SEQ. 
However, this action introduces the possibility of creating routing loops, because the contents of 
AS_PATH, speciﬁcally AS_SEQ, are used to prevent a route from being re-advertised to an AS 
that has already heard about the route.
The AS_PATH AS_SET segment solves the problem when the summary route has a null AS_SEQ. 
The AS_SET segment holds an unordered list of all the ASNs in all the component subnets’ 
AS_SEQ segments. 
Example 12-7 shows an example in which the router does use a null AS_SEQ for a summary route, 
and then the same summary with the as-set option creating the AS_SET segment.
NOTE
AS_PATH includes the AS_CONFED_SEQ and AS_CONFED_SET segments as 
well, which are covered later, in the section “Confederations.”

Building the BGP Table     379
The following list summarizes the actions taken by the aggregate-address command when it 
creates a summary route:
■
It does not create the summary if the BGP table does not currently have any routes for NLRI 
inside the summary.
■
If all the component subnets are withdrawn from the aggregating router’s BGP table, it also 
then withdraws the aggregate. (In other words, the router tells its neighbors that the aggregate 
route is no longer valid.)
■
It sets the NEXT_HOP address of the summary, as listed in the local BGP table, as 0.0.0.0.
■
It sets the NEXT_HOP address of the summary route, as advertised to neighbors, to the 
router’s update source IP address for each neighbor, respectively.
■
If the component subnets inside the summary all have the same AS_SEQ, it sets the new 
summary route’s AS_SEQ to be exactly like the AS_SEQ of the component subnets.
■
If the AS_SEQ of the component subnets differs in any way, it sets the AS_SEQ of the new 
summary route to null. 
■
When the as-set option has been conﬁgured, the router creates an AS_SET segment for the 
aggregate route, but only if the summary route’s AS_SEQ is null.
■
As usual, if the summary is advertised to an eBGP peer, the router prepends its own ASN to 
the AS_SEQ before sending the Update.
■
It suppresses the advertisement of all component subnets if the summary-only keyword is 
used; advertises all of them if the summary-only keyword is omitted; or advertises a subset 
if the suppress-map option is conﬁgured. (Refer to Chapter 13 for an example of using the 
suppress-map option.)
Example 12-7 shows R3 from Figure 12-4 summarizing 23.0.0.0/8. R3 advertises the summary 
with ASN 123 as the only AS in the AS_SEQ, because some component subnets have AS_PATHS 
of 45, and others have 678 45. As a result, R3 uses a null AS_SEQ for the aggregate. The example 
goes on to show the impact of the as-set option. 
Example 12-7
Route Aggregation and the as-set Option 
! Note that R3’s routes to network 23 all have the same AS_PATH except one new
! prefix, which has an AS_PATH that includes ASN 678. As a result, R3 will
! create a null AS_SEQ for the summary route.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp | iiiinnnncccclllluuuuddddeeee    22223333
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.16.0/20     4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
continues
KEY 
POINT

380     Chapter 12: Fundamental BGP Operations
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
*> 23.4.0.0/16      4.4.4.4                                0 45 678 i
! The following command is now added to R3’s BGP configuration:
aaaaggggggggrrrreeeeggggaaaatttteeee----aaaaddddddddrrrreeeessssssss    22223333....0000....0000....0000    222255555555....0000....0000....0000    ssssuuuummmmmmmmaaaarrrryyyy----oooonnnnllllyyyy
! Note: R3 will not have a BGP table entry for 23.0.0.0/8; however, R3 will
! advertise this summary to its peers, because at least one component subnet 
! exists.
! R1 has learned the prefix, NEXT_HOP 3.3.3.3 (R3’s update source IP address for 
! R1), but the AS_PATH is now null because R1 is in the same AS as R3.
! (Had R3-R1 been an eBGP peering, R3 would have prepended its own ASN.)
! Note that the next command is on R1 R1 R1 R1.
R1# sssshhhh    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i21.0.0.0         3.3.3.3                  0    100      0 45 i
*>i23.0.0.0         3.3.3.3                  0    100      0 i
! Next, R1 displays the AGGREGATOR PA, which identifies R3 (3.3.3.3) and its AS
! (123) as the aggregation point at which information is lost. Also, the phrase
! “atomic-aggregate” refers to the fact that the ATOMIC_AGGREGATE PA has also 
! been set; this PA simply states that this NLRI is a summary.
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    22223333....0000....0000....0000
BGP routing table entry for 23.0.0.0/8, version 45
Paths: (1 available, best #1, table Default-IP-Routing-Table)
Flag: 0x800
  Advertised to update-groups:
     2         
  Local, (aggregated by 123 3.3.3.3), (received & used)
    3.3.3.3 (metric 2302976) from 3.3.3.3 (3.3.3.3)
      Origin IGP, metric 0, localpref 100, valid, internal, atomic-aggregate, best
! R6, in AS 678, receives the summary route from R1, but the lack of information 
! in the current AS_PATH allows R6 to learn of the route, possibly causing
! a routing loop. (Remember, one of the component subnets, 23.4.0.0/16, came from
! ASN 678.) 
R6# sssshhhh    iiiipppp    bbbbggggpppp    nnnneeeeiiii    111177772222....11116666....11116666....1111    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         172.16.16.1                            0 123 45 i
*> 23.0.0.0         172.16.16.1                            0 123 i
! The R3 configuration is changed as shown next to use the aaaassss----sssseeeetttt option.
R3# aaaaggggggggrrrreeeeggggaaaatttteeee----aaaaddddddddrrrreeeessssssss    22223333....0000....0000....0000    222255555555....0000....0000....0000        ssssuuuummmmmmmmaaaarrrryyyy----oooonnnnllllyyyy    aaaassss----sssseeeetttt
! R1 now has the AS_SET component of the AS_PATH PA, which includes an unordered
! list of all autonmous systems from all the component subnets’ AS_PATHs on R3.
R1# sssshhhh    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i21.0.0.0         3.3.3.3                  0    100      0 45 i
*>i23.0.0.0         3.3.3.3                  0    100      0 {45,678} i
Example 12-7
Route Aggregation and the as-set Option (Continued)

Building the BGP Table     381
Table 12-6 summarizes the key points regarding summarization using the aggregate-address, 
auto-summary, and network commands.
Adding Default Routes to BGP
The ﬁnal method covered in this chapter for adding routes to a BGP table is to inject default routes 
into BGP. Default routes can be injected into BGP in one of three ways:
■
By injecting the default using the network command
■
By injecting the default using the redistribute command
■
By injecting a default route into BGP using the neighbor neighbor-id default-information 
[route-map route-map-name] BGP subcommand
When injecting a default route into BGP using the network command, a route to 0.0.0.0/0 must 
exist in the local routing table, and the network 0.0.0.0 command is required. The default IP route 
can be learned via any means, but if it is removed from the IP routing table, BGP removes the 
default route from the BGP table.
Injecting a default route through redistribution requires an additional conﬁguration command—
default-information originate. The default route must ﬁrst exist in the IP routing table; for 
instance, a static default route to null0 could be created. Then, the redistribute static command 
! Now R6 does not receive the 23.0.0.0 prefix due to R1’s check of the AS_SET PA,
! noticing that ASN 678 is in the AS_SET and is also R6’s ASN.
R6# sssshhhh    iiiipppp    bbbbggggpppp    nnnneeeeiiii    111177772222....11116666....11116666....1111    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         172.16.16.1         0 123 45 i
NOTE
Summary routes can also be added via another method. First, the router would create 
a static route, typically with destination of interface null0. Then, the preﬁx/length can be 
matched with the network command to inject the summary. This method does not ﬁlter any 
of the component subnets.
Table 12-6
Summary: Injecting Summary Routes in BGP
KEY 
POINT
Command
Component 
Subnets Removed
Routes It Can Summarize
auto-summary (with 
redistribution)
All 
Only those injected into BGP on that router 
using the redistribute command
aggregate-address
All, none, or a subset
Any preﬁxes already in the BGP table
auto-summary (with the 
network command)
None
Only those injected into BGP on that router 
using the network command
Example 12-7
Route Aggregation and the as-set Option (Continued)

382     Chapter 12: Fundamental BGP Operations
could be used to redistribute that static default route. However, in the special case of the default 
route, Cisco IOS also requires the default-information originate BGP subcommand.
Injecting a default route into BGP by using the neighbor neighbor-id default-information 
[route-map route-map-name] BGP subcommand does not add a default route to the local BGP 
table; instead, it causes the advertisement of a default to the speciﬁed neighbor. In fact, this method 
does not even check for the existence of a default route in the IP routing table by default, but it 
can. With the route-map option, the referenced route map examines the entries in the IP routing 
table (not the BGP table); if a route map permit clause is matched, then the default route is advertised 
to the neighbor. Example 12-8 shows just such an example on R1, with route-map check-default 
checking for the existence of a default route before R1 would originate a default route to R3.
The ORIGIN Path Attribute
Depending on the method used to inject a route into a local BGP table, BGP assigns one of three 
BGP ORIGIN PA codes: IGP, EGP, or incomplete. The ORIGIN PA provides a general descriptor 
as to how a particular NLRI was ﬁrst injected into a router’s BGP table. The show ip bgp 
command includes the three possible values in the legend at the top of the command output, listing 
the actual ORIGIN code for each BGP route at the far right of each output line. Table 12-7 lists 
the three ORIGIN code names, the single-letter abbreviation used by Cisco IOS, and the reasons 
why a route is assigned a particular code.
The ORIGIN codes and meanings hide a few concepts that many people ﬁnd counterintuitive. First, 
routes redistributed into BGP from an IGP actually have an ORIGIN code of incomplete. Also, do 
Example 12-8
Originating a Default Route to a Neighbor with the neighbor default-originate Command
! The pertinent parts of the R1 configuration are listed next, with the route map
! matching an IP route to 0.0.0.0/0 with a ppppeeeerrrrmmmmiiiitttt    action, enabling the    
! advertisement of a default route to neighbor 3.3.3.3 (R3).
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    ddddeeeeffffaaaauuuulllltttt----oooorrrriiiiggggiiiinnnnaaaatttteeee    rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ddddeeeeffffaaaauuuulllltttt    
!
iiiipppp    rrrroooouuuutttteeee    0000....0000....0000....0000    0000....0000....0000....0000    NNNNuuuullllllll0000
!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    ddddeeeeffff----rrrroooouuuutttteeee    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000
!
rrrroooouuuutttteeee----mmmmaaaapppp    cccchhhheeeecccckkkk----ddddeeeeffffaaaauuuulllltttt    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    ddddeeeeffff----rrrroooouuuutttteeee
! R1 indeed has a default route, as seen below.
R1# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnncccclllluuuuddddeeee    0000....0000....0000....0000////0000
S*   0.0.0.0/0 is directly connected, Null0
! R3 now learns a default route from R1, as seen below.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i0.0.0.0          1.1.1.1                       100      0 i

Building the BGP Table     383
not confuse EGP with eBGP; an ORIGIN of EGP refers to Exterior Gateway Protocol, the very old 
and deprecated predecessor to BGP. In practice, the EGP ORIGIN code should not be seen today.
The rules regarding the ORIGIN codes used for summary routes created with the aggregate-
address command can also be a bit surprising. The rules are summarized as follows:
■
If the as-set option is not used, the aggregate route uses ORIGIN code i.
■
If the as-set option is used, and all component subnets being summarized use ORIGIN code i, 
the aggregate has ORIGIN code i.
■
If the as-set option is used, and at least one of the component subnets has an ORIGIN code ?, 
the aggregate has ORIGIN code ?.
Advertising BGP Routes to Neighbors
The previous section focused on the tools that BGP can use to inject routes into a local router’s 
BGP table. BGP routers take routes from the local BGP table and advertise a subset of those routes 
to their BGP neighbors. This section continues focusing on the BGP table because the BGP route 
advertisement process takes routes from the BGP table and sends them to neighboring routers, 
where the routes are added to the neighbors’ BGP tables. Later, the ﬁnal major section in the 
chapter, “Building the IP Routing Table,” focuses on the rules regarding how BGP places routes 
into the IP routing table.
The BGP Update Message
Once a BGP table has a list of routes, paths, and preﬁxes, the router needs to advertise the 
information to neighboring routers. To do so, a router sends BGP Update messages to its 
neighbors. Figure 12-5 shows the general format of the BGP Update message.
Table 12-7
BGP ORIGIN Codes
KEY 
POINT
ORIGIN Code
Cisco IOS 
Notation
Used for Routes Injected Due to the Following 
Commands
IGP
i
network, aggregate-address (in some cases), and neighbor 
default-originate commands
EGP
e
Exterior Gateway Protocol (EGP). No speciﬁc commands apply.
Incomplete
?
redistribute, aggregate-address (in some cases), and default-
information originate command
NOTE
The BGP ORIGIN PA provides a minor descriptor for the origin of a BGP table entry, 
which is used as part of the BGP decision tree (covered in Chapter 13).
KEY 
POINT

384     Chapter 12: Fundamental BGP Operations
Figure 12-5
BGP Update Message Format
Each Update message has three main parts: 
■
The Withdrawn Routes ﬁeld enables BGP to inform its neighbors about failed routes. 
■
The Path Attributes ﬁeld lists the PAs for each route. NEXT_HOP and AS_PATH are sample 
values for this ﬁeld. 
■
The Preﬁx and Preﬁx Length ﬁelds deﬁne each individual NLRI.
The central concept in an individual Update message is the set of PAs. Then, all the preﬁxes 
(NLRIs) that share the exact same set of PAs and PA values are included at the end of the Update 
message. If a router needs to advertise a set of NLRIs, and each NLRI has a different setting for 
at least one PA, then separate Update messages will be required for each NLRI. However, when 
many routes share the same PAs—typical of preﬁxes owned by a particular ISP, for instance—
multiple NLRIs are included in a single Update. This reduces router CPU load and uses less link 
bandwidth.
Determining the Contents of Updates
A router builds the contents of its Update messages based on the contents of its BGP table. 
However, the router must choose which subset of its BGP table entries to advertise to each 
neighbor, with the set likely varying from neighbor to neighbor. Table 12-8 summarizes the rules 
about which routes BGP does not include in routing updates to each neighbor; each rule is 
described more fully following the table.
Length (Bytes) of Withdrawn Routes Section
Withdrawn Routes (Variable)
Length (Bytes) of Path Attributes Section
Path Attributes (Variable)
Prefix Length
Prefix (Variable)
Prefix Length
Prefix (Variable)
...
2 Bytes Wide

Building the BGP Table     385
BGP only advertises a route to reach a particular subnet (NLRI) if that route is considered to be 
the best route. If a BGP router learns of only one route to reach a particular preﬁx, the decision 
process is very simple. However, when choosing between multiple paths to reach the same preﬁx, 
BGP determines the best route based on a lengthy BGP decision process, as described in detail in 
Chapter 13. Assuming that none of the routers has conﬁgured any routing policies that impact the 
decision process, the decision tree reduces to a four-step process that is mainly comprised of tie-
breakers, as follows:
1.
Choose the route with the shortest AS_PATH.
2.
If AS_PATH length is a tie, prefer a single eBGP-learned route over one or more iBGP routes. 
3.
If the best route has not yet been chosen, choose the route with the lowest IGP metric to the 
NEXT_HOP of the routes.
4.
If the IGP metric ties, choose the iBGP-learned route with the lowest BGP RID of the 
advertising router.
Additionally, BGP rules out some routes from being considered best based on the value of the 
NEXT_HOP PA. For a route to be a candidate to be considered best, the NEXT_HOP must be either:
■
0.0.0.0, as the result of the route being injected on the local router.
■
Reachable according to that router’s current IP routing table. In other words, the NEXT_HOP 
IP address must match a route in the routing table.
Because the NEXT_HOP PA is so important with regard to BGP’s choice of its best path to reach 
each NLRI, this section summarizes the logic and provides several examples. The logic is 
separated into two parts based on whether the route is being advertised to an iBGP or eBGP peer. 
By default, when sending to an eBGP peer, the NEXT_HOP is changed to an IP address on the 
advertising router—speciﬁcally, to the same IP address the router used as the source IP address of 
the BGP Update message, for each respective neighbor. When sending to an iBGP peer, the default 
action is to leave the NEXT_HOP PA unchanged. Both of these default behaviors can be changed 
via the commands listed in Table 12-9. 
Table 12-8
Summary of Rules Regarding Which Routes BGP Does Not Include in an Update
KEY 
POINT
iBGP and/or eBGP
Routes Not Taken from the BGP Table
Both
Routes that are not considered “best”
Both
Routes matched by a deny clause in an outbound BGP ﬁlter
iBGP
iBGP-learned routes*
eBGP
Routes whose AS_PATH includes the ASN of the eBGP peer to which 
a BGP Update will be sent
*This rule is relaxed or changed as a result of using route reflectors or confederations.

386     Chapter 12: Fundamental BGP Operations
Note that the NEXT_HOP PA cannot be set via a route map; the only way to change the 
NEXT_HOP PA is through the methods listed in Table 12-9.
Example: Impact of the Decision Process and NEXT_HOP on BGP Updates
The next several examples together show a sequence of events regarding the propagation of 
network 31.0.0.0/8 by BGP throughout the network of Figure 12-4. R6 originated the routes in the 
30s (as in Example 12-4) by redistributing EIGRP routes learned from R9. The purpose of this 
series of examples is to explain how BGP chooses which routes to include in Updates under 
various conditions.
The ﬁrst example, Example 12-9, focuses on the commands used to examine what R6 sends to R1, 
what R1 receives, and the resulting entries in R1’s BGP table. The second example, Example 12-10, 
then examines those same routes propagated from R1 to R3, including problems related to R1’s 
default behavior of not changing the NEXT_HOP PA of those routes. Finally, Example 12-11 
shows the solution of R1’s use of the neighbor 3.3.3.3 next-hop-self command, and the impact 
that has on the contents of the BGP Updates in AS 123. 
Table 12-9
Conditions for Changing the NEXT_HOP PA
KEY 
POINT
Type of 
Neighbor
Default Action for Advertised Routes
Command to Switch to 
Other Behavior
iBGP
Do not change the NEXT_HOP 
neighbor… next-hop-self
eBGP
Change the NEXT_HOP to the update source IP address
neighbor… next-hop-
unchanged
Example 12-9
R6 Sending the 30s Networks to R1 Using BGP 
! R6 has injected the three routes listed below; they were not learned from 
! another BGP neighbor. Note all three show up as >, meaning they are the best 
! (and only in this case) routes to the destination NLRIs.
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 5, local router ID is 6.6.6.6
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         10.1.69.9           156160         32768 ?
*> 32.0.0.0         0.0.0.0                            32768 i
*> 32.1.1.0/24      10.1.69.9           156160         32768 ?
! R6 now lists the routes it advertises to R1—sort of. This command lists R6’s
! BGP table entries that are intended to be sent, but R6 can (and will in this
! case) change the information before advertising to R1. Pay particular attention
! to the Next Hop column, versus upcoming commands on R1. In effect, this command
shows R6’s current BGP table entries that will be sent to R1, but it shows them

Building the BGP Table     387
before R6 makes any changes, including NEXT_HOP.
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    
BGP table version is 5, local router ID is 6.6.6.6
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         10.1.69.9           156160         32768 ?
*> 32.0.0.0         0.0.0.0                            32768 i
*> 32.1.1.0/24      10.1.69.9           156160         32768 ?
Total number of prefixes 3 
! The next command (R1) lists the info in the received BGP update from R6. Note
! that the NEXT_HOP is different; R6 changed the NEXT_HOP before sending the 
! update, because it has an eBGP peer connection to R1, and eBGP defaults to set
! NEXT_HOP to itself. As R6 was using 172.16.16.6 as the IP address from which to
! send BGP messages to R1, R6 set NEXT_HOP to that number. Also note that R1 lists 
! the neighboring AS (678) in the Path column at the end, signifying the AS_PATH 
! for the route. 
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....6666    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    
BGP table version is 7, local router ID is 111.111.111.111
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         172.16.16.6         156160             0 678 ?
*> 32.0.0.0         172.16.16.6              0             0 678 i
*> 32.1.1.0/24      172.16.16.6         156160             0 678 ?
Total number of prefixes 3 
! The sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy command lists the state of the neighbor until the 
! neighbor becomes established; at that point, the State/PfxRcd column lists the number
! of NLRIs (prefixes) received (and still valid) from that neighbor.
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy | bbbbeeeeggggiiiinnnn    NNNNeeeeiiiigggghhhhbbbboooorrrr
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4   123      55      57        7    0    0 00:52:30        0
3.3.3.3         4   123      57      57        7    0    0 00:52:28        3
172.16.16.6     4   678      53      51        7    0    0 00:48:50        3
! R1 has also learned of these prefixes from R3, as seen below. The routes through
! R6 have one AS in the AS_PATH, and the routes through R3 have two autonmous systems, so the
! routes through R6 are best. Also, the iBGP routes have an “i” for “internal” 
! just before the prefix.
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 7, local router ID is 111.111.111.111
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
continues
Example 12-9
R6 Sending the 30s Networks to R1 Using BGP (Continued)

388     Chapter 12: Fundamental BGP Operations
Example 12-9 showed examples of how you can view the contents of the actual Updates sent to 
neighbors (using the show ip bgp neighbor advertised-routes command) and the contents of 
Updates received from a neighbor (using the show ip bgp neighbor received-routes command). 
RFC 1771 suggests that the BGP RIB can be separated into components for received Updates from 
each neighbor and sent Updates for each neighbor. Most implementations (including Cisco IOS) 
keep a single RIB, with notations as to which entries were sent and received to and from each 
neighbor. 
These show ip bgp neighbor commands with the advertised-routes option list the BGP table 
entries that will be advertised to that neighbor. However, note that any changes to the PAs inside 
each entry are not shown in the command output. For example, the show ip bgp neighbor 
172.16.16.1 advertised-routes command on R6 listed the NEXT_HOP for 31/8 as 10.1.69.9, 
which is true of that entry in R6’s BGP table. R6 then changes the NEXT_HOP PA before sending 
the actual Update, with a NEXT_HOP of 172.16.16.6. 
By the end of Example 12-9, R1 knows of both paths to each of the three preﬁxes in the 30s 
(AS_PATH 678 and 45-678), but has chosen the shortest AS_PATH (through R6) as the best path 
in each case. Note that the > in the show ip bgp output designates the routes as R1’s best routes. Next, 
Example 12-10 shows some possibly surprising results on R3 related to its choices of best routes.
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
* i31.0.0.0         3.3.3.3                  0    100      0 45 678 ?
*>                  172.16.16.6         156160             0 678 ?
* i32.0.0.0         3.3.3.3                  0    100      0 45 678 i
*>                  172.16.16.6              0             0 678 i
* i32.1.1.0/24      3.3.3.3                  0    100      0 45 678 ?
*>                  172.16.16.6         156160             0 678 ?
NOTE
For the received-routes option to work, the router on which the command is used must 
have the neighbor neighbor-id soft-reconﬁguration inbound BGP subcommand conﬁgured 
for the other neighbor.
Example 12-10
Examining the BGP Table on R3 
! R1 now updates R3 with R1’s “best” routes
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk    
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         172.16.16.6         156160             0 678 ?
*> 32.0.0.0         172.16.16.6              0             0 678 i
*> 32.1.1.0/24      172.16.16.6         156160             0 678 ?
Example 12-9
R6 Sending the 30s Networks to R1 Using BGP (Continued)

Building the BGP Table     389
Example 12-10 points out a quirk with some terminology in the show ip bgp command output, as 
well as an important design choice with BGP. First, the command output lists * as meaning valid; 
however, that designation simply means that the route is a candidate for use. Before the route can 
be actually used and added to the IP routing table, the NEXT_HOP must also be reachable. In 
some cases, routes that the show ip bgp command considers “valid” might not be usable routes, 
with Example 12-10 showing just such an example.
Each BGP route’s NEXT_HOP must be reachable for a route to be truly valid. With all default 
settings, an iBGP-learned route has a NEXT_HOP IP address of the last eBGP router to advertise 
the route. For example, R3’s route to 31.0.0.0/8 through R1 lists R6’s IP address (172.16.16.6) in 
the NEXT_HOP ﬁeld. Unfortunately, R3 does not have a route for 172.16.16.6, so that route 
cannot be considered “best” by BGP. 
There are two easy choices to solve the problem:
■
Make the eBGP neighbor’s IP address reachable by advertising that subnet into the IGP.
■
Use the next-hop-self option on the neighbor command that points to iBGP peers.
Total number of prefixes 3 
! R3 received the routes, but R3’s best routes to each prefix point back to 
! R4 in AS 45, with AS_PATH 45-678, which is a longer path. The route through R1
! cannot be “best” because the NEXT_HOP was sent unchanged by iBGP neighbor R1.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 7, local router ID is 3.3.3.3
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         4.4.4.4                                0 45 678 ?
* i                 172.16.16.6         156160    100      0 678 ?
*> 32.0.0.0         4.4.4.4                                0 45 678 i
* i                 172.16.16.6              0    100      0 678 i
*> 32.1.1.0/24      4.4.4.4                                0 45 678 ?
* i                 172.16.16.6         156160    100      0 678 ?
! Proof that R3 cannot reach the next-hop IP address is shown next.
R3# ppppiiiinnnngggg    111177772222....11116666....11116666....6666
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 172.16.16.6, timeout is 2 seconds:
.....
Success rate is 0 percent (0/5)
Example 12-10
Examining the BGP Table on R3 (Continued)
KEY 
POINT

390     Chapter 12: Fundamental BGP Operations
The ﬁrst option typically can be easily implemented. Because many eBGP neighbors use interface 
IP addresses on their neighbor commands, the NEXT_HOP exists in a subnet directly connected 
to the AS. For example, R1 is directly connected to 172.16.16.0/24, so R1 could simply advertise 
that connected subnet into the IGP inside the AS. 
However, this option might be problematic when loopback addresses are used for BGP neighbors. 
For example, if R1 had been conﬁgured to refer to R6’s 6.6.6.6 loopback IP address, and it was 
working, R1 must have a route to reach 6.6.6.6. However, it is less likely that R1 would already 
be advertising a route to reach 6.6.6.6 into ASN 123. 
The second option causes the router to change the NEXT_HOP PA to one of its own IP addresses—
an address that is more likely to already be in the neighbor’s IP routing table, which works well 
even if using loopbacks with an eBGP peer. Example 12-11 points out such a case, with R1 using 
the neighbor next-hop-self command, advertising itself (1.1.1.1) as the NEXT_HOP. As a result, 
R3 changes its choice of best routes, because R3 has a route to reach 1.1.1.1, overcoming the 
“NEXT_HOP unreachable” problem. 
Example 12-11 points out how an iBGP peer can set NEXT_HOP to itself. However, it’s also a 
good example of how BGP decides when to advertise routes to iBGP peers. The example follows 
this sequence, with the command output showing evidence of these events:
1.
The example begins like the end of Example 12-10, with R1 advertising routes with R6 as the 
next hop, and with R3 not being able to use those routes as best routes.
2.
Because R3’s best routes are eBGP routes (through R4), R3 is allowed to advertise those 
routes to R2.
3.
R1 then changes its conﬁguration to use NEXT_HOP SELF.
4.
R3 is now able to treat the routes learned from R1 as R3’s best routes.
5.
R3 can no longer advertise its best routes to these networks to R2, because the new best routes 
are iBGP routes.
Example 12-11
R3 Advertises the 30s Networks to R2, and Then R3 Withdraws the Routes 
! (Step 1): At this point, R3 still believes its best route to all three prefixes 
! in the 30s is through R4; as those are eBGP routes, R3 advertises all three
! routes to iBGP peer R2, as seen next.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    
BGP table version is 7, local router ID is 3.3.3.3
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete

Building the BGP Table     391
   Network          Next Hop            Metric LocPrf Weight Path
*> 31.0.0.0         4.4.4.4                                0 45 678 ?
*> 32.0.0.0         4.4.4.4                                0 45 678 i
*> 32.1.1.0/24      4.4.4.4                                0 45 678 ?
Total number of prefixes 3 
! (Step 2) R2 lists the number of prefixes learned from R3 next (3).
R2# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy | bbbbeeeeggggiiiinnnn    NNNNeeeeiiiigggghhhhbbbboooorrrr
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
1.1.1.1         4   123     212     210        7    0    0 03:27:59        3
3.3.3.3         4   123     213     211        7    0    0 03:28:00        3
! (Step 3) R1 now changes to use nnnneeeexxxxtttt----hhhhoooopppp----sssseeeellllffff to peer R3.
R1# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R1(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
R1(config-router)# nnnneeeeiiiigggghhhh    3333....3333....3333....3333    nnnneeeexxxxtttt----hhhhoooopppp----sssseeeellllffff    
! (Step 4) R3 now lists the routes through R1 as best, because the new
! NEXT_HOP is R1’s update source IP address, 1.1.1.1, which is reachable by R3. 
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 10, local router ID is 3.3.3.3
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*  31.0.0.0         4.4.4.4                                0 45 678 ?
*>i                 1.1.1.1             156160    100      0 678 ?
*  32.0.0.0         4.4.4.4                                0 45 678 i
*>i                 1.1.1.1                  0    100      0 678 i
*  32.1.1.0/24      4.4.4.4                                0 45 678 ? 
*>i                 1.1.1.1             156160    100      0 678 ?
! (Step 5) First, note above that all three “best” routes are iBGP routes, as noted by the “i”
! immediately before the prefix. R3 only advertises “best” routes, with the added
! requirement that it must not advertise iBGP routes to other iBGP peers. As a 
! result, R3 has withdrawn the routes that had formerly been sent to R2.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    
Total number of prefixes 0 
! The next command confirms on R2 that it no longer has any prefixes learned from
! R3.
R2# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ssssuuuummmmmmmmaaaarrrryyyy | bbbbeeeeggggiiiinnnn    NNNNeeeeiiiigggghhhhbbbboooorrrr
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
1.1.1.1         4   123     213     211        7    0    0 03:28:44        3
3.3.3.3         4   123     214     211        7    0    0 03:28:46        0
Example 12-11
R3 Advertises the 30s Networks to R2, and Then R3 Withdraws the Routes (Continued)

392     Chapter 12: Fundamental BGP Operations
Summary of Rules for Routes Advertised in BGP Updates
The following list summarizes the rules dictating which routes a BGP router sends in its Update 
messages:
■
Send only the best route listed in the BGP table.
■
To iBGP neighbors, do not advertise paths learned from other iBGP neighbors.
■
To eBGP neighbors, do not advertise paths for which the neighbor’s AS is already in the 
AS_PATH PA.
■
Do not advertise suppressed or dampened routes.
■
Do not advertise routes ﬁltered via conﬁguration.
The ﬁrst two rules have been covered in some depth in this section. Chapter 13 covers the other 
three rules in more depth.
Building the IP Routing Table
So far, this chapter has explained how to form BGP neighbor relationships, how to inject routes 
into the BGP table, and how BGP routers choose which routes to propagate to neighboring routers. 
Part of that logic relates to how the BGP decision process selects a router’s best route to each 
preﬁx, with the added restriction that the NEXT_HOP must be reachable before the route can be 
considered as a best route.
This section completes the last step in BGP’s ultimate goal—adding the appropriate routes to the 
IP routing table. In its simplest form, BGP takes the already identiﬁed best BGP routes for each 
preﬁx and adds those routes to the IP routing table. However, there are some additional 
restrictions, mainly related to administrative distance (AD) (for eBGP and iBGP routes) and BGP 
synchronization (iBGP routes only). The sections that follow detail the exceptions.
Adding eBGP Routes to the IP Routing Table
Cisco IOS software uses simple logic when determining which eBGP routes to add to the IP 
routing table. The only two requirements are as follows: 
■
The eBGP route in the BGP table is considered to be a “best” route.
■
If the same preﬁx has been learned via another IGP or via static routes, the AD for BGP 
external routes must be lower than the ADs for other routing source(s).
By default, Cisco IOS considers eBGP routes to have AD 20, which gives eBGP routes a better 
(lower) AD than any other dynamic routing protocol’s default AD (except for the AD 5 of EIGRP 
summary routes). The rationale behind the default is that eBGP-learned routes should never be 
KEY 
POINT
KEY 
POINT

Building the IP Routing Table     393
preﬁxes from within an AS. Under normal conditions, eBGP-learned preﬁxes should seldom be 
seen as IGP-learned routes as well, but when they are, the BGP route would win by default.
BGP sets the AD differently for eBGP routes, iBGP routes, and for local (locally injected) 
routes—with defaults of 20, 200, and 200, respectively. These values can be overridden in two 
ways, both consistent with the coverage of AD in Chapter 11: 
■
By using the distance bgp external-distance internal-distance local-distance BGP 
subcommand, which allows the simple setting of AD for eBGP-learned preﬁxes, iBGP-
learned preﬁxes, and preﬁxes injected locally, respectively. 
■
By changing the AD using the distance {ip-address {wildcard-mask}} [ip-standard-list | ip-
extended-list] BGP subcommand
Similar commands were covered in the Chapter 11 section “Preventing Suboptimal Routes by 
Setting the Administrative Distance.” With BGP, the IP address and wildcard mask refer to the IP 
address used on the neighbor command for that particular neighbor, not the BGP RID or 
NEXT_HOP of the route. The ACL examines the BGP routes received from the neighbor, 
assigning the speciﬁed AD for any routes matching the ACL with a permit action.
Finally, a quick note is needed about the actual IP route added to the IP routing table. The route 
contains the exact same preﬁx, preﬁx length, and next-hop IP address as listed in the BGP table—
even if the NEXT_HOP PA is an IP address that is not in a connected network. As a result, the IP 
forwarding process may require a recursive route lookup. Example 12-12 shows such a case on 
R3, where the three BGP routes each list a next hop of 1.1.1.1, which happens to be a loopback 
interface on R1. As you can see from Figure 12-4, R3 and R1 have no interfaces in common. The 
route to 1.1.1.1 lists the actual next-hop IP address to which a packet would be forwarded.
Backdoor Routes
Having a low default AD (20) for eBGP routes can cause a problem in some topologies. Figure 12-6 
shows a typical case, in which Enterprise 1 uses its eBGP route to reach network 99.0.0.0 in 
Enterprise 2. However, the two enterprises want to use the OSPF-learned route via the leased line 
between the two companies.
Example 12-12
R3 Routes with Next-Hop 1.1.1.1, Requiring Recursive Route Lookup
! Packets forwarded to 31.0.0.0/8 match the last route, with next-hop 1.1.1.1; R3
! then finds the route that matches destination 1.1.1.1 (the first route), finding
! the appropriate next-hop IP address and outgoing interface.
R3# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    1111....1111....1111....1111
D       1.1.1.1 [90/2809856] via 10.1.23.2, 04:01:44, Serial0/0/1
B       32.1.1.0/24 [200/156160] via 1.1.1.1, 00:01:00
B       32.0.0.0/8 [200/0] via 1.1.1.1, 00:01:00
B    31.0.0.0/8 [200/156160] via 1.1.1.1, 00:01:00

394     Chapter 12: Fundamental BGP Operations
Figure 12-6
The Need for BGP Backdoor Routes
R1 uses its eBGP route to reach 99.0.0.0 because eBGP has a lower AD (20) than OSPF (110). 
One solution would be to conﬁgure the distance command to lower the AD of the OSPF-learned 
route. However, BGP offers an elegant solution to this particular problem through the use of the 
network backdoor command. In this case, if R1 conﬁgures the network 99.0.0.0 backdoor 
router BGP subcommand, the following would occur:
■
R1 would use the local AD (default 200) for the eBGP-learned route to network 99.0.0.0.
■
R1 does not advertise 99.0.0.0 with BGP. 
Given that logic, R1 can use a network backdoor command for each preﬁx for which R1 needs 
to use the private link to reach Enterprise 2. If the OSPF route to each preﬁx is up and working, 
R1 uses the OSPF (AD 110) route over the eBGP-learned (AD 200) route through the Internet. If 
the OSPF route is lost, the two companies can still communicate through the Internet.
Adding iBGP Routes to the IP Routing Table
Cisco IOS has the same two requirements for adding iBGP routes to the IP routing table as it does 
for eBGP routes: 
■
The route must be the best BGP route.
■
The route must be the best route (according to the AD) in comparison with other routing 
sources. 
ASN 1
Enterprise 1
ASN 2
Enterprise 2
ASN 101
ISP 1
ASN 102
ISP 2
R1
R3
R2
Network
99.0.0.0/8
R3
EBGP –
99.0.0.0/8
EBGP –
99.0.0.0/8
EBGP –
99.0.0.0/8
OSPF –
99.0.0.0/8
Use AD 20
EBGP Route!

Building the IP Routing Table     395
Additionally, for iBGP-learned routes, IOS considers the concept of BGP synchronization. 
With BGP synchronization (often called sync) disabled using the no synchronization command, 
BGP uses the same logic for iBGP routes as it does for eBGP routes regarding which routes to add 
to the IP routing table. However, enabling BGP sync (with the synchronization BGP subcommand) 
prevents a couple of problems related to IP routing. Figure 12-7 shows the details of just such a 
problem. In this case, sync was inappropriately disabled in ASN 678, creating a black hole.
Figure 12-7
Problem: Routing Black Hole Due to Not Using BGP Sync
The following list takes a sequential view of what occurs within BGP in Figure 12-7:
1.
R5 adds two preﬁxes (21.0.0.0/8 and 22.2.2.0/24) into its BGP table using two network 
commands.
2.
R5 advertises the preﬁxes to R7, but does not redistribute the routes into its IGP.
3.
R7 advertises the preﬁxes to R6.
4.
R6, with synchronization disabled, considers the routes as “best,” so R6 adds the routes to its 
routing table.
5.
R6 also advertises the two preﬁxes to R1.
R5
ASN 678
ASN 45
ASN 123
R6
R8
R7
21.1.1.5/8
22.2.2.5/24
Injected via
network
Command
With “no sync”:
Adds routes to
21.0.0.0/8 and
22.2.2.0/24.
R8: RIP Only
– No routes to
21.0.0.0/8 or
22.2.2.0/24.
1
2
3
4
5
10.1.68.8
Discard packets sent to
21.1.1.5 and 22.2.2.5.
A
A
Black Hole
B
Misleading Update
B
Update: I can
reach 21.0.0.0/8
and 22.2.2.0/24.
R2
R3
R4
R1

396     Chapter 12: Fundamental BGP Operations
Two related problems (labeled A and B in the ﬁgure) actually occur in this case. The routing black 
hole occurs because R8 does not have a route to either of the preﬁxes advertised by BGP. R8 is not 
running BGP—a common occurrence for a router that does not directly connect to an eBGP peer. 
R7 did not redistribute those two preﬁxes into the IGP; as a result, R8 cannot route packets for 
those preﬁxes. R6, and possibly routers in AS 123, try to forward packets destined to the two 
preﬁxes through AS 678, but R8 discards the packets—hence the black hole.
The second related problem, labeled B, occurs at Step 5. R6 exacerbated the routing black-hole 
problem by advertising to another AS (AS 123) that it could reach the preﬁxes. R6 considers its 
routes to 21.0.0.0/8 and 22.2.2.0/24 as “best” routes in its BGP table, so R6 then advertises those 
routes to R1. Depending on the topology and PA settings, R1 could have considered these routes 
as its best routes—thereby sending packets destined for those preﬁxes into AS 678. (Assuming the 
conﬁguration as shown in the previous examples, R1 would actually believe the 1 AS_PATH 
through R3 to AS 45 as the best path.)
The solutions to these problems are varied, but all the solutions result in the internal routers (for 
example, R8) learning the routes to these preﬁxes, thereby removing the black hole and removing 
the negative effect of advertising the route. The original solution to this problem involves the use 
of BGP synchronization, along with redistributing BGP routes into the IGP. However, two later 
solutions provide better options today:
■
BGP route reﬂectors 
■
BGP confederations
The next several sections cover all of these options.
Using Sync and Redistributing Routes
BGP synchronization is best understood when considered in the context in which it was intended 
to be used—namely, in conjunction with the redistribution of BGP routes into the IGP. This 
method is seldom used by ISPs today, mainly because of the large number of routes that would be 
injected into the IGP. However, using BGP sync in conjunction with redistribution solves both 
problems related to the routing black hole.
The key to understanding BGP sync is to know that redistribution solves the routing black-hole 
problem, and sync solves the problem of advertising a black-hole route to another AS. For 
example, to solve the routing black-hole problem, R7 redistributes the two preﬁxes into RIP (from 
Figure 12-7). R8 then has routes to those preﬁxes, solving the black-hole problem. 
Sync logic on R6 controls the second part of the overall problem, regulating the conditions under 
which R6 advertises the preﬁxes to other eBGP peers (like R1). Sync works by controlling 
whether a BGP table entry can be considered “best”; keep in mind that a route in the BGP table 
KEY 
POINT

Building the IP Routing Table     397
must be considered to be “best” before it can be advertised to another BGP peer. The BGP sync 
logic controls that decision as follows: 
Do not consider an iBGP route in the BGP table as “best” unless the exact 
preﬁx was learned via an IGP and is currently in the routing table.
Sync logic essentially gives a router a method to know whether the non-BGP routers inside the AS 
should have the ability to route packets to the preﬁx. Note that the route must be IGP-learned 
because a static route on R6 would not imply anything about what other routers (like R8) might 
or might not have learned. For example, using Figure 12-7 again, once R6 learns the preﬁxes via 
RIP, RIP will place the routes in its IP routing table. At that point, the sync logic on R6 can 
consider those same BGP-learned preﬁxes in the BGP table as candidates to be best routes. If 
chosen as best, R6 can then advertise the BGP routes to R1.
Example 12-13 shows the black hole occurring from R6’s perspective, with sync disabled on R6 
using the no synchronization BGP subcommand. Following that, the example shows R6’s 
behavior once R7 has begun redistributing BGP routes into RIP, with sync enabled on R6.
Example 12-13
Comparing the Black Hole (No Sync) and Solution (Sync)  
! R6 has a “best” BGP route to 21.0.0.0/8 through R7 (7.7.7.7), but a ttttrrrraaaacccceeee 
! command shows that the packets are discarded by R8 (10.1.68.8).
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  21.0.0.0         172.16.16.1                            0 123 45 i
*>i                 7.7.7.7                  0    100      0 45 i
*  22.2.2.0/24      172.16.16.1                            0 123 45 i
*>i                 7.7.7.7                  0    100      0 45 i
R6# ttttrrrraaaacccceeee    22221111....1111....1111....5555
Type escape sequence to abort.
Tracing the route to 21.1.1.5
  1 10.1.68.8 20 msec 20 msec 20 msec
  2 10.1.68.8 !H  *  !H 
! R7 is now configured to redistribute BGP into RIP.
R7# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R7(config)# rrrroooouuuutttteeeerrrr    rrrriiiipppp
R7(config-router)# rrrreeeeddddiiiisssstttt    bbbbggggpppp    666677778888    mmmmeeeettttrrrriiiicccc    3333
! Next, R6 switches to use sync, and the BGP process is cleared.
R6# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R6(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    666677778888
R6(config-router)# ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
R6(config-router)# ^^^^ZZZZ
R6# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****
continues
KEY 
POINT

398     Chapter 12: Fundamental BGP Operations
Disabling Sync and Using BGP on All Routers in an AS
A second method to overcome the black-hole issue is to simply use BGP to advertise all the BGP-
learned preﬁxes to all routers in the AS. Because all routers know the preﬁxes, sync can be 
disabled safely. The downside is the introduction of BGP onto all routers, and the addition of iBGP 
neighbor connections between each pair of routers. (In an AS with N routers, N(N−1)/2 neighbor 
connections will be required.) With large autonomous systems, BGP performance and 
convergence time can degrade as a result of the large number of peers.
BGP needs the full mesh of iBGP peers inside an AS because BGP does not advertise iBGP routes 
(routes learned from one iBGP peer) to another iBGP peer. This additional restriction helps 
prevent routing loops, but it then requires a full mesh of iBGP peers—otherwise, only a subset of 
the iBGP peers would learn each preﬁx. 
! R6’s BGP table entries now show “RIB-failure,” a status code that can mean 
! (as of some 12.2T IOS releases) that the prefix is known via an IGP. 21.0.0.0/8 
! is shown to be included as a RIP route in R6’s routing table. Note also that R6
! considers the BGP routes through R7 as the “best” routes; these are still 
! advertised to R1.
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 5, local router ID is 6.6.6.6
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              r RIB-failure, S Stale
Origin codes: i - IGP, e - EGP, ? - incomplete
   Network          Next Hop            Metric LocPrf Weight Path
r  21.0.0.0         172.16.16.1                            0 123 45 i
r>i                 7.7.7.7                  0    100      0 45 i
r  22.2.2.0/24      172.16.16.1                            0 123 45 i
r>i                 7.7.7.7                  0    100      0 45 i
R6# sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee | iiiinnnnccccllll    22221111....0000....0000....0000
R    21.0.0.0/8 [120/4] via 10.1.68.8, 00:00:15, Serial0/0.8
! R6 considers the routes through R7 as the “best” routes; these are still 
! advertised to R1, even though they are in a “RIB-failure” state.
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk    
   Network          Next Hop            Metric LocPrf Weight Path
r>i21.0.0.0         7.7.7.7                  0    100      0 45 i
r>i22.2.2.0/24      7.7.7.7                  0    100      0 45 i
NOTE
Sync includes an additional odd requirement when OSPF is used as the IGP. If the 
OSPF RID of the router advertising the preﬁx is a different number than the BGP router 
advertising that same preﬁx, then sync still does not allow BGP to consider the route to be 
the best route. OSPF and BGP use the same priorities and logic to choose their RIDs; however, 
when using sync, it makes sense to explicitly conﬁgure the RID for OSPF and BGP to be the 
same value on the router that redistributes from BGP into OSPF.
Example 12-13
Comparing the Black Hole (No Sync) and Solution (Sync)  (Continued)

Building the IP Routing Table     399
BGP offers two tools (confederations and route reﬂectors) that reduce the number of peer 
connections inside an AS, prevent loops, and allow all routers to learn about all preﬁxes. These 
two tools are covered next.
Confederations
An AS using BGP confederations, as deﬁned in RFC 3065, separates each router in the AS into 
one of several confederation sub-autonomous systems (sub-autonomous systems). Peers inside the 
same sub-AS are considered to be confederation iBGP peers, and routers in different sub-
autonomous systems are considered to be confederation eBGP peers. 
Confederations propagate routes to all routers, without a full mesh of peers inside the entire AS. 
To do so, confederation eBGP peer connections act like true eBGP peers in some respects. In a 
single sub-AS, the confederation iBGP peers must be fully meshed, because they act exactly like 
normal iBGP peers—in other words, they do not advertise iBGP routes to each other. However, 
confederation eBGP peers act like eBGP peers in that they can advertise iBGP routes learned 
inside their confederation sub-AS into another confederation sub-AS. 
Confederations prevent loops inside a confederation AS by using the AS_PATH PA. BGP routers 
in a confederation add the sub-autonomous systems into the AS_PATH as part of an AS_PATH 
segment called the AS_CONFED _SEQ. (The AS_PATH consists of up to four different 
components, called segments—AS_SEQ, AS_SET, AS_CONFED_ SEQ, and AS_CONFED_SET; 
see the earlier section titled “Manual Summaries and the AS_PATH Path Attribute” for more 
information on AS_SEQ and AS_SET.) 
Just as the AS_SEQ and AS_SET components help prevent loops between autonomous systems, 
AS_CONFED_SEQ and AS_CONFED_SET help prevent loops within confederation 
autonomous systems. Before confederation eBGP peers can advertise an iBGP route into 
another sub-AS, the router must make sure the destination sub-AS is not already in the 
AS_PATH AS_CONFED_SEQ segment. For example, in Figure 12-8, the routers in sub-ASN 
65001 learn some routes and then advertise those routes to sub-ASNs 65002 and 65003. Routers 
in these two sub-ASNs advertise the routes to each other. However, they never re-advertise the 
routes back to routers in sub-ASN 65001 due to AS_CONFED_SEQ, as shown in parentheses 
inside the ﬁgure. 
NOTE
The terms AS and sub-AS refer to the concept of an autonomous system and sub-
autonomous system. ASN and sub-ASN refer to the actual AS numbers used.

400     Chapter 12: Fundamental BGP Operations
Figure 12-8
AS_PATH Changes in a Confederation
Figure 12-8 depicts a detailed example, with the steps in the following list matching the steps 
outlined in circled numbers in the ﬁgure:
1.
21.0.0.0/8 is injected by R45 and advertised via eBGP to AS 123. This route has an AS_PATH 
of 45. 
2.
R3 advertises the preﬁx via its two iBGP connections; however, due to iBGP rules inside the 
sub-AS, R1 and R2 do not attempt to advertise this preﬁx to each other. 
3.
Routers in sub-AS 65001 use eBGP-like logic to advertise 21.0.0.0/8 to their confederation 
eBGP peers, but ﬁrst they inject their own sub-AS into the AS_PATH AS_CONFED_SEQ 
segment. (This part of the AS_PATH is displayed inside parentheses in the output of the show 
ip bgp command, as shown in the ﬁgure.) 
4.
The same process as in Step 2 occurs in the other two sub-autonomous systems, respectively. 
5.
R6 and R9 advertise the route to each other after adding their respective ASNs to the 
AS_CONFED_SEQ.
6.
R9 advertises the preﬁx via a true eBGP connection after removing the sub-AS portion of the 
AS_PATH.
1
3
5
6
Sub-ASN 65001
R2
R1
R3
2
Sub-ASN 65003
ASN 123
ASN 45
ASN 678
R7
R9
R8
Sub-ASN 65002
21.0.0.0/8
AS_PATH: (65001) 45
3
21.0.0.0/8
AS_PATH: (65001) 45
Update: 21.0.0.0/8
AS_PATH 45
21.0.0.0/8
AS_PATH: 123 45
21.0.0.0/8
AS_PATH: (65003 65001) 45
R4
R6
R5
4
4
5
21.0.0.0/8
AS_PATH: (65002 65001) 45
R77
R45

Building the IP Routing Table     401
By the end of these steps, all the routers inside ASN 123 have learned of the 21.0.0.0/8 preﬁx. 
Also, ASN 678 (R77 in this case) learned of a route for that same preﬁx—a route that would work 
and would not have the black-hole effect. In fact, from ASN 678’s perspective, it sees a route that 
appears to be through ASNs 123 and 45. Also note that routers in sub-AS 65002 and 65003 will 
not advertise the preﬁx back into sub-AS 65001 because AS 65001 is already in the confederation 
AS_PATH.
The choice of values for sub-ASNs 65001, 65002, and 65003 is not coincidental in this case. ASNs 
64512 through 65535 are private ASNs, meant for use in cases where the ASN will not be 
advertised to the Internet or other autonomous systems. By using private ASNs, a confederation 
can hopefully avoid the following type of problem. Imagine that sub-AS 65003 instead used 
ASN 45. The AS_PATH loop check examines the entire AS_PATH. As a result, the preﬁxes shown 
in Figure 12-8 would never be advertised to sub-AS 45, and in turn would not be advertised to 
ASN 678. Using private ASNs would prevent this problem.
The following list summarizes the key points regarding confederations:
■
Inside a sub-AS, full mesh is required, because full iBGP rules are in effect.
■
The confederation eBGP connections act like normal eBGP connections in that iBGP routes 
are advertised—as long as the AS_PATH implies that such an advertisement would not cause 
a loop.
■
Confederation eBGP connections also act like normal eBGP connections regarding Time to 
Live (TTL), because all packets use a TTL of 1 by default. (TTL can be changed with the 
neighbor ebgp-multihop command.)
■
Confederation eBGP connections act like iBGP connections in every other regard—for 
example, the NEXT_HOP is not changed by default.
■
Confederation ASNs are not considered part of the length of the AS_PATH when a router 
chooses the best routes based on the shortest AS_PATH. (See Chapter 13 for more details on 
the BGP decision process.)
■
Confederation routers remove the confederation ASNs from the AS_PATH in Updates sent 
outside the confederation; therefore, other routers do not know that a confederation was used.
Conﬁguring Confederations
Conﬁguring confederations requires only a few additional commands beyond those already 
covered in this chapter. However, migrating to use confederations can be quite painful. The 
problem is that the true ASN will no longer be conﬁgured on the router bgp command, but instead 
on the bgp confederation identiﬁer BGP subcommand. So, BGP will simply be out of service on 
one or more routers while the migration occurs. Table 12-10 lists the key confederation 
commands, and their purpose.
KEY 
POINT

402     Chapter 12: Fundamental BGP Operations
Example 12-14 shows a simple conﬁguration for the topology in Figure 12-9. 
Figure 12-9
Internetwork Topology with Confederations in ASN 123
In this internetwork topology, R1 is in sub-AS 65001, with R2 and R3 in sub-AS 65023. In this 
case, R1 and R3 will not be neighbors. The following list outlines the sequence of events to 
propagate a preﬁx:
1.
R3 will learn preﬁx 21.0.0.0/8 via eBGP from AS 45 (R4).
2.
R3 will advertise the preﬁx via iBGP to R2.
3.
R2 will advertise the preﬁx via confederation eBGP to R1.
Table 12-10
BGP Subcommands Used for Confederations
Purpose
Command
Deﬁne a router’s sub-AS
router bgp sub-as
Deﬁne the true AS
bgp confederation identiﬁer asn
To identify a neighboring AS as another sub-AS
bgp confederation peers sub-asn
Example 12-14
Confederation Inside AS 123  
! R1 Configuration. Note the sub-AS in the rrrroooouuuutttteeeerrrr    bbbbggggpppp command, and the true AS in
! the bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr command. Also note the nnnneeeeiiiigggghhhhbbbboooorrrr    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp
! command for confederation eBGP peer R2, as they are using loopbacks. Also, sync
10.1.23.2
10.1.12.2
10.1.23.3
10.1.12.1
EBGP
10.1.34.4
10.1.134.4
10.1.34.3
10.1.134.3
172.16.16.6
172.16.16.1
ASN 678
ASN 45
Confederation:
ASN 123
Confed-AS
65023
Confed-AS
65001
EBGP
2
3
1
Update: 21.0.0.0/8
AS_PATH 45
R3
R4
R6
R1
R2

Building the IP Routing Table     403
! is not needed now that the confederation has been created.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    66665555000000001111
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    rrrroooouuuutttteeeerrrr----iiiidddd    111111111111....111111111111....111111111111....111111111111
    bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr    111122223333
    bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    ppppeeeeeeeerrrrssss    66665555000022223333    
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    rrrreeeemmmmooootttteeee----aaaassss    66665555000022223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp    2222
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    nnnneeeexxxxtttt----hhhhoooopppp----sssseeeellllffff
    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....6666    rrrreeeemmmmooootttteeee----aaaassss    666677778888
! R2 Configuration. Note the bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    ppppeeeeeeeerrrrssss    66665555000022223333 command. Without it, 
! R2 would think that neighbor 1.1.1.1 was a true eBGP connection, and remove
! the confederation AS_PATH entries before advertising to R1.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    66665555000022223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr    111122223333
    bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    ppppeeeeeeeerrrrssss    66665555000000001111    
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    rrrreeeemmmmooootttteeee----aaaassss    66665555000000001111
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp    2222
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrreeeemmmmooootttteeee----aaaassss    66665555000022223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
! R3 Configuration. Note that R3 does not need a bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    ppppeeeeeeeerrrrssss command, 
! as it does not have any confederation eBGP peers. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    66665555000022223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    lllloooogggg----nnnneeeeiiiigggghhhhbbbboooorrrr----cccchhhhaaaannnnggggeeeessss
    bbbbggggpppp    ccccoooonnnnffffeeeeddddeeeerrrraaaattttiiiioooonnnn    iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    rrrreeeemmmmooootttteeee----aaaassss    66665555000022223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    nnnneeeexxxxtttt----hhhhoooopppp----sssseeeellllffff
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    rrrreeeemmmmooootttteeee----aaaassss    44445555
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp    2222
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
! R1 has received the 21.0.0.0/8 prefix, with sub-AS 65023 shown in parentheses,
! and true AS 45 shown outside the parentheses. R1 has also learned the same 
! prefix via AS 678 and R6. The route through the sub-AS is best because it is the
! shortest AS_PATH; the shortest AS_PATH logic ignores the confederation sub-autonmous systems. 
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         3.3.3.3                  0    100      0 (65023) 45 i
*                   172.16.16.6                            0 678 45 i
*> 22.2.2.0/24      3.3.3.3                  0    100      0 (65023) 45 i
*                   172.16.16.6                            0 678 45 i
continues
Example 12-14
Confederation Inside AS 123  (Continued)

404     Chapter 12: Fundamental BGP Operations
Route Reﬂectors
Route reﬂectors (RRs) achieve the same result as confederations—they remove the need for a full 
mesh of iBGP peers, allow all iBGP routes to be learned by all iBGP routers in the AS, and prevent 
loops. In an iBGP design using RRs, a partial mesh of iBGP peers is deﬁned. Some routers are 
conﬁgured as RR servers; these servers are allowed to learn iBGP routes from their clients and 
then advertise them to other iBGP peers. The example in Figure 12-10 shows the key terms and 
some of the core logic used by an RR; note that only the RR server itself uses different logic, with 
clients and nonclients acting as normal iBGP peers.
Figure 12-10
Basic Flow Using a Single RR, Four Clients, and Two Nonclients
! R6 shows its received update from R1, showing the removed sub-AS, and the 
! inclusion of the true AS, AS 123.
R6# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    111177772222....11116666....11116666....1111    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss | bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
r  21.0.0.0         172.16.16.1                            0 123 45 i
r  22.2.2.0/24      172.16.16.1                            0 123 45 i
Example 12-14
Confederation Inside AS 123  (Continued)
R2
R3
R77
R1
R13
R14
R12
R11
R6
11.0.0.0/8
Non-Client
Non-Client
ASN 123
ASN 199
ASN 111
RR
Cluster
RR
Server
Clients
EBGP
EBGP
1
2
3
4
4
5

Building the IP Routing Table     405
Figure 12-10 shows how preﬁx 11.0.0.0/8 is propagated through the AS, using the following steps:
1.
R11 learns 11.0.0.0/8 using eBGP.
2.
R11 uses normal iBGP rules and sends an Update to R1.
3.
R1 reﬂects the routes by sending Updates to all other clients.
4.
R1 also reﬂects the routes to all non-clients.
5.
Nonclients use non-RR rules, sending an Update over eBGP to R77.
Only the router acting as the RR uses modiﬁed rules; the other routers (clients and non-clients) are 
not even aware of the RR, nor do they change their operating rules. Table 12-11 summarizes the 
rules for RR operation, which vary based on from what type of BGP peer the RR receives the 
preﬁx. The table lists the sources from which a preﬁx can be learned, and the types of other routers 
to which the RR will reﬂect the preﬁx information.
The one case in which the RR does not reﬂect routes is when the RR receives a route from a 
nonclient, with the RR not reﬂecting that route to other nonclients. The perspective behind that 
logic is that RRs act like normal iBGP peers with nonclients and with eBGP neighbors—in other 
words, the RR does not forward iBGP-learned routes to other nonclient iBGP peers. The 
difference in how the RR behaves relates to when a client sends the RR a preﬁx, or when the RR 
decides to reﬂect a preﬁx to the clients.
One (or more) RR servers, and their clients, create a single RR cluster. A BGP design using RRs 
can consist of: 
■
Clusters with multiple RRs in a cluster
■
Multiple clusters, although using multiple clusters makes sense only when physical 
redundancy exists as well. 
With multiple clusters, at least one RR from a cluster must be peered with at least one RR in each 
of the other clusters. Typically, all RRs are peered directly, creating a full mesh of RR iBGP peers 
among RRs. Also, if some routers are nonclients, they should be included in the full mesh of RRs. 
Table 12-11
Types of Neighbors to Which Preﬁxes Are Reﬂected
Location from Which a 
Preﬁx Is Learned
Are Routes Advertised to 
Clients?
Are Routes Advertised to 
Non-clients?
Client
Yes
Yes
Non-client
Yes
No
eBGP
Yes
Yes
KEY 
POINT
-

406     Chapter 12: Fundamental BGP Operations
Figure 12-11 shows the concept, with each RR fully meshed with the other RRs in other clusters, 
as well as with the nonclient.
Figure 12-11
Multiple RR Clusters with Full Mesh Among RRs and Nonclients
If you consider the logic summary in Table 12-11 compared to Figure 12-11, it appears that routing 
loops are not only possible but probable with this design. However, the RR feature uses several 
tools to prevent loops, as follows:
■
CLUSTER_LIST—RRs add their cluster ID into a BGP PA called the CLUSTER_LIST 
before sending an Update. When receiving a BGP Update, RRs discard received preﬁxes for 
which their cluster ID already appears. As with AS_PATH for confederations, this prevents 
RRs from looping advertisements between clusters.
■
ORIGINATOR_ID—This PA lists the RID of the ﬁrst iBGP peer to advertise the route into 
the AS. If a router sees its own BGP ID as the ORIGINATOR_ID in a received route, it does 
not use or propagate the route.
■
Only advertise the best routes—RRs reﬂect routes only if the RR considers the route to be 
a “best” route in its own BGP table. This further limits the routes reﬂected by the RR. (It also 
has a positive effect compared with confederations in that an average router sees fewer, 
typically useless, redundant routes.)
R1
R2
RR
Server
RR Cluster 1
RR Cluster 3
RR Cluster 2
RR
Server
Clients
R4
Non-Client
RR
Server
Clients
R3
RR
Server
Clients
KEY 
POINT

Building the IP Routing Table     407
Example 12-15 shows a simple example of using RRs. Figure 12-12 shows the modiﬁed AS 123 
from the network of Figure 12-4, now with four routers. The design uses two clusters, with two 
RRs (R9 and R2) and two clients (R1 and R3). The following list outlines the sequence of events 
to propagate a preﬁx, as shown in Figure 12-12:
1.
R3 learns preﬁx 21.0.0.0/8 via eBGP from AS 45 (R4).
2.
R3 advertises the preﬁx via iBGP to R2 using normal logic.
3.
R2, an RR, receiving a preﬁx from an RR client, reﬂects the route via iBGP to R9—a 
nonclient as far as R2 is concerned.
4.
R9, an RR, receiving an iBGP route from a nonclient, reﬂects the route to R1, its RR client.
Figure 12-12
Modiﬁed AS 123 Used in RR Example 12-15
Example 12-12
RR Conﬁguration for AS 123, Two RRs, and Two Clients 
! R3 Configuration. The RR client has no overt signs of being a client; the 
! process is completely hidden from all routers except RRs. Also, do not forget 
! that one of the main motivations for using RRs is to allow sync to be disabled.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    rrrreeeemmmmooootttteeee----aaaassss    111122223333
continues
EBGP
1
R2
R3
RR
Client
R4
RR
Client
IBGP
IBGP
Cluster-ID 1
ASN 123
2
21.0.0.0/8
3
4
R9
R1
IBGP
Cluster-ID 2

408     Chapter 12: Fundamental BGP Operations
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    nnnneeeexxxxtttt----hhhhoooopppp----sssseeeellllffff
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    rrrreeeemmmmooootttteeee----aaaassss    44445555
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    eeeebbbbggggpppp----mmmmuuuullllttttiiiihhhhoooopppp    222255555555
    nnnneeeeiiiigggghhhhbbbboooorrrr    4444....4444....4444....4444    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
! R2 Configuration. The cluster ID would default to R2’s BGP RID, but it has been
! manually set to “1,” which will be listed as “0.0.0.1” in command output. R2
! designates 3.3.3.3 (R3) as a client.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    cccclllluuuusssstttteeeerrrr----iiiidddd    1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrroooouuuutttteeee----rrrreeeefffflllleeeeccccttttoooorrrr----cccclllliiiieeeennnntttt
    nnnneeeeiiiigggghhhhbbbboooorrrr    9999....9999....9999....9999    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    9999....9999....9999....9999    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk1111
! R9 Configuration. The configuration is similar to R2, but with a different 
! cluster ID. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnnoooo    ssssyyyynnnncccchhhhrrrroooonnnniiiizzzzaaaattttiiiioooonnnn
    bbbbggggpppp    rrrroooouuuutttteeeerrrr----iiiidddd    9999....9999....9999....9999
    bbbbggggpppp    cccclllluuuusssstttteeeerrrr----iiiidddd    2222
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk2222
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    rrrroooouuuutttteeee----rrrreeeefffflllleeeeccccttttoooorrrr----cccclllliiiieeeennnntttt
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    rrrreeeemmmmooootttteeee----aaaassss    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    uuuuppppddddaaaatttteeee----ssssoooouuuurrrrcccceeee    LLLLooooooooppppbbbbaaaacccckkkk2222
    nnnnoooo    aaaauuuuttttoooo----ssssuuuummmmmmmmaaaarrrryyyy
! The R1 configuration is omitted, as it contains no specific RR configuration,
! as is the case with all RR clients.
! The 21.0.0.0/8 prefix has been learned by R3, forwarded over iBGP as normal to
! R2. Then, R2 reflected the prefix to its only other peer, R9. The sssshhhhoooowwww    iiiipppp    bbbbggggpppp
! 22221111....0000....0000....0000 command shows the current AS_PATH (45); the iBGP originator of the
! route (3.3.3.3), and the iBGP neighbor from which it was learned (“from
! 2.2.2.2”); and the cluster list, which currently has R2’s cluster (0.0.0.1).
! The next output is from R9. 
R9# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    22221111....0000....0000....0000
BGP routing table entry for 21.0.0.0/8, version 3
Paths: (1 available, best #1, table Default-IP-Routing-Table)
Flag: 0x820
  Advertised to update-groups:
     2         
  45
    3.3.3.3 (metric 2300416) from 2.2.2.2 (2.2.2.2)
      Origin IGP, metric 0, localpref 100, valid, internal, best
      Originator: 3.3.3.3, Cluster list: 0.0.0.1
! RR R9 reflected the prefix to its client (R1), as seen next. Note the changes
Example 12-12
RR Conﬁguration for AS 123, Two RRs, and Two Clients (Continued)

Building the IP Routing Table     409
! compared to R9’s output, with iBGP route being learned from R9 (“from 9.9.9.9”),
! and the cluster list now including cluster 0.0.0.2, as added by R9.
R1# sssshhhhoooo    iiiipppp    bbbbggggpppp    22221111....0000....0000....0000
BGP routing table entry for 21.0.0.0/8, version 20
Paths: (1 available, best #1, table Default-IP-Routing-Table)
  Not advertised to any peer
  45
    3.3.3.3 (metric 2302976) from 9.9.9.9 (9.9.9.9)
      Origin IGP, metric 0, localpref 100, valid, internal, best
Originator: 3.3.3.3, Cluster list: 0.0.0.2, 0.0.0.1
Example 12-12
RR Conﬁguration for AS 123, Two RRs, and Two Clients (Continued)

410     Chapter 12: Fundamental BGP Operations
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” section of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with a Key Point icon.
Table 12-12 lists some of the key RFCs for BGP. 
Table 12-13 lists the BGP path attributes mentioned in this chapter, and describes their purpose. 
Chapter 13 lists additional PAs that are not covered in this chapter. 
Table 12-12
Protocols and Standards for Chapter 12
Topic
Standard
BGP-4
RFC 1771
BGP Confederations
RFC 3065
BGP Route Reﬂection
RFC 2796
MD5 Authentication
RFC 2385
Table 12-13
BGP PAs 
Path Attribute
Description
Characteristics
AS_PATH
Lists ASNs through which the route has been 
advertised
Well known 
Mandatory
NEXT_HOP
Lists the next-hop IP address used to reach an NLRI
Well known 
Mandatory
AGGREGATOR
Lists the RID and ASN of the router that created a 
summary NLRI
Optional Transitive
ATOMIC_AGGREGA
TE
Tags a summary NLRI as being a summary
Well known 
Discretionary
ORIGIN
Value implying from where the route was taken for 
injection into BGP; i(IGP), e (EGP), or ? 
(incomplete information)
Well known 
Mandatory

Foundation Summary     411
Table 12-15 lists some of the most popular Cisco IOS commands related to the topics in this 
chapter. 
Path Attribute
Description
Characteristics
ORIGINATOR_ID
Used by RRs to denote the RID of the iBGP 
neighbor that injected the NLRI into the AS
Optional    
Nontransitive
CLUSTER_LIST
Used by RRs to list the RR cluster IDs in order to 
prevent loops
Optional    
Nontransitive
Table 12-14
Summary: Methods to Introduce Entries into the BGP Table
Method
Summary Description
network command
Advertises a route into BGP. Depends on the existence of the conﬁgured 
network/subnet in the IP routing table.
Redistribution
Takes IGP, static, or connected routes; metric (MED) assignment is not 
required.
Manual summarization
Requires at least one component subnet in the BGP table; options for 
keeping all component subnets, suppressing all from advertisement, or 
suppressing a subset from being advertised.
default-information 
originate
Requires a default route in the IP routing table, plus the redistribute 
command.
neighbor default-
originate
With the optional route map, requires the route map to match the IP routing 
table with a permit action before advertising a default route. Without the 
route map, the default is always advertised.
Table 12-15
Command Reference for Chapter 12 
Command
Command Mode and Description
aggregate-address address mask [as-set] 
[summary-only] [suppress-map map-name] 
[advertise-map map-name] 
[attribute-map map-name]
BGP mode; summarizes BGP routes, suppressing 
all/none/some of the component subnets
auto-summary
BGP mode; enables automatic summarization to 
classful boundaries of locally injected routes 
continues
Table 12-13
BGP PAs (Continued)

412     Chapter 12: Fundamental BGP Operations
Command
Command Mode and Description
bgp client-to-client reﬂection
BGP mode; on by default, tells a RR server to reﬂect 
routes learned from a client to other clients
bgp cluster-id cluster-id
BGP mode; deﬁnes a nondefault RR cluster ID to a 
RR server
bgp confederation identiﬁer as-number
BGP mode; for confederations, deﬁnes the ASN used 
for the entire AS as seen by other autonmous systems
bgp confederation peers as-number 
[... as-number]
BGP mode; for confederations, identiﬁes which 
neighboring ASNs are in other confederation sub-
autonmous systems
bgp log-neighbor-changes
BGP mode; on by default, it tells BGP to create log 
messages for signiﬁcant changes in BGP operation
bgp router-id ip-address
BGP mode; deﬁnes the BGP router ID.
default-information originate
BGP mode; required to allow a static default route to 
be redistributed into BGP
default-metric number
BGP mode; sets the default metric assigned to routes 
redistributed into BGP; normally defaults to the IGP 
metric for each route
distance bgp external-distance internal-
distance local-distance
BGP mode; deﬁnes the administrative distance for 
eBGP, iBGP, and locally injected BGP routes
neighbor {ip-address | peer-group-name} 
default-originate [route-map map-name]
BGP mode; tells the router to add a default route to 
the BGP Update sent to this neighbor, under the 
conditions set in the optional route map
neighbor {ip-address | peer-group-name} 
description text
BGP mode; adds a descriptive text reference in the 
BGP conﬁguration
neighbor {ip-address | peer-group-name} 
ebgp-multihop [ttl]
BGP mode; for eBGP peers, sets the TTL in packets 
sent to this peer to something larger than the default 
of 1
neighbor ip-address | peer-group-name 
next-hop-self
BGP mode; causes IOS to reset the NEXT_HOP PA 
to the IP address used as the source address of 
Updates sent to this neighbor
neighbor {ip-address | peer-group-name} 
password string
BGP mode; deﬁnes the key used in an MD5 hash of 
all BGP messages to this neighbor
neighbor ip-address peer-group peer-group-
name
BGP mode; associates a neighbor’s IP address as part 
of a peer group
Table 12-15
Command Reference for Chapter 12 (Continued)

Foundation Summary     413
Command
Command Mode and Description
neighbor peer-group-name peer-group
BGP mode; deﬁnes the name of a peer group
neighbor {ip-address | peer-group-name} 
remote-as as-number
BGP mode; deﬁnes the AS of the neighbor
neighbor {ip-address | peer-group-name} 
shutdown
BGP mode; administratively shuts down a neighbor, 
stopping the TCP connection
neighbor [ip-address | peer-group-name] 
timers keepalive holdtime
BGP mode; sets the two BGP timers, just for this 
neighbor
neighbor {ip-address | ipv6-address | peer-
group-name} update-source interface-type 
interface-number
BGP mode; deﬁnes the source IP address used for 
BGP messages sent to this neighbor 
network {network-number [mask network-
mask] [route-map map-tag]
BGP mode; causes IOS to add the deﬁned preﬁx to 
the BGP table if it exists in the IP routing table
router bgp as-number
Global command; deﬁnes the ASN and puts the user 
in BGP mode
synchronization
BGP mode; enables BGP synchronization
timers bgp keepalive holdtime
BGP mode; deﬁnes BGP timers for all neighbors
show ip bgp [network] [network-mask] 
[longer-preﬁxes] [preﬁx-list preﬁx-list-name | 
route-map route-map-name] [shorter preﬁxes 
mask-length]
Exec mode; lists details of a router’s BGP table
show ip bgp injected-paths
Exec mode; lists routes locally injected into BGP
show ip bgp neighbors [neighbor-address] 
[received-routes | routes | advertised-routes | 
{paths regexp} | dampened-routes | received 
preﬁx-ﬁlter]]
Exec mode; lists information about routes sent and 
received to particular neighbors
show ip bgp peer-group [peer-group-name] 
[summary]
Exec mode; lists details about a particular peer group
show ip bgp summary
Exec mode; lists basic statistics for each BGP peer
Table 12-15
Command Reference for Chapter 12 (Continued)

414     Chapter 12: Fundamental BGP Operations
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
path attribute, BGP table, BGP Update, established, iBGP, eBGP, EGP, BGP, peer 
group, eBGP multihop, autonomous system, AS number, AS_PATH, ORIGIN, 
NLRI, NEXT_HOP, MULTI_EXIT_DISC, LOCAL_PREF, routing black hole, 
synchronization, confederation, route reﬂector, confederation identiﬁer, sub-AS, 
route reﬂector server, route reﬂector client, route reﬂector nonclient, confederation 
AS, confederation eBGP, weight  
Refer to the CD-based glossary to check your answers.

Further Reading     415
Further Reading
Routing TCP/IP, Volume II, by Jeff Doyle and Jennifer DeHaven Carrol
Cisco BGP-4 Command and Conﬁguration Handbook, by William R. Parkhurst
Internet Routing Architectures, by Bassam Halabi
Troubleshooting IP Routing Protocols, by Zaheer Aziz, Johnson Liu, Abe Martey, and 
Faraz Shamim
Most every reference reached from Cisco’s BGP support page at http://www.cisco.com/en/US/
partner/tech/tk365/tk80/tsd_technology_support_sub-protocol_home.html. Requires a CCO 
username/password.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Routing
— BGP
—  show and debug Commands

C H A P T E R 13
BGP Routing Policies
This chapter examines the tools available to deﬁne BGP routing policies. A BGP routing policy 
deﬁnes the rules used by one or more routers to impact two main goals: ﬁltering routes, and 
inﬂuencing which routes are considered the best routes by BGP. 
BGP ﬁltering tools are mostly straightforward, with the exception of AS_PATH ﬁltering. 
AS_PATH ﬁlters use regular expressions to match the AS_PATH path attribute (PA), making 
the conﬁguration challenging. Beyond that, most of the BGP ﬁltering concepts are directly 
comparable to IGP ﬁltering concepts, covered in earlier chapters.
The other topics in this chapter explain routing policies that focus on impacting the BGP decision 
process. The decision process itself is ﬁrst outlined, followed by explanations of how each step 
in the process can be used to impact which routes are considered best by BGP. 
“Do I Know This Already?” Quiz
Table 13-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
Table 13-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This 
Section
Score
Route Filtering and Route Summarization
1–4
BGP Path Attributes and the BGP Decision Process
5–7
Conﬁguring BGP Policies
8–12
BGP Communities
13–14
Total Score

418     Chapter 13: BGP Routing Policies
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can ﬁnd 
the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
A BGP policy needs to be conﬁgured to ﬁlter all the /20 preﬁxes whose ﬁrst two octets are 
20.128. Which of the following answers would provide the correct matching logic for the 
ﬁltering process, matching only the described subnets, and no others? 
a. access-list 1 deny 20.128.0.0 0.0.255.255
b. access-list 101 deny ip 20.128.0.0 0.0.255.255 host 255.255.240.0
c. ip preﬁx-list 1 deny 20.128.0.0/16 eq 20
d. ip preﬁx-list 2 deny 20.128.0.0/16 ge 20 le 20
2.
Router R1 has a working BGP implementation, advertising subnets of 1.0.0.0/8 to neighbor 
2.2.2.2 (R2). A route map named fred has been conﬁgured on R1 to ﬁlter all routes in network 
1.0.0.0. R1 has just added the router bgp subcommand neighbor 2.2.2.2 route-map fred 
out. No other commands have been used afterward. Which of the following answers, taken as 
the next step, would allow proper veriﬁcation of whether the ﬁlter indeed ﬁltered the routes? 
a. The show ip bgp neighbor 2.2.2.2 advertised-routes command on R1 will no longer 
list the ﬁltered routes.
b. The show ip bgp neighbor 2.2.2.2 advertised-routes command on R1 will reﬂect the 
ﬁltered routes by listing them with a code of r, meaning “RIB failure.”
c. The ﬁltering will not occur, and cannot be veriﬁed, until R1 issues a clear ip bgp 2.2.2.2 
command. 
d. None of the show ip bgp command options on R1 will conﬁrm whether the ﬁltering has 
occurred.
3.
A router needs to match routes with AS_PATHs that include 333, as long as it is not the ﬁrst 
ASN in the AS_PATH, while not matching AS_PATHs that include 33333. Which of the 
following syntactically correct commands could be a part of the complete conﬁguration to 
match the correct AS_PATHs? 
a. ip ﬁlter-list 1 permit ^.*_333_
b. ip ﬁlter-list 2 permit .*333_
c. ip ﬁlter-list 3 permit .*_333.*$
d. ip ﬁlter-list 4 permit _333_$
e. ip ﬁlter-list 5 permit ^.*_333_.*$

“Do I Know This Already?” Quiz     419
4.
R1 and R2 are working BGP peers. The following output of the show ip bgp command shows 
the entries learned by R1 from R2. It also shows some conﬁguration that was added later on 
R1. After the appropriate clear command is used to make the new conﬁguration take effect, 
which of the following entries should R1 have in its BGP table? 
Network       
Next Hop 
Metric         LocPrf Weight Path
*>i11.10.0.0/16
2.2.2.2     4294967294        100      0 4 1 33333 10  200 44 i
*>i11.11.0.0/16
2.2.2.2     4294967294 
   100      0 4 1 33333 10  200 44 i
*>i11.12.0.0/16
2.2.2.2     4294967294 
   100      0 4 1 404   303 202    i
! New config shown next
rrrroooouuuutttteeeerrrr    bbbbggggpppp    1111
nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    1111    iiiinnnn
aaaacccccccceeeessssssss----lllliiiisssstttt    1111    ppppeeeerrrrmmmmiiiitttt    11111111....8888....0000....0000    0000....3333....222255555555....222255555555
a. 11.10.0.0/16
b. 11.11.0.0/16
c. 11.12.0.0/16
d. 11.8.0.0/14
e. None of the listed preﬁxes
5.
Which of the following is true regarding BGP path attribute types? 
a. The BGP features using well-known attributes must be included in every BGP Update.
b. Optional attributes do not have to be implemented by the programmers that are creating 
a particular BGP implementation.
c. Nontransitive attributes cannot be advertised into another AS.
d. Discretionary attributes contain sensitive information; Updates should be encoded with 
MD5 for privacy.
6.
Which of the following items in the BGP decision tree occur after the check of the AS_PATH 
length? 
a. Best ORIGIN code
b. LOCAL_PREF
c. MED
d. Whether the next hop is reachable 

420     Chapter 13: BGP Routing Policies
7.
Which of the following steps in the BGP decision process consider a larger value to be the 
better value? 
a. ORIGIN
b. LOCAL_PREF
c. WEIGHT
d. MED
e. IGP metric to reach the next hop
8.
Which of the following is not advertised to BGP neighbors at all? 
a. WEIGHT
b. MED
c. LOCAL_PREF
d. ORIGIN
9.
The following shows the output of the show ip bgp command on R1. Which BGP decision 
tree step determined which route was best? (Assume that the next hop IP address is 
reachable.) 
Network 
Next Hop  Metric      LocPrf Weight Path
*> 11.10.0.0/16  10.1.2.3  4294967294     100      0 4 1  33333 10 200 44 i
* i              2.2.2.2   4294967294     100      0 4 1 33333 10 200 44 i
* i              2.2.2.2   4294967294     100      0 4 1 404 505 303 202 i
a. Largest Weight
b. Best ORIGIN code
c. Lowest MED
d. Largest LOCAL_PREF
e. Better neighbor type
f. None of the answers is correct.

“Do I Know This Already?” Quiz     421
10.
The following shows the output of the show ip bgp command on R1. Which BGP decision 
tree step determined which route was best? (Assume that the NEXT_HOP IP address is 
reachable.) 
Network     
 Next Hop   Metric  LocPrf  Weight  Path
*  11.10.0.0/16  10.1.2.3        3     120      10  4 1  33333 10 200 44 ?
*>i
 
2.2.2.2        1     130      30  4 33333 10 200 44 i
* i
 
2.2.2.2        2     110      20  4 1  404 505 303 202 ?
a. Largest Weight.
b. Best ORIGIN code.
c. Lowest MED.
d. Largest LOCAL_PREF.
e. Better Neighbor Type.
f. None of the answers is correct.
11.
The following exhibit lists commands that were typed using a text editor and later pasted into 
conﬁg mode on router R1. At the time, R1 had a working eBGP connection to several peers, 
including 3.3.3.3. R1 had learned of several subnets of networks 11.0.0.0/8 and 12.0.0.0/8 via 
neighbors besides 3.3.3.3. Once pasted, a clear command was issued to pick up the changes. 
Which of the following statements is true regarding the AS_PATH of the routes advertised by 
R1 to 3.3.3.3? 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    1111
    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrroooouuuutttteeee----mmmmaaaapppp    zzzzzzzzzzzz    oooouuuutttt
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    mmmmaaaattttcccchhhh11111111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000////8888    lllleeee    33332222
rrrroooouuuutttteeee----mmmmaaaapppp    zzzzzzzzzzzz    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    mmmmaaaattttcccchhhh11111111
    sssseeeetttt    aaaassss----ppppaaaatttthhhh    pppprrrreeeeppppeeeennnndddd    1111    1111    1111
a. No changes would occur, because the conﬁguration would be rejected due to syntax 
errors.
b. Routes to subnets inside network 11.0.0.0/8 would contain three consecutive 1s, but no 
more, in the AS_PATH. 
c. Routes to subnets inside 11.0.0.0/8 would contain at least four consecutive 1s in the 
AS_PATH. 
d. Routes to subnets inside 12.0.0.0/8 would have no 1s in the AS_PATH. 
e. Routes to subnets inside 12.0.0.0/8 would have one additional 1 in the AS_PATH. 

422     Chapter 13: BGP Routing Policies
12.
Which of the following must occur or be conﬁgured in order for BGP to mark multiple iBGP 
routes in the BGP table—entries for the exact same destination preﬁx/length—as the best 
routes? 
a. Inclusion of the maximum-paths number command under router BGP, with a setting 
larger than 1.
b. Inclusion of the maximum-paths ibgp number command under router BGP, with a 
setting larger than 1.
c. Multiple routes that tie for all BGP decision process comparisons up through checking a 
route’s ORIGIN code.
d. BGP cannot consider multiple routes in the BGP table for the exact same preﬁx as best 
routes.
13.
Which of the following special BGP COMMUNITY values, when set, imply that a route 
should not be forwarded outside a confederation AS? 
a. LOCAL_AS
b. NO_ADVERT
c. NO_EXPORT
d. NO_EXPORT_SUBCONFED
14.
When BGP peers have set and sent COMMUNITY values in BGP Updates, which of the 
following is true? 
a. The BGP decision process adds a check for the COMMUNITY just before the check for 
the shortest AS_PATH length.
b. The lowest COMMUNITY value is considered best by the BGP decision process, 
unless the COMMUNITY is set to one of the special reserved values.
c. The COMMUNITY does not impact the BGP decision process directly.
d. None of the other answers is correct.

Route Filtering and Route Summarization     423
Foundation Topics
Route Filtering and Route Summarization
This section focuses on four popular tools used to ﬁlter BGP routes: 
■
Distribution lists
■
Preﬁx lists
■
AS_PATH ﬁlter lists
■
Route maps
Additionally, the aggregate-address command can be used to ﬁlter component subnets of a 
summary route. This section covers these ﬁve options. (Filtering using special BGP 
COMMUNITY values will be covered at the end of the chapter in the section titled “BGP 
Communities.”)
The four main tools have the following features in common:
■
All can ﬁlter incoming and outgoing Updates, per neighbor or per peer group.
■
Peer group conﬁgurations require Cisco IOS Software to process the routing policy against 
the Update only once, rather than once per neighbor.
■
The ﬁlters cannot be applied to a single neighbor that is conﬁgured as part of a peer group; 
the ﬁlter must be applied to the entire peer group, or the neighbor must be reconﬁgured to be 
outside the peer group.
■
Each tool’s matching logic examines the contents of the BGP Update message, which 
includes the BGP PAs and network layer reachability information (NLRI).
■
If a ﬁlter’s conﬁguration is changed, a clear command is required for the changed ﬁlter to take 
effect.
■
The clear command can use the soft reconﬁguration option to implement changes without 
requiring BGP peers to be brought down and back up.
KEY 
POINT

424     Chapter 13: BGP Routing Policies
The tools differ in what they can match in the BGP Update message. Table 13-2 outlines the 
commands for each tool and the differences in how they can match NLRI entries in an Update.
This section begins by covering ﬁltering through the use of matching NLRI, distribute lists, preﬁx 
lists, and route maps. From there, it moves on to describe how to use BGP ﬁlter lists to match 
AS_PATH information to ﬁlter NLRI entries from routing updates.
Filtering BGP Updates Based on NLRI
Most of the logic behind BGP distribution lists, preﬁx lists, and route maps has already been 
covered in previous chapters. For example, Chapter 11 explains the logic behind the ip preﬁx-list 
command, and Chapters 8 through 10 cover ﬁltering in IGP routing protocols using the distribute-
list command. This section shows some brief examples to cover the syntax when these methods 
are used with BGP, plus a few quirks unique to BGP.
One difference between BGP distribute lists and IGP distribute lists is that a BGP distribute list 
can use an extended ACL to match against both the preﬁx and the preﬁx length. When used with 
IGP ﬁltering tools, ACLs called from distribute lists cannot match against the preﬁx length. 
Example 13-1 shows how an extended ACL matches the preﬁx with the source address portion of 
the ACL commands, and matches the preﬁx length (mask) using the destination address portion 
of the ACL commands.
NOTE
Throughout the book, the wildcard mask used in ACLs is abbreviated WC mask.
Table 13-2
NLRI Filtering Tools
KEY 
POINT
BGP Subcommand
Commands 
Referenced by 
neighbor 
Command
What Can Be Matched
neighbor distribute-
list (standard ACL) 
access-list, ip 
access-list
Preﬁx, with WC mask
neighbor distribute-
list (extended ACL)
access-list, ip 
access-list
Preﬁx and preﬁx length, with WC mask for each
neighbor preﬁx-list
ip preﬁx-list
Exact or “ﬁrst N” bits of preﬁx, plus range of preﬁx 
lengths
neighbor ﬁlter-list
ip as-path 
access-list
AS_PATH contents; all NLRI whose AS_PATHs are 
matched considered to be a match
neighbor route-map
route-map
Preﬁx, preﬁx length, AS_PATH, and/or any other PA 
matchable within a BGP route map

Route Filtering and Route Summarization     425
The matching logic used by preﬁx-list and route-map commands works just the same for BGP 
as it does for IGPs. For example, both commands have an implied deny action at the end of the 
list, which can be overridden by matching all routes with the ﬁnal entry in the preﬁx-list or route-
map command. 
Figure 13-1 shows the important portions of the network used for Example 13-1. The example 
shows a preﬁx list, distribute list, and a route map performing the same logic to ﬁlter based on 
NLRI. In this case, the four routers in AS 123 form a full mesh. R3 will learn a set of preﬁxes from 
AS 45, and then ﬁlter the same two preﬁxes (22.2.2.0/24 and 23.3.16.0/20) from being sent in 
Updates to each of R3’s three neighbors—in each case using a different tool. 
Figure 13-1
iBGP Full Mesh in AS 123 with Routes Learned from AS 45
Example 13-1
Route Filtering on R3 with Route Maps, Distribution Lists, and Preﬁx Lists 
! R3 Configuration. Only the commands related to filtering are shown. Note that
! BGP Updates to R1 and R2 are filtered at this point; filtering to R9 will be
! added later in the example.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    rrrroooouuuutttteeee----mmmmaaaapppp    rrrrmmmmaaaapppp----lllloooosssseeee----2222    oooouuuutttt
    nnnneeeeiiiigggghhhhbbbboooorrrr    2222....2222....2222....2222    ddddiiiissssttttrrrriiiibbbbuuuutttteeee----lllliiiisssstttt    lllloooosssseeee----2222    oooouuuutttt
! This ACL matches exactly for a prefix of 23.3.16.0 and 22.2.2.0, as well as
! exactly matching masks 255.255.240.0 and 255.255.255.0, respectively.
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    eeeexxxxtttteeeennnnddddeeeedddd    lllloooosssseeee----2222
    ddddeeeennnnyyyy            iiiipppp    hhhhoooosssstttt    22223333....3333....11116666....0000    hhhhoooosssstttt    222255555555....222255555555....222244440000....0000
    ddddeeeennnnyyyy            iiiipppp    hhhhoooosssstttt    22222222....2222....2222....0000    hhhhoooosssstttt    222255555555....222255555555....222255555555....0000
    ppppeeeerrrrmmmmiiiitttt    iiiipppp    aaaannnnyyyy    aaaannnnyyyy
! The pppprrrreeeeffffiiiixxxx    lllliiiisssstttt matches the exact prefixes and prefix lengths; the omission of
! any ggggeeee or lllleeee parameter means each line matches only that exact prefix. Also, the 
! third line matches all prefixes, changing the default action to ppppeeeerrrrmmmmiiiitttt.
continues
R2
R3
ASN 123
ASN 45
R4
R9
R1
EBGP
Multiple Routes
from Networks
21, 22, and 23

426     Chapter 13: BGP Routing Policies
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----lllloooosssseeee----2222    sssseeeeqqqq    5555    ddddeeeennnnyyyy    22222222....2222....2222....0000////22224444
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----lllloooosssseeee----2222    sssseeeeqqqq    11110000    ddddeeeennnnyyyy    22223333....3333....11116666....0000////22220000
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----lllloooosssseeee----2222    sssseeeeqqqq    11115555    ppppeeeerrrrmmmmiiiitttt    0000....0000....0000....0000////0000    lllleeee    33332222
! The route map refers to ACL lose-2, passing routes that are permitted
! by the ACL, and filtering all others. The two filtered routes are actually
! filtered by the implied ddddeeeennnnyyyy clause at the end of the route map: Because the ACL
! matches those two prefixes with a ddddeeeennnnyyyy action, they do not match clause 10 of the 
! route map, and are then matched by the implied ddddeeeennnnyyyy clause. 
rrrroooouuuutttteeee----mmmmaaaapppp    rrrrmmmmaaaapppp----lllloooosssseeee----2222    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    lllloooosssseeee----2222
! Next, R3 has seven prefixes, with the two slated for filtering highlighted.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         4.4.4.4                                0 45 i
*> 22.2.2.0/24      4.4.4.4                                0 45 i
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.16.0/20     4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
Total number of prefixes 7 
! The next command shows what entries R3 will advertise to R1. Note that the 
! correct two prefixes have been removed, with only five prefixes listed. The same
! results could be seen for the Update sent to R2, but it is not shown here.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    1111....1111....1111....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         4.4.4.4                                0 45 i
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
Total number of prefixes 5 
! Next, R3 adds an outbound prefix list for neighbor R9 (9.9.9.9). However,
! afterwards, R3 still believes it should send all seven prefixes to R9.
R3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
R3(config-router)# nnnneeeeiiiigggghhhh    9999....9999....9999....9999    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    pppprrrreeeeffffiiiixxxx----lllloooosssseeee----2222    oooouuuutttt    
R3(config-router)# ^^^^ZZZZ
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    9999....9999....9999....9999    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         4.4.4.4                                0 45 i
*> 22.2.2.0/24      4.4.4.4                                0 45 i
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.16.0/20     4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
*> 23.3.64.0/18     4.4.4.4                                0 45 i
Example 13-1
Route Filtering on R3 with Route Maps, Distribution Lists, and Preﬁx Lists (Continued)

Route Filtering and Route Summarization     427
Route Map Rules for NLRI Filtering
The overall logic used by route maps to ﬁlter NLRIs is relatively straightforward—the Update is 
compared to the route map and the route is ﬁltered (or not) based on the ﬁrst-matching clause. 
However, route maps can cause a bit of confusion on a couple of points; the next page or so points 
out some of the potential confusing points with regard to route maps when they are used to ﬁlter 
BGP routes.
Both the route map and any referenced ACL or preﬁx list have deny and permit actions conﬁgured, 
so it is easy to confuse the context in which they are used. The route-map command’s action—
either deny or permit—deﬁnes whether an NLRI is ﬁltered (deny) or allowed to pass (permit). 
The permit or deny action in an ACL or preﬁx list implies whether an NLRI matches the route 
map clause (permit by the ACL/preﬁx list) or does not match (deny in the ACL/preﬁx list). 
For example, route-map rmap-lose-2 permit 10 from Example 13-1 matched all NLRIs except 
the two preﬁxes that needed to be ﬁltered based on named ACL lose-2. The matched routes—
all the routes that do not need to be ﬁltered in this case—were then advertised, because clause 10 
had a permit action conﬁgured. The route map then ﬁltered the other two routes by virtue of the 
implied deny all logic at the end of the route map. 
Alternately, the route map could have just as easily used a beginning clause of route-map 
rmap-lose-2 deny 10, with the matching logic only matching the two preﬁxes that needed to 
be ﬁltered—in that case, the ﬁrst clause would have ﬁltered the two routes because of the deny 
keyword in the route-map command. Such a route map would then require a second clause that 
matched all routes, with a permit action conﬁgured. (To match all NLRI in a route map, simply 
omit the match command from that route map clause. In this case, adding just the command 
route-map rmap-lose-2 20, with no subcommands, would match all remaining routes and allow 
them to be advertised.)
*> 23.3.128.0/17    4.4.4.4                                0 45 i
Total number of prefixes 7 
! Instead of the cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    9999....9999....9999....9999 command, which would close the BGP neighbor
! and TCP connection to R9, R3 uses the cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    9999....9999....9999....9999    oooouuuutttt or cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****    ssssoooofffftttt
! command to perform a soft reconfiguration. Now R3 filters the correct two prefixes.
R3# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    9999....9999....9999....9999    oooouuuutttt
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    9999....9999....9999....9999    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         4.4.4.4                                0 45 i
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
Total number of prefixes 5 
Example 13-1
Route Filtering on R3 with Route Maps, Distribution Lists, and Preﬁx Lists (Continued)

428     Chapter 13: BGP Routing Policies
Soft Reconﬁguration
The end of Example 13-1 shows a BGP feature called soft reconﬁguration. Soft reconﬁguration 
allows a BGP peer to reapply its routing policies without closing a neighbor connection. To 
reapply the policies, Cisco IOS uses the clear command with either the soft, in, or out options, 
as shown in the following generic clear command syntax:
cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    {**** | neighbor-address | peer-group-name} [ssssoooofffftttt    [iiiinnnn    | oooouuuutttt]]
The soft option alone reapplies the policy conﬁguration for both inbound and outbound policies, 
whereas the inclusion of the in or out keyword limits the reconﬁguration to the stated direction.
Cisco IOS supports soft reconﬁguration for sent Updates automatically, but BGP must be 
conﬁgured to support soft reconﬁguration for inbound Updates. To support soft reconﬁguration, 
BGP must remember the actual sent and received BGP Update information for each neighbor. The 
neighbor neighbor-id soft-reconﬁguration inbound command causes the router to keep a copy 
of the received Updates from the speciﬁed neighbor. (IOS keeps a copy of sent Updates 
automatically.) With these Updates available, BGP can simply reapply the changed ﬁltering policy 
to the Update without closing the neighbor connection.
Clearing the neighbor is required to pick up the changes to routing policies that impact Updates 
sent and received from neighbors. All such changes can be implemented using soft 
reconﬁguration. However, for conﬁguration changes that impact the local injection of routes into 
the BGP table, soft reconﬁguration does not help. The reason is that soft reconﬁguration simply 
reprocesses Updates, and features that inject routes into BGP via the redistribute or network 
commands are not injected based on Update messages.
Comparing BGP Preﬁx Lists, Distribute Lists, and Route Maps
Preﬁx lists and distribute lists both use their matching logic on the BGP Update’s NLRI. However, 
a preﬁx list allows more ﬂexible matching of the preﬁx length because it can match a range of 
preﬁxes that extends to a maximum length of less than 32. For example, the command ip preﬁx-
list test1 permit 10.0.0.0/8 ge 16 le 23 matches a range of preﬁx lengths, but the same logic using 
an ACL as a distribute list takes several more lines, or a tricky wildcard mask.
For many BGP ﬁltering tasks, route maps do not provide any beneﬁt over preﬁx lists, ACLs, and 
AS_PATH ﬁlter lists. If the desired policy is only to ﬁlter routes based on matching preﬁxes/
lengths, a route map does not provide any additional function over using a distribute list or preﬁx 
list directly. Similarly, if the goal of the policy is to ﬁlter routes just based on matching with an 
AS_PATH ﬁlter, the route map does not provide any additional function as compared to calling an 
AS_PATH ﬁlter directly using the neighbor ﬁlter-list command. 
KEY 
POINT

Route Filtering and Route Summarization     429
However, only route maps can provide the following two functions for BGP routing policy 
conﬁgurations:
■
Matching logic that combines multiple of the following: preﬁx/length, AS_PATH, or other 
BGP PAs
■
The setting of BGP PA’s for the purpose of manipulating BGP’s choice of which route to use
Many of the features for manipulating the choice of best routes by BGP, as covered later in this 
chapter, use route maps for that purpose.
Filtering Subnets of a Summary Using the aggregate-address Command
Manual BGP route summarization, using the aggregate-address BGP router subcommand, 
provides the ﬂexibility to allow none, all, or a subset of the summary’s component subnets to be 
advertised out of the BGP table. By allowing some and not others, the aggregate-address 
command can in effect ﬁlter some routes. The ﬁltering options on the aggregate-address 
command are as follows:
■
Filtering all component subnets of the summary from being advertised, by using the 
summary-only keyword
■
Advertising all the component subnets of the summary, by omitting the summary-only 
keyword
■
Advertising some and ﬁltering other component subnets of the summary, by omitting the 
summary-only keyword and referring to a route-map using the suppress-map keyword
The logic behind the suppress-map option can be a little tricky. This option requires reference to 
a route map, with any component subnets matching a route map permit clause being suppressed—
in other words, routes permitted by the route map are ﬁltered and not advertised. The router does 
not actually remove the suppressed route from its local BGP table; however, it does suppress the 
advertisement of those routes. 
Example 13-2 shows how the suppress-map option works, with a summary of 23.0.0.0/8, and a 
goal of allowing all component subnets to be advertised except 23.3.16.0/20.
Example 13-2
Filtering Routes Using the aggregate-address suppress-map Command 
! The first command below lists all BGP routes in network 23.
R3# sssshhhh iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhh    1111....1111....1111....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    iiiinnnncccclllluuuuddddeeee    22223333
*> 23.3.0.0/20      4.4.4.4                                0 45 i
*> 23.3.16.0/20     4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
continues
KEY 
POINT

430     Chapter 13: BGP Routing Policies
Filtering BGP Updates by Matching the AS_PATH PA
To ﬁlter routes by matching the AS_PATH PA, Cisco IOS uses AS_PATH ﬁlters. The overall 
conﬁguration structure is very similar to BGP distribute lists and preﬁx lists, with the matching 
logic speciﬁed in a list, and the logic being applied with a neighbor command. The main two steps 
are as follows:
1.
Conﬁgure the AS_PATH ﬁlter using the ip as-path access-list number {permit | deny} regex 
command.
2.
Enable the AS_PATH ﬁlter using the neighbor neighbor-id ﬁlter-list as-path-ﬁlter-number 
{in | out} command.
Based on these commands, Cisco IOS examines the AS_PATH PA in the sent or received Updates 
for the stated neighbor. NLRI whose AS_PATHs match with a deny action are ﬁltered.
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
*> 23.4.0.0/16      4.4.4.4                                0 45 678 i
! The ACL below matches 23.3.16.0/20 with a ppppeeeerrrrmmmmiiiitttt clause, and denies all other
! routes (default). The rrrroooouuuutttteeee----mmmmaaaapppp uses a ppppeeeerrrrmmmmiiiitttt clause and references
! aaaacccccccceeeessssssss----lllliiiisssstttt    ppppeeeerrrrmmmmiiiitttt----1111. The logic means that the one route permitted by the ACL
! will be suppressed. Note also that the ssssuuuummmmmmmmaaaarrrryyyy----oooonnnnllllyyyy keyword was not used
! on the aaaaggggggggrrrreeeeggggaaaatttteeee----aaaaddddddddrrrreeeessssssss command, allowing the subnets to also be advertised.
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    eeeexxxxtttteeeennnnddddeeeedddd    ppppeeeerrrrmmmmiiiitttt----1111
    ppppeeeerrrrmmmmiiiitttt    iiiipppp    hhhhoooosssstttt    22223333....3333....11116666....0000    hhhhoooosssstttt    222255555555....222255555555....222244440000....0000
!
rrrroooouuuutttteeee----mmmmaaaapppp    ssssuuuupppppppprrrreeeessssssss----1111    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    ppppeeeerrrrmmmmiiiitttt----1111
!
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    aaaaggggggggrrrreeeeggggaaaatttteeee----aaaaddddddddrrrreeeessssssss    22223333....0000....0000....0000    222255555555....0000....0000....0000    aaaassss----sssseeeetttt    ssssuuuupppppppprrrreeeessssssss----mmmmaaaapppp    ssssuuuupppppppprrrreeeessssssss----1111
! Below, R3 (after a cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****    ssssoooofffftttt command) no longer advertises the route.
R3# sssshhhh    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhh    1111....1111....1111....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    ||||    iiiinnnncccclllluuuuddddeeee    22223333....3333....11116666....0000
R3#
! Note the “s” on the left side of the sssshhhhoooowwww    iiiipppp    bbbbggggpppp command output for the 
! suppressed route. The route remains in the table; it is simply no longer
! advertised outside the router.
R3# sssshhhh    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhh    1111....1111....1111....1111    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    ||||    iiiinnnncccclllluuuuddddeeee    22223333
*> 23.3.0.0/20      4.4.4.4                                0 45 i
s> 23.3.16.0/20     4.4.4.4                                0 45 i
*> 23.3.32.0/19     4.4.4.4                                0 45 i
*> 23.3.64.0/18     4.4.4.4                                0 45 i
*> 23.3.128.0/17    4.4.4.4                                0 45 i
*> 23.4.0.0/16      4.4.4.4                                0 45 678 i
Example 13-2
Filtering Routes Using the aggregate-address suppress-map Command (Continued)

Route Filtering and Route Summarization     431
AS_PATH ﬁlters use regular expressions (abbreviated regex) to apply powerful matching logic 
to the AS_PATH. To match the AS_PATH contents, the regex need to match values, delimiters, 
and other special characters. For instance, the AS_PATH itself has several components, called 
segments, which, when present, require slightly different matching logic within a regex. The next 
few sections take a closer look at both regex and AS_PATHs, followed by some examples of using 
AS_PATH ﬁlters.
The BGP AS_PATH and AS_PATH Segment Types
RFC 1771 describes four types of AS_PATH segments held inside the AS_PATH PA (see
Table 13-3). The most common segment is called AS_SEQUENCE, which is an ordered list 
of all the autonomous systems through which the route has passed. The AS_SEQUENCE 
segment lists the most recently added ASN as the ﬁrst ASN; this value is also the leftmost entry 
when looking at show commands, and is considered to be the ﬁrst ASN for the regex matching 
logic. 
Because the most recently added ASN is the ﬁrst ASN in the AS_SEQUENCE segment, the 
process of adding the ASN before advertising routes to eBGP peers is called AS_PATH 
prepending. For example, Figure 13-2 shows a sample network in which a route is injected inside 
AS 1, advertised to AS 4, and then advertised to AS 123.
Figure 13-2
AS_PATH (AS_SEQUENCE) Prepending 
The other three AS_PATH segment types come into play when using confederations and
route summarization, as described in Chapter 12. Table 13-3 lists and brieﬂy describes all 
four types.
Table 13-3
AS_PATH Segment Types 
KEY 
POINT
Component
Description
Delimiters 
Between 
ASNs
Character 
Enclosing the 
Segment
AS_SEQUENCE
An ordered list of ASNs through 
which the route has been advertised
Space
None
AS_SET
An unordered list of ASNs through 
which the route has been advertised
Comma
{}
continues
ASN 1
R9
ASN 4
ASN 123
R4
R1
R2
11.0.0.0/8
AS_SEQ 1
11.0.0.0/8
AS_SEQ 4 1
11.0.0.0/8
AS_SEQ 4 1
3
2
1

432     Chapter 13: BGP Routing Policies
Figure 13-3 shows an example of AS_SET in which R4 summarizes some routes using the 
aggregate-address… as-set command. As a result of including the as-set keyword, R4 creates an 
AS_SET segment in the AS_PATH of the aggregate route. Note that the AS_SET segment is 
shown in brackets, and it is listed in no particular order. These facts are all important to the process 
of AS_PATH ﬁltering.
Figure 13-3
AS_SET and AS_CONFED_SEQ Example 
Also note the addition of the AS_CONFED_SEQ segment by R1 in Figure 13-3. Confederation 
ASNs are used to prevent loops inside the confederation; because these ASNs will be removed 
before advertising the route outside the full AS, the confederation ASNs are kept inside a different 
segment—the AS_CONFED_SEQ segment. Finally, if a route is aggregated inside a confederation, 
the AS_CONFED_SET segment holds the confederation ASNs with the same logic as used by the 
AS_SET segment type, but keeps them separate for easy removal before advertising the routes 
outside the confederation. Example 13-3 provides sample show ip bgp command output showing 
an AS_SET and AS_CONFED_SEQ. The output shows R2’s AS_PATH for the route shown in 
Figure 13-3.
Component
Description
Delimiters 
Between 
ASNs
Character 
Enclosing the 
Segment
AS_CONFED_SEQ1
Like AS_SEQ, but holds only 
confederation ASNs
Space
()
AS_CONFED_SET1
Like AS_SET, but holds only 
confederation ASNs
Comma
{}
1 Not advertised outside the confederation.
Table 13-3
AS_PATH Segment Types (Continued)
ASN 1
R9
ASN 4
ASN 123
R4
R1
R2
21.0.0.0/8 AS_SEQ 1 404 303 202
31.0.0.0/8 AS_SEQ 1 303 303 303
Confed
AS 333
Confed
AS 111
16.0.0.0/4
AS_SEQ 4
AS_CONFED_SEQ (111)
AS_SET {1, 404, 303, 202}
16.0.0.0/4
AS_SEQ 4
AS_SET {1, 404, 303, 202}
3
2
1

Route Filtering and Route Summarization     433
Using Regular Expressions to Match AS_PATH
A Cisco IOS AS_PATH ﬁlter has one or more conﬁgured lines, with each line requiring a regex. 
The logic is then applied as follows:
1.
The regex of the ﬁrst line in the list is applied to the AS_PATH of each route.
2.
For matched NLRI, the NLRI is passed or ﬁltered based on that AS_PATH ﬁlter’s conﬁgured 
permit or deny action.
3.
For unmatched NLRI, Steps 1 and 2 are repeated, using the next line in the AS_PATH ﬁlter, 
analyzing all NLRI yet to be matched by this list.
4.
Any NLRI not matched explicitly is ﬁltered.
Regex contain literal strings as well as metacharacters. The metacharacters allow matching using 
wildcards, matches for different delimiters, and other special operations. Table 13-4 lists the regex 
metacharacters that are useful for IOS AS_PATH ﬁlters.
Example 13-3
AS_PATH on R2: AS_CONFED_SEQ, AS_SEQUENCE, and AS_SET
! The AS_CONFED_SEQ is (111), enclosed in parentheses. The AS_SEQUENCE only
! contains 4, with no enclosing characters. The AS_SET created by R4 when
! summarizing 16.0.0.0/4 is {1,404,303,202}, enclosed in brackets.
R2# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    iiiinnnncccclllluuuuddddeeee    11116666....0000....0000....0000
*> 16.0.0.0/4       10.1.14.4                0    100      0 (111) 4 {1,404,303,202} i
Table 13-4
Regex Metacharacters Useful for AS_PATH Matching 
KEY 
POINT
Metacharacter
Meaning
^
Start of line
$
End of line
|
Logical OR applied between the preceding and succeeding characters1
_
Any delimiter: blank, comma, start of line, or end of line2
.
Any single character
?
Zero or one instances of the preceding character
*
Zero or more instances of the preceding character
+
One or more instances of the preceding character
continues
KEY 
POINT

434     Chapter 13: BGP Routing Policies
When the regular expression is applied to a BGP route, Cisco IOS searches the AS_PATH for the ﬁrst 
instance of the ﬁrst item in the regex; from that point forward, it processes the rest of the AS_PATH 
sequentially. For example, consider two routes, one with an AS_PATH with only an AS_SEQ, set to 
12 34 56, and another route with an AS_SEQ of 78 12 34 56. A regular expression of 12_34_56 
matches both routes, because IOS looks for the ﬁrst occurrence of AS 12, and then searches 
sequentially. However, a regular expression of ^12_34_56 would match only the ﬁrst route. The 
second AS_PATH (78 12 34 56) would not match because the regex would immediately match on 
the ^ (start of line), then search sequentially—ﬁnding AS 78 next, which does not match the regex.
Although Table 13-4 provides a useful reference, Table 13-5 provides a number of examples of 
using these metacharacters, with explanations of what they match. Take special note of the 
wording in the explanations. Phrases like “ASN 303” and “ASN beginning with 303” differ in that 
the ﬁrst phrase means exactly 303, and not 3031, 30342, and so on, whereas the second phrase 
would match any of these values. 
Metacharacter
Meaning
(string)
Parentheses combine enclosed string characters as a single entity when used with 
?, *, or +
[string]
Creates a wildcard for which any of the single characters in the string can be used 
to match that position in the AS_PATH
1 If preceded by a value in parentheses, the logic applies to the preceding string listed inside the parentheses, and not 
just to the preceding character.
2 This character is an underscore.
Table 13-5
Example AS_PATH Regex and Their Meanings 
KEY 
POINT
Example Regex
What Type of AS_PATH It Would Match
.*
All AS_PATHs (useful as a ﬁnal match to change the default from deny to 
permit).
^$
Null (empty)—used for NLRIs originated in the same AS.
^123$
An AS_PATH with only one AS, ASN 123.
^123
An AS_PATH whose ﬁrst ASN begins with or is 123; includes 123, 1232, 
12354, and so on.
^123.
An AS_PATH whose ﬁrst ASN is one of two things: a four-digit number that 
begins with 123, or a number that begins with ASN 123 and is followed by a 
delimiter before the next ASN. (It does not match an AS_PATH of only ASN 
123, because the period does not match the end-of-line.)
Table 13-4
Regex Metacharacters Useful for AS_PATH Matching (Continued)

Route Filtering and Route Summarization     435
Example Regex
What Type of AS_PATH It Would Match
^123+
An AS_PATH whose ﬁrst ASN begins with 123, with 1233, or is 12333. For 
example, it includes ASNs 1231 and 12331 because it does not specify what 
happens after the +.
^123+_
An AS_PATH whose ﬁrst ASN is one of three numbers: 123, 1233, or 12333. It 
does not match 1231 and 12331, for example, because it requires a delimiter 
after the last 3. 
^123*
An AS_PATH whose ﬁrst ASN begins with 12, 123, or 1233, or is 12333. Any 
character can follow these values, because the regex does not specify anything 
about the next character. For example, 121 would match because the * can 
represent 0 occurrences of “3”. 1231 would match with * representing 1 
occurrence of 3. 
^123*_
An AS_PATH whose ﬁrst ASN begins with 12, 123, or 1233, or is 12333. It 
does not include matches for 121, 1231, and 12331, because the next character 
must be a delimiter.
^123?
An AS_PATH whose ﬁrst ASN begins with either 12 or 123.
^123_45$
An AS_PATH with two autonomous systems, beginning with 123 and ending 
with 45. 
^123_.*_45$
An AS_PATH beginning with AS 123 and ending in AS 45, with at least one 
other AS in between.
^123_.*45
An AS_PATH beginning with AS 123, with zero or more intermediate ASNs 
and delimiters, and ending with any AS whose last two digits are 45 (including 
simply AS 45).
(^123_45$)|(^123_.
*_45$)
An AS_PATH beginning with 123 and ending with AS 45, with zero or more 
other ASNs between the two. 
^123_45$|^123_.*_
45$
(Note: this is the same as the previous example, but without the parentheses.) 
Represents a common error in attempting to match AS_PATHs that begin with 
ASN 123 and end with ASN 45. The problem is that the | is applied to the 
previous character ($) and next character (^), as opposed to everything before 
and after the |. 
^123(_[0..9]+)*_45
Another way to match an AS_PATH beginning with 123 and ending with
AS 45. 
^{123
The AS_PATH begins with an AS_SET or AS_CONFED_SET, with the ﬁrst 
three numerals of the ﬁrst ASN being 123. 
[(]303.*[)]
Find the AS_CONFED_SEQ, and match if the ﬁrst ASN begins with 303.
Table 13-5
Example AS_PATH Regex and Their Meanings (Continued)

436     Chapter 13: BGP Routing Policies
Example: Matching AS_PATHs Using AS_PATH Filters
NLRI ﬁltering with AS_PATH ﬁlters uses two commands:
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt access-list-number {ppppeeeerrrrmmmmiiiitttt | ddddeeeennnnyyyy} as-regexp
nnnneeeeiiiigggghhhhbbbboooorrrr {ip-address | peer-group-name} ffffiiiilllltttteeeerrrr----lllliiiisssstttt access-list-number {iiiinnnn | oooouuuutttt}
Figure 13-4 shows a sample internetwork used in many of the upcoming examples, two of which 
show the use of AS_PATH ﬁltering.
Figure 13-4
Network Used for AS_PATH Filter Examples 
Example 13-4 shows an AS_PATH ﬁlter in which routes are ﬁltered going from R4 to R3. Filtering 
the outbound Update on R4 will be shown ﬁrst, followed by ﬁltering of inbound Updates on R3. 
In both cases, the goal of the ﬁlter is as follows:
Filter routes in R4’s BGP table whose ASN begins with AS 1, has three additional ASNs 
of any value, and ends with ASN 44.
The two NLRIs matching these criteria are 11.0.0.0/8 and 12.0.0.0/8.
R9
R9 Injects Routes
ASN 4
ASN 123
R4
R3
99.4
34.4
14.4
34.3
35.3
36.3
15.5
ASN 5
R5
R2
99.5
99.9
10.1.99/0/24
35.5
36.6
ASN 65000
R6
R1
99.6
16.6
16.1
15.1
14.1
Confed
ASN 333
Confed
ASN 111
Note: All interface addresses begin with “10.1”.

Route Filtering and Route Summarization     437
Example 13-4
AS_PATH Filtering of Routes Sent from R4 to R3 
! R4 learned its best routes to 11.0.0.0/8 and 12.0.0.0/8 from R9 (10.1.99.9), plus 
! two other routers. Only the routes learned from R9, with NEXT_HOP 10.1.99.9, 
! match the AS_PATH criteria for this example.
R4# sssshhhhoooowwww    iiiipppp    bbbbggggpppp
BGP table version is 9, local router ID is 4.4.4.4
Status codes: s suppressed, d damped, h history, * valid, > best, i—internal,
              r RIB-failure, S Stale
Origin codes: i—IGP, e—EGP, ?—incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.14.1                              0 123 5 1 33333 10 200 44 i
*                   10.1.34.3                              0 123 5 1 33333 10 200 44 i
*>                  10.1.99.9                0             0 1 33333 10 200 44 i
*  12.0.0.0         10.1.14.1                              0 123 5 1 33333 10 200 44 i
*                   10.1.34.3                              0 123 5 1 33333 10 200 44 i
*>                  10.1.99.9                0             0 1 33333 10 200 44 i
! lines omitted for brevity
! R4 currently advertises four routes to R3, as shown next.
R4# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.99.9                0             0 1 33333 10 200 44 i
*> 12.0.0.0         10.1.99.9                0             0 1 33333 10 200 44 i
*> 21.0.0.0         10.1.99.9                0             0 1 404 303 202 i
*> 31.0.0.0         10.1.99.9                0             0 1 303 303 303 i
! R4’s new AS_PATH filter is shown next. The first line matches AS_PATHs beginning 
! with ASN 1, and ending in 44, with three ASNs in between. The second line matches all 
! other AS_PATHs, with a ppppeeeerrrrmmmmiiiitttt action—essentially a ppppeeeerrrrmmmmiiiitttt    aaaallllllll at the end. The 
! list is then enabled with the nnnneeeeiiiigggghhhhbbbboooorrrr    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    command, for outbound Updates 
! sent to R3 (10.1.34.3).
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt    33334444    ddddeeeennnnyyyy    ^^^^1111____....****____....****____....****____44444444$$$$
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt    33334444    ppppeeeerrrrmmmmiiiitttt    ....****
rrrroooouuuutttteeeerrrr    bbbbggggpppp    4444
nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    33334444    oooouuuutttt
! After soft reconfiguration, R4 no longer advertises the routes to networks
! 11 and 12.
R4# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****    ssssoooofffftttt
R4# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    aaaaddddvvvveeeerrrrttttiiiisssseeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 21.0.0.0         10.1.99.9                0             0 1 404 303 202 i
*> 31.0.0.0         10.1.99.9                0             0 1 303 303 303 i
Total number of prefixes 2 
! Not shown: R4’s nnnneeeeiiiigggghhhhbbbboooorrrr    ffffiiiilllltttteeeerrrr----lllliiiisssstttt command is now removed, and soft
! reconfiguration used to restore the Updates to their unfiltered state.
! R3 lists its unfiltered received Update from R4. Note that R4’s ASN was added
! by R4 before sending the Update.
continues

438     Chapter 13: BGP Routing Policies
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk    
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
*  12.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
*  21.0.0.0         10.1.34.4                              0 4 1 404 303 202 i
*  31.0.0.0         10.1.34.4                              0 4 1 303 303 303 i
! R3 uses practically the same AS_PATH filter, except that it must look for ASN
! 4 as the first ASN.
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt    33334444    ddddeeeennnnyyyy    ^^^^4444____1111____....****____....****____....****____44444444$$$$
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt    ppppeeeerrrrmmmmiiiitttt    ....****
rrrroooouuuutttteeeerrrr    bbbbggggpppp    333333333333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    33334444    iiiinnnn
! The sssshhhhoooowwww    iiiipppp    aaaassss----ppppaaaatttthhhh----aaaacccccccceeeessssssss----lllliiiisssstttt command shows the contents of the list.
R3# sssshhhhoooowwww    iiiipppp    aaaassss----ppppaaaatttthhhh----aaaacccccccceeeessssssss----lllliiiisssstttt    33334444    
AS path access list 34
    deny ^4_1_.*_.*_.*_44$
    permit .*
! To test the logic of the regex, the sssshhhhoooowwww    iiiipppp    bbbbggggpppp command can be used, with the
! pipe (|) and the iiiinnnncccclllluuuuddddeeee option. That parses the command output based on the
! regex at the end of the sssshhhhoooowwww command. However, note that some things matchable
! using an AS_PATH filter are not in the sssshhhhoooowwww command output—for example, the
! beginning or end of line cannot be matched with a ^ or $, respectively.
! These metacharacters must be omitted for this testing trick to work.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    |    iiiinnnncccclllluuuuddddeeee    4444____1111____....****____....****____....****____44444444
*  11.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
*  12.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
! After a cccclllleeeeaaaarrrr, it first appears that the routes were not filtered, as they
! still show up in the output below.
R3# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****    ssssoooofffftttt        
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk        
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
*  12.0.0.0         10.1.34.4                              0 4 1 33333 10 200 44 i
*  21.0.0.0         10.1.34.4                              0 4 1 404 303 202 i
*  31.0.0.0         10.1.34.4                              0 4 1 303 303 303 i
! However, R3 does not show the routes shown in the received Update from R4 in
! the BGP table; the routes were indeed filtered.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk    
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.36.6                              0 65000 1 33333 10 200 44 i
* i                 10.1.15.5                0    100      0 (111) 5 1 33333 10 200 44 i
*>                  10.1.35.5                              0 5 1 33333 10 200 44 i
*  12.0.0.0         10.1.36.6                              0 65000 1 33333 10 200 44 i
* i                 10.1.15.5                0    100      0 (111) 5 1 33333 10 200 44 i
*>                  10.1.35.5                              0 5 1 33333 10 200 44 i
! lines omitted for brevity
Example 13-4
AS_PATH Filtering of Routes Sent from R4 to R3 (Continued)

Route Filtering and Route Summarization     439
The explanations in Example 13-4 cover most of the individual points about using ﬁlter lists to 
ﬁlter NLRI based on the AS_PATH. The example also depicts a couple of broader issues regarding 
the Cisco IOS BGP show commands:
■
The show ip bgp neighbor neighbor-id advertised-routes command displays the routes 
actually sent—in other words, this command reﬂects the effects of the ﬁltering by omitting 
the ﬁltered routes from the output.
■
The show ip bgp neighbor neighbor-id received-routes command displays the routes 
actually received from a neighbor, never omitting routes from the output, even if the router 
locally ﬁlters the routes on input.
■
Output ﬁlter lists are applied before the router adds its own ASN to the AS_PATH. (See 
Example 13-4’s AS_PATH ﬁlter on R4 for an example.)
There are also a couple of ways to test regex without changing the routing policy. Example 13-4 
showed one example using the following command:
sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    |    iiiinnnncccclllluuuuddddeeee    4444____1111____....****____....****____....****____44444444    
This command parses the entire command output using the regex after the include keyword. 
However, note that this command looks at the ASCII text of the command output, meaning that 
some special characters (like beginning-of-line and end-of-line characters) do not exist. For 
example, Example 13-4 left out the caret (^) in the regex, because the text output of the show 
command does not include a ^.
The other method to test a regex is to use the show ip bgp regexp expression command. This 
command parses the AS_PATH variables in a router’s BGP table, including all special characters, 
allowing all aspects of the regex to be tested. However, the regexp option of the show ip bgp 
command is not allowed with the received-routes or advertised-routes option.
While Example 13-4 shows BGP using the neighbor ﬁlter-list command, the AS_PATH ﬁlter list 
can also be referenced in a route map using the match as-path list-number command. In that case, 
the route map then can be called using the neighbor route-map command.
Matching AS_SET and AS_CONFED_SEQ
Example 13-5 shows how to use a BGP ﬁlter list to match the AS_SET and AS_CONFED_SEQ 
segment types. Figure 13-5 depicts the speciﬁcs of the example. In this case, R4 summarizes 
16.0.0.0/4, creating an AS_SET entry for the summary, and advertising it to R1 and R3. R1 and 
R3 in turn advertise the route to R2; R1’s route includes an AS_CONFED_SEQ, because R1 and 
R2 are confederation eBGP peers.
KEY 
POINT

440     Chapter 13: BGP Routing Policies
Figure 13-5
Generating AS_SET and AS_CONFED_SEQ 
Example 13-5 shows two different example ﬁlters, as follows:
■
Filtering routes with ASN 303 anywhere inside the AS_SET
■
Filtering based on the AS_CONFED_SEQ of only ASN 111 to begin the AS_PATH
Example 13-5
AS_PATH Filtering of Routes Sent from R4 to R3 
! The next command shows R2’s BGP table before filtering is enabled. R2 has five 
! routes with AS_CONFED_SEQ of (111), all learned from R1. R2 also learned the 
! same NLRI from R3, with the related AS_PATH not including the beginning 
! AS_CONFED_SEQ of (111), because R3 is in the same confederation sub-AS as R2.
R2# sssshhhh    iiiipppp    bbbbggggpppp    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
* i11.0.0.0         10.1.35.5                0    100      0 5 1 33333 10 200 44 i
*>                  10.1.15.5                0    100      0 (111) 5 1 33333 10 200 44 i
* i12.0.0.0         10.1.35.5                0    100      0 5 1 33333 10 200 44 i
*>                  10.1.15.5                0    100      0 (111) 5 1 33333 10 200 44 i
* i16.0.0.0/4       10.1.34.4                0    100      0 4 {1,404,303,202} i
*>                  10.1.14.4                0    100      0 (111) 4 {1,404,303,202} i
* i21.0.0.0         10.1.34.4                0    100      0 4 1 404 303 202 i
*>                  10.1.15.5                0    100      0 (111) 5 1 404 303 202 i
ASN 4
ASN 123
R4
R3
34.4
14.4
R2
R1
Confed
ASN 333
Confed
ASN 111
AS_PATH in Order:
AS_CONFED_SEQ (111)
AS_SEQ 4
AS_SET {1, 404, 303, 202}
16.0.0.0/4
AS_SEQ 4
AS_SET {1, 404, 303, 202}

Route Filtering and Route Summarization     441
* i31.0.0.0         10.1.34.4                0    100      0 4 1 303 303 303 i
*>                  10.1.15.5                0    100      0 (111) 5 1 303 303 303 i
! R2 will use AS_PATH access-list 1 to find routes that begin with AS_CONFED_SEQ 
! of 111. Note that the “(” must be matched by enclosing it in square brackets, as
! the “(” itself and the “)” are metacharacters, and would otherwise be 
! interpreted as a metacharacter. Without the “[(]” to begin the regex, the
! AS_PATH filter would not match.
R2# sssshhhhoooowwww    iiiipppp    aaaassss----ppppaaaatttthhhh----aaaacccccccceeeessssssss----lllliiiisssstttt    1111
AS path access list 1
    deny ^[(]111
    permit .*
! R2 filters incoming routes from both peers, and performs a soft reconfig.
R2(config)# rrrroooouuuutttteeeerrrr    bbbbggggpppp    333333333333
R2(config-router)# nnnneeeeiiiigggghhhh    1111....1111....1111....1111    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    1111    iiiinnnn
R2(config-router)# nnnneeeeiiiigggghhhh    3333....3333....3333....3333    ffffiiiilllltttteeeerrrr----lllliiiisssstttt    1111    iiiinnnn
R2# cccclllleeeeaaaarrrr    iiiipppp    bbbbggggpppp    ****    ssssoooofffftttt
! Now all routes with AS_CONFED_SEQ of 111 beginning the AS_PATH are gone.
R2# sssshhhh    iiiipppp    bbbbggggpppp    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i11.0.0.0         10.1.35.5                0    100      0 5 1 33333 10 200 44 i
*>i12.0.0.0         10.1.35.5                0    100      0 5 1 33333 10 200 44 i
*>i16.0.0.0/4       10.1.34.4                0    100      0 4 {1,404,303,202} i
*>i21.0.0.0         10.1.34.4                0    100      0 4 1 404 303 202 i
*>i31.0.0.0         10.1.34.4                0    100      0 4 1 303 303 303 i
! Not shown—R2’s switches to using AS_PATH ffffiiiilllltttteeeerrrr----lllliiiisssstttt    2222 instead for peer R3
! only, and soft reconfiguration is applied. 
! The next command shows the contents
! of the new filter for inbound Updates from R3. Because the “{” and “}” are not 
! metacharacters, they can simply be typed directly into the regex. AS_PATH 
! aaaacccccccceeeessssssss----lllliiiisssstttt    2222 matches an AS_SET anywhere in the AS_PATH, as long as 303 
! resides anywhere inside the AS_SET.
R2# sssshhhhoooowwww    iiiipppp    aaaassss----ppppaaaatttthhhh----aaaacccccccceeeessssssss----lllliiiisssstttt    2222
AS path access list 2
    deny {.*303.*}
    permit .*
! The next command is a test to show routes received by R2 from R3 that happen to
! have 303 anywhere in the AS_PATH. Remember, filtered routes are still 
! displayed when viewing the BGP table with the rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss option.
R2# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    rrrreeeecccceeeeiiiivvvveeeedddd----rrrroooouuuutttteeeessss    ||||    iiiinnnncccclllluuuuddddeeee    333300003333
* i16.0.0.0/4       10.1.34.4                0    100      0 4 {1,404,303,202} i
* i21.0.0.0         10.1.34.4                0    100      0 4 1 404 303 202 i
* i31.0.0.0         10.1.34.4                0    100      0 4 1 303 303 303 i
! R2 has filtered the route with 303 in the AS_SET, but it did not filter the
! routes with 303 in the AS_SEQ.
R2# sssshhhh    iiiipppp    bbbbggggpppp    ||||    iiiinnnncccclllluuuuddddeeee    11110000....1111....33334444....4444
* i21.0.0.0         10.1.34.4                0    100      0 4 1 404 303 202 i
* i31.0.0.0         10.1.34.4                0    100      0 4 1 303 303 303 i
Example 13-5
AS_PATH Filtering of Routes Sent from R4 to R3 (Continued)

442     Chapter 13: BGP Routing Policies
BGP Path Attributes and the BGP Decision Process
BGP path attributes deﬁne different characteristics about the NLRI(s) associated with a PA. For 
example, the AS_PATH PA lists the ASNs through which the NLRI has been advertised. Some 
BGP PAs impact the BGP decision process by which a router chooses the best path among 
multiple known routes to the same NLRI. This chapter explains the BGP decision process and 
introduces several new PAs and other BGP features that impact that process.
Generic Terms and Characteristics of BGP PAs 
Each BGP PA can be described as either a well-known or optional PA. These terms refer to 
whether a particular implementation of BGP software must support the PA (well known) or 
support for the PA is not required (optional). 
Well-known PAs are either one of the following:
■
Mandatory—The PA must be in every BGP Update
■
Discretionary—The PA is not required in every BGP Update
These classiﬁcations relate not to the capabilities of a BGP implementation, but rather to whether 
a particular feature has been conﬁgured or used by default. For example, the ATOMIC_AGGREGATE 
PA is a well-known discretionary PA. That means that all implementations of BGP must understand 
this PA, but a particular router adds this PA only at its discretion, in this case by a router that creates 
a summary route. Conversely, the AS_PATH PA is a well-known mandatory PA, and as such must 
be included in every BGP Update.
BGP classiﬁes optional PAs into one of two other categories, which relate to a router’s behavior 
when the router’s BGP implementation does not understand the PA:
■
Transitive—The router should silently forward the PA to other routers without needing to 
consider the meaning of the PA.
■
Nontransitive—The router should remove the PA so that it is not propagated to any
peers.
NOTE
While AS_SET and AS_CONFED_SET are both unordered lists, when
applying regex logic, Cisco IOS uses the order listed in the output of the show ip 
bgp command.

BGP Path Attributes and the BGP Decision Process     443
Table 13-6 summarizes these classiﬁcation terms and deﬁnitions.
The BGP PAs that have been mentioned so far in this book provide several good examples of the 
meanings behind the terms given in Table 13-6. Those PAs are summarized in Table 13-7, along 
with their characteristics.
Additions to BGP can be deﬁned through the creation of new optional PAs, without requiring 
a new baseline RFC and a bump to a new version for BGP. The last two PAs in Table 13-7
Table 13-6
Deﬁnitions of Path Attribute Classiﬁcation Terms
KEY 
POINT
Term
All BGP Software 
Implementations Must 
Support It 
Must Be Sent in 
Each BGP 
Update
Silently 
Forwarded if Not 
Supported
Well-known mandatory
Yes
Yes
—
Well-known 
discretionary
Yes
No
—
Optional transitive
No
—
Yes
Optional nontransitive
No
—
No
Table 13-7
BGP Path Attributes Covered So Far, and Their Characteristics
Path Attribute
Description
Characteristics
AS_PATH
Lists ASNs through which the route has 
been advertised
Well-known mandatory
NEXT_HOP
Lists the next-hop IP address used to reach 
an NLRI
Well-known mandatory
AGGREGATOR
Lists the RID and ASN of the router that 
created a summary NLRI
Optional transitive
ATOMIC_AGGREGATE
Tags a summary NLRI as being a summary
Well-known 
discretionary
ORIGIN
Value implying from where the route was 
taken for injection into BGP; i (IGP), e 
(EGP), or ? (incomplete information) 
Well-known mandatory
ORIGINATOR_ID
Used by RRs to denote the RID of the iBGP 
neighbor that injected the NLRI into the AS
Optional nontransitive
CLUSTER_LIST
Used by RRs to list the RR cluster IDs in 
order to prevent loops
Optional nontransitive

444     Chapter 13: BGP Routing Policies
list two such examples, both of which were added by RFC 1966 for the route reﬂectors 
feature.
The BGP Decision Process
The BGP decision process uses some of the PAs listed in Table 13-7, as well as several others. This 
section focuses on the decision process as an end to itself, with only brief explanations of new 
features or PAs. Following that, the text explains the details of some of the PAs that have not yet 
been covered in the book, as well as some other details that affect the BGP decision process.
When a BGP router learns multiple routes to the same NLRI, it must choose a single best route to 
reach that NLRI. BGP does not rely on a single concept like an IGP metric, but rather provides a 
rich set of tools that can be manipulated to affect the choice of routes. The following list deﬁnes 
the core of the BGP decision process to choose routes. Two additional tiebreaker steps are listed 
later in this section. 
0.
Is the NEXT_HOP reachable?—Many texts, as well as RFC 1771, mention the fact that if 
a router does not have a route to the NEXT_HOP PA for a route, it should be rejected in the 
decision process. 
1.
Highest administrative weight—This is a Cisco-proprietary feature. The administrative 
weight can be assigned to each NLRI locally on a router, and the value cannot be 
communicated to another router. The higher the value, the better the route.
2.
Highest LOCAL_PREF PA—This optional nontransitive PA can be set on a router inside an 
AS, and distributed inside the AS only. As a result, this feature can be used by all BGP routers 
in one AS to choose the same exit point from their AS for particular NLRI. The higher the 
value, the better the route.
3.
Locally injected routes—Pick the route injected into BGP locally; if multiple routes exist, 
prefer ORIGIN I routes ﬁrst, then ORIGIN E routes, and ﬁnally ORIGIN ? routes. (This step 
is seldom needed, and is sometimes omitted from other BGP references.)
4.
Shortest AS_PATH length—The shorter the AS_PATH length, the better the route. The 
length calculation ignores both AS_CONFED_SET and AS_CONFED_SEQ, and treats an 
AS_SET as 1 ASN, regardless of the number of ASNs in the AS_SET. It counts each ASN in 
the AS_SEQUENCE as 1.
5.
ORIGIN PA—IGP (I) routes are preferred over EGP (E) routes, which are in turn preferred 
over incomplete (?) routes.
6.
Smallest Multi-Exit Discriminator (MED) PA—Traditionally, this PA allows an ISP with 
multiple peer connections to a customer AS to tell the customer AS which of the peer 
connections is best for reaching particular NLRI. The smaller the value, the better the route.
7.
Neighbor Type—Routes learned via eBGP are preferred over iBGP-learned routes, with 
confederation eBGP equal to iBGP for this step.
KEY 
POINT

BGP Path Attributes and the BGP Decision Process     445
8.
IGP metric for reaching the NEXT_HOP—IGP metrics for each NLRI’s NEXT_HOP are 
compared. The lower the value, the better the route.
Clariﬁcations of the BGP Decision Process
The goal of this nine-step decision process is to determine the one best route to reach each NLRI. 
These steps do not attempt to ﬁnd multiple equal routes, and install equal routes into the IP routing 
table, until a later step—even if the maximum-paths router subcommand has been conﬁgured to 
some number higher than the default of 1. The goal is to ﬁnd the one best route to each NLRI.
First, you probably noticed that the list starts with Step 0 instead of Step 1. I debated whether to 
include Step 0 in the list at all. Certainly, the statement at Step 0 is true—however, one could argue 
that this concept is not related to choosing between multiple useful routes, because it is really a 
restriction as to which routes could be used, thereby being candidates to become the best route. 
I decided to include it in the list for a couple of reasons: it is prominently mentioned in the 
corresponding parts of RFC 1771, and it is part of the decision process listed in both Internet 
Routing Architectures (Halabi) and Routing TCP/IP, Volume II (Doyle and Carroll). It is an 
important point, and worth memorizing, but to help point out that some people might not even 
consider this logic as part of the BGP decision process, I numbered it as Step 0 to make it stand out.
BGP considers each decision step independently. If a step determines the best route for an NLRI, 
BGP does not bother with the remaining steps. For example, imagine that R1 has ﬁve routes to 
9.0.0.0/10, two with AS_PATH length 3 and the others with AS_PATH length 5. The decision process 
did not determine a best route before reaching Step 4 (AS_PATH length). Step 4’s logic can 
determine that two routes are better than the others because they have a shorter AS_PATH length. 
However, because this step does not produce the single winner, the process moves on to the next step, 
and all ﬁve routes are still considered as candidates to be the best route. Each step either produces a 
winner or moves on to the next step, examining all routes to that NLRI at the next step. 
BGP applies this process to each unique NLRI. When overlapping NLRIs exist—for example, 
130.1.0.0/16, 130.2.0.0/16, and 130.0.0.0/12—BGP attempts to ﬁnd the best route for each 
speciﬁc preﬁx/preﬁx length.
Two Final Tiebreaker Steps in the BGP Decision Process
It is possible for BGP to fail to determine a best path to an NLRI using Steps 0 through 8, so BGP 
includes the following tiebreakers. These values would not typically be manipulated in a routing 
policy to impact the decision process.
9.
Smallest advertising eBGP RID, or iBGP RID, with an exception—If some routes are 
eBGP routes, the router prefers the route that was advertised by the eBGP router with the 
lowest RID. If only iBGP routes exist, the same logic is used but for iBGP peers. (All 
confederation peers are considered iBGP peers for this process.)
KEY 
POINT
KEY 
POINT

446     Chapter 13: BGP Routing Policies
10.
Smallest neighbor ID—For Step 9 to fail to produce a winning route, the router must have 
at least one other router with which it has multiple neighbor relationships. For this atypical 
case, the router now prefers the route advertised by the lowest neighbor ID, as listed in that 
router’s neighbor commands.
Adding Multiple BGP Routes to the IP Routing Table
The BGP decision process has an impact on whether BGP adds multiple routes for a single NLRI 
to the IP routing table. The following statements summarize the logic:
■
If the best path for an NLRI is determined in Steps 0 through 8, BGP adds only one BGP route 
to the IP routing table—the best route, of course. 
■
If the best path for an NLRI is determined at Step 9 or 10, BGP considers placing multiple 
BGP routes into the IP routing table.
■
Even if multiple BGP routes are added to the IP routing table, BGP still chooses only one 
route per NLRI as the best route; that best route is the only route to that NLRI that BGP will 
advertise to neighbors.
The section “The maximum-paths Command and BGP Decision Process Tiebreakers,” later in 
this chapter, details the restrictions.
Mnemonics for Memorizing the Decision Process
Many people do not bother to memorize the BGP decision process steps. However, memorizing 
the list is very useful for both the CCIE Routing Switching written and lab exams. This section 
provides a set of mnemonic devices to aid you in memorizing the list. Please feel free to learn the 
mnemonic or skip to the next heading, at your discretion.
NOTE
The exception at Step 9 occurs when BGP already has a chosen best route to the NLRI but 
is now reapplying the decision process as a result of new information. For example, the router 
may have just learned of another route to reach the same NLRI. In that case, if the current best route 
is an eBGP route, the old best route remains the best route. This logic prevents eBGP route ﬂaps.
NOTE
For those of you more familiar with BGP, hopefully the lists describing the BGP 
decision process bring to mind the details you have learned in the past. For those of you less 
familiar with BGP, you might begin to feel a little overwhelmed by the details of the process. 
The lists are useful for study and memorization once you understand the background and details, 
which will be forthcoming in just a few pages. However, a few other general details need to be 
introduced before you get to the details at each step of the decision process. Hang in there!
KEY 
POINT

BGP Path Attributes and the BGP Decision Process     447
Table 13-8 is part of the practice effort to memorize the BGP decision tree.
The ﬁrst mnemonic step is to memorize the nine trigger letters—single letters that, once 
memorized, should hopefully trigger your memory to recall some short phrase that describes the 
logic of each decision point. Of course, memorizing nine seemingly random letters is not easy. So, 
memorize them as three groups:
N
WLLA
OMNI
After memorizing the trigger letter groups, you should exercise correlating the triggers to the short 
phrases listed in Table 13-8. (The CD contains memory-builder versions of the tables, including 
Table 13-8, which you can print and use for this practice if you like.) Simply write down the nine 
trigger letters, and exercise your memory by writing out the short phrase associated with each 
letter. I’d recommend practicing as the ﬁrst thing you do when you pick up the book for your next 
Table 13-8
BGP Decision Process Mnemonic: N WLLA OMNI
Trigger 
Letter
Short Phrase
Which Is Better?
N
Next hop: reachable?
—
W
Weight
Bigger
L
LOCAL_PREF
Bigger
L
Locally injected routes
Locally injected is better than iBGP/eBGP 
learned
A
AS_PATH length
Smaller
O
ORIGIN
Prefer ORIGIN code I over E, and E over ?
M
MED
Smaller
N
Neighbor Type
Prefer eBGP over iBGP
I
IGP metric to NEXT_HOP
Smaller
NOTE
The nine letters are organized as shown here for several reasons. First, the single letter 
N, for Step 0, is purposefully separated from the other two groups because it can be argued that 
this step is not really part of the decision process. OMNI was separated because it is a commonly 
known English language preﬁx. And WLLA was just left over after designating OMNI.

448     Chapter 13: BGP Routing Policies
reading/study session, and do it for 5 minutes, and typically after a few rounds you will have it 
memorized.
Of these nine steps, I ﬁnd also that most people have difﬁcultly correlating the I to the phrase “IGP 
metric to reach the NEXT_HOP”; in case it helps, memorize also that the ﬁrst and last of the nine 
items relate to NEXT_HOP. Based on that fact, and the fact that the trigger letter I implies IGP, 
maybe the two facts together may trigger your memory.
Once you can essentially re-create the ﬁrst two columns of Table 13-8 from memory, memorize 
the fact that the ﬁrst two quantitative decision points use bigger-is-better logic, and the rest use 
smaller-is-better logic. By doing so, you do not have to memorize which speciﬁc feature uses 
which type of logic—as long as you can write down the whole list, you can easily ﬁnd the ﬁrst two 
with quantitative comparisons (speciﬁcally Steps 1 and 2, WEIGHT and LOCAL_PREF, 
respectively).
Finally, Steps 9 and 10 are left to you to simply memorize. Remember that maximum-paths 
comes into play only if the ﬁrst eight points do not determine a best route. 
Conﬁguring BGP Policies
BGP policies include route ﬁlters as well as tools that modify PAs and other settings that impact 
the BGP decision process. This section examines the Cisco IOS tools used to implement routing 
policies that impact the BGP decision process, covering the tools in the same order as the decision 
process. 
Background: BGP PAs and Features Used by Routing Policies
Before getting into each individual step of the decision process, it is important to have a handy 
reference for the features the process manipulates, and the command output on routers that will 
reﬂect the changes made by each step. First, Table 13-9 summarizes the BGP PAs and other 
features used in the BGP decision process.
Table 13-9
Proprietary Features and BGP Path Attributes that Affect the BGP Decision Process 
KEY 
POINT
PA/Other
Description
BGP PA Type
NEXT_HOP
Lists the next-hop IP address used to reach an 
NLRI.
Well-known mandatory
Weight1
Local Cisco-proprietary setting, not advertised to 
any peers. Bigger is better.
—
LOCAL_PREF
Communicated inside a single AS. Bigger is better; 
range 0 through 232 – 1.
Well-known discretionary

Conﬁguring BGP Policies     449
Next, Figure 13-6 shows an example of the show ip bgp command. Note that the locations of most 
of the variables used for the BGP decision process are given in the output. 
Figure 13-6
Locating Key BGP Decision Features in the show ip bgp Command 
PA/Other
Description
BGP PA Type
AS_PATH length
The number of ASNs in the AS_SEQ, plus 1 if an 
AS_SET exists.
Well-known mandatory
ORIGIN
Value implying the route was injected into BGP; I 
(IGP), E (EGP), or ? (incomplete information). 
Well-known mandatory
MULTI_EXIT_
DISC (MED)
Multi-Exit Discriminator. Set and advertised by 
routers in one AS, impacting the BGP decision of 
routers in the other AS. Smaller is better.
Optional nontransitive
Neighbor Type1
The type of BGP neighbor from which a route was 
learned. Confederation eBGP is treated as iBGP for 
the decision process.
—
IGP metric to 
reach 
NEXT_HOP1
Smaller is better.
—
BGP RID1
Deﬁnes a unique identiﬁer for a BGP router. 
Smaller is better.
—
1 This value is not a BGP PA.
Table 13-9
Proprietary Features and BGP Path Attributes that Affect the BGP Decision Process (Continued)
R3 #show ip bgp
BGP table version is 12, local router ID is 3.3.3.3
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
        r RIB-failure, S stale
Origin codes: i -  IGP, e - EGP, ? - incomplete
Comments: To Discover Other Details…
Neighbor Type: No Letter Means “EBGP”
IGP Metric: show ip route next-hop-address
RID: show ip bgp nlri
Network
11.0.0.0
12.0.0.0
16.0.0.0/4
Next Hop
10.1.36.6
10.1.35.5
10.1.14.4
10.1.34.4
10.1.36.6
10.1.35.5
10.1.14.4
10.1.34.4
10.1.14.4
*
*
*
*>
*
*
*
*>
*
i
i
i
Neighbor
Type
NEXT_HOP
Metric
0
0
0
MED
Weight
LocPrf
100
100
100
LOCAL_PREF
Weight
0
0
0
0
0
0
0
0
0
Path
65000 1 33333 10 200 44 i
5 1 33333 10 200 44 i
(111) 4 1 33333 10 200 44 i
4 1 33333 10 200 44 i
65000 1 33333 10 200 44 i
5 1 33333 10 200 44 i
(111) 4 1 33333 10 200 44 i
4 1 33333 10 200 44 i
(111) 4 {1, 404, 303, 202} i
AS_Path
Origin

450     Chapter 13: BGP Routing Policies
The show ip bgp command lists most of the settings that impact the decision process, but it does 
not list the advertising router’s RID, the IGP metric to reach the NEXT_HOP, or the neighbor ID 
that advertised the route. Two other commands do supply these three missing pieces of information. 
Example 13-6 shows the output of one of those commands, the show ip bgp 16.0.0.0 command, 
which lists the advertising router’s RID and neighbor ID. The IGP metric, of course, is given by 
the show ip route command.
Armed with the BGP decision process steps, the deﬁnitions for the PAs that impact the process, and 
a good reference for where you need to look to see the values, the next several sections take a tour 
of the BGP decision process. Each successive heading examines the decision process steps, in sequence.
Step 0: NEXT_HOP Reachable 
This decision step simply prevents BGP from making the poor choice of accepting a BGP route 
as best, even though that router cannot possibly forward packets to the next-hop router.
Routing policies do not typically attempt to change a NEXT_HOP address to impact a routing 
choice. However, the NEXT_HOP can be changed by using either the neighbor neighbor-id next-
hop-self command (the default for eBGP peers) or the neighbor neighbor-id next-hop-
unchanged command (the default for iBGP peers). If next-hop-self is used, the NEXT_HOP is 
set to the IP address used as the source of the BGP Update sent to that neighbor. If next-hop-
unchanged is used, the NEXT_HOP is not changed.
Step 1: Administrative Weight
The weight, more fully titled administrative weight, allows a single router to examine inbound 
BGP Updates and decide which routes to prefer. The weight is not a BGP PA, but simply a Cisco-
proprietary setting on a local router. In fact, it cannot be included in a BGP Update sent to another 
Example 13-6
Output of the show ip bgp 16.0.0.0 Command on R3
! Two routes to 16.0.0.0 are listed. The “from z.z.z.z” phrases identify the
! neighbor ID that advertised the route. The “(y.y.y.y)” output that follows lists
! the RID of that same router. Also, note that the 
! output first identifies entry #2 as the best one, indicated by that entry (on the last 
! line of output) also listing the word “best.”
R3# sssshhhh    iiiipppp    bbbbggggpppp    11116666....0000....0000....0000
BGP routing table entry for 16.0.0.0/4, version 8
Paths: (2 available, best #2, table Default-IP-Routing-Table)
  Advertised to update-groups:
     1          2
  (111) 4 {1,404,303,202}, (aggregated by 4 4.4.4.4), (received & used)
    10.1.14.4 (metric 3193856) from 2.2.2.2 (2.2.2.2)
      Origin IGP, metric 0, localpref 100, valid, confed-internal
  4 {1,404,303,202}, (aggregated by 4 4.4.4.4), (received & used)
    10.1.34.4 from 10.1.34.4 (4.4.4.4)
Origin IGP, metric 0, localpref 100, valid, external, best* i11.0.0.0

Conﬁguring BGP Policies     451
router, because there is no place in the Update message to include the weight. Table 13-10 
summarizes the key points regarding BGP weight.
Figure 13-7 shows an updated version of Figure 13-4 that is used in the next example. Compared 
to Figure 13-4, Figure 13-7 shows the three routers in AS 123 as a full mesh of iBGP peers, with 
no confederations.
Figure 13-7
Sample Network: AS 123 Without Confederations 
Table 13-10
Key Features of Administrative Weight
KEY 
POINT
Feature
Description
Is it a PA?
No; Cisco-proprietary feature
Purpose
Identiﬁes a single router’s best route
Scope
In a single router only
Default 
0 for learned routes, 32,768 for locally injected routes
Changing the defaults
Not supported
Range
0 through 65,535 (216 – 1)
Which is best?
Bigger values are better
Conﬁguration
Via neighbor route-map in command or the neighbor weight command (if a 
route is matched by both commands, IOS uses weight speciﬁed in route map)
R9
R9 Injects Routes
ASN 4
ASN 123
R4
R3
99.4
34.4
14.4
34.3
35.3
36.3
15.5
ASN 5
R5
R2
99.5
99.9
10.1.99/0/24
35.5
36.6
ASN 65000
R6
R1
99.6
16.6
16.1
15.1
14.1
Note: All interface addresses begin with “10.1”.

452     Chapter 13: BGP Routing Policies
In Example 13-7, R1 sets the weight for NLRIs learned from R4, R5, and R6. The conﬁguration 
shows both methods of conﬁguring weight:
■
Routes learned from R4 are set to weight 4 by using the neighbor weight command.
■
Routes learned from R5 are set to weight 200 if ASN 200 is in the AS_PATH, by using a 
route-map.
Of particular importance in the example is the fact that the route map includes clause 20, with 
a permit action and no match or set commands. The neighbor route-map command creates 
an implied ﬁltering decision. Any route matched by a permit clause in the route map is implied 
to be allowed through, and routes matched by a deny clause will be ﬁltered. Route maps use an 
implied deny all at the end of the route map for any unmatched routes. By including a ﬁnal 
clause with just a permit keyword, the route map changes to use permit all logic, thereby 
passing all routes.
Example 13-7
Setting BGP Administrative Weight on R1
! The commands below list only commands that were added to the existing R1
! configuration. All routes from R4 (10.1.14.4) will now be weight 4, and those
! matching clause 10 of the route-map, from R5 (10.1.15.5), will be weight 200. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11114444....4444    wwwweeeeiiiigggghhhhtttt    4444
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11115555....5555    rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----wwwweeeeiiiigggghhhhtttt----222200000000    iiiinnnn
! The AS_PATH ACL matches any AS_PATH that includes ASN 200. Note that the 
! route-map requires a second ppppeeeerrrrmmmmiiiitttt clause with no mmmmaaaattttcccchhhh or sssseeeetttt, otherwise all 
! routes not matched by clause 10 will be filtered.
iiiipppp    aaaassss----ppppaaaatttthhhh    aaaacccccccceeeessssssss----lllliiiisssstttt    5555    ppppeeeerrrrmmmmiiiitttt    ____222200000000____
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----wwwweeeeiiiigggghhhhtttt----222200000000    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    aaaassss----ppppaaaatttthhhh    5555
    sssseeeetttt    wwwweeeeiiiigggghhhhtttt    222200000000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----wwwweeeeiiiigggghhhhtttt----222200000000    ppppeeeerrrrmmmmiiiitttt    22220000
! The changes are reflected below. Note also that both networks 11 and 12 have
! weights of 200, so those routes were chosen as the best paths.
R1# sssshhhh    iiiipppp    bbbbggggpppp    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.14.4       4294967294             4 4 1 33333 10 200 44 i
* i                 10.1.36.6       4294967294    100      0 65000 1 33333 10 200 44 i
*                   10.1.16.6       4294967294             0 65000 1 33333 10 200 44 i
*>                  10.1.15.5       4294967294           200 5 1 33333 10 200 44 i
*  12.0.0.0         10.1.14.4       4294967294             4 4 1 33333 10 200 44 i
* i                 10.1.36.6       4294967294    100      0 65000 1 33333 10 200 44 i
*                   10.1.16.6       4294967294             0 65000 1 33333 10 200 44 i
*>                  10.1.15.5       4294967294           200 5 1 33333 10 200 44 i

Conﬁguring BGP Policies     453
Step 2: Highest Local Preference (LOCAL_PREF)
The BGP LOCAL_PREF PA allows routers in an AS with multiple exit points to choose which 
exit point is used to reach a particular NLRI. To do so, the router that is the desired exit point sets 
the LOCAL_PREF for its eBGP route for that NLRI to a relatively high value, then advertises that 
route via iBGP. The other routers in the same AS can learn of multiple routes to reach the NLRI, 
but they will choose the route with the higher LOCAL_PREF as the best route.
Table 13-11 summarizes the key points regarding LOCAL_PREF.
Figure 13-8 shows a typical example of using LOCAL_PREF. In this case, the engineers for AS 
123 want to use R1 to forward packets to 11.0.0.0/8, but use R3 to forward packets to 12.0.0.0/8. 
If either route fails, the other router should be used instead. 
Example 13-8 shows the conﬁguration used on R1 and R3 to implement the following routing 
policy:
■
AS 123 routers should use R1 to reach 11.0.0.0/8.
■
AS 123 routers should use R3 to reach 12.0.0.0/8.
■
R1 can use any of its three routes to reach 11.0.0.0/8, and R3 can use any of its three routes 
to reach 12.0.0.0/8.
To meet these design goals, R1 and R3 will set LOCAL_PREF to values higher than the default 
of 100.
Table 13-11
Key Features of LOCAL_PREF
KEY 
POINT
Feature
Description
PA?
Yes, well-known discretionary
Purpose
Identiﬁes the best exit point from the AS to reach the NLRI
Scope
Throughout the AS in which it was set, including confederation sub-ASs
Default 
100
Changing the default
Using the bgp default local-preference <0-4294967295> BGP subcommand
Range
0 through 4,294,967,295 (232 – 1)
Which is best?
Higher values are better
Conﬁguration
Via neighbor route-map command; in option is required for Updates from an 
eBGP peer

454     Chapter 13: BGP Routing Policies
Figure 13-8
Typical Use of LOCAL_PREF to Inﬂuence Exit Point from AS 123.
Example 13-8
LOCAL_PREF Directing Packets for 11/8 Out R1 and Packets for 12/8 Out R3 
! R1 Config—only the relevant configuration is shown. The same route-map is
! called for incoming Updates from R4, R5, and R6. Note that the route-map 
! includes a ppppeeeerrrrmmmmiiiitttt clause 20 with no mmmmaaaattttcccchhhh    or sssseeeetttt commands to permit
! any routes not specified in clause 10 to pass without changes. The route-map 
! allows the LOCAL_PREF for 12.0.0.0/8 to default (100). 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11114444....4444    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----hhhhiiiigggghhhh----11112222----ddddeeeeffffaaaauuuulllltttt    iiiinnnn
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11115555....5555    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----hhhhiiiigggghhhh----11112222----ddddeeeeffffaaaauuuulllltttt    iiiinnnn
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11116666....6666    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----hhhhiiiigggghhhh----11112222----ddddeeeeffffaaaauuuulllltttt    iiiinnnn
!!!!
aaaacccccccceeeessssssss----lllliiiisssstttt    11111111    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    11111111----hhhhiiiigggghhhh----11112222----ddddeeeeffffaaaauuuulllltttt    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    11111111
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    222200000000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    11111111----hhhhiiiigggghhhh----11112222----ddddeeeeffffaaaauuuulllltttt    ppppeeeerrrrmmmmiiiitttt    22220000
! R3 Config—Same general concept as R1, but the 12.0.0.0/8 route is assigned
ASN 4
ASN 123
R4
R3
ASN 5
R5
ASN 65000
R6
Net 11
Net 12
Net 12
Net 11
Net 12
Net 11
Incoming Updates
11.0.0.0/8
12.0.0.0/8
Best Route
BGP Update
BGP Peer
Set LOCAL_PREF:
200 for Net 11
100 for Net 12
Set LOCAL_PREF:
200 for Net 12
50 for Net 11
R1
R2

Conﬁguring BGP Policies     455
! LOCAL_PREF 200, and 11.0.0.0/8 is assigned LOCAL_PREF 50.  
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    iiiinnnn
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33335555....5555    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    iiiinnnn
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33336666....6666    rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    iiiinnnn
!!!!
aaaacccccccceeeessssssss----lllliiiisssstttt    11111111    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000
aaaacccccccceeeessssssss----lllliiiisssstttt    11112222    ppppeeeerrrrmmmmiiiitttt    11112222....0000....0000....0000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    11112222
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    222200000000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    ppppeeeerrrrmmmmiiiitttt    22220000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    11111111
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    55550000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    11111111----lllloooowwww----11112222----hhhhiiiigggghhhh    ppppeeeerrrrmmmmiiiitttt    33330000
! R3 now shows the LOCAL_PREF values. R3’s best route to 12.0.0.0 is the one it
! learned from R4 (10.1.34.4). Its best route to 11.0.0.0 is the only one of the
! 4 routes with LOCAL_PREF 200—the one learned from R1. Note also that the 
! administrative weights are all tied at 0; otherwise, BGP might have chosen a 
! different best route. 
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.36.6       4294967294     50      0 65000 1 33333 10 200 44 i
*>i                 10.1.14.4       4294967294    200      0 4 1 33333 10 200 44 i
*                   10.1.35.5       4294967294     50      0 5 1 33333 10 200 44 i
*                   10.1.34.4       4294967294     50      0 4 1 33333 10 200 44 i
*  12.0.0.0         10.1.36.6       4294967294    200      0 65000 1 33333 10 200 44 i
*                   10.1.35.5       4294967294    200      0 5 1 33333 10 200 44 i
*>                  10.1.34.4       4294967294    200      0 4 1 33333 10 200 44 i
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    11111111....0000....0000....0000
! lines omitted for brevity
  4 1 33333 10 200 44, (received & used)
    10.1.14.4 (metric 2681856) from 1.1.1.1 (1.1.1.1)
      Origin IGP, metric 4294967294, localpref 200, valid, internal, best
! lines omitted for brevity
! Because R3’s best route to 11.0.0.0/8 is through R1, R3 does not advertise that 
! iBGP route to R2. Similarly, R1’s best route to 12.0.0.0/8 is through R3, so R1
! does not advertise its best route to 12.0.0.0/8, again because it is an iBGP
! route. As a result, R2 receives only one route to each of the two networks.  
R2# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i11.0.0.0         10.1.14.4       4294967294    200      0 4 1 33333 10 200 44 i
*>i12.0.0.0         10.1.34.4       4294967294    200      0 4 1 33333 10 200 44 i
Example 13-8
LOCAL_PREF Directing Packets for 11/8 Out R1 and Packets for 12/8 Out R3 (Continued)

456     Chapter 13: BGP Routing Policies
This example does meet the stated design goals, but note that one design goal states that it does 
not matter which of the three eBGP routes R1 and R3 use to reach their assigned preﬁxes. 
Interestingly, R1 did not choose its best BGP route to network 11.0.0.0/8 based on LOCAL_PREF, 
nor did R3 choose its best route to 12.0.0.0/8 based on LOCAL_PREF. Note that R1 and R3 had 
three routes that tied based on LOCAL_PREF. In this case, their decisions happened to fall all the 
way to Step 9—the lowest advertising BGP RID. As a result, R3 chose the route through R4 (RID 
4.4.4.4) instead of R5 (RID 5.5.5.5) or R6 (RID 6.6.6.6).
Had R1 or R3 wanted to impact which of the three eBGP routers to use to reach their respective 
NLRI, the route map could have been changed to match routes from each neighbor, and set the 
LOCAL_PREF to different high values. For example, the LOCAL_PREF could be set to 204, 205, 
and 206 for R4, R5, and R6, respectively, thereby making R3 choose to use the route through R6 
if 12.0.0.0/8 was learned from each of the three eBGP peers. To match, the match ip next-hop or 
match ip route-source command could be used, or a different route map could simply be used 
per neighbor.
Step 3: Choose Between Locally Injected Routes Based on ORIGIN PA
This logic step is seldom used, but it is a valid part of the BGP decision process. To appreciate why 
it is so seldom needed, consider the following: BGP assigns a weight of 32,768 to routes locally 
injected into BGP. As a result, a router would have already picked a locally injected route as best 
because of to its high weight.
Two general cases can occur that cause a router to use the logic for this step. The ﬁrst case is 
unlikely. A router must locally inject an NLRI, learn the same NLRI from a neighbor, and use an 
inbound route-map to set the weight of that received NLRI to the same value as the locally 
injected route. That only occurs in lab experiments.
The second case occurs when a router attempts to inject routes locally via multiple methods, and 
the same NLRI is injected from two different sources. For example, imagine that R1 injects a route 
to network 123.0.0.0/8 due to both a network 123.0.0.0 command and a redistribute connected 
command. Both routes would have default weights of 32,768, and both would default to the same 
LOCAL_PREF. The two routes would then be compared at this step, with the ORIGIN code 
determining which route is best. 
The logic for the second (and only likely) case to use this step in the decision process can be 
reduced to the following:
When the same NLRI is locally injected into BGP from multiple methods, pick the route 
with the better ORIGIN PA.
The only hard part is memorizing the ORIGIN codes, and that “I” is better than “E” is better than “?”. 

Conﬁguring BGP Policies     457
Step 4: Shortest AS_PATH
Routers can easily determine the shortest AS_PATH length by using a few rules that deﬁne how 
to account for all four parts of the AS_PATH—the AS_SEQ, AS_SET, AS_CONFED_SEQ, and 
AS_CONFED_SET. Additionally, routing policies can change the number of ASNs in the 
AS_PATH. Table 13-12 summarizes the key points regarding AS_PATH length.
The typical logic at this step simply requires the router to calculate the number of ASNs in the 
AS_SEQ, and add 1 if an AS_SET exists. However, the table mentions several other features that 
impact what ASNs are used, and whether an eBGP peer adds an ASN. These additional features 
are covered next before moving on to Step 5 of the BGP decision process.
Removing Private ASNs
Private ASNs (64,512–65,535) should not be used in AS_PATHs advertised into the Internet 
beyond a single ISP. One purpose of this private range is to conserve the ASN space by assigning 
private ASNs to customers that only connect to that single ISP. Then, the ISP can simply remove 
the private ASN before advertising any routes for that customer outside its network. 
Figure 13-9 shows the typical case for using a private AS. While the concept is relatively simple, 
the conﬁguration details can be a bit surprising. 
Table 13-12
Features that Impact the Total Number of ASs in the AS_PATH Length Calculation
KEY 
POINT
Feature
Description
AS_SET
Regardless of actual length, it counts as a single ASN.
Confederations
AS_CONFED_SEQ and AS_CONFED_SET do not count at all in the 
calculation.
aggregate-address 
command
If the component subnets have different AS_PATHs, the summary route 
has only the local AS in the AS_SEQ; otherwise, the AS_SEQ contains the 
AS_SEQ from the component subnets. Also, the presence/absence of the 
as-set command option determines whether the AS_SET is included. 
neighbor remove-
private-as command
Used by a router attached to a private AS (64512–65535), causing the 
router to remove the private ASN used by the neighboring AS.
neighbor local-as no-
prepend command
Allows a router to use a different AS than the one on the router bgp 
command; with the no-prepend option, the router does not prepend any 
ASN when sending eBGP Updates to this neighbor. 
AS_PATH prepending
Using a neighbor route-map in either direction, the route-map can use 
the set as-path prepend command to prepend one or more ASNs into the 
AS_SEQ.
bgp bestpath as-path 
ignore command
Removes the AS_PATH length step from the decision tree for the local 
router.

458     Chapter 13: BGP Routing Policies
Figure 13-9
Typical Use of Private ASNs and the neighbor remove-private-as Command
Following Figure 13-9, right to left, here are the key points:
■
R6, inside the private AS, does not require any special commands.
■
R1, acting as a router in the sole ISP to which ASN 65000 is connected, lists private AS 65000 
in its BGP table for any routes learned from R6.
■
R1 needs the command neighbor R2 remove-private-as under router BGP, telling R1 to 
remove any private ASNs from AS_PATHs advertised to router R2.
Cisco IOS has several restrictions regarding whether a private AS is removed as a protection 
against causing routing loops: 
■
Private ASNs can be removed only at the point of sending an eBGP Update. 
■
If the current AS_SEQ contains both private and public ASNs, the private ASNs will not be 
removed. 
■
If the ASN of the eBGP peer is in the current AS_PATH, the private ASNs will not be 
removed, either. 
This feature works with confederations as well, with the same restrictions being applied to the 
AS_CONFED_SEQ.
AS_PATH Prepending and Route Aggregation
The concept and motivation behind the AS_PATH prepend feature is simple—impact the 
AS_PATH length decision step by increasing the length of the AS_PATH. To do so, a router simply 
conﬁgures a route map, refers to it with a neighbor route-map command, with the route map 
using the set as-path prepend asn1 asn2… command. As a result, the route map prepends 
additional ASNs to the AS_SEQUENCE.
Any ASN can be prepended, but in practice, it makes the most sense to prepend the local router’s 
ASN. The reason is that prepending some other ASN prevents that route from being advertised into 
R6
Network 6.0.0.0/8
R1
R2
6.0.0.0/8
AS_SEQ 65000
ISP 2
ASN 2
ISP 1
ASN 1
Customer:
ASN 65000
6.0.0.0/8
AS_SEQ 1
Update
Update
On R1:
neighbor r2 remove-private-as
BGP Table: 6.0.0.0/8 AS_SEQ 65000

Conﬁguring BGP Policies     459
that AS—a scenario that might not be intended. Also, if the AS_PATH needs to be lengthened by more 
than one ASN, the set command can repeat the same ASN multiple times, as shown in Example 13-9. 
Figure 13-10 shows a design depicting the use of AS_PATH prepending. R6 correctly prepends its 
own ASN 4 for routes advertised to R1 (in the top part of the ﬁgure). R6 also causes problems by 
prepending ASN 2 for the route sent to R3 (in the lower part of the ﬁgure).
Figure 13-10
Options for Prepending ASNs
While AS_PATH prepending lengthens the AS_PATH, route aggregation may actually decrease 
the AS_PATH length. Route aggregation (summarization) with the BGP aggregate-address 
command impacts the AS_PATH length in a couple of ways: 
■
The router checks the component subnets’ AS_PATH AS_SEQ values. If all the component 
subnets’ AS_SEQ values are identical, the aggregate route uses that same AS_SEQ. 
■
If the component subnets’ AS_SEQ values differ at all, the aggregating router uses a null 
AS_SEQ for the aggregate. (When advertised to an eBGP peer, the router does prepend its 
local ASN, as normal.) Of course, this process shortens the AS_PATH length.
Additionally, the aggregate-address command with the as-set option may lengthen the AS_PATH 
length calculation as well. When a router uses this command with the as-set option, and the 
aggregate empties out the AS_SEQ as described in the previous paragraph, the router adds an 
AS_SET segment to the AS_PATH. (Conversely, if the aggregate does not empty the AS_SEQ, 
the router does not create the AS_SET, as it is not needed for loop prevention in that case.) The 
AS_SET includes all ASNs of all component subnets. 
The BGP AS_PATH length calculation counts the entire AS_SET as 1, regardless of the actual length. 
Network
6.0.0.0/8
R1
6.0.0.0/8
AS_SEQ 1 4 4 4 4
ISP 1
ASN 1
Customer:
ASN 4
6.0.0.0/8
AS_SEQ 3 2 2 4
Update
6.0.0.0/8
AS_SEQ 2 2 4
Update
6.0.0.0/8
AS_SEQ 4 4 4 4
Update
R3
ISP 3
ASN 3
R2
ISP 2
ASN 2
R6
Reject the lower
route—it has AS 2
in the AS_PATH
Prepend:
3 AS 4’s to ISP1
2 AS 2’s to ISP3

460     Chapter 13: BGP Routing Policies
Example 13-9 shows examples of both AS_PATH prepending and route aggregation on the 
AS_PATH length. In the example, the familiar network of Figure 13-7 is used. The following 
features are used in the example:
■
R4 prepends route 11.0.0.0/8 with three additional ASN 4s, using an outbound route-map, 
before advertising routes into AS 123.
■
R4 and R5 both summarize 16.0.0.0/4, but R4 uses the as-set option and R5 does not. 
As a result of the second item, R3 learns both summaries, but treats the summary from R5 as 
better, because the AS_SET in R4’s route counts as 1 ASN in the AS_PATH length calculation. 
Example 13-9
AS_PATH Prepending and an Examination of Route Summarization and AS_PATH Length
! R4’s configuration shows the route-map called add3-4s for its nnnneeeeiiiigggghhhhbbbboooorrrr commands
! for R1 (10.1.14.1) and R3 (10.1.34.3). The route-map matches 11.0.0.0/8, 
! prepending three additional ASN 4s. The normal process of prepending the local AS
! before advertising over eBGP peer connection adds the 4th instance of ASN 4. As
! usual, the route-map needs a null final clause with a ppppeeeerrrrmmmmiiiitttt so that the rest
! of the routes are not affected. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    4444
    aaaaggggggggrrrreeeeggggaaaatttteeee----aaaaddddddddrrrreeeessssssss    11116666....0000....0000....0000    222244440000....0000....0000....0000    aaaassss----sssseeeetttt
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11114444....1111    rrrroooouuuutttteeee----mmmmaaaapppp    aaaadddddddd3333----4444ssss    oooouuuutttt
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    rrrroooouuuutttteeee----mmmmaaaapppp    aaaadddddddd3333----4444ssss    oooouuuutttt
!!!!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    mmmmaaaattttcccchhhh11111111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000////8888
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    aaaadddddddd3333----4444ssss    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    mmmmaaaattttcccchhhh11111111
    sssseeeetttt    aaaassss----ppppaaaatttthhhh    pppprrrreeeeppppeeeennnndddd    4444    4444    4444
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    aaaadddddddd3333----4444ssss    ppppeeeerrrrmmmmiiiitttt    22220000
! Below, first focus on 11.0.0.0/8. The highlighted route with NEXT_HOP 10.1.34.4
! (R4) has four consecutive 4s in the AS_PATH, showing the effects of the prepending
! on R4. The route through 10.1.35.5 ends up being best based on the tiebreaker 
! at Step 9. 
! Next, look at 16.0.0.0/4. The route through 10.1.34.4 is considered 
! to be AS_PATH length 2, but the length through 10.1.35.5 is only 1. The 
! route to 16.0.0.0/4 through NEXT_HOP 10.1.35.5 is chosen over the route through
! 10.1.15.5 because it is eBGP, versus iBGP for the route through 10.1.15.5.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  11.0.0.0         10.1.36.6       4294967294             0 65000 1 33333 10 200 44 i
* i                 10.1.16.6       4294967294             0 65000 1 33333 10 200 44 i
*                   10.1.34.4       4294967294             0 4 4 4 4 1 33333 10 200 44 i
*>                  10.1.35.5       4294967294             0 5 1 33333 10 200 44 i
*  16.0.0.0/4       10.1.34.4       4294967294             0 4 {1,404,303,202} ?
*>                  10.1.35.5       4294967294             0 5 i
* i                 10.1.15.5       4294967294             0 5 i

Conﬁguring BGP Policies     461
Step 5: Best ORIGIN PA
The well-known mandatory BGP ORIGIN PA characterizes a route based on how it was injected 
into BGP. The ORIGIN is either IGP (i), EGP (e), or incomplete (?). 
The actual BGP decision process for the ORIGIN code is quite simple. First, an ORIGIN of EGP 
(e) should not occur today, because EGP is not even supported in current IOS revisions. So, the 
logic reduces to the following:
If the set of routes to reach a single NLRI includes only one route of ORIGIN code 
IGP (i), and all the others as incomplete (?), then the route with ORIGIN i is the best 
route.
BGP routing policies may set the ORIGIN code explicitly by using the set origin route map 
subcommand, although the earlier steps in the BGP decision process are typically better choices 
for conﬁguring BGP policies. BGP determines the ORIGIN code based on the method used to 
inject the routes, along with the options used with the aggregate-address command. 
Chapter 12’s section titled “The ORIGIN Path Attribute” describes more detail about the ORIGIN 
PA and how NLRI are assigned an ORIGIN code.
Step 6: Smallest Multi-Exit Discriminator
The purpose of the MED (or MULTI_EXIT_DISC) is to allow routers in one AS to tell routers in a 
neighboring AS how good a particular route is. In fact, because of how MED works, it is often called 
the BGP metric, even though it is not close to the top of the BGP decision process. Figure 13-11 
shows a classic case for the use of MED, where a customer has two links connecting it to a single 
ISP. The ISP, aware of its best routes for 11.0.0.0/8 and 12.0.0.0/8, can set MED so that the customer 
routes packets to the eBGP peer that is closest to the destination network.
The ISP, knowing its best route to reach 11.0.0.0/8 is through R5, conﬁgures R5 to set a low MED 
for that preﬁx, and R7 to set a higher MED for the same preﬁx. As a result, the BGP routers in 
customer AS 123 choose the route through the top peer connection. The customer could then use 
the route through the lower link to R7 if the top connection failed.
Figure 13-11 shows the classic topology—a customer using a single ISP, but with multiple links 
to the ISP. Many customers want redundant ISPs as well, or at least connections to multiple 
autonomous systems controlled by a single, large ISP. MED can also be used in such cases, but 
it requires the multiple ISPs or multiple ASs in the same ISP to use the same policy when 
determining the MED values to set. For example, two ISPs might agree that because one ISP 
has more link bandwidth to a certain range of BGP preﬁxes, that ISP will set a lower MED for 
those NLRIs.
KEY 
POINT

462     Chapter 13: BGP Routing Policies
Figure 13-11
Typical Use of MED
Table 13-13 summarizes the key points regarding MED.
Table 13-13
Key Features of MED
KEY 
POINT
Feature
Description
Is it a PA?
Yes, optional nontransitive
Purpose
Allows an AS to tell a neighboring AS the best way to forward packets 
into the ﬁrst AS
Scope
Advertised by one AS into another, propagated inside the AS, but not sent 
to any other ASs
Default 
0
Changing the default
Using the bgp bestpath med missing-as-worst BGP subcommand; sets it 
to the maximum value
Range
0 through 4,294,967,295 (232 – 1)
Which is best?
Smaller is better
Conﬁguration
Via neighbor route-map out command, using the set metric command 
inside the route-map
ISP
ASN 5
Customer
ASN 123
R5
R3
R2
R7
Packets for 11.0.0.0/8
—send over top link
due to lowest MED
R5 Injects Routes:
11.0.0.0/8 MED 10
Route to 11.0.0.0/8
R7 Injects Routes:
11.0.0.0/8 MED 20
R1
Best Route
BGP Update
BGP Peer

Conﬁguring BGP Policies     463
Conﬁguring MED: Single Adjacent AS
Example 13-10 shows an example MED conﬁguration that matches Figure 13-11, with R5 and R7 
setting the MED for 11.0.0.0/8 to 10 and 20, respectively. 
It is important that both R5 and R7 set the MED for 11.0.0.0/8. If R5 had set MED to 10, and R7 
had done nothing, the router through R7 would have been the best route. R1 and R3 would have 
used their assumed default setting of 0 for MED for the route through R1 and R7, and, as with IGP 
metrics, smaller is better with MED. A better default for MED can be set by using the bgp 
bestpath med missing-as-worst BGP subcommand, which resets a router’s default MED to the 
largest possible MED value, instead of the lowest. Note that it is important that all routers in the 
same AS either use the default of 0 or conﬁgure this command; otherwise, routing choices will be 
affected.
Example 13-10
Classical MED Example Between Two ASs
! The pertinent R5 configuration follows. R5 simply matches 11.0.0.0/8 and sets
! the metric to 10. The route-map includes a default ppppeeeerrrrmmmmiiiitttt    aaaannnnyyyy clause at the end 
! to avoid affecting other routes. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    5555
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33335555....3333    rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----mmmmeeeedddd    oooouuuutttt
!!!!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000////8888
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----mmmmeeeedddd    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111
    sssseeeetttt    mmmmeeeettttrrrriiiicccc    11110000
rrrroooouuuutttteeee----mmmmaaaapppp    sssseeeetttt----mmmmeeeedddd    ppppeeeerrrrmmmmiiiitttt    22220000
! R7’s configuration is not shown, but it is basically the same regarding the
! setting of the MED. However, R7 sets the MED to 20.
! R1 lists routes with R5 (10.1.35.5) and R7 (10.1.17.7) as NEXT_HOP; the route
! through R5 is best due to the lower MED.
R1# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*>i11.0.0.0         10.1.35.5               10    100      0 5 1 33333 10 200 44 i
*                   10.1.17.7               20             0 5 1 33333 10 200 44 i
*> 12.0.0.0         10.1.35.5                              0 5 1 33333 10 200 44 i
* i                 10.1.17.7                0    100      0 5 1 33333 10 200 44 i
! R3 sees only the MED 10 route. R1’s best route to NEXT_HOP 10.1.35.5 is through 
! R3, so R1 did not advertise its best route to 11.0.0.0/8 to iBGP peer R3.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.35.5               10             0 5 1 33333 10 200 44 i
*> 12.0.0.0         10.1.35.5                              0 5 1 33333 10 200 44 i
* i                 10.1.17.7                0    100      0 5 1 33333 10 200 44 i
KEY 
POINT

464     Chapter 13: BGP Routing Policies
Conﬁguring MED: Multiple Adjacent Autonomous Systems
By default, a Cisco router ignores MED when the multiple routes to a single NLRI list different 
neighboring ASNs. This default action makes sense—normally you would not expect two 
different neighboring ISPs to have chosen to work together to set MEDs. To override this default 
and consider the MED in all cases, a router needs to conﬁgure the bgp always-compare-med 
BGP subcommand. If used on one router, all routers inside the same AS should also use the bgp 
always-compare-med command, or routing loops may result.
Additionally, some Cisco documents imply that the internal BGP decision process for the MED 
may be different depending on the order of the entries in the BGP table. Interestingly, BGP lists 
the table entries from newest (most recently learned) to oldest in the output of the show ip bgp 
and show ip bgp preﬁx commands. Depending on that order, in some cases in which the 
competing routes for the same NLRI have different MEDs from different autonomous systems, 
the order of the entries impacts the ﬁnal choice of the best route. In part, the difference results 
from the fact that Cisco IOS (by default) processes the list sequentially—which means it processes 
the ﬁrst pair of routes (newest), picks the best of those two, then compares that one with the next 
newest, and so on.
Cisco solved this nondeterministic behavior for MED processing problem by creating an alternative 
process for analyzing and making the MED decision. With this new process, BGP processes 
the routes per adjacent AS, picking the best from each neighboring AS, and then comparing 
those routes. This logic provides a deterministic choice based on MED—in other words, it 
removes the possibility of BGP picking a different route based on the order of the routes in the 
BGP table. To enable this enhanced logic, add the bgp deterministic-med command to the routers 
in the same AS. In fact, Cisco recommends this setting for all new BGP implementations.
The Scope of MED
The MED PA is not intended to be advertised outside the AS that heard the MED in an incoming 
BGP Update. Typically, and as shown in the examples in this section, the MED can be set in an 
outbound route map by a router in one AS to inﬂuence the BGP decision process in another AS. 
So, the MED value is set by routers in one AS, and learned by routers in another AS. However, 
after reaching the other AS, the MED is advertised inside the AS, but not outside the AS. For 
example, in Figure 13-11, R5 and R7 set the MED, and advertise it into AS 123. However, if 
routers in AS 123 had any other eBGP connections to other ASNs, they would advertise the NLRI, 
but they would not include the MED value.
MED can also be set via inbound route maps, although that is not the intended design with 
which to use MED. When setting MED via an inbound route map, the MED is indeed set. The 
router can advertise the MED to iBGP peers. However, the MED is still not advertised outside 
the local AS. 

Conﬁguring BGP Policies     465
Step 7: Prefer Neighbor Type eBGP over iBGP
This step is rather simple, and needs very little elucidation. Keeping in mind that the goal is a 
single best route for each NLRI, this decision point simply looks to see if a single eBGP route 
exists. If so, that route is chosen. If multiple eBGP routes exists, this decision point cannot 
determine the best route.
Interestingly, BGP uses this decision point frequently when two or more enterprise routers 
connect to the same ISP. Each border BGP router in the enterprise receives the same preﬁxes 
with the same AS_PATH lengths from the ISP, and then these border BGP routers advertise 
these routes to their iBGP peers. So, each enterprise border router knows of one eBGP route to 
reach each preﬁx, and one or more iBGP routes to the same preﬁx learned from that enterprise’s 
other border routers. With no routing policies conﬁgured, the routes tie on all decision points up 
to this one, including AS_PATH length, because all the preﬁxes were learned from the same 
neighboring ISP. The decision process reaches this step, at which point the one eBGP route is 
picked as the best route.
Step 8: Smallest IGP Metric to the NEXT_HOP 
This step again requires little explanation. The router looks for the route that would be used to 
reach the NEXT_HOP listed in each BGP table entry for a particular preﬁx. It is mentioned here 
just to complete the list.
The maximum-paths Command and BGP Decision Process Tiebreakers
The goal of the BGP decision tree is to ﬁnd the one best BGP route to each NLRI, from that 
router’s perspective. That router then considers only its best routes for advertising to other routers, 
restricting those routes based on AS_PATH loop prevention and routing policy conﬁguration. That 
router also attempts to add that best route, and that best route only, to its IP routing table. In fact, 
as long as another routing source has not found a route to the same preﬁx, with a better 
administrative distance, the best BGP route is placed into that router’s routing table.
If BGP has not chosen a best route for a particular NLRI after Steps 0 through 8, then multiple 
routes tie for being the best route. At this point, BGP needs to make two important decisions:
■
Which route is best—BGP uses two tiebreakers, discussed next, to determine which route is 
best.
■
Whether to add multiple BGP routes for that NLRI to the IP routing table—BGP 
considers the setting of the maximum-paths command to make this decision, as described 
after the discussion of Steps 9 and 10.
Even if BGP adds to the IP routing table multiple BGP routes to the same preﬁx, it still picks only 
one as the best route in the BGP table.

466     Chapter 13: BGP Routing Policies
Step 9: Lowest BGP Router ID of Advertising Router (with One Exception)
The ﬁrst tiebreaker is to pick the route with the lowest RID. The logic is actually two steps, as 
follows:
1.
Examine the eBGP routes only, picking the route advertised by the router with the lowest RID.
2.
If only iBGP routes exist, pick the route advertised by the router with the lowest RID.
These straight-forward rules are followed in some cases, but not in some others. The exception to 
this rule occurs when BGP already has a best route to the NLRI, but it has learned new BGP 
information from other routers, including a new BGP route to reach a previously known preﬁx. 
The router then applies its BGP decision process again to decide whether to change its opinion of 
which route is best for that NLRI. If the decision process does not determine a best route by this 
step, this step uses the following default logic:
If the existing best route is an eBGP route, do not replace the existing best route, even if 
the new route has a smaller RID.
The reasoning is that replacing the route could result in route ﬂaps, so keeping the same route is 
ﬁne. This behavior can be changed so that the lowest RID is always used, by conﬁguring the bgp 
bestpath compare-routerid BGP subcommand. Note that this exception only applies to eBGP 
routes; if the currently best route is an iBGP route, the decision is simply based on the lowest 
advertising router’s RID.
Step 10: Lowest Neighbor ID
If Step 9 did not break the tie, then the router has at least two neighbor commands that point to 
the same router, and that router happens to have the lowest RID of all current neighbors advertising 
the NLRI in question. Typically, if redundancy exists between two routers, the conﬁguration uses 
loopback interfaces, a single neighbor command, and the neighbor ebgp-multihop command if 
the neighbor is an eBGP neighbor. However, using a pair (or more) of neighbor commands 
pointing to a single neighboring router is a valid conﬁguration option; this ﬁnal tiebreaker provides 
a way to break ties for this case. 
At this point, the router looks at the IP addresses on the neighbor commands corresponding to all 
the neighbors from which the route was received, and it picks the lowest neighbor IP address. Note 
that, as usual, it considers all routes again at this step, so it may not pick the neighboring router 
with the lowest RID at this point.
The BGP maximum-paths Command
BGP defaults the maximum-paths command to a setting of 1—in other words, only the BGP best 
route in the BGP table could possibly be added to the IP routing table. However, BGP will consider 
adding multiple entries to the IP routing table, for the same NLRI, under certain conditions—
conditions that differ based on whether the best route is an eBGP route or an iBGP route. 

Conﬁguring BGP Policies     467
First, consider eBGP routes. The following rules determine if and when a router will add multiple 
eBGP routes to the IP routing table for a single NLRI:
1.
BGP must have had to use a tiebreaker (Step 9 or 10) to determine the best route. 
2.
The maximum-paths number command must be conﬁgured to something larger than the 
default of 1.
3.
Only eBGP routes whose adjacent ASNs are the same ASN as the best route are considered 
as candidates.
4.
If more candidates exist than that called for with the maximum-paths command, the 
tiebreakers of Steps 9 and 10 determine the ones to use.
Although the list is detailed, the general idea is that the router can trust multiple routes, but only 
if the packets end up in the same adjacent AS. Also, BGP must restrict itself to not use multipath 
if the best route was found via Steps 0 through 8 of the decision process, because forwarding based 
on another route could cause loops.
Next, consider iBGP routes. The rules for iBGP have some similarities with eBGP, and a few 
differences, as follows:
1.
Same rule as eBGP rule 1.
2.
The maximum-paths ibgp number command deﬁnes the number of possible IP routes, 
instead of the maximum-paths number command used for eBGP.
3.
Only iBGP routes with differing NEXT_HOP settings are considered as candidates.
4.
Same rule as eBGP rule 4.
The rationale is similar to eBGP with regard to most of the logic. Additionally, it does not help to 
add multiple IP routes if the NEXT_HOP settings are equal, so BGP performs that additional 
check.
Finally, the maximum-paths eibgp number command seemingly would apply to both iBGP and 
eBGP routes. However, this command only applies when MPLS is in use. Table 13-14 summarizes 
the key commands related to BGP multipath.
Table 13-14
BGP maximum-paths Command Options
Command
Conditions for Use
maximum-paths number
eBGP routes only
maximum-paths ibgp number
iBGP routes only
maximum-paths eibgp number
Both types, but MPLS only
KEY 
POINT
KEY 
POINT
KEY 
POINT

468     Chapter 13: BGP Routing Policies
BGP Communities
The BGP COMMUNITY PA provides a mechanism by which to group routes so that routing 
policies can be applied to all the routes with the same community. By marking a set of routes with 
the same COMMUNITY string, routers can look for the COMMUNITY string and then make 
policy decisions—like setting some PA that impacts the BGP decision process, or simply ﬁltering 
the routes. BGP communities are powerful in that they allow routers in one AS to communicate 
policy information to routers that are one or more autonomous systems distant. In fact, because 
the COMMUNITY PA is an optional transitive PA, it can pass through autonomous systems 
that do not even understand the COMMUNITY PA, and then still be useful at another 
downstream AS.
Figure 13-12 shows an example of one way in which communities can be used. The goal with this 
design is to have the engineers in ASNs 4 and 5 work together to decide which of them has the 
best route to reach each preﬁx, and then somehow tell the routers in ASN 123. That may sound 
familiar—that is exactly the motivation behind using MED, as shown in Figure 13-11. However, 
MED is relatively far into the BGP decision process, even after shortest AS_PATH. A better design 
might be to set the COMMUNITY PA, and then let the routers in ASN 123 react to the 
COMMUNITY string and set LOCAL_PREF based on that value, because LOCAL_PREF is 
considered early in the BGP decision process.
Figure 13-12
Using COMMUNITY to Augment Routing Policies
Figure 13-12 depicts the following steps:
1.
The engineers at AS 4 and AS 5 agree as to which preﬁxes are best reached by each AS. 
ASN 4
ASN 123
R4
R3
ASN 5
R5
R1
11/8: Comm = 1
21/8: Comm = 2
3
1
11/8: Comm = 2
21/8: Comm = 1
2
2
To 11/8
4
4
To 21/8
I’m Best for
Reaching 11.0.0.0/8,
So Set Community = 1
1
I’m Best for
Reaching 21.0.0.0/8,
So set Community = 1
If COMMUNITY = 1,
Set LOCAL_PREF = 300
If COMMUNITY = 2,
Set LOCAL_PREF = 200
Best Route
BGP Update
BGP Peer
R2

BGP Communities     469
2.
They then conﬁgure outbound route maps on their respective neighbor connections to AS 123, 
setting COMMUNITY to 1 for routes for which they are the best path, and setting 
COMMUNITY to 2 for some other routes. 
3.
R1 and R3 receive the Updates, match the NLRI based on the COMMUNITY, and set 
LOCAL_PREF to a large value for routes whose COMMUNITY was set to 1. 
4.
The LOCAL_PREF settings impact the BGP choice for the best routes.
This design includes several advantages over some of the options covered earlier in the chapter. It 
includes the best aspects of using LOCAL_PREF, helping AS 123 decide which neighboring AS 
to use to reach each preﬁx. However, it puts the choice of which routes should be reached through 
AS 4 and AS 5 into the hands of the folks running AS 4 and AS 5. If the AS 4 or AS 5 topology 
changes, link speeds increase, or other changes occur, the route maps that set the COMMUNITY 
in AS 4 and AS 5 can be changed accordingly. No changes would be required inside AS 123, 
because it already simply looks at the COMMUNITY string. Assuming that AS 123 is an 
enterprise, and AS 4 and AS 5 are ISPs, the ISPs can make one set of changes and impact the 
routing choices of countless customers.
Example 13-11 shows the conﬁguration matching the scenario of Figure 13-12. The conﬁguration 
follows mostly familiar commands and reasoning, with two additional features: 
■
R4 and R5 (AS 4 and AS 5) must use the neighbor send-community BGP subcommand, 
which tells BGP to include the COMMUNITY PA in the Update. Without that command, the 
Update does not even include the COMMUNITY PA. 
■
R1 and R3 (AS 123) need to match NLRI based on the received COMMUNITY values, so 
they must conﬁgure community lists that match the COMMUNITY, by using the ip 
community-list command.
Example 13-11
Setting COMMUNITY, and Reacting to COMMUNITY to Set LOCAL_PREF 
! R4 must add the nnnneeeeiiiigggghhhhbbbboooorrrr    sssseeeennnndddd----ccccoooommmmmmmmuuuunnnniiiittttyyyy command, otherwise it will not include
! the COMMUNITY PA in Updates sent to R3. The route-map matches 11/8, and sets 
! COMMUNITY to 1, and matches 21/8 and sets COMMUNITY to 2. 
rrrroooouuuutttteeeerrrr    bbbbggggpppp    4444
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    sssseeeennnndddd----ccccoooommmmmmmmuuuunnnniiiittttyyyy    bbbbooootttthhhh
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....3333    rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    oooouuuutttt
!!!!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000////8888
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    22221111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    22221111....0000....0000....0000////8888
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    1111
!!!!
continues

470     Chapter 13: BGP Routing Policies
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    22220000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    22221111
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    2222
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    33330000
! R5 has essentially the same configuration, except that R5 sets COMMUNITY to 1
! for 21/8 and to 2 for 11/8—the opposite of R4.
rrrroooouuuutttteeeerrrr    bbbbggggpppp    5555
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11115555....1111    sssseeeennnndddd----ccccoooommmmmmmmuuuunnnniiiittttyyyy
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....11115555....1111    rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    oooouuuutttt
!!!!
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    11111111....0000....0000....0000////8888
iiiipppp    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    22221111    sssseeeeqqqq    5555    ppppeeeerrrrmmmmiiiitttt    22221111....0000....0000....0000////8888
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    11111111
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    2222
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    22220000
    mmmmaaaattttcccchhhh    iiiipppp    aaaaddddddddrrrreeeessssssss    pppprrrreeeeffffiiiixxxx----lllliiiisssstttt    22221111
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    1111
!!!! 
rrrroooouuuutttteeee----mmmmaaaapppp    ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    33330000
! R3 Config: Next, R3 matches on the received COMMUNITY strings and sets 
! LOCAL_PREF using a route-map called react-to-comm. The only way to match the 
! COMMUNITY is to refer to an iiiipppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt, which then has the matching 
! parameters.  
rrrroooouuuutttteeeerrrr    bbbbggggpppp    111122223333
    nnnneeeeiiiigggghhhhbbbboooorrrr    11110000....1111....33334444....4444    rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    iiiinnnn
!!!!
iiiipppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    1111    ppppeeeerrrrmmmmiiiitttt    1111
iiiipppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    2222    ppppeeeerrrrmmmmiiiitttt    2222
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    ccccoooommmmmmmmuuuunnnniiiittttyyyy    1111
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    333300000000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    22220000
    mmmmaaaattttcccchhhh    ccccoooommmmmmmmuuuunnnniiiittttyyyy    2222
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    222200000000
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    33330000
! Not shown—R1 Config. R1’s config matches R3’s in every way, except for the
! fact that the inbound route-map is applied for the nnnneeeeiiiigggghhhhbbbboooorrrr command pointing
! to R5 (10.1.15.5).
! R3 chooses its best path to 11/8 with NEXT_HOP of R4 (10.1.34.4), as a result
! of R3’s assignment of LOCAL_PREF 300, which in turn was a result of the Update
Example 13-11
Setting COMMUNITY, and Reacting to COMMUNITY to Set LOCAL_PREF (Continued)

BGP Communities     471
! from R4 listing 11/8 as COMMUNITY 1. R3’s best route to 12/8 points to NEXT_HOP
! R5 (10.1.15.1), which happens to point back through R1, because R1 received an 
! Update from R5 for 21/8 listing COMMUNITY 1, and then set LOCAL_PREF to 300.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.34.4       4294967294    300      0 4 1 33333 10 200 44 i
* i12.0.0.0         10.1.15.5       4294967294    100      0 5 1 33333 10 200 44 i
*>                  10.1.34.4       4294967294             0 4 1 33333 10 200 44 i
*>i21.0.0.0         10.1.15.5       4294967294    300      0 5 1 404 303 202 i
*                   10.1.34.4       4294967294    200      0 4 1 404 303 202 i
! R3 now lists its BGP table entries that have COMMUNITY settings that include
! 1 or 2. Note that both commands only list the routes learned directly from R4.
! If R1 had configured a nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    sssseeeennnndddd----ccccoooommmmmmmmuuuunnnniiiittttyyyy command, R3 would have
! additional entries using COMMUNITY strings 1 and 2. However, for this design,
! the COMMUNITY strings do not need to be advertised to iBGP peers inside AS 123,
! as R1 and R3 have already reacted to the communities to set the LOCAL_PREF.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy    1111
BGP table version is 37, local router ID is 3.3.3.3
Status codes: s suppressed, d damped, h history, * valid, > best, i—internal,
              r RIB-failure, S Stale
Origin codes: i—IGP, e—EGP, ?—incomplete
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.34.4       4294967294    300      0 4 1 33333 10 200 44 i
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy    2222    ||||    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*  21.0.0.0         10.1.34.4       4294967294    200      0 4 1 404 303 202 i
! The COMMUNITY can be seen with the sssshhhhoooowwww    iiiipppp    bbbbggggpppp    prefix command, as seen below. 
! Note that the route learned from R1 (1.1.1.1) does not list a COMMUNITY, as R1 
! did not configure a nnnneeeeiiiigggghhhhbbbboooorrrr    3333....3333....3333....3333    sssseeeennnndddd----ccccoooommmmmmmmuuuunnnniiiittttyyyy command.  
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    22221111....0000....0000....0000
BGP routing table entry for 21.0.0.0/8, version 35
Paths: (3 available, best #1, table Default-IP-Routing-Table)
Multipath: eBGP
  Advertised to update-groups:
     2         
  5 1 404 303 202, (received & used)
    10.1.15.5 (metric 2681856) from 1.1.1.1 (1.1.1.1)
      Origin IGP, metric 4294967294, localpref 300, valid, internal, best
  4 1 404 303 202
    10.1.34.4 from 10.1.34.4 (4.4.4.4)
      Origin IGP, metric 4294967294, localpref 200, valid, external
      Community: 2
  4 1 404 303 202, (received-only)
    10.1.34.4 from 10.1.34.4 (4.4.4.4)
      Origin IGP, metric 4294967294, localpref 100, valid, external
      Community: 2
Example 13-11
Setting COMMUNITY, and Reacting to COMMUNITY to Set LOCAL_PREF (Continued)

472     Chapter 13: BGP Routing Policies
Matching COMMUNITY with Community Lists
Cisco originally created communities as a proprietary feature, treating the 32-bit COMMUNITY 
as a decimal value (as shown in Example 13-11). When the COMMUNITY PA was added to the 
BGP standard RFC 1997, the 32-bit COMMUNITY was formatted as AA:NN, where AA is a 16-
bit number to potentially represent an ASN, and NN represents a value as set by that ASN. 
However, the COMMUNITY PA remained a 32-bit number. 
Cisco routers can use either the original format or the RFC 1997 format for the COMMUNITY 
PA. By default, show commands list the decimal value; to use the AA:NN format, you should 
conﬁgure the global command ip bgp-community new-format. Also, the set command, as used 
with route maps, can use either the old decimal format or the newer AA:NN format; however, the 
absence or presence of the ip bgp-community new-format command dictates whether the output 
of a show route-map command lists the values as decimal or as AA:NN, respectively. For this 
reason, in practice it makes sense to choose and use a single format, typically the newer format 
today. 
The COMMUNITY PA also supports multiple entries. For example, the set community 10 20 30 
command, applied within a route map, would actually create a COMMUNITY with all three 
values. In that case, any existing COMMUNITY value would be replaced with 10, 20, and 30. 
However, the set community 10 20 30 additive command would add the values to the existing 
COMMUNITY string.
As a result of the multi-entry COMMUNITY, and as a result of the literal “:” inside the 
COMMUNITY string when using the new format, Cisco IOS requires some more sophisticated 
matching capabilities as compared with IP ACLs. For example, community lists can list multiple 
values on the same ip community-list command; to match such a command, the COMMUNITY 
must include all the values. (The COMMUNITY values are unordered, so the order in which the 
values are listed in the community list does not matter.) Also, extended community lists (numbered 
100–199) allow matching of the COMMUNITY PA with regular expressions. Table 13-15 
summarizes some of the key points related to community lists.
Example 13-12 shows a few example community lists just to show the logic. In the example, R4 
has set multiple COMMUNITY values for preﬁxes 11/8 and 12/8. The show ip bgp community-list 
Table 13-15
Comparing Standard and Extended Community List
KEY 
POINT
Feature
Standard
Extended
List numbers
1–99
100–99
Can match multiple communities in a single command?
Yes
Yes
Can match the COMMUNITY PA with regular expressions
No
Yes
More than 16 lines in a single list?
No
Yes

BGP Communities     473
list-number command is then used to show whether a match would be made. This command lists 
the entries of the BGP table that match the associated COMMUNITY PA, much like the show 
ip bgp regex command examines the AS_PATH PA.
Removing COMMUNITY Values
In some cases, a routing policy may need to remove one string from the COMMUNITY PA, or 
even delete the entire COMMUNITY PA. This can be accomplished with a route map as well, 
using the set command. Removing the entire COMMUNITY is relatively simple: include the set 
community none command in a route-map clause, and all routes matched by that clause will 
have their COMMUNITY PA removed. For example, Example 13-11 lists a route-map react-to-
comm route map on each router. In that design, once the received COMMUNITY string on R1 
and R3 was used to match the correct routes and set the LOCAL_PREF values, the COMMUNITY 
Example 13-12
Example of Matching with IP Community Lists
R3# sssshhhhoooowwww    iiiipppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    
Community standard list 2
     permit 0:1234
Community standard list 3
     permit 0:1212 8:9
Community (expanded) access list 111
    permit 0:12.*
! 11/8’s COMMUNITY string is listed next, followed by 12/8’s COMMUNITY string.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    11111111....0000....0000....0000    |    iiiinnnncccclllluuuuddddeeee    CCCCoooommmmmmmmuuuunnnniiiittttyyyy
      Community: 0:1212 0:1234 8:9 8:12 12:9 12:13
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    11112222....0000....0000....0000    |    iiiinnnncccclllluuuuddddeeee    CCCCoooommmmmmmmuuuunnnniiiittttyyyy
      Community: 0:1212 8:12 8:13
! List 2 should match only 11/8, and not 12/8, as only 11/8 has 0:1234 as one of
! the values.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    2222    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.34.4       4294967294             0 4 1 33333 10 200 44 i
! Both 11/8 and 12/8 match the 0:1212 listed in list 3, but list 3 has two 
! values configured. The list uses a logical AND between the entries, and only 
! 11/8 has matching values for both communities.
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    3333    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.34.4       4294967294             0 4 1 33333 10 200 44 i
! List 111 matches any COMMUNITY string with one entry beginning with 0:12, 
! followed by any additional characters. 11/8 matches due to the 0:1234, and 12/8
! matches due to the 0:1212. COMMUNITY values 0:12, 0:123, and other would also
! have matched. 
R3# sssshhhhoooowwww    iiiipppp    bbbbggggpppp    ccccoooommmmmmmmuuuunnnniiiittttyyyy----lllliiiisssstttt    111111111111    |    bbbbeeeeggggiiiinnnn    NNNNeeeettttwwwwoooorrrrkkkk
   Network          Next Hop            Metric LocPrf Weight Path
*> 11.0.0.0         10.1.34.4       4294967294             0 4 1 33333 10 200 44 i
*> 12.0.0.0         10.1.34.4       4294967294             0 4 1 33333 10 200 44 i

474     Chapter 13: BGP Routing Policies
PA was no longer needed. The revised route map in Example 13-13 simply removes the 
COMMUNITY at that point.
A route map can also remove individual COMMUNITY strings by using the set comm-list 
community-list-number delete command. This command tells the route map to match routes based 
on the community list, and then delete the COMMUNITY strings listed in the community list. 
(The referenced community list can contain only one COMMUNITY string per ip community-
list command in this case.)
Filtering NLRI Using Special COMMUNITY Values
Routers can use route maps to ﬁlter NLRI from being added to the BGP table, or from being sent 
in Updates to other routers. These route maps can match a BGP route’s COMMUNITY by using 
the match community {standard-list-number | expanded-list-number | community-list-name 
[exact]} command, which in turn references a community list.
Additionally, BGP includes several reserved values for the COMMUNITY PA that allow route 
ﬁltering to occur, but with less effort than is required with community lists and route maps. These 
special COMMUNITY values, once set, affect the logic used by routers when making decisions 
about to which BGP peers they will advertise the route. The values are listed in Table 13-16.
Example 13-13
Removing the Entire COMMUNITY PA Once It Is No Longer Needed
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    11110000
    mmmmaaaattttcccchhhh    ccccoooommmmmmmmuuuunnnniiiittttyyyy    1111
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    333300000000
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    nnnnoooonnnneeee
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    22220000
    mmmmaaaattttcccchhhh    ccccoooommmmmmmmuuuunnnniiiittttyyyy    2222
    sssseeeetttt    llllooooccccaaaallll----pppprrrreeeeffffeeeerrrreeeennnncccceeee    222200000000
    sssseeeetttt    ccccoooommmmmmmmuuuunnnniiiittttyyyy    nnnnoooonnnneeee
!!!!
rrrroooouuuutttteeee----mmmmaaaapppp    rrrreeeeaaaacccctttt----ttttoooo----ccccoooommmmmmmm    ppppeeeerrrrmmmmiiiitttt    33330000
Table 13-16
COMMUNITY Values Used Speciﬁcally for NLRI Filtering
KEY 
POINT
Name
Value
Meaning
NO_EXPORT
FFFF:FF01
Do not advertise outside this AS. It can be advertised to other 
confederation autonomous systems.
NO_ADVERT
FFFF:FF02
Do not advertise to any other peer.
LOCAL_AS1
FFFF:FF03
Do not advertise outside the local confederation sub-AS.
1 LOCAL_AS is the Cisco term; RFC 1997 defines this value as NO_EXPORT_SUBCONFED.

BGP Communities     475
A route with COMMUNITY NO_EXPORT is not advertised outside an AS. This value can be 
used to prevent an AS from being a transit AS for a set of preﬁxes. For example, a router in AS 1 
could advertise an eBGP route into AS 2 with NO_EXPORT set. The routers inside AS 2 would 
then advertise the route inside AS 2 only. By not advertising the route outside AS 2, AS 2 cannot 
become a transit AS for that preﬁx. Note that the routers inside AS 2 do not have to conﬁgure a 
route map to prevent the route from exiting AS 2. However, the iBGP peers inside AS 2 must 
enable COMMUNITY using the neighbor send-community command. 
The LOCAL_AS COMMUNITY value performs a similar function as NO_EXPORT, put just 
inside a single confederation sub-AS.
The NO_ADVERT COMMUNITY string may seem a bit unusual at ﬁrst glance. However, it 
allows one router to advertise a preﬁx to a peer, with the intent that the peer will not advertise the 
route. 
Finally, there are a few operational considerations to note regarding these COMMUNITY values. 
First, a router receiving any of these special communities can match them using an ip community-
list command with obvious keywords for all three values. Additionally, a router can use a route 
map to match and then remove these COMMUNITY strings—in effect, ignoring the dictate to 
limit the scope of advertisement of the routes. Finally, routes with these settings can be seen with 
commands like show ip bgp community no-export, with similar options NO_ADVERT and 
LOCAL_AS.

476     Chapter 13: BGP Routing Policies
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” section of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with a Key Point icon.
Table 13-17 lists some of the RFCs for BGP whose concepts were covered in this chapter. 
Table 13-18 lists some of the relevant Cisco IOS commands related to the topics in this chapter.
Table 13-17
Protocols and Standards for Chapter 13
Topic
Standard
BGP-4
RFC 1771
The NOPEER Community 
RFC 3765
BGP Route Reﬂection
RFC 1966
BGP Communities 
RFC 1997
Table 13-18
Command Reference for Chapter 13 
Command
Command Mode and Description
bgp always-compare-med
BGP mode; tells the router to compare MED even if the 
neighboring ASNs are different
bgp bestpath med confed
BGP mode; tells the router to consider MED for choosing 
routes through different confederation sub-ASs
bgp bestpath med missing-as-worst
BGP mode; resets the default MED from 0 to the 
maximum (232 – 1)
bgp default local-preference number
BGP mode; sets the default LOCAL_PREF value
bgp deterministic-med
BGP mode; tells IOS to process MED logic based on 
neighboring AS, rather than on the order in which the 
routes were learned
bgp maxas-limit number
BGP mode; tells the router to discard routes whose 
AS_PATH length exceeds this setting

Foundation Summary     477
Command
Command Mode and Description
clear ip bgp {* | neighbor-address | peer-
group-name} [soft [in | out]]
EXEC mode; clears the BGP process, or neighbors, 
optionally using soft reconﬁguration
distribute-list acl-number | preﬁx list-
name in | out
BGP mode; deﬁnes a BGP distribution list (ACL or preﬁx 
list) for ﬁltering routes
ip as-path access-list access-list-number 
{permit | deny} as-regexp
Global conﬁg; creates entries in AS_PATH access lists used 
in matching existing AS_PATH values
ip bgp-community new-format
Global conﬁg; tells IOS to display and interpret
the COMMUNITY PA in the RFC 1997 format,
AA:NN
ip community-list {standard | standard 
list-name {deny | permit} [community-
number] [AA:NN] [internet] [local-AS] 
[no-advertise] [no-export]} | {expanded | 
expanded list-name {deny | permit} 
regexp}
Global conﬁg; creates entries in a community list used in 
matching existing COMMUNITY values
maximum-paths number
BGP mode; sets the number of eBGP routes that can be 
added to the IP routing table
maximum-paths eibgp number [import 
number]
BGP mode; sets the number of eBGP and iBGP routes 
that can be added to the IP routing table when using 
MPLS
maximum-paths ibgp number
BGP mode; sets the number of iBGP routes that can be 
added to the IP routing table
neighbor {ip-address | peer-group-
name} distribute-list {access-list-
number | expanded-list-number | access-
list-name | preﬁx-list-name} {in | out}
BGP mode; identiﬁes a distribute list used to ﬁlter NLRI 
being sent to or received from the neighbor
neighbor {ip-address | peer-group-
name} ﬁlter-list access-list-number {in | 
out}
BGP mode; identiﬁes an AS_PATH access list used to ﬁlter 
NLRI by matching the AS_PATH PA
neighbor {ip-address | peer-group-
name} local-as as-number [no-prepend]
BGP mode; deﬁnes an alternate ASN to be prepended in 
the AS_PATH of sent eBGP Updates, instead of the ASN 
listed in the router bgp command
neighbor {ip-address | peer-group-
name} preﬁx-list {preﬁx-list-name | clns-
ﬁlter-expr-name | clns-ﬁlter-set-name} 
{in | out}
BGP mode; identiﬁes an IP preﬁx list used to ﬁlter NLRI 
being sent to or received from the neighbor
continues
Table 13-18
Command Reference for Chapter 13 (Continued)

478     Chapter 13: BGP Routing Policies
Command
Command Mode and Description
neighbor {ip-address | peer-group-
name} remove-private-as
BGP mode; used with eBGP peers, removes any private 
ASNs from the AS_PATH under certain conditions
neighbor {ip-address | peer-group-
name} route-map map-name {in | out}
BGP mode; deﬁnes a route map and direction for applying 
routing policies to BGP Updates
neighbor ip-address route-reﬂector-
client 
BGP mode; used on the RR server, identiﬁes a neighbor as 
an RR client
neighbor {ip-address | peer-group-
name} send-community [both | 
standard | extended]
BGP mode; causes the router to include the 
COMMUNITY PA in Updates sent to this neighbor
neighbor {ip-address | peer-group-
name} soft-reconﬁguration [inbound]
BGP mode; enables soft reconﬁguration of Updates
neighbor {ip-address | peer-group-
name} unsuppress-map route-map-
name
BGP mode; allows a router to identify previously 
suppressed routes and no longer suppress them
neighbor {ip-address | peer-group-
name} weight number
BGP mode; sets the BGP weight for all routes learned from 
the neighbor
network ip-address backdoor
BGP mode; identiﬁes a network as a backdoor route, 
considering it to have the same administrative distance as 
iBGP routes
show ip bgp quote-regexp regexp
EXEC mode; displays BGP table entries whose AS_PATH 
PA is matched by the stated regex
show ip bgp regexp regexp
EXEC mode; displays BGP table entries whose AS_PATH 
PA is matched by the stated regex
show ip community-list [standard-
community-list-number | extended-
community-list-number | community-list-
name] [exact-match]
EXEC mode; lists the contents of conﬁgured IP community 
lists
show ip bgp community community-
number [exact]
EXEC mode; lists BGP table entries that include the listed 
COMMUNITY 
show ip bgp ﬁlter-list access-list-number
EXEC mode; lists the contents of AS_PATH access lists
Table 13-18
Command Reference for Chapter 13 (Continued)

Foundation Summary     479
Table 13-19 lists the route-map match and set commands pertinent to deﬁning BGP routing 
policies.
Table 13-19
Route-Map match and set Commands for BGP
Command
Function
match as-path path-list-number
References an ip as-path access-list command to 
examine the AS_PATH
match community {standard-list-number | 
expanded-list-number | community-list-name 
[exact]}
References an ip community-list command to 
examine the COMMUNITY PA
match ip address {access-list-number 
[access-list-number . . . | access-list-name . . .] 
References an IP access list to match based on NLRI
match ip address preﬁx-list preﬁx-list-name 
[preﬁx-list-name . . .]}
References an IP preﬁx list to match based on NLRI
match tag tag-value [. . . tag-value]
Matches a previously set route tag
set as-path prepend as-path-string
Adds the listed ASNs to the beginning of the 
AS_PATH
set comm-list community-list-number | 
community-list-name delete
Removes individual strings from the COMMUNITY 
PA as matched by the referenced community list
set community {community-number 
[additive] [well-known-community] | none}
Sets, replaces, adds to, or deletes the entire 
COMMUNITY
set ip next-hop ip-address [. . . ip-address] 
[peer-address]
With the peer address option, resets the NEXT_HOP 
PA to be the sender’s IP address used to send Updates 
to a neighbor
set local-preference number-value
Sets the LOCAL_PREF PA
set metric metric-value
Inbound only; sets the MULTI_EXIT_DISC PA
set origin {igp | egp as-number | incomplete}
Sets the ORIGIN PA value
set weight number
Sets the proprietary administrative weight value

480     Chapter 13: BGP Routing Policies
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
NLRI, soft reconﬁguration, AS_PATH access list, AS_PATH prepending, regular 
expression, AS_SEQUENCE, AS_SET, AS_CONFED_SET, AS_CONFED_SEQ, 
well-known mandatory, well-known discretionary, optional transitive, optional 
nontransitive, AS_PATH, NEXT_HOP, AGGREGATOR, ATOMIC AGGREGATE, 
ORIGINATOR_ID, CLUSTER_LIST, ORIGIN, administrative weight, 
LOCAL_PREF, AS_PATH length, MULTI_EXIT_DISC (MED), Neighbor Type, 
BGP decision process, private AS, COMMUNITY, LOCAL_AS, NO_EXPORT, 
NO_ADVERT, NO_EXPORT_SUBCONFED
Further Reading
■
Routing TCP/IP, Volume II, by Jeff Doyle and Jennifer DeHaven Carrol
■
Cisco BGP-4 Command and Conﬁguration Handbook, by William R. Parkhurst
■
Internet Routing Architectures, by Bassam Halabi
■
Troubleshooting IP Routing Protocols, by Zaheer Aziz, Johnson Liu, Abe Martey, and 
Faraz Shamim

Memory Builders
481
■
Most every reference reached from Cisco’s BGP support page at http://www.cisco.com/en/
US/partner/tech/tk365/tk80/tsd_technology_support_sub-protocol_home.html. Requires a 
CCO username/password.
■
For the oddities of BGP table sequence impacting the MED-related best path choice, refer to 
the following Cisco resource: http://www.cisco.com/en/US/partner/tech/tk365/
technologies_tech_note09186a0080094925.shtml


Part IV: Quality of Service
Chapter 14
Classiﬁcation and Marking
Chapter 15
Congestion Management and Avoidance
Chapter 16
Shaping and Policing

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Quality of Service (QoS)
— Trafﬁc Classiﬁcation 

C H A P T E R 14
Classiﬁcation and Marking
The goal of classiﬁcation and marking tools is to simplify the classiﬁcation process of other QoS 
tools by performing complicated classiﬁcation steps as few times as possible. For instance, a 
classiﬁcation and marking tool might examine the source IP address of packets, incoming Class 
of Service (CoS) settings, and possibly TCP or UDP port numbers. Packets matching all those 
ﬁelds may have their IP Precedence (IPP) or DiffServ Code Points (DSCPs) ﬁeld marked with 
a particular value. Later, other QoS tools—on the same router/switch or a different one—can 
simply look for the marked ﬁeld when making a QoS decision, rather than having to perform 
the detailed classiﬁcation again before taking the desired QoS action. 
“Do I Know This Already?” Quiz
Table 14-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. 
You can ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ 
Quizzes.”
Table 14-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered 
in This Section
Score
Fields that Can Be Marked for QoS Purposes
1–4
Cisco Modular QoS CLI
5–7
Classiﬁcation and Marking Tools
8–9
Total Score

486     Chapter 14: Classification and Marking
1.
According to the DiffServ RFCs, which PHB deﬁnes a set of three DSCPs in each service 
class, with different drop characteristics for each of the three DSCP values? 
a. Expedited Forwarding
b. Class Selector
c. Assured Forwarding
d. Multi-class-multi-drop
2.
Which of the following are true about the location of DSCP in the IP header? 
a. High-order 6 bits of ToS byte/DS ﬁeld
b. Low-order 6 bits of ToS byte
c. Middle 6 bits of ToS byte
d. Its ﬁrst 3 bits overlap with IP Precedence
e. Its last 3 bits overlap with IP Precedence
3.
Imagine that a packet is marked with DSCP CS3. Later, a QoS tool classiﬁes the packet. 
Which of the following classiﬁcation criteria would match the packet, assuming the 
marking had not been changed from the original CS3 marking? 
a. Match on DSCP CS3
b. Match on precedence 3
c. Match on DSCP AF32
d. Match on DSCP AF31
e. Match on DSCP decimal 24
4.
Imagine that a packet is marked with AF31. Later, a QoS tool classiﬁes the packet. Which of 
the following classiﬁcation criteria would match the packet, assuming the marking had not 
been changed from the original AF31 marking? 
a. Match on DSCP CS3
b. Match on precedence 3
c. Match on DSCP 24
d. Match on DSCP 26
e. Match on DSCP 28

“Do I Know This Already?” Quiz     487
5.
Examine the following output from a router that shows a user adding conﬁguration to a router. 
Which of the following statements is true about the conﬁguration? 
Router(config)# ccccllllaaaassssssss----mmmmaaaapppp    ffffrrrreeeedddd
Router(config-cmap)# mmmmaaaattttcccchhhh    ddddssssccccpppp    EEEEFFFF
Router(config-cmap)# mmmmaaaattttcccchhhh    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100001111
a. Packets that match both DSCP EF and ACL 101 will match the class.
b. Packets that match either DSCP EF or ACL 101 will match the class.
c. Packets that match ACL 101 will match the class, because the second match command 
replaces the ﬁrst.
d. Packets will only match DSCP EF because the ﬁrst match exits the class map.
6.
Router R1 is conﬁgured with the following three class maps. Which class map(s) would 
match an incoming frame whose CoS ﬁeld is set to 3, IP Precedence is set to 2, and DSCP is 
set to AF21? 
class-map match-all c1
 match cos 3 4
class-map match-any c2
 match cos 2 3
 match cos 1
class-map match-all c3
 match cos 3 4
    match cos 2
a. c1
b. c2
c. c3 
d. All of these answers are correct.
7.
Examine the following example of commands typed in conﬁguration mode to create a class 
map. Assuming that the class fred command was used inside a policy map, and the policy 
map was enabled on an interface, which of the following would be true with regard to packets 
classiﬁed by the class map? 
Router(config)# ccccllllaaaassssssss----mmmmaaaapppp    ffffrrrreeeedddd
Router(config-cmap)# mmmmaaaattttcccchhhh    iiiipppp    ddddssssccccpppp    eeeeffff
Router(config-cmap)# mmmmaaaattttcccchhhh    iiiipppp    ddddssssccccpppp    aaaaffff33331111
a. Match packets with both DSCP EF and AF31
b. Match packets with either DSCP EF or AF31
c. Match all packets that are neither EF or AF31
d. Match no packets
e. Match packets with precedence values of 3 and 5

488     Chapter 14: Classification and Marking
8.
The service-policy output fred command is found in router R1’s conﬁguration under 
Frame Relay subinterface s0/0.1. Which of the following could be true about this CB Marking 
policy map? 
a. The policy map can classify packets using class maps that match based on the DE bit.
b. The policy map can refer to class maps that match based on DSCP.
c. The policy map can set CoS.
d. The policy map can set CLP.
e. The policy map can set DE.
9.
Which of the following is true regarding the listed conﬁguration steps? 
Router(config)# ccccllllaaaassssssss----mmmmaaaapppp    bbbbaaaarrrrnnnneeeeyyyy
Router(config-cmap)# mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp    uuuurrrrllll    ““““tttthhhhiiiissss----hhhheeeerrrreeee....jjjjppppgggg””””
Router(config-cmap)# ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ffffrrrreeeedddd
Router(config-pmap)# ccccllllaaaassssssss    bbbbaaaarrrrnnnneeeeyyyy
Router(config-pmap-c)# sssseeeetttt    ddddssssccccpppp    aaaaffff22221111
Router(config-pmap-c)# iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaa0000////0000
Router(config-if)# sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    ffffrrrreeeedddd
a. If not already conﬁgured, the ip cef global command is required.
b. The conﬁguration does not use NBAR because the match nbar command was not used.
c. The service-policy command would be rejected because match protocol is not allowed 
as an output function.
d. None of these answers is correct.

Fields That Can Be Marked for QoS Purposes     489
Foundation Topics
This chapter has three major sections. The chapter begins by examining the ﬁelds that can be 
marked by the classiﬁcation and marking (C&M) tools. Next, the chapter covers the mechanics 
of the Cisco IOS Modular QoS CLI (MQC), which is used by all the IOS QoS tools that begin 
with the words “Class-Based.” Finally, the C&M tools are covered, with most of the content 
focused on the most important C&M tool, Class-Based Marking (CB Marking).
Fields That Can Be Marked for QoS Purposes
The IP header, LAN trunking headers, Frame Relay header, and ATM cell header all have at least 
one ﬁeld that can be used to perform some form of QoS marking. This section lists and deﬁnes 
those ﬁelds, with the most signiﬁcant coverage focused on the IP header IP Precedence (IPP) and 
Differentiated Services Code Point (DSCP) ﬁelds.
IP Precedence and DSCP Compared
The IP header is deﬁned in RFC 791, including a 1-byte ﬁeld called the Type of Service (ToS) 
byte. The ToS byte was intended to be used as a ﬁeld to mark a packet for treatment with QoS 
tools. The ToS byte itself was further subdivided, with the high-order 3 bits deﬁned as the IP 
Precedence (IPP) ﬁeld. The complete list of values from the ToS byte’s original IPP 3-bit ﬁeld, and 
the corresponding names, is provided in Table 14-2.
Table 14-2
IP Precedence Values and Names
KEY 
POINT
Name
Decimal Value 
Binary Value
Routine
Precedence 0
000
Priority
Precedence 1
001
Immediate
Precedence 2
010
Flash
Precedence 3
011
Flash Override
Precedence 4
100
Critic/Critical
Precedence 5
101
Internetwork Control
Precedence 6
110
Network Control
Precedence 7
111

490     Chapter 14: Classification and Marking
Bits 3 through 6 of the ToS byte included ﬂag ﬁelds that were toggled on or off to imply a 
particular QoS service. The ﬁnal bit (bit 7) was not deﬁned in RFC 791. The ﬂags were not 
used very often, so in effect, the ToS byte’s main purpose was to hold the 3-bit IPP ﬁeld. 
A series of RFCs collectively called Differentiated Services (DiffServ) came along later. DiffServ 
needed more than 3 bits to mark packets, so DiffServ standardized a redeﬁnition of the ToS byte. 
The ToS byte itself was renamed the Differentiated Services (DS) ﬁeld, and IPP was replaced with 
a 6-bit ﬁeld (high-order bits 0–5) called the Differentiated Services Code Point (DSCP) ﬁeld. 
Later, RFC 3168 deﬁned the low-order 2 bits of the DS ﬁeld for use with the QoS Explicit 
Congestion Notiﬁcation (ECN) feature. Figure 14-1 shows the ToS byte’s format with the 
pre-DiffServ and post-DiffServ deﬁnition of the ﬁeld.
Figure 14-1
IP ToS Byte and DS Field Compared
C&M tools often mark DSCP or IPP because the IP packet remains intact as it is forwarded 
throughout an IP network. The other possible marking ﬁelds reside inside Layer 2 headers, which 
means the headers are discarded when forwarded by a Layer 3 process. Thus, the latter cannot be 
used to carry QoS markings beyond the current hop.
DSCP Settings and Terminology
Several DiffServ RFCs suggest a set of values to use in the DSCP ﬁeld and an implied meaning 
for those settings. For instance, RFC 2598 deﬁnes a DSCP of decimal 46, with a name Expedited 
Forwarding (EF). According to that RFC, packets marked as EF should be given queuing 
preference so that they experience minimal latency, but the packets should be policed to prevent 
them from taking over a link and preventing any other types of trafﬁc from exiting an interface 
during periods when this high-priority trafﬁc reaches or exceeds the interface bandwidth. These 
suggested settings, and the associated QoS behavior recommended when using each setting, are 
called Per-Hop Behaviors (PHBs)  by DiffServ. (The particular example listed in this paragraph 
is called the Expedited Forwarding PHB.)
IP Header,
Before DiffServ
IP Header,
After DiffServ
DS Field*
DSCP
ECN
TOS Byte
Precedence
CU
TOS
 Byte 1
Bytes 3-20
Bytes 3-20
 Byte 1
8 bits
8 bits

Fields That Can Be Marked for QoS Purposes     491
The Class Selector PHB and DSCP Values
IPP overlaps with the ﬁrst 3 bits of the DSCP ﬁeld because the DS ﬁeld is simply a redeﬁnition 
of the original ToS byte in the IP header. Because of this overlap, RFC 2475 deﬁnes a set of 
DSCP values and PHBs, called Class Selector (CS) PHBs, that provide backward compatibility 
with IPP. A C&M feature can set a CS DSCP value, and if another router or switch just looks at 
the IPP ﬁeld, the value will make sense from an IPP perspective. Table 14-3 lists the CS DSCP 
names and values, and the corresponding IPP values and names.
Besides deﬁning eight DSCP values and their text names, the CS PHB also suggests a simple set 
of QoS actions that should be taken based on the CS values. The CS PHB simply states that 
packets with larger CS DSCPs should be given better queuing preference than packets with lower 
CS DSCPs.
The Assured Forwarding PHB and DSCP Values
The Assured Forwarding (AF) PHB (RFC 2597) deﬁnes four classes for queuing purposes, along 
with three levels of drop probability inside each queue. To mark packets and distinguish into 
which of four queues a packet should be placed, along with one of three drop priorities inside 
each queue, the AF PHB deﬁnes 12 DSCP values and their meanings. The names of the AF 
DSCPs conform to the following format:
AFxy
where x implies one of four queues (values 1 through 4), and y implies one of three drop priorities 
(values 1 through 3).
Table 14-3
Default and Class Selector DSCP Values
KEY 
POINT
DSCP Class 
Selector Names
Binary DSCP 
Values
IPP Binary 
Values
IPP Names
Default/CS0*
000000
000
Routine
CS1
001000
001
Priority
CS2
010000
010
Immediate
CS3
011000
011
Flash
CS4
100000
100
Flash Override
CS5
101000
101
Critic/Critical
CS6
110000
110
Internetwork Control
CS7
111000
111
Network Control
*The terms “CS0” and “Default” both refer to a binary DSCP of 000000, but most Cisco IOS commands allow only 
the keyword “default” to represent this value.

492     Chapter 14: Classification and Marking
The AF PHB suggests that the higher the value of x in the DSCP name AFxy, the better the queuing 
treatment a packet should get. For example, packets with AF11 DSCPs should get worse queuing 
treatment than packets with AF23 DSCP values. Additionally, the AF PHB suggests that the higher the 
value of y in the DSCP name AFxy, the worse the drop treatment for those packets. (Treating a packet 
worse for drop purposes means that the packet has a higher probability of being dropped.) For example, 
packets with AF11 DSCPs should get better drop treatment than packets with AF23 DSCP values. 
Table 14-4 lists the names of the DSCP values, the queuing classes, and the implied drop likelihood.
The text AF PHB names do not follow the “bigger-is- better” logic in all cases. For example, 
the name AF11 represents a decimal value of 10, and the name AF13 represents a decimal 
DSCP of 14. However, AF11 is “better” than AF13, because AF11 and AF13 are in the same 
queuing class, but AF11 has a lower probability of being dropped than AF13. 
The binary version of the AF DSCP values shows the patterns of the values. The ﬁrst 3 bits of the 
binary DSCP values imply the queuing class (bits 0 through 2), and the next 2 bits (bits 3 and 4) 
imply the drop preference. As a result, queuing tools that operate only on IPP can still react to the 
AF DSCP values, essentially making the AF DSCPs backward compatible with non-DiffServ 
nodes for queuing purposes. 
The Expedited Forwarding PHB and DSCP Values
RFC 2598 deﬁnes the Expedited Forwarding (EF) PHB, which was described brieﬂy in the 
introduction to this section. This RFC deﬁnes a very simple pair of PHB actions: 
■
Queue EF packets so that they get scheduled quickly, to give them low latency.
Table 14-4
Assured Forwarding DSCP Values—Names, Binary Values, and Decimal Values
KEY 
POINT
Queue 
Class
Low Drop Probability 
Medium Drop Probability 
High Drop Probability 
Name/Decimal/Binary
Name/Decimal/Binary
Name/Decimal/Binary
1
AF11 / 10 / 001010
AF12 / 12 / 001100
AF13 / 14 / 001110
2
AF21 / 18 / 010010
AF22 / 20 / 010100
AF23 / 22 / 010110
4
AF31 / 26 / 011010
AF32 / 28 / 011100
AF33 / 30 / 011110
5
AF41 / 34 / 100010
AF42 / 36 / 100100
AF43 / 38 / 100110
NOTE
To convert from the AF name to the decimal equivalent, you can use a simple formula. 
If you think of the AF values as AFxy, the formula is:
8x + 2y = decimal value 
For example, AF41 gives you a formula of (8 * 4) + (2 * 1) = 34.
KEY 
POINT

Fields That Can Be Marked for QoS Purposes     493
■
Police the EF packets so that they do not consume all bandwidth on the link or starve other 
queues.
The DSCP value deﬁned for EF is named EF, with decimal value 46, binary value 101110.
Non-IP Header Marking Fields
As IP packets pass through an internetwork, the packet is encapsulated in a variety of other 
headers. In several cases, these other headers have QoS ﬁelds that can be used for classiﬁcation 
and marking. 
Ethernet LAN Class of Service
Ethernet supports a 3-bit QoS marking ﬁeld, but the ﬁeld only exists when the Ethernet header 
includes either an 802.1Q or ISL trunking header. IEEE 802.1Q deﬁnes its QoS ﬁeld as the 3 most-
signiﬁcant bits of the 2-byte Tag Control ﬁeld, calling the ﬁeld the user-priority bits. ISL deﬁnes 
the 3 least-signiﬁcant bits from the 1-byte User ﬁeld, calling this ﬁeld the Class of Service (CoS). 
Generally speaking, most people (and most IOS commands) refer to these ﬁelds as CoS, regardless 
of the type of trunking. Figure 14-2 shows the general location of the CoS ﬁeld inside ISL and 
802.1P headers.
Figure 14-2
LAN CoS Fields
WAN Marking Fields
Frame Relay and ATM support a single bit that can be set for QoS purposes, but these single bits 
are intended for a very strict use related to drop probability. Frames or cells with these bits set to 
1 are considered to be better candidates to be dropped than frames or cells without the bit set to 1. 
Named the Frame Relay Discard Eligibility (DE) bit and the ATM Cell Loss Priority (CLP) bit, 
these bits can be set by a router, or by an ATM or Frame Relay switch. Router and switch drop 
Original Frame
Tag
ISL Header 
802.1Q/P
Header
User
Priority
VLAN ID
CoS
Frame Type
Dest. 
Src 
Ether
Type 
ISL Header (26 Bytes
ISL User Field (1 byte)
802.1Q Tag Field (2 bytes)

494     Chapter 14: Classification and Marking
features can then be conﬁgured to more aggressively drop frames and cells that have the DE or 
CLP bit set, respectively.
MPLS deﬁnes a 3-bit ﬁeld called the MPLS Experimental (EXP) bit that is intended for general 
QoS marking. Often, C&M tools are used on the edge of MPLS networks to remap DSCP or IPP 
values to MPLS Experimental bit values to provide QoS inside the MPLS network.
Locations for Marking and Matching
Figure 14-3 shows a sample network, with notes about the locations of the QoS ﬁelds.
Figure 14-3
Sample Network Showing Non-IP Markable QoS Fields
In such a network, the IPP and DSCP inside the IP packet remain intact from end to end. However, 
some devices may not be able to look at the IPP or DSCP ﬁelds, and some may ﬁnd it more 
convenient to look at some other header ﬁeld. For instance, an MPLS Label Switch Router (LSR) 
inside the MPLS cloud may be conﬁgured to make QoS decisions based on the 3-bit MPLS EXP 
ﬁeld in the MPLS label, but unable to look at the encapsulated IP header and DSCP ﬁeld. In such 
cases, QoS tools may need to be conﬁgured on edge devices to look at the DSCP and then mark a 
different ﬁeld. 
The non-IP header markable ﬁelds exist in only parts of the network. As a result, those ﬁelds can 
be used for classiﬁcation or marking only on the appropriate interfaces. The rules for where these 
ﬁelds (CoS, DE, CLP, EXP) can be used are as follows:
■
For classiﬁcation—On ingress only, and only if the interface supports that particular header 
ﬁeld
■
For marking—On egress only, and only if the interface supports that particular header ﬁeld
SW1
SW2
.1Q
.1Q
S0/0.1
Fa0/0
Hannah
Queue/Drop
Based on Cos
Drop Based on DE
Queue Based on EXP
Frame Relay
MPLS
R1
R3
R2
Server 1
IP
IP
KEY 
POINT

Cisco Modular QoS CLI     495
For example, if CB Marking were to be conﬁgured on R1’s fa0/0.1 802.1Q subinterface, it could 
classify incoming frames based on their CoS values, and mark outgoing frames with a CoS value. 
However, on ingress, it could not mark CoS, and on egress, it could not classify based on CoS. 
Similarly, on that same fa0/0.1 subinterface, CB Marking could neither classify nor mark based 
on a DE bit, CLP bit, or MPLS EXP bits, because these headers never exist on Ethernet interfaces. 
Table 14-5 summarizes the QoS marking ﬁelds.
Cisco Modular QoS CLI
For many years and over many IOS releases, Cisco added QoS features and functions, each of 
which used its own separate set of conﬁguration and exec commands. Eventually, the number of 
different QoS tools and different QoS commands got so large that QoS conﬁguration became a big 
chore. Cisco created the Modular QoS CLI (MQC) to help resolve these problems, by deﬁning a 
common set of conﬁguration commands to conﬁgure many QoS features in a router or switch. 
MQC is not a totally new CLI, different from IOS conﬁguration mode, for conﬁguring QoS. 
Rather, it is a method of categorizing IOS classiﬁcation, marking, and related actions into logical 
groupings to unify the command-line interface. MQC deﬁnes a new set of conﬁguration 
commands—commands that are typed in using the same IOS CLI, in conﬁguration mode. 
However, once you understand MQC, you typically need to learn only one new command to know 
how to conﬁgure any additional MQC-based QoS tools. You can identify MQC-based tools by the 
name of the tool; they all begin with the phrase “Class-Based” (abbreviated CB for this 
discussion). These tools include CB Marking, CB Weighted Fair Queuing (CBWFQ), CB 
Policing, CB Shaping, and CB Header Compression.
Table 14-5
Marking Field Summary
KEY 
POINT
Field
Location
Length 
IP Precedence (IPP)
IP header
3 bits
IP DSCP
IP header
6 bits
DS ﬁeld
IP header 
1 byte
ToS byte
IP header
1 byte
CoS
ISL and 802.1Q header
3 bits
Discard Eligible (DE)
Frame Relay header 
1 bit
Cell Loss Priority (CLP)
ATM cell header
1 bit
MPLS Experimental 
MPLS header
3 bits

496     Chapter 14: Classification and Marking
The Mechanics of MQC 
MQC separates the classiﬁcation function of a QoS tool from the action (PHB) that the QoS tool wants 
to perform. To do so, there are three major commands with MQC, with several subordinate commands: 
■
The class-map command deﬁnes the matching parameters for classifying packets into 
service classes. 
■
The PHB actions (marking, queuing, and so on) are conﬁgured under a policy-map 
command. 
■
The policy map is enabled on an interface by using a service-policy command. 
Figure 14-4 shows the general ﬂow of commands.
Figure 14-4
MQC Commands and Their Correlation
In Figure 14-4, the network’s QoS policy calls for treating packets in one of two categories, called 
QoS service classes. (The actual types of packets that are placed into each class are not shown, to 
keep the focus on the general ﬂow of how the main commands work together.) Classifying packets 
into two classes calls for the use of two class-map commands. Each class-map command would 
be followed by a match subcommand, which deﬁnes the actual parameters that are compared to 
the frame/packet header contents to match packets for classiﬁcation. 
For each class, some QoS action (PHB) needs to be performed; this action is conﬁgured using 
the policy-map command. Under a single policy map, multiple classes can be referenced; in 
Figure 14-4, the two classes myclass1 and myclass2. Inside the single policy called mypolicy, 
under each of the two classes myclass1 and myclass2, you can conﬁgure separate QoS actions. 
For instance, you could apply different markings to packets in myclass1 and myclass2 at this point. 
Finally, when the service-policy command is applied to an interface, the QoS features are enabled 
either inbound or outbound on that interface.
The next section takes a much closer look at packet classiﬁcation using class maps. Most of the 
discussion of policy maps will be included when speciﬁcally covering CB Marking conﬁguration 
later in the chapter.
class-map myclass1
    (matching parameters follow …)
class-map myclass2
    (matching parameters follow …)
policy-map mypolicy
  class myclass1
    (Actions/PHB’s FOR THIS CLASS follow: marking, queuing, etc.)
  class myclass2
    (Actions/PHB’s FOR THIS CLASS follow: marking, queuing, etc.)
Interface S 0/0
  service-policy output mypolicy
Classification
Configuration
Action/PHB
Configuration
Enable on
Interface
KEY 
POINT

Cisco Modular QoS CLI     497
Classiﬁcation Using Class Maps
MQC-based tools classify packets using the match subcommand inside an MQC class map. The 
following list details the rules surrounding how class maps work for matching and classifying 
packets: 
■
The match command has many options for matching packets, including QoS ﬁelds, ACLs, 
and MAC addresses. (See Table 14-10 in the “Foundation Summary” section for a reference.)
■
Class-map names are case sensitive.
■
The match protocol command means that IOS uses Network Based Application Recognition 
(NBAR) to perform that match.
■
The match any command matches any packet—in other words, any and all packets.
Example 14-1 shows a simple CB Marking conﬁguration, with comments focused on the 
classiﬁcation conﬁguration. Note that the names and logic match Figure 14-4.
With Example 14-1, each packet leaving interface fa0/0 will match one of the two classes. Because 
the policy map uses a set dscp command in each class, and all packets happen to match either 
myclass1 or myclass2, each packet will leave the interface marked either with DSCP EF 
(decimal 46) or default (decimal 0). (If the matching logic was different and some packets match 
neither myclass1 nor myclass2, those packets would not be marked, and would retain their 
existing DSCP values.)
Example 14-1
Basic CB Marking Example
! CEF is required for CB Marking. Without it, the class map and policy map 
! configuration would be allowed, but the sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy command would be rejected.
iiiipppp    cccceeeeffff
! The first class map matches all UDP/RTP packets with UDP ports between 16384 and
! 32767 (the 2nd number is added to the first to get the end of the range.) The
! second class map matches any and all packets.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    mmmmssssccccllllaaaassssssss1111
        mmmmaaaattttcccchhhh    iiiipppp    rrrrttttpppp    11116666333388884444    11116666333388883333    
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    mmmmyyyyccccllllaaaassssssss2222
        mmmmaaaattttcccchhhh    aaaannnnyyyy
! The policy map calls each of the two class maps for matching. The sssseeeetttt command
! implies that the PHB is marking, meaning that this is a CB Marking config.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    mmmmyyyyppppoooolllliiiiccccyyyy
        ccccllllaaaassssssss    mmmmyyyyccccllllaaaassssssss1111
            sssseeeetttt    ddddssssccccpppp    EEEEFFFF
        ccccllllaaaassssssss    mmmmyyyyccccllllaaaassssssss2222
            sssseeeetttt    ddddssssccccpppp    ddddeeeeffffaaaauuuulllltttt
! The policy map processes packets leaving interface fa0/0.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt0000////0000
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    mmmmyyyyppppoooolllliiiiccccyyyy
KEY 
POINT

498     Chapter 14: Classification and Marking
Using Multiple match Commands
In some cases, a class map may need to examine multiple items in a packet to decide whether the 
packet should be part of that class. Class maps can use multiple match commands, and even nest 
class maps inside other class maps, to achieve the desired combination of logic. The following list 
summarizes the key points regarding these more complex matching options:
■
Up to four (CoS and IPP) or eight (DSCP) values can be listed on a single match cos, match 
precedence, or match dscp command, respectively. If any of the values are found in the 
packet, the statement is matched. 
■
If a class map has multiple match commands in it, the match-any or match-all (default) 
parameter on the class-map command deﬁnes whether a logical OR or a logical AND 
(default) is used between the match commands, respectively.
■
The match class name command refers to another class map by name, nesting the named 
class map’s matching logic; the match class name command is considered to match if the 
referenced class-map also results in a match.
Example 14-2 shows several examples of this more complicated matching logic, with notations 
inside the example of what must be true for a class map to match a packet. 
Example 14-2
Complex Matching with Class Maps 
! ccccllllaaaassssssss----mmmmaaaapppp    eeeexxxxaaaammmmpppplllleeee1111 uses match-all logic (default), so this class map matches 
! packets that are permitted by ACL 102, and that also have an IP precedence of 5.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll example1
        mmmmaaaattttcccchhhh    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp 102
        mmmmaaaattttcccchhhh    pppprrrreeeecccceeeeddddeeeennnncccceeee    5555    
! ccccllllaaaassssssss----mmmmaaaapppp    eeeexxxxaaaammmmpppplllleeee2222 uses match-any logic, so this class map matches packets that 
! are permitted by ACL 102, or have DSCP AF21, or both.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaannnnyyyy    eeeexxxxaaaammmmpppplllleeee2222
        mmmmaaaattttcccchhhh    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100002222
        mmmmaaaattttcccchhhh    ddddssssccccpppp    AAAAFFFF22221111
! ccccllllaaaassssssss----mmmmaaaapppp    eeeexxxxaaaammmmpppplllleeee3333 matches no packets, due to a common mistake—the two mmmmaaaattttcccchhhh
! commands use a logical AND between them due to the default mmmmaaaattttcccchhhh----aaaallllllll argument, meaning
! that a single packet must have DSCP 0 and DSCP 1, which is impossible. class-map example4
! shows how to correctly match either DSCP 0 or 1.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    eeeexxxxaaaammmmpppplllleeee3333
        mmmmaaaattttcccchhhh    ddddssssccccpppp    0000    
        mmmmaaaattttcccchhhh    ddddssssccccpppp    1111
!
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaannnnyyyy    eeeexxxxaaaammmmpppplllleeee4444
        mmmmaaaattttcccchhhh    ddddssssccccpppp    0000    1111
! ccccllllaaaassssssss----mmmmaaaapppp    iiii----aaaammmm----nnnneeeessssttttiiiinnnngggg refers to ccccllllaaaassssssss----mmmmaaaapppp    iiii----aaaammmm----nnnneeeesssstttteeeedddd through the mmmmaaaattttcccchhhh    ccccllllaaaassssssss 
! iiii----aaaammmm----nnnneeeesssstttteeeedddd command. The logic is explained after the example.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    iiii----aaaammmm----nnnneeeesssstttteeeedddd
        mmmmaaaattttcccchhhh    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100002222
KEY 
POINT

Cisco Modular QoS CLI     499
The trickiest part of Example 14-2 is how the class maps can be nested, as shown at the end. 
class-map i-am-nesting uses OR logic between its two match commands, meaning “I will match 
if the CoS is 5, or if class-map i-am-nested matches the packet, or both.” When combined with 
the match-all logic of the i-am-nested class map, the logic matches the following packets/frames:
Packets that are permitted by ACL 102, AND marked with precedence 5
or
frames with CoS 5
Classiﬁcation Using NBAR
NBAR classiﬁes packets that are normally difﬁcult to classify. For instance, some applications use 
dynamic port numbers, so a statically conﬁgured match command, matching a particular UDP or 
TCP port number, simply could not classify the trafﬁc. NBAR can look past the UDP and TCP 
header, and refer to the host name, URL, or MIME type in HTTP requests. (This deeper 
examination of the packet contents is sometimes called deep packet inspection.) NBAR can also 
look past the TCP and UDP headers to recognize application-speciﬁc information. For instance, 
NBAR allows recognition of different Citrix application types, and allows searching for a portion 
of a URL string.
NBAR itself can be used for a couple of different purposes. Independent of QoS features, NBAR 
can be conﬁgured to keep counters of trafﬁc types and trafﬁc volume for each type. For QoS, 
NBAR can be used by CB Marking to match difﬁcult-to-match packets. Whenever the MQC 
match protocol command is used, IOS is using NBAR to match the packets. Table 14-6 lists some 
of the more popular uses of the match protocol command and NBAR.
        mmmmaaaattttcccchhhh    pppprrrreeeecccceeeeddddeeeennnncccceeee    5555    
!
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaannnnyyyy    iiii----aaaammmm----nnnneeeessssttttiiiinnnngggg
        mmmmaaaattttcccchhhh    ccccllllaaaassssssss    iiii----aaaammmm----nnnneeeesssstttteeeedddd
        mmmmaaaattttcccchhhh    ccccoooossss    5555
Table 14-6
Popular Fields Matchable by CB Marking Using NBAR 
Field
Comments
RTP audio versus video
RTP uses even-numbered UDP ports from 16,384 to 32,768. The odd-
numbered port numbers are used by RTCP for call control trafﬁc. NBAR 
allows matching the even-numbered ports only, for classiﬁcation of voice 
payload into a different service class from that used for voice signaling.
Citrix applications
NBAR can recognize different types of published Citrix applications.
continues
Example 14-2
Complex Matching with Class Maps (Continued)

500     Chapter 14: Classification and Marking
Classiﬁcation and Marking Tools
The ﬁnal major section of this chapter covers CB Marking, with a brief mention of a few other, 
less popular marking tools. 
Class-Based Marking (CB Marking) Conﬁguration
As with the other QoS tools whose names begin with the phrase “Class-Based,” you will use MQC 
commands to conﬁgure CB Marking. The following list highlights the key points regarding CB 
Marking conﬁguration and logic:
■
CB Marking requires CEF (enabled using the ip cef global command).
■
Packets are classiﬁed based on the logic in MQC class maps.
■
An MQC policy map refers to one or more class maps using the class class-map-name 
command; packets classiﬁed into that class are then marked.
■
CB Marking is enabled for packets either entering or exiting an interface using the MQC 
service-policy in | out policy-map-name interface subcommand.
■
A CB Marking policy map is processed sequentially; once a packet has matched a class, 
it is marked based on the set command(s) deﬁned for that class.
■
You can conﬁgure multiple set commands in one class to set multiple ﬁelds; for example, to 
set both DSCP and CoS.
■
Packets that do not explicitly match a deﬁned class are considered to have matched a special 
class called class-default. 
■
For any class inside the policy map for which there is no set command, packets in that class 
are not marked.
Field
Comments
Host name, URL string, 
MIME type
NBAR can also match URL strings, including the host name and the MIME 
type, using regular expressions for matching logic.
Peer-to-peer applications
NBAR can ﬁnd ﬁle-sharing applications like KaZaa, Morpheus, Grokster, 
and Gnutella.  
Table 14-6
Popular Fields Matchable by CB Marking Using NBAR (Continued)
KEY 
POINT

Classiﬁcation and Marking Tools     501
Table 14-7 lists the syntax of the CB Marking set command, showing the familiar ﬁelds that can 
be set by CB Marking. Table 14-8 lists the key show commands available for CB Marking.
CB Marking Example
The ﬁrst CB Marking example uses the network shown in Figure 14-5. Trafﬁc was generated 
in the network to make the show commands more meaningful. Two G.711 voice calls were 
completed between R4 and R1 using Foreign Exchange Station (FXS) cards on these two routers, 
with Voice Activity Detection (VAD) disabled. Client1 performed an FTP get of a large ﬁle from 
Server1, and downloaded two large HTTP objects, named important.jpg and not-so.jpg. Finally, 
Client1 and Server1 held a Microsoft NetMeeting conference, using G.723 for the audio and 
H.263 for the video.
Table 14-7
set Conﬁguration Command Reference for CB Marking
KEY 
POINT
Command
Function
set [ip] precedence ip-precedence-value
Marks the value for IP Precedence for IPv4 and IPv6 
packets if the ip parameter is omitted; sets only 
IPv4 packets if the ip parameter is included
set [ip] dscp ip-dscp-value
Marks the value for IP DSCP for IPv4 and IPv6 
packets if the ip parameter is omitted; sets only 
IPv4 packets if the ip parameter is included
set cos cos-value
Marks the value for CoS
set qos-group group-id
Marks the group identiﬁer for the QoS group
set atm-clp
Sets the ATM CLP bit
set fr-de
Sets the Frame Relay DE bit
Table 14-8
EXEC Command Reference for CB Marking
Command
Function
show policy-map policy-map-name
Lists conﬁguration information about a policy 
map
show policy-map interface-spec [input | output] 
[class class-name]
Lists statistical information about the behavior of a 
policy map when enabled on an interface

502     Chapter 14: Classification and Marking
Figure 14-5
Sample Network for CB Marking Examples
The following criteria deﬁne the requirements for marking the various types of trafﬁc for 
Example 14-3:
■
VoIP payload is marked with DSCP EF.
■
NetMeeting video trafﬁc is marked with DSCP AF41.
■
Any HTTP trafﬁc whose URL contains the string “important” anywhere in the URL is marked 
with AF21.
■
Any HTTP trafﬁc whose URL contains the string “not-so” anywhere in the URL is marked 
with AF23.
■
All other trafﬁc is marked with DSCP Default (0).
Example 14-3 lists the annotated conﬁguration, including the appropriate show commands. 
Example 14-3
CB Marking Example 1, with show Command Output 
iiiipppp    cccceeeeffff
! Class map    vvvvooooiiiipppp----rrrrttttpppp uses NBAR to match all RTP audio payload, but not the video
! or the signaling.
ccccllllaaaassssssss----mmmmaaaapppp    vvvvooooiiiipppp----rrrrttttpppp
    mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    rrrrttttpppp    aaaauuuuddddiiiioooo
R1
R3
SW1
Client1
1001
s0/0
SW2
Server1
1002
s0/0
FA0/0
3001 3002
R4
Packet Direction
Mark VoIP as DSCP EF
Mark NetMeeting as AF41
Mark URLs with ìImportant ” as AF21
Mark URLs with “Not” as AF23
Mark All Else with DSCP Default
Mark
X
Y
Z

Classiﬁcation and Marking Tools     503
! Class map    hhhhttttttttpppp----iiiimmmmppppoooo matches all packets related to downloading objects whose
! name contains the string “important,” with any text around it. Similar logic  
! is used for ccccllllaaaassssssss----mmmmaaaapppp    hhhhttttttttpppp----nnnnooootttt.
ccccllllaaaassssssss----mmmmaaaapppp    hhhhttttttttpppp----iiiimmmmppppoooo
    mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp    uuuurrrrllll    """"****iiiimmmmppppoooorrrrttttaaaannnntttt****""""
!!!!
ccccllllaaaassssssss----mmmmaaaapppp    hhhhttttttttpppp----nnnnooootttt
    mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp    uuuurrrrllll    """"****nnnnooootttt----ssssoooo****""""
! Class map    NNNNeeeettttMMMMeeeeeeeetttt matches two RTP subtypes—one for G.723 audio (type 4) and
! one for H.263 video (type 34). Note the mmmmaaaattttcccchhhh----aaaannnnyyyy logic so that if either is 
! true, a match occurs for this class map.
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaannnnyyyy    NNNNeeeettttMMMMeeeeeeeetttt
    mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    rrrrttttpppp    ppppaaaayyyyllllooooaaaadddd----ttttyyyyppppeeee    4444
    mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    rrrrttttpppp    ppppaaaayyyyllllooooaaaadddd----ttttyyyyppppeeee    33334444
! ppppoooolllliiiiccccyyyy----mmmmaaaapppp    llllaaaauuuunnnnddddrrrryyyy----lllliiiisssstttt calls each of the class maps. Note that the order
! listed here is the order in which the ccccllllaaaassssssss commands were added to the policy
! map.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    llllaaaauuuunnnnddddrrrryyyy----lllliiiisssstttt
    ccccllllaaaassssssss    vvvvooooiiiipppp----rrrrttttpppp
        sssseeeetttt    iiiipppp    ddddssssccccpppp    EEEEFFFF
ccccllllaaaassssssss    NNNNeeeettttMMMMeeeeeeeetttt
        sssseeeetttt    iiiipppp    ddddssssccccpppp    AAAAFFFF44441111
ccccllllaaaassssssss    hhhhttttttttpppp----iiiimmmmppppoooo
        sssseeeetttt    iiiipppp    ddddssssccccpppp    AAAAFFFF22221111
ccccllllaaaassssssss    hhhhttttttttpppp----nnnnooootttt
        sssseeeetttt    iiiipppp    ddddssssccccpppp    AAAAFFFF22223333
ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
        sssseeeetttt    iiiipppp    DDDDSSSSCCCCPPPP    ddddeeeeffffaaaauuuulllltttt
! Above, the command ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt is only required if some nondefault action 
! needs to be taken for packets that are not explicitly matched by another class. 
! In this case, packets not matched by any other class fall into the ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
! class, and are marked with DSCP Default (decimal 0). Without these two commands, 
! packets in this class would remain unchanged.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Below, the policy map is enabled for input packets on fa0/0.
    iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt    0000////0000
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    iiiinnnnppppuuuutttt    llllaaaauuuunnnnddddrrrryyyy----lllliiiisssstttt
! The command sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    llllaaaauuuunnnnddddrrrryyyy----lllliiiisssstttt simply restates the configuration.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    llllaaaauuuunnnnddddrrrryyyy----lllliiiisssstttt
  Policy Map laundry-list
    Class voip-rtp
      set ip dscp 46
    Class NetMeet
      set ip dscp 34
    Class http-impo
      set ip dscp 18
    Class http-not
continues
Example 14-3
CB Marking Example 1, with show Command Output (Continued)

504     Chapter 14: Classification and Marking
Example 14-3 includes several different classiﬁcation options using the match command, 
including the matching of Microsoft NetMeeting trafﬁc. NetMeeting uses RTP for the video ﬂows, 
and by default uses G.723 for audio and H.323 for video. To match both the audio and video for 
NetMeeting, a class map that matches either of the two RTP payload subtypes for G.723 and 
H.263 is needed. So, class map NetMeet uses match-any logic, and matches on RTP payload 
types 4 (G.723) and 34 (H.263). (For more background information on RTP payload types, refer to 
http://www.cisco.com/en/US/products/ps6616/products_white_paper09186a0080110040.shtml.)  
      set ip dscp 22
    Class class-default
      set ip dscp 0
! The command sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    lists statistics related to MQC features.
! Several stanzas of output were omitted for brevity.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt    0000////0000    iiiinnnnppppuuuutttt
 Fastethernet0/0 
  Service-policy input:     laundry-list
    Class-map: voip-rtp (match-all)
      35268 packets, 2609832 bytes
      5 minute offered rate     59000 bps, drop rate 0 bps
      Match: protocol rtp audio
      QoS Set
        ip dscp 46
              Packets marked 35268
    Class-map: NetMeet (match-any)
      817 packets, 328768 bytes
      5 minute offered rate     19000 bps, drop rate 0 bps
      Match: protocol rtp payload-type 4
             protocol rtp payload-type 34
      QoS Set
        ip dscp 34
              Packets marked 817
! omitting stanza of output for class hhhhttttttttpppp----iiiimmmmppppoooo
! omitting stanza of output for class hhhhttttttttpppp----nnnnooootttt 
    Class-map: class-default (match-all)
      33216 packets, 43649458 bytes
      5 minute offered rate     747000 bps, drop rate 0 bps
      Match: any 
      QoS Set
        ip dscp 0
Packets marked 33301
Example 14-3
CB Marking Example 1, with show Command Output (Continued)

Classiﬁcation and Marking Tools     505
The show policy-map interface command provides statistical information about the number of 
packets and bytes that have matched each class in the policy maps. The generic syntax is as 
follows:
sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    interface-name    [vvvvcccc    [vpi////] vci] [ddddllllcccciiii dlci] [iiiinnnnppppuuuutttt | oooouuuuttttppppuuuutttt] 
[ccccllllaaaassssssss class-name]
The end of Example 14-3 shows a sample of the command, which lists statistics for marking. If 
other MQC-based QoS features were conﬁgured, statistics for those features would also be 
displayed. As you see from the generic command, the show policy-map interface command 
allows you to select just one interface, either input or output, and even select a single class inside 
a single policy map for display. 
The load-interval interface subcommand can also be useful when looking at any QoS tool’s 
statistics. The load-interval command deﬁnes the time interval over which IOS measures packet 
and bit rates on an interface. With a lower load interval, the statistics change more quickly; with a 
larger load interval, the statistics change more slowly. The default setting is 5 minutes, and it can 
be lowered to 30 seconds.
Example 14-3 also shows a common oversight with QoS conﬁguration. Note that the ﬁrst class in 
policy-map laundry-list is class voip-rtp. Because that class map matches all RTP audio, it 
matches the Microsoft NetMeeting audio stream as well, so the NetMeeting audio is not matched 
by class NetMeet that follows. If the ﬁrst two classes (voip-rtp and NetMeet) called in the policy 
map had been reversed, then the NetMeeting audio would have been correctly matched in the 
NetMeet class, and all other audio would have been marked as part of the voip-rtp class.
CB Marking of CoS and DSCP
Example 14-4 shows how a router might be conﬁgured for CB Marking when an attached LAN 
switch is performing QoS based on CoS. In this case, R3 looks at frames coming in its fa0/0 
interface, marking the DSCP values based on the incoming CoS settings. Additionally, R3 looks 
at the DSCP settings for packets exiting its fa0/0 interface toward the switch, setting the CoS 
values in the 802.1Q header. The actual values used on R3’s fa0/0 interface for classiﬁcation and 
marking are as follows:
■
Frames entering with CoS 5 will be marked with DSCP EF.
■
Frames entering with CoS 1 will be marked with DSCP AF11.
■
Frames entering with any other CoS will be marked DSCP 0.
■
Packets exiting with DSCP EF will be marked with CoS 5. 
■
Packets exiting with DSCP AF11 will be marked with CoS 1.
■
Packets exiting with any other DSCP will be marked with CoS 0. 
KEY 
POINT

506     Chapter 14: Classification and Marking
The QoS policy requires two policy maps in this example. Policy map map-cos-to-dscp matches 
CoS values for frames entering R3’s fa0/0.1 interface, and marks DSCP values, for packets 
ﬂowing right to left in Figure 14-5. Therefore, the policy map is enabled on input of R3’s fa0/0.1 
interface. Policy map map-dscp-to-cos matches DSCP values for packets exiting R3’s fa0/0.1 
interface, and marks the corresponding CoS value. Therefore, the policy map was enabled on the 
output of R3’s fa0/0.1 interface. Neither policy map could be applied on the WAN interface, 
Example 14-4
Marking DSCP Based on Incoming CoS, and Vice Versa
! The class maps each simply match a single CoS or DSCP value.
ccccllllaaaassssssss----mmmmaaaapppp    ccccoooossss1111
 mmmmaaaattttcccchhhh    ccccoooossss    1111
!!!! 
ccccllllaaaassssssss----mmmmaaaapppp    ccccoooossss5555
    mmmmaaaattttcccchhhh    ccccoooossss    5555
!!!!
ccccllllaaaassssssss----mmmmaaaapppp    AAAAFFFF11111111
    mmmmaaaattttcccchhhh    ddddssssccccpppp    aaaaffff11111111
!!!!
ccccllllaaaassssssss----mmmmaaaapppp    EEEEFFFF
    mmmmaaaattttcccchhhh    ddddssssccccpppp    EEEEFFFF
! This policy map will map incoming CoS to a DSCP value
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    mmmmaaaapppp----ccccoooossss----ttttoooo----ddddssssccccpppp
    ccccllllaaaassssssss    ccccoooossss1111
        sssseeeetttt    DDDDSSSSCCCCPPPP    aaaaffff11111111
    ccccllllaaaassssssss    ccccoooossss5555
        sssseeeetttt    iiiipppp    DDDDSSSSCCCCPPPP    EEEEFFFF
    ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            sssseeeetttt    iiiipppp    ddddssssccccpppp    ddddeeeeffffaaaauuuulllltttt
! This policy map will map incoming DSCP to outgoing CoS. Note that the DSCP
! value is not changed.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    mmmmaaaapppp----ddddssssccccpppp----ttttoooo----ccccoooossss
    ccccllllaaaassssssss    AAAAFFFF11111111
        sssseeeetttt    ccccoooossss    1111
    ccccllllaaaassssssss    EEEEFFFF
        sssseeeetttt    ccccoooossss    5555
    ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            sssseeeetttt    ccccoooossss    0000
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! The policy maps are applied to an 802.1q subinterface. 
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000....1111
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ddddooootttt1111QQQQ    111100002222
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    iiiinnnnppppuuuutttt    mmmmaaaapppp----ccccoooossss----ttttoooo----ddddssssccccpppp
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    mmmmaaaapppp----ddddssssccccpppp----ttttoooo----ccccoooossss
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////0000....2222
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ddddooootttt1111QQQQ    2222    nnnnaaaattttiiiivvvveeee

Classiﬁcation and Marking Tools     507
because only interfaces conﬁgured for 802.1Q accept service-policy commands that reference 
policy maps that either classify or mark based on CoS.
Note that you cannot enable a policy-map that refers to CoS on interface fa0/0.2 in this example. 
That subinterface is in the native VLAN, meaning that no 802.1Q header is used.
Network-Based Application Recognition
CB Marking can make use of NBAR’s powerful classiﬁcation capabilities via the match protocol 
subcommand. Example 14-5 shows a conﬁguration for CB Marking and NBAR in which the 
following requirements are met:
■
Any HTTP trafﬁc whose URL contains the string “important” anywhere in the URL is marked 
with AF21.
■
Any HTTP trafﬁc whose URL contains the string “not-so” anywhere in the URL is marked 
with DSCP default.
■
All other trafﬁc is marked with AF11.
Example 14-5 shows the conﬁguration, along with a few NBAR-related show commands.  
Example 14-5
CB Marking Based on URLs, Using NBAR for Classiﬁcation 
iiiipppp    cccceeeeffff
! The “*” in the url string is a wildcard meaning “0 or more characters.” 
ccccllllaaaassssssss----mmmmaaaapppp    hhhhttttttttpppp----iiiimmmmppppoooo
        mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp    uuuurrrrllll    ““““****iiiimmmmppppoooorrrrttttaaaannnntttt****""""
ccccllllaaaassssssss----mmmmaaaapppp    hhhhttttttttpppp----nnnnooootttt
        mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp    uuuurrrrllll    ““““****nnnnooootttt----ssssoooo****""""
! The policy map lists the three classes in order, setting the DSCP values. 
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    hhhhttttttttpppp
    ccccllllaaaassssssss    hhhhttttttttpppp----iiiimmmmppppoooo
        sssseeeetttt    ddddssssccccpppp    AAAAFFFF22221111
!!!!
    ccccllllaaaassssssss    hhhhttttttttpppp----nnnnooootttt
        sssseeeetttt    ddddssssccccpppp    ddddeeeeffffaaaauuuulllltttt
!!!!
    ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
        sssseeeetttt    DDDDSSSSCCCCPPPP    AAAAFFFF11111111
! The iiiipppp    nnnnbbbbaaaarrrr    pppprrrroooottttooooccccoooollll    ddddiiiissssccccoooovvvveeeerrrryyyy command may or may not be required—see the notes
! following this example.
iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt    0000////0000
    iiiipppp    nnnnbbbbaaaarrrr    pppprrrroooottttooooccccoooollll----ddddiiiissssccccoooovvvveeeerrrryyyy
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    iiiinnnnppppuuuutttt    hhhhttttttttpppp
! The sssshhhhoooowwww    iiiipppp    nnnnbbbbaaaarrrr command only displays statistics if the iiiipppp    nnnnbbbbaaaarrrr 
! pppprrrroooottttooooccccoooollll----ddddiiiissssccccoooovvvveeeerrrryyyy command is applied to an interface. These statistics are 
continues

508     Chapter 14: Classification and Marking
Unlike most other IOS features, you can upgrade NBAR without changing to a later IOS version. 
Cisco uses a feature called Packet Description Language Modules (PDLMs)  to deﬁne new 
protocols that NBAR should match. When Cisco decides to add one or more new protocols to 
the list of protocols that NBAR should recognize, it creates and compiles a PDLM. You can then 
download the PDLM from Cisco, copy it into Flash memory, and add the ip nbar pdlm pdlm-name 
command to the conﬁguration, where pdlm-name is the name of the PDLM ﬁle in Flash memory. 
NBAR can then classify based on the protocol information from the new PDLM. 
CB Marking Design Choices
The intent of CB Marking is to simplify the work required of other QoS tools by marking packets of 
the same class with the same QoS marking. For other QoS tools to take advantage of those markings, 
packets should generally be marked as close to the ingress point of the packet as possible. However, 
the earliest possible point may not be a trusted device. For instance, in Figure 14-5 (the ﬁgure upon 
which Examples 14-3 and 14-4 are based), Server1 could set its own DSCP and even CoS if its NIC 
supported trunking. However, trusting the server administrator may or may not be desirable. So, the 
following rule summarizes how to choose the best location to perform marking:
Mark as close to the ingress edge of the network as possible, but not so close to the edge 
that the marking is made by an untrusted device.
! independent of those created by CB Marking. This example shows several of
! the large number of options on the command. 
R3# sssshhhhoooowwww    iiiipppp    nnnnbbbbaaaarrrr    pppprrrroooottttooooccccoooollll----ddddiiiissssccccoooovvvveeeerrrryyyy    iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaasssstttteeeetttthhhheeeerrrrnnnneeeetttt    0000////0000    ssssttttaaaattttssss    ppppaaaacccckkkkeeeetttt----ccccoooouuuunnnntttt    ttttoooopppp----nnnn    5555
 FastEthernet0/0 
                            Input                    Output                  
   Protocol                 Packet Count             Packet Count            
   ------------------------ ------------------------ ------------------------
   http                     721                      428                     
   eigrp                    635                      0                       
   netbios                  199                      0                       
   icmp                     1                        1                       
   bgp                      0                        0                       
   unknown                  46058                    63                      
   Total                    47614                    492                     
NOTE
Before the 12.2T/12.3 IOS releases, the ip nbar protocol-discovery command was 
required on an interface before using a service-policy command that used NBAR matching. 
With 12.2T/12.3 train releases, this command is no longer required.
The use of the match protocol command implies that NBAR will be used to match the packet.
Example 14-5
CB Marking Based on URLs, Using NBAR for Classiﬁcation (Continued)
KEY 
POINT
KEY 
POINT

Classiﬁcation and Marking Tools     509
Cisco QoS design guide documents make recommendations not only as to where to perform 
marking, but also as to which CoS, IPP, and DSCP values to set for certain types of trafﬁc. 
Table 14-9 summarizes those recommendations.
Marking Using Policers
Trafﬁc policers measure the trafﬁc rate for data entering or exiting an interface, with the goal of 
determining if a conﬁgured trafﬁc contract has been exceeded. The contract has two components: 
a trafﬁc rate, conﬁgured in bits/second, and a burst size, conﬁgured as a number of bytes. If 
the trafﬁc is within the contract, all packets are considered to have conformed to the contract. 
However, if the rate or burst exceeds the contract, then some packets are considered to have 
exceeded the contract. QoS actions can be taken on both categories of trafﬁc.
The simplest form of policing enforces the trafﬁc contract strictly by forwarding conforming 
packets and discarding packets that exceed the contract. However, both IOS policers allow a 
compromise action in which the policer marks down packets instead of dropping them. To mark 
down the packet, the policer re-marks a QoS ﬁeld, typically IPP or DSCP, with a value that makes 
the packet more likely to be discarded downstream. For instance, a policer could re-mark AF11 
packets that exceed a contract with a new DSCP value of AF13, but not discard the packet. By 
doing so, the packet still passes through the router, but if the packet experiences congestion later 
in its travels, it is more likely to be discarded than it would have otherwise been. (Remember, 
DiffServ suggests that AF13 is more likely to be discarded than AF11 trafﬁc.)
Table 14-9
RFC-Recommended Values for Marking
Type of Trafﬁc
CoS
IPP
DSCP
Voice payload
5
5
EF
Video payload
4
4
AF41
Voice/video signaling
3
3
CS3
Mission-critical data
3
3
AF31, AF32, AF33
Transactional data
2
2
AF21, AF22, AF23
Bulk data
1
1
AF11, AF12, AF13
Best effort
0
0
BE
Scavenger (less than best effort)
0
0
2, 4,6
Also note that Cisco recommends not to use more than four or five different service classes for data traffic. By using 
more classes, the difference in behavior between the various classes tends to blur. For the same reason, do not give too 
many data service classes high-priority service.

510     Chapter 14: Classification and Marking
When marking requirements can be performed by using CB Marking, CB Marking should be used 
instead of either policer. However, if a requirement exists to mark packets based on whether they 
conform to a trafﬁc contract, marking with policers must be used. Chapter 16, “Shaping and 
Policing,” covers CB policing, with an example of the syntax it uses for marking packets.
Policy Routing for Marking
Policy routing provides the capability to route a packet based on information in the packet besides 
the destination IP address. The policy routing conﬁguration uses route maps to classify packets. 
The route-map clauses include set commands that deﬁne the route (based on setting a next-hop 
IP address or outgoing interface). 
Policy routing can also mark the IPP ﬁeld, or the entire ToS byte, using the set command in a route 
map. When using policy routing for marking purposes, the following logic sequence is used:
1.
Packets are examined as they enter an interface.
2.
A route map is used to match subsets of the packets.
3.
Mark either the IPP or entire ToS byte using the set command.
4.
The traditional policy routing function of using the set command to deﬁne the route may also 
be conﬁgured, but it is not required.
Policy routing should be used to mark packets only in cases where CB Marking is not available, 
or when a router needs to both use policy routing and mark packets entering the same interface. 
Refer to Chapter 7, “IP Forwarding (Routing),” for a review of policy routing conﬁguration, and 
note the syntax of the set commands for marking, listed in Table 7-5.

Foundation Summary     511
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most of the Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
listed in the “Foundation Topics” section of the chapter. Please take the time to read and study the 
details in this section of the chapter, as well as review the items in the “Foundation Topics” section 
noted with a Key Point icon.
Table 14-10 lists the various match commands that can be used for MQC tools like CB Marking.
Table 14-10
match Conﬁguration Command Reference for MQC Tools 
Command
Function
match [ip] precedence precedence-value 
[precedence-value precedence-value 
precedence-value]
Matches precedence in IPv4 packets when the ip 
parameter is included; matches IPv4 and IPv6 
packets when ip parameter is missing.
match access-group {access-group | 
name access-group-name}
Matches an ACL by number or name.
match any
Matches all packets.
match class-map class-map-name
Matches based on another class map.
match cos cos-value [cos-value cos-value 
cos-value]
Matches a CoS value.
match destination-address mac address
Matches a destination MAC address.
match fr-dlci dlci-number
Matches a particular Frame Relay DLCI.
match input-interface interface-name
Matches an ingress interface.
match ip dscp ip-dscp-value [ip-dscp-value 
ip-dscp- value ip-dscp-value ip-dscp-value 
ip-dscp-value ip- dscp-value ip-dscp-value]
Matches DSCP in IPv4 packets when the ip 
parameter is included; matches IPv4 and IPv6 
packets when the ip parameter is missing. 
match ip rtp starting-port-number port-range
Matches the RTP’s UDP port-number range, even 
values only.
match mpls experimental number
Matches an MPLS Experimental value.
match mpls experimental topmost value
When multiple labels are in use, matches the 
MPLS EXP ﬁeld in the topmost label.
continues

512     Chapter 14: Classification and Marking
Table 14-11 lists the RFCs related to DiffServ. 
Command
Function
match not match-criteria
Reverses the matching logic. In other words, 
things matched by the matching criteria do not 
match the class map.
match packet length {max maximum-
length-value [min minimum-length-value] | 
min minimum-length-value [max maximum-
length-value]}
Matches packets based on the minimum length, 
maximum length, or both.
match protocol citrix app application-
name-string
Matches NBAR Citrix applications.
match protocol http [url url-string | host 
hostname- string | mime MIME-type]
Matches a host name, URL string, or MIME type.
match protocol protocol-name
Matches NBAR protocol types.
match protocol rtp [audio | video | 
payload-type payload-string]
Matches RTP audio or video payload, based on the 
payload type. Also allows explicitly specifying 
payload types.
match qos-group qos-group-value
Matches a QoS group.
match source-address mac address-destination
Matches a source MAC address. 
Table 14-11
DiffServ RFCs
RFC
Title
Comments
2474
Deﬁnition of the Differentiated Services Field 
(DS Field) in the IPv4 and IPv6 Headers
Contains the details of the 6-bit DSCP ﬁeld in 
IP header
2475
An Architecture for Differentiated Service
The core DiffServ conceptual document
2597
Assured Forwarding PHB Group
Deﬁnes a set of 12 DSCP values and a 
convention for their use
2598
An Expedited Forwarding PHB
Deﬁnes a single DSCP value as a convention 
for use as a low-latency class
3260
New Terminology and Clariﬁcations for 
DiffServ
Clariﬁes, but does not supersede, existing 
DiffServ RFCs
Table 14-10
match Conﬁguration Command Reference for MQC Tools (Continued)

Memory Builders     513
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
IP Precedence, ToS byte, Differentiated Services, DS ﬁeld, Per-Hop Behavior, 
Assured Forwarding, Expedited Forwarding, Class Selector, Class of Service, 
Differentiated Services Code Point, User Priority, Discard Eligible, Cell Loss 
Priority, MPLS Experimental, class map, policy map, service policy, Modular QoS 
CLI, Class-Based Marking, Network Based Application Recognition
Refer to the CD-based glossary to check your answers.
Further Reading
Cisco QoS Exam Certiﬁcation Guide, by Wendell Odom and Michael Cavanaugh
The Enterprise QoS SRND document, posted at http://www.cisco.com/go/srnd, provides great 
background and details for real-life QoS deployments.

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■(Quality of Service) QoS
— Congestion Management
— Congestion Avoidance

C H A P T E R 15
Congestion Management 
and Avoidance
Congestion management, commonly called queuing, refers to how a router or switch manages 
packets or frames while they wait to exit a device. With routers, the waiting occurs once IP 
forwarding has been completed, so the queuing is always considered to be output queuing. LAN 
switches often support both output queuing and input queuing, where input queuing is used for 
received frames that are waiting to be switched to the switch’s output interfaces.
Congestion avoidance refers to the logic used when deciding if and when packets should be 
dropped as a queuing system becomes more congested. This chapter covers a wide variety of 
Cisco IOS queuing tools, along with the most pervasive congestion avoidance tool, namely 
Weighted Random Early Detection (WRED).
“Do I Know This Already?” Quiz
Table 15-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
Table 15-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in 
This Section
Score
Cisco Router Queuing Concepts
1
Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ
2–5
Weighted Random Early Detection
6–7
LAN Switch Congestion Management and Avoidance
8–9
Total Score

516     Chapter 15: Congestion Management and Avoidance
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can ﬁnd 
the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
What is the main beneﬁt of the hardware queue on a Cisco router interface? 
a. Prioritizes latency-sensitive packets so that they are always scheduled next
b. Reserves a minimum amount of bandwidth for particular classes of trafﬁc
c. Provides a queue so that as soon as the interface is available to send another packet, 
the packet can be sent, without requiring an interrupt to the router CPU
d. Allows conﬁguration of a percentage of the remaining link bandwidth, after allocating 
bandwidth to the LLQ and the class-default queue
2.
Which of the following are beneﬁts of custom queuing being enabled on a Cisco router 
interface? 
a. Prioritizes latency-sensitive packets so that they are always scheduled next
b. Reserves a minimum amount of bandwidth for particular classes of trafﬁc
c. Provides a place to hold packets in RAM until space becomes available in the 
hardware queue for the interface
d. Allows conﬁguration of a percentage of the remaining link bandwidth, after 
allocating bandwidth to the LLQ and the class-default queue
3.
Which of the following are reasons why WFQ might discard a packet instead of putting it 
into the correct queue? 
a. The hold-queue limit for all combined WFQ queues has been exceeded.
b. The queue length for the ﬂow has passed the WRED minimum drop threshold.
c. The WFQ queue length for the queue where the newly arrived packet should be placed 
has exceeded the CDT.
d. ECN feedback has been signaled, requesting that the TCP sender slow down.

“Do I Know This Already?” Quiz     517
4.
Examine the following conﬁguration snippet. If a new class, called class3, was added to the 
policy map, which of the following commands could be used to reserve 25 kbps of bandwidth 
for the class? 
policy-map fred
 class class1
  priority 20
 class class2
  bandwidth 30
!
interface serial 0/0
 bandwidth 100
 service-policy output fred
a. priority 25
b. bandwidth 25
c. bandwidth percent 25
d. bandwidth remaining-percent 25
5.
Examine the following conﬁguration snippet. How much bandwidth does Cisco IOS assign 
to class2? 
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ffffrrrreeeedddd
    ccccllllaaaassssssss    ccccllllaaaassssssss1111
        pppprrrriiiioooorrrriiiittttyyyy    ppppeeeerrrrcccceeeennnntttt    22220000
    ccccllllaaaassssssss    ccccllllaaaassssssss2222
        bbbbaaaannnnddddwwwwiiiiddddtttthhhh    rrrreeeemmmmaaaaiiiinnnniiiinnnngggg    ppppeeeerrrrcccceeeennnntttt    22220000
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000////0000
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111100000000
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    ffffrrrreeeedddd
a. 10 kbps
b. 11 kbps
c. 20 kbps
d. 21 kbps
e. Not enough information to tell
6.
Which of the following impacts the percentage of packet discards when using WRED, when 
the current average queue depth is between the minimum and maximum thresholds?
a. The bandwidth command setting on the interface
b. The mark probability denominator (MPD)
c. The exponential weighting constant
d. The congestive discard threshold

518     Chapter 15: Congestion Management and Avoidance
7.
Which of the following commands, under an interface like s0/0, would enable WRED and tell 
it to use IP Precedence (IPP) when choosing its default trafﬁc proﬁles?
a. random-detect
b. random-detect precedence-based
c. random-detect dscp-based
d. random-detect precedence 1 20 30 40
8.
On a Catalyst 3550 switch, interface fa0/1 has been conﬁgured for WRR scheduling, and fa0/2 
has been conﬁgured for WRR scheduling with an expedite queue. Which of the following is 
true regarding interface fa0/2?
a. It must be conﬁgured with the priority-queue out command.
b. The last parameter (w4) of the wrr-queue bandwidth w1 w2 w3 w4 command must be 0.
c. Only CoS 5 frames can be placed into queue 1, the expedite queue.
d. Only DSCP EF frames can be placed into queue 4, the expedite queue.
9.
Which of the following statements are true when comparing WRED operation in a Cisco 3550 
switch with WRED operation in a Cisco router?
a. 3550s do not include a conﬁgurable mark probability denominator.
b. 3550s do allow for the conﬁguration of a minimum and maximum threshold like router 
WRED.
c. Both allow for a different WRED proﬁle for each DSCP. 
d. All of these answers are correct.

Cisco Router Queuing Concepts     519
Foundation Topics
Cisco Router Queuing Concepts
Cisco routers can be conﬁgured to perform fancy queuing for packets that are waiting to exit 
an interface. For instance, if a router receives 5 Mbps of trafﬁc every second for the next 
several seconds, and all that trafﬁc needs to exit a T1 serial link, the router can’t forward all 
the trafﬁc. So, the router places the packets into one or more software queues, which can then 
be managed—thus impacting which packets get to leave next, and which packets might be 
discarded. 
Software Queues and Hardware Queues
Although many network engineers already understand queuing, many overlook some of the details 
behind the concepts of a hardware queue and a software queue associated with each physical 
interface. The queues created on an interface by the popularly known queuing tools are called 
software queues, as these queues are implemented in software. However, when the queuing 
scheduler picks the next packet to take from the software queues, the packet does not move 
directly out the interface. Instead, the router moves the packet from the interface software queue 
to a small hardware FIFO (ﬁrst-in, ﬁrst-out) queue on each interface. Cisco calls this separate, 
ﬁnal queue either the transmit queue (TX queue) or transmit ring (TX ring), depending on the 
model of the router; generically, these queues are called hardware queues. 
Hardware queues provide the following features:
■
When an interface ﬁnishes sending a packet, the next packet from the hardware queue can be 
encoded and sent out the interface, without requiring a software interrupt to the CPU—ensuring 
full use of interface bandwidth.
■
Always use FIFO logic.
■
Cannot be affected by IOS queuing tools.
■
IOS automatically shrinks the length of the hardware queue to a smaller length than the 
default when a queuing tool is present.
■
Short hardware queue lengths mean packets are more likely to be in the controllable software 
queues, giving the software queuing more control of the trafﬁc leaving the interface.
The only function of a hardware queue that can be manipulated is the length of the queue. 
Example 15-1 shows how to see the current length of the queue, and how to change the length.  
KEY 
POINT

520     Chapter 15: Congestion Management and Avoidance
Queuing on Interfaces Versus Subinterfaces and Virtual Circuits
IOS queuing tools can create and manage software queues associated with a physical interface, and 
then the packets drain into the hardware queue associated with the interface. Additionally, queuing 
tools can be used in conjunction with trafﬁc shaping. Trafﬁc-shaping tools delay packets to ensure 
that a class of packets does not exceed a deﬁned trafﬁc rate. While delaying the packets, the shaping 
function queues the packets—by default in a FIFO queue. Depending on the type of shaping tool in 
use, various queuing tools can be conﬁgured to manage the packets delayed by the shaping tool.
Chapter 16, “Shaping and Policing,” covers trafﬁc shaping, including how to use queuing tools 
with shapers. This chapter’s queuing coverage focuses on the implementation of software queuing 
tools directly on the physical interface.
Comparing Queuing Tools
Cisco IOS provides a wide variety of queuing tools. The upcoming sections of this chapter 
describe several different IOS queuing tools, with a brief summary ending the section on queuing. 
Table 15-2 summarizes the main characteristics of different queuing tools that you will want to 
keep in mind while comparing each successive queuing tool. 
Example 15-1
TX Queue Length: Finding and Changing the Length
! The example begins with only FIFO queuing on the interface. For this
! router, it defaults to a TX queue length 16.
R3# sssshhhhoooowwww    ccccoooonnnnttttrrrroooolllllllleeeerrrrssss    sssseeeerrrriiiiaaaallll    0000////0000
Interface Serial0/0
! about 30 lines omitted for brevity
tx_limited=0(16)
! lines omitted for brevity
! Next, the TX ring is set to length 1.
! (The smallest recommended value is 2.) 
R3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# iiiinnnntttt    ssss    0000////0000
R3(config-if)# ttttxxxx----rrrriiiinnnngggg----lllliiiimmmmiiiitttt    1111
R3(config-if)# ^^^^ZZZZ
Table 15-2
Key Comparison Points for Queuing Tools 
KEY 
POINT
Feature
Deﬁnition
Classiﬁcation
The ability to look at packet headers to choose the right queue for each 
packet 
Drop policy
The rules used to choose which packets to drop as queues begin to ﬁll
Scheduling 
The logic used to determine which packet should be dequeued next

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     521
Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ
This section hits the highlights of a few of the queuing tools, and covers detailed conﬁguration for 
the more popular tools—speciﬁcally weighted fair queuing (WFQ), class-based WFQ (CBWFQ), 
and low-latency queuing (LLQ). The queuing tools are covered in the order in which they were 
added as IOS features.
FIFO Queuing
The primary reason for queuing is that a router needs to hold a packet in memory while the 
outgoing interface is busy sending another packet. FIFO queuing simply provides a software 
queue to hold packets while they are waiting to exit an interface. Packets are scheduled to leave 
the interface based on when they arrived at the output interface. 
Because IOS defaults to use WFQ on serial interfaces with bandwidths of E1 speeds (2.048 Mbps) 
or less, to conﬁgure FIFO queuing, you simply need to disable WFQ (or any other queuing tool) 
from the interface. The only other useful setting for FIFO queuing is to set the length of the FIFO 
queue using the hold-queue x out interface subcommand, where x is the maximum queue length. 
Example 15-2 shows how to conﬁgure and view FIFO queuing.
Feature
Deﬁnition
Maximum number of queues
Deﬁnes the number of unique classes of packets for a queuing tool
Maximum queue length
The maximum number of packets in a single queue
Example 15-2
FIFO Queuing Conﬁguration 
! Below, FIFO is enabled by disabling the default queuing tool (WFQ).
R3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# iiiinnnntttt    ssss    0000////0000
R3(config-if)# nnnnoooo    ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee
R3(config-if)# ^^^^ZZZZ
! Next, the queuing type is listed as FIFO, with the current queue length of 0,
! and the maximum queue length of (default) 40.
R3# sssshhhh    iiiinnnntttt    ssss    0000////0000
Serial0/0 is up, line protocol is up
! lines omitted for brevity
Queueing strategy: fifo
Output queue: 0/40 (size/max) 
Table 15-2
Key Comparison Points for Queuing Tools (Continued)

522     Chapter 15: Congestion Management and Avoidance
Priority Queuing
Priority queuing’s most distinctive feature is its scheduler. PQ schedules trafﬁc such that the 
higher-priority queues always get serviced instead of lower-priority queues. PQ uses up to four 
queues, named high, medium, normal, and low, and they are scheduled as shown in Figure 15-1.
Figure 15-1
PQ Scheduling Logic
The PQ scheduler has some obvious beneﬁts and drawbacks. Packets in the high queue get 
wonderful service—they can claim 100 percent of the link bandwidth, with minimal delay and 
minimal jitter. (Generally speaking, the idea of a queue that provides very low delay and low jitter 
is called a low-latency queue [LLQ] or priority queue.) However, when the interface becomes 
congested, the lower queues experience queue starvation, sometimes getting little or no 
bandwidth, with queuing delay times varying wildly as congestion occurs and abates.
Although the scheduler is the most interesting part of PQ, it has several other features as well. PQ 
classiﬁes packets into the four queues via conﬁgurable classiﬁcation details, including references 
to IP ACLs. However, PQ supports fewer classiﬁcation options than do the more recently added 
CBWFQ and LLQ. PQ uses tail-drop logic, so when a new packet arrives for a particular queue, 
and the queue is full, the new packet is dropped. The queue lengths can be conﬁgured to different 
values, with the default queue lengths being 20, 40, 60, and 80 for the high, medium, normal, and 
low queues, respectively.  
Any
Packets in
This Queue?
Put Packet in
Hardware Queue
Yes
Any
Packets in
This Queue?
Any
Packets in
This Queue?
Any
Packets in
This Queue?
No
Yes
Wait Until Hardware 
Queue Has More
Room
Yes
Yes
No
No
High
Low
Normal
Medium

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     523
Custom Queuing
CQ addresses the biggest drawback of PQ by providing a guaranteed minimum bandwidth to each 
queue, thereby avoiding queue starvation. CQ has 16 queues, implying 16 classiﬁcation 
categories, which is plenty for most applications. (There is also one hidden system queue for 
important overhead trafﬁc; the system queue cannot be conﬁgured or disabled.) The negative part 
of CQ, as compared to PQ, is the lack of a high-priority queue that is always serviced ﬁrst. That 
is, CQ has no way to provide guaranteed low-latency service to any trafﬁc.
The CQ scheduler reserves an approximate percentage of overall link bandwidth for each queue, 
but instead of conﬁguring actual percentages, CQ approximates the bandwidth percentages using 
a simple algorithm. Figure 15-2 depicts the CQ scheduler logic. 
Figure 15-2
CQ Scheduling Logic for Current Queue
The CQ scheduler performs round-robin service on each queue, beginning with queue 1. CQ takes 
packets from the queue, until the total byte count speciﬁed for the queue has been met or exceeded. 
After the queue has been serviced for the deﬁned byte count, or when the queue does not have any 
more packets, CQ moves on to the next queue and repeats the process. 
None of the queues has an implied priority—they simply have an implied percentage 
bandwidth. In fact, just because a queue might be conﬁgured with a byte count that implies 
60 percent of the link’s bandwidth, if 90 percent of the trafﬁc ends up in that queue, you 
could argue that the queue is a low-priority queue. Table 15-3 shows two examples of the 
percentages of link bandwidth assigned to each queue. Note that if some of the possible 
16 queues are not conﬁgured, as is the case with each example, the unconﬁgured queues are 
essentially ignored. 
Table 15-3
Two Examples of CQ Byte Counts and Percentage Bandwidth Reserved 
CQ Queue
Example 1 
Byte Count
Example 1 Link 
Percent
Example 2 Byte 
Count
Example 2 Link 
Percent
1
5,000
25%
10,000
20%
2
5,000
25%
5,000
10%
continues
Move Packet to 
Hardware Queue; Wait for More 
Space in Hardware Queue
 
Any Packets in
the Current
Queue?
Repeat This
Process with
Next Queue
Counter Equals or
Exceeds Byte Count for
This Queue? 
No
Yes
Yes
Add Packet 
Length to Counter 
No

524     Chapter 15: Congestion Management and Avoidance
The link percentage calculated in Table 15-3 used this simple formula:
Like PQ, the scheduler is the most interesting part of CQ. As for the other features of CQ, it is 
much like PQ: CQ uses the same classiﬁcation options, and can use tail drop only for managing 
drops. Because no one queue is better than another, CQ defaults to a queue length of 20 packets.
Weighted Fair Queuing
Weighted fair queuing differs from PQ and CQ in several signiﬁcant ways. The most outwardly 
obvious difference is that WFQ does not allow classiﬁcation options to be conﬁgured. WFQ 
automatically classiﬁes packets based on ﬂows, with each ﬂow being placed into a separate queue. 
For WFQ purposes, a ﬂow is deﬁned as all packets with the same values for the following: 
■
Source IP address
■
Destination IP address
■
Transport layer protocol (TCP or UDP) 
■
TCP or UDP source port
■
TCP or UDP destination port
■
IP Precedence
Because WFQ puts packets of different ﬂows in different queues, it necessarily has a much larger 
number of queues than any of the non-ﬂow-based queuing tools. The WFQ scheduler uses logic 
that is quite different from the logic of other queuing tools so that it can deal with the larger 
number of queues. However, the overall goals of the WFQ scheduler are straightforward, and are 
summarized as follows:
■
Flows with the same IPP should be given the same amount of bandwidth, regardless of how 
many bytes are sent in each ﬂow. 
CQ Queue
Example 1 
Byte Count
Example 1 Link 
Percent
Example 2 Byte 
Count
Example 2 Link 
Percent
3
5,000
25%
10,000
20%
4
5,000
25%
15,000
30%
5
Not used
Not used
10,000
20%
Table 15-3
Two Examples of CQ Byte Counts and Percentage Bandwidth Reserved (Continued)
 Byte count for queue x
sum of byte counts for all queues
-------------------------------------------------------------------------------
KEY 
POINT
KEY 
POINT

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     525
■
For ﬂows with different IPP values, give ﬂows with higher IPP a proportionally higher amount 
of bandwidth.
■
The result: WFQ favors lower-volume, higher IPP ﬂows.
For instance, if WFQ is currently managing ten ﬂows with equal IPP values, on a 128-kbps interface, 
each ﬂow effectively gets 12.8 kbps. Queues start to lengthen for ﬂows that offer more than 12.8 kbps 
of trafﬁc, meaning longer queuing delays. Queues shorten for ﬂows that offer less than 12.8 kbps—
in fact, the queues may empty, and WFQ will then allocate additional bandwidth to the other queues. 
The result is that the lower-volume ﬂows prosper, and the higher-volume ﬂows suffer. 
The second goal of the WFQ scheduler is to provide more bandwidth to ﬂows with higher IPP 
values. To do so, the ﬂows are weighted based on IPP plus 1. In other words, precedence 7 ﬂows 
get eight times more bandwidth than do precedence 0 ﬂows, because (7 + 1) / (0 + 1) = 8. For 
another example, if you compare precedence 3 to precedence 0, the ratio is (3 + 1) / (0 + 1) = 4.
WFQ Scheduler: The Process
To achieve WFQ’s goals for allocating link bandwidth, WFQ uses a scheduler that is actually 
pretty simple. The WFQ scheduler takes the packet with the lowest sequence number (SN) 
(also sometimes called ﬁnish time, or FT) when it needs to move the next packet to the hardware 
queue. WFQ assigns each packet an SN when the packet is added to a WFQ ﬂow queue. The SN 
assignment process is actually the more interesting part of the scheduler.
The WFQ scheduler includes both the packet length and IPP when calculating the SN. The 
formula for calculating the SN for a packet is as follows:
Previous_SN + (weight * new_packet_length)
Where weight is calculated as follows:
Weight = 32,384 / (IP_Precedence + 1)
The formula considers the length of the new packet, the weight of the ﬂow, and the previous SN. 
By considering the packet length, the SN calculation results in a higher number for larger packets, 
and a lower number for smaller packets. By including the SN of the previous packet enqueued into 
that queue, the formula assigns a larger number for packets in queues that already have a larger 
number of packets enqueued. And by putting the weight (IPP + 1) in the denominator, packets with 
higher IPP values end up with lower SNs. Figure 15-3 shows how two packets are assigned their 
sequence numbers.
Calculating the SN for the packet of an existing ﬂow in Figure 15-3 is relatively straightforward. 
However, the ﬁrst packet in a new ﬂow does not have a previous SN to use in the formula. The ﬁgure 
shows that the SN of the last packet moved to the hardware queue is used as the new ﬂow’s previous SN. 

526     Chapter 15: Congestion Management and Avoidance
Figure 15-3
WFQ Sequence Number Assignment Example
Once the sequence numbers are assigned, the scheduler’s job in choosing which packet to take 
next is simple: it takes the packet with the lowest SN among all the queues.
WFQ Drop Policy, Number of Queues, and Queue Lengths
WFQ uses a two-step process called modiﬁed tail drop to choose when to drop packets. First, WFQ 
considers the absolute limit on the number of packets enqueued among all queues; this limit is 
called the hold-queue limit. If a new packet arrives, and the hold-queue limit has been reached, the 
packet is discarded. That part of the decision is based not on a single queue, but on the whole WFQ 
queuing system for the interface. 
Second, WFQ considers the length of the queue into which the newly arrived packet will be 
placed. Before adding a new packet to its queue, the congestive discard threshold (CDT) is 
checked against the actual length of that queue. If that queue is longer than CDT packets long, one 
packet is discarded—but maybe not the newly arrived packet. Figure 15-4 depicts the WFQ drop 
decision process.
Figure 15-4
WFQ Modiﬁed Tail Drop and Congestive Discard Threshold
TX Ring 
Last Packet
in TX Ring: 
SN=100
Existing
Packet:
SN=1000
New packet 1, Flow 1:
Length 100, 
Precedence 0
Existing: Flow 1
New Flow: Flow 2
New packet 2, Flow 2:
Length 500, 
Precedence 0
SN = 1000 + 32384*100 = 3,239,000 
SN = 100 + 32384*500 = 16,192,100 
Weight for
Precedence=0 is
32,384
Hold-queue
Limit
Exceeded?
Yes
Packet
Discarded
Calculate SN
CDT
Exceeded for
This Queue? 
Is There a Higher
SN Enqueued in 
Another Queue?
No
No
No
Yes
Enqueue New Packet
Discard Highest
SN Packet
Yes

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     527
Note that each newly arriving packet goes through this process, but in one branch of the logic, the 
newly arrived packet is not discarded—another one is discarded. Essentially, if the new packet 
needs to go into a queue that has exceeded CDT, WFQ discards the highest-SN packet from any 
of the queues.
Types of WFQ Queues 
WFQ can be conﬁgured for a maximum of 4096 queues, called dynamic queues in WFQ show 
command output. Interestingly, the allowed conﬁgurable values are powers of 2, between 16 
and 4096, inclusive. IOS restricts the values because WFQ performs a hash algorithm to 
classify trafﬁc, and the hash algorithm only works when the number of queues is one of these 
valid values. Additionally, WFQ keeps eight hidden queues for overhead trafﬁc generated by 
the router. WFQ uses a very low weight for these queues to give preference to the overhead 
trafﬁc.
Also, some of the up to 4096 queues can be used by the Resource Reservation Protocol (RSVP) 
to reserve bandwidth. RSVP uses signaling to reserve a minimum bandwidth for particular ﬂows 
in a network, relying on queuing tools to actually implement the bandwidth reservations. WFQ, 
CBWFQ, and LLQ support RSVP.
WFQ Conﬁguration
WFQ requires very little conﬁguration—in fact, it is on by default on E1-and-slower serial links. 
So, with default settings, WFQ literally requires no conﬁguration commands. Table 15-4 lists 
the commands related to WFQ. Of particular importance, note that the fair-queue command 
allows setting of the CDT, number of queues, and number of RSVP queues, and the hold-queue 
command sets the number of packets allowed in all queues on the interface.
NOTE
CDT must be set to a power of 2; IOS will not accept any other values.
Table 15-4
Command Reference for WFQ 
Command
Mode and Function
fair-queue [congestive-discard-threshold [dynamic-
queues [reservable-queues]]]
Interface mode; enables WFQ and changes 
defaults
hold-queue length out
Interface mode; changes the length of the hold 
queue
show queue interface-name interface-number [vc 
[vpi/] vci]]
Lists information about the packets waiting in 
a queue 
show queueing [custom | fair | priority | random-
detect [interface atm-subinterface [vc [[vpi/] vci]]]]
Lists conﬁguration and statistical information 
about the queuing tool 

528     Chapter 15: Congestion Management and Avoidance
Example 15-3 shows a basic conﬁguration that deﬁnes non-default settings, along with show 
commands. To conﬁgure WFQ as simply as possible, the command fair-queue would be used, 
with no parameters, and the hold-queue command would not be needed at all.
The most interesting show command for WFQ is the show queue command. Note that a summary 
section is listed ﬁrst, followed by a stanza of output for each active ﬂow queue. The details of the 
ﬂow are listed, as well as statistics for the ﬂow queue. 
Example 15-3
WFQ Conﬁguration and show Commands 
! Below, CDT is set to 100, number of queues to 64, number of RSVP queues to 10,
! and the overall limit (hold queue) of 500.
R3# ccccoooonnnnffffiiiigggguuuurrrreeee    tttteeeerrrrmmmmiiiinnnnaaaallll
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# iiiinnnntttt    ssss    0000////0000
R3(config-if)# ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee    111100000000    66664444    11110000
R3(config-if)# hhhhoooolllldddd----qqqquuuueeeeuuuueeee    555500000000    oooouuuutttt
R3(config-if)# ^^^^ZZZZ
! The output below does not match typical WFQ terminology in some cases. The 
! “max total” is the hold queue size, with “threshold” being CDT, and “size”
! being the actual number of packets enqueued at that time.
R3# sssshhhhoooowwww    iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000////0000
Serial0/0 is up, line protocol is up 
!lines omitted for brevity
  Queueing strategy: weighted fair
  Output queue: 95/500/100/12474 (size/max total/threshold/drops) 
     Conversations  5/6/64 (active/max active/max total)
     Reserved Conversations 0/0 (allocated/max allocated)
     Available Bandwidth 1158 kilobits/sec
! lines omitted for brevity
! Below, details for a VoIP flow queue are shown, with statistics for queue
! depth and weight. The weight is listed as 5397, which was calculated as 
! (32,384 / ((IPP of 5) + 1)). 
R3# sssshhhh    qqqquuuueeeeuuuueeee    ssss    0000////0000
  Input queue: 0/75/0/0 (size/max/drops/flushes); Total output drops: 13567
  Queueing strategy: weighted fair
  Output queue: 125/500/100/13567 (size/max total/threshold/drops) 
     Conversations  5/7/64 (active/max active/max total)
     Reserved Conversations 0/0 (allocated/max allocated)
     Available Bandwidth 1158 kilobits/sec
  (depth/weight/total drops/no-buffer drops/interleaves) 61/5397/654/0/0
  Conversation 61, linktype: ip, length: 64
  source: 192.168.3.254, destination: 192.168.2.251, id: 0x0134, ttl: 253,
  TOS: 184 prot: 17, source port 16638, destination port 19476
! lines omitted for brevity

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     529
Class-Based WFQ and Low-Latency Queuing
Cisco created CBWFQ and LLQ using some of the best concepts from PQ, CQ, and WFQ, while 
adding several additional features. CBWFQ reserves bandwidth for each queue, and provides the 
ability to use WFQ concepts for packets in the default (class-default) queue. LLQ adds to CBWFQ 
the concept of a priority queue, but unlike PQ, LLQ prevents the high-priority queue from starving 
other queues. Additionally, both CBWFQ and LLQ use MQC for conﬁguration, which means that 
they have robust classiﬁcation options, including NBAR.
CBWFQ and LLQ use almost identical conﬁguration; the one major difference is whether the 
bandwidth command (CBWFQ) or the priority command (LLQ) is used to conﬁgure the tool. 
Because both tools use MQC, both use class maps for classiﬁcation and policy maps to create a 
set of classes to be used on an interface. The classes deﬁned in the policy map each deﬁne a single 
queue; as a result, the terms queue and class are often used interchangeably when working with 
LLQ and CBWFQ.
CBWFQ and LLQ support 64 queues/classes. The maximum queue length can be changed, with 
the maximum possible value and the default length varying based on the model of router and the 
amount of memory installed. They both also have one special queue called the class-default queue. 
This queue exists even if it is not conﬁgured. If a packet does not match any of the explicitly 
conﬁgured classes in a policy map, IOS places the packet into the class-default class/queue. 
CBWFQ settings can be conﬁgured for the class-default queue. 
The sections that follow cover the details of CBWFQ, and then LLQ.
CBWFQ Basic Features and Conﬁguration
The CBWFQ scheduler guarantees a minimum percentage of a link’s bandwidth to each 
class/queue. If all queues have a large number packets, each queue gets the percentage bandwidth 
implied by the conﬁguration. However, if some queues are empty and do not need their bandwidth 
for a short period, the bandwidth is proportionally allocated across the other classes. (Cisco does 
not publish the details of how CBWFQ achieves these functions.)
Table 15-5 summarizes some of the key features of CBWFQ.
Table 15-5
CBWFQ Functions and Features 
KEY 
POINT
CBWFQ Feature
Description
Classiﬁcation
Classiﬁes based on anything that MQC commands can match
Drop policy
Tail drop or WRED, conﬁgurable per queue
Number of queues
64
continues

530     Chapter 15: Congestion Management and Avoidance
Table 15-6 lists the key CBWFQ commands that were not covered in Chapter 14.
Example 15-4 shows a simple CBWFQ conﬁguration that uses the class-default queue. The 
conﬁguration was created on R3 in Figure 15-5, using the following requirements:
■
All VoIP payload trafﬁc is placed in a queue.
■
All other trafﬁc is placed in another queue.
■
Give the VoIP trafﬁc 50 percent of the bandwidth.
■
WFQ should be used on the non-VoIP trafﬁc.
CBWFQ Feature
Description
Maximum queue length
Varies based on router model and memory
Scheduling inside a single 
queue
FIFO on 63 queues; FIFO or WFQ on class-default queue*
Scheduling among all 
queues
Result of the scheduler provides a percentage of guaranteed bandwidth to 
each queue
*Cisco 7500 series routers support FIFO or WFQ in all the CBWFQ queues.
Table 15-6
Command Reference for CBWFQ
Command
Mode and Function
bandwidth {bandwidth-kbps | 
percent percent}
Class subcommand; sets literal or percentage bandwidth for the 
class
bandwidth {remaining percent 
percent}
Class subcommand; sets percentage of remaining bandwidth for 
the class
queue-limit queue-limit
Class subcommand; sets the maximum length of a CBWFQ queue
fair-queue [queue-limit queue-
value]
Class subcommand; enables WFQ in the class (class-default only)
max-reserved-bandwidth 
percent
Interface subcommand; deﬁnes the percentage of link bandwidth 
that can be reserved for CBWFQ queues besides class-default 
(default: 75 percent)
Table 15-5
CBWFQ Functions and Features (Continued)
KEY 
POINT

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     531
Figure 15-5
Network Used with CBWFQ and LLQ Conﬁguration Examples
Example 15-4
CBWFQ with VoIP in One Queue, Everything Else in Class-Default 
! The class map matches on UDP/RTP header and RTP port numbers. 
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    vvvvooooiiiipppp----rrrrttttpppp
        mmmmaaaattttcccchhhh    iiiipppp    rrrrttttpppp    11116666333388884444    11116666333388883333
! Next, the policy map uses the bbbbaaaannnnddddwwwwiiiiddddtttthhhh command to reserve 64 kbps for the class
! voip-rtp. Class-default gets some of the leftover bandwidth by default.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp
        ccccllllaaaassssssss    vvvvooooiiiipppp----rrrrttttpppp
            bbbbaaaannnnddddwwwwiiiiddddtttthhhh    66664444
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee
! The interface’s bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111122228888 command is used as the basis for the limit on the
! amount of bandwidth that can be allocated in the policy map queue-voip. 
! The llllooooaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll command sets how often counters are updated. Also, note 
! that the ppppoooolllliiiiccccyyyy----mmmmaaaapppp is enabled for output; input is not allowed on routers for
! policy maps that perform queuing.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    llllooooaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    33330000
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111122228888
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp
! This command lists counters, reserved bandwidth, maximum queue length (listed
! as max threshold), and a reminder that WFQ is used in the class-default queue.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttt    ssss    0000////0000
 Serial0/0 
  Service-policy output:     queue-voip
continues
R1
R3
SW1
Client1
101
s0/0
SW2
Server 1
102
s0/0
E0/0
301
302
R4
1.252
2.252
3.254
3.100
CBWFQ:
VoIP in One Queue
All Else in Another Queue
1.100
Note: All IP Addresses Begin 192.168

532     Chapter 15: Congestion Management and Avoidance
Deﬁning and Limiting CBWFQ Bandwidth
Cisco IOS checks a CBWFQ policy map to ensure that it does not allocate too much bandwidth. 
IOS performs the check when the service-policy output command is added; if the policy map 
deﬁnes too much bandwidth for that interface, the service-policy command is rejected. IOS 
deﬁnes the allowed bandwidth based on two interface subcommands: the bandwidth command, 
and the reserved bandwidth implied by the max-reserved-bandwidth command (abbreviated 
hereafter as int-bw and max-res, respectively). The non-reservable bandwidth is meant for 
overhead trafﬁc, much like CQ’s system queue.
IOS allows a policy map to allocate bandwidth based on the product of int-bw and max-res. 
In other words, with a default max-res setting of 75 (75 percent), on an interface with int-bw 
of 256 (256 kbps), the policy map could allocate at most 192 kbps of bandwidth with its various 
bandwidth commands. Example 15-5 shows a simple example with a policy map that contains 
one class that has 64 kbps conﬁgured. The service-policy command is rejected on an interface 
whose bandwidth is set to 64 kbps.
    Class-map: voip-rtp (match-all)
      136435 packets, 8731840 bytes
      30 second offered rate 51000 bps, drop rate 0 bps
      Match:     ip rtp 16384 16383
      Weighted Fair Queueing
        Output Queue: Conversation 265 
        Bandwidth 64 (kbps) Max Threshold 64 (packets)
        (pkts matched/bytes matched) 48550/3107200
        (depth/total drops/no-buffer drops) 14/0/0
    Class-map: class-default (match-any)
      1958 packets, 1122560 bytes
      30 second offered rate 59000 bps, drop rate 0 bps
      Match: any 
      Weighted Fair Queueing
        Flow Based Fair Queueing
        Maximum Number of Hashed Queues 256 
        (total queued/total drops/no-buffer drops) 15/0/0
! This command just lists the configuration in a concise manner.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp
  Policy Map queue-voip
    Class voip-rtp
      Weighted Fair Queueing
                Bandwidth 64 (kbps) Max Threshold 64 (packets)
    Class class-default
      Weighted Fair Queueing
Flow based Fair Queueing Max Threshold 64 (packets)
Example 15-4
CBWFQ with VoIP in One Queue, Everything Else in Class-Default (Continued)

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     533
To overcome such problems, the engineer can simply pay attention to details and ensure that the 
policy map’s conﬁgured bandwidth commands do not total more than max-res * int-bw. 
Alternatively, max-res can be deﬁned to a higher number, up to a value of 100; however, Cisco 
does not recommend changing max-res.
The bandwidths can also be deﬁned as percentages using either the bandwidth percent or 
bandwidth remaining percent command. By using percentages, it is easier to ensure that a policy 
map does not attempt to allocate too much bandwidth.
The two percentage-based bandwidth command options work in slightly different ways. 
Figure 15-6 shows the concept for each.
Figure 15-6
Bandwidth Percent and Bandwidth Remaining Percent Concepts
The bandwidth percent bw-percent command sets a class’s reserved bandwidth as a percentage 
of int-bw. For instance, in Example 15-4, if the bandwidth percent 50 command had been used 
Example 15-4
CBWFQ Rejected Due to Request for Too Much Bandwidth 
! mmmmaaaaxxxx----rrrreeeessss was defaulted to 75, so only 75% of 64 kbps, or 48 kbps,
! is available. Note that the 48 kbps is mentioned in the error message.
R3(config-cmap)# ppppoooolllliiiiccccyyyy----mmmmaaaapppp    eeeexxxxpppplllliiiicccciiiitttt----bbbbwwww
R3(config-pmap)# ccccllllaaaassssssss    ccccllllaaaassssssss1111
R3(config-pmap-c)# bbbbaaaannnnddddwwwwiiiiddddtttthhhh    66664444
R3(config-pmap-c)# iiiinnnntttt    ssss    0000////1111
R3(config-if)# bbbbaaaannnnddddwwwwiiiiddddtttthhhh    66664444
R3(config-if)# sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    eeeexxxxpppplllliiiicccciiiitttt----bbbbwwww
I/f Serial0/1 class class1 requested bandwidth 64 (kbps), available only 48 (kbps)
Interface
Bandwidth
∑ Bandwidths <= max-res %
Bandwidth Percent:
Percentages of int-bw
Bandwidth remaining percent:
Percentages of max-res * int-bw
∑ Bandwidths <= 100
100%
0%
Max-res %
Unreservable
Bandwidth
Reservable
Bandwidth
KEY 
POINT

534     Chapter 15: Congestion Management and Avoidance
instead of bandwidth 64, the voip-rtp class would have used 50% * 128 kbps, or 64 kbps. IOS 
checks all the bandwidth percent commands in a single policy map to ensure that the total does 
not exceed the max-res setting for the interface—in other words, with a default setting for 
max-res, all the bandwidth percent commands in a single policy map cannot total more than 75. 
The bandwidth remaining percent bw-percent command sets a class’s reserved bandwidth as 
a percentage of remaining bandwidth. Remaining bandwidth is the reservable bandwidth, 
calculated as int-bw * max-res. This method allows a policy map to allocate percentages that 
total 100 (100 percent). Using Example 15-4 again, the remaining bandwidth would be 75% * 
128 kbps, or 96 kbps, and the command bandwidth remaining percent 50 would allocate 
48 kbps for a class. 
Note that in a single policy map, only one of the three variations of the bandwidth command may 
be used. Table 15-7 summarizes the three methods for reserving bandwidth with CBWFQ.
Low-Latency Queuing
Low-latency queuing sounds like the best queuing tool possible, just based on the name. What 
packet wouldn’t want to experience low latency? As it turns out, for delay (latency) sensitive 
trafﬁc, LLQ is indeed the queuing tool of choice. LLQ looks and acts just like CBWFQ in 
most regards, except it adds the capability for some queues to be conﬁgured as low-latency 
queues. LLQ schedules these speciﬁc queues as strict-priority queues, just like PQ schedules 
the high-priority queue. In other words, LLQ always services packets in these priority queues 
ﬁrst. 
LLQ lingo can sometimes be used in a couple of different ways. With a single policy map that has at 
least one low-latency queue, the policy map might be considered to be implementing LLQ, while at the 
NOTE
Using the bandwidth remaining percent command is particularly useful with LLQ, 
and will be explained in that context later in the chapter. The reason is that the remaining-
bandwidth calculation is changed by the addition of LLQ.
Table 15-7
Reference for CBWFQ Bandwidth Reservation
KEY 
POINT
Method
Amount of Bandwidth Reserved 
by the bandwidth Command
The Sum of Values in a Single 
Policy Map Must Be <= …
Explicit bandwidth
As listed in commands
max-res * int-bw
Percent
A percentage of the int-bw
max-res setting
Remaining percent
A percentage of the reservable 
bandwidth (int-bw * max-res)
100

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     535
same time, that one low-latency queue is often called “the LLQ.” Sometimes, a single low-latency 
queue is even called “the PQ” as a reference to the PQ-like behavior, or even a “priority queue.” 
While LLQ adds a low-latency queue to CBWFQ, it also prevents the queue starvation that occurs with 
PQ. LLQ actually polices the PQ based on the conﬁgured bandwidth. In effect, the bandwidth given to 
an LLQ priority queue is both the guaranteed minimum and policed maximum. (You may recall from 
Chapter 14, “Classiﬁcation and Marking,” that the DiffServ Expedited Forwarding PHB formally 
deﬁnes the priority queuing and policing PHBs.) As a result, the packets that make it out of the queue 
experience low latency, but some may be discarded to prevent starving the other queues. 
Figure 15-7 depicts the scheduler logic for LLQ. Note that the PQ logic is shown, but with the 
policer check as well.
Figure 15-7
LLQ Scheduler Logic
LLQ conﬁguration requires one more command in addition to the commands used for CBWFQ 
conﬁguration. Instead of using the bandwidth command on a class, use the priority command: 
pppprrrriiiioooorrrriiiittttyyyy    {bandwidth-kbps | ppppeeeerrrrcccceeeennnntttt percentage} [burst]
This class subcommand enables LLQ in the class, reserves bandwidth, and enables the policing 
function. You can also conﬁgure the burst size for the policer with this command, but the default 
setting of 20 percent of the conﬁgured bandwidth is typically a reasonable choice.
Example 15-5 shows a sample LLQ conﬁguration, using the following criteria. Like Example 15-4, 
the LLQ policy is applied to R3’s s0/0 interface from Figure 15-5.
■
R3’s s0/0 bandwidth is 128 kbps.
■
Packets will already have been marked with good DSCP values.
■
VoIP payload is already marked DSCP EF, and should be LLQed with 58 kbps of bandwidth.
■
AF41, AF21, and AF23 trafﬁc should get 22, 20, and 8 kbps, respectively.
■
All other trafﬁc should be placed into class class-default, which should use WRED and WFQ. 
Any
Packets in
LLQ?
Put Packet in
TX Ring 
No
Pick Next
Packet from
Other Non-LLQ
Queues
Yes
Wait Until TX 
Ring Has More
Room

536     Chapter 15: Congestion Management and Avoidance
Example 15-5
LLQ for EF, CBWFQ for AF41, AF21, AF23, and All Else 
! The class maps used by the queue-on-dscp are not shown, but the names imply what
! each class map has been configured to match. Note the pppprrrriiiioooorrrriiiittttyyyy    55558888 command makes 
! class dscp-ef an LLQ.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    qqqquuuueeeeuuuueeee----oooonnnn----ddddssssccccpppp
        ccccllllaaaassssssss    ddddssssccccpppp----eeeeffff
                pppprrrriiiioooorrrriiiittttyyyy    55558888
        ccccllllaaaassssssss    ddddssssccccpppp----aaaaffff44441111
            bbbbaaaannnnddddwwwwiiiiddddtttthhhh    22222222
        ccccllllaaaassssssss    ddddssssccccpppp----aaaaffff22221111
            bbbbaaaannnnddddwwwwiiiiddddtttthhhh    22220000
            rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt    ddddssssccccpppp----bbbbaaaasssseeeedddd
        ccccllllaaaassssssss    ddddssssccccpppp----aaaaffff22223333
            bbbbaaaannnnddddwwwwiiiiddddtttthhhh    8888
            rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt    ddddssssccccpppp----bbbbaaaasssseeeedddd
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee
            rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt    ddddssssccccpppp----bbbbaaaasssseeeedddd
! mmmmaaaaxxxx----rrrreeeessss has to be raised or the policy map would be rejected.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111122228888
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    llllooooaaaadddd----iiiinnnntttteeeerrrrvvvvaaaallll    33330000
    mmmmaaaaxxxx----rrrreeeesssseeeerrrrvvvveeeedddd----bbbbaaaannnnddddwwwwiiiiddddtttthhhh    88885555
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    qqqquuuueeeeuuuueeee----oooonnnn----ddddssssccccpppp
! Below, for class dscp-ef, note the phrase “strict priority,” as well as the 
! computed policing burst of 1450 bytes (20% of 58 kbps and divided by 8 to convert 
! the value to a number of bytes.)
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    qqqquuuueeeeuuuueeee----oooonnnn----ddddssssccccpppp
    Policy Map queue-on-dscp
    Class dscp-ef
      Weighted Fair Queueing
            Strict Priority
            Bandwidth 58 (kbps) Burst 1450 (Bytes)
! lines omitted for brevity
! Note the statistics below. Any packets dropped due to the policer would show
! up in the last line below.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    ssss    0000////0000    oooouuuuttttppppuuuutttt    ccccllllaaaassssssss    ddddssssccccpppp----eeeeffff
 Serial0/0 
  Service-policy output: queue-on-dscp
    Class-map: dscp-ef (match-all)
      227428 packets, 14555392 bytes
      30 second offered rate 52000 bps, drop rate 0 bps
      Match: ip dscp ef 
      Weighted Fair Queueing
        Strict Priority
        Output Queue: Conversation 40 
        Bandwidth 58 (kbps) Burst 1450 (Bytes)
        (pkts matched/bytes matched) 12194/780416
 (total drops/bytes drops) 0/0

Queuing Tools: FIFO, PQ, CQ, WFQ, CBWFQ, and LLQ     537
Deﬁning and Limiting LLQ Bandwidth
The LLQ priority command provides two syntax options for deﬁning the bandwidth of an LLQ—a 
simple explicit amount, or bandwidth as a percentage of interface bandwidth. (There is no remaining 
bandwidth equivalent for the priority command.) However, unlike the bandwidth command, both the 
explicit and percentage versions of the priority command can be used inside the same policy map. 
IOS still limits the amount of bandwidth in an LLQ policy map, with the actual bandwidth from 
both LLQ classes (with priority commands) and non-LLQ classes (with bandwidth commands) 
not being allowed to exceed max-res * int-bw. Although the math is easy, the details can get 
confusing, especially because a single policy map could have one queue conﬁgured with priority 
bw, another with priority percent bw, and others with one of the three versions of the bandwidth 
command. Figure 15-8 shows an example with three versions of the commands.
The ﬁgure shows both versions of the priority command. Class3 has an explicit priority 32 
command, which reserves 32 kbps. Class2 has a priority percent 25 command, which, when 
applied to the interface bandwidth (256 kbps), gives class2 64 kbps.
Figure 15-8
Priority, Priority Percent, and Bandwidth Remaining Percent
The most interesting part of Figure 15-8 is how IOS views the remaining-bandwidth concept when 
priority queues are conﬁgured. IOS subtracts the bandwidth reserved by the priority commands 
as well. As a result, a policy map can essentially allocate non-priority classes based on percentages 
of the leftover (remaining) bandwidth, with those values totaling 100 (100 percent).
Interface Bandwidth
Remaining Bandwidth Calculation
           192 kbps (max-res * int-bw)
   –        32 kbps (Explicit)
   –        64 kbps (percentage * int-bw)
256 kbps
0%
192 kbps
Unreservable Bandwidth
(256 – (.75 * 256)) = 64 kbps
Class class1
Priority 32
Unallocated: 92 kbps – 69 kbps = 23 kbps
Class class2
Priority percent 25
(256 * .25 = 64 kbps)
Class class3
Bandwidth remaining percent 75
(92 kbps * .75 = 69 kbps)
Reservable
Bandwidth
Remaining Bandwidth
92 kbps
KEY 
POINT

538     Chapter 15: Congestion Management and Avoidance
LLQ with More Than One Priority Queue
LLQ allows multiple queues/classes to be conﬁgured as priority queues. This begs the question, 
“Which queue gets scheduled ﬁrst?” As it turns out, LLQ actually places the packets from multiple 
LLQs into a single internal LLQ. So, packets in the different conﬁgured priority queues still get 
scheduled ahead of non-priority queues, but they are serviced based on their arrival time for all 
packets in any of the priority queues. 
So why use multiple priority queues? The answer is policing. By policing trafﬁc in one class at 
one speed, and trafﬁc in another class at another speed, you get more granularity for the policing 
function of LLQ. For instance, if planning for video and voice, you can place each into a separate 
LLQ and get low latency performance for both types of trafﬁc, but at the same time prevent video 
trafﬁc from consuming the bandwidth engineered for voice, and vice versa.
Miscellaneous CBWFQ/LLQ Topics
CBWFQ and LLQ allow a policy map to either allocate bandwidth to the class-default class, or 
not. When a bandwidth command is conﬁgured under class class-default, the class is indeed 
reserved that minimum bandwidth. (IOS will not allow the priority command in class-default.) 
When class class-default does not have a bandwidth command, IOS internally allocates any 
unassigned bandwidth among all classes. As a result, class class-default may not get much 
bandwidth unless the class is conﬁgured a minimum amount of bandwidth using the bandwidth 
command.
This chapter’s coverage of guaranteed bandwidth allocation is based on the conﬁguration 
commands. In practice, a policy map may not have packets in all queues at the same time. In that 
case, the queues get more than their reserved bandwidth. IOS allocates the extra bandwidth 
proportionally to each active class’s bandwidth reservation. 
Finally, IOS uses queuing only when congestion occurs. IOS considers congestion to be occurring 
when the hardware queue is full; that generally happens when the offered load of trafﬁc is far less 
than the clock rate of the link. So, a router could have a service-policy out command on an interface, 
with LLQ conﬁgured, but the LLQ logic would only be used when the hardware queue is full.
Queuing Summary
Table 15-8 summarizes some of the key points regarding the IOS queuing tools covered in this chapter. 
Table 15-8
Queuing Protocol Comparison 
KEY 
POINT
Feature
PQ
CQ
WFQ
CBWFQ
LLQ
Includes a strict-priority queue
Yes
Yes
Polices priority queues to prevent starvation
Yes
KEY 
POINT

Weighted Random Early Detection     539
Weighted Random Early Detection
When a queue is full, IOS has no place to put newly arriving packets, so it discards them. This 
phenomenon is called tail drop. Oftentimes, when a queue ﬁlls, several packets are tail dropped at 
a time, given the bursty nature of data packets.
Tail drop can have an overall negative effect on network trafﬁc, particularly TCP trafﬁc. When 
packets are lost, for whatever reason, TCP senders slow down their rate of sending data. When tail 
drops occur and multiple packets are lost, the TCP connections slow down even more. Also, most 
networks send a much higher percentage of TCP trafﬁc than UDP, meaning that the overall network 
load tends to drop after multiple packets are tail dropped. 
Interestingly, overall throughput can be improved by discarding a few packets as a queue begins 
to ﬁll, rather than waiting for the larger impact of tail drops. Cisco created Weighted Random Early 
Detection (WRED) speciﬁcally for the purpose of monitoring queue length and discarding a 
percentage of the packets in the queue to improve overall network performance. As a queue gets 
longer and longer, WRED begins to discard more packets, hoping that a small reduction in offered 
load that follows may be just enough to prevent the queue from ﬁlling.
WRED uses several numeric settings when making its decisions. First, WRED uses the measured 
average queue depth when deciding if a queue has ﬁlled enough to begin discarding packets. 
WRED then compares the average depth to a minimum and maximum queue threshold, performing 
different discard actions depending on the outcome. Table 15-9 lists the actions.
When the average queue depth is very low or very high, the actions are somewhat obvious, 
although the term full drop in Table 15-9 may be a bit of a surprise. When the average depth rises 
above the maximum threshold, WRED discards all new packets. Although this action might seem 
like tail drop, technically it is not, because the actual queue might not be full. So, to make this ﬁne 
distinction, WRED calls this action category full drop.
Feature
PQ
CQ
WFQ
CBWFQ
LLQ
Reserves bandwidth per queue
Yes
Yes
Yes
Includes robust set of classiﬁcation ﬁelds
Yes
Yes
Classiﬁes based on ﬂows
Yes
Yes1
Yes1
Supports RSVP
Yes
Yes
Yes
Maximum number of queues
4
162
4096
64
64
1WFQ can be used in the class-default queue, or in all CBWFQ queues in 7500 series routers.
2Also includes a system queue that is unavailable for customer use.
Table 15-8
Queuing Protocol Comparison (Continued)

540     Chapter 15: Congestion Management and Avoidance
When the average queue depth is between the two thresholds, WRED discards a percentage of packets. 
The percentage grows linearly as the average queue depth grows from the minimum threshold to the 
maximum, as depicted in Figure 15-9 (which shows WRED’s default settings for IPP 0 trafﬁc).
Figure 15-9
WRED Discard Logic with Defaults for IPP 0 
The last of the WRED numeric settings that affect its logic is the mark probability denominator 
(MPD), from which the maximum percentage of 10 percent is derived in Figure 15-9. IOS 
calculates the discard percentage used at the maximum threshold based on the simple formula 1/MPD. 
In the ﬁgure, an MPD of 10 yields a calculated value of , meaning the discard rate grows 
from 0 percent to 10 percent as the average queue depth grows from the minimum threshold 
to the maximum. Also, when WRED discards packets, it randomly chooses the packets 
to discard.
Table 15-9
WRED Discard Categories 
KEY 
POINT
Average Queue Depth 
Versus Thresholds
Action
WRED Name for 
Action
Average < minimum threshold
No packets dropped.
No drop
Minimum threshold < average 
depth < maximum threshold
A percentage of packets dropped. Drop 
percentage increases from 0 to a maximum 
percent as the average depth moves from 
the minimum threshold to the maximum.
Random drop
Average depth > 
maximum threshold
All new packets discarded; similar to tail 
drop.
Full drop
Average Queue Depth
20
Minimum
Threshold
40
Maximum
Threshold
Maximum
Discard
Percentage
(1/MPD)
Discard
Percentage
100%
10%
1
10
------

Weighted Random Early Detection     541
How WRED Weights Packets
WRED gives preference to packets with certain IPP or DSCP values. To do so, WRED uses 
different trafﬁc proﬁles for packets with different IPP and DSCP values. A WRED trafﬁc proﬁle 
consists of a setting for three key WRED variables: the minimum threshold, the maximum 
threshold, and the MPD. Figure 15-10 shows just such a case, with two WRED trafﬁc proﬁles 
(for IPP 0 and IPP 3). 
As Figure 15-10 illustrates, IPP 3’s minimum threshold was higher than for IPP 0. As a result, 
IPP 0 trafﬁc will be discarded earlier than IPP 3 packets. Also, the MPD is higher for IPP 3, 
resulting in a lower discard percentage (based on the formula discard percentage = 1/MPD).
Figure 15-10
Example WRED Proﬁles for Precedences 0 and 3 
Table 15-10 lists the IOS default WRED proﬁle settings for various DSCP values. You may recall 
from Chapter 14 that Assured Forwarding DSCPs whose names end in 1 (for example, AF21) 
should get better WRED treatment than those settings that end in 2 (for example, AF32). The IOS 
defaults listed in Table 15-10 achieve that goal by setting lower minimum thresholds for the 
appropriate AF DSCPs.
Table 15-10
Cisco IOS Software Default WRED Proﬁles for DSCP-Based WRED
DSCP
Minimum Threshold
Maximum Threshold
MPD
1/MPD
AFx1
33
40
10
10%
AFx2
28
40
10
10%
AFx3
24
40
10
10%
EF
37
40
10
10%
Average 
Queue Depth
20
Precedence
 0 Minimum
Threshold
40
Maximum
Threshold
Discard
Percentage
100%
10%
5%
Precedence 0 Drop
Percentage (MPD = 10)
Precedence 3 Drop
Percentage (MPD = 20)
30
Precedence 
3 Minimum
Threshold
Precedence 3
Precedence 0

542     Chapter 15: Congestion Management and Avoidance
WRED Conﬁguration
Because WRED manages drops based on queue depth, WRED must be conﬁgured alongside a 
particular queue. However, most queuing mechanisms do not support WRED; as a result, WRED 
can be conﬁgured only in the following locations:
■
On a physical interface (with FIFO queuing)
■
For a non-LLQ class inside a CBWFQ policy map
■
For an ATM VC
To use WRED directly on a physical interface, IOS actually disables all other queuing mechanisms 
and creates a single FIFO queue. WRED then manages the queue with regard to drops. For 
CBWFQ, WRED is conﬁgured in a class inside a policy map, in the same location as the bandwidth 
and priority commands discussed earlier in this chapter. 
The random-detect command enables WRED, either under a physical interface or under a class 
in a policy map. This command enables WRED to use IPP, and not DSCP. The random-detect 
dscp-based command both enables WRED and tells it to use DSCP for determining the trafﬁc 
proﬁle for a packet. 
To change WRED conﬁguration from the default WRED proﬁle for a particular IPP or DSCP, use 
the following commands, in the same location as the other random-detect command: 
rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt    pppprrrreeeecccceeeeddddeeeennnncccceeee    precedence min-threshold max-threshold    [mark-prob-
  denominator]
rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt ddddssssccccpppp    dscpvalue min-threshold max-threshold [mark-probability-
  denominator]
Finally, calculation of the rolling average queue depth can be affected through conﬁguring a 
parameter called the exponential weighting constant. A low exponential weighting constant 
means that the old average is a small part of the calculation, resulting in a more quickly changing 
average. The setting can be changed with the following command, although changing it is not 
recommended:
rrrraaaannnnddddoooommmm----ddddeeeetttteeeecccctttt    eeeexxxxppppoooonnnneeeennnnttttiiiiaaaallll----wwwweeeeiiiigggghhhhttttiiiinnnngggg----ccccoooonnnnssssttttaaaannnntttt    exponent 
Note that earlier, Example 15-6 showed basic WRED conﬁguration inside some classes of a 
CBWFQ conﬁguration.
LAN Switch Congestion Management and Avoidance
The ﬁnal section of this chapter looks at queuing and WRED on Cisco 3550 switches, with some 
comparisons made with Cisco 2950 switches.

LAN Switch Congestion Management and Avoidance     543
Cisco 3550 Switch Egress Queuing
Cisco 3550 switches perform both ingress and egress queuing. However, Cisco 3550 switches use 
a single FIFO ingress queue as a place to hold frames waiting to be forwarded to the egress 
interface, so the details are not terribly interesting. For egress, the Cisco 3550 supports four queues 
per interface, with classiﬁcation into the queues based on CoS, and scheduling based on weighted 
round-robin (WRR) logic and an optional expedited (priority) queue. 
The Cisco 3550 uses a relatively simple classiﬁcation scheme, assuming you consider only what 
happens once the forwarding decision has been made. Cisco 3550 switches make most internal 
QoS decisions based on an internal DSCP setting. The internal DSCP has been determined once 
the frame is forwarded. So, once a frame has been assigned an internal DSCP and an egress 
interface, the following logic determines into which of the four interface output queues the frame 
is placed:
1.
The frame’s internal DSCP is compared to a global DSCP-to-CoS map to determine a CoS 
value. 
2.
The per-interface CoS-to-queue map determines the queue for a frame based on the assigned 
CoS.
WRR scheduling works much like the router CQ scheduler, but instead of taking a number of bytes 
per cycle, WRR speciﬁes a number of frames taken from each queue. For example, the wrr-queue 
bandwidth 10 20 30 40 interface subcommand indicates that the switch would send 10 frames 
from the ﬁrst queue, then 20 from the next, and so on. The switch is not really concerned about 
allocating bandwidth; in fact, because frames vary in length, switch WRR logic does not even 
indirectly deﬁne a reserved minimum bandwidth percentage. However, it does empty the queue 
slots as deﬁned, so that there is then more space to temporarily store subsequent frames.
The Cisco 3550 may treat queue 4 on an interface as a PQ. To do so, the interface subcommand 
priority-queue out is conﬁgured. On Cisco 3550 switches, only queue 4 can become the PQ. The 
switch still applies WRR scheduling to queues 1 through 3.
Example 15-6 shows Cisco 3550 egress queuing conﬁguration. By default, the global 
DSCP-to-CoS map maps the ﬁrst eight DSCP values to CoS 0, the next eight to CoS 1, and so on. 
Also, the default per-interface CoS-to-queue mapping maps the ﬁrst two CoS values to queue 1, 
the next two to queue 2, and so on. For this example, the following criteria are used:
■
The global DSCP-to-CoS map is changed so that DSCPs 60–63 are mapped to CoS 1.
■
Interface gi0/1’s CoS-to-queue map is changed so that CoS 5 is mapped to queue 4, and CoS 
6 and 7 are mapped to queue 3.
■
The gi0/1 bandwidth ratios are set to 10, 15, 25, and 150.
KEY 
POINT

544     Chapter 15: Congestion Management and Avoidance
■
Later, the expedite queue is enabled, giving queues 1, 2, and 3 around 20 percent, 30 percent, 
and 50 percent, respectively, of the bandwidth not consumed by priority queue 4.
Example 15-6
Cisco 3550 Egress Queuing Example 
! For the global DSCP-to-CoS map, up to eight DSCPs can be mapped in a single command, 
! as seen below. The sssshhhhoooowwww    mmmmllllssss    qqqqoooossss    mmmmaaaapppp    ddddssssccccpppp----ccccoooossss command shows a grid, with the 
! DSCP’s decimal first digit on the left-side column, and the 2nd digit across the 
! top. 
S1(config)# mmmmllllssss    qqqqoooossss    mmmmaaaapppp    ddddssssccccpppp----ccccoooossss    66660000    66661111    66662222    66663333    ttttoooo    1111
S1# sssshhhh    mmmmllllssss    qqqqoooossss    mmmmaaaapppp    ddddssssccccpppp----ccccoooossss
   Dscp-cos map:
     d1 :  d2 0  1  2  3  4  5  6  7  8  9 
     ---------------------------------------
      0 :    00 00 00 00 00 00 00 00 01 01 
      1 :    01 01 01 01 01 01 02 02 02 02 
      2 :    02 02 02 02 03 03 03 03 03 03 
      3 :    03 03 04 04 04 04 04 04 04 04 
      4 :    05 05 05 05 05 05 05 05 06 06 
      5 :    06 06 06 06 06 06 07 07 07 07 
      6 :    01 01 01 01 
! Next, queue 4 is assigned CoS 5, queue 3 is assigned CoSs 6 and 7. Note that 
! the wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    ccccoooossss----mmmmaaaapppp    3333    6666    7777 command does not remove other CoS values from queue
! 3, but just assigns CoSs 6 and 7 to queue 3. The non-highlighted CoS values in
! the sssshhhhoooowwww    mmmmllllssss    qqqqoooossss    iiiinnnntttt    ggggiiii    0000////1111    qqqquuuueeeeuuuueeee command reflect default settings.
S1(config)# iiiinnnntttt    ggggiiii    0000////1111
S1(config-if)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    ccccoooossss----mmmmaaaapppp    4444    5555
S1(config-if)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    ccccoooossss----mmmmaaaapppp    3333    6666    7777
S1(config-if)# ddddoooo sssshhhhoooowwww    mmmmllllssss    qqqqoooossss    iiiinnnntttt    ggggiiii    0000////1111    qqqquuuueeeeuuuueeee | bbbbeeeeggggiiiinnnn    CCCCoooossss----qqqquuuueeeeuuuueeee
Cos-queue map:
cos-qid
 0—1
 1—1
 2—2
 3—2
 4—3
 5—4
 6—3
 7—3
! Next, the ratios used by the WRR scheduler are defined. Note that the sssshhhhoooowwww 
! command lists the exact weights, and that it lists “dis” beside the phrase
! “Egress Expedite Queue,” meaning that the PQ is not yet enabled. Note also that
! the four weights must be values between 1 and 65,536, inclusive.
S1(config)# iiiinnnntttt    ggggiiii    0000////1111
S1(config-if)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    11110000    11115555    22225555    111155550000
S1(config-if)# ddddoooo    sssshhhh    mmmmllllssss    qqqqoooossss    iiiinnnntttt    ggggiiii    0000////1111    qqqquuuueeeeuuuueeee 
GigabitEthernet0/1
Egress expedite queue: dis
wrr bandwidth weights:

LAN Switch Congestion Management and Avoidance     545
Cisco 3550 Congestion Avoidance
Catalyst 3550 Gigabit interfaces support a mutually exclusive choice of either WRED or tail-drop 
logic for managing drops in egress queues. 3550 Fast Ethernet interfaces do not use WRED or tail 
drop, but rather use a switch-speciﬁc method of managing internal buffers (which is not covered 
in this book). 
Cisco 3550 WRED has the same overall strategy as WRED as implemented in Cisco routers, but 
with many differences in implementation details. The key features of Cisco 3550 WRED are as 
follows, with Figure 15-11 depicting the main concepts:
■
Each egress queue has two WRED thresholds.
■
Thresholds are deﬁned as percentages of the queue length.
■
The thresholds can be set differently for each egress queue on each interface.
■
When the actual queue depth is below the threshold, WRED does not discard packets 
(no drop).
■
When the actual queue depth exceeds a threshold, WRED discards a percentage of packets; 
the percentage ranges linearly from 0 to 100 percent, as the queue depth grows from the 
threshold to 100 percent full.
qid-weights
 1—10
 2—15
 3—25
 4—150
! Finally, the PQ is enabled.
S1(config-if)# pppprrrriiiioooorrrriiiittttyyyy----qqqquuuueeeeuuuueeee    oooouuuutttt
S1(config-if)# ddddoooo    sssshhhh    mmmmllllssss    qqqqoooossss    iiiinnnntttt    ggggiiii    0000////1111    qqqquuuueeeeuuuueeee 
GigabitEthernet0/1
Egress expedite queue: ena
wrr bandwidth weights:
qid-weights
 1—10
 2—15
 3—25
 4—150    when expedite queue is disabled
! Lines omitted for brevity
Example 15-6
Cisco 3550 Egress Queuing Example (Continued)
KEY 
POINT

546     Chapter 15: Congestion Management and Avoidance
Figure 15-11
Cisco 3550 WRED Logic and Commands
Figure 15-11 shows WRED conﬁguration and logic once a particular egress queue has been 
chosen. In the ﬁgure, a frame has been assigned to egress queue 1. Before enqueuing the frame, 
WRED ﬁnds the frame’s internal DSCP in the DSCP-to-threshold map, as conﬁgured with the 
wrr-queue dscp-map interface subcommand. That mapping identiﬁes the WRED threshold to 
use (either threshold 1 or 2). The default DSCP map maps all 64 DSCP values to WRED threshold 
1, so to use threshold 2, the map must be conﬁgured.
The existence of a single wrr-queue random-detect command under an interface both enables 
WRED on the interface for all queues and disables the default tail-drop logic for each queue. If 
only one interface egress queue has a wrr-queue random-detect command, the other three egress 
queues do use WRED. However, WRED defaults to use thresholds of 100 percent, meaning that 
queues that have no speciﬁcally conﬁgured thresholds behave as if tail drop were used. To enable 
WRED-like behavior, each queue needs to have non-default thresholds conﬁgured. 
The Cisco 3550 uses tail drop by default, but with some interesting optional features. You can 
conﬁgure tail drop at levels less than a 100-percent-full queue, with two thresholds as conﬁgured 
with the wrr-queue threshold interface subcommand. Along with the DSCP map (conﬁgured 
with the wrr-queue dscp-map command), frames with one set of DSCP values will all be 
discarded once the queue reaches the deﬁned depth. Frames of the other DSCPs are discarded at 
a second threshold. In effect, this conﬁguration provides for differentiated tail drop, discarding all 
packets at one lower threshold.
Mapping DSCP to Threshold:
wrr-queue dscp-map 1  0 1 2 3
wrr-queue dscp-map 2  3 4 5 6
Setting Queue 1’s Threshold
Percentages
wrr-queue random-detect max-
threshold  1  40 80
Example 1:
Internal DSCP 6
Maps to Threshold 2
Current (70%) Is Less Than 80%
WRED Does Not Discard
Example 2:
• Internal DSCP 2
• Maps to Threshold 1
• 70% Is 1/2 Difference of Threshold 1
(40%) and 100%. So . . .
• WRED to Discard 50% of New
Threshold 1 Packets
100%
0%
80% - Threshold 2
70% Current Actual
Queue Depth
Queue 1
40% - Threshold 1
Threshold
DSCP’s

LAN Switch Congestion Management and Avoidance     547
Comparisons Between Cisco 3550 and 2950 Switches
Cisco includes the 2950 series switches in most examples used for the CCIP QoS exam, but the 
CCIE Routing and Switching lab includes the 3550 switch. Cisco is not speciﬁc about any 
particular switch models to expect on the CCIE Routing and Switching written exam. As a result, 
it is useful to compare the QoS features of the two switches. Table 15-11 summarizes the key 
differences, with some additional explanations following the table. (The comparisons listed here 
assume the Enhanced software image is used on both models of switches.)
The most important key conceptual differences relate to scheduling. Cisco 2950 switches default 
to use strict-priority scheduling, treating queue 4 as the highest priority and queue 1 as the lowest. 
Additionally, both support WRR scheduling (the default on 3550s), and both allow queue 4 to be 
used as a PQ. 
The biggest conﬁguration differences relate to the Cisco 2950 global conﬁguration settings. 
Because the 2950 queuing details are conﬁgured with global commands, each interface uses 
the same queuing conﬁguration. Queuing details can be conﬁgured per interface on 3550s. 
Also, the Cisco 2950 enables the PQ portion of WRR with PQ differently as compared to the 
Cisco 3550. Example 15-7 shows the Cisco 2950 queuing conﬁguration that is similar to the 
Cisco 3550 queuing conﬁguration seen in Example 15-6. Note that the priority-queue out 
command returns an error message on the Cisco 2950.
Table 15-11
Comparison of Cisco 2950 and 3550 Queuing Options
KEY 
POINT
Feature Description
2950
3550
Number of egress queues
4
4
Queue number of expedite queue
4
4
Granularity for setting queue weights 
Global
Interface
Frames classiﬁed into queues based on…
CoS
CoS
Granularity for CoS-to-queue mapping
Global
Interface
Expedite queue enabled via priority-queue out interface 
subcommand
No
Yes
Expedite queue enabled via weight of queue 4 being set to “0”
Yes
No
Supports WRED, with two thresholds/queue
No
Yes
Default scheduler
Strict priority
WRR

548     Chapter 15: Congestion Management and Avoidance
Example 15-7
Close Equivalent Cisco 2950 Queuing Conﬁguration as Compared with Example 15-6
! The CoS-to-queue mapping is done with identical commands as with the 3550,
! but the commands are configured globally. 
S4(config)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    ccccoooossss----mmmmaaaapppp    4444    5555
S4(config)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    ccccoooossss----mmmmaaaapppp    3333    6666    7777
! The next command does two important functions: sets the queue weights for each
! interface’s set of 4 queues, and enables WRR scheduling on every interface—
! thereby disabling the default strict-priority scheduling. 
S4(config)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    11110000    11115555    22225555    111155550000
! Alternatively, the weight value 0 for queue 4 makes every interface’s queue 4
! act as the expedite queue.
S4(config)# wwwwrrrrrrrr----qqqquuuueeeeuuuueeee    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    11110000    11115555    22225555    0000
S4(config)# iiiinnnntttt    ffffaaaa    0000////1111
S4(config-if)# pppprrrriiiioooorrrriiiittttyyyy----qqqquuuueeeeuuuueeee    oooouuuutttt
                    ^
% Invalid input detected at '^' marker.

Memory Builders     549
Foundation Summary
Please review the items in the “Foundation Topics” section noted with a Key Point icon.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
priority queuing, custom queuing, weighted fair queuing, class-based weighted fair 
queuing, low-latency queuing, weighted round-robin, tail drop, full drop, no drop, 
priority queue, sequence number, ﬁnish time, modiﬁed tail drop, scheduler, queue 
starvation, strict priority, software queue, hardware queue, remaining bandwidth, 
maximum reserved bandwidth, actual queue depth, average queue depth, minimum 
threshold, maximum threshold, mark probability denominator, exponential weighting 
constant, expedite queue, DSCP-to-CoS map, DSCP-to-threshold map, internal DSCP, 
differentiated tail drop
Refer to the CD-based glossary to check your answers.
Further Reading
Cisco QoS Exam Certiﬁcation Guide, by Wendell Odom and Michael Cavanaugh
Cisco Catalyst QoS: Quality of Service in Campus Networks, by Mike Flanagan, Richard Froom, 
and Kevin Turek

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Quality of Service (QoS)

C H A P T E R 16
Shaping and Policing
Trafﬁc-shaping tools delay packets exiting a router so that the overall bit rate does not exceed 
a deﬁned shaping rate. This chapter covers the concepts behind trafﬁc shaping, as well as two 
Cisco IOS shapers, namely Frame Relay Trafﬁc Shaping (FRTS) and Class-Based Shaping (CB 
Shaping).
Trafﬁc policers measure bit rates for packets either entering or exiting an interface. If the deﬁned 
rate is exceeded, the policer either discards enough packets so that the rate is not exceeded, or 
marks some packets such that the packets are more likely to be discarded later. This chapter 
covers the concepts and conﬁguration behind Class-Based Policing (CB Policing), with a brief 
mention of committed access rate (CAR).
“Do I Know This Already?” Quiz
Table 16-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
Table 16-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Trafﬁc-Shaping Concepts
1–2
Class-Based Shaping Conﬁguration
3–5
Frame Relay Trafﬁc Shaping Conﬁguration
6–7
Policing Concepts and Conﬁguration
8–10
Total Score

552     Chapter 16: Shaping and Policing
1.
When does Class-Based Shaping add tokens to its token bucket, and how many tokens does 
it add when Bc and Be are both set to something larger than 0?
a. Upon the arrival of each packet, a pro-rated portion of Bc is added to the token bucket.
b. Upon the arrival of each packet, a pro-rated portion of Bc + Be is added to the token 
bucket.
c. At the beginning of each time interval, Bc worth of tokens are added to the token bucket.
d. At the beginning of each time interval, Bc + Be worth of tokens are added to the token 
bucket.
e. None of the answers is correct.
2.
If shaping was conﬁgured with a rate of 128 kbps and a Bc of 3200 bits, what value would be 
calculated for Tc?
a. 125 ms
b. 125 sec
c. 25 ms
d. 25 sec
e. Shaping doesn’t use a Tc.
f. Not enough information is provided to tell.
3.
Which of the following commands, when typed in the correct conﬁguration mode, enables 
CB Shaping at 128 kbps, with no excess burst?
a. shape average 128000 8000 0
b. shape average 128 8000 0
c. shape average 128000 
d. shape peak 128000 8000 0
e. shape peak 128 8000 0
f. shape peak 128000
4.
Examine the following conﬁguration, noting the locations of the comment lines labeled 
point 1, point 2, and so on. Assume that a correctly conﬁgured policy map that implements 
CBWFQ, called queue-it, is also conﬁgured but not shown. To enable CBWFQ for the 
packets queued by CB Shaping, what command is required, and at what point in the 
conﬁguration is the command required?
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    sssshhhhaaaappppeeee----qqqquuuueeeessssttttiiiioooonnnn
! point 1
    ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt

“Do I Know This Already?” Quiz     553
! point 2
        sssshhhhaaaappppeeee    aaaavvvveeeerrrraaaaggggeeee    222255556666000000000000    5555111122220000
! point 3
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000////0000
! point 4
        sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    sssshhhhaaaappppeeee----qqqquuuueeeessssttttiiiioooonnnn
! point 5
iiiinnnntttteeeerrrrffffaaaacccceeee    ssss0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
! point 6
        iiiipppp    aaaaddddddddrrrreeeessssssss    1111....1111....1111....1111
! point 7
        ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111
! point 8
a. service-policy queue-it, at point 1
b. service-policy queue-it, at point 3
c. service-policy queue-it, at point 5
d. shape queue service-policy queue-it, at point 1
e. shape queue service-policy queue-it, at point 3
f. shape queue service-policy queue-it, at point 6
5.
Using the same conﬁguration snippet as in the previous question, what command would list 
the calculated Tc value, and what would that value be?
a. show policy-map, Tc = 125 ms 
b. show policy-map, Tc = 20 ms
c. show policy-map, Tc = 10 ms
d. show policy-map interface s0/0, Tc = 125 ms 
e. show policy-map interface s0/0, Tc = 20 ms
f. show policy-map interface s0/0, Tc = 10 ms
6.
Assume that several map-class frame-relay commands exist in addition to the following 
conﬁguration. The map classes are named C1, C2, and C3. Which VC use the settings in map 
class C2?
interface s0/0
 encapsulation frame-relay
 frame-relay traffic-shaping
 frame-relay class C2
!
interface s0/0.1 point-to-point
 frame-relay class C1
 frame-relay interface-dlci 101
interface s0/0.3 multipoint
  frame-relay interface-dlci 103
  frame-relay interface-dlci 203
    class C3

554     Chapter 16: Shaping and Policing
a. The VC with DLCI 101.
b. The VC with DLCI 103.
c. The VC with DLCI 203.
d. None of the answers is correct.
7.
Which of the following FRTS commands, in the same FRTS map class, set the shaping rate 
to 128 kbps, with a shaping time interval of 62.5 ms?
a. frame-relay trafﬁc-rate 128
b. frame-relay trafﬁc-rate 128000
c. frame-relay cir 128, frame-relay Bc 8000
d. frame-relay cir 128000, frame-relay Bc 8000
8.
Which of the following are true about policers in general, but not true about shapers?
a. Monitor trafﬁc rates using the concept of a token bucket
b. Can discard trafﬁc that exceeds a deﬁned trafﬁc rate
c. Can delay packets by queuing to avoid exceeding a trafﬁc rate
d. Can re-mark a packet
9.
Which of the following commands, when typed in the correct conﬁguration mode, enables 
CB Policing at 128 kbps, with no excess burst?
a. police 128000 conform-action transmit exceed-action transmit violate-action drop
b. police 128 conform-action transmit exceed-action transmit violate-action drop
c. police 128000 conform-action transmit exceed-action drop
d. police 128 conform-action transmit exceed-action drop
e. police 128k conform-action transmit exceed-action drop
10.
Which of the following features of CB Policing are not supported by CAR?
a. The capability to categorize packets as conforming, exceeding, and violating a trafﬁc 
contract
b. The capability to police all trafﬁc at one rate, and subsets of that same trafﬁc at other 
rates
c. The capability to conﬁgure policing using MQC commands
d. The capability to police input or output packets on an interface

Trafﬁc-Shaping Concepts     555
Foundation Topics
Trafﬁc-Shaping Concepts
Trafﬁc shaping prevents the bit rate of the packets exiting an interface from exceeding a conﬁgured 
shaping rate. To do so, the shaper monitors the bit rate at which data is being sent. If the conﬁgured 
rate is exceeded, the shaper delays packets, holding the packets in a shaping queue. The shaper 
then releases packets from the queue such that, over time, the overall bit rate does not exceed the 
shaping rate.
Trafﬁc shaping solves two general types of problems that can occur in multi-access networks. 
First, if a service provider purposefully discards any trafﬁc on a VC when the trafﬁc rate exceeds 
the committed information rate (CIR), then it makes sense for the router to not send trafﬁc faster 
than the CIR. 
Egress blocking is the second type of problem for which shaping provides some relief. Egress 
blocking occurs when a router sends data into a Frame Relay or ATM service, and the egress Frame 
Relay or ATM switch has to queue the data before it can be sent out to the router on the other end 
of the VC. For example, when a T1-connected router sends data, it must be sent at T1 speed. If the 
router on the other end of the VC has a link clocked at 256 kbps, the frames/cells will start to back 
up in the output queue of the egress switch. Likewise, if that same T1 site has VCs to 20 remote 
sites, and each remote site uses a 256-kbps link, then when all 20 remote sites send at about the 
same time, frames/cells will be queued, waiting to exit the WAN egress switch to the T1 router. In 
this case, shaping can be used to essentially prevent egress queuing, moving the packets back into 
a queue in the router, where they can then be manipulated with fancy queuing tools.
Shaping Terminology
Routers can send bits out an interface only at the physical clock rate. To average sending at a lower 
rate, the router has to alternate between sending packets and being silent. For instance, to average 
sending at a packet rate of half the physical link speed, the router should send packets half of the 
time, and not send packets the other half of the time. Over time, it looks like a staccato series of 
sending and silence. Figure 16-1 shows a graph of what happens when a router has a link with a 
clock rate of 128 kbps and a shaper conﬁgured to shape trafﬁc to 64 kbps. 
Figure 16-1 shows the sending rate and implies quite a bit about how Cisco IOS implements 
shaping. A shaper sets a static time interval, called Tc. Then, it calculates the number of bits that 
can be sent in the Tc interval such that, over time, the number of bits/second sent matches the 
shaping rate. 

556     Chapter 16: Shaping and Policing
Figure 16-1
Mechanics of Trafﬁc Shaping—128-kbps Access Rate, 64-kbps Shaped Rate
The number of bits that can be sent in each Tc is called the committed burst (Bc). In Figure 16-1, 
an 8000-bit Bc can be sent in every 125-ms Tc to achieve a 64-kbps average rate. In other words, 
with a Tc of 125 ms, there will be eight Tc intervals per second. If Bc bits (8000) are sent each Tc, 
then eight sets of 8000 bits will be sent each second, resulting in a rate of 64,000 bps. 
Because the bits must be encoded on the link at the clock rate, the 8000 bits in each interval require 
only 62.5 ms (8000/128,000) to exit the interface onto the link. The graph shows the results: the 
interface sends at the line rate (access rate) for 62.5 ms, and then waits for 62.5 ms, while packets 
sit in the shaping queue. 
Table 16-2 lists the terminology related to this shaping model. Note in particular that the term CIR 
refers to the trafﬁc rate for a VC based on a business contract, and shaping rate refers to the rate 
conﬁgured for a shaper on a router.
Table 16-2
Shaping Terminology
KEY 
POINT
Term
Deﬁnition
Tc
Time interval, measured in milliseconds, over which the committed burst (Bc) can be 
sent. With many shaping tools, Tc = Bc/CIR.
Bc
Committed burst size, measured in bits. This is the amount of trafﬁc that can be sent 
during the Tc interval. Typically deﬁned in the trafﬁc contract.
CIR
Committed information rate, in bits per second, which deﬁnes the rate of a VC according 
to the business contract. 
Shaped 
rate
The rate, in bits per second, to which a particular conﬁguration wants to shape the trafﬁc. 
It may or may not be set to the CIR.
Be
Excess burst size, in bits. This is the number of bits beyond Bc that can be sent after a 
period of inactivity.
Sending Rate
Time
(Ms)
128 kbps
0 kbps
0
125
250
375
500
625
750
875
1000
Send packets for 62.5 ms per Interval (1/2 the time) in Order to Average 64 kbps  
So Bc = 8000 bits (1000 bytes) 
KEY 
POINT

Trafﬁc-Shaping Concepts     557
Shaping with an Excess Burst
To accommodate bursty data trafﬁc, shapers implement a concept by which, after a period in 
which an interface sends relatively little data compared to its CIR, more than Bc bits can be sent 
in one or more time intervals. This concept is called excess burst (Be). When using a Be, the shaper 
can allow, in addition to the Bc bits per Tc, Be extra bits to be sent. Depending on the settings, 
it may take one time interval to send the extra bits, or it may require multiple time intervals. 
Figure 16-2 shows a graph of the same example in Figure 16-1, but with a Be also equal to 8000 bits. 
In this case, the Be extra bits are all sent in the ﬁrst time interval after the relative inactivity. 
Figure 16-2
Bc and Be, After a Period of Inactivity 
In the ﬁrst interval, trafﬁc shaping can send a total of 16,000 bits (Bc + Be bits). On a 128-kbps 
link, assuming a 125-ms Tc, all 125 ms is required to send 16,000 bits. In this particular case, after 
a period of inactivity, R1 sends continuously for the entire ﬁrst interval. In the second interval, 
the shaper allows the usual Bc bits to be sent. In effect, with these settings, the shaper allows 
192.5 ms of consecutive sending after a period of low activity.
Underlying Mechanics of Shaping
Shapers apply a simple formula to the Tc, Bc, and shaping rate parameters:
Tc = Bc/shaping rate
For example, in Figures 16-1 and 16-2, if the shaping rate (64 kbps) and the Bc (8000 bits) were 
both conﬁgured, the shaper would then calculate the Tc as 8000/64,000 = 0.125 seconds. 
Alternatively, if the rate and Tc had been conﬁgured, the shaper would have calculated Bc as Bc = 
rate * Tc (a simple derivation of the formula listed earlier), or 64 kbps * 0.125 ms = 8000 bits. 
(Both CB Shaping and FRTS use default values in some cases, as described in the conﬁguration 
sections of this chapter.)
Sending Rate 
Time
(Ms)
128 kbps
0 kbps
0
125
250
375
500
625
750
875
1000
Bc = 8000, Be = 8000
Send 16,000 bits in first interval
Bc = 8000, Be = 0
Send 16,000 bits in each
interval, until Be can
accumulate
Period of inactivity — Be
re-fills in 1 single totally
dormant Tc in this example
KEY 
POINT
KEY 
POINT

558     Chapter 16: Shaping and Policing
Trafﬁc shaping uses a token bucket model to manage the shaping process. First, consider the case 
in which the shaper is not using Be. Imagine a bucket of size Bc, with the bucket ﬁlled with tokens 
at the beginning of each Tc. Each token lets the shaper buy the right to send 1 bit. So, at the 
beginning of each Tc, the shaper has the ability to release Bc worth of bits.
Shapers perform two main actions related to the bucket:
1.
Reﬁll the bucket with new tokens at the beginning of each Tc.
2.
Spend tokens to gain the right to forward packets. 
Step 1 describes how the bucket is ﬁlled with Bc tokens to start each interval. Figure 16-3 shows 
a visual representation of the process. Note that if some of the tokens from the previous time 
interval are still in the bucket, some of the new tokens spill over the side of the bucket and are 
wasted. 
Figure 16-3
Mechanics of Filling the Shaping Token Bucket
Step 2 describes how the shaper spends the tokens. The shaper has to take tokens from the bucket 
equal to the number of bits in a packet in order to release that packet for transmission. For example, 
if the packet is 1000 bits long, the shaper must remove 1000 tokens from the bucket to send that 
packet. When trafﬁc shaping tries to send a packet, and the bucket does not have enough tokens in 
it to buy the right to send the packet, trafﬁc shaping must wait until the next interval, when the 
token bucket is reﬁlled.
Trafﬁc shaping implements Be by making the single token bucket bigger, with no other changes 
to the token-bucket model. In other words, only Bc tokens are added each Tc, and tokens must still 
be consumed in order to send packets. The key difference using Be (versus not using Be) is that 
when some of the tokens are left in the bucket at the end of the time interval, and Bc tokens are 
added at the beginning of the next interval, more than Bc tokens are in the bucket—therefore 
allowing a larger burst of bits in this new interval.
Bucket1
Size: Bc
Spillage
Wasted
$.25
Token
Token Generator:
Shapter Creates New Tokens, 
Refills with Bc Tokens  Every Tc
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
KEY 
POINT
KEY 
POINT

Class-Based Shaping Conﬁguration     559
Trafﬁc-Shaping Adaptation on Frame Relay Networks
A shaper used with Frame Relay can be conﬁgured to vary the shaping rate over time based on the 
presence or absence of congestion. When there is no congestion, the shaper uses the shaping rate, 
but when congestion occurs, it lowers the shaping rate, eventually reaching a minimum shaping 
rate. The minimum rate can be conﬁgured, or default to 50 percent of the shaping rate. This lower 
rate is typically called either the minimum information rate (MIR) or the mincir.
To lower the rate, shapers must notice congestion via one of two methods:
■
Receipt of a frame with the Backward Explicit Congestion Notiﬁcation (BECN) bit set
■
Receipt of a Cisco-proprietary ForeSight congestion message
Each time a BECN or ForeSight message is received, the shaper slows down by 25 percent of 
the maximum rate. To slow down, CB Shaping simply decreases Bc and Be by 25 percent, 
keeping the Tc value the same. If more BECNs or ForeSight messages are received, the Bc and 
Be settings are ratcheted down another 25 percent, until they bottom out at values that match 
the mincir. The rate grows again after 16 consecutive Tc values without a BECN or ForeSight 
congestion message. At that point, the shaping rate grows by  of the shaping rate during each 
Tc, in this case by increasing the actual Bc and Be values used, until the maximum rate is 
reached again. 
Class-Based Shaping Conﬁguration
Class-Based Shaping (CB Shaping) implements all the core concepts described so far in this 
chapter, plus several other important features. First, it allows for several Cisco IOS queuing 
tools to be applied to the packets delayed by the shaping process. At the same time, it allows 
for fancy queuing tools to be used on the interface software queues. It also allows for 
classiﬁcation of packets, so that some types of packets can be shaped at one rate, a second type 
of packet can be shaped at another rate, while allowing a third class of packets to not be shaped 
at all. 
The only new MQC command required to conﬁgure CB Shaping is the shape command. The 
“Foundation Summary” section provides a CB Shaping command reference, in Table 16-9:
sssshhhhaaaappppeeee [aaaavvvveeeerrrraaaaggggeeee | ppppeeeeaaaakkkk] mean-rate [[burst-size] [excess-burst-size]]
CB Shaping can be implemented for output packets only, and it can be associated with either a 
physical interface or a subinterface. 
To enable CB Shaping, the service-policy output command is conﬁgured under either the 
interface or the subinterface, with the referenced policy map including the shape command.
1
16
------

560     Chapter 16: Shaping and Policing
Example 16-1 shows a simple CB Shaping conﬁguration that uses the following criteria:
■
Interface clock rate is 128 kbps.
■
Shape all trafﬁc at a 64-kbps rate.
■
Use the default setting for Tc.
■
Shape trafﬁc exiting subinterface s0/0.1.
■
The software queuing on s0/0 will use WFQ (the default).
■
The shaping queue will use FIFO (the default). 
Example 16-1
CB Shaping of All Trafﬁc Exiting S0/0.1 at 64 kbps 
! Policy map sssshhhhaaaappppeeee----aaaallllllll places all traffic into the class-default class, matching
! all packets. All packets will be shaped to an average of 64 kbps. Note the 
! units are in bits/second, so 64000 means 64 kbps.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    sssshhhhaaaappppeeee----aaaallllllll
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            sssshhhhaaaappppeeee    aaaavvvveeeerrrraaaaggggeeee    66664444000000000000
! The physical interface will not show the ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee command, but it is 
! configured by default, implementing WFQ for interface s0/0 software queuing.
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll0000////0000
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111122228888
! Below, CB Shaping has been enabled for all packets forwarded out s0/0.1.
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll0000////0000....1111
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    sssshhhhaaaappppeeee----aaaallllllll
! Refer to the text after this example for more explanations of this next command.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    ssss0000////0000....1111
 Serial0/0.1 
  Service-policy output: shape-all
    Class-map: class-default (match-any)
      7718 packets, 837830 bytes
      30 second offered rate 69000 bps, drop rate 5000 bps
      Match: any 
      Traffic Shaping
           Target/Average   Byte   Sustain   Excess    Interval  Increment
             Rate           Limit  bits/int  bits/int  (ms)      (bytes)  
            64000/64000     2000   8000      8000      125       1000     
        Adapt  Queue     Packets   Bytes     Packets   Bytes     Shaping
        Active Depth                         Delayed   Delayed   Active
        —     56        6393      692696    6335      684964    yes

Class-Based Shaping Conﬁguration     561
The conﬁguration itself is relatively straightforward. The shape-all policy map matches all 
packets in a single class (class-default) and is enabled on s0/0.1. So, all packets exiting s0/0.1 will 
be shaped to the deﬁned rate of 64 kbps. 
The output of the show policy-map interface s0/0.1 command shows the settings for all the 
familiar shaping concepts, but it uses slightly different terminology. CB Shaping defaults to a Bc 
and Be of 8000 bits each, listed under the columns Sustain bits/int (with “int” meaning “interval,” 
or Tc) and Excess bits/int, respectively. The heading Byte Limit represents the size of the token 
bucket—the sum of Bc and Be, but listed as a number of bytes (2000 bytes in this case) instead of 
bits. The last column in that same part of the command output, Increment (bytes), indicates how 
many bytes’ worth of tokens are replenished each Tc. This value is equal to Bc (8000 bits), but the 
output is listed as a number of bytes (1000 bytes).
The CB Shaping shape command requires the shaping rate to be set. However, Bc and Be can be 
omitted, and Tc cannot be set directly. As a result, CB Shaping calculates some or all of these 
settings. CB Shaping calculates the values differently based on whether the shaping rate exceeds 
320 kbps. Table 16-3 summarizes the rules.
Tuning Shaping for Voice Using LLQ and a Small Tc
Example 16-1 in the previous section shows default settings for queuing for the interface software 
queues (WFQ) and for the shaping queue (FIFO). Example 16-2 shows an alternative conﬁguration 
that works better for voice trafﬁc by using LLQ for the shaped trafﬁc. Also, the conﬁguration 
forces the Tc down to 10 ms, which means that each packet will experience only a short delay 
waiting for the beginning of the next Tc. By keeping Tc to a small value, the LLQ logic applied to 
the shaped packets does not have to wait nearly as long to release packets from the PQ, as 
compared with the default Tc settings. 
The revised requirements, as compared with Example 16-1, are as follows:
■
Enable LLQ to support a single G.729 voice call.
■
Shape to 96 kbps—less than the clock rate (128 kbps), but more than the CIR of the VC.
■
Tune Tc to 10 ms.
Table 16-3
CB Shaping Calculation of Default Variable Settings
KEY 
POINT
Variable
Rate <= 320 kbps
Rate > 320 kbps
Bc
8000 bits
Bc = shaping rate * Tc
Be
Be = Bc = 8000
Be = Bc
Tc
Tc = Bc/shaping rate
25 ms

562     Chapter 16: Shaping and Policing
Example 16-2
CB Shaping on R3, 96-kbps Shape Rate, with LLQ for Shaping Queues 
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    vvvvooooiiiipppp----rrrrttttpppp
        mmmmaaaattttcccchhhh    iiiipppp    rrrrttttpppp    11116666333388884444    11116666333388883333
! qqqquuuueeeeuuuueeee----vvvvooooiiiipppp implements a PQ for VoIP traffic, and uses WFQ in the default class.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp
        ccccllllaaaassssssss    vvvvooooiiiipppp----rrrrttttpppp
            pppprrrriiiioooorrrriiiittttyyyy    33332222
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            ffffaaaaiiiirrrr----qqqquuuueeeeuuuueeee
! sssshhhhaaaappppeeee----aaaallllllll shapes all traffic to 96 kbps, with Bc of 960. Tc is calculated as
! 960/96000 or 10 ms. Also note the sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp command. This applies
! policy map qqqquuuueeeeuuuueeee----vvvvooooiiiipppp to all packets shaped by the sssshhhhaaaappppeeee command.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    sssshhhhaaaappppeeee----aaaallllllll
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            sssshhhhaaaappppeeee    aaaavvvveeeerrrraaaaggggeeee    99996666000000000000    999966660000
            sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll0000////0000....1111
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    sssshhhhaaaappppeeee----aaaallllllll
! Note the Interval is now listed as 10 ms. Also, note the detailed stats for LLQ
! are also listed at the end of the command. 
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000////0000....1111
 Serial0/0.1 
  Service-policy output: shape-all
    Class-map: class-default (match-any)
      5189 packets, 927835 bytes
      30 second offered rate 91000 bps, drop rate 0 bps
      Match: any 
      Traffic Shaping
           Target/Average   Byte   Sustain   Excess    Interval  Increment
             Rate           Limit  bits/int  bits/int  (ms)      (bytes)  
            96000/96000     1200      960      960      10        120      
        Adapt  Queue     Packets   Bytes     Packets   Bytes     Shaping
        Active Depth                         Delayed   Delayed   Active
        —     17        5172      910975    4002      831630    yes
      Service-policy : queue-voip
        Class-map: voip-rtp (match-all)
          4623 packets, 295872 bytes
          30 second offered rate 25000 bps, drop rate 0 bps
          Match: ip rtp 16384 16383
          Weighted Fair Queueing
            Strict Priority
            Output Queue: Conversation 24 
            Bandwidth 32 (kbps) Burst 800 (Bytes)

Class-Based Shaping Conﬁguration     563
Example 16-2 shows how to use LLQ against the packets shaped by CB Shaping by calling an 
LLQ policy map with the service-policy command. Note the command syntax (service-policy 
queue-voip) does not include the output keyword; the output direction is implied. Figure 16-4 
shows the general idea behind what is happening in the conﬁguration.
Figure 16-4
Interaction Between Shaping Policy Map shape-all and Queuing Policy Map queue-voip
Scanning Figure 16-4 from left to right, CB Shaping must make the ﬁrst decision after a packet has 
been routed out the subinterface. CB Shaping ﬁrst needs to decide if shaping is active; if it is, CB 
Shaping should put the packet into a shaping queue. If it is not active, the packet can move right on 
to the appropriate interface software queue. Shaping becomes active when a single packet exceeds 
the trafﬁc contract; shaping only becomes inactive again when all the shaping queues are drained. 
Assuming that a packet needs to be delayed by CB Shaping, the LLQ logic of policy-map 
queue-voip determines into which of the two shaping queues the packet should be placed. Later, 
when CB Shaping decides to release the next packet (typically when the next Tc begins), LLQ 
            (pkts matched/bytes matched) 3528/225792
            (total drops/bytes drops) 0/0
        Class-map: class-default (match-any)
          566 packets, 631963 bytes
          30 second offered rate 65000 bps, drop rate 0 bps
          Match: any 
          Weighted Fair Queueing
            Flow Based Fair Queueing
            Maximum Number of Hashed Queues 16 
(total queued/total drops/no-buffer drops) 17/0/0
Example 16-2
CB Shaping on R3, 96-kbps Shape Rate, with LLQ for Shaping Queues (Continued)
Voice Payload –
Class voip-rtp
LLQ of 32 kbps 
All Other traffic –
class class-default
WFQ All Other
Traffic
Hardware
Queue
Interface
Software Queue 
AR 128 kbps
Packet
Routed
Out This 
Interface
:
No
Yes
Drain at 96 
kbps
Defined by policy-map queue-voip 
Defined by policy- 
map shape-all
Shaping
Active?
Toggles Based on
Rules Shown in
the Text 
Bit Rate
Limit
x bps
Slow Down
Bit Rate
Limit
x bps
Slow Down
KEY 
POINT
KEY 
POINT

564     Chapter 16: Shaping and Policing
determines which packets are taken next. This example has only two queues, one of which is an 
LLQ, so packets are always taken from the LLQ if any are present in that queue.
When a packet leaves one of the two shaping queues, it drains into the interface software queues. For 
routers with many VCs on the same physical interface, the VCs compete for the available interface 
bandwidth. Examples 16-1 and 16-2 both defaulted to use WFQ on the interface. However, LLQ or 
CBWFQ could have been used on the interface in addition to its use on the shaping function, simply 
by adding a service-policy output policy-map-name command under s0/0.
Conﬁguring Shaping by Bandwidth Percent
The shape command allows the shaping rate to be stated as a percentage of the setting of the interface 
or subinterface bandwidth setting. Conﬁguring based on a simple percentage of the bandwidth 
command setting seems obvious at ﬁrst. However, you should keep in mind the following facts when 
conﬁguring the shape command based on percentage of interface bandwidth:
■
The shape percent command uses the bandwidth of the interface or subinterface under which 
it is enabled.
■
Subinterfaces do not inherit the bandwidth setting of the physical interface, so if it not set via 
the bandwidth command, it defaults to 1544.
■
The Bc and Be values are conﬁgured as a number of milliseconds; the values are calculated as 
the number of bits that can be sent at the conﬁgured shaping rate, in the conﬁgured time period.
■
Tc is set to the conﬁgured Bc value, which is in milliseconds.
Example 16-3 shows a brief example of CB Shaping conﬁguration using percentages, including 
explanations of the points from the preceding list.
NOTE
When one policy map refers to another, as in Example 16-2, the conﬁgurations are 
sometimes called “hierarchical” policy maps. Other times, they are called “nested” policy maps. 
Or, you can just think of it as how CBWFQ and LLQ can be conﬁgured for the shaping queues. 
Example 16-3
Shaping Based on Percent
! With s0/0.1 bandwidth of 128, the rate is 50% * 128, or 64 kbps. At 64 kbps, 8000
! bits can be sent in the configured 125-ms time interval (64000 * 0.125 = 8000).
! Note that the mmmmssss parameter in the sssshhhhaaaappppeeee command is required after the Bc 
! (shown) or Be (not shown), otherwise the command is rejected. Not shown: The
! Tc was set to 125 ms, the exact value configured for Bc.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ppppeeeerrrrcccceeeennnntttt----tttteeeesssstttt
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
            sssshhhhaaaappppeeee    aaaavvvveeeerrrraaaaggggeeee    ppppeeeerrrrcccceeeennnntttt    55550000    111122225555    mmmmssss
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111122228888
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    ppppeeeerrrrcccceeeennnntttt----tttteeeesssstttt
KEY 
POINT

Frame Relay Trafﬁc Shaping Conﬁguration     565
CB Shaping to a Peak Rate
The shape average command has been used in all the examples so far. However, the command 
shape peak mean-rate is also allowed, which implements slightly different behavior as compared 
with shape average for the same conﬁgured rate. The key actions of the shape peak mean-rate 
command are summarized as follows:
■
It calculates (or defaults) Bc, Be, and Tc the same way as the shape average command.
■
It reﬁlls Bc + Be tokens (instead of just Bc tokens) into the token bucket for each time 
interval.
This logic means that CB Shaping gets the right to send the committed burst, and the excess burst, 
every time period. As a result, the actual shaping rate is as follows:
Shaping_rate = conﬁgured_rate (1 + Be/Bc)
For instance, the shape peak 64000 command, with Bc and Be defaulted to 8000 bits each, results 
in an actual shaping rate of 128 kbps, based on the following formula:
64 (1 + 8000/8000) = 128
Adaptive Shaping
Adaptive shaping conﬁguration requires only a minor amount of effort compared to the topics 
covered so far. To conﬁgure it, just add the shape adaptive min-rate command under the shape 
command. Example 16-4 shows a short example.
Frame Relay Trafﬁc Shaping Conﬁguration
Frame Relay Trafﬁc Shaping (FRTS) differs from CB Shaping in several signiﬁcant ways, 
although the underlying token-bucket mechanics are identical. The following list highlights some 
of the key similarities and differences:
■
FRTS can be used only on Frame Relay interfaces, whereas CB Shaping can be used with any 
underlying data link protocol.
■
Like CB Shaping, FRTS allows a large number of IOS queuing tools to be used instead of a 
single FIFO shaping queue.
Example 16-4
Adaptive CB Shaping Conﬁguration
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    sssshhhhaaaappppeeee----aaaallllllll
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
   sssshhhhaaaappppeeee    aaaavvvveeeerrrraaaaggggeeee 99996666000000000000    9999666600000000    mmmmssss
            sssshhhhaaaappppeeee    aaaaddddaaaappppttttiiiivvvveeee    33332222000000000000
KEY 
POINT
KEY 
POINT
KEY 
POINT

566     Chapter 16: Shaping and Policing
■
Unlike CB Shaping, FRTS does not allow any fancy queuing tools to be enabled on the 
physical interface concurrent with FRTS.
■
FRTS always shapes the trafﬁc on each VC separately.
■
FRTS cannot classify trafﬁc in order to shape a subset of trafﬁc on a particular VC.
■
Unlike CB Shaping, FRTS can dynamically learn the CIR, Bc, and Be values conﬁgured 
on the Frame Relay switch by using the Enhanced Local Management Interface (ELMI) 
feature.
Additionally, FRTS does not use MQC commands, making the conﬁguration signiﬁcantly 
different from that of CB Shaping. FRTS organizes a set of shaping parameters (rate, Bc, and so 
on) into a named Frame Relay map class, using the map-class frame-relay command. The frame-
relay class command and the class command then refer to those map classes, deﬁning the shaping 
parameters to use for each Frame Relay VC. Figure 16-5 shows several examples of how these 
commands work together.
Figure 16-5
Assignment of Map Classes to DLCIs with FRTS
As Figure 16-5 illustrates, FRTS uses the map class referenced by the class command under the 
frame-relay interface-dlci command, if it exists (example: DLCI 203). If not, FRTS assigns the 
map class based on the subinterface’s frame-relay class command (example: DLCI 103). 
Otherwise, FRTS looks for the setting on the physical interface (example: DLCI 102). If FRTS 
still has not found a reference to a map class, it uses default settings for that VC (example: DLCI 
502). (Beware of enabling FRTS and not setting a VC’s shaping parameters, especially if you want 
to get more than 56 kbps out of that VC!) These rules can be summarized as follows:
■
If the class map-class-name command is conﬁgured under the interface-dlci command, that 
map class deﬁnes the FRTS parameters for that VC.
■
If not, if the frame-relay class map-class-name command is conﬁgured under the 
subinterface, that map class deﬁnes the FRTS parameters for the remaining underlying VCs.
interface s0/0
 encapsulation frame-relay
 frame-relay traffic-shaping
 frame-relay class C2
!
interface s0/0.1 point-to-point
 frame-relay class C1
 frame-relay interface-dlci 101
!
!
interface s0/0.2 point-to-point
! No frame-relay class command present
  frame-relay interface-dlci 102
!
interface s0/0.3 multipoint
 frame-relay class C2
  frame-relay interface-dlci 103
  frame-relay interface-dlci 203
    class C3
interface s1/1
 encapsulation frame-relay
 frame-relay traffic-shaping
! No frame-relay class command here
!
interface s1/1.1 point-to-point
 frame-relay class C2
 frame-relay interface-dlci 501
!
!
interface s1/1.2 point-to-point
! No frame-relay class command present
  frame-relay interface-dlci 502
map-class frame-relay C1
Sets CIR, Bc, and so on
map-class frame-relay C2
Sets CIR, Bc, and so on
map-class frame-relay C3
Sets CIR, Bc, and so on
Default Settings when no class:
CIR 56 kbps, Bc = 7000 bits, Tc = 125 ms
KEY 
POINT
KEY 
POINT

Frame Relay Trafﬁc Shaping Conﬁguration     567
■
If not, if the frame-relay class map-class-name command is conﬁgured under the physical 
interface, that map class deﬁnes the FRTS parameters for the remaining underlying VCs.
■
If not, FRTS uses the default settings of shaping at 56 kbps, Bc = 7000 bits, and Tc = 125 ms.
FRTS Conﬁguration Using the trafﬁc-rate Command
FRTS uses two main styles of conﬁguration for the shaping parameters. The frame-relay trafﬁc-
rate average [peak] command conﬁgures the average and peak rate, with Cisco IOS calculating 
Bc and Be with an assumed Tc of 125 ms. This method is simpler to conﬁgure, but offers no ability 
to tune Tc or set Bc and Be.
Example 16-5 uses FRTS to implement the same requirements as the ﬁrst CB Shaping example 
shown in Example 16-1, except that it uses FIFO queuing for the interface software queues.
Example 16-5
FRTS Conﬁguration, 64 kbps, with the frame-relay trafﬁc-rate Command 
! The ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppiiiinnnngggg command enables FRTS for all VCs on s0/0. The
! ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444 command refers to a map class. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppiiiinnnngggg
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111   
! lines omitted for brevity
! Above, note that the ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444 command could have been
! listed under S0/0 instead, with the same results, as only one VC exists on the
! interface. Alternately, the ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444 command could have been used
! under the ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111 command.
! Next, The ttttrrrraaaaffffffffiiiicccc----rrrraaaatttteeee command sets the peak equal to the average, which results 
! in a Be of 0.
mmmmaaaapppp----ccccllllaaaassssssss    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    sssshhhhaaaappppeeee----aaaallllllll----66664444
 ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ttttrrrraaaaffffffffiiiicccc----rrrraaaatttteeee    66664444000000000000    66664444000000000000
! The sssshhhhoooowwww    ffffrrrraaaammmmeeee    ppppvvvvcccc command, with no DLCI listed, does not list FRTS info, but 
! it does show FRTS info when the specific DLCI is given. The word “fifo” refers
! to the shaping queue.
R3# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc    111100001111
PVC Statistics for interface Serial0/0 (Frame Relay DTE)
DLCI = 101, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0.1
! lines omitted for brevity
  shaping active      
  traffic shaping drops 2774
  Queueing strategy: fifo
  Output queue 3/40, 678 drop, 3777 dequeued
! The next command shows the default 125-ms Tc, the calculated Bc = Tc * CIR, 
continues

568     Chapter 16: Shaping and Policing
To use the frame-relay trafﬁc-rate command to use a Be, the peak rate must be conﬁgured, and 
it must be more than the average rate. This command causes FRTS to calculate Be based on this 
formula: 
Be = Tc * (PIR – CIR) 
In Example 16-5, Be = 0.125 * (64,000 – 64,000) = 0, as shown in the output of the show trafﬁc-
shape command in the example. However, if the frame-relay trafﬁc-rate 64000 96000 command 
had been used, the Be would be .125 (96,000 – 64,000) = 4000.
Setting FRTS Parameters Explicitly
The frame-relay cir, frame-relay Bc, and frame-relay Be commands can be used to directly 
set FRTS parameters in an FRTS map class, instead of setting the Bc, Be, and Tc values 
indirectly using the frame-relay trafﬁc-rate command. Example 16-6 shows two new map 
classes on the same router conﬁgured in Example 16-5. These new map classes use these 
additional commands to set FRTS parameters explicitly, which is particularly useful for tuning 
FRTS to use a small Tc.
! and it uses the same text in the headings as in the CB Shaping examples.
R3# sssshhhhoooowwww    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppeeee
Interface   Se0/0.1
       Access Target    Byte   Sustain   Excess    Interval  Increment Adapt
VC     List   Rate      Limit  bits/int  bits/int  (ms)      (bytes)   Active
101           64000     1000   64000     0         125       1000     —  
! This command lists basic stats for FRTS. The “fcfs” refers to the shaping queue
! as well, meaning “first come first served,” which means the same thing as “fifo.”
R3# sssshhhhoooowwww    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppeeee    qqqquuuueeeeuuuueeee
Traffic queued in shaping queue on Serial0/0.1 dlci 101
  Queueing strategy: fcfs
  Queueing Stats: 23/40/959 (size/max total/drops)
! lines omitted for brevity
Example 16-6
FRTS Conﬁguration by Setting CIR and BC to Manipulate Tc 
! mmmmaaaapppp----ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444----lllloooonnnngggg sets CIR and Bc directly, defaulting Be to 0, with
! Tc calculated via Tc = Bc/CIR
mmmmaaaapppp----ccccllllaaaassssssss    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    sssshhhhaaaappppeeee----aaaallllllll----66664444----lllloooonnnngggg
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    cccciiiirrrr    66664444000000000000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbcccc    8888000000000000
! All VCs on s0/0.1 that do not have ccccllllaaaassssssss commands will use shape-all-64-long.
R3(config)# iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000////0000....1111
R3(config-subif)# ffffrrrraaaammmmeeee    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444----lllloooonnnngggg
R3(config-subif)# ^^^^ZZZZ
! This command confirms the configured rate, with the Tc calculated as Bc/rate, or
Example 16-5
FRTS Conﬁguration, 64 kbps, with the frame-relay trafﬁc-rate Command (Continued)
KEY 
POINT

Frame Relay Trafﬁc Shaping Conﬁguration     569
FRTS Conﬁguration Using LLQ
FRTS supports a variety of queuing tools for managing packets it queues. The queuing tool is 
enabled via a command in the map class. Example 16-7 shows just such an example, with a new 
map class. The requirements implemented in this example are as follows:
■
Shape trafﬁc on the two VCs (101 and 102) on s0/0 with the same settings for shaping.
■
Use LLQ only on the VC with DLCI 101.
■
Set Be to 0, and tune Tc to 10 ms.
Note that the example does not show the conﬁguration for policy map queue-voip. Its full 
conﬁguration can be seen back in Example 16-2.
! in this case, 8000/64000. Note the default Be of 0 is also listed.
R3# sssshhhhoooowwww    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppeeee
Interface   Se0/0.1
       Access Target    Byte   Sustain   Excess    Interval  Increment Adapt
VC     List   Rate      Limit  bits/int  bits/int  (ms)      (bytes)   Active
101           64000     1000    8000     0         125       1000      -
! The next commands create another map class, with the Bc set to 1/100th
! of the shaping rate (10 ms). 
R3(config)# mmmmaaaapppp----ccccllllaaaassssssss    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    sssshhhhaaaappppeeee----aaaallllllll----66664444----sssshhhhoooorrrrttttTTTTCCCC
R3(config-map-class)# ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    cccciiiirrrr    66664444000000000000
R3(config-map-class)# ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbcccc    666644440000
R3(config-map-class)# iiiinnnntttt    ssss    0000////0000....1111
R3(config-subif)# ffffrrrraaaammmmeeee    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----66664444----sssshhhhoooorrrrttttTTTTCCCC
R3# sssshhhhoooowwww    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppeeee
Interface   Se0/0.1
       Access Target    Byte   Sustain   Excess    Interval  Increment Adapt
VC     List   Rate      Limit  bits/int  bits/int  (ms)      (bytes)   Active
101           64000     80     640       0         10        80        -
Example 16-7
FRTS to Two Sites, with LLQ Used to Shape the Queue to Site 1 
R3# sssshhhhoooowwww    rrrruuuunnnnnnnniiiinnnngggg----ccccoooonnnnffffiiiigggg
! FRTS is first enabled, and class shape-all-96 is set up to filter down to the
! remaining VCs, assuming no other ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss or ccccllllaaaassssssss subcommands are applied
! to them. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss    sssshhhhaaaappppeeee----aaaallllllll----99996666
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ttttrrrraaaaffffffffiiiicccc----sssshhhhaaaappppiiiinnnngggg
! DLCI 101 will use class shape-with-LLQ based on the next few commands.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
continues
Example 16-6
FRTS Conﬁguration by Setting CIR and BC to Manipulate Tc (Continued)

570     Chapter 16: Shaping and Policing
FRTS Adaptive Shaping
Adding FRTS adaptive shaping conﬁguration to an existing FRTS conﬁguration is relatively 
simple. To enable it, do the following:
1.
Add either a frame-relay adaptive-shaping becn or frame-relay adaptive-shaping 
foresight command into the appropriate map class.
2.
To set the minimum to something other than the default of 50 percent of the shaping rate, add 
the frame-relay mincir rate command in the map class.
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ccccllllaaaassssssss    sssshhhhaaaappppeeee----wwwwiiiitttthhhh----LLLLLLLLQQQQ
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111            
! DLCI 102 will use class shape-all-96 because it is configured under s0/0.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000....2222    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100002222            
! The only difference between the two map classes is the sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt
! vvvvooooiiiipppp----aaaannnndddd----aaaalllllllleeeellllsssseeee command, which enables LLQ in the shape-with-LLQ class.
mmmmaaaapppp----ccccllllaaaassssssss    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    sssshhhhaaaappppeeee----aaaallllllll----99996666
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    cccciiiirrrr    99996666000000000000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbcccc    999966660000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbeeee    0000
!
mmmmaaaapppp----ccccllllaaaassssssss    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    sssshhhhaaaappppeeee----wwwwiiiitttthhhh----LLLLLLLLQQQQ
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    cccciiiirrrr    99996666000000000000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbcccc    999966660000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    bbbbeeee    0000
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    qqqquuuueeeeuuuueeee----vvvvooooiiiipppp
! The sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee command does not show any LLQ stats with FRTS.
! Instead, the sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc    DLCI command is required, with output similar
! to the sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee command.
R3# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc    111100001111
PVC Statistics for interface Serial0/0 (Frame Relay DTE)
DLCI = 101, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0.1
! lines omitted for brevity
  shaping active      
  traffic shaping drops 0
  service policy queue-voip
 Serial0/0.1: DLCI 101 -
  Service-policy output: queue-voip
    Class-map: voip-rtp (match-all)
      5101 packets, 326464 bytes
      30 second offered rate 25000 bps, drop rate 0 bps
      Match: ip rtp 16384 16383
      Weighted Fair Queueing
        Strict Priority
! lines omitted for brevity
Example 16-7
FRTS to Two Sites, with LLQ Used to Shape the Queue to Site 1 (Continued)
KEY 
POINT

Policing Concepts and Conﬁguration     571
Policing Concepts and Conﬁguration
Class-Based Policing (CB Policing) performs different internal processing than the older, 
alternative policer in Cisco router IOS, namely committed access rate (CAR). This section focuses 
on CB Policing, starting with concepts and then covering conﬁguration details.
CB Policing Concepts
CB Policing is enabled for packets either entering or exiting an interface, or those entering or 
exiting a subinterface. It monitors, or meters, the bit rate of the combined packets; when a packet 
pushes the metered rate past the conﬁgured policing rate, the policer takes action against that 
packet. The most aggressive action is to discard the packet. Alternately, the policer can simply 
re-mark a ﬁeld in the packet. This second option allows the packets through, but if congestion 
occurs at later places during a marked-down packet’s journey, it is more likely to be discarded. 
Table 16-4 lists the keywords used to imply the policer’s actions.
CB Policing categorizes packets into two or three categories, depending on the style of policing, 
and then applies one of these actions to each category of packet. The categories are conforming 
packets, exceeding packets, and violating packets. The CB Policing logic that dictates when 
packets are placed into a particular category varies based on the type of policing. The next three 
sections outline the types of CB Policing logic.
Single-Rate, Two-Color Policing (One Bucket)
Single-rate, two-color policing is the simplest option for CB Policing. This method uses a single 
policing rate with no excess burst. The policer will then use only two categories (conform and 
exceed), deﬁning a different action on packets of each type. (Typically, the conform action is to 
transmit the packet, with the exceed action either being to drop the packet or mark it down.) 
Table 16-4
Policing Actions Used CB Policing
KEY 
POINT
Command Option
Mode and Function
drop
Drops the packet 
set-dscp-transmit
Sets the DSCP and transmits the packet
set-prec-transmit
Sets the IP Precedence (0 to 7) and sends the packet
set-qos-transmit
Sets the QoS Group ID (1 to 99) and sends the packet
set-clp-transmit
Sets the ATM CLP bit (ATM interfaces only) and sends the packet
set-fr-de
Sets the Frame Relay DE bit (Frame Relay interfaces only) and sends 
the packet
transmit
Sends the packet

572     Chapter 16: Shaping and Policing
While this type of policing logic is often called single-rate, two-color policing, it is sometimes 
called single-bucket two-color policing because it uses a single token bucket for internal 
processing. Like shaping’s use of token buckets, the policer’s main logic relates to ﬁlling the 
bucket with tokens, and then spending the tokens. Over time, the policer reﬁlls the bucket 
according to the policing rate. For instance, policing at 96 kbps, over the course of 1 second, adds 
12,000 tokens to the bucket. (A token represents a byte with policers, so 12,000 tokens is 96,000 
bits’ worth of tokens.) 
CB Policing does not reﬁll the bucket based on a time interval. Instead, CB Policing reacts to the 
arrival of a packet by replenishing a prorated number of tokens into the bucket. The number of 
tokens is deﬁned by the following formula: 
The idea behind the formula is simple—essentially, a small number of tokens are replenished 
before each packet is policed; the end result is that tokens are replenished at the policing rate. 
For example, for a police rate of 128 kbps, the policer should replenish 16,000 tokens per second. 
If 1 second has elapsed since the previous packet arrived, CB Policing would replenish the bucket 
with 16,000 tokens. If 0.1 second has passed since the previous packet had arrived, CB Policing 
would replenish the bucket with 0.1 second’s worth of tokens, or 1600 tokens. If 0.01 second had 
passed, CB Policing would replenish 160 tokens at that time. 
The policer then considers whether it should categorize the newly arrived packet as either conforming 
or exceeding the trafﬁc contract. The policer compares the number of bytes in the packet (repres-
ented here as Xp, with “p” meaning “packet”) to the number of tokens the token bucket 
(represented here as Xb, with “b” meaning “bucket”). Table 16-5 shows the decision logic, along 
with whether the policer spends/removes tokens from the bucket.
As long as the overall bit rate does not exceed the policing rate, the packets will all conform. 
However, if the rate is exceeded, then as tokens are removed for each conforming packet, the 
bucket will eventually empty—causing some packets to exceed the contract. Over time, tokens are 
added back to the bucket, so some packets will conform. Once the bit rate lowers below the 
policing rate, all packets will again conform to the contract.
NOTE
Note that a token represents the right to send 1 byte, so the formula includes the 
division by 8 to convert the units to bytes instead of bits.
Table 16-5
Single-Rate, Two-Color Policing Logic for Categorizing Packets
Category
Requirements
Tokens Drained from Bucket
Conform
If Xp <= Xb
Xp tokens
Exceed
If Xp > Xb
None
(Current_packet_arrival_time
Previous_packet_arrival_time) * Police_rate
–
8
-------------------------------------------------------------------------------------------------------------------------------------

Policing Concepts and Conﬁguration     573
Single-Rate, Three-Color Policer (Two Buckets)
When you want the policer to police at a particular rate, but to also support a Be, the policer uses 
two token buckets. It also uses all three categories for packets—conform, exceed, and violate. 
Combining those concepts together, such policing is typically called single-rate, three-color policing. 
As before, CB Policing ﬁlls the buckets in reaction to packet arrival. (For lack of a better set of 
terms, this discussions calls the ﬁrst bucket the Bc bucket, because it is Bc in size, and the other 
one the Be bucket, because it is Be in size.) CB Policing ﬁlls the Bc bucket just like a single-bucket 
model. However, if the Bc bucket has any tokens left in it, some will spill; these tokens then ﬁll 
the Be bucket. Figure 16-6 shows the basic process.
Figure 16-6
Reﬁlling Dual Token Buckets with CB Policing
After ﬁlling the buckets, the policer then determines the category for the newly arrived packet, as 
shown in Table 16-6. In this case, Xbc is the number of tokens in the Bc bucket, and Xbe is the 
number in the Be bucket.
Two-Rate, Three-Color Policer (Two Buckets)
The third main option for CB Policing uses two separate policing rates. The lower rate is the 
previously discussed committed information rate (CIR), and the higher, second rate is called the 
peak information rate (PIR). Packets that fall under the CIR conform to the trafﬁc contract. 
Packets that exceed the CIR, but fall below PIR, are considered to exceed the contract. Finally, 
packets beyond the PIR are considered to violate the contract.
Table 16-6
Single-Rate Three-Color Policing Logic for Categorizing Packets
Category
Requirements
Tokens Drained from Bucket
Conform
Xp <= Xbc
Xp tokens from the Bc bucket
Exceed
Xp > Xbc and Xp <= Xbe 
Xp tokens from the Be bucket
Violate
Xp > Xbc and Xp > Xbe 
None
Bc Bucket
Size: Bc
Spillage Falls
into Bucket2
Be Bucket
Size: Be
Spillage
Wasted
$.25
Token
Refill Bytes Upon Arrival of Packet, per Formula:
(New_packet_arrival_time - previous_packet_arrival_time) * Policed_rate / 8
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token

574     Chapter 16: Shaping and Policing
The key difference between the single-rate and dual-rate three-color policers is that the dual-rate 
method essentially allows sustained excess bursting. With a single-rate, three-color policer, an 
excess burst exists, but the burst is sustained only until the Be bucket empties. A period of 
relatively low activity has to occur to reﬁll the Be bucket. With the dual-rate method, the Be bucket 
does not rely on spillage when ﬁlling the Bc bucket, as depicted in Figure 16-7. (Note that these 
buckets are sometimes called the CIR and PIR buckets with dual-rate policing.)
Figure 16-7
Reﬁlling CIR and PIR Dual Token Buckets 
The reﬁlling of the two buckets based on two different rates is very important. For example, 
imagine you set a CIR of 128 kbps (16 kilobytes/second), and a PIR of 256 kbps (32 kBps). If 
0.1 second passed before the next packet arrived, then the CIR bucket would be replenished with 
1600 tokens (1/10 of 1 second’s worth of tokens, in bytes), while the PIR bucket would be 
replenished with 3200 tokens. So, there are more tokens to use in the PIR bucket, as compared 
to the CIR bucket.
Next, the policer categorizes the packet. The only difference in logic as compared with the single-
rate, three-color policer is highlighted in Table 16-7, speciﬁcally related to how tokens are 
consumed for conforming packets.
Table 16-7
Two-Rate, Three-Color Policing Logic for Categorizing Packets
Category
Requirements
Tokens Drained from Bucket
Conform
Xp <= Xbc
Xp tokens from the Bc bucket
AND
Xp tokens from the Be bucket
Exceed
Xp > Xbc and Xp <= Xbe 
Xp tokens from the Be bucket
Violate
Xp > Xbc and Xp > Xbe 
None
Bc Bucket
Size: Bc 
PIR Bucket
Size: Be
Spillage
Wasted
Spillage
Wasted
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
$.25
Token
Pro-rated Refill,
based on arrival
time and Bc
Pro-rated Refill,
based on arrival
time and Be

Policing Concepts and Conﬁguration     575
While Table 16-7 does outline each detail, the underlying logic might not be obvious from the 
table. In effect, by ﬁlling the Be bucket based on the higher PIR, but also draining tokens from the 
Be bucket for packets that conform to the lower CIR, the Be bucket has tokens that represent the 
difference between the two rates. 
Class-Based Policing Conﬁguration
CB Policing uses the familiar MQC commands for conﬁguration. As a result, a policy map can 
police all packets using the convenient class-default class, or it can separate trafﬁc into classes, 
apply different policing parameters to different classes of trafﬁc, or even simply not police some 
classes.
The police command conﬁgures CB Policing inside a policy map. On the police command, you 
deﬁne the policing rate in bps, the Bc in bytes, and the Be in bytes, along with the actions for each 
category:
ppppoooolllliiiicccceeee    bps burst-normal burst-max    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    action    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    action
  [vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    action]
Single-Rate, Three-Color Policing of All Trafﬁc 
Example 16-8 shows how to police all trafﬁc, with criteria as follows:
■
Create a single-rate, three-color policing conﬁguration.
■
All trafﬁc policed at 96 kbps at ingress.
■
Bc of 1 second’s worth of trafﬁc is allowed.
■
Be of 0.5 second’s worth of trafﬁc is allowed.
■
The conform, exceed, and violate actions should be to forward, mark down to DSCP 0, and 
discard, respectively.
Example 16-8
Single-Rate, Three-Color CB Policing at 96 kbps 
! The ppppoooolllliiiicccceeee command sets the rate (in bps), Bc and Be (in bytes), and the three
! actions. 
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ppppoooolllliiiicccceeee----aaaallllllll
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
! note: the ppppoooolllliiiicccceeee command wraps around to a second line.
     ppppoooolllliiiicccceeee    cccciiiirrrr    99996666000000000000    bbbbcccc    11112222000000000000    bbbbeeee    6666000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    sssseeeetttt----ddddssssccccpppp----            
        ttttrrrraaaannnnssssmmmmiiiitttt    0000    vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    ddddrrrroooopppp
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll1111////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    iiiinnnnppppuuuutttt    ppppoooolllliiiicccceeee----aaaallllllll
continues

576     Chapter 16: Shaping and Policing
The police command deﬁnes a single rate, but the fact that it is a three-color policing 
conﬁguration, and not a two-color conﬁguration, is not obvious at ﬁrst glance. To conﬁgure a 
single-rate, three-color policer, you need to conﬁgure a violate action or explicitly set Be to 
something larger than 0. 
Policing a Subset of the Trafﬁc
One of the advantages of CB Policing is the ability to perform policing per class. Example 16-9 
shows CB Policing with HTTP trafﬁc classiﬁed and policed differently than the rest of the trafﬁc, 
with the following criteria:
■
Police web trafﬁc at 80 kbps at ingress to the ISP-edge router. Transmit conforming and 
exceeding trafﬁc, but discard violating trafﬁc.
■
Police all other trafﬁc at 16 kbps at ingress to the ISP-edge router. Mark down exceeding and 
violating trafﬁc to DSCP 0.
■
For both classes, set Bc and Be to 1 second’s worth and .5 second’s worth of trafﬁc, 
respectively.
! The sssshhhhoooowwww command below lists statistics for each of the three categories. 
ISP-edge# sssshhhhoooowwww        ppppoooolllliiiiccccyyyy----mmmmaaaapppp        iiiinnnntttteeeerrrrffffaaaacccceeee    ssss    1111////0000
 Serial1/0 
  Service-policy input: police-all
    Class-map: class-default (match-any)
      8375 packets, 1446373 bytes
      30 second offered rate 113000 bps, drop rate 15000 bps
      Match: any 
      police:
        cir 96000 bps, conform-burst 12000, excess-burst 6000
        conformed 8077 packets, 1224913 bytes; action: transmit
        exceeded 29 packets, 17948 bytes; action: set-dscp-transmit 0
        violated 269 packets, 203512 bytes; action: drop
        conformed 95000 bps, exceed 0 bps violate 20000 bps
Example 16-9
CB Policing 80 kbps for Web Trafﬁc, 16 kbps for the Rest with Markdown to Be, at
  ISP-Edge Router 
ccccllllaaaassssssss----mmmmaaaapppp    mmmmaaaattttcccchhhh----aaaallllllll    mmmmaaaattttcccchhhh----wwwweeeebbbb
        mmmmaaaattttcccchhhh    pppprrrroooottttooooccccoooollll    hhhhttttttttpppp
! The new policy map uses the new class to match http, and class-default to
! match all other traffic. 
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ppppoooolllliiiicccceeee----wwwweeeebbbb
  ccccllllaaaassssssss    mmmmaaaattttcccchhhh----wwwweeeebbbb
Example 16-8
Single-Rate, Three-Color CB Policing at 96 kbps (Continued)

Policing Concepts and Conﬁguration     577
CB Policing Defaults for Bc and Be
If you do not conﬁgure a Bc value on the police command, then CB Policing conﬁgures a default 
value equivalent to the bytes that could be sent in 1/4 second at the deﬁned policing rate. The 
formula is as follows:
        (CIR * 0.25 second)           CIR
Bc = —––––––––––––––– = –––—––––
                8 bits/byte                   32
The only part that may not be obvious is the division by 8 on the left—that is simply for the 
conversion from bits to bytes. The math reduces to CIR/32. Also, if the formula yields a number 
less than 1500, CB Policing uses a Bc of 1500.
If the police command does not include a Be value, the default Be setting depends on the type of 
policing. Table 16-8 summarizes the details.
Conﬁguring Dual-Rate Policing
Dual-rate CB Policing requires the same MQC commands, but with slightly different syntax on 
the police command, as shown here: 
ppppoooolllliiiicccceeee    {cir cir} [bbbbcccc    conform-burst] {ppppiiiirrrr    pir} [bbbbeeee    peak-burst] 
  [ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    action    [eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    action    [vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    action]]]
                    ppppoooolllliiiicccceeee    cccciiiirrrr    88880000000000000000    bbbbcccc    11110000000000000000    bbbbeeee    5555000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt
vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    ddddrrrroooopppp
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
                    ppppoooolllliiiicccceeee    cccciiiirrrr    11116666000000000000    bbbbcccc    2222000000000000    bbbbeeee    1111000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    
ttttrrrraaaannnnssssmmmmiiiitttt    vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    sssseeeetttt----ddddssssccccpppp----ttttrrrraaaannnnssssmmmmiiiitttt    0000
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll1111////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    iiiinnnnppppuuuutttt    ppppoooolllliiiicccceeee----wwwweeeebbbb
Table 16-8
Setting CB Policing Bc and Be Defaults
KEY 
POINT
Type of Policing 
Conﬁguration
Telltale Signs in the police 
Command
Defaults
Single rate, two color
No violate-action conﬁgured
Bc = CIR/32; Be = 0
Single rate, three color
violate-action is conﬁgured
Bc = CIR/32; Be = Bc
Dual rate, three color
PIR is conﬁgured
Bc = CIR/32; Be = PIR/32
Example 16-9
CB Policing 80 kbps for Web Trafﬁc, 16 kbps for the Rest with Markdown to Be, at
  ISP-Edge Router (Continued)

578     Chapter 16: Shaping and Policing
Note that the syntax of this command requires conﬁguration of both the CIR and a PIR because 
the curly brackets mean that the parameter is required. The command includes a place to set 
the Bc value and the Be value as well, plus the same set of options for conform, exceed, and 
violate actions. For example, if you wanted to perform dual-rate policing, with a CIR of 
96 kbps and a PIR of 128 kbps, you would simply use a command like police cir 96000 pir 
128000, with optional setting of Bc and Be, plus the settings for the actions for each of the 
three categories.
Multi-Action Policing
When CB Policing re-marks packets instead of discarding them, the design might call for marking 
more than one ﬁeld in a packet. For instance, when transmitting into a Frame Relay cloud, it might 
be useful to mark both DSCP and FR DE when a packet violates the contract. Marking multiple 
ﬁelds in the same packet with CB Policing is called multi-action policing.
The police command uses a slightly different syntax to implement multi-action policing. By 
omitting the actions from the command, the police command places the user into a policing 
subconﬁguration mode in which the actions can be added via separate commands (the conform-
action, exceed-action, and violate-action commands). To conﬁgure multiple actions, one of these 
three action commands would be used more than once, as shown in Example 16-10, which marks 
DSCP 0 and sets FR DE for packets that violate the trafﬁc contract.
Policing by Percentage
As it does with the shape command, Cisco IOS supports conﬁguring policing rates as a percentage 
of link bandwidth. The Bc and Be values are conﬁgured as a number of milliseconds, from which 
IOS calculates the actual Bc and Be values based on how many bits can be sent in that many 
milliseconds. Example 16-11 shows an example of a dual-rate policing conﬁguration using the 
percentage option. 
Example 16-10
Multi-Action Policing
R3# ccccoooonnnnffff    tttt
Enter configuration commands, one per line.  End with CNTL/Z.
R3(config)# ppppoooolllliiiiccccyyyy----mmmmaaaapppp    tttteeeessssttttppppoooollll1111
R3(config-pmap)# ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
! This command implements dual-rate policing as well, but it is not required
R3(config-pmap-c)# ppppoooolllliiiicccceeee    111122228888000000000000    222255556666000000000000
R3(config-pmap-c-police)# ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt
R3(config-pmap-c-police)# eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt
R3(config-pmap-c-police)# vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    sssseeeetttt----ddddssssccccpppp----ttttrrrraaaannnnssssmmmmiiiitttt    0000
R3(config-pmap-c-police)# vvvviiiioooollllaaaatttteeee----aaaaccccttttiiiioooonnnn    sssseeeetttt----ffffrrrrddddeeee----ttttrrrraaaannnnssssmmmmiiiitttt

Policing Concepts and Conﬁguration     579
Committed Access Rate
CAR implements single-rate, two-color policing. As compared with that same option in CB Policing, 
CAR and CB Policing have many similarities. They both can police trafﬁc either entering or exiting 
an interface or subinterface; they can both police subsets of that trafﬁc based on classiﬁcation logic; 
and they both set the rate in bps, with Bc and Be conﬁgured as a number of bytes.
CAR differs from CB Policing regarding four main features, as follows:
■
CAR uses the rate-limit command, which is not part of the MQC set of commands. 
■
CAR has a feature called cascaded or nested rate-limit commands, which allows multiple 
rate-limit commands on an interface to process the same packet.
■
CAR does support Be; however, even in this case, it still supports only conform and exceed 
categories, and never supports a third (violate) category. 
■
When CAR has a Be conﬁgured, the internal logic used to determine which packets conform 
and exceed differs as compared with CB Policing.
CAR puts most parameters on the rate-limit command, which is added under an interface or 
subinterface: 
rrrraaaatttteeee----lllliiiimmmmiiiitttt {iiiinnnnppppuuuutttt | oooouuuuttttppppuuuutttt} [aaaacccccccceeeessssssss----ggggrrrroooouuuupppp [rrrraaaatttteeee----lllliiiimmmmiiiitttt] acl-index] bps burst-normal
  burst-max ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn conform-action eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn exceed-action
Example 16-11
Conﬁguring Percentage-Based Policing
R3# sssshhhhoooowwww    rrrruuuunnnnnnnniiiinnnngggg----ccccoooonnnnffffiiiigggg
! Portions omitted for Brevity
    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    tttteeeesssstttt----ppppoooollll6666
        ccccllllaaaassssssss    ccccllllaaaassssssss----ddddeeeeffffaaaauuuulllltttt
      ppppoooolllliiiicccceeee    cccciiiirrrr    ppppeeeerrrrcccceeeennnntttt    22225555    bbbbcccc    555500000000    mmmmssss    ppppiiiirrrr    ppppeeeerrrrcccceeeennnntttt    55550000    bbbbeeee    555500000000    mmmmssss    ccccoooonnnnffffoooorrrrmmmm    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd    ttttrrrraaaannnnssssmmmmiiiitttt    
                    vvvviiiioooollllaaaatttteeee    ddddrrrroooopppp
!
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll0000////0000
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    222255556666
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    tttteeeesssstttt----ppppoooollll6666
! The output below shows the configured percentage for the rate and the time for
! Bc and Be, with the calculated values immediately below.
R3# sssshhhhoooowwww    ppppoooolllliiiiccccyyyy----mmmmaaaapppp    iiiinnnntttteeeerrrrffffaaaacccceeee    ssss0000////0000
! lines omitted for brevity
      police:
          cir 25 % bc 500 ms
          cir 64000 bps, bc 4000 bytes
          pir 50 % be 500 ms
          pir 128000 bps, be 8000 bytes
! lines omitted
KEY 
POINT

580     Chapter 16: Shaping and Policing
Example 16-12 shows an example CAR conﬁguration for perspective. The criteria for the CAR 
conﬁguration in Example 16-12 are as follows:
■
All trafﬁc policed at 96 kbps at ingress to the ISP-edge router.
■
Bc of 1 second’s worth of trafﬁc is allowed.
■
Be of 0.5 second’s worth of trafﬁc is allowed.
■
Trafﬁc that exceeds the contract is discarded.
■
Trafﬁc that conforms to the contract is forwarded with Precedence reset to 0.
To classify trafﬁc, CAR requires the use of either a normal ACL or a rate-limit ACL. A rate-limit ACL 
can match MPLS Experimental bits, IP Precedence, or MAC Address. For other ﬁelds, an IP ACL 
must be used. Example 16-13 shows an example in which CAR polices three different subsets of 
trafﬁc using ACLs for matching the trafﬁc, as well as limiting the overall trafﬁc rate. The criteria for 
this example are as follows (Note that CAR allows only policing rates that are multiples of 8 kbps):
■
Police all trafﬁc on the interface at 496 kbps; but before sending this trafﬁc on its way…
■
Police all web trafﬁc at 400 kbps.
■
Police all FTP trafﬁc at 160 kbps.
■
Police all VoIP trafﬁc at 200 kbps.
■
Choose Bc and Be so that Bc has 1 second’s worth of trafﬁc, and Be provides no additional 
burst capability over Bc.
Example 16-12
CAR at 96 kbps at ISP-Edge Router
! The rrrraaaatttteeee----lllliiiimmmmiiiitttt command omits the aaaacccccccceeeessssssss----ggggrrrroooouuuupppp option, meaning that it has no matching
! parameters, so all packets are considered to match the command. The rest of the
! options simply match the requirements.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll1111////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
iiiipppp    aaaaddddddddrrrreeeessssssss    111199992222....111166668888....2222....222255551111    222255555555....222255555555....222255555555....0000
! note: the rrrraaaatttteeee----lllliiiimmmmiiiitttt command wraps around to a second line.
    rrrraaaatttteeee----lllliiiimmmmiiiitttt    iiiinnnnppppuuuutttt    99996666000000000000    11112222000000000000    11118888000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    sssseeeetttt----pppprrrreeeecccc----ttttrrrraaaannnnssssmmmmiiiitttt    0000    
            eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    ddddrrrroooopppp
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100003333            
! The output below confirms the parameters, including matching all traffic.
ISP-edge# sssshhhhoooowwww    iiiinnnntttteeeerrrrffffaaaacccceeeessss    ssss    1111////0000....1111    rrrraaaatttteeee----lllliiiimmmmiiiitttt 
  Input
    matches: all traffic
      params:  96000 bps, 12000 limit, 18000 extended limit
      conformed 2290 packets, 430018 bytes; action: set-prec-transmit 0
      exceeded 230 packets, 67681 bytes; action: drop
      last packet: 0ms ago, current burst: 13428 bytes
last cleared 00:02:16 ago, conformed 25000 bps, exceeded 3000 bps

Policing Concepts and Conﬁguration     581
The CAR conﬁguration refers to IP ACLs in order to classify the trafﬁc, using three different IP 
ACLs in this case. ACL 101 matches all web trafﬁc; ACL 102 matches all FTP trafﬁc; and ACL 
103 matches all VoIP trafﬁc.
Under subinterface s1/0.1, four rate-limit commands are used. The ﬁrst sets the rate for all trafﬁc, 
dropping trafﬁc that exceeds 496 kbps. However, the conform action is “continue.” This means 
that packets conforming to this statement will be compared to the next rate-limit statements, and 
when matching a statement, some other action will be taken. For instance, web trafﬁc matches the 
second rate-limit command, with a resulting action of either transmit or drop. VoIP trafﬁc would 
be compared with the next three rate-limit commands before matching the last one. As a result, 
all trafﬁc is limited to 496 kbps, and three particular subsets of trafﬁc are prevented from taking 
all the bandwidth.
CB Policing can achieve the same effect of policing subsets of trafﬁc by using nested policy maps. 
Example 16-13
Cascaded CAR rate-limit Commands, with Subclassiﬁcations
! ACL 101 matches all HTTP traffic
! ACL 102 matches all FTP traffic
! ACL 103 matches all VoIP traffic
iiiinnnntttteeeerrrrffffaaaacccceeee    ssss    0000////0000
rrrraaaatttteeee----lllliiiimmmmiiiitttt    iiiinnnnppppuuuutttt    444499996666000000000000    66662222000000000000    66662222000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ccccoooonnnnttttiiiinnnnuuuueeee    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    ddddrrrroooopppp
rrrraaaatttteeee----lllliiiimmmmiiiitttt    iiiinnnnppppuuuutttt    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100001111    444400000000000000000000    55550000000000000000    55550000000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    
ddddrrrroooopppp
rrrraaaatttteeee----lllliiiimmmmiiiitttt    iiiinnnnppppuuuutttt    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100002222    111166660000000000000000    22220000000000000000    22220000000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    
ddddrrrroooopppp
rrrraaaatttteeee----lllliiiimmmmiiiitttt    iiiinnnnppppuuuutttt    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    111100003333    222200000000000000000000    22225555000000000000    22225555000000000000    ccccoooonnnnffffoooorrrrmmmm----aaaaccccttttiiiioooonnnn    ttttrrrraaaannnnssssmmmmiiiitttt    eeeexxxxcccceeeeeeeedddd----aaaaccccttttiiiioooonnnn    
ddddrrrroooopppp

582     Chapter 16: Shaping and Policing
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this 
chapter. Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat 
information listed in the “Foundation Topics” section of the chapter. Please take the time to 
read and study the details in this section of the chapter, as well as review the items in the 
“Foundation Topics” section noted with a Key Point icon.
Table 16-9 lists commands related to CB Shaping.
Table 16-9
Class-Based Shaping Command Reference
Command
Mode and Function
shape [average | peak] mean-rate [[burst-size] 
[excess-burst-size]]
Class conﬁguration mode; enables shaping for the 
class
shape [average | peak] percent percent 
[[burst- size] [excess-burst-size]]
Enables shaping based on percentage of 
bandwidth
Shape adaptive min-rate
Enables the minimum rate for adaptive shaping 
Shape fecn-adapt
Causes reﬂection of BECN bits after receipt of an 
FECN
service-policy {input | output} 
policy- map-name
Interface or subinterface conﬁguration mode; 
enables CB Shaping on the interface
shape max-buffers number-of-buffers
Sets the maximum queue length for the default 
FIFO shaping queue
show policy-map policy-map-name
Lists conﬁguration information about all MQC-
based QoS tools
show policy-map interface-spec 
[input | output] [class class-name]
Lists statistical information about the behavior of 
all MQC-based QoS tools

Foundation Summary     583
Table 16-10 lists commands related to FRTS.
Table 16-10
FRTS Command Reference 
Command
Mode and Function
frame-relay trafﬁc-shaping
Interface subcommand; enables FRTS on the 
interface
class name
Used under the interface-dlci to point to a map class
frame-relay class name
Used under an interface or subinterface to point to a 
map class
map-class frame-relay map-class-name
Global command to name map class, with 
subcommands detailing a set of shaping parameters
service-policy output policy-map-name
Used in a map class to enable LLQ or CBWFQ
frame-relay trafﬁc-rate average [peak]
Used in a map class to deﬁne shaping rates
frame-relay bc out bits
Used in a map class to explicitly set Bc
frame-relay be out bits
Used in a map class to explicitly set Be
frame-relay cir out bps
Used in a map class to explicitly set CIR
frame-relay adaptive-shaping {becn | 
foresight}
Used in a map class to both enable adaptive shaping 
and deﬁne what causes FRTS to slow down 
frame-relay mincir out bps
Used in a map class to deﬁne how far adaptive 
shaping will lower the rate 
frame-relay tc milliseconds
Used in a map class to explicitly set Tc
frame-relay qos-autosense
Interface command telling the router to use ELMI to 
discover the CIR, Bc, and Be from the switch
show frame-relay pvc [interface interface] 
[dlci]
Shows PVC statistics, including shaping statistics
show trafﬁc-shape [interface-type interface-
number]
Shows information about FRTS conﬁguration 
per VC
show trafﬁc-shape queue [interface-number 
[dlci dlci-number]]
Shows information about the queuing tool used with 
the shaping queue
show trafﬁc-shape statistics [interface-type 
interface-number]
Shows trafﬁc-shaping statistics

584     Chapter 16: Shaping and Policing
Table 16-11 provides a command reference for CB Policing.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
Tc, Bc, Be, CIR, shaping rate, policing rate, token bucket, Bc bucket, Be bucket, 
adaptive shaping, BECN, ForeSight, ELMI, mincir, map class, marking down, 
single-rate two-color policer, single-rate three-color policer, dual-rate three-color 
Table 16-11
Class-Based Policing Command Reference
Command
Mode and Function
police bps burst-normal burst-max conform-action 
action exceed-action action [violate-action action]
policy-map class subcommand; enables 
policing for the class
police cir percent percent [bc conform-burst-in-msec] 
[pir percent percent] [be peak-burst-in-msec] 
[conform-action action [exceed-action action 
[violate-action action]]]
policy-map class subcommand; enables 
policing using percentages of bandwidth
police {cir cir} [bc conform-burst] {pir pir} 
[be peak-burst] [conform-action action [exceed-action 
action [violate-action action]]]
policy-map class subcommand; enables 
dual-rate policing
service-policy {input | output} policy-map-name
Enables CB Policing on an interface or 
subinterface

Memory Builders     585
policer, conform, exceed, violate, trafﬁc contract, dual token bucket, PIR, nested 
policy maps, multi-action policing 
Refer to the CD-based glossary to check your answers.
Further Reading
Cisco QoS Exam Certiﬁcation Guide, by Wendell Odom and Michael Cavanaugh


Part V: WAN
Chapter 17
Synchronous Serial Links and Protocols
Chapter 18
Frame Relay

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■WAN
— Physical Layer
— Leased Line Protocols

C H A P T E R 17
Synchronous Serial Links
and Protocols
This chapter covers the Layer 1 and 2 standards and protocols related to point-to-point serial 
links. The chapter begins with coverage of T1/E1 technology, followed by detailed coverage of 
the link layer Point-to-Point Protocol (PPP).
“Do I Know This Already?” Quiz
Table 17-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following is true regarding T1 links in North America?
a. They typically use either Superframe or B8ZS framing.
b. They support 23 DS0 channels plus 72 kbps of framing and OAM overhead.
c. The bits used for OAM are gathered from bits stolen from inside each DS0 channel.
d. Both popular encoding standards use Bipolar Violations to ensure enough signal tran-
sitions to maintain synchronization.
e. None of the answers is correct.
Table 17-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Synchronous Serial Links
1–3
Point-to-Point Protocol 
4–7
Total Score

590     Chapter 17: Synchronous Serial Links and Protocols
2.
Which of the follow pin leads are raised or lowered by an external CSU/DSU that is connected 
to a router?
a. DCD
b. CTS
c. RTS
d. DSR
e. DTR
3.
Which of the following are true about Bipolar Violations?
a. BPVs occur when AMI encoding sends more than 60 percent binary 1s over a time 
period.
b. With AMI, BPVs always indicate at least one miscoded bit, implying that the frame will 
be received in error.
c. B8ZS uses BPVs to correctly transmit some of the 0s in a string of eight consecutive 0s.
d. BPVs cannot occur when the encoded binary is 1111 . . ., but cannot occur when the 
binary is 101010. . . .
4.
Imagine that a PPP link failed and has just recovered. Which of the following features is 
negotiated last?
a. CHAP authentication
b. RTP header compression
c. Looped link detection
d. Link Quality Monitoring 
5.
Interfaces s0/0, s0/1, and s1/0 are up and working as part of a multilink PPP bundle that 
connects to another router. The multilink interface has a bandwidth setting of 1536. When a 
1500-byte packet is routed out the multilink interface, which of the following determines out 
which link the packet will ﬂow?
a. The current CEF FIB and CEF load-balancing method.
b. The current fast-switching cache.
c. The packet is sent out one interface based on round-robin scheduling.
d. One fragment is sent over each of the three links.

“Do I Know This Already?” Quiz     591
6.
R1 and R2 connect over a leased line, with each interface using its s0/1 interface. When 
conﬁguring CHAP to use a locally deﬁned name and password, which of the following 
statements is false about the commands and conﬁguration mode in which they are conﬁgured?
a. The encapsulation ppp interface subcommand
b. The ppp authentication chap interface subcommand
c. The username R1 password samepassword global command on R1
d. The username R2 password samepassword interface subcommand on R2
7.
Which of the following types of payload compression is supported on HDLC links?
a. Lempel-Ziv Stacker
b. MPPC
c. Predictor
d. FRF.9

592     Chapter 17: Synchronous Serial Links and Protocols
Foundation Topics
Synchronous Serial Links
The original digital circuits created by telcos send a synchronized serial digital signal over copper 
media, using a twisted pair for each direction of transmission. These original circuits used a 64-kbps 
basic unit of transmission called Digital Signal Level 0 (DS0). The telcos chose the DS0 speed to 
support the pulse code modulation (PCM) voice codec developed by AT&T, which used 8000 voice 
samples per second, with 1 byte encoded per sample, to digitize a single voice call.
The original digital WAN switches also used time-division multiplexing (TDM) to combine 
multiple DS0s into faster links. Although they all used the DS0 as the basic unit, telcos in different 
parts of the world chose different methods of combining DS0s into faster links using TDM. The 
most popular standards were the T1 carrier (originated in North America), J1 carrier (originated 
in Japan), and E1 (originated in Europe). 
T1 Framing and Encoding
The CSU/DSUs on each end of a T1 link apply framing logic to the serial data stream in each 
direction on the link. The framing process allows a device to identify the individual DS0 channels, 
as well as overhead bits. The overhead bits are used for synchronization and framing, management, 
and a CRC error check. T1s use either the older Superframe (SF, also known as D4) framing 
standard or the Extended Superframe (ESF) frame format. E1 lines use either the ITU G.704 or 
G.706 standard.
Using a T1 line, the telco could install a T1 circuit to the customer facility, and then via conﬁgu-
ration decide how much bandwidth to provide to the customer as a multiple of the 64-kbps DS0 
channel. With a physical T1 installed, the CSU/DSU on each end could ﬁnd the individual DS0 
channels. If conﬁgured to use only speciﬁc DS0 channels, the link would be a fractional or sub-
rate T1. Alternatively, if the full T1 bandwidth is needed, the CSU/DSU can ignore the DS0 
channel boundaries, treating all non-overhead bits as a single serial data stream. 
The devices attached to the T1 line must conform to the same framing standard and the same 
line-coding standard. The line coding deﬁnes the electrical characteristics that imply a 0 or 1 on 
the link. Figure 17-1 shows a comparison of the two popular encoding standards used with T1s, 
namely Bipolar 8 Zero Substitution (B8ZS) and Alternate Mark Inversion (AMI). AMI and B8ZS 
use similar rules for encoding 1s and 0s. Both standards use a 3-millivolt (3mV) signal to encode 
a binary 1, with each binary 1 alternating the polarity (current) to avoid inducing a DC component. 
For binary 0, no voltage is used. 

Synchronous Serial Links     593
Figure 17-1
Comparing AMI and B8ZS 
B8ZS differs from AMI when eight consecutive 0s occur in the data stream. Long sequences of 
0s, meaning 0 V on the line for the duration of the consecutive 0s, result in no signal transitions. 
Signal transitions are needed to maintain proper clock synchronization. To create signal transitions, 
B8ZS sends an alternative sequence as shown in Figure 17-1, using Bipolar Violations (BPVs), 
to represent eight consecutive 0s. (BPVs exist when a 3-mV signal has the same polarity as the 
previous 3-mV signal; Figure 17-1 points out two BPVs.) Instead of 8-bit times with no signal, 
B8ZS sends what looks like three 0s, one BPV, a valid 1, a 0, another BPV, and then another 
valid 1. However, the receiver then converts this sequence as a string of eight 0s, because it knows 
that this sequence has occurred because of the B8ZS line code rules. 
Because B8ZS uses BPVs to correctly encode bits, not all BPVs result in an actual bit error. 
However, AMI does not use the BPVs to encode eight consecutive 0s, so BPVs would always 
indicate some incorrect line encoding—that is, a bit error.
Table 17-2 summarizes the key features of DS1 standards. 
Table 17-2
T1 and E1 Compared 
KEY 
POINT
Feature
T1
E1
DS1 line rate
1.544 Mbps
2.048 Mbps
Subscriber DS0 channels 
24
30
Overhead
8 kbps
128 kbps (1 DS0 overhead, 1 DS0 reserved 
for signaling)
Framing options
SF or ESF
ITU G.704 and G.706
continues
+3mv
–3mv
1
1
1
0
0
0
0
0
0
0
0
0
AMI
0v
+3mv
–3mv
1Intentional Bipolar Violation (4th bit time of the 8 binary 0s)
2Normal valid signal for binary 1 (5th bit)
3Intentional Bipolar Violation (7th bit time of the 8 binary 0s)
4Normal valid signal for binary 1 (8th bit)
1
1
1
0
0
0
01
8 consecutive 0’s
02
0
03 04
0
B8ZS
0v
KEY 
POINT

594     Chapter 17: Synchronous Serial Links and Protocols
T1 Alarms 
Like the other DS levels in the TDM hierarchy, T1 and E1 deﬁne some overhead bits for the 
purpose of Operation, Administration, and Maintenance (OAM). For example, ESF framing 
devotes 4 kbps of the 8 kbps of T1 overhead to OAM. The telco gear and the CSU/DSU use 
the bits in the OAM data link to communicate status about the leased circuit—for instance, 
when an error condition occurs, the CSU/DSU or T1 mux sets bits inside the 4-kbps OAM 
data link to deﬁne the type of error. Table 17-3 lists some of the more common errors signaled 
for T1 circuits. (Refer to RFC 3895 for a more complete reference.)
Carrier Detect and Interface Resets
A router has visibility into T1 framing, along with the alarm conditions, but only if the serial card 
has a built-in CSU/DSU. However, with an external CSU/DSU, the router has no insight into the 
framing or encoding on the circuit. Instead, the router can sense the voltages on the various pins on 
the serial cable. Table 17-4 lists and describes the purpose of the ﬁve most important signaling pins 
in serial cables. (Note that in this model, the term data communications equipment [DCE] refers to 
the local CSU/DSU, and data terminal equipment [DTE] refers to the router’s serial interface.)
Feature
T1
E1
Encoding options
B8ZS or AMI
High Density Binary 3 (HDB3)
DS3 comments
T3; 44.736 Mbps; muxes 
28 T1s
E3; 34.368 Mbps; muxes 16 E1s
Table 17-3
Popular T1 Alarms
Alarm
Meaning
Out of Frame (OOF)/Loss 
of Frame (LOF)
The receiver can no longer consistently identify the frame boundaries.
Loss of Signal (LOS)
Absence of any received pulses of either polarity for a deﬁned time period.
Alarm Indication Signal 
(AIS)
Practice of sending all binary 1s on the line in reaction to framing problems, 
to provide signal transitions and allow recovery of synchronization and 
framing.
Red Alarm
An alarm state that occurs on a device on one end of the link when that 
device has detected a LOF/LOS/AIS condition. The device in Red alarm 
state then sends a Yellow alarm signal to the other end of the link. 
Yellow Alarm
An alarm state that occurs when the device on the other end of the link has 
experienced a red alarm. The device in a Yellow alarm state has received 
a Yellow alarm signal from the far end of the link.
Table 17-2
T1 and E1 Compared (Continued)
KEY 
POINT

Point-to-Point Protocol     595
The show interfaces command lists the pin lead settings, along with some related statistics. Of 
particular note, this command lists counters labeled interface resets and carrier transitions. The 
router resets an interface for many reasons, including such varied reasons as loss of the DCD 
signal, severe interface congestion, and simply to re-drive data-link establishment. 
The carrier transitions counter increments each time the DCD lead changes from one state to the 
other. The CSU/DSU changes DCD based on the health of the circuit—for instance, lowering 
DCD when LOS/LOF occurs, and raising DCD when the CSU/DSU recovers the signal and 
framing. As a result, the carrier transitions counter increments by two each time the link completes 
a cycle of failing and then recovering. Example 17-1 shows show interfaces output on a router 
(R3) when the router on the other end of the link was looped back, causing frequent state changes 
for the DCD pin, which in turn creates multiple interface resets.
Point-to-Point Protocol
The two most popular Layer 2 protocols used on point-to-point links are High-Level Data Link 
Control (HDLC) and Point-to-Point Protocol (PPP). The ISO standard for the much older HDLC 
does not include a Type ﬁeld, so the Cisco HDLC implementation adds a Cisco-proprietary 2-byte 
Type ﬁeld to support multiple protocols over an HDLC link. PPP includes an architected Protocol 
ﬁeld, plus a long list of rich features. Table 17-5 points out some of the key comparison points of 
these two protocols.
Table 17-4
Common Serial Cable Control Pin Leads
Pin
Purpose
Data Carrier Detect (DCD)
Set by the DCE to imply a working link
Data Set Ready (DSR)
Set by the DCE to imply that the DCE is ready to signal using pin leads
Data Terminal Ready (DTR)
Set by the DTE to imply that the DTE is ready to signal using pin leads
Ready To Send (RTS)
Set by the DTE to tell the DCE that the DTE wants to send data 
Clear To Send (CTS)
Set by the DCE to tell the DTE that the DTE is allowed to send data
Example 17-1
show interfaces Command Output
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
R3# sssshhhh    iiiinnnntttt    ssss    0000////1111////0000
! lines omitted for brevity
     0 input errors, 0 CRC, 0 frame, 0 overrun, 0 ignored, 0 abort
     1219 packets output, 17960 bytes, 0 underruns
     0 output errors, 0 collisions, 161 interface resets
     0 output buffer failures, 0 output buffers swapped out
     324 carrier transitions
     DCD=up  DSR=up  DTR=up  RTS=up  CTS=up

596     Chapter 17: Synchronous Serial Links and Protocols
PPP framing (RFC 1662) deﬁnes the use of a simple HDLC header and trailer for most parts 
of the PPP framing, as shown in Figure 17-2. PPP simply adds the Protocol ﬁeld and optional 
Padding ﬁeld to the original HDLC framing. (The Padding ﬁeld allows PPP to ensure that the 
frame has an even number of bytes.)
Figure 17-2
HDLC and PPP Framing Compared 
PPP Link Control Protocol
PPP standards can be separated into two broad categories—those features unrelated to any speciﬁc 
Layer 3 protocol, and those speciﬁc to a Layer 3 protocol. The PPP Link Control Protocol (LCP) 
controls the features independent of any speciﬁc Layer 3 protocol. For each Layer 3 protocol 
supported by PPP, PPP deﬁnes a Network Control Protocol (NCP). For instance, the PPP IPCP 
protocol deﬁnes PPP features for IP, such as dynamic address assignment.
When a PPP serial link ﬁrst comes up—for example, when a router senses the CTS, DSR, and 
DCD leads come up at the physical layer—LCP begins parameter negotiation with the other end 
of the link. For example, LCP controls the negotiation of which authentication methods to attempt, 
and in what order, and then allows the authentication protocol (for example, CHAP) to complete 
its work. Once all LCP negotiation has completed successfully, LCP is considered to be “up.” 
At that point, PPP begins each Layer 3 Control Protocol. 
Table 17-5
HDLC and PPP Comparisons
KEY 
POINT
Feature
HDLC
PPP
Error detection?
Yes
Yes
Error recovery?
No
Yes1
Standard Protocol Type ﬁeld?
No
Yes
Default on IOS serial links?
Yes
No
Supports synchronous and asynchronous links?
No
Yes
1Cisco IOS defaults to not use the reliable PPP feature, which allows PPP to perform error recovery.
Flag
HDLC
PPP
1
1
1–2
2
Variable
4
1
1
1
1–2
1
Variable
2 or 4
1
Address
Control
Type
(Proprietary)
Data
Flag
FCS
Flag
7E
Address
FF
Control
03
Protocol
(Standardized)
Data and
Padding
Flag
7E
FCS
KEY 
POINT

Point-to-Point Protocol     597
Table 17-6 lists and brieﬂy describes some of the key features of LCP. Following that, several of 
the key LCP features are covered in more detail. 
Basic LCP/PPP Conﬁguration
PPP can be conﬁgured with a minimal number of commands, requiring only an encapsulation 
ppp command on each router on opposite ends of the link. Example 17-2 shows a simple conﬁguration 
with basic PPP encapsulation, plus the optional LQM and CHAP authentication features. For this 
conﬁguration, routers R3 and R4 connect to each other’s s0/1/0 interfaces.
Table 17-6
PPP LCP Features
KEY 
POINT
Function
Description
Link Quality Monitoring 
(LQM)
LCP exchanges statistics about the percentage of frames received without any 
errors; if the percentage falls below a conﬁgured value, the link is dropped.
Looped link detection
Each router generates and sends a randomly chosen magic number. If a router 
receives its own magic number, the link is looped, and may be taken down. 
Layer 2 load balancing
Multilink PPP (MLP) balances trafﬁc by fragmenting each frame into one 
fragment per link, and sending one fragment over each link.
Authentication
Supports CHAP and PAP.
Example 17-2
PPP Conﬁguration with LQM and CHAP 
! R3 configuration is first. The username/password could be held in a AAA 
! server, but is shown here as a local username/password. The other router (R4) 
! sends its name “R4” with R3 being configured with that username and password setting.
uuuusssseeeerrrrnnnnaaaammmmeeee    RRRR4444    ppppaaaasssssssswwwwoooorrrrdddd    0000    rrrroooommmm888833338888
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! The LQM percentage is set with the pppppppppppp    qqqquuuuaaaalllliiiittttyyyy command. CHAP simply needs to be
! enabled, with this router reacting to the other router’s host name as stated in 
! the CHAP messages.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....33334444....3333    222255555555....222255555555....222255555555....0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    qqqquuuuaaaalllliiiittttyyyy    88880000
    pppppppppppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    cccchhhhaaaapppp
! R4 configuration is next. The configuration is mostly a mirror image of R3.
uuuusssseeeerrrrnnnnaaaammmmeeee    RRRR3333    ppppaaaasssssssswwwwoooorrrrdddd    0000    rrrroooommmm888833338888
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111////0000
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....33334444....4444    222255555555....222255555555....222255555555....0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    qqqquuuuaaaalllliiiittttyyyy    77770000
    pppppppppppp    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    cccchhhhaaaapppp
continues

598     Chapter 17: Synchronous Serial Links and Protocols
Multilink PPP
Multilink PPP, abbreviated as MLP, MP, or MLPPP, deﬁnes a method to combine multiple parallel 
serial links at Layer 2. The original motivation for MLP was to combine multiple ISDN B-channels 
without requiring any Layer 3 load balancing; however, MLP can be used to load balance trafﬁc 
across any type of point-to-point serial link. 
MLP balances trafﬁc by fragmenting each packet based on the number of parallel links and then 
sending one fragment over each link. For each packet, with three parallel links, MLP fragments 
! Next, on R3, the sssshhhhoooowwww command lists the phrase “LCP Open,” implying that LCP has
! completed negotiations. On the next line, two NCPs (CDPCP and IPCP) are listed.
R3#    sssshhhhoooowwww    iiiinnnntttt    ssss    0000////1111////0000
Serial0/1/0 is up, line protocol is up 
  Hardware is GT96K Serial
  Internet address is 10.1.34.3/24
  MTU 1500 bytes, BW 1544 Kbit, DLY 20000 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation PPP, LCP Open
  Open: CDPCP, IPCP, loopback not set
  Keepalive set (10 sec)
! (The following ddddeeeebbbbuuuugggg output has been shortened in several places.) The link was
! sssshhhhuuuutttt/nnnnoooo    sssshhhhuuuutttt after issuing the ddddeeeebbbbuuuugggg    pppppppppppp    nnnneeeeggggoooottttiiiiaaaattttiiiioooonnnn command. The first messages
! state a configuration request, listing CHAP for authentication, that LQM should
! be used, and with the (default) setting of using magic numbers to detect loops.
*Apr 11 14:48:14.795: Se0/1/0 PPP: Phase is ESTABLISHING, Active Open
*Apr 11 14:48:14.795: Se0/1/0 LCP: O CONFREQ [Closed] id 186 len 23
*Apr 11 14:48:14.795: Se0/1/0 LCP:    AuthProto CHAP (0x0305C22305)
*Apr 11 14:48:14.795: Se0/1/0 LCP:    QualityType 0xC025 period 1000 (0x0408C025000003E8)
*Apr 11 14:48:14.795: Se0/1/0 LCP:    MagicNumber 0x13403093 (0x050613403093)
*Apr 11 14:48:14.807: Se0/1/0 LCP: State is Open
! LCP completes, with authentication occurring next. In succession below, the
! challenge is issued in both directions (“O” means “output,” “I” means “Input”).
! Following that, the response is made, with the hashed value. Finally, the 
! confirmation is sent (“success”). Note that by default the process occurs in 
! both directions.
*Apr 11 14:48:14.807: Se0/1/0 PPP: Phase is AUTHENTICATING, by both
*Apr 11 14:48:14.807: Se0/1/0 CHAP: O CHALLENGE id 85 len 23 from "R3"
*Apr 11 14:48:14.811: Se0/1/0 CHAP: I CHALLENGE id 41 len 23 from "R4"
*Apr 11 14:48:14.811: Se0/1/0 CHAP: Using hostname from unknown source
*Apr 11 14:48:14.811: Se0/1/0 CHAP: Using password from AAA
*Apr 11 14:48:14.811: Se0/1/0 CHAP: O RESPONSE id 41 len 23 from "R3"
*Apr 11 14:48:14.815: Se0/1/0 CHAP: I RESPONSE id 85 len 23 from "R4"
*Apr 11 14:48:14.819: Se0/1/0 CHAP: O SUCCESS id 85 len 4
*Apr 11 14:48:14.823: Se0/1/0 CHAP: I SUCCESS id 41 len 4
*Apr 11 14:48:14.823: Se0/1/0 PPP: Phase is UP
Example 17-2
PPP Conﬁguration with LQM and CHAP (Continued)

Point-to-Point Protocol     599
each packet into three fragments. To allow reassembly on the receiving end, MLP adds a header 
(either 4 or 2 bytes) to each fragment. The header includes a Sequence Number ﬁeld as well as 
Flag bits designating the beginning and ending fragments.
MLP can be conﬁgured using either multilink interfaces or virtual templates. Example 17-3 shows 
an MLP multilink interface with two underlying serial interfaces. Following the conﬁguration, the 
example shows some interface statistics that result from a ping from one router (R4) to the other 
router (R3) across the MLP connection.
Example 17-3
MLP Conﬁguration and Statistics with Multilink Interfaces-R3 
! All Layer 3 parameters are configured on the multilink interface. The 
! serial links are associated with the multilink interface using the pppppppppppp    
!!!!    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ggggrrrroooouuuupppp commands.
iiiinnnntttteeeerrrrffffaaaacccceeee    MMMMuuuullllttttiiiilllliiiinnnnkkkk1111
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....33334444....3333    222255555555....222255555555....222255555555....0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ggggrrrroooouuuupppp    1111
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111////0000
    nnnnoooo    iiiipppp    aaaaddddddddrrrreeeessssssss
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ggggrrrroooouuuupppp    1111
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////1111////1111
    nnnnoooo    iiiipppp    aaaaddddddddrrrreeeessssssss
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ggggrrrroooouuuupppp    1111 
! Below, the interface statistics reflect that each of the two serial links sends
! the same number of packets, one fragment of each original packet. Note that the
! multilink interface shows roughly the same number of packets, but the bit rate
! matches the sum of the bit rates on the two serial interfaces. These stats 
! reflect the fact that the multilink interface shows prefragmentation 
! counters, and the serial links show post-fragmentation counters. 
R3# sssshhhh    iiiinnnntttt    ssss    0000////1111////0000
Serial0/1/0 is up, line protocol is up
! lines omitted for brevity
  5 minute input rate 182000 bits/sec, 38 packets/sec
  5 minute output rate 182000 bits/sec, 38 packets/sec
     8979 packets input, 6804152 bytes, 0 no buffer
     8977 packets output, 6803230 bytes, 0 underruns
R3# sssshhhh    iiiinnnntttt    ssss    0000////1111////1111
Serial0/1/1 is up, line protocol is up
! lines omitted for brevity
  5 minute input rate 183000 bits/sec, 38 packets/sec
  5 minute output rate 183000 bits/sec, 38 packets/sec
continues
KEY 
POINT

600     Chapter 17: Synchronous Serial Links and Protocols
MLP Link Fragmentation and Interleaving
The term Link Fragmentation and Interleaving (LFI) refers to a type of Cisco IOS QoS tool that 
prevents small, delay-sensitive packets from having to wait on longer, delay-insensitive packets to 
be completely serialized out an interface. To do so, LFI tools fragment larger packets, and then 
send the delay-sensitive packet after just a portion of the original, longer packet. The key elements 
include fragmentation, the ability to interleave parts of one packet between fragments of another 
packet, and a queuing scheduler that interleaves the packets. Figure 17-3 depicts the complete 
process. A 1500-byte packet is fragmented and a 60-byte packet is interleaved between the 
fragments by the queuing scheduler after the ﬁrst two fragments.
Figure 17-3
MLP LFI Concept 
MLP supports LFI, the key elements of which are detailed in the following list: 
■
The ppp multilink interleave interface subcommand tells the router to allow interleaving.
     9214 packets input, 7000706 bytes, 0 no buffer
     9213 packets output, 7000541 bytes, 0 underruns
R3# sssshhhh    iiiinnnntttt    mmmmuuuullllttttiiiilllliiiinnnnkkkk1111
Multilink1 is up, line protocol is up
! lines omitted for brevity
  Hardware is multilink group interface
  Internet address is 10.1.34.3/24
  MTU 1500 bytes, BW 3088 Kbit, DLY 100000 usec,
     reliability 255/255, txload 31/255, rxload 30/255
  Encapsulation PPP, LCP Open, multilink Open
  Open: CDPCP, IPCP, loopback not set
  5 minute input rate 374000 bits/sec, 40 packets/sec
  5 minute output rate 377000 bits/sec, 40 packets/sec
     9385 packets input, 14112662 bytes, 0 no buffer
     9384 packets output, 14243723 bytes, 0 underruns
Example 17-3
MLP Conﬁguration and Statistics with Multilink Interfaces-R3 (Continued)
1500 Byte
Packet Arrives,
Followed by One 
60 Byte Packet
R1 – Serial Interface 0
TX Queue, Length 2 
Frag1
Frag 2
Actual Behavior with TX Queue 
Fragment
if > 300
Classify into
Queues
Schedule
Queue 2
Frag 3
Frag 4
Frag 5
Small
Packet
Queue 1
KEY 
POINT

Point-to-Point Protocol     601
■
The ppp multilink fragment-delay x command deﬁnes the fragment size, based on the 
following formula: 
             size = x * bandwidth.
■
MLP LFI can be used with only one link or with multiple links. 
■
The queuing scheduler on the multilink interface determines the next packet to send; as a 
result, many implementations use LLQ to always interleave delay-sensitive trafﬁc between 
fragments. 
Example 17-4 shows an updated version of the conﬁguration in Example 17-3, with LFI enabled.
PPP Compression
PPP can negotiate to use Layer 2 payload compression, TCP header compression, and/or RTP 
header compression. Each type of compression has pros and cons, with the most obvious relating 
to what is compressed, as shown in Figure 17-4.
Figure 17-4
Fields Compressed with Compression Features 
Example 17-4
MLP LFI with LLQ to Interleave Voice
! The fragment delay is set to 10 ms, so the fragments will be of size (256,000 *
! .01 second) = 2560 bits = 320 bytes. The pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    iiiinnnntttteeeerrrrlllleeeeaaaavvvveeee command allows
! the queuing tool to interleave packets between fragments of other packets, and 
! the referenced policy map happens to use LLQ to interleave voice packets.
iiiinnnntttteeeerrrrffffaaaacccceeee    MMMMuuuullllttttiiiilllliiiinnnnkkkk1111
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    222255556666
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....33334444....3333    222255555555....222255555555....222255555555....0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    pppppppppppp
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ggggrrrroooouuuupppp    1111
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    ffffrrrraaaaggggmmmmeeeennnntttt----ddddeeeellllaaaayyyy    11110000
    pppppppppppp    mmmmuuuullllttttiiiilllliiiinnnnkkkk    iiiinnnntttteeeerrrrlllleeeeaaaavvvveeee
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    qqqquuuueeeeuuuueeee----oooonnnn----ddddssssccccpppp
PPP IP TCP
Data
DL
PPP IP UDP
Data
DL
RTP
Payload Compression
RTP Header Compression
TCP Header Compression
KEY 
POINT

602     Chapter 17: Synchronous Serial Links and Protocols
Comparing payload compression and header compression, payload compression works best with 
longer packet lengths, and header compression with shorter packet lengths. Header compression 
takes advantage of the predictability of headers, achieving a compression ratio for the header ﬁelds 
around 10:1 to 20:1. However, when the data inside the packet is much larger than the header, 
saving some bytes with header compression may be only a small reduction in the overall 
bandwidth required, making payload compression more appealing.
PPP Layer 2 Payload Compression
Cisco IOS software supplies three different payload compression options for PPP, namely 
Lempel-Ziv Stacker (LZS), Microsoft Point-to-Point Compression (MPPC), and Predictor. 
Stacker and MPPC both use the same underlying Lempel-Ziv (LZ) compression algorithm, with 
Predictor using an algorithm called Predictor. LZ uses more CPU and less memory in comparison 
to Predictor, and it typically results in a better compression ratio.
Table 17-7 summarizes some of the key points regarding payload compression. Note that of the 
three options, only LZS is supported on Frame Relay and HDLC links. Also note that for payload 
compression when using ATM-to-Frame Relay Service Interworking, MLP must be used; as a 
result, all payload compression types supported by PPP are also supported for Interworking.
Conﬁguring payload compression simply requires a matching compress command under each 
interface on each end of the link(s), with matching parameters for the type of compression. Once 
compression is conﬁgured, PPP starts the Compression Control Protocol (CCP), which is another 
NCP, to perform the compression negotiations and manage the compression process.
Header Compression
PPP supports two styles of IP header compression: TCP header compression and RTP header 
compression. (Figure 17-4 shows the headers compressed by each.) 
Table 17-7
Point-to-Point Payload Compression Tools: Feature Comparison
KEY 
POINT
Feature
Stacker
MPPC
Predictor
Uses LZ algorithm? 
Yes
Yes
No
Uses Predictor algorithm?
No
No
Yes
Supported on HDLC?
Yes
No
No
Supported on PPP?
Yes
Yes
Yes
Supported on Frame Relay?
Yes
No
No
Supports ATM and ATM-to-Frame Relay Service 
Interworking (using MLP)?
Yes
Yes
Yes

Point-to-Point Protocol     603
Voice and video ﬂows use the RTP encapsulation shown in Figure 17-4. Voice ﬂows, particularly 
for low-bitrate codecs, have very small data ﬁelds—for instance, with G.729, the packet is typically 
60 bytes, with 40 bytes of the 60 bytes being the IP/UDP/RTP headers. RTP header compression 
compresses the IP/UDP/RTP headers (40 bytes) into 2 or 4 bytes. With G.729 in use, RTP header 
compression reduces the required bandwidth by more than 50 percent.
TCP header compression compresses the combined IP and TCP headers, a combined 40 bytes, 
into 3 or 5 bytes. For TCP packets with small payloads, the saving can be signiﬁcant; the math is 
similar to the RTP compression example in the previous paragraph. However, TCP header 
compression might not be worth the CPU and memory expense for larger packets—for instance, 
for a 1500-byte packet, compressing the 40 bytes of header into 3 bytes reduces the packet size by 
only about 2 percent.
Header compression can be conﬁgured using a pair of legacy commands, or it can be conﬁgured 
using MQC commands. The legacy commands are ip tcp header-compression [passive] and 
ip rtp header-compression [passive], used under the serial (PPP) or multilink (MLP) interfaces 
on each end of the link. PPP reacts to this command by using IPCP to negotiate to enable each 
type of compression. (If you use the passive keyword, that router waits for the other router to 
initiate the IPCP negotiation.) With this style of conﬁguration, all TCP ﬂows and/or all RTP ﬂows 
using the link are compressed.
Example 17-5 shows the alternative method using an MQC policy map to create class-based 
header compression. In the example, TCP header compression is applied only to the class that 
holds Telnet trafﬁc. As a result, TCP header compression is applied to the packets that are most 
likely to beneﬁt from TCP compression, without wasting CPU and memory to compress larger 
packets. (Recall that Telnet sends one keystroke per TCP segment, unless service nagle is 
conﬁgured, making Telnet highly inefﬁcient by default.) 
Example 17-5
MQC Class-Based Header Compression
! RTP compression is enabled in the voice class, TCP header compression in the
! critical data class, and no compression in the class-default class.
ppppoooolllliiiiccccyyyy----mmmmaaaapppp    ccccbbbb----ccccoooommmmpppprrrreeeessssssssiiiioooonnnn
    ccccllllaaaassssssss    vvvvooooiiiicccceeee
        bbbbaaaannnnddddwwwwiiiiddddtttthhhh    88882222
        ccccoooommmmpppprrrreeeessssssss    hhhheeeeaaaaddddeeeerrrr    iiiipppp    rrrrttttpppp
    ccccllllaaaassssssss    ccccrrrriiiittttiiiiccccaaaallll
        bbbbaaaannnnddddwwwwiiiiddddtttthhhh    111111110000
        ccccoooommmmpppprrrreeeessssssss    hhhheeeeaaaaddddeeeerrrr    iiiipppp    ttttccccpppp
!!!!
iiiinnnntttteeeerrrrffffaaaacccceeee    MMMMuuuullllttttiiiilllliiiinnnnkkkk1111
    bbbbaaaannnnddddwwwwiiiiddddtttthhhh    222255556666
    sssseeeerrrrvvvviiiicccceeee----ppppoooolllliiiiccccyyyy    oooouuuuttttppppuuuutttt    ccccbbbb----ccccoooommmmpppprrrreeeessssssssiiiioooonnnn

604     Chapter 17: Synchronous Serial Links and Protocols
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” section of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with a Key Point icon.
Table 17-8 lists the key protocols covered in this chapter.
Table 17-9 lists the Cisco IOS commands covered in this chapter.
Table 17-8
Protocols and Standards for Chapter 17
Topic
Standard
Point-to-Point Protocol (PPP) 
RFC 1661
PPP in HDLC-like Framing
RFC 1662
PPP Internet Protocol Control Protocol IPCP
RFC 1332
IP Header Compression over PPP
RFC 3544
PPP Multilink Protocol (MLP)
RFC 1990
Managed Objects for TDM Circuits
RFC 3895
Table 17-9
Command Reference for Chapter 17 
Command
Mode and Function
linecode {ami | b8zs | hdb3}
T1/E1 controller mode; deﬁnes line coding for the line
framing {sf | esf}
framing {crc4 | no-crc4} [australia]
T1/E1 controller mode; deﬁnes framing
ppp authentication {protocol1 [protocol2...]}
[if-needed] [list-name | default] [callin]
[one-time] [optional]
Interface mode; deﬁnes the authentication protocol 
(PAP, CHAP, EAP) and other parameters
ppp multilink [bap]
Interface mode; enables MLP on an interface
ppp multilink fragment-delay delay-max
Interface mode; deﬁnes the fragment size based on 
this delay and interface bandwidth 
ppp multilink group group-number
Interface mode; associates a physical interface to a 
multilink interface

Further Reading     605
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
encoding, line coding, framing, B8ZS, AMI, HDB3, SF, D4 framing, ESF, DS0, 
DS1, DS3, TDM hierarchy, T1, E1, T3, E3, PCM, TDM, BPV, Red Alarm, Yellow 
Alarm, OOF, LOS, LOF, AIS, OAM, DCD, DSR, DTR, CTS, RTS, PPP, MLP, LCP, 
NCP, IPCP, CDPCP, MLP LFI, CHAP, PAP, LFI, Layer 2 payload compression, TCP 
header compression, RTP header compression
Further Reading
Troubleshooting Remote Access Networks, by Dr. Plamen Nedeltchev
Command
Mode and Function
ppp multilink interleave
Interface mode; allows the queuing scheduled to 
interleave packets between fragments of another packet
compress [predictor | stac | mppc [ignore-pfc]]
Interface mode; conﬁgures payload compression
ip rtp header-compression [passive]
Interface mode; enables RTP header compression
ip tcp header-compression [passive]
Interface mode; enables TCP header compression
compression header ip [rtp | tcp]
Class conﬁguration mode; enables RTP or TCP header 
compression inside an MQC class
ppp quality percentage
Interface mode; enables LQM monitoring at the stated 
percentage
debug ppp negotiation
Enables debugging that shows the various stages of 
PPP negotiation
Table 17-9
Command Reference for Chapter 17 (Continued)

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■WAN
— Frame Relay
— Physical Layer

C H A P T E R 18
Frame Relay
This chapter covers the details of Frame Relay.
“Do I Know This Already?” Quiz
Table 18-1 outlines the major sections in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
Which of the following is true about both the ANSI and ITU options for Frame Relay LMI 
settings in a Cisco router, but not for the LMI option called cisco? 
a. They use DLCI 1023 for LMI functions.
b. They use DLCI 0 for LMI functions.
c. They include support for a maximum of 1022 DLCIs on a single access link.
d. They include support for a maximum of 992 DLCIs on a single access link.
e. They can be autosensed by a Cisco router.
Table 18-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Frame Relay Concepts
1–4
Frame Relay Conﬁguration
5–7
Total Score

608     Chapter 18: Frame Relay
2.
R1 sends a Frame Relay frame over a PVC to R2. When R2 receives the frame, the frame has 
the DE and FECN bits set, but not the BECN bit. Which of the following statements accurately 
describes how R2 could have reacted to this frame, or how R1 might have impacted the 
contents of the frame?
a. R2 would lower its shaping rate on the PVC assuming R2 has conﬁgured adaptive shaping.
b. R2 could discard the received frame because of the DE setting.
c. R2 could set BECN in the next frame it sends to R1, assuming FECN reﬂection is 
conﬁgured.
d. R1 could have set the FECN bit before sending the frame if R1 had conﬁgured outbound 
policing with the policer marking FECN for out-of-contract frames.
3.
Which of the following statements are true regarding Frame Relay encapsulation?
a. Encapsulation type cisco can be conﬁgured using the encapsulation cisco interface sub-
command.
b. Encapsulation type ietf can be conﬁgured using the encapsulation frame-relay inter-
face subcommand.
c. Encapsulation type cisco can be conﬁgured using the encapsulation frame-relay cisco 
subinterface subcommand.
d. Encapsulation types must be the same on all VCs on the same physical access link.
e. Different encapsulations can be conﬁgured for each VC on the same physical interface 
using the frame-relay interface-dlci dlci encapsulation-type command.
f. Different encapsulations can be conﬁgured for each VC using the encapsulation 
frame-relay encapsulation-type subcommand under the frame-relay interface-dlci 
command.
4.
Which of the following commands disables Frame Relay LMI?
a. The no frame-relay lmi command under the physical interface.
b. The no keepalive command under the physical interface.
c. The frame-relay lmi-interval 0 command under the physical interface.
d. The keepalive 0 command under the physical interface.
e. It cannot be disabled, as it is required for a working Frame Relay access link.

“Do I Know This Already?” Quiz     609
5.
Which of the following answers are true regarding the three options for Frame Relay payload 
compression? 
a. FRF.9 and packet-by-packet use a per-packet compression dictionary.
b. Data-stream and FRF.9 compression use the LZS compression algorithm.
c. The only method of enabling data steam compression is through the frame-relay
payload-compress subinterface subcommand.
d. The data-stream compression type is Cisco proprietary.
6.
R1 has a Frame Relay access link on s0/0. The attached Frame Relay switch has ten PVCs 
conﬁgured on the link, with DLCIs 80–89. Which of the following is true regarding deﬁnition 
of DLCIs and encapsulation on the link? 
a. The frame-relay interface-dlci command associates a DLCI with the subinterface 
under which it is conﬁgured.
b. The LMI Status message from the switch can be used by the router to associate the 
DLCIs with the correct subinterface.
c. PVCs using IETF encapsulation require a frame-relay map command on the related 
subinterface.
d. The LMI Status message from the switch tells the router which encapsulation to use for 
each PVC.
e. Different encapsulation types can be mixed over this same access link.
7.
R1 has a Frame Relay access link on s0/0. The attached Frame Relay switch has ten PVCs 
conﬁgured on the link, with DLCIs 80–89. R1’s conﬁguration includes ten point-to-point 
subinterfaces, also numbered 80 through 89, but only four of those subinterfaces list a DLCI 
using the frame-relay interface-dlci command. All ten subinterfaces have IP addresses 
conﬁgured, but no other frame-relay commands are conﬁgured on the subinterfaces. Which 
of the following could be true regarding R1’s use of Frame Relay?
a. Six subinterfaces will not be able to send trafﬁc.
b. Six subinterfaces will learn their associated DLCIs as a result of received Inverse ARP 
messages.
c. Six subinterfaces will learn their associated DLCIs as a result of sent Inverse ARP 
messages.
d. Four subinterfaces need a frame-relay map command before they can successfully pass 
trafﬁc.
e. LMI will learn the missing DLCIs and assign them to the subinterface bearing the same 
value as the DLCI.

610     Chapter 18: Frame Relay
Foundation Topics
Frame Relay Concepts
Frame Relay remains the most commonly deployed WAN technology used by routers. A slow 
migration away from Frame Relay has already begun with the advent and rapid growth of IP-based 
VPNs and MPLS. However, Frame Relay will likely be a mainstay of enterprise networks for the 
fore-seeable future.
Frame Relay standards have been developed by many groups. Early on, Cisco and some other 
companies (called the gang of four) developed vendor standards to aid Frame Relay adoption and 
product development. Later, a vendor consortium called the Frame Relay Forum (FRF) formed for 
the purpose of furthering Frame Relay standards; the IETF concurrently deﬁned several RFCs 
related to using Frame Relay as a Layer 2 protocol in IP networks. (Cisco IOS documentation 
frequently refers to FR standards via FRF Implementation Agreements [IAs]—for instance, the 
FRF.12 fragmentation speciﬁcation.) Finally, ANSI and ITU built on those standards to ﬁnalize 
U.S. national and international standards for Frame Relay.
This section brieﬂy covers some of the more commonly known features of Frame Relay, as well 
as speciﬁc examples of some of the less commonly known features. This section does not attempt 
to cover all of Frame Relay’s core concepts or terms, mainly because most engineers already 
understand Frame Relay well. So, make sure to review the deﬁnitions listed at the end of this 
chapter to ﬁll in any gaps in your Frame Relay knowledge.
Frame Relay Data Link Connection Identiﬁers
To connect two DTEs, an FR service uses a virtual circuit (VC) between pairs of routers. A router 
can then send an FR frame with the appropriate (typically) 10-bit Data Link Connection Identiﬁer 
(DLCI) header ﬁeld that identiﬁes each VC. The intermediary FR switches forward the frame 
based on its DLCI, until the frame eventually exits the FR service out the access link to the router 
on the other end of the VC. 
FR DLCIs are locally signiﬁcant, meaning that a particular DLCI value only matters on a single 
link. As a result, the DLCI value for a frame may change as the frame passes through the network. 
The following ﬁve-step process shows the locally signiﬁcant DLCI values for a VC in Figure 18-1:
1.
Router A sends a frame with DLCI 41.
2.
The FR service identiﬁes the frame as part of the VC connecting Router A to Router B.
3.
The FR service replaces the frame’s DLCI ﬁeld with a value of 40.

Frame Relay Concepts     611
4.
The FR service forwards the frame to Router B.
5.
Router B sees the incoming DLCI as 40, identifying it as being from Router A.
Figure 18-1
Comparing Local and Global Frame Relay DLCIs
In practice, some providers use a convention called global addressing. The global DLCI convention 
simply allows humans to think of routers as having a single address, more akin to how MAC 
addresses are used. However, the addresses are still local, and a VC’s DLCI may well change 
values as it passes through the network. For instance, the same VC from Router A to Router B in 
Figure 18-1 could use global addressing, listing Router A’s DLCI as 40, and Router B’s as 41. 
The logic based on the global addresses works like LANs. For example, for Router A to send a 
frame to Router B, Router A would send the frame to Router B’s global address (41). Similarly, 
Router B would send frames to Router A’s global address of 40 to send packets to Router A. 
Local Management Interface
Local Management Interface (LMI) messages manage the local access link between the router and 
the Frame Relay switch. A Frame Relay DTE can send an LMI Status Enquiry message to the 
switch; the switch then replies with an LMI Status message to inform the router about the DLCIs 
of the deﬁned VCs, as well as the status of each VC. By default, the LMI messages ﬂow every 
10 seconds. Every sixth message carries a full Status message, which includes more complete 
status information about each VC.
The LMI Status Enquiry (router) and Status (switch) messages function as a keepalive as well. 
A router considers its interface to have failed if the router ceases to receive LMI messages from 
the switch for a number (default 3) of keepalive intervals (default 10 seconds). As a result, FR LMI 
is actually enabled/disabled by using the keepalive/no keepalive interface subcommands on a 
Frame Relay interface.
A
B
C
Global
DLCI 41
Global
DLCI 42
Global
DLCI 40
Frame with DLCI 41
Frame with DLCI 40
Frame with DLCI 42
Frame with DLCI 40

612     Chapter 18: Frame Relay
Three LMI types exist, mainly because various vendors and standards organizations worked 
independently to develop Frame Relay standards. The earliest-deﬁned type, called the Cisco LMI 
type, differs slightly from the later-deﬁned ANSI and ITU types, as follows:
■
The allowed DLCI values 
■
The DLCI used for sending LMI messages
Practically speaking, these issues seldom matter; by default, routers autosense the LMI type. If 
needed, the frame-relay lmi-type type interface subcommand can be used to set the LMI type on 
the access link. Table 18-2 lists the three LMI types, the type keyword values, along with some 
comparison points regarding LMI and permitted DLCIs.
Frame Relay Headers and Encapsulation
Routers create Frame Relay frames by using different consecutive headers. The ﬁrst header is the 
ITU Link Access Procedure for Frame-Mode Bearer Services (LAPF) header. The LAPF header 
includes all the ﬁelds used by Frame Relay switches to deliver frames across the FR cloud, 
including the DLCI, DE, BECN, and FECN ﬁelds. 
The Frame Relay encapsulation header follows the LAPF header, holding ﬁelds that are important 
only to the DTEs on the ends of a VC. For the encapsulation header, two options exist: 
■
The earlier-deﬁned Cisco-proprietary header
■
The IETF-deﬁned RFC 2427 (formerly RFC 1490) encapsulation header
The cisco option works well with Cisco routers on each end of the VC, with the ietf option 
being required for multivendor interoperability. Both headers include a Protocol Type ﬁeld 
to support multiple Layer 3 protocols over a VC; the most commonly used is the RFC 2427 
Network Layer Protocol ID (NLPID) ﬁeld. Figure 18-2 shows the general structure of the 
headers and trailers.
Table 18-2
Frame Relay LMI Types
KEY 
POINT
LMI Type
Source Document
Cisco IOS lmi-type 
Parameter
Allowed DLCI Range 
(Number)
LMI 
DLCI
Cisco
Proprietary
Cisco
16–1007 (992)
1023
ANSI
T1.617 Annex D
Ansi
16–991 (976)
0
ITU
Q.933 Annex A
q933a
16–991 (976)
0

Frame Relay Concepts     613
Figure 18-2
Frame Relay Encapsulation Options
Each VC uses the Cisco encapsulation header unless conﬁgured explicitly to use the IETF header. 
Three methods can be used to conﬁgure a VC to use the IETF-style header:
■
Use the encapsulation frame-relay ietf interface subcommand, which changes that 
interface’s default for each VC to IETF instead of cisco
■
Use the frame-relay interface-dlci number ietf interface subcommand, overriding the 
default for this VC
■
Use the frame-relay map dlci . . . ietf command, which also over-rides the default for this VC
For example, on an interface with ten VCs, seven of which need to use IETF encapsulation, the 
interface default could be changed to IETF using the encapsulation frame-relay ietf interface 
subcommand. Then, the frame-relay interface-dlci number cisco command could be used for 
each of the three VCs that require Cisco encapsulation.
Frame Relay Congestion: DE, BECN, and FECN
FR networks, like any other multiaccess network, create the possibility for congestion caused by 
speed mismatches. For instance, imagine an FR network with 20 remote sites with 256-kbps links, 
and one main site with a T1 link. If all 20 remote sites were to send continuous frames to the main 
site at the same time, about 5 Mbps of data would need to exit the FR switch over the 1.5-Mbps 
T1 connected to the main router, causing the output queue on the FR switch to grow. Similarly, 
when the main site sends data to any one remote site, it sends at T1 speed, potentially causing the 
egress queue connected to the remote 256-kbps access link to back up as well. Beyond those two 
cases, which are typically called egress blocking, queues can grow inside the core of the FR 
network as well.
Frame Relay provides two methods of reacting to the inevitable congestion, as covered in the next 
two sections.
LAPF
Header
LAPF
Trailer
ITU and ANSI Conform to 
RFC Specifications. Header
Includes NLPID Field.
RFC
2427
Packet
LAPF
Header
Cisco
LAPF
Trailer
Packet
 Includes
 DLCI

614     Chapter 18: Frame Relay
Adaptive Shaping, FECN, and BECN
Chapter 16, “Shaping and Policing,” brieﬂy covers the concept of adaptive trafﬁc shaping, in 
which the shaper varies the shaping rate depending on whether the network is congested or not. 
To react to congestion that occurs somewhere inside the FR cloud, the router must receive some 
form of notice that the congestion is occurring. So, the FR LAPF header includes the Forward 
Explicit Congestion Notiﬁcation (FECN) and Backward Explicit Congestion Notiﬁcation (BECN) 
bits for signaling congestion on a particular VC.
FR switches use FECN and BECN to inform a router that a particular VC has experienced congestion. 
To do so, when a switch notices congestion caused by a VC, the switch sets the FECN bit in a 
frame that is part of that VC. The switch also tracks the VC that was congested so that it can 
look for the next frame sent over that VC, but going the opposite direction, as shown in step 4 
of Figure 18-3. The switch then marks the BECN bit in that frame. The router receiving the frame 
with BECN set knows that a frame it sent experienced congestion, so the router can reduce its 
shaping rate. Figure 18-3 shows an example of the process.
Figure 18-3
Basic Operation of FECN and BECN
FECN can be set by the FR switches, but not by any of the routers, because the routers do not need 
to signal forward congestion. For example, if R1 thought congestion was occurring left to right in 
Figure 18-3, R1 could simply slow down its shaping rate. At the other end of the link, R2 is the 
destination of the frame, so it would never notice congestion for frames going left to right. So, only 
the switches need to set FECN.
BECN can be set by switches and by a router. Figure 18-3 shows a switch setting BECN on the 
next user frame. It can also send a Q.922 test frame, removing the need to wait on trafﬁc sent over 
the VC, setting BECN in that frame. Finally, routers can be conﬁgured to watch for received 
frames with FECN set, reacting by returning a Q.922 test frame over that VC with the BECN bit 
set. This feature, sometimes called FECN reﬂection, is conﬁgured with the shape fecn-adapt (CB 
Shaping) or trafﬁc-shape fecn-adapt (FRTS) command.
Lower shaping rate due
to received BECN
No congestion
here
Congestion
occurs here, left to right
1
2
3
4
5
FECN = 0
BECN = 1
FECN = 0
BECN = 0
FECN = 0
BECN = 0
FECN = 1
BECN = 0
FECN = 0
BECN = 0
R1
R2

Frame Relay Conﬁguration     615
The Discard Eligibility Bit
When congestion occurs, queues begin to ﬁll, and in some cases, frames must be tail-dropped from 
the queues. Switches can (but are not required to) examine the FR Discard Eligibility (DE) bit 
when frames need to be discarded, and purposefully discard frames with DE set instead of frames 
without DE set.
Both routers and switches can set the DE bit. Typically, a router makes the decision about setting 
the DE bit for certain frames, because the network engineer that controls the router is much more 
likely to know (and care) about which trafﬁc is more important than other trafﬁc. Marking DE can 
be performed with CB Marking, as covered in Chapter 14, “Classiﬁcation and Marking,” using the 
MQC set fr-de command. 
Although routers typically mark DE, FR switches may also mark DE. For switches, the marking 
is typically done when the switch polices, but instead of discarding out-of-proﬁle trafﬁc, the 
switch marks DE. By doing so, downstream switches will be more likely to discard the marked 
frames that had already caused congestion.
Table 18-3 summarizes some of the key points regarding Frame Relay’s FECN, BECN, and DE bits.
Frame Relay Conﬁguration
This section completes the FR conﬁguration coverage for this book. Earlier, Chapter 7, 
“IP Forwarding (Routing),” covered issues with mapping Layer 3 addresses to FR DLCIs, 
and Chapter 10, “OSPF,” covered issues with using OSPF over FR. This section covers the 
basic conﬁguration and operational commands, along with FR payload compression and FR 
LFI options.
Frame Relay Conﬁguration Basics
Two of the most important details regarding Frame Relay conﬁguration are the association of 
DLCIs with the correct interface or subinterface, and the mapping of L3 addresses to those DLCIs. 
Interesting, both features can be conﬁgured using the same two commands—the frame-relay 
map and frame-relay interface-dlci commands. Chapter 7 already covered the details of 
mapping L3 addresses to DLCIs using InARP and static mapping. (If you have not reviewed those 
Table 18-3
Frame Relay FECN, BECN, and DE Summary
KEY 
POINT
Bit
Meaning When Set
Where Set
FECN
Congestion in the same direction as this frame
By FR switches in user frames
BECN
Congestion in the opposite direction of this frame
By FR switches or routers in user or 
Q.922 test frames
DE
This frame should be discarded before non-DE frames
By routers or switches in user frames

616     Chapter 18: Frame Relay
details since starting this chapter, it is probably a good time to do so.) This section focuses more 
on the association of DLCIs with a particular subinterface. 
Although a router can learn each DLCI on the access link via LMI Status messages, these messages 
do not imply with which subinterface each DLCI should be used. To conﬁgure Frame Relay using 
subinterfaces, the DLCIs must be associated with the subinterface. Any DLCIs learned with LMI 
that are not associated with a subinterface are assumed to be used by the physical interface. 
The more common method to make this association is to use the frame-relay interface-dlci 
subinterface subcommand. On point-to-point subinterfaces, only a single frame-relay interface-
dlci command is allowed, whereas multipoint interfaces support multiple commands. The 
alternative method is to use the frame-relay map command. This command still maps Layer 3 
addresses to DLCIs, but also implies an association of the conﬁgured DLCI with the subinterface 
under which the command is issued. And similar to frame-relay interface-dlci commands, only 
one frame-relay map command is allowed per point-to-point subinterface, per Layer 3 protocol. 
On multipoint subinterfaces, multiple commands are allowed per Layer 3 protocol.
Example 18-1 depicts a wide variety of Frame Relay conﬁguration options, using frame-relay 
interface-dlci commands, and the related show commands. Based on Figure 18-4, this example 
implements the following requirements:
■
R1 uses a multipoint subinterface to connect to R2 and R3.
■
R1 uses a point-to-point subinterface to connect to R4.
■
The VC between R1 and R4 uses IETF encapsulation.
Figure 18-4
Sample FR Network for Conﬁguration Examples
Network 10.0.0.0
2.2/24
3.3/24
23.1/30
R1/2/3 –
Subnet 10.1.123.0/24,
Multipoint Subinterfaces
R1/4
Subnet 10.1.14.0/24,
Point-to-Point Subinterfaces
4.4/24
14.4/24
14.1/24
.3
.2
.1
R2
R3
FR
IETF
Encapsulation
R1
R4
fa0/0
fa0/0
fa0/0

Frame Relay Conﬁguration     617
Example 18-1
Basic Frame Relay Conﬁguration Example 
! R1 configuration begins the example. Subint .14 shows the IETF option used on
! the ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii command. Subint .123 has two DLCIs associated
! with it, for the VCs to R2 and R3.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....11114444    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....11114444....1111    222255555555....222255555555....222255555555....0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100004444    IIIIEEEETTTTFFFF            
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....111122223333    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....111122223333....1111    222255555555....222255555555....222255555555....0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100002222
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100003333
! R2 configuration comes next. R2 assigns the DLCI for the VC to R1 and R3 to the 
! .123 subinterface. Note the routers’ subint numbers do not have to match.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....111122223333    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....111122223333....2222    222255555555....222255555555....222255555555....0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100003333
! R3 configuration follows the same conventions as does R2’s and is not shown.
! R4’s configuration follows next, with the eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiieeeettttffff command
! setting the encapsulation for all the VCs on interface s0/0/0. Also note that 
! the frequency of LMI enquiries was changed from the default (10) to 8 with the
! kkkkeeeeeeeeppppaaaalllliiiivvvveeee    8888 command.
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    IIIIEEEETTTTFFFF
    kkkkeeeeeeeeppppaaaalllliiiivvvveeee    8888
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....1111    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    iiiipppp    aaaaddddddddrrrreeeessssssss    11110000....1111....11114444....4444    222255555555....222255555555....222255555555....0000
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    iiiinnnntttteeeerrrrffffaaaacccceeee----ddddllllcccciiii    111100001111            
! The sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc command shows statistics and status per VC. The next
! command (on R1) filters the output to just include the lines with PVC status.
R1# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc    ||||    iiiinnnnccccllll    PPPPVVVVCCCC    SSSSTTTTAAAATTTTUUUUSSSS
DLCI = 100, DLCI USAGE = UNUSED, PVC STATUS = INACTIVE, INTERFACE = Serial0/0/0
DLCI = 102, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0.123
DLCI = 103, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0.123
DLCI = 104, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0.14
DLCI = 105, DLCI USAGE = UNUSED, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0
DLCI = 106, DLCI USAGE = UNUSED, PVC STATUS = INACTIVE, INTERFACE = Serial0/0/0
DLCI = 107, DLCI USAGE = UNUSED, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0
DLCI = 108, DLCI USAGE = UNUSED, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0
DLCI = 109, DLCI USAGE = UNUSED, PVC STATUS = INACTIVE, INTERFACE = Serial0/0/0
continues

618     Chapter 18: Frame Relay
DLCI = 110, DLCI USAGE = UNUSED, PVC STATUS = INACTIVE, INTERFACE = Serial0/0/0
! The next command lists stats for a single VC on R1, with DLCI 102, which is the
! VC to R2. Note the counters for FECN, BECN, and DE, as well as the in and out
! bit rates just for this VC.
R1# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppvvvvcccc    111100002222
PVC Statistics for interface Serial0/0/0 (Frame Relay DTE)
DLCI = 102, DLCI USAGE = LOCAL, PVC STATUS = ACTIVE, INTERFACE = Serial0/0/0.123
  input pkts 41            output pkts 54           in bytes 4615      
  out bytes 5491           dropped pkts 0           in pkts dropped 0         
  out pkts dropped 0       out bytes dropped 0         
  in FECN pkts 0           in BECN pkts 0           out FECN pkts 0         
  out BECN pkts 0          in DE pkts 0             out DE pkts 0         
  out bcast pkts 27        out bcast bytes 1587      
  5 minute input rate 0 bits/sec, 0 packets/sec
  5 minute output rate 0 bits/sec, 0 packets/sec
  pvc create time 00:29:37, last time pvc status changed 00:13:47
! The following output confirms that R1’s link is using the Cisco LMI standard. Full
! LMI Status messages occur about every minute, with the Last Full Status message
! listed last. Note that the router sends Status Enquiries to the switch, with the
! switch sending Status messages; those counters should increment together.
R1# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    llllmmmmiiii
LMI Statistics for interface Serial0/0/0 (Frame Relay DTE) LMI TYPE = CISCO
  Invalid Unnumbered info 0        Invalid Prot Disc 0
  Invalid dummy Call Ref 0        Invalid Msg Type 0
  Invalid Status Message 0        Invalid Lock Shift 0
  Invalid Information ID 0        Invalid Report IE Len 0
  Invalid Report Request 0        Invalid Keep IE Len 0
  Num Status Enq. Sent 183        Num Status msgs Rcvd 183
  Num Update Status Rcvd 0        Num Status Timeouts 0
  Last Full Status Req 00:00:35    Last Full Status Rcvd 00:00:35
! The sssshhhhoooowwww    iiiinnnntttteeeerrrrffffaaaacccceeee command lists several details as well, including the interval
! for LMI messages (keepalive), LMI stats, LMI DLCI (1023), and stats for the FR
! broadcast queue. The broadcast queue holds FR broadcasts that must be replicated
! and sent over this VC, for example, OSPF LSAs.
R1# sssshhhhoooowwww    iiiinnnntttt    ssss    0000////0000////0000
Serial0/0/0 is up, line protocol is up 
! lines omitted for brevity
  Encapsulation FRAME-RELAY, loopback not set
  Keepalive set (10 sec)
  LMI enq sent  185, LMI stat recvd 185, LMI upd recvd 0, DTE LMI up
  LMI enq recvd 0, LMI stat sent  0, LMI upd sent  0
  LMI DLCI 1023  LMI type is CISCO  frame relay DTE
  FR SVC disabled, LAPF state down
  Broadcast queue 0/64, broadcasts sent/dropped 274/0, interface broadcasts 228
! Lines omitted for brevity
! R3 is using ANSI LMI, which uses DLCI 0, as confirmed next.
Example 18-1
Basic Frame Relay Conﬁguration Example (Continued)

Frame Relay Conﬁguration     619
At the end of Example 18-1, note that R3 is using the ANSI LMI type. R3 could have conﬁgured 
the LMI type statically using the frame-relay lmi-type {ansi | cisco | q933a} command, under 
the physical interface. However, R3 omitted the command, causing R3 to take the default action 
of autosensing the LMI type.
Frame Relay Payload Compression
Cisco IOS software supports three options for payload compression on Frame Relay VCs: packet-
by-packet, data-stream, and Frame Relay Forum Implementation Agreement 9 (FRF.9). FRF.9 is 
the only standardized protocol of the three options. FRF.9 compression and data-stream compression 
function basically the same way; the only real difference is that FRF.9 implies compatibility with 
non-Cisco devices. 
All three FR compression options use LZS as the compression algorithm, but one key difference 
relates to their use of compression dictionaries. LZS deﬁnes dynamic dictionary entries that list a 
binary string from the compressed data, and an associated smaller string that represents it during 
transmission—thereby reducing the number of bits used to send data. The table of short binary 
codes, and their longer associated string of bytes, is called a dictionary. The packet-by-packet 
compression method also uses LZS, but the compression dictionary is built for each packet, then 
discarded—hence the name packet-by-packet. The other two methods do not clear the dictionary 
after each packet. Table 18-4 lists the three FR compression options and their most important 
distinguishing features.
FR payload compression conﬁguration is conﬁgured per VC. The conﬁguration varies depending 
on whether point-to-point subinterfaces are used. On point-to-point subinterfaces, the frame-relay 
payload-compress type subinterface command is used; otherwise, the frame-relay map command 
must be conﬁgured along with the payload-compress type option. Example 18-2 shows Frame 
R3# sssshhhh    ffffrrrraaaammmmeeee    llllmmmmiiii    |    iiiinnnncccclllluuuuddddeeee    LLLLMMMMIIII    TTTTYYYYPPPPEEEE
LMI Statistics for interface Serial0/0/0 (Frame Relay DTE) LMI TYPE = ANSI
R3# sssshhhh    iiiinnnntttt    ssss    0000////0000////0000    |    iiiinnnncccclllluuuuddddeeee    LLLLMMMMIIII    DDDDLLLLCCCCIIII
LMI DLCI 0  LMI type is ANSI Annex D  frame relay DTE
Table 18-4
FR Payload Compression Feature Comparison
Feature
Packet-by-Packet
FRF.9
Data-Stream
Uses LZS algorithm? 
Yes
Yes
Yes
Same dictionary for all packets?
No
Yes
Yes
Cisco-proprietary?
Yes
No
Yes
Example 18-1
Basic Frame Relay Conﬁguration Example (Continued)

620     Chapter 18: Frame Relay
Relay compression conﬁgured in the same network as shown in Figure 18-4 and Example 18-1. 
The VC from R1 to R3 (multipoint subinterface) uses data-stream compression, and the VC from 
R1 to R4 uses FRF.9.
Frame Relay Fragmentation
Frame Relay Forum IA 12, or FRF.12, deﬁnes a standard method of performing LFI over a Frame 
Relay PVC. Cisco IOS supports two methods for conﬁguring FRF.12. The legacy FRF.12 
conﬁguration requires FRTS to be conﬁgured, and requires a queuing tool to be applied to the 
shaped packets. (Example 16-7 in Chapter 16 shows an FRTS map-class shape-with-LLQ 
command that shapes and applies LLQ.)
Figure 18-5 shows the overall logic of how FRF.12 interleaves packets using LFI, when conﬁgured 
using legacy FRF.12 conﬁguration. IOS creates a 2-queue software queuing system on the 
physical interface. Any packets leaving the FRTS LLQ go into the “high” Dual FIFO queue, with 
the packets and fragments from other queuing going into the Dual FIFO “normal” queue. On the 
interface, IOS treats the Dual FIFO queue as a priority queue, which causes interleaving.
Example 18-2
Frame Relay Data-Stream Compression
! Below, the configuration added to R1’s Example 18-1 configuration is shown.
! R3 uses a ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp command as well, and R4 uses the same 
! ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppaaaayyyyllllooooaaaadddd----ccccoooommmmpppprrrreeeessssssss command. 
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....11114444    ppppooooiiiinnnntttt----ttttoooo----ppppooooiiiinnnntttt
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ppppaaaayyyyllllooooaaaadddd----ccccoooommmmpppprrrreeeessssssss    ffffrrrrffff9999    ssssttttaaaacccc
!
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000....111122223333    mmmmuuuullllttttiiiippppooooiiiinnnntttt
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    mmmmaaaapppp    iiiipppp    11110000....1111....111122223333....3333    111100003333    bbbbrrrrooooaaaaddddccccaaaasssstttt    ppppaaaayyyyllllooooaaaadddd----ccccoooommmmpppprrrreeeessssssss    ddddaaaattttaaaa----ssssttttrrrreeeeaaaammmm    ssssttttaaaacccc
! Next, R1 sends 5000 200-byte pings to R4 to create traffic. R4 shows the pre- and
! post-compression stats in the sssshhhhoooowwww    ccccoooommmmpppprrrreeeessssssss command.
R4# sssshhhhoooowwww    ccccoooommmmpppprrrreeeessssssss
 Serial0/0/0 - DLCI: 101
         Software compression enabled
         uncompressed bytes xmt/rcv 1021536/1021536
         compressed bytes   xmt/rcv 178090/177820
         Compressed bytes sent:    178090 bytes   12 Kbits/sec  ratio: 5.736
         Compressed bytes recv:    177820 bytes   12 Kbits/sec  ratio: 5.744
         1  min avg ratio xmt/rcv 3.506/3.301
         5  min avg ratio xmt/rcv 3.506/3.301
         10 min avg ratio xmt/rcv 3.506/3.301
         no bufs xmt 0 no bufs rcv 0
         resyncs 0
         Additional Stac Stats: 
         Transmit bytes:  Uncompressed =        0 Compressed =     142922
         Received bytes:  Compressed =     142652 Uncompressed =        0

Frame Relay Conﬁguration     621
Figure 18-5
Interface Dual FIFO Queues with FRTS Plus FRF.12
To conﬁgure legacy FRF.12, the frame-relay fragment size command is added to the FRTS map class 
on both ends of the VC. For example, in Example 16-7, the frame-relay fragment 120 command 
could be added to the shape-with-LLQ map class, with the same conﬁguration on the router on the 
other end of the VC, to enable FRF.12. Note that because fragmentation of any kind implies that an 
additional fragmentation header is used, fragmentation must be added on both ends of the link or VC.
The second method of conﬁguring FRF.12 is called Frame Relay Fragmentation at the Interface, 
and was added to Cisco IOS Software Release 12.2(13)T. This method does not require FRTS; the 
frame-relay fragment command simply sits directly on the physical interface. If no queuing tool 
is conﬁgured on the interface, the router creates Dual FIFO queuing on the interface, interleaving 
all non-fragmented packets between fragments of other packets. Optionally, conﬁguration of a 
queuing tool that has a PQ feature (for example, LLQ) can be used instead, causing packets in the 
PQ to be immediately interleaved. Example 18-3 shows a sample conﬁguration using the same 
router, R1, from the ﬁrst two examples in this chapter. In this case, FRF.12 has been enabled on 
s0/0/0, with a fragment size of 120.
NOTE
All packets can be fragmented, but Cisco rightfully suggests choosing a fragment 
size so that the packets typically placed into the LLQ PQ will not be fragmented. Only packets 
from the shaping LLQ are placed into the Dual FIFO interface high queue, and only those 
packets are interleaved.
Example 18-3
FRF.12 on the Interface—Conﬁguration 
! No FRTS configuration exists—simply the ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ffffrrrraaaaggggmmmmeeeennnntttt    111122220000    eeeennnndddd----ttttoooo----eeeennnndddd
! command. Note that LLQ is not enabled in this case, so nonfragmented packets
! will be interleaved using Dual FIFO. 
R1# sssshhhhoooowwww    rrrruuuunnnn    iiiinnnntttt    ssss    0000////0000////0000
iiiinnnntttteeeerrrrffffaaaacccceeee    SSSSeeeerrrriiiiaaaallll0000////0000////0000
    eeeennnnccccaaaappppssssuuuullllaaaattttiiiioooonnnn    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy
    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ffffrrrraaaaggggmmmmeeeennnntttt    111122220000    eeeennnndddd----ttttoooo----eeeennnndddd
! Next, fragmentation stats are listed.
continues
Class 1 – LLQ
Shaping Queues Created
by LLQ Configuration
on a Single VC
FRF.12 Dual FIFO Queues
Interleaving
Attempt to Not
Fragment
Fragment
Fragment
Shape
Class 2 – Non-
LLQ
Class 3 – Non-
LLQ
Normal
Queue, with
Fragments
High Queue
TX Ring

622     Chapter 18: Frame Relay
Table 18-5 summarizes the key points regarding both styles of FRF.12 conﬁguration. 
In addition to FRF.12, Cisco IOS supports two other methods of LFI over Frame Relay, including 
FRF.11-c. This fragmentation method works only on Voice over Frame Relay (VoFR) VCs. With 
this tool, voice frames are never fragmented, and voice frames are always interleaved, without 
requiring any particular queuing tool. Once a VoFR VC has been conﬁgured, the LFI conﬁguration 
is identical to the legacy style of FRF.12 conﬁguration.
The last type of FR LFI uses MLP over Frame Relay; it also happens to be the only option for Frame 
Relay-to-ATM Service Interworking. MLP over FR uses PPP headers instead of the Cisco or RFC 
2427 header shown in Figure 18-2, thereby enabling many PPP features supported by the PPP headers. 
MLP and LFI conﬁguration would simply need to be added to that conﬁguration to achieve LFI.
R1# sssshhhhoooowwww    ffffrrrraaaammmmeeee----rrrreeeellllaaaayyyy    ffffrrrraaaaggggmmmmeeeennnntttt    111100004444
interface                dlci frag-type  size in-frag    out-frag   dropped-frag
Se0/0/0.14               104  end-to-end 120  2759       2762       0
! The sssshhhhoooowwww    qqqquuuueeeeuuuueeeeiiiinnnngggg command (yes, IOS misspells it) lists statistics for the Dual
! FIFO queuing system added to the interface when FRF.12 is configured. 
R1# sssshhhhoooowwww    qqqquuuueeeeuuuueeeeiiiinnnngggg    iiiinnnntttt    ssss0000////0000////0000
Interface Serial0/0/0 queueing strategy: priority
Output queue utilization (queue/count)
    high/354 medium/0 normal/1422 low/0 
Table 18-5
Comparing Legacy and Interface FRF.12
KEY 
POINT
Feature
Legacy FRF.12
FRF.12 on the Interface
Requires FRTS?
Yes
No
Interleaves by feeding Dual FIFO interface high queue 
from a shaping PQ?
Yes
No
Interleaves by using either Dual FIFO or a conﬁgured 
LLQ policy-map on the physical interface.
No
Yes
Conﬁg mode for the frame-relay fragment command
map-class
Physical interface
Example 18-3
FRF.12 on the Interface—Conﬁguration (Continued)

Foundation Summary     623
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
covered in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with a Key Point icon.
Table 18-6 summarizes the key standards mentioned in the chapter.
Table 18-7 lists the Cisco IOS commands covered in this chapter.
Table 18-6
Protocols and Standards for Chapter 18
Topic
Standard
Frame Relay Encapsulation
RFC 2427
Frame Relay Compression
FRF.9
Frame Relay LFI
FRF.12, FRF.11-c
Frame Relay Service Interworking
FRF.8
Table 18-7
Command Reference for Chapter 18 
Command
Mode and Function
frame-relay payload-compression {packet-by-
packet | frf9 stac | data-stream stac}
Subinterface mode; deﬁnes the type of FR 
compression
encapsulation frame-relay [cisco | ietf]
Interface mode; enables FR, and chooses one of 
two encapsulation types
frame-relay broadcast-queue size byte-rate 
packet-rate
Interface mode; sets the FR broadcast queue size 
and rates
frame-relay fragment fragment_size [switched]
Map-class mode; enables fragmentation with 
fragments of the deﬁned size
frame-relay fragment fragment-size end-to-end
Interface mode; enables interface FR 
fragmentation, based on size
frame-relay interface-dlci dlci [ietf | cisco] [ppp 
virtual-template-name]
Subinterface mode; associates a DLCI with the 
subinterface, and sets the encapsulation
frame-relay inverse-arp [protocol] [dlci]
Interface mode; enables InARP, per Layer 3 
protocol and/or DLCI
continues

624     Chapter 18: Frame Relay
Table 18-8 lists some of the ANSI and ITU standards for Frame Relay.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
Command
Mode and Function
frame-relay lmi-type {ansi | cisco | q933a}
Interface mode; statically conﬁgures the LMI type
frame-relay map protocol protocol-address {dlci 
| vc-bundle vc-bundle-name}[broadcast] [ietf | 
cisco] [payload-compression {packet-by-packet 
| frf9 stac | data-stream stac]
Subinterface mode; maps Layer 3 protocol 
addresses of neighboring routers to DLCIs along 
with other settings associated with the PVC
keepalive time-interval
Interface mode; for FR, enables LMI messages 
every time interval
protocol protocol {protocol-address | inarp} 
[[no] broadcast]
PVC mode; maps a Layer 3 address to the PVC 
under which the command is issued
show compress
Displays compression statistics
show frame-relay fragment [interface interface 
[dlci]]
Displays fragmentation statistics
show frame-relay map
Displays mapping for physical and multipoint 
subinterfaces
Table 18-8
Frame Relay Protocol Speciﬁcations
What the Speciﬁcation Deﬁnes
ITU Document
ANSI Document
Data-link speciﬁcations, including LAPF 
header/trailer
Q.922 Annex A (Q.922-A)
T1.618
PVC management, LMI
Q.933 Annex A (Q.933-A)
T1.617 Annex D (T1.617-D)
SVC signaling
Q.933
T1.617
Multiprotocol encapsulation (originated in 
RFC 1490/2427)
Q.933 Annex E (Q.933-E)
T1.617 Annex F (T1.617-F)
Table 18-7
Command Reference for Chapter 18 (Continued)

Memory Builders     625
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
FRF, VC, PVC, SVC, DTE, DCE, LMI, access rate, access link, FRF.9, FRF.5, 
FRF.8, Service Interworking, FRF.12, FRF.11-c, VoFR, LAPF, NLPID, DE, FECN, 
BECN, Dual FIFO, LZS, DLCI
Further Reading
■
Troubleshooting Remote Access Networks, by Dr. Plamen Nedeltchev
■
ISDN and Broadband ISDN with Frame Relay and ATM, by Dr. William Stallings


Part VI: IP Multicast
Chapter 19
Introduction to IP Multicasting
Chapter 20
IP Multicast Routing

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Multicast
— IGMP/CGMP
— Addressing

C H A P T E R 19
Introduction to IP Multicasting
IP multicast concepts and protocols are an important part of the CCIE Routing and Switching 
written exam. Demand for IP multicast applications has increased dramatically over the last 
several years. Almost all major campus networks today use some form of multicasting. This 
chapter covers why multicasting is needed, the fundamentals of multicast addressing, and how 
multicast trafﬁc is distributed and controlled over a LAN.
“Do I Know This Already?” Quiz
Table 19-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
6.
Which of the following reasons for using IP multicasting are valid for one-to-many 
applications?
a. Multicast applications use connection-oriented service.
b. Multicast uses less bandwidth than unicast.
c. A multicast packet can be sent from one source to many destinations.
d. Multicast eliminates trafﬁc redundancy.
Table 19-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Why Do You Need Multicasting?
1
Multicast IP Addresses
2–4
Managing Distribution of Multicast Trafﬁc
5–8
Total Score

630     Chapter 19: Introduction to IP Multicasting
7.
Which of the following statements is true of a multicast address? 
a. Uses a Class D address that can range from 223.0.0.0 to 239.255.255.255
b. Uses a subnet mask ranging from 8 bits to 24 bits
c. Can be permanent or transient
d. Can be entered as an IP address on an interface of a router only if the router is conﬁg-
ured for multicasting
8.
Which of the following multicast addresses are reserved and not forwarded by multicast 
routers? 
a. 224.0.0.1 and 224.0.0.13
b. 224.0.0.9 and 224.0.1.39
c. 224.0.0.10 and 224.0.1.40
d. 224.0.0.5 and 224.0.0.6
9.
From the following pairs of Layer 3 multicast addresses, select a pair that will use the same 
Ethernet multicast MAC address of 0x0100.5e4d.2643.
a. 224.67.26.43 and 234.67.26.43
b. 225.77.67.38 and 235.77.67.38
c. 229.87.26.43 and 239.87.26.43 
d. 227.77.38.67 and 238.205.38.67
10.
From the following statements, select the true statement(s) regarding IGMP Query messages 
and IGMP Report messages. 
a. Hosts, switches, and routers originate IGMP Membership Report messages.
b. Hosts, switches, and routers originate IGMP Query messages.
c. Hosts originate IGMP Query messages and routers originate IGMP Membership 
messages.
d. Hosts originate IGMP Membership messages and routers originate IGMP Query 
messages.
e. Hosts and switches originate IGMP Membership messages and routers originate IGMP 
Query messages.

“Do I Know This Already?” Quiz     631
11.
Seven hosts and a router on a multicast LAN network are using IGMPv2. Hosts 5, 6, and 7 are 
members of group 226.5.6.7, and the other 4 hosts are not. Which of the following answers 
is/are true about how the router will respond when Host 7 sends an IGMPv2 Leave message 
for the group 226.5.6.7?
a. Sends an IGMPv2 General Query to multicast destination address 224.0.0.1
b. Sends an IGMPv2 Group-Speciﬁc Query to multicast destination address 224.0.0.1
c. Sends an IGMPv2 General Query to multicast destination address 226.5.6.7
d. Sends an IGMPv2 Group-Speciﬁc Query to multicast destination address 226.5.6.7.
e. First, sends an IGMPv2 Group-Speciﬁc Query to multicast destination address 
226.5.6.7, and then sends an IGMPv2 General Query to multicast destination address 
224.0.0.1
12.
Which of the following statements is/are true about IGMP? 
a. IGMPv1, IGMPv2, and IGMPv3 use a ﬁxed Maximum Response Time of 10 seconds.
b. If more than one multicast router is connected to a LAN subnet, IGMPv1 elects the 
router with the lowest IP address as a querier, while IGMPv2 elects the router with the 
highest IP address as a querier.
c. IGMPV2 is backward compatible with IGMPv1 but IGMPv3 is not backward compati-
ble with IGMPv2 and IGMPv1.
d. Leave messages are available only in IGMPv2; IGMPv1 and IGMPv3 cannot use Leave 
messages.
e. All of these answers are correct.
f. None of these answers is correct.
13.
Which of the following statements is/are true regarding CGMP and IGMP snooping?
a. CGMP and IGMP snooping are used to constrain the ﬂooding of multicast trafﬁc in 
LAN switches.
b. CGMP is a Cisco-proprietary protocol and uses the well-known Layer 2 multicast MAC 
address 0x0100.0cdd.dddd.
c. IGMP snooping is preferable in a mixed-vendor environment; however, if implemented 
using Layer 2–only LAN switches, it can cause a dramatic reduction in switch perfor-
mance.
d. CGMP is simple to implement, and in CGMP only routers send CGMP messages, while 
switches only listen for CGMP messages. 
e. All of these answers are correct.
f. None of these answers is correct.

632     Chapter 19: Introduction to IP Multicasting
Foundation Topics
Why Do You Need Multicasting?
“Necessity is the mother of all invention,” a saying derived from Plato’s Republic, holds very true 
in the world of technology. In the late 1980s, Dr. Steve Deering was working on a project that 
required him to send a message from one computer to a group of computers across a Layer 3 
network. After studying several routing protocols, Dr. Deering concluded that the functionality of 
the routing protocols could be extended to support “Layer 3 multicasting.” This concept led to 
more research, and in 1991, Dr. Deering published his doctoral thesis, “Multicast Routing in a 
Datagram Network,” in which he deﬁned the components required for IP multicasting, their 
functions, and their relationships with each other.
The most basic deﬁnition of IP multicasting is as follows: 
Sending a message from a single source to selected multiple destinations across a Layer 3 
network in one data stream. 
If you want to send a message from one source to one destination, you could send a unicast 
message. If you want to send a message from one source to all the destinations on a local network, 
you could send a broadcast message. However, if you want to send a message from one source to 
selected multiple destinations spread across a routed network in one data stream, the most efﬁcient 
method is IP multicasting.
Demand for multicast applications is increasing with the advent of such applications as audio and 
video web content; broadcasting TV programs, radio programs, and concerts over the Internet; 
communicating stock quotes to brokers; transmitting a corporate message to employees; and 
transmitting data from a centralized warehouse to a chain of retail stores. Success of one-to-many 
multicast applications has created a demand for the second generation of multicast applications 
that are referred to as “many-to-many” and “many-to-few,” in which there are many sources of 
multicast trafﬁc. Examples of these types of applications include playing games on an intranet or 
the Internet and conducting interactive audio and video meetings. The primary focus of this 
chapter and the next chapter is to help you understand concepts and technologies required for 
implementing one-to-many multicast applications.
Problems with Unicast and Broadcast Methods
Why not use unicast or broadcast methods to send a message from one source to many 
destinations? Figure 19-1 shows a video server as a source of a video application and the video 

Why Do You Need Multicasting?     633
data that needs to be delivered to a group of receivers—H2, H3, and H4—two hops away across 
a WAN link.
Figure 19-1
Unicast
The unicast method requires that the video application send one copy of each packet to every 
group member’s unicast address. To support full-motion, full-screen viewing, the video stream 
requires about 1.5 Mbps of bandwidth for each receiver. If only a few receivers exist, as shown in 
Figure 19-1, this method works ﬁne but still requires n * 1.5 Mbps of bandwidth, where n is the 
number of receiving hosts. 
Figure 19-2 shows that as the number of receivers grows into the hundreds or thousands, the load 
on the server to create and send copies of the same data also increases, and replicated unicast 
transmissions consume a lot of bandwidth within the network. For 100 users, as indicated in the 
upper-left corner of Figure 19-2, the bandwidth required to send the unicast transmission increases 
to 150 Mbps. For 1000 users, the bandwidth required would increase to 1.5 Gbps. 
You can see from Figure 19-2 that the unicast method is not scalable. Figure 19-3 shows that the 
broadcast method requires transmission of data only once, but it has some serious issues. First, as 
shown in Figure 19-3, if the receivers are in a different broadcast domain from the sender, routers 
need to forward broadcasts. However, forwarding broadcasts might be the worst possible solution, 
because broadcasting a packet to all hosts in a network can waste bandwidth and increase 
processing load on all the network devices if only a small group of hosts in the network actually 
needs to receive the packet. 
H2
H1
Frame
Relay Cloud
1.5 Mbps  3  4.5 Mbps
Video
Server
1.5 Mbps  1  1.5 Mbps
1.5 Mbps  2  3 Mbps
1.5 Mbps  1  1.5 Mbps
H4
H3
1.5 Mbps  1  1.5 Mbps
1.5 Mbps  1  1.5 Mbps

634     Chapter 19: Introduction to IP Multicasting
Figure 19-2
Unicast Does Not Scale to Large Numbers of Receivers
Figure 19-3
Broadcast Wastes Bandwidth and Increases Processing Load on CPU 
H50
H1
ATM
Cloud
1.5 Mbps  100  150 Mbps
Video
Server
1.5 Mbps  50  75 Mbps
1.5 Mbps  50  75 Mbps
1.5 Mbps  1  1.5 Mbps
1.5 Mbps  1  1.5 Mbps
H100
H51
1.5 Mbps  1  1.5 Mbps
1.5 Mbps  1  1.5 Mbps
. . . . . .
. . . . . .
I didn’t ask for this
traffic. Why should I
process it?
H2
H1
Frame
Relay Cloud
?
?
1.5 Mbps
Video
Server
1.5 Mbps ?
1.5 Mbps
1.5 Mbps
1.5 Mbps
H4
H3
1.5 Mbps
1.5 Mbps

Why Do You Need Multicasting?     635
How Multicasting Provides a Scalable and Manageable Solution
The six basic requirements for supporting multicast across a routed network are as follows:
■
A designated range of Layer 3 addresses that can only be used by multicast applications must 
exist. A network administrator needs to install a multicast application on a multicast server 
using a Layer 3 multicast address from the designated range.
■
A multicast address must be used only as a destination IP address, and speciﬁcally not as a 
source IP address. Unlike a unicast IP packet, a destination IP address in a multicast packet 
does not specify a recipient’s address, but rather signiﬁes that the packet is carrying multicast 
trafﬁc for a speciﬁc multicast application. 
■
The multicast application must be installed on all the hosts in the network that need to receive 
the multicast trafﬁc for the application. The application must be installed using the same 
Layer 3 multicast address that was used on the multicast server. This is referred to as 
launching an application or joining a group.
■
All hosts that are connected to a LAN must use a standard method to calculate a Layer 2 
multicast address from the Layer 3 multicast address and assign it to their network interface 
cards (NICs). For example, if multiple routers are connected to an Ethernet segment and all 
of them are using the OSPF routing protocol, all the routers on their Ethernet interfaces will 
also be listening to the Layer 2 multicast address 0x0100.5e00.0005 in addition to their 
Burned-In Addresses (BIAs). This Layer 2 multicast address 0x0100.5e00.0005 is calculated 
from the multicast Layer 3 address 224.0.0.5, which is reserved for the OSPF routing 
protocol. 
■
There must be a mechanism by which a host can dynamically indicate to the connected router 
whether it would like to receive the trafﬁc for the installed multicast application. The Internet 
Group Management Protocol (IGMP) provides communication between hosts and a router 
connected to the same subnet. The Cisco Group Management Protocol (CGMP) or IGMP 
snooping helps switches learn which hosts have requested to receive the trafﬁc for a speciﬁc 
multicast application and to which switch ports these hosts are connected.
■
There must be a multicast routing protocol that allows routers to forward multicast trafﬁc 
from multicast servers to hosts without overtaxing network resources. Some of the multicast 
routing protocols are Distance Vector Multicast Routing Protocol (DVMRP), Multicast Open 
Shortest Path First (MOSPF), and Protocol Independent Multicast dense mode (PIM-DM) 
and sparse mode (PIM-SM). 
This chapter discusses the ﬁrst ﬁve bulleted items, and Chapter 20, “IP Multicast Routing,” covers 
the multicast routing protocols.
Figure 19-4 shows how multicast trafﬁc is forwarded in a Layer 3 network. The purpose of this 
illustration is to give you an overview of how multicast trafﬁc is forwarded and received by 
selected hosts.

636     Chapter 19: Introduction to IP Multicasting
Figure 19-4
How Multicast Delivers Trafﬁc to Selected Users
Assume that a video multicast application was installed on the video server using the special Layer 3 
multicast address 225.5.5.5. Hosts 1 to 49, located across a WAN link, are not interested at this 
time in receiving trafﬁc for this application. Hosts 50 to 100 are interested in receiving trafﬁc for 
this application and launch this application on their PCs. When the host launches the application, the 
host joins the group, which means that the host now wants to receive multicast packets sent to 
225.5.5.5. Hosts 50 to 100 join group 225.5.5.5 and indicate to R2 their desire to receive trafﬁc for 
this multicast application by using IGMP. The multicast application calculates the Layer 2 
multicast address 0x0100.5e05.0505 from the Layer 3 multicast address 225.5.5.5, and NICs of 
hosts 50 to 100 are listening to this address in addition to their BIAs. 
A multicast routing protocol is conﬁgured on R1 and R2 so that they can forward the multicast 
trafﬁc. R2 has one WAN link connected to the Frame Relay cloud and two Ethernet links 
connected to two switches—SW2 and SW3. R2 knows that it has hosts on both Ethernet links that 
would like to receive multicast trafﬁc for the group 225.5.5.5 because these hosts have indicated 
their desire to receive trafﬁc for the group using IGMP. Both switches have also learned on which 
ports they have hosts that would like to receive the multicast trafﬁc for this application by using 
either CGMP or IGMP snooping.
A multicast packet travels from the video server over the Ethernet link to R1, and R1 forwards a 
single copy of the multicast packet over the WAN link to R2. When R2 receives a multicast packet 
on the WAN link with the destination address 225.5.5.5, it makes a copy of the packet and 
Frame
Relay Cloud
1.5 Mbps
209.165.201.1/27
Video
Server
SW1
SW2
R1
R2
1.5 Mbps
1.5 Mbps
1.5 Mbps
1.5 Mbps
1.5 Mbps
MM: 0x0100.5e05.0505
MM: 0x0100.5e05.0505
MM: 0x0100.5e05.0505
H50
H1
H100
H51
Multicast Packet
Destination Address: 225.5.5.5
Source Address: 209.165.201.1
SW3
. . . . . .
. . . . . .
MM  Multicast MAC Address

Why Do You Need Multicasting?     637
forwards a copy on each Ethernet link. Because it is a multicast packet for the group (application) 
225.5.5.5, R2 calculates the Layer 2 destination multicast address of 0x0100.5e05.0505, and uses 
it as the destination MAC address on each packet it forwards to both switches. When the switches 
receive these packets, they forward them on appropriate ports to hosts. When the hosts receive the 
packets, their NICs compare the destination MAC address with the multicast MAC address they 
are listening to, and, because they match, inform the higher layers to process the packet.
You can see from Figure 19-4 that the multicast trafﬁc is sent once over the WAN links and is 
received by the hosts that have requested it. Should additional hosts request to receive the same 
multicast trafﬁc, neither the multicast server nor the network resources would incur any additional 
burden, as shown in Figure 19-5.
Figure 19-5
Multicasting Is Scalable
Assume that Hosts 1 to 49 have also indicated their desire to receive trafﬁc for the multicast group 
225.5.5.5 using IGMP. R2 is already forwarding the trafﬁc to both switches. Either CGMP or 
IGMP snooping can help SW2 (shown in Figure 19-5) learn that hosts 1 to 49 have also requested 
the multicast trafﬁc for the group, so that it can start forwarding the multicast trafﬁc on ports 
connected to hosts 1 to 49. The additional 49 users are now receiving multicast trafﬁc, and the load 
on the multicast server, load on other network devices, and demand for bandwidth on the WAN 
links remain the same. The load on SW2 shown in Figure 19-5 increases because it has to make 
49 more copies of the multicast trafﬁc and forward it on 49 more ports; however, it is now 
operating at the same level as the other switch. You can see that IP multicast is scalable.
Frame
Relay Cloud
1.5 Mbps
209.165.201.1/27
Video
Server
SW1
SW2
R1
R2
1.5 Mbps
1.5 Mbps
1.5 Mbps
1.5 Mbps
1.5 Mbps
1.5 Mbps
MM: 0x0100.5e05.0505
MM: 0x0100.5e05.0505
MM: 0x0100.5e05.0505
MM: 0x0100.5e05.0505
H50
H1
H100
H51
SW3
I just joined!
Send me traffic
for 225.5.5.5.
Multicast Packet
Destination Address: 225.5.5.5
Source Address: 209.165.201.1
. . . . . .
. . . . . .
MM  Multicast MAC Address

638     Chapter 19: Introduction to IP Multicasting
Although multicast offers many advantages, it also has some disadvantages. Multicast is UDP-
based and hence unreliable. Lack of TCP windowing and “slow start” mechanisms can result in 
network congestion. Some multicast protocol mechanisms occasionally generate duplicate 
packets and deliver packets out of order.
Multicast IP Addresses
Multicast applications always use a multicast IP address. This multicast address represents the 
multicast application and is referred to as a multicast group. Unlike a unicast IP address, which 
uniquely identiﬁes a single IP host, a multicast address used as a destination address on an IP 
packet signiﬁes that the packet is carrying trafﬁc for a speciﬁc multicast application. For example, 
if a multicast packet is traveling over a network with a destination address 225.5.5.5, it is 
proclaiming to the network devices that “I am carrying trafﬁc for the multicast application that 
uses multicast group address 225.5.5.5; do you want it?” A multicast address is never assigned to 
a network device, so it is never used as a source address. A source address on a multicast packet, 
or any IP packet, is always a unicast address.
Multicast Address Range and Structure
The Internet Assigned Numbers Authority (IANA) has assigned class D IP addresses to multicast 
applications. The ﬁrst 4 bits of the ﬁrst octet for a class D address are always 1110. IP multicast 
addresses range from 224.0.0.0 through 239.255.255.255. As these addresses are used to represent 
multicast groups (applications) and not hosts, there is no need for a subnet mask for multicast 
addresses because they are not hierarchical. In other words, there is only one requirement for a 
multicast address: the ﬁrst 4 bits of the ﬁrst octet must be 1110. The last 28 bits are unstructured.
Well-Known Multicast Addresses
IANA controls the assignment of IP multicast addresses. To preserve multicast addresses, IANA 
is reluctant to assign individual IP multicast addresses to new applications without a good 
technical justiﬁcation. However, IANA has assigned individual IP multicast addresses to popular 
network protocols.
IANA has assigned several ranges of multicast IP addresses for speciﬁc types of reasons. Those 
types are as follows:
■
Permanent multicast groups, in the range 224.0.0.0–224.0.1.255
■
Addresses used with Source-Speciﬁc Multicast (SSM), in the range
232.0.0.0–232.255.255.255
■
GLOP addressing, in the range 233.0.0.0–233.255.255.255
■
Private multicast addresses, in the range 239.0.0.0–239.255.255.255
KEY 
POINT
KEY 
POINT

Multicast IP Addresses     639
This section provides some insights into each of these four types of reserved IP multicast 
addresses. The rest of the multicast addresses are referred to as transient groups, which are 
covered later in this chapter in the section “Multicast Addresses for Transient Groups.”
Multicast Addresses for Permanent Groups 
IANA has reserved two ranges of permanent multicast IP addresses. The main distinction between 
these two ranges of addresses is that the ﬁrst range is used for packets that should not be forwarded 
by routers, and the second group is used when packets should be forwarded by routers.
The range of addresses used for local (not routed) purposes is 224.0.0.0 through 224.0.0.255. 
These addresses should be somewhat familiar from the routing protocol discussions earlier in the 
book; for example, the 224.0.0.5 and 224.0.0.6 IP addresses used by OSPF ﬁt into this ﬁrst range 
of permanent addresses. Other examples include the IP multicast destination address of 224.0.0.1, 
which speciﬁes that all multicast-capable hosts on a local network segment should examine this 
packet. Similarly, the IP multicast destination address of 224.0.0.2 on a packet speciﬁes that all 
multicast-capable routers on a local network segment should examine this packet. 
The range of permanent group addresses used when the packets should be routed is 224.0.1.0 
through 224.0.1.255. This range includes 224.0.1.39 and 224.0.1.40, which are used by Cisco-
proprietary Auto-Rendezvous Point (Auto-RP) protocols (covered in Chapter 20). Table 19-2 
shows some of the well-known addresses from the permanent address range. 
Table 19-2
Some Well-Known Reserved Multicast Addresses
KEY 
POINT
Address
Usage
224.0.0.1
All multicast hosts
224.0.0.2
All multicast routers
224.0.0.4
DVMRP routers
224.0.0.5
All OSPF routers
224.0.0.6
OSPF designated routers
224.0.0.9
RIPv2 routers
224.0.0.10
EIGRP routers
224.0.0.13
PIM routers
224.0.0.22
IGMPv3
224.0.0.25
RGMP
224.0.1.39
Cisco-RP-Announce
224.0.1.40
Cisco-RP-Discovery

640     Chapter 19: Introduction to IP Multicasting
Multicast Addresses for Source-Speciﬁc Multicast Applications and Protocols
IANA has allocated the range 232.0.0.0 through 232.255.255.255 for SSM applications and 
protocols. The purpose of these applications is to allow a host to select a source for the multicast 
group. SSM makes multicast routing efﬁcient, allows a host to select a better-quality source, and 
helps network administrators minimize multicast denial-of-service (DoS) attacks. 
Multicast Addresses for GLOP Addressing
IANA has reserved the range 233.0.0.0 through 233.255.255.255 (RFC 2770), called GLOP 
addressing, on an experimental basis. It can be used by anyone who owns a registered autonomous 
system number (ASN) to create 256 global multicast addresses that can be owned and used by the 
entity. IANA reserves addresses to ensure global uniqueness of addresses; for similar reasons, 
each autonomous system should be using an assigned unique ASN. 
By using a value of 233 for the ﬁrst octet, and by using the ASN for the second and third octets, a 
single autonomous system can create globally unique multicast addresses as deﬁned in the GLOP 
addressing RFC. For example, the autonomous system using registered ASN 5663 could covert 
ASN 5663 to binary (0001011000011111). The ﬁrst 8 bits, 00010110, equals 22 in decimal 
notation, and the last 8 bits, 00011111, equals 31 in decimal notation. Mapping the ﬁrst 8 bits to 
the second octet and the last 8 bits to the third octet in the 233 range addresses, the entity who 
owns the ASN 5663 is automatically allocated the address range 233.22.31.0 through 
233.22.31.255.
Multicast Addresses for Private Multicast Domains
The last of the reserved multicast address ranges mentioned here is the range of administratively 
scoped addresses. IANA has assigned the range 239.0.0.0 through 239.255.255.255 (RFC 2365) 
for use in private multicast domains, much like the IP unicast ranges deﬁned in RFC 1918, namely 
10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16. IANA will not assign these administratively 
scoped multicast addresses to any other protocol or application. Network administrators are free 
to use multicast addresses in this range; however, they must conﬁgure their multicast routers to 
ensure that multicast trafﬁc in this address range does not leave their multicast domain 
boundaries.
NOTE
Only IGMPv3-capable hosts can use the SSM feature. IGMPv3 is a new protocol. At 
the time of this writing, a very limited number of IGMPv3 applications were available. Hence, 
use of these addresses is minimal. 
NOTE
GLOP is not an acronym and does not stand for anything. One of the authors of RFC 
2770, David Meyer, started referring to this range of addresses as “GLOP” addressing, and since 
then the range has been identiﬁed by the name GLOP addressing.

Multicast IP Addresses     641
Multicast Addresses for Transient Groups 
When an enterprise wants to use globally unique unicast addresses, it needs to get a block of 
addresses from its ISP or from IANA. However, when an enterprise wants to use a multicast 
address for a global multicast application, it can use any multicast address that is not part of the 
well-known permanent multicast address space covered in the previous sections. These remaining 
multicast addresses are called transient groups or transient multicast addresses. This means that 
the entire Internet must share the transient multicast addresses; they must be dynamically allocated 
when needed and must be released when no longer in use. 
Because these addresses are not permanently assigned to any application, they are called 
“transient.” Any enterprise can use these multicast addresses without requiring any registration or 
permission from IANA, but the enterprise is expected to release these multicast addresses after 
their use. At the time of this writing (mid 2005), there is no standard method available for using 
the transient multicast addresses. However, a great deal of work is being done by IETF to deﬁne 
and implement a standard method for dynamically allocating multicast addresses.
Summary of Multicast Address Ranges
Table 19-3 summarizes various multicast address ranges and their use.
Table 19-3
Multicast Address Ranges and Their Use
KEY 
POINT
Multicast Address Range
Usage
224.0.0.0 to 239.255.255.255
This range represents the entire IPv4 multicast address space. It is 
reserved for multicast applications.
224.0.0.0 to 224.0.0.255
This range is part of the permanent groups. Addresses from this 
range are assigned by IANA for network protocols on a local 
segment. Routers do not forward packets with destination 
addresses used from this range.
224.0.1.0 to 224.0.1.255
This range is also part of the permanent groups. Addresses from 
this range are assigned by IANA for the network protocols that are 
forwarded in the entire network. Routers forward packets with 
destination addresses used from this range. 
232.0.0.0 to 232.255.255.255
This range is used for SSM applications.
233.0.0.0 to 233.255.255.255
This range is called the GLOP addressing. It is used for 
automatically allocating 256 multicast addresses to any enterprise 
that owns a registered ASN.
239.0.0.0 to 239.255.255.255
This range is used for private multicast domains. These addresses 
are called administratively scoped addresses. 
Remaining ranges of addresses in 
the multicast address space
Addresses from these ranges are called transient groups. Any 
enterprise can allocate a multicast address from the transient 
groups for a global multicast application, and should release it 
when the application is no longer in use. 

642     Chapter 19: Introduction to IP Multicasting
Mapping IP Multicast Addresses to MAC Addresses
Assigning a Layer 3 multicast address to a multicast group (application) automatically generates 
a Layer 2 multicast address. Figure 19-6 shows how a multicast MAC address is calculated from 
a Layer 3 multicast address. The MAC address is formed using an IEEE-registered OUI of 
01005E, then a binary 0, and then the last 23 bits of the multicast IP address. The method is 
identical for Ethernet and Fiber Distributed Data Interface (FDDI). 
Figure 19-6
Calculating a Multicast Destination MAC Address from a Multicast Destination IP Address
To understand the mechanics of this process, use the following six steps, which are referenced by 
number in Figure 19-6:
Step 1
Convert the IP address to binary. Notice the ﬁrst 4 bits; they are always 
1110 for any multicast IP address.
Step 2
Replace the ﬁrst 4 bits 1110 of the IP address with the 6 hexadecimal digits 
(or 24 bits) 01-00-5E as multicast OUI, in the total space of 12 hexadecimal 
digits (or 48 bits) for a multicast MAC address.
Step 3
Replace the next 5 bits of the binary IP address with one binary 0 in the 
multicast MAC address space.
Step 4
Copy the last 23 bits of the binary IP address in the last 23-bit space of the 
multicast MAC address.
Step 5
Convert the last 24 bits of the multicast MAC address from binary to
6 hexadecimal digits.
Step 6
Combine the ﬁrst 6 hexadecimal digits 01-00-5E with the last 6 hexadecimal 
digits, calculated in Step 5, to form a complete multicast MAC address 
of 12 hexadecimal digits. 
0 0 0 1 0 1 0 . 0 0 0 1 1 0 0 0 . 0 0 0 0 0 1 0 1
0
-
228.10.24.5
01-00-5E-0A-18-05
Binary
0 1 0 0 . 0
0 0 0 1 0 1 0 . 0 0 0 1 1 0 0 0 . 0 0 0 0 0 1 0 1
1 1 1 0
Hex
01-00-5E
0
A
-
-
1
8
0
5
-
01-00-5E
Always
Hex
Multicast
IP Address
Multicast
MAC
Address
IP Address
In Binary
1
2
6
3
5
4
. . . . . .
. . . . . .
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     643
Unfortunately, this method does not provide a unique multicast MAC address for each multicast IP 
address, because only the last 23 bits of the IP address are mapped to the MAC address. For example, 
the IP address 238.10.24.5 produces exactly the same MAC address, 0x01-00-5E-0A-18-05, as 
228.10.24.5. In fact, because 5 bits from the IP address are always mapped to 0, 25 (32) different 
class D IP addresses produce exactly the same MAC address. IETF points out that the chances of 
two multicast applications on the same LAN producing the same MAC address are very low. If it 
happens accidentally, a packet from a different IP multicast application can be identiﬁed at Layer 3 
and discarded; however, network administrators should be careful when they implement multicast 
applications so that they can avoid using IP addresses that produce identical MAC addresses. 
Managing Distribution of Multicast Trafﬁc with IGMP
Refer to Figure 19-4. Assume that R2 has started receiving multicast trafﬁc from the server. 
R2 has to make a decision about forwarding this trafﬁc on the Ethernet links. R2 needs to know 
the answers to the following questions:
■
Is there any host connected to any of my Ethernet links that has shown interest in receiving 
this trafﬁc?
■
If none of the hosts has shown any interest in receiving this trafﬁc, why should I forward it on 
the Ethernet links and waste bandwidth?
■
If any host have shown interest in receiving this trafﬁc, where are they located? Are they 
connected to one of my Ethernet links or to both?
As you can see, a mechanism is required for hosts and a local router to communicate with each 
other. The Internet Group Management Protocol (IGMP) was designed to enable communication 
between a router and connected hosts.
Not only do routers need to know out which LAN interface to forward multicast packets, but 
switches also need to know on which ports they should forward the trafﬁc. By default, if a switch 
receives a multicast frame on a port, it will ﬂood the frame throughout the VLAN, just like it would 
do for a broadcast or unknown unicast frame. The reason is that switches will never ﬁnd a 
multicast MAC address in their Content Addressable Memory (CAM) table, because a multicast 
MAC address is never used as a source address. 
A switch’s decision to ﬂood multicast frames means that if any host or hosts in a VLAN request 
to receive the trafﬁc for a multicast group, all the remaining hosts in the same VLAN, whether they 
have requested to receive the trafﬁc for the multicast group or not, will receive the multicast trafﬁc. 
This behavior is contrary to one of the major goals of multicast design, which is to deliver 
multicast trafﬁc to only those hosts that have requested it, while maximizing bandwidth efﬁciency. 

644     Chapter 19: Introduction to IP Multicasting
To forward trafﬁc more efﬁciently in Figure 19-4, SW2 and SW3 need to know the answers to the 
following questions: 
■
Should I forward this multicast trafﬁc on all the ports in this VLAN, or only on speciﬁc ports?
■
If I should forward this multicast trafﬁc on speciﬁc ports of a VLAN, how will I ﬁnd those 
port numbers?
Three different tools, namely CGMP, IGMP snooping, and RGMP, allow switches to optimize their 
multicast forwarding logic by answering these kinds of questions. These topics are covered in 
more depth later in the chapter. For now, this section focuses on how routers and hosts use IGMP to 
make sure the router knows whether it should forward multicasts out the router’s LAN interfaces. 
Joining a Group
Before a host can receive any multicast trafﬁc, a multicast application must be installed and run 
on that host. The process of installing and running a multicast application is referred to as 
launching an application or joining a multicast group. After a host joins a group, the host software 
calculates the multicast MAC address and its NIC then starts listening to the multicast MAC 
address, in addition to its BIA. 
Before a host (or a user) can join a group, the user needs to know what groups are available and 
how to join them. For enterprise-scale multicast applications, the user may simply ﬁnd a link on a 
web page and click it, prompting the user’s multicast client application to start working with the 
correct multicast address—totally hiding the multicast address details. Alternately, for an 
internally developed multicast application, the multicast address can be pre-conﬁgured on the 
client application. For example, a user might be required to log on to a server and authenticate with 
a name and a password; if the user is authenticated, the multicast application automatically installs 
on the user’s PC, which means the user has joined the multicast group. When the user no longer 
wants to use the multicast application, the user must leave the group. For example, the user may 
simply close the multicast application to leave the group.
The process by which a human discovers which multicast IP address to listen for and join can be 
a challenge, particularly for multicast trafﬁc on the Internet. The problem is similar to when you 
have a satellite or digital cable TV system at home—you might have literally thousands of 
channels, but ﬁnding the channel that has the show you want to watch might require a lot of surﬁng 
through the list of channels and time slots. For IP multicast, a user needs to discover what 
applications they may want to use, and the multicast IP addresses used by the application(s). A lot 
of work remains to be done in this area, but some options are available. For example, online TV 
program guides and web-based schedules advertise events that will use multicast groups, and 
specify who to contact if you want to see the event, lecture, or concert. Tools like Session 
Description Protocol (SDP) and Service Advertising Protocol (SAP) also describe multicast 
events and advertise them. However, a detailed discussion of the different methods, their 
limitations, and procedures for using them are beyond the scope of this book. The rest of the 
discussion in this section assumes that hosts have somehow learned about a multicast group.

Managing Distribution of Multicast Trafﬁc with IGMP     645
Internet Group Management Protocol
IGMP has evolved from the Host Membership Protocol, described in Dr. Steve Deering’s doctoral 
thesis, to IGMPv1 (RFC 1112), to IGMPv2 (RFC 2236), to the latest, IGMPv3 (RFC 3376). IGMP 
messages are sent in IP datagrams with IP protocol number 2, with the IP Time-to-Live (TTL) ﬁeld 
set to 1. IGMP packets only pass over a LAN, and are not forwarded by routers, due to their TTL 
ﬁeld values. 
The two most important goals of IGMP are as follows:
■
To inform a local multicast router that a host wishes to receive multicast trafﬁc for a speciﬁc 
group
■
To inform local multicast routers that a host wishes to leave a multicast group (in other words, 
the host is no longer interested in receiving the multicast group trafﬁc)
Multicast routers use IGMP to maintain information for each router interface about which 
multicast group trafﬁc they should forward, and the hosts that want to receive it.
The following sections examine IGMPv1 and IGMPv2 in detail and introduce important features 
of IGMPv3. In the ﬁgures that show the operation of IGMP, Layer 2 switches are not shown 
because IGMP is used for communication between hosts and routers. Later in the chapter, the 
sections “Cisco Group Management Protocol,” “IGMP Snooping,” and “Router-Port Group 
Management Protocol” discuss the operation of multicasting at Layer 2. 
IGMP Version 1
Figure 19-7 shows the 8-octet format of an IGMPv1 message.
Figure 19-7
IGMPv1 Message Format
The IGMPv1 message has ﬁve ﬁelds:
■
Version—4-bit ﬁeld that is always set to 1.
■
Type—4-bit ﬁeld that is either of two message types deﬁned by IGMPv1:
— Type 1, Host Membership Query—Used only by routers. 
— Type 2, Host Membership Report—Used only by hosts.
Version
Group Address
Unused
8
8
16
32 bits
Checksum
Type
KEY 
POINT

646     Chapter 19: Introduction to IP Multicasting
■
Unused—8-bit ﬁeld that contains zeros when sent and is ignored when received.
■
Checksum—Carries the 16-bit checksum computed by the source for the IGMP message. 
The receiving device examines the checksum value, and if it does not match with its own 
calculated value, the receiver discards the frame.
■
Group Address—Set to 0.0.0.0 when a router sends a Membership Query, and set to the 
multicast group address when a host sends a Membership Report.
Note that when you combine the Version and Type ﬁelds, the hexadecimal value of the ﬁrst byte 
of an IGMPv1 Host Membership Query message would be 0x11 and an IGMPv1 Host Member-
ship Report would be 0x12. Later, these values will be compared with the values of IGMPv2.
IGMPv1 Host Membership Query Functions
Multicast routers use the IGMPv1 Host Membership Query message to determine whether it has 
any host on any of its LAN interfaces that wants multicast trafﬁc for any group. The IGMPv1 Host 
Membership Query message is sent only by multicast routers on LAN interfaces. For example, 
Figure 19-8 shows the IGMPv1 Host Membership Query process. It lists two steps, with the 
second step being the router sending the Query.
Figure 19-8
IGMPv1 Host Membership Query Process
NOTE
The values and names of various timers used in the following sections of IGMPv1 are 
not explicitly deﬁned in RFC 1112; however, they are deﬁned in RFC 2236 for IGMPv2. To 
maintain consistency and clarify differences in values of timers used in two versions, the same 
timers names are used in the IGMPv1 and IGMPv2 sections.
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
S0/0
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
IGMPv1 Host Membership
Query
“Does anyone want to
receive multicast traffic for
any group?”
2
1
IGMPv1 Host Membership
Query
“Does anyone want to
receive multicast traffic for
any group?”
2
01-00-5e-00-00-01
01-00-5e-01-01-01
MM1
Listen for these MMs:
1
01-00-5e-00-00-01
01-00-5e-01-01-01
Listen for these MMs:
MM2
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     647
The details of the two steps are as follows: 
1.
Hosts H1 and H3 join multicast group 226.1.1.1. The Join causes these hosts to prepare to 
receive messages sent to both 226.1.1.1 (the joined group) and 224.0.0.1 (the address to which 
IGMPv1 Queries will be sent). Multicast hosts must listen to the well-known 224.0.0.1 
multicast group address to participate in IGMP and, as a result, to receive multicast queries 
sent by the router. The Join causes these hosts to calculate the two multicast MAC (MM) 
addresses, 01-00-5e-01-01-01 (from 226.1.1.1) and 01-00-5e-00-00-01 (from 224.0.0.1), and 
then listen for frames sent to these two MMs.
2.
R1 sends an IGMPv1 Host Membership Query out each LAN interface, looking for any host 
interested in receiving packets for any multicast group. R1 periodically sends IGMPv1 
Queries on each LAN interface, by default, every 60 seconds. This time period is called the 
Query Interval. R1’s Queries use a destination IP address and MAC address of 224.0.0.1 and 
01-00-5e-00-00-01, with the source IP address and MAC address of R1’s interface IP address 
and BIA, respectively. After sending IGMPv1 Queries, R1 expects any host that has joined 
group 226.1.1.1, or any other group, to reply with an IGMPv1 Report. The IGMPv1 Queries 
also use a TTL of 1, preventing the packet from being routed. 
The IGMPv1 Query message’s Group Address ﬁeld (see Figure 19-7) is always 0.0.0.0. By 
sending the IGMPv1 Query message with the Group Address 0.0.0.0, the router is asking the 
hosts on each LAN, “Does anyone want to receive multicast trafﬁc for any group?” 
At this point, router R1 still does not know if any hosts need to receive any multicast trafﬁc. The 
next section covers how the hosts respond with IGMP Report messages to inform R1 of their 
interest in multicast packets.
IGMPv1 Host Membership Report Functions
Hosts use IGMPv1 Host Membership Report message to reply to IGMP Queries and inform the 
router(s) of their desire to receive multicasts. Multicast hosts use IGMPv1 Host Membership 
Report messages to communicate to a local router for which multicast groups they want to receive 
trafﬁc. 
In IGMPv1, a host sends an IGMPv1 Host Membership Report under the following two conditions:
■
When a host receives an IGMPv1 Query from a local router, it is supposed to send an IGMPv1 
Host Membership Report for all the multicast groups for which it wants to receive multicast 
trafﬁc. This Report is called an IGMPv1 Solicited Host Membership Report. 
■
When a host joins a new group, the host immediately sends an IGMPv1 Host Membership 
Report to inform a local router that it wants to receive multicast trafﬁc for the group it has just 
joined without waiting to receive an IGMPv1 Query. This Report is called an IGMPv1 
Unsolicited Host Membership Report.
KEY 
POINT
KEY 
POINT

648     Chapter 19: Introduction to IP Multicasting
The operations of IGMPv1 Solicited Host Membership Report and IGMPv1 Unsolicited Host 
Membership Report are explained in the following sections.
IGMPv1 Solicited Host Membership Report
Figure 19-9 shows operation of the IGMPv1 Solicited Host Membership Report process and the 
Report Suppression mechanism. Figure 19-9 picks up the example from Figure 19-8, in which 
router R1 had sent an IGMPv1 Query.
Figure 19-9
IGMPV1 Solicited Host Membership Report and Report Suppression Processes
If many hosts have launched multicast applications and if all of them respond to the Host 
Membership Query with the Host Membership Report, too many redundant reports would be sent 
to the router. This would waste bandwidth and unnecessarily increase the processing load on the 
router. A multicast router needs to receive only one report for each application on each of its LAN 
interfaces. A multicast router would forward the trafﬁc for a multicast application on a LAN 
interface whether one user has requested to receive the trafﬁc or 200 users have requested to 
receive the trafﬁc for the group.
NOTE
The terms IGMPv1 Solicited Host Membership Report and IGMPv1 Unsolicited Host 
Membership Report are not deﬁned in IGMPv1 RFC 1112. They are used in this book to specify 
whether the IGMPv1 Report was sent in response to a Query (solicited) or simply when the 
client application comes up (unsolicited).
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
5
5
3
4
Process
Report
5 Process
Report
5 Discard
Report
4
3
I got a report
for 226.1.1.1 –
suppress my
report!
I got a query – I need
to respond! First, I’ll
choose my MRT.
Timer expired, so send
report. “I would like to
receive multicast traffic
for 226.1.1.1.”
MRT = 1
3 MRT = 3
MRT = Maximum Response Time in seconds, selected randomly by hosts.
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     649
The Report Suppression mechanism helps to solve these problems. It uses the IGMPv1 Maximum 
Response Time (MRT) timer to suppress many of the unnecessary IGMPv1 Reports. This timer is 
called the Query Response Interval. It is ﬁxed at 10 seconds and cannot be conﬁgured to a different 
value in IGMPv1. In other words, in IGMPv1, when any host receives an IGMPv1 Query, it has a 
maximum of 10 seconds to send the IGMPv1 Report if it wants to receive multicast trafﬁc for any 
application. Each host that wants to send the IGMPv1 Solicited Host Membership Report picks 
randomly a time between 0 and 10 seconds and starts a timer. When this timer expires, the host is 
supposed to send a report. However, if a host receives a report sent by another host for the same 
multicast group for which it was planning to send the report, it does not send the report. This is 
called Report Suppression and is designed to reduce redundant reports. The unit of measurement 
for the MRT is 1/10 of a second. For example, a 3-second MRT is expressed as 30. 
The following three steps, referenced in Figure 19-9 and a continuation of the steps referenced in 
Figure 19-8, describe the sequence of events for the IGMPv1 Solicited Host Membership Report 
and Report Suppression mechanism: 
3.
Hosts H1 and H3 would like to send IGMPv1 Solicited Host Membership Reports. Assume 
that H1 and H3 have received an IGMPv1 Query (as shown in step 2 of Figure 19-8). 
Because both H1 and H3 have joined the group 226.1.1.1, they need to send an IGMPv1 
Solicited Host Membership Report. Further assume that H1 and H3 have randomly picked 
a Maximum Response Time (MRT) of 3 seconds and 1 second, respectively.
4.
H3’s timer expires in 1 second; it prepares and sends the IGMPv1 Solicited Host Membership 
Report with the TTL value of 1. H3 uses the destination IP address 226.1.1.1 and the source 
IP address 10.1.1.3, the destination MAC address 01-00-5e-01-01-01 calculated from the 
Layer 3 address 226.1.1.1, and its BIA address as the source address. 
5.
Hosts H1, H2, and R1 receive the IGMPv1 Solicited Host Membership Report, but only H1 
and R1 process the Report. The NIC of H2 discards the frame sent by H3 because it is not 
listening to the address 01-00-5e-01-01-01. H1 realizes that H3 has already made a request to 
the router to forward the trafﬁc for the same multicast group 226.1.1.1. Therefore, H1 
suppresses its own Report and does not send it. By using the Group Address of 226.1.1.1, H3 
is telling the multicast router, “I would like to receive multicast trafﬁc for group 226.1.1.1.”
R1 has now received the IGMPv1 Solicited Host Membership Report on its fa0/0 interface 
requesting trafﬁc for multicast group 226.1.1.1, but it has not received a Host Membership Report 
on its fa0/1 interface. Figure 19-10 shows that R1 has started forwarding multicast trafﬁc for group 
226.1.1.1 on its fa0/0 interface.

650     Chapter 19: Introduction to IP Multicasting
Figure 19-10
R1 Forwarding Trafﬁc for Group 226.1.1.1 on Its Fa0/0 Interface
IGMPv1 Unsolicited Host Membership Report
In IGMPv1, a multicast router sends IGMP Host Membership Query messages by default every 
60 seconds (Query Interval) on each of its LAN interfaces to determine whether any host wants to 
receive multicast trafﬁc for any group. However, a host does not have to receive the Host 
Membership Query message from the router to send a Host Membership Report. A host can send 
an IGMPv1 Unsolicited Host Membership Report anytime a user launches a multicast application. 
This feature reduces the waiting time for a host to receive trafﬁc for a multicast group. For 
example, Figure 19-11 shows that a user has launched a multicast application that uses 226.1.1.1 
on H4. H4 sends an IGMPv1 Unsolicited Host Membership Report, which will be received by R1 
on its fa0/1 interface, and R1 will then start forwarding trafﬁc for 226.1.1.1 on its fa0/1 interface.
Figure 19-11
H4 Sends IGMPv1 Unsolicited Host Membership Report
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
S0/0
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
Multicast Traffic
Destination Address: 226.1.1.1
Multicast Traffic
Destination Address: 226.1.1.1
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
S0/0
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
Forward future
multicasts for 226.1.1.1
out Fa0/1.
2
1
Unsolicited Host
Membership Report
“I would like to receive
multicast traffic
for 226.1.1.1.”

Managing Distribution of Multicast Trafﬁc with IGMP     651
IGMPv1 Leave Mechanism
Unfortunately, IGMPv1 does not have an explicit “Leave” mechanism that hosts can use to inform 
local routers that they no longer want to receive multicast trafﬁc. For example, assume that a user 
sitting at H4 shown in Figure 19-11 receives group 226.1.1.1 trafﬁc for a few minutes, but then 
decides to select another group or closes the application window. H4 has quietly left the group and 
R1 does not know about it. R1 will continue forwarding trafﬁc for 226.1.1.1 on its fa0/1 interface 
for (up to) 3 minutes (default,) even if nobody wants to receive it, wasting bandwidth. After R1 
sends its Host Membership Query message three times, by default 60 seconds apart, and nobody 
responds with an IGMPv1 Solicited Host Membership Report for 226.1.1.1, R1 concludes that no 
hosts want to receive trafﬁc for 226.1.1.1 on its fa0/1 interface. This 3-minute timer is called the 
Group Membership Interval.
Thus, after H4 leaves group 226.1.1.1, R1 continues forwarding trafﬁc for 226.1.1.1 for 3 minutes 
on the subnet. R1 then learns that no host wants trafﬁc for 226.1.1.1 and stops forwarding these 
packets on its fa0/1 interface.
IGMPv1 Querier
For redundancy, it might be desirable to have multiple multicast routers connected to the same 
subnet. However, making all of them send Queries every minute is a waste of bandwidth. It is 
important to have only one preferred router and assign that router the responsibility of sending 
Query messages and forwarding (or stopping) multicast trafﬁc on the subnet. If the ﬁrst preferred 
router is not available, the second router should take the responsibility. RFC 1112 does not specify 
how the IGMPv1 preferred router should be selected. Instead, IGMPv1 depends on the Layer 3 IP 
multicast routing protocol to solve this problem by electing a designated router for the subnet. 
Multicast routing protocols are covered in Chapter 20. 
IGMP Version 2
One of the primary reasons for developing IGMPv2 was to provide a better Leave mechanism to 
shorten the leave latency. IGMPv2 has the following new features:
■
Leave Group messages—Provide hosts with a method for notifying routers that they wish to 
leave the group.
■
Group-Speciﬁc Query messages—Permit the router to send a query for a speciﬁc group 
instead of all groups.
■
Maximum Response Time ﬁeld—A new ﬁeld in Query messages that permits the router to 
specify the MRT. This ﬁeld allows for tuning the response time for the Host Membership 
Report. This feature can be useful when a large number of groups are active on a subnet and 
you want to decrease the burstiness of the responses by spreading the responses over a longer 
period of time. 
KEY 
POINT

652     Chapter 19: Introduction to IP Multicasting
■
Querier election process—Provides the method for selecting the preferred router for sending 
Query messages when multiple routers are connected to the same subnet.
Figure 19-12 shows the 8-octet format of an IGMPv2 message. Note that only the second ﬁeld 
in the header, the Maximum Response Time ﬁeld, differs from the IGMPv1 message shown in 
Figure 19-7. However, many other values are deﬁned for the Type ﬁeld.
Figure 19-12
IGMPV2 Message Format
IGMPv2 has four ﬁelds, which are deﬁned as follows:
■
Type—8-bit ﬁeld that is one of four message types deﬁned by IGMPv2:
— Membership Query (Type code = 0x11)—Used by multicast routers to discover the 
presence of group members on a subnet. A General Membership Query message sets 
the Group Address ﬁeld to 0.0.0.0 exactly like IGMPv1 does. A Group-Speciﬁc Query 
sets the Group Address ﬁeld to the address of the group being queried. It is sent by a 
router after it receives the IGMPv2 Leave Group message from a host. It is used to 
determine whether a speciﬁc multicast group has any remaining members on a subnet. 
— Version 1 Membership Report (Type code = 0x12)—Used by IGMPv2 hosts for 
backward compatibility with IGMPv1.
— Version 2 Membership Report (Type Code = 0x16)—Sent by a group member to 
inform the router that at least one group member is present on the subnet.
— Leave Group (Type code = 0x17)—Sent by a group member if it was the last 
member to send a Membership Report, to inform the router that it is leaving the group. 
■
Maximum Response Time—8-bit ﬁeld included only in Query messages. The units are
1/10 of a second, with 100 (10 seconds) being the default. The values range from 1 to 255
(.1 to 25.5 seconds).
■
Checksum—Carries the 16-bit checksum computed by the source. The IGMP checksum is 
computed over the whole IP payload, not just over the ﬁrst 8 octets, even though IGMPv2 
messages are only 8 bytes in length. 
■
Group Address—Set to 0.0.0.0 in General Query messages and to the group address in Group-
Speciﬁc messages. Membership Report messages carry the address of the group being reported 
in this ﬁeld; Leave Group messages carry the address of the group being left in this ﬁeld.
Group Address
Max Response Time
8
8
16
32 bits
Checksum
Type
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     653
IGMPv2 supports complete backward compatibility with IGMPv1. Note that the IGMPv2 Type 
codes 0x11 and 0x12 match the type codes for IGMPv1 for the Membership Query and 
Membership Report messages. This enables IGMPv2 hosts and routers to recognize IGMPv1 
messages when other IGMPv1 hosts or routers are on the network.
IGMPv2 helps reduce surges in IGMPv2 Solicited Report messages sent by hosts in response to 
IGMPv2 Query messages by allowing the network administrator to change the Query Response 
Interval. IGMPv1 Query messages do not have a Maximum Response Time ﬁeld, so each host 
simply uses a default MRT of 10 seconds. However, the IGMPv2 Query message includes an MRT 
ﬁeld, stating an MRT to be used by all IGMPv2 hosts on the LAN. By setting MRT slightly higher, 
the hosts’ collective IGMPv2 Solicited Report messages are spread over a longer time period, 
resulting in more uniform consumption of subnet bandwidth and router resources. 
The coverage of IGMPv1 earlier in this chapter described how a host can send an IGMP Report 
in response to a Query, or simply send a Report when the host’s application ﬁrst comes up. These 
processes work the same way with IGMPv2, with one small difference: the router acting as the 
IGMPv2 querier sends general IGMP Query messages every 125 seconds, instead of every 
60 seconds, as with IGMPv1. Because the operations of IGMPv2 General Query messages and 
Report messages are identical to those of IGMPv1, they are not repeated in this section. (Refer to 
the earlier “IGMPv1 Host Membership Query Functions” and “IGMPv1 Host Membership Report 
Functions” sections for more details.)
IGMPv2 improves the Query/Report process as well by using the IGMPv2 Group-Speciﬁc Query. 
In IGMPv2, when a host leaves a group, it sends an IGMPv2 Leave message. When an IGMPv2 
router receives a Leave message, instead of waiting for the normal Query Interval timer 
(125 seconds by default) to expire, the IGMPv2 router immediately sends a Group-Speciﬁc Query 
for that group. The Group-Speciﬁc Query only asks if there are any remaining hosts wanting packets 
for that single multicast group. As a result, the router quickly knows if there are any remaining hosts 
interested in that multicast group on that LAN. 
The main advantage of IGMPv2 over IGMPv1 is IGMPv2’s shorter leave latency. Recall from the 
“IGMPv1 Leave Mechanism” section that an IGMPv1 router takes by default 3 minutes to conclude 
that the last host on the subnet has left a group and no host on the subnet wants to receive trafﬁc for the 
group. Meanwhile, the IGMPv1 router continues forwarding the group trafﬁc on the subnet and wastes 
bandwidth. On the other hand, an IGMPv2 router concludes in 3 seconds that no host on the subnet 
wants to receive trafﬁc for a group, stops forwarding it on the subnet, and does not waste bandwidth.
The functions of the IGMPv2 Leave message and IGMPv2 Group-Speciﬁc Query message are 
explained in detail in the next section.

654     Chapter 19: Introduction to IP Multicasting
IGMPv2 Leave Group and Group-Speciﬁc Query Messages
The IGMPv2 Leave Group message is used to signiﬁcantly reduce the leave latency, while the 
IGMPv2 Group-Speciﬁc Query message prevents a router from incorrectly stopping the forwarding 
of packets on a LAN when a host leaves a group. As a result, both of these functions that were 
added for IGMPv2 work together.
Figure 19-13 shows the operation of the IGMPv2 Leave process and the IGMP Group-Speciﬁc 
Query. In Figure 19-13, hosts H1 and H3 are currently members of group 226.1.1.1; H1 wants to 
leave the group.
Figure 19-13
How Group-Speciﬁc Queries Work with the IGMPv2 Leave Process
The following three steps, referenced in Figure 19-13, describe the sequence of events for the 
IGMPv2 Leave mechanism when H1 leaves:
1.
H1 sends an IGMPv2 Leave Group message. The destination address on the packet is 
224.0.0.2, which is a well-known multicast address for All Multicast Routers to inform all 
routers on the subnet that, “I don’t want to receive multicast trafﬁc for 226.1.1.1 anymore.”
NOTE
IGMPv2 RFC 2236 recommends that a host send a Leave Group message only if 
the leaving member was the last host to send a Membership Report in response to a Query. 
However, most IGMPv2 vendor operating systems have implemented the Leave Group 
processing by always sending a Leave Group message when any host leaves the group.
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
2
3
1
1
3
Host Membership Report
“I would like to receive
multicast traffic for
226.1.1.1.”
Multicast Traffic
Destination Address: 226.1.1.1
Multicast Traffic
Destination Address: 226.1.1.1
Multicast Traffic
Destination Address: 226.1.1.1
Leave Group Message
“I don’t want to receive
multicast traffic for
226.1.1.1 anymore.”
2
Group-Specific Query
“Does anyone want to
receive multicast traffic
for 226.1.1.1?”
S0/0
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     655
2.
R1 sends a Group-Speciﬁc Query. Routers do not keep track of hosts that are members of 
the group, only the group memberships that are active. Because H1 has decided to leave 
226.1.1.1, R1 can stop forwarding trafﬁc for 226.1.1.1 on its fa0/0 interface if H1 is the last 
member of 226.1.1.1 on the interface. However, R1 needs to make sure that no other hosts off 
this interface still need to receive packets from group 226.1.1.1. Therefore, R1 sends a Group-
Speciﬁc Query to determine whether any hosts are still members of 226.1.1.1. R1 uses 
226.1.1.1 as the destination address on the packet so that only hosts that are members of 
this group will receive the message and respond. Through this message, R1 is asking any 
remaining hosts on the subnet, “Does anyone want to receive multicast trafﬁc for 226.1.1.1?” 
3.
H3 sends a Membership Report. H3 is still a member of group 226.1.1.1. It hears the Group-
Speciﬁc Query and responds with an IGMPv2 Membership Report to inform the routers on 
the subnet that it is still a member of group 226.1.1.1 and would like to keep receiving trafﬁc 
for group 226.1.1.1. 
IGMPv2 routers repeat the process of Step 2 in this example each time they receive a Leave 
message as shown in Step 1. In the previous example, the router (R1) did not stop sending trafﬁc 
as a result of the process. In the next example, H3 is the only remaining member of group 226.1.1.1 
on the subnet. Assume that now H3 also wants to leave the group, as shown in Figure 19-14. 
Figure 19-14
IGMPv2 Leave Process—No Response to the Group-Speciﬁc Query
NOTE
The Report Suppression mechanism explained earlier for the General Group Query is 
also used for the Group-Speciﬁc Query. 
R1
H1
H2
H3
H4
H5
.1
.2
.10
.10
Fa0/0
Fa0/1
.3
.4
.5
10.2.2.0/24
10.1.1.0/24
2
1
1
Leave Group Message
“I don’t want to receive
multicast traffic for
226.1.1.1 anymore.”
Multicast Traffic
Destination Address: 226.1.1.1
Multicast Traffic
Destination Address: 226.1.1.1
3
“Nobody sent a report for
226.1.1.1 on this interface.
I will stop forwarding
traffic.”
2
Group-Specific Query
“Does anyone want to
receive multicast traffic
for 226.1.1.1?”
S0/0

656     Chapter 19: Introduction to IP Multicasting
The following three steps, referenced in Figure 19-14, describe the sequence of events for the 
IGMPv2 Leave mechanism when H3 leaves:
1.
H3 sends an IGMPv2 Leave Group message. The destination address on the packet is 
224.0.0.2, to inform all routers on the subnet that, “I don’t want to receive multicast trafﬁc for 
226.1.1.1 anymore.”
2.
R1 sends a Group-Speciﬁc Query. R1 receives the Leave Group message from H3. R1 sends 
a Group-Speciﬁc Query to determine whether any hosts are still members of group 226.1.1.1. 
R1 uses 226.1.1.1 as the destination address on the packet so that only hosts that are members 
of this group will receive the message and respond. 
3.
No reports are received, so R1 stops forwarding group trafﬁc. Because there are now no 
remaining members of 226.1.1.1 on the subnet, R1 does not receive a response to the Group-
Speciﬁc Query from any host. As a result, R1 stops forwarding multicasts for 226.1.1.1 out 
its fa0/1 interface. 
Step 3 of this example provides a nice backdrop from which to describe the concepts of a Last 
Member Query Interval and a Last Member Query Count. These values determine how long it 
takes a router to believe that all hosts on a LAN have left a particular group. By default, routers 
use an MRT of 10 (1 second) for Group-Speciﬁc Queries; because a router should receive a 
response to a Group-Speciﬁc Query in that amount of time, the router uses the MRT value as 
the value of the Last Member Query Interval. So, the router uses the following process:
1.
Send a Group-Speciﬁc Query in response to an IGMP Leave.
2.
If no Report is received within the Last Member Query Interval, repeat Step 1.
3.
Repeat Step 1 the number of times deﬁned by the value of the Last Member Query Count.
The Last Member Query Count is the number of consecutive Group-Speciﬁc Queries sent for the 
same group before the router concludes that there are no active members of the group on a subnet. 
The default value for the Last Member Query Count is 2. So, the leave latency is typically less 
than 3 seconds, compared to up to 3 minutes with IGMPv1.
IGMPv2 Querier
IGMPv2 deﬁnes a querier election process that is used when multiple routers are connected to a 
subnet. When IGMPv2 routers start, they each send an IGMPv2 General Query message to the 
well-known All Hosts group 224.0.0.1 using their interface address as the source address. When 
an IGMPv2 router receives a General Query message, it compares the source IP address of the 
General Query message with its own interface address. The router with the lowest IP address on 
the subnet is elected as the IGMP querier. The non-querier routers stop sending their queries but 
KEY 
POINT

Managing Distribution of Multicast Trafﬁc with IGMP     657
monitor how frequently the querier is sending general IGMPv2 Queries. When the elected querier 
does not send a query for two consecutive Query Intervals plus one half of one Query Response 
Interval, it is considered to be dead and a new querier is elected. RFC 2236 refers to this time 
interval as Other Querier Present Interval. The default value for the Other Querier Present Interval 
is 255 seconds, because the default General IGMPv2 Query Interval is 125 seconds and the default 
Query Response Interval is 10 seconds. 
IGMPv1 and IGMPv2 Interoperability
IGMPv2 is designed to be backward compatible with IGMPv1. RFC 2236 deﬁnes some 
special interoperability rules. The next few sections explore the following interoperability 
scenarios:
■
IGMPv2 Host and IGMPv1 Routers—Deﬁnes how an IGMPv2 host should behave in the 
presence of an IGMPv1 router on the same subnet.
■
IGMPv1 Host and IGMPv2 Routers—Deﬁnes how an IGMPv2 router should behave in the 
presence of an IGMPv1 host on the same subnet.
■
IGMPv1 and IGMPv2 Routers—Deﬁnes how an IGMPv2 router should behave in the 
presence of an IGMPv1 router on the same subnet.
IGMPv2 Host and IGMPv1 Routers
When a host sends the IGMPv2 Report with the message type 0x16, which is not deﬁned in 
IGMPv1, a version 1 router would consider 0x16 an invalid message type and ignore it. Therefore, 
a version 2 host must send IGMPv1 Reports when a version 1 router is active. But how does an 
IGMPv2 host detect the presence of an IGMPv1 router on the subnet? 
IGMPv2 hosts determine if the querying router is an IGMPv1 or IGMPv2 host based on the 
value of the MRT ﬁeld of the periodic general IGMP Query. In IGMPv1 Queries, this ﬁeld is 
zero, whereas in IGMPv2 it is nonzero and represents the MRT value. When an IGMPv2 host 
receives an IGMPv1 Query, it knows that the IGMPv1 router is present on the subnet and 
marks the interface as an IGMPv1 interface. The IGMPv2 host then stops sending IGMPv2 
messages.
Whenever an IGMPv2 host receives an IGMPv1 Query, it starts a 400-second Version 1 Router 
Present Timeout timer. This timer is reset whenever it receives an IGMPv1 Query. If the timer 
expires, which indicates that there are no IGMPv1 routers present on the subnet, the IGMPv2 host 
starts sending IGMPv2 messages.

658     Chapter 19: Introduction to IP Multicasting
IGMPv1 Host and IGMPv2 Routers
IGMPv2 routers can easily determine if any IGMPv1 hosts are present on a LAN based on 
whether any hosts send an IGMPv1 Report message (type 0x12) or IGMPv2 Report message 
(type 0x16). Like IGMPv1 routers, IGMPv2 routers send periodic IGMPv2 General Queries. 
An IGMPv1 host responds normally because IGMPv2 General Queries are very similar 
in format to IGMPv1 Queries—except for the second octet, which is ignored by IGMPv1 
hosts. So, an IGMPv2 router will examine all Reports to ﬁnd out if any IGMPv1 hosts exist 
on a LAN.
While an IGMPv2 router knows that an IGMPv1 host is present on a LAN, the router ignores 
Leave messages and the Group-Speciﬁc Queries triggered by receipt of the Leave messages. This 
is necessary because if an IGMPv2 router responds to a Leave Group message with a Group-
Speciﬁc Query, IGMPv1 hosts will not understand it and thus ignore the message. When an 
IGMPv2 router does not receive a response to its Group-Speciﬁc Query, it may erroneously 
conclude that nobody wants to receive trafﬁc for the group and thus stop forwarding it on the 
subnet. So, with one (or more) IGMPv1 hosts listening for a particular group, the router essentially 
suspends the optimizations that reduce leave latency.
IGMPv2 routers continue to ignore Leave messages until the IGMPv1-host-present countdown 
timer expires. RFC 2236 deﬁnes that when IGMPv2 routers receive an IGMPv1 Report, they 
must set an IGMPv1-host-present countdown timer. The timer value should be equal to the 
Group Membership Interval, which defaults to 180 seconds in IGMPv1 and 260 seconds in 
IGMPv2. (Group Membership Interval is a time period during which if a router does not 
receive an IGMP Report, the router concludes that there are no more members of the group on 
a subnet.) 
IGMPv1 and IGMPv2 Routers
RFC 2236 deﬁnes that when IGMPv1 and IGMPv2 routers are present on a subnet, a network 
administrator should manually conﬁgure all IGMPv2 routers to function as IGMPv1
routers.
NOTE
If IGMPv2 hosts are also present on the same subnet, they would send IGMPv2 
Membership Reports. However, IGMPv1 hosts do not understand IGMPv2 Reports and ignore 
them; they do not trigger Report Suppression in IGMPv1 hosts. Therefore, sometimes an 
IGMPv2 router receives both an IGMPv1 Report and an IGMPv2 Report in response to a 
General Query. 

Managing Distribution of Multicast Trafﬁc with IGMP     659
Timers Used in IGMPv1 and IGMPv2
Table 19-4 summarizes important timers used in IGMPv1 and IGMPv2, their usage, and default 
values.
IGMP Version 3
In October 2002, RFC 3376 deﬁned speciﬁcations for IGMPv3. IGMPv3 is a major revision of 
the protocol and is very complex. To use the new features of IGMPv3, last-hop routers have to 
be updated, host operating systems have to be modiﬁed, and applications have to be specially 
designed and written. Unfortunately, at the time of this writing (mid-2005), a very limited number 
Table 19-4
Important Timers Used in IGMPv1 and IGMPv2 
KEY 
POINT
Timer
Usage
Default 
Value for 
IGMPv1
Default 
Value for 
IGMPv2
Query Interval
A time period between General Queries 
sent by a router.
60 seconds
125 seconds
Query Response 
Interval
The maximum response time for hosts to 
respond to the periodic general Queries.
Fixed at 10 
seconds
10 seconds , 
can be 
between .1 
and 25.5 
seconds
Group Membership 
Interval
A time period during which if a router 
doesn’t receive an IGMP Report, the 
router concludes that there are no more 
members of the group on the subnet.
180 seconds
260 seconds
Other Querier 
Present Interval
A time period during which if the 
IGMPv2 non-querier routers don’t 
receive an IGMP Query from the querier 
router, the non-querier routers conclude 
that the querier is dead.
—
255 seconds
Last Member 
Query Interval
The maximum response time inserted by 
IGMPv2 routers into the Group-Speciﬁc 
Queries and the time period between two 
consecutive Group-Speciﬁc Queries sent 
for the same group.
—
1 second
Version 1 Router 
Present Timeout
A time period during which if an 
IGMPv2 host doesn’t receive an IGMPv1 
Query, the IGMPv2 host concludes that 
there are no IGMPv1 routers present and 
starts sending IGMPv2 messages. 
—
400 seconds

660     Chapter 19: Introduction to IP Multicasting
of IGMPv3 applications are available. Therefore, this section does not examine IGMPv3 in detail; 
instead, it summarizes its major features.
In IGMPv1 and IGMPv2, when a host makes a request to join a group, a multicast router forwards 
the trafﬁc for the group to the subnet regardless of the source IP address of the packets. For example, 
assume that a multimedia conference is in session. A group member decides to maliciously disturb 
the session by sending “bogus data or noise” by either talking or sending music to the same group. 
Although multimedia applications allow a user to mute any of the other members, it does not stop 
the unwanted trafﬁc from being delivered to the host. If a group of hackers decides to ﬂood 
a company’s network with bogus high-bandwidth data using the same multicast group address that 
the company’s employees have joined, it can create a DoS attack for the company by overwhelming 
low-speed links. Neither IGMPv1 nor IGMPv2 has a mechanism to prevent such an attack.
IGMPv3 allows hosts to ﬁlter incoming trafﬁc based on the source IP addresses from which it is 
willing to receive packets, through a feature called Source-Speciﬁc Multicast (SSM). IGMPv3 is 
designed to support source ﬁltering. It allows a host to indicate interest in receiving packets only 
from speciﬁc source addresses, or from all but speciﬁc source addresses, sent to a particular 
multicast address. Figure 19-15 shows basic operation of the IGMPv3 Membership Report process. 
Figure 19-15
IGMPv3 Membership Report
In Figure 19-15, the multicast trafﬁc for the group 226.1.1.1 is available from two sources. 
R1 receives trafﬁc from both the sources. H1 prepares an IGMPv3 Membership Report using 
the destination address 224.0.0.22, specially assigned by IANA for the IGMPv3 Membership 
Report. The message type is 0x22 (deﬁned in RFC 3376), with a note “Source–INCLUDE—
209.165.201.2,” which means, “I would like to join multicast group 226.1.1.1, but only if the 
group trafﬁc is coming from the source 209.165.201.2.”
R1
H1
Forward packets to
226.1.1.1, but only if
sourced from
209.165.201.2.
The
Internet
R3
R2
Multicast Traffic
Destination Address: 226.1.1.1
Source Address: 209.165.201.2
Multicast Traffic
Destination Address: 226.1.1.1
Source Address: 209.165.202.130
IGMPv3 MeMbpsership Report
Join: 226.1.1.1
Source: INCLUDE – 209.165.201.2

Managing Distribution of Multicast Trafﬁc with IGMP     661
How does a host learn group source addresses? A lot of work remains to be done by application 
designers to develop SSM applications. Cisco has designed URL Rendezvous Directory (URD), 
and IGMP v3lite to use the new features of IGMPv3 until IGMPv3 applications are available and 
operating systems are updated. A detailed discussion of URD and IGMP v3lite is beyond the scope 
of this book. IGMPv3 is compatible with IGMPv1 and IGMPv2.
Comparison of IGMPv1, IGMPv2, and IGMPv3
Table 19-5 compares the important features of IGMPv1, IGMPv2, and IGMPv3.
NOTE
The following URL provides more information on URD and IGMP v3lite:
http://www.cisco.com/en/US/products/sw/iosswrel/ps1834/
products_feature_guide09186a008008048a.html
Table 19-5
Comparison of IGMPv1, IGMPv2, and IGMPv3 
KEY 
POINT
Feature
IGMPv1
IGMPv2
IGMPv3
First Octet Value for the 
Query Message
0x11
0x11
0x11
Group Address for the 
General Query
0.0.0.0
0.0.0.0
0.0.0.0
Destination Address for the 
General Query
224.0.0.1
224.0.0.1
224.0.0.1
Default Query Interval
60 seconds
125 seconds 
125 seconds
First Octet Value for the 
Report
0x12
0x16
0x22
Group Address for the 
Report
Joining multicast 
group address
Joining multicast 
group address
Joining multicast group 
address and source address
Destination Address 
for the Report
Joining multicast 
group address
Joining multicast 
group address
224.0.0.22
Is Report Suppression 
Mechanism Available?
Yes
Yes
No
Can Maximum Response 
Time Be Conﬁgured?
No, ﬁxed at 10 
seconds
Yes, 0 to 25.5 
seconds
Yes, 0 to 53 minutes
Can a Host Send a Leave 
Group Message?
No
Yes
Yes
Destination Address for the 
Leave Group Message
—
224.0.0.2
224.0.0.22
continues

662     Chapter 19: Introduction to IP Multicasting
Multicast Listener Discovery Protocol
RFC 2710 deﬁnes speciﬁcations for the Multicast Listener Discovery (MLD) protocol. MLD is 
derived from IGMPv2 and is designed for IPv6. The operation of MLD is similar to IGMPv2. The 
major differences between IGMPv2 and MLD are as follows:
■
All the multicast devices on a subnet use a special IPv6 link-local address as their source 
address in their communication to other multicast devices. The use of the link-local source 
address prevents the MLD packet from traveling beyond the local link.
■
In MLD, when a host wants to leave a group, it sends a Done message. The Done message is 
similar to the IGMPv2 Leave message. It is addressed to the all-routers IPv6 link-local scope 
address, FF02::2.
■
In MLD, the router Queries are called Multicast Listener Queries. The General Queries are 
addressed to the all-nodes IPv6 link-local scope address, FF02::1. When a router receives a 
Done message, it sends a Multicast-Address-Speciﬁc Query. Its function is similar to 
IGMPv2 Group-Speciﬁc Query. 
LAN Multicast Optimizations
This ﬁnal major section of this chapter introduces the basics of three tools that optimize the ﬂow 
of multicast over a LAN. Speciﬁcally, this section covers the following topics: 
■
Cisco Group Management Protocol (CGMP)
Feature
IGMPv1
IGMPv2
IGMPv3
Can a router send a 
Group-Speciﬁc Query?
No
Yes
Yes
Can a Host Send 
Source- and Group-
Speciﬁc Reports?
No
No
Yes
Can a Router Send 
Source- and Group-
Speciﬁc Queries? 
No
No
Yes
Rule for Electing 
a Querier
None—depends 
on multicast 
routing protocol
Router with the 
lowest IP address 
on the subnet
Router with the lowest IP 
address on the subnet
Compatible with Other 
Versions of IGMP?
No
Yes, only with 
IGMPv1
Yes, with both IGMPv1 
and IGMPv2
Table 19-5
Comparison of IGMPv1, IGMPv2, and IGMPv3 (Continued)

LAN Multicast Optimizations     663
■
IGMP snooping
■
Router-Port Group Management Protocol (RGMP)
Cisco Group Management Protocol
IGMP helps routers to determine how to distribute multicast trafﬁc. However, IGMP works at Layer 3, 
and switches do not understand IGMP messages. Switches, by default, ﬂood multicast trafﬁc to 
all the hosts in a broadcast domain, which wastes bandwidth. Figure 19-16 illustrates the problem.
Figure 19-16
Switches Flood Multicast Trafﬁc
Hosts H1, H2, H3, H4, and R1 are all in the same broadcast domain of VLAN 5. The following 
three steps, referenced in Figure 19-16, describe the sequence of events when H3 sends an IGMP 
Join message:
1.
H3 sends an IGMP Join message for group 226.6.6.6.
2.
R1 forwards the group trafﬁc to SW1. The destination MAC address on the frame is 
0x0100.5e06.0606. SW1 cannot ﬁnd this address in its CAM table because it is never used by 
any device as a source address. Therefore, SW1 starts forwarding the group trafﬁc to H1, H2, 
and SW2 because the group trafﬁc is for VLAN 5. Similarly, SW2 starts forwarding the group 
trafﬁc to H3 and H4.
3.
All the hosts, H1 to H4, receive the group trafﬁc, but only H3 requested it. H3 requested the 
group trafﬁc and has started receiving it. However, H1, H2, and H4 did not ask for the group 
trafﬁc and they are ﬂooded by switches with the group trafﬁc.
In this illustration, only four hosts are shown in the broadcast domain of VLAN 5. What happens 
if a broadcast domain is ﬂat and has hundreds of users? If a single host joins a multicast group, all 
SW1
SW2
R1
H1
Why am I getting
the group traffic?
Group
226.6.6.6
H3
H2
H4
3
Why am I getting
the group traffic?
3
Why am I getting
the group traffic?
3
1
2
2
2
2
2
IGMP Join
226.6.6.6.
VLAN 5
Trunk
VLAN 5
VLAN 5
VLAN 5
VLAN 5
IGMP Join 226.6.6.6
Multicast to 226.6.6.6

664     Chapter 19: Introduction to IP Multicasting
the hosts would be ﬂooded with the group trafﬁc whether they have requested the group trafﬁc or 
not. The goal of multicasting is to deliver the group trafﬁc to only those hosts that have requested 
it and maximize the use of bandwidth.
There are two popular methods for helping Layer 2 switches determine how to distribute the 
multicast trafﬁc to hosts: 
■
CGMP, which is Cisco proprietary and discussed throughout the rest of this section.
■
IGMP snooping, discussed in the next section.
CGMP, a Layer 2 protocol, is conﬁgured on both a Cisco router and switches and permits the 
router to communicate Layer 2 information it has learned from IGMP to switches. A multicast 
router knows the MAC addresses of the multicast hosts, and the groups to which they listen, based 
on IGMP communication with hosts. The goal of CGMP is to enable the router to communicate 
this information through CGMP messages to switches so that switches can dynamically modify 
their CAM table entries. Only the routers produce CGMP messages, while switches only listen to 
the CGMP messages. The destination address on the CGMP messages is always the well-known 
CGMP multicast MAC address 0x0100.0cdd.dddd. The use of the multicast destination MAC 
address on the CGMP messages forces switches to ﬂood the message through all the ports so that 
all the switches in a network receive the CGMP messages. The important information in the 
CGMP messages is one or more pairs of MAC addresses:
■
Group Destination Address (GDA)
■
Unicast Source Address  (USA)
The following ﬁve steps describe the general process of CGMP. Later, these steps are explained 
using a detailed example.
1.
When a CGMP-capable router gets connected to the switch, it sends a CGMP Join message 
with the GDA set to zero and the USA set to its own MAC address. The CGMP-capable 
switch now knows that a multicast router is connected to the port on which it received the 
router’s CGMP message. The router repeats the message every 60 seconds. A router can also 
tell the switch that it no longer participates in CGMP by sending a CGMP Leave message with 
the GDA set to zero and the USA set to its own MAC address.
2.
When a host joins a group, it sends an IGMP Join message. Normally, a multicast router 
examines only Layer 3 information in the IGMP Join message and the router does not have 
to process any Layer 2 information. However, when CGMP is conﬁgured on a router, the 
router also examines the Layer 2 destination and source MAC addresses of the IGMP Join 
message. The source address is the unicast MAC address of the host that sent the IGMP Join 
message. The router then generates a CGMP Join message that includes the multicast MAC 
address associated with the multicast IP address (to the GDA ﬁeld of the CGMP join) and the 

LAN Multicast Optimizations     665
unicast MAC address of the host (to the USA ﬁeld of the CGMP message). The router sends 
the CGMP Join message using the well-known CGMP multicast MAC address 
0x0100.0cdd.dddd as the destination address.
3.
When switches receive a CGMP Join message, they search in their CAM tables for the port 
number associated with the host MAC address listed in the USA ﬁeld. Switches create a new 
CAM table entry (or use an existing entry if it was already created before) for the multicast 
MAC address listed in the GDA ﬁeld of the CGMP Join message, add the port number 
associated with the host MAC address listed in the USA ﬁeld to the entry, and forward the 
group trafﬁc on the port. 
4.
When a host leaves a group, it sends an IGMP Leave message. The router learns the host’s 
unicast MAC address (USA) and the IP multicast group it has just left. Because the Leave 
messages are sent to the All Multicast Routers MAC address 0x0100.5e00.0002 and not to the 
multicast group address the host has just left, the router calculates the multicast MAC address 
(GDA) from the IP multicast group the host has just left. The router then generates a CGMP 
Leave message, copies the multicast MAC address it has just calculated in the GDA ﬁeld and 
unicast MAC address in the USA ﬁeld of the CGMP Leave message, and sends it to the well-
known CGMP multicast MAC address.
5.
When switches receive a CGMP Leave message, they again search for the port number 
associated with the host MAC address listed in the USA ﬁeld. Switches remove this port from 
the CAM table entry for the multicast MAC address listed in the GDA ﬁeld of the CGMP 
Leave message and stop forwarding the group trafﬁc on the port.
Thus, CGMP helps switches send group trafﬁc to only those hosts that want it, which helps to 
avoid waste bandwidth. 
Figure 19-17, 19-18, and 19-19 show a complete example of how routers and switches use CGMP in 
response to a host joining and then leaving a group. Figure 19-17 begins the example by showing a 
router’s reaction to an IGMP Report, which is to send an CGMP Join to the switches on a LAN. The 
following two steps, referenced in Figure 19-17, describe the sequence of events when H3 sends an 
IGMP Join message:
1.
H3 sends an IGMP Join message for 226.6.6.6. At Layer 2, H3 uses 0x0100.5e06.0606 (the 
multicast MAC address associated with 226.6.6.6) as the destination address of a frame, and 
its own BIA 0x0006.7c11.1103 as the source MAC address.
2.
R1 generates a CGMP Join message. When a CGMP-capable router receives an IGMP Join 
message, it generates a Layer 2 CGMP Join message. The destination address on the frame is 
the well-known multicast MAC address 0x0100.0cdd.dddd, which is understood only by 
Cisco switches but is forwarded by all switches. R1 sets the GDA to the group MAC address 
0x0100.5e06.0606 and sets the USA to H3’s MAC address 0x0006.7c11.1103, which 
communicates to switches that “A host with the USA 0x0006.7c11.1103 has requested 

666     Chapter 19: Introduction to IP Multicasting
multicast trafﬁc for the GDA 0x0100.5e06.0606, so map your CAM tables accordingly.” This 
message is received by both switches.
Figure 19-17
CGMP Join Message Process
SW1 and SW2 search their CAM table entries and ﬁnd that a host with the USA 
0x0006.7c11.1103 is located on their port number fa0/20 and fa0/3, respectively. Figure 19-18 
shows that SW1 and SW2 have mapped the GDA 0x0100.5e06.0606 to their port numbers fa0/20 
and fa0/3, respectively.
Figure 19-18
Switches Map GDA to Port Numbers and Don’t Flood All the Hosts in a Broadcast Domain
SW1
SW2
R1
H1
H3
H2
H4
1
2
IGMP Join 266.6.6.6
DMAC: 0100.5e06.0606
SMAC: 0006.7c11.1103
VLAN 5
Trunk
VLAN 5
Fa0/8
Fa0/4
Fa0/3
Fa0/1
Fa0/2
Fa0/20
Fa0/20
VLAN 5
VLAN 5
VLAN 5
2
2
CGMP Join Message:
“Map GDA 0100.5e06.0606
to USA 0006.7c11.1103.”
SW1
SW2
R1
H1
H3
H2
H4
M
M
VLAN 5
Trunk
VLAN 5
Fa0/8
Fa0/4
Fa0/3
USA: 0006.7c11.1103
GDA: 0100.5e06.0606
USA: 0006.7c11.1103
GDA: 0100.5e06.0606
Fa0/1
Fa0/2
Fa0/20
Fa0/20
VLAN 5
VLAN 5
VLAN 5
M
Group
226.6.6.6
M = Multicast Traffic for GDA 0x0100.5e06.0606
KEY 
POINT

LAN Multicast Optimizations     667
When R1 forwards multicast trafﬁc with GDA 0x0100.5e06.0606 to SW1, as shown in Figure 19-18, 
SW1 searches its CAM table and notices that this trafﬁc should be forwarded only on port fa0/20. 
Therefore, only SW2 receives the group trafﬁc. Similarly, SW2 searches its CAM table and 
forwards the group trafﬁc only on its port fa0/3, and only H3 receives the group trafﬁc. 
CGMP optimizes the forwarding of IGMP trafﬁc as well. Although not shown in the ﬁgures, 
assume that H1 sends an IGMP Join message for 226.6.6.6. R1 will send another CGMP Join 
message, and SW1 will add the GDA 0x0100.5e06.0606 to its port fa0/1 also. When a router sends 
IGMP General Queries, switches forward them to host members who have joined any group, for 
example, H1 and H3. When hosts send IGMP Reports, switches forward them to the members of 
the group and the router. 
The ﬁnal step of the example, shown in Figure 19-19, demonstrates what happens when H3 leaves 
the group. Note that for this example, H1 has also joined the same multicast group.
Figure 19-19
CGMP Leave Message Process
The following three steps, referenced in Figure 19-19, describe the sequence of events when H3 
sends an IGMP Leave message:
1.
H3 sends an IGMP Leave message for 226.6.6.6. At Layer 2, H3 uses the All Multicast 
Routers MAC address 0x0100.5e00.0002 as the destination address and its own BIA 
0x0006.7c11.1103 as the source address.
2.
R1 generates a CGMP Leave message. When a CGMP-capable router receives an IGMP 
Leave message, it generates a Layer 2 CGMP Leave message. The destination address on the 
frame is the well-known multicast MAC address 0x0100.0cdd.dddd. R1 calculates the group 
SW1
SW2
R1
H1
H3
H2
H4
1
3
3
2
IGMP Leave 226.6.6.6
DMAC: 0100.5e00.0002
SMAC: 0006.7c11.1103
VLAN 5
Trunk
VLAN 5
Fa0/8
Fa0/4
Fa0/3
Fa0/1
Fa0/2
Fa0/20
Fa0/20
VLAN 5
VLAN 5
VLAN 5
2
2
CGMP Leave Message:
“Delete GDA 0100.5e06.0606
for USA 0006.7c11.1103.”
USA: 0006.7c11.1103
3
USA: 0006.7c11.1103
USA: 0006.7c11.1101
GDA: 0100.5e06.0606
Group
226.6.6.6

668     Chapter 19: Introduction to IP Multicasting
MAC address 0x0100.5e06.0606 from the Layer 3 address 226.6.6.6 and sets the GDA to that 
value. It sets the USA to H3’s MAC unicast MAC address of 0x0006.7c11.1103. This Leave 
message communicates to switches that, “A host with the USA 0x0006.7c11.1103 does not 
want to receive multicast trafﬁc for GDA 0x0100.5e06.0606, so update your CAM tables 
accordingly.” This message is received by both switches.
3.
Switches update their CAM table entries. SW1 and SW2 search their CAM table entries and 
ﬁnd that a host with the USA 0x0006.7c11.1103 is located on their port numbers fa0/20 and 
fa0/3, respectively. Figure 19-20 shows that SW1 and SW2 have removed the GDA 
0x0100.5e06.0606 from their port numbers fa0/20 and fa0/3, respectively.
H1 is still a member of the group 266.6.6.6, so R1 keeps forwarding the trafﬁc with GDA 
0x0100.5e06.0606 to SW1, as shown in Figure 19-19. SW1 searches its CAM table and ﬁnds that 
this trafﬁc should be forwarded only on port fa0/1. Therefore, only H1 receives the group trafﬁc. 
Continuing the example further, now assume that H1 sends an IGMP Leave message for 226.6.6.6. 
R1 will send a Group-Speciﬁc Query for 226.6.6.6. Because no host is currently a member of this 
group, R1 does not receive any IGMP Membership Reports for the group. R1 sends the CGMP 
Leave message with the GDA set to the group MAC address and the USA set to 0. This message 
communicates to switches that, “No hosts are interested in receiving the multicast group trafﬁc for 
the MAC address 0x0100.5e06.0606, so remove all the CAM table entries for this group.” 
Table 19-6 summarizes the possible combinations of the GDA and the USA in CGMP messages 
and the meanings of each. The ﬁrst ﬁve messages have been discussed.
The last Leave message in Table 19-6, Delete All Groups, is used by the router for special 
maintenance functions. For example, when the clear ip cgmp command is entered at the router 
for clearing all the CGMP entries on the switches, the router sends the CGMP Leave message with 
GDA set to zero and USA set to zero. When switches receive this message, they delete all group 
entries from the CAM tables.
Table 19-6
CGMP Messages
KEY 
POINT
Type
Group Destination 
Address
Unicast Source 
Address
Meaning
Join
Group MAC
Host MAC
Add USA port to group
Leave
Group MAC
Host MAC
Delete USA port from group
Join
Zero
Router MAC
Learn which port connects to the 
CGMP router
Leave
Zero
Router MAC
Release CGMP router port
Leave
Group MAC
Zero
Delete the group from the CAM
Leave
Zero
Zero
Delete all groups from the CAM

LAN Multicast Optimizations     669
IGMP Snooping
What happens if your network has non-Cisco switches? You cannot use CGMP because it is Cisco 
proprietary. IGMP snooping can be used for a multivendor switched network to control 
distribution of multicast trafﬁc at Layer 2. IGMP snooping requires the switch software to 
eavesdrop on the IGMP conversation between multicast hosts and the router. The switch examines 
IGMP messages and learns the location of multicast routers and group members. 
The following three steps describe the general process of IGMP snooping. Later, these steps are 
explained in detail. 
1.
To detect whether multiple routers are connected to the same subnet, Cisco switches listen to 
the following routing protocol messages to determine on which ports routers are connected:
— IGMP General Query message with GDA 01-00-5e-00-00-01
— OSPF messages with GDA 01-00-5e-00-00-05 or 01-00-5e-00-00-06
— Protocol Independent Multicast (PIM) version 1 and Hot Standby Routing Protocol 
(HSRP) Hello messages with GDA 01-00-5e-00-00-02
— PIMv2 Hello messages with GDA 01-00-5e-00-00-od
— Distance Vector Multicast Routing Protocol (DVMRP) Probe messages with GDA 
01-00-5e-00-00-04
As soon as the switch detects router ports in a VLAN, they are added to the port list of all 
GDAs in that VLAN.
2.
When the switch receives an IGMP Report on a port, its CPU looks at the GDA, creates an 
entry in the CAM table for the GDA, and adds the port to the entry. The router port is also 
added to the entry. The group trafﬁc is now forwarded on this port and the router port. If other 
hosts send their IGMP Reports, the switch adds their ports to the group entry in the CAM table 
and forwards the group trafﬁc on these ports. 
3.
Similarly, when the switch receives an IGMP Leave message on a port, its CPU looks at the 
GDA, removes the port from the group entry in the CAM table, and does not forward the 
group trafﬁc on the port. The switch checks whether this is the last nonrouter port for the 
GDA. If it is not the last nonrouter port for the GDA, which means there is at least one host 
in the VLAN that wants the group trafﬁc, the switch discards the Leave message; otherwise, 
it sends the Leave message to the router.
Thus, IGMP snooping helps switches send group trafﬁc to only those hosts that want it and helps 
to avoid wasted bandwidth. 
NOTE
Many Cisco switches support IGMP snooping, including the 3550 switches used in the 
CCIE Routing and Switching lab exam.
KEY 
POINT

670     Chapter 19: Introduction to IP Multicasting
For efﬁcient operations, IGMP snooping requires hardware ﬁltering support in a switch so that it 
can differentiate between IGMP Reports and actual multicast trafﬁc. The switch CPU needs to see 
IGMP Report messages (and Multicast Routing Protocol messages) because the IGMP snooping 
process requires the CPU. However, the forwarding of multicast frames does not require the CPU, 
instead requiring only a switch’s forwarding ASICs. Older switches, particularly those that 
have no Layer 3 awareness, could not identify a packet as IGMP; these switches would have 
overburdened their CPUs by having to send all multicasts to the CPU. Most of today’s more 
modern switches support enough Layer 3 awareness to recognize IGMP, so that IGMP snooping 
does not overburden the CPU. 
Figure 19-20 shows an example of the IGMP snooping process. 
Figure 19-20
Joining a Group Using IGMP Snooping and CAM Table Entries
The following three steps, referenced in Figure 19-20, describe the sequence of events when H1 
and H2 send IGMP Join messages:
1.
H1 sends an IGMP Join message for 226.6.6.6. At Layer 2, H1 uses the multicast MAC 
address 0x0100.5e06.0606 (the MAC for group 226.6.6.6) as the destination address and uses 
its own BIA 0x0006.7c11.1101 as the source address. SW1 receives the packet on its
NOTE
CGMP was a popular Cisco switch feature in years past because IGMP 
implementations on some switches would have required too much work. Today, many of the 
Cisco current switch product offerings do not even support CGMP, in deference to IGMP 
snooping.
SW1
CAM Table
R1
H1
Group
226.6.6.6
H2
1
1
2
IGMP Join
226.6.6.6
2
IGMP Join
226.6.6.6
3
Multicast Traffic
GDA: 0x0100.5e06.0606
VLAN 5
VLAN 5
VLAN 5
Fa0/8
Fa0/2
Fa0/1
Layer 3-Aware Switch
Destination Address
Type of Packet
Ports
01-00-5e-06-06-06
L3-IGMP
0
01-00-5e-06-06-06
Non-IGMP
1, 8
01-00-5e-06-06-06
L3-IGMP
0
01-00-5e-06-06-06
Non-IGMP
1, 2, 8
KEY 
POINT

LAN Multicast Optimizations     671
fa0/1 port and, noticing that it is an IGMP packet, forwards the packet to the switch CPU. The 
CPU uses the information to set up a multicast forwarding table entry, as shown in the CAM 
table that includes the port numbers 0 for CPU, 1 for H1, and 8 for R1. Notice that the 
CAM table lists two entries for the same destination MAC address 0x0100.5e06.0606—one 
for the IGMP frames for port 0, and the other for the non-IGMP frames for ports 1 and 8. 
The CPU of the switch instructs the switching engine to not forward any non-IGMP frames 
to port 0, which is connected to the CPU. 
2.
H2 sends an IGMP Join message for 226.6.6.6. At Layer 2, H2 uses the multicast MAC 
address 0x0100.5e06.0606 as the destination address and uses its own BIA 
0x0006.7c11.1102 as the source address. SW1 receives the packet on its fa0/2 port, and its 
switching engine examines the packet. The process of analyzing the packet, as described in 
Step 1, is repeated and the CAM table entries are updated as shown. 
3.
Router R1 forwards the group trafﬁc. R1 is receiving multicast trafﬁc for group 226.6.6.6 and 
starts forwarding the trafﬁc to SW1. SW1 starts receiving the multicast trafﬁc on its port fa0/8. 
The switching engine would examine the packet and determine that this is a non-IGMP packet, 
search its CAM table, and determine that it should forward the packet on ports fa0/1 and fa0/2. 
Compared to CGMP, IGMP snooping is less efﬁcient in maintaining group information. In Figure 
19-21, when R1 periodically sends IGMP General Queries to the All Hosts group, 224.0.0.1 (GDA 
0x0100.5e00.0001), SW1 intercepts the General Queries and forwards them through all ports in 
VLAN 5. In CGMP, due to communication from the router through CGMP messages, the switch 
knows exactly on which ports multicast hosts are connected and, therefore, forwards IGMP 
General Queries only on those ports. Also, in IGMP snooping, when hosts send IGMP Reports, 
the switch must intercept them to maintain GDA information in the CAM table. As a result, the 
hosts do not receive each other’s IGMP Report, which breaks the Report Suppression mechanism 
and forces each host to send an IGMP Report. However, the switch sends only one IGMP Report 
per group to the router. In CGMP, the switch does not have to intercept IGMP Reports, because 
maintaining group information in the switch is not dependent on examining IGMP packets from 
hosts; instead, the switch uses CGMP messages from the router. 
Figure 19-21 shows the Leave process for IGMP snooping. 
The following three steps, referenced in Figure 19-21, describe the sequence of events when H1 
and H2 send IGMP Leave messages:
1.
H1 sends an IGMP Leave message for 226.6.6.6, but SW1 does not forward it to router R1 in 
this case. At Layer 2, H1 uses the All Multicast Routers MAC address 0x0100.5e00.0002 as 
the destination address and uses its own BIA 0x0006.7c11.1101 as the source address. 
SW1 captures the IGMP Leave message on its fa0/1 port and its switching engine examines the 
packet. The switch sends an IGMP General Query on port fa0/1 to determine whether there 
are any other hosts that are members of this group on the port. (This feature was designed to 
protect other hosts if they are connected to the same switch port using a hub.) If an IGMP 

672     Chapter 19: Introduction to IP Multicasting
Report is received on port fa0/1, the switch discards the Leave message received from H1. 
Because, in this example, there is only one host connected to port fa0/1, the switch does not 
receive any IGMP Report and deletes the port fa0/1 from the CAM table entry, as shown in 
Figure 19-22. H2 connected with port fa0/2 is still a member of the group and its port number 
is in the CAM table entry. Hence, SW1 does not forward the IGMP Leave message to the 
router. 
2.
Router R1 continues forwarding the group trafﬁc. R1 continues forwarding multicast trafﬁc 
for group 226.6.6.6 to SW1 because R1 did not even know that H1 left the group. Based on 
the updated CAM table entry for the group shown in Figure 19-22, SW1 now forwards this 
trafﬁc only on port fa0/2.
3.
H2 sends an IGMP Leave message for 226.6.6.6, and SW1 does forward it to router R1 in this 
case. At Layer 2, H2 uses the All Multicast Routers MAC address 0x0100.5e00.0002 as the 
destination address and uses its own BIA 0x0006.7c11.1102 as the source address. Again, 
SW1 captures the IGMP Leave message on its fa0/2 port and its switching engine examines 
the packet. The switch sends an IGMP General Query on port fa0/2 to determine whether there 
are any other hosts that are members of this group on the port. Because, in this example, 
there is only one host connected to port fa0/2, the switch does not receive any IGMP Report 
and deletes the port fa0/2 from the CAM table entry. After SW1 deletes the port, it realizes 
that this was the last nonrouter port for the CAM table entry for Ox0100.5e06.0606. 
Therefore, SW1 deletes the CAM table entry for this group, as shown in Figure 19-22, and 
forwards the IGMP Leave message to R1. R1 sends an IGMP Group-Speciﬁc Query and, 
when no hosts respond, stops forwarding trafﬁc for 226.6.6.6 toward SW1. 
Figure 19-21
Leaving a Group Using IGMP Snooping and CAM Table Entries
SW1
CAM Table
R1
H1
Group
226.6.6.6
H2
1
1
3
IGMP Leave
226.6.6.6
3
2
Multicast Traffic
GDA: 0x0100.5e06.0606
IGMP Leave
226.6.6.6
VLAN 5
VLAN 5
VLAN 5
Fa0/8
Fa0/2
Fa0/1
Layer 3-Aware Switch
Destination Address
Type of Packet
Ports
01-00-5e-06-06-06
L3-IGMP
0
01-00-5e-06-06-06
Non-IGMP
2, 8
01-00-5e-06-06-06
L3-IGMP
0

LAN Multicast Optimizations     673
IGMP snooping becomes more complicated when multiple multicast routers are used and many 
LAN switches are interconnected via high-speed trunks. Also, CGMP and IGMP snooping control 
distribution of multicast trafﬁc only on ports where hosts are connected. They do not provide any 
control mechanism for ports where routers are connected. The next section brieﬂy examines how 
Router-Port Group Management Protocol (RGMP) helps switches control distribution of 
multicast trafﬁc on ports where routers are connected.
Router-Port Group Management Protocol
RGMP is a Layer 2 protocol that enables a router to communicate to a switch which multicast 
group trafﬁc the router does and does not want to receive from the switch. By being able to restrict 
the multicast destinations that a switch forwards to a router, a router can reduce its overhead. In 
fact, RGMP was designed to help routers reduce overhead when they are attached to high-speed 
LAN backbones.
Although RGMP is Cisco proprietary, oddly enough it cannot work concurrently with Cisco-
proprietary CGMP. When RGMP is enabled on a router or a switch, CGMP is silently disabled; if 
CGMP is enabled on a router or a switch, RGMP is silently disabled. Note also that while it is 
proprietary, RGMP is published as informational RFC 3488.
RGMP works well in conjunction with IGMP snooping. In fact, IGMP snooping would typically 
learn the ports of all multicast routers by listening for IGMP and multicast routing protocol trafﬁc. 
In some cases, some routers may not want all multicast trafﬁc, so RGMP provides a means to 
reduce the unwanted trafﬁc. The subtle key to the need for RGMP when using IGMP snooping is 
to realize this important fact about IGMP snooping:
IGMP snooping helps switches control distribution of multicast trafﬁc on ports where 
multicast hosts are connected, but it does not help switches control distribution of 
multicast trafﬁc on ports where multicast routers are connected. 
For example, consider the simple network shown in Figure 19-22. SW2 has learned of routers 
R3 and R4 with IGMP snooping, so it forwards multicasts sent to all multicast groups out to both 
R3 and R4.
As you can see from Figure 19-22, R3 really needs to receive trafﬁc only for group A, and 
R4 needs to receive trafﬁc only for group B. However, IGMP snooping causes the switch to 
forward all multicast packets to each router. To combat that problem, RGMP can be used by a 
router to tell the switch to only forward packets for particular multicast groups. For example, 
Figure 19-23 shows the same network as Figure 19-22, but with RGMP snooping. In this case, 
RGMP Join messages are enabled in both the routers and the switch, with the results shown in 
Figure 19-23.

674     Chapter 19: Introduction to IP Multicasting
Figure 19-22
IGMP Snooping Without RGMP 
Figure 19-23
More Efﬁcient Forwarding with RGMP Added to IGMP Snooping
Figure 19-23 shows the following three main steps, with the ﬁrst step really showing the RGMP 
function with the RGMP Join message. The Join message allows a router to identify the groups 
for which the router wants to receive trafﬁc.
1.
R3 sends an RGMP Join for group A, and R4 sends an RGMP Join for group B. As a result, 
SW2 knows to forward multicasts for group A only to R3, and for group B only to R4.
Source for
Group B
Receiver for
Group A
Source for
Group A
SW2
B
R3
R4
A
A
B
A
A
B
H3
Receiver for
Group B
B
H4
IGMP
Snooping
Source for
Group B
Receiver for
Group A
Source for
Group A
SW2
B
R3
R4
A
A
A
B
H3
Receiver for
Group B
B
H4
IGMP
Snooping
2
3
3
1
2
RGMP
Join
Group A
1
RGMP
Join
Group B

LAN Multicast Optimizations     675
2.
The sources send a packet to groups A and B, respectively.
3.
SW2 forwards the trafﬁc for group A only to R3, and the packets for group B only to R4. 
While Figure 19-23 shows just one example and one type of RGMP message, RGMP includes four 
different messages. All the RGMP messages are generated by a router and are sent to the multicast 
IP address 224.0.0.25. The following list describes the four RGMP messages: 
■
When RGMP is enabled on a router, the router sends RGMP Hello messages by default every 
30 seconds. When the switch receives an RGMP Hello message, it stops forwarding all 
multicast trafﬁc on the port on which it received the Hello message.
■
When the router wants to receive trafﬁc for a speciﬁc multicast group, the router sends an 
RGMP Join G message, where G is the multicast group address, to the switch. When the 
switch receives an RGMP Join message, it starts forwarding the requested group trafﬁc on the 
port on which it received the Hello message.
■
When the router does not want to receive trafﬁc for a formerly RGMP-joined speciﬁc 
multicast group, the router sends an RGMP Leave G message, where G is the multicast group 
address, to the switch. When the switch receives an RGMP Leave message, it stops 
forwarding the group trafﬁc on the port on which it received the Hello message.
■
When RGMP is disabled on the router, the router sends an RGMP Bye message to the switch. 
When the switch receives an RGMP Bye message, it starts forwarding all IP multicast trafﬁc 
on the port on which it received the Hello message.
NOTE
The following URL provides more information on RGMP:
http://www.cisco.com/en/US/products/hw/switches/ps700/
products_tech_note09186a008011c11b.shtml
KEY 
POINT

676     Chapter 19: Introduction to IP Multicasting
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” section of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with a Key Point icon.
Table 19-7 lists some of the key protocols and facts regarding IGMP. 
Conﬁguring multicasting on a Cisco router is relatively easy. You must ﬁrst conﬁgure a multicast 
routing protocol on a Cisco router. The multicast routing protocols are covered in the next chapter, 
which also presents all the important conﬁguration commands in the “Foundation Summary” 
section.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Table 19-7
Protocols and Standards for Chapter 19
Name
Standard
GLOP Addressing in 233/8
RFC 2770
Administratively Scoped IP Multicast
RFC 2365
IGMP version 0
RFC 988
Host Extensions for IP Multicasting [IGMPv1]
RFC 1112
Internet Group Management Protocol, Version 2
RFC 2236
Internet Group Management Protocol, Version 3
RFC 3376
Multicast Listener Discovery (MLD) for IPv6
RFC 2710
Cisco Systems Router-Port Group Management Protocol (RGMP)
RFC 3488

References in This Chapter     677
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
multicasting, multicast address range, multicast address structure, permanent 
multicast group, source-speciﬁc addresses, GLOP addressing, administratively 
scoped addresses, transient multicast group, multicast MAC address, joining a 
group, IGMP, IGMPv1 Host Membership Query, MRT, IGMPv1 Host Membership 
Report, Report Suppression mechanism, IGMPv2 Host Membership Query, 
IGMPv2 Leave, IGMPv2 Group-Speciﬁc Query, IGMPv2 Host Membership 
Report, SSM, IGMPv3 Host Membership Query, IGMPv3 Host Membership 
Report, querier election, MLD, CGMP, IGMP snooping, RGMP
Further Reading
Beau Williamson, Developing IP Multicast Networks, Volume I, Cisco Press, 2000.
References in This Chapter
■
Beau Williamson, Developing IP Multicast Networks, Volume I, Cisco Press, 2000 
(Chapter 3):
— IGMPv1 Querier, page 61
— IGMP Version 2, page 64
— IGMPv1–IGMPv2 Interoperability, pages 73–76
■
Cisco Systems, Inc.:
— Multicast in a Campus Network: CGMP and IGMP Snooping (Document ID 
10559), http://www.cisco.com/en/US/products/hw/switches/ps700/
products_tech_note09186a00800b0871.shtml#snooping_ov
— Router-Port Group Management Protocol, http://www.cisco.com/univercd/cc/td/
doc/product/software/ios120/120newft/120limit/120s/120s10/dtrgmp.htm

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■IP Multicast
— Distribution Trees
— PIM-SM Mechanics
— Rendezvous Points
— RPF

C H A P T E R 20
IP Multicast Routing
In Chapter 19, “Introduction to IP Multicasting,” you learned how a multicast router communicates 
with hosts and then decides whether to forward or stop the multicast trafﬁc on a subnet. But how 
does a multicast router receive the group trafﬁc? How is the multicast trafﬁc forwarded from a 
source so that all the group users receive it? This chapter provides answers to those questions. 
This chapter ﬁrst deﬁnes the multicast routing problem by identifying the difference between 
unicast and multicast routing. It then provides an overview of the basic design concepts of 
multicast routing protocols, and shows how they solve multicast routing problems. Next, the 
chapter covers the operations of the Protocol Independent Multicast routing protocol in dense 
mode (PIM-DM) and sparse mode (PIM-SM). The chapter also covers the basic functions of 
Distance Vector Multicast Routing Protocol (DVMRP) and Multicast OSPF (MOSPF).
“Do I Know This Already?” Quiz
Table 20-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
Table 20-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Multicast Routing Basics
1
Dense-Mode Routing Protocols
2–4
Sparse-Mode Routing Protocols
5–8
Total Score

680     Chapter 20: IP Multicast Routing
4.
When a multicast router receives a multicast packet, which one of the following tasks will it 
perform ﬁrst? 
a. Examine the IP multicast destination address on the packet, consult the multicast rout-
ing table to determine the next-hop address, and forward the packet through appropriate 
interface(s).
b. Depending on the multicast routing protocol conﬁgured, either forward the packet on all 
the interfaces or forward the packet on selected interfaces except the one on which the 
packet was received.
c. Determine the interface this router would use to send packets to the source of the packet, 
and decide whether the packet arrived in that interface or not. 
d. Send a Prune message to its upstream neighbor if it does not have any directly con-
nected group members or active downstream routers.
5.
A PIM router receives a PIM Assert message on a LAN interface. Which of the following 
statements is (are) true about the response of the router? 
a. The router does not have to take any action. 
b. If the router is conﬁgured with the PIM-DM routing protocol, it will process the Assert 
message; otherwise, it will ignore it.
c. If the router is conﬁgured with the PIM-SM routing protocol, it will process the Assert 
message; otherwise, it will ignore it. 
d. The router will send a PIM Assert message.
6.
When a PIM-DM router receives a Graft message from a downstream router after it has sent 
a Prune message to its upstream router for the same group, which of the following statements 
is (are) true about its response? 
a. It will send a Graft message to the downstream router and a Prune message to the 
upstream router.
b. It will send a Prune message to the downstream router and a Graft message to the 
upstream router.
c. It will re-establish adjacency with the upstream router. 
d. It will send a Graft message to the upstream router.

“Do I Know This Already?” Quiz     681
7.
On router R1, the show ip mroute 239.5.130.24 command displays Serial2, Prune/Dense, 
00:01:34/00:01:26 for the (S, G) entry under the outgoing interface list. Which of the 
following statements provide correct interpretation of this information?
a. Router R1 has sent a Prune message on its Serial2 interface to its upstream router 1 
minute and 34 seconds ago.
b. Router R1 will send a Graft message on its Serial2 interface to its upstream router after 
1 minute and 26 seconds.
c. Router R1 received a Prune message on its Serial2 interface from its downstream router 
1 minute and 34 seconds ago.
d. Router R1 will send a Prune message on its Serial2 interface to its upstream router after 
1 minute and 26 seconds.
e. Router R1 will forward the trafﬁc for the group on its Serial2 interface after 1 minute 
and 26 seconds.
8.
From the following statements, select the true statement(s) regarding when a PIM-SM RP 
router will send the unicast PIM Register-Stop messages to the ﬁrst-hop DR. 
a. If the RP has no need for the trafﬁc
b. If the RP is already receiving trafﬁc on the shared tree
c. When the RP begins receiving multicast trafﬁc via SPT from the source
d. When the RP sends multicast trafﬁc via SPT to the downstream router
9.
R1, a PIM-SM router, sends an (S,G) RP-bit Prune to its upstream neighbor. Assume that all 
the PIM-SM routers in the network are using the Cisco default spt-threshold value. Which 
of the following statements is (are) true about the status of different routers in the PIM-SM 
network at this time? 
a. At R1, the root-path tree and shortest-path tree diverge.
b. R1 is switching over from shortest-path tree to root-path tree.
c. R1 is switching over from root-path tree to shortest-path tree.
d. At R1, the RPF neighbor for the (S,G) entry is different from the RPF neighbor of the 
(*, G) entry.

682     Chapter 20: IP Multicast Routing
10.
In a PIM-SM LAN network using Auto-RP, one of the routers is conﬁgured to send Cisco-
RP-Announce and Cisco-RP-Discovery messages. All the routers show all the interfaces with 
correct PIM neighbors in sparse mode. However, the network administrator is puzzled by 
inconsistent RP mapping information shown on many routers. Some routers show correct RP 
mappings, but many leaf routers do not show any RP mappings. Which of the following 
statements represent(s) the most likely cause(s) for the above problem? 
a. The links between the leaf routers and the mapping agent are congested.
b. All the interfaces of all the routers are conﬁgured with the command ip pim sparse-
mode. 
c. The leaf routers are conﬁgured with a static RP address using an override option.
d. The RPF check on the leaf routers is failing.
11.
PIM-SM router R1 has two interfaces listed, s0/0 and fa0/0, in its (*,G) entry for group 
227.7.7.7 in its multicast routing table. Assuming nothing changes in that (*,G) entry in the 
next 10 minutes, which of the following could be true? 
a. R1 is sending PIM Join messages toward the RP.
b. R1 does not need to send Join messages toward the RP as long as the RP is continuing to 
forward multicasts for group 227.7.7.7 to R1.
c. R1 is receiving PIM Join messages periodically on one or both of interfaces s0/0 and 
fa0/0.
d. R1 is receiving IGMP Report messages periodically on interface fa0/0.
e. The RP has been sending PIM Prune messages to R1 periodically, but R1 has been 
replying with PIM Reject messages because it still needs to receive the packets.

Multicast Routing Basics     683
Foundation Topics
Multicast Routing Basics
The main function of any routing protocol is to help routers forward a packet in the right direction, 
causing the packet to keep moving closer to its desired destination, ultimately reaching its destination. 
To forward a unicast packet, a router examines the packet’s destination address, ﬁnds the next-hop 
address from the unicast routing table, and forwards the packet through the appropriate interface. 
A unicast packet is forwarded along a single path from the source to the destination.
The top part of Figure 20-1 shows how a router can easily make a decision about forwarding a 
unicast packet by consulting its unicast routing table. However, when a router receives a multicast 
packet, as shown at the bottom of Figure 20-1, it cannot forward the packet because multicast IP 
addresses are not listed in the unicast routing table. Also, routers often have to forward multicast 
packets out multiple interfaces to reach all receivers. These requirements make the multicast 
forwarding process more complex than unicast forwarding. 
Figure 20-1
Multicast Routing Problem
Figure 20-1 shows that the router has received a multicast packet with the destination address 
226.1.1.1. The destination address represents a dynamically changing group of recipients, not any 
one recipient’s address. How can the router ﬁnd out where these users are? Where should the 
router forward this packet?
An analogy may help you to understand better the difﬁculty of multicast routing. Assume that you 
want to send party invitations through the mail, but instead of creating dozens of invitations, you 
.1
Fa0/0
?
.1
S0/1
Destination Address: 10.1.6.3
Source Address: 10.1.1.10
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
Destination Address: 10.1.6.3
Source Address: 10.1.1.10
“I know how to handle this packet.”
Router# show ip route
Gateway of last resort is not set
10.0.0.0/24 is subnetted, 3 subnets
C     10.1.1.0 is directly connected, FastEthernet0/0
R     10.1.6.0 [120/1] via 10.1.4.3, 00:00:10, Serial0/1
C     10.1.4.0 is directly connected, Serial0/1
“Who owns the multicast address
226.1.1.1? Where should I forward
this packet?”
Unicast Packet
Multicast Packet
Unicast Packet

684     Chapter 20: IP Multicast Routing
create only one. Before mailing the invitation, you put a destination address on it, “This envelope 
contains my party invitation,” and then drop it in a mailbox. When the postal system examines the 
destination address on your envelope, where should it deliver your envelope? And because it is 
only one invitation, does the postal system need to make copies? Also, how can the postal system 
ﬁgure out to which addresses to deliver the copies? By contrast, if IP multicast were the post ofﬁce, 
it would know who you want to invite to the party, know where they are located, and make copies 
of the invitation and deliver them all to the correct addresses.
The next few sections discuss solutions for forwarding multicast trafﬁc and controlling the 
distribution of multicast trafﬁc in a routed network.
Overview of Multicast Routing Protocols
Routers can forward a multicast packet by using either a dense-mode multicast routing protocol 
or a sparse-mode multicast routing protocol. This section examines the basic concepts of multicast 
forwarding using dense mode, the reverse-path-forwarding (RPF) check,  and multicast forwarding 
using sparse mode, all of which help to solve the multicast routing problem.
Multicast Forwarding Using Dense Mode
Dense-mode routing protocols assume that the multicast group application is so popular that every 
subnet in the network has at least one receiver wanting to receive the group trafﬁc. Therefore, the 
design of a dense-mode routing protocol instructs the router to forward the multicast trafﬁc on all 
the conﬁgured interfaces, with some exceptions to prevent looping. For example, a multicast 
packet is never forwarded out the interface on which it was received. Figure 20-2 shows how a 
dense-mode routing protocol receives a multicast on one interface, and then forwards copies out 
all other interfaces. 
Figure 20-2
R1 Forwarding a Multicast Packet Using a Dense-Mode Routing Protocol
Fa0/0
Subnet 10.1.1.0/24
S0/0
S0/1
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
“I will send the packet
away from the source.”
R1
Copy of the multicast packet
Copy of the multicast packet
IP Routing table excerpt:
C    10.1.1.0 is directly connected, FastEthernet0/0
Multicast Packet

Multicast Routing Basics     685
Figure 20-2 shows the dense-mode logic on R1, with R1 ﬂooding copies of the packet out all 
interfaces except the one on which the packet was received. Although Figure 20-2 shows only one 
router, other routers can receive these multicasts and repeat the same process. All subnets will 
receive a copy of the original multicast packet. 
Dense-mode protocols assume that all subnets need to receive a copy of the packets; however, 
dense-mode protocols do allow routers to ask to not receive trafﬁc sent to a particular multicast 
group. Dense-mode routers typically do not want to receive multicast packets for a particular 
group if both of the following are true:
■
The router does not have any active downstream routers that need packets for that group.
■
The router does not know of any hosts on directly connected subnets that have joined that 
group.
When both of these conditions are true, the router needs to inform its upstream router not to send 
trafﬁc for the group, which it does by using a special message called a Prune message. The 
mechanics of how dense-mode routers communicate with each other is discussed in detail under 
the PIM-DM section later in this chapter.
DVMRP, PIM-DM, and MOSPF are the dense-mode routing protocols discussed in this chapter, 
with most of the attention being paid to PIM-DM. 
Reverse-Path-Forwarding Check
Routers cannot simply use logic by which they receive a multicast packet and then forward a copy 
of it out all other interfaces, without causing multicast packets to loop around the internetwork. To 
prevent such loops, routers do not forward multicasts out the same interface on which they were 
received. Multicast routers use a reverse-path-forwarding (RPF) check to prevent loops. The RPF 
check adds this additional step to a dense-mode router’s forwarding logic:
Look at the source IP address of the multicast packet. If my route that matches the source 
lists an outgoing interface that is the actual interface on which the packet was received, 
the packet passes the RPF check. If not, do not replicate and forward the packet.
Figure 20-3 shows an example in which R3 uses the RPF check on two separate copies of the same 
original multicast packet. Host S1 sends a multicast packet, with R1 ﬂooding it to R2 and R3. R2 
receives its copy, and ﬂoods it as well. As a result, R3 receives the same packet from two routers: 
on its s0/0 interface from R2 and on its s0/1 interface from R1. Without the RPF check, R3 would 
forward the packet it got from R1 to R2, and vice versa, and begin the process of looping packets. 
With this same logic, R1 and R2 also keep repeating the process. This duplication creates multicast 
routing loops and generates multicast storms that waste bandwidth and router resources. 
KEY 
POINT
KEY 
POINT

686     Chapter 20: IP Multicast Routing
Figure 20-3
R3 Performs the RPF Check
A multicast router does not forward any multicast packet unless the packet passes the RPF check. 
In Figure 20-3, R3 has to decide whether it should accept the multicast packets coming from R1 
and R2. R3 makes this decision by performing the RPF check, described in detail as follows:
1.
R3 examines the source address of each incoming multicast packet, which is 10.1.1.10. The 
source address is used in the RPF check of Step 2.
2.
R3 determines the reverse path interface based on its route used to forward packets to 
10.1.1.10. In this case, R3’s route to 10.1.1.0/24 is matched, and it lists an outgoing interface 
of s0/1, making s0/1 R3’s RPF interface for IP address 10.1.1.10. 
3.
R3 compares the reverse path interface determined in Step 2 with the interface on which the 
multicast packet arrived. If they match, it accepts the packet and forwards it; otherwise, it 
drops the packet. In this case, R3 ﬂoods the packet received on s0/1 from R1, but it ignores 
the packet received on s0/0 from R2.
The RPF check implements a strategy by which routers accept packets that arrive over the shortest 
path, and discard those that arrive over longer routes. Multicast routing protocols cannot use the 
destination address to help routers forward a packet, because that address represents the group 
trafﬁc. So, multicast routing protocols use the RPF check to determine whether the packet arrived 
at the router using the shortest-path route from the source to the router. If it did, multicast routing 
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
10.1.4.0/24
S0/0
S0/0
.2
S0/1
S0/1
S0/0
S0/1
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
“How would I go in reverse to the source address 10.1.1.10?”
R3# show ip route | include 10.1.1.0
R     10.1.1.0 [120/1] via 10.1.4.1, 00:00:10, Serial0/1
R1
R2
R3
.1
.2
.2
.3
.3
.3
.1
.10
.1
Flood
Flood
Flood
Flood
?
?
H1
H2
S1
RPF Check
Multicast Traffic

Multicast Routing Basics     687
protocols accept the packet and forward it; otherwise, they drop the packet and thereby avoid 
routing loops and duplication.
Different multicast routing protocols determine their RPF interfaces in different ways, as 
follows:
■
Distance Vector Multicast Routing Protocol (DVMRP) maintains a separate multicast routing 
table and uses it for the RPF check.
■
Protocol Independent Multicast (PIM) and Core-Based Tree (CBT) generally use the unicast 
routing table for the RPF check, as shown in Figure 20-3.
■
PIM and CBT can also use the DVMRP route table, the Multiprotocol Border Gateway 
Protocol (MBGP) route table, or statically conﬁgured multicast route(s) for the RPF 
check.
■
Multicast OSPF does not use the RPF check, because it computes both forward and reverse 
shortest-path source-rooted trees by using the Dijkstra algorithm.
Multicast Forwarding Using Sparse Mode
A dense-mode routing protocol is useful when a multicast application is so popular that you need 
to deliver the group trafﬁc to almost all the subnets of a network. However, if the group users are 
located on a few subnets, a dense-mode routing protocol will still ﬂood the trafﬁc in the entire 
internetwork, wasting bandwidth and resources of routers. In those cases, a sparse-mode routing 
protocol, such as PIM-SM, could be used to help reduce waste of network resources. 
The fundamental difference between dense-mode and sparse-mode routing protocols relates to 
their default behavior. By default, dense-mode protocols keep forwarding the group trafﬁc unless 
a downstream router sends a message stating that it does not want that trafﬁc. Sparse-mode 
protocols do not forward the group trafﬁc to any other router unless it receives a message from that 
router requesting copies of packets sent to a particular multicast group. A downstream router 
requests to receive the packets only for one of two reasons:
■
The router has received a request to receive the packets from some downstream router.
■
A host on a directly connected host has sent an IGMP Join message for that group. 
Figure 20-4 shows an example of what must happen with PIM-SM before a host (H2 in this case) 
can receive packets sent by host S1 to multicast group address 226.1.1.1. The PIM sparse-mode 
operation begins with the packet being forwarded to a special router called the rendezvous point 
(RP). Once the group trafﬁc arrives at an RP, unlike the dense-mode design, the RP does not 
automatically forward the group trafﬁc to any router; the group trafﬁc must be speciﬁcally 
requested by a router.
KEY 
POINT

688     Chapter 20: IP Multicast Routing
Figure 20-4
R1 Forwarding a Multicast Packet Using a Sparse-Mode Routing Protocol
Before you look at the numbered steps in Figure 20-4, consider the state of this internetwork. PIM-
SM is conﬁgured on all the routers, R1 is selected as an RP, and in all three routers, the IP address 
172.16.1.1 of R1 is conﬁgured statically as the RP address. Usually, a loopback interface address 
is used as an RP address and the loopback network is advertised in the unicast routing protocol so 
that all the routers learn how to locate an RP. At this point, R1, as the RP, may receive multicast 
packets sent to 226.1.1.1, but it will not forward them.
The following list describes the steps shown in Figure 20-4:
1.
Host S1 sends a multicast to the RP, with destination address 226.1.1.1.
2.
R1 chooses to ignore the packet, because no routers or local hosts have told the RP (R1) that 
they want to receive copies of multicast packets.
3.
Host H2 sends an IGMP Join message for group 226.1.1.1.
4.
R3 sends a PIM Join message to the RP (R1) for address 26.1.1.1.
5.
R1’s logic now changes, so future packets sent to 226.1.1.1 will be forwarded by R1 out s0/1 to R3.
6.
Host S1 sends a multicast packet to 226.1.1.1, and R1 forwards it out s0/1 to R3.
NOTE
Throughout this chapter, the solid arrowed lines in the ﬁgures represent multicast 
packets, with dashed arrowed lines representing PIM and IGMP messages.
S0/0
S0/0
S0/1
S0/1
S0/0
S0/1
R1
R2
R3
PIM Join
226.1.1.1
RP
172.16.1.1
H1
H2
H3
S1
1st Multicast packet to 226.1.1.1
1
2
5
2nd Multicast packet to 226.1.1.1
6
4
IGMP Join 226.1.1.1
3
Sparse mode –
don’t forward out
S0/0 and S0/1
I got a join in S0/0
for 226.1.1.1 –
Forward out S0/1
in the future!

Multicast Routing Basics     689
In a PIM-SM network, it is critical for all the routers to somehow learn the IP address of an RP. 
One option in a small network is to statically conﬁgure the IP address of an RP in every router. 
Later in the chapter, the section “Dynamically Finding RPs and Using Redundant RPs” covers 
how routers can dynamically discover the IP address of the RP.
The example in Figure 20-4 shows some of the savings in using a sparse-mode protocol like PIM-
SM. R2 has not received any IGMP Join messages on its LAN interface, so it does not send any 
request to the RP to forward the group trafﬁc. As a result, R1 does not waste link bandwidth on 
the link from R1 to R2. R3 will not forward multicasts to R2 either in this case. 
Multicast Scoping
Multicast scoping conﬁnes the forwarding of multicast trafﬁc to a group of routers, for 
administrative, security, or policy reasons. In other words, multicast scoping is the practice of 
deﬁning boundaries that determine how far multicast trafﬁc will travel in your network. The 
following sections discuss two methods of multicast scoping: 
■
TTL scoping 
■
Administrative scoping
TTL Scoping
With TTL scoping, routers compare the TTL value on a multicast packet with a conﬁgured TTL 
value on each outgoing interface. A router forwards the multicast packet only on those interfaces 
whose conﬁgured TTL value is less than or equal to the TTL value of the multicast packet. In 
effect, TTL scoping resets the TTL value at which the router discards multicasts from the usual 
value of 0 to some higher number. Figure 20-5 shows an example of a multicast router with various 
TTL threshold values conﬁgured on its interfaces. 
In Figure 20-5, a multicast packet arrives on the s1 interface with a TTL of 18. The router 
decreases the packet’s TTL by 1 to 17. Assume that the router is conﬁgured with a dense-mode 
routing protocol on all four interfaces and the RPF check succeeds—in other words, the router 
will want to forward a copy of the packet on each interface. The router compares the remaining 
TTL of the packet, which is now 17, with the TTL threshold of each outgoing interface. If the 
packet’s TTL is higher than or equal to the interface TTL, it forwards a copy of the packet on 
that interface; otherwise, it does not forward it. On a Cisco router, the default TTL value on all 
the interfaces is 0. 
NOTE
In Figure 20-4, R3 ﬁrst performs its RPF check by using the IP address of the RP rather 
than the IP address of the source of the packet, because it is receiving the group trafﬁc from the 
RP. If the RPF check succeeds, R3 forwards the trafﬁc on its LAN.

690     Chapter 20: IP Multicast Routing
Figure 20-5
Multicast Scoping Using TTL Thresholds 
On the s0 and s2 interfaces in Figure 20-5, the network administrator has conﬁgured the TTL as 8 
and 32, respectively. A copy of the packet is forwarded on the s0 and e0 interfaces because their 
TTL thresholds are less than 17. However, the packet is not forwarded on the s2 interface because 
its TTL threshold is 32, which is higher than 17.
TTL scoping has some weaknesses. First, it is difﬁcult to implement in a large and complex 
network, because estimating correct TTL thresholds on many routers and many interfaces so that 
the network correctly conﬁnes only the intended sessions becomes an extremely demanding task. 
Another problem with TTL scoping is that a conﬁgured TTL threshold value on an interface 
applies to all multicast packets. If you want ﬂexibility for some multicast sessions, you have to 
manipulate the applications to alter the TTL values when packets leave the servers.
Administrative Scoping
Recall from Chapter 19 that administratively scoped multicast addresses are private addresses in 
the range 239.0.0.0 to 239.255.255.255. They can be used to set administrative boundaries to limit 
the forwarding of multicast trafﬁc outside of a domain. It requires manual conﬁguration. You can 
conﬁgure and apply a ﬁlter on a router’s interface so that multicast trafﬁc with group addresses in 
the private address range is not allowed to enter or exit the interface.
Dense-Mode Routing Protocols
There are three dense-mode routing protocols:
■
Protocol Independent Multicast Dense Mode (PIM-DM)
NOTE
This chapter assumes that you have read Chapter 19 or are thoroughly familiar with 
the operation of IGMP; if neither is true, read Chapter 19 before continuing with this chapter.
S0
S2
S1
E0
Destination Address: 226.2.2.2
TTL = 18
Multicast TTL Threshold = 0
Packet is forwarded
Multicast TTL Threshold = 32
Packet is not forwarded!
Multicast TTL Threshold = 8
Packet is forwarded

Dense-Mode Routing Protocols     691
■
Distance Vector Multicast Routing Protocol (DVMRP)
■
Multicast Open Shortest Path First (MOSPF)
This section covers the operation of PIM-DM in detail and provides an overview of DVMRP and 
MOSPF.
Operation of Protocol Independent Multicast Dense Mode
Protocol Independent Multicast (PIM) deﬁnes a series of protocol messages and rules by which 
routers can provide efﬁcient forwarding of multicast IP packets. PIM previously existed as a 
Cisco-proprietary protocol, although it has been offered as an experimental protocol via RFCs 
2362, 3446, and 3973. The PIM speciﬁcations spell out the rules mentioned in the earlier examples 
in this chapter—things like the RPF check, the PIM dense-mode logic of ﬂooding multicasts until 
routers send Prune messages, and the PIM Sparse-mode logic of not forwarding multicasts 
anywhere until a router sends a Join message. This section describes the PIM-DM protocols in 
more detail.
PIM gets its name from its ability to use the unicast IP routing table for its RPF check—
independent of whatever unicast IP routing protocol(s) was used to build the unicast routing table 
entries. In fact, the name “PIM” really says as much about the two other dense-mode protocols—
DVMRP and MOSPF—as it does about PIM. These other two protocols do not use the unicast IP 
routing table for their RPF checks, instead building their own independent tables. PIM simply 
relies on the unicast IP routing table, independent of which unicast IP routing protocol built a 
particular entry in the routing table. 
Forming PIM Adjacencies Using PIM Hello Messages
PIM routers form adjacencies with neighboring PIM routers for the same general reasons, and 
with the same general mechanisms, as many other routing protocols. PIMv2, the current version 
of PIM, sends Hello messages every 30 seconds (default) on every interface on which PIM is 
conﬁgured. By receiving Hellos on the same interface, routers discover neighbors, establish 
adjacency, and maintain adjacency. PIMv2 Hellos use IP protocol number 103 and reserved 
multicast destination address 224.0.0.13, called the All-PIM-Routers multicast address. The Hello 
messages contain a Holdtime value, typically three times the sender’s PIM Hello interval. If the 
receiver does not receive a Hello message from the sender during the Holdtime period, it considers 
the sending neighbor to be dead.
NOTE
The older version, PIMv1, does not use Hellos, instead using a PIM Query message. 
PIMv1 messages are encapsulated in IP packets with protocol number 2 and use the multicast 
destination address 224.0.0.2. 
KEY 
POINT

692     Chapter 20: IP Multicast Routing
As you will see in the following sections, establishing and maintaining adjacencies with directly 
connected neighbors is very important for the operation of PIM. A PIM router sends other PIM 
messages only on interfaces on which it has known active PIM neighbors. 
Source-Based Distribution Trees
Dense-mode routing protocols are suitable for dense topology in which there are many multicast 
group members relative to the total number of hosts in a network. When a PIM-DM router receives 
a multicast packet, it ﬁrst performs the RPF check. If the RPF check succeeds, the router forwards 
a copy of the packet to all the PIM neighbors except the one on which it received the packet. Each 
PIM-DM router repeats the process and ﬂoods the entire network with the group trafﬁc. Ultimately, 
the packets are ﬂooded to all leaf routers that have no downstream PIM neighbors. 
The logic described in the previous paragraph actually describes the concepts behind what PIM 
calls a source-based distribution tree. It is also sometimes called a shortest-path tree (SPT), or 
simply a source tree. The tree deﬁnes a path between the source host that originates the multicast 
packets and all subnets that need to receive a copy of the multicasts sent by that host. The tree uses 
the source as the root, the routers as the nodes in the tree, and the subnets connected to the routers 
as the branches and leaves of the tree. Figure 20-3, earlier in the chapter, shows the concept behind 
an SPT. 
The conﬁguration required on the three routers in Figure 20-3 is easy—just add the global command 
ip multicast-routing on each router and the interface command ip pim dense-mode on all the 
interfaces of all the routers.
PIM-DM might have a different source-based distribution tree for each combination of source and 
multicast group, because the SPT will differ based on the location of the source and the locations 
of the hosts listening for each multicast group address. The notation (S,G) refers to a particular 
SPT, or to an individual router’s part of a particular SPT, where S is the source’s IP address and G 
is the multicast group address. For example, the (S,G) notation for the example in Figure 20-3 
would be written as (10.1.1.10, 226.1.1.1). 
Example 20-1 shows part of the (S,G) SPT entry on R3, from Figure 20-3, for the (10.1.1.0, 
226.1.1.1) SPT. Host S1 is sending packets to 226.1.1.1, and host H2 sends an IGMP Join 
message for the group 226.1.1.1. Example 20-1 shows a part of R3’s multicast routing table, as 
displayed using the show ip mroute command.
Example 20-1
Multicast Route Table Entry for the Group 226.1.1.1 for R3
 (10.1.1.10/32, 226.1.1.1), 00:00:12/00:02:48, flags: CT
  Incoming interface: Serial0/1, RPF nbr 10.1.4.1
  Outgoing interface list:
FastEthernet0/0, Forward/Dense, 00:00:12/00:00:00
KEY 
POINT

Dense-Mode Routing Protocols     693
The interpretation of the information shown in Example 20-1 is as follows:
■
The ﬁrst line shows that the (S, G) entry for (10.1.1.10/32, 226.1.1.1) has been up for 
12 seconds, and that if R3 does not forward an (S, G) packet in 2 minutes and 48 seconds, it 
will expire. Every time R3 forwards a packet using this entry, the timer is reset to 3 minutes.
■
The C ﬂag indicates that R3 has a directly connected group member for 226.1.1.1. The T ﬂag 
indicates that the (S, G) trafﬁc is forwarded on the shortest-path tree.
■
The incoming interface for the group 226.1.1.1 is s0/1 and the RPF neighbor (the next-hop IP 
address to go in the reverse direction toward the source address 10.1.1.10) is 10.1.4.1.
■
The group trafﬁc is forwarded out on the fa0/0 interface. This interface has been in the 
forwarding state for 12 seconds. The second timer is listed as 00:00:00, because it cannot 
expire with PIM-DM, as this interface will continue to forward trafﬁc until pruned.
The next two sections show how PIM-DM routers use information learned from IGMP to 
dynamically expand and contract the source-based distribution trees to satisfy the needs of the 
group users.
Prune Message
PIM-DM creates a new SPT when a source ﬁrst sends multicast packets to a new multicast group 
address. The SPT includes all interfaces except RPF interfaces, because PIM-DM assumes that all 
hosts need to receive a copy of each multicast packet. However, some subnets may not need a copy 
of the multicasts, so PIM-DM deﬁnes a process by which routers can remove interfaces from an 
SPT by using PIM Prune messages.
For example, in Figure 20-3, hosts H1 and H2 need a copy of the multicast packets sent to 
226.1.1.1. However, as shown, when R2 gets the multicast from R1, R2 then forwards the 
multicasts to R3. As it turns out, R3 is dropping the packets for the group trafﬁc from 10.1.1.1, 
sent to 226.1.1.1, because those packets fail R3’s RPF check. In this case, R3 can cause R2 to 
remove its s0/1 interface from its outgoing interface list for (10.1.1.10, 226.1.1.1) by sending a 
NOTE
The multicast routing table ﬂags mentioned in this list, as well as others, are 
summarized in Table 20-6 in the “Foundation Summary” section of this chapter.
NOTE
According to PIM-DM speciﬁcations, multicast route tables only need (S,G) entries. 
However, for each (S,G) entry, a Cisco router creates a (*,G) entry as a parent entry, for design 
efﬁciency. The (*,G) entry is not used for forwarding the multicast trafﬁc for a group that uses 
PIM-DM. Therefore, for simplicity and clarity, the (*,G) entries are not shown in the examples 
that use PIM-DM. Had you built the same network as illustrated in Figure 20-3, and conﬁgured 
PIM-DM, the (*,G) entries would also be listed in the show ip mroute command output.

694     Chapter 20: IP Multicast Routing
Prune message to R2. As a result, R2 will not forward the multicasts to R3, thereby reducing the 
amount of wasted bandwidth. 
The following is a more formal deﬁnition of a PIM Prune message: 
The PIM Prune message is sent by one router to a second router to cause the second 
router to remove the link on which the Prune is received from a particular (S,G) SPT.
Figure 20-6 shows the same internetwork and example as Figure 20-3, but with R3’s Prune 
messages sent to R2.
Figure 20-6
R3 Sends a Prune Message to R2
As a result of the Prune message from R3 to R2, R2 will prune its s0/1 interface from the SPT for 
(10.1.1.10,226.1.1.1). Example 20-2 shows the multicast route table entry for R2 in Figure 20-6, 
with the line that shows the pruned state highlighted.
NOTE
The term outgoing interface list refers to the list of interfaces in a forwarding state, 
listed for an entry in a router’s multicast routing table.
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
10.1.4.0/24
S0/0
S0/0
.2
S0/1
S0/1
S0/0
S0/1
Packet: Source = 10.1.1.0,
Destination = 226.1.1.1
R1
R2
R3
.1
.2
.2
.3
.3
.3
.1
.10
.1
Prune
H1
H2
S1
My S0/1 interface
was pruned – do not
forward the packets
to R3 any more!
KEY 
POINT

Dense-Mode Routing Protocols     695
Most of the information shown in Example 20-2 is similar to the information shown in 
Example 20-1. Notice the Serial0/1 information shown under the outgoing interface list. It 
shows that this interface was pruned 8 seconds ago because R3 sent a Prune message to R2. 
This means that, at this time, R2 is not forwarding trafﬁc for 226.1.1.1 on its s0/1 interface. 
Because PIM-DM’s inherent tendency is to ﬂood trafﬁc through an internetwork, the pruned s0/1 
interface listed in example 20-2 will be changed back to a forwarding state after 2 minutes and 
52 seconds. In PIM-DM, when a router receives a Prune message on an interface, it starts a 
(default) 3-minute Prune timer, counting down to 0. When the Prune timer expires, the router 
changes the interface to a forwarding state again. If the downstream router does not want the 
trafﬁc, it can again send a Prune message. This feature keeps a downstream router aware that the 
group trafﬁc is available on a particular interface from the upstream neighbor.
Note that a multicast router can have more than one interface in the outgoing interface list, but it 
can have only one interface in the incoming interface list. The only interface in which a router will 
receive and process multicasts from a particular source is the RPF interface. Routers still perform 
an RPF check, with the incoming interface information in the beginning of the show ip mroute 
output stating the RPF interface and neighbor.
PIM-DM: Reacting to a Failed Link
When links fail, or any other changes affect the unicast IP routing table, PIM-DM needs to update 
the RPF interfaces based on the new unicast IP routing table. Because the RPF interface may 
change, (S,G) entries may also need to list different interfaces in the outgoing interface list. This 
section describes an example of how PIM-DM reacts.
Figure 20-7 shows an example in which the link between R1 and R3, originally illustrated in 
Figure 20-6, has failed. After the unicast routing protocol converges, R3 needs to update its RPF 
neighbor IP address from 10.1.4.1 (R1) to 10.1.3.2 (R2). Also in this case, H1 has issued an IGMP 
Leave message.
Example 20-2
Multicast Route Table Entry for the Group 226.1.1.1 for R2
 (10.1.1.10/32, 226.1.1.1), 00:00:14/00:02:46, flags: CT
  Incoming interface: Serial0/0, RPF nbr 10.1.2.1
  Outgoing interface list:
    FastEthernet0/0, Forward/Dense, 00:00:14/00:00:00
    Serial0/1, Prune/Dense, 00:00:08/00:02:52
NOTE
PIMv2 offers a better solution to maintaining the pruned state of an interface, using 
State Refresh messages. These messages are covered later in the chapter, in the section “Steady-
State Operation and the State Refresh Message.”

696     Chapter 20: IP Multicast Routing
Figure 20-7
Direct Link Between R1 and R3 Is Down and Host H1 Sends an IGMP Leave Message
Example 20-3 shows the resulting multicast route table entry for R3 in Figure 20-7. Note that the 
RPF interface and neighbor IP address has changed to point to R2.
Example 20-3 shows how R3’s view of the (10.1.1.10,226.1.1.1) SPT has changed. However, R2 
had pruned its s0/1 interface from that SPT, as shown in Figure 20-6. So, R2 needs to change its 
s0/1 interface back to a forwarding state for SPT (10.1.1.10, 226.1.1.1). Example 20-4 shows the 
resulting multicast route table entry for (10.1.1.10, 226.1.1.1) in R2.
Example 20-3
Multicast Route Table Entry for the Group 226.1.1.1 for R3
(10.1.1.10/32, 226.1.1.1), 00:02:16/00:01:36, flags: CT
  Incoming interface: Serial0/0, RPF nbr 10.1.3.2
  Outgoing interface list:
     FastEthernet0/0, Forward/Dense, 00:02:16/00:00:00
Example 20-4
Multicast Route Table Entry for the Group 226.1.1.1 for R2
(10.1.1.10/32, 226.1.1.1), 00:03:14/00:02:38, flags: T
  Incoming interface: Serial0/0, RPF nbr 10.1.2.1
  Outgoing interface list:
  Serial0/1, Forward/Dense, 00:02:28/00:00:00
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
IGMP Leave
for 226.1.1.1
S0/0
S0/0
.2
S0/1
S0/0
R1
R2
R3
.1
.2
.2
.3
.3
.1
.10
H1
H2
S1
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
Multicast Traffic

Dense-Mode Routing Protocols     697
In Example 20-4, notice the outgoing interface list for R2. R2 has now removed interface fa0/0 
from the outgoing interface list and stopped forwarding trafﬁc on the interface because it received 
no response to the IGMP Group-Speciﬁc query for group 226.1.1.1. As a result, R2 has also 
removed the C ﬂag (C meaning “connected”) from its multicast routing table entry for (10.1.1.10, 
226.1.1.1). Additionally, R2 forwards the trafﬁc on its s0/1 interface toward R3 because R3 is still 
forwarding trafﬁc on its fa0/0 interface and has not yet sent a Prune message to R2.
Rules for Pruning
This section explains two key rules that a PIM-DM router must follow to decide when it can 
request a prune. Before explaining another example of how PIM-DM reacts to changes in an 
internetwork, a couple of new multicast terms must be deﬁned. To simplify the wording, the 
following statements deﬁne upstream router and downstream router from the perspective of a 
router named R1.
■
R1’s upstream router is the router from which R1 receives multicast packets for a 
particular SPT. 
■
R1’s downstream router is a router to which R1 forwards some multicast packets for a 
particular SPT.
For example, R1 is R2’s upstream router for the packets that S1 is sending to 226.1.1.1 in Figure 20-7. 
R3 is R2’s downstream router for those same packets, because R2 sends those packets to R3.
PIM-DM routers can choose to send a Prune message for many reasons, one of which was covered 
earlier with regard to Figure 20-6. The main reasons are summarized here:
■
When receiving packets on a non-RPF interface.
■
When a router realizes that both of the following are true: 
— No locally connected hosts in a particular group are listening for packets. 
— No downstream routers are listening for the group.
This section shows the logic behind the second reason for sending prunes. At this point in 
the explanation of Figures 20-6 and 20-7, the only host that needs to receive packets sent to 
226.1.1.1 is H2. What would the PIM-DM routers in this network do if H2 leaves group 
226.1.1.1? Figure 20-8 shows just such an example, with H2 sending an IGMP Leave message 
for group 226.1.1.1. Figure 20-8 shows how PIM-DM uses this information to dynamically 
update the SPT.
NOTE
R2 changed its s0/1 to a forwarding state because of a PIM Graft message sent by R3. 
The upcoming section “Graft Message” explains the details.
KEY 
POINT
KEY 
POINT

698     Chapter 20: IP Multicast Routing
Figure 20-8
R3 and R2 Sending Prune Messages
Figure 20-8 shows three steps, with the logic in Steps 2 and 3 being similar but very important:
1.
H2 leaves the multicast group by using an IGMP Leave message.
2.
R3 uses an IGMP Query to conﬁrm that no other hosts on the LAN want to receive trafﬁc for 
group 226.1.1.1. So, R3 sends a Prune, referencing the (10.1.1.20, 226.1.1.1) SPT, out its RPF 
interface R2.
3.
R2 does not have any locally connected hosts listening for group 226.1.1.1. Now, its only 
downstream router has sent a Prune for the SPT with source 10.1.1.10, group 226.1.1.1. 
Therefore, R2 has no reason to need packets sent to 226.1.1.1 any more. So, R2 sends a Prune, 
referencing the (10.1.1.20, 226.1.1.1) SPT, out its RPF interface R1.
After the pruning is complete, both R3 and R2 will not be forwarding trafﬁc sent to 226.1.1.1 from 
source 10.1.1.10. In the routers, the show ip mroute command shows that fact using the P (prune) 
ﬂag, which means that the router has completely pruned itself from that particular (S,G) SPT. 
Example 20-5 shows R3’s command output with a null outgoing interface list. 
Example 20-5
Multicast Route Table Entry for the Group 226.1.1.1 for R3
(10.1.1.10/32, 226.1.1.1), 00:03:16/00:01:36, flags: PT
  Incoming interface: Serial0/0, RPF nbr 10.1.3.2
    Outgoing interface list: Null 
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
IGMP Leave
for 226.1.1.1
S0/0
S0/0
.2
S0/1
S0/0
R1
R2
R3
.1
.2
.2
.3
.3
.1
.10
H1
H2
S1
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
Prune
Prune
3
2
1
Multicast Traffic

Dense-Mode Routing Protocols     699
After all the steps in Figure 20-8 have been completed, R1 also does not need to send packets sent 
by 10.1.1.10 to 226.1.1.1 out any interfaces. After receiving a Prune message from R2, R1 has also 
updated its outgoing interface list, which shows that there is only one outgoing interface and that 
it is in the pruned state at this time. Example 20-6 shows the details.
Of particular interest in the output, R1 has also set the C ﬂag, but for R1 the C ﬂag does not indicate 
that it has directly connected group members. In this case, the combination of a C ﬂag and an RPF 
neighbor of 0.0.0.0 indicates that the connected device is the source for the group.
In reality, there is no separate Prune message and Join message; instead, PIM-DM and PIM-SM 
use a single message called a Join/Prune message. A Prune message is actually a Join/Prune 
message with a group address listed in the Prune ﬁeld, and a Join message is a Join/Prune message 
with a group address listed in the Join ﬁeld.
Steady-State Operation and the State Refresh Message
As mentioned brieﬂy earlier in the chapter, with PIM-DM, an interface stays pruned only for 
3 minutes by default. Prune messages list a particular source and group (in other words, a particular 
(S,G) SPT). Whenever a router receives a Prune message, it ﬁnds the matching (S,G) SPT entry 
and marks the interface on which the Prune message was received as “pruned.” However, it also 
sets a Prune timer, default 3 minutes, so that after 3 minutes, the interface is placed into a forwarding 
state again.
So, what happens with PIM-DM and pruned links? Well, the necessary links are pruned, 
and 3 minutes later they are added back. More multicasts ﬂow, and the links are pruned. Then 
they are added back. And so on. So, when Cisco created PIM V2 (published as experimental 
RFC 3973), it included a feature called state refresh. State Refresh messages can prevent this 
rather inefﬁcient behavior in PIM-DM version 1 of pruning and automatically unpruning 
interfaces.
Figure 20-9 shows an example that begins with the same state as the network described at the end 
of the preceding section, “Rules for Pruning,” where the link between R1 and R2 and the link 
between R2 and R3 have been pruned. Almost 3 minutes have passed, and the links are about to 
be added to the SPT again due to the expiration of the Prune timers.
Example 20-6
Multicast Route Table Entry for the Group 226.1.1.1 for R1
(10.1.1.10/32, 226.1.1.1), 00:08:35/00:02:42, flags: CT
  Incoming interface: FastEthernet0/0, RPF nbr 0.0.0.0
  Outgoing interface list:
    Serial0/0, Prune/Dense, 00:00:12/00:02:48
KEY 
POINT

700     Chapter 20: IP Multicast Routing
Figure 20-9
How PIM-DM Version 2 Uses State Refresh Messages
The PM State Refresh message can be sent, just before a neighbor’s Prune timer expires, to keep 
the interface in a pruned state. In Figure 20-9, the following steps do just that:
1.
R3 monitors the time since it sent the last Prune to R2. Just before the Prune timer expires, 
R3 decides to send a State Refresh message to R2.
2.
R3 sends the State Refresh message to R2, referencing SPT (10.1.1.10, 226.1.1.1).
3.
R2 reacts by resetting its Prune timer for the interface on which it received the State Refresh 
message.
4.
Because R2 had also pruned itself by sending a Prune message to R1, R2 also uses State 
Refresh messages to tell R1 to leave its s0/0 interface in a pruned state.
As long as R3 keeps sending a State Refresh message before the Prune timer on the upstream 
router (R2) expires, the SPT will remain stable, and there will not be the periodic times of ﬂooding 
of more multicasts for that (S,G) tree.
Graft Message
When new hosts join a group, routers may need to change the current SPT for a particular (S,G) 
entry. With PIM-DM, one option could be to wait on the pruned links to expire. For example, in 
Figure 20-9, R3 could simply quit sending State Refresh messages, and within 3 minutes at most, 
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
S0/0
S0/0
.2
S0/1
S0/0
R1
R2
R3
.1
.2
.2
.3
.3
.1
.10
H1
H2
S1
Destination Address: 226.1.1.1
Source Address: 10.1.1.10
I got a state refresh
message – reset my
prune timer on S0/1!
My Prune timer for (10.1.1.10,
226.1.1.1), interface S0/0, is
about to expire. Send a state-
refresh message!
State
Refresh
State
Refresh
4
2
1
3
Multicast Traffic

Dense-Mode Routing Protocols     701
R3 would be receiving the multicast packets for some (S,G) SPT again. However, waiting on the 
(default) 3-minute Prune timer to expire is not very efﬁcient. To allow routers to “unprune” a 
previously pruned interface from an SPT, PIM-DM includes the Graft message, which is deﬁned 
as follows:
A router sends a Graft message to an upstream neighbor—a neighbor to which it had 
formerly sent a Prune message—causing the upstream router to put the link back into a 
forwarding state (for a particular (S,G) SPT).
Figure 20-10 shows an example that uses the same ongoing example network. The process shown 
in Figure 20-10 begins in the same state as described at the end of the preceding section, “Steady-
State Operation and the State Refresh Message.” Neither host H1 nor H2 has joined group 
226.1.1.1, and R2 and R3 have been totally pruned from the (10.1.1.10, 226.1.1.1) SPT. Referring 
to Figure 20-10, R1’s s0/0 interface has been pruned from the (S,G) SPT, so R2 and R3 are not 
receiving the multicasts sent by server S1 to 226.1.1.1. The example then begins with host H2 
joining group 226.1.1.1 again.
Figure 20-10
R3 and R2 Send Graft Messages
Without the Graft message, host H2 would have to wait for as much as 3 minutes before it would 
receive the group trafﬁc. However, with the following steps, as listed in Figure 20-10, H2 will 
receive the packets in just a few seconds:
1.
Host H2 sends an IGMP Join message.
Fa0/0
Fa0/0
Fa0/0
10.1.1.0/24
10.1.2.0/24
10.1.5.0/24
10.1.6.0/24
10.1.3.0/24
S0/0
S0/0
.2
S0/1
S0/0
R1
R2
R3
.1
.2
.2
.3
.3
.1
.10
H1
H2
S1
My (10.1.1.10, 226.1.1.1)
entry lists S0/0 and 10.1.3.2
as my RPF interface and
neighbor – send a Graft there!
Graft
Graft
5
3
2
My (10.1.1.10, 226.1.1.1)
entry lists S0/0 and 10.1.2.1
as my RPF interface and
neighbor – send a Graft there!
4
IGMP Join
for 226.1.1.1
1
KEY 
POINT

702     Chapter 20: IP Multicast Routing
2.
R3 looks for the RPF interface for its (S, G) state information for the group 226.1.1.1 (see 
earlier Example 20-5), which shows the incoming interface as s0/0 and RPF neighbor as 
10.1.3.2 for the group. 
3.
R3 sends the Graft message out s0/0 to R2.
4.
R2 now knows it needs to be receiving messages from 10.1.1.10, sent to 226.1.1.1. However, 
R2’s (S,G) entry also shows a P ﬂag, meaning R2 has pruned itself from the SPT. So, R2 ﬁnds 
its RPF interface and RPF neighbor IP address in its (S,G) entry, which references interface 
s0/0 and router R1.
5.
R2 sends a graft to R1.
At this point, R1 immediately puts its s0/0 back into the outgoing interface list, as does R2, and now 
H2 receives the multicast packets. Note that R1 also sends a Graft Ack message to R2 in response 
to the Graft message, and R2 sends a Graft Ack in response to R3’s Graft message as well.
LAN-Speciﬁc Issues with PIM-DM and PIM-SM
This section covers three small topics related to operations that only matter when PIM is used 
on LANs:
■
Prune Override
■
Assert messages
■
Designated routers
Both PIM-DM and PIM-SM use these features in the same way.
Prune Override
In both PIM-DM and PIM-SM, the Prune process on multiaccess networks operates differently 
from how it operates on point-to-point links. The reason for this difference is that when one router 
sends a Prune message on a multiaccess network, other routers might not want the link pruned by 
the upstream router. Figure 20-11 shows an example of this problem, along with the solution 
through a PIM Join message that is called a Prune Override. In this ﬁgure, R1 is forwarding the 
group trafﬁc for 239.9.9.9 on its fa0/0 interface, with R2 and R3 receiving the group trafﬁc on their 
e0 interfaces. R2 does not have any connected group members, and its outgoing interface list 
would show null. The following list outlines the steps in logic shown in Figure 20-11, in which R3 
needs to send a Prune Override:
1.
R2 sends a Prune for group 239.9.9.9 because R2 has a null outgoing interface list for the group. 
2.
R1, realizing that it received the Prune on a multiaccess network, knows that other routers 
might still want to get the messages. So, instead of immediately pruning the interface, R1 sets 
a 3-second timer that must expire before R1 will prune the interface.

Dense-Mode Routing Protocols     703
3.
R3 also receives the Prune message sent by R2, because Prune messages are multicast to All-
PIM-Routers group address 224.0.0.13. R3 still needs to get trafﬁc for 239.9.9.9, so R3 sends 
a Join message on its e0 interface.
4.
(Not shown in Figure 20-11) R1 receives the Join message from R3 before removing its LAN 
interface from the outgoing interface list. As a result, R1 does not prune its Fa0/0 interface.
Figure 20-11
Prune Override
This process is called Prune Override because R3 overrides the Prune sent by R2. The Prune 
Override is actually a Join message, sent by R3 in this case. The message itself is no different from 
a normal Join. As long as R1 receives a Join message from R3 before its 3-second timer expires, 
R3 continues to receive trafﬁc without interruption.
Assert Message
The ﬁnal PIM-DM message covered in this chapter is the PIM Assert message. The Assert 
message is used to prevent wasted effort when more than one router attaches to the same LAN. 
Rather than sending multiple copies of each multicast packet onto the LAN, the PIM Assert 
message allows the routers to negotiate. The winner gets the right to be responsible for forwarding 
multicasts onto the LAN.
Figure 20-12 shows an example of the need for the Assert message. R2 and R3 both attach to the 
same LAN, with H1 being an active member of the group 227.7.7.7. Both R2 and R3 are receiving 
the group trafﬁc for 227.7.7.7 from the source 10.1.1.10. 
R2
R3
E1
E0
E0
H1
I got a prune on a
multiaccess net – set
my 3 second timer!
2
I have a null OIL for
239.9.9.9 – Prune!
I’d better send
another Join before
R1 prunes 239.9.9.9
Prune
239.9.9.9
1
3
Join, 239.9.9.9
(Prune Override)
Member,
239.9.9.9
Fa0/0
Fa0/1
R1
KEY 
POINT

704     Chapter 20: IP Multicast Routing
Figure 20-12
R2 and R3 Sending Assert Messages
The goal of the Assert message is to assign the responsibility of forwarding group trafﬁc on the 
LAN to the router that is closest to the source. When R2 and R3 receive group trafﬁc from the 
source on their s0 interfaces, they forward it on their e0 interfaces. Both of them have their s0 
interfaces in the incoming interface list and e0 interfaces in the outgoing interface list. Now, R2 
and R3 receive a multicast packet for the group on their e0 interfaces, which will cause them to 
send an Assert message to resolve who should be the forwarder. 
The Assert process picks a winner based on the routing protocol and metric used to ﬁnd the route 
to reach the unicast address of the source. In this example, that means that R2 or R3 will win based 
on the routes they each use to reach 10.1.1.10. R2 and R3 send and receive Assert messages that 
include their respective administrative distances of the routing protocols used to learn the route 
that matches 10.1.1.10, as well as the metric for those routes. The routers on the LAN compare 
their own routing protocol administrative distance and metrics to those learned in the Assert 
messages. The winner of the Assert process is determined as follows:
1.
The router advertising the lowest administrative distance of the routing protocol used to learn 
the route wins.
2.
If a tie, the router with the lowest advertised routing protocol metric for that route wins.
3.
If a tie, the router with the highest IP address on that LAN wins.
Designated Router
PIM Hello messages are also used to elect a designated router (DR) on a multiaccess network. A 
PIM-DM or PIM-SM router with the highest IP address becomes a DR. 
R1
R2
R3
E0
.3
E0
.2
.3
.1
.1
.1
.2
.1
S0
S0
S1
S0
H1
Assert
Assert
Member of Group
227.7.7.7
E0
10.1.1.0/24
10.1.4.0/24
10.1.2.0/24
10.1.3.0/24
Multicast Traffic
Destination Address: 227.7.7.7
Source Address: 10.1.1.10
.10
KEY 
POINT
KEY 
POINT

Dense-Mode Routing Protocols     705
The PIM DR concept applies mainly when IGMPv1 is used. IGMPv1 does not have a mechanism 
to elect a Querier—that is to say that IGMPv1 has no way to decide which of the many routers on 
a LAN should send IGMP Queries. When IGMPv1 is used, the PIM DR is used as the IGMP 
Querier. IGMPv2 can directly elect a Querier (the router with the lowest IP address), so the PIM 
DR is not used as the IGMP Querier when IGMPv2 is used.
Note that on a LAN, one router might win the Assert process for a particular (S,G) SPT, while 
another might become the IGMP Querier (PIM DR for IGMPv1, IGMP Querier for IGMPv2). The 
winner of the Assert process is responsible for forwarding multicasts onto the LAN, whereas the 
IGMP Querier is responsible for managing the IGMP process by being responsible for sending 
IGMP Query messages on the LAN. Note also that the IGMPv2 Querier election chooses the 
lowest IP address, and the Assert process uses the highest IP address as a tiebreaker, making it 
slightly more likely that different routers are chosen for each function.
Summary of PIM-DM Messages
This section concludes the coverage of PIM-DM. Table 20-2 lists the key PIM-DM messages 
covered in this chapter, along with a brief deﬁnition of their use. 
Table 20-2
Summary of PIM-DM Messages
KEY 
POINT
PIM Message
Deﬁnition
Hello
Used to form neighbor adjacencies with other PIM routers, and to 
maintain adjacencies by monitoring for received Hellos from each 
neighbor. Also used to elect a PIM DR on multiaccess networks.
Prune
Used to ask a neighboring router to remove the link over which the 
Prune ﬂows from that neighboring router’s outgoing interface list for a 
particular (S,G) SPT.
State Refresh
Used by a downstream router, sent to an upstream router on an RPF 
interface, to cause the upstream router to reset its Prune timer. This 
allows the downstream router to maintain the pruned state of a link, for 
a particular (S,G) SPT.
Assert
Used on multiaccess networks to determine which router wins the right 
to forward multicasts onto the LAN, for a particular (S,G) SPT.
Prune Override (Join)
On a LAN, a router may multicast a Prune message to its upstream 
routers. Other routers on the same LAN, wanting to prevent the 
upstream router from pruning the LAN, immediately send another Join 
message for the (S,G) SPT. (The Prune Override is not actually a Prune 
Override message—it is a Join. This is the only purpose of a Join 
message in PIM-DM, per RFC 3973.)
Graft/Graft-Ack
When a pruned link needs to be added back to an (S,G) SPT, a router 
sends a Graft message to its RPF neighbor. The RPF neighbor 
acknowledges with a Graft-Ack.
KEY 
POINT

706     Chapter 20: IP Multicast Routing
The next two short sections introduce two other dense-mode protocols, DVMRP and MOSPF.
Distance Vector Multicast Routing Protocol
RFC 1075 describes Version 1 of DVMRP. DVMRP has many versions. The operation of DVMRP 
is similar to PIM-DM. The major differences between PIM-DM and DVMRP are deﬁned as 
follows:
■
Cisco IOS does not support a full implementation of DVMRP; however, it does support 
connectivity to a DVMRP network.
■
DVMRP uses its own distance vector routing protocol that is similar to RIPv2. It sends route 
updates every 60 seconds and considers 32 hops as inﬁnity. Use of its own routing protocol 
adds more overhead to DVMRP operation compared to PIM-DM.
■
DVMRP uses Probe messages to ﬁnd neighbors using the All DVMRP Routers group address 
224.0.0.4.
■
DVMRP uses a truncated broadcast tree, which is similar to an SPT with some links 
pruned.
Multicast Open Shortest Path First
MOSPF is deﬁned in RFC 1584, “Multicast Extensions to OSPF,” which is an extension to the 
OSPFv2 unicast routing protocol. The basic operation of MOSPF is described here:
■
MOSPF uses the group membership LSA, Type 6, which it ﬂoods throughout the originating 
router’s area. As with unicast OSPF, all MOSPF routers in an area must have identical link-
state databases so that every MOSPF router in an area can calculate the same SPT.
■
The SPT is calculated “on-demand,” when the ﬁrst multicast packet for the group arrives.
■
Through the SPF calculation, all the routers know where the attached group members are, 
based on the group membership LSAs.
■
After the SPF calculation is completed, entries are made into each router’s multicast 
forwarding table.
■
Just like unicast OSPF, the SPT is loop free, and every router knows the upstream interface 
and downstream interfaces. As a result, an RPF check is not required.
■
Obviously, MOSPF can only work with the OSPF unicast routing protocol. MOSPF is suitable 
for small networks. As more hosts begin to source multicast trafﬁc, routers have to perform 
a higher number of Dijkstra algorithm computations, which demands an increasing level of 
router CPU resources. Cisco IOS does not support MOSPF.

Sparse-Mode Routing Protocols     707
Sparse-Mode Routing Protocols
There are two sparse-mode routing protocols:
■
Protocol Independent Multicast Sparse Mode (PIM-SM)
■
Core-Based Tree (CBT)
This section covers the operation of PIM-SM. 
Operation of Protocol Independent Multicast Sparse Mode
PIM-SM works with a completely opposite strategy from that of PIM-DM, although the 
mechanics of the protocol are not exactly opposite. PIM-SM assumes that no hosts want to receive 
multicast packets until they speciﬁcally ask to receive them. As a result, until a host in a subnet 
asks to receive multicasts for a particular group, multicasts are never delivered to that subnet. With 
PIM-SM, downstream routers must request to receive multicasts using PIM Join messages. Also, 
once they are receiving those messages, the downstream router must continually send Join messages 
to the upstream router—otherwise, the upstream router stops forwarding, putting the link in a 
pruned state. This process is opposite to that used by PIM-DM, in which the default is to ﬂood 
multicasts, with downstream routers needing to continually send Prunes or State Refresh messages 
to keep a link in a pruned state.
PM-SM makes the most sense with a small percentage of subnets that need to receive packets sent 
to any multicast group. 
Similarities Between PIM-DM and PIM-SM
PIM-SM has many similarities to PIM-DM. Like PIM-DM, PIM-SM uses the unicast routing table 
to perform RPF checks—regardless of what unicast routing protocol populated the table. (Like 
PIM-DM, the “protocol independent” part of the PIM acronym comes from the fact that PIM-SM 
is not dependent on any particular unicast IP routing protocol.) In addition, PIM-SM also uses the 
following mechanisms that are used by PIM-DM:
■
PIM Neighbor discovery through exchange of Hello messages.
■
Recalculation of the RPF interface when the unicast routing table changes.
■
Election of a DR on a multiaccess network. The DR performs all IGMP processes when 
IGMPv1 is in use on the network.
■
The use of Prune Overrides on multiaccess networks.
■
Use of Assert messages to elect a designated forwarder on a multiaccess network. The winner 
of the Assert process is responsible for forwarding unicasts onto that subnet.

708     Chapter 20: IP Multicast Routing
These mechanisms are described in the “Operation of Protocol Independent Multicast Dense 
Mode” section and thus are not repeated in this section.
Sources Sending Packets to the Rendezvous Point 
PIM-SM uses a two-step process to initially deliver multicast packets from a particular source to 
the hosts wanting to receive packets. Later, the process is improved beyond these initial steps. The 
steps for the initial forwarding of multicasts with PIM-SM are as follows:
1.
Sources send the packets to a router called the rendezvous point (RP).
2.
The RP sends the multicast packets to all routers/hosts that have registered to receive packets 
for that group. This process uses a shared tree.
This section describes the ﬁrst of these two steps, in which the source sends packets to the RP. To 
make that happen, the router connected to the same subnet as the source host must register with 
the RP. The RP accepts the registration only if the RP knows of any routers or hosts that need to 
receive a copy of those multicasts.
Figure 20-13 shows an example of the registration process in which the RP knows that no hosts 
currently want the IP multicasts sent to group 228.8.8.8—no matter which source is sending them. 
The conﬁguration for this example is simple, with all the routers conﬁgured with the global 
command ip multicast-routing and the interface command ip pim sparse-mode on all the 
interfaces.  Also, all routers have statically conﬁgured R3 as the RP by using the global command 
ip pim rp-address 10.1.10.3. Usually, a loopback interface address is used as an RP address. The 
loopback network 10.1.10.3/32 of R3 is advertised in the unicast routing protocol so that all the 
routers know how to reach the RP. 
NOTE
The preceding list was derived, with permission, from Routing TCP/IP, Volume II, by 
Jeff Doyle and Jennifer DeHaven Carroll.
NOTE
In addition to these two initial steps, routers with local hosts that have sent an IGMP 
Join for a group can go a step further, joining the source-speciﬁc tree for a particular (S,G) SPT.
KEY 
POINT

Sparse-Mode Routing Protocols     709
Figure 20-13
Source Registration Process when RP Has Not Received a Request for the Group from Any 
PIM-SM Router
The following three steps, referenced in Figure 20-13, describe the sequence of events for the 
Source Registration process when the RP has not received a request for the group from any 
PIM-SM router because no host has yet joined the group. 
1.
Host S1 begins sending multicasts to 228.8.8.8, and R1 receives those multicasts because it 
connects to the same LAN.
2.
R1 reacts by sending unicast PIM Register messages to the RP. The Register messages are 
unicasts sent to the RP IP address, 10.1.10.3 in this case.
3.
R3 sends unicast Register-Stop messages back to R1 because R3 knows that it does not have 
any need to forward packets sent to 228.8.8.8. 
In this example, the router near the source (R1) is attempting to register with the RP, but the RP 
tells R1 not to bother any more, because no one wants those multicast messages. R1 has not 
forwarded any of the native multicast messages at this point, in keeping with the PIM-SM strategy 
of not forwarding multicasts until a host has asked for them. However, the PIM Register message 
shown in Figure 20-13 encapsulates the ﬁrst multicast packet. As will be seen in Figure 20-14, the 
encapsulated packet would be forwarded by the RP had any senders been interested in receiving 
the packets sent to that multicast group.
The source host may keep sending multicasts, so R1 needs to keep trying to register with the 
RP in case some host ﬁnally asks to receive the packets. So, when R1 receives the Register-Stop 
messages, it starts a 1-minute Register-Suppression timer. 5 seconds before the timer expires, 
R1
R4
R5
R2
R3
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.6.0/24
S0
S1
.4
.4
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
PIM Register
Unicast Register-Stop
RP
10.1.10.3
3
1
2
Unicast Register
Message
Multicast Packet
(10.1.1.10, 228.8.8.8)
Multicast Traffic
(10.1.1.10, 228.8.8.8)
S1

710     Chapter 20: IP Multicast Routing
R1 sends another Register message with a ﬂag set, called the Null-Register bit, without any 
encapsulated multicast packets. As a result of this additional Register message, one of two things 
will happen:
■
If the RP still knows of no hosts that want to receive these multicast packets, it sends another 
Register-Stop message to R1, and R1 resets its Register-Suppression timer.
■
If the RP now knows of at least one router/host that needs to receive these multicast packets, 
it does not reply to this briefer Register message. As a result, R1, when its timer expires, again 
sends its multicast packets to R3 (RP) encapsulated in PIM Register messages. 
Joining the Shared Tree 
So far, this section on PIM-SM has explained the beginnings of the registration process, by which 
a router near the source of multicast packets registers with the RP. Before completing that 
discussion, however, the concept of the shared tree for a multicast group, also called the root-path 
tree (RPT), must be explained. As mentioned earlier, PIM-SM initially causes multicasts to be 
delivered in a two-step process: ﬁrst, packets are sent from the source to the RP, and then the RP 
forwards the packets to the subnets that have hosts that need a copy of those multicasts. PIM-SM 
uses this shared tree in the second part of the process.
The RPT is a tree, with the RP at the root, that deﬁnes over which links multicasts should be 
forwarded to reach all required routers. One such tree exists for each multicast group that is 
currently active in the internetwork. So, once the multicast packets sent by each source are 
forwarded to the RP, the RP uses the RPT for that multicast group to determine where to forward 
these packets.
PIM-SM routers collectively create the RPT by sending PIM Join messages toward the RP. In 
PIM-SM, multicast trafﬁc is sent only to routers that speciﬁcally request it. PIM-SM routers 
request the trafﬁc by joining the RPT by sending a Join toward the RP.
PIM-SM routers choose to send a Join under two conditions:
■
When a PIM-SM router receives a PIM Join message on any interface other than the interface 
used to route packets toward the RP
■
When a PIM-SM router receives an IGMP Membership Report message from a host on a 
directly connected subnet
Figure 20-14 shows an example of the PIM-SM join process, using the same network 
as Figure 20-12 but with H1 joining group 228.8.8.8. The routers react to the IGMP Join by 
sending a Join toward the RP, to become part of the shared SPT (*,228.8.8.8).
KEY 
POINT

Sparse-Mode Routing Protocols     711
Figure 20-14
Creating a Shared Tree for (*,228.8.8.8)
Figure 20-14 shows how H1 causes a shared tree (*,228.8.8.8) to be created, as described in the 
following steps:
1.
H1 sends an IGMP Join message for the group 228.8.8.8.
2.
R4 realizes it now needs to ask the RP to send it packets sent to 228.8.8.8, so R4 sends a PIM 
Join for the shared tree for group 228.8.8.8 toward the RP. R4 also puts its e0 interface into a 
forwarding state for the RPT for group 228.8.8.8.
3.
R4 sends the Join to the RP.
4.
R5 receives the Join on its s1 interface, so R5 puts its s1 interface in a forwarding state for the 
shared tree (represented by (*,228.8.8.8)). R5 also knows it needs to forward the Join toward 
the RP.
5.
R5 sends the Join toward the RP.
6.
R3, the RP, puts its s0 interface in a forwarding state for the (*,288.8.8.8) shared tree.
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
IGMP Join
228.8.8.8
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
2
1
PIM-SM Join
(*, 228.8.8.8)
5
PIM-SM Join
(*, 228.8.8.8)
3
• Make e0 forward
  for (*, 228.8.8.8)
• Send Join out RPF
  int. to reach RP
4
• Make s1 forward
  for (*, 228.8.8.8)
• Send Join out RPF
  int. to reach RP
6
• Make s0 forward
  for (*, 228.8.8.8)

712     Chapter 20: IP Multicast Routing
By the end of this process, the RP knows that at least one host wants packets sent to 228.8.8.8. The 
RPT for group 228.8.8.8 is formed with R3’s s0 interface, R5’s s1 interface, and R4’s e0 interface. 
Completion of the Source Registration Process
So far in this description of PIM-SM, a source (10.1.1.10) sent packets to 228.8.8.8, as shown in 
Figure 20-13—but no one cared at the time, so the RP did not forward the packets. Next, you 
learned what happens when a host does want to receive packets, with the routers reacting to create 
the RPT for that group. This section completes the story by showing how an RP reacts to a PIM 
Register message when the RP knows that some hosts want to receive those multicasts.
When the RP receives a Register message for an active multicast group—in other words, the RP 
believes that it should forward packets sent to the group—the RP does not send a Register-Stop 
message, as was shown back in Figure 20-13. Instead, it reacts to the Register message by de-
encapsulating the multicast packet, and forwarding it. 
The behavior of the RP in reaction to the Register message points out the second major function 
of the Register message. Its main two functions are as follows:
■
To allow a router to inform the RP that it has a local source for a particular multicast group
■
To allow a router to forward multicasts to the RP, encapsulated inside a unicast packet, until 
the registration process is completed
To show the complete process, Figure 20-15 shows an example. In the example, host H1 has 
already joined group 228.8.8.8, as shown in Figure 20-14. The following steps match those 
identiﬁed in Figure 20-15. Note that Step 3 represents the forwarding of the multicasts that were 
encapsulated inside Register messages at Step 2.
1.
Host S1 sends multicasts to 228.8.8.8.
2.
Router R1 encapsulates the multicasts, sending them inside Register messages to the RP, R3.
3.
R3, knowing that it needs to forward the multicast packets, de-encapsulates the packets and 
sends them toward H1. (This action allows R1 and R3 to distribute the multicasts while the 
registration process completes.) R5 forwards the group trafﬁc to R4 and R4 forwards it on 
its LAN. 
NOTE
The notation (*,G) represents a single RPT. The * represents a wildcard, meaning “any 
source,” because the PIM-SM routers use this shared tree regardless of the source of the packets. 
For example, a packet sent from any source IP address, arriving at the RP, and destined to group 
228.8.8.8, would cause the RP to use its (*,228.8.8.8) multicast routing table entries, because 
these entries are part of the RPT for group 228.8.8.8.
KEY 
POINT

Sparse-Mode Routing Protocols     713
4.
R3 joins the SPT for source 10.1.1.10, group 228.8.8.8, by sending a PIM-SM Join message 
for group (10.1.1.10,228.8.8.8) toward the source 10.1.1.10. 
5.
When R1 and R2 receive the PIM-SM Join message from R2 requesting the group trafﬁc from 
the source, they start forwarding group trafﬁc toward the RP. At this point, R3 (the RP) now 
receives this trafﬁc on the SPT from the source. However, R1 is also still sending the Register 
messages with encapsulated multicast packets to R3.
6.
R3 sends unicast Register-Stop messages to R1. When R1 receives the Register-Stop 
messages from R3, it stops sending the encapsulated unicast Register messages to R3. 
Figure 20-15
Source Registration when the RP Needs to Receive Packets Sent to that Group
The process may seem like a lot of trouble, but at the end of the process, multicasts are delivered 
to the correct locations. The process uses the efﬁcient SPT from the source to the RP, and the 
shared tree (*,228.8.8.8) from the RP to the subnets that need to receive the trafﬁc.
Note that the PIM protocols could have just let a router near the source, such as R1 in this example, 
continue to encapsulate multicasts inside the unicast Register messages. However, it is inefﬁcient 
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
PIM-SM Join
(10.1.1.10, 228.8.8.8)
Multicast Packets (10.1.1.10, 228.8.8.8)
Unicast Register Messages
Unicast Register-Stop
RP
10.1.10.3
4
6
1
5
3
2
Unicast Register
Message
Multicast Packet
(10.1.1.10, 228.8.8.8)
Multicast Traffic - RPT
(*, 228.8.8.8)
Multicast Traffic
(10.1.1.10, 228.8.8.8)

714     Chapter 20: IP Multicast Routing
to make R1 encapsulate every multicast packet, make R3 de-encapsulate every packet, and then 
make R3 forward the trafﬁc. So, PIM-SM has the RP, R3 in this case, join the group-speciﬁc tree 
for that (S,G) combination. 
Shared Distribution Tree
In Figure 20-15, the group trafﬁc that ﬂows over the path from the RP (R3) to R5 to R4 is called 
a shared distribution tree. It is also called a root-path tree (RPT) because it is rooted at the RP. If 
the network has multiple sources for the same group, trafﬁc from all the sources would ﬁrst travel 
to the RP (as shown with the trafﬁc from host S1 in Figure 20-14), and then travel down this shared 
RPT to all the receivers. Because all sources in the multicast group use a common shared tree, a 
wildcard notation of (*,G) is used to identify an RPT, where * represents all sources and G 
represents the multicast group address. The RPT for the group 228.8.8.8 shown in Figure 20-14 
would be written as (*,228.8.8.8).
Example 20-7 shows the multicast route table entry for R4 in Figure 20-15. On a Cisco router, the 
show ip mroute command displays the multicast route table entries.
The interpretation of the information shown in Example 20-7 is as follows:
■
The ﬁrst line shows that the (*,G) entry for the group 228.8.8.8 was created 8 seconds ago, 
and if R4 does not forward group packets using this entry in 2 minutes and 58 seconds, it will 
expire. Every time R4 forwards a packet, the timer is reset to 3 minutes. This entry was created 
because R4 received an IGMP Join message from H1.
■
The RP for this group is 10.1.10.3 (R3). The S ﬂag indicates that this group is using the 
sparse-mode (PIM-SM) routing protocol. The C ﬂag indicates that R4 has a directly 
connected group member for 228.8.8.8.
■
The incoming interface for this (*,228.8.8.8) entry is s0 and the RPF neighbor is 10.1.6.5. 
Note that for the SPT, the RPF interface is chosen based on the route to reach the RP, not the 
route used to reach a particular source.
■
Group trafﬁc is forwarded out on the Ethernet0 interface. In this example, Ethernet0 was 
added to the outgoing interface list because an IGMP Report message was received on this 
interface from H1. This interface has been in the forwarding state for 8 seconds. The Prune 
timer indicates that if an IGMP Join is not received again on this interface within the next 
2 minutes and 52 seconds, it will be removed from the outgoing interface list.
Example 20-7
Multicast Route Table Entry for the Group 228.8.8.8 for R4
 (*, 228.8.8.8), 00:00:08/00:02:58, RP 10.1.10.3, flags: SC
  Incoming interface: Serial0, RPF nbr 10.1.6.5
  Outgoing interface list:
    Ethernet0, Forward/Sparse, 00:00:08/00:02:52

Sparse-Mode Routing Protocols     715
Steady-State Operation by Continuing to Send Joins
To maintain the forwarding state of interfaces, PIM-SM routers must send PIM Join messages 
periodically. If a router fails to send Joins periodically, PIM-SM moves interfaces back to a pruned 
state. 
PIM-SM routers choose to maintain the forwarding state on links based on two general criteria:
■
A downstream router continues to send PIM joins for the group.
■
A locally connected host still responds to IGMP Query messages with IGMP Report 
messages for the group.
Figure 20-16 shows an example in which R5 maintains the forwarding state of its link to R3 based 
on both of these reasons. H2 has also joined the shared tree for 228.8.8.8. H1 had joined earlier, 
as shown in Figures 20-14 and 20-15.
Figure 20-16
Host H2 Sends an IGMP Join Message
Example 20-8 shows the multicast route table entry for R5 in Figure 20-16, with these two 
interfaces in a forwarding state.
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
Periodic IGMP Reports
228.8.8.8
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
Periodic PIM Joins
(*, 228.8.8.8)
Periodic PIM Joins
(*, 228.8.8.8)
H2
10.1.8.0/24
.5
Periodic IGMP Reports
228.8.8.8
E0
.2
Multicast Traffic
(10.1.1.10, 228.8.8.8)
KEY 
POINT

716     Chapter 20: IP Multicast Routing
In Example 20-8, two interfaces are listed in the outgoing interface list. The s1 interface is listed 
because R5 has received a PIM-SM Join message from R4. In PIM-SM, the downstream routers 
need to keep sending PIM-SM Join messages every 60 seconds to the upstream router. When R5 
receives another PIM-SM Join from R4 on its s1 interface, it resets the Prune timer to the default 
value of 3 minutes. If R5 does not receive a PIM-SM Join from R4 before R5’s Prune timer on that 
interface expires, R5 places its s1 interface in a pruned state and stops forwarding the trafﬁc on the 
interface.
By contrast, R5’s e0 interface is listed as forwarding in R5’s outgoing interface list because R5 has 
received an IGMP Join message from H2. Recall from Chapter 19 that a multicast router sends an 
IGMP general query every 60 or 125 seconds (depending on the IGMP version) on its LAN 
interfaces. It must receive at least one IGMP Report/Join message as a response for a group; 
otherwise, it stops forwarding the group trafﬁc on the interface. When R5 receives another IGMP 
Report message on its e0 interface, it resets the Prune timer for the entry to the default value of 
3 minutes.
Note also that on R5, the receipt of the PIM Join from R4, or the IGMP Report on e0, triggers 
R5’s need to send the PIM Join toward the RP.
Examining the RP’s Multicast Routing Table
In the current state of the ongoing example, as last shown in Figure 20-16, the RP (R3) has joined 
the SPT for source 10.1.1.10, group 228.8.8.8. The RP also is the root of the shared tree for group 
228.8.8.8. Example 20-9 shows both entries in R3’s multicast route table.
Example 20-8
Multicast Route Table Entry for the Group 228.8.8.8 for R5
(*,228.8.8.8), 00:00:05/00:02:59, RP 10.1.10.3, flags: SC
  Incoming interface: Serial0, RPF nbr 10.1.5.3
  Outgoing interface list:
    Serial1, Forward/Sparse, 00:01:15/00:02:20
    Ethernet0, Forward/Sparse, 00:00:05/00:02:55
Example 20-9
Multicast Route Table Entry for the Group 228.8.8.8 for R3
(*,228.8.8.8), 00:02:27/00:02:59, RP 10.1.10.3, flags: S
  Incoming interface: Null, RPF nbr 0.0.0.0
  Outgoing interface list:
    Serial0, Forward/Sparse, 00:02:27/00:02:33
(10.1.1.10/32, 228.8.8.8), 00:02:27/00:02:33, flags: T
  Incoming interface: Serial1, RPF nbr 10.1.3.2,
  Outgoing interface list:
  Outgoing interface list: Null 

Sparse-Mode Routing Protocols     717
The ﬁrst entry shows the shared tree, as indicated by the S ﬂag. Notice the incoming interface is 
Null because R3, as RP, is the root of the tree. Also, the RPF neighbor is listed as 0.0.0.0 for the 
same reason. In other words, it shows that the shared-tree trafﬁc for the group 228.8.8.8 has 
originated at this router and it does not depend on any other router for the shared-tree trafﬁc.
The second entry shows the SPT entry on R3 for multicast group 228.8.8.8, source 10.1.1.10. The 
T ﬂag indicates that this entry is for an SPT, and the source is listed at the beginning of that same 
line (10.1.1.10). The incoming interface is s1 and the RPF neighbor for the source address 
10.1.1.10 is 10.1.3.2.
As you can see, an RP uses the SPT to pull the trafﬁc from the source to itself and uses the shared 
tree to push the trafﬁc down to the PIM-SM routers that have requested it.
Shortest-Path Tree Switchover
PIM-SM routers could continue forwarding packets via the PIM-SM two-step process, whereby 
sources send packets to the RP, and the RP sends them to all other routers using the RPT. However, 
one of the most fascinating aspects of PIM-SM operations is that each PIM-SM router can build 
the SPT between itself and the source of a multicast group and take advantage of the most efﬁcient 
path available from the source to the router. In Figure 20-16, R4 is receiving the group trafﬁc from 
the source via the path R1-R2-R3-R5-R4. However, it is obvious that it would be more efﬁcient 
for R4 to receive the group trafﬁc directly from R1 on R4’s s1 interface.
In the section “Completion of the Source Registration Process,” earlier in this chapter, you saw 
that the PIM-SM design allows an RP to build an SPT between itself and the router that is directly 
connected with the source (also called the source DR) to pull the group trafﬁc. Similarly, the PIM-
SM design also allows any other PIM-SM router to build an SPT between the router and the source 
DR. This feature allows a PIM-SM router to avoid using the inefﬁcient path, such as the one used 
by R4 in Figure 20-16. Also, once the router starts receiving the group trafﬁc over the SPT, it can 
send a Prune message to the upstream router of the shared tree to stop forwarding the trafﬁc for 
the group. 
The question is, when should a router switch over from RPT to SPT? RFC 2362 for PIM-SM 
speciﬁes that, “The recommended policy is to initiate the switch to the SP-tree after receiving a 
signiﬁcant number of data packets during a speciﬁed time interval from a particular source.” What 
number should be considered as a signiﬁcant number? The RFC does not specify that. Cisco 
routers, by default, switch over from the RPT to the source-speciﬁc SPT after they receive the ﬁrst 
packet from the shared tree. 
NOTE
You can change this behavior by conﬁguring the global command ip pim spt-
threshold rate on any router for any group. Once the trafﬁc rate exceeds the stated rate (in kbps), 
the router joins the SPT. The command impacts the behavior only on the router(s) on which it 
is conﬁgured.

718     Chapter 20: IP Multicast Routing
If a router is going to switch to SPT, why join the RPT ﬁrst? In PIM-SM, a router does not know 
the IP address of a source until it receives at least one packet for the group from the source. After 
it receives one packet on the RPT, it can learn the IP address of a source, and initialize a switchover 
to the SPT for that (source,group) combination. 
With the default Cisco PIM-SM operation, when multicast packets begin arriving on R4’s s0 
interface via the shared tree, R4 attempts to switch to the SPT for source 10.1.1.10. Figure 20-17 
shows the general steps.
Figure 20-17
R4 Initializing Switchover from RPT to SPT by Sending a PIM-SM Join to R1
The ﬁrst three steps Figure 20-17 are as follows:
1.
The source (S1,10.1.1.10) sends a multicast packet to the ﬁrst-hop router R1.
2.
R1 forwards the packet to the RP (R3).
3.
The RP forwards the packet to R4 via the shared tree. 
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
H2
10.1.8.0/24
.5
E0
.2
Multicast Traffic
(10.1.1.10, 228.8.8.8)
1
2
3
4
Multicast Traffic - RPT
(*, 228.8.8.8)
Multicast Traffic - SPT
(10.1.1.10, 228.8.8.8)
5
Multicast Traffic - 
(10.1.1.10, 228.8.8.8)
PIM-SM Join
(10.1.1.10, 228.8.8.8)

Sparse-Mode Routing Protocols     719
At Step 3, R4 learned that the source address of the multicast group 228.8.8.8 is 10.1.1.10. 
So, besides forwarding the packet at Step 3, R4 can use that information to join the SPT for 
group 228.8.8.8, from source 10.1.1.10, using the following steps from Figure 20-17.
4.
R4 consults its unicast routing table, ﬁnds the next-hop address and outgoing interface it 
would use to reach source 10.1.1.10, and sends the PIM-SM Join message out that interface 
(s1) to R1. This PIM-SM Join message is speciﬁcally for the SPT of (10.1.1.10,228.8.8.8). 
The Join travels hop by hop until it reaches the source DR.
5.
As a result of the Join, R1 places its s1 interface in a forwarding state for SPT 
(10.1.1.10,228.8.8.8). So, R1 starts forwarding multicasts from 10.1.1.10 to 228.8.8.8 out its 
s1 interface as well.
R4 now has a multicast routing table entry for the SPT, as shown in Example 20-10. 
In Example 20-10, you see two entries for the group. The J ﬂag (for join) on both the entries 
indicates that the trafﬁc was switched from RPT to SPT, and now the (S,G) entry will be used for 
forwarding multicast packets for the group. Notice that the incoming interfaces for the (*,G) entry 
and (S,G) entry are different. 
Pruning from the Shared Tree
Once a PIM-SM router has joined a more efﬁcient SPT, it may not need to receive multicast 
packets over the RPT any more. For example, when R4 in Figure 20-17 notices that it is receiving 
the group trafﬁc over RPT and SPT, it can and should ask the RP to stop sending the trafﬁc.
To stop the RP from forwarding trafﬁc to a downstream router on the shared tree, the downstream 
router sends a PIM-SM Prune message to the RP. The Prune message references the (S,G) SPT, 
which identiﬁes the IP address of the source. Essentially, this prune means the following to the RP:
Stop forwarding packets from the listed source IP address, to the listed group address, 
down the RPT.
For example, in Figure 20-18, which continues the example shown in Figure 20-17, R4 sends a 
Prune out its s0 interface toward R5. The Prune lists (S,G) entry (10.1.1.10,228.8.8.8), and it sets 
a bit called the RP-tree bit (RPT-bit). By setting the RPT-bit in the Prune message, R4 informs 
Example 20-10
Multicast Route Table Entry for the Group 228.8.8.8 for R4
(*,228.8.8.8), 00:02:36/00:02:57, RP 10.1.10.3, flags: SCJ
  Incoming interface: Serial0, RPF nbr 10.1.6.5
  Outgoing interface list:
    Ethernet0, Forward/Sparse, 00:02:36/00:02:13
(10.1.1.10/32, 228.8.8.8), 00:00:23/00:02:33, flags: CJT
  Incoming interface: Serial1, RPF nbr 10.1.4.1,
  Outgoing interface list:
Ethernet0, Forward/Sparse, 00:00:23/00:02:37

720     Chapter 20: IP Multicast Routing
R5 (the upstream router) that it has switched to SPT and the Prune message is for the redundant 
trafﬁc for the group 228.8.8.8, from 10.1.1.10, that R4 is receiving on the shared tree.
Figure 20-18
R4 Sends PIM-SM Prune with RP Bit Set to R5
To stop the packets from being sent over the RPT to R4, R5 must prune its interface s1 in the RPT 
(*, 228.8.8.8). R5 may go on to join the SPT for (10.1.1.10,228.8.8.8.8) as well.
This concludes the coverage of the operations of PIM-SM. The next section covers some details 
about how routers can learn the IP address of the PIM RP.
Dynamically Finding RPs and Using Redundant RPs
In a PIM-SM network, every router must somehow learn the IP address of an RP. A PIM-SM 
router can use one of the following three methods to learn the IP address of an RP:
■
The RP address can be statically conﬁgured on all the PIM-SM routers with the Cisco IOS 
global command ip pim rp-address address. This is the method used for the ﬁve-router 
topology shown in Figure 20-19.
■
The Cisco-proprietary Auto-RP protocol can be used to designate the RP and advertise its IP 
address so that all PIM-SM routers can learn its IP address automatically.
■
A standard BootStrap Router (BSR) protocol can be used to designate the RP and advertise 
its IP address so that all the PIM-SM routers can learn its IP address automatically.
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
PIM-SM
RPT-bit Prune
(10.1.1.10, 228.8.8.8)
H2
10.1.8.0/24
.5
E0
.2
Multicast Traffic
(10.1.1.10, 228.8.8.8)
KEY 
POINT

Sparse-Mode Routing Protocols     721
Additionally, because PIM-SM relies so heavily on the RP, it makes sense to have redundant RPs. 
Cisco IOS offers two methods of providing redundant RPs, which are also covered in this section:
■
Anycast RP using the Multicast Source Discovery Protocol (MSDP)
■
BootStrap Router (BSR)
Dynamically Finding the RP Using Auto-RP
Static RP conﬁguration is suboptimal under the following conditions:
■
When an enterprise has a large number of PIM-SM routers and the enterprise wants to use 
many different RPs for different groups, it becomes time consuming and cumbersome to 
statically conﬁgure the IP addresses of many RPs for different groups on all the routers.
■
When an RP fails or needs to be changed because a new RP is being installed, it becomes 
extremely difﬁcult in a statically conﬁgured PIM-SM domain to switch over to an alternative 
RP without considerable downtime.
Auto-RP provides an alternative in which routers dynamically learn the unicast IP address used by 
each RP. Auto-RP uses a two-step process, which is shown in Figure 20-19 and Figure 20-20. In 
the ﬁrst step, the RP sends RP-Announce messages to the reserved multicast address 224.0.1.39, 
stating that the router is an RP. The RP-Announce message also allows the router to advertise the 
multicast groups for which it is the RP, thereby allowing some load-balancing of the RP workload 
among different routers. The RP continues to send these RP-Announce messages every minute.
Figure 20-19
R3 Sends RP-Announce Messages
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
RP-Announce
(10.1.10.3, 224.0.1.39)
“Use my address
10.1.10.3 as an RP
address for all groups.”
H2
10.1.8.0/24
.5
E0
.2
Multicast Traffic
(10.1.1.10, 228.8.8.8)
1
KEY 
POINT

722     Chapter 20: IP Multicast Routing
For example, Figure 20-19 shows R3 as an RP that uses Auto-RP. R3 supports all multicast 
groups in this case. The RP-Announce message is shown as Step 1, to link it with Step 2 in 
Figure 20-20.
The second step for Auto-RP requires that one router be conﬁgured as a mapping agent. The 
mapping agent is usually the same router that was selected as an RP, but can be a different PIM-
SM router. The mapping agent learns all the RPs and the multicast groups they each support. Then, 
the mapping agent multicasts another message, called RP-Discovery, that identiﬁes the RP for 
each range of multicast group addresses. This message goes to reserved multicast address 
224.0.1.40. It is this RP-Discovery message that actually informs the general router population as 
to which routers they should use as RPs.
For example, in Figure 20-20, R2 is conﬁgured as a mapping agent. To receive all RP-Announce 
messages, R2 locally joins the well-known Cisco-RP-Announce multicast group 224.0.1.39. In 
other words, the mapping agent has become a group member for 224.0.1.39 and is listening for 
the group trafﬁc. When R2 receives the RP-Announce packets shown in Figure 20-19, it examines 
the packet, creates group-to-RP mappings, and maintains this information in its cache, as shown 
in Figure 20-20. 
Figure 20-20
R2 Creates Group-to-RP Mappings and Sends Them in RP-Discovery Messages
R1
R4
R5
R2
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
H2
10.1.8.0/24
.5
E0
.2
3
RP-Discovery
(10.1.2.2, 224.0.1.40)
Note these Group-To-RP
Mappings:
3
Group
224.0.0.0/4
RP Address
10.1.10.3
RP-Discovery
(10.1.3.2, 224.0.1.40)
Note these Group-To-RP
Mappings:
Group
224.0.0.0/4
RP Address
10.1.10.3
2
“I am a Mapping Agent.”
Group-To-RP Mappings:
Group
224.0.0.0/4
RP Address
10.1.10.3
KEY 
POINT

Sparse-Mode Routing Protocols     723
At ﬁrst glance, the need for the mapping agent may not be obvious. Why not just let the RPs 
announce themselves to all the other routers? Well, if Auto-RP supported only one RP, or even 
only one RP to support each multicast group, the mapping agent would be a waste of effort. 
However, to support RP redundancy—in other words, to support multiple RPs that can act as RP 
for the same multicast group—the Auto-RP mapping agent decides which RP should be used to 
support each group at the moment. To do so, the mapping agent selects the router with the highest 
IP address as an RP for the group. (Note that you can also conﬁgure multiple mapping agents, for 
redundancy.)
As soon as Cisco routers are conﬁgured with PIM-SM and Auto-RP, they automatically join the 
well-known Cisco-RP-Discovery multicast group 224.0.1.40. That means they are listening to the 
group address 224.0.1.40, and when they receive a 224.0.1.40 packet, they learn group-to-RP 
mapping information and maintain it in their cache. When a PIM-SM router receives an IGMP 
Join message for a group or PIM-SM Join message from a downstream router, it checks the 
group-to-RP mapping information in its cache. Then it can proceed as described throughout 
the PIM-SM explanations in this chapter, using that RP as the RP for that multicast group.
The following list summarizes the steps used by Auto-RP:
1.
Each RP is conﬁgured to use Auto-RP and to announce itself and its supported multicast 
groups via RP-Announce messages (224.0.1.39).
2.
The Auto-RP mapping agent, which may or may not also be an RP router, gathers information 
about all RPs by listening to the RP-Announce messages. 
3.
The mapping agent builds a mapping table that lists the currently best RP for each range of 
multicast groups, with the mapping agent picking the RP with the highest IP address if 
multiple RPs support the same multicast groups.
4.
The mapping agent sends RP-Discover messages to 224.0.1.40 advertising the mappings.
5.
All routers listen for packets sent to 224.0.1.40 to learn the mapping information and ﬁnd the 
correct RP to use for each multicast group.
Finally, one last small but important point deserves some attention before moving on to BSR. 
Auto-RP creates a small chicken-and-egg problem in that the purpose of Auto-RP is to ﬁnd the 
RPs, but to get the RP-Announce and RP-Discovery messages, PIM-SM routers would need to 
send a Join toward the RP, which they do not know yet. To overcome this problem, Cisco added a 
variation of PIM called sparse-dense mode. In PIM sparse-dense mode, a router uses PIM-DM 
rules when it does not know the location of the RP, and PIM-SM rules when it does know the 
location of the RP. So, under normal conditions with Auto-RP, the routers would use dense mode 
long enough to learn the group-to-RP mappings from the mapping agent, and then switch over to 
sparse mode. Also, if any other multicast trafﬁc occurred before the routers learned of the RPs 
using Auto-RP, the multicast packets would still be forwarded using dense-mode rules. (PIM 
KEY 
POINT
KEY 
POINT

724     Chapter 20: IP Multicast Routing
sparse-dense mode is conﬁgured per interface using the ip pim sparse-dense-mode interface 
subcommand.)
Dynamically Finding the RP Using BSR
Cisco provided the proprietary Auto-RP feature to solve a couple of speciﬁc problems. PIM 
Version 2, which came later, provided a different solution to the same problem, namely the 
BootStrap Router (BSR) feature. From a very general perspective, BSR works similarly to
Auto-RP. Each RP sends a message to another router, which collects the group-to-RP mapping 
information. That router then distributes the mapping information to the PIM routers. However, 
any examination of BSR beyond that level of detail shows that these two tools do differ in 
many ways.
It is helpful to ﬁrst understand the concept of the bootstrap router, or BSR router, before thinking 
about the RPs. One router acts as BSR, which is similar to the mapping agent in Auto-RP. The 
BSR receives mapping information from the RPs, and then it advertises the information to other 
routers. However, there are some speciﬁc differences between the actions of the BSR, and their 
implications, and the actions of the Auto-RP mapping agent:
■
The BSR router does not pick the best RP for each multicast group; instead, the BSR router 
sends all group-to-RP mapping information to the other PIM routers inside bootstrap messages. 
■
PIM routers each independently pick the currently best RP for each multicast group by 
running the same hash algorithm on the information in the bootstrap message.
■
The BSR ﬂoods the mapping information in a bootstrap message sent to the all-PIM-routers 
multicast address (224.0.0.13).
■
The ﬂooding of the bootstrap message does not require the routers to have a known RP or to 
support dense mode. (This will be described in more detail in the next few pages.)
Figure 20-21 shows an example, described next, of how the BSR ﬂoods the bootstrap message. 
PIMv2 creates speciﬁc rules for BSR bootstrap messages, stating that PIM routers should ﬂood 
these messages. PIM-SM routers ﬂood bootstrap messages out all non-RPF interfaces, which in 
effect guarantees that at least one copy of the message makes it to every router. Note that this logic 
is not dependent on a working dense- or spare-mode implementation. As a result, BSR overcomes 
the chicken-and-egg problem of Auto-RP. 
For example, in Figure 20-21, imagine that R4’s s1 interface is its RPF interface to reach R2, and 
R5’s RPF interface to reach R2 is its s0 interface. So, they each forward the bootstrap messages at 
Step 3 of Figure 20-21. However, because R4 receives the bootstrap message from R5 on one of 
R4’s non-RPF interfaces, R4 discards the packet, thereby preventing loops. R5 also does not 
forward the bootstrap message any further for the same basic reasons.

Sparse-Mode Routing Protocols     725
Figure 20-21
BSR Flooding Bootstrap Messages
The other important part of BSR operation is for each candidate RP (c-RP) to inform the BSR 
router that it is an RP and to identify the multicast groups it supports. This part of the process with 
BSR is simple if you keep in mind the following point: 
All PIM routers already know the unicast IP address of the BSR based on the earlier 
receipt of bootstrap messages. 
So, the c-RPs simply send unicast messages, called c-RP Advertisements, to the BSR. These c-RP 
advertisements include the IP address used by the c-RP, and the groups it supports.
The BSR feature supports redundant RPs and redundant BSRs. As mentioned earlier, the bootstrap 
message sent by the BSR router includes all candidate RPs, with each router using the same hash 
algorithm to pick the currently best RP for each multicast group. The mapping information can list 
multiple RPs that support the same group addresses. 
Additionally, multiple BSR routers can be conﬁgured. In that case, each candidate BSR (c-BSR) 
router sends bootstrap messages that include the priority of the BSR router and its IP address. The 
highest-priority BSR wins, or if a tie occurs, the highest BSR IP address wins. Then, the winning 
BSR, called the preferred BSR, continues to send bootstrap messages, while the other BSRs 
monitor those messages. If the preferred BSR’s bootstrap messages cease, the redundant BSRs can 
attempt to take over.
R1
R4
R5
R2
BSR
R3
H1
.10
E0 .1
.1
S0
S1
.2
S0
.2
S1
.3
.5
.5
.1
.3
S1
S0
10.1.5.0/24
10.1.4.0/24
10.1.7.0/24
10.1.6.0/24
S0
S1
.4
.4
.4
E0
.1
S0
S1
10.1.1.0/24
10.1.2.0/24
10.1.3.0/24
RP
10.1.10.3
H2
10.1.8.0/24
.5
E0
.2
Bootstrap
1
Bootstrap
1
Bootstrap
2
Bootstrap
3
Bootstrap
3
Bootstrap
2

726     Chapter 20: IP Multicast Routing
Anycast RP with MSDP
The ﬁnal tool covered here for ﬁnding a router’s RP is called Anycast RP with Multicast Source 
Discovery Protocol (MSDP). Anycast RP is actually an implementation feature more than a new 
feature with new conﬁguration commands. As will be explained in the upcoming pages, Anycast 
RP can actually use static RP conﬁguration, Auto-RP, and BSR.
The key differences between using Anycast RP and using either Auto-RP or BSR relate to how the 
redundant RPs are used. The differences are as follows:
■
Without Anycast RP—RP redundancy allows only one router to be the active RP for each 
multicast group. Load sharing of the collective work of the RPs is accomplished by using one 
RP for some groups and another RP for other groups.
■
With Anycast RP—RP redundancy and load sharing can be achieved with multiple RPs 
concurrently acting as the RP for the same group 
The way Anycast RP works is to have each RP use the same IP address. The RPs must advertise 
this address, typically as a /32 preﬁx, with its IGP. Then, the other methods of learning an RP—static 
conﬁguration, Auto-RP, and BSR—all view the multiple RPs as a single RP. At the end of the 
process, any packets sent to “the” RP are routed per IGP routes to the closest RP. Figure 20-22 
shows an example of the process. 
Figure 20-22
Learning the RP Address with Anycast RP
Figure 20-22 shows a design using two RPs (RP-East and RP-West) along with Auto-RP. The steps 
shown in the ﬁgure are as follows:
1.
Both RPs are conﬁgured with 172.16.1.1/32, and conﬁgured to use that IP address for RP 
functions. In this case, both are conﬁgured to be the RP for all multicast groups.
R1
Mapping
Agent
RP-Announce
172.16.1.1,
224.0.0.0/4
2
4
RP-Announce
172.16.1.1,
224.0.0.0/4
1 RP so far. Mapping:
All groups, 172.16.1.1
RP-Discovery
Messages
2
3
RP-West
RP-East
R-W1
R-E1
Configuration:
RP Address: 172.16.1.1
Groups: 224.0.0.0/4
Use Auto RP
Loop1: 172.16.1.1/32
1
RP Learned via Auto RP:
172.16.1.1
5
RP Learned via Auto RP:
172.16.1.1
5
Configuration:
RP Address: 172.16.1.1
Groups: 224.0.0.0/4
Use Auto RP
Loop1: 172.16.1.1/32
1
KEY 
POINT

Sparse-Mode Routing Protocols     727
2.
Both RPs act as normal for Auto-RP by sending RP-Announce messages to 224.0.1.39.
3.
The Auto-RP mapping agent builds its mapping table with a single entry, because it cannot 
tell the difference between the two RPs, because both use IP address 172.16.1.1.
4.
The Auto-RP mapping agent acts as normal, sending an RP-Discovery message to 
224.0.1.40. It includes (in this case) a single mapping entry: all groups map to 172.16.1.1.
5.
All the routers, including routers R-W1 and R-E1, learn via Auto-RP that the single RP for 
all groups is 172.16.1.1.
The last step described in the list brings the discussion to the main beneﬁt of Anycast RP. At this 
point, the core Auto-RP function of advertising the IP address of the RP is complete. Of course, 
the IP address exists on two routers in Figure 20-22, but it could be more than that in other designs. 
Because of the IGP routes, when routers in the western part of the network (like R-W1) send 
packets to the RP at 172.16.1.1, they are actually sending the packets to RP-West. Likewise, when 
routers in the eastern part of the network (like R-E1) send packets to the RP (172.16.1.1), they are 
actually sending the packets to RP-East. This behavior is only achieved by using the Anycast RP 
implementation option beyond simply using Auto-RP. 
The two biggest beneﬁts of this design with Anycast RP are as follows:
■
Multiple RPs share the load for a single multicast group.
■
Recovery after a failed RP happens quickly. If an RP fails, multicast trafﬁc is only interrupted 
for the amount of time it takes the IGP to converge to point to the other RP sharing the same 
IP address.
The design of Anycast RP creates a problem that must be overcome using MSDP. The problem 
relates to the fact that each individual RP builds its own shared tree, but any multicast source sends 
packets to one of the RPs. For example, Figure 20-23 shows the same network as Figure 20-22, 
but now with a multicast source in the western part of the network. The routers in the west side of 
the ﬁgure receive the packets as distributed by RP-West via its shared tree. However, the routers 
in RP-East’s shared tree do not get the packets because RP-East never gets the packet sent by the 
server in the west side. 
The solution to this problem is for the RPs to tell each other about all known sources by using 
MSDP. MSDP allows RPs to send messages to each other, revealing the IP addresses of each 
source for each multicast group. In Figure 20-23, RP-West could tell RP-East about the multicast 
source for 226.1.1.1 at unicast IP address 172.16.5.5. Then, RP-East can join the SPT of source 
172.16.5.5, group 226.1.1.1, just as it would have done if it had received the multicast trafﬁc 
directly from 172.16.5.5.
KEY 
POINT

728     Chapter 20: IP Multicast Routing
Figure 20-23
The Anycast RP Problem (Later Solved with MSDP)
Summary: Finding the RP
This section covers the concepts behind four separate methods for ﬁnding the RP. Three are 
speciﬁc conﬁguration features, namely static conﬁguration, Auto-RP, and BSR. The fourth, 
Anycast RP, actually uses any of the ﬁrst three methods, but with the design that includes having 
the RPs use the same unicast IP address to achieve better redundancy features. Table 20-3 
summarizes the methods of ﬁnding the RP with PIM-SM.
Table 20-3
Comparison of Methods of Finding the RP 
KEY 
POINT
Method
RP Details
Mapping Info
Redundant 
RP 
Support?
Load 
Sharing 
of One 
Group?
Static
Simple reference to 
unicast IP address.
—
No
No
Auto-RP
Sends RP-Announce to 
224.0.1.39; relies on 
sparse-dense mode.
Mapping agent sends via 
RP-Discovery to 
224.0.1.40
Yes
No
R1
1
4
3
3
RP-West
RP-East
R-W1
R-E1
H2
2
Forward on my Shared
Tree – that doesn’t
include the East!
I’m part of RP-East’s
Shared Tree – I don’t
get the packets!
Scope of RP-West’s
Shared Tree
Scope of RP-East’s
Shared Tree
Source for 226.1.1.1
IP Address 172.16.5.5

Sparse-Mode Routing Protocols     729
Bidirectional PIM
PIM-SM works efﬁciently with a relatively small number of multicast senders. However, in cases 
with a large number of senders and receivers, PIM-SM becomes less efﬁcient. Bidirectional PIM 
addresses this relative inefﬁciency by slightly changing the rules used by PIM-SM.
To appreciate bidirectional PIM, a brief review of PIM-SM’s normal operations is useful. While 
many variations can occur, the following general steps can be used by PIM-SM:
1.
The RP builds a shared tree, with itself as the root, for forwarding multicast packets.
2.
When a source ﬁrst sends multicasts, the router nearest the source forwards the multicasts to 
the RP, encapsulated inside a PIM Register message.
3.
The RP joins the source-speciﬁc tree for that source by sending a PIM Join toward that source.
4.
Later, the routers attached to the same LANs as the receivers can send a PIM Join toward the 
source to join the SPT for that source.
With bidirectional PIM, the last three steps in this list are not performed. Bidirectional PIM instead 
follows these steps:
1.
As with normal PIM-SM, the RP builds a shared tree, with itself as the root, for forwarding 
multicast packets.
2.
When a source sends multicasts, the router receiving those multicasts does not use a PIM 
Register message. Instead, it forwards the packets in the opposite direction of the shared tree, 
back up the tree toward the RP. This process continues for all multicast packets from the source. 
3.
The RP forwards the multicasts via the shared tree. 
4.
All packets are forwarded per Steps 2 and 3. The RP does not join the source tree for the 
source, and the leaf routers do not join the SPT, either.
Method
RP Details
Mapping Info
Redundant 
RP 
Support?
Load 
Sharing 
of One 
Group?
BSR
Sends c-RP 
advertisements as 
unicasts to BSR IP 
address; does not need 
sparse-dense mode.
Sends bootstrap messages 
ﬂooded over non-RPF path
Yes
No
Anycast RP
Each RP uses identical 
IP addresses.
Can use Auto-RP or BSR 
normal processes
Yes
Yes
Table 20-3
Comparison of Methods of Finding the RP (Continued)
KEY 
POINT

730     Chapter 20: IP Multicast Routing
The name “bidirectional” comes from Step 2, in which the router near the source forwards packets 
back up the tree toward the RP. The other direction in the tree is used at Step 3, with the RP 
forwarding multicasts using the shared tree.
Comparison of PIM-DM and PIM-SM
One of the most confusing parts of the PIM-DM and PIM-SM designs is that it appears that if 
sources keep sending, and receivers keep listening, there is no difference between the end results 
of the end-user multicast packet ﬂow using these two options. Once PIM-SM completes its more 
complicated processes, the routers near the receivers have all joined the SPT to the source, and the 
most efﬁcient forwarding paths are used for each (S,G) tree.
Although its underlying operation is a bit more complicated, PIM-SM tends to be the more 
popular option today. PIM-SM’s inherent strategy of not forwarding multicasts until hosts request 
them makes it more efﬁcient during times of low usage. When the numbers of senders and 
receivers increases, PIM-SM quickly moves to use the SPT—the same SPT that would have been 
derived using PIM-DM. As such, PIM-SM has become a more popular option for most enterprise 
implementations today. It has also become a popular option for interdomain multicast as well.
Table 20-4 summarizes the important features of PIM-DM and PIM-SM.
Table 20-4
Comparison of PIM-DM and PIM-SM 
KEY 
POINT
Feature
PIM-DM
PIM-SM
Destination address for 
Version 1 Query messages, 
and IP protocol number
224.0.0.2 and 2
224.0.0.2 and 2
Destination address for 
Version 2 Hello messages, 
and IP protocol number
224.0.0.13 and 103
224.0.0.13 and 103
Default interval for Query 
and Hello messages
30 seconds
30 seconds
Default Holdtime for 
Versions 1 & 2
90 seconds
90 seconds
Rule for electing a 
designated router on a 
multiaccess network
Router with the highest IP 
address on the subnet
Router with the highest IP address 
on the subnet
Main design principle
A router automatically receives 
the trafﬁc. If it does not want the 
trafﬁc, it has to say no (send a 
Prune message) to its sender. 
Unless a router speciﬁcally makes a 
request to an RP, it does not receive 
multicast trafﬁc.

Sparse-Mode Routing Protocols     731
Feature
PIM-DM
PIM-SM
SPT or RPT?
Uses only SPT
First uses RPT and then switches to 
SPT
Uses Join/Prune messages? 
Yes
Yes
Uses Graft and Graft-Ack 
messages?
Yes
No
Uses Prune Override 
mechanism?
Yes
Yes
Uses Assert message?
Yes
Yes
Uses RP?
No
Yes
Uses source registration 
process?
No
Yes
Table 20-4
Comparison of PIM-DM and PIM-SM (Continued)

732     Chapter 20: IP Multicast Routing
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” section of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with a Key Point icon.
Table 20-5 lists the protocol standards referenced in this chapter.
Table 20-6 lists some of the most common Cisco IOS commands related to the topics in this 
chapter and Chapter 19.
Table 20-5
RFC Reference for Chapter 20
RFC
What It Deﬁnes
3973
PIM-DM
3618
MSDP
3446
Anycast RP
2362 
PIM-SM
1584
Multicast Extensions to OSPF
Table 20-6
Command Reference for Chapters 19 and 20 
Command
Command Mode and Description
ip multicast-routing
Global mode; required ﬁrst command on Cisco routers to use 
multicasting. 
ip pim dense-mode1 
Interface conﬁg mode; conﬁgures the interface to use PIM-DM 
routing protocol.
ip pim sparse-mode1
Interface conﬁg mode; conﬁgures the interface to use PIM-SM 
routing protocol.
ip pim sparse-dense-mode
Interface conﬁg mode; conﬁgures the interface to use PIM-SM 
routing protocol for a group if the RP address is known; 
otherwise, uses PIM-DM routing protocol.

Foundation Summary     733
Command
Command Mode and Description
ip igmp version {1 | 2}
Interface conﬁg mode; sets the IGMP version on an interface. 
The default is 2.
ip igmp query-interval seconds
Interface conﬁg mode; changes the interval for IGMP queries 
sent by the router from the default 60 seconds.
ip igmp query-max-response-
time seconds 
Interface conﬁg mode; changes the Max Response Time 
advertised in IGMP Queries from the default of 10 seconds for 
IGMPv2 and IGMPv3.
ip igmp join-group group-address
Interface conﬁg mode; conﬁgures a router to join a multicast 
group. The group-address is a multicast IP address in four-part 
dotted-decimal notation. 
ip multicast boundary access-list 
[ﬁlter-autorp] 
Interface conﬁg mode; conﬁgures an interface as a multicast 
boundary for administrative scoping. A numbered or named 
access list controls the range of group addresses affected by the 
boundary. (Optional) ﬁlter-autorp ﬁlters Auto-RP messages 
denied by the boundary ACL.
ip multicast ttl-threshold ttl-value
Interface conﬁg mode; conﬁgures an interface as a multicast 
boundary for TTL scoping. Time-to-Live value represents 
number of hops, ranging from 0 to 255. The default value is 0, 
which means that all multicast packets are forwarded out the 
interface.
ip cgmp 
Interface conﬁg mode; enables support for CGMP on an 
interface.
ip pim version {1 | 2} 
Interface conﬁg mode; sets the PIM version on an interface. The 
default is 2.
ip pim query-interval seconds
Interface conﬁg mode; changes the interval for PIMv2 Hello or 
PIMv1 Router Query messages from the default 60 seconds.
ip pim message-interval seconds 
Interface conﬁg mode; changes the interval for sparse-mode Join/
Prune messages from the default 60 seconds.
ip pim spt-threshold {kbps | 
inﬁnity} [group-list access-list-
number]
Global mode; speciﬁes the incoming rate for the multicast trafﬁc 
for a PIM-SM router to switch from RPT to SPT. The default is to 
switch after the ﬁrst multicast packet is received. If the group-list 
option is used, the command parameters are applied only to the 
groups permitted by the access list; otherwise, they are applied to 
all groups. 
Table 20-6
Command Reference for Chapters 19 and 20 (Continued)
continues

734     Chapter 20: IP Multicast Routing
Command
Command Mode and Description
ip pim rp-address rp-address 
[access-list] [override]
Global mode; statically conﬁgures the IP address of an 
RP where rp-address is a unicast IP address in four-part, 
dotted notation. (Optional) access-list represents a number or 
name of an access list that deﬁnes for which multicast groups 
the RP should be used. (Optional) override indicates that if 
there is a conﬂict, the RP conﬁgured with this command 
prevails over the RP learned dynamically by Auto-RP or any 
other method.
ip pim send-rp-announce 
interface-type interface-number 
scope ttl-value [group-list access-
list] [interval seconds]
Global mode; conﬁgures the router to be an RP, and the router 
sends RP-Announce messages using the Auto-RP method for the 
interface address selected. Scope represents the TTL. (Optional) 
group-list deﬁnes the multicast groups for which this router is 
RP. (Optional) interval changes the announcement frequency 
from the default 60 seconds.
ip pim send-rp-discovery 
[interface-type interface-number] 
scope ttl-value
Global mode; conﬁgures the router to be a mapping agent, and 
the router sends RP-Discovery messages using the Auto-RP 
method. scope represents the TTL. (Optional) The IP address of 
the interface speciﬁed is used as the source address for the 
messages. The default is to use the IP address of the interface on 
which the message is sent as the source address.
ip pim rp-announce-ﬁlter rp-list 
access-list group-list access-list
Global mode; conﬁgures a mapping agent to ﬁlter RP-
Announce messages coming from speciﬁc RPs. rp-list access-
list speciﬁes a number or name of a standard access list that 
speciﬁes that this ﬁlter is only for the RP addresses permitted in 
this ACL. group-list access-list speciﬁes a number or name of a 
standard access list that describes permitted group addresses. 
The ﬁlter deﬁnes that only the group range permitted in the 
group-list access-list should be accepted from the RP-
Announcements received from the RP addresses permitted by 
the rp-list access-list.
show ip igmp groups [group-name 
| group-address | interface-type 
interface-number] [detail] 
User mode; displays the list of multicast groups for which the 
router has directly connected group members, learned via IGMP.
show ip mroute [group-address | 
group-name] [source-address | 
source-name] [interface-type 
interface-number] [summary] 
[count] [active kbps]
User mode; displays the contents of the IP multicast routing 
table.
Table 20-6
Command Reference for Chapters 19 and 20 (Continued)

Foundation Summary     735
Table 20-7 summarizes important ﬂags displayed in an mroute entry when you use the command 
show ip mroute.
Command
Command Mode and Description
show ip pim neighbor [interface-
type interface-number]
User mode; displays the list of neighbors discovered by PIM.
show ip pim rp [mapping [elected 
| in-use] | metric] [rp-address]
User mode; displays the active RPs associated with multicast 
groups.
show ip rpf {source-address | 
source-name} [metric]
User mode; displays the information IP multicasting routing uses 
to perform the RPF check.
clear ip cgmp [interface-type 
interface-number]
Enable mode; the router sends a CGMP Leave message and 
instructs the switches to clear all group entries they have 
cached.
debug ip igmp
Enable mode; displays IGMP messages received and sent, and 
IGMP-host-related events.
debug ip pim
Enable mode; displays PIM messages received and sent, and 
PIM-related events.
1When you configure any one of these commands on a LAN interface, IGMPv2 is automatically enabled on the 
interface.
Table 20-7
mroute Flags
KEY 
POINT
Flag
Description
D (dense)
Entry is operating in dense mode.
S (sparse)
Entry is operating in sparse mode.
C (connected)
A member of the multicast group is present on the directly connected 
interface.
L (local)
The router itself is a member of the multicast group.
P (pruned)
Route has been pruned.
R (RP-bit set)
Indicates that the (S,G) entry is pointing toward the RP. The RP is typically in 
a pruned state along the shared tree after a downstream router has switched to 
SPT for a particular source.
F (register ﬂag)
Indicates that the software is registering for a multicast source.
Table 20-6
Command Reference for Chapters 19 and 20 (Continued)
continues

736     Chapter 20: IP Multicast Routing
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter.
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty 
sets of some of the key summary tables from the “Foundation Topics” section of this chapter. 
Then, simply ﬁll in the tables from memory, checking your answers when you review 
the “Foundation Topics” section tables that have a Key Point icon beside them. The PDFs 
can be found on the CD in the back of the book, or at http://www.ciscopress.com/title/
1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
dense-mode protocol, RPF check, sparse-mode protocol, RP, multicast scoping, TTL scoping, 
administrative scoping, PIM-DM, PIM Hello message, designated router, source-based 
Flag
Description
T (SPT-bit set)
Indicates that packets have been received on the shortest-path source
tree.
J (join SPT)
This ﬂag has meaning only for sparse-mode groups. For (*,G) entries, the 
J ﬂag indicates that the rate of trafﬁc ﬂowing down the shared tree has 
exceeded the SPT-Threshold set for the group. This calculation is done once 
a second. On Cisco routers, the default SPT-Threshold value is 0 kbps. When 
the J ﬂag is set on the (*,G) entry and the router has a directly connected 
group member denoted by the C ﬂag, the next (S,G) packet received down 
the shared tree will trigger a switch over from RPT to SPT for source S and 
group G.
For (S,G) entries, the J ﬂag indicates that the entry was created because the 
router has switched over from RPT to SPT for the group. When the J ﬂag is 
set for the (S,G) entries, the router monitors the trafﬁc rate on SPT and 
switches back to RPT for this source if the trafﬁc rate on the source tree falls 
below the group’s SPT-Threshold for more than 1 minute. 
Table 20-7
mroute Flags

Memory Builders     737
distribution tree, multicast state information, Join/Prune message, upstream router, downstream 
router, Graft message, Graft Ack message, Prune Override, Assert message, DVMRP, MOSPF, 
PIM-SM, source DR, source registration, shared distribution tree, shortest-path tree switchover, 
PIM-SM (S, G) RP-bit Prune, Auto-RP
Further Reading
Developing IP Multicast Networks, Volume I, by Beau Williamson (Cisco Press, 2000).


Part VII: Security
Chapter 21
Security

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Security
— Access Lists
— LAN Security
— Device Security/Access
— Spooﬁng

C H A P T E R 21
Security 
Over the years, the CCIE program has expanded to add several CCIE certiﬁcations besides the 
Routing and Switching track. As a result, some topics previously covered in the Routing and 
Switching exam have been removed, or shortened, because they are more appropriate for 
another CCIE track. For example, the CCIE Routing and Switching track formerly covered 
voice to some degree, but the CCIE Voice track now covers voice to a much deeper level.
The topics in this chapter are certainly covered in more detail in the CCIE Security written and 
lab exams. However, because security has such an important role in networks, and because 
many security features relate speciﬁcally to router and switch operations, some security details 
remain within the CCIE Routing and Switching track. This chapter covers many of the core 
security features related to routers and switches.
“Do I Know This Already?” Quiz
Table 21-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
Table 21-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Router and Switch Device Security
1–3
Layer 2 Security
4–6
Layer 3 Security
7–9
Total Score

742     Chapter 21: Security
1.
Consider the following conﬁguration commands, which will be pasted into a router’s 
conﬁguration. Assuming no other AAA conﬁguration or other security-related conﬁguration 
exists before pasting in this conﬁguration, which of the following is true regarding the process 
and sequences for authentication of a user attempting to enter privileged mode?
eeeennnnaaaabbbblllleeee    sssseeeeccccrrrreeeetttt    ffffrrrreeeedddd
eeeennnnaaaabbbblllleeee    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    wwwwiiiillllmmmmaaaa
uuuusssseeeerrrrnnnnaaaammmmeeee    bbbbaaaarrrrnnnneeeeyyyy    ppppaaaasssssssswwwwoooorrrrdddd    bbbbeeeettttttttyyyy
aaaaaaaaaaaa    nnnneeeewwww----mmmmooooddddeeeellll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    eeeennnnaaaabbbblllleeee    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    eeeennnnaaaabbbblllleeee    wwwwiiiillllmmmmaaaa    ggggrrrroooouuuupppp    ffffrrrreeeedddd    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ffffrrrreeeedddd    lllliiiinnnneeee    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    nnnnoooonnnneeee
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....1111    aaaauuuutttthhhh----ppppoooorrrrtttt    1111888811112222    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....2222    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    kkkkeeeeyyyy    cccciiiissssccccoooo
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....3333    aaaauuuutttthhhh----ppppoooorrrrtttt    1111888811112222    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....4444    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    kkkkeeeeyyyy    cccciiiissssccccoooo
aaaaaaaaaaaa    ggggrrrroooouuuupppp    sssseeeerrrrvvvveeeerrrr    rrrraaaaddddiiiiuuuussss    ffffrrrreeeedddd    
sssseeeerrrrvvvveeeerrrr    11110000....1111....1111....3333    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
sssseeeerrrrvvvveeeerrrr    11110000....1111....1111....4444    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
lllliiiinnnneeee    ccccoooonnnn    0000
    ppppaaaasssssssswwwwoooorrrrdddd    cccciiiissssccccoooo
    llllooooggggiiiinnnn    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    ffffrrrreeeedddd
lllliiiinnnneeee    vvvvttttyyyy    0000    4444
    ppppaaaasssssssswwwwoooorrrrdddd    cccciiiissssccccoooo
a. The user will only need to supply a password of “fred” without a username.
b. The RADIUS server at either 10.1.1.1 or 10.1.1.2 must approve the username/password 
supplied by the user.
c. The RADIUS server at 10.1.1.3 is checked ﬁrst; if no response, then the server at 
10.1.1.4 is checked.
d. None of these answers is correct.
2.
Using the same exhibit and conditions as question 1, which of the following is true regarding 
the process and sequences for authentication of a user attempting to log in through the 
console?
a. A simple password of “cisco” will be required.
b. The user will supply a username/password, which will be authenticated if either server 
10.1.1.1 or 10.1.1.2 returns a RADIUS message approving the user.
c. The username/password is presented to the RADIUS server at 10.1.1.3 ﬁrst; if no 
response, then the server at 10.1.1.4 is checked next.
d. None of these answers is correct.

“Do I Know This Already?” Quiz     743
3.
Using the same exhibit and conditions as question 1, which of the following is true regarding 
the process and sequences for authentication of a user attempting to log in via Telnet?
a. A simple password of cisco will be required.
b. The router will attempt authentication with RADIUS server 10.1.1.1 ﬁrst; if no 
response, then 10.1.1.2; if no response, then it will require password cisco.
c. The router will attempt authentication with RADIUS server 10.1.1.1 ﬁrst; if no 
response, then 10.1.1.2; if no response, then it will require a username/password of 
betty/barney.
d. The username/password is presented to the RADIUS server at 10.1.1.3 ﬁrst; if no 
response, then the server at 10.1.1.4 is checked next.
e. If neither 10.1.1.1 nor 10.1.1.2 respond, the user cannot be authenticated, and is 
rejected.
f. None of the other answers is correct.
4.
Which of the following are considered best practices for Layer 2 security?
a. Inspect ARP messages to prevent hackers from causing hosts to create incorrect ARP 
table entries.
b. Enable port security.
c. Put all management trafﬁc in VLAN 1, but no user trafﬁc.
d. Conﬁgure DTP to use the auto setting.
e. Shut down unused ports.
5.
Assuming a Cisco 3550 switch, which of the following is true regarding the port security 
feature?
a. The default maximum number of MACs allowed to be reached on an interface is three.
b. Sticky-learned MAC addresses are automatically added to the startup conﬁguration 
once they are learned the ﬁrst time.
c. Dynamic (non-sticky) learned MAC addresses are added to the running conﬁguration, 
but they can be saved using the copy run start command.
d. A port must be set to be a static access or trunking port for port security to be allowed on 
the interface.
e. None of the other answers is correct.

744     Chapter 21: Security
6.
Which of the following is true regarding the use of IEEE 802.1X for LAN user authentication?
a. The EAPoL protocol is used between the authenticator and authentication server.
b. The supplicant is client software on the user’s device. 
c. A switch acts in the role of 802.1X authentication server.
d. The only trafﬁc allowed to exit a currently unauthenticated 802.1X port are 802.1X-related 
messages.
7.
The following ACE is typed into conﬁguration mode on a router: access-list 1 permit 10.44.38.0 
0.0.3.255. If this statement had instead used a different mask, with nothing else changed, which 
of the following choices for mask would result in a match for source IP address 10.44.40.18?
a. 0.0.1.255
b. 0.0.5.255
c. 0.0.7.255
d. 0.0.15.255
8.
An enterprise uses a registered class A network. A smurf attack occurs from the Internet, with 
the enterprise receiving lots of ICMP Echoes, destined to subnet broadcast address 9.1.1.255, 
which is the broadcast address of an actual deployed subnet (9.1.1.0/24) in the enterprise. The 
packets all have a source address of 9.1.1.1. Which of the following tools might help mitigate 
the effects of the attack?
a. Ensure that the no ip directed-broadcast command is conﬁgured on the router inter-
faces connected to the 9.1.1.0/24 subnet.
b. Conﬁgure an RPF check so that the packets would be rejected based on the invalid 
source IP address.
c. Routers will not forward packets to subnet broadcast addresses, so there is no need for 
concern in this case.
d. Filter all packets sent to addresses in subnet 9.1.1.0/24.
9.
Which of the following statements is true regarding the router Cisco IOS Software TCP 
intercept feature?
a. Always acts as a proxy for incoming TCP connections, completing the client-side con-
nection, and only then creating a server-side TCP connection.
b. Can monitor TCP connections for volume and for incomplete connections, as well as 
serve as a TCP proxy.
c. If enabled, must operate on all TCP connection requests entering a particular interface.
d. None of the other answers is correct.

Router and Switch Device Security     745
Foundation Topics
Router and Switch Device Security
Securing access to a router or switch CLI is one of the ﬁrst steps in securing a routed/switched 
network. Cisco includes several basic mechanisms appropriate for protecting devices in a lab, as 
well as more robust security features appropriate for devices deployed in production environments. 
Additionally, these same base authentication features can be used to authenticate dial PPP users. 
The ﬁrst section of this chapter examines each of these topics.
Simple Password Protection for the CLI
Figure 21-1 provides a visual reminder of some hopefully familiar details about how users 
can reach a router’s CLI user mode, and move into enable (privileged) mode using the enable 
command.
Figure 21-1
Router User and Enable Modes
Figure 21-1 shows three methods to reach user mode on a router. The ﬁgure also applies to Cisco 
IOS–based switches, except that Cisco switches do not have auxiliary ports.
Cisco IOS can be conﬁgured to require simple password protection for each of the three methods 
to access user mode. To do so, the login line subcommand is used to tell Cisco IOS to prompt the 
user for a password, and the password command deﬁnes the password. The conﬁguration mode 
implies for which of the three access methods the password should be required. Example 21-1 
shows a simple example.
User
Mode
Privileged
Mode*
router>enable
password: zzzzz 
router#
router#disable
router>
*Also Called
Enable Mode
Console
Aux
Telnet

746     Chapter 21: Security
These passwords are stored as clear text in the conﬁguration, but they can be encrypted by 
including the service password-encryption global command. Example 21-2 shows the results 
of adding this command.
Note that when the service password-encryption command is added to the conﬁguration, all 
clear-text passwords in the running conﬁguration are changed to an encrypted value. The 
passwords in the startup conﬁguration are not changed until the copy running-conﬁg startup-
conﬁg (or write memory for all you fellow old-timers out there) command has been used to save 
the conﬁguration. Also, after disabling password encryption (no service password-encryption), 
passwords are not automatically decrypted—instead, Cisco IOS waits for a password to be 
changed before listing the password in its unencrypted form.
Note that the encryption used by the service password-encryption command is weak. Publicly 
available tools can decrypt the password. The encryption is useful to prevent the curious from logging 
into a router or switch, but it provides no real protection against even a hacker with modest ability.
Better Protection of Enable and Username Passwords
The password required by the enable command can be deﬁned by either the enable password 
pw command or the enable secret pw command. If both are conﬁgured, the enable exec command 
only accepts the password deﬁned in the enable secret command. 
Example 21-1
Simple User Mode CLI Password Protection
! The llllooooggggiiiinnnn and ppppaaaasssssssswwwwoooorrrrdddd commands under lllliiiinnnneeee    ccccoooonnnn    0000 tell the router to supply a password   
! prompt, and define the password required at the console port, respectively.
lllliiiinnnneeee    ccccoooonnnn    0000
    llllooooggggiiiinnnn
    ppppaaaasssssssswwwwoooorrrrdddd    ffffrrrreeeedddd
! 
lllliiiinnnneeee    vvvvttttyyyy    0000    11115555
    llllooooggggiiiinnnn
    ppppaaaasssssssswwwwoooorrrrdddd    bbbbaaaarrrrnnnneeeeyyyy
Example 21-2
Using the service password-encryption Command
! The sssseeeerrrrvvvviiiicccceeee    ppppaaaasssssssswwwwoooorrrrdddd----eeeennnnccccrrrryyyyppppttttiiiioooonnnn global command causes all existing clear-text
! passwords in the running config to be encrypted.
sssseeeerrrrvvvviiiicccceeee    ppppaaaasssssssswwwwoooorrrrdddd----eeeennnnccccrrrryyyyppppttttiiiioooonnnn
! The “7” in the ppppaaaasssssssswwwwoooorrrrdddd commands means that the following value is the 
! encrypted password per the sssseeeerrrrvvvviiiicccceeee    ppppaaaasssssssswwwwoooorrrrdddd----eeeennnnccccrrrryyyyppppttttiiiioooonnnn command.
lllliiiinnnneeee    ccccoooonnnn    0000
    ppppaaaasssssssswwwwoooorrrrdddd    7777    00005555000088880000FFFF1111CCCC2222222244443333
    llllooooggggiiiinnnn
lllliiiinnnneeee    vvvvttttyyyy    0000    4444
    ppppaaaasssssssswwwwoooorrrrdddd    7777    00000000000077771111AAAA111155550000777755554444
    llllooooggggiiiinnnn

Router and Switch Device Security     747
The password in the enable password command follows the same encryption rules as login passwords, 
only being encrypted if the service password-encryption command is conﬁgured. However, the enable 
secret password is not affected by service password-encryption. Instead, it is always stored as an MD5-
hashed value, instead of being encrypted, resulting in a much harder to break password. Example 21-3 
shows how Cisco IOS represents this subtle difference in how the password values are stored.
The username name password password command has a feature similar to the enable secret 
command. The service password-encryption command encrypts the password listed in the 
username name password password command; however, the username name secret password 
command uses the same MD5 hash as the enable secret command to better protect the password. 
And, as with enable secret, a 5 is listed in the command as stored in the conﬁguration—for 
example, username barney secret 5 $1$oMnb$EGf1zE5QPip4UW7TTqQTR.
User Mode and Privileged Mode AAA Authentication
The term authentication, authorization, and accounting (AAA) refers to a variety of common 
security features. This section focuses on the ﬁrst “A” in AAA—authentication—and how it is 
used to manage access to a router or IOS switch’s user mode and privileged mode.
The strongest authentication method to protect the CLI is to use a TACACS+ or RADIUS server. The 
Cisco Secure Access Control Server (ACS) is a Cisco Systems software product that can be installed 
on Unix, Linux, and several Windows platforms, holding the set of usernames and passwords used 
for authentication. The routers and switches then need to receive the username and password from 
the user, send it as encrypted trafﬁc to the server, and receive a reply—either accepting or rejecting 
the user. Table 21-2 summarizes some of the key facts about RADIUS and TACACS+.
Example 21-3
Differences in Hashed/Encrypted Enable Passwords
! The enable password lists a 7 in the output to signify an encrypted value 
! per the sssseeeerrrrvvvviiiicccceeee    ppppaaaasssssssswwwwoooorrrrdddd----eeeennnnccccrrrryyyyppppttttiiiioooonnnn command; the
! eeeennnnaaaabbbblllleeee    sssseeeeccccrrrreeeetttt command lists a 5, signifying an MD5-hashed value.
sssseeeerrrrvvvviiiicccceeee    ppppaaaasssssssswwwwoooorrrrdddd----eeeennnnccccrrrryyyyppppttttiiiioooonnnn
!!!!
eeeennnnaaaabbbblllleeee    sssseeeeccccrrrreeeetttt    5555    $$$$1111$$$$GGGGvvvvDDDDMMMM$$$$uuuuxxxx////PPPPhhhhTTTTwwwwSSSSssssccccDDDDNNNNOOOOyyyyNNNNIIIIyyyyrrrr5555BBBBeeee////
eeeennnnaaaabbbblllleeee    ppppaaaasssssssswwwwoooorrrrdddd    7777    000077770000CCCC222288885555FFFF4444DDDD000066664444BBBB    
Table 21-2
Comparing RADIUS and TACACS+ for Authentication
KEY 
POINT
RADIUS
TACACS+
Scope of Encryption: packet payload or just the password
Password only
Entire payload
Layer 4 Protocol
UDP
TCP
Well-Known Port/IOS Default Port Used for authentication
1812/16451
49/49
Standard or Cisco-Proprietary
RFC 2865
Proprietary
1Radius originally defined port 1645 as the well-known port, which was later changed to port 1812.
KEY 
POINT

748     Chapter 21: Security
Using a Default Set of Authentication Methods
AAA authentication conﬁguration includes commands by which a set of authentication methods 
is deﬁned. A single authentication method is exactly what it sounds like—a way to authenticate a 
user. For example, one method is to ask a RADIUS server to authenticate a login user; another is 
to let a router look at a set of locally deﬁned username commands. A set of conﬁguration methods 
represents an ordered list of authentication methods, each of which is tried in order until one of 
the methods returns an authentication response, either accepting or rejecting the user.
The simplest AAA conﬁguration deﬁnes a default set of authentication methods used for all router 
or switch logins, plus a second set of default authentication methods used by the enable command. 
The deﬁned default login authentication methods apply to all login access—console, Telnet, and 
aux (routers only). The default authentication methods used by the enable command simply 
dictate what Cisco IOS does when a user types the enable command. The overall conﬁguration 
uses the following general steps:
Step 1
Enable AAA authentication with the aaa new-model global command.
Step 2
If using RADIUS or TACACS+, deﬁne the IP address(es) and encryption 
keys used by the server(s) by using the radius-server host, radius-server 
key, tacacs-server host, and tacacs-server key commands.
Step 3
Deﬁne the default set of authentication methods used for all CLI access by 
using the aaa authentication login default command.
Step 4
Deﬁne the default set of authentication methods used for enable-mode 
access by using the aaa authentication enable default command.
Example 21-4 shows a sample router conﬁguration using these commands. In this case, two 
RADIUS servers are conﬁgured. One of the servers uses the Cisco IOS default port of 1645, and 
the other uses the reserved well-known port 1812. Per the following conﬁguration, this router 
attempts the following authentication:
■
When a login attempt is made, Cisco IOS attempts authentication using the ﬁrst RADIUS 
server; if there’s no response, IOS tries the second RADIUS server; if there’s no response, the 
user is allowed in (authentication mode none). 
■
When any user issues the enable command, the router tries the RADIUS servers, in order; if 
none of the RADIUS servers replies, the router will accept the single username/password 
conﬁgured on the router of cisco/cisco. 
Example 21-4
Differences in Hashed/Encrypted Enable Passwords 
! The next command shows that the enable secret password is still configured,
! but it will not be used. The uuuusssseeeerrrrnnnnaaaammmmeeee command defines a user/password that
! will be used for enable authentication if the RADIUS servers are not reachable.
! Note that the 0000 in the uuuusssseeeerrrrnnnnaaaammmmeeee command means the password is not encrypted.
KEY 
POINT

Router and Switch Device Security     749
Using Multiple Authentication Methods
AAA authentication allows reference to multiple servers and to multiple authentication methods 
so that a user can be authenticated even if one authentication method is not working. The aaa 
authentication command supports up to four methods on a single command. Additionally, there 
is no practical limit to the number of RADIUS or TACACS+ servers that can be referenced in a 
RADIUS or TACACS+ server group. The logic used by Cisco IOS when using these methods is 
as follows:
■
Use the ﬁrst listed method ﬁrst; if that method does not respond, move on to the next, and then 
the next, and so on until a method responds. Use the ﬁrst-responding-method’s decision 
(allow or reject).
■
If a method refers to a set of more than one server, try the ﬁrst server, with “ﬁrst” being based 
on the order of the commands in the conﬁguration ﬁle. If no response, move on to the next 
sequential server, and so on, until a server responds. Use the ﬁrst-responding-server’s decision 
(allow or reject).
■
If no response occurs for any method, reject the request.
R1# sssshhhhoooowwww    rrrruuuunnnnnnnniiiinnnngggg----ccccoooonnnnffffiiiigggg
! lines omitted for brevity
eeeennnnaaaabbbblllleeee    sssseeeeccccrrrreeeetttt    5555    $$$$1111$$$$GGGGvvvvDDDDMMMM$$$$uuuuxxxx////PPPPhhhhTTTTwwwwSSSSssssccccDDDDNNNNOOOOyyyyNNNNIIIIyyyyrrrr5555BBBBeeee////
uuuusssseeeerrrrnnnnaaaammmmeeee    cccciiiissssccccoooo    ppppaaaasssssssswwwwoooorrrrdddd    0000    cccciiiissssccccoooo
! Next, AAA is enabled, and the default enable and login authentication is 
! defined. 
aaaaaaaaaaaa    nnnneeeewwww----mmmmooooddddeeeellll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    eeeennnnaaaabbbblllleeee    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    nnnnoooonnnneeee
! Next, the two RADIUS servers are configured. The port numbers were omitted when
! the    rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....2222    command was issued, and IOS filled in its 
! default. Similarly,    rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....1111    aaaauuuutttthhhh----ppppoooorrrrtttt    1111888811112222    was issued, 
! with IOS adding the accounting port number default into the command.
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....1111    aaaauuuutttthhhh----ppppoooorrrrtttt    1111888811112222    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....2222    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    kkkkeeeeyyyy    cccciiiissssccccoooo
! Before adding AAA configuration, both the console and vtys had both the llllooooggggiiiinnnn
! and ppppaaaasssssssswwwwoooorrrrdddd    commands as listed in Example 21-1. The act of enabling AAA 
! deleted the    llllooooggggiiiinnnn    command, which now by default uses the settings on global 
! command    aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ddddeeeeffffaaaauuuulllltttt. The passwords remaining below would
! be used only if the    aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    command listed a method of “line.” 
lllliiiinnnneeee    ccccoooonnnn    0000
    ppppaaaasssssssswwwwoooorrrrdddd    cccciiiissssccccoooo
lllliiiinnnneeee    vvvvttttyyyy    0000    4444
    ppppaaaasssssssswwwwoooorrrrdddd    cccciiiissssccccoooo
Example 21-4
Differences in Hashed/Encrypted Enable Passwords (Continued)
KEY 
POINT

750     Chapter 21: Security
For example, Example 21-4 listed RADIUS servers 10.1.1.1 and 10.1.1.2, in that order, so those 
servers would be checked in that same order. If neither replies, then the next method would be 
used—none for login sessions (meaning automatically allow the user in), and local (meaning 
authenticate based on conﬁgured username commands).
Table 21-3 lists the authentication methods allowed for login and enable (privileged exec) mode, 
along with a brief description.
Groups of AAA Servers
By default, Cisco IOS automatically groups RADIUS and TACACS+ servers conﬁgured with 
the radius-server host and tacacs-server host commands into groups, aptly named radius and 
tacacs+. The aaa authentication command includes the keywords group radius or group 
tacacs+ to refer to these default groups. By default, all deﬁned RADIUS servers end up in the 
radius group, and all deﬁned TACACS+ servers end up in the tacacs+ group.
In some cases, particularly with larger-scale dial implementations, a design may call for the 
separation of different sets of RADIUS or TACACS+ servers. To do so, servers can be grouped by 
name. Example 21-5 shows an example conﬁguration with two servers in a RADIUS group named 
fred, and shows how the aaa authentication command can refer to the group.
Table 21-3
Authentication Methods for Login and Enable
KEY 
POINT
Method
Meaning 
group radius
Use the conﬁgured RADIUS servers
group tacacs+
Use the conﬁgured TACACS+ servers
group name
Use a deﬁned group of either RADIUS or TACACS+ servers
enable
Use the enable password, based on enable secret or enable password commands
line1
Use the password deﬁned by the password command in line conﬁguration mode
local
Use username commands in the local conﬁguration; treats the username as case 
insensitive, but the password as case sensitive
local-case
Use username commands in the local conﬁguration; treats both the username and 
password as case sensitive
none
No authentication required; user is automatically authenticated
1Cannot be used for enable authentication.
Example 21-5
Conﬁguring a RADIUS Server Group 
! The next three commands create RADIUS group fred. Note that the servers are
! configured inside AAA group config mode, using the sssseeeerrrrvvvveeeerrrr    subcommand. Note that
! IOS added the aaaauuuutttthhhh----ppppoooorrrrtttt and aaaacccccccctttt----ppppoooorrrrtttt parameters automatically.

Router and Switch Device Security     751
Overriding the Defaults for Login Security
The console, vty, and aux (routers only) lines can override the use of the default login authentication 
methods. To do so, in line conﬁguration mode, the login authentication name command is used 
to point to a named set of conﬁguration methods. Example 21-6 shows a named group of conﬁguration 
methods called for-console, for-vty, and for-aux, with each applied to the related login method. 
Each of the named groups deﬁnes a different set of authentication methods. Example 21-6 shows 
an example that implements the following requirements:
■
console—Try the RADIUS servers, and use the line password if no response
■
vty—Try the RADIUS servers, and use local usernames/passwords if no response
■
aux—Try the RADIUS servers, and do not authenticate if no response
R1(config)# aaaaaaaaaaaa    ggggrrrroooouuuupppp    sssseeeerrrrvvvveeeerrrr    rrrraaaaddddiiiiuuuussss    ffffrrrreeeedddd    
R1(config-group)# sssseeeerrrrvvvveeeerrrr    11110000....1111....1111....3333    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
R1(config-group)# sssseeeerrrrvvvveeeerrrr    11110000....1111....1111....4444    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
! To use group fred instead of the default group, the aaa authentication 
! commands need to refer to group fred, as shown next. 
aaaaaaaaaaaa    nnnneeeewwww----mmmmooooddddeeeellll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    eeeennnnaaaabbbblllleeee    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    ffffrrrreeeedddd    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    ffffrrrreeeedddd    nnnnoooonnnneeee
Example 21-6
Overriding the Default Login Authentication Method
! The configuration shown here has been added to the configuration from earlier
! examples. 
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ffffoooorrrr----ccccoooonnnnssssoooolllleeee    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    lllliiiinnnneeee
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ffffoooorrrr----vvvvttttyyyy    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss    llllooooccccaaaallll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    llllooooggggiiiinnnn    ffffoooorrrr----aaaauuuuxxxx    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss
! The methods are enabled below with the llllooooggggiiiinnnn    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn commands. Note that
! the local passwords still exist on the console and vtys; for the console, 
! that password would be used (based on the lllliiiinnnneeee keyword in the aaaaaaaaaaaa    
!!!!    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn command above) if the RADIUS servers are all nonresponsive.
! However, the vty ppppaaaasssssssswwwwoooorrrrdddd command would not be used by this configuration.
lllliiiinnnneeee    ccccoooonnnn    0000
    ppppaaaasssssssswwwwoooorrrrdddd    7777    11114444111144441111BBBB111188880000FFFF0000BBBB
    llllooooggggiiiinnnn    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    ffffoooorrrr----ccccoooonnnnssssoooolllleeee
lllliiiinnnneeee    aaaauuuuxxxx    0000
    llllooooggggiiiinnnn    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    ffffoooorrrr----aaaauuuuxxxx
lllliiiinnnneeee    vvvvttttyyyy    0000    4444
    ppppaaaasssssssswwwwoooorrrrdddd    7777    111100004444DDDD000000000000AAAA0000666611118888
    llllooooggggiiiinnnn    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    ffffoooorrrr----vvvvttttyyyy
Example 21-5
Conﬁguring a RADIUS Server Group (Continued)

752     Chapter 21: Security
PPP Security
As described in Chapter 17, “Synchronous Serial Links and Protocols,” PPP provides the 
capability to use PAP and CHAP for authentication, which is particularly useful for dial 
applications. Chapter 17 used only the default authentication method for CHAP/PAP—namely, 
the reliance on a locally conﬁgured set of username name password password commands.
Cisco IOS supports the use of AAA authentication for PPP using the same general set of 
commands as used for login authentication. The conﬁguration steps are as follows:
Step 1
Just as with login authentication, enable AAA authentication with the aaa 
new-model global command.
Step 2
Just as with login authentication, if used, conﬁgure RADIUS and/or 
TACACS+ servers, using the same commands and syntax as used for login 
and enable authentication.
Step 3
Similar to login authentication, deﬁne PPP to use a default set of authentication 
methods with the aaa authentication ppp default command. (The only 
difference is that the ppp keyword is used instead of login.)
Step 4
Similar to login authentication, use the aaa authentication ppp list-name 
method1 [method2...] command to create a named group of methods that 
can be used instead of the default set.
Step 5
To use a named group of authentication methods instead of the default set, 
use the ppp authentication {protocol1 [protocol2...]} list-name command. 
For example, the command ppp authentication chap fred references 
the authentication methods deﬁned by the aaa authentication ppp fred 
command.
Layer 2 Security
The Cisco SAFE Blueprint document (available at http://www.cisco.com/go/safe) suggests a wide 
variety of best practices for switch security. In most cases, the recommendations depend on one 
of three general characterizations of the switch ports, as follows:
■
Unused ports—Switch ports that are not yet connected to any device—for example, switch 
ports that are pre-cabled to a faceplate in an empty cubicle
■
User ports—Ports cabled to end-user devices, or any cabling drop that sits in some physically 
unprotected area
■
Trusted ports or trunk ports—Ports connected to fully trusted devices, like other switches 
known to be located in an area with good physical security
KEY 
POINT

Layer 2 Security     753
The following list summarizes the best practices that apply to both unused and user ports. The 
common element between these types of ports is that a malicious person can gain access once they 
get inside the building, without having to gain further access behind the locked door to a wiring 
closet or data center.
■
Disable unneeded dynamic protocols like CDP and DTP.
■
Disable trunking by conﬁguring these ports as access ports. 
■
Enable BPDU Guard and Root Guard to prevent STP attacks and keep a stable STP topology.
■
Use either Dynamic ARP Inspection (DAI) or private VLANs to prevent frame snifﬁng.
■
Enable port security to at least limit the number of allowed MAC addresses, and possibly 
restrict the port to use only speciﬁc MAC addresses.
■
Use 802.1X user authentication.
■
Use DHCP snooping and IP Source Guard to prevent DHCP DoS and man-in-the-middle 
attacks. 
Besides the preceding recommendations speciﬁcally for unused ports and user ports, the Cisco 
SAFE Blueprint makes the following additional recommendations:
■
For any port (including trusted ports), consider the general use of private VLANs to further 
protect the network from snifﬁng, including preventing routers or L3 switches from routing 
packets between devices in the private VLAN.
■
Conﬁgure VTP authentication globally on each switch to prevent DoS attacks.
■
Disable unused switch ports and place them in an unused VLAN.
■
Avoid using VLAN 1.
■
For trunks, do not use the native VLAN.
The rest of this section’s coverage of switch security addresses the points in these two lists of best 
practices, with the next subsection focusing on best practices for unused and user ports (based on 
the ﬁrst list), and the following subsection focusing on the general best practices (based on the 
second list). 
Switch Security Best Practices for Unused and User Ports
The ﬁrst three items in the list of best practices for unused and user ports are mostly covered in 
earlier chapters. For a brief review, Example 21-7 shows an example conﬁguration on a Cisco 
3550 switch, with each of these items conﬁgured and noted. In this example, fa0/1 is a currently 
unused port. CDP has been disabled on the interface, but it remains enabled globally, on the 
KEY 
POINT
KEY 
POINT

754     Chapter 21: Security
presumption that some ports still need CDP enabled. DTP has been disabled as well, and STP Root 
Guard and BPDU Guard are enabled.
Port Security
Switch port security monitors a port to restrict the number of MAC addresses associated with that 
port in the Layer 2 switching table. It can also enforce a restriction for only certain MAC addresses 
to be reachable out the port. 
To implement port security, the switch adds more logic to its normal process of examining incoming 
frames. Instead of automatically adding a Layer 2 switching table entry for the source MAC 
and port number, the switch considers the port security conﬁguration and whether it allows that 
entry. By preventing MACs from being added to the switch table, port security can prevent the 
switch from forwarding frames to those MACs on a port. 
Port security supports the following key features:
■
Limiting the number of MACs that can be associated with the port
■
Limiting the actual MAC addresses associated with the port, based on three methods:
— Static conﬁguration of the allowed MAC addresses
— Dynamic learning of MAC addresses, up to the deﬁned maximum, where dynamic 
entries are lost upon reload
— Dynamically learning but with the switch saving those entries in the conﬁguration 
(called sticky learning)
Example 21-7
Disabling CDP and DTP and Enabling Root Guard and BPDU Guard
! The ccccddddpppp    rrrruuuunnnn command keeps CDP enabled globally, but it has been disabled on 
! fa0/1, the unused port.
ccccddddpppp    rrrruuuunnnn
iiiinnnntttt    ffffaaaa0000////0000
    nnnnoooo    ccccddddpppp    eeeennnnaaaabbbblllleeee
! The sssswwwwiiiittttcccchhhhppppoooorrrrtttt    mmmmooooddddeeee    aaaacccccccceeeessssssss interface subcommand prevents the port from trunking,
! and the sssswwwwiiiittttcccchhhhppppoooorrrrtttt    nnnnoooonnnneeeeggggoooottttiiiiaaaatttteeee command prevents any DTP messages
! from being sent or processed.
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    mmmmooooddddeeee    aaaacccccccceeeessssssss
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    nnnnoooonnnneeeeggggoooottttiiiiaaaatttteeee
! The last two interface commands enable Root Guard and BPDU Guard, per interface,
! respectively. BPDU Guard can also be enabled for all ports with PortFast 
! enabled by configuring the ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    ppppoooorrrrttttffffaaaasssstttt    bbbbppppdddduuuugggguuuuaaaarrrrdddd    eeeennnnaaaabbbblllleeee global
! command.
    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    gggguuuuaaaarrrrdddd    rrrrooooooootttt
    ssssppppaaaannnnnnnniiiinnnngggg----ttttrrrreeeeeeee    bbbbppppdddduuuugggguuuuaaaarrrrdddd    eeeennnnaaaabbbblllleeee
KEY 
POINT

Layer 2 Security     755
Port security protects against a couple of types of attacks. Once a switch’s forwarding table ﬁlls, 
the switch times out older entries. When the switch receives frames destined for those MACs that 
are no longer in the table, the switch ﬂoods the frames out all ports. An attacker could cause the 
switch to ﬁll its switching table by sending lots of frames, each with a different source MAC, 
forcing the switch to time out the entries for most or all of the legitimate hosts. As a result, the 
switch ﬂoods legitimate frames because the destination MACs are no longer in the CAM, allowing 
the attacker to see all the frames.
An attacker could also claim to be the same MAC address as a legitimate user by simply sending 
a frame with that same MAC address. As a result, the switch would update its switching table, and 
send frames to the attacker, as shown in Figure 21-2.
Figure 21-2
Claiming to Use Another Host’s MAC Address
Port security prevents both styles of these attacks by limiting the number of MAC addresses and 
by limiting MACs to particular ports. Port security conﬁguration requires just a few conﬁguration 
steps, all in interface mode. The commands are summarized in Table 21-4.
Table 21-4
Port Security Conﬁguration Commands 
KEY 
POINT
Command
Purpose
switchport mode {access | trunk}
Port security requires that the port be statically set as either 
access or trunking
switchport port-security [maximum 
value]
Enables port security on an interface, and optionally deﬁnes 
the number of allowed MAC addresses on the port (default 1)
switchport port-security mac-
address mac-address [vlan {vlan-id | 
{access | voice}} 
Statically deﬁnes an allowed MAC address, for a particular 
VLAN (if trunking), and for either the access or voice VLAN
continues
PC-A
IP-A
MAC-A
1. Attacker sources frame using PC-B’s actual MAC.
2. SW1 updates its MAC address table.
3. Another frame is sent to destination MAC-B.
4. SW1 forwards frame to attacker.
MAC-B
Dst.
Src.
MAC-A
PC-B
IP-B
MAC-B
SW1
Fa0/1
Fa0/3
Fa0/2
3
4
1
2
Unimportant
Dst. MAC
Attacker
Src. MAC
MAC-B
Address
Port
MAC-B
Fa0/2  Fa0/3
KEY 
POINT

756     Chapter 21: Security
Of the commands in Table 21-4, only the ﬁrst two are required for port security. With just those 
two commands, a port allows the ﬁrst-learned MAC address to be used, but no others. If that MAC 
address times out of the CAM, another MAC address may be learned on that port, but only one is 
allowed at a time.
The next two commands in the table allow for the deﬁnition of MAC addresses. The third command 
statically deﬁnes the permitted MAC addresses, and the fourth command allows for sticky learning. 
Sticky learning tells the switch to learn the MACs dynamically, but then add the MACs to the running 
conﬁguration. This allows port security to be enabled and existing MAC addresses to be learned, 
but then have them locked into the conﬁguration as static entries simply by saving the running 
conﬁguration. (Note that the switchport port-security maximum x command would be required 
to allow more than one MAC address, with x being the maximum number.)
The last command in the table tells the switch what to do when violations occur. The protect 
option simply tells the switch to perform port security. The restrict option tells it to also send 
SNMP traps and issue log messages regarding the violation. Finally, the shutdown option puts the 
port in a err-disabled state, and requires a shutdown/no shutdown combination on the port to 
recover the port’s forwarding state. 
Example 21-8 shows a sample conﬁguration, based on Figure 21-3. In the ﬁgure, Server 1 and 
Server 2 are the only devices that should ever be connected to interfaces Fast Ethernet 0/1 and 0/2, 
respectively. In this case, a rogue device has attempted to connect to fa0/1. 
Figure 21-3
Port Security Conﬁguration Example
Command
Purpose
switchport port-security mac-
address sticky 
Tells the switch to remember the dynamically learned MAC 
addresses
switchport port-security [aging] 
[violation {protect | restrict | 
shutdown}]
Deﬁnes the Aging timer and actions taken when a violation 
occurs
Table 21-4
Port Security Conﬁguration Commands (Continued)
Company 
Comptroller
Server 1
0200.1111.1111
Fa0/1
Fa0/2
Fa0/3
Fa0/4
Server 2
0200.2222.2222
User1

Layer 2 Security     757
Example 21-8
Using Port Security to Deﬁne Correct MAC Addresses Connected to Particular 
   Interfaces 
! FA0/1 has been configured to use a static MAC address, defaulting to allow
! only one MAC address.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////1111
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    mmmmooooddddeeee    aaaacccccccceeeessssssss
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss    0000222200000000....1111111111111111....1111111111111111
! FA0/2 has been configured to use a sticky-learned MAC address, defaulting to 
! allow only one MAC address.
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////2222
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    mmmmooooddddeeee    aaaacccccccceeeessssssss
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss    ssssttttiiiicccckkkkyyyy
! FA0/1 shows as err-disabled, as a device that was not 0200.1111.1111 tried to
! connect. The default violation mode is shutdown, as shown. It also lists the
! fact that a single MAC address is configured, that the maximum number of MAC
! addresses is 1, and that there are 0 sticky-learned MACs.
fred# sssshhhhoooowwww    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt    0000////1111
Port Security : Enabled
Port status : Err-Disabled
Violation mode : Shutdown
Maximum MAC Addresses : 1
Total MAC Addresses : 1
Configured MAC Addresses : 1
Sticky MAC Addresses : 0
Aging time : 0 mins
Aging type : Absolute
SecureStatic address aging : Disabled
Security Violation count : 1
! FA0/2 shows as SecureUp, meaning that port security has not seen any violations 
! on this port. Note also at the end of the stanza that the security violations
! count is 0. It lists the fact that one sticky MAC address has been learned.
fred# sssshhhhoooowwww    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    iiiinnnntttteeeerrrrffffaaaacccceeee    ffffaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt    0000////2222
Port Security : Enabled
Port status : SecureUp
Violation mode : Shutdown
Maximum MAC Addresses : 1
Total MAC Addresses : 1
Configured MAC Addresses : 0
Sticky MAC Addresses : 1
Aging time : 0 mins
Aging type : Absolute
SecureStatic address aging : Disabled
Security Violation count : 0
! Note the updated configuration in the switch. Due to the sticky option, the
! switch added the last shown configuration command. 
continues
KEY 
POINT

758     Chapter 21: Security
The ﬁnal part of the example shows that sticky learning updated the running conﬁguration. The 
MAC address is stored in the running conﬁguration, but it is stored in a command that also uses 
the sticky keyword, differentiating it from a truly statically conﬁgured MAC. Note that the switch 
does not automatically save the conﬁguration in the startup-conﬁg ﬁle.
Dynamic ARP Inspection
A switch can use DAI to prevent certain types of attacks that leverage the use of IP ARP messages. 
To appreciate just how those attacks work, you need to keep in mind several detailed points about 
the contents of ARP messages. Figure 21-4 shows a simple example with the appropriate usage of 
ARP messages, with PC-A ﬁnding PC-B’s MAC address. 
Figure 21-4
Normal Use of ARP, Including Ethernet Addresses and ARP Fields
The ARP message itself does not include an IP header. However, it does include four important 
addressing ﬁelds: the source MAC and IP address of the sender of the message, and the target 
MAC and IP address. For an ARP request, the target IP lists the IP address whose MAC needs to 
Fred# sssshhhhoooowwww    rrrruuuunnnnnnnniiiinnnngggg----ccccoooonnnnffffiiiigggg
(Lines omitted for brevity)
iiiinnnntttteeeerrrrffffaaaacccceeee    FFFFaaaassssttttEEEEtttthhhheeeerrrrnnnneeeetttt0000////2222
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    mmmmooooddddeeee    aaaacccccccceeeessssssss
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss    ssssttttiiiicccckkkkyyyy
    sssswwwwiiiittttcccchhhhppppoooorrrrtttt    ppppoooorrrrtttt----sssseeeeccccuuuurrrriiiittttyyyy    mmmmaaaacccc----aaaaddddddddrrrreeeessssssss    ssssttttiiiicccckkkkyyyy    0000222200000000....2222222222222222....2222222222222222
Example 21-8
Using Port Security to Deﬁne Correct MAC Addresses Connected to Particular 
   Interfaces (Continued)
PC-A
IP-A
MAC-A
1. PC-A Sends ARP Broadcast Looking for
    IP-B’s MAC Address (Target MAC)
2. PC-B Sends LAN Unicast ARP Reply
PC-B
IP-B
MAC-B
SW1
Attacker
PC-C
MAC-C
Fa0/3
Fa0/2
2
1
Eth. Header
ARP Request
SRC = MAC-A
DST = b’cast
ARP Message
SRC = MAC-A, SRC = IP-A
TRG = ???, TRG = IP-B
Eth. Header
ARP Reply
SRC = MAC-B
DST = MAC-A
ARP Message
SRC = MAC-B, SRC = IP-B
TRG = MAC-A, TRG = IP-A
KEY 
POINT

Layer 2 Security     759
be found, and the target MAC Address ﬁeld is empty, as that is the missing information. Note that 
the ARP reply (a LAN unicast) uses the source MAC ﬁeld to imply the MAC address value—for 
example, PC-B sets the source MAC inside the ARP message to its own MAC address, and the 
source IP to its own IP address.
An attacker can form a man-in-the-middle attack in a LAN by creative use of gratuitous ARPs. 
A gratuitous ARP occurs when a host sends an ARP reply, without even seeing an ARP request, 
and with a broadcast destination Ethernet address. The more typical ARP reply in Figure 21-4 
shows the ARP reply as a unicast, meaning that only the host that sent the request will learn 
an ARP entry; by broadcasting the gratuitous ARP, all hosts on the LAN will learn an ARP 
entry.
While gratuitous ARPs can be used to good effect, they can also be used by an attacker. The 
attacker can send a gratuitous ARP, claiming to be an IP address of a legitimate host. All the hosts 
in the subnet (including routers and switches) update their ARP tables, pointing to the attacker’s 
MAC address—and then later sending frames to the attacker instead of to the true host. Figure 21-5 
depicts the process.
Figure 21-5
Man-in-the-Middle Attack Using Gratuitous ARPs
The steps shown in Figure 21-5 can be explained as follows:
1.
The attacker broadcasts gratuitous ARP listing IP-B, but with MAC-C as the source IP and MAC.
2.
PC-A updates its ARP table to list IP-B’s associated address as MAC-C.
3.
PC-A sends a frame to IP-B, but with destination MAC MAC-C.
4.
SW1 forwards the frame to MAC-C, which is the attacker.
The attack results in other hosts, like PC-A, sending frames meant for IP-B to MAC address
MAC-C—the attacker’s PC. The attacker then simply forwards another copy of each frame to
PC-A
IP-A
MAC-A
MAC-C
Dst. MAC Dst. IP
IP-B
PC-B
IP-B
MAC-B
SW1
Fa0/3
Fa0/2
3
4
1
2
Attacker
PC-C
MAC-C
Address
Port
MAC-B
Fa0/2
MAC-C
Fa0/3
SW1 Forwarding Table
IP Address
MAC
IP-B
MAC-B  MAC-C
PC-A ARP Table
Eth. Header
ARP Reply (Gratuitous)
SRC = MAC-C
DST = B’cast
ARP Message
SRC = MAC-C, SRC = IP-B
TRG = MAC-A, TRG = IP-A
KEY 
POINT

760     Chapter 21: Security
PC-B, becoming a man in the middle. As a result, the user can continue to work, and the attacker 
can gain a much larger amount of data.
Switches use DAI to defeat ARP attacks by examining the ARP messages and then ﬁltering 
inappropriate messages. DAI considers each switch port to be either untrusted (the default) or 
trusted, performing DAI messages only on untrusted ports. DAI examines each ARP request or 
reply (on untrusted ports) to decide if it is inappropriate; if inappropriate, the switch ﬁlters the ARP 
message. DAI determines if an ARP message is inappropriate by using the following logic:
1.
If an ARP reply lists a source IP address that was not DHCP-assigned to a device off that port, 
DAI ﬁlters the ARP reply.
2.
DAI uses additional logic like Step 1, but uses a list of statically deﬁned IP/MAC address 
combinations for comparison.
3.
For a received ARP reply, DAI compares the source MAC address in the Ethernet header to 
the source MAC address in the ARP message. These MACs should be equal in normal ARP 
replies; if they are not, DAI ﬁlters the ARP message.
4.
Like Step 3, but DAI compares the destination Ethernet MAC and the target MAC listed in 
the ARP body.
5.
DAI checks for unexpected IP addresses listed in the ARP message, such as 0.0.0.0, 
255.255.255.255, multicasts, and so on.
Table 21-5 lists the key Cisco 3550 switch commands used to enable DAI. DAI must ﬁrst be 
enabled globally. At that point, all ports are considered to be untrusted by DAI. Some ports, 
particularly ports connected to devices in secure areas (ports connecting servers, other switches, 
and so on), need to be explicitly conﬁgured as trusted. Then, additional conﬁguration is required 
to enable the different logic options. For example, DHCP snooping needs to be enabled before 
DAI can use the DHCP snooping binding database to perform the logic in Step 1 in the preceding 
list. Optionally, you can conﬁgure static IP addresses, or perform additional validation (per the last 
three points in the preceding list) using the ip arp inspection validate command.
Table 21-5
Cisco IOS Switch Dynamic ARP Inspection Commands 
Command
Purpose
ip arp inspection vlan vlan-range
Global command to enable DAI on this switch for the 
speciﬁed VLANs.
[no] ip arp inspection trust
Interface subcommand that enables (with no option) or 
disables DAI on the interface. Defaults to enabled once the 
ip arp inspection global command has been conﬁgured.
ip arp inspection ﬁlter arp-acl-name 
vlan vlan-range [static]
Global command to refer to an ARP ACL that deﬁnes static 
IP/MAC addresses to be checked by DAI for that VLAN 
(Step 2 in the preceding list).
KEY 
POINT

Layer 2 Security     761
Because DAI causes the switch to perform more work, an attacker could attempt a DoS attack on 
a switch by sending large numbers of ARP messages. DAI automatically sets a limit of 15 ARP 
messages per port per second to mitigate that risk; the settings can be changed using the ip arp 
inspection limit interface subcommand.
DHCP Snooping
DHCP snooping prevents the damage inﬂicted by several attacks that use DHCP. DHCP snooping 
causes a switch to examine DHCP messages and ﬁlter those considered to be inappropriate. DHCP 
snooping also builds a table of IP address and port mappings, based on legitimate DHCP messages, 
called the DHCP snooping binding table. The DHCP snooping binding table can then be used by 
DAI and by the IP Source Guard feature.
Figure 21-6 shows a man-in-the-middle attack that leverages DHCP. The legitimate DHCP server 
sits at the main site, whereas the attacker sits on the local LAN, acting as a DHCP server. 
Figure 21-6
Man-in-the-Middle Attack Using DHCP
Command
Purpose
ip arp inspection validate {[src-mac] 
[dst-mac] [ip]}
Enables additional optional checking of ARP messages (per 
Steps 3–5 in the preceding list).
ip arp inspection limit {rate pps [burst 
interval seconds] | none}
Limits the ARP message rate to prevent DoS attacks carried 
out by sending a large number or ARPs.
Table 21-5
Cisco IOS Switch Dynamic ARP Inspection Commands (Continued)
PC-B
IP-B
MAC-B
4
2
3
1
Attacker
Acting as DHCP Server
10.1.1.2
DHCP Reply: Use IP-B,
Gateway 10.1.1.2
Web Server
DHCP Server
R2
10.1.1.1
R1
DHCP  Request
(Broadcast)
DHCP Message
Data Message
KEY 
POINT

762     Chapter 21: Security
The following steps explain how the attacker’s PC can become a man in the middle in Figure 21-6:
1.
PC-B requests an IP address using DHCP.
2.
The attacker PC replies, and assigns a good IP/mask, but using its own IP address as the 
default gateway. 
3.
PC-B sends data frames to the attacker, thinking that the attacker is the default gateway.
4.
The attacker forwards copies of the packets, becoming a man in the middle.
DHCP snooping defeats such attacks for ports it considers to be untrusted. DHCP snooping allows 
all DHCP messages on trusted ports, but it ﬁlters DHCP messages on untrusted ports. It operates 
based on the premise that only DHCP clients should exist on untrusted ports; as a result, the switch 
ﬁlters incoming DHCP messages that are only sent by servers. So, from a design perspective, 
unused and unsecured user ports would be conﬁgured as untrusted to DHCP snooping. 
DHCP snooping also needs to examine the DHCP client messages on untrusted ports, because 
other attacks can be made using DHCP client messages. DHCP servers identify clients based on 
their stated client hardware address as listed in the DHCP request. A single device could pose as 
multiple devices by sending repeated DHCP requests, each with a different DHCP client hardware 
address. The legitimate DHCP server, thinking the requests are from different hosts, assigns an IP 
address for each request. The DHCP server will soon assign all IP addresses available for the 
subnet, preventing legitimate users from being assigned an address.
For untrusted ports, DHCP snooping uses the following general logic for ﬁltering the packets:
1.
It ﬁlters all messages sent exclusively by DHCP servers.
2.
The switch checks DHCP release and decline messages against the DHCP snooping binding 
table; if the IP address in those messages is not listed with the port in the DHCP snooping 
binding table, the messages are ﬁltered.
3.
Optionally, it compares a DHCP request’s client hardware address value with the source MAC 
address inside the Ethernet frame.
Of the three entries in this list, the ﬁrst takes care of the fake DHCP server man-in-the-middle 
attack shown in Figure 21-6. The second item prevents an attacking host from releasing a legitimate 
host’s DHCP lease, then attempting to request an address and be assigned the same IP address—
thereby taking over any existing connections from the original host. Finally, the last item in the list 
prevents the DoS attack whereby a host attempts to allocate all the IP addresses that the DHCP 
server can assign in the subnet. 
NOTE
PC-B will use the ﬁrst DHCP reply, so with the legitimate DHCP server only reachable 
over the WAN, the attacker’s DHCP response should be the ﬁrst response received by PC-B.
KEY 
POINT

Layer 2 Security     763
Table 21-6 lists the key conﬁguration commands for conﬁguring DHCP snooping on a Cisco 3550 
switch.
IP Source Guard
The Cisco IOS switch IP Source Guard feature adds one more check to the DHCP snooping logic. 
When enabled along with DHCP snooping, IP Source Guard checks the source IP address of 
received packets against the DHCP snooping binding database. Alternatively, it checks both the 
source IP and source MAC addresses against that same database. If the entries do not match, the 
frame is ﬁltered.
To better appreciate this feature, consider the example DHCP snooping binding database shown in 
Example 21-9. Note that each of the entries lists the MAC address and IP address, VLAN, and 
interface. These entries were gleaned from ports untrusted by DHCP snooping, with the DHCP 
snooping feature building these entries based on the source MAC address and source IP address 
of the DHCP requests.
IP Source Guard is enabled using interface subcommands. To check just the source IP address, use 
the ip verify source interface subcommand; alternately, the ip verify source port-security 
Table 21-6
Cisco IOS Switch Dynamic ARP Inspection Commands
Command
Purpose
ip dhcp snooping vlan vlan-range
Global command to enable DHCP snooping for 
one or more VLANs
[no] ip dhcp snooping trust
Interface command to enable or disable a trust 
level on an interface; no version (enabled) is the 
default
ip dhcp snooping binding mac-address vlan vlan-id 
ip-address interface interface-id expiry seconds
Global command to add static entries to the 
DHCP snooping binding database
ip dhcp snooping verify mac-address
Interface subcommand to add the optional 
check of the Ethernet source MAC address to be 
equal to a DHCP request’s client ID
ip dhcp snooping limit rate rate
Sets the maximum number of DHCP messages 
per second to mitigate DoS attacks
Example 21-9
Sample DHCP Snooping Binding Database
SW1# sssshhhhoooowwww    iiiipppp    ddddhhhhccccpppp    ssssnnnnooooooooppppiiiinnnngggg    bbbbiiiinnnnddddiiiinnnngggg
Mac Address          Ip Address        Lease(sec)  Type         VLAN  Interface
------------------  ---------------  ----------  -------------  ----  -------------------
02:00:01:02:03:04   172.16.1.1       3412        dhcp-snooping     3  FastEthernet0/1
02:00:AA:BB:CC:DD   172.16.1.2       4916        dhcp-snooping     3  FastEthernet0/2
KEY 
POINT

764     Chapter 21: Security
interface subcommand enables checking of both the source IP and MAC addresses. Optionally, 
you can use the ip source binding mac-address vlan vlan-id ip-address interface interface-id 
global command to create static entries that will be used in addition to the DHCP snooping binding 
database. For example, with IP Source Guard enabled using the ip verify source command under 
interface fa0/1, the only packets allowed coming into interface fa0/1 would be those with source 
IP address 172.16.1.1. 
802.1X Authentication Using EAP
Switches can use IEEE 802.1X to perform user authentication, rather than the types of device 
authentication performed by many of the other features described in this section. User authentication 
requires the user to supply a username and password, veriﬁed by a RADIUS server, before the 
switch will enable the switch port for normal user trafﬁc. Requiring a username and password 
prevents the attacker from simply using someone else’s PC to attack the network without ﬁrst 
breaking the 802.1X authentication username and password.
IEEE 802.1X deﬁnes some of the details of LAN user authentication, but it also uses the 
Extensible Authentication Protocol (EAP), an Internet standard (RFC 3748), as the underlying 
protocol used for authentication. EAP includes the protocol messages by which the user can be 
challenged to provide a password, as well as ﬂows that create one-time passwords (OTPs) per RFC 
2289. Figure 21-7 shows the overall ﬂow of LAN user authentication, without the details behind 
each message.
Figure 21-7
802.1X for LAN User Authentication
Figure 21-7 introduces a couple of general concepts plus several new terms. First, EAP messages 
are encapsulated directly inside an Ethernet frame when sent between the 802.1X supplicant (user 
device) and the 802.1X authenticator (switch). These frames are called EAP over LAN (EAPoL) 
frames. However, RADIUS expects the EAP message as a data structure called a RADIUS 
attribute, with these attributes sitting inside a normal RADIUS message. To support the two 
protocols, the switch translates between EAPoL and RADIUS for messages that need to ﬂow 
between the supplicant and authentication server. 
Supplicant
Authentication Server
Authenticator
EAP over LAN (EAPoL)
Request/Response
RADIUS Message (with EAP Attribute)
Fa0/1
1
Eth.
IP
UDP RADIUS EAP
EAP
Eth.
Request/Challenge
2
EAP Success
5
4
RADIUS Accept
3
Change Fa0/1 from
unauthenticated
to authenticated
KEY 
POINT

Layer 2 Security     765
The rest of Figure 21-7 shows a simplistic view of the overall authentication ﬂow. The switch and 
supplicant create an OTP using a temporary key, with the switch then forwarding the authentication 
request to the authentication server. The switch, as authenticator, must be aware of the results 
(Step 3), because the switch has a duty to enable the port once authenticated. 
The 802.1X roles shown in Figure 21-7 are summarized as follows:
■
Supplicant—The 802.1X driver that supplies a username/password prompt to the user and 
sends/receives the EAPoL messages
■
Authenticator—Translates between EAPoL and RADIUS messages in both directions, and 
enables/disables ports based on the success/failure of authentication
■
Authentication server—Stores usernames/passwords and veriﬁes that the correct values 
were submitted before authenticating the user
802.1X switch conﬁguration resembles the AAA conﬁguration covered in the section titled “Using 
a Default Set of Authentication Methods” earlier in this chapter. The switch conﬁguration treats 
802.1X user authentication as another option for AAA authentication, using the following steps:
Step 1
As with other AAA authentication methods, enable AAA with the aaa new-
model global command.
Step 2
As with other conﬁgurations using RADIUS servers, deﬁne the RADIUS 
server(s) IP address(es) and encryption key(s) using the radius-server host 
and radius-server key commands.
Step 3
Similar to login authentication conﬁguration, deﬁne the 802.1X authentication 
method (RADIUS only today) using the aaa authentication dot1x default 
command or, for multiple groups, the aaa authentication dot1x group 
name global command.
Step 4
Enable 802.1X globally using the dot1x system auth-control global 
command.
Step 5
Set each interface to use one of three operational settings using the dot1x 
port-control {auto | force-authorized | force-unauthorized} interface 
subcommand:
• Using 802.1X (auto)
• Not using 802.1X, but the interface is automatically authorized (force-
authorized) (default)
• Not using 802.1X, but the interface is automatically unauthorized 
(force-unauthorized)
KEY 
POINT
KEY 
POINT

766     Chapter 21: Security
Example 21-10 shows a simple 802.1X conﬁguration on a Cisco 3550 switch. The example shows 
a reasonable conﬁguration based on Figure 21-3 earlier in the chapter, with servers off ports
fa0/1 and fa0/2, and two users off ports fa0/3 and fa0/4. Also, consider fa0/5 as an unused port. 
Note that at the time of writing this chapter, the only available authentication method for 802.1X 
in Cisco 3550 switches is to use RADIUS. 
General Layer 2 Security Recommendations
Recall that the beginning of the “Layer 2 Security” section outlined the Cisco SAFE Blueprint 
recommendations for user and unused ports and some general recommendations. The general 
recommendations include conﬁguring VTP authentication globally on each switch, putting unused 
switch ports in an unused VLAN, and simply not using VLAN 1. The underlying conﬁguration for 
each of these general recommendations is covered in Chapter 2. 
Additionally, Cisco recommends not using the native VLANs on trunks. The reason is that in some 
cases, an attacker on an access port might be able to hop from its access port VLAN to a trunk’s 
native VLAN by sending frames that begin with multiple 802.1Q headers. This attack has been 
proven to be ineffective against Cisco switches; however, the attack takes advantage of unfortunate 
Example 21-10
Example Cisco 3550 802.1X Conﬁguration
! The first three commands enable AAA, define that 802.1x should use the RADIUS 
! group comprised of all defined RADIUS servers, and enable 802.1X globally.
aaaaaaaaaaaa    nnnneeeewwww----mmmmooooddddeeeellll
aaaaaaaaaaaa    aaaauuuutttthhhheeeennnnttttiiiiccccaaaattttiiiioooonnnn    ddddooootttt1111xxxx    ddddeeeeffffaaaauuuulllltttt    ggggrrrroooouuuupppp    rrrraaaaddddiiiiuuuussss
ddddooootttt1111xxxx    ssssyyyysssstttteeeemmmm    aaaauuuutttthhhh----ccccoooonnnnttttrrrroooollll
! Next, commands shown previously are used to define the default radius group. 
! These commands are unchanged compared to earlier examples.
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....1111    aaaauuuutttthhhh----ppppoooorrrrtttt    1111888811112222    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    hhhhoooosssstttt    11110000....1111....1111....2222    aaaauuuutttthhhh----ppppoooorrrrtttt    1111666644445555    aaaacccccccctttt----ppppoooorrrrtttt    1111666644446666
rrrraaaaddddiiiiuuuussss----sssseeeerrrrvvvveeeerrrr    kkkkeeeeyyyy    cccciiiissssccccoooo
! The server ports (fa0/1 and fa0/2), inside a secure datacenter, do not require
! 802.1x authentication.
iiiinnnntttt    ffffaaaa0000////1111
    ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll    ffffoooorrrrcccceeee----aaaauuuutttthhhhoooorrrriiiizzzzeeeedddd
iiiinnnntttt    ffffaaaa0000////2222
    ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll    ffffoooorrrrcccceeee----aaaauuuutttthhhhoooorrrriiiizzzzeeeedddd
! The client ports (fa0/3 and fa0/4) require 802.1x authentication.
iiiinnnntttt    ffffaaaa0000////3333
    ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll    aaaauuuuttttoooo
iiiinnnntttt    ffffaaaa0000////4444
    ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll    aaaauuuuttttoooo
! The unused port (fa0/5) is configured to be in a permanently unauthorized
! state until the ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll command is reconfigured for this port. As
! such, the port will only allow CDP, STP, and EAPoL frames.
iiiinnnntttt    ffffaaaa0000////5555
    ddddooootttt1111xxxx    ppppoooorrrrtttt----ccccoooonnnnttttrrrroooollll    ffffoooorrrrcccceeee----uuuunnnnaaaauuuutttthhhhoooorrrriiiizzzzeeeedddd

Layer 2 Security     767
sequencing of programming logic in how a switch processes frames, so best practices call for not 
using native VLANs on trunks anyway. Simply put, by following this best practice of not using 
the native VLAN, even if an attacker managed to hop VLANs, if there are no devices inside that 
native VLAN, no damage could be inﬂicted. In fact, Cisco goes on to suggest using a different 
native VLAN for each trunk, to further restrict this type of attack.
The last general Layer 2 security recommendation covered in this chapter is to consider the use of 
private VLANs to further restrict trafﬁc. As covered in Chapter 2, private VLANs restrict hosts on 
some ports from sending frames directly to each other. Figure 21-8 shows the allowed ﬂows as 
dashed lines. The absence of a line between two devices means that private VLANs would prevent 
them from communicating. For example, PC1 and PC2 are not allowed to send frames to one 
another.
Figure 21-8
Private VLAN Allowed Flows
Private VLANs are created with some number of promiscuous ports in the primary VLAN, with 
other isolated and community ports in one or more secondary VLANs. Isolated ports can send 
frames only to promiscuous ports, whereas community ports can send frames to promiscuous 
ports and other community ports in the same secondary VLAN. 
Private VLANs could be applied generally for better security by making user ports isolated, only 
allowing them access to promiscuous ports like routers, servers, or other network services. However, 
other, more recent additions to Cisco switches, like DHCP snooping, DAI, and IP Source Guard, 
are typically better choices.
R1
Isolated
Ports
Community
Ports
Promiscuous
Port
PC3
PC4
PC1
10.1.1.1
PC2
10.1.1.2
Secondary
VLAN 12
Secondary
VLAN 34
Primary VLAN,
Subnet 10.1.1.0/24
KEY 
POINT

768     Chapter 21: Security
If private VLANs are used, Cisco also recommends additional protection against a trick by which 
an attacker can use the default gateway to overcome the protections provided by private VLANs. 
For example, in Figure 21-8, PC1 could send a frame with R1’s destination MAC address, but with 
PC2’s destination IP address (10.1.1.2). The switch forwards the frame to R1 because R1’s port is 
promiscuous. R1 then routes the packet to PC2, effectively getting around the private VLAN 
intent. To solve such a problem, the router simply needs an inbound ACL on its LAN interface that 
denies trafﬁc whose source and destination IP addresses are in the same local connected subnet. 
In this example, an access-list 101 deny ip 10.1.1.0. 0.0.0.255 10.1.1.0 0.0.0.255 command would 
prevent this attack. (Of course, a few permit clauses would also be appropriate for the ACL.)
Layer 3 Security
The Cisco SAFE Blueprint also lists several best practices for Layer 3 security. The following list 
summarizes the key Layer 3 security recommendations from the SAFE Blueprint.
1.
Enable secure Telnet access to a router user interface, and consider using Secure Shell (SSH) 
instead of Telnet.
2.
Enable SNMP security, particularly adding SNMPv3 support.
3.
Turn off all unnecessary services on the router platform.
4.
Turn on logging to provide an audit trail.
5.
Enable routing protocol authentication.
6.
Enable the CEF forwarding path to avoid using ﬂow-based paths like fast switching.
Additionally, RFCs 2827 and 3704 outline other recommended best practices for protecting 
routers, Layer 3 forwarding (IP routing), and the Layer 3 control plane (routing protocols). RFC 
2827 addresses issues with the use of the IP Source and Destination ﬁelds in the IP header to form 
some kind of attack. RFC 3704 details some issues related to how the tools of 2827 may be best 
deployed over the Internet. Some of the details from those RFCs are as follows:
1.
If a company has registered a particular IP preﬁx, packets with a source address inside that 
preﬁx should not be sent into that autonomous system from the Internet.
2.
Packets should never have anything but a valid unicast source IP address, so packets with 
source IP addresses of loopback (127.0.0.1), 127.x.x.x, broadcast addresses, multicast 
addresses, and so on, should be ﬁltered.
3.
Directed (subnet) broadcasts should not be allowed unless a speciﬁc need exists.
4.
Packets for which no return route exists to the source IP address of the packet should be 
discarded (reverse-path-forwarding [RPF] check).
KEY 
POINT
KEY 
POINT

Layer 3 Security     769
This section does not attempt to cover every portion of Layer 3 security, given the overall purpose 
of this book. The remainder of this chapter ﬁrst provides some reference information regarding IP 
ACLs, which of course are often used to ﬁlter packets. This section ends with coverage of some 
of the more common Layer 3 attacks, and how Layer 3 security can mitigate those attacks.
IP Access Control List Review
A relatively deep knowledge of IP ACL conﬁguration and use is assumed to be pre-requisite 
knowledge for readers of this book. In fact, many of the examples in the earlier sections of the 
book did not take the space required to explain the detailed logic of ACLs used in the examples. 
However, some reference information, as well as statements regarding some of the rules and 
practices regarding IP ACLs, is useful for general CCIE Routing and Switching exam study. Those 
details are presented in this section.
First, Table 21-7 lists the majority of the Cisco IOS commands related to IP ACLs.
Table 21-7
IP ACL Command Reference 
Command
Conﬁguration Mode and Description
access-list access-list-number {deny | permit} source 
[source-wildcard] [log]
Global command for standard numbered 
access lists.
access-list access-list-number [dynamic dynamic-
name [timeout minutes]] {deny | permit} protocol 
source source-wildcard destination destination-
wildcard [precedence precedence] [tos tos] [log | log-
input] [time-range time-range-name] [fragments]
Generic syntax used with a wide variety of 
protocols. The options beginning with 
precedence are also included for TCP, UDP, 
and ICMP.
access-list access-list-number [dynamic dynamic-
name [timeout minutes]] {deny | permit} tcp source 
source-wildcard [operator [port]] destination 
destination-wildcard [operator [port]] [established] 
Version of access-list command with TCP-
speciﬁc parameters; identical options exist for 
UDP, except for the established keyword.
access-list access-list-number {deny | permit} icmp 
source source-wildcard destination destination-
wildcard [icmp-type [icmp-code] | icmp-message] 
Version of access-list command to match 
ICMP packets.
access-list access-list-number remark text
Deﬁnes a remark.
ip access-list {standard | extended} access-list-name
Global command to create a named ACL.
[sequence-number] permit | deny protocol source 
source-wildcard destination destination-wildcard 
[precedence precedence] [tos tos] [log | log-input] 
[time-range time-range-name] [fragments]
Named ACL subcommand used to deﬁne an 
individual entry in the list; similar options for 
TCP, UDP, ICMP, and others.
ip access-group {number | name [in | out]}
Interface subcommand to enable access lists.
continues

770     Chapter 21: Security
ACL Rule Summary
Cisco IOS processes the Access Control Entries (ACEs) of an ACL sequentially, either permitting 
or denying a packet based on the ﬁrst ACE matched by that packet in the ACL. For an individual 
ACE, all the conﬁgured values must match before the ACE is considered a match. Table 21-8 lists 
several examples of named IP ACL permit and deny commands that create an individual ACE, 
along with their meanings. 
Command
Conﬁguration Mode and Description
access-class number | name [in | out]
Line subcommand for standard or extended 
access lists.
access-list compiled
Global command to compile ACLs on Cisco 
7200s/7500s.
ip access-list resequence access-list-name starting-
sequence-number increment
Global command to redeﬁne sequence 
numbers for a crowded ACL.
show ip interface [type number]
Includes a reference to the access lists enabled 
on the interface.
show access-lists [access-list-number | access-list-
name]
Shows details of conﬁgured access lists for all 
protocols.
show ip access-list [access-list-number | access-list-
name]
Shows IP access lists.
Table 21-8
Examples of ACL ACE Logic and Syntax
KEY 
POINT
Access List Statement
What It Matches
deny ip any host 10.1.1.1 
IP packets with any source IP and destination 
IP = 10.1.1.1 only.
deny tcp any gt 1023 host 10.1.1.1 eq 23
IP packets with a TCP header, with any source IP, a 
source TCP port greater than (gt) 1023, plus a destination 
IP of 10.1.1.1, and a destination TCP port of 23. 
deny tcp any host 10.1.1.1 eq 23
Same as previous example except that any source port 
matches, as that parameter was omitted. 
deny tcp any host 10.1.1.1 eq telnet
Same results as the previous example; the syntax uses 
the telnet keyword instead of port 23. 
deny udp 1.0.0.0 0.255.255.255 lt 1023 any
A packet with a source address in network 1.0.0.0/8, 
using UDP with a source port less than 1023, with any 
destination IP address.
Table 21-7
IP ACL Command Reference (Continued)

Layer 3 Security     771
The Port Number ﬁeld is only matchable when the protocol type in an extended IP ACL ACE is 
UDP or TCP. In these cases, the port number is positional in that the source port matching 
parameter occurs right after the source IP address, and the destination port parameter occurs right 
after the destination IP address. Several examples were included in Table 21-8. Table 21-9 
summarizes the matching logic used to match UDP and TCP ports.
ICMP does not use port numbers, but it does include different message types, and some of those 
even include a further message code. The IP ACL commands allow these to be matched using a 
rather long list of keywords, or with the numeric message type and message code. Note that these 
parameters are also positional, following the destination IP address. For example, the named ACL 
command permit icmp any any echo-reply is correct, but the command permit icmp any echo-
reply any is syntactically incorrect and would be rejected.
Several other parameters can also be checked. For example, the IP precedence bits can be checked, 
as well as the entire ToS byte. The established parameter matches if the TCP header has the ACK 
ﬂag set—indicative of any TCP segment except the ﬁrst segment of a new connection setup. (The 
established keyword will be used in an example later in the chapter.) Also, the log and log-input 
keywords can be used to tell Cisco IOS to generate periodic log messages when the ACE is 
matched—one message on initial match, and one every 5 minutes afterwards. The log-input 
option includes more information than the log option, speciﬁcally information about the incoming 
interface of the packet that matched the ACE.
For ACL conﬁguration, several facts need to be kept in mind. First, standard ACLs can only match 
the source IP address ﬁeld. Numbered standard ACLs are identiﬁed with ACL numbers of either 
1–99 or 1300–1999, inclusive. Extended numbered IP ACLs range from 100–199 and 2000–2699, 
again inclusive. Additionally, newly conﬁgured ACEs in numbered IP ACLs are always added at 
the end of the existing ACL, and ACEs in numbered IP ACLs cannot be deleted one at a time. As 
a result, to insert a line into the middle of a numbered ACL, the entire numbered ACL may need 
to be deleted (using the no access-list number global command) and then reconﬁgured. Named 
ACLs overcome that problem by using an implied or explicit sequence number, with Cisco IOS 
listing and processing the ACEs in an ACL in sequence number order.
Table 21-9
IP ACE Port Matching
KEY 
POINT
Keyword
Meaning
gt
Greater than
lt
Less than
eq
Equals
ne
Not equal
range x-y
Range of port numbers, inclusive

772     Chapter 21: Security
Wildcard Masks
ACEs use wildcard masks (WC masks) to deﬁne the portion of the IP address that should be examined. 
WC masks represent a 32-bit number, with the mask’s 0 bits telling Cisco IOS that those corresponding 
bits in the IP address must be compared when performing the matching logic. The binary 1s in the WC 
mask tell Cisco IOS that those bits do not need to be compared; as a result, these bits are often called 
“don’t care” bits. Table 21-10 lists several example WC masks, and the implied meanings.
That last entry is unlikely to be useful in an actual production network, but unlike IP subnet masks, 
the WC mask does not have to list a single unbroken set of 0s and another unbroken string of 1s. 
A much more likely WC mask is one that matches a particular mask or preﬁx length. To ﬁnd a WC 
mask to match hosts in a known preﬁx, use the following simple math: in decimal, subtract the 
subnet mask from 255.255.255.255. The result is the “right” WC mask to match that preﬁx length. 
For instance, a subnet mask of 255.255.255.0, subtracted from 255.255.255.255, gives you 
0.0.0.255 as a WC mask. This mask only checks the ﬁrst 24 bits—which in this case is the network 
and subnet part of the address. Similarly, if the subnet mask is 255.255.240.0, subtracting from 
255.255.255.255 gives you 0.0.15.255. 
General Layer 3 Security Considerations 
This section explains a few of the more common ways to avoid Layer 3 attacks.
Smurf Attacks, Directed Broadcasts, and RPF Checks
A smurf attack occurs when a host sends a large number of ICMP Echo Requests with some 
atypical IP addresses in the packet. The destination address is a subnet broadcast address, also 
known as a directed broadcast address. Routers forward these packets based on normal matching 
of the IP routing table, until the packet reaches a router connected to the destination subnet. This 
Table 21-10
Sample Access List Wildcard Masks
Wildcard Mask
Description
0.0.0.0
The entire IP address must match.
0.0.0.255
Just the ﬁrst 24 bits must match.
0.0.255.255
Just the ﬁrst 16 bits must match.
0.255.255.255
Just the ﬁrst 8 bits must match.
255.255.255.255
Automatically considered to match because all 32 bits are “don’t care” bits.
0.0.15.255
Just the ﬁrst 20 bits must match.
0.0.3.255
Just the ﬁrst 22 bits must match.
17.44.97.33
A valid WC mask, it means match all bits except bits 4, 8, 11, 13, 14, 18, 
19, 24, 27, and 32.

Layer 3 Security     773
ﬁnal router then forwards the packet onto the LAN as a LAN broadcast, sending a copy to every 
device. Figure 21-9 shows how the attack develops.
Figure 21-9
Smurf Attack
The other feature of a smurf attack is that the source IP address of the packet sent by the attacker 
is the IP address of the attacked host. For example, in Figure 21-9, many hosts may receive the 
ICMP Echo Request at Step 2. All those hosts then reply with an Echo Reply, sending it to 
10.1.1.2—the address that was the source IP address of the original ICMP Echo at Step 1. Host 
10.1.1.2 receives a potentially large number of packets.
Several solutions to this problem exist. First, as of Cisco IOS Software version 12.0, IOS defaults each 
interface to use the no ip directed-broadcast command, which prevents the router from forwarding 
the broadcast onto the LAN (Step 2 in Figure 21-9). Also, a reverse-path-forwarding (RPF) check 
could be enabled using the ip verify unicast source reachable-via {rx | any} [allow-default] [allow-
self-ping] [list] interface subcommand. This command tells Cisco IOS to examine the source IP 
address of incoming packets on that interface. Two styles of check can be made with this command:
■
Strict RPF—Using the rx keyword, the router checks to see if the matching route uses an 
outgoing interface that is the same interface on which the packet was received. If not, the 
packet is discarded. (An example scenario using Figure 21-9 will be explained shortly.)
■
Loose RPF—Using the any keyword, the router checks for any route that can be used to 
reach the source IP address.
R1
S0/0
R7
2
1
ASN 1
Network 1.0.0.0
Exists Only Here
3
1.1.1.1/24
1.1.1.2/24
D_IP 1.1.1.255 S_IP 1.1.1.2
ICMP Echo Packet
Attacker
ISP1/Internet
1. Attacker sends packet destined to subnet broadcast, source
    1.1.1.2 (for secondary attack).
2. R1 forwards packet as LAN broadcast.
3. R1 replies with ICMP echo reply packet sent to 1.1.1.2.
KEY 
POINT
KEY 
POINT

774     Chapter 21: Security
The command can also ignore default routes when it performs the check (default) or use default 
routes when performing the check by including the allow-default keyword. Also, although not 
recommended, the command can trigger a ping to the source to verify connectivity. Finally, the 
addresses for which the RPF check is made can be limited by a referenced ACL.
For example, in Figure 21-9, if R1 used strict RPF on s0/0, it would notice that its route to reach 
1.1.1.2 (the source IP address of the packet at Step 1) did not refer to s0/0 as the outgoing 
interface—thereby discarding the packet. However, with loose RPF, R1 would have found a 
connected route that matched 1.1.1.2, so it would have allowed the packet through. Finally, given 
that AS1 should never receive packets with source addresses in network 1.0.0.0, as it owns that 
entire class A network, R1 could simply use an inbound ACL to discard any packets sourced from 
1.0.0.0/8 as they enter s0/0 from the Internet.
Fraggle attacks use similar logic as smurf attacks, but instead of ICMP, fraggle attacks use the UDP 
Echo application. These attacks can be defeated using the same options as listed for smurf attacks.
Inappropriate IP Addresses
Besides smurf and fraggle attacks, other attacks involve the use of what can be generally termed 
inappropriate IP addresses, both for the source IP address and destination IP address. By using 
inappropriate IP addresses, the attacker can remain hidden and elicit cooperation of other hosts to 
create a distributed denial-of-service (DDoS) attack. 
One of the Layer 3 security best practices is to use ACLs to ﬁlter packets whose IP addresses are 
not appropriate—for instance, the smurf attack listed a valid source IP address of 1.1.1.2, but 
packets with that source address should never enter AS1 from the Internet. The Internet Assigned 
Numbers Authority (IANA) manages the assignment of IP preﬁx ranges. It lists the assigned 
ranges in a document found at http://www.iana.org/assignments/ipv4-address-space. A router can 
then be conﬁgured with ACLs that prevent packets based on known assigned ranges and on known 
unassigned ranges. For example, in Figure 21-9, an enterprise router should never need to forward 
a packet onto the Internet if that packet has a source IP address from another company’s registered 
IP preﬁx. In the smurf attack case, such an ACL used at the attacker’s ISP would have prevented 
the ﬁrst packet from getting to AS1.
Routers should also ﬁlter packets that use IP addresses that should be considered bogus or 
inappropriate. For example, a packet should never have a broadcast or multicast source IP address 
in normal use. Also, an enterprise router should never receive a packet from an ISP with that 
packet’s source IP address being a private network per RFC 1918. Additionally, that same router 
should not receive packets sourced from IP addresses in ranges currently unallocated by IANA. 
These types of IP addresses are frequently called bogons, which is a derivation of the word bogus.
Creating an ACL to match these bogon IP addresses is not particularly difﬁcult, but it does require 
a lot of administrative effort, particularly to update it based on changes to IANA’s assigned 

Layer 3 Security     775
preﬁxes. You can use freeware called the Router Audit Tool (RAT) that makes recommendations 
for router security, including bogon ACLs. You can also use the Cisco IOS AutoSecure feature, 
which automatically conﬁgures ACLs to prevent the use of such bogus IP addresses.
TCP SYN Flood, the Established Bit, and TCP Intercept
A TCP SYN ﬂood is an attack directed at servers by initiating large numbers of TCP connections, 
but not completing the connections. Essentially, the attacker initiates many TCP connections, each 
with only the TCP SYN ﬂag set, as usual. The server then sends a reply (with TCP SYN and ACK 
ﬂags set)—but then the attacker simply does not reply with the expected third message in the 
three-way TCP connection setup ﬂow. The server consumes memory and resources while waiting 
on its timeouts to occur before clearing up the partially initialized connections. The server might 
also reject additional TCP connections, and load balancers in front of a server farm might 
unbalance the load of actual working connections as well.
Stateful ﬁrewalls can prevent TCP SYN attacks. Both the Cisco PIX Firewall and the Cisco IOS 
Firewall feature set can be used to do this. The methods used are not part of the CCIE Routing and 
Switching written exam, but instead are covered in the CCIE Security exam; the impact of TCP 
SYN attacks can be reduced or eliminated by using a few other tools in Cisco IOS.
One way to prevent SYN attacks is to simply ﬁlter packets whose TCP header shows only the SYN 
ﬂag set—in other words, ﬁlter all packets that are the ﬁrst packet in a new TCP connection. In 
many cases, a router should not allow TCP connections to be established by a client on one side 
to a server on the other, as shown in Figure 21-10. In these cases, ﬁltering the initial TCP segment 
prevents the SYN attack.
Figure 21-10
Example Network: TCP Clients in the Internet
R1
Server
S0/0
R7
ASN 1
Network 1.0.0.0
Exists Only Here
1.1.1.1/24
1.1.1.2/24
Client
Internet
TCP Flags: SYN
TCP Flags: ACK
TCP Flags: SYN, ACK
2
1
3

776     Chapter 21: Security
Cisco IOS ACLs cannot directly match the TCP SYN ﬂag. However, an ACE can use the 
established keyword, which matches TCP segments that have the ACK ﬂag set. The established 
keyword essentially matches all TCP segments except the very ﬁrst TCP segment in a new 
connection. Example 21-11 shows the conﬁguration that would be used on R1 to deny new 
connection requests from the Internet into the network on the left.
The ACL works well when clients outside a network are not allowed to make TCP connections 
into the network. However, in cases where some inbound TCP connections are allowed, this ACL 
cannot be used. Another Cisco IOS feature, called TCP intercept, provides an alternative that 
allows TCP connections into the network, but monitors those TCP connections for TCP SYN 
attacks. 
TCP intercept operates in one of two different modes. In watch mode, it keeps state information 
about TCP connections that match a deﬁned ACL. If a TCP connection does not complete the 
three-way handshake within a particular time period, TCP intercept sends a TCP reset to the 
server, cleaning up the connection. It also counts the number of new connections attempted over 
time, and if a large number occurs in 1 second (“large” defaulting to 1100), the router temporarily 
ﬁlters new TCP requests to prevent a perceived SYN attack.
In intercept mode, the router replies to TCP connection requests instead of forwarding them to the 
actual server. Then, if the three-way handshake completes, the router creates a TCP connection 
between itself and the server. At that point, the router knits the two connections together. This takes 
more processing and effort, but it provides better protection for the servers.
Example 21-12 shows an example using TCP intercept conﬁguration, in watch mode, plus a few 
changes to its default settings. The example allows connections from the Internet into AS1 in 
Figure 21-10.
Example 21-11
Using an ACL with the established Keyword
! The first ACE matches TCP segments that are not the first segment, and permits
! them. The second ACE matches all TCP segment between the same set of IP 
! addresses, but because all non-initial segments have already been matched, the
! second ACE only matches the initial segments.
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    eeeexxxxtttteeeennnnddddeeeedddd    pppprrrreeeevvvveeeennnntttt----ssssyyyynnnn
    ppppeeeerrrrmmmmiiiitttt    ttttccccpppp    aaaannnnyyyy    1111....0000....0000....0000    0000....222255555555....222255555555....222255555555    eeeessssttttaaaabbbblllliiiisssshhhheeeedddd
    ddddeeeennnnyyyy    ttttccccpppp    aaaannnnyyyy    1111....0000....0000....0000    0000....222255555555....222255555555....222255555555
    ppppeeeerrrrmmmmiiiitttt    ((((wwwwhhhhaaaatttteeeevvvveeeerrrr))))
!!!!    
iiiinnnntttteeeerrrrffffaaaacccceeee    ssss0000////0000
    iiiipppp    aaaacccccccceeeessssssss----ggggrrrroooouuuupppp    pppprrrreeeevvvveeeennnntttt----ssssyyyynnnn    iiiinnnn

Layer 3 Security     777
Example 21-12
Conﬁguring TCP Intercept
! The following command enables TCP intercept for packets matching ACL
! match-tcp-from-internet. Also, the mode is set to watch, rather than the 
! default of intercept. Finally, the watch timeout has been reset from the 
! default of 30 seconds; if the TCP connection remains incomplete as of the
! 20-second mark, TCP intercept resets the connection.
iiiipppp    ttttccccpppp    iiiinnnntttteeeerrrrcccceeeepppptttt----lllliiiisssstttt    mmmmaaaattttcccchhhh----ttttccccpppp----ffffrrrroooommmm----iiiinnnntttteeeerrrrnnnneeeetttt
iiiipppp    ttttccccpppp    iiiinnnntttteeeerrrrcccceeeepppptttt    mmmmooooddddeeee    wwwwaaaattttcccchhhh
iiiipppp    ttttccccpppp    iiiinnnntttteeeerrrrcccceeeepppptttt    wwwwaaaattttcccchhhh----ttttiiiimmmmeeeeoooouuuutttt    22220000
! The ACL matches packets sent into 1.0.0.0/8 that are TCP. It is referenced by
! the iiiipppp    ttttccccpppp    iiiinnnntttteeeerrrrcccceeeepppptttt----lllliiiisssstttt command listed above.
iiiipppp    aaaacccccccceeeessssssss----lllliiiisssstttt    eeeexxxxtttteeeennnnddddeeeedddd    mmmmaaaattttcccchhhh----ttttccccpppp----ffffrrrroooommmm----iiiinnnntttteeeerrrrnnnneeeetttt
    ppppeeeerrrrmmmmiiiitttt    ttttccccpppp    aaaannnnyyyy    1111....0000....0000....0000    0000....222255555555....222255555555....222255555555    
! Note below that the ACL is not enabled on any interfaces.
iiiinnnntttteeeerrrrffffaaaacccceeee    ssss0000////0000
! Note: there is no ACL enabled on the interface!

778     Chapter 21: Security
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented in the “Foundation Topics” section of the chapter. Please take the time to read and study 
the details in this section of the chapter, as well as review the items in the “Foundation Topics” 
section noted with a Key Point icon.
Table 21-11 lists some of the key protocols covered in this chapter. 
Table 21-12 lists some of the most popular router IOS commands related to the topics in this chapter. 
Table 21-11
Protocols and Standards for Chapter 21
Name
Standard
RADIUS
RFC 2865
Port-Based Network Access Control
IEEE 802.1X
EAP
RFC 3748
A One-Time Password System
RFC 2289
Router Security
RFCs 2827 and 3704
Table 21-12
Router IOS Commands Related to Chapter 21 
Command
Description
service password-encryption
Global command to enable simple encryption of 
passwords
server ip-address [auth-port port-number] 
[acct-port port-number]
Global command to deﬁne a RADIUS server and 
ports used 
aaa group server radius | tacacs+ group-name
Global command to create the name of a group of 
AAA servers
server ip-address
AAA group mode; deﬁnes a TACACS+ server 
server ip-address [auth-port port-number] 
[acct-port port-number]
AAA group mode; deﬁnes a RADIUS server and 
ports used
radius-server host {hostname | ip-address} 
[auth-port port-number] [acct-port port-
number] [timeout seconds] [retransmit retries] 
[key string] [alias{hostname | ip-address}]
Global mode; deﬁnes details regarding a single 
RADIUS server

Foundation Summary     779
Command
Description
radius-server key {0 string | 7 string | string}
Global mode; deﬁnes the key used to encrypt 
RADIUS passwords
tacacs-server host {host-name | host-ip-
address} [key string] [nat] [port [integer]] 
[single-connection] [timeout [integer]]
Global mode; deﬁnes details regarding a single 
TACACS+ server
tacacs-server key key
Global mode; deﬁnes the key used to encrypt the 
TACACS+ payload
aaa authentication enable default method1 
[method2...]
Global mode; deﬁnes the default authentication 
methods used by the enable command
aaa authentication login {default | list-name} 
method1 [method2...]
Global mode; deﬁnes the default authentication 
methods used by console, vty, and aux logins
aaa authentication ppp {default | list-name} 
method1 [method2...]
Global mode; deﬁnes the default authentication 
methods used by PPP
aaa new-model
Global mode; enables AAA globally in a router/
switch
login authentication {default | list-name}
Line mode; deﬁnes the AAA group to use for 
authentication
ppp authentication {protocol1 [protocol2...]} 
[if-needed] [list-name | default] [callin] [one-
time] [optional]
Interface mode; deﬁnes the type of AAA 
authentication used by PPP
auto secure [management | forwarding] [no-
interact]
Global mode; automatically conﬁgures IOS with 
Cisco’s recommended device security conﬁguration
enable password [level level] {password | 
[encryption-type] encrypted-password}
Global mode; deﬁnes the enable password
enable secret [level level] {password | 
[encryption-type] encrypted-password}
Global mode; deﬁnes the enable password that is 
MD5 hashed
ip verify unicast reverse-path [list]
Interface subcommand; enables strict RPF
ip verify unicast source reachable-via {rx | 
any} [allow-default] [allow-self-ping] [list]
Interface subcommand; enables strict or loose RPF
username name {nopassword | password 
password}
Global mode; deﬁnes local usernames and passwords
username name secret {[0] password | 5 
encrypted-secret}
Global mode; deﬁnes local usernames and MD5-
hashed passwords
continues
Table 21-12
Router IOS Commands Related to Chapter 21 (Continued)

780     Chapter 21: Security
Table 21-13 lists some of the Cisco 3550 switch commands used in this chapter. Also, refer to Tables 
21-4 through 21-7. Note that all commands in Table 21-13 were copied from the version 12.2(25)SEB 
3550 Command Reference at Cisco.com; the syntax may vary on different Cisco IOS–based switches.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Command
Description
ip tcp intercept list access-list-number
Global mode; identiﬁes an ACL to be used by TCP 
intercept
ip tcp intercept mode {intercept | watch}
Global mode; deﬁnes the mode used by TCP intercept
ip tcp intercept watch-timeout seconds
Global mode; deﬁnes the timeout used before acting 
to clean up an incomplete TCP connection
Table 21-13
Catalyst IOS Commands Related to Chapter 21
Command
Description
spanning-tree guard root
Interface mode; enables Root Guard.
aaa authentication dot1x {default} method1
Global mode; deﬁnes the default authentication 
method for 802.1X. Only one method is available, 
because only RADIUS is supported.
arp access-list acl-name
Global command; creates an ARP ACL with the 
stated name.
dot1x system-auth-control
Global command that enables 802.1x.
dot1x port-control {auto | force-authorized | 
force-unauthorized}
Interface subcommand to deﬁne 802.1x actions on 
the interface.
dot1x timeout {quiet-period seconds | reauth-
period seconds | server-timeout seconds | 
supp-timeout seconds | tx-period seconds}
Global command to set 802.1x timers.
Table 21-12
Router IOS Commands Related to Chapter 21 (Continued)

Memory Builders     781
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
AAA, authentication method, RADIUS, TACACS+, MD5 hash, enable password, 
enable secret, ACS, SAFE Blueprint, DAI, port security, IEEE 802.1X, DHCP 
snooping, IP Source Guard, man-in-the-middle attack, sticky learning, fraggle attack, 
DHCP snooping binding database, EAP, EAPoL, OTP, Supplicant, authenticator, 
authentication server, smurf attack, TCP SYN ﬂood, TCP intercept, ACE 
Refer to the CD-based glossary to check your answers.
Further Reading
The topics in this chapter tend to be covered in slightly more detail in CCNP Switching exam 
preparation books. For more details on these topics, refer to the CCNP BCMSN Exam Certiﬁcation 
Guide and the CCNP Self-Study: CCNP BCMSN Exam Certiﬁcation Guide, Second Edition, listed 
in the introduction to this book.
CCSP Self-Study: Securing Cisco IOS Networks (SECUR), by John Roland
Network Security Principles and Practices, by Saadat Malik
Network Security Architectures, by Sean Convery
Cisco SAFE Blueprint Introduction: http://www.cisco.com/go/safe


Part VIII: Enterprise Wireless 
Mobility
Chapter 22
IEEE 802.11 Fundamentals
Chapter 23
Wireless LAN Solutions

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Enterprise Wireless Mobility
— Standards
— Hardware
— SWAN
— RF Troubleshooting
— VoWLAN
— Products

C H A P T E R 22
IEEE 802.11 Fundamentals
To effectively deploy and support wireless LANs, you need at least a fundamental 
understanding of the IEEE 802.11 standard, which deﬁnes the operation and conﬁguration 
settings of a wireless LAN. This knowledge allows you to study more advanced topics dealing 
with wireless LAN solutions and implementation strategies. This chapter takes a look at how 
802.11-based devices operate and what you should consider when conﬁguring a wireless LAN.
“Do I Know This Already?” Quiz
Table 22-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
Table 22-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
802.11 Physical Layer Standards
1
Wireless System Conﬁguration
2
Wireless Hardware Components
3
Infrastructure Mode Operation 
4
Ad Hoc Mode Operation
5
Wireless Conﬁguration Parameters
6–7
Wireless Medium Access
8
Wireless Security
9
RF Signal Concepts
10
Total Score

786     Chapter 22: IEEE 802.11 Fundamentals
1.
Which 802.11 physical layer offers the highest capacity?
a. 802.11a
b. 802.11b
c. 802.11g
d. 802.11a and 802.11g offer the same capacity.
2.
Which of the following is correct regarding 802.11 data frames traveling through an 
infrastructure wireless LAN?
a. Data frames travel directly from one wireless user to another wireless user without 
going through the access point.
b. Data frames going from one wireless user to another user must travel through the access point.
c. Infrastructure wireless LANs do not carry 802.11 data frames.
d. The 802.11 data frames are sent through the access point, and a wireless server coordi-
nates transfer of the frames to the wireless user.
3.
What is a disadvantage of using a wireless LAN repeater when deploying wireless LANs?
a. Repeaters have much less range than access points.
b. The data rates of repeaters are much lower than the data rates of wireless user devices.
c. A repeater doubles the number of data frames sent over the network. 
d. Repeaters do not implement the entire 802.11 standard, so they are not interoperable 
with most access points and radio cards.
4.
Why is the overhead relatively high and the corresponding throughput low when transmitting 
data over a wireless LAN?
a. Every 802.11 data frame requires the destination to send an acknowledgement.
b. All 802.11 data frame transmissions require the use of the RTS/CTS function.
c. The 802.11 data frames carry highly redundant information in the frame body to counter 
errors from RF interference.
5.
How are beacons sent in an ad hoc wireless LAN?
a. No beacons are transmitted in an ad hoc network because the stations operate independently.
b. The ﬁrst 802.11 station forming an ad hoc network assumes the responsibility for send-
ing beacons and continues sending beacons when other stations associate with the ad 
hoc network.
c. Each 802.11 station will take turns sending beacons based on the order in which they 
associated with the ad hoc network.

“Do I Know This Already?” Quiz     787
d. After receiving a beacon, each radio card will wait a random period of time and send a 
beacon if a beacon is not heard from another station.
6.
Which 802.11 conﬁguration parameter is set only in the access point, and not in the radio 
cards, with an infrastructure wireless LAN?
a. RF channel
b. SSID
c. Fragmentation
d. RTS/CTS
e. Transmit power
7.
How often are multicast frames sent to 802.11 stations implementing power-save mode?
a. After every beacon
b. After every DTIM interval 
c. Never
d. Immediately after each data frame
8.
When does an 802.11 station access the medium when using the distributed coordination function?
a. Immediately after the station senses no other trafﬁc on the medium
b. After 20 µs when the station senses an idle medium
c. After the network allocation vector value is zero 
d. When the access point polls the station
9.
Which security mechanism is best for operating over public wireless LANs?
a. 802.11i
b. WPA2
c. VPN
d. WEP
10.
What does using a 6-dBi antenna (as compared to a 3-dBi antenna) on an access point provide?
a. It doubles the effective transmit power and increases range. 
b. It has no impact on the range of the system.
c. It increases the range of the system.
d. It reduces the effective transmit power.

788     Chapter 22: IEEE 802.11 Fundamentals
Foundation Topics
802.11 Physical Layer Standards 
A wireless LAN enables mobile, portable, and stationary devices to easily communicate with each 
other within an enterprise facility and throughout a campus environment. For example, retail stores 
have been using wireless LANs since the early 1990s to enable wireless bar code scanning when 
performing price marking and inventory applications. Despite the relatively high cost for wireless 
LAN components at that time, the retail stores were still able to achieve signiﬁcant returns on 
investment due to the tremendous gains in efﬁciency and accuracy that wireless LANs provided. 
As wireless LAN prices fell dramatically in 2003, many enterprises began to deploy wireless 
LANs to support common ofﬁce applications, such as wireless access to e-mail from conference 
rooms and the ability to support visiting employees with ease. In addition, companies began 
installing public wireless LANs at airports, hotels, restaurants, and other hotspots to enable people 
to have wire-free access to the Internet while away from their ofﬁces and homes. 
The IEEE 802.11 standard, which is similar in scope and functionality to IEEE 802.3 (Ethernet), 
is a common basis for wireless LAN operation. As with 802.3, the 802.11 standard deﬁnes a 
common Media Access Control (MAC) and multiple physical layers, such as 802.11a, 802.11b, 
and 802.11g. 
The initial 802.11 wireless LAN standard, ratiﬁed in 1997, speciﬁes the use of both direct sequence 
spread spectrum (DSSS) and frequency hopping spread spectrum (FHSS) for delivering 1- and 
2-Mbps data rates in the 2.4-GHz frequency band. DSSS and FHSS are different forms of transmitting 
data over a wireless LAN. This is plenty of bandwidth to support bar code applications, the ﬁrst 
commercial use of wireless LANs. To provide higher data rates when operating in the 2.4-GHz 
band, the 802.11 group ratiﬁed the 802.11b physical layer in 1999, enhancing the initial DSSS 
physical layer to include additional 5.5- and 11-Mbps data rates. Also in 1999, the 802.11 group 
ratiﬁed the 802.11a standard, which offers data rates up to 54 Mbps in the 5-GHz band using 
orthogonal frequency division multiplexing (OFDM). 802.11g, ratiﬁed in 2004, is the most recent 
802.11 physical layer, which further enhances 802.11b to include data rates up to 54 Mbps in the 
2.4-GHz band using OFDM. For more details on spread spectrum and OFDM, refer to the following 
sections found in this chapter: “Spread Spectrum” and “Orthogonal Frequency Division Multiplexing.”
802.11a
Even though the 802.11a standard was available in 1999, 802.11a access points and radio cards 
did not become commercially available until several years later. The primary reasons for the delay 
to market were the difﬁculties in developing 5-GHz 802.11 hardware and the weak market 

802.11 Physical Layer Standards     789
potential for wireless LAN components that do not interoperate with existing DSSS wireless 
LANs. 802.11a products are available now, but their use is somewhat limited to specialized 
applications, especially where high performance is necessary.
A signiﬁcant advantage of 802.11a is that it offers very high capacity as compared to the other 
physical layers. The reason is that the 802.11a 5-GHz spectrum deﬁnes 12 RF channels that do not 
overlap in frequency. As a result, it is possible to have up to 12 802.11a access points set to 
different channels and operating within the same room. This produces up to 12 separate radio cells, 
each of which can support its own group of wireless users. Most indoor 802.11a access points 
implement only eight of these RF channels, but that still provides a large potential capacity as 
compared to 802.11b and 802.11g. If your wireless application needs very high performance, then 
802.11a may be the best way to go.
Another advantage of 802.11a is that it operates in the 5-GHz band, which is mostly free from 
sources of RF interference. Microwave ovens, Bluetooth devices, most cordless phones, and the 
majority of neighboring wireless LANs operate in the 2.4-GHz band of frequencies. The lower 
noise ﬂoor in the 5-GHz band affords lower retransmission rates and higher resulting throughput 
as compared to 802.11b and 802.11g systems. 
On the other hand, however, 802.11a has limited regulatory acceptance around the world. In fact, 
some countries do not yet allow 802.11a networks. This could certainly impact the selection of the 
802.11 physical layer (a, b, or g) for products that you want to use worldwide.
Also, relatively few user devices currently incorporate 802.11a interfaces. Most new laptops 
today, for example, implement 802.11b or 802.11g, which do not interoperate with 802.11a access 
points. 802.11a is not common. If it is not practical to use 802.11a radio cards in user devices, then 
802.11a is probably not a good alternative for the wireless LAN.
802.11b 
Very soon after ratiﬁcation of the 802.11b standard, 802.11b access points and radio cards 
began shipping. It was a fairly easy modiﬁcation to existing 802.11 DSSS devices to become 
802.11b-compliant. In fact, most users could upgrade their existing access points and radio 
cards with simple ﬁrmware upgrades. For several years, 802.11b devices were the best ones 
on the market, so they proliferated throughout the industry and became the most commonly 
installed wireless LAN hardware. 
An advantage of 802.11b, then, is that it interoperates well with the majority of installed 
wireless LANs. That is why most wireless user devices include 802.11b. It is not compatible 
with 802.11a, but 802.11b does interface with 802.11g systems.
Much more RF interference, however, resides in the 2.4-GHz band, which impacts 802.11b users. 
As mentioned before, a microwave oven can cause signiﬁcant degradation in throughput because 

790     Chapter 22: IEEE 802.11 Fundamentals
radio waves from a microwave oven can block 802.11b and 802.11g radio cards from accessing 
the medium or create bit errors in the 802.11 frames in transit. The potential for RF interference 
in the 2.4-GHz band is one reason why a company should strongly consider using 802.11a 
solutions. 
A limiting factor of 802.11b is that it supports only up to three nonoverlapping radio cells in the 
same area. The 2.4-GHz frequency spectrum is roughly 84-MHz wide, and an 802.11b radio card 
or access point uses approximately 30 MHz when transmitting. To avoid interference among 
access points, 802.11b access points must be set to speciﬁc channels. For example, access points 
in the United States can be set to channels 1, 6, and 11 to avoid overlap and mutual interference. 
This is especially important if there are many active wireless users. As a result of this frequency 
plan and limited data rates, 802.11b has limited capacity. 
802.11g
802.11g is backward compatible with 802.11b, which is referred to as 802.11b/g mixed-mode 
operation. For example, an 802.11b radio card can associate with an 802.11g access point. Most 
organizations today are deploying 802.11g wireless LANs. Because of its support for data rates 
up to 54 Mbps, 802.11g offers higher performance than 802.11b systems. Capacity is still 
somewhat limited, however, because 802.11g operates in the 2.4-GHz band, which limits the 
number of nonoverlapping channels to three, as with 802.11b. As a result, 802.11g systems 
have less capacity than 802.11a wireless LANs. 802.11g, for example, can have up to three 
nonoverlapping channels with 54 Mbps per channel, whereas 802.11a can have up to 
12 nonoverlapping channels with 54 Mbps per channel. 
A single 802.11b station associating with an 802.11g access point invokes the use of protection 
mechanisms, such as request –To Send/Clear To Send (RTS/CTS), which is discussed later in the 
chapter in the section “RTS/CTS.” The use of protection mechanisms is necessary because 
802.11b and 802.11g use different modulation, which means that they cannot interoperate and 
coordinate transmissions according to the 802.11 protocol. The access point informs all stations 
that an 802.11b station is present by setting an applicable bit in the body of each beacon frame. As 
a result, all stations begin using protection mechanisms. 
The RTS/CTS protection mechanism requires each station to implement the entire RTS/CTS 
process for each data frame needing transmission. The problem with this requirement is that 
throughput suffers because of the RTS and CTS frames. Thus, a mixed environment of 
802.11b and 802.11g users signiﬁcantly degrades the throughput of the wireless LAN, often 
by as much as 30 percent. 
This is why most vendors allow administrators to conﬁgure access points to allow only 
802.11g station associations, referred to as 802.11g-only mode. Of course, the problem with 
this is that all users must have 802.11g radio cards. 802.11b-equipped devices will not be able 
to associate with the access point, but at least the throughput will remain relatively high.

Wireless System Conﬁguration     791
Some vendors also allow you to disable protection mechanisms in mixed mode, which supports both 
802.11b and 802.11g connections. This is a good approach if there are a limited number of active users, 
because the probability of 802.11b and 802.11g devices transmitting at the same time is minimal. 
If the need exists to effectively support 802.11b and 802.11g users, especially when there are 
larger numbers of active users, then you should consider a dual-mode access point. These access 
points provide separate 802.11b and 802.11g radios in the access points that are set to different, 
nonoverlapping RF channels. The 802.11g radios in the access points in this case are set to 
802.11g-only. This forces the 802.11b users to associate with the 802.11b side of the access point 
and the 802.11g users to associate with the 802.11g side of the access point. Because each side is 
to a different channel, there is no need for protection mechanisms. 
802.11n
The 802.11 working group is actively developing a new physical layer known as 802.11n. This 
standard will be the basis of the next generation of wireless LANs, with data rates well above 
100 Mbps and much better throughput. At this point, no decision has been made regarding which 
proposal for this standard will move forward as the draft standard, but it will certainly include 
multiple input-multiple output (MIMO) antenna technology. MIMO enables multiple antennas 
to create simultaneous RF channels that increase the performance of wireless LAN, similar to 
serial-to-parallel conversion techniques used with wired networks. The 802.11 working group is 
expected to ratify this standard in 2006 or 2007.
Comparison of 802.11 Standards
Table 22-2 provides a comparison of the different characteristics of the 802.11a, 802.11b, and 
802.11g standards.
Wireless System Conﬁguration 
When deploying a wireless LAN, determine which conﬁguration makes most sense to install. The 
802.11 standard refers to two different wireless system conﬁgurations, infrastructure mode and ad 
hoc mode, which vary in terms of usage and operation. This section explores each conﬁguration. 
Table 22-2
802.11 Standards Comparison
KEY 
POINT
Standard
RF 
Spectrum
Max 
Speed
Compatibility
RF Interference 
Impacts
Date 
Ratiﬁed
802.11a
5 GHz
54 Mbps
Does not work with 
802.11b or 802.11g
Slight
1999
802.11b
2.4 GHz
11 Mbps
Works with 802.11g
Moderate
1999
802.11g
2.4 GHz
54 Mbps
Works with 802.11b
Moderate
2004

792     Chapter 22: IEEE 802.11 Fundamentals
Infrastructure Mode Conﬁguration
An infrastructure wireless LAN (sometimes referred to as infrastructure mode) is what most 
companies, public hotspots, and home users implement. An infrastructure wireless LAN, as 
depicted in Figure 22-1, offers a means to extend a wired network. In this conﬁguration, one or 
more access points interface wireless mobile devices to the distribution system. Each access point 
forms a radio cell, also called a basic service set (BSS), which enables wireless users located 
within the cell to have connectivity to the access point. This allows users to communicate with 
other wireless users and with servers and network applications connecting to the distribution 
system. A company, for example, might use this conﬁguration to enable employees to wirelessly 
access corporate applications and the Internet from anywhere within the facility. 
Figure 22-1
Infrastructure Wireless LAN 
Each access point in the infrastructure wireless LAN creates a radio cell, with a coverage area that 
depends on the following variables: 
■
The construction of the facility
■
The physical layer
■
Transmit power
■
Antenna type
The range of the coverage area is typically 150 feet in most enterprise facilities. The desired level 
of performance, however, can impact the effective range of the access points. Chapter 23, 
“Wireless LAN Solutions,” covers this in more detail. 
With the infrastructure conﬁguration, data trafﬁc going from one wireless user to another user must 
travel through the access point. The access point switches the data trafﬁc going from user A to user B, 
Access Points
Access Points
Access Points
Ethernet Switch
Distribution
System
Wireless LAN
Radio Signals
Ethernet Cable
KEY 
POINT
KEY 
POINT

Wireless System Conﬁguration     793
for example, and retransmits the data to user B. In infrastructure mode, data transmissions do not 
occur directly between the wireless users. As a result, signiﬁcant data trafﬁc between wireless users 
decreases throughput because the access point must relay the data to the destination user. In this 
application, you can think of the access point as a Layer 2 switch. It provides access to a common 
medium that two hosts can use to communicate with each other, but there is no direct connection 
between the hosts. If the source wireless user is sending data to a node on the distribution system, 
then the access point does not need to retransmit the data to other wireless users. 
Figure 22-2 illustrates three different 802.11 radio cell conﬁgurations, which include partial 
overlap, collocated, and disjointed cells. If the company installs access points with overlapping 
radio cells, as shown in part A of Figure 22-2, then users are able to roam throughout the facility. 
The radio card within the user’s mobile device will automatically reassociate with access points 
having stronger signals. For example, a user might begin downloading a ﬁle when associated with 
access point A. As the user walks out of range of access point A and within range of access point 
B, the wireless LAN automatically reassociates the user to access point B and the user’s ﬁle 
download continues through access point B. The user generally does not experience any 
noticeable delay, but voice-over-WLAN phones might drop connections if the roaming delay 
exceeds 100 milliseconds. 
Figure 22-2
Various 802.11 Radio Cell Conﬁgurations
The 802.11 standard also supports collocated (part B of Figure 22-2) and disjointed (part C) radio 
cells. A company might install disjointed access points if complete coverage throughout the facility 
is not necessary. For example, the company might install an access point in each conference room 
but not in the rest of the building. If the radio cells are disjointed, then users will temporarily lose the 
network connection and then reassociate when coming within range of another access point. An 
802.11 network, though, supports this form of network in a manner similar to a wireless network that 
supports roaming with the overlapping radio cells. The reassociation delay is a function of the time 
it takes the user to move into range of the next access point. The wireless application in use, however, 
might or might not be able to tolerate this longer roaming delay.
BSS 1
BSS 2
BSS 1
BSS 2
A – Partial Overlap
C – Disjointed
B – Collocated
BSS 1
BSS 2

794     Chapter 22: IEEE 802.11 Fundamentals
The co-located radio cell conﬁguration is useful if a company needs greater capacity than what a 
single access point can deliver. In this scenario, two or more access points are set up so that their 
radio cells overlap signiﬁcantly. This works well, assuming that the access points are set to 
nonconﬂicting radio channels. A portion of the users in the area, for example, associate with access 
point A, and the other users associate with access point B. This boosts the wireless LAN capacity 
in that particular area. For example, with 802.11g, you could install up to three co-located cells, 
each using a non-overlapping channel, to have three times 54 Mbps of available bandwidth.
Ad Hoc Mode Conﬁguration
Instead of forming an infrastructure wireless LAN, the 802.11 standard allows users to optionally 
connect directly to each other in what is referred to as ad hoc mode, illustrated in Figure 22-3. The 
rationale behind this form of networking is to enable users to spontaneously set up wireless LANs. 
This optional mode is available to users on most radio cards. With ad hoc mode, there is no need for 
access points. The wireless connection is made directly between the users in a peer-to-peer fashion. 
Figure 22-3
Ad Hoc Wireless LAN
Ad hoc mode is beneﬁcial when a user needs to send a ﬁle to another user within the same room, 
and no other networking is practical. Both users can enable ad hoc mode on their radio cards, and 
the users can communicate wirelessly. The use of an ad hoc wireless LAN is also valuable when 
users need to rapidly establish a wireless network when responding to emergencies in areas where 
no network is in place. 
Wireless Hardware Components 
The primary components of a wireless LAN include radio cards and access points, which operate 
at Layers 1 and 2 of the network architecture. Some wireless LAN components, however, include 
higher-layer functionality. A wireless LAN router, for instance, includes network layer functions, 
such as DHCP and NAT. The sections that follow take a closer look at each of the following 
components that comprise a wireless LAN:
■
Radio cards
■
Access points
■
Antennas

Wireless Hardware Components     795
■
Repeaters
■
Bridges
■
Routers
■
Radio frequency peripherals
Radio Cards
The radio card implements the 802.11 MAC functions and a speciﬁc physical layer, such as 
802.11a, 802.11b, or 802.11g. The ﬁrmware on the card implements the MAC functionality, and 
a transceiver provides the physical layer transmitting and receiving tasks. The 802.11 standard 
refers to a radio card as an 802.11 station. 
The availability of multimode radio cards makes it possible for users to associate with 
802.11b/g and 802.11a wireless LANs. The majority of installed wireless LANs are 802.11b, 
but the growing number of 802.11a wireless LANs offer signiﬁcant performance advantages 
over 802.11b/g networks. With the tri-mode capability, a user is fully equipped with all available 
wireless LAN interfaces, which maximizes interoperability.
Access Points
Similar to a radio card, an access point implements the common MAC functions and speciﬁc 
physical layers. In addition, the access point contains an Ethernet station and access point system 
functions. With Cisco enterprise access points, the system functions include enhanced 
management, improved security controls, and performance upgrades. The traditional access points 
are relatively intelligent and implement enough functions to allow the access point to interconnect 
with other access points via conventional Ethernet switches. 
Some access points, such as the Cisco 1200, contain multiple radio card slots. This enables a company 
to deploy collocated wireless LANs. For example, the access point can include both 802.11a and 
802.11b, which can serve different applications; 802.11b could be dedicated to supporting data trafﬁc, 
whereas 802.11a could satisfy wireless connectivity for voice-over-WLAN phones.
As an alternative to the traditional intelligent access point, some companies offer “thin” access 
points that implement the basic 802.11 functions. These thin access points connect to an intelligent 
wireless switch, which provides enhancements for management, security, and performance. With 
the acquisition of Airespace, Cisco offers a thin access point solution.
Antennas
The antenna couples radio waves between the radio card’s transceiver and the air medium. The 
transceiver converts digital data from the computer to a radio frequency (RF) signal (and vice 
versa). The antenna transmits and receives RF signals that convey information between user 

796     Chapter 22: IEEE 802.11 Fundamentals
devices. Omnidirectional antennas, which come with most access points, form a circular coverage 
pattern around the antenna, as part A of Figure 22-4 illustrates. In most cases, a company will 
install multiple access points within a facility, with omnidirectional antennas creating individual 
radio cells that overlap with each other to provide roaming. This generally offers optimum 
coverage over a large indoor area with a minimum number of access points. 
Figure 22-4
Wireless LAN Antenna Types and RF Signal Patterns
As an alternative to omnidirectional antennas, directive antennas focus RF energy more in one 
direction than others. Part B of Figure 22-4 illustrates the coverage pattern of a directional antenna. 
These types of antennas are ideal for providing coverage over a larger area for which it is not 
practical to install access points. For example, a utility company can install a directional antenna 
to cover an outdoor area that is storing power transformers. The directional antenna transmits and 
receives radio waves over longer distances within the coverage pattern, much as a ﬂashlight 
focuses light in one direction. 
Some antennas are removable and others are integrated, so it might not be possible to change 
an access point’s antenna type. When purchasing access points, ensure that the antennas are 
removable regardless of whether there are current plans to use different antennas. It might be 
necessary in the future to use the access points with directional antennas. 
Repeaters
A wireless LAN repeater simply receives 802.11 data frames and retransmits them on the same 
channel. They implement the entire 802.11 standard, similar to radio cards. This enables a 
company to extend coverage of the wireless LAN to areas where it is not practical to install 
Ethernet data cabling. When deploying a repeater, the RF channel is set to the same channel to the 
access point to which it associates. An issue that comes with repeater use is that a repeater doubles 
the number of data frames sent over the air because of the retransmission process. The result is a 
signiﬁcant bandwidth reduction. This might not be a problem, however, if the wireless application 
does not need the entire capacity of the wireless LAN.
NOTE
For information about RF channels, see the section “RF Channels,” later in the chapter.
A - Omnidirectional Antenna 
B - Directive Antenna
KEY 
POINT

Wireless Hardware Components     797
Bridges
Bridges provide a direct wireless connection between two wireless LANs or between a wired 
network and a wireless LAN. With remote wireless bridges, the system provides a point–to-point 
link between two networks. This is useful for linking two buildings separated by as much as a few 
miles. Highly directive antennas provide relatively long range, up to 20–30 miles. 
Routers
Wireless LAN routers are available for deploying wireless LANs in small ofﬁces and homes. 
These devices, such as the Linksys WRT54GS, include network layer functions in addition to the 
access point’s wireless functionality. An integrated Dynamic Host Conﬁguration Protocol (DHCP) 
server assigns IP addresses to wireless LAN user devices, and Network Address Translation (NAT) 
is available to bind the local private addresses to a single public IP address provided by an Internet 
service provider (ISP). The wireless LAN router simply connects to a broadband modem, such as 
digital subscriber line (DSL) or cable modem, and the default settings offer immediate wireless 
LAN connections to the Internet to wireless users. 
Most larger enterprises install access points and not routers. The DHCP and NAT services are 
provided from a central server to all users within the company. The Cisco 350, for example, allows 
a company to switch the access point into a router. This might be necessary if a large enterprise 
needs to outﬁt a small remote ofﬁce with wireless LAN access to an ISP. 
Radio Frequency Peripherals
In addition to changing antennas to improve wireless LAN range and performance, wireless 
LANs can use various RF peripherals. For example, an RF splitter routes a single RF source 
down two separate paths. This is useful when an access point must cover two separate areas. 
Bear in mind that each splitter inserts signiﬁcant attenuation, which reduces the effective range 
of the antenna; however, using a splitter might make sense if you must cover two areas with a 
single access point. 
Wireless LAN ampliﬁers are available to increase the signal power feeding the antenna. This 
improves the range within the beamwidth of the antenna. Instead of replacing the antenna with 
one having higher gain (which decreases the beamwidth), an ampliﬁer pushes the radio signals 
farther over the entire beamwidth. Ampliﬁers are available up to 6 watts. In the United States, 
FCC licensing is necessary for ampliﬁers, as well as when you are using RF components that 
are different from what is certiﬁed with the FCC by the access point and radio card vendor. 
Canadian regulations for wireless LAN frequency allocations are nearly identical to U.S. 
regulations, but they are governed by Industry Canada. Other countries might have differing 
regulations, so consult the appropriate rules before installing accessories or changing antennas 
on your wireless LAN.

798     Chapter 22: IEEE 802.11 Fundamentals
Infrastructure Mode Operation 
Infrastructure mode operation involves the use of access points that connect to a distribution 
system. Because this is the most common wireless LAN conﬁguration in use today, it is important 
that you have a thorough understanding of its operation. The sections that follow cover various 
aspects of infrastructure mode operation, including:
■
Scanning
■
Connecting with a network
■
Data transfer
■
Roaming
Scanning
In an infrastructure wireless LAN, each radio card implements a scanning function to ﬁnd access 
points. Scanning occurs after booting the user device, and periodically afterward to support 
roaming. The 802.11 standard deﬁnes two scanning methods: 
■
Passive scanning
■
Active scanning
Each radio card vendor, however, implements them differently. 
Passive Scanning
The following list describes the process that occurs when a radio card uses passive scanning: 
1.
The radio card automatically tunes to each RF channel, listens for a period of time, and 
records information it ﬁnds regarding access points on each channel. 
2.
By default, each access point transmits a beacon frame every 100 milliseconds on a speciﬁc 
RF channel, which the administrator conﬁgures. 
3.
While tuned to a speciﬁc channel, the radio card receives these beacon frames if an access 
point is in range and transmitting on that channel. 
4.
The radio card records the signal strength of the beacon frame and continues to scan other 
channels. 
5.
After scanning each of the RF channels, the radio card makes a decision about the access point 
with which it will associate. 
In general, the radio card chooses the access point with the strongest beacon signal. Some radio vendors 
might include other parameters, such as noise levels and utilization, when making this decision. 
KEY 
POINT

Infrastructure Mode Operation     799
Active Scanning
The following list describes the process that occurs when a radio card uses active scanning: 
1.
The radio card sends probe request frames on each RF channel. 
2.
If able to do so, any Access Point receiving the probe request sends a probe response. 
3.
The radio card uses the signal strength and possibly other information corresponding to the 
probe response frame to make a decision as to the access point to which it will associate. 
The probe response is similar to a beacon frame. Active scanning, however, enables the radio card to 
receive information about nearby access points in a timely manner, without waiting for beacons. 
Again, each vendor implements passive and active scanning differently. 
Connecting with a Network
After obtaining a list of potential access points via either passive or active scanning, the radio card 
moves forward with joining the network by tuning to the RF channel of the chosen access point. 
To initiate association, the radio card sends an authentication request frame, and the access point 
responds with an authentication response frame. This is the default authentication that 802.11 refers 
to as open system authentication. In most cases, this form of authentication is desirable. 
802.11 offers the optional shared key authentication, which uses a Wired Equivalent Privacy (WEP) 
key to authenticate the radio card, but WEP is relatively easy to hack. As a result, companies should 
use stronger forms of authentication, such as 802.1x, that rely on authentication servers.
After performing the authentication handshake, the radio card sends an association request frame 
to the access point. This request contains information about the radio card, including the service 
set identiﬁer (SSID) and the radio card’s supported data rates. The SSID must match the one 
conﬁgured in the access point for association to complete. The access point replies to the radio 
card with an association response frame containing an association identiﬁer (AID), which is a 
number that represents the radio card’s association. At this point, the radio card is considered 
associated with the access point, and the radio card can then begin sending data frames to the 
access point and communicating with other nodes on the network. 
Data Transfer
The exchange of data in an 802.11 network is bidirectional between the radio card and access 
point. As mentioned earlier, data frames in an infrastructure wireless LAN do not travel directly 
between wireless users. Instead, the access point relays the data. 
A radio card or access point (802.11 station) having the destination MAC address of the data frame 
replies with an acknowledgement (ACK) frame. This adds signiﬁcant overhead to a wireless LAN 
as compared to an Ethernet network that does not require ACKs for every data frame. The ACKs are 
necessary with 802.11 due to the nature of the shared radio medium; data loss is much more likely 
with the wireless medium, so wireless LANs perform error detection and error correction at Layer 2.
KEY 
POINT
KEY 
POINT

800     Chapter 22: IEEE 802.11 Fundamentals
If an 802.11 station sending a data frame does not receive an ACK after a speciﬁc period of time, 
the station retransmits the frame. These retransmissions occur up to a particular limit, which is 
generally three to seven times. After that, higher-layer protocols, such as Transmission Control 
Protocol (TCP), must provide error recovery. 
To allow for extended range, 802.11 includes automatic data rate shifting. For example, an 
802.11 station generally lowers its transmission data rate if a retransmission is necessary. Access 
points support multiple data rates to facilitate this kind of operation, where different remote 
stations might transmit data upstream at different rates.
Roaming
Periodically, each radio card performs scanning, either active or passive, to update its access point 
list. Some radio cards might limit the scanning function ﬁrst to only RF channels where access 
points formerly had been found. This enables the radio card to offer higher throughput, because 
the card cannot send or receive data frames while scanning other channels. 
If the associated access point signal becomes too weak, then the radio card will implement a 
reassociation process. The radio card sends a reassociation frame to the new access point and a 
disassociation frame to the old access point. 802.11 does not require the authentication frame 
handshake when reassociating. If the old access point has buffered data frames destined to the radio 
card, then the old access point will forward them to the new access point for delivery to the radio card. 
Ad Hoc Mode Operation 
With ad hoc wireless LANs, there are no access points; therefore, the radio cards must send 
beacons. The ad hoc mode of operation transpires as follows: 
1.
After a user switches to ad hoc mode, the radio card begins sending beacons if one is not 
received within a speciﬁc period of time. 
2.
After receiving a beacon, each radio card waits a random period of time. 
3.
If a beacon is not heard from another station in this time, then the station sends a beacon. The 
random wait period causes one of the stations to send a beacon before any other station. Over 
time, this distributes the job of sending beacons evenly across all 802.11 stations. 
The sharing of the transmission of beacons among all ad hoc stations is necessary to ensure that 
beacons are still sent if a particular station becomes unavailable. If a station becomes disassociated 
with the network, then another station will send the beacon. 
With ad hoc networks, there is no direct connection to a wired network, which, of course, limits 
applications. A user, however, can conﬁgure an 802.11-equipped device as an ad hoc station, such 
as a PC, to provide a shared connection to a wired network. Thus, with specialized software or 
KEY 
POINT

Wireless Conﬁguration Parameters     801
functions within the PC operating system, the PC can offer functions similar to those of an access 
point. All of the other ad hoc stations needing to reach devices on the wired network funnel their 
packets through the PC’s connection to the network. 
Wireless Conﬁguration Parameters 
The 802.11 standard speciﬁes several conﬁguration parameters, which are set in the radio card or 
the access point (or both). Figures 25-5 and 25-6 show wireless conﬁguration screens of an access 
point. To optimize performance and security of a wireless LAN, you must choose conﬁguration 
settings that best satisfy application requirements. Most of these conﬁgurations apply to the access 
points, but some settings are necessary on the radio cards within the end-user devices. 
Figure 22-5
Basic Setup Screen of a Linksys WRT55AG Dual-Band Access Point
Figure 22-6
Advanced Setup Screen of a Linksys WRT55AG Dual-Band Access Point

802     Chapter 22: IEEE 802.11 Fundamentals
SSID
The service set identiﬁer (SSID) is an alphanumeric value set in access points and radio cards to 
distinguish one wireless LAN from another. For example, the default SSID for Cisco access points 
is “tsunami.” The SSID provides a name for the wireless LAN. The beacon frame includes the 
SSID. Microsoft Windows extracts the SSID from the radio card, which obtains SSIDs from the 
beacon frames. Windows displays a list of available wireless networks (by SSID) to the user. If the 
user chooses to connect to one of the wireless LANs, Windows initiates the association process. 
When installing a wireless LAN with multiple access points, such as in the case of an enterprise 
network, set all access points to the same SSID. This minimizes issues with users having incorrect 
SSIDs and ensures that roaming between access points works as smoothly as possible and without 
user intervention. 
Some access points, such as the Cisco 1200, allow administrators to set the access point to disable 
SSID broadcasting. When SSID broadcasting is disabled, the access point does not include the 
SSID in beacon frames. As a result, Windows is not able to obtain the SSID and display it as a 
candidate network for association. This is beneﬁcial in corporate networks to keep casual snoopers 
and wardrivers from ﬁnding the network. For example, a user with a Windows-based laptop would 
not see the corporate network as an association option. 
With SSID broadcasting disabled, however, the user must manually conﬁgure the radio card with 
the correct SSID in order to associate with the access point. This is acceptable in corporate and 
home environments, but it is not desirable with public wireless hotspots. In the latter case, public 
hotspots can use the SSID for advertising. For example, T-Mobile uses the SSID “T-Mobile” to 
inform users (through Windows) that its network is available and to distinguish its service from 
competitors. Disabling SSID broadcasting in public networks would prevent users from 
determining whether wireless LAN coverage for a particular service provider is available.
Disabling SSID broadcasting is not a strong security mechanism. A hacker, for example, can easily 
monitor 802.11 frames on the wireless LAN and wait until an association frame is sent by a radio 
card as a mandatory part of the association process. The hacker will ﬁnd the SSID in association 
request frames and some probe requests. In fact, commercial wireless LAN analyzers look inside 
association frames and automatically display SSIDs once they are found. 
The 802.11 standard speciﬁes the need for each access point to have an SSID, but several vendors, 
including Cisco, allow multiple SSID assignments for each access point. Administrators can map 
NOTE
Keep in mind that not all radio cards support the feature that Microsoft Windows 
offers. When using mobile device operating systems or radio cards that do not extract the SSID 
from beacons, then the user must manually conﬁgure the radio card with the SSID of the access 
points that they wish to associate with. 
KEY 
POINT

Wireless Conﬁguration Parameters     803
each SSID to a different virtual LAN (VLAN), which makes it possible to support diverse 
applications on a common wireless LAN infrastructure. This creates multiple virtual wireless 
LANs operating over the same physical layer. 
For example, an airport might want to share the same wireless LAN infrastructure to support both 
airport check-in applications and wireless service providers offering public Internet access to 
passengers. The airport can disable SSID broadcasting for the private applications and map this 
SSID to a VLAN that is accessible only through strong security mechanisms. As a result, 
passengers would not see the airport’s SSID through Windows. Each access point can be set to 
broadcast the SSIDs of the public service providers so that users can ﬁnd the service offerings. 
Each SSID would interface to a VLAN that connects only with the applicable service provider. 
The ﬁrst radio card in the area that is set to ad hoc mode includes its SSID in the beacon. This 
establishes an ad hoc wireless LAN that other users (set to ad hoc mode) can join. As with an 
infrastructure network, each radio card must be set to the same SSID to associate in an ad hoc 
network. As with infrastructure wireless LANs, Windows displays a list of SSIDs corresponding 
to ad hoc networks. With some radio cards and when using non-Windows operating systems, it 
might be necessary for each ad hoc user to manually conﬁgure their radio card with the desired 
SSID. SSID disabling is generally not available to ad hoc users. 
RF Channels
Each 802.11 physical layer deﬁnes a set of RF channels. For example, the 802.11b/g standard 
deﬁnes 14 RF channels in the 2.4-GHz band, with varying numbers of these channels available in 
speciﬁc countries. In the United States, for instance, the FCC’s rules allow the use of only channels 
1 through 11. In the case of 802.11b/g, these channels overlap with each other, as shown in 
Figure 22-7. As a result, companies installing 802.11b/g wireless LANs should set adjacent access 
points (where their radio cells overlap) to nonconﬂicting channels. These are channels that do not 
overlap with each other, such as channels 1, 6, and 11 in the U.S. This minimizes interference 
among access points, which can signiﬁcantly reduce throughput when user trafﬁc is high. Other 
802.11 standards, such as 802.11a, deﬁne separate RF channels that do not overlap. 
Figure 22-7
Overlapping 802.11 RF Channels in the 2.4-GHz Band
1
2
3
4
5
6
RF Channels
2.4 GHz Frequency Spectrum
7
8
9
10
11
KEY 
POINT

804     Chapter 22: IEEE 802.11 Fundamentals
It is important to deﬁne the appropriate RF channels by ﬁrst conducting an RF site survey, as 
explained in Chapter 23. The survey provides information necessary to identify the most optimum 
channels for avoiding interference sources, such as microwave ovens and neighboring wireless 
LANs. In infrastructure wireless LANs, the RF channel is set in the access point only. Cisco access 
points include automatic channel selection as an option. When this feature is enabled, the access 
point automatically listens to each RF channel and makes a decision about which channel to use 
to avoid interference. As conditions change, the access point responds accordingly. This 
signiﬁcantly reduces the time necessary to initially determine optimum channel settings and make 
applicable updates when supporting the network. 
In ad hoc networks, the ﬁrst radio card active on the network is set by the user to a speciﬁc channel. 
After joining a particular ad hoc wireless LAN, each radio card belonging to that particular ad hoc 
network stays on the same channel. The channel in use by the ad hoc network is the one that the 
ﬁrst ad hoc user chose. 
Transmit Power
Most access points and radio cards allow the setting of transmit power. The highest value is 
generally 100 mW (0.1 W), with increments of lower power available. Some devices enable 
settings as low as 1 mW. In most cases, it is best to set all wireless LAN devices to the highest 
transmit power, which is generally the default setting. 
To conﬁgure a wireless LAN for optimum capacity, you can set the transmit power to a lower 
value, which effectively reduces the size of the radio cells surrounding each access point and radio 
card. More access points are necessary to cover an entire facility, as compared to using higher 
transmit power levels, but fewer wireless users will then associate with each access point. The 
result is better performance due to fewer users competing for access to the medium. The use of 
lower power settings and a greater number of access points is beneﬁcial for supporting voice-over-
Wi-Fi applications, assuming that roaming delays between the access points is kept to a minimum 
by careful system design. 
Data Rates
The default data rate setting on access points is generally auto, which allows radio cards to use 
any of the data rates of the given physical layer. For example, 802.11b allows data rates of 1, 2, 
5.5, and 11 Mbps. The 802.11g standard extends these data rates up to 54 Mbps. The radio card 
usually attempts to send data frames at the highest supported rate, such as 11 Mbps for 802.11b 
stations and 54 Mbps for 802.11g stations. When set to auto, the radio card automatically rate 
shifts to the highest data rate that the connection can support. A lower data rate, for example, might 
be necessary if the radio card encounters too many retransmissions. 
It is possible to set the access point to a speciﬁc data rate, such as 1 Mbps, which forces the access 
point to send all frames at 1 Mbps. This effectively increases the range of the access point, because 

Wireless Conﬁguration Parameters     805
802.11 stations can detect access points over longer ranges. In general, a radio card is able to 
communicate successfully with lower data rates over longer ranges. 
The access point data rate setting, though, does not affect the data rate of the radio cards. If the 
radio card is set to auto data rates (the default setting), then the radio card can still use the highest 
possible data rate when sending frames to the access point. To maximize the range with fewer 
retransmissions, set the radio cards to lower, ﬁxed data rates. These data rate settings impact only 
the transmit data rate. The radio card will still receive frames at higher data rates if necessary. 
Power-Save Mode
Most radio cards employ an optional 802.11 power-save mode that users can enable. Access points 
do not implement power-save mode, except for the buffering functions necessary to support power-
saving functions of the radio cards. If power-save mode is enabled, the radio card enters sleep mode, 
which draws much less current than when the card is operating actively. Thus, power-save mode can 
conserve batteries on mobile devices. In fact, power-save mode often lengthens battery life by 20 to 
30 percent. The actual savings, however, depends on the applications and other variables. 
Before switching to power-save mode, the radio card notiﬁes the access point by setting the Power 
Management bit in the Frame Control ﬁeld of an upstream frame. The access point receives this 
frame and starts buffering applicable data frames. The buffering takes place until the radio card 
awakens and requests that the access point send the saved frames to the radio card. 
After entering sleep mode, the radio card keeps track of time and wakes up periodically to receive 
each beacon coming from the access point. The radio card must wake to discover whether the 
access point is buffering any frames that need delivery to the radio card. The access point notiﬁes 
radio cards about buffered packets through what the 802.11 standard deﬁnes as the trafﬁc 
indication map (TIM). 
A radio card set to power-save mode will wake just in time to receive the TIM, which resides in the 
beacon frames. The TIM indicates the AID of the 802.11 stations that have data frames buffered at the 
access point. If a station discovers it has frames at the access point, then the station stays awake and 
sends a power-save poll frame to the access point requesting that the data frames be forwarded to the 
station. The station will stay awake long enough to receive all of the buffered frames. The amount of 
time required to transfer all of the buffered frames depends on the current utilization of the access 
point and the radio link quality. A large number of stations implementing power-save mode can cause 
a surge in trafﬁc after each beacon due to power-save poll frames and corresponding data frames. 
Once the access point delivers the buffered frames, the radio card enters sleep mode again, unless 
the beacon frame corresponds with the delivery trafﬁc indication map (DTIM). The DTIM is set 
in the access point to determine how many beacons must pass before the access point delivers 
multicast frames. A common default DTIM interval is 3, which means that the access point sends 

806     Chapter 22: IEEE 802.11 Fundamentals
multicast frames after every third beacon. The DTIM interval, however, can be set to other values, 
such as 1, which enables the access point to send multicast frames after every beacon. Based on 
the DTIM interval setting, a station implementing power-save mode will stay awake long enough 
after the beacon transmission to receive the multicast frames in addition to unicast frames. 
The use of power-save mode can make batteries last longer in user devices, but throughput 
decreases for data moving from the access point to the user device. The radio card will awaken 
immediately and send data going from the user device to the access point, however. As a result, 
upstream throughput remains unchanged in low-power mode. 
RTS/CTS
The 802.11 standard deﬁnes request-to-send/clear-to-send (RTS/CTS) as an optional function of 
802.11 to regulate the transmission of data on the wireless LAN. RTS/CTS can be set in the access 
point or a radio card individually, or on both devices at the same time. In most cases, the RTS/CTS 
function is helpful in counteracting collisions between hidden nodes. To gain access to the shared 
wireless medium, a station can only transmit if no other station is transmitting. Within a particular 
access point radio cell, it is possible that two stations associated with the same access point might 
be out of range of each other.
For example, Figure 22-8 illustrates the scenario in which either Station A is far away from Station 
B or a barrier is blocking the radio signals between the two stations. The problem is that Station 
A might be in the middle of transmitting a frame to the access point when Station B wants to send 
a frame. Station B will listen to the medium to determine whether another station is already 
transmitting. Because Station B cannot hear Station A, Station B starts transmitting the frame. A 
collision then occurs at the access point, which destroys both frames. As a result, the access point 
will not acknowledge reception of the frames. Both stations will have to retransmit their respective 
frames, which will likely result in another collision.
Figure 22-8
Hidden-Node Problem in Wireless LANs
RTS
CTS
Data
Barrier
Station A
Station B
Access Point
CTS
2
2
1
3
KEY 
POINT

Wireless Conﬁguration Parameters     807
The RTS/CTS function is a handshaking process that minimizes the occurrence of collisions when 
hidden nodes are operating on the network. In addition, protection mechanisms can use RTS/CTS 
to avoid collisions between 802.11b and 802.11g radio cards. If hidden nodes are not causing 
signiﬁcant retransmissions or hidden nodes are not present, then RTS/CTS is generally not 
necessary (unless protection mechanisms are in use). 
RTS/CTS works by enabling each station to explicitly request a time slot for data transmission. 
For example, if RTS/CTS is enabled in the radio cards of Station A and Station B, then Station 
A will ﬁrst send an RTS frame to the access point before attempting to transmit a data frame. 
The access point receives the RTS frame and responds with a CTS frame. Both stations receive 
the CTS frame. This gives clearance for Station A to transmit a data frame. The CTS frame 
carries a duration value that informs all other stations, including Station B, to not transmit 
during the speciﬁed time interval. This delay equals the amount of time that Station A requires 
to send the data frame and for the access point to respond with an acknowledgement. As a result, 
collisions due to hidden nodes are much less likely. The only time it is possible with RTS/CTS 
enabled is when hidden nodes also miss CTS frames from the access point because of 
interference or weak signals. 
Enabling RTS/CTS requires setting RTS/CTS to a speciﬁc threshold value in the access point or 
radio card. The threshold is the frame length that invokes the RTS/CTS process. If the data frame 
that needs transmission is larger than the threshold, then the station implementing RTS/CTS uses 
the RTS/CTS process. 
If you suspect hidden nodes might be causing collisions on the network and degrading network 
performance, consider activating RTS/CTS. It is best to ﬁrst set the threshold to approximately 
750 bytes, which is roughly the halfway point (50 percent of the maximum frame size), and 
assess changes in throughput. If throughput increases, then the use of RTS/CTS is beneﬁcial. If 
throughput decreases, then RTS/CTS likely is not worthwhile. If RTS/CTS is in fact improving 
performance, consider tweaking the threshold value to maximize throughput.
Keep in mind that the use of RTS/CTS adds overhead to the network because the transmission 
of data frames might require RTS and CTS frames as well. As a result, the lessening of 
collisions by using RTS/CTS might not offer enough improvement in throughput to compensate 
for the additional overhead of RTS/CTS frames. The ultimate goal of using RTS/CTS is to 
improve throughput. If RTS/CTS causes throughput to decrease due to the additional overhead, 
then do not use it. Even if the use of RTS/CTS improves performance, changes within the 
facility and users that are roaming to other areas will change the hidden-node situations. Thus, 
RTS/CTS might not be necessary, and can even cause degradation in throughput as conditions 
change. 802.11 does not offer adaptive mechanisms that automatically adjust RTS/CTS 
thresholds.
KEY 
POINT

808     Chapter 22: IEEE 802.11 Fundamentals
Fragmentation
A radio card or access point can be set to optionally use fragmentation, which divides 802.11 data 
frames into smaller pieces (fragments) that are sent separately to the destination. Each fragment 
consists of a MAC layer header, frame check sequence (FCS), and a fragment number indicating 
its ordered position within the frame. Because the source station transmits each fragment 
independently, the receiving station replies with a separate acknowledgement for each fragment. 
An 802.11 station applies fragmentation only to frames having a unicast destination address. This 
includes any data frame directed toward a speciﬁc station. To minimize overhead on the network, 
802.11 does not fragment broadcast and multicast frames.
The destination station reassembles the fragments into the original frame using fragment numbers. 
After ensuring that the frame is complete, the station hands the frame up to higher layers for 
processing. Even though fragmentation involves more overhead, its use can result in better 
performance if you tune it properly.
Fragmentation can increase the reliability of frame transmissions when signiﬁcant RF interference is 
present. When transmitting smaller frames, collisions are less likely to occur. In addition, frames that 
do encounter errors can be retransmitted faster because they are smaller. The fragment size value can 
typically be set between 256 and 2048 bytes, although this value is user-conﬁgurable. In fact, you 
activate fragmentation by setting a particular frame size threshold (in bytes). If the frame that the access 
point is transmitting is larger than the threshold (similar to RTS/CTS), it will trigger fragmentation. If 
the packet size is equal to or less than the threshold, the access point will not use fragmentation. 
Consider enabling fragmentation on radio cards and access points. As with conﬁguring RTS/CTS, 
ﬁrst set the fragmentation threshold to 750 bytes. If throughput increases, then fragmentation is 
beneﬁcial. If throughput decreases, then fragmentation probably won’t be worthwhile. Because of 
the additional overhead required for frame headers on each fragment, the reduction in frame 
retransmissions might not be enough to counteract the additional overhead necessary. 
RTS/CTS and Fragmentation Summary
Table 22-3 summarizes some of the beneﬁts and drawbacks of both RTS/CTS and fragmentation 
when trying to improve throughput in a wireless network.
Table 22-3
Improving Throughput Using RTS/CTS and Fragmentation 
RTS/CTS
Fragmentation
Method to Improve 
Throughput
Reduce collisions
Reduce percentage of frames with 
transmission errors
How to Enable
Conﬁguration on AP
Conﬁguration on AP
KEY 
POINT

Wireless Medium Access     809
Wireless Medium Access
Before transmitting frames, a station must ﬁrst gain access to the medium, which is a radio channel 
that stations share. The 802.11 standard deﬁnes two forms of medium access: 
■
Distributed coordination function (DCF) 
■
Point coordination function (PCF)
DCF is mandatory and based on the carrier sense multiple access with collision avoidance 
(CSMA/CA) protocol. With DCF, 802.11 stations contend for access and attempt to send frames 
when there is no other station transmitting. If another station is sending a frame, stations are polite 
and wait until the channel is free.
The following are details on how DCF works:
1.
As a condition of accessing the medium, the MAC layer checks the value of its network 
allocation vector (NAV), which is a counter resident at each station that represents the amount 
of time that the previous frame needs to send its frame. The NAV must be zero before a station 
can attempt to send a frame. Prior to transmitting a frame, a station calculates the amount of 
time necessary to send the frame based on the frame’s length and data rate. The station places 
a value representing this time in the Duration ﬁeld in the header of the frame. When stations 
receive the frame, they examine this Duration ﬁeld value and use it as the basis for setting their 
corresponding NAVs. This process reserves the medium for the sending station.
2.
An important aspect of the DCF is a random Back-off timer that a station uses if it detects a 
busy medium. If the channel is in use, the station must wait a random period of time before 
attempting to access the medium again. This ensures that multiple stations that want to send 
data do not transmit at the same time. The random delay causes stations to wait different 
periods of time, which avoids the situation in which all the stations sense the medium at 
exactly the same time, ﬁnd the channel idle, transmit, and collide with each other. The Back-
off timer signiﬁcantly reduces the number of collisions and corresponding retransmissions, 
especially when the number of active users increases.
3.
With radio-based LANs, a transmitting station cannot listen for collisions while sending data, 
mainly because the station cannot have its receiver on while transmitting the frame. As a 
result, the receiving station needs to send an acknowledgement (ACK) if it detects no errors 
RTS/CTS
Fragmentation
Subset of Data Frames
Frames under a statically deﬁned 
length 
Frames under a statically deﬁned length
Overhead Created
RTS/CTS process frames 
Addition of fragmentation headers
Table 22-3
Improving Throughput Using RTS/CTS and Fragmentation (Continued)
KEY 
POINT

810     Chapter 22: IEEE 802.11 Fundamentals
in the received frame. If the sending station does not receive an ACK after a speciﬁed period 
of time, it assumes that there was a collision (or RF interference) and retransmits the frame. 
To support time-bounded delivery of data frames, the 802.11 standard deﬁnes the optional point 
coordination function (PCF), which enables the access point to grant access to an individual station 
to the medium by polling the station during the contention-free period. Stations cannot transmit 
frames unless the access point polls them ﬁrst. The period of time for PCF-based data trafﬁc (if 
enabled) occurs alternately between contention (distributed coordination function [DCF]) periods.
The access point polls stations according to a polling list, and then switches to a contention period 
when stations use DCF. This process enables support for both synchronous (for example, video 
applications) and asynchronous (for example, e-mail and web-browsing applications) modes of 
operation. No known wireless NICs or access points on the market today, however, implement PCF.
Without effective quality of service (QoS), the existing version of the 802.11 standard does not 
optimize the transmission of voice and video. Currently, no effective mechanism exists to 
prioritize trafﬁc within 802.11. As a result, the 802.11e task group is currently reﬁning the 
802.11 MAC layer to improve QoS for better support of audio and video (such as MPEG-2) 
applications. The 802.11e group should ﬁnalize the standard by 2006. 
Because 802.11e falls within the MAC layer, it will be common to all 802.11 physical layers and 
will be backward compatible with existing 802.11 wireless LANs. As a result, the lack of 802.11e 
in place today does not impact your decision on which physical layer to use. In addition, you 
should be able to upgrade your existing 802.11 access points to comply with 802.11e through 
relatively simple ﬁrmware upgrades once they are available. In the meantime, some wireless LAN 
vendors offer proprietary QoS mechanisms that improve performance when there is a mix of 
applications with differing QoS needs present on the network, such as voice and data. 
Wireless Security 
Security is one of the most important features of a wireless LAN. Companies and home users must 
protect their information from hackers. The 802.11 standard offers security mechanisms that have 
undergone signiﬁcant scrutiny over the past few years. Recently, improvements have been made 
by the Wi-Fi Alliance and via newer versions of the 802.11 standard. 
The most common wireless security mechanisms currently in use today are as follows:
■
Wired Equivalent Privacy (WEP)
■
Temporal Key Integrity Protocol  (TKIP)
■
Advanced Encryption Standard (AES)
KEY 
POINT

Wireless Security     811
■
Wi-Fi Protected Access (WPA)
■
Open system authentication
■
Shared key authentication
■
Virtual Private Networks (VPNs) 
The sections that follow describe each of these mechanisms in more detail.
WEP
802.11 Wired Equivalent Privacy uses a common key to encrypt and decrypt data frame contents 
between 802.11 stations at Layer 2. 802.11, however, does not deﬁne a mechanism for distributing 
WEP keys to the stations. This requires the administrator or users to manually conﬁgure their radio 
cards with the encryption key, and it is not practical to change the key. Thus, WEP keys remain the 
same on most wireless LANs for months or years. This allows enough time for a hacker to exploit 
the vulnerabilities of WEP and crack the encryption. 
WEP has been a target for hackers. In fact, tools freely available from the Internet, such as 
WEPCrack and Airsnort, are able to crack the WEP encryption mechanism. As a result, WEP is 
not strong enough for enterprise security. 
If you plan to use WEP, conﬁgure the encryption key in the access point. Each radio card needs to 
be set to the same WEP key before it can associate with the access point. When using Windows 
XP, you are prompted to enter the WEP key if you try to connect to an access point that implements 
WEP. Windows displays this WEP key in the wireless networks list after you choose View 
Available Wireless Networks.
TKIP
The 802.11i working group has improved the security of 802.11 wireless LANs with an update to 
the 802.11 standard in 2004. The Temporal Key Integrity Protocol, for example, ﬁxes the key-
reuse problem of WEP. The TKIP process begins with a 128-bit “temporal key” shared among 
clients and access points. TKIP combines the temporal key with the client’s MAC address and then 
adds a relatively large 16-octet initialization vector to produce the key used to encrypt data. This 
procedure ensures that each station uses different key strings to encrypt data. 
TKIP uses RC4 to perform the actual encryption of data frames, which is the same as WEP. A 
major difference from WEP, however, is that TKIP changes temporal keys periodically, according 
to a setting conﬁgured in the access point by an administrator. This provides a dynamic 
distribution method that signiﬁcantly enhances network security.

812     Chapter 22: IEEE 802.11 Fundamentals
AES
In addition to the TKIP solution, the 802.11i standard includes the Advanced Encryption Standard 
protocol. AES offers much stronger encryption than WEP or TKIP. In fact, the U.S. Commerce 
Department’s National Institutes of Standards and Technology (NIST) organization chose AES to 
replace the aging Data Encryption Standard (DES). AES is now a Federal Information Processing 
Standard, FIPS Publication 197, that deﬁnes a cryptographic algorithm for use by U.S. government 
organizations to protect sensitive, unclassiﬁed information. The secretary of commerce approved the 
adoption of AES as an ofﬁcial government standard in May, 2002. Some of the older access points 
and radio cards do not support AES because it requires a specialized math coprocessor. 
WPA 
Before the ratiﬁcation of the 802.11i standard, the Wi-Fi Alliance released the Wi-Fi Protected 
Access (WPA) standard, which most wireless LAN vendors rapidly adopted. WPA is actually a 
snapshot of the pre-ratiﬁed 802.11i standard involving TKIP and IEEE 802.1x standards. Eventually, 
the Wi-Fi Alliance released WPA2, which includes AES. This mirroring of standards has been 
effective for end users because the Wi-Fi Alliance requires special interoperability testing 
before a wireless LAN vendor can claim that its radio cards and access points are Wi-Fi Alliance 
certiﬁed. 
Open System Authentication
Open system authentication is the default mode that 802.11 uses to authenticate radio cards to an 
access point. In this mode, a radio card sends an authentication frame to the access point, and the 
access point returns an authentication response. This form of authentication does not offer any real 
security. It is mainly part of the standard as a baseline authentication method. 
When in the process of joining a network, the radio card completes open system authentication 
with the two-way handshaking process described earlier in the chapter. The radio card begins 
by sending an authentication frame to the access point, and the access point responds with an 
authentication frame. No credentials are passed during open system authentication; however, 
some vendors might implement provisions that must be met to authenticate stations. 
Shared Key Authentication
802.11 shared key authentication goes a step further than open system authentication by using the 
common WEP key to authenticate radio cards. This is a four-way handshaking process: 
1.
The radio card sends an authentication request.
2.
The access point responds with an authentication frame containing challenge text, which is a 
string of unencrypted text. 
KEY 
POINT

Wireless Security     813
3.
The radio card encrypts the challenge text with the WEP key and sends the result to the access 
point. 
4.
The access point decrypts the challenge text with the common WEP key. If the challenge text 
is the same text that the access point initially sent, then the access point assumes that the radio 
card has the correct WEP key and that the radio card is a legitimate user. 
Unfortunately, shared key authentication is easy to hack. In fact, a hacker can use freely 
available tools to readily ﬁnd the WEP key. As a result, it is strongly advisable to not use shared 
key authentication.
Virtual Private Networks
To fully secure wireless connections, many companies require the use of VPN software on each 
user device to encrypt all communications between the user device and the remote system. The 
use of VPN software is especially important when users are communicating over public wireless 
LANs. Public Wi-Fi hotspots, for instance, do not implement any encryption over the wireless 
portion of the network. The VPN must protect data trafﬁc.
In fact, some companies treat all wireless users as though they are operating from a public 
network—even those users who are inside the company’s building. In this case, the wireless LAN 
access points connect to a distribution system that falls outside the ﬁrewall. This approach, 
however, might require an impractical number of VPN connections, which can be costly to deploy 
and support. For internal communications, it is possible to fully secure wireless users through the 
use of Layer 2 mechanisms. 
Comparing Wireless Security
There are many options available for security, and you will need to make a decision on which one 
to use. Table 22-4 compares the various security mechanisms. 
Table 22-4
Wireless Security Mechanisms  
KEY 
POINT
Strength
Keys
Standardization
WEP
Can crack with freely 
available tools
Static keys common to 
both the radio cards and 
access point
Part of initial 802.11 standard
TKIP
Adequate security for 
most wireless LANs
Unique keys automatically 
assigned to radio cards, 
and keys change 
periodically
Included in the 802.11i standard
continues

814     Chapter 22: IEEE 802.11 Fundamentals
RF Signal Concepts 
A major difference between wireless and wired networks is that wireless LANs use radio waves 
to transport information through the air. This introduces several new concepts, especially dealing 
with RF signals. When you are deploying wireless LANs, you must understand the attributes 
associated with RF signals in order to conﬁgure access points, avoid RF interference, and 
troubleshoot problems as they arise. 
The key RF signal attributes that you need to understand are as follows:
■
Modulation
■
RF signal characteristics
■
Gain
■
Signal-to-noise ratio (SNR)
■
Spread spectrum
■
Orthogonal frequency division multiplexing (OFDM)
■
FCC rules
■
RF interference
■
Multipath
The sections that follow describe each of these in more detail.
Modulation
An RF signal has characteristics that enable it to be sent from an antenna, through the air medium, 
and received by another antenna at the destination. RF signals are analog in nature. A computer, 
though, uses digital signals to represent bits of information. 
Strength
Keys
Standardization
AES
Very strong, good enough 
for some government 
systems
Unique keys automatically 
assigned to radio cards, 
and keys change 
periodically
Included in the 802.11i standard
WPA
Adequate for most wireless 
LANs and good enough for 
some government systems
Unique keys automatically 
assigned to radio cards, 
and keys change 
periodically
Ratiﬁed by the Wi-Fi Alliance
Table 22-4
Wireless Security Mechanisms  (Continued)
KEY 
POINT

RF Signal Concepts     815
Before transmitting data through the air, the transceiver within the radio cards and access points 
must convert digital signals into analog signals suitable for transmission through the air medium. 
As part of receiving an 802.11 frame, a radio card or access point must convert the analog signal 
back into a digital form that is understood by the computing device. This conversion process is 
known as modulation and demodulation, respectively. 
802.11 deﬁnes several types of modulation, depending on which physical layer and data rate 
is in use by the 802.11 station. In general, it is possible to modulate an RF carrier signal by 
changing its amplitude, frequency, or phase, as shown in Figure 22-9. For example, 802.11b 
uses phase shift keying (PSK) to represent digital data. 802.11a and 802.11g, though, implement 
a combination of amplitude and phase shifts, which is referred to as quadrature amplitude 
modulation (QAM). 
Figure 22-9
Attributes of an RF Signal
RF Signal Characteristics
RF signals are cyclic and vary in time continuously. The number of cycles that occur in the signal 
per second is its frequency, which can vary throughout what is referred to as the frequency 
spectrum. The unit of frequency is hertz (Hz), and wireless LAN signals fall roughly into the 
2.4-GHz and 5-GHz portions of the frequency spectrum. The process of modulation causes the 
RF signal to occupy a portion of the frequency spectrum, which is known as bandwidth. 
In addition to frequency, an RF signal at any time has speciﬁc amplitude. There are many ways to 
represent signal amplitude, but the most common with RF systems is signal power. The applicable 
unit for power is watt (W) or decibels relative to 1 milliwatt (dBm). The FCC has rules for 
maximum transmitter output depending on the standard in use. For example, the maximum 
transceiver output for 802.11b is 1 W. In general, higher transmit power enables longer-range 
operation. 
Most wireless LAN systems have RF signals that fall into the milliwatt (mW) range, which makes 
the addition and multiplication of RF signals mathematically difﬁcult. As a result, it is 
T
Amplitude
Time
Frequency = 1/T
Reference
Phase

816     Chapter 22: IEEE 802.11 Fundamentals
advantageous to convert watts to dBm, which is a logarithmic value that references the signal 
power to 1 mW. The conversion formula is as follows: 
dBm = 10 log (mW)
For example, 100 mW equals 20 dBm. 
Gain
The components of a wireless LAN offer varying degrees of gain, which represents how much a 
signal changes from one point to another. The gain in dB is simply the signal level at the output of 
a device (in dBm) minus the signal level at the input of the device (in dBm). The decibel is a unit 
that represents change in signal amplitude. A signal experiences a gain of 3 dB, for example, when 
it increases from 50 mW (17 dBm) to 100 mW (20 dBm). An ampliﬁer or antenna may offer this 
gain to the signal.
Attenuation, or loss, is the inverse concept to gain. If the signal goes from 20 dBm to 17 dBm, then 
the signal experiences attenuation of 3 dB. This can also be expressed as –3 dB gain. Antenna 
cabling and obstacles in a facility, such as walls and furniture, introduce attenuation. In addition, 
freespace loss, which is dependent on frequency and path distance, is a form of attenuation. The 
freespace loss occurs due to attenuation of the air medium and contributes to the majority of the 
total loss from the transmitter to the receiver. 
With wireless LANs, the RF signal amplitude must be of a speciﬁc minimum value before the 
radio card will detect the signal. This value depends on the 802.11 physical layer and data rate in 
use, but is approximately –85 dBm.
Antennas have gain, which impacts directivity. An omnidirectional antenna, for instance, has a 
gain of 6 dB, or more, depending on the antenna design. Higher-gain antennas become more 
directive, with higher gains providing narrower beamwidths and longer range, as shown in part B 
of Figure 22-4. Antenna gain comes from focusing a given amount of RF power into a narrower 
pattern, or beamwidth—again, much as a ﬂashlight does.
Signal-to-Noise Ratio
If noise at the radio card is high, the radio card will have difﬁculty recovering the signal, which 
results in bits errors and retransmissions. An important signal measurement is the signal-to-noise 
ratio (SNR). The SNR (in dB) at a particular point in the network is simply the signal power 
(in dBm) minus the noise power (in dBm). A signal power of –65 dBm and noise power of
–90 dBm yields an SNR of 25 dB. The noise power is anything other than signals corresponding 
to the access point or radio card. 

RF Signal Concepts     817
Table 22-5 includes several SNR values and the resulting performance of an 802.11b network 
while using a Windows XP laptop browsing websites and downloading ﬁles. The results in Table 
22-5 depict general end-user performance. The use of SNR to deﬁne the range boundary of an 
access point radio cell is more effective than either data rates or signal amplitudes. The higher 
degrees of noise cause more errors in frames and corresponding retransmissions. Note that 
Windows XP shows an indication of the signal strength in a series of bars on a graph, showing no 
bars as poor quality and ﬁve bars as the best quality. 
Spread Spectrum
In 1985, the U.S. FCC adopted regulations that specify the availability of license-free frequency 
bands in the 900-MHz, 2.4-GHz, and 5-GHz portions of the frequency spectrum. To be compliant 
with the rules for these bands, however, equipment must use spread spectrum or OFDM methods 
to spread the signal power over a relatively wide portion of the frequency spectrum. This approach 
promotes frequency reuse—otherwise known as sharing—of these bands by multiple users, with 
a low statistical probability of interference.
Spread spectrum was the ﬁrst method in use by wireless LAN vendors. There are two types of 
spread spectrum: 
■
Frequency hopping spread spectrum (FHSS)—With FHSS in the 2.4-GHz band, for 
example, the transceiver periodically tunes its transmitter and receiver to a different carrier 
frequency within approximately 84 MHz of bandwidth. Hopping from one frequency to 
another is done according to a hopping sequence programmed in each of the stations. The 
other stations receiving the frames tune their receivers to a speciﬁc frequency based on the 
Table 22-5
Correlation of SNR Values to Wireless LAN Performance
KEY 
POINT
SNR Value
Signal Indication (Windows XP)
Performance
> 40 dB
Excellent signal strength (5 bars); always 
connected with the access point
Extremely fast web browsing and 
ﬁle download
25–40 dB
Very good signal strength (3 to 4 bars); 
always connected with the access point
Very fast web browsing and ﬁle 
download
15–25 dB
Low signal strength (2 bars); always 
connected with the access point
Usually fast web browsing and ﬁle 
download
10–15 dB
Very low signal strength (1 bar); sometimes 
disconnected from the access point
Mostly slow web browsing and ﬁle 
download
5–10 dB
No signal strength (no bars); not connected 
with the access point
No network services
KEY 
POINT

818     Chapter 22: IEEE 802.11 Fundamentals
hopping sequence. The RF signal occupies approximately a 2-MHz channel. Because the 
hopping occurs very often (many times per second) and uniformly over the entire band, the 
signal appears to occupy the entire 84 MHz. The 802.11 frequency hopping physical layer 
standard enables data rates of 1 Mbps and 2 Mbps. 
■
Direct sequence spread spectrum (DSSS)—DSSS uses a coding technique to spread the 
signal over the frequency spectrum. 802.11b uses direct sequence, which spreads the carrier 
signal over approximately one third (30 MHz) of the 2.4-GHz band. With DSSS, a chipping 
code represents each data bit that needs transmission. This increases the signal rate by the 
number of bits in the chipping code (11 total). The increase in signal rate effectively spreads 
the RF signal. The differences between frequency hopping and direct sequence had been 
under debate for a number of years, but the 802.11 working group ﬁnally selected direct 
sequence for extending the initial 1-Mbps and 2-Mbps 802.11 data rates to include rates up 
to 11 Mbps. 
Orthogonal Frequency Division Multiplexing
OFDM is not a form of spread spectrum. Instead, OFDM divides a data signal across 48 separate 
subcarriers within a 20-MHz channel to provide transmissions of 6, 9, 12, 18, 24, 36, 48, or 
54 Mbps. Data rates of 6 Mbps, 12 Mbps, and 24 Mbps are mandatory for all 802.11-compliant 
products. OFDM is extremely efﬁcient, which enables it to provide the higher data rates. In 
addition, OFDM is highly immune to multipath propagation problems that cause signiﬁcant 
performance issues with spread-spectrum techniques.
An 802.11a modulator converts the binary signal into an analog OFDM waveform through the use 
of different modulation types, depending on which data rate is chosen. For example, with 6-Mbps 
operation, the PMD uses binary phase shift keying (BPSK), which shifts the phase of the transmit 
center frequency to represent different data bit patterns. The higher data rates, such as 54 Mbps, 
employ quadrature amplitude modulation (QAM) to represent data bits by varying the transmit 
center frequency with different amplitude levels in addition to phase shifts. 
Table 22-6 summarizes the primary attributes of the various wireless LAN technologies.
Table 22-6
Wireless LAN Technology Comparison
KEY 
POINT
Spread Spectrum?
Max Data Rate
Standards
FHSS
Yes
2 Mbps
802.11 FHSS
DSSS
Yes
11 Mbps
802.11b
OFDM
No
54 Mbps
802.11a and 802.11g

RF Signal Concepts     819
FCC Rules
In general, the U.S. FCC does not require users to license wireless LAN products, assuming that 
the user does not exceed certain emission limits. The FCC uses Effective Isotropic Radiated Power 
(EIRP) as a factor for determining whether a wireless LAN is in compliance with regulatory rules. 
EIRP equals the transmit power (in dBm) minus cable and connector losses (in dB) and plus the 
antenna gain (in dB). For 802.11b/g access points and radio cards, the EIRP can be up to 36 dBm, 
which includes a transmit power up to 30 dBm (4 watts) and 6-dBi antenna gain. 
In addition, the user must obtain FCC licensing for the wireless LAN solution when using 
antennas or ampliﬁers that are not part of the access point vendor’s products certiﬁed with the 
FCC. This is necessary to ensure that the proposed wireless system will not interfere with existing 
systems at the location of operation. Regulatory agencies in other countries have similar rules, but 
they differ slightly depending on the country. As mentioned earlier, research your country’s rules 
and deploy your systems based on them.
RF Interference
Because of the use of radio waves, wireless LANs are susceptible to several sources of RF 
interference. Interfering signals cause delay and reduce throughput. If no 802.11 frame 
transmissions are in process when the interference is present, then the result will be medium 
access delays. In some cases, this delay can be indeﬁnite. 
RF interference causes data frames in transit to become corrupted, resulting in a retransmission. 
The destination disregards the incoming frame, because its error-checking mechanism indicates 
errors in the frame. As a result, the destination station does not send an acknowledgement. 
After a period of time, the sending station retransmits the frame. This adds delay and cuts 
throughput. 
RF interference in the 2.4-GHz band comes from microwave ovens, cordless phones, Bluetooth 
devices, and other wireless LANs. Most microwave ovens, for instance, emanate RF energy over 
roughly one third of the 2.4-GHz band. The actual frequencies that this involves, however, vary 
from one microwave oven to another. If an access point is set to a channel that falls within the 
affected frequencies, then signiﬁcant interference and decrease in throughput will occur. 
Microwave oven interference can occur for many tens of feet away from the microwave oven—
farther if you are using a directional antenna oriented toward the interference source. It is 
generally possible, though, to tune the access point to a channel where the interference is 
minimal. 
Cordless phones that operate in the 2.4-GHz band are popular, and they can cause negative impacts 
similar to microwave ovens. Interference is worse when someone is actively using the phone, but 
remote phone stations often communicate wirelessly with the base station even when no call is 
taking place. In addition, some cordless phones that use frequency hopping cause interference 

820     Chapter 22: IEEE 802.11 Fundamentals
across the entire 2.4-GHz band, making it impossible to tune the access point away from the 
interference. The only solution in such situations, if you want to keep the phones, is physical 
separation. If the interference is still causing signiﬁcant interference, then consider replacing the 
phones with 900-MHz or 5.8-GHz phones. 
Another source of RF interference is a neighboring wireless LAN operating within the same part 
of the frequency band you are using—for example, a nearby wireless LAN located in the same 
ofﬁce complex. When deploying your wireless LAN, it is important to avoid assigning channels 
to access points that overlap with the neighboring access points. Otherwise, performance of both 
networks will suffer. 
Because of the potential for RF interference and its negative impact on performance, it is very 
important to analyze the presence of potential RF interference before you install a wireless LAN. 
This is generally done through an initial RF site survey that measures the presence of interference 
sources to determine potential problems. If too many issues related to interference exist, then you 
should consider using a wireless LAN that operates in a different band of frequencies. For 
example, consider using 802.11a instead of 802.11b/g.
Multipath
Multipath interference occurs when an RF signal takes different paths when propagating from one 
wireless station to another. While the signal is en route, walls, chairs, desks, and other items get 
in the way and cause the signal to bounce in different directions. A portion of the signal might go 
directly to the destination, and another part might bounce from a chair to the ceiling, and then to 
the destination. As a result, some of the signal will encounter delay, because it has to travel over a 
longer path to the receiver. 
Multipath causes the information symbols received by an 802.11 signal to overlap, which causes 
the receiver to have difﬁculty demodulating the signal. This effect is often referred to as 
intersymbol interference (ISI). Because the shape of the signal conveys the information being 
transmitted, the receiver will demodulate errored data. If the delays are great enough, bit errors in 
the packet will occur. The receiver will not be able to distinguish the symbols and interpret the 
corresponding bits correctly. As a result, the sending station will have to retransmit the affected 
frames. 
Because of retransmissions, users encounter lower throughput when multipath is signiﬁcant. The 
reduction in throughput depends on the environment. As examples, 802.11 signals in homes and 
ofﬁces might encounter 50 nanoseconds of multipath delay, while signals in a manufacturing plant 
could encounter multipath delay as long as 300 nanoseconds. Based on these values, multipath is 
not too much of a problem in homes and ofﬁces. Metal machinery and racks in a plant, however, 
provide a lot of reﬂective surfaces from which RF signals may bounce and take erratic paths. Thus, 

RF Signal Concepts     821
be wary of multipath problems in warehouses, processing plants, and other areas full of irregular, 
metal obstacles. 
Antenna diversity can aid in combating multipath propagation. An access point may implement 
a spatial diversity antenna system, which consists of two antennas that interchangeably receive 
and transmit radio signals. An access point receives a signal on both antennas, but because of 
multipath propagation and interference, the same signal often does not reach both antennas at 
the same time and strength. The access point then performs internal calculations to optimize the 
received signal. The main beneﬁts of spatial diversity antenna systems are improved coverage 
and signal reception. 

822     Chapter 22: IEEE 802.11 Fundamentals
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information listed 
in the “Foundation Topics” portion of the chapter. Please take the time to read and study the details 
in this section of the chapter, as well as review the items in the “Foundation Topics” section noted 
with Key Topic icons.
The 802.11 standard is a very important basis for understanding the operation and conﬁguration 
options for a wireless LAN solution. Most wireless LANs include access points, which interface 
wireless users to a physical network and forward 802.11 data frames between wireless users that 
are associated with various access points. Ad hoc wireless LANs, however, do not use access 
points, and allow wireless users to send data frames directly to each other. 
There are several conﬁguration parameters that you can set in access points and radio cards to 
optimize performance. For example, fragmentation and RTS/CTS functions can improve the 
throughput of a wireless LAN in some situations. Radio waves are very different from signals that 
travel over a wired medium. RF interference, multipath propagation, and various sources of 
attenuation affect radio waves and cause errors in frame transmissions. You must be aware of these 
issues and plan wireless LAN deployment accordingly. 
The new 802.11i standard offers solid security for wireless LANs, with TKIP and AES replacing 
the vulnerable WEP protocol. The 802.11 standards include several physical layers with varying 
degrees of interoperability and performance. 
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Topic icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 

Memory Builders     823
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
infrastructure mode, ad hoc mode, passive scanning, DTIM interval, active scanning, 
SSID, power-save mode, RTS/CTS, fragmentation, transmit power, distributed 
coordination function, point coordination function, network allocation vector, WEP, 
TKIP, association ID, AES, WPA, SNR, spread spectrum, RF channel, FHSS, 
beacon, DSSS, OFDM, multipath, 802.11a, 802.11b, 802.11g, 802.11n
Refer to the CD-based glossary to check your answers.
Further Reading
For more details regarding wireless LANs, consider reading the following Cisco Press books:
■
Wireless Networks First-Step, by Jim Geier
■
802.11 Wireless LAN Fundamentals, by Pejman Roshan and Jonathan Leary

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■Enterprise Wireless Mobility 
— Hardware 
— SWAN 
— VoWLAN 
— Products

C H A P T E R 23
Wireless LAN Solutions
The application of wireless LANs, especially for supporting voice, requires careful selection of 
components, device conﬁguration, and management. This is important to create a solution that 
offers required levels of performance and security that enable the lowest total cost of ownership. 
This chapter focuses on deploying wireless LANs for various applications.
“Do I Know This Already?” Quiz
Table 23-1 outlines the major sections in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
What is Cisco Wireless Domain Services (WDS)? 
e. A collection of Cisco access points that comprises a secure wireless LAN
f. A set of Cisco IOS Software features that enhances and simpliﬁes wireless LAN cli-
ent mobility, security, deployment, and management
g. A security solution that Cisco no longer supports
h. A web-based service that Cisco offers on a paid subscription basis
Table 23-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
Cisco Structured Wireless-Aware Network
1 through 4
Applying Wireless LANs in Enterprises
5 through 7
Public Wireless LANs
8 and 9
Small Ofﬁce and Home Wireless LANs
10
Total Score

826     Chapter 23: Wireless LAN Solutions
2.
What are required components of Cisco SWAN? 
a. Cisco Aironet Series access points and 802.1x authentication server 
b. Cisco Aironet Series access points, WLSE, and Cisco Aironet client devices 
c. WLSE and 802.1x authentication server
d. Cisco Aironet Series access points, WLSE, and 802.1x authentication server 
3.
Which Cisco access point is designed for outdoor campus networks? 
a. Cisco Aironet 1300 Series 
b. Cisco Aironet 1200 Series
c. Cisco Aironet 1100 Series
d. Cisco Aironet 1000 Series
4.
The Cisco Aironet 350 Series access point complies with which of the following standards?
a. 802.11n
b. 802.11b
c. 802.11g
d. 802.11e
5.
Which layer of the network architecture should you focus on when providing wireless LAN 
security in enterprises?
a. Layer 1
b. Layer 4
c. Layer 3
d. Layer 2
6.
What are sufﬁcient RF signal characteristics for supporting voice services over wireless 
LANs?
a. 20-dB SNR with approximately 20 percent overlap between adjacent radio cells
b. 25-dB SNR with approximately 20 percent overlap between adjacent radio cells
c. Minimum of 36-Mbps data-rate associations between the client devices and the access 
points
d. Minimum of 11-Mbps data-rate associations between the client devices and the access 
points

“Do I Know This Already?” Quiz     827
7.
How can you avoid the impacts of RF interference on voice services operating over wireless 
LANs?
a. Use 802.11b/g interfaces
b. Use additional Wi-Fi phones to drown out the interference
c. Use 802.11a interfaces
d. Decrease the access point transmit power
8.
Why should you enable the broadcasting of SSIDs in beacon frames sent by the access points 
in a public wireless LAN? 
a. The network will have better security
b. Users will see the wireless network in Windows
c. Power management will be more efﬁcient
d. Network delays will decrease
9.
What are the primary conﬁguration differences between a public and enterprise wireless 
LAN?
a. Security and billing components
b. Performance and billing components
c. Access point hardware
d. Management mechanisms
10.
Why do you need a Wi-Fi router instead of an access point when installing a wireless LAN in 
a small ofﬁce or home? 
a. A router operates at a faster speed
b. A router implements better security mechanisms
c. A router will last longer
d. The router implements DHCP and NAT

828     Chapter 23: Wireless LAN Solutions
Foundation Topics
Cisco Structured Wireless-Aware Network
Cisco Structured Wireless-Aware Network (SWAN) is a framework for integrating wired and 
wireless networks based on the Cisco Systems product line of wireless LAN products. SWAN 
is an architecture that embodies the services, protocols, and tools necessary to deploy effective 
solutions with minimal total cost of ownership. 
This section further explains the SWAN components.
Wireless Domain Services
Wireless Domain Services (WDS) is a set of Cisco IOS Software features that enhances and 
simpliﬁes wireless LAN client mobility, security, deployment, and management. WDS offers the 
following primary services for SWAN:
■
Fast Secure Roaming (FSR)—For time-sensitive applications, enables a wireless client to 
securely roam between access points in the same subnet or between subnets, enhances channel 
scanning, and provides fast IEEE 802.1X rekeying. Access point handoff times are within 50 ms, 
which is crucial for effective VoIP applications while users are roaming about the facility.
■
Radio management aggregation—Reduces the bandwidth necessary for radio management 
information, such as access point status messages, that is sent across the network, by eliminating 
redundant management information. Radio management information is sent to the CiscoWorks 
WLSE and provides the basis for monitoring functions, such as rogue access point detection 
and location.
■
Client tracking—Records client authentication and roaming events, which are sent to the 
CiscoWorks WLSE to monitor client associations to speciﬁc access points.
Figure 23-1 illustrates how the FSR feature of WDS works:
1.
AP1 must initially 802.1x authenticate with the WDS device to establish a secure connection. 
The initial client authentication goes to a central AAA server to authenticate the user and 
authorize speciﬁc services. This occurs in approximately 500 ms.
2.
When the client roams, the client informs WDS that roaming is taking place, and WDS sends 
the applicable key to the new access point (AP2 in this example). The handoff time between 
the access points is approximately 50 ms.
KEY 
POINT

Cisco Structured Wireless-Aware Network     829
Figure 23-1
Cisco SWAN Fast Secure Roaming 
Intrusion Detection System
Cisco SWAN includes the Wireless LAN Threat Defense Solution, which includes an intrusion 
detection system (IDS) (refer to Figure 23-2). This safeguards the wireless LAN from malicious 
and unauthorized access. For example, the IDS detects and suppresses rogue access points by 
disallowing them to authenticate with the network, and identiﬁes unassociated clients through 
MAC address association tables. The IDS integrates with the Cisco Self-Defending Network, the 
Cisco vision for network security.
1
WAN
AP1
Switch-Based WDS
AP2
Cisco Secure
Access Control
Server (AAA Server)
2
Fast Secure Layer 3 Roaming
Note: Because the WDS handles roaming and reauthentication, the WAN link is not used
KEY 
POINT

830     Chapter 23: Wireless LAN Solutions
Figure 23-2
Cisco Wireless LAN Threat Defense Solution
The IDS provides an optional capability for using Cisco Aironet and Cisco-compatible client 
devices to continuously scan and monitor the RF environment. The client devices work jointly 
with Cisco Aironet access points to regularly measure RF activity. This client-assisted rogue 
access point scanning and monitoring increases rogue access point detection and enhances the 
security of the network. As shown in Figure 23-3, the radio management (RM) element in the 
client device identiﬁes a rogue access point and reports relevant ﬁndings to WLSE. The RM 
element looks for access point conﬁgurations that indicate a rogue, such as an unauthorized 
SSID and MAC address. 
Si
Si
Si
Si
Si
RM
RM
Rogue
Access Point
Switch-
Based
WDS
RM = Radio Management

Cisco Structured Wireless-Aware Network     831
Figure 23-3
Cisco IDS with Client Scanning 
Cisco SWAN Hardware
When building a wireless LAN based on Cisco SWAN, a company must choose components designed 
to ﬁt into the architecture. Cisco SWAN includes the components described in Table 23-2.
Table 23-2
Cisco SWAN Hardware 
KEY 
POINT
Hardware Type
Function
Cisco Aironet Series access 
points
These access points, which must run Cisco IOS Software to be part of 
SWAN, are a mandatory component of Cisco SWAN. They enable 
roaming throughout the network and interconnect wireless LAN users 
to the wired network.
continues
Si
Si
Si
Si
Si
RM
RM
RM
Rogue
Access Point
Access Point-
Based WDS
Rogue
Access Point
RM = Radio Management

832     Chapter 23: Wireless LAN Solutions
Cisco Wireless LAN Hardware
Cisco has a complete line of wireless LAN hardware that addresses the needs of enterprises, public 
networks, and homes. The following list identiﬁes each of these devices, by category, that integrate 
into SWAN:
■
Access points:
— Cisco Aironet 1300 Series—A multifunctional component that provides access 
point and bridge functionality for network connections within an outdoor campus 
area. The 1300 Series supports the 802.11b/g standards.
— Cisco Aironet 1230AG Series—Has dual antenna connectors for extending range, 
with optional antennas for enterprise solutions.
— Cisco Aironet 1200 Series—Includes a dual-slot architecture that allows ﬂexibility 
when conﬁguring radio cards for enterprise solutions. For example, it can include 
any combination of radio card technology, such as 802.11a and 802.11g. 
— Cisco Aironet 1130AG Series—Includes integrated antennas and dual 802.11a/g 
radios for enterprise solutions. 
— Cisco Aironet 1100 Series—Offers an easy-to-install, single-band, 802.11b/g 
access point for enterprise solutions.
Hardware Type
Function
Management and security 
servers
Cisco SWAN requires the use of the CiscoWorks Wireless LAN 
Solution Engine (WLSE) and an IEEE 802.1x authentication server, 
such as Cisco Secure Access Control Server (ACS), for management 
and security of the wireless LAN.
Wireless LAN client devices
The client devices must be Wi-Fi certiﬁed or IEEE 802.11 client 
adapters. Cisco Aironet or Cisco-compatible client devices, which are 
optional, offer enhanced features, such as better security, enhanced 
interoperability, and extended radio management.
Infrastructure devices
Cisco incorporates wireless capabilities into its switches and routers, 
such as the Cisco Catalyst 6500 Series Wireless LAN Services Module 
(WLSM), which creates a uniﬁed network system that interoperates 
effectively with Cisco SWAN access points. WLSM allows no loss of 
Layer 3 connectivity as users roam from access point to access point 
across a large campus. Each WLSM supports up to 300 access points 
and 6000 wireless clients.
Table 23-2
Cisco SWAN Hardware (Continued)

Cisco Structured Wireless-Aware Network     833
— Cisco Aironet 350 Series—Designed for small and medium-sized businesses, 
provides an ideal solution for customers who desire a non-upgradeable IEEE 802.11b 
solution. Supports the 802.11b standard.
■
Wireless bridges and workgroup bridges:
— Cisco Aironet 1400 Series Wireless Bridge—Connects multiple LANs in a 
metropolitan area. Supports both point-to-point and point-to-multipoint conﬁgurations, 
with data rates up to 54 Mbps. 
— Cisco Aironet 1300 Series Outdoor Access Point/Bridge—A multifunctional 
component that provides access point, bridge, and workgroup bridge functionality 
for network connections within an outdoor campus area. Supports the 802.11b/g 
standards.
■
Lightweight access points—Formerly an Airespace product, the Cisco 1000 Series 
Lightweight Access Point is an 802.11a/b/g, zero-touch conﬁguration and management 
access point for enterprise solutions. Works in conjunction with a Cisco Wireless LAN 
Controller and optional Cisco Wireless Control System (WCS) to support real-time 
intrusion monitoring in addition to data traffic.
■
Cisco wireless LAN client adapters:
— Cisco Aironet 802.11a/b/g Wireless CardBus Adapter—Designed for laptops 
and tablet PCs. 
— Cisco Aironet 802.11a/b/g Wireless PCI Adapter—Designed for desktop and 
point-of-sale devices.
— Cisco Aironet 350 Wireless LAN Client Adapter—Available in both PC Card 
(PCMCIA) and PCI form factors and supports 802.11b connections.
— Cisco Aironet 5-GHz 54-Mbps Wireless LAN Client Adapter (CB20A)—
Compliant with 802.11a and supports CardBus standards. 
■
Wireless LAN controllers:
— Cisco 4100 Series Wireless LAN Controller—Works in conjunction with the 
Cisco 1000 Series Lightweight access points and Cisco WCS to provide system-
wide functions, such as intrusion detection, RF management, and security policy 
management. Ideal for medium-to-large enterprise facilities. 
— Cisco 2000 Series Wireless LAN Controller—Similar to the 4100 Series, but is 
best for small-to-medium enterprise facilities because they support fewer access points. 

834     Chapter 23: Wireless LAN Solutions
CiscoWorks Wireless LAN Solution Engine
CiscoWorks WLSE is a centralized network management system for Cisco Aironet solutions. 
WLSE is a key component of SWAN and consists of the following features:
■
Automatic access point conﬁguration
■
Assisted site surveys
■
Centralized ﬁrmware updates 
■
Dynamic grouping
■
VLAN conﬁguration 
■
Multiple service set identiﬁer (SSID) support 
■
Customizable thresholds
■
Fault status
■
Intrusion detection system
■
Security policy monitoring
■
Secure user interface
■
Air/RF scanning and monitoring 
■
Self-healing functions
■
Reporting, trending, planning, and troubleshooting
These features are discussed, in turn, in the following sections.
Automatic Access Point Conﬁguration
WLSE automatically discovers and conﬁgures Cisco Aironet access points based on access point 
type, subnet, and software version. This eliminates the need to manually conﬁgure each access point 
separately. WLSE allows the administrator to update any of the access point conﬁgurations, such as 
NOTE
While the current CCIE Routing and Switching written exam blueprint does not 
typically list products, wireless is the only such case in which the blueprint does mention 
products. Obviously, the product mix will change over time, with rapid changes in the Cisco 
WLAN product mix likely between the completion date of this chapter, publication date, 
and into the early life of this book. You may want to focus more on the types of features 
implemented by types of products. You can also refer to http://www.cisco.com/en/US/partner/
products/hw/wireless/index.html for more information on product changes (requires a CCO 
username/password).
KEY 
POINT

Cisco Structured Wireless-Aware Network     835
WPA security settings, SSID, and RF channel. WLSE can also perform mass upgrades of older Cisco 
access points running VxWorks to newer Cisco IOS Software versions. WLSE stores the last four 
conﬁguration versions for each access point so that an administrator can easily undo changes. 
Assisted Site Surveys
WLSE’s assisted site survey tool automatically identiﬁes optimal RF channels and transmit power 
and periodically assesses performance with respect to baseline site-survey settings. These features 
ease wireless LAN installation by reducing the effort needed to perform RF testing in the facility 
prior to installing the network. WLSE generates notiﬁcations to the administrator when applicable 
conﬁguration updates are necessary as the RF dynamics of the facility change over time.
Centralized Firmware Updates
WLSE allows administrators to update ﬁrmware on access points and bridges on an individual or 
group basis. Timely ﬁrmware updates are critical for ensuring optimum performance, reliability, 
and security of the network. 
Dynamic Grouping
Administrators can group access points that span different subnets into different groups to enable 
more intuitive network management. For example, one group of access points may be named 
“public,” and another group may be named “Engineering,” regardless of where the access points 
physically reside on the network. This is similar to the concept of multiple VLANs at Layer 2.
VLAN Conﬁguration
WLSE allows administrators to centrally conﬁgure and monitor VLANs on access points. This 
feature enables the administrator to separate trafﬁc among different groups of users associating 
with the same access point. For example, one VLAN may be assigned to public users, and a 
different VLAN may be provided for staff members. 
Multiple Service Set Identiﬁer Support
WLSE allows the conﬁguration of up to eight broadcast SSIDs per access point radio. Each SSID 
can be assigned to a particular VLAN, facilitating the use of VLANs to separate user trafﬁc. The 
SSID “public,” for example, may tie to the VLAN connecting to the Internet from outside the 
DMZ of the company network. 
Customizable Thresholds
Administrators can deﬁne a variety of faults and performance thresholds, such as network load, 
RF usage, errors, and clients associations, and specify actions and fault priorities. If data trafﬁc 

836     Chapter 23: Wireless LAN Solutions
through a particular access point reaches capacity, for instance, WLSE can send an alert to the 
administrator via SNMP.
Fault Status
WLSE displays a view of all access points and device groups, with color coding and group icons 
that indicate fault status. Fault notiﬁcations are done via Syslog messages, SNMP traps, and
e-mail. This is especially important with wireless LANs, because a faulty access point, possibly 
due to a broken antenna, could go unnoticed for weeks or months if no monitoring functions are 
available. Users in this situation tend to adapt to the resulting coverage hole by moving to a 
different part of the facility to maintain connectivity. Careful monitoring of the fault status of 
access points eliminates this problem. 
Intrusion Detection System
WLSE detects unauthorized access points and tracks wireless clients participating in the wireless 
LAN. For example, WLSE detects clients spooﬁng authorized MAC addresses, excessive probe 
requests, and unusual deauthentication frames that indicate potential man-in-the-middle or DoS 
attacks. 
Security Policy Monitoring
WLSE monitors the network via SNMP and ensures that all access points are conﬁgured to ensure 
adherence to security policies. If an improper conﬁguration is found, WLSE issues alerts via
e-mail, Syslog, or SNMP trap notiﬁcations. This precludes someone from making use of a rogue 
access point to attach to the corporate network. WLSE detects improper conﬁguration of the rogue 
device and promptly alerts the administrator.
Secure User Interface
WLSE includes a secure, role-based, HTML user interface to facilitate remote access to the 
management functions. As a result, an administrator can use WLSE functions while sitting in an 
ofﬁce, when traveling, or from home. All communications between WLSE and the access points 
is done via SSL. 
Air/RF Scanning and Monitoring
Cisco Aironet access points have integrated RF scanning and measurement features that 
collect information regarding the RF environment, which may include rogue access points 
and users. WLSE analyzes this data and provides reports and alerts when rogue devices are 
found or when RF coverage is not optimum. WLSE also helps determine the source of RF 
interference. These features reduce the need to install dedicated sensing devices to monitor 
for rogue access points. 

Applying Wireless LANs in Enterprises     837
Self-Healing Functions
If an access point fails, WLSE can automatically increase the power and corresponding coverage 
of surrounding access points to compensate for the coverage hole. This quickly ﬁxes coverage hole 
problems while the administrator replaces the failed access point. WLSE also has a backup 
mechanism that automatically takes over and notiﬁes the administrator if the primary WLSE fails. 
Reporting, Trending, Planning, and Troubleshooting
WLSE tracks actions made by clients to aid in troubleshooting network access problems. For 
example, a user many be having troubles associating with an access point. The administrator or 
help desk can view recent transactions with the applicable access point and determine the source 
of the problem. 
Applying Wireless LANs in Enterprises 
There are many applications for wireless LANs in enterprises. For example, a company might 
deploy a wireless LAN to mobilize its workforce. Larger enterprises, such as Microsoft, have done 
this and achieved signiﬁcant returns on investment through the gain in efﬁciencies. The ability for 
an employee to access e-mail and other documents from anywhere within the facility saves a 
signiﬁcant amount of time and money. Employees are more productive and able to respond to 
speciﬁc events faster. A sales representative, for example, can respond to an inquiry from a 
customer while attending a meeting in the conference room rather than waiting until after 
returning to the ofﬁce.
Another use for wireless LANs in the enterprise is to provide a wireless network for customers 
and consultants to easily access Internet services while visiting the company’s facilities. In this 
case, a company places the access points outside the DMZ and treats the network as a public 
network found at typical Wi-Fi hotspots. The availability of networking services in this situation 
helps both the company and its visitors by strengthening the ability to communicate.
Enterprise Security
Security is one of the most important aspects of an enterprise wireless LAN. Without proper 
security mechanisms in place, a company is vulnerable to hackers gaining access to unauthorized 
information and possibly destroying network resources. The goal of effective security is to use a 
combination of proven security practices to ensure that the company’s information systems assets 
are safe.
To properly secure an enterprise wireless LAN, ﬁrst establish wireless security polices. Before 
installing the wireless LAN, consider requirements and establish proven security policies that 
provide adequate protection. These policies should mandate company control of the installation 
of wireless LAN components and address architectural elements, such as encryption and 

838     Chapter 23: Wireless LAN Solutions
authentication protocols, limits of RF emanation outside the facility, and access point physical 
mounting restrictions.
Most installations should focus on implementing Layer 2 security. Most companies deploying 
wireless LANs implement Layer 2 security to apply security between client devices and access 
points. In this case, the access points connect directly to the corporate network. This is a cost-
effective method for providing security throughout the enterprise, especially when there are a 
relatively large number of wireless users. Wi-Fi Protected Access (WPA) is a good encryption 
mechanism to use for this purpose because it automatically assigns encryption keys periodically 
to client devices.
If a signiﬁcant number of visitors need wireless access to Internet services, however, it might be 
more practical to connect the access points outside the DMZ and require employees to use VPN 
client software to access corporate resources. Figure 23-4 illustrates this approach. If many 
employees need wireless connections, however, this approach could be relatively expensive due 
to the signiﬁcant number of VPN connections needed with the corporate system. 
Figure 23-4
Public Wireless LAN Within an Enterprise 
Most installations should try to limit propagation of radio signals outside the facility. As a 
precaution, consider designing the wireless LAN in a way that limits radio signals from being 
received outside the facility. This minimizes the ability for a hacker to associate with one of the 
wireless LAN access points. A company can reduce radio propagation outside the building by 
properly aligning antennas and reducing the transmit power of access points. 
Access Points
Access Points
Firewall
Un-Secure Network
Secure Network
Corporate
Network

Applying Wireless LANs in Enterprises     839
Voice Services
Voice service over wireless LANs is becoming the killer application that is causing the industry to 
explode. Many mobile device makers are beginning to include integrated Wi-Fi in smart phones 
and PDAs along with cellular interfaces, and enterprises are beginning to understand the 
signiﬁcant advantages of using voice services, along with data, over wireless LANs. The Cisco 
Wireless IP Phone 7920, for instance, interfaces with 802.11b access points. Incredible gains in 
efﬁciency are possible by equipping employees with wireless phones for use throughout the 
enterprise, and the use of a common wireless LAN infrastructure is extremely cost-effective for 
supporting both voice and data services. 
Figure 23-5 illustrates a typical voice over wireless LAN (VoWLAN) conﬁguration. The Wi-Fi 
phone communicates with an IP PBX. The IP PBX, such as a Cisco CallManager (CCM), 
interfaces with the phone by using IP and provides connections to the Public Switched Telephone 
Network (PSTN). The IP PBX handles calls within the facility and interfaces with the PSTN for 
external calls. VoIP gateways are available to interface Wi-Fi phones to a legacy PBX.
Figure 23-5
Voice over Wireless LAN Conﬁguration 
When deploying voice services over wireless LANs, consider the suggestions found in Table 23-3.
Table 23-3
Voice over Wireless LAN Deployment Tips 
Tip
Justiﬁcation Details
Perform accurate RF
site surveys
To avoid coverage holes and ensure proper signal levels, a company 
should perform an accurate RF site survey when determining the optimum 
positioning of access points. Cisco has guidelines for deploying Wi-Fi 
phones, which describe the need for a minimum of 25-dB SNR with 
approximately 20 percent overlap between adjacent radio cells. This is 
somewhat higher SNR than what is needed for data-only applications. 
continues
Access Points
Switch
IP PBX
Access Points
PSTN
V
KEY 
POINT
KEY 
POINT

840     Chapter 23: Wireless LAN Solutions
Public Wireless LANs
Many public venues, such as airports, coffee shops, hotels, and convention centers, offer Wi-Fi 
access to the Internet. This form of network is often referred to as a public wireless LAN 
(PWLAN). PWLANs allow people who are away from their homes and ofﬁces to access e-mail, 
browse the Internet, and interface with corporate applications. The smaller public “hotspots” may 
only have a single access point connecting directly to an ISP. Larger implementations usually have 
numerous access points, similar to an enterprise installation, and incorporate user authentication 
and billing functions. In some cases, access to the Internet is free. Other hotspots, especially those 
offering nationwide roaming, charge a fee for usage. 
The implementation of a public wireless LAN is often the most complex, as compared to other 
networks, mainly because of the need to regulate access to the network and to support a wide 
variety of user interfaces. Figure 23-6 illustrates the conﬁguration of a PWLAN. Access points 
interconnect to an access controller, which regulates connections to the Internet. A user, for 
example, initially connects to an access point and attempts to use their browser. The access 
controller receives the browser’s URL request and, instead of returning the requested page, 
returns an HTML login page. The user enters their credentials, such as username and password, 
and the controller then opens access to the Internet for that user. If a user is not a subscriber, the 
controller hands them off to a billing system to collect payment before granting access to the 
Internet. 
Tip
Justiﬁcation Details
Choose access points that 
support fast roaming
Wi-Fi phones require a fast handoff between access points as users 
roam throughout the facility. In general, the handoff should be under 
100 ms; however, it is best to design networks for roaming delays of
50 ms or less. The roaming delay, however, must also take into account 
the latency that the backend network provides, because the Wi-Fi 
phone is actually communicating with components residing on the 
wired network.
Carefully assess RF 
interference
The presence of RF interference can severely disrupt voice services on 
wireless LANs. As a result, be certain to assign RF channels to the 
wireless LAN to stay away from interference sources, such as microwave 
ovens and cordless phones. It is also important to ensure that adjacent 
access points are far enough apart to avoid inter-access point interference. 
In some cases, a company should consider the use of 802.11a for 
supporting voice services, because the 5-GHz band is relatively free from 
RF interference.
Table 23-3
Voice over Wireless LAN Deployment Tips (Continued)

Public Wireless LANs     841
Figure 23-6
Typical Public Wireless LAN Conﬁguration 
When deploying PWLANs, consider the tips found in Table 23-4.
Table 23-4
Public Wireless LAN Deployment Tips 
Tip
Justiﬁcation Details
Offer an open user 
interface
A PWLAN needs to serve a diverse population, and the connection 
experience for users should be as easy as using a mobile phone. The 
quandary is that PWLAN users do not use a commonly conﬁgured device. 
As a result, incompatible user device conﬁgurations are the basis of most 
problems, such as trouble connecting to the network. Be sure the solution 
interfaces with the widest possible number of users. This maximizes the 
number of subscribers that the hotspot provider can attain. Most Wi-Fi 
users today have 802.11b client devices, but plan ahead for the larger 
potential proliferation of 802.11g and 802.11a and consider installing 
access points that support 802.11b/g and 802.11a.
Implement user 
authentication and billing
For authentication, deploy a controller that regulates access to the 
protected network services you are providing to users. Whether you should 
purchase a separate access controller or use a “smart” access point that 
provides hotspot services depends on your speciﬁc requirements. If there 
are lots of hotspots with only a few users at each one, then it makes sense 
to use lower-end access points in the facilities and a separate controller at a 
central point to serve the multiple hotspots. If you have many users at the 
hotspot, then an access point with built-in access-control features is 
preferable because it localizes control and improves performance.
continues
Access Points
Switch
Access
Controller
Access Points
Internet
Billing
System
KEY 
POINT
KEY 
POINT

842     Chapter 23: Wireless LAN Solutions
Small Ofﬁce and Home Wireless LANs 
It is much easier to install a wireless LAN at home than a wired network. A typical homeowner 
will not consider running cables throughout the house. It is time-consuming and requires stringing 
wires through the walls, which can be tricky and frustrating. 
Tip
Justiﬁcation Details
Disable Layer 2 security
It is not practical to implement Layer 2 security as part of a PWLAN, 
because it is not feasible or even possible in most cases to manage 
passwords and provide acceptable levels of interoperability. As a result, 
disable link-level encryption, such as WEP and WPA, and rely on public 
users to secure their own connections through the use of VPNs and
SSL-based websites and e-mail systems.
Broadcast SSIDs
With PWLANs, you want potential users to ﬁnd the network. Thus, be 
certain to enable broadcasting of SSIDs from access points. Also, give the 
SSID a recognizable name that distinguishes your hotspot from others.
Include DHCP services
As users roam to different hotspots, their client devices need an IP address 
that corresponds to the local network. To enable roaming with as few end-
user actions as necessary, establish DHCP services to automatically assign 
IP addresses to visiting users. Most versions of Windows operating 
systems by default activate DHCP, so users probably will not have to do 
anything.
Focus on increasing 
capacity
Many hotspots, such as those at airports and convention centers, have lots 
of users in relatively small areas. The aggregate throughput requirements 
of these densely populated areas can be very demanding on individual 
access points, especially those based on the relatively low-bandwidth 
802.11b. As a result, pay special attention to properly sizing the PWLAN. 
To solve this problem, consider placing the access points closer together 
and lowering their transmit power. This provides higher capacity in a given 
area by segmenting users.
Enable broadcasting of 
SSIDs
In PWLANs, you should ensure that beacons sent by the access point 
broadcast the SSID of the network. This enables Microsoft Windows to 
identify and display the wireless network to the user. If the SSIDs are not 
broadcasted, then the user will realize that the network is present, and the 
user will have to manually conﬁgure the SSID in Windows. 
Monitor for RF 
interference
As with any wireless LAN, RF interference can be an issue. So, pay 
special attention to the possibility of RF interference when deploying 
PWLANs. The most common interference sources in a public setting are 
other wireless LANs, mainly because of close proximity of unrelated 
public hotspots and ofﬁce buildings with wireless LANs.
Table 23-4
Public Wireless LAN Deployment Tips (Continued)

Small Ofﬁce and Home Wireless LANs     843
With a wireless LAN, employees can bring laptops home from work and continue working just as 
they do from their ofﬁces. For many professions, this makes it possible for people to work from 
home more effectively, whether it is to spend a few more hours researching information on the 
Internet or to enable telecommuting on a daily basis. 
Of course, with a wireless laptop, you truly can work from anyplace in the house. There is nothing 
tying you down to a desk in a particular room. You are free to use the Internet or access ﬁles on 
other computers while relaxing in a comfy chair in front of a TV, lounging on the patio breathing 
fresh air, or sitting at a desk in a quiet bedroom, just like you see in the commercials. 
Wireless LANs at home are good for PCs as well. Unlike companies, Ethernet cabling in homes 
is nearly nonexistent. That makes wireless the best way to connect stationary PCs to the network. 
You will have much more ﬂexibility in locating a PC to any part of the house without being near 
the broadband modem. 
Overall, a home wireless LAN is relatively simple (refer to Figure 23-7). 
Figure 23-7
Typical Home Wireless LAN Conﬁguration 
When installing a wireless LAN at home, take into account the following ideas:
■
Purchase a Wi-Fi router—With most home wireless LAN installations, you need a Wi-Fi 
router, not just an access point. The router includes Layer 3 functions on top of the access 
point. For example, Linksys (a Cisco company) specializes in offering Wi-Fi routers for home 
use. The router provides DHCP and NAT (Layer 3 functions), which are both necessary for 
allowing multiple Wi-Fi networking devices, such as laptops, PCs, and printers, to share the 
single broadband (DSL or cable modem) Internet connection. A single 802.11a/b/g Wi-Fi 
router is generally enough to fully cover most homes. For example, a single dual-band router 
provides full coverage and respectable performance throughout my entire two-story house 
with a ﬁnished basement.
Broadband
Modem
Internet
Service
Provider
Wi-Fi
Router
A single Wi-Fi router centrally
located is generally enough to
cover a small office or home.
DHCP Response
DHCP Request

844     Chapter 23: Wireless LAN Solutions
■
Centralize the router installation—Install the router within reach of the broadband modem, 
using Ethernet patch cable. If you have not already established a broadband connection, 
consider having it installed somewhere central to the areas where you will be using the 
wireless network. This is typically the center of the home. 
Ideally, install the broadband connection in the same room as any device (such as a 
printer) that you want to connect to one of the Ethernet ports provided by the router. 
In a home with two ﬂoors, choose installation on the ﬂoor where you will be using 
the network a higher percentage of the time. 
■
Conﬁgure security mechanisms—By default, most Wi-Fi routers do not have any security 
enabled, which means that all data packets are sent unencrypted, in the clear. An unscrupulous 
person sitting in a car outside your home, for example, can wirelessly monitor these 
transmissions and see e-mail contents, usernames, and passwords. In addition, unauthorized 
users can access ﬁles on computers inside the home and use the Internet through your 
broadband ISP connection. 
If you do not want this to happen, then activate encryption supplied within your 
router. Wired Equivalent Privacy (WEP) is better than nothing, but take advantage of 
the more advanced WPA or 802.11i if it is available on the router that you have 
chosen. 

Memory Builders     845
Foundation Summary
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
covered in the “Foundation Topics” section of the chapter. Please take the time to review the items 
in the “Foundation Topics” section noted with a Key Point icon.
The Cisco SWAN framework offers a collection of components that comprises a secure, 
interoperable, and manageable wireless LAN solution. When deploying enterprise wireless 
solutions, be certain to implement proven security practices. Also, plan on supporting voice 
services, because many companies are now beginning to take advantage of the applicable gains in 
efﬁciencies. Public wireless LANs can be very complex, especially for the larger venues, mainly 
because of the need for user authentication and billing functions.
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms:
client tracking, Cisco SWAN, Cisco WDS, Fast Secure Roaming, public wireless LAN, 
radio management aggregation, wireless LAN controller, Wireless LAN Threat Defense 
Solution, WLSE, IP PBX
Refer to the CD-based glossary to check your answers.
Further Reading
For more details regarding wireless LANs, consider reading the following Cisco Press books:
■
Wireless Networks First-Step, by Jim Geier
■
802.11 Wireless LAN Fundamentals, by Pejman Roshan and Jonathan Leary


Part IX: OSI and Cisco 
Device Basics
Chapter 24
Miscellaneous Networking Theory and Practices

Blueprint topics covered in 
this chapter:
This chapter covers the following topics from the 
Cisco CCIE Routing and Switching written exam 
blueprint:
■General Networking Theory 
— OSI Models 
— General Routing Concepts 
— Standards 
— Protocol Mechanics 
— Commands 

C H A P T E R 24
Miscellaneous Networking 
Theory and Practices 
This chapter covers a few basic topics that are not covered elsewhere in the book. In particular, this 
chapter covers the OSI and TCP/IP architectural models, CLI navigation, and router boot processes.
“Do I Know This Already?” Quiz
Table 24-1 outlines the major headings in this chapter and the corresponding “Do I Know This 
Already?” quiz questions.
In order to best use this pre-chapter assessment, remember to score yourself strictly. You can 
ﬁnd the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes.”
1.
The TCP software on PC1 uses IP on PC1 to send a TCP segment to PC2. Which of the 
following are true regarding these actions?
a. The actions represent an example of adjacent-layer interaction.
b. The actions represent an example of same-layer interaction.
c. TCP uses the same features as OSI Layer 3 in this case.
d. TCP uses the same features as OSI Layer 4 in this case.
2.
Which of the following is not a beneﬁt of using a layered networking model?
a. Eases learning the protocol details. 
b. Eases the development process.
c. Allows modular engineering.
d. Results in faster software.
Table 24-1
“Do I Know This Already?” Foundation Topics Section-to-Question Mapping
Foundation Topics Section
Questions Covered in This Section
Score
The OSI and TCP/IP Model
1–3
Router Operation Miscellany
4–5
Total Score

850     Chapter 24: Miscellaneous Networking Theory and Practices
3.
Which of the following are names of an OSI layer?
a. Internetwork
b. Transmission
c. Switched
d. Network Interface
e. Presentation
4.
The answers list boot system and conﬁg-register commands. A router with one or more 
of the commands listed in the answers would boot ROMMON the next time it is reloaded. 
Pick the least number of answers for which, when combined, would result in the router 
booting in ROMMON mode. 
a. conﬁg-register 0x2140
b. conﬁg-register 0x2144
c. boot system none
d. boot system rom
5.
Which Cisco IOS Software CLI editing keystrokes move the cursor forward one word?
a. Ctrl-f
b. Esc-f
c. Esc-m
d. Ctrl-a
e. Ctrl-e
f. Esc-e

The OSI and TCP/IP Models     851
Foundation Topics
This chapter picks up a few small topics that can be loosely tied to the ﬁrst section, “General 
Networking Theory,” of the CCIE Routing and Switching written exam blueprint. The ﬁrst entry 
in that section is “OSI Models,” which implies of course that the CCIE Routing and Switching 
written exam can ask questions regarding the OSI model. While you could argue that questions 
about the OSI model are a bit basic for a CCIE exam, the types of questions, and information 
needed to answer those questions, can be easily scoped. Conversely, that same blueprint section 
lists several expansive topics, such as “Commands” and “Standards.” Almost every chapter in the 
book covers some standards and commands. Because these general topics from the blueprint are 
so comprehensive, this chapter does not attempt to cover all the details, but instead relies on the 
individual chapters. 
Beyond the OSI coverage, this chapter includes a few miscellaneous topics in the ﬁrst section of 
the blueprint. These topics, “General Routing Concepts” and “Protocol Mechanics,” simply do not 
have a more appropriate place elsewhere in the book. 
The OSI and TCP/IP Models
OSI is the Open System Interconnection reference model for communications, developed as a 
standard by the International Organization for Standardization (ISO). Some participants in OSI’s 
creation and development expected OSI to become the networking protocol used by all 
applications on all computers in the world. The U.S. government went so far as to require OSI 
support on every computer it purchased, as of a certain date in the early 1990s, which certainly 
gave vendors some incentive to write OSI code. Some networking vendors even suggested that by 
the mid-1990s the TCP/IP installed base would begin to decrease, and eventually go away, with 
OSI as the protocol from which the 21st century Internet would be built. 
Today, several of the OSI model’s protocols are still used, and ISO is still a very important 
standards body. However, the OSI model as a whole never gained widespread market acceptance. 
Today, the OSI model is mainly used as a point of reference for discussing other protocol 
speciﬁcations. 
OSI Layers 
The OSI reference model consists of seven layers, each deﬁning a set of typical networking 
functions. Like TCP/IP, the OSI model consists of several standards unique to OSI, as well as 
references to other well-known standards from other standards bodies. Figure 24-1 shows the OSI 
layers, as compared with TCP/IP and Novell NetWare.

852     Chapter 24: Miscellaneous Networking Theory and Practices
Figure 24-1
Comparing OSI, TCP/IP, and NetWare
Because the OSI reference model does have a well-deﬁned set of functions associated with each 
of its seven layers, you can examine any other networking protocol or speciﬁcation, and make 
some determination as to whether it most closely matches OSI Layer 1, 2, or 3, and so on. For 
instance, the TCP/IP Internetwork layer (IP) closely equates to the OSI network layer, hence the 
use of the terms network layer protocol and Layer 3 protocol when referring to IP.
Although most discussions of networking focus on the functions in the lower four layers of the 
OSI model, the functions at all seven layers are important in most networks today. The three upper 
layers of the OSI reference model deﬁne functions focused on the application, whereas the lower 
four layers deﬁne functions focused on end-to-end delivery of the data. With the advent of 
switching devices that look at layers above the transport layer header—devices often called either 
Layer 5-7 switches or Layer 7 switches—network engineers need more knowledge and insight into 
the higher-layer protocols. 
Table 24-2 lists the layers of the OSI model and provides some insights into the functions 
performed by each layer.
Table 24-2
OSI Reference Model Layer Deﬁnitions  
Layer 
Functional Description
7
The application layer deﬁnes the interface between the communications software and any 
applications that need to communicate outside the computer on which the application resides. 
For example, a web browser is an application on a computer. The browser needs to get the 
contents of a web page; OSI Layer 7 deﬁnes the protocols used on behalf of the application to 
get the web page. 
6
The presentation layer’s main purpose is to deﬁne data formats, such as ASCII text, EBCDIC 
text, binary, BCD, and JPEG. Encryption is also deﬁned by OSI as a presentation layer 
service. For example, FTP enables you to choose binary or ASCII transfer. If binary is 
selected, the sender and receiver do not modify the contents of the ﬁle. If ASCII is chosen, the 
sender translates the text from the sender’s character set to a standard ASCII and sends the 
data. The receiver translates back from the standard ASCII to the character set used on the 
receiving computer.
OSI
Application
Presentation
Session
Transport
Network
Data Link
Physical
TCP/IP
Network
Interface
Application
Transport
Internet
NetWare
Mac
Protocols
SAP, NCP
SPX
IPX

The OSI and TCP/IP Models     853
Layer 
Functional Description
5
The session layer deﬁnes how to start, control, and end conversations (called sessions). 
This includes the control and management of multiple bidirectional messages so that the 
application can be notiﬁed if only some of a series of messages are completed. This allows 
the presentation layer to have a seamless view of an incoming stream of data. The 
presentation layer can be presented with data if all ﬂows occur in some cases. For example, an 
automated teller machine transaction in which you withdraw cash from your checking 
account should not debit your account and then fail before handing you the cash, recording 
the transaction even though you did not receive money. The session layer creates ways to 
imply which ﬂows are part of the same session and which ﬂows must complete before any are 
considered complete.
4
Transport layer protocols provide a large number of services, as discussed in Chapter 5, 
“IP Services.” Whereas Layers 5 to 7 focus on issues related to the application, Layer 4 
focuses on issues related to data delivery to the other computer—for instance, error recovery, 
segmentation of large application data blocks into smaller ones for transmission, and 
reassembly of those blocks of data on the receiving computer.
3
The network layer deﬁnes end-to-end delivery of packets. To accomplish this, the network 
layer deﬁnes logical addressing so that any endpoint can be identiﬁed. It also deﬁnes how 
routing works and how routes are learned so that the packets can be delivered. Chapter 4, 
“IP Addressing,” examines Layer 3 concepts in detail. The network layer deﬁnes most of the 
details that a Cisco router considers when routing. For example, Layer 3 running in a Cisco 
router is responsible for examining the destination IP address of a packet, comparing that 
address to the IP routing table, fragmenting the packet if the outgoing interface requires 
smaller packets, and queuing the packet to be sent out to the interface.
2
The data link layer speciﬁcations deliver data across one particular link or medium. These 
protocols are necessarily concerned with the type of media in question; for example, 802.3 
and 802.2 deﬁne Ethernet for the IEEE, which are referenced by OSI as valid data link layer 
protocols. Other protocols, such as High-Level Data Link Control (HDLC) for a point-to-
point WAN link, deal with the different details of a WAN link.
1
Physical layer speciﬁcations, which are also typically standards from other organizations that 
are referred to by OSI, deal with the physical characteristics of the transmission medium. 
Connectors, pins, use of pins, electrical currents, encoding, and light modulation are all part 
of different physical layer speciﬁcations. Multiple speciﬁcations are sometimes used to 
complete all details of the physical layer. For example, RJ-45 deﬁnes the shape of the 
connector and the number of wires or pins in the cable. Ethernet and 802.3 deﬁne the use of 
wires or pins 1, 2, 3, and 6. So, to use a Category 5 cable with an RJ-45 connector for an 
Ethernet connection, Ethernet and RJ-45 physical layer speciﬁcations are used.
Table 24-2
OSI Reference Model Layer Deﬁnitions  (Continued)

854     Chapter 24: Miscellaneous Networking Theory and Practices
Table 24-3 lists the OSI reference model layers and examples of some of the more popular 
protocols that most closely match them.
The most popular internetworking forwarding devices can also be considered to be operating at a 
particular layer. The following is a list of devices and the highest layer at which they operate.
■
Hub, repeater: Layer 1
■
Bridge, switch: Layer 2
■
Router: Layer 3
■
Multilayer switch: Layer 3
■
Content switch: Layers 4–7
OSI Layering Concepts and Beneﬁts
Many beneﬁts can be gained by deﬁning protocol functions in layers, and then deﬁning standard 
interfaces between those layers. The layers break a large, complex set of concepts and protocols 
into smaller pieces, making the complex set easier to talk about, easier to implement with 
hardware and software, and easier to troubleshoot. The following list summarizes the beneﬁts of 
layered protocol speciﬁcations:
■
Easier to learn—Humans can more easily discuss and learn about the many details of a 
protocol speciﬁcation.
■
Easier to develop—Reduced complexity allows easier program changes and faster product 
development.
Table 24-3
OSI Reference Model—Example Protocols
Layer Name
Examples
Application (Layer 7)
Telnet, HTTP, FTP, NFS, SMTP gateways (Eudora, Exchange), SNMP
Presentation (Layer 6)
JPEG, ASCII, EBCDIC, TIFF, GIF, PICT, encryption, MPEG, MIDI
Session (Layer 5)
RPC, SQL, NFS, NetBIOS, AppleTalk ASP, DECnet SCP, RADIUS, 
TACACS+, RTP
Transport (Layer 4)
TCP, UDP, SPX
Network (Layer 3)
IP, IPX, AppleTalk DDP
Data link (Layer 2)
IEEE 802.3/802.2, HDLC, Frame Relay, PPP, FDDI, ATM, IEEE 802.5/802.2
Physical (Layer 1)
EIA/TIA-232, V.35, EIA/TIA-449, RJ45, Ethernet, 802.3, 802.5, B8ZS, T1, E1

The OSI and TCP/IP Models     855
■
Multivendor interoperability—By creating products to meet the same networking 
standards, computers and networking gear from multiple vendors can work in the same 
network. 
■
Modular engineering—One vendor can write software that implements higher layers—for 
example, a web browser—and another vendor can write software that implements the lower 
layers—for example, Microsoft’s built-in TCP/IP software in its operating systems.
OSI Terminology
OSI includes many terms not used by other protocol architectures. Many of you have memorized 
the names of the layers simply through repetition. However, if you ﬁnd mnemonic devices useful 
for memorizing such details, the following list shows four 7-word phrases whose ﬁrst letters 
correspond to the ﬁrst letters of the names of the OSI layers:
■
All People Seem To Need Data Processing (Layer 7 to 1)
■
Please Do Not Take Sausage Pizzas Away (Layer 1 to 7)
■
Pew! Dead Ninja Turtles Smell Particularly Awful (Layer 1 to 7)
■
Please Do Not Tell Sales People Anything (Layer 1 to 7)
Because the OSI layers’ names and numbers are used so pervasively throughout networking terminology, 
it is important to memorize the numbers and names of each layer. Additionally, it is important to 
know which layers in a non-OSI protocol architecture best match the OSI layers. Figure 24-2 depicts 
these details for TCP/IP, along with some of the typical TCP/IP protocols at each layer.
Figure 24-2
Using OSI Layers to Reference Other Protocols
As you can see, not all TCP/IP layers correspond to a single OSI layer, and vice versa. For instance, 
the TCP/IP network interface layer deﬁnes both the physical network speciﬁcations and the protocols 
used to control the physical network. (Note that the term network access is sometimes used to 
describe the lowest TCP/IP layer instead of the term network interface.) OSI separates the physical 
network speciﬁcations into the physical layer and the control functions into the data link layer. (In 
fact, many people consider TCP/IP to actually have a separate physical and data link layer.)
OSI Model
Application
Presentation
Session
Transport
Network
Data Link
Physical
TCP/IP Model
Network
Interface
Application
Transport
Internet
TCP/IP Protocols
Ethernet,
Frame Relay,
PPP
HTTP, SMTP,
POP3
TCP, UDP
IP
KEY 
POINT

856     Chapter 24: Miscellaneous Networking Theory and Practices
The term protocol data unit (PDU) is an OSI term that makes generic reference to some data 
structure used when sending data over a network. A PDU represents the bits that include the 
headers and trailers for some layer, as well as the encapsulated data. For instance, an IP packet is 
a PDU. In that case, it is called a Layer 3 PDU (L3PDU) by virtue of IP being a Layer 3 protocol.
Figure 24-3 represents the encapsulation process used by OSI on a computer when sending data. 
The ﬁgure points out the names of the PDUs at each layer.
Figure 24-3
OSI Encapsulation and Protocol Data Units
OSI Layer Interactions 
Every layered networking architecture, like OSI or TCP/IP, is implemented by a series of 
protocols. Part of the deﬁnition of a protocol deﬁnes how that protocol works between multiple 
devices. Other parts of the protocol deﬁne that protocol’s interface to another protocol running on 
the same computer. For example, consider the HTTP protocol. Figure 24-4 shows the simple 
interaction of HTTP on two computers (Bob and Larry), with Bob retrieving a web page from web 
server Larry.
Figure 24-4
Basic Application Logic to Get a Web Page
Figure 24-4 shows an example of same-layer interaction. The HTTP protocol is a TCP/IP 
application layer protocol. The HTTP software on each computer in the ﬁgure sits at the same 
L7H
Data
L6H
Data
L5H
Data
L4H
Data
L3H
Data
L2H
Data
L2T
L#H - Layer # Header
L#T - Layer # Trailer
L7PDU
L6PDU
L5PDU
L4PDU
L3PDU
L2PDU
Bob
Larry
Web
Server
Browser
TCP/IP Network
Give Me Your Home Page
Here Is File home.htm

The OSI and TCP/IP Models     857
layer, and the computers interact by exchanging messages and data—hence the term same-layer 
interaction.
Next, consider how adjacent layers on the same computer work together, with each layer providing 
a service to the layer above it. For example, in Figure 24-4, Bob and Larry use HTTP to transfer 
the home page from Larry to Bob. But what would happen if Bob’s HTTP Get request was lost in 
transit through the TCP/IP network? Or what would happen if Larry’s response, which includes 
the contents of the home page, was lost? Well, the page would not show up in Bob’s browser, as 
you might expect. So, HTTP uses a protocol from its lower adjacent layer (TCP at the transport 
layer) to provide a service of guaranteed delivery across the network, as shown in Figure 24-5. 
Figure 24-5
Example of Adjacent-Layer Interaction: TCP and HTTP
This example outlines the concepts of how protocols in adjacent layers, and on the same computer, 
work together. In this case, the higher-layer protocol (HTTP) needed to do something it could not 
do (error recovery), so it asked the next-lower-layer protocol (TCP) for help. TCP provided a 
guaranteed delivery service to HTTP. The interaction between these adjacent layers is aptly called 
adjacent-layer interaction. 
Table 24-4 summarizes the key points of same-layer interaction and adjacent-layer interaction.
Table 24-4
Summary: Same-Layer and Adjacent-Layer Interactions
KEY 
POINT
Concept
Description
Same-layer 
interaction on 
different 
computers
The two computers use a protocol with which to communicate with the same layer 
on another computer. The protocol deﬁned by each layer uses a header that is 
transmitted between the computers to communicate what each computer wants to 
do.
Adjacent-layer 
interaction on the 
same computer
On a single computer, one layer provides a service to a higher layer. The software 
or hardware that implements the higher-layer requests that the next lower layer 
perform the needed function.
Web Browser
Bob
Web Server
Larry
HTTP GET
HTTP GET
TCP
TCP Acknowledgment
TCP Acknowledgment
TCP
HTTP OK
Web Page
Please reliably send
this, Mr. TCP!

858     Chapter 24: Miscellaneous Networking Theory and Practices
Router Operation Miscellany
The second part of this chapter covers a few minor miscellaneous topics, all related to some degree 
to basic operations of a Cisco router.
Cisco IOS Software Boot Sequences and the Conﬁguration Register
Cisco routers use the following basic process at boot time:
1.
The router performs a power-on self-test (POST) to discover and verify the hardware.
2.
The router loads and runs bootstrap code from ROM.
3.
The router ﬁnds the Cisco IOS Software or other software and loads it.
4.
The router ﬁnds the conﬁguration ﬁle and loads it into the running conﬁguration.
Step 3 contains three major options for the type of software loaded into the router, as listed in 
Table 24-5.
The router must be conﬁgured to point to the software that should be loaded, and if an IOS image 
should be loaded, the conﬁguration must deﬁne which ﬁle to load. Multiple IOS ﬁles can be stored 
in Flash, and a router can load IOS images over a network. Two conﬁguration commands impact 
a router’s choice of what software to load:
■
The conﬁg-register command
■
The boot system command
The Conﬁguration Register
The conﬁguration register is a 16-bit software register in the router, and its value is set using the 
conﬁg-register global conﬁguration command. (Some older routers had a hardware conﬁguration 
register with jumpers on the processor card, to set bits to a value of 0 or 1.) On most Cisco routers, 
Table 24-5
Three OS Categories for Routers
KEY 
POINT
Operating System
Typically Stored In
Purpose
Full-featured IOS
Flash
Full-featured normal IOS image used in 
production
Limited-function IOS 
(RXBOOT mode)
ROM
Basic IP connectivity, used when Flash memory is 
broken and you need IP connectivity to copy a 
new IOS image into Flash memory
ROMMON
ROM
Low-level debugging, usually by the Cisco TAC, 
and password recovery

Router Operation Miscellany     859
the default conﬁguration register setting is hexadecimal 2102 (0x2102). Figure 24-6 shows an 
example binary breakdown of the default value for the conﬁguration register.
Figure 24-6
Binary Version of Conﬁguration Register, Value Hex 2102
The term boot ﬁeld refers to the low-order 4 bits of the conﬁguration register, because only those 
4 bits impact the router’s choice of what software to load. The boot ﬁeld is often considered as a 
separate 4-bit value, represented as a single hexadecimal digit. (Cisco represents hexadecimal 
values by preceding the hex digit[s] with 0x—for example, 0xA would mean a single hex digit A.) 
When deciding which software to load, a router ﬁrst looks at the conﬁguration register’s boot ﬁeld, 
using the following logic to determine which to use:
1.
If the boot ﬁeld is hex 0, the router loads ROMMON.
2.
If the boot ﬁeld is hex 1, the router uses RXBOOT mode.
3.
For anything else, the router loads an OS based on the conﬁgured boot system commands.
The boot system Command 
When the boot ﬁeld is not a hex 0 or 1, routers choose the OS through the use of the boot system 
conﬁguration command. If the conﬁguration register calls for a full-featured IOS (boot ﬁeld 0x2-F), 
the router reads the startup-conﬁguration ﬁle for boot system commands. If present, the router tries 
each boot system command, in succession, until it ﬁnds an IOS to load. If there are no boot system 
commands, the router takes the default action, which is to load the ﬁrst ﬁle in Flash memory. 
Table 24-6 provides some example boot system commands and the logic used when the 
conﬁguration register’s boot ﬁeld is set to 0x2.
Table 24-6
Impact of the boot system Command on Choice of IOS; Boot Field Between 2 and F 
Boot System Commands
Result
No boot command
Router tries loading the following, in order: ﬁrst ﬁle in Flash; 
broadcasts looking for a TFTP server and a default ﬁlename; 
IOS in ROM; or ROM Monitor.
boot system ROM
Router loads IOS from ROM. 
boot system ﬂash
Router loads the ﬁrst ﬁle from Flash memory. 
boot system ﬂash ﬁlename
Router loads IOS with the name ﬁlename from Flash memory.
continues
15 14 13 12
0
0
1
0
Bit Position, in Decimal
Default Binary Value
11 10
9
8
0
0
0
1
7
6
5
4
0
0
0
0
3
2
1
0
0
0
1
0
KEY 
POINT

860     Chapter 24: Miscellaneous Networking Theory and Practices
CLI Help Features
The Cisco IOS CLI includes several methods to get help at the CLI. Many of you already use these 
features out of habit, but for completeness, the full set of features is listed in Table 24-7. 
Cisco IOS stores the commands that you type in a history buffer, storing ten commands by default. 
You can change the history size with the terminal history size x user exec command, where x is 
the number of commands for the CLI to recall; this can be set to a value between 0 and 256. You 
Boot System Commands
Result
boot system tftp ﬁlename 10.1.1.1 
Router loads IOS with the name ﬁlename from the TFTP server 
10.1.1.1.
Multiple boot system commands, 
any variety
Router attempts to load IOS based on the ﬁrst boot command in 
conﬁguration. If that fails, the second boot command is used, 
and so on, until one is successful.
Table 24-7
Cisco IOS Software Command Help
What You Type1
The Help You Get
?2
Help for all commands available in this mode.
help
Text describing how to get help. No actual command help is given.
command?
Text help describing all the ﬁrst parameter options for the command.
com?
A list of commands that start with com.
command parm?2
A list of all parameters beginning with parm. (Notice that no spaces exist 
between parm and the ?.)
command parm<Tab>
If you press the Tab key midword, the CLI will either spell the rest of this 
parameter at the command line or do nothing. If the CLI does nothing, it 
means that this string of characters represents more than one possible next 
parameter, so the CLI does not know which to spell out.
command parm1 ?
If a space is inserted before the question mark, the CLI lists all the next 
parameters and gives a brief explanation of each.
1command represents any command, not the word command. Likewise, parm represents a command’s parameter, not 
the word parameter.
2When you type the ?, the Cisco IOS CLI reacts immediately; that is, you don’t need to press the Enter key or any other 
keys. The router also redisplays what you typed before the ?, to save you some keystrokes. If you press Enter 
immediately after the ?, IOS tries to execute the command with only the parameters that you have typed so far.
Table 24-6
Impact of the boot system Command on Choice of IOS; Boot Field Between 2 and F (Continued)

Router Operation Miscellany     861
can then retrieve commands so that you do not have to retype the commands. Table 24-8 lists the 
commands used to manipulate retrieved commands.
The key sequences in Table 24-8 are part of what Cisco calls enhanced editing mode. Cisco IOS 
enables enhanced editing mode by default, and has for a long time. However, you can turn off these 
keystrokes with the no terminal editing exec command, and turn them back on with the terminal 
editing command. Why would you bother? On occasion, you might be using a scripting language 
to automatically run commands on the router through a Telnet session, and enhanced editing mode 
can sometimes interfere with the scripts. 
Table 24-8
Key Sequences for Command Edit and Recall
Keyboard 
Command
What the Router Displays
Up arrow or Ctrl-p
Displays the most recently used command. If it is pressed again, the next 
most recent command appears until the history buffer is exhausted. (The p 
stands for previous.)
Down arrow or Ctrl-n
If you have gone too far back into the history buffer, these keys will go 
forward, in order, to the more recently typed commands. (The n is for next.)
Left arrow or Ctrl-b
Moves the cursor backward in the currently displayed command without 
deleting characters. (The b stands for back.)
Right arrow or Ctrl-f
Moves the cursor forward in the currently displayed command without 
deleting characters. (The f stands for forward.)
Backspace
Moves the cursor backward in the currently displayed command, deleting 
characters.
Ctrl-a
Moves the cursor directly to the ﬁrst character of the currently displayed 
command.
Ctrl-e
Moves the cursor directly to the end of the currently displayed command.
Esc-b
Moves the cursor backward one word in the currently displayed command.
Esc-f
Moves the cursor forward one word in the currently displayed command.
Ctrl-r
Creates a new command prompt, followed by all the characters typed since 
the last command prompt was written. This is particularly useful if system 
messages have made the screen confusing and it is unclear what you have 
typed so far.

862     Chapter 24: Miscellaneous Networking Theory and Practices
Foundation Summary
This section lists additional details and facts to round out the coverage of the topics in this chapter. 
Unlike most Cisco Press Exam Certiﬁcation Guides, this book does not repeat information 
presented inside the “Foundation Topics” section of the chapter. Please take the time to read and 
study the details in this section of the chapter, as well as review the items in the “Foundation 
Topics” section noted with a Key Point icon.
Table 24-9 lists some of the most popular router IOS commands related to the topics in this 
chapter. 
Table 24-9
Router IOS Commands Related to Chapter 24 
Command
Description
terminal editing
Exec command that enables advanced editing keystrokes 
(default)
terminal no editing
Exec command that disables advanced editing keystrokes
terminal history
Exec command that enables the feature of remembering a 
number of previously typed commands (default)
terminal no history
Exec command that disables the feature of remembering a 
number of previously typed commands
terminal history size number-of-lines
Exec command that sets the size of this user’s terminal 
history buffer
conﬁg-register value
Global conﬁg command that sets the value of the router’s 
conﬁguration register
boot system ﬂash [ﬂash-fs:][partition-
number:][ﬁlename]
Global conﬁg command that tells the router the location in 
Flash of a candidate IOS ﬁle
boot system rom
Global conﬁg command that tells the router to load the 
ROMMON OS
boot system ﬁle-url
Global conﬁg command that tells the router a URL 
location of a candidate IOS ﬁle
boot system {rcp | tftp | ftp} ﬁlename 
[ip-address]
Global conﬁg command that tells the router the location 
of a candidate IOS ﬁle that is accessible via a ﬁle transfer 
protocol

Memory Builders     863
Memory Builders
The CCIE Routing and Switching written exam, like all Cisco CCIE written exams, covers a fairly 
broad set of topics. This section provides some basic tools to help you exercise your memory about 
some of the broader topics covered in this chapter. 
Fill in Key Tables from Memory 
First, take the time to print Appendix F, “Key Tables for CCIE Study,” which contains empty sets 
of some of the key summary tables from the “Foundation Topics” section of this chapter. Then, 
simply ﬁll in the tables from memory, checking your answers when you review the “Foundation 
Topics” section tables that have a Key Point icon beside them. The PDFs can be found on the CD 
in the back of the book, or at http://www.ciscopress.com/title/1587201410. 
Deﬁnitions
Next, take a few moments to write down the deﬁnitions for the following terms: 
boot ﬁeld, conﬁguration register, terminal history, enhanced editing, adjacent-layer 
interaction, same-layer interaction, PDU, LxPDU, ROMMON, RXBOOT  
Refer to the CD-based glossary to check your answers.


Part X: Appendixes
Appendix A
Answers to the “Do I Know This Already?” Quizzes
Appendix B
CCIE Routing and Switching Exam Updates: Version 1.0
Appendix C
MPLS
Appendix D
Decimal to Binary Conversion Table


A P P E N D I X A
Answers to the “Do I Know 
This Already?” Quizzes
Chapter 1
1.
c, e
2.
a
3.
c. If a Cisco switch port has only speed or duplex conﬁgured, the interface still uses auto-
negotiation Fast Link Pulses (FLP) to negotiate the setting that was not conﬁgured. There 
is no explicit command to disable auto-negotiation.
4.
b, c. Cisco switches disable auto-negotiation after the speed and duplex have been 
conﬁgured. The other switch attempts auto-negotiation and fails. However, the 
unconﬁgured switch can detect the speed even without auto-negotiation. By default, 
10-Mbps and 100-Mbps ports use half duplex when they are unable to auto-negotiate a 
duplex setting.
5.
c, d. The half-duplex switch will leave its loopback circuitry enabled, erroneously detecting 
a collision when it is both sending and receiving a frame.
6.
b, c
7.
b
8.
a, b, d
Chapter 2
1.
a. The switchport access vlan 28 command, entered in interface conﬁguration mode, also 
creates the VLAN. The vlan 28 name fred command is valid in VLAN database mode, but 
not in conﬁguration mode.
2.
a, b. Of the three incorrect answers, one refers to VTP pruning, and another refers to VTP’s 
ability to make VLAN conﬁguration more consistent through the advertisement of VLAN 
conﬁguration. Private VLANs do have a positive effect on the reduction of broadcasts, but 
that is not a primary motivation for using private VLANs.
3.
c. VTP works only for normal-range VLANs. Reserved VLAN numbers 1 and 1002–1005 
cannot be pruned.

868     Appendix A: Answers to the “Do I Know This Already?” Quizzes
4.
a. Because the new switch is a VTP client, it will consider using the VTP updates it receives 
from the two pre-existing VTP servers. However, because the new switch’s conﬁguration 
revision number is higher, the new switch ignores the VTP updates with revision number 201.
5.
b. The new switch will send VTP updates with revision number 301, and the two original VTP 
servers will send updates with revision number 201. Because the new switch’s revision 
number is higher, the older ten switches will update their conﬁguration.
6.
a. VLAN 1 is the native VLAN by default. The switch ports to which the PCs connect also sit 
in VLAN 1 by default. 802.1Q does not add any header when passing frames in the native 
VLAN.
7.
a, b. The commands mentioned in the question have statically conﬁgured one switch to use 
802.1Q trunking with no DTP autonegotiation. Due to the nonegotiate option, the other 
switch must be statically conﬁgured to trunk, using dot1q, which requires the two commands 
listed as correct answers. The nonegotiate option is not required on the second switch, 
because both switches statically agree to the same trunking settings.
8.
a, b, c. The subinterface number does not identify the VLAN, so either fa 0/1.1 or fa 0/1.2 
could be used with the native VLAN. Also, native VLAN IP addresses can be conﬁgured 
under the physical interface as well.
9.
a, c, d. 802.1Q inserts a 4-byte tag, but it does not encapsulate the original frame. VTP 
Version 2, in and of itself, is restricted to normal-range VLANs. Finally, DTP chooses ISL 
over 802.1Q if both are enabled.
Chapter 3
1.
b. The root switch includes the maxage timer in its advertised Hellos, with non-root switches 
using the timer value advertised by the switch. Maxage must expire before a non-root switch 
believes that connectivity to the root has been lost, thereby triggering reconvergence, and 
the possible election of a new Root Port.
2.
c. The root switch includes the Forward Delay timer in its advertised Hellos. When receiv-
ing a Hello with TCN set, the non-root switch uses an aggressive time-out value for CAM 
entries based on the advertised forward delay timer.
3.
a, c. MST uses RSTP; RSTP waits three times the Hello time, as advertised in the Hello 
BPDU, before deciding to act. The timer settings on non-root switches, as usual, do not 
impact the process.
4.
b, c. Multiple STP instances are certainly supported. The answer relating to multiple PVST+ 
domains is partially true. However, the mechanics involved use multicasts for each STP 
instance, instead of encapsulating in the native VLAN’s Hellos, making that answer 
technically incorrect.

Chapter 4     869
5.
c. When STP converges, MAC address table entries need to be timed out quickly, because 
their associated interfaces may no longer be valid. The Topology Change Notiﬁcation (TCN) 
BPDU from the non-root switch causes the root to react, marking a TCN bit in future Hellos, 
thereby making all switches time out their CAMs based on the Forward Delay timer.
6.
d. All the links on one switch will become the Designated Port on their respective segments, 
making four ports forward. Only one of the ports on the other switch will be a Root Port, 
making the total 5.
7.
a. The links must all be in the same operational trunking state (trunking or not). If trunking, 
they must be using the same type of trunking. However, the settings related to trunk 
negotiation do not have to match.
8.
c, d, f. IEEE 802.1D (STP) using states of forwarding, blocking, listening, learning, and 
disabled. IEEE 802.1w RSTP uses states of forwarding, learning, and discarding.
9.
d, e. When grading yourself, if you did not pick the answer IEEE 802.1w, give yourself credit 
if you knew RSTP technically does not use Maxage, but instead waits three times the Hello 
interval instead of using Maxage.
10.
b. UniDirectional Link Detection (UDLD) uses Layer 2 messaging to determine when it can 
no longer hear from the neighbor. These messages allow a switch to recognize a unidirectional 
link and react by error-disabling at least one end of the link. Loop Guard does not use messages, 
but rather it changes how a switch reacts to the loss of incoming Hellos. When they are no 
longer received, the port is placed into an STP loop-inconsistent state.
Chapter 4
1.
d
2.
c. Summary 10.1.1.0/21 would include addresses 10.1.0.0–10.1.7.255. Summary 10.1.0.0/22 
would include 10.1.0.0–10.1.3.255, only including three of the four subnets listed in the 
question.
3.
d. 10.22.12.0/22 includes addresses 10.22.12.0–10.22.15.255, which covers exactly the 
same range of addresses as subnets 10.22.12.0/23 and 10.22.14.0/23 listed in the problem 
statement. Similarly, summary 10.22.16.0/22 covers exactly the set of IP addresses inside the 
other two subnets in the problem statement. As for the wrong answers, 10.22.12.0/21 is not 
actually a valid summary; 10.22.8.0/21 and 10.22.16.0/21 are. Summary 10.22.8.0/21 
includes address 10.22.8.0–10.22.15.255, which includes address ranges not covered by 
subnets in the problem statement. Similarly, summary 10.22.16.0/21 includes IP addresses 
outside the listed subnets.
4.
a, d. 10.22.21.128/26 implies a range of 10.22.21.128–10.22.21.191; 10.22.20.0/23 implies 
a range of 10.22.20.0–10.22.21.255.

870     Appendix A: Answers to the “Do I Know This Already?” Quizzes
5.
a. By deﬁnition, CIDR allows Internet routes to group large blocks of IP addresses, based 
largely on the assignment of IP network numbers to particular ISPs or to ISPs in particular 
worldwide geographic locations.
6.
c, d. Port Address Translation (PAT) and dynamic NAT with overloading both refer to the 
same feature, in which each TCP or UDP ﬂow is mapped to a small number of IP addresses 
by using different port numbers. The other terms do not refer to features that reduce the 
number of IP addresses used by NAT.
7.
b. The four terms in the answers have two pair of contrasting words. The word “inside” 
implies a host inside the enterprise that is using NAT, whereas “outside” refers to a host 
outside the enterprise. The word “local” refers to an IP address used for packets as they ﬂow 
through the enterprise (where local private addressing can be used), and “global” refers to an 
IP address used in packets as they ﬂow over the Internet (which requires globally unique IP 
addresses). The question refers to a packet’s destination address, with the packet going to a 
host inside the enterprise—hence the term “inside” is correct. The packet is on the Internet, 
per the question, so the term “global” also applies.
8.
a, b. Typically, a NAT overload conﬁguration using a single public IP address would use the 
style that refers to the interface in the command. However, a NAT pool with a single IP 
address in the pool works the same and is valid. 
9.
a, b, e. Leading 0s in a quartet can be omitted, and one instance of :: can be used to represent 
consecutive quartets of 0000.
Chapter 5
1.
e. The ICMP Unreachable message has several subtypes, with the Host Unreachable message 
type meaning that the subnet is reachable but that speciﬁc host cannot be reached. 
2.
c. When routers discard a packet because the packet’s TTL ﬁeld was decremented to 0, the 
routers send an ICMP Time Exceeded message back to the originator of the discarded packet.
3.
e. When a host receives a packet, and the destination IP address of the packet is that host’s IP 
address, the host needs to next perform transport layer processing. Then, if the packet contains 
a TCP or UDP segment, the host needs to pass the data to the application listening on the 
destination port of the packet. If that host does not have an application listening on that port, 
the host discards the packet and returns an ICMP Unreachable message, with a subtype of 
Port Unreachable, to the sender of the packet.
4.
c, d. LAN-attached hosts use Address Resolution Protocol (ARP) when they need to ﬁnd the 
MAC address of another host, when the host thinks that the other host is on the same subnet. 
In order for R1 to have been performing a proxy ARP reply for PC2’s ARP request, the request 
must have been for a host on a different subnet—most likely, an ARP looking for the web 

Chapter 6     871
server’s MAC address. In order for PC2 to make such an ARP request, PC2 must have 
believed that the web server was on the same subnet; if PC2’s mask was 255.255.0.0, PC2 
would have indeed thought that the web server was in the same subnet.
5.
a, e. When the router receives the DHCP request, it changes the destination IP address of the 
packet to the value set with the ip helper-address command. Because the PC does not yet 
have an IP address, the DHCP request (as sent by PC3) has an IP address of 0.0.0.0. The router 
then changes the source IP address so that the DHCP response packet can be routed back to 
the original subnet, and then broadcast back onto that subnet. To make that happen, the router 
changes the source IP address of the DHCP request to be the subnet broadcast address for that 
subnet, namely 10.4.7.255.
6.
b, d. RARP and BOOTP require a static reservation of an IP address for each speciﬁc MAC 
address. Because BOOTP encapsulates its messages inside an IP packet, the packets can be 
routed to a BOOTP server; RARP does not use an IP header, so its messages cannot be routed. 
Also, RARP only supports the assignment of the IP address, whereas BOOTP allows the 
assignment of other settings, such as the mask and default gateway.
7.
d. With default settings on R2, preemption would not be allowed. Therefore, even in cases for 
which R2 would have a better (higher) HSRP priority, R2 would not take over from R1 until 
R2 believed that R1 had failed. 
8.
b, d. Routers using NTP server mode do not rely on outside devices for clock synchronization, 
so they do not need to know another NTP server’s IP address. Routers in NTP broadcast client 
mode expect to receive NTP updates via LAN broadcasts, so they do not need to know an 
IP address of an NTP server to which to send NTP queries.
Chapter 6
1.
a, d. Both protocols use a source and destination port number, as well as a header checksum. 
Only TCP performs error recovery and ﬂow control.
2.
a, f. URG and PSH are used to signal the receiver, during the middle of a connection, to pass 
data to the receiving socket application. SYN and ACK are used during connection establish-
ment, and FIN and RST are used at connection termination.
3.
a. TCP senders use the lower window setting of the two possibilities: the advertised window, 
as implied by the receiver in the Window ﬁeld of the TCP segment, and the sender’s calculated 
congestion window. The choice of using the lower of the two does not change as a result of 
packet loss. The URG code bit does not relate to error recovery, and is only set in retransmitted 
segments by coincidence. Finally, the Acknowledgement ﬁeld identiﬁes the next byte 
expected by the receiver, which is 1 greater than the last byte acknowledged by that receiver.
4.
a, e

872     Appendix A: Answers to the “Do I Know This Already?” Quizzes
5.
a, c. In active mode, the client allocates a dynamic port, and listens on that port. The client 
tells the server, via an FTP PORT command, the port number. The server then uses its well-
known port 20, and initiates a TCP connection to the client’s new listening port. In passive 
mode, the server allocates a dynamic port, which does not have to be port 20 (and is typically 
not port 20), and listens on that port. The server tells the client, via an FTP PORT command, 
the port number. The client then allocates a currently unused dynamic port, and initiates a 
TCP connection to the server’s new listening port.
6.
a, c. SNMPv1 and SNMPv2c call for the use of community strings for basic authentication, 
with those strings being passed as clear text. SNMPv3 allows for authentication using private 
keys and MD5 digests, and encryption, but the two security features do not have to be used 
concurrently.
7.
c, e. Most of the details of the answers in this question are summarized in Tables 6-6 and 
6-7. Brieﬂy, SNMPv1 used communities, and several protocol messages (Get, GetNext, and 
Trap included). SNMPv2 dropped communities; however, RFC 1905, popularly called 
SNMPv2c, added SNMPv1 communities back to SNMPv2 as an option. SNMPv2 added the 
GetBulk and Inform protocol messages as well. SNMPv3 simply kept most of SNMPv2, 
adding authentication and encryption mechanisms.
Chapter 7
1.
c
2.
c, d, e. The CEF FIB is populated based on the contents of the IP routing table. The two 
incorrect answers refer to events that do not change the contents of the IP routing table; rather, 
they change adjacency information. The three correct answers cause a change to the IP 
routing table, which in turn changes the CEF FIB.
3.
d. Routers send InARP messages in response to learning that a new PVC is up. Routers learn 
that a PVC is up when they receive LMI messages stating that a previously inactive DLCI is 
now Active. While an InARP from another router may be received around the same time, it is 
the LMI notiﬁcation of the now-active DLCI that drives the process.
4.
a, c, d. InARP is enabled by default on all three types of interfaces stated in the question. As 
a result, with the full mesh, all three routers will have the necessary mapping between the IP 
address and DLCI, and pinging will work between each pair of routers.
5.
a, c, e. InARP is enabled on all three types of interfaces by default. However, InARPs only 
ﬂow across a PVC, and are not forwarded—so R2 and R3 have no way to inform each other 
of the correct mapping information. Additionally, R3’s point-to-point subinterface usage 
actually changes R3’s logic, whereby R3 does not rely on the received InARP information. 
Rather, R3 uses logic like “when forwarding to any address in 10.1.1.0/24, send it over the 
one PVC on that subinterface.” R2, with a multipoint subinterface, does not use such logic, 
and simply lacks the correct mapping information. As a result, when R2 pings R3, R2 does 

Chapter 8     873
not know what DLCI to use, and cannot send the Echo. R3, however, does what DLCI to use, 
so when R3 pings R2, R3 actually sends the packet to R1, which then forwards it to R2. R2 
can’t return the Echo Reply, so the ping fails.
6.
c. The ip classless global conﬁguration command tells the router to use classless IP forwarding/
routing. This means that if a packet’s destination address does not match any speciﬁc subnet 
in the routing table, and a default route exists, the router will use the default route.
7.
e. Of the incorrect answers, only the ip address command is a valid command; that command 
sets the IP address associated with the interface.
8.
e
9.
c. The set interface default command tells policy routing to use the listed interface as if it 
were a default route, using it only if the IP routing table is not matched.
10.
a, c. The default option tells policy routing to ﬁrst try to match the routing table, and then 
to use the directions in the route map if no route exists in the routing table.
Chapter 8
1.
a, c. RIPv2 added VLSM support to RIPv1 by including the subnet mask with each route. RIP 
does not send Hellos. It deﬁnes inﬁnity as 16 hops, and uses either clear-text passwords or 
MD5 for authentication.
2.
a. RIP sends full updates every 30 seconds, with those updates including all routes from the 
routing table, except for any routes omitted due to split horizon rules. The router actually adds 
1 to the metrics shown in its routing table to the routes included in a routing update.
3.
b, c. R1’s metric 16 route advertisement was a poisoned route. R1 would suspend split horizon 
rules for that route upon receipt of the metric 16 route, sending back a poison reverse route, 
metric 16. R1 would have sent back the metric 16 route whether split horizon was enabled or 
disabled on s0/0. Also, if the last received metric was 3, and then 16, the failed route would 
not have been caused by a counting-to-inﬁnity problem.
4.
a, b. The Invalid timer is set per route, counting up from 0, and reset to 0 each time the same 
route is received in an update coming in the same interface as before. The timer is kept by a 
router, and is not advertised. The debug commands show information about advertised and 
received updates, but because the Invalid timer is not transmitted in the network, these debug 
commands do not display the timer.
5.
f. The clear ip route command is not complete, and would be rejected by Cisco IOS. To delete 
all routes, the clear ip route * command would be used.
6.
b, d. RIPv2 supports the advertisement of a next-hop IP address that is different from the 
sender’s IP address. The show ip route and show ip rip database commands list the 
advertised next hop only, and not the IP address of the sender of the update.

874     Appendix A: Answers to the “Do I Know This Already?” Quizzes
7.
a, b, e. The network command tells RIP to do three things on each interface in that classful 
network: Advertise the connected subnet, send updates, and receive updates. RIP does not 
have a Hello message. The passive-interface command does make RIP stop sending updates 
on an interface, but the command is a router rip subcommand, not an interface subcommand.
8.
d. Cisco IOS disables split horizon by default on physical interfaces conﬁgured for Frame 
Relay, but it is enabled by default on Frame Relay multipoint interfaces. The default RIP 
authentication mode is simple text. RIP sends triggered updates when a route changes, and 
this feature cannot be disabled.
Chapter 9
1.
c, d. EIGRP uses IP protocol 88, with no transport header following the IP header. It supports 
MD5 authentication, but not simple text. It ﬁrst sends update messages to 224.0.0.10, then 
sends them as unicasts if RTP requires retransmission.
2.
a, c, d. R2’s K values differ from the others, so it will not become a neighbor. The Hello timer 
and Hold timer differences do not prevent EIGRP neighbor relationships from forming. Also, 
the different masks do not prevent neighborship, as long as each router believes that its 
neighbors are in the same primary subnet.
3.
c
4.
d. EIGRP Updates can be either full or partial. While Reply messages do include routing 
information, they often trigger the receiving router to use partial update messages to inform 
other neighbors about the change in a route.
5.
b. The show ip eigrp topology command lists successor and feasible successor routes, 
omitting routes that are neither. Because two of the routes are successors, only one of the three 
is a feasible successor.
6.
b. R11’s route through 10.1.11.2 is considered invalid, because the neighbor at that IP address 
failed. The topology table holds one feasible successor route to the subnet, so it can be used 
immediately, without requiring active Querying of the route.
7.
b. An EIGRP router must wait on all Reply messages to be received before acting on the new 
information. The Active timer dictates how long the router should wait for all the Reply 
messages to come back.
8.
c. The network command wildcard mask matches any interface with an address that starts 
with 10.1, with 0, 1, 2, or 3 in the third octet, and anything in the fourth octet. So, it will not 
advertise 10.1.4.0/24 or 10.1.5.0/24, because those interfaces are not matched with a network 
command. Because it is passive, no Hellos are sent out fa0/0, meaning no neighbor 
relationships are formed, and no routes exchanged either in or out fa0/0.
9.
a, d. The passive-interface command, by deﬁnition with EIGRP, tells EIGRP to not send 
EIGRP Hellos out the interface. A receive-only EIGRP stub router only receives routing 
updates, but to do so, it must form neighbor relationships with any routers, so it does send 

Chapter 10     875
Hellos. Of course, if no network command matches an interface, EIGRP is not enabled for 
the interface at all.
Chapter 10
1.
b, c. OSPF uses IP protocol 89, and does not use TCP. LSUs can be acknowledged by simply 
repeating the LSU or by using the LSAck packet.
2.
a, c. Multipoint interfaces default to use network type nonbroadcast, so the ip ospf network 
non-broadcast command would not show up in the conﬁguration. This type defaults to 
30-second Hello and 120-second Dead timers. Neighbor commands are required, but only 
one of the neighbors on either end of a PVC needs to conﬁgure the neighbor command. 
Network type nonbroadcast does require a DR. So for all routers to be able to communicate 
with the DR, router R-core needs to be the DR.
3.
c. The ip ospf network non-broadcast command, which is also the default on multipoint 
interfaces, requires a DR, as well as requiring neighbor commands.
4.
d. Unlike EIGRP, OSPF’s hello intervals on LANs must match, so R2 will not form any 
neighbor relationships. R1, R3, and R4 will not expect Hellos from R2, because it will not be 
a neighbor. R2 will not become a DR, because a router must form a neighbor relationship 
before performing DR election. R3 ties on highest priority amongst R1, R3, and R4, and it 
beats R1 with a higher RID, so it becomes DR, not BDR. R4’s dead interval will default to 
four times hello, or 40 seconds.
5.
a. They must be in the same area, and must have the exact same stubby area type. The 
LSRefresh setting is not checked during the Hello process. Finally, the hello and dead 
intervals must match before two routers will become neighbors.
6.
c, d. Routers in NSSAs inject type 7 LSAs; R1, being in the backbone area, cannot be in 
an NSSA, so it will inject a type 5 LSA for 200.1.1.0/24. R3 will indeed learn a route to 
200.1.1.0/24, as area 0 is not a stub area. R2, an ABR, will forward the type 5 LSA created 
by R1 into area 1. Finally, every DR creates a type 2 LSA for the subnet and ﬂoods it 
throughout the area.
7.
a, b, d. Routers in NSSA areas can inject type 7 LSAs into the NSSA area when redistributing 
into OSPF from external sources. However, because the area is totally NSSA, R2 will not 
forward type 5 or type 3 LSAs into totally NSSA area 1. Instead, R2 will inject a default route 
via a type 3 LSA into area 1. Finally, every DR creates a type 2 LSA for the subnet and ﬂoods 
it throughout the area.
8.
b. The command conﬁgures area 55 as a totally stubby area, which means that no external type 
5 (E1 or E2) LSA can be sent into the area by the ABR. Also, the ABR does not create type 3 
summary LSAs for the subnets in other areas. The ABR does create and inject a default route 
into the area due to the no-summary option. 

876     Appendix A: Answers to the “Do I Know This Already?” Quizzes
9.
c. OSPF E1 routes include internal OSPF costs in the metric calculation; for E2 routes, the 
internal OSPF cost is not considered. R3’s cost to reach 10.1.1.0/24 includes R3’s cost to 
reach the ABR plus the cost stated in the type 3 LSA. When route summarization occurs, the 
summary uses the least cost of all the constituents subnets; however, this design does not use 
any route summarization.
10.
a, e. The network command’s mask works like an ACL wildcard, so the network 10.0.0.0 
0.0.0.255 command matches addresses beginning 10.0.0—so it does not match the LAN 
interface on R2. OSPF routers can use different process IDs and still become neighbors. 
OSPF costs can be asymmetric, meaning that routers can become neighbors without having 
the same OSPF costs. The cost value is not part of the DR election decision. Finally, with a 
reference bandwidth of 1000, R1 calculates the cost as 1000/100 = 10.
11.
c, f. The ip ospf dead-interval minimal command sets the dead interval to 1 second, and the 
hello interval to (1/multiplier) seconds. The hello interval defaults to 10 seconds on some 
network types, notably point-to-point and broadcast networks, and defaults to 30 seconds on 
other network types. The ip ospf hello-multiplier command is not a valid command.
12.
a. The ip ospf authentication interface subcommand takes precedence over the area 0 
authentication message-digest command, causing R1 to attempt OSPF type 1 (simple text) 
authentication, with the key being conﬁgured with the ip ospf authentication-key command.
Chapter 11
1.
a, d. A route-map clause acts on items that match the parameters on the match command. 
For routes that do not match a clause’s match command, the route map moves on to the logic 
in the next route-map clause. Route 10.1.1.0/24 was matched, and because the route-map 
clause had a permit action, the route was redistributed. 10.1.2.0/24 was not matched by the 
ﬁrst route-map clause, so it would fall through to be considered in the next route-map 
clause. However, the question did not supply the rest of the information, so you cannot tell 
whether 10.1.2.0/24 was redistributed or not.
2.
c, d. The 10.128.0.0/9 deﬁnes the matching parameters on the preﬁx (subnet number), which 
matches subnets beginning with 10, and with 128–255 in the second octet. The ge 20 implies 
that the routes must have a preﬁx length between 20 and 32, inclusive. Only 10.200.200.192 
and 10.128.0.0 match both criteria.
3.
a. EIGRP requires that a metric be deﬁned for any route redistributed into EIGRP, and no 
metrics have been deﬁned. So, the redistribute ospf 2 command does not cause any routes 
to be redistributed. OSPF defaults to use metric 20, with redistributed routes as type E2.
4.
a, b. The redistribute eigrp 1 subnets command looks for EIGRP routes, and connected 
routes that match any EIGRP network commands.
5.
c. Because EIGRP treats external routes as AD 170 by default, R1 will not have any 
suboptimal routes as described in the question. For example, if subnet 1 was in the OSPF 
domain, and R2 injected it into EIGRP, the route would have administrative distance 170. R1, 

Chapter 12     877
upon learning the EIGRP route to subnet 1, would prefer the OSPF (default administrative 
distance 110) route over the administrative distance 170 route.
6.
a. Table 11-7 in Chapter 11 summarizes the defaults for metric types and metric values when 
performing redistribution. OSPF defaults to external type 2, EIGRP to external (but that is the 
only option), and RIP has no concept of route type—or has a single route type, depending on 
your perspective. OSPF defaults to external type 2, regardless of whether the route is 
redistributed via an ASBR inside a normal area or from one inside an NSSA area.
7.
d. The three incorrect answers are classic descriptions of what route summarization does do. 
However, summary routes remove some details of the topology from the routing table, which 
in itself increases the possibility of suboptimal routes. It does nothing to help the generalized 
problem of suboptimal routing caused by redistribution.
8.
a. EIGRP conﬁgures summarization using the ip summary-address interface subcommand. 
RIPv2 does not support summaries that are supernets, and it does not support multiple 
summaries of the same classful network on the same interface—both features that EIGRP 
supports. RIPv1 cannot support route summarization if it does not support VLSM.
9.
a, c. Without the always keyword, OSPF requires that a route to 0.0.0.0/0 exist, but that route 
can be a dynamic or static route. EIGRP does not support the command.
Chapter 12
1.
d. BGP neighbors must reach the established state, a steady state in which Update messages 
can be sent and received as needed. 
2.
c. While eBGP neighbors often share a common link, there is no requirement that neighbors 
must be connected to the same subnet.
3.
a, d. BGP sets TTL to 1 only for messages sent over eBGP connections, so the ebgp-multihop 
option is only required in that case. The BGP router ID can be set to any syntactically valid 
number, in the format of an IP address, using the bgp router-id id command; it does not have 
to match another router’s neighbor command.
4.
d. When no auto-summary is conﬁgured, the network command must be an exact match of 
the preﬁx/preﬁx length. If omitted, the preﬁx length is assumed based on the default classful 
network mask—in this case, network 20.0.0.0 would imply a mask of 255.0.0.0.
5.
a, b. The redistribute command, when redistributing from an IGP, takes routes actually in the 
routing table as added by that IGP, or connected routes on interfaces matched by that IGP’s 
network commands. 
6.
c. The BGP auto-summary command only affects routes locally injected into a router’s BGP 
table through redistribution or the network command. The network command, with auto-
summary enabled, only needs to match one subnet of the classful network, which it does in 
this case. The aggregate-address command creates the 9.0.0.0/8 aggregate, but without the 
summary-only keyword, it also advertises the component subnet 9.1.0.0/16.

878     Appendix A: Answers to the “Do I Know This Already?” Quizzes
7.
a, c, e. BGP routes must be considered to be valid and best before being advertised. With 
iBGP, the route also must not have been learned from another iBGP peer. Finally, the 
NEXT_HOP must be reachable, but the local router determines reachability by looking in its 
IP routing table for a matching route—not by pinging the NEXT_HOP IP address.
8.
a, d, e. The redistribute command injects routes with an assigned ORIGIN of incomplete, 
whereas those injected with the network command are considered as IGP routes. The 
aggregate-address command, without the as-set option, always sets the ORIGIN code of the 
aggregate to IGP.
9.
d. For an iBGP-learned route, BGP synchronization requires that the NLRI (preﬁx/preﬁx 
length) be in the IP routing table, as learned via an IGP, before considering that BGP route as 
a candidate to be BGP’s best route to that preﬁx. The other answers simply do not meet the 
deﬁnition of BGP synchronization.
10.
a, b. Confederations use eBGP rules for confederation eBGP peers regarding multihop and 
the advertisement of iBGP routes to eBGP (confederation) peers. Inside a confederation AS, 
a full mesh must be maintained.
11.
a, c, e. NLRI 1.0.0.0/8 was learned via eBGP, so R1 advertises it to all iBGP peers—the route 
reﬂector logic has no impact on that logic. NLRI 3.0.0.0/8 shows normal route reﬂector 
operation for a route sent to the reﬂector by a client—it is reﬂected to all clients and nonclients. 
The NLRI 5.0.0.0/8 answer lists normal route reﬂector operation for routes received from a 
nonclient—it is only reﬂected to clients.
12.
c. One of the challenges with migration to a confederation conﬁguration is that the ASN is 
no longer conﬁgured on the router bgp command, but rather on the bgp confederation 
identiﬁer command. Also, the bgp confederation peers command lists the confederation 
ASNs of routers in other confederation sub-autonomous systems, but it is only required on 
routers that have neighbor connections to routers in other confederation ASNs. As a result, R3 
does not need the command.
Chapter 13
1.
b, d. Standard access-list 1 cannot match on the preﬁx length/mask, and, as stated, it would 
match any subnets that start with 20.128. preﬁx-list 1 uses an invalid parameter (eq). access-
list 101 matches the preﬁx length based on the destination IP address, and preﬁx-list 2 
matches the preﬁx length of exactly 20.
2.
c. Changes to routing policies are not implemented until the neighbor connection is cleared. Once 
cleared, the show ip bgp advertised-routes command will no longer list the ﬁltered routes.
3.
a. .*333_ allows matching of 33333 as well as 333, because the wildcard before the 333 would 
match 33. For similar reasons, .*_333.*$ would also match 33333, due to the .* right after 
333. Finally, ^.*_333_.*$ is close, but the _.*$ on the end does not match correctly in a case 
for which 333 is the last ASN in the AS_PATH.

Chapter 13     879
4.
a, b. The distribute-list command will ﬁlter all preﬁxes in the range 11.8.0.0 through 
11.11.255.255, permitting those but ﬁltering all others due to the implicit deny all at the end 
of the ACL.
5.
b. Well-known attributes must be supported by every BGP implementation, whereas optional 
attributes do not. However, well-known PAs do not have to be used all the time, so they may 
not be included in BGP Updates. Nontransitive attributes should not be forwarded by BGP 
implementations that do not understand the attribute. Finally, discretionary attributes are well 
known, but they do not have to be conﬁgured for use at all times.
6.
a, c
7.
b, c. The ORIGIN is not a numeric value. The MED and the IGP metric both act as metrics, 
considering the lower number to be better.
8.
a. The WEIGHT is a Cisco-proprietary mechanism used by one router to inﬂuence its own 
BGP decision process; because it is not a path attribute, there is not even a place in the Update 
message in which to place the attribute.
9.
e. The three routes tie on all steps up to the Neighbor Type check; only one route was learned 
via eBGP (the one to next-hop 10.1.2.3), so, as the only eBGP route, it was considered better 
than the two iBGP routes.
10.
a. The second-listed route wins on several counts, but the ﬁrst of those to be considered is the 
highest administrative weight (30).
11.
c. The conﬁguration is syntactically correct, and would add three 1s to the AS_PATH. 
Additionally, R1 would add its own AS_PATH before sending the Update to its eBGP peer 
3.3.3.3, making a total of four consecutive 1s in the AS_PATH. The routes to subnets of 
12.0.0.0/8 would be ﬁltered, because the route map does not contain any permit clauses 
matching the subnets of network 12.0.0.0/8.
12.
d. BGP can use the maximum-paths command to impact its logic to place multiple IP routes 
into the IP routing table; however, only a single BGP route in the BGP table, for each preﬁx, 
can be considered to be a best route.
13.
a, d. BGP RFCs use the term NO_EXPORT_SUBCONFED, whereas Cisco documents and 
commands use the term LOCAL_AS, for the same COMMUNITY value. This value implies 
that a route can be advertised to confederation iBGP peers, but not to confederation eBGP or 
normal eBGP peers.
14.
c. BGP communities enable a router to set the same value for a group of routes, then enable 
other routers to apply the same policy logic based on a match of that COMMUNITY value. 
The actual COMMUNITY value is not considered during the BGP decision process.

880     Appendix A: Answers to the “Do I Know This Already?” Quizzes
Chapter 14
1.
c
2.
a, d. DSCP is the high-order 6 bits of the DS ﬁeld, formerly known and the ToS byte. IPP 
occupies the high-order 3 bits of that same byte.
3.
a, b, e. CS3’s ﬁrst 3 bits purposefully match IPP 3. Also, with a value of binary 011000, CS3’s 
decimal equivalent is 24.
4.
b, d. AF31’s binary value is 011010, so the ﬁrst 3 bits, which comprise the same bits as the 
IPP ﬁeld, are 011. Also, binary 011010 converts to decimal 26.
5.
a. The class-map command defaults to use the match-all parameter, which means both 
match commands’ conditions must be true in order to match the class.
6.
a, b. The match cos 3 4 command uses OR logic between its two parameters, matching CoS 
3 or 4. class-map c2 uses match-any logic, so either match command can be true to match 
class-map c2. Finally, with match-all logic, class-map c3 fails to match, because the frame 
has a CoS of 3, and the match cos 2 command fails to match. The IPP and DSCP ﬁelds 
do not impact the actions taken by the listed conﬁguration.
7.
d. Each class map has an optional parameter of match-all (default) or match-any. With the 
default of match-all, both match commands in the class map must match, and a packet can’t 
have both DSCP EF and AF31. After creating a set of class maps, and referring to them with 
class commands inside policy-map barney, you used the service-policy input barney 
command under interface fa 0/0. However, the show policy-map interface fa 0/0 command 
shows that no packets match class fred.
8.
b, e. Because the policy works for outgoing packets, the policy map cannot classify based on 
the DE bit, although the DE bit can be set. CoS and CLP do not exist in Frame Relay, so those 
ﬁelds cannot be set.
9.
a. CB Marking requires that CEF is enabled globally, regardless of whether NBAR is being 
used. NBAR is in use in this case because the match protocol command tells Cisco IOS 
to use NBAR to match the parameters on that command. NBAR and the match protocol 
command can be used as an input or output function.
Chapter 15
1.
c
2.
b, c. CQ reserves a minimum amount of bandwidth for each queue by reserving a byte count 
for each queue. Like all queuing tools, CQ provides a place to hold packets while waiting for 
the hardware queue to release a packet and open a slot. Because it does not have a concept of 
allocating bandwidth for an LLQ, it cannot have a concept of allocating the bandwidth that 
remains after giving some to an LLQ.

Chapter 16     881
3.
a, c. WFQ may discard the newly arriving packet, or it may discard a previously enqueued 
packet in another queue, depending on sequence numbers. It checks the hold-queue limit 
against the total number of enqueued packets among all WFQ queues on the interface, and 
also checks the CDT versus the individual queue’s length.
4.
a, b. Multiple classes can be conﬁgured as LLQs with the priority command. Also, only one 
style of bandwidth command is allowed in a single policy map, making the last two answers 
incorrect.
5.
b. To ﬁnd the answer, take interface bandwidth (100 kbps), subtract 25 percent of the 
bandwidth (based on the default max-reserved-bandwidth of 75 percent). That leaves 
75 kbps. Subtract 20 percent of the interface bandwidth (20 percent of 100 kbps) for the 
LLQ, which leaves 55 kbps. The bandwidth remaining percent features then allocate 
percentages of the remaining bandwidth, which is 55 kbps in this case.
6.
b. WRED increases the discard rate from 0 to 1/MPD as the average moves from the minimum 
threshold to the maximum threshold.
7.
a, b. WRED defaults to using IPP, so random-detect enables it for IPP, as does the explicit 
version of the command (random-detect precedence-based).
8.
a. The priority-queue out command enables the PQ (expedite queue) feature on a 3550 
interface. The wrr-queue bandwidth command does not allow a 0 to be conﬁgured for any 
queue; 1 is the lowest allowed value. The queue for a frame is chosen based on CoS, not 
DSCP, and any CoS value(s) can be placed into the queue.
9.
a. 3550 WRED does not include MPD. There are effectively two WRED trafﬁc proﬁles, 
each with a single threshold. The threshold essentially sets the minimum queue depth. The 
WRED discard percentage grows as the queue depth climbs from that minimum setting to 
100 percent full.
Chapter 16
1.
c. CB Shaping adds Bc tokens to the bucket at the beginning of each shaping time interval 
(Tc). The presence of a non-0 Be means that the bucket is larger, as it is Bc + Be large, but it 
does not mean that more tokens are added at each Tc. (CB Policing adds tokens based on 
packet arrival.)
2.
c. The formula is Tc = Bc/CIR. Shaping uses a unit of “bits” for Bc, so the units work out 
easily. In this case, Tc = 3200/128,000, or 1/40 of a second—25 ms.
3.
a. shape peak actually shapes at a higher rate than the conﬁgured rate. CB Shaping defaults 
Be to be equal to Bc, so to make it 0, you must set it directly. Also, the shaping rate is 
conﬁgured in bps, not kbps.

882     Appendix A: Answers to the “Do I Know This Already?” Quizzes
4.
b. The command could also have been used a point 2 in the conﬁguration snippet—as long as 
the command was conﬁgured inside class-default inside policy-map shape-question. The 
answers beginning with shape queue are not valid commands.
5.
e. The show policy-map command lists only the formatted conﬁguration, with no calculated 
or statistical values. Tc = Bc/CIR = 5120/256,000 = 1/50th of a second, or 20 ms.
6.
b. FRTS assigns settings based on the following order of precedence: the class command 
under the frame-relay interface-dlci command, the frame-relay class command under the 
subinterface, or the frame-relay class command under the interface.
7.
d. The frame-relay trafﬁc-rate command does not allow setting the Tc (the time interval), 
and FRTS normally defaults that value to 125 ms. To impact the Tc, the Bc must be set; to 
make Tc 62.5 ms, the rate and Bc must be chosen such that Bc/rate = 62.5 ms, or 1/16 second.
8.
b, d. Shapers delay packets, and policers either discard packets or re-mark them.
9.
c. CB Policing defaults its Be setting to 0 when it is conﬁgured as a two-color policer. That 
occurs when the police command does not have a violate action conﬁgured, or an explicit Be 
value set. Also, the policing rate uses a unit of bps; both commands beginning police 128 
police at 128 bps, not 128 kbps. The police 128k command is syntactically incorrect.
10.
a, c. CAR is always a single-rate, two-color policer, meaning that it supports only the conform 
and exceed actions. It does not use MQC commands. However, it does allow for policing 
supersets and subsets of interface trafﬁc, and can police packets going in either direction on 
an interface.
Chapter 17
1.
e. The T1 framing options are SF (also known as D4) and ESF. A T1 has 24 DS0 channels 
available for customer use, plus 8 kbps of overhead. With ESF, 4 kbps of the 8 kbps of 
overhead is used for OAM functions. Bits are robbed or stolen from each DS0 channel for 
voice signaling in some cases. Finally, of the T1 encoding options of AMI and B8ZS, only 
B8ZS uses BPVs to ensure the T1’s density.
2.
a, b, d. The DCE raises DSR to indicate that it is ready to begin working, raises CTS to 
indicate that the DTE may send now, and raises DCD to indicate that the CSU/DSU currently 
has a working line.
3.
b, c. BPVs occur when the encoder sends binary 1s as a 3-mV signal of alternating polarity, 
but the next transmitted binary 1 signal has the same polarity as the previous signal. AMI does 
not use BPVs to encode bits, so a BPV when using AMI means at least one bit error has 
occurred. B8ZS uses BPVs as part of an encoded set of eight consecutive 0s to ensure enough 
signal transitions when sending strings of eight binary 0s; the transitions are required to 
maintain clock synchronization.

Chapter 18     883
4.
b. RTP header compression is negotiated by IPCP, whereas the other answers are all LCP 
features. LCP must complete before an NCP (like IPCP) may begin negotiation.
5.
d. MLP fragments packets and load balances the packets over the various links. The fragment 
delay can be set, implying the fragment length based on delay × bandwidth = fragment length. 
However, the fragment delay does not have to be set. In that case, the fragment size is based 
on the number of links, in this case creating fragments 1/3 the size of the original packet. 
Because the balancing is at Layer 2, Layer 3 mechanisms like CEF and fast switching are not 
involved in the decision.
6.
c, d. CHAP requires PPP, which in turn requires the encapsulation ppp command. To cause 
CHAP negotiation, the ppp authentication chap command is required. The username 
command is a global conﬁguration command that refers to the other router’s host name, 
making both answers with the username command incorrect. R1 would need a username R2 
password samepassword global conﬁg command.
7.
a. FRF.9 is only supported on Frame Relay interfaces. MPPC and Predictor are only supported 
on PPP links.
Chapter 18
1.
b. The ANSI T1.617 Annex D LMI and the ITU Q.933 Annex A LMI are equivalent, using 
DLCI 0 for LMI ﬂows and supporting a maximum of 976 PVCs/DLCIs. The Cisco LMI uses 
DLCI 1023 and supports 992 PVCs/DLCIs. Both ANSI and ITU LMI types can be autosensed, 
but so can the Cisco LMI type; the question asks for answers that apply only to ANSI and ITU 
LMI types.
2.
c. The FECN signiﬁes congestion from R1 to R2, so R2 would not slow down its adaptive 
shaping; R2 would slow down on receipt of a BECN. The receiver on the end of the PVC does 
not react to congestion; rather, the intermediate Frame Relay switches could react. To signal 
the congestion back to R1, R2 could be conﬁgured to “reﬂect” the FECN back to R1 by 
sending its next frame to R1 with BECN set; R1 could then adaptively shape to a lower rate. 
Finally, Cisco IOS policers cannot set FECN, but they can set DE.
3.
b, e. The encapsulation frame-relay command defaults to ietf encapsulation; the 
encapsulation frame-relay ietf interface subcommand would achieve the same result. The 
encapsulation cisco command is syntactically incorrect, but the encapsulation frame-relay 
cisco interface subcommand would enable Frame Relay, with Cisco encapsulation, on the 
interface. However, the command is only a physical interface subcommand, not a subinterface 
subcommand. Encapsulation types can differ for each VC. Those without the encapsulation 
type listed on the frame-relay interface-dlci dlci encapsulation-type command use the 
encapsulation conﬁgured on the encapsulation interface subcommand; those with the 
encapsulation type on the frame-relay interface-dlci command use the speciﬁed type.

884     Appendix A: Answers to the “Do I Know This Already?” Quizzes
4.
b. Frame Relay access links work when LMI is disabled on the router. Of the four answers 
with commands, the only valid command is no keepalive, which does indeed disable Frame 
Relay LMI.
5.
b, d. Of the three options, only packet-by-packet uses a per-packet compression dictionary; 
only FRF.9 is standardized by a public standards body (Frame Relay Forum); and all three use 
the LZS algorithm. Any of the three types can be conﬁgured with the frame-relay payload-
compress command or the frame-relay map command.
6.
a, e. The LMI messages do not contain any information about the router’s subinterfaces, so 
the DLCI must be associated with each subinterface, with the frame-relay interface-dlci 
command being one method. The encapsulation type and the use of frame-relay interface-
dlci and frame-relay map commands are unrelated. The FR network does not care about the 
headers past the LAPF header, and therefore does not know about nor care to characterize the 
encapsulation type. Because the FR network does not care about the encapsulation type, 
different types can be mixed over the same access link.
7.
a. A router can correlate a DLCI to a subinterface using two methods: a frame-relay 
interface-dlci command or the frame-relay map command. On the six subinterfaces with 
neither command conﬁgured, R1 will not know how to associate any DLCIs with the sub-
interfaces, so it cannot send trafﬁc out those subinterfaces. The four subinterfaces with 
frame-relay interface-dlci commands do not need a frame-relay map command, because 
the router will receive InARP messages, see the DLCI listed, correlate that DLCI to the 
subinterface with the frame-relay interface-dlci command, and remember the associated 
next-hop address.
Chapter 19
1.
b, c, d. Multicast packets are sent once from a source to many destinations, which eliminates 
trafﬁc redundancy; hence, multicast uses less bandwidth than unicast. Multicast applications 
use UDP at the transport layer, which provides connectionless service.
2.
c. A multicast address can be permanently assigned by IANA or can be temporarily assigned 
and relinquished. The multicast address range is 224.0.0.0 to 239.255.255.255. A multicast 
address is unstructured and does not use any subnet mask; therefore, it cannot be entered as 
an IP address on an interface of a router. 
3.
a, d. IANA reserves all the addresses in the range 224.0.0.0 to 224.0.0.255. Multicast routers 
do not forward packets with a destination address from this range. The addresses 224.0.1.39 
and 224.0.1.40 are also reserved but routers can forward packets with these destination 
addresses.
4.
d. An Ethernet multicast MAC address of 48 bits is calculated from a Layer 3 multicast 
address by using 0x0100.5e as the multicast vendor code (OUI) for the ﬁrst 24 bits, always 
binary 0 for the 25th bit, and copying the last 23 bits of the Layer 3 multicast address.

Chapter 20     885
5.
d. Only hosts originate IGMP Membership messages and only routers originate IGMP Query 
messages. Switches only forward these messages.
6.
d. In IGMPv2, when a router receives a Leave message, it responds by sending a Group-
Speciﬁc Query using the multicast address that was used in the Leave message as the 
destination address.
7.
f. Only IGMPv1 uses a ﬁxed Maximum Response Time of 10 seconds. This timer can 
be conﬁgured for IGMPv2 and IGMPv3 from 0 to 25.5 seconds, and 0 to 53 minutes, 
respectively. IGMPv1 does not have any querier election process. For querier election, 
IGMPv1 depends on the multicast routing protocol. IGMPv2 elects the router with the lowest 
IP address as the querier. IGMPv3 is backward compatible with IGMPv2 and IGMPv1. Both 
IGMPv2 and IGMPv3 are capable of using the Leave messages.
8.
e
Chapter 20
1.
c. When a multicast router receives a multicast packet, it ﬁrst performs the reverse-path 
forwarding (RPF) check to determine whether the packet entered through the same interface 
it would use to go toward the source; if it did not, the router drops the packet.
2.
d. When multiple PIM routers are connected to a LAN subnet, they send Assert messages 
to determine which router will be the forwarder of the multicast trafﬁc on the LAN. Both 
PIM-DM and PIM-SM routing protocols use Assert messages.
3.
d. When a PIM-DM router receives a Graft message after it has sent a Prune message, it 
will send a Graft message to the upstream router. It does not send a Prune message to the 
downstream router and it does not have to re-establish adjacency with the upstream router.
4.
c, e. A PIM-DM router sends Prune and Graft messages based on the demand for multicast 
group trafﬁc. If nobody wants the group trafﬁc, the PIM-DM router sends a Prune message to 
its upstream router. If somebody requests group trafﬁc and the router is not receiving the 
trafﬁc from its upstream router, it sends a Graft message to its upstream router.
5.
a, c. The RP sends a Register-Stop message only when it does not need to receive the trafﬁc, 
or when it does need to receive the trafﬁc but the ﬁrst-hop DR is now sending the multicast 
to the RP via the shortest-path tree to the RP.
6.
c. R1 is not switching over from SPT to RPT. R1’s upstream router on the shared tree will 
show the R ﬂag only for its (S, G) entry.
7.
b. The PIM Auto-RP messages will not reach all the PIM-SM routers if the ip pim 
sparse-mode command is conﬁgured on the interfaces of all the routers. Congestion is not a 
problem because all the routers show all the PIM neighbors, which means they are receiving 
multicast PIM Hello messages. The static RP conﬁguration with an override option would 

886     Appendix A: Answers to the “Do I Know This Already?” Quizzes
show at least some RP mapping on the leaf routers. In order for an interface to be considered 
for use by PIM-SM, the ip pim sparse-mode command must be conﬁgured under the 
subinterface.
8.
c, d. PIM-SM routers can maintain the forwarding state on a link only by periodically (default 
every 60 seconds) sending PIM Join messages. PIM-SM routers choose to send the periodic 
Joins for two reasons. First, Joins are sent to the RP if a host on a connected network is 
sending IGMP Reports, claiming to want trafﬁc sent to that multicast group. Second, Joins 
are sent to the RP if a router is receiving PIM Joins from a downstream router.
Chapter 21
1.
d. AAA authentication for enable mode (privileged exec mode) only uses the default set of 
authentication modes listed in the aaa authentication enable default group radius local 
command. The enable authentication wilma and aaa authentication enable wilma group 
fred local commands are not valid commands; the enable command can only use a default 
set of AAA authentication methods. Also, with the aaa new-model and aaa authentication 
enable commands as listed, the enable secret password is not used.
2.
a. The aaa authentication login fred line group radius none command deﬁnes a set of 
methods beginning with line, which means using the password command listed in line 
conﬁguration mode. The login authentication fred command refers to group fred. As a 
result, the router begins by just asking for a password, and using the password listed in the 
password cisco command.
3.
c. Because there is no login authentication subcommand under line vty 0 4, Telnet attempts 
to use the default methods deﬁned in the aaa authentication login default command. The 
methods are tried in order: the servers in the default group of RADIUS servers, and then the 
local set of usernames and passwords. Because barney/betty is the only deﬁned username/
password, if neither RADIUS server replied, then barney/betty would be the required 
username/password.
4.
a, b, e. Several reference documents regarding security best practices are available at http://
www.cisco.com/go/safe includes. The core SAFE document lists Dynamic ARP Inspection 
(DAI) as one best practice; it watches ARP messages to prevent many ARP-based attacks. 
Also, shutting down unused ports and enabling port security are also recommended. SAFE 
further recommends not using VLAN 1 for any trafﬁc, and to disable DTP completely; 
automatic mode would allow another switch, or a device masquerading as a switch, to use 
DTP to dynamically create a trunk.
5.
d. Port security requires that each enabled port be statically conﬁgured as an access port or a 
trunking port. By default, port security allows a single MAC. Sticky-learned MACs are added 
to the running conﬁguration only; dynamic-learned (nonsticky) MACs are only used until the 
next reload of the switch.

Chapter 22     887
6.
b. With 802.1X, the user device is the supplicant, the switch is the authenticator, and a 
RADIUS server is the authentication server. EAPoL is used between the supplicant and the 
authenticator. Until a port is authenticated, the switch will forward only 802.1X trafﬁc 
(typically EAPoL), plus CDP and STP.
7.
d. Mask 0.0.1.255 matches 10.44.38.0 through 10.44.39.255. Mask 0.0.7.255 matches 
10.44.32.0 through 10.44.39.255; in fact, if used as suggested, a show run command would 
have listed it as access-list 1 permit 10.44.32.0 0.0.7.255. Mask 0.0.15.255 would imply a 
range of 10.44.32.0 through 10.44.47.255; the resulting command output of show run would 
list access-list 1 permit 10.44.32.0 0.0.15.255. Finally, mask 0.0.5.255 uses discontiguous 0s 
and 1s, which is valid; however, it would not match IP address 10.44.40.18.
8.
a, b. Routers will forward packets sent to subnet (directed) broadcast addresses, except for 
the router connected to the subnet; its action is predicated on the setting of the ip directed-
broadcast command. An RPF check would also ﬁlter the packets, because a router’s route to 
reach 9.1.1.0/24 would point into the enterprise, not toward the Internet, which is from where 
the packet arrived. Finally, a packet ﬁlter for all IP addresses in the subnet would ﬁlter both 
legitimate trafﬁc and the attack.
9.
b. TCP intercept can either watch the connections, monitoring them, or inject itself into the 
process. It injects itself by responding to TCP connection requests, and then forming another 
TCP connection to the server—but only if the client-side connection completes. It is enabled 
globally, but it uses an ACL to deﬁne the scope of connections it processes. It is not 
speciﬁcally associated with an interface.
Chapter 22
1.
a. 802.11a offers the highest capacity because it has 12 nonoverlapping RF channels, as 
compared to only 3 for 802.11b and 802.11g.
2.
b. Wireless devices in an infrastructure mode conﬁguration connect to an access point, which 
provides a wireless link between the user devices and the access point. All data frames must 
travel through the access point, even though the data trafﬁc is between two wireless users. 
Data frames travel directly between each other only when ad hoc mode is implemented.
3.
c. Repeaters merely receive and then retransmit 802.11 frames that they receive. This provides 
a duplicate data frame for every data frame received, which doubles the number of data 
frames sent over the network.
4.
a. The 802.11 requirement for a receiving station to send an acknowledgment for every data 
frame introduces signiﬁcant overhead on the wireless network. This lowers throughput. Only 
802.11 data frames sent with protection mechanisms enabled use RTS/CTS. 802.11 doesn’t 
implement forward error correction, so there is no redundancy in data frames.

888     Appendix A: Answers to the “Do I Know This Already?” Quizzes
5.
d. All 802.11 wireless LANs must implement beacons in order to announce the presence 
of the network and facilitate association and power-save functions. The sharing of the 
transmission of beacons among all ad hoc stations is necessary to ensure that beacons are 
still sent if a particular station becomes unavailable.
6.
a. In infrastructure mode conﬁgurations, the access point operates on a particular RF channel. 
Radio cards periodically search for beacons by scanning all RF channels. The radio card 
automatically tunes the RF channel of the access point prior to connecting with the access 
point.
7.
b. The DTIM interval deﬁnes the number of beacons that are sent before multicast frames are 
sent by the access point. A sleeping station then knows to stay awake longer to receive the 
multicast frames.
8.
c. With the distributed coordination function, an 802.11 station independently decides to 
access the medium if the medium is idle (no carrier detected) and the network allocation 
vector (NAV) value is zero. The NAV is set after the radio card receives a frame, which 
includes a duration ID indicating the value of time that the radio card must wait prior 
to attempting to access the medium. This allows 802.11 functions, such as RTS/CTS, to 
complete before a radio card accesses and ties up the medium.
9.
c. Public wireless LANs do not implement Layer 2 security, such as 802.11i, WPA, and WEP. 
As a result, users should make use of VPNs, which offers end-to-end encryption.
10.
a. A 6-dBi antenna has 3-dB gain as compared to a 3-dBi antenna, which effectively doubles 
the transmit power. This stronger signal travels farther.
Chapter 23
1.
b. WDS is a current Cisco feature that eases the deployment, usage, and support of wireless 
LANs. WDS is not hardware.
2.
d. SWAN includes all the basic building blocks necessary to effectively implement and 
support a wireless LAN.
3.
a. The Cisco Aironet 1000, 1100, and 1200 Series access points are designed for indoor use. 
The Cisco Aironet 1300 is the only SWAN access point designed for outdoor use.
4.
b. The Cisco Aironet 350 is an older access point model that was released prior to the 
ratiﬁcation of 802.11g and 802.11e.
5.
d
6.
b. To support voice services, the SNR must be at least 25 dB. At this SNR, the data rate will 
be optimal, which provides adequate performance. The coverage overlap must be at least 
20 percent to avoid dropped calls as users roam through the facility. An SNR of 20 dB would 
provide good enough signal coverage for data-only applications, but it is not good enough for 
voice services.

Chapter 24     889
7.
c. Most RF interference is in the 2.4-GHz band, which is the band that 802.11b/g uses. As a 
result, you can avoid RF interference by using 802.11a, which operates in the 5-GHz band. 
Using additional Wi-Fi phones or decreasing the access point transmit power will not help 
counter RF interference.
8.
b. If you disable the broadcasting of SSIDs with public wireless LANs, then Microsoft 
Windows on the user devices will not display the network to users. Therefore, it is best 
to broadcast the beacons.
9.
a. With public wireless LANs, a billing component is necessary to charge users for access. 
The security of a public wireless LAN, however, is generally kept to a minimum to increase 
the openness of the network. Enterprise wireless LANs, though, include maximum security 
features and no billing functions. The performance, access point hardware, and management 
mechanisms of public and enterprise wireless LANs are generally the same.
10.
d. With small ofﬁce and home wireless LANs, a Wi-Fi router is necessary to enable the 
sharing of a common ofﬁcial IP address (supplied by the ISP) among multiple computers. 
Thus, DHCP and NAT are needed. Both Wi-Fi routers and access points can operate at the 
same speed, provide the same level of security, and have the same longevity.
Chapter 24
1.
a, d. By asking IP to send data for it, TCP is using the features of an adjacent lower layer—
hence it is an example of adjacent-layer interaction. TCP’s features most closely relate to OSI 
Layer 4.
2.
d. The layered structure does not necessarily mean that the software written to those 
speciﬁcations will run faster; in fact, the protocol details required for interoperability between 
layers and protocols may actually result in additional requirements and additional code.
3.
e. The OSI layers (1 through 7) are physical, data link, network, transport, session, presentation, 
and application.
4.
a. With a boot ﬁeld of 0x0, the router will load ROMMON code. The two boot commands are 
syntactically invalid.
5.
b


A P P E N D I X B
CCIE Routing and Switching 
Exam Updates: Version 1.0 
Over time, reader feedback allows Cisco Press to gauge which topics give our readers the most 
problems when taking the exams. Additionally, Cisco may make small changes to the CCIE 
Routing and Switching exam blueprint. To assist readers with those topics, the authors create 
new materials clarifying and expanding upon those troublesome exam topics. As mentioned in 
the introduction to the CCIE Routing and Switching Exam Certiﬁcation Guide, Second Edition, 
the additional content about the exam is contained in a PDF document on this book’s companion 
website, at http://www.ciscopress.com/title/1587201410. 
This appendix presents all the latest update information available at the time of this book’s 
printing. To make sure you have the latest version of this document, visit the companion website 
to see if any more recent versions have been posted since this book went to press. 
This appendix attempts to ﬁll the void that occurs with any print book. In particular, this 
appendix does the following:
■
Mentions technical items that might not have been mentioned elsewhere in the book
■
Covers new topics when Cisco adds topics to the CCIE Routing and Switching written 
exam blueprint
■
Provides a way to get up-to-the-minute current information about content for the exam
Always Get the Latest at the Companion Website
You are reading the version of this appendix that was available when your book was printed. 
However, given that the main purpose of this appendix is to be a living, changing document, it 
is very important that you look for the latest version online at the book’s companion website. 
To do so:
1.
Browse to http://www.ciscopress.com/title/1587201410. 
2.
Select the Downloads option under the More Information box.

892     Appendix B: CCIE Routing and Switching Exam Updates: Version 1.0
3.
Download the latest “Appendix B” document.
Technical Content
The current version of this appendix does not contain any additional technical coverage. 
However, a completely separate appendix (Appendix C) covers MPLS. At the time of printing, 
MPLS was not on the published Cisco CCIE Routing and Switching written exam blueprint. 
However, because it was being considered as a new topic, we added Appendix C to the book. 
Please check http://www.cisco.com/go/ccie for the latest blueprint, and study Appendix C if 
MPLS has been added.
NOTE
Note that the downloaded document has a version number. Comparing the version 
of this print Appendix B (Version 1.0) with the latest online version of this appendix, you 
should do the following:
■Same version—Ignore the PDF that you downloaded from the companion website.
■Website has a later version—Ignore this Appendix B in your book, and just read the 
latest version that you downloaded from the companion website.



A P P E N D I X C
MPLS 
Cisco continually reviews the content of the various CCIE programs. On occasion, these reviews 
result in the addition or removal of topics on the written and/or practical exams. As of the time 
that this book was going to press, Cisco was considering the addition of MPLS basics back 
into the CCIE R/S written exam. This appendix is included for reference in case Cisco does 
indeed add the topic into the exam.
To know if you should read this appendix, or a more thorough separate book on MPLS, please 
refer to www.cisco.com/go/ccie, and look for the CCIE R/S Written Blueprint. It is also helpful 
to look at their “News and Announcements” section, which is typically where such changes 
are ﬁrst announced.
This appendix is an extract from the very popular, well-written, and thorough book MPLS and 
VPN Architectures, by Ivan Pepelnjak and Jim Guichard. If you are looking for a more thorough 
reference on MPLS, this book would be my best suggestion on a good starting place at which 
to dig in to the topic. This appendix is an extract of all or parts of chapters 1, 2, and 8 from 
this book.
Architecture Overview
Traditional IP packet forwarding analyzes the destination IP address contained in the network 
layer header of each packet as the packet travels from its source to its ﬁnal destination. A router 
analyzes the destination IP address independently at each hop in the network. Dynamic routing 
protocols or static conﬁguration builds the database needed to analyze the destination IP address 
(the routing table). The process of implementing traditional IP routing also is called hop-by-hop 
destination-based unicast routing. Although successful, and obviously widely deployed, certain 
restrictions, which have been realized for some time, exist for this method of packet forwarding 
that diminish its ﬂexibility. New techniques are therefore required to address and expand the 
functionality of an IP-based network infrastructure.
This ﬁrst section concentrates on identifying these restrictions and presents a new architecture, 
known as Multiprotocol Label Switching (MPLS), that provides solutions to some of these 
restrictions. The following section focuses first on the details of the MPLS architecture in a pure 
router environment, and then on the use of MPLS to create VPNs.

896     Appendix C: MPLS
Scalability and Flexibility of IP-Based Forwarding
To understand all the issues that affect the scalability and the ﬂexibility of traditional IP packet 
forwarding networks, you must start with a review of some of the basic IP forwarding mechanisms 
and their interaction with the underlying infrastructure (local- or wide-area networks). With this 
information, you can identify any drawbacks to the existing approach and perhaps provide 
alternative ideas on how this could be improved.
Network Layer Routing Paradigm
Traditional network layer packet forwarding (for example, forwarding of IP packets across the 
Internet) relies on the information provided by network layer routing protocols (for example, Open 
Shortest Path First [OSPF] or Border Gateway Protocol [BGP]), or static routing, to make an 
independent forwarding decision at each hop (router) within the network. The forwarding decision 
is based solely on the destination unicast IP address. All packets for the same destination follow 
the same path across the network if no other equal-cost paths exist. Whenever a router has two 
equal-cost paths toward a destination, the packets toward the destination might take one or both 
of them, resulting in some degree of load sharing.
Routers perform the decision process that selects what path a packet takes. These network layer 
devices participate in the collection and distribution of network-layer information, and perform 
Layer 3 switching based on the contents of the network layer header of each packet. You can 
connect the routers directly by point-to-point links or local-area networks (for example, shared 
hub or MAU), or you can connect them by LAN or WAN switches (for example, Frame Relay or 
ATM switches). These Layer 2 (LAN or WAN) switches unfortunately do not have the capability 
to hold Layer 3 routing information or to select the path taken by a packet through analysis of its 
Layer 3 destination address. Thus, Layer 2 (LAN or WAN) switches cannot be involved in the Layer 3 
packet forwarding decision process. In the case of the WAN environment, the network designer 
has to establish Layer 2 paths manually across the WAN network. These paths then forward Layer 
3 packets between the routers that are connected physically to the Layer 2 network.
LAN Layer 2 paths are simple to establish—all LAN switches are transparent to the devices 
connected to them. The WAN Layer 2 path establishment is more complex. WAN Layer 2 paths 
usually are based on a point-to-point paradigm (for example, virtual circuits in most WAN 
NOTE
Enhanced Interior Gateway Routing Protocol (EIGRP) also supports non–equal-cost 
load sharing although the default behavior of this protocol is equal-cost. You must conﬁgure 
EIGRP variance for non–equal-cost load balancing. Please see EIGRP Network Design 
Solutions (ISBN 1-57870-165-1), from Cisco Press for more details on EIGRP.
Load sharing in Cisco IOS can be performed on a packet-by-packet or source-destination-pair 
basis (with Cisco Express Forwarding [CEF] switching) or on a destination basis (most of the 
other switching methods).

Scalability and Flexibility of IP-Based Forwarding     897
networks) and are established only on request through manual conﬁguration. Any routing device 
(ingress router) at the edge of the Layer 2 network that wants to forward Layer 3 packets to 
any other routing device (egress router) therefore needs to either establish a direct connection 
across the network to the egress device or send its data to a different device for transmission to the 
ﬁnal destination.
Consider, for example, the network shown in Figure C-1.
Figure C-1
Sample IP Network Based on ATM Core
The network illustrated in Figure C-1 is based on an ATM core surrounded by routers that perform 
network layer forwarding. Assuming that the only connections between the routers are the ones 
shown in Figure C-1, all the packets sent from San Francisco to or via Washington must be sent 
to the Dallas router, where they are analyzed and sent back over the same ATM connection in 
Dallas to the Washington router. This extra step introduces delay in the network and unnecessarily 
loads the CPU of the Dallas router as well as the ATM link between the Dallas router and the 
adjacent ATM switch in Dallas.
To ensure optimal packet forwarding in the network, an ATM virtual circuit must exist between 
any two routers connected to the ATM core. Although this might be easy to achieve in small 
networks, such as the one in Figure C-1, you run into serious scalability problems in large 
networks where several tens or even hundreds of routers connect to the same WAN core.
The following facts illustrate the scalability problems you might encounter:
■
Every time a new router is connected to the WAN core of the network, a virtual circuit must 
be established between this router and any other router, if optimal routing is required.
ATM backbone
ATM PVC
San Francisco
core router
ATM switch
San Francisco
ATM switch
Dallas
Dallas
core router
ATM switch
Washington
Washington
core router

898     Appendix C: MPLS
■
With certain routing protocol conﬁgurations, every router attached to the Layer 2 WAN core 
(built with ATM or Frame Relay switches) needs a dedicated virtual circuit to every other 
router attached to the same core. To achieve the desired core redundancy, every router also 
must establish a routing protocol adjacency with every other router attached to the same core. 
The resulting full-mesh of router adjacencies results in every router having a large number of 
routing protocol neighbors, resulting in large amounts of routing trafﬁc. For example, if the 
network runs OSPF or IS-IS as its routing protocol, every router propagates every change in 
the network topology to every other router connected to the same WAN backbone, resulting 
in routing trafﬁc proportional to the square of the number of routers.
■
Provisioning of the virtual circuits between the routers is complex, because it’s very hard to 
predict the exact amount of trafﬁc between any two routers in the network. To simplify the 
provisioning, some service providers just opt for lack of service guarantee in the network—
zero Committed Information Rate (CIR) in a Frame Relay network or Unspeciﬁed Bit Rate 
(UBR) connections in an ATM network.
The lack of information exchange between the routers and the WAN switches was not an issue for 
traditional Internet service providers that used router-only backbones or for traditional service 
providers that provided just the WAN services (ATM or Frame Relay virtual circuits). There are, 
however, several drivers that push both groups toward mixed backbone designs:
■
Traditional service providers are asked to offer IP services. They want to leverage their 
investments and base these new services on their existing WAN infrastructure.
■
Internet service providers are asked to provide tighter quality of service (QoS) guarantees that 
are easier to meet with ATM switches than with traditional routers.
■
The rapid increase in bandwidth requirements prior to the introduction of optical router 
interfaces forced some large service providers to start relying on ATM technology because the 
router interfaces at that time did not provide the speeds offered by the ATM switches.
NOTE
In Frame Relay networks, the entire conﬁguration could be done within the Layer 2 
WAN core and the routers would ﬁnd new neighbors and their Layer 3 protocol addresses 
through the use of LMI and Inverse ARP. This also is possible on an ATM network through 
the use of Inverse ARP, which is enabled by default when a new PVC is added to the 
conﬁguration of the router, and ILMI, which can discover PVCs dynamically that are 
conﬁgured on the local ATM switch.
NOTE
Conﬁguration tools exist in recent Cisco IOS implementations of IS-IS and OSPF 
routing protocols that allow you to reduce the routing protocol trafﬁc in the network. 
Discussing the design and the conﬁguration of these tools is beyond the scope of this book 
(any interested reader should refer to the relevant Cisco IOS conﬁguration guides).

Scalability and Flexibility of IP-Based Forwarding     899
It is clear, therefore, that a different mechanism must be used to enable the exchange of network 
layer information between the routers and the WAN switches and to allow the switches to 
participate in the decision process of forwarding packets so that direct connections between edge 
routers are no longer required.
Differentiated Packet Servicing
Conventional IP packet forwarding uses only the IP destination address contained within the 
Layer 3 header within a packet to make a forwarding decision. The hop-by-hop destination-only 
paradigm used today prevents a number of innovative approaches to network design and trafﬁc-
ﬂow optimization. In Figure C-2, for example, the direct link between the San Francisco core 
router and the Washington core router forwards the trafﬁc entering the network in any of the Bay 
Area Points-of-Presence (POPs), although that link might be congested and the links from San 
Francisco to Dallas and from Dallas to Washington might be only lightly loaded.
Figure C-2
Sample Network that Would Beneﬁt from Trafﬁc Engineering
Although certain techniques exist to affect the decision process, such as Policy Based Routing 
(PBR), no single scalable technique exists to decide on the full path a packet takes across the 
network to its ﬁnal destination. In the network shown in Figure C-2, the policy- based routing must 
be deployed on the San Francisco core router to divert some of the Bay Area to Washington trafﬁc 
toward Dallas. Deploying such features as PBR on core routers could severely reduce the 
performance of a core router and result in a rather unscalable network design. Ideally, the edge 
routers (for example, the Santa Clara POP in Figure C-2) can specify over which core links the 
packets should ﬂow.
NOTE
Several additional issues are associated with policy-based routing. PBR can lead 
easily to forwarding loops as a router conﬁgured with PBR deviates from the forwarding path 
learned from the routing protocols. PBR also is hard to deploy in large networks; if you 
conﬁgure PBR at the edge, you must be sure that all routers in the forwarding path can make 
the same route selection.
OC-3 core
links
San Francisco
core router
Mountain View
POP
San Jose POP
Santa Clara
POP
Dallas
core router
Washington
core router
MAE-East
peering point

900     Appendix C: MPLS
Because most major service providers deploy networks with redundant paths, a requirement 
clearly exists to allow the ingress routing device to be capable of deciding on packet forwarding, 
which affects the path a packet takes across the network, and of applying a label to that packet that 
indicates to other devices which path the packet should take.
This requirement also should allow packets that are destined for the same IP network to take 
separate paths instead of the path determined by the Layer 3 routing protocol. This decision also 
should be based on factors other than the destination IP address of the packet, such as from which 
port the packet was learned, what quality of service level the packet requires, and so on.
Independent Forwarding and Control
With conventional IP packet forwarding, any change in the information that controls the 
forwarding of packets is communicated to all devices within the routing domain. This change 
always involves a period of convergence within the forwarding algorithm.
A mechanism that can change how a packet is forwarded, without affecting other devices within 
the network, certainly is desirable. To implement such a mechanism, forwarding devices (routers) 
should not rely on IP header information to forward the packet; thus, an additional label must 
be attached to a forwarded packet to indicate its desired forwarding behavior. With the packet 
forwarding being performed based on labels attached to the original IP packets, any change within 
the decision process can be communicated to other devices through the distribution of new labels. 
Because these devices merely forward trafﬁc based on the attached label, a change should be able 
to occur without any impact at all on any devices that perform packet forwarding.
External Routing Information Propagation
Conventional packet forwarding within the core of an IP network requires that external routing 
information be advertised to all transit routing devices. This is necessary so that packets can be 
routed based on the destination address that is contained within the network layer header of 
the packet. To continue the example from previous sections, the core routers in Figure C-2 would 
have to store all Internet routes so that they could propagate packets between Bay Area customers 
and a peering point in MAE-East.
NOTE
You might argue that each major service provider also must have a peering point 
somewhere on the West coast. That fact, although true, is not relevant to this discussion 
because you can always ﬁnd a scenario where a core router with no customers or peering 
partners connected to it needs complete routing information to be able to forward IP packets 
correctly.

Multiprotocol Label Switching Introduction     901
This method has scalability implications in terms of route propagation, memory usage, and CPU 
utilization on the core routers, and is not really a required function if all you want to do is pass a 
packet from one edge of the network to another.
A mechanism that allows internal routing devices to switch the packets across the network from 
an ingress router toward an egress router without analyzing network layer destination addresses 
is an obvious requirement.
Multiprotocol Label Switching Introduction
Multiprotocol Label Switching (MPLS) is an emerging technology that aims to address many of 
the existing issues associated with packet forwarding in today’s Internetworking environment. 
Members of the IETF community worked extensively to bring a set of standards to market and 
to evolve the ideas of several vendors and individuals in the area of label switching. The IETF 
document draft-ietf-mpls-framework contains the framework of this initiative and describes the 
primary goal as follows:
The primary goal of the MPLS working group is to standardize a base technology that inte-
grates the label swapping forwarding paradigm with network layer routing. This base tech-
nology (label swapping) is expected to improve the price/performance of network layer 
routing, improve the scalability of the network layer, and provide greater ﬂexibility in the 
delivery of (new) routing services (by allowing new routing services to be added without a 
change to the forwarding paradigm).
The MPLS architecture describes the mechanisms to perform label switching, which combines 
the beneﬁts of packet forwarding based on Layer 2 switching with the beneﬁts of Layer 3 routing. 
Similar to Layer 2 networks (for example, Frame Relay or ATM), MPLS assigns labels to packets 
for transport across packet- or cell-based networks. The forwarding mechanism throughout the 
network is label swapping, in which units of data (for example, a packet or a cell) carry a short, 
ﬁxed-length label that tells switching nodes along the packets path how to process and forward 
the data.
The signiﬁcant difference between MPLS and traditional WAN technologies is the way labels are 
assigned and the capability to carry a stack of labels attached to a packet. The concept of a label 
stack enables new applications, such as Trafﬁc Engineering, Virtual Private Networks, fast 
rerouting around link and node failures, and so on.
NOTE
You can download IETF working documents from the IETF home page (www.ietf.org). 
For MPLS working documents, start at the MPLS home page (www.ietf.org/html.charters/
mpls-charter.html).

902     Appendix C: MPLS
Packet forwarding in MPLS is in stark contrast to today’s connectionless network environment, 
where each packet is analyzed on a hop-by-hop basis, its Layer 3 header is checked, and an 
independent forwarding decision is made based on the information extracted from a network 
layer routing algorithm.
The architecture is split into two separate components: the forwarding component (also called the 
data plane) and the control component (also called the control plane). The forwarding component 
uses a label-forwarding database maintained by a label switch to perform the forwarding of data 
packets based on labels carried by packets. The control component is responsible for creating 
and maintaining label-forwarding information (referred to as bindings) among a group of 
interconnected label switches. Figure C-3 shows the basic architecture of an MPLS node 
performing IP routing.
Figure C-3
Basic Architecture of an MPLS Node Performing IP Routing
Every MPLS node must run one or more IP routing protocols (or rely on static routing) to 
exchange IP routing information with other MPLS nodes in the network. In this sense, every 
MPLS node (including ATM switches) is an IP router on the control plane.
Similar to traditional routers, the IP routing protocols populate the IP routing table. In traditional 
IP routers, the IP routing table is used to build the IP forwarding cache (fast switching cache in 
Cisco IOS) or the IP forwarding table (Forwarding Information Base [FIB] in Cisco IOS) used by 
Cisco Express Forwarding (CEF).
IP routing protocols
IP routing table
MPLS IP routing control
Control plane in a node
Label Forwarding Table
Data plane in a node
Incoming labeled
packets
Outgoing labeled
packets
Label binding
exchange with other routers
Routing information
exchange with other routers

Multiprotocol Label Switching Introduction     903
In an MPLS node, the IP routing table is used to determine the label binding exchange, where 
adjacent MPLS nodes exchange labels for individual subnets that are contained within the IP 
routing table. The label binding exchange for unicast destination-based IP routing is performed 
using the Cisco proprietary Tag Distribution Protocol (TDP) or the IETF-speciﬁed Label 
Distribution Protocol (LDP).
The MPLS IP Routing Control process uses labels exchanged with adjacent MPLS nodes to build 
the Label Forwarding Table, which is the forwarding plane database that is used to forward labeled 
packets through the MPLS network.
MPLS Architecture—The Building Blocks
As with any new technology, several new terms are introduced to describe the devices that make 
up the architecture. These new terms describe the functionality of each device and their roles 
within the MPLS domain structure.
The ﬁrst device to be introduced is the Label Switch Router (LSR). Any router or switch that 
implements label distribution procedures and can forward packets based on labels falls under this 
category. The basic function of label distribution procedures is to allow an LSR to distribute its 
label bindings to other LSRs within the MPLS network. (The “Frame-Mode MPLS Operation” 
section discusses label distribution procedures in detail.) Several different types of LSR exist that 
are differentiated by what functionality they provide within the network infrastructure. These 
different types of LSR are described within the architecture as Edge-LSR, ATM-LSR, and ATM 
edge-LSR. The distinction between various LSR types is purely architectural—a single box can 
serve several of the roles.
An Edge-LSR is a router that performs either label imposition (sometimes also referred to as push 
action) or label disposition (also called pop action) at the edge of the MPLS network. Label 
imposition is the act of prepending a label, or a stack of labels, to a packet in the ingress point (in 
respect of the trafﬁc ﬂow from source to destination) of the MPLS domain. Label disposition is 
the reverse of this and is the act of removing the last label from a packet at the egress point before 
it is forwarded to a neighbor that is outside the MPLS domain.
Any LSR that has any non-MPLS neighbors is considered an Edge-LSR. However, if that LSR 
has any interfaces that connect through MPLS to an ATM-LSR, then it also is considered to be an 
ATM edge-LSR. Edge-LSRs use a traditional IP forwarding table, augmented with labeling 
information, to label IP packets or to remove labels from labeled packets before sending them to 
non-MPLS nodes. Figure C-4 shows the architecture of an Edge-LSR.
An Edge-LSR extends the MPLS node architecture from Figure C-3 with additional components 
in the data plane. The standard IP forwarding table is built from the IP routing table and is 

904     Appendix C: MPLS
extended with labeling information. Incoming IP packets can be forwarded as pure IP packets to 
non-MPLS nodes or can be labeled and sent out as labeled packets to other MPLS nodes. The 
incoming labeled packets can be forwarded as labeled packets to other MPLS nodes. For labeled 
packets destined for non-MPLS nodes, the label is removed and a Layer 3 lookup (IP forwarding) 
is performed to ﬁnd the non-MPLS destination.
Figure C-4
Architecture of an Edge-LSR
An ATM-LSR is an ATM switch that can act as an LSR. The Cisco Systems, Inc. LS1010 and 
BPX family of switches are examples of this type of LSR. The ATM-LSR performs IP routing 
and label assignment in the control plane and forwards the data packets using traditional ATM 
cell switching mechanisms on the data plane. In other words, the ATM switching matrix of 
an ATM switch is used as a Label Forwarding Table of an MPLS node. Traditional ATM 
switches, therefore, can be redeployed as ATM-LSRs through a software upgrade of their 
control component.
Table C-1 summarizes the functions performed by different LSR types. Please note that any 
individual device in the network can perform more than one function (for example, it can be Edge-
LSR and ATM edge-LSR at the same time).
IP routing protocols
IP routing table
MPLS IP routing control
Control panel in a node
Label Forwarding Table
Data plane in a node
Incoming labeled
packets
Outgoing labeled
packets
Label binding
exchange with other routers
Routing information
exchange with other routers
IP Forwarding Table
Incoming IP
packets
Outgoing IP
packets
Label removal and
subsequent L3 lookup

Multiprotocol Label Switching Introduction     905
Label Imposition at the Network Edge
Label imposition has been described already as the act of prepending a label to a packet as it enters 
the MPLS domain. This is an edge function, which means that packets are labeled before they are 
forwarded to the MPLS domain.
To perform this function, an Edge-LSR needs to understand where the packet is headed and which 
label, or stack of labels, it should assign to the packet. In conventional Layer 3 IP forwarding, each 
hop in the network performs a lookup in the IP forwarding table for the IP destination address 
contained in the Layer 3 header of the packet. It selects a next hop IP address for the packet at each 
iteration of the lookup and eventually sends the packet out of an interface toward its ﬁnal destination.
Choosing the next hop for the IP packet is a combination of two functions. The ﬁrst function 
partitions the entire set of possible packets into a set of IP destination preﬁxes. The second function 
Table C-1
Actions Performed by Various LSR Types 
LSR Type
Actions Performed by This LSR Type
LSR
Forwards labeled packets.
Edge-LSR
Can receive an IP packet, perform Layer 3 lookups, and 
impose a label stack before forwarding the packet into the 
LSR domain.
Can receive a labeled packet, remove labels, perform 
Layer 3 lookups, and forward the IP packet toward its 
next-hop.
ATM-LSR
Runs MPLS protocols in the control plane to set up ATM 
virtual circuits. Forwards labeled packets as ATM cells.
ATM edge-LSR
Can receive a labeled or unlabeled packet, segment it into 
ATM cells, and forward the cells toward the next-hop 
ATM-LSR.
Can receive ATM cells from an adjacent ATM-LSR, 
reassemble these cells into the original packet, and then 
forward the packet as a labeled or unlabeled packet.
NOTE
Some forwarding mechanisms, such as CEF, allow the router to associate each 
destination preﬁx known in the routing table to the adjacent next-hop of the destination 
preﬁx, thus solving the recursive lookup problem. The whole recursion is resolved while 
the router populates the cache or the forwarding table and not when it has to forward 
packets.

906     Appendix C: MPLS
maps each IP destination preﬁx to an IP next hop address. This means that each destination in the 
network is reachable by one path in respect to trafﬁc ﬂow from one ingress device to the destination 
egress device (multiple paths might be available if load balancing is performed using equal-cost 
paths or unequal-cost paths as with some IGP protocols, such as Enhanced IGRP).
Within the MPLS architecture, the results of the ﬁrst function are known as Forwarding 
Equivalence Classes (FECs). These can be visualized as describing a group of IP packets that 
are forwarded in the same manner, over the same path, with the same forwarding treatment.
With conventional IP forwarding, the previously described packet processing is performed at 
each hop in the network. However, when MPLS is introduced, a particular packet is assigned to 
a particular FEC just once, and this is at the edge device as the packet enters the network. The 
FEC to which the packet is assigned is then encoded as a short ﬁxed-length identiﬁer, known 
as a label.
When a packet is forwarded to its next hop, the label is prepended already to the IP packet so that 
the next device in the path of the packet can forward it based on the encoded label rather than 
through the analysis of the Layer 3 header information. Figure C-5 illustrates the whole process 
of label imposition and forwarding.
MPLS Packet Forwarding and Label Switched Paths
Each packet enters an MPLS network at an ingress LSR and exits the MPLS network at an egress 
LSR. This mechanism creates what is known as an Label Switched Path (LSP), which essentially 
describes the set of LSRs through which a labeled packet must traverse to reach the egress LSR 
for a particular FEC. This LSP is unidirectional, which means that a different LSP is used for 
return trafﬁc from a particular FEC.
NOTE
A Forwarding Equivalence Class might correspond to a destination IP subnet, 
but also might correspond to any trafﬁc class that the Edge-LSR considers signiﬁcant. For 
example, all interactive trafﬁc toward a certain destination or all trafﬁc with a certain value 
of IP precedence might constitute an FEC. As another example, an FEC can be a subset of the 
BGP table, including all destination preﬁxes reachable through the same exit point (egress 
BGP router).
NOTE
The actual packet forwarding between the Washington and MAE-East routers might 
be slightly different from the one shown in Figure C-5 due to a mechanism called penultimate 
hop popping (PHP). Penultimate hop popping arguably might improve the switching 
performance, but does not impact the logic of label switching. The next section covers this 
mechanism and its implications.

Multiprotocol Label Switching Introduction     907
Figure C-5
MPLS Label Imposition and Forwarding
The creation of the LSP is a connection-oriented scheme because the path is set up prior to any 
trafﬁc ﬂow. However, this connection setup is based on topology information rather than a 
requirement for trafﬁc ﬂow. This means that the path is created regardless of whether any trafﬁc 
actually is required to ﬂow along the path to a particular set of FECs.
As the packet traverses the MPLS network, each LSR swaps the incoming label with an outgoing 
label, much like the mechanism used today within ATM where the VPI/VCI is swapped to a 
different VPI/VCI pair when exiting the ATM switch. This continues until the last LSR, known as 
the egress LSR, is reached.
Each LSR keeps two tables, which hold information that is relevant to the MPLS forwarding 
component. The ﬁrst, known in Cisco IOS as the Tag Information Base (TIB) or Label Information 
Base (LIB) in standard MPLS terms, holds all labels assigned by this LSR and the mappings of 
these labels to labels received from any neighbors. These label mappings are distributed through 
the use of label-distribution protocols, which The next section discusses in more detail.
Just as multiple neighbors can send labels for the same IP preﬁx but might not be the actual IP next 
hop currently in use in the routing table for the destination, not all the labels within the TIB/LIB 
San Francisco
core router
Mountain View
POP
San Jose POP
Santa Clara
POP
Dallas
core router
Washington
core router
MAE-East
peering point
IP Packet
IP Packet
L1
IP Packet
L2
IP Packet
L3
IP Packet
Step #1 - IP packet arrives
at the San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label,
and forwards the packet toward
San Francisco router.
Step #4 - Washington router
does label lookup, swaps labels,
and forwards the packet toward
the MAE-East router.
Step #3 - San Francisco router
does label lookup, swaps labels,
and forwards the packet toward
the Washington router.
Step #5 - MAE-East router does
label lookup, pops the label,
does Layer 3 lookup, and
forwards the packet toward
the external next-hop router.

908     Appendix C: MPLS
need to be used for packet forwarding. The second table, known in Cisco IOS as the Tag 
Forwarding Information Base (TFIB) or Label Forwarding Information Base (LFIB) in MPLS 
terms, is used during the actual forwarding of packets and holds only labels that are in use 
currently by the forwarding component of MPLS.
Using Cisco IOS terms and Cisco Express Forwarding (CEF) terminology, the Edge-LSR 
architecture in Figure C-4  can be redrawn as shown in Figure C-6 (Edge-LSR was chosen because 
its function is a superset of non–Edge-LSR).
Figure C-6
Edge-LSR Architecture Using Cisco IOS Terms
Other MPLS Applications
The MPLS architecture, as discussed so far, enables the smooth integration of traditional routers and ATM 
switches in a uniﬁed IP backbone (IP+ATM architecture). The real power of MPLS, however, lies in other 
applications that were made possible, ranging from trafﬁc engineering to peer-to-peer Virtual Private 
Networks. All MPLS applications use control-plane functionality similar to the IP routing control plane 
shown in Figure C-6 to set up the label switching database. Figure C-7 outlines the interaction between 
these applications and the label-switching matrix.
NOTE
Label Forwarding Information Base is the MPLS equivalent of the switching matrix of 
an ATM switch.
IP routing protocols
IP routing table
MPLS IP routing control
Control panel in a node
Tag Forwarding
Information Base (TFIB)
Data plane in a node
Label binding
exchange with other routers
Routing information
exchange with other routers
Forwarding Information
Base (FIB)
Tag Information
Base (TIB)

Other MPLS Applications     909
Figure C-7
Various MPLS Applications and Their Interactions
Every MPLS application has the same set of components as the IP routing application:
■
A database deﬁning the Forward Equivalence Classes (FECs) table for the application (the 
IP routing table in an IP routing application)
■
Control protocols that exchange the contents of the FEC table between the LSRs (IP routing 
protocols or static routing in an IP routing application)
■
Control process that performs label binding to FECs and a protocol to exchange label 
bindings between LSRs (TDP or LDP in an IP routing application)
■
Optionally, an internal database of FEC-to-label mapping (Label Information Base in an 
IP routing application)
Each application uses its own set of protocols to exchange FEC table or FEC-to-label mapping 
between nodes. Table C-2 summarizes the protocols and the data structures.
Table C-2
Control Protocols Used in Various MPLS Applications 
Application
FEC Table
Control Protocol 
Used to Build FEC 
Table
Control Protocol 
Used to Exchange 
FEC-to-Label 
Mapping
IP routing
IP routing table
Any IP routing protocol
Tag Distribution Protocol 
(TDP) or Label 
Distribution Protocol 
(LDP)
Multicast IP routing
Multicast routing table
PIM
PIM version 2 extensions
continues
Control panel in a node
Data plane in a node
Label Forwarding
Information Base
MPLS IP
routing control
MPLS
Multicast IP
routing control
MPLS/VPN
routing control
MPLS Traffic
Engineering
control
MPLS Quality
of Service
control

910     Appendix C: MPLS
Summary: Architecture Overview
Traditional IP routing has several well-known limitations, ranging from scalability issues to poor 
support of trafﬁc engineering and poor integration with Layer 2 backbones already existing in 
large service provider networks. With the rapid growth of the Internet and the establishment of IP 
as the Layer 3 protocol of choice in most environments, the drawbacks of traditional IP routing 
became more and more obvious.
MPLS was created to combine the beneﬁts of connectionless Layer 3 routing and forwarding with 
connection-oriented Layer 2 forwarding. MPLS clearly separates the control plane, where Layer 3 
routing protocols establish the paths used for packet forwarding, and the data plane, where Layer 2 
label switched paths forward data packets across the MPLS infrastructure. MPLS also simpliﬁes 
per-hop data forwarding, where it replaces the Layer 3 lookup function performed in traditional 
routers with simpler label swapping. The simplicity of data plane packet forwarding and its 
similarity to existing Layer 2 technologies enable traditional WAN equipment (ATM or Frame 
Relay switches) to be redeployed as MPLS nodes (supporting IP routing in the control plane) just 
with software upgrades to their control plane.
The control component in the MPLS node uses its internal data structure to identify potential trafﬁc 
classes (also called Forward Equivalence Classes). A protocol is used between control components 
in MPLS nodes to exchange the contents of the FEC database and the FEC-to-label mapping. The 
FEC table and FEC-to-label mapping is used in Edge- LSRs to label ingress packets and send them 
into the MPLS network. The Label Forwarding Information Base (LFIB) is built within each MPLS 
node based on the contents of the FEC tables and the FEC-to-label mapping exchanged between 
the nodes. The LFIB then is used to propagate labeled packets across the MPLS network, similar 
to the function performed by an ATM switching matrix in the ATM switches.
Application
FEC Table
Control Protocol 
Used to Build FEC 
Table
Control Protocol 
Used to Exchange 
FEC-to-Label 
Mapping
VPN routing
Per-VPN routing table
Most IP routing protocols 
between service provider 
and customer, 
Multiprotocol BGP inside 
the service provider 
network
Multiprotocol BGP
Trafﬁc engineering
MPLS tunnels deﬁnition
Manual interface 
deﬁnitions, extensions to 
IS-IS or OSPF
RSVP or CR-LDP
MPLS Quality of Service
IP routing table
IP routing protocols
Extensions to TDP LDP
Table C-2
Control Protocols Used in Various MPLS Applications (Continued)

Frame-Mode MPLS Operation     911
The MPLS architecture is generic enough to support other applications besides IP routing. The 
simplest additions to the architecture are the IP multicast routing and quality of service extensions. 
The MPLS connection-oriented forwarding mechanism together with Layer 2 label-based look 
ups in the network core also has enabled a range of novel applications, from Trafﬁc Engineering 
to real peer-to-peer Virtual Private Networks.
Frame-Mode MPLS Operation
In the ﬁrst section of this appendix you saw the overall MPLS architecture as well as the 
underlying concepts. This chapter focuses on one particular application: unicast destination-based 
IP routing in a pure router environment (also called Frame-mode MPLS because the labeled 
packets are exchanged as frames on Layer 2). 
This section ﬁrst focuses on the MPLS data plane, assuming that the labels were somehow agreed 
upon between the routers. The next section explains the exact mechanisms used to distribute the 
labels between the routers, and the last section covers the interaction between label distribution 
protocols, the Interior Gateway Protocol (IGP), and the Border Gateway Protocol (BGP) in a 
service provider network.
Throughout this section, we refer to the generic architecture of an MPLS Label Switch router 
(LSR), as shown in Figure C-8, and use the sample service provider network (called SuperNet) 
shown in Figure C-9 for any conﬁguration or debugging printouts.
The SuperNet network uses unnumbered serial links based on loopback interfaces that have 
IP addresses from Table C-3.
Table C-3
Loopback Addresses in the SuperNet Network
Router
Loopback Interface
San Jose
172.16.1.1/32
Mountain View
172.16.1.2/32
Santa Clara
172.16.1.3/32
San Francisco
172.16.1.4/32
Dallas
172.16.2.1/32
Washington
172.16.3.1/32
New York
172.16.3.2/32
MAE-East
172.16.4.1/32

912     Appendix C: MPLS
Figure C-8
Edge-LSR Architecture
Figure C-9
SuperNet Service Provider Network
Control plane in a node
Data plane in a node
Label Forwarding
Information Base (LFIB)
MPLS IP routing control
IP routing table
IP routing protocols
Routing information
exchange with other routers
Label binding
exchange with other routers
Forwarding Information
Base (FIB)
Label Information Base
(LIB)
San Jose POP
Mountain View
POP
Santa Clara
POP
San Francisco
core router
Dallas
core router
Washington
core router
New York POP
MAE-East
peering point

Frame-Mode MPLS Data Plane Operation     913
Frame-Mode MPLS Data Plane Operation
There are three major steps in the propagation of an IP packet across an MPLS backbone.
■
The Ingress Edge-LSR receives an IP packet, classiﬁes the packet into a forward equivalence 
class (FEC), and labels the packet with the outgoing label stack corresponding to the FEC. 
For unicast destination-based IP routing, the FEC corresponds to a destination subnet and the 
packet classiﬁcation is a traditional Layer 3 lookup in the forwarding table.
■
Core LSRs receive this labeled packet and use label forwarding tables to exchange the 
inbound label in the incoming packet with the outbound label corresponding to the same FEC 
(IP subnet, in this case).
■
When the Egress Edge-LSR for this particular FEC receives the labeled packet, it removes the 
label and performs a traditional Layer 3 lookup on the resulting IP packet.
Figure C-10 shows these steps being performed in the SuperNet network for a packet traversing 
the network from the San Jose POP toward a customer attached to the NewYork POP.
Figure C-10
Packet Forwarding Between San Jose POP and New York Customer
The San Jose POP router receives an IP packet with the destination address of 192.168.2.2 and 
performs a traditional Layer 3 lookup through the IP forwarding table (also called Forwarding 
Information Base [FIB]).
IP Packet
d=192.168.2.2
IP Packet
30
IP Packet
28
IP Packet
37
IP Packet
New York 
POP
MAE-East
peering point
Step #5 - New York POP router
does label lookup, pops the
label, does Layer 3 lookup, and
forwards the packet toward
external next-hop router.
Washington
core router
Dallas
core router
Step #3 - San Francisco router
does label lookup, swaps labels,
and forwards the packet toward
the Washington router.
San Francisco
core router
Mountain View
POP
Santa Clara
POP
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label,
and forwards the packet toward
the San Francisco router.
Step #4 - Washington router
does label lookup, swaps labels,
and forwards the packet toward
the New York POP router.

914     Appendix C: MPLS
The entry in the FIB (shown in Example C-1) indicates that the San Jose POP router should 
forward the IP packet it just received as a labeled packet. Thus, the San Jose router imposes the 
label “30” into the packet before it’s forwarded to the San Francisco router, which brings up 
the ﬁrst question: Where is the label imposed and how does the San Francisco router know that the 
packet it received is a labeled packet and not a pure IP packet?
MPLS Label Stack Header
For various reasons, switching performance being one, the MPLS label must be inserted in front 
of the labeled data in a frame-mode implementation of the MPLS architecture. The MPLS label 
thus is inserted between the Layer 2 header and the Layer 3 contents of the Layer 2 frame, as 
displayed in Figure C-11.
Figure C-11
Position of the MPLS Label in a Layer 2 Frame
NOTE
Because Cisco Express Forwarding (CEF) is the only Layer 3 switching mechanism 
that uses the FIB table, CEF must be enabled in all the routers running MPLS and all the ingress 
interfaces receiving unlabeled IP packets that are propagated as labeled packets across an MPLS 
backbone must support CEF switching.
The core routers do not perform CEF switching—they just switch labeled packets—but they still 
must have CEF enabled globally for label allocation purposes.
Example C-1
CEF Entry in the San Jose POP Router
SanJose#sssshhhhoooowwww    iiiipppp    cccceeeeffff    111199992222....111166668888....2222....0000
192.168.2.0/24, version 11, cached adjacency to Serial1/0/1
0 packets, 0 bytes
  tag information set
    local tag: 29
    fast tag rewrite with Se1/0/1, point2point, tags imposed: {30}
  via 172.16.1.4, Serial1/0/1, 0 dependencies
    next hop 172.16.1.4, Serial1/0/1
    valid cached adjacency
    tag rewrite with Se1/0/1, point2point, tags imposed: {30}
Unlabeled IP packet in
Layer 2 frame
Labeled IP packet in
Layer 2 frame
Layer 2 frame
Layer 2 frame
Layer 3 data (IP packet)
Layer 3 data (IP packet)
Layer 2 header
MPLS label
(shim header)
Layer 2 header

Frame-Mode MPLS Data Plane Operation     915
Due to the way an MPLS label is inserted between the Layer 3 packet and the Layer 2 header, 
the MPLS label header also is called the shim header. The MPLS label header (detailed in 
Figure C-12) contains the MPLS label (20 bits), the class-of-service information (three bits, also 
called experimental bits, in the IETF MPLS documentation), and the eight-bit Time-to-Live 
(TTL) ﬁeld (which has the identical functions in loop detection as the IP TTL ﬁeld) and one bit 
called the Bottom-of-Stack bit.
Figure C-12
MPLS Label Stack Header
The Bottom-of-Stack bit implements an MPLS label stack, which is deﬁned as a combination of 
two or more label headers attached to a single packet. Simple unicast IP routing does not use the 
label stack, but other MPLS applications, including MPLS-based Virtual Private Networks or 
MPLS Trafﬁc Engineering, rely heavily on it.
With the MPLS label stack header being inserted between the Layer 2 header and the Layer 3 
payload, the sending router must have some means to indicate to the receiving router that the 
packet being transmitted is not a pure IP datagram but a labeled packet (an MPLS datagram). To 
facilitate this, new protocol types were deﬁned above Layer 2 as follows:
■
In LAN environments, labeled packets carrying unicast and multicast Layer 3 packets use 
ethertype values 8847 hex and 8848 hex. These ethertype values can be used directly on 
Ethernet media (including Fast Ethernet and Gigabit Ethernet) as well as part of the SNAP 
header on other LAN media (including Token Ring and FDDI).
■
On point-to-point links using PPP encapsulation, a new Network Control Protocol (NCP) 
called MPLS Control Protocol (MPLSCP) was introduced. MPLS packets are marked with 
PPP Protocol ﬁeld value 8281 hex.
■
MPLS packets transmitted across a Frame Relay DLCI between a pair of routers are 
marked with Frame Relay SNAP Network Layer Protocol ID (NLPID), followed by a SNAP 
header with type ethertype value 8847 hex.
■
MPLS packets transmitted between a pair of routers over an ATM Forum virtual circuit 
are encapsulated with a SNAP header that uses ethertype values equal to those used in the 
LAN environment.
Figure C-13 shows the summary of all the MPLS encapsulation techniques.
0
1
2
3
0  1  2  3  4  5  6  7  8  9 0  1  2  3  4  5  6  7  8  9 0  1  2  3  4  5  6  7  8  9 0  1  
T T L
E x p
L a b e l
S

916     Appendix C: MPLS
Figure C-13
Summary of MPLS Encapsulation Techniques
The San Jose router in the example shown in Figure C-10 inserts the MPLS label in front of the 
IP packet just received, encapsulates the labeled packet in a PPP frame with a PPP Protocol ﬁeld 
value of 8281 hex, and forwards the Layer 2 frame toward the San Francisco router.
Label Switching in Frame-Mode MPLS
After receiving the Layer 2 PPP frame from the San Jose router, the San Francisco router 
immediately identiﬁes the received packet as a labeled packet based on its PPP Protocol ﬁeld value 
and performs a label lookup in its Label Forwarding Information Base (LFIB).
The LFIB entry corresponding to inbound label 30 (and displayed in Example C-2) directs the San 
Francisco router to replace the label 30 with an outbound label 28 and to propagate the packet 
toward the Washington router. 
NOTE
LFIB also is called Tag Forwarding Information Base (TFIB) in older Cisco 
documentation.
Example C-2
LFIB Entry for Label 30 in the San Francisco Router
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg    ffffoooorrrrwwwwaaaarrrrddddiiiinnnngggg----ttttaaaabbbblllleeee    ttttaaaaggggssss    33330000    ddddeeeettttaaaaiiiillll
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop tag    tag or VC   or 
  Tunnel Id      switched   interface
30     28          192.168.2.0/24    0          Se0/0/1    172.16.3.1
        MAC/Encaps=14/18, MTU=1504, Tag Stack{28}
        00107BB59E2000107BEC6B008847 0001C000
    Per-packet load-sharing
Packet over SONET/SDH
Ethernet similar
Frame Relay PVCs: similar
Label over ATM PVCs
(subsequent cells)
ATM label switching
(subsequent cells)
PPP Header
Layer 3 Header
Data
Label
Label
Ethernet Hdr
Layer 3 Header
Data
Label
Frame Rly Hdr
Layer 3 Header
Data
Label
ATM Header
Layer 3 Header
Data
ATM Header
Data
Data
Layer 3 Header
GFC
VPI
VCI
PTI CLP
HEC
Data
GFC
VPI
VCI
PTI CLP
HEC
Label
Label

Frame-Mode MPLS Data Plane Operation     917
The labeled packet is propagated in a similar fashion across the SuperNet backbone until it reaches 
the NewYork POP, where the LFIB entry tells the NewYork router to pop the label and forward 
the unlabeled packet (see Example C-3).
A Cisco router running Cisco IOS software and operating as an MPLS LSR in Frame-mode MPLS 
can perform a number of actions on a labeled packet:
■
Pop tag—Removes the top label in the MPLS label stack and propagates the remaining 
payload as either a labeled packet (if the Bottom-of-Stack bit is zero) or as an unlabeled IP 
packet (the Tag Stack ﬁeld in the LFIB is empty).
■
Swap tag—Replaces the top label in the MPLS label stack with another value (the Tag Stack 
ﬁeld in the LFIB is one label long)
■
Push tag—Replaces the top label in the MPLS label stack with a set of labels (the Tag Stack 
ﬁeld in the LFIB contains several labels).
■
Aggregate—Removes the top label in the MPLS label stack and does a Layer 3 lookup on 
the underlying IP packet. The removed label is the bottom label in the MPLS label stack; 
otherwise, the datagram is discarded.
■
Untag—Removes the top label in the MPLS label stack and forwards the underlying IP 
packet to the speciﬁed IP next-hop. The removed label is the bottom label in the MPLS label 
stack; otherwise, the datagram is discarded.
MPLS Label Switching with Label Stack
The label switching operation is performed in the same way regardless of whether the labeled 
packet contains only one label or a label stack several labels deep. In both cases, the LSR 
switching the packet acts only on the top label in the stack, ignoring the other labels. This function 
enables a variety of MPLS applications where the edge routers can agree on packet classiﬁcation 
rules and associated labels without knowledge of the core routers. For example, assume that the 
San Jose router and the New York router in the SuperNet network support MPLS-based Virtual 
Private Networks and that they have agreed that network 10.1.0.0/16, which is reachable through 
the New York router, is assigned a label value of 73. The core routers in the SuperNet network 
(San Francisco and Washington) are not aware of this.
Example C-3
LFIB Entry in the New York Router
NewYork#sssshhhhoooowwww    ttttaaaagggg    ffffoooorrrrwwwwaaaarrrrddddiiiinnnngggg----ttttaaaabbbblllleeee    ttttaaaaggggssss    33337777    ddddeeeettttaaaaiiiillll
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop tag    tag or VC   or 
  Tunnel Id      switched   interface
37     untagged       192.168.2.0/24 0          Se2/1/3    192.168.2.1
        MAC/Encaps=0/0, MTU=1504, Tag Stack{}
    Per-packet load-sharing

918     Appendix C: MPLS
To send a packet to a destination host in network 10.1.0.0/16, the San Jose router builds a label 
stack. The bottom label in the stack is the label agreed upon with the NewYork router, and the top 
label in the stack is the label assigned to the IP address of the NewYork router by the San Francisco 
router. When the network propagates the packet (as displayed in Figure C-14), the top label is 
switched exactly like in the example where a pure IP packet was propagated across the backbone 
and the second label in the stack reaches the New York router intact.
Figure C-14
Label Switching with the MPLS Label Stack
Label Bindings and Propagation in Frame-Mode MPLS
The previous section identiﬁes the mechanisms necessary to forward labeled packets between the 
LSRs using framed interfaces (LAN, point-to-point links, or WAN virtual circuits). This section 
focuses on FEC-to-label bindings and their propagation between LSRs over framed interfaces.
Cisco IOS software implements two label binding protocols that can be used to associate IP 
subnets with MPLS labels for the purpose of unicast destination-based routing:
■
Tag Distribution Protocol (TDP)—Cisco’s proprietary protocol available in IOS software 
release 11.1CT, as well as 12.0 and all subsequent IOS releases
■
Label Distribution Protocol (LDP)—IETF standard label binding protocol available in 
12.2T release
TDP and LDP functionally are equivalent and can be used concurrently within the network, even 
on different interfaces of the same LSR. Due to their functional equivalence, this section shows 
only TDP debugging and monitoring commands.
IP Packet
d=10.1.13.17
IP Packet
73
IP Packet
73
IP Packet
73
IP Packet
New York
POP
MAE-East
peering point
Step #5 - New York POP router
does label lookup, pops the
label, does another label lookup, 
and forwards the packet toward
external next-hop router.
Washington
core router
Dallas
core router
Step #3 - San Francisco router
does label lookup, swaps top label,
and forwards the packet toward
the Washington router.
San Francisco
core router
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label stack,
and forwards the packet toward
the San Francisco router.
Step #4 - Washington router
does label lookup, swaps top label,
and forwards the packet toward
the New York POP router.
Second label in the stack was
assigned by New York router.
Top label in the stack was
assigned by San Francisco router.
30
28
37

Label Bindings and Propagation in Frame-Mode MPLS     919
To start MPLS packet labeling for unicast IP packets and associated protocols on an interface, use 
the commands in Table C-4.
LDP/TDP Session Establishment
When you start MPLS on the ﬁrst interface in a router, the TDP/LDP process is started and the 
Label Information Base (LIB) structure is created. The router also tries to discover other LSRs on 
the interfaces running MPLS through TDP hello packets. The TDP hello packets are sent as 
broadcast or multicast UDP packets, making LSR neighbor discovery automatic. The debug tag 
tdp transport command can monitor the TDP hellos. Example C-4 shows the TDP process startup 
and Example C-5 illustrates the successful establishment of a TDP adjacency. 
Table C-4
IOS Conﬁguration Commands Used to Start MPLS on an Interface
Task
IOS Command
Start MPLS packet labeling and run TDP on 
the speciﬁed interface.
tag-switching ip
Start MPLS packet labeling on the speciﬁed 
interface. TDP is used as the default label 
distribution protocol. Note: This command is 
equivalent to the tag-switching ip command.
mpls ip
Select the label distribution protocol on the 
speciﬁed interface.
mpls label-distribution [ ldp | tdp |both ]
NOTE
The debug mpls commands replace the debug tag commands in IOS images with 
LDP support.
Example C-4
TDP Startup After the First Interface Is Conﬁgured for MPLS
SanFrancisco#ddddeeeebbbbuuuugggg    ttttaaaagggg    ttttddddpppp    ttttrrrraaaannnnssssppppoooorrrrtttt    TTTTDDDDPPPP
transport
 events
 debugging
 is
 on
SanFrancisco#conf t
Enter configuration commands, one per line.  End with CNTL/Z.
SanFrancisco(config)#interface serial 1/0/1
SanFrancisco(config-subif)#tag-switching ip
1d20h: enabling tdp on Serial1/0/1
1d20h: tdp: 1<tdp_start: tdp_process_ptr = 0x80B7826C
1d20h: tdp: tdp_set_intf_id: intf 0x80E49B74, Serial1/0/1, not tc-atm, intf_id 0
1d20h: enabling tdp on Serial1/0/1
1d20h: tdp: Got TDP Id
1d20h: tdp: Got TDP TCP Listen socket
1d20h: tdp: tdp_hello_process tdp inited
1d20h: tdp: tdp_hello_process start hello for Serial1/0/1
1d20h: tdp: Got TDP UDP socket

920     Appendix C: MPLS
There also might be cases where an adjacent LSR wants to establish an LDP or TDP session with 
the LSR under consideration, but the interface connecting the two is not conﬁgured for MPLS due 
to security or other administrative reasons. In such a case, the debugging printout similar to the 
printout shown in Example C-6 indicates ignored hello packets being received through interfaces 
on which MPLS is not conﬁgured.
After the TDP hello process discovers a TDP neighbor, a TDP session is established with the 
neighbor. TDP sessions are run on the well-known TCP port 711; LDP uses TCP port 646. TCP 
is used as the transport protocol (similar to BGP) to ensure reliable information delivery. Using 
TCP as the underlying transport protocol also results in excellent ﬂow control properties and 
good adjustments to interface congestion conditions. Example C-7 shows the TDP session 
establishment.
After a TDP session is established, it’s monitored constantly with TDP keepalive packets to ensure 
that it’s still operational. Example C-8 shows the TDP keepalive packets.
The TDP neighbors and the status of individual TDP sessions also can be monitored with show 
tag tdp neighbor command, as shown in Example C-9. This printout was taken at the moment 
when the San Jose router was the only TDP neighbor of the San Francisco router.
Example C-5
TDP Neighbor Discovery
1d20h: tdp: Send hello; Serial1/0/1, src/dst 172.16.1.4/255.255.255.255, inst_id 0
1d20h: tdp: Rcvd hello; Serial1/0/1, from 172.16.1.1 (172.16.1.1:0), intf_id 0, opt
  0x4
1d20h: tdp: Hello from 172.16.1.1 (172.16.1.1:0) to 255.255.255.255, opt 0x4
Example C-6
Ignored TDP Hello
1d20h: tdp: Ignore Hello from 172.16.3.1, Serial0/0/1; no intf
Example C-7
TDP Session Establishment
1d20h: tdp: New adj 0x80EA92D4 from 172.16.1.1 (172.16.1.1:0), Serial1/0/1
1d20h: tdp: Opening conn; adj 0x80EA92D4, 172.16.1.4 <-> 172.16.1.1
1d20h: tdp: Conn is up; adj 0x80EA92D4, 172.16.1.4:11000 <-> 172.16.1.1:711
1d20h: tdp: Sent open PIE to 172.16.1.1 (pp 0x0)
1d20h: tdp: Rcvd open PIE from 172.16.1.1 (pp 0x0)
Example C-8
TDP Keepalives
1d20h: tdp: Sent keep_alive PIE to 172.16.1.1:0 (pp 0x0)
1d20h: tdp: Rcvd keep_alive PIE from 172.16.1.1:0 (pp 0x0)

Label Bindings and Propagation in Frame-Mode MPLS     921
The command displays the TDP identiﬁers of the local and remote routers, the IP addresses and 
the TCP port numbers between which the TDP connection is established, the connection uptime 
and the interfaces through which the TDP neighbor was discovered, as well as all the interface IP 
addresses used by the TDP neighbor.
Label Binding and Distribution
As soon as the Label Information Base (LIB) is created in a router, a label is assigned to every 
Forward Equivalence Class known to the router. For unicast destination-based routing, the FEC is 
equivalent to an IGP preﬁx in the IP routing table. Thus, a label is assigned to every preﬁx in the 
IP routing table and the mapping between the two is stored in the LIB.
The Label Information Base is always kept synchronized to the IP routing table—as soon as a new 
non-BGP route appears in the IP routing table, a new label is allocated and bound to the new route. 
The debug tag tdp bindings printouts show the subnet-to-label binding. Example C-10 shows 
a sample printout. 
Example C-9
Show Tag TDP Neighbor Printout
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg----sssswwwwiiiittttcccchhhhiiiinnnngggg    ttttddddpppp    nnnneeeeiiiigggghhhhbbbboooorrrr
  Peer TDP Ident: 172.16.1.1:0; Local TDP Ident 172.16.1.4:0
  TCP connection: 172.16.1.1.711 - 172.16.1.4.11000
                  State: Oper; PIEs sent/rcvd: 4/4; ; Downstream
                  Up time: 00:01:05
                  TDP discovery sources:
                   Serial1/0.1
    Addresses bound to peer TDP Ident:
    172.16.1.1
NOTE
The TDP identiﬁer is determined in the same way as the OSPF or BGP identiﬁer (unless 
controlled by the tag tdp router-id command)—the highest IP address of all loopback interfaces 
is used. If no loopback interfaces are conﬁgured on the router, the TDP identiﬁer becomes the 
highest IP address of any interface that was operational at the TDP process startup time.
NOTE
The IP address used as the TDP identiﬁer must be reachable by adjacent LSRs; 
otherwise, the TDP/LDP session cannot be established.
NOTE
Labels are not assigned to BGP routes in the IP routing table. The BGP routes use the 
same label as the interior route toward the BGP next hop. For more information on MPLS/BGP 
integration, see the section, “MPLS Interaction with the Border Gateway Protocol,” later in 
this section.

922     Appendix C: MPLS
Because the LSR assigns a label to each IP preﬁx in its routing table as soon as the preﬁx appears 
in the routing table, and the label is meant to be used by other LSRs to send the labeled packets 
toward the assigning LSR, this method of label allocation and label distribution is called 
independent control label assignment, with unsolicited downstream label distribution:
■
The label allocation in routers is done regardless of whether the router has received a label for 
the same preﬁx already from its next-hop router or not. Thus, label allocation in routers is 
called independent control.
■
The distribution method is unsolicited because the LSR assigns the label and advertises the 
mapping to upstream neighbors regardless of whether other LSRs need the label. The on-
demand distribution method is the other possibility. An LSR assigns only a label to an IP 
preﬁx and distributes it to upstream neighbors when asked to do so. 
■
The distribution method is downstream when the LSR assigns a label that other LSRs 
(upstream LSRs) can use to forward labeled packets and advertises these label mappings to 
its neighbors. Initial tag switching architecture also contains provisions for upstream label 
distribution, but neither the current tag switching implementation nor the MPLS architecture 
needs this type of distribution method.
All label bindings are advertised immediately to all other routers through the TDP sessions. The 
advertisements also can be examined by means of debugging commands, as shown in Example C-11. 
The printout was taken on the San Francisco router after the route toward 192.168.2.0/24 
was propagated from New York to San Francisco via the IGP and entered into the San Francisco 
LSR’s routing table.
As you can see from the printout, the San Francisco router announces its IP preﬁx-to-label binding 
to all TDP neighbors, regardless of whether they are upstream or downstream. Even more, the 
binding also is sent to the next-hop router, so there is no split-horizon processing in TDP or LDP.
Example C-10
Sample Label-to-preﬁx Bindings
SanFrancisco#ddddeeeebbbbuuuugggg    ttttaaaagggg----sssswwwwiiiittttcccchhhhiiiinnnngggg    ttttddddpppp    bbbbiiiinnnnddddiiiinnnnggggssss
TDP Tag Information Base (TIB) changes debugging is on
1d20h: tagcon: tibent(172.16.1.4/32): created; find route tags request
1d20h: tagcon: tibent(172.16.1.4/32): lcl tag 1 (#2) assigned
1d20h: tagcon: tibent(172.16.1.1/32): created; find route tags request
1d20h: tagcon: tibent(172.16.1.1/32): lcl tag 26 (#4) assigned
1d20h: tagcon: tibent(172.16.1.3/32): created; find route tags request
1d20h: tagcon: tibent(172.16.1.3/32): lcl tag 27 (#6) assigned
1d20h: tagcon: tibent(172.16.1.2/32): created; find route tags request
1d20h: tagcon: tibent(172.16.1.2/32): lcl tag 28 (#8) assigned
1d20h: tagcon: tibent(192.168.1.0/24): created; find route tags request
1d20h: tagcon: tibent(192.168.1.0/24): lcl tag 1 (#10) assigned
1d20h: tagcon: tibent(192.168.2.0/24): created; find route tags request
1d20h: tagcon: tibent(192.168.2.0/24): lcl tag 29 (#12) assigned

Label Bindings and Propagation in Frame-Mode MPLS     923
The adjacent LSRs receive preﬁx-to-label mappings, store them in their LIB, and use them in their 
FIB or LFIB if the mapping has been received from their downstream neighbor, which is the next-
hop for the particular FEC in question. This storage method is called liberal retention mode as 
opposed to conservative retention mode, where an LSR retains only the labels assigned to a preﬁx 
by its current downstream routers.
The show tag-switching tdp bindings command can display all the label mappings generated by 
a router or received from its TDP neighbors. Example C-12 displays the result of that command 
for IP preﬁx 192.168.2.0/24 on the San Francisco router. 
Example C-11
IP Preﬁx-to-label Binding Propagation Through TDP
1d20h: tagcon: adj 172.16.1.1:0 (pp 0x80EA98E4): advertise 192.168.2.0/24, tag 29
  (#12)
1d20h: tagcon: adj 172.16.3.1:0 (pp 0x80EA98E4): advertise 192.168.2.0/24, tag 29
  (#12)
1d20h: tagcon: adj 172.16.2.1:0 (pp 0x80EA98E4): advertise 192.168.2.0/24, tag 29
  (#12)
1d20h: tagcon: adj 172.16.1.2:0 (pp 0x80EA98E4): advertise 192.168.2.0/24, tag 29
  (#12)
1d20h: tagcon: adj 172.16.1.3:0 (pp 0x80EA98E4): advertise 192.168.2.0/24, tag 29
  (#12)
1d20h: tdp: Sent bind PIE to 172.16.1.1:0 (pp 0x80EA98E4)
NOTE
There are a number of possible combinations between the three label allocation 
parameters (unsolicited versus on-demand distribution, independent versus ordered control, and 
liberal versus conservative retention), but the routers running Cisco IOS software always use 
unsolicited distribution, independent control, and liberal retention over Frame-mode MPLS 
interfaces. The ﬁxed set of parameters should not prevent the router from interoperating through 
LDP with other devices that use a different default. For more details on which combinations 
work and which ones don’t, please refer to the IETF LDP documentation.
Example C-12
Label Information Base Entry on San Francisco Router
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg----sssswwwwiiiittttcccchhhhiiiinnnngggg    ttttddddpppp    bbbbiiiinnnnddddiiiinnnnggggssss    111199992222....111166668888....2222....0000
  tib entry: 192.168.2.0/24, rev 7
                   local binding:  tag: 30
                   remote binding: tsr: 172.16.1.1:0, tag: 33
                   remote binding: tsr: 172.16.1.2:0, tag: 35
                   remote binding: tsr: 172.16.1.3:0, tag: 23
                   remote binding: tsr: 172.16.2.1:0, tag: 59
                   remote binding: tsr: 172.16.3.1:0, tag: 28
SanFrancisco#

924     Appendix C: MPLS
A router might receive TDP bindings from a number of neighbors, but uses only a few of them in 
the forwarding tables as follows:
■
The label binding from the next-hop router is entered in the corresponding FIB entry. If the 
router doesn’t receive the label binding from the next-hop router, the FIB entry speciﬁes that 
the packets for that destination should be sent unlabeled.
■
If the router receives a label binding from the next-hop router, the local label and the next-hop 
label are entered in the LFIB. If the next-hop router didn’t assign a label to the corresponding 
preﬁx, the outgoing action in LFIB is unlabeled. Example C-13 shows both cases.
Convergence in a Frame-Mode MPLS Network
An important aspect in MPLS network design is the convergence time of the network. Some 
MPLS applications (for example, an MPLS/VPN or BGP design based on MPLS) do not work 
correctly unless a labeled packet can be sent all the way through from the ingress Edge-LSR to the 
egress Edge-LSR. In these applications, the convergence time needed by an Interior Gateway 
Protocol (IGP) to converge around a failure in the core network could be increased by the label 
propagation delay.
In a Frame-mode MPLS network, using liberal retention mode in combination with independent 
label control and unsolicited downstream label distribution minimizes the TDP/LDP convergence 
delay. Every router using liberal retention mode usually has label assignments for a given preﬁx 
from all its TDP/LDP neighbors, so it can always ﬁnd a proper outgoing label following the 
routing table convergence without asking its new next-hop router for the label assignment.
NOTE
A router that has no label for a speciﬁc IP preﬁx from the next-hop router marks the 
preﬁx as unlabeled if it is not a directly connected interface or is not a summary route. If the 
route is connected directly or is a summary route, an additional Layer 3 lookup is needed and a 
router assigns a null label to that preﬁx due to a mechanism called penultimate hop popping, 
which is covered in the next section.
Example C-13
Label Forwarding Information Base on San Francisco Router
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg    ffffoooorrrrwwwwaaaarrrrddddiiiinnnngggg----ttttaaaabbbblllleeee    ttttaaaaggggssss    33330000----33331111
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop tag    tag or VC   or 
  Tunnel Id      switched   interface
30     28          192.168.2.0/32    0          Se0/0/1    172.16.3.1
31     untagged    192.168.100.4/32  0          Se1/0/3    172.16.1.3
NOTE
Unfortunately the immediate TDP/LDP convergence happens only when a link fails. 
When a link is reestablished, the IGP adjacency and convergence usually happens before the 
TDP adjacency is set up and the labels are exchanged, resulting in the temporary incapability to 
forward labeled packets until the labels are exchanged.

Label Bindings and Propagation in Frame-Mode MPLS     925
The next set of examples, based on a failure scenario (the link between Washington and San 
Francisco fails) in the SuperNet network, illustrate the immediate convergence. The examples 
observe only the route toward network 192.168.100.2/32, which is attached to the New York 
router.
The show command printouts (see Example C-14) in the initial state indicate that the target route 
is reachable through interface Serial0/0/1 through next-hop 172.16.3.1.
Immediately following the link failure, the LFIB is scanned to clean up any entries that used the 
failed interface as the outgoing interface (see Example C-15). 
Example C-14
TDP, LFIB, and FIB Entries Prior to Link failure
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg----sssswwwwiiiittttcccchhhhiiiinnnngggg    ttttddddpppp    bbbbiiiinnnnddddiiiinnnngggg    111199992222....111166668888....111100000000....2222    33332222
  tib entry: 192.168.100.2/32, rev 10
        local binding:  tag: 28
        remote binding: tsr: 172.16.2.1:0, tag: 28
        remote binding: tsr: 172.16.3.1:0, tag: 32
SanFrancisco#sssshhhhoooowwww    ttttaaaagggg----sssswwwwiiiittttcccchhhhiiiinnnngggg    ffffoooorrrrwwwwaaaarrrrddddiiiinnnngggg    111199992222....111166668888....111100000000....2222
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop tag    tag or VC   or 
  Tunnel Id      switched   interface
28     32          192.168.100.2/32  0          Se0/0/1    point2point
SanFrancisco#sssshhhhoooowwww    iiiipppp    cccceeeeffff    111199992222....111166668888....111100000000....2222
192.168.100.2/32, version 76, attached
0 packets, 0 bytes
  tag information set, shared, unshareable
    local tag: 28
  via Serial0/0/1, 9 dependencies
    valid adjacency
    tag rewrite with Se0/0/1, point2point, tags imposed: {32}
Example C-15
LFIB Scan Following a Link Failure 
SanFrancisco#sssshhhh    ddddeeeebbbbuuuugggg
IP routing:
  IP routing debugging is on
Tag Switching:
  TDP Tag Information Base (TIB) changes debugging is on
  TDP tag and address advertisements debugging is on
  Cisco Express Forwarding related TFIB services debugging is on
SanFrancisco#
3d03h: %LINK-5-CHANGED: Interface Serial0/0/1, changed state to down
3d03h: %LINEPROTO-5-UPDOWN: Line protocol on Interface Serial0/0/1, changed state to down
3d03h: TFIB: fib scan start:needed:1,unres:0,mac:0,mtu:0,loadinfo:0,scans aborted 0
continues

926     Appendix C: MPLS
The failed interface then is removed from the routing table and the associated routes are removed 
from the IP routing table. Because no alternative equal-cost route toward 192.168.100.2/32 
currently exists, the route is removed completely from the routing table and the associated entry 
is deleted from the LFIB (see Example C-16). 
An alternate route to 192.168.100.2 goes through the Denver router. The OSPF process 
immediately installs the alternate route in the routing table. Corresponding CEF and LFIB entries 
are created and the LFIB entry gets the label assigned by 172.16.2.1 (the Denver router) as its 
outgoing label. The new LFIB entry is installed without any TDP/LDP interaction with any 
TDP/LDP neighbors (see Example C-17). 
3d03h: TFIB: fib check cleanup for 192.168.100.2/32,index=0,return_value=0
3d03h: TFIB: fib_scanner_walk,reslve path 0 of 192.168.100.2/32
3d03h: TFIB: resolve tag rew,prefix=192.168.100.2/32,has tag_info,no parent
3d03h: TFIB: finish fib res 192.168.100.2/32:index 0,parent outg tag no parent
3d03h: TFIB: set fib rew: pfx 192.168.100.2/32,index=0,add=1,tag_rew->adj=Serial 0/
0/1
3d03h: TFIB: Update TFIB for 192.168.100.2/32, fib no loadinfo, tfib no loadinfo, 
per_pkt,resolved=1
3d03h: TFIB: fib_scanner_end
Example C-16
Routing Table and LFIB Cleanup
3d03h: RT: interface Serial0/0/1 removed from routing table
3d03h: RT: delete route to 192.168.100.2 via 0.0.0.0, Serial0/0/1
3d03h: RT: no routes to 192.168.100.2, flushing
3d03h: TFIB: tfib_fib_delete,192.168.100.2/32,fib->count=1
3d03h: TFIB: fib complete delete: prefix=192.168.100.2/32,inc tag=28,del info=1
3d03h: TFIB: deactivate tag rew for 192.168.100.2/32,index=0
3d03h: TFIB: Update TFIB for 192.168.100.2/32, fib no loadinfo, tfib no loadinfo,
  per_pkt,resolved=0
3d03h: TFIB: set fib rew: pfx 192.168.100.2/32,index=0,add=0,tag_rew->adj=Serial 0/0/1
Example C-17
Alternate Route Is Installed in the Routing Table
3d03h: RT: add 192.168.100.2/32 via 172.16.2.1, ospf metric [110/21]
3d03h: TFIB: post table chg,ROUTE_UP 192.168.100.2/32,loadinfo ct=1
3d03h: TFIB: find_rt_tgs,192.168.100.2/32,meth 1,res_next_hop=172.16.2.1, Se0/0/2,
  next_hop 172.16.2.1
3d03h: TFIB: route tag chg 192.168.100.2/32,idx=0,inc=28,outg=28,enabled=0x1
3d03h: TFIB: create tag info 192.168.100.2/32,inc tag=28,has no info
3d03h: TFIB: resolve tag rew,prefix=192.168.100.2/32,has tag_info,no parent
3d03h: TFIB: finish fib res 192.168.100.2/32:index 0,parent outg tag no parent
3d03h: TFIB: set fib rew: pfx 192.168.100.2/32,index=0,add=1,tag_rew->adj=FastEt hernet0/0
3d03h: TFIB: Update TFIB for 192.168.100.2/32, fib no loadinfo, tfib no loadinfo,
  per_pkt,resolved=1
Example C-15
LFIB Scan Following a Link Failure (Continued)

Penultimate Hop Popping     927
As the last step, all entries from the TDP neighbor 172.16.3.1 (the Washington router), which is 
no longer reachable, are removed from the Label Information Base (see Example C-18).
Penultimate Hop Popping
An egress Edge-LSR in an MPLS network might have to perform two lookups on a packet 
received from an MPLS neighbor and destined for a subnet outside the MPLS domain. It must 
inspect the label in the label stack header, and it must perform the label lookup just to realize that 
the label has to be popped and the underlying IP packet inspected. An additional Layer 3 lookup 
must be performed on the IP packet before it can be forwarded to its ﬁnal destination. Figure C-15 
shows the corresponding process in the SuperNet network.
Figure C-15
Double Lookup in New York POP Router
The double lookup in the NewYork POP router might reduce the performance of that node. 
Furthermore, in environments where MPLS and IP switching is realized in hardware, the fact 
that a double lookup might need to be performed can increase the complexity of the hardware 
implementation signiﬁcantly. To address both issues, penultimate hop popping (PHP) was 
introduced into the MPLS architecture.
Example C-18
LIB Entries Received from Washington Router Are Removed
3d03h: tagcon: tibent(192.168.100.2/32): rem tag 1 from 172.16.3.1:0 removed
3d03h: tagcon: no route_tag_change for: 192.168.100.2/32
        for tsr 172.16.3.1:0: tsr is not next hop
3d03h: TFIB: resolve recursive: share rewrite of parent 192.168.100.2/32
IP Packet
d=192.168.2.2
IP Packet
30
IP Packet
28
IP Packet
37
IP Packet
New York
POP
MAE-East
peering point
Step #5 - New York POP router
does label lookup, pops the
label, does Layer 3 lookup, and
forwards the packet toward
external next-hop router.
Washington
core router
Dallas
core router
Step #3 - San Francisco router
does label lookup, swaps labels,
and forwards the packet toward
the Washington router.
San Francisco
core router
Mountain View
POP
Santa Clara
POP
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label,
and forwards the packet toward
the San Francisco router.
Step #4 - Washington router does
label lookup, swaps labels, and
forwards the packet toward
the New York POP router.

928     Appendix C: MPLS
With penultimate hop popping, the Edge-LSR can request a label pop operation from its upstream 
neighbors. In the SuperNet network, the Washington router pops the label from the packet (Step 4 
in Figure C-16) and sends a pure IP packet to the New York router. Then the New York router does 
a simple Layer 3 lookup and forwards the packet to its ﬁnal destination (Step 5 in Figure C-16).
Figure C-16
Penultimate Hop Popping in the SuperNet Network
Penultimate hop popping is requested through TDP or LDP by using a special label value (1 for 
TDP, 3 for LDP) that also is called the implicit-null value.
When the egress LSR requests penultimate hop popping for an IP preﬁx, the local LIB 
entry in the egress LSR and the remote LIB entry in the upstream LSRs indicate the imp-null 
value (see Example C-19) and the LFIB entry in the penultimate LSR indicates a tag pop 
operation (see Example C-20). 
NOTE
Penultimate hop popping is used only for directly connected subnets or aggregate 
routes. In the case of a directly connected interface, Layer 3 lookup is necessary to obtain the 
correct next-hop information for a packet that is sent toward a directly connected destination. If 
the preﬁx is an aggregate, a Layer 3 lookup also is necessary to ﬁnd a more speciﬁc route that 
then is used to route the packet toward its correct destination. In all other cases, the Layer 2 
outbound packet information is available within the LFIB and, therefore, a Layer 3 lookup is 
not necessary and the packet can be label switched.
IP Packet
d=192.168.2.2
IP Packet
30
IP Packet
28
IP Packet
IP Packet
New York
POP
MAE-East
peering point
Step #5 - New York POP router
does only Layer 3 lookup and
forwards the packet toward
external net-hop router.
Washington
core router
Dallas
core router
Step #3 - San Francisco router
does label lookup, swaps labels,
and forwards the packet toward
the Washington router.
San Francisco
core router
Mountain View
POP
Santa Clara
POP
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label,
and forwards the packet toward
the San Francisco router.
Step #4 - Washington router
does label lookup, pops the label,
and forwards pure IP packet toward
the New York POP router.

MPLS Interaction with the Border Gateway Protocol     929
MPLS Interaction with the Border Gateway Protocol
In the section “Label Binding and Distribution,” earlier in this appendix, you saw that a label is 
assigned to every IP preﬁx in the IP routing table of a router acting as LSR, the only exception 
being routes learned through the Border Gateway Protocol (BGP). No labels are assigned to these 
routes and the ingress Edge-LSR uses the label assigned to the BGP next hop to label the packets 
forwarded toward BGP destinations.
To illustrate this phenomenon, assume that the MAE-East router in the SuperNet network receives 
a route for network 192.168.3.0 from a router in Autonomous System 4635. The route is 
propagated throughout the SuperNet network with the MAE-East router from AS4635 being the 
BGP next-hop. When looking in the BGP table on the San Jose router and in the corresponding 
FIB table entries, you can see that the same label (28) is used to label the packets for the BGP 
destination and for the BGP next-hop (see Example C-21). 
Example C-19
LIB Entries in Edge LSR and Penultimate LSR
NewYork#sssshhhhoooowwww    ttttaaaagggg    ttttddddpppp    bbbbiiiinnnnddddiiiinnnngggg    111199992222....111166668888....2222....0000    22224444
  tib entry: 192.168.2.0/24, rev 10
       local binding:  tag: imp-null(1)
       remote binding: tsr: 172.16.3.1:0, tag: 28
Washington#sssshhhhoooowwww    ttttaaaagggg    ttttddddpppp    bbbbiiiinnnnddddiiiinnnngggg    111199992222....111166668888....2222....0000    22224444
   tib entry: 192.168.2.0/24, rev 10
       local binding:  tag: 28
       remote binding: tsr: 172.16.3.2:0, tag: imp-null(1)
       remote binding: tsr: 172.16.1.4:0, tag: 30
       remote binding: tsr: 172.16.2.1:0, tag: 37
Example C-20
LFIB Entry in Washington Router
Washington#sssshhhhoooowwww    ttttaaaagggg    ffffoooorrrrwwwwaaaarrrrddddiiiinnnngggg    ttttaaaaggggssss    22228888
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop tag    tag or VC   or 
  Tunnel Id      switched   interface
26     Pop tag     192.168.2.0/24    0          Se0/0/2    point2point
Example C-21
BGP and FIB Entries on the San Jose Router 
SanJose#sssshhhhoooowwww    iiiipppp    bbbbggggpppp    111199992222....111166668888....3333....0000
BGP routing table entry for 192.168.3.0/24, version 2
Paths: (1 available, best #1, table Default-IP-Routing-Table)
  4635
    192.168.100.2 (metric 21) from 172.16.4.1 (172.16.4.1)
      Origin IGP, metric 0, localpref 100, valid, internal, best
SanJose#sssshhhhoooowwww    iiiipppp    cccceeeeffff    111199992222....111166668888....3333....0000
192.168.3.0/24, version 52, cached adjacency 172.16.1.4
continues

930     Appendix C: MPLS
The interaction between MPLS, IGP, and BGP gives a network designer a completely new 
approach to network design. Traditionally, BGP had to be run on every router in the core of a 
service provider network to enable proper packet forwarding. For example, BGP information from 
MAE-East had to be propagated to every core router in the SuperNet network (Washington, 
Denver, and San Francisco). If that were not the case, the core routers could not route the packets 
toward the BGP destination, as illustrated in Figure C-17.
Figure C-17
Connectivity Loss in Network with No BGP on Core Routers
0 packets, 0 bytes
tag information from 172.16.1.4/32, shared
    local tag: 39
    fast tag rewrite with Se1/0/1, 172.16.1.4, tags imposed: {28}
  via 192.168.100.2, 0 dependencies, recursive
    next hop 172.16.1.4, Serial1/0/1 via 172.16.1.4/32
    valid cached adjacency
    tag rewrite with Se1/0/1, 172.16.1.4, tags imposed: {28} SanJose#show ip cef 192.168.100.2
192.168.100.2/32, version 26, cached adjacency 172.16.1.4
0 packets, 0 bytes
  tag information set, shared
    local tag: 39
    fast tag rewrite with Se1/0/1, 172.16.1.4, tags imposed: {28}
  via 192.168.100.2, 0 dependencies, recursive
    next hop 172.16.1.4, Serial1/0/1 via 172.16.1.4/32
    valid cached adjacency
    tag rewrite with Se1/0/1, 172.16.1.4, tags imposed: {28}
Example C-21
BGP and FIB Entries on the San Jose Router (Continued)
IP Packet
d=192.168.3.17
New York POP
MAE-East
peering point
Washington
core router
Dallas
core router
San Francisco router is not
running BGP and has no
information about network
192.168.3.0/24.
San Francisco
core router
Mountain View
POP
Santa Clara
POP
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup and forwards the
packet toward the BGP next
hop (MAE-East).
Step #3 - San Francisco router
receives a packet for unknown
destination and drops it.
IP Packet
d=192.168.3.17

MPLS Interaction with the Border Gateway Protocol     931
If, however, the SuperNet network runs MPLS, the San Jose router propagates the packet toward 
a BGP destination as a labeled packet with the label associated with the BGP next hop. Because 
the BGP next hop should always be announced in the IGP the network is running, all intermediate 
routers must have an incoming-to-outgoing label mapping for that destination in their LFIB 
already and must propagate the labeled packet toward the egress LSR (MAE-East) but need not 
run BGP. Figure C-18 displays the whole process.
Figure C-18
Packet Propagation Toward BGP Destination in MPLS-enabled Network
The removal of the BGP process from the core routers in a service provider network has a number 
of beneﬁts:
■
The routing tables in the core routers become much more stable because the core routers do 
not process route ﬂaps in the Internet.
■
Memory requirements for the core routers are reduced because they do not have to store the  
Internet routes (around 70,000 to 80,000 routes, consuming between 20 to 40 MB of memory 
in the router).
■
The route processor CPU utilization on the core routers is reduced greatly because they do not 
have to process BGP updates.
MPLS deployment, even in a pure router-based service provider IP backbone, is therefore highly 
recommended. 
IP Packet
d=192.168.3.78
IP Packet
28
IP Packet
35
IP Packet
IP Packet
New York POP
MAE-East
peering point
Step #5 - MAE-East router is running
BGP, so it has route toward
192.168.3.0/24. It performs Layer 3
lookup, and forwards the packet toward
external next-hop router.
Washington
core router
Dallas
core router
Step #3 - San Francisco router
does label lookup, swaps labels,
and forwards the packet toward
the Washington router.
San Francisco
core router
Mountain View
POP
Santa Clara
POP
San Jose POP
Step #1 - IP packet arrives
at San Jose router.
Step #2 - San Jose router does
Layer 3 lookup, prepends label
associated with BGP next hop,
and forwards the packet.
Step #4 - Washington router does label
lookup, performs penultimate hop popping
as requested by MAE-East, and forwards IP
Packet toward MAE-East router.
IP Packet

932     Appendix C: MPLS
Summary: Frame-Mode MPLS Operations
This section discusses MPLS operation over interfaces where labeled packets are sent 
encapsulated in Layer 2 frames (Frame-mode MPLS operation).
Label Switch Routers (LSRs) use Label Distribution Protocol (LDP, an IETF standard) or Tag 
Distribution Protocol (TDP, a Cisco pre-standard) to exchange IP preﬁx-to-label bindings. A Label 
Information Base (LIB, also called a Tag Information Base [TIB]) stores these bindings, which are 
used to build the Forwarding Information Base (FIB) entries in ingress Edge-LSRs as well as 
Label Forwarding Information Base (LFIB, also called Tag Forwarding Information Base [TFIB]) 
in all MPLS nodes. Cisco IOS supports both label distribution protocols, and you can use both in 
the same network, even on separate interfaces of the same LSR.
The tag-switching ip or mpls ip interface conﬁguration command enables MPLS on a Frame-
mode interface. In IOS releases supporting LDP, the desired label distribution protocol must be 
selected using the mpls label-distribution command. These commands start TDP or LDP on the 
speciﬁed interface. TDP/LDP ﬁnds other LSRs attached to the same subnet through TDP/LDP 
hello packets sent as UDP packets to broadcast or multicast IP addresses. When the neighboring 
LSRs are discovered, a TDP/LDP session is established using TCP as the transport protocol to 
ensure the reliable delivery of label mappings.
The IOS implementation of LSR on Frame-mode interfaces assigns labels to IP preﬁxes as soon 
as they appear in the routing table, even though the LSR hasn’t received a corresponding label 
from its downstream neighbor, because it can always perform a Layer 3 lookup if needed. The 
router is thus working in independent control allocation mode, as opposed to ordered control 
allocation, where a device assigns only labels to those preﬁxes where a downstream label already 
exists in the LIB.
When running MPLS over Frame-mode interfaces, a Cisco router immediately propagates 
allocated labels to its TDP/LDP neighbors. This distribution method is called unsolicited 
downstream distribution, as opposed to downstream on demand distribution, where the upstream 
routers explicitly ask the downstream routers for speciﬁc labels.
A Cisco router acting as an LSR stores all label mappings received from its TDP/LDP neighbors. 
This storage method is called liberal retention mode as opposed to conservative retention mode 
where the LSR stores only labels received from its next hop downstream routers. The liberal 
retention mode uses more memory but enables instantaneous TDP/LDP convergence following 
the routing protocol convergence after a failure in the network. After the LSRs in an MPLS 
network have exchanged label mappings, the ingress LSR can label the incoming data packets. 
The ingress LSR inserts a label stack header between the Layer 2 header and the IP header. For 
unicast destination-only IP routing, the label stack header usually contains only one label, but the 
MPLS architecture also supports stacked labels used by other MPLS applications, such as trafﬁc 

MPLS/VPN Architecture Overview     933
engineering or Virtual Private Networks. The labeled packets are distinguished from the unlabeled 
IP packets by using different ethertype codes on LAN media and a different PPP Protocol ﬁeld 
value.
Network designers usually consider MPLS only as a technology that allows seamless integration 
of IP routers and ATM switches or enables additional applications, such as MPLS Trafﬁc 
Engineering or MPLS/VPN. They usually don’t realize they can gain signiﬁcant simpliﬁcations 
by deploying MPLS in any network that runs BGP as its exterior routing protocol. Deploying 
MPLS in a network running BGP allows you to remove BGP routing from core routers (non–
Edge-LSRs), resulting in a network design that is more stable, requires less memory on the core 
routers, and prevents high CPU utilization due to BGP update processing on the core routers.
MPLS/VPN Architecture Overview
Virtual private networks (VPNs) have evolved using two major VPN models: overlay VPN and 
peer-to-peer VPN. The overlay VPN model, most commonly used in a service provider network, 
dictates that the design and provisioning of virtual circuits across the backbone must be 
complete prior to any trafﬁc ﬂow. In the case of an IP network, this means that even though the 
underlying technology is connectionless, it requires a connection-oriented approach to 
provision the service.
From a service provider’s point of view, the scaling issues of an overlay VPN model are felt most 
when having to manage and provision a large number of circuits/tunnels between customer 
devices. From a customer’s point of view, the Interior Gateway Protocol design is typically 
extremely complex and also difﬁcult to manage.
On the other hand, the peer-to-peer VPN model suffers from lack of isolation between the 
customers and the need for coordinated IP address space between them.
With the introduction of Multiprotocol Label Switching (MPLS), which combines the beneﬁts 
of Layer 2 switching with Layer 3 routing and switching, it became possible to construct a 
technology that combines the beneﬁts of an overlay VPN (such as security and isolation among 
customers) with the beneﬁts of simpliﬁed routing that a peer-to-peer VPN implementation 
brings. The new technology, called MPLS/VPN, results in simpler customer routing and 
somewhat simpler service provider provisioning, and makes possible a number of topologies 
that are hard to implement in either the overlay or peer-to-peer VPN models. MPLS also adds 
the beneﬁts of a connection-oriented approach to the IP routing paradigm, through the 
establishment of label-switched paths, which are created based on topology information rather 
than trafﬁc ﬂow.

934     Appendix C: MPLS
The MPLS/VPN architecture provides the capability to commission an IP network infrastructure 
that delivers private network services over a public infrastructure. The MPLS/VPN technology is 
quite complex in itself and will not be fully covered in this appendix. In this section, you’ll see the 
basic MPLS/VPN concepts without going into too many details that would clutter the overall 
picture. 
Case Study: Virtual Private Networks in SuperCom 
Service Provider Network
As with all complex topics, the MPLS/VPN concepts are best explained through use of a case 
study. Imagine a service provider (let’s call it SuperCom) that is offering VPN services based on 
MPLS/VPN technologies. The service provider has two points of presence (POP), a U.S. POP in 
the San Jose area and a French POP in the Paris area. The POPs are linked through a core router 
located in Washington, D.C.
The service provider has two customers: FastFood, with headquarters in San Jose and branch 
ofﬁces in Santa Clara and Lyon; and EuroBank, with headquarters in Paris and branch ofﬁces in 
Chartres and San Francisco. The FastFood company has a number of other branch ofﬁces (for 
example, in Santa Cruz and Monterey) that are linked directly with the FastFood central site. The 
whole network is shown in Figure C-19.
The routers in Figure C-19 have the following roles:
■
San Jose and Paris routers link the SuperCom network with its customers; they are thus 
provider edge (PE) routers.
■
The Washington router does not have any customer connection; therefore, it’s a provider (P) 
router.
■
Customer routers connected to the SuperCom network—FastFood routers in San Jose, Santa 
Clara, and Lyon, as well as EuroBank routers in San Francisco, Paris, and Chartres—are 
customer edge (CE) routers.
■
The FastFood routers in Santa Cruz and Monterey have no connection to the SuperCom 
network; they are customer (C) routers. All the networks connected directly to the FastFood 
San Jose site (Santa Cruz and Monterey networks) form a customer network (C-network) and 
NOTE
This introduction might lead you to believe that any overlay VPN implementation can 
be replaced with an MPLS/VPN implementation. Unfortunately, that is not true. MPLS/VPN 
currently supports only IP as the Layer 3 protocol. Other protocols, such as IPX and AppleTalk, 
still must be tunneled across an IP backbone.

Case Study: Virtual Private Networks in SuperCom Service Provider Network     935
represent a single site to the SuperCom network. The service provider does not care (and does 
not need to know) about the internal structure of that site.
Figure C-19
SuperCom Network and Its Customers
Let’s assume that both companies, FastFood and EuroBank, follow the same addressing 
convention—the central sites use public IP addresses, whereas all the remote sites use private IP 
address space (network 10.0.0.0).
The IP addresses used by these two companies are summarized in Table C-5.
NOTE
The addressing scheme used by these corporations is seen more often in real customer 
networks, more so in cases in which the customer didn’t acquire a signiﬁcant portion of public 
IP address space several years ago.
FastFood
Santa Cruz
FastFood
Monterey
FastFood
San Jose
FastFood
Santa Clara
FastFood
FastFood
Redwood
Eurobank
San Francisco
San Jose
Washington
Paris
FastFood
Lyon
Eurobank
Paris
EuroBank
Chartres
EuroBank
Nantes
SuperCom 
San Jose site

936     Appendix C: MPLS
The SuperCom service provider would like to offer IP-based VPN service based on the peer-
to-peer model (not a number of IP-over-IP tunnels), but it cannot do so easily because the address 
space of sites connected to the same router overlap.
SuperCom can traditionally solve the overlapping addresses issue in three ways:
■
It can persuade the customers to renumber their networks. Most customers would not be 
willing to do that and would rather ﬁnd another service provider.
■
It can implement the VPN service with IP-over-IP tunnels, where the customer IP addresses 
are hidden from the service provider routers.
■
It can implement a complex network address translation (NAT) scheme that would translate 
customer addresses into a different (but unique) set of addresses at the provider edge router 
and then translate those addresses back to the customer addresses before the packet would 
be sent from the egress PE-router to the CE router. Although such a solution is technically 
feasible, the administrative overhead is prohibitively large.
Table C-5
Address Space of FastFood and EuroBank
Company
Site
Subnet
FastFood
San Jose
195.12.2.0/24
Santa Clara
10.1.1.0/24
Redwood
10.1.2.0/24
Santa Cruz
10.1.3.0/24
Monterey
10.1.4.0/24
Lyon
10.2.1.0/24
EuroBank
Paris
196.7.25.0/24
Chartres
10.2.1.0/24
Nantes
10.2.2.0/24
San Francisco
10.1.1.0/24
NOTE
The service provider would encounter a similar (but not so obvious) problem if the 
address space overlap occurred between customers connected to different POPs. The traditional 
peer-to-peer model requires strict uniqueness of IP address space.

VPN Routing and Forwarding Tables     937
VPN Routing and Forwarding Tables
The overlapping addresses, usually resulting from usage of private IP addresses in customer 
networks, are one of the major obstacles to successful deployment of peer-to-peer VPN 
implementations. The MPLS/VPN technology provides an elegant solution to the dilemma: Each 
VPN has its own routing and forwarding table in the router, so any customer or site that belongs 
to that VPN is provided access only to the set of routes contained within that table. Any PE-router 
in an MPLS/VPN network thus contains a number of per-VPN routing tables and a global routing 
table that is used to reach other routers in the provider network, as well as external globally 
reachable destinations (for example, the rest of the Internet). Effectively, a number of virtual 
routers are created in a single physical router, as displayed in Figure C-20 for the case of San Jose 
router of SuperCom network.
The concept of virtual routers allows the customers to use either global or private IP address 
space in each VPN. Each customer site belongs to a particular VPN, so the only requirement is 
that the address space be unique within that VPN. Uniqueness of addresses is not required 
among VPNs except where two VPNs that share the same private address space want to 
communicate.
More structures are associated with each virtual router than just the virtual IP routing table:
■
A forwarding table that is derived from the routing table and is based on CEF technology.
■
A set of interfaces that use the derived forwarding table.
■
Rules that control the import and export of routes from and into the VPN routing table. 
These rules were introduced to support overlapping VPNs and are explained later in this 
section.
■
A set of routing protocols/peers, which inject information into the VPN routing table. This 
includes static routing.
■
Router variables associated with the routing protocol that is used to populate the VPN routing 
table.
NOTE
The relationship between virtual private networks and VPN routing and forwarding 
tables as explained in the previous paragraph is a slight simpliﬁcation of the actual relationship 
between these two concepts. Nevertheless, it is true in cases where each site (or customer) belongs 
only to one VPN. The additional complexity introduced by overlapping VPNs or sites belonging 
to more than one VPN is explained in the section “Overlapping Virtual Private Networks,” later 
in this section. 

938     Appendix C: MPLS
Figure C-20
Virtual Routers Created in a PE-router
The usage of these structures is explained in the rest of this section.
The combination of the VPN IP routing table and associated VPN IP forwarding table is called 
VPN routing and forwarding instance (VRF).
NOTE
You might think that there is no difference between an IP routing table and an 
IP forwarding table—and usually that’s true. In an MPLS environment, the only minor 
difference between them is the fact that the IP forwarding table also contains MPLS 
encapsulation information. A major difference between the two tables arises in cases where 
an IP route refers to a next hop that is not directly connected. In that case, the routing table 
will contain the next-hop information, but not the outgoing interface or the IP address of the 
downstream router. The forwarding table will contain all the information needed to forward 
the packet toward the destination. For example, with the conﬁguration in Example C-22, the 
routing table lists the next hop for network 10.0.0.0/8 as 1.0.0.1 (as shown in Example C-23), 
while the forwarding table contains the real next hop (the IP address of the downstream 
router), as shown in Example C-24.
Example C-22
Sample Conﬁguration with Recursive IP Routing
iiiipppp    rrrroooouuuutttteeee    11110000....0000....0000....0000    222255555555....0000....0000....0000    1111....0000....0000....1111
iiiipppp    rrrroooouuuutttteeee    1111....0000....0000....1111    222255555555....222255555555....222255555555....222255555555    2222....0000....0000....2222
!
iiiinnnntttteeeerrrrffffaaaacccceeee    sssseeeerrrriiiiaaaallll    0000
iiiipppp    aaaaddddddddrrrreeeessssssss    2222....0000....0000....1111    222255555555....0000....0000....0000
SanJose PE-router
Global IP router
Virtual router for
EuroBank
Virtual router for
FastFood
Virtual IP routing
table for FastFood
Virtual IP routing
table for EuroBank
Global IP routing
table
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
FastFood
San Francisco
Washington

Overlapping Virtual Private Networks     939
In the SuperCom case, the San Jose router contains three IP routing and forwarding tables—one 
table per customer and a global table used to forward non-VPN IP packets and to route VPN 
packets between PE-routers.
Overlapping Virtual Private Networks
The SuperCom example might lead you to believe that a VPN is associated with a single VRF 
in a PE-router. Although that would be true in the case where the VPN customer needs no 
connectivity with other VPN customers, the situation might become more complex and require 
more than one VRF per VPN customer.
Imagine that SuperCom wants to extend its service offering with a Voice over IP (VoIP) service 
with gateways to the public voice network located in San Jose and Paris, as shown in Figure C-21. 
The VoIP gateways were placed in a separate VPN to enhance the security of the newly created 
service. The IP addresses of these gateways are shown in Table C-6.
Example C-23
IP Routing Table for the Recursive IP Routing Example
mpls router#  sssshhhhoooowwww    iiiipppp    rrrroooouuuutttteeee
...
     1.0.0.0/32 is subnetted, 1 subnets
S       1.0.0.1 [1/0] via 2.0.0.2
C    2.0.0.0/8 is directly connected, Serial0
S    10.0.0.0/8 [1/0] via 1.0.0.1
...
Example C-24
CEF Forwarding Table Entry for Recursive IP Routing Example
mpls router#     sssshhhhoooowwww    iiiipppp    cccceeeeffff    11110000....0000....0000....0000
10.0.0.0/8, version 87
0 packets, 0 bytes
  via 1.0.0.1, 0 dependencies, recursive
    next hop  2.0.0.2, Serial0 via 1.0.0.1/32
Table C-6
IP Addresses of VoIP Gateways in SuperCom Network
VoIP Gateway Location
VoIP Gateway IP Address
San Jose
212.15.23.12
Paris
212.15.27.35

940     Appendix C: MPLS
Figure C-21
VoIP Gateways in SuperCom Network
Both EuroBank and FastFood decided to use the service, but only from their central sites— the 
branch ofﬁces have no need for international voice connectivity. This requirement leads to an 
interesting problem: The central sites of both organizations need to be in two VPNs: the corporate 
VPN to reach their remote sites and the VoIP VPN to reach the VoIP gateways. The connectivity 
requirements are illustrated in Figure C-22.
To support connectivity requirements similar to those in Figure C-22, the MPLS/VPN architecture 
supports the concept of sites, where a VPN is made up of one or multiple sites. A VPN is 
essentially a collection of sites sharing common routing information, which means that a site may 
belong to more than one VPN if it holds routes from separate VPNs. This provides the capability 
to build intranets and extranets. A VPN in the MPLS/VPN architecture can therefore be pictured 
as a community of interest or a closed user group, which is dictated by the routing visibility that 
the site will have.
NOTE
The connectivity requirements in Figure C-22 are a simpliﬁcation of the requirements 
that you would encounter in a real service provider network. Most often, for security reasons, 
the customers using a common service (for example, VoIP gateways) will not see each other, but 
only the gateways or servers providing the service that they are using.
FastFood
FastFood
Santa Cruz
FastFood
Monterey
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
FastFood
San Francisco
San Jose
Washington
Paris
FastFood
Lyon
EuroBank
Paris
EuroBank
Chartres
EuroBank
Nantes
VoIP gateway
VoIP gateway
SuperCom
San Jose site

Overlapping Virtual Private Networks     941
Figure C-22
VPN Connectivity Requirements in SuperCom Network
The VRF concept introduced in the previous section must be modiﬁed to support the concept 
of sites that can reside in more than one VPN. For example, the central site of FastFood and 
EuroBank cannot use the same VRF as all other FastFood or EuroBank sites connected to the same 
PE-router. The central site of EuroBank, for example, needs to access the VoIP gateways, so the 
routes toward these gateways must be in the VRF for that site, whereas the same routes will not be 
in the Chartres’ site VRF. Therefore, the MPLS/VPN architecture unbundles the concept of VRF 
from the concept of VPN. The VRF is simply a collection of routes that should be available to 
a particular site (or set of sites) connected to a PE-router. These routes can belong to more than 
one VPN.
NOTE
You might be inclined at this moment to jump from a one-VPN-one-VRF model to 
the other extreme: one-site-one-VRF model. Although that model is theoretically correct and 
supports any VPN topology, it leads to more complex conﬁgurations of the PE-routers that are 
harder to maintain and that also use more memory. Therefore, it is recommended to keep the 
number of VRFs to a minimum (for example, one VRF for the customer’s central site and 
another VRF for all remote ofﬁces connected to the same PE-router).
San Jose
San Jose
VoIP gateway
Paris
Paris
VoIP gateway
Santa Clara
Lyon
Chartres
San Francisco
Voice over IP VPN
FastFood VPN
EuroBank VPN

942     Appendix C: MPLS
The relationship between the VPNs, sites, and VRFs can be summarized in the following rule, 
which should be used as the basis for any VRF deﬁnition in an MPLS/VPN network.
Using this rule, the minimum set of VRFs in the SuperCom network is the one outlined in 
Table C-7.
Route Targets
A careful reader might start asking an interesting question: If there is no one-to-one mapping 
between VPN and VRF, how does the router know which routes need to be inserted into which 
VRF? This dilemma is solved by the introduction of another concept in the MPLS/VPN 
architecture: the route target. Every VPN route is tagged with one or more route targets when it is 
exported from a VRF (to be offered to other VRFs). You can also associate a set of route targets 
with a VRF, and all routes tagged with at least one of those route targets will be inserted into 
the VRF.
NOTE
All sites that share the same routing information (usually this  means that they belong 
to the same set of  VPNs), that are allowed to communicate directly with each other, and that are 
connected to the same PE-router can be placed in a common VRF.
Table C-7
VRFs in the PE-routers in the SuperCom Network
PE-router
VRF
Sites in the VRF
VRF Belongs to VPNs
San Jose
FastFood_Central
VoIP FastFood
EuroBank
VoIP
FastFood SanJose site
FastFood Santa Clara site
FastFood Redwood site
EuroBank San Francisco site
San Jose VoIP gateway
FastFood 
FastFood
EuroBank
VoIP
Paris 
FastFood
EuroBank_Central
EuroBank
VoIP
FastFood Lyon site
EuroBank Paris site
EuroBank Chartres site
EuroBank Nantes site
Paris VoIP gateway
EuroBank
EuroBank, VoIP
EuroBank
VoIP

Route Targets     943
The SuperCom network contains three VPNs and thus requires three route targets. The association 
between route targets and VRFs in the SuperCom network is outlined in Table C-8.
NOTE
The route target is the closest approximation to a VPN identiﬁer in the MPLS/VPN 
architecture. In most VPN topologies, you can equate them, but in other topologies (usually a 
central services topology), a single VPN might need more than one route target for successful 
implementation.
NOTE
The route target is a 64-bit quantity. For simplicity reasons, we will use names for 
route targets in this appendix.
Table C-8
Correspondence Between VRFs and Route Targets in SuperCom Network
PE-router
VRF
Sites in the VRF
Route Target 
Attached to 
Exported Routes
Import Route 
Targets
San Jose
FastFood_Central
FastFood
EuroBank
VoIP
FastFood SanJose site
FastFood Santa Clara site
FastFood Redwood site
EuroBank San Francisco 
site
San Jose VoIP gateway
FastFood, VoIP
FastFood
EuroBank
VoIP
FastFood, VoIP
FastFood
EuroBank
VoIP
Paris
FastFood
EuroBank_Central
EuroBank
VoIP
FastFood Lyon site
EuroBank Paris site
EuroBank Chartres site
EuroBank Nantes site
Paris VoIP gateway
FastFood
EuroBank, VoIP
EuroBank
VoIP
FastFood
EuroBank, VoIP
EuroBank
VoIP
NOTE
Based on Table C-8, you might assume that the route targets attached to routes 
exported from a VRF always match the set of import route targets of a VRF. Although that’s 
certainly true in simpler VPN topologies, there are widespread VPN topologies (for example, 
central services VPN) in which this assumption is not true.

944     Appendix C: MPLS
Propagation of VPN Routing Information 
in the Provider Network
The previous sections have explained MPLS/VPN architecture from a single PE-router standpoint. 
Two issues have yet to be addressed:
■
How will the PE-routers exchange information about VPN customers and VPN routes 
between themselves?
■
How will the PE-routers forward packets originated in customer VPNs?
This section addresses inter-PE routing; the next section brieﬂy describes the forwarding 
mechanism.
Two fundamentally different ways exist for approaching the VPN route exchange between 
PE-routers:
■
The PE-routers could run a different routing algorithm for each VPN. For example, a copy of 
OSPF or EIGRP could be run for each VPN. This solution would face serious scalability 
problems in service provider networks with a large number of VPNs. It would also face 
interesting design challenges when asked to provide support for overlapping VPNs.
■
The PE-routers run a single routing protocol to exchange all VPN routes. To support 
overlapping address spaces of VPN customers, the IP addresses used by the VPN customers 
must be augmented with additional information to make them unique.
The second approach was chosen as the building block of MPLS/VPN technology. IP subnets 
advertised by the CE-routers to the PE-routers are augmented with a 64-bit preﬁx called a route 
distinguisher to make them unique. The resulting 96-bit addresses are then exchanged between the 
PE-routers using a special address family of Multiprotocol BGP (hereby referred to as MP-BGP). 
NOTE
To illustrate the scalability issues that might arise from deploying one routing 
algorithm per VPN, consider the case where the SuperCom network would have to support more 
than 100 VPN customers connected to the San Jose and Paris routers with OSPF as the routing 
protocol. The PE-routers in the SuperCom network would run more than 100 independent 
copies of OSPF routing process (if that were technically possible), with each copy sending hello 
packets and periodic refreshments over the network. Because you cannot run more than one 
copy of OSPF over the same link, you would have to conﬁgure per-VPN subinterfaces 
(for example, using Frame Relay encapsulation) on the link between San Jose (or Paris) and 
Washington, resulting in an extremely complex network similar to the one shown in Figure C-23.
You would also have to run 100 different SPF algorithms and maintain 100 separate topology 
databases in the service provider routers.

Multiprotocol BGP in the SuperCom Network     945
There were several reasons for choosing BGP as the routing protocol used to transport VPN 
routes:
■
The number of VPN routes in a network can become very large. BGP is the only routing 
protocol that can support a very large number of routes.
■
BGP, EIGRP, and IS-IS are the only routing protocols that are multiprotocol by design (all of 
them can carry routing information for a number of different address families). IS-IS and 
EIGRP, however, do not scale to the same number of routes as BGP. BGP is also designed to 
exchange information between routers that are not directly connected. This BGP feature 
supports keeping VPN routing information out of the provider core routers (P-routers).
■
GP can carry any information attached to a route as an optional BGP attribute. What’s more, 
you can deﬁne additional attributes that will be transparently forwarded by any BGP router 
that does not understand them. This property of BGP makes propagation of route targets 
between PE-routers extremely simple.
Figure C-23
SuperCom Network with One IGP per VPN
Multiprotocol BGP in the SuperCom Network
To illustrate the interaction of per-VPN routing protocols with the MP-BGP used in the service 
provider network core, consider the case of the FastFood customer in the SuperCom network. 
Let’s assume that the San Jose site is using OSPF to interact with the SuperCom backbone, the 
Lyon and Santa Clara sites are using RIP, and the Redwood site is using no routing protocol—there 
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
EuroBank
San Francisco
San Jose
Washington
Paris
FastFood
Lyon
EuroBank
Paris
EuroBank
Chartres
EuroBank
Nantes
VoIP gateway
VoIP gateway
SuperCom
Frame-Relay link 
with subinterfaces
Frame-Relay link 
with subinterfaces
IGP for VoIP service
IGP for EuroBank
IGP for FastFood
IGP for VoIP service
IGP for EuroBank
IGP for FastFood

946     Appendix C: MPLS
is a static route conﬁgured on the San Jose PE-router and the default route conﬁgured on the 
Redwood router. The routing protocols used in FastFood VPN are shown in Figure C-24.
Figure C-24
Routing Protocols Used in FastFood VPN
The San Jose PE-router collects routing information from the San Jose site using a per-VPN OSPF 
process. Similarly, the information from the Santa Clara site is collected using a per-VPN RIP 
process. This process is marked as Step 1 in Figure 8-7.
NOTE
The Washington router (the P-router in the SuperCom network) is not involved in the 
MP- BGP. As you’ll see in the next section, the forwarding model used in MPLS/VPN does not 
require the P-routers to make any routing decisions based on VPN addresses; they just forward 
packets based on the label value attached to the packet. The P-routers, therefore, do not need to 
carry the VPN routes, resulting in even better scalability.
NOTE
The routing protocol used within a VPN network must be limited to the VPN in 
question. If the same routing protocol would be used in different VPNs, the possibility of using 
overlapping IP addresses between VPNs would be lost, and there would be potential route 
leakage between VPNs.
To support overlapping VPNs, the routing protocol must be limited to a single VPN routing and 
forwarding (VRF) table. Each PE-router must be conﬁgured so that any routing information 
learnt from an interface can be associated with a particular VRF. This is done through the 
standard routing protocol process and is known as the routing context. A separate routing 
context is used per VRF. 
Some routing protocols (for example, RIP) support several instances (or routing contexts) of the 
same protocol, with each instance running in a different VRF. Other protocols (for example, 
OSPF) require a separate copy of the routing protocol process for each VRF.
RIP
Multiprotocol BGP
RIP
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
OSPF
San Jose
Paris
FastFood
Lyon
SuperCom
Static

Multiprotocol BGP in the SuperCom Network     947
The information gathered by various routing protocols in the San Jose PE-router, as well as the 
static routes conﬁgured on the San Jose router, is redistributed into MP-BGP. VPN addresses are 
augmented with the route distinguishers at the moment of redistribution. The route export route 
target speciﬁed in the originating VRF is also attached to the route. The resulting 96-bit routing 
information is propagated by MP-BGP to the Paris router (Step 2 in Figure C-25).
Figure C-25
Routing Protocol Operation in SuperCom Network
WARNING
The redistribution of the per-VPN routing information into MP-BGP is not 
automatic and must be manually conﬁgured on the router for each VRF, unless this information 
was learned from the customer via BGP. The omission of manual redistribution into MP-BGP 
is one of the most common conﬁguration errors in MPLS/VPN deployment.
The Paris router, after receiving MP-BGP routes, inserts the received routes into various 
VRF tables based on the route target attribute attached to each individual route. The route 
distinguisher is dropped from the 96-bit route when the route is inserted into the VRF, resulting 
yet again in a traditional IP route. Finally, the routing information received through BGP is 
redistributed into the RIP process and is passed on to the Lyon site through RIP updates (Step 3 
in Figure C-25).
OSPF LSA
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
San Jose
RIP update
Static
Paris
Multiprotocol BGP
FastFood
Lyon
Step #1 - Routing
information is collected
from VPN sites running
per-VRF routing protocols.
Step #2 - Routing information from
VREs is redistributed into 
Multiprotocol BGP and forwarded
across the P-network.
Step #3 - Routing information
received through Multiprotocol
BGP is inserted into VRFs and
optionally forwarded to the
CE-routers.
RIP update
SuperCom
network

948     Appendix C: MPLS
VPN Packet Forwarding
In the previous section, you saw that the IP addresses used within a VPN must be prepended with 
a 64-bit preﬁx called a route distinguisher (RD) to make them unique.
Similarly, when the VPN-originated IP packets are forwarded across the service provider 
backbone (the P-network), they must be augmented to make them uniquely recognizable. Yet 
again, several technology options are possible:
■
The IP packet is rewritten to include 96-bit addresses in the packet header. This operation 
would be slow and complex.
■
The IP packet is tunneled across the network in VPN-over-IP tunnels. This choice would 
make MPLS/VPN as complex as traditional IP-over-IP VPN solutions using the overlay VPN 
model.
With the introduction of MPLS, a third technology option was made possible: Each VPN packet 
is labeled by the ingress PE-router with a label uniquely identifying the egress PE-router, and 
is sent across the network. All the routers in the network subsequently switch labels without 
having to look into the packet itself. The preparatory steps for this process are illustrated in 
Figure C-26.
Each PE-router needs a unique identiﬁer (a host route—usually the loopback IP address is used), 
which is then propagated throughout the P-network using the usual IGP (Step 1). This IP address 
is also used as the BGP next-hop attribute of all VPN routes announced by the PE-router. A label 
is assigned in each P-router for that host route and is propagated to each of its neighbors (Step 2). 
Finally, all other PE-routers receive a label associated with the egress PE-router through an MPLS 
label distribution process (Step 3). After the label for the egress PE-router is received by the 
ingress PE-router, the VPN packet exchange can start.
WARNING
Similar to the redistribution of VRF routes into MP-BGP, the redistribution of 
routes received over the service provider backbone back into the per-VRF routing process is not 
automatic, unless this process is BGP; it must be manually conﬁgured if the redistribution is 
required by the routing design. 
Contrary to the traditional BGP operation in which the internal BGP routes are not allowed 
to be redistributed into other routing protocols, this restriction is lifted in the MPLS/VPN 
environment. The VPN routes received by a PE-router through an internal MP-BGP session 
from another PE-router can be redistributed into other routing protocols.

VPN Packet Forwarding     949
Figure C-26
PN Packet Forwarding—Preparatory Steps
However, when the egress PE-router receives the VPN packet, it has no information to tell it which 
VPN the packet is destined for. To make the communication between VPN sites unique, a second 
set of labels is introduced, as illustrated in Figure C-27.
Each PE-router allocates a unique label for each route in each VPN routing and forwarding (VRF) 
instance (Step 1). These labels are propagated together with the corresponding routes through 
MP-BGP to all other PE-routers (Step 2). The PE-routers receiving the MP- BGP update and 
installing the received routes in their VRF tables (see Figure C-25 for additional details) also 
install the label assigned by the egress router in their VRF tables. The MPLS/VPN network is now 
ready to forward VPN packets.
When a VPN packet is received by the ingress PE-router, the corresponding VRF is examined, and 
the label associated with the destination address by the egress PE-router is fetched. Another label, 
pointing toward the egress PE-router, is obtained from the global forwarding table. Both labels are 
combined into an MPLS label stack, are attached in front of the VPN packet, and are sent toward 
the egress PE-router.
All the P-routers in the network switch the VPN packet based only on the top label in the stack, 
which points toward the egress PE-router. Because of the normal MPLS forwarding rules, the 
P-routers never look beyond the ﬁrst label and are thus completely unaware of the second label or 
the VPN packet carried across the network.
OSPF LSA
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
San Jose
RIP 
update
Static
Paris
FastFood
Lyon
Step #1 - PE-router
identifier (loopback) is
announced into IGP.
RIP update
Multiprotocol
BGP
IGP
IGP
SuperCom
Step #2 - A label for PE-router
loopback is propagated
throughout the MPLS-enabled
network.
Washington
Step #3 - Ingress
PE-router receives a
label toward egress
PE-router loopback
interface.

950     Appendix C: MPLS
Figure C-27
VPN Label Allocation
The egress PE-router receives the labeled packet, drops the ﬁrst label, and performs a lookup on 
the second label, which uniquely identiﬁes the target VRF and sometimes even the outgoing 
interface on the PE-router. A lookup is performed in the target VRF (if needed), and the packet is 
sent toward the proper CE-router.
Summary: MPLS/VPN Architecture Overview
Virtual Private Networks (VPN) based on Multiprotocol Label Switching (MPLS) combine the 
beneﬁts of the overlay VPN model, such as isolation and security, with the beneﬁts of the peer-to-
peer VPN model, such as simpliﬁed routing, easier provisioning, and better scalability. A number 
of mechanisms are needed to successfully meet all these goals:
■
Each VPN needs a separate VPN routing and forwarding instance (VRF) in each PE-router to 
guarantee  isolation and enable usage of uncoordinated private IP addresses.
NOTE
The egress PE-router assigns labels to VPN routes in such a way that the need for 
additional Layer 3 lookup in the target VRF is minimized. The additional Layer 3 lookup is 
needed only for summary VPN routes advertised between the PE-routers.
The router just before the egress PE-router might also remove the ﬁrst label in the label stack 
through penultimate hop popping. 
In the best case (no summary VPN routes and network topology that supports penultimate hop 
popping), the egress PE-router would perform only a single label lookup, resulting in maximum 
forwarding performance.
OSPF LSA
FastFood
San Jose
FastFood
Santa Clara
FastFood
Redwood
San Jose
RIP 
update
Static
Paris
FastFood
Lyon
Step #1 - PE-router
allocates a label for 
each VPN route.
RIP update
Multiprotocol
BGP
IGP
IGP
SuperCom
Washington
Step #3 - Ingress PE-router 
associates the egress
label with the routing entry
in the VRF.
Step #2 - VPN labels are
propagated through
Multiprotocol BGP.

Summary: MPLS/VPN Architecture Overview     951
■
To support overlapping VPN topologies, the VRFs can be more granular than the VPNs and 
can participate in more than one VPN at a time. An attribute called a route target is needed to 
identify the set of VPNs in which a particular VRF participates. For maximum ﬂexibility, a 
set of route targets can be associated with a VRF or attached to a VPN route.
■
VPN IP addresses are prepended with 64-bit route distinguishers to make VPN addresses 
globally unique. These 96-bit addresses are exchanged between the PE-routers through 
MP-BGP, which also carries additional route attributes (for example, the route target) by 
means of optional BGP route attributes, called extended communities.
■
Each PE-router needs a unique router ID (host route—usually the loopback address) that is 
used to allocate a label and enable VPN packet forwarding across the backbone.
■
Each PE-router allocates a unique label to each route in each VRF (even if they have the same 
next hop) and propagates these labels together with 96-bit VPN addresses through MP-BGP.
■
Ingress PE-routers use a two-level MPLS label stack to label the VPN packets with a VPN 
label assigned by the egress PE-router and an IGP label identifying the PE-router assigned 
through the regular MPLS label distribution mechanisms. The label stack is prepended to the 
VPN packet, and the resulting MPLS packet is forwarded across the P-network.


A P P E N D I X D
Decimal to Binary 
Conversion Table
 
Decimal Value
Binary Value
Decimal Value
Binary Value
0
0000 0000
23
0001 0111
1
0000 0001
24
0001 1000
2
0000 0010
25
0001 1001
3
0000 0011
26
0001 1010
4
0000 0100
27
0001 1011
5
0000 0101
28
0001 1100
6
0000 0110
29
0001 1101
7
0000 0111
30
0001 1110
8
0000 1000
31
0001 1111
9
0000 1001
32
0010 0000
10
0000 1010
33
0010 0001
11
0000 1011
34
0010 0010
12
0000 1100
35
0010 0011
13
0000 1101
36
0010 0100
14
0000 1110
37
0010 0101
15
0000 1111
38
0010 0110
16
0001 0000
39
0010 0111
17
0001 0001
40
0010 1000
18
0001 0010
41
0010 1001
19
0001 0011
42
0010 1010
20
0001 0100
43
0010 1011
21
0001 0101
44
0010 1100
22
0001 0110
45
0010 1101
continues

954     Appendix D: Decimal to Binary Conversion Table
Decimal Value
Binary Value
Decimal Value
Binary Value
46
0010 1110
76
0100 1100
47
0010 1111
77
0100 1101
48
0011 0000
78
0100 1110
49
0011 0001
79
0100 1111
50
0011 0010
80
0101 0000
51
0011 0011
81
0101 0001
52
0011 0100
82
0101 0010
53
0011 0101
83
0101 0011
54
0011 0110
84
0101 0100
55
0011 0111
85
0101 0101
56
0011 1000
86
0101 0110
57
0011 1001
87
0101 0111
58
0011 1010
88
0101 1000
59
0011 1011
89
0101 1001
60
0011 1100
90
0101 1010
61
0011 1101
91
0101 1011
62
0011 1110
92
0101 1100
63
0011 1111
93
0101 1101
64
0100 0000
94
0101 1110
65
0100 0001
95
0101 1111
66
0100 0010
96
0110 0000
67
0100 0011
97
0110 0001
68
0100 0100
98
0110 0010
69
0100 0101
99
0110 0011
70
0100 0110
100
0110 0100
71
0100 0111
101
0110 0101
72
0100 1000
102
0110 0110
73
0100 1001
103
0110 0111
74
0100 1010
104
0110 1000
75
0100 1011
105
0110 1001
 (Continued)

Decimal to Binary Conversion Table
 955
Decimal Value
Binary Value
Decimal Value
Binary Value
106
0110 1010
136
1000 1000
107
0110 1011
137
1000 1001
108
0110 1100
138
1000 1010
109
0110 1101
139
1000 1011
110
0110 1110
140
1000 1100
111
0110 1111
141
1000 1101
112
0111 0000
142
1000 1110
113
0111 0001
143
1000 1111
114
0111 0010
144
1001 0000
115
0111 0011
145
1001 0001
116
0111 0100
146
1001 0010
117
0111 0101
147
1001 0011
118
0111 0110
148
1001 0100
119
0111 0111
149
1001 0101
120
0111 1000
150
1001 0110
121
0111 1001
151
1001 0111
122
0111 1010
152
1001 1000
123
0111 1011
153
1001 1001
124
0111 1100
154
1001 1010
125
0111 1101
155
1001 1011
126
0111 1110
156
1001 1100
127
0111 1111
157
1001 1101
128
1000 0000
158
1001 1110
129
1000 0001
159
1001 1111
130
1000 0010
160
1010 0000
131
1000 0011
161
1010 0001
132
1000 0100
162
1010 0010
133
1000 0101
163
1010 0011
134
1000 0110
164
1010 0100
135
1000 0111
165
1010 0101
continues
 (Continued)

956     Appendix D: Decimal to Binary Conversion Table
Decimal Value
Binary Value
Decimal Value
Binary Value
166
1010 0110
196
1100 0100
167
1010 0111
197
1100 0101
168
1010 1000
198
1100 0110
169
1010 1001
199
1100 0111
170
1010 1010
200
1100 1000
171
1010 1011
201
1100 1001
172
1010 1100
202
1100 1010
173
1010 1101
203
1100 1011
174
1010 1110
204
1100 1100
175
1010 1111
205
1100 1101
176
1011 0000
206
1100 1110
177
1011 0001
207
1100 1111
178
1011 0010
208
1101 0000
179
1011 0011
209
1101 0001
180
1011 0100
210
1101 0010
181
1011 0101
211
1101 0011
182
1011 0110
212
1101 0100
183
1011 0111
213
1101 0101
184
1011 1000
214
1101 0110
185
1011 1001
215
1101 0111
186
1011 1010
216
1101 1000
187
1011 1011
217
1101 1001
188
1011 1100
218
1101 1010
189
1011 1101
219
1101 1011
190
1011 1110
220
1101 1100
191
1011 1111
221
1101 1101
192
1100 0000
222
1101 1110
193
1100 0001
223
1101 1111
194
1100 0010
224
1110 0000
195
1100 0011
225
1110 0001
 (Continued)

Decimal to Binary Conversion Table
 957
Decimal Value
Binary Value
Decimal Value
Binary Value
226
1110 0010
227
1110 0011
228
1110 0100
229
1110 0101
230
1110 0110
231
1110 0111
232
1110 1000
233
1110 1001
234
1110 1010
235
1110 1011
236
1110 1100
237
1110 1101
238
1110 1110
239
1110 1111
240
1111 0000
241
1111 0001
242
1111 0010
243
1111 0011
244
1111 0100
245
1111 0101
246
1111 0110
247
1111 0111
248
1111 1000
249
1111 1001
250
1111 1010
251
1111 1011
252
1111 1100
253
1111 1101
254
1111 1110
255
1111 1111
 (Continued)


G L O S S A R Y
224.0.0.5
The All OSPF Routers multicast IP address, listened for by all OSPF routers.
224.0.0.6
The All OSPF DR Routers multicast IP address, listened for by DR and BDR 
routers.
2Way (OSPF)
A neighbor state that signiﬁes the other router has reached neighbor status, 
having passed the parameter check.
802.11a
A wireless LAN physical layer that operates at up to 54-Mbps data rates using 
OFDM in the 5-GHz band.
802.11b
A wireless LAN physical layer that operates at up to 11-Mbps data rates using DSSS 
in the 2.4-GHz band.
802.11g
A wireless LAN physical layer that is backward compatible with 802.11b and 
operates at up to 54-Mbps data rates using OFDM in the 2.4-GHz band.
802.11n
A wireless LAN physical layer that is currently (as of publication) under 
development that will offer data rates in the hundreds of megabits per second.
802.1Q
The IEEE standardized protocol for VLAN trunking.
802.1Q-in-Q
A mechanism in which VLAN information can extend over another set of 
802.1Q trunks by tunneling the original 802.1Q trafﬁc with another 802.1Q tag. It allows a 
service provider to support transparent VLAN services with multiple customers, even if the 
customers use overlapping VLAN numbers. 
AAA
See Authentication, authorization, and accounting. 
ABR
See Area Border Router.
Access Control Entry
An individual line in an ACL.
Access Control Server 
A term referring generically to a server that performs many AAA 
functions. It also refers to the software product Cisco Secure Access Control Server.

960      access link
access link
In Frame Relay, a link between a router and a Frame Relay switch.
access rate (AR)
The speed at which the access link is clocked. This choice affects the price of 
the connection and many aspects of trafﬁc shaping and policing, compression, quality of service, 
and other conﬁguration options.
ACE
See Access Control Entry. 
Ack (EIGRP)
An EIGRP message that is used to acknowledge reliable EIGRP messages, 
namely Update, Query, and Reply messages. Acks do not require an Ack.
ACS
See Access Control Server.
active (EIGRP)
A state for a route in an EIGRP topology table that indicates that the router is 
actively sending Query messages for this route, attempting to validate and learn the current best 
route to that subnet.
active mode FTP
Deﬁnes a particular behavior for FTP regarding the establishment of data 
TCP connections. In active mode, the FTP client uses the FTP PORT command, over the FTP 
control connection, to tell the FTP server the port on which the client should be listening for a new 
data connection. The server uses well-known port 20, and initiates a TCP connection to the FTP 
client’s earlier-declared port.
active scanning
Each 802.11 station periodically sends a probe request frame on each RF 
channel and monitors probe response frames that all access points within range send back. Stations 
use the signal strength of the probe response frames to determine which access point or ad hoc 
network to associate with.
actual queue depth
The actual number of packets in a queue at a particular time.
ad hoc mode
A wireless LAN that only includes wireless users and no access points. 802.11 
data frames in an ad hoc network travel directly between wireless users.
adaptive shaping
A Frame Relay Trafﬁc Shaping feature during which the shaping rate is 
reduced when the shaper notices congestion through the receipt of BECN or ForeSight messages.
adjacency (EIGRP)
Often used synonymously with neighbor, but with emphasis on the fact 
that all required parameters match, allowing routing updates to be exchanged between the routers.
adjacency table
A table used by CEF that holds information about adjacent IP hosts to which 
packets can be forwarded.

 adjacent (OSPF)
 961
adjacent (OSPF)
Any OSPF neighbor for which the database ﬂooding process has completed.
adjacent-layer interaction
On a single computer, one layer provides a service to a higher layer. 
The software or hardware that implements the higher layer requests that the next lower layer 
perform the needed function.
administrative scoping
Controls the distribution of multicast trafﬁc for the private multicast 
address range 239.0.0.0 to 239.255.255.255 by conﬁguring a ﬁlter and applying it on the 
interfaces.
administrative weight
A Cisco-proprietary BGP feature. The administrative weight can be 
assigned to each NLRI and path locally on a router, impacting the local router’s choice of the best 
BGP routes. The value cannot be communicated to another router. 
administratively scoped addresses
The range 239.0.0.0 through 239.255.255.255 that IANA 
has assigned for use in private multicast domains.
advertised window
See receiver’s advertised window.
AES
Advanced Encryption Standard. A superior encryption mechanism that is part of the 
802.11i standard and has much stronger security than TKIP.
AF
See Assured Forwarding.
aggregatable global unicast address
An IPv6 address format used for publicly registered IPv6 
addresses.
aggregate route
Another term for summary route.
AGGREGATOR
An optional transitive BGP path attribute that, for a summary route, lists the 
BGP RID and ASN of the router that created the summary.
AIS
Alarm Indication Signal. With T1s, the practice of sending all binary 1s on the line in 
reaction to problems, to provide signal transitions and allow recovery of synchronization and 
framing.
All OSPF DR Routers
The multicast IP address 224.0.0.6, listened for by DR and BDR 
routers.
All OSPF Routers
The multicast IP address 224.0.0.5, listened for by all OSPF routers.

962      Alternate state
Alternate state
An 802.1w RSTP port state in which the port is not the Root Port but is available 
to become the Root Port if the current Root Port goes down.
AMI
Alternate Mark Inversion. A serial-line encoding standard that sends alternating positive 
and negative 3-volt signals for binary 1, and no signal (0 V) for binary 0.
area (OSPF)
A contiguous group of data links that share the same OSPF area number.
Area Border Router
An OSPF router that connects to the backbone area and to one or more 
non-backbone area.
ARP
Address Resolution Protocol. Deﬁned in RFC 826, a protocol used on LANs so that an IP 
host can discover the MAC address of another device that is using a particular IP address.
AS number (ASN)
A number between 1 and 64,511 (public) and 64,512 and 65,535 (private) 
assigned to an AS for the purpose of proper BGP operation.
AS_CONFED_SEQ
A type of AS_PATH segment consisting of an ordered list of 
confederation sub-ASNs through which a route has been advertised.
AS_CONFED_SET
A type of AS_PATH segment consisting of an unordered list of 
confederation sub-ASNs consolidated from component subnets of a summary BGP route created 
inside a confederation.
AS_PATH
A BGP path attribute that lists ASNs through which the route has been advertised. 
The AS_PATH includes four types of segments: AS_SEQ, AS_SET, AS_CONFED_SEQ, and 
AS_CONFED_SET. Often, this term is used synonymously with AS_SEQ.
AS_PATH access list
A Cisco IOS conﬁguration tool, using the ip as-path access-list 
command, that deﬁnes a list of statements that match the AS_PATH BGP path attribute using 
regular expressions.
AS_PATH length
A calculation of the length of the AS_PATH PA, which includes 1 for each 
number in the AS_SEQ, 1 for an entire AS_SET segment, and possibly other considerations.
AS_PATH prepending
This term has two BGP-related deﬁnitions. First, it is the normal 
process in which a router, before sending an Update to an eBGP peer, adds its local ASN to the 
beginning of the AS_PATH path attribute. Second, it is the routing policy of purposefully adding 
one or more ASNs to the beginning of a route’s AS_PATH path attribute, typically to lengthen the 
AS_PATH and make the route less desirable in the BGP decision process.
AS_SEQUENCE
A type of AS_PATH segment consisting of an ordered list of ASNs through 
which the route has been advertised.

 AS_SET
 963
AS_SET
A type of AS_PATH segment consisting of an unordered list of ASNs consolidated 
from component subnets of a summary BGP route.
ASBR
Autonomous System Boundary Router. An OSPF router that redistributes routes from 
some other source into OSPF.
Assert message
Sent by a PIM-DM or PIM-SM router when it receives a multicast packet for a 
group on a LAN interface that is in the outgoing interface list for the group; includes the 
administrative distance of the unicast routing protocol used to learn the network of the source with 
its metric value. 
association ID
When a wireless station connects to an access point, the access point assigns 
an association ID (AID) to the station. Various protocols, such as power-save mode, make use of 
the association ID.
Assured Forwarding
A set of DiffServ PHBs that deﬁnes 12 DSCP values, with four queuing 
classes and three drop probabilities within each queuing class.
ATOMIC_AGGREGATE
A well-known discretionary BGP path attribute that ﬂags a route as 
being a summary route.
authentication
With routing protocols, the process by which the router receiving a routing 
update determines if the routing update came from a trusted router. 
Authentication, authorization, and accounting
Three core security functions.
authentication method
A term referring generically to ways in which a router or switch can 
determine whether a particular device or user should be allowed access.
authentication server
In 802.1X, the computer that stores usernames/passwords and veriﬁes 
that the correct values were submitted before authenticating the user.
authenticator
The 802.1X function implemented by a switch, in which the switch translates 
between EAPoL and RADIUS messages in both directions, and enables/disables ports based on 
the success/failure of authentication.
auto-negotiation
Ethernet process by which devices attached to the same cable negotiate their 
speed and the duplex settings over the cable.
autonomous system
In BGP, a set of routers inside a single administrative authority, grouped 
together for the purpose of controlling routing policies for the routes advertised by that group to 
the Internet.

964      Auto-RP
Auto-RP
Auto-Rendezvous Point. Cisco-proprietary protocol that can be used to designate an 
RP and send RP-Announce messages that advertise its IP address and groups. Also, it can be used 
to designate a mapping agent that interprets what IP address RP is advertising and for what groups. 
A mapping agent sends this information in the RP-Discovery messages so that all PIM-SM routers 
can learn the IP address of the RP and groups it is supporting automatically.
average queue depth
Calculated measurement based on the actual queue depth and the 
previous average. Designed to allow WRED to adjust slowly to rapid changes of the actual queue 
depth.
B8ZS
See Bipolar 8 Zero Substitution.
backbone area (OSPF)
Area 0; the area to which all other OSPF areas much connect in order 
for OSPF to work.
BackboneFast
Cisco-proprietary STP feature in which switches use messaging to conﬁrm the 
loss of Hello BPDUs in a switch’s Root Port, to avoid having to wait for maxage to expire, 
resulting in faster convergence.
Backup state
An 802.1w RSTP port state in which the port is an alternative Designated Port on 
some LAN segment.
Backup Designated Router
In OSPF, a router that is prepared to take over the Designated 
Router.
Backward Explicit Congestion Notiﬁcation 
A bit inside the Frame Relay header that, when 
set, implies that congestion occurred in the direction opposite (or backward) as compared with the 
direction of the frame.
Bc
See Committed Burst.
Bc bucket
Jargon used to refer to the ﬁrst of two buckets in the dual token bucket model; its 
size is Bc.
BDR
See Backup Designated Router.
Be
See Excess Burst.
Be bucket
Jargon used to refer to the second of two buckets in the dual token bucket model; its 
size is Be.
beacon
An 802.11 frame that access points or stations in ad hoc networks send periodically so 
that wireless stations can discover the presence of a wireless LAN and coordinate use of certain 
protocols, such as power-save mode. 

 BECN
 965
BECN
See Backward Explicit Congestion Notiﬁcation.
BGP
See Border Gateway Protocol. 
BGP decision process
A set of rules by which BGP examines the details of multiple BGP 
routes for the same NLRI and chooses the single best BGP route to install in the local BGP table.
BGP table
A table inside a router that holds the path attributes and NLRI known by the BGP 
implementation on that router.
BGP Update
A BGP message that includes withdrawn routes, path attributes, and NLRI.
Bipolar 8 Zero Substitution
A serial-line encoding standard that substitutes Bipolar Violations 
in a string of eight binary 0s to provide enough signal transitions to maintain synchronization.
Bipolar Violation
For some encoding schemes, consecutive signals must use opposite polarity 
in an effort to reduce DC current. A BPV occurs when consecutive signals are of the same polarity.
Blocking state
An 802.1D STP port state in which the port does not send or receive frames, 
except for listening for received Hello BPDUs.
boot ﬁeld
The low-order 4 bits of the conﬁguration register. These bits direct a router to load 
either ROMMON software (boot ﬁeld 0x0), RXBOOT software (boot ﬁeld 0x1), or a full-function 
IOS image.
Boot Protocol
A standard (RFC 951) protocol by which a LAN-attached host can dynamically 
broadcast a request for a server to assign it an IP address, along with other conﬁguration settings, 
including a subnet mask and default gateway IP address.
BOOTP
See Boot Protocol. 
Border Gateway Protocol
An exterior routing protocol designed to exchange preﬁx information 
between different autonomous systems. The information includes a rich set of characteristics 
called path attributes, which in turn allows for great ﬂexibility regarding routing choices.
BPDU Guard
Cisco-proprietary STP feature in which a switch port monitors for STP BPDUs 
of any kind, err-disabling the port upon receipt of any BPDU.
BPV
See Bipolar Violation. 
broadcast address
Ethernet MAC address that represents all devices on the LAN.

966      broadcast domain
broadcast domain
A set of all devices that receive broadcast frames originating from any 
device within the set. Devices in the same VLAN are in the same broadcast domain.
broadcast subnet
When subnetting a class A, B, or C address, the subnet for which all subnet 
bits are binary 1.
CB Marking 
See Class-Based Marking.
CBWFQ
See class-based weighted fair queuing.
CDPCP
CDP Control Protocol. The portion of PPP focused on supporting the CDP protocol.
CEF
See Cisco Express Forwarding.
Cell Loss Priority 
A bit in the ATM cell header that, when set to 1, means that if a device needs 
to discard frames, it should discard the frames with DE 1 ﬁrst.
CGMP
See Cisco Group Management Protocol. 
Challenge Handshake Authentication Protocol
An Internet standard authentication protocol 
that uses secure hashes and a three-way handshake to perform authentication over a PPP link.
CHAP
See Challenge Handshake Authentication Protocol. 
CIDR
See Classless interdomain routing. 
CIR
See Committed information rate.
Cisco Express Forwarding
An optimized Layer 3 forwarding path through a router or switch. 
CEF optimizes routing table lookup by creating a special, easily searched tree structure based 
on the contents of the IP routing table. The forwarding information is called the Forwarding 
Information Base (FIB), and by caching adjacency information is called the adjacency table.
Cisco Group Management Protocol
A Cisco-proprietary feature. After a Cisco multicast 
router receives IGMP Join or Leave messages from hosts, it communicates to the connected Cisco 
switches, telling them which hosts (based on their unicast MAC addresses) have joined or left each 
multicast group. Switches examine their CAM tables and determine on which ports these hosts are 
connected and either forward multicast trafﬁc or stop forwarding on those ports only.
Cisco Structured Wireless-Aware Network
A framework for integrating wired and wireless 
networks based on the Cisco product line of wireless LAN products.
Cisco SWAN
See Cisco Structured Wireless-Aware Network. 

 Cisco WDS
 967
Cisco WDS
See Cisco Wireless Domain Services. 
Cisco Wireless Domain Services
A set of Cisco IOS Software features that enhances and 
simpliﬁes wireless LAN client mobility, security, deployment, and management.
Class-Based Marking
An MQC-based feature of IOS that is used to classify and mark packets 
for QoS purposes.
class-based weighted fair queuing
A Cisco IOS queuing tool that uses MQC conﬁguration 
commands and reserves a minimum bandwidth for each queue.
class map
A term referring to the MQC class-map command and its related subcommands, 
which are used for classifying packets.
Class of Service
A 3-bit ﬁeld in an ISL header used for marking frames. Also, used generically 
to refer to either the ISL CoS ﬁeld or the 802.1Q User Priority ﬁeld.
Class Selector
A DiffServ PHB that deﬁnes eight values that provide backward compatibility 
with IP Precedence.
classful IP addressing
A type of logic for how a router uses a default route. A convention for 
discussing and thinking about IP addresses by which class A, B, and C default network preﬁxes 
(of 8, 16, and 24 bits, respectively) are considered.
classful routing
A type of logic for how a router uses a default route. When a default route 
exists, and the class A, B, or C network for the destination IP address does not exist in the routing 
table, the default route is used. If any part of that classful network exists in the routing table, but 
the packet does not match any existing subnet of that classful network, the packet does not match 
the default route and thus is discarded.
classless IP addressing
A convention for IP addresses in which class A, B, and C default 
network preﬁxes (of 8, 16, and 24 bits, respectively) are ignored.
Classless interdomain routing
Deﬁned in RFCs 1517–1520, a scheme to help reduce Internet 
routing table sizes by administratively allocating large blocks of consecutive classful IP network 
numbers to ISPs for use in different global geographies. CIDR results in large blocks of networks 
that can be summarized, or aggregated, into single routes.
classless routing
A type of logic for how a router uses a default route. When a default route 
exists, and no more speciﬁc match is made between the destination of the packet and the routing 
table, the default route is used.
Clear To Send
On a serial cable, the pin lead set by the DCE to tell the DTE that the DTE is 
allowed send data.

968      client tracking
client tracking
Records client authentication and roaming events, which are sent to the 
CiscoWorks Wireless LAN Solution Engine (WLSE) to monitor client associations to speciﬁc 
access points.
CLP
See Cell Loss Priority.
CLUSTER_LIST
An optional nontransitive BGP path attribute that lists the route reﬂector 
cluster IDs through which a route has been advertised, as part of a loop-prevention process similar 
to the AS_PATH attribute.
collision domain
A set of all devices for which any frame sent by one of the devices would 
collide with any frames transmitted at the same time by any of the other devices in the set. 
Committed Burst
With shaping, the number of bits allowed to be sent every Tc. Also deﬁnes 
the size of the token bucket when Be = 0.
Committed information rate
In shaping and policing, commonly used to refer to the shaping 
or policing rate. For WAN services, a common reference to the bit rate deﬁned in the WAN service 
business contract for each VC.
Common Spanning Tree
A single instance of STP that is applied to multiple VLANs, typically 
when using the 802.1Q trunking standard.
COMMUNITY
An optional transitive BGP path attribute used to store 32-bit decimal values. 
Used for ﬂexible grouping of routes by assigning the group the same COMMUNITY value. Other 
routers can apply routing policies based on the COMMUNITY value. Used in a large number of 
BGP applications.
community VLAN
With private VLANs, a secondary VLAN in which the ports can send and 
receive frames with each other, but not with ports in other secondary VLANS.
component route
A term used in this book to refer to a route that is included in a larger 
summary route.
confederation
A BGP feature that overcomes the requirement of a full mesh of iBGP peers 
inside a single AS by separating the AS into multiple sub-autonomous systems.
confederation ASN
The ASN assigned to a confederation sub-AS.
confederation eBGP peer
A BGP peer connection between two routers inside the same ASN, 
but in different confederation sub-autonomous systems.

 confederation identifier
 969
confederation identiﬁer
In an IOS confederation conﬁguration, the confederation identiﬁer is 
the actual ASN as seen by eBGP peers.
conﬁguration register
A 16-bit number set with a router conﬁg-register command. It is used 
to set several low-level features related mainly to accessing the router and what the router does 
when powered on.
conform
A category used by a policer to classify packets relative to the trafﬁc contract. The bit 
rate implied by all conforming packets is within the trafﬁc contract.
Congestion Avoidance
A method for how a TCP sender grows its calculated CWND variable, 
thereby growing the allowed window for the connection. Congestion Avoidance grows CWND 
linearly. 
congestion window
A mechanism used by TCP senders to limit the dynamic window for a TCP 
connection, to reduce the sending rate when packet loss occurs. The sender considers both the 
advertised window size and CWND, using the smaller of the two.
control plane
In IP routing, a term referring to the building of IP routing tables by IP routing 
protocols.
CoS
See Class of Service.
counting to inﬁnity
A type of routing protocol convergence event in which the metric for a 
route increases slightly over time because of the advertisement of an invalid route.
cross-over cable
Copper cable with RJ-45 connectors in which a twisted pair at pins 1,2 on 
the ﬁrst end of the cable is connected to pins 3,6 on the other end, with a second pair connected to 
pins 3,6 on the ﬁrst end and pins 1,2 on the other end.
CS
See Class Selector.
CSMA/CD
Carrier sense multiple access with collision detection. A media-access mechanism 
where devices ready to transmit data ﬁrst check the channel for a carrier. If no carrier is sensed for 
a speciﬁc period of time, a device can transmit. If two devices transmit simultaneously, a collision 
occurs and is detected by all colliding devices. This collision subsequently causes each device to 
delay retransmissions of the collided frame for some random length of time.
CST
See Common Spanning Tree. 
CTS
See Clear To Send.

970      custom queuing (CQ)
custom queuing (CQ)
A Cisco IOS queuing tool most notable for its reservation of a minimum 
bandwidth for each queue.
CWND
See congestion window.
D4 framing
Another name for Superframe. 
DAI
See Dynamic ARP Inspection. 
Data Carrier Detect
On a serial cable, the pin lead set by the DCE to imply a working link.
Data communications equipment
DCE devices are one of two devices on either end of a 
communications circuit, speciﬁcally the device with more control over the communications. 
Frame Relay switches are DCE devices. DCEs are also known as data circuit-terminating 
equipment (DTE).
Database Description
A type of OSPF packet used to exchange and acknowledge LSA headers. 
Sometimes called DBD.
Data-link connection identiﬁer
A Frame Relay address used in Frame Relay headers to 
identify the VC
data plane
In IP routing, a term referring to the process of forwarding packets through a router.
Data Set Ready
On a serial cable, the pin lead set by the DCE to imply that the DCE is ready 
to signal using pin leads
Data terminal equipment
From one perspective, DTE devices are one of two devices on either 
end of a communications circuit, speciﬁcally the device with less control over the communi-
cations. In Frame Relay, routers connected to a Frame Relay access link are DTE devices.
Data Terminal Ready
On a serial cable, the pin lead set by the DTE to imply that the DTE is 
ready to signal using pin leads.
DCD
See Data Carrier Detect. 
DCE
See Data communications equipment. 
DD
See Database Description.
DE
See Discard Eligible. 

 Dead Time/Interval
 971
Dead Time/Interval
With OSPF, the timer used to determine when a neighboring router has 
failed, based on a router not receiving any OSPF messages, including Hellos, in this timer period.
default route
A route that is used for forwarding packets when the packet does not match any 
more speciﬁc routes in the IP routing table.
dense-mode protocol
A multicast routing protocol whose default action is to ﬂood multicast 
packets throughout a network. 
Designated Port
With Spanning Tree Protocol, the single port on each LAN segment from 
which the best Hello BPDU is forwarded.
designated router
With PIM on a multiaccess network, the PIM router with the highest IP 
address on the subnet. With OSPF, the OSPF router that wins an election amongst all current 
neighbors. The DR is responsible for ﬂooding on the subnet, and for creating and ﬂooding the type 2 
LSA for the subnet.
DHCP
See Dynamic Host Conﬁguration Protocol.
DHCP snooping
A switch feature in which the switch examines DHCP messages and, 
for untrusted ports, ﬁlters all messages typically sent by servers and inappropriate messages 
sent by clients. It also builds a DHCP snooping binding table that is used by DAI and IP Source 
Guard.
DHCP snooping binding database
The list of entries learned by the switch DHCP snooping 
feature. The entries include the MAC address used as the device’s DHCP client address, 
the assigned IP address, the VLAN, and the switch port on which the DHCP assignment messages 
ﬂowed.
Differentiated Services
A set of QoS RFCs that redeﬁnes the IP header’s ToS byte, and 
suggests speciﬁc settings of the DSCP ﬁeld and the implied QoS actions based on those settings.
Differentiated Services Code Point
The ﬁrst 6 bits of the DS ﬁeld, used for QoS marking.
differentiated tail drop
A term relating to Cisco LAN switch tail-drop logic, in which multiple 
tail-drop thresholds may be assigned based on CoS or DSCP, resulting in some frames being 
discarded more aggressively than others.
DiffServ
See Differentiated Services.
Diffusing Update Algorithm
A term referring to EIGRP’s internal processing logic.

972      Digital Signal Level 0
Digital Signal Level 0
Inside telcos’ original TDM hierarchy, the smallest unit of 
transmission at 64 kbps.
Digital Signal Level 1
Inside telcos’ original TDM hierarchy, a unit that combines multiple 
DS0s into a single channel— 24 DS0s (plus overhead) for a T1, and 30 (plus overhead) for an E1.
Digital Signal Level 3
Inside telcos’ original TDM hierarchy, a unit that combines multiple 
DS1s into a single channel— 28 DS1s (plus overhead) for a T3, and 16 E1 DS1s (plus overhead) 
for an E3.
Dijkstra
Alternate name for the SPF algorithm, named for its inventor, Edsger W. Dijkstra.
Direct sequence spread spectrum
A type of spread spectrum that spreads RF signals over the 
frequency spectrum by representing each data bit by a longer code. 802.11b speciﬁes the use of 
DSSS.
Disabled state
An 802.1D STP port state in which the port has been administratively disabled.
Discard Eligible
A bit in the Frame Relay header that, when set to 1, means that if a device 
needs to discard frames, it should discard the frames with DE 1 ﬁrst.
Discarding state
An 802.1w RSTP port state in which the port is not forwarding or receiving; 
covers 802.1D port states disabled, blocking, and listening.
distance vector
The underlying algorithms associated with RIP. 
Distance Vector Multicast Routing Protocol
Operates in dense mode and depends on its own 
unicast routing protocol that is similar to RIP to perform its multicast functions.
distributed coordination function
The mandatory contention-based 802.11 access protocol 
that is also referred to as CSMA/CA. 
distribution list
A Cisco IOS conﬁguration tool for routing protocols by which routing updates 
may be ﬁltered.
DLCI
See Data-link connection identiﬁer.
downstream router
The router that will receive the group trafﬁc when a multicast router 
forwards group trafﬁc to another router. 

 DR
 973
DR
See Designated router. 
DR election (OSPF)
The process by which neighboring OSPF routers examine their Hello 
messages and elect the DR. The decision is based on priority (highest), or RID (highest) if priority 
is a tie.
DROther
The term to describe a router that is neither the DR nor the BDR on a subnet that elects 
a DR and BDR. 
DS ﬁeld
The second byte of the IP header, formerly known as the ToS byte and redeﬁned by 
DiffServ.
DS0
See Digital Signal Level 0.
DS1
See Digital Signal Level 1.
DS3
See Digital Signal Level 3.
DSCP
See Differentiated Services Code Point.
DSCP-to-CoS map
A mapping between each DSCP value and a corresponding CoS value, 
often used in Cisco LAN switches when performing classiﬁcation for egress queuing.
DSCP-to-threshold map
A mapping between each DSCP value and a WRED threshold, often 
used in Cisco LAN switches when performing WRED.
DSR
See Data Set Ready.
DSSS
See Direct sequence spread spectrum.
DTE
See Data terminal equipment. 
DTIM interval
The number of beacons that governs how often multicast frames are sent over a 
wireless LAN. 
DTP
See Dynamic Trunking Protocol. 
DTR
See Data Terminal Ready.
DUAL
See Diffusing Update Algorithm.
Dual FIFO
A Cisco IOS interface software queue queuing strategy implemented automatically 
when using either form of Frame Relay fragmentation. The system then interleaves packets from 
the high-priority queue between fragments of the medium-priority queue.

974      dual stack
dual stack
An IPv6 migration strategy in which a host or router supports both IPv4 and IPv6 
natively.
dual token bucket
A conceptual model used by CB Policing when using an excess burst.
dual-rate, three-color policer
Policing in which two rates are metered, and packets are placed 
into one of three categories (conform, exceed, or violate).
DVMRP
See Distance Vector Multicast Routing Protocol.
Dynamic ARP Inspection
A switch feature with which the switch watches ARP messages, 
determines if those messages may or may not be part of some attack, and ﬁlters those that look 
suspicious.
Dynamic Host Conﬁguration Protocol
A standard (RFC 2131) protocol by which a host can 
dynamically broadcast a request for a server to assign to it an IP address, along with other 
conﬁguration settings, including a subnet mask and default gateway IP address. DHCP provides a 
great deal of ﬂexibility and functionality compared with RARP and BOOTP.
Dynamic Trunking Protocol
A Cisco-proprietary protocol used to dynamically negotiate 
whether the devices on an Ethernet segment want to form a trunk and, if so, which type (ISL or 
802.1Q).
E1
A name used for DS1 lines inside the European TDM hierarchy.
E1 route (OSPF)
An OSPF external route for which internal OSPF cost is added to the cost of 
the route as it was redistributed into OSPF.
E2 route (OSPF)
An OSPF external route for which internal OSPF cost is not added to the cost 
of the route as it was redistributed into OSPF.
E3
A name used for DS3 lines inside the European TDM hierarchy.
EAP
See Extensible Authentication Protocol.
EAP over LAN
The encapsulation of EAP messages directly inside LAN frames. This 
encapsulation is used between the supplicant and the authenticator.
EAPoL
See EAP over LAN. 
eBGP
See External BGP. 

 eBGP multihop
 975
eBGP multihop
A BGP feature that deﬁnes the IP TTL ﬁeld value in packets sent between two 
eBGP peers. This feature is required when using IP addresses other than the interface IP address 
on the link between peers.
EF
See Expedited Forwarding.
EGP
See Exterior Gateway Protocol.
ELMI
See Enhanced Local Management Interface.
enable password
The password required by the enable command. Also, this term may 
speciﬁcally refer to the password deﬁned by the enable password command.
enable secret
The MD5-encoded password deﬁned by the enable secret command.
encapsulation
The process of taking a protocol data unit (PDU) from some other source and 
placing a header in front of the original PDU, and possibly a trailer behind it.
encoding
The process of changing the electrical characteristics on a transmission medium, 
based on deﬁned rules, to represent data.
enhanced editing
The Cisco IOS feature by which special short key sequences can be used to 
move the cursor inside the current command line to more easily change a command.
Enhanced Local Management Interface
A Cisco-proprietary LMI protocol, implemented 
in Cisco WAN switches and routers, through which the switch can inform the router about 
parameters for each VC, including CIR, Bc, and Be.
ESF
Extended Superframe. An enhanced version of T1 framing, as compared with the earlier 
Superframe (D4) standard.
established
A BGP neighbor state in which the BGP neighbors have stabilized and can 
exchange routing information using BGP Update messages.
EUI-64
A speciﬁcation for the 64-bit interface ID in an IPv6 address, composed of the ﬁrst half 
of a MAC address, hex FFFE, and the last half of the MAC.
exceed
A category used by a policer to classify packets relative to the trafﬁc contract. With two-
color policers, these packets are considered to be above the contract; for three-color, these packets 
are above the Bc setting, but within the Be setting.
Excess Burst 
With shaping and policing, the number of additional bits that may be sent after a 
period of relative inactivity. 

976      expedite queue
expedite queue
A term used with Cisco LAN switches, referring to a queue treated with strict-
priority scheduling.
Expedited Forwarding
A DiffServ PHB, based on DSCP EF (decimal 46), that provides low-
latency queuing behavior as well as policing protection to prevent EF trafﬁc from starving queues 
for other types of trafﬁc.
Extensible Authentication Protocol
Deﬁned in RFC 3748, the protocol used by IEEE 802.1X 
for exchanging authentication information.
Exterior Gateway Protocol
An exterior routing protocol that predates BGP. It is no longer used 
today.
exponential weighting constant
Used by WRED to calculate the rate at which the average 
queue depth changes as compared with the current queue depth. The larger the number, the slower 
the change in the average queue depth.
External BGP
A term referring to how a router views a BGP peer relationship, in which the peer 
is in another AS.
external route
From the perspective of one routing protocol, a route that was learned by using 
route redistribution.
external route
A characteristic of a route, as deﬁned by a particular routing protocol, that 
means that the route was learned by that routing protocol through the route redistribution 
process.
Fast Secure Roaming
Enables a wireless client to securely roam between access points in the 
same subnet or between subnets with access point handoff times within 50 ms.
fast switching
An optimized Layer 3 forwarding path through a router. Fast switching 
optimizes routing table lookup by creating a special, easily searched table of known ﬂows 
between hosts.
FD
See Feasible distance.
feasibility condition
With EIGRP, for a particular route, the case in which the RD is lower than 
the FD.
Feasible distance
With EIGRP, the metric value for the lowest-metric route to a particular 
subnet.

 feasible successor
 977
feasible successor
With EIGRP, a route that is not a successor route, but that meets the 
feasibility condition; can be used when the successor route fails, without causing loops.
FECN
See Forward Explicit Congestion Notiﬁcation.
FHSS
See Frequency hopping spread spectrum.
FIB
See Forwarding Information Base.
ﬁnish time (FT)
A term used with WFQ for the number assigned to a packet as it is enqueued 
into a WFQ queue. WFQ schedules the currently lowest FT packet next.
ﬂash updates
See triggered updates.
Flush timer
With RIP, a per-route timer, which is reset and grows with the Invalid timer. When 
the Flush timer mark is reached (default 240 seconds), the router removes the route from the 
routing table, and now accepts any other routes about the failed subnet.
ForeSight
A Cisco-proprietary messaging protocol implemented in WAN switches that can be 
used to signal network status, including congestion, independent of end-user frames and cells.
Forward Delay timer
An STP timer that dictates how long a port should stay in the listening 
state and the learning state.
Forward Explicit Congestion Notiﬁcation
A bit in the LAPF Frame Relay header that, when 
set to 1, implies that the frame has experienced congestion.
Forwarding Information Base
A table used by CEF that holds information from the IP routing 
table in an mtrie structure for optimized searching and matching with destination IP addresses.
Forwarding state
An 802.1D STP port state in which the port sends and receives frames.
fraggle attack
An attack similar to a smurf attack, but using packets for the UDP Echo 
application instead of ICMP.
fragmentation
In wireless LANs, a mechanism that counters issues related to RF interference 
by dividing a larger 802.11 data frame into smaller frames that are sent independently to the 
destination. Also see LFI.
framing
From a Layer 1 perspective, the process of using special strings of electrical signals 
over a transmission medium to inform the receiver as to which bits are overhead bits, and which 
ﬁt into individual subchannels.

978      Frequency hopping spread spectrum
Frequency hopping spread spectrum
A type of spread spectrum that spreads RF signals 
over the frequency spectrum by transmitting the signal at different frequencies according to 
a hopping pattern. One of the original 802.11 physical layers used FHSS to offer data rates of 
1 and 2 Mbps.
FRF
Frame Relay Forum. A vendor consortium that formerly worked to further Frame Relay 
common vendor standards.
FRF.5
An FRF standard for Frame Relay-to-ATM Service Interworking in which both DTEs use 
Frame Relay, with ATM in between.
FRF.8
An FRF standard for Frame Relay-to-ATM Service Interworking in which one DTE uses 
Frame Relay and one uses ATM.
FRF.9
An FRF standard for payload compression. 
FRF.11-c
An FRF standard for LFI for VoFR (FRF.11) VCs, in which all voice frames are 
interleaved in front of data frames’ fragments.
FRF.12
An FRF standard for LFI for data (FRF.3) VCs. 
full drop
A WRED process by which WRED discards all newly arriving packets intended for a 
queue, based on whether the queue’s maximum threshold has been exceeded.
full duplex
Ethernet feature in which a NIC or Ethernet port can both transmit and receive at the 
same instant in time. It can be used only when there is no possibility of collisions. Loopback 
circuitry on NIC cards is disabled to use full duplex.
full SPF calculation
An SPF calculation as a result of changes inside the same area as a router, 
for which the SPF run must examine the full LSDB.
full update
A routing protocol feature by which the routing update includes the entire set of 
routes, even if some or all of the routes are unchanged.
fully adjacent (OSPF)
Any OSPF neighbor for which the database ﬂooding process has 
completed.
Garbage timer
See Flush timer.
gateway of last resort
The notation in a Cisco IOS IP routing table that identiﬁes the route used 
by that router as the default route.

 Get
 979
Get
In the context of SNMP, the Get command is sent by an SNMP manager, to an agent, 
requesting the value of a single MIB variable identiﬁed in the request. The Get request identiﬁes 
the exact variable whose value the manager wants to retrieve. Introduced in SNMPv1.
GetBulk
In the context of SNMP, the GetBulk command is sent by an SNMP manager, to 
an agent, requesting the values of multiple variables. The GetBulk command allows retrieval 
of complex structures, like a routing table, with a single command, as well as easier MIB 
walking.
GetNext
In the context of SNMP, the GetNext command is sent by an SNMP manager, to an 
agent, requesting the value of a single MIB variable. The GetNext request identiﬁes a variable 
for which the manager wants the variable name and value of the next MIB leaf variable in 
sequence. 
GLBP
Gateway Load Balancing Protocol. A Cisco-proprietary feature by which multiple 
routers can provide interface IP address redundancy, as well as cause a set of clients to load-
balance their trafﬁc across multiple routers inside the GLBP group.
global routing preﬁx
The ﬁrst 48 bits of an IPv6 global address, used for efﬁcient route 
aggregation.
GLOP addressing
The range 233.0.0.0 through 233.255.255.255 that IANA has reserved (RFC 
2770) on an experimental basis. It can be used by anyone who owns a registered autonomous 
system number to create 256 global multicast addresses.
going active
EIGRP jargon meaning that EIGRP has placed a route into active status.
Goodbye (EIGRP)
An EIGRP message that is used by a router to notify its neighbors when the 
router is gracefully shutting down.
Graft Ack message
Message sent by a PIM-DM router to a downstream router when it receives 
a Graft message from the downstream router; sent using the unicast address of the downstream 
router.
Graft message
Message sent by a PIM-DM router to its upstream router asking to quickly 
restart forwarding the group trafﬁc; sent using the unicast address of the upstream router. 
granted window
See receiver’s advertised window.
half duplex
Ethernet feature in which a NIC or Ethernet port can only transmit or receive at 
the same instant in time, but not both. Half duplex is required when a possibility of collisions 
exists. 

980      hardware queue
hardware queue
A small FIFO queue associated with each router’s physical interface, for the 
purpose of making packets available to the interface hardware, removing the need for a CPU 
interrupt to start sending the next packet out the interface. 
HDB3
See High Density Binary 3.
Hello (EIGRP)
An EIGRP message that identiﬁes neighbors, exchanges parameters, and is sent 
periodically as a keepalive function. Hellos do not require an Ack.
Hello (OSPF)
A type of OSPF packet used to discover neighbors, check for parameter 
agreement, and monitor the health of another router.
hello interval
With some routing protocols, the time period between successive Hello 
messages.
Hello timer
An STP timer that dictates the interval at which the Root switch generates and 
sends Hello BPDUs.
High Density Binary 3
A serial-line encoding standard like B8ZS, but with each set of four 
consecutive 0s being changed to include a Bipolar Violation to maintain synchronization.
Hold timer
With EIGRP, the timer used to determine when a neighboring router has failed, 
based on a router not receiving any EIGRP messages, including Hellos, in this timer period.
Holddown timer
With RIP, a per-route timer (default 180 seconds) that begins when a route’s 
metric changes to a larger value.
HSRP
Hot Standby Router Protocol. A Cisco-proprietary feature by which multiple routers can 
provide interface IP address redundancy so that hosts using the shared, virtual IP address as their 
default gateway can still reach the rest of a network even if one or more routers fail.
I/G bit
The most signiﬁcant bit in the most signiﬁcant byte of an Ethernet MAC address, its 
value implies that the address is a unicast MAC address (binary 0) or not (binary 1). 
iBGP
Internal BGP. A term referring to how a router views a BGP peer relationship, in which 
the peer is in the same AS.
IEEE 802.1X
An IEEE standard that, when used with EAP, provides user authentication before 
their connected switch port allows the device to fully use the LAN.
IGMP
Internet Group Management Protocol. A communication protocol between hosts and a 
multicast router by which routers learn of which multicast groups’ packets need to be forwarded 
onto a LAN. 

 IGMP snooping
 981
IGMP snooping
A method for optimizing the ﬂow of multicast IP packets passing through a 
LAN switch. The switch using IGMP snooping examines IGMP messages to determine which 
ports need to receive trafﬁc for each multicast group. 
IGMPv1 Host Membership Query
A message sent by the multicast router, by default every 
60 seconds, on each of its LAN interfaces to determine whether any host wants to receive multicast 
trafﬁc for any group.
IGMPv1 Host Membership Report
A message that each host sends, either in response to a 
router Query message or on its own, to all multicast groups for which it would like to receive 
multicast trafﬁc.
IGMPv2 Group-Speciﬁc Query
A message sent by a router, after receiving a Leave message 
from a host, to determine whether there are still any active members of the group. The router uses 
the group address as the destination address.
IGMPv2 Host Membership Query
A message sent by a multicast router, by default every 
125 seconds, on each of its LAN interfaces to determine whether any host wants to receive 
multicast trafﬁc for any group.
IGMPv2 Host Membership Report
A message sent by each host, either in response to a router 
Query or on its own, to all multicast groups for which it would like to receive multicast trafﬁc.
IGMPv2 Leave
A message sent by a host when it wants to leave a group, addressed to the All 
Multicast Routers address 224.0.0.2.
IGMPv3 Host Membership Query
A message sent by a multicast router, by default every 
125 seconds, on each of its LAN interfaces to determine whether any host wants to receive 
multicast trafﬁc for any group.
IGMPv3 Host Membership Report
A message sent by each host, either in response to a router 
query or on its own, to all multicast groups for which it would like to receive multicast trafﬁc. The 
destination address on the Report is 224.0.0.22, and a host can specify the source address(es) from 
which it would like to receive the group trafﬁc.
InARP
See Inverse ARP.
Inform
In the context of SNMP, the Inform command is sent by an SNMP manager to 
communicate a set of variables, and their values, to another SNMP manager. The main purpose is 
to allow multiple managers to exchange MIB information, and work together, without requiring 
each manager to individually use Get commands to gather the data. 

982      infrastructure mode
infrastructure mode
A wireless LAN that includes the use of access points. Infrastructure 
mode connects wireless users to a wired network and allows wireless users to roam throughout a 
facility between different access points. All 802.11 data frames in an infrastructure wireless LAN 
travel through the access point. 
input event
Any occurrence that could change a router’s EIGRP topology table, including a 
received Update or Query, a failed interface, or the loss of a neighbor.
Inside Global address
A NAT term describing an IP address representing a host that resides 
inside the enterprise network, with the address being used in packets outside the enterprise 
network.
Inside Local address
A NAT term describing an IP address representing a host that resides 
inside the enterprise network, with the address being used in packets inside the enterprise network.
interface ID
64 bits at the end of an IPv6 global address, used to uniquely identify each host in 
a subnet.
internal DSCP
A term used with Cisco LAN switches, referring to a DSCP value used when 
making QoS decisions about a frame. This value may not be the actual DSCP value in the IP 
header encapsulated inside the frame.
internal router (OSPF)
A router that is not an ABR or ASBR in that all of its interfaces connect 
to only a single OSPF area.
Invalid timer
With RIP, a per-route timer that increases until the router receives a routing 
update that conﬁrms the route is still valid, upon which the timer is reset to 0. If the updates cease, 
the Invalid timer will grow, until reaching the timer setting (default 180 seconds), after which the 
route is considered invalid.
Inverse ARP
Deﬁned in RFC 1293, this protocol allows a Frame Relay–attached device to react 
to a received LMI “PVC up” message by announcing its Layer 3 addresses to the device on the 
other end of the PVC.
IPCP
See IP Control Protocol.
IP Control Protocol
The portion of PPP focused on negotiating IP features—for example, TCP 
or RTP header compression.
IP forwarding
The process of forwarding packets through a router. Also call IP routing.
IP PBX
A component that interfaces with a phone using IP and provides connections to the 
Public Switched Telephone Network (PSTN).

 IP Precedence
 983
IP Precedence
A 3-bit ﬁeld in the ﬁrst 3 bits of the ToS byte in the IP header, used for QoS 
marking.
IP preﬁx list
See preﬁx list.
IP routing
The process of forwarding packets through a router. Also called IP forwarding.
IP Source Guard
A switch feature that examines incoming frames, comparing the source IP 
and MAC addresses to the DHCP snooping binding database, ﬁltering frames whose addresses are 
not listed in the database for the incoming interface.
IPv4
Version 4 of the IP protocol, which is the generally deployed version worldwide (at 
publication), and uses 32-bit IP addresses.
IPv6
Version 6 of the IP protocol, which uses 128-bit IP addresses. 
ISL
Inter-Switch Link. Cisco-proprietary VLAN trunking protocol.
isolated VLAN
With private VLANs, a secondary VLAN in which the ports can send and 
receive frames only with promiscuous ports in the primary VLAN.
Join/Prune message
Sent by a PIM router to its upstream router to either request that the 
upstream router forward the group trafﬁc or stop forwarding the group trafﬁc that is currently 
being forwarded. If a PIM router wants to start receiving the group trafﬁc, it lists the group address 
under the Join ﬁeld. If it wants the upstream router to stop forwarding the group trafﬁc, it lists the 
group address under the Prune ﬁeld.
joining a group
The process of installing a multicast application; also referred to as launching 
an application.
K value
EIGRP (and IGRP) allows for the use of bandwidth, load, delay, MTU, and link 
reliability; the K values refer to an integer constant that includes these ﬁve possible metric 
components. Only bandwidth and delay are used by default, to minimize recomputation of metrics 
for small changes in minor metric components.
LACP
Link Aggregation Control Protocol. Deﬁned in IEEE 802.1AD, deﬁnes a messaging 
protocol used to negotiate the dynamic creation of PortChannels (EtherChannels) and to choose 
which ports can be placed into an EtherChannel.
LAPF
See Link Access Procedure for Frame-Mode Bearer Services.

984      Layer 2 payload compression
Layer 2 payload compression
The process of taking the payload inside a Layer 2 frame, 
including the headers of Layer 3 and above, compressing the data, and then uncompressing the 
data on the receiving router.
Layer 2 protocol tunneling
Another name for 802.1Q-in-Q. See 802.1Q-in-Q. 
Layer x PDU
The PDU used by a particular layer of a networking model, with x deﬁning the 
layer.
LCP
See Link Control Protocol.
Learning state
An 802.1D STP transitory port state in which the port does not send or receive 
frames, but does learn the source MAC addresses from incoming frames.
LFI
See Link Fragmentation and Interleaving.
limiting query scope (EIGRP)
An effort to reduce the query scope with EIGRP, using route 
summarization or EIGRP stub routers.
line coding
See encoding.
Link Access Procedure for Frame-Mode Bearer Services
An ITU standard Frame Relay 
header, including the DLCI, DE, FECN, and BECN bits in the LAPF header, and a frame check 
in the LAPF trailer.
Link Control Protocol
The portion of PPP focused on features that are unrelated to any speciﬁc 
Layer 3 protocol.
Link Fragmentation and Interleaving
The process of breaking a frame into pieces, sending 
some of the fragments, and then sending all or part of a different packet, all of which is done to 
reduce the delay of the second packet.
Link-State Acknowledgment
A type of OSPF packet used to acknowledge LSU packets.
Link-state advertisement
The OSPF data structure that describes topology information.
Link-state database
The data structure used by OSPF to hold LSAs.
link-state routing protocol
Any routing protocol that uses the concept of using the SPF 
algorithm with an LSDB to compute routes.
Link-State Update
A type of OSPF packet, used to communicate LSAs to another router.

 Listening state
 985
Listening state
An 802.1D STP transitory port state in which the port does not send or receive 
frames, and does not learn MAC addresses, but does wait for STP convergence and for CAM 
ﬂushing by the switches in the network.
LMI
See Local Management Interface.
local computation
An EIGRP router’s reaction to an input event, leading to the use of a feasible 
successor or going active on a route.
LOCAL_AS
A reserved value for the BGP COMMUNITY path attribute that implies that the 
route should not be advertised outside the local confederation sub-AS.
Local Management Interface
The Frame Relay protocol used between a DCE and DTE to 
manage the connection. Signaling messages for SVCs, PVC Status messages, and keepalives are 
all LMI messages.
LOCAL_PREF
A BGP path attribute that is communicated throughout a single AS to signify 
which route of multiple possible routes is the best route to be taken when leaving that AS. A larger 
value is considered to be better.
LOF
See Loss of Frame.
Loop Guard
Protects against problems caused by unidirectional links between two switches. 
Watches for loss of received Hello BPDUs, in which case it transitions to a loop-inconsistent state 
instead of transitioning to a forwarding state.
loopback circuitry
A feature of Ethernet NICs. When the NIC transmits an electrical signal, it 
“loops” the transmitted electrical current back onto the receive pair. By doing so, if another NIC 
transmits a frame at the same time, the NIC can detect the overlapping received electrical signals, 
and sense that a collision has occurred. 
LOS
Loss of Signal. A T1 alarm state that occurs when the receiver has not received any pulses 
of either polarity for a deﬁned time period.
Loss of Frame
A T1 alarm state that occurs when the receiver can no longer consistently 
identify the frame.
low-latency queuing (LLQ)
A Cisco IOS queuing tool that uses MQC conﬁguration commands, 
reserves a minimum bandwidth for some queues, provides high-priority scheduling for some 
queues, and polices those queues to prevent starvation of lower-priority queues during interface 
congestion.
LSA
See Link-state advertisement.

986      LSA flooding
LSA ﬂooding
The process of successive neighboring routers exchanging LSAs such that all 
routers have an identical LSDB for each area to which they are attached.
LSA type (OSPF)
A deﬁnition that determines the data structure and information implied by a 
particular LSA.
LSAck
See Link-State Acknowledgment.
LSDB
See Link-state database.
LSRefresh
Link-State Refresh. A timer that determines how often the originating router should 
reﬂood an LSA, even if no changes have occurred to the LSA.
LSU
See Link-State Update.
LxPDU
See Layer x PDU.
LZS
The Lempel Ziv STAC compression algorithm is used in Frame Relay networks to deﬁne 
dynamic dictionary entries that list a binary string from the compressed data and an associated 
smaller string that represents it during transmission—thereby reducing the number of bits used to 
send data.
Management Information Base
The deﬁnitions for a particular set of data variables, with those 
deﬁnitions following the SMI speciﬁcations. See also SMI.
man-in-the-middle attack
A characterization of a network attack in which packets ﬂow to the 
attacker, and then out to the true recipient. As a result, the user continues to send data, increasing 
the chance that the attacker learns more and better information.
map class
An FRTS conﬁguration construct, conﬁgured with the map-class frame-relay global 
conﬁguration command.
mark probability denominator (MPD)
Used by WRED to calculate the maximum percentage 
of packets discarded when the average queue depth falls between the minimum and maximum 
thresholds.
marking down
Jargon referring to a policer action through which, instead of discarding an out-
of-contract packet, the policer marks a different IPP or DSCP value, allowing the packet to 
continue on its way, but making the packet more likely to be discarded later.
MaxAge
An OSPF timer that determines how long an LSA can remain in the LSDB without 
having heard a reﬂooded copy of the LSA.

 Maxage timer
 987
Maxage timer
An STP timer that dictates how long a switch should wait when it ceases to hear 
Hellos.
maximum reserved bandwidth
A Cisco IOS interface setting, as a percentage between 1 and 
99, that deﬁnes how much of the interface’s bandwidth setting may be allocated by a queuing tool. 
The default value is 75 percent.
Maximum Response Time
After a host receives an IGMP Query, the amount of time (default, 
10 seconds) the host has to send the IGMP Report.
Maximum Segment Size
 A TCP variable that deﬁnes the largest number of bytes allowed in a 
TCP segment’s Data ﬁeld. The calculation does not include the TCP header. With a typical IP 
MTU of 1500 bytes, the resulting default MSS would be 1460. TCP hosts must support an MSS 
of at least 536 bytes
maximum threshold
WRED compares this setting to the average queue depth to decide 
whether packets should be discarded. All packets are discarded if the average queue depth rises 
above this maximum threshold.
Maximum Transmission Unit
 An IP variable that deﬁnes the largest size allowed in an IP 
packet, including the IP header. IP hosts must support an MTU of at least 576 bytes.
MD5
See Message Digest 5.
MD5 hash
A term referring to the process of applying the Message Digest 5 (MD5) algorithm 
to a string, resulting in another value. The original string cannot be easily computed even when 
the hash is known, making this process a strong method for storing passwords.
Measured Round-Trip Time
A TCP variable used as the basis for a TCP sender’s timer 
deﬁning how long it should wait for a missing acknowledgement before resending the data.
Message Digest 5
A method of applying a mathematical formula, with input including a private 
key, the message contents, and sometimes a shared text string, with the resulting digest being 
included with the message. The sender and the receiver perform the same math to allow 
authentication and to prove that no intermediate device changed the message contents.
metric
With routing protocols, the measurement of favorability that determines which entry will 
be installed in a routing table if more than one router is advertising that exact network and mask. 
MIB
See Management Information Base.
MIB walk
In SNMP, the process of a manager using successive GetNext and GetBulk 
commands to discover the exact MIB structure supported by an SNMP agent. The process involves 
the manager asking for each successive MIB leaf variable. 

988      MIB-I
MIB-I
The original standardized set of generic SNMP MIB variables, deﬁned in RFC 1158.
MIB-II
The most recent standardized set of generic SNMP MIB variables, deﬁned in RFC 1213 
and updated in RFCs 2011 through 2013.
mincir
See Minimum CIR. 
minimum CIR
Jargon referring to the minimum value to which adaptive shaping will lower the 
shaping rate. 
minimum threshold
WRED compares this setting to the average queue depth to decide whether 
packets should be discarded. No packets are discarded if the average queue depth falls below this 
minimum threshold.
MLD
See Multicast Listener Discovery Protocol.
MLP
See Multilink PPP.
MLP LFI
The PPP function for fragmenting packets, plus interleaving delay-sensitive later-
arriving packets between the fragments of the ﬁrst packet.
MLS
See Multilayer Switching.
modiﬁed tail drop
A WFQ term referring to its drop logic, which is similar to tail-drop 
behavior.
Modular QoS CLI (MQC)
The common set of IOS conﬁguration commands that is used with 
each QoS feature whose name begins with “Class-Based.”
MOSPF
See Multicast Open Shortest Path First.
MPLS Experimental (EXP)
A 3-bit ﬁeld in an MPLS header used for marking frames. 
MRT
See Maximum Response Time.
MRTT
See Measured Round-Trip Time.
MSS
See Maximum Segment Size.
MST
See Multiple Spanning Trees.
MTU
See Maximum Transmission Unit. 

 MULTI_EXIT_DISC (MED)
 989
MULTI_EXIT_DISC (MED)
A BGP path attribute that allows routers in one AS to set a value 
and advertise it into a neighboring AS, impacting the decision process in that neighboring AS. A 
smaller value is considered better. Also called the BGP metric.
multi-action policing
In MQC and CB Policing, a conﬁguration style by which, for one 
category of packets (conform, exceed, or violate), more than one marking action is deﬁned for a 
single category. For example, marking DSCP and DE.
multicast IP address range
IP multicast address range from 224.0.0.0 through 
239.255.255.255.
multicast IP address structure
The ﬁrst 4 bits of the ﬁrst octet must be 1110. The last 28 bits 
are unstructured.
Multicast Listener Discovery Protocol
The IPv6 protocol used for the discovery of which 
hosts are listening for which multicast IP addresses for IPv6.
multicast MAC address
A 48-bit address that is calculated from a Layer 3 multicast address by 
using 0x0100.5E as the multicast vendor code (OUI) for the ﬁrst 24 bits, always binary 0 for the 
25th bit, and copying the last 23 bits of the Layer 3 multicast address.
Multicast Open Shortest Path First
A multicast routing protocol that operates in dense mode 
and depends on the OSPF unicast routing protocol to perform its multicast functions.
multicast scoping
The practice of deﬁning boundaries that determine how far multicast trafﬁc 
will travel in your network.
multicast state information
The information maintained by a router for each multicast entry in 
its multicast routing table, such as incoming interface, outgoing interface list, Uptime timer, 
Expire timer, etc.
multicasting
Sending a message from a single source or multiple sources to selected multiple 
destinations across a Layer 3 network in one data stream.
Multilayer Switching
A process whereby a switch, when making a forwarding decision, uses 
not only Layer 2 logic but other OSI layer equivalents as well.
Multilink PPP
A PPP feature used to load balance multiple parallel links at Layer 2 by 
fragmenting frames, sending one frame over each of the links in the bundle, and reassembling 
them at the receiving end of the link.
multipath
An issue whereby parts of the RF signal take different paths from the source to the 
destination, which causes direct and reﬂected signals to reach the receiver at different times, and 
corresponding bit errors. 

990      Multiple Spanning Trees
Multiple Spanning Trees
Deﬁned in IEEE 802.1s, a speciﬁcation for multiple STP instances 
when using 802.1Q trunks
NAT
Network Address Translation. Deﬁned in RFC 1631, a method of translating IP addresses 
in headers with the goal of allowing multiple hosts to share single public IP addresses, thereby 
reducing IPv4 public address depletion.
native VLAN
The one VLAN on an 802.1Q trunk for which the endpoints do not add the 4-byte 
802.1Q tag when transmitting frames in that VLAN.
NCP
See Network Control Protocol.
neighbor (EIGRP)
With EIGRP, a router sharing the same primary subnet, with which Hellos 
are exchanged, parameters match, and with which routes can be exchanged.
neighbor (OSPF)
Any other router, sharing a common data link, with which a router exchanges 
Hellos, and for which the parameters in the Hello pass the parameter-check process.
neighbor state
A state variable kept by a router for each known neighbor or potential neighbor.
Neighbor Type
In BGP, either external BGP (eBGP), confederation eBGP, or internal BGP 
(iBGP). The term refers to a peer connection, and whether the peers are in different ASs (eBGP), 
different confederation sub-ASs (confederation eBGP), or in the same AS (iBGP).
nested policy maps
An MQC conﬁguration style by which one policy map calls a second policy 
map. For example, a shaping policy map can call an LLQ policy map to implement LLQ for 
packets shaped by CB Shaping.
network allocation vector
A time value that each wireless station must set based on the 
duration value found in every 802.11 frame. The time value counts down and must be equal to zero 
before a station is allowed to access the wireless medium. The result is a collision-avoidance 
mechanism.
Network Based Application Recognition (NBAR)
A Cisco IOS feature that performs deep 
packet inspection to classify packets based on application layer information.
Network Control Protocol
The portions of PPP focused on features that are related to speciﬁc 
Layer 3 protocols.
Network layer reachability information
A BGP term referring to an IP preﬁx and preﬁx 
length.

 Network Time Protocol
 991
Network Time Protocol
An Internet standard (RFC 1305) that deﬁnes the messages and 
modes used for IP hosts to synchronize their time-of-day clocks.
network type (OSPF)
A characteristic of OSPF interfaces that determines whether a DR 
election is attempted, whether or not neighbors must be statically conﬁgured, and the default Hello 
and Dead timer settings.
Next Hop ﬁeld
With a routing update, or routing table entry, the portion of a route that deﬁnes 
the next router to which a packet should be sent to reach the destination subnet. With routing 
protocols, the Next Hop ﬁeld may deﬁne a router other than the router sending the routing update.
NEXT_HOP
A BGP Path Attribute that lists the next-hop IP address used to reach an NLRI.
NLPID
Network Layer Protocol ID is a ﬁeld in the RFC 2427 header that is used as a Protocol 
Type ﬁeld in order to identify the type of Layer 3 packet encapsulated inside a Frame Relay frame.
NLRI
See Network layer reachability information.
no drop
A WRED process by which WRED does not discard packets during times in which a 
queue’s minimum threshold has not been passed.
NO_ADVERT
A reserved value for the BGP COMMUNITY path attribute that implies that the 
route should not be advertised to any other peer.
NO_EXPORT
A reserved value for the BGP COMMUNITY path attribute that implies that the 
route should not be advertised outside the local AS.
NO_EXPORT_SUBCONFED
The RFC 1997 name for the reserved COMMUNITY path 
attribute known to Cisco IOS as LOCAL_AS. (See LOCAL_AS.)
Not-so-stubby area
A type of OSPF stub area that, unlike stub areas, can inject external routes 
into the NSSA area.
NSSA
See Not-so-stubby area.
NTP
See Network Time Protocol. 
NTP broadcast client
An NTP client that assumes that a server will send NTP broadcasts, 
removing the requirement for the client to have the NTP server’s IP address pre-conﬁgured.
NTP client mode
An NTP mode in which an NTP host adjusts its clock in relation to an NTP 
server’s clock.

992      NTP server mode
NTP server mode
An NTP mode in which an NTP host does not adjust its clock, but in which 
it sends NTP messages to clients so that the clients can update their clocks based on the server’s 
clock.
NTP symmetric active mode
An NTP mode in which two or more NTP servers mutually 
synchronize their clocks.
OAM
See Operation, Administration, and Maintenance.
OFDM
See Orthogonal frequency division multiplexing. 
offset list
A Cisco IOS conﬁguration tool for RIP and EIGRP for which the list matches routes 
in routing updates, and adds a deﬁned value to the sent or received metric for the routes. The value 
added to the metric is the offset.
One-time password
 Deﬁned in RFC 2289, a mechanism by which a shared key and a secret 
key together feed into a hash algorithm, creating a password that is transmitted over a network. 
Because the shared key is not reused, the hash value is only valid for that individual authentication 
attempt.
OOF
See Out of Frame.
Operation, Administration, and Maintenance
A term referring to the processes and bits in the 
data stream used to manage the Telco TDM hierarchy.
optional nontransitive
A characterization of a BGP path attribute in which BGP implementa-
tions are not required to support the attribute (optional), and for which if a router receives a route 
with such an attribute, the router should remove the attribute before advertising the route 
(nontransitive).
optional transitive
A characterization of a BGP path attribute in which BGP implementations 
are not required to support the attribute (optional), and for which if a router receives a route with 
such an attribute, the router should forward the attribute unchanged (transitive).
ORIGIN
A BGP path attribute that implies how the route was originally injected into some 
router’s BGP table.
ORIGINATOR_ID
Used by RRs to denote the RID of the iBGP neighbor that injected the 
NLRI into the AS.
Orthogonal frequency division multiplexing
A technology that sends a high-speed data 
stream over multiple subcarriers simultaneously. It is highly immune to multipath interference. 
802.11a and 802.11g specify the use of OFDM.

 OTP
 993
OTP
See One-time password. 
Out of Frame
A T1 alarm state that occurs when the receiver can no longer consistently identify 
the frame. See LOF.
Outside Global address
A NAT term describing an IP address representing a host that resides 
outside the enterprise network, with the address being used in packets outside the enterprise 
network.
Outside Local address
A NAT term describing an IP address representing a host that resides 
outside the enterprise network, with the address being used in packets inside the enterprise 
network.
overloading
Another term for Port Address Translation. See PAT.
PAgP
See Port Aggregation Protocol.
PAP
See Password Authentication Protocol.
partial SPF calculation
An SPF calculation for which a router does not need to run SPF for any 
LSAs inside its area, but instead runs a very simple algorithm for changes to LSAs outside its 
own area.
partial update
A routing protocol feature by which the routing update includes only routes that 
have changed, rather than include the entire set of routes.
passive (EIGRP)
A state for a route in an EIGRP topology table that indicates that the router 
believes that the route is stable, and it is not currently looking for any new routes to that subnet.
passive mode FTP
Deﬁnes a particular behavior for FTP regarding the establishment of TCP 
data connections. In passive mode, an FTP server uses the FTP PORT command, over the FTP 
control connection, to tell the FTP client the port on which the server will be listening for a new 
data connection. The client allocates an unused port, and initiates a connection to the FTP server’s 
earlier-declared port.
passive scanning
Each 802.11 station passively monitors each RF channel for a speciﬁc amount 
of time and listens for beacons. Stations use the signal strengths of found beacons to determine the 
access point or ad hoc network with which to attempt association. 
Password Authentication Protocol
An Internet standard authentication protocol that uses 
clear-text passwords and a two-way handshake to perform authentication over a PPP link.
PAT
See Port Address Translation. 

994      path attribute
path attribute
A term generally describing characteristics about BGP paths that are advertised 
in BGP Updates.
payload compression
See Layer 2 payload compression.
PCM
See pulse code modulation.
PDU
See Protocol data unit.
Peak information rate
In two-rate policing, the second and higher rate deﬁned to the policer.
peer group
In BGP, a conﬁguration construct in which multiple neighbors’ parameters can 
be conﬁgured as a group, thereby reducing the length of the conﬁguration. Additionally, BGP 
performs routing policy logic against only one set of Updates for the entire peer group, improving 
convergence time.
Per-Hop Behavior
With DiffServ, a DSCP marking and a related set of QoS actions applied to 
packets that have that marking.
permanent multicast group
The multicast addresses assigned by IANA.
Permanent virtual circuit
A predeﬁned VC. A PVC can be equated to a leased line in concept.
Per-VLAN Spanning Tree Plus
 A Cisco-proprietary STP implementation, created many years 
before IEEE 802.1s and 802.1w, that speeds convergence and allows for one STP instance for each 
VLAN.
PHB
See Per-Hop Behavior.
PIM Hello message
Sent by a PIM router, by default every 30 seconds, on every interface on 
which PIM is conﬁgured to discover neighbors, establish adjacency, and maintain adjacency.
PIM-DM
See Protocol Independent Multicast dense-mode routing protocol.
PIM-SM
Protocol Independent Multicast sparse-mode routing protocol. Does not depend on 
any unicast routing protocol to perform its multicast functions.
PIM-SM (S,G) RP-bit Prune
When a PIM-SM router switches from RPT to SPT, it sends a 
PIM-SM Prune message for the source and the group with the RP bit set to its upstream router on 
the shared tree. RFC 2362 uses the notation PIM-SM (S, G) RP-bit Prune for this message.
PIR
See Peak information rate.

 point coordination function
 995
point coordination function
An optional contention-free 802.11 access protocol that requires 
the access point to poll wireless stations before they are able to send frames. Not commonly 
implemented. 
Point-to-Point Protocol
An Internet standard serial data-link protocol, used on synchronous and 
asynchronous links, that provides data-link framing, link negotiation, Layer 3 interface features, 
and other functions.
poison reverse
With RIP, the advertisement of a poisoned route out an interface, when that route 
was formerly not advertised out that interface due to split horizon rules.
policing rate
The rate at which a policer limits the bits exiting or entering the policer.
policy map
A term referring to the MQC policy-map command and its related subcommands, 
which are used to apply QoS actions to classes of packets.
policy routing
Cisco IOS router feature by which a route map determines how to forward a 
packet, typically based on information in the packet other than the destination IP address.
Port Address Translation
A NAT term describing the process of multiplexing TCP and UDP 
ﬂows, based on port numbers, to a small number of public IP addresses. Also called NAT 
overloading.
Port Aggregation Protocol
A Cisco-proprietary messaging protocol used to negotiate the 
dynamic creation of PortChannels (EtherChannels) and to choose which ports can be placed into 
an EtherChannel.
port security
A switch feature that limits the number of allowed MAC addresses on a port, with 
optional limits based on the actual values of the MAC addresses.
PortFast
Cisco-proprietary STP feature in which a switch port, known to not have a bridge or 
switch attached to it, transitions from disabled to forwarding state without using any intermediate 
states.
power-save mode
A mechanism for conserving battery power in wireless stations. The access 
point buffers data frames destined to sleeping stations, which wake periodically to learn from 
information in the beacon frame whether or not data frames are waiting for transmission. The radio 
card receives applicable data frames and then goes back to sleep. 
PPP
See Point-to-Point Protocol.
preﬁx
A numeric value between 0 and 32 (inclusive) that deﬁnes the number of beginning bits 
in an IP address for which all IP addresses in the same group have the same value. Alternative: The 

996      prefix list
number of binary 1s beginning a subnet mask, written as a decimal value between 0 and 32, used 
as a more convenient form of representing the subnet mask. 
preﬁx list
A Cisco IOS conﬁguration tool that can be used to match routing updates based on a 
base network address, a preﬁx, and a range of possible masks used inside the values deﬁned by the 
base network address and preﬁx.
priority (OSPF)
An administrative setting, included in Hellos, that is the ﬁrst criteria for 
electing a DR. The highest priority wins, with values from 1–255, with priority 0 meaning a router 
cannot become DR or BDR. 
priority queue (PQ)
Jargon referring to any queue that receives priority service, often used for 
queues in an LLQ conﬁguration that have the priority command conﬁgured.
priority queuing (PQ)
A Cisco IOS queuing tool most notable for its scheduler, which always 
services the high-priority queue over all other queues.
private addresses
RFC 1918-deﬁned IPv4 network numbers that are not assigned as public IP 
address ranges, and are not routable on the Internet. Intended for use inside enterprise networks.
private AS
A BGP ASN whose value is between 64,512 and 65,535. These values are not 
assigned for use on the Internet, and can be used for private purposes, typically either within 
confederations or by ISPs to hide the ASN used by some customers.
private VLAN
A Cisco switch feature that allows separation of ports as if they were in separate 
VLANs, while allowing the use of a single IP subnet for all ports.
process switching
A Layer 3 forwarding path through a router that does not optimize the 
forwarding path through the router.
promiscuous port
With private VLANs, a port that can send and receive frames with all other 
ports in the private VLAN. 
Protocol data unit
A generic term that refers to the data structure used by a layer in a layered 
network architecture when sending data.
Protocol Independent Multicast dense-mode routing protocol
Does not depend on any 
unicast routing protocol to perform its multicast functions.
proxy ARP
A router feature used when a router sees an ARP request searching for an IP host’s 
MAC, when the router believes the IP host could not be on that LAN because the host is in another 
subnet. If the router has a route to reach the subnet where the ARP-determined host resides, the 
router replies to the ARP request with the router’s MAC address.

 Prune Override
 997
Prune Override
On a multiaccess network, when a PIM-DM or PIM-SM router receives a 
Prune message, it starts a 3-second timer. If it receives a Join message on the multiaccess network 
from another router before the timer expires, it considers the message as an override to the previously 
received Prune message and continues forwarding the group trafﬁc on the LAN interface; 
otherwise, it stops forwarding the trafﬁc on the LAN interface.
pruning
See VTP pruning.
public wireless LAN
A wireless LAN that offers connections to the Internet from public places, 
such as airports, hotels, and coffee shops.
pulse code modulation
An early standard from AT&T for encoding analog voice as a digital 
signal for transmission over a TDM network. PCM requires 64 kbps, and is the basis for the 
DS0 speed.
PVC
See Permanent virtual circuit.
PVST+
See Per-VLAN Spanning Tree Plus.
quartet
A set of four hex digits listed in an IPv6 address. Each quartet is separated by a colon.
querier election
When multiple routers are connected to a subnet, only one should be sending 
IGMP queries. It is called a querier. IGMPv1 does not have any rules for electing a querier. In 
IGMPv2 and IGMPv3, a router with the lowest interface IP address on the subnet is elected as a 
querier.
Query (EIGRP)
An EIGRP message that is used to ask neighboring routers to verify their route 
to a particular subnet. Query messages require an Ack.
query scope (EIGRP)
The characterization of how far EIGRP Query messages ﬂow away from 
the router that ﬁrst notices a failed route and goes active for a particular subnet.
queue starvation
A possible side effect of a scheduler that performs strict-priority scheduling 
of a queue, which can result in lower-priority queues getting little or no service.
radio management aggregation
Reduces the bandwidth necessary for radio management 
information, such as access point status messages, that is sent across the network by eliminating 
redundant management information. 
RADIUS
A protocol, deﬁned in RFC 2865, that deﬁnes how to perform authentication between 
an authenticator (for example, a router) and an authentication server that holds a list of usernames 
and passwords.

998      Rapid Spanning Tree Protocol
Rapid Spanning Tree Protocol
Deﬁned in IEEE 802.1w, a speciﬁcation to enhance the 
802.1D standard to improve the speed of STP convergence.
RARP
See Reverse ARP.
RD
See Reported distance. 
Ready To Send
On a serial cable, the pin lead set by the DTE to tell the DCE that the DTE wants 
to send data.
receiver’s advertised window
In TCP, a TCP host sets the TCP header’s Window ﬁeld to the 
number of bytes it allows the other host to send before requiring an acknowledgement. In effect, 
the receiving host, by stating a particular window size, grants the sending host the right to send 
that number of bytes in a single window.
Red Alarm
A T1 alarm state that occurs when a device has detected a local LOF/LOS/AIS 
condition. The device in Red alarm state then sends a Yellow alarm signal.
regular expression
A list of interspersed alphanumeric literals and metacharacters that are used 
to apply complex matching logic to alphanumeric strings. Often used for matching AS_PATHs in 
Cisco routers. 
Reliable Transport Protocol
A protocol used for reliable multicast and unicast transmissions. 
Used by EIGRP.
remaining bandwidth
A CBWFQ and LLQ term referring to the bandwidth on an interface that 
is neither reserved nor allocated via a priority command.
Rendezvous point
In the PIM-SM design, the central distribution point to which the multicast 
trafﬁc is ﬁrst delivered from the source designated router.
Reply (EIGRP)
An EIGRP message that is used by neighbors to reply to a query. Reply 
messages require an Ack.
Reported distance
With EIGRP, the metric (distance) of a route as reported by a neighboring 
router.
Report Suppression mechanism
When a Query is received from a router, each host randomly 
picks a time between 0 and the Maximum Response Time period to send a Report. When the 
host with the smallest time period ﬁrst sends the Report, the rest of the hosts suppress their 
reports.
Response
In the context of SNMP, the Response command is sent by an SNMP agent, back to 
a manager, in response to any of the three types of Get requests, or in response to a Set request. 

 Retransmission Timeout
 999
It is also used by a manager in response to a received Inform command from another SNMP 
manager. The Response holds the value(s) of the requested variables.
Retransmission Timeout
With EIGRP, a timer started when a reliable (to be acknowledged) 
message is transmitted. For any neighbor(s) failing to respond in its RTO, the RTP protocol causes 
retransmission. RTO is calculated based on SRTT.
Reverse ARP 
A standard (RFC 903) protocol by which a LAN-attached host can dynamically 
broadcast a request for a server to assign it an IP address. See also ARP.
RF channel
The speciﬁc frequency subband on which the radio card or access point is 
operating. The RF channel is set in the access point or ad hoc stations. 
RGMP
See Router-Port Group Management Protocol. 
RID
See Router ID.
ROMMON
An alternative software loaded into a Cisco router, used for low-level debugging 
and for password recovery.
Root Guard
Cisco-proprietary STP feature in which a switch port monitors for incoming 
superior Hellos, and reacts to a superior Hello to prevent any switch connected to that port from 
becoming root.
Root Port
The single port on each non-root switch upon which the best Hello BPDU is received.
route map
A conﬁguration tool in Cisco IOS that allows basic programming logic to be applied 
to a set of items. Often used for decisions about what routes to redistribute, and for setting 
particular characteristics of those routes—for instance, metric values.
route poisoning
The process of sending an inﬁnite-metric route in routing updates when that 
route fails.
route redistribution
The process of taking routes known through one routing protocol and 
advertising those routes with another routing protocol.
route reﬂector
A BGP feature by which a router learns iBGP routes, and then forwards them 
to other iBGP peers, reducing the required number of iBGP peers while also avoiding routing 
loops.
route reﬂector client
A BGP router that, unknown to it, is aided by a route reﬂector server to 
cause all iBGP routers in an AS to learn all eBGP-learned preﬁxes.

1000      route reflector non-client
route reﬂector non-client
A BGP router in an AS that uses route reﬂectors, but that is not aided 
by any RR server.
route reﬂector server
A BGP router that forwards iBGP-learned routes to other iBGP routers.
Route Tag ﬁeld
A ﬁeld within a route entry in a routing update, used to associate a generic 
number with the route. It is used when passing routes between routing protocols, allowing an inter-
mediate routing protocol to pass information about a route that is not natively deﬁned to that 
intermediate routing protocol. Frequently used for identifying certain routes for ﬁltering by a 
downstream routing process.
routed interface
An interface on a Cisco IOS–based switch that is treated as if it were an 
interface on a router.
Router ID
The 32-bit number used to represent an OSPF router.
Router-Port Group Management Protocol
A Cisco-proprietary Layer 2 protocol that enables 
a router to communicate to a switch which multicast group trafﬁc the router does and does not 
want to receive from the switch.
routing black hole
A problem that occurs when an AS does not run BGP on all routers, with 
synchronization disabled. The routers running BGP may believe they have working routes to reach 
a preﬁx, and forward packets to internal routers that do not run BGP and do not have a route to 
reach the preﬁx.
RP
See Rendezvous point.
RPF check
Designed to solve the problems of multicast duplication and multicast routing 
loops. For every multicast packet received, a multicast router examines its source IP address, 
consults its unicast routing table, determines which interface it would use to go in the reverse 
direction toward the source IP address, compares it with the interface on which the packet was 
received, and, if they match, accepts the packet and forwards it; otherwise, the router drops the 
packet.
RSTP
See Rapid Spanning Tree Protocol. 
RTO
See Retransmission Timeout.
RTP
See Reliable Transport Protocol.
RTP header compression
The process of taking the IP, UDP, and RTP headers of a voice or 
video packet, compressing them, and then uncompressing them on the receiving router.

 RTS
 1001
RTS
See Ready To Send.
RTS/CTS
Request-to-send/clear-to-send. A mechanism that counters collisions caused by 
hidden nodes. If enabled, the station or access point must ﬁrst send an RTS frame and receive a 
CTS frame before sending each data frame. 
RXBOOT
An alternative software loaded into a Cisco router, used for basic IP connectivity—
most useful when Flash memory is broken and you need IP connectivity to copy a new IOS image 
into Flash memory.
SAFE Blueprint
An architecture and set of documents that deﬁnes Cisco’s best 
recommendations for how to secure a network.
same-layer interaction
The two computers use a protocol with which to communicate with 
the same layer on another computer. The protocol deﬁned by each layer uses a header that is 
transmitted between the computers to communicate what each computer wants to do.
scheduler
A queuing tool’s logic by which it selects the next packet to dequeue from its many 
queues.
sequence number (OSPF)
In OSPF, a number assigned to each LSA, ranging from 
0x80000001 and wrapping back around to 0x7FFFFFFF, which is used to determine which LSA 
is most recent. 
sequence number (SN)
A term used with WFQ for the number assigned to a packet as it is 
enqueued into a WFQ. WFQ schedules the currently lowest SN packet next.
Service Interworking
The process, deﬁned by FRF.5 and FRF.8, for combining ATM and FR 
technologies for an individual VC.
service policy
A term referring to the MQC service-policy command, which is used to enable 
a policy map on an interface. 
Service set identiﬁer
Deﬁnes a particular wireless LAN. The SSID conﬁgured in the radio card 
must match the SSID in the access point before the station can connect with the access point.
Set
In the context of SNMP, the Set command is sent by an SNMP manager, to an agent, 
requesting that the agent set a single identiﬁed variable to the stated value. The main purpose is to 
allow remote conﬁguration and remote operation, such as shutting down an interface by using an 
SNMP Set of an interface state MIB variable. 
SF
See Superframe.

1002      shaping rate
shaping rate
The rate at which a shaper limits the bits exiting the shaper.
shared distribution tree
In PIM-SM, the path of the group trafﬁc that ﬂows from the RP to the 
routers that need the trafﬁc. It is also called the root-path tree (RPT), because it is rooted at the RP.
shortest-path tree switchover
In the PIM-SM design, the process by which a PIM-SM router 
can build the SPT between itself and the source of a multicast group and take advantage of the 
most efﬁcient path available from the source to the router as long as it has one directly connected 
group member. Once it builds an SPT, it sends a PIM-SM (S, G) RP-bit Prune toward the upstream 
router on the shared tree.
single-rate, three-color policer
Policing in which a single rate is metered, and packets are 
placed into one of three categories (conform, exceed, or violate).
single-rate, two-color policer
Policing in which a single rate is metered, and packets are placed 
into one of two categories (conform or exceed).
Signal-to-noise ratio
The difference between the measured signal power and the noise power 
that a particular receiver sees at a given time. Higher SNRs generally indicate better performance. 
Slow Start
A method for how a TCP sender grows its calculated CWND variable, thereby 
growing the allowed window for the connection. Slow Start grows CWND at an exponential rate.
Slow Start Threshold
A calculated TCP variable, used along with the TCP CWND variable, to 
dictate a TCP sender’s behavior when it recognizes packet loss. As CWND grows after packet loss, 
the TCP sender increases CWND based on Slow Start rules, until CWND grows to be as high 
as the SSThresh setting, at which point TCP Congestion Avoidance logic is used. Essentially, 
SSThresh is the threshold at which Slow Start logic ends.
SLSM
See Static Length Subnet Masking.
SMI
See Structure of Management Information.
Smoothed Round-Trip Time
With EIGRP, a purposefully slowly changing measurement of 
round-trip time between neighbors, from which the EIGRP RTO is calculated.
smurf attack
A style of attack in which an ICMP Echo is sent with a directed broadcast (subnet 
broadcast) destination IP address, and a source address of the host that is being attacked. The 
attack can result in the Echo reaching a large number of hosts, all of which reply by sending an 
Echo Reply to the host being attacked.

 SNMP agent
 1003
SNMP agent
A process on a computing device that accepts SNMP requests, responds with 
SNMP-structured MIB data, and initiates unsolicited Trap messages back to an SNMP 
management station.
SNMP manager
A process on a computing device that issues requests for SNMP MIB 
variables from SNMP agents, receives and processes the MIB data, and accepts unsolicited Trap 
messages from SNMP agents.
SNR
See Signal-to-noise ratio. 
socket
A 3-tuple consisting of an IP address, port number, and transport layer protocol. TCP 
connections exist between a pair of sockets.
soft reconﬁguration
A BGP process by which a router reapplies routing policy conﬁguration 
(route maps, ﬁlters, and the like) based on stored copies of sent and received BGP Updates.
software queue
A queue created by Cisco IOS as a result of the conﬁguration of a queuing tool.
source DR
A designated router that is directly connected with a source of the multicast group.
source registration
In the PIM-SM design, the process by which a source DR, after it starts to 
receive the group trafﬁc, encapsulates the multicast packets in the unicast packets and sends them 
to the RP.
source-based distribution tree
Method by which a dense-mode routing protocol distributes 
multicast trafﬁc from a source to all the segments of a network. Also called shortest-path tree 
(SPT), because it uses the shortest routing path from the source to the segments of the network.
source-speciﬁc addresses
The range 232.0.0.0 through 232.255.255.255 that is allocated by 
IANA for SSM destination addresses and is reserved for use by source-speciﬁc applications and 
protocols.
Source-Speciﬁc Multicast
IGMPv3 is designed to support source ﬁltering. IGMPv3 allows a 
host to indicate interest in receiving multicast packets only from speciﬁc source addresses, or from 
all but speciﬁc source addresses, sent to a particular multicast destination address.
sparse-mode protocol
A multicast routing protocol that forwards the multicast trafﬁc only 
when requested by a downstream router.
Spanning Tree Protocol
Deﬁned in IEEE 802.1D, a protocol used on LAN bridges and 
switches to dynamically deﬁne a logical network topology that allows all devices to be reached, 
but prevents the formation of loops.

1004      SPF algorithm
SPF algorithm
The algorithm used by OSPF and IS-IS to compute routes based on the LSDB.
SPF calculation
The process of running the SPF algorithm against the LSDB, with the result 
being the determination of the current best route(s) to each subnet.
split horizon
Instead of advertising all routes out a particular interface, the routing protocol 
omits the routes whose outgoing interface ﬁeld matches the interface out which the update would 
be sent.
spread spectrum
A technology that enables frequency reuse. Two variants exist: frequency 
hopping (FHSS) and direct sequence (DSSS). Both techniques spread the signal power over a 
relatively wide portion of the frequency spectrum over time, to reduce interference between 
systems.
SRTT
See Smoothed Round-Trip Time.
SSID
See Service set identiﬁer. 
SSM
See Source-Speciﬁc Multicast.
SSThresh
See Slow Start Threshold.
Static Length Subnet Masking
A strategy for subnetting a classful network for which all 
masks/preﬁxes are the same value for all subnets of that one classful network.
sticky learning
In switch port security, the process whereby the switch dynamically learns the 
MAC address(es) of the device(s) connected to a switch port, and then adds those addresses to the 
running conﬁguration as allowed MAC addresses for port security.
STP
See Spanning Tree Protocol.
straight-through cable
Copper cable with RJ-45 connectors in which the wire at pin 1 on one 
end is connected to pin 1 on the other end; the wire at pin 2 is connected to pin 2 on the other end; 
and so on.
strict priority
A queuing scheduler’s logic by which, if a particular queue has packets in it, 
those packets always get serviced next.
Structure of Management Information
The SNMP speciﬁcations, standardized in RFCs, 
deﬁning the rules by which SNMP MIB variables should be deﬁned.
stub area
An OSPF area into which external (type 5) LSAs are not introduced by its ABRs; 
instead, the ABRs originate and inject default routes into the area.

 stub network (OSPF)
 1005
stub network (OSPF)
A network/subnet to which only one OSPF router is connected.
stub router (EIGRP)
A router that should not be used to forward packets between other 
routers. Other routers will not send Query messages to a stub router.
stub router (OSPF)
A router that should either permanently or temporarily not be used as a 
transit router. Can wait a certain time after OSPF process start, or after BGP notiﬁes OSPF that 
BGP has converged, before ceasing to be a stub router.
stuck-in-active
The condition in which a route has been in an EIGRP active state for longer than 
the router’s Active timer.
sub-AS
The term referring to a group of iBGP routers in a confederation, with the group 
members being assigned a hidden ASN for the purposes of loop avoidance.
subnet
A subset of a classful IP network, as deﬁned by a subnet mask, which used to address IP 
hosts on the same Layer 2 network in much the same way as a classful network is used. 
subnet broadcast address
A single address in each subnet for which packets sent to this 
address will be broadcast to all hosts in the subnet. It is the highest numeric value in the range of 
IP addresses implied by a subnet number and preﬁx/mask.
subnet ID
16 bits between the interface ID and global routing preﬁx in an IPv6 global address, 
used for subnet assignment inside an enterprise.
subnet mask
A dotted-decimal number used to help deﬁne the structure of an IP address. The 
binary 0s in the mask identify the host portion of an address, and the binary 1s identify either the 
combined network and subnet part (when thinking classfully) or the network preﬁx (when 
thinking classlessly).
subnet number
A dotted-decimal number that represents a subnet. It is the lowest numeric 
value in the range of IP addresses implied by a subnet number and preﬁx/mask.
subnet zero
When subnetting a class A, B, or C address, the subnet for which all subnet bits are 
binary 0.
successor route
With EIGRP, the route to each destination for which the metric is the lowest of 
all known routes to that network.
summary route
A route that is created to represent one or more smaller component routes, 
typically in an effort to reduce the size of routing and topology tables.

1006      Superframe
Superframe
An early T1 framing standard.
superior BPDU
Jargon used by STP mostly when discussing the root election process; refers to 
a Hello with a lower bridge ID. Sometimes refers to a Hello with the same bridge ID as another, 
but with better values for the tiebreakers in the election process.
supplicant
The 802.1X driver that supplies a username/password prompt to the user and 
sends/receives the EAPoL messages.
SVC
See Switched virtual circuit. 
switched interface
An interface on a Cisco IOS–based switch that is treated as if it were an 
interface on a switch.
Switched virtual circuit
A VC that is set up dynamically when needed. An SVC can be equated 
to a dial-on-demand connection in concept.
synchronization
In BGP, a feature in which BGP routes cannot be considered to be a best 
route to reach an NLRI unless that same preﬁx exists in the router’s IP routing table as learned 
via some IGP.
T1
A name used for DS1 lines inside the North American TDM hierarchy.
T3
A name used for DS3 lines inside the North American TDM hierarchy.
TACACS+
A Cisco-proprietary protocol that deﬁnes how to perform authentication between an 
authenticator (for example, a router) and an authentication server that holds a list of usernames 
and passwords.
tail drop
An event in which a new packet arrives, needing to be placed into a queue, and the 
queue is full—so the packet is discarded.
Time Interval (Tc)
Variable name for the time interval used by shapers and by CAR.
TCP code bits
Single-bit ﬁelds in the TCP header. For example, the TCP SYN and ACK code 
bits are used during connection establishment.
TCP ﬂags
The same thing as TCP code bits. See TCP code bits.
TCP header compression
The process of taking the IP and TCP headers of a packet, compressing 
them, and then uncompressing them on the receiving router.

 TCP intercept
 1007
TCP intercept
A Cisco router feature in which the router works to prevent SYN attacks either 
by monitoring TCP connections ﬂowing through the router, or by actively terminating TCP 
connection until the TCP connection is established and then knitting the client-side connection 
with a server-side TCP connection.
TCP SYN ﬂood
An attack by which the attacker initiates many TCP connections to a server, but 
does not complete the TCP connections, by simply not sending the third segment normally used 
to establish the connection. The server may consume resources and reject new connection attempts 
as a result.
TDM
See Time-division multiplexing.
TDM hierarchy
The structure inside telcos’ original digital circuit build-out in the mid-1900s, 
based upon using TDM to combine and disperse smaller DS levels into larger levels, and 
vice versa.
Temporal Key Integrity Protocol
An enhanced version of WEP that is part of the 802.11i 
standard and has an automatic key-update mechanism that makes it much more secure than WEP. 
TKIP is not as strong as AES in terms of data protection.
terminal history
The feature in a Cisco IOS device by which a terminal session’s previously 
typed commands are remembered, allowing the user to recall the old commands to the command 
line through a simple key sequence (for example, the up-arrow key).
Time-division multiplexing
The process of combining multiple synchronized input signals 
over a single medium by giving each signal its own time slot, and then breaking out those signals.
Time to Live
A ﬁeld in the IP header that is decremented at each pass through a Layer 3 
forwarding device.
TKIP
See Temporal Key Integrity Protocol.
token bucket
A conceptual model used by shapers and policers to represent their internal logic.
ToS byte
See Type of Service byte. 
totally NSSA area
A type of OSPF NSSA area for which neither external (type 5) LSAs are 
introduced, nor type 3 summary LSAs; instead, the ABRs originate and inject default routes into 
the area. External routes can be injected into a totally NSSA area.

1008      totally stubby area
totally stubby area
A type of OSPF stub area for which neither external (type 5) LSAs are 
introduced, nor type 3 summary LSAs; instead, the ABRs originate and inject default routes into 
the area. External routes cannot be injected into a totally stubby area.
trafﬁc contract
In shaping and policing, the deﬁnition of parameters that together imply the 
allowed rate and bursts.
transient multicast group
Multicast addresses that are not assigned by IANA.
transit network (OSPF)
A network/subnet over which two or more OSPF routers have become 
neighbors, thereby being able to forward packets from one router to another across that network.
transit router (OSPF)
A router that is allowed to receive a packet from an OSPF router and 
then forward the packet to another OSPF router.
transmit power
The signal strength of the RF signal at the output of the radio card or access 
point transmitter, before being fed into the antenna. Measured in milliwatts, watts, or dBm.
Trap
In the context of SNMP, the Trap command is sent by an SNMP agent, to a manager, when 
the agent wants to send unsolicited information to the manager. Trap is not followed by a Response 
message from the receiving SNMP manager.
Triggered Extensions to RIP for On-Demand Circuits
Deﬁned in RFC 2091, the extensions 
deﬁne how RIP may send a full update once, and then send updates only when routes change, 
when an update is requested, or when a RIP interface changes state from down to up.
triggered updates
A routing protocol feature for which the routing protocol sends routing 
updates immediately upon hearing about a changed route, even though it may normally only send 
updates on a regular update interval. 
trunking
Also called VLAN trunking, a method (using either the Cisco ISL protocol or the 
IEEE 802.1Q protocol) to support carrying trafﬁc between switches for multiple VLANs that have 
members on more than one switch.
TTL
See Time to Live.
TTL scoping
Controls the distribution of multicast trafﬁc by checking the TTL values 
conﬁgured on the interfaces. It forwards the multicast packet only on those interfaces whose 
conﬁgured TTL value is less than or equal to the TTL value of the multicast packet.
Type of Service byte
 A 1-byte ﬁeld in the IP header, originally deﬁned by RFC 791 for QoS 
marking purposes.

 U/L bit
 1009
U/L bit
The second most signiﬁcant bit in the most signiﬁcant byte of an Ethernet MAC address, 
a value of binary 0 implies that the address is a Universally Administered Address (UAA) (also 
known as Burned-In Address [BIA]), and a value of binary 1 implies that the MAC address is a 
locally conﬁgured address.
UDLD
UniDirectional Link Detection. A protection against problems caused by unidirectional 
links between two switches. Uses messaging between switches to detect the loop, err-disabling the 
port when the link is unidirectional.
unicast MAC address
Ethernet MAC address that represents a single NIC or interface.
Update (EIGRP)
An EIGRP message that informs neighbors about routing information. 
Update messages require an Ack.
Update timer
With RIP, the regular interval at which updates are sent. Each interface uses an 
independent timer, defaulting to 30 seconds.
UplinkFast
Cisco-proprietary STP feature in which an access layer switch is conﬁgured to be 
unlikely to become Root or to become a transit switch. Also, convergence upon the loss of the 
switch’s Root Port takes place in a few seconds.
upstream router
From one multicast router’s perspective, the upstream router is another router 
that has just forwarded a multicast packet to that router.
User Priority
A 3-bit ﬁeld in an 802.1Q header used for marking frames.
variance
An integer setting for EIGRP and IGRP. Any FS route whose metric is less than this 
variance multiplier times the successor’s metric is added to the routing table, within the 
restrictions of the maximum-paths command.
Variable-Length Subnet Masking
A strategy for subnetting a classful network for which 
masks/preﬁxes are different for some subnets of that one classful network.
VC
See Virtual circuit.
violate
A category used by a policer to classify packets relative to the trafﬁc contract. These 
packets are considered to be above the trafﬁc contract in all cases.
Virtual circuit
A logical concept that represents the path over which frames travel between 
DTEs. VCs are particularly useful when comparing Frame Relay to leased physical circuits.

1010      Virtual LAN
Virtual LAN
A group of devices on one or more LANs that are conﬁgured (using 
management software) so that they can communicate as if they were attached to the same wire, 
when, in fact, they are located on a number of different LAN segments. Because VLANs are based 
on logical instead of physical connections, they are extremely ﬂexible.
virtual link
With OSPF, the encapsulation of OSPF messages inside IP, to a router with which 
no common subnet is shared, for the purpose of either mending partitioned areas or providing a 
connection from some remote area to the backbone area.
Virtual Router Redundancy Protocol
A standard (RFC 3768) feature by which multiple 
routers can provide interface IP address redundancy so that hosts using the shared, virtual IP 
address as their default gateway can still reach the rest of a network even if one or more routers fail.
VLAN
See Virtual LAN.
VLAN Trunking Protocol
A Cisco-proprietary protocol, used by LAN switches to 
communicate VLAN conﬁguration.
VLSM
See Variable-Length Subnet Masking.
VoFR
See Voice over Frame Relay.
Voice over Frame Relay
Deﬁned in FRF.11, an FR VC that uses a slightly varied header, as 
compared with FRF.3 data VCs, to accommodate voice payloads directly encapsulated inside the 
Frame Relay LAPF header.
VRRP
See Virtual Router Redundancy Protocol. 
VTP
See VLAN Trunking Protocol.
VTP pruning
VTP process that prevents the ﬂow of broadcasts and unknown unicast Ethernet 
frames in a VLAN from being sent to switches that have no ports in that VLAN.
weight
A local Cisco-proprietary BGP setting that is not advertised to any peers. A larger value 
is considered to be better.
weighted fair queuing (WFQ)
A Cisco IOS queuing tool most notable for its automatic 
classiﬁcation of packets into separate per-ﬂow queues.
weighted round-robin (WRR)
A queuing scheduler concept, much like CQ’s scheduler, in 
which queues are given some service in sequence. This term is often used with queuing in Cisco 
LAN switches.

 well-known discretionary
 1011
well-known discretionary
A characterization of a BGP path attribute in which all BGP 
implementations must support and understand the attribute (well known), but BGP Updates can 
either include the attribute or not depending on whether a related feature has been conﬁgured 
(discretionary).
well-known mandatory
A characterization of a BGP path attribute in which all BGP 
implementations must support and understand the attribute (well known), and all BGP Updates 
must include the attribute (mandatory).
WEP
See Wired Equivalent Privacy.
window
Typically used by protocols that perform ﬂow control (like TCP), a TCP window is the 
number of bytes that a sender can send before it must pause and wait for an acknowledgement of 
some of the yet-unacknowledged data.
Wired Equivalent Privacy
The initial 802.11 common key encryption mechanism; vulnerable 
to hackers.
wireless LAN controller
Controls access to the Internet in public wireless LANs.
Wireless LAN Threat Defense Solution
An intrusion detection system that safeguards the 
wireless LAN from malicious and unauthorized access. 
WLSE
Cisco Wireless LAN Solution Engine. A centralized and required network management 
solution for Cisco Aironet SWAN solutions.
WPA
Wi-Fi Protected Access. A security standard that includes both TKIP and AES and was 
ratiﬁed by the Wi-Fi Alliance.
Yellow Alarm
A T1 alarm state that occurs when a device receives a Yellow Alarm signal. This 
typically means that the device on the other end of the line is in a red alarm state.

Index
Numerics
10BASE2, 22
10BASE5, 22
10BASE-T, 22
802.11. See IEEE 802.11
802.11a, 788-789
802.11b, 789-790
802.11g, 790-791
802.11n, 791
802.1D Spanning Tree Protocol. See STP
802.1Q
PVST+, 69
VLAN trunking, 44-45
conﬁguration, 45-46
802.1Q-in-Q tunneling, 51-52
802.1X, 764-766
configuration, 766
802.2 LLC, Type ﬁelds, 18
A
AAA (authentication, authorization, and 
accounting), 747
authentication methods, 748-750
CLI, 747
groups of AAA servers, 750-751
overriding defaults for login security, 
751
aaa authentication command, 749-750
aaa authentication ppp default, 752
ABRs (Area Border Routers), 276
stubby areas, 287
access lists, statements, 771
access points, 795, 832
access ports, protecting, 82-83
ACEs (Access Control Entries), 770
IP ACL, 770-771
ACK ﬂags, 156
ACKs, 799
ACL, rate-limit ACL, 580
ACS (Cisco Secure Access Control 
Server), 747
active and not pruned VLANs, 48
active mode, FTP, 161-162
active routes (EIGRP), 243-245
stuck-in-active state, 245-246
active scanning, infrastructure mode, 799
AD (administrative distance), 
317, 323-324
preventing suboptimal routes, 335-338
with route tags, 338-340
ad hoc mode, 800-801
wireless LANs, 794
adapters, wireless LAN client adapters, 
833
adaptive shaping, 565
FRTS, 570
adaptive shaping, Frame Relay, 614
adding
default routes to BGP, 381-382
eBGP routes to IP routing tables, 
392-393

iBGP routes to IP routing tables, 
394-409
multiple BGP routes to IP routing 
tables, 450
address formats, Ethernet, 17-18
Address Resolution Protocol. See ARP
addresses
Ethernet, 16-17
unicast addresses, 16
inappropriate IP addresses, 774-775
IP. See IP addresses
MAC addresses
mapping to multicast IP addresses, 
642-643
overriding, 18
tables, displaying, 53, 86, 197, 778
multicast IP addresses. See multicast IP 
addresses
adjacencies, EIGRP, 233-236
adjacency tables, 179
ARP and inverse ARP, 179-180
adjacent-layer interaction, 857
administration, SNMP, 164
administrative distance. See AD
administrative scoping, 690
administrative weight, 456-457
advertising BGP routes to neighbors, 383
BGP Update message, 383-384
determining contents of updates, 
384-386
impact of decision process and 
NEXT_HOP, 386-391
AES (Advanced Encryption Standard), 
810, 812
aggregatable global unicast addresses, 
120-121
aggregate-address command, 378-379, 
423, 462
BGP route summarization, 429-430
aggregate-address suppress-map  
command, 429
AID (association identiﬁer), 799
Air/RF scanning and monitoring, 
CiscoWorks WLSE, 836
AIS (Alarm Indication Signal), 594
alarms, T1, 594
allocation of subnets, 105-106
allow-default keyword, 774
allowed and active VLANs, 48
allowed VLANs, 48
AMI (Alternate Mark Inversion), 592
versus B8ZS, 593
amplitude, 815
antenna diversity, 821
antennas, 795-796
Anycast RP with MSDP, 726-727
area authentication, 301
OSPF, 303
Area Border Routers (ABRs), 276
area ﬁlter-list, 298
area range command, 299
area stub command, 288
area virtual-link command, 303

1014
ARP (Address Resolution Protocol), 
137-139, 179-180
DAI, 758
gratuitous ARPs, 759
AS_CONFED_SEQ, 399, 439, 442
AS_CONFED_SEQ the show ip bgp 
command., 445
AS_PATH, 448
shortest AS_PATH, 459-460
prepending and route aggregation, 
461-463
removing private ASNs, 460
AS_PATH ﬁlters, matching AS_PATHs, 
436-439
AS_PATH PA, 446
AS_PATH segment types, 431-433
AS_PATHS, 360
AS_SET and AS_CONFED_SEQ, 445
filtering BGP updates, 430-431
AS_PATH ﬁlters, 436-439
AS_SET and AS_CONFED_SEQ, 
439, 442, 445
BGP AS_PATH and AS_PATH 
segment types, 431-433
regular expressions, 433-434
and manual summaries, BGP tables, 
378-381
AS_SEQ, 378
AS_SET, 439, 442, 445
ASBRs (Autonomous System Boundary 
Routers), 276
ASNs (autonomous system numbers), 
360, 432, 459, 640
removing private ASNs, 460-461
Ass, 399
multiple adjacent AS, 466
single adjacent AS, 465
assert messages, PIM, 703-704
as-set option, 379
assigning interfaces to VLANs, 35
assisted site surveys, CiscoWorks WLSE, 
835
association identiﬁer (AID), 799
Assured Forwarding (AF) PHBs, 491-492
attenuation, RF signals, 816
authentication
configuring OSPF, 301-303
EIGRP, 250
RIP, 216-219
TCP/IP, 163
authentication methods, 748-750
authentication, authorization, and 
accounting. See AAA
auto-cost reference-bandwidth, 294
automatic access point conﬁguration, 
CiscoWorks WLSE, 834
automatic medium-dependent interface 
(Auto-MDIX), 9
Auto-MDIX (automatic medium-
dependent interface crossover), 9
auto-negotiation, Ethernet, 9
Autonomous System Boundary Routers 
(ASBRs), 276
autonomous system numbers. See ASNs
autonomous system path. See AS_PATHs
Auto-RP, 721-723
autosummarization
EIGRP, 250
RIP, 214-216
auto-summary, impact on redistributed 
routes and network command, 375-377
auto-summary command, 378
aux, 751
ARP (Address Resolution Protocol)

 1015
B
B8ZS (Bipolar 8 Zero Substitution), 592
versus AMI, 593
BackboneFast, optimizing STP, 73, 75
backdoor routes, IP routing tables, 393-
394
Backward Explicit Congestion 
Notiﬁcation (BECN), 559, 614
bandwidth, 815
CBWFQ, limiting, 532-534
LLQ, 537
bandwidth command, 529, 532, 564
bandwidth percent, conﬁguring shaping, 
564
bandwidth percent command, 533
bandwidth remaining percent command, 
533
basic service set (BSS), 792
Bc (committed burst), 556
CB Policing defaults, 577
Be (excess burst size), 556
CB Policing defaults, 577
traffic shaping, 557
beamwidth, 797
BECN (Backward Explicit Congestion 
Notiﬁcation), 559, 614
Frame Relay congestion, 614
BGP (Border Gateway Protocol), 276
advertising routes to neighbors, 383
BGP Update message, 383-384
determining contest of updates, 
384-386
impact of decision process and 
NEXT_HOP, 386-391
AS_PATHs, 360
command references, 411, 479
filtering updates based on NLRI, 
424-427
route maps, 427
soft reconﬁguration, 428
maximum-paths command, 471-472
PAs, 360, 410
route maps, match and set commands, 
479
subcommands for confederations, 402
bgp always-compare-med, 466
BGP AS_PATH, 431-433
BGP COMMUNITY PA, 472-474
filtering NLRI using COMMUNITY 
values, 479
matching with community lists, 
474-475
removing COMMUNITY values, 
475-476, 479
bgp confederation identiﬁer command, 
401
BGP decision process, 446-448
adding multiple BGP routes to IP 
routing tables, 450
BGP PAs, 453-454, 456
mnemonics for memorizing, 450, 452
tiebreakers, 448-450
maximum-paths command, 467
bgp deterministic-med command, 466
BGP ﬁltering tools, 417, 423-424
BGP message types, 368-369
BGP metric, 464
BGP neighbor states, 368
resetting peer connections, 369-370
BGP neighbors, 361-362
checks before becoming neighbors, 
366-368
eBGP, 365-366
iBGP, 362-365
BGP Open messages, 361
BGP PAs, 446
BGP decision process, 453-454, 456
BGP path attributes BGP path 
attributes, 446
BGP policies, conﬁguring, 452
Step 0 NEXT_HOP reachable, 456
Step 1 Administrative weight, 456-457
BGP policies, conﬁguring

1016
Step 2 Highest Local Preference 
(LOCAL_PREF), 457-458
Step 3 Choose Between Locally 
Injected Routes Based on, 458
Step 4 Shortest AS_PATH, 459-463
Step 5 Best ORIGIN PA, 463
Step 6 Smallest Multi-Exit 
Discriminator, 464
Step 7 Prefer Neighbor Type eBGP 
over iBGP, 466
Step 8 Smallest IGP Metric to the 
NEXT_HOP, 466
Step 9 Lowest BGP Router ID of 
Advertising Router, 467
Step 10 Lowest Neighbor ID, 467, 469
BGP preﬁxes, 370
BGP route summarization, aggregate-
address command, 429-430
BGP router ID of advertising router, 467
BGP routes, 370
BGP Routing Information Base (RIB), 
370
BGP routing policies, 417
BGP synchronization, 395-398
disabling, 398
BGP tables, 370
injecting routes/prefixes, 370
impact of auto-summary on 
redistributed routes and, 
375-377
network command, 370-371, 373
redistributing from IGP, static or 
connected routes, 373-375
manual summaries and AS_PATH, 
378-381
routes
adding default routes, 381-382
ORIGIN, 382-383
BGP Update messages, 361
advertising BGP routes to neighbors, 
383-384
determining contents of updates, 
384-386
impact of decision process and 
NEXT_HOP, 386-391
BGP updates
filtering by matching AS_PATHS, 
430-431
AS_PATH ﬁlters, 436-439
AS_SET and AS_CONFED_SEQ, 
439, 442
BGP AS_PATH and AS_PATH 
segment, 431-433
regular expressions, 433-434
rules for routes, 392
bidirectional PIM, 729-730
binary method
exclusive summary routes, 110
inclusive summary routes, 108-109
subnet numbers, broadcast addresses, 
range of IP addresses, determining, 
98-99, 102-104
binary phase shift (BPSK), 818
binary values, converting to decimal and 
hexadecimal values, 955, 959
Bipolar 8 Zero Substitution (B8ZS), 592
Bipolar Violations (BPVs), 593
blocking transitioning to forwarding, 
STP, 67-68
blocking state, 61
Spanning Tree, 68
bogons, 774
boot ﬁelds, 859
boot sequences, IOS software, 858-859
boot system command, IOS, 859
boot system ﬂash, 859
boot system ROM, 859
boot system tftp, 860
BGP policies, configuring

 1017
BOOTP, 139-141
BootStrap Router (BSR), 721
Border Gateway Protocol (BGP), 276
BPDU (bridge protocol data unit), 62, 70
BPDU Guard, 82-83
enabling, 754
BPSK (binary phase shift), 818
BPVs (Bipolar Violations), 593
bridge protocol data unit (BPDU), 62
bridges, 797
wireless and workgroup bridges, 833
broadcast addresses, 16, 43
determining
binary method, 98-99
decimal method, 99-101
broadcast clients (NTP), 144
broadcast domains, 31
broadcast methods, 633
broadcast subnets, 98
BSR (BootStrap Router), 721, 724-725
BSS (basic service set), 792
buckets, reﬁlling dual token buckets, 573
burst size, 509
C
C&M tools. See classiﬁcation and 
marking tools
cabling, UTP cabling, 24
cabling standards, Ethernet, 24
calculating
metrics for types 1 and 2, 285-286
SN, 525
STP costs to determine RPs, 63
CAM (Content Addressable Memory), 
66, 643
updating, 66-67
CAR (committed access rate), 551
CB Policing, 579-581
carrier detects, synchronous serial links, 
594-595
carrier sense multiple access with 
collision avoidance (CSMA/CA), 809
Carrier Sense Multiple Access with 
Collision Detection (CSMA/CD), 10
carrier transitions, 595
catalyst IOS commands for catalyst 
switch conﬁguration, 23
Category 5 wiring, 8-9
CatOS, 38
CB Marking tool, 500-505
CoS and DSCP, 505-507
locations for marking, 508-509
NBAR, 507-508
CB Policing (Class-Based Policing), 551, 
571
CAR, 579-581
command references, 584
configuring, 575
defaults for Bc and Be, 577
dual-rate policing, 577-578
multi-action policing, 578
policing by percentage, 578-579
policing subsets of trafﬁc, 576-577
single-rate, three-color policing, 
575-576
single-rate, three-color policing, 573
single-rate, two-color policing, 571-
572
two-rate, three-color policing, 573-575
CB Shaping (Class-Based Shaping), 551
command references, 582
configuring, 559-561
to peak rates, 565
CBT (Core-Based Tree), 687
CBWFQ (class-based WFQ), 
521, 529-530, 532, 538
bandwidth, 532-534
command references, 530
features of, 529
CBWFQ (class-based WFQ)

1018
CCM (Cisco CallManager), 839
CCP (Compression Control Protocol), 
602
CDP, disabling, 754
CDT (congestive discard threshold), 526
ceased updates (RIP), 210-212
CEF (Cisco Express Forwarding), 178
adjacency tables, ARP and inverse 
ARP, 179-180
FIB, 178
Cell Loss Priority (CLP) bit, 493
centralized ﬁrmware updates, 
CiscoWorks WLSE, 835
CGMP (Cisco Group Management 
Protocol), 635, 663-666, 668
join message process, 666
leave message, 667
messages, 668
change notiﬁcation, STP topology, 66-67
channels
nonoverlapping channels, 802.11g, 790
RF channels, 803-804
characteristics of RF signals, 815-816
Checksum, 160
CIDR (classless interdomain routing), 
111-112
CIR (committed information rate), 556
Cisco 2000 Series Wireless LAN 
Controller, 833
Cisco 2950 switches versus Cisco 3550 
switches, 547-548
Cisco 3550, queuing, 545-546
Cisco 3550 switches, 543-545
versus Cisco 2950 switches, 547-548
Cisco 4100 Series Wireless LAN 
Controller, 833
Cisco Aironet 1100 Series, 832
Cisco Aironet 1130AG Series, 832
Cisco Aironet 1200 Series, 832
Cisco Aironet 1230AG Series, 832
Cisco Aironet 1300 Series, 832
Cisco Aironet 1300 Series Outdoor 
Access Point/Bridge, 833
Cisco Aironet 1400 Series Wireless 
Bridge, 833
Cisco Aironet 350 Series, 833
Cisco Aironet 350 Wireless LAN Client 
Adapter, 833
Cisco Aironet 5-GHz 54-Mbps Wireless 
LAN Client Adapter (CB20A), 833
Cisco Aironet 802.11a/b/g PCI Adapter, 
833
Cisco Aironet 802.11a/b/g Wireless 
CardBus Adapter, 833
Cisco CallManager (CCM), 839
Cisco Express Forwarding (CEF), 178
Cisco Group Management Protocol. See 
CGMP
Cisco SAFE Blueprint, Layer 3 security, 
768
Cisco SAFE Blueprint document, 752
Cisco. Secure Access Control Server 
(ACS), 747
CiscoWorks WLSE (Wireless LAN 
Solution Engine), 834
air/RF scanning and monitoring, 836
assisted site surveys, 835
automatic access point, 834
centralized firmware updates, 835
customizable thresholds, 835
dynamic grouping, 835
fault status, 836
IDS, 836
secure user interfaces, 836
security policy monitoring, 836
self-healing functions, 837
SSIDs, 835
troubleshooting, 837
VLAN configuration, 835
class maps, MQC classiﬁcation with, 
497-499
CCM (Cisco CallManager)

 1019
Class of Service (CoS) ﬁeld, 493
Class Selector (CS) PHBs, 491
Class-Based Marking. See CB Marking 
tool
Class-Based Policing. See CB Policing
Class-Based Shaping. See CB Shaping
class-based WFQ. See CBWFQ
class-default queues, 529
classful compared to classless, 227
classful IP addressing, 94-95
subnets, 95-96
classful routing, 185-186
classiﬁcation and marking tools, 485
CB Marking, 500-505
CoS and DSCP, 505-507
locations for marking, 508-509
NBAR, 507-508
CoS (Class of Service) field, 493
drop probability bits, 493
DSCP (Differentiated Services Code 
Point) field, 490-493
field locations, 494-495
IP Precedence (IPP) field, 489-490
MPLS Experimental (EXP) field, 494
MQC (Modular QoS CLI), 495-496
class maps, 497-499
match commands, 511-512
NBAR, 499-500
policers, 509-510
policy routing, 510
classless compared to classful, 227
classless interdomain routing (CIDR), 
111-112
classless IP addressing, 94, 97
classless routing, 185-186
class-map command (MQC), 496
clear command, 370, 423
clear ip cgmp, 668
clearing
IP routing tables, EIGRP, 250
OSPF processes, 292-295
CLI
AAA, 747
passwords, 745-746
enable and username passwords, 
746-747
CLI help features, 860-861
client hardware address, DHCP, 762
client mode (NTP), 143
client tracking, 828
code bits, TCP, 156
collision domains, Ethernet, 10-11
command references
BGP, 411, 479
CB Marking tool, 501
CB Policing, 584
CB Shaping, 582
CBWFQ, 530
EIGRP, 251-252
Frame Relay, 623
FRTS, 583
IP addresses, 126
IP ACL, 769
IP forwarding, 197
IP multicast routing, 732
match commands (MQC), 511-512
OSPF, 305-307
packet routing, 146-148
redistribution, 352
RIP, 225-226
STP, 86
synchronous serial links, 604
WFQ, 527
commands
aaa authentication, 749-750
aaa authentication ppp default, 752
aggregate-address, 378-379, 423, 462
BGP route summarization, 
429-430
aggregate-address suppress-map, 429
area authentication, 301
OSPF, 303
commands

1020
area filter-list, 298
area range command, 299
area stub, 288
area virtual-link, 303
auto-cost reference-bandwidth, 294
auto-summary, 378
bandwidth, 529, 532, 564
bandwidth percent, 533
bandwidth remaining percent, 533
bgp always-compare-med, 466
bgp confederation identifier, 401
bgp deterministic-med, 466
boot system, 859
boot system flash, 859
boot system ROM, 859
boot system tftp, 860
clear, 370, 423
clear ip cgmp, 668
compress, 602
debug ip arp, 196
debug ip ospf adjacency, 301
debug ip policy, 195
debug policy, 196
default-information originate, 348-349, 
382
DHCP snooping, 763
distance, 324, 394
distance router, 337
distribute-list command, 295-297
do, 182
enable, 745
enable password, 746
enable secret, 746
encapsulation, 50
encapsulation ppp, 597
fair-queue, 527
frame-relay class, 566
frame-relay fragment, 621
frame-relay fragment size, 621
frame-relay interface-dlci, 566, 615-
616
frame-relay map, 183-184, 615-616
frame-relay mincir rate, 570
hold-queue, 527
hold-queue x out, 521
IOS, 862
ip access-group, 769
ip bgp-community new-format, 474
ip cef global configuration, 179
ip classless, 186, 345
ip community-list, 474, 479
ip default-network, 349-350
ip multicast-routing, 692, 708
ip ospf area, 295
ip ospf authentication, 301
ip ospf cost, 50, 293-294
ip ospf network, 269
ip pim dense-mode, 692
ip pim rp-address, 720
ip pim sparse-mode, 708
ip pim spt-threshold, 717
ip policy, 192
ip proxy-arp, 196
ip summary-address rip, 345
ip verify source command, 764
keyboard commands, 861
log-adjacency-changes detail, 292
login authentication, 751
map-class frame-relay, 566
map-class shape-with-LLQ, 620
match, 319-320
match as-path list-number, 439
match ip address, 192
match length, 192
maximum-paths, 450, 470, 472
BGP decision process tiebreakers, 
466-467
max-metric router-lsa on-startup 
announce-time, 304
max-metric router-lsa on-startup wait-
for-bgp, 304
max-reserved-bandwidth, 532
commands

 1021
neighbor, 270, 274, 468
neighbor default-originate, 382
neighbor ebgp-multihop, 401, 469
neighbor filter-list command, 439
neighbor peer-group, 365
neighbor remote-as, 365-366
neighbor route-map, 439
neighbor shutdown, 370
neighbor weight, 456
network, 295
injecting preﬁxes/routes into BGP 
tables, 370-371, 373
network backdoor, 394
no auto-summary, 370
no frame-relay inverse-arp, 184
no ip classless, 186, 345
no ip directed-broadcast, 773
no ip route-cache cef, 179
no synchronization, 395
no terminal editing, 861
ospf auto-cost reference-bandwidth, 
294
password, 745
police, 575, 578
police commands, 577
policy-map queue-voip, 563
port security configuration, 755
ppp authentication, 752
ppp multilink fragment-delay, 601
ppp multilink interleave, 600
prefix-list, BGP, 425
prefix-list commands, 322
priority, 535
priority-queue out, 543
radius-server host, 750
rate-limit, 579
recalling, 861
redistribute, 321
redistribute command, 324-325
redistribute connected, 458
redistribute ospf, 328
redistribute static, 347-348
route-map, 317-319
BGP, 425
router bgp, 365, 401
service password encryption, 746
service password-encryption, 303, 747
service-policy, 532
service-policy out, 538
service-policy output, 532, 559
service-policy output policy-map-
name, 564
set, 320
set as-path prepend command, 461
set community none, 476
set fr-de, 615
shape, 559, 561
shape average, 565
shape fecn-adapt, 614
shape peak mean-rate, 565
shape percent, 564
show interface trunk command, 48
show interfaces, 595
show ip, 23
show ip arp, 195
show ip bgp, 382, 439, 453-455
show ip bgp neighbor advertised-
routes, 388
show ip bgp neighbor neighbor-id 
advertised routes, 439
show ip bgp neighbor neighbor-id 
received routes, 439
show ip bgp regexp expression, 439
show ip mroute, 692, 714
show ip ospf border-routers, 283
show ip ospf database, 281
show ip ospf database summary link-id, 
283
show ip ospf neighbor, 262
show ip ospf statistics, 283
show ip route, 290
show queue, 528
commands

1022
spanning-tree portfast, 79
spanning-tree vlan, 73
summary-address, 344
switchport access vlan, 38, 43
switchport mode, 49
switchport nonegotiate, 49
switchport port-security maximum, 756
switchport trunk allowed, 48
switchport trunk encapsulation, 49
tacacs-server host, 750
terminal editing, 861
terminal history size, 860
traffic-shape fecn-adapt, 614
traffic-rate, FRTS configuration, 
567-568
username password, 747
username, 748
wrr-queue dscp-map, 546
wrr-queue random detect, 546
committed access rate. See CAR
committed burst (Bc), 556
committed information rate (CIR), 556
Common Spanning Tree (CST), 69
community lists, matching with 
COMMUNITY, 474-475
COMMUNITY PA, BGP, 473-474
filtering NLRI using COMMUNITY 
values, 479
matching with community lists, 
474-475
removing COMMUNITY values, 
475, 479
community VLANs, 37
comparing
802.11 standards, 791
BGP, prefix lists, distribute lists, and 
route maps, 428-429
Cisco 3550 and 2950 switches, 547-548
IGMP versions, 661
queuing tools, 520
wireless security, 813
compatibility, trunk conﬁguration 
compatibility, 48-49
compress command, 602
compression
Frame Relay payload compression, 
619-620
PPP, 601-602
header compression, 602-603
layer 2 payload compression, 602
Compression Control Protocol (CCP), 
602
confederation eBGP peers, 399
confederations
BGP subcommands, 402
IP routing tables, 399-401
conﬁguring, 401-404
conﬁguration
CB Marking tool, 500-505
CoS and DSCP, 505-507
locations for marking, 508-509
NBAR, 507-508
EIGRP, 246-249
LCP, 597-598
MQC (Modular QoS CLI), 495-496
class maps, 497-499
NBAR, 499-500
RIP, 213-214
authentication, 216-219
autosummarization, 214-216
distribution list and preﬁx list 
ﬁltering, 222-224
next-hop and split horizon 
features, 
219-220
offset lists, 220-222
static configuration of Frame Relay 
mapping, 183-184
trunks, 53, 779
conﬁguration mode
creating VLANs, 35-36
putting interfaces into VLANs, 34-35
commands

 1023
conﬁguration register, 858-859
conﬁgurations, switch ports, 12-14
conﬁguring
BGP policies. See BGP policies, 
configuring
CB Policing, 575
defaults for Bc and Be, 577
dual-rate policing, 577-578
multi-action policing, 578
policing by percentage, 578-579
policing subsets of trafﬁc, 576-577
single-rate, three-color policing, 
575-576
CB Shaping, 559-561
confederations, IP routing tables, 401-
404
Frame Relay, 615-619
FRTS, 565-567
adaptive shaping, 570
setting parameters, 568-569
trafﬁc-rate command, 567-568
with LLQ, 569-570
MED
multiple adjacent AS, 465-466
single adjacent AS, 465
MLS, 188-191
MST, 81
OSPF, 290-292
alternatives to OSPF network 
command, 295
authentication, 301-303
costs, 292-295
stub router, 303-304
virtual links, 299-301
PortChannels, 77-78
RADIUS server groups, 750
route maps with route-map command, 
317-319
shaping by bandwidth percent, 564
STP, 70-73
TCP intercept, 777
VLAN trunking on routers, 49-51
VLANs, 31
storing, 43-44
VLAN database conﬁguration 
mode, 
32-34
VTP, 40-41
extended-range VLANs, 42
normal-range VLANs, 42
WFQ, 527-528
WRED, 542
conforming packets, 571
congestion, Frame Relay, 613
adaptive shaping, FECN, and BECN, 
614
DE big, 615
congestion management. See queuing
congestion window (CWND), 158
congestive discard threshold (CDT), 526
connecting with networks, infrastructure 
mode, 799
connections, TCP, 155-156
console, 751
Content Addressable Memory (CAM), 
66, 643
convergence
EIGRP, 240-241
going active on routes, 243-245
input events and local 
computation, 241-243
limiting query scope, 246
stuck-in-active state, 245-246
RIP, 205-206
ceased updates, 210-212
steady-state operation, 206-208
triggered updates and poisoned 
routes, 208-210
tuning, 212-213
converging to STP topology, 65-66
converging to STP topology

1024
conversion, decimal-to-hexadecimal-to-
binary values, 955, 959
Core-Based Tree (CBT), 687
CoS (Class of Service) ﬁeld, 493
CB Marking tool, 505-507
CQ (custom queuing), 523-524
cross-over cables, 9
CSMA/CA (carrier sense multiple access 
with collision avoidance), 809
CST (Common Spanning Tree), 69
CSU/DSU, 594
custom queuing (CQ), 523-524
customizable thresholds, CiscoWorks 
WLSE, 835
cut-through, switches, 23
CWND (congestion window), 158
D
D4, 592
DAI (dynamic ARP inspection, 758-761
data communications equipment (DCE), 
594
data deﬁnition, SNMP, 164
Data Link Connection Identiﬁer (DLCI), 
610-611
data rates, wireless conﬁguration 
parameters (IEEE 802.11), 804-805
data terminal equipment (DTE), 594
data transfers, infrastructure mode, 
799-800
Database Description (DD or DBD), 264
databases, OSPF. See OSPF database 
exchange
DBD (Database Description), 264
DCE (data communications equipment), 
594
DCF (distributed coordination function), 
809-810
DD (Database Description), 264
DD messages, ﬂooding LSA headers to 
neighbors, 264
DE (Discard Eligibility) bit, 615
Dead, 308
debug ip arp, 196
debug ip ospf adjacency, 301
debug ip policy command, 195
debug policy, 196
decimal method
inclusive summary routes, 109-110
subnet numbers, broadcast addresses, 
range of IP addresses determining, 
99-101, 104-105
decimal values, converting to 
hexadecimal and binary values, 955, 
959
deep packet inspection, 499
Deering, Dr. Steve, 632
default routes, 345-346
adding to BGP, 381-382
creating using route summarization, 
350-351
default-information originate 
command, 
348-349
ip default-network command, 349-350
default-information originate command, 
348-349, 382
dense mode, multicast forwarding, 6
84-685
dense-mode routing protocols, 690
DVMRP, 706
MOSPF, 706
PIM-DM, 691
forming adjacencies with PIM 
hello messages, 691
Graft messages, 700-702
Prune messages, 693-695
reacting to failed links, 695-697
conversion, decimal-to-hexadecimal-to-binary values

 1025
rules for pruning, 697-699
source-based distribution trees, 
692-693
steady-state operation and state 
refresh messages, 699-700
deny clauses, route maps, 333
designated routers. See DR
designated port (DP), 65
determining, 64-65
designated routers, PIM, 704
designated switches, 64
DHCP, 139-141
DHCP snooping, 761-762
commands, 763
DHCP snooping binding table, 761
Differentiated Services Code Point 
(DSCP) ﬁeld, 490-493
DiffServ, RFCs, 512
Diffusing Update Algorithm (DUAL), 245
Digital Signal Level 0 (DS0), 592
direct sequence spread spectrum (DSSS), 
788
directed broadcasts, 772-774
disabling
BGP synchronization, 398
CDP and DTP, 754
InARP, 184-185
discard categories, WRED, 539
Discard Eligibility (DE) bit, 493, 615
discarding logic, 540
discovering neighbors, hello messages, 
263-264
discretionary PAs, 446
discriminators, multi-exit discriminators, 
464
distance command, 324, 394
preventing suboptimal routes, 336
distance router command, 337
Distance Vector Multicast Routing 
Protocol (DVMRP), 635, 687, 706
distribute lists versus preﬁx lists and 
route maps (BGP), 428-429
distributed coordination function (DCF), 
809
distribute-list command, 295-297
distribution list ﬁltering, RIP, 222-224
DIX, Type ﬁelds, 18
DIX Ethernet Version 2, 22
DLCI (Data Link Connection Identiﬁer), 
610-611
do command, 182
domains, broadcast domains, 31
downstream routers, 697
DP (designated port), 65
DR (designated routers)
on LANs, 266
election, 268-269
optimizing, 266-268
on WANs, 269
OSPF network types, 269
drop probability bits, 493
DS0 (Digital Signal Level 0), 592
DSCP (Differentiated Services Code 
Point) ﬁeld, 490-493
CB Marking tool, 505-507
DSCP-based WRED, 541
DSSS (direct sequence spread spectrum), 
788, 818
DTE (data terminal equipment), 594
DTP (Dynamic Trunk Protocol), 45
disabling, 754
DUAL (Diffusing Update Algorithm), 245
dual stacks, IPv6 conﬁguration, 121-123
dual-rate policing, CB Policing 
conﬁguration, 577-578
duplex, Ethernet, 9
DVMRP (Distance Vector Multicast 
Routing Protocol), 635, 687, 706
dynamic ARP inspection (DAI), 758-761
dynamic ARP inspection (DAI)

1026
dynamic grouping, CiscoWorks WLSE, 
835
dynamic NAT, conﬁguration, 118-119
dynamic NAT (without PAT), 116-117
Dynamic Trunk Protocol (DTP), 45
E
E1, 592 versus T1, 593
EAP (Extensible Authentication 
Protocol), 764
802.1X, 764-766
EAPoL (EAP over LAN), 764
eBGP (external BGP), 362, 365-366
over iBGP, 466
eBGP routes, adding to IP routing tables, 
392-393
egress blocking, 555, 613
egress queuing, Cisco 3550 switches, 
543-545
EIGRP, 233
adjacencies, 233-236
authentication, 250
autosummarization, 250
clearing IP routing tables, 250
command reference, 251-252
configuration, 246-249
convergence, 240-241
going active on routes, 243-245
input events and local 
computation, 241-243
limiting query scope, 246
stuck-in-active state, 245-246
IS-IS configuration for creating default 
summary routes, 351
load balancing, 249
offset lists, 250
packet types, 252
route filtering, 250
split horizon, 250
static routes, redistribute static, 347
topology table, 238-240
updates, 236-238
EIGRP route summarization, 344
electing root switches, STP, 61-63
election, DR election on LANs, 268-269
enable command, 745
enable password command, 746
enable secret command, 746
enabling Root Guard and BPDU Guard, 
754
encapsulation, Frame Relay, 612-613
encapsulation command, 50
encapsulation ppp command, 597
encrypted enable passwords, 748
enterprises, applying wireless LANs, 837
security, 837-838
voice services, 839
EoMPLS (Ethernet over MPLS), 51
error recovery, TCP, 157
ESF (Extended Superframe), 592
established keyword, 771
ACL, 776
Ethernet
address formats, 17-18
addresses, 16-17
unicast addresses, 16
auto-negotiation, 9
cabling standards, 24
Category 5 wiring, 8-9
collision domains, 10-11
cross-over cables, 9
CSMA/CD, 10
duplex, 9
frames, 14
framing and addressing, 14
header fields, 15
multicast Ethernet frames, 16
packets, 14
RJ-45 pinouts, 8-9
speed, 9
dynamic grouping, CiscoWorks WLSE

 1027
switch buffering, 10-11
switch port configuration, 12-14
twisted pairs, 8-9
Type fields, 18
types, 24
types of Ethernet, 22
VLANs. See VLANs
Ethernet over MPLS (EoMPLS), 51
EUI-64 format, 121
exceeding packets, 571
excess burst size (Be), 556
exclusive summary routes, 108
binary method, 110
Expedited Forwarding (EF) PHBs, 
492-493
Extended Superframe (ESF), 592
extended-range VLANs, 42
Extensible Authentication Protocol. See 
EAP
external BGP. See eBGP
F
failed links, reacting to (PIM-DM), 695-
697
fair-queue command, 527
Fast Link Pulses (FLP), 9
Fast Secure Roaming (FSR), 828
fast switching, IP forwarding, 178
FastE, 22
fast-switching cache, 178
fault status, CiscoWorks WLSE, 836
FCC rules, RF signals, 819
FCS (frame check sequence), 177
FD (feasible distance), 240
FDX (full duplex), 9
feasibility conditions, 241
feasible distance (FD), 240
FECN (Forward Explicit Congestion 
Notiﬁcation), 614
FHSS (frequency hopping spread 
spectrum), 
788, 817
FIB (Forwarding Information Base), 178
ﬁelds
classification and marking tools
Cell Loss Priority (CLP) ﬁeld, 493
Class of Service (CoS) ﬁeld, 493
Differentiated Services Code Point 
(DSCP) ﬁeld, 490-493
Discard Eligibility (DE) ﬁeld, 493
IP Precedence (IPP) ﬁeld, 
489-490
locations of, 494-495
MPLS Experimental (EXP) ﬁeld, 
494
Type fields, 18
FIFO (ﬁrst-in, ﬁrst-out), 519
FIFO queuing, 521
ﬁltering
BGP filtering tools. See BGP filtering 
tools
BGP updates by matching AS_PATHs, 
430-431
BGP updates based on NLRI, 424-427
route maps, 427
soft reconﬁguration, 428
BGP updates by matching AS_PATHs
AS_PATH ﬁlters, 436-439
AS_SET and AS_CONFED_SEQ, 
439, 442
BGP AS_PATH and AS_PATH 
segment, 431-433
regular expressions, 433-434
distribution list and prefix list filtering 
(RIP), 222-224
NLRI, using COMMUNITY values, 
479
ﬁltering

1028
OSPF, 295
ABR LSA type 3 ﬁltering, 297-298
distribute-list command, 295-297
subnets of summaries, using aggregate-
address command, 429-430
ﬁnding RPs, 720, 728
Anycast RP with MSDP, 726-727
Auto-RP, 721-723
BSR, 724-725
ﬁnish time (FT), 525
ﬂags
mroute, 735
TCP, 156
ﬂood (pacing), 309
ﬂooding LSA headers to neighbors, 264
ﬂow, 524
FLP (Fast Link Pulses), 9
ForeSight, 559
Forward Explicit Congestion Notiﬁcation 
(FECN), 614
forwarding, transitioning from blocking 
(STP), 67-68
Forwarding Information Base (FIB), 178
Forwarding state (Spanning Tree), 68
fraggle attacks, 774
fragmentation
Frame Relay, 621-622
wireless configuration parameters, 
IEEE 802.11, 808
fragment-free, switches, 23
frame check sequence (FCS), 177
Frame Relay, 610
command references, 623
configuring, 615-619
congestion, 613
adaptive shaping, FECN, and 
BECN, 614
DE bit, 615
DLCI, 610-611
fragmentation, 621-622
headers and encapsulation, 612-613
LMI, 611-612
payload compression, 619-620
traffic shaping, 559
Frame Relay Forum (FRF), 610
Frame Relay Forum Implementation 
Agreement 9 (FRF.9), 619
Frame Relay Inverse ARP, 180-183
disabling, 184-185
Frame Relay Inverse ARP (InARP), 
180-183
Frame Relay mapping, static 
conﬁguration, 
183-184
Frame Relay Trafﬁc Shaping. See FRTS
frame-relay class, 566
frame-relay fragment command, 621
frame-relay fragment size command, 621
frame-relay interface-dlci, 566, 615-616
frame-relay map, 615-616
frame-relay map commands, 183-184
frame-relay mincir rate command, 570
frames
Ethernet, 14
multicast Ethernet frames, 16
framing T1, 592-593
frequency hopping spread spectrum 
(FHSS), 788
frequency spectrum, 815
FRF (Frame Relay Forum), 610
FRF.12, 622
FRF.9 (Frame Relay Forum 
Implementation Agreement 9), 619
FRTS (Frame Relay Trafﬁc Shaping), 
551, 565
command references, 583
configuring, 565-567
adaptive shaping, 570
setting parameters, 568-569
with LLQ, 569-570
with trafﬁc-rate command, 567-
568
filtering

 1029
FSR (Fast Secure Roaming), 828
FT (ﬁnish time), 525
FTP (ﬁle transfer protocol), active and 
passive mode, 161-162
full duplex (FDX), 9
full-featured IOS, 858
functions of CBWFQ, 529
G–H
gain, RF signals, 816
gang of four, 610
GDA (Group Destination Address), 664
GigE, 22
GLBP (Gateway Load Balancing 
Protocol), 
141-143
global addresses, 120-121
global addressing, 611
GlOP, 640
GLOP addressing, multicast IP 
addresses, 640
Goodbye messages (EIGRP), 236
Graft messages, PIM-DM, 700-702
granted window, 157
gratuitous ARPs, 759
Group Destination Address (GDA), 664
group radius, 750
group tacacs+, 750
groups of AAA servers, 750-751
group-speciﬁc query messages, IGMPv2, 
654-656
half duplex (HDX), 9
hardware for SWAN, 831
hardware queues, 519
hashed enable passwords, 748
HDLC (High-Level Data Link Control), 
595-596
HDX (half duplex), 9
header compression, PPP, 602-603
header ﬁelds, Ethernet, 15
header format for IP addresses, 126-128
headers
Frame Relay, 612-613
LSA headers, 265
TCP, 159
Hello, 308
hello intervals (EIGRP), 234
hello messages
discovering neighbors, 263-264
forming adjacencies with PIM hello 
messages, 691
hellos, EIGRP, 233-236
help
CLI help features, 860-861
IOS commands, 861
hexadecimal values, converting to 
decimal and binary values, 955, 959
High-Level Data Link Control (HDLC), 
595-596
HLEN (Offset), 160
hold-queue command, 527
hold-queue limit, 526
hold-queue x out, 521
home wireless LANs, 842-844
host membership query functions, 
IGMPv1, 
646-647
host membership report functions, 
IGMPv1, 
647-648
solicited host membership report, 
648-649
unsolicited host membership report, 
650
host part (classful IP addressing), 94
host part (IP addressing), 97
HSRP (Hot Standby Router Protocol), 
141-143
HTTP protocol, TCP/IP, 856
HTTP protocol, TCP/IP

1030
I
IANA (Internet Assigned Numbers 
Authority), 638
iBGP (internal BGP), 362-365
over eBGP, 466
iBGP routes, adding to IP routing tables, 
394-396
BGP synchronization and redistributing 
routes, 396-398
confederations, 399-401
configuring confederations, 401-404
disabling BGP synchronization, 398
RRs, 404-409
ICMP (Internetwork Control Message 
Protocol), 134-135
ICMP Redirect message, 137
ICMP Time Exceeded message, 136
ICMP Unreachable message, 135
port numbers, 771
ICMP echo replies, 134
ICMP echo requests, 134
ICMP Redirect message, 137
ICMP Time Exceeded message, 136
ICMP Unreachable message, 135
IDS (intrusion detection system), 829-830
CiscoWorks WLSE, 836
neighbor ID, 468-469
maximum-paths command, 
471-472
IEE 802.1D STP Timers, 85
IEE 802.3u, 22
IEEE 802.2, 22
IEEE 802.3, 22
IEEE 802.3ab, 22
IEEE 802.3z, 22
IEEE 802.11, 788
802.11a, 788-789
802.11b, 789-790
802.11g, 790-791
802.11n, 791
ad hoc mode. See ad hoc mode
comparing standards, 791
infrastructure mode. See infrastructure 
mode
RF signals. See RF signals
wireless configuration parameters, 801
data rates, 804-805
fragmentation, 808
power-save mode, 805-806
RF channels, 803-804
RTS/CTS, 806-808
SSID, 802-803
transmit power, 804
wireless hardware components, 794
access points, 795
antennas, 795-796
bridges, 797
radio cards, 795
radio frequency peripherals, 797
repeaters, 796
routers, 797
wireless medium access, 809-810
wireless security, 810
AES, 812
open system authentication, 812
shared key authentication, 
812-813
TKIP, 811
VPNs, 813
WEP, 811
WPA, 812
wireless system configuration, 791
ad hoc mode conﬁguration, 794
infrastructure mode conﬁguration, 
792-794
IGMP snooping, 669, 671-673
comparing all versions, 661
managing distribution of multicast 
traffic, 
643-644
joining groups, 644
IANA (Internet Assigned Numbers Authority)

 1031
IGMP (Internet Group Management 
Protocol), 635, 645
joining groups, 670
RGMP, 674
IGMPv1, 645-646
host membership query functions, 
646-647
host membership report functions, 
647-648
solicited host membership report, 
648-649
unsolicited host membership 
report, 650
interoperability with IGMPv2, 657-658
leave mechanisms, 651
querier, 651
routers, 658
timers, 659
IGMPv2, 651-653
interoperability with IGMPv1, 657-658
leave groups and group-specific query 
messages, 654-656
querier, 656
routers, 658
timers, 659
IGMPv3, 659-661
SSM, 640, 660
IGPs (Interior Gateway Protocols), 360
in keyword, 428
Inactivity, 308
inappropriate IP addresses, 774-775
InARP (Frame Relay Inverse ARP), 
180-183
disabling, 184-185
inclusive summary routes, 107
binary method, 108-109
decimal method, 109-110
Individual/Group (I/G) bit, 17
Inform message, SNMP, 166
infrastructure mode, 798
connecting with networks, 799
data transfers, 799-800
roaming, 800
scanning, 798-799
wireless LANs, 792-794
infrastructure wireless LAN. See 
infrastructure mode
input events, EIGRP, 241-243
Inside Global addresses, 114
Inside Local addresses, 114
intercept mode, TCP intercept, 776
interface ID (IPv6 global addresses), 121
interface resets, synchronous serial links, 
594-595
interfaces, 521
assigning to VLANs, 35
using configuration mode to put 
interfaces into VLANs, 34-35
versus subinterfaces and virtual 
circuits, queuing, 520
Interior Gateway Protocol (IGPs), 360
internal BGP. See iBGP
internal processing, switches, 23
Internal Spanning Tree (IST), 82
International Organization for 
Standardization (ISO), 851
Internet Assigned Numbers Authority 
(IANA), 638
Internet Group Management Protocol. 
See IGMP
Internet Standard Management 
Framework. See SNMP
Internetwork Control Message Protocol. 
See ICMP
internetworks, 96
interoperability, IGMPv1 and IGMPv2, 
657-658
intersymbol interference (ISI), 820
intrusion detection system. See IDS
Inverse ARP (Frame Relay Inverse ARP), 
179-183
Inverse ARP (Frame Relay Inverse ARP)

1032
IOS
boot system command, 859
command help, 860
commands, 862
queuing, 521
IOS commands, catalyst IOS commands 
for catalyst switch conﬁguration, 23
IOS software boot sequences, 858-859
IP
ARP, 137-139
BOOTP, 139-141
command reference, 146-148
DHCP, 139-141
GLBP, 141-143
HSRP, 141-143
ICMP, 134-135
ICMP Redirect message, 137
ICMP Time Exceeded message, 
136
ICMP Unreachable message, 135
NTP, 143-145
proxy ARP, 137-139
RARP, 139-141
standards documents for, 146
and VLANs, 31
VRRP, 141-143
ip access-group command, 769
IP ACE, port matching, 771
IP ACL (IP access control lists), 769
ACEs, 770-771
command references, 769
wildcard masks, 772
IP addresses, 94-95
CIDR (classless interdomain routing), 
111-112
classful logic, 94-95
subnets, 95-96
classless logic, 94, 97
command reference, 126
determining range of
binary method, 98-99
decimal method, 99-101
header format, 126-128
inappropriate IP addresses, 774-775
IPv6, 119-120
address formats, 120
aggregatable global unicast 
addresses, 120-121
dual stack conﬁguration, 121-123
types of addresses, 123-124
NAT (network address translation), 
113-114, 125
dynamic NAT (without PAT), 
116-117
dynamic NAT conﬁguration, 
118-119
static NAT, 115-116
PAT (Port Address Translation), 117
private addressing, 113
protocol field values, 128
protocols for, 125
route summarization, 107-108
exclusive summary routes (binary 
method), 110
inclusive summary routes (binary 
method), 108-109
inclusive summary routes (decimal 
method), 109-110
standards documents, 125
subnet numbers, determining all
binary method, 102-104
decimal method, 104-105
subnets
allocation, 105-106
size of, 97-98
ip bgp-community new-format 
command, 474
IP cef global conﬁguration command, 
179
ip classless command, 186, 345
IP community lists, matching, 475
ip community-list command, 474, 479
IOS

 1033
IP forwarding, 177-178
classful routing, 185-186
classless routing, 185-186
command references, 197
fast switching, 178
switching paths, 178-179
IP hosts, 94
IP multicast routing, command 
references, 732
ip multicast routing, 692
IP multicasting, 629, 632
ip multicast-routing, 708
ip ospf area commands, 295
ip ospf authentication, 301
ip ospf cost, 50, 293-294
ip ospf network, 269
ip pim dense-mode, 692
ip pim rp-address, 720
ip pim sparse-mode, 708
ip pim spt-threshold, 717
ip policy command, 192
IP Precedence (IPP) ﬁeld, 489-490
IP preﬁx lists, 321-322
ip proxy-arp, 196
IP routing tables, 392
adding eBGP routes, 392-393
adding iBGP routes, 394-396
BGP synchronization and 
redistributing routes, 396-398
confederations, 399-401
conﬁguring confederations, 
401-404
disabling BGP synchronization, 
398
RRs, 404-409
adding multiple BGP routes, 450
backdoor routes, 393-394
clearing EIGRP, 250
IP routing. See IP forwarding
IP Source Guard, 763-764
ip summary-address rip, 345
ip verify source command, 764
IPP (IP Precedence) ﬁeld, 489-490
IPsec, 163
IPv4 addresses. See IP addresses
IPv6, 119-120
address formats, 120
aggregatable global unicast addresses, 
120-121
dual stack configuration, 121-123
types of addresses, 123-124
ISI (intersymbol interference), 820
ISL, VLAN trunking, 44-45
configuration, 45-46
ISO (International Organization for 
Standardization), 851
isolated VLANs, 37
IST (Internal Spanning Tree), 82
J–K
J1, 592
join message process, CGMP, 666
Join messages, 699
joining shared trees, PIM-SM, 710-712
joining groups, 635
IGMP, 644
IGMP snooping, 670
K values (EIGRP), 234
keepalive timer, 368
key chains, RIP authentication, 216
key sequences for command edit and 
recall, 861
keyboard commands, 861
keywords
allow-default, 774
established, 771
ACL, 776
group radius, 750
group tacacs+, 750
keywords

1034
in, 428
not-advertise, 344
out, 428
passive, 603
summary-only, 429
L
L3PDU (Layer 3 PDU), 856
LACP (Link Aggregation Control 
Protocol), 
77-78
LAN switch forwarding behavior, 19
LANs (local area networks)
802.11. See IEE 802.11
DRs, 266
optimizing, 266-268
wireless LANs. See wireless LANs
LAPF (Link Access Procedure for 
Frame-Mode Bearer Services, 612
launching applications, 635
Layer 2 payload compression, 602
Layer 2 security
private VLANs. See private VLANs
switch ports, 752
Layer 3 interfaces, MLS, 188
Layer 3 PDU (L3PDU), 856
Layer 3 protocol, 852
Layer 3 security, 768-769
directed broadcasts, 772-774
established keyword, 776
inappropriate IP addresses, 774-775
IP ACL, 769
ACEs, 770-771
wildcard masks, 772
RFCs, 768
RPF checks, 772-774
smurf attacks, 772-774
TCP intercept, 776-777
TCP SYN flood, 775
Layer 3 switching, 186
layers
OSI models, 851-852, 854
beneﬁts, 854-855
layer interactions, 856-857
TCP/IP, 855
LCP (Link Control Protocol), 596-597
configuration, 597-598
LFI, 600-601
MLP, 598-600
Learning state (Spanning Tree), 68
leave groups, IGMPv2, 654-656
leave mechanism, IGMPv1, 651
leave messages, CGMP, 667
Lempel-Ziv (LZ) compression, 602
Lempel-Ziv Stacker (LZS), 602
LFI (Link Fragmentation and 
Interleaving), 600
LCP, 600-601
lightweight access points, 833
limited-function IOS, 858
limiting
bandwidth, LLQ, 537
CBWFQ bandwidth, 532-534
line coding, 592
Link Access Procedure for Frame-Mode 
Bearer Services (LAPF), 612
Link Aggregation Control Protocol 
(LACP), 
77-78
Link Control Protocol. See LCP
Link Fragmentation and Interleaving 
(LFI), 
600-601
Link Quality Monitoring (LQM), LCP, 
597
link state, 260
link-state advertisements (LSAs), 260
link-state ID (LSID), 278
Link-State Refresh (LSRefresh), 275
Link-State Request (LSR), 265
keywords

 1035
Linksys WRT55AG dual-band access 
point, 801
Listening state (Spanning Tree), 68
lists most of the settings that impact show 
ip bgp command, 454
little-endian, 17
LLC (Logical Link Control), 14
LLQ (low-latency queuing), 
521, 529, 534-536, 538
bandwidth, 537
FRTS configuration, 569-570
priority queues, 538
tuning shaping for voice, 561-564
LMI (Local Management Interface), 
611-612
load balancing
EIGRP, 249
PortChannels, 76
local computation, EIGRP, 241-243
Local Management Interface (LMI), 
611-612
LOCAL_PREF, 457-458
LOCAL_PREF PA, 447
LOF (Loss of Frame), 594
log-adjacency-changes detail, 292
logic
discarding, 540
MLS logic, 186
Logical Link Control (LLC), 14
login authentication command, 751
login security, overriding defaults for, 
751
Loop Guard, 83-84
loop prevention, RIP, 205-206
ceased updates, 210-212
steady-state operation, 206-208
triggered updates and poisoned routes, 
208-210
tuning, 212-213
loopback circuitry, NICs, 11
looped link detection, LCP, 597
loop-inconsistent state, 84
LOS (Loss of Signal), 594
Loss of Frame (LOF), 594
low-latency queuing. See LLQ
LQM (Link Quality Monitoring), LCP, 
597
LSA headers, 265
flooding to neighbors, 264
LSA summary, 287
LSA type 1, 278-281
LSA type 2, 278-281
LSA type 3, 281-284
LSA type 4, 284-285
LSA type 5, 284-285
LSA types and OSPF design, 286-287
lsa-group, 309
LSAs (link-state advertisements), 260
LSID (link-state ID), 278
LSR (Link-State Request), 265
LSRefresh, 308
LSRefresh (Link-State Refresh), 275
LZ (Lempel-Ziv) compression, 602
LZS (Lempel-Ziv Stacker), 602
M
MAC address reduction, 63
MAC addresses
mapping to multicast IP addresses, 
642-643
overriding, 18
tables, displaying, 53, 86, 197, 778
Management Information Base (MIB), 
163
mandatory PAs, 446
many-to-few multicasts, 632
many-to-many multicasts, 632
map-class frame-relay command, 566
map-class shape-with-LLQ, 620
map-class shape-with-LLQ

1036
mapping multicast IP addresses to MAC 
addresses, 642-643
mark probability denominator (MPD), 
540
marking tools. See classiﬁcation and 
marking tools
masks
classful IP addressing, 94
wildcard masks, 424
match as-path list-number command, 
439
match command, 319-320
match commands (MQC), 
498-499, 511-512
match ip address command, 192
match length command, 192
MaxAge, 308
maximum segment size (MSS), 158
maximum-paths command, 450, 470, 472
BGP decision process tiebreakers, 466-
467
max-metric router-lsa on-startup 
announce-time command, 304
max-metric router-lsa on-startup 
wait-for-bgp command, 304
max-reserved-bandwidth, 532
MBGP (Multiprotocol Border Gateway 
Protocol), 687
Measured Round-Trip Time (MRTT), 
157
MED (MULTI_EXIT_DISC), 464
configuring
multiple adjacent autonomous 
systems, 465-466
single adjacent AS, 465
features of, 464
scope of, 466
memorizing, mnemonics for memorizing 
BGP decision process, 451-452
messages
Assert messages, PIM, 703-704
CGMP, 668
Graft messages, PIM-DM, 700-702
Join, 699
OSPF messages, 261-262
OSPF messages. See OSPF messages
PIM-DM, summary of messages, 705
Prune messages, PIM-DM, 693-695
state refresh messages, PIM-DM, 
699-700
metacharacters, 433
metric types
redistribution routes, 340-342
route redistribution, 328-329
metrics
calculating for types 1 and 2, 285-286
redistribution routes, 340-342
route redistribution, 328-329
MIB (Management Information Base), 
163
SNMP, 164-166
Microsoft Point-to-Point Compression 
(MPPC), 602
MIMO (multiple input-multiple output), 
791
minimum shaping rate, 559
MIR (minimum information rate), 559
MISTP (Multiple Instance STP), 80
MLD (Multicast Listener Discovery), 662
MLP (Multilink PPP), 597
LCP, 598-600
LFI, 600-601
MLS (multilayer switching), 186
configuring, 188-191
Layer 3 interfaces, 188
logic, 186
routed ports, 187
mapping multicast IP addresses to MAC addresses

 1037
mnemonics
for memorizing BGP decision process, 
451-452
OSI terminology, 855
modiﬁed tail drop, 526
modifying queue length, 520
Modular QoS CLI. See MQC, 495
modulation, RF signals, 814
MOSPF (Multicast Open Shortest Path 
First), 635, 691, 706
MPD (mark probability denominator), 
540
MPLS Experimental (EXP) ﬁeld, 494
MPPC (Microsoft Point-to-Point 
Compression), 602
MQC (Modular QoS CLI), 495-496
class maps, 497-499
match commands, 511-512
NBAR, 499-500
mroute ﬂags, 735
MRTT (Measured Round-Trip Time), 
157
MSDP (Multicast Source Discovery 
Protocol), 721
Anycast RP, 726-727
MSS (maximum segment size), 158
MST (Multiple Spanning Trees), 80, 82
configuring, 81
MSTP (Multiple STP), 80
mtrie, 179
multicasting, trafﬁc, 635
MULTI_EXIT_DISC (MED), 464
multi-action policing, CB Policing 
conﬁguration, 578
multicast addresses, 16
multicast applications, 632
multicast Ethernet frames, 16
multicast forwarding using dense mode, 
684-685
multicast forwarding using sparse mode, 
687-689
multicast IP addresses, 638
GLOP addressing, 640
mapping to MAC addresses, 642-643
permanent multicast groups, 639
private multicast domains, 640
ranges, 641
SSM, 640
transient groups, 639, 641
multicast IP addresses range and 
structure, 638
Multicast Listener Discovery (MLD), 662
Multicast Open Shortest Path First. See 
MOSPF
multicast routing, 683-684
dense-mode routing protocols. See 
dense-mode routing protocols
multicast forwarding using dense 
mode, 
684-685
multicast forwarding using sparse 
mode, 
687-689
multicast scoping. See multicast 
scoping
problems, 683
RPF check, 685-687
multicast scoping, 689
administrative scoping, 690
TTL scoping, 689-690
Multicast Source Discovery Protocol. 
See MSDP
multicasting, 632
broadcast method, 633
requirements for, 635
scaling, 637
traffic, 637
unicast, 632-633
multicasts
CGMP. See CGMP
IGMP snooping. See IGMP snooping
RGMP. See RGMP
multicasts

1038
multi-exit discriminators, 464
multilayer switching. See MLS
Multilink PPP (MLP), 597
multipath, RF signals, 820-821
multiple adjacent AS, 466
multiple input-multiple output (MIMO), 
791
Multiple Instance STP (MISTP), 80
Multiple Spanning Trees (MST), 80, 82
configuring, 81
Multiple STP (MSTP), 80
Multiprotocol Border Gateway Protocol 
(MBGP), 687
mutual redistribution at multiple 
routers, 333-335
N
naming VLANs, 53, 197
NAT (Network Address Translation), 
111, 113-114, 125
dynamic NAT, configuration, 118-119
dynamic NAT (without PAT), 116-117
static NAT, 115-116
NAT overloading. See PAT (Port Address 
Translation)
NBAR (Network-Based Application 
Recognition), 507
CB Marking tool, 507-508
MQC classification with, 499-500
NBMA (nonbroadcast multi-access) 
networks, 269
NBMA networks
OSPF network types, 270-272, 274
setting priority on, 272-273
NCP (Network Control Protocol), 596
neighbor command, 270, 274, 468
neighbor default-originate, 382
neighbor ebgp-multihop command, 
401, 468
neighbor ﬁlter-list command, 439
neighbor ID, 467, 469
maximum-paths command, 471-472
neighbor peer-group command, 365
neighbor remote-as command, 365-366
neighbor route-map command, 439
neighbor shutdown command, 370
neighbor states, 262
OSPF, 309
neighbor weight command, 456
neighbors
advertising BGP routes to, 383
BGP Update message, 383-384
determining contents of updates, 
384-386
impact of decision process and 
NEXT_HOP, 386-391
BGP neighbors. See BGP neighbors
discovering, 263-264
EIGRP, 233-236
Network Address Translation. See NAT
network backdoor command, 394
network command, 295
injecting prefixes and routes into BGP 
tables, 370-371, 373
Network Control Protocol (NCP), 596
network layer protocol, 852
Network Layer Protocol ID (NLPID), 
612
network layer reachability information 
(NLRI), 370
network part (classful IP addressing), 94
Network-Based Application Recognition. 
See NBAR
networks, 94, 96
connecting to networks with 
infrastructure mode, 799
NBMA networks
OSPF network types, 270-272, 274
setting priority on, 272-273
multi-exit discriminators

 1039
NEXT_HOP, 466
NEXT_HOP PA, 385, 446
NEXT_HOP reachable, 456
next-hop feature, RIP, 219-220
NICs, loopback circuitry, 11
NLPID (Network Layer Protocol ID), 
612
NLRI (network layer reachability 
information), 370
filtering using COMMUNITY values, 
479
filtering BGP updates, 424-427
route maps, 427
soft reconﬁguration, 428
NLRI ﬁltering tools, 424
no auto-summary command, 370
no frame-relay inverse-arp, 184
no frame-relay inverse-art, 184
no ip classless, 186
no ip classless command, 345
no ip directed-broadcast command, 773
no ip route-cache cef commands, 179
no synchronization command, 395
no terminal editing, 861
nonbroadcast multi-access (NBMA) 
networks, 269
noncanonical, 17
nonoverlapping channels, IEEE 802.11g, 
790
nontransitive, PAs, 446
normal-range VLANs, 42
not-advertise keyword, 344
NTP (Network Time Protocol), 143-145
numeric ranges, OSPF, 310
O
OAM (Operation Administration, and 
Maintenance), 594
Offset (HLEN), 160
offset lists
EIGRP, 250
RIP, 220-222
OOF (Out of Frame), 594
open system authentication, 811-812
Open System Interconnection reference 
model. See OSI models
Operation, Administration, and 
Maintenance (OAM), 594
optimizing
DRs on LANs, 266-268
STP, 73
BackboneFast, 73, 75
discovery and conﬁguration of 
PortChannels, 77-78
load balancing PortChannels, 76
PortChannels, 76
PortFast, 73-75
UplinkFast, 73-75
Organizationally Unique Identiﬁer 
(OUI), 17
ORIGIN, BGP tables, 382-383
ORIGIN PA, 458, 463
orthogonal frequency division 
multiplexing, RF signals, 818
OS categories four routers, 858
OSI (Open System Interconnection) 
models, 851
OSI models, 851
layer interactions, 856-857
layers, 851-852, 854
beneﬁts, 854-855
terminology, 855-856
OSPF (Open Shortest Path First)
command references, 305-307
configuring, 290-292
alternatives to OSPF network 
command, 295
authentication, 301-303
costs, 292-295
OSPF (Open Shortest Path First)

1040
stub router, 303-304
virtual links, 299-301
costs, 292-295
DRs on LANs, 266
election on, 268-269
optimizing, 266-268
filtering, 295
ABR LSA type 3 ﬁltering, 297-299
distribute-list command, 295-297
neighbor states, 309
numeric ranges, 310
processes, clearing, 292-295
RIDs, 260-261
SPF calculation, 274-275
steady-state operation, 275
stubby areas, 287-290
ABRs, 287
OSPF ABR LSA type 3 ﬁltering, 297-298
area range command, 299
ospf auto-cost reference-bandwidth, 294
OSPF database exchange, 260
IP protocol 89, 261
RIDs, 260-261
OSPF design, 276-277
and LSA types, 286-287
OSPF LSA types, 277-278
and OSPF design, 286-287
types 1 and 2, 278-281
types 3, 281-284
types 4 and 5, 284-285
OSPF messages, 261-262
DD messages, flooding LSA headers to 
neighbors, 264
hello messages, discovering neighbors, 
263-264
LSA headers, 265
OSPF network types, 269
NBMA networks, 270-272, 274
OSPF route summarization, 344
OSPF timer, 308
OSPF wait time, 268
OUI (Organizationally Unique 
Identiﬁer), 17
out keyword, 428
Out of Frame (OOF), 594
outgoing interface lists, 694
Outside Global addresses, 114
Outside Local addresses, 114
overriding
defaults for login security, 751
MAC addresses, 18
P
Packet Description Language Modules 
(PDLMs), 508
packet routing
ARP, 137-139
BOOTP, 139-141
classification and marking tools. 
See classification and marking tools
command references, 146-148
DHCP, 139-141
EIGRP, 233
adjacencies, 233-236
authentication, 250
autosummarization, 250
clearing IP routing tables, 250
command reference, 251-252
conﬁguration, 246-249
convergence, 240-246
load balancing, 249
offset lists, 250
packet types, 252
route ﬁltering, 250
split horizon, 250
topology table, 238-240
updates, 236-238
GLBP, 141-143
HSRP, 141-143
OSPF (Open Shortest Path First)

 1041
ICMP, 134-135
ICMP Redirect message, 137
ICMP Time Exceeded message, 
136
ICMP Unreachable message, 135
NTP, 143-145
proxy ARP, 137-139
RARP, 139-141
RIP, 204-205
authentication, 216-219
command reference, 225-226
conﬁguration, 213-216
convergence and loop prevention, 
205-213
distribution list and preﬁx list 
ﬁltering, 222-224
next-hop and split horizon 
features, 
219-220
offset lists, 220-222
standards documents, 225
standards documents for, 146
VRRP, 141-143
packets
conforming packets, 571
Ethernet, 14
exceeding packets, 571
queuing, 521
violating packets, 571
PAgP (Port Aggregation Protocol), 77-78
parameters, FRTS conﬁguration, 
568-569
PAs (path attributes), 360
BGP, 410
NEXT_HOP, 385
ORIGIN, BGP, 382-383
ORIGIN PA, 458-459, 463
passive, 603
passive mode, FTP, 161-162
passive scanning, infrastructure mode, 
798
password command, 745
passwords
CLI, 745-746
enable and username passwords, 
746-747
hashed/encrypted enable passwords, 
748
PAT (Port Address Translation), 117
configuration, 118-119
path attributes. See PAs
path vector logic, 360
payload compression, Frame Relay, 619-
620
PCF (point coordination function), 809
PCM (pulse code modulation), 592
PDLMs (Packet Description Language 
Modules), 508
PDU (protocol data unit), 856
peak information rate (PIR), 573
peak rates, CB Shaping, 565
Per VLAN Spanning Tree Plus (PVST+), 
68-70
percentages, CB Policing conﬁguration, 
578-579
Per-Hop Behaviors. See PHBs
permanent multicast groups, multicast 
IP addresses, 639
permit .*, 442
phase shift keying (PSK), 815
PHBs (Per-Hop Behaviors), 490
Assured Forwarding (AF) PHBs, 
491-492
Class Selector (CS) PHBs, 491
Expedited Forwarding (EF) PHBs, 
492-493
PIM (Protocol Independent Multicast), 
687
bidirectional PIM, 729-730
sparse-dense mode, 723
PIM (Protocol Independent Multicast)

1042
PIM-DM (Protocol Independent 
Multicast dense mode), 635-636, 638, 
690-691
Assert messages, 703-704
designated routers, 704
forming adjacencies with PIM hello 
messages, 691
Graft messages, 700-702
Prune messages, 693-695
Prune Override, 702-703
reacting to failed links, 695-697
rules for pruning, 697-699
source-based distribution trees, 692-
693
steady-state operation and state refresh 
messages, 699-700
summary of messages, 705
versus PIM-SM, 707, 730
PIM-SM (Protocol Independent 
Multicast Sparse Mode), 635, 689, 707
Assert messages, 703-704
designated routers, 704
finding RPs, 720
Anycast RP with MSDP, 726-727
Auto-RP, 721-723
BSR, 724-725
joining shared trees, 710-712
Prune Override, 702-703
pruning shared trees, 719-720
RPs multicast routing tables, 716-717
shared distribution trees, 714
shortest-path tree switchovers, 717-719
source registration process, 712, 714
sources sending packets to RP, 708-710
steady-state operations by continuing to 
send joins, 715-716
versus PIM-DM, 707, 730
ping packets, 134
PIR (peak information rate), 573
point coordination function (PCF), 809
Point-to-Point Protocol. See PPP
poisoned routes (RIP), 208-210
police command, 575, 577-578
policers, 509-510
policies, BGP routing policies. 
See BGP routing policies
policing
CB Policing. See CB Policing
single-rate, three-color policing, 573
single-rate, two-color policing, 
571-572
subsets of traffic, CB Policing, 576-577
two-rate, three-color policing, 573-575
policy maps, 564
policy routing, 191, 193-196, 510
set commands, 192
policy-map command (MQC), 496
policy-map queue-voip, 563
poll interval, 308
Port Address Translation. See PAT
Port Aggregation Protocol (PAgP), 77-78
port matching, IP ACE, 771
port numbers, TCP, 155-156
port security conﬁguration commands, 
755
PortChannels, optimizing STP, 76
discovery and configuration, 77-78
load balancing, 76
PortFast, optimizing STP, 73-75
ports, 61
access ports, protecting, 82-83
designated ports, 64-65
root ports, 63-64
routed ports, MLS, 187
switch ports, 752
switches, assigning to VLANs, 53
trusted ports, 752
unused ports, 752
best practices for, 753-754
unused ports. See unused ports
user ports. See user ports
PIM-DM (Protocol Independent Multicast dense mode)

 1043
POST (power-on self-test), 858
power-save mode, wireless conﬁguration 
parameters (IEEE 802.11), 805-806
PPP (Point-to-Point Protocol), 595-596
compression, 601-602
header compression, 602-603
layer 2 payload compression, 602
LCP, 596-597
conﬁguration, 597-598
LFI, 600-601
MLP, 598-600
security, 752
ppp authentication, 752
ppp multilink fragment-delay 
commands, 601
ppp multilink interleave command, 600
PQ (priority queuing), 522
preﬁx length, 97
preﬁx list ﬁltering, RIP, 222-224
preﬁx lists versus route maps and 
distribute lists (BGP), 428-429
preﬁx part (IP addressing), 97
preﬁxes, 94, 97
injecting into BGP tables, 370
network command, 370-371, 373
redistributing from IGP, static, or 
connected routes, 373-375
preﬁx-list commands, 322
BGP, 425
prepending AS_PATH, 461, 463
preventing
suboptimal routes by setting the AD, 
335-338
suboptimal routes by using route tags, 
338-340
primary subnets, 234
primary VLANs, 37
priority command, 529, 535
priority queuing (PQ), 522
priority-queue out command, 543
privacy, TCP/IP, 163
private IP addressing, 113
private multicast domains, multicast IP 
addresses, 640
private VLANs, 36-38, 767-768
process switching, IP forwarding, 179
protecting
access ports, 82-83
STP, 82
BPDU Guard, 82-83
Loop Guard, 83-84
Root Guard, 82-83
UDLD, 83-84
trunks, 83-84
protocol data unit (PDU), 856
protocol ﬁeld values, IP addressing, 128
Protocol Independent Multicast (PIM), 
687
Protocol Independent Multicast Dense 
Mode. 
See PIM-DM
Protocol Independent Multicast-Sparse 
Mode. See PIM-SM
Protocol Type ﬁelds. See Type ﬁelds
protocols
application protocols, TCP/IP, 160-161
ARP, 137-139
BOOTP, 139-141
DHCP, 139-141
EIGRP, 233
adjacencies, 233-236
authentication, 250
autosummarization, 250
clearing IP routing tables, 250
command reference, 251-252
conﬁguration, 246-249
convergence, 240-246
load balancing, 249
offset lists, 250
packet types, 252
route ﬁltering, 250
split horizon, 250
Protocols

1044
topology table, 238-240
updates, 236-238
GLBP, 141-143
HSRP, 141-143
ICMP, 134-135
ICMP Redirect message, 137
ICMP Time Exceeded message, 
136
ICMP Unreachable message, 135
IGMP, 635
IGPs, 360
for IP addresses, 125
MLD, 662
NTP, 143-145
packet routing, standards documents 
for, 146
PPP. See PPP
proxy ARP, 137-139
RARP, 139-141
RIP, 204-205
authentication, 216-219
command reference, 225-226
conﬁguration, 213-216
convergence and loop prevention, 
205-213
distribution list and preﬁx list 
ﬁltering, 222-224
next-hop and split horizon 
features, 
219-220
offset lists, 220-222
standards documents, 225
RTP, 236
SNMP, 164-166
TCP. See TCP
UDP, 154-155
VRRP, 141-143
proxy ARP, 137-139
Prune messages, PIM-DM, 693-695
Prune Override, PIM, 702-703
pruning
PIM-DM, 697-699
shared trees, PIM-SM, 719-720
pseudonodes, 279
PSH (Push), 160
PSK (phase shift keying), 815
public wireless LANs, 840-842
pulse code modulation (PCM), 592
PVST+ (Per VLAN Spanning Tree Plus), 
68-70
Q
QAM (quandrature amplitude 
modulation), 815, 818
QoS service classes, 496
QoS tools, classiﬁcation and marking. 
See classiﬁcation and marking tools
quartets, IPv6 addresses, 120
querier
IGMPv1, 651
IGMPv2, 656
Query Response Interval, 649
query scope (EIGRP), limiting, 246
queue lengths
modifying, 520
WFQ, 526-527
queuing, 515, 521
Cisco 3550, 545-546
Cisco 3550 switches, egress queuing, 
543-545
discard categories, WRED, 539
hardware queues, 519
interfaces versus subinterfaces and 
virtual circuits, 520
protocol comparison, 538
software queues, 519
WRED
conﬁguration, 542
weight packets, 541
Protocols

 1045
queuing tools
CBWFQ, 529-530, 532, 538
bandwidth, 532-534
command references, 530
comparing, 520
CQ, 523-524
FIFO queuing, 521
LLQ, 529, 534-536, 538
bandwidth, 537
more than one priority queue, 538
PQ, 522
WFQ, 524-525
conﬁguration, 527-528
drop policy, number of queues, 
and queue lengths, 526-527
types of queues, 527
WFQ scheduler, 525-526
queue-voip, 569
R
R2, 407
R2# sh ip bgp | include 10.1.34.4, 444
R2# show ip bgp neighbor 3.3.3.3 
received-routes | include 303, 443
R3, 407
R9, 407
radio cards, 795
radio frequency peripherals, 797
radio management aggregation, 828
RADIUS, 747
configuring server groups, 750
RADIUS attribute, 764
radius-server host, 750
ranges, multicast addresses, 641
Rapid Spanning Tree Protocol (RSTP), 
78-80
RARP, 139-141
RAT (Router Audit Tool), 775
rate-limit ACL, 580
rate-limit command, 579
RD (reported distance), 239
reacting to failed links, PIM-DM, 
695-697
reassociation, 793
receiver’s advertised window, 157
receiver’s window, 157
Red alarm, 594
redistribute command, 321, 324-325
redistribute connected command, 458
redistribute ospf commands, 328
redistribute static, 347-348
redistributing
from IGP, static, or connected routes, 
BGP tables, 373-375
route maps
with match command, 319-320
with set commands, 320
redistribution, 324, 329-333
command references, 352
metrics and metric types, 340-342
mutual redistribution at multiple 
routers, 
333-335
setting metrics, metric types, and tags, 
328-329
using default settings, 325-328
reﬁlling dual token buckets, 573
regular expressions, matching AS_PATH, 
433-434
relay agents (DHCP), 140
Reliable Transport Protocol (RTP), 236
Remote Monitoring MIB, 166
removing
COMMUNITY values, 475, 479
private ASNs, 460-461
rendezvous point (RP), 687
repeaters, 796
reported distance (RD), 239
requesting LSA headers, 265
requesting LSA headers

1046
request-to-send/clear-to-send. See RTS/
CTS
Resource Reservation Protocol (RSVP), 
527
Retransmission, 308
reverse-path-forwarding (RPF) paths, 
684
revision numbers, VTP, 39-40
RF channels, wireless conﬁguration 
parameters (IEEE 802.11), 803-804
RF interference, RF signals, 819-820
RF signals, 814
characteristics, 815-816
FCC rules, 819
gain, 816
modulation, 814
multipath, 820-821
orthogonal frequency division 
multiplexing, 818
RF interference, 819-820
SNR, 816-817
spread spectrum, 817-818
RFCs
DiffServ, 512
Layer 3 security, 768
RGMP (Router-Port Group 
Management Protocol), 663, 673-675
IGMP snooping, 674
RIB (BGP Routing Information Base), 
370
RID (router identiﬁer), 260
RIP (Routing Information Protocol), 
204-205
command references, 225-226
configuration, 213-214
authentication, 216-219
autosummarization, 214-216
distribution list and preﬁx list 
ﬁltering, 222-224
next-hop and split horizon 
features, 
219-220
offset lists, 220-222
convergence and loop prevention, 
205-206
ceased updates, 210-212
steady-state operation, 206-208
triggered updates and poisoned 
routes, 208-210
tuning, 212-213
standards documents, 225
RIP route summarization, 345
RJ-45 pinouts, 8-9
roaming, infrastructure mode, 800
ROMMON, 858
Root Guard, 82-83
enabling, 754
root port (RP), 63-64
root switches, electing, 61-63
root-path tree (RPT), 710
route aggregation, AS_PATH, 461, 463
route cache, 178
route default routes. See default routes
route ﬁltering, EIGRP, 250
route maps
configuring with route-map command, 
317-319
deny clauses, 333
match and set commands for BGP, 479
match commands for route 
redistribution, 
319-320
NLRI filtering, 427
policy routing, 510
versus prefix lists and distribute lists 
(BGP), 428-429
redistributing subsets of routes, 
329-333
set commands for route redistribution, 
320
request-to-send/clear-to-send

 1047
route redistribution, 324
influencing with metrics and metric 
types, 
340-342
redistribute command, 324-325
setting metrics, metric types, and tags, 
328-329
using default settings, 325-328
using route maps, 329-333
route reﬂectors. See RRs
route summarization, 107-108, 342-343
creating default routes, 350-351
EIGRP route summarization, 344
exclusive summary routes, binary 
method, 110
inclusive summary routes
binary method, 108-109
decimal method, 109-110
OSPF route summarization, 344
RIP route summarization, 345
route tags, preventing suboptimal routes, 
338-340
routed ports, MLS, 187
route-map command, 317-319
BGP, 425
Router Audit Tool (RAT), 775
router bgp command, 365, 401
router identiﬁer (RID), 260
Router-Port Group Management 
Protocol. See RGMP
routers
ABRs, 276
BGP router ID of advertising router, 
467
configuring VLAN trunking on, 49-51
designated routers, PIM, 704
downstream routers, 697
IGMPv1 and IGMPv2, 658
mutual redistribution at multiple 
routers, 333-335
OS categories, 858
OSPF router IDs, 260-261
queuing, 521
upstream routers, 697
Wi-Fi, 843
wireless LAN routers, 797
routes
backdoor routes, IP routing tables, 
393-394
BGP. See BGP
default routes, 345-346
adding to BGP, 381-382
injecting into BGP tables, 370
impact of auto-summary on 
redistributed routes and, 
375-377
manual summaries and 
AS_PATHs, 
378-381
network command, 370-371, 373
redistributing from IGP, static, or 
connected routes, 373-375
ORIGIN, BGP tables, 382-383
preventing suboptimal routes by setting 
AD, 335-338
preventing suboptimal routes by using 
route tags, 338-340
static routes, redistribute static, 
347-348
routing
classful routing, 185-186
classless routing, 185-186
policy routing, 191, 193-196
set commands, 192
Routing Information Protocol. See RIP
routing packets. See packet routing
routing packets

1048
RP (rendezvous point), 687
finding, 720, 728
Anycast RP with MSDP, 726-727
with Auto-RP, 721-723
with BSR, 724-725
multicast routing tables, PIM-SM, 
716-717
sources sending packets to, PIM-SM, 
708-710
RP (root port), 63
RPF (reverse-path-forwarding) paths, 
684
RPF checks, 772-774
multicast routing, 685-687
RPT (root-path tree), 710
RRs (route reﬂectors), 404
IP routing tables, 404-409
RSTP (Rapid Spanning Tree Protocol), 
78-80
RSVP (Resource Reservation Protocol), 
527
RTP (Reliable Transport Protocol), 236
RTS/CTS (request-to-send/clear-to-
send), 806
wireless configuration parameters, 
IEEE 802.11, 806-808
S
same-layer interaction, 857
SAP (Service Advertising Protocol), 644
scaling, multicasting, 637
scanning, infrastructure mode, 798
active scanning, 799
passive scanning, 798
scheduling
CQ logic, 523
PQ logic, 522
strict-priority scheduling, 547
schemes, queuing, 521
scoping, multicast scoping. 
See multicast scoping
SDP (Session Description Protocol), 644
secondary VLANs, 37
Secure Shell (SSH), 163, 768
Secure Sockets Layer (SSL), 163
secure user interfaces, CiscoWorks 
WLSE, 836
security
AAA, 747
authentication methods, 748-750
groups of AAA servers, 750-751
overriding defaults for login 
security, 751
enterprise security, 837-838
Layer 2 security, switch ports. See 
switch ports
Layer 3 security, 768-769
Layer 3 security. See Layer 3 security
passwords. See passwords
port security, 754-758
PPP, 752
sniffer traces, 40
SNMP, 164, 167
switches. See switch ports
TCP/IP, 163
wireless security. See wireless security
security policy monitoring, CiscoWorks 
WLSE, 836
self-healing functions, CiscoWorks 
WLSE, 837
sequence number (SN), 525
serial cable control pin leads, 595
servers, groups of AAA servers, 750-751
Service Advertising Protocol (SAP), 644
service password-encryption, 
303, 746-747
service set identiﬁer (SSID), 799
service-policy command, 532
service-policy command (MQC), 496
RP (rendezvous point)

 1049
service-policy out command, 538
service-policy output, 532, 559
service-policy output policy-map-name, 
564
Session Description Protocol (SDP), 644
set as-path prepend command, 461
set commands, 320
policy routing, 192
set community none command, 475
set fr-de command, 615
SF (Superframe), 592
shape average, 565
shape command, 559, 561
shape fecn-adapt command, 614
shape peak mean-rate command, 565
shape percent command, 564
shaped rate, 556
shaping. See also trafﬁc shaping
adaptive shaping, 565
adaptive shaping, FRTS, 570
CB Shaping, 551
configuring by bandwidth percent, 564
FRTS, 551
tuning shaping for voice using LLQ and 
Tc, 561-564
shaping queues, 555
shaping rate, 556-557
minimum shaping rate, 559
shared distribution trees, PIM-SM, 714
shared key authentication, 811-813
shared trees
creating, 711
joining with PIM-SM, 710-712
pruning, PIM-SM, 719-720
Shortest Path First (SPF), 265
shortest-path tree (SPT), 692
shortest-path tree switchovers, PIM-SM, 
717-719
show command, WFQ, 528
show interface trunk command, 48
show interfaces command, 595
show ip arp command, 195
show ip bgp command, 382, 439, 453, 455
show ip bgp neighbor advertised-routes 
command, 388
show ip bgp neighbor neighbor-id 
advertised-routes command, 439
show ip bgp neighbor neighbor-id 
received routes, 439
show ip bgp regexp expression command, 
439
show ip command, 23
show ip mroute, 714
show ip mroute command, 692
show ip ospf border-routers, 283
show ip ospf database command, 281
show ip ospf database summary link-id 
command, 283
show ip ospf neighbor command, 262
show ip ospf statistics command, 283
show ip route command, 290
show queue command, 528
signal-to-noise ratio (SNR), 816-817
Simple Network Management Protocol. 
See SNMP
single adjacent AS, 465
single-bucket, two-color policing, 572
single-rate, three color policing, CB 
Policing conﬁguration, 575-576
single-rate, three-color policing, 573
single-rate, two-color policing, 571-572
sliding windows, TCP, 157-159
Slow Start Threshold (SSThresh), 159
SLSM (Static Length Subnet Masking), 
104
small ofﬁce wireless LANs, 842-844
smurf attacks, 772-774
SN (sequence number), 525
SNAP (Sub-Network Access Protocol), 14
sniffer traces, 40
sniffer traces

1050
SNMP (Simple Network Management 
Protocol), 163
Get message, 166
Inform message, 166
MIBs, 164, 166
protocol messages, 165-166
protocols, 164
Response message, 166
security, 167
security and administration, 164
Set command, 166
versions, 164
SNMP Traps, 166
SNR (signal-to-noise ratio), 816
RF signals, 816-817
soft reconﬁguration, NLRI ﬁltering, 428
software queues, 519
solicited host membership report, 
IGMPv1, 
648-649
source registration process, PIM-SM, 
712, 714
source-based distribution trees, 
PIM-DM, 
692-693
Source-Speciﬁc Multicast (SSM), 638
Spanning Tree Protocol. See STP
spanning-tree portfast command, 79
spanning-tree vlan command, 73
sparse mode multicast forwarding, 
687-689
sparse-dense mode, PIM, 723
sparse-mode routing protocols, PIM-SM, 
707
joining shared trees, 710-712
pruning shared trees, 719-720
RP’s multicast routing tables, 716-717
shared distribution trees, 714
shortest-path tree switchovers, 717-719
source registration process, 712, 714
sources sending packets to RP, 708-710
steady-state operations by continuing to 
send, 715-716
versus PIM-DM, 707
speed, Ethernet, 9
SPF (Shortest Path First), 265
SPF calculation, OSPF, 274-275
split horizon
EIGRP, 250
RIP, 219-220
spread spectrum, RF signals, 817-818
SPT (shortest-path tree), 692
SSH (Secure Shell), 163, 768
SSID (service set identiﬁer), 799
CiscoWorks WLSE, 835
wireless configuration parameters, 
IEEE 802.11, 802-803
SSL (Secure Sockets Layer), 163
SSM (Source-Speciﬁc Multicast), 638
IGMPv3, 660
multicast IP addresses, 640
SSThresh (Slow Start Threshold), 159
standards documents
for IP addressing, 125
for packet routing protocols, 146
RIP, 225
state refresh messages, PIM-DM, 
699-700
static clients (NTP), 144
static conﬁguration, Frame Relay 
mapping, 
183-184
Static Length Subnet Masking (SLSM), 
104
static NAT, 115-116
static routes, redistribute static, 347-348
steady-state operation, 275
by continuing to send joins, PIM-SM, 
715-716
steady-state operation (RIP), 206-208
store-and-forward, switches, 23
SNMP (Simple Network Management Protocol)

 1051
storing VLAN conﬁgurations, 43-44
STP (Spanning Tree Protocol), 57, 61
calculating costs to determine RPs, 63
choosing which ports forward, 61
determining designated ports, 
64-65
determining root ports, 63-64
electing root switches, 61-63
command references, 86
configuring, 70-73
converging to STP topology, 65-66
optimizing, 73
BackboneFast, 73, 75
discovery and conﬁguration of 
PortChannels, 77-78
load balancing PortChannels, 76
PortChannels, 76
PortFast, 73-75
UplinkFast, 73-75
protecting, 82
BPDU Guard, 82-83
Loop Guard, 83-84
Root Guard, 82-83
UDLD, 83-84
topology change notification and 
updating the CAM, 66-67
transitioning from blocking to 
forwarding, 
67-68
STP forwarding, 61
stratum level (NTP), 144
strict-priority scheduling, 547
Structured Wireless-Aware Network. 
See SWAN
stub network, OSPF LSA types, 278
stub router
configuring OSPF, 303-304
EIGRP, 246-248
stubby areas, OSPF, 287-290
ABRs, 287
stuck-in-active state (EIGRP), 245-246
sub-AS, 399
subinterfaces, queuing, 520
subnet broadcast address, 98
subnet ID ﬁeld (IPv6 global addresses), 
121
subnet numbers
determining
binary method, 98-99
decimal method, 99-101
determining all
binary method, 102-104
decimal method, 104-105
subnets, 94, 97
allocation, 105-106
classful IP addressing, 95-96
primary subnet, 234
route summarization, 107-108
exclusive summary routes (binary 
method), 110
inclusive summary routes (binary 
method), 108-109
inclusive summary routes (decimal 
method), 109-110
size of, 97-98
subnets of trafﬁc, CB Policing, 576-577
Sub-Network Access Protocol (SNAP), 14
successor routes, 240
summaries
LSAs, 287
manual summaries and AS_PATHs 
(BGP tables), 378-381
summarization. See also route 
summarization
BGP, 429-430
summary-address command, 344
summary-only keyword, 429
Superframe (SF), 592
supernetting, 113
SVIs (switched virtual interfaces), 186
SVIs (switched virtual interfaces)

1052
SWAN (Structured Wireless-Aware 
Network), 828
CiscoWorks WLS
Air/RF scanning and monitoring, 
836
assisted site surveys, 835
automatic access point 
conﬁguration, 834
centralized ﬁrmware updates, 835
customizable thresholds, 835
dynamic grouping, 835
fault status, 836
IDS, 836
secure user interfaces, 836
security policy monitoring, 836
self-healing functions, 837
SSIDs, 835
troubleshooting, 837
VLAN conﬁguration, 835
CiscoWorks WLSE, 834
hardware, 831
IDS, 829-830
WDS, 828-829
wireless LAN hardware, 832-834
switch buffering, Ethernet, 10-11
switch ports, 752-753
best practices for unused and user ports, 
753-754
802.1X authentication using EAP, 
764-766
DAI, 758-761
DHCP snooping, 761-762
IP Source Guard, 763-764
port security, 754-758
switched virtual interfaces (SVIs), 186
switches, 19, 22
command output showing MAC 
address table, 19, 21
cut-through, 23
Ethernet, 9
fragment-free switches, 23
internal processing, 23
LAN switch forwarding behavior, 19
ports, assigning to VLANs, 53
root switches, electing, 61-63
store-and-forward, 23
switch port configuration, 12-14
unicast forwarding, 19
VLANs, 31
switching, Layer 3 switching, 186
switching paths, 178
IP forwarding, 179
switchport access vlan command, 38, 43
switchport mode command, 49
switchport nonegotiate interface 
command, 49
switchport port-security maximum 
command, 756
switchport trunk allowed command, 48
switchport trunk encapsulation 
command, 49
symmetric active mode (NTP), 144
SYN ﬂag, 156
synchronous serial links, 592
carrier detect and interface resets, 
594-595
command references, 604
T1 alarms, 594
T1 framing and encoding, 592-593
System ID Extension, 62
T
T1, 592
alarms, 594
versus E1, 593
framing, 592-593
tables
adjacency tables, 179
ARP and inverse ARP, 179-180
BGP tables. See BGP tables
SWAN (Structured Wireless-Aware Network)

 1053
IP routing tables. See IP routing tables
TACACS+, 747
tacacs-server host commands, 750
tags, route redistribution, 328-329
Tc, 555-556
tuning shaping for voice, 561-564
TCN (Topology Change Notiﬁcation), 67
TCP (Transmission Control Protocol), 
154
connections and port numbers, 155-156
error recovery, 157
flags, 156
headers, 159
sliding windows, 157-159
versus UDP, 154-155
TCP Congestion Avoidance logic, 158
TCP Congestion Control, 158
TCP intercept, 776-777
TCP SYN ﬂood, 775
TCP/IP
application authentication and privacy, 
163
application protocols, 160-161
FTP, passive and active mode, 161-162
HTTP protocol, 856
layers, 855
models, 851
UDP, functions of, 154
TDM (time-division multiplexing), 592
telcos, 592
Temporal Key Integrity Protocol (TKIP), 
810-811
terminal editing, 861
terminal history size command, 860
terminology, trafﬁc shaping, 555-556
thresholds, discarding logic, 540
tiebreakers, BGP decision process, 
449-450
TIM (trafﬁc indication map), 805
time synchronization, NTP, 143-145
time-division multiplexing (TDM), 592
timers, IGMPv1 and IGMPv2, 659
TKIP (Temporal Key Integrity Protocol), 
810-811
token bucket model, 558
tools
BGP filtering tools. See BGP filtering 
tools
NLRI filtering tools, 424
Topology Change Notiﬁcation (TCN), 67
topology table, EIGRP, 238-240
trafﬁc, multicast trafﬁc, 635, 637
IGMP. See IGMP
trafﬁc contracts, 509
trafﬁc indication map (TIM), 805
trafﬁc policers, 551
trafﬁc proﬁles, WRED, 541
trafﬁc rates, 509
trafﬁc shaping, 555. See also shaping
CB Shaping. See CB Shaping
egress blocking, 555
Frame Relay, 559
mechanics of, 557-558
shaping rate, 556
terminology, 555-556
with Be, 557
trafﬁc-rate command, FRTS 
conﬁguration, 567-568
trafﬁc-shape fecn-adapt command, 614
transient groups, multicast IP addresses, 
639, 641
transient multicast addresses. See 
transient groups
transit network, OSPF LSA types, 278
transitioning from blocking to 
forwarding, STP, 67-68
transitive, PAs, 446
Transmission Control Protocol. 
See TCP, 154
transmit power, wireless conﬁguration 
parameters (IEEE 802.11), 804
transmit queue, 519
transmit queue

1054
Transport Layer Security (TLS), 163
triggered extensions to RIP, 210
triggered updates (RIP), 208-210
troubleshooting CiscoWorks WLSE, 837
trunk conﬁguration compatibility, 48-49
trunk ports, 752
trunking, VLAN trunking, 44
802.1Q, 44-45
ISL, 44-45
ISL configuration, 45-46
trunks
configuration, 53, 779
native VLANs, 766
protecting, 83-84
trusted ports, 752
TTL scoping, 689-690
tuning RIP convergence, 212-213
tunneling, 802.1Q-in-Q, 51-52
twisted pairs, 8
Ethernet, 9
two-rate, three-color policing, 573-575
TX queue, 519
type ﬁelds, 18
802.2 LLC, 18
Ethernet, 18
U
UDLD, 83-84
UDLD (UniDirectional Link Detection), 
83
UDLD aggressive mode, 83
UDP (User Datagram Protocol), 154
functions of, 154
versus TCP, 154-155
unicast, 632-633
multicast routing, 683
unicast addresses, 16
unicast forwarding, switches, 19
Unicast Source Address (USA), 664
UniDirectional Link Detection (UDLD), 
83
Universal/Local (U/L) bit, 17
unsolicited host membership report, 
IGMPv1, 650
unused ports, 752
best practices for, 753-754
802.1X authentication using EAP, 
764-766
DAI, 758-761
DHCP snooping, 761-762
IP Source Guard, 763-764
port security, 754-758
updates
CAM, 66-67
EIGRP, 236-238
UplinkFast, optimizing STP, 73-75
upstream routers, 697
URG (Urgent), 160
Urgent Pointer, 160
USA (Unicast Source Address), 664
User Datagram Protocol. See UDP
user mode CLI password protection, 746
user ports, best practices for, 753-754
802.1X authentication using EAP, 
764-766
DAI, 758-761
DHCP snooping, 761-762
IP Source Guard, 763-764
port security, 754-758
username commands, 748
username password command, 747
user-priority bits, 493
UTP cabling, 24
Transport Layer Security (TLS)

 1055
V
values, COMMUNITY values, 475, 479
Variable Length Subnet Masking 
(VLSM), 104
subnet allocation, 105-106
VC (virtual circuit), 610
violating packets, 571
virtual circuits, queuing, 520
virtual LANs. See VLANs
virtual links, conﬁguring OSPF, 299-301
Virtual Private Networks (VPNs), 
811, 813
Virtual Router Redundancy Protocol 
(VRRP), 141-143
VLAN conﬁguration, CiscoWorks 
WLSE, 835
VLAN DAT, 32, 43-44
VLAN database conﬁguration mode, 
32-34
VLAN interfaces, MLS logic, 186
VLAN MPLS (VMPLS), 51
VLAN trunking, 44
802.1Q, 44-45
802.1Q configuration, 45-46
allowed and active VLANs, 48
allowed VLANs, 48
configuring on routers, 49-51
ISL, 44-45
conﬁguration, 45-46
trunk configuration compatibility, 
48-49
VLAN Trunking Protocol. See VTP
VLANs (virtual LANs), 31, 53
active and not pruned, 48
and IP, 31
community VLANs, 37
configuration mode, creating VLANs, 
35-36
configuring, 31
VLAN database conﬁguration 
mode, 
32-34
defining, 53, 197
extended-range VLANs, 42
information, displaying, 53, 197, 779
interfaces, assigning, 35
isolated VLANs, 37
layer 2 switches, 31
naming, 53, 197
native VLANs, trunks, 766
normal-range VLANs, 42
primary VLANs, 37
private VLANs, 36-38, 767-768
secondary VLANs, 37
storing configurations, 43-44
trunks, configuration, 53, 779
using configuration mode to put 
interfaces into VLANs, 34-35
VLSM (Variable Length Subnet 
Masking), 104
subnet allocation, 105-106
VMPLS (VLAN MPLS), 51
voice, tuning shaping for voice with LLQ 
and Tc, 561-564
voice services, wireless LANs, 839
VoWLAN (voice over wireless LAN), 839
VPNs (Virtual Private Networks), 811, 
813
VRRP (Virtual Router Redundancy 
Protocol), 141-143
VTP (VLAN Trunking Protocol), 38
configuring, 40-41
extended-range VLANs, 42
normal-range VLANs, 42
revision numbers, 39-40
vty, 751
vty

1056
W
Wait, 308
watch mode, TCP intercept, 776
WC mask (wildcard mask), 424
WCS (Wireless Control System), 833
WDS, 828-829
WDS (Wireless Domain Services), 828
weight packets, WRED, 541
weighted fair queuing. See WFQ
Weighted Random Early Detection 
(WRED), 539-540
discard categories, 539
WEP (Wired Equivalent Privacy), 799, 
810-811
WFQ (weighted fair queuing), 
521, 524-525
command references, 527
configuration, 527-528
drop policy, 526-527
number of queues, 526-527
queue lengths, 526-527
show command, 528
types of queues, 527
WFQ scheduler, 524-526
While AS_SET and AS_CONFED_SET, 
445
Wi-Fi, 839, 843-844
Wi-Fi Protected Access (WPA), 811-812
wildcard masks, 424
IP ACL, 772
windows
receiver’s window, 157
sliding windows, TCP, 157-159
Wired Equivalent Privacy (WEP), 799, 
810-811
wireless bridges, 833
wireless conﬁguration parameters, IEEE 
802.11, 801
data rates, 804-805
fragmentation, 808
power-save mode, 805-806
RF channels, 803-804
RTS/CTS, 806-808
SSID, 802-803
transmit power, 804
Wireless Control System (WCS), 833
Wireless Domain Services (WDS), 828
wireless hardware components, 802.11, 
794
access points, 795
antennas, 795-796
bridges, 797
radio cards, 795
radio frequency peripherals, 797
repeaters, 796
routers, 797
wireless LAN client adapters, 833
wireless LAN controllers, 833
wireless LAN hardware, SWAN, 832-834
wireless LANs
applying in enterprises, 837
security, 837-838
voice services, 839
public wireless LANs, 840-842
small office or home, 842-844
wireless medium access, IEEE 802.11, 
809-810
wireless security
comparing, 813
IEEE 802.11, 810
AES, 812
open system authentication, 812
shared key authentication, 812-
813
TKIP, 811
VPNs, 813
WEP, 811
WPA, 812
Wait

 1057
wireless system conﬁgurations, 802.11, 
791
ad hoc mode configuration, 794
infrastructure mode configuration, 
792-794
workgroup bridges, 833
WPA (Wi-Fi Protected Access), 811-812
WRED (Weighted Random Early 
Detection), 539-540
configuration, 542
discard categories, 539
DSCP-based WRED, 541
traffic profiles, 541
weight packets, 541
wrr-queue dscp-map, 546
wrr-queue random-detect, 546
Y–Z
Yellow alarm, 594
zero subnets, 98
zero subnets

1058

