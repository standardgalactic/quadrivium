Tkinter 8.4 reference: a
GUI for Python
John W. Shipman
2009-07-14 11:41
Abstract
Describes the Tkinter widget set for constructing graphical user interfaces (GUIs) in the Python
programming language.
This publication is available in Web form1 and also as a PDF document2. Please forward any
comments to tcc-doc@nmt.edu.
Table of Contents
1. What is Tkinter? ....................................................................................................................... 3
2. A minimal application .............................................................................................................. 3
3. Definitions .............................................................................................................................. 4
4. Layout management ................................................................................................................. 4
4.1. The .grid() method .................................................................................................... 5
4.2. Other grid management methods ................................................................................... 6
4.3. Configuring column and row sizes ................................................................................. 7
4.4. Making the root window resizeable ................................................................................ 7
5. Standard attributes ................................................................................................................... 8
5.1. Dimensions ................................................................................................................... 8
5.2. The coordinate system ................................................................................................... 9
5.3. Colors ........................................................................................................................... 9
5.4. Type fonts ..................................................................................................................... 9
5.5. Anchors ...................................................................................................................... 11
5.6. Relief styles ................................................................................................................. 11
5.7. Bitmaps ....................................................................................................................... 12
5.8. Cursors ....................................................................................................................... 12
5.9. Images ........................................................................................................................ 13
5.10. Geometry strings ........................................................................................................ 14
5.11. Window names ........................................................................................................... 15
5.12. Cap and join styles ..................................................................................................... 15
5.13. Dash patterns ............................................................................................................. 16
5.14. Matching stipple patterns ............................................................................................ 16
6. The Button widget ................................................................................................................ 17
7. The Canvas widget ................................................................................................................ 19
7.1. Canvas coordinates ...................................................................................................... 20
7.2. The Canvas display list ................................................................................................ 20
7.3. Canvas object IDs ........................................................................................................ 21
7.4. Canvas tags ................................................................................................................ 21
1 http://www.nmt.edu/tcc/help/pubs/tkinter/
2 http://www.nmt.edu/tcc/help/pubs/tkinter/tkinter.pdf
1
Tkinter reference
New Mexico Tech Computer Center

7.5. Canvas tagOrId arguments ...................................................................................... 21
7.6. Methods on Canvas widgets ........................................................................................ 21
7.7. Canvas arc objects ....................................................................................................... 26
7.8. Canvas bitmap objects ................................................................................................. 28
7.9. Canvas image objects .................................................................................................. 28
7.10. Canvas line objects ..................................................................................................... 29
7.11. Canvas oval objects .................................................................................................... 30
7.12. Canvas polygon objects .............................................................................................. 32
7.13. Canvas rectangle objects ............................................................................................. 33
7.14. Canvas text objects ..................................................................................................... 35
7.15. Canvas window objects .............................................................................................. 36
8. The Checkbutton widget ...................................................................................................... 36
9. The Entry widget .................................................................................................................. 39
9.1. Scrolling an Entry widget ............................................................................................ 43
10. The Frame widget ................................................................................................................ 43
11. The Label widget ................................................................................................................ 44
12. The LabelFrame widget ...................................................................................................... 46
13. The Listbox widget ............................................................................................................ 47
13.1. Scrolling a Listbox widget ........................................................................................ 51
14. The Menu widget .................................................................................................................. 52
14.1. Menu item creation (coption) options ......................................................................... 55
15. The Menubutton widget ...................................................................................................... 56
16. The Message widget ............................................................................................................ 58
17. The OptionMenu widget ....................................................................................................... 59
18. The PanedWindow widget .................................................................................................... 60
18.1. PanedWindow child configuration options ................................................................... 62
19. The Radiobutton widget .................................................................................................... 63
20. The Scale widget ................................................................................................................ 66
21. The Scrollbar widget ........................................................................................................ 69
21.1. The Scrollbar command callback ............................................................................ 71
21.2. Connecting a Scrollbar to another widget ................................................................ 72
22. The Spinbox widget ............................................................................................................ 72
23. The Text widget .................................................................................................................. 77
23.1. Text widget indices ................................................................................................... 79
23.2. Text widget marks .................................................................................................... 80
23.3. Text widget images ................................................................................................... 81
23.4. Text widget windows ............................................................................................... 81
23.5. Text widget tags ....................................................................................................... 81
23.6. Setting tabs in a Text widget ...................................................................................... 82
23.7. The Text widget undo/redo stack .............................................................................. 82
23.8. Methods on Text widgets .......................................................................................... 83
24. Toplevel: Top-level window methods .................................................................................. 90
25. Universal widget methods ..................................................................................................... 92
26. Standardizing appearance ................................................................................................... 100
26.1. How to name a widget class ...................................................................................... 101
26.2. How to name a widget instance ................................................................................. 101
26.3. Resource specification lines ....................................................................................... 101
26.4. Rules for resource matching ...................................................................................... 102
27. Connecting your application logic to the widgets ................................................................... 103
28. Control variables: the values behind the widgets ................................................................... 103
29. Focus: routing keyboard input ............................................................................................. 105
30. Events ................................................................................................................................ 106
New Mexico Tech Computer Center
Tkinter reference
2

30.1. Levels of binding ...................................................................................................... 107
30.2. Event sequences ....................................................................................................... 108
30.3. Event types .............................................................................................................. 108
30.4. Event modifiers ........................................................................................................ 109
30.5. Key names ............................................................................................................... 110
30.6. Writing your handler: The Event class ...................................................................... 112
30.7. The extra arguments trick .......................................................................................... 114
30.8. Virtual events ........................................................................................................... 115
31. Pop-up dialogs .................................................................................................................... 115
31.1. The tkMessageBox dialogs module .......................................................................... 115
31.2. The tkFileDialog module ..................................................................................... 117
31.3. The tkColorChooser module ................................................................................. 118
1. What is Tkinter?
Tkinter is a GUI (graphical user interface) widget set for Python. This document contains only the
commoner features.
This document applies to Python 2.5 and Tkinter 8.4 running in the X Window system under Linux.
Your version may vary.
Pertinent references:
• An Introduction to Tkinter3 by Fredrik Lundh.
• Python and Tkinter Programming by John Grayson (Manning, 2000, ISBN 1-884777-81-3).
• Python 2.5 quick reference4: general information about the Python language.
We'll start by looking at the visible part of Tkinter: creating the widgets and arranging them on the
screen. Later we will talk about how to connect the face—the “front panel”—of the application to the
logic behind it.
2. A minimal application
Here is a trivial Tkinter program containing only a Quit button:
#!/usr/local/bin/python
1
from Tkinter import *
2
class Application(Frame):
3
def __init__(self, master=None):
Frame.__init__(self, master)
4
self.grid()
5
self.createWidgets()
def createWidgets(self):
self.quitButton = Button ( self, text='Quit',
command=self.quit )
6
self.quitButton.grid()
7
3 http://www.pythonware.com/library/tkinter/introduction/index.htm
4 http://www.nmt.edu/tcc/help/pubs/python/web/
3
Tkinter reference
New Mexico Tech Computer Center

app = Application()
8
app.master.title("Sample application")
9
app.mainloop()
10
1
This line makes the script self-executing, assuming that your system has the Python interpreter at
path /usr/local/bin/python.
2
This line imports the entire Tkinter package into your program's namespace.
3
Your application class must inherit from Tkinter's Frame class.
4
Calls the constructor for the parent class, Frame.
5
Necessary to make the application actually appear on the screen.
6
Creates a button labeled “Quit”.
7
Places the button on the application.
8
The main program starts here by instantiating the Application class.
9
This method call sets the title of the window to “Sample application”.
10
Starts the application's main loop, waiting for mouse and keyboard events.
3. Definitions
Before we proceed, let's define some of the common terms.
window
This term has different meanings in different contexts, but in general it refers to a rectangular area
somewhere on your display screen.
top-level window
A window that exists independently on your screen. It will be decorated with the standard frame
and controls for your system's desktop manager. You can move it around on your desktop. You
can generally resize it, although your application can prevent this
widget
The generic term for any of the building blocks that make up an application in a graphical user in-
terface. Examples of widgets: buttons, radiobuttons, text fields, frames, and text labels.
frame
In Tkinter, the Frame widget is the basic unit of organization for complex layouts. A frame is a
rectangular area that can contain other widgets.
child, parent
When any widget is created, a parent-child relationship is created. For example, if you place a text
label inside a frame, the frame is the parent of the label.
4. Layout management
Later we will discuss the widgets, the building blocks of your GUI application. How do widgets get
arranged in a window?
Although there are three different “geometry managers” in Tkinter, the author strongly prefers the
.grid() geometry manager for pretty much everything. This manager treats every window or frame
as a table—a gridwork of rows and columns.
• A cell is the area at the intersection of one row and one column.
• The width of each column is the width of the widest cell in that column.
New Mexico Tech Computer Center
Tkinter reference
4

• The height of each row is the height of the largest cell in that row.
• For widgets that do not fill the entire cell, you can specify what happens to the extra space. You can
either leave the extra space outside the widget, or stretch the widget to fit it, in either the horizontal
or vertical dimension.
• You can combine multiple cells into one larger area, a process called spanning.
When you create a widget, it does not appear until you register it with a geometry manager. Hence,
construction and placing of a widget is a two-step process that goes something like this:
self.thing = Constructor(parent, ...)
self.thing.grid(...)
where Constructor is one of the widget classes like Button, Frame, and so on, and parent is the
parent widget in which this child widget is being constructed. All widgets have a .grid() method
that you can use to tell the geometry manager where to put it.
4.1.The .grid() method
To display a widget w on your application screen:
w.grid(option=value, ...)
This method registers a widget w with the grid geometry manager—if you don't do this, the widget will
exist internally, but it will not be visible on the screen.
Here are the options to the .grid() geometry management method:
The column number where you want the widget gridded, counting from zero. The default
value is zero.
column
Normally a widget occupies only one cell in the grid. However, you can grab multiple
cells of a row and merge them into one larger cell by setting the columnspan option to
columnspan
the number of cells. For example, w.grid(row=0, column=2, columnspan=3)
would place widget w in a cell that spans columns 2, 3, and 4 of row 0.
To register w as a child of some widget w2, use in_=w2. The new parent w2 must be a
descendant of the parent widget used when w was created.
in_
Internal x padding. This dimension is added inside the widget inside its left and right
sides.
ipadx
Internal y padding. This dimension is added inside the widget inside its top and bottom
borders.
ipady
External x padding. This dimension is added to the left and right outside the widget.
padx
External y padding. This dimension is added above and below the widget.
pady
The row number into which you want to insert the widget, counting from 0. The default
is the next higher-numbered unoccupied row.
row
Normally a widget occupies only one cell in the grid. You can grab multiple adjacent
cells of a column, however, by setting the rowspan option to the number of cells to grab.
rowspan
This option can be used in combination with the columnspan option to grab a block of
cells. For example, w.grid(row=3, column=2, rowspan=4, columnspan=5)
would place widget w in an area formed by merging 20 cells, with row numbers 3–6 and
column numbers 2–6.
5
Tkinter reference
New Mexico Tech Computer Center

This option determines how to distribute any extra space within the cell that is not taken
up by the widget at its natural size. See below.
sticky
• If you do not provide a sticky attribute, the default behavior is to center the widget in the cell.
• You can position the widget in a corner of the cell by using sticky=NE (top right), SE (bottom right),
SW (bottom left), or NW (top left).
• You can position the widget centered against one side of the cell by using sticky=N (top center), E
(right center), S (bottom center), or W (left center).
• Use sticky=N+S to stretch the widget vertically but leave it centered horizontally.
• Use sticky=E+W to stretch it horizontally but leave it centered vertically.
• Use sticky=N+E+S+W to stretch the widget both horizontally and vertically to fill the cell.
• The other combinations will also work. For example, sticky=N+S+W will stretch the widget vertically
and place it against the west (left) wall.
4.2. Other grid management methods
These grid-related methods are defined on all widgets:
w.grid_bbox ( column=None, row=None, col2=None, row2=None )
Returns a 4-tuple describing the bounding box of some or all of the grid system in widget w. The
first two numbers returned are the x and y coordinates of the upper left corner of the area, and the
second two numbers are the width and height.
If you pass in column and row arguments, the returned bounding box describes the area of the cell
at that column and row. If you also pass in col2 and row2 arguments, the returned bounding box
describes the area of the grid from columns column to col2 inclusive, and from rows row to row2
inclusive.
For example, w.grid_bbox(0, 0, 1, 1) returns the bounding box of four cells, not one.
w.grid_forget()
This method makes widget w disappear from the screen. It still exists, it just isn't visible. You can
use .grid() it to make it appear again, but it won't remember its grid options.
w.grid_info()
Returns a dictionary whose keys are w's option names, with the corresponding values of those options.
w.grid_location ( x, y )
Given a coordinates (x, y) relative to the containing widget, this method returns a tuple (col,
row) describing what cell of w's grid system contains that screen coordinate.
w.grid_propagate()
Normally, all widgets propagate their dimensions, meaning that they adjust to fit the contents.
However, sometimes you want to force a widget to be a certain size, regardless of the size of its
contents. To do this, call w.grid_propagate(0) where w is the widget whose size you want to
force.
w.grid_remove()
This method is like .grid_forget(), but its grid options are remembered, so if you .grid() it
again, it will use the same grid configuration options.
New Mexico Tech Computer Center
Tkinter reference
6

w.grid_size()
Returns a 2-tuple containing the number of columns and the number of rows, respectively, in w's
grid system.
w.grid_slaves ( row=None, column=None )
Returns a list of the widgets managed by widget w. If no arguments are provided, you will get a
list of all the managed widgets. Use the row= argument to select only the widgets in one row, or
the column= argument to select only the widgets in one column.
4.3. Configuring column and row sizes
Unless you take certain measures, the width of a grid column inside a given widget will be equal to the
width of its widest cell, and the height of a grid row will be the height of its tallest cell. The sticky
attribute on a widget controls only where it will be placed if it doesn't completely fill the cell.
If you want to override this automatic sizing of columns and rows, use these methods on the parent
widget w that contains the grid layout:
w.columnconfigure ( N, option=value, ... )
In the grid layout inside widget w, configure column N so that the given option has the given
value. For options, see the table below.
w.rowconfigure ( N, option=value, ... )
In the grid layout inside widget w, configure row N so that the given option has the given value.
For options, see the table below.
Here are the options used for configuring column and row sizes.
The column or row's minimum size in pixels. If there is nothing in the given column or
row, it will not appear, even if you use this option.
minsize
A number of pixels that will be added to the given column or row, over and above the
largest cell in the column or row.
pad
To make a column or row stretchable, use this option and supply a value that gives the
relative weight of this column or row when distributing the extra space. For example, if
weight
a widget w contains a grid layout, these lines will distribute three-fourths of the extra
space to the first column and one-fourth to the second column:
w.columnconfigure(0, weight=3)
w.columnconfigure(1, weight=1)
If this option is not used, the column or row will not stretch.
4.4. Making the root window resizeable
Do you want to let the user resize your entire application window, and distribute the extra space among
its internal widgets? This requires some operations that are not obvious.
It's necessary to use the techniques for row and column size management, described in Section 4.3,
“Configuring column and row sizes” (p. 7), to make your Application widget's grid stretchable.
However, that alone is not sufficient.
Consider the trivial application discussed in Section 2, “A minimal application” (p. 3), which contains
only a Quit button. If you run this application, and resize the window, the button stays the same size,
centered within the window.
7
Tkinter reference
New Mexico Tech Computer Center

Here is a replacement version of the .__createWidgets() method in the minimal application. In
this version, the Quit button always fills all the available space.
def createWidgets(self):
top=self.winfo_toplevel()
1
top.rowconfigure(0, weight=1)
2
top.columnconfigure(0, weight=1)
3
self.rowconfigure(0, weight=1)
4
self.columnconfigure(0, weight=1)
5
self.quit = Button ( self, text="Quit", command=self.quit )
self.quit.grid(row=0, column=0,
6
sticky=N+S+E+W)
1
The “top level window” is the outermost window on the screen. However, this window is not your
Application window—it is the parent of the Application instance. To get the top-level window,
call the .winfo_toplevel() method on any widget in your application; see Section 25, “Universal
widget methods” (p. 92).
2
This line makes row 0 of the top level window's grid stretchable.
3
This line makes column 0 of the top level window's grid stretchable.
4
Makes row 0 of the Application widget's grid stretchable.
5
Makes column 0 of the Application widget's grid stretchable.
6
The argument sticky=N+S+E+W makes the button expand to fill its cell of the grid.
There is one more change that must be made. In the constructor, change the second line as shown:
def __init__(self, master=None):
Frame.__init__(self, master)
self.grid(sticky=N+S+E+W)
self.createWidgets()
The argument sticky=N+S+E+W to self.grid() is necessary so that the Application widget will
expand to fill its cell of the top-level window's grid.
5. Standard attributes
Before we look at the widgets, let's take a look at how some of their common attributes—such as sizes,
colors and fonts—are specified.
• Each widget has a set of options that affect its appearance and behavior—attributes such as fonts,
colors, sizes, text labels, and such.
• You can specify options when calling the widget's constructor using keyword arguments such as
text="PANIC!" or height=20.
• After you have created a widget, you can later change any option by using the widget's .config()
method. You can retrieve the current setting of any option by using the widget's .cget() method.
See Section 25, “Universal widget methods” (p. 92) for more on these methods.
5.1. Dimensions
Various lengths, widths, and other dimensions of widgets can be described in many different units.
• If you set a dimension to an integer, it is assumed to be in pixels.
New Mexico Tech Computer Center
Tkinter reference
8

• You can specify units by setting a dimension to a string containing a number followed by:
Centimeters
c
Inches
i
Millimeters
m
Printer's points (about 1/72")
p
5.2.The coordinate system
As in most contemporary display systems, the origin of each coordinate system is at its upper left corner,
with the x coordinate increasing toward the right, and the y coordinate increasing toward the bottom:
+x
+y
The base unit is the pixel, with the top left pixel having coordinates (0,0). Coordinates that you specify
as integers are always expressed in pixels, but any coordinate may be specified as a dimensioned
quantity; see Section 5.1, “Dimensions” (p. 8).
5.3. Colors
There are two general ways to specify colors in Tkinter.
• You can use a string specifying the proportion of red, green, and blue in hexadecimal digits:
Four bits per color
#rgb
Eight bits per color
#rrggbb
Twelve bits per color
#rrrgggbbb
For example, '#fff' is white, '#000000' is black, '#000fff000' is pure green, and '#00ffff'
is pure cyan (green plus blue).
• You can also use any locally defined standard color name. The colors "white", "black", "red",
"green", "blue", "cyan", "yellow", and "magenta" will always be available. Other names may
work, depending on your local installation.
5.4.Type fonts
Depending on your platform, there may be up to three ways to specify type style.
• As a tuple whose first element is the font family, followed by a size in points, optionally followed by
a string containing one or more of the style modifiers bold, italic, underline, and overstrike.
Examples: ("Helvetica", "16") for a 16-point Helvetica regular; ("Times", "24", "bold
italic") for a 24-point Times bold italic.
• You can create a “font object” by importing the tkFont module and using its Font class constructor:
9
Tkinter reference
New Mexico Tech Computer Center

import tkFont
font = tkFont.Font ( option, ... )
where the options include:
The font family name as a string.
family
The font height as an integer in points. To get a font n pixels high, use -n.
size
"bold" for boldface, "normal" for regular weight.
weight
"italic" for italic, "roman" for unslanted.
slant
1 for underlined text, 0 for normal.
underline
1 for overstruck text, 0 for normal.
overstrike
For example, to get a 36-point bold Helvetica italic face:
helv36 = tkFont.Font ( family="Helvetica",
size=36, weight="bold" )
• If you are running under the X Window System, you can use any of the X font names. For example,
the font named "-*-lucidatypewriter-medium-r-*-*-*-140-*-*-*-*-*-*" is the author's
favorite fixed-width font for onscreen use. Use the xfontsel program to help you select pleasing fonts.
To get a list of all the families of fonts available on your platform, call this function:
tkFont.families()
The return value is a list of strings. Note: You must create your root window before calling this function.
These methods are defined on all Font objects:
.actual ( option=None )
If you pass no arguments, you get back a dictionary of the font's actual attributes, which may differ
from the ones you requested. To get back the value of an attribute, pass its name as an argument.
.cget ( option )
Returns the value of the given option.
.configure ( option, ... )
Use this method to change one or more options on a font. For example, if you have a Font object
called titleFont, if you call titleFont.configure ( family="times", size=18 ), that
font will change to 18pt Times and any widgets that use that font will change too.
.copy()
Returns a copy of a Font object.
.measure ( text )
Pass this method a string, and it will return the number of pixels of width that string will take in
the font. Warning: some slanted characters may extend outside this area.
.metrics ( option )
If you call this method with no arguments, it returns a dictionary of all the font metrics. You can re-
trieve the value of just one metric by passing its name as an argument. Metrics include:
Number of pixels of height between the baseline and the top of the highest ascender.
ascent
Number of pixels of height between the baseline and the bottom of the lowest ascender.
descent
New Mexico Tech Computer Center
Tkinter reference
10

This value is 0 for a variable-width font and 1 for a monospaced font.
fixed
Number of pixels of height total. This is the leading of type set solid in the given font.
linespace
5.5. Anchors
The Tkinter package defines a number of anchor constants that you can use to control where items
are positioned relative to their context. For example, anchors can specify where a widget is located inside
a frame when the frame is bigger than the widget.
These constants are given as compass points, where north is up and west is to the left. We apologize to
our Southern Hemisphere readers for this Northern Hemisphere chauvinism5.
The anchor constants are shown in this diagram:
SW
NW
W
NE
SE
E
N
S
CENTER
For example, if you create a small widget inside a large frame and use the anchor=SE option, the
widget will be placed in the bottom right corner of the frame. If you used anchor=N instead, the widget
would be centered along the top edge.
Anchors are also used to define where text is positioned relative to a reference point. For example, if
you use CENTER as a text anchor, the text will be centered horizontally and vertically around the reference
point. Anchor NW will position the text so that the reference point coincides with the northwest (top left)
corner of the box containing the text. Anchor W will center the text vertically around the reference point,
with the left edge of the text box passing through that point, and so on.
5.6. Relief styles
The relief style of a widget refers to certain simulated 3-D effects around the outside of the widget. Here
is a screen shot of a row of buttons exhibiting all the possible relief styles:
The width of these borders depends on the borderwidth attribute of the widget. The above graphic
shows what they look like with a 5-pixel border; the default border width is 2.
5 http://flourish.org/upsidedownmap/
11
Tkinter reference
New Mexico Tech Computer Center

5.7. Bitmaps
For bitmap options in widgets, these bitmaps are guaranteed to be available:
The graphic above shows Button widgets bearing the standard bitmaps. From left to right, they are
"error", "gray75", "gray50", "gray25", "gray12", "hourglass", "info", "questhead",
"question", and "warning".
You can use your own bitmaps. Any file in .xbm (X bit map) format will work. In place of a standard
bitmap name, use the string "@" followed by the pathname of the .xbm file.
5.8. Cursors
There are quite a number of different mouse cursors available. Their names and graphics are shown
here. The exact graphic may vary according to your operating system.
man
arrow
middlebutton
based_arrow_down
mouse
based_arrow_up
pencil
boat
pirate
bogosity
plus
bottom_left_corner
question_arrow
bottom_right_corner
right_ptr
bottom_side
right_side
bottom_tee
right_tee
box_spiral
rightbutton
center_ptr
rtl_logo
circle
sailboat
clock
sb_down_arrow
coffee_mug
sb_h_double_arrow
cross
sb_left_arrow
cross_reverse
sb_right_arrow
crosshair
New Mexico Tech Computer Center
Tkinter reference
12

sb_up_arrow
diamond_cross
sb_v_double_arrow
dot
shuttle
dotbox
sizing
double_arrow
spider
draft_large
spraycan
draft_small
star
draped_box
target
exchange
tcross
fleur
top_left_arrow
gobbler
top_left_corner
gumby
top_right_corner
hand1
top_side
hand2
top_tee
heart
trek
icon
ul_angle
iron_cross
umbrella
left_ptr
ur_angle
left_side
watch
left_tee
xterm
leftbutton
X_cursor
ll_angle
lr_angle
5.9. Images
There are three general methods for displaying graphic images in your Tkinter application.
• To display bitmap (two-color) images in the .xbm format, refer to Section 5.9.1, “The BitmapImage
class” (p. 14).
• To display full-color images in the .gif, .pgm, or .ppm format, see Section 5.9.2, “The PhotoImage
class” (p. 14).
13
Tkinter reference
New Mexico Tech Computer Center

• The Python Imaging Library (PIL) supports images in a much wider variety of formats. Its ImageTk
class is specifically designed for displaying images within Tkinter applications. See the author's
companion document for PIL documentation: Python Imaging Library (PIL) quick reference6.
5.9.1.The BitmapImage class
To display a two-color image in the .xbm format, you will need this constructor:
BitmapImage ( file=f[, background=b][, foreground=c] )
where f is the name of the .xbm image file.
Normally, foreground (1) bits in the image will be displayed as black pixels, and background (0) bits
in the image will be transparent. To change this behavior, use the optional background=b option to
set the background to color b, and the optional foreground=c option to set the foreground to color
c. For color specification, see Section 5.3, “Colors” (p. 9).
This constructor returns a value that can be used anywhere Tkinter expects an image. For example, to
display an image as a label, use a Label widget (see Section 11, “The Label widget” (p. 44)) and
supply the BitmapImage object as the value of the image option:
logo = BitmapImage("logo.xbm", foreground='red')
Label ( image=logo ).grid()
5.9.2.The PhotoImage class
To display a color image in .gif, .pgm, or .ppm format, you will need this constructor:
PhotoImage ( file=f )
where f is the name of the image file. The constructor returns a value that can be used anywhere Tkinter
expects an image.
5.10. Geometry strings
A geometry string is a standard way of describing the size and location of a top-level window on a
desktop.
A geometry string has this general form:
"wxh±x±y"
where:
• The w and h parts give the window width and height in pixels. They are separated by the character
"x".
• If the next part has the form +x, it specifies that the left side of the window should be x pixels from
the left side of the desktop. If it has the form -x, the right side of the window is x pixels from the
right side of the desktop.
• If the next part has the form +y, it specifies that the top of the window should be y pixels below the
top of the desktop. If it has the form -y, the bottom of the window will be y pixels above the bottom
edge of the desktop.
6 http://www.nmt.edu/tcc/help/pubs/pil/
New Mexico Tech Computer Center
Tkinter reference
14

For example, a window created with geometry="120x50-0+20" would be 120 pixels wide by 50
pixels high, and its top right corner will be along the right edge of the desktop and 20 pixels below the
top edge.
5.11. Window names
The term window describes a rectangular area on the desktop.
• A top-level or root window is a window that has an independent existence under the window manager.
It is decorated with the window manager's decorations, and can be moved and resized independently.
Your application can use any number of top-level windows.
• The term “window” also applies to any widget that is part of a top-level window.
Tkinter names all these windows using a hierarchical window path name.
• The root window's name is ".".
• Child windows have names of the form ".n", where n is some integer in string form. For example,
a window named ".135932060" is a child of the root window (".").
• Child windows within child windows have names of the form "p.n" where p is the name of the
parent window and n is some integer. For example, a window named ".135932060.137304468"
has parent window ".135932060", so it is a grandchild of the root window.
• The relative name of a window is the part past the last "." in the path name. To continue the previous
example, the grandchild window has a relative name "137304468".
The path name for any widget w can be determined by calling str(w).
See also Section 25, “Universal widget methods” (p. 92) for methods you can use to operate on window
names, especially the .winfo_name, .winfo_parent, and .winfo_pathname methods.
5.12. Cap and join styles
For pleasant and effective rendering of diagrams, sometimes it is a good idea to pay attention to cap
and join styles.
• The cap style of a line is the shape of the end of the line. Styles are:
• BUTT: The end of the line is cut off square at a line that passes through the endpoint.
• PROJECTING: The end of the line is cut off square, but the cut line projects past the endpoint a
distance equal to half the line's width.
• ROUND: The end describes a semicircle centered on the endpoint.
• The join style describes the shape where two line segments meet at an angle.
• ROUND: The join is a circle centered on the point where the adjacent line segments meet.
• BEVEL: A flat facet is drawn at an angle intermediate between the angles of the adjacent lines.
• MITER: The edges of the adjacent line segments are continued to meet at a sharp point.
This illustration shows Tkinter's cap and join options. Small red squares indicate the nominal endpoints
of the two connected line segments.
15
Tkinter reference
New Mexico Tech Computer Center

5.13. Dash patterns
A number of widgets allow you to specify a dashed outline. The dash and dashoffset options give
you fine control over the exact pattern of the dashes.
dash
This option is specified as a tuple of integers. The first integer specifies how many pixels should be
drawn. The second integer specifies how many pixels should be skipped before starting to draw
again, and so on. When all the integers in the tuple are exhausted, they are reused in the same order
until the border is complete.
For example, dash=(3,5) produces alternating 3-pixel dashes separated by 5-pixel gaps. A value
of dash=(7,1,1,1) produces a dash-and-dot pattern, with the dash seven times as long as the
dot or the gaps around the dot. A value of dash=(5,) produces alternating five-pixel dashes and
five-pixel gaps.
dashoff
To start the dash pattern in a different point of cycle instead of at the beginning, use an option of
dashoff=n, where n is the number of pixels to skip at the beginning of the pattern.
For example, for options dash=(5, 1, 2, 1) and dashoff=3, the first pattern produced will
be: 2 on, 1 off, 2 on, and 1 off. Subsequent patterns will be 5 on, 1 off, 2 on, and 1 off. Here is a screen
shot of a line drawn with this combination of options:
5.14. Matching stipple patterns
This may seem like an incredibly picky style point, but if you draw a graphic that has two objects with
stippled patterns, a real professional will make sure that the patterns align along their boundary.
Here is an example. The left-hand screen shot shows two adjacent 100×100 squares stippled with the
“gray12” pattern, but the right-hand square is offset vertically by one pixel. The short black line in the
center of the figure is drawn along the boundary of the two figures.
New Mexico Tech Computer Center
Tkinter reference
16

The second screen shot is the same, except that the two 100×100 squares have their stipple patterns lined
up.
In practice, this arises in two situations. The alignment of large stippled areas is controlled by an option
named offset. For figures with stippled outlines, the outlineoffset option controls their alignment.
Both options have values of one of these forms:
• "x,y": Offset the stipple patterns by this x and y value relative to the top-level window or to the
canvas's origin.
• "#x,y": For objects on a canvas, use offset x and y relative to the top-level window.
• "ne", "se", "sw", "nw": Align a corner of the stipple pattern with the corresponding corner of the
containing object. For example, "ne" means that the top left corner of the stipple pattern coincides
with the top left corner of the area to be stippled.
• "n", "e", "s", "w": Align the stipple pattern with the center of one side of the containing object. For
example, "e" means the center of the stipple pattern will coincide with the center of the right side of
the area to be stippled.
• "center": Align the center of the stipple pattern with the center of the containing object.
6.The Button widget
To create a pushbutton in a top-level window or frame named parent:
w = Button ( parent, option=value, ... )
The constructor returns the new Button widget. Its options include:
Background color when the button is under the cursor.
activebackground
Foreground color when the button is under the cursor.
activeforeground
Where the text is positioned on the button. See Section 5.5, “Anchors” (p. 11).
For example, anchor=NE would position the text at the top right corner of
the button.
anchor
Width of the border around the outside of the button; see Section 5.1, “Di-
mensions” (p. 8). The default is two pixels.
bd or borderwidth
Normal background color.
bg or background
Name of one of the standard bitmaps to display on the button (instead of
text).
bitmap
Function or method to be called when the button is clicked.
command
Selects the cursor to be shown when the mouse is over the button.
cursor
NORMAL is the default; use DISABLED if the button is to be initially disabled
(grayed out, unresponsive to mouse clicks).
default
17
Tkinter reference
New Mexico Tech Computer Center

Foreground color used when the button is disabled.
disabledforeground
Normal foreground (text) color.
fg or foreground
Text font to be used for the button's label.
font
Height of the button in text lines (for textual buttons) or pixels (for images).
height
Color of the focus highlight when the widget does not have focus.
highlightbackground
The color of the focus highlight when the widget has focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
Image to be displayed on the button (instead of text).
image
How to show multiple text lines: LEFT to left-justify each line; CENTER to
center them; or RIGHT to right-justify.
justify
The relief style to be used while the mouse is on the button; default relief is
RAISED. See Section 5.6, “Relief styles” (p. 11).
overrelief
Additional padding left and right of the text. See Section 5.1, “Dimen-
sions” (p. 8) for the possible values for padding.
padx
Additional padding above and below the text.
pady
Specifies the relief type for the button (see Section 5.6, “Relief styles” (p. 11)).
The default relief is RAISED.
relief
See repeatinterval, below.
repeatdelay
Normally, a button fires only once when the user releases the mouse button.
If you want the button to fire at regular intervals as long as the mouse button
repeatinterval
is held down, set this option to a number of milliseconds to be used between
repeats, and set the repeatdelay to the number of milliseconds to wait
before starting to repeat. For example, if you specify “repeatdelay=500,
repeatinterval=100” the button will fire after half a second, and every
tenth of a second thereafter, until the user releases the mouse button. If the
user does not hold the mouse button down at least repeatdelay milli-
seconds, the button will fire normally.
Set this option to DISABLED to gray out the button and make it unresponsive.
Has the value ACTIVE when the mouse is over it. Default is NORMAL.
state
Normally, keyboard focus does visit buttons (see Section 29, “Focus: routing
keyboard input” (p. 105)), and a space character acts as the same as a mouse
takefocus
click, “pushing” the button. You can set the takefocus option to zero to
prevent focus from visiting the button.
Text displayed on the button. Use internal newlines to display multiple text
lines.
text
An instance of StringVar() that is associated with the text on this button.
If the variable is changed, the new value will be displayed on the button.
See Section 28, “Control variables: the values behind the widgets” (p. 103).
textvariable
Default is -1, meaning that no character of the text on the button will be
underlined. If nonnegative, the corresponding text character will be under-
underline
lined. For example, underline=1 would underline the second character of
the button's text.
Width of the button in letters (if displaying text) or pixels (if displaying an
image).
width
New Mexico Tech Computer Center
Tkinter reference
18

If this value is set to a positive number, the text lines will be wrapped to fit
within this length. For possible values, see Section 5.1, “Dimensions” (p. 8).
wraplength
Methods on Button objects:
.flash()
Causes the button to flash several times between active and normal colors. Leaves the button in the
state it was in originally. Ignored if the button is disabled.
.invoke()
Calls the button's callback, and returns what that function returns. Has no effect if the button is
disabled or there is no callback.
7.The Canvas widget
A canvas is a rectangular area intended for drawing pictures or other complex layouts. On it you can
place graphics, text, widgets, or frames. See the following sections for methods that create objects on
canvases:
• .create_arc(): A slice out of an ellipse. See Section 7.7, “Canvas arc objects” (p. 26).
• .create_bitmap(): An image as a bitmap. See Section 7.8, “Canvas bitmap objects” (p. 28).
• .create_image(): A graphic image. See Section 7.9, “Canvas image objects” (p. 28).
• .create_line(): One or more line segments. See Section 7.10, “Canvas line objects” (p. 29).
• .create_oval(): An ellipse; use this also for drawing circles, which are a special case of an ellipse.
See Section 7.11, “Canvas oval objects” (p. 30).
• .create_polygon(): A polygon. See Section 7.12, “Canvas polygon objects” (p. 32).
• .create_rectangle(): A rectangle. See Section 7.13, “Canvas rectangle objects” (p. 33).
• .create_text(): Text annotation. See Section 7.14, “Canvas text objects” (p. 35).
• .create_window(): A rectangular window. See Section 7.15, “Canvas window objects” (p. 36).
To create a Canvas object:
w = Canvas ( parent, option=value, ... )
The constructor returns the new Canvas widget. Supported options include:
Width of the border around the outside of the canvas; see Section 5.1, “Di-
mensions” (p. 8). The default is two pixels.
bd or borderwidth
Background color of the canvas. Default is a light gray, about "#E4E4E4".
bg or background
A float that specifies how close the mouse must be to an item to be con-
sidered inside it. Default is 1.0.
closeenough
If true (the default), the canvas cannot be scrolled outside of the
scrollregion (see below).
confine
Cursor used in the canvas. See Section 5.8, “Cursors” (p. 12).
cursor
Size of the canvas in the Y dimension. See Section 5.1, “Dimensions” (p. 8).
height
Color of the focus highlight when the widget does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
19
Tkinter reference
New Mexico Tech Computer Center

Color shown in the focus highlight.
highlightcolor
Thickness of the focus highlight.
highlightthickness
The relief style of the canvas. Default is FLAT. See Section 5.6, “Relief
styles” (p. 11).
relief
A tuple (w, n, e, s) that defines over how large an area the canvas can
be scrolled, where w is the left side, n the top, e the right side, and s the
bottom.
scrollregion
The background color to use displaying selected items.
selectbackground
The width of the border to use around selected items.
selectborderwidth
The foreground color to use displaying selected items.
selectforeground
Normally, focus (see Section 29, “Focus: routing keyboard input” (p. 105))
will cycle through this widget with the tab key only if there are keyboard
takefocus
bindings set for it (see Section 30, “Events” (p. 106) for an overview of key-
board bindings). If you set this option to 1, focus will always visit this widget.
Set it to "" to get the default behavior.
Size of the canvas in the X dimension. See Section 5.1, “Dimensions” (p. 8).
width
Normally, canvases can be scrolled horizontally to any position. You can
get this behavior by setting xscrollincrement to zero. If you set this
xscrollincrement
option to some positive dimension, the canvas can be positioned only on
multiples of that distance, and the value will be used for scrolling by scrolling
units, such as when the user clicks on the arrows at the ends of a scrollbar.
For more information on scrolling units, see Section 21, “The Scrollbar
widget” (p. 69).
If the canvas is scrollable, this attribute should be the .set() method of
the horizontal scrollbar.
xscrollcommand
Works like xscrollincrement, but governs vertical movement.
yscrollincrement
If the canvas is scrollable, this attribute should be the .set() method of
the vertical scrollbar.
yscrollcommand
7.1. Canvas coordinates
Because the canvas may be larger than the window, and equipped with scrollbars to move the overall
canvas around in the window, there are two coordinate systems for each canvas:
• The window coordinates of a point are relative to the top left corner of the area on the display where
the canvas appears.
• The canvas coordinates of a point are relative to the top left corner of the total canvas.
7.2.The Canvas display list
The display list refers to the sequence of all the objects on the canvas, from background (the “bottom”
of the display list) to foreground (the “top”).
If two objects overlap, the one above the other in the display list means the one closer to the foreground,
which will appear in the area of overlap and obscure the one below. By default, new objects are always
created at the top of the display list (and hence in front of all other objects), but you can re-order the
display list.
New Mexico Tech Computer Center
Tkinter reference
20

7.3. Canvas object IDs
The object ID of an object on the canvas is the value returned by the constructor for that object. All object
ID values are simple integers, and the object ID of an object is unique within that canvas.
7.4. Canvas tags
A tag is a string that you can associate with objects on the canvas.
• A tag can be associated with any number of objects on the canvas, including zero.
• An object can have any number of tags associated with it, including zero.
Tags have many uses. For example, if you are drawing a map on a canvas, and there are text objects for
the labels on rivers, you could attach the tag "riverLabel" to all those text objects. This would allow
you to perform operations on all the objects with that tag, such as changing their color or deleting them.
7.5. Canvas tagOrId arguments
A tagOrId argument specifies one or more objects on the canvas.
• If a tagOrId argument is an integer, it is treated as an object ID, and it applies only to the unique
object with that ID. See Section 7.3, “Canvas object IDs” (p. 21).
• If such an argument is a string, it is interpreted as a tag, and selects all the objects that have that tag
(if there are any). See Section 7.4, “Canvas tags” (p. 21).
7.6. Methods on Canvas widgets
All Canvas objects support these methods:
.addtag_above ( newTag, tagOrId )
Attaches a new tag to the object just above the one specified by tagOrId in the display list. The
newTag argument is the tag you want to attach, as a string.
.addtag_all ( newTag )
Attaches the given tag newTag to all the objects on the canvas.
.addtag_below ( newTag, tagOrID )
Attaches a new tag to the object just below the one specified by tagOrId in the display list. The
newTag argument is a tag string.
.addtag_closest ( newTag, x, y, halo=None, start=None )
Adds a tag to the object closest to screen coordinate (x,y). If there are two or more objects at the
same distance, the one higher in the display list is selected.
Use the halo argument to increase the effective size of the point. For example, a value of 5 would
treat any object within 5 pixels of (x,y) as overlapping.
If an object ID is passed in the start argument, this method tags the highest qualifying object that
is below start in the display list.
.addtag_enclosed ( newTag, x1, y1, x2, y2)
Add tag newTag to all objects that occur completely within the rectangle whose top left corner is
(x1, y1) and whose bottom right corner is (x2, y2).
21
Tkinter reference
New Mexico Tech Computer Center

.addtag_overlapping ( newTag, x1, y1, x2, y2)
Like the previous method, but affects all objects that share at least one point with the given rectangle.
.addtag_withtag ( newTag, tagOrId )
Adds tag newTag to the object or objects specified by tagOrId.
.bbox ( tagOrId=None )
Returns a tuple (x1, y1, x2, y2) describing a rectangle that encloses all the objects specified by
tagOrId. If the argument is omitted, returns a rectangle enclosing all objects on the canvas. The
top left corner of the rectangle is (x1, y1) and the bottom right corner is (x2, y2).
.canvasx ( screenx, gridspacing=None )
Translates a window x coordinate screenx to a canvas coordinate. If gridspacing is supplied,
the canvas coordinate is rounded to the nearest multiple of that value.
.canvasy ( screeny, gridspacing=None )
Translates a window y coordinate screeny to a canvas coordinate. If gridspacing is supplied,
the canvas coordinate is rounded to the nearest multiple of that value.
.coords ( tagOrId, x0, y0, x1, y1, ..., xn, yn )
If you pass only the tagOrId argument, returns a tuple of the coordinates of the lowest or only
object specified by that argument. The number of coordinates depends on the type of object. In most
cases it will be a 4-tuple (x1, y1, x2, y2) describing the bounding box of the object.
You can move an object by passing in new coordinates.
.dchars ( tagOrId, first=0, last=first )
Deletes characters from a text item or items. Characters between first and last inclusive are de-
leted, where those values can be integer indices or the string "end" to mean the end of the text. For
example, for a canvas C and an item I, C.dchars(I, 1, 1) will remove the second character.
.delete ( tagOrId )
Deletes the object or objects selected by tagOrId. It is not considered an error if no items match
tagOrId.
.dtag ( tagOrId, tagToDelete )
Removes the tag specified by tagToDelete from the object or objects specified by tagOrId.
.find_above ( tagOrId )
Returns the ID number of the object just above the object specified by tagOrId. If multiple objects
match, you get the highest one. Returns an empty tuple if you pass it the object ID of the highest
object.
.find_all()
Returns a list of the object ID numbers for all objects on the canvas, from lowest to highest.
.find_below ( tagOrId )
Returns the object ID of the object just below the one specified by tagOrId. If multiple objects
match, you get the lowest one. Returns an empty tuple if you pass it the object ID of the lowest object.
.find_closest ( x, y, halo=None, start=None )
Returns a singleton tuple containing the object ID of the object closest to point (x, y). If there are
no qualifying objects, returns an empty tuple.
Use the halo argument to increase the effective size of the point. For example, halo=5 would treat
any object within 5 pixels of (x, y) as overlapping.
If an object ID is passed as the start argument, this method returns the highest qualifying object
that is below start in the display list.
New Mexico Tech Computer Center
Tkinter reference
22

.find_enclosed ( x1, y1, x2, y2 )
Returns a list of the object IDs of all objects that occur completely within the rectangle whose top
left corner is (x1, y1) and bottom right corner is (x2, y2).
.find_overlapping ( x1, y1, x2, y2 )
Like the previous method, but returns a list of the object IDs of all the objects that share at least one
point with the given rectangle.
.find_withtag ( tagOrId )
Returns a list of the object IDs of the object or objects specified by tagOrId.
.focus ( tagOrId=None )
Moves the focus to the object specified by tagOrId. If there are multiple such objects, moves the
focus to the first one in the display list that allows an insertion cursor. If there are no qualifying
items, or the canvas does not have focus, focus does not move.
If the argument is omitted, returns the ID of the object that has focus, or "" if none of them do.
.gettags ( tagOrId )
If tagOrId is an object ID, returns a list of all the tags associated with that object. If the argument
is a tag, returns all the tags for the lowest object that has that tag.
.icursor ( tagOrId, index )
Assuming that the selected item allows text insertion and has the focus, sets the insertion cursor to
index, which may be either an integer index or the string "end". Has no effect otherwise.
.index ( tagOrId, specifier )
Returns the integer index of the given specifier in the text item specified by tagOrId (the lowest
one that, if tagOrId specifies multiple objects). The return value is the corresponding position as
an integer, with the usual Python convention, where 0 is the position before the first character.
The specifier argument may be any of:
• INSERT, to return the current position of the insertion cursor.
• END, to return the position after the last character of the item.
• SEL_FIRST, to return the position of the start of the current text selection. Tkinter will raise a
TclError exception if the text item does not currently contain the text selection.
• SEL_LAST, to return the position after the end of the current text selection, or raise TclError
if the item does not currently contain the selection.
• A string of the form “@x,y”, to return the character of the character containing canvas coordinates
(x, y). If those coordinates are above or to the left of the text item, the method returns 0; if the
coordinates are to the right of or below the item, the method returns the index of the end of the
item.
.insert ( tagOrId, specifier, text )
Inserts the given string into the object or objects specified by tagOrId, at the position given by
the specifier argument.
The specifier values may be:
• Any of the keywords INSERT, END, SEL_FIRST, or SEL_LAST. Refer to the description of the
index method above for the interpretation of these codes.
• The position of the desired insertion, using the normal Python convention for positions in strings.
.itemcget ( tagOrId, option )
Returns the value of the given configuration option in the selected object (or the lowest object if
tagOrId specifies more than one). This is similar to the .cget() method for Tkinter objects.
23
Tkinter reference
New Mexico Tech Computer Center

.itemconfigure ( tagOrId, option, ... )
If no option arguments are supplied, returns a dictionary whose keys are the options of the object
specified by tagOrId (the lowest one, if tagOrId specifies multiple objects).
To change the configuration option of the specified item, supply one or more keyword arguments
of the form option=value.
.move ( tagOrId, xAmount, yAmount )
Moves the items specified by tagOrId by adding xAmount to their x coordinates and yAmount to
their y coordinates.
.postscript ( option, ... )
Generates an Encapsulated PostScript representation of the canvas's current contents. The options
include:
Use "color" for color output, "gray" for grayscale, or "mono" for black and white.
colormode
If supplied, names a file where the PostScript will be written. If this option is not
given, the PostScript is returned as a string.
file
How much of the Y size of the canvas to print. Default is all.
height
If false, the page will be rendered in portrait orientation; if true, in landscape.
rotate
Leftmost canvas coordinate of the area to print.
x
Topmost canvas coordinate of the area to print.
y
How much of the X size of the canvas to print. Default is all.
width
.scale ( tagOrId, xOffset, yOffset, xScale, yScale )
Scale all objects according to their distance from a point P=(xOffset, yOffset). The scale factors
xScale and yScale are based on a value of 1.0, which means no scaling. Every point in the objects
selected by tagOrId is moved so that its x distance from P is multiplied by xScale and its y distance
is multiplied by yScale.
This method will not change the size of a text item, but may move it.
.scan_dragto ( x, y, gain=10.0 )
See the .scan_mark() method below.
.scan_mark ( x, y )
This method is used to implement fast scrolling of a canvas. The intent is that the user will press
and hold a mouse button, then move the mouse up to scan (scroll) the canvas horizontally and
vertically in that direction at a rate that depends on how far the mouse has moved since the mouse
button was depressed.
To implement this feature, bind the mouse's button-down event to a handler that calls
scan_mark(x, y) where x and y are the current mouse coordinates. Bind the <Motion> event
to a handler that, assuming the mouse button is still down, calls scan_dragto(x, y, gain)
where x and y are the current mouse coordinates.
The gain argument controls the rate of scanning. This argument has a default value of 10.0. Use
larger numbers for faster scanning.
.select_adjust ( oid, specifier )
Adjusts the boundaries of the current text selection to include the position given by the specifier
argument, in the text item with the object ID oid.
The current selection anchor is also set to the specified position. For a discussion of the selection
anchor, see the canvas select_from method below.
New Mexico Tech Computer Center
Tkinter reference
24

For the values of specifier, see the canvas insert method above.
.select_clear()
Removes the current text selection, if it is set. If there is no current selection, does nothing.
.select_from ( oid, specifier )
This method sets the selection anchor to the position given by the specifier argument, within the
text item whose object ID is given by oid.
The currently selected text on a given canvas is specified by three positions: the start position, the
end position, and the selection anchor, which may be anywhere within those two positions.
To change the position of the currently selected text, use this method in combination with the se-
lect_adjust, select_from, and select_to canvas methods (q.v.).
.select_item()
If there is a current text selection on this canvas, return the object ID of the text item containing the
selection. If there is no current selection, this method returns None.
.select_to ( oid, specifier
This method changes the current text selection so that it includes the select anchor and the position
given by specifier within the text item whose object ID is given by oid. For the values of spe-
cifier, see the canvas insert method above.
.tag_bind ( tagOrId, sequence=None, function=None, add=None )
Binds events to objects on the canvas. For the object or objects selected by tagOrId, associates the
handler function with the event sequence. If the add argument is a string starting with "+",
the new binding is added to existing bindings for the given sequence, otherwise the new binding
replaces that for the given sequence.
For general information on event bindings, see Section 30, “Events” (p. 106).
Note that the bindings are applied to items that have this tag at the time of the tag_bind method
call. If tags are later removed from those items, the bindings will persist on those items. If the tag
you specify is later applied to items that did not have that tag when you called tag_bind, that
binding will not be applied to the newly tagged items.
.tag_lower ( tagOrId, belowThis )
Moves the object or objects selected by tagOrId within the display list to a position just below the
first or only object specied by the tag or ID belowThis.
If there are multiple items with tag tagOrId, their relative stacking order is preserved.
This method does not affect canvas window items. To change a window item's stacking order, use
a lower or lift method on the window.
.tag_raise ( tagOrId, aboveThis )
Moves the object or objects selected by tagOrId within the display list to a position just above the
first or only object specied by the tag or ID aboveThis.
If there are multiple items with tag tagOrId, their relative stacking order is preserved.
This method does not affect canvas window items. To change a window item's stacking order, use
a lower or lift method on the window.
.tag_unbind ( tagOrId, sequence, funcId=None )
Removes bindings for handler funcId and event sequence from the canvas object or objects
specified by tagOrId. See Section 30, “Events” (p. 106).
25
Tkinter reference
New Mexico Tech Computer Center

.type ( tagOrId )
Returns the type of the first or only object specified by tagOrId. The return value will be one of
the strings "arc", "bitmap", "image", "line", "oval", "polygon", "rectangle", "text",
or "window".
.xview ( MOVETO, fraction )
This method scrolls the canvas relative to its image, and is intended for binding to the command
option of a related scrollbar. The canvas is scrolled horizontally to a position given by offset,
where 0.0 moves the canvas to its leftmost position and 1.0 to its rightmost position.
.xview ( SCROLL, n, what )
This method moves the canvas left or right: the what argument specifies how much to move and
can be either UNITS or PAGES, and n tells how many units to move the canvas to the right relative
to its image (or left, if negative).
The size of the move for UNITS is given by the value of the canvas's xscrollincrement option;
see Section 21, “The Scrollbar widget” (p. 69).
For movements by PAGES, n is multiplied by nine-tenths of the width of the canvas.
.xview_moveto ( fraction )
This method scrolls the canvas in the same way as .xview(MOVETO, fraction).
.xview_scroll ( n, what )
Same as .xview(SCROLL, n, what).
.yview ( MOVETO, fraction )
The vertical scrolling equivalent of .xview(MOVETO,…).
.yview ( SCROLL, n, what )
The vertical scrolling equivalent of .xview(SCROLL,…).
.yview_moveto ( fraction )
The vertical scrolling equivalent of .xview().
.yview_scroll ( n, what )
The vertical scrolling equivalents of .xview(), .xview_moveto(), and .xview_scroll().
7.7. Canvas arc objects
An arc object on a canvas, in its most general form, is a wedge-shaped slice taken out of an ellipse. This
includes whole ellipses and circles as special cases. See Section 7.11, “Canvas oval objects” (p. 30) for
more on the geometry of the ellipse drawn.
To create an arc object on a canvas C, use:
id = C.create_arc ( x0, y0, x1, y1, option, ... )
The constructor returns the object ID of the new arc object on canvas C.
Point (x0, y0) is the top left corner and (x1, y1) the lower right corner of a rectangle into which the ellipse
is fit. If this rectangle is square, you get a circle.
The various options include:
These options apply when the arc is in the ACTIVE state, that is, when
the mouse is over the arc. For example, the activefill option specifies
activedash
activefill
the interior color when the arc is active. For option values, see dash,
activeoutline
New Mexico Tech Computer Center
Tkinter reference
26

fill, outline, outlinestipple, stipple, and width, respectively.
activeoutlinestipple
activestipple
activewidth
Dash pattern for the outline. See Section 5.13, “Dash patterns” (p. 16).
dash
Dash pattern offset for the outline. See Section 5.13, “Dash pat-
terns” (p. 16).
dashoffset
These options apply when the arc's state is DISABLED.
disableddash
disabledfill
disabledoutline
disabledoutlinestipple
disabledstipple
disabledwidth
Width of the slice in degrees. The slice starts at the angle given by the
start option and extends counterclockwise for extent degrees.
extent
By default, the interior of an arc is transparent, and fill="" will select
this behavior. You can also set this option to any color and the interior
of the arc will be filled with that color.
fill
Stipple pattern offset for the interior of the arc. See Section 5.14,
“Matching stipple patterns” (p. 16).
offset
The color of the border around the outside of the slice. Default is black.
outline
Stipple pattern offset for the outline. See Section 5.14, “Matching stipple
patterns” (p. 16).
outlineoffset
If the outline option is used, this option specifies a bitmap used to
stipple the border. Default is black, and that default can be specified
by setting outlinestipple="".
outlinestipple
Starting angle for the slice, in degrees, measured from +x direction. If
omitted, you get the entire ellipse.
start
This option is NORMAL by default. It may be set to HIDDEN to make the
arc invisible or to DISABLED to gray out the arc and make it unrespons-
ive to events.
state
A bitmap indicating how the interior fill of the arc will be stippled.
Default is stipple="" (solid). You'll probably want something like
stipple
stipple="gray25". Has no effect unless fill has been set to some
color.
The default is to draw the whole arc; use style=PIESLICE for this
style. To draw only the circular arc at the edge of the slice, use
style
style=ARC. To draw the circular arc and the chord (a straight line
connecting the endpoints of the arc), use style=CHORD.
ARC
PIESLICE
CHORD
27
Tkinter reference
New Mexico Tech Computer Center

If a single string, the arc is tagged with that string. Use a tuple of strings
to tag the arc with multiple tags. See Section 7.4, “Canvas tags” (p. 21).
tags
Width of the border around the outside of the arc. Default is 1 pixel.
width
7.8. Canvas bitmap objects
A bitmap object on a canvas is shown as two colors, the background color (for 0 data values) and the
foreground color (for 1 values).
To create a bitmap object on a canvas C, use:
id = C.create_bitmap ( x, y, *options ... )
which returns the integer ID number of the image object for that canvas.
The x and y values are the reference point that specifies where the bitmap is placed.
Options include:
These options specify the background, bitmap, and foreground values
when the bitmap is active, that is, when the mouse is over the bitmap.
activebackground
activebitmap
activeforeground
The bitmap is positioned relative to point (x, y). The default is anchor=CEN-
TER, meaning that the bitmap is centered on the (x, y) position. See Sec-
anchor
tion 5.5, “Anchors” (p. 11) for the various anchor option values. For ex-
ample, if you specify anchor=NE, the bitmap will be positioned so that
point (x, y) is located at the northeast (top right) corner of the bitmap.
The color that will appear where there are 0 values in the bitmap. The default
is background="", meaning transparent.
background
The bitmap to be displayed; see Section 5.7, “Bitmaps” (p. 12).
bitmap
These options specify the background, bitmap, and foreground to be used
when the bitmap's state is DISABLED.
disabledbackground
disabledbitmap
disabledforeground
The color that will appear where there are 1 values in the bitmap. The default
is foreground="black".
foreground
By default, items are created with state=NORMAL. Use DISABLED to make
the item grayed out and unresponsive to events; use HIDDEN to make the
item invisible.
state
The tag or tags to be associated with the object, as a string or tuple of strings.
See Section 7.4, “Canvas tags” (p. 21).
tags
7.9. Canvas image objects
To display a graphics image on a canvas C, use:
id = C.create_image ( x, y, option, ... )
This constructor returns the integer ID number of the image object for that canvas.
The image is positioned relative to point (x, y). Options include:
New Mexico Tech Computer Center
Tkinter reference
28

Image to be displayed when the mouse is over the item. For option values, see
image below.
activeimage
The default is anchor=CENTER, meaning that the image is centered on the (x, y)
position. See Section 5.5, “Anchors” (p. 11) for the possible values of this option.
anchor
For example, if you specify anchor=S, the image will be positioned so that point
(x, y) is located at the center of the bottom (south) edge of the image.
Image to be displayed when the item is inactive. For option values, see image be-
low.
disabledimage
The image to be displayed. See Section 5.9, “Images” (p. 13), above, for information
about how to create images that can be loaded onto canvases.
image
Normally, image objects are created in state NORMAL. Set this value to DISABLED
to make it grayed-out and unresponsive to the mouse. If you set it to HIDDEN, the
item is invisible.
state
The tags to be associated with the object, as a sequence of strings. See Section 7.4,
“Canvas tags” (p. 21).
tags
7.10. Canvas line objects
In general, a line can consist of any number of segments connected end to end, and each segment can
be straight or curved. To create a canvas line object on a canvas C, use:
id = C.create_line ( x0, y0, x1, y1, ..., xn, yn, option, ... )
The line goes through the series of points (x0, y0), (x1, y1), … (xn, yn). Options include:
These options specify the dash, fill, stipple, and width values to be used
when the line is active, that is, when the mouse is over it.
activedash
activefill
activestipple
activewidth
The default is for the line to have no arrowheads. Use arrow=FIRST to get an
arrowhead at the (x0, y0) end of the line. Use arrow=LAST to get an arrowhead
at the far end. Use arrow=BOTH for arrowheads at both ends.
arrow
A tuple (d1, d2, d3) that describes the shape of the arrowheads added by
the arrow option. Default is (8,10,3).
d1
d2
d3
arrowshape
You can specify the shape of the ends of the line with this option; see Section 5.12,
“Cap and join styles” (p. 15). The default option is BUTT.
capstyle
To produce a dashed line, specify this option; see Section 5.13, “Dash pat-
terns” (p. 16). The default appearance is a solid line.
dash
29
Tkinter reference
New Mexico Tech Computer Center

If you specify a dash pattern, the default is to start the specified pattern at the
beginning of the line. The dashoffset option allows you to specify that the
dashoffset
start of the dash pattern occurs at a given distance after the start of the line. See
Section 5.13, “Dash patterns” (p. 16).
The dash, fill, stipple, and width values to be used when the item is in
the DISABLED state.
disableddash
disabledfill
disabledstipple
disabledwidth
The color to use in drawing the line. Default is fill="black".
fill
For lines that are made up of more than one line segment, this option controls
the appearance of the junction between segments. For more details, see Sec-
tion 5.12, “Cap and join styles” (p. 15). The default style is ROUND
joinstyle
For stippled lines, the purpose of this option is to match the item's stippling
pattern with those of adjacent objects. See Section 5.14, “Matching stipple pat-
terns” (p. 16)..
offset
If true, the line is drawn as a series of parabolic splines fitting the point set. De-
fault is false, which renders the line as a set of straight segments.
smooth
If the smooth option is true, each spline is rendered as a number of straight line
segments. The splinesteps option specifies the number of segments used to
approximate each section of the line; the default is splinesteps=12.
splinesteps
Normally, line items are created in state NORMAL. Set this option to HIDDEN to
make the line invisible; set it to DISABLED to make it unresponsive to the mouse.
state
To draw a stippled line, set this option to a bitmap that specifies the stippling
pattern, such as stipple="gray25". See Section 5.7, “Bitmaps” (p. 12) for the
possible values.
stipple
The tags to be associated with the object, as a sequence of strings. See Section 7.4,
“Canvas tags” (p. 21).
tags
The line's width. Default is 1 pixel. See Section 5.1, “Dimensions” (p. 8) for
possible values.
width
7.11. Canvas oval objects
Ovals, mathematically, are ellipses, including circles as a special case. The ellipse is fit into a rectangle
defined by the coordinates (x0, y0) of the top left corner and the coordinates (x1, y1) of the bottom
right corner:
(x0, y0)
(x1,y1)
The oval will coincide with the top and left-hand lines of this box, but will fit just inside the bottom and
right-hand sides.
To create an ellipse on a canvas C, use:
New Mexico Tech Computer Center
Tkinter reference
30

id = C.create_oval ( x0, y0, x1, y1, option, ... )
which returns the object ID of the new oval object on canvas C.
Options for ovals:
These options specify the dash pattern, fill color, outline color, outline
stipple pattern, interior stipple pattern, and outline width values to be
activedash
activefill
used when the oval is in the ACTIVE state, that is, when the mouse is
activeoutline
over the oval. For option values, see dash, fill, outline, outlines-
tipple, stipple, and width.
activeoutlinestipple
activestipple
activewidth
To produce a dashed border around the oval, set this option to a dash
pattern; see Section 5.13, “Dash patterns” (p. 16)
dash
When using the dash option, the dashoffset option is used to change
the alignment of the border's dash pattern relative to the oval. See
Section 5.14, “Matching stipple patterns” (p. 16).
dashoffset
These options specify the appearance of the oval when the item's state
is DISABLED.
disableddash
disabledfill
disabledoutline
disabledoutlinestipple
disabledstipple
disabledwidth
The default appearance of an oval's interior is transparent, and a value
of fill="" will select this behavior. You can also set this option to
fill
any color and the interior of the ellipse will be filled with that color;
see Section 5.3, “Colors” (p. 9).
Stipple pattern offset of the interior. See Section 5.14, “Matching stipple
patterns” (p. 16).
offset
The color of the border around the outside of the ellipse. Default is
outline="black".
outline
Stipple pattern offset of the border. See Section 5.14, “Matching stipple
patterns” (p. 16).
outlineoffset
A bitmap indicating how the interior of the ellipse will be stippled.
Default is stipple="", which means a solid color. A typical value
stipple
would be stipple="gray25". Has no effect unless the fill has been
set to some color. See Section 5.7, “Bitmaps” (p. 12).
Stipple pattern to be used for the border. For option values, see
stipple below.
outlinestipple
By default, oval items are created in state NORMAL. Set this option to
DISABLED to make the oval unresponsive to mouse actions. Set it to
HIDDEN to make the item invisible.
state
The tags to be associated with the object, as a sequence of strings. See
Section 7.4, “Canvas tags” (p. 21).
tags
31
Tkinter reference
New Mexico Tech Computer Center

Width of the border around the outside of the ellipse. Default is 1 pixel;
see Section 5.1, “Dimensions” (p. 8) for possible values. If you set this
width
to zero, the border will not appear. If you set this to zero and make the
fill transparent, you can make the entire oval disappear.
7.12. Canvas polygon objects
As displayed, a polygon has two parts: its outline and its interior. Its geometry is specified as a series
of vertices [(x0, y0), (x1, y1), … (xn, yn)], but the actual perimeter includes one more segment from (xn,
yn) back to (x0, y0). In this example, there are five vertices:
(x2,y2)
(x1,y1)
(x0,y0)
(x3,y3)
(x4,y4)
To create a new polygon object on a canvas C:
id = C.create_polygon ( x0, y0, x1, y1, ..., option, ... )
The constructor returns the object ID for that object. Options:
These options specify the appearance of the polygon when it is in the
ACTIVE state, that is, when the mouse is over it. For option values, see
dash, fill, outline, outlinestipple, stipple, and width.
activedash
activefill
activeoutline
activeoutlinestipple
activestipple
activewidth
Use this option to produce a dashed border around the polygon. See
Section 5.13, “Dash patterns” (p. 16).
dash
Use this option to start the dash pattern at some point in its cycle other
than the beginning. See Section 5.13, “Dash patterns” (p. 16).
dashoffset
These options specify the appearance of the polygon when its state is
DISABLED.
disableddash
disabledfill
disabledoutline
disabledoutlinestipple
disabledstipple
disabledwidth
You can color the interior by setting this option to a color. The default
appearance for the interior of a polygon is transparent, and you can set
fill="" to get this behavior. See Section 5.3, “Colors” (p. 9).
fill
New Mexico Tech Computer Center
Tkinter reference
32

This option controls the appearance of the intersections between adjacent
sides of the polygon. See Section 5.12, “Cap and join styles” (p. 15).
joinstyle
Offset of the stipple pattern in the interior of the polygon. See Sec-
tion 5.14, “Matching stipple patterns” (p. 16).
offset
Color of the outline; defaults to outline="", which makes the outline
transparent.
outline
Stipple offset for the border. See Section 5.14, “Matching stipple pat-
terns” (p. 16).
outlineoffset
Use this option to get a stippled border around the polygon. The option
value must be a bitmap; see Section 5.7, “Bitmaps” (p. 12).
outlinestipple
The default outline uses straight lines to connect the vertices; use
smooth=0 to get that behavior. If you use smooth=1, you get a continu-
smooth
ous spline curve. Moreover, if you set smooth=1, you can make any
segment straight by duplicating the coordinates at each end of that seg-
ment.
If the smooth option is true, each spline is rendered as a number of
straight line segments. The splinesteps option specifies the number
splinesteps
of segments used to approximate each section of the line; the default is
splinesteps=12.
By default, polygons are created in the NORMAL state. Set this option to
HIDDEN to make the polygon invisible, or set it to DISABLED to make
it unresponsive to the mouse.
state
A bitmap indicating how the interior of the polygon will be stippled.
Default is stipple="", which means a solid color. A typical value
stipple
would be stipple="gray25". Has no effect unless the fill has been
set to some color. See Section 5.7, “Bitmaps” (p. 12).
The tags to be associated with the object, as a sequence of strings. See
Section 7.4, “Canvas tags” (p. 21).
tags
Width of the outline; defaults to 1. See Section 5.1, “Dimensions” (p. 8).
width
7.13. Canvas rectangle objects
Each rectangle is specified as two points: (x0, y0) is the top left corner, and (x1, y1) is the location of
the pixel just outside of the bottom right corner.
For example, the rectangle specified by top left corner (100,100) and bottom right corner (102,102) is a
square two pixels by two pixels, including pixel (101,101) but not including (102,102).
Rectangles are drawn in two parts:
• The outline lies inside the rectangle on its top and left sides, but outside the rectangle on its bottom
and right side. The default appearance is a one-pixel-wide black border.
For example, consider a rectangle with top left corner (10,10) and bottom right corner (11,11). If you
request no border (width=0) and green fill (fill='green'), you will get one green pixel at (10,10).
However, if you request the same options with a black border (width=1), you will get four black
pixels at (10,10), (10,11), (11,10), and (11,11).
• The fill is the area inside the outline. Its default appearance is transparent.
To create a rectangle object on canvas C:
33
Tkinter reference
New Mexico Tech Computer Center

id = C.create_rectangle ( x0, y0, x1, y1, option, ... )
This constructor returns the object ID of the rectangle on that canvas. Options include:
These options specify the appearance of the rectangle when its state
is ACTIVE, that is, when the mouse is on top of the rectangle. For option
activedash
activefill
values, refer to dash, fill, outline, outlinestipple, stipple,
and width below.
activeoutline
activeoutlinestipple
activestipple
activewidth
To produce a dashed border around the rectangle, use this option to
specify a dash pattern. See Section 5.13, “Dash patterns” (p. 16).
dash
Use this option to start the border's dash pattern at a different point
in the cycle; see Section 5.13, “Dash patterns” (p. 16).
dashoffset
These options specify the appearance of the rectangle when its state
is DISABLED.
disableddash
disabledfill
disabledoutline
disabledoutlinestipple
disabledstipple
disabledwidth
By default, the interior of a rectangle is empty, and you can get this
behavior with fill="". You can also set the option to a color; see
Section 5.3, “Colors” (p. 9).
fill
Use this option to change the offset of the interior stipple pattern. See
Section 5.14, “Matching stipple patterns” (p. 16).
offset
The color of the border. Default is outline="black".
outline
Use this option to adjust the offset of the stipple pattern in the outline;
see Section 5.14, “Matching stipple patterns” (p. 16).
outlineoffset
Use this option to produce a stippled outline. The pattern is specified
by a bitmap; see Section 5.7, “Bitmaps” (p. 12).
outlinestipple
By default, rectangles are created in the NORMAL state. The state is
ACTIVE when the mouse is over the rectangle. Set this option to DIS-
state
ABLED to gray out the rectangle and make it unresponsive to mouse
events.
A bitmap indicating how the interior of the rectangle will be stippled.
Default is stipple="", which means a solid color. A typical value
stipple
would be stipple="gray25". Has no effect unless the fill has
been set to some color. See Section 5.7, “Bitmaps” (p. 12).
The tags to be associated with the object, as a sequence of strings. See
Section 7.4, “Canvas tags” (p. 21).
tags
Width of the border. Default is 1 pixel. Use width=0 to make the
border invisible. See Section 5.1, “Dimensions” (p. 8).
width
New Mexico Tech Computer Center
Tkinter reference
34

7.14. Canvas text objects
You can display one or more lines of text on a canvas C by creating a text object:
id = C.create_text ( x, y, option, ... )
This returns the object ID of the text object on canvas C. Options include:
The text color to be used when the text is active, that is, when the mouse is over
it. For option values, see fill below.
activefill
The stipple pattern to be used when the text is active. For option values, see
stipple below.
activestipple
The default is anchor=CENTER, meaning that the text is centered vertically and
horizontally around position (x, y). See Section 5.5, “Anchors” (p. 11) for possible
anchor
values. For example, if you specify anchor=SW, the text will be positioned so its
lower left corner is at point (x, y).
The text color to be used when the text object's state is DISABLED. For option
values, see fill below.
disabledfill
The stipple pattern to be used when the text is disabled. For option values, see
stipple below.
disabledstipple
The default text color is black, but you can render it in any color by setting the
fill option to that color. See Section 5.3, “Colors” (p. 9).
fill
If you don't like the default font, set this option to any font value. See Section 5.4,
“Type fonts” (p. 9).
font
For multi-line textual displays, this option controls how the lines are justified:
LEFT (the default), CENTER, or RIGHT.
justify
The stipple offset to be used in rendering the text. For more information, see
Section 5.14, “Matching stipple patterns” (p. 16).
offset
By default, the text item's state is NORMAL. Set this option to DISABLED to make
in unresponsive to mouse events, or set it to HIDDEN to make it invisible.
state
A bitmap indicating how the text will be stippled. Default is stipple="", which
means solid. A typical value would be stipple="gray25". See Section 5.7,
“Bitmaps” (p. 12).
stipple
The tags to be associated with the object, as a sequence of strings. See Section 7.4,
“Canvas tags” (p. 21).
tags
The text to be displayed in the object, as a string. Use newline characters ("\n")
to force line breaks.
text
If you don't specify a width option, the text will be set inside a rectangle as long
as the longest line. However, you can also set the width option to a dimension,
width
and each line of the text will be broken into shorter lines, if necessary, or even
broken within words, to fit within the specified width. See Section 5.1, “Dimen-
sions” (p. 8).
You can change the text displayed in a text item.
• To retrieve the text from an item with object ID I on a canvas C, call C.itemcget(I, "text").
• To replace the text in an item with object ID I on a canvas C with the text from a string S, call
C.itemconfigure(I, text=S).
35
Tkinter reference
New Mexico Tech Computer Center

A number of canvas methods allow you to manipulate text items. See Section 7.6, “Methods on Canvas
widgets” (p. 21), especially dchars, focus, icursor, index, and insert.
7.15. Canvas window objects
You can place any Tkinter widget onto a canvas by using a canvas window object. A window is a rectan-
gular area that can hold one Tkinter widget. The widget must be the child of the same top-level window
as the canvas, or the child of some widget located in the same top-level window.
If you want to put complex multi-widget objects on a canvas, you can use this method to place a Frame
widget on the canvas, and then place other widgets inside that frame.
To create a new canvas window object on a canvas C:
id = C.create_window ( x, y, option, ... )
This returns the object ID for the window object. Options include:
The default is anchor=CENTER, meaning that the window is centered on the (x, y) position.
See Section 5.5, “Anchors” (p. 11) for the possible values. For example, if you specify an-
anchor
chor=E, the window will be positioned so that point (x, y) is on the midpoint of its right-
hand (east) edge.
The height of the area reserved for the window. If omitted, the window will be sized to fit
the height of the contained widget. See Section 5.1, “Dimensions” (p. 8) for possible values.
height
By default, window items are in the NORMAL state. Set this option to DISABLED to make the
window unresponsive to mouse input, or to HIDDEN to make it invisible.
state
The tags to be associated with the object, as a sequence of strings. See Section 7.4, “Canvas
tags” (p. 21).
tags
The width of the area reserved for the window. If omitted, the window will be sized to fit the
width of the contained widget.
width
Use window=w where w is the widget you want to place onto the canvas. If this is omitted
initially, you can later call C.itemconfigure ( id, window=w) to place the widget w
onto the canvas, where id is the window's object ID..
window
8.The Checkbutton widget
The purpose of a checkbutton widget (sometimes called “checkbox”) is to allow the user to read and
select a two-way choice. The graphic above shows how checkbuttons look in the off (0) and on (1) state
in one implementation: this is a screen shot of two checkbuttons using 24-point Times font.
The indicator is the part of the checkbutton that shows its state, and the label is the text that appears beside
it.
• You will need to create a control variable, an instance of the IntVar class, so your program can query
and set the state of the checkbutton. See Section 28, “Control variables: the values behind the wid-
gets” (p. 103), below.
• You can also use event bindings to react to user actions on the checkbutton; see Section 30,
“Events” (p. 106), below.
New Mexico Tech Computer Center
Tkinter reference
36

• You can disable a checkbutton. This changes its appearance to “grayed out” and makes it unresponsive
to the mouse.
• You can get rid of the checkbutton indicator and make the whole widget a “push-push” button that
looks recessed when it is set, and looks raised when it is cleared.
To create a checkbutton in an existing parent window or frame parent:
w = Checkbutton ( parent, option, ... )
The constructor returns a new Checkbutton widget. Options include:
Background color when the checkbutton is under the cursor. See Section 5.3,
“Colors” (p. 9).
activebackground
Foreground color when the checkbutton is under the cursor.
activeforeground
If the widget inhabits a space larger than it needs, this option specifies
where the checkbutton will sit in that space. The default is anchor=CENTER.
anchor
See Section 5.5, “Anchors” (p. 11) for the allowable values. For example, if
you use anchor=NW, the widget will be placed in the upper left corner of
the space.
The normal background color displayed behind the label and indicator. See
Section 5.3, “Colors” (p. 9). For the bitmap option, this specifies the color
displayed for 0-bits in the bitmap.
bg or background
To display a monochrome image on a button, set this option to a bitmap;
see Section 5.7, “Bitmaps” (p. 12).
bitmap
The size of the border around the indicator. Default is two pixels. For pos-
sible values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
A procedure to be called every time the user changes the state of this
checkbutton.
command
Use this option to display both text and a graphic, which may be either a
bitmap or an image, on the button. Allowable values describe the position
compound
of the graphic relative to the text, and may be any of BOTTOM, TOP, LEFT,
RIGHT, or CENTER. For example, compound=LEFT would position the
graphic to the left of the text.
If you set this option to a cursor name (see Section 5.8, “Cursors” (p. 12)),
the mouse cursor will change to that pattern when it is over the checkbutton.
cursor
The foreground color used to render the text of a disabled checkbutton. The
default is a stippled version of the default foreground color.
disabledforeground
The font used for the text. See Section 5.4, “Type fonts” (p. 9).
font
The color used to render the text. For the bitmap option, this specifies
the color displayed for 1-bits in the bitmap.
fg or foreground
The number of lines of text on the checkbutton. Default is 1.
height
The color of the focus highlight when the checkbutton does not have focus.
See Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the checkbutton has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set to 0 to suppress display
of the focus highlight.
highlightthickness
To display a graphic image on the button, set this option to an image object.
See Section 5.9, “Images” (p. 13).
image
37
Tkinter reference
New Mexico Tech Computer Center

Normally a checkbutton displays as its indicator a box that shows whether
the checkbutton is set or not. You can get this behavior by setting indic-
indicatoron
atoron=1. However, if you set indicatoron=0, the indicator disappears,
and the entire widget becomes a push-push button that looks raised when
it is cleared and sunken when it is set. You may want to increase the bor-
derwidth value to make it easier to see the state of such a control.
If the text contains multiple lines, this option controls how the text is jus-
tified: CENTER, LEFT, or RIGHT.
justify
By default, checkbuttons use the RAISED relief style when the button is off
(cleared); use this option to specify a different relief style to be displayed
when the button is off. See Section 5.6, “Relief styles” (p. 11) for values.
offrelief
Normally, a checkbutton's associated control variable will be set to 0 when
it is cleared (off). You can supply an alternate value for the off state by set-
ting offvalue to that value.
offvalue
Normally, a checkbutton's associated control variable will be set to 1 when
it is set (on). You can supply an alternate value for the on state by setting
onvalue to that value.
onvalue
Use this option to specify a relief style to be displayed when the mouse is
over the checkbutton; see Section 5.6, “Relief styles” (p. 11).
overrelief
How much space to leave to the left and right of the checkbutton and text.
Default is 1 pixel. For possible values, see Section 5.1, “Dimensions” (p. 8).
padx
How much space to leave above and below the checkbutton and text. Default
is 1 pixel.
pady
With the default value, relief=FLAT, the checkbutton does not stand out
from its background. You may set this option to any of the other styles (see
relief
Section 5.6, “Relief styles” (p. 11)), or use relief=SOLID, which gives
you a solid black frame around it.
The color of the checkbutton when it is set. Default is selectcolor="red".
selectcolor
If you set this option to an image, that image will appear in the checkbutton
when it is set. See Section 5.9, “Images” (p. 13).
selectimage
The default is state=NORMAL, but you can use state=DISABLED to gray
out the control and make it unresponsive. If the cursor is currently over the
checkbutton, the state is ACTIVE.
state
The default is that the input focus (see Section 29, “Focus: routing keyboard
input” (p. 105)) will pass through a checkbutton. If you set takefocus=0,
focus will not pass through it.
takefocus
The label displayed next to the checkbutton. Use newlines ("\n") to display
multiple lines of text.
text
If you need to change the label on a checkbutton during execution, create
a StringVar (see Section 28, “Control variables: the values behind the wid-
textvariable
gets” (p. 103)) to manage the current value, and set this option to that control
variable. Whenever the control variable's value changes, the checkbutton's
annotation will automatically change as well.
With the default value of -1, none of the characters of the text label are un-
derlined. Set this option to the index of a character in the text (counting
from zero) to underline that character.
underline
New Mexico Tech Computer Center
Tkinter reference
38

The control variable that tracks the current state of the checkbutton; see
Section 28, “Control variables: the values behind the widgets” (p. 103).
variable
Normally this variable is an IntVar, and 0 means cleared and 1 means
set, but see the offvalue and onvalue options above.
The default width of a checkbutton is determined by the size of the displayed
image or text. You can set this option to a number of characters and the
checkbutton will always have room for that many characters.
width
Normally, lines are not wrapped. You can set this option to a number of
characters and all lines will be broken into pieces no longer than that
number.
wraplength
Methods on checkbuttons include:
.deselect()
Clears (turns off) the checkbutton.
.flash()
Flashes the checkbutton a few times between its active and normal colors, but leaves it the way it
started.
.invoke()
You can call this method to get the same actions that would occur if the user clicked on the check-
button to change its state.
.select()
Sets (turns on) the checkbutton.
.toggle()
Clears the checkbutton if set, sets it if cleared.
9.The Entry widget
The purpose of an Entry widget is to let the user see and modify a single line of text.
• If you want to display multiple lines of text that can be edited, see Section 23, “The Text widget” (p. 77).
• If you want to display one or more lines of text that cannot be modified by the user, see Section 11,
“The Label widget” (p. 44).
Some definitions:
• The selection is a highlighted region of the text in an Entry widget, if there is one.
Typically the selection is made by the user with the mouse, and selected text is copied to the system's
clipboard. However, Tkinter allows you to control whether or not selected text gets copied to the
clipboard. You can also select text in an Entry under program control.
• The insertion cursor shows where new text will be inserted. It is displayed only when the user clicks
the mouse somewhere in the widget. It usually appears as a blinking vertical line inside the widget.
You can customize its appearance in several ways.
• Positions within the widget's displayed text are given as an index. There are several ways to specify
an index:
• As normal Python indexes, starting from 0.
• The constant END refers to the position after the existing text.
39
Tkinter reference
New Mexico Tech Computer Center

• The constant INSERT refers to the current position of the insertion cursor.
• The constant ANCHOR refers to the first character of the selection, if there is a selection.
• You may need to figure out which character position in the widget corresponds to a given mouse
position. To simplify that process, you can use as an index a string of the form "@n", where n is
the horizontal distance in pixels between the left edge of the Entry widget and the mouse. Such
an index will specify the character at that horizontal mouse position.
To create a new Entry widget in a root window or frame named parent:
w = Entry ( parent, option, ... )
This constructor returns the new Entry widget. Options include:
The background color inside the entry area. Default is a light gray.
bg or background
The width of the border around the entry area; see Section 5.1, “Dimen-
sions” (p. 8). The default is two pixels.
bd or borderwidth
The cursor used when the mouse is within the entry widget; see Section 5.8,
“Cursors” (p. 12).
cursor
The background color to be displayed when the widget is in the DISABLED
state. For option values, see bg above.
disabledbackground
The foreground color to be displayed when the widget is in the DISABLED
state. For option values, see fg below.
disabledforeground
By default, if you select text within an Entry widget, it is automatically
exported to the clipboard. To avoid this exportation, use exportselec-
tion=0.
exportselection
The color used to render the text. Default is black.
fg or foreground
The font used for text entered in the widget by the user. See Section 5.4,
“Type fonts” (p. 9).
font
Color of the focus highlight when the widget does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
Color shown in the focus highlight when the widget has the focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
By default, the insertion cursor (which shows the point within the text
where new keyboard input will be inserted) is black. To get a different
insertbackground
color of insertion cursor, set insertbackground to any color; see Sec-
tion 5.3, “Colors” (p. 9).
By default, the insertion cursor is a simple rectangle. You can get the cursor
with the RAISED relief effect (see Section 5.6, “Relief styles” (p. 11)) by
insertborderwidth
setting insertborderwidth to the dimension of the 3-d border. If you
do, make sure that the insertwidth attribute is at least twice that value.
By default, the insertion cursor blinks. You can set insertofftime to a
value in milliseconds to specify how much time the insertion cursor spends
insertofftime
off. Default is 300. If you use insertofftime=0, the insertion cursor won't
blink at all.
Similar to insertofftime, this attribute specifies how much time the
cursor spends on per blink. Default is 600 (milliseconds).
insertontime
New Mexico Tech Computer Center
Tkinter reference
40

By default, the insertion cursor is 2 pixels wide. You can adjust this by setting
insertwidth to any dimension.
insertwidth
This option controls how the text is justified when the text doesn't fill the
widget's width. The value can be LEFT (the default), CENTER, or RIGHT.
justify
The background color to be displayed when the widget's state option is
"readonly".
readonlybackground
Selects three-dimensional shading effects around the text entry. See Sec-
tion 5.6, “Relief styles” (p. 11). The default is relief=SUNKEN.
relief
The background color to use displaying selected text. See Section 5.3,
“Colors” (p. 9).
selectbackground
The width of the border to use around selected text. The default is one pixel.
selectborderwidth
The foreground (text) color of selected text.
selectforeground
Normally, the characters that the user types appear in the entry. To make
a “password” entry that echoes each character as an asterisk, set show="*".
show
Use this attribute to disable the Entry widget so that the user can't type
anything into it. Use state=DISABLED to disable the widget,
state
state=NORMAL to allow user input again. Your program can also find out
whether the cursor is currently over the widget by interrogating this attrib-
ute; it will have the value ACTIVE when the mouse is over it. You can also
set this option to "disabled", which is like the DISABLED state, but the
contents of the widget can still be selected or copied.
By default, the focus will tab through entry widgets. Set this option to 0 to
take the widget out of the sequence. For a discussion of focus, see Section 29,
“Focus: routing keyboard input” (p. 105).
takefocus
In order to be able to retrieve the current text from your entry widget, you
must set this option to an instance of the StringVar class; see Section 28,
textvariable
“Control variables: the values behind the widgets” (p. 103). You can retrieve
the text using v.get(), or set it using v.set(), where v is the associated
control variable.
The size of the entry in characters. The default is 20. For proportional fonts,
the physical length of the widget will be based on the average width of a
character times the value of the width option.
width
If you expect that users will often enter more text than the onscreen size of
the widget, you can link your entry widget to a scrollbar. Set this option to
xscrollcommand
the .set method of the scrollbar. For more information, see Section 9.1,
“Scrolling an Entry widget” (p. 43).
Methods on Entry objects include:
.delete ( first, last=None )
Deletes characters from the widget, starting with the one at index first, up to but not including
the character at position last. If the second argument is omitted, only the single character at position
first is deleted.
.get()
Returns the entry's current text as a string.
.icursor ( index )
Set the insertion cursor just before the character at the given index.
41
Tkinter reference
New Mexico Tech Computer Center

.index ( index )
Shift the contents of the entry so that the character at the given index is the leftmost visible character.
Has no effect if the text fits entirely within the entry.
.insert ( index, s )
Inserts string s before the character at the given index.
.scan_dragto ( x )
See the scan_mark method below.
.scan_mark ( x )
Use this option to set up fast scanning of the contents of the Entry widget that has a scrollbar that
supports horizontal scrolling.
To implement this feature, bind the mouse's button-down event to a handler that calls
scan_mark(x), where x is the current mouse x position. Then bind the <Motion> event to a
handler that calls scan_dragto(x), where x is the current mouse x position. The scan_dragto
method scrolls the contents of the Entry widget continuously at a rate proportional to the horizontal
distance between the position at the time of the scan_mark call and the current position.
.select_adjust ( index )
This method is used to make sure that the selection includes the character at the specified index.
If the selection already includes that character, nothing happens. If not, the selection is expanded
from its current position (if any) to include position index.
.select_clear()
Clears the selection. If there isn't currently a selection, has no effect.
.select_from ( index )
Sets the ANCHOR index position to the character selected by index, and selects that character.
.select_present()
If there is a selection, returns true, else returns false.
.select_range ( start, end )
Sets the selection under program control. Selects the text starting at the start index, up to but
not including the character at the end index. The start position must be before the end position.
To select all the text in an entry widget e, use e.select_range(0, END).
.select_to ( index )
Selects all the text from the ANCHOR position up to but not including the character at the given index.
.xview ( index )
Same as .xview(). This method is useful in linking the Entry widget to a horizontal scrollbar.
See Section 9.1, “Scrolling an Entry widget” (p. 43).
.xview_moveto ( f )
Positions the text in the entry so that the character at position f, relative to the entire text, is positioned
at the left edge of the window. The f argument must be in the range [0,1], where 0 means the left
end of the text and 1 the right end.
.xview_scroll ( number, what )
Used to scroll the entry horizontally. The what argument must be either UNITS, to scroll by character
widths, or PAGES, to scroll by chunks the size of the entry widget. The number is positive to scroll
left to right, negative to scroll right to left. For example, for an entry widget e, e.xview_scroll(-
1, PAGES) would move the text one “page” to the right, and e.xview_scroll(4, UNITS)
would move the text four characters to the left.
New Mexico Tech Computer Center
Tkinter reference
42

9.1. Scrolling an Entry widget
Making an Entry widget scrollable requires a little extra code on your part to adapt the Scrollbar
widget's callback to the methods available on the Entry widget. Here are some code fragments illus-
trating the setup. First, the creation and linking of the Entry and Scrollbar widgets:
self.entry = Entry ( self, width=10 )
self.entry.grid(row=0, sticky=E+W)
self.entryScroll = Scrollbar ( self, orient=HORIZONTAL,
command=self.__scrollHandler )
self.entryScroll.grid(row=1, sticky=E+W)
self.entry["xscrollcommand"] = self.entryScroll.set
Here's the adapter function referred to above:
def __scrollHandler(self, *L):
op, howMany = L[0], L[1]
if op == "scroll":
units
=
L[2]
self.entry.xview_scroll ( howMany, units )
elif op == "moveto":
self.entry.xview_moveto ( howMany )
10.The Frame widget
A frame is basically just a container for other widgets.
• Your application's root window is basically a frame.
• Each frame has its own grid layout, so the gridding of widgets within each frame works independently.
• Frame widgets are a valuable tool in making your application modular. You can group a set of related
widgets into a compound widget by putting them into a frame. Better yet, you can declare a new
class that inherits from Frame, adding your own interface to it. This is a good way to hide the details
of interactions within a group of related widgets from the outside world.
To create a new frame widget in a root window or frame named parent:
w = Frame ( parent, option, ... )
The constructor returns the new Frame widget. Options:
The frame's background color. See Section 5.3, “Colors” (p. 9).
bg or background
Width of the frame's border. The default is 0 (no border). For permitted
values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
The cursor used when the mouse is within the frame widget; see Section 5.8,
“Cursors” (p. 12).
cursor
The vertical dimension of the new frame. This will be ignored unless you
also call .grid_propagate(0) on the frame; see Section 4.2, “Other grid
management methods” (p. 6).
height
43
Tkinter reference
New Mexico Tech Computer Center

Color of the focus highlight when the frame does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
Color shown in the focus highlight when the frame has the focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
Normally, a Frame fits tightly around its contents. To add N pixels of hori-
zontal space inside the frame, set padx=N.
padx
Used to add vertical space inside a frame. See padx above.
pady
The default relief for a frame is FLAT, which means the frame will blend in
with its surroundings. To put a border around a frame, set its borderwidth
relief
to a positive value and set its relief to one of the standard relief types; see
Section 5.6, “Relief styles” (p. 11).
Normally, frame widgets are not visited by input focus (see Section 29,
“Focus: routing keyboard input” (p. 105) for an overview of this topic).
takefocus
However, you can set takefocus=1 if you want the frame to receive key-
board input. To handle such input, you will need to create bindings for
keyboard events; see Section 30, “Events” (p. 106) for more on events and
bindings.
The horizontal dimension of the new frame. See Section 5.1, “Dimen-
sions” (p. 8). This value be ignored unless you also call .grid_propag-
width
ate(0) on the frame; see Section 4.2, “Other grid management meth-
ods” (p. 6).
11.The Label widget
Label widgets can display one or more lines of text in the same style, or a bitmap or image. To create a
label widget in a root window or frame parent:
w = Label ( parent, option, ... )
The constructor returns the new Label widget. Options include:
Background color to be displayed when the mouse is over the widget.
activebackground
Foreground color to be displayed when the mouse is over the widget.
activeforeground
This options controls where the text is positioned if the widget has more
space than the text needs. The default is anchor=CENTER, which centers
anchor
the text in the available space. For other values, see Section 5.5, “An-
chors” (p. 11). For example, if you use anchor=NW, the text would be posi-
tioned in the upper left-hand corner of the available space.
The background color of the label area. See Section 5.3, “Colors” (p. 9).
bg or background
Set this option equal to a bitmap or image object and the label will display
that graphic. See Section 5.7, “Bitmaps” (p. 12) and Section 5.9, “Im-
ages” (p. 13).
bitmap
Width of the border around the label; see Section 5.1, “Dimensions” (p. 8).
The default value is two pixels.
bd or borderwidth
If you would like the Label widget to display both text and a graphic
(either a bitmap or an image), the compound option specifies the relative
compound
orientation of the graphic relative to the text. Values may be any of LEFT,
New Mexico Tech Computer Center
Tkinter reference
44

RIGHT, CENTER, BOTTOM, or TOP. For example, if you specify com-
pound=BOTTOM, the graphic will be displayed below the text.
Cursor that appears when the mouse is over this label. See Section 5.8,
“Cursors” (p. 12).
cursor
The foreground color to be displayed when the widget's state is DIS-
ABLED.
disabledforeground
If you are displaying text in this label (with the text or textvariable
option, the font option specifies in what font that text will be displayed.
See Section 5.4, “Type fonts” (p. 9).
font
If you are displaying text or a bitmap in this label, this option specifies the
color of the text. If you are displaying a bitmap, this is the color that will
fg or foreground
appear at the position of the 1-bits in the bitmap. See Section 5.3, “Col-
ors” (p. 9).
Height of the label in lines (not pixels!). If this option is not set, the label
will be sized to fit its contents.
height
Color of the focus highlight when the widget does not have focus.
highlightbackground
The color of the focus highlight when the widget has focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
To display a static image in the label widget, set this option to an image
object. See Section 5.9, “Images” (p. 13).
image
Specifies how multiple lines of text will be aligned with respect to each
other: LEFT for flush left, CENTER for centered (the default), or RIGHT for
right-justified.
justify
Extra space added to the left and right of the text within the widget. Default
is 1.
padx
Extra space added above and below the text within the widget. Default is
1.
pady
Specifies the appearance of a decorative border around the label. The default
is FLAT; for other values, see Section 5.6, “Relief styles” (p. 11).
relief
By default, an Entry widget is in the NORMAL state. Set this option to
DISABLED to make it unresponsive to mouse events. The state will be
ACTIVE when the mouse is over the widget.
state
Normally, focus does not cycle through Label widgets; see Section 29,
“Focus: routing keyboard input” (p. 105). If you want this widget to be visited
by the focus, set takefocus=1.
takefocus
To display one or more lines of text in a label widget, set this option to a
string containing the text. Internal newlines ("\n") will force a line break.
text
To slave the text displayed in a label widget to a control variable of class
StringVar, set this option to that variable. SeeSection 28, “Control vari-
ables: the values behind the widgets” (p. 103).
textvariable
You can display an underline (_) below the nth letter of the text, counting
from 0, by setting this option to n. The default is underline=-1, which
means no underlining.
underline
Width of the label in characters (not pixels!). If this option is not set, the label
will be sized to fit its contents.
width
45
Tkinter reference
New Mexico Tech Computer Center

You can limit the number of characters in each line by setting this option
to the desired number. The default value, 0, means that lines will be broken
only at newlines.
wraplength
There are no special methods for label widgets other than the common ones (see Section 25, “Universal
widget methods” (p. 92)).
12.The LabelFrame widget
The LabelFrame widget, like the Frame widget, is a spatial container—a rectangular area that can
contain other widgets. However, unlike the Frame widget, the LabelFrame widget allows you to
display a label as part of the border around the area.
Here is an example of a LabelFrame widget containing two Button widgets. Note that the label
“Important controls” interrupts the border. This widget illustrates the default GROOVE relief (see Sec-
tion 5.6, “Relief styles” (p. 11)) and the default 'nw' label anchor, which positions the label at the left
side of the top of the frame.
To create a new LabelFrame widget inside a root window or frame parent:
w = LabelFrame ( parent, option, ... )
This constructor returns the new LabelFrame widget. Options:
The background color to be displayed inside the widget; see Section 5.3,
“Colors” (p. 9).
bg or background
Width of the border drawn around the perimeter of the widget; see Sec-
tion 5.1, “Dimensions” (p. 8). The default value is two pixels.
bd or borderwidth
Selects the cursor that appears when the mouse is over the widget; see Sec-
tion 5.8, “Cursors” (p. 12).
cursor
Color to be used for the label text.
fg or foreground
The vertical dimension of the new frame. This will be ignored unless you
also call .grid_propagate(0) on the frame; see Section 4.2, “Other grid
management methods” (p. 6).
height
Color of the focus highlight when the widget does not have focus.
highlightbackground
The color of the focus highlight when the widget has focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
New Mexico Tech Computer Center
Tkinter reference
46

Use this option to specify the position of the label on the widget's border.
The default position is 'nw', which places the label at the left end of the top
border. For the nine possible label positions, refer to this diagram:
labelanchor
’nw’
’wn’
’en’
’n’
’ne’
’w’
’e’
’es’
’ws’
’sw’
’s’
’se’
Instead of a text label, you can use any widget as the label by passing that
widget as the value of this option. If you supply both labelwidget and
text options, the text option is ignored.
labelwidget
Use this option to add additional padding inside the left and right sides of
the widget's frame. The value is in pixels.
padx
Use this option to add additional padding inside the top and bottom of the
widget's frame. The value is in pixels.
pady
This option controls the appearance of the border around the outside of the
widget. The default style is GROOVE; for other values, see Section 5.6, “Relief
styles” (p. 11).
relief
Normally, the widget will not receive focus; supply a True value to this
option to make the widget part of the focus traversal sequence. For more
information, see Section 29, “Focus: routing keyboard input” (p. 105).
takefocus
Text of the label.
text
The horizontal dimension of the new frame. This will be ignored unless you
also call .grid_propagate(0) on the frame; see Section 4.2, “Other grid
management methods” (p. 6).
width
13.The Listbox widget
The purpose of a listbox widget is to display a set of lines of text. Generally they are intended to allow
the user to select one or more items from a list. All the lines of text use the same font. If you need
something more like a text editor, see Section 23, “The Text widget” (p. 77).
To create a new listbox widget inside a root window or frame parent:
w = Listbox ( parent, option, ... )
This constructor returns the new Listbox widget. Options:
This option specifies the appearance of the active line. It may have any of
these values:
activestyle
"underline"
The active line is underlined. This is the default option.
"dotbox"
The active line is enclosed in a dotted line on all four sides.
"none"
The active line is given no special appearance.
47
Tkinter reference
New Mexico Tech Computer Center

The background color in the listbox.
bg or background
The width of the border around the listbox. Default is two pixels. For pos-
sible values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
The cursor that appears when the mouse is over the listbox. See Section 5.8,
“Cursors” (p. 12).
cursor
The color of the text in the listbox when its state is DISABLED.
disabledforeground
By default, the user may select text with the mouse, and the selected text
will be exported to the clipboard. To disable this behavior, use exportse-
lection=0.
exportselection
The font used for the text in the listbox. See Section 5.4, “Type fonts” (p. 9).
font
The color used for the text in the listbox. See Section 5.3, “Colors” (p. 9).
fg or foreground
Number of lines (not pixels!) shown in the listbox. Default is 10.
height
Color of the focus highlight when the widget does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
Color shown in the focus highlight when the widget has the focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
A StringVar that is connected to the complete list of values in the listbox
(see Section 28, “Control variables: the values behind the widgets” (p. 103).
listvariable
If you call the .get() method of the listvariable, you will get back a
string of the form "('v0', 'v1', ...)", where each vi is the contents
of one line of the listbox.
To change the entire set of lines in the listbox at once, call .set(s) on the
listvariable, where s is a string containing the line values with spaces
between them.
For example, if listCon is a StringVar associated with a listbox's
listvariable option, this call would set the listbox to contain three lines:
listCon.set("ant bee cicada")
This call would return the string "('ant', 'bee', 'cicada')":
listCon.get()
Selects three-dimensional border shading effects. The default is SUNKEN.
For other values, see Section 5.6, “Relief styles” (p. 11).
relief
The background color to use displaying selected text.
selectbackground
The width of the border to use around selected text. The default is that the
selected item is shown in a solid block of color selectbackground; if you
selectborderwidth
increase the selectborderwidth, the entries are moved farther apart
and the selected entry shows RAISED relief (see Section 5.6, “Relief
styles” (p. 11)).
The foreground color to use displaying selected text.
selectforeground
New Mexico Tech Computer Center
Tkinter reference
48

Determines how many items can be selected, and how mouse drags affect
the selection:
selectmode
• BROWSE: Normally, you can only select one line out of a listbox. If you
click on an item and then drag to a different line, the selection will follow
the mouse. This is the default.
• SINGLE: You can only select one line, and you can't drag the
mouse—wherever you click button 1, that line is selected.
• MULTIPLE: You can select any number of lines at once. Clicking on any
line toggles whether or not it is selected.
• EXTENDED: You can select any adjacent group of lines at once by clicking
on the first line and dragging to the last line.
By default, a listbox is in the NORMAL state. To make the listbox unresponsive
to mouse events, set this option to DISABLED.
state
Normally, the focus will tab through listbox widgets. Set this option to 0 to
take the widget out of the sequence. See Section 29, “Focus: routing keyboard
input” (p. 105).
takefocus
The width of the widget in characters (not pixels!). The width is based on
an average character, so some strings of this length in proportional fonts
may not fit. The default is 20.
width
If you want to allow the user to scroll the listbox horizontally, you can link
your listbox widget to a horizontal scrollbar. Set this option to the .set
xscrollcommand
method of the scrollbar. See Section 13.1, “Scrolling a Listbox wid-
get” (p. 51) for more on scrollable listbox widgets.
If you want to allow the user to scroll the listbox vertically, you can link
your listbox widget to a vertical scrollbar. Set this option to the .set
yscrollcommand
method of the scrollbar. See Section 13.1, “Scrolling a Listbox wid-
get” (p. 51).
A special set of index forms is used for many of the methods on listbox objects:
• If you specify an index as an integer, it refers to the line in the listbox with that index, counting from
0.
• Index END refers to the last line in the listbox.
• Index ACTIVE refers to the selected line. If the listbox allows multiple selections, it refers to the line
that was last selected.
• An index string of the form "@x,y" refers to the line closest to coordinate (x,y) relative to the widget's
upper left corner.
Methods on listbox objects include:
.activate ( index )
Selects the line specifies by the given index.
.bbox ( index )
Returns the bounding box of the line specified by index as a 4-tuple (xoffset, yoffset,
width, height), where the upper left pixel of the box is at (xoffset, yoffset) and the
width and height are given in pixels. The returned width value includes only the part of the line
occupied by text.
49
Tkinter reference
New Mexico Tech Computer Center

If the line specified by the index argument is not visible, this method returns None. If it is partially
visible, the returned bounding box may extend outside the visible area.
.curselection()
Returns a tuple containing the line numbers of the selected element or elements, counting from 0.
If nothing is selected, returns an empty tuple.
.delete ( first, last=None )
Deletes the lines whose indices are in the range [first, last], inclusive (contrary to the usual
Python idiom, where deletion stops short of the last index), counting from 0. If the second argument
is omitted, the single line with index first is deleted.
.get ( first, last=None )
Returns a tuple containing the text of the lines with indices from first to last, inclusive. If the
second argument is omitted, returns the text of the line closest to first.
.index ( i )
If possible, positions the visible part of the listbox so that the line containing index i is at the top
of the widget.
.insert ( index, *elements )
Insert one or more new lines into the listbox before the line specified by index. Use END as the first
argument if you want to add new lines to the end of the listbox.
.itemcget(index, option)
Retrieves one of the option values for a specific line in the listbox. For option values, see itemconfig
below. If the given option has not been set for the given line, the returned value will be an empty
string.
.itemconfig(index, option=value, ...)
Change a configuration option for the line specified by index. Option names include:
background
The background color of the given line.
foreground
The text color of the given line.
selectbackground
The background color of the given line when it is selected.
selectforeground
The text color of the given line when it is selected.
.nearest ( y )
Return the index of the visible line closest to the y-coordinate y relative to the listbox widget.
.scan_dragto(x, y)
See scan_mark below.
.scan_mark(x, y)
Use this method to implement scanning—fast steady scrolling—of a listbox. To get this feature,
bind some mouse button event to a handler that calls scan_mark with the current mouse position.
Then bind the <Motion> event to a handler that calls scan_dragto with the current mouse position,
and the listbox will be scrolled at a rate proportional to the distance between the position recorded
by scan_mark and the current position.
.see ( index )
Adjust the position of the listbox so that the line referred to by index is visible.
New Mexico Tech Computer Center
Tkinter reference
50

.selection_anchor ( index )
Place the “selection anchor” on the line selected by the index argument. Once this anchor has been
placed, you can refer to it with the special index form ANCHOR.
For example, for a listbox named lbox, this sequence would select lines 3, 4, and 5:
lbox.selection_anchor(3)
lbox.selection_set(ANCHOR,5)
.selection_clear ( first, last=None )
Unselects all of the lines between indices first and last, inclusive. If the second argument is
omitted, unselects the line with index first.
.selection_includes ( index )
Returns 1 if the line with the given index is selected, else returns 0.
.selection_set ( first, last=None )
Selects all of the lines between indices first and last, inclusive. If the second argument is omitted,
selects the line with index first.
.size()
Returns the number of lines in the listbox.
.xview()
To make the listbox horizontally scrollable, set the command option of the associated horizontal
scrollbar to this method. See Section 13.1, “Scrolling a Listbox widget” (p. 51).
.xview_moveto ( fraction )
Scroll the listbox so that the leftmost fraction of the width of its longest line is outside the left
side of the listbox. Fraction is in the range [0,1].
.xview_scroll ( number, what )
Scrolls the listbox horizontally. For the what argument, use either UNITS to scroll by characters, or
PAGES to scroll by pages, that is, by the width of the listbox. The number argument tells how many
to scroll; negative values move the text to the right within the listbox, positive values leftward.
.yview()
To make the listbox vertically scrollable, set the command option of the associated vertical scrollbar
to this method. See Section 13.1, “Scrolling a Listbox widget” (p. 51).
.yview_moveto ( fraction )
Scroll the listbox so that the top fraction of the width of its longest line is outside the left side of
the listbox. Fraction is in the range [0,1].
.yview_scroll ( number, what )
Scrolls the listbox vertically. For the what argument, use either UNITS to scroll by lines, or PAGES
to scroll by pages, that is, by the height of the listbox. The number argument tells how many to
scroll; negative values move the text downward inside the listbox, and positive values move the
text up.
13.1. Scrolling a Listbox widget
Here is a code fragment illustrating the creation and linking of a listbox to both a horizontal and a ver-
tical scrollbar.
self.yScroll
=
Scrollbar ( self, orient=VERTICAL )
self.yScroll.grid ( row=0, column=1, sticky=N+S )
51
Tkinter reference
New Mexico Tech Computer Center

self.xScroll
=
Scrollbar ( self, orient=HORIZONTAL )
self.xScroll.grid ( row=1, column=0, sticky=E+W )
self.listbox = Listbox ( self,
xscrollcommand=self.xScroll.set,
yscrollcommand=self.yScroll.set )
self.listbox.grid ( row=0, column=0, sticky=N+S+E+W )
self.xScroll["command"]
=
self.listbox.xview
self.yScroll["command"]
=
self.listbox.yview
14.The Menu widget
“Drop-down” menus are a popular way to present the user with a number of choices, yet take up min-
imal space on the face of the application when the user is not making a choice.
• A menubutton is the part that always appears on the application.
• A menu is the list of choices that appears only after the user clicks on the menubutton.
• To select a choice, the user can drag the mouse from the menubutton down onto one of the choices.
Alternatively, they can click and release the menubutton: the choices will appear and stay until the
user clicks one of them.
• The Unix version of Tkinter (at least) supports “tear-off menus.” If you as the designer wish it, a
dotted line will appear above the choices. The user can click on this line to “tear off” the menu: a new,
separate, independent window appears containing the choices.
Refer to Section 15, “The Menubutton widget” (p. 56), below, to see how to create a menubutton and
connect it to a menu widget. First let's look at the Menu widget, which displays the list of choices.
The choices displayed on a menu may be any of these things:
• A simple command: a text string (or image) that the user can select to perform some operation.
• A cascade: a text string or image that the user can select to show another whole menu of choices.
• A checkbutton (see Section 8, “The Checkbutton widget” (p. 36)).
• A group of radiobuttons (see Section 19, “The Radiobutton widget” (p. 63)).
To create a menu widget, you must first have created a Menubutton, which we will call mb:
w = Menu ( mb, option, ... )
This constructor returns the new Menu widget. Options include:
The background color that will appear on a choice when it is under the
mouse. See Section 5.3, “Colors” (p. 9).
activebackground
Specifies the width of a border drawn around a choice when it is under the
mouse. Default is 1 pixel. For possible values, see Section 5.1, “Dimen-
sions” (p. 8).
activeborderwidth
The foreground color that will appear on a choice when it is under the mouse.
activeforeground
The background color for choices not under the mouse.
bg or background
New Mexico Tech Computer Center
Tkinter reference
52

The width of the border around all the choices; see Section 5.1, “Dimen-
sions” (p. 8). The default is one pixel.
bd or borderwidth
The cursor that appears when the mouse is over the choices, but only when
the menu has been torn off. See Section 5.8, “Cursors” (p. 12).
cursor
The color of the text for items whose state is DISABLED.
disabledforeground
The default font for textual choices. See Section 5.4, “Type fonts” (p. 9).
font
The foreground color used for choices not under the mouse.
fg or foreground
You can set this option to a procedure, and that procedure will be called
every time someone brings up this menu.
postcommand
The default 3-D effect for menus is relief=RAISED. For other options, see
Section 5.6, “Relief styles” (p. 11).
relief
Specifies the color displayed in checkbuttons and radiobuttons when they
are selected.
selectcolor
Normally, a menu can be torn off: the first position (position 0) in the list of
choices is occupied by the tear-off element, and the additional choices are
tearoff
added starting at position 1. If you set tearoff=0, the menu will not have
a tear-off feature, and choices will be added starting at position 0.
If you would like your program to be notified when the user clicks on the
tear-off entry in a menu, set this option to your procedure. It will be called
tearoffcommand
with two arguments: the window ID of the parent window, and the window
ID of the new tear-off menu's root window.
Normally, the title of a tear-off menu window will be the same as the text
of the menubutton or cascade that lead to this menu. If you want to change
the title of that window, set the title option to that string.
title
These methods are available on Menu objects. The ones that create choices on the menu have their own
particular options; see Section 14.1, “Menu item creation (coption) options” (p. 55).
.add ( kind, coption, ...)
Add a new element of the given kind as the next available choice in this menu. The kind argument
may be any of "cascade", "checkbutton", "command", "radiobutton", or "separator".
Depending on the kind argument, this method is equivalent to .add_cascade(),
.add_checkbutton(), and so on; refer to those methods below for details.
.add_cascade ( coption, ... )
Add a new cascade element as the next available choice in this menu. Use the menu option in this
call to connect the cascade to the next level's menu, an object of type Menu.
.add_checkbutton ( coption, ... )
Add a new checkbutton as the next available choice in self. The options allow you to set up the
checkbutton much the same way as you would set up a Checkbutton object; see Section 14.1, “Menu
item creation (coption) options” (p. 55).
.add_command ( coption, ... )
Add a new command as the next available choice in self. Use the label, bitmap, or image option
to place text or an image on the menu; use the command option to connect this choice to a procedure
that will be called when this choice is picked.
53
Tkinter reference
New Mexico Tech Computer Center

.add_radiobutton ( coption, ... )
Add a new radiobutton as the next available choice in self. The options allow you to set up the ra-
diobutton in much the same way as you would set up a Radiobutton object; see Section 19, “The
Radiobutton widget” (p. 63).
.add_separator()
Add a separator after the last currently defined option. This is just a ruled horizontal line you can
use to set off groups of choices. Separators are counted as choices, so if you already have three
choices, and you add a separator, the separator will occupy position 3 (counting from 0).
.delete ( index1, index2=None )
This method deletes the choices numbered from index1 through index2, inclusive. To delete one
choice, omit the index2 argument. You can't use this method to delete a tear-off choice, but you
can do that by setting the menu object's tearoff option to 0.
.entrycget ( index, coption )
To retrieve the current value of some coption for a choice, call this method with index set to the
index of that choice and coption set to the name of the desired option.
.entryconfigure ( index, coption, ... )
To change the current value of some coption for a choice, call this method with index set to the
index of that choice and one or more coption=value arguments.
.index ( i )
Returns the position of the choice specified by index i. For example, you can use .index(END)
to find the index of the last choice (or None if there are no choices).
.insert_cascade ( index, coption, ... )
Inserts a new cascade at the position given by index, counting from 0. Any choices after that position
move down one. The options are the same as for .add_cascade(), above.
.insert_checkbutton ( index, coption, ... )
Insert a new checkbutton at the position specified by index. Options are the same as for
.add_checkbutton(), above.
.insert_command ( index, coption, ... )
Insert a new command at position index. Options are the same as for .add_command(), above.
.insert_radiobutton ( index, coption, ... )
Insert a new radiobutton at position index. Options are the same as for .add_radiobutton(),
above.
.insert_separator ( index )
Insert a new separator at the position specified by index.
.invoke ( index )
Calls the command callback associated with the choice at position index. If a checkbutton, its state
is toggled between set and cleared; if a radiobutton, that choice is set.
.post(x, y)
Display this menu at position (x, y) relative to the root window.
.type ( index )
Returns the type of the choice specified by index: either "cascade", "checkbutton", "command",
"radiobutton", "separator", or "tearoff".
.yposition ( n )
For the nth menu choice, return the vertical offset in pixels relative to the menu's top. The purpose
of this method is to allow you to place a popup menu precisely relative to the current mouse position.
New Mexico Tech Computer Center
Tkinter reference
54

14.1. Menu item creation (coption) options
Wherever the menu methods described above allow a coption, you may apply a value to any of the
option names below by using the option name as a keyword argument with the desired value. For ex-
ample, to make a command's text appear with red letters, use “foreground='red'” as an option to
the add_command method call.
To display an “accelerator” keystroke combination on the right side of a
menu choice, use the option “accelerator=s” where s is a string containing
accelerator
the characters to be displayed. For example, to indicate that a command has
Control-X as its accelerator, use the option “accelerator='^X'”. Note that
this option does not actually implement the accelerator; use a keystroke binding
to do that.
The background color used for choices when they are under the mouse.
activebackground
The foreground color used for choices when they are under the mouse.
activeforeground
The background color used for choices when they are not under the mouse. Note
that this cannot be abbreviated as bg.
background
Display a bitmap for this choice; see Section 5.7, “Bitmaps” (p. 12).
bitmap
Normally all the choices are displayed in one long column. If you set column-
break=1, this choice will start a new column to the right of the one containing
the previous choice.
columnbreak
Use option “columnbreak=True” to start a new column of choices with this
choice.
columnbreak
A procedure to be called when this choice is activated.
command
If you want to display both text and a graphic (either a bitmap or an image) on
a menu choice, use this coption to specify the location of the graphic relative
compound
to the text. Values may be any of LEFT, RIGHT, TOP, BOTTOM, CENTER, or NONE.
For example, a value of “compound=TOP” would position the graphic above
the text.
The font used to render the label text. See Section 5.4, “Type fonts” (p. 9)
font
The foreground color used for choices when they are not under the mouse. Note
that this cannot be abbreviated as fg.
foreground
By default, a small margin separates adjacent choices in a menu. Use the coption
“hidemargin=True” to suppress this margin. For example, if your choices are
hidemargin
color swatches on a palette, this option will make the swatches touch without
any other intervening color.
Display an image for this choice; see Section 5.9, “Images” (p. 13).
image
The text string to appear for this choice.
label
This option is used only for cascade choices. Set it to a Menu object that displays
the next level of choices.
menu
Normally, the control variable for a checkbutton is set to 0 when the checkbutton
is off. You can change the off value by setting this option to the desired value.
See Section 28, “Control variables: the values behind the widgets” (p. 103).
offvalue
Normally, the control variable for a checkbutton is set to 1 when the checkbutton
is on. You can change the on value by setting this option to the desired value.
onvalue
55
Tkinter reference
New Mexico Tech Computer Center

Normally, the color displayed in a set checkbutton or radiobutton is red. Change
that color by setting this option to the color you want; see Section 5.3, “Col-
ors” (p. 9).
selectcolor
If you are using the image option to display a graphic instead of text on a menu
radiobutton or checkbutton, if you use selectimage=I, image I will be dis-
played when the item is selected.
selectimage
Normally, all choices react to mouse clicks, but you can set state=DISABLED
to gray it out and make it unresponsive. This coption will be ACTIVE when
the mouse is over the choice.
state
Normally none of the letters in the label are underlined. Set this option to the
index of a letter to underline that letter.
underline
Specifies the value of the associated control variable (see Section 28, “Control
variables: the values behind the widgets” (p. 103)) for a radiobutton. This can be
value
an integer if the control variable is an IntVar, or a string if the control variable
is a StringVar.
For checkbuttons or radiobuttons, this option should be set to the control variable
associated with the checkbutton or group of radiobuttons. See Section 28,
“Control variables: the values behind the widgets” (p. 103).
variable
15.The Menubutton widget
A menubutton is the part of a drop-down menu that stays on the screen all the time. Every menubutton
is associated with a Menu widget (see above) that can display the choices for that menubutton when
the user clicks on it.
To create a menubutton within a root window or frame parent:
w = Menubutton ( parent, option, ... )
The constructor returns the new Menubutton widget. Options:
The background color when the mouse is over the menubutton. See Sec-
tion 5.3, “Colors” (p. 9).
activebackground
The foreground color when the mouse is over the menubutton.
activeforeground
This options controls where the text is positioned if the widget has more
space than the text needs. The default is anchor=CENTER, which centers
anchor
the text. For other options, see Section 5.5, “Anchors” (p. 11). For example,
if you use anchor=W, the text would be centered against the left side of the
widget.
The background color when the mouse is not over the menubutton.
bg or background
To display a bitmap on the menubutton, set this option to a bitmap name;
see Section 5.7, “Bitmaps” (p. 12).
bitmap
Width of the border around the menubutton. Default is two pixels. For
possible values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
If you specify both text and a graphic (either a bitmap or an image), this
option specifies where the graphic appears relative to the text. Possible
compound
values are NONE (the default value), TOP, BOTTOM, LEFT, RIGHT, and
CENTER. For example, compound=RIGHT would position the graphic to
New Mexico Tech Computer Center
Tkinter reference
56

the right of the text. If you specify compound=NONE, the graphic is displayed
but the text (if any) is not.
The cursor that appears when the mouse is over this menubutton. See Sec-
tion 5.8, “Cursors” (p. 12).
cursor
Normally, the menu will appear below the menubutton. Set direc-
tion=LEFT to display the menu to the left of the button; use direc-
direction
tion=RIGHT to display the menu to the right of the button; or use direc-
tion='above' to place the menu above the button.
The foreground color shown on this menubutton when it is disabled.
disabledforeground
The foreground color when the mouse is not over the menubutton.
fg or foreground
Specifies the font used to display the text; see Section 5.4, “Type
fonts” (p. 9).
font
The height of the menubutton in lines of text (not pixels!). The default is to
fit the menubutton's size to its contents.
height
Color of the focus highlight when the widget does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
Color shown in the focus highlight when the widget has the focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
To display an image on this menubutton, set this option to the image object.
See Section 5.9, “Images” (p. 13).
image
This option controls where the text is located when the text doesn't fill the
menubutton: use justify=LEFT to left-justify the text (this is the default);
use justify=CENTER to center it, or justify=RIGHT to right-justify.
justify
To associate the menubutton with a set of choices, set this option to the
Menu object containing those choices. That menu object must have been
menu
created by passing the associated menubutton to the constructor as its first
argument. See below for an example showing how to associate a
menubutton and menu.
How much space to leave to the left and right of the text of the menubutton.
Default is 1.
padx
How much space to leave above and below the text of the menubutton.
Default is 1.
pady
Normally, menubuttons will have RAISED appearance. For other 3-d effects,
see Section 5.6, “Relief styles” (p. 11).
relief
Normally, menubuttons respond to the mouse. Set state=DISABLED to
gray out the menubutton and make it unresponsive.
state
Normally, menubuttons do not take keyboard focus (see Section 29, “Focus:
routing keyboard input” (p. 105)). Use takefocus=True to add the
menubutton to the focus traversal order.
takefocus
To display text on the menubutton, set this option to the string containing
the desired text. Newlines ("\n") within the string will cause line breaks.
text
You can associate a control variable of class StringVar with this
menubutton. Setting that control variable will change the displayed text.
See Section 28, “Control variables: the values behind the widgets” (p. 103).
textvariable
57
Tkinter reference
New Mexico Tech Computer Center

Normally, no underline appears under the text on the menubutton. To un-
derline one of the characters, set this option to the index of that character.
underline
Width of the menubutton in characters (not pixels!). If this option is not set,
the label will be sized to fit its contents.
width
Normally, lines are not wrapped. You can set this option to a number of
characters and all lines will be broken into pieces no longer than that
number.
wraplength
Here is a brief example showing the creation of a menubutton and its associated menu with two
checkboxes:
self.mb
=
Menubutton ( self, text="condiments",
relief=RAISED )
self.mb.grid()
self.mb.menu
=
Menu ( self.mb, tearoff=0 )
self.mb["menu"]
=
self.mb.menu
self.mayoVar
= IntVar()
self.ketchVar = IntVar()
self.mb.menu.add_checkbutton ( label="mayo",
variable=self.mayoVar )
self.mb.menu.add_checkbutton ( label="ketchup",
variable=self.ketchVar )
This example creates a menubutton labeled condiments. When clicked, two checkbuttons labeled
mayo and ketchup will drop down.
16.The Message widget
This widget is similar to the Label widget (see Section 11, “The Label widget” (p. 44)), but it is intended
for displaying messages over multiple lines. All the text will be displayed in the same font; if you need
to display text with more than one font, see Section 23, “The Text widget” (p. 77).
To create a new Message widget as the child of a root window or frame named parent:
w = Message ( parent, option, ... )
This constructor returns the new Message widget. Options may be any of these:
Use this option to specify the ratio of width to height as a percentage. For
example, aspect=100 would give you a text message fit into a square;
aspect
with aspect=200, the text area would be twice as wide as high. The default
value is 150, that is, the text will be fit into a box 50% wider than it is high.
The background color behind the text; see Section 5.3, “Colors” (p. 9).
bg or background
Width of the border around the widget; see Section 5.1, “Dimen-
sions” (p. 8). The default is two pixels. This option is visible only when
the relief option is not FLAT.
bd or borderwidth
Specifies the cursor that appears when the mouse is over the widget; see
Section 5.8, “Cursors” (p. 12).
cursor
New Mexico Tech Computer Center
Tkinter reference
58

Specifies the font used to display the text in the widget; see Section 5.4,
“Type fonts” (p. 9).
font
Specifies the text color; see Section 5.3, “Colors” (p. 9).
fg or foreground
Color of the focus highlight when the widget does not have focus. See Sec-
tion 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
Color shown in the focus highlight when the widget has the focus.
highlightcolor
Thickness of the focus highlight.
highlightthickness
Use this option to specify how multiple lines of text are aligned. Use jus-
tify=LEFT to get a straight left margin; justify=CENTER to center each
line; and justify=RIGHT to get a straight right margin.
justify
Use this option to add extra space inside the widget to the left and right of
the text. The value is in pixels.
padx
Use this option to add extra space inside the widget above and below the
text. The value is in pixels.
pady
This option specifies the appearance of the border around the outside of
the widget; see Section 5.6, “Relief styles” (p. 11). The default style is FLAT.
relief
Normally, a Message widget will not acquire focus (see Section 29, “Focus:
routing keyboard input” (p. 105)). Use takefocus=True to add the widget
to the focus traversal list.
takefocus
The value of this option is the text to be displayed inside the widget.
text
If you would like to be able to change the message under program control,
associate this option with a StringVar instance (see Section 28, “Control
textvariable
variables: the values behind the widgets” (p. 103)). The value of this variable
is the text to be displayed. If you specify both text and textvariable
options, the text option is ignored.
Use this option to specify the width of the text area in the widget, in pixels.
The default width depends on the displayed text and the value of the as-
pect option.
width
17.The OptionMenu widget
The purpose of this widget is to offer a fixed set of choices to the user in a drop-down menu.
The illustrations above shows an OptionMenu in two states. The left-hand example shows the widget
in its initial form. The right-hand example shows how it looks when the mouse has clicked on it and
dragged down to the "boat" choice.
59
Tkinter reference
New Mexico Tech Computer Center

To create a new OptionMenu widget as the child of a root window or frame named parent:
w = OptionMenu ( parent, variable, choice1, choice2, ... )
This constructor returns the new OptionMenu widget. The variable is a StringVar instance (see
Section 28, “Control variables: the values behind the widgets” (p. 103)) that is associated with the widget,
and the remaining arguments are the choices to be displayed in the widget as strings.
The illustration above was created with this code snippet:
optionList = ("train", "plane", "boat")
self.v = StringVar()
self.v.set(optionList[0])
self.om = OptionMenu ( self, self.v, *optionList )
To find out which choice is currently selected in an OptionMenu widget, the .get() method on the
associated control variable will return that choice as a string.
18.The PanedWindow widget
The purpose of the PanedWindow widget is to give the application's user some control over how space
is divided up within the application.
A PanedWindow is somewhat like a Frame: it is a container for child widgets. Each PanedWindow
widget contains a horizontal or vertical stack of child widgets. Using the mouse, the user can drag the
boundaries between the child widgets back and forth.
• You may choose to display handles within the widget. A handle is a small square that the user can
drag with the mouse.
• You may choose to make sashes visible. A sash is a bar placed between the child widgets.
• A pane is the area occupied by one child widget.
To create a new PanedWindow widget as the child of a root window or frame named parent:
w = PanedWindow ( parent, option, ... )
This constructor returns the new PanedWindow widget. Here are the options:
New Mexico Tech Computer Center
Tkinter reference
60

The background color displayed behind the child widgets; see Section 5.3,
“Colors” (p. 9).
bg or background
Width of the border around the outside of the widget; see Section 5.1, “Dimen-
sions” (p. 8). The default is two pixels.
bd or borderwidth
The cursor to be displayed when the mouse is over the widget; see Section 5.8,
“Cursors” (p. 12).
cursor
Use this option to specify the distance between the handle and the end of the
sash. For orient=VERTICAL, this is the distance between the left end of the
handlepad
sash and the handle; for orient=HORIZONTAL, it is the distance between the
top of the sash and the handle. The default value is eight pixels; for other values,
see Section 5.1, “Dimensions” (p. 8).
Use this option to specify the size of the handle, which is always a square; see
Section 5.1, “Dimensions” (p. 8). The default value is eight pixels.
handlesize
Specifies the height of the widget; see Section 5.1, “Dimensions” (p. 8). If you
don't specify this option, the height is determined by the height of the child
widgets.
height
This option controls how a resizing operation works. For the default value,
opaqueresize=True, the resizing is done continuously as the sash is dragged.
opaqueresize
If this option is set to False, the sash (and adjacent child widgets) stays put
until the user releases the mouse button, and then it jumps to the new position.
To stack child widgets horizontally, use orient=HORIZONTAL. To stack them
vertically, use orient=VERTICAL.
orient
Selects the relief style of the border around the widget; see Section 5.6, “Relief
styles” (p. 11). The default is FLAT.
relief
Use this option to allocate extra space on either side of each sash. The default
is zero; for other values, see Section 5.1, “Dimensions” (p. 8).
sashpad
This option specifies the relief style used to render the sashes; see Section 5.6,
“Relief styles” (p. 11). The default style is FLAT.
sashrelief
Specifies the width of the sash; see Section 5.1, “Dimensions” (p. 8). The default
width is two pixels.
sashwidth
Use showhandle=True to display the handles. For the default value, False,
the user can still use the mouse to move the sashes. The handle is simply a
visual cue.
showhandle
Width of the widget; see Section 5.1, “Dimensions” (p. 8). If you don't specify
a value, the width will be determined by the sizes of the child widgets.
width
To add child widgets to a PanedWindow, create the child widgets as children of the parent PanedWindow,
but rather than using the .grid() method to register them, use the .add() method on the PanedWin-
dow.
Here are the methods on PanedWindow widgets.
.add ( child[, option=value] ... )
Use this method to add the given child widget as the next child of this PanedWindow. First create
the child widget with the PanedWindow as its parent widget, but do not call the .grid()
method to register it. Then call .add(child) and the child will appear inside the PanedWindow
in the next available position.
61
Tkinter reference
New Mexico Tech Computer Center

Associated with each child is a set of configuration options that control its position and appearance.
See Section 18.1, “PanedWindow child configuration options” (p. 62). You can supply these config-
uration options as keyword arguments to the .add() method. You can also set or change their
values anytime with the .paneconfig() method, or retrieve the current value of any of these
options using the .panecget() method; these methods are described below.
.forget ( child )
Removes a child widget.
.identify ( x, y
For a given location (x, y) in window coordinates, this method returns a value that describes the
feature at that location.
• If the feature is a child window, the method returns an empty string.
• If the feature is a sash, the method returns a tuple (n, 'sash') where n is 0 for the first sash,
1 for the second, and so on.
• If the feature is a handle, the method returns a tuple (n, 'handle') where n is 0 for the first
handle, 1 for the second, and so on.
.panecget ( child, option
This method retrieves the value of a child widget configuration option, where child is the child
widget and option is the name of the option as a string. For the list of child widget configuration
options, see Section 18.1, “PanedWindow child configuration options” (p. 62).
.paneconfig ( child, option=value, ... )
Use this method to configure options for child widgets. The options are described in Section 18.1,
“PanedWindow child configuration options” (p. 62).
.panes()
This method returns a list of the child widgets, in order from left to right (for orient=HORIZONTAL)
or top to bottom (for orient-VERTICAL).
.remove ( child )
Removes the given child; this is the same action as the .forget() method.
.sash_coord ( index )
This method returns the location of a sash. The index argument selects the sash: 0 for the sash
between the first two children, 1 for the sash between the second and third child, and so forth. The
result is a tuple (x, y) containing the coordinates of the upper left corner of the sash.
.sash_place ( index, x, y )
Use this method to reposition the sash selected by index (0 for the first sash, and so on). The x and
y coordinates specify the desired new position of the upper left corner of the sash. Tkinter ignores
the coordinate orthogonal to the orientation of the widget: use the x value to reposition the sash
for orient=HORIZONTAL, and use the y coordinate to move the sash for option orient=VERTICAL.
18.1. PanedWindow child configuration options
Each child of a PanedWindow has a set of configuration options that control its position and appearance.
These options can be provided when a child is added with the .add() method, or set with the .pan-
econfig() method, or queried with the .panecget() methods described above.
Normally, when you .add() a new child to a PanedWindow, the new child is added after
any existing child widgets. You may instead use the after=w option to insert the new
widget at a position just after an existing child widget w.
after
New Mexico Tech Computer Center
Tkinter reference
62

When used as option before=w in a call to the .add() method, places the new widget at
a position just before an existing child widget w.
before
This option specifies the desired height of the child widget; see Section 5.1, “Dimen-
sions” (p. 8).
height
Use this option to specify a minimum size for the child widget in the direction of the
PanedWindow's orientation. For orient=HORIZONTAL, this is the minimum width; for
minsize
orient=VERTICAL, it is the minimum height. For permissible values, see Section 5.1,
“Dimensions” (p. 8).
The amount of extra space to be added to the left and right of the child widget; see Sec-
tion 5.1, “Dimensions” (p. 8).
padx
The amount of extra space to be added above and below the child widget; see Section 5.1,
“Dimensions” (p. 8).
pady
This option functions like the sticky argument to the .grid() method; see Section 4.1,
“The .grid() method” (p. 5). It specifies how to position a child widget if the pane is
sticky
larger than the widget. For example, sticky=NW would position the widget in the upper
left (“northwest”) corner of the pane.
Desired width of the child widget; see Section 5.1, “Dimensions” (p. 8).
width
19.The Radiobutton widget
Radiobuttons are sets of related widgets that allow the user to select only one of a set of choices. Each
radiobutton consists of two parts, the indicator and the label:
• The indicator is the diamond-shaped part that turns red in the selected item.
• The label is the text, although you can use an image or bitmap as the label.
• If you prefer, you can dispense with the indicator. This makes the radiobuttons look like “push-push”
buttons, with the selected entry appearing sunken and the rest appearing raised.
• To form several radiobuttons into a functional group, create a single control variable (see Section 28,
“Control variables: the values behind the widgets” (p. 103), below), and set the variable option of
each radiobutton to that variable.
The control variable can be either an IntVar or a StringVar. If two or more radiobuttons share the
same control variable, setting any of them will clear the others.
• Each radiobutton in a group must have a unique value option of the same type as the control variable.
For example, a group of three radiobuttons might share an IntVar and have values of 0, 1, and 99.
Or you can use a StringVar control variable and give the radiobuttons value options like "too
hot", "too cold", and "just right".
To create a new radiobutton widget as the child of a root window or frame named parent:
w = Radiobutton ( parent, option, ...
)
This constructor returns the new Radiobutton widget. Options:
63
Tkinter reference
New Mexico Tech Computer Center

The background color when the mouse is over the radiobutton. See Sec-
tion 5.3, “Colors” (p. 9).
activebackground
The foreground color when the mouse is over the radiobutton.
activeforeground
If the widget inhabits a space larger than it needs, this option specifies
where the radiobutton will sit in that space. The default is anchor=CENTER.
anchor
For other positioning options, see Section 5.5, “Anchors” (p. 11). For ex-
ample, if you set anchor=NE, the radiobutton will be placed in the top
right corner of the available space.
The normal background color behind the indicator and label.
bg or background
To display a monochrome image on a radiobutton, set this option to a bit-
map; see Section 5.7, “Bitmaps” (p. 12).
bitmap
The size of the border around the indicator part itself. Default is two pixels.
For possible values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
A procedure to be called every time the user changes the state of this radi-
obutton.
command
If you specify both text and a graphic (either a bitmap or an image), this
option specifies where the graphic appears relative to the text. Possible
compound
values are NONE (the default value), TOP, BOTTOM, LEFT, RIGHT, and
CENTER. For example, compound=BOTTOM would position the graphic
below the text. If you specify compound=NONE, the graphic is displayed
but the text (if any) is not.
If you set this option to a cursor name (see Section 5.8, “Cursors” (p. 12)),
the mouse cursor will change to that pattern when it is over the radiobutton.
cursor
The foreground color used to render the text of a disabled radiobutton. The
default is a stippled version of the default foreground color.
disabledforeground
The font used for the text. See Section 5.4, “Type fonts” (p. 9).
font
The color used to render the text.
fg or foreground
The number of lines (not pixels) of text on the radiobutton. Default is 1.
height
The color of the focus highlight when the radiobutton does not have focus.
See Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the radiobutton has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set highlightthick-
ness=0 to suppress display of the focus highlight.
highlightthickness
To display a graphic image instead of text for this radiobutton, set this option
to an image object. See Section 5.9, “Images” (p. 13). The image appears
when the radiobutton is not selected; compare selectimage, below.
image
Normally a radiobutton displays its indicator. If you set this option to zero,
the indicator disappears, and the entire widget becomes a “push-push”
indicatoron
button that looks raised when it is cleared and sunken when it is set. You
may want to increase the borderwidth value to make it easier to see the
state of such a control.
If the text contains multiple lines, this option controls how the text is jus-
tified: CENTER (the default), LEFT, or RIGHT.
justify
If you suppress the indicator by asserting indicatoron=False, the of-
frelief option specifies the relief style to be displayed when the radiobut-
ton is not selected. The default values is RAISED.
offrelief
New Mexico Tech Computer Center
Tkinter reference
64

Specifies the relief style to be displayed when the mouse is over the radi-
obutton.
overrelief
How much space to leave to the left and right of the radiobutton and text.
Default is 1.
padx
How much space to leave above and below the radiobutton and text. Default
is 1.
pady
By default, a radiobutton will have FLAT relief, so it doesn't stand out from
its background. See Section 5.6, “Relief styles” (p. 11) for more 3-d effect
relief
options. You can also use relief=SOLID, which displays a solid black
frame around the radiobutton.
The color of the radiobutton when it is set. Default is red.
selectcolor
If you are using the image option to display a graphic instead of text when
the radiobutton is cleared, you can set the selectimage option to a differ-
selectimage
ent image that will be displayed when the radiobutton is set. See Section 5.9,
“Images” (p. 13).
The default is state=NORMAL, but you can set state=DISABLED to gray
out the control and make it unresponsive. If the cursor is currently over the
radiobutton, the state is ACTIVE.
state
By default, the input focus (see Section 29, “Focus: routing keyboard in-
put” (p. 105)) will pass through a radiobutton. If you set takefocus=0,
focus will not visit this radiobutton.
takefocus
The label displayed next to the radiobutton. Use newlines ("\n") to display
multiple lines of text.
text
If you need to change the label on a radiobutton during execution, create
a StringVar (see Section 28, “Control variables: the values behind the
textvariable
widgets” (p. 103)) to manage the current value, and set this option to that
control variable. Whenever the control variable's value changes, the radi-
obutton's annotation will automatically change to that text as well.
With the default value of -1, none of the characters of the text label are un-
derlined. Set this option to the index of a character in the text (counting
from zero) to underline that character.
underline
When a radiobutton is turned on by the user, its control variable is set to
its current value option. If the control variable is an IntVar, give each
value
radiobutton in the group a different integer value option. If the control
variable is a StringVar, give each radiobutton a different string value
option.
The control variable that this radiobutton shares with the other radiobuttons
in the group; see Section 28, “Control variables: the values behind the
widgets” (p. 103). This can be either an IntVar or a StringVar.
variable
The default width of a radiobutton is determined by the size of the displayed
image or text. You can set this option to a number of characters (not pixels)
and the radiobutton will always have room for that many characters.
width
Normally, lines are not wrapped. You can set this option to a number of
characters and all lines will be broken into pieces no longer than that
number.
wraplength
Methods on radiobutton objects include:
65
Tkinter reference
New Mexico Tech Computer Center

.deselect()
Clears (turns off) the radiobutton.
.flash()
Flashes the radiobutton a few times between its active and normal colors, but leaves it the way it
started.
.invoke()
You can call this method to get the same actions that would occur if the user clicked on the radiobut-
ton to change its state.
.select()
Sets (turns on) the radiobutton.
20.The Scale widget
The purpose of a scale widget is to allow the user to set some integer or float value within a specified
range. Here are two scale widgets, one horizontal and one vertical:
Each scale displays a slider that the user can drag along a trough to change the value. In the figure, the
first slider is currently at -0.38 and the second at 7.
• You can drag the slider to a new value with mouse button 1.
• If you click button 1 in the trough, the slider will move one increment in that direction per click.
Holding down button 1 in the trough will, after a delay, start to auto-repeat its function.
• If the scale has keyboard focus, left arrow and up arrow keystrokes will move the slider up (for ver-
tical scales) or left (for horizontal scales). Right arrow and down arrow keystrokes will move the
slider down or to the right.
To create a new scale widget as the child of a root window or frame named parent:
w = Scale ( parent, option, ... )
The constructor returns the new Scale widget. Options:
The color of the slider when the mouse is over it. See Section 5.3, “Col-
ors” (p. 9).
activebackground
The background color of the parts of the widget that are outside the trough.
bg or background
Width of the 3-d border around the trough and slider. Default is two pixels.
For acceptable values, see Section 5.1, “Dimensions” (p. 8).
bd or borderwidth
A procedure to be called every time the slider is moved. This procedure
will be passed one argument, the new scale value. If the slider is moved
command
New Mexico Tech Computer Center
Tkinter reference
66

rapidly, you may not get a callback for every possible position, but you'll
certainly get a callback when it settles.
The cursor that appears when the mouse is over the scale. See Section 5.8,
“Cursors” (p. 12).
cursor
The way your program reads the current value shown in a scale widget is
through a control variable; see Section 28, “Control variables: the values
digits
behind the widgets” (p. 103). The control variable for a scale can be an In-
tVar, a DoubleVar (float), or a StringVar. If it is a string variable, the
digits option controls how many digits to use when the numeric scale
value is converted to a string.
The font used for the label and annotations. See Section 5.4, “Type
fonts” (p. 9).
font
The color of the text used for the label and annotations.
fg or foreground
A float or integer value that defines one end of the scale's range. For vertical
scales, this is the top end; for horizontal scales, the left end. The underbar
from_
(_) is not a typo: because from is a reserved word in Python, this option is
spelled from_. The default is 0. See the to option, below, for the other end
of the range.
The color of the focus highlight when the scale does not have focus. See
Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the scale has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set highlightthick-
ness=0 to suppress display of the focus highlight.
highlightthickness
You can display a label within the scale widget by setting this option to the
label's text. The label appears in the top left corner if the scale is horizontal,
or the top right corner if vertical. The default is no label.
label
The length of the scale widget. This is the x dimension if the scale is hori-
zontal, or the y dimension if vertical. The default is 100 pixels. For allowable
values, see Section 5.1, “Dimensions” (p. 8).
length
Set orient=HORIZONTAL if you want the scale to run along the x dimen-
sion, or orient=VERTICAL to run parallel to the y-axis. Default is vertical.
orient
With the default relief=FLAT, the scale does not stand out from its
background. You may also use relief=SOLID to get a solid black frame
relief
around the scale, or any of the other relief types described in Section 5.6,
“Relief styles” (p. 11).
This option controls how long button 1 has to be held down in the trough
before the slider starts moving in that direction repeatedly. Default is re-
peatdelay=300, and the units are milliseconds.
repeatdelay
This option controls how often the slider jumps once button 1 has been held
down in the trough for at least repeatdelay milliseconds. For example,
repeatinterval=100 would jump the slider every 100 milliseconds.
repeatinterval
Normally, the user will only be able to change the scale in whole units. Set
this option to some other value to change the smallest increment of the
resolution
scale's value. For example, if from_=-1.0 and to=1.0, and you set res-
olution=0.5, the scale will have 5 possible values: -1.0, -0.5, 0.0, +0.5, and
+1.0. All smaller movements will be ignored. Use resolution=-1 to dis-
able any rounding of values.
67
Tkinter reference
New Mexico Tech Computer Center

Normally, the current value of the scale is displayed in text form by the
slider (above it for horizontal scales, to the left for vertical scales). Set this
option to 0 to suppress that label.
showvalue
Normally the slider is 30 pixels along the length of the scale. You can change
that length by setting the sliderlength option to your desired length;
see Section 5.1, “Dimensions” (p. 8).
sliderlength
By default, the slider is displayed with a RAISED relief style. For other relief
styles, set this option to any of the values described in Section 5.6, “Relief
styles” (p. 11).
sliderrelief
Normally, scale widgets respond to mouse events, and when they have the
focus, also keyboard events. Set state=DISABLED to make the widget
unresponsive.
state
Normally, the focus will cycle through scale widgets. Set this option to 0 if
you don't want this behavior. See Section 29, “Focus: routing keyboard in-
put” (p. 105).
takefocus
Normally, no “ticks” are displayed along the scale. To display periodic
scale values, set this option to a number, and ticks will be displayed on
tickinterval
multiples of that value. For example, if from_=0.0, to=1.0, and tickin-
terval=0.25, labels will be displayed along the scale at values 0.0, 0.25,
0.50, 0.75, and 1.00. These labels appear below the scale if horizontal, to its
left if vertical. Default is 0, which suppresses display of ticks.
A float or integer value that defines one end of the scale's range; the other
end is defined by the from_ option, discussed above. The to value can be
to
either greater than or less than the from_ value. For vertical scales, the to
value defines the bottom of the scale; for horizontal scales, the right end.
The default value is 100.
The color of the trough.
troughcolor
The control variable for this scale, if any; see Section 28, “Control variables:
the values behind the widgets” (p. 103). Control variables may be from class
variable
IntVar, DoubleVar (float), or StringVar. In the latter case, the numer-
ical value will be converted to a string. See the the digits option, above,
for more information on this conversion.
The width of the trough part of the widget. This is the x dimension for
vertical scales and the y dimension if the scale has orient=HORIZONTAL.
Default is 15 pixels.
width
Scale objects have these methods:
.coords ( value=None )
Returns the coordinates, relative to the upper left corner of the widget, corresponding to a given
value of the scale. For value=None, you get the coordinates of the center of the slider at its current
position. To find where the slider would be if the scale's value were set to some value x, use value=x.
.get()
This method returns the current value of the scale.
.identify ( x, y )
Given a pair of coordinates (x, y) relative to the top left corner of the widget, this method returns
a string identifying what functional part of the widget is at that location. The return value may be
any of these:
New Mexico Tech Computer Center
Tkinter reference
68

The slider.
"slider"
For horizontal scales, to the left of the slider; for vertical scales, above the slider.
"trough1"
For horizontal scales, to the right of the slider; for vertical scales, below the slider.
"trough2"
Position (x, y) is not on any of the above parts.
""
.set ( value )
Sets the scale's value.
21.The Scrollbar widget
A number of widgets, such as listboxes and canvases, can act like sliding windows into a larger virtual
area. You can connect scrollbar widgets to them to give the user a way to slide the view around relative
to the contents. Here's a screen shot of an entry widget with an associated scrollbar widget:
• Scrollbars can be horizontal, like the one shown above, or vertical. A widget that has two scrollable
dimensions, such as a canvas or listbox, can have both a horizontal and a vertical scrollbar.
• The slider, or scroll thumb, is the raised-looking rectangle that shows the current scroll position.
• The two triangular arrowheads at each end are used for moving the position by small steps. The one
on the left or top is called arrow1, and the one on the right or bottom is called arrow2.
• The trough is the sunken-looking area visible behind the arrowheads and slider. The trough is divided
into two areas named trough1 (above or to the left of the slider) and trough2 (below or to the right
of the slider).
• The slider's size and position, relative to the length of the entire widget, show the size and position
of the view relative to its total size. For example, if a vertical scrollbar is associated with a listbox, and
its slider extends from 50% to 75% of the height of the scrollbar, that means that the visible part of
the listbox shows that portion of the overall list starting at the halfway mark and ending at the three-
quarter mark.
• In a horizontal scrollbar, clicking B1 (button 1) on the left arrowhead moves the view by a small
amount to the left. Clicking B1 on the right arrowhead moves the view by that amount to the right.
For a vertical scrollbar, clicking the upward- and downward-pointing arrowheads moves the view
small amounts up or down. Refer to the discussion of the associated widget to find out the exact
amount that these actions move the view.
• The user can drag the slider with B1 or B2 (the middle button) to move the view.
• For a horizontal scrollbar, clicking B1 in the trough to the left of the slider moves the view left by a
page, and clicking B1 in the trough to the right of the slider moves the view a page to the right. For
a vertical scrollbar, the corresponding actions move the view a page up or down.
• Clicking B2 anywhere along the trough moves the slider so that its left or top end is at the mouse, or
as close to it as possible.
The normalized position of the scrollbar refers to a number in the closed interval [0.0, 1.0] that defines the
slider's position. For vertical scrollbars, position 0.0 is at the top and 1.0 at the bottom; for horizontal
scrollbars, position 0.0 is at the left end and 1.0 at the right.
To create a new Scrollbar widget as the child of a root window or frame parent:
69
Tkinter reference
New Mexico Tech Computer Center

w = Scrollbar ( parent, option, ... )
The constructor returns the new Scrollbar widget. Options for scrollbars include:
The color of the slider and arrowheads when the mouse is over them. See
Section 5.3, “Colors” (p. 9).
activebackground
By default, the slider is shown with the RAISED relief style. To display the
slider with a different relief style when the mouse is over the slider.
activerelief
The color of the slider and arrowheads when the mouse is not over them.
bg or background
The width of the 3-d borders around the entire perimeter of the trough, and
also the width of the 3-d effects on the arrowheads and slider. Default is
bd or borderwidth
no border around the trough, and a two-pixel border around the arrowheads
and slider. For possible values, see Section 5.1, “Dimensions” (p. 8).
A procedure to be called whenever the scrollbar is moved. For a discussion
of the calling sequence, see Section 21.1, “The Scrollbar command call-
back” (p. 71).
command
The cursor that appears when the mouse is over the scrollbar. See Section 5.8,
“Cursors” (p. 12).
cursor
The width of the borders around the arrowheads and slider. The default is
elementborderwidth=-1, which means to use the value of the border-
width option.
elementborderwidth
The color of the focus highlight when the scrollbar does not have focus. See
Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the scrollbar has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set to 0 to suppress display
of the focus highlight.
highlightthickness
This option controls what happens when a user drags the slider. Normally
(jump=0), every small drag of the slider causes the command callback to
jump
be called. If you set this option to 1, the callback isn't called until the user
releases the mouse button.
Set orient=HORIZONTAL for a horizontal scrollbar, orient=VERTICAL
for a vertical one (the default orientation).
orient
Controls the relief style of the widget; the default style is SUNKEN. This
option has no effect in Windows.
relief
This option controls how long button 1 has to be held down in the trough
before the slider starts moving in that direction repeatedly. Default is re-
peatdelay=300, and the units are milliseconds.
repeatdelay
This option controls how often slider movement will repeat when button
1 is held down in the trough. Default is repeatinterval=100, and the
units are milliseconds.
repeatinterval
Normally, you can tab the focus through a scrollbar widget; see Section 29,
“Focus: routing keyboard input” (p. 105). Set takefocus=0 if you don't
takefocus
want this behavior. The default key bindings for scrollbars allow the user
to use the ← and → arrow keys to move horizontal scrollbars, and they can
use the ↑ and ↓ keys to move vertical scrollbars.
The color of the trough.
troughcolor
New Mexico Tech Computer Center
Tkinter reference
70

Width of the scrollbar (its y dimension if horizontal, and its x dimension if
vertical). Default is 16. For possible values, see Section 5.1, “Dimen-
sions” (p. 8).
width
Methods on scrollbar objects include:
.activate(element=None)
If no argument is provided, this method returns one of the strings "arrow1", "arrow2", "slider",
or "", depending on where the mouse is. For example, the method returns "slider" if the mouse
is on the slider. The empty string is returned if the mouse is not currently on any of these three
controls.
To highlight one of the controls (using its activerelief relief style and its activebackground
color), call this method and pass a string identifying the control you want to highlight, one of "ar-
row1", "arrow2", or "slider".
.delta ( dx, dy )
Given a mouse movement of (dx, dy) in pixels, this method returns the float that should be added
to the current slider position to achieve that same movement. The value must be in the closed interval
[-1.0, 1.0].
.fraction ( x, y )
Given a pixel location (x, y), this method returns the corresponding normalized slider position
in the interval [0.0, 1.0] that is closest to that location.
.get()
Returns two numbers (a, b) describing the current position of the slider. The a value gives the pos-
ition of the left or top edge of the slider, for horizontal and vertical scrollbars respectively; the b
value gives the position of the right or bottom edge. Each value is in the interval [0.0, 1.0] where 0.0
is the leftmost or top position and 1.0 is the rightmost or bottom position. For example, if the slider
extends from halfway to three-quarters of the way along the trough, you might get back the tuple
(0.5,0.75).
.identify ( x, y )
This method returns a string indicating which (if any) of the components of the scrollbar are under
the given (x, y) coordinates. The return value is one of "arrow1", "trough1", "slider",
"trough2", "arrow2", or the empty string "" if that location is not on any of the scrollbar com-
ponents.
.set ( first, last )
To connect a scrollbar to another widget w, set w's xscrollcommand or yscrollcommand to the
scrollbar's .set method. The arguments have the same meaning as the values returned by the
.get() method. Please note that moving the scrollbar's slider does not move the corresponding
widget.
21.1.The Scrollbar command callback
When the user manipulates a scrollbar, the scrollbar calls its command callback. The arguments to this
call depend on what the user does:
• When the user requests a movement of one “unit” left or up, for example by clicking button B1 on
the left or top arrowhead, the arguments to the callback look like:
command("scroll", -1, "units")
• When the user requests a movement of one unit right or down, the arguments are:
71
Tkinter reference
New Mexico Tech Computer Center

command("scroll", 1, "units")
• When the user requests a movement of one page left or up:
command("scroll", -1, "pages")
• When the user requests a movement of one page right or down:
command("scroll", 1, "pages")
• When the user drags the slider to a value f in the range [0,1], where 0 means all the way left or up
and 1 means all the way right or down, the call is:
command("moveto", f)
These calling sequences match the arguments expected by the .xview() and .yview() methods of
canvases, listboxes, and text widgets. The Entry widget does not have an .xview() method. See
Section 9.1, “Scrolling an Entry widget” (p. 43).
21.2. Connecting a Scrollbar to another widget
Here is a code fragment showing the creation of a canvas with horizontal and vertical scrollbars. In this
fragment, self is assumed to be a Frame widget.
self.canv = Canvas ( self, width=600, height=400,
scrollregion=(0, 0, 1200, 800) )
self.canv.grid ( row=0, column=0 )
self.scrollY = Scrollbar ( self, orient=VERTICAL,
command=self.canv.yview )
self.scrollY.grid ( row=0, column=1, sticky=N+S )
self.scrollX = Scrollbar ( self, orient=HORIZONTAL,
command=self.canv.xview )
self.scrollX.grid ( row=1, column=0, sticky=E+W )
self.canv["xscrollcommand"]
=
self.scrollX.set
self.canv["yscrollcommand"]
=
self.scrollY.set
Notes:
• The connection goes both ways. The canvas's xscrollcommand option has to be connected to the
horizontal scrollbar's .set method, and the scrollbar's command option has to be connected to the
canvas's .xview method. The vertical scrollbar and canvas must have the same mutual connection.
• The sticky options on the .grid() method calls for the scrollbars force them to stretch just enough
to fit the corresponding dimension of the canvas.
22.The Spinbox widget
The Spinbox widget allows the user to select values from a given set. The values may be a range of
numbers, or a fixed set of strings.
New Mexico Tech Computer Center
Tkinter reference
72

On the screen, a Spinbox has an area for displaying the current values, and a pair of arrowheads.
• The user can click the upward-pointing arrowhead to advance the value to the next higher value in
sequence. If the value is already at maximum, you can set up the widget, if you wish, so that the new
value will wrap around to the lowest value.
• The user can click the downward-pointing arrowhead to advance the value to the next lower value
in sequence. This arrow may also be configured to wrap around, so that if the current value is the
lowest, clicking on the down-arrow will display the highest value.
• The user can also enter values directly, treating the widget as if it were an Entry. The user can move
the focus to the widget (see Section 29, “Focus: routing keyboard input” (p. 105)), either by clicking
on it or by using tab or shift-tab, and then edit the displayed value.
To create a new Spinbox widget as the child of a root window or frame parent:
w = Spinbox ( parent, option, ... )
The constructor returns the new Spinbox widget. Options include:
Background color when the cursor is over the widget; see Section 5.3,
“Colors” (p. 9).
activebackground
Background color of the widget.
bg or background
Width of the border around the widget; see Section 5.1, “Dimen-
sions” (p. 8). The default value is one pixel.
bd or borderwidth
The background color displayed on the arrowheads. The default is gray.
buttonbackground
The cursor to be displayed when the mouse is over the arrowheads; see
Section 5.8, “Cursors” (p. 12).
buttoncursor
The relief style for the downward-pointing arrowhead; see Section 5.6,
“Relief styles” (p. 11). The default style is RAISED.
buttondownrelief
The relief style for the upward-pointing arrowhead; see Section 5.6, “Relief
styles” (p. 11). The default style is RAISED.
buttonup
Use this option to specify a function or method to be called whenever the
user clicks on one of the arrowheads. Note that the callback is not called
when the user edits the value directly as if it were an Entry.
command
Selects the cursor that is displayed when the mouse is over the entry part
of the widget; see Section 5.8, “Cursors” (p. 12).
cursor
These options select the background and foreground colors displayed when
the widget's state is DISABLED.
disabledbackground
disabledforeground
Normally, the text in the entry portion of a Spinbox can be cut and pasted.
To prohibit this behavior, set the exportselection option to True.
exportselection
Use this option to select a different typeface for the entry text; see Section 5.4,
“Type fonts” (p. 9).
font
73
Tkinter reference
New Mexico Tech Computer Center

This option selects the color used to display the text in the entry part of the
widget, and the color of the arrowheads.
fg or foreground
Use this option to control the formatting of numeric values in combination
with the from_ and to options. For example, format='%10.4f' would
format
display the value as a ten-character field, with four digits after the decimal.
Use this option in combination with the to option (described below) to
constrain the values to a numeric range. For example, from_=1 and to=9
from_
would allow only values between 1 and 9 inclusive. See also the increment
option below.
The color of the focus highlight when the Spinbox does not have focus.
See Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the Spinbox has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set to 0 to suppress display
of the focus highlight.
highlightthickness
When you constrain the values with the from_ and to options, you can
use the increment option to specify how much the value increases or de-
increment
creases when the user clicks on an arrowhead. For example, with options
from_=0.0, to=2.0, and increment=0.5, the up-arrowhead will step
through values 0.0, 0.5, 1.0, 1.5, and 2.0.
Selects the color of the insertion cursor displayed in the entry part of the
widget.
insertbackground
This option controls the width of the border around the insertion cursor.
Normally, the insertion cursor will have no border. If this option is set to a
insertborderwidth
nonzero value, the insertion cursor will be displayed in the RAISED relief
style.
These two options control the blink cycle of the insertion cursor: the amount
of time it spends off and on, respectively, in milliseconds. For example,
insertofftime
insertontime
with options insertofftime=200 and insertontime=400, the cursor
would blink off for 0.2 seconds and then on for 0.4 seconds.
Use this option to specify the width of the insertion cursor; for possible
values, see Section 5.1, “Dimensions” (p. 8). The default width is two
pixels.
insertwidth
This option controls the position of the text in the entry part of the widget.
Values may be LEFT to left-justify the text; CENTER to center it; or RIGHT
to right-justify the text.
justify
This option specifies the background color that will be displayed when the
widget's state is 'readonly'; see Section 5.3, “Colors” (p. 9).
readonlybackground
Use this option to select a relief style for the widget; see Section 5.6, “Relief
styles” (p. 11). The default style is SUNKEN.
relief
These options specify the auto-repeat behavior of mouse clicks on the ar-
rowheads; values are in milliseconds. The repeatdelay value specifies
repeatdelay
repeatinterval
how long the mouse button must be held down before it repeats, and re-
peatinterval specifies how often the function repeats. Default values
are 400 and 100 milliseconds, respectively.
The background color to use displaying selected items.
selectbackground
The width of the border to display around selected items.
selectborderwidth
New Mexico Tech Computer Center
Tkinter reference
74

The foreground color to use displaying selected items.
selectforeground
Normally, a Spinbox widget is created in the NORMAL state. Set this option
to DISABLED to make the widget unresponsive to mouse or keyboard ac-
state
tions. If you set it to 'readonly', the value in the entry part of the widget
cannot be modified with keystrokes, but the value can still be copied to the
clipboard, and the widget still responds to clicks on the arrowheads.
Normally, the entry part of a Spinbox widget can have focus (see Section 29,
“Focus: routing keyboard input” (p. 105)). To remove the widget from the
focus traversal sequence, set takefocus=False.
takefocus
If you want to retrieve the current value of the widget, you can use the
.get() method below, or you can associate a control variable with the
textvariable
widget by passing that control variable as the value of this option. See Sec-
tion 28, “Control variables: the values behind the widgets” (p. 103).
This option specifies the upper limit of a range values. See the from_ option,
above, and also the increment option.
to
There are two ways to specify the possible values of the widget. One way
is to provide a tuple of strings as the value of the values option. For ex-
values
ample, values=('red', 'blue', 'green') would allow only those
three strings as values. To configure the widget to accept a range of numeric
values, see the from_ option above.
Use this option to specify the number of characters allowed in the entry
part of the widget. The default value is 20.
width
Normally, when the widget is at its highest value, the up-arrowhead does
nothing, and when the widget is at its lowest value, the down-arrowhead
wrap
does nothing. If you select wrap=True, the up-arrowhead will advance
from the highest value back to the lowest, and the down-arrowhead will
advance from the lowest value back to the highest.
Use this option to connect a scrollbar to the entry part of the widget. For
details, see Section 21.2, “Connecting a Scrollbar to another wid-
get” (p. 72).
xscrollcommand
These methods are available on Spinbox widgets:
.bbox ( index )
This method returns the bounding box of the character at position index in the entry part of the
widget. The result is a tuple (x, y, w, h), where the values are the x and y coordinates of the
upper left corner, and the character's width and height in pixels, in that order.
.delete ( first, last=None )
This method deletes characters from the entry part of the Spinbox. The values of first and last
are interpreted in the standard way for Python slices.
.get()
This method returns the value of the Spinbox. The value is always returned as a string, even if the
widget is set up to contain a number.
.icursor ( index )
Use this method to position the insertion cursor at the location specified by index, using the
standard Python convention for positions.
75
Tkinter reference
New Mexico Tech Computer Center

.identify ( x, y )
Given a position (x, y) within the widget, this method returns a string describing what is at that
location. Values may be any of:
• 'entry' for the entry area.
• 'buttonup' for the upward-pointing arrowhead.
• 'buttondown' for the downward-pointing arrowhead.
• '' (an empty string) if these coordinates are not within the widget.
.index ( i )
This method returns the numerical position of an index i. Arguments may be any of:
• END to get the position after the last character of the entry.
• INSERT to get the position of the insertion cursor.
• ANCHOR to get the position of the selection anchor.
• 'sel.first' to get the position of the start of the selection. If the selection is not within the
widget, this method raises a TclError exception.
• 'sel.last' to get the position just past the end of the selection. If the selection is not within
the widget, this method raises a TclError exception.
• A string of the form “@x” denotes an x-coordinate within the widget. The return value is the po-
sition of the character containing that coordinate. If the coordinate is outside the widget altogether,
the return value will be the position of the character closest to that position.
.insert ( index, text )
This method inserts characters from the string text at the position specified by index. For the
possible index values, see the .index() method above.
.invoke ( element )
Call this method to get the same effect as the user clicking on an arrowhead. The element argument
is 'buttonup' for the up-arrowhead, and 'buttondown' for the down-arrowhead.
.scan_dragto ( x )
This method works the same as the .scan_dragto() method described in Section 9, “The Entry
widget” (p. 39).
.scan_mark ( x )
This method works the same as the .scan_mark() method described in Section 9, “The Entry
widget” (p. 39).
.selection('from', index)
Sets the selection anchor in the widget to the position specified by the index. For the possible values
of index, see the .index() method above. The initial value of the selection anchor is 0.
.selection('to', index)
Selects the text between the selection anchor and the given index.
.selection('range', start, end)
Select the text between the start and end indices. For allowable index values, see the .index()
method above.
.selection_clear()
Clears the selection.
.selection_get()
Returns the selected text. If there is currently no selection, this method will raise a TclError excep-
tion.
New Mexico Tech Computer Center
Tkinter reference
76

23.The Text widget
Text widgets are a much more generalized method for handling multiple lines of text than the Label
widget. Text widgets are pretty much a complete text editor in a window:
• You can mix text with different fonts, colors, and backgrounds.
• You can intersperse embedded images with text. An image is treated as a single character. See Sec-
tion 23.3, “Text widget images” (p. 81).
• An index is a way of describing a specific position between two characters of a text widget. See Sec-
tion 23.1, “Text widget indices” (p. 79).
• A text widget may contain invisible mark objects between character positions. See Section 23.2, “Text
widget marks” (p. 80).
• Text widgets allow you to define names for regions of the text called tags. You can change the appear-
ance of a tagged region, changing its font, foreground and background colors, and other attributes.
See Section 23.5, “Text widget tags” (p. 81).
• You can bind events to a tagged region. See Section 30, “Events” (p. 106).
• You can even embed a text widget in a “window” containing any Tkinter widget—even a frame
widget containing other widgets. A window is also treated as a single character. See Section 23.4,
“Text widget windows” (p. 81).
To create a text widget as the child of a root window or frame named parent:
w = Text ( parent, option, ... )
The constructor returns the new Text widget. Options include:
If the undo option is set, the autoseparators option controls whether
separators are automatically added to the undo stack after each insertion or
autoseparators
deletion (if autoseparators=True) or not (if autoseparators=False).
For an overview of the undo mechanism, see Section 23.7, “The Text widget
undo/redo stack” (p. 82).
The default background color of the text widget. See Section 5.3, “Col-
ors” (p. 9).
bg or background
The width of the border around the text widget; see Section 5.1, “Dimen-
sions” (p. 8). The default is two pixels.
bd or borderwidth
The cursor that will appear when the mouse is over the text widget. See
Section 5.8, “Cursors” (p. 12).
cursor
Normally, text selected within a text widget is exported to be the selection
in the window manager. Set exportselection=0 if you don't want that
behavior.
exportselection
The default font for text inserted into the widget. Note that you can have
multiple fonts in the widgets by using tags to change the properties of some
text. See Section 5.4, “Type fonts” (p. 9).
font
The color used for text (and bitmaps) within the widget. You can change the
color for tagged regions; this option is just the default.
fg or foreground
The height of the widget in lines (not pixels!), measured according to the
current font size.
height
77
Tkinter reference
New Mexico Tech Computer Center

The color of the focus highlight when the text widget does not have focus.
See Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the text widget has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set highlightthick-
ness=0 to suppress display of the focus highlight.
highlightthickness
The color of the insertion cursor. Default is black.
insertbackground
Size of the 3-D border around the insertion cursor. Default is 0.
insertborderwidth
The number of milliseconds the insertion cursor is off during its blink cycle.
Set this option to zero to suppress blinking. Default is 300.
insertofftime
The number of milliseconds the insertion cursor is on during its blink cycle.
Default is 600.
insertontime
Width of the insertion cursor (its height is determined by the tallest item in
its line). Default is 2 pixels.
insertwidth
This option sets the maximum number of operations retained on the undo
stack. For an overview of the undo mechanism, see Section 23.7, “The Text
maxundo
widget undo/redo stack” (p. 82). Set this option to -1 to specify an unlimited
number of entries in the undo stack.
The size of the internal padding added to the left and right of the text area.
Default is one pixel. For possible values, see Section 5.1, “Dimensions” (p. 8).
padx
The size of the internal padding added above and below the text area. Default
is one pixel.
pady
The 3-D appearance of the text widget. Default is relief=SUNKEN; for other
values, see Section 5.6, “Relief styles” (p. 11).
relief
The background color to use displaying selected text.
selectbackground
The width of the border to use around selected text.
selectborderwidth
The foreground color to use displaying selected text.
selectforeground
This option specifies how much extra vertical space is put above each line of
text. If a line wraps, this space is added only before the first line it occupies
on the display. Default is 0.
spacing1
This option specifies how much extra vertical space to add between displayed
lines of text when a logical line wraps. Default is 0.
spacing2
This option specifies how much extra vertical space is added below each line
of text. If a line wraps, this space is added only after the last line it occupies
on the display. Default is 0.
spacing3
Normally, text widgets respond to keyboard and mouse events; set
state=NORMAL to get this behavior. If you set state=DISABLED, the text
state
widget will not respond, and you won't be able to modify its contents pro-
grammatically either.
This option controls how tab characters position text. See Section 23.6, “Setting
tabs in a Text widget” (p. 82).
tabs
Normally, focus will visit a text widget (see Section 29, “Focus: routing key-
board input” (p. 105)). Set takefocus=0 if you do not want focus in the
widget.
takefocus
Set this option to True to enable the undo mechanism, or False to disable
it. See Section 23.7, “The Text widget undo/redo stack” (p. 82).
undo
New Mexico Tech Computer Center
Tkinter reference
78

The width of the widget in characters (not pixels!), measured according to the
current font size.
width
This option controls the display of lines that are too wide.
wrap
• With the default behavior, wrap=CHAR, any line that gets too long will be
broken at any character.
• Set wrap=WORD and it will break the line after the last word that will fit.
• If you want to be able to create lines that are too long to fit in the window,
set wrap=NONE and provide a horizontal scrollbar.
To make the text widget horizontally scrollable, set this option to the .set
method of the horizontal scrollbar.
xscrollcommand
To make the text widget vertically scrollable, set this option to the .set
method of the vertical scrollbar.
yscrollcommand
23.1. Text widget indices
An index is a general method of specifying a position in the content of a text widget. An index is a string
with one of these forms:
"line.column"
The position just before the given column (counting from zero) on the given line (counting from
one). Examples: "1.0" is the position of the beginning of the text; "2.3" is the position before the
fourth character of the second line.
"line.end"
The position just before the newline at the end of the given line (counting from one). So, for example,
index "10.end" is the position at the end of the tenth line.
INSERT
The position of the insertion cursor in the text widget. This constant is equal to the string "insert".
CURRENT
The position of the character closest to the mouse pointer. This constant is equal to the string
"current".
END
The position after the last character of the text. This constant is equal to the string "end".
SEL_FIRST
If some of the text in the widget is currently selection (as by dragging the mouse over it), this is the
position before the start of the selection. If you try to use this index and nothing is selected, a
TclError exception will be raised. This constant is equal to the string "sel.first".
SEL_LAST
The position after the end of the selection, if any. As with SEL_FIRST, you'll get a TclError ex-
ception if you use such an index and there is no selection. This constant is equal to the string
"sel.last".
"markname"
You can use a mark as an index; just pass its name where an index is expected. See Section 23.2,
“Text widget marks” (p. 80).
79
Tkinter reference
New Mexico Tech Computer Center

"tag.first"
The position before the first character of the region tagged with name tag; see Section 23.5, “Text
widget tags” (p. 81).
"tag.last"
The position after the last character of a tagged region.
"@x,y"
The position before the character closest to the coordinate (x, y).
embedded-object
If you have an image or window embedded in the text widget, you can use the PhotoImage,
BitmapImage, or embedded widget as an index. See Section 23.3, “Text widget images” (p. 81)
and Section 23.4, “Text widget windows” (p. 81).
In addition to the basic index options above, you can build arbitrary complex expressions by adding
any of these suffixes to a basic index or index expression:
+ n chars
From the given index, move forward n characters. This operation will cross line boundaries.
For example, suppose the first line looks like this:
abcdef
The index expression “1.0 + 5 chars” refers to the position between e and f. You can omit
blanks and abbreviate keywords in these expressions if the result is unambiguous. This example
could be abbreviated “1.0+5c”.
- n chars
Similar to the previous form, but the position moves backwards n characters.
+ n lines
Moves n lines past the given index. Tkinter tries to leave the new position in the same column as it
was on the line it left, but if the line at the new position is shorter, the new position will be at the
end of the line.
- n lines
Moves n lines before the given index.
linestart
Moves to the position before the first character of the given index. For example, position “current
linestart” refers to the beginning of the line closest to the mouse pointer.
lineend
Moves to the position after the last character of the given index. For example, position “sel.last
lineend” refers to the end of the line containing the end of the current selection.
wordstart
The position before the beginning of the word containing the given index. For example, index
“11.44 wordstart” refers to the position before the word containing position 44 on line 11.
For the purposes of this operation, a word is either a string of consecutive letter, digit, or underbar
(_) characters, or a single character that is none of these types.
23.2. Text widget marks
A mark represents a floating position somewhere in the contents of a text widget.
New Mexico Tech Computer Center
Tkinter reference
80

• You handle each mark by giving it a name. This name can be any string that doesn't include whitespace
or periods.
• There are two special marks. INSERT is the current position of the insertion cursor, and CURRENT is
the position closest to the mouse cursor.
• Marks float along with the adjacent content. If you modify text somewhere away from a mark, the
mark stays at the same position relative to its immediate neighbors.
• Marks have a property called gravity that controls what happens when you insert text at a mark. The
default gravity is RIGHT, which means that when new text is inserted at that mark, the mark stays
after the end of the new text. If you set the gravity of a mark to LEFT (using the text widget's
.mark_gravity() method), the mark will stay at a position just before text newly inserted at that
mark.
• Deleting the text all around a mark does not remove the mark. If you want to remove a mark, use the
.mark_unset() method on the text widget.
Refer to Section 23.8, “Methods on Text widgets” (p. 83), below, to see how to use marks.
23.3. Text widget images
You can put an image or bitmap into a text widget. It is treated as a single character whose size is the
natural size of the object. See Section 5.9, “Images” (p. 13) andSection 5.7, “Bitmaps” (p. 12).
Images are placed into the text widget by calling that widget's .image_create() method. See below
for the calling sequence and other methods for image manipulation.
Images are manipulated by passing their name to methods on the text widget. You can give Tkinter a
name for an image, or you can just let Tkinter generate a default name for that image.
An image may appear any number of times within the same Text widget. Each instance will carry a
unique name. This names can be used as an index.
23.4. Text widget windows
You can put any Tkinter widget—even a frame containing other widgets—into a text widget. For example,
you can put a fully functional button or a set of radiobuttons into a text widget.
Use the .window_create() method on the text widget to add the embedded widget. For the calling
sequence and related methods, see Section 23.8, “Methods on Text widgets” (p. 83).
23.5. Text widget tags
There are lots of ways to change both the appearance and functionality of the items in a text widget.
For text, you can change the font, size, and color. Also, you can make text, widgets, or embedded images
respond to keyboard or mouse actions.
To control these appearance and functional features, you associate each feature with a tag. You can then
associate a tag with any number of pieces of text in the widget.
• The name of a tag can be any string that does not contain white space or periods.
• There is one special predefined tag called SEL. This is the region currently selected, if any.
• Since any character may be part of more than one tag, there is a tag stack that orders all the tags. Entries
are added at the end of the tag list, and later entries have priority over earlier entries.
81
Tkinter reference
New Mexico Tech Computer Center

So, for example, if there is a character c that is part of two tagged regions t1 and t2, and t1 is deeper
in the tag stack than t2, and t1 wants the text to be green and t2 wants it to be blue, c will be rendered
in blue because t2 has precedence over t1.
• You can change the ordering of tags in the tag stack.
Tags are created by using the .tag_add() method on the text widget. See Section 23.8, “Methods on
Text widgets” (p. 83), below, for information on this and related methods.
23.6. Setting tabs in a Text widget
The tabs option for Text widgets gives you a number of ways to set tab stops within the widget.
• The default is to place tabs every eight characters.
• To set specific tab stops, set this option to a sequence of one or more distances. For example, setting
tabs=("3c", "5c", "12c") would put tab stops 3, 5, and 12cm from the left side. Past the last
tab you set, tabs have the same width as the distance between the last two existing tab stops. So,
continuing our example, because 12c-5c is 7 cm, if the user keeps pressing the Tab key, the cursor
would be positioned at 19cm, 26cm, 33cm, and so on.
• Normally, text after a tab character is aligned with its left edge on the tab stop, but you can include
any of the keywords LEFT, RIGHT, CENTER, or NUMERIC in the list after a distance, and that will
change the positioning of the text after each tab.
• A LEFT tab stop has the default behavior.
• A RIGHT tab stop will position the text so its right edge is on the stop.
• A CENTER tab will center the following text on the tab stop.
• A NUMERIC tab stop will place following text to the left of the stop up until the first period (".")
in the text—after that, the period will be centered on the stop, and the rest of the text will positioned
to its right.
For example, setting tabs=("0.5i", "0.8i", RIGHT, "1.2i", CENTER, "2i", NUMERIC)
would set four tab stops: a left-aligned tab stop half an inch from the left side, a right-aligned tab stop
0.8" from the left side, a center-aligned tab stop 1.2" from the left, and a numeric-aligned tab stop 2"
from the left.
23.7.The Text widget undo/redo stack
The Text widget has a built-in mechanism that allows you to implement undo and redo operations
that can cancel or reinstate changes to the text within the widget.
Here is how the undo/redo stack works:
• Every change to the content is recorded by pushing entries onto the stack that describe the change,
whether an insertion or a deletion. These entries record the old state of the contents as well as the
new state: if a deletion, the deleted text is recorded; if an insertion, the inserted text is recorded, along
with a description of the location and whether it was an insertion or a deletion.
• Your program may also push a special record called a separator onto the stack.
• An undo operation changes the contents of the widget to what they were at some previous point. It
does this by reversing all the changes pushed onto the undo/redo stack until it reaches a separator
or until it runs out of stack.
New Mexico Tech Computer Center
Tkinter reference
82

However, note that Tkinter also remembers how much of the stack was reversed in the undo operation,
until some other editing operation changes the contents of the widget.
• A redo operation works only if no editing operation has occurred since the last undo operation. It re-
applies all the undone operations.
For the methods used to implement the undo/redo stack, see the .edit_redo, .edit_reset,
.edit_separator, and .edit_undo methods in Section 23.8, “Methods on Text widgets” (p. 83).
The undo mechanism is not enabled by default; you must set the undo option in the widget.
23.8. Methods on Text widgets
These methods are available on all text widgets:
.bbox ( index )
Returns the bounding box for the character at the given index, a 4-tuple (x, y, width, height).
If the character is not visible, returns None. Note that this method may not return an accurate value
unless you call the .update_idletasks() method (see Section 25, “Universal widget meth-
ods” (p. 92)).
.compare ( index1, op, index2 )
Compares the positions of two indices in the text widget, and returns true if the relational op holds
between index1 and index2. The op specifies what comparison to use, one of: "<", "<=", "==",
"!=", ">=", or ">".
For example, for a text widget t, t.compare("2.0", "<=", END) returns true if the beginning
of the second line is before or at the end of the text in t.
.delete ( index1, index2=None )
Deletes text starting just after index1. If the second argument is omitted, only one character is de-
leted. If a second index is given, deletion proceeds up to, but not including, the character after in-
dex2. Recall that indices sit between characters.
.dlineinfo ( index )
Returns a bounding box for the line that contains the given index. For the form of the bounding
box, and a caution about updating idle tasks, see the definition of the .bbox method above.
.edit_modified ( arg=None )
Queries, sets, or clears the modified flag. This flag is used to track whether the contents of the widget
have been changed. For example, if you are implementing a text editor in a Text widget, you might
use the modified flag to determine whether the contents have changed since you last saved the
contents to a file.
When called with no argument, this method returns True if the modified flag has been set, False
if it is clear. You can also explicitly set the modified flag by passing a True value to this method,
or clear it by passing a False value.
Any operation that inserts or deletes text, whether by program actions or user actions, or an undo
or redo operation, will set the modified flag.
.edit_redo()
Performs a redo operation. For details, see Section 23.7, “The Text widget undo/redo stack” (p. 82).
.edit_reset()
Clears the undo stack.
83
Tkinter reference
New Mexico Tech Computer Center

.edit_separator()
Pushes a separator onto the undo stack. This separator limits the scope of a future undo operation
to include only the changes pushed since the separator was pushed. For details, see Section 23.7,
“The Text widget undo/redo stack” (p. 82).
.edit_undo()
Reverses all changes to the widget's contents made since the last separator was pushed on the undo
stack, or all the way to the bottom of the stack if the stack contains no separators. For details, see
Section 23.7, “The Text widget undo/redo stack” (p. 82). It is an error if the undo stack is empty.
.image_create ( index[, option=value, ...] )
This method inserts an image into the widget. The image is treated as just another character, whose
size is the image's natural size.
The options for this method are shown in the table below. You may pass either a series of op-
tion=value arguments, or a dictionary of option names and values.
This option specifies how the image is to be aligned vertically if its height is less than the
height of its containing line. Values may be top to align it at the top of its space; center
align
to center it; bottom to place it at the bottom; or baseline to line up the bottom of the
image with the text baseline.
The image to be used. See Section 5.9, “Images” (p. 13).
image
You can assign a name to this instance of the image. If you omit this option, Tkinter will
generate a unique name. If you create multiple instances of an image in the same Text
widget, Tkinter will generate a unique name by appending a “#” followed by a number.
name
If supplied, this option is a number of pixels of extra space to be added on both sides of
the image.
padx
If supplied, this option is a number of pixels of extra space to be added above and below
the image.
pady
.get ( index1, index2=None )
Use this method to retrieve the current text from the widget. Retrieval starts at index index1. If
the second argument is omitted, you get the character after index1. If you provide a second index,
you get the text between those two indices. Embedded images and windows (widgets) are ignored.
.image_cget ( index, option )
To retrieve the current value of an option set on an embedded image, call this method with an index
pointing to the image and the name of the option.
.image_configure ( index, option, ... )
To set one or more options on an embedded image, call this method with an index pointing to the
image as the first argument, and one or more option=value pairs.
If you specify no options, you will get back a dictionary defining all the options on the image, and
the corresponding values.
.image_names()
This method returns a tuple of the names of all the text widget's embedded images.
.index ( i )
For an index i, this method returns the equivalent position in the form "line.char".
.insert ( index, text, tags=None )
Inserts the given text at the given index.
New Mexico Tech Computer Center
Tkinter reference
84

If you omit the tags argument, the newly inserted text will be tagged with any tags that apply to
the characters both before and after the insertion point.
If you want to apply one or more tags to the text you are inserting, provide as a third argument a
tuple of tag strings. Any tags that apply to existing characters around the insertion point are ignored.
Note: The third argument must be a tuple. If you supply a list argument, Tkinter will silently fail to
apply the tags. If you supply a string, each character will be treated as a tag.
.mark_gravity ( mark, gravity=None )
Changes or queries the gravity of an existing mark; see Section 23.2, “Text widget marks” (p. 80),
above, for an explanation of gravity.
To set the gravity, pass in the name of the mark, followed by either LEFT or RIGHT. To find the
gravity of an existing mark, omit the second argument and the method returns LEFT or RIGHT.
.mark_names()
Returns a sequence of the names of all the marks in the window, including INSERT and CURRENT.
.mark_next ( index )
Returns the name of the mark following the given index; if there are no following marks, the
method returns an empty string.
If the index is in numeric form, the method returns the first mark at that position. If the index is
a mark, the method returns the next mark following that mark, which may be at the same numerical
position.
.mark_previous ( index )
Returns the name of the mark preceding the given index. If there are no preceding marks, the
method returns an empty string.
If the index is in numeric form, the method returns returns the last mark at that position. If the
index is a mark, the method returns the preceding mark, which may be at the same numerical
position.
.mark_set ( mark, index )
If no mark with name mark exists, one is created with RIGHT gravity and placed where index
points. If the mark already exists, it is moved to the new location.
This method may change the position of the INSERT or CURRENT indices.
.mark_unset ( mark )
Removes the named mark. This method cannot be used to remove the INSERT or CURRENT marks.
.scan_dragto ( x, y )
See .scan_mark, below.
.scan_mark ( x, y )
This method is used to implement fast scrolling of a Text widget. Typically, a user presses and
holds a mouse button at some position in the widget, and then moves the mouse in the desired
direction, and the widget moves in that direction at a rate proportional to the distance the mouse
has moved since the button was depressed. The motion may be any combination of vertical or ho-
rizontal scrolling.
To implement this feature, bind a mouse button down event to a handler that calls .scan_mark(x,
y), where x and y are the current mouse position. Then bind the <Motion> event to a handler that
calls .scan_dragto(x, y), where x and y are the new mouse position.
85
Tkinter reference
New Mexico Tech Computer Center

.search ( pattern, index, option, ... )
Searches for pattern (which can be either a string or a regular expression) in the buffer starting
at the given index. If it succeeds, it returns an index of the "line.char" form; if it fails, it returns
an empty string.
The allowable options for this method are:
Set this option to True to search backwards from the index. Default is forwards.
backwards
If you set this option to an IntVar control variable, when there is a match you can
retrieve the length of the text that matched by using the .get() method on that
variable after the method returns.
count
Set this option to True to search for text that exactly matches the pattern. This is
the default option. Compare the regexp option below.
exact
Set this option to True to search forwards from the index. This is the default option.
forwards
Set this option to True to interpret the pattern as a Tcl-style regular expression.
The default is to look for an exact match to pattern. Tcl regular expressions are a
regexp
subset of Python regular expressions, supporting these features: . ^ [c1…] (…)
* + ? e1|e2
Set this option to 1 to ignore case. The default is a case-sensitive search.
nocase
To limit the search, set this option to the index beyond which the search should not
go.
stopindex
.see ( index )
If the text containing the given index is not visible, scroll the text until that text is visible.
.tag_add ( tagName, index1, index2=None )
This method associates the tag named tagName with a region of the contents starting just after index
index1 and extending up to index index2. If you omit index2, only the character after index1
is tagged.
.tag_bind ( tagName, sequence, func, add=None )
This method binds an event to all the text tagged with tagName. See Section 30, “Events” (p. 106),
below, for more information on event bindings.
To create a new binding for tagged text, use the first three arguments: sequence identifies the
event, and func is the function you want it to call when that event happens.
To add another binding to an existing tag, pass the same first three arguments and "+" as the fourth
argument.
To find out what bindings exist for a given sequence on a tag, pass only the first two arguments;
the method returns the associated function.
To find all the bindings for a given tag, pass only the first argument; the method returns a list of all
the tag's sequence arguments.
.tag_cget ( tagName, option )
Use this method to retrieve the value of the given option for the given tagName.
.tag_config ( tagName, option, ... )
To change the value of options for the tag named tagName, pass in one or more option=value
pairs.
If you pass only one argument, you will get back a dictionary defining all the options and their
values currently in force for the named tag.
New Mexico Tech Computer Center
Tkinter reference
86

Here are the options for tag configuration:
The background color for text with this tag. Note that you can't use bg as an ab-
breviation.
background
To make the background appear grayish, set this option to one of the standard
bitmap names (see Section 5.7, “Bitmaps” (p. 12)). This has no effect unless you
also specify a background.
bgstipple
Width of the border around text with this tag. Default is 0. Note that you can't
use bd as an abbreviation.
borderwidth
To make the text appear grayish, set this option a bitmap name.
fgstipple
The font used to display text with this tag. See Section 5.4, “Type fonts” (p. 9).
font
The color used for text with this tag. Note that you can't use the fg abbreviation
here.
foreground
The justify option set on the first character of each line determines how that
line is justified: LEFT (the default), CENTER, or RIGHT.
justify
How much to indent the first line of a chunk of text that has this tag. The default
is 0. See Section 5.1, “Dimensions” (p. 8)for allowable values.
lmargin1
How much to indent successive lines of a chunk of text that has this tag. The de-
fault is 0.
lmargin2
How much to raise (positive values) or lower (negative values) text with this tag
relative to the baseline. Use this to get superscripts or subscripts, for example.
For allowable values, see Section 5.1, “Dimensions” (p. 8).
offset
Set overstrike=1 to draw a horizontal line through the center of text with this
tag.
overstrike
Which 3-D effect to use for text with this tag. The default is relief=FLAT; for
other possible values see Section 5.6, “Relief styles” (p. 11).
relief
Size of the right margin for chunks of text with this tag. Default is 0.
rmargin
This option specifies how much extra vertical space is put above each line of text
with this tag. If a line wraps, this space is added only before the first line it occupies
on the display. Default is 0.
spacing1
This option specifies how much extra vertical space to add between displayed
lines of text with this tag when a logical line wraps. Default is 0.
spacing2
This option specifies how much extra vertical space is added below each line of
text with this tag. If a line wraps, this space is added only after the last line it oc-
cupies on the display. Default is 0.
spacing3
How tabs are expanded on lines with this tag. See Section 23.6, “Setting tabs in a
Text widget” (p. 82).
tabs
Set underline=1 to underline text with this tag.
underline
How long lines are wrapped in text with this tag. See the description of the wrap
option for text widgets, above.
wrap
.tag_delete ( tagName, ... )
To delete one or more tags, pass their names to this method. Their options and bindings go away,
and the tags are removed from all regions of text.
87
Tkinter reference
New Mexico Tech Computer Center

.tag_lower ( tagName, belowThis=None )
Use this method to change the order of tags in the tag stack (see Section 23.5, “Text widget
tags” (p. 81), above, for an explanation of the tag stack). If you pass two arguments, the tag with
name tagName is moved to a position just below the tag with name belowThis. If you pass only
one argument, that tag is moved to the bottom of the tag stack.
.tag_names ( index=None )
If you pass an index argument, this method returns a sequence of all the tag names that are associated
with the character after that index. If you pass no argument, you get a sequence of all the tag names
defined in the text widget.
.tag_nextrange ( tagName, index1, index2=None )
This method searches a given region for places where a tag named tagName starts. The region
searched starts at index index1 and ends at index index2. If the index2 argument is omitted,
the search goes all the way to the end of the text.
If there is a place in the given region where that tag starts, the method returns a sequence [i0,
i1], where i0 is the index of the first tagged character and i1 is the index of the position just after
the last tagged character.
If no tag starts are found in the region, the method returns an empty string.
.tag_prevrange ( tagName, index1, index2=None )
This method searches a given region for places where a tag named tagName starts. The region
searched starts before index index1 and ends at index index2. If the index2 argument is omitted,
the search goes all the way to the end of the text.
The return values are as in .tag_nextrange().
.tag_raise ( tagName, aboveThis=None )
Use this method to change the order of tags in the tag stack (see Section 23.5, “Text widget
tags” (p. 81), above, for an explanation of the tag stack). If you pass two arguments, the tag with
name tagName is moved to a position just above the tag with name aboveThis. If you pass only
one argument, that tag is moved to the top of the tag stack.
.tag_ranges ( tagName )
This method finds all the ranges of text in the widget that are tagged with name tagName, and returns
a sequence [s0, e0, s1, e1, …], where each si is the index just before the first character of the
range and ei is the index just after the last character of the range.
.tag_remove ( tagName, index1, index2=None )
Removes the tag named tagName from all characters between index1 and index2. If index2 is
omitted, the tag is removed from the single character after index1.
.tag_unbind ( tagName, sequence, funcid=None )
Remove the event binding for the given sequence from the tag named tagName. If there are
multiple handlers for this sequence and tag, you can remove only one handler by passing it as the
third argument.
.window_cget ( index, option )
Returns the value of the given option for the embedded widget at the given index.
.window_configure ( index, option )
To change the value of options for embedded widget at the given index, pass in one or more op-
tion=value pairs.
If you pass only one argument, you will get back a dictionary defining all the options and their
values currently in force for the given widget.
New Mexico Tech Computer Center
Tkinter reference
88

.window_create ( index, option, ... )
This method creates a window where a widget can be embedded within a text widget. There are
two ways to provide the embedded widget:
a. you can use pass the widget to the window option in this method, or
b. you can define a procedure that will create the widget and pass that procedure as a callback to
the create option.
Options for .window_create() are:
Specifies how to position the embedded widget vertically in its line, if it isn't as tall as
the text on the line. Values include: align=CENTER (the default), which centers the
align
widget vertically within the line; align=TOP, which places the top of the image at the
top of the line; align=BOTTOM, which places the bottom of the image at the bottom
of the line; and align=BASELINE, which aligns the bottom of the image with the text
baseline.
A procedure that will create the embedded widget on demand. This procedure takes
no arguments and must create the widget as a child of the text widget and return the
widget as its result.
create
Extra space added to the left and right of the widget within the text line. Default is 0.
padx
Extra space added above and below the widget within the text line. Default is 0.
pady
This option controls what happens when the line is higher than the embedded widget.
Normally this option is 0, meaning that the embedded widget is left at its natural size.
stretch
If you set stretch=1, the widget is stretched vertically to fill the height of the line,
and the align option is ignored.
The widget to be embedded. This widget must be a child of the text widget.
window
.window_names()
Returns a sequence containing the names of all embedded widgets.
.xview ( MOVETO, fraction )
This method scrolls the text widget horizontally, and is intended for binding to the command option
of a related horizontal scrollbar.
This method can be called in two different ways. The first call positions the text at a value given by
fraction, where 0.0 moves the text to its leftmost position and 1.0 to its rightmost position.
.xview ( SCROLL, n, what )
The second call moves the text left or right: the what argument specifies how much to move and
can be either UNITS or PAGES, and n tells how many characters or pages to move the text to the
right relative to its image (or left, if negative).
.xview_moveto ( fraction )
This method scrolls the text in the same way as .xview(MOVETO, fraction).
.xview_scroll ( n, what )
Same as .xview(SCROLL, n, what).
.yview(MOVETO, fraction)
The vertical scrolling equivalent of .xview(MOVETO,…).
.yview(SCROLL, n, what)
The vertical scrolling equivalent of .xview(SCROLL,…). When scrolling vertically by UNITS, the
units are lines.
89
Tkinter reference
New Mexico Tech Computer Center

.yview_moveto(fraction)
The vertical scrolling equivalent of .xview_moveto().
.yview_scroll(n, what)
The vertical scrolling equivalent of .xview_scroll().
24. Toplevel:Top-level window methods
A top-level window is a window that has an independent existence under the window manager. It is
decorated with the window manager's decorations, and can be moved and resized independently. Your
application can use any number of top-level windows.
For any widget w, you can get to its top-level widget using w.winfo_toplevel().
To create a new top-level window:
w = Toplevel ( option, ... )
Options include:
The background color of the window. See Section 5.3, “Colors” (p. 9).
bg or background
Border width in pixels; default is 0. For possible values, see Section 5.1,
“Dimensions” (p. 8). See also the relief option, below.
bd or borderwidth
You can give a Toplevel window a “class” name. Such names are matched
against the option database, so your application can pick up the user's
class_
configuration preferences (such as colors) by class name. For example, you
might design a series of pop-ups called “screamers,” and set them all up
with class_="Screamer". Then you can put a line in your option database
like this:
*Screamer*background: red
and then, if you use the .option_readfile() method to read your option
database, all widgets with that class name will default to a red background.
This option is named class_ because class is a reserved word in Python.
The cursor that appears when the mouse is in this window. See Section 5.8,
“Cursors” (p. 12).
cursor
Window height; see Section 5.1, “Dimensions” (p. 8).
height
The color of the focus highlight when the window does not have focus. See
Section 29, “Focus: routing keyboard input” (p. 105).
highlightbackground
The color of the focus highlight when the window has the focus.
highlightcolor
The thickness of the focus highlight. Default is 1. Set highlightthick-
ness=0 to suppress display of the focus highlight.
highlightthickness
To provide this window with a top-level menubar, supply a Menu widget
as the value of this option. Under MacOS, this menu will appear at the top
menu
of the screen when the window is active. Under Windows or Unix, it will
appear at the top of the application.
Use this option to provide extra space on the left and right sides of the
window. The value is a number of pixels.
padx
Use this option to provide extra space on the top and bottom sides of the
window. The value is a number of pixels.
pady
New Mexico Tech Computer Center
Tkinter reference
90

Normally, a top-level window will have no 3-d borders around it. To get a
shaded border, set the bd option larger that its default value of zero, and
relief
set the relief option to one of the constants discussed under Section 5.6,
“Relief styles” (p. 11).
Normally, a top-level window does not get focus. Use takefocus=True
if you want it to be able to take focus; see Section 29, “Focus: routing key-
board input” (p. 105).
takefocus
The desired width of the window; see Section 5.1, “Dimensions” (p. 8).
width
These methods are available for top-level windows:
.aspect ( nmin, dmin, nmax, dmax )
Constrain the root window's width:length ratio to the range [ nmin / dmin, nmax / dmax ].
.deiconify()
If this window is iconified, expand it.
.geometry ( newGeometry=None )
Set the window geometry. For the form of the argument, see Section 5.10, “Geometry strings” (p. 14).
If the argument is omitted, the current geometry string is returned.
.iconify()
Iconify the window.
.lift ( aboveThis=None )
To raise this window to the top of the stacking order in the window manager, call this method with
no arguments. You can also raise it to a position in the stacking order just above another Toplevel
window by passing that window as an argument.
.lower ( belowThis=None )
If the argument is omitted, moves the window to the bottom of the stacking order in the window
manager. You can also move the window to a position just under some other top-level window by
passing that Toplevel widget as an argument.
.maxsize ( width=None, height=None )
Set the maximum window size. If the arguments are omitted, returns the current (width, height).
.minsize ( width=None, height=None )
Set the minimum window size. If the arguments are omitted, returns the current minima as a 2-
tuple.
.overrideredirect ( flag=None )
If called with a True argument, this method sets the override redirect flag, which removes all
window manager decorations from the window, so that it cannot be moved, resized, iconified, or
closed. If called with a False argument, window manager decorations are restored and the override
redirect flag is cleared. If called with no argument, it returns the current state of the override redirect
flag.
Be sure to call the .update_idletasks() method (see Section 25, “Universal widget meth-
ods” (p. 92)) before setting this flag. If you call it before entering the main loop, your window will
be disabled before it ever appears.
This method may not work on some Unix and MacOS platforms.
.resizable ( width=None, height=None )
If width is true, allow horizontal resizing. If height is true, allow vertical resizing. If the arguments
are omitted, returns the current size as a 2-tuple.
91
Tkinter reference
New Mexico Tech Computer Center

.state(newstate=None)
Returns the window's current state, one of:
• "normal": Displayed normally.
• "iconic": Iconified with the .iconify() method.
• "withdrawn": Hidden; see the .withdraw() method below.
To change the window's state, pass one of the strings above as an argument to the method. For ex-
ample, to iconify a Toplevel instance T, use “T.state("iconify") ”.
.title ( text=None )
Set the window title. If the argument is omitted, returns the current title.
.transient ( parent=None )
Make this window a transient window for some parent window; the default parent window is
this window's parent.
This method is useful for short-lived pop-up dialog windows. A transient window always appears
in front of its parent. If the parent window is iconified, the transient is iconified as well.
.withdraw()
Hides the window. Restore it with .deiconify() or .iconify().
25. Universal widget methods
The methods are defined below on all widgets. In the descriptions, w can be any widget of any type.
w.after ( delay_ms, callback=None, *args )
Requests Tkinter to call function callback with arguments args after a delay of at least delay_ms
milliseconds. There is no upper limit to how long it will actually take, but your callback won't be
called sooner than you request, and it will be called only once.
This method returns an integer “after identifier” that can be passed to the .after_cancel()
method if you want to cancel the callback.
If you do not pass a callback argument, this method waits delay_ms milliseconds, as in the
.sleep() function of the standard Python time module7.
w.after_cancel ( id )
Cancels a request for callback set up earlier .after(). The id argument is the result returned by
the original .after() call.
w.after_idle ( func, *args )
Requests that Tkinter call function func with arguments args next time the system is idle, that is,
next time there are no events to be processed. The callback will be called only once. If you want
your callback to be called again, you must call the .after_idle method again.
w.bell()
Makes a noise, usually a beep.
w.bind ( sequence=None, func=None, add=None )
This method is used to attach an event binding to a widget. See Section 30, “Events” (p. 106) for the
overview of event bindings.
The sequence argument describes what event we expect, and the func argument is a function to
be called when that event happens to the widget. If there was already a binding for that event for
7 http://docs.python.org/library/time.html
New Mexico Tech Computer Center
Tkinter reference
92

this widget, normally the old callback is replaced with func, but you can preserve both callbacks
by passing add="+".
w.bind_all ( sequence=None, func=None, add=None )
Like .bind(), but applies to all widgets in the entire application.
w.bind_class ( className, sequence=None, func=None, add=None )
Like .bind(), but applies to all widgets named className (e.g., "Button").
w.bindtags ( tagList=None )
If you call this method, it will return the “binding tags” for the widget as a sequence of strings. A
binding tag is the name of a window (starting with ".") or the name of a class (e.g., "Listbox").
You can change the order in which binding levels are called by passing as an argument the sequence
of binding tags you want the widget to use.
See Section 30, “Events” (p. 106) for a discussion of binding levels and their relationship to tags.
w.cget ( option )
Returns the current value of option as a string. You can also get the value of an option for widget
w as w[option].
w.clipboard_append ( text )
Appends the given text string to the display's clipboard, where cut and pasted strings are stored
for all that display's applications.
w.clipboard_clear()
Clears the display's clipboard (see .clipboard_append() above).
w.column_configure()
See Section 4.2, “Other grid management methods” (p. 6).
w.config( option=value, ... )
Same as .configure().
w.configure ( option=value, ... )
Set the values of one or more options. For the options whose names are Python reserved words
(class, from, in), use a trailing underbar: "class_", "from_", "in_".
You can also set the value of an option for widget w with the statement
w[option] = value
If you call the .config() method on a widget with no arguments, you'll get a dictionary of all the
widget's current options. The keys are the option names (including aliases like bd for borderwidth).
The value for each key is:
• for most entries, a five-tuple: (option name, option database key, option database class, default
value, current value); or,
• for alias names (like "fg"), a two-tuple: (alias name, equivalent standard name).
w.destroy()
Calling w.destroy() on a widget w destroys w and all its children.
w.event_add ( virtual, *sequences )
This method creates a virtual event whose name is given by the virtual string argument. Each
additional argument describes one sequence, that is, the description of a physical event. When that
event occurs, the new virtual event is triggered.
See Section 30, “Events” (p. 106) for a general description of virtual events.
93
Tkinter reference
New Mexico Tech Computer Center

w.event_delete ( virtual, *sequences )
Deletes physical events from the virtual event whose name is given by the string virtual. If all
the physical events are removed from a given virtual event, that virtual event won't happen anymore.
w.event_generate ( sequence, **kw )
This method causes an event to trigger without any external stimulus. The handling of the event is
the same as if it had been triggered by an external stimulus. The sequence argument describes the
event to be triggered. You can set values for selected fields in the Event object by providing
keyword=value arguments, where the keyword specifies the name of a field in the Event object.
See Section 30, “Events” (p. 106) for a full discussion of events.
w.event_info ( virtual=None )
If you call this method without an argument, you'll get back a sequence of all the currently defined
virtual event names.
To retrieve the physical events associated with a virtual event, pass this method the name of the
virtual event and you will get back a sequence of the physical sequence names, or None if the
given virtual event has never been defined.
w.focus_displayof()
Returns the name of the window that currently has input focus on the same display as the widget.
If no such window has input focus, returns None.
See Section 29, “Focus: routing keyboard input” (p. 105) for a general description of input focus.
w.focus_force()
Force the input focus to the widget. This is impolite. It's better to wait for the window manager to
give you the focus. See also .grab_set_global() below.
w.focus_get()
Get the name of the widget that has focus in this application, if any—otherwise return None.
w.focus_lastfor()
This method retrieves the name of the widget that last had the input focus in the top-level window
that contains w. If none of this top-level's widgets have ever had input focus, it returns the name of
the top-level widget. If this application doesn't have the input focus, .focus_lastfor() will return
the name of the widget that will get the focus next time it comes back to this application.
w.focus_set()
If w's application has the input focus, the focus will jump to w. If w's application doesn't have focus,
Tk will remember to give it to w next the application gets focus.
w.grab_current()
If there is a grab in force for w's display, return its identifier, otherwise return None. Refer to Sec-
tion 30, “Events” (p. 106) for a discussion of grabs.
w.grab_release()
If w has a grab in force, release it.
w.grab_set()
Widget w grabs all events for w's application. If there was another grab in force, it goes away. See
Section 30, “Events” (p. 106) for a discussion of grabs.
w.grab_set_global()
Widget w grabs all events for the entire screen. This is considered impolite and should be used only
in great need. Any other grab in force goes away. Try to use this awesome power only for the forces
of good, and never for the forces of evil, okay?
New Mexico Tech Computer Center
Tkinter reference
94

w.grab_status()
If there is a local grab in force (set by .grab_set()), this method returns the string "local". If
there is a global grab in force (from .grab_set_global()), it returns "global". If no grab is in
force, it returns None.
w.grid_forget()
See Section 4.2, “Other grid management methods” (p. 6).
w.grid_propagate()
See Section 4.2, “Other grid management methods” (p. 6).
w.grid_remove()
See Section 4.2, “Other grid management methods” (p. 6).
w.image_names()
Returns the names of all the images in w's application as a sequence of strings.
w.keys()
Returns the option names for the widget as a sequence of strings.
w.lift ( aboveThis=None )
If the argument is None, the window containing w is moved to the top of the window stacking order.
To move the window just above some Toplevel window w, pass w as an argument.
w.lower ( belowThis=None )
If the argument is None, the window containing w is moved to the bottom of the window stacking
order. To move the window just below some Toplevel window w, pass w as an argument.
w.mainloop()
This method must be called, generally after all the static widgets are created, to start processing
events. You can leave the main loop with the .quit() method (below). You can also call this
method inside an event handler to resume the main loop.
w.nametowidget ( name )
This method returns the actual widget whose path name is name. See Section 5.11, “Window
names” (p. 15). If the name is unknown, this method will raise KeyError.
w.option_add ( pattern, value, priority=None )
This method adds default option values to the Tkinter option database. The pattern is a string
that specifies a default value for options of one or more widgets. The priority values are one
of:
For global default properties of widgets.
20
For default properties of specific applications.
40
For options that come from user files such as their .Xdefaults file.
60
For options that are set after the application starts up. This is the default priority level.
80
Higher-level priorities take precedence over lower-level ones. See Section 26, “Standardizing ap-
pearance” (p. 100) for an overview of the option database. The syntax of the pattern argument to
.option_add() is the same as the option-pattern part of the resource specification line.
For example, to get the effect of this resource specification line:
*Button*font: times 24 bold
your application (self in this example) might include these lines:
95
Tkinter reference
New Mexico Tech Computer Center

self.bigFont = tkFont.Font ( family="times", size=24,
weight="bold" )
self.option_add ( "*Button*font", self.bigFont )
Any Button widgets created after executing these lines would default to bold Times 24 font (unless
overriden by a font option to the Button constructor).
w.option_clear()
This method removes all options from the Tkinter option database. This has the effect of going back
to all the default values.
w.option_get ( name, classname )
Use this method to retrieve the current value of an option from the Tkinter option database. The
first argument is the instance key and the second argument is the class key. If there are any matches,
it returns the value of the option that best matches. If there are no matches, it returns "".
Refer to Section 26, “Standardizing appearance” (p. 100) for more about how keys are matched with
options.
w.option_readfile ( fileName, priority=None )
As a convenience for user configuration, you can designate a named file where users can put their
preferred options, using the same format as the .Xdefaults file. Then, when your application is
initializing, you can pass that file's name to this method, and the options from that file will be added
to the database. If the file doesn't exist, or its format is invalid, this method will raise TclError.
Refer to Section 26, “Standardizing appearance” (p. 100) for an introduction to the options database
and the format of option files.
w.quit()
This method exits the main loop. See .mainloop(), above, for a discussion of main loops.
w.rowconfigure()
See Section 4.2, “Other grid management methods” (p. 6).
w.selection_clear()
If w currently has a selection (such as a highlighted segment of text in an entry widget), clear that
selection.
w.selection_get()
If w currently has a selection, this method returns the selected text. If there is no selection, it raises
TclError.
w.selection_own()
Make w the owner of the selection in w's display, stealing it from the previous owner, if any.
w.selection_own_get()
Returns the widget that currently owns the selection in w's display. Raises TclError if there is no
such selection.
w.tk_focusFollowsMouse()
Normally, the input focus cycles through a sequence of widgets determined by their hierarchy and
creation order; see Section 29, “Focus: routing keyboard input” (p. 105). You can, instead, tell Tkinter
to force the focus to be wherever the mouse is; just call this method. There is no easy way to undo
it, however.
w.tk_focusNext()
Returns the widget that follows w in the focus traversal sequence. Refer to Section 29, “Focus:
routing keyboard input” (p. 105) for a discussion of focus traversal.
New Mexico Tech Computer Center
Tkinter reference
96

w.tk_focusPrev()
Returns the widget that precedes w in the focus traversal sequence.
w.unbind ( sequence, funcid=None )
This method deletes bindings on w for the event described by sequence. If the second argument
is a callback bound to that sequence, that callback is removed and the rest, if any, are left in place.
If the second argument is omitted, all bindings are deleted.
See Section 30, “Events” (p. 106), below, for a general discussion of event bindings.
w.unbind_all ( sequence )
Deletes all event bindings throughout the application for the event described by the given sequence.
w.unbind_class ( className, sequence )
Like .unbind(), but applies to all widgets named className (e.g., "Entry" or "Listbox").
w.update()
This method forces the updating of the display. It should be used only if you know what you're
doing, since it can lead to unpredictable behavior or looping. It should never be called from an event
callback or a function that is called from an event callback.
w.update_idletasks()
Some tasks in updating the display, such as resizing and redrawing widgets, are called idle tasks
because they are usually deferred until the application has finished handling events and has gone
back to the main loop to wait for new events.
If you want to force the display to be updated before the application next idles, call the w.update_id-
letasks() method on any widget.
w.wait_variable ( v )
Waits until the value of variable v is set, even if the value does not change. This method enters a
local wait loop, so it does not block the rest of the application.
w.wait_visibility ( w )
Wait until widget w (typically a Toplevel) is visible.
w.wait_window ( w )
Wait until window w is destroyed.
w.winfo_children()
Returns a list of all w's children, in their stacking order from lowest (bottom) to highest (top).
w.winfo_class()
Returns w's class name (e.g., "Button").
w.winfo_containing ( rootX, rootY, displayof=0 )
This method is used to find the window that contains point (rootX, rootY). If the displayof
option is false, the coordinates are relative to the application's root window; if true, the coordinates
are treated as relative to the top-level window that contains w. If the specified point is in one of the
application's top-level window, this method returns that window; otherwise it returns None.
w.winfo_depth()
Returns the number of bits per pixel in w's display.
w.winfo_fpixels ( number )
For any dimension number (see Section 5.1, “Dimensions” (p. 8)), this method returns that distance
in pixels on w's display, as a floating-point number.
97
Tkinter reference
New Mexico Tech Computer Center

w.winfo_geometry()
Returns the geometry string describing the size and on-screen location of w. See Section 5.10,
“Geometry strings” (p. 14).
Warning
The geometry is not accurate until the application has updated its idle tasks. In particular, all geometries
are initially "1x1+0+0" until the widgets and geometry manager have negotiated their sizes and posi-
tions. See the .update_idletasks() method, above, in this section to see how to insure that the
widget's geometry is up to date.
w.winfo_height()
Returns the current height of w in pixels. See the remarks on geometry updating under
.winfo_geometry(), above. You may prefer to use .winfo_reqheight(), described below,
which is always up to date.
w.winfo_id()
Returns an integer that uniquely identifies w within its top-level window. You will need this for the
.winfo_pathname() method, below.
w.winfo_ismapped()
This method returns true if w is mapped, false otherwise. A widget is mapped if it has been gridded
(or placed or packed, if you are using one of the other geometry managers) into its parent, and if
its parent is mapped, and so on up to the top-level window.
w.winfo_manager()
If w has not been gridded (or placed via one of the other geometry managers), this method returns
an empty string. If w has been gridded or otherwise placed, it returns a string naming the geometry
manager for w: this value will be one of "grid", "pack", "place", "canvas", or "text".
w.winfo_name()
This method returns w's name relative to its parent. See Section 5.11, “Window names” (p. 15). Also
see .winfo_pathname(), below, to find out how to obtain a widget's path name.
w.winfo_parent()
Returns w's parent's path name, or an empty string if w is a top-level window. See Section 5.11,
“Window names” (p. 15) above, for more on widget path names.
w.winfo_pathname ( id, displayof=0 )
If the displayof argument is false, returns the window path name of the widget with unique
identifier id in the application's main window. If displayof is true, the id number specifies a
widget in the same top-level window as w. See Section 5.11, “Window names” (p. 15) for a discussion
of widget path names.
w.winfo_pixels ( number )
For any dimension number (see Dimensions, above), this method returns that distance in pixels on
w's display, as an integer.
w.winfo_pointerx()
Returns the same value as the x coordinate returned by .winfo_pointerxy().
w.winfo_pointerxy()
Returns a tuple (x, y) containing the coordinates of the mouse pointer relative to w's root window.
If the mouse pointer isn't on the same screen, returns (-1, -1).
w.winfo_pointery()
Returns the same value as the y coordinate returned by .winfo_pointerxy().
New Mexico Tech Computer Center
Tkinter reference
98

w.winfo_reqheight()
These methods return the requested height of widget w. This is the minimum height necessary so
that all of w's contents have the room they need. The actual height may be different due to negotiations
with the geometry manager.
w.winfo_reqwidth()
Returns the requested width of widget w, the minimum width necessary to contain w. As with
.winfo_reqheight(), the actual width may be different due to negotiations with the geometry
manager.
w.winfo_rgb ( color )
For any given color, this method returns the equivalent red-green-blue color specification as a 3-
tuple (r, g, b), where each number is an integer in the range [0, 65536). For example, if the
color is "green", this method returns the 3-tuple (0, 65535, 0).
For more on specifying colors, see Section 5.3, “Colors” (p. 9).
w.winfo_rootx()
Returns the x coordinates of the left-hand side of w's root window relative to w's parent.
If w has a border, this is the outer edge of the border.
w.winfo_rooty()
Returns the y coordinate of the top side of w's root window relative to w's parent.
If w has a border, this is the top edge of the border.
w.winfo_screenheight()
Returns the height of the screen in pixels.
w.winfo_screenmmheight()
Returns the height of the screen in millimeters.
w.winfo_screenmmwidth()
Returns the width of the screen in millimeters.
w.winfo_screenvisual()
Returns a string that describes the display's method of color rendition. This is usually "truecolor"
for 16- or 24-bit displays, "pseudocolor" for 256-color displays.
w.winfo_screenwidth()
Returns the width of the screen in pixels.
w.winfo_toplevel()
Returns the top-level window containing w. That window supports all the methods on Toplevel
widgets; see Section 24, “Toplevel: Top-level window methods” (p. 90).
w.winfo_viewable()
A predicate that returns a True value if w is viewable, that is, if it and all its ancestors in the same
Toplevel are mapped.
w.winfo_width()
Returns the current width of w in pixels. See the remarks on geometry updating under
.winfo_geometry(), above. You may prefer to use the .winfo_reqwidth() method, described
above; it is always up to date.
w.winfo_x()
Returns the x coordinate of the left side of w relative to its parent. If w has a border, this is the outer
edge of the border.
99
Tkinter reference
New Mexico Tech Computer Center

w.winfo_y()
Returns the y coordinate of the top side of w relative to its parent. If w has a border, this is the outer
edge of the border.
26. Standardizing appearance and the option database
It's easy to apply colors, fonts, and other options to the widgets when you create them. However,
• if you want a lot of widgets to have the same background color or font, it's tedious to specify each
option each time, and
• it's nice to let the user override your choices with their favorite color schemes, fonts, and other choices.
Accordingly, we use the idea of an option database to set up default option values.
• Your application can specify a file (such as the standard .Xdefaults file used by the X Window
System) that contains the user's preferences. You can set up your application to read the file and tell
Tkinter to use those defaults. See the section on the .option_readfile() method, above, in the
section on Section 25, “Universal widget methods” (p. 92), for the structure of this file.
• Your application can directly specify defaults for one or many types of widgets by using the .op-
tion_add() method; see this method under Section 25, “Universal widget methods” (p. 92).
Before we discuss how options are set, consider the problem of customizing the appearance of GUIs in
general. We could give every widget in the application a name, and then ask the user to specify every
property of every name. But this is cumbersome, and would also make the application hard to reconfig-
ure—if the designer adds new widgets, the user would have to describe every property of every new
widget.
So, the option database allows the programmer and the user to specify general patterns describing which
widgets to configure.
These patterns operate on the names of the widgets, but widgets are named using two parallel naming
schemes:
a. Every widget has a class name. By default, the class name is the same as the class constructor: "Button"
for buttons, "Frame" for a frame, and so on. However, you can create new classes of widgets, usually
inheriting from the Frame class, and give them new names of your own creation. See Section 26.1,
“How to name a widget class” (p. 101) for details.
b. You can also give any widget an instance name. The default name of a widget is usually a meaningless
number (see Section 5.11, “Window names” (p. 15)). However, as with widget classes, you can assign
a name to any widget. See the section Section 26.2, “How to name a widget instance” (p. 101) for details.
Every widget in every application therefore has two hierarchies of names—the class name hierarchy
and the instance name hierarchy. For example, a button embedded in a text widget which is itself em-
bedded in a frame would have the class hierarchy Frame.Text.Button. It might also have an instance
hierarchy something like .mainFrame.messageText.panicButton if you so named all the instances.
The initial dot stands for the root window; see Section 5.11, “Window names” (p. 15) for more inform-
ation on window path names.
The option database mechanism can make use of either class names or instance names in defining options,
so you can make options apply to whole classes (e.g., all buttons have a blue background) or to specific
instances (e.g., the Panic Button has red letters on it). After we look at how to name classes and instances,
in Section 26.3, “Resource specification lines” (p. 101), we'll discuss how the options database really
works.
New Mexico Tech Computer Center
Tkinter reference
100

26.1. How to name a widget class
For example, suppose that Jukebox is a new widget class that you have created. It's probably best to
have new widget classes inherit from the Frame class, so to Tkinter it acts like a frame, and you can
arrange other widgets such as labels, entries, and buttons inside it.
You set the new widget's class name by passing the name as the class_ attribute to the parent con-
structor in your new class's constructor. Here is a fragment of the code that defines the new class:
class Jukebox(Frame):
def __init__(self, master):
"Constructor for the Jukebox class"
Frame.__init__ ( self, master, class_="Jukebox" )
self.__createWidgets()
...
26.2. How to name a widget instance
To give an instance name to a specific widget in your application, set that widget's name option to a
string containing the name.
Here's an example of an instance name. Suppose you are creating several buttons in an application, and
you want one of the buttons to have an instance name of panicButton. Your call to the constructor
might look like this:
self.panic = Button ( self, name="panicButton", text="Panic", ...)
26.3. Resource specification lines
Each line in an option file specifies the value of one or more options in one or more applications and
has one of these formats:
app option-pattern: value
option-pattern: value
The first form sets options only when the name of the application matches app; the second form sets
options for all applications.
For example, if your application is called xparrot, a line of the form
xparrot*background: LimeGreen
sets all background options in the xparrot application to lime green. (Use the -name option on the
command line when launching your application to set the name to "xparrot".)
The option-pattern part has this syntax:
{{*|.}name}...option
That is, each option-pattern is a list of zero or more names, each of which is preceded by an asterisk
or period. The last name in the series is the name of the option you are setting. Each of the rest of the
names can be either:
• the name of a widget class (capitalized), or
• the name of an instance (lowercased).
101
Tkinter reference
New Mexico Tech Computer Center

The way the option patterns work is a little complicated. Let's start with a simple example:
*font: times 24
This line says that all font options should default to 24-point Times. The * is called the loose binding
symbol, and means that this option pattern applies to any font option anywhere in any application.
Compare this example:
*Listbox.font: lucidatypewriter 14
The period between Listbox and font is called the tight binding symbol, and it means that this rule
applies only to font options for widgets in class Listbox.
As another example, suppose your xparrot application has instances of widgets of class Jukebox. In
order to set up a default background color for all widgets of that class Jukebox, you could put a line
in your options file like this:
xparrot*Jukebox*background: PapayaWhip
The loose-binding (*) symbol between Jukebox and background makes this rule apply to any
background attribute of any widget anywhere inside a Jukebox. Compare this option line:
xparrot*Jukebox.background: NavajoWhite
This rule will apply to the frame constituting the Jukebox widget itself, but because of the tight-binding
symbol it will not apply to widgets that are inside the Jukebox widget.
In the next section we'll talk about how Tkinter figures out exactly which option value to use if there
are multiple resource specification lines that apply.
26.4. Rules for resource matching
When you are creating a widget, and you don't specify a value for some option, and two or more resource
specifications apply to that option, the most specific one applies.
For example, suppose your options file has these two lines:
*background: LimeGreen
*Listbox*background: FloralWhite
Both specifications apply to the background option in a Listbox widget, but the second one is more
specific, so it will win.
In general, the names in a resource specification are a sequence n1, n2, n3, ..., o where each ni is a class
or instance name. The class names are ordered from the highest to the lowest level, and o is the name
of an option.
However, when Tkinter is creating a widget, all it has is the class name and the instance name of that
widget.
Here are the precedence rules for resource specifications:
1. The name of the option must match the o part of the option-pattern. For example, if the rule is
xparrot*indicatoron: 0
this will match only options named indicatoron.
New Mexico Tech Computer Center
Tkinter reference
102

2. The tight-binding operator (.) is more specific than the loose-binding operator (*). For example, a
line for *Button.font is more specific than a line for *Button*font.
3. References to instances are more specific than references to classes. For example, if you have a button
whose instance name is panicButton, a rule for *panicButton*font is more specific than a rule
for *Button*font.
4. A rule with more levels is more specific. For example, a rule for *Button*font is more specific
than a rule for *font.
5. If two rules have same number of levels, names earlier in the list are more specific than later names.
For example, a rule for xparrot*font is more specific than a rule for *Button*font.
27. Connecting your application logic to the widgets
The preceding sections talked about how to arrange and configure the widgets—the front panel of the
application.
Next, we'll talk about how to connect up the widgets to the logic that carries out the actions that the
user requests.
• To make your application respond to events such as mouse clicks or keyboard inputs, there are two
methods:
• Some controls such as buttons have a command attribute that lets you specify a procedure, called
a handler, that will be called whenever the user clicks that control.
The sequence of events for using a Button widget is very specific, though. The user must move
the mouse pointer onto the widget with mouse button 1 up, then press mouse button 1, and then
release mouse button 1 while still on the widget. No other sequence of events will “press” a Button
widget.
• There is a much more general mechanism that can let your application react to many more kinds
of inputs: the press or release of any keyboard key or mouse button; movement of the mouse into,
around, or out of a widget; and many other events. As with command handlers, in this mechanism
you write handler procedures that will be called whenever certain types of events occur. This
mechanism is discussed under Section 30, “Events” (p. 106).
• Many widgets require you to use control variables, special objects that connect widgets together and
to your program, so that you can read and set properties of the widgets. Control variables will be
discussed in the next section.
28. Control variables: the values behind the widgets
A Tkinter control variable is a special object that acts like a regular Python variable in that it is a container
for a value, such as a number or string.
One special quality of a control variable is that it can be shared by a number of different widgets, and
the control variable can remember all the widgets that are currently sharing it. This means, in particular,
that if your program stores a value v into a control variable c with its c.set(v) method, any widgets that
are linked to that control variable are automatically updated on the screen.
Tkinter uses control variables for a number of important functions, for example:
• Checkbuttons use a control variable to hold the current state of the checkbutton (on or off).
103
Tkinter reference
New Mexico Tech Computer Center

• A single control variable is shared by a group of radiobuttons and can be used to tell which one of
them is currently set. When the user clicks on one radiobutton in a group, the sharing of this control
variable is the mechanism by which Tkinter groups radiobuttons so that when you set one, any other
set radiobutton in the group is cleared.
• Control variables hold text string for several applications. Normally the text displayed in an Entry
widget is linked to a control variable. In several other controls, it is possible to use a string-valued
control variable to hold text such as the labels of checkbuttons and radiobuttons and the content of
Label widgets.
For example, you could link an Entry widget to a Label widget so that when the user changes the
text in the entry and presses the Enter key, the label is automatically updated to show that same text.
To get a control variable, use one of these class constructors, depending on what type of values you
need to store in it:
v = DoubleVar()
# Holds a float; default value 0.0
v = IntVar()
# Holds an integer; default value 0
v = StringVar()
# Holds a string; default value ""
All control variables have these two methods:
.get()
Returns the current value of the variable.
.set ( value )
Changes the current value of the variable. If any widget options are slaved to this variable, those
widgets will be updated when the main loop next idles; see .update_idletasks() in Section 25,
“Universal widget methods” (p. 92) for more information on controlling this update cycle.
Here are some comments on how control variables are used with specific widgets:
Button
You can set its textvariable to a StringVar. Anytime that variable is changed, the text on the
button will be updated to display the new value. This is not necessary unless the button's text is
actually going to change: use the text attribute if the button's label is static.
Checkbutton
Normally, you will set the widget's variable option to an IntVar, and that variable will be set
to 1 when the checkbutton is turned on and to 0 when it is turned off. However, you can pick different
values for those two states with the onvalue and offvalue options, respectively.
You can even use a StringVar as the checkbutton's variable, and supply string values for the
offvalue and onvalue. Here's an example:
self.spamVar = StringVar()
self.spamCB
= Checkbutton ( self, text="Spam?",
variable=self.spamVar, onvalue="yes", offvalue="no" )
If this checkbutton is on, self.spamVar.get() will return the string "yes"; if the checkbutton
is off, that same call will return the string "no". Furthermore, your program can turn the checkbutton
on by calling .set("yes").
You can also the textvariable option of a checkbutton to a StringVar. Then you can change
the text label on that checkbutton using the .set() method on that variable.
New Mexico Tech Computer Center
Tkinter reference
104

Entry
Set its textvariable option to a StringVar. Use that variable's .get() method to retrieve the
text currently displayed in the widget. You can also the variable's .set() method to change the
text displayed in the widget.
Label
You can set its textvariable option to a StringVar. Then any call to the variable's .set()
method will change the text displayed on the label. This is not necessary if the label's text is static;
use the text attribute for labels that don't change while the application is running.
Menubutton
If you want to be able to change the text displayed on the menu button, set its textvariable option
to a StringVar and use that variable's .set() method to change the displayed text.
Radiobutton
The variable option must be set to a control variable, either an IntVar or a StringVar. All the
radiobuttons in a functional group must share the same control variable.
Set the value option of each radiobutton in the group to a different value. Whenever the user sets
a radiobutton, the variable will be set to the value option of that radiobutton, and all the other ra-
diobuttons that share the group will be cleared.
You might wonder, what state is a group of radiobuttons in when the control variable has never
been set and the user has never clicked on them? Each control variable has a default value: 0 for an
IntVar, 0.0 for a DoubleVar, and "" for a StringVar. If one of the radiobuttons has that value,
that radiobutton will be set initially. If no radiobutton's value option matches the value of the
variable, the radiobuttons will all appear to be cleared.
If you want to change the text label on a radiobutton during the execution of your application, set
its textvariable option to a StringVar. Then your program can change the text label by passing
the new label text to the variable's .set() method.
Scale
For a scale widget, set its variable option to a control variable of any class, and set its from_ and
to options to the limiting values for the opposite ends of the scale.
For example, you could use an IntVar and set the scale's from_=0 and to=100. Then every user
change to the widget would change the variable's value to some value between 0 and 100 inclusive.
Your program can also move the slider by using the .set() method on the control variable. To
continue the above example, .set(75) would move the slider to a position three-fourths of the
way along its trough.
To set up a Scale widget for floating values, use a DoubleVar.
You can use a StringVar as the control variable of a Scale widget. You will still need to provide
numeric from_ and to values, but the numeric value of the widget will be converted to a string
for storage in the StringVar. Use the scale's digits option to control the precision of this conver-
sion.
29. Focus: routing keyboard input
To say a widget has focus means that keyboard input is currently directed to that widget.
• By focus traversal, we mean the sequence of widgets that will be visited as the user moves from widget
to widget with the tab key. See below for the rules for this sequence.
• You can traverse backwards using shift-tab.
105
Tkinter reference
New Mexico Tech Computer Center

• The Entry and Text widgets are intended to accept keyboard input, and if an entry or text widget
currently has the focus, any characters you type into it will be added to its text. The usual editing
characters such as ← and → will have their usual effects.
• Because Text widgets can contain tab characters, you must use the special key sequence control-tab
to move the focus past a text widget.
• Most of the other types of widgets will normally be visited by focus traversal, and when they have
focus:
• Button widgets can be “pressed” by pressing the spacebar.
• Checkbutton widgets can be toggled between set and cleared states using the spacebar.
• In Listbox widgets, the ↑ and ↓ keys scroll up or down one line; the PageUp and PageDown keys
scroll by pages; and the spacebar selects the current line, or de-selects it if it was already selected.
• You can set a Radiobutton widget by pressing the spacebar.
• Horizontal Scale widgets respond to the ← and → keys, and vertical ones respond to ↑ and ↓.
• In a Scrollbar widget, the PageUp and PageDown keys move the scrollbar by pageloads. The
↑ and ↓ keys will move vertical scrollbars by units, and the ← and → keys will move horizontal
scrollbars by units.
• Many widgets are provided with an outline called the focus highlight that shows the user which widget
has the highlight. This is normally a thin black frame located just outside the widget's border (if any).
For widgets that don't normally have a focus highlight (specifically, frames, labels, and menus), you
can set the highlightthickness option to a nonzero value to make the focus highlight visible.
• You can also change the color of the focus highlight using the highlightcolor option.
• Widgets of class Frame, Label, and Menu are not normally visited by the focus. However, you can
set their takefocus options to 1 to get them included in focus traversal. You can also take any
widget out of focus traversal by setting its takefocus option to 0.
The order in which the tab key traverses the widgets is:
• For widgets that are children of the same parent, focus goes in the same order the widgets were created.
• For parent widgets that contain other widgets (such as frames), focus visits the parent widget first
(unless its takefocus option is 0), then it visits the child widgets, recursively, in the order they were
created.
To sum up: to set up the focus traversal order of your widgets, create them in that order. Remove widgets
from the traversal order by setting their takefocus options to 0, and for those whose default takefocus
option is 0, set it to 1 if you want to add them to the order.
The above describes the default functioning of input focus in Tkinter. There is another, completely dif-
ferent way to handle it—let the focus go wherever the mouse goes. Under Section 25, “Universal widget
methods” (p. 92), refer to the .tk_focusFollowsMouse() method.
You can also add, change or delete the way any key on the keyboard functions inside any widget by
using event bindings. See Section 30, “Events” (p. 106) for the details.
30. Events: responding to stimuli
An event is something that happens to your application—for example, the user presses a key or clicks
or drags the mouse—to which the application needs to react.
New Mexico Tech Computer Center
Tkinter reference
106

The widgets normally have a lot of built-in behaviors. For example, a button will react to a mouse click
by calling its command callback. For another example, if you move the focus to an entry widget and
press a letter, that letter gets added to the content of the widget.
However, the event binding capability of Tkinter allows you to add, change, or delete behaviors.
First, some definitions:
• An event is some occurrence that your application needs to know about.
• An event handler is a function in your application that gets called when an event occurs.
• We call it binding when your application sets up an event handler that gets called when an event
happens to a widget.
30.1. Levels of binding
You can bind a handler to an event at any of three levels:
1. Instance binding: You can bind an event to one specific widget. For example, you might bind the
PageUp key in a canvas widget to a handler that makes the canvas scroll up one page. To bind an
event of a widget, call the .bind() method on that widget (see Section 25, “Universal widget
methods” (p. 92)).
For example, suppose you have a canvas widget named self.canv and you want to draw an orange
blob on the canvas whenever the user clicks the mouse button 2 (the middle button). To implement
this behavior:
self.canv.bind ( "<Button-2>", self.__drawOrangeBlob )
The first argument is a sequence descriptor that tells Tkinter that whenever the middle mouse button
goes down, it is to call the event handler named self.__drawOrangeBlob. (See Section 30.6,
“Writing your handler: The Event class” (p. 112), below, for an overview of how to write handlers
such as .__drawOrangeBlob()). Note that you omit the parentheses after the handler name, so
that Python will pass in a reference the handler instead of trying to call it right away.
2. Class binding: You can bind an event to all widgets of a class. For example, you might set up all
Button widgets to respond to middle mouse button clicks by changing back and forth between
English and Japanese labels. To bind an event to all widgets of a class, call the .bind_class()
method on any widget (see Section 25, “Universal widget methods” (p. 92), above).
For example, suppose you have several canvases, and you want to set up mouse button 2 to draw
an orange blob in any of them. Rather than having to call .bind() for every one of them, you can
set them all up with one call something like this:
self.bind_class ( "Canvas", "<Button-2>",
self.__drawOrangeBlob )
3. Application binding: You can set up a binding so that a certain event calls a handler no matter what
widget has the focus or is under the mouse. For example, you might bind the PrintScrn key to all the
widgets of an application, so that it prints the screen no matter what widget gets that key. To bind
an event at the application level, call the .bind_all() method on any widget (see Section 25,
“Universal widget methods” (p. 92)).
Here's how you might bind the PrintScrn key, whose “key name” is "Print":
self.bind_all ( "<Key-Print>", self.__printScreen )
107
Tkinter reference
New Mexico Tech Computer Center

30.2. Event sequences
Tkinter has a powerful and general method for allowing you to define exactly which events, both spe-
cific and general, you want to bind to handlers.
In general, an event sequence is a string containing one or more event patterns. Each event pattern describes
one thing that can happen. If there is more than one event pattern in a sequence, the handler will be
called only when all the patterns happen in that same sequence.
The general form of an event pattern is:
<[modifier-]...type[-detail]>
• The entire pattern is enclosed inside <…>.
• The event type describes the general kind of event, such as a key press or mouse click. See Section 30.3,
“Event types” (p. 108).
• You can add optional modifier items before the type to specify combinations such as the shift or
control keys being depressed during other key presses or mouse clicks. Section 30.4, “Event modifi-
ers” (p. 109)
• You can add optional detail items to describe what key or mouse button you're looking for. For
mouse buttons, this is 1 for button 1, 2 for button 2, or 3 for button 3.
• The usual setup has button 1 on the left and button 3 on the right, but left-handers can swap these
positions.
• For keys on the keyboard, this is either the key's character (for single-character keys like the A or
* key) or the key's name; see Section 30.5, “Key names” (p. 110) for a list of all key names.
Here are some examples to give you the flavor of event patterns:
The user pressed the first mouse button.
<Button-1>
The user pressed the H key.
<KeyPress-H>
The user pressed control-shift-H.
<Control-Shift-KeyPress-H>
30.3. Event types
The full set of event types is rather large, but a lot of them are not commonly used. Here are most of
the ones you'll need:
Description
Name
Type
A widget is changing from being inactive to being active. This refers to
changes in the state option of a widget such as a button changing from
inactive (grayed out) to active.
Activate
36
The user pressed one of the mouse buttons. The detail part specifies which
button. For mouse wheel support under Linux, use Button-4 (scroll up)
Button
4
and Button-5 (scroll down). Under Linux, your handler for mouse wheel
bindings will distinguish between scroll-up and scroll-down by examining
the .num field of the Event instance; see Section 30.6, “Writing your handler:
The Event class” (p. 112).
New Mexico Tech Computer Center
Tkinter reference
108

Description
Name
Type
The user let up on a mouse button. This is probably a better choice in most
cases than the Button event, because if the user accidentally presses the
button, they can move the mouse off the widget to avoid setting off the event.
ButtonRelease
5
The user changed the size of a widget, for example by dragging a corner or
side of the window.
Configure
22
A widget is changing from being active to being inactive. This refers to
changes in the state option of a widget such as a radiobutton changing
from active to inactive (grayed out).
Deactivate
37
A widget is being destroyed.
Destroy
17
The user moved the mouse pointer into a visible part of a widget. (This is
different than the enter key, which is a KeyPress event for a key whose
name is actually "return".)
Enter
7
This event occurs whenever at least some part of your application or widget
becomes visible after having been covered up by another window.
Expose
12
A widget got the input focus (see Section 29, “Focus: routing keyboard in-
put” (p. 105) for a general introduction to input focus.) This can happen either
FocusIn
9
in response to a user event (like using the tab key to move focus between
widgets) or programmatically (for example, your program calls the .fo-
cus_set() on a widget).
The input focus was moved out of a widget. As with FocusIn, the user can
cause this event, or your program can cause it.
FocusOut
10
The user pressed a key on the keyboard. The detail part specifies which
key. This keyword may be abbreviated Key.
KeyPress
2
The user let up on a key.
KeyRelease
3
The user moved the mouse pointer out of a widget.
Leave
8
A widget is being mapped, that is, made visible in the application. This will
happen, for example, when you call the widget's .grid() method.
Map
19
The user moved the mouse pointer entirely within a widget.
Motion
6
The user moved the mouse wheel up or down. At present, this binding works
on Windows and MacOS, but not under Linux. For Windows and MacOS,
MouseWheel
38
see the discussion of the .delta field of the Event instance in Section 30.6,
“Writing your handler: The Event class” (p. 112). For Linux, see the note
above under Button.
A widget is being unmapped and is no longer visible. This happens, for ex-
ample, when you use the widget's .grid_remove() method.
Unmap
18
Happens when at least some part of the application window becomes visible
on the screen.
Visibility
15
30.4. Event modifiers
The modifier names that you can use in event sequences include:
True when the user is holding the alt key down.
Alt
This modifier generalizes an event type. For example, the event pattern "<Any-KeyPress>"
applies to the pressing of any key.
Any
109
Tkinter reference
New Mexico Tech Computer Center

True when the user is holding the control key down.
Control
Specifies two events happening close together in time. For example, <Double-Button-
1> describes two presses of button 1 in rapid succession.
Double
True when the user has pressed shift lock.
Lock
True when the user is holding down the shift key.
Shift
Like Double, but specifies three events in rapid succession.
Triple
You can use shorter forms of the events. Here are some examples:
• "<1>" is the same as "<Button-1>".
• "x" is the same as "<KeyPress-x>".
Note that you can leave out the enclosing "<…>" for most single-character keypresses, but you can't do
that for the space character (whose name is "<space>") or the less-than (<) character (whose name is
"<less>").
30.5. Key names
The detail part of an event pattern for a KeyPress or KeyRelease event specifies which key you're
binding. (See the Any modifier, above, if you want to get all keypresses or key releases).
The table below shows several different ways to name keys. See Section 30.6, “Writing your handler:
The Event class” (p. 112), below, for more information on Event objects, whose attributes will describe
keys in these same ways.
• The .keysym column shows the “key symbol”, a string name for the key. This corresponds to the
.keysym attribute of the Event object.
• The .keycode column is the “key code.” This identifies which key was pressed, but the code does
not reflect the state of various modifiers like the shift and control keys and the NumLock key. So, for
example, both a and A have the same key code.
• The .keysym_num column shows a numeric code equivalent to the key symbol. Unlike .keycode,
these codes are different for different modifiers. For example, the digit 2 on the numeric keypad (key
symbol KP_2) and the down arrow on the numeric keypad (key symbol KP_Down) have the same
key code (88), but different .keysym_num values (65433 and 65458, respectively).
• The “Key” column shows the text you will usually find on the physical key, such as tab.
There are many more key names for international character sets. This table shows only the “Latin-1”
set for the usual USA-type 101-key keyboard. For the currently supported set, see the manual page for
Tk keysym values8.
Key
.keysym_num
.keycode
.keysym
The left-hand alt key
65513
64
Alt_L
The right-hand alt key
65514
113
Alt_R
backspace
65288
22
BackSpace
break
65387
110
Cancel
CapsLock
65549
66
Caps_Lock
8 http://www.tcl.tk/man/tcl8.4/TkCmd/keysyms.htm
New Mexico Tech Computer Center
Tkinter reference
110

Key
.keysym_num
.keycode
.keysym
The left-hand control key
65507
37
Control_L
The right-hand control key
65508
109
Control_R
Delete
65535
107
Delete
↓
65364
104
Down
end
65367
103
End
esc
65307
9
Escape
SysReq
65378
111
Execute
Function key F1
65470
67
F1
Function key F2
65471
68
F2
Function key Fi
65469+i
66+i
Fi
Function key F12
65481
96
F12
home
65360
97
Home
insert
65379
106
Insert
←
65361
100
Left
Linefeed (control-J)
106
54
Linefeed
0 on the keypad
65438
90
KP_0
1 on the keypad
65436
87
KP_1
2 on the keypad
65433
88
KP_2
3 on the keypad
65435
89
KP_3
4 on the keypad
65430
83
KP_4
5 on the keypad
65437
84
KP_5
6 on the keypad
65432
85
KP_6
7 on the keypad
65429
79
KP_7
8 on the keypad
65431
80
KP_8
9 on the keypad
65434
81
KP_9
+ on the keypad
65451
86
KP_Add
The center key (same key as 5) on the keypad
65437
84
KP_Begin
Decimal (.) on the keypad
65439
91
KP_Decimal
delete on the keypad
65439
91
KP_Delete
/ on the keypad
65455
112
KP_Divide
↓ on the keypad
65433
88
KP_Down
end on the keypad
65436
87
KP_End
enter on the keypad
65421
108
KP_Enter
home on the keypad
65429
79
KP_Home
insert on the keypad
65438
90
KP_Insert
← on the keypad
65430
83
KP_Left
× on the keypad
65450
63
KP_Multiply
111
Tkinter reference
New Mexico Tech Computer Center

Key
.keysym_num
.keycode
.keysym
PageDown on the keypad
65435
89
KP_Next
PageUp on the keypad
65434
81
KP_Prior
→ on the keypad
65432
85
KP_Right
- on the keypad
65453
82
KP_Subtract
↑ on the keypad
65431
80
KP_Up
PageDown
65366
105
Next
NumLock
65407
77
Num_Lock
pause
65299
110
Pause
PrintScrn
65377
111
Print
PageUp
65365
99
Prior
The enter key (control-M). The name Enter refers to a
mouse-related event, not a keypress; see Section 30,
“Events” (p. 106)
65293
36
Return
→
65363
102
Right
ScrollLock
65300
78
Scroll_Lock
The left-hand shift key
65505
50
Shift_L
The right-hand shift key
65506
62
Shift_R
The tab key
65289
23
Tab
↑
65362
98
Up
30.6. Writing your handler:The Event class
The sections above tell you how to describe what events you want to handle, and how to bind them.
Now let us turn to the writing of the handler that will be called when the event actually happens.
The handler will be passed an Event object that describes what happened. The handler can be either
a function or a method. Here is the calling sequence for a regular function:
def handlerName ( event ):
And as a method:
def handlerName ( self, event ):
The attributes of the Event object passed to the handler are described below. Some of these attributes
are always set, but some are set only for certain types of events.
If the event was related to a KeyPress or KeyRelease for a key that produces a
regular ASCII character, this string will be set to that character. (For special keys like
delete, see the .keysym attribute, below.)
.char
For MouseWheel events, this attribute contains an integer whose sign is positive to
scroll up, negative to scroll down. Under Windows, this value will be a multiple of
.delta
120; for example, 120 means scroll up one step, and -240 means scroll down two steps.
Under MacOS, it will be a multiple of 1, so 1 means scroll up one step, and -2 means
scroll down two steps. For Linux mouse wheel support, see the note on the Button
event binding in Section 30.3, “Event types” (p. 108).
New Mexico Tech Computer Center
Tkinter reference
112

If the event was a Configure, this attribute is set to the widget's new height in pixels.
.height
For KeyPress or KeyRelease events, this attribute is set to a numeric code that
identifies the key. However, it does not identify which of the characters on that key
.keycode
were produced, so that “x” and “X” have the same .keyCode value. For the possible
values of this field, see Section 30.5, “Key names” (p. 110).
For KeyPress or KeyRelease events involving a special key, this attribute is set to
the key's string name, e.g., "Prior" for the PageUp key. See Section 30.5, “Key
names” (p. 110) for a complete list of .keysym names.
.keysym
For KeyPress or KeyRelease events, this is set to a numeric version of the .keysym
field. For regular keys that produce a single character, this field is set to the integer
.keysym_num
value of the key's ASCII code. For special keys, refer to Section 30.5, “Key
names” (p. 110).
If the event was related to a mouse button, this attribute is set to the button number
(1, 2, or 3). For mouse wheel support under Linux, bind Button-4 and Button-5
.num
events; when the mouse wheel is scrolled up, this field will be 4, or 5 when scrolled
down.
An integer serial number that is incremented every time the server processes a client
request. You can use .serial values to find the exact time sequence of events: those
with lower values happened sooner.
.serial
An integer describing the state of all the modifier keys. See the table of modifier masks
below for the interpretation of this value.
.state
This attribute is set to an integer which has no absolute meaning, but is incremented
every millisecond. This allows your application to determine, for example, the length
of time between two mouse clicks.
.time
A numeric code describing the type of event. For the interpretation of this code, see
Section 30.3, “Event types” (p. 108).
.type
Always set to the widget that caused the event. For example, if the event was a mouse
click that happened on a canvas, this attribute will be the actual Canvas widget.
.widget
If the event was a Configure, this attribute is set to the widget's new width in pixels.
.width
The x coordinate of the mouse at the time of the event, relative to the upper left corner
of the widget.
.x
The y coordinate of the mouse at the time of the event, relative to the upper left corner
of the widget.
.y
The x coordinate of the mouse at the time of the event, relative to the upper left corner
of the screen.
.x_root
The y coordinate of the mouse at the time of the event, relative to the upper left corner
of the screen.
.y_root
Use these masks to test the bits of the .state value to see what modifier keys and buttons were pressed
during the event:
Modifier
Mask
Shift.
0x0001
Caps Lock.
0x0002
Control.
0x0004
Left-hand Alt.
0x0008
113
Tkinter reference
New Mexico Tech Computer Center

Modifier
Mask
Num Lock.
0x0010
Right-hand Alt.
0x0080
Mouse button 1.
0x0100
Mouse button 2.
0x0200
Mouse button 3.
0x0400
Here's an example of an event handler. Under Section 30.1, “Levels of binding” (p. 107), above, there is
an example showing how to bind mouse button 2 clicks on a canvas named self.canv to a handler
called self.__drawOrangeBlob(). Here is that handler:
def __drawOrangeBlob ( self, event ):
"Draws an orange blob in self.canv where the mouse is."
r = 5
# Blob radius
self.canv.create_oval ( event.x-r, event.y-r,
event.x+r, event.y+r, fill="orange" )
When this handler is called, the current mouse position is (event.x,
event.y). The .cre-
ate_oval() method draws a circle whose bounding box is square and centered on that position and
has sides of length 2*r.
30.7.The extra arguments trick
Sometimes you would like to pass other arguments to a handler besides the event.
Here is an example. Suppose your application has an array of ten checkbuttons whose widgets are
stored in a list self.cbList, indexed by the checkbutton number in range(10).
Suppose further that you want to write one handler named .__cbHandler for <Button-1> events
in all ten of these checkbuttons. The handler can get the actual Checkbutton widget that triggered it
by referring to the .widget attribute of the Event object that gets passed in, but how does it find out
that checkbutton's index in self.cbList?
It would be nice to write our handler with an extra argument for the checkbutton number, something
like this:
def __cbHandler ( self, event, cbNumber ):
But event handlers are passed only one argument, the event. So we can't use the function above because
of a mismatch in the number of arguments.
Fortunately, Python's ability to provide default values for function arguments gives us a way out. Have
a look at this code:
def __createWidgets ( self ):
…
self.cbList = []
# Create the checkbutton list
for i in range(10):
cb = Checkbutton ( self, … )
self.cbList.append ( cb )
cb.grid( row=1, column=i )
def handler ( event, self=self, i=i ):
1
return self.__cbHandler ( event, i )
New Mexico Tech Computer Center
Tkinter reference
114

cb.bind ( "<Button-1>", handler )
…
def __cbHandler ( self, event, cbNumber ):
…
1
These lines define a new function handler that expects three arguments. The first argument is
the Event object passed to all event handlers, and the second and third arguments will be set to
their default values—the extra arguments we need to pass it.
This technique can be extended to supply any number of additional arguments to handlers.
30.8. Virtual events
You can create your own new kinds of events called virtual events. You can give them any name you
want so long as it is enclosed in double pairs of <<…>>.
For example, suppose you want to create a new event called <<panic>>, that is triggered either by
mouse button 3 or by the pause key. To create this event, call this method on any widget w:
w.event_add ( "<<panic>>", "<Button-3>",
"<KeyPress-Pause>" )
You can then use "<<panic>>" in any event sequence. For example, if you use this call:
w.bind ( "<<panic>>", h )
any mouse button 3 or pause keypress in widget w will trigger the handler h.
See .event_add(), .event_delete(), and .event_info() under Section 25, “Universal widget
methods” (p. 92) for more information about creating and managing virtual events.
31. Pop-up dialogs
Tkinter provides three modules that can create pop-up dialog windows for you:
• Section 31.1, “The tkMessageBox dialogs module” (p. 115), provides an assortment of common pop-
ups for simple tasks.
• Section 31.2, “The tkFileDialog module” (p. 117), allows the user to browse for files.
• Section 31.3, “The tkColorChooser module” (p. 118), allows the user to select a color.
31.1.The tkMessageBox dialogs module
Once you import the tkMessageBox module, you can create any of these seven common types of pop-
up menu by calling functions from this table.
.askokcancel(title, message, options)
115
Tkinter reference
New Mexico Tech Computer Center

.askquestion(title, message, options)
.askretrycancel(title, message, options)
.askyesno(title, message, options)
.showerror(title, message, options)
.showinfo(title, message, options)
.showwarning(title, message, options)
In each case, the title is a string to be displayed in the top of the window decoration. The message
argument is a string that appears in the body of the pop-up window; within this string, lines are broken
at newline ("\n") characters.
The option arguments may be any of these choices.
default
Which button should be the default choice? If you do not specify this option, the first button (“OK”,
“Yes”, or “Retry”) will be the default choice.
To specify whith button is the default choice, use default=C, where C is one of these constants
defined in tkMessageBox: CANCEL, IGNORE, OK, NO, RETRY, or YES.
icon
Selects which icon appears in the pop-up. Use an argument of the form icon=I where I is one of
these constants defined in tkMessageBox: ERROR, INFO, QUESTION, or WARNING.
parent
If you don't specify this option, the pop-up appears above your root window. To make the pop-up
appear above some child window W, use the argument parent=W.
Each of the “ask...” pop-up functions returns a value that depends on which button the user pushed
to remove the pop-up.
• askokcancel, askretrycancel, and askyesno all return a bool value: True for “OK” or “Yes”
choices, False for “No” or “Cancel” choices.
• askquestion returns u"yes" for “Yes”, or u"no" for “No”.
New Mexico Tech Computer Center
Tkinter reference
116

31.2.The tkFileDialog module
The tkFileDialog module provides two different pop-up windows you can use to give the user the
ability to find existing files or create new files.
.askopenfilename(option=value, ...)
Intended for cases where the user wants to select an existing file. If the user selects a nonexistent
file, a popup will appear informing them that the selected file does not exist.
.asksaveasfilename(option=value, ...)
Intended for cases where the user wants to create a new file or replace an existing file. If the user
selects an existing file, a pop-up will appear informing that the file already exists, and asking if they
really want to replace it.
The arguments to both functions are the same:
defaultextension=s
The default file extension, a string starting with a period ("."). If the user's reply contains a period,
this argument has no effect. It is appended to the user's reply in case there are no periods.
For example, if you supply a defaultextension=".jpg" argument and the user enters "gojiro",
the returned file name will be "gojiro.jpg".
filetypes=[(label1, pattern1), (label2, pattern2), ...]
A list of two-element tuples containing file type names and patterns that will select what appears
in the file listing. In the screen picture below, note the pull-down menu labeled “Files of type:”. The
filetypes argument you supply will populate this pull-down list. Each pattern is a file type
name (“PNG” in the example) and a pattern that selects files of a given type (“(*.png)” in the ex-
ample).
initialdir=D
The path name of the directory to be displayed initially. The default directory is the current working
directory.
initialfile=F
The file name to be displayed initially in the “File name:” field, if any.
parent=W
To make the pop-up appear over some window W, supply this argument. The default behavior is
that the pop-up will appear over your application's root window.
title=T
If specified, T is a string to be displayed as the pop-up window's title.
If the user selects a file, the returned value is the complete path name of the selected file. If the user uses
the Cancel button, the function returns an empty string.
Here is an example:
117
Tkinter reference
New Mexico Tech Computer Center

31.3.The tkColorChooser module
To give your application's user a popup they can use to select a color, import the tkColorChooser
module and call this function:
result = tkColorChooser.askColor ( color, option=value, ...)
Arguments are:
color
The initial color to be displayed. The default initial color is a light gray.
title=text
The specified text appears in the pop-up window's title area. The default title is “Color”.
parent=W
Make the popup appear over window W. The default behavior is that it appears over your root
window.
If the user clicks the OK button on the pop-up, the returned value will be a tuple (triple, color),
where triple is a tuple (R, G, B) containing red, green, and blue values in the range [0,255] respect-
ively, and color is the selected color as a regular Tkinter color object.
If the users clicks Cancel, this function will return (None, None).
Here's what the popup looks like on the author's system:
New Mexico Tech Computer Center
Tkinter reference
118

