i
Abstract
This
thesis
deals
with
t
w
o
imp
ortan
t
topics:

The
use
of
the
b
est
p
ossible
tec
hnology
in
the
dev
elopmen
t
of
telecomm
unications
systems
in
a
w
orld
of
rapid
c
hange
and
in-
creasing
comp
etition.
The
w
ord
\b
est"
implies
a
tec
hnology
that
satises
the
requiremen
ts
of
the
application
and
a
tec
h-
nology
that
enables
high
design
e√Üciency
in
bringing
pro
jects
to
rapid
and
successful
results.

The
in
tro
duction
and
exploitation
of
functional
programming
in
industry
.
F
unctional
programming
is
a
long
established
dis-
cipline
within
academia
where
its
adv
an
tages
are
w
ell
kno
wn.
The
thesis
is
built
around
the
actual
case
of
the
concurren
t
func-
tional
programming
language
Erlang
whic
h
w
as
dev
elop
ed
at
the
Computer
Science
Lab
oratory
at
Ericsson
and
whic
h
is
no
w
a
v
ail-
able
as
op
en
source.
Erlang
is
no
w
used
in
ab
out
20
systems,
notably
the
A
TM
switc
hing
system
AXD
301
where
Ericsson
in
t
w
o
y
ears
mo
v
ed
from
ha
ving
no
system
to
ha
ving
a
v
eritable
agship.
Starting
as
a
purely
tec
hnical
pro
ject
the
progress
of
Erlang
came
to
touc
h
up
on
man
y
other
topics
suc
h
as
Management
of
T
e
chnolo
gy
and
Op
en
Sour
c
e.

ii
Ac
kno
wledgemen
ts
Ac
kno
wledgemen
ts
are
due
ab
o
v
e
all
to
the
Erlang
Design
T
eam
(Jo
e
A
rmstr
ong,
Claes
Wikstr
om,
Mike
Wil
liams,
and
R
ob
ert
Vir
d-
ing),
mem
b
ers
of
Erlang
Systems,
the
OTP
Pro
duct
Unit,
the
Erlang
application
pro
jects
and
all
the
en
th
usiastic
Erlang
users
around
the
w
orld.
I
also
thank
professor
Gerald
Q.
Maguire
Jr.
who
got
me
started
writing
and
supp
orted
me
all
through
the
pro
cess.
The
follo
wing
p
eople
ha
v
e
read
and
commen
ted
on
the
thesis:
Jo
e
Armstrong,
Ro
y
Bengtsson,
Catrin
Gran
b
om,
T
orb
j
orn
Keisu,
Kenneth
Lundin,
Ric
hard
O'Keefe,
Phil
W
adler,
Ulf
Wiger,
and
Mik
e
Williams.
Ac
kno
wledgemen
ts
are
not
least
due
to
Ericsson
for
supp
orting
the
Erlang
dev
elopmen
t
consisten
tly
for
man
y
y
ears
and
enabling
Erlang
to
b
e
used
for
v
ery
large
and
imp
ortan
t
pro
jects.
Bjarne
D
ac
k
er,
Sto
c
kholm,
Octob
er
2000

Con
ten
ts
1
In
tro
duction
1
1.1
Ov
erview
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
1
1.2
Bac
kground
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
1
1.3
Summary
of
P
ap
ers
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3
1.4
La
y
out
of
this
Thesis
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3
2
Managemen
t
of
T
ec
hnology
5
3
The
Problem
9
3.1
T
elecomm
unications
Programming
and
Chill
.
.
.
.
.
.
.
.
.
.
.
.
9
3.2
Programming
Language
Exp
erimen
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
11
4
Dev
elopmen
t
of
Erlang
13
4.1
Protot
yp
e
Dev
elopmen
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
13
4.2
Steps
to
w
ards
a
Pro
duct
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
15
4.3
Erlang
Systems
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
17
4.4
F
urther
T
ec
hnical
Dev
elopmen
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
18
4.5
Early
Mark
eting
Eorts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
20
4.6
Erlang
Summary
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
20
4.6.1
Sequen
tial
Erlang
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
20
4.6.2
Concurrency
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
20
4.6.3
Distribution
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
21
4.6.4
Robustness
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
21
4.6.5
Soft
w
are
Upgrading
in
Running
Systems
.
.
.
.
.
.
.
.
.
.
21
4.6.6
External
In
terfaces
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
21
4.6.7
P
ortabilit
y
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
22
4.6.8
Program
Dev
elopmen
t
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
22
4.7
Matc
h
against
Requiremen
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
22
5
Op
en
T
elecom
Platform
25
6
Selected
Industrial
Applications
29
6.1
AXD
301
A
TM
Switc
h
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
29
6.2
ANx
Access
No
de
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
30
6.3
GPRS
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
31
6.4
A
Commen
t
on
Soft
w
are
Engineering
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
31
6.5
Exp
eriences
from
the
Field
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
32
6.6
User
T
estimonies
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
32
iii

iv
CONTENTS
6.7
External
Users
and
Consultan
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
33
6.8
CeBit
1998
and
Mark
eting
Eorts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
33
6.9
Rened
Matc
h
against
Requiremen
ts
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
34
7
Bac
klash
37
8
Op
en
Source
and
Con
tin
ued
Researc
h
39
8.1
Bluetail
AB
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
39
8.2
Erlang
in
the
Researc
h
W
orld
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
41
8.3
Researc
h
Con
tin
ues
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
42
9
Discussion
45
9.1
Dev
elopmen
t
of
Programming
T
ec
hnology
.
.
.
.
.
.
.
.
.
.
.
.
.
45
9.2
On
Applications
of
F
unctional
Programming
.
.
.
.
.
.
.
.
.
.
.
46
9.3
Diussion
of
Inno
v
ations
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
47
9.4
The
Magic
of
W
ords
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
47
9.5
Sym
b
olic
Programming
strik
es
Bac
k
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
48
10
Conclusions
49

1
In
tro
duction
1.1
Ov
erview
This
thesis
traces
the
progress
of
Erlang
from
applied
researc
h
in
an
industrial
researc
h
lab
oratory
through
pro
ductication,
tec
hnology
transfer
to
a
pro
duct
unit
and
further
dissemination
through
op
en
source
in
parallel
with
widening
use
in
application
systems
for
the
mark
et.
My
prime
task
in
this
pro
cess
has
b
een
as
manager
of
the
Computer
Scienc
e
L
ab
or
atory
(CSLab)
encouraging
the
w
ork
and
helping
to
establish
con
tacts
with
external
researc
h
and
with
prosp
ectiv
e
users.
1.2
Bac
kground
\Lisp"
is
an
abbreviation
of
\list
programming",
but
often
\sym
b
olic
program-
ming"
is
a
more
accurate
term.
The
fact
is
that
man
y
programming
problems
in
industry
are
sym
b
olic
in
nature
and
th
us
lend
themselv
es
naturally
to
pro-
gramming
languages
lik
e
Lisp
[Wi81].
I
learn
t
Lisp
at
a
Summer
sc
ho
ol
at
Uppsala
in
1974
and
immediately
sa
w
its
p
ossibilities.
I
w
as
then
w
orking
with
hardw
are
Computer
A
ide
d
Design
(CAD)
systems
and
had
among
other
things
sp
en
t
one
y
ear
once
in
designing
a
database
in
F
ortran
to
represen
t
rela
y
set
circuit
diagrams.
So
on
a
natural
application
presen
ted
itself.
Ericsson
then
used
t
w
o
soft
w
are
to
ols
to
aid
in
the
design
of
circuit
b
oards.
One
w
as
a
system
for
digital
sim
u-
lation
and
test
data
generation.
The
other
w
as
a
program
to
create
the
circuit
b
oard
la
y
out.
Th
us
one
program
dealt
with
logic
en
tities
lik
e
gates
and
ip-
ops
and
the
other
dealt
with
mec
hanical
en
tities
lik
e
discrete
comp
onen
ts
and
in
tegrated
circuits.
The
programs
had
v
ery
dieren
t
lo
oking
inputs
and
it
w
as
v
ery
di√Ücult
to
ascertain
that
those
w
ere,
indeed,
equiv
alen
t.
Giv
en
the
usual
tec
hnology
at
the
time,
F
ortran
[Ek79
]
and
PL/I
[Hu87
],
to
create
a
program
to
con
v
ert
b
et
w
een
the
t
w
o
programs
w
as
almost
imp
ossible
or
w
ould
ha
v
e
led
to
a
v
ery
large
and
complex
pro
ject.
Lisp
instead
made
it
quite
feasible
to
design
a
database
that
could
represen
t
b
oth
the
electronic
and
the
mec
hanical
asp
ects
of
a
circuit
b
oard.
The
next
step
w
as
to
create
programs
that
could
generate
the
database
giv
en
the
input
to
either
of
the
CAD
programs.
The
step
after
that
w
as
to
write
programs
that
instead
could
generate
their
resp
ectiv
e
inputs
from
the
database.
The
program
needed
some
extra
input
when,
for
example,
gates
w
ere
de-
signed
using
discrete
comp
onen
ts,
but
it
solv
ed
a
tric
ky
problem
for
the
design-
ers.
1

2
CHAPTER
1.
INTR
ODUCTION
CAD
represen
ts
a
t
ypical
area
for
sym
b
olic
computation
and
when
n
umer-
ical
computations
came
in,
it
turned
out
that
Lisp
could
handle
them
just
as
e√Ücien
tly
.
In
1982
another
p
ossible
application
presen
ted
itself.
Ericsson's
AXE
10
[He76
]
system
w
as
b
eing
sold
around
the
w
orld
and
increasing
demands
w
ere
made
for
higher
capacit
y
and
throughput.
This
led
to
the
design
of
the
APZ
212
[Hj90]
pro
cessor.
Th
us
a
compiler
for
the
AXE
programming
language
Plex
[He76
]
had
to
b
e
dev
elop
ed
at
short
notice.
Ev
en
more
imp
ortan
t
w
as
an
in
ter-
activ
e
in
terpreter
since
man
y
programs
had
to
b
e
dev
elop
ed
and
tested
b
efore
the
APZ
212
hardw
are
w
ould
b
e
a
v
ailable.
My
suggestion
w
as
to
use
Lisp
and
I
got
the
go-ahead.
The
rst
step
w
as
to
write
a
parser
to
create
an
in
ternal
represen
tation
of
a
Plex
program
for
the
in
terpreter
to
w
ork
with.
This
could
b
e
stored
using
(write
...)
and
retriev
ed
using
(read
...)
and
since
it
w
as
only
a
large
S-expression,
it
could
easily
b
e
insp
ected
for
mistak
es.
The
next
step
w
as
to
dev
elop
a
full
screen
in
teractiv
e
in
terpreter
using
VT100
terminals
attac
hed
to
a
V
AX
running
UNIX
[A
t84
].
It
turned
out
that
the
designers
lik
ed
the
in
terpreter
v
ery
m
uc
h
and
also
quic
kly
got
used
to
seeing
their
programs
prett
y
prin
ted
on
the
screen.
The
in
terpreter
also
con
tained
an
editor
using
the
parser
one
statemen
t
at
a
time.
There
had
b
een
some
concern
that
Lisp
w
ould
lead
to
v
ery
long
execution
times.
Ho
w
ev
er,
nothing
of
this
sort
w
as
noticed.
Most
execution
times
w
ere
dominated
b
y
the
time
required
to
prin
t
output
to
the
screen.
This
in
terpreter
w
as
a
protot
yp
e
that
handled
only
a
cen
tral
subset
of
Plex.
Ho
w
ev
er,
it
w
as
tak
en
o
v
er
b
y
a
programming
team
that
completed
and
pro
duc-
tied
it
and
p
orted
it
to
the
IBM
370
computers
whic
h
w
ere
used
for
program
dev
elopmen
t
for
AXE
10.
By
c
hance
a
m
uc
h
larger
pro
ject
had
b
een
running
to
dev
elop
a
Plex
in-
terpreter
using
an
IBM
v
ersion
of
P
ascal.
F
or
some
time
the
t
w
o
pro
jects
ran
in
parallel.
The
go
o
d
thing
w
as
that
this
pro
vided
large
v
olumes
of
data
for
comparison.
It
turned
out
that
the
in
terpreter
in
Lisp
w
as
smaller
b
y
a
factor
ranging
from
7
to
10
for
dieren
t
parts
of
the
system
[D
a83
,
Al84
].
F
or
an
industry
concerned
with
the
soft
w
are
\crisis"
[Gi94]
this
should
ha
v
e
b
een
v
ery
in
teresting
news.
The
exp
eriences
from
this
application
w
ere
high
design
e√Üciency
and
adequate
execution
p
erformance.
Our
hop
es
w
as
that
this
w
ould
ha
v
e
op
ened
the
w
a
y
for
wide
use
of
Lisp
in
the
dev
elopmen
t
of
soft
w
are
dev
elopmen
t
en
vironmen
ts,
but
nothing
happ
ened.
Ev
eryb
o
dy
seemed
to
agree
that
using
Lisp
for
this
t
yp
e
of
application
is
more
e√Ücien
t
than
using
languages
lik
e
C
or
P
ascal,
y
et
it
did
not
catc
h
on.
One
of
the
k
ey
activities
when
starting
a
design
pro
ject
is
the
selection
of
the
appropriate
tec
hnologies
to
b
e
used.
This
means
that
there
ough
t
to
b
e
a
list
of
candidate
tec
hnologies
with
descriptions
of
their
resp
ectiv
e
prop
erties.
Then
the
c
haracteristics
of
the
application
ha
v
e
to
b
e
dened
and
the
selection
pro
cess
b
ecomes
a
matter
of
matc
hing.
The
c
haracteristics
m
ust
tak
e
in
to
accoun
t
man
y
asp
ects
suc
h
as
cost,
capacit
y
,
p
erformance,
do
cumen
tation,
standards
compliance,
design
e√Üciency
,
supp
ort,
training,
etc.
The
Lisp
exp
erience
describ
ed
ab
o
v
e
indicated
that
there
should
b
e
other
in
teresting
tec
hnologies
a
v
ailable
for
industrial
exploitation.
A
t
that
time
A
r-
ticial
Intel
ligenc
e
(AI)
w
as
a
v
ery
hot
topic
and
CSLab
(see
b
elo
w)
also
built
an
op
erator
supp
ort
system
[Sk86
]
exploiting
some
AI
tec
hnologies.

1.3.
SUMMAR
Y
OF
P
APERS
3
1.3
Summary
of
P
ap
ers
The
k
ey
pap
er
is
[D
a91
]
whic
h
presen
ts
the
ideas
of
dealing
with
soft
w
are
tec
h-
nology
according
to
the
same
principles
as
older
established
engineering
sciences,
esp
ecially
with
regard
to
applie
d
r
ese
ar
ch
in
the
lab
oratory
en
vironmen
t.
The
Erlang
history
is
one
case
demonstrating
that
those
principles
also
w
ork
in
prac-
tice.
The
pap
ers
[D
a83
,
Al84
]
describ
e
the
w
ork
of
building
the
Plex
in
terpreter
using
Lisp
where
I
b
oth
to
ok
the
initiativ
e
and
built
the
rst
usable
system.
The
pap
er
[D
a86
]
describ
es
exp
erimen
ts
with
building
protot
yp
e
telecom
systems
using
dieren
t
programming
tec
hnologies
where
m
y
con
tribution
w
as
the
rule-
based
system.
The
pap
er
[D
a93a
]
summarises
Erlang
design
w
ork
carried
out
at
CSLab
and
the
pap
ers
[D
a93b
,
D
a94a
,
D
a94b
,
D
a95
]
describ
e
early
exp
eriences
from
the
use
of
Erlang.
1.4
La
y
out
of
this
Thesis
Chapter
2
pro
vides
a
con
text
for
this
thesis
b
y
describing
the
general
princi-
ples
b
ehind
applie
d
r
ese
ar
ch
in
the
industrial
en
vironmen
t.
Chapter
3
denes
the
requiremen
ts
put
on
a
soft
w
are
tec
hnology
for
telecomm
unications
applica-
tions
and
also
early
exp
erimen
ts
at
CSLab
with
dieren
t
a
v
ailable
programming
tec
hnologies.
Chapter
4
in
tro
duces
Erlang
and
its
dev
elopmen
t
and
matc
hes
it
against
the
ab
o
v
e
requiremen
ts.
Chapter
5
describ
es
the
dev
elopmen
t
of
the
Op
en
T
ele-
c
om
Platform
using
Erlang
and
extending
its
usabilit
y
and
c
hapter
6
pro
vides
an
o
v
erview
of
some
imp
ortan
t
Erlang
applications
whic
h
giv
es
more
detailed
material
to
v
alidate
Erlang
against
the
telecomm
unications
requiremen
ts.
Those
c
hapters
also
describ
e
the
spread
of
Erlang
within
Ericsson
and
out-
side
Ericsson
primarily
to
academia
and
also
attempts
at
mark
eting
Erlang.
Chapter
7
describ
es
an
in
ternal
set-bac
k
and
c
hapter
8
the
w
ork
of
spreading
Erlang
through
the
new
medium
of
op
en
sour
c
e.
Chapter
9
discusses
the
spread
and
use
of
functional
programming
and,
nally
,
c
hapter
10
presen
ts
m
y
conclusions
on
this
matter
based
on
the
Erlang
exp
erience.

4
CHAPTER
1.
INTR
ODUCTION

2
Managemen
t
of
T
ec
hnology
Managemen
t
of
T
ec
hnology
[Gr82
]
is
an
area
of
study
within
Industrial
Man-
agemen
t
and
Econom
y
that
fo
cuses
on
the
in
teraction
b
et
w
een
tec
hnical
and
economic
c
hanges
and
on
ho
w
this
in
teraction
can
b
e
inuenced
in
desirable
directions.
Managemen
t
of
T
ec
hnology
in
large
divisionalized
companies
lik
e
ABB
and
Ericsson
in
v
olv
es
man
y
complex
asp
ects:

The
term
R
ese
ar
ch
and
Development
(R&D)
is
often
v
ery
lo
osely
used.
In
industry
dev
elopmen
t
is
b
y
far
the
largest
comp
onen
t
and
most
researc
h
is
applie
d
in
the
form
of
trying
out
new
tec
hniques
on
old
(or
emerging)
ap-
plications.
The
term
\researc
h"
is
also
often
used
to
describ
e
exp
erimen
ts
prior
to
pro
duct
dev
elopmen
t.

The
purp
ose
of
b
asic
r
ese
ar
ch
is
to
nd
new
kno
wledge
for
mankind
whereas
the
purp
ose
of
applie
d
r
ese
ar
ch
is
to
apply
new
kno
wledge
to
realit
y
.
Ap-
plied
researc
h
can
b
e
te
chnolo
gy
driven
or
market
driven.
In
the
rst
case
some
new
tec
hnology
has
b
een
created,
then
w
ork
is
done
to
nd
uses
for
it.
In
the
latter
case
some
need
or
opp
ortunit
y
has
arisen
whic
h
cannot
b
e
adequately
handled
with
curren
t
tec
hnologies,
see
Figure
2.1.

T
o
qualify
as
applie
d
r
ese
ar
ch
as
dieren
t
from
regular
pro
duct
dev
elop-
men
t,
the
w
ork
needs
to
b
e
of
scien
tic
qualit
y
,
for
example
b
y
b
eing
presen
ted
at
signican
t
conferences
or
journals
in
the
resp
ectiv
e
eld.

The
organisation
of
researc
h
has
to
b
e
a
compromise
b
et
w
een
cen
traliza-
tion
and
decen
tralization
since
there
has
to
b
e
close
con
tacts
b
oth
with
New Technology
Problems or
opportunities
Experiments 
Evaluation
Productification
and exploitation
Idea dropped
Figure
2.1:
The
pro
cess
of
Applied
Researc
h.
5

6
CHAPTER
2.
MANA
GEMENT
OF
TECHNOLOGY
P
aten
ts
Know
le
dge
P
ap
ers
at
in
ternational
conferences
standing
References
in
in
ternationally
recognized
journals
Publications
in
in
ternationally
recognized
journals
Comp
etitor
Comparison
with
existing
and
p
oten
tial
standing
comp
etitors
to
iden
tify
strong/w
eak
p
oin
ts
Visits
b
y
customers
Know
le
dge
In
ternal
presen
tations/demonstrations
tr
ansfer
F
acts,
based
on
protot
yping
etc.,
deliv
ered
Ideas
accepted
b
y
System
&
T
ec
hnology
dev
elopmen
t
pro
cess
Guest
researc
hers
Lectures
giv
en
at
univ
ersities
Interworking
W
orking
with
recognized
Cen
tres
of
Excellence
W
orking
with
p
oten
tial
pro
ducers/users
of
the
result
P
articipation
in
national/in
ternational
researc
h
pro
jects
P
articipation
in
national/in
ternational
committees
for
researc
h
funding
T
able
2.1:
Ev
aluation
criteria
for
Applied
Researc
h
in
Ericsson
[Er95
].
strategic
planning
and
with
pro
duct
dev
elopmen
t
in
the
pro
duct
divisions.
If
not
handled
w
ell
this
can
giv
e
rise
to
conicts
and
misunderstandings.

Researc
h
can
b
e
placed
in
some
cen
tral
unit
(lik
e
Bell
Lab
oratories)
or
b
e
spread
out
as
decen
tralized
lab
oratories
organised
within
the
v
arious
divisions
(or
subsidiaries)
through
some
matrix
organisation.
The
presen
t
situation
within
Ericsson
is
a
com
bination
of
b
oth.
F
urther
reasons
for
lo
cating
researc
h
lab
oratories
within
subsidiaries
in
dieren
t
coun
tries
are
to
facilitate
in
teraction
with
univ
ersit
y
researc
h
in
the
dieren
t
coun
tries
and
access
to
qualied
p
ersonnel.
(The
term
lab
or
atory
is
henceforth
used
to
denote
an
organisational
unit
w
orking
with
researc
h.)

Financing
of
researc
h
is
often
a
com
bination
of
cen
tral
nancing
with
pro
ject
assignmen
ts
from
design
departmen
ts
in
some
suitable
ratio
50/50
(ABB
Corp
orate
Researc
h)
or
70/30
(Ericsson
Researc
h).
That
the
design
departmen
ts
are
in
terested
in
ha
ving
researc
hers
participate
in
pro
jects
or
are
placing
pro
jects
in
the
lab
oratories
is
one
test
of
the
comp
etence
and
co-op
erativ
e
spirit
of
the
lab
oratories.

Ev
aluation
of
the
p
erformance
of
industrial
researc
h
is
a
di√Ücult
matter.
Univ
ersit
y
researc
h
is
ev
aluated
based
on
its
publication
record
and
pro
d-
uct
dev
elopmen
t
on
the
protabilit
y
of
its
pro
ducts.
T
able
2.1
lists
the
ev
aluation
criteria
that
w
ere
dened
in
1995
for
applied
researc
h
lab
ora-
tories
in
Ericsson
[Er95
].

F
or
companies
dev
eloping
systems
it
is
imp
ortan
t
to
note
that
ev
ery
sys-
tem
is
dep
enden
t
on
man
y
dieren
t
tec
hnologies.
This
means
that
dieren
t
lab
oratories
t
ypically
are
either
fo
cused
on
some
tec
hnology
(lik
e
bre
op-
tics)
used
in
man
y
dieren
t
systems
or
are
fo
cused
on
new
applications
where
they
start
from
man
y
dieren
t
tec
hnologies
(sometimes
originating
in
other
lab
oratories).

7

A
systems
compan
y
migh
t
b
oth
use
its
o
wn
tec
hnology
in
its
systems
and
sell
them
as
comp
onen
ts,
for
example
ABB
b
oth
uses
its
o
wn
rela
ys
and
sells
them
and
Ericsson's
p
o
w
er
division
sells
b
oth
inside
and
outside
the
compan
y
.
This
implies
an
in
ternal
tec
hnology
mark
et.
(In
Jan
uary
2000
Ericsson
div
ested
its
energy
business
[Pr00a
].)

A
lab
oratory
can
nev
er
tak
e
resp
onsibilit
y
for
a
pro
duct
either
deliv
ered
to
customers
as
an
application
or
deliv
ered
to
design
departmen
ts
as
a
tec
h-
nology
.
This
requires
quite
a
dieren
t
organisation
and
a
dieren
t
mo
de
of
w
ork,
handling
new
releases,
handling
error
rep
orts
and
user
complain
ts,
pro
duction
of
professional
qualit
y
do
cumen
tation,
organisation
of
courses,
training,
consulting,
etc.

This
in
turn
requires
transfer
of
the
results
to
another
t
yp
e
of
unit
or
p
erhaps
transforming
the
lab
oratory
in
to
a
pro
duct
design
unit
(depart-
men
t).
In
an
y
case
the
researc
hers
ha
v
e
to
tak
e
part
in
this
and
p
erhaps
transfer
out
of
the
lab
oratory
.

There
are
dieren
t
w
a
ys
of
manning
a
lab
oratory
.
One
case
could
b
e
to
recruit
senior
designers
in
terested
in
researc
h,
another
to
tak
e
in
y
oung
p
eople
from
a
univ
ersit
y
who
can
learn
the
latest
tec
hnology
in
the
lab
o-
ratory
and
then
mo
v
e
with
their
system
out
in
to
the
design
organisation.

T
ec
hnology
researc
h
has
to
b
e
seen
as
part
of
the
tec
hnology
pro
visioning
pro
cess.
Most
tec
hnology
will
b
e
obtained
from
suppliers.
Results
from
the
lab
oratories
are
the
exception
and
there
are
primarily
t
w
o
reasons
for
using
them:
{
There
are
requiremen
ts
whic
h
cannot
b
e
fullled
b
y
external
tec
hnol-
ogy
.
{
There
are
tec
hnologies
whic
h
can
pro
vide
comp
etitiv
e
adv
an
tage.
(In
this
case
paten
ts
are
of
the
utmost
imp
ortance.)

Compliance
with
in
ternationally
accepted
standards
is
essen
tial
to
ac
hiev
e
in
terop
erabilit
y
and
to
enable
systems
to
b
e
upgraded
b
y
renewing
just
parts
of
them.

In
ternally
dev
elop
ed
tec
hnology
that
giv
es
adv
an
tages
in
the
near
term
can
cause
problems
in
the
long
term
{
esp
ecially
if
it
is
o
v
ertak
en
b
y
external
dev
elopmen
ts.
The
primary
dierence
b
et
w
een
a
researc
h
pro
ject
and
a
regular
dev
elopmen
t
pro
ject
is
that
researc
h
has
a
greater
uncertain
t
y
,
but
also
oers
hop
es
of
greater
gains
if
it
is
successful.
This
means
that
researc
h
pro
jects
ha
v
e
to
b
e
carried
out
in
mo
derately
long
steps
with
careful
monitoring
of
progress.
The
imp
ortan
t
realization
is
that
all
the
principles
of
Management
of
T
e
ch-
nolo
gy
that
are
the
results
of
man
y
y
ears
of
w
orking
with
materials
engineering,
c
hemical
engineering,
etc.
actually
can
apply
to
soft
w
are
as
w
ell.
This
should
giv
e
a
new
and
p
erhaps
sounder
in
terpretation
of
the
term
\soft
w
are
engineer-
ing"
[D
a91
].

8
CHAPTER
2.
MANA
GEMENT
OF
TECHNOLOGY

3
The
Problem
3.1
T
elecomm
unications
Programming
and
Chill
Applied
researc
h
needs
to
start
b
y
dening
\the
problem".
T
able
3.1
summarizes
the
requiremen
ts
on
a
programming
tec
hnology
for
telecomm
unication
switc
hing
systems.
These
lead
to
b
oth
large
systems
and
large
pro
jects.
Th
us
a
k
ey
question
is
that
of
design
pro
ductivit
y
,
i.e.
ho
w
to
b
e
able
to
design
suc
h
systems
with
smaller
design
teams
in
a
shorter
time.
In
the
1970's
there
w
as
m
uc
h
talk
of
the
\soft
w
are
crisis"
[Gi94]
as
a
term
to
describ
e
the
problems
of
programming
pro
jects
running
late,
using
to
o
m
uc
h
manp
o
w
er,
and
resulting
in
systems
of
unacceptably
lo
w
qualit
y
.
Most
attempts
at
dealing
with
this
ha
v
e
b
een
to
in
tro
duce
more
formalized
w
ork
metho
ds.
This
is
often
termed
\soft
w
are
engineering"
and
the
a
v
o
w
ed
aim
has
b
een
that
soft
w
are
should
b
e
pro
duced
in
an
engineering
fashion.
The
telecomm
unications
industry
w
as
early
to
use
computers
in
their
systems
and
Ericsson
installed
its
rst
stor
e
d
pr
o
gr
am
c
ontr
ol
le
d
(SPC)
system
AKE
12
[Ka68
]
in
T
um
ba
in
the
Autumn
of
1966.
Since
telecomm
unications
lead
to
v
ery
large
complex
systems
and
pro
jects
a
sp
ecial
conference
series
Softwar
e
Engine
ering
for
T
ele
c
ommunic
ations
Switching
Systems
(SETSS)
w
as
set
up
b
y
the
British
Institution
of
Ele
ctric
al
Engine
ers
(IEE).
The
strange
w
ord
is
\crisis".
Pro
jects
in
other
engineering
elds
also
ex-
p
erience
problems.
A
case
in
p
oin
t
is
the
tunnel
building
pro
ject
through
Hallands

asen,
Sw
eden
[Da96
].
Suc
h
o
ccurrences,
ho
w
ev
er,
are
not
classied
as
crises,
only
as
fault
y
professionalism.
The
fact
is
that
man
y
programming
pro
jects
run
w
ell
ev
en
without
the
formal
\metho
ds".
The
k
eys,
as
in
other
engi-
1
Hand
ling
of
a
very
lar
ge
numb
er
of
c
oncurr
ent
activities
2
A
ctions
to
b
e
p
erforme
d
at
a
c
ertain
p
oint
in
time
or
within
a
c
ertain
time
3
Systems
distribute
d
over
sever
al
c
omputers
4
Inter
action
with
har
dwar
e
5
V
ery
lar
ge
softwar
e
systems
6
Complex
functionality
such
as
fe
atur
e
inter
action
7
Continuous
op
er
ation
for
many
ye
ars
8
Softwar
e
maintenanc
e
(r
e
c
ongur
ation,
etc.)
without
stopping
the
system
9
Stringent
quality
and
r
eliability
r
e
quir
ements
10
F
ault
toler
anc
e
b
oth
to
har
dwar
e
failur
es
and
softwar
e
err
ors
T
able
3.1:
Requiremen
ts
on
a
programming
tec
hnology
for
telecomm
unication
switc
hing
systems
[D
a93a
].
9

10
CHAPTER
3.
THE
PR
OBLEM
neering
areas,
are
comp
eten
t
p
eople,
appropriate
arc
hitecture,
go
o
d
tec
hnology
,
and
clear
goals.
Problems
are
one
thing,
\crises"
another.
The
w
ord
implies
a
feeling
of
lac
k
of
con
trol,
i.e.,
that
soft
w
are
is
inheren
tly
something
strange
and
unpredictable.
Soft
w
are
is
not
strange
to
p
eople
w
orking
in
the
eld,
but
probably
w
as
to
an
industry
getting
increasingly
dep
enden
t
up
on
it
a
couple
of
decades
ago.
There
are
dieren
t
w
a
ys
of
impro
ving
pro
ject
p
erformances.
Metho
ds
rep-
resen
t
the
organisational
approac
h,
i.e.,
that
the
w
ork
is
reasonably
w
ell
struc-
tured
and
prop
erly
carried
out.
Another
is
qualied
(and
motiv
ated)
p
ersonnel.
Another
often
o
v
erlo
ok
ed
factor
is
tec
hnology
.
This
thesis
examines
the
in
tro-
duction
of
new
soft
w
are
tec
hnology
.
Soft
w
are
dev
elopmen
t
is
a
matter
of
programming.
Some
systems
aim
to
ac-
cept
sp
ecications
and
then
generate
co
de.
Suc
h
systems
approac
h
the
problem
top
do
wn.
A
complemen
tary
approac
h
is
to
raise
the
lev
el
of
programming
b
y
using
a
language
tec
hnology
at
a
high
abstraction
lev
el
whic
h
pro
vides
built-in
supp
ort
required
b
y
the
application
domain.
This
thesis
deals
with
the
latter
approac
h.
(Edw
ard
Y
ourdon
places
\b
etter
programming
languages"
at
the
top
of
his
p
ersonal
list
of
\silv
er
bullets"
[Y
o92
].)
F
ortran
[Ek79
]
w
as
dev
elop
ed
around
1957,
P
ascal
[Je75
]
around
1970
and
C
[Ke78
]
in
the
middle
1970's.
It
is
remark
able
that
to
da
y
most
programs
are
still
dev
elop
ed
in
languages
of
these
t
yp
es
while
computer
hardw
are
has
gone
from
discrete
comp
onen
ts
to
VLSI.
P
ascal
w
as
originally
dev
elop
ed
as
a
language
to
teac
h
studen
ts
program-
ming.
Signican
t
additions
in
Mo
dula
[Wi76
]
w
ere
mo
dules
and
pr
o
c
esses.
Mo
d-
ules
are
necessary
for
building
large
systems
and
pro
cesses
are
necessary
to
de-
scrib
e
concurrency
.
Eac
h
pro
cess
instance
functions
lik
e
a
sequen
tial
program
on
its
o
wn
computer
through
a
timesharing
sc
heme
[Bu90
].
Other
programming
languages
of
this
class
are
Chill
[CC84b
]
and
Ada
[Ad83].
The
C.C.I.T.T.
standardised
programming
language
Chill
pro
vided
three
mec
hanisms
for
comm
unication
and
sync
hronization
b
et
w
een
pro
cesses:

Regions,

Buers
(message
mailb
o
xes),

Signals
(messages).
Quote
\there
are
sev
eral
reasons
wh
y
Chill
pro
vides
three
dieren
t
mec
ha-
nisms
for
pro
cess
comm
unication:

The
ideas
ab
out
what
is
the
b
est
metho
d
of
comm
unication
b
et
w
een
pro-
cesses
ha
v
e
not
y
et
b
een
stabilised
in
the
w
orld
of
programming
language
design.
It
w
ould
b
e
to
o
early
to
supply
only
one
metho
d
of
comm
unica-
tion.

Exp
erience
with
comm
unication
b
et
w
een
pro
cesses
in
a
distributed
sys-
tem
(without
common
memory
b
et
w
een
pro
cessors)
is
v
ery
limited.
One
comm
unication
mec
hanism
ma
y
not
b
e
able
to
function
optimally
in
b
oth
distributed
and
common
memory
arc
hitectures."
[Sm83
]
The
eect
of
this
w
as
that
eac
h
compan
y
that
used
it
c
hose
some
suitable
subset.

3.2.
PR
OGRAMMING
LANGUA
GE
EXPERIMENTS
11
In
late
1999
C.C.I.T.T.
stopp
ed
main
taining
the
Chill
standard.
In
1979
I
w
as
resp
onsible
for
the
creation
of
the
in-house
programming
lan-
guage
EriP
ascal
[D
a79
,
B

a84
]
for
a
new
pro
cessor
APN
167
[Ma86
].
EriP
ascal
w
as
similar
to
a
subset
of
Chill
but
with
a
P
ascal
lik
e
syn
tax.
Lik
e
Mo
dula
it
con
tained
mo
dules
and
pro
cesses.
In
EriP
ascal
only
messages
w
ere
used.
There
w
ere
also
plans
to
create
an
EriChill
b
y
using
a
dieren
t
compiler
fron
t-end
whic
h
accepted
a
Chill
lik
e
syn
tax,
but
there
w
ere
no
user
requests
for
it.
Still
the
basic
sequen
tial
programming
paradigm
remained
at
the
lev
el
of
F
ortran
and
P
ascal
ev
en
though
the
whole
idea
of
functional
and
logic
program-
ming
had
b
een
around
almost
as
long
as
F
ortran.
F
or
example,
Lisp
[Mc65
]
w
as
created
already
in
1958
[W
e81
].
3.2
Programming
Language
Exp
erimen
ts
In
1984
the
Computer
Scienc
e
L
ab
or
atory
(CSLab)
[Csw]
at
Ericsson
w
as
for-
mally
established
b
y
m
yself
and
three
colleagues,
G
oran
B

age,
Sev
ed
T
orsten-
dahl,
and
Mik
e
Williams.
F
urther
colleagues
joined.
CSLab
has
had
a
lo
w
p
ersonnel
turno
v
er
and
has
a
v
eraged
b
et
w
een
12
and
15
p
eople.
The
lab
oratory
so
on
w
as
equipp
ed
with
a
V
AX
750
running
one
of
the
rst
UNIX
systems
at
Ericsson
and
an
MD
110
priv
ate
exc
hange.
P
er
Hedeland
mo
died
the
MD
110
so
that
it
could
b
e
con
trolled
from
the
V
AX.
A
t
that
time
telephon
y
(or
an
y
real
time)
programming
in
v
olv
ed
t
w
o
computers,
a
host
c
omputer
where
editing,
compilation
and
linking
to
ok
place
and
a
tar
get
c
om-
puter
em
b
edded
in
the
actual
system.
The
V
AX
com
bined
the
functions
of
b
oth
whic
h
reduced
the
turn
around
time
considerably
and
created
an
excellen
t
en
vironmen
t
for
exp
erimen
tation.
Based
on
this
en
vironmen
t
a
series
of
exp
erimen
ts
w
ere
carried
out
with
dieren
t
programming
languages
and
paradigms
whic
h
in
v
olv
ed
at
least
v
e
p
ersons
in
the
lab
oratory
.
The
follo
wing
tec
hniques
w
ere
tried
[D
a84a
,
D
a86
]:

Imp
erativ
e
programming
languages:
Concurren
t
Euclid
[Ho83b
]
and
Ada
[Ad83
].

Declarativ
e
programming
languages:
PFL
[Ho83a
]
and
Prolog
[Cl81].

Rule
based
programming:
OPS4
[F
o79
].

Ob
ject
orien
ted
languages:
F
rames
[W
e83]
and
CLU
[Li79
].
My
con
tribution
w
as
the
exp
erimen
t
with
rule
based
programming
using
OPS4.
This
could
express
man
y
requiremen
ts
v
ery
neatly
.
One
problem
in
con
v
en
tional
telecomm
unications
programming
is
that
a
subscrib
er
ma
y
hang
up
at
an
y
time
during
a
call.
This
means
that
all
equipmen
t
in
v
olv
ed
has
to
b
e
reset.
In
rela
y
systems
it
su√Üced
to
release
the
holding
wire.
With
OPS4
this
b
ecame
equally
simple.
One
resetting
rule
for
eac
h
t
yp
e
of
equipmen
t
w
as
all
that
needed
to
b
e
dened.
This
rule
triggered
whenev
er
it
applied,
ev
en
in
dieren
t
states
of
a
call.
Rules
will
trigger
whenev
er
they
apply
regardless
of
their
order
in
the
source
co
de
so
that
when
sequencing
is
required
this
has
to
b
e
sp
ecied
using
some
state
v
ariable.
One
problem,
of
course,
w
as
ho
w
to
handle
really
large
systems
of
man
y
rules.
The
go
o
d
feature
of
rule
based
programming
is
that
it
encourages

12
CHAPTER
3.
THE
PR
OBLEM
a
v
ery
declarativ
e
st
yle
of
programming.
It
also
leads
to
highly
parallel
designs
as
only
when
rules
are
sequenced
do
they
ha
v
e
to
b
e
applied
in
order.
Though
tful
use
of
guards
and
pattern
matc
hing
can
ac
hiev
e
a
programming
st
yle
similar
to
rule
based
programming.
One
conclusion
w
as
that
telephon
y
systems
ob
viously
could
b
e
programmed
in
an
y
language
and
the
dieren
t
implemen
tations
displa
y
ed
rather
similar
struc-
ture.
Ho
w
ev
er,
certain
desirable
prop
erties
of
a
programming
tec
hnology
for
telephon
y
b
ecame
apparen
t:

Massiv
e
ne
grained
concurrency:
Complex
real
time
systems
usu-
ally
ha
v
e
to
handle
sev
eral
concurren
t
activities
whic
h,
in
turn,
normally
are
handled
through
some
pr
o
c
ess
(or
thread)
concept.
Ho
w
ev
er,
t
ypical
for
telecomm
unications
are
the
large
amoun
t
of
equipmen
t
and
the
great
n
um
b
er
of
sim
ultaneous
calls
whic
h
means
that
the
pro
cesses
ha
v
e
to
b
e
v
ery
light
weight.

Async
hronous
message
passing:
This
seemed
to
b
e
a
v
ery
t
ypical
and
normal
requiremen
t.
Both
Plex
[He76
]
from
Ericsson
and
SDL
[CC84a
]
from
C.C.I.T.T.
are
based
on
message
passing.
Also
message
passing
naturally
extends
to
distributed
systems.
Unfortunately
there
w
as
no
Chill
implemen
tation
a
v
ailable
for
the
UNIX
V
AX.
Ho
w
ev
er,
the
system
programmed
in
Concurren
t
Euclid
[Ho83b
]
w
as
structured
along
the
same
lines
as
w
ould
b
e
a
system
written
in
Chill.
The
rep
ort
of
these
programming
language
exp
erimen
ts
ended
with
the
fol-
lo
wing
conclusion:

\It
is
b
ecoming
ob
vious
that
future
telecomm
unication
systems
cannot
b
e
programmed
with
one
language
using
one
metho
dology
.
F
uture
sys-
tems
will
probably
b
e
built
using
man
y
of
the
tec
hniques
used
in
these
exp
erimen
ts.
F
or
example
exp
ert
system
tec
hnology
migh
t
b
e
used
for
the
main
tenance
functions
and
the
man
mac
hine
in
terface,
logic
program-
ming
migh
t
b
e
suitable
for
programming
the
signal
system
in
terfaces
and
parts
of
tra√Üc
handling
and
the
underlying
op
erating
system
migh
t
b
e
programmed
in
an
adv
anced
imp
erativ
e
language."
[D
a86
]

4
Dev
elopmen
t
of
Erlang
The
primary
aim
of
this
exercise,
ho
w
ev
er,
w
as
not
merely
to
see
if
it
w
as
p
ossible
to
program
telephon
y
systems
in
a
v
ariet
y
of
w
a
ys,
but
also
to
nd
whic
h
st
yle
of
programming
lead
to
the
shortest
and
most
b
e
autiful
programs
closest
to
the
lev
el
of
formal
sp
ecications.
These
features
ha
v
e
the
greatest
impact
on
qualit
y
and
programmer
e√Üciency
since
it
has
b
een
sho
wn
that
programmer
pro
ductivit
y
in
n
um
b
er
of
error
free
lines
of
co
de
p
er
da
y
is
largely
indep
enden
t
of
the
programming
language
The
language
exp
erimen
ts
had
giv
en
man
y
new
insigh
ts
[D
a86
],
but
had
not
reac
hed
a
conclusion
that
one
sp
ecic
language
w
as
\the
b
est".
Of
all
the
lan-
guages
tried
only
Prolog
could
handle
up
dating
of
soft
w
are
in
running
systems.
The
Ericsson
AXE
10
[He76
]
can
handle
up
date
of
running
co
de
through
the
use
of
sp
ecial
hardw
are
and
switc
h
o
v
er
b
et
w
een
the
duplicated
pro
cessors
suc
h
that
one
pro
cessor
carries
on
the
tra√Üc
pro
cessing
while
the
other
loads
the
new
v
ersion
of
the
co
de.
4.1
Protot
yp
e
Dev
elopmen
ts
Jo
e
Armstrong
led
the
next
round
of
exp
erimen
ts
and
started
with
Prolog,
b
e-
cause
of
its
terse
and
clear
st
yle,
and
added
concurrency
.
Ho
w
ev
er,
the
language
b
egan
to
c
hange
in
the
direction
of
a
functional
st
yle
[Ar92b
].
F
or
example,
one
of
the
k
ey
c
haracteristics
of
Prolog
is
bac
ktrac
king
and
this
could
not
b
e
used
b
ecause
it
is
not
p
ossible
to
bac
ktrac
k
o
v
er
hardw
are.
(A
tone
signal
once
sen
t
out
cannot
b
e
tak
en
bac
k
[Ar86
].)
The
name
giv
en
to
this
exp
erimen
tal
language
w
as
Erlang
after
the
Dan-
ish
mathematician
Agner
Krarup
Erlang,
creator
of
the
Erlang
loss
formula
[Erl].
This
follo
w
ed
the
tradition
of
naming
programming
languages
after
dead
mathematicians,
other
examples
are
P
ascal,
Euclid,
and
Occam
[Jo88
].
Erlang
is
aptly
describ
ed
as
a
c
oncurr
ent
functional
programming
language
com
bining
t
w
o
main
traditions,
Figure
4.1:

Concurren
t
programming
languages:
Mo
dula,
Chill,
Ada,
etc.
from
whic
h
Erlang
inherits
mo
dules,
pro
cesses,
and
pro
cess
comm
unication.

F
unctional
and
logic
programming
languages:
Hask
ell
[Ha
w
],
ML
[Wi87
,
Mlw],
Miranda
[Th95
],
Lisp
[Wi81
],
etc.
from
whic
h
Erlang
inherits
atoms,
lists,
guards,
pattern
matc
hing,
c
atch
and
thr
ow,
etc.
13

14
CHAPTER
4.
DEVELOPMENT
OF
ERLANG
Concurrent systems programming
languages like Ada, Modula or Chill
languages like ML or Miranda
Functional programming
Concurrent functional
programming language
           Erlang 
Figure
4.1:
The
ancestry
of
Erlang.
Signican
t
design
decisions
b
ehind
the
dev
elopmen
t
of
Erlang:

It
should
b
e
built
on
a
virtual
mac
hine
whic
h
handles
concurrency
,
memory
managemen
t,
etc.,
th
us
making
the
language
indep
enden
t
of
the
op
erating
system
and
ensuring
program
p
ortabilit
y
.

It
should
b
e
a
symb
olic
language
with
garbage
collection,
dynamic
t
yping,
data
t
yp
es
lik
e
atoms,
lists,
and
tuples.

It
should
supp
ort
tail
r
e
cursion
[Ok90
]
so
that
all
lo
ops,
ev
en
innite
lik
e
in
driv
ers,
can
b
e
handled
b
y
recursion.

It
should
supp
ort
asynchr
onous
message
p
assing
and
a
selectiv
e
message
r
e
c
eive
statemen
t.

It
should
enable
default
handling
of
errors,
for
example
through
tr
ap
exits.
This
also
enables
an
aggressiv
e
st
yle
of
programming.
Erlang
is
a
simple
language
to
learn
in
that
it
con
tains
v
ery
few
concepts.
P
attern
matc
hing
enables
a
v
ery
declarativ
e
(and
self
do
cumen
ting)
st
yle
of
programming.
Programming
languages
form
an
in
termediate
lev
el
b
et
w
een
the
computer
hardw
are
and
the
application.
It
is
necessary
that
the
language
pro
vides
p
o
w-
erful
concepts
that
can
facilitate
the
application;
y
et
it
is
equally
necessary
that
those
concepts
can
b
e
e√Ücien
tly
implemen
ted.
The
rst
large
P
ascal
program
dev
elop
ed
w
as
the
P
ascal
compiler.
This
enabled
Niklaus
Wirth
to
nd
the
righ
t
compromise
b
et
w
een
concepts
for
a
complex
application
and
their
imple-
men
tabilit
y
.
A
signican
t
o
ccurrence
at
the
end
of
1987
w
as
that
CSLab
came
to
co-
op
erate
with
a
telecomm
unications
protot
yping
team
lead
b
y
Kerstin

Odling
at
Ericsson
Business
Communic
ations
AB
(EBC).
T
eam
mem
b
ers
w
ere
H

ak
an
Karlsson,
H

ak
an
Larsson
and

Ak
e
Rosb
erg.
Based
on
a
study
of
sev
eral
dif-
feren
t
existing
Private
Br
anch
Exchange
(P
ABX)
systems
they
had
dened
an
impro
v
ed
P
ABX
arc
hitecture,
A
udial
Communic
ation
System
(A
CS),
and
the
next
natural
step
w
as
to
build
a
protot
yp
e.
F
or
this
they
needed
a
suitable
programming
tec
hnology
and
for
this
they
c
hose
Erlang
whic
h
itself
w
as
still
a
protot
yp
e.

4.2.
STEPS
TO
W
ARDS
A
PR
ODUCT
15
This
lead
to
a
highly
constructiv
e
collab
oration
during
1988
and
1989.
The
pro
ject,
named
A
CS/Dunder,
w
as
rep
orted
in
Decem
b
er
1989
[P
e89
,
D
a89
,

Od93
].
By
this
time
a
protot
yp
e
system
with
a
functionalit
y
corresp
onding
to
ab
out
1/10
of
the
complete
MD
110
[M
o82
,
Mdw]
had
b
een
designed
and
v
eried.
Based
on
the
A
CS
arc
hitecture
and
the
Erlang
programming
language
the
protot
yp
e
sho
w
ed
an
impro
v
emen
t
in
design
e√Üciency
b
y
a
factor
of
20
o
v
er
curren
t
tec
hnology
.
The
A
CS
arc
hitecture
structured
the
system
in
to
a
Basic
Op
er
ating
System
(BOS),
an
Applic
ations
Op
er
ating
System
(A
OS),
and
the
applications.
BOS
had
some
v
ery
sophisticated
structures
for
sup
ervising
the
system,
whic
h
w
ere
later
used
for
the
Op
en
T
ele
c
om
Platform
(see
b
elo
w).
Erlang
itself
underw
en
t
man
y
c
hanges
during
this
w
ork
{
whic
h
the
users
patien
tly
endured.
Most
notable
w
as
a
ma
jor
syn
tax
revision
from
a
Prolog
st
yle
to
a
functional
st
yle.
Declarativ
e
programming
and
Erlang
w
ere
men
tioned
in
a
presen
tation
b
y
Lars
Ramqvist
on
Strategies
and
T
ec
hnologies
for
the
1990's
[Ra88
].
In
Ma
y-June
1990,
the
XIII
International
Switching
Symp
osium
(ISS'90)
to
ok
place
at

Alvsj
o
Exhibition
Cen
tre
in
Sto
c
kholm
with
ab
out
2000
partic-
ipan
ts.
ISS
is
the
ma
jor
ev
en
t
in
telecomm
unications
and
this
is
where
Jo
e
Armstrong
and
Rob
ert
Virding
rst
o√Ücially
presen
ted
Erlang
to
the
w
orld
[Ar90
].
Erlang
w
as
also
demonstrated
during
a
tec
hnical
visit
whic
h
w
as
sho
wn
to
eigh
t
dieren
t
groups
during
a
hectic
da
y
.
I
had
written
the
demonstration
telephon
y
application
that
w
as
used.
The
original
purp
ose
of
this
demonstrator
w
as
to
exp
erimen
t
with
w
a
ys
to
structure
a
telephon
y
system
with
features
suc
h
as
call
bac
k,
short
n
um
b
er,
conference
call,
etc.
Ideally
eac
h
feature
should
b
e
represen
ted
as
a
separate
program
mo
dule.
Ho
w
ev
er,
since
ev
ery
feature
comes
in
at
man
y
dieren
t
p
oin
ts
in
the
system
a
system
usually
b
ecomes
a
complex
w
ea
v
e
when
all
of
them
are
com
bined.
In
the
demonstrator
the
features
w
ere
structured
as
incremen
ts
that
w
ere
in
v
ok
ed
from
the
outgoing
call
and
incoming
call
state
mac
hines.
The
presen
tation
at
ISS
w
as
noted
b
y
the
R
oyal
Swe
dish
A
c
ademy
of
the
Engine
ering
Scienc
es
(IV
A)
in
their
y
early
summary
of
tec
hnical
progress
in
Sw
eden
[Iv90
].
4.2
Steps
to
w
ards
a
Pro
duct
A
CS/Dunder
w
as
based
on
an
Erlang
in
terpreter
written
in
Prolog.
This
w
as
acceptable
for
a
protot
yp
e,
but
not
for
a
real
pro
duct.
(F
or
one
thing
a
real
time
system
cannot
b
e
allo
w
ed
to
stop
for
a
couple
of
seconds
no
w
and
again
for
garbage
collection.
A
prop
er
implemen
tation
w
ould
ha
v
e
to
include
an
incre-
men
tal
real
time
garbage
collector.)
The
users
at
EBC
also
required
a
sp
eed-up
b
y
at
least
a
factor
40.
The
Erlang
design
team
consisting
of
Jo
e
Armstrong,
Mik
e
Williams
and
Rob
ert
Virding
started
exp
erimen
ting.
One
attempt
w
as
a
cross
compiler
to
Strand
[F
o89
].
Finally
an
abstract
mac
hine,
Jo
e's
A
bstr
act
Machine
(JAM),
w
as
in
v
en
ted
inspired
b
y
the
W
arren
Abstract
Mac
hine
[Ma88
]
with
added
primitiv
es
for
concurrency
and
exception
handling
[Ar92a
].
Jo
e
wrote
the
compiler,
Mik
e
the
em
ulator
and
Rob
ert
the
supp
ort
libraries.
This
turned
out
to
b
e
70
times
faster
than
the
original
Prolog
in
terpreter.
Although
the
EBC
group
b
y
no
w

16
CHAPTER
4.
DEVELOPMENT
OF
ERLANG
Figure
4.2:
My
original
Erlang
logot
yp
e.
had
escalated
their
demands
the
JAM
implemen
tation
pro
v
ed
that
concurren
t
functional
programming
could
b
e
used
for
\soft
real
time"
system
pro
ducts,
i.e.
resp
onse
times
measured
in
milliseconds.
In
telecomm
unication
systems
\hard
real
time"
is
usually
handled
b
y
ded-
icated
(device
or
regional)
pro
cessors
close
to
the
hardw
are,
and
th
us
feature
resp
onse
times
of
microseconds.
In
1990,
Erlang
w
as
recommended
for
protot
yping
purp
oses
within
Ericsson
and
sev
eral
dieren
t
system
w
ere
designed
for
v
ery
dieren
t
purp
oses.
A
group
at
ERA
(Ericsson
R
adio
AB)
built
a
demo
system
[Ah92]
to
con
trol
a
cordless
exc
hange.
G
oran
B

age
at
CSLab
built
a
con
trol
system
for
a
photonic
switc
h
whic
h
w
as
sho
wn
at
T
elecom'91
in
Genev
a.
Sebastian
Strollo
(also
at
CSLab)
built
a
demo
system
[Bu92
]
whic
h
w
as
displa
y
ed
at
the
Eur
op
e
an
Confer
enc
e
on
Optic
Communic
ation
(ECOC)
in
P
aris
in
1992.
Both
these
systems
w
ere
set
up
for
p
ermanen
t
displa
y
at
the
switc
hing
lab
oratories
in
Ericsson.
Claes
Wikstr
om
and
Sebastian
Strollo
also
built
a
demo
system
for
TELI
of
their
planned
Ermes
pan-Europ
ean
paging
system
[Erm
].
(TELI
w
as
a
subsidiary
of
T
elev
erk
et
later
T
elia,
the
Sw
edish
national
telecom
op
erator.)
Erlang
w
as
used
in
R
ese
ar
ch
in
A
dvanc
e
d
Communic
ation
for
Eur
op
e
(RA
CE)
pro
jects
suc
h
as
Bip
ed
[Mo93
],
but
an
in
teresting
observ
ation
w
as
that
it
w
as
only
used
in
hardw
are
orien
ted
pro
jects.
In
suc
h
pro
jects
it
w
as
necessary
to
create
a
functioning
protot
yp
e
system
to
con
trol
some
hardw
are
in
a
short
time
using
only
a
few
p
eople.
The
soft
w
are
orien
ted
RA
CE
pro
jects
w
ere
m
uc
h
more
concerned
with
metho
dology
than
with
tec
hnology
.
In
Decem
b
er
1989
the
Erlang
Design
T
eam
and
m
yself
w
ere
in
vited
to
Bell-
core
to
presen
t
Erlang
and
to
giv
e
an
Erlang
course.
This
lead
to
John
Unger
building
a
large
subsystem
of
Cruiser,
a
system
for
m
ulti-media
comm
unica-
tion,
in
Erlang.
This
w
as
also
the
start
of
a
regular
course
activit
y
and
the
design
team
w
ork
ed
out
a
four
da
y
course
whic
h
w
as
giv
en
at
CSLab
and
I
found
m
yself
in
the
role
of
course
organiser.
In
1991
w
e
ga
v
e
three
courses
at
El
lemtel
Utve
cklings
AB
(EUA),
Sto
c
kholm,
plus
one
at
Ericsson
in
Rome
and
one
at
Ericsson
in
Melb
ourne.
In
1992
there
w
ere
further
courses
plus
one
at
T
elef
onica
in
Madrid.
The
course
w
as
also
held
at
the
R
oyal
Institute
of
T
e
ch-
nolo
gy
(KTH)
in
Sto
c
kholm
and
b
ecame
part
of
their
course
on
programming
of
parallel
systems.
A
t
Uppsala
a
studen
t
pro
ject,
Distorsion
[Di91
],
based
on
a
telephone
exc
hange
and
Erlang,
in
v
olving
ab
out
20
studen
ts,
w
as
carried
out
in
1991
whic
h
led
to
sev
en
studen
ts
doing
their
Master's
Theses
at
CSLab.

4.3.
ERLANG
SYSTEMS
17
Figure
4.3:
Erlang
Systems
logot
yp
e.
In
1992
the
decision
w
as
tak
en
to
dev
elop
Erlang
in
to
a
pro
duct
for
use
in
pro
duction
pro
jects.
EBC
also
decided
to
build
the
Mobilit
y
Serv
er
based
on
the
A
CS/Dunder
protot
yp
e
(see
ab
o
v
e).
The
Erlang
Design
T
eam
got
p
ermission
to
write
a
regular
text
b
o
ok,
whic
h
b
ecame
Concurr
ent
Pr
o
gr
amming
in
Erlang
[Ar93
]
prin
ted
b
y
Pren
tice
Hall
Ltd.
In
Octob
er
1992,
the
XIV
International
Switching
Symp
osium
to
ok
place
in
Y
ok
ohama,
Japan.
Ericsson
presen
ted
only
four
regular
pap
ers
of
whic
h
no
less
than
three
dealt
with
protot
yp
e
systems
dev
elop
ed
using
Erlang
[Ah92
,
Bu92
,
Er92
].
A
t
the
plenary
summary
at
the
end
of
the
symp
osium
the
soft
w
are
exp
ert,
P
eter
Cashin
from
Bell
Northern
Researc
h,
stated
that:

\W
e
should
tak
e
our
hats
o
to
Ericsson
for
lo
oking
at
soft
w
are
design
in
a
whole
new
w
a
y
."
Although
Ericsson
had
b
een
rather
inconspicuous
during
the
symp
osium
it
w
as
the
only
compan
y
to
b
e
men
tioned
when
the
symp
osium
w
as
summed
up.
4.3
Erlang
Systems
In
1993
Erlang
Systems
AB
w
as
established
as
a
subsidiary
of
Ericsson
Info
c
om
AB.
The
business
idea
w
as
to
sell
Erlang
as
a
to
ol
in
the
external
mark
et
and
also
to
pro
vide
training
and
consulting.
It
turned
out
that
the
mark
et
w
as
more
di√Ücult
than
exp
ected
and
Erlang
Systems
w
as
subsequen
tly
made
in
to
a
regular
departmen
t
within
Ericsson
Softwar
e
T
e
chnolo
gy
AB.
Ro
y
Bengtsson
w
as
then
app
oin
ted
manager
of
Erlang
Systems.
The
immediate
eect
of
Erlang
Systems
w
as
the
dev
elopmen
t
of
do
cumen-
tation
and
course
material
of
professional
qualit
y
.
Also
teac
hing
and
consulting
w
ere
carried
out
in
a
w
a
y
that
w
as
b
ey
ond
what
a
researc
h
lab
oratory
could
handle.
The
customers
w
ere
and
still
are
primarily
from
v
arious
pro
jects
within
Ericsson.
During
1998
and
1999
there
w
as
almost
one
course
ev
ery
w
eek,
see
Fig-
ure
4.4.
Most
courses
w
ere
giv
en
at
their
premises
in
Kista,
north
of
Sto
c
kholm.
Ho
w
ev
er,
often
it
has
b
een
more
practical
for
the
teac
her
to
tra
v
el
to
the
site
of
the
application
pro
ject.

18
CHAPTER
4.
DEVELOPMENT
OF
ERLANG
0
5
10
15
20
25
30
35
40
45
50
1988
1990
1992
1994
1996
1998
2000
Figure
4.4:
T
otal
n
um
b
er
of
courses
giv
en
p
er
y
ear.
There
are
10-12
pupils
at
eac
h
course.
The
initial
course
oering
consisted
of
the
follo
wing
course
program:

Basic
Erlang,
4
da
ys,

In
terop
erabilit
y
,
4
da
ys,

T
o
ols
and
libraries,
4
da
ys,

Adv
anced
Erlang,
4
da
ys.
T
able
10.2,
page
51,
details
the
course
curriculae
during
1998
and
T
able
10.3,
page
52,
the
n
um
b
er
of
studen
ts
and
courses
during
1997-1999.
In
1993
Concurr
ent
Pr
o
gr
amming
with
Erlang
[Ar93
]
w
as
published.
Erlang
b
ecame
kno
wn
around
the
w
orld
primarily
in
academic
circles
and
CSLab
deliv-
ered
systems
around
the
w
orld
(b
y
sending
magnetic
tap
es
through
the
regular
mail).
4.4
F
urther
T
ec
hnical
Dev
elopmen
ts
In
1992
Claes
Wikstr
om
at
CSLab
dev
elop
ed
an
ASN.1
[St90
]
compiler
[Wi92
].
This
w
as
the
rst
telecomm
unications
orien
ted
\to
ol"
written
in
and
for
Erlang.
Claes
also
joined
the
design
team
when
he
dev
elop
ed
Distributed
Erlang
[Wi94
]
in
1993.
Pro
cesses
in
dieren
t
Erlang
systems
(termed
no
des)
can
comm
unicate
through
message
passing
as
easily
as
b
et
w
een
pro
cesses
within
one
Erlang
sys-
tem.
Erlang
no
des
can
reside
in
dieren
t
pro
cessors
in
a
net
w
ork.
Claes
also

4.4.
FUR
THER
TECHNICAL
DEVELOPMENTS
19
1
10
100
1000
10000
1988
1990
1992
1994
1996
1998
Figure
4.5:
T
otal
n
um
b
er
of
external
deliv
eries
of
Erlang
p
er
y
ear
free
of
c
harge
for
academic
or
ev
aluation
purp
oses
prior
to
the
op
en
sour
c
e.
External
mark
et-
ing
w
as
stopp
ed
during
1995.
extended
the
Erlang
error
handling
mec
hanisms
to
deal
with
errors
in
the
com-
m
unication
or
when
no
des
go
do
wn.
This
w
as
y
et
a
further
break-through
since
distributed
programming
is
notoriously
v
ery
di√Ücult.
Claes
b
ecame
coauthor
of
the
second
edition
of
Concurr
ent
Pr
o
gr
amming
with
Erlang
whic
h
app
eared
in
1996
[Ar96a
].
In
1994
Magn
us
F
r
ob
erg,
also
at
CSLab,
dev
elop
ed
a
translator
from
the
Sp
e
cic
ation
and
Description
L
anguage
(SDL)
[CC84a
,
Ro85
]
to
Erlang
[F
r93
].
SDL
is
a
system
description
language
created
b
y
C.C.I.T.T.
whic
h
is
widely
used
in
telecomm
unications.
F
or
example,
man
y
comm
unication
proto
cols
are
describ
ed
using
SDL.
SDL
exists
b
oth
in
a
graphical
o
w
c
hart
lik
e
form
and
in
a
textual
form
lo
oking
m
uc
h
lik
e
a
program.
It
turned
out
that
the
generated
Erlang
co
de
w
as
ab
out
the
same
v
olume
as
the
SDL
textual
form.
Despite
the
in
terest
in
SDL
and
that
man
y
ha
v
e
ask
ed
ab
out
this
to
ol
there
ha
v
e
b
een
no
users.
Probably
Erlang
programmers
do
not
see
the
need
for
SDL
and
vice
v
ersa.
(A
later
Master's
Thesis
[Wi95]
dev
eloping
an
application
rst
using
Erlang
and
then
using
SDL/SDT
sho
w
ed
that
the
Erlang
design
to
ok
only
half
the
time.
Ho
w
ev
er,
the
programmer
had
a
functional
programming
bac
kground.)
Ha
ving
Erlang
as
a
distributed
concurren
t
functional
language
enabled
CSLab
to
attac
k
further
complex
applications.
In
1995
Hans
Nilsson
and
Claes
Wik-
str
om
dev
elop
ed
a
distributed
real
time
database
with
transactions
and
query
pro
cessing
called
Amnesia
[Ni96a
,
Ni96b].
This
w
as
later
pro
ductied
and
re-
named
Mnesia
[Ma99
].
In
Octob
er
1993
Erlang
V4.1,
the
rst
commercial
release,
w
as
deliv
ered.

20
CHAPTER
4.
DEVELOPMENT
OF
ERLANG
In
1995
Erlang
Systems
to
ok
o
v
er
the
academic
distribution
of
Erlang.
After
some
time
this
w
as
made
in
to
a
free
distribution
o
v
er
In
ternet
for
researc
h
and
education,
see
Figure
4.5.
Erlang
Systems
also
issues
academic
licences
whic
h
giv
es
free
access
to
all
teac
hing
material.
T
able
10.4,
page
53,
lists
the
academic
licence
holders
in
1999.
On
Ma
y
4-5,
1994,
I
organised
the
First
International
Erlang
User
Confer-
enc
e
together
with
Erlang
Systems.
It
w
as
held
at
Ellem
tel
with
ab
out
100
par-
ticipan
ts.
This
has
no
w
b
ecome
a
y
early
ev
en
t
(see
App
endix
2
and
3,
page
71
and
72).
The
conference
in
2000
gathered
145
participan
ts
whic
h
lled
the
lec-
ture
hall
and
a
w
aiting
list
w
as
in
op
eration
from
four
w
eeks
b
efore
the
ev
en
t.
Ov
er
the
y
ears
a
large
n
um
b
er
of
Master's
Theses
(see
App
endix
1,
page
68)
ha
v
e
b
een
written
on
sub
jects
related
to
Erlang,
some
of
whic
h
ha
v
e
b
een
quite
adv
anced
suc
h
as
an
implemen
tation
of
Erlang
based
on
OS
threads
[He98
].
Another
dealt
with
the
design
of
an
SNMP
[St99a
]
agen
t
[Bj95
]
whic
h
w
as
later
turned
in
to
a
regular
pro
duct
as
part
of
OTP
(see
b
elo
w).
4.5
Early
Mark
eting
Eorts
Mik
e
Williams,
Ro
y
Bengtsson
and
P
er
Erik
Witasp,
who
w
as
in
c
harge
of
external
mark
eting
(but
with
a
v
ery
limited
budget),
made
a
couple
of
lecture
tours
round
Sw
eden
and
USA
presen
ting
Erlang
but
with
little
success.
They
had
discussions
with
In
tegrated
Systems,
Inc.
[Isw
]
ab
out
p
ossible
co
op
eration
but
this
fell
through
when
the
k
ey
con
tact
p
erson
left
ISI.
4.6
Erlang
Summary
The
op
en
sour
c
e
Erlang
White
P
ap
er
[Whp]
pro
vides
an
o
v
erview
as
w
ell
as
14
program
examples.
4.6.1
Sequen
tial
Erlang
Erlang
is
a
single
assignmen
t,
functional
programming
language
language
with
dynamic
t
yping
not
unlik
e
Sc
heme.
Its
syn
tax,
ho
w
ev
er,
is
more
lik
e
ML.
Erlang
has
data
t
yp
es
lik
e
atoms,
n
um
b
ers,
lists,
and
tuples
and
uses
p
attern
matching
to
select
b
et
w
een
alternativ
es.
The
only
lo
op
construct
is
recursion.
An
Erlang
program
is
built
up
of
mo
dules
and
mo
dules
are
separately
com-
piled
and
loaded.
Only
explicitly
exp
orted
functions
can
b
e
called
from
another
mo
dule.
4.6.2
Concurrency
F
unctions
can
b
e
sp
awne
d
to
create
a
concurren
t
pro
cess
(or
thread
of
con
trol).
Concurrency
is
supp
orted
b
y
the
Erlang
implemen
tation
without
help
from
the
op
erating
system.
Pro
cesses
ha
v
e
no
shared
memory
and
comm
unicate
b
y
send-
ing
and
receiving
messages
async
hronously
.
Receiving
pro
cesses
select
messages
through
pattern
matc
hing.

4.6.
ERLANG
SUMMAR
Y
21
Pro
cesses
in
Erlang
pro
cesses
are
extremely
ligh
t
w
eigh
t
and
their
memory
requiremen
ts
can
v
ary
dynamically
.
Erlang
implemen
tations
supp
ort
applica-
tions
with
v
ery
large
n
um
b
ers
of
concurren
t
pro
cesses
(t
ypically
in
the
region
of
20,000-30,000).
Erlang
supp
orts
programming
\soft"
real
time
systems,
whic
h
require
re-
sp
onse
times
on
the
order
of
milliseconds.
Long
garbage
collection
dela
ys
in
suc
h
systems
are
unacceptable,
so
Erlang
is
able
to
reclaim
memory
in
small
parts
of
the
system
ev
ery
time
the
garbage
collector
is
in
v
ok
ed.
4.6.3
Distribution
Erlang
p
ermits
transparen
t
distribution.
An
Erlang
program
running
on
a
com-
puter
is
termed
an
Erlang
no
de.
A
distributed
Erlang
system
consists
of
sev
eral
Erlang
no
des
spread
o
v
er
man
y
computers
(p
erhaps
running
dieren
t
op
erating
systems)
connected
o
v
er
a
net
w
ork.
One
Erlang
no
de
can
create
concurren
t
pro
cesses
running
on
other
no
des
and
Erlang
pro
cesses
in
dieren
t
no
des
can
comm
unicate
through
message
passing
in
the
same
w
a
y
as
pro
cesses
within
one
no
de
with
automatic
marshalling.
4.6.4
Robustness
An
Erlang
pro
cess
can
crash
(b
ecause
of
t
yp
e
error,
division
b
y
zero
etc.)
but
this
will
only
bring
do
wn
that
pro
cess
not
the
en
tire
system
(or
no
de).
Erlang
pro
cesses,
ho
w
ev
er,
can
monitor
eac
h
other
so
that
an
error
can
b
e
receiv
ed
as
an
error
message.
This
enables
the
design
of
robust
systems
where
sup
ervisor
pro
cesses
can
tak
e
action,
reclaim
resources,
log
errors,
restart
a
transaction
etc.
These
mec
hanisms
extend
also
o
v
er
dieren
t
no
des
in
a
distributed
system.
F
or
example,
a
distributed
system
can
b
e
congured
to
fail-o
v
er
to
other
no
des
in
case
of
failures
and
automatically
migrate
bac
k
to
reco
v
ered
no
des.
This
enables
the
design
of
soft-fail
systems
where
in
a
telecomm
unications
system
an
error
in
one
call
ma
y
bring
do
wn
that
call
while
the
rest
of
the
system
is
not
aected.
4.6.5
Soft
w
are
Upgrading
in
Running
Systems
Erlang
allo
ws
program
co
de
to
b
e
c
hanged
in
a
running
system
(\hot"
co
de
load-
ing).
When
a
new
v
ersion
of
a
mo
dule
is
loaded,
newly
spa
wned
pro
cesses
will
run
the
new
v
ersion
while
on-going
pro
cesses
con
tin
ue
and
nish
undisturb
ed.
It
is
th
us
p
ossible
to
install
bug
xes
and
upgrades
in
a
running
system
without
disturbing
its
(curren
tly
running)
op
eration.
Users
can
con
trol
in
detail
ho
w
co
de
is
loaded.
In
em
b
edded
systems,
all
co
de
is
usually
loaded
at
b
o
ot
time.
In
dev
elopmen
t
systems,
co
de
is
loaded
when
it
is
needed,
ev
en
when
the
system
is
running.
If
testing
unco
v
ers
bugs,
only
the
buggy
co
de
need
b
e
replaced.
4.6.6
External
In
terfaces
Erlang
pro
cesses
comm
unicate
with
the
outside
w
orld
using
the
same
message
passing
mec
hanism
as
is
used
b
et
w
een
Erlang
pro
cesses.
This
mec
hanism
is

22
CHAPTER
4.
DEVELOPMENT
OF
ERLANG
Pro
cessor
SP
AR
C
Pentium
PowerPC
Sun
Solaris
2
X
-
-
Sun
Solaris
x86
-
X
-
Op
erating
VxWorks
X
-
X
System
Windows
NT
4.0
-
X
-
Windows
95
-
X
-
Linux
-
X
-
T
able
4.1:
Supp
orted
platforms,
Marc
h
1999.
Erlang
can
b
e
p
orted
to
an
y
system
running
C.
Op
en
source
Erlang
has
also
b
een
p
orted
to
F
reeBSD
b
y
an
external
user
and
included
in
their
latest
release.
used
for
comm
unication
with
the
host
op
erating
system
and
for
in
teraction
with
programs
written
in
other
languages.
If
required
for
reasons
of
e√Üciency
,
a
sp
ecial
v
ersion
of
this
concept
allo
ws
C
programs
to
b
e
directly
link
ed
in
to
the
Erlang
run
time
system.
4.6.7
P
ortabilit
y
Since
Erlang
is
implemen
ted
in
C
it
is
essen
tially
a
v
ailable
on
all
systems
that
run
C.
Erlang
is
at
presen
t
supp
orted
for
the
follo
wing
op
erating
systems;
So-
laris,
Windo
ws
NT,
VxW
orks,
and
Lin
ux,
see
T
able
4.1.
4.6.8
Program
Dev
elopmen
t
Erlang
allo
ws
the
same
rapid
protot
yping
and
in
teractiv
e
dev
elopmen
t
as,
for
example,
Lisp
but
extended
in
to
the
w
orld
of
concurrency
and
distribution.
The
error
handling
mec
hanisms
and
hot
co
de
loading
allo
w
the
design
of
high
a
v
ailabilit
y
,
robust,
non-stop
systems.
4.7
Matc
h
against
Requiremen
ts
T
able
4.2
matc
hes
Erlang
against
the
requiremen
ts
dened
in
Section
3
and
T
able
3.1
ab
o
v
e.
Programming
is
b
oth
a
top
down
activit
y
from
requiremen
ts
and
o
v
erall
structure
of
the
system
and
a
b
ottom
up
activit
y
based
on
the
abstr
actions
pro-
vided
b
y
the
programming
language.
Abstractions
suc
h
as
mo
dules,
pr
o
c
esses,
higher
or
der
functions,
etc.
are
to
the
programmer
lik
e
transistors,
capacitors,
resistors,
etc.
to
the
hardw
are
designer.
It
is
imp
ortan
t
that
the
abstractions
b
e
few,
simple
to
understand
and
y
et
p
o
w
erful
and
pro
vide
the
needed
function-
alit
y
.
F
or
example,
if
the
application
is
inheren
tly
concurren
t
it
w
ould
b
e
v
ery
di√Ücult
to
program
without
some
pro
cess
concept.
In
that
case
the
application
program
itself
w
ould
ha
v
e
to
include
some
form
of
sc
heduler.
Distribution,
error
handling,
and
hot
co
de
loading
are
extremely
complicated
requiremen
ts
and
the
supp
ort
for
them
pro
vided
b
y
Erlang
enables
the
programmer
to
concen
trate
on
the
application
rather
than
on
the
basic
programming
tec
hnology
.

4.7.
MA
TCH
A
GAINST
REQUIREMENTS
23
1
Hand
ling
of
a
very
lar
ge
numb
er
of
c
oncurr
ent
ac-
tivities
Concurrency
is
pro
vided
through
a
light
weight
pr
o
c
ess
con-
cept
and
a
t
ypical
Erlang
implemen
tation
can
handle
20-
30,000
concurren
t
pro
cesses
in
one
no
de.
2
A
ctions
to
b
e
p
erforme
d
at
a
c
ertain
p
oint
in
time
or
within
a
c
ertain
time
Erlang
handles
soft
real
time.
3
Systems
distribute
d
over
sever
al
c
omputers
An
Erlang
system
ma
y
con
tain
no
des
distributed
o
v
er
man
y
computers
running
dieren
t
op
erating
systems
o
v
er
a
net
w
ork.
4
Inter
action
with
har
d-
war
e
Erlang
can
easily
comm
unicate
with
hardw
are
driv
ers.
5
V
ery
lar
ge
softwar
e
sys-
tems
Mo
dularisation
is
supp
orted
b
y
the
mo
dule
concept.
W.r.t.
actual
size,
see
Section
6.
6
Complex
functionality
such
as
fe
atur
e
inter
ac-
tion
Dep
ends
on
the
applications,
see
Section
6.
7
Continuous
op
er
ation
for
many
ye
ars
Dep
ends
on
the
applications,
see
section
6.
8
Softwar
e
maintenanc
e
(r
e
c
ongur
ation,
etc.)
without
stopping
the
system
Erlang
p
ermits
hot
co
de
loading.
9
Stringent
quality
and
r
e-
liability
r
e
quir
ements
Dep
ends
on
the
applications,
see
Section
6.
10
F
ault
toler
anc
e
b
oth
to
har
dwar
e
failur
es
and
softwar
e
err
ors
Erlang
con
tains
mec
hanisms
to
catc
h
and
con
tain
errors
and
to
design
sup
ervision
structures.
T
able
4.2:
Matc
hing
Erlang
against
the
requiremen
ts
on
a
programming
tec
h-
nology
for
telecomm
unication
switc
hing
systems.

24
CHAPTER
4.
DEVELOPMENT
OF
ERLANG

5
Op
en
T
elecom
Platform
In
late
1995,
a
remote
access
system
w
as
b
eing
dev
elop
ed
at
Ericsson
T
ele-
c
om
AB
(ETX)
using
Asymmetric
al
Digital
Subscrib
er
Line
(ADSL)
tec
hnology
whic
h
enables
fast
transmission
o
v
er
copp
er
wires
and
a
decision
had
to
b
e
made
regarding
the
selection
of
an
appropriate
programming
tec
hnology
.
Three
dieren
t
prop
osals
w
ere
prepared;
one
of
whic
h
came
from
CSLab,
termed
the
Op
en
System
prop
osal.
Jo
e
Armstrong,
Mik
e
Williams,
and
m
yself
had
long
prop
osed
an
op
en
sys-
tem
approac
h
where
dieren
t
tec
hnologies,
computers,
languages,
databases,
managemen
t
systems,
etc.
could
co
op
erate.
Man
y
suc
h
system
comp
onen
ts
w
ould
come
from
suppliers
and
some
from
Ericsson's
o
wn
dev
elopmen
ts
(where
either
no
existing
comp
onen
t
w
as
a
v
ailable
or
Ericsson
had
tec
hnology
that
pro
vided
a
commercial
adv
an
tage).
The
prop
osal
[An95
]
from
CSLab
w
as
based
up
on:

Commercial
pro
cessors,

Commercial
op
erating
systems,

Erlang,

The
pro
ductied
Amnesia
DBMS,
renamed
Mnesia,

The
pro
ductied
SNMP
agen
t,

The
BOS
from
the
Mobilit
y
Serv
er,
rewritten
and
b
etter
in
tegrated
with
Erlang,
renamed
System
A
r
chite
ctur
e
Supp
ort
Libr
aries
(SASL
1
),

Pro
ductied
dev
elopmen
t
to
ols
(debugger,
in
terpreter,
etc.),

In
terw
orking
with
device
pro
cessors
(usually
programmed
in
C),

In
terw
orking
with
other
soft
w
are
(proto
col
stac
ks,
routing
soft
w
are,
etc.
usually
written
in
C).
Careful
estimates
of
execution
times
w
ere
also
made.
As
it
turned
out
the
Op
en
System
prop
osal
w
as
giv
en
the
go
ahead
with
a
tigh
t
sc
hedule
to
pro
duce
a
protot
yp
e
system
in
six
mon
ths,
i.e.,
to
deliv
er
b
y
the
end
of
Ma
y
1996.
I
w
as
app
oin
ted
pro
ject
manager
of
the
rst
phase
of
the
pro
ject
and
Mik
e
Williams
w
as
app
oin
ted
systems
designer
of
the
access
no
de
pro
ject.
1
The
name
SASL
usually
means
St
A
ndr
ews
Static
L
anguage
whic
h
w
as
a
precursor
to
Miranda.
25

26
CHAPTER
5.
OPEN
TELECOM
PLA
TF
ORM
Immediately
after
the
start
of
this
pro
ject
an
ev
en
more
imp
ortan
t
appli-
cation
pro
ject
started,
the
dev
elopmen
t
of
an
A
TM
switc
h.
The
large
AXE/N
pro
ject
(where
Erlang
w
as
not
used)
whic
h
had
b
een
running
during
1987-95
had
b
een
closed
do
wn,
whic
h
also
caugh
t
the
notice
of
the
press
[Ol95
,
W
a95a
,
W
a95b
]
and
it
w
as
a
matter
of
great
urgency
to
rapidly
ll
this
gap
in
the
pro
d-
uct
range.
The
new
pro
ject
in
v
olv
ed
ab
out
200
p
eople
among
them
at
least
60
Erlang
programmers.
Erlang
Systems
b
ecame
deeply
in
v
olv
ed
with
teac
hing
and
consulting.
A
t
this
p
oin
t
external
mark
eting
of
Erlang
for
pro
duct
dev
elopmen
t
w
as
stopp
ed
since
all
eorts
w
ere
to
b
e
concen
trated
on
the
Op
en
System
pro
ject.
Erlang
Systems
had
w
ork
ed
for
a
couple
of
y
ears
on
external
mark
eting
whic
h
turned
out
to
b
e
v
ery
di√Ücult
since
few
dared
to
use
a
programming
language
from
Ericsson
whic
h
w
as
not
widely
used
b
y
Ericsson
itself.
No
w
when
that
situation
had
c
hanged
Erlang
Systems
could
ha
v
e
made
a
large
mark
eting
push,
but
instead
had
to
close
do
wn
the
external
mark
eting.
Ho
w
ev
er,
it
w
as
still
p
ermitted
to
deliv
er
Erlang
for
researc
h,
education
and
protot
yping,
primarily
to
univ
ersities.
F
or
some
time
the
access
no
de
and
the
A
TM
switc
h
pro
jects
w
ere
the
only
pro
jects
p
ermitted
to
use
the
the
emerging
op
en
system
and
for
the
same
reason,
to
fo
cus
the
\resources".
Other
pro
jects
had
to
apply
to
the
steering
group
for
p
ermission.
The
system
w
as
named
Op
en
T
ele
c
om
Platform
(OTP)
and
the
pro
ject
de-
liv
ered
the
rst
protot
yp
e
system
on
time
at
the
end
of
Ma
y
1996.
F
rom
the
b
eginning
it
w
as
clear
that
managemen
t
of
OTP
[T
o97
]
w
ould
ha
v
e
to
b
e
han-
dled
b
y
a
sp
ecic
pro
duct
unit
and
this
w
as
b
eing
created
in
parallel.
After
the
rst
protot
yp
e
phase
Catrin
Gran
b
om
to
ok
o
v
er
as
pro
ject
manager
and
Sev
ed
T
orstendahl
as
pro
duct
manager.
Tw
o
w
eeks
later
the
A
TM
pro
ject
had
passed
their
rst
dead-line.
After
that
b
oth
OTP
and
the
A
TM
pro
ject
ha
v
e
stuc
k
to
their
time
sc
hedules
and
the
A
TM
pro
duct
w
as
announced
in
Marc
h
1998.
OTP
system
comp
onen
ts:

Distributed
application
managemen
t,

SASL
-
error
logging,
release
handling,

OS
resource
monitoring,

EV
A
-
proto
col
indep
enden
t
ev
en
t/alarm
handling,

Mnesia
-
real
time
activ
e
data
replication,

SNMP
-
op
erations
and
main
tenance
in
terface,

INETS
-
simple
HTTP
supp
ort.
A
k
ey
subsystem
in
OTP
is
the
System
A
r
chite
ctur
e
Supp
ort
Libr
aries
(SASL)
whic
h
giv
e
a
framew
ork
for
writing
applications.
SASL
pro
vides:

Start-up
scripts,

An
application
concept,

Beha
viours
(design
patterns),

27

Error
handling,

Debugging,

High-lev
el
soft
w
are
upgrades
in
run
time
without
sh
utdo
wn.
The
b
ehaviours
pro
vide
the
programmer
with
y
et
higher
lev
el
abstractions
for
e√Ücien
t
program
design
[Dp
w]:

Sup
ervision,

Serv
ers,

Ev
en
t
handling,

Finite
State
Mac
hines.
SASL
raises
the
lev
el
of
abstraction
and
giv
es
the
system
designers
a
p
o
w
erful
framew
ork
for
systems
design
with
built-in
supp
ort
for
distribution,
incremen-
tal
co
de
loading,
error
handling
(and
logging),
etc.
Mnesia
and
other
OTP
comp
onen
ts
are
handled
as
\applications"
b
y
SASL.
SASL
consolidated
ideas
on
programming
patterns
that
came
b
oth
from
the
Erlang
group
at
CSLab
and
the
BOS
dev
elop
ed
b
y
the
protot
yping
team
at
EBC.
A
new
unit
w
as
created
for
managemen
t,
supp
ort,
and
further
dev
elop-
men
t
of
OTP
.
Early
1997
the
OTP
pr
o
duct
unit
w
as
formally
established
with
T
orb
j
orn
Johnson
as
manager.
Up
on
his
retiremen
t
he
w
as
replaced
b
y
Mik
e
Williams
and
in
1998,
when
he
in
turn
mo
v
ed
on
within
Ericsson,
Kenneth
Lundin
to
ok
o
v
er.
T
ec
hnology
transfer
from
CSLab
to
the
OTP
pro
duct
unit
w
as
handled
as
follo
ws:

Already
in
the
rst
protot
yp
e
phase,
the
pro
duct
unit
to
ok
o
v
er
systems
in
tegration
and
release
managemen
t.

F
rom
the
second
dev
elopmen
t
phase,
the
pro
duct
unit
to
ok
o
v
er
pro
ject
leadership
and
pro
duct
managemen
t.

Designers
from
the
pro
duct
unit
joined
the
dieren
t
design
teams
(for
complier,
SASL,
etc.)
and
CSLab
p
ersonnel
w
ere
phased
out
o
v
er
a
longer
p
erio
d.

CSLab
and
the
OTP
pro
duct
unit
are
still
colo
cated.
By
the
end
of
1998
the
OTP
unit
n
um
b
ered
ab
out
20
p
eople
and
had
tak
en
complete
con
trol
o
v
er
the
system.
With
successiv
e
releases
new
functionalit
y
has
b
een
added
suc
h
as
an
implemen
tation
of
the
Common
Obje
ct
R
e
quest
Br
o-
ker
A
r
chite
ctur
e
(CORBA)
[Omg
,
Si96
].
This
has
b
een
a
v
ailable
since
OTP
release
R5B
in
F
ebruary
1998.
Erlang
Systems
adjusted
their
courses
and
dev
elop
ed
an
OTP
Pr
o
gr
amming
course.

28
CHAPTER
5.
OPEN
TELECOM
PLA
TF
ORM

6
Selected
Industrial
Applications
6.1
AXD
301
A
TM
Switc
h
The
AXD
301
[Axd,
Bl98
,
Bl99
]
is
a
new
generation
high
p
erformance
Asyn-
chr
onous
T
r
ansfer
Mo
de
(A
TM)
switc
hing
system.
It
is
extremely
compact
and
has
linear
scalabilit
y
of
switc
hing
and
con
trol
capacit
y
.
The
system
is
in
tended
for
public
net
w
ork
op
erators
and
Internet
Servic
e
Pr
oviders
(ISP's).
The
AXD
301
is
a
k
ey
building
blo
c
k
in
Ericsson's
m
ulti-service
net
w
ork
solution.
Applications
include
A
TM
connectivit
y
net
w
orks,
scalable
F
rame
Re-
la
y
/
A
TM
net
w
orks
and
Multipr
oto
c
ol
L
ab
el
Switching
(MPLS)
for
e√Ücien
t
handling
of
IP
tra√Üc
as
w
ell
as
m
ulti-service
business
net
w
orks
and
residen
tial
broadband
net
w
orks.
AXD
301
can
also
b
e
com
bined
with
Ericsson's
AXE
nar-
ro
w
band
switc
hing
system
to
pro
vide
a
full
range
of
narro
w
band
services
o
v
er
A
TM.
All
of
these
applications
can
run
sim
ultaneously
on
the
same
switc
h.
Main
features:

Scalabilit
y:
F
rom
10
Gbit/s
in
one
subrac
k
up
to
160
Gbit/s,

Carrier
class:
Non-stop
op
eration,

Mo
dularit
y:
Extendible
with
new
functions,

F
unctionalit
y:
All
A
TM
F
orum
and
ITU
signalling
and
service
cate-
gories,

Manageabilit
y:
Em
b
edded
w
eb
based
elemen
t
manager
with
a
standard
in
terface
to
managemen
t
systems
(i.e.,
SNMP).
The
in
ternal
computing
resources
of
the
10
Gbit/s
switc
hing
system
consist
of:

Tw
o
general-purp
ose
con
trol
pro
cessors
whic
h
handle
net
w
ork-signalling
termination,
call
con
trol,
and
op
eration
&
main
tenance,

Simple
device-con
trol
pro
cessors,
one
on
eac
h
A
TM
termination
b
oard
and
switc
h-core
b
oard
for
lo
w-lev
el
con
trol
of
the
switc
h
hardw
are.
F
or
in
ter-pro
cessor
comm
unication
and
net
w
ork
signalling,
ev
ery
pro
cessor
is
connected
to
the
A
TM
switc
h
core.
The
device
pro
cessors
on
the
A
TM
termina-
tion
b
oards
are
connected
through
the
lo
cal
switc
h
p
ort,
the
con
trol
pro
cessors
and
device
pro
cessors
on
the
switc
h
core
b
oards
are
connected
(via
the
subrac
k
bac
kplane)
to
the
switc
h
p
ort
of
the
nearest
A
TM
termination
b
oard.
29

30
CHAPTER
6.
SELECTED
INDUSTRIAL
APPLICA
TIONS
During
normal
op
eration,
one
con
trol
pro
cessor
handles
calls,
while
the
other
pro
cessor
handles
op
eration
and
main
tenance.
In
addition,
eac
h
pro
cessor
acts
as
a
standb
y
for
its
coun
terpart.
In
the
ev
en
t
that
one
of
the
pro
cessors
should
fail
or
b
e
tak
en
out
of
op
eration,
the
system
automatically
switc
hes
o
v
er
to
single-pro
cessor
mo
de.
An
in
ternal,
distributed,
real
time
database
managemen
t
system
(based
on
Mnesia)
copies
data
to
eac
h
con
trol
pro
cessor,
ensuring
that
conguration
data
and
all
data
relating
to
op
erator
ordered
connection
setup
are
protected
from
pro
cessor
failure.
AXD
301
w
as
announced
in
Marc
h
1998.
Quote
\with
Erlang/OTP
as
the
core
tec
hnology
,
an
op
en
arc
hitecture
w
as
built,
enabling
the
use
of
Erlang,
C,
Ja
v
a
[Go96
]
and
dynamically
generated
HTML/Ja
v
aScript
in
the
areas
appro-
priate
for
eac
h
language:

C
for
driv
ers,
lo
w
lev
el
proto
cols
and
in
tegrating
third
part
y
comp
onen
ts
(280,000
lines).

Ja
v
a,
Ja
v
aScript
and
HTML
for
the
managemen
t
in
terface.
(2,500
lines
of
Ja
v
a
and
110,000
lines
of
Ja
v
aScript
and
HTML
(generated
co
de).)

Erlang
for
con
trol
and
managemen
t
functions
(290,000
lines)."
[Wi98a
]
This
giv
es
a
nice
illustration
of
the
assumption
made
ab
o
v
e
that
telecomm
u-
nication
systems
w
ould
lik
ely
b
e
designed
using
a
com
bination
of
tec
hnologies.
The
sourced
soft
w
are
are
from
previous
Ericsson
pro
jects
but
most
imp
or-
tan
tly
80,000
lines
of
C
from
T
rillium
Soft
w
are
for
handling
Private
Network-
Network
Interfac
e
(PNNI)
routing.
(These
gures
ha
v
e
gro
wn
considerably
since
then,
see
T
able
6.1,
page
35,
ro
w
5.)
Ev
en
more
imp
ortan
t
w
as
that
the
pro
ject
has
b
een
able
to
w
ork
in
successiv
e
incremen
tal
protot
yp
es.
One
dra
wbac
k
with
the
sequen
tial
\w
aterfall"
[Y
o92
]
mo
del
is
the
di√Ücult
y
to
go
bac
k
when
errors
in
design
suc
h
as
capacit
y
problems
o
ccur.
F
unctional
but
limited
AXD
301
systems
w
ere
a
v
ailable
at
a
v
ery
early
stage,
th
us
enabling
measuremen
ts
and
allo
wing
the
designers
to
ev
aluate
their
design.
Successiv
e
v
ersions
rened
the
system
and
added
new
functionalit
y
.
T
o
date
250
AXD
301
systems
ha
v
e
b
een
deliv
ered
to
20
coun
tries.
The
AXD
301
system
is
also
an
in
tegral
part
of
Ericsson's
ENGINE
concept
[Pr99c
]
whic
h
has
b
een
ordered
b
y
op
erators
suc
h
as
British
T
elecom
and
T
elef
onica.
6.2
ANx
Access
No
de
ANx-DSL
[Ni98
]
is
Ericsson's
access
solution
for
deliv
ery
of
high
sp
eed
IP/A
TM
based
services
to
medium,
small
business
and
residen
tial
users
o
v
er
existing
copp
er
net
w
orks.
The
ANx-DSL
system
uses
Asymmetric
Digital
Subscrib
er
Line
(ADSL)
tec
hnology
to
dramatically
increase
bandwidth
in
the
existing
copp
er
access
net
w
ork.
This
means
that
p
eople
w
orking
from
home
can
do
wnload
large
data
les
faster
than
ev
er
b
efore.
An
additional
adv
an
tage
is
that
Ericsson's
ANx
ADSL
platform
supp
orts
digital
video
services.
The
ANx-DSL
equipmen
t
is
installed
in
the
op
erator's
cen
tral
o√Üce,
where
a
splitter
and
a
m
ultiplexer
separate
v
oice
and
data
signals
to
and
from
the

6.3.
GPRS
31
subscrib
er,
and
concen
trate
data
c
hannels
for
forw
arding
to
the
data
net
w
ork
bac
kb
one.
Ev
en
at
lo
w
tak
e-up
rates,
this
is
a
exible
and
scaleable
system,
easy
to
install
and
extremely
cost-eectiv
e.
The
con
trol
system
is
based
on
OTP
and
Erlang.
The
database
and
the
hard
disk
for
secure
storage
of
p
ermanen
t
data
are
also
lo
cated
at
the
con
trol
pro
cessor.
Eac
h
b
oard
in
the
system
has
a
device
pro
cessor
or
a
b
oard
con
troller,
whic
h
is
a
lo
w-end
micropro
cessor.
The
device
pro
cessor
comm
unicates
with
the
con
trol
pro
cessor
through
in-band
A
TM
comm
unication
or
via
a
separate
Ethernet
LAN.
The
b
oard
con
trollers
comm
unicate
via
A
TM
with
one
of
the
device
pro
cessors,
whic
h
acts
as
a
shelf
con
troller;
in
other
w
ords,
the
device
pro
cessor
con
tains
sp
ecic
soft
w
are
for
main
taining
the
b
oard
con
trollers.
In
ANx-DSL,
the
ADSL
b
oards
and
the
net
w
ork
termination
b
oards
ha
v
e
b
oard
con
trollers,
whereas
the
exc
hange
termination
b
oards
ha
v
e
device
pro
cessors.
In
Octob
er
1998
Ericsson
signed
an
agreemen
t
with
T
elia
to
supply
ANx
during
a
t
w
o
y
ear
p
erio
d
[Pr98
].
6.3
GPRS
Gener
al
Packet
R
adio
Servic
e
(GPRS)
[Gprs,
Gr99
]
is
a
standard
from
the
Eu-
r
op
e
an
T
ele
c
ommunic
ations
Standar
ds
Institute
(ETSI)
on
pac
k
et
data
in
GSM
systems.
By
adding
GPRS
functionalit
y
to
the
public
land
mobile
net
w
ork,
op
erators
can
giv
e
their
subscrib
ers
resource-e√Ücien
t
access
to
external
IP
net-
w
orks
and
enable
them
to
sta
y
alw
a
ys
connected.
GPRS
oers
air-in
terface
transfer
rates
up
to
115
kbit/s
sub
ject
to
mobile
terminal
capabilities
and
carrier
in
terference.
Moreo
v
er,
GPRS
allo
ws
sev
eral
users
to
share
the
same
air-in
terface
resources
and
enables
op
erators
to
base
c
harging
on
the
amoun
t
of
transferred
data
instead
of
on
connection
time.
The
w
orld's
rst
demo
of
GPRS
(whic
h
had
b
een
dev
elop
ed
in
Erlang)
w
as
sho
wn
at
CeBit
1998
and
the
t
w
o
no
des,
SGSN
and
GGSN,
are
dev
elop
ed
based
on
Erlang/OTP
.
By
the
b
eginning
of
y
ear
2000
Ericsson
holds
more
than
50%
of
the
w
orld
mark
et
in
GPRS
and
in
F
ebruary
,
2000,
Ericsson
presen
ted
the
rst
liv
e
GPRS
phone
in
the
rst
end-to-end
liv
e
GPRS
net
w
ork
demo
[Pr00b
].
6.4
A
Commen
t
on
Soft
w
are
Engineering
Exp
eriences
from
the
use
of
Erlang
in
man
y
sometimes
v
ery
large
pro
jects
indi-
cate
clearly
the
t
w
o
dieren
t
traditions
within
softwar
e
engine
ering.
The
most
successful
pro
jects
are
run
b
y
en
th
usiastic
teams,
w
orking
hands-on
and
pro
duc-
ing
rapid
results.
The
prime
examples
is
the
AXD
301
whic
h
dev
elop
ed
a
small
executable
system
v
ery
early
and
then
con
tin
ued
b
y
building
successiv
e
incre-
men
ts,
carefully
adding
new
functionalit
y
and
all
the
time
monitoring
system
p
erformance.
Less
successful
has
b
een
the
top-do
wn
metho
dological
w
aterfall
approac
h
where
sev
eral
teams
(p
erhaps
spread
o
v
er
sev
eral
coun
tries)
sp
ecify
and
co
de
the
whole
system
and
then
send
their
parts
for
in
tegration
test.
With
this
approac
h
there
is
m
uc
h
p
o
orer
feed-bac
k
to
the
designers
and
the
whole
idea
of
in
teractiv
e
programming
(one
of
the
strong
p
oin
ts
of
functional
programming)
is
lost.

32
CHAPTER
6.
SELECTED
INDUSTRIAL
APPLICA
TIONS
Design
e√Üciency
is
the
k
ey
issue.
All
the
telecoms
requiremen
ts
listed
in
Section
3
ab
o
v
e
can
b
e
solv
ed
with
v
arious
tec
hniques,
ev
en
assem
bler,
but
then
with
a
h
uge
eort.
In
ternal
studies
[Wi98b]
sho
w
an
increased
pro
ductivit
y
b
y
at
least
a
factor
four
compared
to
con
v
en
tional
(C,
C++,
Ja
v
a
...)
tec
hnolo-
gies.
This
enabled
the
AXD
301
pro
ject
to
apply
an
incremen
tal
w
ork
metho
d.
It
should
p
erhaps
b
e
added
that
most
programmers
lik
e
Erlang
as,
lik
e
other
in
terpretativ
e
languages
(Lisp,
Ja
v
a,
etc.),
it
adds
to
their
w
ork
satisfaction
to
see
quic
k
results
[He00b].
6.5
Exp
eriences
from
the
Field
The
Mobilit
y
Serv
er
has
b
een
deliv
ered
in
ab
out
450
systems
on
15
mark
ets
and
the
designers
ha
v
e
considerable
exp
erience
w
orking
with
the
system:

\W
e
ha
v
e
250,000
lines
of
co
de
to
da
y
,
distributed
among
500
mo
dules
in
the
Mobilit
y
Serv
er
1
and
only
t
w
o
or
three
fault
rep
orts
from
the
whole
w
orld
come
in
eac
h
mon
th.
That
giv
es
v
ery
lo
w
sustaining
costs.
Erlang
has
got
a
high
lev
el
of
abstraction,
whic
h
allo
ws
the
designers
to
concen
trate
on
what
they
do,
not
ho
w.
That
con
tributes
to
there
b
eing
few
er
a
ws
in
the
co
de."
[F
e98
]
Not
only
are
there
few
er
faults
but
they
are
easier
to
nd.
Con
v
en
tional
systems
pro
duce
hexadecimal
dumps
whic
h
are
v
ery
di√Ücult
to
in
terpret
but
Erlang
pro
duces
symb
olic
information,
lists,
tuples,
etc.
This
is
the
p
o
w
er
of
functional
programming.
Erlang
is
sometimes
describ
ed
as
an
un
t
yp
ed
pro-
gramming
language,
but
the
truth
is
that
it
is
dynamically
t
yp
ed.
All
data
items
carry
t
yp
e
information
with
them.
6.6
User
T
estimonies
The
follo
wing
statemen
ts
ha
v
e
b
een
made
b
y
users
and
ha
v
e
b
een
used
in
mar-
k
eting
b
y
Erlang
Systems
[En98
]:

\W
e
b
eliev
e
from
pro
ject
start,
and
still
b
eliev
e,
that
if
w
e
had
tried
to
use
an
y
other
tec
hnology
,
w
e
w
ould
not
ev
en
remotely
ha
v
e
b
een
able
to,
within
the
desired
time
frame
of
roughly
1.5
y
ears,
reac
h
the
desired
lev
el
of
functionalit
y
,
system
soft
w
are
maturit
y
and
stabilit
y
."
fAXD
301g

\Also,
the
short
time
for
writing
and
testing
Erlang
co
de
has
enabled
a
truly
incremen
tal
approac
h
to
soft
w
are
dev
elopmen
t."
fAXD
301g

\I
w
ould
sa
y
that
without
Erlang/OTP
w
e
could
nev
er
ha
v
e
accomplished
the
required
functionalit
y
in
the
short
time
frame
..."
fGPRSg

\It
tak
es
2
y
ears
to
mak
e
a
Plex
programmer
pro
ductiv
e,
it
to
ok
2
mon
ths
in
Erlang."
fEricsson
AS,
Norw
a
yg

6.7.
EXTERNAL
USERS
AND
CONSUL
T
ANTS
33
6.7
External
Users
and
Consultan
ts
In
Marc
h
1999
the
follo
wing
external
companies
used
Erlang
on
licence
from
Erlang
Systems:

Beijing
T
elestar
T
elecom
T
ec
hnology
Institute,
China,
Service
Creation
En
vironmen
t,

Borsalino,
F
rance,
Business
T
o
ols,

Brainp
o
ol,
Sw
eden,
SMS
services
[St99b],

Motivit
y
,
Canada,
Proto
col
con
v
erter,

one2one,
UK,
IN
services
[Hi00
],

T
elia
Promotor,
Sw
eden,
T
elia
Call
Guide
[Na99
].
Since
then
Brainp
o
ol
has
dropp
ed
their
Erlang
based
pro
duct.
On
the
other
hand
Sendmail
Inc
[Sm
w]
has
joined
as
Erlang
user
[F
r00
].
The
follo
wing
external
consultancy
companies
oer
Erlang
consultancy
ser-
vices
and
ha
v
e
b
een
certied
b
y
Erlang
Systems:

Certeam,

Cesarini
Consulting
Ltd,

Connecta
T
eknik
AB,

ENEA
Data,

Sj
oland
&
Th
yselius,

UPEC.
Erlang
Systems
and
the
OTP
pro
duct
unit
op
erate
a
commercial
Erlang
w
eb
site
[Erw
]
whic
h
con
tains
do
cumen
tation,
information
ab
out
curren
t
courses
etc.
6.8
CeBit
1998
and
Mark
eting
Eorts
In
1998
there
w
ere
ab
out
14
pro
jects
ongoing
based
on
Erlang/OTP
.
In
addition
there
w
ere
man
y
pro
jects
using
just
Erlang.
A
t
the
CeBit
in
ternational
trade
fair
in
Hanno
v
er
in
April
1998
there
w
ere
no
less
than
nine
Erlang
based
system
pro
ducts
on
displa
y
in
the
Ericsson
stand
[W
a98a
,
W
a98b
]:

Auto
generated
Gr
aphic
User
Interfac
e
(GUI)
for
Intel
ligent
Network
(IN)
services,

ANx-DSL
fast
access
system,

AXD
301
A
TM
switc
h,

Database
Access
Gatew
a
y
,

GPRS
pac
k
et
switc
h
o
v
er
GSM,

34
CHAPTER
6.
SELECTED
INDUSTRIAL
APPLICA
TIONS

Mobilit
y
Serv
er,

Net
w
ork
In
telligen
t
Call
Cen
tre,

T
elia
In
ternet
Conference
Set-Up,

Professional
Mobile
Radio
o
v
er
GSM.
In
April
1997
the
ban
on
external
mark
eting
w
as
lifted
and
Erlang
Systems
emplo
y
ed
Jane
W
alerud
as
Sales
Manager
in
Octob
er.
The
mark
eting
goals
w
ere
set
high.
Erlang/OTP
w
as
to
ha
v
e
10,000
users
and
b
e
used
in
pro
duct
dev
elopmen
t
in
5
companies
other
than
Ericsson
b
y
the
end
of
the
y
ear
2001.
The
agreed
mark
eting
strategy
w
as
to
nd
ma
jor
partners
to
tak
e
o
v
er
the
tec
hnology
and
to
concen
trate
on
one
nic
he
mark
et
at
a
time
time
while
stepping
up
the
publicit
y
eorts.
During
1998,
most
p
ossible
ma
jor
partners,
including
SUN
and
MicroSoft,
declined
the
Erlang/OTP
tec
hnology
.
Erlang
Systems
then
concen
trated
on
t
w
o
nic
hes:

Em
b
edded
systems
in
a
partnership
with
Wind
Riv
er
Systems
[W
rw]
with
an
implemen
tation
of
Erlang/OTP
on
the
VxW
orks
op
erating
system
[W
re].

High
a
v
ailabilit
y
telephon
y
in
a
partnership
with
Natural
Micro
Sys-
tems
[Nm
w]
who
ha
v
e
a
leadership
in
the
compact
PCI
tec
hnology
.
These
partnerships
w
ould
not
get
all
the
w
a
y
to
the
goal
of
10,000
users
in
three
y
ears,
so
starting
in
June
1998,
Jane
W
alerud
instead
concen
trated
on
the
op
en
sour
c
e
initiativ
e
(see
b
elo
w).
6.9
Rened
Matc
h
against
Requiremen
ts
T
able
6.1
mak
es
a
further
matc
h
of
Erlang
against
the
requiremen
ts
dened
in
Section
3
and
T
able
3.1
ab
o
v
e.

6.9.
REFINED
MA
TCH
A
GAINST
REQUIREMENTS
35
1
Hand
ling
of
a
very
lar
ge
numb
er
of
c
oncurr
ent
ac-
tivities
There
are
ab
out
200-4000
concurren
t
pro
cesses
activ
e
in
AXD
301.
GPRS
release
1
has
ab
out
500
concurren
t
pro
cesses.
The
next
release
is
exp
ected
to
ha
v
e
ab
out
1000-2000
concurren
t
pro-
cesses.
Mobilit
y
Serv
er
has
ab
out
200
static
pro
cesses
and
generates
six
dynamic
pro
cesses
for
eac
h
call.
2
A
ctions
to
b
e
p
erforme
d
at
a
c
ertain
p
oint
in
time
or
within
a
c
ertain
time
In
AXD
301
p
erformance
measuremen
ts,
equipmen
t
sup
ervision
and
output
of
c
harging
(billing)
information
is
carried
out
at
regular
in
terv
als.
(The
same
applies
to
GPRS.)
Implemen
tations
of
comm
unication
proto
cols
con
tain
man
y
timers
supp
orted
in
Erlang
b
y
the
time-out
mec
hanism
in
the
r
e
c
eive
statemen
t
and
built-in
timers.
3
Systems
distribute
d
over
sever
al
c
omputers
The
40
Gbit/s
v
ersion
of
AXD
301
consists
of
8
con
trol
pro
ces-
sors
and
64
device
pro
cessors.
4
Inter
action
with
har
d-
war
e
In
teraction
with
switc
hing
hardw
are
is
often
done
through
de-
vice
pro
cessors
whic
h
can
handle
the
\hard"
real
time
require-
men
ts
at
lo
w
lev
el.
There
are
standard
metho
ds
for
in
teraction
with
C
and
for
com-
m
unication
with
hardw
are
driv
ers.
5
V
ery
lar
ge
softwar
e
sys-
tems
AXD
301
release
3
consists
of
ab
out
525
KLOC
Erlang,
608
KLOC
C
and
8
KLOC
Ja
v
a
(plus
the
OTP).
6
Complex
functionality
such
as
fe
atur
e
inter
ac-
tion
AXD
301
supp
orts
all
ITU
and
A
TM
F
orum
proto
cols
and
in-
terw
orking
b
et
w
een
them.
GPRS
consists
of
man
y
co
op
erating
proto
cols.
7
Continuous
op
er
ation
for
many
ye
ars
The
Mobilit
y
Serv
er
w
as
released
as
a
pro
duct
in
1994
and
there
are
no
w
more
than
400
units
in
op
eration
around
the
w
orld.
V
ery
few
errors
in
the
eld
are
rep
orted
and
most
problems
no
w
relate
to
hardw
are
(lik
e
fan
motors
giving
up).
8
Softwar
e
maintenanc
e
(r
e
c
ongur
ation,
etc.)
without
stopping
the
system
AXD
301
supp
orts
soft
upgrades.
The
system
itself
gures
out
ho
w
it
should
b
e
upgraded,
pro
cesses
susp
ended,
co
de
loaded
in
to
the
system,
etc.
9
Stringent
quality
and
r
e-
liability
r
e
quir
ements
AXD
301
requiremen
ts
sp
ecify
service
stops
of
no
more
than
6
min
utes/y
ear.
A
t
the
presen
t
time
the
system
has
ab
out
60
execution
y
ears
in
the
lab
oratory
.
(20
test
c
hannels
in
op
er-
ation
for
3
y
ears.)
GPRS
is
exp
ected
to
ha
v
e
a
system
a
v
ailabilit
y
of
99.995
%.
This
corresp
onds
to
a
system
do
wn
time
of
ab
out
26
min-
utes/y
ear.
10
F
ault
toler
anc
e
b
oth
to
har
dwar
e
failur
es
and
softwar
e
err
ors
In
AXD
301
either
cen
tral
pro
cessor
can
tak
e
o
v
er
the
other.
The
system
is
built
using
sup
ervision
hierarc
hies
as
supp
orted
b
y
OTP/SASL.
The
design
rules
sp
ecify
that
functions
either
handle
correct
inputs
or
crash.
In
the
latter
case
the
sup
ervisor
at
a
higher
lev
el
will
iden
tify
and
handle
the
error.
GPRS
is
built
around
n
pro
cessors
and
if
one
go
es
do
wn
during
op
eration
it
will
only
cause
a
sligh
t
degrading
of
capacit
y
.
T
able
6.1:
F
urther
matc
h
of
Erlang
against
the
requiremen
ts
on
a
programming
tec
hnology
for
telecomm
unication
switc
hing
systems.
KLOC
=
1,000
lines
of
non-commen
ted
co
de.
OTP
itself
con
tains
ab
out
240
KLOC
Erlang.

36
CHAPTER
6.
SELECTED
INDUSTRIAL
APPLICA
TIONS

7
Bac
klash
Once
up
on
a
time
C++
[St91
]
w
as
the
con
tender
vs.
Erlang.
Ho
w
ev
er,
after
some
large
pro
ject
failures
C++
fell
in
to
disrepute
and
instead
Ja
v
a
[Go96
]
app
eared.
Ja
v
a
is
lik
e
a
tidied
up
v
ersion
of
C++
without
p
oin
ters
and
with
builtin
garbage
collection.
Ja
v
a
also
supp
orts
concurrency
in
the
form
of
threads
(whic
h,
ho
w
ev
er,
are
implemen
tation
dep
enden
t).
The
question
is
whether
Ja
v
a
is
a
suitable
programming
language
for
large
robust
systems
where
Erlang
is
curren
tly
used.
Man
y
systems
(suc
h
as
the
AXD
301
noted
ab
o
v
e)
use
Erlang
for
serv
ers
and
the
telecomm
unications
application
and
Ja
v
a
for
the
graphics
orien
ted
managemen
t
system,
i.e.,
clien
ts.
(Presen
t
Ja
v
a
implemen
tations
ha
v
e
m
uc
h
longer
con
text
switc
hing
times
than
Erlang,
but
this
migh
t
b
e
c
hanged
in
the
future
suc
h
that
Ja
v
a
could
also
b
e
used
for
large
em
b
edded
applications
lik
e
Erlang.)
In
F
ebruary
1998,
Erlang
w
as
banned
within
Ericsson
R
adio
AB
(ERA)
for
new
pro
duct
pro
jects
aimed
for
external
customers
b
ecause:

\The
selection
of
an
implemen
tation
language
implies
a
more
long-term
commitmen
t
than
selection
of
pro
cessors
and
OS,
due
to
the
longer
life
cycle
of
implemen
ted
pro
ducts.
Use
of
a
proprietary
language,
implies
a
con
tin
ued
eort
to
main
tain
and
further
dev
elop
the
supp
ort
and
the
dev
elopmen
t
en
vironmen
t.
It
further
implies
that
w
e
cannot
easily
b
en-
et
from,
and
nd
synergy
with,
the
ev
olution
follo
wing
the
large
scale
deplo
ymen
t
of
globally
used
languages."
[Ri98
]
Ongoing
Erlang
user
pro
jects
w
ere
also
required
to
mak
e
a
plan
for
ho
w
to
remo
v
e
the
Erlang
dep
endenc
e.
This
p
olicy
w
as
issued
without
prior
notice
to
the
OTP
Pro
duct
Unit
or
to
CSLab
whic
h
w
ere
then
part
of
Ericsson
T
ele
c
om
AB
(ETX).
This
w
as
part
of
a
sc
heme
to
outsource
soft
w
are
tec
hnology
at
Ericsson
to
Ra-
tional
Inc.
[Ra
w
],
a
pro
vider
of
Computer
A
ide
d
Softwar
e
Engine
ering
(CASE)
to
ols.
The
Joint
Development
Initiative
(JDI)
agreemen
t
b
et
w
een
Ericsson
and
Rational
w
as
concluded
in
1997.
Rational
acquired
the
Sw
edish
soft
w
are
com-
pan
y
SoftLab
AB
[So
w
]
whic
h
had
a
long
history
of
w
orking
with
Ericsson
and,
indeed,
w
as
resp
onsible
for
main
tenance
and
further
dev
elopmen
t
of
the
Plex
compilers,
a
core
tec
hnology
for
Ericsson.
Rational,
ho
w
ev
er,
w
an
ted
to
turn
SoftLab
in
to
a
sales
and
consulting
compan
y
whic
h
caused
some
turmoil
[P
e98
]
and
in
late
1998
part
of
SoftLab
w
as
tak
en
o
v
er
b
y
Ericsson
[Cs99
].
Although
the
Erlang
p
olicy
only
applies
to
ERA,
no
ma
jor
Erlang
based
pro
jects
w
ere
started
at
Ericsson
during
1998
or
1999.
Ho
w
ev
er,
with
the
ongo-
ing
pro
jects
using
Erlang,
the
v
olume
of
training
and
consulting
remains
at
the
same
lev
el
as
b
efore.
37

38
CHAPTER
7.
BA
CKLASH

8
Op
en
Source
and
Con
tin
ued
Researc
h
Soft
w
are
has
b
een
a
v
ailable
as
fr
e
ewar
e
for
man
y
y
ears,
but
this
had
not
gained
resp
ectabilit
y
in
industry
.
In
1997
a
new
term
app
eared,
op
en
sour
c
e,
to
describ
e
the
remark
able
success
of
the
Lin
ux
[Re97
]
dev
elopmen
t
and
also
to
pro
vide
a
legal
framew
ork
for
handling
main
tenance
and
user's
impro
v
emen
ts
to
the
system.
Op
en
source
[Op
d,
Jo00b
]
also
implies
a
w
a
y
of
spreading
soft
w
are
where
users
need
not
feel
lo
c
k
ed
in
b
y
single
v
endors
that
migh
t
disapp
ear.
The
op
en
sour
c
e
phenomenon
w
as
describ
ed
b
y
Eric
S.
Ra
ymond
in
a
pap
er
[Ra99
]
that
inuenced
Netscap
e's
decision
to
release
the
Comm
unicator
5.0
source
co
de.
During
the
Autumn
of
1998
a
discussion
w
as
raised
ab
out
releasing
Erlang
as
op
en
source
in
order
to
facilitate
its
spread
externally
and
hop
efully
attract
ev
en
Ericsson
comp
etitors
to
use
it.
A
small
group
visited
Red
Hat
Inc.
[Rew],
the
compan
y
that
distributes
Lin
ux,
and
preparations
started
at
CSLab
to
create
an
op
en
source
w
eb
site.
On
Decem
b
er
2
the
OTP
steering
group
ga
v
e
its
p
ermission
and
one
w
eek
later
op
en
sour
c
e
Erlang
[Op
w]
w
as
released.
The
earlier
mark
eting
eorts
had
concen
trated
on
making
a
business
from
mark
eting
Erlang
as
a
programming
language
with
an
implemen
tation.
The
fo
cus
no
w
c
hanged
to
spr
e
ading
the
language
and
to
eradicate
the
\proprietary"
image.
In
addition,
the
op
en
source
distribution
is
a
considerably
more
ma-
ture
pro
duct
in
that
it
con
tains
the
full
OTP
implemen
tation
(SASL,
Mnesia,
libraries,
etc.)
as
w
ell.
During
Decem
b
er
1998
there
w
ere
72,933
requests
to
the
op
en
source
Erlang
site
although
no
press
release
had
b
een
issued.
This
dropp
ed
the
follo
wing
mon
th
and
then
k
ept
a
lev
el
of
ab
out
35,000
requests
for
sev
eral
mon
ths.
Ho
w
ev
er,
from
Octob
er
1999
this
gure
has
b
een
rising
steadily
and
there
w
ere
126,341
requests
in
Septem
b
er
2000,
see
Figure
8.1.
F
our
mirror
sites
[Miw
]
w
ere
established,
KTH,
Univ
ersit
y
of
Uppsala,
Univ
ersit
y
of
Vienna
and
Softwar
e
Engine
ering
R
ese
ar
ch
Centr
e
(SER
C)
in
Melb
ourne.
A
second
release
of
op
en
source
Erlang
w
as
made
in
early
Decem
b
er
1999
and
a
couple
of
articles
on
Erlang
w
ere
published
in
Computer
Sw
eden
in
F
ebru-
ary
2000
[He00a
,
He00b].
Op
en
source
Erlang
is
no
w
main
tained
b
y
the
OTP
pro
duct
unit.
8.1
Bluetail
AB
Eddie
w
as
an
\inno
v
ation
cell"
using
Erlang
to
\pro
vide
the
to
ols
whic
h
allo
w
the
construction
of
mission
critical
in
ternet
sites"
[Edw].
In
the
middle
of
Decem
b
er
39

40
CHAPTER
8.
OPEN
SOUR
CE
AND
CONTINUED
RESEAR
CH
0
20000
40000
60000
80000
100000
120000
140000
160000
98-10
99-01
99-04
99-07
99-10
00-01
00-04
00-07
00-10
Figure
8.1:
T
otal
n
um
b
er
of
user
requests
p
er
mon
th
to
www.erlang.org.
1998
the
Eddie
team
handed
in
their
notices
to
lea
v
e
Ericsson
to
set
up
their
o
wn
compan
y
,
Bluetail
AB
[Blw
],
based
on
external
v
en
ture
capital.
(A
new
design
team
w
as
found
in
Melb
ourne
on
m
y
suggestion
and
ha
v
e
also
set
up
a
commercial
compan
y
,
L
o
dbr
oker
Pty
[Lo
w
].)
Bluetail
\dev
elops
and
sells
soft
w
are
pro
ducts
to
In
ternet
organisations
and
thereb
y
supplies
reliabilit
y
,
scalabilit
y
and
managabilit
y
to
In
ternet
services".
So
on
after
sev
eral
more
p
eople
at
CSLab,
SAR
C
(se
b
elo
w),
the
OTP
pro
duct
unit
and
Erlang
Systems
(in
all
ab
out
15
p
eople)
left
to
join
Bluetail.
Among
them
w
ere
Jo
e
Armstrong,
Claes
Wikstr
om,
and
Rob
ert
Virding.
Jane
W
alerud
b
ecame
Managing
Director.
I
w
as
in
vited
to
the
b
oard
of
Bluetail
and
partici-
pated
with
Ericsson's
p
ermission.
Bluetail
receiv
ed
a
lot
of
atten
tion
in
the
press
[Ka00a
,
Sm00a
].
Their
rst
pro
duct
w
as
the
Mail
R
obustier
and
early
in
y
ear
2000
they
brough
t
out
the
Web
Prioritizer
[Me00
,
T

a00
].
Among
Bluetail's
customers
w
ere
T
eleNordia
and
SPRA
Y.
A
t
the
b
eginning
of
y
ear
2000,
Bluetail
signed
a
partnering
agreemen
t
with
Sendmail
Inc
[Sm
w].
In
late
August
2000
Alteon
[Alw
],
a
ma
jor
US
supplier
of
w
eb
switc
hes,
announced
that
they
w
ere
in
the
pro
cess
of
acquiring
Bluetail
at
a
price
of
1,4
billion
SEK
[Ka00b
,
Ol00
,
Pr00d
,
Sm00b
].
Earlier
in
2000
ADC
T
elecom-
m
unications
b
ough
t
Altitun
for
7,9
billion
SEK
and
Cisco
b
ough
t
Qeyton
for
7,3
billion
SEK.
Altitun
and
Qy
eton
w
ere,
lik
e
Bluetail,
Sw
edish
startup
com-
panies
founded
largely
b
y
former
Ericsson
tec
hnicians
[Au00
].
By
coincidence,
Alteon
is
b
eing
b
ough
t
b
y
Nortel
[Pr00c
].

8.2.
ERLANG
IN
THE
RESEAR
CH
W
ORLD
41
0
100
200
300
400
500
600
700
800
98-11
99-01
99-03
99-05
99-07
99-09
99-11
00-01
Figure
8.2:
T
otal
n
um
b
er
of
source
co
de
do
wnloads
p
er
mon
th
from
www.erlang.org.
1st
release
Decem
b
er
1998.
Bug
x
release
F
ebruary
1999.
2nd
release
No
v
em
b
er
1999.
8.2
Erlang
in
the
Researc
h
W
orld
Ov
er
the
y
ears
a
n
um
b
er
of
pap
ers
[Ar92b
,
D
a93b
,
Ha93
,
Vi93,
Wi94,
Ar95
,
Vi95,
Wi96,
Ar97a
,
Ar97b
,
Ar97c
,
Ar98
,
Da98
,
Ar99b
,
Ar99c
,
Ma99
]
ha
v
e
b
een
presen
ted
on
the
dev
elopmen
t
and
use
of
Erlang
in
prestigious
conferences
and
this
has
receiv
ed
m
uc
h
atten
tion
in
the
researc
h
w
orld.
As
a
consequence
Jo
e
Armstrong
w
as
in
vited
as
k
eynote
sp
eak
er
to
the
A
CM
SIGPLAN
International
Confer
enc
e
on
F
unctional
Pr
o
gr
amming
on
June
9-13,
1997,
whic
h
to
ok
place
in
Amsterdam
[Ar97b
].
CSLab
has
w
ork
ed
with
man
y
distinguished
researc
hers
on
Erlang
and
Er-
lang
related
topics,
notably
professors
Marc
F
eeley
(Mon
tr

eal),
Bengt
Jonsson
(Uppsala),
Ric
hard
O'Keefe
(Otago),
and
Philip
W
adler
(Glasgo
w,
no
w
at
Lu-
cen
t).
It
has
b
een
a
dra
wbac
k,
though,
that
the
Swe
dish
Institute
of
Computer
Sci-
enc
e
(SICS)
[Siw]
has
b
een
so
preo
ccupied
with
dev
eloping
Oz
[Moz
].
Ho
w
ev
er,
distribution
and
error
handling
in
Oz
ha
v
e
b
een
inuenced
b
y
Erlang
[Ha99
].
Erlang
has
also
help
ed
to
inspire
w
ork
on
distributed
Hask
ell
[Hu00
,
P
o00
].
A
t
the
Twelfth
International
Workshop
on
Implementation
of
F
unctional
L
anguages
[Mo00
]
in
Aac
hen
on
Septem
b
er
4-7,
2000,
there
w
as
a
half-da
y
session
on
Erlang
thanks
to
Thomas
Arts'
initiativ
e.

42
CHAPTER
8.
OPEN
SOUR
CE
AND
CONTINUED
RESEAR
CH
8.3
Researc
h
Con
tin
ues
The
wide
exploitation
of
Erlang
tec
hnology
in
the
form
of
OTP
did
not
mean
the
end
of
Erlang
related
researc
h.
Instead
Erlang
op
ened
man
y
constructiv
e
paths
for
con
tin
ued
researc
h
with
a
view
to
further
industrial
uses:

Bogumil
Hausman
w
ork
ed
from
1992
on
compiling
Erlang
to
C
with
the
aim
of
gaining
execution
sp
eed.
The
compiled
co
de
ob
viously
is
consider-
ably
larger
than
the
JAM
b
yte
co
de.
Bo
gdan
's
Erlang
A
bstr
act
Machine
(BEAM)
[Ha93
,
Ha94
]
uses
the
same
run
time
library
as
JAM.
In
1999
BEAM
replaced
JAM
whic
h
is
no
longer
supp
orted
[Ka99
].

Rob
ert
Virding
dev
elop
ed
an
alternativ
e
implemen
tation
called
Vir
ding's
Erlang
Engine
(VEE)
using
dieren
t
tec
hniques,
notably
generational
garbage
collection.
In
1999
a
new
compiler
w
as
released
whic
h
w
as
based
on
VEE
[Ka99
].

A
Sc
heme
[Dy96]
implemen
tation
of
Erlang.
This
is
an
ongoing
pro
ject
[F
e99]
(partly
funded
b
y
CSLab)
at
the
Univ
ersit
y
of
Mon
tr

eal
lead
b
y
Marc
F
eeley
,
creator
of
Gam
bit
Sc
heme
[Ga
w
].
The
purp
ose
is
to
create
an
alternativ
e
Erlang
implemen
tation
in
the
public
domain.

High
Performanc
e
Erlang
(HiPE)
[Hiw,
Jo99
,
Li99
,
Jo00a
]
is
a
pro
ject
at
Computing
Scienc
e
Dep
artment
(CSD)
[Csd],
Uppsala
Univ
ersit
y
,
to
compile
Erlang
in
to
Sun
Microsystems
Sparc
nativ
e
co
de
using
v
ery
ag-
gressiv
e
optimization
tec
hniques.
HiPE
starts
from
the
JAM
b
yte
co
de
and
concen
trates
on
co
de
generation.
Ho
w
ev
er,
it
is
b
eing
redesigned
to
w
ork
from
BEAM
instead.

Geo
W
ong
at
Softwar
e
Engine
ering
R
ese
ar
ch
Centr
e
(SER
C)
[Sew],
Mel-
b
ourne,
is
p
erforming
researc
h
in
to
c
ontinuous
system
monitoring
[W
o98
]
whereb
y
a
separate
computer
monitors
non-functional
asp
ects
lik
e
relia-
bilit
y
,
capacit
y
,
etc.
during
the
actual
op
eration.

List
c
ompr
ehensions,
r
e
c
or
ds
and
higher
or
der
functions
[Er44
]
ha
v
e
b
een
added
to
Erlang.
Most
of
this
w
ork
has
b
een
done
b
y
Rob
ert
Virding.

A
formal
language
sp
e
cic
ation
for
Erlang
is
nearing
completion.
This
w
ork
w
as
started
b
y
Jonas
Barklund
of
CSD
[Csd
]
and
is
b
eing
nished
b
y
Rob
ert
Virding.
It
is
a
v
ailable
together
with
the
op
en
source
release.
The
grammar
used
\is
almost,
but
not
quite,
an
LALR(1)
grammar"
[Ers
].

Cor
e
Erlang
[Cew]
is
an
in
termediate
represen
tation
of
Erlang,
in
tended
to
lie
at
a
lev
el
b
et
w
een
source
co
de
and
the
in
termediate
co
de
t
ypically
found
in
compilers
dev
elop
ed
primarily
b
y
CSD
[Csd].

Ric
hard
O'Keefe
from
the
Univ
ersit
y
of
Otago,
New
Zealand,
has
studied
Erlang
with
to
ols
and
libraries
v
ery
carefully
and
has
prop
osed
certain
c
hanges
[Ok98
]
to
the
language
and
its
libraries
to
widen
the
applicabilit
y
of
Erlang
for
v
ery
large
applications.

F
urther
w
ork
on
r
e
al
time
garb
age
c
ol
le
ction
[Vi95,
Bo97
].

8.3.
RESEAR
CH
CONTINUES
43
1984-6
Language
exp
erimen
ts
1987
Early
Erlang
1988-9
A
CS/Dunder
application
protot
yp
e
JAM
em
ulator
1990
Erlang
presen
ted
at
ISS'90
Use
for
protot
yping
1991
First
fast
implemen
tation
ASN.1
compiler
to
Erlang
1992
User
pro
duct
pro
jects
(Mobilit
y
Serv
er)
started
1993
Distributed
Erlang
1994
User
pro
ducts
launc
hed
SDL
translator
Sev
eral
user
pro
jects
started
1995
SNMP
Master's
Thesis
Amnesia
DBMS
protot
yp
e
1996
OTP
dev
elopmen
t
started
T
yp
e
system
and
program
v
erication
1997
General
a
v
ailabilit
y
1998
Op
en
source
distribution
T
yp
e
system
and
program
v
erication
1999
BEAM
replaces
JAM
T
able
8.1:
Erlang
Dev
elopmen
t.

Simon
Marlo
w
and
Phil
W
adler
of
the
Univ
ersit
y
of
Glasgo
w
ha
v
e
dev
el-
op
ed
a
typ
e
system
for
Erlang
[Ma97
].
This
w
as
tak
en
o
v
er
b
y
Thomas
Arts
at
CSLab
who
has
rew
ork
ed
the
system
[T
yw
]
and
is
b
eginning
to
nd
users
for
it.
The
vision
is
to
b
e
able
to
co
v
er
the
en
tire
sp
ectrum
from
un
t
yp
ed
fast
protot
yping
to
w
ell
con
trolled
t
yp
ed
systems
for
pro
duction.

A
pr
o
gr
am
veric
ation
system
[V
ew]
for
Erlang
is
b
eing
dev
elop
ed
in
co-
op
eration
with
Swe
dish
Institute
of
Computer
Scienc
e
(SICS)
[Siw]
and
Thomas
Arts
of
CSLab.
This
system
is
b
eginning
to
b
e
used
for
nding
bugs
in
proto
col
implemen
tations
[Ar98
,
Da98
,
Ar99a
,
Ar99b
,
Ar99c
].

Sv
en-Erik
Nystr
om
from
CSD
[Csd]
has
w
ork
ed
on
static
analysis
of
Erlang
programs.

Dan
Sahlin
at
CSLab
and
La
wrie
Bro
wn
from
Univ
ersit
y
College
of
New
South
W
ales
ha
v
e
w
ork
ed
on
Safe
Erlang
[Br99
],
an
extension
of
Erlang
with
capabilities
to
b
e
able
to
handle
imp
orted
soft
w
are
in
a
secure
man-
ner.

A
couple
of
protot
yp
e
pro
jects
ha
v
e
implemen
ted
intel
ligent
agents
using
Distributed
Erlang
notably
a
large
studen
t
pro
ject
at
Uppsala
[Jo97
].

Dep
artment
of
Computer
Systems
(DoCS)
[Do
w
]
at
Uppsala
Univ
ersit
y
has
in
v
estigated
implemen
tation
of
Erlang
for
v
ery
small
op
erating
systems
and
ha
v
e
made
a
preliminary
implemen
tation
of
Erlang
on
ExoKernel
[Exw
]
whic
h
had
b
een
dev
elop
ed
at
M.I.T.

44
CHAPTER
8.
OPEN
SOUR
CE
AND
CONTINUED
RESEAR
CH

Claes
Wikstr
om
and
T
on
y
Rogv
all
prop
osed
a
further
extension
of
Erlang
with
a
bit
syntax
[Ro99
]
whic
h
signican
tly
impro
v
es
Erlang's
capabilities
for
programming
comm
unication
proto
col
stac
ks.
This
w
as
implemen
ted
b
y
P
atrik
Nyblom
and
a
v
ailable
from
the
Erlang/OTP
release
in
Septem-
b
er
2000
[Ny00
].
CSLab
has
close
co-op
eration
with
sev
eral
univ
ersities
and
from
1997
I
w
as
app
oin
ted
c
hairman
of
the
b
oard
of
A
dvanc
e
d
Softwar
e
T
e
chnolo
gy
(ASTEC)
[Asw],
a
comp
etence
cen
tre
supp
orted
b
y
NUTEK
[Nu
w]
and
primarily
based
at
Uppsala
univ
ersit
y
.
The
HiPE
and
Erlang
v
erication
pro
jects
are
b
oth
run
under
ASTEC.
In
Marc
h
1998,
the
Softwar
e
A
r
chite
ctur
e
L
ab
or
atory
(SAR
C)
with
H

ak
an
Millroth
as
manager
w
as
spa
wned
o
from
CSLab.
H

ak
an
came
from
CSD
[Csd]
and
w
as
app
oin
ted
adjunct
professor
at
Uppsala.
SAR
C
w
orks
closely
with
CSLab
and
there
is
some
o
v
erlap,
but
SAR
C
will
fo
cus
on
higher
lev
els
of
system
arc
hitecture
for
example
dening
recommended
standard
solutions
(de-
sign
p
atterns)
to
t
ypical
subsystems
recurring
in
telecomm
unications
systems.
When
H

ak
an
left
for
Bluetail
he
w
as
replaced
b
y
T
orb
j
orn
Keisu.

9
Discussion
9.1
Dev
elopmen
t
of
Programming
T
ec
hnology
Once
up
on
a
time
I
imagined
the
dev
elopmen
t
of
programming
language
tec
h-
nology
as
a
path
to
w
ards
successiv
ely
higher
lev
els
of
abstraction,
see
Figure
9.1.

Mac
hine
co
de,

Assem
bler
programming,

Higher
Order
Languages
(F
ortran,
P
ascal,
etc.),

Declarativ
e
(i.e.
functional
and
logic)
programming,

V
ery
high
lev
el,
p
erhaps
A.I.
based
...

...
and
so
on
...
Seen
from
a
p
ersp
ectiv
e
of
the
1970's
(when
the
design
of
compilers
and
op
erating
systems
had
just
started
to
b
e
done
in
higher
order
languages)
w
e
should
no
w
b
e
w
ell
headed
to
w
ards
V
ery
High
Lev
el
Languages
for
y
et
the
next
generation.
This
has
not
happ
ened
and
p
erhaps
there
will
not
b
e
an
y
dev
elopmen
t
of
this
kind.
P
erhaps
this
view
(inspired
from
dev
elopmen
ts
in
hardw
are
from
discrete
comp
onen
ts
to
VLSI)
is
a
misunderstanding.
In
fact,
declarativ
e
languages
are
just
ab
out
the
same
age
as
higher
order
languages
since
Lisp
app
eared
only
shortly
after
F
ortran.
This
means
that
the
dieren
t
t
yp
es
of
languages
exist
in
parallel.
Figure
9.2
is
p
erhaps
more
appropriate.
Returning
to
the
conclusion
in
the
pap
er
[D
a86
]
describing
the
exp
erimen
ts
using
dieren
t
programming
languages
and
tec
hniques
(see
ab
o
v
e)
that
a
com-
plete
system
lik
ely
w
ould
b
e
built
using
a
com
bination
of
tec
hniques
suitable
Machine level
Assembler level
High-level
Declarative
Figure
9.1:
Successiv
e
programming
language
generations.
45

46
CHAPTER
9.
DISCUSSION
Declarative
Object-oriented
Imperative
Concurrent
1960
1970
1980
1990
Lisp
Prolog  ML
Erlang  Mercury
Simula
Smalltalk
C++
Java
Fortran
Cobol
PL/I
Pascal
C
Simula
Modula
Chill
Ada
Erlang
Java
Figure
9.2:
Concurren
t
programming
language
generations.
for
dieren
t
purp
oses,
the
question
could
b
e
rephrased
as
wh
y
there
is
not
a
greater
use
of
functional
and
logic
programming?
After
all,
they
should
b
e
part
of
an
y
programmer's
\to
ol
b
o
x".
9.2
On
Applications
of
F
unctional
Programming
Phil
W
adler
[W
a98d
]
presen
ts
the
follo
wing
list
of
p
ossible
reasons
for
the
resis-
tance
to
functional
programming
languages:

Compatibilit
y
,

Libraries,

P
ortabilit
y
,

Av
ailabilit
y
,

P
ac
k
agabilit
y
,

T
o
ols,

T
raining,

P
opularit
y
.
Most
of
these
are
self-defeating:
b
ecause
of
the
lac
k
of
X,
no
X
will
b
e
created.
All
p
oin
ts
except
the
last
one
are
of
a
tec
hnical
nature
and
can
easily
b
e
remedied.
The
k
ey
p
oin
t
is
the
last
whic
h
is
a
bit
lik
e
a
Catch
22.
Lisp
has
b
een
around
a
long
time
and
pro
v
ed
itself
man
y
times
without
making
the
real
break-through.
There
are
also
other
functional
programming
languages
of
industrial
qualit
y
,
notably
Clean
[Clw],
Mercury
[Mew],
and
Oz
[Moz].
It
migh
t
w
ell
b
e
that
it
is
di√Ücult
to
in
tro
duce
functional
programming
in
to
an
old
and
established
compan
y
culture.
This,
on
the
other
hand,
lea
v
es
the
eld
wide
op
en
for
exploitation
b
y
new
companies
free
from
tradition.
The
1st
International
Workshop
on
Pr
actic
al
Asp
e
cts
of
De
clar
ative
L
an-
guages
to
ok
place
on
Jan
uary
18-19,
1999,
at
San
An
tonio,
T
exas.
Ho
w
ev
er,
the
only
pap
er
deliv
ered
b
y
an
industry
represen
tativ
e
w
as
a
pap
er
on
Mnesia
[Ma99
].

9.3.
DIFFUSSION
OF
INNO
V
A
TIONS
47
Cum
ulativ
e
%
of
Stages
Actors
Actors
Adopting
Pioneer
Inno
v
ators
0-5
%
Early
expansion
Early
adopters
5-15
%
T
ak
eo
P
opularizers
15-30
%
Bandw
agon
F
ollo
w
ers
30-80
%
Late
Conserv
ativ
es
85-95
%
T
erminal
Resistors
95-100
%
T
able
9.1:
Acceptance
of
New
T
ec
hnology
.
9.3
Diussion
of
Inno
v
ations
Ev
erett
Rogers
in
his
b
o
ok
Diussion
of
Innovations
[Ro82
]
describ
es
a
series
of
\stages
of
adoption"
for
new
tec
hnologies,
see
T
able
9.1.
An
imp
ortan
t
p
oin
t
in
this
mo
del
is
that
there
is
no
smo
oth
transition
from
one
stage
to
the
next.
This
applies
esp
ecially
when
mo
ving
from
the
take
o
to
the
b
andwagon
since
the
rst
group
are
in
terested
in
the
new
tec
hnology
and
its
p
ossible
uses
whereas
the
second
group
is
primarily
in
terested
in
functionalit
y
whic
h
migh
t,
for
example,
b
e
a
v
ailable
to
comp
etitors.
With
reference
to
Erlang's
protot
yp
e
pro
jects,
the
early
pro
ducts
and
the
pro
jects
follo
wing
OTP
dev
elopmen
t
could
b
e
seen
as
the
e
arly
exp
ansion.
Er-
lang/OTP
w
as
on
the
v
erge
of
take
o
in
the
form
of
pro
jects
that
had
seen
these
successes
but
w
ere
halted
b
y
the
ERA
p
olicy
.
9.4
The
Magic
of
W
ords
This
brings
the
question
around
to
marketing
where
CSLab
ma
y
ha
v
e
failed
miserably
.
T
ec
hnical
merits
ma
y
impress
the
tec
hnicians
but
something
else
is
required
to
gain
the
acceptance
of
decision
mak
ers.
It
w
as
men
tioned
ab
o
v
e
ho
w
\freew
are"
w
as
treated
with
suspicion
but
when
\op
en
source"
app
eared
(with
an
appropriate
legal
framew
ork)
it
gained
m
uc
h
higher
resp
ectabilit
y
.
Recen
tly
w
e
ha
v
e
seen
another
suc
h
case,
\daily
build".
F
or
man
y
y
ears
the
standard
metho
d
for
program
system
dev
elopmen
t
has
b
een
the
\w
ater
fall
mo
del"
[Y
o92
]
starting
with
sp
ecications,
ending
with
system
in
tegration.
Against
this
has
often
b
een
prop
osed
\rapid
protot
yping"
as
a
means
to
get
an
early
c
hec
k
on
implemen
tabilit
y
and
p
erformance.
This
essen
tially
conserv
ativ
e
and
realistic
approac
h
is
no
w
gaining
resp
ectabilit
y
as
\daily
build":

\F
o
cus
on
customer
requiremen
ts
and
co
de
-
Co
de
is
King,

Shorter
distance
b
et
w
een
customer
and
programmer,
who
gets
b
etter
un-
derstanding
of
the
nal
pro
duct,

The
customer
is
able
to
see
real
progress
in
the
form
of
executable
co
de,

Av
oid
a
large
in
tegration
problem
at
the
end
of
the
pro
ject."
[Ol99
]
Th
us
this
apparen
tly
undisciplined
b
ottom-up
w
a
y
of
w
orking
gets
accepted
for
its
merits
under
a
new
term.
The
go
o
d
p
oin
t
is
that
p
eople
who
dislik
ed
fast

48
CHAPTER
9.
DISCUSSION
protot
yping
can
no
w
em
brace
its
adv
an
tages
without
ha
ving
to
concede
that
they
could
ha
v
e
b
een
wrong
earlier.
Also
tec
hnicians
w
orking
with
applied
researc
h
need
to
understand
this
magic
of
w
ords.
The
term
\functional
programming"
is
old
and
w
orn
and
its
mark
eting
migh
t
need
some
new
term.
9.5
Sym
b
olic
Programming
strik
es
Bac
k
One
of
the
nice
asp
ects
of
Lisp
(men
tioned
ab
o
v
e)
is
the
use
of
S-expressions
as
an
e√Ücien
t
w
a
y
to
sa
v
e
and
read
complex
data
structures,
whic
h
also
ha
v
e
the
adv
an
tage
that
they
can
b
e
easily
insp
ected.
This
compares
with
hard
co
ded
binary
structures
and
hexadecimal
dumps.
The
trend
no
w
is
to
w
ards
textual
forms
on
a
large
scale,
IETF
proto
cols,
p
ostscript,
HTML,
and
XML
[Xm
w].
Quote
Phil
W
adler:

\In
fact,
XML
is
little
more
than
a
notation
for
trees
and
for
tree
gram-
mars,
a
v
erb
ose
v
arian
t
of
Lisp
S-expressions
coupled
with
a
p
o
or
man's
BNF
(Bac
kus-Naur
form).
[
-
-
-
]
There
is
m
uc
h
for
the
language
designer
to
con
tribute
here.
As
all
this
is
based
on
a
sort
of
S-expression,
is
there
a
role
for
a
sort
of
Lisp?"
[W
a99
]

10
Conclusions
F
or
Erlang
to
b
e
used
inside
Ericsson
it
w
as
required
that
it
w
as
used
outside
and
for
Erlang
to
spread
outside
Ericsson
there
had
to
b
e
wide
use
of
it
inside.
The
only
w
a
y
to
get
around
this
w
as
a
steady
spread
of
the
language
in
b
oth
spheres.
In
fact,
in
the
dynamic
w
orld
of
telecomm
unications,
the
history
of
Erlang
has
pro
ceeded
in
a
see-sa
w
fashion
with
fo
cus
alternating
b
et
w
een
in
ternal
and
external
use,
see
T
able
10.1.
The
dev
elopmen
t
and
use
of
Erlang
sho
ws
that
for
a
new
programming
lan-
guage
to
b
e
reasonably
successful
there
are,
at
least,
the
follo
wing
prerequisits:

There
has
to
b
e
a
sizeable
and
stable
supp
ort
organisation.
The
OTP
pro
duct
unit
n
um
b
ers
18-20
p
eople
nanced
b
y
the
in-house
Ericsson
pro
jects.

There
m
ust
b
e
training
and
consultan
ts
a
v
ailable.

There
has
to
b
e
some
nic
he
that
is
su√Ücien
tly
in
teresting
and
imp
ortan
t
for
large
sectors
of
industry
.
In
Erlang's
case
high-a
v
ailabilit
y
,
reliable,
distributed
systems
and
rapid
design
through
high
abstraction
lev
el
and
protot
yping.

The
language
m
ust
b
e
reasonably
simple
to
learn
and
to
implemen
t.
A
most
remark
able
observ
ation
is
that
while
hardw
are
dev
elopmen
ts
go
ahead
at
great
sp
eed
(note
Mo
ore's
la
w)
basic
programming
still
remains
at
ab
out
the
same
lev
el
of
tec
hnology
as
30
y
ears
ago.
T
remendous
eorts
are
made
on
v
arious
metho
dolgies
and
the
visions
in
industry
seem
to
b
e
in
the
di-
rection
of
\soft
w
are
factories"
where
the
w
ork
can
b
e
reduced
to
mere
\co
ding".
T
o
da
y
when
large
n
um
b
ers
of
p
eople
are
a
v
ailable
with
univ
ersit
y
degrees
in
Computer
Science
there
should
b
e
a
greater
emphasis
on
b
etter
tec
hnologies.
F
unctional
programming
has
b
een
around
just
as
long
and
di√Ücult
problems
suc
h
as
hot
co
de
loading
and
distributed
programming
can
only
reasonably
b
e
handled
through
b
etter
tec
hnology
suc
h
as
Erlang
pro
vides.
W
as
it
w
orth
the
eort?
Did
the
Erlang
dev
elopmen
t
pro
duce
the
desired
tec
hnical
result
and
did
it
serv
e
the
needs
for
pro
duct
dev
elopmen
t?
The
answ
er
m
ust
b
e
\y
es"
on
b
oth
accoun
ts.
Erlang
has
also
sho
wn
that:

F
unctional
programming
can
b
e
used
for
v
ery
large
applications
in
v
olving
large
pro
ject
teams.

F
unctional
programming
can
b
e
used
for
industrial
real
time
em
b
edded
applications.
49

50
CHAPTER
10.
CONCLUSIONS
In
ternal
usage
External
usage
Commen
ts
1984-6
-
-
T
ec
hnology
ev
aluations
1987-9
-
Exp
erimen
tal
dev
elopmen
ts
Use
in
protot
yp
es
Presen
ted
at
ISS'90
1990-2
Academic
distribution
Exp
erimen
tal
dev
elopmen
ts
Noted
at
ISS'92
1993-5
Limited
use
in
pro
ducts
External
mark
eting
Erlang
Systems
established
1996
External
mark
eting
OTP
dev
elopmen
t
Use
for
strategic
halted
OTP
pr
o
duct
unit
established
1997
pro
duct
dev
elopmen
t
External
mark
eting
restarted
Nine
pro
ducts
3,323
ev
aluation
OTP
dev
elopmen
t
1998
displa
y
ed
at
CeBit
systems
deliv
ered
and
deplo
ymen
t
Erlang
stopp
ed
Op
en
source
at
ERA
release
1999
AXD
301
and
GPRS
Gro
wing
use
for
Bluetail
started
2000
win
imp
ortan
t
orders
pro
duct
dev
elopmen
t
A
lte
on
buys
Bluetail
T
able
10.1:
The
history
of
Erlang
summarized.

F
unctional
programming
giv
es
signican
t
commercial
adv
an
tages
in
rais-
ing
design
pro
ductivit
y
and
enabling
rapid
dev
elopmen
ts
through
proto-
t
yp
es
and
successiv
e
incremen
ts.
Erlang
pro
vides
man
y
examples
of
the
di√Ücult
y
of
tec
hnology
in
tro
duction,
notably:

Erlang
and
functional
programming
in
general
b
oth
enable
and
require
a
new
w
a
y
of
w
orking
with
m
uc
h
more
in
teractivit
y
.
The
top-do
wn
w
a-
terfall
metho
dologies
w
ere
designed
to
handle
con
v
en
tional
programming
languages.
T
ec
hnology
and
metho
dology
b
oth
ha
v
e
to
b
e
c
hanged.

Mark
eting
a
new
programming
language
and
a
new
w
a
y
of
w
orking
re-
quires
a
h
uge
eort
and
in
v
estmen
t.
Twice
Erlang
Systems
has
tried
mark
eting
Erlang
with
limited
resources
and
with
meager
results.
Sun
has
probably
sp
en
t
a
fortune
on
Ja
v
a
but
that
has
paid
bac
k
in
the
form
of
increased
demand
for
computer
equipmen
t.
Ericsson
is
a
telecomm
uni-
cations
compan
y
and
selling
Erlang
w
ould
not
sell
more
switc
hes.

Op
en
sour
c
e
com
bined
with
a
go
o
d
supp
ort
organisation
pro
vided
the
real
break-through.
Man
y
more
programmers
can
try
Erlang
and
companies
kno
w
that
supp
ort
and
education
are
a
v
ailable
if
needed.
When
CSLab
w
as
established
its
aim
w
as
describ
ed
th
us

\CSLab's
resp
onsibilit
y
in
the
long
term
is
to
create
a
basic
soft
w
are
tec
hnology
for
future
telecom
systems
and
supp
ort
systems
and
in
the
near
term
to
con
tribute
to
the
in
tro
duction
of
new
soft
w
are
tec
hnology
in
curren
t
systems."
[D
a84b
]
With
Erlang/OTP
CSLab
ac
hiev
ed
this
aim
and
has
in
the
pro
cess
sho
wn
that
applie
d
r
ese
ar
ch
in
an
industrial
lab
oratory
en
vironmen
t,
indeed,
w
orks

51
1
Sequen
tial
Erlang
Basic
Erlang
2
Concurren
t
Erlang
3
Error
Handling
4
POTS
and
Adv
anced
T
opics
1
Rep
etition,
More
ab
out
data
t
yp
es,
Erlang
4.4
extensions
Continue
d
Erlang
2
ETS
and
TV,
Co
de
loading,
Distributed
Erlang
3
P
orts,
F
uns,
List
comprehensions
4
Catc
h
and
thro
w,
Robustness
and
e√Üciency
,
Co
v
er,
Graphics
1
Ov
erview,
Beha
viours,
Beha
viours:
Serv
ers
OTP
Pr
o
gr
amming
2
Beha
viours:
Finite
state
mac
hines,
Sup
ervisors
3
Beha
viours:
Ev
en
ts,
Applications,
Sp
ecial
pro
cesses
4
System
conguration,
In
tro
duction
to
Mnesia
1
P
orts,
The
in
terface
generator
A
dvanc
e
d
Erlang
2
Link
ed-in
driv
ers,
So
c
k
ets
3
erl-in
terface,
C
no
des
4
Jiv
e
(in
terface
to
Ja
v
a),
Inets
T
able
10.2:
Course
Curriculae
(da
y
b
y
da
y),
1998.
as
w
as
the
prop
osition
in
the
k
ey
pap
er
[D
a91
].
While
tec
hnical
progress
has
con
tin
ued
steadily
{
mark
eting,
dissemination,
and
other
in
teraction
with
the
external
w
orld
ha
v
e
sho
wn
a
m
uc
h
more
unev
en
progress.
Ho
w
ev
er,
it
is
hop
ed
that
these
exp
eriences
can
b
e
useful
for
other
soft
w
are
dev
elop
ers
and
hence
they
ha
v
e
formed
the
main
theme
of
this
thesis.

52
CHAPTER
10.
CONCLUSIONS
No
of
No
of
No
of
Y
ear
Course
da
ys
courses
studen
ts
Basic
Erlang
4
18
191
Continue
d
Erlang
4
7
91
OTP
Pr
o
gr
amming
4
6
71
1997
A
dvanc
e
d
Erlang
4
2
11
SNMP
2
1
5
User
adapte
d
1-5
7
87
T
otal
41
456
Basic
Erlang
4
21
230
Continue
d
Erlang
4
6
51
1998
OTP
Pr
o
gr
amming
4
13
153
A
dvanc
e
d
Erlang
4
2
14
T
otal
42
448
Basic
Erlang
4
22
229
Continue
d
Erlang
4
5
48
1999
OTP
Pr
o
gr
amming
4
9
80
Erlang
Liter
acy
5
1
14
Seminars
and
Sp
e
cial
Courses
1-5
6
72
T
otal
43
443
T
able
10.3:
Courses
1997-1999.
The
User
A
dapte
d
courses
com
bined
material
from
the
other
courses
adapted
for
the
needs
of
the
particular
pro
ject.
The
Erlang
Liter
acy
course
is
adapted
for
test
and
installation
p
ersonnel.
Most
courses
w
ere
giv
en
at
Erlang
Systems'
premises
in
Kista
north
of
Sto
c
kholm.
Courses
ha
v
e
also
b
een
giv
en
at
the
users'
lo
cations
lik
e
A
thlone
(Ireland),
Aac
hen
and
Hildersheim
(German
y),
Budap
est
(Hungary),
Grimstad
(Norw
a
y),
Mon
tr

eal
(Canada),
and
Raleigh
and
Dallas
(USA).

53
Adelaide
Univ.
CTIN
A
ustr
alia
Australian
Defence
F
orce
Academ
y
SER
C,
Melb
ourne
Univ
ersit
y
of
Adelaide
Cen
tre
de
r

ec
h

erc
he
informatique
de
Mon
tr

eal
Canada
Simon
F
raser
Univ
ersit
y
,
V
anco
v
er
Univ
ersit

e
de
Mon
tr

eal
China
Beijing
Univ
ersit
y
of
P
osts
&
T
elecom
Shanghai
JiaoT
ong
Univ
ersit
y
Costa
R
ic
a
Inst.
T
ec
hnologica
de
Costa
Rica
Cr
o
atia
Univ
ersit
y
of
Zagreb
Germany
Rheinisc
h-W
estfalisc
he
T
ec
hnisc
he
Ho
c
hsc
h
ule
Univ
ersit
at
Kaiserslautern
Gr
e
e
c
e
National
T
ec
hnical
Univ
ersit
y
of
A
thens,
CS
dept
National
T
ec
hnical
Univ
ersit
y
of
A
thens
(NOC)
Hungary
T
ec
hnical
Univ
ersit
y
Budap
est,
Math
dept
Bengal
Eng.
College,
Ho
wrah
India
Indian
Inst.
of
T
ec
h.,
Dehli
Mala
viy
a
Regional
Eng.
College,
Jaipur
Ir
eland
T
rinit
y
College
Dublin
Italy
Coritel
Malaysia
Univ
ersit
y
T
eknologi
Mala
ysi
The
Netherlands
Katholik
e
Univ
ersiteit
Nijmegen
R
ussia
T
omsk
State
Univ
ersit
y
Jaume
I
Univ
ersit
y
Sp
ain
LF
CIA
Univ
ersidad
P
olitecnica
de
Madrid
AMU-Grupp
en
Syd
Chalmers
T
eknisk
a
H
ogsk
ola
H
ogsk
olan
Ronneb
y/Karlskrona
Ingenj
orsssk
olan/KTH
Haninge
Ingenj
orssk
olan/KTH
Kista
Swe
den
Link
oping
Univ
ersit
y
M
alardalens
H
ogsk
ola
Ro
y
al
Institute
of
T
ec
hnology/NAD
A
Ro
y
al
Institute
of
T
ec
hnology/T
eleinformatics
Sto
c
kholm
Univ
ersit
y
Sw
edish
Institute
of
Computer
Science
Uppsala
Univ
ersit
y
Thailand
Khon
Kaen
Univ
ersit
y
Univ
ersit
y
of
Glasgo
w
UK
Univ
ersit
y
of
Hull
Univ
ersit
y
of
Y
ork
Cen
tral
Mic
higan
Univ
ersit
y
UCSD
USA
Univ
ersit
y
of
California/LANL
Univ
ersit
y
of
Minnesota-Morris
Univ
ersit
y
of
Missouri
Univ
ersit
y
of
P
ennsylv
ania
T
able
10.4:
Academic
licences,
use
of
teac
hing
materials,
Marc
h
1999.

54
CHAPTER
10.
CONCLUSIONS

Bibliograph
y
[Ad83]
Reference
Man
ual
for
the
Ada
Programming
Language.
ANSI/MIL-
STD
1815,
1983.
[Ah92]
Ingemar
Ahlb
erg,
John-Olof
Bauner
and
Anders
Danne.
Protot
yping
Cordless
using
Declarativ
e
Programming.
XIV
International
Switching
Symp
osium.
Y
ok
ohama,
Octob
er
25-30,
1992.
[Ah93]
Ingemar
Ahlb
erg,
John-Olof
Bauner
and
Anders
Danne.
Protot
yping
Cordless
using
Declarativ
e
Programming.
Ericsson
R
eview,
no
2,
1993.
[Al84]
Magn
us
Alburg
and
Bjarne
D
ac
k
er.
Comparison
b
et
w
een
Lisp
and
P
ascal
for
Use
in
Dev
eloping
Programming
Supp
ort
En
vironmen
ts.
NT-P
Sym-
p
osium
on
L
anguages
and
Metho
ds
for
T
ele
c
ommunic
ations
Applic
ations.

Ab
o,
Marc
h
6-8,
1984.
[Alw]
Alteon
W
ebSystems.
W
eb
site
http://www.alteo
nwe
bs
ys
tem
s.
com
[An95]
Matz
Andersson,
Jo
e
Armstrong,
Lars
Borg,
Bjarne
D
ac
k
er
(c
hairman),
P
er
Hedeland,
Hans
Heilb
orn,
T
omm
y
Johansson,
Sebastian
Strollo,
T
on
y
Rogv
all,
Claes
Wikstr
om
and
Mik
e
Williams.
A
TM
Con
trol
System,
Pro-
p
osal
from
the
Op
en
Platform
Group.
EUA/SU
95
038.
1995-10-10.
In
ternal
pap
er.
[Ar86]
Jo
e
Armstrong,
Nabiel
Elshiewy
and
Rob
ert
Virding.
The
Phoning
Philosophers'
Problem
or
Logic
Programming
for
T
elecomm
unications
Ap-
plications.
Thir
d
IEEE
Symp
osium
on
L
o
gic
Pr
o
gr
amming.
Salt
Lak
e
Cit
y
,
Septem
b
er
23-26,
1986.
[Ar90]
Jo
e
Armstrong
and
Rob
ert
Virding.
Erlang
-
An
Exp
erimen
tal
T
ele-
phon
y
Programming
Language.
XIII
International
Switching
Symp
osium.
Sto
c
kholm,
Ma
y
27-June
1,
1990.
[Ar92a]
Jo
e
Armstrong,
Bjarne
D
ac
k
er,
Rob
ert
Virding
and
Mik
e
Williams.
Im-
plemen
ting
a
F
unctional
Language
for
Highly
P
arallel
Real
Time
Applica-
tions.
Softwar
e
Engine
ering
for
T
ele
c
ommunic
ation
Systems
and
Servic
es.
Florence,
Marc
h
30-April
1,
1992.
[Ar92b]
Jo
e
Armstrong,
Rob
ert
Virding
and
Mik
e
Williams.
Use
of
Prolog
for
Dev
eloping
a
new
Programming
Language.
The
Pr
actic
al
Applic
ation
of
Pr
olo
g.
London,
April
1-3,
1992.
[Ar93]
Jo
e
Armstrong,
Rob
ert
Virding
and
Mik
e
Williams.
Concurren
t
Pro-
gramming
in
Erlang.
Pren
tice-Hall,
1993,
ISBN
0-13-285792-8,
1st
edition.
55

56
BIBLIOGRAPHY
[Ar95]
Jo
e
Armstrong
and
Rob
ert
Virding.
One
P
ass
Real
Time
Generational
Mark-sw
eep
Garbage
Collection.
International
Workshop
on
Memory
Man-
agement.
Kinross,
Scotland,
Septem
b
er
27-29,
1995.
[Ar96a]
Jo
e
Armstrong,
Rob
ert
Virding,
Claes
Wikstr
om
and
Mik
e
Williams.
Concurren
t
Programming
in
Erlang.
Pren
tice-Hall,
1996,
ISBN
0-13-
285792-8,
2nd
edition.
[Ar96b]
Jo
e
Armstrong.
Erlang
-
A
Surv
ey
of
the
Language
and
its
Industrial
Applications.
Ninth
Exhibition
and
Symp
osium
on
Industrial
Applic
ations
of
Pr
olo
g.
T
oky
o,
Octob
er
16-18,
1996.
[Ar97a]
Jo
e
Armstrong.
Design
P
atterns
for
Designing
Switc
hing
Soft
w
are.
High
L
evel
Concurr
ent
L
anguages.
Sc
hloss
Dagstuhl,
Jan
uary
20-22,
1997.
[Ar97b]
Jo
e
Armstrong.
The
Dev
elopmen
t
of
Erlang.
A
CM
SIGPLAN
Interna-
tional
Confer
enc
e
on
F
unctional
Pr
o
gr
amming.
In
vited
pap
er.
Amsterdam,
June
9-13,
1997.
[Ar97c]
Jo
e
Armstrong
and
Thomas
Arts.
Erlang
and
its
Applications.
Work-
shop
on
Constr
aint
Pr
o
gr
amming
for
Time
Critic
al
Applic
ations.
In
vited
pap
er.
Sc
hloss
Hagen
b
erg,
Austria,
Octob
er
27-28,
1997.
[Ar98]
Thomas
Arts,
Mads
Dam,
Lars-

Ak
e
F
redlund
and
Dilian
Guro
v.
System
Description:
V
erication
of
Distributed
Erlang
Programs.
Fifte
enth
Inter-
national
Confer
enc
e
on
A
utomate
d
De
duction.
Lindau,
July
5-10,
1998.
[Ar99a]
Thomas
Arts
and
Izak
v
an
Langev
elde.
Ho
w
m
uCRL
supp
orted
a
Smart
Redesign
of
a
Real-life
Proto
col.
International
workshop
on
F
ormal
Metho
ds
in
Industrial
Critic
al
Systems.
T
ren
to,
July
,
1999.
[Ar99b]
Thomas
Arts
and
J

urgen
Giesl.
Applying
Rewriting
T
ec
hniques
to
the
V
erication
of
Erlang
Pro
cesses.
Computer
Scienc
e
L
o
gic.
Madrid,
Septem-
b
er,
1999.
[Ar99c]
Thomas
Arts
and
Mads
Dam.
V
erifying
a
Distributed
Database
Lo
okup
Manager
written
in
Erlang.
World
Congr
ess
on
F
ormal
Metho
ds.
T
oulouse,
Septem
b
er,
1999.
[Asw]
Adv
anced
Soft
w
are
T
ec
hnology
.
Comp
etence
cen
ter
at
Uppsala
univ
er-
sit
y
.
W
eb
site
http://www.docs.
uu
.s
e/a
st
ec/
[A
t84]
The
UNIX
System.
A
T&T
Bel
l
L
ab
or
atories
T
e
chnic
al
Journal,
v
ol
63,
no
8,
part
2,
Octob
er,
1984.
[Au00]
T
omas
Augustsson.
Svenska
Dagbladet,
August
30,
2000.
[Axd]
AXD
301
High-P
erformance
IP
&
A
TM
Switc
h.
W
eb
site
http://www.eric
ss
on.
se
/da
ta
com
/p
ro
duc
ts
/wa
n
core/axd301
[Ba86]
Victor
R.
Basili,
Ric
hard
W.
Selb
y
and
Da
vid
H.
Hutc
hens.
Exp
erimen-
tation
in
Soft
w
are
Engineering.
IEEE
T
r
ansactions
on
Softwar
e
Engine
er-
ing,
no
7,
July
,
1986.

BIBLIOGRAPHY
57
[Bj95]
Martin
Bj
orklund
and
Klas
Eriksson.
A
F
ramew
ork
for
SNMPv2
in
Er-
lang.
KTH/NAD
A,
Master's
Thesis,
1995.
[Bl98]
Staan
Blau
and
Jan
Ro
oth.
AXD
301
-
A
new
Generation
A
TM
Switc
h-
ing
System.
Ericsson
R
eview,
no
1,
1998.
[Bl99]
Staan
Blau,
Jan
Ro
oth,
J
orgen
Axell,
Fi√Ü
Hellstrand,
Magn
us
Buhrgard,
T
omm
y
W
estin
and
G
oran
Wic
klund.
AXD
301:
A
new
Genera-
tion
A
TM
Switc
hing
System.
Computer
Networks,
no
31,
1999,
pp
559-582.
[Blw]
Bluetail
AB.
W
eb
site
http://www.bluet
ail
.c
om
[Bo97]
Ken
t
Bo
ortz
and
Dan
Sahlin.
A
Compacting
Garbage
Collector
for
Uni-
directional
Heaps.
Ninth
International
Workshop
on
Implementation
of
F
unctional
L
anguages.
St
Andrews,
Scotland,
Septem
b
er
1997.
Selected
P
ap
ers,
Springer-V
erlag
LNCS
V
ol
1467.
[Br75]
F
red
P
.
Bro
oks.
The
Mythical
Man-Mon
th:
Essa
ys
on
Soft
w
are
Engi-
neering.
Addison-W
esley
Publishing
Compan
y
,
1975.
[Br99]
La
wrie
Bro
wn
and
Dan
Sahlin.
Extending
Erlang
for
Safe
Mobile
Co
de
Execution.
The
Se
c
ond
International
c
onfer
enc
e
on
Information
and
Com-
munic
ation
Se
curity.
Sydney
,
Australia,
No
v
em
b
er,
1999.
[Bu90]
Alan
Burns
and
Andy
W
ellings.
Real-time
Systems
and
their
Program-
ming
Languages.
Addison-W
esley
Publishing
Compan
y
Inc,
1990,
ISBN
0-201-17529-0.
[Bu92]
M
Buhgard,
P
Granestrand,
M
Lindblom
and
L
Th
yl

en.
Photonic
Switc
hing
in
High
Capacit
y
Net
w
orks.
XIV
International
Switching
Sym-
p
osium.
Y
ok
ohama,
1992.
[B

a84]
G
oran
B

age.
The
Programming
Language
EriP
ascal.
LME/UE
83
018,
1984-05-04.
In
ternal
pap
er.
[Ca99]
Maurice
Castro.
Erlang
in
Real
Time.
ISBN:
0864447434.
1999.
W
eb
site
http://www.serc.r
mit
.e
du.
au
/~
mau
ri
ce/
er
lbk
/
[CC84a]
Sp
ecication
and
Description
Language
SDL.
C.C.I.T.T.
Recommen-
dation
Z.100,
1984.
[CC84b]
CCITT
High
Lev
el
Language
CHILL.
C.C.I.T.T.
Recommendation
Z.200,
1984.
[Cew]
Core
Erlang
Initiativ
e.
W
eb
site
http://www.csd.u
u.
se/
pr
oje
ct
s/
hip
e/
cor
er
l/
[Cl81]
W.
F.
Clo
c
ksin
and
C.
S.
Mellish.
Programming
in
Prolog.
Springer-
V
erlag,
1981.
[Clw]
Concurren
t
Clean
Home
P
age.
W
eb
site
http://www.cs.kun
.nl
/~
cle
an
/
[Cs99]
Ericsson
k
op
er
del
a
v
SoftLab.
Computer
Swe
den,
Jan
uary
18,
1999.

58
BIBLIOGRAPHY
[Csd]
Computing
Science
Departmen
t
(CSD).
Uppsala
Univ
ersit
y
.
W
eb
site
http://www.csd.uu
.s
e
[Csw]
Computer
Science
Lab
oratory
.
Ericsson
Utv
ec
klings
AB.
W
eb
site
http://www.ericss
on
.se
/c
sla
b
[Da96]
Hans
Dahlquist.
T
unnelb
ygget
blir
era
h
undra
miljoner
dyrare.
Ny
T
eknik,
no
40,
1996.
[Da98]
Mads
Dam,
Dilian
Guro
v
and
Lars-

ak
e
F
redlund.
Comp
ositional
V
eri-
cation
of
Erlang
Programs.
Thir
d
International
Workshop
on
F
ormal
Meth-
o
ds
for
Industrial
Critic
al
Systems.
Amsterdam,
Ma
y
25-26,
1998.
[Di91]
Distorsion.
Studen
t
pro
ject
with
17
participan
ts.
UU/DoCS,
1991.
[Do
w]
Departmen
t
of
Computer
Systems
(DoCS).
Uppsala
Univ
ersit
y
.
W
eb
site
http://www.docs.u
u.
se
[Dp
w]
Erlang
Programming
Rules
and
Con
v
en
tions.
W
eb
site
http://www.erlang
.s
e/d
oc
/pr
og
ra
mmi
ng
rules.shtml
[Dy96]
Ken
t
Dybigg.
The
Sc
heme
Programming
Language:
ANSI
Sc
heme.
Pren
tice-Hall.
ISBN
0-13-454646-6.
[D
a79]
Bjarne
D
ac
k
er.
EriChill/EriP
ascal
Programmeringsspr

ak.
F
orslag.
LME/X/Td
2419.
1979-06-15.
In
ternal
pap
er.
[D
a83]
Bjarne
D
ac
k
er.
Using
Lisp
to
Dev
elop
Programming
Supp
ort
En
viron-
men
ts
in
the
Industrial
En
vironmen
t.
International
Workshop
on
Softwar
e
Development
T
o
ols
for
T
ele
c
ommunic
ation
Systems.
Anaheim,
April
6-8,
1983.
[D
a84a]
Bjarne
D
ac
k
er,
Nabiel
Elshiewy
,
P
er
Hedeland,
Carl
Wilhelm
W
elin,
and
Mik
e
Williams.
Exp
erimen
ts
with
Programming
Languages
and
T
ec
h-
niques
for
T
elecomm
unications
Applications.
ETX/XT/DU
84
030.
Jan-
uary
,
1984.
In
ternal
pap
er.
[D
a84b]
Bjarne
D
ac
k
er.
XT/DU
Datalogi.
Ansv
arsb
eskrivning.
ETX/XT/DU
84
048.
April,
1984.
In
ternal
pap
er.
[D
a86]
Bjarne
D
ac
k
er,
Nabiel
Elshiewy
,
P
er
Hedeland,
Carl
Wilhelm
W
elin,
and
Mik
e
Williams.
Exp
erimen
ts
with
Programming
Languages
and
T
ec
hniques
for
T
elecomm
unications
Applications.
Softwar
e
Engine
ering
for
T
ele
c
om-
munic
ation
Switching
Systems.
Eindho
v
en,
April
14-18,
1986.
[D
a89]
Bjarne
D
ac
k
er
and
Kerstin

Odling.
A
CS/DUNDER.
Soft
w
are
Arc
hi-
tecture
and
T
ec
hnology
.
EBC/KX/DM
89
101.
Decem
b
er,
1989.
In
ternal
pap
er.
[D
a91]
Bjarne
D
ac
k
er.
Managemen
t
of
T
ec
hnology
with
Regard
to
Soft
w
are.
First
A
ustr
alian
Confer
enc
e
on
T
ele
c
ommunic
ations
Softwar
e.
In
vited
pa-
p
er.
Melb
ourne,
April
22-24,
1991.
[D
a93a]
Bjarne
D
ac
k
er.
Erlang
-
A
New
Programming
Language.
Ericsson
R
e-
view,
no
2,
1993.

BIBLIOGRAPHY
59
[D
a93b]
Bjarne
D
ac
k
er.
Breakthrough
in
Soft
w
are
Design
Pro
ductivit
y
through
the
Use
of
Declarativ
e
Programming.
Eighth
World
Pr
o
ductivity
Congr
ess.
Sto
c
kholm,
Ma
y
23-27,
1993.
[D
a94a]
Bjarne
D
ac
k
er.
In
tro
ducing
Concurren
t
F
unctional
Programming
in
to
the
T
elecomm
unications
Industry
.
TELECOM'94.
V
arna,
Septem
b
er
20-22,
1994.
[D
a94b]
Bjarne
D
ac
k
er.
Industrial
Applications
of
Declarativ
e
Programming.
SOFT
13
-
Impr
ove
d
Pr
o
ductivity
of
Quality
Softwar
e.
Link
oping,
Octo-
b
er
3-4,
1994.
[D
a95]
Bjarne
D
ac
k
er.
The
Dev
elopmen
t
and
Use
of
Erlang.
Concurren
t
F
unc-
tional
Programming
in
Industry
.
ConT
el'95.
Confer
enc
e
on
T
ele
c
ommuni-
c
ations.
Zagreb,
June
7-9,
1995.
[Edw]
The
Eddie
Op
en
Source
Pro
ject.
W
eb
site
http://www.eddiew
ar
e.o
rg
[Ek79]
T
Ekman
and
G
Eriksson.
Programmering
i
F
ortran
77.
Studen
tlitter-
atur
1979.
ISBN
91-44-16663-X.
[En98]
Erlang/OTP
News,
CeBit
Sp
ecial,
April,
1998.
[Er44]
Erlang
Extensions
Since
4.4
W
eb
site
http://www.erlang
.or
g/
doc
/r
7a
/do
c/
ext
en
si
ons
/p
art
frame.html
[Er92]
Dic
k
Eriksson,
Mats
P
ersson
and
Kerstin

Odling.
A
Switc
hing
Soft
w
are
Arc
hitecture
Protot
yp
e
Using
Real
Time
Declarativ
e
Language.
XIV
In-
ternational
Switching
Symp
osium.
Y
ok
ohama,
1992.
[Er95]
Bern
t
Ericson.
Applied
Researc
h
at
Ericsson.
LME/DT-95:3003
Ue.
Jan-
uary
,
1995.
In
ternal
pap
er.
[Erl]
T
able
of
the
Erlang
Loss
F
orm
ula.
T
elefon
AB
LM
Ericsson.
X/Yg
102
903
Ue.
Sto
c
kholm,
1979.
[Erm]
Enhanced
Radio
MEssaging
System
(ERMES).
W
eb
site
http://www.ermes
.o
rg
[Ers]
Erlang
Language
Sp
ecication.
W
eb
site
http://www.erlan
g.
org
/d
own
lo
ad
/er
l
spec47.ps.gz
[Erw]
Erlang
Systems.
W
eb
site
http://www.erlang
.s
e
[Euc99]
Fifth
In
ternational
Erlang/OTP
User
Conference,
Sto
c
kholm,
Septem-
b
er
30,
1999.
W
eb
site
http://www.erlan
g.s
e/
eu
c/9
9
[Euc00]
Sixth
In
ternational
Erlang/OTP
User
Conference,
Sto
c
kholm,
Octo-
b
er
3,
2000.
W
eb
site
http://www.erlang
.se
/e
uc/
00
[Exw]
ExoKernel
Home
P
age.
W
eb
site
http://www.pdos.
lc
s.m
it
.ed
u/
ex
o.h
tm
l
[F
e98]
Anna
F
edoriw.
Easy
Design,
F
ew
er
Fla
ws
and
Lo
w
Sustaining
Costs.
Erlang/OTP
News,
F
ebruary
1998.

60
BIBLIOGRAPHY
[F
e99]
Marc
F
eeley
,
P
atric
k
Pic
h

e,
Sylv
ain
Beaulieu,
Martin
Larosse,
and
Mario
Latendresse.
Status
Rep
ort
on
the
ETOS
Erlang
to
Sc
heme
Compiler.
Fifth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Septem
b
er
30,
1999.
[F
o79]
C.
L.
F
orgy
.
OPS4
User's
Man
ual.
T
ec
hnical
Rep
ort
CMU-CS-79-132.
Departmen
t
of
Computer
Science.
Carnegie-Mellon
Univ
ersit
y
,
1979.
[F
o89]
I.
F
oster
and
S.
T
a
ylor.
STRAND.
New
Concepts
in
P
arallel
Pro
cessing.
Pren
tice-Hall,
1989.
[F
r93]
Magn
us
F
r
ob
erg.
Automatic
Co
de
Generation
from
SDL
to
a
Declara-
tiv
e
Programming
Language.
Sixth
SDL
F
orum.
Darmstadt,
Octob
er
11-15,
1993.
[F
r00]
Scott
Lystig
F
ritc
hie,
Jim
Larson,
Nic
k
Christenson,
Debi
Jones,
Lennart

Ohman.
Sendmail
Meets
Erlang:
Exp
eriences
Using
Erlang
for
Email
Ap-
plications.
Sixth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Octob
er
3,
2000.
[Ga
w]
Gam
bit
Sc
heme
Home
P
age.
W
eb
site
http://www.iro.u
mo
ntr
ea
l.c
a/
~g
amb
it
[Gi94]
W.
W
a
yt
Gibbs.
Soft
w
are's
Chronic
Crisis.
Scientic
A
meric
an.
Septem-
b
er,
1994.
[Go96]
James
Gosling,
Bill
Jo
y
and
Guy
Steele.
The
Ja
v
a
Language
Sp
ecica-
tion.
Addison-W
esley
,
1996.
[Gprs]
Alw
a
ys
\on-line"
with
GPRS.
W
eb
site
http://www.eric
ss
on.
se
/wi
re
les
s/
pr
odu
ct
s/m
ob
sy
s/g
sm
/su
bp
age
s/
wi
se/
gp
rs.
sh
tm
l
[Gr82]
Ov
e
Granstrand.
T
ec
hnology
,
Managemen
t
and
Mark
ets.
Pin
ter.
Lon-
don,
1982.
[Gr99]
H

ak
an
Gran
b
ohm
and
Joakim
Wiklund.
GPRS
-
General
P
ac
k
et
Radio
Service.
Ericsson
R
eview,
no
2,
1999.
[Ha93]
Bogumil
Hausman.
T
urb
o
Erlang.
International
L
o
gic
Pr
o
gr
amming
Symp
osium.
V
ancouv
er,
Octob
er
26-29,
1993.
[Ha94]
Bogumil
Hausman.
T
urb
o
Erlang:
Approac
hing
the
Sp
eed
of
C.
In
Im-
plementations
of
L
o
gic
Pr
o
gr
amming
Systems,
pp.
119-135.
Klu
w
er
Aca-
demic
Publishers,
1994.
[Ha99]
Seif
Haridi.
Missf
orst

and
om
Mozart.
Letter
to
the
Editor.
Datateknik
3.0,
no
6,
1999.
[Ha
w]
Hask
ell
Home
P
age.
W
eb
site
http://haskell.c
s.
yal
e.
ed
u
[He76]
G
oran
Hemdal.
AXE
10
-
Soft
w
are
Structure
and
F
eatures.
Ericsson
R
eview,
no
2,
1976.
[He98]
P
ekk
a
Hedqvist.
A
P
arallel
and
Multi-threaded
Erlang
Implemen
tation.
UU/CSD,
Master's
Thesis,
1998.

BIBLIOGRAPHY
61
[He00a]
Thomas
Hedlund.
Spr

ak
et
b
ast
i
k
omplexa
realtidssystem.
Computer
Swe
den,
no
11,
2000.
[He00b]
Thomas
Hedlund.
Roligt
att
utv
ec
kla
i
Erlang.
Computer
Swe
den,
no
11,
2000.
[Hi00]
Sean
Hinde.
Use
of
Erlang/OTP
as
a
Service
Creation
T
o
ol
for
IN
Ser-
vices.
Sixth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Octo-
b
er
3,
2000.
[Hiw]
High
P
erformance
Erlang.
W
eb
site
http://www.csd.u
u.
se/
pr
oje
ct
s/
hip
e/
osh
[Hj90]
Thomas
Hjalmarsson.
AXE
10
Cen
tral
Pro
cessors.
Ericsson
R
eview,
no
1,
1990.
[Ho83a]
S
oren
Holmstr
om.
PFL
-
A
F
unctional
Language
for
P
arallel
Pro-
gramming.
Rep
ort
no
83.03-R,
Programming
Metho
dology
Lab
oratory
.
Chalmers
Univ
ersit
y
of
T
ec
hnology
,
1983.
[Ho83b]
R.
C.
Holt.
Concurren
t
Euclid,
the
UNIX
System
and
TUNIS.
Addison-
W
elsley
,
1983.
[Hu87]
Joan
Kirkb
y
Hughes.
PL/I
Structured
Programming.
John
Wiley
&
Sons
Inc,
1987.
[Hu89]
John
Hughes.
Wh
y
F
unctional
Programming
Matters.
The
Computer
Journal,
v
ol
32,
no
2,
1989.
[Hu00]
F
rank
Huc
h
and
Ulric
h
Norbisrath.
Distributed
Programming
in
Hask
ell
with
P
orts.
Twelfth
International
Workshop
on
Implementation
of
F
unc-
tional
L
anguages.
Aac
hen,
Septem
b
er
4-7,
2000.
[Isw]
In
tegrated
Systems,
Inc.
W
eb
site
http://www.isi.co
m
[Iv90]
Ny
generation
a
v
programspr

ak
p

a
v
ag.
F
r
amste
g
inom
forskning
o
ch
teknik
1990.
IV
As

arsb
ok
1990.
[Je75]
Kathleen
Jensen
and
Niklaus
Wirth.
P
ascal
-
User
Man
ual
and
Rep
ort.
Springer-V
erlag,
1975.
[Jo88]
Gerain
t
Jones
and
Mic
hael
Goldsmith.
Programming
in
Occam2.
Pren
tice-Hall,
1988.
[Jo97]
Ing-Marie
Jonsson,
Dan
Sahlin
et
al.
A
Platform
for
Secure
Mobile
Agen
ts.
Pr
actic
al
Applic
ations
of
A
gents
and
Mobility.
London,
April
21-23,
1997.
[Jo99]
Erik
Johansson,
Sv
en-Olof
Nystr
om,
Mik
ael
P
ettersson,
and
Konstan
ti-
nos
Sagonas.
HiPE:
High
P
erformance
Erlang.
ASTEC
T
ec
hnical
Rep
orts
1999.
W
eb
site
http://www.docs
.uu
.s
e/a
st
ec
/Re
po
rts
[Jo00a]
Erik
Johansson,
Mik
ael
P
ettersson,
and
Konstan
tinos
Sagonas.
A
High
P
erformance
Erlang
System.
2nd
International
Confer
enc
e
on
Principles
and
Pr
actic
e
of
De
clar
ative
Pr
o
gr
amming.
Mon
tr

eal,
Septem
b
er
20-22,
2000.

62
BIBLIOGRAPHY
[Jo00b]
T
orb
j
orn
Johnson.
Op
en
Source
Soft
w
are
-
Industriell
An
v
andning.
Sv
eriges
V
erkstadsindustrier,
2000
(to
b
e
published).
[Ka68]
K.
Katze
and
T.
Andersson.
The
T
um
ba
Stored
Program
Con
trolled
T
elephone
Exc
hange.
Ericsson
R
eview,
no
3,
1968.
[Ka99]
Magn
us
Karlson.
Coming
Releases
of
Erlang/OTP
.
Fifth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm.
Septem
b
er
1999.
[Ka00a]
Lars
Anders
Karlb
erg.
Genom
brott
f
or
forsk
arna
som
Ericsson
in
te
ville
ha.
Dagens
IT,
no
7,
F
ebruary
16,
2000.
[Ka00b]
Lars
Anders
Karlb
erg.
Nortel
k
op
er
a
vhoppade
Ericsson-forsk
are.
Da-
gens
IT,
August
28,
2000.
[Ke78]
B.
W.
Kernighan
and
D.
M.
Ritc
hie.
The
C
Programming
Language.
Pren
tice-Hall,
1978.
[Li79]
Barbara
Lisk
o
v
et
al.
CLU
Reference
Man
ual.
MIT/LCS/TR-225,
1979.
[Li99]
Thomas
Lindgren
and
Christer
Jonsson.
The
Design
and
Implemen
tation
of
a
High-P
erformance
Erlang
Compiler.
ASTEC
T
ec
hnical
Rep
orts
1999.
[Lo
w]
Lo
dbrok
er
Pt
y
.
W
eb
site
http://www.lodbr
oke
r.
com
/
[Ma86]
P
eter
Magn

eli.
Comm
unications
Computer
APN
167
with
ERIP
ASCAL.
Ericsson
R
eview,
no
4,
1986.
[Ma88]
D.
Maier
and
D.
S.
W
arren.
Computing
with
Logic:
Logic
Programming
with
Prolog.
Benjamin
Cummings,
1988.
[Ma97]
Simon
Marlo
w
and
Philip
W
adler.
A
Practical
Subt
yping
System
for
Erlang.
A
CM
International
Confer
enc
e
on
F
unctional
Pr
o
gr
amming.
1997.
[Ma99]
H

ak
an
Mattsson,
Hans
Nilsson
and
Claes
Wikstr
om.
Mnesia
-
A
Dis-
tributed
Robust
DBMS
for
T
elecomm
unications
Applications.
First
Inter-
national
Workshop
on
Pr
actic
al
Asp
e
cts
of
De
clar
ative
L
anguages.
San
An-
tonio,
T
exas,
Jan
uary
18-19,
1999.
[Mc65]
LISP
1.5
Programmer's
Man
ual.
J.
McCarth
y
et
al.
M.I.T.
Press,
Cam-
bridge,
1965.
[Mdw]
MD110
BC10.
W
eb
site
http://www.ericss
on
.se
/e
nte
rp
ri
se/
po
rtf
ol
io/
sy
st
em
[Mew]
The
Mercury
Pro
ject.
W
eb
site
http://www.cs.mu.
oz
.au
/r
ese
ar
ch
/me
rc
ury
/
[Me00]
Jan
Melin.
T
rogna
b
es
ok
are
f

ar
gr
addl
p

a
In
ternet.
Ny
T
eknik,
no
8,
2000.
[Mi98]
H

ak
an
Millroth.
Platform
for
High-Av
ailabilit
y
Applications:
Er-
lang/OTP
vs
Ja
v
a.
In
ternal
pap
er.
[Miw]
Op
en
Source
Erlang.
Mirror
Sites.
W
eb
site
http://www.erlang
.o
rg/
mi
rro
rs
.h
tml

BIBLIOGRAPHY
63
[Mlw]
The
ML
language.
W
eb
site
http://burks.bto
n.
ac.
uk
/bu
rk
s/
lan
gu
age
/m
l/
[Mo93]
F
rancisco
Monfort.
Con
trol
Switc
hing
Implemen
tation
of
the
BIPED
Demonstrator.
Se
c
ond
A
ustr
alian
Confer
enc
e
on
T
ele
c
ommunic
ations
Soft-
war
e.
Sydney
,
1993.
[Mo00]
Markus
Mohnen
and
Pieter
Ko
opman,
editors.
Pro
ceedings
of
the
12th
In
ternational
W
orkshop
on
Implemen
tation
of
F
unctional
Languages.
Aac
hen,
Septem
b
er
4-7,
2000.
Aac
hener
Informatik-Beric
h
te,
ISSN
0935-
3232.
[Moz]
Mozart
Programming
System.
W
eb
site
http://www.mozart
-oz
.o
rg
[M
o82]
Rolf
M
orlinger.
MD
110
-
a
Digital
SPC
P
ABX.
Ericsson
R
eview,
no
1,
1982.
[Na99]
Hans
Nahringbauer.
T
elia
Call
Guide.
Fifth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm.
Septem
b
er
1999.
[Nm
w]
Natural
Micro
Systems.
W
eb
site
http://www.natur
al
mic
ro
sys
te
ms
.co
m
[Ni96a]
Hans
Nilsson.
Amnesia
-
An
Industrial
Deductiv
e
DBMS
with
T
rans-
actions
and
Distribution.
L
o
gic
Datab
ases
and
the
Me
aning
of
Change.
Dagstuhl,
Septem
b
er
23-27,
1996.
[Ni96b]
Hans
Nilsson
and
Claes
Wikstr
om.
Mnesia
-
An
Industrial
DBMS
with
T
ransactions,
Distribution
and
a
Logical
Query
Language.
International
Symp
osium
on
Co-op
er
ative
Datab
ase
Systems
for
A
dvanc
e
d
Applic
ations.
Ky
oto,
1996.
[Ni98]
P
atrik
Nilsson
and
Mic
hael
P
ersson.
ANx
-
High
sp
eed
In
ternet
Access.
Ericsson
R
eview,
Sp
ecial
Issue
on
In
ternet
Access,
1998.
[Nu
w]
NUTEK
-
N
arings
o
c
h
teknikutv
ec
klingsv
erk
et.
W
eb
site
http://www.nutek
.s
e
[Ny00]
P
atrik
Nyblom.
The
Bit
Syn
tax
-
The
Released
V
ersion.
Sixth
Interna-
tional
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Octob
er
3,
2000.
[Ok90]
Ric
hard
O'Keefe.
The
Craft
of
Prolog.
The
MIT
Press,
1990.
[Ok98]
Ric
hard
O'Keefe.
Abstract
P
atterns
for
Erlang.
F
ourth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Septem
b
er
22-23,
1998.
[Ol00]
Nils-Olof
Ollevik.
Alteon
k
op
er
Bluetail.
Sv
ensk
a
Dagbladet.
August
28,
2000.
[Ol95]
Hans
Olsson.
Ericsson
l
agger
ner
utv
ec
kling.
Dagens
Nyheter.
Decem-
b
er
8,
1995.
[Ol99]
Ken
t
Olsson
and
Ev
en-Andr

e
Karlsson.
Daily
Build
-
Rapid
Dev
elopmen
t
and
Con
trol.
Sveriges
V
erkstadsindustrier,
1999.
[Omg]
Ob
ject
Managemen
t
Group.
W
eb
site
http://www.omg.or
g

64
BIBLIOGRAPHY
[Op
d]
Op
en
Source
Denition.
W
eb
site
http://www.openso
ur
ce.
or
g/o
sd
.h
tml
[Op
w]
Op
en
Source
Erlang.
W
eb
site
http://www.erlang
.o
rg
Curren
t
statistics
http://www.erla
ng.
or
g/s
ta
ts
.ht
ml
[P
e89]
Mats
P
ersson.
A
CS/Dunder
Protot
yping
Rep
ort.
Executiv
e
Sum-
mary/Managemen
t
Rep
ort.
EBC/KX/DC
89:069.
Decem
b
er,
1989.
In
ter-
nal
pap
er.
[P
e98]
Eia
P
ersson.
20
jobb

ar
i
farozonen.

Ostg
otac
orr
esp
ondenten,
No
v
em-
b
er
21,
1998.
[P
o00]
R
F
P
oin
ton,
P
W
T
rinder,
and
H-W
Loidl.
The
Design
and
Implemen-
tation
of
Glasgo
w
distributed
Hask
ell.
Twelfth
International
Workshop
on
Implementation
of
F
unctional
L
anguages.
Aac
hen,
Septem
b
er
4-7,
2000.
[Pr98]
Ericsson
signs
t
w
o
y
ear
con
tract
for
ADSL
with
T
elia.
Ericsson
Pr
ess
R
ele
ases.
Octob
er
19,
1998.
[Pr99a]
Ericsson
wins
groundbreaking
GBP
270
million
con
tract
with
BT.
Er-
icsson
Pr
ess
R
ele
ases.
Jan
uary
21,
1999.
[Pr99b]
Ericsson
and
T-Mobil
in
w
orld's
rst
GPRS
con
tract.
Ericsson
Pr
ess
R
ele
ases.
Jan
uary
26,
1999.
[Pr99c]
Ericsson
presen
ts
ENGINE.
Ericsson
Pr
ess
R
ele
ases.
No
v
em
b
er
16,
1999.
[Pr00a]
Ericsson
sells
its
Energy
Systems
business
to
Emerson
Electric.
Ericsson
Pr
ess
R
ele
ases.
Jan
uary
18,
2000.
[Pr00b]
Ericsson
sho
ws
rst
liv
e
GPRS
phone
in
rst
end-to-end
liv
e
GPRS
net
w
ork
demo.
Ericsson
Pr
ess
R
ele
ases.
F
ebruary
2,
2000.
[Pr00c]
Nortel
Net
w
orks
to
Acquire
Alteon
W
ebSystems
for
US$7.8
Billion.
A
lte
on
Pr
ess
R
ele
ases.
July
28,
2000.
[Pr00d]
Alteon
W
ebSystems
to
Acquire
Bluetail
for
$152
Million.
A
lte
on
Pr
ess
R
ele
ases.
August
28,
2000.
[Ra88]
Lars
Ramqvist.
Ericsson's
Strategies
and
T
ec
hnologies
for
the
1990's.
Ericsson
R
eview,
no
3,
1988.
[Ra
w]
Rational
Inc.
W
eb
site
http://www.ration
al
.c
om
[Ra99]
Eric
S.
Ra
ymond.
The
Cathedral
and
the
Bazaar.
W
eb
site
http://www.tuxed
o.o
rg
/~e
sr
/wr
it
in
gs/
ca
the
dr
al
-ba
za
ar
[Re97]
Red
Hat
Lin
ux
5.0.
The
O√Ücial
Red
Hat
Lin
ux
Installation
Guide.
Red
Hat
Soft
w
are
Inc.,
1997.
[Rew]
Red
Hat
Inc.
W
eb
site
http://www.redh
at.
co
m

BIBLIOGRAPHY
65
[Ri98]
T
omm
y
Ringqvist.
BR
P
olicy
concerning
Use
of
Erlang.
ERA/BR/TV-
98:007.
Marc
h
12,
1998.
In
ternal
pap
er.
[Ro82]
Ev
erett
Rogers.
Diussion
of
Inno
v
ations.
F
ree
Press,
Chicago,
1982.
[Ro85]
Anders
Ro
c
kstr
om.
An
In
tro
duction
to
the
C.C.I.T.T.
SDL.
T
elev
erk
ets
tryc
k
eri.
Sto
c
kholm.
1985
[Ro99]
T
on
y
Rogv
all
and
Claes
Wikstr
om.
Proto
col
Programming
in
Erlang
us-
ing
Binaries.
Fifth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm.
Septem
b
er
30,
1999.
[Sa96]
Dan
Sahlin.
The
Concurren
t
F
unctional
Programming
Language
Erlang
-
An
Ov
erview.
Joint
International
Confer
enc
e
and
Symp
osium
on
L
o
gic
Pr
o
gr
amming.
Bonn,
Septem
b
er
2-6,
1996.
[Sew]
Soft
w
are
Engineering
Researc
h
Cen
tre.
W
eb
site
http://www.serc.
rm
it.
ed
u.a
u
[Si96]
Jon
Siegel.
CORBA.
F
undamen
tals
and
Programming.
John
Wiley
and
Sons
Inc.
1996.
[Siw]
Sw
edish
Institute
of
Computer
Science.
W
eb
site
http://www.sics.
se
[Sk86]
Roger
Sk
agerw
all
and
Carl
Wilhelm
W
elin.
Design
of
an
Exp
ert
Sys-
tem
and
Man-Mac
hine
In
terface
for
Op
eration
and
Main
tenance
of
AXE
T
elephone
Exc
hanges.
International
Seminar
on
Digital
Communic
ations.
Z

uric
h,
Marc
h
11-13,
1986.
[Sm83]
C.
H.
Smedema,
P
.
Medema
and
M.
Boasson.
The
Programming
Lan-
guages
P
ascal,
Mo
dula,
CHILL
and
Ada.
Pren
tice-Hall,
1983,
ISBN
0-13-
729756-4.
[Sm00a]
Johan
Smitt.
USA
n
asta
f
or
uppstic
k
are.
Dagens
Nyheter,
F
ebruary
20,
2000.
[Sm00b]
Johan
Smitt.
Miljardklipp
f
or
Bluetail.
Dagens
Nyheter,
August
29,
2000.
[Sm
w]
Sendmail,
Inc.
W
eb
site
http://www.sendma
il.
co
m
[So
w]
SoftLab
AB.
W
eb
site
http://softlab.er
ics
so
n.s
e/
[St90]
D.
Steedman.
Abstract
Syn
tax
Notation
One
(ASN.1)
T
utorial
and
Ref-
erence.
T
ec
hnology
Appraisals,
1990.
[St91]
Bjarne
Stroustrup.
The
C++
Programming
Language.
Addison-W
esley
,
1991.
[St99a]
William
Stallings.
SNMP
,
SNMPv2,
SNMPv3,
and
RMON
1
and
2.
Addison-W
esley
,
1999.
[St99b]
F
redrik
Str
om.
Use
of
Erlang/OTP
in
the
Brainp
o
ol
M/3
Comm
unica-
tion
System.
Fifth
International
Erlang/OTP
User
Confer
enc
e.
Sto
c
kholm,
Septem
b
er
30,
1999.

66
BIBLIOGRAPHY
[Th95]
Simon
Thompson.
Miranda.
The
Craft
of
F
unctional
Programming.
Addison-W
esley
,
1995.
[T
o97]
Sev
ed
T
orstendahl.
Op
en
T
elecom
Platform.
Ericsson
R
eview,
no
1,
1997.
[T
yw]
Erlang
T
yp
e
System.
W
eb
site
http://www.erics
so
n.s
e/
csl
ab
/~
tho
ma
s/t
yp
es.
sh
tm
l
[T

a00]
Jan
T

angring.
G

a
f
ore
i
k
on
till
w
ebbplatsen.
Datateknik
3.0,
no
3,
2000.
[V
ew]
V
erication
of
Erlang
Programs.
W
eb
site
http://www.sics.s
e/
fdt
/E
rla
ng
[Vi93]
Rob
ert
Virding.
Erlang.
F
OR
TE
-
Sixth
International
Confer
enc
e
on
F
ormal
Description
T
e
chniques.
Boston,
Octob
er
26-29,
1993.
[Vi95]
Rob
ert
Virding.
A
Garbage
Collector
for
the
Concurren
t
Real-Time
Lan-
guage
Erlang.
International
Workshop
on
Memory
Management.
Kinross,
Scotland,
Septem
b
er
27-29,
1995.
[W
a95a]
Anders
W
allerius.
Ericsson
ger
upp
fram
tidens
telen
at.
Ny
T
eknik/T
eknisk
Tidskrift,
no
50-52,
1995.
[W
a95b]
Anders
W
allerius.
Programmeringen
blev
f
or
sv

ar.
Ny
T
eknik/T
eknisk
Tidskrift,
no
50-52,
1995.
[W
a98a]
Jane
W
alerud.
The
Hidden
Asset
at
CeBit.
Erlang/OTP
b
ehind
man
y
Successes
at
the
Hanno
v
er
T
rade
F
air.
Erlang/OTP
News,
CeBit
Sp
ecial,
April,
1998.
[W
a98b]
Jane
W
alerud.
Professional
Mobile
Radio
o
v
er
GSM.
The
Nin
th
Erlang
based
System
at
CeBit.
Erlang/OTP
News,
Ma
y
,
1998.
[W
a98c]
Jane
W
alerud.
F
rom
Idea
to
Realit
y
in
Six
Mon
ths.
Erlang/OTP
News,
Septem
b
er,
1998.
[W
a98d]
Philip
W
adler.
Wh
y
No
One
Uses
F
unctional
Languages.
SIGPLAN
Notic
es
-
F
unctional
Pr
o
gr
amming
Column.
August
1998,
pp
23-27.
[W
a99]
Philip
W
adler.
The
Next
700
Markup
Languages.
Se
c
ond
Confer
enc
e
on
Domain-Sp
e
cic
L
anguages.
In
vited
pap
er.
Austin,
Octob
er
3-5,
1999.
[W
e81]
Ric
hard
L.
W
exelblat,
editor.
History
of
Programming
Languages.
Aca-
demic
Press
Inc.
1981,
ISBN
0-12-745040-8.
[W
e83]
Carl
Wilhelm
W
elin.
The
F
rames
System.
LME/XT/DU
83
159,
1983,
In
ternal
pap
er.
[W
e95]
Bruce
F.
W
ebster.
Pitfalls
of
Ob
ject-Orien
ted
Dev
elopmen
t.
M&T
Bo
oks,
1995.
[Whp]
Op
en-source
Erlang
-
White
P
ap
er.
W
eb
site
http://www.erlang
.o
rg/
wh
ite
paper.html

BIBLIOGRAPHY
67
[Wi76]
Niklaus
Wirth.
Mo
dula:
A
Language
for
Mo
dular
Multiprogramming.
Eidgen
ossisc
he
T
ec
hnisc
he
Ho
c
hsc
h
ule.
Z

uric
h,
1976.
[Wi81]
P
atric
k
H.
Winston
and
Berthold
K.
P
.
Horn.
LISP
.
Addison-W
esley
Publishing
Compan
y
.
1981.
[Wi87]

Ak
e
Wikstr
om.
F
unctional
Programming
Using
Standard
ML.
Pren
tice-
Hall,
1987.
[Wi92]
Claes
Wikstr
om.
Pro
cessing
ASN.1
Sp
ecications
in
a
Declarativ
e
Lan-
guage.
Softwar
e
Engine
ering
for
T
ele
c
ommunic
ation
Systems
and
Servic
es.
Florence,
Marc
h
30-April
1,
1992.
[Wi94]
Claes
Wikstr
om.
Distributed
Programming
in
Erlang.
First
Interna-
tional
Symp
osium
on
Par
al
lel
Symb
olic
Computation.
Linz,
Septem
b
er
26-
28,
1994.
[Wi95]
Martin
Wikb
org.
Comparing
Erlang
and
SDL/SDT
for
Soft
w
are
Dev
el-
opmen
t.
UU/DoCS,
Master's
Thesis,
1995.
[Wi96]
Claes
Wikstr
om.
Implemen
ting
Distributed
Real-time
Con
trol
Systems
in
a
F
unctional
Language.
IEEE
Workshop
on
Par
al
lel
and
Distribute
d
R
e
al-Time
Systems.
Honolulu,
April
15-16,
1996.
[Wi98a]
Ulf
Wiger.
Ericsson
A
TM
Switc
h
AXD
301
-
A
New
W
a
y
to
Design
Systems.
Erlang/OTP
News,
April,
1998.
[Wi98b]
Mik
e
Williams.
Erlang/OTP
Economics.
ETX/DN/S-98:353,
Ma
y
25,
1989.
In
ternal
pap
er.
[W
o98]
Geo
W
ong.
Con
tin
uous
System
Monitoring.
Ph.D.
Thesis
under
w
a
y
.
RMIT,
No
v
em
b
er
1998.
[W
re]
Wind
Riv
er
Systems
Erlang
Home
P
age.
W
eb
site
http://www.wrs.c
om
/pr
od
uct
s/
ht
ml/
er
lan
g.
htm
l
[W
rw]
Wind
Riv
er
Systems.
W
eb
site
http://www.wrs.co
m
[Xm
w]
The
XML
Industry
P
ortal.
W
eb
site
http://www.xml.o
rg
[Y
o92]
Edw
ard
Y
ourdon.
Decline
and
F
all
of
the
American
Programmer.
Y
our-
don
Press,
PTR
Pren
tice
Hall,
1992.
[

Od93]
Kerstin

Odling.
New
T
ec
hnology
for
Protot
yping
New
Services.
Ericsson
R
eview,
no
2,
1993.

68
BIBLIOGRAPHY
App
endix
1:
Master's
Theses
and
Studen
ts'
Pro
jects
The
follo
wing
is
a
list
of
theses
and
pro
jects
whic
h
ha
v
e
either
con
tributed
to
the
Erlang
system
or
utilized
it
to
implemen
t
applications
and
systems.

P-A
Eriksson
and
J
Tjernlund.
Erlang
o
c
h
realtidsk
on
trollerad
j
arn
v
ag.
T
eknisk
a
H
ogsk
olan,
Lule

a,
1990.

Martin
Sk
old.
Distributed
Real
Time
Databases.
LiTH/ID
A,
1990.

Adam
Aquilon.
Automatic
Co
de
Generation
from
Sequence
Charts.
KTH/EIT,
1991.

Rudolf
Hers

en.
Sequence
Chart
Editor.
KTH/EIT,
1991.

J
orgen
Bergstedt
and
Thomas
P
ersson.
In
telligen
t
Net
w
ork.
T
eknisk
a
H
ogsk
olan,
Lule

a,
1991.

Distorsion.
Studen
t
pro
ject
with
17
participan
ts.
UU/DoCS,
1991.
Also
as
[Di91].

Lennart

Ohman.
F
rampro
v
o
cering
a
v
fel
i
programk
o
d.
UU/DoCS,
1992.

Anders
Dahlin
and
P
eter
Jansson.
SUN
Con
trolled
T
elephone.
UU/DoCS,
1992.

Klas
Mik
aelsson
and
Henrik
F
orsgren.
Demonstrationssystem
f
or
telefoni
implemen
terat
i
Erlang.
UU/DoCS,
1992.

P
atric
Jansson
and
Bj
orn
Axelsson.
Direktledningssignalsystem
f
or
en
MD
110
v
axel.
UU/DoCS,
1992.

Bj
orn
Bergqvist.
T
estmilj
o
f
or
accessignalering.
KTH/EIT,
1992.

Joakim
Greb
en
o
and
Niklas
Han
b
erger.
An
Ob
ject
Orien
ted
Call
Mo
del
(OOCM).
UU/DoCS,
1993.

Magn
us
H
oglund.
Distributed
T
elephon
y
with
Erlang.
LiTH/ID
A,
1993.

Li
W
ei.
Gatew
a
y
b
et
w
een
P
ac
k
et
and
Switc
hed
Net
w
orks
for
Sp
eec
h
Com-
m
unication.
KTH/EIT,
1994.

Lars
Bj
orup.
The
Connection
Mo
del
Implemen
ted
in
Erlang.
LiTH/ID
A,
1994.

Johan
Th
ureson.
Q.93B
T
est
T
o
ol.
KTH/EIT,
1994.

Beshar
Zudh
y
.
Erlang
P
ort
to
the
P
arsytec
MIMD
P
arallel
Platform.
LiTH/ID
A,
1994.

Andreas
Ermedahl.
Discrete
Ev
en
t
Sim
ulation
in
Erlang.
UU/CSD,
1994.

Ali
Imitiaz
Shah.
Design
and
Implemen
tation
of
ET-155
Device
Pro
cessor
Soft
w
are.
KTH/EIT,
1994.

Jan-Erik
Thomasson.
Han
tering
a
v
telefonisystem
med
hj
alp
a
v
Erlang.
KTH/NAD
A,
1994.

BIBLIOGRAPHY
69

T
obias
Lindgren.
An
Erlang
In
terface
to
SQL.
LiTH/ID
A,
1994.

Anders
F
rank
and
Ola
Sam
uelsson.
A
Graphical
User
In
terface
for
Erlang.
UU/CSD,
1994.

Sim94
-
A
Concurren
t
Sim
ulator
for
Plan-driv
en
T
ro
ops.
Studen
t
pro
ject
with
ab
out
27
participan
ts.
UU/UPMAIL
T
ec
hnical
Rep
ort
98,
F
ebru-
ary
15,
1995.
ISSN
0283-359X.

Martin
Bj
orklund
and
Klas
Eriksson.
A
F
ramew
ork
for
SNMPv2
in
Er-
lang.
KTH/NAD
A,
1995.
Also
as
[Bj95].

Ken
t
Engstr
om.
P
arallel
Erlang.
LiTH/ID
A,
1995.

Sam
uel
T
ronje.
Pro
cess-based
Sim
ulation
of
In
teractiv
e
Agen
ts
in
a
Dy-
namic
T
errain.
UU/CSD,
1995.

Greger
Ottosson.
An
Extension
of
Erlang
with
Finite
Domain
Constrain
ts.
UU/CSD,
1995.

Martin
Wikb
org.
Comparing
Erlang
and
SDL/SDT
for
Soft
w
are
Dev
el-
opmen
t.
UU/DoCS,
1995.
Also
as
[Wi95
].

Johan
Agat
and
Lennart
Dahlstr
om.
En
unders
okning
a
v
tv

a
deklarativ
a
programspr

ak.
CTH/ID
V,
1995.

T
omas
Aronsson
and
Johan
Grafstr
om.
A
Comparison
b
et
w
een
Erlang
and
C++
for
Implemen
tation
of
T
elecom
Applications.
LiTH/ID
A,
1995.

Plan95:
A
Distributed
Planning
System.
UU/UPMAIL
T
ec
hnical
Rep
ort
122,
1996.

Niklas
Kaltea.
A
Sp
ecication
Language
for
In
telligen
t
Agen
ts.
UU/CSD,
1996.

Johan
Carleson.
Industriella
Erfarenheter
a
v
Erlang.
LiTH/ID
A,
1996.

Jian-Liang
Cai.
Implemen
tation
of
an
Ob
ject-Orien
ted
DBMS
Using
the
Erlang
Programming
Language.
RMIT,
1996.

Kristina
Sirh
ub
er.
YERL
-
A
Literate
Do
cumen
ting
T
o
ol
and
a
Program
Dev
elopmen
t
En
vironmen
t
for
Erlang.
UU/DoCS,
1996.

P
eter
Molin
and
F
redrik
Str
om.
A
GUI
Builder
for
Erlang/GS.
UU/CSD,
1996.

Anders
Lindgren.
A
Protot
yp
e
of
a
Soft
T
yp
e
System
for
Erlang.
UU/CSD,
1996.

Erik
Johansson
and
Christer
Jonsson.
Nativ
e
Co
de
Compilation
for
Er-
lang.
UU/CSD,
1996.

Babbis
Xagorarakis.
Ja
v
a
RMI
In
terface
to
Erlang,
Implemen
tation
o
c
h
Utv
ardering.
UU/CSD,
1997.

Ric
hard
Carlsson.
T
o
w
ards
a
Deadlo
c
k
Analysis
for
Erlang
Programs.
UU/CSD,
1997.

70
BIBLIOGRAPHY

Gustaf
Naeser.
Safe
Erlang.
UU/CSD,
1997.

Hans
Danielsson
and
Ken
t
Olsson.
Ho
w
to
Measure
Reliabilit
y
in
an
Erlang
System.
L
TH/DCS,
1998.

P
ekk
a
Hedqvist.
A
P
arallel
and
Multi-threaded
Erlang
Implemen
tation.
UU/CSD,
1998.
Also
as
[He98
].

Ronn
y
Andersson.
SQL
Compiler
F
or
the
Mnesia
DBMS.
CTH,
1998.

Johanna
Isaksson
and
Elinor
Sturesson.
Design
Guidelines
for
Erlang.
CTH
and
RMIT,
1999.

Hans
Danielsson
and
Ken
t
Olsson.
Ho
w
to
Measure
Reliabilit
y
in
an
Erlang
System.
L
TH
and
RMIT,
1999.

Clara
Benac-Earle.
Sym
b
olic
Program
Execution
using
the
Erlang
V
eri-
cation
T
o
ol.
UU/CSD,
2000.

Raimo
Nisk
anen.
In
tegration
of
Erlang
and
T
elORB.
KTH/IT,
2000.

Ric
k
ard
Green.
Enhancing
Securit
y
in
Distributed
Erlang
b
y
Access
Con-
trol.
KTH/IT,
2000.

Bertil
Karlsson.
Secure
Distributed
Comm
unication
in
SafeErlang.
KTH/IT,
2000.

P
eter
Andersson
and
Markus
Kvisth.
A
General
Proto
col
Stac
k
In
terface
in
Erlang.
UU/CSD,
2000.

BIBLIOGRAPHY
71
App
endix
2:
User
Conference,
Septem
b
er
30,
1999
P
ap
ers
presen
ted
at
the
Fifth
International
Erlang/OTP
User
Confer
enc
e.
W
eb
site
http://www.erlang
.s
e/e
uc
/9
9

Hans
Nahringbauer,
T
elia
Promotor
AB.
T
elia
Call
Guide.
Also
as
[Na99
].

F
redrik
Str
om,
Brainp
o
ol
AB.
Use
of
Erlang/OTP
in
the
Brainp
o
ol
M/3
Comm
unication
System.
Also
as
[St99b].

Marc
F
eeley
,
P
atric
k
Pic
h

e,
Sylv
ain
Beaulieu,
Martin
Larosse,
and
Mario
Latendresse,
Univ
ersit

e
de
Mon
tr

eal.
Status
Rep
ort
on
the
ETOS
Erlang
to
Sc
heme
Compiler.
Also
as
[F
e99].

H

ak
an
Millroth,
Bluetail
AB.
Mail
Robustier
Pro
duct
based
on
Erlang/OTP
.

P
er
Bergqvist,
Ericsson
Radio
AB.
Hatc
het.

Johan
Blom,
Ericsson
Wireless
In
ternet
AB.
A
Mo
dular
W
AP
Reference
Stac
k
Proto
col
Implemen
tation.

Hans
Nilsson,
Ericsson
Utv
ec
klings
AB.
An
Exp
erimen
tal
SIP
Implemen-
tation
in
Erlang.

Magn
us
Karlson,
Ericsson
Utv
ec
klings
AB.
Coming
Releases
of
Erlang/OTP
.
Also
as
[Ka99
].

Maurice
Castro,
SER
C.
T
o
w
ards
an
Ev
en
t
Mo
delling
Language.

T
on
y
Rogv
all
and
Claes
Wikstr
om,
Bluetail
AB.
Proto
col
Programming
in
Erlang
using
Binaries.
Also
as
[Ro99
].

72
BIBLIOGRAPHY
App
endix
3:
User
Conference,
Octob
er
3,
2000
P
ap
ers
and
demos
presen
ted
at
the
Sixth
International
Erlang/OTP
User
Confer
enc
e.
W
eb
site
http://www.erla
ng.
se
/e
uc/
00

Sean
Hinde,
one2one.
Use
of
Erlang/OTP
as
a
Service
Creation
T
o
ol
for
IN
Services.
Also
as
[Hi00].

Scott
Lystig
F
ritc
hie,
Jim
Larson,
Nic
k
Christenson,
Debi
Jones,
and
Lennart

Ohman.
Sendmail
Meets
Erlang:
Exp
eriences
Using
Erlang
for
Email
Applications.
Also
as
[F
r00
].

P
er
Bergqvist,
CellP
oin
t.
MP
o
w
ered
b
y
Erlang.

Bengt
Tillman,
Ericsson
Radio
Systems
AB.
NETSim
-
Six
Y
ears
with
Erlang.

Mik
ael
P
ettersson,
Uppsala
Univ
ersit
y
.
A
High
P
erformance
Erlang
Sys-
tem.

Rob
ert
Tj
arnstr
om
and
P
eter
Lundell,
Ericsson
T
elecom.
ECOMP
-
an
Erlang
Pro
cessor.

Ric
hard
A.
O'Keefe,
Otago
Univ
ersit
y
.
An
Erlang
DTD.

Ulf
Wiger,
Ericsson
T
elecom.
XMErl
-
In
terfacing
XML
and
Erlang.

Mic
k
a

el
R

emond,
IDEALX.
XML
and
Erlang:
Building
a
P
o
w
erful
Data
Managemen
t
T
o
ol.

Ric
hard
Carlsson,
Uppsala
Univ
ersit
y
.
Extending
Erlang
with
structured
Mo
dule
P
ac
k
ages.

Kenneth
Lundin,
OTP
Pro
duct
Unit.
Highligh
ts
from
Erlang
5.0
/
OTP
R7B.

Jak
ob
Cederlund,
OTP
Pro
duct
Unit.
COMET
-
An
Erlang-to-COM
P
ort.

P
atrik
Nyblom,
OTP
Pro
duct
Unit.
The
Bit
Syn
tax
-
The
Released
V
er-
sion.
Also
as
[Ny00
].

Lars-

Ak
e
F
redlund,
SICS.
A
T
o
ol
for
V
erifying
Soft
w
are
W
ritten
in
Erlang.

Miguel
Barreiro,
Victor
M.
Gulias,
and
Juan
J.
Sanc
hez,
Univ
ersidade
da
Coru
~
na.
A
Monitoring
and
Instrumen
tation
T
o
ol
Dev
elop
ed
in
Erlang.

