
The Boolean Operators: not, and, or
X
Y
not X
X and Y
X or Y
0
0
1
0
0
0
1
1
0
1
1
0
0
0
1
1
1
0
1
1
X
Y
X or Y
X
Y
X and Y
open
False
closed
True
True
False
True
False
True
False

De Morgan's Theorem
not(A or B) == (not A) and (not B)
not(A and B) == (not A) or (not B)
Commutativity
A or (B or C) == (A or B) or C
A and (B and C) == (A and B) and C
A or B == B or A
A and B == B and A
Associativity
not(x < y) 
x >= y
not(x > y) ==
x <= y
Miscellaneous
not(x <= y) == x > y
not(x >= y) ==
x < y
A or B or C
A and B and C
→(A or B) or C
→(A and B) and C
left-to-right evaluation
not(not A) == A
Distributivity
A and (B or C) == (A and B) or (A and C)
A or (B and C) == (A or B) and (A or C)

Operator Precedence
or
and
not
highest
lowest
precedence
True or True and False
→True or False
→True
(True or True) and False
→True and False
→False
When in doubt, or to be absolutely sure, use parentheses!
Also, use parentheses to make your code more human readable!
a < b or a > c and not x or y
(a < b) or ((a > c) and (not x)) or y
< > <= >= == != in is
()
True or (True and False)

Short-Circuit Evaluation
X
Y
X or Y
0
0
0
0
1
1
1
0
1
1
1
1
if X is True, then X or Y will be True no matter the value of Y
So, X or Y will return True without evaluating Y if X is True
X
Y
X and Y
0
0
0
0
1
0
1
0
0
1
1
1
if X is False, then X and Y will be False no matter the value of Y
So, X and Y will return False without evaluating Y if X is False
X
Y
X or Y
X
Y
X and Y
True
Y
True
False
Y
False

Example
Scenario:
There is some data feed that lists a stock symbol, and some financial data.
Your job is to monitor this feed, looking for specific stock symbols defined in some watch 
list, and react only if the current stock price is above some threshold. Getting the current 
stock price has an associated cost.
if symbol in watch_list:
if price(symbol) > threshold:
# do something
If Boolean expressions did not implement short-circuiting, you would probably write:
since calling the price() method has a cost, 
you would only want to call it if the symbol was 
on your watch list
But because of short-circuit evaluation you could write this equivalently as:
if symbol in watch_list and price(symbol) > threshold:
# do something

Example
name is a string returned from a nullable text field in a database
perform some action if the first character of name is a digit (0-9)
if name and name[0] in string.digits:
# do something
because of short-circuiting and truth values
if name is falsy (either None or an empty string) 
then 
name[0] in string.digits
is not evaluated
this code will break if name is None or an 
empty string
if name[0] in string.digits:
# do something
null →None
''
'abc'

Code

