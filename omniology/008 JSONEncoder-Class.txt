© 2019 MathByte Academy

dump
In the previous videos we looked at the dump and dumps functions
Beyond the default argument, dump has many other arguments that allow us to control serialization
skipkeys
bool
default is False
à if dictionary keys are not basic types 
(string, int, etc) and skipkeys is set to 
False we will get a TypeError, otherwise it 
just skips the key
indent
int
default is None
à useful for human readability
separators
tuple
defaults to (', ', ': ')
à customizes how the JSON is rendered
sort_keys
boolean
default is False
à if True, dictionary keys 
will be sorted
and more…
cls
© 2019 MathByte Academy

The JSONEncoder Class
Python uses an instance of the JSONEncoder class in the json module to serialize data
The JSONEncoder class shares many arguments with the dump / dumps functions
default
skipkeys
sort_keys
indent
separators
…
The dump / dumps functions have a cls argument
allows us to specify our own version of JSONEncoder
© 2019 MathByte Academy

Why use JSONEncoder at all?
If dump has all the same arguments as JSONEncoder, why use it at all?
To remain consistent in our app, every time we call dump we need to use the same argument 
values
Easy to make a mistake, or forget to specify an argument
à instead use a custom JSONEncoder
and just remember to specify it via the cls argument 
of dump / dumps
© 2019 MathByte Academy

How to create a custom JSONEncoder
à subclass JSONEncoder
à override the default method
à handle what we want to handle ourselves
à otherwise delegate back to the parent class
à custom initialize parent class if we want to
class CustomEncoder(JSONEncoder):
def __init__(self):
super().__init__(skipkeys=True, allow_nan=False, 
indent='---', separators=('', ' = '))
def default(self, arg):
if isinstance(arg, datetime):
return arg.isoformat()
else:
return super().default(self, arg)
inherit from JSONEncoder
custom init parent
override default method
handle what we want to handle
(return the string serialization of arg)
otherwise delegate 
back to parent
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

