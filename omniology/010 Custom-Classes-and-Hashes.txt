© 2019 MathByte Academy

Quick Review
how Python inserts a key/value item in a dictionary (simplified)
hash(key)
à mod dictionary size (allocated)
à start index in hash table (sequence of slots)
à generate probe sequence (sequence of valid indices)
à iterate over probe sequence
à is the slot at that index empty?
yes
à store the new item there (hash, key, value)
no
à hash collision
à continue iteration to 
look for an empty slot
à index
continue loop until 
an empty slot is 
found to store the 
item
more hash collisions à more inefficient
© 2019 MathByte Academy

Quick Review
how Python finds a key in a dictionary (simplified)
hash(key)
à mod dictionary size (allocated)
à start index in hash table (sequence of slots)
à generate probe sequence (sequence of valid indices)
à loop over probe sequence
à is slot empty?
yes
no
à key does not exist in dictionary
à are hashes equal and are keys equal (==)?
yes
à found the key
no
(caused by hash collision upon insertion/resizing)
à continue iteration to find key or empty slot
loop until 
found or 
empty slot
more hash collisions à more inefficient
predictable hashes à subject to DOS attacks
little more complex 
because of 
deletions
© 2019 MathByte Academy

à hash(key) when inserting item
à probe sequence remains the same
so hash of key cannot change after storing in dict
Quick Review
In order for this algorithm to work:
must equal hash(key) when retrieving item
otherwise we're starting our search in the wrong place!
à Python controls that, not us
© 2019 MathByte Academy

Object Hashes
An object hash in Python must satisfy the following
à must be an integer
à if a == b à True, then hash(a) == hash(b) à True
Why is this important?
Note: we do not require that
if hash(a) == hash(b) then a == b
i.e. two objects that are not equal, 
can have the same hash
à hash collision
Let's say we have these two tuples:
t1 = (1, 2)
t2 = (1, 2)
à no guarantee they will have the same id
à but they are equal
t1 == t2 à True
even if t1 is t2 à False
d = {t1: 'python'}
d[t1]
à 'python'
d[t2]
à 'python'
works because t1 == t2 and hash(t1) == hash(t2) 
à from dictionary's perspective t1 and t2 are 
the same key
© 2019 MathByte Academy

Custom Classes
class Person:
def __init__(self, name):
self.name = name
p1 = Person('john')
p2 = Person('john')
p1 == p2 à False
because p1 is p2 à False
By default, Python automatically makes custom objects such as the one above hashable
It uses the id to make a hash
à ids are integers and satisfy the hash rules
if p1 == p2 à True
then p1 is p2 à True
so id(p1) == id(p2) à True
so hash(p1) == hash(p2) à True
à hash rule is satisfied
By default, custom classes compare == if they have the 
same id (is)
© 2019 MathByte Academy

Great, but not always very useful…
class Person:
def __init__(self, name):
self.name = name
p1 = Person('john')
p2 = Person('john')
d = {p1: 78}
à OK, because p1 is hashable by default
p1 == p2 à False
hash(p1) == hash(p2) à False
d[p1] à 78
d[p2] à KeyError exception
This may not be what we want… 
In this case we want to consider p1 and p2 as equal
and be able to lookup the key using either instance
© 2019 MathByte Academy

So we need to define equality for our custom class
class Person:
def __init__(self, name):
self.name = name
def __eq__(self, other):
if isinstance(other, Person):
return self.name == other.name
else:
return False
p1 = Person('john')
p2 = Person('john')
p1 is p2 à False
p1 == p2 à True
What about the hashes?
hash(p1)
à TypeError: unhashable type: Person
Makes sense – if Python used the default hash based on id
p1 == p2 à True
but hash(p1) == hash(p2) à False
implement __eq__ à lose automatic id based hashing
© 2019 MathByte Academy

Defining hash for custom classes
__hash__ special method
hash(p1)
à looks for __hash__ method on p1
remember that __hash__ must return an integer
how do we indicate that the class is not hashable?
à set __hash__ attribute to None
__hash__ = None in class
à this is what happens when we define __eq__, but not __hash__
à we can however override this, by implementing the __hash__ method ourselves
remember the rules:
à __hash__ must return an integer
à if a == b à True then __hash__(a) == __hash__(b) à True
© 2019 MathByte Academy

Example
class Person:
def __init__(self, name):
self.name = name
def __eq__(self, other):
if isinstance(other, Person):
return self.name == other.name
else:
return False
def __hash__(self):
return hash(name)
p1 = Person('john')
p2 = Person('john')
d = {p1: 78}
d[p1] à 78
d[p2] à 78
p1 is p2 à False
p1 == p2 à True
hash(p1) == hash(p2) à True
And so now:
© 2019 MathByte Academy

Calling hash(p)…
hash(p)
In reality:
à looks for p.__hash__
à None means not hashable
à otherwise, calls p.__hash__()
à truncates returned integer to 32-bit, 64-bit (depends on 
your specific Python)
import sys
sys.hash_info.width
à 64
how does Python truncate to that number of bits?
p.__hash__() % sys.hash_info.modulus
sys.hash_info.modulus
à 2305843009213693951
hash(p) à p.__hash__() % sys.hash_info.modulus
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

