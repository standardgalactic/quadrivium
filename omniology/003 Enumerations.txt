©2019 MathByte Academy

Python Enumerations
à PEP 435
à Python 3.4
à enum module
à Enum type
à specialized enumerations: IntEnum, Flag, and IntFlag
Python 3.6
à enumerations are created by subclassing Enum
©2019 MathByte Academy

Terminology
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
à Color is called an enumeration
à Color.RED is called an enumeration member
à members have associated values
à the type of a member is the enumeration it belongs to
©2019 MathByte Academy

The basics…
type(Color.RED)
à True
str(Color.RED)
à 'Color.RED'
à '<Color.RED: 1>'
repr(Color.RED)
Color.RED.name
à 'RED'
Color.RED.value
à 1
isinstance(Color.RED, Color)
à Color
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
©2019 MathByte Academy

Equality and Membership
member equality is done using identity
à is
(but == works too)
membership uses in
Color.GREEN in Color
à True
Color.RED is Color.RED
à True
Color.RED is Color.BLUE
à False
à note that member and it's associated value are not equal!
Color.RED == 1
à False
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
©2019 MathByte Academy

Members are hashable
Enumeration members are always hashable
à can be used as keys in dictionaries
à can be used as elements of a set
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
pixel_color = {
Color.RED: 100,
Color.GREEN: 25,
Color.BLUE: 255
}
©2019 MathByte Academy

Programmatic Access to Members
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
can reference a member this way:
Color.RED
how to "get" a member using:
à value
à string of the name
(e.g. 1)
(e.g. 'RED')
à to get a member by value
enumerations are callable
Color(2)
à Color.GREEN
à to get a member by name
Color['GREEN']
à Color.GREEN
Color(2) is Color['GREEN'] à True
enumerations implement __getitem__ method
©2019 MathByte Academy

Enumerating Members
class Color(Enum):
RED = 1
GREEN = 2
BLUE = 3
à enumerations are iterables
list(Color) à [Color.RED, Color.GREEN, Color.BLUE]
à definition order is preserved
class Color(Enum):
GREEN = 2
BLUE = 3
RED = 1
list(Color) à [Color.GREEN, Color.BLUE, Color.RED]
à has nothing to do with member value
à Enumerations have a __members__ property
à returns a mapping proxy (immutable dict)
à keys are the names (as strings), and values are the values©2019 MathByte Academy

Constant Members and Constant Values
Once an enumeration has been declared:
à member list is immutable
(cannot add or remove members)
à member values are immutable
à cannot be subclassed (extended via inheritance)
à unless it contains no members!
(we'll come back to that later)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

