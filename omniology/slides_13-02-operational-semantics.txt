Alex Aiken 
Compilers 
Operational Semantics 

Alex Aiken 
Operational Semantics 
 
• Once again we introduce a formal notation 
 
• Logical rules of inference, as in type checking 

Alex Aiken 
Operational Semantics 
• Recall the typing judgment 
                  Context d e : C 
 In the given context, expression e has type C 
 
• We use something similar for evaluation 
                 Context d e : v 
 In the given context, expression e evaluates to value v 

Alex Aiken 
Operational Semantics 
Context d e1 : 5 
Context d e2 : 7 
Context d e1 + e2 : 12 

Alex Aiken 
Operational Semantics 
• Consider the evaluation of y  x + 1 
 
• We track variables and their values with: 
– An environment : where in memory a variable is  
– A store : what is in the memory 

Alex Aiken 
Operational Semantics 
• A variable environment maps variables to locations  
– Keeps track of which variables are in scope 
– Tells us where those variables are 
 
E = [a : l1, b : l2] 
 

Alex Aiken 
Operational Semantics 
• A store maps memory locations to values 
S = [l1  5, l2  7] 
 
 
• S’ = S[12/l1] defines a store S’ such that   
S’(l1) = 12    and    S’(l) = S(l) if l  l1 

Alex Aiken 
Operational Semantics 
• Cool values are objects 
– All objects are instances of some class  
 
• X(a1 = l1, …, an = ln) is a Cool object where 
– X is the class of the object 
– ai are the attributes (including inherited ones) 
– li is the location where the value of ai is stored 

Alex Aiken 
Operational Semantics 
• Special cases (classes without attributes) 
Int(5)                           the integer 5 
Bool(true)                  the boolean true 
String(4, “Cool”)       the string “Cool” of length 4 
 
• There is a special value void of type Object 
– No operations can be performed on it 
– Except for the test isvoid 
– Concrete implementations might use NULL here 
 

Alex Aiken 
Operational Semantics 
• The evaluation judgment is 
                   so, E, S d e : v, S’ 
   
– Given so the current value of self 
– And E the current variable environment 
– And S the current store 
– If the evaluation of e terminates then 
– The value of e is v 
– And the new store is S’ 
 

Alex Aiken 
Operational Semantics 
• “Result” of evaluation is a value and a store 
– New store models the side-effects 
 
• Some things don’t change 
– The variable environment  
– The value of self 
– The operational semantics allows for non-
terminating evaluations 

