Alex Aiken 
Compilers 
Left Recursion 

Alex Aiken 
Left Recursion 
• Consider a production S  S a 
          bool S1() { return S() && term(a); }  
          bool S() { return  S1(); } 
 
• S() goes into an infinite loop 
 
• A left-recursive grammar has a non-terminal S 
           S + S   for some  
• Recursive descent does not work in such cases 
 

Alex Aiken 
Left Recursion 
• Consider the left-recursive grammar 
                       S  S  |  
 
• S generates all strings starting with a  and followed by 
any number of ’s 
 
• Can rewrite using right-recursion 
                 S   S’ 
                 S’   S’ |  

Alex Aiken 
Left Recursion 
• In general 
                  S  S 1 | … | S n | 1 | … | m 
• All strings derived from S start with one of 1,…,m 
and continue with several instances of 1,…,n  
• Rewrite as 
             S  1 S’ | … | m S’ 
             S’  1 S’ | … | n S’ |   

Alex Aiken 
Left Recursion 
• The grammar  
         S  A  |  
         A  S  
 is also left-recursive because 
            S + S   
 
• This left-recursion can also be eliminated 
 
• See Dragon Book for general algorithm 

Left Recursion 
 
Choose the grammar that correctly 
eliminates left recursion from the given grammar: 
E    E + id | E + (E) 
 
|  id | (E)  
E    id + E | E + T | T 
T    id | (E) 
E    E’ + T | T 
E’   id | (E) 
T    id | (E) 
E    TE’ 
E’   + TE’ |  
T    id | (E) 
E  E + T | T 
T    id | (E) 

Alex Aiken 
Left Recursion 
• Recursive descent 
– Simple and general parsing strategy 
– Left-recursion must be eliminated first 
– … but that can be done automatically 
 
• Used in production compilers 
– E.g., gcc 

