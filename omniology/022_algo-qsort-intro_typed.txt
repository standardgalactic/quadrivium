QuickSort	  
Overview	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
QuickSort	  

Tim	  Roughgarden	  
The	  Sor>ng	  Problem	  
Input	  :	  array	  of	  n	  numbers,	  unsorted	  
Output	  :	  Same	  numbers,	  sorted	  in	  increasing	  order	  
Assume	  :	  all	  array	  entries	  dis>nct.	  
Exercise	  :	  extend	  QuickSort	  to	  handle	  duplicate	  entries	  

Tim	  Roughgarden	  
Par>>oning	  Around	  a	  Pivot	  
Key	  Idea	  :	  par>>on	  array	  around	  a	  pivot	  element.	  
-­‐ Pick	  element	  of	  array	  
-­‐ Rearrange	  array	  so	  that	  
-­‐ LeJ	  of	  pivot	  =>	  less	  than	  pivot	  
-­‐ Right	  of	  pivot	  =>	  greater	  than	  pivot	  
Note	  :	  puts	  pivot	  in	  its	  “righOul	  posi>on”.	  
pivot	  
>	  pivot	  
<	  pivot	  

Tim	  Roughgarden	  
Two	  Cool	  Facts	  About	  Par>>on	  
1.  Linear	  O(n)	  >me,	  no	  extra	  memory
	  [see	  next	  video]	  
2.  Reduces	  problem	  size	  

Tim	  Roughgarden	  
QuickSort:	  High-­‐Level	  Descrip>on	  
[	  Hoare	  circa	  1961	  ]	  
QuickSort	  (array	  A,	  length	  n)	  
-­‐ If	  n=1	  	  	  return	  
-­‐ p	  =	  ChoosePivot(A,n)	  
-­‐ Par>>on	  A	  around	  p	  
-­‐ Recursively	  sort	  1st	  part	  
-­‐ Recursively	  sort	  2nd	  part	  
[	  currently	  unimplemented	  ]	  
1st	  part	  
2nd	  part	  

Tim	  Roughgarden	  
Outline	  of	  QuickSort	  Videos	  
•  The	  Par>>on	  subrou>ne	  
•  Correctness	  proof	  [op>onal]	  
•  Choosing	  a	  good	  pivot	  
•  Randomized	  QuickSort	  
•  Analysis	  
–  A	  Decomposi>on	  Principle	  
–  The	  Key	  Insight	  
–  Final	  Calcula>ons	  

