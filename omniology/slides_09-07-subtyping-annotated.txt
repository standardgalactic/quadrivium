Alex Aiken 
Compilers 
Subtyping 

Alex Aiken 
Subtyping 
Consider let with initialization: 
 
O ` e0: T0 
O[T0/x] ` e1: T1 
O ` let x:T0 e0 in e1 : T1 
 
[Let-Init] 

Alex Aiken 
Subtyping 
• Define a relation  on classes 
– X  X 
– X  Y if X inherits from Y 
– X  Z if X  Y and Y  Z 
 
O ` e0: T0 
O[T/x] ` e1: T1 
T0 T  
O ` let x:T e0 in e1 : T1 
 
 
[Let-Init] 

Alex Aiken 
Subtyping 
 
 
O(x) = T0 
O ` e1: T1 
T1 T0  
O ` x  e1 : T1 
[Assign] 

Alex Aiken 
Subtyping 
• Let OC(x) = T for all attributes x:T in class C 
 
OC(x) = T0 
OC ` e1: T1 
T1 T0  
OC  ` x:T0  e1; 
 
[Attr-Init] 

Alex Aiken 
Subtyping 
• Consider: 
if e0 then e1 else e2 fi 
 
• The result can be either e1 or e2 
 
• The type is either e1’s type of e2’s type 
 
• The best we can do is the smallest supertype larger 
than the type of e1 or e2 

Alex Aiken 
Subtyping 
• lub(X,Y), the least upper bound of X and Y, is Z if 
– X  Z  Y  Z 
Z is an upper bound 
 
– X  Z’  Y  Z’  Z  Z’ 
Z is least among upper bounds 
 
• In COOL, the least upper bound of two types is their 
least common ancestor in the inheritance tree 

Subtyping 
Class Object 
Class Bool inherits Object 
Class Point inherits Object 
Class Line inherits Object 
Class Shape inherits Object 
Class Quad inherits Shape 
Class Circle inherits Shape 
Class Rect inherits Quad 
Class Square inherits Rect 
 
 
lub(Point, Quad) = Object 
lub(Square, Rect) = Quad 
lub(Square, Rect) = Rect 
lub(Square, Circle) = Object 
Given the class definitions at right, which 
of the following least upper bound 
statements are true? 

Alex Aiken 
Subtyping 
 
 
O ` e0: Bool 
O ` e1: T1 
O ` e2: T2 
O ` if e0 then e1 else e2 fi: lub(T1,T2) 
 
 
[If-Then-Else] 

Alex Aiken 
Subtyping 
• The rule for case expressions takes a lub over all 
branches 
O ` e0: T0 
O[T1/x1] ` e1: T1’ 
. . . 
O[Tn/xn] ` en: Tn’ 
O ` case e0 of x1:T1  e1; …; xn:Tn  en; esac : lub(T1’,…,Tn’) 
 
 
 
[Case] 

