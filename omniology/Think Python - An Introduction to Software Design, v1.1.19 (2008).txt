Think Python
How to Think Like a Computer Scientist
Version 1.1.19


Think Python
How to Think Like a Computer Scientist
Version 1.1.19
Allen Downey
Green Tea Press
Needham, Massachusetts

Copyright © 2008 Allen Downey.
Printing history:
April 2002: First edition of How to Think Like a Computer Scientist.
August 2007: Major revision, changed title to How to Think Like a (Python) Programmer.
June 2008: Major revision, changed title to Think Python: How to Think Like a Computer Scientist.
Green Tea Press
9 Washburn Ave
Needham MA 02492
Permission is granted to copy, distribute, and/or modify this document under the terms of the GNU Free Doc-
umentation License, Version 1.1 or any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and with no Back-Cover Texts.
The GNU Free Documentation License is available from www.gnu.org or by writing to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
The original form of this book is LATEX source code. Compiling this LATEX source has the effect of generating
a device-independent representation of a textbook, which can be converted to other formats and printed.
The LATEX source for this book is available from http://www.thinkpython.com

Preface
The strange history of this book
In January 1999 I was preparing to teach an introductory programming class in Java. I had taught
it three times and I was getting frustrated. The failure rate in the class was too high and, even for
students who succeeded, the overall level of achievement was too low.
One of the problems I saw was the books. They were too big, with too much unnecessary detail about
Java, and not enough high-level guidance about how to program. And they all suffered from the trap
door effect: they would start out easy, proceed gradually, and then somewhere around Chapter 5 the
bottom would fall out. The students would get too much new material, too fast, and I would spend
the rest of the semester picking up the pieces.
Two weeks before the ﬁrst day of classes, I decided to write my own book. My goals were:
• Keep it short. It is better for students to read 10 pages than not read 50 pages.
• Be careful with vocabulary. I tried to minimize the jargon and deﬁne each term at ﬁrst use.
• Build gradually. To avoid trap doors, I took the most difﬁcult topics and split them into a
series of small steps.
• Focus on programming, not the programming language. I included the minimum useful subset
of Java and left out the rest.
I needed a title, so on a whim I chose How to Think Like a Computer Scientist.
My ﬁrst version was rough, but it worked. Students did the reading, and they understood enough
that I could spend class time on the hard topics, the interesting topics and (most important) letting
the students practice.
I released the book under the GNU Free Documentation License, which allows users to copy, modify,
and distribute the book.
What happened next is the cool part. Jeff Elkner, a high school teacher in Virginia, adopted my book
and translated it into Python. He sent me a copy of his translation, and I had the unusual experience
of learning Python by reading my own book.
Jeff and I revised the book, incorporated a case study by Chris Meyers, and in 2001 we released
How to Think Like a Computer Scientist: Learning with Python, also under the GNU Free Doc-
umentation License. As Green Tea Press, I published the book and started selling hard copies
through Amazon.com and college book stores. Other books from Green Tea Press are available at
greenteapress.com.

vi
Chapter 0. Preface
In 2003 I started teaching at Olin College and I got to teach Python for the ﬁrst time. The contrast
with Java was striking. Students struggled less, learned more, worked on more interesting projects,
and generally had a lot more fun.
Over the last ﬁve years I have continued to develop the book, correcting errors, improving some of
the examples and adding material, especially exercises. In 2008 I started work on a major revision—
at the same time, I was contacted by an editor at Cambridge University Press who was interested in
publishing the next edition. Good timing!
The result is this book, now with the less grandiose title Think Python. Some of the changes are:
• I added a section about debugging at the end of each chapter. These sections present general
techniques for ﬁnding and avoiding bugs, and warnings about Python pitfalls.
• I removed the material in the last few chapters about the implementation of lists and trees. I
still love those topics, but I thought they were incongruent with the rest of the book.
• I added more exercises, ranging from short tests of understanding to a few substantial projects.
• I added a series of case studies—longer examples with exercises, solutions, and discussion.
Some of them are based on Swampy, a suite of Python programs I wrote for use in my classes.
Swampy, code examples, and some solutions are available from thinkpython.com.
• I expanded the discussion of program development plans and basic design patterns.
• The use of Python is more idiomatic. The book is still about programming, not Python, but
now I think the book gets more leverage from the language.
I hope you enjoy working with this book, and that it helps you learn to program and think, at least a
little bit, like a computer scientist.
Allen B. Downey
Needham MA
Allen Downey is an Associate Professor of Computer Science at the Franklin W. Olin College of
Engineering.
Acknowledgements
First and most importantly, I thank Jeff Elkner, who translated my Java book into Python, which got
this project started and introduced me to what has turned out to be my favorite language.
I also thank Chris Meyers, who contributed several sections to How to Think Like a Computer
Scientist.
And I thank the Free Software Foundation for developing the GNU Free Documentation License,
which helped make my collaboration with Jeff and Chris possible.
I also thank the editors at Lulu who worked on How to Think Like a Computer Scientist.
I thank all the students who worked with earlier versions of this book and all the contributors (listed
below) who sent in corrections and suggestions.
And I thank my wife, Lisa, for her work on this book, and Green Tea Press, and everything else, too.

vii
Contributor List
More than 100 sharp-eyed and thoughtful readers have sent in suggestions and corrections over the
past few years. Their contributions, and enthusiasm for this project, have been a huge help.
If you have a suggestion or correction, please send email to feedback@thinkpython.com. If I
make a change based on your feedback, I will add you to the contributor list (unless you ask to be
omitted).
If you include at least part of the sentence the error appears in, that makes it easy for me to search.
Page and section numbers are ﬁne, too, but not quite as easy to work with. Thanks!
• Lloyd Hugh Allen sent in a correction to Section 8.4.
• Yvon Boulianne sent in a correction of a semantic error in Chapter 5.
• Fred Bremmer submitted a correction in Section 2.1.
• Jonah Cohen wrote the Perl scripts to convert the LaTeX source for this book into beautiful HTML.
• Michael Conlon sent in a grammar correction in Chapter 2 and an improvement in style in Chapter 1,
and he initiated discussion on the technical aspects of interpreters.
• Benoit Girard sent in a correction to a humorous mistake in Section 5.6.
• Courtney Gleason and Katherine Smith wrote horsebet.py, which was used as a case study in an earlier
version of the book. Their program can now be found on the website.
• Lee Harr submitted more corrections than we have room to list here, and indeed he should be listed as
one of the principal editors of the text.
• James Kaylin is a student using the text. He has submitted numerous corrections.
• David Kershaw ﬁxed the broken catTwice function in Section 3.10.
• Eddie Lam has sent in numerous corrections to Chapters 1, 2, and 3. He also ﬁxed the Makeﬁle so that
it creates an index the ﬁrst time it is run and helped us set up a versioning scheme.
• Man-Yong Lee sent in a correction to the example code in Section 2.4.
• David Mayo pointed out that the word “unconsciously” in Chapter 1 needed to be changed to “subcon-
sciously”.
• Chris McAloon sent in several corrections to Sections 3.9 and 3.10.
• Matthew J. Moelter has been a long-time contributor who sent in numerous corrections and suggestions
to the book.
• Simon Dicon Montford reported a missing function deﬁnition and several typos in Chapter 3. He also
found errors in the increment function in Chapter 13.
• John Ouzts corrected the deﬁnition of “return value” in Chapter 3.
• Kevin Parks sent in valuable comments and suggestions as to how to improve the distribution of the
book.
• David Pool sent in a typo in the glossary of Chapter 1, as well as kind words of encouragement.
• Michael Schmitt sent in a correction to the chapter on ﬁles and exceptions.
• Robin Shaw pointed out an error in Section 13.1, where the printTime function was used in an example
without being deﬁned.
• Paul Sleigh found an error in Chapter 7 and a bug in Jonah Cohen’s Perl script that generates HTML
from LaTeX.
• Craig T. Snydal is testing the text in a course at Drew University. He has contributed several valuable
suggestions and corrections.
• Ian Thomas and his students are using the text in a programming course. They are the ﬁrst ones to test
the chapters in the latter half of the book, and they have made numerous corrections and suggestions.

viii
Chapter 0. Preface
• Keith Verheyden sent in a correction in Chapter 3.
• Peter Winstanley let us know about a longstanding error in our Latin in Chapter 3.
• Chris Wrobel made corrections to the code in the chapter on ﬁle I/O and exceptions.
• Moshe Zadka has made invaluable contributions to this project. In addition to writing the ﬁrst draft of
the chapter on Dictionaries, he provided continual guidance in the early stages of the book.
• Christoph Zwerschke sent several corrections and pedagogic suggestions, and explained the difference
between gleich and selbe.
• James Mayer sent us a whole slew of spelling and typographical errors, including two in the contributor
list.
• Hayden McAfee caught a potentially confusing inconsistency between two examples.
• Angel Arnal is part of an international team of translators working on the Spanish version of the text.
He has also found several errors in the English version.
• Tauhidul Hoque and Lex Berezhny created the illustrations in Chapter 1 and improved many of the other
illustrations.
• Dr. Michele Alzetta caught an error in Chapter 8 and sent some interesting pedagogic comments and
suggestions about Fibonacci and Old Maid.
• Andy Mitchell caught a typo in Chapter 1 and a broken example in Chapter 2.
• Kalin Harvey suggested a clariﬁcation in Chapter 7 and caught some typos.
• Christopher P. Smith caught several typos and is helping us prepare to update the book for Python 2.2.
• David Hutchins caught a typo in the Foreword.
• Gregor Lingl is teaching Python at a high school in Vienna, Austria. He is working on a German
translation of the book, and he caught a couple of bad errors in Chapter 5.
• Julie Peters caught a typo in the Preface.
• Florin Oprina sent in an improvement in makeTime, a correction in printTime, and a nice typo.
• D. J. Webre suggested a clariﬁcation in Chapter 3.
• Ken found a ﬁstful of errors in Chapters 8, 9 and 11.
• Ivo Wever caught a typo in Chapter 5 and suggested a clariﬁcation in Chapter 3.
• Curtis Yanko suggested a clariﬁcation in Chapter 2.
• Ben Logan sent in a number of typos and problems with translating the book into HTML.
• Jason Armstrong saw the missing word in Chapter 2.
• Louis Cordier noticed a spot in Chapter 16 where the code didn’t match the text.
• Brian Cain suggested several clariﬁcations in Chapters 2 and 3.
• Rob Black sent in a passel of corrections, including some changes for Python 2.2.
• Jean-Philippe Rey at Ecole Centrale Paris sent a number of patches, including some updates for Python
2.2 and other thoughtful improvements.
• Jason Mader at George Washington University made a number of useful suggestions and corrections.
• Jan Gundtofte-Bruun reminded us that “a error” is an error.
• Abel David and Alexis Dinno reminded us that the plural of “matrix” is “matrices”, not “matrixes”. This
error was in the book for years, but two readers with the same initials reported it on the same day. Weird.
• Charles Thayer encouraged us to get rid of the semi-colons we had put at the ends of some statements
and to clean up our use of “argument” and “parameter”.
• Roger Sperberg pointed out a twisted piece of logic in Chapter 3.
• Sam Bull pointed out a confusing paragraph in Chapter 2.
• Andrew Cheung pointed out two instances of “use before def.”

ix
• C. Corey Capel spotted the missing word in the Third Theorem of Debugging and a typo in Chapter 4.
• Alessandra helped clear up some Turtle confusion.
• Wim Champagne found a brain-o in a dictionary example.
• Douglas Wright pointed out a problem with ﬂoor division in arc.
• Jared Spindor found some jetsam at the end of a sentence.
• Lin Peiheng sent a number of very helpful suggestions.
• Ray Hagtvedt sent in two errors and a not-quite-error.
• Torsten H¨ubsch pointed out an inconsistency in Swampy.
• Inga Petuhhov corrected an example in Chapter 14.
• Arne Babenhauserheide sent several helpful corrections.
• Mark E. Casida is is good at spotting repeated words.
• Scott Tyler ﬁlled in a that was missing. And then sent in a heap of corrections.
• Gordon Shephard sent in several corrections, all in separate emails.
• Andrew Turner spotted an error in Chapter 8.
• Adam Hobart ﬁxed a problem with ﬂoor division in arc.
• Daryl Hammond and Sarah Zimmerman pointed out that I served up math.pi too early. And Zim
spotted a typo.
• George Sass found a bug in a Debugging section.
• Brian Bingham suggested Exercise 11.9.
• Leah Engelbert-Fenton pointed out that I used tuple as a variable name, contrary to my own advice.
And then found a bunch of typos and a “use before def.”
• Joe Funke spotted a typo.
• Chao-chao Chen found an inconsistency in the Fibonacci example.
• Jeff Paine knows the difference between space and spam.
• Lubos Pintes sent in a typo.
• Gregg Lind and Abigail Heithoff suggested Exercise 14.6.
• Max Hailperin has sent in a number of corrections and suggestions. Max is one of the authors of the
extraordinary Concrete Abstractions, which you might want to read when you are done with this book.
• Chotipat Pornavalai found an error in an error message.
• Stanislaw Antol sent a list of very helpful suggestions.
• Eric Pashman sent a number of corrections for Chapters 4–11.
• Miguel Azevedo found some typos.
• Jianhua Liu sent in a long list of corrections.
• Nick King found a missing word.
• Martin Zuther sent a long list of suggestions.
• Adam Zimmerman found an inconsistency in my instance of an “instance” and several other errors.
• Ratnakar Tiwari suggested a footnote explaining degenerate triangles.
• Anurag Goel suggested another solution for is_abecedarian and sent some additional corrections.
And he knows how to spell Jane Austen.
• Kelli Kratzer spotted one of the typos.
• Mark Grifﬁths pointed out a confusing example in Chapter 3.
• Roydan Ongie found an error in my Newton’s method.
• Patryk Wolowiec helped me with a problem in the HTML version.
• Mark Chonofsky told me about a new keyword in Python 3.0.
• Russell Coleman helped me with my geometry.
• Wei Huang spotted several typographical errors.
• Karen Barber spotted the the oldest typo in the book.

x
Chapter 0. Preface

Contents
Preface
v
1
The way of the program
1
1.1
The Python programming language . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.2
What is a program? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2
1.3
What is debugging? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
1.4
Formal and natural languages . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.5
The ﬁrst program . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.6
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.7
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.8
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2
Variables, expressions and statements
9
2.1
Values and types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.2
Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
2.3
Variable names and keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
2.4
Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
2.5
Operators and operands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
2.6
Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
2.7
Order of operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
2.8
String operations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
2.9
Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
2.10
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
2.11
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
2.12
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16

xii
Contents
3
Functions
17
3.1
Function calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
3.2
Type conversion functions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
3.3
Math functions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
3.4
Composition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
3.5
Adding new functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
3.6
Deﬁnitions and uses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
3.7
Flow of execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
3.8
Parameters and arguments
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
3.9
Variables and parameters are local . . . . . . . . . . . . . . . . . . . . . . . . .
22
3.10
Stack diagrams
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
3.11
Fruitful functions and void functions . . . . . . . . . . . . . . . . . . . . . . . .
24
3.12
Why functions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25
3.13
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25
3.14
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25
3.15
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
4
Case study: interface design
29
4.1
TurtleWorld . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
29
4.2
Simple repetition
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
30
4.3
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
4.4
Encapsulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
32
4.5
Generalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
32
4.6
Interface design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
4.7
Refactoring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
4.8
A development plan . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
35
4.9
docstring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
35
4.10
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
35
4.11
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
4.12
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36

Contents
xiii
5
Conditionals and recursion
39
5.1
Modulus operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
5.2
Boolean expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
5.3
Logical operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
40
5.4
Conditional execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
40
5.5
Alternative execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
5.6
Chained conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
5.7
Nested conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42
5.8
Recursion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42
5.9
Stack diagrams for recursive functions . . . . . . . . . . . . . . . . . . . . . . .
43
5.10
Inﬁnite recursion
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44
5.11
Keyboard input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
5.12
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
5.13
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
46
5.14
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
6
Fruitful functions
51
6.1
Return values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
51
6.2
Incremental development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52
6.3
Composition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
6.4
Boolean functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
6.5
More recursion
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
6.6
Leap of faith . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
57
6.7
One more example
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
57
6.8
Checking types
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
6.9
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
59
6.10
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
6.11
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60

xiv
Contents
7
Iteration
63
7.1
Multiple assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
7.2
Updating variables
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
64
7.3
The while statement
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
64
7.4
break . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
7.5
Square roots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
66
7.6
Algorithms
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
7.7
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
68
7.8
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
68
7.9
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69
8
Strings
71
8.1
A string is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
71
8.2
len
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
72
8.3
Traversal with a for loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
72
8.4
String slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
73
8.5
Strings are immutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
8.6
Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
8.7
Looping and counting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
8.8
string methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
8.9
The in operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
8.10
String comparison . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
8.11
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
8.12
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79
8.13
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79
9
Case study: word play
81
9.1
Reading word lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
9.2
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
9.3
Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
83
9.4
Looping with indices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
9.5
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
9.6
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
9.7
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86

Contents
xv
10 Lists
89
10.1
A list is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
10.2
Lists are mutable
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
10.3
Traversing a list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
10.4
List operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
10.5
List slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
92
10.6
List methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
92
10.7
Map, ﬁlter and reduce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
10.8
Deleting elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
10.9
Lists and strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
10.10 Objects and values
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
10.11 Aliasing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
10.12 List arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97
10.13 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98
10.14 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
99
10.15 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
100
11 Dictionaries
103
11.1
Dictionary as a set of counters
. . . . . . . . . . . . . . . . . . . . . . . . . . .
104
11.2
Looping and dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
106
11.3
Reverse lookup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
106
11.4
Dictionaries and lists
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
11.5
Memos
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
11.6
Global variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
110
11.7
Long integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
111
11.8
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
112
11.9
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
112
11.10 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
113

xvi
Contents
12 Tuples
115
12.1
Tuples are immutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
115
12.2
Tuple assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
116
12.3
Tuples as return values
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
117
12.4
Variable-length argument tuples
. . . . . . . . . . . . . . . . . . . . . . . . . .
117
12.5
Lists and tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
118
12.6
Dictionaries and tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
119
12.7
Comparing tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
121
12.8
Sequences of sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
122
12.9
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
122
12.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
123
12.11 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
124
13 Case study: data structure selection
127
13.1
Word frequency analysis
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
127
13.2
Random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
128
13.3
Word histogram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
13.4
Most common words . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
130
13.5
Optional parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
130
13.6
Dictionary subtraction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
131
13.7
Random words
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
131
13.8
Markov analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
132
13.9
Data structures
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
133
13.10 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
134
13.11 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
13.12 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
136
14 Files
137
14.1
Persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
137
14.2
Reading and writing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
137
14.3
Format operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
138
14.4
Filenames and paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
139

Contents
xvii
14.5
Catching exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
14.6
Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
141
14.7
Pickling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
141
14.8
Pipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
142
14.9
Writing modules
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
143
14.10 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
144
14.11 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
14.12 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
15 Classes and objects
147
15.1
User-deﬁned types
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
147
15.2
Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
148
15.3
Rectangles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
149
15.4
Instances as return values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
150
15.5
Objects are mutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
150
15.6
Copying . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
151
15.7
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
152
15.8
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
153
15.9
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
153
16 Classes and functions
155
16.1
Time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
155
16.2
Pure functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
156
16.3
Modiﬁers
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
16.4
Prototyping versus planning
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
158
16.5
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
159
16.6
Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
160
16.7
Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
160

xviii
Contents
17 Classes and methods
161
17.1
Object-oriented features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
161
17.2
Printing objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
162
17.3
Another example
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
163
17.4
A more complicated example . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164
17.5
The init method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164
17.6
The
str
method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
165
17.7
Operator overloading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
165
17.8
Type-based dispatch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
166
17.9
Polymorphism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
167
17.10 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
17.11 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
17.12 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
169
18 Inheritance
171
18.1
Card objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
171
18.2
Class attributes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
172
18.3
Comparing cards
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
173
18.4
Decks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
174
18.5
Printing the deck
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
174
18.6
Add, remove, shufﬂe and sort . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175
18.7
Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
176
18.8
Class diagrams
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
177
18.9
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
178
18.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
179
18.11 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
180
19 Case study: Tkinter
183
19.1
GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
183
19.2
Buttons and callbacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
184
19.3
Canvas widgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
185
19.4
Coordinate sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
186

Contents
xix
19.5
More widgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
186
19.6
Packing widgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
187
19.7
Menus and Callables
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
190
19.8
Binding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
191
19.9
Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
193
19.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
193
19.11 Exercises
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
194
A Debugging
197
A.1
Syntax errors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
197
A.2
Runtime errors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
199
A.3
Semantic errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
201

xx
Contents

Chapter 1
The way of the program
The goal of this book is to teach you to think like a computer scientist. This way of thinking com-
bines some of the best features of mathematics, engineering, and natural science. Like mathemati-
cians, computer scientists use formal languages to denote ideas (speciﬁcally computations). Like
engineers, they design things, assembling components into systems and evaluating tradeoffs among
alternatives. Like scientists, they observe the behavior of complex systems, form hypotheses, and
test predictions.
The single most important skill for a computer scientist is problem solving. Problem solving means
the ability to formulate problems, think creatively about solutions, and express a solution clearly and
accurately. As it turns out, the process of learning to program is an excellent opportunity to practice
problem-solving skills. That’s why this chapter is called, “The way of the program.”
On one level, you will be learning to program, a useful skill by itself. On another level, you will use
programming as a means to an end. As we go along, that end will become clearer.
1.1
The Python programming language
The programming language you will learn is Python. Python is an example of a high-level language;
other high-level languages you might have heard of are C, C++, Perl, and Java.
There are also low-level languages, sometimes referred to as “machine languages” or “assembly
languages.” Loosely speaking, computers can only execute programs written in low-level languages.
So programs written in a high-level language have to be processed before they can run. This extra
processing takes some time, which is a small disadvantage of high-level languages.
The advantages are enormous. First, it is much easier to program in a high-level language. Programs
written in a high-level language take less time to write, they are shorter and easier to read, and they
are more likely to be correct. Second, high-level languages are portable, meaning that they can run
on different kinds of computers with few or no modiﬁcations. Low-level programs can run on only
one kind of computer and have to be rewritten to run on another.
Due to these advantages, almost all programs are written in high-level languages. Low-level lan-
guages are used only for a few specialized applications.
Two kinds of programs process high-level languages into low-level languages: interpreters and
compilers. An interpreter reads a high-level program and executes it, meaning that it does what the

2
Chapter 1. The way of the program
program says. It processes the program a little at a time, alternately reading lines and performing
computations.
OUTPUT
SOURCE
CODE
INTERPRETER
A compiler reads the program and translates it completely before the program starts running. In this
context, the high-level program is called the source code, and the translated program is called the
object code or the executable. Once a program is compiled, you can execute it repeatedly without
further translation.
OUTPUT
CODE
OBJECT
EXECUTOR
CODE
SOURCE
COMPILER
Python is considered an interpreted language because Python programs are executed by an inter-
preter. There are two ways to use the interpreter: interactive mode and script mode. In interactive
mode, you type Python programs and the interpreter prints the result:
>>> 1 + 1
2
The chevron, >>>, is the prompt the interpreter uses to indicate that it is ready. If you type 1 + 1,
the interpreter replies 2.
Alternatively, you can store code in a ﬁle and use the interpreter to execute the contents of the ﬁle,
which is called a script. By convention, Python scripts have names that end with .py.
To execute the script, you have to tell the interpreter the name of the ﬁle. In a UNIX command
window, you would type python dinsdale.py. In other development environments, the details of
executing scripts are different. You can ﬁnd instructions for your environment at the Python Website
python.org.
Working in interactive mode is convenient for testing small pieces of code because you can type and
execute them immediately. But for anything more than a few lines, you should save your code as a
script so you can modify and execute it in the future.
1.2
What is a program?
A program is a sequence of instructions that speciﬁes how to perform a computation. The compu-
tation might be something mathematical, such as solving a system of equations or ﬁnding the roots
of a polynomial, but it can also be a symbolic computation, such as searching and replacing text in
a document or (strangely enough) compiling a program.
The details look different in different languages, but a few basic instructions appear in just about
every language:
input: Get data from the keyboard, a ﬁle, or some other device.

1.3. What is debugging?
3
output: Display data on the screen or send data to a ﬁle or other device.
math: Perform basic mathematical operations like addition and multiplication.
conditional execution: Check for certain conditions and execute the appropriate sequence of state-
ments.
repetition: Perform some action repeatedly, usually with some variation.
Believe it or not, that’s pretty much all there is to it. Every program you’ve ever used, no matter
how complicated, is made up of instructions that look pretty much like these. So you can think of
programming as the process of breaking a large, complex task into smaller and smaller subtasks
until the subtasks are simple enough to be performed with one of these basic instructions.
That may be a little vague, but we will come back to this topic when we talk about algorithms.
1.3
What is debugging?
Programming is error-prone. For whimsical reasons, programming errors are called bugs and the
process of tracking them down is called debugging.
Three kinds of errors can occur in a program: syntax errors, runtime errors, and semantic errors. It
is useful to distinguish between them in order to track them down more quickly.
1.3.1
Syntax errors
Python can only execute a program if the syntax is correct; otherwise, the interpreter displays an
error message. Syntax refers to the structure of a program and the rules about that structure. For
example, parentheses have to come in matching pairs, so (1 + 2) is legal, but 8) is a syntax error.
In English readers can tolerate most syntax errors, which is why we can read the poetry of e. e.
cummings without spewing error messages. Python is not so forgiving. If there is a single syntax
error anywhere in your program, Python will display an error message and quit, and you will not be
able to run your program. During the ﬁrst few weeks of your programming career, you will probably
spend a lot of time tracking down syntax errors. As you gain experience, you will make fewer errors
and ﬁnd them faster.
1.3.2
Runtime errors
The second type of error is a runtime error, so called because the error does not appear until after the
program has started running. These errors are also called exceptions because they usually indicate
that something exceptional (and bad) has happened.
Runtime errors are rare in the simple programs you will see in the ﬁrst few chapters, so it might be
a while before you encounter one.

4
Chapter 1. The way of the program
1.3.3
Semantic errors
The third type of error is the semantic error. If there is a semantic error in your program, it will
run successfully in the sense that the computer will not generate any error messages, but it will not
do the right thing. It will do something else. Speciﬁcally, it will do what you told it to do.
The problem is that the program you wrote is not the program you wanted to write. The meaning of
the program (its semantics) is wrong. Identifying semantic errors can be tricky because it requires
you to work backward by looking at the output of the program and trying to ﬁgure out what it is
doing.
1.3.4
Experimental debugging
One of the most important skills you will acquire is debugging. Although it can be frustrating,
debugging is one of the most intellectually rich, challenging, and interesting parts of programming.
In some ways, debugging is like detective work. You are confronted with clues, and you have to
infer the processes and events that led to the results you see.
Debugging is also like an experimental science. Once you have an idea about what is going wrong,
you modify your program and try again. If your hypothesis was correct, then you can predict the
result of the modiﬁcation, and you take a step closer to a working program. If your hypothesis was
wrong, you have to come up with a new one. As Sherlock Holmes pointed out, “When you have
eliminated the impossible, whatever remains, however improbable, must be the truth.” (A. Conan
Doyle, The Sign of Four)
For some people, programming and debugging are the same thing. That is, programming is the
process of gradually debugging a program until it does what you want. The idea is that you should
start with a program that does something and make small modiﬁcations, debugging them as you go,
so that you always have a working program.
For example, Linux is an operating system that contains thousands of lines of code, but it started
out as a simple program Linus Torvalds used to explore the Intel 80386 chip. According to Larry
Greenﬁeld, “One of Linus’s earlier projects was a program that would switch between printing
AAAA and BBBB. This later evolved to Linux.” (The Linux Users’ Guide Beta Version 1).
Later chapters will make more suggestions about debugging and other programming practices.
1.4
Formal and natural languages
Natural languages are the languages people speak, such as English, Spanish, and French. They
were not designed by people (although people try to impose some order on them); they evolved
naturally.
Formal languages are languages that are designed by people for speciﬁc applications. For example,
the notation that mathematicians use is a formal language that is particularly good at denoting rela-
tionships among numbers and symbols. Chemists use a formal language to represent the chemical
structure of molecules. And most importantly:
Programming languages are formal languages that have been designed to express
computations.

1.4. Formal and natural languages
5
Formal languages tend to have strict rules about syntax. For example, 3+3 = 6 is a syntactically cor-
rect mathematical statement, but 3+ = 3$6 is not. H2O is a syntactically correct chemical formula,
but 2Zz is not.
Syntax rules come in two ﬂavors, pertaining to tokens and structure. Tokens are the basic elements
of the language, such as words, numbers, and chemical elements. One of the problems with 3+ =
3$6 is that $ is not a legal token in mathematics (at least as far as I know). Similarly, 2Zz is not legal
because there is no element with the abbreviation Zz.
The second type of syntax error pertains to the structure of a statement; that is, the way the tokens
are arranged. The statement 3+ = 3$6 is illegal because even though + and = are legal tokens, you
can’t have one right after the other. Similarly, in a chemical formula the subscript comes after the
element name, not before.
Exercise 1.1 Write a well-structured English sentence with invalid tokens in it. Then write another
sentence with all valid tokens but with invalid structure.
When you read a sentence in English or a statement in a formal language, you have to ﬁgure out
what the structure of the sentence is (although in a natural language you do this subconsciously).
This process is called parsing.
For example, when you hear the sentence, “The penny dropped,” you understand that “the penny”
is the subject and “dropped” is the predicate. Once you have parsed a sentence, you can ﬁgure out
what it means, or the semantics of the sentence. Assuming that you know what a penny is and what
it means to drop, you will understand the general implication of this sentence.
Although formal and natural languages have many features in common—tokens, structure, syntax,
and semantics—there are some differences:
ambiguity: Natural languages are full of ambiguity, which people deal with by using contextual
clues and other information. Formal languages are designed to be nearly or completely unam-
biguous, which means that any statement has exactly one meaning, regardless of context.
redundancy: In order to make up for ambiguity and reduce misunderstandings, natural languages
employ lots of redundancy. As a result, they are often verbose. Formal languages are less
redundant and more concise.
literalness: Natural languages are full of idiom and metaphor. If I say, “The penny dropped,” there
is probably no penny and nothing dropping1. Formal languages mean exactly what they say.
People who grow up speaking a natural language—everyone—often have a hard time adjusting to
formal languages. In some ways, the difference between formal and natural language is like the
difference between poetry and prose, but more so:
Poetry: Words are used for their sounds as well as for their meaning, and the whole poem together
creates an effect or emotional response. Ambiguity is not only common but often deliberate.
Prose: The literal meaning of words is more important, and the structure contributes more meaning.
Prose is more amenable to analysis than poetry but still often ambiguous.
Programs: The meaning of a computer program is unambiguous and literal, and can be understood
entirely by analysis of the tokens and structure.
1This idiom means that someone realized something after a period of confusion.

6
Chapter 1. The way of the program
Here are some suggestions for reading programs (and other formal languages). First, remember that
formal languages are much more dense than natural languages, so it takes longer to read them. Also,
the structure is very important, so it is usually not a good idea to read from top to bottom, left to
right. Instead, learn to parse the program in your head, identifying the tokens and interpreting the
structure. Finally, the details matter. Small errors in spelling and punctuation, which you can get
away with in natural languages, can make a big difference in a formal language.
1.5
The ﬁrst program
Traditionally, the ﬁrst program you write in a new language is called “Hello, World!” because all it
does is display the words, “Hello, World!” In Python, it looks like this:
print 'Hello, World!'
This is an example of a print statement2, which doesn’t actually print anything on paper. It displays
a value on the screen. In this case, the result is the words
Hello, World!
The quotation marks in the program mark the beginning and end of the text to be displayed; they
don’t appear in the result.
Some people judge the quality of a programming language by the simplicity of the “Hello, World!”
program. By this standard, Python does about as well as possible.
1.6
Debugging
It is a good idea to read this book in front of a computer so you can try out the examples as you
go. You can run most of the examples in interactive mode, but if you put the code into a script, it is
easier to try out variations.
Whenever you are experimenting with a new feature, you should try to make mistakes. For example,
in the “Hello, world!” program, what happens if you leave out one of the quotation marks? What if
you leave out both? What if you spell print wrong?
This kind of experiment helps you remember what you read; it also helps with debugging, because
you get to know what the error messages mean. It is better to make mistakes now and on purpose
than later and accidentally.
Programming, and especially debugging, sometimes brings out strong emotions. If you are strug-
gling with a difﬁcult bug, you might feel angry, despondent or embarrassed.
There is evidence that people naturally respond to computers as if they were people3. When they
work well, we think of them as teammates, and when they are obstinate or rude, we respond to them
the same way we respond to rude, obstinate people.
Preparing for these reactions might help you deal with them. One approach is to think of the com-
puter as an employee with certain strengths, like speed and precision, and particular weaknesses,
like lack of empathy and inability to grasp the big picture.
2In Python 3.0, print is a function, not a statement, so the syntax is print(’Hello, World!’). We will get to functions
soon!
3See Reeves and Nass, The Media Equation: How People Treat Computers, Television, and New Media Like Real People
and Places.

1.7. Glossary
7
Your job is to be a good manager: ﬁnd ways to take advantage of the strengths and mitigate the
weaknesses. And ﬁnd ways to use your emotions to engage with the problem, without letting your
reactions interfere with your ability to work effectively.
Learning to debug can be frustrating, but it is a valuable skill that is useful for many activities
beyond programming. At the end of each chapter there is a debugging section, like this one, with
my thoughts about debugging. I hope they help!
1.7
Glossary
problem solving: The process of formulating a problem, ﬁnding a solution, and expressing the
solution.
high-level language: A programming language like Python that is designed to be easy for humans
to read and write.
low-level language: A programming language that is designed to be easy for a computer to execute;
also called “machine language” or “assembly language.”
portability: A property of a program that can run on more than one kind of computer.
interpret: To execute a program in a high-level language by translating it one line at a time.
compile: To translate a program written in a high-level language into a low-level language all at
once, in preparation for later execution.
source code: A program in a high-level language before being compiled.
object code: The output of the compiler after it translates the program.
executable: Another name for object code that is ready to be executed.
prompt: Characters displayed by the interpreter to indicate that it is ready to take input from the
user.
script: A program stored in a ﬁle (usually one that will be interpreted).
interactive mode: A way of using the Python interpreter by typing commands and expressions at
the prompt.
script mode: A way of using the Python interpreter to read and execute statements in a script.
program: A set of instructions that speciﬁes a computation.
algorithm: A general process for solving a category of problems.
bug: An error in a program.
debugging: The process of ﬁnding and removing any of the three kinds of programming errors.
syntax: The structure of a program.
syntax error: An error in a program that makes it impossible to parse (and therefore impossible to
interpret).
exception: An error that is detected while the program is running.

8
Chapter 1. The way of the program
semantics: The meaning of a program.
semantic error: An error in a program that makes it do something other than what the programmer
intended.
natural language: Any one of the languages that people speak that evolved naturally.
formal language: Any one of the languages that people have designed for speciﬁc purposes, such
as representing mathematical ideas or computer programs; all programming languages are
formal languages.
token: One of the basic elements of the syntactic structure of a program, analogous to a word in a
natural language.
parse: To examine a program and analyze the syntactic structure.
print statement: An instruction that causes the Python interpreter to display a value on the screen.
1.8
Exercises
Exercise 1.2 Use a web browser to go to the Python Website python.org. This page contains
information about Python and links to Python-related pages, and it gives you the ability to search
the Python documentation.
For example, if you enter print in the search window, the ﬁrst link that appears is the documentation
of the print statement. At this point, not all of it will make sense to you, but it is good to know
where it is.
Exercise 1.3 Start the Python interpreter and type help() to start the online help utility. Or you
can type help('print') to get information about the print statement.
If this example doesn’t work, you may need to install additional Python documentation or set an
environment variable; the details depend on your operating system and version of Python.
Exercise 1.4 Start the Python interpreter and use it as a calculator. Python’s syntax for math oper-
ations is almost the same as standard mathematical notation. For example, the symbols +, - and /
denote addition, subtraction and division, as you would expect. The symbol for multiplication is *.
If you run a 10 kilometer race in 43 minutes 30 seconds, what is your average time per mile? What
is your average speed in miles per hour? (Hint: there are 1.61 kilometers in a mile).

Chapter 2
Variables, expressions and
statements
2.1
Values and types
A value is one of the basic things a program works with, like a letter or a number. The values we
have seen so far are 1, 2, and 'Hello, World!'.
These values belong to different types: 2 is an integer, and 'Hello, World!' is a string, so-called
because it contains a “string” of letters. You (and the interpreter) can identify strings because they
are enclosed in quotation marks.
The print statement also works for integers.
>>> print 4
4
If you are not sure what type a value has, the interpreter can tell you.
>>> type('Hello, World!')
<type 'str'>
>>> type(17)
<type 'int'>
Not surprisingly, strings belong to the type str and integers belong to the type int. Less obviously,
numbers with a decimal point belong to a type called float, because these numbers are represented
in a format called ﬂoating-point.
>>> type(3.2)
<type 'float'>
What about values like '17' and '3.2'? They look like numbers, but they are in quotation marks
like strings.
>>> type('17')
<type 'str'>
>>> type('3.2')
<type 'str'>

10
Chapter 2. Variables, expressions and statements
They’re strings.
When you type a large integer, you might be tempted to use commas between groups of three digits,
as in 1,000,000. This is not a legal integer in Python, but it is legal:
>>> print 1,000,000
1 0 0
Well, that’s not what we expected at all! Python interprets 1,000,000 as a comma-separated se-
quence of integers, which it prints with spaces between.
This is the ﬁrst example we have seen of a semantic error: the code runs without producing an error
message, but it doesn’t do the “right” thing.
2.2
Variables
One of the most powerful features of a programming language is the ability to manipulate variables.
A variable is a name that refers to a value.
An assignment statement creates new variables and gives them values:
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.1415926535897931
This example makes three assignments. The ﬁrst assigns a string to a new variable named message;
the second gives the integer 17 to n; the third assigns the (approximate) value of π to pi.
A common way to represent variables on paper is to write the name with an arrow pointing to the
variable’s value. This kind of ﬁgure is called a state diagram because it shows what state each of
the variables is in (think of it as the variable’s state of mind). This diagram shows the result of the
previous example:
message
n
pi
17
’And now for something completely different’
3.1415926535897931
To display the value of a variable, you can use a print statement:
>>> print n
17
>>> print pi
3.14159265359
The type of a variable is the type of the value it refers to.
>>> type(message)
<type 'str'>
>>> type(n)
<type 'int'>
>>> type(pi)
<type 'float'>

2.3. Variable names and keywords
11
Exercise 2.1 If you type an integer with a leading zero, you might get a confusing error:
>>> zipcode = 02492
ˆ
SyntaxError: invalid token
Other numbers seem to work, but the results are bizarre:
>>> zipcode = 02132
>>> print zipcode
1114
Can you ﬁgure out what is going on? Hint: print the values 01, 010, 0100 and 01000.
2.3
Variable names and keywords
Programmers generally choose names for their variables that are meaningful—they document what
the variable is used for.
Variable names can be arbitrarily long. They can contain both letters and numbers, but they have to
begin with a letter. It is legal to use uppercase letters, but it is a good idea to begin variable names
with a lowercase letter (you’ll see why later).
The underscore character (_) can appear in a name. It is often used in names with multiple words,
such as my_name or airspeed_of_unladen_swallow.
If you give a variable an illegal name, you get a syntax error:
>>> 76trombones = 'big parade'
SyntaxError: invalid syntax
>>> more@ = 1000000
SyntaxError: invalid syntax
>>> class = 'Advanced Theoretical Zymurgy'
SyntaxError: invalid syntax
76trombones is illegal because it does not begin with a letter. more@ is illegal because it contains
an illegal character, @. But what’s wrong with class?
It turns out that class is one of Python’s keywords. The interpreter uses keywords to recognize the
structure of the program, and they cannot be used as variable names.
Python has 31 keywords1:
and
del
from
not
while
as
elif
global
or
with
assert
else
if
pass
yield
break
except
import
print
class
exec
in
raise
continue
finally
is
return
def
for
lambda
try
You might want to keep this list handy. If the interpreter complains about one of your variable names
and you don’t know why, see if it is on this list.
1In Python 3.0, exec is no longer a keyword, but nonlocal is.

12
Chapter 2. Variables, expressions and statements
2.4
Statements
A statement is a unit of code that the Python interpreter can execute. We have seen two kinds of
statements: print and assignment.
When you type a statement in interactive mode, the interpreter executes it and displays the result, if
there is one.
A script usually contains a sequence of statements. If there is more than one statement, the results
appear one at a time as the statements execute.
For example, the script
print 1
x = 2
print x
produces the output
1
2
The assignment statement produces no output.
2.5
Operators and operands
Operators are special symbols that represent computations like addition and multiplication. The
values the operator is applied to are called operands.
The operators +, -, *, / and ** perform addition, subtraction, multiplication, division and exponen-
tiation, as in the following examples:
20+32
hour-1
hour*60+minute
minute/60
5**2
(5+9)*(15-7)
In some other languages, ˆ is used for exponentiation, but in Python it is a bitwise operator called
XOR. I won’t cover bitwise operators in this book, but you can read about them at wiki.python.
org/moin/BitwiseOperators.
The division operator might not do what you expect:
>>> minute = 59
>>> minute/60
0
The value of minute is 59, and in conventional arithmetic 59 divided by 60 is 0.98333, not 0. The
reason for the discrepancy is that Python is performing ﬂoor division2.
When both of the operands are integers, the result is also an integer; ﬂoor division chops off the
fraction part, so in this example it rounds down to zero.
If either of the operands is a ﬂoating-point number, Python performs ﬂoating-point division, and the
result is a float:
>>> minute/60.0
0.98333333333333328
2In Python 3.0, the result of this division is a float. The new operator // performs integer division.

2.6. Expressions
13
2.6
Expressions
An expression is a combination of values, variables, and operators. A value all by itself is considered
an expression, and so is a variable, so the following are all legal expressions (assuming that the
variable x has been assigned a value):
17
x
x + 17
If you type an expression in interactive mode, the interpreter evaluates it and displays the result:
>>> 1 + 1
2
But in a script, an expression all by itself doesn’t do anything! This is a common source of confusion
for beginners.
Exercise 2.2 Type the following statements in the Python interpreter to see what they do:
5
x = 5
x + 1
Now put the same statements into a script and run it. What is the output? Modify the script by
transforming each expression into a print statement and then run it again.
2.7
Order of operations
When more than one operator appears in an expression, the order of evaluation depends on the rules
of precedence. For mathematical operators, Python follows mathematical convention. The acronym
PEMDAS is a useful way to remember the rules:
• Parentheses have the highest precedence and can be used to force an expression to evaluate in
the order you want. Since expressions in parentheses are evaluated ﬁrst, 2 * (3-1) is 4, and
(1+1)**(5-2) is 8. You can also use parentheses to make an expression easier to read, as in
(minute * 100) / 60, even if it doesn’t change the result.
• Exponentiation has the next highest precedence, so 2**1+1 is 3, not 4, and 3*1**3 is 3, not
27.
• Multiplication and Division have the same precedence, which is higher than Addition and
Subtraction, which also have the same precedence. So 2*3-1 is 5, not 4, and 6+4/2 is 8, not
5.
• Operators with the same precedence are evaluated from left to right. So in the expression
degrees / 2 * pi, the division happens ﬁrst and the result is multiplied by pi. To divide
by 2π, you can reorder the operands or use parentheses.

14
Chapter 2. Variables, expressions and statements
2.8
String operations
In general, you cannot perform mathematical operations on strings, even if the strings look like
numbers, so the following are illegal:
'2'-'1'
'eggs'/'easy'
'third'*'a charm'
The + operator works with strings, but it might not do what you expect: it performs concatenation,
which means joining the strings by linking them end-to-end. For example:
first = 'throat'
second = 'warbler'
print first + second
The output of this program is throatwarbler.
The * operator also works on strings; it performs repetition.
For example, 'Spam'*3 is
'SpamSpamSpam'. If one of the operands is a string, the other has to be an integer.
This use of + and * makes sense by analogy with addition and multiplication. Just as 4*3 is equiv-
alent to 4+4+4, we expect 'Spam'*3 to be the same as 'Spam'+'Spam'+'Spam', and it is. On
the other hand, there is a signiﬁcant way in which string concatenation and repetition are different
from integer addition and multiplication. Can you think of a property that addition has that string
concatenation does not?
2.9
Comments
As programs get bigger and more complicated, they get more difﬁcult to read. Formal languages are
dense, and it is often difﬁcult to look at a piece of code and ﬁgure out what it is doing, or why.
For this reason, it is a good idea to add notes to your programs to explain in natural language what
the program is doing. These notes are called comments, and they start with the # symbol:
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
In this case, the comment appears on a line by itself. You can also put comments at the end of a line:
percentage = (minute * 100) / 60
# percentage of an hour
Everything from the # to the end of the line is ignored—it has no effect on the program.
Comments are most useful when they document non-obvious features of the code. It is reasonable
to assume that the reader can ﬁgure out what the code does; it is much more useful to explain why.
This comment is redundant with the code and useless:
v = 5
# assign 5 to v
This comment contains useful information that is not in the code:
v = 5
# velocity in meters/second.
Good variable names can reduce the need for comments, but long names can make complex expres-
sions hard to read, so there is a tradeoff.

2.10. Debugging
15
2.10
Debugging
At this point the syntax error you are most likely to make is an illegal variable name, like class and
yield, which are keywords, or odd˜job and US$, which contain illegal characters.
If you put a space in a variable name, Python thinks it is two operands without an operator:
>>> bad name = 5
SyntaxError: invalid syntax
For syntax errors, the error messages don’t help much.
The most common messages are
SyntaxError:
invalid syntax and SyntaxError:
invalid token, neither of which is very
informative.
The runtime error you are most likely to make is a “use before def;” that is, trying to use a variable
before you have assigned a value. This can happen if you spell a variable name wrong:
>>> principal = 327.68
>>> interest = principle * rate
NameError: name 'principle' is not defined
Variables names are case sensitive, so LaTeX is not the same as latex.
At this point the most likely cause of a semantic error is the order of operations. For example, to
evaluate 1
2π, you might be tempted to write
>>> 1.0 / 2.0 * pi
But the division happens ﬁrst, so you would get π/2, which is not the same thing! There is no way
for Python to know what you meant to write, so in this case you don’t get an error message; you just
get the wrong answer.
2.11
Glossary
value: One of the basic units of data, like a number or string, that a program manipulates.
type: A category of values. The types we have seen so far are integers (type int), ﬂoating-point
numbers (type float), and strings (type str).
integer: A type that represents whole numbers.
ﬂoating-point: A type that represents numbers with fractional parts.
string: A type that represents sequences of characters.
variable: A name that refers to a value.
statement: A section of code that represents a command or action. So far, the statements we have
seen are assignments and print statements.
assignment: A statement that assigns a value to a variable.
state diagram: A graphical representation of a set of variables and the values they refer to.
keyword: A reserved word that is used by the compiler to parse a program; you cannot use key-
words like if, def, and while as variable names.

16
Chapter 2. Variables, expressions and statements
operator: A special symbol that represents a simple computation like addition, multiplication, or
string concatenation.
operand: One of the values on which an operator operates.
ﬂoor division: The operation that divides two numbers and chops off the fraction part.
expression: A combination of variables, operators, and values that represents a single result value.
evaluate: To simplify an expression by performing the operations in order to yield a single value.
rules of precedence: The set of rules governing the order in which expressions involving multiple
operators and operands are evaluated.
concatenate: To join two operands end-to-end.
comment: Information in a program that is meant for other programmers (or anyone reading the
source code) and has no effect on the execution of the program.
2.12
Exercises
Exercise 2.3 Assume that we execute the following assignment statements:
width = 17
height = 12.0
delimiter = '.'
For each of the following expressions, write the value of the expression and the type (of the value of
the expression).
1. width/2
2. width/2.0
3. height/3
4. 1 + 2 * 5
5. delimiter * 5
Use the Python interpreter to check your answers.
Exercise 2.4 Practice using the Python interpreter as a calculator:
1. The volume of a sphere with radius r is 4
3πr3. What is the volume of a sphere with radius 5?
Hint: 392.6 is wrong!
2. Suppose the cover price of a book is $24.95, but bookstores get a 40% discount. Shipping
costs $3 for the ﬁrst copy and 75 cents for each additional copy. What is the total wholesale
cost for 60 copies?
3. If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at
tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?

Chapter 3
Functions
3.1
Function calls
In the context of programming, a function is a named sequence of statements that performs a com-
putation. When you deﬁne a function, you specify the name and the sequence of statements. Later,
you can “call” the function by name. We have already seen one example of a function call:
>>> type(32)
<type 'int'>
The name of the function is type. The expression in parentheses is called the argument of the
function. The result, for this function, is the type of the argument.
It is common to say that a function “takes” an argument and “returns” a result. The result is called
the return value.
3.2
Type conversion functions
Python provides built-in functions that convert values from one type to another. The int function
takes any value and converts it to an integer, if it can, or complains otherwise:
>>> int('32')
32
>>> int('Hello')
ValueError: invalid literal for int(): Hello
int can convert ﬂoating-point values to integers, but it doesn’t round off; it chops off the fraction
part:
>>> int(3.99999)
3
>>> int(-2.3)
-2
float converts integers and strings to ﬂoating-point numbers:

18
Chapter 3. Functions
>>> float(32)
32.0
>>> float('3.14159')
3.14159
Finally, str converts its argument to a string:
>>> str(32)
'32'
>>> str(3.14159)
'3.14159'
3.3
Math functions
Python has a math module that provides most of the familiar mathematical functions. A module is
a ﬁle that contains a collection of related functions.
Before we can use the module, we have to import it:
>>> import math
This statement creates a module object named math. If you print the module object, you get some
information about it:
>>> print math
<module 'math' from '/usr/lib/python2.5/lib-dynload/math.so'>
The module object contains the functions and variables deﬁned in the module. To access one of the
functions, you have to specify the name of the module and the name of the function, separated by a
dot (also known as a period). This format is called dot notation.
>>> ratio = signal_power / noise_power
>>> decibels = 10 * math.log10(ratio)
>>> radians = 0.7
>>> height = math.sin(radians)
The ﬁrst example computes the logarithm base 10 of the signal-to-noise ratio. The math module
also provides a function called log that computes logarithms base e.
The second example ﬁnds the sine of radians. The name of the variable is a hint that sin and the
other trigonometric functions (cos, tan, etc.) take arguments in radians. To convert from degrees to
radians, divide by 360 and multiply by 2π:
>>> degrees = 45
>>> radians = degrees / 360.0 * 2 * math.pi
>>> math.sin(radians)
0.707106781187
The expression math.pi gets the variable pi from the math module. The value of this variable is an
approximation of π, accurate to about 15 digits.
If you know your trigonometry, you can check the previous result by comparing it to the square root
of two divided by two:

3.4. Composition
19
>>> math.sqrt(2) / 2.0
0.707106781187
3.4
Composition
So far, we have looked at the elements of a program—variables, expressions, and statements—in
isolation, without talking about how to combine them.
One of the most useful features of programming languages is their ability to take small building
blocks and compose them. For example, the argument of a function can be any kind of expression,
including arithmetic operators:
x = math.sin(degrees / 360.0 * 2 * math.pi)
And even function calls:
x = math.exp(math.log(x+1))
Almost anywhere you can put a value, you can put an arbitrary expression, with one exception: the
left side of an assignment statement has to be a variable name. Any other expression on the left side
is a syntax error1.
>>> minutes = hours * 60
# right
>>> hours * 60 = minutes
# wrong!
SyntaxError: can't assign to operator
3.5
Adding new functions
So far, we have only been using the functions that come with Python, but it is also possible to add
new functions. A function deﬁnition speciﬁes the name of a new function and the sequence of
statements that execute when the function is called.
Here is an example:
def print_lyrics():
print "I'm a lumberjack, and I'm okay."
print "I sleep all night and I work all day."
def is a keyword that indicates that this is a function deﬁnition. The name of the function is
print_lyrics. The rules for function names are the same as for variable names: letters, num-
bers and some punctuation marks are legal, but the ﬁrst character can’t be a number. You can’t use a
keyword as the name of a function, and you should avoid having a variable and a function with the
same name.
The empty parentheses after the name indicate that this function doesn’t take any arguments.
The ﬁrst line of the function deﬁnition is called the header; the rest is called the body. The header
has to end with a colon and the body has to be indented. By convention, the indentation is always
four spaces (see Section 3.13). The body can contain any number of statements.
1We will see exceptions to this rule later.

20
Chapter 3. Functions
The strings in the print statements are enclosed in double quotes. Single quotes and double quotes do
the same thing; most people use single quotes except in cases like this where a single quote (which
is also an apostrophe) appears in the string.
If you type a function deﬁnition in interactive mode, the interpreter prints ellipses (...) to let you
know that the deﬁnition isn’t complete:
>>> def print_lyrics():
...
print "I'm a lumberjack, and I'm okay."
...
print "I sleep all night and I work all day."
...
To end the function, you have to enter an empty line (this is not necessary in a script).
Deﬁning a function creates a variable with the same name.
>>> print print_lyrics
<function print_lyrics at 0xb7e99e9c>
>>> print type(print_lyrics)
<type 'function'>
The value of print_lyrics is a function object, which has type 'function'.
The syntax for calling the new function is the same as for built-in functions:
>>> print_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
Once you have deﬁned a function, you can use it inside another function. For example, to repeat the
previous refrain, we could write a function called repeat_lyrics:
def repeat_lyrics():
print_lyrics()
print_lyrics()
And then call repeat_lyrics:
>>> repeat_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
But that’s not really how the song goes.
3.6
Deﬁnitions and uses
Pulling together the code fragments from the previous section, the whole program looks like this:
def print_lyrics():
print "I'm a lumberjack, and I'm okay."
print "I sleep all night and I work all day."

3.7. Flow of execution
21
def repeat_lyrics():
print_lyrics()
print_lyrics()
repeat_lyrics()
This program contains two function deﬁnitions: print_lyrics and repeat_lyrics. Function
deﬁnitions get executed just like other statements, but the effect is to create function objects. The
statements inside the function do not get executed until the function is called, and the function
deﬁnition generates no output.
As you might expect, you have to create a function before you can execute it. In other words, the
function deﬁnition has to be executed before the ﬁrst time it is called.
Exercise 3.1 Move the last line of this program to the top, so the function call appears before the
deﬁnitions. Run the program and see what error message you get.
Exercise 3.2 Move the function call back to the bottom and move the deﬁnition of print_lyrics
after the deﬁnition of repeat_lyrics. What happens when you run this program?
3.7
Flow of execution
In order to ensure that a function is deﬁned before its ﬁrst use, you have to know the order in which
statements are executed, which is called the ﬂow of execution.
Execution always begins at the ﬁrst statement of the program. Statements are executed one at a time,
in order from top to bottom.
Function deﬁnitions do not alter the ﬂow of execution of the program, but remember that statements
inside the function are not executed until the function is called.
A function call is like a detour in the ﬂow of execution. Instead of going to the next statement, the
ﬂow jumps to the body of the function, executes all the statements there, and then comes back to
pick up where it left off.
That sounds simple enough, until you remember that one function can call another. While in the
middle of one function, the program might have to execute the statements in another function. But
while executing that new function, the program might have to execute yet another function!
Fortunately, Python is good at keeping track of where it is, so each time a function completes, the
program picks up where it left off in the function that called it. When it gets to the end of the
program, it terminates.
What’s the moral of this sordid tale? When you read a program, you don’t always want to read from
top to bottom. Sometimes it makes more sense if you follow the ﬂow of execution.
3.8
Parameters and arguments
Some of the built-in functions we have seen require arguments.
For example, when you call
math.sin you pass a number as an argument.
Some functions take more than one argument:
math.pow takes two, the base and the exponent.

22
Chapter 3. Functions
Inside the function, the arguments are assigned to variables called parameters. Here is an example
of a user-deﬁned function that takes an argument:
def print_twice(bruce):
print bruce
print bruce
This function assigns the argument to a parameter named bruce. When the function is called, it
prints the value of the parameter (whatever it is) twice.
This function works with any value that can be printed.
>>> print_twice('Spam')
Spam
Spam
>>> print_twice(17)
17
17
>>> print_twice(math.pi)
3.14159265359
3.14159265359
The same rules of composition that apply to built-in functions also apply to user-deﬁned functions,
so we can use any kind of expression as an argument for print_twice:
>>> print_twice('Spam '*4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> print_twice(math.cos(math.pi))
-1.0
-1.0
The argument is evaluated before the function is called, so in the examples the expressions
'Spam '*4 and math.cos(math.pi) are only evaluated once.
You can also use a variable as an argument:
>>> michael = 'Eric, the half a bee.'
>>> print_twice(michael)
Eric, the half a bee.
Eric, the half a bee.
The name of the variable we pass as an argument (michael) has nothing to do with the name of the
parameter (bruce). It doesn’t matter what the value was called back home (in the caller); here in
print_twice, we call everybody bruce.
3.9
Variables and parameters are local
When you create a variable inside a function, it is local, which means that it only exists inside the
function. For example:
def cat_twice(part1, part2):
cat = part1 + part2
print_twice(cat)

3.10. Stack diagrams
23
This function takes two arguments, concatenates them, and prints the result twice. Here is an exam-
ple that uses it:
>>> line1 = 'Bing tiddle '
>>> line2 = 'tiddle bang.'
>>> cat_twice(line1, line2)
Bing tiddle tiddle bang.
Bing tiddle tiddle bang.
When cat_twice terminates, the variable cat is destroyed. If we try to print it, we get an exception:
>>> print cat
NameError: name 'cat' is not defined
Parameters are also local. For example, outside print_twice, there is no such thing as bruce.
3.10
Stack diagrams
To keep track of which variables can be used where, it is sometimes useful to draw a stack diagram.
Like state diagrams, stack diagrams show the value of each variable, but they also show the function
each variable belongs to.
Each function is represented by a frame. A frame is a box with the name of a function beside it and
the parameters and variables of the function inside it. The stack diagram for the previous example
looks like this:
line1
line2
’tiddle bang.’
part1
part2
cat
bruce
’Bing tiddle ’
’Bing tiddle ’
’tiddle bang.’
’Bing tiddle tiddle bang.’
’Bing tiddle tiddle bang.’
__main__
cat_twice
print_twice
The frames are arranged in a stack that indicates which function called which, and so on. In this
example, print_twice was called by cat_twice, and cat_twice was called by __main__, which
is a special name for the topmost frame. When you create a variable outside of any function, it
belongs to __main__.
Each parameter refers to the same value as its corresponding argument. So, part1 has the same
value as line1, part2 has the same value as line2, and bruce has the same value as cat.
If an error occurs during a function call, Python prints the name of the function, and the name of the
function that called it, and the name of the function that called that, all the way back to __main__.
For example, if you try to access cat from within print_twice, you get a NameError:

24
Chapter 3. Functions
Traceback (innermost last):
File "test.py", line 13, in __main__
cat_twice(line1, line2)
File "test.py", line 5, in cat_twice
print_twice(cat)
File "test.py", line 9, in print_twice
print cat
NameError: name 'cat' is not defined
This list of functions is called a traceback. It tells you what program ﬁle the error occurred in, and
what line, and what functions were executing at the time. It also shows the line of code that caused
the error.
The order of the functions in the traceback is the same as the order of the frames in the stack diagram.
The function that is currently running is at the bottom.
3.11
Fruitful functions and void functions
Some of the functions we are using, such as the math functions, yield results; for lack of a better
name, I call them fruitful functions. Other functions, like print_twice, perform an action but
don’t return a value. They are called void functions.
When you call a fruitful function, you almost always want to do something with the result; for
example, you might assign it to a variable or use it as part of an expression:
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
When you call a function in interactive mode, Python displays the result:
>>> math.sqrt(5)
2.2360679774997898
But in a script, if you call a fruitful function all by itself, the return value is lost forever!
math.sqrt(5)
This script computes the square root of 5, but since it doesn’t store or display the result, it is not very
useful.
Void functions might display something on the screen or have some other effect, but they don’t have
a return value. If you try to assign the result to a variable, you get a special value called None.
>>> result = print_twice('Bing')
Bing
Bing
>>> print result
None
The value None is not the same as the string 'None'. It is a special value that has its own type:
>>> print type(None)
<type 'NoneType'>
The functions we have written so far are all void. We will start writing fruitful functions in a few
chapters.

3.12. Why functions?
25
3.12
Why functions?
It may not be clear why it is worth the trouble to divide a program into functions. There are several
reasons:
• Creating a new function gives you an opportunity to name a group of statements, which makes
your program easier to read and debug.
• Functions can make a program smaller by eliminating repetitive code. Later, if you make a
change, you only have to make it in one place.
• Dividing a long program into functions allows you to debug the parts one at a time and then
assemble them into a working whole.
• Well-designed functions are often useful for many programs. Once you write and debug one,
you can reuse it.
3.13
Debugging
If you are using a text editor to write your scripts, you might run into problems with spaces and tabs.
The best way to avoid these problems is to use spaces exclusively (no tabs). Most text editors that
know about Python do this by default, but some don’t.
Tabs and spaces are usually invisible, which makes them hard to debug, so try to ﬁnd an editor that
manages indentation for you.
Also, don’t forget to save your program before you run it. Some development environments do this
automatically, but some don’t. In that case the program you are looking at in the text editor is not
the same as the program you are running.
Debugging can take a long time if you keep running the same, incorrect, program over and over!
Make sure that the code you are looking at is the code you are running. If you’re not sure, put
something like print 'hello' at the beginning of the program and run it again. If you don’t see
hello, you’re not running the right program!
3.14
Glossary
function: A named sequence of statements that performs some useful operation. Functions may or
may not take arguments and may or may not produce a result.
function deﬁnition: A statement that creates a new function, specifying its name, parameters, and
the statements it executes.
function object: A value created by a function deﬁnition. The name of the function is a variable
that refers to a function object.
header: The ﬁrst line of a function deﬁnition.
body: The sequence of statements inside a function deﬁnition.
parameter: A name used inside a function to refer to the value passed as an argument.

26
Chapter 3. Functions
function call: A statement that executes a function. It consists of the function name followed by an
argument list.
argument: A value provided to a function when the function is called. This value is assigned to the
corresponding parameter in the function.
local variable: A variable deﬁned inside a function. A local variable can only be used inside its
function.
return value: The result of a function. If a function call is used as an expression, the return value
is the value of the expression.
fruitful function: A function that returns a value.
void function: A function that doesn’t return a value.
module: A ﬁle that contains a collection of related functions and other deﬁnitions.
import statement: A statement that reads a module ﬁle and creates a module object.
module object: A value created by an import statement that provides access to the values deﬁned
in a module.
dot notation: The syntax for calling a function in another module by specifying the module name
followed by a dot (period) and the function name.
composition: Using an expression as part of a larger expression, or a statement as part of a larger
statement.
ﬂow of execution: The order in which statements are executed during a program run.
stack diagram: A graphical representation of a stack of functions, their variables, and the values
they refer to.
frame: A box in a stack diagram that represents a function call. It contains the local variables and
parameters of the function.
traceback: A list of the functions that are executing, printed when an exception occurs.
3.15
Exercises
Exercise 3.3 Python provides a built-in function called len that returns the length of a string, so the
value of len('allen') is 5.
Write a function named right_justify that takes a string named s as a parameter and prints the
string with enough leading spaces so that the last letter of the string is in column 70 of the display.
>>> right_justify('allen')
allen
Exercise 3.4 A function object is a value you can assign to a variable or pass as an argument. For
example, do_twice is a function that takes a function object as an argument and calls it twice:
def do_twice(f):
f()
f()

3.15. Exercises
27
Here’s an example that uses do_twice to call a function named print_spam twice.
def print_spam():
print 'spam'
do_twice(print_spam)
1. Type this example into a script and test it.
2. Modify do_twice so that it takes two arguments, a function object and a value, and calls the
function twice, passing the value as an argument.
3. Write a more general version of print_spam, called print_twice, that takes a string as a
parameter and prints it twice.
4. Use the modiﬁed version of do_twice to call print_twice twice, passing 'spam' as an
argument.
5. Deﬁne a new function called do_four that takes a function object and a value and calls the
function four times, passing the value as a parameter. There should be only two statements in
the body of this function, not four.
You can see my solution at thinkpython.com/code/do_four.py.
Exercise 3.5 This exercise2 can be done using only the statements and other features we have
learned so far.
1. Write a function that draws a grid like the following:
+ - - - - + - - - - +
|
|
|
|
|
|
|
|
|
|
|
|
+ - - - - + - - - - +
|
|
|
|
|
|
|
|
|
|
|
|
+ - - - - + - - - - +
Hint: to print more than one value on a line, you can print a comma-separated sequence:
print '+', '-'
If the sequence ends with a comma, Python leaves the line unﬁnished, so the value printed
next appears on the same line.
print '+',
print '-'
The output of these statements is '+ -'.
A print statement all by itself ends the current line and goes to the next line.
2Based on an exercise in Oualline, Practical C Programming, Third Edition, O’Reilly (1997)

28
Chapter 3. Functions
2. Use the previous function to draw a similar grid with four rows and four columns.
You can see my solution at thinkpython.com/code/grid.py.

Chapter 4
Case study: interface design
4.1
TurtleWorld
To accompany this book, I have written a suite of modules called Swampy. One of these modules
is TurtleWorld, which provides a set of functions for drawing lines by steering turtles around the
screen.
You can download Swampy from thinkpython.com/swampy; follow the instructions there to install
Swampy on your system.
Move into the directory that contains TurtleWorld.py, create a ﬁle named polygon.py and type
in the following code:
from TurtleWorld import *
world = TurtleWorld()
bob = Turtle()
print bob
wait_for_user()
The ﬁrst line is a variation of the import statement we saw before; instead of creating a module
object, it imports the functions from the module directly, so you can access them without using dot
notation.
The next lines create a TurtleWorld assigned to world and a Turtle assigned to bob. Printing bob
yields something like:
<TurtleWorld.Turtle instance at 0xb7bfbf4c>
This means that bob refers to an instance of a Turtle as deﬁned in module TurtleWorld. In this
context, “instance” means a member of a set; this Turtle is one of the set of possible Turtles.
wait_for_user tells TurtleWorld to wait for the user to do something, although in this case there’s
not much for the user to do except close the window.
TurtleWorld provides several turtle-steering functions: fd and bk for forward and backward, and lt
and rt for left and right turns. Also, each Turtle is holding a pen, which is either down or up; if the

30
Chapter 4. Case study: interface design
pen is down, the Turtle leaves a trail when it moves. The functions pu and pd stand for “pen up” and
“pen down.”
To draw a right angle, add these lines to the program (after creating bob and before calling
wait_for_user):
fd(bob, 100)
rt(bob)
fd(bob, 100)
The ﬁrst line tells bob to take 100 steps forward. The second line tells him to turn right.
When you run this program, you should see bob move east and then south, leaving two line segments
behind.
Now modify the program to draw a square. Don’t go on until you’ve got it working!
4.2
Simple repetition
Chances are you wrote something like this (leaving out the code that creates TurtleWorld and waits
for the user):
fd(bob, 100)
lt(bob)
fd(bob, 100)
lt(bob)
fd(bob, 100)
lt(bob)
fd(bob, 100)
We can do the same thing more concisely with a for statement. Add this example to polygon.py
and run it again:
for i in range(4):
print 'Hello!'
You should see something like this:
Hello!
Hello!
Hello!
Hello!
This is the simplest use of the for statement; we will see more later. But that should be enough to
let you rewrite your square-drawing program. Don’t go on until you do.
Here is a for statement that draws a square:
for i in range(4):
fd(bob, 100)
lt(bob)

4.3. Exercises
31
The syntax of a for statement is similar to a function deﬁnition. It has a header that ends with a
colon and an indented body. The body can contain any number of statements.
A for statement is sometimes called a loop because the ﬂow of execution runs through the body
and then loops back to the top. In this case, it runs the body four times.
This version is actually a little different from the previous square-drawing code because it makes
another left turn after drawing the last side of the square. The extra turn takes a little more time, but
it simpliﬁes the code if we do the same thing every time through the loop. This version also has the
effect of leaving the turtle back in the starting position, facing in the starting direction.
4.3
Exercises
The following is a series of exercises using TurtleWorld. They are meant to be fun, but they have a
point, too. While you are working on them, think about what the point is.
The following sections have solutions to the exercises, so don’t look until you have ﬁnished (or at
least tried).
1. Write a function called square that takes a parameter named t, which is a turtle. It should
use the turtle to draw a square.
Write a function call that passes bob as an argument to square, and then run the program
again.
2. Add another parameter, named length, to square. Modify the body so length of the sides is
length, and then modify the function call to provide a second argument. Run the program
again. Test your program with a range of values for length.
3. The functions lt and rt make 90-degree turns by default, but you can provide a second
argument that speciﬁes the number of degrees. For example, lt(bob, 45) turns bob 45
degrees to the left.
Make a copy of square and change the name to polygon. Add another parameter named n
and modify the body so it draws an n-sided regular polygon. Hint: The exterior angles of an
n-sided regular polygon are 360.0/n degrees.
4. Write a function called circle that takes a turtle, t, and radius, r, as parameters and that
draws an approximate circle by invoking polygon with an appropriate length and number of
sides. Test your function with a range of values of r.
Hint:
ﬁgure out the circumference of the circle and make sure that length * n =
circumference.
Another hint: if bob is too slow for you, you can speed him up by changing bob.delay, which
is the time between moves, in seconds. bob.delay = 0.01 ought to get him moving.
5. Make a more general version of circle called arc that takes an additional parameter angle,
which determines what fraction of a circle to draw. angle is in units of degrees, so when
angle=360, arc should draw a complete circle.

32
Chapter 4. Case study: interface design
4.4
Encapsulation
The ﬁrst exercise asks you to put your square-drawing code into a function deﬁnition and then call
the function, passing the turtle as a parameter. Here is a solution:
def square(t):
for i in range(4):
fd(t, 100)
lt(t)
square(bob)
The innermost statements, fd and lt are indented twice to show that they are inside the for loop,
which is inside the function deﬁnition. The next line, square(bob), is ﬂush with the left margin, so
that is the end of both the for loop and the function deﬁnition.
Inside the function, t refers to the same turtle bob refers to, so lt(t) has the same effect as lt(bob).
So why not call the parameter bob? The idea is that t can be any turtle, not just bob, so you could
create a second turtle and pass it as an argument to square:
ray = Turtle()
square(ray)
Wrapping a piece of code up in a function is called encapsulation. One of the beneﬁts of encap-
sulation is that it attaches a name to the code, which serves as a kind of documentation. Another
advantage is that if you re-use the code, it is more concise to call a function twice than to copy and
paste the body!
4.5
Generalization
The next step is to add a length parameter to square. Here is a solution:
def square(t, length):
for i in range(4):
fd(t, length)
lt(t)
square(bob, 100)
Adding a parameter to a function is called generalization because it makes the function more gen-
eral: in the previous version, the square is always the same size; in this version it can be any size.
The next step is also a generalization. Instead of drawing squares, polygon draws regular polygons
with any number of sides. Here is a solution:
def polygon(t, n, length):
angle = 360.0 / n
for i in range(n):
fd(t, length)
lt(t, angle)
polygon(bob, 7, 70)

4.6. Interface design
33
This draws a 7-sided polygon with side length 70. If you have more than a few numeric arguments,
it is easy to forget what they are, or what order they should be in. It is legal, and sometimes helpful,
to include the names of the parameters in the argument list:
polygon(bob, n=7, length=70)
These are called keyword arguments because they include the parameter names as “keywords” (not
to be confused with Python keywords like while and def).
This syntax makes the program more readable. It is also a reminder about how arguments and
parameters work: when you call a function, the arguments are assigned to the parameters.
4.6
Interface design
The next step is to write circle, which takes a radius, r, as a parameter. Here is a simple solution
that uses polygon to draw a 50-sided polygon:
def circle(t, r):
circumference = 2 * math.pi * r
n = 50
length = circumference / n
polygon(t, n, length)
The ﬁrst line computes the circumference of a circle with radius r using the formula 2πr. Since
we use math.pi, we have to import math. By convention, import statements are usually at the
beginning of the script.
n is the number of line segments in our approximation of a circle, so length is the length of each
segment. Thus, polygon draws a 50-sides polygon that approximates a circle with radius r.
One limitation of this solution is that n is a constant, which means that for very big circles, the
line segments are too long, and for small circles, we waste time drawing very small segments. One
solution would be to generalize the function by taking n as a parameter. This would give the user
(whoever calls circle) more control, but the interface would be less clean.
The interface of a function is a summary of how it is used: what are the parameters? What does the
function do? And what is the return value? An interface is “clean” if it is “as simple as possible, but
not simpler. (Einstein)”
In this example, r belongs in the interface because it speciﬁes the circle to be drawn. n is less
appropriate because it pertains to the details of how the circle should be rendered.
Rather than clutter up the interface, it is better to choose an appropriate value of n depending on
circumference:
def circle(t, r):
circumference = 2 * math.pi * r
n = int(circumference / 3) + 1
length = circumference / n
polygon(t, n, length)
Now the number of segments is (approximately) circumference/3, so the length of each segment
is (approximately) 3, which is small enough that the circles look good, but big enough to be efﬁcient,
and appropriate for any size circle.

34
Chapter 4. Case study: interface design
4.7
Refactoring
When I wrote circle, I was able to re-use polygon because a many-sided polygon is a good ap-
proximation of a circle. But arc is not as cooperative; we can’t use polygon or circle to draw an
arc.
One alternative is to start with a copy of polygon and transform it into arc. The result might look
like this:
def arc(t, r, angle):
arc_length = 2 * math.pi * r * angle / 360
n = int(arc_length / 3) + 1
step_length = arc_length / n
step_angle = float(angle) / n
for i in range(n):
fd(t, step_length)
lt(t, step_angle)
The second half of this function looks like polygon, but we can’t re-use polygon without changing
the interface. We could generalize polygon to take an angle as a third argument, but then polygon
would no longer be an appropriate name! Instead, let’s call the more general function polyline:
def polyline(t, n, length, angle):
for i in range(n):
fd(t, length)
lt(t, angle)
Now we can rewrite polygon and arc to use polyline:
def polygon(t, n, length):
angle = 360.0 / n
polyline(t, n, length, angle)
def arc(t, r, angle):
arc_length = 2 * math.pi * r * angle / 360
n = int(arc_length / 3) + 1
step_length = arc_length / n
step_angle = float(angle) / n
polyline(t, n, step_length, step_angle)
Finally, we can rewrite circle to use arc:
def circle(t, r):
arc(t, r, 360)
This process—rearranging a program to improve function interfaces and facilitate code re-use—is
called refactoring. In this case, we noticed that there was similar code in arc and polygon, so we
“factored it out” into polyline.
If we had planned ahead, we might have written polyline ﬁrst and avoided refactoring, but often
you don’t know enough at the beginning of a project to design all the interfaces. Once you start
coding, you understand the problem better. Sometimes refactoring is a sign that you have learned
something.

4.8. A development plan
35
4.8
A development plan
A development plan is a process for writing programs. The process we used in this case study is
“encapsulation and generalization.” The steps of this process are:
1. Start by writing a small program with no function deﬁnitions.
2. Once you get the program working, encapsulate it in a function and give it a name.
3. Generalize the function by adding appropriate parameters.
4. Repeat steps 1–3 until you have a set of working functions. Copy and paste working code to
avoid retyping (and re-debugging).
5. Look for opportunities to improve the program by refactoring. For example, if you have
similar code in several places, consider factoring it into an appropriately general function.
This process has some drawbacks—we will see alternatives later—but it can be useful if you don’t
know ahead of time how to divide the program into functions. This approach lets you design as you
go along.
4.9
docstring
A docstring is a string at the beginning of a function that explains the interface (“doc” is short for
“documentation”). Here is an example:
def polyline(t, length, n, angle):
"""Draw n line segments with the given length and
angle (in degrees) between them.
t is a turtle.
"""
for i in range(n):
fd(t, length)
lt(t, angle)
This docstring is a triple-quoted string, also known as a multiline string because the triple quotes
allow the string to span more than one line.
It is terse, but it contains the essential information someone would need to use this function. It
explains concisely what the function does (without getting into the details of how it does it). It
explains what effect each parameter has on the behavior of the function and what type each parameter
should be (if it is not obvious).
Writing this kind of documentation is an important part of interface design. A well-designed inter-
face should be simple to explain; if you are having a hard time explaining one of your functions, that
might be a sign that the interface could be improved.
4.10
Debugging
An interface is like a contract between a function and a caller. The caller agrees to provide certain
parameters and the function agrees to do certain work.

36
Chapter 4. Case study: interface design
For example, polyline requires four arguments. The ﬁrst has to be a Turtle (or some other object
that works with fd and lt). The second has to be a number, and it should probably be positive,
although it turns out that the function works even if it isn’t. The third argument should be an integer;
range complains otherwise (depending on which version of Python you are running). The fourth
has to be a number, which is understood to be in degrees.
These requirements are called preconditions because they are supposed to be true before the func-
tion starts executing. Conversely, conditions at the end of the function are postconditions. Postcon-
ditions include the intended effect of the function (like drawing line segments) and any side effects
(like moving the Turtle or making other changes in the World).
Preconditions are the responsibility of the caller. If the caller violates a (properly documented!)
precondition and the function doesn’t work correctly, the bug is in the caller, not the function. How-
ever, for purposes of debugging it is often a good idea for functions to check their preconditions
rather than assume they are true. If every function checks its preconditions before starting, then if
something goes wrong, you will know which function to blame.
4.11
Glossary
instance: A member of a set. The TurtleWorld in this chapter is a member of the set of Turtle-
Worlds.
loop: A part of a program that can execute repeatedly.
encapsulation: The process of transforming a sequence of statements into a function deﬁnition.
generalization: The process of replacing something unnecessarily speciﬁc (like a number) with
something appropriately general (like a variable or parameter).
keyword argument: An argument that includes the name of the parameter as a “keyword.”
interface: A description of how to use a function, including the name and descriptions of the argu-
ments and return value.
development plan: A process for writing programs.
docstring: A string that appears in a function deﬁnition to document the function’s interface.
precondition: A requirement that should be satisﬁed by the caller before a function starts.
postcondition: A requirement that should be satisﬁed by the function before it ends.
4.12
Exercises
Exercise 4.1 Download the code in this chapter from thinkpython.com/code/polygon.py.
1. Write appropriate docstrings for polygon, arc and circle.
2. Draw a stack diagram that shows the state of the program while executing circle(bob,
radius). You can do the arithmetic by hand or add print statements to the code.

4.12. Exercises
37
3. The version of arc in Section 4.7 is not very accurate because the linear approximation of the
circle is always outside the true circle. As a result, the turtle ends up a few units away from
the correct destination. My solution shows a way to reduce the effect of this error. Read the
code and see if it makes sense to you. If you draw a diagram, you might see how it works.
Exercise 4.2 Write an appropriately general set of functions that can draw ﬂowers like this:
You can download a solution from thinkpython.com/code/flower.py.
Exercise 4.3 Write an appropriately general set of functions that can draw shapes like this:
You can download a solution from thinkpython.com/code/pie.py.
Exercise 4.4 The letters of the alphabet can be constructed from a moderate number of basic ele-
ments, like vertical and horizontal lines and a few curves. Design a font that can be drawn with a
minimal number of basic elements and then write functions that draw letters of the alphabet.
You should write one function for each letter, with names draw_a, draw_b, etc., and put your func-
tions in a ﬁle named letters.py. You can download a “turtle typewriter” from thinkpython.
com/code/typewriter.py to help you test your code.
You can download a solution from thinkpython.com/code/letters.py.

38
Chapter 4. Case study: interface design

Chapter 5
Conditionals and recursion
5.1
Modulus operator
The modulus operator works on integers and yields the remainder when the ﬁrst operand is divided
by the second. In Python, the modulus operator is a percent sign (%). The syntax is the same as for
other operators:
>>> quotient = 7 / 3
>>> print quotient
2
>>> remainder = 7 % 3
>>> print remainder
1
So 7 divided by 3 is 2 with 1 left over.
The modulus operator turns out to be surprisingly useful. For example, you can check whether one
number is divisible by another—if x % y is zero, then x is divisible by y.
Also, you can extract the right-most digit or digits from a number. For example, x % 10 yields the
right-most digit of x (in base 10). Similarly x % 100 yields the last two digits.
5.2
Boolean expressions
A boolean expression is an expression that is either true or false. The following examples use
the operator ==, which compares two operands and produces True if they are equal and False
otherwise:
>>> 5 == 5
True
>>> 5 == 6
False
True and False are special values that belong to the type bool; they are not strings:

40
Chapter 5. Conditionals and recursion
>>> type(True)
<type 'bool'>
>>> type(False)
<type 'bool'>
The == operator is one of the comparison operators; the others are:
x != y
# x is not equal to y
x > y
# x is greater than y
x < y
# x is less than y
x >= y
# x is greater than or equal to y
x <= y
# x is less than or equal to y
Although these operations are probably familiar to you, the Python symbols are different from the
mathematical symbols. A common error is to use a single equal sign (=) instead of a double equal
sign (==). Remember that = is an assignment operator and == is a comparison operator. There is no
such thing as =< or =>.
5.3
Logical operators
There are three logical operators: and, or, and not. The semantics (meaning) of these operators
is similar to their meaning in English. For example, x > 0 and x < 10 is true only if x is greater
than 0 and less than 10.
n%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the number is divisible
by 2 or 3.
Finally, the not operator negates a boolean expression, so not (x > y) is true if x > y is false,
that is, if x is less than or equal to y.
Strictly speaking, the operands of the logical operators should be boolean expressions, but Python is
not very strict. Any nonzero number is interpreted as “true.”
>>> 17 and True
True
This ﬂexibility can be useful, but there are some subtleties to it that might be confusing. You might
want to avoid it (unless you know what you are doing).
5.4
Conditional execution
In order to write useful programs, we almost always need the ability to check conditions and change
the behavior of the program accordingly. Conditional statements give us this ability. The simplest
form is the if statement:
if x > 0:
print 'x is positive'
The boolean expression after the if statement is called the condition. If it is true, then the indented
statement gets executed. If not, nothing happens.

5.5. Alternative execution
41
if statements have the same structure as function deﬁnitions: a header followed by an indented
block. Statements like this are called compound statements.
There is no limit on the number of statements that can appear in the body, but there has to be at least
one. Occasionally, it is useful to have a body with no statements (usually as a place keeper for code
you haven’t written yet). In that case, you can use the pass statement, which does nothing.
if x < 0:
pass
# need to handle negative values!
5.5
Alternative execution
A second form of the if statement is alternative execution, in which there are two possibilities and
the condition determines which one gets executed. The syntax looks like this:
if x%2 == 0:
print 'x is even'
else:
print 'x is odd'
If the remainder when x is divided by 2 is 0, then we know that x is even, and the program displays
a message to that effect. If the condition is false, the second set of statements is executed. Since the
condition must be true or false, exactly one of the alternatives will be executed. The alternatives are
called branches, because they are branches in the ﬂow of execution.
5.6
Chained conditionals
Sometimes there are more than two possibilities and we need more than two branches. One way to
express a computation like that is a chained conditional:
if x < y:
print 'x is less than y'
elif x > y:
print 'x is greater than y'
else:
print 'x and y are equal'
elif is an abbreviation of “else if.” Again, exactly one branch will be executed. There is no limit on
the number of elif statements. If there is an else clause, it has to be at the end, but there doesn’t
have to be one.
if choice == 'a':
draw_a()
elif choice == 'b':
draw_b()
elif choice == 'c':
draw_c()
Each condition is checked in order. If the ﬁrst is false, the next is checked, and so on. If one of them
is true, the corresponding branch executes, and the statement ends. Even if more than one condition
is true, only the ﬁrst true branch executes.

42
Chapter 5. Conditionals and recursion
5.7
Nested conditionals
One conditional can also be nested within another. We could have written the trichotomy example
like this:
if x == y:
print 'x and y are equal'
else:
if x < y:
print 'x is less than y'
else:
print 'x is greater than y'
The outer conditional contains two branches. The ﬁrst branch contains a simple statement. The sec-
ond branch contains another if statement, which has two branches of its own. Those two branches
are both simple statements, although they could have been conditional statements as well.
Although the indentation of the statements makes the structure apparent, nested conditionals be-
come difﬁcult to read very quickly. In general, it is a good idea to avoid them when you can.
Logical operators often provide a way to simplify nested conditional statements. For example, we
can rewrite the following code using a single conditional:
if 0 < x:
if x < 10:
print 'x is a positive single-digit number.'
The print statement is executed only if we make it past both conditionals, so we can get the same
effect with the and operator:
if 0 < x and x < 10:
print 'x is a positive single-digit number.'
5.8
Recursion
It is legal for one function to call another; it is also legal for a function to call itself. It may not be
obvious why that is a good thing, but it turns out to be one of the most magical things a program can
do. For example, look at the following function:
def countdown(n):
if n <= 0:
print 'Blastoff!'
else:
print n
countdown(n-1)
If n is 0 or negative, it outputs the word, “Blastoff!” Otherwise, it outputs n and then calls a function
named countdown—itself—passing n-1 as an argument.
What happens if we call this function like this?
>>> countdown(3)

5.9. Stack diagrams for recursive functions
43
The execution of countdown begins with n=3, and since n is greater than 0, it outputs the value 3,
and then calls itself...
The execution of countdown begins with n=2, and since n is greater than 0, it outputs
the value 2, and then calls itself...
The execution of countdown begins with n=1, and since n is greater than 0,
it outputs the value 1, and then calls itself...
The execution of countdown begins with n=0, and since n is not
greater than 0, it outputs the word, “Blastoff!” and then returns.
The countdown that got n=1 returns.
The countdown that got n=2 returns.
The countdown that got n=3 returns.
And then you’re back in __main__. So, the total output looks like this:
3
2
1
Blastoff!
A function that calls itself is recursive; the process is called recursion.
As another example, we can write a function that prints a string n times.
def print_n(s, n):
if n <= 0:
return
print s
print_n(s, n-1)
If n <= 0 the return statement exits the function. The ﬂow of execution immediately returns to the
caller, and the remaining lines of the function are not executed.
The rest of the function is similar to countdown: if n is greater than 0, it displays s and then calls
itself to display s n −1 additional times. So the number of lines of output is 1 + (n - 1), which
adds up to n.
For simple examples like this, it is probably easier to use a for loop. But we will see examples later
that are hard to write with a for loop and easy to write with recursion, so it is good to start early.
5.9
Stack diagrams for recursive functions
In Section 3.10, we used a stack diagram to represent the state of a program during a function call.
The same kind of diagram can help interpret a recursive function.
Every time a function gets called, Python creates a new function frame, which contains the function’s
local variables and parameters. For a recursive function, there might be more than one frame on the
stack at the same time.
This ﬁgure shows a stack diagram for countdown called with n = 3:

44
Chapter 5. Conditionals and recursion
__main__
countdown
countdown
countdown
countdown
n
3
n
2
n
1
n
0
As usual, the top of the stack is the frame for __main__. It is empty because we did not create any
variables in __main__ or pass any arguments to it.
The four countdown frames have different values for the parameter n. The bottom of the stack,
where n=0, is called the base case. It does not make a recursive call, so there are no more frames.
Draw a stack diagram for print_n called with s = 'Hello' and n=2.
Write a function called do_n that takes a function object and a number, n, as arguments,
and that calls the given function n times.
5.10
Inﬁnite recursion
If a recursion never reaches a base case, it goes on making recursive calls forever, and the program
never terminates. This is known as inﬁnite recursion, and it is generally not a good idea. Here is a
minimal program with an inﬁnite recursion:
def recurse():
recurse()
In most programming environments, a program with inﬁnite recursion does not really run forever.
Python reports an error message when the maximum recursion depth is reached:
File "<stdin>", line 2, in recurse
File "<stdin>", line 2, in recurse
File "<stdin>", line 2, in recurse
.
.
.
File "<stdin>", line 2, in recurse
RuntimeError: Maximum recursion depth exceeded
This traceback is a little bigger than the one we saw in the previous chapter. When the error occurs,
there are 1000 recurse frames on the stack!

5.11. Keyboard input
45
5.11
Keyboard input
The programs we have written so far are a bit rude in the sense that they accept no input from the
user. They just do the same thing every time.
Python provides a built-in function called raw_input that gets input from the keyboard1. When this
function is called, the program stops and waits for the user to type something. When the user presses
Return or Enter, the program resumes and raw_input returns what the user typed as a string.
>>> input = raw_input()
What are you waiting for?
>>> print input
What are you waiting for?
Before getting input from the user, it is a good idea to print a prompt telling the user what to input.
raw_input can take a prompt as an argument:
>>> name = raw_input('What...is your name?\n')
What...is your name?
Arthur, King of the Britons!
>>> print name
Arthur, King of the Britons!
The sequence \n at the end of the prompt represents a newline, which is a special character that
causes a line break. That’s why the user’s input appears below the prompt.
If you expect the user to type an integer, you can try to convert the return value to int:
>>> prompt = 'What...is the airspeed velocity of an unladen swallow?\n'
>>> speed = raw_input(prompt)
What...is the airspeed velocity of an unladen swallow?
17
>>> int(speed)
17
But if the user types something other than a string of digits, you get an error:
>>> speed = raw_input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int()
We will see how to handle this kind of error later.
5.12
Debugging
The traceback Python displays when an error occurs contains a lot of information, but it can be
overwhelming, especially when there are many frames on the stack. The most useful parts are
usually:
1In Python 3.0, this function is named input.

46
Chapter 5. Conditionals and recursion
• What kind of error it was, and
• Where it occurred.
Syntax errors are usually easy to ﬁnd, but there are a few gotchas. Whitespace errors can be tricky
because spaces and tabs are invisible and we are used to ignoring them.
>>> x = 5
>>>
y = 6
File "<stdin>", line 1
y = 6
ˆ
SyntaxError: invalid syntax
In this example, the problem is that the second line is indented by one space. But the error mes-
sage points to y, which is misleading. In general, error messages indicate where the problem was
discovered, but the actual error might be earlier in the code, sometimes on a previous line.
The same is true of runtime errors. Suppose you are trying to compute a signal-to-noise ratio in
decibels. The formula is SNRdb = 10log10(Psignal/Pnoise). In Python, you might write something
like this:
import math
signal_power = 9
noise_power = 10
ratio = signal_power / noise_power
decibels = 10 * math.log10(ratio)
print decibels
But when you run it, you get an error message2:
Traceback (most recent call last):
File "snr.py", line 5, in ?
decibels = 10 * math.log10(ratio)
OverflowError: math range error
The error message indicates line 5, but there is nothing wrong with that line. To ﬁnd the real error,
it might be useful to print the value of ratio, which turns out to be 0. The problem is in line 4,
because dividing two integers does ﬂoor division. The solution is to represent signal power and
noise power with ﬂoating-point values.
In general, error messages tell you where the problem was discovered, but that is often not where it
was caused.
5.13
Glossary
modulus operator: An operator, denoted with a percent sign (%), that works on integers and yields
the remainder when one number is divided by another.
boolean expression: An expression whose value is either True or False.
2In Python 3.0, you no longer get an error message; the division operator performs ﬂoating-point division even with
integer operands.

5.14. Exercises
47
comparison operator: One of the operators that compares its operands: ==, !=, >, <, >=, and <=.
logical operator: One of the operators that combines boolean expressions: and, or, and not.
conditional statement: A statement that controls the ﬂow of execution depending on some condi-
tion.
condition: The boolean expression in a conditional statement that determines which branch is exe-
cuted.
compound statement: A statement that consists of a header and a body. The header ends with a
colon (:). The body is indented relative to the header.
body: The sequence of statements within a compound statement.
branch: One of the alternative sequences of statements in a conditional statement.
chained conditional: A conditional statement with a series of alternative branches.
nested conditional: A conditional statement that appears in one of the branches of another condi-
tional statement.
recursion: The process of calling the function that is currently executing.
base case: A conditional branch in a recursive function that does not make a recursive call.
inﬁnite recursion: A function that calls itself recursively without ever reaching the base case.
Eventually, an inﬁnite recursion causes a runtime error.
5.14
Exercises
Exercise 5.1 Fermat’s Last Theorem says that there are no integers a, b, and c such that
an +bn = cn
for any values of n greater than 2.
1. Write a function named check_fermat that takes four parameters—a, b, c and n—and that
checks to see if Fermat’s theorem holds. If n is greater than 2 and it turns out to be true that
an +bn = cn
the program should print, “Holy smokes, Fermat was wrong!” Otherwise the program should
print, “No, that doesn’t work.”
2. Write a function that prompts the user to input values for a, b, c and n, converts them to
integers, and uses check_fermat to check whether they violate Fermat’s theorem.
Exercise 5.2 If you are given three sticks, you may or may not be able to arrange them in a triangle.
For example, if one of the sticks is 12 inches long and the other two are one inch long, it is clear
that you will not be able to get the short sticks to meet in the middle. For any three lengths, there is
a simple test to see if it is possible to form a triangle:

48
Chapter 5. Conditionals and recursion
“If any of the three lengths is greater than the sum of the other two, then you cannot
form a triangle. Otherwise, you can3.”
1. Write a function named is_triangle that takes three integers as arguments, and that prints
either “Yes” or “No,” depending on whether you can or cannot form a triangle from sticks
with the given lengths.
2. Write a function that prompts the user to input three stick lengths, converts them to integers,
and uses is_triangle to check whether sticks with the given lengths can form a triangle.
The following exercises use TurtleWorld from Chapter 4:
Exercise 5.3 Read the following function and see if you can ﬁgure out what it does. Then run it
(see the examples in Chapter 4).
def draw(t, length, n):
if n == 0:
return
angle = 50
fd(t, length*n)
lt(t, angle)
draw(t, length, n-1)
rt(t, 2*angle)
draw(t, length, n-1)
lt(t, angle)
bk(t, length*n)
Exercise 5.4 The Koch curve is a fractal that looks something like this:
To draw a Koch curve with length x, all you have to do is
1. Draw a Koch curve with length x/3.
2. Turn left 60 degrees.
3. Draw a Koch curve with length x/3.
4. Turn right 120 degrees.
5. Draw a Koch curve with length x/3.
6. Turn left 60 degrees.
7. Draw a Koch curve with length x/3.
The only exception is if x is less than 3. In that case, you can just draw a straight line with length x.
3If the sum of two lengths equals the third, they form what is called a “degenerate” triangle.

5.14. Exercises
49
1. Write a function called koch that takes a turtle and a length as parameters, and that uses the
turtle to draw a Koch curve with the given length.
2. Write a function called snowflake that draws three Koch curves to make the outline of a
snowﬂake.
You can see my solution at thinkpython.com/code/koch.py.
3. The Koch curve can be generalized in several ways.
See wikipedia.org/wiki/Koch_
snowflake for examples and implement your favorite.

50
Chapter 5. Conditionals and recursion

Chapter 6
Fruitful functions
6.1
Return values
Some of the built-in functions we have used, such as the math functions, produce results. Calling
the function generates a value, which we usually assign to a variable or use as part of an expression.
e = math.exp(1.0)
height = radius * math.sin(radians)
All of the functions we have written so far are void; they print something or move turtles around,
but their return value is None.
In this chapter, we are (ﬁnally) going to write fruitful functions. The ﬁrst example is area, which
returns the area of a circle with the given radius:
def area(radius):
temp = math.pi * radius**2
return temp
We have seen the return statement before, but in a fruitful function the return statement includes
an expression. This statement means: “Return immediately from this function and use the following
expression as a return value.” The expression can be arbitrarily complicated, so we could have
written this function more concisely:
def area(radius):
return math.pi * radius**2
On the other hand, temporary variables like temp often make debugging easier.
Sometimes it is useful to have multiple return statements, one in each branch of a conditional:
def absolute_value(x):
if x < 0:
return -x
else:
return x

52
Chapter 6. Fruitful functions
Since these return statements are in an alternative conditional, only one will be executed.
As soon as a return statement executes, the function terminates without executing any subsequent
statements. Code that appears after a return statement, or any other place the ﬂow of execution can
never reach, is called dead code.
In a fruitful function, it is a good idea to ensure that every possible path through the program hits a
return statement. For example:
def absolute_value(x):
if x < 0:
return -x
if x > 0:
return x
This function is incorrect because if x happens to be 0, neither condition is true, and the function
ends without hitting a return statement. If the ﬂow of execution gets to the end of a function, the
return value is None, which is not the absolute value of 0.
>>> print absolute_value(0)
None
By the way, Python provides a built-in function called abs that computes absolute values.
Exercise 6.1 Write a compare function that returns 1 if x > y, 0 if x == y, and -1 if x < y.
6.2
Incremental development
As you write larger functions, you might ﬁnd yourself spending more time debugging.
To deal with increasingly complex programs, you might want to try a process called incremental
development. The goal of incremental development is to avoid long debugging sessions by adding
and testing only a small amount of code at a time.
As an example, suppose you want to ﬁnd the distance between two points, given by the coordinates
(x1,y1) and (x2,y2). By the Pythagorean theorem, the distance is:
distance =
q
(x2 −x1)2 +(y2 −y1)2
The ﬁrst step is to consider what a distance function should look like in Python. In other words,
what are the inputs (parameters) and what is the output (return value)?
In this case, the inputs are two points, which you can represent using four numbers. The return value
is the distance, which is a ﬂoating-point value.
Already you can write an outline of the function:
def distance(x1, y1, x2, y2):
return 0.0
Obviously, this version doesn’t compute distances; it always returns zero. But it is syntactically
correct, and it runs, which means that you can test it before you make it more complicated.
To test the new function, call it with sample arguments:

6.2. Incremental development
53
>>> distance(1, 2, 4, 6)
0.0
I chose these values so that the horizontal distance is 3 and the vertical distance is 4; that way, the
result is 5 (the hypotenuse of a 3-4-5 triangle). When testing a function, it is useful to know the right
answer.
At this point we have conﬁrmed that the function is syntactically correct, and we can start adding
code to the body. A reasonable next step is to ﬁnd the differences x2 −x1 and y2 −y1. The next
version stores those values in temporary variables and prints them.
def distance(x1, y1, x2, y2):
dx = x2 - x1
dy = y2 - y1
print 'dx is', dx
print 'dy is', dy
return 0.0
If the function is working, it should display 'dx is 3' and ’dy is 4’. If so, we know that the
function is getting the right arguments and performing the ﬁrst computation correctly. If not, there
are only a few lines to check.
Next we compute the sum of squares of dx and dy:
def distance(x1, y1, x2, y2):
dx = x2 - x1
dy = y2 - y1
dsquared = dx**2 + dy**2
print 'dsquared is: ', dsquared
return 0.0
Again, you would run the program at this stage and check the output (which should be 25). Finally,
you can use math.sqrt to compute and return the result:
def distance(x1, y1, x2, y2):
dx = x2 - x1
dy = y2 - y1
dsquared = dx**2 + dy**2
result = math.sqrt(dsquared)
return result
If that works correctly, you are done. Otherwise, you might want to print the value of result before
the return statement.
The ﬁnal version of the function doesn’t display anything when it runs; it only returns a value.
The print statements we wrote are useful for debugging, but once you get the function working,
you should remove them. Code like that is called scaffolding because it is helpful for building the
program but is not part of the ﬁnal product.
When you start out, you should add only a line or two of code at a time. As you gain more ex-
perience, you might ﬁnd yourself writing and debugging bigger chunks. Either way, incremental
development can save you a lot of debugging time.
The key aspects of the process are:

54
Chapter 6. Fruitful functions
1. Start with a working program and make small incremental changes. At any point, if there is
an error, you should have a good idea where it is.
2. Use temporary variables to hold intermediate values so you can display and check them.
3. Once the program is working, you might want to remove some of the scaffolding or consoli-
date multiple statements into compound expressions, but only if it does not make the program
difﬁcult to read.
Exercise 6.2 Use incremental development to write a function called hypotenuse that returns the
length of the hypotenuse of a right triangle given the lengths of the two legs as arguments. Record
each stage of the development process as you go.
6.3
Composition
As you should expect by now, you can call one function from within another. This ability is called
composition.
As an example, we’ll write a function that takes two points, the center of the circle and a point on
the perimeter, and computes the area of the circle.
Assume that the center point is stored in the variables xc and yc, and the perimeter point is in xp
and yp. The ﬁrst step is to ﬁnd the radius of the circle, which is the distance between the two points.
We just wrote a function, distance, that does that:
radius = distance(xc, yc, xp, yp)
The next step is to ﬁnd the area of a circle with that radius; we just wrote that, too:
result = area(radius)
Encapsulating these steps in a function, we get:
def circle_area(xc, yc, xp, yp):
radius = distance(xc, yc, xp, yp)
result = area(radius)
return result
The temporary variables radius and result are useful for development and debugging, but once
the program is working, we can make it more concise by composing the function calls:
def circle_area(xc, yc, xp, yp):
return area(distance(xc, yc, xp, yp))
6.4
Boolean functions
Functions can return booleans, which is often convenient for hiding complicated tests inside func-
tions. For example:
def is_divisible(x, y):
if x % y == 0:
return True
else:
return False

6.5. More recursion
55
It is common to give boolean functions names that sound like yes/no questions; is_divisible
returns either True or False to indicate whether x is divisible by y.
Here is an example:
>>>
is_divisible(6, 4)
False
>>>
is_divisible(6, 3)
True
The result of the == operator is a boolean, so we can write the function more concisely by returning
it directly:
def is_divisible(x, y):
return x % y == 0
Boolean functions are often used in conditional statements:
if is_divisible(x, y):
print 'x is divisible by y'
It might be tempting to write something like:
if is_divisible(x, y) == True:
print 'x is divisible by y'
But the extra comparison is unnecessary.
Exercise 6.3 Write a function is_between(x, y, z) that returns True if x ≤y ≤z or False
otherwise.
6.5
More recursion
We have only covered a small subset of Python, but you might be interested to know that this
subset is a complete programming language, which means that anything that can be computed can
be expressed in this language. Any program ever written could be rewritten using only the language
features you have learned so far (actually, you would need a few commands to control devices like
the keyboard, mouse, disks, etc., but that’s all).
Proving that claim is a nontrivial exercise ﬁrst accomplished by Alan Turing, one of the ﬁrst com-
puter scientists (some would argue that he was a mathematician, but a lot of early computer scientists
started as mathematicians). Accordingly, it is known as the Turing Thesis. For a more complete (and
accurate) discussion of the Turing Thesis, I recommend Michael Sipser’s book Introduction to the
Theory of Computation.
To give you an idea of what you can do with the tools you have learned so far, we’ll evaluate a few
recursively deﬁned mathematical functions. A recursive deﬁnition is similar to a circular deﬁnition,
in the sense that the deﬁnition contains a reference to the thing being deﬁned. A truly circular
deﬁnition is not very useful:
frabjous: An adjective used to describe something that is frabjous.

56
Chapter 6. Fruitful functions
If you saw that deﬁnition in the dictionary, you might be annoyed. On the other hand, if you looked
up the deﬁnition of the factorial function, denoted with the symbol !, you might get something like
this:
0! = 1
n! = n(n−1)!
This deﬁnition says that the factorial of 0 is 1, and the factorial of any other value, n, is n multiplied
by the factorial of n−1.
So 3! is 3 times 2!, which is 2 times 1!, which is 1 times 0!. Putting it all together, 3! equals 3 times
2 times 1 times 1, which is 6.
If you can write a recursive deﬁnition of something, you can usually write a Python program to
evaluate it. The ﬁrst step is to decide what the parameters should be. In this case it should be clear
that factorial takes an integer:
def factorial(n):
If the argument happens to be 0, all we have to do is return 1:
def factorial(n):
if n == 0:
return 1
Otherwise, and this is the interesting part, we have to make a recursive call to ﬁnd the factorial of
n−1 and then multiply it by n:
def factorial(n):
if n == 0:
return 1
else:
recurse = factorial(n-1)
result = n * recurse
return result
The ﬂow of execution for this program is similar to the ﬂow of countdown in Section 5.8. If we call
factorial with the value 3:
Since 3 is not 0, we take the second branch and calculate the factorial of n-1...
Since 2 is not 0, we take the second branch and calculate the factorial of n-1...
Since 1 is not 0, we take the second branch and calculate the factorial of
n-1...
Since 0 is 0, we take the ﬁrst branch and return 1 without making
any more recursive calls.
The return value (1) is multiplied by n, which is 1, and the result is returned.
The return value (1) is multiplied by n, which is 2, and the result is returned.
The return value (2) is multiplied by n, which is 3, and the result, 6, becomes the return value of the
function call that started the whole process.
Here is what the stack diagram looks like for this sequence of function calls:

6.6. Leap of faith
57
n
3
recurse
2
recurse
1
recurse
1
__main__
factorial
n
2
n
1
n
0
factorial
factorial
factorial
1
1
2
6
1
result
2
6
result
result
The return values are shown being passed back up the stack. In each frame, the return value is the
value of result, which is the product of n and recurse.
In the last frame, the local variables recurse and result do not exist, because the branch that
creates them does not execute.
6.6
Leap of faith
Following the ﬂow of execution is one way to read programs, but it can quickly become labyrinthine.
An alternative is what I call the “leap of faith.” When you come to a function call, instead of
following the ﬂow of execution, you assume that the function works correctly and returns the right
result.
In fact, you are already practicing this leap of faith when you use built-in functions. When you call
math.cos or math.exp, you don’t examine the bodies of those functions. You just assume that they
work because the people who wrote the built-in functions were good programmers.
The same is true when you call one of your own functions. For example, in Section 6.4, we wrote
a function called is_divisible that determines whether one number is divisible by another. Once
we have convinced ourselves that this function is correct—by examining the code and testing—we
can use the function without looking at the body again.
The same is true of recursive programs. When you get to the recursive call, instead of following
the ﬂow of execution, you should assume that the recursive call works (yields the correct result) and
then ask yourself, “Assuming that I can ﬁnd the factorial of n−1, can I compute the factorial of n?”
In this case, it is clear that you can, by multiplying by n.
Of course, it’s a bit strange to assume that the function works correctly when you haven’t ﬁnished
writing it, but that’s why it’s called a leap of faith!
6.7
One more example
After factorial, the most common example of a recursively deﬁned mathematical function is
fibonacci, which has the following deﬁnition1:
1See wikipedia.org/wiki/Fibonacci_number.

58
Chapter 6. Fruitful functions
ﬁbonacci(0) = 0
ﬁbonacci(1) = 1
ﬁbonacci(n) = ﬁbonacci(n−1)+ﬁbonacci(n−2);
Translated into Python, it looks like this:
def fibonacci (n):
if n == 0:
return 0
elif
n == 1:
return 1
else:
return fibonacci(n-1) + fibonacci(n-2)
If you try to follow the ﬂow of execution here, even for fairly small values of n, your head explodes.
But according to the leap of faith, if you assume that the two recursive calls work correctly, then it
is clear that you get the right result by adding them together.
6.8
Checking types
What happens if we call factorial and give it 1.5 as an argument?
>>> factorial(1.5)
RuntimeError: Maximum recursion depth exceeded
It looks like an inﬁnite recursion. But how can that be? There is a base case—when n == 0. But if
n is not an integer, we can miss the base case and recurse forever.
In the ﬁrst recursive call, the value of n is 0.5. In the next, it is -0.5. From there, it gets smaller
(more negative), but it will never be 0.
We have two choices. We can try to generalize the factorial function to work with ﬂoating-point
numbers, or we can make factorial check the type of its argument. The ﬁrst option is called the
gamma function2 and it’s a little beyond the scope of this book. So we’ll go for the second.
We can use the built-in function isinstance to verify the type of the argument. While we’re at it,
we can also make sure the argument is positive:
def factorial (n):
if not isinstance(n, int):
print 'Factorial is only defined for integers.'
return None
elif n < 0:
print 'Factorial is only defined for positive integers.'
return None
elif n == 0:
return 1
else:
return n * factorial(n-1)
2See wikipedia.org/wiki/Gamma_function.

6.9. Debugging
59
The ﬁrst base case handles nonintegers; the second catches negative integers. In both cases, the
program prints an error message and returns None to indicate that something went wrong:
>>> factorial('fred')
Factorial is only defined for integers.
None
>>> factorial(-2)
Factorial is only defined for positive integers.
None
If we get past both checks, then we know that n is a positive integer, and we can prove that the
recursion terminates.
This program demonstrates a pattern sometimes called a guardian. The ﬁrst two conditionals act
as guardians, protecting the code that follows from values that might cause an error. The guardians
make it possible to prove the correctness of the code.
6.9
Debugging
Breaking a large program into smaller functions creates natural checkpoints for debugging. If a
function is not working, there are three possibilities to consider:
• There is something wrong with the arguments the function is getting; a precondition is vio-
lated.
• There is something wrong with the function; a postcondition is violated.
• There is something wrong with the return value or the way it is being used.
To rule out the ﬁrst possibility, you can add a print statement at the beginning of the function and
display the values of the parameters (and maybe their types). Or you can write code that checks the
preconditions explicitly.
If the parameters look good, add a print statement before each return statement that displays the
return value. If possible, check the result by hand. Consider calling the function with values that
make it easy to check the result (as in Section 6.2).
If the function seems to be working, look at the function call to make sure the return value is being
used correctly (or used at all!).
Adding print statements at the beginning and end of a function can help make the ﬂow of execution
more visible. For example, here is a version of factorial with print statements:
def factorial(n):
space = ' ' * (4 * n)
print space, 'factorial', n
if n == 0:
print space, 'returning 1'
return 1
else:
recurse = factorial(n-1)
result = n * recurse
print space, 'returning', result
return result

60
Chapter 6. Fruitful functions
space is a string of space characters that controls the indentation of the output. Here is the result of
factorial(5) :
factorial 5
factorial 4
factorial 3
factorial 2
factorial 1
factorial 0
returning 1
returning 1
returning 2
returning 6
returning 24
returning 120
If you are confused about the ﬂow of execution, this kind of output can be helpful. It takes some
time to develop effective scaffolding, but a little bit of scaffolding can save a lot of debugging.
6.10
Glossary
temporary variable: A variable used to store an intermediate value in a complex calculation.
dead code: Part of a program that can never be executed, often because it appears after a return
statement.
None: A special value returned by functions that have no return statement or a return statement
without an argument.
incremental development: A program development plan intended to avoid debugging by adding
and testing only a small amount of code at a time.
scaffolding: Code that is used during program development but is not part of the ﬁnal version.
guardian: A programming pattern that uses a conditional statement to check for and handle cir-
cumstances that might cause an error.
6.11
Exercises
Exercise 6.4 Draw a stack diagram for the following program. What does the program print?
def b(z):
prod = a(z, z)
print z, prod
return prod
def a(x, y):
x = x + 1
return x * y
def c(x, y, z):

6.11. Exercises
61
sum = x + y + z
pow = b(sum)**2
return pow
x = 1
y = x + 1
print c(x, y+3, x+y)
Exercise 6.5 The Ackermann function, A(m,n), is deﬁned3:
A(m,n) =





n+1
if m = 0
A(m−1,1)
if m > 0 and n = 0
A(m−1,A(m,n−1))
if m > 0 and n > 0.
(6.1)
Write a function named ack that evaluates Ackerman’s function. Use your function to evaluate
ack(3, 4), which should be 125. What happens for larger values of m and n?
Exercise 6.6 A palindrome is a word that is spelled the same backward and forward, like “noon”
and “redivider”. Recursively, a word is a palindrome if the ﬁrst and last letters are the same and the
middle is a palindrome.
The following are functions that take a string argument and return the ﬁrst, last, and middle letters:
def first(word):
return word[0]
def last(word):
return word[-1]
def middle(word):
return word[1:-1]
We’ll see how they work in Chapter 8.
1. Type these functions into a ﬁle named palindrome.py and test them out. What happens if
you call middle with a string with two letters? One letter? What about the empty string,
which is written '' and contains no letters?
2. Write a function called is_palindrome that takes a string argument and returns True if it is
a palindrome and False otherwise. Remember that you can use the built-in function len to
check the length of a string.
Exercise 6.7 A number, a, is a power of b if it is divisible by b and a/b is a power of b. Write a
function called is_power that takes parameters a and b and returns True if a is a power of b.
Exercise 6.8 The greatest common divisor (GCD) of a and b is the largest number that divides both
of them with no remainder4.
3See wikipedia.org/wiki/Ackermann_function
4This exercise is based on an example from Abelson and Sussman’s Structure and Interpretation of Computer Programs.

62
Chapter 6. Fruitful functions
One way to ﬁnd the GCD of two numbers is Euclid’s algorithm, which is based on the observation
that if r is the remainder when a is divided by b, then gcd(a,b) = gcd(b,r). As a base case, we can
consider gcd(a,0) = a.
Write a function called gcd that takes parameters a and b and returns their greatest common divisor.
If you need help, see wikipedia.org/wiki/Euclidean_algorithm.

Chapter 7
Iteration
7.1
Multiple assignment
As you may have discovered, it is legal to make more than one assignment to the same variable. A
new assignment makes an existing variable refer to a new value (and stop referring to the old value).
bruce = 5
print bruce,
bruce = 7
print bruce
The output of this program is 5 7, because the ﬁrst time bruce is printed, its value is 5, and the
second time, its value is 7. The comma at the end of the ﬁrst print statement suppresses the
newline, which is why both outputs appear on the same line.
Here is what multiple assignment looks like in a state diagram:
7
5
bruce
With multiple assignment it is especially important to distinguish between an assignment operation
and a statement of equality. Because Python uses the equal sign (=) for assignment, it is tempting to
interpret a statement like a = b as a statement of equality. It is not!
First, equality is a symmetric relation and assignment is not. For example, in mathematics, if a = 7
then 7 = a. But in Python, the statement a = 7 is legal and 7 = a is not.
Furthermore, in mathematics, a statement of equality is either true or false, for all time. If a = b
now, then a will always equal b. In Python, an assignment statement can make two variables equal,
but they don’t have to stay that way:
a = 5
b = a
# a and b are now equal
a = 3
# a and b are no longer equal

64
Chapter 7. Iteration
The third line changes the value of a but does not change the value of b, so they are no longer equal.
Although multiple assignment is frequently helpful, you should use it with caution. If the values of
variables change frequently, it can make the code difﬁcult to read and debug.
7.2
Updating variables
One of the most common forms of multiple assignment is an update, where the new value of the
variable depends on the old.
x = x+1
This means “get the current value of x, add one, and then update x with the new value.”
If you try to update a variable that doesn’t exist, you get an error, because Python evaluates the right
side before it assigns a value to x:
>>> x = x+1
NameError: name 'x' is not defined
Before you can update a variable, you have to initialize it, usually with a simple assignment:
>>> x = 0
>>> x = x+1
Updating a variable by adding 1 is called an increment; subtracting 1 is called a decrement.
7.3
The while statement
Computers are often used to automate repetitive tasks. Repeating identical or similar tasks without
making errors is something that computers do well and people do poorly.
We have seen two programs, countdown and print_n, that use recursion to perform repetition,
which is also called iteration. Because iteration is so common, Python provides several language
features to make it easier. One is the for statement we saw in Section 4.2. We’ll get back to that
later.
Another is the while statement. Here is a version of countdown that uses a while statement:
def countdown(n):
while n > 0:
print n
n = n-1
print 'Blastoff!'
You can almost read the while statement as if it were English. It means, “While n is greater than
0, display the value of n and then reduce the value of n by 1. When you get to 0, display the word
Blastoff!”
More formally, here is the ﬂow of execution for a while statement:
1. Evaluate the condition, yielding True or False.

7.4. break
65
2. If the condition is false, exit the while statement and continue execution at the next statement.
3. If the condition is true, execute the body and then go back to step 1.
This type of ﬂow is called a loop because the third step loops back around to the top.
The body of the loop should change the value of one or more variables so that eventually the condi-
tion becomes false and the loop terminates. Otherwise the loop will repeat forever, which is called
an inﬁnite loop. An endless source of amusement for computer scientists is the observation that the
directions on shampoo, “Lather, rinse, repeat,” are an inﬁnite loop.
In the case of countdown, we can prove that the loop terminates because we know that the value of
n is ﬁnite, and we can see that the value of n gets smaller each time through the loop, so eventually
we have to get to 0. In other cases, it is not so easy to tell:
def sequence(n):
while n != 1:
print n,
if n%2 == 0:
# n is even
n = n/2
else:
# n is odd
n = n*3+1
The condition for this loop is n != 1, so the loop will continue until n is 1, which makes the
condition false.
Each time through the loop, the program outputs the value of n and then checks whether it is even or
odd. If it is even, n is divided by 2. If it is odd, the value of n is replaced with n*3+1. For example,
if the argument passed to sequence is 3, the resulting sequence is 3, 10, 5, 16, 8, 4, 2, 1.
Since n sometimes increases and sometimes decreases, there is no obvious proof that n will ever
reach 1, or that the program terminates. For some particular values of n, we can prove termination.
For example, if the starting value is a power of two, then the value of n will be even each time
through the loop until it reaches 1. The previous example ends with such a sequence, starting with
16.
The hard question is whether we can prove that this program terminates for all positive values of n.
So far1, no one has been able to prove it or disprove it!
Exercise 7.1 Rewrite the function print_n from Section 5.8 using iteration instead of recursion.
7.4
break
Sometimes you don’t know it’s time to end a loop until you get half way through the body. In that
case you can use the break statement to jump out of the loop.
For example, suppose you want to take input from the user until they type done. You could write:
while True:
line = raw_input('> ')
if line == 'done':
1See wikipedia.org/wiki/Collatz_conjecture.

66
Chapter 7. Iteration
break
print line
print 'Done!'
The loop condition is True, which is always true, so the loop runs until it hits the break statement.
Each time through, it prompts the user with an angle bracket. If the user types done, the break
statement exits the loop. Otherwise the program echoes whatever the user types and goes back to
the top of the loop. Here’s a sample run:
> not done
not done
> done
Done!
This way of writing while loops is common because you can check the condition anywhere in
the loop (not just at the top) and you can express the stop condition afﬁrmatively (“stop when this
happens”) rather than negatively (“keep going until that happens.”).
7.5
Square roots
Loops are often used in programs that compute numerical results by starting with an approximate
answer and iteratively improving it.
For example, one way of computing square roots is Newton’s method. Suppose that you want to
know the square root of a. If you start with almost any estimate, x, you can compute a better estimate
with the following formula:
y = x+a/x
2
For example, if a is 4 and x is 3:
>>> a = 4.0
>>> x = 3.0
>>> y = (x + a/x) / 2
>>> print y
2.16666666667
Which is closer to the correct answer (
√
4 = 2). If we repeat the process with the new estimate, it
gets even closer:
>>> x = y
>>> y = (x + a/x) / 2
>>> print y
2.00641025641
After a few more updates, the estimate is almost exact:
>>> x = y
>>> y = (x + a/x) / 2
>>> print y

7.6. Algorithms
67
2.00001024003
>>> x = y
>>> y = (x + a/x) / 2
>>> print y
2.00000000003
In general we don’t know ahead of time how many steps it takes to get to the right answer, but we
know when we get there because the estimate stops changing:
>>> x = y
>>> y = (x + a/x) / 2
>>> print y
2.0
>>> x = y
>>> y = (x + a/x) / 2
>>> print y
2.0
When y == x, we can stop. Here is a loop that starts with an initial estimate, x, and improves it
until it stops changing:
while True:
print x
y = (x + a/x) / 2
if y == x:
break
x = y
For most values of a this works ﬁne, but in general it is dangerous to test float equality. Floating-
point values are only approximately right: most rational numbers, like 1/3, and irrational numbers,
like
√
2, can’t be represented exactly with a float.
Rather than checking whether x and y are exactly equal, it is safer to use the built-in function abs to
compute the absolute value, or magnitude, of the difference between them:
if abs(y-x) < epsilon:
break
Where epsilon has a value like 0.0000001 that determines how close is close enough.
Exercise 7.2 Encapsulate this loop in a function called square_root that takes a as a parameter,
chooses a reasonable value of x, and returns an estimate of the square root of a.
7.6
Algorithms
Newton’s method is an example of an algorithm: it is a mechanical process for solving a category
of problems (in this case, computing square roots).
It is not easy to deﬁne an algorithm. It might help to start with something that is not an algorithm.
When you learned to multiply single-digit numbers, you probably memorized the multiplication
table. In effect, you memorized 100 speciﬁc solutions. That kind of knowledge is not algorithmic.

68
Chapter 7. Iteration
But if you were “lazy,” you probably cheated by learning a few tricks. For example, to ﬁnd the
product of n and 9, you can write n−1 as the ﬁrst digit and 10−n as the second digit. This trick is
a general solution for multiplying any single-digit number by 9. That’s an algorithm!
Similarly, the techniques you learned for addition with carrying, subtraction with borrowing, and
long division are all algorithms. One of the characteristics of algorithms is that they do not require
any intelligence to carry out. They are mechanical processes in which each step follows from the
last according to a simple set of rules.
In my opinion, it is embarrassing that humans spend so much time in school learning to execute
algorithms that, quite literally, require no intelligence.
On the other hand, the process of designing algorithms is interesting, intellectually challenging, and
a central part of what we call programming.
Some of the things that people do naturally, without difﬁculty or conscious thought, are the hardest
to express algorithmically. Understanding natural language is a good example. We all do it, but so
far no one has been able to explain how we do it, at least not in the form of an algorithm.
7.7
Debugging
As you start writing bigger programs, you might ﬁnd yourself spending more time debugging. More
code means more chances to make an error and more place for bugs to hide.
One way to cut your debugging time is “debugging by bisection.” For example, if there are 100 lines
in your program and you check them one at a time, it would take 100 steps.
Instead, try to break the problem in half. Look at the middle of the program, or near it, for an
intermediate value you can check. Add a print statement (or something else that has a veriﬁable
effect) and run the program.
If the mid-point check is incorrect, the problem must be in the ﬁrst half of the program. If it is
correct, the problem is in the second half.
Every time you perform a check like this, you halve the number of lines you have to search. After
six steps (which is much less than 100), you would be down to one or two lines of code, at least in
theory.
In practice it is not always clear what the “middle of the program” is and not always possible to
check it. It doesn’t make sense to count lines and ﬁnd the exact midpoint. Instead, think about
places in the program where there might be errors and places where it is easy to put a check. Then
choose a spot where you think the chances are about the same that the bug is before or after the
check.
7.8
Glossary
multiple assignment: Making more than one assignment to the same variable during the execution
of a program.
update: An assignment where the new value of the variable depends on the old.
initialize: An assignment that gives an initial value to a variable that will be updated.

7.9. Exercises
69
increment: An update that increases the value of a variable (often by one).
decrement: An update that decreases the value of a variable.
iteration: Repeated execution of a set of statements using either a recursive function call or a loop.
inﬁnite loop: A loop in which the terminating condition is never satisﬁed.
7.9
Exercises
Exercise 7.3 To test the square root algorithm in this chapter, you could compare it with math.sqrt.
Write a function named test_square_root that prints a table like this:
1.0 1.0
1.0
0.0
2.0 1.41421356237 1.41421356237 2.22044604925e-16
3.0 1.73205080757 1.73205080757 0.0
4.0 2.0
2.0
0.0
5.0 2.2360679775
2.2360679775
0.0
6.0 2.44948974278 2.44948974278 0.0
7.0 2.64575131106 2.64575131106 0.0
8.0 2.82842712475 2.82842712475 4.4408920985e-16
9.0 3.0
3.0
0.0
The ﬁrst column is a number, a; the second column is the square root of a computed with the function
from Exercise 7.2; the third column is the square root computed by math.sqrt; the fourth column
is the absolute value of the difference between the two estimates.
Exercise 7.4 The built-in function eval takes a string and evaluates it using the Python interpreter.
For example:
>>> eval('1 + 2 * 3')
7
>>> import math
>>> eval('math.sqrt(5)')
2.2360679774997898
>>> eval('type(math.pi)')
<type 'float'>
Write a function called eval_loop that iteratively prompts the user, takes the resulting input and
evaluates it using eval, and prints the result.
It should continue until the user enters 'done', and then return the value of the last expression it
evaluated.
Exercise 7.5 The brilliant mathematician Srinivasa Ramanujan found an inﬁnite series2 that can be
used to generate a numerical approximation of π:
1
π = 2
√
2
9801
∞
∑
k=0
(4k)!(1103+26390k)
(k!)43964k
2See wikipedia.org/wiki/Pi.

70
Chapter 7. Iteration
Write a function called estimate_pi that uses this formula to compute and return an estimate of
π. It should use a while loop to compute terms of the summation until the last term is smaller than
1e-15 (which is Python notation for 10−15). You can check the result by comparing it to math.pi.
You can see my solution at thinkpython.com/code/pi.py.

Chapter 8
Strings
8.1
A string is a sequence
A string is a sequence of characters. You can access the characters one at a time with the bracket
operator:
>>> fruit = 'banana'
>>> letter = fruit[1]
The second statement selects character number 1 from fruit and assigns it to letter.
The expression in brackets is called an index. The index indicates which character in the sequence
you want (hence the name).
But you might not get what you expect:
>>> print letter
a
For most people, the ﬁrst letter of 'banana' is b, not a. But for computer scientists, the index is an
offset from the beginning of the string, and the offset of the ﬁrst letter is zero.
>>> letter = fruit[0]
>>> print letter
b
So b is the 0th letter (“zero-eth”) of 'banana', a is the 1th letter (“one-eth”), and n is the 2th
(“two-eth”) letter.
You can use any expression, including variables and operators, as an index, but the value of the index
has to be an integer. Otherwise you get:
>>> letter = fruit[1.5]
TypeError: string indices must be integers

72
Chapter 8. Strings
8.2
len
len is a built-in function that returns the number of characters in a string:
>>> fruit = 'banana'
>>> len(fruit)
6
To get the last letter of a string, you might be tempted to try something like this:
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
The reason for the IndexError is that there is no letter in ’banana’ with the index 6. Since we
started counting at zero, the six letters are numbered 0 to 5. To get the last character, you have to
subtract 1 from length:
>>> last = fruit[length-1]
>>> print last
a
Alternatively, you can use negative indices, which count backward from the end of the string. The
expression fruit[-1] yields the last letter, fruit[-2] yields the second to last, and so on.
8.3
Traversal with a for loop
A lot of computations involve processing a string one character at a time. Often they start at the
beginning, select each character in turn, do something to it, and continue until the end. This pattern
of processing is called a traversal. One way to write a traversal is with a while loop:
index = 0
while index < len(fruit):
letter = fruit[index]
print letter
index = index + 1
This loop traverses the string and displays each letter on a line by itself. The loop condition is
index < len(fruit), so when index is equal to the length of the string, the condition is false,
and the body of the loop is not executed. The last character accessed is the one with the index
len(fruit)-1, which is the last character in the string.
Exercise 8.1 Write a function that takes a string as an argument and displays the letters backward,
one per line.
Another way to write a traversal is with a for loop:
for char in fruit:
print char
Each time through the loop, the next character in the string is assigned to the variable char. The
loop continues until no characters are left.

8.4. String slices
73
The following example shows how to use concatenation (string addition) and a for loop to generate
an abecedarian series (that is, in alphabetical order). In Robert McCloskey’s book Make Way for
Ducklings, the names of the ducklings are Jack, Kack, Lack, Mack, Nack, Ouack, Pack, and Quack.
This loop outputs these names in order:
prefixes = 'JKLMNOPQ'
suffix = 'ack'
for letter in prefixes:
print letter + suffix
The output is:
Jack
Kack
Lack
Mack
Nack
Oack
Pack
Qack
Of course, that’s not quite right because “Ouack” and “Quack” are misspelled.
Exercise 8.2 Modify the program to ﬁx this error.
8.4
String slices
A segment of a string is called a slice. Selecting a slice is similar to selecting a character:
>>> s = 'Monty Python'
>>> print s[0:5]
Monty
>>> print s[6:13]
Python
The operator [n:m] returns the part of the string from the “n-eth” character to the “m-eth” character,
including the ﬁrst but excluding the last. This behavior is counterintuitive, but it might help to
imagine the indices pointing between the characters, as in the following diagram:
fruit
b a n
n
a
a ’
0
1
2
3
4
5
6
index
’
If you omit the ﬁrst index (before the colon), the slice starts at the beginning of the string. If you
omit the second index, the slice goes to the end of the string:
>>> fruit = 'banana'
>>> fruit[:3]
'ban'
>>> fruit[3:]
'ana'

74
Chapter 8. Strings
If the ﬁrst index is greater than or equal to the second the result is an empty string, represented by
two quotation marks:
>>> fruit = 'banana'
>>> fruit[3:3]
''
An empty string contains no characters and has length 0, but other than that, it is the same as any
other string.
Exercise 8.3 Given that fruit is a string, what does fruit[:] mean?
8.5
Strings are immutable
It is tempting to use the [] operator on the left side of an assignment, with the intention of changing
a character in a string. For example:
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: object does not support item assignment
The “object” in this case is the string and the “item” is the character you tried to assign. For now,
an object is the same thing as a value, but we will reﬁne that deﬁnition later. An item is one of the
values in a sequence.
The reason for the error is that strings are immutable, which means you can’t change an existing
string. The best you can do is create a new string that is a variation on the original:
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print new_greeting
Jello, world!
This example concatenates a new ﬁrst letter onto a slice of greeting. It has no effect on the original
string.
8.6
Searching
What does the following function do?
def find(word, letter):
index = 0
while index < len(word):
if word[index] == letter:
return index
index = index + 1
return -1
In a sense, find is the opposite of the [] operator. Instead of taking an index and extracting the
corresponding character, it takes a character and ﬁnds the index where that character appears. If the
character is not found, the function returns -1.

8.7. Looping and counting
75
This is the ﬁrst example we have seen of a return statement inside a loop. If word[index] ==
letter, the function breaks out of the loop and returns immediately.
If the character doesn’t appear in the string, the program exits the loop normally and returns -1.
This pattern of computation—traversing a sequence and returning when we ﬁnd what we are looking
for—is a called a search.
Exercise 8.4 Modify find so that it has a third parameter, the index in word where it should start
looking.
8.7
Looping and counting
The following program counts the number of times the letter a appears in a string:
word = 'banana'
count = 0
for letter in word:
if letter == 'a':
count = count + 1
print count
This program demonstrates another pattern of computation called a counter. The variable count is
initialized to 0 and then incremented each time an a is found. When the loop exits, count contains
the result—the total number of a’s.
Exercise 8.5 Encapsulate this code in a function named count, and generalize it so that it accepts
the string and the letter as arguments.
Exercise 8.6 Rewrite this function so that instead of traversing the string, it uses the three-parameter
version of find from the previous section.
8.8
string methods
A method is similar to a function—it takes arguments and returns a value—but the syntax is dif-
ferent. For example, the method upper takes a string and returns a new string with all uppercase
letters:
Instead of the function syntax upper(word), it uses the method syntax word.upper().
>>> word = 'banana'
>>> new_word = word.upper()
>>> print new_word
BANANA
This form of dot notation speciﬁes the name of the method, upper, and the name of the string to
apply the method to, word. The empty parentheses indicate that this method takes no argument.
A method call is called an invocation; in this case, we would say that we are invoking upper on the
word.
As it turns out, there is a string method named find that is remarkably similar to the function we
wrote:

76
Chapter 8. Strings
>>> word = 'banana'
>>> index = word.find('a')
>>> print index
1
In this example, we invoke find on word and pass the letter we are looking for as a parameter.
Actually, the find method is more general than our function; it can ﬁnd substrings, not just charac-
ters:
>>> word.find('na')
2
It can take as a second argument the index where it should start:
>>> word.find('na', 3)
4
And as a third argument the index where it should stop:
>>> name = 'bob'
>>> name.find('b', 1, 2)
-1
This search fails because b does not appear in the index range from 1 to 2 (not including 2).
Exercise 8.7 There is a string method called count that is similar to the function in the previous
exercise. Read the documentation of this method and write an invocation that counts the number of
as in 'banana'.
8.9
The in operator
The word in is a boolean operator that takes two strings and returns True if the ﬁrst appears as a
substring in the second:
>>> 'a' in 'banana'
True
>>> 'seed' in 'banana'
False
For example, the following function prints all the letters from word1 that also appear in word2:
def in_both(word1, word2):
for letter in word1:
if letter in word2:
print letter
With well-chosen variable names, Python sometimes reads like English. You could read this loop,
“for (each) letter in (the ﬁrst) word, if (the) letter (appears) in (the second) word, print (the) letter.”
Here’s what you get if you compare apples and oranges:
>>> in_both('apples', 'oranges')
a
e
s

8.10. String comparison
77
8.10
String comparison
The comparison operators work on strings. To see if two strings are equal:
if word == 'banana':
print
'All right, bananas.'
Other comparison operations are useful for putting words in alphabetical order:
if word < 'banana':
print 'Your word,' + word + ', comes before banana.'
elif word > 'banana':
print 'Your word,' + word + ', comes after banana.'
else:
print 'All right, bananas.'
Python does not handle uppercase and lowercase letters the same way that people do. All the upper-
case letters come before all the lowercase letters, so:
Your word, Pineapple, comes before banana.
A common way to address this problem is to convert strings to a standard format, such as all low-
ercase, before performing the comparison. Keep that in mind in case you have to defend yourself
against a man armed with a Pineapple.
8.11
Debugging
When you use indices to traverse the values in a sequence, it is tricky to get the beginning and end
of the traversal right. Here is a function that is supposed to compare two words and return True if
one of the words is the reverse of the other, but it contains two errors:
def is_reverse(word1, word2):
if len(word1) != len(word2):
return False
i = 0
j = len(word2)
while j > 0:
if word1[i] != word2[j]:
return False
i = i+1
j = j-1
return True
The ﬁrst if statement checks whether the words are the same length. If not, we can return False
immediately and then, for the rest of the function, we can assume that the words are the same length.
This is an example of the guardian pattern in Section 6.8.
i and j are indices: i traverses word1 forward while j traverses word2 backward. If we ﬁnd two
letters that don’t match, we can return False immediately. If we get through the whole loop and all
the letters match, we return True.

78
Chapter 8. Strings
If we test this function with the words “pots” and “stop”, we expect the return value True, but we
get an IndexError:
>>> is_reverse('pots', 'stop')
...
File "reverse.py", line 15, in is_reverse
if word1[i] != word2[j]:
IndexError: string index out of range
For debugging this kind of error, my ﬁrst move is to print the values of the indices immediately
before the line where the error appears.
while j > 0:
print i, j
# print here
if word1[i] != word2[j]:
return False
i = i+1
j = j-1
Now when I run the program again, I get more information:
>>> is_reverse('pots', 'stop')
0 4
...
IndexError: string index out of range
The ﬁrst time through the loop, the value of j is 4, which is out of range for the string 'pots'. The
index of the last character is 3, so the initial value for j should be len(word2)-1.
If I ﬁx that error and run the program again, I get:
>>> is_reverse('pots', 'stop')
0 3
1 2
2 1
True
This time we get the right answer, but it looks like the loop only ran three times, which is suspicious.
To get a better idea of what is happening, it is useful to draw a state diagram. During the ﬁrst
iteration, the frame for is_reverse looks like this:
i
0
j
3
word1
’pots’
word2
’stop’
I took a little license by arranging the variables in the frame and adding dotted lines to show that the
values of i and j indicate characters in word1 and word2.
Exercise 8.8 Starting with this diagram, execute the program on paper, changing the values of i
and j during each iteration. Find and ﬁx the second error in this function.

8.12. Glossary
79
8.12
Glossary
object: Something a variable can refer to. For now, you can use “object” and “value” interchange-
ably.
sequence: An ordered set; that is, a set of values where each value is identiﬁed by an integer index.
item: One of the values in a sequence.
index: An integer value used to select an item in a sequence, such as a character in a string.
slice: A part of a string speciﬁed by a range of indices.
empty string: A string with no characters and length 0, represented by two quotation marks.
immutable: The property of a sequence whose items cannot be assigned.
traverse: To iterate through the items in a sequence, performing a similar operation on each.
search: A pattern of traversal that stops when it ﬁnds what it is looking for.
counter: A variable used to count something, usually initialized to zero and then incremented.
method: A function that is associated with an object and called using dot notation.
invocation: A statement that calls a method.
8.13
Exercises
Exercise 8.9 A string slice can take a third index that speciﬁes the “step size;” that is, the number of
spaces between successive characters. A step size of 2 means every other character; 3 means every
third, etc.
>>> fruit = 'banana'
>>> fruit[0:5:2]
'bnn'
A step size of -1 goes through the word backwards, so the slice [::-1] generates a reversed string.
Use this idiom to write a one-line version of is_palindrome from Exercise 6.6.
Exercise 8.10 Read the documentation of the string methods at docs.python.org/lib/
string-methods.html. You might want to experiment with some of them to make sure you un-
derstand how they work. strip and replace are particularly useful.
The
documentation
uses
a
syntax
that
might
be
confusing.
For
example,
in
find(sub[, start[, end]]), the brackets indicate optional arguments. So sub is required, but
start is optional, and if you include start, then end is optional.
Exercise 8.11 The following functions are all intended to check whether a string contains any low-
ercase letters, but at least some of them are wrong. For each function, describe what the function
actually does (assuming that the parameter is a string).

80
Chapter 8. Strings
def any_lowercase1(s):
for c in s:
if c.islower():
return True
else:
return False
def any_lowercase2(s):
for c in s:
if 'c'.islower():
return 'True'
else:
return 'False'
def any_lowercase3(s):
for c in s:
flag = c.islower()
return flag
def any_lowercase4(s):
flag = False
for c in s:
flag = flag or c.islower()
return flag
def any_lowercase5(s):
for c in s:
if not c.islower():
return False
return True
Exercise 8.12 ROT13 is a weak form of encryption that involves “rotating” each letter in a word by
13 places1. To rotate a letter means to shift it through the alphabet, wrapping around to the beginning
if necessary, so ’A’ shifted by 3 is ’D’ and ’Z’ shifted by 1 is ’A’.
Write a function called rotate_word that takes a string and an integer as parameters, and that
returns a new string that contains the letters from the original string “rotated” by the given amount.
For example, “cheer” rotated by 7 is “jolly” and “melon” rotated by -10 is “cubed”.
You might want to use the built-in functions ord, which converts a character to a numeric code, and
chr, which converts numeric codes to characters.
Potentially offensive jokes on the Internet are sometimes encoded in ROT13. If you are not easily
offended, ﬁnd and decode some of them.
1See wikipedia.org/wiki/ROT13

Chapter 9
Case study: word play
9.1
Reading word lists
For the exercises in this chapter we need a list of English words. There are lots of word lists
available on the Web, but the one most suitable for our purpose is one of the word lists collected and
contributed to the public domain by Grady Ward as part of the Moby lexicon project1. It is a list of
113,809 ofﬁcial crosswords; that is, words that are considered valid in crossword puzzles and other
word games. In the Moby collection, the ﬁlename is 113809of.fic; I include a copy of this ﬁle,
with the simpler name words.txt, along with Swampy.
This ﬁle is in plain text, so you can open it with a text editor, but you can also read it from Python.
The built-in function open takes the name of the ﬁle as a parameter and returns a ﬁle object you can
use to read the ﬁle.
>>> fin = open('words.txt')
>>> print fin
<open file 'words.txt', mode 'r' at 0xb7f4b380>
fin is a common name for a ﬁle object used for input. Mode 'r' indicates that this ﬁle is open for
reading (as opposed to 'w' for writing).
The ﬁle object provides several methods for reading, including readline, which reads characters
from the ﬁle until it gets to a newline and returns the result as a string:
>>> fin.readline()
'aa\r\n'
The ﬁrst word in this particular list is “aa,” which is a kind of lava. The sequence \r\n represents
two whitespace characters, a carriage return and a newline, that separate this word from the next.
The ﬁle object keeps track of where it is in the ﬁle, so if you call readline again, you get the next
word:
>>> fin.readline()
'aah\r\n'
1wikipedia.org/wiki/Moby_Project

82
Chapter 9. Case study: word play
The next word is “aah,” which is a perfectly legitimate word, so stop looking at me like that. Or, if
it’s the whitespace that’s bothering you, we can get rid of it with the string method strip:
>>> line = fin.readline()
>>> word = line.strip()
>>> print word
aahed
You can also use a ﬁle object as part of a for loop. This program reads words.txt and prints each
word, one per line:
fin = open('words.txt')
for line in fin:
word = line.strip()
print word
Exercise 9.1 Write a program that reads words.txt and prints only the words with more than 20
characters (not counting whitespace).
9.2
Exercises
There are solutions to these exercises in the next section. You should at least attempt each one before
you read the solutions.
Exercise 9.2 In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that does
not contain the letter “e.” Since “e” is the most common letter in English, that’s not easy to do.
In fact, it is difﬁcult to construct a solitary thought without using that most common symbol. It is
slow going at ﬁrst, but with caution and hours of training you can gradually gain facility.
All right, I’ll stop now.
Write a function called has_no_e that returns True if the given word doesn’t have the letter “e” in
it.
Modify your program from the previous section to print only the words that have no “e” and compute
the percentage of the words in the list have no “e.”
Exercise 9.3 Write a function named avoids that takes a word and a string of forbidden letters, and
that returns True if the word doesn’t use any of the forbidden letters.
Modify your program to prompt the user to enter a string of forbidden letters and then print the
number of words that don’t contain any of them. Can you ﬁnd a combination of 5 forbidden letters
that excludes the smallest number of words?
Exercise 9.4 Write a function named uses_only that takes a word and a string of letters, and that
returns True if the word contains only letters in the list. Can you make a sentence using only the
letters acefhlo? Other than “Hoe alfalfa?”
Exercise 9.5 Write a function named uses_all that takes a word and a string of required letters,
and that returns True if the word uses all the required letters at least once. How many words are
there that use all the vowels aeiou? How about aeiouy?

9.3. Search
83
Exercise 9.6 Write a function called is_abecedarian that returns True if the letters in a word
appear in alphabetical order (double letters are ok). How many abecedarian words are there?
9.3
Search
All of the exercises in the previous section have something in common; they can be solved with the
search pattern we saw in Section 8.6. The simplest example is:
def has_no_e(word):
for letter in word:
if letter == 'e':
return False
return True
The for loop traverses the characters in word. If we ﬁnd the letter “e”, we can immediately return
False; otherwise we have to go to the next letter. If we exit the loop normally, that means we didn’t
ﬁnd an “e”, so we return True.
You can write this function more concisely using the in operator, but I started with this version
because it demonstrates the logic of the search pattern.
avoids is a more general version of has_no_e but it has the same structure:
def avoids(word, forbidden):
for letter in word:
if letter in forbidden:
return False
return True
We can return False as soon as we ﬁnd a forbidden letter; if we get to the end of the loop, we return
True.
uses_only is similar except that the sense of the condition is reversed:
def uses_only(word, available):
for letter in word:
if letter not in available:
return False
return True
Instead of a list of forbidden words, we have a list of available words. If we ﬁnd a letter in word that
is not in available, we can return False.
uses_all is similar except that we reverse the role of the word and the string of letters:
def uses_all(word, required):
for letter in required:
if letter not in word:
return False
return True

84
Chapter 9. Case study: word play
Instead of traversing the letters in word, the loop traverses the required letters. If any of the required
letters do not appear in the word, we can return False.
If you were really thinking like a computer scientist, you would have recognized that uses_all was
an instance of a previously-solved problem, and you would have written:
def uses_all(word, required):
return uses_only(required, word)
This is an example of a program development method called problem recognition, which means
that you recognize the problem you are working on as an instance of a previously-solved problem,
and apply a previously-developed solution.
9.4
Looping with indices
I wrote the functions in the previous section with for loops because I only needed the characters in
the strings; I didn’t have to do anything with the indices.
For is_abecedarian we have to compare adjacent letters, which is a little tricky with a for loop:
def is_abecedarian(word):
previous = word[0]
for c in word:
if c < previous:
return False
previous = c
return True
An alternative is to use recursion:
def is_abecedarian(word):
if len(word) <= 1:
return True
if word[0] > word[1]:
return False
return is_abecedarian(word[1:])
Another option is to use a while loop:
def is_abecedarian(word):
i = 0
while i < len(word)-1:
if word[i+1] < word[i]:
return False
i = i+1
return True
The loop starts at i=0 and ends when i=len(word)-1. Each time through the loop, it compares the
ith character (which you can think of as the current character) to the i + 1th character (which you
can think of as the next).
If the next character is less than (alphabetically before) the current one, then we have discovered a
break in the abecedarian trend, and we return False.

9.5. Debugging
85
If we get to the end of the loop without ﬁnding a fault, then the word passes the test. To convince
yourself that the loop ends correctly, consider an example like 'flossy'. The length of the word
is 6, so the last time the loop runs is when i is 4, which is the index of the second-to-last character.
On the last iteration, it compares the second-to-last character to the last, which is what we want.
Here is a version of is_palindrome (see Exercise 6.6) that uses two indices; one starts at the
beginning and goes up; the other starts at the end and goes down.
def is_palindrome(word):
i = 0
j = len(word)-1
while i<j:
if word[i] != word[j]:
return False
i = i+1
j = j-1
return True
Or, if you noticed that this is an instance of a previously-solved problem, you might have written:
def is_palindrome(word):
return is_reverse(word, word)
Assuming you did Exercise 8.8.
9.5
Debugging
Testing programs is hard. The functions in this chapter are relatively easy to test because you can
check the results by hand. Even so, it is somewhere between difﬁcult and impossible to choose a set
of words that test for all possible errors.
Taking has_no_e as an example, there are two obvious cases to check: words that have an ’e’ should
return False; words that don’t should return True. You should have no trouble coming up with one
of each.
Within each case, there are some less obvious subcases. Among the words that have an “e,” you
should test words with an “e” at the beginning, the end, and somewhere in the middle. You should
test long words, short words, and very short words, like the empty string. The empty string is an
example of a special case, which is one of the non-obvious cases where errors often lurk.
In addition to the test cases you generate, you can also test your program with a word list like
words.txt. By scanning the output, you might be able to catch errors, but be careful: you might
catch one kind of error (words that should not be included, but are) and not another (words that
should be included, but aren’t).
In general, testing can help you ﬁnd bugs, but it is not easy to generate a good set of test cases, and
even if you do, you can’t be sure your program is correct.
According to a legendary computer scientist:

86
Chapter 9. Case study: word play
Program testing can be used to show the presence of bugs, but never to show their
absence!
— Edsger W. Dijkstra
9.6
Glossary
ﬁle object: A value that represents an open ﬁle.
problem recognition: A way of solving a problem by expressing it as an instance of a previously-
solved problem.
special case: A test case that is atypical or non-obvious (and less likely to be handled correctly).
9.7
Exercises
Exercise 9.7 This question is based on a Puzzler that was broadcast on the radio program Car Talk2:
Give me a word with three consecutive double letters. I’ll give you a couple of words
that almost qualify, but don’t. For example, the word committee, c-o-m-m-i-t-t-e-e. It
would be great except for the ‘i’ that sneaks in there. Or Mississippi: M-i-s-s-i-s-s-i-
p-p-i. If you could take out those i’s it would work. But there is a word that has three
consecutive pairs of letters and to the best of my knowledge this may be the only word.
Of course there are probably 500 more but I can only think of one. What is the word?
Write a program to ﬁnd it. You can see my solution at thinkpython.com/code/cartalk.py.
Exercise 9.8 Here’s another Car Talk Puzzler3:
“I was driving on the highway the other day and I happened to notice my odometer.
Like most odometers, it shows six digits, in whole miles only. So, if my car had 300,000
miles, for example, I’d see 3-0-0-0-0-0.
“Now, what I saw that day was very interesting. I noticed that the last 4 digits were
palindromic; that is, they read the same forward as backward. For example, 5-4-4-5 is
a palindrome, so my odometer could have read 3-1-5-4-4-5.
“One mile later, the last 5 numbers were palindromic. For example, it could have read
3-6-5-4-5-6. One mile after that, the middle 4 out of 6 numbers were palindromic. And
you ready for this? One mile later, all 6 were palindromic!
“The question is, what was on the odometer when I ﬁrst looked?”
Write a Python program that tests all the six-digit numbers and prints any numbers that satisfy these
requirements. You can see my solution at thinkpython.com/code/cartalk.py.
Exercise 9.9 Here’s another Car Talk Puzzler you can solve with a search4:
2www.cartalk.com/content/puzzler/transcripts/200725
3www.cartalk.com/content/puzzler/transcripts/200803
4www.cartalk.com/content/puzzler/transcripts/200813

9.7. Exercises
87
“Recently I had a visit with my mom and we realized that the two digits that make
up my age when reversed resulted in her age. For example, if she’s 73, I’m 37. We
wondered how often this has happened over the years but we got sidetracked with other
topics and we never came up with an answer.
“When I got home I ﬁgured out that the digits of our ages have been reversible six times
so far. I also ﬁgured out that if we’re lucky it would happen again in a few years, and
if we’re really lucky it would happen one more time after that. In other words, it would
have happened 8 times over all. So the question is, how old am I now?”
Write a Python program that searches for solutions to this Puzzler. Hint: you might ﬁnd the string
method zfill useful.
You can see my solution at thinkpython.com/code/cartalk.py.

88
Chapter 9. Case study: word play

Chapter 10
Lists
10.1
A list is a sequence
Like a string, a list is a sequence of values. In a string, the values are characters; in a list, they can
be any type. The values in list are called elements or sometimes items.
There are several ways to create a new list; the simplest is to enclose the elements in square brackets
([ and ]):
[10, 20, 30, 40]
['crunchy frog', 'ram bladder', 'lark vomit']
The ﬁrst example is a list of four integers. The second is a list of three strings. The elements of a
list don’t have to be the same type. The following list contains a string, a ﬂoat, an integer, and (lo!)
another list:
['spam', 2.0, 5, [10, 20]]
A list within another list is nested.
A list that contains no elements is called an empty list; you can create one with empty brackets, [].
As you might expect, you can assign list values to variables:
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> numbers = [17, 123]
>>> empty = []
>>> print cheeses, numbers, empty
['Cheddar', 'Edam', 'Gouda'] [17, 123] []
10.2
Lists are mutable
The syntax for accessing the elements of a list is the same as for accessing the characters of a
string—the bracket operator. The expression inside the brackets speciﬁes the index. Remember that
the indices start at 0:

90
Chapter 10. Lists
>>> print cheeses[0]
Cheddar
Unlike strings, lists are mutable. When the bracket operator appears on the left side of an assignment,
it identiﬁes the element of the list that will be assigned.
>>> numbers = [17, 123]
>>> numbers[1] = 5
>>> print numbers
[17, 5]
The one-eth element of numbers, which used to be 123, is now 5.
You can think of a list as a relationship between indices and elements. This relationship is called
a mapping; each index “maps to” one of the elements. Here is a state diagram showing cheeses,
numbers and empty:
0
1
list
numbers
17
123
5
list
empty
0
1
2
’Cheddar’
’Edam’
’Gouda’
list
cheeses
Lists are represented by boxes with the word “list” outside and the elements of the list inside.
cheeses refers to a list with three elements indexed 0, 1 and 2. numbers contains two elements; the
diagram shows that the value of the second element has been reassigned from 123 to 5. empty refers
to a list with no elements.
List indices work the same way as string indices:
• Any integer expression can be used as an index.
• If you try to read or write an element that does not exist, you get an IndexError.
• If an index has a negative value, it counts backward from the end of the list.
The in operator also works on lists.
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> 'Edam' in cheeses
True
>>> 'Brie' in cheeses
False

10.3. Traversing a list
91
10.3
Traversing a list
The most common way to traverse the elements of a list is with a for loop. The syntax is the same
as for strings:
for cheese in cheeses:
print cheese
This works well if you only need to read the elements of the list. But if you want to write or update
the elements, you need the indices. A common way to do that is to combine the functions range
and len:
for i in range(len(numbers)):
numbers[i] = numbers[i] * 2
This loop traverses the list and updates each element. len returns the number of elements in the list.
range returns a list of indices from 0 to n −1, where n is the length of the list. Each time through
the loop i gets the index of the next element. The assignment statement in the body uses i to read
the old value of the element and to assign the new value.
A for loop over an empty list never executes the body:
for x in empty:
print 'This never happens.'
Although a list can contain another list, the nested list still counts as a single element. The length of
this list is four:
['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]
10.4
List operations
The + operator concatenates lists:
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = a + b
>>> print c
[1, 2, 3, 4, 5, 6]
Similarly, the * operator repeats a list a given number of times:
>>> [0] * 4
[0, 0, 0, 0]
>>> [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
The ﬁrst example repeats [0] four times. The second example repeats the list [1, 2, 3] three
times.

92
Chapter 10. Lists
10.5
List slices
The slice operator also works on lists:
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3]
['b', 'c']
>>> t[:4]
['a', 'b', 'c', 'd']
>>> t[3:]
['d', 'e', 'f']
If you omit the ﬁrst index, the slice starts at the beginning. If you omit the second, the slice goes to
the end. So if you omit both, the slice is a copy of the whole list.
>>> t[:]
['a', 'b', 'c', 'd', 'e', 'f']
Since lists are mutable, it is often useful to make a copy before performing operations that fold,
spindle or mutilate lists.
A slice operator on the left side of an assignment can update multiple elements:
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3] = ['x', 'y']
>>> print t
['a', 'x', 'y', 'd', 'e', 'f']
10.6
List methods
Python provides methods that operate on lists. For example, append adds a new element to the end
of a list:
>>> t = ['a', 'b', 'c']
>>> t.append('d')
>>> print t
['a', 'b', 'c', 'd']
extend takes a list as an argument and appends all of the elements:
>>> t1 = ['a', 'b', 'c']
>>> t2 = ['d', 'e']
>>> t1.extend(t2)
>>> print t1
['a', 'b', 'c', 'd', 'e']
This example leaves t2 unmodiﬁed.
sort arranges the elements of the list from low to high:
>>> t = ['d', 'c', 'e', 'b', 'a']
>>> t.sort()
>>> print t
['a', 'b', 'c', 'd', 'e']

10.7. Map, ﬁlter and reduce
93
List methods are all void; they modify the list and return None. If you accidentally write t =
t.sort(), you will be disappointed with the result.
10.7
Map, ﬁlter and reduce
To add up all the numbers in a list, you can use a loop like this:
def add_all(t):
total = 0
for x in t:
total += x
return total
total is initialized to 0. Each time through the loop, x gets one element from the list. The +=
operator provides a short way to update a variable:
total += x
is equivalent to:
total = total + x
As the loop executes, total accumulates the sum of the elements; a variable used this way is
sometimes called an accumulator.
Adding up the elements of a list is such a common operation that Python provides it as a built-in
function, sum:
>>> t = [1, 2, 3]
>>> sum(t)
6
An operation like this that combines a sequence of elements into a single value is sometimes called
reduce.
Sometimes you want to traverse one list while building another. For example, the following function
takes a list of strings and returns a new list that contains capitalized strings:
def capitalize_all(t):
res = []
for s in t:
res.append(s.capitalize())
return res
res is initialized with an empty list; each time through the loop, we append the next element. So
res is another kind of accumulator.
An operation like capitalize_all is sometimes called a map because it “maps” a function (in this
case the method capitalize) onto each of the elements in a sequence.
Another common operation is to select some of the elements from a list and return a sublist. For ex-
ample, the following function takes a list of strings and returns a list that contains only the uppercase
strings:

94
Chapter 10. Lists
def only_upper(t):
res = []
for s in t:
if s.isupper():
res.append(s)
return res
isupper is a string method that returns True if the string contains only upper case letters.
An operation like only_upper is called a ﬁlter because it selects some of the elements and ﬁlters
out the others.
Most common list operations can be expressed as a combination of map, ﬁlter and reduce. Because
these operations are so common, Python provides language features to support them, including the
built-in function map and an operator called a “list comprehension.”
Exercise 10.1 Write a function that takes a list of numbers and returns the cumulative sum; that
is, a new list where the ith element is the sum of the ﬁrst i + 1 elements from the original list. For
example, the cumulative sum of [1, 2, 3] is [1, 3, 6].
10.8
Deleting elements
There are several ways to delete elements from a list. If you know the index of the element you
want, you can use pop:
>>> t = ['a', 'b', 'c']
>>> x = t.pop(1)
>>> print t
['a', 'c']
>>> print x
b
pop modiﬁes the list and returns the element that was removed. If you don’t provide an index, it
deletes and returns the last element.
If you don’t need the removed value, you can use the del operator:
>>> t = ['a', 'b', 'c']
>>> del t[1]
>>> print t
['a', 'c']
If you know the element you want to remove (but not the index), you can use remove:
>>> t = ['a', 'b', 'c']
>>> t.remove('b')
>>> print t
['a', 'c']
The return value from remove is None.
To remove more than one element, you can use del with a slice index:

10.9. Lists and strings
95
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> del t[1:5]
>>> print t
['a', 'f']
As usual, the slice selects all the elements up to, but not including, the second index.
10.9
Lists and strings
A string is a sequence of characters and a list is a sequence of values, but a list of characters is not
the same as a string. To convert from a string to a list of characters, you can use list:
>>> s = 'spam'
>>> t = list(s)
>>> print t
['s', 'p', 'a', 'm']
Because list is the name of a built-in function, you should avoid using it as a variable name. I also
avoid l because it looks too much like 1. So that’s why I use t.
The list function breaks a string into individual letters. If you want to break a string into words,
you can use the split method:
>>> s = 'pining for the fjords'
>>> t = s.split()
>>> print t
['pining', 'for', 'the', 'fjords']
An optional argument called a delimiter speciﬁes which characters to use as word boundaries. The
following example uses a hyphen as a delimiter:
>>> s = 'spam-spam-spam'
>>> delimiter = '-'
>>> s.split(delimiter)
['spam', 'spam', 'spam']
join is the inverse of split. It takes a list of strings and concatenates the elements. join is a string
method, so you have to invoke it on the delimiter and pass the list as a parameter:
>>> t = ['pining', 'for', 'the', 'fjords']
>>> delimiter = ' '
>>> delimiter.join(t)
'pining for the fjords'
In this case the delimiter is a space character, so join puts a space between words. To concatenate
strings without spaces, you can use the empty string, '', as a delimiter.
10.10
Objects and values
If we execute these assignment statements:

96
Chapter 10. Lists
a = 'banana'
b = 'banana'
We know that a and b both refer to a string, but we don’t know whether they refer to the same string.
There are two possible states:
a
b
’banana’
a
b
’banana’
’banana’
In one case, a and b refer to two different objects that have the same value. In the second case, they
refer to the same object.
To check whether two variables refer to the same object, you can use the is operator.
>>> a = 'banana'
>>> b = 'banana'
>>> a is b
True
In this example, Python only created one string object, and both a and b refer to it.
But when you create two lists, you get two objects:
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> a is b
False
So the state diagram looks like this:
a
b
[ 1, 2, 3 ]
[ 1, 2, 3 ]
In this case we would say that the two lists are equivalent, because they have the same elements,
but not identical, because they are not the same object. If two objects are identical, they are also
equivalent, but if they are equivalent, they are not necessarily identical.
Until now, we have been using “object” and “value” interchangeably, but it is more precise to say
that an object has a value. If you execute a = [1,2,3], a refers to a list object whose value is a
particular sequence of elements. If another list has the same elements, we would say it has the same
value.
10.11
Aliasing
If a refers to an object and you assign b = a, then both variables refer to the same object:
>>> a = [1, 2, 3]
>>> b = a
>>> b is a
True

10.12. List arguments
97
The state diagram looks like this:
a
b
[ 1, 2, 3 ]
The association of a variable with an object is called a reference. In this example, there are two
references to the same object.
An object with more than one reference has more than one name, so we say that the object is aliased.
If the aliased object is mutable, changes made with one alias affect the other:
>>> b[0] = 17
>>> print a
[17, 2, 3]
Although this behavior can be useful, it is error-prone. In general, it is safer to avoid aliasing when
you are working with mutable objects.
For immutable objects like strings, aliasing is not as much of a problem. In this example:
a = 'banana'
b = 'banana'
It almost never makes a difference whether a and b refer to the same string or not.
10.12
List arguments
When you pass a list to a function, the function gets a reference to the list. If the function modiﬁes
a list parameter, the caller sees the change. For example, delete_head removes the ﬁrst element
from a list:
def delete_head(t):
del t[0]
Here’s how it is used:
>>> letters = ['a', 'b', 'c']
>>> delete_head(letters)
>>> print letters
['b', 'c']
The parameter t and the variable letters are aliases for the same object. The stack diagram looks
like this:
0
1
2
’a’
’b’
’c’
list
t
__main__
letters
delete_head

98
Chapter 10. Lists
Since the list is shared by two frames, I drew it between them.
It is important to distinguish between operations that modify lists and operations that create new
lists. For example, the append method modiﬁes a list, but the + operator creates a new list:
>>> t1 = [1, 2]
>>> t2 = t1.append(3)
>>> print t1
[1, 2, 3]
>>> print t2
None
>>> t3 = t1 + [3]
>>> print t3
[1, 2, 3]
>>> t2 is t3
False
This difference is important when you write functions that are supposed to modify lists. For example,
this function does not delete the head of a list:
def bad_delete_head(t):
t = t[1:]
# WRONG!
The slice operator creates a new list and the assignment makes t refer to it, but none of that has any
effect on the list that was passed as an argument.
An alternative is to write a function that creates and returns a new list. For example, tail returns
all but the ﬁrst element of a list:
def tail(t):
return t[1:]
This function leaves the original list unmodiﬁed. Here’s how it is used:
>>> letters = ['a', 'b', 'c']
>>> rest = tail(letters)
>>> print rest
['b', 'c']
Exercise 10.2 Write a function called chop that takes a list and modiﬁes it, removing the ﬁrst and
last elements, and returns None.
Then write a function called middle that takes a list and returns a new list that contains all but the
ﬁrst and last elements.
10.13
Debugging
Careless use of lists (and other mutable objects) can lead to long hours of debugging. Here are some
common pitfalls and ways to avoid them:
1. Don’t forget that most list methods modify the argument and return None. This is the opposite
of the string methods, which return a new string and leave the original alone.
If you are used to writing string code like this:

10.14. Glossary
99
word = word.strip()
It is tempting to write list code like this:
t = t.sort()
# WRONG!
Because sort returns None, the next operation you perform with t is likely to fail.
Before using list methods and operators, you should read the documentation carefully and then
test them in interactive mode. The methods and operators that lists share with other sequences
(like strings) are documented at docs.python.org/lib/typesseq.html. The methods and
operators that only apply to mutable sequences are documented at docs.python.org/lib/
typesseq-mutable.html.
2. Pick an idiom and stick with it.
Part of the problem with lists is that there are too many ways to do things. For example, to
remove an element from a list, you can use pop, remove, del, or even a slice assignment.
To add an element, you can use the append method or the + operator. But don’t forget that
these are right:
t.append(x)
t = t + [x]
And these are wrong:
t.append([x])
# WRONG!
t = t.append(x)
# WRONG!
t + [x]
# WRONG!
t = t + x
# WRONG!
Try out each of these examples in interactive mode to make sure you understand what they
do. Notice that only the last one causes a runtime error; the other three are legal, but they do
the wrong thing.
3. Make copies to avoid aliasing.
If you want to use a method like sort that modiﬁes the argument, but you need to keep the
original list as well, you can make a copy.
orig = t[:]
t.sort()
In this example you could also use the built-in function sorted, which returns a new, sorted
list and leaves the original alone. But in that case you should avoid using sorted as a variable
name!
10.14
Glossary
list: A sequence of values.
element: One of the values in a list (or other sequence), also called items.
index: An integer value that indicates an element in a list.

100
Chapter 10. Lists
nested list: A list that is an element of another list.
list traversal: The sequential accessing of each element in a list.
mapping: A relationship in which each element of one set corresponds to an element of another
set. For example, a list is a mapping from indices to elements.
accumulator: A variable used in a loop to add up or accumulate a result.
reduce: A processing pattern that traverses a sequence and accumulates the elements into a single
result.
map: A processing pattern that traverses a sequence and performs an operation on each element.
ﬁlter: A processing pattern that traverses a list and selects the elements that satisfy some criterion.
object: Something a variable can refer to. An object has a type and a value.
equivalent: Having the same value.
identical: Being the same object (which implies equivalence).
reference: The association between a variable and its value.
aliasing: A circumstance where two variables refer to the same object.
delimiter: A character or string used to indicate where a string should be split.
10.15
Exercises
Exercise 10.3 Write a function called is_sorted that takes a list as a parameter and returns True
if the list is sorted in ascending order and False otherwise. You can assume (as a precondition) that
the elements of the list can be compared with the comparison operators <, >, etc.
For example, is_sorted([1,2,2]) should return True and is_sorted(['b','a']) should re-
turn False.
Exercise 10.4 Two words are anagrams if you can rearrange the letters from one to spell the other.
Write a function called is_anagram that takes two strings and returns True if they are anagrams.
Exercise 10.5 The (so-called) Birthday Paradox:
1. Write a function called has_duplicates that takes a list and returns True if there is any
element that appears more than once. It should not modify the original list.
2. If there are 23 students in your class, what are the chances that two of you have the same
birthday? You can estimate this probability by generating random samples of 23 birthdays and
checking for matches. Hint: you can generate random birthdays with the randint function in
the random module.
You can read about this problem at wikipedia.org/wiki/Birthday_paradox, and you can see
my solution at thinkpython.com/code/birthday.py.
Exercise 10.6 Write a function called remove_duplicates that takes a list and returns a new list
with only the unique elements from the original. Hint: they don’t have to be in the same order.

10.15. Exercises
101
Exercise 10.7 Write a function that reads the ﬁle words.txt and builds a list with one element per
word. Write two versions of this function, one using the append method and the other using the
idiom t = t + [x]. Which one takes longer to run? Why?
You can see my solution at thinkpython.com/code/wordlist.py.
Exercise 10.8 To check whether a word is in the word list, you could use the in operator, but it
would be slow because it searches through the words in order.
Because the words are in alphabetical order, we can speed things up with a bisection search, which
is similar to what you do when you look a word up in the dictionary. You start in the middle and
check to see whether the word you are looking for comes before the word in the middle of the list.
If so, then you search the ﬁrst half of the list the same way. Otherwise you search the second half.
Either way, you cut the remaining search space in half. If the word list has 113,809 words, it will
take about 17 steps to ﬁnd the word or conclude that it’s not there.
Write a function called bisect that takes a sorted list and a target value and returns the index of the
value in the list, if it’s there, or None if it’s not.
Or you could read the documentation of the bisect module and use that!
Exercise 10.9 Two words are a “reverse pair” if each is the reverse of the other. Write a program
that ﬁnds all the reverse pairs in the word list.
Exercise 10.10 Two words “interlock” if taking alternating letters from each forms a new word1.
For example, “shoe” and “cold” interlock to form “schooled.”
1. Write a program that ﬁnds all pairs of words that interlock. Hint: don’t enumerate all pairs!
2. Can you ﬁnd any words that are three-way interlocked; that is, every third letter forms a word,
starting from the ﬁrst, second or third?
1This exercise is inspired by an example at puzzlers.org.

102
Chapter 10. Lists

Chapter 11
Dictionaries
A dictionary is like a list, but more general. In a list, the indices have to be integers; in a dictionary
they can be (almost) any type.
You can think of a dictionary as a mapping between a set of indices (which are called keys) and a
set of values. Each key maps to a value. The association of a key and a value is called a key-value
pair or sometimes an item.
As an example, we’ll build a dictionary that maps from English to Spanish words, so the keys and
the values are all strings.
The function dict creates a new dictionary with no items. Because dict is the name of a built-in
function, you should avoid using it as a variable name.
>>> eng2sp = dict()
>>> print eng2sp
{}
The squiggly-brackets, {}, represent an empty dictionary. To add items to the dictionary, you can
use square brackets:
>>> eng2sp['one'] = 'uno'
This line creates an item that maps from the key ’one’ to the value 'uno'. If we print the dictionary
again, we see a key-value pair with a colon between the key and value:
>>> print eng2sp
{'one': 'uno'}
This output format is also an input format. For example, you can create a new dictionary with three
items:
>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}
But if you print eng2sp, you might be surprised:
>>> print eng2sp
{'one': 'uno', 'three': 'tres', 'two': 'dos'}

104
Chapter 11. Dictionaries
The order of the key-value pairs is not the same. In fact, if you type the same example on your com-
puter, you might get a different result. In general, the order of items in a dictionary is unpredictable.
But that’s not a problem because the elements of a dictionary are never indexed with integer indices.
Instead, you use the keys to look up the corresponding values:
>>> print eng2sp['two']
'dos'
The key ’two’ always maps to the value 'dos' so the order of the items doesn’t matter.
If the key isn’t in the dictionary, you get an exception:
>>> print eng2sp['four']
KeyError: 'four'
The len function works on dictionaries; it returns the number of key-value pairs:
>>> len(eng2sp)
3
The in operator works on dictionaries; it tells you whether something appears as a key in the dictio-
nary (appearing as a value is not good enough).
>>> 'one' in eng2sp
True
>>> 'uno' in eng2sp
False
To see whether something appears as a value in a dictionary, you can use the method values, which
returns the values as a list, and then use the in operator:
>>> vals = eng2sp.values()
>>> 'uno' in vals
True
The in operator uses different algorithms for lists and dictionaries.
For lists, it uses a search
algorithm, as in Section 8.6. As the list gets longer, the search time gets longer in direct pro-
portion.
For dictionaries, Python uses an algorithm called a hashtable that has a remarkable
property: the in operator takes about the same amount of time no matter how many items there
are in a dictionary.
I won’t explain how that’s possible, but you can read more about it at
wikipedia.org/wiki/Hash_table.
Exercise 11.1 Write a function that reads the words in words.txt and stores them as keys in a
dictionary. It doesn’t matter what the values are. Then you can use the in operator as a fast way to
check whether a string is in the dictionary.
If you did Exercise 10.8, you can compare the speed of this implementation with the list in operator
and the bisection search.
11.1
Dictionary as a set of counters
Suppose you are given a string and you want to count how many times each letter appears. There
are several ways you could do it:

11.1. Dictionary as a set of counters
105
1. You could create 26 variables, one for each letter of the alphabet. Then you could traverse the
string and, for each character, increment the corresponding counter, probably using a chained
conditional.
2. You could create a list with 26 elements. Then you could convert each character to a number
(using the built-in function ord), use the number as an index into the list, and increment the
appropriate counter.
3. You could create a dictionary with characters as keys and counters as the corresponding values.
The ﬁrst time you see a character, you would add an item to the dictionary. After that you
would increment the value of an existing item.
Each of these options performs the same computation, but each of them implements that computation
in a different way.
An implementation is a way of performing a computation; some implementations are better than
others. For example, an advantage of the dictionary implementation is that we don’t have to know
ahead of time which letters appear in the string and we only have to make room for the letters that
do appear.
Here is what the code might look like:
def histogram(s):
d = dict()
for c in s:
if c not in d:
d[c] = 1
else:
d[c] += 1
return d
The name of the function is histogram, which is a statistical term for a set of counters (or frequen-
cies).
The ﬁrst line of the function creates an empty dictionary. The for loop traverses the string. Each
time through the loop, if the character c is not in the dictionary, we create a new item with key c and
the initial value 1 (since we have seen this letter once). If c is already in the dictionary we increment
d[c].
Here’s how it works:
>>> h = histogram('brontosaurus')
>>> print h
{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}
The histogram indicates that the letters ’a’ and 'b' appear once; 'o' appears twice, and so on.
Exercise 11.2 Dictionaries have a method called get that takes a key and a default value. If the key
appears in the dictionary, get returns the corresponding value; otherwise it returns the default value.
For example:
>>> h = histogram('a')
>>> print h
{'a': 1}

106
Chapter 11. Dictionaries
>>> h.get('a', 0)
1
>>> h.get('b', 0)
0
Use get to write histogram more concisely. You should be able to eliminate the if statement.
11.2
Looping and dictionaries
If you use a dictionary in a for statement, it traverses the keys of the dictionary. For example,
print_hist prints each key and the corresponding value:
def print_hist(h):
for c in h:
print c, h[c]
Here’s what the output looks like:
>>> h = histogram('parrot')
>>> print_hist(h)
a 1
p 1
r 2
t 1
o 1
Again, the keys are in no particular order.
Exercise 11.3 Dictionaries have a method called keys that returns the keys of the dictionary, in no
particular order, as a list.
Modify print_hist to print the keys and their values in alphabetical order.
11.3
Reverse lookup
Given a dictionary d and a key k, it is easy to ﬁnd the corresponding value v = d[k]. This operation
is called a lookup.
But what if you have v and you want to ﬁnd k? You have two problems: ﬁrst, there might be more
than one key that maps to the value v. Depending on the application, you might be able to pick one,
or you might have to make a list that contains all of them. Second, there is no simple syntax to do a
reverse lookup; you have to search.
Here is a function that takes a value and returns the ﬁrst key that maps to that value:
def reverse_lookup(d, v):
for k in d:
if d[k] == v:
return k
raise ValueError

11.4. Dictionaries and lists
107
This function is yet another example of the search pattern, but it uses a feature we haven’t seen
before, raise. The raise statement causes an exception; in this case it causes a ValueError,
which generally indicates that there is something wrong with the value of a parameter.
If we get to the end of the loop, that means v doesn’t appear in the dictionary as a value, so we raise
an exception.
Here is an example of a successful reverse lookup:
>>> h = histogram('parrot')
>>> k = reverse_lookup(h, 2)
>>> print k
r
And an unsuccessful one:
>>> k = reverse_lookup(h, 3)
Traceback (most recent call last):
File "<stdin>", line 1, in ?
File "<stdin>", line 5, in reverse_lookup
ValueError
The result when you raise an exception is the same as when Python raises one: it prints a traceback
and an error message.
The raise statement takes a detailed error message as an optional argument. For example:
>>> raise ValueError, 'value does not appear in the dictionary'
Traceback (most recent call last):
File "<stdin>", line 1, in ?
ValueError: value does not appear in the dictionary
A reverse lookup is much slower than a forward lookup; if you have to do it often, or if the dictionary
gets big, the performance of your program will suffer.
Exercise 11.4 Modify reverse_lookup so that it builds and returns a list of all keys that map to v,
or an empty list if there are none.
11.4
Dictionaries and lists
Lists can appear as values in a dictionary. For example, if you were given a dictionary that maps
from letters to frequencies, you might want to invert it; that is, create a dictionary that maps from
frequencies to letters. Since there might be several letters with the same frequency, each value in the
inverted dictionary should be a list of letters.
Here is a function that inverts a dictionary:
def invert_dict(d):
inv = dict()
for key in d:
val = d[key]
if val not in inv:
inv[val] = [key]

108
Chapter 11. Dictionaries
else:
inv[val].append(key)
return inv
Each time through the loop, key gets a key from d and val gets the corresponding value. If val
is not in inv, that means we haven’t seen it before, so we create a new item and initialize it with a
singleton (a list that contains a single element). Otherwise we have seen this value before, so we
append the corresponding key to the list.
Here is an example:
>>> hist = histogram('parrot')
>>> print hist
{'a': 1, 'p': 1, 'r': 2, 't': 1, 'o': 1}
>>> inv = invert_dict(hist)
>>> print inv
{1: ['a', 'p', 't', 'o'], 2: ['r']}
And here is a diagram showing hist and inv:
’a’
1
1
dict
hist
’p’
1
’o’
1
’r’
2
’t’
0
1
’a’
’p’
list
2
’t’
’o’
3
1
dict
inv
2
0
list
’r’
A dictionary is represented as a box with the type dict above it and the key-value pairs inside. If
the values are integers, ﬂoats or strings, I usually draw them inside the box, but I usually draw lists
outside the box, just to keep the diagram simple.
Lists can be values in a dictionary, as this example shows, but they cannot be keys. Here’s what
happens if you try:
>>> t = [1, 2, 3]
>>> d = dict()
>>> d[t] = 'oops'
Traceback (most recent call last):
File "<stdin>", line 1, in ?
TypeError: list objects are unhashable
I mentioned earlier that a dictionary is implemented using a hashtable and that means that the keys
have to be hashable.
A hash is a function that takes a value (of any kind) and returns an integer. Dictionaries use these
integers, called hash values, to store and look up key-value pairs.
This system works ﬁne if the keys are immutable. But if the keys are mutable, like lists, bad things
happen. For example, when you create a key-value pair, Python hashes the key and stores it in the

11.5. Memos
109
corresponding location. If you modify the key and then hash it again, it would go to a different
location. In that case you might have two entries for the same key, or you might not be able to ﬁnd
a key. Either way, the dictionary wouldn’t work correctly.
That’s why the keys have to be hashable, and why mutable types like lists aren’t. The simplest way
to get around this limitation is to use tuples, which we will see in the next chapter.
Since dictionaries are mutable, they can’t be used as keys, but they can be used as values.
Exercise 11.5 Read the documentation of the dictionary method setdefault and use it to write a
more concise version of invert_dict.
11.5
Memos
If you played with the fibonacci function from Section 6.7, you might have noticed that the bigger
the argument you provide, the longer the function takes to run. Furthermore, the run time increases
very quickly.
To understand why, consider this call graph for fibonacci with n=4:
fibonacci
n
4
fibonacci
n
3
fibonacci
n
2
fibonacci
n
0
fibonacci
n
1
fibonacci
n
1
fibonacci
n
2
fibonacci
n
0
fibonacci
n
1
A call graph shows a set of function frames, with lines connecting each frame to the frames of the
functions it calls. At the top of the graph, fibonacci with n=4 calls fibonacci with n=3 and n=2.
In turn, fibonacci with n=3 calls fibonacci with n=2 and n=1. And so on.
Count how many times fibonacci(0) and fibonacci(1) are called. This is an inefﬁcient solution
to the problem, and it gets worse as the argument gets bigger.
One solution is to keep track of values that have already been computed by storing them in a dic-
tionary. A previously computed value that is stored for later use is called a memo1. Here is an
implementation of fibonacci using memos:
known = {0:0, 1:1}
def fibonacci(n):
if n in known:
return known[n]
res = fibonacci(n-1) + fibonacci(n-2)
1See wikipedia.org/wiki/Memoization

110
Chapter 11. Dictionaries
known[n] = res
return res
known is a dictionary that keeps track of the Fibonacci numbers we already know. It starts with two
items: 0 maps to 0 and 1 maps to 1.
Whenever fibonacci is called, it checks known. If the result is already there, it can return immedi-
ately. Otherwise it has to compute the new value, add it to the dictionary, and return it.
Exercise 11.6 Run this version of fibonacci and the original with a range of parameters and
compare their run times.
11.6
Global variables
In the previous example, known is created outside the function, so it belongs to the special frame
called __main__. Variables in __main__ are sometimes called global because they can be accessed
from any function. Unlike local variables, which disappear when their function ends, global vari-
ables persist from one function call to the next.
It is common to use global variables for ﬂags; that is, boolean variables that indicate (“ﬂag”) whether
a condition is true. For example, some programs use a ﬂag named verbose to control the level of
detail in the output:
verbose = True
def example1():
if verbose:
print 'Running example1'
If you try to reassign a global variable, you might be surprised. The following example is supposed
to keep track of whether the function has been called:
been_called = False
def example2():
been_called = True
# WRONG
But if you run it you will see that the value of been_called doesn’t change. The problem is that
example2 creates a new local variable named been_called. The local variable goes away when
the function ends, and has no effect on the global variable.
To reassign a global variable inside a function you have to declare the global variable before you
use it:
been_called = False
def example2():
global been_called
been_called = True
The global statement tells the interpreter something like, “In this function, when I say
been_called, I mean the global variable; don’t create a local one.”
Here’s an example that tries to update a global variable:

11.7. Long integers
111
count = 0
def example3():
count = count + 1
# WRONG
If you run it you get:
UnboundLocalError: local variable 'count' referenced before assignment
Python assumes that count is local, which means that you are reading it before writing it. The
solution, again, is to declare count global.
def example3():
global count
count += 1
If the global value is mutable, you can modify it without declaring it:
known = {0:0, 1:1}
def example4():
known[2] = 1
So you can add, remove and replace elements of a global list or dictionary, but if you want to reassign
the variable, you have to declare it:
def example5():
global known
known = dict()
11.7
Long integers
If you compute fibonacci(50), you get:
>>> fibonacci(50)
12586269025L
The L at the end indicates that the result is a long integer2, or type long.
Values with type int have a limited range; long integers can be arbitrarily big, but as they get bigger
they consume more space and time.
The mathematical operators work on long integers, and the functions in the math module, too, so in
general any code that works with int will also work with long.
Any time the result of a computation is too big to be represented with an integer, Python converts
the result as a long integer:
>>> 1000 * 1000
1000000
>>> 100000 * 100000
10000000000L
2In Python 3.0, type long is gone; all integers, even really big ones, are type int.

112
Chapter 11. Dictionaries
In the ﬁrst case the result has type int; in the second case it is long.
Exercise 11.7 Exponentiation of large integers is the basis of common algorithms for public-key
encryption. Read the Wikipedia page on the RSA algorithm3 and write functions to encode and
decode messages.
11.8
Debugging
As you work with bigger datasets it can become unwieldy to debug by printing and checking data
by hand. Here are some suggestions for debugging large datasets:
Scale down the input: If possible, reduce the size of the dataset. For example if the program reads
a text ﬁle, start with just the ﬁrst 10 lines, or with the smallest example you can ﬁnd. You can
either edit the ﬁles themselves, or (better) modify the program so it reads only the ﬁrst n lines.
If there is an error, you can reduce n to the smallest value that manifests the error, and then
increase it gradually as you ﬁnd and correct errors.
Check summaries and types: Instead of printing and checking the entire dataset, consider printing
summaries of the data: for example, the number of items in a dictionary or the total of a list
of numbers.
A common cause of runtime errors is a value that is not the right type. For debugging this
kind of error, it is often enough to print the type of a value.
Write self-checks: Sometimes you can write code to check for errors automatically. For example,
if you are computing the average of a list of numbers, you could check that the result is not
greater than the largest element in the list or less than the smallest. This is called a “sanity
check” because it detects results that are “insane.”
Another kind of check compares the results of two different computations to see if they are
consistent. This is called a “consistency check.”
Pretty print the output: Formatting debugging output can make it easier to spot an error. We saw
an example in Section 6.9. The pprint module provides a pprint function that displays
built-in types in a more human-readable format.
Again, time you spend building scaffolding can reduce the time you spend debugging.
11.9
Glossary
dictionary: A mapping from a set of keys to their corresponding values.
key-value pair: The representation of the mapping from a key to a value.
item: Another name for a key-value pair.
key: An object that appears in a dictionary as the ﬁrst part of a key-value pair.
value: An object that appears in a dictionary as the second part of a key-value pair. This is more
speciﬁc than our previous use of the word “value.”
3wikipedia.org/wiki/RSA

11.10. Exercises
113
implementation: A way of performing a computation.
hashtable: The algorithm used to implement Python dictionaries.
hash function: A function used by a hashtable to compute the location for a key.
hashable: A type that has a hash function. Immutable types like integers, ﬂoats and strings are
hashable; mutable types like lists and dictionaries are not.
lookup: A dictionary operation that takes a key and ﬁnds the corresponding value.
reverse lookup: A dictionary operation that takes a value and ﬁnds one or more keys that map to
it.
singleton: A list (or other sequence) with a single element.
call graph: A diagram that shows every frame created during the execution of a program, with an
arrow from each caller to each callee.
histogram: A set of counters.
memo: A computed value stored to avoid unnecessary future computation.
global variable: A variable deﬁned outside a function. Global variables can be accessed from any
function.
ﬂag: A boolean variable used to indicate whether a condition is true.
declaration: A statement like global that tells the interpreter something about a variable.
11.10
Exercises
Exercise 11.8 If you did Exercise 10.5, you already have a function named has_duplicates that
takes a list as a parameter and returns True if there is any object that appears more than once in the
list.
Use a dictionary to write a faster, simpler version of has_duplicates.
Exercise 11.9 Two words are “rotate pairs” if you can rotate one of them and get the other (see
rotate_word in Exercise 8.12).
Write a program that reads a wordlist and ﬁnds all the rotate pairs.
Exercise 11.10 Here’s another Puzzler from Car Talk4:
This was sent in by a fellow named Dan O’Leary. He came upon a common one-
syllable, ﬁve-letter word recently that has the following unique property. When you
remove the ﬁrst letter, the remaining letters form a homophone of the original word,
that is a word that sounds exactly the same. Replace the ﬁrst letter, that is, put it back
and remove the second letter and the result is yet another homophone of the original
word. And the question is, what’s the word?
Now I’m going to give you an example that doesn’t work. Let’s look at the ﬁve-letter
word, ‘wrack.’ W-R-A-C-K, you know like to ‘wrack with pain.’ If I remove the ﬁrst
4www.cartalk.com/content/puzzler/transcripts/200717

114
Chapter 11. Dictionaries
letter, I am left with a four-letter word, ’R-A-C-K.’ As in, ‘Holy cow, did you see the
rack on that buck! It must have been a nine-pointer!’ It’s a perfect homophone. If you
put the ‘w’ back, and remove the ‘r,’ instead, you’re left with the word, ‘wack,’ which
is a real word, it’s just not a homophone of the other two words.
But there is, however, at least one word that Dan and we know of, which will yield two
homophones if you remove either of the ﬁrst two letters to make two, new four-letter
words. The question is, what’s the word?
You can use the dictionary from Exercise 11.1 to check whether a string is in the word list.
To check whether two words are homophones, you can use the CMU Pronouncing Dictionary. You
can download it from www.speech.cs.cmu.edu/cgi-bin/cmudict or from thinkpython.com/
code/c06d and you can also download thinkpython.com/code/pronounce.py, which provides
a function named read_dictionary that reads the pronouncing dictionary and returns a Python
dictionary that maps from each word to a string that describes its primary pronunciation.
Write a program that lists all the words that solve the Puzzler.
You can see my solution at
thinkpython.com/code/homophone.py.

Chapter 12
Tuples
12.1
Tuples are immutable
A tuple is a sequence of values. The values can be any type, and they are indexed by integers, so in
that respect tuples are a lot like lists. The important difference is that tuples are immutable.
Syntactically, a tuple is a comma-separated list of values:
>>> t = 'a', 'b', 'c', 'd', 'e'
Although it is not necessary, it is common to enclose tuples in parentheses:
>>> t = ('a', 'b', 'c', 'd', 'e')
To create a tuple with a single element, you have to include the ﬁnal comma:
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
Without the comma, Python treats ('a') as a string in parentheses:
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
Another way to create a tuple is the built-in function tuple. With no argument, it creates an empty
tuple:
>>> t = tuple()
>>> print t
()
If the argument is a sequence (string, list or tuple), the result is a tuple with the elements of the
sequence:
>>> t = tuple('lupins')
>>> print t
('l', 'u', 'p', 'i', 'n', 's')

116
Chapter 12. Tuples
Because tuple is the name of a built-in function, you should avoid using it as a variable name.
Most list operators also work on tuples. The bracket operator indexes an element:
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print t[0]
'a'
And the slice operator selects a range of elements.
>>> print t[1:3]
('b', 'c')
But if you try to modify one of the elements of the tuple, you get an error:
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
You can’t modify the elements of a tuple, but you can replace one tuple with another:
>>> t = ('A',) + t[1:]
>>> print t
('A', 'b', 'c', 'd', 'e')
12.2
Tuple assignment
It is often useful to swap the values of two variables. With conventional assignments, you have to
use a temporary variable. For example, to swap a and b:
>>> temp = a
>>> a = b
>>> b = temp
This solution is cumbersome; tuple assignment is more elegant:
>>> a, b = b, a
The left side is a tuple of variables; the right side is a tuple of expressions. Each value is assigned
to its respective variable. All the expressions on the right side are evaluated before any of the
assignments.
The number of variables on the left and the number of values on the right have to be the same:
>>> a, b = 1, 2, 3
ValueError: too many values to unpack
More generally, the right side can be any kind of sequence (string, list or tuple). For example, to
split an email address into a user name and a domain, you could write:
>>> addr = 'monty@python.org'
>>> uname, domain = addr.split('@')
The return value from split is a list with two elements; the ﬁrst element is assigned to uname, the
second to domain.

12.3. Tuples as return values
117
>>> print uname
monty
>>> print domain
python.org
12.3
Tuples as return values
Strictly speaking, a function can only return one value, but if the value is a tuple, the effect is the
same as returning multiple values. For example, if you want to divide two integers and compute the
quotient and remainder, it is inefﬁcient to compute x/y and then x%y. It is better to compute them
both at the same time.
The built-in function divmod takes two arguments and returns a tuple of two values, the quotient
and remainder. You can store the result as a tuple:
>>> t = divmod(7, 3)
>>> print t
(2, 1)
Or use tuple assignment to store the elements separately:
>>> quot, rem = divmod(7, 3)
>>> print quot
2
>>> print rem
1
Here is an example of a function that returns a tuple:
def min_max(t):
return min(t), max(t)
max and min are built-in functions that ﬁnd the largest and smallest elements of a sequence. min_max
computes both and returns a tuple of two values.
12.4
Variable-length argument tuples
Functions can take a variable number of arguments. A parameter name that begins with * gathers
arguments into a tuple. For example, printall takes any number of arguments and prints them:
def printall(*args):
print args
The gather parameter can have any name you like, but args is conventional. Here’s how the function
works:
>>> printall(1, 2.0, '3')
(1, 2.0, '3')
You can combine the gather operator with required and positional arguments:

118
Chapter 12. Tuples
def pointless(required, optional=0, *args):
print required, optional, args
Run this function with 1, 2, 3 and 4 or more arguments and make sure you understand what it does.
The complement of gather is scatter. If you have a sequence of values and you want to pass it to a
function as multiple arguments, you can use the * operator. For example, divmod takes exactly two
arguments; it doesn’t work with a tuple:
>>> t = (7, 3)
>>> divmod(t)
TypeError: divmod expected 2 arguments, got 1
But if you scatter the tuple, it works:
>>> divmod(*t)
(2, 1)
Exercise 12.1 Many of the built-in functions use variable-length argument tuples. For example,
max and min can take any number of arguments:
>>> max(1,2,3)
3
But sum does not.
>>> sum(1,2,3)
TypeError: sum expected at most 2 arguments, got 3
Write a function called sumall that takes any number of arguments and returns their sum.
12.5
Lists and tuples
zip is a built-in function that takes two or more sequences and “zips” them into a list1 of tuples
where each tuple contains one element from each sequence.
This example zips a string and a list:
>>> s = 'abc'
>>> t = [0, 1, 2]
>>> zip(s, t)
[('a', 0), ('b', 1), ('c', 2)]
The result is a list of tuples where each tuple contains a character from the string and the correspond-
ing element from the list.
If the sequences are not the same length, the result has the length of the shorter one.
>>> zip('Anne', 'Elk')
[('A', 'E'), ('n', 'l'), ('n', 'k')]
You can use tuple assignment in a for loop to traverse a list of tuples:
1In Python 3.0, zip returns an iterator of tuples, but for most purposes, an iterator behaves like a list.

12.6. Dictionaries and tuples
119
t = [('a', 0), ('b', 1), ('c', 2)]
for letter, number in t:
print number, letter
Each time through the loop, Python selects the next tuple in the list and assigns the elements to
letter and number. The output of this loop is:
0 a
1 b
2 c
If you combine zip, for and tuple assignment, you get a useful idiom for traversing two (or more)
sequences at the same time. For example, has_match takes two sequences, t1 and t2, and returns
True if there is an index i such that t1[i] == t2[i]:
def has_match(t1, t2):
for x, y in zip(t1, t2):
if x == y:
return True
return False
If you need to traverse the elements of a sequence and their indices, you can use the built-in function
enumerate:
for index, element in enumerate('abc'):
print index, element
The output of this loop is:
0 a
1 b
2 c
Again.
12.6
Dictionaries and tuples
Dictionaries have a method called items that returns a list of tuples, where each tuple is a key-value
pair2.
>>> d = {'a':0, 'b':1, 'c':2}
>>> t = d.items()
>>> print t
[('a', 0), ('c', 2), ('b', 1)]
As you should expect from a dictionary, the items are in no particular order.
Conversely, you can use a list of tuples to initialize a new dictionary:
>>> t = [('a', 0), ('c', 2), ('b', 1)]
>>> d = dict(t)
>>> print d
{'a': 0, 'c': 2, 'b': 1}
2This behavior is slightly different in Python 3.0.

120
Chapter 12. Tuples
Combining dict with zip yields a concise way to create a dictionary:
>>> d = dict(zip('abc', range(3)))
>>> print d
{'a': 0, 'c': 2, 'b': 1}
The dictionary method update also takes a list of tuples and adds them, as key-value pairs, to an
existing dictionary.
Combining items, tuple assignment and for, you get the idiom for traversing the keys and values
of a dictionary:
for key, val in d.items():
print val, key
The output of this loop is:
0 a
2 c
1 b
Again.
It is common to use tuples as keys in dictionaries (primarily because you can’t use lists). For ex-
ample, a telephone directory might map from last-name, ﬁrst-name pairs to telephone numbers.
Assuming that we have deﬁned last, first and number, we could write:
directory[last,first] = number
The expression in brackets is a tuple. We could use tuple assignment to traverse this dictionary.
for last, first in directory:
print first, last, directory[last,first]
This loop traverses the keys in directory, which are tuples. It assigns the elements of each tuple
to last and first, then prints the name and corresponding telephone number.
There are two ways to represent tuples in a state diagram. The more detailed version shows the
indices and elements just as they appear in a list. For example, the tuple ('Cleese', 'John')
would appear:
0
1
’Cleese’
’John’
tuple
But in a larger diagram you might want to leave out the details. For example, a diagram of the
telephone directory might appear:

12.7. Comparing tuples
121
(’Cleese’, ’John’)
’08700 100 222’
’08700 100 222’
’08700 100 222’
’08700 100 222’
’08700 100 222’
(’Chapman’, ’Graham’)
(’Idle’, ’Eric’)
(’Jones’, ’Terry’)
(’Gilliam’, ’Terry’)
(’Palin’, ’Michael’)
’08700 100 222’
dict
Here the tuples are shown using Python syntax as a graphical shorthand.
The telephone number in the diagram is the complaints line for the BBC, so please don’t call it.
12.7
Comparing tuples
The comparison operators work with tuples and other sequences; Python starts by comparing the
ﬁrst element from each sequence. If they are equal, it goes on to the next elements, and so on, until
it ﬁnds elements that differ. Subsequent elements are not considered (even if they are really big).
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
The sort function works the same way. It sorts primarily by ﬁrst element, but in the case of a tie, it
sorts by second element, and so on.
This feature lends itself to a pattern called DSU for
Decorate a sequence by building a list of tuples with one or more sort keys preceding the elements
from the sequence,
Sort the list of tuples, and
Undecorate by extracting the sorted elements of the sequence.
For example, suppose you have a list of words and you want to sort them from longest to shortest:
def sort_by_length(words):
t = []
for word in words:
t.append((len(word), word))
t.sort(reverse=True)
res = []
for length, word in t:
res.append(word)
return res

122
Chapter 12. Tuples
The ﬁrst loop builds a list of tuples, where each tuple is a word preceded by its length.
sort compares the ﬁrst element, length, ﬁrst, and only considers the second element to break ties.
The keyword argument reverse=True tells sort to go in decreasing order.
The second loop traverses the list of tuples and builds a list of words in descending order of length.
Exercise 12.2 In this example, ties are broken by comparing words, so words with the same length
appear in alphabetical order. For other applications you might want to break ties at random. Modify
this example so that words with the same length appear in random order. Hint: see the random
function in the random module.
12.8
Sequences of sequences
I have focused on lists of tuples, but almost all of the examples in this chapter also work with lists
of lists, tuples of tuples, and tuples of lists. To avoid enumerating the possible combinations, it is
sometimes easier to talk about sequences of sequences.
In many contexts, the different kinds of sequences (strings, lists and tuples) can be used interchange-
ably. So how and why do you choose one over the others?
To start with the obvious, strings are more limited than other sequences because the elements have
to be characters. They are also immutable. If you need the ability to change the characters in a string
(as opposed to creating a new string), you might want to use a list of characters instead.
Lists are more common than tuples, mostly because they are mutable. But there are a few cases
where you might prefer tuples:
1. In some contexts, like a return statement, it is syntactically simpler to create a tuple than a
list. In other contexts, you might prefer a list.
2. If you want to use a sequence as a dictionary key, you have to use an immutable type like a
tuple or string.
3. If you are passing a sequence as an argument to a function, using tuples reduces the potential
for unexpected behavior due to aliasing.
Because tuples are immutable, they don’t provide methods like sort and reverse, which modify
existing lists. But Python provides the built-in functions sorted and reversed, which take any
sequence as a parameter and return a new list with the same elements in a different order.
12.9
Debugging
Lists, dictionaries and tuples are known generically as data structures; in this chapter we are start-
ing to see compound data structures, like lists of tuples, and dictionaries that contain tuples as keys
and lists as values. Compound data structures are useful, but they are prone to what I call shape
errors; that is, errors caused when a data structure has the wrong type, size or composition. For
example, if you are expecting a list with one integer and I give you a plain old integer (not in a list),
it won’t work.

12.10. Glossary
123
To help debug these kinds of errors, I have written a module called structshape that provides a
function, also called structshape, that takes any kind of data structure as an argument and re-
turns a string that summarizes its shape. You can download it from thinkpython.com/code/
structshape.py
Here’s the result for a simple list:
>>> from structshape import structshape
>>> t = [1,2,3]
>>> print structshape(t)
list of 3 int
A fancier program might write “list of 3 ints,” but it was easier not to deal with plurals. Here’s a list
of lists:
>>> t2 = [[1,2], [3,4], [5,6]]
>>> print structshape(t2)
list of 3 list of 2 int
If the elements of the list are not the same type, structshape groups them, in order, by type:
>>> t3 = [1, 2, 3, 4.0, '5', '6', [7], [8], 9]
>>> print structshape(t3)
list of (3 int, float, 2 str, 2 list of int, int)
Here’s a list of tuples:
>>> s = 'abc'
>>> lt = zip(t, s)
>>> print structshape(lt)
list of 3 tuple of (int, str)
And here’s a dictionary with 3 items that map integers to strings.
>>> d = dict(lt)
>>> print structshape(d)
dict of 3 int->str
If you are having trouble keeping track of your data structures, structshape can help.
12.10
Glossary
tuple: An immutable sequence of elements.
tuple assignment: An assignment with a sequence on the right side and a tuple of variables on the
left. The right side is evaluated and then its elements are assigned to the variables on the left.
gather: The operation of assembling a variable-length argument tuple.
scatter: The operation of treating a sequence as a list of arguments.
DSU: Abbreviation of “decorate-sort-undecorate,” a pattern that involves building a list of tuples,
sorting, and extracting part of the result.
data structure: A collection of related values, often organized in lists, dictionaries, tuples, etc.
shape (of a data structure): A summary of the type, size and composition of a data structure.

124
Chapter 12. Tuples
12.11
Exercises
Exercise 12.3 Write a function called most_frequent that takes a string and prints the letters in
decreasing order of frequency. Find text samples from several different languages and see how letter
frequency varies between languages. Compare your results with the tables at wikipedia.org/
wiki/Letter_frequencies.
Exercise 12.4 More anagrams!
1. Write a program that reads a word list from a ﬁle (see Section 9.1) and prints all the sets of
words that are anagrams.
Here is an example of what the output might look like:
['deltas', 'desalt', 'lasted', 'salted', 'slated', 'staled']
['retainers', 'ternaries']
['generating', 'greatening']
['resmelts', 'smelters', 'termless']
Hint: you might want to build a dictionary that maps from a set of letters to a list of words
that can be spelled with those letters. The question is, how can you represent the set of letters
in a way that can be used as a key?
2. Modify the previous program so that it prints the largest set of anagrams ﬁrst, followed by the
second largest set, and so on.
3. In Scrabble a “bingo” is when you play all seven tiles in your rack, along with a letter on the
board, to form an eight-letter word. What set of 8 letters forms the most possible bingos?
Hint: there are seven.
4. Two words form a “metathesis pair” if you can transform one into the other by swapping
two letters3; for example, “converse” and “conserve.” Write a program that ﬁnds all of the
metathesis pairs in the dictionary. Hint: don’t test all pairs of words, and don’t test all possible
swaps.
You can download a solution from thinkpython.com/code/anagram_sets.py.
Exercise 12.5 Here’s another Car Talk Puzzler4:
What is the longest English word, that remains a valid English word, as you remove its
letters one at a time?
Now, letters can be removed from either end, or the middle, but you can’t rearrange any
of the letters. Every time you drop a letter, you wind up with another English word.
If you do that, you’re eventually going to wind up with one letter and that too is going
to be an English word—one that’s found in the dictionary. I want to know what’s the
longest word and how many letters does it have?
I’m going to give you a little modest example: Sprite. Ok? You start off with sprite,
you take a letter off, one from the interior of the word, take the r away, and we’re left
with the word spite, then we take the e off the end, we’re left with spit, we take the s
off, we’re left with pit, it, and I.
3This exercise is inspired by an example at puzzlers.org.
4www.cartalk.com/content/puzzler/transcripts/200651

12.11. Exercises
125
Write a program to ﬁnd all words that can be reduced in this way, and then ﬁnd the longest one.
This exercise is a little more challenging than most, so here are some suggestions:
1. You might want to write a function that takes a word and computes a list of all the words that
can be formed by removing one letter. These are the “children” of the word.
2. Recursively, a word is reducible if any of its children are reducible. As a base case, you can
consider the empty string reducible.
3. The wordlist I provided, words.txt, doesn’t contain single letter words. So you might want
to add “I”, “a”, and the empty string.
4. To improve the performance of your program, you might want to memoize the words that are
known to be reducible.
You can see my solution at thinkpython.com/code/reducible.py.

126
Chapter 12. Tuples

Chapter 13
Case study: data structure selection
13.1
Word frequency analysis
As usual, you should at least attempt the following exercises before you read my solutions.
Exercise 13.1 Write a program that reads a ﬁle, breaks each line into words, strips whitespace and
punctuation from the words, and converts them to lowercase.
Hint: The string module provides strings named whitespace, which contains space, tab, newline,
etc., and punctuation which contains the punctuation characters. Let’s see if we can make Python
swear:
>>> import string
>>> print string.punctuation
!"#$%&'()*+,-./:;<=>?@[\]ˆ_`{|}˜
Also, you might consider using the string methods strip, replace and translate.
Exercise 13.2 Go to Project Gutenberg (gutenberg.net) and download your favorite out-of-
copyright book in plain text format.
Modify your program from the previous exercise to read the book you downloaded, skip over the
header information at the beginning of the ﬁle, and process the rest of the words as before.
Then modify the program to count the total number of words in the book, and the number of times
each word is used.
Print the number of different words used in the book. Compare different books by different authors,
written in different eras. Which author uses the most extensive vocabulary?
Exercise 13.3 Modify the program from the previous exercise to print the 20 most frequently-used
words in the book.
Exercise 13.4 Modify the previous program to read a word list (see Section 9.1) and then print all
the words in the book that are not in the word list. How many of them are typos? How many of them
are common words that should be in the word list, and how many of them are really obscure?

128
Chapter 13. Case study: data structure selection
13.2
Random numbers
Given the same inputs, most computer programs generate the same outputs every time, so they are
said to be deterministic. Determinism is usually a good thing, since we expect the same calculation
to yield the same result. For some applications, though, we want the computer to be unpredictable.
Games are an obvious example, but there are more.
Making a program truly nondeterministic turns out to be not so easy, but there are ways to make
it at least seem nondeterministic. One of them is to use algorithms that generate pseudorandom
numbers. Pseudorandom numbers are not truly random because they are generated by a deterministic
computation, but just by looking at the numbers it is all but impossible to distinguish them from
random.
The random module provides functions that generate pseudorandom numbers (which I will simply
call “random” from here on).
The function random returns a random ﬂoat between 0.0 and 1.0 (including 0.0 but not 1.0). Each
time you call random, you get the next number in a long series. To see a sample, run this loop:
import random
for i in range(10):
x = random.random()
print x
The function randint takes parameters low and high and returns an integer between low and high
(including both).
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9
To choose an element from a sequence at random, you can use choice:
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
The random module also provides functions to generate random values from continuous distributions
including Gaussian, exponential, gamma, and a few more.
Exercise 13.5 Write a function named choose_from_hist that takes a histogram as deﬁned in
Section 11.1 and returns a random value from the histogram, chosen with probability in proportion
to frequency. For example, for this histogram:
>>> t = ['a', 'a', 'b']
>>> h = histogram(t)
>>> print h
{'a': 2, 'b': 1}
your function should ’a’ with probability 2/3 and 'b' with probability 1/3.

13.3. Word histogram
129
13.3
Word histogram
Here is a program that reads a ﬁle and builds a histogram of the words in the ﬁle:
import string
def process_file(filename):
h = dict()
fp = open(filename)
for line in fp:
process_line(line, h)
return h
def process_line(line, h):
line = line.replace('-', ' ')
for word in line.split():
word = word.strip(string.punctuation + string.whitespace)
word = word.lower()
h[word] = h.get(word, 0) + 1
hist = process_file('emma.txt')
This program reads emma.txt, which contains the text of Emma by Jane Austen.
process_file loops through the lines of the ﬁle, passing them one at a time to process_line. The
histogram h is being used as an accumulator.
process_line uses the string method replace to replace hyphens with spaces before using split
to break the line into a list of strings. It traverses the list of words and uses strip and lower to
remove punctuation and convert to lower case. (It is a shorthand to say that strings are “converted;”
remember that string are immutable, so methods like strip and lower return new strings.)
Finally, process_line updates the histogram by creating a new item or incrementing an existing
one.
To count the total number of words in the ﬁle, we can add up the frequencies in the histogram:
def total_words(h):
return sum(h.values())
The number of different words is just the number of items in the dictionary:
def different_words(h):
return len(h)
Here is some code to print the results:
print 'Total number of words:', total_words(hist)
print 'Number of different words:', different_words(hist)
And the results:
Total number of words: 161073
Number of different words: 7212

130
Chapter 13. Case study: data structure selection
13.4
Most common words
To ﬁnd the most common words, we can apply the DSU pattern; most_common takes a histogram
and returns a list of word-frequency tuples, sorted in reverse order by frequency:
def most_common(h):
t = []
for key, value in h.items():
t.append((value, key))
t.sort(reverse=True)
return t
Here is a loop that prints the ten most common words:
t = most_common(hist)
print 'The most common words are:'
for freq, word in t[0:10]:
print word, '\t', freq
And here are the results from Emma:
The most common words are:
to
5242
the
5204
and
4897
of
4293
i
3191
a
3130
it
2529
her
2483
was
2400
she
2364
13.5
Optional parameters
We have seen built-in functions and methods that take a variable number of arguments. It is possible
to write user-deﬁned functions with optional arguments, too. For example, here is a function that
prints the most common words in a histogram
def print_most_common(hist, num=10)
t = most_common(hist)
print 'The most common words are:'
for freq, word in t[0:num]:
print word, '\t', freq
The ﬁrst parameter is required; the second is optional. The default value of num is 10.
If you only provide one argument:
print_most_common(hist)

13.6. Dictionary subtraction
131
num gets the default value. If you provide two arguments:
print_most_common(hist, 20)
num gets the value of the argument instead. In other words, the optional argument overrides the
default value.
If a function has both required and optional parameters, all the required parameters have to come
ﬁrst, followed by the optional ones.
13.6
Dictionary subtraction
Finding the words from the book that are not in the word list from words.txt is a problem you
might recognize as set subtraction; that is, we want to ﬁnd all the words from one set (the words in
the book) that are not in another set (the words in the list).
subtract takes dictionaries d1 and d2 and returns a new dictionary that contains all the keys from
d1 that are not in d2. Since we don’t really care about the values, we set them all to None.
def subtract(d1, d2):
res = dict()
for key in d1:
if key not in d2:
res[key] = None
return res
To ﬁnd the words in the book that are not in words.txt, we can use process_file to build a
histogram for words.txt, and then subtract:
words = process_file('words.txt')
diff = subtract(hist, words)
print "The words in the book that aren't in the word list are:"
for word in diff.keys():
print word,
Here are some of the results from Emma:
The words in the book that aren't in the word list are:
rencontre jane's blanche woodhouses disingenuousness
friend's venice apartment ...
Some of these words are names and possessives. Others, like “rencontre,” are no longer in common
use. But a few are common words that should really be in the list!
Exercise 13.6 Python provides a data structure called set that provides many common set opera-
tions. Read the documentation at docs.python.org/lib/types-set.html and write a program
that uses set subtraction to ﬁnd words in the book that are not in the word list.
13.7
Random words
To choose a random word from the histogram, the simplest algorithm is to build a list with multiple
copies of each word, according to the observed frequency, and then choose from the list:

132
Chapter 13. Case study: data structure selection
def random_word(h):
t = []
for word, freq in h.items():
t.extend([word] * freq)
return random.choice(t)
The expression [word] * freq creates a list with freq copies of the string word. The extend
method is similar to append except that the argument is a sequence.
Exercise 13.7 This algorithm works, but it is not very efﬁcient; each time you choose a random
word, it rebuilds the list, which is as big as the original book. An obvious improvement is to build
the list once and then make multiple selections, but the list is still big.
An alternative is:
1. Use keys to get a list of the words in the book.
2. Build a list that contains the cumulative sum of the word frequencies (see Exercise 10.1). The
last item in this list is the total number of words in the book, n.
3. Choose a random number from 1 to n. Use a bisection search (See Exercise 10.8) to ﬁnd the
index where the random number would be inserted in the cumulative sum.
4. Use the index to ﬁnd the corresponding word in the word list.
Write a program that uses this algorithm to choose a random word from the book.
13.8
Markov analysis
If you choose words from the book at random, you can get a sense of the vocabulary, you probably
won’t get a sentence:
this the small regard harriet which knightley's it most things
A series of random words seldom makes sense because there is no relationship between successive
words. For example, in a real sentence you would expect an article like “the” to be followed by an
adjective or a noun, and probably not a verb or adverb.
One way to measure these kinds of relationships is Markov analysis1, which characterizes, for a
given sequence of words, the probability of the word that comes next. For example, the song Eric,
the Half a Bee begins:
Half a bee, philosophically,
Must, ipso facto, half not be.
But half the bee has got to be
Vis a vis, its entity. D’you see?
But can a bee be said to be
Or not to be an entire bee
When half the bee is not a bee
Due to some ancient injury?
1This case study is based on an example from Kernighan and Pike, The Practice of Programming, 1999.

13.9. Data structures
133
In this text, the phrase “half the” is always followed by the word “bee,” but the phrase “the bee”
might be followed by either “has” or “is”.
The result of Markov analysis is a mapping from each preﬁx (like “half the” and “the bee”) to all
possible sufﬁxes (like “has” and “is”).
Given this mapping, you can generate a random text by starting with any preﬁx and choosing at
random from the possible sufﬁxes. Next, you can combine the end of the preﬁx and the new sufﬁx
to form the next preﬁx, and repeat.
For example, if you start with the preﬁx “Half a,” then the next word has to be “bee,” because
the preﬁx only appears once in the text. The next preﬁx is “a bee,” so the next sufﬁx might be
“philosophically,” “be” or “due.”
In this example the length of the preﬁx is always two, but you can do Markov analysis with any
preﬁx length. The length of the preﬁx is called the “order” of the analysis.
Exercise 13.8 Markov analysis:
1. Write a program to read a text from a ﬁle and perform Markov analysis. The result should be
a dictionary that maps from preﬁxes to a collection of possible sufﬁxes. The collection might
be a list, tuple, or dictionary; it is up to you to make an appropriate choice. You can test your
program with preﬁx length two, but you should write the program in a way that makes it easy
to try other lengths.
2. Add a function to the previous program to generate random text based on the Markov analysis.
Here is an example from Emma with preﬁx length 2:
He was very clever, be it sweetness or be angry, ashamed or only amused, at such
a stroke. She had never thought of Hannah till you were never meant for me?” ”I
cannot make speeches, Emma:” he soon cut it all himself.
For this example, I left the punctuation attached to the words. The result is almost syntactically
correct, but not quite. Semantically, it almost makes sense, but not quite.
What happens if you increase the preﬁx length? Does the random text make more sense?
3. Once your program is working, you might want to try a mash-up: if you analyze text from
two or more books, the random text you generate will blend the vocabulary and phrases from
the sources in interesting ways.
13.9
Data structures
Using Markov analysis to generate random text is fun, but there is also a point to this exercise: data
structure selection. In your solution to the previous exercises, you had to choose:
• How to represent the preﬁxes.
• How to represent the collection of possible sufﬁxes.
• How to represent the mapping from each preﬁx to the collection of possible sufﬁxes.

134
Chapter 13. Case study: data structure selection
Ok, the last one is the easy; the only mapping type we have seen is a dictionary, so it is the natural
choice.
For the preﬁxes, the most obvious options are string, list of strings, or tuple of strings. For the
sufﬁxes, one option is a list; another is a histogram (dictionary).
How should you choose? The ﬁrst step is to think about the operations you will need to implement
for each data structure. For the preﬁxes, we need to be able to remove words from the beginning and
add to the end. For example, if the current preﬁx is “Half a,” and the next word is “bee,” you need
to be able to form the next preﬁx, “a bee.”
Your ﬁrst choice might be a list, since it is easy to add and remove elements, but we also need to be
able to use the preﬁxes as keys in a dictionary, so that rules out lists. With tuples, you can’t append
or remove, but you can use the addition operator to form a new tuple:
def shift(prefix, word):
return prefix[1:] + (word,)
shift takes a tuple of words, prefix, and a string, word, and forms a new tuple that has all the
words in prefix except the ﬁrst, and word added to the end.
For the collection of sufﬁxes, the operations we need to perform include adding a new sufﬁx (or
increasing the frequency of an existing one), and choosing a random sufﬁx.
Adding a new sufﬁx is equally easy for the list implementation or the histogram. Choosing a random
element from a list is easy; choosing from a histogram is harder to do efﬁciently (see Exercise 13.7).
So far we have been talking mostly about ease of implementation, but there are other factors to
consider in choosing data structures. One is run time. Sometimes there is a theoretical reason to
expect one data structure to be faster than other; for example, I mentioned that the in operator is
faster for dictionaries than for lists, at least when the number of elements is large.
But often you don’t know ahead of time which implementation will be faster. One option is to
implement both of them and see which is better. This approach is called benchmarking. A practical
alternative is to choose the data structure that is easiest to implement, and then see if it is fast enough
for the intended application. If so, there is no need to go on. If not, there are tools, like the profile
module, that can identify the places in a program that take the most time.
The other factor to consider is storage space. For example, using a histogram for the collection of
sufﬁxes might take less space because you only have to store each word once, no matter how many
times it appears in the text. In some cases, saving space can also make your program run faster,
and in the extreme, your program might not run at all if you run out of memory. But for many
applications, space is a secondary consideration after run time.
One ﬁnal thought: in this discussion, I have implied that we should use one data structure for both
analysis and generation. But since these are separate phases, it would also be possible to use one
structure for analysis and then convert to another structure for generation. This would be a net win
if the time saved during generation exceeded the time spent in conversion.
13.10
Debugging
When you are debugging a program, and especially if you are working on a hard bug, there are four
things to try:

13.11. Glossary
135
reading: Examine your code, read it back to yourself, and check that it says what you meant to say.
running: Experiment by making changes and running different versions. Often if you display the
right thing at the right place in the program, the problem becomes obvious, but sometimes
you have to spend some time to build scaffolding.
ruminating: Take some time to think! What kind of error is it: syntax, runtime, semantic? What
information can you get from the error messages, or from the output of the program? What
kind of error could cause the problem you’re seeing? What did you change last, before the
problem appeared?
retreating: At some point, the best thing to do is back off, undoing recent changes, until you get
back to a program that works and that you understand. Then you can starting rebuilding.
Beginning programmers sometimes get stuck on one of these activities and forget the others. Each
activity comes with its own failure mode.
For example, reading your code might help if the problem is a typographical error, but not if the
problem is a conceptual misunderstanding. If you don’t understand what your program does, you
can read it 100 times and never see the error, because the error is in your head.
Running experiments can help, especially if you run small, simple tests. But if you run experi-
ments without thinking or reading your code, you might fall into a pattern I call “random walk
programming,” which is the process of making random changes until the program does the right
thing. Needless to say, random walk programming can take a long time.
You have to take time to think. Debugging is like an experimental science. You should have at least
one hypothesis about what the problem is. If there are two or more possibilities, try to think of a test
that would eliminate one of them.
Taking a break helps with the thinking. So does talking. If you explain the problem to someone else
(or even yourself), you will sometimes ﬁnd the answer before you ﬁnish asking the question.
But even the best debugging techniques will fail if there are too many errors, or if the code you are
trying to ﬁx is too big and complicated. Sometimes the best option is to retreat, simplifying the
program until you get to something that works and that you understand.
Beginning programmers are often reluctant to retreat because they can’t stand to delete a line of code
(even if it’s wrong). If it makes you feel better, copy your program into another ﬁle before you start
stripping it down. Then you can paste the pieces back in a little bit at a time.
Finding a hard bug requires reading, running, ruminating, and sometimes retreating. If you get stuck
on one of these activities, try the others.
13.11
Glossary
deterministic: Pertaining to a program that does the same thing each time it runs, given the same
inputs.
pseudorandom: Pertaining to a sequence of numbers that appear to be random, but are generated
by a deterministic program.
default value: The value given to an optional parameter if no argument is provided.

136
Chapter 13. Case study: data structure selection
override: To replace a default value with an argument.
benchmarking: The process of choosing between data structures by implementing alternatives and
testing them on a sample of the possible inputs.
13.12
Exercises
Exercise 13.9 The “rank” of a word is its position in a list of words sorted by frequency: the most
common word has rank 1, the second most common has rank 2, etc.
Zipf’s law describes a relationship between the ranks and frequencies of words in natural languages2.
Speciﬁcally, it predicts that the frequency, f, of the word with rank r is:
f = cr−s
where s and c are parameters that depend on the language and the text. If you take the logarithm of
both sides of this equation, you get:
log f = logc−slogr
So if you plot log f versus logr, you should get a straight line with slope −s and intercept logc.
Write a program that reads a text from a ﬁle, counts word frequencies, and prints one line for each
word, in descending order of frequency, with log f and logr. Use the graphing program of your
choice to plot the results and check whether they form a straight line. Can you estimate the value of
s?
2See wikipedia.org/wiki/Zipf’s_law

Chapter 14
Files
14.1
Persistence
Most of the programs we have seen so far are transient in the sense that they run for a short time
and produce some output, but when they end, their data disappears. If you run the program again, it
starts with a clean slate.
Other programs are persistent: they run for a long time (or all the time); they keep at least some of
their data in permanent storage (a hard drive, for example); and if they shut down and restart, they
pick up where they left off.
Examples of persistent programs are operating systems, which run pretty much whenever a computer
is on, and web servers, which run all the time, waiting for requests to come in on the network.
One of the simplest ways for programs to maintain their data is by reading and writing text ﬁles.
We have already seen programs that read text ﬁles; in this chapters we will see programs that write
them.
An alternative is to store the state of the program in a database. In this chapter I will present a simple
database and a module, pickle, that makes it easy to store program data.
14.2
Reading and writing
A text ﬁle is a sequence of characters stored on a permanent medium like a hard drive, ﬂash memory,
or CD-ROM. We saw how to open and read a ﬁle in Section 9.1.
To write a ﬁle, you have to open it with mode 'w' as a second parameter:
>>> fout = open('output.txt', 'w')
>>> print fout
<open file 'output.txt', mode 'w' at 0xb7eb2410>
If the ﬁle already exists, opening it in write mode clears out the old data and starts fresh, so be
careful! If the ﬁle doesn’t exist, a new one is created.
The write method puts data into the ﬁle.

138
Chapter 14. Files
>>> line1 = "This here's the wattle,\n"
>>> fout.write(line1)
Again, the ﬁle object keeps track of where it is, so if you call write again, it adds the new data to
the end.
>>> line2 = "the emblem of our land.\n"
>>> fout.write(line2)
When you are done writing, you have to close the ﬁle.
>>> fout.close()
14.3
Format operator
The argument of write has to be a string, so if we want to put other values in a ﬁle, we have to
convert them to strings. The easiest way to do that is with str:
>>> x = 52
>>> f.write(str(x))
An alternative is to use the format operator, %. When applied to integers, % is the modulus operator.
But when the ﬁrst operand is a string, % is the format operator.
The ﬁrst operand is the format string, which contains one or more format sequences, which specify
how the second operand is formatted. The result is a string.
For example, the format sequence '%d' means that the second operand should be formatted as an
integer (d stands for “decimal”):
>>> camels = 42
>>> '%d' % camels
'42'
The result is the string '42', which is not to be confused with the integer value 42.
A format sequence can appear anywhere in the string, so you can embed a value in a sentence:
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
If there is more than one format sequence in the string, the second argument has to be a tuple. Each
format sequence is matched with an element of the tuple, in order.
The following example uses '%d' to format an integer, '%g' to format a ﬂoating-point number
(don’t ask why), and '%s' to format a string:
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
The number of elements in the tuple has to match the number of format sequences in the string.
Also, the types of the elements have to match the format sequences:

14.4. Filenames and paths
139
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: illegal argument type for built-in operation
In the ﬁrst example, there aren’t enough elements; in the second, the element is the wrong type.
The format operator is powerful, but it can be difﬁcult to use. You can read more about it at docs.
python.org/lib/typesseq-strings.html.
14.4
Filenames and paths
Files are organized into directories (also called “folders”). Every running program has a “current
directory,” which is the default directory for most operations. For example, when you open a ﬁle for
reading, Python looks for it in the current directory.
The os module provides functions for working with ﬁles and directories (“os” stands for “operating
system”). os.getcwd returns the name of the current directory:
>>> import os
>>> cwd = os.getcwd()
>>> print cwd
/home/dinsdale
cwd stands for “current working directory.” The result in this example is /home/dinsdale, which
is the home directory of a user named dinsdale.
A string like cwd that identiﬁes a ﬁle is called a path. A relative path starts from the current
directory; an absolute path starts from the topmost directory in the ﬁle system.
The paths we have seen so far are simple ﬁlenames, so they are relative to the current directory. To
ﬁnd the absolute path to a ﬁle, you can use os.path.abspath:
>>> os.path.abspath('memo.txt')
'/home/dinsdale/memo.txt'
os.path.exists checks whether a ﬁle or directory exists:
>>> os.path.exists('memo.txt')
True
If it exists, os.path.isdir checks whether it’s a directory:
>>> os.path.isdir('memo.txt')
False
>>> os.path.isdir('music')
True
Similarly, os.path.isfile checks whether it’s a ﬁle.
os.listdir returns a list of the ﬁles (and other directories) in the given directory:
>>> os.listdir(cwd)
['music', 'photos', 'memo.txt']

140
Chapter 14. Files
To demonstrate these functions, the following example “walks” through a directory, prints the names
of all the ﬁles, and calls itself recursively on all the directories.
def walk(dir):
for name in os.listdir(dir):
path = os.path.join(dir, name)
if os.path.isfile(path):
print path
else:
walk(path)
os.path.join takes a directory and a ﬁle name and joins them into a complete path.
Exercise 14.1 Modify walk so that instead of printing the names of the ﬁles, it returns a list of
names.
Exercise 14.2 The os module provides a function called walk that is similar to this one but more
versatile. Read the documentation and use it to print the names of the ﬁles in a given directory and
its subdirectories.
14.5
Catching exceptions
A lot of things can go wrong when you try to read and write ﬁles. If you try to open a ﬁle that
doesn’t exist, you get an IOError:
>>> fin = open('bad_file')
IOError: [Errno 2] No such file or directory: 'bad_file'
If you don’t have permission to access a ﬁle:
>>> fout = open('/etc/passwd', 'w')
IOError: [Errno 13] Permission denied: '/etc/passwd'
And if you try to open a directory for reading, you get
>>> fin = open('/home')
IOError: [Errno 21] Is a directory
To avoid these errors, you could use functions like os.path.exists and os.path.isfile, but it
would take a lot of time and code to check all the possibilities (if “Errno 21” is any indication,
there are at least 21 things that can go wrong).
It is better to go ahead and try, and deal with problems if they happen, which is exactly what the try
statement does. The syntax is similar to an if statement:
try:
fin = open('bad_file')
for line in fin:
print line
fin.close()
except:
print 'Something went wrong.'

14.6. Databases
141
Python starts by executing the try clause. If all goes well, it skips the except clause and proceeds.
If an exception occurs, it jumps out of the try clause and executes the except clause.
Handling an exception with a try statement is called catching an exception. In this example, the
except clause prints an error message that is not very helpful. In general, catching an exception
gives you a chance to ﬁx the problem, or try again, or at least end the program gracefully.
14.6
Databases
A database is a ﬁle that is organized for storing data. Most databases are organized like a dictionary
in the sense that they map from keys to values. The biggest difference is that the database is on disk
(or other permanent storage), so it persists after the program ends.
The module anydbm provides an interface for creating and updating database ﬁles. As an example,
I’ll create a database that contains captions for image ﬁles.
Opening a database is similar to opening other ﬁles:
>>> import anydbm
>>> db = anydbm.open('captions.db', 'c')
The mode 'c' means that the database should be created if it doesn’t already exist. The result is a
database object that can be used (for most operations) like a dictionary. If you create a new item,
anydbm updates the database ﬁle.
>>> db['cleese.png'] = 'Photo of John Cleese.'
When you access one of the items, anydbm reads the ﬁle:
>>> print db['cleese.png']
Photo of John Cleese.
If you make another assignment to an existing key, anydbm replaces the old value:
>>> db['cleese.png'] = 'Photo of John Cleese doing a silly walk.'
>>> print db['cleese.png']
Photo of John Cleese doing a silly walk.
Many dictionary methods, like keys and items, also work with database objects. So does iteration
with a for statement.
for key in db:
print key
As with other ﬁles, you should close the database when you are done:
>>> db.close()
14.7
Pickling
A limitation of anydbm is that the keys and values have to be strings. If you try to use any other type,
you get an error.

142
Chapter 14. Files
The pickle module can help. It translates almost any type of object into a string suitable for storage
in a database, and then translates strings back into objects.
pickle.dumps takes an object as a parameter and returns a string representation (dumps is short for
“dump string”):
>>> import pickle
>>> t = [1, 2, 3]
>>> pickle.dumps(t)
'(lp0\nI1\naI2\naI3\na.'
The format isn’t obvious to human readers; it is meant to be easy for pickle to interpret.
pickle.loads (“load string”) reconstitutes the object:
>>> t1 = [1, 2, 3]
>>> s = pickle.dumps(t1)
>>> t2 = pickle.loads(s)
>>> print t2
[1, 2, 3]
Although the new object has the same value as the old, it is not (in general) the same object:
>>> t == t2
True
>>> t is t2
False
In other words, pickling and then unpickling has the same effect as copying the object.
You can use pickle to store non-strings in a database. In fact, this combination is so common that
it has been encapsulated in a module called shelve.
Exercise 14.3 If you did Exercise 12.4, modify your solution so that it creates a database that maps
from each word in the list to a list of words that use the same set of letters.
Write a different program that opens the database and prints the contents in a human-readable format.
14.8
Pipes
Most operating systems provide a command-line interface, also known as a shell. Shells usually
provide commands to navigate the ﬁle system and launch applications. For example, in Unix, you
can change directories with cd, display the contents of a directory with ls, and launch a web browser
by typing (for example) firefox.
Any program that you can launch from the shell can also be launched from Python using a pipe. A
pipe is an object that represents a running process.
For example, the Unix command ls -l normally displays the contents of the current directory (in
long format). You can launch ls with os.popen:
>>> cmd = 'ls -l'
>>> fp = os.popen(cmd)

14.9. Writing modules
143
The argument is a string that contains a shell command. The return value is a ﬁle pointer that behaves
just like an open ﬁle. You can read the output from the ls process one line at a time with readline
or get the whole thing at once with read:
>>> res = fp.read()
When you are done, you close the pipe like a ﬁle:
>>> stat = fp.close()
>>> print stat
None
The return value is the ﬁnal status of the ls process; None means that it ended normally (with no
errors).
A common use of pipes is to read a compressed ﬁle incrementally; that is, without uncompressing
the whole thing at once. The following function takes the name of a compressed ﬁle as a parameter
and returns a pipe that uses gunzip to decompress the contents:
def open_gunzip(filename):
cmd = 'gunzip -c ' + filename
fp = os.popen(cmd)
return fp
If you read lines from fp one at a time, you never have to store the uncompressed ﬁle in memory or
on disk.
14.9
Writing modules
Any ﬁle that contains Python code can be imported as a module. For example, suppose you have a
ﬁle named wc.py with the following code:
def linecount(filename):
count = 0
for line in open(filename):
count += 1
return count
print linecount('wc.py')
If you run this program, it reads itself and prints the number of lines in the ﬁle, which is 7. You can
also import it like this:
>>> import wc
7
Now you have a module object wc:
>>> print wc
<module 'wc' from 'wc.py'>
That provides a function called linecount:

144
Chapter 14. Files
>>> wc.linecount('wc.py')
7
So that’s how you write modules in Python.
The only problem with this example is that when you import the module it executes the test code
at the bottom. Normally when you import a module, it deﬁnes new functions but it doesn’t execute
them.
Programs that will be imported as modules often use the following idiom:
if __name__ == '__main__':
print linecount('wc.py')
__name__ is a built-in variable that is set when the program starts. If the program is running as a
script, __name__ has the value __main__; in that case, the test code is executed. Otherwise, if the
module is being imported, the test code is skipped.
Exercise 14.4 Type this example into a ﬁle named wc.py and run it as a script. Then run the Python
interpreter and import wc. What is the value of __name__ when the module is being imported?
Warning: If you import a module that has already been imported, Python does nothing. It does not
re-read the ﬁle, even if it has changed.
If you want to reload a module, you can use the built-in function reload, but it can be tricky, so the
safest thing to do is restart the interpreter and then import the module again.
14.10
Debugging
When you are reading and writing ﬁles, you might run into problems with whitespace. These errors
can be hard to debug because spaces, tabs and newlines are normally invisible:
>>> s = '1 2\t 3\n 4'
>>> print s
1 2
3
4
The built-in function repr can help. It takes any object as an argument and returns a string repre-
sentation of the object. For strings, it represents whitespace characters with backslash sequences:
>>> print repr(s)
'1 2\t 3\n 4'
This can be helpful for debugging.
One other problem you might run into is that different systems use different characters to indicate the
end of a line. Some systems use a newline, represented \n. Others use a return character, represented
\r. Some use both. If you move ﬁles between different systems, these inconsistencies might cause
problems.
For most systems, there are applications to convert from one format to another. You can ﬁnd them
(and read more about this issue) at wikipedia.org/wiki/Newline. Or, of course, you could write
one yourself.

14.11. Glossary
145
14.11
Glossary
persistent: Pertaining to a program that runs indeﬁnitely and keeps at least some of its data in
permanent storage.
format operator: An operator, %, that takes a format string and a tuple and generates a string that
includes the elements of the tuple formatted as speciﬁed by the format string.
format string: A string, used with the format operator, that contains format sequences.
format sequence: A sequence of characters in a format string, like %d, that speciﬁes how a value
should be formatted.
text ﬁle: A sequence of characters stored in permanent storage like a hard drive.
directory: A named collection of ﬁles, also called a folder.
path: A string that identiﬁes a ﬁle.
relative path: A path that starts from the current directory.
absolute path: A path that starts from the topmost directory in the ﬁle system.
catch: To prevent an exception from terminating a program using the try and except statements.
database: A ﬁle whose contents are organized like a dictionary with keys that correspond to values.
14.12
Exercises
Exercise 14.5 The urllib module provides methods for manipulating URLs and downloading
information from the web. The following example downloads and prints a secret message from
thinkpython.com:
import urllib
conn = urllib.urlopen('http://thinkpython.com/secret.html')
for line in conn.fp:
print line.strip()
Run this code and follow the instructions you see there.
Exercise 14.6 In a large collection of MP3 ﬁles, there may be more than one copy of the same song,
stored in different directories or with different ﬁle names. The goal of this exercise is to search for
these duplicates.
1. Write a program that searches a directory and all of its subdirectories, recursively, and returns
a list of complete paths for all ﬁles with a given sufﬁx (like .mp3). Hint: os.path provides
several useful functions for manipulating ﬁle and path names.
2. To recognize duplicates, you can use a hash function that reads the ﬁle and generates a
short summary of the contents. For example, MD5 (Message-Digest algorithm 5) takes an
arbitrarily-long “message” and returns a 128-bit “checksum.” The probability is very small
that two ﬁles with different contents will return the same checksum.
You can read about MD5 at wikipedia.org/wiki/Md5. On a Unix system you can use the
program md5sum and a pipe to compute checksums from Python.

146
Chapter 14. Files
Exercise 14.7 The Internet Movie Database (IMDb) is an online collection of information about
movies. Their database is available in plain text format, so it is reasonably easy to read from Python.
For this exercise, the ﬁles you need are actors.list.gz and actresses.list.gz; you can down-
load them from www.imdb.com/interfaces#plain.
I have written a program that parses these ﬁles and splits them into actor names, movie titles, etc.
You can download it from thinkpython.com/code/imdb.py.
If you run imdb.py as a script, it reads actors.list.gz and prints one actor-movie pair per line.
Or, if you import imdb you can use the function process_file to, well, process the ﬁle. The
arguments are a ﬁlename, a function object and an optional number of lines to process. Here is an
example:
import imdb
def print_info(actor, date, title, role):
print actor, date, title, role
imdb.process_file('actors.list.gz', print_info)
When you call process_file, it opens filename, reads the contents, and calls print_info once
for each line in the ﬁle. print_info takes an actor, date, movie title and role as arguments and
prints them.
1. Write a program that reads actors.list.gz and actresses.list.gz and uses shelve to
build a database that maps from each actor to a list of his or her ﬁlms.
2. Two actors are “costars” if they have been in at least one movie together. Process the database
you built in the previous step and build a second database that maps from each actor to a list
of his or her costars.
3. Write a program that can play the “Six Degrees of Kevin Bacon,” which you can read about
at wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon. This problem is challenging be-
cause it requires you to ﬁnd the shortest path in a graph. You can read about shortest path
algorithms at wikipedia.org/wiki/Shortest_path_problem.

Chapter 15
Classes and objects
15.1
User-deﬁned types
We have used many of Python’s built-in types; now we are going to deﬁne a new type. As an
example, we will create a type called Point that represents a point in two-dimensional space.
In mathematical notation, points are often written in parentheses with a comma separating the coor-
dinates. For example, (0,0) represents the origin, and (x,y) represents the point x units to the right
and y units up from the origin.
There are several ways we might represent points in Python:
• We could store the coordinates separately in two variables, x and y.
• We could store the coordinates as elements in a list or tuple.
• We could create a new type to represent points as objects.
Creating a new type is (a little) more complicated than the other options, but it has advantages that
will be apparent soon.
A user-deﬁned type is also called a class. A class deﬁnition looks like this:
class Point(object):
"""represents a point in 2-D space"""
This header indicates that the new class is a Point, which is a kind of object, which is a built-in
type.
The body is a docstring that explains what the class is for. You can deﬁne variables and functions
inside a class deﬁnition, but we will get back to that later.
Deﬁning a class named Point creates a class object.
>>> print Point
<class '__main__.Point'>

148
Chapter 15. Classes and objects
Because Point is deﬁned at the top level, its “full name” is __main__.Point.
The class object is like a factory for creating objects. To create a Point, you call Point as if it were
a function.
>>> blank = Point()
>>> print blank
<__main__.Point instance at 0xb7e9d3ac>
The return value is a reference to a Point object, which we assign to blank. Creating a new object
is called instantiation, and the object is an instance of the class.
When you print an instance, Python tells you what class it belongs to and where it is stored in
memory (the preﬁx 0x means that the following number is in hexadecimal).
15.2
Attributes
You can assign values to an instance using dot notation:
>>> blank.x = 3.0
>>> blank.y = 4.0
This syntax is similar to the syntax for selecting a variable from a module, such as math.pi or
string.whitespace. In this case, though, we are assigning values to named elements of an object.
These elements are called attributes.
As a noun, “AT-trib-ute” is pronounced with emphasis on the ﬁrst syllable, as opposed to “a-TRIB-
ute,” which is a verb.
The following diagram shows the result of these assignments. A state diagram that shows an object
and its attributes is called an object diagram:
x
y
3.0
4.0
blank
Point
The variable blank refers to a Point object, which contains two attributes. Each attribute refers to a
ﬂoating-point number.
You can read the value of an attribute using the same syntax:
>>> print blank.y
4.0
>>> x = blank.x
>>> print x
3.0
The expression blank.x means, “Go to the object blank refers to and get the value of x.” In this
case, we assign that value to a variable named x. There is no conﬂict between the variable x and the
attribute x.
You can use dot notation as part of any expression. For example:

15.3. Rectangles
149
>>> print '(%g, %g)' % (blank.x, blank.y)
(3.0, 4.0)
>>> distance = math.sqrt(blank.x**2 + blank.y**2)
>>> print distance
5.0
You can pass an instance as an argument in the usual way. For example:
def print_point(p):
print '(%g, %g)' % (p.x, p.y)
print_point takes a point as an argument and displays it in mathematical notation. To invoke it,
you can pass blank as an argument:
>>> print_point(blank)
(3.0, 4.0)
Inside the function, p is an alias for blank, so if the function modiﬁes p, blank changes.
Exercise 15.1 Write a function called distance that it takes two Points as arguments and returns
the distance between them.
15.3
Rectangles
Sometimes it is obvious what the attributes of an object should be, but other times you have to make
decisions. For example, imagine you are designing a class to represent rectangles. What attributes
would you use to specify the location and size of a rectangle? You can ignore angle; to keep things
simple, assume that the rectangle is either vertical or horizontal.
There are at least two possibilities:
• You could specify one corner of the rectangle (or the center), the width, and the height.
• You could specify two opposing corners.
At this point it is hard to say whether either is better than the other, so we’ll implement the ﬁrst one,
just as an example.
Here is the class deﬁnition:
class Rectangle(object):
"""represent a rectangle.
attributes: width, height, corner.
"""
The docstring lists the attributes: width and height are numbers; corner is a Point object that
speciﬁes the lower-left corner.
To represent a rectangle, you have to instantiate a Rectangle object and assign values to the attributes:
box = Rectangle()
box.width = 100.0
box.height = 200.0
box.corner = Point()
box.corner.x = 0.0
box.corner.y = 0.0

150
Chapter 15. Classes and objects
The expression box.corner.x means, “Go to the object box refers to and select the attribute named
corner; then go to that object and select the attribute named x.”
The ﬁgure shows the state of this object:
y
0.0
x
0.0
width
height
100.0
corner
200.0
Point
Rectangle
box
An object that is an attribute of another object is embedded.
15.4
Instances as return values
Functions can return instances. For example, find_center takes a Rectangle as an argument and
returns a Point that contains the coordinates of the center of the Rectangle:
def find_center(box):
p = Point()
p.x = box.corner.x + box.width/2.0
p.y = box.corner.y + box.height/2.0
return p
Here is an example that passes box as an argument and assigns the resulting Point to center:
>>> center = find_center(box)
>>> print_point(center)
(50.0, 100.0)
15.5
Objects are mutable
You can change the state of an object by making an assignment to one of its attributes. For example,
to change the size of a rectangle without changing its position, you can modify the values of width
and height:
box.width = box.width + 50
box.height = box.width + 100
You can also write functions that modify objects. For example, grow_rectangle takes a Rectangle
object and two numbers, dwidth and dheight, and adds the numbers to the width and height of the
rectangle:
def grow_rectangle(rect, dwidth, dheight) :
rect.width += dwidth
rect.height += dheight
Here is an example that demonstrates the effect:

15.6. Copying
151
>>> print box.width
100.0
>>> print box.height
200.0
>>> grow_rectangle(box, 50, 100)
>>> print box.width
150.0
>>> print box.height
300.0
Inside the function, rect is an alias for box, so if the function modiﬁes rect, box changes.
Exercise 15.2 Write a function named move_rectangle that takes a Rectangle and two numbers
named dx and dy. It should change the location of the rectangle by adding dx to the x coordinate of
corner and adding dy to the y coordinate of corner.
15.6
Copying
Aliasing can make a program difﬁcult to read because changes in one place might have unexpected
effects in another place. It is hard to keep track of all the variables that might refer to a given object.
Copying an object is often an alternative to aliasing. The copy module contains a function called
copy that can duplicate any object:
>>> p1 = Point()
>>> p1.x = 3.0
>>> p1.y = 4.0
>>> import copy
>>> p2 = copy.copy(p1)
p1 and p2 contain the same data, but they are not the same Point.
>>> print_point(p1)
(3.0, 4.0)
>>> print_point(p2)
(3.0, 4.0)
>>> p1 is p2
False
>>> p1 == p2
False
The is operator indicates that p1 and p2 are not the same object, which is what we expected. But
you might have expected == to yield True because these points contain the same data. In that case,
you will be disappointed to learn that for instances, the default behavior of the == operator is the
same as the is operator; it checks object identity, not object equivalence. This behavior can be
changed—we’ll see how later.
If you use copy.copy to duplicate a Rectangle, you will ﬁnd that it copies the Rectangle object but
not the embedded Point.

152
Chapter 15. Classes and objects
>>> box2 = copy.copy(box)
>>> box2 is box
False
>>> box2.corner is box.corner
True
Here is what the object diagram looks like:
y
0.0
x
0.0
100.0
200.0
width
height
100.0
corner
200.0
width
height
corner
box
box2
This operation is called a shallow copy because it copies the object and any references it contains,
but not the embedded objects.
For most applications, this is not what you want. In this example, invoking grow_rectangle on one
of the Rectangles would not affect the other, but invoking move_rectangle on either would affect
both! This behavior is confusing and error-prone.
Fortunately, the copy module contains a method named deepcopy that copies not only the object
but also the objects it refers to, and the objects they refer to, and so on. You will not be surprised to
learn that this operation is called a deep copy.
>>> box3 = copy.deepcopy(box)
>>> box3 is box
False
>>> box3.corner is box.corner
False
box3 and box are completely separate objects.
Exercise 15.3 Write a version of move_rectangle that creates and returns a new Rectangle instead
of modifying the old one.
15.7
Debugging
When you start working with objects, you are likely to encounter some new exceptions. If you try
to access an attribute that doesn’t exist, you get an AttributeError:
>>> p = Point()
>>> print p.z
AttributeError: Point instance has no attribute 'z'
If you are not sure what type an object is, you can ask:
>>> type(p)
<type '__main__.Point'>
If you are not sure whether an object has a particular attribute, you can use the built-in function
hasattr:

15.8. Glossary
153
>>> hasattr(p, 'x')
True
>>> hasattr(p, 'z')
False
The ﬁrst argument can be any object; the second argument is a string that contains the name of the
attribute.
15.8
Glossary
class: A user-deﬁned type. A class deﬁnition creates a new class object.
class object: An object that contains information about a user-deﬁned type. The class object can be
used to create instances of the type.
instance: An object that belongs to a class.
attribute: One of the named values associated with an object.
embedded (object): An object that is stored as an attribute of another object.
shallow copy: To copy the contents of an object, including any references to embedded objects;
implemented by the copy function in the copy module.
deep copy: To copy the contents of an object as well as any embedded objects, and any objects
embedded in them, and so on; implemented by the deepcopy function in the copy module.
object diagram: A diagram that shows objects, their attributes, and the values of the attributes.
15.9
Exercises
Exercise 15.4 World.py, which is part of Swampy (see Chapter 4), contains a class deﬁnition for a
user-deﬁned type called World. You can import it like this:
from World import World
This version of the import statement imports the World class from the World module. The follow-
ing code creates a World object and calls the mainloop method, which waits for the user.
world = World()
world.mainloop()
A window should appear with a title bar and an empty square. We will use this window to draw
Points, Rectangles and other shapes. Add the following lines before calling mainloop and run the
program again.
canvas = world.ca(width=500, height=500, background='white')
bbox = [[-150,-100], [150, 100]]
canvas.rectangle(bbox, outline='black', width=2, fill='green4')

154
Chapter 15. Classes and objects
You should see a green rectangle with a black outline. The ﬁrst line creates a Canvas, which appears
in the window as a white square. The Canvas object provides methods like rectangle for drawing
various shapes.
bbox is a list of lists that represents the “bounding box” of the rectangle. The ﬁrst pair of coordinates
is the lower-left corner of the rectangle; the second pair is the upper-right corner.
You can draw a circle like this:
canvas.circle([-25,0], 70, outline=None, fill='red')
The ﬁrst parameter is the coordinate pair for the center of the circle; the second parameter is the
radius.
If you add this line to the program, the result should resemble the national ﬂag of Bangladesh (see
wikipedia.org/wiki/Gallery_of_sovereign-state_flags).
1. Write a function called draw_rectangle that takes a Canvas and a Rectangle as arguments
and draws a representation of the Rectangle on the Canvas.
2. Add an attribute named color to your Rectangle objects and modify draw_rectangle so that
it uses the color attribute as the ﬁll color.
3. Write a function called draw_point that takes a Canvas and a Point as arguments and draws
a representation of the Point on the Canvas.
4. Deﬁne a new class called Circle with appropriate attributes and instantiate a few Circle objects.
Write a function called draw_circle that draws circles on the canvas.
5. Write a program that draws the national ﬂag of of the Czech Republic. Hint: you can draw a
polygon like this:
points = [[-150,-100], [150, 100], [150, -100]]
canvas.polygon(points, fill='blue')
I have written a small program that lists the available colors; you can download it from
thinkpython.com/code/color_list.py.

Chapter 16
Classes and functions
16.1
Time
As another example of a user-deﬁned type, we’ll deﬁne a class called Time that records the time of
day. The class deﬁnition looks like this:
class Time(object):
"""represents the time of day.
attributes: hour, minute, second"""
We can create a new Time object and assign attributes for hours, minutes, and seconds:
time = Time()
time.hour = 11
time.minute = 59
time.second = 30
The state diagram for the Time object looks like this:
59
30
hour
minute
second
11
Time
time
Exercise 16.1 Write a function called print_time that takes a Time object and prints it in the form
hour:minute:second. Hint: the format sequence '%.2d' prints an integer using at least two digits,
including a leading zero if necessary.
Exercise 16.2 Write a boolean function called is_after that takes two Time objects, t1 and t2,
and returns True if t1 follows t2 chronologically and False otherwise. Challenge: don’t use an if
statement.

156
Chapter 16. Classes and functions
16.2
Pure functions
In the next few sections, we’ll write two functions that add time values. They demonstrate two
kinds of functions: pure functions and modiﬁers. They also demonstrate a development plan I’ll
call prototype and patch, which is a way of tackling a complex problem by starting with a simple
prototype and incrementally dealing with the complications.
Here is a simple prototype of add_time:
def add_time(t1, t2):
sum = Time()
sum.hour = t1.hour + t2.hour
sum.minute = t1.minute + t2.minute
sum.second = t1.second + t2.second
return sum
The function creates a new Time object, initializes its attributes, and returns a reference to the new
object. This is called a pure function because it does not modify any of the objects passed to it as
arguments and it has no effect, like displaying a value or getting user input, other than returning a
value.
To test this function, I’ll create two Time objects: start contains the start time of a movie, like
Monty Python and the Holy Grail, and duration contains the run time of the movie, which is one
hour 35 minutes.
add_time ﬁgures out when the movie will be done.
>>> start = Time()
>>> start.hour = 9
>>> start.minute = 45
>>> start.second =
0
>>> duration = Time()
>>> duration.hour = 1
>>> duration.minute = 35
>>> duration.second = 0
>>> done = add_time(start, duration)
>>> print_time(done)
10:80:00
The result, 10:80:00 might not be what you were hoping for. The problem is that this function does
not deal with cases where the number of seconds or minutes adds up to more than sixty. When that
happens, we have to “carry” the extra seconds into the minute column or the extra minutes into the
hour column.
Here’s an improved version:
def add_time(t1, t2):
sum = Time()
sum.hour = t1.hour + t2.hour
sum.minute = t1.minute + t2.minute
sum.second = t1.second + t2.second

16.3. Modiﬁers
157
if sum.second >= 60:
sum.second -= 60
sum.minute += 1
if sum.minute >= 60:
sum.minute -= 60
sum.hour += 1
return sum
Although this function is correct, it is starting to get big. We will see a shorter alternative later.
16.3
Modiﬁers
Sometimes it is useful for a function to modify the objects it gets as parameters. In that case, the
changes are visible to the caller. Functions that work this way are called modiﬁers.
increment, which adds a given number of seconds to a Time object, can be written naturally as a
modiﬁer. Here is a rough draft:
def increment(time, seconds):
time.second += seconds
if time.second >= 60:
time.second -= 60
time.minute += 1
if time.minute >= 60:
time.minute -= 60
time.hour += 1
The ﬁrst line performs the basic operation; the remainder deals with the special cases we saw before.
Is this function correct? What happens if the parameter seconds is much greater than sixty?
In that case, it is not enough to carry once; we have to keep doing it until time.second is less than
sixty. One solution is to replace the if statements with while statements. That would make the
function correct, but not very efﬁcient.
Exercise 16.3 Write a correct version of increment that doesn’t contain any loops.
Anything that can be done with modiﬁers can also be done with pure functions. In fact, some
programming languages only allow pure functions. There is some evidence that programs that use
pure functions are faster to develop and less error-prone than programs that use modiﬁers. But
modiﬁers are convenient at times, and functional programs tend to be less efﬁcient.
In general, I recommend that you write pure functions whenever it is reasonable and resort to modi-
ﬁers only if there is a compelling advantage. This approach might be called a functional program-
ming style.
Exercise 16.4 Write a “pure” version of increment that creates and returns a new Time object
rather than modifying the parameter.

158
Chapter 16. Classes and functions
16.4
Prototyping versus planning
The development plan I am demonstrating is called “prototype and patch.” For each function, I
wrote a prototype that performed the basic calculation and then tested it, patching errors along the
way.
This approach can be effective, especially if you don’t yet have a deep understanding of the problem.
But incremental corrections can generate code that is unnecessarily complicated—since it deals with
many special cases—and unreliable—since it is hard to know if you have found all the errors.
An alternative is planned development, in which high-level insight into the problem can make the
programming much easier. In this case, the insight is that a Time object is really a three-digit number
in base 60 (see wikipedia.org/wiki/Sexagesimal)! The second attribute is the “ones column,”
the minute attribute is the “sixties column,” and the hour attribute is the “thirty-six hundreds col-
umn.”
When we wrote add_time and increment, we were effectively doing addition in base 60, which is
why we had to carry from one column to the next.
This observation suggests another approach to the whole problem—we can convert Time objects to
integers and take advantage of the fact that the computer knows how to do integer arithmetic.
Here is a function that converts Times to integers:
def time_to_int(time):
minutes = time.hour * 60 + time.minute
seconds = minutes * 60 + time.second
return seconds
And here is the function that converts integers to Times (recall that divmod divides the ﬁrst argument
by the second and returns the quotient and remainder as a tuple).
def int_to_time(seconds):
time = Time()
minutes, time.second = divmod(seconds, 60)
time.hour, time.minute = divmod(minutes, 60)
return time
You might have to think a bit, and run some tests, to convince yourself that these functions are
correct. One way to test them is to check that time_to_int(int_to_time(x)) == x for many
values of x. This is an example of a consistency check.
Once you are convinced they are correct, you can use them to rewrite add_time:
def add_time(t1, t2):
seconds = time_to_int(t1) + time_to_int(t2)
return int_to_time(seconds)
This version is shorter than the original, and easier to verify.
Exercise 16.5 Rewrite increment using time_to_int and int_to_time.
In some ways, converting from base 60 to base 10 and back is harder than just dealing with times.
Base conversion is more abstract; our intuition for dealing with time values is better.

16.5. Debugging
159
But if we have the insight to treat times as base 60 numbers and make the investment of writing the
conversion functions (time_to_int and int_to_time), we get a program that is shorter, easier to
read and debug, and more reliable.
It is also easier to add features later. For example, imagine subtracting two Times to ﬁnd the duration
between them. The na¨ıve approach would be to implement subtraction with borrowing. Using the
conversion functions would be easier and more likely to be correct.
Ironically, sometimes making a problem harder (or more general) makes it easier (because there are
fewer special cases and fewer opportunities for error).
16.5
Debugging
A Time object is well-formed if the values of minutes and seconds are between 0 and 60 (including
0 but not 60) and if hours is positive. hours and minutes should be integral values, but we might
allow seconds to have a fraction part.
These kind of requirements are called invariants because they should always be true. To put it a
different way, if they are not true, then something has gone wrong.
Writing code to check your invariants can help you detect errors and ﬁnd their causes. For example,
you might have a function like valid_time that takes a Time object and returns False if it violates
an invariant:
def valid_time(time):
if time.hours < 0 or time.minutes < 0 or time.seconds < 0:
return False
if time.minutes >= 60 or time.seconds >= 60:
return False
return True
Then at the beginning of each function you could check the arguments to make sure they are valid:
def add_time(t1, t2):
if not valid_time(t1) or not valid_time(t2):
raise ValueError, 'invalid Time object in add_time'
seconds = time_to_int(t1) + time_to_int(t2)
return int_to_time(seconds)
Or you could use an assert statement, which checks a given invariant and raises an exception if it
fails:
def add_time(t1, t2):
assert valid_time(t1) and valid_time(t2)
seconds = time_to_int(t1) + time_to_int(t2)
return int_to_time(seconds)
assert statements are useful because they distinguish code that deals with normal conditions from
code that checks for errors.

160
Chapter 16. Classes and functions
16.6
Glossary
prototype and patch: A development plan that involves writing a rough draft of a program, testing,
and correcting errors as they are found.
planned development: A development plan that involves high-level insight into the problem and
more planning than incremental development or prototype development.
pure function: A function that does not modify any of the objects it receives as arguments. Most
pure functions are fruitful.
modiﬁer: A function that changes one or more of the objects it receives as arguments. Most modi-
ﬁers are fruitless.
functional programming style: A style of program design in which the majority of functions are
pure.
invariant: A condition that should always be true during the execution of a program.
16.7
Exercises
Exercise 16.6 Write a function called mul_time that takes a Time object and a number and returns
a new Time object that contains the product of the original Time and the number.
Then use mul_time to write a function that takes a Time object that represents the ﬁnishing time
in a race, and a number that represents the distance, and returns a Time object that represents the
average pace (time per mile).
Exercise 16.7 Write a class deﬁnition for a Date object that has attributes day, month and year.
Write a function called increment_date that takes a Date object, date and an integer, n, and returns
a new Date object that represents the day n days after date. Hint: “Thirty days hath September...”
Challenge: does your function deal with leap years correctly? See wikipedia.org/wiki/Leap_
year
Exercise 16.8 The datetime module provides date and time objects that are similar to the Date
and Time objects in this chapter, but they provide a rich set of methods and operators. Read the
documentation at docs.python.org/lib/datetime-date.html.
1. Use the datetime module to write a program that gets the current date and prints the day of
the week.
2. Write a program that takes a birthday as input and prints the user’s age and the number of
days, hours, minutes and seconds until their next birthday.

Chapter 17
Classes and methods
17.1
Object-oriented features
Python is an object-oriented programming language, which means that it provides features that
support object-oriented programming.
It is not easy to deﬁne object-oriented programming, but we have already seen some of its charac-
teristics:
• Programs are made up of object deﬁnitions and function deﬁnitions, and most of the compu-
tation is expressed in terms of operations on objects.
• Each object deﬁnition corresponds to some object or concept in the real world, and the func-
tions that operate on that object correspond to the ways real-world objects interact.
For example, the Time class deﬁned in Chapter 16 corresponds to the way people record the time
of day, and the functions we deﬁned correspond to the kinds of things people do with times. Sim-
ilarly, the Point and Rectangle classes correspond to the mathematical concepts of a point and a
rectangle.
So far, we have not taken advantage of the features Python provides to support object-oriented
programming. These features are not strictly necessary; most of them provide alternative syntax for
things we have already done. But in many cases, the alternative is more concise and more accurately
conveys the structure of the program.
For example, in the Time program, there is no obvious connection between the class deﬁnition and
the function deﬁnitions that follow. With some examination, it is apparent that every function takes
at least one Time object as an argument.
This observation is the motivation for methods; a method is a function that is associated with a
particular class. We have seen methods for strings, lists, dictionaries and tuples. In this chapter, we
will deﬁne methods for user-deﬁned types.
Methods are semantically the same as functions, but there are two syntactic differences:
• Methods are deﬁned inside a class deﬁnition in order to make the relationship between the
class and the method explicit.

162
Chapter 17. Classes and methods
• The syntax for invoking a method is different from the syntax for calling a function.
In the next few sections, we will take the functions from the previous two chapters and transform
them into methods. This transformation is purely mechanical; you can do it simply by following a
sequence of steps. If you are comfortable converting from one form to another, you will be able to
choose the best form for whatever you are doing.
17.2
Printing objects
In Chapter 16, we deﬁned a class named Time and in Exercise 16.1, you wrote a function named
print_time:
class Time(object):
"""represents the time of day.
attributes: hour, minute, second"""
def print_time(time):
print '%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second)
To call this function, you have to pass a Time object as an argument:
>>> start = Time()
>>> start.hour = 9
>>> start.minute = 45
>>> start.second = 00
>>> print_time(start)
09:45:00
To make print_time a method, all we have to do is move the function deﬁnition inside the class
deﬁnition. Notice the change in indentation.
class Time(object):
def print_time(time):
print '%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second)
Now there are two ways to call print_time. The ﬁrst (and less common) way is to use function
syntax:
>>> Time.print_time(start)
09:45:00
In this use of dot notation, Time is the name of the class, and print_time is the name of the method.
start is passed as a parameter.
The second (and more concise) way is to use method syntax:
>>> start.print_time()
09:45:00
In this use of dot notation, print_time is the name of the method (again), and start is the object
the method is invoked on, which is called the subject. Just as the subject of a sentence is what the
sentence is about, the subject of a method invocation is what the method is about.

17.3. Another example
163
Inside the method, the subject is assigned to the ﬁrst parameter, so in this case start is assigned to
time.
By convention, the ﬁrst parameter of a method is called self, so it would be more common to write
print_time like this:
class Time(object):
def print_time(self):
print '%.2d:%.2d:%.2d' % (self.hour, self.minute, self.second)
The reason for this convention is an implicit metaphor:
• The syntax for a function call, print_time(start), suggests that the function is the active
agent. It says something like, “Hey print_time! Here’s an object for you to print.”
• In object-oriented programming, the objects are the active agents. A method invocation like
start.print_time() says “Hey start! Please print yourself.”
This change in perspective might be more polite, but it is not obvious that it is useful. In the examples
we have seen so far, it may not be. But sometimes shifting responsibility from the functions onto
the objects makes it possible to write more versatile functions, and makes it easier to maintain and
reuse code.
Exercise 17.1 Rewrite time_to_int (from Section 16.4) as a method. It is probably not appropriate
to rewrite int_to_time as a method; it’s not clear what object you would invoke it on!
17.3
Another example
Here’s a version of increment (from Section 16.3) rewritten as a method:
# inside class Time:
def increment(self, seconds):
seconds += self.time_to_int()
return int_to_time(seconds)
This version assumes that time_to_int is written as a method, as in Exercise 17.1. Also, note that
it is a pure function, not a modiﬁer.
Here’s how you would invoke increment:
>>> start.print_time()
09:45:00
>>> end = start.increment(1337)
>>> end.print_time()
10:07:17
The subject, start, gets assigned to the ﬁrst parameter, self. The argument, 1337, gets assigned
to the second parameter, seconds.
This mechanism can be confusing, especially if you make an error. For example, if you invoke
increment with two arguments, you get:

164
Chapter 17. Classes and methods
>>> end = start.increment(1337, 460)
TypeError: increment() takes exactly 2 arguments (3 given)
The error message is initially confusing, because there are only two arguments in parentheses. But
the subject is also considered an argument, so all together that’s three.
17.4
A more complicated example
is_after (from Exercise 16.2) is slightly more complicated because it takes two Time objects as
parameters. In this case it is conventional to name the ﬁrst parameter self and the second parameter
other:
# inside class Time:
def is_after(self, other):
return self.time_to_int() > other.time_to_int()
To use this method, you have to invoke it on one object and pass the other as an argument:
>>> end.is_after(start)
True
One nice thing about this syntax is that it almost reads like English: “end is after start?”
17.5
The init method
The init method (short for “initialization”) is a special method that gets invoked when an object is
instantiated. Its full name is __init__ (two underscore characters, followed by init, and then two
more underscores). An init method for the Time class might look like this:
# inside class Time:
def __init__(self, hour=0, minute=0, second=0):
self.hour = hour
self.minute = minute
self.second = second
It is common for the parameters of __init__ to have the same names as the attributes. The statement
self.hour = hour
stores the value of the parameter hour as an attribute of self.
The parameters are optional, so if you call Time with no arguments, you get the default values.
>>> time = Time()
>>> time.print_time()
00:00:00
If you provide one argument, it overrides hour:

17.6. The
str
method
165
>>> time = Time (9)
>>> time.print_time()
09:00:00
If you provide two arguments, they override hour and minute.
>>> time = Time(9, 45)
>>> time.print_time()
09:45:00
And if you provide three arguments, they override all three default values.
Exercise 17.2 Write an init method for the Point class that takes x and y as optional parameters
and assigns them to the corresponding attributes.
17.6
The
str
method
__str__ is a special method, like __init__, that is supposed to return a string representation of an
object.
For example, here is a str method for Time objects:
# inside class Time:
def __str__(self):
return '%.2d:%.2d:%.2d' % (self.hour, self.minute, self.second)
When you print an object, Python invokes the str method:
>>> time = Time(9, 45)
>>> print time
09:45:00
When I write a new class, I almost always start by writing __init__, which makes it easier to
instantiate objects, and __str__, which is useful for debugging.
Exercise 17.3 Write a str method for the Point class. Create a Point object and print it.
17.7
Operator overloading
By deﬁning other special methods, you can specify the behavior of operators on user-deﬁned types.
For example, if you deﬁne a method named __add__ for the Time class, you can use the + operator
on Time objects.
Here is what the deﬁnition might look like:
# inside class Time:
def __add__(self, other):
seconds = self.time_to_int() + other.time_to_int()
return int_to_time(seconds)

166
Chapter 17. Classes and methods
And here is how you could use it:
>>> start = Time(9, 45)
>>> duration = Time(1, 35)
>>> print start + duration
11:20:00
When you apply the + operator to Time objects, Python invokes __add__. When you print the result,
Python invokes __str__. So there is quite a lot happening behind the scenes!
Changing the behavior of an operator so that it works with user-deﬁned types is called operator
overloading. For every operator in Python there is a corresponding special method, like __add__.
For more details, see docs.python.org/ref/specialnames.html.
Exercise 17.4 Write an add method for the Point class.
17.8
Type-based dispatch
In the previous section we added two Time objects, but you also might want to add an integer to a
Time object. The following is a version of __add__ that checks the type of other and invokes either
add_time or increment:
# inside class Time:
def __add__(self, other):
if isinstance(other, Time):
return self.add_time(other)
else:
return self.increment(other)
def add_time(self, other):
seconds = self.time_to_int() + other.time_to_int()
return int_to_time(seconds)
def increment(self, seconds):
seconds += self.time_to_int()
return int_to_time(seconds)
The built-in function isinstance takes a value and a class object, and returns True if the value is
an instance of the class.
If other is a Time object, __add__ invokes add_time. Otherwise it assumes that the parameter
is a number and invokes increment. This operation is called a type-based dispatch because it
dispatches the computation to different methods based on the type of the arguments.
Here are examples that use the + operator with different types:
>>> start = Time(9, 45)
>>> duration = Time(1, 35)
>>> print start + duration
11:20:00
>>> print start + 1337
10:07:17

17.9. Polymorphism
167
Unfortunately, this implementation of addition is not commutative. If the integer is the ﬁrst operand,
you get
>>> print 1337 + start
TypeError: unsupported operand type(s) for +: 'int' and 'instance'
The problem is, instead of asking the Time object to add an integer, Python is asking an integer to
add a Time object, and it doesn’t know how to do that. But there is a clever solution for this problem:
the special method __radd__, which stands for “right-side add.” This method is invoked when a
Time object appears on the right side of the + operator. Here’s the deﬁnition:
# inside class Time:
def __radd__(self, other):
return self.__add__(other)
And here’s how it’s used:
>>> print 1337 + start
10:07:17
Exercise 17.5 Write an add method for Points that works with either a Point object or a tuple:
• If the second operand is a Point, the method should return a new Point whose x coordinate is
the sum of the x coordinates of the operands, and likewise for the y coordinates.
• If the second operand is a tuple, the method should add the ﬁrst element of the tuple to the x
coordinate and the second element to the y coordinate, and return a new Point with the result.
17.9
Polymorphism
Type-based dispatch is useful when it is necessary, but (fortunately) it is not always necessary. Often
you can avoid it by writing functions that work correctly for arguments with different types.
Many of the functions we wrote for strings will actually work for any kind of sequence. For example,
in Section 11.1 we used histogram to count the number of times each letter appears in a word.
def histogram(s):
d = dict()
for c in s:
if c not in d:
d[c] = 1
else:
d[c] = d[c]+1
return d
This function also works for lists, tuples, and even dictionaries, as long as the elements of s are
hashable, so they can be used as keys in d.
>>> t = ['spam', 'egg', 'spam', 'spam', 'bacon', 'spam']
>>> histogram(t)
{'bacon': 1, 'egg': 1, 'spam': 4}

168
Chapter 17. Classes and methods
Functions that can work with several types are called polymorphic. Polymorphism can facilitate
code reuse. For example, the built-in function sum, which adds the elements of a sequence, works
as long as the elements of the sequence support addition.
Since Time objects provide an add method, they work with sum:
>>> t1 = Time(7, 43)
>>> t2 = Time(7, 41)
>>> t3 = Time(7, 37)
>>> total = sum([t1, t2, t3])
>>> print total
23:01:00
In general, if all of the operations inside a function work with a given type, then the function works
with that type.
The best kind of polymorphism is the unintentional kind, where you discover that a function you
already wrote can be applied to a type you never planned for.
17.10
Debugging
It is legal to add attributes to objects at any point in the execution of a program, but if you are
a stickler for type theory, it is a dubious practice to have objects of the same type with different
attribute sets. It is usually a good idea to initialize all of an objects attributes in the init method.
If you are not sure whether an object has a particular attribute, you can use the built-in function
hasattr (see Section 15.7).
Another way to access the attributes of an object is through the special attribute __dict__, which is
a dictionary that maps attribute names (as strings) and values:
>>> p = Point(3, 4)
>>> print p.__dict__
{'y': 4, 'x': 3}
For purposes of debugging, you might ﬁnd it useful to keep this function handy:
def print_attributes(obj):
for attr in obj.__dict__:
print attr, getattr(obj, attr)
print_attributes traverses the items in the object’s dictionary and prints each attribute name and
its corresponding value.
The built-in function getattr takes an object and an attribute name (as a string) and returns the
attribute’s value.
17.11
Glossary
object-oriented language: A language that provides features, such as user-deﬁned classes and
method syntax, that facilitate object-oriented programming.

17.12. Exercises
169
object-oriented programming: A style of programming in which data and the operations that ma-
nipulate it are organized into classes and methods.
method: A function that is deﬁned inside a class deﬁnition and is invoked on instances of that class.
subject: The object a method is invoked on.
operator overloading: Changing the behavior of an operator like + so it works with a user-deﬁned
type.
type-based dispatch: A programming pattern that checks the type of an operand and invokes dif-
ferent functions for different types.
polymorphic: Pertaining to a function that can work with more than one type.
17.12
Exercises
Exercise 17.6 This exercise is a cautionary tale about one of the most common, and difﬁcult to ﬁnd,
errors in Python.
1. Write a deﬁnition for a class named Kangaroo with the following methods:
(a) An __init__ method that initializes an attribute named pouch_contents to an empty
list.
(b) A method named put_in_pouch that takes an object of any type and adds it to
pouch_contents.
(c) A __str__ method that returns a string representation of the Kangaroo object and the
contents of the pouch.
Test your code by creating two Kangaroo objects, assigning them to variables named kanga
and roo, and then adding roo to the contents of kanga’s pouch.
2. Download thinkpython.com/code/BadKangaroo.py. It contains a solution to the previous
problem with one big, nasty bug. Find and ﬁx the bug.
If you get stuck, you can download thinkpython.com/code/GoodKangaroo.py, which ex-
plains the problem and demonstrates a solution.
Exercise 17.7 Visual is a Python module that provides 3-D graphics. It is not always included in a
Python installation, so you might have to install it from your software repository or, if it’s not there,
from vpython.org.
The following example creates a 3-D space that is 256 units wide, long and high, and sets the
“center” to be the point (128,128,128). Then it draws a blue sphere.
from visual import *
scene.range = (256, 256, 256)
scene.center = (128, 128, 128)
color = (0.1, 0.1, 0.9)
# mostly blue
sphere(pos=scene.center, radius=128, color=color)

170
Chapter 17. Classes and methods
color is an RGB tuple; that is, the elements are Red-Green-Blue levels between 0.0 and 1.0 (see
wikipedia.org/wiki/RGB_color_model).
If you run this code, you should see a window with a black background and a blue sphere. If you
drag the middle button up and down, you can zoom in and out. You can also rotate the scene by
dragging the right button, but with only one sphere in the world, it is hard to tell the difference.
The following loop creates a cube of spheres:
t = range(0, 256, 51)
for x in t:
for y in t:
for z in t:
pos = x, y, z
sphere(pos=pos, radius=10, color=color)
1. Put this code in a script and make sure it works for you.
2. Modify the program so that each sphere in the cube has the color that corresponds to its
position in RGB space. Notice that the coordinates are in the range 0–255, but the RGB tuples
are in the range 0.0–1.0.
3. Download thinkpython.com/code/color_list.py and use the function read_colors to
generate a list of the available colors on your system, their names and RGB values. For each
named color draw a sphere in the position that corresponds to its RGB values.
You can see my solution at thinkpython.com/code/color_space.py.

Chapter 18
Inheritance
In this chapter we will develop classes to represent playing cards, decks of cards, and poker hands.
If you don’t play poker, you can read about it at wikipedia.org/wiki/Poker, but you don’t have
to; I’ll tell you what you need to know for the exercises.
If you are not familiar with Anglo-American playing cards, you can read about them at wikipedia.
org/wiki/Playing_cards.
18.1
Card objects
There are ﬁfty-two cards in a deck, each of which belongs to one of four suits and one of thirteen
ranks. The suits are Spades, Hearts, Diamonds, and Clubs (in descending order in bridge). The
ranks are Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, and King. Depending on the game that you are
playing, an Ace may be higher than King or lower than 2.
If we want to deﬁne a new object to represent a playing card, it is obvious what the attributes should
be: rank and suit. It is not as obvious what type the attributes should be. One possibility is to
use strings containing words like 'Spade' for suits and 'Queen' for ranks. One problem with this
implementation is that it would not be easy to compare cards to see which had a higher rank or suit.
An alternative is to use integers to encode the ranks and suits. In this context, “encode” means that
we are going to deﬁne a mapping between numbers and suits, or between numbers and ranks. This
kind of encoding is not meant to be a secret (that would be “encryption”).
For example, this table shows the suits and the corresponding integer codes:
Spades
7→
3
Hearts
7→
2
Diamonds
7→
1
Clubs
7→
0
This code makes it easy to compare cards; because higher suits map to higher numbers, we can
compare suits by comparing their codes.
The mapping for ranks is fairly obvious; each of the numerical ranks maps to the corresponding
integer, and for face cards:

172
Chapter 18. Inheritance
Jack
7→
11
Queen
7→
12
King
7→
13
I am using the 7→symbol to make is clear that these mappings are not part of the Python program.
They are part of the program design, but they don’t appear explicitly in the code.
The class deﬁnition for Card looks like this:
class Card(object):
"""represents a standard playing card."""
def __init__(self, suit=0, rank=2):
self.suit = suit
self.rank = rank
As usual, the init method takes an optional parameter for each attribute. The default card is the 2 of
Clubs.
To create a Card, you call Card with the suit and rank of the card you want.
queen_of_diamonds = Card(1, 12)
18.2
Class attributes
In order to print Card objects in a way that people can easily read, we need a mapping from the
integer codes to the corresponding ranks and suits. A natural way to do that is with lists of strings.
We assign these lists to class attributes:
# inside class Card:
suit_names = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
rank_names = [None, 'Ace', '2', '3', '4', '5', '6', '7',
'8', '9', '10', 'Jack', 'Queen', 'King']
def __str__(self):
return '%s of %s' % (Card.rank_names[self.rank],
Card.suit_names[self.suit])
Variables like suit_names and rank_names, which are deﬁned inside a class but outside of any
method, are called class attributes because they are associated with the class object Card.
This term distinguished them from variables like suit and rank, which are called instance at-
tributes because they are associated with a particular instance.
Both kinds of attribute are accessed using dot notation. For example, in __str__, self is a Card
object, and self.rank is its rank. Similarly, Card is a class object, and Card.rank_names is a list
of strings associated with the class.
Every card has its own suit and rank, but there is only one copy of suit_names and rank_names.
Putting it all together, the expression Card.rank_names[self.rank] means “use the attribute rank
from the object self as an index into the list rank_names from the class Card, and select the
appropriate string.”

18.3. Comparing cards
173
The ﬁrst element of rank_names is None because there is no card with rank zero. By including None
as a place-keeper, we get a mapping with the nice property that the index 2 maps to the string '2',
and so on. To avoid this tweak, we could have used a dictionary instead of a list.
With the methods we have so far, we can create and print cards:
>>> card1 = Card(2, 11)
>>> print card1
Jack of Hearts
Here is a diagram that shows the Card class object and one Card instance:
list
suit_names
list
rank_names
Card
type
1
11
suit
rank
card1
Card
Card is a class object, so it has type type. card1 has type Card. (To save space, I didn’t draw the
contents of suit_names and rank_names).
18.3
Comparing cards
For built-in types, there are conditional operators (<, >, ==, etc.) that compare values and determine
when one is greater than, less than, or equal to another. For user-deﬁned types, we can override the
behavior of the built-in operators by providing a method named __cmp__.
__cmp__ takes two parameters, self and other, and returns a positive number if the ﬁrst object is
greater, a negative number if the second object is greater, and 0 if they are equal to each other.
The correct ordering for cards is not obvious. For example, which is better, the 3 of Clubs or the 2
of Diamonds? One has a higher rank, but the other has a higher suit. In order to compare cards, you
have to decide whether rank or suit is more important.
The answer might depend on what game you are playing, but to keep things simple, we’ll make the
arbitrary choice that suit is more important, so all of the Spades outrank all of the Diamonds, and so
on.
With that decided, we can write __cmp__:
# inside class Card:
def __cmp__(self, other):
# check the suits
if self.suit > other.suit: return 1

174
Chapter 18. Inheritance
if self.suit < other.suit: return -1
# suits are the same... check ranks
if self.rank > other.rank: return 1
if self.rank < other.rank: return -1
# ranks are the same... it's a tie
return 0
You can write this more concisely using tuple comparison:
# inside class Card:
def __cmp__(self, other):
t1 = self.suit, self.rank
t2 = other.suit, other.rank
return cmp(t1, t2)
The built-in function cmp has the same interface as the method __cmp__: it takes two values and
returns a positive number if the ﬁrst is larger, a negative number of the second is larger, and 0 if they
are equal.
Exercise 18.1 Write a __cmp__ method for Time objects. Hint: you can use tuple comparison, but
you also might consider using integer subtraction.
18.4
Decks
Now that we have Cards, the next step is to deﬁne Decks. Since a deck is made up of cards, it is
natural for each Deck to contain a list of cards as an attribute.
The following is a class deﬁnition for Deck. The init method creates the attribute cards and gener-
ates the standard set of ﬁfty-two cards:
class Deck(object):
def __init__(self):
self.cards = []
for suit in range(4):
for rank in range(1, 14):
card = Card(suit, rank)
self.cards.append(card)
The easiest way to populate the deck is with a nested loop. The outer loop enumerates the suits from
0 to 3. The inner loop enumerates the ranks from 1 to 13. Each iteration creates a new Card with the
current suit and rank, and appends it to self.cards.
18.5
Printing the deck
Here is a __str__ method for Deck:

18.6. Add, remove, shufﬂe and sort
175
#inside class Deck:
def __str__(self):
res = []
for card in self.cards:
res.append(str(card))
return '\n'.join(res)
This method demonstrates an efﬁcient way to accumulate a large string: building a list of strings and
then using join. The built-in function str invokes the __str__ method on each card and returns
the string representation.
Since we invoke join on a newline character, the cards are separated by newlines. Here’s what the
result looks like:
>>> deck = Deck()
>>> print deck
Ace of Clubs
2 of Clubs
3 of Clubs
...
10 of Spades
Jack of Spades
Queen of Spades
King of Spades
Even though the result appears on 52 lines, it is one long string that contains newlines.
18.6
Add, remove, shufﬂe and sort
To deal cards, we would like a method that removes a card from the deck and returns it. The list
method pop provides a convenient way to do that:
#inside class Deck:
def pop_card(self):
return self.cards.pop()
Since pop removes the last card in the list, we are dealing from the bottom of the deck. In real life
bottom dealing is frowned upon1, but in this context it’s ok.
To add a card, we can use the list method append:
#inside class Deck:
def add_card(self, card):
self.cards.append(card)
A method like this that uses another function without doing much real work is sometimes called a
veneer. The metaphor comes from woodworking, where it is common to glue a thin layer of good
quality wood to the surface of a cheaper piece of wood.
1See wikipedia.org/wiki/Bottom_dealing.

176
Chapter 18. Inheritance
In this case we are deﬁning a “thin” method that expresses a list operation in terms that are appro-
priate for decks.
As another example, we can write a Deck method named shuffle using the function shuffle from
the random module:
# inside class Deck:
def shuffle(self):
random.shuffle(self.cards)
Don’t forget to import random.
Exercise 18.2 Write a Deck method named sort that uses the list method sort to sort the cards in
a Deck. sort uses the __cmp__ method we deﬁned to determine sort order.
18.7
Inheritance
The language feature most often associated with object-oriented programming is inheritance. In-
heritance is the ability to deﬁne a new class that is a modiﬁed version of an existing class.
It is called “inheritance” because the new class inherits the methods of the existing class. Extending
this metaphor, the existing class is called the parent and the new class is called the child.
As an example, let’s say we want a class to represent a “hand,” that is, the set of cards held by one
player. A hand is similar to a deck: both are made up of a set of cards, and both require operations
like adding and removing cards.
A hand is also different from a deck; there are operations we want for hands that don’t make sense
for a deck. For example, in poker we might compare two hands to see which one wins. In bridge,
we might compute a score for a hand in order to make a bid.
This relationship between classes—similar, but different—lends itself to inheritance.
The deﬁnition of a child class is like other class deﬁnitions, but the name of the parent class appears
in parentheses:
class Hand(Deck):
"""represents a hand of playing cards"""
This deﬁnition indicates that Hand inherits from Deck; that means we can use methods like pop_card
and add_card for Hands as well as Decks.
Hand also inherits __init__ from Deck, but it doesn’t really do what we want: instead of populating
the hand with 52 new cards, the init method for Hands should initialize cards with an empty list.
If we provide an init method in the Hand class, it overrides the one in the Deck class:
# inside class Hand:
def __init__(self, label=''):
self.cards = []
self.label = label

18.8. Class diagrams
177
So when you create a Hand, Python invokes this init method:
>>> hand = Hand('new hand')
>>> print hand.cards
[]
>>> print hand.label
new hand
But the other methods are inherited from Deck, so we can use pop_card and add_card to deal a
card:
>>> deck = Deck()
>>> card = deck.pop_card()
>>> hand.add_card(card)
>>> print hand
King of Spades
A natural next step is to encapsulate this code in a method called move_cards:
#inside class Deck:
def move_cards(self, hand, num):
for i in range(num):
hand.add_card(self.pop_card())
move_cards takes two arguments, a Hand object and the number of cards to deal. It modiﬁes both
self and hand, and returns None.
In some games, cards are moved from one hand to another, or from a hand back to the deck. You
can use move_cards for any of these operations: self can be either a Deck or a Hand, and hand,
despite the name, can also be a Deck.
Exercise 18.3 Write a Deck method called deal_hands that takes two parameters, the number of
hands and the number of cards per hand, and that creates new Hand objects, deals the appropriate
number of cards per hand, and returns a list of Hand objects.
Inheritance is a useful feature. Some programs that would be repetitive without inheritance can be
written more elegantly with it. Inheritance can facilitate code reuse, since you can customize the
behavior of parent classes without having to modify them. In some cases, the inheritance structure
reﬂects the natural structure of the problem, which makes the program easier to understand.
On the other hand, inheritance can make programs difﬁcult to read. When a method is invoked, it is
sometimes not clear where to ﬁnd its deﬁnition. The relevant code may be scattered among several
modules. Also, many of the things that can be done using inheritance can be done as well or better
without it.
18.8
Class diagrams
So far we have seen stack diagrams, which show the state of a program, and object diagrams, which
show the attributes of an object and their values. These diagrams represent a snapshot in the execu-
tion of a program, so they change as the program runs.

178
Chapter 18. Inheritance
They are also highly detailed; for some purposes, too detailed. A class diagrams is a more abstract
representation of the structure of a program. Instead of showing individual objects, it shows classes
and the relationships between them.
There are several kinds of relationship between classes:
• Objects in one class might contain references to objects in another class. For example, each
Rectangle contains a reference to a Point, and each Deck contains references to many Cards.
This kind of relationship is called HAS-A, as in, “a Rectangle has a Point.”
• One class might inherit from another. This relationship is called IS-A, as in, “a Hand is a kind
of a Deck.”
• One class might depend on another in the sense that changes in one class would require
changes in the other.
A class diagram is a graphical representation of these relationships2. For example, this diagram
shows the relationships between Card, Deck and Hand.
Hand
Deck
*
Card
The arrow with a hollow triangle head represents an IS-A relationship; in this case it indicates that
Hand inherits from Deck.
The standard arrow head represents a HAS-A relationship; in this case a Deck has references to Card
objects.
The star (*) near the arrow head is a multiplicity; it indicates how many Cards a Deck has. A
multiplicity can be a simple number, like 52, a range, like 5..7 or a star, which indicates that a
Deck can have any number of Cards.
A more detailed diagram might show that a Deck actually contains a list of Cards, but built-in types
like list and dict are usually not included in class diagrams.
Exercise 18.4 Read TurtleWorld.py, World.py and Gui.py and draw a class diagram that shows
the relationships among the classes deﬁned there.
18.9
Debugging
Inheritance can make debugging a challenge because when you invoke a method on an object, you
might not know which method will be invoked.
Suppose you are writing a function that works with Hand objects. You would like it to work with
all kinds of Hands, like PokerHands, BridgeHands, etc. If you invoke a method like shuffle, you
2The diagrams I am using here are similar to UML (see wikipedia.org/wiki/Unified_Modeling_Language), with a
few simpliﬁcations.

18.10. Glossary
179
might get the one deﬁned in Deck, but if any of the subclasses override this method, you’ll get that
version instead.
Any time you are unsure about the ﬂow of execution through your program, the simplest solution is
to add print statements at the beginning of the relevant methods. If Deck.shuffle prints a message
that says something like Running Deck.shuffle, then as the program runs it traces the ﬂow of
execution.
As an alternative, you could use this function, which takes an object and a method name (as a string)
and returns the class that provides the deﬁnition of the method:
def find_defining_class(obj, meth_name):
for ty in type(obj).mro():
if meth_name in ty.__dict__:
return ty
Here’s an example:
>>> hand = Hand()
>>> print find_defining_class(hand, 'shuffle')
<class 'Card.Deck'>
So the shuffle method for this Hand is the one in Deck.
find_defining_class uses the mro method to get the list of class objects (types) that will be
searched for methods. “MRO” stands for “method resolution order.”
Here’s a program design suggestion: whenever you override a method, the interface of the new
method should be the same as the old. It should take the same parameters, return the same type,
and obey the same preconditions and postconditions. If you obey this rule, you will ﬁnd that any
function designed to work with an instance of a superclass, like a Deck, will also work with instances
of subclasses like a Hand or PokerHand.
If you violate this rule, your code will collapse like (sorry) a house of cards.
18.10
Glossary
encode: To represent one set of values using another set of values by constructing a mapping be-
tween them.
class attribute: An attribute associated with a class object. Class attributes are deﬁned inside a
class deﬁnition but outside any method.
instance attribute: An attribute associated with an instance of a class.
veneer: A method or function that provides a different interface to another function without doing
much computation.
inheritance: The ability to deﬁne a new class that is a modiﬁed version of a previously deﬁned
class.
parent class: The class from which a child class inherits.
child class: A new class created by inheriting from an existing class; also called a “subclass.”

180
Chapter 18. Inheritance
IS-A relationship: The relationship between a child class and its parent class.
HAS-A relationship: The relationship between two classes where instances of one class contain
references to instances of the other.
class diagram: A diagram that shows the classes in a program and the relationships between them.
multiplicity: A notation in a class diagram that shows, for a HAS-A relationship, how many refer-
ences there are to instances of another class.
18.11
Exercises
Exercise 18.5 The following are the possible hands in poker, in increasing order of value (and
decreasing order of probability):
pair: two cards with the same rank
two pair: two pairs of cards with the same rank
three of a kind: three cards with the same rank
straight: ﬁve cards with ranks in sequence (aces can be high or low, so Ace-2-3-4-5 is a straight
and so is 10-Jack-Queen-King-Ace, but Queen-King-Ace-2-3 is not.)
ﬂush: ﬁve cards with the same suit
full house: three cards with one rank, two cards with another
four of a kind: four cards with the same rank
straight ﬂush: ﬁve cards in sequence (as deﬁned above) and with the same suit
The goal of these exercises is to estimate the probability of drawing these various hands.
1. Download the following ﬁles from thinkpython.com/code:
Card.py : A complete version of the Card, Deck and Hand classes in this chapter.
PokerHand.py : An incomplete implementation of a class that represents a poker hand, and
some code that tests it.
2. If you run PokerHand.py, it deals six 7-card poker hands and checks to see if any of them
contains a ﬂush. Read this code carefully before you go on.
3. Add methods to PokerHand.py named has_pair, has_twopair, etc. that return True or
False according to whether or not the hand meets the relevant criteria. Your code should work
correctly for “hands” that contain any number of cards (although 5 and 7 are the most common
sizes).
4. Write a method named classify that ﬁgures out the highest-value classiﬁcation for a hand
and sets the label attribute accordingly. For example, a 7-card hand might contain a ﬂush
and a pair; it should be labeled “ﬂush”.
5. When you are convinced that your classiﬁcation methods are working, the next step is to
estimate the probabilities of the various hands. Write a function in PokerHand.py that shufﬂes
a deck of cards, divides it into hands, classiﬁes the hands, and counts the number of times
various classiﬁcations appear.

18.11. Exercises
181
6. Print a table of the classiﬁcations and their probabilities. Run your program with larger and
larger numbers of hands until the output values converge to a reasonable degree of accuracy.
Compare your results to the values at wikipedia.org/wiki/Hand_rankings.
Exercise 18.6 This exercise uses TurtleWorld from Chapter 4. You will write code that makes
Turtles play tag. If you are not familiar with the rules of tag, see wikipedia.org/wiki/Tag_
(game).
1. Download thinkpython.com/code/Wobbler.py and run it. You should see a TurtleWorld
with three Turtles. If you press the Run button, the Turtles wander at random.
2. Read the code and make sure you understand how it works. The Wobbler class inherits from
Turtle, which means that the Turtle methods lt, rt, fd and bk work on Wobblers.
The step method gets invoked by TurtleWorld. It invokes steer, which turns the Turtle
in the desired direction, wobble, which makes a random turn in proportion to the Turtle’s
clumsiness, and move, which moves forward a few pixels, depending on the Turtle’s speed.
3. Create a ﬁle named Tagger.py. Import everything from Wobbler, then deﬁne a class named
Tagger that inherits from Wobbler. Call make_world passing the Tagger class object as an
argument.
4. Add a steer method to Tagger to override the one in Wobbler. As a starting place, write
a version that always points the Turtle toward the origin. Hint: use the math function atan2
and the Turtle attributes x, y and heading.
5. Modify steer so that the Turtles stay in bounds. For debugging, you might want to use the
Step button, which invokes step once on each Turtle.
6. Modify steer so that each Turtle points toward its nearest neighbor. Hint: Turtles have an
attribute, world, that is a reference to the TurtleWorld they live in, and the TurtleWorld has an
attribute, animals, that is a list of all Turtles in the world.
7. Modify steer so the Turtles play tag. You can add methods to Tagger and you can override
steer and __init__, but you may not modify or override step, wobble or move. Also,
steer is allowed to change the heading of the Turtle but not the position.
Adjust the rules and your steer method for good quality play; for example, it should be
possible for the slow Turtle to tag the faster Turtles eventually.
You can get my solution from thinkpython.com/code/Tagger.py.

182
Chapter 18. Inheritance

Chapter 19
Case study: Tkinter
19.1
GUI
Most of the programs we have seen so far are text-based, but many programs use graphical user
interfaces, also known as GUIs.
Python provides several choices for writing GUI-based programs, including wxPython, Tkinter, and
Qt. Each has pros and cons, which is why Python has not converged on a standard.
The one I will present in this chapter is Tkinter because I think it is the easiest to get started with.
Most of the concepts in this chapter apply to the other GUI modules, too.
There are several books and web pages about Tkinter. One of the best online resources is An Intro-
duction to Tkinter by Fredrik Lundh.
I have written a module called Gui.py that comes with Swampy. It provides a simpliﬁed interface
to the functions and classes in Tkinter. The examples in this chapter are based on this module.
Here is a simple example that creates and displays a Gui:
To create a GUI, you have to import Gui and instantiate a Gui object:
from Gui import *
g = Gui()
g.title('Gui')
g.mainloop()
When you run this code, a window should appear with an empty gray square and the title Gui.
mainloop runs the event loop, which waits for the user to do something and responds accordingly.
It is an inﬁnite loop; it runs until the user closes the window, or presses Control-C, or does something
that causes the program to quit.
This Gui doesn’t do much because it doesn’t have any widgets. Widgets are the elements that make
up a GUI; they include:
Button: A widget, containing text or an image, that performs an action when pressed.
Canvas: A region that can display lines, rectangles, circles and other shapes.

184
Chapter 19. Case study: Tkinter
Entry: A region where users can type text.
Scrollbar: A widget that controls the visible part of another widget.
Frame: A container, often invisible, that contains other widgets.
The empty gray square you see when you create a Gui is a Frame. When you create a new widget,
it is added to this Frame.
19.2
Buttons and callbacks
The method bu creates a Button widget:
button = g.bu(text='Press me.')
The return value from bu is a Button object. The button that appears in the Frame is a graphical
representation of this object; you can control the button by invoking methods on it.
bu takes up to 32 parameters that control the appearance and function of the button. These pa-
rameters are called options. Instead of providing values for all 32 options, you can use keyword
arguments, like text='Press me.', to specify only the options you need and use the default val-
ues for the rest.
When you add a widget to the Frame, it gets “shrink-wrapped;” that is, the Frame shrinks to the size
of the Button. If you add more widgets, the Frame grows to accommodate them.
The method la creates a Label widget:
label = g.la(text='Press the button.')
By default, Tkinter stacks the widgets top-to-bottom and centers them. We’ll see how to override
that behavior soon.
If you press the button, you will see that it doesn’t do much. That’s because you haven’t “wired it
up;” that is, you haven’t told it what to do!
The option that controls the behavior of a button is command. The value of command is a function
that gets executed when the button is pressed. For example, here is a function that creates a new
Label:
def make_label():
g.la(text='Thank you.')
Now we can create a button with this function as its command:
button2 = g.bu(text='No, press me!', command=make_label)
When you press this button, it should execute make_label and a new label should appear.
The value of the command option is a function object, which is known as a callback because after
you call bu to create the button, the ﬂow of execution “calls back” when the user presses the button.
This kind of ﬂow is characteristic of event-driven programming. User actions, like button presses
and key strokes, are called events. In event-driven programming, the ﬂow of execution is determined
by user actions rather than by the programmer.
The challenge of event-driven programming is to construct a set of widgets and callbacks that work
correctly (or at least generate appropriate error messages) for any sequence of user actions.

19.3. Canvas widgets
185
Exercise 19.1 Write a program that creates a GUI with a single button. When the button is pressed
it should create a second button. When that button is pressed, it should create a label that says, “Nice
job!”.
What happens if you press the buttons more than once? You can see my solution at thinkpython.
com/code/button_demo.py
19.3
Canvas widgets
One of the most versatile widgets is the Canvas, which creates a region for drawing lines, circles
and other shapes. If you did Exercise 15.4 you are already familiar with canvases.
The method ca creates a new Canvas:
canvas = g.ca(width=500, height=500)
width and height are the dimensions of the canvas in pixels.
After you create a widget, you can still change the values of the options with the config method.
For example, the bg option changes the background color:
canvas.config(bg='white')
The value of bg is a string that names a color. The set of legal color names is different for different
implementations of Python, but all implementations provide at least:
white
black
red
green
blue
cyan
yellow
magenta
Shapes on a Canvas are called items. For example, the Canvas method circle draws (you guessed
it) a circle:
item = canvas.circle([0,0], 100, fill='red')
The ﬁrst argument is a coordinate pair that speciﬁes the center of the circle; the second is the radius.
Gui.py provides a standard Cartesian coordinate system with the origin at the center of the Canvas
and the positive y axis pointing up. This is different from some other graphics systems where the
the origin is in the upper left with the y axis pointing down.
The fill option speciﬁes that the circle should be ﬁlled in with red.
The return value from circle is an Item object that provides methods for modifying the item on the
canvas. For example, you can use config to change any of the circle’s options:
item.config(fill='yellow', outline='orange', width=10)
width is the thickness of the outline in pixels; outline is the color.
Exercise 19.2 Write a program that creates a Canvas and a Button. When the user presses the
Button, it should draw a circle on the canvas.

186
Chapter 19. Case study: Tkinter
19.4
Coordinate sequences
The rectangle method takes a sequence of coordinates that specify opposite corners of the rectan-
gle. This example draws a green rectangle with the lower left corner at the origin and the upper right
corner at (200,100):
canvas.rectangle([[0, 0], [200, 100]],
fill='blue', outline='orange', width=10)
This way of specifying corners is called a bounding box because the two points bound the rectangle.
oval takes a bounding box and draws an oval within the speciﬁed rectangle:
canvas.oval([[0, 0], [200, 100]], outline='orange', width=10)
line takes a sequence of coordinates and draws a line that connects the points. This example draws
two legs of a triangle:
canvas.line([[0, 100], [100, 200], [200, 100]], width=10)
polygon takes the same arguments, but it draws the last leg of the polygon (if necessary) and ﬁlls it
in:
canvas.polygon([[0, 100], [100, 200], [200, 100]],
fill='red', outline='orange', width=10)
19.5
More widgets
Tkinter provides two widgets that let users type text: an Entry, which is a single line, and a Text
widget, which has multiple lines.
en creates a new Entry:
entry = g.en(text='Default text.')
The text option allows you to put text into the entry when it is created. The get method returns the
contents of the Entry (which may have been changed by the user):
>>> entry.get()
'Default text.'
te creates a Text widget:
text = g.te(width=100, height=5)
width and height are the dimensions of the widget in characters and lines.
insert puts text into the Text widget:
text.insert(END, 'A line of text.')
END is a special index that indicates the last character in the Text widget.
You can also specify a character using a dotted index, like 1.1, which has the line number before
the dot and the column number after. The following example adds the letters 'nother' after the
ﬁrst character of the ﬁrst line.

19.6. Packing widgets
187
>>> text.insert(1.1, 'nother')
The get method reads the text in the widget; it takes a start and end index as arguments. The
following example returns all the text in the widget, including the newline character:
>>> text.get(0.0, END)
'Another line of text.\n'
The delete method removes text from the widget; the following example deletes all but the ﬁrst
two characters:
>>> text.delete(1.2, END)
>>> text.get(0.0, END)
'An\n'
Exercise 19.3 Modify your solution to Exercise 19.2 by adding an Entry widget and a second but-
ton. When the user presses the second button, it should read a color name from the Entry and use it
to change the ﬁll color of the circle. Use config to modify the existing circle; don’t create a new
one.
Your program should handle the case where the user tries to change the color of a circle that hasn’t
been created, and the case where the color name is invalid.
You can see my solution at thinkpython.com/code/circle_demo.py.
19.6
Packing widgets
So far we have been stacking widgets in a single column, but in most GUIs the layout is more
complicated. For example, here is a slightly simpliﬁed version of TurtleWorld (see Chapter 4).

188
Chapter 19. Case study: Tkinter
This section presents the code that creates this GUI, broken into a series of steps. You can download
the complete example from thinkpython.com/code/SimpleTurtleWorld.py.
At the top level, this GUI contains two widgets—a Canvas and a Frame—arranged in a row. So the
ﬁrst step is to create the row.
class SimpleTurtleWorld(TurtleWorld):
"""This class is identical to TurtleWorld, but the code that
lays out the GUI is simplified for explanatory purposes."""
def setup(self):
self.row()
...
setup is the function that creates and arranges the widgets. Arranging widgets in a GUI is called
packing.
row creates a row Frame and makes it the “current Frame.” Until this Frame is closed or another
Frame is created, all subsequent widgets are packed in a row.
Here is the code that creates the Canvas and the column Frame that hold the other widgets:
self.canvas = self.ca(width=400, height=400, bg='white')
self.col()
The ﬁrst widget in the column is a grid Frame, which contains four buttons arranged two-by-two:
self.gr(cols=2)
self.bu(text='Print canvas', command=self.canvas.dump)

19.6. Packing widgets
189
self.bu(text='Quit', command=self.quit)
self.bu(text='Make Turtle', command=self.make_turtle)
self.bu(text='Clear', command=self.clear)
self.endgr()
gr creates the grid; the argument is the number of columns. Widgets in the grid are layed out
left-to-right, top-to-bottom.
The ﬁrst button uses self.canvas.dump as a callback; the second uses self.quit. These are
bound methods, which means they are associated with a particular object. When they are invoked,
they are invoked on the object.
The next widget in the column is a row Frame that contains a Button and an Entry:
self.row([0,1], pady=30)
self.bu(text='Run file', command=self.run_file)
self.en_file = self.en(text='snowflake.py', width=5)
self.endrow()
The ﬁrst argument to row is a list of weights that determines how extra space is allocated between
widgets. The list [0,1] means that all extra space is allocated to the second widget, which is the
Entry. If you run this code and resize the window, you will see that the Entry grows and the Button
doesn’t.
The option pady “pads” this row in the y direction, adding 30 pixels of space above and below.
endrow ends this row of widgets, so subsequent widgets are packed in the column Frame. Gui.py
keeps a stack of Frames:
• When you use row, col or gr to create a Frame, it goes on top of the stack and becomes the
current Frame.
• When you use endrow, endcol or endgr to close a Frame, it gets popped off the stack and
the previous Frame on the stack becomes the current Frame.
The method run_file reads the contents of the Entry, uses it as a ﬁlename, reads the contents and
passes it to run_code. self.inter is an Interpreter object that knows how to take a string and
execute it as Python code.
def run_file(self):
filename = self.en_file.get()
fp = open(filename)
source = fp.read()
self.inter.run_code(source, filename)
The last two widgets are a Text widget and a Button:
self.te_code = self.te(width=25, height=10)
self.te_code.insert(END, 'world.clear()\n')
self.te_code.insert(END, 'bob = Turtle(world)\n')
self.bu(text='Run code', command=self.run_text)
run_text is similar to run_file except that it takes the code from the Text widget instead of from
a ﬁle:

190
Chapter 19. Case study: Tkinter
def run_text(self):
source = self.te_code.get(1.0, END)
self.inter.run_code(source, '<user-provided code>')
Unfortunately, the details of widget layout are different in other languages, and in different Python
modules. Tkinter alone provides three different mechanisms for arranging widgets. These mecha-
nisms are called geometry managers. The one I demonstrated in this section is the “grid” geometry
manager; the others are called “pack” and “place”.
Fortunately, most of the concepts in this section apply to other GUI modules and other languages.
19.7
Menus and Callables
A Menubutton is a widget that looks like a button, but when pressed it pops up a menu. After the
user selects an item, the menu disappears.
Here is code that creates a color selection Menubutton (you can download it from thinkpython.
com/code/menubutton_demo.py):
g = Gui()
g.la('Select a color:')
colors = ['red', 'green', 'blue']
mb = g.mb(text=colors[0])
mb creates the Menubutton. Initially, the text on the button is the name of the default color. The
following loop creates one menu item for each color:
for color in colors:
g.mi(mb, text=color, command=Callable(set_color, color))
The ﬁrst argument of mi is the Menubutton these items are associated with.
The command option is a Callable object, which is something new. So far we have seen functions
and bound methods used as callbacks, which works ﬁne if you don’t have to pass any arguments
to the function. Otherwise you have to construct a Callable object that contains a function, like
set_color, and its arguments, like color.
The Callable object stores a reference to the function and the arguments as attributes. Later, when
the user clicks on a menu item, the callback calls the function and passes the stored arguments.
Here is what set_color might look like:
def set_color(color):
mb.config(text=color)
print color
When the user selects a menu item and set_color is called, it conﬁgures the Menubutton to display
the newly-selected color. It also print the color; if you try this example, you can conﬁrm that
set_color is called when you select an item (and not called when you create the Callable object).

19.8. Binding
191
19.8
Binding
A binding is an association between a widget, an event and a callback: when an event (like a button
press) happens on a widget, the callback is invoked.
Many widgets have default bindings. For example, when you press a button, the default binding
changes the relief of the button to make it look depressed. When you release the button, the binding
restores the appearance of the button and invokes the callback speciﬁed with the command option.
You can use the bind method to override these default bindings or to add new ones. For example, this
code creates a binding for a canvas (you can download the code in this section from thinkpython.
com/code/draggable_demo.py):
ca.bind('<ButtonPress-1>', make_circle)
The ﬁrst argument is an event string; this event is triggered when the user presses the left mouse
button. Other mouse events include ButtonMotion, ButtonRelease and Double-Button.
The second argument is an event handler. An event handler is a function or bound method, like a
callback, but an important difference is that an event handler takes an Event object as a parameter.
Here is an example:
def make_circle(event):
pos = ca.canvas_coords([event.x, event.y])
item = ca.circle(pos, 5, fill='red')
The Event object contains information about the type of event and details like the coordinates of
the mouse pointer. In this example the information we need is the location of the mouse click.
These values are in “pixel coordinates,” which are deﬁned by the underlying graphical system. The
method canvas_coords translates them to “Canvas coordinates,” which are compatible with Canvas
methods like circle.
For Entry widgets, it is common to bind the <Return> event, which is triggered when the use presses
the Return or Enter key. For example, the following code creates a Button and an Entry.
bu = g.bu('Make text item:', make_text)
en = g.en()
en.bind('<Return>', make_text)
make_text is called when the Button is pressed or when the user hits Return while typing in the
Entry. To make this work, we need a function that can be called as a command (with no arguments)
or as an event handler (with an Event as an argument):
def make_text(event=None):
text = en.get()
item = ca.text([0,0], text)
make_text gets the contents of the Entry and displays it as a Text item in the Canvas.
It is also possible to create bindings for Canvas items.
The following is a class deﬁnition for
Draggable, which is a child class of Item that provides bindings that implement drag-and-drop
capability.
class Draggable(Item):

192
Chapter 19. Case study: Tkinter
def __init__(self, item):
self.canvas = item.canvas
self.tag = item.tag
self.bind('<Button-3>', self.select)
self.bind('<B3-Motion>', self.drag)
self.bind('<Release-3>', self.drop)
The init method takes an Item as a parameter. It copies the attributes of the Item and then creates
bindings for three events: a button press, button motion, and button release.
The event handler select stores the coordinates of the current event and the original color of the
item, then changes the color to yellow:
def select(self, event):
self.dragx = event.x
self.dragy = event.y
self.fill = self.cget('fill')
self.config(fill='yellow')
cget stands for “get conﬁguration;” it takes the name of an option as a string and returns the current
value of that option.
drag computes how far the object has moved relative to the starting place, updates the stored coor-
dinates, and then moves the item.
def drag(self, event):
dx = event.x - self.dragx
dy = event.y - self.dragy
self.dragx = event.x
self.dragy = event.y
self.move(dx, dy)
This computation is done in pixel coordinates; there is no need to convert to Canvas coordinates.
Finally, drop restores the original color of the item:
def drop(self, event):
self.config(fill=self.fill)
You can use the Draggable class to add drag-and-drop capability to an existing item. For example,
here is a modiﬁed version of make_circle that uses circle to create an Item and Draggable to
make it draggable:
def make_circle(event):
pos = ca.canvas_coords([event.x, event.y])
item = ca.circle(pos, 5, fill='red')
item = Draggable(item)
This example demonstrates one of the beneﬁts of inheritance: you can modify the capabilities of
a parent class without modifying its deﬁnition. This is particularly useful if you want to change
behavior deﬁned in a module you did not write.

19.9. Debugging
193
19.9
Debugging
One of the challenges of GUI programming is keeping track of which things happen while the GUI
is being built and which things happen later in response to user events.
For example, when you are setting up a callback, it is a common error to call the function rather than
passing a reference to it:
def the_callback():
print 'Called.'
g.bu(text='This is wrong!', command=the_callback())
If you run this code, you will see that it calls the_callback immediately, and then creates the
button. When you press the button, it does nothing because the return value from the_callback is
None. Usually you do not want to invoke a callback while you are setting up the GUI; it should only
be invoked later in response to a user event.
Another challenge of GUI programming is that you don’t have control of the ﬂow of execution.
Which parts of the program execute and their order are determined by user actions. That means that
you have to design your program to work correctly for any possible sequence of events.
For example, the GUI in Exercise 19.3 has two widgets: one creates a Circle item and the other
changes the color of the Circle. If the user creates the circle and then changes its color, there’s no
problem. But what if the user changes the color of a circle that doesn’t exist yet? Or creates more
than one circle?
As the number of widgets grows, it is increasingly difﬁcult to imagine all possible sequences of
events. One way to manage this complexity is to encapsulate the state of the system in an object and
then consider:
• What are the possible states? In the Circle example, we might consider two states: before and
after the user creates the ﬁrst circle.
• In each state, what events can occur? In the example, the user can press either of the buttons,
or quit.
• For each state-event pair, what is the desired outcome? Since there are two states and two
buttons, there are four state-event pairs to consider.
• What can cause a transition from one state to another? In this case, there is a transition when
the user creates the ﬁrst circle.
You might also ﬁnd it useful to deﬁne, and check, invariants that should hold regardless of the
sequence of events.
This approach to GUI programming can help you write correct code without taking the time to test
every possible sequence of user events!
19.10
Glossary
GUI: A graphical user interface.
widget: One of the elements that makes up a GUI, including buttons, menus, text entry ﬁelds, etc.

194
Chapter 19. Case study: Tkinter
option: A value that controls the appearance or function of a widget.
keyword argument: An argument that indicates the parameter name as part of the function call.
callback: A function associated with a widget that is called when the user performs an action.
bound method: A method associated with a particular instance.
event-driven programming: A style of programming in which the ﬂow of execution is determined
by user actions.
event: A user action, like a mouse click or key press, that causes a GUI to respond.
event loop: An inﬁnite loop that waits for user actions and responds.
item: A graphical element on a Canvas widget.
bounding box: A rectangle that encloses a set of items, usually speciﬁed by two opposing corners.
pack: To arrange and display the elements of a GUI.
geometry manager: A system for packing widgets.
binding: An association between a widget, an event, and an event handler. The event handler is
called when the event occurs in the widget.
19.11
Exercises
Exercise 19.4 For this exercise, you will write an image viewer. Here is a simple example:
g = Gui()
canvas = g.ca(width=300)
photo = PhotoImage(file='danger.gif')
canvas.image([0,0], image=photo)
g.mainloop()
PhotoImage reads a ﬁle and returns a PhotoImage object that Tkinter can display. Canvas.image
puts the image on the canvas, centered on the given coordinates. You can also put images on labels,
buttons, and some other widgets:
g.la(image=photo)
g.bu(image=photo)
PhotoImage can only handle a few image formats, like GIF and PPM, but we can use the Python
Imaging Library (PIL) to read other ﬁles.
The name of the PIL module is Image, but Tkinter deﬁnes an object with the same name. To avoid
the conﬂict, you can use import...as like this:
import Image as PIL
import ImageTk
The ﬁrst line imports Image and gives it the local name PIL. The second line imports ImageTk,
which can translate a PIL image into a Tkinter PhotoImage. Here’s an example:

19.11. Exercises
195
image = PIL.open('allen.png')
photo2 = ImageTk.PhotoImage(image)
g.la(image=photo2)
1. Download image_demo.py, danger.gif and allen.png from thinkpython.com/code.
Run image_demo.py. You might have to install PIL and ImageTk. They are probably in your
software repository, but if not you can get them from pythonware.com/products/pil/.
2. In image_demo.py change the name of the second PhotoImage from photo2 to photo and
run the program again. You should see the second PhotoImage but not the ﬁrst.
The problem is that when you reassign photo it overwrites the reference to the ﬁrst PhotoIm-
age, which then disappears. The same thing happens if you assign a PhotoImage to a local
variable; it disappears when the function ends.
To avoid this problem, you have to store a reference to each PhotoImage you want to keep.
You can use a global variable, or store PhotoImages in a data structure or as an attribute of an
object.
This behavior can be frustrating, which is why I am warning you (and why the example image
says “Danger!”).
3. Starting with this example, write a program that takes the name of a directory and loops
through all the ﬁles, displaying any ﬁles that PIL recognizes as images. You can use a try
statement to catch the ﬁles PIL doesn’t recognize.
When the user clicks on the image, the program should display the next one.
4. PIL provides a variety of methods for manipulating images. You can read about them at
pythonware.com/library/pil/handbook. As a challenge, choose a few of these methods
and provide a GUI for applying them to images.
You can download a simple solution from thinkpython.com/code/ImageBrowser.py.
Exercise 19.5 A vector graphics editor is a program that allows users to draw and edit shapes on
the screen and generate output ﬁles in vector graphics formats like Postscript and SVG1.
Write a simple vector graphics editor using Tkinter. At a minimum, it should allow users to draw
lines, circles and rectangles, and it should use Canvas.dump to generate a Postscript description of
the contents of the Canvas.
As a challenge, you could allow users to select and resize items on the Canvas.
Exercise 19.6 Use Tkinter to write a basic web browser. It should have a Text widget where the
user can enter a URL and a Canvas to display the contents of the page.
You can use the urllib module to download ﬁles (see Exercise 14.5) and the HTMLParser module
to parse the HTML tags (see docs.python.org/lib/module-HTMLParser.html).
At a minimum your browser should handle plain text and hyperlinks. As a challenge you could
handle background colors, text formatting tags and images.
1See wikipedia.org/wiki/Vector_graphics_editor.

196
Chapter 19. Case study: Tkinter

Appendix A
Debugging
Different kinds of errors can occur in a program, and it is useful to distinguish among them in order
to track them down more quickly:
• Syntax errors are produced by Python when it is translating the source code into byte code.
They usually indicate that there is something wrong with the syntax of the program. Example:
Omitting the colon at the end of a def statement yields the somewhat redundant message
SyntaxError:
invalid syntax.
• Runtime errors are produced by the interpreter if something goes wrong while the program is
running. Most runtime error messages include information about where the error occurred and
what functions were executing. Example: An inﬁnite recursion eventually causes the runtime
error “maximum recursion depth exceeded.”
• Semantic errors are problems with a program that runs without producing error messages but
doesn’t do the right thing. Example: An expression may not be evaluated in the order you
expect, yielding an incorrect result.
The ﬁrst step in debugging is to ﬁgure out which kind of error you are dealing with. Although the
following sections are organized by error type, some techniques are applicable in more than one
situation.
A.1
Syntax errors
Syntax errors are usually easy to ﬁx once you ﬁgure out what they are. Unfortunately, the error
messages are often not helpful. The most common messages are SyntaxError:
invalid syntax
and SyntaxError:
invalid token, neither of which is very informative.
On the other hand, the message does tell you where in the program the problem occurred. Actually,
it tells you where Python noticed a problem, which is not necessarily where the error is. Sometimes
the error is prior to the location of the error message, often on the preceding line.
If you are building the program incrementally, you should have a good idea about where the error
is. It will be in the last line you added.

198
Appendix A. Debugging
If you are copying code from a book, start by comparing your code to the book’s code very carefully.
Check every character. At the same time, remember that the book might be wrong, so if you see
something that looks like a syntax error, it might be.
Here are some ways to avoid the most common syntax errors:
1. Make sure you are not using a Python keyword for a variable name.
2. Check that you have a colon at the end of the header of every compound statement, including
for, while, if, and def statements.
3. Make sure that any strings in the code have matching quotation marks.
4. If you have multiline strings with triple quotes (single or double), make sure you have ter-
minated the string properly. An unterminated string may cause an invalid token error at
the end of your program, or it may treat the following part of the program as a string until it
comes to the next string. In the second case, it might not produce an error message at all!
5. An unclosed opening operator—(, {, or [—makes Python continue with the next line as part
of the current statement. Generally, an error occurs almost immediately in the next line.
6. Check for the classic = instead of == inside a conditional.
7. Check the indentation to make sure it lines up the way it is supposed to. Python can handle
space and tabs, but if you mix them it can cause problems. The best way to avoid this problem
is to use a text editor that knows about Python and generates consistent indentation.
If nothing works, move on to the next section...
A.1.1
I keep making changes and it makes no difference.
If the interpreter says there is an error and you don’t see it, that might be because you and the
interpreter are not looking at the same code. Check your programming environment to make sure
that the program you are editing is the one Python is trying to run.
If you are not sure, try putting an obvious and deliberate syntax error at the beginning of the program.
Now run it again. If the interpreter doesn’t ﬁnd the new error, you are not running the new code.
There are a few likely culprits:
• You edited the ﬁle and forgot to save the changes before running it again. Some programming
environments do this for you, but some don’t.
• You changed the name of the ﬁle, but you are still running the old name.
• Something in your development environment is conﬁgured incorrectly.
• If you are writing a module and using import, make sure you don’t give your module the
same name as one of the standard Python modules.
• If you are using import to read a module, remember that you have to restart the interpreter or
use reload to read a modiﬁed ﬁle. If you import the module again, it doesn’t do anything.
If you get stuck and you can’t ﬁgure out what is going on, one approach is to start again with a new
program like “Hello, World!,” and make sure you can get a known program to run. Then gradually
add the pieces of the original program to the new one.

A.2. Runtime errors
199
A.2
Runtime errors
Once your program is syntactically correct, Python can compile it and at least start running it. What
could possibly go wrong?
A.2.1
My program does absolutely nothing.
This problem is most common when your ﬁle consists of functions and classes but does not actually
invoke anything to start execution. This may be intentional if you only plan to import this module
to supply classes and functions.
If it is not intentional, make sure that you are invoking a function to start execution, or execute one
from the interactive prompt. Also see the “Flow of Execution” section below.
A.2.2
My program hangs.
If a program stops and seems to be doing nothing, it is “hanging.” Often that means that it is caught
in an inﬁnite loop or inﬁnite recursion.
• If there is a particular loop that you suspect is the problem, add a print statement immediately
before the loop that says “entering the loop” and another immediately after that says “exiting
the loop.”
Run the program. If you get the ﬁrst message and not the second, you’ve got an inﬁnite loop.
Go to the “Inﬁnite Loop” section below.
• Most of the time, an inﬁnite recursion will cause the program to run for a while and then
produce a “RuntimeError: Maximum recursion depth exceeded” error. If that happens, go to
the “Inﬁnite Recursion” section below.
If you are not getting this error but you suspect there is a problem with a recursive method or
function, you can still use the techniques in the “Inﬁnite Recursion” section.
• If neither of those steps works, start testing other loops and other recursive functions and
methods.
• If that doesn’t work, then it is possible that you don’t understand the ﬂow of execution in your
program. Go to the “Flow of Execution” section below.
Inﬁnite Loop
If you think you have an inﬁnite loop and you think you know what loop is causing the problem,
add a print statement at the end of the loop that prints the values of the variables in the condition
and the value of the condition.
For example:
while x > 0 and y < 0 :
# do something to x
# do something to y
print
"x: ", x
print
"y: ", y
print
"condition: ", (x > 0 and y < 0)

200
Appendix A. Debugging
Now when you run the program, you will see three lines of output for each time through the loop.
The last time through the loop, the condition should be false. If the loop keeps going, you will be
able to see the values of x and y, and you might ﬁgure out why they are not being updated correctly.
Inﬁnite Recursion
Most of the time, an inﬁnite recursion will cause the program to run for a while and then produce a
Maximum recursion depth exceeded error.
If you suspect that a function or method is causing an inﬁnite recursion, start by checking to make
sure that there is a base case. In other words, there should be some condition that will cause the
function or method to return without making a recursive invocation. If not, then you need to rethink
the algorithm and identify a base case.
If there is a base case but the program doesn’t seem to be reaching it, add a print statement at the
beginning of the function or method that prints the parameters. Now when you run the program,
you will see a few lines of output every time the function or method is invoked, and you will see the
parameters. If the parameters are not moving toward the base case, you will get some ideas about
why not.
Flow of Execution
If you are not sure how the ﬂow of execution is moving through your program, add print statements
to the beginning of each function with a message like “entering function foo,” where foo is the name
of the function.
Now when you run the program, it will print a trace of each function as it is invoked.
A.2.3
When I run the program I get an exception.
If something goes wrong during runtime, Python prints a message that includes the name of the
exception, the line of the program where the problem occurred, and a traceback.
The traceback identiﬁes the function that is currently running, and then the function that invoked it,
and then the function that invoked that, and so on. In other words, it traces the sequence of function
invocations that got you to where you are. It also includes the line number in your ﬁle where each
of these calls occurs.
The ﬁrst step is to examine the place in the program where the error occurred and see if you can
ﬁgure out what happened. These are some of the most common runtime errors:
NameError: You are trying to use a variable that doesn’t exist in the current environment. Remem-
ber that local variables are local. You cannot refer to them from outside the function where
they are deﬁned.
TypeError: There are several possible causes:
• You are trying to use a value improperly. Example: indexing a string, list, or tuple with
something other than an integer.
• There is a mismatch between the items in a format string and the items passed for con-
version. This can happen if either the number of items does not match or an invalid
conversion is called for.

A.3. Semantic errors
201
• You are passing the wrong number of arguments to a function or method. For methods,
look at the method deﬁnition and check that the ﬁrst parameter is self. Then look at the
method invocation; make sure you are invoking the method on an object with the right
type and providing the other arguments correctly.
KeyError: You are trying to access an element of a dictionary using a key that the dictionary does
not contain.
AttributeError: You are trying to access an attribute or method that does not exist. Check the
spelling! You can use dir to list the attributes that do exist.
If an AttributeError indicates that an object has NoneType, that means that it is None. One
common cause is forgetting to return a value from a function; if you get to the end of a function
without hitting a return statement, it returns None. Another common cause is using the result
from a list method, like sort, that returns None.
IndexError: The index you are using to access a list, string, or tuple is greater than its length minus
one. Immediately before the site of the error, add a print statement to display the value of
the index and the length of the array. Is the array the right size? Is the index the right value?
The Python debugger (pdb) is useful for tracking down Exceptions because it allows you to examine
the state of the program immediately before the error. You can read about pdb at docs.python.
org/lib/module-pdb.html.
A.2.4
I added so many print statements I get inundated with output.
One of the problems with using print statements for debugging is that you can end up buried in
output. There are two ways to proceed: simplify the output or simplify the program.
To simplify the output, you can remove or comment out print statements that aren’t helping, or
combine them, or format the output so it is easier to understand.
To simplify the program, there are several things you can do. First, scale down the problem the
program is working on. For example, if you are searching a list, search a small list. If the program
takes input from the user, give it the simplest input that causes the problem.
Second, clean up the program. Remove dead code and reorganize the program to make it as easy
to read as possible. For example, if you suspect that the problem is in a deeply nested part of the
program, try rewriting that part with simpler structure. If you suspect a large function, try splitting
it into smaller functions and testing them separately.
Often the process of ﬁnding the minimal test case leads you to the bug. If you ﬁnd that a program
works in one situation but not in another, that gives you a clue about what is going on.
Similarly, rewriting a piece of code can help you ﬁnd subtle bugs. If you make a change that you
think shouldn’t affect the program, and it does, that can tip you off.
A.3
Semantic errors
In some ways, semantic errors are the hardest to debug, because the interpreter provides no infor-
mation about what is wrong. Only you know what the program is supposed to do.

202
Appendix A. Debugging
The ﬁrst step is to make a connection between the program text and the behavior you are seeing.
You need a hypothesis about what the program is actually doing. One of the things that makes that
hard is that computers run so fast.
You will often wish that you could slow the program down to human speed, and with some debuggers
you can. But the time it takes to insert a few well-placed print statements is often short compared
to setting up the debugger, inserting and removing breakpoints, and “stepping” the program to where
the error is occurring.
A.3.1
My program doesn’t work.
You should ask yourself these questions:
• Is there something the program was supposed to do but which doesn’t seem to be happening?
Find the section of the code that performs that function and make sure it is executing when
you think it should.
• Is something happening that shouldn’t? Find code in your program that performs that function
and see if it is executing when it shouldn’t.
• Is a section of code producing an effect that is not what you expected? Make sure that you
understand the code in question, especially if it involves invocations to functions or methods
in other Python modules. Read the documentation for the functions you invoke. Try them out
by writing simple test cases and checking the results.
In order to program, you need to have a mental model of how programs work. If you write a program
that doesn’t do what you expect, very often the problem is not in the program; it’s in your mental
model.
The best way to correct your mental model is to break the program into its components (usually
the functions and methods) and test each component independently. Once you ﬁnd the discrepancy
between your model and reality, you can solve the problem.
Of course, you should be building and testing components as you develop the program. If you
encounter a problem, there should be only a small amount of new code that is not known to be
correct.
A.3.2
I’ve got a big hairy expression and it doesn’t do what I expect.
Writing complex expressions is ﬁne as long as they are readable, but they can be hard to debug. It is
often a good idea to break a complex expression into a series of assignments to temporary variables.
For example:
self.hands[i].addCard(self.hands[self.findNeighbor(i)].popCard())
This can be rewritten as:
neighbor = self.findNeighbor(i)
pickedCard = self.hands[neighbor].popCard()
self.hands[i].addCard(pickedCard)

A.3. Semantic errors
203
The explicit version is easier to read because the variable names provide additional documentation,
and it is easier to debug because you can check the types of the intermediate variables and display
their values.
Another problem that can occur with big expressions is that the order of evaluation may not be what
you expect. For example, if you are translating the expression
x
2π into Python, you might write:
y = x / 2 * math.pi
That is not correct because multiplication and division have the same precedence and are evaluated
from left to right. So this expression computes xπ/2.
A good way to debug expressions is to add parentheses to make the order of evaluation explicit:
y = x / (2 * math.pi)
Whenever you are not sure of the order of evaluation, use parentheses. Not only will the program
be correct (in the sense of doing what you intended), it will also be more readable for other people
who haven’t memorized the rules of precedence.
A.3.3
I’ve got a function or method that doesn’t return what I expect.
If you have a return statement with a complex expression, you don’t have a chance to print the
return value before returning. Again, you can use a temporary variable. For example, instead of:
return self.hands[i].removeMatches()
you could write:
count = self.hands[i].removeMatches()
return count
Now you have the opportunity to display the value of count before returning.
A.3.4
I’m really, really stuck and I need help.
First, try getting away from the computer for a few minutes. Computers emit waves that affect the
brain, causing these symptoms:
• Frustration and rage.
• Superstitious beliefs (“the computer hates me”) and magical thinking (“the program only
works when I wear my hat backward”).
• Random walk programming (the attempt to program by writing every possible program and
choosing the one that does the right thing).
If you ﬁnd yourself suffering from any of these symptoms, get up and go for a walk. When you are
calm, think about the program. What is it doing? What are some possible causes of that behavior?
When was the last time you had a working program, and what did you do next?
Sometimes it just takes time to ﬁnd a bug. I often ﬁnd bugs when I am away from the computer and
let my mind wander. Some of the best places to ﬁnd bugs are trains, showers, and in bed, just before
you fall asleep.

204
Appendix A. Debugging
A.3.5
No, I really need help.
It happens. Even the best programmers occasionally get stuck. Sometimes you work on a program
so long that you can’t see the error. A fresh pair of eyes is just the thing.
Before you bring someone else in, make sure you are prepared. Your program should be as simple
as possible, and you should be working on the smallest input that causes the error. You should have
print statements in the appropriate places (and the output they produce should be comprehensible).
You should understand the problem well enough to describe it concisely.
When you bring someone in to help, be sure to give them the information they need:
• If there is an error message, what is it and what part of the program does it indicate?
• What was the last thing you did before this error occurred? What were the last lines of code
that you wrote, or what is the new test case that fails?
• What have you tried so far, and what have you learned?
When you ﬁnd the bug, take a second to think about what you could have done to ﬁnd it faster. Next
time you see something similar, you will be able to ﬁnd the bug more quickly.
Remember, the goal is not just to make the program work. The goal is to learn how to make the
program work.

Index
abecedarian, 72, 83
abs function, 52
absolute path, 139, 145
access, 89
accumulator, 100
histogram, 129
list, 93
string, 175
sum, 93
Ackerman function, 61
add method, 165
addition with carrying, 68
algorithm, 3, 7, 67, 132
Euclid, 62
MD5, 145
RSA, 112
square root, 69
aliasing, 96, 100, 149, 151, 169
copying to avoid, 99
alphabet, 37
alternative execution, 41
ambiguity, 5
anagram, 100
anagram set, 124, 142
and operator, 40
anydbm module, 141
append method, 92, 98, 101, 174, 175
arc function, 31
argument, 17, 19, 21, 22, 26, 97
gather, 117
keyword, 33, 36, 122, 184
list, 97
optional, 76, 95, 107
variable-length tuple, 117
argument scatter, 118
arithmetic operator, 12
assert statement, 159
assignment, 15, 63, 89
item, 74, 90, 116
multiple, 68, 110
tuple, 116–118, 123
assignment statement, 10
attribute
dict , 168
class, 172, 179
initializing, 168
instance, 148, 153, 172, 179
AttributeError, 152, 201
Austin, Jane, 129
available colors, 154, 170
Bacon, Kevin, 146
Bangladesh, national ﬂag, 154
base case, 44, 47
benchmarking, 134, 136
big, hairy expression, 202
binding, 191, 194
bingo, 124
birthday, 160
birthday paradox, 100
bisect module, 101
bisection search, 101
bisection, debugging by, 68
bitwise operator, 12
body, 19, 25, 47, 65
bool type, 39
boolean expression, 39, 46
boolean function, 54, 155
boolean operator, 76
borrowing, subtraction with, 68, 159
bound method, 189, 194
bounding box, 154, 186, 194
bracket
squiggly, 103
bracket operator, 71, 89, 116
branch, 41, 47
break statement, 65
bug, 3, 7
worst, 169
worst ever, 195
Button widget, 184
calculator, 8, 16

206
Index
call graph, 109, 113
Callable object, 190
callback, 184, 189–191, 193, 194
Canvas coordinate, 185, 192
Canvas item, 185
Canvas object, 153
Canvas widget, 185
Car Talk, 86, 113, 124
Card class, 172
card, playing, 171
carrying, addition with, 68, 156, 158
case-sensitivity, variable names, 15
catch, 145
chained conditional, 41, 47
character, 71
checksum, 145
child class, 176, 179
choice function, 128
circle function, 31
circular deﬁnition, 56
class, 147, 153
Card, 172
child, 176, 179
Date, 160
Deck, 174
Hand, 176
Kangaroo, 169
parent, 176
Point, 147, 165
Rectangle, 149
SimpleTurtleWorld, 188
Time, 155
class attribute, 172, 179
class deﬁnition, 147
class diagram, 178, 180
class object, 148, 153
close method, 138, 141, 143
cmp function, 174
cmp
method, 173
Collatz conjecture, 65
colon, 19, 198
color list, 154, 170
comment, 14, 16
commutativity, 14, 167
compare function, 52
comparison
string, 77
tuple, 121, 174
comparison operator, 40
compile, 1, 7
composition, 19, 22, 26, 54, 174
compound statement, 40, 47
compression
ﬁle, 143
concatenation, 14, 16, 23, 72, 74, 95
list, 91, 98, 101
condition, 40, 47, 65, 199
conditional, 198
chained, 41, 47
nested, 42, 47
conditional execution, 40
conditional operator, 173
conditional statement, 40, 47, 55
conﬁg method, 185
consistency check, 112, 158
contributors, vii
conversion
type, 17
coordinate
Canvas, 185, 192
pixel, 192
coordinate sequence, 186
copy
deep, 152
shallow, 152
slice, 74, 92
to avoid aliasing, 99
copy module, 151
copying objects, 151
count method, 76
counter, 75, 79, 104, 111
counting and looping, 75
crosswords, 81
cummings, e. e., 3
cumulative sum, 94
Czech Republic, national ﬂag, 154
data structure, 122, 123, 133
database, 141, 145, 146
Date class, 160
datetime module, 160
dead code, 52, 60, 201
debugger (pdb), 201
debugging, 3, 6, 7, 15, 25, 35, 45, 59, 77, 85,
98, 112, 122, 134, 144, 152, 159, 168,
178, 193, 197
by bisection, 68
emotional response, 6, 203
experimental, 4
superstition, 203

Index
207
Deck class, 174
deck, playing cards, 174
declaration, 110, 113
decorate-sort-undecorate pattern, 121
decrement, 64, 69
deep copy, 152, 153
deepcopy function, 152
def keyword, 19
default value, 130, 135, 164
avoiding mutable, 169
deﬁnition
circular, 56
class, 147
function, 19
recursive, 125
del operator, 94
deletion, element of list, 94
delimiter, 95, 100
deterministic, 128, 135
development plan, 36
encapsulation and generalization, 35
incremental, 52, 197
planned, 158
problem recognition, 84, 85
prototype and patch, 156, 158
random walk programming, 135, 203
diagram
call graph, 113
class, 178, 180
object, 148, 150, 152, 153, 155, 173
stack, 23, 97
state, 10, 63, 78, 90, 96, 97, 108, 120, 148,
150, 152, 155, 173
dict
attribute, 168
dict function, 103
dictionary, 103, 112, 119, 201
initialize, 119
invert, 107
lookup, 106
looping with, 106
reverse lookup, 106
subtraction, 131
traversal, 120, 168
dictionary methods
anydbm module, 141
Dijkstra, Edsger, 86
directory, 139, 145
walk, 140
working, 139
dispatch
type-based, 167
dispatch, type-based, 166
divisibility, 39
division
ﬂoating-point, 12
ﬂoor, 12, 46
divmod, 117, 158
docstring, 35, 36, 147
documentation, 8
dot notation, 18, 26, 75, 148, 162, 172
double letters, 86
Doyle, Arthur Conan, 4
drag-and-drop, 191
DSU pattern, 121, 123, 130
duplicate, 100, 113, 145
Einstein, Albert, 33
element, 89, 99
element deletion, 94
elif keyword, 41
ellipses, 20
else keyword, 41
email address, 116
embedded object, 150, 153, 169
copying, 151
emotional debugging, 6, 203
empty list, 89
empty string, 79, 95
encapsulation, 32, 36, 54, 67, 75, 177
encode, 171, 179
encrypt, 171
encryption, 112
end of line character, 144
Entry widget, 186
enumerate function, 119
epsilon, 67
equality and assignment, 63
equivalence, 96
equivalent, 100
error
compile-time, 197
runtime, 3, 15, 44, 46, 197
semantic, 4, 10, 15, 78, 197, 201
shape, 122
syntax, 3, 15, 197
error checking, 58
error message, 3, 4, 6, 10, 15, 197
Euclid’s algorithm, 62
eval function, 69
evaluate, 13

208
Index
event, 194
event handler, 191
event loop, 183, 194
Event object, 191
event string, 191
event-driven programming, 184, 193, 194
exception, 3, 7, 15, 197, 200
AttributeError, 152, 201
IndexError, 72, 78, 90, 201
IOError, 140
KeyError, 104, 201
NameError, 23, 200
OverﬂowError, 46
RuntimeError, 44
SyntaxError, 19
TypeError, 71, 74, 108, 116, 118, 138, 163,
200
UnboundLocalError, 111
ValueError, 45, 107, 116
exception, catching, 140
executable, 2, 7
exercise, secret, 145
exists function, 139
experimental debugging, 4, 135
expression, 12, 13, 16
big and hairy, 202
boolean, 39, 46
extend method, 92
factorial function, 56, 58
False special value, 39
Fermat’s Last Theorem, 47
ﬁbonacci function, 57, 109
ﬁle, 137
compression, 143
permission, 140
reading and writing, 137
ﬁle object, 81, 86
ﬁlename, 139
ﬁlter pattern, 93, 100
ﬁnd function, 74
ﬂag, 110, 113
ﬂoat function, 17
ﬂoat type, 9
ﬂoating-point, 15, 67
ﬂoating-point division, 12
ﬂoor division, 12, 16, 46
ﬂow of execution, 21, 26, 58, 59, 64, 179, 193,
200
ﬂower, 37
folder, 139
for loop, 30, 72, 91, 119
formal language, 4, 8
format operator, 138, 145, 200
format sequence, 138, 145
format string, 138, 145
frabjous, 56
frame, 23, 26, 43, 57, 109
Frame widget, 188
Free Documentation License, GNU, v, vi
frequency, 105
letter, 124
word, 127, 136
fruitful function, 24, 26
frustration, 203
function, 19, 25, 161
abs, 52
ack, 61
arc, 31
choice, 128
circle, 31
cmp, 174
compare, 52
deepcopy, 152
dict, 103
enumerate, 119
eval, 69
exists, 139
factorial, 56
ﬁbonacci, 57, 109
ﬁnd, 74
ﬂoat, 17
getattr, 168
getcwd, 139
hasattr, 152, 168
int, 17
isinstance, 58, 166
len, 26, 72, 104
list, 95
log, 18
max, 117, 118
min, 117, 118
open, 81, 82, 137, 140, 141
polygon, 31
popen, 142
randint, 100, 128
random, 122, 128
raw input, 45
recursive, 43
reload, 144, 198

Index
209
repr, 144
reversed, 122
shufﬂe, 176
sorted, 122
sqrt, 18, 53
str, 18
sum, 118
tuple, 115
type, 152
zip, 118
function argument, 21
function call, 17, 26
function composition, 54
function deﬁnition, 19, 20, 25
function frame, 23, 26, 43, 109
function object, 20, 26
function parameter, 21
function syntax, 162
function type
modiﬁer, 157
pure, 156
function, fruitful, 24
function, math, 18
function, reasons for, 25
function, trigonometric, 18
function, tuple as return value, 117
function, void, 24
functional programming style, 157, 160
gamma function, 58
gather, 117, 123
GCD (greatest common divisor), 61
generalization, 32, 36, 83, 159
geometry manager, 190, 194
get method, 105
getattr function, 168
getcwd function, 139
global statement, 110
global variable, 110, 113
update, 110
GNU Free Documentation License, v, vi
graphical user interface, 183
greatest common divisor (GCD), 61
grid, 27
guardian pattern, 59, 60, 77
GUI, 183, 193
Gui module, 183
gunzip (Unix command), 143
Hand class, 176
hanging, 199
HAS-A relationship, 178, 180
hasattr function, 152, 168
hash function, 108, 113
hashable, 108, 113, 120
hashtable, 104, 113
header, 19, 25, 198
Hello, World, 6
help utility, 8
hexadecimal, 148
high-level language, 1, 7
histogram, 105, 113
random choice, 128, 131
word frequencies, 129
Holmes, Sherlock, 4
homophone, 114
HTMLParser module, 195
hyperlink, 195
hypotenuse, 54
identical, 100
identity, 96
if statement, 40
Image module, 194
image viewer, 194
IMDb (Internet Movie Database), 146
immutability, 74, 79, 97, 108, 115, 122
implementation, 105, 113, 134
import statement, 26, 29, 144
in operator, 76, 83, 90, 104
increment, 64, 69, 157, 163
incremental development, 60, 197
indentation, 19, 162, 198
index, 71, 77, 79, 89, 99, 103, 200
looping with, 84, 91
negative, 72
slice, 73, 92
starting at zero, 71, 90
IndexError, 72, 78, 90, 201
inﬁnite loop, 65, 69, 183, 199
inﬁnite recursion, 44, 47, 58, 199, 200
inheritance, 176, 179
init method, 164, 168, 172, 174, 176
initialization (before update), 64
instance, 29, 36, 148, 153
as argument, 149
as return value, 150
instance attribute, 148, 153, 172, 179
instantiation, 148
int function, 17

210
Index
int type, 9
integer, 15
long, 111
interactive mode, 2, 7, 12, 24
interface, 33, 35, 36, 179
interlocking words, 101
Internet Movie Database (IMDb), 146
interpret, 1, 7
invariant, 159, 160, 193
invert dictionary, 107
invocation, 75, 79
IOError, 140
is operator, 96, 151
IS-A relationship, 178, 180
isinstance function, 58, 166
item, 79, 89
Canvas, 185, 194
dictionary, 112
item assignment, 74, 90, 116
item update, 91
items method, 119
iteration, 63, 64, 69
join method, 95, 175
Kangaroo class, 169
Kevin Bacon Game, 146
key, 103, 112
key-value pair, 103, 112, 119
keyboard input, 45
KeyError, 104, 201
keys method, 106
keyword, 11, 15, 198
def, 19
elif, 41
else, 41
keyword argument, 33, 36, 122, 184, 194
Koch curve, 48
Label widget, 184
language
formal, 4
high-level, 1
low-level, 1
natural, 4
programming, 1
safe, 3
Turing complete, 55
leap of faith, 57
len function, 26, 72, 104
letter frequency, 124
letter rotation, 80, 113
Linux, 4
lipogram, 82
list, 89, 95, 99, 122
as argument, 97
comprehension, 94
concatenation, 91, 98, 101
copy, 92
element, 89
empty, 89
function, 95
index, 90
membership, 90
method, 92
nested, 89, 91
of objects, 174
of tuples, 118
operation, 91
repetition, 91
slice, 92
traversal, 91, 100
literalness, 5
local variable, 22, 26
log function, 18
logarithm, 136
logical operator, 39, 40
long integer, 111
lookup, 113
lookup, dictionary, 106
loop, 31, 36, 65, 119
condition, 199
event, 183
for, 30, 72, 91
inﬁnite, 65, 183, 199
nested, 174
traversal, 72
while, 64
looping
with dictionaries, 106
with indices, 84, 91
with strings, 75
looping and counting, 75
low-level language, 1, 7
ls (Unix command), 142
map pattern, 93, 100
map to, 171
mapping, 90, 100, 133
Markov analysis, 132
mash-up, 133

Index
211
math function, 18
max function, 117, 118
McCloskey, Robert, 72
MD5 algorithm, 145
membership
bisection search, 101
dictionary, 104
list, 90
set, 104
memo, 109, 113
mental model, 202
Menubutton widget, 190
metaphor, method invocation, 163
metathesis, 124
method, 75, 79, 161, 169
cmp , 173
str , 165, 174
add, 165
append, 92, 98, 174, 175
close, 138, 141, 143
conﬁg, 185
count, 76
extend, 92
get, 105
init, 164, 172, 174, 176
items, 119
join, 95, 175
keys, 106
mro, 179
pop, 94, 175
radd, 167
read, 143
readline, 81, 143
remove, 94
replace, 127
setdefault, 109
sort, 92, 99, 121, 176
split, 95, 116
string, 79
strip, 82, 127
translate, 127
update, 120
values, 104
void, 93
method append, 101
method resolution order, 179
method syntax, 162
method, bound, 189
method, list, 92
min function, 117, 118
model, mental, 202
modiﬁer, 157, 160
module, 18, 26
anydbm, 141
bisect, 101
copy, 151
datetime, 160
Gui, 183
HTMLParser, 195
Image, 194
os, 139
pickle, 137, 141
pprint, 112
proﬁle, 134
random, 100, 122, 128, 176
reload, 144, 198
shelve, 142, 146
string, 127
structshape, 122
urllib, 145, 195
Visual, 169
vpython, 169
World, 153
module object, 18, 143
module, writing, 143
modulus operator, 39, 46
Monty Python and the Holy Grail, 156
MP3, 145
mro method, 179
multiline string, 35, 198
multiple assignment, 63, 68, 110
multiplicity (in class diagram), 178, 180
mutability, 74, 90, 92, 97, 111, 115, 122, 150
mutable object, as default value, 169
NameError, 23, 200
natural language, 4, 8
negative index, 72
nested conditional, 42, 47
nested list, 89, 91, 100
newline, 45, 63, 175
Newton’s method, 66
None special value, 24, 52, 60, 93, 94
not operator, 40
number, random, 128
object, 74, 79, 95, 96, 100, 147
Callable, 190
Canvas, 153
class, 148

212
Index
copying, 151
embedded, 150, 153, 169
Event, 191
ﬁle, 81, 86
function, 20, 26
module, 143
mutable, 150
printing, 162
object code, 2, 7
object diagram, 148, 150, 152, 153, 155, 173
object-oriented language, 168
object-oriented programming, 161, 169, 176
octal, 11
odometer, 86
open function, 81, 82, 137, 140, 141
operand, 12, 16
operator, 16
and, 40
bitwise, 12
boolean, 76
bracket, 71, 89, 116
comparison, 40
conditional, 173
del, 94
format, 138, 145, 200
in, 76, 83, 90, 104
is, 96, 151
logical, 39, 40
modulus, 39, 46
not, 40
or, 40
overloading, 169
slice, 73, 79, 92, 98, 116
string, 14
update, 93
operator overloading, 166, 173
operator, arithmetic, 12
option, 184, 194
optional argument, 76, 95, 107
optional parameter, 130, 164
or operator, 40
order of operations, 13, 15, 203
os module, 139
other (parameter name), 164
OverﬂowError, 46
overloading, 169
override, 131, 136, 164, 173, 176, 179
packing widgets, 188, 194
palindrome, 61, 79, 85, 86
parameter, 21, 23, 25, 97
gather, 117
optional, 130, 164
other, 164
self, 163
parent class, 176, 179
parentheses
argument in, 17
empty, 19, 75
matching, 3
overriding precedence, 13
parameters in, 22
parent class in, 176
tuples in, 115
parse, 5, 8, 146
pass statement, 41
path, 139, 145
absolute, 139
relative, 139
pattern
decorate-sort-undecorate, 121
DSU, 121, 130
ﬁlter, 93, 100
guardian, 59, 60, 77
map, 93, 100
reduce, 93, 100
search, 75, 79, 83, 107
swap, 116
pdb (Python debugger), 201
PEMDAS, 13
permission, ﬁle, 140
persistence, 137, 145
pi, 18, 69
pickle module, 137, 141
pickling, 141
pie, 37
PIL (Python Imaging Library), 194
pipe, 142, 145
pixel coordinate, 192
plain text, 81, 127, 146, 195
planned development, 158, 160
playing card, Anglo-American, 171
poetry, 5
Point class, 147, 165
point, mathematical, 147
poker, 171, 180
polygon function, 31
polymorphism, 168, 169, 178
pop method, 94, 175
popen function, 142

Index
213
portability, 1, 7
postcondition, 36, 59, 179
pprint module, 112
precedence, 16, 203
precondition, 36, 59, 100, 179
preﬁx, 133
pretty print, 112
print statement, 6, 8, 165, 201
problem recognition, 84–86
problem solving, 1, 7
proﬁle module, 134
program, 2, 7
program testing, 85
programming language, 1
Project Gutenberg, 127
prompt, 2, 7, 45
prose, 5
prototype and patch, 156, 158, 160
pseudorandom, 128, 135
pure function, 156, 160
Puzzler, 86, 113, 124
Pythagorean theorem, 52
Python 3.0, 6, 12, 45, 111, 118
Python debugger (pdb), 201
Python Imaging Library (PIL), 194
python.org, 8
quotation mark, 6, 9, 35, 74, 198
radd method, 167
radian, 18
rage, 203
raise statement, 107, 159
Ramanujan, Srinivasa, 69
randint function, 100, 128
random function, 122, 128
random module, 100, 122, 128, 176
random number, 128
random text, 133
random walk programming, 135, 203
rank, 171
raw input function, 45
read method, 143
readline method, 81, 143
Rectangle class, 149
recursion, 42, 43, 47, 55, 57
base case, 44
inﬁnite, 44, 58, 200
recursive deﬁnition, 56, 125
reduce pattern, 93, 100
reducible word, 114, 125
redundancy, 5
refactoring, 34
reference, 97, 100
aliasing, 96
relative path, 139, 145
reload function, 144, 198
remove method, 94
repetition, 30
list, 91
replace method, 127
repr function, 144
representation, 147, 149, 171
return statement, 43, 51, 203
return value, 17, 26, 51, 150
tuple, 117
reverse lookup, dictionary, 106, 113
reverse word pair, 101
reversed function, 122
rotation
letters, 113
rotation, letter, 80
RSA algorithm, 112
rules of precedence, 13, 16
running pace, 8, 16, 160
runtime error, 3, 15, 44, 46, 197, 200
RuntimeError, 44, 58
safe language, 3
sanity check, 112
scaffolding, 53, 60, 112
scatter, 118, 123
Scrabble, 124
script, 2, 7
script mode, 2, 7, 12, 24
search, 107
search pattern, 75, 79, 83
search, bisection, 101
secret exercise, 145
self (parameter name), 163
semantic error, 4, 8, 10, 15, 78, 197, 201
semantics, 4, 8, 161
sequence, 71, 79, 89, 95, 115, 122
coordinate, 186
set, 131
anagram, 124, 142
set membership, 104
setdefault method, 109
sexagesimal, 158
shallow copy, 152, 153

214
Index
shape, 123
shape error, 122
shell, 142
shelve module, 142, 146
shufﬂe function, 176
SimpleTurtleWorld class, 188
sine function, 18
singleton, 108, 113, 115
slice, 79
copy, 74, 92
list, 92
string, 73
tuple, 116
update, 92
slice operator, 73, 79, 92, 98, 116
sort method, 92, 99, 121, 176
sorted function, 122
source code, 2, 7
special case, 85, 86, 157
special value
False, 39
None, 24, 52, 60, 93, 94
True, 39
split method, 95, 116
sqrt, 53
sqrt function, 18
square root, 66
squiggly bracket, 103
stack diagram, 23, 26, 36, 43, 56, 60, 97
state diagram, 10, 15, 63, 78, 90, 96, 97, 108,
120, 148, 150, 152, 155, 173
statement, 12, 15
assert, 159
assignment, 10, 63
break, 65
compound, 40
conditional, 40, 47, 55
for, 30, 72, 91
global, 110
if, 40
import, 26, 29, 144
pass, 41
print, 6, 8, 165, 201
raise, 107, 159
return, 43, 51, 203
try, 140
while, 64
step size, 79
str function, 18
str
method, 165, 174
string, 9, 15, 95, 122
accumulator, 175
comparison, 77
empty, 95
immutable, 74
method, 75
multiline, 35, 198
operation, 14
slice, 73
triple-quoted, 35
string method, 79
string module, 127
string representation, 144, 165
string type, 9
strip method, 82, 127
structshape module, 122
structure, 5
subclass, 176
subject, 162, 169, 189
subtraction
dictionary, 131
with borrowing, 68
subtraction with borrowing, 159
sufﬁx, 133
suit, 171
sum function, 118
superclass, 176
superstitious debugging, 203
SVG, 195
Swampy, 29, 81, 153, 181, 183
swap pattern, 116
syntax, 3, 7, 161, 198
syntax error, 3, 7, 15, 197
SyntaxError, 19
Tagger, 181
temporary variable, 51, 60, 203
test case, minimal, 201
testing
and absence of bugs, 85
incremental development, 52
interactive mode, 2
is hard, 85
knowing the answer, 53
leap of faith, 57
minimal test case, 201
text
plain, 81, 127, 146, 195
random, 133
text ﬁle, 145

Index
215
Text widget, 186
Time class, 155
Tkinter, 183
token, 5, 8
traceback, 24, 26, 44, 45, 107, 200
translate method, 127
traversal, 72, 75, 77, 79, 83, 84, 93, 100, 105,
106, 118, 119, 122, 129
dictionary, 168
list, 91
traverse
dictionary, 120
triangle, 47
trigonometric function, 18
triple-quoted string, 35
True special value, 39
try statement, 140
tuple, 115, 117, 122, 123
as key in dictionary, 120, 134
assignment, 116
comparison, 121, 174
in brackets, 120
singleton, 115
slice, 116
tuple assignment, 117, 118, 123
tuple function, 115
Turing complete language, 55
Turing Thesis, 55
Turing, Alan, 55
turtle typewriter, 37
TurtleWorld, 29, 48, 181
type, 9, 15
bool, 39
dict, 103
ﬁle, 137
ﬂoat, 9
int, 9
list, 89
long, 111
set, 131
str, 9
tuple, 115
user-deﬁned, 147, 155
type checking, 58
type conversion, 17
type function, 152
type-based dispatch, 166, 167, 169
TypeError, 71, 74, 108, 116, 118, 138, 163, 200
typewriter, turtle, 37
typographical error, 135
UML, 178
UnboundLocalError, 111
underscore character, 11
uniqueness, 100
Unix command
gunzip, 143
ls, 142
update, 64, 66, 68
coordinate, 192
database, 141
global variable, 110
histogram, 129
item, 91
slice, 92
update method, 120
update operator, 93
URL, 145, 195
urllib module, 145, 195
use before def, 15, 21
user-deﬁned type, 147, 155
value, 9, 15, 95, 96, 112
default, 130
tuple, 117
ValueError, 45, 107, 116
values method, 104
variable, 10, 15
global, 110
local, 22
temporary, 51, 60, 203
updating, 64
variable-length argument tuple, 117
vector graphics, 195
veneer, 175, 179
Visual module, 169
void function, 24, 26
void method, 93
vpython module, 169
walk, directory, 140
while loop, 64
whitespace, 25, 46, 82, 144, 198
widget, 183, 193
Button, 184
Canvas, 185
Entry, 186
Frame, 188
Label, 184
Menubutton, 190
Text, 186

216
Index
widget, packing, 188
word count, 143
word frequency, 127, 136
word, reducible, 114, 125
working directory, 139
World module, 153
worst bug, 169
ever, 195
zero, index starting at, 71, 90
zip function, 118
use with dict, 120
Zipf’s law, 136

