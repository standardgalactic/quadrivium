object
©2019 MathByte Academy

The object Class
when we define a class that does not inherit from another class explicitly
à Python makes the class inherit from object implicitly
à object is a class (even though it does not use a camel case)
type(object) à type
type(Person) à type
à this means every class we create is a subclass of object
Person
Student
Teacher
object
issubclass(Student, object) à True
isinstance(s1, object)
à True
à every object, even functions, modules, …
class Person:
pass
same as
class Person(object):
pass
not needed
©2019 MathByte Academy

Implications of inheriting from object
à any class we create automatically inherits behaviors and attributes from the object class
à __name__
à __init__
à __repr__
à __hash__
and many more…
So even if we create an "empty" class:
class Person:
pass
p = Person()
p.__repr__
à <__main__.Person object at 0x106cb79e8>
p.__hash__
à -9223372036579215458
à __new__
à __eq__
p == p
à True
it will use whatever default implementation object has defined
©2019 MathByte Academy

Coding
©2019 MathByte Academy

