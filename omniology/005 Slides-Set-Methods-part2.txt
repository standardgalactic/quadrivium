Set Methods and Operations
Difference (-): returns a new set containing the difference between s1 and s2
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5} 
>>> s1.difference(s2)
{1, 2}
Master Python Programming
By Andrei Dumitrescu

Symmetric difference(^):  returns the difference of two sets and that is a  set of elements 
which are in either of the sets, but not in both.
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5}
>>> s1.symmetric_difference(s2)
{1, 2, 4, 5}
Set Methods and Operations
Master Python Programming
By Andrei Dumitrescu

Union (|)
The union of two or more sets is the set of all unique elements present in all the sets.
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5}
>>> s1.union(s2)
{1, 2, 3, 4, 5}
Set Methods and Operations
Master Python Programming
By Andrei Dumitrescu

Intersection(&)
 
 
The intersection() method returns a set that contains the elements that exist in both sets, or 
in all sets if the method is is used with more than two sets.
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5}
>>> s1.intersection(s2)
{3}
Set Methods and Operations
Master Python Programming
By Andrei Dumitrescu

●
isdisjoint() returns True if two sets are disjoint sets. If not, it returns False.
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5} 
>>> s1.isdisjoint(s2)     
False
●
There are also the <, <=, > and >= operators used for containment testing.
Set Methods and Operations
Master Python Programming
By Andrei Dumitrescu

