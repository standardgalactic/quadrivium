© 2019 MathByte Academy

Frozen Sets
à immutable sets
à same properties and behavior as sets
à except they cannot be mutated
Their elements can be mutable
If all elements in a frozen set are hashable, then the frozen set is also hashable
à can be used as a key in a dictionary
à can be an element of another set
frozenset()
à no literal expressions to create frozen sets
© 2019 MathByte Academy

Copying Frozen Sets
Think back to tuples and lists
l1 = [1, 2, 3]
l2 = list(l1)
l1 is l2 à False
t1 = (1, 2, 3)
t2 = tuple(t1)
t1 is t2 à True
à safe for Python to not make a copy of the tuple – since it is immutable
Same thing with sets and frozen sets
s1 = frozenset({1, 2, 3})
s2 = frozenset(s1)
s2 = s1.copy()
s1 is s2 à True
Deep copies do not behave that way
© 2019 MathByte Academy

Set Operations
non-mutating set operations
&
|
-
^
these operations can be performed on mixed sets and frozensets
resulting type?
à the type of the first operand
s1 & s2
à set if s1 is a set, even if s2 is a frozenset
à frozenset if s1 is a frozenset, even if s2 is a set
© 2019 MathByte Academy

Equality and Identity
Numbers
1.0 is 1 à False
1 + 0j is 1 à False
True is 1 à False
1.0 == 1 à True
1 + 0j == 1 à True
True == 1 à True
Same thing with sets and frozen sets
s1 = {1, 2, 3}
s2 = frozenset([1, 2, 3])
s1 is s2 à False
s1 == s2 à True
© 2019 MathByte Academy

Application: Memoization
In Part 1 of this series I covered memorization using decorators.
Python has a decorator available for memorization:
à https://en.wikipedia.org/wiki/Memoization
functools.lru_cache
But that decorator (and the one we wrote ourselves), has one drawback
@lru_cache
def my_func(*, a, b):
…
my_func(a=1, b=2)
à result is returned directly from cache
my_func(a=1, b=2)
à result is computed and cached
my_func(b=2, a=1)
à result is computed again, and cached
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

