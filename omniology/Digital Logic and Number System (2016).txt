Digital Logic
&
Number System

© Copyright 1994 - Silicon Media Press
All rights reserved. No part of this publication,  may
be reproduced or distributed in any form or by any
means, electronic, mechanical, photocopying,
recording or otherwise, or stored in a database or
retrieval system without the prior permission in
writing of the publisher.
Every effort has been made to supply complete and
accurate information. Silicon Media Press  does not
guarantee the accuracy or completeness of any
information and assumes no responsibility for its
use.
The export rights of this book are vested solely with
the publisher.

A digital computer performs various
computational tasks using the digital or
binary logic.  The digital logic is called
binary logic as only  two states are used.
The very idea that a two-valued number
system can possibly be the basis for the
most powerful and sophisticated
computers seems astounding, to say the
least. Everything in the digital world is
based on the binary number system and
because human logic tends to be binary
(ie. true or false, yes or no statements),
digital components that are constrained
to take discrete values are further
constrained to take only two values and
are said to be binary.
Numerically, this involves only two
symbols: 0 and 1. Logically, we can use
these symbols or we can equate them
with others according to the needs of the
moment. Thus, when dealing with digital
logic, we can specify that:
0 = false = no
1 = true = yes

Using this two-valued logic system, every
statement or condition must be either
“true” or “false;” it cannot be partly true
and partly false. While this approach may
seem limited, it actually works quite
nicely, and can be expanded to express
very 
complex 
relationships 
and
interactions among any number of
individual conditions.
One essential reason for basing logical
operations on the binary number system
is that it is easy to design simple, stable
electronic circuits that can switch back
and forth between two clearly-defined
states, with no ambiguity attached. It is
also readily possible to design and build
circuits that will remain indefinitely in
one state unless and until they are
deliberately switched to the other state.
This makes it possible to construct a
machine (the computer) which can
remember sequences of events and adjust
its behavior accordingly.
These states in the computer are
represented by two digits: 0 and 1- called
binary digit. A binary digit is called a bit.

Data or Information is represented in
groups of bits. Using various coding
technique, bits (0 and 1) are made to
represent not only binary numbers but
also any other discrete symbols, such as
decimal digits or letters of the alphabet.
These letters and digits are used to develop
complete sets of instructions for
performing various types of computations.
The number system, that we used in daily
life is decimal number system, which
employ the base 10, whereas  binary
numbers use a base 2 system. This means,
that any number in the decimal number
system is represented using the base 10
raised to an integer power. Whereas, in
binary number system, the any number
is represented using the base 2 raised to
an integer power.
For example, the decimal number 33 is
represented as follows:
3 x 101 + 3 x 100= 33
whereas, the binary number 100001
represents a quantity that can be
converted to a decimal number by

multiplying each bit by the base 2 raised
to an integer power as follows :
1x 25+0 x 24 +0 x 23  + 0 x 22 + 0 x 21 +
1 x 20= 33
The six bits 100001 represent a binary
number whose decimal equivalent is 33.
Similarly, other group of bits represent
various characters in digital computer
system. This is similar to the concept
than the same letters of an alphabet are
used to construct different languages,
such as English and French, but here we
are limited to use only two characters - 0
and 1.
In computer or other digital machines,
the binary numbers are represented by
physical quantities like voltage. The
machine may be designed to accept 1
value - say for high voltage and 0 value for
low voltage. This way, a series of 0 and 1
signals are actually transmitted using
high and low voltage. Now these signals
are combined with certain conditions to
get the required output. These conditions
are called binary logic. It will be discussed
in more detail in coming section.

There are two basic type of data which are
stored and processed by computers;
namely characters and numbers.
Characters include letters and special
symbols. For example, computers may be
programmed to read a lot of names, sort
them in alphabetical order and print the
sorted list.
The other type of data are decimal
numbers such as 1234, 489, 1569 etc.
Numbers are processed using arithmetic
operations such as add, subtract, multiply
and divide. In this case we assign values
to numbers and the processing results in
new values.
DECIMAL NUMBER SYSTEM
The number system used almost
universally by humans is called DECIMAL
SYSTEM. It is so firmly ingrained in our
minds from early childhood that we use it
correctly without even pausing to
understand the system of numbers. The
decimal number system is a number
system which has a base (or radix) of 10.

In decimal system we have 10 symbols (0
to 9).
It must be noted that all positional number
systems have the highest numerical
symbol having a value one less than the
base (or radix) i.e. In Decimal number
system we have 10 symbols (0 to 9). In
octal number system, which has a base of
8 will have 8 symbols (0 to 7) and in
binary system with base 2 we will have
only 2 symbols (0 and 1).
Any number can be represented by
arranging symbols in various positions.
You know that in the decimal system the
successive positions to the left of the
decimal point represents units, tens,
hundreds, thousands etc. It is very likely
that you have not given a thought to the
fact that each position represents a
specific power of the base. For example
the decimal number 45987 represents:
(4x104)+ (5x103) + (9x102) + (8x101)+(7x100)
40000 + 5000 + 900 + 80 + 7 =  45,987
This procedure can be done more
figuratively and hence easier to
comprehend, in the following way :

4x104 = 40000
5x103 =   5000
9x102 =     900
8x101 =       80
7x100 =         7
             45987
[Remember that any number raised to the
power zero is 1 i.e. n0 = 1, 20 = 1, 1000 = 1]
From this example it should be clear that
the left most digit in a number in the Most
Significant Digit (MSD). It is 4 in our
example. The right most digit, namely 7,
is the Least Significant Digit (LSD). The
power of 10 in the fifth digit is 4, in the
forth digit it is 3, in the third digit it is 2
and so on.  That is, the power of 10 in the
nth digit is (n-1).
Now, we will illustrate the decimal fraction
by an example, let the decimal fraction be
0.76853. This decimal fraction can be
interpreted as follows :
2x10-5 = 0.00002
5x10-4 = 0.0005
8x10-3 = 0.008
6x10-2 = 0.06
7x10-1 = 0.7
             0.76852

Let us examine a real decimal number to
sum up this discussion. Let the number
is 95.85
9x101 =   90
5x100 =     5
8x10-1 =     0.8
5x10-2=     0.05
Addition gives  95.85
BINARY NUMBER SYSTEM
Electrical devices generally have two
stable states. Physically, it could be
compared with and quantity like volatage
or current. For example, either they are
passing current (that is are ON or are in
State 1)  or not passing current (that is
are OFF or are in State 0). This fact is kept
in mind using a binary system of number.
Binary system also simplifies the design
of magnetic particles on storage devices
which are either magnetized (are in State
1) or are not magnetized (are in State 0).
When we count in decimal system, we
start counting from 0 up to 9, which are
the basic ten digits. Next number is
desired by using the second digit of this
system as basic numeral i.e. 1 and writing

first digit after this i.e. 0.  So the next
number in the order is 10. Here we have
carried 1 in front of the first basic digit 0.
This series is thus written by prefixing 1
to all basic digits i.e. 10, 11, 12, 13, ....
up to 19.  Then we use 2 prior to all basic
digits and form next series like 21, 22,
23, ..... up to 20.
The binary system uses only two basic
digits i.e. 0 and 1, while counting we start
off 0 and then 1. After this we have to
come 1 into next column and put 0 in the
unit’s column.  So after 1, we have 10
counting up from 0, we got 0, 1, 10, 11,
100, 1101, 111, 1000 etc.
The table shows the binary equivalents of
decimal numbers.
Decimal
Binary
0
0000
1
0001
2
0010
3
0011
4
0100
5
0101
6
0110
7
0111
8
1000

9
1001
10
1010
11
1011
12
1100
13
1101
14
1110
15
1111
In binary system there are  only 2 digits
and the system is based on 2. So each
number of this system has got a value 2
times (twice) that of the digit just right to
it. As we have seen in case of decimal, the
place value gets multiplied by 10,
everytime we shift to a digit on left hand
side. This means first digit has a place
value of 10, second digit has got a value
of 100, then 1000 and so on.  Similarly in
case of binary system first digit has got a
value of 1, second has got a value of 2,
third 4, fourth 8.  For instance binary
number 1011 means :
1*20
=
1
1*21
=
2
0*22
=
0
1*23
=
8
Adding         11

Conversion from Decimal to Binary
For Converting decimal to binary, we have
to successively divide the decimal number
by two, until it is reduced to 0. When on
division by two,  there is a remainder of
one, this becomes a binary digit 1. And if
there is no remainder it becomes a binary
0.
To convert decimal number 19 into binary.
19/2 =
9
remainder
1
  9/2 =
4
remainder
1
  4/2 =
2
remainder
0
  2/2 =
1
remainder
0
  1/2 =
0
remainder
1
Now reverse the order of digits in
remainders to get the binary number.
So the binary equivalent is 10011.
Hence (19)2 = (10011)2
Example
Convert decimal 252 to binary.
252/2
=
126
remainder is 0
126/2
=
63
remainder is 0
63/2
=
31
remainder is 1
31/2
=
15
remainder is 1

15/2
=
7
remiander is 1
7/2
=
3
remainder is 1
3/2
=
1
remainder is 1
1/2
=
0
remainder is 1
So the binary equivalent of 252 is
11111100.
Conversion from Decimal Fraction to
Binary Fraction
To convert a decimal fraction to its binary
equivalent we use the technique of
successive multiplication by 2.
The integer part is noted down after the
multiplication by 2 at each stage and the
remainder new fraction is used for the
multiplication by 2 at the next stage.
The following example illustrate the
procedure.
Example
Convert decimal fraction 0.8125 to its
equivalent binary fraction.
Fraction Fraction x 2 Remainder Integer
New Fraction
0.8125
1.625
0.625
1 (MSB)
0.625
1.25
0.25
1

0.25
0.50
0.5
0
0.50
1.00
0.0
1 (LSB)
(0.8125)10   =   (0.1101)2
Example
Convert the decimal fraction 0.635 into
its binary equivalent :
Fraction Fractionx2 Remainder Integer
New Fraction
0.635
1.27
0.27
1  (MSB)
0.27
0.54
0.54
0
0.54
1.08
0.08
1
0.08
0.16
0.16
0
0.16
0.32
0.32
0
0.32
0.64
0.64
0
0.634
1.28
0.28
1 (LSB)
It is obvious from the above example that
the remainder new fraction does  not
become 
zero 
even 
after 
seven
multiplications. The process continues
further.  For such a case an approximation
is made. For such cases, we may take the
result up to 6 binary bits after the binary
point.
Hence (0.635)10 = (0.1010001)2

Conversion from Binary to Decimal
Just as powers of 10 are important in the
decimal number system of enumeration
powers of 2 are important in binary
number system. We thus give the following
table for the powers of 2 and their decimal
equivalents. The abbreviation K stand for
1024 which is approximately 1000, a kilo.
Thus 
the 
notation 
16K 
means
16x1024=16384. The abbreviation M
stand for Mega i.e. 1024x1024=1048576.
Power of Decimal
Abbreviation
2
Equivalent
20
1
21
2
22
4
23
8
24
16
25
32
26
64
27
128
28
256
29
512
210
1024
K
211
2048
2K
212
4096
4K
213
8192
8K

214
16384
16K
215
32768
32K
216
65536
64K
217
131072
128K
218
262144
256K
219
524288
512K
220
1048576
1M
221
2097152
2M
The decimal value of a binary expression
is equal to decimal values of the binary
digits. However, the method shall be
further clear from the following  example
Example
Convert binary number 110110 into
decimal system :
Binary 1
1
0
1
1
0
Number
Binary 32(25)
16(24) 8(23)
4(22)
2(21)   1(20)
place value
Multiply & Add for getting decimal
equivalent
32   + 16  +
0   +
4   +
2   + 0  =  54
Hence  (110110)2 = (54)10

Example
Convert the binary number 11111100
into decimal number system :
Binary Number
1
1
1
1
1
1
0
0
Binary Place Value
128 64
32
16
8
4
2
1
Decimal equivalent
128+ 64 +32   +16  +8   +4   +0   +0
= 252
Hence (11111100)2 = (252)10
Conversion from Binary fraction to
Decimal fraction
In the decimal number system the weights
of the digits in 0.635 which lie after the
decimal point are represented as :
0.635 = 0.6 + 0.03 + 0.005
= 6 x 1  + 3 x   1 + 5 x    1
    10         100
1000
= 6 x 10-1  + 3 x 10-2 + 5 x 10-3
Similarly in the binary number system
the weights of the binary bits in a binary
number 0.1104, which lie after the binary
point, can be expressed as:

0.1101
= 1x2-1 + 1x2-2 + 0x2-3 + 1x2-4
= 1x1/2 + 1x1/4 + 0x1/8 + 1x1/16
= 0.5 + 0.25 + 0.0625
       (0.1101)2 =   (0.8125)10
Example
Convert the binary fraction 0.10110 to its
equivalent decimal fraction.
0.10110 = 1x2-1+0x2-2+1x-3+1x2-4+0x-5
= 1x1/2+1x1/4+1x1/8+1x1/16
    +1 x1/32
= 0.5 + 0.125 + 0.0625 + 0
Hence (0.10110)2
= (0.5775)10
OCTAL NUMBER SYSTEM
The base of the octal number system is 8.
It uses eight digits 0, 1, 2, 3, 4, 5, 6 and
7. The next numbers after 7 in octal
number will be 10, 11, 12, 13, 14.........
As 8 = 23,  an octal number is represented
by a group of three binary bits. For
example four is represented by 100, 6 by
110 and 7 by 111. If an octal number
contains two or more digits, then each
digit is individually represented by a group
of three binary bits.

For example 46 to the base 8 is
represented by 100, 110 and 3548 by 011
101 100. Table shows octal numbers and
their binary representations.
Conversion of Octal Number to Decimal
Number
For conversion of a number from any
number system to decimal number system
we make the use of the following well
known expression :
The weight of the nth digit of the number
from the right hand side.
= nth digit x (Base)n-1
Example
Convert the Octal number 578 to its
equivalent decimal number. As the base
of the Octal number system is 8, applying
the general rule of conversion, we get.
(57)8
=
5 x 81 + 7 x 80
=
40 + 7
(57)8
=
(47)10
Example
Convert the octal number 365 to its
decimal equivalent :

(365)8
=
3 x 82 + 6 x 81 + 5 x 80
=
3 x 64 + 6 x 8 + 5 + 1
=
192 + 48 + 5
=
(245)10
Conversion of a Octal Fraction to a Decimal
Fraction
In the Octal system the weight of the octal
digits after the octal point are 8-1, 8-2 etc.
Thus (0.563)8 = 5 x 8-1 + 6 x 8-2 + 3 x 8-3
= 0.625 + 0.09375
+ 0.005859375
= (0.724609375)10
Conversion of a Decimal Number to Octal
Number
For the conversion of a decimal number
to an equivalent octal number the
technique of repeated division by 8 is
used.  This is explained in the following
examples :
Example
Convert the decimal number 63 to its
equivalent octal number :
Quotient
Remainder
63/8
=  7
7
(LSB)
7/8
=  0
7
(MSB)

Hence
(63)10 =  (77)8
Example
Convert the decimal number 957 to its
equivalent octal number.
Quotient
Remainder
957/8
=  119
5
(LSB)
119/8
=  14
7
4/8
=  1
6
1/8
=  0
1
(MSB)
(957)10  =   (1675)8
You can check the result as shown below:
(1675)8
= 1x83 + 6x82 + 7x81 + 5x80
 = 512 + 384 + 56 + 5
 = (957)10
Conversion of a Decimal Fraction to octal
fraction
For the conversion of a decimal fraction
to its equivalent octal fraction the
technique of repeated multiplication by 8
is used. The integer part is noted down
and the new remainder fraction is used
for the multiplication at the next stage.

Example
Convert the decimal fraction 0.96 to its
equivalent octal fraction.
Fraction Fraction x 8 Remainder
New
Fraction
Integer
0.96
7.68
0.68
7
(MSB)
0.68
5.44
0.44
5
0.44
3.52
0.52
3
0.52
4.16
0.16
4
0.16
1.28
0.28
1
(LSB)
This process will continue further, so we
may take the result up to 5 places of octal
point.
(0.96)10
 = (0.75341)8
Conversion of Binary Number to Octal
Number
The octal number system is a base-8
system. As 23 = 8, for binary, to octal
conversion, groups of 3 binary bits each
are formed in the binary number, After
forming the groups, each group of three
binary bits is converted to its octal
equivalent.

Example
Convert the binary number (101111)2 to
its equivalent octal number.
We form groups of 3 bits each of the
binary number from right to left thus.
101111
=
(101) (111)
(101111)2
=
(57)8
Example
Convert the binary real number to its
equivalent octal number 1010.1101 In
the integer part of the binary number the
group of 3 bits is formed from right to left.
In the binary fraction, the group of 3 bits
is formed from left to right. Thus -
(1010.1101)2
=  (1) (010).(110) (1)
Converting them into groups of 3.
=  (12.61)8
Conversion of Octal Number to Binary
Number
To convert an octal number to its
equivalent binary number each digit of
the given octal number is converted to its
3 bits binary equivalent. This thing will
be more clear from the following examples:

Example
Convert the octal number 375 to its
equivalent binary number :
(375)8
=  (011) (111)
(101)
=  (011111101)2
Example
Convert the real octal number 56.35 to
its equivalent binary number :
(56.35)8 =  (101) (110).(011) (101)
=  (101110.011101)2
HEXADECIMAL NUMBER SYSTEM
The hexadecimal number system has the
radix (base as 16). Its digits are from 0 to
9 and A to F. Thus in hexadecimal number
system, decimal number 10 is represented
by A, 11 by B, 12 by C, 13 by D, 14 by E
and 15 by F. The decimal number 16 is
represent to as 10 and 17 by 11 in
hexadecimal number system.
A hexadecimal digit is represented by
four binary bits. For example, the number
5 is represented by 0, 101 hexadecimal
equivalent. The digit A of hexadecimal is
1010 in 4 bit, binary representation.

If a hexadecimal number consists of two
or more than two digits, each digit is
individually represented by four binary
bits. For example 86 in hexadecimal is
represented by 1000 0110. Table shows,
hexadecimal numbers and their binary
representations. 
The 
binary
representation of a hexadecimal number
is also called binary coded hexadecimal
number.
Decimal Hexadecimal Binary Coded
Number Number
Hexadecimal Number
0
0
0000
1
1
0001
2
2
0010
3
3
0011
4
4
0100
5
5
0101
6
6
0110
7
7
0111
8
8
1000
9
9
1001
10
A
1010
11
B
1011
12
C
1100
13
D
1101
14
E
1110

15
F
1111
16
10
00010000
17
11
00010001
43
2B
00101011
255
FF
11111111
Conversion of Hexadecimal to Decimal
For converting any number from any
number system to decimal number system
we make use of the following well known
expression.
The weight of the digit of the number from
the right hand side.
= nth digit x (Base)n-1
Example
Convert the hexadecimal number (1A) 16
to its equivalent decimal number
(1A)  = 1x161 + Ax160
= 1X16 + 10X1 = 26
(1A)16 = (26)10
Example
Convert the hexadecimal number (BDF6)
16 to its equivalent decimal number.
BDF6
= Bx163 + Dx162 + Fx161 + 6x160
3210
= 11x163 + 13x162 + 15x161 + 6x10

= 11 x 4096 + 13 x 256 + 15 x 16 + 6
= (23630)
Hence
(BDF6)16 = (48630)10
Conversion from Decimal to Hexadecimal
The procedure is similar to the other
number systems. The number is converted
by successive division by 16 and noting
down the remainders. The remainders
one in decimal value and hence eventually
be converted into the hex equivalent before
reporting. The numbers formed are
reversed in their digital order as shown
diagrammatically below :
Example
Convert the decimal number 1046 into
equivalent hexadecimal :
Quotient
Remainder
1046/1665
6
s
65/16
4
1
4/16
0
4
Hence (1046)10 = (416)16
Conversion from Decimal fraction to
Hexadecimal fraction
The fractional part is multiplied by 16
successively till the fractional portion is

reduced zero. The second and other
successive multiplications are performed
only on the fractional portion of the
product obtained in the previous
operation.
Example
Convert 
decimal 
0.96875 
into
hexadecimal number system.
Fraction Fractionx16 RemainderNew
Fraction
 Integer
0.96875 15.5000
0.5000
15
0.5000
 0.0000
0.0000
  8
Hence (0.96875) = (15) (8) = (F8)16
Conversion from Octal Number System to
Hexadecimal Number System
The conversion of Octal number to its
equivalent hexadecimal number is done
through binary conversion as illustrated
by the following example :
Example
Convert the octal number 535 to its
equivalent hexadecimal number. First
converting (535)8 to its equivalent binary
number.
535
 =
 (101) (011) (101)

 =
 (101011101)2
Now forming the group of 4 binary bits to
obtain its hexadecimal equivalent.
(101011101)2   = (1) (0101) (1101)
  = (0001) (0101) (1101)
   = (15D)16
Example
Convert the real Octal number 67.56 to
its equivalent hexadecimal number.
Converting (67.56)8 first to its binary
equivalent we get.
(67.56)8 = (110) (111) . (101) (110)
= (110111.101110)2
Now forming the groups of 4 binary bits to
obtain its hexadecimal equivalent.  We
have,
(110111.101110)2 = (11) (0111) . (1011) (10)
 = (011) (0111) . (1011) (1000)
(110111.101110)2 = (37.B8)16
Conversion from hexadecimal number to
octal number
The conversion of a hexadecimal number
to octal number is also done through
binary conversion as illustrated below :-

Example
Convert the hexadecimal number 3DF to
its equivalent octal number.
The hexadecimal number 4EF is first
converted to its binary equivalent.
(4EF)16
  =  (0100) (1110) (1111)
  =  (010011101111)2
This binary equivalent is divided into
groups of 3 bits to obtain its octal
equivalent.
(010011101111) =  (010) (011) (101) (111)
   =  (2357)8
Example
Convert the real hexadecimal number
(6A.2B)16 to its equivalent octal number.
The number (6A.2B) is first converted to
its binary equivalent.
(6A.2B)16=  (0110) (1010) . (0010) (1011)
=  (01101010.00101011)2
Now forming the groups of 3 binary bits to
obtain its octal equivalent, we get.
(01101010.00101011)2
=  (001) (101) (010) . (001) (010) (110)
=  (152.126)8

BINARY ADDITION
We will see in this section, how to add
binary numbers. Counting is a form of
addition since successive numbers are
obtained by adding 1. In the decimal
number system we start with 0 and by
successively adding 1, we reach 9. As the
base of the system is 10, there are no
further symbols. Thus, after 9 we count
10. The 1 becomes a carry to the tens
positional system. In the binary system,
the count progress as follows:
0, 1, 10, 11, 100, 101 ...............
When we add two binary numbers, we
write the numbers one below the other
with their least significant bits (LSB’s)
aligned. If the numbers have fractional
parts, then the binary points must be
aligned.
When we add, we, start with the least
significant bit. Depending upon the valves
‘a’ and ‘b’ of the bits to be added, we will
have a sum and may have a carry to the
next stage of addition. There are four

possible combinations in which ‘a’ and
‘b’.
a
b
sum
carry
0
0
0
0
0
1
1
0
1
0
1
0
1
1
0
1
i.e. 1+1 = 0, with a carry of 1 to the next
column on the left hand side. And also:
1+1+1 = 1 with a carry of 1. Using only the
above rules we are able to do binary
addition.
Example
Add (11)2 to (01)2
Carry
   1 1
Augent
   1 1
Addend
   0 1
1 0 0
Example
Compute the binary sum of 11011011
and 1001110 :
Carry      1 1111
Augent
11011011
Addend
1001110
100101001

We can add more than two binary numbers
by accumerlating them to running total
one at a time. For example, the sum of
numbers
11101, 1010, 1100, 1010, 1101 is
obtained as follows :
11
Carry over
11101
First number
+
10110
Second number.
110011
     First Partial Sum
110011
First partial sum
+
001100
Third number
111111
Second Partial Sum
1111
111111
    Second partial sum
+
011010
Fourth number.
111001
   Third partial sum
11   1
111001
Third Partial Sum
+
011001
Fifth Number
    1000110
    Final Sum
We do not use the same technique as with
decimal numbers, since the exorbitant
amount of carrying will cause errors.

BINARY SUBTRACTION
Recall that in decimal subtraction we
subtract a decimal digit by borrowing 1
from the next column. For example, the
decimal difference between 79926 and
7985 is obtained as follows :
10100
Borrowed by the previous column
to the right.
79926
  7985
71941
Binary subtraction can be accomplished
similarly, if we remember the following
subtraction identities :
a
b
Difference Borrow
0
0
0
0
1
0
1
0
1
1
0
0
0
1
1
1
Consider carefully the following examples:
Example
Compute the binary subtraction from
1111011 to 101001.
Here there is no borrowing.

1111011
  101001
1010010
Example
Compute the binary subtraction from
111101 to 10010.
Here we borrow 1 from the third column
because of the difference 0-1in the second
column.
111101
  10010
101011
Now, what happen if we cannot borrow 1
from the next column because the column
contains a 0 ? First we look at what
happens in decimal subtraction. The
decimal difference between 800046 and
397361 is obtained as follows :
7999
Status of the last four digits
due to borrowing
800046 by the second column to the
right.
397261
402785

Observe that we borrowed 1 from the
sixth column for the second column, since
the third, fourth and fifth columns
contained zeros. After the borrowing, the
third, fourth, and fifth columns contain.
10 - 1 = 9
Now the same thing happens in binary
subtraction, except that after the
borrowing the Zero column contain.
10 - 1 = 01
For example, the binary difference of
110001 and 1010 is obtained as follows:
  01110 Borrowed by the previous
column to the right.
110001
001010
100111
COMPLEMENTS
For a number which has n digits in it, a
complement is defined as the difference
between the number and the base raised
to the nth power and the base raised to
the nth power minus 1.
Complements are used in digital
computers for simplifying the subtraction

operation and for logical manipulations.
There are two types of complements for
each base or system.
i)
the r’s complement.
ii)
the (r-1)’s complement.
When the valve of the base is substituted,
the two types receive the names, 2’s and
1’s complement for binary numbers, or
10’s and 9’s complement for decimal
numbers.
The r’s Complement
Given a positive number N in base r with
an integer part of n digits, the r’s
complement of N is defined as rn-N for N
# 0 and 0 for N = 0. The following numerical
example will help clarify the definition.
The 10’s complement of (52520)10 is 105 -
52520 = 47580.
The number of digits in the number is n=5
The 10’s complement of (0.3267)10 is 1 -
0.3267 = 0.6733
No integer part, so 10n = 100 = 1.
The 10’s complement of (25.639)10 is 102
- 25.639 = 74.361.

The 2’s complement of (101100)2 is (26)10
- (101100)2
=
(1000000 - 101100)2
=
010100
The 2’s complement of (0.0110)2 is (1 -
0.0110)2
=
0.1010
From the definition and the examples, it
is clear that the 10’s complement of a
decimal number can be formed by leaving
all least significant zeros unchanged,
subtracting the first non zero least
significant digit from 10, and then
subtracting all other higher significant
digits from 9. The 2’s complement can be
formed by leaving all least significant
zeros and the first non zero digits
unchanged, and then replacing 1’s by 0’s
by 1’s in all other higher significant digits.
The (r-1)’s complement
Given a positive number N in base r with
an integer part of n digits and a fraction
part of m digits, the (r-1)’s complement of
N is defined as rn-r-m-N. Some numerical
examples follows :

The 9’s complement of (52520)10 is (105 -
1 - 52520)
= (99999 - 52520) = 47479.
No fraction part, so 10-m = 100 =1
The 9’s complement of (0.3267)10 is (1 -
10-4 - 0.3267)
= (0.9999 - 0.3267) = 0.6732
No integer part so 10n = 100 = 1.
The 9’s complement of (25.639)10 is (102 -
10-3 - 25.639)
= 99.999 - 25.639 = 74360
The 1’s complement of (101100)2 is (26 -1)
- (101100)
= (111111 - 101100)2
= 010011
The 1’s complement of (0.0110)2 is (1 - 2-
4)10 - (0.0110)2
= (0.1111 - 0.0110)
=  0.1001
From the examples, we see that 9’s
complement of a decimal number is
formed simply by subtracting every digit
from 9. The 1’s complement of a binary

number, is even simpler to form  the 1’s
are changed to 0’s and 0’s to 1’s. Since
the (r-1)’s complement is very easily
obtained, it is sometimes convenient to
use it when the r’s complement is desired.
From the definitions and from a
comparison of the results obtained in the
examples, it follows that the r’s
complement can be obtained from (r-1)’s
complement after the addition of r-m to
the least significant digit. For example
the 2’s complement of 10110100 is
obtained from the 1’s complement
01101011 by adding 1 to give 01001100.
It is worth mentioning that the
complement of the complement restores
the number to its original valve. The r’s
complement of N is r n - N and the
complement of (rn - N) is rn - (rn - N)=N ; and
similarly for the 1’s complement.
Subtraction with r’s complements
In this method, we borrow a 1 from a
higher significant position when the
minuend digit is smaller than the
corresponding subtrahend digit. When
subtraction is implemented by means of

digital components, this method is found
to be less efficient than the method that
uses complements and addition as stated
below.
The subtraction of two positive numbers
(M-N), both of base r, may be done as
follows :

Add the minuend M to the r’s
complement of subtrahend N.

Inspect the result obtained in step
1 for an end carry.
(a)
If an end carry occurs, discard
it.
(b)
If an end carry does not occur,
take the r’s complement of
the number obtained in step
1 and place a negative sign in
front.
The following examples illustrate the
procedure :
Example
Using 10’s complement, subtract 72532 -
3250
M = 72532
N = 03250

10’s complement of N = 96750
72532
 +
96750
end carry   1. 69282
Answer  = 69282
Example
Subtract (3250 - 72532)10
M = 03250
N = 72532
10’s complement of N = 27468
03250
+  27468
30718
No Carry
Answer
= - 69282
= - (10’s complement of 30718).
The binary subtraction using 2’s
complementary method is performed
using the following three steps :
Step 1
Find the 2’s complement of
the 
number 
you 
are
subtracting (subtrahend)
Step 2
Add this to the number from
which you are taking away
(minuend)

Step 3
If there is a carry 1, discard it
to obtain the result; if there is
no carry, take 2’s complement
of a sum and attach a negative
sign to obtain the result.
Example
Subtract 0111000 (or decimal 56) from
1011100 
(or 
decimal 
92) 
using
complementary method.
2’s complement of 0111000 = 1001000.
Hence, we add the numbers. 1011100 (or
decimal 92) to the 2’s complement of
0111000 (or decimal 56) as stated in the
step 2.
Therefore   1011100
 + 1001000
(2’s complement of 01110000)
   10100100
Carry discarded
Result = 0100100 (or decimal 36)
Example
Subtract 100011 (or decimal 35)( from
010010 
(or 
decimal 
18) 
using
complementary method.

2’s complement of 100011 = 011101,
therefore,
010010
       +011101 (2’s complement of 100011)
101111
Since there is no carry, we will take 2’s
complement of the sum and place a -ve
sign before the result.
Hence Result =  - 010001 (or decimal 17)
Example
Subtract 01110 from 10101 using 2’s
complementary method.
2’s complement of 01110 = 10010
Hence
10101
10010
Add          100111
Carry Discarded.
Answer = 0111 (decimal 7)
The BCD codes are used to represent a
decimal number where in a decimal
number is represented by four binary
bits. For example, 3x10 [i.e. 3 to the base
10] is represented by 0011 in Binary

coded Decimal. If a decimal number
consists of  two or more digits, then each
digit of the decimal number is individually
represented by its 4-bit binary equivalent.
For example, 56x10 [i.e. 56 to the base
10] is represented by 01010110, in BCD
code.
Difference between BCD Codes & Binary
Equivalent
Numbers are usually represented by some
sort of binary codes. There is a difference
between a binary equivalent of a decimal
number and the binary code of a decimal
number. For example, the binary
equivalent of the decimal number 43x10
is 101011x2, but it is represented in BCD
code as 01000011.
Uses of BCD Codes
BCD codes are used where the decimal
information is directly [in coded form]
transferred into or out of a digital system.
Electronic calculators, digital voltmeters,
frequency counters, electronic counters,
digital clocks etc. work with BCD
numbers. BCD codes have also been used
in early computers. Modern computers

Character
EBCDIC   Code         Hexadecimal
Zone
Digit      Equivalent
A
1100
0001
C1
B
1100
0010
C2
C
1100
0011
C3
D
1100
0100
C4
E
1100
0101
C5
F
1100
0110
C6
G
1100
0111
C7
H
1100
1000
C8
I
1100
1001
C9
J
1101
0001
D1
K
1101
0010
D2
L
1101
0011
D3
M
1101
0100
D4
N
1101
0101
D5
O
1101
0110
D6
P
1101
0111
D7
Q
1101
1000
D8
R
1101
1001
D9
S
1110
0010
E2
T
1110
0011
E3
U
1110
0100
E4
V
1110
0101
E5
W
1110
0110
E6
X
1110
0111
E7
Y
1110
1000
E8
Z
1110
1001
E9
1
1111
0000
F0
2
1111
0001
F1
3
1111
0010
F2
4
1111
0011
F3
5
1111
0100
F4
6
1111
0101
F5
7
1111
0110
F6
8
1111
0111
F7
9
1111
1000
F8
0
1111
1001
F9
TABLE A : Numeric & Alphabatic Characters in EBCDIC
Notation

TABLE B : Numeric & Alphabatic Characters in ASCII-7
Notation
Character
EBCDIC   Code         Hexadecimal
Zone
Digit      Equivalent
0
011
0000
30
1
011
0001
31
2
011
0010
32
3
011
0011
33
4
011
0100
34
5
011
0101
35
6
011
0110
36
7
011
0111
37
8
011
1000
38
9
011
1001
39
A
100
0001
41
B
100
0010
42
C
100
0011
43
D
100
0100
44
E
100
0101
45
F
100
0110
46
G
100
0111
47
H
100
1000
48
I
100
1001
49
J
100
1010
4A
K
100
1011
4B
L
100
1100
4C
M
100
1101
4D
N
100
1110
4E
O
100
1111
4F
P
101
0000
50
Q
101
0001
51
R
101
0010
52
S
101
0011
53
T
101
0100
54
U
101
0101
55
V
101
0110
56
W
101
0111
57
X
101
1000
58
Y
101
1001
59
Z
101
1010
5A

TABLE D : Numeric & Alphabatic Characters in ASCII-8
Notation
Character
ASCII-8   Code         Hexadecimal
Zone
Digit      Equivalent
0
0101
0000
50
1
0101
0001
51
2
0101
0010
52
3
0101
0011
53
4
0101
0100
54
5
0101
0101
55
6
0101
0110
56
7
0101
0111
57
8
0101
1000
58
9
0101
1001
59
A
1010
0001
A1
B
1010
0010
A2
C
1010
0011
A3
D
1010
0100
A4
E
1010
0101
A5
F
1010
0110
A6
G
1010
0111
A7
H
1010
1000
A8
I
1010
1001
A9
J
1010
1010
AA
K
1010
1011
AB
L
1010
1100
AC
M
1010
1101
AD
N
1010
1110
AE
O
1010
1111
AF
P
1011
0000
B0
Q
1011
0001
B1
R
1011
0010
B2
S
1011
0011
B3
T
1011
0100
B4
U
1011
0101
B5
V
1011
0110
B6
W
1011
0111
B7
X
1011
1000
B8
Y
1011
1001
B9
Z
1011
1010
BA

do not use BCD numbers as they have to
process names and other non- numeric
data.
EBCDIC CODE
The major problem with BCD code is that
only 64 [26] different characters can be
represented in it. This is not sufficient for
providing decimal numbers [10], lower
case letters  [26], capital letters [26], and
a fairly large number of other special
characters [28+].
Hence, the BCD code was extended from
a 6-bit code to an 8-bit code. The resulting
code is called the extended binary-coded
decimal interchange code [EBCDIC]. In
this code, it is possible to represent 256
[28] different characters instead of 64 in
BCD code [26]. In addition to the various
character requirements mentioned above,
this also allows a large variety of printable
characters and several non-printable
control characters. The control characters
are used to control such activities as
printer vertical spacing, movement of
cursor on the terminal screen, etc. All of
the 256 bit combinations have not yet
been assigned characters, so the code

can still grow as new requirements
develop.
Because EBCDIC is an 8-bit code, it can
be easily divided into two 4 bit groups.
Each of these 4-bit groups can be
represented by 1 hexadecimal digit. Thus,
hexadecimal number system is used as
shortcut notation for memory dump by
computers that use EBCDIC for internal
representation of characters. This results
in a one-to-four reduction in the volume
of memory dump.
ASCII CODE
American Standard Code for Information
Interchange [ASCII] has been adopted by
several 
American 
computer
manufacturers as their computers'
internal code. This code is popular in
data communications, and is used almost
exclusively to represent data internally
in microcomputers.
ASCII is of two types : ASCII-7 AND ASCII-
8. ASCII-7 is a 7 bit code that allows 128
[27] different characters. The first 3 bits
are used as zone bits and the last 4 bits
indicate the digit. Microcomputers using

8-bit byte [group of 8 bits for one byte]
use the 7 bit ASCII by leaving the left
most first bit of each byte as a zero.
ASCII-8 is an extended version of ASCII-
7. It is an 8-bit code that allows 256 [28]
different characters rather than 128. The
additional bit is added to the zone bits.
Table C shows the alphabetic and numeric
characters in ASCII-8 notation. Observe
that other than the zone-value differences,
ASCII-7 and ASCII-8 are identical. ASCII
also uses hexadecimal as its four-to-one
shortcut notation for memory dump.

1.
Answer true or false
i.
The word ‘bit’ is contraction of the
word ‘binary digits’.
ii.
All binary numbers consist of a
string of ‘1’s & ‘0’s.
iii.
The number, 111 2 is read as one
hundred and eleven.
iv.
In the number 1010 2 each 1 has
the same weightage.
v.
In binary system, the place value of
a digit increases or decreases by
power of 2.
vi.
In the hexa decimal number system
each digit represents four bits.
vii.
A byte is the smallest addressable
unit of storage.
viii.
Shifting a binary number by one bit
to its right effectively multiplies the
number by 2.
2.
Fill in the blanks with appropriate
words -
i.
1 kilobyte equals _______ bytes.
ii.
Representing input data by the
standard abbreviation is called data
______.

iii.
The set of characters including 26
alphabets and ten numerals is called
________.
iv.
Data is the name given to basic
_______ on which the computer
works.
v.
A byte consist of ______bit.
vi.
Properly-arranged data is called
__________.
vii.
Collecting the data and converting
it into information is called
_________.
viii.
A nibble is a string of _______ bits.
ix.
Information to be processed by a
computer is called _________.
x.
The binary equivalent of decimal
number 13 is ___________.
xi.
The decimal equivalent of binary
number 10110101 is _________.
xii.
The hexa decimal digit A, C and F
are equivalent to _______, _______
and
________ in the decimal
system.
xiii.
The binary number 1001 is
equivalent to hexa decimal ________.
xiv.
The decimal number 127 is equal to
the hexa decimal __________.

xv.
In a hexa decimal system, the
number after 19 is _____________.
3.
Define the term ‘byte’. What is the
difference between a bit and a byte?
4.
Give the full form of the following
abbreviations : BCD, EBCDIC,
ASCII.
5.
Why is the binary system used in
the computers ?
6.
What are the octal and hexa decimal
number systems ? How are binary
digits converted to octal or hexa
decimal? Why are binary digits
converted to octal or hexa decimal?

NUMERICAL QUESTIONS
7.
Convert the following binary
numbers into the decimal system :
(a) 1101101, (b) 10101110, (c)
1011011011.
8.
Convert each decimal number into
the binary system :
(a) 237, (b) 359, (c) 875.
9.
Convert the following decimal
numbers to binary :
(1) 18, (2) 26, (3) 44, (4) 50, (5) 111,
(6) 173
(7) 196, (8) 236, (9) 298, (10) 331,
(11) 382, (12) 515
10.
Convert the numbers of question 9
into octal base and hexadecimal
system.
11.
Convert following hexadecimal
numbers into decimal system.
(a) 1EB, (b) 1B0 , (c) 148, (d) E4, (e)
8B
12.
Convert following binary numbers
into octal numbers -
(1) 100111, (2) 110101, (3) 1010101,
(4) 10001000, (5) 10011101

13.
Evaluate :
(a) 110111+100110+10101+111011
(c) 111011*11010
(b) 11.101+1010.11+110.011
(d) 1101.01*10.11
14.
Find 
the 
ones 
and 
two’s
complements 
of 
the 
binary
numbers-
(a) 111011, (b) 1101111, (c)
01100110, (d) 1100011000
15.
Perform the following binary
additions -
(a) 1110+1111
(b) 1011+1001
(c) 1011+110
(d) 101101+1101101

