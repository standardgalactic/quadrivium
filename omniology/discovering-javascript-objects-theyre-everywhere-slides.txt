@danappleman   danappleman.com
Dan Appleman
Discovering JavaScript Objects –
They’re Everywhere!

Some Objects Just Have No Class

Creating Objects


Object.defineProperties( j, {
"firstName" : { value: "Jill", writable: true },
"lastName" : { value: "GenericLastName", writable: true },
"age": { value: 35, writable: true},
"appliedForFinancialAid": { value: true }
}
);
defineProperties

What Is a JavaScript Object?
Name
Value
Name
Value
Name
Value

Rediscovering JSON

13:47:42:006 USER_DEBUG [7]|DEBUG|{
"lastName":"GenericLastName",
"GPA":3.8,
"firstName":
"Jill",
"appliedForFinancialAid":true,
"age":35}
JSON For an Apex Student
Looks familiar, doesn’t it?

JSON = JavaScript Object 
Notation

Object Destructuring

The Global Object

Functions (At Last)
Classes can wait

Returntype FunctionName (parameters) { … return }
String fullName(String firstName, String lastName)
{
return firstName + ‘ ‘ + lastName;
}
Typical Function Declaration (Apex, C#, Java)

Parameter => value | { … return }
(parameters) => value | { … return }
() => value | { … return }
Arrow Function Declaration

Function Parameters

void f1(String param1)
void f1(Integer param1)
Function Overloading (Apex)
Functions that have the same name, but different parameters are allowed

Function Constructors

public Student(String first, String last, Integer ageParam, 
double GPAparam, Boolean appliedForAid)
{
firstName = first;
lastName = last;
age = ageParam;
GPA = GPAparam;
appliedForFinancialAid = appliedForAid;
}
A Student Constructor in Apex
Student j = new Student(‘Jill’, ‘genericlastname’, 35, 3.8, true);

Creating a new object with a constructor 
function:
- An object is created
- The constructor property is set
- The ‘this’ variable is assigned
- You must use ‘this’ to access object 
properties
The constructor is associated with the 
object
- Their main purpose is to initialize the 
object
- Constructors “define” the object type

Let’s Talk About This

Object A
Object B
Function
This

Object A
Object B
Function
This

Object A
Object B
Function
This

Object A
Object B
Function
This

Prototypes

firstName
lastName
firstName
lastName
Student 1
Student 2
f fullName
f fullName
Student 
Constructor
Why have two copies of the same function?

firstName
lastName
firstName
lastName
Student 1
Student 2
Student 
Constructor
Student Prototype
f fullName
prototype
prototype

If a property is not found on 
an object, its prototype is 
searched (and then the 
prototype’s prototype, and 
so on)…

You can use prototypes to 
add functions common to 
all objects of a given type
Or you can watch the next 
clip

Object
Functions (also objects)
Object type == Function constructor
Don’t you miss classes?
ES6 brings good news
Our story so 
far…

Classes

Why Are JavaScript Functions More Important 
Than Classes?
Common bugs won’t make sense
You’ll still be using functions inside of 
classes
You need to be able to understand older 
JavaScript
Classes are functions, and that’s all they are!

You’re doing great!
The hardest material is 
behind you
second

Arrays

var myArray = [“A”,”B”,”C”];
var myArray = new Array(“A”,”B”,”C”);
var element = myArray[2];
var size = myArray.length;
myArray.push(5);
// Adds 5 to the end of the array
Creating Arrays
These two approaches are absolutely identical
Arrays are comparable to Apex lists – to a degree

Don’t add properties 
to objects you didn’t 
create
Watch the next clip instead
Maps and Sets
Comparable to Apex Maps 
and Sets
Index does not have to be a 
string
Beyond Arrays

Symbols

You learned to create simple objects
- (and describe them with JSON)
There’s a global object!
Functions are objects
Constructors are functions (and objects)
Prototypes are objects that allow sharing 
properties with related objects
Classes are just another function syntax
Arrays – yes, they too are objects
Objects are everywhere, and they all 
work the same way
A Bit of 
Perspective

The rules are simple enough, 
but you can spend a lifetime 
learning to play well

Up Next:
Asynchronous JavaScript

