Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 1 of 19
Go Back
Full Screen
Close
Quit
Комбинаторная логика в
программировании ⋆
Вольфенгаген В.Э.
Кафедра ПКИ и ИТ, Институт “ЮрИнфоР-МГУ”,
Москва, 127006 РФ,
vew@jmsuice.msk.ru,
WWW: http://www.wolfengagen.mephi.ru
Аннотация На ранних стадиях программирование представляло собой вид искусства,
когда программист писал программу для решения определенной задачи и сопровождал
ее более или менее подробно составленной документацией, то теперь создана мощная
индустрия программирования с сопутствующей ей инженерией программирования. В
настоящее время в исследованиях по программированию или в сфере компьютерных
наук, как правило, поддерживаются работы, в которых вносится некоторое небольшое
улучшение в решение уже хорошо известной проблемы. Вместе с тем из виду упус-
каются действительно важные и фундаментальные исследования, ведущие к поиску
новых концепций вычислений на компьютере и недостаточное внимание уделяется на-
коплению знаний в области программирования.
В настоящей работе основное внимание уделено вычислениям с объектами, удельный
вес и роль которых в данной области все более возрастает, превращаясь в доминиру-
ющую тенденцию.
⋆Настоящая работа отражает результаты исследований, частично поддержанных грантом Россий-
ского Фонда Фундаментальных Исследований, 04-07-90156

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 2 of 19
Go Back
Full Screen
Close
Quit
1.
Введение
С момента своего возникновения комбинаторная логика и ламбда-исчисле-
ние были отнесены к “неклассическим” логиками. Дело заключается в том,
что комбинаторная логика возникла в 1920-х гг., а ламбда-исчисление (λ-
исчисление) – в 1940-х гг. как ветвь метаматематики с достаточно очерчен-
ным предназначением – дать основания математике (см. [8]). Это означа-
ет, что сконструировав требуемую ‘прикладную’ математическую теорию –
предметную теорию, – которая отражает процессы или явления в реальной
внешней среде, можно воспользоваться ‘чистой’ метатеорией как оболочкой
для выяснения возможностей и свойств предметной теории.
Комбинаторная логика и ламбда-исчисление – это такие формальные
системы, в которых центральной разрабатываемой сущностью является пред-
ставление об объекте. В первой из них – комбинаторной логике, – механизм
связывания переменных в явном виде отсутствует, а во второй он имеется.
Наличие явного механизма связывания предполагает и наличие связанных
переменных, но тогда есть и свободные переменные, а также механизмы за-
мещения формальных параметров – связанных переменных, – на фактиче-
ские параметры, то есть подстановка.
Изначальным назначением комбинаторной логики был именно анализ
процесса подстановки. В качестве ее сущностей планировалось исполь-
зовать объекты в виде комбинаций констант. Ламбда-исчислению отво-
дилась роль средства уточнения представлений об алгоритме и вычисли-
мости. Как следствие, комбинаторная логика дает в руки инструмент для
анализа процесса подстановки. Через короткий промежуток времени ока-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 3 of 19
Go Back
Full Screen
Close
Quit
залось, что обе эти системы можно рассматривать как языки программи-
рования (см. [1], [9], а также книгу [4] и библиографию к ней).
В обеих системах исчисляются объекты, они являются исчислениями
или языками высших порядков, то есть имеются средства описания отоб-
ражений или операторов, которые определяются на отображениях или опе-
раторах, а в качестве результата вырабатывают также отображения или опе-
раторы. Самое существенное, что именно отображение считается объ-
ектом. В этом их принципиальное отличие от всего многообразия других
систем, в которых первичной сущностью обычно считают представление о
множестве и его элементах.
К настоящему времени оба эти языка не только стали основой для всей
массы исследований в области computer science, но и широко используют-
ся в теории программирования. Развитие вычислительной мощности ком-
пьютеров привело к автоматизации значительной части теоретического –
логического и математического, – знания, а комбинаторная логика вместе
с ламбда-исчислением признаются основой для рассуждений в терминах
объектов (см. [6], [7]).
Без овладения их методами нельзя полноценно развить базовую технику
вычислений с объектами, поскольку все еще распространенный в объект-
ных языках программирования и проектирования теоретико-множественный
стиль заставляет вязнуть в обилии второстепенных деталей, упуская из виду
действительно существенные моменты взаимодействия объектов.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 4 of 19
Go Back
Full Screen
Close
Quit
2.
Зачем нужно исчислять объекты
Работа за компьютерами с оболочкой, способной взять на себя заботы об
управлении объектами программного обеспечения, закладывает основу са-
мой современной на сегодня методики программирования. В настоящее вре-
мя с объектами работают сотни прикладных программ таких, как Windows,
AutoCAD, Designer и многих других. С другой стороны инструментальные
системы программирования Small Talk, Actor, ..., C++, C♯, Java и ряд дру-
гих требуют от программиста систематических рассуждений в терминах объ-
ектов и связей между ними, которые в свою очередь могут рассматриваться
как объекты. Программирование в терминах объектов требует создания и
поддержания собственной математической культуры, дающей весь спектр
стимулирующих идей (см. [10], а также раздел Круг вопросов в [8], с.9-
39). Программист при решении вполне конкретной задачи становится ис-
следователем, от которого требуется создание собственного языка со сво-
ими возможностями. Эти возможности не всегда интуитивно очевидны, и
могут потребоваться чисто математические оценки их выразительных воз-
можностей. Кроме того, часто требуется не просто написать некоторый про-
граммный код, но и выполнить его оптимизацию, не теряя свойства эквива-
лентности исходному коду. Все это требует для аккуратного и профессио-
нального проведения работы своей собственной “математической оболоч-
ки”, в которой поддерживаются все значимые и интересные математические
приложения.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 5 of 19
Go Back
Full Screen
Close
Quit
3.
Основное – адекватный способ мышления
Хорошо известно, что в практике программирования сложились различные
подходы, которые развиваются по различным направлениям. Бросающие-
ся в глаза различия проявляются в разном способе осмысления и напи-
сания программ. Большинство программистов занимается процедурным
программированием. Но кроме него есть и программирование, основанное
на правилах, логическое программирование, параллельное программи-
рование, визуальное программирование, программирование в терминах
потоков данных. При желании этот перечень можно продолжить, но он, оче-
видно, будет неполон, если в него не включить также и объектно-ориен-
тированное программирование, которое имеет явно выраженную тенден-
цию роста.
3.1.
Подходы и стили программирования
Подходов и стилей программирования много, и это отражает картину со-
вершенствования и распространения все новых и новых компьютерных ар-
хитектур. Возникающие архитектуры ориентированы на новые подходы к
программированию, которые еще только зарождаются в исследовательских
лабораториях.
Обилие и разнообразие подходов к программированию в computer sci-
ence отражается в развитии и распространении различных подходов к по-
строению математики. Действительно, математических теорий построено уди-
вительно много, и каждая из них является совершенно своеобразным язы-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 6 of 19
Go Back
Full Screen
Close
Quit
ком общения сравнительно ограниченного круга специалистов, которые хо-
рошо понимают друг друга. Однако попытка “непосвященного” понять прак-
тическую пользу и значимость нового математического языка наталкива-
ется на препятствия. Прежде всего оказывается необходимым перестро-
ить собственный стиль мышления, чтобы на известные трудности взглянуть
под новым углом зрения. Так распространение объектно-ориентированного
программирования требует и привлечения других способов рассуждения,
которые зачастую радикально отличаются от стереотипов рассуждения в
процедурном программировании.
3.2.
Рассуждения в терминах объектов
Точно также лишь немногие и сравнительно молодые математические тео-
рии ориентированы на рассуждения в терминах объектов, а не в терминах
операторов, как это следует из опыта изучения математического анали-
за в большинстве университетов, в том числе, и технического или компью-
терного профиля. К сожалению, программисту не удается прослушать уни-
верситетский курс, закладывающий основы математического мышления в
терминах объектов. В лучшем случае дело ограничивается сообщением чи-
сто математических результатов, полученных в комбинаторной логике,
λ-исчислении или теории категорий, которые не так-то просто прело-
мить на практическое программирование без известной теоретической ис-
кушенности.
Можно утверждать, что комбинаторная логика значительно повлияла на
современную картину программирования. Начинаясь как наука о природе

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 7 of 19
Go Back
Full Screen
Close
Quit
подстановок в математических теориях, она породила функциональное
программирование, программирование в терминах суперкомбинаторов, а
также некоторые другие чрезвычайно плодотворные подходы к программи-
рованию. В частности, только по-настоящему проникнув в сам дух комби-
наторной логики, можно понять в деталях и практически применить систему
программирования с заранее нефиксированной системой инструкций.
3.3.
Теория вычислений
Парадигмы программирования 90-х гг. в сильной степени выросли из ма-
тематического способа рассуждений, принятого в теории вычислений. В
частности, одной из ее начальных посылок была концепция ‘протекания ин-
формации’ вдоль некоторого ‘возможного’ русла, что привело к возникно-
вению весьма плодотворной концепции программы, управляемой потоком
данных. Другой пример связан с идеей использования некоторой части ком-
бинаторной логики, построив в ней специальные объекты-инструкции. Эти
объекты образуют систему команд категориальной абстрактной ма-
шины, которая может быть с успехом положена в основу вполне практи-
ческих (но объектно-ориентированных) систем программирования (см. [3]).
Более того, правила комбинаторной логики позволяют оптимизировать
компилируемый программный код, редуцируя его к некоторой нормаль-
ной форме. Для специалистов в комбинаторной логике это почти само собой
разумеется с самого начала, поскольку в этом состояла одна из целей раз-
работки комбинаторной логики как математической дисциплины.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 8 of 19
Go Back
Full Screen
Close
Quit
Современные исследования в области computer science показывают, что
комбинаторная логика и ее различные категориальные диалекты становят-
ся необходимым математическим языком программиста, пользуясь кото-
рым он обменивается идеями со своими коллегами. Дело как раз в том, что
одним из предметов ее исследования являются объекты и построение раз-
личных исчислений объектов, которые удовлетворяют кругу вопросов каж-
дой конкретной прикладной задачи. Другими словами, решение всякой за-
дачи требует построения специального точного языка. Как хорошо известно
программистам, это язык интерфейса программного обеспечения. В терми-
нах специалиста в computer science это специализированный диалект ком-
бинаторной логики.
3.4.
Объекты и системный подход
Если программистом для разработки избирается объектно-ориентирован-
ный подход, то скорее всего будет ошибкой подгонять решаемую задачу под
какую-нибудь заранее известную математическую модель. Возможно, зна-
чительно лучше будет поискать нестандартное решение, которое в точно-
сти охватывает специфические особенности, связанные с самой природой
прикладной области. В computer science для этого избирается метатео-
рия, в рамках которой проводится исследование и которая “настраивает-
ся” на специфику прикладной области. Один из способов настройки – это
погружение прикладной теории (“меньшей” теории) в чистую метатеорию
(“большую теорию”). Кроме того, с математической точки зрения в рамках
комбинаторной логики удобно строить подтеории – специальные матема-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 9 of 19
Go Back
Full Screen
Close
Quit
тические модули, которые в готовом виде задают механизмы вычислений,
имеющие самостоятельное значение (см. [2], [10]). Такие рассуждения лег-
ко найдут отклик у программиста, вынужденного заниматься большим про-
граммным проектом, когда преимущества рассуждений в терминах объек-
тов и их свойств становятся особенно очевидными. Комбинаторная логика
позволяет на математически идеализированных объектах предварительно
“проиграть” все наиболее сложные и тонкие моменты взаимодействия ме-
ханизмов большого программного проекта (см. [11]).

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 10 of 19
Go Back
Full Screen
Close
Quit
4.
Аппликативные вычислительные системы
Традиционно в состав аппликативных вычислительных систем, или АВС,
включают системы исчислений объектов, основанные на комбинаторной ло-
гике и ламбда-исчислении. Единственное, что существенно разрабатывает-
ся в этих системах – это представление об объекте. В комбинаторной ло-
гике единственный метаоператор – аппликация, или, по иной терминоло-
гии, приложение одного объекта к другому. В ламбда-исчислении два ме-
таоператора – аппликация и функциональная абстракция, позволяющая
связывать одну переменную в одном объекте.
Возникающие в этих системах объекты ведут себя как функциональные
сущности, имеющие следующие особенности:
число аргументных мест, или арность объекта заранее не фиксируется, но
проявляет себя постепенно, во взаимодействиях с другими объектами;
при конструировании составного объекта один из исходных объектов –
функция, – применяется к другому – аргументу, – причем в других кон-
текстах они могут поменяться ролями, то есть функции и аргументы рас-
сматриваются как объекты на равных правах;
разрешается самоприменимость функций, то есть объект может приме-
няться сам к себе.
Вычислительные системы с таким наиболее общими и наименее огра-
ничительными свойствами оказываются в центре внимания современного
сообщества computer science. Именно они в настоящее время обеспечива-
ют необходимые метатеоретические средства, позволяя исследовать свой-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 11 of 19
Go Back
Full Screen
Close
Quit
ства целевых прикладных теорий, дают основу построения семантических
средств языков программирования и обеспечивают средства построения мо-
делей данных/метаданных в информационных системах.
Во второй половине 1970-х – начале 1980-х произошел взрыв в раз-
витии аппликативных вычислительных систем, приведший к развитию це-
лого спектра направлений исследований и изобилию научных публикаций.
Они написаны специальным языком, их прочтение и понимание, не говоря
уже об овладении существом дела, требовало основательной теоретической
подготовки. Причин тому было несколько.
Во-первых, в 1980 году теория аппликативных вычислений все еще ак-
тивно развивалась, а одной из целей авторов публикаций было пробудить
интерес и привлечь к исследования в этой области математически одарен-
ных студентов.
Во-вторых, с течением времени изменились роль и место, которые отво-
дились в учебных программах для аппликативных систем. Если раньше для
овладения важнейшими идеями требовалось изрядное знакомство с целым
набором метаматематических дисциплин, то теперь изучение основных эле-
ментов аппликативных вычислений входит в стандартную программу, ко-
торая обязательна для студентов младших курсов. Это означает, что в со-
ответствующих курсах предпочтение отдается содержательному методу из-
ложения, который вовлекает только элементарные средства, делая предмет
доступным.
В-третьих, за это время курсы по компьютерным наукам превратились
из математизированных и концептуальных в довольно рецептурные, дающие

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 12 of 19
Go Back
Full Screen
Close
Quit
нечто наподобие “быстрого взгляда” на массу готовых решений, методов,
технологий и рекомендаций по использованию.
В-четвертых, отношение к компьютерным наукам стало в значительной
мере практическим и даже потребительским. В большинстве случаем ожи-
дается, что овладение тем или иным разделом компьютерных наук долж-
но дать немедленную отдачу. У студентов имеется даже вполне заметное
нежелание выполнять упражнения или решать задачи творческого и тео-
ретического плана, носящих принципиальный характер. С целью сохране-
ния уровня обучения аппликативным вычислениям получают развитие при-
меры и упражнения различного характера из области программирования,
причем их решения даются элементарными средствами, не предполагая ни-
какой предварительной математической подготовки. Обычно предполагает-
ся, что обучающийся знаком с началами программирования, имея некоторое
представление о структурах данных.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 13 of 19
Go Back
Full Screen
Close
Quit
5.
Компьютинг и обучение вычислениям с объектами
За последние двадцать лет одним из наиболее интенсивно разрабатываемым
понятием было и остается представление о вычислении (computing), кото-
рое оказалось оснащенным комплексом дисциплин, состав и содержание
которых непрерывно трансформируется (см. раздел Вступление в [8]). То-
лько в самое последнее время специальной объединенной комиссией Ассо-
циации по Вычислительной Технике (Association for Computing Machinery,
ACM) и Компьютерным сообществом Института Инженеров по Электро-
технике и Электронике (IEEE Computer Society) был представлен отчет, со-
держащий рекомендации по преподаванию информатики (и computer science)
и типовым учебным планам этой дисциплины. Вместе с тем и процесс науч-
ного становления этой дисциплины нельзя считать завершенным.
Хорошо известно, что анализ такого емкого понятия, как ‘вычисление’
нуждается в подходящем понятийном запасе. Действительно, информатика
шире, чем собственно компьютерные науки, а последние несводимы толь-
ко к программированию. При обучении компьютингу в продвинутых курсах
отбираются и подвергаются обсуждению только такие формализации, ко-
торые напрямую способствуют изучению вопроса, к ´ак же решаются задачи
в этих областях. Отличительной особенностью такого подхода является си-
стематическое изложение круга вопросов вычислений с объектами – интен-
сивно развивающегося направления, которое особенно важно для успешно-
го применения информационных технологий.
Формальные средства вычислений с объектами действительно позволя-
ют охватить все аспекты решения задач, начиная с их аккуратной поста-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 14 of 19
Go Back
Full Screen
Close
Quit
новки – чтобы прийти к правильно построенному решению, – вплоть до
построения стратегий, которые приводят к решениям шаг за шагом (поша-
говые стратегии), и указать аналитические методы, которые дают возмож-
ность оценить и сравнить решения.
Этот путь изучения вычислений формирует квалифицированных програм-
мистов, поскольку именно программирование является той средой, которая
используется для обсуждения всех указанных понятий. В частности, аппли-
кативные вычислительные системы являются базовыми для развития мето-
дов и средств вычислений с объектами, а последние нужны тем, кто заинте-
ресован в изучении методов постановки, решения и анализа задач.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 15 of 19
Go Back
Full Screen
Close
Quit
6.
Заключение
Круг затронутых в работе вопросов нельзя отождествлять с программиро-
ванием, хотя в известном смысле она предназначена для адептов програм-
мирования. Базовый запас метатеоретических средств рассмотрен с пози-
ций систематического использования операций абстракции и аппликации
– применения, или приложения, одних объектов к другим, – что позволяет
охватить и принципиально важный круг вопросов, относящихся к основам
программирования и языкам программирования.
Методы и средства вычислений с объектами, которые обсуждены в на-
стоящей работе, находят отражение в большинстве разделов учебных кур-
сов по информатике и, наряду с другими методами, способствуют развитию
компьютерных наук и программирования.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 16 of 19
Go Back
Full Screen
Close
Quit
7.
Благодарности
Выражаю искреннюю признательность С. Г. Маслову, способствовавшему
выходу в свет настоящей работы.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 17 of 19
Go Back
Full Screen
Close
Quit
Список литературы
1.
Булкин М.А., Габович Ю.Р., Пантелеев А.Г. Методические рекомендации по программиро-
ванию и эксплуатации интерпретатора для алгоритмического языка ЛИСП в ОС ЕС.
– Киев : НИИАСС, 1981. – 91 с.
2.
Вольфенгаген В.Э., Гольцева Л.В. Аппликативные вычисления на основе комбинаторов
и λ-исчисления. – (Руководитель проекта “Аппливативные вычислительные системы” к.т.н.
Л.Ю. Исмаилова.) – М.: МИФИ, 1992. – 41 с.
Основы аппликативных вычислительных систем изложены элементарными средствами, что
обеспечивает студентов и аспирантов кратким и исчерпывающим руководством, которое мо-
жет использоваться ‘для первого чтения’. Настоящее руководство в различных вариантах те-
чение ряда лет использовалось для проведения практический занятий и лабораторных работ по
соответствующим разделам курса компьютерных наук. Охватываются вопросы использования
комбинаторов и λ-исчисления при реализации аппликативных вычислений. Приводится необ-
ходимый теоретический минимум, основное внимание уделено выполнению упражнений, иллю-
стрирующих применения основных вычислительных идей, понятий и определений. Для облегче-
ния овладения предметом руководство снабжено простой обучающей программой, которая мо-
жет использоваться в качестве вводного лабораторного практикума. При практической работе
с обучающей программой следует иметь ввиду, что решение задач предполагает проведение до-
полнительных преобразований с целью оптимизации выражений, устранения в них переменных,
упрощения целевого исполняемого выражения. Аппликативные вычисления излагаются как на-
бор таких методов и средств.
3.
Вольфенгаген В.Э. Категориальная абстрактная машина.– М.:МИФИ, 1993. – 96 с.; – 2-
е изд. – М.: АО “Центр ЮрИнфоР”, 2002. – 96 с. Работа содержит изложение базовых моделей
вычислений, применяемых в компьютерных науках. Изложены основы λ-исчисления и комби-
наторные исчисления.
Основное внимание уделено подробному рассмотрению техники вычисления значения конструк-
ций языков программирования, включая компилирование кода, его оптимизацию и исполнение
на примере категориальной абстрактной машины. Изложение построено на примерах возраста-
ющей сложности.
4.
Вольфенгаген В.Э. Конструкции языков программирования. Приемы описания.– М.: АО
“Центр ЮрИнфоР”, 2001. – 276 с.

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 18 of 19
Go Back
Full Screen
Close
Quit
В работе изложены основы, касающихся разработки, реализации и применения конструкций как
императивных, так и функциональных языков программирования. Значительное внимание уде-
ляется применению денотационной семантики, позволяющей в полной мере извлечь преимуще-
ства объектно-ориентированного подхода, что, в конечном счете, позволяет построить результи-
рующую вычислительную модель чисто функционального типа.
5.
Вольфенгаген В.Э. Логика. Конспект лекций: техника рассуждений.– М.: АО “Центр
ЮрИнфоР”, 2001. – 137 с.; – 2-е изд. – М.: АО “Центр ЮрИнфоР”, 2004. – 229 с.
Последнее издание значительно переработано и расширено элементами техники семантических
рассуждений с применением классов и отношений, что особенно важно для работы с электрон-
ными формами информации. Рассмотрены способы переформулирования текста фактического
типа на символьный язык, допускающий применение классических логических средств. Показа-
ны приемы и способы записи аргументации и проверки ее значимости. На большом числе приме-
ров проиллюстрирована техника логических рассуждений, выводов и доказательств. Отмечены
способы включения в вывод аннотаций (комментариев), пользуясь которыми можно проверить
истинность или установить ложность приводимых доводов.
6.
Вольфенгаген В. Э. Комбинаторная логика в программировании. Вычисления с объекта-
ми в примерах и задачах. – М.: МИФИ, 1994. – 204 с.; 2-е изд., М.: АО «Центр ЮрИнфоР»,
2003. – 336 с.
Изложен основной круг задач, сводимых к исчислению объектов – “от простого к сложному”.
Конкретный вариант исчисления выбирается в зависимости от решаемых вычислительных задач.
В ходе последовательного решения задач читатель овладевает основными методами и средства-
ми комбинаторной логики и λ-исчисления. Все задачи снабжены подробными и элементарными
решениями.
7.
Wolfengagen V.E. Combinatory logic in programming. – Moscow, “Center JurInfoR” Ltd., 2003.
– 336 p.
8.
Вольфенгаген В. Э. Методы и средства вычислений с объектами. Аппликативные вычис-
лительные системы – М.: JurInfoR Ltd., «Центр ЮрИнфоР», 2004. – xvi+789 с.
Систематически рассмотрены модели, методы и средства, для которых центральной сущностью
является представление об объекте. Применен подход, основанный на использовании операций
аппликации и абстракции, что позволило выполнить замкнутое изложений техники аппликатив-
ных вычислений, оставаясь в рамках элементарных средств. Книга основана на материале, кото-
рый в различных вариантах использовался для проведения занятий по соответствующим разде-

Введение
Зачем нужно . . .
Основное – . . .
Аппликативные . . .
Компьютинг и . . .
Заключение
Благодарности
Список литературы
Home Page
Title Page
◀◀
▶▶
◀
▶
Page 19 of 19
Go Back
Full Screen
Close
Quit
лам курса компьютерных наук. Приводится необходимый теоретический минимум, соответству-
ющий мировым стандартам, иллюстрируются основные вычислительные идеи, понятия и опре-
деления.
9.
Wolfengagen V.E. Functional notation for indexed concepts. – In: Proceedings of The 9th
International Workshop on Functional and Logic Programming WFLP’2000, Benicassim, Spain,
September 28-30, 2000
http://www.dsic.upv.es/~wflp2000/
10. Wolfengagen V.E. Environment with state transitions for Web Information Systems: case
study. – In: Proceedings of the 6-th International Conference on Information Integration and Web-
based Application & Services (iiWAS’2004), Jakarta, Indonesia, September 27-29, 2004. – pp. 99-
104.
11. Wolfengagen V.E. Environment with state transitions for Web Information Systems: case
study. – In: Proceedings of the 6th International Workshop on Computer Science and Information
Technologies CSIT’2004, Budapest, Hungary, October 17-19, 2004, pp. 77-86
Строится модель объектов данных/метаданных. Модель погружена в общую вычислительную
среду и имеет возможность учета переходов состояния. Использован интенсиональный под-
ход, основанный на применении конструкции функтор-как-объект, моделирующей объекты дан-
ных/метаданных. Модель дает основу динамическим вычислениям, учитывая ‘состояния зна-
ния’. Обеспечивается чисто функциональная и аппликативная вычислительная среда. Приво-
дится анализ случаев построения концептов на основе конструкции переменного домена (пере-
менной области).

