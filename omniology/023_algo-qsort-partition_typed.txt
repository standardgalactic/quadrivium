QuickSort	  
The	  Par00on	  
Subrou0ne	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Par00oning	  Around	  a	  Pivot	  
Key	  Idea	  :	  par00on	  array	  around	  a	  pivot	  element.	  
-­‐ Pick	  element	  of	  array	  
-­‐ Rearrange	  array	  so	  that	  
-­‐ LeE	  of	  pivot	  =>	  less	  than	  pivot	  
-­‐ Right	  of	  pivot	  =>	  greater	  than	  pivot	  
Note	  :	  puts	  pivot	  in	  its	  “righJul	  posi0on”.	  
pivot	  
>	  pivot	  
<	  pivot	  

Two	  Cool	  Facts	  About	  Par00on	  
1.  Linear	  O(n)	  0me,	  no	  extra	  memory
	  [see	  next	  video]	  
2.  Reduces	  problem	  size	  

Tim	  Roughgarden	  
The	  Easy	  Way	  Out	  
Note	  :	  Using	  O(n)	  extra	  memory,	  easy	  to	  par00on	  around	  
pivot	  in	  O(n)	  0me.	  
pivot	  
<	  3	  
>	  3	  

Tim	  Roughgarden	  
In-­‐Place	  Implementa0on	  
Assume	  :	  pivot	  =	  1st	  element	  of	  array	  
[	  if	  not,	  swap	  pivot	  <-­‐-­‐>	  1st	  element	  as	  preprocessing	  step	  ]	  
High	  –	  Level	  Idea	  :	  
-­‐ Single	  scan	  through	  array	  
-­‐ 	  invariant	  :	  everything	  looked	  at	  so	  far	  is	  par00oned	  
Already	  par00oned	  
unpar00oned	  

Tim	  Roughgarden	  
Par00on	  Example	  
unpar00oned	  
unpar00oned	  
unpar00oned	  
unpar00oned	  
par00oned	  
par00oned	  
Swap	  	  	  	  	  	  	  
par00oned	  

Tim	  Roughgarden	  
Par00on	  Example	  (con’d)	  
par00oned	  
par00oned	  
par00oned	  
unpar00oned	  
unpar00oned	  
Fast	  forwarding	  

Tim	  Roughgarden	  
Pseudocode	  for	  Par00on	  
Par00on	  (A,l,r)	  
	  
	  [	  input	  corresponds	  to	  A[l…r]]	  
	  -­‐	  p:=	  A[l]	  
	  -­‐	  i:=	  l+1	  
	  -­‐	  for	  j=l+1	  to	  r	  
	  
	  -­‐	  if	  A[j]	  <	  p
	  
	  [if	  A[j]	  >	  p,	  do	  nothing	  ]	  
	  
	  	  	  	  	  -­‐swap	  A[j]	  and	  A[i]	  
	  
	  	  	  	  	  -­‐	  i:=	  i+1	  
	  -­‐	  swap	  A[l]	  and	  A[i-­‐1]	  
swap	  

Tim	  Roughgarden	  
Running	  Time	  
Running	  0me	  =	  O(n),	  where	  n	  =	  r	  –	  l	  +	  1	  is	  the	  length	  of	  the	  input	  
(sub)	  array.	  
Reason	  :	  O(1)	  work	  per	  array	  entry.	  
Also	  :	  clearly	  works	  in	  place	  (repeated	  swaps)	  

Tim	  Roughgarden	  
Correctness	  
Claim	  :	  the	  for	  loop	  maintains	  the	  invariants	  :	  
1.  A[l+1],..,A[i-­‐1]	  are	  all	  
less	  than	  the	  pivot	  
2.  A[i],…,A[j-­‐1]	  	  are	  all	  greater	  than	  pivot.	  
[	  Exercise	  :	  check	  this,	  by	  induc0on.	  ]	  
Consequence	  	  :	  at	  end	  of	  for	  loop,	  have:	  
=>	  aEer	  ﬁnal	  swap,	  array	  par00oned	  
around	  pivot.	  

