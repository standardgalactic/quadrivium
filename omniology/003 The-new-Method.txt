__new__
© 2019 MathByte Academy

Constructing Instances of a Class
à call the class
ex: Person('Guido')
à classes are callable
à how? back to that later
à the new class instance is created
à the __init__ method is called (bound to the new object)
à but how is the new instance actually created?
(and initialized in some ways)
à after the instance has been created
à gives us a "hook" to customize the initialization
© 2019 MathByte Academy

The __new__ Method
à object implements the __new__ method
à it is a default implementation of __new__
à used in the creation of instances of any class
à can be called directly
p = object.__new__(Person)
class Person:
def __init__(self, name):
self.name = name
à __init__ is not called
à p is a new object, an instance of Person
à do it ourselves
p.__init__('Raymond')© 2019 MathByte Academy

The __new__ Method
object.__new__(class, *args, **kwargs)
à accepts *args, **kwargs
à signature must match __init__ of class
à but it just ignores these arguments
à can override __new__ in our custom classes
à should return a new object
à should be an instance of the class
à but does not have to be
à it is a static method
à not bound to object
à class is the symbol for the class we want to instantiate
à returns a new object of type class
© 2019 MathByte Academy

Overriding the __new__ Method
à typically we do something before/after creating the new instance
à delegating actual creation to object.__new__
à in practice we use super().__new__
à ensures inheritance works properly
class Person:
def __new__(cls, name, age):
# can do things here
# create the object we want to return
instance = object.__new__(cls)
# more code here
# and finally return the object we want
return instance
super().__new__(cls)
© 2019 MathByte Academy

How is __new__ Called?
à it is called by Python when we call the class
Person('Guido')
à Python calls __new__(Person, 'Guido')
à __new__ returns an object
à if that object is of the same type as the one "requested"
à new_object.__init__('Guido') is called
à new object is returned from call
p = Person('Guido')
à we'll come back to how later
© 2019 MathByte Academy

Remember
__new__ is a static method
à done implicitly for us by Python
class Person:
@staticmethod
def __new__(cls, name):
return super().__new__(cls)
à don't need to use @staticmethod
class Person:
def __new__(cls, name):
return super().__new__(cls)
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

