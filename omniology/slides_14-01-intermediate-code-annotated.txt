Alex Aiken 
Compilers 
Intermediate Code 

Alex Aiken 
Intermediate Code 
• A language between the source and the target 
 
• Provides an intermediate level of abstraction 
– More details than the source 
– Fewer details than the target 

Alex Aiken 
Intermediate Code 
• Intermediate language = high-level assembly  
– Uses register names, but has an unlimited number 
– Uses control structures like assembly language 
– Uses opcodes but some are higher level 
• E.g., push translates to several assembly instructions 
• Most opcodes correspond directly to assembly opcodes 

Alex Aiken 
Intermediate Code 
• Each instruction is of the form 
                    
x := y op z 
 
 
 
x := op y 
– y and z are registers or constants 
– Common form of intermediate code 
 
• The expression x + y * z is translated 
                     t1 := y * z 
                     t2 := x + t1 
– Each subexpression has a “name” 

Alex Aiken 
Intermediate Code 
• Similar to assembly code generation 
 
• But use any number of IL registers to hold 
intermediate results 
 

Alex Aiken 
Intermediate Code 
• igen(e, t)  
– code to compute the value of e in register t 
 
• Example: 
igen(e1 + e2, t) =  
      igen(e1, t1)             (t1 is a fresh register) 
      igen(e2, t2)             (t2 is a fresh register) 
      t := t1 + t2 
 
• Unlimited number of registers => simple code generation 

Alex Aiken 
Intermediate Code 
• You should be able to use intermediate code 
– At the level discussed in lectures 
 
• You are not expected to know how to generate 
intermediate code 
– Because we won’t discuss it further 
– But really just a variation on code generation . . . 

