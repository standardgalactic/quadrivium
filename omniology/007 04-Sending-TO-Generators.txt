© Fred Baptiste 2018

So far…
We saw how yield can produce values
à use iteration to get the produced values
After a value is yielded, the generator is suspended
How about sending data to the generator upon resumption?
Enhancement to generators introduced in Python 2.5
PEP 342
à next()
© Fred Baptiste 2018

Sending data to a generator
yield is actually an expression
it can yield a value (like we have seen before)
yield 'hello'
it can also receive values 
it is used just like an expression would
received = yield
we can combine both
received = yield 'hello'
à works, but confusing!
à use sparingly
© Fred Baptiste 2018

What's happening?
def gen_echo():
while True:
received = yield
print('You said:', received)
echo = gen_echo()
à CREATED
has not started running yet – not in a suspended state
next(echo)
à SUSPENDED
Python has just yielded (None)
generator is suspended at the yield
we can resume and send data to the generator at the same time using send()
generator resumes running exactly at the yield
the yield expression evaluates to the just received data
then the assignment to received is made
echo.send('hello')
© Fred Baptiste 2018

What's happening?
received = yield 'python'
'python' is yielded and control is returned to caller
generator is 
suspended here
caller sends data to generator: g.send('hello')
generator resumes
'hello' is the result of the yield expression
'hello' is assigned to received
generator continues running until the next yield or return
© Fred Baptiste 2018

Priming the generator
received = yield 'python'
Notice that we can only send data if the generator is suspended at a yield
So we cannot send data to a generator that is in a CREATED state – it must be in a SUSPENDED state
echo = gen_echo()
def gen_echo():
while True:
received = yield
print('You said:', received)
à SUSPENDED
echo.send('hello')
next(echo)
à CREATED
echo.send('hello')
à yes, a value has been yielded – and we can choose to just ignore it
à in this example, None has been yielded
© Fred Baptiste 2018

Priming the generator
Don't forget to prime a generator before sending values to it!
à always use next() to prime
à generator must be SUSPENDED to receive data
Later we'll see how we can "automatically" prime the generator using a decorator
© Fred Baptiste 2018

Using yield…
à used for producing data
à yield 'Python'
à used for receiving data
à a = yield
(technically this produces None)
Be careful mixing the two usages in your code
à difficult to understand
à sometimes useful
à often not needed
© Fred Baptiste 2018

Example
def running_averager():
total = 0
count = 0
running_average = None
while True:
value = yield running_average
total += value
count += 1
running_average = total / count
averager = running_averager()
next(averager)
à primed
à None has been yielded
averager.send(10)
à value received 10
à continues running until next yield
à yields running_average
à suspended and waiting
à 10
averager.send(30)
à value received 30
à eventually yields 20
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

