
Spring Boot 
Conﬁguration

Dependency Management
• Maven or Gradle are supported for curated dependencies 
• Each version of Spring Boot is conﬁgured to work with a 
speciﬁc version of Spring Framework 
• Overriding the Spring Framework Version is not 
recommended 
• Other build systems such as Ant can be used, but not 
recommended  

Maven Support
• Maven projects inherit from a Spring Boot Parent 
POM 
• When possible, do not specify versions in your 
POM. Allow the versions to inherit from the 
parent 
• The Spring Boot Maven Plugin allows for 
packaging the executable jar

Gradle Support
• Gradle support depends on a Spring Boot 
Gradle plugin  
• Requires Gradle 3.4 or later 
• The Gradle plugin provides support of curated 
dependencies, packaging as jar or war, and 
allows you to run the application from the 
command line

Ant + Ivy Support
• Spring Boot can be built using Ant with Ivy 
• Ivy is used for dependency management 
• Complete directions are available via the ofﬁcial 
Spring Boot documentation

Spring Boot Starters
• Starters are top level dependencies for popular Java 
libraries  
• Will bring in dependencies for the project and related 
Spring components 
• Starter ‘spring-boot-starter-data-jpa’ brings in: 
• Hibernate 
• Spring Data JPA - and related Spring deps

Spring Boot Annotations
• @SpringBootApplication - main annotation to use 
• Includes: 
• @Conﬁguration - Declares class as Spring 
Conﬁguration 
• @EnableAutoConﬁguration - Enables auto conﬁguration 
• @ComponentScan - Scans for components in current 
package and all child packages

Disabling Speciﬁc Auto Conﬁg
• Auto-conﬁguration will bring in A LOT of 
conﬁguration classes in supplied Spring Boot 
Jars 
• You can specify classes to exclude with: 
• @EnableAutoConﬁguration(exclude={DataSour
ceAutoConﬁguration.class})


