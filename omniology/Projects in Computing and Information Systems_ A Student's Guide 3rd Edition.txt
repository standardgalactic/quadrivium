Projects in 
Computing and 
Information Systems
A Student’s Guide
Third Edition
Christian W. Dawson
Projects in
Computing and
Information Systems
A Student’s Guide
Third Edition
Christian W. Dawson

Projects in Computing 
and Information Systems


Projects in Computing 
and Information Systems
A Student’s Guide
Third Edition
Christian W. Dawson

Pearson Education Limited
Edinburgh Gate
Harlow CM20 2JE
United Kingdom
Tel: +44 (0)1279 623623
Web: www.pearson.com/uk
First published 2005 (print)
Second edition 2009 (print)
Third edition published 2015 (print and electronic)
© Pearson Education Limited 2005, 2009 (print)
© Pearson Education Limited 2015 (print and electronic)
The right of Christian W. Dawson to be identified as author of this work has been asserted by him 
in accordance with the Copyright, Designs and Patents Act 1988.
The print publication is protected by copyright. Prior to any prohibited reproduction, storage 
in a retrieval system, distribution or transmission in any form or by any means, electronic, 
mechanical, recording or otherwise, permission should be obtained from the publisher or, where 
applicable, a licence permitting restricted copying in the United Kingdom should be obtained 
from the Copyright Licensing Agency Ltd, Saffron House, 6–10 Kirby Street, London EC1N 8TS.
The ePublication is protected by copyright and must not be copied, reproduced, transferred, 
distributed, leased, licensed or publicly performed or used in any way except as specifically 
permitted in writing by the publisher, as allowed under the terms and conditions under which it 
was purchased, or as strictly permitted by applicable copyright law. Any unauthorised distribution 
or use of this text may be a direct infringement of the author’s and the publisher’s rights and those 
responsible may be liable in law accordingly.
All trademarks used herein are the property of their respective owners. The use of any trademark in 
this text does not vest in the author or publisher any trademark ownership rights in such trademarks, 
nor does the use of such trademarks imply any affiliation with or endorsement of this book by such 
owners.
Pearson Education is not responsible for the content of third-party internet sites.
ISBN: 978–1-292–07346–0 (print)
	
978–1-292- 08112–0 (PDF)
	
978–1-292–08111–3 (eText)
British Library Cataloguing-in-Publication Data
A catalogue record for the print edition is available from the British Library
Library of Congress Cataloging-in-Publication Data
Dawson, Christian W.
  Projects in computing and information systems : a student’s guide/Christian W. Dawson.  
— Third edition.
       pages cm
  Includes bibliographical references and index.
  ISBN 978-1-292-07346-0
 1.  Electronic data processing. 2.  Information technology.  I. Title.
  QA76.D3333326 2015
  004—dc23
                                                                                                                                                 2014042818 
A catalog record for the print edition is available from the Library of Congress
10  9  8  7  6  5  4  3  2  1
19  18  17  16  15
Cover image © Getty Images
Print edition Typeset in 9/11pt Galliard by 71
Printed in Malaysia

For Jacob and Ben


	
	
vii
Preface	
xi
Acknowledgements	
xiii
Section 1 – The background	
1
	 1	 Introduction	
3
	
1.1	 Introduction	
3
	
1.2	 What are (computing) projects?	
4
	
1.3	 Degree requirements	
10
	
1.4	 Stakeholders	
12
	
1.5	 How this book is arranged	
14
	
1.6	 Summary	
15
	
1.7	 Action points	
16
	 2	 Research	
17
	
2.1	 What is research?	
17
	
2.2	 The research process	
22
	
2.3	 Classifying research	
25
	
2.4	 Research methods	
27
	
2.5	 Ethical issues	
38
	
2.6	 Summary	
40
	
2.7	 Further reading	
40
	
2.8	 Action points	
40
Contents

	 Contents
viii
Section 2 – Setting your project’s foundation	
41
	 3	 Choosing a project and writing a proposal	
43
	
3.1	 Introduction	
43
	
3.2	 Choosing a project	
44
	
3.3	 Preparing a project proposal	
53
	
3.4	 Choosing your supervisor	
59
	
3.5	 Summary	
60
	
3.6	 Exercise	
61
	
3.7	 Action points	
61
	
3.8	 Solutions to selected exercises	
61
	 4	 Project planning and risk management	
62
	
4.1	 Introduction	
62
	
4.2	 Project definition	
65
	
4.3	 Project planning	
68
	
4.4	 Risk management	
83
	
4.5	 Summary	
88
	
4.6	 Further reading	
89
	
4.7	 Exercises	
89
	
4.8	 Action points	
89
	 5	 Literature searching and literature reviews	
90
	
5.1	 Introduction	
90
	
5.2	 The literature survey process	
95
	
5.3	 Literature searching	
97
	
5.4	 Managing information	
104
	
5.5	 Critical evaluation	
106
	
5.6	 Writing literature reviews	
108
	
5.7	 Summary	
112
	
5.8	 Further reading	
113
	
5.9	 Action points	
113
Section 3 – Conducting your project	
115
	 6	 Software development	
117
	
6.1	 Introduction	
118
	
6.2	 The software development life cycle (SDLC)	
119
	
6.3	 The earliest ‘model’: build-and-fix	
128
	
6.4	 The stage-wise and classical waterfall models (conventional models)	
129
	
6.5	 The incremental model	
130
	
6.6	 Prototyping	
134
	
6.7	 Agile methods	
138
	
6.8	 Configuration management	
140
	
6.9	 Which approaches should I use?	
141

	
	
Contents
ix
	
6.10	 Top-down and bottom-up development	
144
	
6.11	 Verification, validation and testing	
147
	
6.12	 Quality	
154
	
6.13	 Summary	
157
	
6.14	 Further reading	
157
	
6.15	 Exercises	
157
	
6.16	 Action points	
158
	
6.17	 Solutions to selected exercises	
158
	 7	 Controlling your project	
161
	
7.1	 Introduction	
162
	
7.2	 Dealing with problems	
165
	
7.3	 Managing your time	
170
	
7.4	 Working with your supervisor	
180
	
7.5	 Working in teams	
183
	
7.6	 Summary	
191
	
7.7	 Further reading	
192
	
7.8	 Exercise	
192
	
7.9	 Action points	
192
Section 4 – Presenting your project	
193
	 8	 Presenting your project in written form	
195
	
8.1	 Introduction	
195
	
8.2	 Writing and structuring reports	
196
	
8.3	 Writing abstracts	
209
	
8.4	 Data presentation	
211
	
8.5	 Referencing material and avoiding plagiarism	
223
	
8.6	 Documenting software	
231
	
8.7	 Writing papers and publishing your work	
234
	
8.8	 Summary	
237
	
8.9	 Further reading	
238
	
8.10	 Exercises	
238
	
8.11	 Action point	
238
	 9	 Presentation skills	
239
	
9.1	 Introduction	
240
	
9.2	 Oral presentations	
240
	
9.3	 Poster presentations	
253
	
9.4	 Demonstrating software	
262
	
9.5	 Viva voce examinations	
265
	
9.6	 Summary	
268
	
9.7	 Further reading	
268
	
9.8	 Action points	
269

	 Contents
x
Section 5 – The future	
271
	10	 Final considerations	
273
	
10.1	 Introduction	
273
	
10.2	 Examiners and the marking of your project	
274
	
10.3	 Taking your project further	
279
	
10.4	 Additional topics	
281
	
10.5	 The future	
281
	
10.6	 Top ten tips for successful projects	
284
	
10.7	 Summary	
286
	
10.8	 Further reading	
286
	
10.9	 Action points	
286
References	
287
Index	
	
292

	
	
xi
Projects are a major component of virtually all undergraduate and postgraduate com-
puting and information science courses within universities. They require students to 
draw on a number of separate but highly important skills: surveying literature, report 
writing, developing and documenting software, presentational skills, time manage-
ment, project management skills and so on. For students to excel in all of these areas 
is a major accomplishment, yet it is something that academic institutions have come to 
expect as part of the independent learning process.
Although there are books available that cover some of these topics in great detail, there 
are none that draw all these skills together and which are aimed specifically at students 
on computing and information systems courses of one kind or another. This text fills 
this gap and provides a foundation in the skills both undergraduate and postgraduate 
students require to complete their projects successfully.
This book is structured in a chronological fashion so that the main stages through 
which projects progress are discussed in sequence. It is split into five main sections.
	 1.	 The background. This section provides a general introduction to projects, the 
different degree structures that are in place and the stakeholders involved. It also 
provides a useful introduction to research in the context of computing projects.
	 2.	 Setting your project’s foundation. This section covers the skills you will need 
during the initial stages of your computing project. It covers topics such as how to 
choose a project, how to write a project proposal, and how to plan your project.
	 3.	 Conducting your project. This section covers the skills you will need while you 
are actually working on your project – from doing your literature survey to manag-
ing your time and any information and data that you collect, as well as how to liaise 
effectively with your supervisor. It also includes a chapter on software develop-
ment for those undertaking projects of this nature.
Preface

	 Preface
xii
	 4.	 Presenting your project. The final stage of your project is to present it as a written 
report and, possibly, an oral presentation. This section will cover the skills you will 
need to present your project in the best light and to the best of your abilities.
	 5.	 The future. The book concludes with some valuable information on how your 
project might be assessed, how you can take your project further in the future and 
how you might consider publishing your work.
 The mortarboard symbol emphasises parts of the book specifically aimed at research 
degrees (PhD, DPhil, etc.).

	
	
xiii
The author and publisher would like to express their thanks to the following reviewers 
for their invaluable feedback throughout the development of this book:
Jackie Archibald, University of Abertay
Xiaodong Liu, Napier University
Diane Richardson, University of Bedfordshire
Clive Rosen, University of Derby 
Publisher’s acknowledgements
We are grateful to the following for permission to reproduce copyright material:
Figures
Figures 6.13, 6.14 adapted from Ould, M. (1999) Managing Software Quality and 
Risk, © 1999 John Wiley & Sons Ltd. Reproduced with permission of John Wiley & 
Sons Ltd.; Figure 9.10 from Yanning Yang, Loughborough University; Figure 9.11 
from Rachael Lindsay, Loughborough University; Figure 9.12 from Martin Sykora, 
Loughborough University.
Tables
Table 7.3 adapted from Time Management: the essential guide to thinking and working 
smarter, Marshall Editions Ltd (Jones, K. 1998), © Copyright Marshall Editions.
Acknowledgements

Text
Epigraph on page 17 from How to get a PhD: a handbook for students and their super-
visors, 5th edn, Open University Press (Phillips, E.M. and Pugh, D.S. 2010) p. 56, 
McGraw-Hill Education; Text on pages 33–35 adapted from How to Research, 4th edn, 
Open University Press (Blaxter, L. Hughes, C. and Tight, M. 2010) p. 203, McGraw-
Hill Education; Example on pages 111–12 adapted from Dawson, C.W. and Wilby, R. 
(1998) An artificial neural network approach to rainfall-runoff modelling, Hydrological 
Sciences Journal, 43(1), pp. 47–66 reprinted by permission of the publisher (Taylor & 
Francis Ltd, http://www.tandfonline.com)
In some instances we have been unable to trace the owners of copyright material, and 
we would appreciate any information that would enable us to do so.
	 Acknowledgements
xiv

The background
SECTION
1


	
	
	
3
CHAPTER
1
• 1.1 Introduction
Pursuing a project within academia is not the same as performing a project within indus-
try. As a student on a computing degree course of one kind or another, you will be 
expected to look at things much more critically and more deeply than you would else-
where. In industry, for example, your line manager might ask you to develop a piece of 
software to solve a particular problem or improve productivity in a particular area – a 
database, a production control system or whatever. You could write this program well 
and install it within a few weeks or months and everyone would be satisfied. However, 
although this program might be perfectly adequate and work very well in practice, this 
project would be lacking academically.
Aims:
To introduce academic computing projects and the structure of this book.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand what projects are.
● Understand the different types of academic projects in computing and  
information sciences.
● Understand different degree structures and project requirements.
● Describe the roles different people have in academic projects.
● Understand how this book is arranged.
Introduction

	 Chapter 1 ● Introduction 
4
Why is this the case? Academic projects should provide evidence of a much deeper 
understanding of what you are doing. They require some form of justification and 
contextualisation. You are not expected to do merely what you are told to do, but you 
are expected to develop your own thoughts, arguments, ideas and concepts. You are 
expected to question things and look at things in new ways and from new angles. Merely 
‘turning the handle’ or doing what you are told does not lead to intellectual discovery 
and contributions to world thinking. Importantly, as a degree student you are expected 
to think. This ‘deeper’ understanding of situations, problems and events is supported by 
your research skills – skills that are vitally important within academic projects.
Academic projects are usually a critical component of your degree course. Sometimes 
they make up a significant component of your final year (for example, 30% or more), and 
sometimes, particularly at postgraduate level, they may represent all of your degree. There 
are a number of reasons why universities include project work as part of their courses.
● Assessment across a number of disciplines simultaneously. Your project will require 
you to apply things you have learnt from many different areas of your course – both tech-
nical and personal skills. The project will provide evidence of how much you have devel-
oped across a wide range of disciplines. It will also show your ability to draw together 
your knowledge and apply what you have learnt. This might be the first time that the 
importance of apparently different skills taught on your course may become clear.
● Allows you to develop new skills. The project will also enable you to develop skills 
you might not have covered explicitly on your course so far. These new skills might 
be technical (learning a new programming language, development method, design 
technique, research, etc.) and personal (time management, discipline, communica-
tion skills, report writing, etc.).
● Work independently. Your project might be the first time that you have had to work 
mainly on your own on a project that is primarily your own work, ideas and responsibility.
● Make a contribution. A project will allow you to make some form of contribution. 
Previously you might have been doing directed coursework, examinations, etc. The 
project will allow you to produce something that may be used by or benefit others.
This book aims to help you with this critical component of your course – be it at 
undergraduate or postgraduate level.
• 1.2 What are (computing) projects?
1.2.1   Introduction
Projects can be defined as ‘something which has a beginning and an end’ (Barnes, 1989 
cited by Turner, 1993: 4). Unfortunately, this rather broad definition of projects does not 
encapsulate their underlying purpose, which is to bring about some form of beneficial 
change. This change takes you from an existing situation to a desired situation sometime 
in the future. This can be represented by the Meliorist Model shown in Figure 1.1. In 
this figure a project is represented by a set of actions that you perform. A project thus 
enables you to move from one situation to another. Your movement towards the desired 
situation might stem from dissatisfaction with your current situation, a lure towards a 
situation which appears more satisfactory, or some combination of the two.

	
1.2 What are (computing) projects?
5
The desirable situation in this case represents some form of contribution to knowl-
edge – perhaps representing the development of a new tool, technique, discovery and 
so on. The term ‘contribution’ in this context necessarily implies the uniqueness of the 
project and novelty of its outcomes.
So far projects have been identified as having a beginning and an end (i.e., they occur 
within a specified time frame) – with a purpose being to bring about a beneficial change 
by making some kind of contribution. Another important aspect of projects that must be 
discussed is that they are made up of a series of considered activities. In other words, 
projects are broken down into a sequence of planned activities that are controlled as 
the project progresses – they do not simply occur in an ad hoc manner. This aspect of 
projects – project planning and risk management– is looked at in detail in Chapter 4. We 
should also consider the fact that projects consume a number of resources to achieve 
their purpose. What resources are consumed in your project is introduced in Chapter 4. 
How these resources are managed is discussed in Chapter 7.
Computing projects come in all different shapes and sizes, as the field they are drawn 
from is immense. However, these days it is more widely recognised, within academic institu-
tions, that computing projects need to do more than develop a piece of software. The project 
that you pursue must involve an element of research, it must justify its context and evaluate 
and discuss its results. Merely developing a tool or algorithm with no evaluation or contex-
tualisation may well be acceptable in industry, where commercial solutions are required. 
However, within the academic world, this is not the case and, depending on the nature of 
your project, it will have to contain an element of research to a greater or lesser extent.
Berndtsson et al. (2008) point out that the nature of computer science and infor-
mation systems means that projects are drawn from both the ‘hard’ sciences (natural 
science) and the ‘soft’ sciences (social sciences). Consequently, projects cover a vast 
range of topics, from highly technical software development projects to (equally diffi-
cult) case studies within information science. Figure 1.2 (adapted from Dawson, 2004) 
shows the extent of the computer science and information science field. At the left-hand 
side of this scale are the theoretical areas of computer science. These encompass areas 
such as mathematics, logic, formal methods, artificial intelligence and so on. Moving 
towards the centre of the scale we find practice-based computing. This focuses less on 
theory and more on the development of software systems – for example, software engi-
neering, software project management, design, development processes, requirements 
capture and so on. At the right-hand side of the scale are the softer issues in the field. 
These are concerned with the application, use, influence and impact that computers 
Figure 1.2 The landscape of computing (adapted from Dawson, 2004)
Figure 1.1 The Meliorist Model

	 Chapter 1 ● Introduction 
6
and information technology have on organisations and society at large. This side is also 
concerned with how organisations are structured and operate, how data are stored and 
processed, knowledge management and how information is disseminated throughout 
organisations. This might involve systems beyond software and hardware – for example, 
paper-based systems, processes, procedures and so on. Figure 1.2 also shows the dif-
ferent levels of project that this book covers on the vertical scale – from undergraduate 
projects to doctoral degrees. These levels are discussed in Section 1.3.
In terms of university degree courses, you will probably find that courses entitled 
‘Computer Science’ or ‘Artificial Intelligence’ tend to fall more towards the left-hand 
side of this scale. ‘Software Engineering’, ‘Computing’ and ‘E-business’ courses prob-
ably fall more towards the centre (with ‘Software Engineering’ to the left and ‘E-busi-
ness’ to the right). Courses entitled ‘Information Science’, ‘Information Technology’, 
‘Business and Information Technology’, ‘Business Information Systems’ and ‘Infor-
mation Systems’ will fall more towards the right-hand side. Some courses might fall 
anywhere along the scale depending on their content – for example, ‘Multimedia’ and 
‘Computer Studies’ can mean different things to different institutions.
This list is not intended to be exhaustive and you may find that your course falls some-
where else along this line. You should, however, have some idea of where your course 
lies on this scale as this will influence the type of project that is appropriate for you to 
undertake. This book will address the issues surrounding all of these areas.
The computing project that you embark upon gives you an opportunity to make your 
own contribution. There is little point in doing a project that merely regurgitates the 
work of others. Your own thoughts, ideas and developments are important and these are 
the things that people reading your report are interested in. It is through your project 
that you will develop not only your own skills but also the ideas and work of others. The 
level of contribution that undergraduate and postgraduate projects make is looked at in 
more detail in Section 5.1.
The following section introduces the different kinds of project that you are likely to 
encounter within the field of computing. In each of these cases we identify how these 
projects make some kind of academic contribution. They do not merely follow a sim-
plistic project process to develop a product at the end of the day.
1.2.2   Computing project types
This section outlines five categories of computing projects. These categories are not 
intended to be discrete and you may well find that your own project falls into two or 
even more of these classes (or it perhaps falls distinctly into one category but draws on 
approaches that are identified in others). In addition, the nature of your project will have 
an effect on the methods you will use to tackle it. The research methods that you might 
employ within your project are discussed in Chapter 2.
● Research-based. ‘Many good dissertations do no more than review systematically 
and impose some structure on, a field of interest’ (Sharp et al., 2002: 27). A research-
based project involves a thorough investigation of a particular area; 
improving your understanding of that area, identifying strengths and 
weaknesses within the field, discussing how the field has evolved, and 
acknowledging areas suitable for further development and investigation 
(identifying gaps). This kind of project will involve some form of literature search and 
review and would be suitable for taught bachelor’s or taught master’s courses.

	
1.2 What are (computing) projects?
7
So far, this definition of research-based projects has been ‘backward looking’ 
rather than ‘forward looking’ (Cornford and Smithson, 2006: 71). A research-based 
project may well have to do more than establish the field of study. For example, hav-
ing established the field (backward looking), a doctoral degree (a PhD, for example) 
would then be expected to contribute to that field (forward looking). This contribu-
tion might be achieved by addressing a research question, developing something 
new, solving a problem and so on. These additional steps are addressed in the fol-
lowing sections in which other project types are defined.
● Development. This category includes the development not only of software and hardware 
systems but also of process models, methods, algorithms, theories, designs, requirement 
specifications and other interim documents. Examples of software development projects 
are database systems, apps for phones and other portable devices, multimedia systems, 
information systems and web-based systems. For some developments (notably software) 
you will be required to include requirements documentation, designs, analyses and fully 
documented test results, along with user manuals or guides. The type of development 
you undertake will also affect the issues and problems you might face. For example, a web 
development project may have security issues, interface design issues, technical issues 
(perhaps related to the content management system you choose to use) and so on. A stand-
alone system will have issues surrounding, for example, portability and efficiency.
Depending on the nature of your course the focus for a development project may 
vary. For example, for software engineering courses, emphasis may be placed on the 
development and evaluation of a piece of software, following particular process mod-
els that generate interim evaluatory documentation. Information systems courses may 
require you to focus more on the development of broader systems using 4GLs, CASE 
tools and/or database systems. In this case evaluation of HCI (human–computer 
interaction), customer issues, requirements capture problems and the impact of the 
implemented system and working practices may be more your focus.
Whichever kind of development project you tackle it is unlikely that the develop-
ment of a product would be acceptable on its own. You would normally be expected 
to include a critical evaluation of the product as well as the development process used. 
Critical evaluation emphasises the distinction between the academic qualities of your 
work and technical ability alone. Figure 1.3 illustrates this point and contrasts a stu-
dent project and an industrial-based project that are both attempting to develop a 
software system to meet a user’s need. Although the student project goes someway 
to meeting the user’s needs for a system, there is much more to the project than that 
(and hence the user’s need for a system might be only partially fulfilled). In contrast, 
Figure 1.3 Comparison of student development project and industrial development project
User’s
need
Industrial
project
User’s
need
Student
project

	 Chapter 1 ● Introduction 
8
the industrial-based project is primarily focused on solving the user’s problem and 
little else. Consequently the industrial project develops a system that is as close as 
possible to meeting the requirement of the user (although it is never perfect), whereas 
the student project does not.
● Evaluation. This category encompasses all projects that involve some form of evalua-
tion as their main focus. For example, such a project might involve comparing several 
approaches to a particular problem; evaluating two or more programming languages 
(applied in different contexts or to different problems); analysing an implementation 
process within a particular industry; assessing different user interfaces; appraising a par-
ticular concept; assessing alternative and new technological approaches to a problem; 
analysing development methodologies to a problem; and so on. Projects in this category 
may well include case studies as a vehicle for evaluating the issue under consideration.
● Industry-based. An industry-based project involves solving a problem within either 
an organisation or another university department. Industry-based projects might be 
any of the other kinds of projects identified in this section. The difference in this case 
is that you are undertaking the project for an actual client, which carries with it a num-
ber of benefits as well as drawbacks. The pitfalls and benefits of choosing an industry-
based project are discussed in more detail in Section 3.2. The most important point is 
that the sponsor does not ‘hijack’ the project – that is, force it into a direction that the 
company wishes it to go, regardless of whether it is suitable for your academic work 
or your course. You will probably find that an action research method is employed in 
this kind of project (discussed in Section 2.4).
● Problem solving. A problem-solving project can involve developing a new technique 
to solve a problem, improving the efficiency of existing approaches or evaluating dif-
ferent approaches or theories in different situations. It might also involve applying 
an existing problem-solving technique or theory to a new area. In these cases, some 
form of evaluation would be expected: for example, did your new approach work well 
or did you discover reasons why it was unsuitable for problems of this nature? Why 
does one approach or theory work better in some situations than in others?
1.2.3   Examples of projects in different areas of computing  
and information systems
In this section we present some examples of the types of projects students might under-
take in the different areas within computing and information sciences. The list is by no 
means exhaustive and there will be some argument as to the different fields identified (you 
might think of other areas not listed here or feel that some should not be here at all). How-
ever, the list should provide some ideas on the types of projects you might be interested 
in and the sort of area you might want to work in. The areas are presented alphabetically.
● Algorithms and data structures. Working on improvements to existing algorithms 
and data structures; evaluating algorithms and data structures in different contexts.
● Applied computer science. Application of computer science in other fields. Study of 
computer science and information science in different problem domains; for example, 
how computer science is used in the medical sciences or how information science is 
used in local government.

	
1.2 What are (computing) projects?
9
● Artificial intelligence (AI). Development of new AI techniques or making improve-
ments to existing techniques; applying existing techniques to new problems; evaluat-
ing AI techniques in different problem domains.
● Computer architectures and hardware. Linking computers to hardware devices 
and developing systems to support and manage those devices; for example, linking 
computers to engine management systems; measuring the performance of different 
architectural components and their interactions; exploring new ways of structuring 
and linking hardware; discovering new ways of structuring computer architecture.
● Databases. Design and development of a database to solve a problem; evaluating 
or developing different ways of designing database structures; assessing database 
structures; developing ways of measuring databases; researching commit protocols 
and improvements to them; developing distributed databases and efficient means of 
designing them.
● Formal methods. Producing specifications and verification of processes or systems; 
reverse engineering formal specifications from existing systems; developing formal 
specification languages or adaptations to existing ones.
● Graphics and visualisation. Working with subdivision algorithms to build an image 
for geometric modelling; developing or using algorithms to analyse images.
● Human–computer interaction (HCI). Evaluating HCI in different systems for dif-
ferent purposes; designing system interfaces for specific purposes.
● Image processing, vision, pattern recognition. Image modification; repairing nega-
tives or photographs; image compression algorithms; handwriting recognition.
● Information systems. Research projects into how a company uses information; 
knowledge management; use of IT in different areas/organisations; information on 
social media; privacy; cookies and cookie policies; Data Protection Act.
● Networking. Measurement of network performance; protocol analysis; network 
security; security evaluation of protocols; designing and evaluating network archi-
tectures; wireless networks.
● Security and cryptography. Evaluating the effectiveness of different security proto-
cols; implementing and evaluating public cryptography algorithms; developing new 
cryptography algorithms; developing pseudo random number generators for cryp-
tography algorithms.
● Software engineering. Evaluating process models in different projects; developing 
new processes; developing new techniques for undertaking different stages of the 
development life cycle; finding ways to analyse software structure; evaluating main-
tenance issues of software; measuring software in new ways.
● Theoretical computer science. Implementing an algorithm; solving basic problems; 
designing algorithms; proving theorems and establishing theories.
1.2.4   Programming in computing projects
Although you are on a computing course of one kind or another, it is not necessarily the 
case that you will be expected to write a program. As noted earlier, the broad field of 
computing encompasses many topics such as information systems, software engineering, 
knowledge engineering, HCI, data communications, networks and computer systems 

	 Chapter 1 ● Introduction 
10
architecture. Not all of these fields involve programming, and to write a program for the 
sake of it is clearly ill-advised.
Sometimes programming is the main emphasis of your project, for example, if 
you are on a software engineering course. At other times you may need to write a 
­program as a ‘vehicle’ for testing and demonstrating one thing or another, for exam-
ple, to test out some ideas, demonstrate a technique or algorithm or evaluate some 
HCI concepts.
Whatever the case, as a computing student you will naturally be expected to produce 
code that is of acceptable quality. Although you may not be expected to produce a fully 
documented piece of software with test plans, designs, evaluation and so on, any code 
that you do produce should be satisfactory for your aims. Your supervisor should be 
able to advise you on the breadth and depth of any software that you produce as part of 
your project so make sure that you liaise with him/her closely. Some useful material on 
the approaches you can use to develop software systems is given in Chapter 6; ways of 
documenting software are outlined in Chapter 8; and steps to how you can demonstrate 
your program effectively are presented in Chapter 9.
• 1.3 Degree requirements
1.3.1   Degree structures
Educational institutions throughout the world have many different degree structures 
that take students from school/college-level education through undergraduate study 
to doctoral degrees (sometimes referred to as higher education). However, not only 
do countries have different interpretations of undergraduate and postgraduate study 
(for example, would you class a master’s degree as an undergraduate or postgraduate 
course?), they also have a number of different titles for qualifications that are essentially 
the same (PhD and DPhil, for example).
At ‘undergraduate’ level some countries have a single tier of higher education leading 
to the start of doctoral studies; for example, five years of study leading to the award of a 
master’s degree. Other countries have a two-tier structure in place that leads, first, to a 
bachelor’s degree (after around three, four or even five years of study) and then to a master’s 
degree (after a further one or two years of study). There is also diversity at doctoral level 
with some countries recognising an intermediate doctoral degree (one could argue the UK’s 
MPhil falls into this classification), and some countries having ‘higher’ doctorates (par-
ticularly in Central and Eastern Europe). Although a number of European countries have 
signed up to the Bolgona Declaration (a commitment to harmonise their higher education 
structures), there is still a long way to go to producing a common degree structure. At the 
time of writing 47 countries are involved in the Bologna process. For more information on 
this process see http://www.ehea.info, which is the official site of the Bologna process.
To avoid confusion and to provide consistency and a common framework for this 
book, we will avoid using the terms undergraduate or postgraduate study except where 
their meaning is clear or unimportant. Where necessary a differentiation will be made 
between taught degrees (such as bachelor’s and master’s degrees – BScs and MScs, for 
example) – which are predominantly based around taught courses that include some 
project element – and research degrees (such as MPhils and PhDs) which are primarily 
research-based projects that lead to some contribution to knowledge. In this case, 

	
1.3 Degree requirements
11
Figure 1.4 Higher education
although an MPhil and an MSc are both master’s courses, an MPhil is viewed at a higher 
level than an MSc because it involves a much more substantial project component, which 
is, after all, the focus of this book (see Figure 1.2). In this book the MPhil is understood 
to mean a research degree normally completed after around two years of study.
In this model students can enter higher education to study for a bachelor’s degree or 
a master’s degree. Before undertaking a research degree, students must have completed 
a taught degree to a required standard or equivalent prior learning. This sequence of 
higher education is shown in Figure 1.4.
1.3.2   Degree requirements for projects
As this book is aimed at students on both taught degrees and research 
degrees, it is worth spending a little time looking at the differences 
between projects that are undertaken at these different levels. These are 
general guidelines – your own department and university (and country) 
will have specific guidance on what is and what is not appropriate for your own level of 
study for your course.
A project undertaken as part of a taught course (bachelor’s or master’s degree) does 
not need to make great breakthroughs in science. It might involve the development of 
some software, it could be an extended case study or it might be research-based. How-
ever, generally speaking, you would not be expected to produce work at a level that could 
be published in an academic journal or presented at an international conference. This is 
not the case for research degrees, however. An MPhil should produce work that could be 
published (perhaps with some reworking), whereas students pursuing a PhD will prob-
ably be expected to have published some of their work before completing the final thesis 
(and in some European countries this is compulsory). At research degree level Chinneck 
(1999) contrasts masters (in this case research-based, postgraduate study) with PhD-level 
work in the following way: ‘The contribution of knowledge of a Master’s thesis can be in 
the nature of an incremental improvement in an area of knowledge, or the application of 
known techniques in a new area. The PhD must be a substantial and innovative contri-
bution to knowledge’. The University of Derby (1999) note the following abilities that a 
student is expected to demonstrate at research degree level:
● an ability to work independently with minimum supervision;
● an ability to draw on existing knowledge and identify additional knowledge needed 
for your study*;
● an ability to critically evaluate advanced literature (journal papers)*;
● ‘an ability to conceive original ideas’;

	 Chapter 1 ● Introduction 
12
● an ability to plan your work effectively*;
● an ability to select and use appropriate hardware, software, tools, methods and 
techniques*;
● an ability to present your work effectively in written and oral forms*;
● an ability to critically evaluate your own work and justify all aspects of it*;
● an ability to identify areas of further research in your chosen area.
Abilities marked with a star (*) are those that should be evident in taught degree pro-
jects too. What sets research degree work apart is (mainly) an ability to ‘conceive original 
ideas’. This emphasises that for a research degree you are expected to make some kind 
of contribution to knowledge – not just repeat the work of others. This is discussed in 
more detail in Chapter 5.
• 1.4 Stakeholders
1.4.1   Overview
Stakeholders are individuals (anyone) who are involved with your project. The most 
important person in your project is you. You are responsible for the overall completion 
of your project, meeting milestones, achieving objectives, satisfying users, satisfying the 
examiners and so forth. In no real order (as they all have significant roles to play) the 
other stakeholders in your project are your supervisor(s), your user(s), your client(s), your 
examiner(s) and any software testers/evaluators you might employ as part of your system 
evaluation (if you have one in your project).
1.4.2   Your supervisor
Imagine your project as a large boulder. At the start of your project this boulder is quite 
difficult to push (stationary objects like to remain stationary): getting a project started 
is always difficult. However, once the project is underway (the boulder is rolling), it 
becomes much easier to push and gathers momentum as the project unfolds. Now pic-
ture your supervisor alongside you. It is their role to encourage you as you push this 
boulder (your project) along. Your supervisor will encourage you at the start as you try 
to get the boulder moving. They are also there to ensure that you are pushing in the right 
direction. They will have an eye on the route you are taking and provide the occasional 
prod and push to you and the boulder to keep you on course. Your supervisor is also 
there to provide encouragement. If you feel yourself flagging at any stage, your supervi-
sor should be there to support you and give you the help you need. Ways in which you 
might be able to choose your supervisor are discussed in Chapter 3 and we look at how 
you can use your supervisor effectively as your project progresses in Chapter 7.
Sometimes (particularly for research degrees) you may have more than one supervi-
sor. This is especially common where the area of study straddles two fields of exper-
tise. In addition, research degrees often have a supervisor (someone who is responsible 
for the student overall) and a director of studies or director of research. The director of 
research is sometimes a more senior member of academic staff who is interested in the 
strategic (rather than week-to-week) direction of the project. You may see your supervi-
sor once every one or two weeks, but you would only see your director of research every 
six months or perhaps just once a year.

	
1.4 Stakeholders
13
1.4.3   Client(s) and user(s)
If your project involves the development of a software system or involves action research 
or case studies you will probably be working with a client and/or a user. It is important 
to realise the distinction between these two groups of people. A client is usually the 
project’s sponsor – they have requested the development of the system or study under-
taken. The user, on the other hand, will be the one who eventually uses the system or the 
results of the project. Sometimes the client and the user are one and the same but often, 
if you are developing a system for a company, for example, they are not. For instance, 
you might be asked to develop a website for a company to sell its products. The client 
is your contact within the company but your user(s) is anyone who will access that site.
There are usually conflicts when the client and the user are different: for example, 
should you provide something the client requests that you know the user won’t like (the 
client may have a strategic view of the system that the user is unaware of)? How do you 
persuade the client that a particular piece of functionality is needed by the user when the 
client feels it is unnecessary?
In other cases your supervisor may be your client and/or user as they may have pro-
posed the project you are undertaking. In this case they will be acting in all three roles. 
This can cause conflicts as their advice as a supervisor may not tally with their needs as a 
user (for example, as a user they may request certain features from your software system, 
but as a supervisor they may recommend that you do not include that feature as it may 
take too much effort for little reward).
1.4.4   Examiners
The number and type of examiners you will encounter on your course will 
largely depend on the level of project you are undertaking (undergraduate 
or postgraduate) and the regulations your institution has in place (these 
vary from institution to institution and country to country). At undergrad-
uate level, for example, your supervisor may be the only person to mark your project. 
However, it is more likely that another academic in your department (or perhaps another 
department within your university) will be involved. Moving to postgraduate projects, 
external examiners (those from other departments and usually other universities) will 
be involved. Any number of examiners can be involved in the assessment of projects – 
from individual examiners to panels of examiners that act as a committee to evaluate 
the contribution of your work. The examiner(s) will also be looking for a number of 
things in your project – from the contribution a PhD project makes, for example, to the 
use of appropriate processes, methods and techniques for an undergraduate software 
development-type project. The criteria examiners look for when evaluating projects are 
discussed in Chapter 10.
Depending on the nature of your course, examiners can also be involved at different 
stages as your project progresses. For example, an examining committee may be involved 
early on in your project to evaluate your project’s requirements or proposal. An examiner 
may need to see an annual report or other information.
You should be aware of the regulations regarding the evaluation and examination 
of your project and follow any procedures closely. Institutions are quite strict when it 
comes to examinations and insist that procedures are followed to the letter. Make sure 
that your supervisor is aware of the current procedures at your institution and obtain 
their advice on the requirements for the examination of your project.

	 Chapter 1 ● Introduction 
14
1.4.5   Evaluators and testers
If you are developing a software system as part of your project you will need to test and 
evaluate this system at some point. It would be wrong to complete all this testing and 
evaluation on your own and so others will be involved. These people can range from your 
client, who has requested the software, the user(s) who will actually use the software, 
to people (either expert or not – for example, colleagues from your course) who are not 
involved with the project but can, nevertheless, provide you with useful feedback.
The issues surrounding software evaluation and testing are discussed in more detail in 
Chapter 6. It also describes those involved with the evaluation and raises some issues you 
will need to consider when using others in this capacity.
• 1.5 How this book is arranged
1.5.1   Overview
This book is split into five main sections that approximate chronologically to your 
­project’s progress. Section 1 includes this chapter and covers some preliminary 
­background ­material on the types of projects you might pursue and the nature of 
research. Section 2 covers the skills necessary to set your project’s foundation. It covers 
topics such as choosing a project, planning how to undertake the project and literature 
searching and reviewing. Section 3 moves on to look at how to manage your project as 
it is progressing. This section also includes ways of developing software systems if this 
is relevant to your own project. Section 4 looks at the topics involved with completing 
and submitting your project – writing reports, giving presentations, viva voce examina-
tions and so on. Section 5 looks into the future – for example, taking your project further 
after it is completed.
Figure 1.5 illustrates how this book is arranged. Although the sections are designed 
to be read in order as your project progresses, those chapters within each section can be 
read in an order that suits your needs. Note that Chapter 3 (Choosing a project and writ-
ing a proposal) should be read before Chapter 4 (Project planning and risk management), 
whereas Chapter 5 (Literature searching and literature reviews) can be read before, after 
or even between both of these.
Note
It is advisable to read Section 10.2 in Chapter 10 before you proceed any further with your 
project. This section covers what examiners will ultimately be looking for and evaluating 
within your project. Knowing what you need to aim for now is useful as it will guide you 
in the way you undertake your project and provide a focus for your effort. In addition, for 
those in need of some instant help, Section 10.6 provides the top ten tips for successful 
projects based on other sections within this book.

	
1.6 Summary
15
1.5.2   Taught degree projects versus research degrees
The mortarboard and certificate symbol (left) highlights areas in the book 
where differences between taught degree (BSc, BEng, etc.) and research 
degree (PhD, DPhil, MPhil, etc.) projects are discussed. MScs may strad-
dle the boundary between the two, depending on how they are taught 
and assessed – for example, some require a significant research component (potentially 
leading to publishable work), whereas others may accept less research-oriented software 
development projects.
Not all sections in the book are relevant to PhD students, although they may provide 
some useful background reading. Similarly, some sections may go into more depth than a 
particular taught degree project requires but, for other taught degree projects (those that 
are research-based, for example), the text may be highly relevant. Use these symbolised 
sections to decide which portions of the book are suitable reading for your own project.
• 1.6 Summary
● The field of computing ranges from ‘hard’ theoretical computer science, through 
practical software implementation, to ‘softer’ areas of information systems that are 
concerned with the use and the effect of IT.
● Computing projects tend to fall into one of the following five categories: research 
based, development projects, evaluation projects, industry based or problem solving.
● This book covers projects that are undertaken as part of taught degrees (bachelor’s 
and master’s degrees such as BScs and MScs) and research degrees (from MPhils to 
PhDs).
● Your project will have a number of stakeholders, the most important of which is you. 
Others include your supervisor(s), your client(s), user(s), examiner(s) and software 
testers and evaluators.
● This book is arranged chronologically into the following five sections: Background, 
Foundations, Conducting, Presenting and The Future.
Figure 1.5 How this book is arranged

	 Chapter 1 ● Introduction 
16
• 1.7 Action points
● Consider where your own course and project lie on the computing scale shown in 
Figure 1.2.
● Classify your own project into one of the categories identified in Section 1.2.2.
● Identify the stakeholders in your project. Do you know them all yet? What is your 
relationship with them?
● Read Section 10.2 in Chapter 10 to see what your project must achieve to satisfy the 
examiners. Think about what you will need to do to meet these criteria.

	
	
	
17
CHAPTER
2
• 2.1 What is research?
The good researcher is not ‘one who knows the right answers’ but ‘one who is struggling 
to find out what the right questions might be!’
Phillips and Pugh (2010: 56)1
Aims:
To introduce research in the context of computing projects.
Learning objectives:
When you have completed this chapter, you should be able to:
● Discuss what research means.
● Understand the research process.
● Classify research and understand the different research methods  
that are available.
● Understand the issues surrounding interviews, questionnaires  
and observational studies.
● This chapter is highly relevant for research degrees.
● This chapter is highly relevant for research-based taught degree 
projects and provides useful reading for other taught degree 
projects.
Research
1 How to get a PhD: a handbook for students and their supervisors, 5th edn, Open University Press (Phillips, E.M. 
and Pugh, D.S. 2010) p. 56, McGraw-Hill Education.

	 Chapter 2 ● Research 
18
2.1.1   A definition
A useful starting point from which to discuss research is to examine a seminal definition 
of the term. Research is defined by the Higher Education Funding Council for England 
(HECFE) as ‘original investigation undertaken in order to gain knowledge and under-
standing’ (RAE, 2008). There are three key terms within this definition that have been 
italicised for emphasis: original, gain and knowledge and understanding. These terms 
are essential to the definition of research and will be discussed in turn.
2.1.2   Originality
There is no point in repeating the work of others and discovering or producing what 
is already known. Quite simply, originality is doing something that has not been done 
before. Although this remains a relatively simplistic idea of the term, it is important to 
discuss how originality relates to projects. What can you do that is original? What type of 
things can you produce that are original?
You can be original in two ways. First, you can be original in the way you do things – 
for example, doing something someone has done before but using a different technique 
or approach. Second, you can be original by producing or developing something that 
has not been produced before.
In terms of originality in the way you do things, Cryer (2006: 193–195) identifies a 
number of areas in which your project can be original.
● Tools, techniques, procedures and methods. You may apply new tools and tech-
niques to existing problems or try new procedures and methods in contexts where 
they have not been applied before. Whether these investigations prove successful 
or not, you will still be doing something that is original and discovering why these 
approaches are suitable in certain circumstances or why they are not.
● Exploring the unknown. Although rare, you may investigate a field that no one has 
thought to investigate before. Recent discoveries in scientific fields may open up 
many new possibilities and unexplored avenues of research that you can pursue.
● Exploring the unanticipated. Although you may investigate a field of research that 
has been looked at many times before, you may come across unexpected results or 
exciting new directions that have not been explored. Investigating these ‘side tracks’ 
may prove fruitful, but take care that they don’t lead to dead ends. You might also be 
able to contribute to these fields by further developing original work.
Exploring a field that has already been investigated does not necessarily fail to be 
original. You may be able to improve on something that already exists, provide a new 
perspective or interpretation or produce a unique in-depth study of that field that has 
not been available before.
● The use of data. You can interpret data in different ways, use them in new ways or 
apply them in alternative areas that have not yet been investigated.
In terms of your project’s outcomes, Cryer (2006: 196) identifies originality from the per-
spective of the results themselves and, also, any original by-products of the research. Thus, 
original outcomes might include a new product, a new theory, a new model or method. 
Where the intended outcomes are not achieved, by-products might still represent original-
ity – for example, an understanding of why a particular experiment failed or why a particular 
technique did not work in a new area.

	
2.1 What is research?
19
2.1.3   Gain/contribution
‘Gain’ is, perhaps, an unfortunate term in the HEFCE definition because it does not 
allude to the fact that research should actually lead to a contribution to knowledge. It is 
all very well performing an exclusive piece of research and learning something new for 
ourselves, but unless you can disseminate this knowledge to others, the results of your 
research are somewhat wasted. With this in mind the following discussion will focus on 
the term ‘contribute’, which gives the much clearer message that research should add to 
world knowledge so that it is accessible to all and not just yourself.
Figure 2.1 provides an overview of the world’s body of knowledge and how contri-
butions can be made to it. This body of knowledge represents world understanding, 
theories, concepts, models, the sciences, the arts and so forth. This knowledge is stored 
in books, journal articles, conference proceedings, documents, reports, the Internet, 
art, people’s minds and more. Your own knowledge, portrayed by the shaded region, 
is shown as subsumed within this domain. You can obviously learn things that others 
already know; shown as expansion to your own knowledge ‘cloud’. Likewise, you can 
make contributions to world knowledge from your research, such as inventions, new 
theories and so on. These are shown as expansions to the world’s body of knowledge 
by the dashed lines. Thus, ‘contribution’ refers to a sharing of new ideas, theories and 
results with the rest of the world and expanding what is already known.
2.1.4   Knowledge and understanding
To explain what is meant by knowledge, it will be discussed in terms of a hierarchy 
consisting of data, information, knowledge and wisdom. Post and Anderson (2006: 5) 
identify the meaning of these terms as outlined below.
● Data. Data are the factual elements that describe objects or events. They represent the 
raw numbers and raw text that you gather from your investigations. For example, as 
part of your research project, you may need to gather rainfall data from various sites 
Figure 2.1 Contributions to knowledge

	 Chapter 2 ● Research 
20
around the country. These data, providing daily rainfall totals at 50 sites, are gathered 
as raw numbers that mean virtually nothing as they stand. This is sometimes referred 
to as intelligence gathering and, although vital to a research study, is not research in 
the true sense of the word.
● Information. Information represents data that have been processed in order to pro-
vide you with some insight into their meaning. In other words, the data have been 
analysed, summarised and processed into a more understandable and useful format. 
In this form information can be passed to other people; for example, in books, arti-
cles, recordings, speech and so on (Orna and Stevens 1995: 36).
Converting your rainfall data into information may lead to graphs summarising 
monthly totals, charts presenting seasonal fluctuations and tables summarising aver-
age daily rainfall at different sites. In these formats the data have some meaning and 
you now have some insight into what these data represent.
● Knowledge. Knowledge is your higher level understanding of things. Whereas informa-
tion provides you with an idea of the ‘what’ (i.e., what is happening in the real world), 
knowledge represents your understanding of the ‘why’. Knowledge is your personal 
interpretation of what you gain from information as rules, patterns, decisions, models, 
ideas and so on. According to Orna and Stevens (1995: 35), knowledge represents the 
‘results of experience organized and stored inside each individual’s own mind’.
While your information about rainfall provided you with an overview of what 
was happening to weather over a period of time, knowledge represents your under-
standing of why rainfall might have changed during this period. For example, your 
knowledge would be your understanding of why rainfall had increased in a particu-
lar part of the country since 1900.
● Wisdom. Wisdom represents your ability to put your knowledge into practice. It 
represents your ability to apply your skills and experiences to create new knowledge 
and adapt to different situations.
With reference to the rainfall data example, wisdom would represent your ability to 
predict likely changes to rainfall and climate in the future or enable you to understand 
why rain falls at particular levels in entirely different parts of the world.
One more category that is worth mentioning here is Theory. While data, information, 
knowledge and wisdom represent a relatively ‘firm’ understanding of what is going on 
and how things can be applied, theory represents ideas, opinions and suppositions based 
on your observations of the world. A theory is not necessarily true but, at the moment, 
it represents the best explanation of what you observe.
Although knowledge has been defined from a personal viewpoint, world knowledge 
can be defined along much the same lines. In this case world knowledge relates to world 
understanding, wisdom and interpretation by everybody and everything that is recorded 
or documented somewhere and somehow.
Collecting data and information on their own is termed as ‘intelligence-gathering’ by 
Phillips and Pugh (2010: 54). These data are used to answer what Phillips and Pugh term 
the ‘what’ questions – i.e., what is happening in the world, what don’t we know and what 
can we find out? Research, however, must go beyond merely gathering data and describ-
ing what you see. It must make a contribution to knowledge. It looks for ‘explanations, 
relationships, comparisons, predictions, generalisations and theories’. Research thus 
addresses what Phillips and Pugh term the ‘why’ questions – why do things happen the 

	
2.1 What is research?
21
way they do? Why is the situation the way it is? And so on. While data and information 
on their own can only answer the ‘what?’, knowledge and wisdom address the ‘why?’
Finally, it is worth discussing how we interpret our understanding of our own knowl-
edge. At the start of the research process we have no real understanding of how little 
we know about our subject – we are not conscious of our own incompetence (blissful 
ignorance). As our research progresses we move into a (perhaps somewhat demoralising) 
phase when we become conscious of our incompetence – we become aware of just how 
little we know about the subject area we are investigating and can become overwhelmed 
by how vast that area is (demoralised). As our research progresses and we begin to under-
stand the field, we move into the next phase – becoming competent in our subject and 
aware of this understanding (conscious of our competence – confident). Finally, we move 
into a phase in which we lose sight of just how much we do know – we become uncon-
scious of our competence (complacent). Figure 2.2 illustrates this development in terms 
of competence and consciousness.
2.1.5   Summary
Now that the three main aspects of research have been looked at in detail, one other 
definition of research is presented to see if it encapsulates the essence of the term. As an 
example, take the definition of research by Sharp et al. (2002: 7), which is:
‘seeking through methodical processes to add to one’s own body of knowledge and 
to that of others, by the discovery of non-trivial facts and insights’
Once again the important terms within this definition have been italicised, a number 
of which relate directly to those that have been discussed already. ‘Add’, for example, 
relates to the discussion of ‘contribution’, and ‘discovery’ appears to imply some form 
of ‘originality’. ‘Non-trivial facts’ and ‘insights’ relates to ‘knowledge’ and ‘wisdom’, 
not data or information.
One element that this definition contributes, that the earlier definition from the 
HEFCE did not, is the idea of a ‘methodical process’. This identifies the fact that research 
is not something that is done in an ad hoc manner, but is something that is planned and 
pursued in a considered way. Thus, the process of performing research, which is dis-
cussed in the following section, is methodical.
Figure 2.2 Self-awareness of a research field
Demoralised
Conscious
Blissful
ignorance
No
Yes
Yes
No
Competent
Complacent
Confident

	 Chapter 2 ● Research 
22
Drawing these points together results in the following succinct definition of research, 
which encapsulates all the elements discussed so far – consideration, originality, contri-
bution and knowledge:
Research is a considered activity which aims to make an original contribution to 
knowledge.
• 2.2 The research process
2.2.1   Overview
One thing that the above definition of research recognises is that research must be a con-
sidered activity. In other words, your research activity should not be performed as and 
when you feel like it, but it should follow a recognised process. Blaxter et al. (2010: 8–9) 
identify four common views of the research process; these will be referred to as sequential, 
generalised, circulatory and evolutionary.
● Sequential. The sequential process is the simplest view of all. In this process a series 
of activities are performed one after another as a ‘fixed, linear series of stages’. An 
example of such a process is the systematic process model of Sharp et al. (2002: 17). 
This process consists of seven unique, sequential steps:
Identify the broad area of study.
Select a research topic.
Decide on an approach.
Plan how you will perform the research.
Gather data and information.
Analyse and interpret these data.
Present the results and findings.
Although this model appears entirely sequential, Sharp et al. admit that repetition 
and cycles may take place during this process. However, how and when this repetition 
takes place is not explicitly identified. Another, perhaps simpler, example of a sequen-
tial research process is that defined by Greenfield (2002: 7–8). Greenfield breaks the 
research process into four steps:
	
1.	Review the field – i.e., perform a literature survey.
	
2.	Build a theory – based on your understanding and interpretations of the field.
	
3.	Test the theory – does it work?
	
4.	Reflect and integrate – i.e., update your ideas based on your ‘tests’ and contribute 
your new-found knowledge to others.
● Generalised. The generalised research process is identical to the sequential process in 
that a defined sequence of activities are performed one after the other. However, the 
generalised model recognises that not all stages are applicable and it may be necessary 
to perform some steps in different ways, depending on the nature of the research. 
Thus, the generalised model identifies alternative routes that may be taken at different 

	
2.2 The research process
23
stages depending on the nature and outcomes of the research. An example of such a 
model is that of Kane (1985: 13), which has 11 distinct stages and a number of alterna-
tive research methods.
● Circulatory. The circulatory approach recognises that any research that you perform 
is really only part of a continuous cycle of discovery and investigation. Quite often 
research will uncover more questions than it answers and, hence, the research process 
can begin again by attempting to answer these new-found questions. Experiences of 
research might lead you to revisit or reinterpret earlier stages of your work (Blaxter 
et al., 2010: 9). The circulatory interpretation also permits the research process to be 
joined at any point and recognises that the process is never-ending.
An example of a circulatory process is Rudestam and Newton’s Research Wheel 
(2007: 5), which suggests a ‘recursive cycle of steps that are repeated over time’.
● Evolutionary. The evolutionary concept takes the circulatory interpretation one stage 
further and recognises that research must evolve and change over time, not necessarily 
following a defined circulatory pattern or repeating the same forms of analysis and 
interpretation that were performed before. The outcomes of each evolution impact 
on later ones to a greater or lesser extent.
Perhaps one of the more appropriate examples of the research process is that defined 
by Orna and Stevens (1995: 11). They define a process that is circulatory at the top level 
and evolutionary within the main search/investigation stage of the process. Figure 2.3 
is an adapted interpretation of this model.
Figure 2.3 The real research process

	 Chapter 2 ● Research 
24
Figure 2.3 shows a circulatory research process that begins in the top left-hand corner 
with a definition of your search. Orna and Stevens (loc. cit.) identify this search definition 
as an attempt to answer the following questions:
● ‘What am I looking for?’
● ‘Why am I looking for it?’
● ‘How shall I set about it?’
● ‘Where shall I start looking?’
Following on from this stage you begin your evolutionary investigation of the chosen 
research area. This investigation will take place within the current boundaries of world 
knowledge as you search through, digest and evaluate material that is available. This 
search/investigation is not clear-cut and will evolve over time. It will take time for your 
ideas to mature, you may find yourself pursuing dead ends, and you might create more 
questions than answers. Eventually your diligence will hopefully pay off and you will 
discover something of value.
This discovery must then be disseminated to others through your reports, conference 
and internal presentations, journal articles and discussions. There is no point in keeping dis-
coveries to yourself as to do so ignores a fundamental purpose of the research process – that 
of disseminating your new-found ideas and results to others. Through this communication 
you are able to make a contribution to world knowledge and ­understanding – shown by the 
shaded area in Figure 2.3.
However, although you may have discovered something of value, and contributed this 
to world knowledge, the research process might be only just beginning. These discover-
ies might lead to new questions, new avenues of research and so on. Thus, the research 
cycle is entered once again as you redefine your search and continue your voyage of 
discovery.
2.2.2   Intellectual discovery
Although the research process can be represented by a model of one kind or another, 
your own reasoning processes and intellectual discoveries are often much more com-
plex and personal. When you are looking for questions to answer and answers to 
those questions, you will often follow a complex process of inductive and deductive 
reasoning.
● Inductive reasoning. You start with your observations of the world and come to 
general conclusions about it. In other words, you build models and theories based on 
your interpretation of the world. Clearly, this interpretation will depend on the data 
and information you can draw from the world, the subject/problem you are studying 
and, importantly, what you already know and believe.
The knowledge that you can obtain from what you are studying is referred to as 
epistemology (Cornford and Smithson, 2006: 61). You can either draw general con-
clusions from what you observe and from what you are studying and apply them to 
other things (positivism), or you can only induce knowledge unique to yourself and 
the particular situation under study (anti-positivism).

	
2.3 Classifying research
25
● Deductive reasoning. You start with your knowledge and understanding of the world 
and predict likely observations within it, even though you might not have encoun-
tered them before.
Deductive reasoning is affected by your theory of reality, your own personal under-
standing of the world and your underlying assumptions about what you are investi-
gating. This is referred to as ontology. Different people might deduce different things 
as their understanding differs from your own and they see things in different ways.
To solve complex problems you might need to follow a complex chain of inductive 
and deductive reasoning. As discussed earlier, knowledge is what you derive from induc-
tive reasoning. In other words, you build your ideas, models, theories and understand-
ing based on your inductive reasoning about the world. Wisdom, on the other hand, is 
evident from your abilities of deductive reasoning – applying what you know to other 
situations and problems you haven’t yet encountered.
There is more to intellectual discovery than inductive and deductive reasoning alone. 
If you are having difficulty solving a problem, Greenfield (2002: 6) outlines two interest-
ing methods of intellectual discovery listed that might help:
‘The method of Pappus: assume the problem is solved and calculate backwards’
‘The method of Terullus: assume a solution is impossible and try to prove why’
In addition, Greenfield also suggests trying techniques such as:
● Random guesses. This is a similar technique to brainstorming whereby you try to 
solve a problem by generating a number of potential solutions at random. Hopefully 
one of them will make sense and work.
● Analogy. Is the problem similar to anything else that already has a solution or 
explanation?
● Inversion. Try to look at things from the opposite angle. For example, instead of 
asking ‘which computer language should I use?’ ask ‘why shouldn’t I use Java?’.
● Partition. Break the problem or situation down into smaller, more manageable and 
understandable parts.
It is also worth considering where you are heading with your research before you 
spend several months pursuing it. For example, quite often research students will get 
an idea for their investigation and pursue it enthusiastically. However, when they finally 
obtain the ‘answer’ they realise that it was of little value in the first place. Try to think 
of where you are going, assume you have obtained the answer already, and ask yourself 
‘so what use is this to me?’
• 2.3 Classifying research
2.3.1   Introduction
Research can be classified from three different perspectives: its field, its approach and its 
nature. These three categories are adapted from the four categories discussed by Sharp et 
al. (2002: 13) and Herbert (1990: 1). These authors identify an additional category called 

	 Chapter 2 ● Research 
26
purpose. However, as the purpose of research is arguably to contribute to knowledge, the 
way that research achieves this contribution has been identified here subsumed within 
its nature.
● Field. The field of research is ‘little more than a labelling device which enables groups 
of researchers with similar interests to be identified’ (Sharp et al., loc. cit.). For exam-
ple, in the topic of computing you might identify research fields in areas such as 
information systems, artificial intelligence, software engineering and so on. These 
topics may be further subdivided into more specific topics to aid the more specialist 
researcher or expert distinguish aspects of the field.
● Approach. Approach represents the research methods that are employed as part of 
the research process – for example, case study, experiment, survey. These methods 
are discussed in more detail in the following section.
● Nature. The type of contribution that research makes to knowledge depends upon its 
nature. Sharp et al. (2002: 15–16) identify three categories that can be used to classify 
the nature of research:
Category 1.	 Pure theoretical development.
Category 2.	 Research that reviews and assesses pure theory and evaluates its potential 
for practical application.
Category 3.	 Applied research that has some practical application or outcome.
The nature of research can also be identified according to the following common clas-
sifications, which are adapted and expanded from Sharp et al. (loc. cit.), Herbert (loc. cit.) 
and Saunders et al. (2012: 171–172):
● Pure theory – developing theories to explain things without necessarily linking them 
to practice. This can be based on your own inductive reasoning which leads you to 
make conclusions and theories about the world as you see it.
● Descriptive studies – reviewing and evaluating existing theory and knowledge in a field 
or describing particular situations or events. This might include testing existing theo-
ries, describing the state of the art, or looking for limits in previous generalisations.
● Exploratory studies – exploring a situation or a problem. These studies are useful for 
finding out ‘what is happening; to seek new insights; to ask questions and to assess 
phenomena in a new light’ (Robson, 2002: 59). Exploratory studies can be performed 
through literature searches, open questionnaires and interviews. These studies can 
start out by exploring particularly broad areas, concepts and ideas, before focusing 
in and narrowing down to specifics as the research progresses. The process is thus an 
iterative and flexible one that seeks new information and ideas. Exploratory studies 
can be used to formulate a precise question that has not been defined before.
● Explanatory studies – explaining or clarifying something or some phenomena and 
identifying the relationships between things.
● Causal studies – assessing the affects that one or more variables have on another. The 
independent variables are those which might be having an influence on the depend-
ent variable in which you are interested. In these studies you would manipulate the 
independent variables and monitor changes to the dependent variable. For example, 
does the size of software product (independent variable) affect how difficult it is to 
maintain (dependent variable which is measured in some way)?

	
2.4 Research methods
27
In these studies it is important to ensure that extraneous factors do not influence 
your results. For example, software size appears to be influencing maintainability 
but, in fact, maintainability might be attributable to a range of other factors you were 
unaware of and did not control.
● Resolving a problem with a novel solution and/or improving something in one way 
or another. In this case the problem is already clearly defined or understood and it 
is the means of solving the problem that needs to be discovered. This might involve 
solving a series of smaller subproblems that could be projects in their own right.
● Testing-out research – which explores the limits of existing theories and generalisations. 
This type of research explores existing boundaries, to see if things work under different 
pressures and conditions and how they might integrate with new technologies. It might 
also involve applying theories in different areas to see if they can be used elsewhere.
2.3.2   What is good research?
You should now have an idea of what research is about and how to classify it, but what 
is meant by good research? Phillips and Pugh (2010: 55–57) identify three characteristics 
of good research.
● Open minds. You should work with an ‘open system of thought’. Be open minded 
to the questions posed. ‘Conventional wisdom and accepted doctrine . . . may turn 
out to be inadequate’. Do not allow yourself to be limited by pre-existing thinking.
● Critical analysis. Examine data critically. Are these figures correct? Have they been 
affected in some way? What do these data really mean? Are alternative data available? 
Are these data appropriate for the study we are undertaking? Are there weaknesses in 
the data? Can these data be interpreted differently?
● Generalisations. Researchers generalise and specify limits on the generalisations they 
identify. Generalisation allows research to be interpreted and applied to a wide variety 
of situations. However, researchers must know the limitations of these generalisa-
tions. Generalisations stem from your own wisdom and evolve from your deductive 
reasoning which leads you to develop ideas about things you have not encountered 
before with certain caveats.
Failure to apply these characteristics perpetuates the status quo – everything remains 
unchallenged and stays the same. Without an open mind to things, without a critical 
eye and without an ability to generalise your understanding to different things, you will 
not make a contribution to knowledge. This is, after all, the main aim of your research.
• 2.4 Research methods
2.4.1   Overview
Berndtsson et al. (2008: 13) identify two main classes of research methods – ­quantitative 
and qualitative. Quantitative research methods are associated with measuring things on 
numeric scales. According to Berndtsson et al., these methods stem from the ­natural sci-
ences and are concerned with understanding ‘how something is constructed/built/works’. 

	 Chapter 2 ● Research 
28
In the natural sciences one is usually concerned with testing hypotheses and Berndtsson 
et al. point out that ‘repeatability of the experiments and the testing of hypotheses are 
vital to the reliability of the results’.
Qualitative methods, on the other hand, have their origins in the social sciences. 
Berndtsson et al. state that these methods are ‘primarily concerned with increasing 
understanding of a substantive area, rather than producing an explanation for it’. Qual-
itative methods are more common within the field of information science and involve 
methods such as case studies and surveys. These methods, along with a number of oth-
ers, are discussed in the following section.
2.4.2   Research methods
Four of the most common research methods that you might use (either individually or 
in combination) are action research, experiment, case study and survey:
Action research	 Involves ‘the carefully documented (and monitored) study of an attempt 
by you. . .  to actively solve a problem and/or change a situation’ (Her-
bert, 1990: 29). Sometimes referred to as participant observation, it 
involves working on a specific problem or project with a subject or, 
more usually, an organisation and evaluating the results. With action 
research you must ensure that you do not become too obsessed with 
completing the action itself and neglect the real reason for doing it – 
i.e., evaluating it as part of your academic project.
Experiment	
Involves an investigation of causal relationships using tests controlled 
by yourself. Quite often quasi-experimental research will have to be 
performed due to problems of insufficient access to samples, ethical 
issues and so on. According to Saunders et al. (2012: 174–175), experi-
ments typically involve:
● defining a theoretical hypothesis;
● selecting samples from known populations;
● allocating samples to different experimental conditions;
● introducing planned changes to one or more variables;
● measuring a small number of variables;
● controlling all other variables.
Experiments are usually performed in development, evaluation and 
problem-solving projects.
Case study	
A case study is ‘an in-depth exploration of one situation’ (Cornford and 
Smithson, 2006: 71). It involves the investigation of a particular situ-
ation, problem, company or group of companies. This investigation 
can be performed directly, for example, by interviews, observation, 
etc.; or indirectly by studying company reports or company docu-
mentation. Berndtsson et al. (2008: 62) point out that you should not 
merely report on the outcome of the case study investigation, but also 
attempt to ‘generalise from the specific details of the examined setting, 
attempting to characterise the situation for which the studied organisa-
tion is typical’.

	
2.4 Research methods
29
Case studies usually generate a large amount of subjective data – 
data that you must sift, analyse and interpret to produce meaningful, 
accurate and fair conclusions. You should also be aware of your own 
influence on the case study if it is performed directly. For example, 
when you interviewed staff within a local company, did they tell you 
what they felt you wanted to hear rather than the facts of the situation? 
Is there any means of ‘triangulating’ your data – i.e., obtaining the data 
from two or three different sources to confirm the truth in what you are 
told (and thus eliminating the possible influence you might be having 
on the data capture)?
For more information on case study research refer to texts such as 
Gerring (2007) and Yin (2014) which are entire books devoted to this 
issue.
Survey	
This is usually undertaken through the use of questionnaires or inter-
views. It allows ‘the collection of a standardised data from a sizable 
population in a highly economical way’ (Saunders et al., 2012: 177). 
As part of a survey you might have to identify samples, sample sizes, 
design questionnaires and define interviews as appropriate. Although 
questionnaires and interviewing are covered in the following sections, 
Czaja and Blair (2005) and Groves et al. (2009) are two texts that cover 
the survey research method in detail.
Research methods can also be classified according to their ‘time frame’. In other 
words, does the study result in a snap shot of what you have observed or do your data 
provide an insight into events over a period of time? A snap shot of a situation or event is 
referred to as a cross-sectional study. A long-term picture, on the other hand, in which 
data are gathered continually over a period of time, is called a longitudinal study. Which 
kind of study you use will depend on the nature of your research and what you hope to 
achieve. For more information on these kinds of study refer to texts such as Saunders 
et al. (2012: 174–185) and Cornford and Smithson (2006: 70–71).
Three research techniques that crop up again and again in both case study research 
and surveys are interviews, questionnaires and observation. Although the detail of these 
techniques is covered in many other texts, it is worthwhile including a brief overview 
of these techniques here.
2.4.3   Interviews
Interviews can be performed during a number of stages of your project. For example, 
from the preliminary requirements gathering stages of a software development-type pro-
ject, to the evaluation of a product you have developed. Interviews are undertaken in 
either a structured or unstructured way. Structured interviews involve a series of pre-set 
questions that you go through with the interviewee. Unstructured (or open) interviews, 
on the other hand, are less formal and you will ask open-ended questions that allow the 
interviewee to give extended answers without constraint. In unstructured interviews, 
you may find that the interviewee is moving away from the agenda you have in mind 
and you will need to draw them back towards the purpose of the interview. Be aware 
that unstructured interviews may provide some very interesting data, but you may well 

	 Chapter 2 ● Research 
30
have to ‘dig deeply’ through the responses you receive to get to the useful information 
you require.
You need to put a lot of thought and preparation into your interviews. The inter-
viewee is probably giving up valuable time to help you out so be well prepared and 
professional in your approach. Before you conduct an interview be clear in your own 
mind what you hope to achieve from it. If you lack confidence, or are new to interview-
ing, then a structured interview with specific questions is probably an appropriate way 
to start. For more experienced interviewers, unstructured interviews can provide lots 
of useful data.
Berndtsson et al. (2008: 61–62) discuss the following points for preparing and con-
ducting interviews.
● Selecting interviewees. If you are performing a case study within a company you 
might not be able to interview the people you really need to. Be aware that people 
are usually very busy and might not always be available when you need them. Try to 
be flexible in your approach and consider alternative interviewees who might provide 
you with the same information (for example, two or three people might cover the area 
you are primarily interested in).
● Preparation. Don’t just expect to interview somebody ‘off the top of your head’. 
Have some opening questions to ‘get the ball rolling’ in an unstructured interview or 
carefully prepare a set of questions for a structured interview.
● Questionnaires. You could prepare a questionnaire and use this as a basis for your 
interviews. This would ensure consistency when interviewing a number of people, 
it would provide a useful basis for discussion and it would focus your preparation – 
forcing you to prepare an appropriate set of questions beforehand. More details on 
questionnaire design are given in Section 2.4.4.
● Have an agenda for the interview. You will have in your mind an idea of what you 
hope to achieve from the interview so keep this in mind as the interview progresses 
and pull the interviewee back on track if they start to move away from the intended 
topic.
● Structured replies. In some cases you might wish to quantify an answer from the 
interviewee (for example, On a scale of 1 to 5, what do you feel about the company’s 
approach to staff development?). This will enable you to perform more objective analy-
ses of the responses – perhaps through some statistical analyses of the results.
● Note taking. Consider how you will make notes during the interview. If you have 
some pre-defined, structured questions, can you simply note the response on your 
questionnaire? Would it be appropriate to record the interview? Sometimes record-
ing an interview can stifle the openness of the interviewee. You will need to get their 
permission to do this.
● Confidentiality. Not only must you guarantee the interviewee’s confidentiality if 
appropriate, but you may also need to consider whether the information they are 
providing is confidential to their company too. In this case you may need to arrange 
some sort of confidentiality clause or disclosure agreement with the company before-
hand. In these cases you will need to consider what happens to the transcript of the 
interview (whether written or recorded) and also what you will be able to reproduce 
in your report. You supervisor should be able to help you with this issue.

	
2.4 Research methods
31
● Logistics of the session. You will need to arrange the interview: the time, location 
and duration. Be aware that this can take time to organise as people are very busy so 
leave plenty of time in your project to arrange your interviews.
● Characterisation. You might be interviewing several people during the course of 
your study and they may have different backgrounds (technical, personal, etc.). You 
should consider how their background might influence their responses and take this 
into account when reporting your findings. You should also consider how you might 
preserve an interviewee’s anonymity if it might be obvious who gave you a particular 
response based on their background.
● Ethical issues. Sometimes you may need to arrange ethical clearance for interviews 
(for example, if you were interviewing children or vulnerable adults). Most univer-
sities will have guidance on this area and you should consult your supervisor for 
advice.
Berndtsson et al. (ibid.) go on to point out that a fundamental issue surrounding 
the interview process is that of trust. Interviewees need to be able to trust you and you 
should not betray the trust they have in you. Without trust your interviewee may not 
provide you with the depth or breadth of detail you hope to achieve.
2.4.4   Questionnaires
Questionnaires are useful means of obtaining data from a large (possible cross-section) 
number of subjects. As with interviews, they can also be undertaken at different stages 
of your project and can also be used for case studies. Before you undertake a question-
naire, however, you should consider what you hope to achieve from it and whether it is 
an appropriate technique to use. Be aware that questionnaires are notoriously volatile in 
terms of replies – most of which achieve only around a 5% response rate.
There are a number of texts devoted to the issues surrounding the development and 
use of questionnaires (for example, Brace, 2013; Bradburn et al., 2004). We cannot hope 
to cover all of these issues within this text, but the following are guidelines on points 
you should consider when using questionnaires within your own project. Remember to 
consult with your supervisor for their advice on this issue.
The target audience
Who are you intending to send your questionnaire to? How will you target them?
Medium
What format will your questionnaire take? Will you send out postal questionnaires? Will 
you send the questionnaire through email (embedded within the email or as an attach-
ment)? Will you establish the questionnaire as a page (or series of pages) on a website? 
Some websites that you can use to set up questionnaires for you include:
● Survey Monkey: https://www.surveymonkey.com/
● UCCASS: http://www.bigredspark.com/survey.html
● Thesis Tools: http://www.thesistools.com/

	 Chapter 2 ● Research 
32
The advantages of sending out questionnaires via email can be summarised as follows 
(adapted from Loughborough University, 2014):
● They are quick and free to send out.
● Large populations can be targeted easily.
● Respondents can reply relatively easily by returning an email.
Unfortunately, email questionnaires do have some disadvantages too (adapted from 
Loughborough University, 2008):
● They may be filtered as spam and easily deleted.
● If the questionnaire is sent as an attachment it may not be readable or take too long to 
download.
● If the questionnaire is embedded in the email it may not appear clearly as formats 
might change from one system to another.
● It can be difficult for respondents to reply anonymously, which may put them off.
Response rate
How will you persuade your subjects to complete and return the questionnaire? You 
could offer a prize to a randomly selected respondent to encourage people to com-
plete the questionnaire. You could contact your subjects beforehand (by telephone, for 
example) to get their agreement to respond. This may encourage more people to com-
plete your questionnaire, but this is difficult if the target audience is large. Another way 
of improving your response rate is to offer to send any respondents a summary of the 
results. For example, if you are evaluating different companies’ approaches to software 
development, they all may be interested in a summary of your findings. Including a cov-
ering letter is also a good way of introducing yourself, the purpose of the questionnaire 
and any benefits the respondent might gain if they complete it. You can also include a 
reply-paid envelope with the questionnaire – this often persuades people to reply as they 
feel they are wasting your time and money if they do not.
Layout and size
For paper-based questionnaires the layout is important as it can put people off complet-
ing the questionnaire if it appears too long or complex. Try to keep your questionnaire 
as short and as simple as possible. One way to achieve this is to consider carefully every 
question you are putting into the questionnaire. Only include those questions that will 
provide you with something you can use and cut out those questions that will not pro-
vide anything useful. In terms of layout, try to keep the questionnaire uncluttered and 
make sure that the questions are unambiguous. If you have a series of closed, ordinal 
scale questions (for example, Rate this on a scale of 1 to 10), consider how you might lay 
these out so that the respondent can easily move from one question to the next.
Question types
Consider the type of questions you will include. Open questions require extended 
answers from the respondent (for example, What do you think about the user interface?). 
Closed questions provide specific answers to questions that the respondent can select 

	
2.4 Research methods
33
Open questions
Closed questions
‘Elicit “rich” qualitative data’.
‘Elicit quantitative data’ – data that can be 
easy to categorise, measure and quantify.
Can discourage people from answering as 
they might be reluctant and unmotivated to 
provide long answers.
Are easy to respond to and can be answered 
quickly.
Difficult to analyse as wordy responses can 
be misinterpreted.
Easier to analyse and quantify.
Allow freedom of expression.
‘Can encourage “mindless” replies’. Can stifle 
responses and not provide options that the 
respondent wants to give.
Table 2.1  Comparison of open and closed questions
from (for example, Do you feel the interface was poor, satisfactory or good?). Respond-
ents are usually quite happy to tick some boxes within a series of closed questions but 
are more reluctant to complete open questions. Try to mix your use of open and closed 
questions so the respondent does not become bored ticking boxes or put off by a number 
of long, open questions. In addition, try to keep the style of questions consistent. For 
example, don’t swap from asking respondents to tick boxes in one question to underlin-
ing or circling answers in another. The advantages and disadvantages of open and closed 
questions are shown in Table 2.1 (adapted from Loughborough University, 2014).
For closed questions, consider the type of scale you will use. For example, do you 
want the respondent to have a ‘don’t care’ or ‘average’ option? For example, ‘Rate the 
software system on a scale of 1 to 5 where 1 is poor, 3 is average, 5 is excellent’. If you 
made this a 1 to 4 scale there would be no ‘average’ and the respondent would be forced 
to select either above average (3 or 4) or below average (1 or 2).
Although questions can, on one hand, be classified as open or closed, another way of 
viewing question types is whether they are recall or thought questions. Recall questions 
simply require the respondent to remember a fact, some information, perhaps explain-
ing the way something was tackled, programmed, etc.; thought questions require some 
consideration and perhaps involve opinions, points of view and political interpretations. 
While respondents might answer recall questions quickly and easily, thought questions 
may take longer to answer as the respondent weighs up their ideas and interpretations. 
It might be a good idea to mix recall and thought questions in a questionnaire as the 
respondent could soon get bogged down with several thought questions following one 
another.
Blaxter et al. (2010: 203) identify seven types of questions that you might use in a 
questionnaire. They are:
	
1.	
Quantity or information. Used to gather specific data that can be quantified or 
classified (as opposed to qualitative, open-ended questions).
When did you join the company? ____________________

	 Chapter 2 ● Research 
34
Although this could cause confusion – are we expecting a date (and if so, in what 
format?) or a time frame (for example, 5 years ago)? It might be useful to provide 
an example to show the respondent what we are expecting (for example, October 
2010).
	
2.	
Classification. Used to categorise responses into two or more groups. The cat-
egories have no ordering to them – i.e., one category is no ‘better’ than the next.
Are you male or female (please tick)?                  Male 
          Female 
When asking people what age group they fall into it is common to group 
the ages across decadal boundaries. For example, 18–24, 25–34, 35–44, etc. 
rather than 20–29, 30–39, 40–49, etc. People sometimes feel bad about being 
classed in an ‘upper’ age group when they just fall into that group. For exam-
ple, 30-year-olds do not like to think of themselves as being their thirties and 
being grouped with 30- to 39-year olds. By the time they reach the middle 
of the decadal range they are resigned to the fact that they are in that group 
(for example, 35-year-olds know they are in their thirties) and are happy to 
tick that box.
Also make sure that categories are mutually exclusive to avoid confusion. For 
example, age ranges of 20–25, 25–35, 35–45, etc. would be confusing for those 
aged 25, 35, 45, etc.
	
3.	
List or multiple choice. Provides the respondent with a number of options to 
choose from (they can select more than one).
What sources of literature have you used for you literature review (please tick all that 
apply)?
Books	
	
Journal articles	
	
Conference proceedings	
Newspapers	
	
Case studies	
	
Company reports	
Company documentation	
	
Sales literature	
The Internet	
	
Internal reports	
	
Past projects	
Other (please specify) ____________________
	
4.	
Scale. Used to rate the respondent’s feelings towards something.
How easy do think the software is to install?
Very easy 
	
Easy 
	
Average 
	
Slightly difficult 
	
Difficult 
	
5.	
Ranking. Used to order a series of options. You should not provide too many 
options for the respondent to rank (ten is probably an upper limit) as this can 
make it difficult to complete accurately and honestly.
What did you spend the most time on during your software development? Please rank 
the following in order from 1 (spent most time on) to 7 (spent least time on).

	
2.4 Research methods
35
Requirements capture	
	
Design	
Coding	
	
Testing	
Documenting software	
	
Debugging	
Other (please specify) ___________________	
	
6.	
Complex grid or table. Used to gather similar responses on a range of questions.
Please complete the following table (enter ticks where appropriate) with your views on 
different aspects of the completed software system.
Very poor
Below average
Average
Above average
Excellent
Interface
Installability
Functionality
Ease of use
Robustness
Accuracy
	
7.	
Open-ended. Used to obtain extended, qualitative answers to open-ended questions.
Do you have any further comments you would like to make?
______________________________________________________________________
______________________________________________________________________
______________________________________________________________________
______________________________________________________________________
______________________________________________________________________
Source: Adapted from How to Research, 4th edn, Open University Press (Blaxter, L., Hughes, C. and Tight, M 2010), 
p. 203, McGraw-Hill Education.
Question order
The order you place your questions in a questionnaire can influence respondents and 
affect your response rate. Loughborough University (2014) suggest the following prin-
ciples you should follow when deciding on your question order:
● Place the important questions in the first half of the questionnaire. Respondents do 
not always complete questionnaires so if there are some important questions you 
would like answering, make sure that these come early on.
● Don’t put awkward, difficult or embarrassing questions at the start of the question-
naire. This may put people off completing the questionnaire. This implies that you 
should put easy, non-threatening questions at the start to draw the respondent in.

	 Chapter 2 ● Research 
36
● Go from general to specific questions.
● ‘Go from factual to abstract questions’.
● ‘Go from closed to open questions’.
● Leave questions regarding personal information until the end.
Anonymity
Do you wish the respondent to remain anonymous or do you wish (need) to know who 
they are? If they are anonymous you may not be able to contact them for clarification or 
to provide them with a prize for completing the questionnaire. If they are asked to sup-
ply their name they may be reluctant to complete the questionnaire. You should always 
assure respondents of confidentiality and explain how the data you gather will be used.
Respondent details
In addition to their contact details would it be appropriate to ask the respondent infor-
mation about themselves – for example, their age, professional standing, qualifications, 
position within the company etc.? You should only gather these data if you are going to 
do something with them. For example, you may need to know how different levels or 
experience of employee within a company react to a software system, so knowing their 
job title and/or when they started working for the company is important.
Draft and redraft
Don’t expect to get your questionnaire right at the first attempt. You might want to 
develop a questionnaire, check it with your supervisor, and send it out to a limited 
number of respondents to see what feedback you receive. You might then redraft the 
questionnaire in light of these responses – rephrase questions, restructure the layout 
and so on. Flay et al. (1983) show how a question might evolve over a period of time 
into something that provides a response that can be analysed (in this case it took eight 
attempts to reach the final version of the question):
First attempt: ‘How much time have you been trained here?’
Eighth attempt: ‘I think the amount of training given here is (1) too much; (2) quite 
a lot; (3) just right; (4) not much; (5) too little’
In summary, there are a lot of issues surrounding questionnaire design and deploy-
ment. Even with a considerable effort to produce a ‘perfect’ questionnaire, response 
rates are usually poor. Be prepared for this and have a contingency plan in place to deal 
with this when it happens. To conclude this section a few tips on questionnaire design 
are presented which are adapted from Loughborough University (2014).
● ‘Avoid leading questions’. Avoid questions that can lead the respondent to a particu-
lar answer – for example: ‘Wouldn’t you agree that. . .’ or ‘Is it fair to say that. . .’.
● ‘Be specific’. Try to avoid words that could be interpreted by people in different ways 
such as often, locally, etc.

	
2.4 Research methods
37
● ‘Avoid jargon’. The respondent may not understand what you mean or have a different 
interpretation to you.
● ‘Avoid double-barrelled questions’. Avoid asking questions that could be difficult to 
answer, interpreted in different ways, or try to elicit two or more answers at a time. 
For example: ‘Did you like the system’s interface and its functionality?’.
● ‘Avoid double negatives’. For example, ‘Do you agree that the system was not 
designed badly?’ would be better phrased as ‘Do you agree that the system was 
designed well?’.
2.4.5   Observation
Another research technique often used for case studies is observation. According to Blax-
ter et al. (2010: 199) observation ‘involves the researcher in watching, recording and 
analysing events of interest’. It can, for example, involve you entering an organisation 
and observing the workings of that organisation within the area of interest. Naturalis-
tic observation is a specific type of observational approach, often used in social science 
research, in which the observer plays no part in the situation they are observing, trying, 
if possible, to have no impact on the people or process under scrutiny. Video can often 
be used in this situation as, before long, the people being observed forget they are there 
and revert to their natural behaviour.
There are clearly a lot of issues surrounding observational research. The more impor-
tant points that you should consider include those outlined below (adapted from Blaxter 
et al., 2010: 200).
● Arrangements. How will you go about arranging an observation? What permission 
will you need to obtain? Are there any ethical issues that you will need to address? 
When will the observation take place and how long will you be there for? Is there a 
good time for undertaking the observation when certain events may be happening?
● Recording the observation. How will you record the situation or event that you are 
studying? You might record your observations in real time – by tape recording, vide-
oing or making notes. Alternatively, you may simply observe the situation and record 
what you remember of that situation later.
● Participation. Will you actually get involved in the situation you are studying or 
will you act as a ‘disinterested’ observer (Blaxter et al., 2010: 200) – naturalistic 
observation? If you are involved in the situation, how involved will you be – will you 
‘work shadow’ or actively participate? Will you need any training or health and safety 
instruction beforehand? If you are actively involved this may be part of a larger action 
research method that you are undertaking.
● The Hawthorne Effect (Roethlisberger and Dickson, 1939). Between 1924 and 
1933 a series of experiments were undertaken at the Hawthorne works of the 
­Western Electric Company, Chicago. These experiments involved the manipulation 
of various working conditions to investigate their effect on worker ­productivity – 
for example, changes to lighting levels, rest breaks, etc. In brief, it seemed that 
no matter what the investigators did, productivity improved – even when changes 
appeared intuitively to worsen the workers’ conditions (for example, dimming the 
lights). One of the main conclusions drawn from this study (see Mayo, 1933) was 

	 Chapter 2 ● Research 
38
that despite these detrimental changes the workers were feeling valued by being 
involved in the experiment. Consequently, the workers worked harder because they 
felt important.
The main point to draw from this study is that you should be aware of your influ-
ence on the situation you are observing. What you observe will not be under ‘normal’ 
conditions as anyone you look at will be conscious of your presence and may well act 
differently compared with how they normally behave.
• 2.5 Ethical issues
2.5.1   Introduction
Although ethical issues occur more often in the medical sciences and social science 
research, these issues should not be ignored in computer science and information sys-
tems projects as they can appear in lots of unexpected ways. Ethical issues obviously exist 
if your work involves participants (stakeholders) in one form or another, but they also 
crop up in terms of the integrity of your research. Ethical issues in computer science and 
information systems projects occur in three areas – how the research is performed, how 
you deal with participants and how you present your results.
In terms of undertaking your research, it should be conducted with integrity and 
honesty. Respect other people’s work and don’t plagiarise. Respect copyright and other 
forms of intellectual property. Be open to sharing your ideas and results and take any 
criticisms objectively. Have you undertaken your experiments accurately? Have you been 
careful to avoid errors? Have you used appropriate methods throughout? Have you been 
honest with people you work with – your client/users, supervisor and colleagues?
When you have completed your project and are writing your report or a research arti-
cle, there are still a number of ethical issues you should consider. Are you, for example, 
being honest about your results? Are you choosing to leave certain results out because 
they do not conform to your hypothesis? Are you presenting your results objectively and 
clearly (see Section 8.4.4 for an example of where data can be presented in different ways 
to make different points)? Have you fabricated any results?
Although these issues are important, ethical issues are of paramount importance when 
dealing with participants in your project.
2.5.2   Participants
Ethical issues raise important questions when working with participants – particularly 
children and vulnerable adults. If you are planning on involving others in your project 
in any way – conducting a survey, developing a system for a vulnerable group (requir-
ing interaction and feedback from them), undertaking action research (working with 
people), developing a database to store personal data, or working on medical systems – 
you may well need to obtain ethical clearance for the project from your department, 
university or some other external agency beforehand. Most institutions have an Ethical 
Advisory Committee or Institutional Review Board of some kind that will manage these 
issues and provide guidance on processes that should be followed. Areas covered include 

	
2.5 Ethical issues
39
recruitment of participants; confidentiality and security of data; risks and responsibili-
ties. The areas of concern that usually need addressing when considering participants 
and ethical issues include those listed below.
● Data protection. If your project is going to be involved with handling personal infor-
mation relating to living people you will need to be aware of the Data Protection Act 
(DPA) and its restrictions on your project. The DPA, introduced in 1998 in the UK, 
governs the protection of personal data. These data can include names, addresses, 
exam grades, medical data, telephone numbers, anniversaries, etc. The main princi-
ples of the Act that you should be aware of include:
● data should only be used for the specific purpose for which it was gathered in the 
first place;
● individuals have the right to access data held about them;
● data may not be disclosed to third parties without permission of the individual;
● if personal data are kept, these data must be appropriately protected;
● personal data should be kept for no longer than necessary.
● Recruiting participants. Ethical issues will make you think a little bit more about 
how you might recruit participants for your project (for example, a cross-section of 
users to give feedback on your system). Areas that you should consider, which will 
help to strengthen your study, include:
● selection criteria – will these be unbiased and lead to a reasonable cross-section of 
participants?
● what consent will be required from participants to take part (or their parents/
carers/guardians)?
● will there be any financial incentive or otherwise to take part (which may affect the 
objectivity of the results)?
● will participants be able to withdraw at any stage (this should be allowed)?
● will any deception be involved – for example, intentionally to evaluate a reaction 
or unintentionally, which might affect the results?
● Informed consent. Informed consent is an important principle for research involving 
participants. This means that anyone you are involving in your research is informed 
of the research and their role within it and they should be advised that they may with-
draw at any time. An information sheet is a common approach that you can use to 
inform potential participants of their role in your work. This can include information 
about you, where you are from and what the research is about. It should point out 
that they are free to withdraw at any time. It should also guarantee (as far as possible) 
their anonymity and explain what will happen to the information you gather (what 
will it be used for, how it will be stored and how long it will be stored for). It should 
state clearly what you expect of them, what they will be asked to do and how they will 
contribute to your work.
● Vulnerable groups. These can include children, pregnant women, people with a 
mental illness, prisoners, people over 65, people with learning disabilities, etc. Quite 
obviously these people need some kind of protection and, although you may feel your 
work will not affect them (for example, just asking their opinions about some software 
you are developing to meet their needs), ethical clearance will probably still be needed 
to ensure they are not being exploited in any way. You should also consider whether 

	 Chapter 2 ● Research 
40
or not any feedback you receive from such groups will be entirely objective – it could 
be skewed because of their relationship to you and you should acknowledge and 
discuss this issue in your final report.
• 2.6 Summary
● Research is defined as ‘a considered activity which aims to make an original contribu-
tion to knowledge’.
● The research process can be sequential, generalised, circulatory or evolutionary.
● Research can be classified according to its field, approach and nature. Approaches to 
research include case studies, experiments, surveys and action research.
● Research techniques that are used within the above approaches include interviews ques-
tionnaires and observational studies.
• 2.7 Further reading
Brace, I. (2013) Questionnaire design: how to plan, structure and write survey material 
for effective market research (3rd Edition), Kogan Page, London.
Bradburn, N.M., Sudman, S. and Wansink, B. (2004) Asking questions: The definitive 
guide to questionnaire design, Jossey Bass, John Wiley, New York.
Czaja, R. and Blair, J. (2005) Designing surveys: a guide to decisions and procedures (2nd 
Edition), SAGE Publications, London.
Gerring, J. (2007) Case study research: principles and practices, Cambridge University 
Press, UK.
Groves, R.M., Fowler, F.J., Couper, M.P., Lepkowski, J.M., Singer, E. and Tourangeau, 
R. (2009) Survey methodology (2nd Edition), Wiley Blackwell, Oxford, UK.
Yin, R.K. (2014) Case study research: design and methods (5th Edition), SAGE Publica-
tions, London.
• 2.8 Action points
● Try to formulate your own definition of research and ask yourself what research means  
to you.
● Decide which of the research methods outlined in Section 2.4 is appropriate for your 
own project.

Setting your project’s  
foundation
SECTION
2


	
	
	
43
CHAPTER
3
• 3.1 Introduction
The field of computing is extremely diverse, covering a vast range of topic areas from 
sociological and management issues to highly technical hardware and software devel-
opments. It is not, therefore, always easy to decide on a suitable project for your degree 
course. The types of projects that are accepted in different university departments 
also vary. Some departments may be happy for you to pursue a highly technical pro-
gramming project (provided it includes a satisfactory requirements capture, design 
and implementation), whereas others require more academic content which emerges 
Aims:
To introduce techniques for choosing an appropriate project, and to discuss the 
skills needed to write a satisfactory project proposal.
Learning objectives:
When you have completed this chapter, you should be able to:
● Choose an appropriate project.
● Write a project proposal.
● Make effective decisions when choosing your project supervisor.
● This chapter is relevant for both undergraduate and postgraduate 
projects.
Choosing a project and  
writing a proposal

	 Chapter 3 ● Choosing a project and writing a proposal  
44
from critical evaluation, analyses and literature surveys. Chapter 1 introduced the gen-
eral categories for most computing projects: research-based, development, evaluation, 
industry-based and problem solving. This chapter introduces the skills you will need 
and some tips for choosing an appropriate computing project for your course. It will 
then discuss ways in which you can present an acceptable proposal for your chosen 
project and provides some advice on choosing an appropriate supervisor, if this is 
possible within your institution.
Note
It may be worth reading Chapter 5 alongside this chapter. Chapter 5 covers literature 
searching and literature reviews – activities that can help you to understand and contex-
tualise your chosen subject area. You might not be able to choose your project or clarify 
what you hope to achieve until you have gone some way to completing a literature search.
• 3.2 Choosing a project
This can often be the most difficult stage of all. Just like an artist ponders over a blank 
canvas, you have to decide on the type of project you would like to pursue over the fol-
lowing six months, twelve months, three years or more. When choosing your project, it 
is important to keep the following important principles in mind.
● You must be capable of doing the proposed project in the time available. You must 
ensure that your project is not overly ambitious and that you have all the relevant 
skills that are needed (don’t choose a project in an area where you have failed subjects 
before). However, as part of your project, you may like to consider broadening your 
knowledge in a new area, developing new skills or enhancing some existing skills. If 
so, be sure to allow sufficient time for these things.
● Choose a project that interests you. Remember that you will be working on your 
project for probably six months or more and it is important that you enjoy your work 
and do not become bored and lose motivation during this time.
● Consider your personal development and choose a project that will assist you in your 
goals. In recent years higher education institutions have been promoting the concept 
of personal development planning (PDP) for students (also known as continuing pro-
fessional development or CPD). Personal development planning is defined by The 
Higher Education Academy (2014) as ‘a structured and supported process undertaken 
by an individual to reflect upon their own learning, performance and/or achieve-
ment and to plan for their personal, educational and career development’. Basically, 
through personal development planning, you identify your aspirations regarding per-
sonal development and decide (plan) how best to achieve these aims. Your personal 
development plan may assist you in choosing a project or selecting between a number 
of ideas you might be considering. Projects that support you in reaching your personal 
goals would take priority over those that do not. When choosing a project, consider 

	
3.2 Choosing a project
45
your future career aspirations. This may influence your choice of project in terms of 
programming language, application area, client base and so on.
● Your project should have a serious purpose and a clear outcome that will ben-
efit someone. If you undertake a software development project, for example, you 
should ideally have a real client for whom you are developing the system. Many 
students undertake software development projects for imaginary clients (for exam-
ple, developing a website for an imaginary taxi firm, shop or sports club), but these 
projects tend to be below average. Armed with advice from their superior, students 
tend to implement what they feel is appropriate (which may be very different to 
what a real client would expect). Motivation tends to slip as students realise their 
software will only sit on a shelf and gather dust after all their hard work.
By securing a real client for your project you will get a much clearer, more relevant 
set of project objectives. You will also be more motivated, knowing that you are work-
ing for someone other than yourself (you won’t want to let them down). Having a 
real client will also help with your project’s management as you will be expected to 
produce deliverables to the client by specific dates. Having these short-term goals to 
aim at is a great motivator.
If you need help obtaining a good client for your project, your supervisor should 
be able to assist you. He or she may already have a client contact that you can use. 
Your supervisor can also provide some official support, for example, providing let-
ters of introduction and so on.
● Your project has a clear outcome (in terms of deliverables) that focuses your work 
and direction. Without a clear target, you may lose your motivation as your project 
progresses and you lose your way.
● Your project links in suitably with your degree course. For example, you would not 
pursue a highly technical hardware-based development on an information systems 
course or perform a detailed systems analysis project on an artificial intelligence 
course.
● Your project is of sufficient scope and quality to fit the requirements of your course.
● It is not a personal issue (as opposed to something that interests you) – i.e., you may 
have a subjective view about a topic that might cloud your perspective and influence 
your results.
● The resources you require for your project are available or can be obtained; for exam-
ple, software, hardware, a particular client, user or organisation.
3.2.1   Techniques and information sources
As you choose a suitable project, take advantage of the various techniques and informa-
tion sources at your disposal.
Lecturers’/departmental lists
Sometimes this is the only source of acceptable project ideas. These projects may have 
been proposed by academic staff in your department, they may be projects proposed 
by other departments in the university or they may be small projects which have been 
requested by local industry.

	 Chapter 3 ● Choosing a project and writing a proposal  
46
Industrial projects
If you have spent a year in industry as part of your course (a sandwich placement), or are 
working part-time, your past or present company may have a project you could under-
take. Alternatively, your supervisor, friends or family might have contacts in industry that 
might be appropriate for acting as a client for your project. However, industrial-based 
projects could have some inherent problems.
	 1.	 The company’s objectives could differ from yours in terms of the project’s delivera-
bles. What might be acceptable to the company may not have sufficient academic 
rigour for your course requirements. If your supervisor is advising you to take your 
project in one direction (academically challenging) and the company wants you to 
take the project in a different direction, it can be difficult to reconcile the differences.
	 2.	 Industry contacts are not always stable or reliable. Sometimes companies go bust, 
restructure, are taken over, departments close down, staff are moved on, people 
resign or retire, etc. Can you guarantee that your client contact within the company 
will be there throughout your project? If not, will someone else be able to help?
	 3.	 Access to companies can be difficult. If you are doing a project based at your uni-
versity this is not a problem, but if you have to travel long distances to meet with 
the client, is this going to be feasible?
	 4.	 As an outsider working for the company will you be granted access to all you need 
for the project – data, files, people? Some companies may be reluctant to allow 
outsiders (people who are not directly employed by them) to have access to certain 
information. You might also find it difficult to talk to certain people in the company 
if you don’t work there. You may be asked to sign confidentiality agreements or 
clauses before the company will allow you access to certain people or information.
	 5.	 Will you have access to appropriate hardware and software to undertake your pro-
ject? If the company uses particular applications or systems – will you need to 
access these remotely or can your institution provide appropriate support?
Despite these potential pitfalls, there are a number of advantages to working with an 
outside company for your project. Your project will have a clear aim and there may well 
be a clear set of requirements specified by the client that you can work towards. Working 
for an external body will provide you with additional motivation as you will be working 
for someone other than yourself and have targets to achieve. Finally, you may well have 
additional support for your project that may not be available otherwise – for example, 
the company may offer you training, you may have access to sophisticated hardware and 
software and you may benefit from expert, industrial knowledge.
Past projects
Usually your department or university library will hold copies of previous projects. These 
can provide you with ideas (for example, how you could develop the work further) and 
will give you some idea of the scope and amount of work that is expected from you. 
Alternatively, you can use the Internet to search for past projects at other institutions. For 
example, PhD theses are often made available online (see http://www.theses.com for an 
index of theses published in the UK). Past projects may also provide a suitable basis from 
which to start your own project – picking up from where a previous student left off. If you 

	
3.2 Choosing a project
47
undertake a development project you may be developing an existing piece of software 
further, introducing additional functionality or new features to an older system. You need 
to be aware of the amount of effort required to upgrade existing systems. Quite often 
existing systems are poorly structured, badly commented and lacking documentation. It 
can be harder to enhance a piece of software that already exists than developing a system 
from scratch. In addition, previous programmers may have used unusual code to create 
the system and it may take you a long time to deconstruct their software.
Talking with colleagues
Your peers can often provide you with a different perspective on ideas you might have. 
They may highlight shortcomings with your intended project and may suggest alternatives.
Reading around subject areas
If you read books, journals and articles on a topic that interests you, you can often dis-
cover areas that authors have identified as requiring further research and development. 
As you improve your understanding of the topic area you may identify a gap in the field 
that you wish to investigate further. Whatever happens, reading around your intended 
subject area does no harm and helps you gain a solid understanding of the subject on 
which you will build your project. Chapter 5 covers literature searching and it may be 
worth reading that chapter before completing your proposal.
Clustering
You might wish to pursue a project in a particular field but are unsure exactly which 
aspects of the topic to focus upon. Clustering can help you to identify aspects within a 
topic area that link together and are worthy of further investigation. Clustering is per-
formed in two stages. First, you should list down keywords related to your chosen topic 
area. Second, once you have exhausted all the words and phrases you can think of, you 
cluster them together into related groups and patterns. By doing this you will identify 
specific topics that interest you and form the basis of your intended project.
Clustering can be used to develop research territory maps (RTMs), relevance trees and 
spider diagrams. An RTM, sometimes called an affinity diagram, shows how topics relate 
to one another within your chosen field or fields of study. RTMs provide you with your 
own conceptual model of your research area. They represent your interpretation of the 
field – one that you are comfortable with, can clarify and arrange the literature into, and can 
modify as your knowledge of the field grows. They can be enhanced with thicker and thin-
ner connecting lines to emphasise the strength of relationships between subjects. Figure 3.1 
provides an example of an RTM – in this case a high-level conceptual map of the field of 
software engineering (remember, this is an interpretation and you may or may not agree 
with its structure). RTMs will identify specific topics you might wish to focus on within 
larger subject areas or, for broader studies, inter-related subjects that are dependent and 
require investigation. Note that this figure is presented here in two dimensions – it could 
well be the case that some of these topics connect and overlap one another in other ways.
Relevance trees, discussed in more detail by Sharp et al., (2002: 36) and Saunders et 
al. (2012: 96–97), are similar to RTMs in that they try to model your field of study. Rel-
evance trees differ from RTMs in their hierarchical structure. Whereas RTMs identify 

	 Chapter 3 ● Choosing a project and writing a proposal  
48
related topics and the links between them, relevance trees break down a particular subject 
or research question into lower and lower levels of detail, identifying how a subject is 
composed or identifying the factors affecting a research question posed. RTMs provide 
a holistic interpretation of the field of study, whereas relevance trees provide a hierarchy 
of topics that constitute that field of study. An example of a relevance tree for artificial 
intelligence is shown in Figure 3.2.
These types of diagrams are easy to produce using software tools specifically aimed at 
this purpose. Examples of tools that help you create mind maps and conceptual diagrams 
include MindNode (https://mindnode.com/), which is available for the iPhone, iPad and 
Mac; FreeMind (available at http://freemind.sourceforge.net/wiki/index.php/Main_
Page), which is a mind mapping tool written in Java; NovaMind (http://www.novamind 
.com/); and MindGenius (http://www.mindgenius.com/).
Another way of structuring your thoughts and identifying how subjects break down 
is through the use of spider diagrams. These diagrams are similar to RTMs in that they 
show how topics within a subject area relate together. They are also similar to relevance 
trees in that they show how topics break down from a central idea, subject or research 
question. In spider diagrams a central node is used to represent the topic of interest and 
lines emanating from this node identify how the topic can be organised into its constitu-
ent parts. Colours are often used to group ideas and topics together. Figure 3.3 provides 
a spider diagram interpretation of the field of software engineering. This diagram is 
adapted from the RTM in Figure 3.1.
Remember that relevance trees, RTMs and spider diagrams are structured by you 
to represent your own interpretation of your chosen subject area. Other authors may 
decompose your subject area into an alternative structure or use different terminology 
for the same things. You must be aware of these differences so that you aren’t confused 
by what appears to be contradictory information which you gather from your literature 
search. For example, in Figure 3.2, some authors may subsume Knowledge representation 
Figure 3.1 A high-level RTM for the field of software engineering

	
3.2 Choosing a project
49
Figure 3.2 An example relevance tree for the field of artificial intelligence

	 Chapter 3 ● Choosing a project and writing a proposal  
50
Figure 3.3 An example spider diagram for the field of software engineering

	
3.2 Choosing a project
51
within AI techniques or might disregard Philosophical issues entirely, while others may 
include other topics not identified here.
Brainstorming
If you are really struggling for a project idea, brainstorming can provide the answer. 
Brainstorming involves ‘throwing’ all the ideas you have down on a piece of paper, in 
any order and as quickly as possible. Write anything down, even if it sounds completely 
irrational, as the process of brainstorming should not be stifled. When you have finally 
exhausted all of your ideas, look at each one in turn and evaluate and assess it in more 
depth. What may have sounded ridiculous at first may actually lead to a good project 
idea when viewed from a different angle. You might also like to group your thoughts 
(using clustering) as this may help to clarify, in your own mind, where your real interests 
lie. One way to choose between topics is to toss a coin – not to see which way the coin 
lands, but to see how you feel you want the coin to land while it is spinning in the air.
Chapter breakdown
Once you have an idea for your project, it is a good idea to identify how your project will 
break down into a number of chapters for the final report. If you have difficulty identifying 
a number of specific chapters for your final report it may mean you are unclear about the 
detail of your project and don’t really understand what it is you hope to achieve. Break-
ing down your project into chapters will also give you an indication of its scope. If you 
can only identify two or three chapters then maybe your project is not sufficiently broad. 
Conversely, if you can identify ten or more chapters you may be trying to do too much.
3.2.2   Additional considerations
After choosing your project, some additional considerations should be taken into account.
The ‘so what?’ test
To ensure that you do not pursue a project that has little value, take the ‘so-what?’ test 
(Herbert, 1990: 7). Ask yourself, ‘Is the topic meaningful?’ If you complete the project 
successfully will it be of value to anybody? What contribution will it make? These are 
the kinds of questions you should be asking yourself to ensure that you do not pursue 
something that has no value or worth. Pursuing a meaningless project can lead to poor 
motivation as your project progresses and you begin to question the point of your work.
Justification
Can you explain your project and justify it (the ‘so what?’ test) in simple terms to the 
woman or man in the street? If so, you have a good understanding of the subject area 
and the topic you want to pursue.
If you can’t explain it simply, you don’t understand it well enough
Albert Einstein

	 Chapter 3 ● Choosing a project and writing a proposal  
52
Note, however, that your explanation may be too technical or too deep for the man 
or woman in the street to understand but this still means that you feel you can explain 
it in simple terms because the topic is so clear to you.
Numerating your understanding
Can you put a figure on what you know about your chosen subject; for example, 80%? 
If you are able to numerate your understanding about a topic it means that you have, at 
least, a concept of that field of study and an awareness of its magnitude. If you have no 
idea what your understanding is then you have no idea of your subject area’s depth or 
breadth and to undertake a project in this area would be very risky.
This principle was initially presented by Lord Kelvin who stated:
When you can measure what you are speaking about and express it in numbers, you 
know something about it: when you cannot measure it, cannot express it in numbers, 
your knowledge is of a meagre and unsatisfactory kind. It may be the beginning of 
knowledge, but you have scarcely in your thought advanced to the stage of science.
This idea is sometimes referred to as metaknowledge. This refers to knowledge about 
knowledge which means that you have some concept of your own understanding about 
a particular issue, event or subject. In some ways the wiser people become the more they 
realise just how little they really know. This is especially true when they place their under-
standing within the broader context of world knowledge even though their own expertise 
in a particular subject may be very deep. Figure 2.2 identified this transition of self-aware-
ness in the research from blissful ignorance, to demoralised, to confident, to complacent.
Contacts
When you identify the contacts you require for your project, are they available, acces-
sible and willing to help? For example, do you have contacts within a local company who 
have volunteered to help you with a case study? If not, then your project is going to face 
problems that will need to be dealt with sooner or later.
What do you already know?
Orna and Stevens (1995: 29) suggest that another consideration which should be made 
when identifying your research area is to think about what you already know or have 
access to that is relevant. This is useful in that it will help you to clarify your strengths and, 
perhaps, form a foundation for your RTM, relevance tree or spider diagram. Will you 
need to undertake any training as part of the project? This could be training in research 
methods, dealing with participants, technical hardware and software training and so on.
You might also want to identify what you want to learn by conducting your project. 
What are your educational objectives? Are there any skills you would like to develop, new 
programming languages you would like to learn or new techniques you would like to under-
stand? If so, include a need for these skills within your project to force yourself to learn them.
Using these ideas, sources and approaches will assist you in deciding on your project. 
However, although you may now have an idea for a project that you feel is of suitable 
quality and scope for your course, you must now ‘sell’ it to others with a project proposal.

	
3.3 Preparing a project proposal
53
• 3.3 Preparing a project proposal
3.3.1   Introduction
It is normal, in most institutions, for you to prepare a proposal for your project so it 
can be assessed for acceptability. Unless you can present an acceptable proposal your 
project will not even start. It can serve as a contract between you, your department and 
project supervisor – but don’t expect it to be used against you if you achieve more than 
you actually intended to do! In many cases projects can, and do, change direction as they 
proceed; as you become more aware of the topic area and the problem which you are 
investigating. This is acceptable provided that the scope and quality of your project do 
not become ‘watered down’ and you are not heading so far away from your initial inten-
tions that the project becomes unrecognisable. If this were the case you would need to 
obtain permission for significant changes and possibly have to submit a new proposal.
When preparing your proposal, follow two golden rules.
	 1.	 Follow any guidelines precisely: most institutions have specific information they 
require; for example, project title, project objectives, resource requirements and 
so forth. Failure to complete these sections may mean your proposal is rejected 
without even being read, for example, because you failed to get an academic sig-
nature, or did not complete an essential section properly.
	 2.	 Proofread it thoroughly (and get someone else to check it): any errors and omissions 
will appear sloppy and put your commitment and proposed project in a bad light.
There are no universal standards for project proposals, although all proposals should 
include certain pieces of information. This is addressed from the proposal’s implicit and 
explicit content, which are discussed below. It is worth noting that project proposals are 
sometimes referred to as PIDs (project initiation documents), Terms of reference, or Project 
briefs. These documents, however, are used more as baselines that are referred to by pro-
ject teams as a project progresses rather than initial proposals – the aim of which is to get 
the project approved in the first place. PIDs are discussed in more detail in Section 4.3.8.
3.3.2   Implicit content
In general, your proposal should address five principal areas. These may not be identi-
fied explicitly in the structure of your proposal, but they should be addressed implicitly 
within the proposal’s content.
	 1.	 Introduction to the subject area. This will provide the reader with an under-
standing of the field in which your project lies and an idea of where and how your 
project fits into this field. This aspect will set your project into an overall context 
and will show that it is bound within a recognised field – not an idea that you’ve 
had that makes no sense and has no recognisable foundation.
	 2.	 Current research in the field. This will emphasise that your project is not based in 
a field that is out-of-date and that you are aware of current issues within that field of 
study. It will also imply that you have done some preliminary research into the topic 
area and are not approaching your project with little background or motivation.

	 Chapter 3 ● Choosing a project and writing a proposal  
54
	 3.	 Identify a gap. You should be able to identify some aspect of the field that requires 
further investigation or study. There is no point in repeating the work of others 
(unless you are evaluating their approaches) and this component emphasises that 
the field is not exhausted and is worthy of further investigation.
	 4.	 Identify how your work fills the gap. Having identified a gap in the field, your 
proposal should show how your project intends to fill this gap, or at least go some 
way to investigating it further. This will emphasise the contribution that your pro-
ject will make.
	 5.	 Identify risks and solutions. It is also useful in a project proposal to highlight any 
risks that your project might face, and ways you envisage dealing with those risks. 
If you do not identify potential risks to your project, your proposal’s assessor will 
not know whether you have considered the risks or not. If they feel you have not 
accounted for potential risks to your project your proposal may not be accepted, 
as they may not appreciate that you have potential contingency plans in place.
3.3.3   Explicit sections
Detailed below are the most common sections that project proposals should include. If 
you are given no guidance as to the content of your project proposal, you should include, 
at the very least, the first three of the following as an absolute minimum.
Title
This should be clear and concise. Try to avoid using acronyms if possible. Examples of 
clear and concise titles include:
● ‘evaluation of soft systems methods as analysis tools in small software houses’;
● ‘artificial neural networks for software development cost estimation’;
● ‘development of process models for building graphical software tools’.
Aims and objectives
Aims identify at the highest level what it is you hope to achieve with your project – what 
you intend to achieve overall. An aim is a broad statement of intent which identifies 
your project’s purpose. Objectives, on the other hand, identify specific, measurable 
­achievements you hope to make that build towards the ultimate aim of your project. 
They are more precise than aims as they are ‘quantitative and qualitative measures by 
which completion of the project will be judged’ (Turner, 1993: 108). They represent 
major components of your project that direct your work activity (Weiss and Wysocki, 
1992: 13).
Identifying aims and objectives clarifies, both for you and the reader, what you spe-
cifically hope to achieve with your project. Your aims and objectives will be used to assess 
your project at the end. For example, did you really achieve all that you set out to do? 
Because of this, the aims and objectives should be clear and unambiguous. Aims and 
objectives are discussed further in Chapter 4.

	
3.3 Preparing a project proposal
55
Examples of aims and objectives are:
Aim:
● Evaluate artificial intelligence techniques for modelling weather patterns.
Objectives:
● Identify and evaluate existing weather pattern modelling techniques.
● Identify artificial intelligence approaches suitable for modelling weather patterns.
● Design and develop at least three artificial intelligent systems for modelling weather  
patterns.
● Compare and contrast the developed systems with one another and existing 
approaches to modelling weather patterns.
Expected outcomes/deliverables
This section of your proposal identifies precisely what you intend to submit at the end of 
the project. It may well identify a written report that covers particular points and makes 
certain recommendations. A chapter breakdown may be included where appropriate. It 
can include programs and user documentation and it might include models and algo-
rithms that will be developed to address specific problems. You might also be delivering 
a functional specification for a piece of software, a prototype or a test plan.
Title, aims and objectives and expected outcomes/deliverables represent the minimum 
set of sections that your project proposal should include. In addition, consider includ-
ing the following:
Keywords
Keywords are used to identify the topic areas that your project draws on. People use 
keywords to see at a glance what subjects your project relates to which might not be clear 
from your project’s title alone. Libraries and databases also use keywords to help classify 
material. You might be limited on the number of keywords you can use; for example, 
four or five. Remember that keywords are not necessarily individual words but can be 
linked words or simple phrases as well; for example, artificial intelligence or software 
engineering.
Introduction/background/overview
This section provides an overview of your project and introduces the background 
work to it. In this section you might wish to include reasons why you feel you are 
a suitable candidate for performing the project (why you feel you can do it, what 
skills are required and how you fulfil these requirements), why the topic interests you 
specifically and why you chose the project in the first place. This section might also 
include an introduction to the industry or organisation that is being investigated or 
evaluated. Overall, this section will set the scene for the project.

	 Chapter 3 ● Choosing a project and writing a proposal  
56
Related research
This section identifies other work, publications and research related to the topic of inter-
est. It will demonstrate that your project does not just exist in an academic vacuum, but 
relates to research topics and fields that are currently of interest. Related research can 
also help to demonstrate your understanding of your topic area to the reader, showing 
that you are aware of what is currently happening in the field and are conversant with 
other topics that impinge upon it.
Type of project
You might wish to identify the type of project you are undertaking, for example, research-
based, development, evaluation, etc. However, make sure that these terms are recognised 
and provide more detail if appropriate.
Research questions and hypotheses
Your project proposal may also include a research question you intend 
to investigate and, hopefully, answer to some extent within your pro-
ject. Computing projects do not necessarily set out to answer particular 
questions, but for some projects (particularly research degree projects) 
a statement of your research question is essential. Examples of research 
questions are:
● Does the size of an organisation affect its commitment to software quality standards?
● What is the relationship, if any, between software maintainability and coding struc-
ture standards?
● Is there an optimum solution to the prediction of software development costs?
● How do large organisations maintain quality standards in the development of internal 
software?
Although research questions on their own are ‘open-ended opportunities to satisfy 
one’s curiosity’ (Rudestam and Newton, 2007: 74), they are often linked closely with 
one or more hypotheses. A hypothesis is ‘a tentative proposition which is subject to 
verification through subsequent investigation’ (Verma and Beard, 1981: 184 cited by 
Bell, 2010: 31–32). Although you do not have to define hypotheses alongside a research 
question, they do present potential ‘answers’ to the question(s) you have posed and 
provide definitive statements that will focus your research. For example, suppose your 
project intended to answer the fourth research question posed above, one of the follow-
ing hypotheses might be investigated based on that research question:
Hypothesis#1: Large organisations invariably employ recognised standards to main-
tain internal software quality.
Hypothesis#2: Large organisations generally have quality departments which oversee 
the implementation of procedures that ensure the quality of internal software.
It is also worth mentioning the importance of maintaining research symmetry with 
respect to research questions and hypotheses. Research symmetry implies that ‘what-
ever the findings from the work, the results will be equally valuable’ (Gill and Johnson, 

	
3.3 Preparing a project proposal
57
2010: 24). With this in mind, it is important to realise the implications of the hypotheses 
you have stated. If they are true you must ask yourself ‘so what – was that really worth 
proving?’ Thus, each hypothesis that you state should have a similar value if proved.
Methods
This section describes the research methods and project methods you will use in per-
forming your project. This section should not identify methods that you might be 
investigating as part of your project, but those methods you are actually using. It might 
include development methods that you are using as part of a systems development (for 
example, SSADM), survey methods for a case study evaluation and evaluation methods 
that are used to compare two or more systems. Research methods would include action 
research, case study, survey and experiment, as introduced in Chapter 2.
Resource requirements
You might need to identify any resource requirements for your project such as hard-
ware, software and access to particular computers. It may be that you already have access 
to particular resources and this should be pointed out within this section. Quite clearly, if 
the resources for your project are not available in your department, or are too expensive 
to obtain, your project will be unacceptable. However, if you know you need a particular 
piece of software or hardware you must find out its cost and include this information 
within this section. A proposal that omits this information may be rejected because the 
assessor does not know how inexpensive or available the item is and might assume that 
it is beyond your project’s budget.
Note, if you are relying on an external source (a company, for example) to support 
your project in terms of computer access, hardware, software, case studies and the like, 
it will be your responsibility to ensure these are available. Although your department will 
accept responsibility if something goes wrong with your project because some of their 
software or hardware fails, they will not be responsible for external sources of support 
that you have arranged. The risk must be borne by you.
Within this section, or under a separate heading, you might include a list of literature 
material that you will need to perform your project – for example, specific journals, 
company reports, books, etc. Once again, if these materials are unavailable, realistically 
speaking, your project may be unsuitable and you may need to change its focus. Access to 
particular companies for performing case studies could also be identified here. Without 
this access your project might flounder so it is important to show that you have contacts 
that can be utilised.
Project plan
It is very useful to present a project plan as part of your proposal. This emphasises that 
the project is ‘doable’ in the time allowed, it shows that you have some idea of the work 
involved and you have a clear pathway to follow to complete that work. The best way 
to present a project plan is by using a visual representation such as a Gantt chart. These 
figures are described in Chapter 4. It should be emphasised that, while the presentation 
of these charts is important, you should limit them to a single page. A multi-page project 
plan is difficult to read and, for a proposal, only a general overview is required.

	 Chapter 3 ● Choosing a project and writing a proposal  
58
3.3.4   Reviewing your proposal
The second golden rule for preparing a project proposal states that you should proofread 
your complete proposal thoroughly.
Check your proposal for spelling mistakes, omissions and grammatical errors. Have 
you included all the sections you were supposed to and have you completed those sec-
tions in sufficient depth? Is the proposal well presented (typed rather than hand-written, 
for example)? Do the sections flow logically?
The following are two contrasting examples of final year project proposals for a stu-
dent on a taught bachelor’s degree. Both proposals represent the same project and have 
been kept short for clarity.
Example
Title:
Software migration.
Project type:
Aims and objectives:
–   Migrate a series of software applications from a mainframe to a client/server systam 
within a local company.
Outcomes and deliverables:
–   Connectivity to the mainframe for approx. 1000 PCs;
–   Full integration into a client server environment;
–   Education of users;
–   Coding and testing completed.
Research methodology:
Prince II.
Hardware and software requirements:
All available at local company.
This proposal is quite poor. Its Title is rather vague and only represents the type of 
project that is being proposed. The section identifying Project type has been left blank 
and the Aims and objectives represent a basic, technical, industry-type project with no 
academic content or justification. Expected Outcomes and deliverables emphasise this 
point and merely identify the technical outcomes of the project. The Research methodol-
ogy section identifies the method that will be evaluated, rather than the research meth-
ods that will be employed (PRINCE II is a project management method that is used to 
manage large projects). The proposal also includes a number of spelling mistakes and 
abbreviations. Overall, although this project may be acceptable within industry, it lacks 
any academic quality or rigour and is poorly presented.

	
3.4 Choosing your supervisor
59
Let’s look at this project proposal from a new angle:
Example
Title
Project management issues of software migration.
Project type:
Evaluation project, industry based.
Aims and objectives:
Aim: To evaluate the use of the PRINCE II method as a means of managing the migra-
tion of software from a mainframe to a client server system.
Objectives: An evaluation of tools and methods to assist the technical aspects of the 
migration and organisational management aspects.
Evaluation of similar companies performing migration for comparative purposes.
The migration of a series of applications at a local company (to which access has been 
obtained) will be used as a vehicle for critically evaluating the PRINCE II method in 
particular.
Outcomes and deliverables:
A report detailing the following:
–   an explanation of the perceived benefits of such a migration;
–   an analysis of the difficulties experienced;
–   a critical evaluation of the PRINCE II methodology and its application;
–   an outline methodology for future migration projects;
–   a discussion and evaluation of alternative tools and methods for software migration.
Research methodology:
Case study, action research.
Hardware and software requirements:
All available at a local company.
This proposal is a far better representation of an academic project than the first. Although 
the project is based on the same software migration, it identifies, far more clearly, the aca-
demic side of the project and the critical evaluation required by such projects. All sections 
are now completed correctly; for example, Research methodology identifies those methods 
actually employed and Project type has now been identified. The proposal reads well and 
has been checked for errors and omissions.
• 3.4 Choosing your supervisor
Academic departments have different ways of assigning project supervisors to stu-
dents. There are only a finite number of projects a supervisor can effectively super-
vise and you may find you are allocated someone who knows little about your field 

	 Chapter 3 ● Choosing a project and writing a proposal  
60
(although this must not happen at research degree level). If you are lucky enough to 
be able to choose your own project supervisor there are a number of considerations 
you should contemplate when making your choice. Sharp et al. (2002: 31) identify five 
questions that students should ask of potential supervisors:
	 1.	 ‘What are their records in terms of student completions?’
	 2.	 ‘What are their views on the management of student research – and, in particular, 
the supervisor’s role in it?’
	 3.	 ‘How eminent are they in their specialisms?’
	 4.	 ‘In addition to being knowledgeable about their subjects, have they high compe-
tence in research methodology?’
	 5.	 ‘How accessible are they likely to be?’
The fifth point noted here can relate, not only to a supervisor’s general availability, 
but to their approachability as well. It is all very well being able to see your supervisor 
regularly, but if you do not trust them, or get along with them, this time is wasted.
Whereas research degree students will require a supervisor to be an expert in their 
subject area, this is less important for taught degree students. At the taught degree level a 
supervisor’s role may be more managerial and pastoral than technical – for example, help-
ing you with project plans, checking you are achieving your milestones, 
assisting you with any personal problems, etc. At the taught degree level 
your supervisor, although not an expert in your chosen field, can still be 
a good supervisor and may well have sufficient technical understanding 
to assist you when necessary. You should also be able to approach other members of 
academic staff in your department (or other departments) for technical assistance. How-
ever, if there is no one in your department who is knowledgeable in your chosen field, 
your project is probably not appropriate anyway. Chapter 7 looks in more detail at the 
student/supervisor relationship and discusses how effectively to manage the time you 
spend with your supervisor.
• 3.5 Summary
● Choosing the right project is probably the most important stage of any project.
● A number of techniques have been presented that you can use to assist you with 
choosing a suitable project.
● When preparing a proposal there are two golden rules; follow any guidelines precisely 
and proofread it thoroughly.
● A project proposal should include, at least implicitly: background, related research, 
identification of a gap, how your project fills that gap, and risks and contingency plans.
● Project proposals should include, at the very least, sections such as project title, aims 
and objectives and expected outcomes/deliverables.
● Questions have been presented that you should ask yourself before you choose your 
project supervisor – if this is possible within your own institution.

	
3.7 Action points
61
• 3.6 Exercise
	 1.	 Can you think of any ways of improving the ‘corrected’ version of the proposal in 
Section 3.3.4?
• 3.7 Action points
● Try to build your own RTM, relevance tree and/or spider diagram for your own 
computing project.
● Put together a proposal for your own project using the ideas and skills you have learnt 
in this chapter.
• Solutions to selected exercises
	 1.	 The following are areas in which this proposal is lacking and could be improved 
still further (did you spot these shortfalls and did you identify any others?).
Objective 1 – other than Prince II, no other methods or tools are explicitly iden-
tified in the proposal, although they are alluded to.
Objective 2 – there is no reference to the companies needed for this contrasting 
evaluation or any indication of how the data might be obtained for this part of 
the study.
Outcome 3 – the report is going to comment on the effectiveness of Prince II in 
migration projects only. This is not clear from Outcome 3.
There is no project plan so it is difficult to see how long the migration will take 
and how long the research component of the project will take.
No risks or contingency plans are identified – for example, what if something 
goes wrong with the migration and the project is significantly delayed?

	
	
62	
CHAPTER
4
Aims:
To introduce techniques and approaches to project planning and risk management.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand the five elements of projects that need to be managed.
● Describe the typical stages of an academic project from a project management 
perspective.
● Define a project in terms of aims and objectives.
● Discuss the activities performed during the initial planning stage of a project.
● Understand the use of project management techniques for project planning.
● Manage risk in your project effectively using a defined risk management process.
● This chapter is relevant for both undergraduate and postgraduate 
projects.
Project planning and risk 
management
• 4.1 Introduction
4.1.1   Overview
Before tackling the actual work you need to complete your project, it is important to 
have some idea of how you are going to undertake that work. Without an appropriate 
project plan in place you will have little direction, you will lose sight of where your 

	
4.1 Introduction
63
project is going and you will not complete your project on time. In this chapter we will 
look at some techniques you can use to plan how you will tackle your project. Having a 
reasonable project plan in place will enable you to manage your time more effectively and 
decide on priorities for your project at different stages, and it will give you clear direction 
and motivation. We will also look at risk management, which will enable you to identify, 
manage and control any potential risks to your project. We will begin by discussing a 
generic interpretation of the project process before using this framework to introduce a 
number of project management techniques.
4.1.2   The project process
Figure 4.1 provides a generic view of the project process and introduces the five elements 
inherent in all projects – time, resources, cost, scope and quality. This view can be applied 
to any project to a greater or lesser extent – from large industrial projects right down to 
small, one-person projects like your own. The diagram shows that all projects consume 
time, resources and money (a budget or cost) to produce a particular product which has its 
own scope and quality. This product can be something tangible such as a bridge, a report 
or a software system; or it could be something intangible like a change in working prac-
tices, restructuring a department, improving company profits and so on (although these 
projects would undoubtedly have some tangible documentation associated with them).
In the case of your own project, Figure 4.1 shows that this will take a certain amount 
of time to complete and it will require the use of certain resources – primarily you, but 
probably other resources too – for example, your supervisor, a client/user, computer 
hardware, books and software. You should be aware that you will need ‘access’ to these 
resources as your project progresses and be confident that they will be available as and 
when you need them.
Although commercial projects have budgets associated with them, it is unlikely that 
you will have any real budget to manage. Some institutions do provide small budgets for 
student projects (for example, to purchase hardware, software, books, or perhaps travel 
to visit clients), but normally it will be your supervisor or client who will be responsible 
for this issue.
Figure 4.1 goes on to show how these ‘inputs’ are used to produce the project’s 
product. The project itself consists of two main activities – project management activi-
ties (the focus of this chapter) and product development activities. Project management 
Figure 4.1 A generic overview of the project process

	 Chapter 4 ● Project planning and risk management 
64
activities are concerned with planning how you will undertake your project, controlling 
your project as it is progressing, checking your progress, meeting milestones, monitor-
ing deliverables and managing risk. Product development activities are involved with the 
actual project work itself; for example, developing a program, writing reports, literature 
searching, meeting clients, quantitative research, qualitative research, seeing your super-
visor – in other words, everything you need to do to complete your particular project 
successfully. Generally speaking, project management activities should take no more 
than around 10% of your overall effort on the project. Many students do not stick to this 
principle and spend many hours planning and re-planning the minutiae of their project, 
rather than getting on with the real task in hand. Their projects might be well planned 
and controlled, but they leave themselves insufficient time to pursue a worthy project.
You should be aware that the 10% effort you put into your project’s management is 
not distributed evenly throughout the life span of the project. You will spend a lot of 
project management effort towards the start of your project planning how you will per-
form it, and less effort, as the project continues, actually controlling it.
The final stage of the project process in Figure 4.1 shows the outcome from the pro-
ject – the project’s product – i.e., the artefact that is finally assessed. This will prob-
ably be a report of some kind, a thesis or dissertation, a presentation, perhaps a fully 
documented computer program and an associated user guide and demonstration, a new 
model or algorithm, a literature survey, a case study, etc. There are two aspects to this 
‘product’ – it will have a certain scope (what it covers, what it does – i.e., what it achieves) 
and a certain level of quality (how well it does it). These are two aspects of your project 
over which you have control. You can, for example, reduce the scope of your product in 
order to improve its quality. Alternatively, you may want to cover more aspects in your 
report, or include more functionality in your program at the possible expense of quality. 
This is a difficult trade-off to make and is discussed in more detail in Chapter 7.
4.1.3   The project’s stages
From a project management perspective, all projects progress through five main stages 
during their lifetime; from the time the project is established as an initial idea, to the 
time the project is finally completed. These stages apply to all kinds of projects; from 
your own academic computing project to large industrial projects spanning several years. 
At this level of detail specific activities that might be unique within academic comput-
ing projects are not of interest. We are interested in the broader stages in which project 
activities are performed. Each of these stages requires managing in one way or another 
and there are different considerations you will have to make as your project progresses 
through them. The five main stages are:
	 1.	 definition;
	 2.	 planning;
	 3.	 initiation;
	 4.	 control;
	 5.	 closure.
Project definition and project planning collectively relate to your project’s inaugura-
tion. Project inauguration refers to the activities you perform before you actually start 
work on the main body of the project itself (the product development activities). Project 

	
4.2 Project definition
65
definition is the preliminary stage of this process and includes the activities presented 
in Chapter 3: deciding on your project and getting it approved by submitting an accept-
able proposal. In addition, this stage also includes establishing a more detailed project 
definition in order to prepare the ground for project planning. Project planning is the 
stage in which you decide how you will fulfil your aims by deciding how to approach 
the work you need to perform. Project definition and project planning are the focus of 
the project management activities within this chapter. Note that you will also use these 
preliminary stages to plan how you will manage the risks associated with your project. 
Section 4.4 introduces the risk management process that runs in parallel and comple-
ments the project management stages.
The following three stages of the process represent the project management activities 
you perform as you undertake the product development activities of your project – i.e., 
actually ‘doing’ your project and working on developing the project’s product. Initiation 
represents the activities that you perform to start the main content of your project. It involves 
arranging yourself into some kind of routine and can include the initial work you perform 
on your literature survey. If you are working on a group project you will have to assign tasks 
to, and organise, other members of your project team. You will arrange to meet with your 
project supervisor and lay down some ground rules and routines for the work ahead. This is 
discussed in more detail in Section 7.1.2.
Once you have organised yourself and your project is underway you will need to con-
trol it as it is progressing. Project control is covered in detail in Chapter 7. The last stage 
of any project is closure. In your computing project this will represent the final comple-
tion of your project, writing up your report, perhaps preparing for a final presentation 
or viva voce examination, completing any programs and associated documentation and 
finally handing everything in. How you complete your project by performing these activi-
ties is the subject of Chapters 8 and 9.
• 4.2 Project definition
4.2.1   Overview
The purpose of project definition is to clearly specify what it is you hope to achieve with 
your project. As mentioned above, this stage initially includes deciding on your project 
and putting together a proposal (covered in Chapter 3). In many ways your project defi-
nition and your initial project proposal are closely linked. They should both be written 
at the start of your project and, whereas your proposal aims to get your project accepted, 
your definition will help to clarify what it is you are really setting out to achieve.
Your project definition must identify the aims and objectives of your intended work. 
Chapter 3 briefly introduced the difference between aims and objectives for the purposes 
of producing a project proposal. In this section these ideas are extended so that your pro-
ject can be defined clearly in these terms. Defining your project in this way is important 
for a number of reasons.
● If you have difficulty defining your project in terms of aims and objectives, then you 
will have difficulty deciding on the work you ought to be doing and what your focus 
will be. It might also mean that your understanding of the subject area is lacking and 
you need to do some additional preliminary research in the topic area or, more drasti-
cally, choose an alternative project.

	 Chapter 4 ● Project planning and risk management 
66
● It gives you a clear target at which to aim. This provides a continual reference point 
against which you can assess your progress.
● It provides you with a means of evaluating your success at the end. For example, did 
you achieve all that you intended to do or more?
4.2.2   Defining your aims
Your project should be defined at two levels. At the top level you define your project’s 
aim or goal. All projects have one major aim that they hope to achieve and your comput-
ing project is no exception. If you are ever in any doubt over what work you ought to be 
doing or which direction you ought to be taking, you can refer to your project’s aim to 
guide you. If you still feel that something is important when it appears in conflict with 
your project’s aim then you probably need to redefine this aim. Examples of typical aims 
for computing projects are:
● to evaluate the effectiveness of requirements capture techniques in small software 
development companies in India;
● to develop and evaluate a user interface for statistical software packages;
● to design a methodology for graphical user interface (GUI) development of technical 
courseware material;
● to investigate and produce an evaluation of fourth generation languages for database 
development.
Each of these aims provides you with an understanding of that project’s main pur-
pose. They identify the area of investigation and the focus of the intended work. To 
achieve these aims each project will have a set of objectives; smaller subgoals that are 
significant steps towards achieving the project’s aim.
4.2.3   Setting objectives
As Chapter 3 specified, objectives identify significant measurable achievements you 
hope to make that build towards the ultimate aim of your project. Having identified 
and defined your project’s aim you should continue to define your project in terms of its 
objectives. For a project expected to last approximately one year, you wouldn’t expect 
to identify more than 12 objectives for your project. If your project has more objectives 
than this it may be that you are attempting to do too much or that you are breaking your 
project down into too much detail.
Take, as an example, a computing project that is going to evaluate artificial neural 
networks (ANNs) for predicting stock market indices (not an easy task!). You might 
identify the following aims and objectives for this project.
Project’s aim
● Develop and evaluate an ANN to predict stock market indices.
Project’s objectives
	 1.	 Complete a literature survey of existing stock market prediction techniques.
	 2.	 Develop a suitable ANN model.

	
4.2 Project definition
67
	 3.	 Identify and collect suitable data for analyses and evaluation.
	 4.	 Evaluate the model using appropriate statistical techniques.
	 5.	 Complete final report.
Note how the objectives build towards the ultimate aim of the project. They also 
appear in approximately chronological order – in other words, they identify the order in 
which you would expect to tackle the work. Notice, also, how you could further break 
down these objectives. For example, objective 2 would need you to investigate, evalu-
ate and identify a suitable tool and topology before you could develop a suitable neural 
network. Objective 4 may require you to investigate and learn how to use some suit-
able statistical techniques or statistical software packages. However, breaking objectives 
down into progressively lower and lower levels of detail serves little purpose other than 
to cloud your vision of your ultimate goal. This will become clear in the following sec-
tions, which discuss how to break down the actual work you will need to do to complete 
your project using work breakdown structures.
4.2.4   SMART objectives
The objectives identified above still require further refinement. This is achieved through 
the application of the SMART technique. There are a number of definitions of the SMART 
acronym, the most applicable to student projects being:
● Specific
● Measurable
● Appropriate
● Realistic
● Time-related.
For each of the objectives you identify in your project you should apply these criteria 
to ensure that those objectives are clearly defined. For example, take objective 1 from 
our example project:
	 1.	 Complete a literature survey of existing stock market prediction techniques.
Applying the SMART criteria:
● Is this specific? Does this provide us with enough idea of what we should be doing? 
(Yes)
● Is it measurable? How can we measure progress on this objective? How will we know 
when the objective is completed? How much literature must we access in order to 
conclude that the literature search is complete? (Probably not)
● Is it appropriate? Is it an appropriate objective to have, bearing in mind the long-term 
goal of our project? (Yes)
● Is it realistic? In the time we have available can we realistically expect to complete this 
task? (Probably – although until we start this task we won’t know how much work we 
will need to do on it)
● Is it time-related? Have we identified how long the task will take and when we expect 
to complete it by? (We don’t know yet but we will attempt to pin this down during 
project planning)

	 Chapter 4 ● Project planning and risk management 
68
According to SMART, the problems we have with this objective at the moment are 
that it is not clearly measurable and we don’t know how long it will take. Because of the 
nature of this objective we may well have to accept this as it stands. It is difficult to know 
how long a literature search will take as the search usually ‘snowballs’ as it continues. 
Our best approach will be to allocate a specific amount of time to this objective and draw 
a line underneath it at that point – on the understanding that we have done the best we 
can in the time available. However, until we complete our project planning, discussed in 
the following section, we don’t know how long to allocate for this objective so we shall 
leave it open-ended for now.
• 4.3 Project planning
Although you are now clear about what you intend to achieve with your project, what 
you must now do is identify the work you need to do in order to fulfil these aims. Project 
planning assists you by identifying the work you need to perform, clarifying the order in 
which you should tackle the work and revealing how long you need to do it. It is at this 
point that you may realise that your project is either overly complex or of insufficient 
depth for the requirements of your course. You may then decide to redefine your project 
(expanding or reducing its scope) before re-planning your work once more.
Project planning is performed through a series of six steps that utilise a number of 
project management techniques.
	 1.	 Work breakdown
	 2.	 Time estimates
	 3.	 Milestone identification
	 4.	 Activity sequencing
	 5.	 Scheduling
	 6.	 Re-planning.
Three techniques that are suitable for these stages are work breakdown structures, 
activity networks and Gantt charts. Each of these techniques will be looked at in turn as 
the six steps of project planning are discussed.
4.3.1   Step 1 – Work breakdown
Work breakdown structures (WBSs) are used to break your project down into lower and 
lower levels of detail to reveal exactly what work you will need to do to complete your 
project. You should begin a WBS by breaking your project down into its main objectives 
that you identified during your project’s definition. You might only be able to break 
your project down into two or three main areas of work or you might be able to identify 
several broad areas of activity.
Figure 4.2 provides an example of a WBS for the artificial neural network (ANN) stock 
market project introduced earlier. Five main objectives have been identified that need to 
be performed to complete this project. Notice how these tasks represent the five objec-
tives identified earlier.

	
4.3 Project planning
69
You should continue to develop your WBS by breaking your objectives down into 
lower and lower levels of detail. You may well find that some activities can be broken 
down further than others. For example, in Figure 4.2 the WBS has identified that the 
Literature survey will actually require the completion of a Literature search and a Litera-
ture review (although in Chapter 5 you will see that the literature survey process is much 
more complicated than this). Developing the ANN will involve first investigating and 
evaluating ANN topologies and tools (Investigate and evaluate ANNs) before design-
ing the ANN (Design ANN) and then developing and testing it (Develop and test ANN).
Evaluation will involve three activities: training the ANN developed (Train ANN), 
using the market models evaluated from the literature review (Use stock market models) 
and performing an Analyses of the two approaches. Notice how Analyses has been bro-
ken down into another level of detail – showing that it requires a review of appropriate 
statistical tests and tools (Review statistical tests) before analysing and evaluating the 
results (Analyse and evaluate).
As you break down your project in this way you should ensure that tasks at all levels 
are separate from one another and an activity in one part of the structure is not repeated 
or revealed within another area of work. If this happens you may be duplicating effort 
on your project unnecessarily or your WBS may be incorrect.
You can continue to break these activities down further but you must stop somewhere 
otherwise you could be identifying work which might take five minutes to complete! A 
general rule of thumb is that you should continue to break your project down into activi-
ties that take no less than around 5% of your project’s total effort. For example, there is 
little point in identifying activities that will take you less than a week to complete in a 
six-month project. If you do this, you may spend more time adjusting and controlling 
your plans as your project progresses than actually doing any work (remember, only 
10% of your time should be spent on project management activities). There are always 
unforeseen events in projects and activities will invariably take longer than you expect. 
Planning at too fine a detail is unwise as things will certainly happen to affect minutely 
planned activities before your project has finished.
Figure 4.2 An example of a work breakdown structure

	 Chapter 4 ● Project planning and risk management 
70
4.3.2   Step 2 – Time estimates
When a project’s aims and objectives are identified, it provides little indication of exactly 
how long the project will take to complete. You would hope that your project is of a suit-
able scope to keep you busy during the allotted time and is of sufficient depth for you to 
obtain a good grade. However, it is not until you break the project down using a WBS 
that you really begin to see just how much work is involved.
Now that the project is broken down into a number of tasks it is much easier to esti-
mate how long the project will take. It is far harder, for example, to predict how long 
it will take to complete the project’s Evaluation than it is to predict the effort needed 
for individual tasks that make up that activity: Train a neural network, Use stock market 
models and perform the Analyses. You may, however, feel that these lower level tasks are 
still not explicit enough and there is nothing to stop you breaking them down further 
within reason. This is just what was done with the Analyses activity in the example.
Focusing now on the lowest level of the WBS it is possible to make reasonably accurate 
predictions of the effort needed to perform these activities and consequently the project 
as a whole. For example, using the WBS in Figure 4.2, the time estimates in Table 4.1 
can be made for the lowest level tasks.
By working backwards from our overall project duration we have also been able to 
allocate an appropriate amount of effort to our literature search and literature review. 
This goes someway to satisfying the SMART criteria applied to our preliminary project 
objective in the previous section.
You should be reasonably happy with this estimate of the total project effort as it 
is much more accurate than you could have achieved working from the project’s title 
alone. You might now realise that, perhaps, you have aimed to do too much in the 
time available (you might have only six months to complete the project) and need to 
reduce what you intend to achieve. Alternatively, you might decide to allocate yourself 
less time to complete particular activities if you feel your estimates for these tasks were 
conservative.
Activity
Estimated duration
Literature search
8 weeks
Literature review
4 weeks
Investigate and evaluate ANNs
4 weeks
Design ANN
4 weeks
Develop and test ANN
2 weeks
Get stock market data
1 week
Train ANN
1 week
Use stock market models
2 weeks
Review statistical tests
2 weeks
Analyse and evaluate
4 weeks
Complete report
8 weeks
Total effort
40 weeks
(approximately 10 months)
Table 4.1  Time estimates for example stock market ANN project

	
4.3 Project planning
71
4.3.3   Step 3 – Identify milestones
Milestones are significant steps towards the completion of a project. They help you to 
appreciate your progress by providing you with intermediate reference points. This 
enables you to assess, at the earliest opportunity, how you are progressing against your 
planned schedule. Because you know these milestones are leading you towards the 
ultimate goal of your project, you can use these as intermediate goals at which to aim. 
Figure 4.3 provides a simple illustration of this point. In this figure the milestones are 
providing mini targets that you can use to focus your work in the short term.
To identify milestones you should focus on your project’s WBS and identify any key 
stages that appear to be significant breakthroughs in your project’s progress. It is best to 
do this at the top level of the WBS and use some (if not all) of your project’s objectives as 
milestones. These milestones then identify areas of work that, when completed, indicate 
you have achieved a significant step along the way. The number of milestones that you 
will identify for your project will vary depending on the project’s size. For a year-long 
project, six or seven milestones should be more than adequate as these would represent, 
on average, the completion of approximately two months’ work. Milestones can also 
be associated with the production of various reports, documents or subsystems – for 
example, an interim deliverable or a project proposal. One milestone you must always 
identify is the project’s final completion.
For simplicity only two milestones will be identified in the example project we are 
looking at: the completion of the literature survey (milestone 1; M1) and the comple-
tion of the project as a whole (milestone 2; M2). M1 shows that a significant step has 
been made in establishing the project’s foundation. You would expect to achieve this 
milestone within the first 12 weeks. M2 is the end of the project and clearly represents a 
significant event in the work! How these milestones are symbolised in the project plan 
is discussed in the following sections.
4.3.4   Step 4 – Activity sequencing
You now have an understanding of the work you need to perform in the project and the 
effort required to complete the individual tasks involved. An activity network can now 
be used to identify the order in which you should perform that work. Activity networks 
were first developed towards the end of the 1950s and are sometimes referred to as PERT 
Figure 4.3 Milestones leading to the project’s ultimate aim

	 Chapter 4 ● Project planning and risk management 
72
networks (program evaluation and review technique), CPM (critical path method) or 
network diagrams. Two forms of activity network were developed at that time – activity-
on-the-arrow networks and activity-on-the-node networks. We will look at the simplest 
form of these diagrams in which activities are represented by rectangles or nodes – the 
activity-on-the-node network.
Activity-on-the-node diagrams represent the tasks you are performing in your project 
as nodes connected by arrows. The arrows show the order in which activities must be 
performed. For example, in Figure 4.4, Task A can start at any time as it does not rely on 
any other task completing. Task A would therefore start at the beginning of the project. 
Task B cannot start until Task A has finished and Task D can only start after both Tasks 
B and C have completed successfully. Task C is similar to Task B in that it cannot start 
until Task A has ended.
If this representation is applied to the example stock market project introduced earlier 
it results in the activity-on-the-node representation shown in Figure 4.5. In this example 
the completion of the project’s report has been identified as an activity that is performed 
during the last eight weeks of the project. In reality, however, you would probably be 
working on your project’s report throughout the lifetime of your project and the activity 
identified here really represents the final drawing together of the report; checking and 
completing your references, writing your abstract and contents listing, proofreading 
and spell-checking.
There are three additional markings to Figure 4.5 that are not shown in the example of 
Figure 4.4, which have yet to be explained. The first point to note is that the milestones 
identified earlier have been included as diamonds called M1 and M2; M1 being the com-
pleted literature survey and M2 representing the completed project. Notice how these 
have been placed in the relevant positions on the diagram and represent the completion 
of the significant step they are identifying.
The second point to note is that dates and durations have been added to each task 
node. Each activity now has two figures – the start date of the activity, shown at the top 
left of each node, and the duration of the activity (in weeks) shown on the top right. 
These durations are taken from the time estimates made in Table 4.1. It is up to you what 
time ‘granularity’ you use for your project (hours, days, weeks months or even years) 
but, in a student project of this size, weeks or months are suitable.
For simplicity it will be assumed that a month consists of exactly four weeks and there 
are no breaks in the project for holidays! However, in reality holidays, sickness, revision, 
field trips and the like can often impede your progress and these events should be con-
sidered when forming project plans.
Figure 4.4 An example of a simple activity-on-the-node diagram

	
4.3 Project planning
73
Figure 4.5 An example of an activity network
Literature
search
Literature
review
Get stock
market data
Investigate
and evaluate
ANNs
Design ANN
Develop and
test ANN
Train ANN
Use stock
market
models
Review
statistical
tests
Analyse and
evaluate
Complete
report
M2
M1
1 Wk
2 Wks
1 Jan
4 Wks
1 Jan
4 Wks
1 Feb
2 Wks
1 Mar
8 Wks
1 Jan
1 Mar
4 Wks
1 Apr
1 Apr
2 Wks
14 Apr
4 Wks
1 May
8 Wks
1 Jun
1 Aug
14 Mar
1 Wk

	 Chapter 4 ● Project planning and risk management 
74
The date, which is noted at the top left-hand corner of each activity, represents the 
time at which that activity can start. For activities that can start straight away (i.e., they 
do not need any other activities to have completed beforehand) this is simply the start 
date of the project. In the example, three activities can start straight away – Literature 
search, Get stock market data and Investigate and evaluate ANNs. All these activities have 
the same start time – 1 January – which represents the start date of the project overall 
(this start date has been chosen for simplicity).
To calculate the start times of subsequent activities it is necessary to look at the tasks 
leading into them. For example, in this simple case, Literature review can begin as soon 
as the Literature search has completed. As the Literature search takes eight weeks to 
complete (approximately two months) the Literature review can begin from 1 March 
onwards. The first milestone (M1 – complete literature survey) occurs when this review 
is completed and consequently, as the review takes four weeks to complete (approxi-
mately one month), M1 will (should) occur on 1 April. Notice how M1 has no duration 
associated with it because it does not represent any work but simply an event in time.
Calculating the start time for activities with more than one task leading into them is 
not quite so straightforward. When two or more tasks lead into another, that task can 
only start when all its preceding tasks have completed. For example, in Figure 4.5 notice 
that Train ANN starts on 14 March – this is when you would expect Develop and test 
ANN to complete not when Get stock market data has completed (which is due to finish 
on 7 January). Remember that subsequent activities can only begin when all preceding 
activities leading into them have completed.
Continuing with the calculation of start times for each activity in the project, the final 
milestone, M2 (completed project), is reached. Thus, it is possible to conclude that the 
project should be completed by 1 August. However, this may be optimistic, as it does 
not account for any delays or problems that might occur and also assumes tasks can be 
performed in parallel.
The final additional marking to this network diagram is the critical path, which still 
requires explanation. This path is the longest route through the project network and is 
represented in Figure 4.5 by the bolder arrowed lines. It identifies the activities in the 
project that must not be delayed, as to do so will delay the project overall. For example, 
if Complete report were to take 12 weeks instead of 8, the project would finish on 1 Sep-
tember – four weeks later than before. This is because Complete report lies on the critical 
path and any delay to this activity will therefore affect the project overall.
To identify the critical path you work backwards through the network diagram from 
the project’s final milestone. Begin, therefore, at M2 and look to see which task(s) lead-
ing to this milestone is causing it to occur on 1 August. There is only one activity in this 
case leading into M2, Complete report, so this task is on the critical path. Looking next at 
Complete report we see, once again, that only one task leads into it – Analyse and evalu-
ate. Consequently, Analyse and evaluate must also be on the critical path.
You continue to work your way backwards through the network, along the critical 
path, until you either reach the project’s start or an activity that has two or more activities 
leading into it. In the latter case Review statistical tests is the first activity in this situation. 
However, just as before, you look back through the network to see which activity(ies) 
is (are) forcing Review statistical tests to start on 14 April and see that, in this case, it is 
Use stock market models not Train ANN. Use stock market models is also, therefore, on 
the critical path. Continue in this way, working backwards through the network, until 

	
4.3 Project planning
75
you reach the start of the project – in this case ending up at the Literature search. The 
critical path is thus identified by the bolder arrowed lines linking each of these critical 
activities together.
There is no reason why you cannot have more than one critical path in your project 
network. In some cases two or more activities may force a subsequent task to start on a 
particular date. In these cases proceed as before, following all critical paths back to the 
start of the project or to a point where they rejoin. The activity network is now complete.
This representation has made several assumptions. The first is that you can perform 
several tasks simultaneously. This often happens in computing projects where you 
might, for example, be performing aspects of your literature search and literature review 
alongside an initial systems analysis or program design. This also stops you becom-
ing bored with one activity or another because you can switch between them as your 
project progresses. However, although identifying several simultaneous tasks may be 
satisfactory for group projects, where several members of the project team can work on 
tasks separately, for individual projects this can cause a problem. To identify instances 
when you are expecting to work on too many activities simultaneously, and to see how 
you can deal with this problem, you must use a Gantt chart, which is introduced in the 
following section.
The second assumption made is that once activities are completed they are finished 
with and your project moves on. In reality, however, many activities are ongoing through-
out the lifetime of your project, for example, the literature survey and report writing. 
However, emphasis on these ongoing activities changes as the project progresses. There 
are also situations where activities are repeated and you find yourself performing a loop 
– for example, the literature search and literature review which are part of the repetitive 
literature survey process discussed in Chapter 5. An example of loops occurring within 
software development projects is when an evolutionary prototyping approach is used. 
This approach is discussed in detail in Chapter 6.
These situations cannot be planned explicitly using ordinary activity network dia-
grams and, although there are networking techniques that can be used to identify repeti-
tion and loops, they are not widely available. Consequently, project planning tends to 
identify distinct activities that occur either in parallel or in sequence and limits activity 
network plans to these representations.
4.3.5   Step 5 – Scheduling
Gantt charts are similar to activity networks in that they attempt to represent a project in 
diagrammatical form. However, unlike activity networks, they do not show the relation-
ships between tasks, but they do explicitly show the durations of activities and identify 
instances when tasks are performed simultaneously.
Just like activity-on-the-node networks, Gantt charts represent a project’s activities as 
rectangles or nodes, and milestones by diamonds. In this case, however, the size (length) 
of an activity’s node represents the duration of that activity. For example, in Figure 4.6 a 
Gantt chart has been put together for the example stock market ANN project. The scale 
running along the bottom of this chart represents the dates during which the project is 
performed. Notice how each activity in this chart is represented by a rectangle which 
is as long as the activity’s estimated duration. For example, the Literature search lasts 
for two months starting at the beginning of the project. It is therefore drawn up until 

	 Chapter 4 ● Project planning and risk management 
76
1 March. The Literature review follows on from the Literature search and lasts for one 
month – again shown by the length of the task box – finishing by 1 April. Milestone 1 
(M1) is shown at the appropriate point at the end of this task.
It is important to keep an eye on the activity network when drawing a Gantt chart to 
ensure that activities are performed in the correct sequence and activities do not start 
in the Gantt chart before all their preceding tasks have completed. Some Gantt charts 
allow you to include the arrowed connections between activities like those in the activ-
ity network. However, trying to include all this information on one diagram does mean 
it is very messy and difficult to follow. It is therefore best to use both these techniques 
simultaneously – each one complementing the other.
In Figure 4.6 notice how activities that do not fall on the critical path of the activity 
network have shaded extensions to them. These shaded areas represent an activity’s slack 
or float time. Remember that activities on the critical path cannot be delayed without 
delaying the project overall. This implies that activities which don’t lie on the critical 
path can be delayed to some extent without affecting the project. The extent to which an 
activity can be delayed without affecting the project is called its slack or float.
To identify slack time in your project you need to focus on activities that do not lie 
on the critical path. You work your way backwards through your project (starting at the 
project’s completion milestone as before) until you meet one of these activities. In the 
example, looking at the activity network in Figure 4.5, the first activity encountered like 
this, working back through the network, is Train ANN. Train ANN leads into Review 
statistical tests (which is on the critical path). As long as Train ANN is not delayed for so 
long that it starts to delay Review statistical tests, the project will not be affected. Thus, 
Train ANN could be delayed so that it finishes no later than the start of Review statistical 
tests (i.e., 14 April). This delay represents the slack time of Train ANN and is shown as 
the shaded area in Figure 4.6. In this case the delay can be up to three weeks before the 
impact is felt on the project overall.
Working backwards from Train ANN we will now look at Develop and test ANN. 
Because this task leads directly into Train ANN, this activity may also be delayed by 
three weeks without affecting the project overall. This is because we know that delaying 
Develop and test ANN by three weeks will only delay Train ANN by three weeks, which 
is fine as Train ANN has three weeks of slack. The same argument is applied to Design 
ANN and Investigate and evaluate ANNs. Consequently, these activities have the same 
float applied to them as Train ANN (i.e., three weeks).
Get stock market data is the only other activity not lying on the critical path that still 
needs considering. This activity must complete before Use stock market models and Train 
ANN can begin. As Use stock market models is on the critical path, we must ensure that 
Get stock market data finishes no later than the critical start time of Use stock market 
models. Thus, Get stock market data can be delayed so that it finishes no later than 1 April 
(the start of Use stock market models). Notice, if it was, that it would also delay Train 
ANN by two weeks. This is acceptable because Train ANN is not on the critical path (it 
has three weeks of slack) and so delaying this task by two weeks will not impact on the 
project. Be careful in these situations, however, to ensure that if a task is allocated slack 
that this will not impinge on other non-critical tasks to such an extent that they become 
critical and delay the project overall.
Notice that some of the slack we have identified on tasks relies on subsequent activi-
ties with slack being delayed (for example, Get stock market data running into Train 

	
4.3 Project planning
77
Figure 4.6 An example Gantt chart
ANN), while other activities with slack do not rely on subsequent non-critical tasks 
moving (for example, Train ANN). This implies that there are different kinds of slack 
that can be identified in Gantt charts. In fact, there are four kinds of slack one could 
identify in a project plan – free slack, independent slack, interfering slack and total 
slack. However, for the purposes of a student project, you do not need to go into this 
level of detail on the Gantt chart. What we have identified in this case is simply total 
slack which is sufficient for projects of this nature. The total slack for a task represents 
the amount of time that task can be delayed by, assuming all other tasks with slack 
are able to be delayed to accommodate it where necessary. The Gantt chart is now 
complete.

	 Chapter 4 ● Project planning and risk management 
78
What this chart now highlights is that there are times when you need to perform more 
than one activity at a time. For example, looking at the first week of the project in January 
you will see how you should be working on the Literature search, Investigate and evalu-
ate ANNs, and Get stock market data all at the same time. For group projects this is not a 
problem as these tasks can be assigned between team members. However, for individual 
projects, this might well be unacceptable and something needs to be done about it.
One solution might be to use the float time on various activities. For example, Get 
stock market data could be delayed for a few weeks without affecting the project overall 
and it would reduce the number of activities that needed to be performed during the first 
week of the project. However, this is only putting off the inevitable. At some stage in the 
project Get stock market data will have to be tackled and it will inevitably clash with some 
other work at that time. The problem lies in the fact that ten months worth of work (40 
weeks) is being attempted within seven months (1 January to 1 August) with only one 
person available. This is impossible, unless you are able to do more than one activity at 
a time. If you cannot, then you must accept that your project will take ten months to 
complete and you should adjust your Gantt chart accordingly.
Project management software packages are well suited to these kinds of problems – 
known as scheduling. They attempt to schedule out people’s (resources’) time on projects 
in order to achieve a balanced allocation of work over a project’s life span.
In this case a popular project management package called Microsoft® Project has been 
used. Figure 4.7 shows a print-out of a Gantt chart from this package for the example 
ANN stock market project. Notice how similar this is to the representation shown in 
Figure 4.6. Microsoft® Project was then used to re-plan the project on the understand-
ing that only one person was available to do the work. Microsoft® Project rescheduled 
the plan to that shown in Figure 4.8. Notice how the project is now scheduled to last for 
ten months, finishing at the end of October, and only one activity is being performed at 
any one time. However, this is not necessarily an ideal solution as, for example, there 
now appears to be quite a delay between performing the Literature search and writing 
the Literature review – two activities that, in reality, are closely intertwined. With this 
in mind, you should always pay close attention to scheduling adjustments that are made 
by project management software tools.
4.3.6   Step 6 – Re-planning
Now that you have completed all your plans you may realise that you are trying to do too 
much in the time available. Re-planning simply means that you go back through your 
plans, adjusting and rescheduling them accordingly. Project management software tools 
are particularly useful for making these changes and assessing the impact of your adjust-
ments. However, try not to spend too long on this stage by getting drawn into the usability 
of these tools and end up using them for their own sake. You may find yourself re-planning 
and rescheduling at minute levels of detail rather than getting on with the ‘real’ work of 
your project (remember, the ‘real’ work should take around 90% of your effort).
Note, also, that plans you have produced should not be cast in stone. For instance, 
in the example project, you may find that after completing your investigation of ANNs 
you decide that it might be more appropriate to use an off-the-shelf package rather than 
develop your own ANN model. This will clearly lead to some reworking of the plan and 
may release some time later in the project for you to concentrate on other activities.

	
4.3 Project planning
79
Figure 4.7 Microsoft® Project Gantt chart of example project

	 Chapter 4 ● Project planning and risk management 
80
Figure 4.8 Scheduled Gantt chart of example project

	
4.3 Project planning
81
4.3.7   Rolling wave planning
A technique that can help you when your project is not all that clear is rolling wave plan-
ning. Rolling wave planning means that, rather than compiling a detailed plan at the pro-
ject’s inception, you construct a skeleton plan, which only identifies the key stages of your 
project. Your project planning is thus performed ‘on the fly’ as your project progresses. 
You make decisions as to where you are actually heading and what work you will have to 
perform in the subsequent stages of your project, as you complete the previous stages. 
Thus, your planning detail ebbs and flows (like a rolling wave) as your project progresses 
and you make decisions on where to go and what to do next.
As a skeleton plan is relatively broad it can be suitable for many projects. Although it is 
of little use if you don’t have any idea of what you want to do, it can help you to identify 
universal milestones that you must adhere to – for example, complete a literature survey, 
hand in your final report, etc. – whatever these turn out to be. Figure 4.9 provides an 
example of a typical rolling wave, skeleton plan – in this case a software development-
type project that lasts for about six months. Although this plan does not provide explicit 
detail about what this project is really about, it does identify the significant tasks that 
need to be completed and by when.
4.3.8   Project initiation document
A project initiation document (PID) is a term that originates from the PRINCE II pro-
ject management methodology (OGC, 2009), the content of which aims to answer four 
fundamental questions about the proposed project.
● What is the project aiming to achieve?
● Why is it important to achieve it?
● Who will be involved and what are their responsibilities?
● How and when will the project be undertaken?
To address these questions the PID draws together a number of sections in one place, 
representing a definitive overview of the project – its purpose, objectives, outline, plan, 
risks, etc. It can form a contract in terms of defining what the project will achieve. PIDs 
come in various shapes and sizes with different content requirements, and many com-
panies have their own definitions of what should be included. It is always a good idea 
to put together a PID at the start of your project. The components used in the project 
proposal (see Section 3.3) can form the basis of your PID, namely:
● title
● aim and objectives
● expected outcomes/deliverables
● introduction/background/overview
● project type
● related research
● research question/hypothesis
● methods

	 Chapter 4 ● Project planning and risk management 
82
Figure 4.9 Example rolling wave skeleton plan for a software development project

	
4.4 Risk management
83
● resource requirements
● project plan
These may need some updating once your project is accepted as you may have made 
some progress and made some changes since the proposal was put together. In addition, 
it would be worthwhile including the following three sections in the PID.
	 1.	 Risks. Include a list of critical risk factors and means of dealing with these risks 
should they occur. How might you reduce their impact or limit their chances of 
occurring in the first place? Risk management is covered in the following section 
and this will give you some ideas of what to include in the PID.
	 2.	 Organisation. If you are undertaking a group project it would be worthwhile 
outlining how your team will be organised; who is the team leader, secretary, 
spokesperson; how often the team will be meeting; communication arrange-
ments (email addresses, website, etc.); configuration management, etc. Team 
organisation is discussed in Chapter 7.
	 3.	 Milestones. Now that your project plan is completed you can identify the major 
milestones within the PID. These milestones should include both project-specific 
ones (i.e. any deliverables you are producing) and generic, course-related ones (for 
example, deadlines for interim reports, final reports, presentations, etc.).
You might like to keep your PID in a project folder so that you can refer to it easily as 
your project progresses. Sections such as the project plan and risk plan may need to be 
readily available and accessible. The idea of establishing a project folder is covered in 
Section 7.1.2 when project initiation is discussed.
• 4.4 Risk management
4.4.1   Introduction
Risk management is a process that is inexorably linked to project management; it runs 
in parallel with project management and follows a very similar process. Just as project 
management involves the development of a project plan and control of the project using 
that plan as the project progresses, risk management involves the identification of risks 
at the project’s outset and the control of those risks as the project unfolds. As you under-
take the stages of project management you will also be incorporating the activities of the 
risk management process. In this section we introduce a risk management process that 
you can use to manage and control risks within your own project. The four main stages 
of this risk management process are:
	 1.	 identify risks;
	 2.	 assess impact of risks;
	 3.	 alleviate critical risks;
	 4.	 control risks.

	 Chapter 4 ● Project planning and risk management 
84
4.4.2   Identify risks
As you are putting together your project plan, you should also be identifying any sources 
of risk to your project. These risks can be individual events (event-driven risks – acute) 
that might have an impact on your project (for example, your supervisor leaving, hard-
ware failure, etc.) or they may be longer term risks that evolve over time (evolving risks – 
chronic) before eventually coming to a head (for example, underestimating the time it will 
take you to develop part of your system, deteriorating relationship with your client, etc.).
Whether the risks to your project are event-driven or evolving, they can be further 
classified as either technical or non-technical risks. Technical risks refer to any risks that 
are associated with the hardware or software you might be using. For example, will there 
be problems interfacing the components of the software and hardware system you are 
developing? How well do you know the programming language and platform you are 
going to work with? Is your project dependent on the development of an algorithm that 
may be difficult, if not impossible, to develop? Is the specification for the system clear? 
Are the requirements likely to change? Is the project beyond your technical ability? What 
are the chances of your disk crashing and you losing all your data?
Non-technical risks are all other risks associated with your project. These can include 
such things as losing your client, your user or your supervisor, illness, over-running your 
time estimates, discovering work during your literature search that already covers (in 
depth) what you intended to do; and so on.
As well as identifying potential risks to your project it is also useful to identify risk 
triggers (sometimes called risk symptoms) at this stage too. Risk triggers are events or 
things that happen during the course of your project (not necessarily ‘bad’ things) that 
might give an indication that something is wrong or that one of the risks you have identi-
fied is increasingly likely to occur. They are useful in that they give you warning, ahead 
of time, that something will happen and you can be better prepared to deal with it when 
it does. For example, missing preliminary milestones in your project is a good indication 
that your project is going to over-run; struggling with a straightforward implementation 
of a component in a new programming language will probably mean you will encounter 
severe implementation difficulties later on; having difficulty in arranging a meeting with 
your client early on may be a good indicator that s/he may be difficult to contact and 
meet later when you are desperate for feedback towards the end of your project.
All projects encounter problems to some extent, so don’t be disheartened if some of 
the risks you identify during this stage of the risk management process occur. The point 
of risk management is to reduce risks or ensure you are in a position to deal with these 
risks if they do occur and you are not facing them ill-prepared.
4.4.3   Assess impact of risks
Having identified the risks associated with your project in the first stage of the risk man-
agement process, you should then calculate their impact. The impact of any risk on your 
project is given by the following equation:
Risk impact 5 likelihood 3 consequence	
(4.1)
Thus, although a risk may be highly likely to occur, if its consequences are low its 
impact will also be low. Similarly, if a risk has severe consequences for your project but 

	
4.4 Risk management
85
Example
Turner (1993: 242) provides an interesting illustration of how the risk impact equation 
works in practice. If we consider the likelihood of a severe earthquake (say, greater than 
Force 7 on the Richter scale) occurring in the British Isles, we would probably conclude 
that the chances of this occurring are small. We then consider the consequences of this 
risk on two different kinds of building – a car park and a nuclear power station. In the 
case of a car park the consequences of a severe earthquake are quite small – a few cars 
may get damaged and (unfortunately) a small number of people may be injured or killed 
if it collapsed. As the consequences of the risk are relatively low (unless it is your car that 
gets crushed!) and the likelihood is low, the overall impact of this risk is also deemed to 
be low. Thus, in the British Isles, car parks are not constructed to be ‘earthquake-proof’.
In the case of the nuclear power station however, the consequences of a major earth-
quake could be catastrophic – hundreds of thousands of people could be killed. In this 
case, while the likelihood of the earthquake is the same as for the car park, the conse-
quences are much higher – leading to an overall risk impact that is deemed very high. Thus, 
nuclear power stations within the British Isles are constructed to withstand such events.
its chances of happening are very low, its impact is also calculated as low. The risks you 
need to worry about are those that are highly likely to occur and have significant conse-
quences to your project if they do.
Risk consequence
Score
Very Low
1
Low
2
Medium
3
High
4
Very High
5
Table 4.3  Risk consequence scores
Risk likelihood
Score
Low
1
Medium
2
High
3
Table 4.2  Risk likelihood scores
Turner (1993: 256) goes on to provide a quantitative measure for assessing the risks 
to your project. A risk’s likelihood is classed according to a three-point scale – Low/
Medium/High. Similarly, a risk’s consequence is measured on a five-point scale – Very 
Low/Low/Medium/High/Very High. Turner assigns numbers to these measures, as 
shown in Tables 4.2 and 4.3.
By assessing each of the risks to your project according to these scales, you can deter-
mine a risk’s impact as a value between 1 and 15 based on Equation 4.1 (1 × 1 being the 
lowest score and 3 × 5 being the highest possible score). For example, suppose we feel 
that there is a small chance that we may lose our client during the course of our project 
(s/he may have told us in a preliminary meeting that their department may be restruc-
tured during the next six months – risk likelihood is medium; 2), yet the consequences 
of this are quite severe (how would we assess our final system?). We might feel the con-
sequences are therefore high; 4. The overall risk impact of this risk is 2 × 4 = 8.

	 Chapter 4 ● Project planning and risk management 
86
Although this (dimensionless) number doesn’t really mean anything as it stands, it 
does provide us with a relative measure that we can use to compare all the risks we iden-
tify in our project. We can then rank the risks to our project according to this measure 
and begin to focus on the ‘critical’ ones.
Depending on how many risks you identify you can choose to categorise critical risks 
in one of two ways; either the 80/20 rule or by impact factor with RAG grading. The 
80/20 rule works on the theory that approximately 20% of your risks will cause approxi-
mately 80% of your problems. You should therefore focus on these critical risks and be 
confident of addressing 80% of the problems your project is likely to face.
In reality, your risk list may not partition easily into an 80/20 split, or there may be 
another natural break point where three or four risks appear significantly ‘riskier’ than 
others. You may therefore decide to focus on critical risks by impact factor alone – for 
example, those that have an impact factor greater than 9 say. One approach you can use 
here is RAG grading. RAG stands for Red, Amber and Green and is used to classify risks 
according to their impact factor. Those with an impact factor of 1 to 5 are classified as 
green risks; those with an impact factor of 6 to 10 are amber risks; those with an impact 
factor greater than 10 are red risks. It is the red risks (critical risks) that you need to focus 
your attention on. Although not critical, you should keep a wary eye on amber risks, and 
green risks can generally be ignored.
Whichever approach you use, you will end up with a short list of critical risks that you 
are going to do something about. How you deal with these critical risks is discussed in 
the following section.
4.4.4   Alleviate critical risks
There are three ways that you can deal with the critical risks you have identified in your 
project: avoidance, deflection (sometimes called transfer) and contingency. Avoidance 
means reducing the chances that the risk will occur at all. Deflection means passing the 
risk onto someone or something else. Contingency means accepting that the risk is going 
to occur and putting something in place to deal with it when it does.
Example
Pym and Wideman (1987) provide a neat analogy that contrasts these approaches. Take 
the situation in which someone is about to be shot at. They can avoid this risk by moving 
quickly to somewhere safe (avoidance). They can deflect this risk by putting something 
(a shield) or someone between themselves and the assassin (deflection). Or, they can 
assume they are going to be hit by some bullets and ring the ambulance service in advance 
(contingency). You may like to think which of these approaches to dealing with this risk 
you prefer!
The nature of the risks within your own project will influence which of these 
approaches are suitable. Although your supervisor should be able to give you advice in 

	
4.4 Risk management
87
this area, the following examples may provide you with some ideas you could adopt in 
your own project.
● Contingency. If you feel there is a chance some tasks may over-run in your project it 
might be an idea to build some contingency into your project plan at the start. You 
could, for example, aim to complete your project four weeks ahead of its submission 
date – giving you four weeks of flexible time (float) that can be used if unexpected 
delays occur. Alternatively, you might like to add 10% to each of the time estimates 
you have made to cover any possible delays.
● Deflection. You might be able to get someone else to do part of the work for you in an 
area where you are weak (although you would have to acknowledge this clearly in your 
report). For example, you might be undertaking a research-based project focusing on 
the impact of a particular software technology in an organisation. The project may 
require the development of a software system (and your programming skills may be 
weak), but this is not the main focus of your work. It might, therefore, be possible to 
get someone else to develop that software system for you while you remain focused on 
the important evaluation component of the project. This is certainly something that 
would need approval from your institution or supervisor to ensure that the integrity 
of your own work was not compromised.
● Avoidance. If there is a risk that you will not be able to develop a program because 
you are considering using a new programming language, perhaps you could resort to 
using a language with which you are familiar.
● Avoidance. If your software system requires the development of an algorithm to solve 
a problem and you are unsure whether you can do this or not, you might be able to use 
an existing algorithm instead (but make sure this does not reduce the potential marks 
you can achieve for your work). You could also use a technical prototype (discussed 
in Chapter 6) to assess the likelihood of this risk early on.
● Contingency and Avoidance. Is there a possibility that your computer might crash 
and you might lose all your work? Contingency planning would involve arranging 
an alternative machine you could use if such a problem occurred. Avoidance would 
involve making sufficient back-ups of your work to ensure that all would not be lost 
if this happened.
4.4.5   Controlling risks
You have now identified all the risks in your project, focused on the critical ones and 
decided what you will do about them. This is not the end of the process; you cannot just 
sit back and relax. Although risk management can make you aware of the risks involved 
and put things in place to deal with those risks, it does not take away the risks to your 
project entirely. The last stage of the risk management process is concerned with plan-
ning your risk strategy approach, monitoring risks as your project progresses and dealing 
with those risks if they occur. When we look at controlling your project as it is progress-
ing, see Chapter 7, we will examine some specific problems your project might face 
in more detail (and ways to deal with those risks). This section is concerned with the 
process of controlling the risks rather than the risks themselves.
The first task you must undertake as part of this stage is to decide how you will man-
age the risks you have identified. This is not in terms of how you will deal with those 

	 Chapter 4 ● Project planning and risk management 
88
critical risks, as this was covered in the previous section. This task involves deciding how 
you will go about controlling risks in your project and making sure you have the right 
resources available to deal with the risks – in other words, what is your strategy going to 
be towards risk management in your project?
One strategy you can adopt is to identify specific checkpoints in your project’s pro-
gress, when you will revisit your critical risk list and adjust it according to your latest 
understanding. However, be aware that triggers or risk events can still occur outside 
these checkpoints and should be dealt with accordingly. You may decide to hold check-
points at the end of every week, fortnight or month. Alternatively, you may decide to 
hold checkpoints at the end of particular stages of your project – for example, after the 
literature search is completed, after the design is completed and so an. Another alterna-
tive would be to arrange checkpoints during meetings with your supervisor – s/he may 
wish to know how your project risks are changing.
Part of the process involves checking for those risk triggers you identified during risk 
identification. Another part involves invoking your contingency plans when risks occur, 
whereas another part requires you to constantly monitor and update your critical risk list. 
Risks are not stationary; they will evolve over time. Some risks will become more ‘risky’ 
(their impact will increase), while others will become less so. As your project progresses 
some risks may be ‘promoted’ to your critical list, whilst others may be ‘demoted’ from 
it. Risks can therefore move from green to amber to red risks and vice versa in the RAG 
grading scheme.
• 4.5 Summary
● Project planning consists of two stages: defining what it is you want to achieve and 
planning how you will achieve this. Project definition involves identifying your pro-
ject’s aims and objectives.
● Planning itself consists of six steps: identifying the tasks involved using work break-
down structures; estimating the duration of these tasks; identifying critical stages in 
your project called milestones; identifying the order in which activities should be per-
formed using activity networks; scheduling your time so that you are not trying to do 
more than you can physically achieve using Gantt charts; and re-planning your project 
to fit the time available.
● Project management software packages, such as Microsoft® Project, can be used to 
assist you with planning and managing your project. Although you can put together 
your own Gantt charts and activity networks by hand, such as those shown in Fig-
ures 4.5 and 4.6, project management software tools can automate this process for 
you. However, these packages do take time to learn and you can often find yourself 
spending more time planning and ‘tweaking’ your project with these packages than 
actually doing any real work. Remember – you should only spend around 10% of your 
time at most on project management.
● Risk management is performed in parallel with project management and involves the 
following four stages: risk identification, risk quantification, risk alleviation and risk 
control.

	
4.8 Action points
89
• 4.6 Further reading
Barker, S. and Cole, R. (2012) Brilliant project management: What the best project man-
agers know, say, do (3rd Edition), Pearson, Harlow, UK.
Levine, H.A. (2002) Practical project management: tips, tactics and tools, John Wiley, 
New York.
Lock, D. (2013) Project management (10th Edition), Gower, Aldershot, UK.
• 4.7 Exercises
	 1.	 Try to identify objectives for the example projects listed in Section 4.2.2.
	 2.	 Apply the SMART criteria to the remaining objectives in the example in 
Section 4.2.3.
	 3.	 In Section 4.4.2 state whether the technical and non-technical risks identified are 
event-driven or evolving risks.
	 4.	 What are the risks associated with the ANN stock market project? Can you identify 
any triggers in this project?
• 4.8 Action points
● Identify aims and objectives for your own computing project.
● Apply the SMART criteria to your own project’s objectives.
● Follow the six steps of planning to complete your project’s plan.
● Apply the four stages of the risk management process to your own project. What are 
the three main risks to your project and what do you intend to do about them?

	
	
90	
CHAPTER
5
• 5.1 Introduction
In virtually all computing projects (especially at research degree level) you are assessed on 
what you submit at the end – be it a written report, a working program, a specification, 
detailed system designs, test plans or whatever. However, it is often the initial investiga-
tive work that you perform that can make the difference between a good project and a bor-
derline fail; even for practically based programming projects in which the development 
Aims:
To introduce the skills needed to undertake literature surveys.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand the process of literature surveys.
● Define and conduct a literature search.
● Manage information obtained during a literature search.
● Understand how to conduct critical evaluation.
● Write a literature review.
● This chapter is particularly relevant for research degree projects.
● The chapter is also appropriate for taught degree projects – 
especially those which are research-based.
● This chapter provides useful material for all taught degree projects.
Literature searching and 
literature reviews

	
5.1 Introduction
91
of a piece of software is the main component. The initial foundation for your project is a 
literature survey. This survey is composed of two main components: a literature search 
and a literature review. The literature search represents the mechanics of looking for, sort-
ing, managing and digesting the available research material. The literature review repre-
sents your written understanding, critical evaluation, conceptualisation and presentation 
of the material you have obtained. A skill related closely to both of these components is 
referencing. How to reference material correctly will be discussed in Chapter 8.
A literature survey acts as an introduction to your project and serves a number of 
purposes.
● It justifies your project – i.e., it shows that your project is worth doing: the area that 
you are investigating is recognised and meaningful. At research degree level you will 
also be identifying that your project is not merely repeating the work of others, but 
has a contribution to make, perhaps by identifying a current gap in the literature of 
your field of study which you intend to fill.
● It sets your project within context by discussing and critically evaluating past and 
current research in your area. Through this contextualisation you will identify how 
your project fits within and contributes to wider issues. This will depend on the level 
(undergraduate or postgraduate) of project you are undertaking.
● It provides other researchers with a starting point from which they can understand 
how your project evolved and to identify what literature is relevant to your project in 
order that they can continue where you left off.
5.1.1   Justification
The importance of a literature survey within academic projects cannot be over empha-
sised. For example, Figure 5.1 helps to illustrate a literature survey’s contribution within 
the context of a computing project by analogy to building a block of flats. Although 
Figure 5.1 The importance of the literature survey

	 Chapter 5 ● Literature searching and literature reviews 
92
people might come from far and wide to visit your luxury penthouse on the top floor 
(i.e., they are interested in reading your project report), this penthouse (report) will 
be unstable, of poor quality and limited in its academic worth if it doesn’t rest on firm 
foundations (the literature survey). Sometimes students start their projects at the ground 
floor, tackling what they feel is the main content of their project without justifying it or 
identifying its context within the wider issues. This can often prove disastrous because 
investigations are narrow, conclusions are weak, influences of other relevant issues are 
ignored and you may just be repeating the work of others.
5.1.2   Context
It is very important for any academic project to justify its content by identifying how 
it fits into a broader context. Figure 5.2 shows two potential student projects; one at 
taught degree level and one at research degree (PhD) level (contributing 
to world knowledge). This is an alternative viewpoint to that shown in 
Figure 2.1, which aimed to show your own understanding within world 
knowledge. Figure 5.2 represents a somewhat simplified interpretation 
of world thinking, knowledge, understanding, theories and philosophies (and a taught 
degree project probably represents a lot less than the 10% of all world thinking as indi-
cated in this diagram!). Advances to current understanding, through research discoveries 
and inventions, are shown as expansions to this domain by the dashed lines. Conversely, 
contractions in world understanding might also occur as historical skills are forgotten. 
However, although Duell (Commissioner of the US Office of Patents) stated in 1899 that 
‘Everything that can be invented has been invented’, on the whole, world knowledge 
continues to expand as new discoveries are made.
Figure 5.2 Projects within their wider context

	
5.1 Introduction
93
Figure 5.2 also recognises that the world is by no means at the limits of understand-
ing and there are (possibly) an infinite number of discoveries and inventions yet to be 
made. This can be summed up by the (in)famous quote of Donald Rumsfeld of the US 
Department of Defense in a news briefing in February 2002:
There are known knowns; there are things that we know that we know. We also know 
there are known unknowns; that is to say we know there are some things we do not 
know. But there are also unknown unknowns, the ones we don’t know we don’t know.
This highlights the fact that there are simply things out there that we have no idea 
about at the moment. We have no idea of how to get there as we cannot even compre-
hend their existence at the moment. This is highlighted by the isolated region towards 
the top right of Figure 5.2. This knowledge domain may seem ridiculous and fanciful at 
the moment, based on current philosophies and understandings, but it might, in future, 
become an area of accepted theory and knowledge. For example, 500 years ago people 
thought the earth was flat. The understanding that the earth was round and revolved 
around the sun appeared a ridiculous notion at that time and would have appeared as the 
disjoint region shown in Figure 5.2. World knowledge has now expanded to accept this 
understanding/belief within its boundaries. In addition, as world knowledge expands, 
not only do we find out things we did not know but we also find out how little we know 
about certain subjects and perhaps identify a whole new set of questions that need to be 
asked and answered.
Some interesting examples where world understanding has changed over time are 
highlighted by the following two quotes:
‘Computers of the future may weigh no more than 1.5 tons’
(Popular Mechanics magazine, 1949)
‘I think there is a world market for maybe five computers’
(Thomas Watson, IBMChairman, 1943)
5.1.3   Research degrees versus taught degree projects
If you are pursuing a PhD or an MPhil, your project should be at the boundaries of world 
understanding in your particular field of study (see Figure 5.2). Completing a PhD must 
enhance world knowledge. In other words, you would be expected to 
make a contribution to world knowledge and consequently expand its 
boundaries. An MPhil, on the other hand, would not necessarily make a 
major contribution to knowledge, but it would be involved with an inves-
tigation into potential developments to world knowledge and be concerned with work 
at the boundaries.
At taught degree level, however, this would not be expected. At this level you would 
be required to understand how your project fits into its wider context and have some 
appreciation of developments in that area. Examiners at taught degree level are inter-
ested in your own ideas, interpretations, theories and concepts of the particular field of 
study. They are not expecting a major contribution to knowledge from your project at 
this level.

	 Chapter 5 ● Literature searching and literature reviews 
94
Figure 5.3 focuses more on the context of an individual taught degree project. This 
figure shows how a project can draw on information from a number of different topic 
areas (in this case two). This project’s main focus is the overlap between these two sub-
jects, although it does concentrate a little more on field B than field A. The project does 
not ignore issues from these two fields on their own, but uses material from them to 
identify the broader context in which the project lies. An example would be a project 
that looked at the application of artificial intelligence methods to predict breast cancer 
rates in patients – thus drawing together the two fields of medical science and artificial 
intelligence.
Figure 5.4 shows a potential PhD project along similar lines. This time the project might 
draw on three currently unrelated fields and contributes to knowledge by filling the gap 
between these fields. In both these cases the projects have been identified within their wider 
contexts and the reader has an understanding of how the projects draw together and focus 
on particular subject areas.
5.1.4   A starting point
Your literature survey also enables other people interested in your work to see the 
grounds from which your project developed. A thorough literature survey will provide 
other researchers with a starting point for their studies and provide anyone wishing to 
develop your project work further with a comprehensive literature base.
Figure 5.4 A research degree that draws together three previously unrelated subject areas
Figure 5.3 A taught degree project in context within two subject areas

	
5.2 The literature survey process
95
• 5.2 The literature survey process
In Chapter 4, when project planning was discussed, the literature survey was split into 
two distinct, concurrent stages of search and review. For planning purposes it might well 
be acceptable to define the literature survey in this simplistic way to aid clarity. Although 
these two components represent the bulk of the work involved in performing a literature 
survey, there is more to a survey than just this. Figure 5.5 provides a far more accurate 
representation of this process. In this figure the angular axis represents time and the 
radial axis represents your subject focus.
The starting point for your literature survey is the definition of your literature search 
– starting in the top left-hand quadrant of Figure 5.5. This definition begins to iden-
tify the boundaries of your literature search; it identifies the topics in which you are 
interested and provides you with a starting point from which to focus on appropriate 
research material. This definition might be as simple as your subjective understanding of 
your project area and might lead you to popular texts in your field. You may, however, 
be more focused and limit your search definition to key authors, specific journals and/
or particular research articles. Alternatively, you might want to use a conceptual model 
such as a relevance tree, spider diagram or research territory map introduced in Chap-
ter 3, whereby the relationships between topics within your project are identified. These 
conceptual maps will help you to identify the starting point for your literature search.
Continuing around the spiral of Figure 5.5; having decided broadly (or specifically) 
what you are interested in searching for, you can then begin to perform your literature 
search (this stage and the following two stages are discussed in more detail in separate 
sections later). Your literature search will provide you with material that requires your 
critical evaluation. This critical evaluation will provide you with a firm understanding of 
Figure 5.5 The literature survey process

	 Chapter 5 ● Literature searching and literature reviews 
96
your chosen subject area and will form the basis of the next stage of the process – your 
literature review. Note that these stages are not independent – you will not visit your 
university’s library, gather all the references you need, return to your office, read and 
evaluate them and complete your literature review. You will perform some of these tasks 
in parallel. For example, you may be evaluating some articles while you wait for others 
ordered through inter-library loans. You might read part of an article or a book relat-
ing to a topic you are currently focusing on and tackle the rest of the article or book at a 
later date. You might use only part of a book to provide you with insight into one aspect 
of your project or you might use one article you have obtained to direct you quickly to 
other papers on a subject.
Having completed one cycle of the literature survey process you will find that you are 
really just beginning. You may have uncovered more questions and misunderstandings 
than you started with. You may feel other issues, which you had not considered, appear 
to be influencing your project and justify further investigation. You may feel that you 
have been too broad with your initial aims and decide to focus on one particular aspect 
that interests you. Alternatively, you may feel that you were too focused on a particular 
issue and need to broaden your search. Whatever the case, you will find that you are 
moving back into the cycle once again by refining and redefining your search for material. 
Once again, you may define your search explicitly or maintain a subjective understand-
ing of material in which you are interested. The cycle thus proceeds as you continue to 
search and evaluate the literature, focusing ever more closely on information relevant to 
your project.
The ‘spiralling in’ effect apparent in Figure 5.5 represents your increased focus on the 
particular topic of interest. This is not to say that your search draws in consistently over 
time as indicated in Figure 5.5. There are times when your search may broaden, but the 
focus on material relevant to your project will always improve. Thus, from a broad start-
ing point, which might include books, journals, documentation, news reports and so on, 
you will find yourself drawn more and more towards specific articles relating directly to 
your project. Your literature review is therefore seen to ‘evolve’ over a period of time as 
you become more confident with the subject material and your conceptual understand-
ing of the topic area increases.
This iterative process highlights the fact that the literature review is not something 
that you can write as a one-off having read everything you can get your hands on. It must 
develop over time. Although you will have to stop work on your literature survey at 
some point and move onto the main content of your project, you may well find that you 
are making changes to your literature review right up to the end. This will be inevitable 
as you should continue to gather and evaluate material throughout the lifetime of your 
project to keep your understanding of the field fresh and up-to-date.
Berndtsson et al. (2008: 59) discuss the idea of completeness with respect to a literature 
review. They highlight the point that it is difficult to know when to stop – how do you 
know when you have collected sufficient material? While it is probably impossible to read 
every single artefact that has been published in your area, Berndtsson et al. point out that 
‘by undertaking a systematic process, which can be conveyed to the reader, the validity 
of the resulting study will be enhanced’. They go on to state that the reader (examiner) 
should understand why certain material has been covered and why certain material has 
been omitted.

	
5.3 Literature searching
97
• 5.3 Literature searching
5.3.1   Introduction
A literature search is a ‘systematic gathering of published information relating to a subject’ 
(University of Derby, 1995). There are two important terms italicised within this statement 
that require further explanation. The first is systematic. A literature search should not be 
performed in an ad hoc manner, but should be approached in a structured and professional 
way. Reading everything you come across will eventually become boring and will certainly 
be a waste of time. It is important to focus your literature search on those articles, books 
and so on that are relevant. Of course, when you first begin your literature search you won’t 
know which material is relevant and which is extraneous. However, as you continue to cycle 
through the literature survey process, your focus will improve as your boundaries draw in 
towards your specific topic of interest. You should, therefore, identify your boundaries and 
know when to stop. Although this can be difficult at the start of your project, you should 
try to limit your search as much as possible. Knowing when to stop can also be hard as you 
will still have a lot of unanswered questions you may wish to solve before moving on to the 
main part of your project. However, remember that you will never actually stop literature 
searching as you might still be gathering/understanding material in parallel with the rest 
of your work to the conclusion of your project.
The second significant term within the definition is published. This implies that the 
material which you trace should be recognised. In other words, the material is not merely 
somebody’s opinion you happened across through a conversation in a corridor, or a block 
of un-refereed text downloaded from the Internet. Recognised works are those that have 
been suitably refereed before publication. In other words, they have been assessed for 
their academic worth by other ‘experts’ in the field and accepted as significant artefacts 
that contribute to that field. Using only material from sources on the Internet (such as 
Wikipedia) will undermine the legitimacy of your project. Although such sources can 
provide useful background information and overviews, you should try to extend your 
literature search to peer-reviewed sources.
Bearing these two points in mind, there are two golden rules you should remember 
when performing a literature search.
● Allow plenty of time – it can, and probably will, take a long time. Therefore, you 
should start as soon as possible, avoid procrastinating (see Chapter 7) and avoid 
­gathering material unrelated to your chosen topic.
● Ensure that you make note of the full reference of any material you obtain. This will 
save a significant amount of time at the end of your project because you won’t waste 
time trying to remember precise details of articles you have read but have since lost 
or returned to your local library. It is also important to avoid plagiarising the work of 
others (plagiarism is covered in Section 8.5). The full reference will also be needed if 
you wish to apply for inter-library loans.
It is also worth noting that you should not be overwhelmed by the enormity of lit-
erature you might find on your topic. You need to be selective and focus in on precisely 
those articles and books that are specifically relevant to your work. If, however, you 

	 Chapter 5 ● Literature searching and literature reviews 
98
find several books and numerous articles that cover your specific subject area in detail, 
then it might mean that your subject aim is still too broad and you should focus even 
more.
When you are assessing whether a book is worth reading, you should begin (obvi-
ously) with the title, move on to the contents listing and scan the index for keywords 
that are important to you. Is the author well recognised in her/his field, is the book 
up-to-date, is it the latest edition? When you are thinking of reading or obtaining an 
article, again, begin with the title and ask yourself if it is up-to-date or might it have been 
overtaken by other publications by now? Search for citations of the paper to see if other 
authors have used it or developed the ideas further. Read the abstract and keywords, 
look at the list of references at the back. (Are key works cited? Are there useful refer-
ences you can use?). Move on to reading the introduction and the summary/conclusions. 
Assess its level; is it highly technical, readable, is it a review paper, an introductory paper, 
a discussion paper? Only if you are satisfied that books and articles address all your needs 
should you read them from cover to cover. In many cases a select number of chapters in 
a book may be useful to you and only some sections of an article may be relevant.
Not only will your search require you to obtain literature on your chosen subject 
but it might also involve you searching for, identifying and obtaining suitable software 
for your project. For example, if your project is aiming to evaluate different software 
tools in different organisational environments you will need to ensure you have traced 
suitable, up-to-date tools for this evaluation. Although software you obtain will not 
be used to justify and contextualise your project in a literature review, it may well be 
crucial for you to complete your project successfully. It is important, therefore, that 
you begin to search for and obtain this software as soon as possible and you may well 
find yourself pursuing this at the same time as your literature survey.
Before you begin searching for material, make sure you are well prepared. Have an 
understanding of the subject areas, subtopics and their relationships that your work cov-
ers. Research territory maps and relevance trees (see Section 3.2.1) will help you with 
this and also help you structure, classify and categorise any material you find. For these 
topics think of keywords you should be looking for, combinations of words and possible 
alternative spellings (American-English, for example). In search engines and databases 
understand how to undertake Boolean searches (using AND, OR and NOT) and how 
wildcards might be used.
The points made above and the rules which you should follow provide you with a 
broad, subjective understanding of the nature of a literature search. In addition to these 
points you will need to understand the mechanics of the search. There are two aspects 
to this: understanding the format in which the information can be found and tracing this 
information. These are now discussed in turn.
5.3.2   Format of information
Literature is presented in a number of different formats. Some forms are more accessible 
than others and some are recognised as being more ‘academically’ valuable and worthy 
(see the points made on recognised works earlier). The following list is a summary of the 
forms of material you might come across during your literature search. The list is by no 
means exhaustive and for more details on these and other sources you should refer to 
texts such as Blaxter et al. (2010), Dochartaigh (2012) and Saunders et al. (2012).

	
5.3 Literature searching
99
Books	
Books will probably prove to be the starting point for your literature sur-
vey. They will provide you with a good grounding and a good overview 
of your chosen topic area. However, remember that they may be out-
dated and out of line with current thinking in your field. Books are also 
written for different audiences; some being more technical than others. 
You should ensure that any books you acquire provide sufficient detail 
for your needs. Generally speaking books are refereed and do provide a 
suitable basis for a literature survey.
Journals	
Journals contain (normally refereed) articles discussing up-to-date 
issues in their field. You may find it daunting at first to read journal 
articles as they (should) represent the current limits and developments 
in your subject area. You may, therefore, find it easier to build a solid 
understanding in your chosen subject using books before attempting to 
investigate the latest developments and theories from journal articles.
Journal articles will also tend to be quite specific – focusing on devel-
opments in detailed areas of a particular topic. You may find that only 
part of an article is suited to your needs.
As you continue your literature survey you should find yourself using 
journal articles more and more as your understanding of your subject 
becomes deeper. Indeed, when you complete your literature review you 
should find that the majority of references you make are to journal arti-
cles which represent the latest thinking in your field.
Conference	
Conference proceedings contain articles and papers that have been presented 
proceedings	
at national and international conferences. The quality of articles in con-
ference proceedings varies widely – some conferences are not refereed, 
whereas others bring together the latest findings from internationally 
renowned experts in particular fields. Sometimes conference proceed-
ings may contain more up-to-date ideas than you can find in journal 
articles and sometimes they present preliminary results from research 
that has yet to mature.
CDs and	
CDs and DVDs generally present information from other sources in a more 
DVDs	
easily accessible format. For example, DVDs contain varying types of 
information from book-type material and conference proceedings to 
journal articles.
Company	
Company reports and documentation can provide valuable information for 
reports	
case studies. However, care must be taken with these kinds of material 
as they might be subjectively biased in favour of the company and may 
contain information that you cannot use as the company does not wish 
it to be made public.
Theses	
Theses are the published reports/dissertations of PhDs and MPhils. They 
represent the work of a research degree and provide a contribution in 
their particular field. Not only will they provide you with ideas on current 
thinking in a particular area but they will also provide a useful source of 
relevant references and, if you are a research degree student, an idea of the 
scope and requirements of a research degree. Having said that, theses are 
sometimes difficult to obtain – probably being lodged only at the awarding 

	 Chapter 5 ● Literature searching and literature reviews 
100
institution – although they can be obtained through inter-library loans or 
sometimes downloaded from the Internet (see http://www.theses.com).
Manuals	
Within technical computing projects, manuals may prove to be a valu-
able source of information. It might, for example, be impossible for you 
to perform your project without having access to the relevant technical 
manual. However, remember that they are just manuals; they are not 
refereed academic articles providing insight into current thinking in 
your field. You should treat manuals just as they are and not use them 
as foundations for academic discussion within your report.
Software	
Any software that you require for your project, such as software tools, 
libraries and reusable components, should be obtained as soon as pos-
sible. You would not want to be halfway through your project and find 
that the software you needed was no longer available or too expensive. 
You may have identified some relevant software when you completed 
your project proposal (see Resource requirements in Section 3.3.3), 
but it is important that you obtain this as soon as you can. Sources you 
can use to trace relevant software include the Internet (using keyword 
searches and company websites), local companies (who may well be 
using suitable software tools) and professional organisations. Profes-
sional organisations (such as the IEEE, the Project Management Insti-
tute and so on) often have special interest groups in particular areas and 
they can be contacted for help and information. This might include soft-
ware reviews on tools used in their particular field of study and databases 
of companies supplying relevant software.
The Internet	
The Internet is a valuable source of information, but it must be treated 
with caution. You can spend hours surfing the Internet wasting time, 
without finding anything of value. In addition, material that you do 
trace might well be unqualified, un-refereed opinion that has no rec-
ognised grounding within your particular field of study. Data are also 
‘unstable’ being updated and modified regularly. While this can be a 
good thing in that material is always up-to-date, it can mean that the 
information disappears quickly as well. Having said that, the Internet is 
a useful search tool for accessing academically sound material, company 
information and software. You can often find articles published else-
where that are difficult to obtain through normal sources – for example, 
through digital library resources. Make sure if you do use any material 
from the Internet that you note the full web address of the material for 
referencing purposes and the date it was accessed.
Some points that you should consider when evaluating the quality of 
material on the Internet include those listed below (some of these points 
are adapted from Ohio State University Library, 2008).
● What is the purpose of the site – is it to provide information or to sell 
a product?
● When was the site updated? How up-to-date is the material on the 
site? Is it still relevant?
● Is the site part of (or related to) an official organisation (a profes-
sional body, government department, or academic institute or 

	
5.3 Literature searching
101
research group)? For example, the IEEE, the Project Management 
Institute, British Computer Society, etc.?
● Are there any copyright issues associated with the material? Will you 
be able to use the material without breaching copyright?
● Is there an author for the material? Is the author qualified to provide 
the information? Are they presenting opinions rather than facts? Are 
they biased?
● Is the site recognised from other sources? Is it a recognised body? Are 
there other links to the site and is it reviewed anywhere?
● Is the material biased? “Does the author have a ‘vested interest’ in the 
topic” or an axe to grind?
For more detail on how to use the Internet wisely for research purposes you should 
refer to Dochartaigh (2012) and Munger and Campbell (2012) which are entire books 
devoted to this topic. In addition, have a look at http://www.vtstutorials.co.uk/, which 
is a site on Virtual Training Skills. It provides some really useful information on Internet 
research skills and also includes some online tutorials aimed specifically at Computer 
Science and Informatics.
In addition to the above media you may also find material in older forms such as 
video/DVD and microfiche. Treat these sources with the respect they deserve. For 
example, a refereed journal presented on microfiche is as valuable as a refereed journal 
on paper. An introductory DVD on your subject area may provide you with as good a 
grounding in your topic as an introductory textbook.
Other sources of information that should be treated with more caution include letters 
and memos, newspaper articles, computing magazines, company sales literature and 
television programmes. Newspapers, television programmes and computing magazines 
may provide popular material but their depth may be somewhat limited. However, com-
puting magazines often discuss up-to-date technical issues and provide topical quotes 
from key orators for use in your report. Letters, memos and company sales literature will 
provide limited material and they are likely to be quite biased.
5.3.3   Tracing the information
You now know the format that literature is presented in, but how do you actually trace 
these sources of information? The best place to start any literature search is in your own 
institution’s library. You should also make good use of the librarians who know the most 
efficient ways to trace particular sources of information within your institution. Detailed 
below are some examples of material you can use to trace literature on your subject. The 
list is by no means exhaustive and you should consult your own library staff for other 
search material they might have.
When you have traced particular references you want to read (journal articles, con-
ference papers, etc.), they are quite often available online. Although some articles have 
to be paid for, if you access the journal via the Internet from your own institution you 
might find you can download the article for free as your university may have a (online) 
subscription to the journal.
Internet 	
Although you should be careful when using the Internet to access litera-
ture for your project, the Internet is a valuable tool for tracing articles 
and information and these days provides access to an almost limitless 
supply of information on any topic you might be working on.

	 Chapter 5 ● Literature searching and literature reviews 
102
Wikipedia (http://www.wikipedia.org/) is a useful starting point 
for tracing general information about a subject and identifying refer-
ences. However, Wikipedia, like most sites on the Internet, is not aca-
demically refereed and you should use any information you obtain there 
with caution. Having said this, for a general overview of a subject, or as 
an introduction to a new area, it is a valuable tool.
The following links provide some useful resources and sources of infor-
mation on the Internet for those undertaking research in computer science 
and information science. These sources were compiled in June 2014 so be 
aware that new sites may now be available and some may have moved or 
closed down.
Web of Science (http://wok.mimas.ac.uk/). A database for UK educa-
tion that covers engineering and science publications (both journals and 
conferences). It provides a full search facility and ability to download 
abstracts but you (or your institution) must subscribe to this service.
ACM Association of Computing Machinery (http://www.acm.org). 
Contains a digital library of all material published by the ACM and a guide 
to computing literature. Their digital library, which contains the ‘full text of 
every article ever published by ACM and bibliographic citations from major 
publishers in computing’, can be accessed at http://dl.acm.org/dl.cfm.
The Collection of Computer Science Bibliographies (http://liinwww 
.ira.uka.de/bibliography/). According to the site this ‘is a collection of 
bibliographies of scientific literature in computer science from various 
sources, covering most aspects of computer science. The bibliographies 
are updated weekly from their original locations such that you’ll always 
find the most recent versions here. The collection currently contains 
more than 2 million references (mostly to journal articles, conference 
papers and technical reports)’.
IEEE Computer Society (http://www.computer.org). The IEEE’s online 
bibliographic database where you can search for journal articles and confer-
ence proceedings. Note that you will have to pay for most of the articles 
you want to download from this site. Their digital library can be accessed 
at http://ieeexplore.ieee.org.
Lecture Notes in Computer Science (http://www.springer.de/comp/ 
lncs). Springer’s online database containing literature from this series 
of publications.
DBLP bibliography (http://dblp.uni-trier.de). According to the site 
‘The DBLP server provides bibliographic information on major com-
puter science journals and proceedings’. It was originally focused on 
database systems and logic programming (hence the acronym) but it 
has since expanded to other areas of computer science.
HCI Bibliography (http://www.hcibib.org). Dedicated to Human 
Computer Interaction research. The site is maintained in Canada.
ScienceDirect (http://www.sciencedirect.com/). According to their 
website they provide ‘a leading full-text scientific database offering 

	
5.3 Literature searching
103
journal articles and book chapters from more than 2,500 journals and 
almost 20,000 books’. It is produced by Elsevier.
IngentaConnect (http://www.ingentaconnect.com/). ‘IngentaCon-
nect offers one of the most comprehensive collections of academic and 
professional research articles online – some 4.5 million articles from 
13,500 publications’.
Neuron AI directory (http://www.neuron.co.uk/). Provides links to 
academic and commercial publications and those primarily within the 
field of artificial intelligence (expert systems, neural networks, fuzzy 
logic, etc.).
Free on-line dictionary of computing (http://foldoc.org/). Based at 
Imperial College London, it does what it says.
Google Scholar (http://scholar.google.co.uk/). Provides an exten-
sive search engine for scholarly literature from a wide range of sources 
including journal papers, books, theses, abstracts, etc. It provides 
scholar measures for articles (for example, citation counts) so you can 
gauge their influence and merit. It also provides links to authors, cita-
tions and references.
IBM Systems Journal (http://www.research.ibm.com/journal/sj/). 
Provides access to papers published within this journal.
OPAC	
Most institutions have an OPAC (Online Public Access Circulation) 
which you can use to perform searches for material held in your library. 
OPAC provides an efficient way of performing searches (be it on author’s 
name, title, keywords and so on). Your library will invariably have one 
of these systems and you should learn how to use it.
You can also access OPACs at other institutions via the Internet. For 
example, over 80 UK institutions OPACs can be accessed via: http://
copac.ac.uk/copac/ which is a merged online catalogue.
British	
This provides a list of all British books published and deposited at the British
National	
Library each year. It is available in printed format, as a CD-ROM, and also 
Bibliography	
via the internet at http://bnb.bl.uk/.
Global Books	
Contains information on all books recently published in America, UK, 
in Print	
Canada, Continental Europe, Africa, Australia, Asia, etc. Available at 
http://www.booksinprint.com.
THESES	
An index of PhD theses completed in the UK since 1716. It provides 
abstracts and provides a useful search facility. It is available online at 
http://www.theses.com/.
5.3.4   Inter-library loans
Although the search material detailed above can provide you with a comprehensive list of 
material that will support your project, there is no guarantee that you can download the 
material you need from the Internet or your local library will stock the items you require. 

	 Chapter 5 ● Literature searching and literature reviews 
104
This is when you need to make use of the inter-library loans system. Your institution will 
be able to obtain material for you from other institutions using this system. However, 
the system has three potential drawbacks.
● It is expensive and often taught degree students will have to pay for this service.
● It can take time before you receive an article you have ordered – possibly too long in 
some cases.
● You can be severely limited on the duration which you can keep the material for (for 
example, one or two weeks when you may want a book for two or three months).
Having said this, the system is well worth using if you require pertinent articles and 
books for your project that are not available locally.
5.3.5   Some tips for performing a literature search
We finish this section with a few tips on undertaking a literature search.
● Note interesting quotes and their full reference as you go along. This will be invalu-
able later when you write your report and try to trace your references.
● Use review articles and books to help your search.
● Reference correctly from the start (covered in Chapter 8).
● Know when to stop – or at least when to move on to the next stage of your project. 
You will know this from your project plan and the research boundaries which you 
have set yourself.
● Have a system to organise and catalogue the material you read. The following section 
provides a discussion on how to manage your information effectively.
● Read recognised leaders and original theorists in you field.
● Start with a broad search before you focus – don’t jump straight into the most compli-
cated recent article on your subject – you may be put off by its apparent complexity.
• 5.4 Managing information
5.4.1   Introduction
Collecting a large number of articles and books relating to your subject is all very well 
but, depending on the size of your project and the breadth and depth of your literature 
search, you may soon find yourself swamped under paperwork and books. Some peo-
ple manage to work well under these conditions, able to put their hands on a particular 
piece of paper under a pile of ‘debris’ on their desk. For the rest of us it makes sense to 
have some means of managing and controlling the literature and information gathered 
to avoid losing sight of important articles or losing references that are needed later. This 
section introduces some tips and ideas to help you manage the articles, books and refer-
ences you obtain from your literature search. For a more detailed discussion on manag-
ing research material you can read Orna and Stevens (2009) which is a book devoted to 
‘Managing information for research’.

	
5.4 Managing information
105
The best way to begin managing your research is by using the conceptual model you have 
created of your subject area (using your RTM, relevance tree or spider diagram). Use this 
model to identify the topics in which you are interested and how these topics link together. 
You can use this model to arrange articles and books that you obtain into some sort of 
order. Some articles may cover broad issues while others may draw together two or three 
important topics. Arrange photocopied articles and your own notes into plastic wallets or 
folders suitably labelled. In this way you will quickly and easily be able to draw together 
relevant information as you tackle different parts of your project.
Also, try to record references in the correct format from the start – this will enable 
you to use them directly when you complete your project later on. It is also a good idea 
to note the primary reference of each article you obtain – i.e. how did you discover that 
article in the first place – was it referred to by another article you read or did you just 
come across it by chance as you searched the Internet or the library shelves?
When you are reading articles highlight key phrases, sentences and paragraphs by 
underlining or using a highlighter pen. You may set up a system whereby you use a green 
pen to highlight useful quotes, orange to highlight explanations to key topics, pink to 
highlight new ideas or contributions, and blue to highlight contradictions or arguments 
with your way of thinking. In books you can use Post-it® type notes to quickly identify 
important pages and also enable you to make brief notes on the book at key points.
Another useful idea is to make brief notes on the front page of articles and within 
the papers themselves. This might provide an explanation to yourself of what the 
author is trying to say or to note another reference you feel is related to this particular 
point (be it supporting or contradicting the argument). You might like to provide 
your own brief summary of the paper at the start as well. This will save you having 
to reread the entire paper six months later when you have forgotten what it was all 
about and you are trying to incorporate it into your report.
These ideas will not provide you with a comprehensive information management 
system. This is something only you can develop based on your own way of working and 
your own feelings and ideas. However, the approaches discussed above will provide you 
with a useful basis as they cover the key skills used by researchers to manage information.
5.4.2   Reference management tools
There are a number of tools available to help you manage your references as you conduct 
your project and when you come to your final write-up. Word processing packages these 
days usually come with reference management software built in. For example, Microsoft 
Word (versions from 2007 onwards) includes in-built reference manager functionality. 
With this you can manage the sources of your references, select from a number of ref-
erencing styles (for example, Harvard, Chicago, etc.), build up your own bibliography 
and insert references into your text. Outside of word processing packages there are a 
number of online resources and applications that you can use to automatically manage 
your references for you. Six examples are:
BibMe	
A freely available online tool that allows you to search for 
(www.bibme.org)	
articles and create a downloadable bibliography in the 
referencing style of your choice. You can search for 
books, journal articles and websites as well as other 
media.

	 Chapter 5 ● Literature searching and literature reviews 
106
EndNote	
Produced by Thomson Reuters, EndNote is multi-platform
(http://www.endnote.com)	
running on Windows, Mac and iPad. It allows you to 
search online databases, store references and articles 
in your preferred format, create bibliographies and 
share your references with colleagues. At the time of 
writing, a student version of this software is available 
for US$ 114.
JabRef	
An open source reference manager that runs under the Java 
(jabref.sourceforge.net)	
VM. It works with BibTex files which is the standard 
LaTeX bibliographical file format. It allows you to 
search and classify references and import them from 
numerous sources.
Mendeley	
A free-to-use reference manager and social network that 
(www.mendeley.com)	
enables you to manage and share all your papers and 
research. It allows you to access your papers from mul-
tiple devices and will automatically extract informa-
tion from papers on author, title, keyword, etc. It has 
a plugin for Microsoft Word which allows you to cre-
ate reference lists and citations. You can annotate and 
highlight text within papers you have downloaded and 
you can search their database for related articles. It also 
allows you to share papers with others. Mendeley also 
recommends articles to you based on your own prefer-
ences and criteria.
Reference Manager 	
Running under Windows, Reference Manager contains all 
(http://www.refman.com/)	
the functionality you will need from a reference manage-
ment system. You can use it to search for references, 
manage those references and build a bibliography, and 
publish your list of references online or in your own 
documents. It costs (at the time of writing) around US$ 
250 for a downloadable version of the system.
RefWorks	
An online tool that enables users to format their own
(www.refworks.com)	
bibliographies and create and manage their own database 
of references. At the time of writing an annual subscrip-
tion to RefWorks is US$ 100.
• 5.5 Critical evaluation
You have gathered some articles and books together, have read them to some extent and 
have an idea of what each one is about and what the author is trying to say. How do you 
critically evaluate them?
Normally when people hear or read the word ‘criticise’ they think of it in a negative 
sense; i.e., finding fault with the object in question. However, to critically evaluate an 
article means far more than looking for faults – this is certainly not the aim of critical 
evaluation.

	
5.5 Critical evaluation
107
When you read an article or a book you should consider the following points. This is 
not to say that you should apply these points as a ‘tick list’, but you should be thinking 
about these ideas implicitly as you read the article.
● What kind of article is it – a review paper, an evaluatory paper, a theory paper, a practi-
cal paper, a case study, etc.?
● What can you gain from the article – ideas, techniques, useful quotes, etc.?
● Is the author well recognised in his/her field? Are they an authority in this area?
● What contribution is being made by the article? What kind of contribution is it? Can 
it make a contribution to your own project? If so, how?
● How does the article fit within its context? How does the article fit into and support 
the context of your project? How important is the article in its field and your own? 
Does the paper classify and summarise its field in a clearer or more logical way than 
has been done before? How does it fit into your conceptual understanding of the field?
● Do conclusions follow logically from the work that has been presented? Are the argu-
ments logical? Do they follow one another? Are they supported or contradicted by the 
work of others? Are alternative conclusions consistent with the discussion?
● Can you differentiate fact from unsubstantiated opinion? If there are opinions in the 
article do you agree with them? Are these opinions supported by logical arguments 
or other authors?
● What do you feel about what has been written? Do you agree with statements that are 
made? Are there any counter-arguments?
● Does the article contradict other viewpoints or support the status quo? How does the 
article relate to other literature in the field?
● What references does it use? Are these appropriate, relevant and up-to-date? Which 
references can you use? Is the article referred to by other authors?
● Are there limits to what the author is suggesting? Is his/her argument only applicable 
in certain cases?
● Can you use the results from the article in your own work? How do these results con-
tribute and fit into their field and your own?
Rudestam and Newton (2007: 67–68) suggest some additional points which should be 
considered when reading and critically evaluating articles. They break their points down 
into five key areas: Conceptualisation, Theoretical Framework and Hypotheses, Research 
Design, Results and Discussion and Summary. Those which supplement the points made 
above and are applicable for computing projects can be summarised as:
● What is the major problem or issue being investigated?
● How clearly are the major concepts defined/explained?
● Is there a clear research question/hypothesis that can be, and is, tested?
● What type of research design/methodology is employed? Is it suitable and reliable?
● Have algorithms and statistical techniques been used appropriately? Can you apply 
them in your own work? What are the limitations of these techniques?

	 Chapter 5 ● Literature searching and literature reviews 
108
● Is the choice of measures, sample sizes and data appropriate? Have extraneous fac-
tors/variables been considered?
● Can generalisations be made from these results? What are the limitations of these 
generalisations?
● Are the implications of the results discussed?
● What is your overall assessment of the study – in terms of its adequacy for explaining 
the research problem and the contribution it is making?
Taking all of these points into consideration you will see that critical awareness of your 
chosen subject means a lot more than just understanding it and being able to regurgitate 
parts of it. Reading and understanding what you have read is really only the first part 
of the process. You should be aware of its boundaries, its limitations, contradictions, 
developing areas and dead ends. The main point of critical evaluation is that you think 
about what you are reading. This critical reading is defined by Blaxter et al. (2010: 118) 
using a number of points, some of which are listed below. They define a critical reading 
as one that:
● ‘goes beyond mere description by offering opinions, and making a personal response, 
to what has been written’;
● ‘relates different writings to each other’;
● ‘does not take what is written at face value’;
● ‘views research writing as a contested terrain, within which alternative views and 
positions may be taken up’.
Using these pointers as you read and interpret the material that you obtain will ensure 
that you develop a deeper (not superficial) understanding of your subject area. You will 
be developing the depth of knowledge that will be expected on your degree course.
• 5.6 Writing literature reviews
You are now critically aware of your subject area and the literature in your chosen field. 
How do you present your understanding of your field and set the foundation for your 
project using the literature you have obtained as a literature review?
As a starting point for discussion, Gall et al. (2006 cited by Saunders et al., 2012: 74) 
identify the purpose of a literature review as, among other things:
● to refine your research question and objectives;
● to highlight research possibilities that have either been explicitly identified by other 
authors or have possibly been overlooked in the past;
● to avoid repeating the work of others;
● to identify research methods and strategies that may be usefully applied in your own 
research.
Building on these points a literature review should provide ‘a coherent argument that 
leads to the description of a proposed study’ (Rudestam and Newton, 2007: 63). This is 
achieved with reference to past and current literature in your field(s) and will involve a 

	
5.6 Writing literature reviews
109
Figure 5.6 A research field made up of a number of articles, books, documents, etc.
Paper C
Book A
Paper A
Paper B
Book B
Document A
Paper D
Mind A
Figure 5.7 How the research field shown in Figure 5.6 might be 
structured and presented in a literature review
Subtopic A
Subtopic B
Subtopic C
Subtopic D
discussion of current omissions and any biases you might have identified (Saunders et 
al., loc. cit.). You will have great difficulty achieving these aims if you merely read and 
digest a number of articles and books related to your project. It is through your critical 
evaluation (discussed in the previous section) and critical understanding of the relevant 
literature that your literature review will develop.
Figures 5.6 and 5.7 help to illustrate how a literature review should be presented. 
Figure 5.6 shows a particular research field that a student wishes to discuss as part of 
their literature review. The world’s understanding of this field is covered by numerous 
books, articles, papers, documents, knowledge in people’s minds, etc. The ‘furniture 
sales catalogue’ approach (Haywood and Wragg, 1982) would explain this field in a 

	 Chapter 5 ● Literature searching and literature reviews 
110
literature review by discussing each article (source of information) in turn as a separate 
paragraph or section – for example:
Book A: Covers . . . 
Book B: Discusses . . . 
Paper A: Introduces. . . .
Person A: Thinks. . . .
and so on.
A better way of presenting this material is to view the field as a series of inter-related 
subtopics (your own interpretation and understanding of that field and how it is made 
up). Figure 5.7, as an example, shows how the field in Figure 5.6 might be interpreted. 
The field can now be discussed in a literature review from this alternative perspective 
using references where appropriate to support the arguments made and explain the top-
ics covered. Your literature review can thus be structured into a number of sections. The 
first section would explain the overall structure of the field(s) and the subsequent sections 
would discuss each of these fields in turn. A conclusion section would summarise the 
structure and explain how the different topics link together in your particular project.
You will not be able to write a literature review without reference to other material 
in the field. References should, therefore, be used to support your arguments where 
appropriate. They should not be used to pad out your report and ‘prove’ that you have 
read (or, at least, have obtained) a number of key texts.
There are no specific, infallible rules you can apply to write the perfect literature 
review. It is something that improves with practice and something that you can get a 
feel for by reading examples within the varied literature you will come across. However, 
at a ‘mechanistic’ level within project reports, Saunders et al. (2012: 78) identify three 
common ways for presenting literature reviews:
● as a single chapter;
● as a series of chapters;
● subsumed within the report as various issues are tackled.
For a taught degree project it is unlikely (unless your entire project 
is a literature review) that you will dedicate a series of chapters to your 
literature review. Not only will you not have enough time to do this, but 
you will not be expected to gather sufficient material to fill several chap-
ters. It is more common that your report will contain an introductory chapter dedicated 
to a literature review or that you will subsume your review within each chapter of your 
report where you discuss different elements of your project. Quite clearly the approach 
you adopt is up to you and is something about which your supervisor should advise you.
When writing your literature review, remember what it is not:
● It is not a report that lists all the papers and books you have read whether they are 
relevant or not. You must be selective about that to which you refer.
● It must not dedicate a page or paragraph to each article in turn merely reporting on 
their content. Haywood and Wragg (1982: 2) refer to this as ‘the furniture sales cata-
logue, in which everything merits a one-paragraph entry no matter how skilfully it 
has been conducted’ (see Figure 5.6).

	
5.6 Writing literature reviews
111
Example – An artificial neural network approach  
to rainfall-runoff modelling
The United Nations General Assembly declared the 1990s the International Decade for 
Natural Disaster Reduction with the specific intent to disseminate existing and new infor-
mation related to measures for the assessment, prediction, prevention and mitigation of 
natural disasters (WMO, 1992). A prominent element within this programme has been 
the development of operational flood forecasting systems. These systems have evolved 
through advances in mathematical modelling (Wood and O’Connell, 1985; O’Connell, 
1991; Lamberti and Pilati, 1996), the installation of telemetry and field monitoring equip-
ment at critical sites in drainage networks (Alexander, 1991), through satellite and radar 
sensing of extreme rainfalls (Collier, 1991), and through the coupling of precipitation 
and runoff models (Georgakakos and Foufoula-Georgiou, 1991; Franchini et al., 1996). 
However, in practice, successful real-time flood forecasting often depends on the effi-
cient integration of all these separate activities (Douglas and Dobson, 1987). Under the 
auspices of the World Meteorological Organisation (1992) a series of projects were imple-
mented to compare the characteristics and performance of various operational models 
and their updating procedures. A major conclusion of the most recent intercomparison 
exercise was the need for robust simulation models in order to achieve consistently better 
results for longer lead times even when accompanied by an efficient updating procedure.
The attractiveness of artificial neural networks (ANNs) to flood forecasting is threefold. 
First, ANNs can represent any arbitrary non-linear function given sufficient complexity of 
the trained network. Second, ANNs can find relationships between different input samples 
and, if necessary, can group samples in analogous fashion to cluster analysis. Finally, and 
perhaps most importantly, ANNs are able to generalise a relationship from small subsets 
of data while remaining relatively robust in the presence of noisy or missing inputs, and 
can adapt or learn in response to changing environments. However, despite these potential 
advantages, ANNs have found rather limited application in hydrology and related disci-
plines. For example, French et al. (1992) used a neural network to forecast rainfall intensity 
fields in space and time, while Raman and Sunilkumar (1995) used an ANN to synthesise 
reservoir inflow series for two sites in the Bharathapuzha basin, S.India.
The use of artificial neural networks for flood forecasting is an area which has yet to be 
fully explored. Up until now the majority of work in this area has been mainly theoretical; 
concentrating on neural network performance with artificially generated rainfall-runoff 
data; for example Minns and Hall (1996). However, these theoretical approaches tend to 
overlook the difficulty in converting and applying actual data to artificial neural network 
topologies. Hall and Minns (1993) go some way to address this criticism by applying neu-
ral networks to a small urban catchment area. However, their discussion is limited to the 
performance of a neural network on a small number of events.
Perhaps the best way to explain the presentation of a literature review is through a 
small example. The following example represents a short introduction to an academic 
paper. Quite clearly academic papers of only two or three thousand words are much 
shorter than an entire project report. However, the example shows how the scene is set for 
the rest of the paper and its context is justified with respect to other literature in the field.

	 Chapter 5 ● Literature searching and literature reviews 
112
Notice how this introduction/literature review begins by justifying the content of the 
paper with reference to a WMO report. It continues by showing how the subject area has 
evolved over the years. Literature reviews often employ this kind of approach – focusing 
in on the topic of concern through a chronological discussion of literature in the field. 
This approach generally leads to a natural focus on the topic of concern. The review 
then moves on to explain a little bit more about the area of study, setting the scene for 
the reader, before focusing more precisely and discussing some recent developments in 
research within the field. The literature review concludes by highlighting current limi-
tations in the field, once again justifying the relevance and importance of the paper by 
showing how it aims to fill these gaps.
In summary, your literature review forms the foundation of your project. Remember, 
literature reviews evolve over a period of time (they cannot be written as one-offs, after 
you have read a few articles on your chosen subject) and should implicitly cover the fol-
lowing four points:
	 1.	 arrange relevant literature in the field;
	 2.	 critically evaluate past and current research in the field;
	 3.	 identify your project within a wider context;
	 4.	 justify the existence of your project by identifying a gap in the field and showing 
how your project will fill that gap (particularly important at research degree level).
• 5.7 Summary
● A literature survey will help to place your project within a wider context and justify 
its presence within a particular field (or fields) of study.
● Your literature survey consists of two main components: the literature search (sup-
ported by an ability to manage the information you gather) and the literature review 
(which requires a critical understanding of material that you obtain). These compo-
nents are performed repetitively over a period of time and (probably) in parallel with 
one another.
This paper goes one stage further by discussing how artificial neural networks may be 
developed and used on ‘real’ hydrological data. It discusses the problems that need to be 
addressed when applying neural networks to rainfall-runoff modelling and demonstrates 
the effectiveness of artificial neural networks in this particular domain. By applying a neural 
network to flood simulation in two UK catchments, the prospects for the use of ANNs in 
real-time flood forecasting are evaluated. Finally, suggestions are made concerning neces-
sary refinements to the existing ANN prior to transfer to operational use.
Source: Adapted from ‘An artificial neural network approach to rainfall-runoff modelling’, Hydrological Sciences 
­Journal, 43(1), pp. 47–66 (Dawson, C.W. and Wilby, R. 1998), reprinted by permission of the publisher (Taylor & 
Francis Ltd, http://www.tandfonline.com).
Example (continued)

	
5.9 Action points
113
● Although you will eventually need to move on to the main investigation/development 
part of your project, your literature survey will continue to be performed throughout 
the lifetime of your project to some extent, as you refine and consolidate the informa-
tion you gather ensuring that your project remains up-to-date.
• 5.8 Further reading
Blaxter, L. Hughes, C. and Tight, M. (2010) How to research (4th Edition), Open Uni-
versity Press, Maidenhead, UK.
Dochartaigh, N.O. (2012) Internet research skills: How to do your literature search and 
find research information online (3rd Edition), SAGE Publications, London.
Munger, D. and Campbell, S. (2012) What every student should know about researching 
online (2nd Edition), Longman, Harlow, UK.
Orna, E. and Stevens, G. (2009) Managing information for research, Open University 
Press, Buckingham, UK.
Rudestam, K.E. and Newton, R.R. (2007) Surviving your dissertation (3rd Edition), 
SAGE Publications, London.
Saunders, M. Lewis, P. and Thornhill, A. (2012) Research methods for business students (6th 
Edition), Pearson Education, Harlow, UK.
• 5.9 Action points
● Consider how you will undertake your own literature review. Try to identify the 
boundaries for your search.
● Put in place an information management system that will enable you to manage the 
literature you obtain effectively.
● Speak to your supervisor and library staff about sources of information for your pro-
ject. Search the Internet for relevant material.


Conducting your project
SECTION
3


	
	
	
117
CHAPTER
6
Aims:
To introduce different approaches for developing software systems, testing those 
systems and ensuring software quality.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand what is meant by a software development process and describe a 
number of different development processes.
● Choose an appropriate process for your own project.
● Evaluate your chosen process.
● Understand the differences between bottom-up and top-down development.
● Understand the differences between verification, validation and testing and 
apply these techniques to your own project.
● Discuss what is meant by software quality and be aware of different quality 
standards.
● Relevant primarily to taught degree projects – specifically those 
that involve software development.
● Background for research degree projects – providing they 
require the development of a software system.
Software development

	 Chapter 6 ● Software development 
118
• 6.1 Introduction
6.1.1   Overview
As this book is aimed at Computer Science/Information Systems/Software Engineering 
students, it is possible that your project will involve the development of a software system 
of some kind. At one extreme, your course may require you to undertake a 
software development as the fundamental component of the project; at the 
other extreme you may just decide to develop a small program to evaluate 
some ideas in a more research-oriented project. For example, for an MPhil 
or PhD you may need to develop a program as a ‘vehicle’ for testing out a 
new theory, but the program itself will not be examined – so it will not have to be perfect 
or fully documented. Whatever the case, the sections within this chapter will be useful. 
They will provide you with a grounding in the approaches you can use to develop software 
systems, and means of evaluating those systems when they are complete. If your project 
does not involve the development of any software, you can skip this chapter.
Note that the two terms process model and life cycle model are used interchangeably 
in this text. While some might view processes from the perspective of improvement, 
life cycle is sometimes used to refer to a more generic overview of a software system’s 
development. This distinction is not made here and the terms are used interchangeably 
to assist presentation.
One area that this chapter does not cover in detail is the use of development methods 
(of which there are tens, if not hundreds, in existence). Development methods are used 
in different stages of software development and provide a set of rules and techniques 
for undertaking different tasks in the software development process. Examples include 
SSADM (Structured Systems Analysis and Design Method – used in analysis and design), 
UML (Unified Modelling Language; a modelling notation for object-oriented design), 
DFDs (Data Flow Diagrams) and Soft Systems (used to elicit requirements in complex 
environments). Methods can be used within the overall development process model 
you are using and it is these process models that are discussed in detail in this chapter.
If you are using a particular method as part of your project you may not need to follow 
the method in depth and undertake all of its prescribed stages. Methods are normally 
tailored for the development of large software systems and, therefore, many parts of the 
method may be inappropriate or excessive for your own work. Your supervisor should 
be able to advise you on the use of appropriate methods for your own project.
6.1.2   The past
When software systems were first developed in the mid twentieth century they were done 
so in a rather ad hoc manner without any reference to a defined development process. 
It was soon realised that this undisciplined approach led to systems that were poorly 
constructed and difficult to manage and control. Some form of development process 
was required that could assist software developers in producing more structured code 
in a more manageable way. According to Knott and Dawson (1999: 20) the advantages 
of structuring software development into a defined process model are that:
● it divides a large problem down into easy-to-understand tasks at each stage;
● it sharpens focus;

	
6.2 The software development life cycle (SDLC)
119
● it supports planning and control – improves time estimates;
● it provides progress visibility;
● it provides structure;
● it leads to better coding and documentation.
The same is true for student software development projects. By following a recog-
nised process in the development of your software, you will reap the benefits outlined 
above. This chapter, therefore, introduces some common development approaches that 
you can use (and perhaps adapt) for your own project.
• 6.2 The software development life cycle (SDLC)
6.2.1   Introduction
The SDLC represents a generic model for software development and consists of a num-
ber of stages. These stages, shown in Figure 6.1, are: requirements capture, design, build, 
test and implement. All software developments follow this generic model in one way or 
another and yours will do the same.
Requirements capture represents all activities that are performed to elicit the 
requirements from the user and the documents that are produced during this stage. 
Design represents the design of the software based on the requirements. Build is the 
coding/development of the software system. Test is the testing of this code and Imple-
ment is the eventual installation/acceptance of the software system in its target envi-
ronment (this can also include evaluation of the system with respect to the user’s initial 
requirements).
In practice there is often some overlap and iteration between these stages. For 
example, if you develop a prototype (discussed in more detail in Section 6.6) you 
will be performing some requirements capture, some design and some building work 
­simultaneously. You will then perhaps return to the requirements stage to redefine these 
in light of feedback from the prototype and repeat the design and build stages again. 
Build and test usually overlap significantly. For example, you might write some code (a 
module, object or function) and test it; you might then write some more code and test 
it; you might then integrate these two components and test this combined subsystem 
and so on.
Understanding how large commercial software systems are developed will help you 
in the development of software within your own project. The following sections discuss 
in more detail each of the stages of the generic SDLC.
Figure 6.1 The software development life cycle

	 Chapter 6 ● Software development 
120
6.2.2   Requirements capture
Requirements capture (or requirements elicitation) is quite often the hardest stage of 
the SDLC to perform well and, subsequently, get right. Numerous methods and tech-
niques can be employed to capture a user’s requirements for a system and whole texts 
are devoted to this issue (for example, see Maciaszek, 2007; Robertson and Robertson, 
2012). The outcome from this stage of the process is a series of documents that clearly 
define what the software system is required to do (but not how it should do it – that is 
the purpose of design). These documents (in large software development projects) would 
be produced in the following order:
	 1.	 requirements definition;
	 2.	 requirements specification;
	 3.	 functional specification.
You would probably not produce all these documents separately as part of your own pro-
ject but may be required to produce a single requirements report or system specification 
that encompasses the essence of each of these. Some institutions, for example, require 
students to produce a formal requirements report that must be approved (perhaps by 
an examining committee) before the student is allowed to continue with their project.
Figure 6.2 shows the conventional process of requirements capture (we will dis-
cuss the Time/Problem ovals later). Stages in ovals can, theoretically, be represented 
unambiguously. Stages in ‘clouds’ cannot be clearly specified and represent qualitative 
understanding or subjective documentation that contain ambiguities, contradictions or 
unclear statements.
In Figure 6.2 we begin on the left-hand side with a problem that needs resolving. 
Although the user’s understanding of this problem is subjective (they may not fully 
understand the problem or all its corresponding issues), the problem itself is, in reality, 
unambiguous. Unfortunately, the user is our only link to this problem – they are the 
‘experts’ in this area. As their understanding of the problem is not perfect (notice the 
user understanding ‘cloud’ in Figure 6.2), we will be developing a system on incomplete 
or ambiguous knowledge. The analyst attempts, with the user, to define the problem 
and produce a preliminary definition of the user’s requirements – what they require of 
the system. This stage of the process results in a Requirements definition that is written 
in the user’s terms – usually in natural language (i.e., English). Because this document 
is written with the user and is based on their incomplete understanding of the problem 
it is likely to contain contradictions and ambiguities and hence it is also represented by 
a cloud in Figure 6.2. It is also possible, even with a single user, that the requirements 
definition can contain conflicting requirements even at this stage.
Figure 6.2 The conventional stages of requirements capture

	
6.2 The software development life cycle (SDLC)
121
The analyst must then take this document and rewrite it unambiguously to produce 
a Requirements specification. This is a much more formal, structured document that 
is not open to interpretation – hence the oval in Figure 6.2. It forms a basis for a con-
tract between the client and software developers and, consequently, it is important 
that it is properly and professionally produced. It states what the user is expecting 
the system to do.
Having identified the requirements for the system with the requirements specifica-
tion, it is now the job of the analyst to specify one system that will satisfy these require-
ments – the Functional specification. This document usually contains an introduction, a 
rationale for the system, project objectives, functional requirements and non-functional 
requirements. Functional requirements state what the system is required to do and the 
data and user-interface requirements. Non-functional requirements refer to various con-
straints, standards, limitations (costs, delivery dates, configuration, language, resources, 
etc.), performance requirements, verification requirements (that ensure conformance 
with the system specification) and validation criteria (which form a basis for system 
testing after the system has been written and tested). You should be clear in your own 
mind as to the difference between functional and non-functional requirements as this 
will help you to understand how your project has fulfilled these requirements when it is 
complete. The functional specification should be an unambiguous document that states 
exactly what the system will do.
For most projects it is useful to classify requirements into a hierarchy of importance. 
One technique that helps with this is a MoSCoW analysis. This ranks requirements 
according to the following criteria:
M:	Must have – the system must include this functionality or address this non-func-
tional requirement.
S:	 Should have – the system should include this if at all possible.
C:	 Could have – we could include this functionality if it does not impact on anything else.
W:	Won’t have – things that we will consider for future enhancements but we will not 
include in this version of the system.
This technique can be used alongside value/cost ratio analysis which prioritises require-
ments according to their importance and cost of development. This analysis is discussed 
in more detail in Section 6.5, as it is particularly important to rank requirements in evo-
lutionary and incremental delivery approaches.
Although we won’t go into specific detail about techniques that can be used for 
requirements elicitation as there are numerous texts that deal with such issues, it is worth 
highlighting some approaches that are used so that you can consider them in your own 
project. Aside from the common techniques such as interviews, surveys and focus groups, 
it may worth considering developing personas. Personas are used when all the stakehold-
ers for a project cannot be contacted or are too busy to take part. In these cases it may be 
possible to create imaginary representatives of the stakeholder group – a persona. The 
persona would inherit the characteristics of the missing stakeholder and, putting yourself 
in their shoes, would provide a perspective on the project that would otherwise be lost. 
For example, you might play the part of a naïve user in an attempt to understand the needs 
of such a user outside of any strategic interference; you might want to play the role of a 
client in an attempt to comprehend the strategic direction of the system, etc.

	 Chapter 6 ● Software development 
122
Another useful source of information for requirements elicitation is existing docu-
mentation. Quite often there is a wealth of information to be found in company docu-
mentation. They may have procedures written down that explicitly state how certain 
tasks must be performed; there may be structural diagrams that help you understand the 
organisation’s processes; and data that would not be available elsewhere.
Some examples of techniques that are used to clarify the requirements for a system are 
rich pictures, SSM (soft systems methodology) and use cases. Rich pictures are used to con-
ceptualise complex or ill-defined systems. There are no specific rules on how rich pictures 
should be drawn and they can contain symbols, doodles and other author-specific images. 
They attempt to put some sort of framework or structural representation onto a situation 
or system. They include your own interpretations and perspectives on that situation and 
can help you to clarify your understanding of the situation. A rich picture is a technique 
that is often used in SSM, which was developed in an attempt to interpret and understand 
management problems rather than conventional technical problems which were easier to 
analyse. The detail of rich pictures and SSM is beyond the scope of this book, but you can 
find out more from Ledington (2014) and Checkland and Poulter (2006).
Use cases show the interactions of various stakeholders (or actors) with a system to 
reach a particular goal. Use cases are typically used in UML as a diagrammatical means 
of showing the high-level interactions with a system. They are often used in capturing 
the requirements for object-oriented systems, but they can be used equally well for other 
systems too. Figure 6.3 shows a simple example of a use case diagram – in this case show-
ing the interactions of stakeholders in a theatre system.
6.2.3   Design
Having decided what the system is supposed to do during requirements capture, it is now 
time to decide exactly how the system will achieve this. This is the purpose of design. Design 
works on a number of levels and a number of issues. For example, systems can be designed 
as a series of modules (or objects) that are gradually brought together to produce a fully 
Figure 6.3 Simple example of a use case diagram
Customer
Cashier
Actor
Theatre System
Order Tickets
Attend Play
Issue Tickets
Perform Play

	
6.2 The software development life cycle (SDLC)
123
working system. Design can include flowcharts and pseudo code that plan how certain 
functions within the program will operate. Object-oriented design techniques (for exam-
ple, UML) can be used to build systems from a series of classes. Design can also encompass 
interface issues – human–computer interaction (HCI), screen layouts, navigation between 
screens and story boards. Design might include database design – for example, structuring 
data tables using Normalisation techniques or Entity relationship modelling. Although we 
can’t cover all design techniques here, the following sections provide an introduction to some 
of the more popular design approaches and additional further reading. You should consult 
with your supervisor over the most appropriate design techniques to use for your project.
Object-oriented design – class diagrams
If we are developing an object-oriented system (for example, in Java, Objective-C, C++, 
C#, Ruby, Python, etc.) we will want to design our program using suitable classes and 
identify the relationships between those classes. Class diagrams are a useful way of design-
ing our system in this particular case. They are one type of diagram used within UML 
that provides some standard ways of visualising our system. Class diagrams show the 
classes we want to have within our system and the relationships between them. Figure 6.4 
shows a simple example of a class diagram – in this case a Person class and Date class. In 
this simple case a Person object will contain a Date object which represents their date of 
birth (dob). Figure 6.5 shows more detail of the Date class in this particular example. It 
shows the instance data values and methods in the class along with their visibility (+ or − 
for public and private in this case). Class diagrams can also be used to design class level 
relationships – i.e., super classes and their subclasses; as well as instance level relation-
ships. Quite clearly we cannot hope to provide comprehensive detail and explanation of 
class diagrams here but there are books dedicated to the subject. For more information 
on object-oriented design see Bennett et al. (2010) and Choudhary (2014).
Flowcharts
Flowcharts are useful for planning out how you will structure and code your program. 
They are particularly well suited to working out the implementation details of algorithms 
and mathematical functions. Flowcharts help you to structure your code elegantly and 
make sure it follows a logical sequence. In most flowchart standards there are usually five 
basic shapes that are used. These shapes encapsulate the concept that any algorithm can 
be represented by three control structures – sequence, selection and iteration (Bohm and 
Figure 6.4 A simple class diagram
Person
dob: Date
name: String
Date

	 Chapter 6 ● Software development 
124
Giuseppe, 1966). When designing your program these are the only three control struc-
tures that are required – any variation means your program is badly structured. Rounded 
rectangles represent the start and end of a sequence or function; rectangles represent an 
action or (series of) statement(s); diamonds represent selection (if-then-else in program-
ming terms); parallelograms represent input or output (for example, printing something 
to screen); and rectangles with double bars represent subroutines or functions that per-
form specific tasks. An example of a simple flowchart design is shown in Figure 6.6. In this 
case the program is designed to print out temperatures in centigrade and their equivalent 
values in Fahrenheit. In control structure terms this contains a post-check loop (iteration) 
and a sequence.
Pseudo code
Pseudo code is a high-level means of designing your program using grammar very similar 
to the programming language you will use but with all the specific syntax stripped away. 
In this respect its aim is to be read by humans rather than the computer so it is easier for 
us to understand. It is useful for designing algorithms and can be used as an intermedi-
ate step between a flowchart and the code itself. There is no standard syntax for pseudo 
code as it does not need to be rigorously defined and will vary depending on the target 
language of the proposed system. It is up to you how much detail you include in your 
pseudo code designs and the level you structure it at. As an example, Figure 6.7 shows a 
sample of pseudo code written to represent the centigrade/Fahrenheit algorithm in the 
‘Flowcharts’ section. Notice that it provides a reasonable idea of how the final code will 
be written and it should be easy to convert this into our target language. For example, 
the print fahr statement could be coded directly into Java as System.out.print(fahr); into 
C as printf(“%f”, fahr); and into C++ as cout<<fahr, although there are alternative ways 
of doing this in the different languages.
Figure 6.5 An example class diagram showing the methods and instance data members of a 
possible Date class
Date
– day: int
– month: int
– year: int
+ setDate(int,int,int)
+ getDay(): int
+ getMonth(): int
+ getYear(): int
+ isLeapYear(): boolean
+ isDateValid(): boolean
+ increaseDate()
+ decreaseDate()
+ endOfMonth(): boolean
+ daysinMonth(): int

	
6.2 The software development life cycle (SDLC)
125
Entity relationship (ER) diagrams
ER diagrams are used to design databases and show the relationships between tables in 
those databases. An ER diagram can help to show where redundancies and duplications 
exist in your proposed database design. It helps others understand the structure of your 
database and helps you develop your database efficiently. An example of a simple ER 
diagram is shown in Figure 6.8. In this case the diagram shows the relationships between 
three tables in a university department database that records lecturers, the modules 
they teach and the students who attend those modules. There is also a link between 
lecturers and students in terms of their personal tutor relationship. The nature of these 
Figure 6.6 Example of a simple flowchart
Start
Centigrade: 0
Increase
centigrade
End
Calculate
Fahrenheit
X
Centigrade<
100?
Display
Fahrenheit
Figure 6.7 An example of pseudo code for earlier flowchart algorithm
cent = 0
do
fahr = 1.8 x cent + 32
print fahr
cent = cent + 10
while (cent < 100)

	 Chapter 6 ● Software development 
126
relationships (in terms of the dashes and additional lines) is beyond the scope of the text 
here and is explained in detail in database books such as Connolly and Begg (2005) and 
Hernandez (2013).
Wire frame diagrams
Wire frame diagrams are usually used to plan out the structure and layout of a web 
page – although they can also be used to plan out the layout of system screens. They 
show where you intend to place text, pictures, links and so on to provide a feel for the 
design. An example of a wire frame diagram is shown in Figure 6.9. This example is for 
a university’s main web page and shows the position of the content you would expect 
to see on that page.
Figure 6.9 Example of a wire frame diagram for a university’s home page
Students    Staﬀ    Alumni   Search
LOGO
About    News and Events   Studying with us  Research   Business
SEARCH
Prospectus
Virtual tour
Campus Map
Open Days
Latest News
sample text sample text sample text
sample text sample text sample text
sample text sample text sample text
sample text sample text sample text
Figure 6.8 An example of a simple entity relationship diagram
Lecturer
Module
Student
Teaches
Studies
Personal
Tutor

	
6.2 The software development life cycle (SDLC)
127
Site maps
Site maps help you to plan out the sequence of screens or web pages for your system. 
They show, with arrows, the routes that users can take through your system. For exam-
ple, Figure 6.10 provides an example site map for a simple website. In this case, fol-
lowing an introductory screen that everyone can see, the user must either register with 
the site or log on. They are then taken to the site’s home page which has a number of 
options depending on the level of the user. This type of diagram is useful in mapping 
out your system’s structure and is also useful in project planning in that it shows you 
just how many pages (screens) need completing to produce a fully functional system 
or site.
6.2.4   Build
Build simply represents the coding and construction (bringing together the individual 
modules or objects) of the software system. How this is achieved depends largely on the 
programming language(s) used, the design methods used and any coding standards and 
quality standards you might be following. For website development, applications such as 
Wix, Drupal and WordPress can help you produce professional looking sites quickly and 
efficiently. Wix is a free website builder with numerous templates you can use to design 
your site (see http://www.wix.com/ for more detail). Drupal is an open source content 
management system that allows you to build websites – from simple blogs to corporate 
enterprise applications (see https://drupal.org/). WordPress is a content management 
system that also provides extensive functionality for building web applications and is 
largely free (see https://wordpress.com/).
Figure 6.10 Example of a site map for a website
Welcome Page
Registration
Home Page
About Us
Contact Us
Feedback
Administrator
User
Accounts
Pages
Data Entry
Analysis

	 Chapter 6 ● Software development 
128
6.2.5   Test
This is the final testing of the system as it is brought together into a working whole. 
Testing is discussed in more detail in Section 6.11.
6.2.6   Implementation
The final stage of the SDLC is implementation. This represents the final hand-over of the 
system to the user. It can include acceptance testing by the user, it will invariably involve 
training, it might involve a formal handover, the setting up of data files, implementing 
new work procedures, documentation and data migration (an important, difficult and 
possibly huge task in large software systems developments). In this stage of the process 
change management is particularly important. This can also include overcoming resist-
ance to change and other personnel issues in large industrial projects.
Having introduced a generic model showing the broad stages through which all soft-
ware systems develop, we will now look more closely at specific models you can use and 
adapt for your own project.
• 6.3 The earliest ‘model’: build-and-fix
As we saw earlier, in the pioneering days of software development there was no rec-
ognised process for developing software. Programmers merely attempted to grasp an 
understanding of the problem as best they could and ‘cobbled together’ some code to 
address this problem. The build-and-fix or code-and-fix ‘model’ represents this early 
approach to the development of software. It is not a formal model as such, but a rep-
resentation of a simple approach to hacking code together. There is no formal require-
ments capture in the process and no formal design. Programmers would first write some 
code, run the code and then correct any bugs in the software – see Figure 6.11. In this 
case there is no formal breakdown of the process into stages. The model merely iter-
ates until the software becomes unworkable and is eventually retired and/or replaced. 
Turner (1993: 470) identified a number of issues with this ‘model’.
● After several fixes the software becomes difficult to maintain as it becomes poorly 
structured.
Figure 6.11 The build-and-fix ‘model’

	
6.4 The stage-wise and classical waterfall models (conventional models)
129
● It often does not match the user’s requirements – it is rejected or requires extensive 
redevelopment.
● It can be costly to maintain because of its poor structure and lack of definable output 
that can be tested.
Although the build-and-fix approach is still used today by many programmers work-
ing on small and personal systems, you should not be using it for your project. You 
should, instead, look to one of the more defined and recognised processes outlined in 
the following sections.
• 6.4 The stage-wise and classical waterfall models 
(conventional models)
Owing to the problems encountered with the unstructured approach of the build-and-fix 
model, several more detailed models were devised. The earliest of these models was the 
stage-wise model from which the classical waterfall model developed.
The stage-wise model was developed in 1956 by Benington in an attempt to provide 
an engineering process to the development of software. It represents a unidirectional, 
sequential process – once a stage has been completed, the results of that stage become a 
fixed baseline from which the following stages develop – there is no revision. Although 
this appears to be rather rigid and naïve, the development of a defined process at that 
time was a significant breakthrough in software engineering.
It was soon recognised, however, that the sequential nature of the stage-wise model 
was causing problems and some form of reworking was required to allow a user’s 
needs to be addressed more effectively. For this reason, the classical waterfall model 
was developed – shown in Figure 6.12. The classical waterfall model differed from the 
stage-wise model in that it allowed some limited iteration between stages – shown as 
‘splashing back’ in Figure 6.12.
Figure 6.2 highlighted one of the main problems with the conventional waterfall-type 
approaches. As we move through the stages of the process the problem we are trying 
to solve is not static and moves on (shown by the shifting problem ovals with respect to 
time in Figure 6.2). Thus, by the time we complete our analysis, design and building of 
the software system, the program we present to our user no longer solves the problem 
they currently have: that is, the software is already obsolete. Another problem is that the 
user’s understanding of the problem is unclear and there are ambiguities in the subse-
quent requirements specification. We cannot then guarantee that the system we design 
and develop is matching the user’s needs at all. The conventional approach to software 
development is, therefore, only really appropriate for projects that are:
● short (say six months to one year maximum – a typical student project length) so that 
the problem does not have time to evolve; and
● understood clearly – so that the initial requirements are captured accurately and sub-
sequent specifications and designs are very close matches with what is actually needed.
You should, therefore, only use this approach for your own project if you are confi-
dent that you fully understand the requirements of the system or they have already been 

	 Chapter 6 ● Software development 
130
provided to you in an unambiguous way by the client. In most cases we cannot guarantee 
to fully understand the needs of our user – in which case one of the following approaches 
is perhaps more suitable for you to follow.
• 6.5 The incremental model
Rather than delivering your software to your client towards the end of your project in 
one ‘big bang’ as the conventional models do, it might be better to deliver the system to 
them as a series of intermediate working subsystems over a period of time. Thus, you add 
more functionality to the software at each release of the system. This means that you need 
to get an overall software structure (kernel) in place as part of the first release of your 
system. The other parts of the system are then brought online and released to the user as 
the system is developed. Thus, each release to the user provides added functionality to 
the existing system. In a project lasting around six months you would not really expect 
to have more than three releases.
Figure 6.13 (adapted from Ould, 1999) illustrates the incremental model – in this 
case there are three incremental releases for the system. Notice that the requirements 
for the system are gathered in the usual way at the start of this process. You then design 
and prepare the first release of the system. This includes a kernel for your program and 
the first component of functionality that will be useful to the client. The second phase 
of the process involves designing the second increment of the system and developing 
and implementing this within the existing system. This process continues until all the 
increments have been completed and the system is fully working.
Figure 6.12 The classical waterfall model

	
6.5 The incremental model
131
Figure 6.13 also highlights two other aspects of the incremental approach. The first 
point to note is that the design stages of the later increments are not as detailed as the 
design stage of the first incremental release. This is because the first increment of the 
system must also include the design of the all-important system kernel (structure). Sub-
sequent releases just need to focus on the individual increments and hence the design 
stage of these increments is reduced. The second important point to notice is that the 
increments are not all the same size – some will add more functionality to the system than 
others, and some will be harder to produce than others. Consequently, the design, build, 
test and implement stages of each increment may not be the same size.
When planning to undertake an incremental development it is important to have an 
outline plan in place for the entire system at the start. You cannot just plan the easiest 
parts of the system, develop and release these to the user, and worry about the more 
complex aspects of the system later. It may be that later, as you tackle the harder parts 
of the development, you discover a fundamental flaw with your ideas that requires you 
to rework significant parts of your program. This would mean that earlier, easier work 
that you did on your project would be wasted. You must ensure that you have a good 
understanding of how the overall system will operate before beginning work on the 
intermediate releases.
When deciding which increment to complete next in a development it is useful to 
draw up a table of value to cost ratios. Value represents, on a 1 to 10 scale, the usefulness 
this increment will add to your system; 10 being extremely useful (if not essential – a 
must in our MoSCoW analysis), whereas 1 represents perhaps ‘nice to have’ features 
that will be good to include in the system if time allows (perhaps a ‘Could have’ from a 
MoSCoW analysis). Cost is also measured on a 1 to 10 scale and can be measured in terms 
of the time it will take you to develop that feature. For example, some functionality that 
you estimate will take 15 weeks to design, program and test may be assigned a cost value 
Figure 6.13 The incremental model Source: Adapted and reproduced from Ould (1999). © John Wiley 
and Sons Limited. Reproduced with permission

	 Chapter 6 ● Software development 
132
of 10, whereas a simple piece of functionality that may only take a day’s programming 
may be assigned a cost value of 1.
Although these estimates of values and costs are subjective, they do provide you with 
a relative measure of the importance and effort required for adding certain aspects of 
functionality to your system. By dividing the value of the increment by its estimated cost 
(the value to cost ratio) you can determine the added value that increment will provide 
to your system and draw up a priority list – identifying the order in which the incre-
ments should be tackled. Note that estimated costs and values do not remain static as 
the project progresses and after each increment is released it is worth revisiting your cost 
and value estimates to determine if any changes need to be made. For example, having 
developed part of the system in one release your understanding of the coding involved 
may have improved and you might wish to revise down some other development costs 
(particularly if you can reuse some code). Conversely, having completed an increment, 
you might realise that your cost estimates were too low and revise up the remaining 
estimates accordingly. Having provided the user with another release they might have 
new ideas or change their mind on what aspects of the system are important to them. 
This may result in you having to readjust your value estimates and change your priorities 
accordingly. The second example below provides an outline of how value to cost ratios 
might work in practice.
Example 1 – Two increments
Suppose you were developing a system for a user that logged and statistically analysed 
calls to a help desk. You might release this system to the user in two increments during 
the course of your project. The first release would provide the overall structure for the 
system and would allow the user to log calls to the help desk. The second release would 
provide the added functionality of the statistical analysis of the logged calls (for example, 
identifying peak periods, common problems, regular callers, etc.). Thus, by providing 
the user with a partially working system early, it allows them to become familiar with the 
system’s operation before the added complexities of the analysis component are brought 
online. The first release would also enable them to start gathering data into the system 
earlier – data that would otherwise have been lost had they waited for a fully working 
system later on. This also means that you can check that the right information is being 
gathered by the system for subsequent analysis by the second release.
Example 2 – Multiple increments
Table 6.1 provides an example of a value/cost table for a student project that aimed to 
develop a website to support a local, amateur football club. The club wanted to keep 
members and potential members informed of various aspects of the club including: 
match fixtures; results; important dates (presentation evenings, etc.); duty rotas (who was 

	
6.5 The incremental model
133
responsible for cutting the grass, assisting the referee on match days, etc.); contact details 
for the club committee and other officials; photograph album (players, trips, matches, 
etc.); information about the club (joining fees, training days, etc.); and a feedback/discus-
sion section. After interviewing the client the student was able to prioritise each of these 
requirements according to their value on a 1–10 scale. For example, having an attractive 
home page was identified as the most important feature of the site and was assigned a 
value score of 10. Having a photographs section was deemed least important and this was 
assigned as value score of 4. The student then estimated how long each of these require-
ments would take to develop and produced a cost scale. In this case the student estimated 
that setting up a discussion forum on the website would take the most effort (needing to 
develop a database in the background to store comments and link threads together) and 
consequently assigned this an effort score of 8. Conversely, setting up a page with contact 
details for club officials would be relatively easy and this was assigned an effort score of 4. 
The resulting value/cost table is shown in Table 6.1.
Once the student had calculated the value to cost ratios, it was then possible to pri-
oritise the order of the development – shown in the last column of the table. The student 
worked on the home/main page first, getting an overall structure in place and showing 
this to the client. With a few minor changes and suggestions from the client the student 
then went on to design and develop the club information page and so on. By prioritising 
the release of the system in this way the student ensured that only those additions valuable 
to the site were implemented in order. It reduces the chances of ‘gold plating’ (adding 
features to a system that cost a lot of effort for very little reward) unless time allows. If 
the student ran out of time on the project they would at least have added a number of 
useful features to the system. Any features not included may be identified as future work/
enhancements.
Functional 
increment
Value
Cost
V/C ratio
Priority
Home/main page
10
5
2.0
1
Match fixtures page
  8
6
1.3
4=
Results page
  6
6
1.0
7
Diary/dates page
  7
6
1.2
6
Duty rota page
  8
6
1.3
4=
Comments/feedback  
  page
  5
8
0.6
8
Committee contact  
  details
  6
4
1.5
3
Photographs
  4
8
0.5
8
Club information  
  page
  8
5
1.6
2
Table 6.1  A value/cost ratio table for an amateur football club website development
Example 2 (continued)

	 Chapter 6 ● Software development 
134
Advantages
● The user gets something early so that they can get an idea of the system’s capabilities 
and an idea of what you are able to produce in the longer term for them. Thus, the 
client/user can provide early feedback if something isn’t right or improvements can 
be made. This is particularly useful if the system requirements were not entirely clear 
at the project’s outset.
● Delivering something early gives you a sense of achievement and the client/user a 
clear understanding that progress is being made.
● It can help you plan and manage your project more effectively. By breaking the project 
down into a number of deliverables, you will be able to plan, reasonably accurately, 
how long each deliverable should take to develop. In addition, when you are control-
ling your project, any slippage in meeting a deliverable will provide an early warning 
that your project may be falling behind schedule and you will be able to do something 
about it.
● The user does not need to learn how to use the entire system in one go. They can be 
introduced to the system over a period of time, becoming confident with its function-
ality before later releases add to its complexity.
Disadvantages
● It might be difficult to break your program down into a series of subsystems that are 
worth delivering to the client/user as separate units. For example, you don’t want 
to end up providing a large number of small deliverables to the user that appear to 
provide little improvement over earlier releases. This wastes your time and can lead 
the user to think that you are making little progress and wasting their time too.
● Although it is advantageous to meet your client/user regularly, additional contact 
with them can encourage them to identify too many improvements. They may iden-
tify more changes than you have time to implement and the changes they request 
may take your project in a direction that is inconsistent with the requirements of your 
course.
• 6.6 Prototyping
6.6.1   Introduction
The conventional and incremental models that have been introduced can be used in 
projects where the problem is well defined, the requirements can be clearly elicited 
and defined, and the technical feasibility of a solution is understood. However, in 
many projects it is often difficult to pin down exactly what is required from a software 
system at the start of the project and/or we may not have a clear understanding of the 
technical issues surrounding that system. This is often the case in student projects 
where they are working with a supervisor or client for the first time, perhaps in a new 

	
6.6 Prototyping
135
field or in a developing research area. In these cases it is useful to produce a prototype 
in order to:
	 1.	 explore the requirements of the system with the user – requirements capture;
	 2.	 explore the concepts for a proposed system – conceptual prototyping;
	 3.	 explore the technical feasibility of a system – experimental prototyping.
1. Requirements capture
During requirements capture a prototype is used to pin down and refine a user’s require-
ments for the system. It can also be used during design to test the user interface – assess-
ing how well the user can use and navigate around the system. According to Knott and 
Dawson (1999: 42), ‘Prototyping provides an effective method for generating feedback 
about what is good and what is bad about an idea and it is often the only really effective 
method for doing this’.
You don’t necessarily have to develop a partially working system as a prototype 
to explore a user’s needs for a system. You could use sketches of ideas as a basis for 
­discussion. Quite often you can use other systems to explore a user’s requirements. 
For example, you might use one or two similar systems as examples of what you are 
­thinking of developing and the user might select functionality from one system that 
they like alongside functionality or interface with another. By this means you build 
a bespoke ‘Frankenstein’ system of your own that takes the best ideas from existing 
systems.
2. Conceptual prototyping
Conceptual prototypes represent another means of exploring the requirements for a 
system. A conceptual prototype is used to explore the concept behind an idea: whether 
it could work or not. In these cases a prototype is developed without the worry of usabil-
ity. The danger with this kind of prototype, however, is that users get confused as to 
its purpose and criticise things such as the interface, the usability and so on rather than 
providing feedback on what you are really interested in: that is, whether the concept of 
the idea is appropriate or not.
3. Experimental prototyping
Experimental (also known as technical) prototyping is used when one is unsure about 
the technical solution to a problem. For example, if you are developing a new algorithm, 
working in an emerging field, working on a new hardware platform, interfacing to a new 
hardware component, or using a new application or programming language, it is often 
useful to produce an experimental prototype to assess the feasibility of your proposed 
solution first. You might discover, for example, that you will need to re-design your 
proposed solution because it is inefficient and runs too slowly, or you might discover 
that your assumptions about the system were incorrect and an alternative strategy needs 
to be undertaken. Alternatively, you may discover you don’t have the technical ability to 
use the programming language or the hardware platform or software application you are 
intending to employ.

	 Chapter 6 ● Software development 
136
There are two things you can do with a prototype once you have developed it. You 
can throw it away and start the development of the system from scratch (throw-away 
prototyping), or you can develop (evolve) the prototype into the final system (evolution-
ary prototyping). These two approaches to prototyping are discussed in the following 
sections.
6.6.2   Throw-away prototyping
There are a number of approaches you can use to develop a throw-away prototype, depend-
ing on what you want to achieve, explore with the user, or experiment with. The following 
are some ideas you might want to use in developing your own throw-away prototype.
● The prototype need not be developed on the same hardware platform as the final 
system. For example, you could mock-up some sample screen designs using a word-
processor or drawing package. If you were going to develop a system for a tablet or a 
mobile phone, you might develop a mock-up using an emulator on a PC first.
● You might develop a prototype in a different programming language. For example, 
if you wanted to develop an experimental prototype to evaluate a new algorithm 
you might test out that algorithm by developing it quickly in C first. You might then 
throw this code away before re-coding the final system with a graphical user interface 
in Visual C++™. Alternatively, you could develop a user interface for a multimedia 
product using a web-page editor.
Knott and Dawson (1999) discuss the following techniques for [throw-away] prototyping:
● You could simplify the system by partitioning the program such that a prototype could 
be built for part of that system. For example, you could prototype the graphical user 
interface first, leaving the underlying functionality until later.
● Use a reduced database. You could quickly generate a test database for a system to 
provide an idea of how that system operates on particular data sets.
● You can develop a much simpler version of the program that has simplified data han-
dling and error checking – sacrificing quality and reliability. As the prototype is merely 
intended to show the user what will happen when the right or wrong input is used, it 
need only handle one example of each for demonstration purposes.
● You could use a modified version of another program or another system to illustrate 
your ideas. For example, if there is a commercial product that has some components 
that you wish to incorporate into your own system, you could demonstrate this to 
your user and check what aspects of functionality they require (and the type of inter-
face they prefer).
Advantages
Throw-away prototyping has a number of advantages over conventional approaches. 
Knott and Dawson (1999) note the following:
● Something tangible is produced quickly which keeps you and your user happy.
● The tangible nature of the system helps the user to clarify their ideas and refine their 
requirements.

	
6.6 Prototyping
137
● Misunderstandings, errors and omissions in the requirements can be sorted out.
● It improves communication with the user. It is easier to look at a working model than 
a document.
● The prototype can test the feasibility and usefulness of the product.
● Alternatives can be compared using different prototypes.
Disadvantages (things to be aware of)
● The throw-away prototype might look messy, unsophisticated and contain bugs. This 
might give a bad impression to the user.
● The user might think your prototype is really good and may want you to develop it 
into the final system, even though you had intended to throw it away. As a conse-
quence you will end up building your final system on perhaps poorly structured code.
● If you develop the throw-away prototype on a different system or in a different pro-
gramming language you may not spot a technical issue that will be difficult/impos-
sible to overcome on the target system.
● It can take a lot of effort and commitment to develop something that you are eventu-
ally going to discard. For this reason, students often prefer to use an evolutionary 
prototyping approach to develop their systems. This approach is discussed in the 
following section.
6.6.3   Evolutionary prototyping
The evolutionary prototyping approach differs from the throw-away approach in that 
the prototype is not discarded but developed (it evolves) into the final product. At 
first glance it might appear similar to the build-and-fix approach – something is built, 
assessed and modified until the final system is released. However, the evolutionary 
approach is much more defined than the build-and-fix approach. An initial specifica-
tion for the system must be investigated and produced, and the process must follow 
a planned series of releases (evolutions). You are also aware from the start that your 
program is going to evolve so it must be designed and structured logically from the 
outset with suitable comments, variables, data structures and so on. This will ensure that 
changes can be incorporated ‘gracefully’ and you are not left with masses of ‘spaghetti 
code’ that you have to unravel to make simple modifications.
Figure 6.14 (adapted from Ould, 1999) illustrates the evolutionary process – in this 
case showing three releases of a system. Notice that you complete a preliminary require-
ments capture for the system and pursue the remaining stages of the conventional pro-
cess in order to develop the first prototype (System Version 1). This works in much the 
same way as a reduced version of a conventional waterfall-type approach. Following 
feedback on what is right, wrong, missing and could be improved or changed from the 
user on this prototype, you can then go back and readdress/adjust the requirements 
before developing (evolving) the second deliverable of the system (System Version 2). In 
this way the system is seen to evolve from an embryonic core into the final system. You 
might decide to focus each deliverable on different aspects of the system, investigating 
each component in turn, in a similar fashion to the incremental approach. However, in 
this case you are explicitly looking to change the requirements and design of the system 

	 Chapter 6 ● Software development 
138
based on user feedback. Note that the requirements and design stages in Figure 6.14 are 
not as big (as detailed) in phases 2 and 3 of the process compared with phase 1 as the 
bulk of this work has been done during that first phase. Also note that the system is get-
ting larger as it evolves in phases 2 and 3 and its functionality increases. The evolutionary 
approach is sometimes referred to as iterative development.
The advantages and disadvantages of the evolutionary prototyping approach are 
similar to those of the throw-away prototyping approach. However, in the evolutionary 
model you do not lose code you may have spent a lot of effort developing. Contrary to 
the throw-away approach you must be careful to produce well-structured and com-
mented code that can be evolved into the final system. This means that your first pro-
totype must be well thought out and cannot be a ‘quick and dirty’ throw-away artefact.
• 6.7 Agile methods
6.7.1   Introduction
The term agile methods was adopted in 2001 by a group of eminent software engineers at 
a meeting in Utah, USA. It refers to approaches to software development that reduce risk 
by delivering software systems in short bursts or releases. In contrast to ‘heavy weight’ 
development approaches, such as the waterfall model (in which the delivery of a work-
ing system can take many months, if not years to be released), the concept behind agile 
methods is to release working systems to the user in a matter of weeks. Although each 
iteration might not release a fully working system to the user at the end of each cycle, 
the aim is still to have an available release at the end of each iteration. The evolutionary 
prototyping approach and incremental model introduced in the previous sections are, 
from a process point of view, agile methods.
The other main characteristics of agile methods that differentiate them from older, 
more conventional models include: their emphasis on smaller development teams (which 
Figure 6.14 The evolutionary prototyping model
 Source: Adapted and reproduced from Ould (1999). © John Wiley and Sons Limited. Reproduced with permission

	
6.7 Agile methods
139
are invariably working together in open plan offices); and face-to-face communication with 
the users who are quite often based in the same working environment as the developers.
Agile methods are well suited to projects that have unclear or rapidly changing 
requirements; the project team is fairly small but highly competent and can be trusted; 
and close interaction with the user must be possible.
A number of key principles were established by the founding group – referred to 
as the agile manifesto (see http://www.agilemanifesto.org). These principles include:
● satisfying the customer through early and continuous delivery of valuable software;
● welcoming changing requirements;
● short iterative timescale of weeks;
● close working relationship between developers and users;
● face-to-face conversations rather than detailed documentation;
● working software is the measure of progress;
● teams are self-organising;
● teams reflect on how they might improve themselves regularly.
Because of the reduced amount of documentation agile methods produce, they have 
come in for some criticism. However, for smaller projects (student projects, for example) 
the principles can lead to the development of software that goes a long way to meeting 
the users’ requirements.
6.7.2   Scrum
One example of an agile method is the Scrum approach. Teams in this approach usually 
range from around five to nine team members who are self-organising and co-located. 
Three main roles are identified in Scrum: the Scrum Master (essentially the project man-
ager – who coaches and facilitates the team); the Product Owner (represents the views 
of the customer and itemises the order of product development – much like the value/
cost ratios discussed earlier); and Team Member (who creates and owns his or her own 
estimates for work). The work in Scrum is broken down into manageable chunks referred 
to as Sprints. These are essentially cycles of the incremental or evolutionary approaches 
and are sized to take between one week and one month to complete. Each sprint pro-
duces something of value – a deliverable product increment.
If you are interested in looking at agile methods, for a group project for example, 
some texts that discuss the approaches in more detail include Carroll (2012) and, specifi-
cally for Scrum – Sims and Johnson (2012).
6.7.3   Extreme programming (XP)
Extreme programming is another software development approach that encompasses 
many of the ideals of agile methods. It was introduced in the 1990s in an attempt to 
improve the way in which software is developed. It is designed for teams of between 2 
and 12 members, so it is ideally suited for student projects.
Extreme programming is an approach that is well suited to projects in which the 
requirements are likely to change. The approach actively encourages the users to be 

	 Chapter 6 ● Software development 
140
involved with the development process and anticipates the positive influence they will 
have on requirements capture. It emphasises team work and, in the case of student pro-
jects, encourages the users, supervisor(s) and the project team to work together towards 
a common goal of developing quality software. According to Wells (2006) extreme pro-
gramming ‘improves a software project in four essential ways; communication, simplic-
ity, feedback and courage’. One of its principles is to deliver the software early, obtain 
feedback on the system and implement any required changes. In some ways the approach 
is similar to that of evolutionary prototyping, although there is much more guidance 
on how the team should work together and how testing should be pre-planned than is 
provided by the evolutionary model.
Although the detail of this approach’s methodology is beyond the scope of this book, 
some of its guiding principles are worth remembering: involve the user in the project, 
pre-plan testing before coding, deliver the system early and ensure strong communica-
tion between all stakeholders. For more information on this method you should refer to 
the Extreme Programming website at: http://www.extremeprogramming.org/.
• 6.8 Configuration management
One thing that you must be careful to control when pursuing an evolutionary or incre-
mental approach, or in a team project when a number of people are working on different 
parts of the system simultaneously, is the system’s configuration. Configuration manage-
ment is used to control the different versions of a system that are produced as the system 
develops. It is closely related to version control and revision control. In large industrial 
projects configuration management is an important activity and typically involves four 
stages.
	 1.	 Configuration identification: identifying the attributes that define the item you 
are hoping to control – what makes it as it is – and setting this as a baseline.
	 2.	 Change control: managing and approving changes to the item and adjusting the 
baseline.
	 3.	 Status accounting: recording the configuration baselines.
	 4.	 Configuration audits: ensuring that changes to configuration do what they state 
they will do and the system continues to satisfy the requirements (it does not drift).
For student projects a comprehensive configuration management system is unnecessary. 
However, as you develop and release new versions of the system you must make sure 
that you keep track of these versions; what changes have been made, who has made these 
changes, who has received them, where they are saved/backed-up to, etc.? If something 
goes wrong with a ‘release’ it is useful to be able to go back to the previous version to try 
to determine what has gone wrong. Make sure that you date stamp each version of the 
program that you produce (no matter how small the change that is made) – perhaps by 
including the date on a splash screen, main menu or home page. You might also consider 
updating the version number too (particularly for major changes). This will allow you 
to keep track of the latest version of your system and, as you make frequent back-ups, 
which back-up is the most up-to-date. Also, for team projects, keep a note of which team 
members are working on which parts of the system and consider these questions – will 

	
6.9 Which approaches should I use?
141
these parts integrate seamlessly? Do you need to define certain coding standards that 
everyone must adhere to? What are the likely effects of one part of the system on another 
when they are merged?
If configuration management is going to be an important part of your project it may 
be worth considering using a software tool to support this. An example of such a tool 
is TortoiseSVN (see http://tortoisesvn.tigris.org), which is free. Running under Win-
dows, TortoiseSVN is a version control system that works with any development tool. 
It can also be used for document control so can be useful when trying to piece together 
a final report when working on a group project and each team member is working on a 
different part of the report.
• 6.9 Which approaches should I use?
6.9.1   Which development approach should I use?
In the majority of projects that I supervise, the students tend to follow an evolutionary 
prototyping approach for their software developments. For a six-month project starting 
in October, I usually recommend that they provide their client with (and get feedback 
on) a prototype before Christmas (i.e., within two to three months of the start). This 
allows them to consider any revisions, modifications and changes to their system over the 
Christmas break. In these cases the students usually end up providing no more than two 
evolutionary prototypes to their clients before the final deliverable is released. However, 
some projects do follow a conventional model, whereas others use incremental or throw-
away prototyping approaches. So which is best to use?
The following provides some guidance on which model is suitable in which circum-
stances. You should discuss these options with your supervisor and choose what is right 
for you. You may, as part of your project report, be expected to justify and evaluate the 
process model you used, so make sure you choose an appropriate one. (Some of the fol-
lowing advice was adapted from LevelA Software [2005].)
Conventional waterfall-type model
This is well-suited to projects that have a low risk in areas such as the user interface and 
performance, but a high risk in terms of schedule and control. It is useful in projects where 
the requirements are understood clearly by all involved and are unlikely to change during 
the course of the project. An example would be a specification provided by your supervisor 
that requires implementation.
Incremental development
This is appropriate for systems in which the requirements are generally clear and the 
system can be partitioned into a series of intermediate deliverables. It is preferable to 
the conventional approach in that it provides some user involvement and it can also be 
‘terminated’ at any time yet still leave the user with a partially working system. However, 
if the user is difficult to contact and you can only arrange one or two meetings with them, 
the conventional waterfall-type model may have to be used.

	 Chapter 6 ● Software development 
142
Throw-away prototyping model
This is useful for ‘proof of concept’ situations, exploring technical uncertainties, or in 
situations where requirements and user’s needs are unclear or poorly specified.
Evolutionary prototyping model
This is useful in projects that have a high risk in terms of the user interface design and 
uncertainties in user requirements. It is perhaps more appropriate than a throw-away 
prototype in situations where the programming language and target system are well-
understood by the student.
Hughes and Cotterell (2009: 100) provide the following rules-of-thumb in selecting 
process models (adapted).
● If uncertainty is high then use an evolutionary approach or throw-away prototyping 
approach.
● If complexity is high but uncertainty is low then use the incremental approach.
● If uncertainty and complexity are both low then use the conventional waterfall-type model.
● If the schedule is tight then use a conventional or incremental approach.
Table 6.2 provides a summary of when different process models should be used, 
based on the complexity of the system being developed and the clarity of the require-
ments for that system. For a system that is well understood and not overly complex, 
the waterfall model would be suitable (providing it was a short project in which the 
requirements were unlikely to change). For a system that is well understood but highly 
complex, the incremental model could be used to break the development down into 
manageable chunks and deliverables. For highly complex and highly uncertain systems 
a throw-away prototype could be used to explore both the technical issues of the system 
and its requirements. For a system that is not overly complex but has uncertain require-
ments, an evolutionary approach would be suitable as this could evolve into the final 
system when the requirements have been clarified.
Dawson and Dawson (2014) provide a useful technique for comparing development 
models – the Functionality–time graph. Discussion of this technique is beyond the scope 
of this book. However, it does provide a useful means of comparing models by show-
ing how they provide functionality to the user and how systems meet the user’s needs 
as time progresses – from the time the project is started to the retirement of the system.
6.9.2   Which programming language should I use?
Unfortunately there is no simple answer to this question since the choice of which program-
ming language to use in your project depends, not only on the application you are develop-
ing, but on a number of other issues too. Students are often concerned that their choice of 
Complexity
High
Incremental
Throw-away prototype
Low
Waterfall
Evolutionary
Low
High
Uncertainty (of requirements)
Table 6.2  When to use different process models

	
6.9 Which approaches should I use?
143
programming language will have a significant impact on the marks they can obtain for their 
project. However, providing they use a language that is ‘suitable’, and this suitability can be 
justified within their report, this should only improve the marks they obtain. For students 
on software engineering and computer science-type courses, a question sometimes asked 
is whether good marks can be obtained if an ‘easy’ language is used (a fourth-generation 
language, for example) instead of one more technically challenging. In these cases it is still 
advisable to use the programming language that is best suited to the task in hand. There 
is no point in making the software development more difficult than it needs to be just to 
‘show off’ your technical programming skills. It would be far better to produce a fully 
working system using a more appropriate language in less time, thereby allowing you to 
develop other academic aspects of your project in more depth. In this section we look at 
how you can choose between different programming languages for developing software 
systems. For web developments, some pointers to tools that are used in such cases are given 
in Section 6.2.4. The ideas presented here can be adapted in these situations.
The choice of programming languages available these days is quite breathtaking. Lan-
guages have evolved from first- and second-generation languages such as Assembler, 
through third-generation languages such as Pascal, C, C++ and Fortran to fourth-genera-
tion languages such as Visual Studio® and Delphi. Not only can you view languages from 
this ‘generational’ point of view, but you could also class languages according to whether 
they are object-oriented or procedural in nature. Object-oriented languages, such as Java, 
Objective-C, Python, C# and C++, encourage code reuse, whereas procedural program-
ming languages are perhaps well suited to the implementation of sequenced algorithms.
Deciding on which language to use is primarily based around who the client/user of 
the system will be and the platform on which the software is based. For example, if you 
are developing a simple application for your own use (to test out an idea or process some 
data, say) you may decide to ‘knock something together’ quickly in your preferred lan-
guage. However, if you are developing a system for a client or a number of users, you will 
need to consider more deeply the language you will use. While your supervisor should 
provide you with some guidance in this area, it is worth considering the following list of 
factors that should be taken into account when making your decision.
● What languages do I already know – how good am I at programming using those 
languages?
● Are there any languages I would like to learn as part of my project?
● What language(s) does my supervisor use – will I need a lot of technical support from  
him/her?
● What languages are supported by my department or others within my institution? If 
I develop a system using a language that is not supported by my own department, 
will I be penalised if things go wrong? If things do go wrong with a language that 
is supported by my department, and my project goes badly as a result, who will be 
responsible?
● If I need to get technical help or support, is it readily available (for example, either 
locally or via the Internet)?
● Are there any language requirements imposed on my project by the client/user?
● What languages are supported by the client/user?
● How much does the nature of the system I am developing affect the choice of 
language?

	 Chapter 6 ● Software development 
144
If there is no single language that emerges as an obvious choice for your project (for exam-
ple, as specified by the client in the requirements) it would be worth considering the lan-
guages available to you as part of your literature review. A systematic approach to language 
selection might include a comparison table. This table allows you to evaluate the alterna-
tives on offer and grade them according to appropriate criteria such as maintainability, 
support, HCI capability and database connectivity. An example of such a table is presented 
in Table 6.3, in which four languages are assessed. In this table the weighting relates to the 
importance of each criterion for this particular project on a scale of 1 to 5 (1 being the least 
important). For example, in this particular project the interface requirements are particu-
larly important and so HCI capability (Human–Computer Interaction) is given a weighting 
of 5; the importance of learning a new language (learning) is felt to be of little importance 
in this case so this has been given a weighting score of 1. For your own project you may 
weight these criteria differently and may well choose other criteria that are appropriate. 
The values that are then awarded to each language are subjective estimates of how each 
language meets the criteria specified (again on a scale of 1 to 5). For example, in this case 
it is felt that language A has an average rating for maintainability and is thus assigned a 
value of 3 in the table. The overall scores for each language are then calculated by multiply-
ing each language’s criterion score by the associated weighting, and summing them. This 
score provides us with a relative measure that we can use to compare each language. In this 
example, language A has the highest overall score and we may, therefore, justify choosing 
this language for our project based on this comparison. Be aware, however, that reduc-
ing the comparison of programming languages to a simple table such as this may mean 
that other important aspects are overlooked. You should, therefore, justify your choice of 
programming language in more depth, using a table like this to support your arguments.
• 6.10 Top-down and bottom-up development
6.10.1   Introduction
If you are producing a conventional software system with a number of components (either 
modules, functions, screens) that can be broken down into lower levels of detail, you will 
have to decide whether to use a top-down or bottom-up approach for the development. 
Language
Criteria
Weighting
A
B
C
D
Maintainability
2
  3
  4
  3
  4
Support
4
  4
  5
  4
  4
HCI capability
5
  5
  3
  5
  3
Database  
  connectivity
4
  4
  3
  3
  3
Simplicity
4
  3
  4
  3
  5
Learning
1
  4
  5
  2
  2
  Score
–
79
76
73
73
Table 6.3  Example comparison table evaluating overall suitability of programming languages for a 
project

	
6.10 Top-down and bottom-up development
145
These development approaches are applicable to third-generation languages (where the 
software may be constructed with a number of functions, subroutines or procedures), 
fourth-generation languages, web-based applications and multimedia applications (all 
of which could be broken down into different levels of screens and subscreens from dif-
ferent menus). Figure 6.15, which is an example program breakdown structure, helps 
to illustrate the difference between these two techniques in the following sections. The 
program in Figure 6.15 is a data handling system that generates long- and short-term 
statistical results from a data set selected by the user.
6.10.2   Top-down development
In a top-down approach you work your way down through the program structure, cod-
ing successively lower level modules of the program until the entire system is complete. 
You can achieve this in one of two ways – vertically or horizontally. In vertical top-down 
development you work down each branch as far as you can go before moving back up 
through the structure and working your way down again. In Figure 6.15, a vertical top-
down approach would lead you to code the modules in the order shown in Table 6.4.
Horizontal top-down development involves progressively coding an entire level of 
the system before moving down to the next level and so on. Table 6.4 shows how the 
modules would be coded in the example program shown in Figure 6.15.
Figure 6.15 An example program breakdown structure
Order
Vertical  
top-down
Horizontal 
top-down
Bottom-up
1
Main Menu
Main Menu
Long-Term Analysis
2
Data Entry
Data Entry
Short-Term Analysis
3
Data Analysis
Data Analysis
Plot Graphs
4
Long-Term Analysis
Results Output
Save Results to File
5
Short-Term Analysis
Long-Term Analysis
Data Entry
6
Results Output
Short-Term Analysis
Data Analysis
7
Plot Graphs
Plot Graphs
Results Output
8
Save Results to File
Save Results to File
Main Menu
Table 6.4  Order of development for different approaches for example program shown in Figure 6.15

	 Chapter 6 ● Software development 
146
Vertical top-down development attempts to get particular components of the system 
working early rather than providing an overall working system. For example, in Fig-
ure 6.15, we would have the Data Analysis section of the system in place before any work 
on the Results Output section was even started. A horizontal top-down approach would 
test the look and feel of the system, only adding in lower detail when an entire layer of 
functionality was completed. For example, in Figure 6.15 we would get an idea of how 
the Main Menu worked and how the three main options (Data Entry, Data Analysis 
and Results Output) would look, even though they would not actually work, before we 
began work on the lower working levels.
To test your system as you proceed with a top-down approach, you would have to 
develop a number of stubs to replicate the behaviour of lower level components of the 
program before they are actually written. According to Knott and Dawson (1999: 162) 
a stub can be:
● a dummy routine that simply returns, doing nothing;
● a routine that simulates the behaviour of a module by returning constant values;
● a routine that simulates a module by asking the user to input suitable return values.
The advantages of using a top-down approach are that a working version of the system 
is produced quickly, enabling the user to get an idea of the overall look-and-feel of the 
system. In addition, by providing a working system early the user can spot any serious 
omissions in the top level design of the system. However, there are some drawbacks to 
this approach. First, some of the ‘difficult’ components of the system will probably be at 
the lower levels. Leaving these until later may prove costly if they lead to problems that 
are difficult to overcome. Second, as lower levels are often concerned with data input 
and output it may not be possible to get a feel of how the system is working until these 
components are written and the system is able to handle appropriate data.
6.10.3   Bottom-up development
The bottom-up approach is the opposite of the top-down approach in that you begin 
by coding the lowest levels first before bringing these components together to produce 
the fully working system. For example, in the case of Figure 6.15, you might begin by 
working on the Long-Term Analysis component of the system first. This may involve the 
development and implementation of a complex algorithm so you might want to ensure 
that you can get this working sooner rather than later in your project. You will prob-
ably understand that the higher level components (for example, the Main Menu) will be 
easy to complete, so it would make sense to tackle the harder parts of the system first 
rather than leave these until the end. Applying a bottom-up development approach to the 
program in Figure 6.15 results in coding the modules in the order shown in Table 6.4.
As you continue to build the lower level components of your system you need to con-
sider how you will bring these together in the final system. This should be done incre-
mentally, where the components are added to the system as they are completed and the 
system ‘grows’ over time. However, before a module is added to the system it should be 
tested in isolation to ensure that it behaves in the way it is intended. Quite often, develop-
ers will produce test harnesses – structures of code that enable lower level modules to be 
tested in isolation. However, these structures take time to write and you may be better 
coding higher levels of the system to act as harnesses to save time.

	
6.11 Verification, validation and testing
147
Although the bottom-up approach enables you to test out the lower levels of detail in 
your program sooner, it does have a number of disadvantages. For example, there is no 
visible system until the end of the development when the higher levels are developed. 
This can mean that progress appears slow and may mean that any major design omissions 
are not spotted until near the end of the project when it is too late.
In theory you could swap the implementation of some modules around and still be 
pursuing a particular top-down or bottom-up development approach. For example, there 
would be no harm in swapping over the implementation of Long-Term Analysis and 
Short-Term Analysis. In this case the Short-Term Analysis function may be more difficult 
to implement, so you might want to tackle this sooner in order to get it working. You 
will probably want to complete Data Entry before Data Analysis (although in theory they 
could be swapped in any approach) as you will want to have ‘read in’ some data to work 
with before you can implement and test the Data Analysis and its subfunctions. In practice 
you should mix and match the approach to the development you are undertaking. It may 
be appropriate, for example, to code some components from the bottom-up (to test out 
a difficult algorithm or routine) and then tackle the remainder of the system top-down 
(to provide the user with a tangible view of the system overall). Once again, whatever 
you decide to do, you should be able to justify this to your supervisor and examiners, and 
you may have to include some discussion on your chosen approach in your final report.
• 6.11 Verification, validation and testing
6.11.1   Introduction
There are three ways that you can deal with errors in your program.
	 1.	 Prevent or avoid introducing them in the first place. You achieve this through 
practice and experience, and following a development process such as those out-
lined earlier.
	 2.	 You can detect and remove the errors. You should hope to do this as early as pos-
sible as the longer errors remain in your code the greater the impact they will have 
and the greater effort will be required to remove them later when the code has grown 
even more. Verification, validation and testing (VV&T) are concerned with this issue.
	 3.	 You can tolerate them. There may be a certain level of quality that your client, 
user, supervisor and examiner are willing to accept or tolerate. You will know 
from your dealings with them what is acceptable and what is not. If a high level of 
quality is required it may be better to reduce the scope of your system to minimise 
the number of errors within it. However, if your user is demanding a high level of 
functionality, they may be willing to compromise a little on quality to get what they 
want. It is probably better to have an 80% functional system working 100% correctly 
than a 100% functional system working 80% correctly – the former appearing much 
more professional and robust. In addition, in the former case, the remaining 20% 
of functionality you have left out could always be identified as further work in your 
report (and the 20% of problems in the latter case may take a long time to sort out 
if the code is badly written). Discuss these alternatives with your supervisor and 
client so that an appropriate balance can be reached.

	 Chapter 6 ● Software development 
148
Of these three options, this section is concerned primarily with VV&T which are dis-
cussed in the following sections. We finish with a short section on evaluation which goes 
further, in academic projects, than VV&T.
6.11.2   Verification
Verification is the process of checking that we are performing our development correctly. 
In other words, are we sticking to our project plan and are we performing the stages of 
the development process properly? For example, looking at the conventional waterfall 
model, verification involves checking that we are performing each of the stages correctly 
– by looking at what we know before a stage commences and whether (when we have 
completed that stage) that stage produces the things we would expect to the right level 
of quality. For example, after putting together our program’s specification we would 
expect our design stage to produce an appropriate set of design documents based on this 
specification. Boehm (1979) summarises verification as:
Are we building the product right?
You can use meetings with your supervisor to verify your development process. For 
example, you may identify the completion of each stage in your development as a mile-
stone and use this as a verification point with your supervisor.
6.11.3   Validation
While verification checks that you are developing your system correctly, validation is 
checking to see if that system is really what the client/user needs at all. Referring back to 
Figure 6.2, you will remember that a user’s problem is not stationary and will evolve over 
time as you undertake the project. Validation is concerned with revisiting the require-
ments with your user at regular intervals and checking that you are still developing what 
your user needs. Certainly if the user was naïve or had limited understanding of the 
problem, validation becomes vitally important to ensure that you eventually deliver a 
system to them that solves their problem. In a similar definition as before, Boehm (ibid) 
neatly summarises validation as:
Are we building the right product?
Validation will also include a deeper evaluation of your system when it is finally com-
pleted. For example, you should, if possible, evaluate your system against other similar 
systems – how is yours better, worse, different? How does it compare with commercial 
software systems, freeware and others? How will your system improve things for the 
­client/user – what impact do you see it having? Is your system developed from an existing 
system? If so, what enhancements does it include and what benefit are these to the user? 
Does your system include any innovative aspects – new algorithms, coding techniques, 
user interface designs – that can be applied in other areas?
These kinds of evaluation show that you are thinking much more deeply about your 
project. They provide your project with academic content – a deeper insight into the 
project than the mere writing of a piece of code.

	
6.11 Verification, validation and testing
149
6.11.4   Testing
Testing refers to the testing of the program itself to see if it works or has any bugs or 
errors within it. You can test your program as you go along, testing individual compo-
nents before bringing these together into the whole system which must also be tested 
thoroughly. Testing can take place at a number of levels.
● Unit testing – of individual modules. You may have to build some form of program 
harness to test these subcomponents.
● Class testing – of individual classes in OO programs. You would check to see if the 
class created objects correctly and the behaviour of class and instance data methods 
was as expected.
● Integration testing – of subsystems and the system as it is drawn together. Do the 
components of the system interact correctly?
● System testing – this is the final testing of the complete system against the specification 
and possibly the user manual.
● Acceptance testing – by the client/user with or without you present. They will be 
interested in how the system operates in its live environment, with real data and per-
forming in real time under normal working pressures.
● Regression testing – involves testing the system after you have made significant changes 
to ensure that new bugs, not present in previously working parts of the system, have 
not crept in as a consequence of the change. Regression testing is particularly important 
when working on group projects where individual members of the team are developing 
different parts of the system. It is important to ensure that, as components are integrated 
and members of the team work on different parts of the system (perhaps not understand-
ing how other programmers implemented certain parts of the system), new errors are 
not introduced and/or old bugs are not reintroduced.
You should test your code both statically and dynamically. Static testing does not 
involve running the program but inspecting the code (either on screen or a printed copy) 
or the designs, specifications, or other documentation (for example, the user manual). 
This technique can be used to assess the content and level of comments in a program, 
the scope and declaration of variables, the overall structure of the program, how the 
program matches the design, and the layout of the code (have you used tabs to indent 
statements, line breaks to separate different sections of the program?).
Dynamic testing involves running the program in order to identify any errors. In 
large software developments, dynamic testing involves white-box and black-box testing. 
White-box testing means you know how the code is programmed and structured so that 
you can test out potentially error-prone parts of the system. Black-box testing means that 
you only know what the program is supposed to do, not how it is programmed to do it. 
For your own program testing you will be undertaking white-box testing as you know 
how the program is structured. However, you may wish to involve others in black-box 
testing of your software if you feel this is appropriate.
Some useful tips for dynamic testing are presented below.
● Create appropriate test data sets. Try to create test data for your program that 
include both extreme values and normal data. It may also be appropriate to generate 
test data that includes ‘bad’ data – i.e., data that the program would not normally be 

	 Chapter 6 ● Software development 
150
expected to handle (for example, text data instead of numeric data). How does your 
program cope with this? Does it need to deal with extremes or bad data, or can these 
anomalies be ignored (is the user ever likely to enter something like this)?
	
Boundary values and equivalence partitioning can be used to minimise the size of 
test data sets. Boundary values are input values at the boundaries of what the system 
is expecting. For example, if the system is expecting an input between 1 and 10, the 
test data should include 0, 1, 10 and 11, as well as a number in between (5, for exam-
ple). Equivalence partitioning splits the test data into categories (whatever might be 
appropriate) that represent different aspects of the data. You then need only test the 
program with one sample from each category rather than all the data.
● Break points. Many compilers allow you to insert break points into a program 
before it is run (alternatively, you could code them in yourself). This allows you to 
run the program part-way and inspect the values of variables at certain points. If 
your program is crashing you can use break points to ‘home in’ on the guilty portion 
of code.
● Dynamic data entry. You may wish to see how changes to variables affect your pro-
gram’s performance. Some compilers allow you to stop programs and change the 
values of variables before continuing. Alternatively, you may wish to include some 
statements in your code that allow you to enter a variable’s value part way through 
the program.
● Displaying variables and markers. You can add code to your program that informs 
you of the value of variables as the program is running and also how far the program 
has reached (for example, printf(“here1”)). This can be useful in tracking down faults 
or determining just how far a program has reached before crashing.
● Easiest versus obvious. When trying to find errors in your code you can either look 
at the obvious place the error might exist or you might quickly check something that 
is easy to check. From experience it is often the case that bugs can be quickly found 
simply by looking in the easiest places first. The alternative might be to spend a lot 
of time attempting to debug a complex part of the program when the problem lies 
elsewhere.
6.11.5   Who is involved with testing and evaluation?
Although you will be primarily involved with the testing of your own program, at some 
point you will need to get additional feedback on your program’s performance. Not only 
are you interested in whether you have identified and removed any bugs, but you will 
also be interested in whether the system meets the user’s needs, is the interface appropri-
ate, does it flow logically and so on. You will need to involve a number of people in the 
evaluation of your system and answer some of the following issues:
● The user(s). Is there going to be just one user of the system or many? If there are 
many, can you get an appropriate cross-section of users to look at your program and 
assess it? Will you be present during testing (known as alpha testing) or will you leave 
it to them to feed back their thoughts to you (beta testing)? Will you have a structured 

	
6.11 Verification, validation and testing
151
system test with them (where they look at specific parts of the system in order) or will 
you allow them just to ‘play around’ with the system as they feel fit? Are there specific 
parts of the system you want them to focus on? Will you gather feedback from them 
formally, through a questionnaire or interview, or informally?
● The client. Quite often the client and the user(s) of a system are not the same. For 
example, you may have developed a website for a company. While the company 
is your client, it is their (potential) customers who will be the users. In this case 
can you get access to any potential users of the system for evaluation? If the client 
is happy does this mean the user will be happy? If the client wants one thing but 
you feel (know) that the user requires something else, who should you attempt to 
satisfy?
● Novice. It might be worth getting someone who is a complete novice (in terms of 
both IT and/or the problem area) to look at your system. They may identify issues 
you had never considered. For example, simple things such as your colour-scheme or 
interface might be inappropriate; your system’s data input may be illogical, etc. This 
is sometimes referred to as naïve testing or hallway testing, because it is the type of 
test you might discuss with a casual acquaintance in a hallway while passing.
● Expert. Will you be able to get someone who is very familiar with the problem area 
or the type of system you are developing to evaluate it? They can be very useful in 
identifying technical issues with your system. For example, they may ask you if you 
have anticipated particular inputs occurring or whether your system can handle rare 
events that you had not thought of.
● Your supervisor. Is it appropriate to involve your supervisor in the assessment of 
your system?
● You. There are some drawbacks to testing your system yourself. You know how the 
system works and may not test it with data you know it cannot handle because you 
could not imagine anyone being so stupid as to enter such data. You may steer away 
from parts of the system you know to be weak (consciously or subconsciously). How-
ever, it is up to you to evaluate certain parts of the system – particularly the validation 
of your system as noted in the previous section.
As you can see there are a number of people who can be drawn in to the evaluation 
of your system. You should ensure that you select an appropriate subset of these and be 
able to justify why you did not test the system with a certain group. For example, your 
examiners would be keen to know why you didn’t get your website evaluated by potential 
users and only tested it on friends from your course.
All this evaluation will take time. You must make sure that when you plan your project 
you allow sufficient time for this evaluation to take place. Your project would be signifi-
cantly weakened if such an evaluation did not take place.
6.11.6   Test plans
As part of your development you may well want to put together a test plan. This will 
identify what aspects of your program you are going to test, what inputs you are going to 
make, how you expect your system to perform and how it actually performs. You would 

	 Chapter 6 ● Software development 
152
also use test plans to separate out testing the functionality of the system (i.e., does the 
application behave as the client/user intended – validation) from testing for errors/bugs 
(for example, if I enter this value, does the software deal with it appropriately?).
Table 6.5 presents an example test plan for a student project. It is based on the simple 
project outline in Figure 6.15. This test plan shows that you have put some thought into 
your system’s evaluation, the aspects that you feel are important and not merely tested 
it ‘on the fly’ as the program developed.
The test plan shown in Table 6.5 may have too much or too little detail for your own 
purposes. For example, the tests for Data Analysis – Long-term are rather broad. You 
may want to identify specific periods, test data or selections within this. This test plan-
ning is more useful if you have designed it from the start of your development when the 
system requirements were drawn up. If you design your test plan at an early stage you 
are more likely to test that the system is doing what the user wants it to do rather than 
designing the tests to match what you have actually developed.
Section
Test input
Expected 
result
Actual result
Comment
Main Menu
All option 
buttons
Correct 
submenu 
selected
Correct
Data Entry
Back button
Return to  
Main Menu
Fault – jumps 
to splash entry 
screen
Corrected –  
25/04/15
File selection
Selects 
appropriate file 
and displays 
on screen
File selected 
but also shows 
file directory
User happy 
with file 
directory being 
displayed
Selecting  
subset of data 
for processing –  
out-of-range 
selection
Error message 
showing user 
incorrect range 
selected
Correct
Select 
appropriate  
subset of data
Correct subset 
identified for 
analysis
Correct
Data Analysis
Select either 
long- or short-
term analysis
Correct 
analysis 
selected
Incorrect – both 
options go 
to long-term 
analysis
Corrected –  
25/04/15
Data Analysis –  
Long-term
Process data 
correctly on long-
term forecast
Calculates 
suitable long-
term results
Works for 
periods up to 
99 years
User needs  
50 years so this 
is acceptable
Table 6.5  Example of a system test plan

	
6.11 Verification, validation and testing
153
6.11.7   Miscellaneous testing types
The nature of your project may dictate that other factors are important and require 
additional types of testing.
● Volume testing. Will your system be handling large quantities of data or processing 
lots of numbers? Your program may work well during testing with a small data set, 
producing the correct results, but can it cope with the larger data sets that it might 
encounter after its release (or does the system crash or take too long to process the 
data)? Volume testing is used to assess the ability of a system to deal with large quanti-
ties of data. Even if you don’t have a large, real data set available for testing, you could 
soon generate a test data set using a spreadsheet, a text editor or a simple program 
you write specifically for that purpose.
● Usability testing. The interface to your system may be particularly important – for 
example, if you were developing a system to be used by partially sighted users. Usabil-
ity testing focuses testing more on how easy the system is to learn and use rather than 
whether it is fully functional.
● Installability. Your system may have been developed to run on different platforms 
– Macintosh, Unix, PC-based systems, tablets or phones. Installability involves test-
ing your program to see how easily it can be installed and run by users on their own 
systems.
● Recovery testing. Because your system may be handling inconsistent or error-
prone data it may be important that your system is robust and does not crash when it 
encounters such problems. Recovery testing involves testing how well the program 
recovers from ‘bad’ data, an overflow, a crash, etc. You can test your system in this 
way by generating ‘bad’ data that can be used during testing.
● Documentation testing. Your client/user may have requested comprehensive docu-
mentation to support your software and this may be assessed as part of your overall 
project mark. Documentation testing involves evaluating how good the supporting 
documentation is for your system. This can be performed by users, non-expert asses-
sors (naïve testers), the client, yourself and experts. It can be performed off-line (i.e., 
assessed without the software system to hand), in which case you will be checking 
for things like readability, layout and clarity; or online (assessed with the program to 
hand). During online testing you will be assessing, for example, how well the docu-
mentation supports the user in using the system, whether any tutorials match the 
program, considering if help is available if things go wrong and so on.
● Interface testing. This is particularly important in web development projects in 
which the user can be very critical of the overall look and feel of the site and has many 
other websites with which to compare it. The home page of a website is effectively 
the site as far as the user is concerned so getting this right is important. Interface 
testing also checks whether the system is usable from a functional perspective. The 
system you have developed may perform some quite complex, interesting functions, 
but if the interface is clumsy, difficult to use, or not intuitive it may well put the user 
off. You should consider reading guidelines on HCI principles when designing your 
system to ensure it is user-friendly and accessible.

	 Chapter 6 ● Software development 
154
6.11.8   Evaluation
Evaluation of the product you have developed goes further in academic projects than 
verification, validation and testing. Although the development of a working system may 
be the goal and an acceptable measure of success in industry, you will probably need 
to show more academic evaluation of your project to meet your degree requirements. 
Note that although the development of a software product on its own would not be an 
acceptable contribution at post-graduate level (PhD, for example – but a system may 
be developed as part of the research), it would be appropriate at undergraduate level 
provided it was evaluated effectively. In this context, evaluation covers more than the 
testing of the product or getting feedback from the client and users. Evaluation should 
include a critique of the system’s limitations, its potential application in other areas, 
possible extensions to the system and what its contribution is to the existing software 
base. Evaluation should contextualise the program with respect to other systems that 
are available. How is this system different? How is it better? How does it perform cer-
tain tasks compared to its rivals? These are the sort of academic questions that should 
be addressed by an evaluation which goes much further than an industry-based project 
would ever achieve.
• 6.12 Quality
6.12.1   Introduction
In Chapter 4 we introduced a generic model of the project process and showed that any 
product produced by a project will have a certain level of scope and quality (see Fig-
ure 4.1). Although scope (what the product does, its functionality, capability, etc.) has 
been defined separately, it is sometimes subsumed within the concept of quality – being 
one of the aspects that define a quality product. In student projects quality can refer to 
a number of things – the quality of the report (content and presentation), the quality of 
the underlying research, the quality of the contribution the project has made, the quality 
of a software system developed, etc. While the quality of your project is assessed by the 
examiners and measured by the mark you receive, in this section we focus on software 
quality and how software development projects control and manage quality. To begin 
this discussion we need to determine what is meant by software quality as it means dif-
ferent things to different people.
6.12.2   What is software quality?
The first point to note is that a high-quality product might not necessarily be appropriate 
for our needs. For example, a small system with limited functionality may provide just 
the functionality a user needs, whereas a more complex system (with lots of ‘bells and 
whistles’), although doing what a user requires, might be so complicated as to make it 
unworkable.

	
6.12 Quality
155
It is generally accepted that an appropriate definition of software quality is fitness for 
purpose. This does not mean the product has to be of high quality.
When a customer buys a product they are selecting that product based on a number 
of quality criteria. Some of these criteria will be more important to some customers than 
others – some criteria may, for example, be of no concern at all.
● Product quality. This is probably the most important quality characteristic that 
buyers will focus on. In terms of product quality the customer will be concerned 
with the product’s fitness for purpose – does it do what I need it to do? Does the 
product provide any additional functionality that I would like (in addition to my 
needs)? How reliable is the product – will it last me or will it need lots of mainte-
nance, support, repairs, replacement, etc. (including spare parts, batteries, etc.)? Is 
the product environmentally friendly (will it have any impact on the environment 
through its every day use and eventual disposal or replacement)?
● Company quality. This refers to a consumer’s confidence in the company. How well 
will they deal with any problems I have? What is their returns policy? Will I be able to 
get a refund or exchange a faulty or unsatisfactory product? What is the company’s 
reputation?
● Business quality. These days consumers are very keen on knowing the environmen-
tal impact of the supplier. Is the company ethically sound (is the product produced 
by slave labour overseas, for example)? What has been the environmental and social 
impact of the manufacture of the product?
● Value quality. What is the product worth? What am I willing to pay for it? Does it 
represent good value for money or does it seem expensive for what it is? If it is expen-
sive, is there an alternative that might satisfy my needs?
6.12.3   Quality assurance and quality control
Quality assurance is about getting procedures in place before a system is developed 
and delivered to ensure the system is of acceptable quality. By getting an appropriate 
development process in place beforehand, and monitoring and controlling this process, 
Example
Take the example of a top-performance sports car worth many tens of thousands of 
pounds. You could argue that this was a high-quality car, but in terms of fitness for 
purpose it might be sadly lacking. If you needed to pop to the shops or visit your friends 
your top performance sports car may well be impractical (small boot space so you could 
not buy much or carry a lot of luggage, high petrol consumption, expensive to insure, 
maintain, etc.). In terms of fitness for purpose it would not be very good (unless your 
purpose was to drive quickly and look good).

	 Chapter 6 ● Software development 
156
you will be laying the foundations towards producing a reasonable system. Without an 
appropriate set of processes in place, producing a system of reasonable quality will be 
subject to chance.
Quality control is about measuring quality of the product as it is completed and 
ensuring it meets the quality standards defined. Verification, validation and testing were 
looked at in Section 6.11. These techniques are a type of quality control – checking the 
system you have produced meets the requirements, works well and meets the needs of 
the client.
6.12.4   Quality standards
In the development of commercial software systems businesses will invariably use (and 
be certified to) a quality standard of one kind or another. In this section we briefly discuss 
three of the most common quality standards that are used by organisations in product 
(and particularly) software development.
● ISO 9000. ISO 9000 is a series of standards for a quality management system. If 
a company is ISO 9000 certified it means the company (following an independent 
audit) has a quality management system in place. This quality management system 
should, among other things, ensure that adequate records are kept of the business 
processes (in terms of definition and monitoring and control), processes are continu-
ally reviewed and there is a quality control process in place. ISO 9000 includes a series 
of standards such as ISO 9001 (aimed at companies that design, develop, manufac-
ture, supply and maintain products) and ISO 9004 (covers continual process improve-
ment). Although not specifically aimed at software, the ISO 9000 series of standards 
is often adopted by software development companies to improve their performance 
and marketability.
● ISO 9126. Introduced by the International Organisation for Standardization (ISO) in 
1991, ISO 9126 defines six quality characteristics for software. These include: func-
tionality, reliability, usability, efficiency, maintainability, portability. These charac-
teristics can be broken down further depending on the nature of the system being 
developed (for example, reliability can be broken down into fault tolerance, recover-
ability, etc.). By applying numerical ratings to each of the characteristics (using Lik-
ert scales, for example), it is possible to obtain relative measures of quality between 
systems.
● Capability Maturity Model (CMM). Unlike the ISO 9000 series of standards, 
CMM was developed specifically for the software development industry. Devel-
oped by the Software Engineering Institute it focuses on software process improve-
ment. Organisations are graded on a five point scale according to their software 
process maturity. The levels range from 1, referring to organisations that have no 
defined software process in place and develop systems more by luck than judge-
ment, to 5, which applies to organisations that not only have a well-defined process 
in place but also invest in process change management.
Although these quality standards are aimed at organisations, some of the principles 
underlying these standards may be applicable to your own software development 

	
6.15 Exercises
157
project. For example, the principles of ISO 9000 in which you should have effective 
and recordable development processes in place is good practice to follow. The qual-
ity characteristics of software defined by ISO 9126 can be adapted to your own system 
evaluation. The principles of CMM in which you manage your development process and 
look at ways of improving your processes are also worthwhile.
• 6.13 Summary
This chapter has introduced the following topics:
● software development processes;
● the generic software development life cycle;
● the original build-and-fix model;
● the conventional stage-wise and waterfall models;
● the incremental model;
● prototyping models – throw-away and evolutionary;
● choosing an appropriate development approach for your own project;
● top-down and bottom-up development;
● verification, validation and testing your software;
● software quality.
• 6.14 Further reading
Dawson, C.W. and Dawson, R.J. (2014) ‘Software development process models: A tech-
nique for evaluation and decision making’, Journal of Knowledge and Process Manage-
ment, Vol 21(1), pp. 42–53.
Hughes, R. and Cotterell, M. (2009) Software project management (5th Edition), 
McGraw-Hill, London.
Turner, J.R. (1993) The handbook of project-based management, McGraw Hill, Maid-
enhead, UK.
6.15 Exercises
	 1.	 What development approach would be suitable in the following cases?
	
i.	
You are undertaking a project that has been specified quite precisely by your 
project supervisor. The project requires you to develop a software system, 
written in C++, to solve a problem specified by your supervisor. You will meet 
your supervisor every one or two weeks to discuss progress.

	 Chapter 6 ● Software development 
158
	
ii.	
You are undertaking a research-oriented project that involves the develop-
ment of a new algorithm to solve a particular mathematical problem. When 
you complete your project you will be expected to present a software system 
that incorporates this algorithm and illustrates how it works.
	
iii.	 You are developing a website for a business client that will be used as a market-
ing device to ‘sell’ that company’s products to potential customers.
	
iv.	 Development of a website for a local sports club.
	 2.	 Given the following, simple, software specification, produce a set of test cases 
for the resulting software system. What kind of testing would you undertake for 
this?
The system must convert Celsius into Fahrenheit temperatures. The user should enter 
a numeric value (representing the temperature in °C) and the system should respond 
with the equivalent temperature in Fahrenheit.
	 3.	 Identify any omissions in the simple specification above.
6.16 Action points
● Choose an appropriate development approach for your own project. If you are already 
pursuing your project, is your approach appropriate in light of what you have learnt 
from this chapter?
● Justify why you have chosen the development approach you are using in your own 
project.
● Think about how you will evaluate your chosen development approach at the end of 
your project.
● Put together a test plan for your own project and discuss its content with your super-
visor. Have you gone into too much or insufficient detail?
● Think about how you will be evaluating your system towards the end of your project. 
Check that you have allocated sufficient time for this evaluation in your project plan 
and confirm that you have access to the right people to test your software when the 
time comes.
6.17 Solutions to selected exercises
	 1.	  i.	
As this project is quite clearly specified and you will be having regular meetings 
with your client (your supervisor), a conventional waterfall-type development 
approach could be used here. Alternatively, if the system can be broken down 
into a series of subsystems, you might consider an incremental approach, add-
ing components of the functionality as the project progresses and discussing 
these with your supervisor.

	
6.17 Solutions to selected exercises
159
	
ii.	
An experimental prototype would be suitable in this case to explore any feasi-
ble ideas you have and how these might be implemented. This might be writ-
ten in a 3GL such as C++ or Java. This prototype may well be discarded, when 
you are satisfied that the algorithm works, and the final system can then be 
developed in a more graphical language (for example, Visual C++™) so that a 
user-friendly front end can be developed for the system.
	
iii.	 An evolutionary prototype would be suitable in this case as the requirements 
are quite broad.
	
iv.	 Evolutionary prototyping would be suitable in this case. The technicalities 
of the project are fairly basic but the user-interaction issues are paramount. 
Alternatively, you might wish to develop two or three throw-away prototypes 
at the project’s outset using an alternative platform from the final system (for 
example, page mock-ups in a drawing package) to provide the client with some 
different interface ideas. Having chosen a suitable interface you could then 
move onto an evolutionary approach to develop the final system.
	 2.	 As you do not know how the code was written this is black-box testing; you only 
know the overall functionality of the software. You should therefore run the pro-
gram to test it with a test set of input values. During these tests, have you included 
tests for the following?
● Do you test a number of ‘reasonable’ input values – for example, 0, 10, 100, 
−1, −10, −200? Do these provide the correct results?
● Do you test for extreme values – for example, values below −273.15, values 
above say 10,000? How should the system react in these cases?
● Have you tested real and integer values?
● Have you tested non-numeric data entry – for example, characters or strings?
● Have you tested the sensitivity of the system – for example, does 1.0 produce 
the same result as 1.000001?
● Have you tested negative and positive values (for both the input and the 
output)?
	 3.	 If you were given this simple specification, there would still be a number of ques-
tions you would need to answer in terms of its implementation. You could make 
a number of assumptions yourself as to what is appropriate or you could return to 
the user for clarification. In some cases the user may be happy to respond to these 
questions; in other cases they may be annoyed that you cannot make simple deci-
sions for yourself – so tread carefully.
Although we haven’t even touched on the interface for this system in this 
example (which would throw up another series of questions), the following are 
things you would need to clarify:
● How should the system deal with incorrect data (for example, character 
input, data outside the acceptable range, etc.)?
● Should the system ask the user for another number after it has provided a 
result or should the program terminate?
● Should the system end after an incorrect input, or should it allow the user to 
have another go?

	 Chapter 6 ● Software development 
160
● If it allows the user another go, how many times should it allow this?
● How should the results be displayed – for example, how many decimal places 
should be displayed? Should °F or Fahrenheit appear after the result?
● What range of inputs should the system cope with? Does it need to provide a 
message to the user informing them of this?
● How accurate/sensitive should the system be? This largely depends on the 
sensitivity of the input data – so how many decimal places are allowed for the 
input data?
It is worth noting that even a simple program specification such as this has a 
significant number of ambiguities or areas where clarification is needed. Imagine 
the number of questions that will arise from much larger specifications.

	
	
	
161
CHAPTER
7
Aims:
To introduce the skills needed to manage yourself and your project effectively as it 
is progressing.
Learning objectives:
When you have completed this chapter, you should be able to:
● Control the five elements (introduced in Chapter 4) in your project as it 
progresses.
● Understand problems that can occur and be aware of ways of dealing with 
them.
● Manage your time effectively.
● Know how to use your supervisor effectively.
● Work efficiently in a project team.
● This chapter is relevant for both undergraduate and postgraduate 
projects.
● Section 7.5 (Working in teams) can be skipped by those  
undertaking research degrees and those not involved with  
group work.
Controlling your project

	 Chapter 7 ● Controlling your project 
162
• 7.1 Introduction
7.1.1   Overview
Although you may have proposed an interesting and worthwhile project and planned it 
well, once your project is underway it needs to be carefully managed and controlled or 
it will fall apart. You cannot assume that, having completed a detailed project plan and 
a solid literature survey, the project itself will be plain sailing and you can relax. You 
need to be aware of problems that might arise, you need to remain motivated, you need 
to manage your time effectively, and you need to make effective use of your supervisor 
and deal with other stakeholders appropriately. This chapter deals with these issues.
7.1.2   Getting started – project initiation
Once you’ve planned your project (the focus of Chapter 4) you are ready to start work 
on the actual project itself (the product-development activities of Figure 4.1) – called 
project initiation or getgo. In large industrial projects initiation can be a major task. It 
might involve a launch workshop, where stakeholders are introduced, the project plan 
is discussed and work is assigned. It might involve bringing the project team together, 
inspiring a shared vision for the project, establishing a project office, working practices, 
booking rooms and other tasks. Although these issues are important in large projects, 
there are still some ideas you can adopt when you start work on your own project.
You will want to establish some working practices, a work area or working envi-
ronment in your home or at your institution (perhaps with a notice board on which 
you can pin important items – your project plan, for example – and a white board 
where you might note down ideas or list tasks to complete). You will want to set up 
an initial meeting with your supervisor and establish your relationship and rules of 
engagement with them (how often you are going to meet, how you will communicate, 
what sort of things you can ask of them and so forth). If you are undertaking a project 
for a client you will want to meet with them and establish your ground rules early 
(similar to your first meeting with your supervisor, but perhaps contact and access to 
them might be more critical). If you are working on a group project you will want to 
establish the team structure (leader, secretary, etc.), communication links, meetings, 
etc. A discussion on the issues surrounding project teams is presented in Section 7.5.
It is also a good idea to put together a project folder. This will contain important 
information such as your project plan and risk plan (see Chapter 4), your PID (project 
initiation document), contact details of other team members if you are working on a 
group project, etc. It is also where you might keep your references or useful papers, 
articles, newspaper/magazine clippings and other documentation. You might also want 
to define some programming standards and some report standards that you will adhere 
to. You may also want to set up a work area on your computer (for example, work direc-
tories, folders for references, the report) and arrange passwords and access to whatever 
computer resources are required.
Once you have established your project in this way you are ready to move on to actu-
ally doing the work. Controlling your project as you now progress is the focus of this 
chapter.

	
7.1 Introduction
163
7.1.3   Managing the five project elements
In Chapter 4 we saw that a project consists of five elements: three consumables – time, 
resources and money (which are used to develop the project’s product); and two attrib-
utes of the project’s product: scope and quality. These are the five elements that need to 
be managed and controlled as your project is progressing.
Within academic projects students will often argue that time is the most important of 
these elements. It is an element that you will always seem to be in need of. In virtually all 
academic projects you are limited in the amount of time you are allocated and, consequently, 
it has limited flexibility that you can control. All you can really do with respect to this element 
is to manage the time you have more efficiently – generally speaking, you cannot increase 
the amount of time you have available.
Money (cost) is a factor over which you have little control. However, in most academic 
projects, costs aren’t usually a concern. All the facilities you require are generally avail-
able; if they are not, then your project would probably not have been accepted in the 
first place. If you require additional hardware, software or literature material you will 
either be provided with these or not – it is probably beyond your control to arrange their 
procurement and it is something your supervisor will normally be responsible for.
Quality and scope are those elements over which you have most control and appropri-
ately have the greatest responsibility for. Quality refers to the quality of your project itself; 
how good it is? Is it at the right level (postgraduate or undergraduate level)? Is it of an 
acceptable standard for your course? Is it worth an Honours degree or just a Pass degree?
Whereas quality can be measured by the depth of your project (for example, how 
well you develop or investigate a particular aspect of study), scope is an indication of its 
breadth. Sometimes scope is viewed as an attribute of quality. It represents the final out-
come of your project, what it actually achieves, its contribution, magnitude and its limits.
Resources are probably the most important element of all. Without resources there 
will be no project. In this case interest falls on the human resources that are available 
– i.e., you, your supervisor and possibly a project team. Making effective use of your 
supervisor is discussed in Section 7.4. In some cases you might be working in teams 
where colleagues need organising, tasks need to be assigned, and people’s contributions 
drawn together. Working in teams is the subject of Section 7.5. For individual projects, 
organising yourself boils down to your ability to manage your own time. Managing time 
is discussed in Section 7.3.
Figure 7.1 emphasises the leading role resources play with all these five elements 
– shown at the crown of this diagram. It is through your own organisation that the ele-
ments within your project are balanced with respect to each other and with respect to 
your project’s aims and objectives. The figure emphasises the fact that each of these 
elements is related to all the others in some way and trade-offs can be made between 
them. How trade-offs are made between elements is discussed in the following section.
7.1.4   Project control
The five project elements require managing and controlling through the five main project 
stages identified in Chapter 4: definition, planning, initiation, control and closure. Focus 
on these five elements changes as the project progresses through these stages. For example, 
during your project’s inauguration you won’t be too concerned about time and will probably 

	 Chapter 7 ● Controlling your project 
164
concentrate more on identifying your project’s scope. During this stage you will feel that 
there is an eternity before the final report is due to be handed in. You may have many ideas 
you want to pursue and you might wish to investigate and develop various aspects within 
the field of computing. However, two weeks before you are due to submit your dissertation, 
time will suddenly become a very rare commodity and a serious concern to you.
As your project progresses into the initiation and control stages emphasis moves from 
project management activities to product-oriented activities. In other words, you will 
begin to focus on the actual work of your project itself and direct your efforts towards 
investigating, developing and producing your project’s deliverable, whatever you have 
identified this to be.
As your project progresses through these working stages you will still need to perform 
certain project management activities. You should, for example, monitor and control 
all your project’s elements with respect to your project plan. You will control time by 
checking to see if you are completing tasks in line with the times planned on your Gantt 
chart. If you are, you are on schedule and should have no worries. If not, you might be 
falling behind schedule and you will need to do something about it. Not only should you 
monitor time as your project is progressing, but you should also keep an eye on your 
project’s scope and quality. Are you, for example, meeting the objectives of your project 
satisfactorily or have you had to make some compromises along the way?
Project management will often involve deciding how to trade each of the five project 
elements off against one another as your project progresses. For example, you could 
reduce the scope of your project in order to improve its quality. Conversely, you may 
decide to expand the scope of your project (for example, by increasing the functional-
ity of a program you are developing) at the expense of some quality (by introducing 
more bugs). Time is always limited so you will often find yourself trying to trade it with 
other elements – for instance, saving time by reducing quality and/or scope, particu-
larly towards the end of your project. However, you must always ensure that you do not 
Figure 7.1 Balancing five project elements against one another

	
7.2 Dealing with problems
165
compromise your project and submit, on time, what you feel has been your best effort. 
Table 7.1 summarises the trade-offs you can make between those elements over which 
you have control (i.e., all but cost).
• 7.2 Dealing with problems
7.2.1   Introduction
In Chapter 4 a risk management process was introduced that enables you to identify, 
prioritise and control risks in your project. In this section we look at specific things 
that can go wrong with projects and ways of dealing with these issues. If your project 
progresses to completion smoothly, without any problems, you are probably very lucky 
indeed. Virtually all projects encounter problems at one stage or another; whether they 
are performed by leading academics at the cutting edge of science, first year undergradu-
ate students pursuing a small assignment, or large industrial project teams whose work 
can last for several years. It is not really the nature of the problem that you encounter that 
can lead to project failure, but how you deal with the problem that counts.
The key to successfully overcoming any problems is not to panic, tackle them objec-
tively and professionally and make best of the situation. Problems don’t usually solve 
themselves. A problem will often require some action from you in order to be resolved. 
The following six points encapsulate perhaps the most likely problems you will encoun-
ter when performing your project, with suggestions on how they might be overcome.
7.2.2   Weakening
Weakening is something that can happen at any stage of your project. It can stem from 
a lack of motivation, a lack of confidence in what you are doing, losing your direc-
tion, working yourself too hard and burning yourself out, or the feeling that you have 
Time v Quality
Save time by reducing the quality of your product. If you wish 
to improve your project’s quality this will clearly take longer.
Time v Scope
Save time by reducing the scope of what you intend to do. 
Increasing the scope of your project will take longer.
Scope v Quality
Improve quality by reducing scope; reduce scope to improve 
overall quality of the project’s product.
Resources (i.e you) v Time
Improve your own time management to give yourself more 
time on your project. If you want to spend time doing other 
things, you will have less time to spend on your project – see 
Section 7.3 ‘Managing your time’.
Resources v Quality
Improve your time management so that you can spend more 
time on your project and improve its quality.
Resources v Scope
Improve your time management so that you can spend more 
time on your project and improve its scope.
Table 7.1  Summary of trade-offs between the elements over which you have control

	 Chapter 7 ● Controlling your project 
166
attempted to do far too much in the time available. Weakening is something that can usu-
ally be traced right back to the first stage of your project – its definition. Did you decide 
to pursue a project you weren’t really interested in? When you planned your project did 
you plan to do too much? Were the aims and objectives of your project too vague leading 
you to lose faith in what you are doing because you don’t appear to be heading anywhere?
The first solution to dealing with this problem is clearly to address its root cause; that 
is, tackle it at your project’s outset. Make sure that you select a topic in which you are 
really interested, define and plan it thoroughly and ensure that you have planned some 
flexibility into your project so that you can expand or contract its scope depending on 
the time available. This can help to address weakening caused by feeling you are doing 
too much. Think about ways you can reduce the scope of your project without compro-
mising its quality. Alternatively, deal with large chunks of work by breaking them down 
into smaller, more manageable pieces.
Another way to overcome a lack of motivation towards your work is to move on to 
something else. It may be that you are getting bogged down with a particular part of 
your project and are working at too fine a level of detail – you have spent too long on 
one aspect and ground to a halt with that component. Try to identify from your project 
plan other areas of work you can do instead. You may then return to the area you are 
struggling with later when you are refreshed from your break. If you have come to a 
halt because of a lack of confidence in what you are doing, meet with your supervisor to 
discuss this as soon as possible. They may well provide the encouragement that you need 
and highlight the contribution your work is making – something you may have lost sight 
of as you worked on the fine detail. Other ways to deal with weakening are addressed in 
Section 7.3 (Managing your time), where procrastination is discussed.
7.2.3   Personal problems
Over the period of your project, be it six months, a year or more, chances are that you will 
experience a personal incident of one kind or another. This can range from happy occa-
sions such as getting married, having a baby, a significant birthday celebration and so on, 
to sadder, more difficult events to cope with such as illness, family bereavement, splitting 
up with your partner, etc. Other personal ‘problems’ you might encounter include mov-
ing house, changing jobs, being selected for a university sports team and so on. These 
kinds of changes might be good or bad but one thing is certain, they will be a drain on 
your time and your emotional energy. Although it is beyond the scope of this book to 
discuss how you deal with these problems from an emotional level, their impact on your 
project and what you can do to deal with this impact is of concern.
The most important thing to do in any of these situations is to tell somebody what has 
happened – be it your supervisor, personal tutor or course leader. Your own institution 
should have guidelines on whom to approach first with problems of different natures 
and you should follow these suggestions. You may then be guided towards other depart-
ments within the university that can deal more effectively with your difficulties; the 
students’ union, counselling services, local doctors, hospital or chaplaincy and others.
Chances are that your institution will also operate some form of ‘extenuating circum-
stances’ or ‘impaired performance’ procedures. These procedures enable you to inform 
your institution officially of what has happened, enabling them to consider how to deal 
with you and possibly how to help you with your project. This will probably involve 

	
7.2 Dealing with problems
167
completing a form and providing evidence of some kind, such as a doctor’s note or 
death certificate. Note, however, that your institution will have guidelines on what is an 
acceptable reason for claiming extenuating circumstances – such as illness – and what is 
not – for example, going on a holiday with your friends for two weeks during term time. 
Also make sure that you follow your institution’s guidelines on this issue. For example, 
some institutions require that these sorts of claims need to be made within a certain time 
frame. Your supervisor should advise you on the regulations.
By following your institution’s procedures you are at least going some way to deal-
ing with your problem. Not only will they be able to help you on an emotional level (for 
example, with counselling services) but you may well be awarded extensions to complete 
your work. Above all remember that if you do not let anyone know what has happened 
then nothing can be done to help.
7.2.4   Hardware failure
You will, no doubt, be using a computer to a greater or lesser extent in your project. It 
might be used simply to word process your final report or it might be used throughout 
the entirety of your project as you develop a program or use it to analyse data. Whatever 
the case you may well find that the computer you use fails and that data and files you are 
using are lost or erased forever.
The only answer to these kinds of problems is to make numerous and frequent back-
ups. These can be made onto memory sticks, so you can take them away with you, onto 
your institution’s file server or the cloud. It is up to you how often and how many back-up 
copies you make – you know the reliability of the system you are using. However, to make 
no back-ups at all is ill-advised. Certainly, towards the end of your project, daily back-ups 
will be essential. Losing an entire week’s work at the start of your project is not too seri-
ous, but at the end it would be disastrous. Take the following example as a cautionary tale:
Example
Jane was a final year undergraduate student on a computer studies course and kept her 
work backed up on memory sticks that she carried around with her. She was reasonably 
well organised and as such made three back-up copies of her work every day. One day, 
when she was working on her dissertation, she found that she couldn’t read any data on 
her hard drive – her PC had crashed. Fortunately, she had her back-up memory sticks 
with her and loaded one of these into her machine. The PC claimed the memory stick 
was unreadable and she tried one of the others. Again, the PC claimed that the stick was 
unreadable. At this point Jane realised something was terribly wrong with the machine 
she was using. Moving onto another machine and using her third back-up memory stick, 
she was able to save her work.
What had happened was that Jane’s PC had become infected with a virus and was eras-
ing anything connected to it. Had Jane only made two back-ups of her work she would 
have lost everything. Fortunately, with three back-ups, all was not lost and she was able 
to complete her project on time on another machine.

	 Chapter 7 ● Controlling your project 
168
7.2.5   Data availability
Data availability is often a problem with student projects. Either a journal or a book you 
require is unavailable, you can’t get hold of some data, you lose your contact in a local 
company where you hoped to perform a case study or you receive a poor response from 
some questionnaires you issued. Whatever the problem, your project looks as though it 
will suffer from a lack of available data.
In a similar vein to weakening discussed earlier, problems with data availability can 
often be traced back to your project’s early stages. If you had thought about your project 
more thoroughly during its inauguration, you might have identified that a book/journal 
was difficult to obtain, questionnaires were likely to prove unreliable and so on. Bear-
ing these things in mind you might well set up contingency plans at an early stage – for 
example, changing your project’s direction so that it doesn’t rely entirely on a particular 
set of data.
If, however, data availability problems only become apparent well into your project 
they must be dealt with there and then. Simply put, either the data are available or they 
are not. Begin first, with the help of your supervisor, considering whether you can obtain 
the information you require from another source – is there another company you could 
use as a case study, for example? Have you time to chase up the questionnaires you sent 
out or send out new ones? Does your supervisor or your colleagues have alternative data 
you could use? However, if no other options are forthcoming, the sooner you accept this, 
adjust your project and proceed the better.
7.2.6   Discovering your work/research has been done before
On a taught degree you will not be expected to make a contribution to 
world knowledge, but this is not the case for research degrees – particu-
larly for PhDs (see Chapter 5). At research degree level students often 
worry if their work is truly unique and is not merely repeating the work of 
others. They worry if the project they are pursuing has not been undertaken by someone 
else before and, as a consequence, are not making that contribution that is vital at PhD 
level (they are perhaps in the Demoralised quadrant of Figure 2.2).
The first means of avoiding this problem is to ensure that you have conducted a 
thorough literature survey in the first place. Not only should you read all the relevant 
journals and books associated with your topic area but you should find out about (and/
or attend) conferences in your field too. It is at conferences that cutting-edge work 
may be presented first and ideas are discussed that are not yet published elsewhere. Try 
to get hold of conference proceedings early and use the Internet to access conference 
schedules and programmes. Through these sources you will keep track of who is doing 
what in particular areas and where the latest thinking is heading. It is also useful to build 
up contacts with other departments, research groups and institutions who are working 
in your field. Through the literature, conference announcements and your supervisor, 
you should be able to identify the ‘key players’ in your field. Try to make contact with 
them and keep track of what they are currently working on. The Internet and blogs are 
usually a good source of information in this area.

	
7.2 Dealing with problems
169
If you are satisfied that the work you are doing is unique there is still a worry that 
someone else may publish your ideas/results first. One way to overcome this is to 
submit internal reports within your own department. Quite often departments have 
an internal report mechanism to which staff and research degree students can submit 
­working documents. There is then a time-stamped record of your work/ideas that you 
can refer to in your final dissertation, which shows that, despite someone publishing 
something similar, you had thought of the idea and got it into print first. If you have 
a good idea and some new results, however, the sooner they are in the (more) public 
domain the better. In this case you can refer to a public document which shows you 
were the originator of the contribution. Aim to submit your work/findings to confer-
ences at the earliest opportunity and prepare more detailed journal articles as your 
ideas mature.
At research degree level your supervisor should be an expert in your field of study. 
They should know about developments in the field and what contribution your work 
is going to make. Discuss with them any concerns you have with repeating the work of 
others – they should be able to advise you.
7.2.7   Other things taking priority
Your project will never be (and shouldn’t be) your only interest. You will have other 
subjects to deal with, coursework, your part-time or full-time job, a social life, a personal 
life and so on. All of these things take time and often you will find that your project takes 
second place to all of them at one stage or another. The only way to deal with this prob-
lem is through better time management. This is the subject of Section 7.3.
7.2.8   Results are disappointing
If you have gathered some data or performed some experiments, they may not come out 
as you expect or they may not appear to show anything new. This may be a result in itself 
that you can discuss equally as well. If you think more about the reasons why the results 
have come out as they are it may tell you more than you originally thought you knew. 
Perhaps consider performing the experiments or surveys earlier – to give you more time 
to deal with such an outcome – perhaps giving you time to conduct more experiments 
or broaden your survey. Remember the notion of research symmetry (Gill and Johnson, 
2010: 24) introduced in Section 3.3.3. If you have planned your research well the out-
comes should be equally valuable, whatever they happen to be. You should therefore 
aim, if at all possible, for balanced hypotheses.
7.2.9   Losing a client or company contact
If you are working for an outside client there is always a danger that you might lose con-
tact with them – the company may restructure, the client may leave or move to another 
department. You should plan for this eventuality at the outset and it may involve chang-
ing the scope of your project, as the following case study shows.

	 Chapter 7 ● Controlling your project 
170
7.2.10   Algorithm/technical failure
If you are developing a system that relies on the implementation of a complex algorithm 
or some technical aspect you have not encountered before it is a good idea to develop a 
technical prototype first (see Section 6.6.1). This will clarify, at an earlier stage, whether 
the project is technically feasible or not and will give you much more time to find a 
solution.
7.2.11   Scope creep
For developmental projects there is a danger that you will get so into the coding that 
you will do more and more, making ever finer refinements to your system and never get 
down to the documentation or report write-up. To avoid this you must set a deadline 
on the coding and stick to it. There is no point developing a wonderful system if you are 
examined on the supporting project report.
• 7.3 Managing your time
7.3.1   Introduction
Everybody is limited in the amount of time they have available – there are only 24 hours in 
a day and seven days in a week, no matter who you are. Although everyone needs to use 
some of this time for essential activities such as sleeping, eating and dressing (referred to 
here as essential time), some people make more effective use of the remaining serviceable 
Case study
A student was undertaking a requirements analysis project with a small local company – 
the outcome of the project being a detailed set of requirements for a proposed personnel 
management system. A critical issue with this project was access to the company, employ-
ees and data to feed into the analysis. Unfortunately, soon after this project started, the 
student ran into difficulties. The client was difficult to deal with, the data were not forth-
coming and it was impossible to interview all the stakeholders involved. The student had 
reached a point where she was clearly not going to reach the original aims of the project 
and the project was destined to fail.
This project was turned around significantly by redefining the aim and scope of the 
project. Rather than aiming to produce a set of requirements for a system, the student 
aimed to analyse the requirements capture process within small companies. She had an 
ideal case study with which to work – one that had faced many problems and so provided 
lots of detailed information to digest. The project became a research-based project and 
provided a detailed assessment of the requirements capture process.
This case study shows that some risks can actually lead to beneficial consequences. In 
this case a potentially mediocre requirements analysis project was turned into a much 
better research-based project.

	
7.3 Managing your time
171
time than others. How you become more efficient in your use of serviceable time is the 
focus of time management.
Although there are some specific techniques you can employ to save time, the only 
way to make dramatic improvements in your use of time is to approach time management 
from a fundamental analysis. This fundamental analysis is a process that involves three 
stages and is summarised in Figure 7.2.
	 1.	 Decide what you want to do.
	 2.	 Analyse what you are currently doing.
	 3.	 Change what you are doing to achieve your aims.
Many people might try to improve their use of time by employing specific techniques 
that are identified in the third stage of this process. However, failure to comprehend 
your existing use of time, by omitting stages one and two of this process, will lead to 
only minor improvements in your time usage.
The time management process, shown in Figure 7.2, is similar to the concept of per-
sonal development planning (PDP) briefly mentioned in Chapter 3 as an aid to project 
selection. In recent years, PDP has been promoted and supported by higher education 
institutions. PDP is about identifying what your aims are in terms of personal develop-
ment, putting a plan in place to achieve these aims, and monitoring your progress as you 
strive towards those goals – much like the time management process introduced here. 
For further information, the Higher Education Academy provides some useful material 
on personal development planning including case studies, newsletters, surveys and links 
to other PDP websites (see, for example, Higher Education Academy, 2014).
Each of the stages of the time management process will now be addressed in turn 
before some specific ideas are introduced that can help you improve your use of time.
7.3.2   Decide what you want to do
The first stage of successful time management is to decide exactly what you want to 
achieve in terms of goals and objectives. Most time management texts and courses will 
recommend that you identify both your short-term and long-term goals as part of this 
process. Short-term goals represent those things that you want to achieve during the 
following year. Long-term goals stretch much further into your future, such as five, ten 
or twenty years hence. For the purposes of this book the main focus is your short-term 
goals and it is assumed that completing your project is one of these goals.
It is far easier to categorise your goals according to their different types, rather than 
just attempting to identify broad objectives you are aiming for. Ferner (1995: 11) defines 
Figure 7.2 The time management process

	 Chapter 7 ● Controlling your project 
172
four categories you can use to identify your goals; Work Goals, Family Goals, Community 
Goals and Self Goals. Thus, if you were to categorise your goals for the year ahead, they 
might include targets such as:
Work Goals	
Complete my degree with at least an upper second
Family Goals	
Spend more time with my partner
	
Start a family
	
Teach my children to swim
	
Visit my parents at least five times this year
Community Goals	
Help out at the local youth club
	
Train the local football team
	
Do a sponsored walk for charity
Self Goals	
Achieve grade 5 piano
	
Get my golf handicap down to 10
	
Learn to swim
	
Join a local quiz team
	
Complete a marathon
	
Go on holiday to Hawaii
The goals you identify should be as specific as possible. For example, rather than just 
identifying a self goal as ‘be happy’, you should identify how you will achieve this, for 
example, ‘go on holiday to Hawaii’, ‘complete a marathon’ and so forth.
Chapter 4 introduced project planning and discussed how you should identify objec-
tives that are steps towards your project’s ultimate goal. The same is true here. For 
example, one of your goals for the following year might be to complete your degree 
course successfully (i.e., with at least an upper second). To achieve this goal you need to 
complete a number of objectives; complete your project successfully, pass your exams in 
subjects x, y and z, complete assignments a, b and c and so on. You are thus identifying 
that your project is something that is important to you. Just like all the other activities 
and events on your list of goals, it is identified as something to which you wish to commit 
yourself and something that you are willing to spend your time pursuing.
In this stage of the time management process you have identified the things that you 
hope to achieve. The next stage of the process involves checking to see if what you are 
currently doing and spending your time on is helping you fulfil these goals.
7.3.3   Analyse what you are doing
Analysing how you are currently spending your time is achieved through two activities. 
First, you need to identify how you are spending your time and, second, you need to cat-
egorise the time you have identified. There are a number of techniques that you can use 
to identify your use of time, each technique doing much the same thing but in a slightly 
different way. Time logs, which are probably the most popular technique for recording 
time usage, are introduced here.
Time logs are simply lists that you make during the day of how you spend your time. 
They identify the activities you perform during the day, how long you spend on them, how 
efficient you were at performing them and, perhaps, ways in which you can improve your 
use of that time in future. You should continue making time logs for about a week to see if 
any patterns emerge. An example of a ‘typical’ student’s daily time log is shown in Table 7.2.

	
7.3 Managing your time
173
Time
Activity
Effectiveness
Comments/
Improvements
7.00–8.00
Get ready for 
university
50%
Could probably do 
this in 30 minutes 
but I’m always tired
8.00–8.30
Walk to campus
80%
Could get the bus 
but I need the 
exercise
8.30–9.00
Meet friends in 
canteen
10%
Need to socialise
  9.00–10.00
Lecture
70%
Quite good today!
10.00–10.15
Coffee break
10%
I need a break
10.15–12.00
Tutorial/seminar
50%
Could have done 
this in half the time
12.00–1.30
Lunch – students’ 
union
20%
Far too long but I 
need to eat
1.30–2.00
Library hunting for 
books
40%
Couldn’t use the 
computer
2.00–2.30
Meeting with project 
supervisor
80%
Useful
2.30–3.00
Coffee with friends
20%
I need to socialise
3.00–4.00
Library hunting for 
books
20%
Not finding what I 
wanted and getting 
distracted
4.00–4.30
30 minutes on 
assignment
30%
Wasted time getting 
started – should 
spend longer on 
this
4.30–5.00
Walk home
80%
As before
5.00–5.30
Have a coffee
0%
No comment
5.30–6.00
Watch TV
0%
No comment
6.00–7.00
Get tea
50%
I need to eat
7.00–8.00
Work on assignment
90%
Get a lot done
8.00–11.00
Go to pub
40%
I need to socialise 
but should have 
done more work first
11.00–1.00
Work on project then 
go to bed
50%
Too tired to achieve 
much – must tackle 
this kind of thing 
earlier in the day
Table 7.2  A ‘typical’ student’s daily time log

	 Chapter 7 ● Controlling your project 
174
This is perhaps an extreme example of a ‘day in the life of’. You should also remember 
that this is just a snapshot of one day; this student may well be doing other things dif-
ferently on other days of the week. This is why you should use time logs for a full week 
as individual days may provide spurious indicators of your time use.
Having a look through this time log can certainly help to identify some room for 
improvement (depending on the person’s goals). If this student’s main goal is to social-
ise, then their use of time is probably quite effective. However, if they wish to do well in 
their exams and assignments, then some adjustments need to be made.
One important outcome from your daily time analysis is to identify your work per-
formance. During the course of a day you will find that there are times when you work 
more effectively than others; for example, early in the morning, late at night and so on. 
You can plot these daily ‘rhythms’ on a work performance chart such as that shown in 
Figure 7.3. Figure 7.3 shows that this person works more effectively during the morn-
ing and early in the evening than any other time of day. Thus, it would be better for this 
person to schedule difficult tasks during these peak periods (for example, reading journal 
articles), and schedule easier tasks or socialising for other times. You can extend this 
concept to weekly work performance charts. For example, you may find that you work 
more effectively on Tuesdays and Wednesdays than Friday afternoons. Consequently, 
you will schedule your weekly work to coincide with this performance.
Having identified how you are spending your time, you should then categorise your 
use of serviceable time. Time is categorised, according to the goals you identified earlier, 
into the following two components; important/unimportant, and urgent/non-urgent. 
Table 7.3 summarises these categories.
Important activities are those activities that are important to you based on your own 
goals and objectives, whereas unimportant activities are those that will not affect your 
goals and aspirations if you don’t do them. Urgent activities are those that must be done 
now and will not wait, whereas non-urgent activities are those that you could put off 
until tomorrow without causing any serious consequences.
Figure 7.3 A daily work performance chart

	
7.3 Managing your time
175
Note that Table 7.3 only covers serviceable time. Essential time, which is time that 
you need to spend on essential day-to-day activities such as sleeping, eating, washing, 
dressing and food shopping, is not covered by these categories. Essential activities must 
be performed in order for you to function properly and to sustain you for everything 
else. However, although quite a number of activities you perform may appear essential, 
you might find that you could reduce the time you spend on them to some extent (for 
example, by taking shorter lunch breaks or persuading someone else to do your shop-
ping for you).
All the activities you identify in your daily and weekly time log will fall into one of 
these categories. For example, completing an assignment that is due the following day 
would be important and urgent. At the start of the year your project would be impor-
tant but at that stage it wouldn’t be urgent. However, it would certainly become urgent 
towards the end of the year as its deadline approached.
An example of unimportant and non-urgent activities might be surfing the Internet 
or sorting your books into alphabetical order. Urgent and unimportant activities might 
include answering the phone, being interrupted by visitors, attending a meeting and so 
on.
Important and urgent activities are those which you must do and you must do now. If 
none of these activities are pending then you should focus on important and non-urgent 
ones. You should certainly avoid any activities that are unimportant and non-urgent 
and you should try to minimise, as much as possible, activities which are urgent but 
unimportant.
7.3.4   Change the way you do things
‘What you can’t dump, delay. . .  What you can’t delay, delegate. . . . What you can’t 
dump or delay or delegate, do’
(Turla and Hawkins, 1994: 58)
There are only two ways to improve your use of time to achieve the goals you have set 
yourself:
	 1.	 eliminate activities you don’t need to do;
	 2.	 be more efficient doing the things you have to do.
You can only eliminate activities in one of two ways. First, if they are unimportant, 
you can ditch them and should do so straight away. Second, if they are important, you 
might be able to delegate them to somebody else. For example, you may be able to 
persuade your partner or a friend to proofread your dissertation for you or help you 
trace some references in the library.
Important
Unimportant
Urgent
Do
Minimise/Avoid
Non-urgent
Don’t ignore
Abandon
Table 7.3  Categories of time use (adapted from Jones, 1998: 62)

	 Chapter 7 ● Controlling your project 
176
If you cannot eliminate tasks, you are left with only one option; become more efficient 
in doing the things you have to do. This is achieved by planning how best to use your 
time and dealing effectively with any problems that arise. Planning how to use your time 
is usually done at two levels; weekly and daily. The first stage to time planning, how-
ever, is to set your priorities. The activities you need to perform on a daily and weekly 
basis are prioritised according to the categories introduced earlier (adapted from Ferner, 
1995: 126):
● High Priority – Must Do – urgent and important.
● Medium Priority – Should Do – important but not (yet) urgent.
● Low Priority – Nice To Do – unimportant and non-urgent.
● Scheduled – Low/Medium/High Priority scheduled activities – for example, 
meetings.
Depending on how you structure your week, weekly planning is best done either first 
thing on Monday morning or last thing on Sunday night – in other words, before the 
week ahead begins. When planning what you want to achieve during the week ahead you 
will focus on high priority activities. You should schedule time during the week ahead to 
deal with high priority work and identify what you want to complete by the end of the 
week. Only when these activities are completed can you think about medium priority 
work. During the course of a week, and during each day, you will have scheduled events 
to deal with. Once again, only attend these if they are medium or high priority. Try to 
avoid attending scheduled low priority events if you can.
It might be worth reviewing the previous week’s activities as you put together your 
weekly time plan. For example, did anything take longer than expected? Is there anything 
left hanging over from the previous week that needs finishing off?
Having decided what you want to achieve during the week you should plan what 
you want to achieve each day. Make a list of things you must do, scheduled activities for 
that day and things you can do if you find you have some free time available. Make sure 
that you allow plenty of time for high and medium priority tasks and schedule your day 
according to your daily work rhythms (see Figure 7.3). Try not to be too rigid with daily 
plans as unexpected events always arise and you should allow flexible time to deal with 
these things. By making a list of tasks that you need to perform it provides a motiva-
tion for tackling those tasks. Seeing a task on a ‘to do’ is a motivation in itself and there 
is always a sense of achievement when you are able to cross something off the list and 
reduce it.
You will find that your to do list will contain large tasks and small tasks that need to 
be performed. A good way of working through these different kinds of tasks is to tackle 
‘chunks’ of a large task first. As you become tired or bored with this work, you can give 
yourself a break by tackling some of the smaller tasks on your list. You will therefore 
switch from longer term important, but not urgent, large tasks to smaller tasks and 
back again as the day continues. This is probably a better way of working than trying to 
complete all of a large task in one go or all of your small tasks in one go.
Although you may plan your weekly and daily time commitments thoroughly, there 
are always problems and unexpected events that occur. These are addressed in the fol-
lowing section.

	
7.3 Managing your time
177
7.3.5   Time management tips
Procrastination
Procrastination means that you put off until tomorrow what you can or should be doing 
today. The same might happen tomorrow and things that you ought to be doing never 
get done properly. There are various reasons why you might procrastinate – you have 
lost your motivation, the task appears too great, you don’t want to trouble somebody 
because you are nervous of the response you might get, etc.
There are various ways you can deal with procrastination. The first thing to do is to 
decide that you really do want to deal with it. If this is difficult you can make a list on 
a piece of paper of the reasons for and against dealing with the work you need to do. 
By analysing the work in this way you often convince yourself that the benefits of deal-
ing with the task outweigh the negatives. If the task appears too great then the obvious 
answer is to break it down into manageable chunks and deal with each of these in turn.
Other ways you can deal with procrastination include the carrot and stick approach. Get 
somebody to monitor your progress – a colleague, your partner, a friend, your supervisor – 
and ask them to keep prompting you for progress reports on your work. Quite often, if you 
can’t do work for yourself, knowing that someone else is interested in your progress does 
help. Another alternative is to reward yourself. Promise yourself some kind of treat if you 
complete the work: a trip to the cinema, a meal out or whatever. One final tip is to write the 
task down at a specific time in your diary where there is a reasonable space. You know when 
you check your diary you should be tackling that task and there are no distractions around it.
Grains of time
Grains of time are those small periods of time you gain during the day that you don’t 
use effectively – for example, waiting for someone to turn up to a meeting, finding your 
tutorial has been cancelled, sitting on the bus to college and so on.
Make sure that you don’t waste these grains of time. Have something that you can 
pick up quickly and do to fill these periods – for example, some revision notes with you 
that you can read on the bus, a notebook (log book) so that you jot down some ideas, 
the morning’s post that you can sort through and so on.
Email
You will undoubtedly use email during the course of your project – contacting friends, 
clients, users, your supervisor and others. Although email is an invaluable tool for com-
munication, it can waste a lot of your time too. You will probably receive a lot of junk 
email or spam that takes time to deal with, and you might also spend a lot of time com-
posing messages or replies when a simple response or telephone call would do. Some 
useful tips for managing your email effectively are:
● Make use of mailboxes to store messages that you have dealt with. Try to keep your 
email inbox as small as possible. If you receive an email that can be dealt with quickly 
(something needing a quick reply, for example), do it there and then. The message 
can then be deleted or moved to an appropriate mailbox if you want to keep a record 

	 Chapter 7 ● Controlling your project 
178
of it. In this way your inbox should only contain five or six long-term items that you 
need to keep an eye on or do something about.
● Make use of your email system’s filtering and anti-spam facilities.
● Most email systems provide two windows when viewing emails – one with a list of 
emails recently received (the inbox), and another showing some of the content of the 
currently selected message. You can skip through your list of recently received emails 
in your inbox and glance at their content in this other window. In this way you should 
be able to read most of what you need from a message without actually opening it and 
you should also be able to spot spam or junk email which you can delete straight away.
● Set up signatures so that you can quickly add your name and contact details to an 
email you are composing without having to type these details out each time.
● Keep your list of contacts up-to-date in your address book so you can quickly com-
pose an email to someone you know rather than having to track down and type out 
their email address each time.
● If you have been away for some time and you find you have a large number of emails 
in your inbox you can quickly sort out junk mail and spam by ordering the messages 
according to who sent them. You may well find that the same company or organisa-
tion has sent you several unwanted messages (sometimes the same one several times) 
and you can quickly select these and delete them all in one go.
● If you are away from your email for some time (over a week, for example) you may 
want to set up some sort of message forwarding or auto reply system that informs 
people that you are away. In this case, if people are expecting an urgent response from 
you, they will be informed of your absence.
Unfinished business
It may appear obvious but, until a task is completed it is never actually finished. Don’t 
start things that you will not finish. All the time you commit to half completing a task is 
wasted unless you finish that activity off.
Interruptions
Everyone is subject to interruptions to their work of one kind or another. People calling in 
to see you, the phone ringing, people asking you to do things, etc. Some of these are una-
voidable, but it is how you deal with them that counts. One way to deal with interruptions 
is to avoid them by finding a ‘hide away’. This might be a quiet place in your university’s 
library where you know you won’t get disturbed. You might want to put a notice on your 
door saying ‘do not disturb’ or go away for the weekend to get away from it all. If you do 
find that you are constantly being asked to do things you also need to learn to say ‘no’. 
Don’t deal with junk mail – just bin it. Remember your priorities, and if your project is due 
in, you must avoid doing other things and focus all your energies on it.
Perfectionism
Don’t fall into the trap of trying to be perfect at everything you do. It can take a lot of 
time to improve something you do from ‘good enough’ to perfect. This time is wasted. 
For example, if you need to reply to a letter or email, don’t waste time drafting out and 

	
7.3 Managing your time
179
redrafting a reply with figures, clever fonts and letter heads. If you can, write a brief 
reply on the letter itself and post that back. If a brief reply is all that is required, do it.
Losing things
You can often waste a lot of time through your own inefficiency with data, files, docu-
mentation and papers/articles. Keep things in good order, references up-to-date, and 
have a means of managing all your paperwork. Gather together things you will need for 
a task before you start work. This will stop your concentration being broken and wasting 
time getting back ‘up-to-speed’ when you return from finding the thing(s) you need. 
Think about ways of managing your software back-ups too – for example, by using date-
stamping or version numbers. Section 6.8 presented some ideas on this issue.
Short breaks
Sometimes work can get too much for you and you need to take a break. A useful tip 
here is to make a note of where you are up to and what you were intending to do next 
when you take a break from your work (for example, when you have finished your work 
for the day). This will save time later when you return to work and you try to remember 
what you were doing.
Long breaks
Because student projects can last for six months or longer, it is often the case that you will 
be away from your university for holidays, term breaks and field trips, etc. – times when 
you will not be able to do any detailed work on your project. Although it is useful in this 
case to make notes as outlined in the Short breaks section above, it is also useful to try to 
keep your project ‘ticking over’ during longer breaks from your work. For example, is 
there a book or journal article you could be reading while you are away? Could you work 
on some designs or requirements or could you proofread your report, etc.?
Make sure that you do not completely forget about your project for one or two months 
away. You will find it much easier to pick up where you left off when you return if you 
have managed to do something (no matter how small) to keep it in your mind while away.
Log books
Many institutions insist that students maintain a log book during the course of their 
project and this can prove to be an invaluable resource. It will help you keep track of how 
your project has progressed and where you are up to (useful for short and long breaks). 
It can be a useful place to jot down ideas as they come to you (whether you are on the 
bus, in a lecture or wherever). It can be used during meetings with your supervisor – to 
minute the meeting, show what you have been doing and what ideas you have. You can 
use it to record literature you have read and to note important references.
Log books can take many forms – from detailed diaries and online notes, to loose-
bound notes kept in a folder (see Section 7.1.2). If your department has no formal 
requirements for a log book, you should use an approach with which you are comfort-
able. You should ask your supervisor for their advice on this issue during one of your 
first meetings with them.

	 Chapter 7 ● Controlling your project 
180
• 7.4 Working with your supervisor
7.4.1   What is a supervisor?
A ‘supervisor’s primary professional responsibility is to develop his or her research 
students so that they can think and behave as independent academic and scholarly 
researchers in the field of study concerned’
(Cryer 2006: 47)
One of the main resources of your project is your supervisor and, as such, your relation-
ship with them and how you use them needs managing effectively. Chapter 3 discussed 
some ideas on how you should choose your supervisor (if this is possible within your 
own institution) and what to look for in him/her. The purpose of this section is to dis-
cuss ways in which you can make effective use of your supervisor during the course of 
your project.
Although most institutions have similar guidelines for the supervisor/student rela-
tionship at research degree level, for taught degrees institutions have quite different 
rules, expectations, roles and responsibilities for supervisors. Some institutions will 
expect you to work very closely with your supervisor, perhaps meeting with him/
her regularly each week during the course of your project. Other institutions prefer 
to emphasise the independent nature of project study and would only expect you to 
see a supervisor on rare occasions for advice and guidance. The role of your supervi-
sor can also differ. Blaxter et al. (2010: 140) identify two roles that a supervisor can 
perform:
● a manager;
● an academic advisor.
As a manager your supervisor is responsible for managing your project in ‘a more 
general sense’. S/he will be concerned with your overall progress; are you meeting the 
milestones you have set for yourself? Are you coping with your project and balancing it 
with other commitments? Your supervisor will also be concerned with ensuring you are 
following institutional guidelines as part of this role. For example, are you aware of all 
the guidelines, regulations (plagiarism and copyright issues, for example) and assess-
ment requirements relating to your project? Are you producing the right documentation 
at the right time? As a manager your supervisor should also advise you on which pro-
cedures to follow to submit your dissertation, what forms to complete, how to lay out 
the report and when to hand material in. They should also arrange access to appropriate 
hardware and software for you and they should also arrange for you to attend appropriate 
courses, seminars and conferences.
As an academic advisor your supervisor is more concerned with the ‘academic’ or 
technical content of your project. Are you reading the right journals and books? Are you 
using the correct research and data gathering methods? Are you performing the right 
analyses? Are you developing your software in the correct way, etc.? You may need your 
supervisor’s academic expertise to advise you where to go next, what areas to develop 
further, to clarify particular topics, provide technical help with programming or design 

	
7.4 Working with your supervisor
181
issues, to advise you which techniques and tools to use, and to discuss recent develop-
ments in your technical field. You should also expect your supervisor to tell you where 
you are going wrong; for example, is the academic quality of your work not up to the 
standards required for your course?
The University of Warwick (1994: 24) list the following areas which your supervisor 
should be able to advise you on when acting in an academic capacity:
● ‘research design and scheduling’
● literature surveys
● ‘theoretical and conceptual development’
● ‘methodological issues’
● ‘development of appropriate research skills’
● data collection and analyses.
Sometimes you will also need your supervisor to act in a pastoral role for you. Under 
this role your supervisor will be more concerned with your emotional and general well-
being. Are you maintaining your motivation? Are you under pressure from other work? 
Have you any personal problems that s/he can help you to deal with?
Combining academic expectations with managerial requirements, Phillips and Pugh 
(2010: 183–189) list the following expectations students have of their supervisors.
● ‘Students expect to be supervised’.
● ‘Students expect supervisors to read their work well in advance’.
● ‘Students expect their supervisors to be available when needed’.
● ‘Students expect their supervisors to be friendly, open and supportive’.
● ‘Students expect their supervisors to be constructively critical’.
● ‘Students expect their supervisors to have a good knowledge of the research area’.
Although your supervisor has responsibilities towards you, s/he will also expect some 
obligations from you in return. According to the University of Warwick (loc. cit.), some 
duties expected by supervisors of their students are:
● to arrange regular meetings;
● to maintain a regular work pattern;
● to discuss progress and problems fully.
In addition, Phillips and Pugh (2010: 113–117) identify the following obligations of 
doctoral students which are also relevant to undergraduate projects:
● ‘to be independent’;
● ‘to produce written work that is not just a first draft’;
● ‘to be honest when reporting on their progress’;
● to follow advice that is given;
● ‘to be excited about their work’.

	 Chapter 7 ● Controlling your project 
182
7.4.2   Using your supervisor effectively
The main contact you have with your project supervisor will be through prearranged 
meetings. These meetings may be at a regular time each week or more infrequent, 
perhaps only occurring every four or five weeks or more. As academic staff tend to be 
extremely busy, they are often difficult to find at other times and unlikely to be able to 
see you. You therefore need to make optimum use of the time you do see them during 
these meetings.
● Prepare for your meetings. Don’t just turn up to a meeting with your supervisor 
without any ideas on what you want to get out of it. Think about what you want to 
discuss, decide what advice you want from your supervisor on which aspects of your 
project, and go prepared to present some of your own ideas and plans to him/her.
Ricketts (1998: 17) suggests using the minutes of your previous meeting as a start-
ing point for discussion each time. This helps to remind everyone of the current state 
of your project and identifies the work you were expecting to complete since the last 
meeting.
● As part of your meetings you may well want to discuss the following topics each 
time:
● What progress you have made since the last meeting – work you have done, articles 
you have read, literature found, plans made, interviews conducted, requirements 
captured, designs drawn, programs developed, etc.
● What problems have you encountered? How you overcame them or do you need 
help?
● Who have you met – what did you discuss with them?
● What do you intend to do next – is this suitable? Has your supervisor any other 
suggestions?
● Make notes during your meetings. It is unlikely that you will be able to remember 
everything that is discussed. Make notes as you go along and clarify things that you 
are not sure about before you leave. If you don’t understand something that your 
supervisor is saying you must tell them. It is far better to get things clarified at an early 
stage than six months later when you realise you haven’t investigated an important 
topic and perhaps omitted something vital from your project.
● Arrange your next meeting. It is usually a good idea to arrange the time and date of 
your next meeting before you leave. Agree some goals and targets with your supervi-
sor that you intend to complete before your next meeting. This will give you some-
thing to work towards and will provide some motivation as you know your supervisor 
will be checking up on your progress at the next meeting.
● Follow your supervisor’s advice. There is no point in going to meetings with your 
supervisor if you are going to ignore any advice given. Clearly, there are times when 
your supervisor will make suggestions that you might not want to follow. However, 
your supervisor will generally provide you with invaluable advice that you would be 
unwise not to take on board.
● Be prepared to communicate with your supervisor through other means – by email 
or telephone, for example. If your supervisor is particularly busy these other means 
may be the best way to maintain regular contact and receive advice.

	
7.5 Working in teams
183
• 7.5 Working in teams
7.5.1   Introduction
Owing to increasing numbers of students within higher education, group working for 
projects and assignments is becoming more and more common. However, it is also rec-
ognised that group work has a number of educational and practical advantages for stu-
dents as Blaxter et al. (2010: 45) identify.
● It enables responsibility to be shared.
● You are able to specialise in areas you are comfortable with and good at.
● It provides experience of team work.
● You can perform much larger projects than you could achieve on your own.
● You have a ‘support-network’ of colleagues.
In addition, working in teams will provide you with an invaluable experience in inter-
acting with others, sharing work, overcoming joint difficulties and introducing you to 
the working practices of the ‘real world’.
Many students resent working in teams as they feel their grades may be adversely 
affected by other people over whom they have no control. Others enjoy the experience 
and feel their team achieves far more than they could have done as individuals. Whatever 
the case, at one stage or another you may well find yourself conducting a project as part 
of a team. This section discusses the issues involved in team work and presents some tips 
to help you successfully complete team projects.
7.5.2   Team roles
Different institutions have different regulations for establishing project teams. Some 
departments will arrange you into teams (perhaps attempting to mix abilities and skills), 
whereas others will allow you to form your own teams. Be aware that if you form your own 
team this is not how things operate within industry where you often find yourself work-
ing with people you don’t get on with or people lacking appropriate skills for the project.
Whether you can choose your own team or whether your group is assigned to you at 
‘random’, all your team members will bring two kinds of skills into your group; personal 
(team) skills and technical skills. An imbalance within either of these skill areas in your 
group will probably lead to a poor team performance. Consequently, it is not always a 
good idea to form a group with your friends who may all have similar interests, person-
alities and technical skills to you. If you can, take careful note of the following skill types 
and select a group with a good balance of these skills.
Belbin (2010) identifies nine personal or team skills that people bring to a project. 
These skills or roles are grouped into three categories as follows:
Action-oriented roles
● Shaper: dynamic people who thrive under pressure and overcome obstacles. They 
can be argumentative and annoy other team members.

	 Chapter 7 ● Controlling your project 
184
● Implementer: disciplined, reliable and efficient. Takes ideas from others and acts on 
them. Although they are willing to take on jobs other people dislike, they are often 
set in their ways and do not like change.
● Completer-Finisher: conscientious, attends to detail well and finishes work on time. 
They have a strong attention to detail and aim for the highest standards. They find it 
difficult to delegate work and can annoy other team members by their attention to 
detail and the amount they seem to worry about things.
People-oriented roles
● Coordinator: good managers, delegators, chairperson. They are able to see the wider 
context of the project and understand other team members’ strengths and weak-
nesses. Sometimes they are resented because they only seem to delegate work to 
everyone else.
● Resource investigator: extrovert communicators – good for making contacts. They 
are good at working with external stakeholders. They do, however, lose interest easily 
and need refocusing on the task.
● Team worker: cooperative, diplomatic and good listeners. They help to keep the 
team together and working well, but can be indecisive as they do not like to take 
sides.
Thought-oriented roles
● Plant: creative people with imagination who can solve difficult problems. They do 
not like criticism and are often introverted and can be so preoccupied with problems 
that they don’t communicate effectively.
● Monitor evaluator: see all options and maintain a strategic view of the project. They 
tend to be quite shrewd and objective in their decision making. Because they are 
focused on strategic issues they can appear quite detached from the day-to-day opera-
tions of the project and do not really inspire others.
● Specialist: narrow specialism and viewpoint but dedicated. Although they are essen-
tial to certain parts of the project, their contribution can be limited and they often 
use a lot of jargon in their communications.
Chances are that you will not be working in a team with this number of members. 
However, individuals within your team may well possess two or three of Belbin’s skill 
traits, giving your group a reasonable skills balance. Having a good cross-section of 
team skills within your group is, however, no guarantee of project success. Having said 
this, the more of these skills that are present within your group, the higher the chances 
are that the team will succeed. Individuals will work together well and the team will not 
suffer from clashes between the egos of several like-minded people.
These skill traits should be kept in mind when team roles are assigned. Three team 
roles, which are common to all project teams, irrespective of the project, include:
● Team leader – chairperson, coordinator, Scrum master. The team leader is responsible 
for time-tabling the work, assigning it, chasing team members’ progress, chairing 
meetings, making difficult decisions, etc.

	
7.5 Working in teams
185
Strengths
Weaknesses
Strong leader
Poor relating to people I don’t know
Technically sound
Writing skills poor
Good programmer
Opportunities
Threats
Project is a chance to 
improve my systems 
analysis skills
Field trip clashes with  
project presentation
● Librarian/secretary – minutes meetings, coordinates paperwork and all literature.
● Team contact (communications officer) – liaises with external bodies – the client, 
supervisor, etc.
When assigning these roles you might, for example, elect your team leader as the 
person possessing the skills of a coordinator. A resource investigator would perhaps be 
a good person to assign as your team contact, and the team’s librarian/secretary may 
be best assigned to a completer-finisher. You might also assign primary and secondary 
roles to each member of the team. For example, someone may have the primary role 
of librarian/secretary and be supported by another team member who has this as their 
secondary role. Thus each team member is responsible for one aspect of the project, sup-
ported by one other team member, and each team member is supporting, in a secondary 
role, someone else.
Sometimes you may find that no one naturally fits into any of these roles or you may 
find that no one is willing to take on a particular role. In these cases the role might have 
to be divided so that different people are responsible for it, or that different people take 
on the role at different stages of the project. For example, team leadership could be 
split into coordinating team contributions, chairing meetings, planning, etc. This is not 
an ideal solution as projects should ideally have a single leader, but it is a compromise.
Technical skills are particularly important within computing projects. Depending on 
the nature of your course, and the type of project you are undertaking, you will need 
team members with some of the following technical abilities:
● programming – high level, low level, 4GLs, visual programming, etc.
● databases – analysis, design, development
● systems analysis
● systems design
● information systems
● human–computer interaction
● networking
● computer systems architecture
● graphics
● mathematics (including statistical analyses, etc.).
O’Sullivan et al. (1996) suggest using a SWOT analysis to identify team responsi-
bilities. A SWOT analysis identifies everyone’s strengths, weaknesses, opportunities and 
threats. For example, your own personal SWOT analysis might look something like this:

	 Chapter 7 ● Controlling your project 
186
Not only must your team be well balanced with respect to technical skills and the team 
skills identified earlier, but your team must also link well. In other words, there must be 
good communication between team members in order for the project to succeed. This 
boils down to people’s ability to get on with one another and is the main benefit of being 
in a group with your friends.
7.5.3   Team development
Teams do not form together in a consistent manner and generally evolve through five 
stages of development. Being aware of these stages can help you to understand why the 
team might be behaving as it is, prepare you for the types of problems the team may face 
during each stage and perhaps enable you to deal with these problems more effectively. 
These stages, originally identified by Tuckman in 1965, are:
● Forming. When the team first comes together as a group of individuals, the team 
members are keen to make an impression. The team become acquainted with one 
another, the goal for the project is defined, roles are established, and communication 
channels are set up. During this stage the team leader must provide guidance and 
direction and be prepared to be challenged as the team begins to probe boundaries 
of acceptable behaviour within the group.
● Storming. Following initial formation most groups go through a period of instability 
as roles, personalities, hidden agendas and cliques come into conflict. Through this 
period realistic procedures are established and people determine how they can get 
along and work together. It is difficult for decisions to be made during this period 
as everyone seems to be pulling in different directions. Uncertainties exist and team 
members need to focus on the goal of the project and not the relationship and emo-
tional issues that seem to be overtaking the team during this stage.
● Norming. This stage represents the settling down of the team following the chaotic 
storming process. It is during this stage that the team begins to stabilise into a working 
environment, patterns of work are established and people are committed to the project. 
The team now has a sense of identity, a team spirit forms and everyone knows what their 
roles and responsibilities are.
● Performing. The team can now achieve its optimum performance and really focus 
on getting the project completed. Performing can only be achieved if the previous 
three stages have passed successfully. Any disagreements can now be handled effec-
tively within the team, all team members know their strategic direction, and team 
members tend to look after one another.
● Mourning or adjourning. When the project is complete the team might well be 
disbanded unless there is another project in the pipeline. To many group members 
this can be quite a culture shock for those that have been in a close knit team for a 
long time. In an industrial context team members may move onto other projects, 
have to form new relationships, or return to their original departments. For student 
projects it may mean the end of your course or a shift to other things such as exams 
or coursework. Whatever the case be aware that emotions you might feel at the end 
of a group project are not unique and you should reflect on your time in the team 
positively.

	
7.5 Working in teams
187
Some group projects require students to undertake a reflective summary of their pro-
ject at the end. This will normally take place after the project has completed so occurs 
during the mourning stage. This is discussed in Section 7.5.6.
7.5.4   Managing the team
You have ‘selected’ your team and the project is underway – how should the group and 
its communications be managed? Group coordination will clearly rest on the shoulders of 
the team leader. It is their responsibility to coordinate effort by breaking a large project 
down into manageable chunks and assigning these chunks appropriately.
The main coordinating link that should be maintained within a group project is 
through frequent team meetings. These should be minuted, everyone should be in 
attendance, and work should be agreed and assigned. When work is assigned you should 
all agree on what should be done and by when. Work should be assigned to individuals 
based on their technical skills and sometimes subgroups might form to work on particu-
lar parts of the project. The Gantt charts and activity networks, introduced in Chapter 4, 
can help you assign work to team members, as they provide a strategic view of workloads 
and responsibilities. It is useful to get people to sign up to their obligations at this stage 
so that everyone knows who is responsible for what. If problems do arise later, and 
the team falls apart for whatever reason, individual contributions can be identified for 
assessment purposes.
Frequent meetings also provide a useful means of project control. They enable pro-
gress to be monitored and provide a time and place for team members to meet and 
discuss ideas. Motivation of team members also becomes clear at frequent meetings and 
any problems can perhaps be dealt with sooner rather than later. Some points you should 
consider when arranging your team meetings include:
● Location. Avoid public areas for the meeting such as a café or bar. Try to find some-
where more professional to meet where you will not be disturbed and can access 
useful materials such as white boards, flip charts, wireless internet connection, etc.
● Agenda. Your meetings should have a clear agenda. You should discuss issues such 
as progress since the previous meeting and against the project plan, individual con-
tributions, problems and solutions, other meetings (contacts with clients, supervisor, 
etc.), changes to the project plan, (re) assignment of tasks, target setting for the next 
meeting.
● Chair. Try to ensure you have someone in charge of the meeting who can control the 
discussions and make sure someone is also taking notes and minuting the meeting.
7.5.5   Resource allocation histograms
To identify which members of your team are working on which tasks at particular times 
you could use a resource allocation histogram (RAH). RAHs are used by project man-
agers to balance out work commitments amongst staff and resources and show, quite 
clearly, which resources are working on which tasks at any given time. A RAH is usually 
put together during the project’s planning stage and is a useful tool for project control. 
An example of a RAH is shown in Figure 7.4 – in this case showing two people working 

	 Chapter 7 ● Controlling your project 
188
on a software development project over a period of 13 weeks. You can see from this 
figure that it is quite easy to determine who is working on which task at any particular 
time. The RAH can easily be extended to several team members (by adding extra rows) 
and can include non-project work too (for example, holidays, field trips, etc.).
7.5.6   Group work reports and the allocation of marks
Quite often, in addition to completing a group project, institutions expect individual 
students to reflect on their experience of team work and report on the conduct of other 
members of the group. Examiners may also want to know how to distribute marks 
amongst the team members – should everyone be given an equal share or have some 
members contributed more than others? The requirements for such reports will vary 
from one department to the next – some requiring little more than an honest percentage 
breakdown of each team member’s contribution, whereas others may require a more 
reflective review presented as an essay or a report. Examiners may also be interested in a 
reflective account of how the team worked together. For example, did you have a single 
team leader, how did the team communicate, how was work allocated, how was the team 
managed, what was your role and was this an appropriate use of your skills, what would 
you do differently next time, etc.?
Ideally, if the team has worked well together and everyone has done their fair share, 
each student will claim an equal share of the marks and the marks will be allocated 
evenly. However, when discrepancies appear the examiners must decide on a means 
of reaching a compromise. If the students are claiming similar contributions (but not 
exactly the same) a simple averaging of the claims may be fair. Examiners may adjust 
marks if at least two members corroborate a different percentage split. If the claims 
are wildly different (for example, one team member claims they did 80% of the work, 
whereas the other team members think they did only 30%) the examiners may well inter-
view the team (individually and/or as a team) to determine a compromise or identify 
why such discrepancies have arisen. It is at times like these that documentary evidence 
is important – so make sure you minute your meetings.
Below some tips are outlined that should help you if you are asked to produce an 
appraisal of your team’s performance (as a team and from an individual perspective).
● Be honest. If you write an honest account of your contribution to the team and the team 
performance it will be accurate and should be supported by your other team members.
● Try to come to an agreement as a team before you hand in your summative reports – 
so you are agreed on who contributed what to the project.
Figure 7.4 A resource allocation histogram of a simple development project
Sam
Chris
Design
1
2
3
4
5
6
7
8
9
10
11
12
Requirements
13
Testing
Person
Time (weeks)
1st report
Field
trip
Final
report
Coding

	
7.5 Working in teams
189
● Be willing to fight your corner if you feel you have been unfairly treated.
● Ensure you have documentary evidence to back up your claims – minutes of team 
meetings, for example.
● Make sure that all meetings are fully documented and people ‘sign up’ to work com-
mitments. Not only does this provide people with a ‘contract’ which they feel obliged 
to fulfil but, also, if things go wrong, arguments won’t start over claims that ‘X said 
they would do this’ and ‘Y promised that’. These ideas should help you to deal with 
members of the team who don’t seem to pull their weight.
● Try to monitor individual contributions as the project is progressing rather than at the 
end. At an interim meeting you could ask all team members to complete a contribu-
tion sheet – indicating what they feel each member of the team is contributing to the 
project (for example, for a team of five, an equal contribution would be 20% each). If 
there are discrepancies at this stage (for example, X feels they are doing the bulk of 
the work, while everyone else thinks work is split evenly), try to sort them out sooner 
rather than later. Get people to explain their reasoning as to why contributions appear 
to differ (you may find out, for example, that someone is doing a lot more work than 
you thought) or reassign tasks to try and even up the workloads.
● Remember to acknowledge supportive contributions from team members as well. For 
example, someone who motivates the team, makes the coffee, arranges meetings, etc. 
can be just as valuable as the technical person writing the program.
7.5.7   Systems to support team work
There are a number of online systems available that can help your team perform more 
effectively. These systems include those that allow you to share documents, those that 
allow you to manage the team (arranging meetings, assigning work, etc.), configuration 
management systems that allow you to control changes to a system that several people 
are working on simultaneously, and discussion forums. Configuration management was 
covered in Section 6.8. In this section we will look at tools to support group collabora-
tion in other ways. Examples of such tools include those outlined below.
● Wikis. A wiki is a website that users can access and contribute to – a type of interac-
tive database of information like Wikipedia. Your team might want to establish one 
of these sites as a means of sharing information and ideas. For more information on 
Wikis see http://www.wikimatrix.org/ (a site for comparing Wikis) and Wikipedia 
at http://www.wikipedia.org/ – the largest online Wiki.
● Blogs. A blog is an online forum in which users post their ideas, thoughts, diary 
details, etc. You can set up a blog for your group and use it as a means of communi-
cation as well as recording conversations, comments, etc. Facebook (http://www​
.facebook.com), as an example, allows groups to be set up for communication and 
sharing of documents and ideas. For more information on blogs see http://www​
.weblogmatrix.org/, which compares a number of blogging sites.
● Project management systems. These are online systems that allow you to manage 
your project, support the team, pass documents around and communicate with one 
another. An example of such a tool is http://www.projectplace.com/ which provides 
facilities for managing documents, people (communicating, assigning tasks, etc.), 

	 Chapter 7 ● Controlling your project 
190
meetings, the project as a whole (tracking progress), and planning. Other examples 
you might want to look at include Trello (https://trello.com/), which has a clean 
interface and allows you to easily see what tasks need doing, what are currently being 
done, and what has been completed; Dropbox (https://www.dropbox.com), which 
allows easy sharing of documents; and Teamwork.com (https://www.teamwork​
.com/), which is an online project management tool with additional features such as 
file sharing, messaging and milestone tracking.
7.5.8   Teamwork tips
This section finishes with a few tips on teamwork to help you succeed.
● Have a single project manager/team leader. It is often tempting in group work to 
have a rather democratic, leader-less structure. However, somebody does need to be in 
charge of your project’s management; they need to coordinate the effort of everybody 
involved, keep a strategic view on your project’s progress and make ‘unpopular’ deci-
sions. If the group has two or three members who would like to lead the team then 
perhaps this could be achieved on a rotational basis. This could be managed by rotat-
ing the team leader based on each team member’s technical contribution and effort 
which will vary during the course of the project. Alternatively, as mentioned earlier, 
the team leader’s role could be divided amongst those wishing to lead the group but 
this is less satisfactory.
● Maintaining everyone’s interest and motivation throughout the course of a large pro-
ject can be difficult. For example, systems analysts would be busier at the earlier 
stages of a project than the end when, perhaps, programmers become overburdened. 
To overcome these problems try to plan into your project’s schedule team responsi-
bilities as well as technical activities. For example, the systems analyst might take over 
the group’s secretarial/library activities as the project progresses; a programmer may 
relinquish the leader’s role, etc.
● In line with the points made above, it is important to ensure that people aren’t over-
burdened with technical and team roles. It can take a lot of time to manage a group 
alongside other activities. You should ensure that team roles are accounted for when 
work is assigned to each member of your group. For example, a good team coordina-
tor, who can motivate and coordinate everyone’s contributions, may be assigned this 
task as their only role.
● Maintain good communication between all team members. Make sure that a contact 
sheet for every team member is produced at the project’s start with everybody’s home 
address, mobile numbers and email address. Hold frequent short meetings, not long 
infrequent ones. Try to make full use of all the communication tools available to you. 
These can include facilities such as electronic diaries to plan meetings, email to support 
team communication, texting, etc. Email can also be used to transfer documents and 
files between team members as attachments. Also try to set up shared directories on your 
institution’s computer servers or the cloud so that all team members have access to the 
latest project files (but ensure some form of configuration management is in place).
● Try to create a team spirit. Create an identity with a team name and try to arrange 
some informal, social meetings as well as your formal ones.

	
7.6 Summary
191
● Try to maintain a single person to act as a liaison with external bodies such as your 
client, technical support staff, supervisor, etc. Even if two or three of you attend client 
meetings it should be made clear who the contact person is within the group. This 
ensures that a consistent message is presented to external bodies and contradictions 
are avoided. It also avoids contradictory information passing into your group from 
two or three team members who may have approached the client on different occa-
sions and received contradictory requests.
● Split the report writing/documentation into appropriate sections and assign these 
according to each team member’s abilities and what they have done. Make sure that 
team members know when they have to provide their particular contribution by; 
allow time for collating all the contributions; confirm an ‘in-house’ style that the team 
should adhere to for all documents produced. Get the team’s librarian/secretary to 
coordinate this.
● Consider implementing some kind of configuration management process and system 
(such as that discussed in Section 6.8) to ensure, if several members of the team are 
working on different parts of a software system simultaneously, that the components 
integrate together seamlessly and version control is supported.
● Sometimes a team is dominated by one or more of its members who always seem to 
want to say something, no matter how irrelevant, about everything during discussions 
(monopolisers). Similarly, some members of the team may always seem reluctant to 
say anything or contribute to discussions (introvert). Divert attention from monopo-
lisers by requesting ideas from other team members. Ask each member of the team 
to take a turn at providing a contribution (thereby including introverts and limiting 
monopolisers). Split the team into smaller working parties so that the influence of 
monopolisers is diminished.
• 7.6 Summary
● All projects have five elements that require managing to some extent as the project 
progresses: time, cost, quality, scope and resources. These elements need to be balanced 
against one another so that you achieve your project’s aims and objectives.
● Of these five elements, cost is something over which you probably have little concern 
or control. Quality and scope are the two elements you have most responsibility for 
and control over. Resources are those that are available to accomplish your project – 
you, your supervisor and your project team. The time you are allocated to complete 
your project cannot usually be extended so you need to employ time management 
techniques to manage this time more effectively.
● Time management consists of three stages: decide what you want to do, analyse what 
you are currently doing and change the way you do things. There are only two ways 
to reduce the time you spend doing things; ditch them (perhaps by getting somebody 
else to do them – delegation) or use the time you have more effectively.
● Your supervisor is an invaluable resource. You will probably only see your supervisor 
at prearranged meetings so these must be planned for and used effectively.

	 Chapter 7 ● Controlling your project 
192
● Working in teams brings a number of advantages and disadvantages. Each team 
member contributes two kinds of skill; team skills and technical skills. When work is 
assigned to team members try to balance team roles with technical duties and assign 
work and responsibilities according to people’s strengths and weaknesses. Meet regu-
larly and maintain good communication.
• 7.7 Further reading
Dodd, P. (2008) The 25 best time management tools and techniques: how to get more done 
without driving yourself crazy, Capstone, Oxford, UK.
Evans, C. (2008) Time management for dummies, John Wiley, New York.
Forster, M. (2006) Do it tomorrow and other secrets of time management, Hodder & 
Stoughton, London.
Gleeson, K. (2009) The personal efficiency program: How to get organized to do more 
work in less time (4th Edition), John Wiley, New York.
Phillips, S. (2002) Time management 24/7: How to double your effectiveness, McGraw-
Hill, London.
Rooney, K. (ed) (2010) Steps to success manage your time: How to work more effectively, 
Kindle Edition, Amazon, UK.
Tracy, B. (2008) Eat that frog! 21 great ways to stop procrastinating and get more done 
in less time (2nd Edition), Berrett-Koehler, San Francisco, USA.
• 7.8 Exercise
	 1.	 How could the student have managed their time more effectively in Table 7.2?
• 7.9 Action points
● Identify how the five project elements (resources, time, cost, quality, scope) relate to 
your own computing project. Which of these elements is your main focus/concern 
at the moment?
● Put together a time log for yourself during the coming week.
● Categorise your use of time into important/unimportant, urgent/non-urgent and 
essential types. How can you reduce the time you spend on unimportant activities?
● Plan for a meeting with your project supervisor.
● Establish and maintain a project log book.
● If you are working on a group project try to identify which of Belbin’s (2010) team 
skills each of your group possesses. Have you assigned roles based on these skills? 
Are technical tasks and team roles balanced logically and evenly among your team’s 
members? Put together a contact sheet for your team. Is everyone clear about what 
they are doing and what their responsibilities are?

Presenting your project
SECTION
4


	
	
	
195
CHAPTER
8
• 8.1 Introduction
Chapter 2 identified the dissemination of your ideas and results as an important part of 
the research process. Quite often the report is the only evidence of your project when it is 
finished, unless you have developed a substantial piece of software (and even then people 
may only get to read your report rather than use the software). As the report represents 
Aims:
To introduce the skills needed to present your project effectively in written form.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand how to structure and write professional reports.
● Write clear and concise abstracts.
● Understand how to present data and results clearly.
● Understand how to reference material and avoid plagiarism.
● Document software, comment programs and write user guides.
● This chapter is relevant for both postgraduate and undergraduate 
projects.
● Section 8.6 (Documenting software) is background material for 
research degree students but highly relevant for taught degree 
software development projects.
Presenting your project in  
written form

	 Chapter 8 ● Presenting your project in written form  
196
your project, remember that the good work you have performed can be ruined by a poor 
report. There is no point in performing a tremendous amount of valuable and important 
programming, research and development, if you cannot present your findings to other 
people effectively. However, a bad project cannot be turned into a good one by produc-
ing a good report. Although you can improve a poor project with a good report, you 
must remember that your report is a reflection of your project and you cannot disguise 
sloppy investigation, development, implementation, analyses and method with a few 
carefully chosen words.
This chapter focuses on the presentation of written material for your project; structur-
ing reports, writing abstracts, referencing material and presenting data. It also covers 
topics such as documenting software, commenting programs and writing user guides. 
How you present your project in oral form, through presentations and vivas, is the sub-
ject of the next chapter.
• 8.2 Writing and structuring reports
8.2.1   Considerations
As you begin work on your project’s report, bear in mind two main considerations.
● What is the purpose of the report? Is it to obtain the best mark you can achieve for 
your project? Is it to present your work in the best light? Is it to disseminate your ideas 
and results to others? Is it to provide a thorough literature review of the field? Is it to 
inspire others and to persuade them to get involved with your research? Is it to fulfil 
the requirements of your course?
● Who is going to read it? What do they already know? What do you want them to 
learn? What do you want them to gain from your report? How do you want to influ-
ence them? Will it be read by people other than your examiners (future employers, 
other students, academics and experts, for example)?
These considerations will influence what you decide to include in your final report 
and also the style of writing and presentation that you adopt (for example, techni-
cally oriented text for experts or more explanations and examples for the more novice 
reader). You should not include material merely for the sake of it as this might irritate 
the reader and appear like ‘padding’. Similarly, you should not leave material out of 
your report if you think it is important for the targeted readership. Try to get the bal-
ance right – understand what it is you are trying to say, be aware of what the reader 
already knows, and include material appropriately.
Your institution may well have guidelines on how reports should be presented – for 
example, layout of the title page, word counts (upper and lower limits), font size and 
type, line spacing, binding, the number of copies of your dissertation/report that you 
should submit and so on. It is important that you follow these regulations as failure to 
do so may mean that your report is rejected.
One of the most difficult regulations to adhere to in many cases is the word count. 
When the regulations stipulate a word limit, students are often asked to put a word 
count on the front of their report. Although minor indiscretions might be accepted (for 
example, 10,500 words when the limit is 10,000), major deviations from the limit might 

	
8.2 Writing and structuring reports
197
be heavily penalised. If you feel you are going over your allotted word limit, consider 
sections you could cut down, which text you could move into appendices (which will 
probably not be counted) or what text might be better presented in other ways – for 
example, in tables or charts. Berndtsson et al. (2008: 123) suggest that when you con-
sider how long to make your report you should really ask yourself ‘How short can you 
make it?’ This will encourage you to focus on the important points you wish to make 
while excluding all unnecessary material.
8.2.2   Approaches to writing
There are two main approaches that people tend to use when they write reports: the top-
down approach and the evolutionary delivery. These two approaches are not mutually 
exclusive and you may well find yourself adopting both of them to one extent or another 
as you develop your report or dissertation. Whichever approach you use, do not expect 
to get it right first time. Writing involves drafting out ideas, rewriting the text and it may 
take a number of iterations before you are finally satisfied with what you have written.
The top-down approach is used to identify the structure of your report with a chapter 
breakdown structure – how many chapters it will have, what each chapter will contain 
and how each chapter will break down into subsections. With subheadings identified 
you can then go on to complete these sections at an appropriate point in your project 
when results are obtained and information is acquired.
Figure 8.1 provides an example breakdown for this chapter (covering the main sec-
tions). By identifying the content of this chapter as a number of component parts, it 
makes writing much easier and less daunting as individual sections can be tackled one 
at a time. By identifying the overall structure of a chapter it also allows you to keep an 
eye on the overall target of that chapter so that you do not discuss extraneous ideas that 
are out of context with the chapter’s main theme (the chapter breakdown structure will 
probably help you to identify a more appropriate place to enter the misplaced text). 
Chapter breakdowns also help with time management in that they provide you with 
a better understanding of the amount of writing you have to do. This stems from an 
understanding of the complexity of each section, which will give you an idea of how long 
these sections will take to complete.
You might try to identify sections and subsections in your report early on in your 
project. However, as is often the case, it is not until you finally come to completing your 
project that you fully understand what you want to include and can identify the specific 
content of every chapter. Whatever happens, you will find that a report breakdown struc-
ture is a useful way of arranging your thoughts and ideas and identifying how they link 
together within the content of your report.
The other writing approach is the evolutionary delivery. Many people use this 
approach but are not conscious that they are doing so. In this approach you begin to 
write parts of your report and rewrite these parts as your project progresses (drafting 
and redrafting). Each part thus evolves and matures over a period of time as new ideas 
emerge and your understanding increases. Thus, you do not sit down at the end of your 
project and write your report as a one-off. You write it over a much longer period of time 
throughout your project.
The evolutionary delivery leads to a number of drafts of the report that may require 
feedback from your supervisor. It would be inappropriate to inundate your supervisor 

	 Chapter 8 ● Presenting your project in written form  
198
Figure 8.1 A chapter breakdown structure for this chapter

	
8.2 Writing and structuring reports
199
with draft after draft to read through – each one containing only minor changes to the 
previous version. This would be a considerable waste of your supervisor’s time and slow 
your writing down too as you await feedback each time. A more sensible approach to 
presenting a series of drafts to your supervisor might be as outlined below.
● A chapter breakdown structure. This will allow your supervisor to check quickly 
if you are on the right lines, including all the appropriate sections and covering the 
appropriate material.
● A completed major section (perhaps the introduction or literature review). This will 
allow your supervisor to check your writing style, presentation, depth of discussion 
and referencing at an early stage.
● A significant draft. Most of the report should be in place at this stage before you 
obtain feedback from your supervisor. Any incomplete sections should be identified 
with descriptions.
● Completed chapters. As an alternative to presenting a significant draft to your super-
visor, you might want to present your report one chapter at a time as you complete 
them. Your supervisor will probably have more time to read one chapter at a time than 
the entire draft report in go.
● Final draft. This should be virtually the final report and the last draft of the report 
your supervisor will see before it is completed and handed in. It will probably be too 
late for you to make any significant changes to your report at this stage, but your 
supervisor might spot some areas for final improvement.
The two approaches introduced above can be combined so that you identify, per-
haps at the start of your project, the specific sections of some of your report’s chapters. 
You can then begin to write these sections, but will find that they evolve and change as 
your project progresses. You might also find that your report breakdown structure itself 
evolves over time as your understanding increases, your ideas change and develop, and 
you obtain your results.
8.2.3   When should I start writing?
Since personal computers became commonplace from the 1980s onwards, students no 
longer leave the final writing up of their projects to the very end. Before this time, stu-
dents would spend, say, 80% of their effort working on the project itself (the research, 
development, experiments, etc.) before typing up their report/thesis on a typewriter. 
These days, however, it is possible to start work on your report when you start your pro-
ject. This does not mean that you should start writing sections of the report during the first 
week, but you should at least be considering how your report will be structured and laid 
out using a word processing package. It doesn’t mean that you will not have a final ‘writ-
ing up’ stage in your project. It will mean, however, that this stage is no longer a write-up 
of the entire project, but possibly as little as drawing together existing material that you 
have produced and the completion of, say, conclusions, an abstract and a contents page.
As you work on your project and produce word processed reports, documentation 
(for example, requirements specification, design documents, etc.) and papers you should 
try to incorporate these in your evolving dissertation. At the very least you should be 
keeping good notes as your project progresses (a project log book, for example – see 

	 Chapter 8 ● Presenting your project in written form  
200
Chapter 7) so that when you come to the final write-up, all the material and information 
you require are readily available.
At research degree level you may have produced a number of academic 
papers (for example, conference papers, journal papers, internal reports) 
during the course of your project. These might convert readily into the 
main chapters of your thesis – with minor changes to convert section head-
ings to chapter headings and so on. If you have undertaken a software 
development-based project on a taught degree course you may convert 
your requirements documents into a chapter, your designs into a chapter and so on.
Whatever the case, be aware that leaving your entire write-up to the very end (a ‘big 
bang’ approach) is unnecessary these days. Try to ‘chip away’ at your report as you go 
along and maintain good notes. This will mean you do not have to endure the stress of 
a prolonged writing phase when your project nears completion.
8.2.4   The order to writing
There is a particular order to writing that you should try to follow. This order breaks 
down into ten stages.
	 1.	 Identify structure. This relates to the content of your report, using a report break-
down structure. Although a specific content structure might not be entirely clear 
to you at an early stage, you should attempt to produce as much detail for each 
chapter’s breakdown as possible. Report breakdown structures were discussed in 
the previous section.
	 2.	 Identify presentational style. You should also try to set standards at this stage on 
the presentational aspects of your report, for example, its layout, font, line spac-
ing, numbering conventions, etc. This will save time later when you are trying to 
collate your chapters and sections and find they are presented inconsistently. Make 
sure that you follow any guidelines that your institution provides. If there are no 
guidelines, Cornford and Smithson (2006: 177) identify a number of points you 
should consider for your report’s layout.
● Avoid broad, open spaces or cramped layouts. Try to make sure figures and 
tables do not force large gaps into your text.
● Use a clear 11 or 12 point font. Use something that is easy to read – a serif font 
for the main text such as Times – and a sans-serif font for headings such as Arial. 
Don’t use too many fonts as this will look messy.
● Use a single, justified column with adequate margins for binding. However, it is 
sometimes argued that two columns are easier to read than one as text lines are 
shorter. Check your institution’s guidelines and ask your supervisor for advice.
● Use page numbers centred at the foot of each page.
	
	
You might also wish to define your own presentation style such as line spacing 
(1.5 or 2 point), a section numbering convention (for example, ‘1.2 Section title’) 
and paragraph styles (for example, start each paragraph on a new line tabbed in).
	
	
With colour printers, you might also decide how to use colours to enhance text 
and presentation within your report. Be careful not to introduce a complex style 
such as red text for chapter titles, blue for section headings and so on. This kind 
of presentation looks very messy and it is best to stick with black text for the bulk 

	
8.2 Writing and structuring reports
201
of your report. Colours can, however, be used very effectively to enhance tables 
and highlight certain points. For example, to distinguish different parts of a table 
presenting statistical data, you might wish to use colour to highlight significant 
results.
	 3.	 Draft the introduction. The introduction gives the reader an idea of the report’s 
content so it should also help you to clarify your own ideas. At this stage, however, 
your introduction will only be a first draft as your ideas are bound to evolve and 
your emphasis change by the time you have completed your report. Remember that 
your introduction might include, or consist mainly of, your literature review. As 
such, it should be tackled early so that your grounding in the subject is complete.
	 4.	 Main body. The main body of your report is the next part you should work on. 
You might include chapters such as methods used, analyses performed, etc. Clearly 
the content of the main body of your report will depend on the project you have 
undertaken. You may find that you write parts of the main body of your report as 
your project progresses and you will not necessarily write each chapter or section 
in order. Examples of ‘typical’ chapters that form the main body of different project 
reports are presented in the following section.
	 5.	 Conclusions and recommendations. Quite clearly your conclusions and recom-
mendations should be one of the last things that you complete. Only when your 
project is complete will you fully understand what you have achieved and be able 
to present you final ideas and recommendations.
	 6.	 Complete the introduction. As part of the evolutionary approach to writing you 
may well find that your introduction needs some reworking after you have com-
pleted the rest of your project’s report. You may want to include some text allud-
ing to your final results or introduce more background on a topic you have since 
focused on in more detail within your report.
	 7.	 Write the abstract. You cannot really write a clear abstract for your report until 
you know what has been included in it. How to write effective abstracts is covered 
in detail later in this chapter.
	 8.	 References and appendices. Although you will be collating references and appen-
dices’ material as your project progresses, you should not complete their presen-
tation until the rest of the report has been written. References may be added or 
deleted and you may decide to include or exclude material from the appendices.
	 9.	 Arrange contents list, index. Leave the completion of an index (if one is required) 
and your contents list until the end. Only then will you know the exact content of 
your report and all page numbers.
	10.	 Proofread, check and correct. It is vitally important to proofread your report 
after it is completed. Quite often, because you have been so close to your report 
for so long, reading through your report straight away might mean that you miss 
glaring errors or omissions. You know what you meant to write so this is what you 
read, whether it is written or not. With this in mind it is a good idea to leave your 
report for a day or two before proofreading it or, preferably, get someone else to 
do it for you. Bear in mind that if you do this you will need to complete your report 
a few days before its deadline to allow time for proofreading and correcting or 
changing any points that emerge.

	 Chapter 8 ● Presenting your project in written form  
202
8.2.5   Structure
Your report should be structured into the following sections.
● Title page or cover sheet – follow any guidelines provided (your supervisor should 
advise you on this issue). If there are no guidelines, as a minimum you should include 
title, author, date and degree award (perhaps look at some past projects to see how 
they presented their title pages in your institution).
● Abstract.
● Acknowledgements – to people (and organisations/companies) you wish to thank for 
helping you with your project. Avoid acknowledging friends/relatives/people/gods/ 
organisations, etc. that have only had indirect influence on you or your project (for exam-
ple, ‘Uncle Arthur who taught me the importance of managing my time when I was 8’).
● Contents listing.
● List of figures and tables – this is not compulsory and you should include these lists 
only if you feel they will add value to your report and will be useful for the reader. 
Otherwise leave these out as they take time to compile and maintain.
● The report itself (three main sections):
1.	 Introduction/literature review. The first chapter of your report should always be 
an introduction. Quite often introductory chapters serve to present the literature 
review. Alternatively, the introduction serves as a brief overview of the project 
and the report, and the literature review is presented as a chapter in its own right 
later – probably Chapter  2.
Your introduction should set the scene for the project report, include your 
project’s aims and objectives, introduce the project’s stakeholders and the topic 
area, and provide an overview of your report. Berndtsson et al. (2008: 129) also 
suggest that the introduction should include the ‘purpose and situation – indicat-
ing why the report was written and what the purpose was’. They go on to suggest 
that you should also target the reader – i.e., you should state clearly at whom the 
report is aimed – who will be interested in the report.
2.	 Main body – the content of which depends on the type of project you are under-
taking. Some examples are provided below.
3.	 Conclusions/recommendations – summarises the contribution of the work and 
identifies future work, etc. This is discussed in more detail below.
● References – presented in an appropriate format. Referencing material is discussed in 
more detail later in this chapter.
● Appendices – labelled as Appendix A, Appendix B, Appendix C, etc. These may include 
program listings, test results, questionnaire results, interviews you have transcribed, 
extracts from manuals, letters/correspondence you have received and project details 
such as your initial proposal, your project plan (and other project management documen-
tation) and meeting reports. You may also include a user manual and installation guide 
and perhaps extracts or examples of data or data sets used. Consult with your supervisor 
over what should and what should not be included in the appendices of your report.
● Glossary of terms – if required.
● Index – if required – but avoid if possible.

	
8.2 Writing and structuring reports
203
A typical structure that many of my undergraduate students use for projects that have 
involved the development of a software system is:
● Abstract
● Acknowledgements
● Contents listing
● Chapter 1 – Introduction
● Chapter 2 – Literature review
● Chapter 3 – Requirements
● Chapter 4 – Design
● Chapter 5 – Implementation and test
● Chapter 6 – Evaluation
● Chapter 7 – Conclusions
● References
● Appendices
Figure 8.2 provides an indication of how the chapters in this kind of report structure 
relate to one another (those of you familiar with software engineering may recognise this 
as an adaptation of the v-process model). For example, the Conclusions chapter evalu-
ates the project overall – how well it achieves its aims and objectives (outlined in the 
Introduction) and how it fits in and supports existing work in the field (covered in the 
Literature review); the Evaluation (of the software) chapter appraises the system devel-
oped with the original requirements and evaluates whether those requirements were 
appropriate; the Implementation chapter discusses how the software was implemented 
and how the implementation follows the design presented in the previous chapter.
Sometimes students will swap over Chapters 2 and 3 (Literature review and Require-
ments) to provide the reader with more information about what the project is about 
before setting it in a wider context. Another variation is to combine Chapters 4 and 5 into 
a Design and implementation chapter and move all testing (of the software, including 
test plans and so on) and evaluation into Chapter 6. Chapter 6 (Evaluation) covers the 
evaluation of the product developed – i.e., what the user(s)/client think of the system, 
how it compares with other systems, how it matches the requirements and so on.
Figure 8.2 The relationship between chapters

	 Chapter 8 ● Presenting your project in written form  
204
The final chapter (Conclusion) presents an evaluation of the project – it summarises 
what the project has achieved (what has been its contribution) and how the project has 
met its initial aims and objectives (and if not, it explains why). How does this project fit 
into and enhance existing work in the field? How has it filled the gap identified in the 
earlier chapters? This chapter also covers a number of other issues. For example, was the 
development process model used appropriate (if not, why not and what else should have 
been used)? Was the programming language (if used) suitable? What problems did you 
face and how did you overcome them? What would you do next if you had more time? If 
you were to do the project again, what would you do differently? What have you learnt 
and experienced from doing the project? How do you recommend the project should 
be taken forward in the future?
Note that a conclusion is not a summary. A conclusion does much more than simply 
summarise the content of the report. It should state that, having done this work, we are 
now in a position to do X and explain what the limitations and applications are of the work.
For information systems-type projects, Berndtsson et al. (2008: 128–131) suggest the 
following structure for the main body of a final year report:
● Chapter 1 – Introduction
● Chapter 2 – Background
● Chapter 3 – Problem description and problem statement
● Chapter 4 – Theory
● Chapter 5 – Methods
● Chapter 6 – Results
● Chapter 7 – Related work
● Chapter 8 – Conclusions
The Introduction and Background (equivalent to a literature review) are similar in 
nature to the outline for the software development project above. Chapter 3, in this case, 
identifies clearly the problem that the project is setting out to solve and why this problem 
is worth solving. Chapter 4 discusses any existing theories and ideas associated with the 
problem. Chapter 5 discusses the methods that were used (and, possibly, adapted in 
some way) to solve the problem. Chapter 6 presents the results and Chapter 7 goes on 
to show how these results fit in with existing work – how they contribute, complement 
and support (and perhaps contradict) the work of others in related fields. The concluding 
chapter works in much the same way as before, although Berndtsson et al. (ibid.) point 
out that this chapter ‘should not present any new details of the approach or results, etc., 
which have not been explained in previous chapters’. They also identify a number of 
other issues that the concluding chapter should address.
● What can the results be used for? In other words, how can the reader benefit from 
knowing what they have learnt from the report? To what can they apply your 
results?
● Can related research areas benefit from the results? Is what you have discovered or 
developed applicable to other research areas? What are the limitations of the approach 
and of the results?

	
8.2 Writing and structuring reports
205
● Are the results theoretical or do they have a real-world application?
● How do the results compare with related research?
● Has the work identified new questions that need to be answered? Has the work identi-
fied new areas of research?
The structure presented by Berndtsson et al. (ibid.) is much the same 
as that suggested by Chinneck (1999) for graduate courses (i.e. research 
degrees). Chinneck suggests the following chapter breakdown:
● Chapter 1 – Introduction
● Chapter 2 – Background
● Chapter 3 – Review of the state-of-the-art
● Chapter 4 – Research question or problem statement
● Chapter 5 – How the problem was solved
● Chapter 6 – Conclusions
In this case Chapters 1 and 2 cover the introductory and background material as before 
and Chapter 3 is the literature review. Chapter 4 is equivalent to Berndtsson et al.’s (2008) 
Chapters 3 and 4 (Problem description and problem statement and Theory) and Chapter 5 
encompasses Berndtsson et al.’s Chapters 5 and 6 (Methods and Results). As this is a 
research-based report there is more emphasis in Chapter 6 (Conclusions) on contributions 
and future work.
In a similar vein Bell (2010: 241–246) proposes the following structure for 
the main body of a report for research projects:
● Chapter 1 – Aims and purpose
● Chapter 2 – Literature review
● Chapter 3 – Method(s) of data collection
● Chapter 4 – Statement of results
● Chapter 5 – Analysis and discussion
● Chapter 6 – Summary and conclusions
This structure is similar to that of Berndtsson et al. (2008) in which, once the back-
ground and literature review are completed, the report presents the method(s) of col-
lecting data before presenting the results. In this case the presentation of results is split 
across two chapters – Chapter 4 presenting a description of the data that were collected 
(including appropriate figures and tables to summarise results) with Chapter 5 analysing 
and discussing these results. Chapter 4 presents the factual results of the study, whereas 
Chapter 5 presents the interpretation of these results.
In conclusion, there is no right or wrong way to structure a report into a series of 
chapters – you should do what is appropriate for your own project. You might want to 
adopt one of the structures presented here or some combination of these suggestions. 
It is advisable to consult similar (past) student projects to your own to get an idea of the 
structure used. Your supervisor should certainly advise you on an appropriate structure 
for your report.

	 Chapter 8 ● Presenting your project in written form  
206
8.2.6   Style
The style of writing that you adopt to present your report can be discussed from three 
points of view. First is the actual presentation style of your report – for example, its 
layout, font size and so on. This kind of style was discussed earlier. Second is the style 
of grammar that you use within your report. Quite often good reports can be ruined by 
poor grammar. The author’s meaning is unclear as ideas and results are hidden within 
long complex sentences that include excessive words and jargon. The third point of view 
is overall content structure, which was discussed earlier.
A good writing style comes with practice – the more you write the easier it becomes. 
Reading also helps to improve your own writing skills as you learn elements of good 
practice and identify interesting ways of discussing and presenting arguments. Having 
said this, there are some simple rules that anyone can follow to improve their writing 
style for professional reports. Try to write in the third person – in other words, try to 
avoid using personal pronouns such as I, you, we, my and so on – but make sure that you 
don’t end up producing elaborate, complex sentences just to avoid this. For example, 
take the following sentence from a student report:
I interviewed seven people to see what they thought of the system.
This could easily be reworded to a less ‘chatty’ style and without the ‘I’ to:
Seven people were interviewed to determine their thoughts on the system.
Your supervisor should be able to advise you on this point and it may be that the 
nature of your project requires you to use a more personal approach.
Keep sentences short and to the point. Avoid making several points within the same 
sentence. Avoid abbreviations, jargon and slang. Use simple, rather than complex words; 
the latter is often irritating for the reader, it clouds the meaning of your sentences and is 
often used to hide your own lack of understanding about the subject which the educated 
reader will spot. Try to keep your report gender-free – for example, use ‘s/he’ or ‘they’ 
rather than ‘he’.
It is common practice to present your report in the past tense as the report represents 
the results of the project which you have completed. Having said this, Day (2011) sug-
gests that the present tense should be used when referring to the work of others (just 
like this sentence does!). Referencing material will be discussed in detail later, but bear 
this point in mind.
Avoid jokes and personal asides. Avoid shortened forms such as ‘isn’t’ instead of ‘is 
not’ unless you feel that the report will not flow well without these forms. Make sure 
you know how to use apostrophes – for example, ‘John’s computer’ rather than ‘Johns’ 
computer’ or ‘Johns computer’. Finally, make sure that you use a spell checker; sloppy 
spelling puts many reports into a bad light.
Chinneck (1999) notes two further tips when writing reports.
● Avoid terms such as ‘clearly’ or ‘obviously’. You might understand the fact to which 
you are referring but it may not be clear to the reader. The reader may also feel they 
are being ‘stupid’ if they don’t see the point clearly or obviously.
● Avoid red flags. These are claims that are your personal opinion rather than accepted 
facts supported by the literature. For example, ‘requirements capture is the longest 

	
8.2 Writing and structuring reports
207
stage of the software development process’. You should make sure that if you include 
these kinds of claims you support them with either an appropriate reference or a 
‘caveat word’ such as ‘often’ or ‘sometimes’. For example, the previous statement 
could be reworded as ‘requirements capture is often the longest stage of the software 
development process’.
Moving away from basic grammar, the third style to consider when writing project 
reports is overall content structure. This was discussed in detail in the previous section 
but remember, at the top level, your report should be constructed so that it has a:
Beginning – the introduction and literature review which set the scene;
Middle – the bulk of your report where the main component of your project is 
discussed;
End – conclusions, summary, recommendations and future work.
This kind of structure should also be evident within individual chapters of your report. 
They too should have an introduction (possibly a chapter overview), the main body of 
the chapter, and an end (possibly a chapter summary or conclusions from the chapter).
8.2.7   Word processing
For computing students it goes without saying that the best way to produce your report 
is with a word processor of one kind or another. These packages are far more effec-
tive than type written or hand written work alone. Almost all word processors come 
with dictionaries and a thesaurus facility built in. In addition, many are equipped with 
equation editors that can help you produce neat equations embedded within your text. 
Alternatively, equation editors are available that can be used to ‘construct’ equations 
before pasting them into your report. The following is an example of an equation that 
has been pasted into the text (this was produced using Microsoft® Equation 3.0 which 
was installed in Microsoft® Word). Notice how this equation has been given a reference 
number (8.1 in this case) which you must always include to uniquely identify each equa-
tion you incorporate in your report. Make sure you explain/define all the terms used 
within an equation.
f (N) 
N(N −1)
S2(N −1)
Σ
  	
(8.1)
Be careful when using in-built spell checkers. Many are based on American dictionar-
ies and will change words to their American equivalent; for example, ‘center’ instead of 
‘centre’ (or vice-versa if you are an American reader!). Spell checkers might also change 
spelling ‘errors’ within verbatim quotes you have used from other authors.
Grammar checkers should also be used with caution. What might appear an elegant, 
well-constructed sentence to you might be changed automatically by a grammar checker. 
However, if you feel that your grammar is weak, these facilities are invaluable.
While most students will use a WYSIWYG (What You See Is What You Get) word 
processor (for example, Microsoft® Word) for their reports, for those undertaking 
more technical reports with lots of mathematical equations, a text formatter such as 
LaTeX (pronounced LayTech) may be more appropriate. LaTeX is a text formatting 

	 Chapter 8 ● Presenting your project in written form  
208
tool that takes a text document prepared by you and converts it into a form that can 
be printed. The text document is encoded in a similar way to HTML in that different 
markers within the document format the text in different ways when it is printed out. 
LaTeX has facilities for automatically numbering chapters, sections, equations, etc. It 
is mainly used within the computer science and mathematics fields and by professional 
publishers.
Oetiker et al. (2008: 3–4) list the following advantages of LaTeX over conventional 
word processors:
● The documents produced are ‘professionally crafted’ and look as if they have been 
‘printed’.
● Mathematical formulae are easily typeset.
● You only need to learn a few commands that specify the structure of the document.
● Footnotes, references, contents tables, etc. can be easily generated.
● It encourages users to write well-structured reports because this is how LaTeX works.
● The tool is free and portable between systems.
For those of you using Linux or UNIX, the chances are that your system already has 
LaTeX installed (speak to your supervisor or technical staff for help). For those with 
Windows®-based systems you can use a system called MiKTeX, which can be down-
loaded from http://miktex.org/. Macintosh users can use a similar system called 
OzTeX which is also freely available from numerous sites on the Internet.
8.2.8   Tips
This section on report writing will conclude with a few report writing tips to help you. 
Bell (2010: 252–255) identifies a number of points that can help you discipline yourself 
and improve your writing skills.
● Set deadlines. Your report will take a long time to produce. If you do not set yourself 
deadlines and stick to them, you will not finish on time. Using a report breakdown 
structure can help you to plan your time commitments more accurately.
● Write regularly. Find your best time of day for writing and your favourite location. In 
other words, make sure that you ‘write when your mind is fresh’ and ‘find a regular 
writing place’ (Saunders et al., 2012: 597). People often find they cannot write with 
distractions or when they are over-tired.
● Create a work rhythm. Once you are under way, keep going. Don’t stop to check a 
reference if the text is flowing, keep going until you reach a natural break.
● Write up sections when they are ready – when they are clear in your mind. This will 
also save time towards the end of your project when your project write-up might be 
little more than a collation of your existing text and producing an introduction and 
conclusion.
● Stop at a point from which it is easy to restart. It can often take a lot of time to get 
going again after a break so try to stop at a natural break in your report – for example, 
when you have completed an entire section. Trying to pick up from where you left off 
the previous day or week can be difficult as you might have forgotten what it was you 

	
8.3 Writing abstracts
209
intended to write. If a break in your work is unavoidable, make a note of what you 
intended to do next so that when you come back to your writing later you can pick 
up from where you left off more easily.
● Collate all the material you need together before starting to write. Breaking your writ-
ing flow to search for a reference or visit the library to trace a vital book will not help.
● Allow time for revision. You will not produce a perfect report in one sitting. Make 
sure you allow plenty of time to check and improve what is written.
● Read out loud. By reading your report out loud to yourself it will help you spot gram-
matical errors, overly long sentences, poorly written sentences, odd punctuation and 
whether or not the text makes sense.
● Get someone else to read it. Another person will often spot errors you don’t. Because 
you have been so close to your report you read what you expect to read rather than 
what is actually written. A different set of eyes will pick up mistakes that you have 
missed.
● Avoid perfectionism when writing your report. It is better to get something down 
that is approximately right to start with (and you can edit later), than agonising over 
each sentence trying to get them perfect. Don’t keep trying to get one section/chapter 
perfect before moving onto the next. When you have said approximately what you 
want to say, move onto the next section/chapter – you can always return to them 
later if there is time. There is a well-used phrase that is appropriate here – ‘Don’t get 
it right – get it written’.
• 8.3 Writing abstracts
Blaxter et al. (2010: 286) define the function of an abstract as to ‘summarize the nature 
of your research project, its context, how it was carried out, and what its major findings 
were’. The abstract provides the reader with an overview of your project and is the basis 
on which many readers will decide whether or not to read your report at all. With this 
in mind your abstract should be concise (preferably no more than one page long), clear 
and interesting.
Many abstracts are structured like a contents listing, but this is of little value to the 
reader who can refer to the report’s actual contents list for this kind of information. Your 
report’s abstract should be one of the last things you write; when you actually know 
what you have achieved and what the content of your report is. Avoid using references 
in your abstract as the reader will not necessarily wish to search through your report 
to find them or be familiar with the author(s) you have cited. In addition, avoid using 
jargon and acronyms – these should be introduced only in the main body of your report.
There are three possible components to an abstract, the inclusion and coverage of 
which depend on the nature of the report you are producing – context, gap and con-
tribution. The context introduces the topic area in which your project resides; it can 
include coverage of related topics and issues, and generally sets the scene for the reader 
so they can comprehend your project’s subject area. Particularly for research-based 
projects (MPhils and PhDs, for example) you will then want to identify any gaps or 
shortfalls within the topic area that your project is going to explore and, hopefully, 

	 Chapter 8 ● Presenting your project in written form  
210
contribute to. The final component covers the contribution or content of your report 
itself. In other words, what does your report contain that fills the gap you have identi-
fied or what does your report contain in relation to the context you have discussed?
To get a ‘feel’ for good and bad abstract presentation pay careful attention to the way 
others structure the abstracts of articles that you obtain. Take, as examples, the following 
abstracts for the same article – based on an artificial neural network (ANN) approach to 
predicting software development costs.
Abstract 1
This article investigates the application of ANNs to software development cost estima-
tion. It begins by discussing existing software prediction techniques such as COCOMO 
(Boehm, 1981) and Delphi (Helmer-Heidelberg, 1966). The article identifies the process 
of software cost estimation and uses this as a basis on which to apply the ANNs developed 
for this project. Equations are presented showing how improvements can be made to the 
backpropogation algorithm used in ANN training. ANN simulation is also discussed. An 
evaluation of the results from the ANNs is presented and these results compare favourably 
with existing techniques identified in the paper.
Abstract 2
One of the major problems with software development projects is that it is extremely dif-
ficult to estimate accurately their cost, duration and resource requirements. This invari-
ably leads to problems in project management and control. Part of the problem is that 
during the early stages of these projects very little is known about the problem domain 
and, consequently, initial estimates tend to be best guesses by a project manager. Artifi-
cial neural networks appear well suited to problems of this nature as they can be trained 
to understand the explicit and inexplicit factors that drive a software project’s cost. For 
this reason, artificial neural networks were investigated as a potential tool to improve 
software project effort estimation using project data supplied by a software development 
company. In order to deal with uncertainties that exist in initial project estimates, the 
concept of neural network simulation was developed and employed. This paper discusses 
this concept and comments on the results that were obtained when artificial neural net-
works were trained and tested on the data supplied.
The first abstract is presented (incorrectly) as a contents listing, whereas the second 
sets the scene for the article and identifies the content and contribution that the arti-
cle is making. The first abstract is presented as a breakdown of the article’s sections 
and it includes acronyms and (somewhat outdated) references to papers that may be 
unfamiliar to the reader. The second article avoids these pitfalls and presents a much 
better overview of what the reader will gain by reading the article. It sets the scene by 

	
8.4 Data presentation
211
introducing the field in which the project resides. It then identifies some problems 
with the field before going on to state how the article attempts to fill this gap. When 
writing your own abstract try to follow the structure and style of the second abstract 
presented here.
• 8.4 Data presentation
8.4.1   Introduction
In almost all projects you will have to present data in one format or another – data 
you obtain from questionnaires or surveys, software test results, algorithm speed trials, 
etc. Whereas textual presentation of numeric results can often provide a rather ‘dry’ 
interpretation of the information gathered, pictures, in the form of graphs and charts, 
provide a far more pleasing, intuitive and holistic idea of what is going on. A ‘diagram 
can often simplify quite complex data which could take a paragraph or more to explain’ 
(Bell, 2010: 234).
Although a picture is worth a thousand words you must ensure that the picture you 
are painting is the correct one and you are not presenting results in such a way as to hide 
their true meaning. Benjamin Disraeli (1804–1881) said that there are three kinds of 
lies: ‘lies, damned lies and statistics’, the implication being that you can make statistical 
results say practically anything you want them to say. Remember, when you compile 
your report, that you must be objective and present your results in a clear and honest 
way. This section deals with presenting information using charts and tables, presenting 
various examples of some of the most popular charts that are used, and showing some 
instances where charts are used incorrectly.
8.4.2   Presenting charts and graphs
All figures and tables that you include within you report should be clearly and uniquely 
labelled with a number and a short description. The most common approach is to label 
each figure and table using consecutive numbers prefixed by the current chapter number. 
The approach used within this book, where we have, for example, ‘Figure 8.1 A chapter 
breakdown structure for this chapter’, is quite a common standard which you can fol-
low. Note that it is permissible to label a table and a figure with the same number; for 
example, Table 8.1 and Figure 8.1 refer to two different items within a report. When 
labelling a figure it is usual to put the caption beneath the figure. When labelling a table 
it is often better to place the caption above the table (because sometimes tables cover 
several pages). Above all, be consistent and don’t change the way in which figures and 
tables are labelled from one chapter to the next.
When you use figures and tables within a report they should be included because they 
add something of value to the report. They should not be included because you think 
they look nice. Figures and tables should help to clarify and support information you are 
presenting within the text of the report and should be included as close to their original 
reference point as possible, but not before. Take, as an example, Table 8.1. This table 
presents the final degree classifications of 100 students who completed their Computer 
Science course in 2014.

	 Chapter 8 ● Presenting your project in written form  
212
Table 8.1 presents these data in a much clearer way than you could hope to achieve 
using text alone. For example, compare this table with:
‘Seven students obtained first class degrees, twenty three obtained an upper sec-
ond, thirty eight achieved a lower second, seventeen received third class degrees, ten 
achieved only a pass degree, and five students failed.’
Although Table 8.1 is easier to follow than the text presented above, it is not nec-
essarily the best way of presenting these data. Figure 8.3 is perhaps a clearer way of 
interpreting these results and it provides a more ‘holistic’ view of the spread, pattern or 
distribution of degree grades. Note that the distribution of data is only relevant when 
the data are of at least ordinal scaling. In other words, the categories into which the data 
are arranged represent an increasing magnitude of one kind or another (for example, 
the position of runners in a race; good, average or poor software quality and so on). 
Data that merely represent classes in which the order is irrelevant (for example, gender, 
religious belief, etc.) have no distribution as such and the order of the columns in these 
charts is unimportant. In this case the chart can only emphasise the difference between 
the number of items identified within each category.
Figure 8.3 is a vertical bar chart or column chart. These charts can also be presented 
horizontally but, generally, the vertical representation is preferred. Bar charts are used to 
present categorical data and are useful for presenting the results of questionnaires which 
have used Likert-type scales. These scales ‘indicate strength of agreement or disagree-
ment with a given statement’ (Bell 2010: 226). For example, ‘Do you think this software 
is poor, average, or good?’ Note how, on this chart, the data have been split into columns 
with gaps between, both axes have been labelled and the chart has been uniquely titled 
as Figure 8.3 with a corresponding brief label.
For continuous data an alternative to the bar chart is required as the data are not 
arranged in distinct categories but can take any real value (for example, age, size, weight, 
etc.). In these cases a histogram is used. Histograms present data in a similar way to bar 
Figure 8.3 Bar chart showing degree classification of 100 students
1st
2:1
2:2
3rd
Pass
Fail
7
23
38
17
10
5
Table 8.1  Degree classification of 100 students

	
8.4 Data presentation
213
charts in that columns are used to represent frequencies of occurrence of a particular data 
item. However, because histograms present continuous data, it is now up to you how 
you split the data into unique categories. Remember that bar charts have their categories 
defined for them based on the categories defined within the data they represent. As an 
example, Figure 8.4 presents a histogram showing the age of the 100 Computer Science 
students at graduation.
In Figure 8.4 the age of graduates has been split into eight unique categories: 20 
to 22, 22 to 24, 24 to 26 years old and so on. It has been assumed, in this case, that 
each category’s upper boundary is actually one day before the year indicated, so that 
people whose even-numbered birthday (20, 22, 24, etc.) falls on the day of the survey 
will be placed in the next category up (i.e., 20 to 22 actually represents 20 years to 
21 years 364 days old). Each column now represents the number of students that fall 
within the defined range. Notice how the bars in this chart are now touching. This 
highlights the fact that the data are continuous and there is no absolute break between 
the categories.
There is no reason why you could not, alternatively, have defined the categories as 20 
to 25, 25 to 30, 30 to 35, etc. This results in the histogram shown in Figure 8.5.
Figure 8.5 provides a ‘coarser’ interpretation of the findings and, perhaps, provides a 
poorer overview of the spread of student ages at graduation. This figure emphasises the 
importance of carefully selecting appropriate categories for presenting continuous data 
Figure 8.4 Histogram showing age of 100 students on graduation
0
5
10
15
20
25
30
35
Number of students
20
24
26
28
30
32
34
36
38
Age (years)
22
Figure 8.5 Histogram showing age of 100 students on graduation
0
10
20
30
40
50
60
70
80
Number of students
Age (years)
20
30
35
40
25

	 Chapter 8 ● Presenting your project in written form  
214
in histograms. Splitting your data into too many categories can lead to a number of gaps, 
while splitting your data into too few categories can lead to broad, ‘high’ bars that provide 
little indication of the underlying distribution.
Another form of chart you may wish to use within your report is a pie chart. Pie 
charts are used to show proportions of categories within your data. Take, as an example, 
Figure 8.6 which presents the same data as those presented in Figure 8.3. Whereas Fig-
ure 8.3 shows the distribution of degree classifications, the pie chart in Figure 8.6 shows 
the proportion of students with particular degree classifications. Which figure you use 
would depend on what you were trying to emphasise or explain within your report. You 
would use a pie chart to discuss proportions and a bar chart to discuss distributions.
Figure 8.6 also highlights three presentation points you should consider when pre-
senting pie charts. First, keep the chart flat, avoid making it 3D. Second, starting from 
the 12 o’clock position, order the segments according to size – largest to smallest. How-
ever, when the data are ordinal in nature (i.e. there is some order to the data – as in this 
case ranging from first class marks to fail), it might be better to arrange the segments in 
this more logical order. Finally, use denser shadings for smaller areas.
Pie charts come in various shapes and sizes: three-dimensional, exploded, coloured, 
shaded, wheels, etc., and most spreadsheet packages provide you with these formats. 
How you present your charts is clearly up to you, but bear in mind that these elaborate 
formats can confuse the reader – don’t get so carried away with a chart’s presentation 
that you obscure the real meaning of the data you are presenting.
While you could use several pie charts next to one another to compare proportions 
between two or more subjects, a combined bar chart, such as that shown in Figure 8.7, 
can be used to present this comparison more clearly. In this case the spread of degree 
grades at four universities (A, B, C and D) is presented. Notice how a legend has been 
included in this chart to identify the shading used in the columns and how this legend 
and shading follow a logical top-down approach based on degree classification from 
First to Fail.
Figure 8.6 Pie chart showing degree classification of 100 students
2:1
23%
1st
7%
Fail
5%
Pass
10%
3rd
17%
2:2
38%

	
8.4 Data presentation
215
If you weren’t interested in looking at proportions between categories but actual 
values, you could use combined bar charts such as that shown in Figure 8.8. In this 
figure you can see the number of students graduating in Computer Science categorised 
according to their gender. The bars are arranged in degree classification order and split 
according to gender, i.e., gender is identified within each degree classification.
Note that the bar chart in Figure 8.8 has been presented in a rather conventional for-
mat. These days you will quite often see three-dimensional plots, colours and shading 
used to enhance the attractiveness of such charts. Be careful that you do not obscure 
the true meaning of what you are trying to portray or hide insignificant findings behind 
elaborate diagrams and figures.
Figure 8.9 takes the data used in Figure 8.8 and transposes the groupings to present 
the results of Figure 8.8 in a slightly different way. This time the bars have been split into 
degree classification and these grades grouped by gender. Once again, how you present 
these data is up to you and will depend on what you are trying to emphasise. Figure 8.8 is 
concerned with showing how each individual grade is spread between men and women. 
Figure 8.9 is concerned with showing the spread of grades for all men and the spread of 
grades for all women.
One drawback within Figures 8.8 and 8.9 is that the total number of male and the 
total number of female students differs. Ideally one would like to see the proportion of 
men obtaining Firsts, 2:1s, 2:2s, etc. and be able to compare this with the proportion 
of women obtaining these grades. For example, do women, on average, obtain more 
Figure 8.7 Comparison of pass rates at four universities
20
40
Percentage of students
60
80
100
0
A
B
C
University
D
1st
3rd
Pass
Fail
2:1
2:2
Figure 8.8 Degree classification and gender of 125 recent graduates

	 Chapter 8 ● Presenting your project in written form  
216
Firsts than men? Although you would need to perform a statistical analysis on your data 
to ‘prove’ this, the charts would present a clear, visual overview of the situation. Your 
y-axis in both of these cases would be relabelled as ‘Percentage of students’ as opposed to 
‘Number of students’ and the charts would provide a better comparison of grade spread 
based on gender – if this is what you wanted.
Another form of chart you may find useful is a line chart. These figures are gener-
ally used to show trends over periods of time. Figure 8.10 presents such a chart, in this 
case showing the trend (if indeed there is one) of Firsts and Upper Seconds awarded 
between 2000 and 2015. Note that this only provides a visual interpretation of these data. 
The scale presents raw numbers rather than percentages so you would have to consider 
whether a change in student numbers over time was affecting the results (for example, 
if student numbers had risen ‘significantly’ during this time then the number of Firsts 
and Upper Seconds should have increased too). You would need to perform some sta-
tistical analyses on your data to determine whether there was a significant trend or not. 
Statistical tests are beyond the intended scope of this book as there are numerous texts 
available that deal with these issues.
The last form of ‘popular’ chart to look at within this section is the scatter diagram. 
Scatter diagrams are used to show the relationship between two variables. For example, 
Figure 8.10 Trends in Firsts and Upper Seconds, 2000–2015
10
5
0
'00 '01 '02 '03 '04 '05 '06 '07 '08
Year
'09 '10 '11 '12 '13 '14 '15
25
20
Number of students
15
2:1
1st
Figure 8.9 Alternative view of degree classification and gender of 125 recent graduates

	
8.4 Data presentation
217
Figure 8.11 plots the assignment grades of 30 information systems students against the 
number of hours each student worked on their assignment. Notice how the chart shows 
a general upward trend, perhaps indicating that there is a relationship between these 
two variables. Although the strength and significance of this relationship would be cal-
culated statistically, the chart provides a visual interpretation of this relationship which 
is perhaps easier to follow than some statistical calculations. This is not to say that you 
could omit any rigorous statistical interpretation of data that you obtain but that you can 
support these calculations and improve their presentation by use of appropriate figures 
and tables within your report.
8.4.3   Checklist
Saunders et al. (2012: 488) present a checklist of points that you should observe when 
you have completed tables and figures within your report. For both diagrams and tables 
they recommend that you should ask yourself the following questions:
● ‘Does it have a brief but clear and descriptive title?’
● ‘Are the units of measurement used stated clearly?’
● ‘Are the sources of data used stated clearly?’
● ‘Are there notes to explain abbreviations and unusual terminology?’
● ‘Have you stated the sample size?’
For diagrams the following checklist of questions is suggested:
● Does it have clear axis labels?’
● ‘Are bars and their components in the same logical sequence?’
● ‘Is more dense shading used for smaller areas?’
● ‘Is a key or legend included (where necessary)?’
And for tables
● ‘Does it have clear column and row headings?’
● ‘Are columns and rows in a logical sequence?’
Figure 8.11 Relationship between assignment grade and hours of effort of 30 students
0
10
20
30
40
50
60
70
80
90
100
0
5
10
15
20
25
Assignment grade
(percentage)
Number of hours worked

	 Chapter 8 ● Presenting your project in written form  
218
8.4.4   Common mistakes
You should not include figures and tables within your report just for the sake of it. They 
should be there to support arguments you make within the text and to clarify, in dia-
grammatical form, data, results and interpretations you are making. This leads to the 
first common mistake that people sometimes make in using figures and tables – includ-
ing them unnecessarily. Figure 8.12 is an example of just such a case where a pie chart is 
presented (sometimes even on a whole page) adding no value to the report whatsoever. 
In this case, as 100% of those questioned responded ‘Yes’, the use of the pie chart, which 
normally shows proportions, is unnecessary and makes the report look as though it is 
being padded out because it has little of real value to say.
The second common mistake made when using charts is to use them inappropriately 
when other charts would present your data in a much clearer light. Figure 8.13 provides 
just such an example – in this case a line chart is being used when a trend isn’t the focus of 
attention. Although one might be interested in trying to identify the shape of the under-
lying distribution of degree grades, a bar chart would be more appropriate in this case.
Another common mistake people make when including charts within reports is to 
scale them incorrectly. Sometimes this is done deliberately to hide the true meaning 
of the data that are presented (remember ethical issues in Chapter 2). At other times it 
is done by accident when you are unsure about what your data are trying to tell you or 
what your data mean.
Figures 8.14 and 8.15 present a university department’s spending between 2000 and 
2015. Although both these figures present exactly the same data, using exactly the same 
type of chart, they both appear very differently. Figure 8.14 shows, perhaps, an alarm-
ing decrease in spending during this period; whereas Figure 8.15 puts this ‘trend’ into 
Figure 8.12 100% of respondents said ‘yes’
Figure 8.13 ‘Incorrect’ use of a line chart

	
8.4 Data presentation
219
perspective and shows that spending has changed only very slightly over this period of 
time. However, Figure 8.14 provides a good view of the detail of the spending changes, 
while Figure 8.15 provides little information on what has happened. In Figure 8.15, it 
appears, unless you look very closely, that spending has not changed at all throughout 
this period, but you know this is not the case. These two figures emphasise the impor-
tance of getting scales right. You need to decide what it is you are attempting to show, 
not what you are attempting to hide, and scale your charts accordingly.
8.4.5   Miscellaneous charts
Some less common charts that you might come across and wish to use are presented in 
Figures 8.16 to 8.21. Figure 8.16 is a three-dimensional bar chart which is used to enhance 
the appearance of ‘bland’ two-dimensional charts. While these charts don’t necessarily 
add anything significant to the presentation of the data, they do provide a more visually 
appealing diagram.
Figure 8.17 is a polar chart which is used to compare variables with several compara-
ble factors. For example, each ‘arm’ of the polar chart would represent a particular factor 
and each shape would represent the variable in which you were interested. Each shape 
Figure 8.14 ‘Dramatic’ decline in spending
784
786
788
790
792
794
796
798
800
802
804
'00 '01 '02 '03 '04 '05 '06 '07 '08 '09 '10 '11 '12 '13 '14 '15
Year (2000 onwards)
Departmental spending £000s
Figure 8.15 Less dramatic decline in spending
0
100000
200000
300000
400000
500000
600000
700000
800000
900000
'00 '01 '02 '03 '04 '05 '06 '07 '08 '09 '10 '11 '12 '13 '14 '15
Departmental spending £
Year (2000 onwards)

	 Chapter 8 ● Presenting your project in written form  
220
would thus provide an indication of the similarities and differences of each variable for 
each of the factors presented on each axis. In the case of Figure 8.17, each arm represents 
a user’s view of different aspects of two software systems (A and B). In this case it is easy 
to see that the user, for example, prefers the interface of System B but they prefer the 
functionality provided by System A.
Figure 8.18 is a doughnut chart, which is another way of presenting a pie chart. The 
advantage of this representation is that you can now plot several pie charts together on 
the same figure to enable proportional comparisons between variables to be made.
Figure 8.19 is a factor analysis plot which presents the results of two combined fac-
tors from a factor analysis. This figure helps to show how variables are grouped together 
depending on a number of factors in two dimensions. Although some of the variables 
may appear closely related to one another in this diagram, looking at other factors in 
other dimensions might show that they are not. Factor analysis is a statistical technique 
that can only really be performed using a statistical software package. The calculations 
are much too complex to be performed by hand.
A useful way of presenting data that shows how the data are distributed is a box and 
whisker plot – an example of which is provided in Figure 8.20. In these diagrams (which 
Figure 8.17 An example polar chart comparing two software systems
0
1
2
3
4
5
Functionality
Interface
Accuracy
Ease of use
System A
System B
Installation
Figure 8.16 An example three-dimensional bar chart (axes have deliberately not been labelled for 
clarity)

	
8.4 Data presentation
221
can be presented horizontally or vertically) the overall spread of the data can be clearly 
seen. The box shows the interquartile range of the data (the central 50% of the data reside 
in this range) bounded by the 75th percentile at the top and the 25th percentile at the 
bottom. The median value is shown by a line at the appropriate place in the box. The 
two extreme values in the data set are also displayed by the whiskers – the maximum and 
minimum values setting the end points of these lines.
Figure 8.21 provides an example of a box and whisker plot presenting real data. These 
data are the maximum daily temperature values recorded for each month from 1961 to 
1990 for a site in the East Midlands of the UK. We can see, for example, that August 
temperatures show quite a variation in extremes when compared with June. January 
Figure 8.18 An example doughnut chart
Figure 8.19 An example factor analysis plot
0.2
0.4
0.6
0.8
  –0.8   –0.6   –0.4
0.2
0.4
0.6
0.8
Factor 2
Factor 1
  –0.2–0.2
–0.4
–0.6
–0.8
1
0
0
–1
–1
1

	 Chapter 8 ● Presenting your project in written form  
222
has the lowest recorded temperature for the 30-year period (−6°C) and a large variation 
in temperatures for the interquartile range when compared with the summer months.
8.4.6   Other data presentation
Not only will you be presenting data in the form of charts and graphs, there are other 
things you might wish to present too – program listings, designs, photographs, 
diagrams and more. Some tips that you should bear in mind when presenting these 
kinds of data include:
● As for charts and graphs, each figure should be uniquely numbered and labelled.
● Try to keep figures and listings to one page. If code listings spread over several pages 
then you should consider moving the listing to an appendix and include only short 
extracts (of interesting algorithms/sections) in the main body of the report.
Figure 8.20 A box and whisker plot
Maximum
Minimum
25th percentile
Median
75th percentile
Figure 8.21 An example box and whisker plot
–10
–5
0
5
10
15
20
25
30
35
40
Jan
Feb
Mar
Apr May Jun
Jul
Aug Sep
Oct Nov
Dec
Temperature (ºC)

	
8.5 Referencing material and avoiding plagiarism
223
● Consider alternative ways of presenting diagrams. For example, rather than includ-
ing several figures showing the evolution of a system’s interface design, you could 
include a photograph showing the preliminary sketches and interim designs next to 
one another – for example, see Figure 8.22.
● Present pseudo code and designs in boxes rather than ‘floating’ among the text – for 
example, see Figure 8.23.
• 8.5 Referencing material and avoiding plagiarism
8.5.1   Introduction
‘Nothing is said that has not been said before’
Terence (ca. 195–159 BC), The Eunuch, Prol.
With Terence’s statement in mind it is important that you support the work you are 
presenting within your report by appropriate references. Much of what you present will 
have been touched on, discussed, written about or covered by other authors in the past – 
particularly for undergraduate projects. Thus, any arguments that you make within your 
Figure 8.22 An example of preliminary and interim design presentation using a photograph
Figure 8.23 Pseudo code of an example algorithm

	 Chapter 8 ● Presenting your project in written form  
224
report, and especially within your literature review, should be justified by referencing 
previous research (Saunders et al., 2012: 70–73). Material is referenced within reports to 
avoid plagiarism, identify context, add support and validation and to identify sources. 
These are outlined below.
● Avoid plagiarism. In other words, you do not present other people’s ideas, 
thoughts, words, figures, diagrams, results etc., without referencing them, in order 
to make their work look as if it is your own (you thus credit people with their ideas). 
Plagiarism can be performed accidentally or deliberately but in both cases it is 
deemed a serious academic offence. This is one reason why you should perform an 
extensive literature survey – to ensure that you are not merely repeating the work 
of others.
The concept of plagiarism and its significance varies between countries and cul-
tures. For example, in the East, Confucianism embraces the concept of collective 
knowledge owned by society as a whole rather than individuals (Hirji, 2004). Hirji 
goes on to state that the idea of individuals acquiring knowledge and ‘owning’ that 
knowledge is frowned upon. In the West plagiarism is looked upon more as the ‘theft’ 
of other people’s ideas if we try to present them as our own.
There are a number of tools available to examiners that can be used to assess 
whether or not work has been plagiarised. One example is turnitin® (see www.sub-
mit.ac.uk), which ‘enables institutions and staff to carry out electronic comparison of 
students’ work against electronic sources including other students’ work’.
Generally speaking, you will be criticised (and penalised) in most institutions if 
you do not cite the work of others appropriately. One thing you should try to do is to 
carefully annotate your notes when you read articles so you can distinguish between 
direct quotes you have copied, ideas you have taken from other authors, and your own 
ideas. When you come to write up your final report you will then know what requires 
referencing either directly or indirectly.
● Identify context. To place your work in context with other recognised publications. 
This will strengthen your report by showing how it builds and extends the work of 
others and how it resides within a recognised academic field of study.
● Support and validate. To support your own arguments and validate any statements 
that you make. If you are making certain claims you will have to support these with 
either research results or references to other authors.
● Identify sources. Provide people reading your report with a comprehensive list of 
related work that they can use to study your topic in more detail or take your work 
further. By identifying sources clearly, people reading your report will be able to 
locate the articles you have used.
Cornford and Smithson (2006: 107) identify a number of issues with referencing that 
appear in poor student reports. Poor reports often exhibit the following (so these are 
things you should avoid):
● A lack of references. What references there are refer to standard texts. You should 
refer to more than just the standard text books recommended on the first year of your 
course.

	
8.5 Referencing material and avoiding plagiarism
225
● A lot of references to old and obscure texts. This might indicate you have merely cop-
ied them from another source rather than reading around the subject and identifying 
more contemporary sources.
● The references in the main body do not match with the list of references at the back 
of the report. This is sloppy and suggests ‘a failure to recognise the importance of 
references’.
● The references are swamped with URLs rather than traditional sources. Although the 
Internet can provide a useful starting point for research, the content is largely unrefer-
eed. A reference list dominated by URLs shows a lack of rigour in your literature search 
and an element of laziness. It also indicates that your work might not have a firm founda-
tion but may be built on a number of opinions and ideas that have yet to be established.
There are two aspects to referencing. The first aspect to consider is how to use refer-
ences correctly within the body of your report – in terms of their presentation and appro-
priateness – called citing. The second aspect is how to present these references correctly 
at the end of your report. Each of these aspects will be dealt with in turn.
8.5.2   Citing references
Generally speaking, there are two ways to cite references – the Harvard System and the 
Numeric System (also called the Vancouver System). There are numerous variations on 
these techniques (for example, Chicago is a form similar to Harvard; MLA-style and CBE-
style are forms based on the numeric system) that have their own idiosyncrasies. However, 
we will concentrate here on a general overview of a Harvard-type system. Harvard is the 
better system to use as the numeric system requires each reference to be identified by 
a unique number that needs updating every time you decide to add or remove a refer-
ence from your report (although most systems will do this automatically). Quite often the 
numeric system gives no indication of the author to whom you are referring and the reader 
has to search through the reference list at the back of your report to find this information.
These days, most word processing packages have reference management systems 
that enable you to maintain and update references within your report quickly and easily. 
Chapter 5 identified a number of reference management tools that can help you manage 
your references. However, with or without such a system, it is recommended that you 
use the Harvard style of referencing which is more flexible and clearer than the numeric 
approach.
The Harvard-type system uses the name of the author(s) and the year of their publica-
tion to uniquely identify each reference within a report. For example, take the following 
extracts from an undergraduate project report:
It is often said that computing is an art not a science (Smith and Jones, 2014: 20)
or
It is often said that computing is an art not a science. This was first suggested by 
Smith and Jones (2014: 20) who justified their proposition by. . . .

	 Chapter 8 ● Presenting your project in written form  
226
The article by Smith and Jones is identified by the author(s) name(s) and its year 
of publication. If you are referring to more than one of their publications of the same 
year you would append letters to the date (a, b, c, . . . ) to uniquely identify each arti-
cle – thus (Smith and Jones, 2014a), (Smith and Jones, 2014b), etc. The page number 
(20), where the point in question was made, has also been identified. This is common 
when referencing books, which obviously have many pages, but not when referencing 
journal articles.
An alternative way of presenting this argument, supported by the same reference, 
could be:
Smith and Jones (2014: 20) state that ‘computing has much more in common with 
the finer things in life, like art, than science or engineering’
In the previous examples Smith and Jones’ ideas had been put into our own words 
so quotes were unnecessary. However, because their text has now been used verbatim, 
this text must be included within quotes to show that these are their words, not ours. If 
you are quoting a large block of text it is acceptable to present that text without quotes 
providing it stands out from your own text in some way. For example, you would either 
present that text in italics, a different font to the one you were using, or as a justified 
block of text between reduced margins in your report.
Berndtsson et al. (2008: 41) point out that a common mistake when referencing large 
blocks of text (a paragraph) is to put the reference at the end of the paragraph. In this 
case it might not be clear that the reference refers to the whole of the paragraph. It is 
therefore better to identify the source of the extract first.
According to Cornford and Smithson (2006: 165) there are only three occasions when 
you should quote other people’s work verbatim:
● where the original author has presented something ‘more succinctly, elegantly or 
clearly’ than you could;
● ‘where you need to prove that it was a particular author who wrote the words, or you 
are introducing some text in order to analyse it’;
● where there is no way of paraphrasing; for example, quoting lists.
You should also bear in mind that including too many direct quotes and references 
to other authors may give away some authority from your own work. In other words, 
you might include so much material from other authors that it is difficult for the reader 
to identify your contribution because much of the material presented is really the work 
of others.
Many articles are written by individuals. The Harvard system caters for single authors 
like this:
It is often said that computing is an art not a science (Johnson, 2015)
However, when there are more than two authors involved with the same article you 
generally omit all but the first author’s name and use et al instead:
It is often said that computing is an art not a science (Peterson et al., 2012)

	
8.5 Referencing material and avoiding plagiarism
227
When you wish to refer to more than one reference to support the arguments you are 
making in your report you would include them alphabetically:
It is often said that computing is an art not a science (Johnson, 2015; Peterson et 
al., 2012; Smith and Jones, 2014: 20)
Sometimes you will want to present a reference to an article you haven’t read (a sec-
ondary reference) which has been cited by another author. In this case you only need to 
list the article you’ve read in the list of references (the primary reference) and you should 
cite the reference like this (in this case you would only list the Markos et al. reference):
It is often said that computing is an art not a science (Johnson, 2010 cited by Markos  
et al., 2012)
Finally, try to place references in your text in appropriate places so that the reader is not 
hindered by their presence. It is perhaps easier to read a sentence in which the reference is 
placed at the end than one which is broken up by having a reference embedded in the middle.
Before concluding, we will look briefly at the numerical referencing format for com-
pleteness. In this case each reference is identified by a unique number:
It is often said that computing is an art not a science [1,2]. Or, it is often said that com-
puting is an art not a science. 1,2 Or, Smith and Jones [2] state that ‘computing has much 
more in common with the finer things in life, like art, than science or engineering’.
In this case each time a new reference is used within your report it is given a new refer-
ence number. References are then listed at the back of your report in numerical, rather 
than alphabetical, order. Notice that, if you decide to remove your reference to Smith 
and Jones, all subsequent references would need renumbering to replace the deleted 
reference. Similarly, inserting a new reference into your report would require all sub-
sequent reference numbers to be incremented – something that can take a long time in 
terms of search and replace if your word processor doesn’t have a reference management 
system. Also, for the reader, it is not obvious from the number what the reference is. 
They would have to look to the reference list to find out – breaking the flow of their read-
ing. For these reasons, if you have a choice, it is recommended that you use the Harvard 
system for referencing material if at all possible.
Three abbreviations that you might use when referencing are:
● op. cit. – in the work already cited
● ibid. – in the same place
● loc. cit. – in the place cited
Op. cit. is used to refer to an article you have cited before, earlier in your report, and is 
used when other references occur in between. You may have to provide the date if other 
authors of the same name exist. For example:
It is often said that computing is an art not a science (Johnson, 2015: 22). Smith 
and Jones (2014) emphasise this point when they state that ‘computing has much 

	 Chapter 8 ● Presenting your project in written form  
228
more in common with the finer things in life, like art, than science or engineering’. 
However, Johnson (op. cit.: 34) goes on to discuss. . . .
Ibid. is used when there are no intervening references. You must provide page num-
bers if required:
It is often said that computing is an art not a science (Johnson, 2015). Interven-
ing text here but no references. . . . Johnson (ibid.) states that computing can be 
defined in terms of romantic form. . . .
Loc. cit. is used to refer to the same page of an article you have previously cited. You 
should provide the date as appropriate. For example:
It is often said that computing is an art not a science (Johnson, 2015: 22). Smith and 
Jones (2014: 20) emphasise this point when they state that ‘computing has much 
more in common with the finer things in life, like art, than science or engineering’. 
However, Johnson (loc. cit.) goes on to discuss. . . .
While these abbreviations are often found in short articles and are useful when using 
a numeric referencing system, they should be used sparingly and with care in longer 
documents. Try to limit these abbreviations to references that occur on the same page 
or at most one page earlier in your report. Linking ibid., op. cit. and loc. cit. to a refer-
ence that occurred two or more pages beforehand makes it difficult for the reader to 
follow.
Above all, make sure from the way you have referenced material within your report that 
it is clear exactly which article you are referring to and you do not identify two articles in 
the same way. In addition, make sure that you use a consistent style – don’t switch from 
Harvard form to numeric form and vice versa and try not to mix the two forms together 
like this ‘[1] (Dawson, 2015)’.
8.5.3   Listing references
Generally speaking, the best place to list all the references you have used is 
at the back of your report, as opposed to footnotes at the bottom of pages 
or lists at the end of each chapter. This provides the reader with a single 
compendium of all relevant material that they can easily access. Articles 
you have used are presented under the heading of either References or Bibliography. 
References list only those articles that have been referred to within the report itself. A 
bibliography will list all the articles you have used in your project but are not necessar-
ily referred to in the body of the report. Bibliographies are useful for the reader in that 
they identify all material that is relevant for taking your work forward or understanding 
it in more depth. For taught degree projects and books it might be more appropriate to 
include a bibliography, but for a research degree it would not. Your supervisor should 
be able to advise you on which approach to use.
How you present references will depend on the referencing system you are using – 
Harvard or numeric. Only the Harvard system will be discussed in detail as the numeric 
system is basically the same. The only difference with the numeric system is that each 

	
8.5 Referencing material and avoiding plagiarism
229
reference is presented in its numerical order and is presented with its numerical identi-
fier first. For example:
15. Wilson, G. (2013) The implications of art, Gower, London.
16. Herbert, K. (2014) The art of science, Chapman Hall, Manchester, UK.
In the Harvard system the use of italics, commas, colons, upper-case letters, abbre-
viations (such as Vol for Volume) and brackets may well be dictated by your own insti-
tution’s ‘in house’ style or by a variation in the style used (for example, Chicago style). 
However, Harvard references should always be presented alphabetically with articles by 
the same author(s) presented chronologically. Examples are:
Books
Anderson, J. Jones, J.P. and Peterson, K.K.L. (2014) The implications of science (2nd 
Edition), Pitman Publishing, London.
Benjamin, T. (2015) Computer science made easy, Arnold, Leeds, UK.
Note that it is not necessary to include terms such as ‘Ltd’, ‘Inc’, etc. for publisher’s 
names as long as the publisher is clearly identifiable from the information presented. 
The date that is presented represents the date on which that edition of the book was 
first published. This provides an indication of the age of the book which would not be 
apparent by referencing a reprint date which could be several years later. The country of 
publication is also included if it is not clear from the place alone. For example, cities like 
New York and London do not usually require USA and UK respectively.
In cases where the author(s) is an editor of the cited work use (ed) or (eds) to denote 
this. For example:
Anderson, J. Jones, J.P. and Peterson, K.K.L. (eds) (2012) The implications of science (2nd  
Edition), Pitman Publishing, London.
Benjamin, T. (ed) (2013) Computer science made easy, Arnold, Leeds, UK.
Journal articles
Brown, A. and Wesley, C.W. (2013a) ‘An Investigation of the Hawthorne Effect’, Man-
agement Sciences Journal, Vol 42(1), pp 47–66.
Brown, A. and Wesley, C.W. (2013b) ‘Adaptation of Genetic Algorithms in Hawthorne 
Analysis’, Management Monthly, Vol 28(2), pp 21–23.
Notice the use of letters (2013a, 2013b) to uniquely identify these two articles pro-
duced by the same authors in the same year.
Web addresses
Gaynor, L. (2014) Introduction to artificial intelligence, <http://www.cai.com/ai/1086>  
(25 July 2015).
International Group on Complex Systems (2015), Systems analysis, Minutes of Second 
Meeting, 12 June 2015, <http://www.IGCS.com/Min/two.html> (25 July 2015).
References to Internet sites should include the full URL including http, etc. Make 
sure that you present the title of the page/article/site/author name where appropriate. 

	 Chapter 8 ● Presenting your project in written form  
230
These references should also include the date on which the site was accessed. Because 
the Internet is ever changing, these references may become outdated very quickly.
Trade or company publications
IAEA (2012) Guidebook on computer techniques in nuclear plants, Technical Report Series 
No 27, International Atomic Energy Agency, Russia.
National Environment Research Council (2014) Computers in hydrology report, Vol II 
NERC, London.
Theses
Hampson, J. (2013) The effectiveness of AI in calcite modelling, unpublished PhD thesis, 
Department of Computing, University of Strathclyde.
Conferences
Jowitt, J.D. (2013) Information Systems in a Progressive Society, Applications of Infor-
mation Systems XI, Cartwright, R.A. and Laurence, G. (eds), Rowntree Publications, 
Leeds, UK.
ISAIS (2013), International Symposium on Applications of Information Systems XI, pro-
ceedings of an international conference organised by the Society of IS, held London, 
12–16 June 2013, Rowntree Publications, Leeds.
The first reference here (Jowitt, 2013) is for an article presented at a conference. The 
second reference refers to the conference proceedings themselves.
Television programmes
The Information Programme (2014) Channel Four Television Corporation, broadcast 
8.30pm Tuesday 18 November 2014.
Kay, S. (2015) The World’s a Stage, BBC1.
The first reference here has no specific ‘author’ or presenter so is presented using the pro-
gramme’s title as a reference. The second reference is more vague and, perhaps, repre-
sents a secondary reference in which as much information as possible has been presented.
DVD/CD-ROM
Katlen, P. and Rose, P. (2015) Information systems in the 2000s, CAROM DVD, Solar 
Information Systems, London.
Personal communication
Sometimes people will say something to you that is useful to quote in your report. In these 
cases there is no physical record of the statement or source so you have to refer to the 
quote as a ‘personal communication’. In your main text you would cite this as the follow-
ing example shows – (Smith, pers comm) or Smith (pers comm). You would then list this 
reference using a Harvard-style as:
Smith, J. (2015) Personal communication, 12 July.

	
8.6 Documenting software
231
The references presented above are by no means comprehensive and you will undoubt-
edly come across an article, some data or some material from an obscure source that is 
not covered by these examples. However, unless your institution has specific guidelines 
to follow when referencing such material you will have to present the reference in a 
way that you feel is appropriate. If your supervisor is unable to help you, remember 
two things. First, the reference should be clear enough in the body of the report so that 
anyone reading your report knows which article you are referring to and, second, you 
have provided sufficient information when listing the reference so the reader can trace 
that article easily if s/he wishes.
• 8.6 Documenting software
8.6.1   Introduction
People sometimes argue that it is more important to get a program’s supporting 
­documentation right than the program itself. They argue that it is always easier to mend 
‘bad’ code that is well documented than it is to fix ‘good’ code that is poorly docu-
mented. This emphasises the importance of good documentation to support all software 
systems.
The documentation required to support a piece of software can be immense, cover-
ing a vast range of issues; from internal commenting of program code, systems analyses 
and design notes, figures and system documentation, to test plans and user guides. The 
following items are a list of topics and documentation you might be expected to cover 
and include in your project to support any software that you produce:
● An introduction/overview – simple introduction to the program, what it does, who 
is it for?
● Technical solution adopted – what technical solution has been implemented, is this 
ideal, is there an alternative?
● Design – systems analysis, systems design, human factors, story boards, etc.
● Software engineering information – structure, definition languages and test plans, etc.
● Development approach used – evolutionary delivery, build and fix, etc.?
● Problems encountered – bugs, errors, uncompleted sections of code.
● Limitations – what limitations are there to the program; for example, can it only han-
dle files of a certain size? Is it only calculating results to an accuracy of 10%, etc.? This 
can also include technical capabilities.
● Hardware/software requirements for running the program.
● Next stage. If you were to continue the project or somebody else was to take over 
from you, which parts of the software should be developed next? Which parts of the 
program could be enhanced with new features? Are the code, documentation and 
comments, etc. at a level whereby somebody could take over from you easily in the 
future?
● Evaluation of the software – how well does it do what it is supposed to do? Does it 
satisfy the user’s needs?

	 Chapter 8 ● Presenting your project in written form  
232
● Classes – and subclasses and hierarchical relationships for object-oriented programs.
● Database structure – tables and relationships between them.
● Hardware diagrams where applicable.
● Variable glossary – definitions of all variables used in your program.
● User guide – written at the right level of detail for the intended user.
Depending on the nature of your project you will have to present more or less detail 
in each of these areas. How you complete documentation such as designs, analyses and 
test plans is beyond the scope of this book as it is dependent upon the development pro-
cess, the methods employed and the type of project you have undertaken. For example, 
a pure software development project would require comprehensive analysis diagrams, 
test plans and system documentation, whereas a project, merely developing a piece of 
code as a vehicle for presenting some ideas, would not. The focus here is on commenting 
programs and writing user guides as these should be included with any piece of code 
you produce.
8.6.2   Commenting program code
Commenting program code is dependent on the programming language used (for exam-
ple, a third or fourth generation language, an object-oriented language, a formal lan-
guage and so on), the style of code being developed and the requirements of your course 
and project. Some languages have specific rules, standards and protocols that should be 
followed when commenting their code. Some languages, for example Java, have docu-
ment generators that can produce comments automatically from the code – providing 
certain keywords are used. In the case of Java, Javadoc comments embedded in the code 
can produce documentation in HTML format in a standard form that can be viewed 
using a web browser. These industry standard comments make it easier for program-
mers to understand how programs have been written and provide a consistent means 
of accessing comments within Java programs. Although other languages do not have 
specific standards for commenting the code there are a number of general guidelines 
you can follow when commenting.
● Understand the purpose of the program you are writing. Who is going to use it, main-
tain or enhance it, mark it? What is their level of knowledge? If you are merely writing 
a small program for your own use to test out some ideas you will not need as many 
comments as a program that is going to be used and enhanced by somebody else.
● Try to ensure you provide the right level of comments within your program – don’t 
over-comment or under-comment and avoid comments on every single line of 
code. Comments should tell the programmer something that is not clear from the 
code itself and they are not there to explain the programming language used. For 
example:
X = X + 1;      {add 1 to X}
This is an example of poor commenting; the comment (in brackets { }) tells the reader 
no more than they can deduce from the code itself (and the variable name could probably 
be more explicit too).

	
8.6 Documenting software
233
Provided you have used suitable variable names and a logical structure for your pro-
gram then comments should be limited.
● It is advisable to comment each function/procedure/class/block/screen, etc. 
(depending on the language used). This will explain, at the very least, what each 
component of your program does and may be the required depth of commenting for 
someone to understand how the program works and is structured.
● Try to make comments stand out from your code so they don’t become buried as a 
mass of text in your program. For example, tab each in-line comment (on the same 
line as a program statement) clear of the code to the right and keep line spaces around 
full-line comments (comments that have one or more lines to themselves).
● Avoid long-winded explanations. Keep comments brief and clear – you are not writing 
an essay.
● Avoid wasting time producing fancy borders, header styles and so on. Your comments 
are there to provide understanding and explanation to your program; they are not 
there to make it look pretty.
● Make sure you include vital information at the start of your program such as author, 
date, version number, a description of what the program does and, possibly, a brief 
explanation of how it does it. These comments are often included as block comments 
– several lines of in-line comments providing more detailed explanation.
● Try to make sure that you maintain and update program comments as you amend and 
develop your software. There is little point in keeping outdated comments in your 
code that refer to much earlier versions of your program.
In summary, it is probably a good idea to get guidance from your supervisor as to the 
style and level of comments required. Your department may have guidelines on what 
is expected in the form of program comments and there may be an ‘in house’ style you 
have to follow.
8.6.3   Writing user guides
There has been a lot of research in recent years into user guides; their structure, pres-
entation, content, usability, ‘trainability’, minimalist training issues and so on, all of 
which are beyond the intended scope of this book. For the purposes of this book we are 
interested in user guides from a narrower perspective in that your guide is not going to 
be used by the ‘masses’ but within your own institution as part of your computing project 
and part of its assessment.
In this context any user guides you develop are likely to be presented within separate 
documents to your final report or included within its appendices. How you present user 
guides is up to you, but the longer they are the more sensible it will be to present them 
as a separate document. Whatever the case, a user guide should provide the user with at 
least these pieces of information:
● an overview of the software – what does it do, who is it intended for;
● an idea of its hardware requirements – memory requirements, disk space required, 
additional hardware requirements such as sound cards, platform requirements (PC, 
Macintosh, Unix, etc.), operating system requirements, etc.;

	 Chapter 8 ● Presenting your project in written form  
234
● how to load/install the software;
● how to start the software;
● how to end and perhaps uninstall the software;
● details of any known problems and restrictions imposed by the program.
More broadly speaking, according to Rogerson (1989: 87), a user manual should 
satisfy three aims:
● ‘to provide practical information about the software when help is not at hand’;
● ‘to help inexperienced users get started quickly and with least difficulty’;
● ‘to help experienced users become productive quickly’.
When writing user guides as part of your project you should begin by identifying 
your target audience. Will you need a comprehensive guide so that complete beginners 
will be able to understand your software or will a simple overview of its functionality be 
sufficient as it will only ever be used by your supervisor?
User manuals tend to come in two different forms. First, as training manuals – where 
the user is taught how to use the software through a number of examples that build on 
one another. Second, as reference manuals, whereby experienced users can ‘dip into’ 
the manual at appropriate points for clarification/explanation of specific features of the 
program. How you structure your documentation will be based largely on your intended 
users. For experienced users a reference manual may be all that is required. However, 
for inexperienced users, evolutionary examples may be more appropriate. In addition, 
depending on the nature of your user you may have to provide detailed explanations 
describing simpler operating principles such as ‘save as’, ‘page set-up’, etc. It is also a 
good idea to include some screen dumps from your program in a user guide so the user 
feels they are following your guide correctly when it appears that things aren’t happening 
as they would expect. It also provides the user with additional confidence to see things 
mapping out on the screen in the same way they are presented on paper. You might also 
wish to include a description of possible mistakes that could be made by a user and how 
the user can avoid or overcome them.
Quite a lot of user guides and help systems are embedded within programs them-
selves. Although some of the points made earlier are relevant to these kinds of systems, 
their integration and technical implementation issues are beyond the scope of this book. 
You should consult with your supervisor and your client for advice and requirements on 
this issue.
• 8.7 Writing papers and publishing your work
At undergraduate level it is unlikely that you will publish the results from 
your project unless you have made some significant findings and are 
undertaking a research-based project. However, at postgraduate level it 
is pretty much expected that you will publish results from your research 
as either conference papers or journal papers. Getting work published is a significant 

	
8.7 Writing papers and publishing your work
235
milestone for PhD students as it shows that their research is making a contribution to 
knowledge. The advantages of writing papers while undertaking your postgraduate stud-
ies are numerous.
● Submitting a paper will provide valuable feedback from referees. From this feedback 
you will get an idea of the value of your work; you will get an alternative, external 
viewpoint on your research (other than yours or your supervisors); they may provide 
valuable pointers to other, similar studies; and you will receive valuable suggestions 
on how your work might be improved.
● It will help to improve your writing skills through practice at writing at an academic 
level.
● It will provide motivation – giving you a short-term target at which to aim.
● One of the criteria you are assessed upon at postgraduate level is whether your 
research has made a contribution to knowledge and whether it is publishable. If 
you have published journal articles or conference papers during the course of your 
studies you have already shown this to be the case so it is well worth trying to get 
some of your work published early.
● It gives you an opportunity to start writing up your thesis early. By writing papers 
as you go along you may well find that your final thesis write-up is little more than a 
few changes to your already published works – each paper forming a chapter of your 
thesis – reducing the final write-up significantly.
At undergraduate level you may feel that your project went so well that you wish 
to produce an academic publication based on your work. Your supervisor may well be 
closely involved with this idea and will certainly advise you.
Writing for publication is not as simple as cutting and pasting a few sections from your 
report. It must have some form of logical structure to it and it must show clear evidence 
of a contribution. The process of getting work published can also be rather long winded 
– for example, it is common for some journal articles to be published well over a year 
after they have been submitted. Figure 8.24 summarises the submission/review process 
that a paper would go through when it is submitted to a journal for publication. When 
your paper is first submitted it will be assigned to a journal editor who will manage the 
review process. They will send your paper out to a number of reviewers (usually two 
or three) who are expert in the field for their comments on your paper. Sometimes you 
are required to provide a list of potential referees when you submit your paper. Your 
supervisor can assist you with this and it is good practice to contact them first to see if 
they are willing.
When the reviewers return their comments, the editor will make a decision as to 
whether to accept your paper or not. Sometimes papers are rejected as they do not make 
sufficient contribution to knowledge, they may be outside the scope of the journal (so 
make sure you target appropriate journals for your work), or the underlying theories or 
methods may not be rigorous enough. More than likely the reviewers will have requested 
either minor or major changes to your paper before it can be published. For minor 
changes the editor may decide to review the changes themselves. For major revisions 
they may decide to send your paper back to the reviewers (or a new set of reviewers) 
for further comment. When making changes to a paper following reviewers’ comments 

	 Chapter 8 ● Presenting your project in written form  
236
it is always a good idea to produce a response document. This addresses each of the 
reviewers’ comments in turn and explains how you have addressed their concerns in 
the revised version of your paper. This can speed up the review process as it allows the 
editor and reviewers to check whether you have made the changes recommended. Hope-
fully, following revision, your paper will be accepted and timetabled for publication in a 
future edition of the journal. You can see from this process that it is quite long – which 
is important to ensure the integrity of the papers that are published.
There are number of places that you might consider publishing your work. The most 
respected place to submit your work is an academic journal. Journals have guidelines 
on the type of work that they accept and also how the work should be submitted (this 
includes layout, length, sections and format of the paper you are writing). Although 
journals are the most respected source of perceived wisdom, some are more respected 
than others (and are consequently more difficult to get your work published in). One 
website that provides a list of journals in Computer Science and Information Science is 
SCImago (http://www.scimagojr.com/). This site also provides a ranking for those 
journals based, amongst other things, on their H index (a measure of citations) and 
their total number of documents. You can use this site to find journals in your particular 
field (for example, artificial intelligence, computational theory, HCI, etc.) and see how 
journals compare with one another.
If you submit your work to a recognised journal one thing is sure – you will receive 
some useful feedback on your work from experts in the field through the review process. 
Sometimes it is worth submitting your work to a ‘high-class’ journal in order to obtain 
Figure 8.24 Summary of a typical journal review process
Submit Paper
Journal Editor
Reviewer 1
Reviewer 2
Reviewer n
Journal Editor
Reject
Major Change
Minor Change
Revision
Accepted
. .

	
8.8  Summary
237
some useful feedback. You might then consider making the changes the reviewers sug-
gest before resubmitting your work to a less-recognised publication.
Conferences are a good route to presenting your work if you only have preliminary 
findings to discuss. There will be deadlines you need to adhere to for conferences and 
there may be quite strict regulations on the layout of your paper (camera-ready). Like 
journals, conferences come in varying degrees of quality, but they do provide a useful 
way of meeting and discussing your ideas with like-minded people. Having discussed 
your work with others through a conference publication, you may wish to develop your 
work into a journal paper. One point to bear in mind with conferences is that they are 
costly – registration, travel and accommodation. Make sure you (or your department) 
have the funding available to support a conference publication before you submit a paper 
or poster. You might also wish to consider other routes into publication through submit-
ting internal reports within your own department or by writing brief summary papers or 
articles in more popular journals and newspapers.
When you write your paper for publication, make sure that you follow the journal’s 
guidelines closely – otherwise it may be rejected straight away. It is always a good 
idea to read a few papers from the journal beforehand to determine the layout, style, 
length, depth of content and structure of a typical paper before submission. One thing 
is certain – you will need a suitable title, an abstract, an introduction, main body, 
conclusion and list of references. These sections are common to all journal papers. 
In addition, it is quite common to provide a list of keywords and, in some cases, key 
points for the paper.
There are books available that can advise you on writing for publication. Five such 
texts devoted to this topic are Day (2008), Day (2011), Gustavii (2008), Lester and Lester 
(2011) and Malmfors et al. (2003) to which you should consider referring if you are 
thinking of writing an academic article for the first time. Shaw (2003) also provides some 
interesting information on writing papers within the field of software engineering.
• 8.8 Summary
● When you begin to write your report consider the reader and the purpose of your 
report. Use a top-down approach to structure your report and allow sections within 
your report to evolve over time. There is a particular order in which you should write 
your report and a specific way in which it should be structured. Look for ways of 
practising and improving your writing style.
● Your abstract should be one of the last things that you write. It should be clear, 
concise and summarise the context, scope and contribution of your report. Avoid 
presenting your abstract as a contents listing.
● Charts and graphs can do much to enhance the appearance and content of a report. 
They should be used appropriately (in terms of necessity and type) and each one 
should be uniquely labelled and titled. You must also ensure that you scale them cor-
rectly in order to clarify the point you are trying to portray.
● A Harvard-style system is the most appropriate system to use for referencing material 
within your report. Each article should be uniquely identifiable and each reference 
should be complete so that the reader can trace the article which is referred to.

	 Chapter 8 ● Presenting your project in written form  
238
● Documenting software covers a multitude of topics – from commenting program 
code to writing user guides. In this chapter the development of user guides has been 
discussed including training manuals (with worked examples), or reference manuals 
(for more experienced users).
● Publishing your work is a lengthy process but can be rewarding – particularly for post-
graduate projects. Make sure you fully understand the journal or conference require-
ments and discuss your ideas with your supervisor.
• 8.9 Further reading
Day, A. (2008) How to get research published in journals (2nd Edition), Gower, Alder-
shot, UK.
Day, R.A. (2011) How to write and publish a scientific paper (7th Edition), Greenwood 
Press, Santa Barbara, USA.
Gustavii, B. (2008) How to write and illustrate a scientific paper (2nd Edition), Cam-
bridge University Press, Cambridge, UK.
Lester, J.D. and Lester, J.D. (2011) Writing research papers a complete guide (14th Edi-
tion), Pearson Education, Essex, UK.
Levin, P. (2011) Excellent dissertations! (2nd Edition), Open University Press, Bucking-
ham, UK.
Malmfors, B. Garnsworthy, P. and Grossman, M. (2003) Writing and presenting scien-
tific papers (2nd Edition), Nottingham University Press, Nottingham, UK.
Montgomery, S.L. (2002) The Chicago guide to communicating science, University of 
Chicago Press, Chicago, USA.
8.10 Exercises
	 1.	 Write a short abstract of around 200 words for an article you have read recently. 
Compare your abstract with the article’s abstract. Do you think your abstract is 
better or worse and why?
	 2.	 Collect some data from your library on your own institution – for example, number 
of students entering the university each year, their age, qualifications, etc. How 
are these data presented? Enter these data into a spreadsheet and present the data 
in a different way. Do you think that your presentation is better or worse? Why?
8.11 Action point
● Produce a report breakdown structure for your own project.

	
	
	
239
CHAPTER
9
Aims:
To introduce the skills needed to present and defend your project effectively in oral 
form.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand how to structure, plan and present effective oral presentations.
● Demonstrate your software professionally.
● Produce an attractive poster for such presentations.
● Understand the purpose of, and be able to plan for, viva voce examinations.
● Section 9.2 is appropriate for those projects requiring oral 
presentations.
● Section 9.3 is aimed at students who have to produce posters 
of their work – for either assessment (at undergraduate level) or 
conferences (at research degree level).
● Section 9.4 is appropriate for students undertaking software development  
projects who need to demonstrate their programs.
● Section 9.5 is particularly relevant to research degrees and also to undergradu-
ate projects that have viva voce examinations.
Presentation skills

	 Chapter 9 ● Presentation skills 
240
• 9.1 Introduction
One of the most important aspects of any project is being able to present your findings to 
others. There is no point in performing an excellent piece of research if the results cannot 
be disseminated. While dissemination usually takes place through written reports and 
articles (see Chapter 8), quite often you will be called upon to make oral presentations of 
your work. This chapter will cover the skills needed to make effective oral presentations: 
how to prepare them, how to structure them and how best to deliver them.
As a computing student, you might well be involved with the development of a soft-
ware system. Presenting and demonstrating software falls within the theme of this chap-
ter and is discussed in detail in Section 9.4.
You may also find that, as part of your course, you will have to attend a viva voce or 
oral examination. How to prepare for, and conduct yourself, during this kind of exami-
nation is discussed in Section 9.5.
• 9.2 Oral presentations
9.2.1   Introduction
Oral presentations are often an essential part of many degree courses these days. They 
are frequently used to assess students’ understanding of their work and their abilities to 
present their findings to others in oral form.
For many people, their only involvement or encounter with you and your project will 
be at your presentation. They may be interested in your work from a professional or 
personal viewpoint or they may be part of the assessment team who are evaluating your 
work. Whatever the case, you should be trying to interest and inspire people in your 
work and be emphasising your own interest and enthusiasm in your project.
Two types of presentations that you might be involved with, particu-
larly at postgraduate level, are conference presentations and internal 
departmental presentations. Quite often postgraduate students will be 
expected to present at internal seminars and, for PhD students, submit-
ting and presenting a conference paper may be compulsory during the 
course of their studies.
A presentation can be compared with an iceberg: most of it is always hidden from view 
below the surface of the ocean. Like an iceberg, your audience will only ever see 10% 
of the work of your presentation – the delivery itself. They will not see the other 90% of 
effort that you put in to preparing it. Similarly, of all the material that you obtain, and all 
the results that you acquire during the course of your project, you might only have time 
to present the more interesting and most important 10% of detail.
There are a number of considerations that should be made for presentations: prepara-
tion, the content, visual aids you might wish to use, the delivery of the presentation itself 
and how to deal with questions. The following sections deal with each of these points in 
turn before presenting a few final tips that can help you present your project to the best 
of your ability in oral form. If you would like more information on giving presentations, 

	
9.2 Oral presentations
241
three books that are devoted entirely to this topic are Etherington (2006), Hall (2011) 
and Reynolds (2013).
9.2.2   Preparation
The first stage of any presentation is preparation. The first stage is to clarify your pres-
entation’s objectives (its purpose), taking into account the audience who will be attend-
ing and time you have available (including time for questions). If you don’t know these 
things, it is important that you clarify them as soon as possible as they will have a signifi-
cant bearing on what you decide to include and leave out. A simple acronym to consider 
when preparing a presentation is PALL – which stands for Purpose, Audience, Language 
and Layout. These points are implicitly addressed in the following sections.
Objectives
Begin by clarifying the purpose/objectives of your presentation – what do you hope to 
achieve and what should your focus be? Will you be discussing your project itself rather 
than its outcomes? For example, its problems, solutions, how you performed the project 
and so on? Alternatively, you may be presenting the technical outcomes of your project 
to a more scientific audience (a conference presentation, for example). In this case you 
might address points such as how the work was performed, what supporting research is 
there, what is its context, what you discovered, and what your results were. You should 
also consider the assessment criteria being applied to your presentation (this is not 
relevant for conference presentations but is important if the presentation forms part of 
your project’s assessment). In this case are the examiners interested in the presentation 
itself rather than the content? Are they interested in how you form your arguments or 
state your case? This will clearly influence the way in which you put your talk together.
Cryer (2006: 178) identifies some additional possibilities that might represent the 
main purpose of your presentation:
● to explain what you have achieved and, if applicable, what you intend to do next;
● to obtain advice and feedback;
● a forum for learning and mutual support;
● as part of your assessment or as a monitoring process.
Time
You will probably find that your presentation will be required to last from anywhere 
between ten minutes to one hour. Quite clearly, with only ten minutes for a presentation, 
you will have to get straight to the point you intend to make; with an hour to play with, 
you will be able to cover more background and build up to the main point of your talk.
It is important to clarify how much time there will be available for your presenta-
tion and how much time there will be for questions. Will you be able to decide on the 
proportion of time allocated for the presentation and the questions or is this specified? 
How flexible is this time – is it fixed to within one or two minutes or can you over- or 
under-run to a much greater extent?

	 Chapter 9 ● Presentation skills 
242
Audience
The number and type of people who will be attending your presentation will have a sig-
nificant bearing on its style and content. Ask yourself these questions: Will your audience 
be assessing you? Are they your peers? Are you hoping to inspire them with your work 
and persuade them to become involved with it? What do they already know? What do 
you want to teach them? What do you want to show them?
Now that you have an idea of the objectives, time and audience of your presentation 
you can move on to preparing the presentation itself. If you are struggling with ideas 
on what to include, begin by brainstorming ideas and writing them down on a piece of 
paper. Annotate each of these ideas onto a single piece of paper or peel-off sticker. You 
can then go about arranging your material into a logical structure – don’t just expect to 
write a few notes down at random and then ad lib your way through them on the day. 
Remember that your presentation should have a beginning, middle and an end, and 
points that you may be trying to get across may need some build-up or explanation first. 
For example, if you wanted to discuss the application of artificial intelligence techniques 
to air traffic control scheduling, you would do well to provide some background on 
these two subjects separately first, before focusing in on the main point of your talk – the 
overlap of these two topics.
The next stage of your preparation will be to develop the visual aids you want to 
use. Rogerson (1989: 94) states that people retain only 10% of what they hear but 
50% of what they see. Thus, visual aids are important for getting your message across 
and helping your audience to remember what you have presented afterwards. Visual 
aids can include overhead transparencies, slides, white boards and black boards, 
­computer-based presentation packages, and physical objects that you wish to show or 
pass around the audience. Preparation of these visual aids is discussed in more detail 
in Sections 9.2.4 and 9.2.5.
With your talk physically prepared, the last stage of preparation is to compose yourself 
mentally by rehearsing your talk again and again (sometimes in front of a mirror). You 
may well find that you have developed too much material or are trying to cover too much 
detail, so you should prune your presentation to the time available. You must also famil-
iarise yourself with the room and equipment you will be using. Think about the environ-
ment in which you will be presenting and the facilities that are available to you. Do you 
know the layout of the room, its size? Can you operate the hardware (the laptop and the 
projector) for projecting computer images with PowerPoint®-type presentations?
You can begin initial rehearsals in the privacy of your own room or in front of a mirror 
to check things such as timing, structure and flow. Try to rehearse your presentation in 
front of somebody else as well at some stage. Other people can usually spot silly mistakes 
or places where they feel you aren’t explaining yourself clearly. Finally, try to rehearse 
your presentation the room you will actually be using for the presentation – you might 
be able to do this the evening before for a conference presentation or book the room 
in your department if it is an internal presentation. Make sure that you can use all the 
equipment that is there.
One cautionary note to end with is that oral presentations can often suffer from over 
preparation. Sometimes presentations appear stilted; the off-the-cuff remarks appear 
well rehearsed; the talk doesn’t flow naturally, the speaker appears to be reading from 
a well-rehearsed script rather than talking to the audience. Try not to fall into this trap 

	
9.2 Oral presentations
243
by learning your presentation word for word. The audience expect to be spoken to as 
people, not read to from a script. Remember that they are all individuals and expect to 
be spoken to as such rather than an amorphous group.
9.2.3   The presentation content
All presentations should have three main sections: the beginning, the middle and the 
end. The purpose of the beginning is to set the scene and tone for the audience and pro-
vide them with information about your presentation’s content. To cover all the points 
necessary for your introduction, apply the who, what, how, why, when approach.
● Who are you – what is your affiliation, why are you there?
● What are you going to talk about?
● How long will the presentation last?
● Why should they listen to you – why is what you are going to say important and timely?
● When can they ask questions – during the talk or at the end?
It is useful to have an introductory slide for these points. You might then like to set 
the scene in more detail by identifying the specific topics you will be discussing. A slide 
with the structure of your talk and its content is also useful here (see Section 9.2.5).
Having set the scene for your presentation you can move on to the main body of your 
talk. What you include within your presentation will depend on the points discussed 
­earlier – its objectives, the audience and the time that is available. A common approach 
for most talks of any reasonable length (20 minutes or more) is to cover three main points 
during their main body. People can easily retain three main ideas; any more than that and 
they may become confused.
You should always conclude and summarise your presentation – never end abruptly. 
Try to summarise what you have covered: what were the main points you made that you 
would like people to remember? What are the conclusions from your work? How do you 
feel the work can be developed in the future? Try to end your presentation on a high. Many 
people switch off during the main body of a presentation, listening mainly to the introduc-
tion and the conclusions. Don’t end your talk stating that you wish you’d never pursued 
your project in the first place. Try to emphasise the main contributions you have made.
To ensure that your audience remembers your talk, give them something to take away 
with them. This could be a copy of some of your slides but, perhaps more importantly, 
it should be something distinctive about your talk they will remember – an unusual dia-
gram, an explosive demonstration or some earth-shattering results.
9.2.4   Visual aids
As noted earlier, visual aids come in various types: overhead transparencies, slides, flip 
charts, white boards and black boards and computer-based presentation packages. The 
most common is a computer-based presentation based on tools such as Microsoft® 
PowerPoint®. Although computer-based packages can produce very neat, colourful 
and dynamic images, without adequate projection equipment they can be useless. The 
rules for presenting computer-based presentations are much the same as for producing 

	 Chapter 9 ● Presentation skills 
244
overhead transparencies. However, three other points are worth noting with respect to 
these kinds of presentations.
● Will a laptop or PC be available or will you have to provide your own?
● What medium should you bring your presentation on – memory stick, for example?
● Will you have a back-up delivery method available if something goes wrong? For 
example, will you take overhead transparency slides of your presentation just in case?
Although black boards and (interactive) white boards are used extensively within 
teaching environments (particularly mathematics), they are not always well suited to 
presentations. You will find yourself continually turning your back to the audience to 
draw or write something; you may find yourself talking to the board rather than the 
audience and, if your handwriting isn’t particularly neat, your jottings may be illegible 
anyway. However, they can be useful if you have previously drawn or written something 
on them before you start your presentation or need to develop an idea or a list with audi-
ence participation. Having said this, unless you are confident with these media, it is best 
to avoid the use of black boards and white boards during presentations.
For overhead transparencies and PowerPoint®-style presentations there are a number 
of simple considerations that you should bear in mind during their preparation.
● Detail. Try to make sure that your slides are not too detailed or too sparse. ­Rogerson 
(1989: 95) suggests 40 to 50 words per slide can be absorbed in one go, whereas 
Berndtsson et al. (2008: 95) suggest a maximum of seven lines of text with no more 
than seven words per line. Large paragraphs should certainly be avoided. Figure 9.1 
provides an example of a slide (taken from the example in Chapter 5) that is too 
detailed and contains too much text. Figure 9.2 shows a better example, following 
the advice of Berndtsson et al., and presenting the information as a bulleted list that 
the presenter can talk around.
Figure 9.1 An over-detailed slide

	
9.2 Oral presentations
245
● Pictures. Remember that a picture paints a thousand words. Try to strike a balance 
between images and text in your presentation. People are more likely to focus on, and 
remember, images than long textual explanations.
● Font. Use a clear font of an adequate size. Don’t use a gothic font or a size that is so 
small it cannot be read easily from the back of the room. The way to decide on a suit-
able font is to try out a sample in the room beforehand. In a smaller room you might 
well get away with a 14- or 18-point font, but in larger auditoriums you will not.
● Colours. Be careful when using colours on your slides. Some colours clash quite 
badly and others do not show up very well when projected. Once again, experiment to 
find out which combinations are most suitable. As a general rule, bold, deep colours 
stand out best of all and contrasting colours between foreground text and background 
should be used. Computer-based presentations can usually get away with more var-
ied colours than those based on transparencies as the projection equipment used is 
normally more powerful.
● Handwriting. If at all possible, try to avoid using hand-written or hand-drawn dia-
grams on transparencies. Word-processed and computer-generated transparencies 
look far more professional and appear much clearer.
● Multimedia. If you are performing a computer-based presentation you can also con-
sider including video clips, sound, computer graphics and music. These can take time 
to prepare and they can also ‘pad out’ your presentation when the audience has really 
come to listen to you. However, there are certain aspects of student projects that can 
be presented in a better way through multimedia. For example, a video clip of a soft-
ware system being used in the field; a short animation of some graphics generated by 
your software package and so on. Be careful when using these multimedia systems 
Figure 9.2 A clear slide

	 Chapter 9 ● Presentation skills 
246
(make sure they are portable and will work on the presentation laptop) but be aware 
that they can ‘spice up’ otherwise dull presentations.
● Bullet points. Some of the clearest slides are those containing a few bullet points 
which you ‘talk around’ during your presentation, as shown in Figure 9.2. These 
points provide focus for the talk and are not so detailed that the audience spends more 
time trying to read the slide than listening to you.
● Style. Try to produce a consistent style for your slides – a consistent background and 
text colour, a consistent font, a border style perhaps including your name, affiliation 
and presentation title. A consistent style looks more professional and the audience 
don’t have to keep ‘acclimatising’ themselves to ever-changing formats. If you are 
using a computer-based system like PowerPoint® you can set up a ‘slide master’ that 
applies a consistent style across all the slides you produce.
● Slide transitions. If you are using a computer-based presentation system, you can vary 
the transition from one slide to the next (there are around 60 possible transitions in the 
system on my machine – varying from ‘Blinds horizontal’ to ‘Wipe up’). There are no 
rules regarding which transitions are the ‘best’ to use so you should select those that seem 
most professional to you. You might consider varying the transitions from one slide to 
the next to make it more interesting for the audience or you may stick with one style that 
appears more professional.
Two other aids you might wish to consider are handouts and objects that can be 
passed around the audience. Before you pass out handouts you should be aware of their 
purpose. If the audience will need to refer to the handouts during your presentation, 
you should pass them out before you begin. If not, it is best to leave them until the end 
as they can cause a lot of distraction to you and the audience during your presentation. 
Handouts of your presentation can easily be generated with computer-based systems 
such as PowerPoint®. They allow you to put two, four or six copies of your slides on a 
single sheet of paper (or even note-based pages that have a copy of the slide and a space 
for annotating notes). Be careful that your audience do not lose interest in your talk 
because they have all they need on the handouts. To avoid this you might like to give the 
copies of your slides on handouts after your talk is completed.
Passing around objects (for example, circuit boards) is quite interesting for the audience 
as it gives them a hands-on, close-up view of what you are talking about. They can, however, 
cause an unwelcome distraction so be careful as to the number of objects you pass around 
(especially if they are fragile!) and when you do it. Try to hand objects around during less 
intense periods of your talk, when the audience’s complete attention is not required.
9.2.5   Slide content
Your presentation should be split into three distinct components.
	 1.	 Introduction. Consisting of one or two slides that introduce you and your talk.
	 2.	 Main body. The slides that constitute the bulk of your presentation and cover the 
main points that you wish to get across. How many slides you use within this section 
will depend on the length of the presentation and the information you wish to convey.
	 3.	 Summary/conclusion. A few slides that summarise your presentation and per-
haps identify areas of further work.

	
9.2 Oral presentations
247
The introduction to your presentation usually involves two slides (although this can be 
compressed into one slide for shorter presentations of less than ten minutes). The first 
slide should present (as a minimum) the title of your talk, your name and your affiliation. 
You might also include the name of your supervisor(s) if you feel this appropriate and 
any co-authors of the work. Sponsors and organisations/companies involved with the 
project might also be included on this slide.
You should also consider numbering your slides, so that people can refer to them after 
the presentation when they are asking questions. Sometimes people also include the total 
number of slides with the slide number (for example, ‘1/12’ or ‘1 of 12’). This gives the 
audience an idea of how much of your talk is left to go at any stage (which sometimes 
helps and sometimes does not!). You might also consider adding the date or, in the case 
of conferences, the name of the conference somewhere innocuous at the foot of each 
slide. These can make the slides appear more ‘personal’ to the audience – they have been 
produced just for them at this conference (despite the fact that you are re-using the slides 
from another talk you gave some time ago!).
Figure 9.3 presents a typical example of an introductory first slide. Note that title, 
presenter and affiliation are included (and also, in this case, the name of the conference 
in the bottom left and the slide number in the bottom right). You will use this slide to 
introduce these points as these are things that are easy for you to remember and it helps 
you to settle into your talk.
Figure 9.3 An example of an introductory first slide
Software development – an
industrial perspective
Sam Dawson
Department of Computing
1
SWENG II-2015 

	 Chapter 9 ● Presentation skills 
248
The second slide usually presents the structure of your talk as series of bullet points. 
A typical example is presented in Figure 9.4. This is another slide that is fairly easy to 
‘talk to’ and should also help you settle into your stride.
Your talk then moves into the main body of the presentation. Berndtsson et al. 
(2008: 93) suggest the following slides for the main body of a presentation lasting around 
20 minutes:
● background;
● arguments;
● aims and objectives;
● approach;
● results.
The Background allows you to introduce the project to the audience. The Arguments 
are those supporting the Aims and objectives which are introduced next. There is a slide 
discussing the Approach (and methods) used for the research. The Results are presented 
next. As noted earlier, the content of the main body depends largely on the purpose of 
your presentation. For a software-development project you might be presenting the 
requirements, designs, some implementation issues and so on. For a PhD you would 
want to concentrate on your main contribution and will probably be presenting a highly 
technical presentation. Whatever the case, discuss the content of your presentation with 
your supervisor and take their advice.
Figure 9.4 An example of a slide outlining the talk’s structure
Software development – an industrial perspective
• Introduction;
• Software development processes;
• The companies involved;
• Research methods;
• The experiments;
• Results;  
• Conclusions and future work.
2
SWENG II - 2015

	
9.2 Oral presentations
249
The final few slides that you present summarise and conclude your presentation. You 
may need up to four slides to complete this task, or you may be able to summarise in a 
single slide. Short presentations may not need a summary slide but, for longer presenta-
tions over 30 minutes, a summary may be useful to bring everything back together for the 
audience. A second slide might be used to highlight the conclusions of your work – what 
have you discovered, developed and contributed, for example. A third slide could also 
be used to present ideas for future work: how your work may be developed in the future 
and what direction you feel the research should go. This future work slide is also a use-
ful starting point for the questions and discussion that inevitably follow a talk. The last 
slide that you might consider using is an Any questions? slide. An example is presented 
in Figure 9.5. This is used to complete your presentation; it might provide your contact 
details again if people are interested and it invites the audience to start asking you ques-
tions about your presentation.
9.2.6   Delivery
Although you might be well prepared and your visual aids look stunning, a poor delivery 
can ruin your presentation. Rogerson (1989: 97) identifies a number of factors that can 
distract the audience from what you are saying during delivery, including:
● talking with your back to audience or mumbling – lots of ‘mmms’ and ‘errs’;
● not scanning the audience as a whole but focusing on one part of the room only;
● wild gesticulation – people focus on this rather than what you are saying;
● irrelevant information or sidetracking from the main point;
● extraneous noise;
● fidgeting, pacing up and down or fiddling with something such as a pen or your 
glasses.
Figure 9.5 An ‘Any questions?’ last slide
SWENG II - 2015
Questions?
Sam.Dawson@loughborough.ac.uk
Software development – an industrial perspective
15

	 Chapter 9 ● Presentation skills 
250
In addition, you might also be trying to cover too much detail in a particular area – 
perhaps presenting lots of statistics, detailed equations and so on. Figure 9.6 provides an 
indication of audience attention during a presentation’s delivery. As you can see, many 
people only remain focused at the beginning, when they are wide awake, and towards 
the end, when they wake up and try to catch up on what you are saying. Your delivery has 
a distinct effect on the audience’s attention during the main body of your presentation.
Some tips for successful deliver are outlined below.
● Scanning. Make sure that you scan around all the audience during your presentation, 
maintain eye contact (or look at their foreheads if you are too nervous to look them in 
the eye) and remember to talk to people, not just their faces. Quite often you will see 
two or three people paying close attention to what you are saying, perhaps nodding 
in agreement or taking notes. You will tend to find that you focus in on these people. 
It then feels as if you are almost talking to one person at a time, not a large group and 
this can help reduce your nerves.
● All clear? When you put slides onto the overhead projector or you project slides from 
your computer, make sure that they are clear. Make sure that you are not standing in 
the way of the projector, the slides are the right way up and everything is in focus.
● Handovers. If you are involved with a joint presentation, for example as part of a 
group project, make sure that the handovers to each other are rehearsed and you 
know the sequence in which each of you is speaking. It looks very unprofessional to 
see people end their section abruptly and ask the rest of the group, ‘Who’s next?’
● Voice. Make sure that you maintain a clear, confident voice throughout your presenta-
tion and don’t mumble. Take deep breaths, slow down and pause to compose yourself 
if you have to. Keep your head up and project your voice to the back of the room. Try 
to vary your tone and pace to keep your voice interesting.
● Timing. Make sure that you keep to time during your presentation. Keep a watch or 
a clock within sight and know the time when you are due to finish. As a general rule-
of-thumb you would expect each slide to take at least a minute to present – so, for a 
20-minute presentation, 20 slides would be more than enough.
● Pauses. Pauses can be used to good effect during a presentation. The audience will 
pay close attention to what you have to say after a pause so use them just before you 
have something important to say. Try not to use too many or they will lose their 
impact.
Figure 9.6 An audience’s attention level during a presentation

	
9.2 Oral presentations
251
One other factor you will want to consider as part of your delivery is how to use your 
notes. Although some people attempt to learn the whole talk word for word (which 
can appear stilted and over-prepared), many people use a series of cards with points set 
down on each of them covering the content of their talk. Quite often, however, people 
get ahead of themselves, and are often seen rummaging through their cards to see what 
they are supposed to be talking about next. Another approach is to have one or two 
sheets of paper nearby with the main points and structure of your talk noted down to 
prompt you, possibly with lines and arrows to direct you.
It is up to you how much detail you put down on your cards or sheets. With practice, 
just a few prompting words should be sufficient. At the other extreme you might want to 
write down your talk word-for-word in case you dry up and have to read it out, but this 
is ill-advised. Although you should make the notes detailed enough so that you know 
what to say, they shouldn’t be so detailed that you have to stop your presentation to read 
them. A cursory glance should be all that is required for a well-rehearsed presentation.
9.2.7   Dealing with questions
Although you might complete your presentation satisfactorily, quite often the hardest 
part of an oral presentation is fielding the questions at the end. This is the part over which 
you have little control. In some circumstances, particularly if your presentation forms 
part of your assessment, the questioner knows the answer to the question they pose. They 
are probing your depth of knowledge and ability to convey that knowledge. They are also 
interested to see how you handle questions and how well you can ‘think on your feet’.
A few points worth considering that will help you to deal with questions are out-
lined below.
● Preparation. Try to think beforehand what kinds of questions you might be asked – 
will they be technical or more general? What kinds of answers will you be expected to 
give – extended answers or short answers? Will you be expected to justify or defend 
parts of your project?
● Plants. It is not uncommon for presenters to ‘plant’ questions with colleagues in the 
audience. This can help to relax you because you have the prepared answers, and can 
take up time that might otherwise have been filled with more difficult questions.
● Repeat the question. Sometimes the audience doesn’t hear the whole question when 
it is asked (particularly if the room is large and only you have access to a microphone), 
so summarise the question for the entire audience before you begin to answer it. This 
technique will also give you a moment to collect your thoughts before you frame an 
answer.
● Confidence. At all times try to remain confident. You have been asked to speak for a 
reason so you are justified in being there and people feel you are worthy to be asked 
a question.
● Brevity. Try to keep your answers brief and to the point.
● Conflict. Avoid conflict with the audience. Admit that differences do exist, discuss 
alternative interpretations and opinions, and try to address things from a higher 
level. In addition, avoid apportioning blame. If some results came out unexpect-
edly or some aspects of your project didn’t conclude satisfactorily explain why this 

	 Chapter 9 ● Presentation skills 
252
happened from your perspective. Don’t blame person X or person Y – your project 
is your responsibility so justify it from this angle.
● Clarification. You should always ask for clarification if you haven’t understood a 
question. Don’t try to answer what you think was asked or the question you would 
like to answer. The questioner will usually probe you further until they receive the 
response they are looking for.
● Offer to speak to them later. If you are really struggling with a question or really 
don’t understand it you can offer to speak to the questioner in more detail later.
● Address the audience. When you answer questions make sure that you address 
your answer to the whole audience. Your presentation isn’t over and you still have a 
responsibility to speak to the entire audience rather than entering an intimate con-
versation with one individual.
● Appear interested. Make sure you give the questioner due respect and appear inter-
ested in their question and point of view.
In conference situations the chair of your presentation’s session will often step in if ques-
tioning becomes hostile. This is very rare, but it does happen on occasions. If you feel you 
are being victimised or insulted you should ask the chair to intervene on your behalf.
9.2.8   Presentation tips
To conclude, a few tips are presented that are worth considering to improve your oral 
presentations.
● Time. If you have difficulty keeping to time (either over- or under-estimating), have 
some spare slides you can ‘drop in’ or take out of your presentation depending on how 
time is progressing.
● Pointers. Try to avoid using laser pointers. They are never clear and wobble all over 
the screen you are trying to point at. A much better way is to use a pen or pointer on 
the overhead projector itself. If you are nervous, place the pen down against the point 
you are referring to and leave it there. If you are using a computer-based presentation 
you could use the mouse pointer as a pointing device.
● Movement. Many people fidget and move around alarmingly when they are giving a 
presentation. With practice you can suppress these urges and learn to avoid annoying 
habits such as jangling keys in your pocket. If you are going to make a movement, 
try not to make it an exaggerated one unless you need to do so for emphasis and to 
demonstrate your enthusiasm. If you want to stop yourself walking around, place a 
finger on the nearest desk or chair – subconsciously your body will want to remain 
fixed where you are.
● Nerves. Everybody suffers from nerves to some extent or another. Although nerves 
are never totally eliminated, they do ebb as you become more and more used to giving 
presentations. One tip is to rehearse your presentation so you are comfortable with 
the material and become confident that you can address any questions that might 
crop up. Regular, deep breaths also help to calm nerves. Another tip here is to give as 
many presentations as possible and practise as much as possible. The more you do, 
the easier it becomes. Without a few nerves you will not have enough adrenalin to give 

	
9.3 Poster presentations
253
an exciting presentation. If you are shaking you could perhaps switch the overhead 
projector off as you change slides. Also remember that the audience is fundamentally 
on your side. They are not there to catch you out and they want to see you succeed.
● Technical failure. Overhead projectors are not infallible (the bulbs do blow in them 
quite frequently) and laptops linked to projectors do go wrong from time to time. 
Quite often projectors have spare bulbs within them that you can switch to; so learn 
how to do this. Alternatively, have a contingency plan such as using transparencies if 
you have a computer-based presentation or moving to a white board or referring to 
handouts of your slides if you are using an overhead projector. Usually, however, if 
there is a major technical failure, your session chair will step in to assist you.
Above all else, be enthusiastic. Enthusiasm can do a lot to hide nerves and perhaps 
some content lacking from your presentation. The audience will remain on the edge of 
their seats when they see how interested you are in your work and will become motivated 
and supportive of you as well.
• 9.3 Poster presentations
9.3.1   Introduction
Instead of students doing software demonstrations or oral presentations, 
some institutions arrange poster sessions as part of the assessment pro-
cess. At postgraduate level you may have to produce a poster for other 
reasons. Your department may hold a poster competition for its post-
graduate ­students – encouraging them to share their work with others. Alternatively, 
a poster presentation might be a good first step to getting your work published at an 
international ­conference – giving you the chance to meet others in your field and discuss 
your ideas with them.
In some ways poster sessions are better than oral presentations. You can interact more 
with people who are interested in your work (as they discuss the content of your poster with 
you) rather than having to follow a predefined presentation; they are less stressful (it is easier 
to stand by your poster and discuss your work than to present a talk to a roomful of people); 
you get a chance to see the work of others (rather than having to sit through a number of 
other presentations you might not be interested in); and you can focus on aspects of your 
work that you feel are most important as you discuss your poster face to face with others.
Because there are often many posters on display during poster sessions, you need 
to find a way to make your poster stand out so that people will be attracted to it and 
take an interest in your work. People tend to spend three different phases of time 
in front of posters – it is important to attract their attention in the first instance and 
then maintain their attention as they progress through different levels of detail on the 
poster. A viewer will get an overall feel for your poster in the first couple of seconds 
that they look at it (phase 1). Some questions that instinctively go through a viewer’s 
mind as they look at your poster during these seconds are:
● Is it the right subject material for me?
● Is it at the right level of detail?

	 Chapter 9 ● Presentation skills 
254
● Is it presented in such a way that I can easily understand the main points/principles?
● Is it interesting?
If your poster gets through phase 1 scrutiny, and the viewer decides to read your poster 
rather than move on, they will generally spend another 10 to 15 seconds on the second 
phase of their assessment. If a viewer is still interested after this stage, they will tend to 
be willing to read the whole poster and ask questions of the presenter (phase 3).
The following sections present some ways in which you can make your poster look 
good, keep people interested through to phase 3 of viewing and provide some examples 
of good and bad poster design. The main areas to consider are: the content, the layout, 
the font (size and style) and the colour scheme. Each of these areas will now be looked at 
in turn before concluding with a number of tips for producing pleasing-looking posters.
9.3.2   Content
You need to have some idea of what to cover, what will go into your poster and how large 
the poster should be before you can start putting it together. The first thing to consider 
is the audience. Are you producing the poster for an international conference, so the 
audience will be largely informed researchers in the field who will be interested in the 
detail of what you have done; or is the poster forming part of your final assessment and 
will be viewed largely by colleagues and examiners who might be more interested in a 
general overview of what you have achieved? The type of project you have undertaken 
will also influence the content of the poster. For a research-based project you might want 
to focus on information such as the research methodology, your findings, results and 
conclusions. For a software development project you might want to discuss the require-
ments, designs, implementation issues, user feedback, interface designs, functionality, 
business case and so forth.
Regardless of your project topic, include these essential sections in your poster.
● Title: Normally your project title (or title submitted to the conference). This should 
be catchy and not overly long. Make sure it is presented in sentence case (Like this, 
Not Like This or LIKE THIS).
● Name and affiliation/course details/contact details as appropriate.
● Introduction/overview/summary. This shouldn’t be an abstract but an introduction 
to what your project is about – providing the audience with a general idea of what you 
have achieved and what the poster is about.
● Conclusions. What are the main findings from your work, what is its contribution?
● Acknowledgements.
● References. Include these if appropriate but don’t list so many that they take up a large 
area of space.
The rest of the poster’s content is clearly influenced by the project type, the intended 
audience and the project’s contribution. It would be usual to include sections such 
as Results, Further Work, Methodology; but what goes into these sections is clearly 
dependent on the poster’s purpose. Bear in mind that a poster should have enough 
content so that the average reader could read the entire poster in around 10 minutes 
maximum.

	
9.3 Poster presentations
255
9.3.3   Size and shape
Make sure you know how large the poster should be when planning what to put in it. 
Sometimes posters are printed in A1 size (84 cm × 54 cm) but A0 is more usual (around 
119 cm × 84 cm). It doesn’t really matter how big you print your poster (as long as it is 
within suggested guidelines) as the larger the poster is, the further people stand away 
from the poster to take it all in anyway.
Note that posters are normally produced in landscape rather than portrait format but 
it doesn’t matter which way round you produce them as both forms are usually accept-
able. When you come to print out your poster, will you have access to a large printer that 
can print this size of poster or are you going to have to print out a number of smaller 
sheets and stick them together (which will look much less professional)?
9.3.4   Layout
Start by drafting your poster out on paper – getting an idea of the layout, where each 
section will be placed and how much space each section will be allocated. What graphs, 
figures and tables do you plan to include and where will they be placed? Use sticky notes 
to plan out where things will go and move these around as your ideas and the poster 
evolve. Posters tend to be easier to read when split into a number of columns (three or 
more). Having all the text arranged in one block like a report does not work well. The 
content should be arranged so that it progresses, firstly down columns and, secondly, 
from left to right in a logical sequence. Whether you have long columns or smaller sec-
tioned columns depends on how much information is going into each section. A sug-
gested content for posters is that around 25% of the poster should be text, 45% graphics 
(figures, pictures, etc.) and 30% should be white space.
Figure 9.7 shows some example wire frame layouts for posters. Both have a section 
at the top where the poster’s title and the author’s name would go. Both are split into 
a number of columns, the height and size varying according to the content. The poster 
on the right-hand side has been split so that supplementary information (not part of the 
main content of the poster) – such as acknowledgements, logos, email addresses, refer-
ences, etc. – is presented in a number of boxes at the bottom of the poster.
Another way to design your poster is to use a template. If you search for ‘poster 
template’ on the Internet you will find a number of predefined templates produced for 
Figure 9.7 Example poster layouts

	 Chapter 9 ● Presentation skills 
256
different software packages. These can be tailored to your own needs and provide some 
interesting ideas on layout, colour schemes and fonts. Another useful resource is http://
www.ePosters.net (the online journal of scientific posters). This site allows you to view 
other people’s posters and upload your own for comment.
9.3.5   Font
Use a proportional sans-serif font for your poster – particularly for the title and head-
ings, which need to be clear. Serifs are the small strokes on the ends of the letters. As 
its name suggests, a sans-serif font does not have serifs. In a proportional font, the 
letters take up different widths of space, depending on their size/shape. For example, 
‘i’ takes up less space than ‘o’ in a proportional font. It is felt that proportional fonts 
are easier to read than non-proportional (also called monospaced) fonts in which each 
letter takes up the same amount of space, irrespective of its size (for example, ­Courier 
is a monospaced font). You should try to use the same font throughout your poster 
(although headings and titles could be in a different font to smaller blocks of text) – 
don’t chop and change from one section to another (even on figures and charts). This 
provides a professional consistency to the poster. Arial is a good, readable font to 
choose for posters as it is proportional and sans-serif. For the smaller text on your 
poster a serif font can be used as some people find these fonts easier to read than 
­sans-serif fonts when reading large blocks of text – but stick to a sans-serif font for 
headings and titles.
In terms of font size a general rule of thumb is that you should never use size 12-point 
type or smaller for a poster. The minimum type size for poster test is 14-point, whereas 
titles and section headings will obviously need to be much larger.
9.3.6   Colours
The choice of colours can make or break your poster. While you may have got the con-
tent, layout and font correct, choosing clashing, garish colours or colours that do not 
contrast very well can make your poster unreadable.
Softer colours tend to work well for backgrounds, whereas foreground text should be 
presented in bold colours to make it stand out. Make sure that the colours you choose 
for backgrounds and foregrounds contrast well – there is no point, for example, having 
a pale yellow text on a white background or white text on a pale pastel background – it 
will just be too difficult to read. However, don’t go for white text on a dark (black) 
background either. While these colours may contrast well, the overall appearance of the 
poster can be daunting and difficult to read.
9.3.7   Examples
Figures 9.8 and 9.9 provide two example posters from a student project that aimed to 
develop a website to statistically analyse various kinds of data. Ignoring the content of 
the posters, they provide a contrasting example of bad and good poster design. While 
both posters are based on the same project and say much the same thing in terms of 
content, the way they have presented this information is vastly different. Figure 9.8 
shows a badly designed poster. The layout is poor – consisting of a number of sections of 

	
9.3 Poster presentations
257
Figure 9.8 Example of a badly designed poster
Figure 9.9 Example of a three-column poster with a coloured background

	 Chapter 9 ● Presentation skills 
258
Figure 9.10 Example of a postgraduate poster
text. There are no images or diagrams to break up the poster. There is little white space. 
There are spelling mistakes (notably in the title). There are a number of different fonts 
used and the size of font is too small in many cases. Perhaps worst of all is the colour 
scheme – the white on black text is intense and the section with the white on pale blue 
is unreadable.
In contrast Figure 9.9 shows a better presentation of the same material. In this case 
the layout has been split into three columns with a header section (containing the title 
and author). A consistent font (Arial) is used throughout and a minimum point type of 
20 has been used for the smallest text. The main title is produced in a font size of 110, 
whereas the subheadings are produced in a font size of 100. The background is gener-
ally pale with the text presented in a contrasting dark type. Figures and pictures are 
used to make the poster more appealing and there is plenty of white space. This poster 
was produced using Microsoft® PowerPoint® with the page set to A0 size. Although 
this poster might not win any design competitions, it is much better than the previous 
version.
Figures 9.10, 9.11 and 9.12 present another three examples of student posters. These 
three posters were presented at a departmental poster competition for postgraduate 
students. Of the 30 or so posters presented at the competition these were the three 
that caught the eye most. The first is very clear in its layout and flow; the second pro-
vides a lot of detail but has some interesting images to break up the text; and the third 
(which won the poster competition) has a very interesting, clear layout with a themed 
presentation style.

	
9.3 Poster presentations
259
Figure 9.11 Example of a postgraduate poster
Figure 9.12 Example of a postgraduate poster

	 Chapter 9 ● Presentation skills 
260
9.3.8   Software
There are a number of software packages available to produce posters. You can use 
specialist desktop publishing packages such as QuarkXpress®, Adobe® InDesign® and 
Microsoft® Publisher®. Alternatively, you could use graphics or drawing packages to 
piece together your poster. Examples include CorelDraw®, OmniGraffle, FreeHand® 
and SmartDraw®. A less sophisticated approach might be to develop your poster in a 
word processing package such as Microsoft® Word®. In the examples put together in 
this chapter Microsoft PowerPoint® has been used. This allowed text and graphics to 
be inserted on the page, colours to be set, lines to be drawn and, importantly, spelling 
to be checked. Most students will use a package such as Publisher® or PowerPoint® as 
these are readily available and are relatively easy to use.
9.3.9   Poster preparation tips
● Use boldly coloured text and more subtle background colours. Don’t choose clashing 
colours and colours that make people’s eyes hurt. Contrasting colours are important. 
Take the following two examples in Figure 9.13 and Figure 9.14. Both of these post-
ers have exactly the same content but have been presented in a slightly different way. 
Figure 9.13, while split into four columns, has no distinguishing border or outline 
to these columns. In contrast, Figure 9.14 has placed the entire poster on a darker 
background so that the columns stand out more. You might want to consider which 
one you feel looks best.
● Use non-shiny paper (do not laminate the poster). Shiny posters are often difficult to 
read as the light catches them.
● Depending on the context (conference, final assessment, etc.), consider providing 
handouts – perhaps A4 copies of the poster, a summary page, etc.
● Be careful when using clip art or images in your poster. Sometimes, when the poster 
is printed out full size, images can become pixelated and appear blurred.
● Do not use a font smaller than 14-point type and use a consistent font throughout.
● Make sure the poster is structured logically – flowing down through columns and 
from left to right.
● Keep equations to a minimum.
● Figures, tables, charts, etc. should be used. A poster made up entirely of text will not 
look particularly attractive.
● Make sure all graphs and charts are correctly labelled and can be read in isolation (for 
example, you don’t have to read through the text to determine the scale on a map, or 
what the axes on a graph represent).
● Where figures and pictures are used, their appearance can be enhanced by applying 
a border to them. Consider Figures 9.15 and 9.16. In Figure 9.15 a picture is shown 
with and without a border. In Figure 9.16 a chart is shown with and without a bor-
der. By encapsulating the images within a border they appear to stand out from the 
page more.
● Check your spelling. Spelling mistakes look a lot worse when blown up to large scale 
on a poster.

	
9.3 Poster presentations
261
Figure 9.13 Example of a four columned poster with a plain white background
Figure 9.14 Example of a four columned poster with white column background and darker overall 
background

	 Chapter 9 ● Presentation skills 
262
Figure 9.15 Example of a photograph with and without a border
Figure 9.16 Example of a chart with and without a border
100
90
80
70
60
50
40
30
20
10
0
UK
USA
Total users
100
90
80
70
60
50
40
Total users
30
20
10
0
UK
USA
● Avoid large blocks of text – probably up to 10 sentences at most in any one section.
● Don’t try to pack too much into your poster – remember to leave sufficient white 
space on the poster. Be selective in which results you are presenting and focus on 
those charts and figures that convey the main contribution of your work.
Once you have produced your poster it is a good idea to get feedback on it from friends 
or colleagues. Although you may think you have chosen an interesting design and appro-
priate colour combination, they may have other opinions. You are unlikely to produce 
a perfect poster straight off at a first attempt – so be prepared to draft and redraft until 
you get it right.
• 9.4 Demonstrating software
9.4.1   Introduction
As a student on a computing course of one kind or another, there is a strong chance that 
you will have developed a piece of software at some stage. Whether this software is the 
main component of your project, or whether it is merely a vehicle for testing out and 

	
9.4 Demonstrating software
263
presenting some ideas, you may well have to demonstrate this software to your tutor, 
your examiner, your peers, a client or some other interested parties. This section dis-
cusses ways to prepare for such a presentation, some considerations you should make 
before your demonstration, and some tips that will assist you.
9.4.2   Preparation
You should prepare for a software demonstration in much the same way as you would 
prepare an oral presentation. You should decide on your demonstration’s purpose, then 
plan, prepare and rehearse your demonstration.
When deciding on your demonstration’s purpose ask yourself what you hope to 
achieve. What do you hope to show and get across to the audience?
Your demonstration should also be planned thoroughly. Structure the demonstration 
beforehand – don’t just expect to ‘play around’ with your program on the day. Like an 
oral presentation it should have a beginning, middle and an end. You should also decide 
how you want the demonstration to be performed.
● Solo running. You run through a particular, planned sequence of tasks on your own 
with no interruptions or audience interaction. This approach is not advisable as it 
might appear that you are ‘protecting’ your program’s weaknesses by merely dem-
onstrating some simplistic features. In other words, any variations to the sequence 
or the data you are entering might cause your program to crash. Although this might 
not be the case, this is how it might appear to the audience.
● Rolling demonstration. The software runs itself through a predetermined demon-
stration that cannot be interacted with. This might be a demonstration package you 
have developed rather than the software package itself.
● Audience participation. You allow the audience to request things or suggest exam-
ples as you run through the program in a relatively free manner. This is the most 
common approach to software demonstrations where you have an approximate idea 
of the functions and options you wish to demonstrate but expect to be directed at 
times by audience requests.
● Audience running. You permit the audience to play with the software with you guid-
ing them. This approach is suitable for a software tool or app that is demonstrating 
usability and ease of learning.
● Supporting presentation. When students perform software demonstrations they some-
times use two machines. One is for the demonstration of the software; the other is for a 
short PowerPoint®-style presentation that introduces the demonstration – the project, 
the client, the format of the demonstration and so on. You can run the presentation and 
the demonstration on the same machine, but there is a risk that your software won’t load 
and run smoothly while the presentation package is still running in the background.
When you prepare your demonstration you should bear three things in mind: time, 
audience, focus.
● Time. How much time is available? You do not want to over- or under-run your 
demonstration so careful preparation and timing of actions during rehearsal is impor-
tant. If you are overrunning think about parts of the program that don’t really need 

	 Chapter 9 ● Presentation skills 
264
demonstrating. Can you go straight to the part of the program you really want the 
audience to see and skip any introductory screens or messages?
● Audience. Know who the audience will be – what do they know, want to see/learn? 
Are they staff, students or a client? What will you have to explain? What is the audi-
ence likely to ask you? Will you need to justify primary things such as the choice of 
programming language used, the algorithm you have decided to use and so on?
It may be that you are presenting your software to your tutor, but the software is 
actually for somebody else – an industrial client, for example. Your tutor, therefore, 
may be more interested in your design, interface development and so on, whereas the 
client may be more interested in learning how the software works and its functionality 
and limitations.
The size of group will also have a bearing on your presentation. According to Rog-
erson (1989: 103), a software demonstration ‘to a large group will be more generalised 
and more high level than that to a smaller group when the interests can be identified 
and the demonstration tailored accordingly’. The size of audience will also have an 
effect on the choice of hardware you will need to use. For three or four people a single 
monitor or device might be suitable, but for larger groups you will have to consider 
using a projection system of some kind or another – particularly if you are demonstrat-
ing mobile apps or tablet systems.
● Focus. Concentrate and focus on the good points of your software – not just basic 
functions such as logging on, loading and saving files, printing and so on. Similarly, 
try to focus the demonstration towards the purpose of your project. For example, if 
your project aimed to explore human–computer interaction issues, concentrate on 
the software’s screen designs, layouts and navigation routes. If it was to implement 
and test a particular algorithm, focus on the results and outputs from the software 
and its efficiency.
Before you actually perform your demonstration you should rehearse it thoroughly – 
preferably on the hardware system you will be using on the day. Make sure that your 
software will work on the system you will be using – is it the right hardware configura-
tion, does it need a graphics card and so on?
9.4.3   Demonstration tips
The following points are a selection of tips that will help you prepare and present effec-
tive software demonstrations. This list is not exhaustive and the effectiveness of individ-
ual tips will depend on the type of demonstration you are performing, the programming 
language you have used, and the audience.
● If possible, try to set up as much as you can beforehand. People hate to wait around 
while you load software, set up overhead projectors and so on. If this is not possible 
try to practise loading your software somewhere else so that you can load it as quickly 
and easily as possible. Although your presentation may not yet have started, people 
can be put off your program before they have even seen it working because it appears 
to need half an hour and a PhD to install! Alternatively, be prepared to give a small 
anecdote, story or some additional information about your program to help pass the 
time while it loads.

	
9.5 Viva voce examinations
265
● Make sure that all the audience can see the screen clearly. Is there any reflective light 
on the screen? Is the monitor clear of smudges and finger marks?
● Know your software’s limitations, bugs and faults so that you don’t try to do some-
thing that your software can’t handle. This is also useful if you are to demonstrate a 
particular aspect of the code in which there are problems so you don’t look embar-
rassed or surprised when things go wrong. In this case you can explain that a particu-
lar section is still under development or hasn’t been thoroughly tested yet. You can 
also state that the fault/bug is known and is documented on page 52 of the report!
● Know how your software works and how it is structured. This will enable you to 
explain these points if asked and will demonstrate your deeper understanding of the 
code.
● If your software is well written and well structured, it is likely to consist of a number 
of stubs. These stubs are sections of code (components and functions) that haven’t 
been completed but will be developed in the future. Developing a program using a 
top-down approach to identify its components and functions is a recognised practice 
and is acceptable providing that the system doesn’t crash when it accesses these stubs 
(see Chapter 6 for more discussion of this development approach). In these cases it is 
usual for each stub to return a message such as ‘This function is still under develop-
ment’. Developing your program in this way improves its maintainability, readability 
and structure.
● Highlight some additional features you have included that may not be apparent from 
a straightforward demonstration. For example, if the software asks the user to enter 
a month number, the software might check that the value is between 1 and 12 (not 
apparent if they entered 6). These kinds of checks, although included, are not nor-
mally evident from a demonstration unless pointed out or questioned.
● Never say – ‘Oh, that shouldn’t have happened’, or ‘What’s happening now?’
● Be aware of similar software packages. Know the competition and understand how 
your software compares with (and improves upon) them. Section 5.3 provided some 
guidance on where to look for software relevant to your project.
● Practise beforehand. The main point to emphasise is rehearsal. You don’t want to run 
out of time having only demonstrated half of your program and you don’t want to 
come across unexpected bugs.
• 9.5 Viva voce examinations
Not only do students often have to present their projects in oral presenta-
tions, but they also have to ‘defend’ their project during a viva voce exami-
nation (vivas). This form of examination is more common at postgraduate 
level and is compulsory for PhDs.
A viva is an oral ‘interview’ conducted by examiners (one or more examiners may be 
involved). Sometimes it is used merely to check that the work of the project is your own 
and has not been done by someone else. Sometimes it is used to clarify some points you 
made in your report that are vague or unclear. It is more commonly used to assess your 
understanding, depth of knowledge, confidence and ability to present your project in an 

	 Chapter 9 ● Presentation skills 
266
examination situation. You should be prepared to defend your project during the exami-
nation; justifying why it is important and timely. You should also be able to explain and 
discuss the contribution that your project is making. You will not be expected to know 
your report/dissertation word for word (for example, what is on page 10, paragraph 2) 
so you should be able to refer to your report during the examination.
In some cases the viva is used only to upgrade your mark; for example, at undergradu-
ate level, if you are a borderline case, the examiner might be looking for a good reason 
to increase your final mark. At postgraduate level the viva is used as an additional way of 
examining your understanding of your project and the subject area and provides further 
evidence to support your project.
The nature of your course will affect the duration and content of any viva you might have 
to attend. Vivas can last anything from 5 to 30 minutes (at undergraduate level) to several 
hours or even two or three days in the case of some PhDs. For open-ended vivas, generally 
speaking, the shorter they are the more confident the examiners are with the quality of your 
work and the less they feel they need to probe you on your understanding.
Who conducts the examination will also be dictated by your course’s 
requirements. At one extreme it might be little more than a brief chat with 
your supervisor. For research degrees it is more than likely that external 
examiners will conduct the viva, with internal examiners and possibly your 
own supervisor(s) in attendance. Sometimes examining committees are involved and 
sometimes the examination is held in public (this is common in Europe). For under-
graduate projects, external examiners are unlikely and your own supervisor or another 
academic within your department will conduct the interview.
Whether your viva is a short interview with your supervisor, or the more formal post-
graduate viva, you should still prepare for it thoroughly.
● Make sure that you read your report thoroughly beforehand so that it is fresh in your 
mind. For postgraduate projects there can often be a gap of several months between 
the time you submit your dissertation and the time you attend your viva.
● Try to identify any errors, omissions and perhaps shortfalls with your work, so that 
you are prepared to defend these points in the examination. If an examiner identifies 
a shortfall with your work of which you were unaware it can catch you off guard and 
leave you struggling. If, however, you have identified any problems beforehand, you 
can perhaps be prepared to discuss why you didn’t do something in a particular way 
or feel that such-and-such a method was inappropriate in your case. You could then 
move on to emphasise some of the more important findings you made.
● Be aware of the things you left out of your report – references, data, methods and so 
on. Be prepared to defend your reasons for omitting them.
● Be prepared to discuss future developments to your work. Where do you feel your 
research is heading? What do you think is the future of your subject area? What top-
ics do you feel are suitable for further research and development? If you are unable to 
do this you might give the impression that your project has been merely a vehicle for 
obtaining your degree and you have no motivation towards the work or enough inter-
est to care how it is developed in the future.
● Cryer (2006: 249) notes that you should be prepared to answer quite general ques-
tions about your project; ‘What did you enjoy most about your work?’, ‘What would 

	
9.5 Viva voce examinations
267
you do differently if you were starting out all over again?’ and so on. These kinds of 
questions can often cause more problems than the highly technical questions on spe-
cific aspects of your project that you understand in detail and can talk about for hours. 
They might also be used by examiners to probe ‘how well you can appraise your own 
work and your personal development as a researcher and scholar’ (Cryer, ibid.).
● Make sure that you understand the broader subject area in which your project resides. 
This will allow you to emphasise the contribution that your project is making and 
enable you to discuss its context within wider issues.
During the examination:
● Make sure that you defend your project positively. In other words, don’t criticise the 
work of others but focus on the contribution that your own project is making. Cryer 
(2006: 252) states that you should show that you do take the work of others seriously 
even if you disagree with them.
● Be prepared to answer open questions and give extended answers; not just simple 
‘yes’ or ‘no’ answers. Ricketts (1998: 25) presents some typical questions you might 
encounter in your viva that require extended answers. Typical questions include:
● What related research did you locate and draw on?
● What do you feel was the most challenging part of your project?
● What was the most interesting part of your project?
● What is the main contribution your project is making?
● What would you do differently next time?
● What makes you think your project is the right level (in terms of scope, breadth, 
depth, quality) for your course?
● What parts of your work could be published?
● Why did you not use methods X, Y or Z? Why did you use methods P, Q or R?
● Avoid confrontation. Don’t argue with the examiners but try to explain your point 
of view and why you feel things are the way you see them. The examiners will expect 
you to argue your case, but not aggressively.
Cryer (2006: 251–252) presents some additional guidelines for conducting yourself 
during your viva.
● Take a note pad and pen to the viva if you feel this will help.
● Take your own copy of the report/dissertation with you to refer to during the exami-
nation. You might also wish to include some annotated notes to provide yourself with 
prompts – for example, why you did things in particular ways, why you chose this 
method, how you implemented an algorithm and so on. However, Ricketts (1998: 26) 
points out that you should try to avoid reading directly from your report during the 
viva.
● Remain composed. Be pleasant and polite and sit squarely on the chair.
● Listen attentively to the examiners and ask for clarification if you need it.
Cryer (2006: 251) also presents some suggestions on how you should dress for an 
oral examination. She suggests that you should ‘choose clothes that are smart and busi-
nesslike, to show that you appreciate the importance of the occasion’. However, you 

	 Chapter 9 ● Presentation skills 
268
shouldn’t try to upstage your examiners and in certain circumstances casual dress would 
be quite acceptable, but confirm this with your supervisor beforehand.
Overall, remember not to panic during your viva. The examiners are not trying to 
catch you out but merely trying to probe your understanding about your work and 
clarify some of the ideas and points that you have made. Bear this in mind and think of 
your viva as an opportunity to put forward your own views on the subject and support 
the work you have accomplished.
• 9.6 Summary
● Oral presentations are quite common within most computing degree courses. You 
must prepare for such presentations thoroughly. Begin by deciding on the objectives 
of your presentation and make sure you know who the audience will be and how much 
time you have available. Make sure that your presentation has a logical structure with 
a beginning, middle and an end. Make sure all your visual aids are clear and that you 
rehearse your presentation well. A number of tips were presented on preparing slides, 
delivering your presentation and fielding questions.
● When preparing posters you need to consider the audience, content, layout, font and 
colour scheme. Make sure that the poster is structured into columns, it has figures as 
well as text, and there is sufficient white space. Try to use light-coloured backgrounds 
and contrasting dark colours for text.
● Prepare software demonstrations in the same way that you would prepare an oral 
presentation. Decide on the demonstration’s purpose then plan, prepare and rehearse 
it thoroughly. Be aware of your audience, the time you have available, and what you 
want to focus on.
● It is not uncommon for computing students to sit viva voce examinations. Make sure 
that you are well prepared for such an examination – read through your report before-
hand, try to think of, and prepare for, any questions that may be asked. Know about 
the strengths and weaknesses of your report and understand how it fits into its wider 
context. During the examination you should avoid confrontation and be prepared to 
defend your work. You should also be able to discuss how you feel your work could 
be developed further in the future.
• 9.7 Further reading
Etherington, B. (2006) Presentation skills for quivering wrecks, Cyan Books, London.
Hall, R. (2011) Brilliant presentations: What the best presenters know, say and do (3rd 
Edition), Prentice Hall, Englewood Cliffs, USA.
Nicol, A.A.M. and Pexman, P.M. (2010) Displaying your findings: A practical guide to creat-
ing figures, posters and presentations (6th Edition), American Psychological Association,  
Washington, USA.
Reynolds, G. (2013) Presentation Zen: Simple ideas on presentation design and delivery 
(2nd Edition), New Riders, Indianapolis, USA.

	
9.8 Action points
269
9.8 Action points
● Prepare a presentation of around 20 minutes based on the lessons you have learnt 
within this chapter. Try to identify slides that could be skipped or added if you are 
over- or under-running.
● Prepare a poster based on your project and try to get some feedback on it from your 
colleagues.
● Prepare a software demonstration. Rehearse it thoroughly and try it out on some of 
your colleagues first.
● Prepare for a viva voce examination. Try to think of some questions that might be 
asked and prepare your response to those questions.


The future
SECTION
5


	
	
	
273
CHAPTER
10
• 10.1 Introduction
Now that your project is coming to an end, there are a number of things you will want 
to consider. How will your project be examined? What does the future hold for you? Are 
you going to stay on in academia or move on to pastures new and go into industry? Do 
you wish to forget all about your project or take it further? Will the successful completion 
Aims:
To discuss life after your project is completed.
Learning objectives:
When you have completed this chapter, you should be able to:
● Understand how examiners will be marking your project.
● Understand ways in which you can develop your project further in the future.
● Recognise the skills you have acquired from doing your project and understand 
how you can apply these skills in the future.
● This chapter is relevant for postgraduate and undergraduate 
projects.
Final considerations

	 Chapter 10 ● Final considerations 
274
of your project lead to further qualifications and professional recognition? What have you 
learnt from doing your project and how will these skills be useful in the future?
This chapter brings together answers to these questions and shows you how you have 
gained knowledge and benefited from the project you have undertaken. You should be 
proud of the work you have put into you project and view it as a stepping stone to the 
next stage of your career – be it in academia or industry. This chapter concludes with a 
list of top ten tips for completing your project successfully. This list draws together ideas 
that have been covered in earlier chapters.
• 10.2 Examiners and the marking of your project
10.2.1   Introduction
How your project will be assessed is dependent on the type of project you have under-
taken, its level (undergraduate or postgraduate) and the regulations within your 
institution. For example, at undergraduate level you may have undertaken a software 
development project so you will be assessed on the system you have developed, its sup-
porting documentation, your evaluation of the software and processes used, feedback 
you have received from the client/user(s) and comparisons you have made with other 
similar systems. At undergraduate level there may be explicit learning outcomes for 
projects that you will be assessed against. These might range from your ability to plan 
and manage a project to your ability to undertake research and complete a report. At 
Loughborough University the Intended Learning Outcomes (ILOs) for final year pro-
jects in Computer Science (taught bachelor’s degree) have been split into four areas.
● Knowledge and understanding. This covers all aspects of the project and includes 
taught and self-taught knowledge.
● Cognitive abilities. This covers the student’s abilities in planning the project, analys-
ing requirements, application and judgement.
● Practical abilities. This covers skills in the development of software systems using appro-
priate techniques, methods and tools. It can also include skills such as applying appro-
priate research methods for those projects that do not involve software development.
● Transferable skills. What has the student learnt that can be used in other work? For 
example, information retrieval skills, report writing, use of IT, communication and 
so on.
At research degree level, particularly PhD, you will be assessed on the contribution your 
project has made. Quite clearly, if you have published some journal and/or conference 
articles during the course of your studies, you will satisfy this particular requirement by 
the time the examiners come to read your dissertation. In some countries this is com-
pulsory; for example, you may be expected to have published at least five first-author 
journal papers by the time you submit your thesis.
The nature of regulations at your institution will also dictate how the examiner(s) will 
be involved in the assessment of your work. At taught degree level the examiner might 
simply be your supervisor or another academic member of staff in your department who 
will simply read your report. At research degree level the assessment will be more rigor-
ous and may involve external examiners from other universities or countries interviewing 

	
10.2  Examiners and the marking of your project
275
you (viva voce examinations – see Chapter 9) or an examining committee questioning 
you in a public defence.
It would take too long to cover all the assessment processes, methods and marking 
schemes individually, so this section provides a general overview of all the possible con-
siderations examiners might be looking for. You should look through the following points 
and decide which of these issues the examiners will be looking for in your own case.
10.2.2   Assessment criteria
As a starting point we will look at the assessment criteria Berndtsson et al. (2008: 7–8) 
identify for evaluating student projects. They split the assessment criteria into four areas 
for undergraduate projects.
	 1.	 General. Examiner(s) will look at the relevance and appropriateness of the topic 
you have studied, the significance of the findings and the amount of contribution 
that has been achieved by you (rather than the supervisor).
	 2.	 Report. Examiner(s) will be looking for clarity, consistency, an appropriate use of 
arguments, a clear differentiation between your own work and that of others in the 
literature, and appropriate referencing (in terms of style and references used).
	 3.	 Defence. Examiner(s) will assess the types of arguments you have made to support 
and defend your claims and conclusions. They are also looking for your own insight 
and understanding in the work you have presented.
	 4.	 Other. Examiner(s) will review the administrative issues with your project. For 
example, have you followed the regulations correctly? Have you provided the right 
documentation at the right time?
While some of these issues are relevant to postgraduate projects, it is worth looking at 
some specific criteria used to assess research degrees. In this case Chinneck (1999) iden-
tifies four things that examiners look for when examining postgraduate dissertations.
	 1.	 What was the research question?
	 2.	 Is it a ‘good’ question? This involves a comprehensive literature review to ensure 
that the question is ‘useful’ – i.e., worth answering. Through the literature review 
the student will show the context of the question, that the question has not been 
answered before, and the extent to which others may have partly answered the 
question in the past.
	 3.	 Has the student answered the question adequately?
	 4.	 ‘Has the student made an adequate contribution to knowledge?’
These two sets of criteria go some way to emphasise the diversity of elements that exam-
iners are looking for when assessing student projects. The lists are by no means exhaustive 
so a criterion is now presented that attempts to capture most of the issues. This criterion 
has been split into four areas.
	 1.	 General considerations (cf Berndtsson et al., 2008). These considerations occur in 
all types of projects at all degree levels.
	 2.	 Foundations of your project – is its existence justified within other literature in the 
field?

	 Chapter 10 ● Final considerations 
276
	 3.	 How the project was approached from a technical perspective (i.e., not a project 
management viewpoint). Were the correct methods used? Were appropriate data 
gathered, etc.?
	 4.	 Results and contribution of the project. This is particularly important at postgradu-
ate level where the ultimate contribution of the work is the quality measure used.
The four areas are presented below with a list of criteria that may be assessed within 
them. You will not be assessed on all of these criteria (and indeed, you may not be 
assessed in all four areas), but you should be aware of which points are relevant to your 
project. Those marked with the mortarboard and certificate symbol (
) are particularly 
important at postgraduate level.
1. General project considerations (subject independent)
● How well did you plan and control the project (including dealing with risks and man-
aging unexpected events or problems)?
● Did you manage your time effectively?
● How did you conduct yourself throughout the project? How motivated were you? 
How much effort did you put in?
● How clear is your report? Is it well written and well laid out?  
● How well did you defend your work orally?  
● Did you handle trade-offs effectively during the course of your project?
● To what degree is your project completed? For example, is some software you were 
developing only 80% complete?
● Have you fulfilled all the regulations required?  
● What evidence is there of learning and development?
● Is the subject matter of the project suitable for the qualification you are pursuing?
● Have you identified a clear aim and set appropriate objectives?
● Did you understand the problem you were trying to address?
In team projects there is sometimes an element of the assessment set aside for grading 
the performance of the team itself (irrespective of the project undertaken or the outcome 
of the project). Although some of these points were discussed in Chapter 7, it is worth 
including them here for completeness. Examples of criteria that examiners may be look-
ing for in these kinds of projects include:
● How well did the team work together?
● How well was the team managed and organised?
● Was everyone in the team utilised effectively (were team roles balanced)?
● How well did the team communicate (internally and externally)?
2. Literature review/project foundation
● How effectively have you managed the information you have acquired for the project?
● How effective have your information retrieval skills been?

	
10.2  Examiners and the marking of your project
277
● How well do you understand and comprehend the subject area of the project?  
● What is the extent and depth of the literature survey undertaken?  
● Does the literature survey provide a firm theoretical basis for the report/
dissertation?  
● What new knowledge has been acquired by you and the reader?  
● Does your literature survey set your project in context?
3. Project approach/methods
● For software development projects questions will include: Have you used appro-
priate development processes, methods and techniques? Have you used these 
processes/methods/techniques correctly? Have you justified your choice of these 
processes/ methods/techniques?
● Have you used appropriate research methods in your project? Have you justified your 
choice of particular research methods?  
● Have you undertaken appropriate data collection for your project? Are the data ade-
quate for your hypotheses? Have the data been processed in an appropriate way?  
● Have you selected, and used effectively, appropriate hardware and software during 
the course of your project (programming languages, software tools, statistical pack-
ages, multimedia, etc.)? Have you justified your choices?
4. Results and contribution(s)
● How well have you interpreted the results of your project? Have you used appropriate 
techniques for evaluating these results?  
● Have you clearly identified future work from you project? Have you made any recom-
mendations as to where the work should go next?  
● What is the overall contribution of your project? Who will benefit from your contribu-
tion?  
● What is the scope of your project? For example, has it applied existing techniques to 
new areas? Have you developed innovative solutions?  
● Can your work/results be applied in other areas? What are the limitations of this  
application?  
● How does it fit in/support/consolidate existing work?  
● Have you critically evaluated your own solution/approach/method/development?  
● Have you evaluated your work with respect to your original aims and objectives?  
While these are points that examiners will be looking for, it might also help you to know 
the reasons why some projects do not do so well (so that you can avoid these issues). 
Cornford and Smithson (2006: 190) identify a number of reasons why projects might be 
awarded poor marks. The reasons they cite include:
● There is no link between the work performed and other literature in the field.
● The report is long-winded, ill-structured and poorly presented.

	 Chapter 10 ● Final considerations 
278
● The report includes a number of generalisations that do not have appropriate sup-
porting evidence.
● There is a lack of meaningful conclusions.
Other reasons for poor marks (things you should avoid) include the following.
● Misplaced focus within the report. The student has focused on the minutiae when 
the overall contribution of the project has been weak or misplaced. Try to take a step 
back from your project and consider it within its wider context. The fact that some 
small part of your project has been done really well may be immaterial if the project 
achieves little overall.
● Poor software evaluation. This usually stems from the lack of any real client or user. 
In software development projects those that are done well usually have a real client. 
Those students who undertake projects without a real client, or without considering 
who might benefit from their software, generally perform badly.
● Not taking the work far enough. Although some reports go some way to address-
ing a particular problem, they sometimes do not go far enough – usually due to lack 
of time. It can be annoying for examiners to see that you have only really gone so far 
with your project; there may have been a straightforward ‘next step’ that you could 
have taken that would have rounded off your project nicely.
● Poor evaluation. Although the student may have undertaken a sound piece of 
work, the final conclusions to the report are weak. There is little evaluation of all 
aspects of their work and little indication that the student has thought about any 
wider issues.
● Lack of justification. The student has failed to include any justification for anything 
they have chosen to do. For example, there is no justification of the research methods 
chosen, the hardware platform used, the development process followed, the pro-
gramming language used and so on.
● Poor report presentation. The report is badly presented and is also aimed at the 
wrong level of reader (novice readers, for example). Sometimes students spend a long 
time explaining something trivial for novice readers when they should be focusing on 
more academic matters that the examiner will be interested in. Make sure you write 
your project report at the right level.
● Lack of evidence that the student has applied skills from their course during the project. 
For example, if the student has been taught database design techniques, there should be 
evidence that the student has used these skills appropriately in their project if they have 
to design a database.
● The conclusions are no more than a summary of the rest of the report. The con-
clusion does little more that say what has already been reported. There is no critical 
evaluation, justification or identification of further work.
Overall, it is impossible to say precisely what examiners will be happy with and unhappy 
with in projects they are assessing. Examiners are individuals and they all have their own 
opinions, preferences and ideas on what is right and appropriate within projects at differ-
ent levels. Even within departments, academic staff will disagree on what is a good project 
and what constitutes a poor project. For example, using some of the elements listed above, 

	
10.3  Taking your project further
279
a project may look good; against another subset of these criteria, that project may appear 
poor. What you can do is try and find out a little bit more about your examiner(s) before-
hand. You may find they have particular interests or preferences that you can work towards. 
Speak with your supervisor as well; they should advise you on which aspects of the report to 
focus and they may also have some ideas on the preferences of the examiners.
• 10.3 Taking your project further
10.3.1   Introduction
When you complete your project, hand it in and crack open the champagne, you will 
probably have one of two feelings about it. You will either be so fed up with the sight 
of it that you never want to see it again and you want to burn all your books and notes. 
This, however, is not advisable as you may need to attend a viva or rework some of your 
project if things didn’t go quite according to plan and you have to resubmit your report. 
Alternatively, you might be so enthusiastic about what you have achieved that you can’t 
wait for your ‘A’ grade and you can’t wait to get back to your work and develop your 
great ideas further.
Developing your project further can result in a number of things. You may wish to 
develop a commercial software package from a program that you wrote as part of your 
project. If you have completed an undergraduate project, you might want to develop your 
ideas further into an MPhil or PhD. You might want to write a paper on your work to share 
your ideas with the academic community (see Section 8.7). You might want to patent your 
work or you might want to seek some kind of funding so that you can develop your work 
further. Some of these issues will be discussed in the following few sections.
10.3.2   Seeking funding
Obtaining funding for projects is not an easy task, even for experienced academics and 
managers. As a newly qualified graduate with little track record and probably few, if any, 
publications, you stand little chance of obtaining funding on your own. You also have 
the problem of not knowing who to turn to for funds and how to apply and complete 
any forms and paperwork that are required in an appropriate way. In short, you will 
probably not obtain funding on your own. One way around this is to try to forge links 
with research groups and industry. Your own department might have a research group 
with internationally recognised researchers who might be interested in your work and 
wish to involve you with theirs. Your supervisor may wish to keep you on as a research 
student or a research assistant. You may be lucky and have developed some software 
for a local company as part of your project so it might be worth liaising with them for 
further funds. Whatever the case, you will need to work with somebody else and learn 
from experience.
Applying for research funding and obtaining grants is not discussed widely and there 
are few texts devoted to this topic. However, two books that you may find useful to 
help you are Browning (2014) and Peters (2003), which provide a useful overview of 
this topic.

	 Chapter 10 ● Final considerations 
280
10.3.3   Developing commercial software packages
Because of the nature of your course, it is possible that you might have developed a 
software system as part of your project. You might feel that this software has some 
commercial value and you might wish to market it as such. This may require a lot more 
development work or it may simply mean packaging the software in an appropriate way 
for delivery. Once again, this kind of project advancement is not easy to do on your own.
You may have to establish some commercial links to market your product. You might 
have to obtain some kind of funding or financial backing to get your ideas off the ground. 
You might also find there are difficulties with patents and intellectual property rights 
over work you have done for your project. These problems might be even more pro-
nounced if your project involved working with an organisation or company and they 
wish to stake some claim over your work.
Whatever the case, perhaps the best place to start to resolve these issues is with your 
project supervisor. S/he should be able to help you or know whom you should contact 
to address these issues. Having been closely involved with your project thus far, your 
supervisor might also be keen to be involved with any future developments that you 
make. Your supervisor should also be able to advise you on another important, related 
issue – copyright and patents – discussed next.
10.3.4   Copyright and patents
Who owns the rights to your project when you have finally submitted it for assessment 
is a ‘grey area’ within universities. Some institutions openly recognise your intellectual 
property rights (IPR) over any work that you produce as part of your course. The copyright 
for everything you produce thus belongs to you. This means that, while your institution 
would require copies of your work to retain for assessment purposes, you would be able 
to sell patent and copyrights for your work as you wished. You would also be entitled, for 
example, to develop and sell any software that you had produced as part of your course.
While this level of recognition of student ownership represents one extreme, other 
institutions will claim to own all rights to any work that is produced by students pro-
duced during, and as part of, an academic course. In certain instances, where collabo-
rative projects have been undertaken with industry, you might find that the company 
involved with the project will wish to retain some ownership of anything that you pro-
duce as well. It can also be argued that your supervisor has some (perhaps a lot of) invest-
ment in your project. They may have suggested the project in the first place, provided a 
lot of invaluable advice and guidance during the course of the project and so on. In these 
cases your supervisor is entitled to some of the ownership of your project too.
If you feel that you wish to take your work further or develop something commercial 
from it, it is worth checking to see what rights you have over what you have produced. 
Check your own institution’s guidelines and rules on matters of this nature – there is usu-
ally a department that will deal with these issues. Patent and copyright laws are extremely 
complex and you may well find that you end up going round in circles and generate 
more questions than answers. For more information on IPR you can refer to Bainbridge 
(2012), which is an entire book devoted to the subject of intellectual property. The fol-
lowing websites also provide some useful information on copyright and patent issues:
● The United States Patent and Trademarks Office: http://www.uspto.gov/

	
10.5  The future
281
● The UK Patent Office/Intellectual Property site: http://www.patent.gov.uk/
● The European IPR helpdesk: http://www.ipr-helpdesk.org/
• 10.4 Additional topics
While this book has covered probably all the topics you will require to complete both 
undergraduate and postgraduate computing projects successfully, there are a number 
of subjects that have only been mentioned in passing and may be relevant to your pro-
ject. This section briefly summarises these topics and provides you with some pointers 
towards further reading that you may find useful.
● Statistics. Part of your project may require some form of statistical analyses. For 
example, from running some software speed trials, is an algorithm you have devel-
oped significantly better than an existing algorithm? Are any of the responses from a 
survey you have used ‘significant’?
The number of statistical tests available is enormous and beyond the scope of this 
book. There are also many books available that cover statistics to which you can refer. 
Some books that you may find useful are Kanji (2006), which summarises a number of 
statistical tests and defines their application, and Gibson (2007) and Larsen and Marx 
(2013), which provide a reasonable introduction to elementary statistics.
● Qualitative analysis. Qualitative data are those data you gather that are not expressed 
in absolute arithmetical terms. They represent opinions, observations and ideas and 
are generally gathered from questionnaires, surveys and interviews. Reviewing, ana-
lysing, evaluating and summarising these data often occurs in sociological studies. 
This may, for example, form part of an information systems project that aims to obtain 
user feedback on human interface issues. Two texts that cover this subject in detail 
are Mason (2002) and Silverman (2013).
• 10.5 The future
10.5.1   Your new skills
This section discusses briefly how you will be able to apply the skills you 
have learnt from your project in the future. As an undergraduate, you 
might find yourself moving on into industry or staying on within the 
academic community to pursue your studies further; for example, for an 
MPhil or PhD. As a postgraduate you may wish to remain in academia as a lecturer, a 
research assistant or fellow, or, you too might decide to move into industry. The follow-
ing points relate to a number of skills you should have developed during the course of 
your project – be it at undergraduate or postgraduate level.
● Continuing Professional Development (CPD). CPD represents your continued 
learning (lifelong learning) following the completion of your degree. It is recognised 
across many industries and sectors in the UK and includes training, self-develop-
ment, ideas sharing and is a commitment by you to continue to develop yourself in 

	 Chapter 10 ● Final considerations 
282
a professional way. It is up to you to record your CPD and there are self-assessment 
forms and record cards that can be used. For more information refer to The CPD 
Certification Service at www.cpduk.co.uk.
● Independence. One of the objectives of your project was to develop your skills as an 
independent worker. Quite often institutions refer to student projects as Independ-
ent Studies which emphasises this point. Being able to work on your own without 
detailed supervision is certainly a skill worth cultivating and it should be one of the 
skills you developed during the course of your project. Industry expects independ-
ence from graduates, and postgraduate research degrees will require this skill as a 
matter of course. Be prepared to show initiative and independent thinking in your 
chosen career and be able to take charge of situations rather than having to be told 
what to do and be directed all the time.
● Thinking. Your project should have taught you how to think about things more criti-
cally and in a deeper way. Independent thought and ideas represent a maturity of 
understanding that does not develop from merely attending lectures and tutorials. Your 
project should have furnished you with these kinds of skills. Once again, being able to 
look at things in new ways, showing deeper understanding and imagination, are skills 
that postgraduates are expected to have.
● Learning. Your project should also have taught you how to learn. As part of your 
project you should have had to learn new skills, new ways of looking at things and 
new ways of thinking. This ‘learning’ would not come from lectures and tutorials but 
from your own independent research and study. You have, therefore, understood and 
developed the skill of independent learning – a skill that will be useful both in industry 
and postgraduate work.
In addition, your project may also have provided you with an underpinning theo-
retical grounding in a number of areas rather than a specific technical skill. This is 
important as it means you can often develop and learn new skills more quickly from 
this firm base than you could otherwise have done by merely learning a particular 
tool, language or technique. For example, although you might not be able to program 
in a particular programming language, your underpinning theory of languages will 
mean that you can learn a new language very quickly. You are thus more flexible and 
adaptable to change than you would otherwise be with a purely technical background.
● Technical skills. You might also have picked up some technical skills during the 
course of your project. You may have learnt how to use a particular software pack-
age or apply particular analysis and design methods. While you may never use these 
particular technical skills again, they can provide you with a basis on which to learn 
similar techniques and tools in the future and they also help to bolster your CV!
● Communication skills. Both written and verbal communication skills are a vital part 
of any degree project. Improving your skills in these areas will certainly be useful, 
whether you go into industry or continue with postgraduate work. Verbal communi-
cation skills will be useful in industry as you will have to liaise with all kinds of people; 
mana­gers, customers and clients, your own staff, consultants and so on. You might also 
be expected to give presentations and demonstrations and will certainly be expected to 
produce reports that must be clear and concise.
At postgraduate level you will encounter many new people and situations that 
require both your written and verbal communication skills. You might have to attend 
conferences or give seminars. You may be required to do some teaching or support 

	
10.5  The future
283
tutorials and laboratory sessions. You will certainly have to produce written reports, 
transfer documents, articles and, ultimately, a thesis.
● Time management. During the course of your project you will have needed to make 
a number of trade-offs, you will have had to meet a number of deadlines and you will 
have needed to balance your project against other commitments. Undertaking your 
project will have helped you to develop your time management skills (discussed in 
Chapter 7). These skills will be invaluable to you in the future as you try to juggle 
work, family and social commitments.
10.5.2   Your new job
While the above issues represent developments to your own portfolio of skills, this sec-
tion will look briefly at how things might be done differently in your new career.
● Industry. If you go to work in industry for the first time it can be quite a culture 
shock. Where in the past you might have looked at things from a purely academic 
viewpoint because they interested you, within industry your primary concern will 
be cost. Work you do and projects you undertake will only be performed if they are 
financially viable. The software you produce must do what it is supposed to do and 
what was asked for – there will be little need to justify it or place it within a wider 
context. You will also feel more pressure to complete work on time. While your pro-
ject was your own responsibility and you were the only one who would suffer if it was 
handed in late, in industry many people will be relying on you to get the job done.
Another area that may appear alien to you within industry is the politics that are 
in place. In an academic environment there is usually an ‘open door’ policy whereby 
you can go and speak to people (administrators, professors, technicians, etc.) as and 
when you require. In industry there tends to be a more structured hierarchy that 
sometimes means you cannot talk directly to the person you need to communicate 
with. This might mean, for example, that you have to go through your own manager 
to approach their manager to get permission to speak to them. This can seem quite 
frustrating when, in an academic environment, everyone has been approachable and 
easy to contact.
● Higher degrees. If you are moving from an undergraduate bachelor’s degree to a 
higher level course – an MSc, MPhil or PhD – you will have to adapt your way of think-
ing to some extent. MScs usually contain a project as a significant part of their assess-
ment. MPhils, on the other hand, are represented almost entirely by a research 
project. In both of these cases your depth of understanding and critical evaluation 
will have to be far more mature than at bachelor’s level.
The nature of the PhD is also very much different to a taught degree 
project. It will need justification, contextualisation and it will certainly 
have to make a contribution to knowledge. These days, timing is also 
more critical. Departments are sometimes penalised by funding bodies 
if you take longer than you should to complete your PhD so pressure will be on you 
from other sources, not just yourself, to complete your thesis on time. You might also 
need to develop your work into articles and papers for publication. As mentioned ear-
lier, you might also have to do some teaching or help out with tutorials. An excellent 
book that can help you with the transition from a first degree to a PhD is Phillips and 
Pugh (2010), which provides some interesting information on doing a PhD.

	 Chapter 10 ● Final considerations 
284
10.5.3   Professional accreditation
Completing your degree may open up professional doors to you. For example, when you 
start work you might wish to join a professional body that supports your particular field. 
Examples are the British Computer Society (BCS) in the UK, the Institute of Electrical 
and Electronic Engineers (IEEE) and the Association for Computing Machinery (ACM) 
in the United States. To become a member of the IEEE and ACM you will be required 
to hold some formal qualifications. To become a full member of the BCS you will either 
have to complete some Society examinations or show that you have completed an aca-
demic course approved by the BCS.
You will need to check with your own institution to see what level (if any) of exemp-
tions or accreditations apply to your own particular course and which professional bodies 
are involved. You may find, for example, that while one course within your department 
is fully exempt or recognised, another is not.
Some useful Internet links that will provide you with more information on appropri-
ate professional bodies are:
● The British Computer Society: http://www.bcs.org/
● The IEEE: http://www.ieee.org/
● The Association for Computing Machinery: http://www.acm.org/
● The Engineering Council UK: http://www.engc.org.uk/
● European Federation of National Engineering Associations: http://www.feani.org/
● Institute of Mathematics and its Applications (http://www.ima.org.uk/) – particu-
larly relevant for courses that are taught jointly with mathematics.
• 10.6 Top ten tips for successful projects
As a summary of the main points of this book, this section presents my top ten tips for 
completing student projects successfully. Although these tips will not guarantee that you 
achieve top marks for your project, they should ensure that your project is completed 
well. The tips are not presented in any particular order as no tip is better than any other 
and the extent to which you follow their guidance is up to you, your project and your 
circumstances.
● Choose a project that interests you (Section 3.2). It is difficult to motivate yourself 
and produce a good project if you have little interest in the topic area. If you choose a 
project that interests you, you will be far more committed to it and keen to undertake 
the work than you would otherwise be.
● Have a clear goal and objectives (Section 4.2). If you understand clearly in your own 
mind the ultimate goal of your project (and can define some intermediate milestones, 
objectives or subgoals to achieve this aim) you will know where you are going with 
your project and what you should be doing.
● Try to get a client for your project. At undergraduate level projects that have real 
clients (for example, for a software system you are developing or a case study you are 

	
10.6  Top ten tips for successful projects
285
undertaking) generally turn out better than those which do not (for example, devel-
oping a website for an imaginary company, etc.). A real client will provide you with 
more motivation and perhaps clearer requirements than you could obtain from your 
supervisor alone. In addition, a real client (and users) will provide valuable feedback 
when your project nears completion. Although your project may have been suggested 
as an academic exercise by your supervisor you could still make the effort to find a 
client for the project yourself. You could use friends, relatives, industrial placement 
contacts, etc. to help identify a suitable client.
● Put together a project plan and follow it (Chapter 4). There is an old saying – ‘fail to 
plan, plan to fail’. With a project plan in place you will have some idea on what you 
should be doing on your project and some means of tracking and controlling your 
progress. However, do not spend so long planning your project at intricate levels of 
detail that you fail to get on with any real work. You should spend no longer than 
around 10% of your effort on project management activities.
● Identify risks to your project and put contingency plans in place (Section 4.4). 
You should have some idea of the key risks to your project (and risk triggers) and 
their impact on your project. Make sure that you are aware of these risks and have 
some ideas on how you will deal with them, should they occur. Don’t assume that 
­everything will go well – consider problems that might occur and be prepared to deal 
with them.
● Be well organised. Put together a project folder, establish a working area and good 
working practices, keep your references up-to-date and organised, arrange data and 
files on your computer logically, and make regular back-ups. Failure to follow these 
guidelines will lead to sloppy work and inefficiency as information is lost and you are 
unable to keep track of everything you are doing.
● Start to write early. Get into the habit of writing up notes and work you have com-
pleted as you go along. This will prevent you having to write your report/thesis from 
scratch towards the end of your project when time is limited. It will also get you into 
the habit of writing and will improve your writing skills.
● Undertake a literature survey (Chapter 5). Make sure you have ‘read around’ your 
subject area thus ensuring you do not complete your project in a vacuum and you are 
aware of the subject areas that it draws from and are aware of the context in which it 
resides. At postgraduate level this is essential, but it can also be important for under-
graduate projects too (although many undergraduates ignore this point). This will 
enable you to show what contribution your project is making, show that it is not 
repeating the work of others, assist you with different aspects of your project, and 
provide justification for any decisions that you make.
● Have regular meetings with your supervisor. Your supervisor is there to help you 
and they are experienced – so make sure you use this resource as much as possible – 
and follow any advice they give you. Students who rarely see their supervisor often 
fail.
● Aim to finish your project early. It is always a good idea to aim to complete your 
project one or two weeks before the actual hand-in date (for a six-month project this 
should be achievable). This will provide you with some contingency time that may be 
needed if things don’t go quite according to plan.

	 Chapter 10 ● Final considerations 
286
• 10.7 Summary
● There are a number of ways that examiners will assess your project and they will look 
for different things at different levels. You should familiarise yourself with the assess-
ment criteria for your own project early on.
● Although you have finished your project, there are still ways in which you can continue 
your work further in the future: seeking funding for further research; developing com-
mercial software from your project; and seeking patents and copyright on the material 
you have produced.
● You should have learnt a number of skills from your project that will come in useful 
in the future – for either a job in industry or further academic work; independence, 
the ability to ‘think’, learning skills, technical skills and communication skills.
● Your degree course and project may provide you with exemption from and accredi-
tation for membership of a professional body. For example, the IEEE or the British 
Computer Society and Engineering Council. Your own department will be able to 
advise you on this.
• 10.8 Further reading
Browning, B.A. (2014) Grant writing for dummies (5th Edition), John Wiley, New York.
Peters, A.D. (2003) Winning research funding, Gower, Aldershot, UK.
Phillips, E.M. and Pugh, D.S. (2010) How to get a PhD: a handbook for students and their 
supervisors (5th Edition), Open University Press, Buckingham, UK.
10.9 Action points
● Think about how you could develop your project further in the future.
● Write down what you have learnt by doing your project. How have you changed and 
developed as a result?

	
	
	
287
Bainbridge, D. (2012) Intellectual property (9th Edition), Pearson, Harlow, UK.
Barker, S. and Cole, R. (2012) Brilliant project management: What the best project managers 
know, say, do (3rd Edition), Pearson, Harlow, UK.
Barnes, M. (1989) Have project, will manage, BBC2.
Belbin, M. (2010) Team roles at work (2nd Edition), Butterworth-Heinemann, Oxford, UK.
Bell, J. (2010) Doing your research project: a guide for first time researchers in education, 
health, and social science (5th Edition), Open University Press, Maidenhead, UK.
Benington, H.D. (1956) ‘Production of large computer programmes’, Proceedings ONR, 
Symposium on Advanced Programming Methods, pp 15–27.
Bennett, S. Farmer, R. and Mcrobb, S. (2010) Object oriented design, analysis and program-
ming using UML (4th Edition), McGraw Hill, Maidenhead, UK.
Berndtsson, M. Hansson, J. Olsson, B. and Lundell, B. (2008) Thesis projects A guide for 
students in Computer Science and Information Systems (2nd Edition), Springer-Verlag, 
London.
Blaxter, L. Hughes, C. and Tight, M. (2010) How to research (4th Edition), Open University 
Press, Maidenhead, UK.
Boehm, B.W. (1979) ‘Software Engineering: R& D trends and defense needs’, Research direc-
tions in software technology (Wagner, P. ed.), Cambridge, MA, USA, MIT Press.
Boehm, B.W. (1981) Software engineering economics, Prentice Hall, Englewood Cliffs, USA.
Bohm, C. and Giuseppe J. (1966) ‘Flow diagrams, turing machines and languages with only 
two formation rules’, Communications of the ACM, Vol 9(5), pp 366–371.
Brace, I. (2013) Questionnaire design: how to plan, structure and write survey material for 
effective market research (3rd Edition), Kogan Page, London.
Bradburn, N.M. Sudman, S. and Wansink, B. (2004) Asking questions: The definitive guide to 
questionnaire design, Jossey Bass, John Wiley, New York.
Browning, B.A. (2014) Grant writing for dummies (5th Edition), John Wiley, New York.
Carroll, J. (2012) Agile project management in easy steps, Easy Steps, Leamington Spa, UK.
Checkland, P. and Poulter, J. (2006) Learning for action: A short definitive account of soft sys-
tems methodology, and its use practitioners, teachers and students, John Wiley, New York.
Chinneck, J.W. (1999) How to organize your thesis, http://www.sce.carleton.ca/faculty/
chinneck/thesis.html (3 June 2014).
Choudhary, H. (2014) Object oriented design, analysis and programming, Kindle Edition, 
Amazon, UK.
Connolly, T.M. and Begg, C.E. (2005) Database systems (4th Edition), Pearson, Harlow, UK.
References

	 References
288
Cornford, T. and Smithson, S. (2006) Project research in information systems: a student’s 
guide (2nd Edition), Palgrave Macmillan, Basingstoke, UK.
Cryer, P. (2006) The research student’s guide to success (3rd Edition), Open University 
Press, Maidenhead, UK.
Czaja, R. and Blair, J. (2005) Designing surveys: a guide to decisions and procedures (2nd Edi-
tion), SAGE Publications, London.
Dawson, C.W. and Dawson, R.J. (2014) ‘Software development process models: A tech-
nique for evaluation and decision making’, Journal of Knowledge and Process Manage-
ment, Vol 21(1), pp 42–53.
Dawson, C.W. and Wilby, R. (1998) ‘An artificial neural network approach to rainfall-runoff 
modelling’, Hydrological Sciences Journal, Vol 43(1), pp 47–66.
Dawson, R.J. (2004) Personal communication, 5 July.
Day, A. (2008) How to get research published in journals (2nd Edition), Gower, Aldershot, 
UK.
Day, R.A. (2011) How to write and publish a scientific paper (7th Edition), Greenwood Press, 
Santa Barbara, USA.
Dochartaigh, N.O. (2012) Internet research skills: How to do your literature search and find 
research information online (3rd Edition), SAGE Publications, London.
Dodd, P. (2008) The 25 best time management tools and techniques: how to get more done 
without driving yourself crazy, Capstone, Oxford, UK.
Etherington, B. (2006) Presentation skills for quivering wrecks, Cyan Books, London.
Evans, C. (2008) Time management for dummies, John Wiley, New York.
Ferner, J.D. (1995) Successful time management (2nd Edition), John Wiley, New York.
Flay, B. Bull, P. and Tamahori, J. (1983) ‘Designing a questionnaire for Polynesian and Pa-
keha car assembly workers’, in Bulmer, M. and Warwick, D. (eds), Social research in de-
veloping countries: surveys and censuses in the Third World, John Wiley, Chichester, UK, 
pp 167–172.
Forster, M. (2006) Do it tomorrow and other secrets of time management, Hodder & 
Stoughton, London.
Gall, M.D. Gall, J.P. and Borg, W.R. (2006) Educational research: an introduction (8th Edition), 
Longman, New York.
Gerring, J. (2007) Case study research principles and practices, Cambridge University 
Press, Cambridge, UK.
Gibson, H.R. (2007) Elementary statistics (2nd Edition), Kendall Hunt, Dubuque, USA.
Gill, J. and Johnson, P. (2010) Research methods for managers (4th Edition), SAGE, London.
Gleeson, K. (2009) The personal efficiency program: How to get organized to do more work in 
less time (4th Edition), John Wiley, New York.
Greenfield, T. (ed) (2002) Research methods guidance for postgraduates (2nd Edition), Arnold,  
London.
Groves, R.M. Fowler, F.J. Couper, M.P. Lepkowski, J.M. Singer, E. and Tourangeau, R. 
(2009) Survey methodology (2nd Edition), Wiley Blackwell, Oxford, UK.
Gustavii, B. (2008) How to write and illustrate a scientific paper (2nd Edition), Cambridge 
University Press, Cambridge, UK.
Hall, R. (2011) Brilliant presentations: What the best presenters know, say and do (3rd Edi-
tion), Prentice Hall, Englewood Cliffs, USA.
Haywood, P. and Wragg, E.C. (1982) Evaluating the literature, Rediguide 2, University of 
Nottingham School of Education, Nottingham, UK.
Helmer-Heidelberg, O. (1966) Social technology, Basic Books, New York.

	
References
289
Herbert, M. (1990) Planning a research project, Cassell Educational, London.
Hernandez, M.J. (2013) Database design for mere mortals: A hands-on guide to relational 
database design (3rd Edition), Addison-Wesley, New Jersey, USA.
Higher Education Academy (2014) ‘Personal development planning’, <http://www.heacademy 
.ac.uk/ourwork/learning/pdp> (3 June 2014).
Hirji, P. (2004) ‘Cultural aspects of plagiarism’, Teaching and learning innovation, 
­Professional Development publication, Vol 2(2), Loughborough University, UK.
Hughes, R. and Cotterell, M. (2009) Software project management (5th Edition), McGraw-Hill, 
Maidenhead, UK.
Jones, K. (1998) Time management: the essential guide to thinking and working smarter, 
Marshall Publishing, London.
Kane, E. (1985) Doing your own research, Marion Boyars, London.
Kanji, G.K. (2006) 100 Statistical tests (3rd Edition), SAGE Publications, London.
Knott, R.P. and Dawson, R.J. (1999) Software project management, Group D Publications, 
Loughborough, UK.
Larsen, R.J. and Marx, M.L. (2013) An introduction to mathematical statistics and its ap-
plication (5th Edition), Pearson Education, Harlow, UK.
Ledington, P. (2014) Soft Systems methodology – Core concepts, Kindle Edition, Amazon, UK.
Lester, J.D. and Lester, J.D. (2011) Writing research papers: a complete guide (14th Edition), 
Pearson Education, Harlow, UK.
LevelA Software (2005) ‘Software life cycle models’, <http://www.levela.com/software_life_ 
cycles_swdoc.htm> (3 June 2014).
Levin, P. (2011) Excellent dissertations! (2nd Edition), Open University Press, Buckingham, 
UK.
Levine, H.A. (2002) Practical project management: tips, tactics and tools, John Wiley, New 
York.
Lock, D. (2013) Project management (10th Edition), Gower, Aldershot, UK.
Loughborough University (2014) Questionnaire design, University Library study advice 
publication.
Maciaszek, L. (2007) Requirements analysis and systems design (3rd) Edition, Addison-­
Wesley, Wokingham, UK.
Malmfors, B. Garnsworthy, P. and Grossman, M. (2003) Writing and presenting scientific 
papers (2nd Edition), Nottingham University Press, Nottingham, UK.
Mason, J. (2002) Qualitative researching (2nd Edition), SAGE Publications, London.
Mayo, E. (1933) The human problems of an industrial civilization, MacMillan, New York.
Montgomery, S.L. (2002) The Chicago guide to communicating science, University of 
Chicago Press, Chicago, USA.
Munger, D. and Campbell, S. (2012) What every student should know about researching on-
line (2nd Edition), Longman, Harlow, UK.
Nicol, A.A.M. and Pexman, P.M. (2010) Displaying your findings A practical guide to creat-
ing figures, posters and presentations (6th Edition), American Psychological Association, 
Washington, USA.
Oetiker, T. Partl, H. Hyna, I. and Schlegl, E. (2008) The not so short introduction to LaTeX 
2, <http://www.ctan.org/tex-archive/info/lshort/english/lshort.pdf> (3 June 2014).
OGC (2009) ‘Managing Successful Projects with PRINCE2’ (2009 Edition), Office of 
Government Commerce, The Stationary Office, Norwich, UK.
Ohio State University Library (2008) Evaluating web sites> overview – key ideas,<http://
liblearn.osu.edu/tutor/les1/> (3 June 2014).

	 References
290
Orna, E. and Stevens, G. (1995) Managing information for research, Open University 
Press, Buckingham, UK.
Orna, E. and Stevens, G. (2009) Managing information for research (2nd Edition), Open 
University Press, Buckingham, UK.
O’Sullivan, T. Rice, J. Rogerson, S. and Saunders, C. (1996) Successful group work, Kogan 
Page, London.
Ould, M. (1999) Managing software quality and business risk, John Wiley, Chichester, UK.
Peters, A.D. (2003) Winning research funding, Gower, Aldershot, UK.
Phillips, E.M. and Pugh, D.S. (2010) How to get a PhD a handbook for students and their 
supervisors (5th Edition), Open University Press, Buckingham, UK.
Phillips, S. (2002) Time management 24/7: How to double your effectiveness, McGraw-Hill, 
London.
Post, G.V. and Anderson, D.L. (2006) Management information systems solving business 
problems with information technology (4th Edition), McGraw-Hill, New York.
Pym, D.V. and Wideman, R.M. (1987) ‘Risk management’, in The revised project manage-
ment body of knowledge, Project Management Institute.
RAE (2008) Research assessment exercise, <http://www.rae.ac.uk/> (3 June 2014).
Reynolds, G. (2013) Presentation Zen: Simple ideas on presentation design and delivery (2nd 
Edition), New Riders, Indianapolis, USA.
Ricketts, I.W. (1998) Managing your software project a student’s guide, Springer-Verlag, 
London.
Robertson, S. and Robertson, J. (2012) Mastering the requirements process (3rd Edition), 
Addison-Wesley, Wokingham, UK.
Robson, C. (2002) Real world research (2nd Edition), Blackwell, Oxford, UK.
Roethlisberger, F.J. and Dickson, W.J. (1939) Management and the worker, Harvard University 
Press, Cambridge, USA.
Rogerson, S. (1989) Project skills handbook, Chartwell-Bratt, Sweden.
Rooney, K. (ed) (2010) Steps to success manage your time: How to work more effectively, Kindle 
Edition, Amazon, UK.
Rudestam, K.E. and Newton, R.R. (2007) Surviving your dissertation (3rd Edition), SAGE 
Publications, London.
Saunders, M. Lewis, P. and Thornhill, A. (2012) Research methods for business students (6th 
Edition), Pearson Education, Harlow, UK.
Sharp, J.A. Peters, J. and Howard, K. (2002) The management of a student research project (3rd 
Edition), Gower, Aldershot, UK.
Shaw, M. (2003) ‘Writing good software engineering research papers’, Position paper for 
Proceeding of International Conference on Software Engineering, Portland, Oregon, 
USA.
Silverman, D. (2013) Doing qualitative research: A practical handbook (4th Edition), SAGE, 
London.
Sims, C. and Johnson, H.J. (2012) Scrum: A breathtakingly brief and agile introduction, 
Dymaxicon, San Mateo, USA.
Tracy, B. (2008) Eat that frog! 21 great ways to stop procrastinating and get more done in less 
time (2nd Edition), Berrett-Koehler, San Francisco, USA.
Tuckman, B.W. (1965) ‘Developmental sequence in small groups’, Psychological Bulletin, 
Vol 63, pp 384–399.
Turla, P. and Hawkins, K.L. (1994) Time management made easy, Penguin Books, New York.
Turner, J.R. (1993) The handbook of project-based management, McGraw-Hill, London.

	
References
291
University of Derby (1995) Literature searching for computing, University of Derby, internal 
library publication.
University of Derby (1999) Independent studies guidance: notes for postgraduate students, 
internal publication.
University of Warwick (1994) Graduate student handbook 1994/95, University of Warwick, 
Department of Continuing Education, UK.
Verma, G.K. and Beard, R.M. (1981) What is educational research?, Gower, Aldershot, UK.
Wells, D. (2006) Extreme programming, <http://www.extremeprogramming.org/>  
(3 June 2014).
Weiss, J.W. and Wysocki, R.K. (1992) 5-Phase project management, a practical planning 
and implementation guide, Addison-Wesley, Reading, USA.
Yin, R.K. (2014) Case study research: design and methods (5th Edition), SAGE Publications, 
London.

	
	
292	
80/10 rule, 86
abstracts, writing, 201, 202, 209–11
academic papers, writing, 169, 200,  
234–7, 236
academic versus industry projects, 3–4, 5, 
7–8, 7
acceptance testing, 149
accreditation, professional, 284
acknowledgements, in project reports, 202
ACM (Association of Computing 
Machinery), 102, 284
action research, 28
activity networks, 71–5, 72, 73, 187
activity-on-the-node diagrams, 72–5, 72, 73
activity sequencing, 71–5, 72, 73
Adobe® InDesign®, 260
affinity diagrams see research territory maps 
(RTMs)
agendas, 187
agile development methods, 138–40
AI see artificial intelligence (AI) projects
aims of project, 54–5, 65–6
see also objectives
algorithms, 8, 170
flowcharts, 123–4, 125
pseudo-code, 124, 125
alpha testing, 150
analogy, 25
ANN see artificial neural network (ANN) 
example project
anonymity, 31, 36
anti-positivism, 24
appendices, in project reports, 201, 202
applied computer science projects, 8
applied research, 26
artificial intelligence (AI) projects, 9, 49
artificial neural network (ANN) example 
project
abstracts, 210
activity sequencing, 72–5, 73
aims and objectives, 66–8
literature review, 111–12
re-planning, 78
scheduling, 75–8, 77, 79, 80
time estimates, 70, 70
visual aids, 244, 245
work breakdown structures, 68–9, 69
assessment, 274–9
detecting plagiarism, 224
group work, 188–9
oral presentations, 241
poster presentations, 253
reasons for poor marks, 277–8
viva voce examinations, 265–8
Association for Computing Machinery 
(ACM), 102, 284
audiences
oral presentations, 242–3, 249–50, 250, 
251–2
poster presentations, 253–4
project reports, 196
software demonstrations, 263, 264
audits, configuration, 140
avoidance, risk, 86, 87
backups, computer, 167, 179
bar charts, 212, 212, 213
combined, 214–16, 215, 216
three-dimensional, 219, 220
Index
Page numbers in bold indicate tables and in italic indicate figures.

	
Index
293
closure, project, 65
clustering, 47–51, 48, 49, 50
CMM see Capability Maturity Model 
(CMM)
code listings, 222
Collection of Computer Science 
Bibliographies, 102
colours
poster presentations, 256, 260
in project reports, 200–1
slides, 245
commenting program code, 232–3
commercial software packages, developing, 
280
communications
demonstrating software, 262–5
dissemination of research, 24
skills, 282–3
teams, 187, 190
viva voce examinations, 265–8
see also oral presentations; poster 
­presentations; report writing;  
written presentation
community goals, 172
company reports, 99
computer architecture projects, 9
computer-based presentations, 243–6, 252, 
253, 263
computing magazines, 101
computing projects
academic versus industry, 3–4, 5, 7–8, 7
defined, 4–6
programming in, 9–10
top tips for success, 284–5
types, 6–9, 56
see also choice of project; project proposals
conceptual diagrams, 47–51, 48, 49, 50, 95, 
105
conceptual prototyping, 135
conclusions, in project reports, 201, 202, 
204, 278
conference proceedings
literature searches, 99, 168
referencing, 230
conferences, 168
oral presentations, 240, 241, 252
poster presentations, 253
submitting work to, 169, 200, 237, 274
confidentiality
industry-based projects, 46
interviews, 30
questionnaires, 36
configuration audits, 140
configuration identification, 140
configuration management, 140–1, 189, 191
consequences, risk, 84–5, 85
BCS (British Computer Society), 284
beta testing, 150
bibliographies, 105–6, 228–31
BibMe, 105
black boards, 244
black-box testing, 149
blogs, 189
Bologna process, 10
books
literature searches, 99
referencing, 229
Boolean searches, 98
bottom-up development, 144–5, 145, 145, 
146–7
boundary values, 150
box and whisker plots, 220–2, 222
brainstorming, 25, 51, 242
break points, 150
British Computer Society (BCS), 284
British National Bibliography, 103
budgets, 63
build-and-fix model, 128–9, 128, 137
bullet points, on slides, 246, 248, 248
Capability Maturity Model (CMM),  
156, 157
careers, 283
case studies, 28–9
causal studies, 26–7
CDs
literature searches, 99
referencing, 230
change control, 140
change management, 127
chapter breakdown, 51, 197, 198, 199
charts and graphs see figures and tables
checkpoints, 88
choice of project, 43–52, 166, 284
brainstorming, 51
chapter breakdown, 51
clustering, 47–51, 48, 49, 50
industry-based projects, 46
information sources, 45–7
justification, 51–2
past projects, 46–7
present knowledge, 52
see also computing projects; project 
­proposals
circulatory research process, 23, 23, 24
class diagrams, 123, 123, 124
class testing, 149
classical waterfall model, 129–30,  
130, 141, 142
clients, 13, 45, 46, 162, 284–5
losing, 169–70
testing by, 151

	 Index
294
desktop publishing packages, 260
development projects, 7–8, 7
development, software see software 
­development
disclosure agreements, 30
documentation
project folders, 83, 162, 285
teams, 190, 191
see also software documentation
documentation testing, 153
doughnut charts, 220, 221
Dropbox, 190
Drupal, 127
DVDs
literature searches, 99, 101
referencing, 230
dynamic data entry, 150
dynamic testing, 149–50
email
management, 177–8
questionnaires, 27–8
EndNote, 106
entity relationship (ER) diagrams, 123, 
125–6, 126
epistemology, 24
equation editors, 207
equivalence partitioning, 150
error handling, 147–8
essential time, 170, 175
ethical issues, 30, 31, 38–40
evaluation
critical, 7, 27, 95–6, 106–8
literature searches, 95–6, 106–8
software development, 148, 150–1, 154, 
278
validation, 148
verification, 148
evaluation projects, 8
evaluators, 13
event-driven risks, 84
evolutionary prototyping, 137–8, 138, 140, 
141, 142
evolutionary research process, 23, 24
evolving risks, 84
examinations see assessment
examiners, 13
see also assessment
experimental prototyping, 135, 136
experiments, 28
experts, testing by, 151
explanatory studies, 26
exploratory studies, 26
extenuating circumstances procedures, 
166–7
extreme programming (XP), 139–40
content management systems, 127
contents lists, in project reports, 201, 202
contingency plans, 86–7, 88, 285
continuing professional development 
(CPD), 44–5, 281–2
contribution to knowledge, 5, 19, 19, 26
in abstracts, 209–10
assessment of, 274
taught versus research degrees, 6–7, 
11–12, 93
control
change, 140
project, 65, 163–5, 165, 187
quality, 156
revision, 140
risks, 87–8
version, 140, 141
copyright, 101, 280–1
costs, 63, 163
CPD see continuing professional 
­development (CPD)
critical evaluation, 7, 27, 95–6, 106–8
critical path method (CPM) see activity 
­networks
critical paths, 73, 74–5, 76
critical reading, 108
critical risks, 83, 86–7, 88
cross-sectional studies, 29
cryptography, 9
daily time analysis, 172–5, 173,  
174, 175
daily work rhythms, 174, 174, 176
data, 19–20
availability problems, 168
backups, 167
structures, 8
test data sets, 149–50
triangulation of, 29
data presentation see figures and tables
data protection, 39
database design, 123, 125–6, 126
database projects, 9
database searches, 98
DBLP Bibliography, 102
debugging, 149–50
deductive reasoning, 25
definition, project, 64–8
deflection, risk, 86, 87
degree requirements, 11–12
degree structures, 10–11, 11
delegating tasks, 175
deliverables, 55
departmental lists, 45
descriptive studies, 26
design, software see software design

	
Index
295
handouts, oral presentations, 246
handwriting, on slides, 245
hardware failure, 167
harnesses, test, 146
Harvard referencing system, 225–7, 229–31
Hawthorne Effect, 37–8
HCI see human-computer interaction (HCI)
HCI Bibliography, 102
histograms, 212–14, 213
see also resource allocation histograms 
(RAHs)
horizontal top-down development, 145, 
145, 146
human-computer interaction (HCI), 9, 123, 
144, 153
hypotheses, 56–7
ibid., 227, 228
IBM Systems Journals, 103
IEEE (Institute of Electrical and Electronics 
Engineers), 102, 284
image processing projects, 9
impact, risk, 84–6, 85
impaired performance procedures, 166–7
inauguration, project, 64–8
see also project planning
incremental model, 130–4, 131, 133, 141, 
142
independence, 282
indexes, in project reports, 201, 202
inductive reasoning, 24, 25, 26
industry-based projects, 8, 46
industry, working in, 283
information, 20
management, 104–6
see also literature searches
information systems projects, 9
informed consent, 39
IngentaConnect, 103
initiation, project, 65, 162
installability, 153
Institute of Electrical and Electronics 
Engineers (IEEE), 102, 284
integration testing, 149
intellectual discovery, 24–5
intellectual property rights (IPR), 280–1
interface testing, 153
internal reports, 169
International Organisation for 
Standardization (ISO), 156
internet
blogs, 189
copyright and patent information, 280–1
identifying software, 100
literature searches, 97, 100–3, 168
past projects, 46
Facebook, 189
factor analysis plots, 220, 221
family goals, 172
field of research, 26
figures and tables, 211–23
bar charts, 212, 212, 213
box and whisker plots, 220–2, 222
checklist of points, 217
code listings, 222
combined bar charts, 214–16, 215, 216
doughnut charts, 220, 221
factor analysis plots, 220, 221
histograms, 212–14, 213
inappropriate use, 218, 218
labelling, 211
line charts, 216, 216
lists of, 202
pie charts, 214, 214
polar charts, 219–20, 220
scaling, 218–19, 219
scatter diagrams, 216–17, 217
three-dimensional bar charts, 219, 220
fitness for purpose, 155
float time, 76–7, 78, 87
flowcharts, 123–4, 125
focus groups, 121
folders, project, 83, 162, 285
fonts
poster presentations, 256, 260
project reports, 200
slides, 245
football club example project, 132–3, 133
formal methods, 9
free on-line directory of computing, 103
functional requirements, 121
functional specification, 120, 121, 130
functionality-time graphs, 142
funding, seeking further, 279
gain see contribution to knowledge
Gantt charts, 57, 75–8, 77, 79, 80, 187
generalisation, 27
generalised research process, 22–3
getgo see project initiation
Global Books in Print, 103
glossary of terms, in project reports, 202
goals, 171–2
see also objectives
Google Scholar, 103
grammar, 206–7
grammar checkers, 207
grants, 279
graphics packages, 260
graphics projects, 9
graphs see figures and tables
group work see teams

	 Index
296
programming language choice, 144, 144
in project reports, 202
taught degrees, 110
writing and presentation, 108–12, 109
literature searches, 91, 97–108, 168
critical evaluation, 95–6, 106–8
definition, 95
information formats, 98–101
information quality, 100–1
information tracing, 101–3
inter-library loans, 103–4
managing information, 104–6
process, 95–6, 95, 97–8
sources of information, 97
tips, 104
literature surveys, 90–6, 285
context, 92–3, 92
justification of project, 91–2
process, 95–6, 95
taught versus research degrees, 92, 93–4, 
94
see also literature reviews; literature 
searches
loc. cit., 227, 228
log books, 179
longitudinal studies, 29
manuals
literature searches, 100
writing, 233–4
marking of project see assessment
meetings
agendas, 187
with clients, 162
with supervisors, 162, 182, 285
teams, 187, 189, 190
Meliorist Model, 4, 5
Mendeley, 106
metaknowledge, 52
methods, research see research methods
microfiche, 101
Microsoft® PowerPoint®, 243, 244–6, 260, 
263
Microsoft® Project®, 78
Microsoft® Publisher®, 260
Microsoft® Word®, 105, 207, 260
MiKTeX, 208
milestones, 71, 71, 72, 73, 83
mind maps, 48
money, 63, 163
MoSCoW analysis, 121
motivation, 165–6, 187
MPhil degrees, 10–11, 15, 283
see also taught versus research degrees
internet (continued)
poster templates, 255–6
professional organisations, 284
quality of information, 100–1
questionnaires, 27–8
reference management tools, 105–6
team support systems, 189–90
tracing articles, 101–3
wikis, 189
interruptions, 178
interviews, 29–31, 121
introductions
in project proposals, 55
in project reports, 201, 202
inversion, 25
IPR see intellectual property rights (IPR)
ISO 9000, 156, 157
ISO 9126, 156, 157
iterative development see evolutionary 
­prototyping
JabRef, 106
journals
literature searches, 99
publication of work, 169, 200, 234–7, 
236, 274
referencing, 229
justification of project, 51–2, 91–2, 278
kernel, 130, 131, 131
keywords, 55, 98
knowledge, 19–21, 92–3, 92
inductive reasoning, 24, 25
numerating, 52
self-awareness, 21, 21, 52
see also contribution to knowledge
languages, programming, 142–4, 144
LaTeX, 207–8
learning outcomes, 274
learning skills, 282
Lecture Notes of Computer Science,  
102
libraries
inter-library loans, 103–4
literature searches, 103
life cycle models see software development
likelihood, risk, 84–5, 85
line charts, 216, 216
Linux, 208
literature reviews, 6, 91
assessment, 276–7
completeness, 96
process, 95, 96

	
Index
297
overhead transparencies see slides/overhead 
transparencies
OzTeX, 208
papers, writing, 169, 200, 234–7, 236
Pappus, method of, 25
participants, 30, 31, 32, 36, 38–40
partition, 25
pastoral role, of supervisors, 181
patents, 280–1
pattern recognition projects, 9
peer-reviewed literature, 97
perfectionism, 178–9, 209
personal communications, referencing,  
230
personal development planning (PDP), 
44–5, 171
personal problems, 166–7
personas, 121
PERT networks see activity networks
PhDs, 11, 15
moving on to, 283
originality of work, 168–9
presentations, 240, 248
viva voce examinations, 265, 266
see also research degrees; taught versus 
research degrees
pictures
in poster presentations, 260, 262
on slides, 245
see also figures and tables
PIDs see project initiation documents 
(PIDs)
pie charts, 214, 214
plagiarism, 224
planning, project see project planning
plans
contingency, 86–7, 88, 285
skeleton, 81, 82
test, 151–2, 152
pointers, use in presentations, 252
polar charts, 219–20, 220
positivism, 24
poster presentations, 253–62
audiences, 253–4
colours, 256, 260
content, 254
examples, 256–8, 257, 258, 259
fonts, 256, 260
layout, 255–6, 255
preparation tips, 260–2, 261
size and shape, 255
software packages, 260
templates, 255–6
MSc degrees, 10, 11, 15, 283
multimedia, use in presentations, 245–6
naturalistic observation, 37
nature of research, 26
nerves, oral presentations, 252–3
network diagrams see activity networks
networking projects, 9
Neuron AI directory, 103
non-functional requirements, 121
non-technical risks, 84
normalisation techniques, 123
novices, testing by, 151
numeric referencing system, 225, 227, 
228–9
object-oriented design, 123
object-oriented languages, 143
objectives
as milestones, 71
oral presentations, 241
in project definition, 65–8
in project proposals, 54–5
SMART, 67–8, 70
and time management, 172
work breakdown structures, 68–9,  
69, 70
observation, 37–8
ontology, 25
OPAC (Online Public Access Circulation), 
103
op. cit., 227–8
open mindedness, 27
open source software, 127
oral presentations, 240–53
audiences, 242–3, 249–50, 250, 251–2
content, 241, 243
delivery, 249–51, 250
movement, 252
nerves, 252–3
notes, 251
objectives, 241
pointers, 252
preparation, 241–3, 251
questions, 251–2
rehearsal, 242
slide content, 246–9, 247, 248, 249
slide presentation, 244–6, 244, 245
technical failures, 253
timings, 241, 250, 252
tips, 252–3
visual aids, 243–6
originality, 18, 168–9
outcomes, expected, 55

	 Index
298
project control, 65, 163–5, 165, 187
project definition, 64–8
project initiation, 65, 162
see also project planning
project management software, 78, 189–90
project planning, 5, 65, 68–83, 285
activity sequencing, 71–5, 72, 73
critical paths, 73, 74–5, 76
milestones, 71, 71, 72, 73, 83
project initiation documents (PIDs), 81–3
re-planning, 78
rolling wave planning, 81, 82
scheduling, 75–8, 77, 79, 80
slack time, 76–7, 78, 87
time estimates, 70, 70, 72–4, 73
work breakdown, 68–9, 69, 70
project process, 62–4, 63
project proposals, 53–9
aims and objectives, 54–5
deliverables, 55
expected outcomes, 55
implicit content, 53–4
introduction/background, 55
keywords, 55
and project initiation documents,  
81–3
project plans, 57
related research, 56
research methods, 57
research questions and hypotheses, 56–7
resource requirements, 57
reviewing, 58–9
titles, 54
type of project, 56
project reports see report writing
project stages, 64–5
project closure, 65
project control, 65, 163–5, 165, 187
project definition, 64–8
project initiation, 65, 162
see also project planning
Projectplace, 189–90
proofreading, 201
proposals, project see project proposals
prototyping, 119, 134–8
conceptual, 135
evolutionary, 137–8, 138, 140, 141, 142
experimental, 135, 136
requirements capture, 135, 137, 138, 138
throw-away, 136–7, 142
pseudo-code, 123, 124, 125
publication of work, 169, 200, 234–7, 236, 
274
pure theoretical research, 26
postgraduate degrees, 10–11, 15
assessment, 274, 275
moving on to, 283
originality of work, 168–9
presentations, 240, 248
publication of work, 169, 200, 234–7, 
236, 274
viva voce examinations, 265, 266
see also taught versus research degrees
PowerPoint® (Microsoft®), 243, 244–6,  
260, 263
presentation skills
demonstrating software, 262–5
viva voce examinations, 265–8
see also oral presentations; poster 
­presentations; report writing; written 
­presentation
PRINCE II, 81
prioritising tasks, 176
problem-solving projects,  
8, 27
problem-solving techniques, 25
problems
data availability, 168
disappointing results, 169
hardware failure, 167
losing clients, 169–70
personal, 166–7
scope creep, 170
technical failures, 170
weakening, 165–6
procedural languages, 143
process models see software development
procrastination, 177
product development activities, 63, 64, 164
professional organisations, 100, 284
programming, 9–10, 127
code listings, 222
commenting program code, 232–3
error handling, 147–8
extreme programming (XP), 139–40
language choice, 142–4, 144
prototyping, 135, 136
pseudo-code, 123, 124, 125
see also software development
project closure, 65
project control, 65, 163–5, 165, 187
project definition, 64–8
project folders, 83, 162, 285
project initiation, 65, 162
project initiation documents (PIDs), 81–3
see also project proposals
project management activities, 63–4, 163–5
project closure, 65

	
Index
299
acknowledgements, 202
appendices, 201, 202
approaches, 197–9, 198
audience, 196
chapter breakdown, 197, 198, 199
conclusions, 201, 202, 204, 278
contents lists, 201, 202
ethical issues, 38
evolutionary delivery, 197–9
figure and table lists, 202
glossary of terms, 202
grammar, 206–7
indexes, 201, 202
introductions, 201, 202
main body, 201, 202
order to writing, 200–1
presentation style, 196, 200–1
proofreading, 201
publication of work, 169, 200, 234–7, 
236, 274
reasons for poor marks, 278
structure, 200, 202–5, 203, 207
timings, 199–200
tips, 208–9
title pages, 202
top-down approach, 197, 198
word limits, 196–7
word processing, 199, 207–8
writing style, 206–7
see also figures and tables; referencing
requirements capture, 119, 120–2, 122
classical waterfall model, 130
incremental model, 131
prototyping, 135, 137, 138, 138
requirements definition, 120, 130
requirements specification, 120,  
121, 130
research, 18–27
classifying, 25–7
contribution to knowledge, 19,  
19, 26
defined, 18, 21–2
dissemination of, 24
ethical issues, 30, 31, 38–40
intellectual discovery, 24–5
and knowledge, 19–21
originality, 18, 168–9
process, 22–5, 23
seeking funding, 279
see also research methods
research-based projects, 6–7
research degrees, 10–12
assessment, 274–5
moving on to, 283
qualitative methods, 28, 281
quality
project, 63, 64, 163, 164, 165
software development, 154–7
quality assurance, 155–6
quality control, 156
quality standards, 156–7
quantitative methods, 27–8
QuarkXpress®, 260
quasi-experimental research, 28
questionnaires, 29, 30, 31–7, 33
questions
oral presentations, 251–2
questionnaires, 32–6, 33
research, 56–7
viva voce examinations, 267
quotations, use of, 226
RAG (red, amber, green) grading, 86
RAHs see resource allocation histograms 
(RAHs)
random guessing, 25
recovery testing, 153
recruiting participants, 30, 39
Reference Manager, 106
reference manuals, 234
referencing, 223–31
in abstracts, 209
avoiding plagiarism, 224
books, 229
citing references, 225–8
Harvard system, 225–7, 229–31
ibid., 227, 228
journals, 229
listing references, 228–31
loc. cit., 227, 228
numeric system, 225, 227, 228–9
op. cit., 227–8
poor use of, 224–5
in project reports, 201, 202
recording references, 97, 104,  
105–6
software tools, 105–6, 225
verbatim quotations, 226
websites, 229–30
RefWorks, 106
regression testing, 149
rehearsal
oral presentations, 242
software demonstrations, 264
related research, 46–7, 56
relevance trees, 47–8, 49, 95, 98, 105
report writing, 24, 196–209
abstracts, 201, 202, 209–11

	 Index
300
self-awareness, 21, 21, 52
self goals, 172
seminars, presenting, 240
sequential research process, 22
serviceable time, 170–1, 175
site maps, 127, 127
skeleton plans, 81, 82
skills
communications, 282–3
gained during project, 281–3
team members, 183–4, 185
technical, 183, 185, 282
see also presentation skills
slack time, 76–7, 78, 87
slide transitions, 246
slides/overhead transparencies
content, 246–9, 247, 248, 249
pointers, 252
presentation, 244–6, 244, 245
software demonstrations, 263
technical failures, 253
timings, 250, 252
SMART objectives, 67–8, 70
social media, 106, 189
soft systems methodology (SSM), 122
software
backups, 167, 179
configuration management, 141, 189
demonstrating, 262–5
desktop publishing packages, 260
developing commercial packages, 280
equation editors, 207
fitness for purpose, 155
grammar checkers, 207
graphics packages, 260
identifying and obtaining, 98, 100
poster presentations, 260
project management, 78, 189–90
quality, 154–5
reference management, 105–6, 225
report writing, 199, 207–8
spell checkers, 207
team support, 189–90
website builders, 127
word processing packages, 105, 199, 
207–8, 260
software design, 119, 122–7
class diagrams, 123, 123, 124
entity relationship (ER) diagrams, 123, 
125–6, 126
flowcharts, 123–4, 125
incremental model, 131, 131
in prototyping, 138, 138
pseudo-code, 123, 124, 125
research degrees (continued)
originality of work, 168–9
publication of work, 169, 200, 234–7, 
236, 274
see also PhDs; taught versus research 
d­egrees
research methods, 26, 27–38
action research, 28
assessment of, 277
case studies, 28–9
experiments, 28
interviews, 29–31
observation, 37–8
in project proposals, 57
quantitative and qualitative, 27–8,  
281
questionnaires, 29, 30, 31–7, 33
research questions, 56–7
research symmetry, 56, 169
research territory maps (RTMs), 47–8, 48, 
95, 98, 105
resource allocation histograms (RAHs), 
187–8, 188
resources, 5, 63, 163, 165
external, 46, 57
in project proposals, 57
revision control, 140
rich pictures, 122
risk management, 83–8, 285
alleviating risks, 86–7, 88
controlling risks, 87–8
identifying risks, 84
impact assessment, 84–6, 85
and project proposals, 54
risk triggers, 84, 88
risks
critical, 83, 86–7, 88
event-driven, 84
evolving, 84
non-technical, 84
technical, 84
rolling wave planning, 81, 82
RTMs see research territory maps (RTMs)
scatter diagrams, 216–17, 217
scheduling, 75–8, 77, 79, 80
ScienceDirect, 102–3
SCImago, 236
scope, 63, 64, 163, 164, 165
scope creep, 170
screen layouts, 123
Scrum, 139
search engines, 98
security, 9

	
Index
301
statistics, 281
status accounting, 140
stock market example project see artificial 
neural network (ANN) example project
story boards, 123
structured interviews, 29
stubs, 146
supervisors, 12, 13
as academic advisors, 180–1
choosing, 59–60
effective use of, 163, 182
establishing relationship with, 162
expertise, 169
finding clients, 45
and further development of project, 279, 
280
as managers, 180
meetings with, 162, 182, 285
pastoral role, 181
and project reports, 197–9
role of, 180–1
testing by, 151
surveys, 29, 121
SWOT analysis, 185
symmetry, research, 56
system specification documents, 120, 121, 
130
system testing, 149
systems see software
tables see figures and tables
taught degrees, 10–12, 235, 274
taught versus research degrees, 15, 283
contribution to knowledge, 6–7,  
11–12, 93
degree requirements, 11–12
literature reviews, 110
literature surveys, 92, 93–4, 94
originality of work, 168–9
presentations, 240
report writing, 200, 205
software development projects, 118
supervisors, 60
viva voce examinations, 265, 266
teams, 83, 162, 163, 183–91
action-oriented roles, 183–4
allocation of marks, 188–9
assessment, 188–9, 276
communications, 187, 190
development, 186–7
extreme programming, 139–40
group work reports, 188–9
leader role, 184, 185, 190
librarian/secretary role, 185
site maps, 127, 127
in waterfall model, 130
wire frame diagrams, 126, 126
software development, 7, 45, 118–57
agile methods, 138–40
bottom-up approach, 144–5, 145, 145, 
146–7
build-and-fix model, 128–9, 128, 137
build stage, 119, 127, 130, 131, 138
choice of approach, 141–2
classical waterfall model, 129–30, 130, 
141, 142
commercial packages, 280
configuration management, 140–1
demonstrating software, 262–5
error handling, 147–8
evaluation, 148, 150–1, 154, 278
implementation, 119, 128, 130,  
131, 138
incremental model, 130–4, 131, 133, 
141, 142
methods, 118
programming language choice, 142–4, 
144
quality, 154–7
stage-wise model, 129
top-down approach, 144–6, 145, 145
validation, 148
verification, 148
see also programming; prototyping; 
­requirements capture; software  
design; testing
software documentation, 231–4
agile methods, 139
commenting program code, 232–3
functional specification, 120, 121, 130
requirements definition, 120, 130
requirements specification, 120,  
121, 130
testing, 153
user guides, 233–4
Software Engineering Institute, 156
software engineering projects, 9, 48
special interest groups, 100
spell checkers, 207
spider diagrams, 48, 50, 95, 105
sponsors, 8, 13
SSM (soft systems methodology), 122
stage-wise model, 129
stages, project see project stages
stakeholders, 12–14, 121
see also clients; supervisors
standards, quality, 156–7
static testing, 149

	 Index
302
literature searches, 99–100, 103
referencing, 230
see also report writing
throw-away prototyping, 136–7, 142
time, 63, 163
estimates, 70, 70, 72–4, 73
slack, 76–7, 78, 87
trade-offs, 164, 165
time frames, research, 29
time logs, 172–4, 173
time management, 163, 165, 169, 170–9
breaks, 179
categorising time use, 174–5, 175, 176
daily time analysis, 172–5, 173, 174, 175
email, 177–8
grains of time, 177
identifying goals, 171–2
improving use of time, 175–9
interruptions, 178
log books, 179
losing things, 179
perfectionism, 178–9
planning, 176
prioritising tasks, 176
process, 171–6, 171
procrastination, 177
report writing, 197
skill development, 283
unfinished tasks, 178
timings
oral presentations, 241, 250, 252
report writing, 199–200
software demonstrations, 263–4
titles, 54, 202
to do lists, 176
tools see software
top-down approaches
to report writing, 197, 198
to software development, 144–6, 145, 
145
TortoiseSVN, 141
trade-offs, 164–5, 165
training manuals, 234
Trello, 190
triangulation of data, 29
triggers, risk, 84, 88
turnitin®, 224
UML (Unified Modelling Language), 118, 
122, 123
undergraduate degrees, 10, 235, 274
see also taught versus research degrees
unit testing, 149
UNIX, 208
unstructured interviews, 29–30
teams (continued)
meetings, 187, 189, 190
monopolisers, 191
people-oriented roles, 184
resource allocation histograms,  
187–8, 188
roles, 183–6
support systems, 189–90
team contact role, 185, 191
teamwork tips, 190–1
technical skills, 183, 185
thought-oriented roles, 184
Teamwork.com, 190
technical manuals
literature searches, 100
writing, 233–4
technical risks, 84
technical skills, 183, 185, 282
television programmes, referencing, 230
Terullus, method of, 25
test data sets, 149–50
test harnesses, 146
test plans, 151–2, 152
testers, 13, 150–1
testing, 119, 128, 149–53
acceptance testing, 149
black-box testing, 149
in bottom-up development, 146
break points, 150
class testing, 149
documentation testing, 153
dynamic testing, 149–50
in incremental model, 131
installability, 153
integration testing, 149
interface testing, 153
in prototyping, 138
recovery testing, 153
regression testing, 149
static testing, 149
stubs, 146
system testing, 149
test harnesses, 146
test plans, 151–2, 152
in top-down development, 146
unit testing, 149
usability testing, 153
volume testing, 153
in waterfall model, 130
white-box testing, 149
testing-out research, 27
theoretical computer science projects, 9
theory, 20
THESES, 103
theses

	
Index
303
Web of Science, 102
website builders, 127
websites
referencing, 229–30
see also internet
white boards, 244
white-box testing, 149
Wikipedia, 102
wikis, 189
wire frame diagrams, 126, 126
wisdom, 20, 25
Wix, 127
word limits, written reports,  
196–7
word processing packages, 105, 199,  
207–8, 225, 260
WordPress, 127
work breakdown structures (WBSs), 68–9, 
69, 70
work goals, 172
writing style, 206–7
written presentation, 195–6, 282–3
abstracts, 201, 202, 209–11
literature reviews, 108–12, 109
publication of work, 169, 200, 234–7, 
236, 274
software documentation, 231–4
see also figures and tables; referencing; 
report writing
XP see extreme programming (XP)
usability testing, 153
use cases, 122, 122
user guides, 233–4
users, 13
testing by, 150–1
validation, 148
value/cost ratio analysis, 121, 131–2, 133
Vancouver referencing system, 225, 227, 
228–9
verbal communication skills, 282–3
verification, 148
version control, 140, 141
vertical top-down development, 145, 145, 
146
video
literature searches, 101
use in presentations, 244–6
visual aids, 242, 243–6
see also poster presentations; slides/­
overhead transparencies
visualisation projects, 9
viva voce examinations, 265–8
volume testing, 153
vulnerable groups, 39–40
waterfall model, 129–30, 130, 141, 142
WBSs see work breakdown structures 
(WBSs)
weakening, 165–6
web development projects, 7

