© 2019 MathByte Academy

Remember chain from itertools?
from itertools import chain
l1 = […]
l2 = (…)
l3 = generator_func()
for e in chain(l1, l2, l3):
…
à made it look like we had a single iterable – but really just chained them one after the other
collections.ChainMap serves a similar purpose – chaining dictionaries (or mapping types in general)
from collections import ChainMap
d1, d2, d3 à dictionaries
d = ChainMap(d1, d2, d3)
à no extra storage (nothing is copied)
very different from
d = {**d1, **d2, **d3}
à extra storage
à mutating elements in chain may affect underlying dicts
à essentially a shallow copy/merge
à sees changes in underlying dicts
à does not see changes in original dicts
à behaves more like a dictionary view (but is updatable!)
© 2019 MathByte Academy

Reading Keys from a Chain
There's an added complexity chaining maps that we do not have with iterables
The resulting chain should itself be a map
à no repeated keys!
d1 = {'a': 10, 'b': 20}
d2 = {'a': 100, 'c': 30}
d3 = ChainMap(d1, d2)
d3['b'] à 20
d3['c'] à 30
d3['a'] ??
à uses the first instance of the key it encounters in the chain
à unlike {**d1, **d2} where the last instance takes effect
d3['a'] à 10
à iteration works the same way
à first instance of any key is returned – others are ignored
Be Careful!
à unlike a dict there is no guarantee of key order when 
iterating a ChainMap
© 2019 MathByte Academy

Think of it as Parent-Child Relationships
ChainMap(d1, d2, d3)
d3
child
d2
d1
parents
overrides
overrides
In fact, there are attributes to deal with this explicitly
d.parents
à a ChainMap containing the parent elements only
d.new_child(d4)
à adds d4 to the front of the chain (or bottom of the hierarchy)
d3
d2
d1
d4
à same as
ChainMap(d4, d1, d2, d3)
ChainMap(d4, ChainMap(d1, d2, d3))
parents
new child
© 2019 MathByte Academy

Additional ways to update the Chain
The .maps property returns a (mutable) list of all the maps in the chain
The order of the list is the same as the child à parents hierarchy
i.e. first element is the child, other elements are the parents in the same order
This list is mutable
à can modify the chain by removing, deleting, inserting and appending other maps
d = ChainMap(d1, d2, d3)
d.maps à [d1, d2, d3]
d.maps.append(d4)
à ChainMap(d1, d2, d3, d4)
d.maps.insert(0, d5)
à ChainMap(d5, d1, d2, d3, d4)
del d.maps[1]
à ChainMap(d5, d2, d3, d4)
© 2019 MathByte Academy

Mutating Maps via the ChainMap
The ChainMap is mutable
à we already saw we could add and remove maps from the chain
We can also mutate the key/value pairs in the map itself
d = ChainMap(d1, d2)
à d[key] = value
BUT
these mutations affect the child (first) map only
d1 = {'a': 1, 'b': 2}
d2 = {'a': 20, 'c': 3}
d = ChainMap(d1, d2)
d['a'] = 100
d1 = {'a': 100, 'b': 2}
d2 = {'a': 20, 'c': 3}
d['c'] = 200
d1 = {'a': 100, 'b': 2, 'c': 200}
d2 = {'a': 20, 'c': 3}
del d['a']
d1 = {'b': 2, 'c': 200}
d2 = {'a': 20, 'c': 3}
d['a'] à 20
del d['a']
à KeyError exception
even though 'a' is in the chain
à not in the child (first) map
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

