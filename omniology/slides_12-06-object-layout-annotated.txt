Alex Aiken 
Compilers 
Object Layout 

Alex Aiken 
Object Layout 
• OO implementation = Basic code generation + More stuff 
 
• OO Slogan: If B is a subclass of A, than an object of class 
B can be used wherever an object of class A is expected 
 
• This means that code in class A works unmodified for an 
object of class B 

Alex Aiken 
Object Layout 
• How are objects represented in memory? 
 
• How is dynamic dispatch implemented? 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 
 
 
Attributes a and d are inherited by 
classes B and C 
 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 
 
 
All methods in all classes refer to a 
 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 
 
For A methods to work correctly in A, 
B, and C objects, attribute a must 
be in the same “place” in each 
object 
 
 

Alex Aiken 
Object Layout 
• Objects are laid out in contiguous memory 
 
• Each attribute stored at a fixed offset in the object 
– The attribute is in the same place in every object 
of that class 
 
• When a method is invoked, the object is self and the 
fields are the object’s attributes 
 
 

Alex Aiken 
Object Layout 
• The first 3 words of Cool objects contain header 
information: 
 
Dispatch Ptr 
Attribute 1 
Attribute 2 
. . . 
Class Tag 
Object Size 
Offset 
0 
4 
8 
12 
16 

Alex Aiken 
Object Layout 
• Class tag is an integer 
– Identifies class of the object 
• Object size is an integer 
– Size of the object in words 
• Dispatch ptr is a pointer to a table of methods 
– More later 
• Attributes in subsequent slots 
 
• Lay out in contiguous memory 

Alex Aiken 
Object Layout 
Observation: Given a layout for class A, a layout for 
subclass B can be defined by extending the layout of A 
with additional slots for the additional attributes of B 
 
Leaves the layout of A unchanged  
(B is an extension) 

Alex Aiken 
Object Layout 
          Offset  
Class 
0 
4 
8 
12 
16 
20 
A 
Atag 
5 
* 
a 
d 
B 
Btag 
6 
* 
a 
d 
b 
C 
Ctag 
6 
* 
a 
d 
c 

Alex Aiken 
Object Layout 
• The offset for an attribute is the same in a class and all of 
its subclasses 
– Any method for an A1 can be used on a subclass A2 
• Consider layout for An < … < A3 < A2 < A1 
 
A2 attrs 
A3 attrs 
. . . 
Header 
A1 attrs. 
A1 object 
A2 object 
A3 object 

Object Layout 
For the given classes and object 
layout table, what are the 
correct inheritance 
relationships between classes? 
Dispatch Ptr 
x 
y 
Class Tag 
Object Size 
v 
. . . 
z 
u 
Class  A inherits ??? { 
 
u: Int <- 0; 
 
v: Int <- 1; 
}; 
 
Class  B inherits ??? { 
 
x: Int <- 3; 
 
y: Int <- 4; 
}; 
 
Class  C inherits ??? { 
 
z: Int <- 5; 
}; 
 
A < B < C 
C < B < A 
A < C < B 
B < C < A 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 
 
 
Consider the dispatch 
 
e.g() 
 

Alex Aiken 
Object Layout 
Class A { 
 
a: Int <- 0; 
 
d: Int <- 1; 
 
f(): Int { a <- a + d }; 
}; 
 
Class  B inherits A { 
 
b: Int <- 2; 
 
f(): Int { a }; 
 
g(): Int { a <- a - b }; 
}; 
Class  C inherits A { 
 
c: Int <- 3; 
 
h(): Int { a <- a * c }; 
}; 
 
 
Consider the dispatch 
 
e.f () 
 

Alex Aiken 
Object Layout 
• Every class has a fixed set of methods 
– including inherited methods 
 
• A dispatch table indexes these methods 
– An array of method entry points 
– A method f lives at a fixed offset in the dispatch 
table for a class and all of its subclasses 

Alex Aiken 
Object Layout 
•
The dispatch table for class A 
has only 1 method 
•
The tables for B and C extend 
the table for A to the right 
•
Because methods can be 
overridden, the method for f is 
not the same in every class, 
but is always at the same 
offset 
          Offset  
Class 
0 
4 
A 
fA 
B 
fB 
g 
C 
fA 
h 

Alex Aiken 
Object Layout 
• The dispatch pointer in an object of class X points to 
the dispatch table for class X 
 
• Every method f of class X is assigned an offset Of in 
the dispatch table at compile time 
 

Alex Aiken 
Object Layout 
• To implement a dynamic dispatch e.f() we 
– Evaluate e, giving an object x 
– Call D[Of] 
• D is the dispatch table for x 
• In the call, self is bound to x 
 

