Graph	  Primi*ves	  
Depth-­‐First	  Search	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Overview	  and	  Example	  
Depth-­‐First	  Search	  (DFS)	  :	  explore	  aggressively,	  
only	  backtrack	  when	  necessary.	  
	  
-­‐-­‐	  also	  computes	  a	  topological	  ordering	  of	  a	  directed	  acyclic	  graph	  
-­‐-­‐	  and	  strongly	  connected	  components	  of	  directed	  graphs	  
	  
Run	  Time	  :	  O(m+n)	  

Tim	  Roughgarden	  
The	  Code	  
Exercise	  :	  mimic	  BFS	  code,	  use	  a	  stack	  instead	  of	  a	  queue	  [	  +	  
some	  other	  minor	  modiﬁca*ons	  ]	  
	  
Recursive	  version	  :	  DFS(graph	  G,	  start	  vertex	  s)	  
	  
	  
	  -­‐-­‐	  mark	  s	  as	  explored	  
	  
	  
	  -­‐-­‐	  for	  every	  edge	  (s,v)	  :	  
	  
	  
	  	  	  	  	  -­‐-­‐	  if	  v	  unexplored	  
	  
	  
	  	  	  	  	  	  	  	  	  -­‐-­‐	  	  DFS(G,v)	  

Tim	  Roughgarden	  
Basic	  DFS	  Proper*es	  
Claim	  #1	  :	  at	  the	  end	  of	  the	  algorithm,	  v	  marked	  as	  explored	  
<==>	  there	  exists	  a	  path	  from	  s	  to	  v	  in	  G.	  
	  
Reason	  :	  par*cular	  instan*a*on	  of	  generic	  search	  procedure	  
	  
Claim	  #2	  :	  running	  *me	  is	  O(ns+ms),	  	  
	  
	  
	  	  where	  ns	  =	  #	  of	  nodes	  reachable	  from	  s	  
	  
	  
	  
	  ms	  =	  #	  of	  edges	  reachable	  from	  s	  
	  
Reason	  :	  looks	  at	  each	  node	  in	  the	  connected	  component	  of	  s	  
at	  most	  once,	  each	  edge	  at	  most	  twice.	  

Tim	  Roughgarden	  
Applica*on:	  Topological	  Sort	  
Deﬁni*on	  :	  A	  topological	  ordering	  of	  a	  directed	  	  
graph	  G	  is	  a	  labeling	  f	  of	  G’s	  nodes	  such	  that:	  
1.  The	  f(v)’s	  are	  the	  set	  {1,2,..,n}	  
2.  	  	  
	  
Mo*va*on	  :	  sequence	  tasks	  while	  respec*ng	  
all	  precedence	  constraints.	  
Note	  :	  G	  has	  directed	  cycle	  =>	  no	  topological	  ordering	  
Theorem	  :	  no	  directed	  cycle	  =>	  can	  compute	  
topological	  ordering	  in	  O(m+n)	  *me.	  

Tim	  Roughgarden	  
Straigh]orward	  Solu*on	  
Note	  :	  every	  directed	  acyclic	  graph	  has	  a	  sink	  vertex.	  
	  
Reason	  :	  if	  not,	  can	  keep	  following	  outgoing	  arcs	  
to	  produce	  a	  directed	  cycle.	  
	  
To	  compute	  topological	  ordering	  :	  
-­‐-­‐	  	  let	  v	  be	  a	  sink	  vertex	  of	  G	  
-­‐-­‐	  	  set	  f(v)	  =	  n	  
-­‐-­‐	  	  recurse	  on	  G-­‐{v}	  
Why	  does	  it	  work?	  :	  when	  v	  is	  assigned	  to	  
posi*on	  i,	  all	  outgoing	  arcs	  already	  
deleted	  =>	  all	  lead	  to	  later	  ver*ces	  in	  
ordering.	  

Tim	  Roughgarden	  
Topological	  Sort	  via	  DFS	  (Slick)	  
DFS-­‐Loop	  (graph	  G)	  
-­‐-­‐	  mark	  all	  nodes	  unexplored	  
-­‐-­‐	  current-­‐label	  =	  n	  	  [to	  keep	  track	  of	  
	  
	  
	  ordering]	  
-­‐-­‐	  for	  each	  vertex	  	  
	  	  	  	  -­‐-­‐	  if	  v	  not	  yet	  explored	  [in	  previous	  
	  
	  
	  	  	  	  	  	  	  	  	  	  	  DFS	  call	  ]	  
	  -­‐-­‐	  	  DFS(G,v)	  
DFS(graph	  G,	  start	  vertex	  s)	  
-­‐-­‐	  for	  every	  edge	  (s,v)	  
	  	  	  	  -­‐-­‐	  	  	  if	  v	  not	  yet	  explored	  
	  -­‐-­‐	  mark	  v	  explored	  
	  -­‐-­‐	  DFS(G,v)	  
-­‐-­‐	  set	  f(s)	  =	  current_label	  
-­‐-­‐	  current_label	  =	  current_label-­‐1	  

Tim	  Roughgarden	  
Topological	  Sort	  via	  DFS	  (con’d)	  
Running	  Time	  :	  O(m+n).	  
Reason	  :	  O(1)	  *me	  per	  node,	  O(1)	  *me	  per	  edge.	  
Correctness	  :	  need	  to	  show	  that	  if	  (u,v)	  is	  an	  edge,	  
then	  f(u)	  <	  f(v)	  
	  
Case	  1	  :	  u	  visited	  by	  DFS	  before	  v	  =>	  recursive	  call	  
corresponding	  to	  v	  ﬁnishes	  before	  that	  of	  u	  (since	  DFS).	  
⇒ f(v)	  >	  	  f(u)	  
Case	  2	  :	  v	  visited	  before	  u	  =>	  v’s	  recursive	  call	  ﬁnishes	  before	  
u’s	  even	  starts.	  =>	  f(v)	  >	  f(u)	  
(since	  no	  
directed	  cycles)	  

