1
The Satisfiability Problem
Cook’s Theorem: An NP-Complete 
Problem
Restricted SAT: CSAT, 3SAT

2
Boolean Expressions
Boolean, or propositional-logic 
expressions are built from variables and 
constants using the operators AND, OR, 
and NOT.
Constants, and the values of variables, are 
true and false, represented by 1 and 0, 
respectively.
We’ll use concatenation for AND, + for OR, 
- for NOT.

3
Example: Boolean expression
(x+y)(-x + -y) is true only when 
variables x and y have opposite truth 
values.
Note: parentheses can be used at will, 
and are needed to modify the 
precedence order NOT (highest), AND, 
OR.

4
The Satisfiability Problem (SAT )
Study of boolean expressions generally is 
concerned with the set of truth 
assignments (assignments of 0 or 1 to 
each of the variables) that make the 
function true.
NP-completeness needs only a simpler 
question (SAT): does there exist a truth 
assignment making the expression true?

5
Example: SAT
(x+y)(-x + -y) is satisfiable.
There are, in fact, two satisfying truth 
assignments:
1. x=0; y=1.
2. x=1; y=0.
x(-x) is not satisfiable.

6
SAT as a Language/Problem
An instance of SAT is a boolean
expression.
Must be coded in a finite alphabet.
Use special symbols (, ), +, - as 
themselves.
Represent the i-th variable by symbol x 
followed by integer i in binary.

7
Example: Encoding for SAT
(x+y)(-x + -y) would be encoded by 
the string (x1+x10)(-x1+-x10)

8
SAT is in NP
There is a multitape NTM that can decide if a 
Boolean expression of length n is satisfiable.
The NTM takes O(n2) time along any path.
Use nondeterminism to guess a truth 
assignment on a second tape.
Replace all variables by guessed truth values.
Evaluate the expression for this assignment.
Accept if true.

9
Cook’s Theorem
SAT is NP-complete.
To prove, we must show how to 
construct a polytime reduction from 
each language L in NP to SAT.
Start by assuming the most restricted 
possible form of NTM for L (next slide).

10
Assumptions About NTM for L
1. One tape only.
2. Head never moves left of the initial 
position.
3. States and tape symbols are disjoint.
Key Points: States can be named 
arbitrarily, and the constructions 
many-tapes-to-one and two-way-
infinite-tape-to-one at most square 
the time.

11
More About the NTM M for L
Let p(n) be a polynomial time bound 
for M.
Let w be an input of length n to M.
If M accepts w, it does so through a 
sequence I0⊦I1⊦…⊦Ip(n) of p(n)+1 ID’s.
Assume trivial move from a final state.
Each ID is of length at most p(n)+1, 
counting the state.

12
From ID Sequences to 
Boolean Expressions
The Boolean expression that the 
transducer for L will construct from w 
will have (p(n)+1)2 “variables.”
Let variable Xij represent the j-th 
position of the i-th ID.
i and j each range from 0 to p(n).

13
Picture of Computation as an Array
Initial ID
X00 X01 …                         X0p(n)
X10 X11 …                         X1p(n)
I1
Ip(n)
Xp(n)0 Xp(n)1 …      
Xp(n)p(n)
.
.
.
.
.
.

14
Intuition
From M and w we construct a boolean 
expression that forces the X’s to 
represent one of the possible ID 
sequences of NTM M with input w, if it 
is to be satisfiable.
And the expression is satisfiable if 
some sequence leads to acceptance.

15
From ID’s to Boolean Variables
The Xij’s are not boolean variables; they 
are states and tape symbols of M.
However, we can represent the value 
of each Xij by a family of Boolean 
variables yijA, for each possible state or 
tape symbol A.
yijA is true if and only if Xij = A.

16
Points to Remember
1. The Boolean expression has components 
that depend on n.

These must be of size polynomial in n.
2. Other pieces depend only on M.

No matter how many states/symbols M has, 
these are of constant size.
3. Any logical expression about a set of 
variables whose size is independent of n 
can be written in constant time.

17
Designing the Expression
We want the Boolean expression that 
describes the Xij’s to be satisfiable if 
and only if the NTM M accepts w.
Four conditions:
1. Unique: only one symbol per position.
2. Starts right: initial ID is q0w.
3. Moves right: each ID follows from the 
previous by a move of M.
4. Finishes right: M accepts.

18
Unique
Take the AND over all i, j, Y, and Z of  
(-yijY+ -yijZ).
That is, it is not possible for Xij to be 
both symbols Y and Z.

19
Starts Right
The Boolean Function needs to assert 
that the first ID is the correct one with 
w = a1…an as input.
1. X00 = q0.
2. X0i = ai for i = 1,…, n.
3. X0i = B (blank) for i = n+1,…, p(n).
Formula is the AND of y0iZ for all i, 
where Z is the symbol in position i.

20
Finishes Right
The last ID must have an accepting 
state.
Form the OR of Boolean variables 
yp(n),j,q where j is arbitrary and q is an 
accepting state.

21
Running Time So Far
Unique requires O(p2(n)) symbols be 
written.
Parentheses, signs, propositional variables.
Algorithm is easy, so it takes no more 
time than O(p2(n)).
Starts Right takes O(p(n)) time.
Finishes Right takes O(p(n)) time.

22
Running Time – (2)
Caveat: Technically, the propositions 
that are output of the transducer must 
be coded in a fixed alphabet, e.g., 
x10011 rather than yijA.
Thus, the time and output length have 
an additional factor O(log n) because 
there are O(p2(n)) variables.
But log factors do not affect polynomials

23
Moves Right
Xij = Xi-1,j whenever the state is none of 
Xi-1,j-1, Xi-1,j, or Xi-1,j+1.
For each i and j, construct an expression 
that says (in propositional variables) the 
OR of “Xij = Xi-1,j” and all yi-1,k,A where A 
is a state symbol (k = i-1, i, or i+1).
Note: Xij = Xi-1,j is the OR of yijA.yi-1,jA for all 
symbols A.
Works because
Unique assures
only one yijX true.

24
Constraining the Next Symbol
… A  B  C …
B
Easy case;
must be B
… A  q  C …
?  ?  ?
Hard case; all
three may depend
on the move of M

25
Moves Right – (2)
In the case where the state is nearby, 
we need to write an expression that:
1. Picks one of the possible moves of the 
NTM M.
2. Enforces the condition that when Xi-1,j is 
the state, the values of Xi,j-1, Xi,j, and 
Xi,j+1. are related to Xi-1,j-1, Xi-1,j, and 
Xi-1,j+1 in a way that reflects the move.

26
Example: Moves Right
Suppose δ(q, A) contains (p, B, L).
Then one option for any i, j, and C is:
C  q  A
p  C  B
If δ(q, A) contains (p, B, R), then an
option for any i, j, and C is:
C  q  A
C  B  p

27
Moves Right – (3)
For each possible move, and for each i 
and j, express the constraints on the six 
X’s by a Boolean expression.
For each i and j, take the OR over all 
possible moves.
Take the AND over all i and j.
Small point: for edges (e.g., state at 0), 
assume invisible symbols are blank.

28
Running Time
We have to generate O(p2(n)) Boolean 
expressions, but each is constructed 
from the moves of the NTM M, which is 
fixed in size, independent of the input w.
Takes time O(p2(n)) and generates an 
output of that length.
Times log n, because variables must be 
coded in a fixed alphabet.

29
Cook’s Theorem – Finale
In time O(p2(n) log n) the transducer 
produces a Boolean expression, the 
AND of the four components: Unique, 
Starts, Finishes, and Moves Right.
If M accepts w, the ID sequence gives 
us a satisfying truth assignment.
If satisfiable, the truth values tell us an 
accepting computation of M. 

30
Conjunctive Normal Form
A  Boolean expression is in Conjunctive 
Normal Form (CNF) if it is the AND of 
clauses.
Each clause is the OR of literals.
A literal is either a variable or the 
negation of a variable.
Problem CSAT : is a Boolean expression 
in CNF satisfiable?

31
Example: CNF
(x + -y + z)(-x)(-w + -x + y + z) (…

32
NP-Completeness of CSAT
The proof of Cook’s theorem can be 
modified to produce a formula in CNF.
Unique is already the AND of clauses.
Starts Right is the AND of clauses, each 
with one variable.
Finishes Right is the OR of variables, 
i.e., a single clause.

33
NP-Completeness of CSAT – (2)
Only Moves Right is a problem, and not 
much of a problem.
It is the AND of expressions for each i 
and j.
Those expressions are fixed, 
independent of n.

34
NP-Completeness of CSAT – (3)
You can convert any expression to CNF.
It may exponentiate the size of the 
expression and therefore take time to 
write down that is exponential in the 
size of the original expression, but 
these numbers are all fixed for a given 
NTM M and independent of n.

35
Conversion to CNF
For each truth assignment to the 
variables of the expression that make 
the expression false:
Use a clause that is the OR of each 
variable negated iff it is assigned “true.”
Thus, the clause is false for this truth 
assignment and only this.
Take the AND of all these clauses.

36
Example: Conversion to CNF
Consider expression –x + yz.
There are three falsifying assignments: 
(x=1, y=1, z=0), (x=1, y=0, z=0), and 
(x=1, y=0, z=1).
The resulting CNF expression is 
therefore (-x+-y+z)(-x+y+z)(-x+y+-z).

37
k-SAT
If a Boolean expression is in CNF and 
every clause has exactly k literals, we 
say the expression is in k-CNF.
The problem k-SAT is SAT restricted to 
expressions in k-CNF.
Example: We just saw a 3-SAT formula
(-x+-y+z)(-x+y+z)(-x+y+-z).

38
3-SAT
This problem is NP-complete.
Clearly it is in NP, since SAT is.
It is not true that every Boolean 
expression can be converted to an 
equivalent 3-CNF expression.

39
3SAT – (2)
But we don’t need equivalence.
We need to reduce every CNF 
expression E to some 3-CNF expression 
that is satisfiable if and only if E is.
Reduction involves introducing new 
variables into long clauses, so we can 
split them apart.

40
Reduction of CSAT to 3SAT
Let (x1+…+xk) be a clause in some 
CSAT instance, with k > 4.
Note: the x’s are literals, not variables; any 
of them could be negated variables.
Introduce new variables y1,…,yk-3 that 
appear in no other clause.

41
CSAT to 3SAT – (2)
Replace (x1+…+xk) by 
(x1+x2+y1)(x3+y2+ -y1) … (xi+yi-1+ -yi-2) 
… (xk-2+yk-3+ -yk-4)(xn-1+xk+ -yk-3)
If there is a satisfying assignment of 
the x’s for the CSAT instance, then one 
of the literals xi must be made true.
Assign yj = true if j < i-1 and yj = false 
for larger j.

42
CSAT to 3SAT – (3)
Suppose (x1+x2+y1)(x3+y2+ -y1)   …            
(xk-2+yk-3+ -yk-4)(xk-1+xk+ -yk-3)
is satisfiable, but none of the x’s is true.
The first clause forces y1 = true.
Then the second clause forces y2 = true.
And so on … all the y’s must be true.
But then the last clause is false.

43
CSAT to 3SAT – (4)
There is a little more to the reduction, 
for handling clauses of 1 or 2 literals.
Replace (x) by (x+y1+y2) (x+y1+ -y2) 
(x+ -y1+y2) (x+ -y1+ -y2).
Remember: the y’s are different variables 
for each CNF clause.
Replace (w+x) by (w+x+y)(w+x+ -y).

44
CSAT to 3SAT Running Time
This reduction is surely polynomial.
In fact it is linear in the length of the 
CSAT instance.
Thus, we have polytime-reduced CSAT 
to 3-SAT.
Since CSAT is NP-complete, so is 3-SAT.

