©2019 MathByte Academy

Customizing
Enums are classes
class attributes become instances of that class
à members
We can define functions in the enumeration class
à become bound methods when called from a member (instance of the class)
à custom methods
à implement dunder methods
__str__  __repr__  __eq__  __lt__  etc…
©2019 MathByte Academy

Member Truthyness
by default, every member of an enum is truthy
à irrespective of the member value
class State(Enum):
READY = 1
BUSY = 0
bool(State.READY) à True
bool(State.BUSY) à True
So we can implement the __bool__ method to override this behavior:
class State(Enum):
READY = 1
BUSY = 0
def __bool__(self):
return bool(self.value)
bool(State.READY) à True
bool(State.BUSY) à False
©2019 MathByte Academy

Extending Enums
enumerations are classes
à they can be extended (subclassed)
BUT…
only if they do not contain any members
à cannot create a partial enum with some members and extended it with more members
à might seem limiting, but not really
à create a base enum with functionality (methods)
à use it as a base class for other enumerations that define their members
©2019 MathByte Academy

Coding
©2019 MathByte Academy

