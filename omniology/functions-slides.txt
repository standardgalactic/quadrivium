PLURALSIGHT AUTHOR
@dr_holderness
Python Functions
Sarah Holderness

print('Hello World')
Functions We’ve Used
Functions are like mini-programs that complete a specific task.  
We might not know how these work, but they give the expected results.
print() takes in one string (or multiple strings) 
and prints them to the console

Functions We’ve Used
Functions are like mini-programs that complete a specific task.  
We might not know how these work, but they give the expected results.
input() prompts the user for input 
and returns the string they entered.
print('Hello World')
name = input('Enter your name:\n')

Functions We’ve Used
Functions are like mini-programs that complete a specific task.  
We might not know how these work, but they give the expected results.
int() converts the given number to 
an integer.
print('Hello World')
name = input('Enter your name:\n')
amount = int(10.6)

Functions We’ve Used
Functions are like mini-programs that complete a specific task.  
We might not know how these work, but they give the expected results.
randint() takes in a low and high bound and 
returns a random integer within that range.
print('Hello World')
name = input('Enter your name:\n')
amount = int(10.6)
roll = random.randint(1,6)

Functions We’ve Used
Functions are like mini-programs that complete a specific task.  
We might not know how these work, but they give the expected results.
We can deﬁne a function to do anything we want 
and once we do we can use it over and over again.
print('Hello World')
name = input('Enter your name:\n')
amount = int(10.6)
roll = random.randint(1,6)

Defining a Function
We want a simple function that prints a greeting for a given name.
def 
Keyword
0 to many 
Parameter(s)
Function 
name
def greeting(name): 
    print('Hello', name)
The function body is 
indented below the deﬁnition. 

Defining a Function
greetings.py
The function deﬁnition
The program starts running 
here. This is called the 
main body of the program.
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name)
def greeting(name): 
    print('Hello', name)

Order Matters
greetings.py
The functions need to 
be deﬁned ﬁrst…
Before they are called. 
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 

Flow Through a Program
greetings.py
> python3 greetings.py 
Enter your name: 
Sarah
The 1st line of code that 
isn’t in a function deﬁnition 
is where the program starts. 
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 

greetings.py
> python3 greetings.py 
Enter your name: 
Sarah
Flow Through a Program
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 
Call the greeting() function 

greetings.py
> python3 greetings.py 
Enter your name: 
Sarah
Flow Through a Program
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 
Enter the function, name 
has the value of input_name 
which is "Sarah". 

greetings.py
Hello Sarah
Flow Through a Program
Prints "Hello Sarah"
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 
> python3 greetings.py 
Enter your name: 
Sarah

greetings.py
> python3 greetings.py 
Enter your name: 
Sarah 
Hello Sarah
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 
End of the program
Flow Through a Program

Scope
greetings.py
def greeting(name): 
    print('Hello', name) 
# Main program 
input_name = input('Enter your name:\n') 
greeting(input_name) 
print('Thanks', name) 
The variable name doesn’t exist here, outside 
of the function, so this would give us an error. 
The variable name only exists inside 
this function where it was deﬁned. 
A variable created inside a function can only be used inside that function. 
This is called local scope.

Scope
greetings.py
# Main program 
name = input('Enter your name:\n') 
greeting()
The variable name is global. 
The variable name is global so we can 
reference it inside this function. 
A variable created in the main body of the program is a global variable 
and has global scope. That means it can be used anywhere.
We don’t need a parameter for greeting() 
since it can reference the global variable name. 
def greeting(): 
    print('Hello', name)

Global Scope
greetings.py
> python3 greetings.py 
Enter your name: 
Sarah 
Hello Sarah
def greeting(): 
    print('Hello', name) 
# Main program 
name = input('Enter your name:\n') 
greeting()
The program using the global name 
variable works the same as before.

Global Scope
greetings.py
def greeting(): 
    print('Hello', name) 
# Main program 
name = input('Enter your name:\n') 
greeting()
Using global variables can become messy.
Now how do we use the greeting() 
function with name2?
We could save name2 to the name variable. But then the 
value for name is gone… Let’s try local scope again.
The variable name is global. 
name2 = input('Enter another name:\n') 
name = name2 
greeting()

Local Scope
greetings.py
def greeting(name): 
    print('Hello', name) 
# Main program 
name1 = input('Enter your name:\n') 
greeting(name1) 
name2 = input('Enter another name:\n') 
greeting(name2)
We have two different name values and 
we can use the greeting() function 
for both of them.
Now we can use the greeting() function 
with any passed in value for name.

Local Scope
greetings.py
> python3 greetings.py 
Enter your name: 
Sarah 
Hello Sarah 
Enter another name: 
Bob 
Hello Bob
def greeting(name): 
    print('Hello', name) 
# Main program 
name1 = input('Enter your name:\n') 
greeting(name1) 
name2 = input('Enter another name:\n') 
greeting(name2)
Local scope allows us to reuse the 
greeting() function with different values.

Reasons to Create a Function
You want to reuse that chunk of code over and over.
You want to organize your code by logical units.

def addition( a, b ): 
    return a + b
Another Example Function
We want a simple function that adds two numbers and returns the result.
def 
Keyword
2 
parameters
Function 
name
return 
Keyword
Some functions return a value, 
or even a sequence of values.

Defining Our Function
addition.py
The function deﬁnition
The main program starts 
running here.
# Creating our addition function 
def addition( a, b ): 
    return a + b 
# Main program 
num1 = float(input('Enter your 1st number:\n')) 
num2 = float(input('Enter your 2nd number:\n')) 
# Calling our function 
result = addition(num1, num2) 
print('The result is', result)

addition.py
> python3 addition.py 
Enter your 1st number: 
25 
Enter your 2nd number: 
37 
The result is 62
Defining Our Function
# Creating our addition function 
def addition( a, b ): 
    return a + b 
# Main program 
num1 = float(input('Enter your 1st number:\n')) 
num2 = float(input('Enter your 2nd number:\n')) 
# Calling our function 
result = addition(num1, num2) 
print('The result is', result) 
3
1
2
6
7
5
4

Organizing Our Main Code into a Function
addition.py
# Creating our addition function 
def addition( a, b ): 
    return a + b 
# Main program 
num1 = float(input('Enter your 1st number:\n')) 
num2 = float(input('Enter your 2nd number:\n')) 
result = addition(num1, num2) 
print('The result is', result) 
Let’s move the whole 
main body of code to 
its own function.

Organizing Our Main Code into a Function
addition.py
Now all of the program 
code is contained inside 
this main() function.
We still need to call main() after the functions are declared.
# Creating our addition function 
def addition( a, b ): 
    return a + b 
def main(): 
    num1 = float(input('Enter your 1st number:\n')) 
    num2 = float(input('Enter your 2nd number:\n')) 
    result = addition(num1, num2) 
    print('The result is', result) 
main()

Reasons to Create a Function
You want to reuse that chunk of code over and over.
You want to organize your code by logical units.

