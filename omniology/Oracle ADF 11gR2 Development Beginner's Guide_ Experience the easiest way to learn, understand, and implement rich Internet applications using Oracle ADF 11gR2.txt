www.allitebooks.com

Oracle ADF 11gR2 Development 
Beginner's Guide
Experience the easiest way to learn, understand,  
and implement rich Internet applicaions using  
Oracle ADF 11gR2
Vinod Krishnan
BIRMINGHAM - MUMBAI
www.allitebooks.com

Oracle ADF 11gR2 Development Beginner's Guide
Copyright © 2013 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, 
or transmited in any form or by any means, without the prior writen permission of the 
publisher, except in the case of brief quotaions embedded in criical aricles or reviews.
Every efort has been made in the preparaion of this book to ensure the accuracy of the 
informaion presented. However, the informaion contained in this book is sold without 
warranty, either express or implied. Neither the author, nor Packt Publishing, and its  
dealers and distributors will be held liable for any damages caused or alleged to be  
caused directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark informaion about all of the 
companies and products menioned in this book by the appropriate use of capitals.  
However, Packt Publishing cannot guarantee the accuracy of this informaion.
First published: April 2013
Producion Reference: 1180413
Published by Packt Publishing Ltd.
Livery Place
35 Livery Street
Birmingham B3 2PB, UK.
ISBN 978-1-84968-900-7
www.packtpub.com
Cover Image by Suresh Mogre (suresh.mogre.99@gmail.com)
www.allitebooks.com

Credits
Author
Vinod Krishnan
Reviewers
Frank Nimphius
Sten E. Vesterli
Acquisiion Editor
Grant Mizen
Lead Technical Editor
Azharuddin Sheikh
Technical Editors
Chirag Jani
Veena Pagare
Project Coordinator
Amey Sawant
Graphics
Ronak Dhruv
Valenina Dsilva
Copy Editors
Brandt D'Mello
Insiya Morbiwala
Sajeev Raghavan
Laxmi Subramanian
Aditya Nair
Proofreaders
Katherine Tarr
Maria Gould
Indexer
Tejal R. Soni
Producion Coordinator 
Manu Joseph
Cover Work
Manu Joseph
www.allitebooks.com

 About the Author
Vinod Krishnan has over eight years' experience in the Informaion Technology industry 
this exposed him to a wide range of technologies that include Java, J2EE, WebLogic, Fusion 
Middleware, SOA, and Webcenter.
He has been working with Oracle ADF Technologies since 2005, and enhanced his ainity 
towards ADF ater he joined Oracle India. For the last ive years, Vinod is acively involved 
in large implementaions of next-generaion enterprise applicaions, uilizing Oracle's 
JDeveloper and Applicaion Development Framework (ADF) technologies. He holds a  
B.Tech. in Informaion Technology from Anna University, Chennai, India.
He is currently responsible for building and deploying applicaions using the Oracle Fusion 
Middleware technology stack as a Project Lead in Oracle America.
He is an Oracle Certified Specialist, and the technologies he has worked on 
include Oracle ADF, SOA, Webcenter, and Idenity Management. His contribuion towards 
Jdeveloper and ADF discussion forums is immense. With his experience, he has learned 
many ips and techniques that will help a new user to learn this technology without any 
hassles. He writes his own blog (http://vtkrishn.com) that discusses the ips and tricks 
with using Oracle technologies.
www.allitebooks.com

Vinod has had a mulifaceted career, he has worked in posiions such as Senior Consultant, 
Senior Applicaions Engineer, Sotware Engineer, and Soluion Architect for MNCs such as 
Oracle, Capgemini, and Keane. Currently he is working as a Project Lead in Oracle America.
I would like to express my graitude to the people who saw me through this 
book, to all those who provided support, talked things over, read, wrote, 
ofered comments, allowed me to quote their remarks, and assisted in the 
ediing, proofreading, and design. 
 
I want to thank my wife, Sandhya, who supported and encouraged me in 
spite of all the ime it took me away from her. It was a long and diicult 
journey for her. 
 
I would like to thank Grant Mizen, Stephanie Moss, Ameya Sawant, and 
Poonam Jain for helping me with the process of selecion and ediing. 
 
Thanks to Packt Publishing for giving me the opportunity to help and  
guide new users of ADF with my book.
www.allitebooks.com

About the Reviewers
Frank Nimphius is a Senior Principal Product Manager in the Oracle applicaion development 
tools group at Oracle Corporaion, specializing in Oracle JDeveloper and Oracle Applicaion 
Development Framework (ADF).
In his current posiion, Frank represents and evangelizes the Oracle JDeveloper and Oracle 
ADF products worldwide as a speaker at user group and technology conferences as well as 
in various publicaions. Frank runs the ADF Code Corner website, the "OTN Forum Harvest" 
blog, and is the co-author of the Oracle Fusion Developer Guide book published in 2009 by 
McGraw-Hill.
Sten E. Vesterli took up Oracle development as his irst job ater graduaing from the 
Technical University of Denmark, and hasn't looked back since. He has worked with almost 
every development tool and server Oracle has produced in the last two decades, including 
Oracle ADF, JDeveloper, WebLogic, SQL Developer, Oracle Portal, BPEL, Collaboraion Suite, 
Designer, Forms, Reports, and even Oracle Power Objects.
He started sharing his knowledge with a conference presentaion in 1997 and has since 
given more than 100 conference presentaions at Oracle OpenWorld and at ODTUG, IOUG, 
UKOUG, DOAG, and other user group conferences around the world. His presentaions are 
highly rated by the paricipants, and in 2010 he received the ODTUG Best Speaker award.
He has also writen numerous aricles, paricipated in podcasts, and has writen Oracle Web 
Applicaions 101, McGraw-Hill, and Oracle ADF Enterprise Applicaion Development – Made 
Simple, Packt Publishing. He is currently wriing his third book on Oracle ADF Essenials.
www.allitebooks.com

Oracle has recognized Sten's skills as an expert communicator on Oracle technology by 
awarding him the presigious itle of Oracle ACE Director, which is carried by less than  
100 people in the world. He is also an Oracle Fusion User Experience Advocate and sits  
on the Oracle Usability advisory board, and he is part of the Oracle WebLogic Partner  
Council as well.
Based in Denmark, Sten is a partner in the Oracle consuling company Scot/Tiger, where 
he works as a Senior Principal Consultant. When not wriing books or presening, he helps 
customers choose the appropriate technology for their needs, teaching, mentoring, and 
leading development projects. In his spare ime, Sten enjoys triathlon and completed his  
irst Ironman in 2012.
www.allitebooks.com

www.PacktPub.com
Support iles, eBooks, discount offers and more
You might want to visit www.PacktPub.com for support iles and downloads related to  
your book. 
Did you know that Packt ofers eBook versions of every book published, with PDF and  
ePub iles available? You can upgrade to the eBook version at www.PacktPub.com and  
as a print book customer, you are enitled to a discount on the eBook copy. Get in touch  
with us at service@packtpub.com for more details.
At www.PacktPub.com, you can also read a collecion of free technical aricles, sign up  
for a range of free newsleters and receive exclusive discounts and ofers on Packt books  
and eBooks.
TM
http://PacktLib.PacktPub.com 
Do you need instant soluions to your IT quesions? PacktLib is Packt's online digital book 
library. Here, you can access, read and search across Packt's enire library of books. 
Why Subscribe?
 

Fully searchable across every book published by Packt
 

Copy and paste, print and bookmark content
 

On demand and accessible via web browser
Free Access for Packt account holders
If you have an account with Packt at www.PacktPub.com, you can use this to access 
PacktLib today and view nine enirely free books. Simply use your login credenials for 
immediate access.
www.allitebooks.com

Table of Contents
Preface 
1
Chapter 1: Installing and Coniguring JDeveloper IDE 
7
System requirements for Windows 
8
Installing JDeveloper 
8
Time for acion – downloading the installer 
8
Studio ediion 
9
Time for acion – installing JDeveloper Studio Ediion 
10
Time for acion – launching JDeveloper for the irst ime 
12
Knowing the start-up lags/parameters 
13
Time for acion – seing the start-up opions 
14
Seing up the user directory (System directory) 
14
Working with IDE coniguraion iles 
15
Knowing the roles 
17
Geing familiar with the IDE 
18
Seing the preferences 
20
Knowing the IDE components 
20
Time for acion – opening the sample applicaion 
21
Applicaion Navigator 
21
Applicaion Resources 
23
Data Controls palete 
24
Recently Opened Files 
24
Structure window 
24
Database Navigator 
25
The Resource palete 
26
Time for acion – creaing a catalog 
26
The Component palete 
27
Run Manager 
28
The Log window 
28
www.allitebooks.com

Table of Contents
[ ii ]
Code editor 
28
Code editor views 
28
Property Inspector 
29
Summary 
30
Chapter 2: Geing Started with ADF 
31
Model-View-Controller 
32
How ADF implements MVC 
33
The ADF architecture 
34
Creaing a simple applicaion in ADF 
35
ADF development pracice 
35
Sample applicaion – employee directory applicaion 
36
Time for acion – creaing the applicaion workspace 
37
Planning your applicaion 
39
Connect to a database 
39
Time for acion – seing up the database tables 
41
Time for acion – creaing a database connecion 
41
Build business services 
42
Accessing the project properies 
42
Time for acion – creaing the business components 
43
Running the AM tester 
49
Exposing data to the UI layer 
50
Time for acion – bind data to the UI components 
51
Time for acion – running the applicaion 
57
Summary 
60
Chapter 3: Understanding the Model Layer 
61
ADF business components 
61
What is an enity object? 
63
Time for acion – checking the atributes of an enity object 
64
Time for acion – creaing an enity object for DEPT table 
66
Why associaion? 
69
Time for acion – creaing an associaion between EmpEO and DeptEO objects 
70
About the view object 
71
Types of view object 
72
Time for acion – creaing an enity-based view object 
73
Importance of a view link 
77
Time for acion – creaing a view link between EmpVO and DeptVO 
77
What is an applicaion module? 
80
Time for acion – creaing an applicaion module 
80
Time for acion – adding the view link to the applicaion module 
81
Business components in acion 
83

Table of Contents
[ iii ]
Time for acion – running the applicaion module 
83
Opions for the business components 
85
Enity object 
86
General 
86
Atributes 
87
Business Rules 
90
Java 
91
Business Events 
91
View Accessor 
91
Associaion 
91
Relaionship 
91
View Object 
92
General 
92
Query 
93
Summary 
95
Chapter 4: Validaing and Using the Model Data 
97
Declaraive validaion 
98
Knowing the lifecycle of an enity object 
98
Types of validaion 
99
Enity-level validaion 
99
Atribute-level validaion 
99
Transacion-level validaion 
100
Built-in declaraive validators 
101
Collecion validator 
101
Time for acion – adding a collecion validator for the DeptEO ile 
101
The Compare validator 
104
The Key Exists validator 
105
The Length validator 
105
The List validator 
105
The Method validator 
105
The Range validator 
105
The Regular Expression validator 
106
The Script validator 
106
The UniqueKey validator 
106
Time for acion – creaing an alternate key for DeptEO 
107
Groovy expression 
108
Seing a default value 
109
Time for acion – seing a default salary for employees 
109
Validaion execuion 
111
Some commonly used expressions 
112
Time for acion – adding a script expression 
113
Learning about APIs 
115
Generaing an enity implementaion class 
115
Java classes in enity objects 
115

Table of Contents
[ iv ]
Time for acion – generaing a Java API for DeptEO 
115
Classes for view objects 
118
Applicaion module API 
119
Time for acion – learning to override a method 
120
Managing transacions 
121
Coniguring transacions 
121
Time for acion – creaing coniguraions 
122
Exposing data 
123
Time for acion – exposing a method using the client interface 
123
Summary 
126
Chapter 5: Binding the Data 
127
ADF model layer 
128
Data Controls palete 
129
Data control 
129
The view object collecion 
129
Atributes 
130
Operaions 
130
Methods 
131
Return 
132
Parameters 
132
View criteria 
132
Time for acion – adding a Commit buton to the UI page 
133
Working with the data control layer and binding 
135
Time for acion – accessing the page deiniion ile 
136
Creaing the bindings manually 
137
Time for acion – creaing page deiniion bindings 
141
Adding executables 
142
accessorIterator 
143
invokeAcion 
143
iterator 
144
page 
144
searchRegion 
144
shutleRegion 
144
Summary 
145
Chapter 6: Displaying the Data 
147
Creaing a page 
148
Knowing the page template 
148
Oracle Three Column Layout 
148
Oracle dynamic tabs shell 
149
Time for acion – creaing the page template 
150
Creaing the page with the template 
154

Table of Contents
[ v ]
Time for acion – creaing the dept.jspx ile 
154
Layout the page display 
156
Time for acion – creaing the layout for the page 
157
Knowing the UI components 
158
Input components 
159
af:form 
159
af:inputText 
160
af:inputDate 
160
af:inputFile 
161
af:selectOneChoice 
161
af:selectOneRadio 
161
af:selectBooleanCheckbox 
161
Output components 
161
af:outputText 
162
af:message 
162
af:outputFormated 
162
Layout components 
162
af:panelGroupLayout 
163
af:panelStretchLayout 
163
af:panelGridLayout 
163
af:panelFormLayout 
163
af:panelHeader 
163
Query components 
163
af:query 
163
Popup components 
164
af:popup 
164
af:dialog 
164
Time for acion – showing a popup to the user 
164
List of values components 
166
af:inputComboboxListOfValues 
166
Navigaion components 
166
af:commandbuton 
166
af:commandLink 
167
Menu components 
167
af:menu 
167
Table components 
167
af:table 
167
af:treeTable 
168
Miscellaneous components 
168
af:forEach 
168
af:iterator 
168
af:switcher 
169
Data visualizaion components 
169
Other tags 
169
EL expression 
170

Table of Contents
[ vi ]
Time for acion – adding an EL expression 
171
Parial page rendering 
172
Summary 
174
Chapter 7: Working with Navigaion Flows 
175
Task lows 
176
Task low types 
176
Unbounded task low 
176
Bounded task low 
177
Time for acion – adding a bounded task low to EmpDirectoryApplicaion 
178
Task low components 
180
Method call 
180
Time for acion – adding a method call acivity 
180
Router 
183
Save Point Restore 
183
Task Flow Call 
183
Task Flow Return 
184
Time for acion – adding a Task Flow Return 
184
Parent Acion 
185
URL View 
186
View 
186
Time for acion – adding a View acivity to the task low 
187
Control low 
188
Wild card 
188
Task low opions 
188
General 
188
Visibility 
190
Based on a template 
190
Managed beans 
190
Managed properies 
191
Parameters 
191
Time for acion – passing parameters to a task low 
191
Behavior 
193
Transacions 
194
Task low as a region 
194
Time for acion – adding a task low as a region 
194
ADF life cycle 
195
Memory scopes 
197
Relaionships between the scopes 
198
Summary 
201
Chapter 8: Layout with Look and Feel 
203
Skinning essenials 
203
What is a skin? 
204
Time for acion – adding a skin ile to the applicaion 
205
Skin selectors 
207

Table of Contents
[ vii ]
Pseudo classes in the ADF skinning framework 
207
Using the skin editor 
208
Time for acion – creaing an ADF skin using the skin editor IDE 
208
Extended skins 
211
Style classes 
211
Global selector aliases 
213
Faces component selectors 
213
Applying skins 
214
Deploying skins 
215
Time for acion – deploying the skin ile 
215
Summary 
218
Chapter 9: Implemening Security 
219
Introducion to security 
219
Basic security 
220
Time for acion – implemening basic security 
220
Applying security permissions 
223
Security for business objects 
224
Security for task lows and page-related iles 
224
Time for acion – adding permissions 
225
Creaing a login page 
228
Time for acion – creaing a login page 
228
Creaing roles and groups 
230
Time for acion – creaing roles and assignments 
231
Disabling ADF security 
233
Time for acion – disabling security for ADF applicaions 
233
Summary 
235
Chapter 10: Deploying the ADF Applicaion 
237
ADF applicaion deployment 
238
Overview 
238
Preparing for deployment 
240
Connecion 
240
Deployment proiles 
241
Time for acion – creaing the deployment proile 
241
MDS coniguraion 
242
Deployment descriptors 
243
web.xml 
243
weblogic.xml 
244
weblogic-applicaion.xml 
244
Security 
245
jazn-data.xml 
245
Data source 
247

Table of Contents
[ viii ]
Deployment to the WebLogic server 
247
Integrated server 
247
Time for acion – creaing a default domain for integrated server 
248
Time for acion – deployment to integrated server 
249
Standalone server 
250
Time for acion – deploying to the standalone server 
251
Summary 
254
Chapter 11: Advanced Features of ADF 
255
Advanced topics on enity objects 
256
Tuning 
256
Custom properies 
257
Property sets 
257
A resource bundle 
258
Business logic groups 
259
Domain 
259
The Custom validaion rule 
260
Custom error messages 
261
Advanced topics on view objects 
262
Avoid getRowCount, getEsimatedRowCount 
264
Working with Rowsets 
264
List of values 
264
Time for acion – creaing a list of values of a department 
264
UI categories 
266
Applicaion module state management 
267
Complex data controls 
268
Complex task lows 
268
Contextual events 
270
Time for acion – publishing an event and subscribing it 
270
Complex usage of a managed bean 
273
Debugging the applicaion 
275
Debugging pracices 
275
Excepion handling 
276
Debugging the lifecycle 
277
The Metadata Services framework 
278
Customizaion layers 
278
Customizaion classes 
279
Seeded customizaion 
280
Runime customizaion 
281
The Acive Data Services framework 
281
The ADS framework 
282

Table of Contents
[ ix ]
Modes of data transport 
282
WebLogic server coniguraions 
282
Domain 
283
Servers 
283
Deployments 
284
The Security realm 
284
Data sources 
284
Diagnosics 
285
Creaing an extension 
285
The extension.xml ile 
286
Time for acion – creaing and running an extension 
286
Summary 
288
Pop Quiz Answers 
289
Index 
293


Preface
Applicaion Development Framework (ADF) 11gR2 is the next-generaion JEE framework 
from Oracle for building robust and scalable enterprise applicaions. ADF 11gR2 provides 
out of the box infrastructure soluions that simplify applicaion development and end user 
experience. Applicaion development using ADF 11gR2 is fun as it provides a visual and 
declaraive development experience. Some of the noted features ofered by ADF 11gR2 
are rich and powerful components support for rich Internet applicaions, Page Flow 2.0 
support, drag-and-drop support for data bindings, ADF business components support, 
mobile development support, security implementaion support, declaraive development 
support, runime customizaion, reusability support, and so on.
Oracle ADF 11gR2 Development Beginner's Guide aims to provide step-by-step instrucions for 
designing, developing, and deploying a highly scalable, secured, and rich Internet applicaion. 
This book will help any user with basic programming skills to quickly learn what opions are 
available, and how to develop web applicaions using ADF 11gR2. This book has been designed 
to help you learn basics and have fun while developing pracical applicaions using ADF 11gR2.
In this book, you will learn about developing web-based applicaions using ADF 11gR2  
in a simple and easy way. Screenshots and pracical instrucions are included to make the 
book more interacive. This book will serve as a faithful friend to its readers.
What this book covers
Chapter 1, Installing and Coniguring JDeveloper IDE will teach you how to install and 
conigure the JDeveloper IDE, and how to work with the IDE.
Chapter 2, Geing Started with ADF will teach you the basics of the Model-View-Controller 
architecture, how ADF its into the MVC patern, the components of ADF, and how to  
build a simple ADF applicaion.
www.allitebooks.com

Preface
[ 2 ]
Chapter 3, Understanding the Model Layer will teach you about ADF Business Components,  
how they work, and it will help you familiarize with the components.
Chapter 4, Validaing and Using the Model Data describes how to write business logic 
declaraively. Learn groovy expressions, and how to manage transacions and expose  
the data.
Chapter 5, Binding the Data teaches you how to use the data controls and bind the data  
for the user interface.
Chapter 6, Displaying the Data shows how to display the data in the UI using layers  
and components.
Chapter 7, Working with Navigaion Flows describes how to use page lows and aciviies, 
pass parameters, and about the ADF life cycle.
Chapter 8, Layout with Look and Feel will teach you how to style the page and make  
it presentable.
Chapter 9, Implemening Security will help in securing the page that you have created,  
and show how to allow and restrict access for diferent roles and groups.
Chapter 10, Deploying the ADF Applicaion will help you deploy the applicaion to  
the server.
Chapter 11, Advanced Features of ADF delves into the Advanced features of the ADF  
11gR2 framework.
What you need for this book
You will need a computer running either the Windows or Linux or Mac operaing system with 
a minimum of 2 GB of RAM. A minimum of 1024 x 768 resoluion is desired for development. 
It will be good if you have a minimum of 3 GB of hard drive space in your machine. These 
requirements are detailed in Chapter 1, Installing and Coniguring JDeveloper IDE. An Internet 
connecion is required to download the iles. You should have modern browsers such as 
Internet Explorer, Firefox, or Chrome installed on your machine to test the applicaion.

Preface
[ 3 ]
Who this book is for
The book is intended for beginners who know a litle bit of HTML and Java programming and 
would like to learn how to develop rich web applicaions using Oracle ADF 11gR2. 
Conventions
In this book, you will ind a number of styles of text that disinguish between diferent  
kinds of informaion. Here are some examples of these styles, and an explanaion of  
their meaning.
Code words in text are shown as follows: " Accept the prompt to save 
jdevstudio11123install.exe on your machine "
A block of code is set as follows:
<context-param>
     <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</
param-name>
    <param-value>true</param-value>
  </context-param>
  <context-param>
    <param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_
COMPRESSION</param-name>
    <param-value>true</param-value>
  </context-param>
When we wish to draw your atenion to a paricular part of a code block, the relevant lines 
or items are set in bold:
[default]
exten => s,1,Dial(Zap/1|30)
exten => s,2,Voicemail(u100)
exten => s,102,Voicemail(b100)
exten => i,1,Voicemail(s0)
Any command-line input or output is writen as follows:
# cp /usr/src/asterisk-addons/configs/cdr_mysql.conf.sample
     /etc/asterisk/cdr_mysql.conf

Preface
[ 4 ]
New terms and important words are shown in bold. Words that you see on the screen, in 
menus or dialog boxes for example, appear in the text like this: "clicking the Next buton 
moves you to the next screen".
Warnings or important notes appear in a box like this.
Tips and tricks appear like this.
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this  
book—what you liked or may have disliked. Reader feedback is important for us to  
develop itles that you really get the most out of.
To send us general feedback, simply send an e-mail to feedback@packtpub.com,  
and menion the book itle via the subject of your message.
If there is a topic that you have experise in and you are interested in either wriing  
or contribuing to a book, see our author guide on www.packtpub.com/authors.
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you 
to get the most from your purchase.
Downloading the example code
You can download the example code iles for all Packt books you have purchased from your 
account at http://www.packtpub.com. If you purchased this book elsewhere, you can 
visit http://www.packtpub.com/support and register to have the iles e-mailed directly 
to you.

Preface
[ 5 ]
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do 
happen. If you ind a mistake in one of our books—maybe a mistake in the text or the 
 code—we would be grateful if you would report this to us. By doing so, you can save other 
readers from frustraion and help us improve subsequent versions of this book. If you ind 
any errata, please report them by visiing http://www.packtpub.com/submit-errata, 
selecing your book, clicking on the errata submission form link, and entering the details  
of your errata. Once your errata are veriied, your submission will be accepted and the  
errata will be uploaded on our website, or added to any list of exising errata, under the 
Errata secion of that itle. Any exising errata can be viewed by selecing your itle from 
http://www.packtpub.com/support.
Piracy
Piracy of copyright material on the Internet is an ongoing problem across all media. At Packt, 
we take the protecion of our copyright and licenses very seriously. If you come across any 
illegal copies of our works, in any form, on the Internet, please provide us with the locaion 
address or website name immediately so that we can pursue a remedy.
Please contact us at copyright@packtpub.com with a link to the suspected  
pirated material.
We appreciate your help in protecing our authors, and our ability to bring you  
valuable content.
Questions
You can contact us at questions@packtpub.com if you are having a problem with any 
aspect of the book, and we will do our best to address it.


1
Installing and Coniguring 
JDeveloper IDE
Developing a web application using ADF is fun, and the most interesting part 
is to work in an integrated development environment such as JDeveloper IDE. 
JDeveloper IDE imparts a declarative environment and supports an end-to-end 
development life cycle for an enterprise application using ADF. JDeveloper has 
been designed to interact efficiently with most of the technologies.
JDeveloper has undergone several phases of changes/versions, and it is now the prominent, 
most preferred IDE for developing web applicaions using Oracle technologies, especially ADF. 
The latest version of JDeveloper available in the market is 11gR2 with the release Version 
11.1.2.3.0. The advantage of the JDeveloper 11gR2 release 11.1.2.3.0 is that it supports the 
development of mobile applicaions for iOS and Android mobile devices.
In this chapter, we will learn how to:
 

Install JDeveloper on Windows
 

Work with the IDE
 

Get familiar with the IDE components

Installing and Coniguring JDeveloper IDE
[ 8 ]
System requirements for Windows
JDeveloper 11gR2 is supported to run on the following operaing systems:
 

Windows
 

Linux
 

Mac OS X
The recommended system requirements for Windows are as follows:
 

Operaing system version: Windows 7 and Windows XP with service pack 3 on both 
32-bit and 64-bit systems
 

Minimum system memory: 2 GB for 32-bit and 3 GB for 64-bit machines is desirable
 

Display seings: Minimum of 1024 x 768 resoluion for ADF development
 

JDK requirement: Java 6.0 Update 24 and above
When writing this book, the author used JDeveloper 11gR2 
(11.1.2.3.0) on Windows 7 professional, a 32-bit operating 
system with 3 GB of system memory.
Installing JDeveloper
Installing JDeveloper 11gR2 on Windows is an easy task. Following the steps will ensure a 
smooth installaion.
The installaion process involves:
 

Downloading the installer from OTN
 

Installing the sotware in Windows
Time for action – downloading the installer
JDeveloper 11gR2 Studio Ediion is free for development and is licensed under the OTN 
JDeveloper license agreement. JDeveloper 11gR2 (11.1.2.3.0) has a free runime license  
for applicaions deployed to GlassFish using the ADF Essenials feature. Perform the 
following steps for downloading the installer:
1. On the OTN website (http://www.oracle.com/technetwork/developer-
tools/jdev/downloads/index.html), click on the Downloads tab, read the 
terms, and accept the license agreement.

Chapter 1
[ 9 ]
2. Select the Windows Install drop-down opion for Studio Ediion: 11.1.2.3.0 and click 
on the Download File buton.
3. Accept the prompt to save jdevstudio11123install.exe on your machine.
What just happened?
You have downloaded the installer from the OTN site to install the JDeveloper 11.1.2.3.0 
Studio ediion on Windows.
This installer is an executable that will run only on Windows. The installer and the installaion 
procedure difer from plaform to plaform. You will have to download a Linux install for a 
Linux plaform, and there is an opion to download a generic, plaform-independent installer 
for MAC. Refer to the following URL for more informaion on how to use a generic installer:
http://www.oracle.com/technetwork/developer-tools/jdev/documentation/
index.html
Have a go hero – researching the optional components for JDeveloper
Ok, now it's your turn to research more on the opional components that can be downloaded 
for JDeveloper 11gR2. There are other components that support adding more features for 
JDeveloper IDE.
Ask yourself the following quesions and ind the answers on the Downloads page:
 

We have diferent development teams to work with. What are the opions to 
collaborate for increased producivity?
 

How can you ind out more about the previous versions of JDeveloper before 
staring with 11gR2?
 

Can I install my ADF applicaion on any other JEE servers?
 

Where can I see the ADF framework components in acion?
 

I want to develop my own custom theme for the ADF components. Where can  
I ind a user-friendly editor for customizing the components?
Studio edition
For a start, installing JDeveloper 11gR2 in Windows is straighforward and will not include any 
other extra steps. We will now move on to the installaion of JDeveloper 11gR2 on Windows.

Installing and Coniguring JDeveloper IDE
[ 10 ]
Time for action – installing JDeveloper Studio Edition
Let's perform the following steps to install the JDeveloper 11gR2 Studio Ediion:
1. Double-click on the jdevstudio11123install.exe ile to launch the installer. 
The Oracle installer starts preparing for the installaion, and a screen with a progress 
bar appears.
2. Once the preparaion is completed, a Welcome screen is displayed. Click on the 
Next buton to proceed with the installaion process.
3. The next screen will ask you to choose the middleware home directory for the 
installaion. The Middleware Home Type secion will have two opions to choose 
from. One is Use an exising Middleware Home and the other one is Create a  
new Middleware Home.
When we select Use an existing Middleware Home, the existing 
middleware installation paths get enabled, and the installation of 
the additional component depends on the user selection.
4. Select Create a new Middleware Home and locate the directory where you want  
to install JDeveloper Studio and other addiional components. The installers will 
display an error message if the path already exists. The directory that you specify 
here will be your middleware home, and a common pracice is to refer to the 
directory as MW_HOME.
5. Click on the Next buton to choose the installaion type on the next screen.
6. On this screen, you will select how you want to install the product. You will see  
two opions, namely Typical and Custom.
 

The Typical installation will install JDeveloper Studio, application 
development framework runtime, and WebLogic Server on your system
 

The Custom installation will allow you to choose the product and 
components to install
7. We will select the Typical opion this ime; it will install all the related components 
necessary to run the applicaion.
8. The next screen will display the installaion directories for diferent components. 
Following are the default directories:
 

For JDeveloper: MW_HOME/jdeveloper
 

For WebLogic Server: MW_HOME/wlserver_10.3

Chapter 1
[ 11 ]
9. You can select the Discard Changes opion at this point of ime to revert back and 
choose a diferent directory for your middleware installaion.
10. The next screen will allow you to create the following shortcuts for the components:
 

“All Users” Start Menu folder will create shortcuts in the Start menu,  
and all users registered on the system can access these shortcuts
 

Local user's Start Menu will restrict access to any other user except the 
current user
11. The next screen will display the installaion summary of all the components that  
will be installed as part of the current installaion. The components installed are:
 

JDeveloper Studio
 

Application development framework runtime
 

WebLogic Server
 

Java 6.0 Update 24
If we had selected the Custom installation type, we would 
have had an option to unselect the JDK 1.6 installation on 
the component selection screen. Also remember that JDK 
has to be installed separately for users who had opted to 
use a generic installer.
12. Click on the Next buton to proceed with the installaion of the components displayed 
on the Installaion Summary screen. During this process, the installaion-related 
arifacts will be displayed along with the progress of the installaion. You have an 
opion to exit the installaion at any point of ime.
13. Once the installaion is complete, you will be directed to the Installaion Complete 
screen with a message saying Installaion is Complete. You are provided with an 
opion Run Quickstart that will display a wizard to launch installed components, 
conigure the server, and show a way to upgrade the server domains. We can also 
access the online resources and documentaion related to JDeveloper 11gR2 using 
the wizard.
14. Click on the Done buton to display the Quickstart wizard.
15. To verify the components that are installed, you can check the MW_HOME/
registry.xml ile.
www.allitebooks.com

Installing and Coniguring JDeveloper IDE
[ 12 ]
What just happened?
Congratulaions! We just installed JDeveloper 11gR2 Studio Ediion on Windows; this means 
that the iniial and most important step for developing this next generaion enterprise 
applicaion is complete.
Staring JDeveloper is the next easy task that follows the installaion.
Have a go hero – check the folder structure of JDeveloper
Now it is ime for you to have a look at the installaion directory of JDeveloper. Perform the 
following steps to check the folder structure of JDeveloper:
1. List down the folders that you see inside MW_HOME.
2. Familiarize yourself with the directory structure.
3. What can you infer from the folder structure?
Time for action – launching JDeveloper for the irst time
By now you will be excited to launch JDeveloper, but since this is your irst ime, it will be 
good to know the opions available:
1. Launch Oracle JDeveloper 11g from the Quickstart wizard ater the installaion 
is complete. The Quickstart wizard is also available from All Programs | Fusion 
Middleware 11.1.2.3.0.
2. The newly installed products are pinned to the Start menu for easy access.  
Click on JDeveloper Studio 11.1.2.3.0.
3. You can also click on All Programs from the Start menu, locate Oracle Fusion 
Middleware 11.1.2.3.0, and click on JDeveloper Studio 11.1.2.3.0.
The locaions from where you can start JDeveloper apart from 
the shortcuts are:
 

MW_HOME/jdeveloper/jdeveloper.exe
 

MW_HOME/jdeveloper/jdev/bin/jdevw.exe
 

MW_HOME/jdeveloper/jdev/bin/jdev.exe
The irst two opions have the same purpose. The last opion will 
open along with a console for diagnosic purposes.

Chapter 1
[ 13 ]
What just happened?
Now you have launched JDeveloper. What do you see? You will see a startup screen called 
Oracle JDeveloper 11g with the Version 11.1.2.3.0.
Have a go hero – have fun with the welcome screen
By now you will have a beter idea of the folder structure of JDeveloper. To have some fun, 
just guess where the welcome screen is coming from.
If you succeed in idenifying the locaion, you can have your own welcome screen every ime 
you start JDeveloper, just by changing it.
Knowing the start-up lags/parameters
There are some lags that you can set to alter the launching behavior of the IDE. These are 
set as the command-line opions for the shortcut that is used to launch the IDE.
JDeveloper is a muliuser-enabled IDE that allows muliple users to share the same 
workstaion. By default, the IDE coniguraion iles are saved in a directory within the  
user's working directory. The following are the start-up lags/parameters:
 

-J-Dide.user.dir=<system_directory>: Using this property, you can 
override the default behavior to write the coniguraion iles into the speciic 
directory of choice.
An alternate way for this is to set the JDEV_USER_DIR environment 
variable that points to the user's current working directory.
JDEV_USER_HOME and JDEV_USER_DIR are the variables that are 
listed in the MW_HOME/jdeveloper/jdev/bin/jdev.boot 
file. JDeveloper will look up these variables on startup to set the user's 
directory. For example:
set JDEV_USER_HOME=C:\Users\vtkrishn\AppData\
Roaming\JDeveloper
set JDEV_USER_DIR=C:\JDeveloper\mywork
 

nonag: This will disable all dialogs or messages displayed while staring the IDE. 
However, the splash screen will sill be displayed to the user. Use nosplash to 
disable the splash screen.

Installing and Coniguring JDeveloper IDE
[ 14 ]
 

noreopen: This opion will not reopen the iles that were opened in the previous 
user session.
The noreopen option will help JDeveloper to start faster, with 
there being no open files from the previous user session. All these 
settings will be displayed in the Properties tab of the IDE in Help | 
About. You may find other useful information in this section.
Time for action – setting the start-up options
1. Locate your middleware directory on the Start menu.
2. Right-click on JDeveloper Studio 11.1.2.3.0 and select Properies.
3. In the Target secion, add the following line of code at the end of the line:
-J-Dide.user.dir=C:\jdev –nonag –noopen
What just happened?
You have selected JDeveloper to have the user directory in the C:\jdev folder and  
also opted not to open any kind of message or welcome screen while launching the IDE.  
The IDE will not have the iles from your last session open.
Have a go hero – more options
You will ind more opions listed in the Help | About secion related to the start-up parameters.
Setting up the user directory (System directory)
The system directory is created when you irst start your JDeveloper and it keeps storing  
the IDE seings thereater. The default locaion on Windows for the JDeveloper 11gR2 
release Version 11.1.2.3 is:
C:\Users\%UserName%\AppData\Roaming\JDeveloper\ 
system11.1.2.3.39.62.76.1
To see some informaion in the system folder, the JDeveloper IDE should be loaded completely 
and should not be interrupted during startup. The DefaultDomain folder will be created when 
the integrated server is started for the irst ime. Other folders in the system folders are also 
created when the component is accessed for the irst ime. The following screenshot shows  
the system folders, their iles, and their descripion:

Chapter 1
[ 15 ]
Have a go hero – look for other iles in the system folder
Now it's ime for you to do some research on the system directory. Perform the following steps:
 

List down other coniguraion iles that you can locate in the system directory
 

Analyze how and when these iles are created as you learn to develop  
the applicaion
 

Change some IDE seings and see which ile gets changed
Working with IDE coniguration iles
There are two iles that are used to store the coniguraion informaion of JDeveloper IDE. 
To add memory to the IDE or JDeveloper during startup, we add the following appropriate 
Virtual Memory opions to these iles:
 

MW_HOME/jdeveloper/ide/bin/ide.conf
 

MW_HOME/jdeveloper/jdev/bin/jdev.conf

Installing and Coniguring JDeveloper IDE
[ 16 ]
To increase the JDeveloper memory, set the following options in the 
appropriate files specified previously. Some of the JVM options are 
explained as follows:
 

AddVMOption is used to optimize the memory for 
JDeveloper IDE
 

Xms is the initial Java Heap size
 

Xmx is the maximum Java Heap size
 

XX:MaxPermSize is used to set the maximum Java 
permanent size
Please note that the following seing depends on the available 
memory in your system:
Add AddVMOption -Xms512M AddVMOption -Xmx1024M 
in ide.conf.
Add AddVMOption -Xmx512M AddVMOption 
-XX:MaxPermSize=1024M in jdev.conf.
To conigure the boot behavior of the IDE or JDeveloper, we modify the following iles:
 

MW_HOME/jdeveloper/ide/bin/ide.boot
 

MW_HOME/jdeveloper/jdev/bin/jdev.boot
The seings for the iles mostly correspond to the system properies. To conigure the  
JDK-related properies for the IDE, modify MW_HOME/jdeveloper/ide/bin/jdk.conf.
For example, you can include opions such as the following opion for Java2D to allow 
DirectDraw usage in Windows:
AddVMOption  -Dsun.java2d.noddraw=true
You can add other VM opions to the .conf iles as well. The override sequence is jdk.conf, 
then ide.conf, followed by jdev.conf.
Use JAVA_HOME/bin/jvisualvm.exe to monitor and proile 
Jdeveloper.exe. This tool will also help you gather VM opions 
and system properies of the currently running JDeveloper.

Chapter 1
[ 17 ]
Have a go hero – look for other coniguration iles
Now it's ime for you to verify all available coniguraion iles in the middleware directory. 
Perform the following steps to verify coniguraion iles:
 

What are the diferences that you see between these iles?
 

Try changing some properies such as -Dsun.awt.
keepWorkingSetOnMinimize=false in your jdev.conf ile and see how 
it afects the behavior of the IDE. This opion becomes more responsive when 
JDeveloper IDE is restored ater minimizing.
Knowing the roles
When you launch the IDE without the –nonag startup opion, a splash screen followed by  
a Select Role screen is displayed. The Select Role screen provides the opions to select the 
role in which you want to start the IDE. This is also referred to as shaping the IDE based on 
the selecion. You have an opion to conigure this in the Switch Roles menu in Tools.
 

Studio Developer: This role will include all the features available for the IDE. You  
will be allowed to create applicaions using diferent technologies. You have the 
opion to choose the features to include in the Features menu in Tools. This is  
the commonly used role for ADF development.
 

Customizaion Developer: This role is more inclined towards customizaion 
for a user to edit the metadata in JDeveloper. This opion is used only for ADF 
customizaion and is outside the scope of this book.
 

Database Developer: This role will enable all the features needed for database 
development using JDeveloper.
 

Java Developer: This role will enable features that are best suited for Java 
developers. ADF-related features are not included in this role.
 

J2EE Developer: Web development using Java EE will be made easy if the user 
selects this role. All the components related to Java EE development are made 
available for the user, except ADF technologies.

Installing and Coniguring JDeveloper IDE
[ 18 ]
When JDeveloper IDE is started, the Tip of the Day popup will appear that will give some  
ips on using the IDE efecively.
To add your own ip, go to the following locaion:
MW_HOME\jdeveloper\jdev\doc\studio_doc\ohj\
tip.jar
Create an HTML ile called tip_11_0460.html (just increase 
the number, for example, tip_11_0470.html).
Create an image ile called tip_11_0470.gif in the images 
folder if you want to refer to this in your HTML ip.
Have your HTML ip registered in tip_map.smp as shown in 
the following code snippet:
<map>
<mapID target=”tip_11_0470_
html”url=”tip_11_0470.html”/> 
</map>
Have a go hero – explore the IDE
Now you are at a stage where you can explore the IDE and look for opions, as follows:
 

What are the new features that you see in JDeveloper IDE? Is the look and feel  
the same as your earlier development environment?
 

Open the enire menu and see the opions available in each menu.
Getting familiar with the IDE
JDeveloper is a perfect IDE for designing and delivering high-end web applicaions.  
To support complex designing and customizaion, the IDE provides various tools and  
menu opions to compete with the requirements of the applicaion developer. These 
compelling tools, which are shown in the following screenshot, are commonly used  
by developers in their day-to-day applicaion development:

Chapter 1
[ 19 ]
The Design and Source menus are toggled between the Design and Source views of the ile 
in the Editor window. History and Diagram menus are also displayed based on the acive 
view of the ile.
The toolbar for JDeveloper IDE is displayed just below the Menu secion, as shown in the 
following screenshot:
The highlighted tools are added as part of the External Tools opion in the Tools menu.  
The standout features of JDeveloper are:
 

Drag-and-drop: You can drag-and-drop the content between windows, panels,  
and secions.
 

Docking: Almost all the panels within the IDE are “dockable”. You can customize  
the locaion of the windows anywhere. Move the panel and drag it to dock the  
panel or window.
 

Floaing: Panels can be made loaing if the dockable opion is not preferred.
 

Minimize and Maximize: Panels and windows support minimize and maximize 
features. Right-click on the panel and select the opion as appropriate.
 

Keyboard access: You can navigate, select, and interact with the IDE using  
shortcut keys.
 

Searching: Search for the property in the property inspector, Resource palete, 
structure window, code editor, and so on.
 

Tabbed view: All the windows that open in the center of the IDE will have the 
tabbed view.
 

Spliing: All code editors support spliing of the documents verically and 
horizontally. Drag the horizontal spliter to the botom-right corner to split the 
document horizontally and the top-right corner to split it verically, as shown  
in the following screenshot:
 

Closing: The Editor window supports the Close, Close others, and Close all opions.
 

Ediing Tools: Editor tools are available in the Source and Design view for almost 
all the iles. Some common tools used are Code highlight, Bookmarks, Reformat, 
Surround, Block coloring, and so on.

Installing and Coniguring JDeveloper IDE
[ 20 ]
Setting the preferences
There are many coniguraions, as shown in the following list, related to the IDE that can be 
conigured using the Preferences menu in Tools:
 

Environment: This secion will allow the user to change the look and feel and  
theme of the page, give an opion to save the ile on exit, check for modiied  
iles, and so on. This secion has the following opions:
 

Dockable windows: This customizes how the docking behaves.
 

Local History: This enables local history for the files stored in the user 
directory.
 

Log: This enables logging and specifies where to save the logfile.  
Also, it customizes the size, lines, and color of the log file.
 

External Editor: A user can set a preference to open the iles in either the  
external editor or the applicaion. For example, PDF iles will be preferred  
to be opened in an Adobe applicaion.
 

File Types: This will let the user decide which extensions can be opened by 
JDeveloper and which editors are used to open the iles within JDeveloper.
Setting the Default Editor option to source view will increase 
the performance in opening up the files within JDeveloper.
 

Shortcut Keys: This is used to conigure the shortcut keys for diferent operaions 
within the IDE.
You can have external applicaions or tools conigured within your IDE using the External 
Tools menu in Tools.
Knowing the IDE components
JDeveloper IDE consists of dockable windows and components that will help in developing 
ADF applicaions eiciently. Users may take advantage of these windows to keep track of  
the changes made, switch between windows, idenify and modify paricular resources that 
are part of the applicaion.
Let us see some of the panels and components that are very useful for developing any  
ADF applicaion. Remember that some of these panels are acive only when you have  
an applicaion open in your workspace. When you open the JDeveloper IDE it will look  
like the following screenshot:

Chapter 1
[ 21 ]
Time for action – opening the sample application
1. Download the sample applicaion from http://www.packtpub.com  
(The EmpDirectoryApplication code downloadable with this book).
2. Click on the Open Applicaion opion and locate the  
EmpDirectoryApplication.jws ile.
3. You will now see that the applicaion is listed in the Applicaion Navigator window 
and the projects are listed for EmpDirectoryApplication.
What just happened?
We have opened an already exising ADF applicaion to get a feel of how the IDE components 
work together. Some of the components explained in the following secion would need an 
open applicaion.
Application Navigator
The applicaion-related arifacts are managed in a window called Applicaion Navigator.  
A user can create an applicaion and open exising applicaions. We will see how to create 
and open an applicaion in detail in the next chapter.
All open applicaions are available in the drop-down menu and the user can choose between 
diferent applicaions.
We can select the applicaion, and once the applicaion is selected, we can locate the project 
and navigate to the related project arifacts. The navigator will display a folder structure of 
the project that you are currently working on.
www.allitebooks.com

Installing and Coniguring JDeveloper IDE
[ 22 ]
The Applicaion menu will list out all the opions available to conigure an applicaion. The 
opions include creaing a new project, opening a project, closing the applicaion, securing 
the applicaion, applicaion properies, and so on, as shown in the following screenshot:
Have a go hero – exploring the Application menu
You are now going to explore the Applicaion menu by clicking on each of the  
opions available:
 

Try and ind what the diference is between the New Project and New opions
 

Try to ind some applicaion iles using the Menu opion provided
 

Idenify what Filter Applicaion means to you
 

Browse through the Applicaion properies opion and familiarize yourself with  
the opions available
The Projects pane will display some opions for coniguring the projects that are available  
for the current applicaion, as shown in the following screenshot:

Chapter 1
[ 23 ]
The opions on the previous ribbon bar are explained as follows:
 

Project properies: This icon will display the properies that can be conigured  
for the current project.
 

Refresh: This will refresh the current project for any ile changes.
 

Working sets: This will help you to ilter the current project or iles from other  
open projects. This will be really helpful if you have muliple projects for your 
applicaion and would like to work on only one project at a ime. Having less 
projects open will load the applicaion faster instead of when all the projects  
for the applicaion are open.
 

Navigator display opions: This will let the user display the structure of the  
project eiciently.
Have a go hero – exploring the projects pane
Now it's your turn to igure out the opions provided for the projects pane:
 

Open the Project Properies pane and check the available seings for the project. 
We will be using some of these properies in the coming chapters.
 

Add some iles outside JDeveloper in the Project folder, and click on the Refresh 
buton. Do you see the ile in JDeveloper?
 

Where have you seen the Manage Working Set opion available in the Working Sets 
menu before?
 

You are provided with Navigator Display opions for the projects. Try out diferent 
opions and look for changes.
Application Resources
The Applicaion Resources pane will list out all the common resources available for the 
applicaion. Connections and Descriptors are the two folders available in this panel  
that contain the resources.
 

Connections: This folder displays all the connecions available for the applicaion. 
It can be anything that gives a context of the connecion to the server or to the 
repository available for the applicaions.
 

Descriptors: This will list all the coniguraion iles and descriptors available for 
the applicaion. Common descriptors are adf-config.xml, connections.xml, 
cwallet.sso, jps-config.xml, and Weblogic-application.xml.

Installing and Coniguring JDeveloper IDE
[ 24 ]
Have a go hero – explore Application Resources
Now you will have to locate the applicaion resource iles outside the JDeveloper IDE and 
then note down the folder structure that you see. Do you see all the iles listed under the 
folder listed in Applicaion Resources? The missing iles are subsequently created when  
you add a database connecion or when you secure your applicaion.
Data Controls palette
The Data Controls pane palete will expose the available Data controls opions from the 
model layer to use in the UI layer. You can refresh the data controls or ilter out the data 
controls using the opions available.
The Data controls palete shown in the following screenshot will not be available in the 
EmpDirectoryApplication ile. This will be created automaically when you have the 
corresponding component created in the model project. Right now don't worry about that.
Recently Opened Files
The Recently Opened Files pane will list all the iles opened recently in the applicaion. This 
pane should not be confused with the Reopen opion in the File menu. If you have muliple 
applicaions in your workspace, this pane will display recent iles speciic to the applicaion.
Structure window
The Structure window, as shown in the following screenshot, will display the structure of the 
iles that the user currently has open. This window is mostly used to insert the components 
from data control to bind the values. You have an opion within the structure window to 
search for tags.

Chapter 1
[ 25 ]
Have a go hero – identify the structure of the ile
 

Double-click on the web.xml ile available in the ViewController project.  
Do you see any change in the Recently Opened Files window?
 

In the Structure window, what do you see?
 

Click on the Source tab of the web.xml ile and check the changes in the  
Structure window.
 

Click on the tag displayed in the Structure window. What do you see in the  
Source view?
Database Navigator
Database Navigator, as shown in the following screenshot, will display the connecion 
informaion available for all the applicaions in the IDE. The Database Navigator plugin  
is a fully funcional plugin for a SQL developer. This plugin is not displayed by default,  
and you can open this from the Database submenu in View.

Installing and Coniguring JDeveloper IDE
[ 26 ]
The Resource palette
The Resource palete window will allow the user to create IDE resources and assets. Click on 
the View menu to display this palete.
There are two types of resources that can be created from the Resource palete. They are 
Catalogs and Connecions.
 

Catalogs: These are user-deined assets from diferent repositories used for  
easy access.
 

Connecions: These are the contexts for the applicaion or IDE added to diferent 
repositories or servers.
 

My Catalogs: This will list all the user-deined resources added as a catalog.  
For example, if you have a ilesystem connecion, the catalog can store the  
images or contents from the ilesystem as a user-deined catalog.
Time for action – creating a catalog
1. Click on the folder icon in the Resource palete.
2. Select the New Catalog opion from the drop-down menu.
3. Provide the name catalog in the Name box.
4. Click on OK to see the new catalog listed in the My Catalog secion.
5. To add a resource to the catalog, you will have to right-click on the resources  
that are listed in the IDE connecions menu. You can add resources from a  
ilesystem connecion that is mapped to any of your preferred folders.
6. Select the Add to Catalog opion from the menu.
7. Select the catalog that you have created from the opion.
8. Click on OK to add the resource to the catalog.
9. Now the resource will be added to the catalog.

Chapter 1
[ 27 ]
What just happened?
We have now created a catalog for our IDE for the frequent use of resources. Resources 
added to the catalog are available for the IDE, and we can make use of these resources  
in diferent applicaions and projects.
IDE Connecions will have all the connecions that are added for the paricular IDE. We can 
use the connecions from this window and add them to a paricular project by dragging-and-
dropping them onto the project displayed in the Database Navigator plugin.
The Component palette
The Component palete will display all the available components that can be added to the UI 
page. This palete is categorized with diferent components based on the technology available 
for the current project. Within each technology available for the project, components are 
further classiied based on behavior. There is an opion to search for the component using the 
search box available at the top of the palete.
Diferent components are available for diferent iles. For example, the ADF Faces components 
are displayed if you have the index.jspx ile as your current open ile from a project that 
supports ADF technology.

Installing and Coniguring JDeveloper IDE
[ 28 ]
Have a go hero – components available for IDE
Now it's ime for you to explore diferent components available for diferent technologies. 
Use the EmpDirectoryApplication ile for your analysis. Perform the following to check 
for the components available for the IDE:
 

What are the components listed in the palete for web.xml?
 

Open trinidad-config.xml and check if it's lising the same components  
as in web.xml.
Run Manager
Run Manager will display all the current running processes and give an opion to terminate 
whenever needed. This is not shown by default and can be enabled from the View menu.
The Log window
The Log window will display log messages related to the projects. There are other tabs 
embedded within the Log window to categorize the logs that are generated, as follows:
 

IntegratedWeblogicServer: This displays the log informaion of the integrated 
WebLogic server. This Log window is helpful in idenifying applicaion errors during 
runime. It will display the log informaion while staring and stopping the server.
 

Messages: This tab displays the compilaion logs.
 

Extensions: This tab will display logs related to the installed IDE extensions.
 

Compiler: This tab will display the warnings and errors that occurred while the 
project was being compiled.
Code editor
You will use the code editor secion to write the code. The Java code ile can be opened 
in the editor by double-clicking on the Applicaion Navigator window. There are diferent 
opions available within the code editor that will be helpful to run the code eiciently.
Code editor views
 

Design: Files with extension such as .jsff or .jspx which represent a  
UI page will have a Design mode added to design the pages.
 

Source: The Source tab is added for all the iles where a user can change  
the content using the code editor.

Chapter 1
[ 29 ]
 

Bindings: This secion will help the user interact with the data bindings bounded to 
the UI components. The page-definition ile will hold the binding informaion, 
and it is shown in this view.
 

Preview: This will help to preview the page designed and imitate the components 
rendered at runime.
 

History: This view is common for all iles, and the local history of the ile changes  
is tracked in this view.
Property Inspector
The Property Inspector pane will help to alter the property of the currently selected 
component or tag in the Design or Source mode of a page.
All the previously explained windows and panels are available in the View menu.
Have a go hero – code editor and Property Inspector
Now it's ime for you to check the usage of the code editor and the Property Inspector pane 
as follows:
 

Open the adfc-config.xml ile and check how many views are available. Check 
the Overview tab and see the opions to conigure the properies declaraively.
 

Open the Source tab and select any of the tags to see the changes in the Property 
Inspector window.
Pop quiz
Q1. Which role will enable all the features of the IDE?
1. Database developer
2. Java developer
3. Studio developer

Installing and Coniguring JDeveloper IDE
[ 30 ]
Q2. Which IDE component is used to drag the model data and drop it on the UI page?
1. Applicaion Navigator
2. The Data Controls palete
3. The Resource palete
Q3. IDE connecions are created only for an applicaion in JDeveloper.
1. True
2. False
Q4. _________ and _________ are the two folders displayed in the Applicaion Resources  
panel of the IDE.
Q5. Which of the following features are supported in JDeveloper?
1. Drag-and-drop
2. Docking
3. Floaing
4. Searching
5. All of the above
Summary
Let us recap what we have learned in this chapter. We started our chapter by downloading 
and installing JDeveloper 11gR2. Then we learnt about some important coniguraion iles  
for JDeveloper IDE. Later we discussed some of the roles to customize the IDE for diferent 
users. We also gained some knowledge about the components within the environment.
We got a chance to familiarize ourselves with common tasks, such as docking the panels, 
searching within the panels, and closing the iles and windows. Finally, we learnt where  
to set preferences and some common user preferences for the IDE.
In the next chapter, we will learn more about the architecture of the ADF framework and 
how to create and run a sample ADF applicaion.

2
Getting Started with ADF
Application Development Framework (ADF) is a JEE development framework 
that helps a developer to minimize the effort required for developing robust 
applications for web, desktop, and mobile devices. With the help of ADF's 
declarative approach, a developer can visualize the data model and proceed 
with the development of an application rapidly instead of spending time on 
writing the code.
The benefits you get from using ADF include a rich user interface, components 
usage, task flow support, declarative development, drag-and-drop binding,  
a productive environment, security, and customization.
Applicaion Development Framework (ADF) is based on the Model-View-Controller (MVC) 
architecture and exposes its data model as a business service. The ADF model abstracts 
the business service layer through metadata, thereby providing a consistent set of APIs for 
developers to work with, independent of the business service implementaion technology.
In this chapter, we will cover the following topics:
 

Understanding MVC
 

The components of ADF
 

Creaing a simple ADF applicaion in JDeveloper
 

Building and running an ADF applicaion
www.allitebooks.com

Geing Started with ADF
[ 32 ]
Model-View-Controller
Model-View-Controller is a popular architecture for applicaion development, that separates 
business logic from client and control low logic. The core components of this patern are  
as follows:
 

Model: This layer directs the data layer to respond to requests passed from the  
UI layer. The model layer contains the core business logic of the applicaion.
 

View: In this layer, the user interacts with the applicaion and requests data to 
be fetched. The acions performed in the UI layer by the user will command the 
controller to request data from the model layer.
 

Controller: This layer controls the UI low and oten gets involved in the navigaion 
from one page to another. The controller is also responsible for direcing the 
requested data from the UI to the model layer.
The following diagram explains the Model-View-Controller architecture:
View
Controller
Model
DB
XML
WS
The data service layer can be anything from which the model layer gets the data. This can be 
obtained using relaional data, XML data services, legacy applicaions, or through web services.
Enterprise JavaBeans (EJB) serves as the model layer, 
servlet as the controller, and JSP as the view layer in a 
typical JEE applicaion.

Chapter 2
[ 33 ]
How ADF implements MVC
Oracle ADF extends the MVC architecture by introducing a generic binding layer as the model. 
In Oracle ADF, the architecture you use to build Java EE applicaions is comprised of the view 
layer (typically represented by ADF Faces), the controller layer (ADF controller), the model 
layer (represented by ADF data controls and page data bindings), and the business service layer 
(oten ADF Business Components though EJB, web services, POJOs, and more are possible).
Following are the ADF components:
 

ADF Business Components: A business service based on a relaional database  
table schema that, before persising user data entries, enforces business logic  
and validaion rules.
 

ADF Model: This data binding layer is an abstracion layer that facilitates access 
to data from underlying business service layers. This layer acts as an interface 
that exposes the services available from the business service layers to the UI 
components. This helps the declaraive binding of the UI components with the 
exposed services.
 

ADF Task lows: The ADF controller extends the JSF navigaion handler for page 
navigaion and UI component event handling. ADF Task low is a concept of the  
ADF controller, that allows you to build reusable navigaion units that you can  
use standalone or chain up to an overall applicaion low.
 

ADF Faces: This is a JSF-based and Ajax-enabled component set, that provides a  
rich set of user interface components for building the applicaion's user interface.
The following diagram shows how ADF implements MVC: 
View
Controller
Model
DB
XML
WS
ADF Business Components
ADF Model
ADF Faces
ADF Task Flow

Geing Started with ADF
[ 34 ]
The ADF architecture
ADF is designed to simplify the development of web applicaions, desktop applicaions  
(MS Oice), and mobile applicaions. It is focused on giving a visual and declaraive approach 
to building applicaions based on the common MVC patern. This architecture is targeted at 
providing a service-based, loosely coupled soluion with the following ive layers:
 

Business Service: This layer is responsible for handling the interacions between the 
database and the model layer by providing database persistence, object/relaional 
mapping, managing transacions, and so on. Business logic is also taken care of in 
this layer. ADF Business Components are the irst choice to develop the business 
service layer apart from Java, EJB, and web services.
 

Model: This layer is on top of the business service layer and abstracts the business 
services exposed to the view layer. The Data Controls palete acts as an interface 
between the view and the business services layers. Data bindings map the exposed 
services to the UI components. The data control and data binding approaches are 
collecively represented as ADF Model based on JSR 227 (Java Speciicaion Request).
 

Controller: The navigaion from one page to another is handled in this layer using 
the ADF task low. Its reusability along with parameter passing, a single point of 
entry, and allowing re-entry are the highlights of using the ADF task low. The other 
technology choice in this layer can be JSF Struts.
 

View: This is the actual presentaion layer facing the user directly and passing the 
inputs to the controller layer for processing. ADF Faces is used for this purpose. 
ADF Faces uses more than 150 rich components to support the development of 
compeing web user interfaces. ADF Faces is based on JSF, which allows JSF as the 
second choice for UI development. ADF Desktop Integraion will also act as a view 
layer for standalone applicaions.
 

Metadata services: Customizaion and personalizaion of the applicaion is done 
using the metadata services framework that uses metadata to store and retain user 
session informaion. This is not an architectural layer but an addiional service layer 
on top of the controller and the model layers.
The following diagram shows how ADF layers it into the Model-View-Controller architecture:

Chapter 2
[ 35 ]
ADF Bindings
Struts
ADF Task Flows
DB
Java
Web Services
EJB
ADF BC
XML
WS
JSF
ADF Faces
JSP
Browser Based Application
Desktop Application
ADF Swing
ADF DI
M
D
S
View
Controller
Model
Data
Services
Business
Services
Creating a simple application in ADF
Till  now we have been focusing on the architecture; now let us see how ADF development  
is carried out in a typical web applicaion development environment.
ADF development practice
ADF web applicaion development is classiied into two secions—the Business Service 
development and the UI development. Both these secions can be developed independently, 
but the development of either of the secions is followed by the development of the other.
The following is a brief descripion of the two secions:
 

Business Service development: This secion includes the development of  
objects in the business service layer, which sits on top of the data source.  
Most of the development is declaraive to help the developer concentrate  
more on the business logic.
 

UI development: The development of UI pages along with task low creaion  
for reusability comprises the UI phase. The UI development makes use of rich  
UI components to create a modern, atracive user interface. The designing of  
the page involves a drag-and-drop approach for adding and customizing the  
components using the property inspector.

Geing Started with ADF
[ 36 ]
The development stage is further classiied into the following two approaches:
 

Top-down: The development of a UI page is done irst, followed by the building of 
business services. Placeholder data control is used to mock up the business service to 
simulate enterprise data queries. This approach is mostly used for proof-of-concept 
studies in which the applicaion's design and low are more important than the actual 
business data.
 

Botom-up: The development of the business service is followed by the designing  
of UI pages and task lows.
Sample application – employee directory application
It's easy to build a simple applicaion using the HR schema that is shipped with Oracle XE 
Database. The requirements for building the applicaion are as follows:
 

JDeveloper 11.1.2.3.0 Studio Ediion: This is required to develop the ADF web 
applicaion; we have installed this on Windows as a part of Chapter 1, Installing  
and Coniguring JDeveloper IDE.
 

Oracle Database Express Ediion or any other Oracle DB: This is required for the 
HRSchema setup for our sample applicaion.
Oracle Database 10g Express Ediion is used at the ime of wriing the book. 
It's the user's choice to use either the 10g or 11g version. You may refer to 
the following links:
 

Download: http://www.oracle.com/technetwork/
products/express-edition/downloads/index.html
 

Documentation http://docs.oracle.com/cd/
E17781_01/index.htm
The high-level development processes for the employee directory applicaion included in  
this secion are as follows:
1. Create the applicaion workspace: Create a new applicaion and set up the 
workspace for developing with ADF.
2. Model database objects: Set up the HRSchema database objects for the applicaion.
3. Create business components: Create ADF Business Components corresponding to 
the DB objects.
4. Create the UI page: Use the UI components to represent the data on the page.
5. Bind the data to the UI components: Bind the exposed service to the UI 
components through the data control and bindings.

Chapter 2
[ 37 ]
6. Run the applicaion: Deploy and verify the applicaion.
Time for action – creating the application workspace
We have come to the point where we will start creaing the ADF applicaion. We will now get 
into the step-by-step pracice directly, by following these steps:
1. With JDeveloper open, click on the New Applicaion opion available in the 
Applicaion Navigator panel. This will open a New Gallery window in which  
you can create a new applicaion.
2. Select the Fusion web Applicaion (ADF) opion from General | Applicaions 
Category. This will open a Create New Fusion Web Applicaion (ADF) wizard.
3. Type in the values for the Applicaion Name, Directory (locaion for the applicaion), 
and Applicaion Package Preix ields. You can browse for the applicaion locaion. 
The package preix is the root package that will be applied for the applicaion.
For example, type the package name as com.empdirectory.model. The package 
structure for the project is visible in the Applicaion Navigator panel; this holds all 
the project arifacts, such as Java classes or ADF metadata iles.
4. In the next screen, you will have to provide the model project name and the 
directory locaion for the project. ADF Business Components and Java are the 
technology highlights of this project; these are usually defaulted to by JDeveloper.
5. The default Java seings for the Model project are conigured in the next screen. 
The Default Package, Java Source Path, and Output Directory opions are 
conigured in this screen.
6. The next screen will help you to conigure the UI project. This project includes  
ADF Faces, ADF Page Flow, JSF, and other UI technologies as highlights.
7. Click Finish ater coniguring the Java seings for the UI project.
What just happened?
You will have the applicaion added to the applicaion navigator with the help of following 
two projects:
 

One is the Model project that involves the ADF Business Components as the  
primary technology. This creates the business service for our applicaion.
 

Another one is the ViewController project that involves both the view and  
the controller layer. 

Geing Started with ADF
[ 38 ]
The view layer is developed using the ADF Faces technology. The controller layer is 
developed using ADF PageFlow; this is the logical name in JDeveloper for all libraries 
required by a project that intend to use the ADF controller and task low features.
Applicaion iles will have a .jws extension whereas project 
iles will have a .jpr extension.
The Applicaion Overview page will be displayed in the center, and it will guide us with the 
steps required to create an applicaion. The overview screen will have the following opions:
 

Checklist: This opion helps to track the progress of our applicaion development.
 

Java Files: This opion is used to add any Java iles to the project. It can be any 
helper class or uility class that you want to add to your project.
 

Page Flows: Iniially you will have the following two coniguraion iles available:
 

faces-config.xml: Any configurations related to JSF go in this file.  
Some of the ADF-related configurations are also added in this file.
 

adfc-config.xml: This file will hold the ADF configurations.
 

Managed Beans: The Bean class that is added to the ViewController project is 
displayed here. These are JavaBeans that are managed by the ADF controller.
 

Web Tier: This will list all the iles, such as .javascript, .css, .jsp, .html, and 
.jsf that are used in the view layer.
 

Business Components: This opion lists all the components, such as Enity, View, 
Associaions, View Link, Applicaion Module.
 

Binding Files: The data controls available for the projects are displayed in this 
secion.
 

Oline Database: If you have any oline database objects created for the project, 
those iles will be listed in this secion.
The Model project is empty and the ViewController project will have the WEB-INF folder 
populated with the following XML iles:
 

adfc-config.xml
 

faces-config.xml
 

trinidad-config.xml
 

web.xml

Chapter 2
[ 39 ]
Have a go hero – analyze the application directory
Now the sample applicaion in the JDeveloper has been created. It's ime for you to analyze 
all the new changes that you are seeing in the IDE. Look for all the opions and just familiarize 
yourself with the applicaion arifacts. Once you are done with your research, answer the 
following quesions:
1. What is the extension for the sample applicaion that you have created in this secion?
2. Which ile has the .jpr extension?
3. What is the folder structure of the applicaion from the root folder?
The overview can be opened by right-clicking on the 
application from the Application Navigator panel and 
selecting Show Overview.
Planning your application
You should always plan the applicaion before opening JDeveloper so you know what you 
want to build. This, however, requires experience with the concept of ADF.
Proper planning before staring the project is necessary for smooth development of the 
components and exposing the services to the UI without any hiccups.
Our high-level goal is to achieve the following:
 

Create business services for the Employee and Department objects.
 

Expose the components through the data controls.
 

Manage the Employee and Department informaion from a page.
Connect to a database
Ater planning your applicaion, the next step is to connect to the database. The following 
steps show how to do this:
1. Click on the Create a Database Connecion buton from Show Overview in the 
Applicaion menu.
2. The Create a Database Connecion wizard opens. You have the following two 
opions to create the connecion:
 

Application resources: This connection will be created only for the  
current application.

Geing Started with ADF
[ 40 ]
 

IDE Connections: This option will make sure that you are creating 
the connection for the complete IDE, which is shared across multiple 
applications.
3. Enter the value of Connecion name as HRSchema, the username value as hr, and 
the password value (this will be provided during the installaion of Oracle XE 11g 
Express Ediion) to connect to the Oracle XE 11g Express Ediion installed on your 
machine.
4. Enter the value of Host name as localhost as you are running the DB locally; the 
value of SID will be XE, and that of JDBC port will be 1521. These are all default 
seings for the XE database.
5. Click the Test the connecion buton and make sure that you are seeing the  
Success! message.
6. Click the OK buton to create the connecion.
7. Once you have created the connecion, you will see the connecion added to  
the IDE Connecions panel as shown in the following screenshot:
The connecion informaion will be stored in the connections.
xml ile for the applicaion. For the IDE connecion, you will have 
the informaion stored in your $USER_DIR/o.jdeveloper.
rescat2.model/connections/connections.xml ile.

Chapter 2
[ 41 ]
Time for action – setting up the database tables
In order to create the Employee and Department tables for HRSchema, you will have to 
download the sample script (Demobld.sql) from http://www.oracle-database-
tips.com/demobld.html.
1. In order to run this script, right-click on the HRSchema opion from the IDE 
Connecions panel and select Open in Database Navigator as shown in the  
following screenshot:
2. This will open the connecion in the Database Navigator panel, and open an SQL 
worksheet for you.
3. Copy and paste the SQL statements from Demobld.sql to the worksheet.
4. Click on the Run Script opion available for the worksheet or press F5.
What just happened?
The demobld.sql script will create the following tables in the HRSchema database:  
 EMP, DEPT, BONUS, SALGRADE, and DUMMY.
These tables can be located from the Tables secion in HRSchema.
Other tables that you see in HRSchema are the tables that 
get created as part of Oracle XE Express Ediion.
Time for action – creating a database connection
To create a connecion for the applicaion, you may follow these steps:
1. Create the connecion for Applicaion Resources as per the previous steps.
2. Click on the + (plus) sign to create a new connecion.
www.allitebooks.com

Geing Started with ADF
[ 42 ]
3. Right-click on EmpDirectoryApplicaion and select New Connecion.
4. Right-click on HRSchema and select Add to Applicaion.
5. Drag HRSchema from IDE Connecions and drop it on EmpDirectoryApplicaion  
in the Database Navigator panel.
Have a go hero – run some queries
You have all the required tables created in your database. Now it is ime to do some pracical 
exercises to fetch the data. You should use the SQL worksheet to write the query and execute 
it accordingly. The following are some exercises to fetch the data:
1. Display all the records in the EMP and DEPT tables
2. Display the name of department number 10
3. Display all the employees having a salary of less than 1000
4. Display all the employees in the sales department
Build business services
The next step is to create business components.
You will have to click on Go to Substeps to list the sub steps involved in creaing the business 
components.
Before staring with the creaion of the business components, we will iniialize our Model 
project. The Project Properies dialog is accessed by right-clicking on the Model project and 
selecing the Project Properies menu opion.
Accessing the project properties
There are two ways to get access to the Project Properies dialog; they are as follows:
1. Select the Model project and click on the Project Properies icon in the Projects panel.
2. Right-click on the Model project and select the Project Properies opion from the 
menu as shown in the following screenshot:

Chapter 2
[ 43 ]
The Project Properies dialog will show a list of properies related to the project  
that you need to conigure.
3. Click on ADF Business Components and select Iniialize Project for Business 
Components. Usually when the business components are created, you will be  
asked to select the database connecion that will iniialize the business components. 
Selecing this opion will skip the Iniialize Project for Business Components dialog.
4. Click on the OK buton. This will enable the DB connecion for the Model project.
This action will create a .jpx file in the Model project 
that will have the reference to the connection and other 
library import references.
Time for action – creating the business components
Let us now create the business components using the following steps:
1. To create a new component, go to File | New; this can also be done by right-clicking 
on the Model project, the directory, or the folder, and selecing New.
2. In the Business Tier secion, select ADF Business Components.

Geing Started with ADF
[ 44 ]
3. A Create Business Components from Tables wizard will open up for you; select the 
Enity Objects opion.
An entity object is a representation of a single row of the table. 
It is the metadata mapping of a single object in the data source 
table. We represent the EMP table as an entity object in ADF for 
the easy mapping of columns and business logic.
4. Enter the package for your enity object as com.empdirectory.model.entity 
and select HRSchema for your data source. You have an opion to restrict the ilter 
by table, view, synonym, and others.
5. In the Name ilter, enter EMP% so that the ilter is applied to query the data source. 
Click on Query to search for the ilter in the database. Select the Auto Query opion 
to query when you type the ilter.
6. Shutle the EMP table to the selected list to create the enity object. Enter the name 
of the enity object as EmpEO. The enity object will represent the row in the EMP 
table. We will create the enity object to work with the database objects.
7. Click Next > to create a view object based on the enity object.

Chapter 2
[ 45 ]
A view object is the component used to collect data from the 
data source. It is the mechanism used to retrieve data from the 
entity object.
We retrieve the Employee information using the view object 
that is based on the entity object, that we have created in the 
previous section.
8. Name the package as com.empdirectory.model.view.
9. Move the available enity object to the Selected: list.
10. Enter the name as EmpVO as shown in the following screenshot:
11. The next secion will help you to create a query-based view object. The view object 
can be based on an SQL query that will be used to display the read-only informaion 
of the table. View objects without the enity object are read-only and don't update 
the table. In this example, we don't have any query-based object, so we will skip this 
secion this ime.
12. We will create the applicaion module in the next secion.
The application module is the component that corresponds 
to a particular task, such as updating and creating a record. It 
manages the data source transaction that is used to accomplish 
a specific task. The application module uses the Employee 
view object to complete the task of creating, updating, and 
deleting a record in the Employee table.

Geing Started with ADF
[ 46 ]
13. Enter the applicaion module package as com.empdirectory.model.am and 
name it as EmpDirectoryModule.
14. The Add to Applicaion Module checkbox is checked to add the view object to  
the applicaion module.
15. Click Next > to create a business component diagram for the components that are 
created. The diagram is helpful in visualizing the relaionship between the business 
components. We can create new eniies and view objects from the business 
component diagram. This is added only for reference and is not used further in  
the book.
16. Check the Add to Business Components Diagram checkbox to add EmpEO, EmpVO, 
and EmpDirectoryModule to the diagram.
17. Type the package name as com.empdirectory.model.diagram and the name  
of the diagram as EmployeeDirectoryDiagram.
18. Select the default selecion to include enity objects, view objects, and the 
applicaion module.
19. Click on the Next > buton to check for the summary, and click on the Finish buton 
to create the components.
What just happened?
Since ADF is a metadata-driven framework, most of the components created will be 
represented as a .xml ile.
We have created the basic business components for our sample applicaion. They are  
as follows:
 

EmpEO.xml: This is an enity object that will represent the EMP table in HRSchema.
Click on the EMPEO.xml ile to open the .xml ile. In the Atributes secion, you will 
ind all the column informaion for the EMP table.

Chapter 2
[ 47 ]
 

EmpVO.xml: This is a view object based on EmpEO that is used to manipulate the 
Employee table through the enity object.
The EmpVO.xml ile will have the data that was retrieved from the data source  
using the SQL query. The query secion will display the query for the view object  
as shown in the following screenshot:
 

EmpDirectoryModule.xml: This is the applicaion module that we have created 
through the view object to accomplish the create, update, and remove operaions 
for a record in the Employee table.
The Data Model secion of the EmpDirectoryModule.xml ile will show the usage 
of the EmpVO view object.
The bc4j.xcfg file will have the metadata information about the 
database connection used by the application module. This file also 
defines the runtime parameters configured for the application module.

Geing Started with ADF
[ 48 ]
 

EmployeeDirectoryDiagram.adfc_diagram: This is the component diagram 
that will show the relaionship between the components:
We have seen all the basic components that are used for developing the ADF business 
components. A detailed descripion of each and every component will be discussed in  
the later chapters.
The next step is to run the applicaion module using the AM tester to check if everything  
is working ine.
An applicaion module is abbreviated as AM and the BC4j tester 
is commonly called the AM tester.
Have a go hero – open and analyze the business components
Now that you have your business components created from the previous steps, look closely 
and try to understand the iles generated for the business components.
Answer the following quesions to analyze the business components:
 

What are the common features that you see between the EO and VO XML iles?
 

What opions do you see when you open the Model.jpx ile?
 

How does the DeptVO.xml ile refer to the DeptEO object in the ile?

Chapter 2
[ 49 ]
Running the AM tester
To test the data model created, we have a client applicaion called the AM tester.  
This applicaion provides a handle to check the business logic quickly without creaing  
the UI pages.
The AM tester is a client applicaion used to interact with the 
data model, validate the business logic, and do some of the CRUD 
(Create- Read- Update- Delete) operaions.
Right-clicking on the EmpDirectoryModule.xml ile and clicking on Run will run the  
AM tester.
The AM tester will open with two panes. The let-hand pane will list the enire view object 
available for the applicaion module.
When you click on the view object, a form is displayed in the right-hand pane where the  
user is allowed to interact with the data model. We can use the AM tester to do the 
following acions:
 

Traverse the record: Move to the irst record, move to the last record, and the next 
and previous records
 

Add: Create a new record for the data source, in our case for the EMP table
 

Remove: Remove the current record from the EMP table
 

Commit: Commit the changes to the database
 

Rollback: Revert the changes if the data is not commited to the database
 

Find: Query a paricular record from the table
 

Validate: Validate the record and check for business logic

Geing Started with ADF
[ 50 ]
Exposing data to the UI layer
When you create the applicaion module, the data control is automaically exposed in the Data 
Controls panel for the UI component to use the service in a declaraive way. The Data Controls 
panel will expose all the available data controls in the IDE, and it will expose the service to the 
UI layer. This panel is refreshed every ime to show the newly created data sources.
Declaraive data binding helps to map the UI components to the underlying data.
The Data Controls panel will expose the following controls:
 

The view object
 

The view object atributes
 

The view object operaions

Chapter 2
[ 51 ]
 

The view object criteria
 

The applicaion module operaions
Time for action – bind data to the UI components
We will set the third and fourth step in the applicaion overview checklist as in progress, as 
part of this exercise. We will see these steps in detail in Chapter 3, Understanding the Model 
Layer and Chapter 7, Working with Navigaion Flows.
We will skip secion 5.1 from the Show Overview page detailing Design Pages, and revisit 
this in the later chapters.
To expose the data to the UI layer, you need to create a page where you will bind the data 
from the data control that is exposed from the model layer.
1. In the Create Page secion, click on Create JSF Page. This will open a Select a Project 
for Acion pop-up window, that will ask you to select the project where you want to 
create the page. Click on OK to proceed.
2. The Create JSF Page pop-up window opens up to create the page.
3. Provide the name of the ile as index.jspx.
4. The directory is defaulted to the public_html folder in your ViewController 
project directory—this is the place where you store all the pages. You have an 
opion to select a diferent directory by clicking the magnifying glass icon.
5. The next step is to select the Document Type opion as JSP XML to create a .jspx 
ile. Facelets will have a .jsf extension.
www.allitebooks.com

Geing Started with ADF
[ 52 ]
6. Select the page layout as Blank Page. You can select a diferent page template or 
create your own template as needed.
7. Click on the OK buton to create the index.jspx page. This creates a page for  
our UI layer. This will be of the .jspx extension, with only the root tag.
This page will contain the basic tags and elements that are used to display a blank 
page on the website. We will include these components in this page to add more 
dynamic content to the page.
8. Refresh the data controls using the Refresh buton in the Data Controls panel.  
Filter out EmpDirectoryModuleDataControl using the ilter opion from  
the Data Controls panel and open the data controls.
9. You will have a view object listed; drag this view object and drop it onto the  
Design view of the page.

Chapter 2
[ 53 ]
10. Select Table and then select ADF Table as shown in the following screenshot:
11. A pop-up window will be displayed to select the display behavior of the content. 
You can choose it to be displayed in ADF Table in a grid-like layout with rows and 
columns, and the user can edit the data in it.
The ADF Read-only Table opion will have a read-only table displayed and will  
not allow the user to edit the content. The other two opions displayed will be 
explained later.
12. The Edit Table Columns page will let you choose from the opions available to 
customize the table displayed in the UI page as follows:
 

The row selection can be single or multiple rows
 

The sorting and filtering in the table can be selected
 

You can add and delete columns, and customize the components to  
display the desired column data

Geing Started with ADF
[ 54 ]
 

The Value Binding section will display the binding of the data layer to  
the UI components
13. Click on the OK buton to accept the seings and to create the table for your page, 
which will bind the UI component to the underlying model data.
What just happened?
You will have the following setup in the Design View pane of the index.jspx page.  
In the source view, you will have some of the tags that correspond to the table view  
and the components will have the value bindings for the atributes represening the 
underlying data, as shown in the following screenshot:

Chapter 2
[ 55 ]
Each page will have a corresponding page deiniion ile that will hold the bindings menioned 
in your page. In this case, we will have the indexPageDef.xml ile created for the index.
jspx ile. This is because we have an ADF binding for the UI components deined in our 
index.jspx page as shown in the following screenshot:
When we use the Data Control panel for the irst ime, a control palete XML ile named 
DataBindings.cpx is created to deine the binding context for the enire applicaion.  
This ile will have the following references:
 

Reference to the page deiniion ile used for each page in the enire applicaion

Geing Started with ADF
[ 56 ]
 

Reference to the data control from which the binding objects are created at runime
The adfm.xml file will hold the reference to the DataBindings.
cpx file. Apart from this, the file will also hold a reference to the 
.dcx,.xcfg, and .jpx files. This file is located in the adfmsrc/
META-INF folder of your project.
Have a go hero – analyze the artifacts
Since you have your UI-related arifacts, it is ime for you to do some exercises based on the 
previous acion.
1. List down all the arifacts created as part of the acion.
2. Learn how the index.jspx page and the corresponding page deiniion ile  
are mapped to render the data
3. Try to understand the components and the properies that were added to the 
index.jspx ile.

Chapter 2
[ 57 ]
Time for action – running the application
Let us see how to run the ADF applicaion using the following steps:
1. To run the page, we will have to right-click on the index.jspx page and select the 
Run opion.
2. The page that we have created will be displayed in the default browser as shown 
here in the following URL:
http://127.0.0.1:7101/EmpDirectoryApplication-ViewController-
context-root/faces/index.jspx
EmpDirectoryApplicaion-viewcontroller-
context-root is the context root for the application. 
This can be changed from Project Properties and Java EE 
application of the ViewController project. Java EE 
web context root will hold the context root for the project.
3. Verify the contents of the page. It will display the content of the EMP table in a  
grid layout with all the informaion bound to the UI components. The layout of  
the page will be ugly with a lot of spaces and will have a horizontal scroll bar.  
This will be ixed in the Chapter 6, Displaying the Data.
What just happened?
The integrated WebLogic server will be started when you run the index.jspx page. If it is the 
irst ime a user starts WebLogic, the user will be asked to provide an administrator username-
password pair. You can also set the server to listen to a single host such as localhost. You will 
see the console log of the server in the log window. You will see the highlighted statement in 
the console when the server is started.
The deployment of the applicaion follows immediately ater the server is started.  
The applicaion is deployed as a WAR ile, and the user is provided with a target URL  
to access the page.
The web applicaion module and enterprise applicaion module are 
writen to the $USER_DIR/o.j2ee/drs folder. In Windows, 
$USER_DIR will be in C:\Users\{username}\ AppData\
Roaming\Jdeveloper\ system11.1.2.3.39.62.76.1.

Geing Started with ADF
[ 58 ]
Now let us see what happens behind the browser when the URL is accessed:
 

When the irst request for the ADF page occurs, the applicaion invokes both the 
ADF life cycles; they are a superset of the JSF life cycle. The JSF lifecycle will be 
responsible for request processing using the FacesServlet servlet. This servlet 
will ilter the request that comes ater the /faces/ secion of the URL.
 

This servlet is responsible for registering ADFBindingFilter deined in the web.
xml ile. The ilter will irst look for the binding context in the HTTP session. If it's  
not available, the binding context is created in the session.
 

The binding context will then look for the indexPageDef.xml ile that is  
associated with the index.jspx page. This page deiniion ile can be found  
in the DataBindings.cpx ile, which has already been loaded by adfm.xml.
 

The binding container is created for the page deiniion ile and the #{bindings} 
EL expression is also resolved to access the created binding container.
 

The page then gets the data available in the binding container using the bindings.

Chapter 2
[ 59 ]
Have a go hero – ind out where the application is running from
Now that we have our applicaion running, it is fun to see the underlying data displayed  
in a browser. However, have you ever wondered how and from where these iles are being 
displayed? Find the answers to the following quesions to determine where the applicaion  
is running from:
1. Can you ind the locaion from where the applicaion is running?
2. Which are the components that get deployed along with the index.jspx page?
3. What diference do you see between the adfc-config.xml, faces-config.xml, 
and web.xml iles?
Pop quiz
Q1. Which of the following layers is not included in the MVC architecture?
1. Model
2. Controller
3. Business
4. View
Q2. ___________ and ___________ are the two ADF development stages that can be 
performed independently of each other.
Q3. To work with the database in JDeveloper, you will irst have to create a…
1. Catalog
2. Resource
3. Connecion
4. File
Q4. An enity object is a representaion of a row in a table.
1. True
2. False

Geing Started with ADF
[ 60 ]
Q5. The business services from the model layer are exposed to the UI layer with the  
help of _________________.
1. Applicaion Module
2. View Object
3. Data control
4. Binding
Summary
Let us recap what we have learned in this chapter. We started by learning about the  
Model-View-Controller architecture and understood how ADF implements this architecture. 
We understood the building blocks of the ADF architecture: ADF Model, ADF Controller,  
and ADF Faces.
We started by creaing a simple ADF applicaion with an enity object, view object, and 
applicaion module in the Model project. We veriied the applicaion module using the  
BC4j tester.
Ater that, we started creaing the UI page in the ViewController project. We bound  
the data to the UI components and displayed the informaion in a table. Finally, we ran  
and veriied the applicaion.
In the next chapter, we will learn more about the business components involved with 
developing the sample applicaion.

3
Understanding the Model Layer
In the previous chapter, we had an overview of the framework in action. We 
created a sample application using the ADF components and ran it successfully. 
Isn't it easy to develop a complete application in this way? The answer is most 
probably yes, because we hardly wrote any code and yet we had a complete, 
working web application.
So what's next? We will dig deeper into the ADF business components to  
know more about the capabilities of the framework in the real world. ADF 
business components will help the developers to reduce the time taken to  
build objects for communicating with the database and manipulating the 
records. These components are also responsible for maintaining and  
managing the transactions efficiently.
In this chapter, we will learn the following:
 

About diferent business components
 

How these components are interrelated
 

How the components work
 

Opions available in each of the components
ADF business components
In the previous chapter, we created a set of components in the model layer to expose 
the business service to the UI Layer. The business components are used to simplify the 
developer's interacion with the database layer in a typical JEE applicaion.

Understanding the Model Layer
[ 62 ]
The common uses of the business components are as follows:
 

Performing Create, Retrieve, Update, Delete (CRUD) operaions
 

Apply business logic and validaions to the database objects
 

Transacion management
Some of the highlights of using ADF business components are as follows:
 

Simpliied data access
 

It is based on XML and Java
 

Works with diferent applicaion servers and databases
 

Uses some of the design paterns that are widely accepted
 

Components are metadata-driven, with opional Java coding
The following are the core components of ADF business components:
 

Enity objects
 

Associaions
 

View objects
 

View links
 

Applicaion module
Let us consider the EmpDirectoryApplication module, which we created in the previous 
chapter. The DeptEO and DeptVO objects will be created in this chapter, which is why it is 
not shown with the icons in the following diagram:

Chapter 3
[ 63 ]
What is an entity object?
Remember that the EmpEO.xml ile is mapped to the EMP table in HRSchema. What  
does this really mean? We are represening the database table as an XML ile that has  
a coniguraion based on the table column and constraint deiniions in our applicaion.  
This is so that we can interact with this paricular table using the metadata deined in  
the XML ile. The locaion of the EmpEO.xml ile is shown in the following screenshot:
The database columns for the EMP table are represented as atributes in the EmpEO.xml  
ile. The data types in the database column are mapped to a corresponding Java data type; 
the following diagram is an example of this statement:
The EMPNO column in the EMP table is mapped to the Empno atribute of the EmpEO.xml  
ile. Here, the data type of Number (4,0) is mapped to the java.lang.Integer  
Java data type. Similarly, all the columns and data types from the table are mapped to  
the enity objects.

Understanding the Model Layer
[ 64 ]
The data type mapping is set when a business component is iniialized, as shown in the 
following screenshot:
The available opions are Oracle Domain and Java Extended for Oracle and Java, respecively.
Integer and BigDecimal, which was oracle.jbo.
domain.Number in the previous versions, are the types 
used by default in 11gR2.
The opions for this can be changed by ediing the Model.
jpx ile. The opions are OracleApps, OracleDomains, 
and Java. For example, <Attr Name="_jbo.
TypeMapEntries" Value="OracleApps"/>.
Time for action – checking the attributes of an entity object
Carry out the following steps to check the atributes of an enity object:
1. Select the EmpEO.xml ile from the Model project in the Applicaion Navigator panel.
2. You will see the the structure of the enity object in the structure window.
3. Double-click the EmpEO.xml ile to open the ile in the General tab.
4. Click on the Atribute secion to see all the atributes listed for the enity object.
5. Now, when you click on the Empno atribute, you will see that the structure  
window lising gets updated, thereby corresponding to the atribute secion  
in the enity object.

Chapter 3
[ 65 ]
6. At the same ime, you will see a secion shown below the atribute lising with  
all the informaion related to the selected atribute.
7. The atribute details will list down all the informaion related to the atribute.  
The informaion is grouped under diferent tabs.
8. Select the Ename atribute from the structure window. The atribute and its 
corresponding informaion will be displayed, as shown in the following screenshot:
What just happened?
In the preceding secion, we have individually checked the atributes available for the enity 
objects. There are two ways to check the atributes—one way is to look for the atributes 
from the structure window, where an outline of the enity object is listed. Once the atribute 
is selected in the structure window, we will see the property inspector lising the related 
properies for the selected atributes. An alternate way is to select the atribute from the 
Overview tab.

Understanding the Model Layer
[ 66 ]
Have a go hero – check the column mappings
At this point, let us try to analyze how all the database columns of the EMP table are mapped 
to the EmpEO.xml ile; see the following screenshot for reference:
Go through the following exercise:
1. List down the columns and the corresponding atribute mappings.
2. Find how the enity objects atribute difers from the column atribute. The column 
informaion and the table structure is viewed by using the Database Navigator 
panel from the View | Database menu, as explained in Chapter 2, Geing Started 
with ADF.
Time for action – creating an entity object for DEPT table
In this secion, we will create another enity object for the DEPT table from HRSchema.  
There are two ways of creaing an enity object—the irst way of creaing an enity object  
was explained in Chapter 2, Geing started with ADF. Now, we will see how to create an  
enity object using another way.

Chapter 3
[ 67 ]
1. Right-click on the com.empdirectory.model package from the Model project  
in the Applicaion Navigator panel where the EmpEO.xml is located and select  
the New Enity Object opion from the menu.
2. This will open the Create Enity Object wizard for you to create the enity object.
3. Enter com.empdirectory.model.entity as the package informaion for the 
enity object and DeptEO as its Name, as shown in the following screenshot:
4. Select the HR schema from the drop-down menu and the DEPT table using  
the Browse buton. Alternaively, we can directly enter DEPT in the Schema  
Object: box, if we know the table name correctly.
5. Move to the next screen to accept the listed atributes and then click on the  
Next > buton.
6. In the next screen, the Deptno atribute seings and informaion related to  
the atribute can be selected.
7. When you atempt to move to the next screen, a message, which warns the  
user that there was no primary key atribute selected for the enity object,  
will be displayed.

Understanding the Model Layer
[ 68 ]
The message is displayed only when there is no primary key deined in the database 
table. ADF will ask if you want to create a primary key named ROWID.
The demobld.sql file, which we have used to create the 
database table, does not include constraint definition.
8. You can cancel the message and go back to select the Primary Key opion for the 
Deptno atribute. This opion was not checked for EmpEO.xml, hence we could  
see a column called Rowid added to the enity object.
Once the primary key opion is checked, we can remove the Rowid atribute from 
the EmpEO.xml ile. In reality, the database table will surely have a primary key 
deined and most of the ime, Rowid will not be generated.
9. The next screen will provide you with an opion to create a Java class for the enity 
object. We will not do any coding in Java right now, so we will skip this secion and 
move forward.
10. The next opion will allow you to create a view object and add the view object to 
the applicaion module. Select the Generate Default View Object checkbox and 
modify the package name from com.empdirectory.model.entity to com.
empdirectory.model.view. Enter DeptVO in the name box.
11. Check the Add to Applicaion Module opion to add the view object to the already 
exising EmpDirectoryModule module.
You may skip this opion to create the view object from scratch by selecing DeptEO 
ater compleing all the steps.
12. Click Next > to accept the summary and click on the Finish buton to create the 
DeptEO enity object.
What just happened?
We have now created an enity object which maps to the DEPT table. So, we have the enity 
object in the same package in which we had created our enity object for the EMP table.  
The DeptEO.xml ile will have all the columns mapped to the corresponding atributes.

Chapter 3
[ 69 ]
You can verify the creaion of the atributes in the DeptEO.xml ile and compare the columns 
in the DEPT table.
Have a go hero – set the primary key for the EmpEO.xml ile
Now we have two enity objects in our com.empdirectory.model.entity package—one 
is EmpEO.xml and the other is DeptEO.xml ile. We have set the Deptno atribute as the 
primary key for DeptEO.xml.
We have not created a separate Rowid atribute to represent a primary key for the enity 
object. So, now it's your job to set the Empno as a primary key for the EmpEO.xml ile.
Bravo! You have set the Empno as the primary key. Now we have two atributes as the primary 
key. Don't worry about that right now; we will take care of this later as we proceed.
Why association?
As the name suggests, associaion is used to associate enity objects. When you look closely 
at the EMP table, you will ind a DEPTNO column. In database terms, it is called a foreign key 
because DEPTNO is the primary key for the DEPT table. The foreign key associaion for enity 
objects is done using associaions.
The usage of associaion is exactly as that of a foreign key in a relaional database for 
maintaining referenial integrity. When the database has a foreign key constraint, the 
associaion is created automaically by ADF. The following screenshot explains the 
relaionship between the EMP and DEPT table through Deptno:

Understanding the Model Layer
[ 70 ]
Time for action – creating an association between EmpEO and 
DeptEO objects
Carry out the following steps to create an associaion between EmpEO and DeptEO objects:
1. Select the New opion from the File menu and select ADF Business Component 
from the Business Tier.
2. Enter the package name as com.empdirectory.model.association and the 
name as EmpEOToDeptEOAssoc in the Create Associaion wizard. The package 
structure for all these business objects can be predeined from the Tools | 
Preferences | ADF Business Components | Packages secion.
3. Click on the Next > buton to create an associaion between the enity objects. 
Select the value of Cardinality as * to 1 from the drop-down menu to represent 
the many-to-one relaionship between EmpEO and DeptEO.
The reason for setting the relations as many-to-one is to 
represent that many Employee entities are available in a 
single Department entity. Department is a single entity 
that represents the collection of employees in it.
4. Locate the Deptno atribute from EmpEO listed in the Source Atribute secion  
and map it to the Deptno atribute of DeptEO in the Desinaion Atribute list.
5. Ater the selecion, click on the Add buton to add the associaion entry for the 
atributes.
6. Click on the Next > buton to select properies for the associaion. Right now,  
you can accept the default seings in the Opions for the Business Components 
secion in this chapter.
7. Click on the Finish buton in the Summary secion to complete the creaion of  
the associaion.
What just happened?
We have now created an associaion between the EmpEO and DeptEO.xml iles. The accessor 
atribute for DeptEO is created in EmpEO, and for EmpEO one accessor is created in DeptEO. 
This can be conigured in the Accessor secion of the associaion object. The associaion 
relaionship is referenced in the following diagram:

Chapter 3
[ 71 ]
Have a go hero – drag-and-drop components
So now, let us try to drag-and-drop the EmpEO and DeptEO enity objects and the newly 
created associaion together onto the EmployeeDirectoryDiagram diagram created  
in Chapter 2, Geing Started with ADF.
About the view object
In the previous chapter, we created the EmpVO.xml ile, which is the view object used to 
collect, retrieve, and manipulate data from the data source. EmpVO will have a reference  
to EmpEO as the enity object that will be used to refer to the EMP table.
The use of having a view object is as follows:
 

To fetch informaion from the data source using SQL query
 

To sort, ilter, project, and join data
 

To isolate the view data from other parts of the applicaion

Understanding the Model Layer
[ 72 ]
Types of view object
We can create a view object from four diferent data sources; they are enity object,  
SQL query, programmaic query, and staic list.
 

View object based on an enity object: A view object will be based on an enity 
object for any interacion with the database. The enity object data source is 
responsible for updaing the data, validaing the business logic, and synchronizing 
data with the database.
The advantage of using an enity data source is that it will take care of maintaining 
consistency in the data that is being fetched from the database, by providing an 
enity cache. The EmpVO.xml view object is an enity-based view object, which is 
based on the EmpEO enity object.
 

View object based on SQL query: The view object based on SQL query is  
read-only and is not meant for updaing the database table. The query will  
hold all the informaion that has to be retrieved from the database, as shown  
in the following screenshot:

Chapter 3
[ 73 ]
 

Programmaic query: The view object can be created programmaically using  
Java code. In some special cases, we can create a view object customized for  
our business needs. The opions available in a normal view object will be created 
programmaically using the API provided for the creaion of a view object.
 

Staic list: Someimes, we would like to have a list of values displayed in the user 
interface for the purpose of selecing a value. The staic list can be provided by  
the user during the design phase and the list will be displayed in the same order  
it was entered as a list at runime  to the user. A staic list will not contain any SQL  
query, it will contain only the atributes that have to be listed in the UI.
Time for action – creating an entity-based view object
We have the enity object for DEPT table created as DeptEO. Now it's ime for us to create 
a view object based on this enity object. The view object can be created at the ime of 
creaing the enity object, by checking the opion to create the view object in the create 
enity wizard. We had skipped that step so that we can create the view object now, using  
the following steps:
1. Right-click on the com.empdirectory.model.view package and select the New 
View Object… opion. The creaion of the view object can also be done from File | 
New and selecing View Object under the ADF Business Components secion.
2. Enter the object's name as DeptVO in the Name box and select an enity object  
as the data source in the next screen.

Understanding the Model Layer
[ 74 ]
3. In the next screen, you will have to select the DeptEO as the enity object for the 
view object. Select the Updateable opion to make the enity object updateable 
from the view object, as shown in the following screenshot:
4. In the next screen, select the Atributes from the enity object to be displayed in the 
view object. You can select all the atributes from the Available list and shutle it to 
the Selected list

Chapter 3
[ 75 ]
5. Click on the Next > buton to change the Atributes seings for the view object. 
Currently, we do not have to make any changes, so we can move forward.
6. The next screen will display the SQL query that will be used to retrieve informaion 
from the DEPT table through the DeptEO object. You cannot change the query if the 
data source for the view object is an enity object. You have an opion to update the 
Where: and the Order By: clause.
The Binding: opion will help you to choose the type of binding to be used for 
the view object. The Order By: opion is provided in order to see the data sorted 
column-wise:
7. In the next screen, you can choose to create a bind variable to pass to the view 
object query. The bind variable is helpful in retrieving the values from the data 
source at runime. It is used as placeholders in a WHERE clause of a query or in 
combinaion with view criteria.
A view criterion is a named WHERE clause added to the view object which is applied 
at runime based on our business needs.
8. The next screen can be used to generate Java classes for the view object. The Java 
classes are used to override the framework code and do some advanced operaions 
for the view object—this will be explained in Chapter 11, Advanced Features of ADF.

Understanding the Model Layer
[ 76 ]
9. In the next screen, you can check the Add to Applicaion Module to add the  
view object to the applicaion module. Move to the next screen ater entering  
the applicaion module as EmpDirectoryModule in the Name: box:
10. At the end, a summary screen will be displayed with all the opions selected in the 
wizard. Once the Finish buton is clicked, the view object will be created.
What just happened?
So now we have the view object created for the DeptEO as well:

Chapter 3
[ 77 ]
Importance of a view link
View links are the components to link two view objects. The relaionship between view 
objects can be one-to-one, one-to-many, many-to-one, or many-to-many. This is similar  
to the associaion component that we have for the enity object. The only diference is  
that the view link is used in the presentaion layer to fetch data if the child and the  
master view object are connected through related atributes.
If we have two view objects that have an enity object as a data source, then we can map 
our view link based on the associaion between the enity objects. View links based on 
associaions are used to traverse master-detail behavior at the enity level.
A view link can also exist without associaion by relaing two atributes from the view object. 
The following diagram will explain the view link relaionship between EmpVO and DeptVO:
Time for action – creating a view link between EmpVO and 
DeptVO
Now in the following steps, we will see how to create a view link between EmpVO and 
DeptVO:
1. Since both the view objects are based on enity objects, we can map the  
view link based on the associaion between EmpEO and DeptEO.
2. Right-click on the com.empdirectory.model.view package and select  
New View Link.

Understanding the Model Layer
[ 78 ]
3. In the Create View Link wizard, enter com.empdirectory.model.viewlink  
as the Package name and EmpVOToDeptVOLink as the Name value:
4. In the next screen, we will select the cardinality as * to 1 which represents a  
many-to-one relaionship and map the associaion EmpEOToDeptEOAssoc  
between EmpVO and DeptVO.
5. Click on the Add buton to add the view link:

Chapter 3
[ 79 ]
6. Click on the Next > buton to select the view link accessor atribute for the source 
view object and the desinaion view object.
7. Check the In View Object: DeptVO opion to have this accessor atribute created in 
EmpVO. This accessor is used to retrieve the related informaion from the DeptVO:
8. The next two screens will display the source and desinaion WHERE clause to fetch 
the relevant data from the view object, as a result of the view link
9. As usual, the next screen will ask you to add the view link to the applicaion module, 
which we will skip this ime and discuss in the next secion.
10. The last screen will list out a summary of the opions selected, and clicking on the 
Finish buton will create the view link.
What just happened?
We have created a view link between the EmpVO and DeptVO objects. The accessors will be 
listed in both the view objects.
Have a go hero – drag-and-drop remaining components
Once again, let us try to drag-and-drop the EmpVO and DeptVO view objects and the newly 
created view link together onto EmployeeDirectoryDiagram.

Understanding the Model Layer
[ 80 ]
What is an application module?
We had our transacion managed by the EmpDirectoryModule.xml ile. The commit and 
rollback operaions are a part of the transacion management of the applicaion module.  
The following screenshot will show the EmpDirectoryModule applicaion module, which 
we had created in the previous chapter:
In the previous chapter, we created an applicaion module using the Create Enity Wizard for 
EmpDirectoryApplication. We will now create another applicaion module directly from 
the File | New opion. There is no harm in creaing an extra applicaion module; we may use 
this to separate the logical unit and the transacion later as we proceed.
Time for action – creating an application module
Now we will see how to create an applicaion module using the following steps:
1. With JDeveloper open, locate the Model project and look for the com.
empdirectory.model.am folder. Right-click on this directory and select the  
New Applicaion Module opion.
2. The package name and the name of the applicaion module can be kept as it is.
3. In the Data Model secion, you can select the view object and shutle to the other 
side. We are not doing this also. Click on the Next buton.
4. In the next screen, we will move any available applicaion module to the current 
one as a child applicaion module. In this case, the root applicaion module will be 
maintaining the transacion for the child applicaion module—skip this secion also.

Chapter 3
[ 81 ]
5. The next screen can be used to create a Java class for the applicaion module, which 
we do not need right now.
6. At the end is the summary page, and clicking on the Finish buton will create the 
applicaion module for you.
What just happened?
We have now learnt to create an applicaion module without using the wizard. The applicaion 
module is essenial for the project, in order to maintain the transacion in a secured way.
The applicaion module that is created can be nested within another applicaion module to 
share the transacional informaion with the parent applicaion module. Applicaion modules 
can have Java classes that can override the framework code to bypass the business logic on 
commit() and rollback() operaions.
Time for action – adding the view link to the application module
Now we are going to add EmpVOToDeptVOLink to the applicaion module to display the 
master-detail relaionship between the EmpVO and DeptVO objects. Adding the view link to 
the applicaion module will help in retrieving the employees within a paricular department.
The following steps show how to add a view link to the applicaion module:
1. Double-click on the EmpDirectoryModule.xml ile from com.empdirectory.
model.am.
2. Open the Data Model secion to select the view object instances.
3. Select the view link accessor for the DeptVO in the Available View Objects: secion. 
In the Data Model secion, select DeptVO1 (which is the view object instance name 
in EmpDirectoryModule).
4. Shutle the view object to the Data Model secion. Now the EmoVO2 object will be 
added as a child to DeptVO1. This represents the view link associaion between 
DeptVO and EmpVO.
5. The instance name for the view link is EmpVO3, in my case.

Understanding the Model Layer
[ 82 ]
6. Save the EmpDirectoryModule.xml ile:
What just happened?
We have now added a view link to the applicaion module. The view link instance 
represented in the EmpDirectoryModule applicaion module can now be used.
In the previous screenshot, the EmpVO1 instance is added directly to the applicaion module 
that will display all the employee informaion. The EmpVO3 instance that was added under 
DeptVO1 will display only the employee records that match with the Deptno atribute.
For example, if the user is interested in department number 10, then the employees whose 
deptno value is 10 is iltered and shown to the user. The view link is essenial to ilter out the 
informaion from the child module and display only the relevant data from the master data.

Chapter 3
[ 83 ]
Business components in action
In this secion, we will see how the business components are working at runime. When we run 
the applicaion module, the view object instances that are added to the applicaion module 
will be loaded at runime and the data will be shown to the user, as per the user interacion.
Time for action – running the application module
We will run the AM tester using the following steps and see how the components work  
in acion:
1. Right-click on EmpDirectoryModule and select the Run opion from the menu.
2. When the AM tester is ready, click on the view link created. In this case, it will be 
EmpVOToDeptVOLink2.
3. This will open records of the ACOUNTING department. You will see that there  
are only three employees in this department, from the HRSchema database  
we created in Chapter 2, Geing Started with ADF.
The records were created using the demobld.sql file.
4. Click on the Forward buton to see that the data changes as per the acion.  
Now you will see that the RESEARCH department has ive employees within it.
5. Traverse to the OPERATIONS department; you will not see any employees within 
this department.
6. Now we are going to create a new department named HR.
7. Click on the + (add) icon for the department table—you will see a new record 
created for you.
8. Now enter in the following details:
Deptno 50
Dname HR
Loc NEW YORK
9. Click on the Commit buton to save this department in the database.

Understanding the Model Layer
[ 84 ]
10. We will create one employee for this department. Click on the + (add) buton for the 
employee and then enter the following data:
 

Empno 1234
 

Ename JACK
 

Job MANAGER
 

Mgr 7499—this number refers to an employee named ALLEN in the  
SALES department (this is just a random number now. In real life,  
HR will never report to a salesman)
 

Hiredate 1981-02-20 00:00:00.0
 

Sal 2000
 

Comm 200
 

Deptno—this will be 50, which is automatically populated as we are creating 
the employee for the department that has this value set as 50
 

Rowid—this will get generated when you save the record
What just happened?
We created a department in the DEPT table with the department number as 50. We also 
created an employee named JACK in the HR department.

Chapter 3
[ 85 ]
Have a go hero – play with the AM tester for a while
This exercise is more fun as you are going to work with the data. You are going to perform 
some basic CRUD operaions by yourself, using the following exercise:
 

Create an employee for the operaions department
 

Delete the employee named MARTIN in the sales team
 

Update the RESEARCH team locaion from DALLAS to HOUSTON
Ater all these operaions, commit the record and verify in the database if the values have 
been saved correctly.
Options for the business components
Now that we understand how to create the business components, let's dive deeper into 
each and every component and look for the opions available for each of these components. 
Some of the opions explained in this secion are a part of the advanced topics and will be 
explained in detail in Chapter 11, Advanced Features of ADF.
Let us analyze the business components opions briely.

Understanding the Model Layer
[ 86 ]
Entity object
The opions for an enity object are changed in the Overview tab. Some seings related to 
atributes can be changed using the Property Inspector window. Let us explore the opions 
under the enity object.
General
Some general seings for the enity object are as follows:
 

Name: This secion displays the name of the enity object. This secion is editable, 
and changing the name will afect all the arifacts related to the enity object.
 

Package: This secion displays the package for the enity object. The pencil icon  
next to the opion will help to change or refactor the value.
 

Extends: This opion is used to extend another enity object. The extended enity 
will become the parent of the current enity. A window will be shown to the user  
to select the parent enity.
For example, if you have SalesAccountEO and CustomerAccountEO, then these 
two enity objects can extend the AccoutEO to inherit the common features.
 

Property Set: We can have properies and messages deined as a named-value pair 
in property sets. Property sets are created from the New Gallery wizard under the 
ADF Business Components secion.
 

Schema Object: This is the actual name of the table. The pencil icon will help the 
user to select the schema object from the database if the user decides to change  
the table associated with the enity object.
Alternate key
We can create an alternate key, other than a primary key, to uniquely idenify a row.  
The alternate key will usually be deined on an atribute other than the primary key.  
For example, alternate keys can be deined on a Name atribute for uniqueness.
Tuning
The tuning seings are as follows:
 

Use Update Batching: This seing is used to update the eniies in a batch when  
the number exceeds the number provided in the space available. For example,  
if the enity is geing updated from muliple sources, then this opion will enable 
us to issue a single collecive DML statement for bulk CRUD operaion. Using this 
property will reduce the number of statements geing generated.

Chapter 3
[ 87 ]
 

Retain Associaion Accessor Rowset: This seing is used to tell the instance of  
an enity object to retain the accessor rowset, when accessing the object using an 
associaion. The rowset is created every ime an access is made through associaion. 
Seing this property will retain the source accessor rowset for performance instead 
of creaing it every ime.
 

Custom Properies: You can add some properies here, deined as named-value pair, 
to be assessed at runime.
Security
You can set the security for the enity object using the Read, Update, removeCurrentRow 
opion. You need permissions to be added to the jazn-data.xml ile to read data through 
an enity if the opions were selected.
Business Logic Group
This is helpful if you want to store properies, control hints, validaions, localizaions, and 
messages based on a group. The logical group needs a business logical unit, which will be 
loaded at runime based on the value of the discriminator.
Attributes
The opions listed in this secion are speciic for the enity object atributes, which is updated 
using the Property Inspector window. You can select the atribute from either the structure 
window or the Overview tab.
Details
 

Name: This seing displays the actual name of the atribute. The column name  
of the table is represented in a CamelCase for the enity object.
 

Display Name: This is the display name for the atribute that will be shown in  
the business component diagram.
 

Descripion: A descripion for the atribute is added in this secion.
 

Type: This seing displays the data type of the atribute. Some of the common 
types are java.lang, Integer, java.lang.String, oracle.jbo.domain.
Timestamp, and so on. These are the types that correspond to the database  
column type VARCHAR2, NUMBER, and DATE, respecively.
 

Property Set: This is the property set that has to be applied to the atribute.
 

Default Value: You can provide a default value for the atribute using this seing.
 

Literal: The default value will be a literal value.

Understanding the Model Layer
[ 88 ]
 

Expression: This seing lets you default the atribute to an expression. Groovy 
expression language is used to deine the expression. Groovy is a Java-like language 
used for scriping.
 

Refresh Expression Value: This is the condiion provided to recalculate the 
expression value.
 

SQL: This seing lets you default to the output of an SQL query.
 

Polymorphic Discriminator: Checking this opion makes the atribute the 
discriminator column, which is used to idenify the type of the enity object  
we already knew we are working with and it also ideniies the enity object  
that is extended from a parent enity object.
 

Efecive Date: This is related to the Efecive Date funcionality to get the 
informaion at a paricular ime. Someimes informaion may change during a  
single day, so to keep track of the change in informaion, we use this opion.
For an efecive date, you would need a column represening a start date,  
an end date, a sequence, and a sequence lag. These atributes are mapped  
to the corresponding available opions.
 

Start Date: This is the attribute with a start date
 

End Date: This is the attribute with an end date
 

Sequence Flag: This is the attribute mapped for a sequence flag
 

Sequence: This is the attribute mapped for the sequence
 

Updateable: This sets the atribute as updateable. If this is not checked, then the 
atribute value cannot be updated and trying to update it will result in an excepion. 
The following opions will deine when the atribute should be updateable:
 

Always: This option defines that the attribute is always updateable.
 

While New: This option defines that the attribute is updateable only  
when the attribute is newly created or initialized.
 

Never: This option defines that the attribute can never be updated.  
The attribute will be displayed as read-only in the UI.
 

Persistent: This opion deines if the atribute value should be stored in  
the database.
 

Transient: This opion deines that the atribute value is not persisted to  
the database and is used to calculate the values in the middleware layer.
 

Mandatory: This opion sets the atribute as required. If the atribute is not  
given a value, then ADF will prompt to provide a value for this atribute.

Chapter 3
[ 89 ]
 

Primary Key: This opion sets the current atribute as a primary key.
 

Queriable: This opion sets the atribute to take part in a query. If this opion is  
not set, then the atribute will not be displayed in the UI as a queriable atribute.
 

Refresh on Insert: This is a trigger which causes the atribute to refresh from the 
database when a new row is inserted.
 

Refresh on Update: This opion causes the atribute to be refreshed when the  
row is updated.
 

Change Indicator: This opion sets the atribute as the change-indicator value,  
which will help in versioning the row.
 

Precision Rule: This opion is used to set a strict precision rule.
 

Track Change History: This opion is used to have a version number for history 
columns created on, created by, modiied on, modiied by, and version number.
 

Column Name: This opion deines a column name in the database.
 

Column Type: This opion deines the data type of the column.
UI Hints
 

Display Hints: This opion deines whether to display the atribute or hide it in the UI.
 

Label: This opion deines the label to be displayed for the atribute in the UI.
 

ToolTip: This opion deines if you want to show any ip.
 

Format Type: This opion deines the format for date ield; for example, Simple Date.
 

Format: This opion deines the format patern for the date.
 

Control Type: This opion deines the display control hints such as checkbox, date, 
image, and others.
 

Display Width: This opion deines the display width for the atribute when 
displayed in the UI.
 

Display Height: This opion deines the height of the ield in the UI.
 

Form Type: This opion causes the atribute to be displayed in summary when it is 
shown in a form.
 

Auto submit: This opion can be set to true or false in order to refresh the 
dependent component based on this atribute.
Validation Rule
You can set validaion for the atribute. The business logic can be set declaraively in  
this secion. Some of the validaions are Compare, Range, regular expression, Script,  
and so on.

Understanding the Model Layer
[ 90 ]
Security
This seing deines restricions for updaing the atribute.
Dependencies
This seing is used to select the atribute on which the current atribute is dependent on  
for recalculaion or database refetch.
Custom Properties
You can add custom properies to access at runime.
Business Rules
You can set the business validaion and rules here, same as the validaion rule secion in 
the atribute. Here, you can set the business rule for the complete enity. The two extra 
validaions available here are Collecion and UniqueKey.

Chapter 3
[ 91 ]
Java
If you want to add a Java class for your enity object, you can add it here. There are three 
types of Java classes that you can add. They are as follows:
 

Enity object class: This class contains the accessor informaion
 

Enity collecion class: This class maintains the enity collecion
 

Enity deiniion class: This class will refer to the deiniion of an enity
Business Events
This secion is used to raise events based on some business operaion. For example,  
we have to noify some other applicaion or service if a row is inserted into the database.  
We can publish an event from this secion using the payload.
View Accessor
This secion is used to provide a list source for the atribute. For example, you would want  
to show the department names as a list opion instead of showing the department ID.
Association
Some important seings for the associaion are explained in this secion.
Relationship
The Behavior secion is used to specify the behavioral aspect of the associaion. Some of  
the behavior's seings are:
 

Use Database Key constraints: Selecing this property will make sure that the 
database constraint is added to the source and target enity objects.
 

Composiion Associaion: The composiion associaion is enabled between  
the enity objects. This opion is helpful for master-detail mapping with  
one-to-many relaionships. This seing will make sure that the parent-child  
relaion remains intact and works properly.
The following opions will be enabled only for Composiion Associaion.
 

Optimize for Database Cascade Delete: This setting will make sure that 
the Cascade Delete option works fine for parent-child relationships and 
optimizes the deletion of the child objects row when the parent entity 
objects are deleted.

Understanding the Model Layer
[ 92 ]
 

Implement Cascade Delete: This option will be enabled only if the previous 
option is not chosen. This will make sure that all the child entity object 
records are deleted before deleting the parent entity.
 

Cascade Update Key Attributes: This setting will update the foreign key 
attribute in cascade when the parent key changes.
 

Update Top-level History Columns: This setting will update the parent's 
history columns before updating the child's records.
 

Lock Level: This option will determine at which level the lock has to be 
applied during the UPDATE operations.
 

Lock Container: This will lock the container of the entity for which the 
framework acquires the lock.
 

Lock Top-level Container: The framework will lock the top-most entity in 
the composition hierarchy when the child entity object is locked for the 
UPDATE operation.
View Object
We went through some of the common opions in the enity object secion. Let us discuss a 
few more important opions for the view object in this secion.
General
This secion will explain some of the opions available for the view object in the Overview 
tab and other opions available from the Property Inspector window.
Tuning
This secion has some of the tuning properies that can be set for the view object. The tuning 
opions used for the performance of the view object are as follows:
 

All Rows: This opion is used to retrieve all the rows from the database.
 

Only up to row number: Using this opion, you can set the row number up to  
which you want to retrieve the rows.
 

In Batches of: This opion can be used to say how many batches you want to  
retrieve from the database.
 

As needed: Using this opion, you can have rows fetched as needed from  
the database.
 

All at once: This opion can be used to get the rows all at once at irst retrieval  
upon execuing the query.

Chapter 3
[ 93 ]
 

At most one Row: This opion can be used to get at the most one row when the 
view object query is executed.
 

No rows: This opion can be used retrieve a no rows event ater querying the 
database using the view object.
 

Query Opimizer hints: This opion provides an opimizer hint to make the view 
object performant in retrieving the data.
 

Fill last page of rows: This opion will display the result of the query when working 
with paginaion in the UI. Paginaion is displaying the result of the query in pages, 
with a range of data.
 

Passivate State: This opion is used to maintain the state of the object on failover 
by passivaing the view object collecion data. This opion is used in a clustered 
environment, where the acivaion and passivaion of query results is mandatory  
for the highly available applicaion.
 

Access Mode: This seing provides opions to support paginaion in the UI.
 

Range size: This opion deines the range size of the rows in each paging view.
Entity Objects
The view object is created based on the enity that you will select. The view object can be 
based on muliple enity objects, using joins.
Attributes
The Atributes secion deines the following properies:
 

SDO Property: Someimes, a view object is used as a service. Check if this is acing 
as a service deiniion object.
 

XSD Type: This opion deines the XML Schema Deiniion (XSD) type to be used  
for a service deiniion.
List of Values
You can use this seing to provide a list to be shown for the atribute in the UI.
Query
The SQL query deined for the view object is shown in this secion. We can change  
the Where: and the Order by: clause in this secion, if the view object is based on  
an enity object.

Understanding the Model Layer
[ 94 ]
Bind Variable
This secion deines the bind variable for the view object query. This is used to fetch the 
desired result set by passing the value to the bind variable.
View Criteria
This secion provides support for creaing custom criteria which is more lexible for use in 
fetching data eiciently.
Pop quiz
Q1. ___________ component is used as a foreign key reference between two enity objects.
1. View link
2. View object
3. Associaion
Q2. Which of the following cannot be used as a data source to create the view objects?
1. Enity object
2. Programmaic
3. View object
4. SQL query
Q3. If a view object is based on an enity object, then we would create a view link based on 
the associaion.
1. True
2. False
Q4. ___________ component is responsible for transacion management.
Q5. Which of the following opions are used to make the atribute as required in the  
enity object?
1. Required
2. Primary Key
3. Mandatory
4. Queriable
5. None of the above

Chapter 3
[ 95 ]
Summary
Let us recap what we have learned in this chapter. We saw several ADF business 
components; they are enity object, associaion, view object, view link, and applicaion 
module. The interacions between these objects are also discussed. The runime behavior 
of the components is explained and the CRUD operaions are performed using these 
business components. Various opions available for the components are also examined.
In the next chapter, we will see how to do the validaion for the ADF model layer. We will learn 
more about the declaraive validaions and the APIs available for the business components.


4
Validating and Using the Model Data
Validating data is important as business depends on the data that gets stored 
in the database. So how do we validate the data? Validation is something that 
makes sure that valid data is getting stored in the database. Validation could 
be anything from comparing two fields in a table to multiple validations on a 
single field involving different columns from a different table.
In any other framework, we would end up writing a lot of code even for a small 
validation. But in ADF, we do little or no coding at all, and most of the validations 
are achieved declaratively.
In this chapter, we will learn the following topics:
 

Declaraive validaion
 

Groovy expressions
 

Learning about APIs
 

Managing transacions
 

Exposing data

Validaing and Using the Model Data
[ 98 ]
Declarative validation
It's easy to set up declaraive validaion for an enity object to validate the data that is 
passed through the metadata ile. Declaraive validaion is the validaion added for an 
atribute or an enity object to fulill a paricular business validaion. It is called declaraive 
validaion because we don't write any code to achieve the validaion as all the business 
validaions are achieved declaraively. The enity object holds the business rules that are 
deined to fulill speciic business needs such as a range check for an atribute value or to 
check if the atribute value provided by the user is a valid value from the list deined. The 
rules are incorporated to maintain a standard way to validate the data.
Knowing the lifecycle of an entity object
It is important to know the lifecycle of an enity object before knowing the validaion that  
is applied to an enity object. The following diagram depicts the lifecycle of an enity:
Initialized
New
Dead
Deleted
Modified
Unmodified
Commit()
remove()
setAttribute()
setNewRowState()
When a new row is created using an enity object, the status of the enity is set to NEW. When 
an enity is iniialized with some values, the status is changed from NEW to INITIALIZED. At 
this ime, the enity is marked invalid or dirty; this means that the state of the enity is changed 
from the value that was previously checked with the database value.
The status of an enity is changed to UNMODIFIED, and the enity is marked valid ater applying 
validaion rules and commiing to the database. When the value of an unmodiied enity is 
changed, the status is changed to MODIFIED and the enity is marked dirty again. The modiied 
enity again goes to an UNMODIFIED state when it is saved to the database. When an enity is 
removed from the database, the status is changed to DELETED. When the value is commited, 
the status changes to DEAD.

Chapter 4
[ 99 ]
Types of validation
Validaion rules are applied to an enity to make sure that only valid values are commited  
to the database and to prevent any invalid data from geing saved to the database. In ADF, 
we use validaion rules for the enity object to make sure the row is valid all the ime.
There are three types of validaion rules that can be set for the enity objects; they are  
as follows:
 

Enity-level validaion 
 

Atribute-level validaion
 

Transacion-level validaion
Entity-level validation
As we know, an enity represents a row in the database table. Enity-level validaion is the 
business rule that is added to the database row. For example, the validaion rule that has  
to be applied to a row is termed as enity-level validaion.
There are two unique declaraive validators that will be available only for enity-level 
validaion—Collecion and UniqueKey. The following diagram explains that enity-level 
validaions are applied on a single row in the EMP table. The validated row is highlighted  
in bold.
EMP
EMP table Rows
Entity Validation
1
3
2
Attribute-level validation
Atribute-level validaions are applied to atributes. Business logic mostly involves speciic 
validaions to compare diferent atribute values or to restrict the atributes to a speciic 
range. These kinds of validaions are done in atribute-level validaion. Some of the declaraive 
validators available in ADF are Compare, Length, and Range.

Validaing and Using the Model Data
[ 100 ]
The Precision and Mandatory atribute validaions are added, by default, 
to the atributes from the column deiniion in the underlying database 
table. We can only set the display message for the validaion.
The following diagram explains that the validaion is happening on the atributes in the 
second row:
validations
Empno
Ename
Job
Sal
Entity Attributes
1
Row
st
3rd
Row
2
Row
nd
EMP table
There can be any number of validaions deined on a single atribute or on muliple 
atributes in an enity. In the diagram, Empno has a validaion that is diferent from the 
validaion deined for Ename. Validaion for the Job atribute is diferent from that for  
the Sal atribute. Similarly, we can deine validaions for atributes in the enity object.
Transaction-level validation
Transacion-level validaions are done ater all enity-level validaions are completed. If you 
want to add any kind of validaion at the end of the process, you can defer the validaion to 
the transacion level to ensure that the validaion is performed only once.

Chapter 4
[ 101 ]
Built-in declarative validators
ADF Business Components includes some built-in validators to support and apply validaions 
for enity objects. The following screenshot explains how a declaraive validaion will show 
up in the Overview tab:
The Business Rules secion for the EmpEO.xml ile will list all the validaions for the EmpEO 
enity. In the previous screenshot, we will see that the there are no enity-level validators 
deined and some of the atribute-level validaions are listed in the Atributes folder.
Collection validator
A Collecion validator is available only for enity-level validaion. To perform operaions such as 
average, min, max, count, and sum for the collecion of rows, we use the collecion validator.
Collecion validators are compared to the GROUP BY operaion in an SQL query with a 
validaion. The aggregate funcions, such as count, sum, min, and max are added to validate 
the enity row. The validator is operated against the literal value, expression, query result, 
and so on. You must have the associaion accessor to add a collecion validaion.
Time for action – adding a collection validator for the DeptEO ile
Now, we will add a Collecion validator to DeptEO.xml for adding a count validaion rule. 
Imagine a business rule that says that the number of employees added to department 
number 10 should be more than ive. In this case, you will have a count operaion for the 
employees added to department number 10 and show a message if the count is less than  
5 for a paricular department.

Validaing and Using the Model Data
[ 102 ]
We will break this acion into the following three parts:
 

Adding a declaraive validaion: In this case, the number of employees added to the 
department should be greater than ive
 

Specifying the execuion rule: In our case, the execuion of this validaion should be 
ired only for department number 10
 

Displaying the error message: We have to show an error message to the user staing 
that the number of employees added to the department is less than ive
Adding the validation
Following are the steps to add the validaion:
1. Go to the Business Rules secion of DeptEO.xml. You will ind the Business Rules 
secion in the Overview tab.
2. Select Enity Validators and click on the + buton. You may right-click on the Enity 
Validators folder and then select New Validator to add a validator.
3. Select Collection as Rule Type and move on to the Rule Deiniion tab.
4. In this secion, select Count for the Operaion ield; Accessor is the associaion 
accessor that gets added through a composiion associaion relaionship. Only the 
composiion associaion accessor will be listed in the Accessor drop-down menu. 
Select the accessor for EmpEO listed in the dropdown, with Empno as the value  
for Atribute.
In order to create a composition association accessor, you will 
have to create an association between DeptEO.xml and 
EmpEO.xml based on the Deptno attribute with cardinality 
of 1 to *. The Composition Association option has 
to be selected to enable a composition relationship between 
the two entities.
5. The value of the Operator opion should be selected as Greater Than. Compare 
with will be a literal value, which is 5 that can be entered in the Enter Literal Value 
secion below.
Specifying the execution rule
Following are the steps to specify the execuion:
1. Now to set the execuion rule, we will move to the Validaion Execuion tab.
2. In the Condiional Execuion secion, add Deptno = '10' as the value for 
Condiional Execuion Expression.

Chapter 4
[ 103 ]
3. In the Triggering Atribute secion, select the Execute only if one of the Selected 
Atributes has been changed checkbox.
4. Move the Empno atribute to the Selected Atributes list. This will make sure that 
the validaion is ired only if the Empno atribute is changed:
Displaying the error message
Following are the steps to display the error message:
1. Go to the Failure Handling secion and select the Error opion for Validaion  
Failure Severity.
2. In the Failure Message secion, enter the following text:
Please enter more than 5 Employees.
3. You can add the message stored in a resource bundle to Failure Message by  
clicking on the magnifying glass icon.

Validaing and Using the Model Data
[ 104 ]
What just happened?
We have added a collecion validaion for our EmpEO.xml object. Every ime a new 
employee is added to the department, the validaion rule ires as we have selected Empno 
as our triggering atribute. The rule is also validated against the condiion that we have 
provided to check if the department number is 10. If the department number is 10, the 
count for that department is calculated. When the user is ready to commit the data to  
the database, the rule is validated to check if the count is greater than 5. If the number  
of employees added is less than 5, the error message is displayed to the user.
When we add a collecion validator, the EmpEO.xml ile gets updated with appropriate 
entries. The following entries get added for the aforemenioned validaion in the EmpEO.
xml ile:
<validation:CollectionValidationBean
    Name="EmpEO_Rule_0"
    ResId= 
      "com.empdirectory.model.entity.EmpEO_Rule_0"
    OnAttribute="Empno"
    OperandType="LITERAL"
    Inverse="false"
    CompareType="GREATERTHAN"
    CompareValue="5"
    Operation="count">
    <validation:OnCondition>
      <![CDATA[Deptno = '10']]>
    </validation:OnCondition>
</validation:CollectionValidationBean>
<ResourceBundle>
    <PropertiesBundle
      PropertiesFile= 
        "com.empdirectory.model.ModelBundle"/>
</ResourceBundle>
The error message that is added in the Failure Handling 
secion is automaically added to the resource bundle.
The Compare validator
The Compare validator is used to compare the current atribute value with other values.  
The atribute value can be compared against the literal value, query result, expression,  
view object atribute, and so on. The operators supported are equal, not-equal, less-than, 
greater-than, less-than or equal to, and greater-than or equal to.

Chapter 4
[ 105 ]
The Key Exists validator
This validator is used to check if the key value exists for an enity object. The key value can 
be a primary key, foreign key, or an alternate key. The Key Exists validator is used to ind 
the key from the enity cache, and if the key is not found, the value is determined from the 
database. Because of this reason, the Key Exists validator is considered to give beter 
performance. For example, when an employee is assigned to a department deptNo 50  
and you want to make sure that deptNo 50 already exists in the DEPT table.
The Length validator
This validator is used to check the string length of an atribute value. The comparison is 
based on the character or byte length.
The List validator
This validator is used to create a validaion for the atribute in a list. The operators included 
in this validaion are In and NotIn. These two operators help the validaion rule check if an 
atribute value is in a list.
The Method validator
Someimes, we would like to add our own validaion with some extra logic coded in our Java 
class ile. For this purpose, ADF provides a declaraive validator to map the validaion rule 
against a method in the enity-implementaion class. The implementaion class is generated 
in the Java secion of the enity object. We need to create and select a method to handle 
method validaion. The method is named as validateXXX(), and the returned value will 
be of the Boolean type.
The Range validator
This validator is used to add a rule to validate a range for the atribute value. The operators 
included are Between and NotBetween. The range will have a minimum and maximum 
value that can be entered for the atribute.

Validaing and Using the Model Data
[ 106 ]
The Regular Expression validator
For example, let us consider that we have a validaion rule to check if the e-mail ID provided 
by the user is in the correct format. For the e-mail validaion, we have some common rules 
such as the following:
 

The e-mail ID should start with a string and end with the @ character
 

The e-mail ID's last character cannot be the dot (.) character
 

Two @ characters are not allowed within an e-mail ID
For this purpose, ADF provides a declaraive Regular Expression validator. We can use the 
regex patern to check the value of the atribute. The e-mail address and the US phone 
number patern is provided by default:
 

Email: [A-Z0-9._%+-]+@[A-Z0-,9.-]+\.[A-Z]{2,4}
 

Phone Number (US): [0-9]{3}-?[0-9]{3}-?[0-9]{4}
You should select the required patern and then click on the Use Patern buton  
to use it. Matches and NotMatches are the two operators that are included  
with this validator.
The Script validator
If we want to include an expression and validate the business rule, the Script validator  
is the best choice. ADF supports Groovy expressions to provide Script validaion for  
an atribute.
The UniqueKey validator
This validator is available for use only for enity-level validaion. To check for uniqueness in 
the record, we would be using this validator. If we have a primary key deined for the enity 
object, the Uniqueness Check Deiniion secion will list the primary keys deined to check 
for uniqueness, as shown in the following screenshot:
If we have to perform a uniqueness check against any atribute other than the primary key 
atributes, we will have to create an alternate key for the enity object.

Chapter 4
[ 107 ]
Time for action – creating an alternate key for DeptEO
Currently, the DeptEO.xml ile has Deptno as the primary key. We would add business 
validaion that states that there should not be a way to create a duplicate of the department 
name that is already available. The following steps show how to create an alternate key:
1. Go to the General secion of the DeptEO.xml ile and expand the Alternate Keys 
secion. Alternate keys are keys that are not part of the primary key.
2. Click on the litle + icon to add a new alternate key.
3. Move the Dname atribute from the Available list to the Selected list and click on  
the OK buton.
What just happened?
We have created an alternate key against the Dname atribute to prepare for a unique check 
validaion for the department name. When the alternate key is added to an enity object,  
we will see the AltKey atribute listed in the Alternate Key secion of the General tab.
In the DeptEO.xml ile, you will ind the following code that gets added for the alternate  
key deiniion:
<Key
    Name="AltKey"
    AltKey="true">
    <DesignTime>
      <Attr Name="_isUnique" Value="true"/>

Validaing and Using the Model Data
[ 108 ]
      <Attr Name="_DBObjectName" Value="HR.DEPT"/>
    </DesignTime>
    <AttrArray Name="Attributes">
      <Item Value= 
        "com.empdirectory.model.entity.DeptEO.Dname"/>
    </AttrArray>
</Key>
Have a go hero – compare the attributes
For the irst ime, we have learned about the validaions in ADF. So it's ime for you to  
create your own validaion for the EmpEO and DeptEO enity objects. Add validaions  
for the following business scenarios:
1. Coninue with the creaion of the uniqueness check for the department name in  
the DeptEO.xml ile.
2. The salary of the employees should not be greater than 1000. Display the following 
message if otherwise:
Please enter Salary less than 1000.
3. Display the message invalid date if the employee's hire date is ater 10-10-2001.
4. The length of the characters entered for Dname of DeptEO.xml should not be 
greater than 10.
5. The locaion of a department can only be NEWYORK, CALIFORNIA, or CHICAGO.
6. The department name should always be entered in uppercase. If the user enters a 
value in lowercase, display a message.
7. The salary of an employee with the MANAGER job role should be between 800 and 
1000. Display an error message if the value is not in this range.
8. The employee name should always start with an uppercase leter and should end 
with any character other than special characters such as :, ;, and _.
9. Ater creaing all the validaions, check the code and tags generated in the enity's 
XML ile for each of the aforemenioned validaions.
Groovy expression
ADF Business Components uilize Groovy expressions to support scriping. Groovy is  
an open source, Java-like scriping language that can be stored in an XML deiniion ile.  
For instance, the atribute name for the employee name Ename can directly be used in  
a Groovy expression to represent the value of the Ename atribute.

Chapter 4
[ 109 ]
Groovy follows the same JavaBeans way of accessing the methods of an enity object that is 
deined in the Java class. Following are some of the ways to call the method of enity objects 
in a Groovy expression:
Java method
Groovy expression
isEmployee()
employee
getEmployee()
employee
getEmpNo(int n)
source.emp(5)
checkEmployeeName()
source.checkEmployeeName()
checkEmployeeNo(int n)
source.checkEmployeeNo(5)
Setting a default value
We can set a default value for an atribute in the enity or view object by using the Groovy 
expression. The Default Value secion for the atribute is provided with three opions—Literal, 
Expression, and SQL. For the Literal value, we can provide a literal value. The Expression opion 
is used to provide a value that is evaluated at runime and to dynamically assign a default value 
to the atribute.
Time for action – setting a default salary for employees
For example, consider a case wherein we want to set a default value for the salary atribute 
in the EmpEO.xml ile based on the Deptno atribute. In this case, we have to provide an 
expression that will be evaluated at runime to provide the default value. The following steps 
show us how to do this:
1. Click on the Sal atribute from the list of atributes displayed in the Atributes 
secion of EmpEO.xml.
2. In the Default Value secion, select the Expression opion. Now the pencil icon  
will be enabled for the textbox below the Expression opion.
3. Click on the pencil icon to open an Edit Expression Editor window, and add the 
following code in the Expression editor box:
if(Job == 'MANAGER'){
  Sal = 1000;
}
else{
  Sal = 2000;
}

Validaing and Using the Model Data
[ 110 ]
4. Select the Job atribute as the calculaion is dependent on it.
5. Now click on the OK buton to add the expression for seing a default value for  
the Sal atribute.
What just happened?
We have created the default value for the atribute whose value is determined at runime, 
using Groovy expression. This means that whenever we create a new record for the EMP table 
through EmpEO, If job is MANAGER, the Sal atribute is defaulted to 1000; otherwise the Sal 
atribute is defaulted to 2000. We will have a dependency set for the Sal atribute on job; 
this means whenever the value of job changes, the value of the Sal atribute is recalculated.

Chapter 4
[ 111 ]
Have a go hero – set some default values for other attributes
We have now learned to set the default atribute using Groovy expressions. We will perform 
the following exercises to get familiar with the language:
1. Set the default value for Job to CONTRACTOR when the value of Empno is greater 
than 100 in EmpEO.
2. The Loc atribute for the DeptEO object will default to CHICAGO every ime.
Validation execution
Validaion execuion is a secion in atribute validaion to set the execuion rule. This is 
similar to the execuion rule that we had set for enity-level validaion. The validaion for  
the atribute is executed only if the condiion added to the expression editor is saisied.
For example, we can have a compare validaion set on the Sal atribute against 1000,  
say 9, and set the validaion execuion condiion as Job == 'MANAGER'. This means  
the compare validaion is executed only if the Job atribute is equal to MANAGER.
The validaion execuion secion for enity-level 
validaion will include a triggering atribute secion 
that is not available in atribute validaion.

Validaing and Using the Model Data
[ 112 ]
Some commonly used expressions
Groovy expressions are used in ADF Business Components to evaluate and validate business 
logic. Groovy expression is preferred declaraive expression language for the enity and  
view objects.
Someimes, we will add an atribute for the enity or the view 
object with the values defaulted using Groovy expression as a 
calculated atribute known as transient atribute.
The following table gives the expressions and their funcionaliies:
Expression
Functionality
getAttribute("Sal")
This expression will fetch the Sal attribute.
(Date)getAttribute("HireDate")
This expression will cast the HireDate 
attribute value to Date.
new TimeStamp(System.
currentTimeMillis())
This expression will create a new Timestamp 
object from the current system time in long.
newValue
This expression will get the new value for the 
attribute in the attribute-level validator.
oldValue
This expression will get the old value for the 
attribute in the attribute-level validator.
source
This expression will refer to the current entity 
object.
adf.context
This expression will refer to the ADFContext 
object.
adf.object
This expression will refer to the current object 
to which the expression is applied.
adf.error
This expression will give the reference for the 
current error handler object.
adf.error.raise
This expression will raise an exception.
adf.error.warn
This expression will raise a warning.
adf.currentDate
This expression will refer to the current 
date with no time.
adf.currentDateTime
This expression will refer to the current date 
and time.
rowSetAttr.sum(),rowSetAttr.
count(), rowSetAttr.min(), 
rowSetAttr.max(), rowSetAttr.
avg()
You can call the aggregate function on the ADF 
RowSet object. RowSet is a collection of rows 
returned through an association accessor.

Chapter 4
[ 113 ]
Most of the Java methods such as subString(), compareTo(), 
and equals() can also be used in Groovy expressions along with 
some speciic methods from EntityImpl.
Time for action – adding a script expression
Let us work on the Script expression validator for the Job atribute to understand the full 
advantages of Groovy expressions. Follow these steps:
1. Select the Job atribute in the EmpEO enity object from the Attributes list.
2. Click on the + icon to add a new validator.
3. Select the Script Expression validator for the Rule Type opion. This will open  
an Expression editor secion to write the script.
4. Enter the following code in this editor secion:
String value = newValue; 
String trim = value.trim(); 
if(trim.equals('MANAGER')){ 
adf.error.warn('NO_VACANCY'); 
return false;
}
return true;
5. You can click on the Text Syntax buton to check if the syntax is correct.
6. Click on the OK buton to add the script expression.

Validaing and Using the Model Data
[ 114 ]
What just happened?
We have added a script validaion for the Job atribute. The script is writen to do the 
following:
1. Assign the current value to the variable called value.
2. The trimmed value is saved in a variable called trim.
3. We are checking if the value of trim is equal to MANAGER.
4. If the trimmed value is equal to MANAGER, then raise a warning from the  
property ile for the resource bundle that says "No Posiion available to  
add more Managers".
To add the warning message, you will have to select the Failure Handling tab and 
click on the magnifying glass icon.
5. The ADF warning is displayed from the resource bundle, and in this case, there is  
no need to add a failure-handling message as we are already displaying a warning  
to the user.
6. The return statement true or false signiies whether the result for the expression 
has passed or failed.
Have a go hero – try more features of Groovy expressions
You should try out more features of Groovy expressions to increase your proiciency in 
wriing eicient scriping code and add declaraive validaion without having a separate  
class for the Java API.
You may try the following exercise:
1. Try adding an atribute called DeptName to the EmpEO enity object and provide  
the default value as DepName- along with the Deptno enity added at the end.
For example, if an employee belongs to department number 50, the DeptName 
atribute should default to DepName-50.
2. List down all the common methods between Java and Groovy expressions,  
and note down how these methods difer.

Chapter 4
[ 115 ]
Learning about APIs
Unil now, we have seen the declaraive power of ADF business components. Now we will 
see its programming capabiliies and how ADF can leverage complex business scenarios 
using the Java API.
From all of the ADF components available, only the enity object, view object, and 
applicaion module will allow the user to generate and extend the Java API. Every  
class created for the business components will extend the parent class, which will  
take care of the logic of an enire complex framework.
Generating an entity implementation class
Generaing a Java API for a business component is a straighforward task. Most of the ime, 
the user is given an opion to generate the Java API while creaing the enity object, view 
object, or an applicaion module. If the user skips this step, we can add the API for the 
business components from the Java tab.
Java classes in entity objects
An enity object will allow you to generate three types of Java classes. Each of these APIs 
is separated to handle and maintain diferent secions of the enity object within the 
framework. The three classes are as follows:
 

Enity object: This class will have all the methods that represent the database rows. 
The atributes in this class represent columns in the database table.
 

Enity collecion: This class will be used to cache the queried rows for the 
EntityImpl class.
 

Enity deiniion: This class will have the metadata deiniion of an enity object class.
Time for action – generating a Java API for DeptEO
In our previous exercise, we did not select the opions to generate the Java API in Create 
Component Wizard. The following steps will show how to generate a Java API for the 
EmpEO.xml ile:
1. Select the EmpEO.xml ile from the Model project in the Projects pane.

Validaing and Using the Model Data
[ 116 ]
2. Click on the Java tab and then click on the pencil icon. This will open the opion  
to select the Java class iles:
3. Check the Generate Enity Object Class EmpEOImpl checkbox. This will create the 
EmpEOImpl class that will extend the EntityImpl class.
4. Select the Accessors opion to generate the atribute's getter and setter 
methods; Create Method will generate the create() method; Data Manipulaion 
Methods will create the lock() and doDML() methods and Remove Method will 
create the remove() method.
5. Checking the Generate Enity Collecion Class EmpEOCollImpl checkbox will create 
the EmpEOCollImpl class that will cache the queried enity row. This class will 
extend the EntityCache class to store the rows queried in the cache.
6. Checking the Generate Enity Deiniion Class EmpEODefImpl opion will create  
the EmpEODefImpl class where you can store the metadata informaion for the 
enity object class.
7. Click on the OK buton to create the classes. The getDefinitionObject() 
method in the EntityImpl class will help in retrieving the deiniion object for 
the enity. The deiniion object is used to retrieve the deiniions of the enity 
atributes, display name, UI hints, and so on.

Chapter 4
[ 117 ]
You can choose base classes from Tools | Preferences | ADF Business 
Components | Base Classes. The Class Naming secion will display the 
naming format for the Java classes.
What just happened?
We have created three classes for EmpEO. Most of the ime, we will be working on the 
EntityImpl class for doing any business operaions.
Let us see some of the useful enity methods that can be overridden from the base class to 
perform various operaions on enity objects:
Operation
Explanation
setAttribute(): For example, if the 
attribute is Empno, the setter will be 
setEmpno().
This method is used to set the attribute 
information for an entity object.
getAttribute(): For example, if the 
attribute is Empno, the setter will be 
getEmpno().
This method is used to get the attribute value 
of an entity object.
create()
This is used to create a new entity object.
initDefaults()
The defaulting logic for an entity object can be 
added to this method.
validateEntity()
This method is used to validate an entity.

Validaing and Using the Model Data
[ 118 ]
beforeCommit()
Logic that has to be applied before committing 
the record is added in this method.
afterCommit()
Logic that has to be applied after committing 
the record is added in this method.
remove()
This method is used to remove an entity 
object.
doDML()
This method is used to perform operations 
based on the DML operations INSERT, 
UPDATE, and DELETE.
Classes for view objects
A view object also has three classes that are used to represent the view object and its 
metadata informaion. A view object's classes are also generated in the same way as  
that of an enity object. The three classes are as follows:
 

View object: This class will represent the view object itself. All operaions related  
to the view object can be performed using this class.
 

View row: This class will represent and provide access to the row of a view object. 
This class is similar to the enity object class.
 

View deiniion: This class will hold references to the metadata informaion of the 
view object. We can usually access the deiniion object by using the getDef() 
method from the ViewObjectImpl class.
Most of the ime, we will be working with the view object class to perform tasks 
programmaically. There are some operaions that are used quite oten in a view  
object implementaion class; they are described in the following table:
Operation
Explanation
setWhereClause()
This method is used to set the Where clause for  
a view object.
createViewCriteria()
This method is used to create view criteria 
programmatically.
setOrderByClause()
This method is used to set the Order by clause  
for the current view object.
applyViewCriteria()
This method is used to apply an already created 
view criteria to the view object to add dynamic 
query parameters.
clearCache()
This method clears the cached row information  
in the view object.

Chapter 4
[ 119 ]
Operation
Explanation
remove()
This method is used to remove the current view 
object.
setMaxFetchSize()
This method is used to set the maximum fetch 
size for a view object programmatically.
executeQuery()
This method is used to execute the view object's 
query.
Application module API
Applicaion module APIs are meant for transacion management. Someimes, we can uilize 
and expose the methods writen in the applicaion module to the view layer. Following are 
classes of the applicaion module API:
 

Applicaion module: This class will have all the operaions related to maintaining 
and coniguring an applicaion module. The transacion management-related 
funcionaliies are built within this class.
 

Applicaion module deiniion: This class is used to store metadata informaion 
related to the applicaion module. We would not generate this class in real ime  
as it is never used.
Some of the methods that are common in the applicaion module are as follows:
Operation
Explanation
createViewObject()
This method is used to create a view object for an 
application module.
findViewObject(String)
This method will find the view object added to an 
application module. The String parameter will 
represent the view object's name.
getTransaction()
This method is used to get the current transaction object.

Validaing and Using the Model Data
[ 120 ]
beforeRollback()
All operations that have to be done before rolling back 
the transaction are done in this method.
beforeCommit()
All operations that have to be done before committing 
the transaction go in here.
Time for action – learning to override a method
The following steps will show how to override a method from the class and then write our 
own logic in the method. We will have EmpDirectoryModuleImpl as our example here:
1. Right-click on the EmpDirectoryModuleImpl class and select the Source opion.
2. Click on the Override Methods… opion to override the operaions from the  
base class.
3. Type in the method name, for example befo, in the search box that will fetch 
methods staring with that literal.
4. Check the beforeCommit() operaion and click on OK.
5. Add the following code:
ViewObject vo = findViewObject("EmpVO3");
vo.clearCache();
vo.executeQuery();

Chapter 4
[ 121 ]
6. This code has to be added before the super.beforeCommit(transactionEvent) 
code statement.
What just happened?
Before commiing the transacion:
 

We are providing a handle to the EMPVO3 view object, which is the view instance  
of the child view object for DeptVO1
 

The second line clears the cache for the view object and the last line will execute  
the query.
Have a go hero – more on programming using APIs
Take a look at all the classes that were generated and see how they are diferent from  
the others.
Override some of the framework methods and then write some logic to operate on the 
objects diferently.
Managing transactions
An applicaion module is the business service component that encapsulates the logical unit 
of work. We can have diferent applicaion modules represening diferent units of work.
An applicaion module deines database sessions and provides transacion boundaries. 
It also controls concurrent data accesses. An applicaion module is also responsible for 
maintaining the connecion-pooling mechanism for the available connecions.
Coniguring transactions
When we create business components, we are asked to create a database connecion.  
We have created HRSchema as our connecion, and the applicaion module component  
will use this connecion to create the transacion and session. If needed, the applicaion 
module can also share the transacion.
We will use the Coniguraions tab in the applicaion module to create a coniguraion  
for the client to interact with the applicaion modules. Using JDBC Datasource is 
recommended for the WebLogic server to handle connecion pooling.

Validaing and Using the Model Data
[ 122 ]
Time for action – creating conigurations
Carry out the following steps for creaing a coniguraion:
1. Click on the Coniguraions tab in the EmpDirectoryModule.xml ile.
2. Click on the + icon to add the coniguraions.
3. The Create Coniguraion box will open for you to create the coniguraions in.
4. In order to create the local coniguraion, provide EmpDirectoryModuleLocal  
as the Coniguraion Name.
5. When you select the coniguraion type as JDBC URL in the applicaion module, the 
HRSchema informaion will be populated automaically. For the shared connecion, 
you will select JDBC Datasource. The data source name will be changed to jdbc/
HRSchemaDS.
6. Clicking on the pencil icon ater selecing the coniguraion will fetch the Edit 
Coniguraion box.

Chapter 4
[ 123 ]
7. The Pooling and Scalability tab will have properies that you can set for pooling  
and scalability.
8. The Properies tab will display the runime parameters for the coniguraions.
What just happened?
We have created a coniguraion using the HRSchema connecion for the clients to be able 
to interact with the deployed applicaion modules. Whenever a coniguraion is created, we 
will have a ile named bc4j.xcfg to hold the informaion that has been provided for the 
coniguraions. Each of the connecions and the coniguraion informaion is stored in this 
ile along with other runime parameters used for pooling and high availability.
Have a go hero – explore the bc4j.xcfg ile
Explore the bc4j.xcfg ile to know more about the coniguraions and properies 
associated with each of the coniguraions.
Exposing data
We can expose the operaion of the business components to the view layer using the client 
interface opion. The opion to expose the methods from the Java class is explained in the 
following segments.
Time for action – exposing a method using the client interface
Carry out the following steps to expose a method using the client interface:
1. Open the EmpDirectoryModuleImpl.java ile and add the following method:
public String getHelloWorld(){
    return "Hello World";
}
2. Go to the Java tab from the EmpDirectoryModule.xml ile, and click on the pencil 
icon in the Client Interface secion.

Validaing and Using the Model Data
[ 124 ]
3. The Edit Client Interface window will open. Move the getHelloWorld() method 
from the Available list to the Selected list as shown in the following screenshot:
4. Click on the OK buton to create the interface method.
What just happened?
We now have the client interface deined to expose the getHelloWorld() method from 
the EmpDirectoryModuleImpl class to the outside world. The EmpDirectoryModule.
java interface will be created to expose the method as a service in the data control. 
The EmpDirectoryModuleClient class will implement the interface to invoke the 
getHelloWorld() method from EmpDirectoryModuleImpl.

Chapter 4
[ 125 ]
You can now see the getHelloWorld() method exposed to the view layer in the Data 
Controls palete as shown in the following screenshot:
Pop quiz
Q1. ______________ and ______________ are the validators available only for  
enity-level validaions.
Q2. We can use the following validator to extend the validaion using a Java class:
1. 
List
2. 
UniqueKey
3. 
Method
4. 
Compare
Q3. Which of the following is used in a Groovy expression to raise excepions?
1. 
adf.context
2. 
adf.error.raise
3. 
adf.object
4. 
adf.error.warn
5. 
adf.error
Q4. The enity collecion class is used to store metadata informaion of an enity object.
1. True
2. False

Validaing and Using the Model Data
[ 126 ]
Q5. Which of the following iles will hold the informaion about connecions and 
coniguraions related to the applicaion module?
1. 
connection.xml
2. 
jps-config.xml
3. 
bc4j.xcfg
4. 
jazn-data.xml
5. None of the above
Summary
Let us recap what we have learned in this chapter. We started with the informaion related  
to validaions in ADF business components. Also, we learned to use all the built-in declaraive 
validators available in ADF and saw how to use Groovy expression to validate business logic.
We now know how to generate Java classes for the business components and make use 
of the framework methods used to write complex business requirements. We learned 
to manage transacions using the applicaion module and related coniguraions. Finally, 
we exposed business data as a service to the outside world from the view object and the 
applicaion module.
In the next chapter, we will see how to expose the business data service to the view layer 
using data controls and how to bind the data as informaion to be displayed in the UI.

5
Binding the Data
Validation has been completed for our business components and we are now  
at the stage where we will expose the underlying business service to the outside 
world. The components involved in exposing the services to the view layer are 
simple with the help of ADF data control layer. The data control layer abstracts 
the implementation logic of business services and provides a common metadata 
interface to access the operation, data collection, and properties. Data control is 
based on service-oriented principles to decouple service integration from the view 
layer. In this way, the service and the user interfaces for the service are separated, 
and the implementation logic for the business service is abstracted.
In this chapter, we will learn about:
 

ADF model layer
 

Data control
 

Binding the data
 

Working together with the data control layer and binding
 

Creaing page deiniions

Binding the Data
[ 128 ]
ADF model layer
The ADF model layer is the architectural element that will allow the UI layer to interact with 
the data layer. The model layer is responsible for providing the key business services that 
are available in the view layer. The informaion is bound to the UI component with the help 
of the bindings deined in the page deiniion ile. The PageDef ile that is created for each 
ADF bound view holds the binding deiniion for the view's UI components to query data 
from the business service. The following screenshot explains the relaionship between the 
UI page and the page deiniion ile. Here we can see that the Empno column in the UI is 
mapped to the Empno atribute exposed from the EmpVO1 enity through the Data controls 
pane. The table data displayed in the UI uses the collecion model of the EmpVO1 collecion 
binding. Collection Model is the object that holds the collecion of rows returned from 
the VO query in the row set. The binding will make use of the EmpVO1Iterator module in 
the executable secion to iterate the data from the EmpVO1 collecion from the data control 
palete. The data control layer is populated using the data control layer usage informaion 
deined in the DataBindings.cpx ile.
In our EmpDirectoryApplication applicaion, we have dragged and dropped the 
EmpVO1 instance from the Data Controls panel to the index.jspx page to display the 
data them the EMP table. The table component is ied up to the EmpVOIterator module 
of the page deiniion ile to collect the data to display in the UI layer. The tree binding 
EmpVO1 of the indexPageDef.xml ile uses the EmpVO1Iterator executable to 
display the data exposed through the data control layer. In our previous chapter, we have 
exposed the getHelloWorld() operaion from the application module to display 
the informaion in the UI page. There are other built-in operaions, such as commit and 
rollback from the application module, that can be exposed through the data control 
layer using the ADF model bindings. These built-in operaions are not exposed in the 
previous secion of the screenshot.

Chapter 5
[ 129 ]
Data Controls palette
The Data Controls palete is the component in the IDE that exposes the  
available application module as a data control layer within the applicaion.  
In our EmpDirectoryApplication applicaion, we have two applicaion modules 
registered in the Model.jpx ile as highlighted in the following screenshot:
The Data Controls palete will have the components explained in the following secion.
Data control
The available application module is displayed as a data control layer in the palete. 
The data control layer is a metadata deiniion that translates the API of the speciic 
business service implementaion to a generic format allowing declaraive and consistent 
development. A user cannot drag-and-drop this component to the page because of the 
reason stated in the previous secion.
The view object collection
The view object instance that is added to the application module is displayed as 
the view object collecion in the Data Controls palete. All the available atributes in 
the view object collecion are contained in the view object collecion. The collecion 
can be dragged and dropped on the page as a UI component that supports iteraion. For 
example, the carousel, tree, and table components iterate through the collecion 
model to display the rows in the UI. In the following screenshot, we can see that the 
EmpDirectoryModuleControl module is lising the DeptVO1 and EmpVO1 view object 
instances as a collecion and source, respecively, to expose the underlying atributes:

Binding the Data
[ 130 ]
Attributes
The atributes are displayed within the view object collecion. The collecion will hold  
all the atributes available for the view object collecion. The atributes are dragged  
and dropped onto the page to display the informaion of the paricular atribute.
Operations
Operaions are the acions bounded within the application module or the view object 
collecion. The exposed operaions are mapped to an acion component to invoke the acion 
and execute the operaion.
For the application module, we have the default operaions deined. They are the Commit 
and Rollback operaions.
The operaions available for the view object collecion are as follows:
 

Create: This operaion is available to create a new record for the table component. 
The newly created record will not be inserted and is not displayed in the UI for a table 
component. For a form-based component, this method will create a new record and 
will display the informaion.
 

CreateInsert: This operaion will create a new record and will also insert a  
blank record if there is no default value assigned for the atributes of the record.  
The newly created row is displayed in the UI for the table component.
 

Create with parameters: This method will allow the user to create a new 
record with some parameters, and the values passed as parameters will be 
predeined for the created row.
 

Delete: This operaion is used to delete the current row from the view  
object collecion.
 

Execute: This operaion will execute and refresh the current collecion.
 

Find: To ind a speciic record in the collecion object.

Chapter 5
[ 131 ]
 

First: This method sets the current row so that the irst row is shown to the user.
 

Last: This operaion is used to set the last row of the view object collecion  
as the current row.
 

Next: This operaion is used to refer to the next row in the collecion as the  
current row.
 

Next Set: This operaion is used to move to the next set in the collecion.
 

Previous: This method is used to set the previous record as the current row.
 

Previous Set: This method is used to move to the previous set in the view 
object collecion.
 

removeRowWithKey: The key value is provided for this operaion to remove the 
row matching the corresponding key.
 

setCurrentRowWithKey: The current row in the collecion is set to the row 
matching the corresponding key passed using this operaion.
 

setCurrentRowWithKeyValue: This operaion will set the row to the matching 
key value.
Methods
All the methods exposed in the application module or the view objects are displayed as 
a method element. Users can map the method to a buton or a command link or any other 
acion component to invoke the method.

Binding the Data
[ 132 ]
Return
The return element will represent the value that is returned from the method displayed.
Parameters
The parameters for the operaions are displayed in the Parameters secion within  
the operaions that expect a parameter to complete the acion as shown in the  
following screenshot:
View criteria
For the view object collecion, the queriable atributes are displayed within the Named 
Criteria secion. The available view criteria are displayed in this secion, and the user can use 
this secion to create a query component to build a quick search component for the UI layer. 
The All Queriable Atributes element is present by default in the view instance collecion 
(which will be displayed to query the atributes within the view object) of the Data Controls 
palete as shown in the following screenshot:

Chapter 5
[ 133 ]
Time for action – adding a Commit button to the UI page
Now we will see how we can expose the built-in Commit operaion to the UI using the data 
control layer:
1. In the Data controls palete, as shown in the following screenshot, navigate to 
EmpDirectoryModuleDataControl:
2. Under the EmpDirectoryModuleDataControl opion, expand the Operaions secion 
and select the Commit operaion as shown in the preceding screenshot.
3. Drag this operaion to the index.jspx page in the Source view and place it just 
ater the </af:table> tag.
4. Select the ADF Buton opion from the menu displayed. This acion will create a 
Commit buton to save the changes to the database.
5. The page deiniion for the index.jspx ile is accessed by clicking on the Bindings 
secion for the page.
What just happened?
In the previous acion exercise, we created a Commit operaion to save the changes made 
in the UI layer to the database layer. When we select the ADF Buton opion from the menu, 
a command buton is created in the page with the actionListener property mapped to 
the #{bindings.Commit.execute} method. Acion binding is used to bind the method 
exposed from the application module or the view object collecion. The Commit 
operaion is exposed in the application module as shown in the following code:
<af:commandButton actionListener="#{bindings.Commit.execute}" 
text="Commit" disabled="#{!bindings.Commit.enabled}" id="cb1"/>

Binding the Data
[ 134 ]
This is a reference to the acion binding that is created in the indexPageDef.xml ile.  
To verify this, go to the Bindings view and check whether the Commit acion is added to  
the page deiniion ile just below the EmpVO1 instance in the Bindings secion as shown  
in the following screenshot:
In the page deiniion ile, we can see that the Commit acion is mapped to the 
commitTransaction operaion of EmpDirectoryModuleDataControl as shown  
in the following code:
<action id="Commit" RequiresUpdateModel="true" 
Action="commitTransaction"
            DataControl="EmpDirectoryModuleDataControl"/>
Have a go hero – inserting the records
When you run the index.jspx page with the previous changes, you will see a buton that 
is disabled. The buton is disabled because we have set the disabled property to theEL 
expression, that is, #{!bindings.Commit.enabled}. This means the Commit buton  
will be enabled only if there are any modiied records available for the enity object.
Now your task is to add the CreateInsert operaion from the EmpVO1 instance so that  
we have an opion to modify the record using the CreateInsert method available for  
the view object instance.
Ater adding the buton, the page will allow you to create a new record for the EMP table, 
and we can save the changes to the database.

Chapter 5
[ 135 ]
You will have the following screen when you add the CreateInsert operaion as a buton. 
A record is inserted and commited to the database. The inserted record is highlighted in the 
following screen:
Working with the data control layer and binding
When we create a page for the irst ime, the page deiniion is not created for the page. The 
page deiniion ile is created for the page only if the page contains any components bound 
to the data control layer using the bindings. For example, when we add a text component to 
display the Empno value from the EMP table, the page deiniion ile, indexPageDef.xml, 
is created with the corresponding atribute bindings that map it to the underlying Empno 
atribute from the EmpVO view object. The page deiniion ile will be created in the adfmsrc 
folder inside the ViewController project. For example, the indexPageDef.xml ile will 
be created in \ViewController\adfmsrc\com\empdirectory\view\pageDefs.
To go to any ile locaion in the Applicaion Navigator window, you 
just have to right-click on the source ile and click on the Select in 
Navigator opion on the menu that pops up.

Binding the Data
[ 136 ]
Time for action – accessing the page deinition ile
We can use muliple means to access the page deiniion ile from the page as follows:
1. Right-click on the index.jspx page that is created using the Create JSF Page wizard.
2. Select the Go to Page Deiniion opion.
3. If you already have the bindings in the page, the easiest way to access the page 
deiniion is to select the Bindings tab for the page.
What just happened?
We just found the way to navigate to the page deiniion from the .jspx page. For the new 
ile, the page deiniion ile will not be created. The page deiniion is mandatory for any 
bindings that the UI component uses in the page.

Chapter 5
[ 137 ]
Creating the bindings manually
As we know, bindings can be created in the page deiniion ile by dragging and dropping 
the binding data onto the page from the data control layer. However, someimes we have 
to create the bindings manually just to access the underlying data programmaically. In this 
case, the opion available to the user is to create the bindings using the Add opion in the 
bindings secion, and selecing the Generic Bindings category in the Insert Item window.
The bindings items available for users are are as follows:
 

action: The action item is used to bind the operaions available from the  
ADF model layer. The Data Controls palete will expose the methods from  
the view object collecion or the application module, which can be  
mapped to the action item in the page deiniions. Some common acions  
are Commit, Rollback, Create, and so on. These items are used commonly  
in the actionListener property of the ADF Buton component to execute  
the acions such as #{bindings.Commit.execute}. The Data Collecion  
secion will list the data controls to select the appropriate operaion in the  
Edit Acion Binding wizard as shown in the following screenshot:

Binding the Data
[ 138 ]
 

attributeValues: The attributeValues item will map to the atributes of  
the view object collecion. For example, the Empno atribute from the EmpVO 
object is added to the binding secion as attributeValues. The data source  
and the atribute are selected in the Create Atribute Binding wizard as shown  
in the following screenshot:
 

button: The button control is there to control the bindings of the selected and the 
unselected state of the radio buton. For example, if we want to map the selecion 
of the radio buton to Yes and the unselected state to No, we can use the buton 
item for the binding.
 

eventBinding: The eventBinding operaion is used to control the event for the 
component. Contextual events use eventBindings to publish and subscribe to an 
event. Contextual events are used to communicate between regions using events. 
When using contextual events, we will use eventBinding to register the event.  
We will refer to the event registered programmaically to raise it, and the subscriber 
will look for the speciic event raised and proceed with the process accordingly.
 

graph: While using data visualizaion components, we will use the graph binding. 
Someimes, to express the results and overview of the progress or performance 
analysis, we would like to display the result in graphical view. Graphical display 
will get informaion from diferent data sources for which we will use the graph 
binding. ADF data visualizaions components are used to display graphical data in 
the UI. Some of the DVT components are displayed in the following screenshot:

Chapter 5
[ 139 ]
 

list: The list binding will have the data sources listed in a list of values. The data 
for the "select one choice" component or "a list of values" component is bound to the 
list binding in the page deiniion. The bindings can be as simple as a record navigaion 
or a muliple selecion value list. The opion for the list is selected from the Select 
List Binding Type wizard as shown in the following screenshot. A list binding is 
used to display a selectOneChoice component or any other list component except 
inputCombooboxListOfValues in the UI.

Binding the Data
[ 140 ]
 

listOfValues: The listOfValues binding is an extension of the list binding, 
which will display the list from the ADF model layer. The opion for lising the  
values provided for the atribute in the model is displayed in the List Binding  
secion to display a list of data sources for the list of values of UI components.  
The listOfValues binding is used to display inputComboboxlistofValues 
binding informaion displayed in the UI.
 

methodAction: The methodAction binding will display the method that is 
exposed to the client as an interface in the view object or application 
modules. For example, the getHelloWorld() method in the application 
module is added as the methodAction binding.
 

navigationList: The navigationList binding is another form of list binding 
that is used to traverse the records by specifying the atribute informaion as a list. 
For example, the Empno atribute selected for the navigationList list will list all 
the Empno atributes in the collecion of rows within the view object collecion.
 

table: The table binding is used to process the range of rows within the view 
object binding. To process the range set to display a speciic row of the table in  
a SelectOneChoice component is achieved using a table binding. This binding  
is for backward compaibility and should never be used.
 

tree: The tree binding will be used to bind the view object collecion in a  
tree structure displaying the view object rows in a hierarchy. The parent and  
the child elements will be deined, and the tree binding will take care of displaying 
the informaion in a tree node in the UI. The tree binding is useful for displaying 
the informaion in a table or a treeTable component in the UI.
 

treeTable: The treeTable binding is similar to that of a table binding except that 
the treeTable has a tree structure with a parent-child relaionship that is mapped like 
a tree binding. This binding is for backward compaibility and should never be used.

Chapter 5
[ 141 ]
Time for action – creating page deinition bindings
The following steps are used to create page deiniion bindings:
1. In the Bindings secion, click on the + icon.
2. The Insert Item wizard opens and will list all the bindings opions for the page 
deiniion ile as shown in the following screenshot:
3. Click on the acion item; this will open a Binding for Acion palete.
4. Select the EmpDirectoryModuleDataControl opion; this will populate the 
Operaion secion with the Commit operaion.
5. Click on the OK buton and binding creaion is complete.

Binding the Data
[ 142 ]
What just happened?
Using the acion performed in the previous secion, we learned how to create the bindings  
in the page deiniion ile. The Commit acion binding will be displayed in the binding 
container of the page deiniion ile. In the Create Acion Binding dialog, the operaion  
is populated automaically because Commit and Rollback are the opions available by 
default in EmpDirectoryModuleDataControl.
Adding executables
Just like creaing the bindings for the component, we can add the executable for the page 
deiniion by clicking on the Add buton in the Executables secion of the page deiniion  
ile as shown in the following screenshot:
Some of the items in the Executables secion are as follows:

Chapter 5
[ 143 ]
accessorIterator
acessorIterator is used to iterate the Accessor hierarchy from the data control 
layer. The CacheResults property will manage the collecion between requests. 
ChangeEventPolicy will control the behavior of the refresh acion. The opions 
available are as follows:
 

none: The iterator is refreshed based on the refresh condiion provided.
 

push: Asynchronous data changes will automaically be refreshed.
 

ppr: ppr is a parial page rendering, which will refresh only some part of  
the page. The seing will help the iterator to be refreshed if the current  
row of the iterator is changed and the ppr acion occurs.
invokeAction
We create this executable to invoke an acion on a speciic condiion. For example, if we 
want to invoke the Commit acion on a condiion and on a page load, we will map the 
invokeAction item to the Commit operaion binding and then move the invokeAction 
item to the top as the irst executable in the list of executables in the page deiniion. The 
invokeAction item provides a Refresh property, which will allow the accessor method 
based on the opion provided. The opions available are as follows:
 

always: This opion refreshes the executable always.
 

deferred: If the refresh is based on another executable, this opion refreshes  
the executable accordingly.
 

ifNeeded: The refresh is taken care of whenever needed by the framework.  
This is the default for executables.
 

never: Never refreshes the executable.
 

prepareModel: Refreshes every ime the binding is prepared.
 

prepareModelIfNeeded: Only refreshes if needed and/or if the page binding 
container is prepared.
 

refreshAfter: Sets the dependent executable to execute the current executable 
ater the one menioned.
 

renderModel: Refreshes the executable when the page is rendered.
 

renderModeIfNeeded: Refreshes the executable only if it is needed by the 
framework when the page is rendered.
The RefreshCondition item will hold the condiion on which the refresh is to happen. 
RefreshAfter will hold the condiion ater which the executable is refreshed.

Binding the Data
[ 144 ]
iterator
The iterator item simply references a collecion to traverse the records. We can have 
the refresh condiion and parameters set to change the behavior of the iterator item. 
Iterator also has properies such as Refresh, RefreshCondition, and cacheResults. 
The RangeSize property for the Iterator item will represent the number of rows 
displayed in the Iterator collecion.
page
We can have a nested page deiniion speciied within another page deiniion as a 
container using this executable. This is primarily used to ensure that bindings of a  
template are referenced at runime.
searchRegion
The searchRegion item is an executable for querying the data using view criteria. The 
query component will make use of the searchRegion executable to query informaion 
from the database through the view criteria from the model layer.
shuttleRegion
The shuttleRegion executable is useful for the shuttle component to display the 
shuttle elements. The available and the selected list of elements is maintained within  
the shuttleRegion executable.
Pop quiz
Q1. Changes in the ______________ ile will display the informaion in the  
Data Controls palete.
1. 
bc4j.xcfg
2. 
.jspx
3. 
.jpx
Q2. Which of the following is not an executable in the page deiniion?
1. 
Iterator
2. 
SearchRegion
3. 
invokeAction
4. 
tree

Chapter 5
[ 145 ]
Q3. We can navigate to the page deiniion of a ile from the .jspx page.
1. True
2. False
Summary
Let us recap what we have learned in this chapter. We have learned how to expose the 
service from the ADF model layer. We have also seen how the data control layer is displayed 
and how to map the service from the data control layer to the UI components. Finally, we 
have seen how to bind the data using the page deiniion ile. In the next chapter, we will  
see how to display the data in the UI layer.


6
Displaying the Data
So far, we have the model data exposed to the UI layer and we have seen that 
the data control is essential in exposing the services. In the real world, the data 
comes from different sources and is presented in a way that suits the business 
and simplifies the view layer for the user. For example, a web application for a 
banking site requires a layout which is appropriate for the user to access the 
accounts information easily. A dashboard layout with graphs, gauges, and gantt 
charts are inviting for the user to see an overview of account performance. Some 
common user layouts are followed in the web application to attract customers 
and to enhance the user experience. ADF Rich Faces includes more than 150 
components to display the information in a user-preferred way. Added to this, 
the data visualization component's support in ADF will help the user to analyze 
the data in a graphical way.
In this chapter, we will learn:
 

Creaing a page
 

Laying out the page display
 

Adding the UI components
 

Running the page with model data

Displaying the Data
[ 148 ]
Creating a page
To display the content of the model layer, we will have to create the page that holds the 
model layer informaion bound using the page deiniion ile. We can create a page without 
the page deiniion to bind the data to the model layer by just adding staic content to the 
page. We can include the layout informaion and design the page that will suit the web 
applicaion context.
EmpDirectoryApplication has the index.jspx page to display the EMP table 
informaion. As the index.jspx page is the landing page for our web applicaion, we will 
move the employee informaion to a separate page named employee.jspx. In this way, 
we have our informaion separated from the landing page. Categorizing the content of the 
page is important in creaing a web-based applicaion. We will have a layout designed for our 
index.jspx page. The page creaion for the DEPT table is similar to that of the EMP table. 
We will have the department informaion displayed in the dept.jspx page. Therefore, we 
will be creaing two pages in this secion.
Knowing the page template
It is always good to have a standard look and feel for our web applicaion throughout the 
website. ADF uses the concept of page templates to provide a common layout that deines 
a uniform look and feel for the applicaion which helps display the content of the page in a 
more eicient way to the user. For example, the common layout for many of the websites 
today includes a global menu at the top, navigaion menu stacked on the let-hand side of the 
page along with the content displayed at the center of the page. There are some built-in page 
templates that come in handy when creaing a page. They are Oracle three column layout and 
Oracle dynamic tabs shell template. These are the default templates provided by ADF to start 
with basic web page creaion.
Oracle Three Column Layout
This template is used to display three secions in the page and gives room for the user to add 
contents by providing facets. The layout informaion uses the af:pageTemplate tag with 
facets deined inside it, as follows:
<af:pageTemplate viewId="/oracle/templates/threeColumnTemplate.jspx" 
id="pt1">
                    <f:facet name="center"/>
                    <f:facet name="header"/>
                    <f:facet name="end"/>
                    <f:facet name="start"/>
                    <f:facet name="branding"/>

Chapter 6
[ 149 ]
                    <f:facet name="copyright"/>
                    <f:facet name="status"/>
                </af:pageTemplate>
The facets included are:
 

start: Content added will be displayed to the let-hand side of the page.  
This secion is mostly used to display navigaion links. The size of this column  
can be adjusted using startColumnSize in the af:pageTemplate tag.
 

center: Most of the web content goes in this secion.
 

end: The Help secion and other useful links are usually displayed here.  
The size can be adjusted using endColumnSize.
 

header: This secion will display the itle of the page in the top header.
 

branding: This facet is used for backward compaibility.
 

copyright: The facet is used to display the copyright informaion in the  
botom-right corner.
 

status: This secion is used to indicate the status of the page upon requests.  
This is displayed in the top-right corner next to the af:statusIndicator 
component.
Oracle dynamic tabs shell
This template supports displaying muliple pages in a tab that is dynamically generated  
at runime when the user clicks on the link from the Navigaion secion. Some addiional 
facets included are about, navigation, globallinks, globalToolbar, globalSearch, 
globalTabs, welcome, and innerToolbar. Following is the code in Oracle dynamics tab 
shell template:
<af:pageTemplate value="#{bindings.ptb1}" id="pt1" viewId="/oracle/ui/
pattern/dynamicShell/dynamicTabShell.jspx">
                    <f:facet name="copyright"/>
                    <f:facet name="about"/>
                    <f:facet name="navigation"/>
                    <f:facet name="globalLinks"/>
                    <f:facet name="status"/>
                    <f:facet name="globalToolbar"/>
                    <f:facet name="globalSearch"/>
                    <f:facet name="globalTabs"/>
                    <f:facet name="welcome"/>
                    <f:facet name="innerToolbar"/>
                </af:pageTemplate>

Displaying the Data
[ 150 ]
You can see that the af:pageTemplate tag has a binding deined. 
The reference will be found in the page deiniion ile of the page 
which uses the following template:
<page path="oracle.ui.pattern.dynamicShell.
model.dynamicTabShellDefinition" id="ptb1" 
Refresh="ifNeeded"/>
This deiniion will help the page to create dynamic tabs and you can 
create a maximum of 15 tabs.
Time for action – creating the page template
For EmpDirectoryApplication, we can create a template of our own to have a standard 
look and feel throughout the applicaion:
1. Right-click on the Web Content secion of the viewController project. This will 
open New Gallery.
2. Navigate to the JSF/Facelets secion under the Web Tier secion and select the ADF 
Page Template opion from the items. You will be using the same steps to create a 
page by selecing the Page opion.

Chapter 6
[ 151 ]
3. Provide the ilename as WebPageTemplate.jspx and locate the directory for  
the template in the Create ADF Page Template window. The page template name  
is autopopulated. The document type Facelets will have the extension .jsf and 
JSP XML will have the extension .jspx.
4. Select the Use a Quick Start Layout opion to browse through the various layouts. 
Click on the Browse buton and select the Three Column opion in the Categories 
secion.
5. Select the second item from the Types secion and select the third opion from  
the Layouts secion. Select the Apply Themes opion and click on the OK buton.
6. Select the Create Associated ADFm Page Deiniion opion as shown in the 
following screenshot to create the page template binding for the template.
7. The Facet Deiniions, Atributes values for the templates can be added to  
afect the behavior of the template during runime. The Add buton is used  
to create the facets and atributes.
8. A facet is a placeholder which will hold the content of a paricular secion of 
the page. An atribute will help you to conigure the facet or the page template 
dynamically at runime when the template is used in the page. Now, add facets 
called content and navigation.

Displaying the Data
[ 152 ]
9. Click on the OK buton to create the page template for the applicaion.
What just happened?
Now we have the WebPageTemplate.jspx ile created which will have the standard look 
and feel throughout the web page. The template will have a stretchable container within 
which we will include the page content. The component for stretching the content is usually 
a panelStretchLayout component. The component includes two facets to include the 
content in the top and center porions of the page. The template is designed in such a way 
that there is another stretchable container within the center facet of the decorativeBox 
component to divide the content again into start, center, and end facets.

Chapter 6
[ 153 ]
When the page template is added to the applicaion with the page deiniion ile, the 
Databindings.cpx ile is updated with the page deiniion informaion. This happens 
whenever a page deiniion is assigned to the page. The pagetemplate-metadata.xml 
ile will also add the entry of the newly-created template into it.
Have a go hero – adding attributes to the template
While creaing the page template, we were asked to add the facets and atributes for the 
page template.
Now you will add the atributes yourself for a new template to idenify the diferences as 
shown in the following list. Remember that this can be added from the Create wizard.
1. Add the height atribute in the code inside the component secion:
    <attribute>
        <attribute-name>height</attribute-name>
        <attribute-class>java.lang.String</attribute-class>
        <default-value>100</default-value>
    </attribute>

Displaying the Data
[ 154 ]
2. Now go to the af:declarativeBox tag with ID as pt_db1 and add the expression 
#{attrs.height} for the topHeight property. This will make sure that the 
height property for pageTemplate will map to the topHeight property of the 
decorativeBox tag internally. Perform the following in decorativeBox:
1. Observe the page definition file for the template and the changes that are 
added to the Databindings.cpx file.
2. Observe the changes that are added to the pagetemplate-metadata.
xml file.
3. Add a new facet named header inside the top facet of the innermost 
decorative box. You will have to choose the facet definition from the ADF 
component list and after adding the facet you will have <af:facetRef 
facetName="header"/>.
Creating the page with the template
Let us see how we create a page with the page template and design the layout for our web 
applicaion. Our task involves creaing the employee.jspx and dept.jspx pages and 
adding the model layer content to it to display the employee and department informaion. 
We will also remove the content of the index.jspx page and will add a layout and some 
staic informaion to welcome the user.
Time for action – creating the dept.jspx ile
1. Right-click on the Web Content secion of the viewController project. This will 
display the New Gallery window.
2. Navigate to the JSF/Facelets secion under the Web Tier secion and select the  
Page opion from the items.
3. Provide the name as dept.jspx, and the locaion for the page can be located  
in the Directory secion.
4. Select Document Type as the JSP XML ile to have the extension .jspx, facelets  
will have the extension .jsf.
5. Select WebPageTemplate that we created in the Page Layout secion by selecing 
the Page Template opion.

Chapter 6
[ 155 ]
6. Managed beans can be added to the page in the Managed Bean secion. Right now, 
we will have one backing bean associated with the page. Select the Automaically 
Expose UI components in a New Managed Bean opion only if you have a strong 
reason to bind each of the UI components to the bean, otherwise we do not need 
to select this opion now. Usage of a backing bean rather than a managed bean is 
applicable if you are creaing your own declaraive component which is out of the 
scope of this book.
7. Click on OK to create the page.
What just happened?
Now we have our page created which uses the page template for a common look layout. 
If you have opted to create the backing bean, the Dept.java ile will be created for the 
dept.jspx ile. The Java class will have all the bindings for the UI components added to the 
dept.jspx page. The dept.jspx page currently has af:document and af:form as the 
UI components in the page. Each of these components will have the binding atribute added 
to it which will have a binding to the corresponding value in the backing bean. For example, 
af:form will have the binding as #{backingBeanScope.backing_dept.f1} which 
means that the form component is bounded to the f1 atribute in the Dept.java ile. 
backingBeanScope is the scope that is very speciic for the backing bean. The lifeime of 
the object in backingBeanScope is within the scope of the backing bean. There are several 
scopes, but at this ime you don't need to worry about them. If you look closely in the Dept 
bean, you will have the references added to the backing bean.
The geter and the seter for the f1 reference are used to get and set the binding for the 
form element in the page. This is useful if we have to give reference to the form element in 
our code at runime. Also, note that the component reference in bean is of type RichForm 
and the reference for the document element d1 is of type RichDocument. Each of the UI 
components will have their own class type API in Java.
The scope of the backing bean can be backingBeanScope, sessionScope, viewScope, 
pageFlowScope, and applicationScope, and is deined in the Managed Bean secion  
of the adfc-config.xml ile.

Displaying the Data
[ 156 ]
The following statement as the last entry is responsible for updaing the 
backing bean whenever a new component is added or removed from the page:
<!--oracle-jdev-comment:auto-binding-backing-bean-
name:backing_dept-->
The page template entry in the page will have the binding reference in the deptPageDef.
xml ile and the page deiniion will also have an entry in the Databindings.cpx ile.
Have a go hero
The steps for creaing employee.jspx are similar to that of creaing a dept.jspx page. 
Creaing the employee.jspx page is let for the user as an exercise.
Layout the page display
We have a template and a page now for our web applicaion. The next step is to layout the 
page so that the informaion is presentable for the user. Now we will have to add the content 
of DeptVO from the data control and add it to the dept.jspx page. We will add model layer 
content from the data control to the page by dragging-and-dropping the view object instance 
as explained in the previous chapter. Once the content is added to the content facet of the 
page, it looks like the one shown in the following screenshot:
You can see the diference between the index.jspx page and the dept.jspx in the 
following screenshot as the new page has a blue border and the content is stretched 
completely. This is because the dept.jspx page is based on the page template and  
the index.jspx page does not have the page template deined for it.

Chapter 6
[ 157 ]
Our next step is to create the layout which contains a navigaion menu to the let-hand side 
of the page and the content will be displayed at the center of the page.
Time for action – creating the layout for the page
1. We will add a link in the navigation facet which will display horizontal links.  
For this, we will add the af:panelGroupLayout component to the page with  
the layout as vertical. This can be conigured in the property inspector.
2. Most of the ime, the components are added to the page using the Structure 
window by right-clicking on the container icon or the secion of the page and 
insering the component. You may also use the Component palete to drag-and-
drop the component directly onto the page.
3. Now add two links to the page and change their name to Employee information 
and Directory information. These are the text messages that will be displayed 
for the links.
4. You may noice that for each component added to the page, the backing bean  
is updated with the references to bind the component reference to the bean.  
You will have to run the page each ime to see the changes you have made.
What just happened?
The previous task was to explain how the page is designed in ADF. Creaing the bean with all 
the components referenced is usually not recommended. The most commonly used layout 
components are af:panelGroupLayout and the other one is af:panelStretchLayout. 
The panelGroupLayout component will have the layout atribute to display content 
horizontally and verically. It looks good to have the navigaion menu displayed in a verical 
fashion than in a horizontal structure so we have used the verical layout for the links. 

Displaying the Data
[ 158 ]
At runime, the page is displayed as follows:
PanelStretchLayout is mostly used to stretch the container to the maximum width of 
the screen. For this reason, we will have the panelStretchLayout component added to 
pageTemplate as a container so that the component which is added inside the container 
will always be stretched when displayed on the screen. Some changes to the page are readily 
visible at design ime.
In 11gR2 there is another component called af:panelGridLayout, which is used to 
display a grid layout using one or more af:gridRow components. This component will  
have the height and margin deined to align with the grid. Each af:gridRow will have  
one or more af:gridCell components with width and margin deined.
Knowing the UI components
Now it is ime for us to think about the UI components that can be added to the web  
page. To design the web page eiciently in ADF Faces, it is beter to know the basics of  
the UI components available for the framework. ADF Faces consist of more than 150  
rich components available for developing rich Internet applicaions. ADF Faces consist   
of diferent components for diferent purposes. The components are classiied based on 
their behavior and type. For example, some of the component types are input, output, 
layout, query, popup, list of values, navigation, menu, table, and so on .
Most of the ADF Faces components have some common properies to deine the tag 
elements. The properies are changed using the property inspector available from  
the View menu.
 

id: The ID to uniquely idenify the component in the page.
 

binding: The reference of the component is added to the backing bean for 
processing the component in a programmaic way.
 

rendered: Seing this value to true will render the component in the page  
and this property can be evaluated from the value in the backing bean.

Chapter 6
[ 159 ]
 

visible: The component is actually available and rendered in the page but can be 
hidden or displayed to the user with this property.
 

inlineStyle: The CSS styling is added to this property to change the visual 
appearance of the component.
 

styleClass: This property takes the name of the CSS style block deined on the 
page or from an external CSS ile.
 

partialTriggers: The ID for the triggering components are added to this 
property to trigger a parial refresh. The component to be refreshed will listen  
to the corresponding triggering components ID listed and then will trigger an  
update event.
 

partialSubmit: This property will be used for a navigaion component to  
parially submit the form in a page for a refresh. This is used in combinaion  
with parial refresh.
 

autoSubmit: When you leave the component whose autoSubmit value is true, 
the component sends a noiicaion to other components that are registered to 
refresh themselves based on the ID provided in the partialTriggers property.
 

immediate: This property will skip All Validations phase in the lifecycle and 
render the page for the af:commandButton component. Seing this property for 
the af:inputText component will process and validate the data immediately in 
the Apply Request Values phase. Topics related to ADF phases and lifecycle  
are explained in the Chapter 7, Working With Navigaion Flows.
Input components
Input components are the ones used to get the input from the user. The input can be anything 
such as text, number, color, date, and ile. Some of the common input components are 
explained in the following secion.
af:form
af:form creates the HTML <form> element. This tag is used to pass the data in the 
page to the server for processing. Some important atributes which are commonly used 
when compared to other available atributes are defaultCommand, targetFrame, and 
usesUpload. These are explained as follows:
 

defaultCommand: This property is used to provide a default acion for the form. 
For example, if the form contains a Submit and a Cancel buton. Providing the ID  
of the Submit buton will invoke the Submit buton as default.

Displaying the Data
[ 160 ]
 

targetFrame: This will deine how the new frame will be displayed. The opions 
are _self, _blank, _top, and _parent.
 

usesUpload: This will be true if the form allows uploading the ile to the server.
af:inputText
To create an input ield in the browser, the af:inputText component is used.  
The behavior of this component is the same as any other input ield component.  
The important properies are:
 

value: It holds the value for the component.
 

rows: Number of rows the component will display to support muliline entry.
 

readOnly: It makes the content not editable.
 

label: This provides the label for the component.
 

autoComplete: Seing this property will remember the previous entered  
values in the form.
 

 wrap: It helps to wrap the text displayed in the text component.
 

Secret: This property will make the component behave like a password ield.
 

Required: This makes a ield mandatory in the form. This form cannot be 
submited without providing a value in the ield.
 

maximumLength: It sets the maximum length for the ield.
 

contentStyle: This property holds the CSS style property for the content  
of the ield.
 

columns: It deines the length of the characters to be displayed in the ield.
af:inputDate
To input the date, we use the af:inputDate component. The af:inputDate component 
will display a calendar to easily select the date by selecing the year, month, and the day of 
the month. This component is used to enter the ime as well:

Chapter 6
[ 161 ]
af:inputFile
To upload a ile we will use the af:inputFile component. The ile is located using the 
Browse buton and the ile is uploaded to the server. The upload ile coniguraions are  
done in the web.xml ile.
af:selectOneChoice
The list of opions that have to be selected by the user is displayed in the 
af:selectOneChoice component. The user can select a single item from the list of  
items of the components. The component may contain the <f:selectItems> element  
or the <af:selectItem> element.
af:selectOneRadio
A single opion is selected from the items deined as a series of radio butons. The components 
will help to select a single item at a ime.
af:selectBooleanCheckbox
The af:selectBooleanCheckbox component is like an HTML checkbox component, which 
has selected and unselected states. The selected state is set to true and the unselected 
state corresponds to false.
Output components
The output components are used to display the content of the page. The components are 
widely used to display a read-only content in the page or a popup.

Displaying the Data
[ 162 ]
af:outputText
af:outputText is used to display the text in the page. The component supports styles and 
the escaped text.
af:message
To display a message inside a popup we use the af:message component. To display global 
messages for the page, we use the af:messages component with the globalOnly atribute 
set to true. The af:message type can be conigured as fatal, info, error, warning, 
and confirmation. The for atribute will idenify the component for which the message has 
to be shown. The message atribute will hold the message that is displayed to the user.
Showing the message programmatically
ADF allows you to programmaically show a message. ADF uses the JSF messaging API to 
display the messages. FacesMessage is added to the FacesContext object by adding the 
message using the addMessage(String clientId,FacesMessage message) method.
Use the following snippet to show the af:message component globally. If we pass a client 
of the component, the message will be shown for the component.
        String messageString="Info Message";
        FacesMessage fm = new FacesMessage(messageString);
        fm.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);
        //to show for the component use this code
        context.addMessage(getInputComponent().getClientId(context), 
        fm); // getInputComponent is the binding for the component  
        that you would like to show the message.
af:outputFormatted
The af:outputFormatted component is just like the af:outputText component but 
supports the HTML mark-ups and formated results.
Layout components
Layout components are mainly used to arrange the content of the page in a standard way 
so that the view of the content is presentable and its perfectly for the user. The layout 
components someime act as a container to hold the elements collecively or separately  
to uilize the space in the page uniformly.

Chapter 6
[ 163 ]
af:panelGroupLayout
The af:panelGroupLayout component is used as a container which will hold other 
components in a horizontal or verical fashion. The items inside the group layout are 
separated by the space deined in the separator and the Layout property will have 
horizontal, verical, and scroll opions to arrange the child components.
af:panelStretchLayout
This component will stretch the components inside it. The component will act as a container 
to stretch its children with opions to place the components in the start, center, end, 
top, and bottom facets.
af:panelGridLayout
This layout is to show the grid structure. It uses one or more af:gridRow components 
which hold one or more af:gridCell components.
af:panelFormLayout
This component will display the content more or less as a form layout. The label and the 
ields are displayed side by side and the columns of the layout are conigured using the 
columns property. This container has the fieldWidth and labelWidth properies to 
change the ield atributes based on the user's needs.
af:panelHeader
The af:panelHeader component will display a header panel with an opion icon at the 
top of the secion. The supported facets for the panelHeader component are info, help, 
context, legend, menuBar, and toolbar.
Query components
To query the backend with the criteria, the ADF query component is used. The view criteria 
for view object is dragged-and-dropped on to the page to create a query component. 
QueryEvent is ired when the user clicks on the Search buton.
af:query
The component will help to perform the query for a paricular record in the table by providing 
the search criteria. A search panel will hold the ilters for the query. af:query contains the 
resultComponentId property to specify the ID of the component in which the result of the 
query will be displayed. The result component must be a table component.

Displaying the Data
[ 164 ]
Popup components
To display informaion or a warning to the user, we use the popup component.
af:popup
The popup component is used to display a menu or a message to the user which is hidden 
and is displayed on a speciic event. For example, to display a message in a popup using the 
Context menu.
af:dialog
The dialog component is enclosed within a popup component to show a message or a 
warning to the user. This will be an invisible layer in the page that is acivated on an event. 
The dialog component more or less looks like a window with butons and icons as shown  
in the following screenshot:
Time for action – showing a popup to the user
Now we will see how to create a popup from scratch in ADF:
1. Go to the index.jspx page and then select the Command buton that holds the 
commit operaion from the Structure window.
2. Right-click on the Command buton and select the Insert inside the 
af:commandButon –Commit opion and the select the Adf Faces opion.
3. Click on the Show Popup Behavior opion in the Insert ADF Faces Item window:

Chapter 6
[ 165 ]
4. Now a af:showPopupBehavior component is added to the commit operaion. 
Now add triggerType as acion, which is the event that should invoke the popup. 
The id value of the Command buton cb1 is provided for the alignId component, 
that is, the popup relaive to the Command buton. The align property is set to 
beforeStart to align the popup next to the af:commandButton component.
5. Now we will create an af:popup component and add an af:dialog component to 
it. Add a message saying Do you really want to commit the data? inside 
the af:dialog component.
6. Provide the ID of the popup p1 to the popupId property of the 
af:showPopupBehavior component. Now the dialog will be shown to the user 
whenever the Commit buton is clicked on in the UI.
What just happened?
We have created a confirmation popup for the user to conirm if the Commit buton is 
clicked on by the user. So every ime the Commit buton is clicked, the popup will be shown 
to the user. The dialog will have a Type property, which will allow the user to select the 
butons that will be shown to the user inside the dialog box. The default butons are Ok and 
Cancel. Here the user input is important which means clicking on the OK buton in the dialog 
should commit the record. Clicking on the Cancel buton should not commit the record.

Displaying the Data
[ 166 ]
Have a go hero
To implement the previous scenario we would have to:
 

Remove the commit operaion from the Command buton, which is added to the 
actionListener property.
 

af:dialog has a property called dialogListener, which will help to determine 
the user selecion by geing the dialog outcome from the dialogEvent 
component in the managed bean, as shown in the following code:
    public void dilaogListener(DialogEvent dialogEvent) {
        String outcome = dialogEvent.getOutcome().toString();
        if(outcome.equals(DialogEvent.Outcome.ok)){
            //ok logic
        }
        else{
            //cancel
        }
    }
 

 The ok logic should commit the data by calling the commit operaion.
List of values components
The list of values is the list of items which are populated from the model data. The data 
source for the list is fetched at runime and is displayed to the user in a list.
af:inputComboboxListOfValues
The combobox feature is included in the af:inputcomboboxListofValues component 
with which the user can select or search an item from the list displayed from a data source.
Navigation components
To navigate from one page to another we will use the navigation component. ActionEvent 
is raised when the Component buton is clicked on. When the Component buton is clicked, 
the client event is raised at the client side.
af:commandbutton
af:commandbutton corresponds to an HTML input type buton element. Navigaion occurs 
when the user clicks on the buton.

Chapter 6
[ 167 ]
af:commandLink
af:commandlink is more or less similar to a command buton but instead of a buton  
the link is used.
Menu components
Menu components are used to select features from an opion when the user clicks on it.  
The Menu popup opens for the users to choose the submenu items. The submenu may  
or may not have a child menu.
af:menu
The menu is displayed using the menu component. The menu is displayed in a verical popup 
container, which will hold a submenu, which will invoke an acion upon clicking on it. The 
menu is displayed in a verical popup as shown in the following screenshot:
Table components
The table components are used to display the content of the data source. The data source  
is deined in the page deiniion ile as a binding and the component will display the data  
in columns.
af:table
The af:table component will display informaion from the binding using the 
collectionModel component of the table data source. The component consists  
of rows and columns and each row is represented using the #{row} variable.

Displaying the Data
[ 168 ]
af:treeTable
The af:treeTable component is similar to the table component but difers with a 
hierarchical informaion display as a tree. The parent row is always collapsed and each  
of the nodes is displayed by collapsing the node, as shown in the following screenshot:
Miscellaneous components
Some components in ADF are used to support other components which involve rendering 
other components condiionally or looping through the components.
af:forEach
This component is used to display components in iteraion. The varStatus property of the 
tag will expose the status during iteraion. This component does not contain an id atribute 
The properies includes:
 

items: It gives the collecion or list for iteraion.
 

begin: It gives the index at which the loop begins.
 

end: It is the index at which the loop ends.
 

step: This is the number to increment on each iteraion.
 

var: It gives the name of the variable available inside the loop.
 

varStatus: It gives the loop status available on iteraion. This can have variables 
such as index, count, step, first, last, begin, and end.
af:iterator
af:iterator will use the collectionModel component to iterate through the content 
just like the table component. The rows processed by the af:iterator component are 
adjusted using the rows property. For example, the user might want to display some text 
next to the Ename atribute of each row of the EmpVO1 collecion in an output component. 
Here, af:iterator can use EmpVO1 collectionModel as a value to iterate to get the 
individual row and append the desired message.

Chapter 6
[ 169 ]
af:switcher
The ternary operator with the if and else condiion is saisied by the af:switcher 
component. This component uses the facets to display informaion based on some 
condiion. The defaultFacet and facetName components can have the expression  
to toggle the facets.
Data visualization components
These are sets of components which are used to visualize the informaion from the 
data source. Some components of this type are dvt:gauge, dvt:graph, dvt:area, 
dvt:pvotTable, and so on.
Other tags
There are other tags in ADF which are used to support other components. Adding these 
tags to the components will modify how the component behaves. Some tags will add extra 
features to the component to which it is added:
 

Behavior: It adds a special behavior to the component. For example, the 
af:autoSuggestBehavior tag added to the af:inputText component will 
display an autosuggesion on typing the text in the input ield.
 

Converter: It adds the converter tag to the input or output component and will 
convert the data displayed to the user. For example, a number displayed in an input 
ield will be displayed in groups and decimals can be achieved using these tags.
 

Listener: These tags will add a listener to the component to listen for special events. 
Adding a af:setActionListener component to af:commandButton will set  
the value when the action event ires for the Command buton.

Displaying the Data
[ 170 ]
 

Validator: These tags are added to validate the informaion displayed in the 
component. These are the UI validators which are diferent from the declaraive 
validators available from the ADF business components.
 

Drag and drop: These tags are added to the container component to support  
drag-and-drop capabiliies.
Only the important and most commonly used components and tags are 
explained in the previous list.
You can visit the following URL to get a better understanding about the 
ADF components. The ADF demo site is also added for reference:
 

http://jdevadf.oracle.com/adf-richclient-
demo/docs/enhanced-tagdoc.html
 

http://jdevadf.oracle.com/adf-richclient-
demo/faces/index.jspx
 

http://docs.oracle.com/cd/E24382_01/
apirefs.1112/e17490/toc.htm
Have a go hero – working with the components
You can now learn about some components and their usage to get some pracice by yourself:
1. Analyze all the components explained previously and check how they behave at 
runime. Try out all the components in each of the type and familiarize yourself  
with them.
2. Note down the component's properies and see how it difers from the properies  
of other components.
3. Add a welcome message and use the page template to the index.jspx page. 
Display some informaion in the index.jspx page using the components that  
we have learned.
4. Add the employee informaion to the employee.jspx page and lay out the page 
properly with the components that you have learned.
EL expression
Almost all the properies in the ADF Faces components will accept values in an expression 
language commonly called the EL expression. The value is evaluated at runime and the 
output is dynamically assigned for the property. EL expression usage in ADF will extend  
the dynamic capabiliies of ADF to another level.

Chapter 6
[ 171 ]
Let us now add an EL expression to the page that we have created. Here we are going to use 
the af:switcher component to display two secions in the employee.jspx page. One is 
to display content that displays the employee informaion. The other facet will display the 
department informaion.
Time for action – adding an EL expression
1. Add the af:switcher component to the page from the Component palete.
2. Select the switcher component in the page from the Structure window or from 
the design view.
3. From the Structure window right-click on the af:switcher component and then 
select Insert into the opion to insert a facet.
4. Provide the facet name as first. Repeat the same step to add another facet 
named second.
5. In the property inspector, provide the value as first for the defaultFacet 
property.
6. Inside the irst facet, add the employee informaion from the Data Controls palete. 
Drag-and-drop the EmpVO informaion on to the irst facet.
7. Add the DeptVO to the second facet. Surround the table with a group layout or a 
stretch layout based on the requirements of the page.
8. Now add the following EL expression to the facetName property of the switcher:
#{bindings. EmpVO1.estimatedRowCount > 0 ? 'first' : 'second'}

Displaying the Data
[ 172 ]
What just happened?
The previous expression will render the first facet if there is any row available for the 
EMP table. If there is no row, the second facet is rendered and processed. The bindings 
component will get the reference to the binding context for the page deiniion. EmpVO1 
instance is the tree binding to the EMPVO.xml view object. The estimatedRowCount  
will get the count of the rows available for the EmpVO.xml ile.
Partial page rendering
ADF framework has the feature of refreshing the content or a secion of the page without 
refreshing the complete page. Only the component that is registered will be refreshed. 
This is called parial page rendering. For the navigation components, we will use the 
partialSubmit atribute to send noiicaion for changes and partialTriggers 
will specify the ID of the component on which the current component should listen for 
noiicaion. For other components, we will use the autoSubmit property to send a 
refresh noiicaion.
Have a go hero – completing the page
Now we will move on to pracising something that we have learned:
 

Create a new page named Employee Search. Add a query page to it which  
will search for an employee and then the result will be displayed in a table.
 

Add a command buton that will display a popup message Hi good morning in  
a dialog.
 

Add another command buton that will display a message in the page in an  
output text. When the buton is clicked on again, the message should display  
a number which gets increased every ime the buton is clicked.
Pop quiz
Q1. ____________ is responsible for a uniform look and feel of the enire web applicaion.
1. page
2. page template
3. page deiniion ile

Chapter 6
[ 173 ]
Q2. What is the extension for the facelets?
1. 
.jspx
2. 
.jsff
3. 
.jsf
4. 
.xml
Q3. Backing bean will hold all the references of the UI components in the page.
1. True
2. False
Q4. ____________ and ____________ are the two commonly used layout components.
1. 
PanelStretchLayout and PanelBorderLayout
2. 
Document and Form
3. 
PanelGroupLayout and Decorativebox
4. 
PanelStretchLayout and PanelGroupLayout
Q5. ____________ component in the following is categorized as a navigation component.
1. 
inputText
2. 
outputText
3. 
commandLink
4. 
toolbar
5. both 3 and 4

Displaying the Data
[ 174 ]
Summary
Let us recap what we have learned in this chapter.
We saw how to create the page template for a standard look and feel throughout the  
web applicaion. We have seen how to use the page template to create the page and  
then properly layout the content for a presentable view.
We have seen about the backing bean and how it is bound to the UI. We have seen  
various opions to display the content of the model data in the UI layer.
In the next chapter, we will see the controls and task lows for navigaing from one  
page to another.

7
Working with Navigation Flows
Many of the web applications that are available in the market involve  
complex tasks and approval processes to provide a secure way of controlling 
the navigation between web pages. For example, imagine you are in an online 
bookstore and you want to check out a book. The lists of options available to 
you are to log in to your account, browse through the books available, add to 
the shopping cart, and then check out the product. There are four separate 
flows involved in this process to buy a product. Each flow is individual and has 
a specific entry and exit points. ADF controller introduces the concept of task 
flows to simplify the navigation and to reuse the flows for any number of times.
In this chapter, we will learn about:
 

Task lows
 

Control lows and aciviies
 

Task low parameters
 

The ADF lifecycle

Working with Navigaion Flows
[ 176 ]
Task lows
The main advantage of the ADF controller is the support for task lows. It helps us to break our 
complex web applicaion into smaller reusable lows. The task lows are simple XML iles which 
support a diagram view to drag-and-drop the aciviies involved in a paricular user scenario. 
Each of the pages that are involved in the task low is added as a view acivity and the control 
lows between the pages describe the navigaion. The components in the task lows are called 
as aciviies and each of the control lows will have an outcome to deine the navigaion.
In the previous screenshot, the aciviies are checkAuthorizaion, noAuthorizaion, and 
ileUpload. The control lows are authorized and notAuthorized. The aciviies are dragged 
from the Component Palete pane and dropped onto the task low to deine the page lows.
Task low types
There are two types of task lows available in the ADF controller. They are unbounded task 
low and bounded task low.
Unbounded task low
As the name goes, the unbounded task lows has no deined entry and exit point. The aciviies 
and control lows added to the unbounded task low will not be included in the bounded  
task low.

Chapter 7
[ 177 ]
An ADF applicaion contains at least one unbounded task low and may contain zero or more 
bounded task lows. adfc-config.xml is the unbounded task low that is used to specify 
the unbounded aciviies for the applicaion. This ile will hold the task low call acivity that 
would call another bounded task lows in the applicaion. The unbounded task lows have 
muliple entry points, which allow them to be bookmarked.
The previous screenshot has the wildcard acivity to represent the muliple entry points.  
The control lows are deined to navigate the respecive pages. The warning for the view 
acivity is to represent the missing physical ile for the applicaion. Any pages added to  
the unbounded task low are URL-accessible.
By default, the ADF applicaion is provided with an adfc-config.xml ile which acts  
as an unbounded task low. An unbounded task low can have aciviies and control lows  
which are considered public for the applicaion. The aciviies used are explained.
Bounded task low
This task low will enclose a set of private aciviies and control lows that are reusable  
within an applicaion. They have a single entry point and zero or muliple exit points.  
The advantages of the bounded task low over the unbounded task lows are as follows:
 

Single point of entry: There is no muliple entry for the low and it uses a default 
acivity which will get executed before any other acivity in the task lows.
 

Accept parameters and return values: The task low accepts parameter values  
to be processed within the task low and returns a value to the calling task low.

Working with Navigaion Flows
[ 178 ]
 

Reusability: Task lows can be reused within the applicaion to perform common tasks.
 

Re-entry supported: Users can re-enter the task low based on the task low  
re-entry seing.
 

Rendered within ADF region in a page: A task low can be added to a jspx page  
as a region.
 

Own memory scopes (page low scope): The task low contains the 
pageFlowScope variable as a unique variable to store the data that exists within 
the boundary of the task low instance.
 

Transacion management: The task low can manage transacions. It can create  
or join an exising transacion.
 

Security: Task lows can be secured by providing privileges and graning and 
restricing access in an applicaion.
Time for action – adding a bounded task low to 
EmpDirectoryApplication
So let us see how to add a bounded task low to the applicaion:
1. Right-click on the web content folder and select the New opion from the menu. 
The New Gallery window can be accessed by navigaing to File | New also.
2. Under the Web Tier secion, select the JSF/Facelets category.
3. Scroll down to select the ADF Page Flow and click on the OK buton. The Create  
Task Flow window is to be displayed to the user.
4. Provide the ile name as createEmployeeFlow.xml.
5. Locate the directory where you want to store the task low ile.
6. Check the Create as Bounded Task Flow opion to create the task low as a bounded 
task low. Later, we have an opion to toggle between the task low types.
7. The task low id is the same as the low name, which will uniquely idenify the  
task low.
8. Check the Create with Page Fragments opion to allow the creaion of page fragments 
inside the task low. Page fragments are small units of informaion in an incomplete 
JSF page added to the task low. The purpose of creaing page fragments is reusability. 
The complete page is a jspx page with af:document enclosed within an f:view 
tag. Page fragments represent a small porion in a complete page.

Chapter 7
[ 179 ]
9. The Create Train opion will allow the task low to behave like a train. It deines  
a train model that allows you to use implicit navigaion cases to navigate views  
in a bounded task low following a wizard style approach. The Base on Template 
opion is used to base the task low template to inherit standard funcions from  
the template. We will see this opion in the later chapters.
10. Click on the OK buton to create the task low.
What just happened?
We have created a bounded task low named createEmployeeFlow.xml. This task low 
will be used to create the employees and can be reused whenever the employee creaion 
process is needed for the applicaion.
Any bounded task low can be converted to unbounded 
task low by right-clicking on the task low and selecing 
the Convert To Unbounded Task Flow opion. This holds 
good for unbounded task lows also.

Working with Navigaion Flows
[ 180 ]
Task low components
ADF task lows consist of components which can be added to the task lows to deine the 
applicaion scenario.
Method call
The method call is the acivity available for the task low to add a method from the managed 
bean or from the business components such as an applicaion module or view object. The 
method call is added to the task low by dragging and dropping it onto the task low. We can 
have the method call as the placeholder, even if the method is not available at design ime. 
Later, we can double-click the acivity to create a method in the managed bean.
Time for action – adding a method call activity
Now we will see how a method call acivity is added to the task low:
1. Drag the Method Call acivity from the Components secion of the Component 
Palete to the createEmployeeTaskflow task low to see that Component 
Palete is available from the View menu or use the default keyboard shortcut  
Ctrl + Shit + P to invoke the palete.
2. In the task low, we will have the entries as follows:
<task-flow-definition id="createEmployeeFlow">
    <default-activity>methodCall1</default-activity>
    <method-call id="methodCall1">
    </method-call>

Chapter 7
[ 181 ]
    <use-page-fragments/>
  </task-flow-definition>
 

fixed-outcome: When this method is called, the outcome of the Method 
Call Activity button is provided in the fixed-outcome property from the 
property inspector.
 

to-string: Setting this option to true for the method activity will 
navigate the outcome to the specified outcome, just like calling the 
toString() method from the Java Object API.
 

method: This will represent the method that is wired to the activity.
3. Double–click on the Method Call Acivity buton to open a pop up which will ask us 
to select the method.
4. Click on the New buton and provide the informaion as follows:
 

Bean Name: employeeBean
 

Class Name: EmployeeBean
 

Package: com.employee.ui
 

Scope: pageFlow
The pageFlowScope is used as we want to make EmployeeBean available within 
the createEmployeeFlow task low.

Working with Navigaion Flows
[ 182 ]
5. Check the Generate Class If It Does Not Exist opion and then click on the  
OK buton.
6. Now the employeeBean name is added to the managed bean list in the  
Select Method dialog.
7. Add a method named prepageEmployeeQuery() in the method secion  
and click on OK.
8. Now the EmployeeBean.java will be opened with the prepageEmployeeQuery() 
method.
9. Inside the method, change the return type to String and then just type 
return "employee";
10. Now change the name of the method call acivity to prepageEmployeeQuery. 
This is opional, but it is a standard to have the same name as the method for the 
method call acivity.
11. So now whenever you double–click on the method acivity, it will take you to the 
prepageEmployeeQuery() method from the Java class.
The green circular border for the activity indicates that the activity is 
the default activity. This can be toggled by right–clicking on the task 
flow and navigating to Mark Activity | Default Activity.
What just happened?
We have now created the task low with a method call acivity that calls a method from 
EmployeeBean.java. The prepageEmployeeQuery() method returns a string variable 
as employee.
We have kept the scope of the managed bean as pageflowScope, which means that the 
bean is visible only within createEmployeeFlow.
Have a go hero – explore the task low
Now just look at the task low that you have created and then do the following:
 

Find out what are the tags available for the task low
 

Idenify the fixed-outcome and the toString atributes

Chapter 7
[ 183 ]
Router
Now we have the Router acivity, which is used to check for a condiion and then direct the 
control to the appropriate low. When you drag-and-drop the router component, the Router 
acivity is added to the task low which has the following properies:
 

default-outcome: This determines the default outcome of the router.
 

expression: This is used to provide the expression that will be evaluated at 
runime to determine which outcome has to be chosen for the low. There can be 
many expression properies, but there will always be one default-outcome. 
The EL expression is used at design ime to provide the expression. For example:
<expression>#{pageFlowScope.employeBean.count == 1}</expression>
        <outcome>department</outcome>
If the count variable in employeeBean is evaluated to 1, then the control is taken to 
the department low as outcome.
Save Point Restore
The Save Point Restore acivity is used to restore the save point that is already saved in the 
user's previous transacions. The controller will have the snapshot of the applicaion at a 
paricular point and then we can restore the system to the saved state of the applicaion. 
Save Point Restore uses save-point-id to store each of the states uniquely and then 
restores the state by providing a save-point-id.
Task Flow Call
The Task Flow Call acivity is used to call another task low from within the same task low. 
You can call the task low from either unbounded or from a bounded task low. Task lows 
may accept parameters and then may return a value to the calling task low.
To create the task low, you will have to use the steps that were explained earlier and then 
drag-and-drop the task low directly to the current task low. You can also add a new task 
low by adding the Task Flow Call acivity and then double–clicking on the acivity to create  
a new task low.
If the task low is expecing a parameter, then we will have to provide the parameter for the 
task low by selecing the task low.

Working with Navigaion Flows
[ 184 ]
Now createEmployeeFlow looks as follows:
The following opions are available for the task low call in the property inspector.
 

Run As Dialog: We can make the task low run as a dialog from the parent task low 
by selecing the true opion.
 

Display Type: If the task low is running in a dialog, then the window should open  
in either an inline pop-up or an external window.
 

Remote Applicaion URL: This opion is used to call the task low when the 
applicaion is called remotely from a web applicaion.
Task Flow Return
Task Flow Return is used in a task low to return to the calling task low ater compleing a 
process within the task low. For example, in the previous screenshot, we have a task low call 
createDepartmentFlow, which will call the corresponding task low and the low coninues 
within createDepartmentFlow. However, at some point, the createDepartmentFlow 
task low ends and the control has to come back to the calling createEmployeeFlow task 
low for further processes within the current task low. This opion is available only for a 
bounded task low.
Time for action – adding a Task Flow Return
Now we will see how to create a Task Flow Return acivity within the task low:
1. Double–click on createDepartmentFlow to open a Create Bounded Task Flow dialog.
2. Accept the default entries by clicking on the OK buton. The dialog box is  
similar to that of the create task low dialog that we saw earlier to create  
the createEmployeeFlow task low.
3. The previous acion will create the bounded task low.

Chapter 7
[ 185 ]
4. Select and then drag-and-drop the Task Flow Return acivity from the component 
palete to the task low.
5. Name the Task Flow Return acivity as return.
What just happened?
In the previous acion, we have seen how the task low will return to its calling acivity.  
The task low return acivity will have the following opions available:
 

Reentry: This atribute will represent whether the re-entry is allowed for the task 
low or not. The available opions are reentry-allowed and reentry-not-allowed.
 

End Transacion: commit and rollback opions are available for the task low to 
commit or rollback the transacion to the database. This is available if the task lows 
are conigured to always require an exising transacion. Transacion opions in the 
task low will be covered later in this chapter.
 

Restore Save point: When this is set to true, this opion will help to restore the state 
of the task low upon entering next ime to the point when it exited the last ime.
Parent Action
We know that a task low can be added to a page as a region. A region will be a secion in the 
page which acts as a placeholder for the task low. In an ADF region, if the bounded task low 
needs to trigger navigaion, then we would see Parent Acion. The outcome will be used to 
navigate the task low containing Parent Acion instead of navigaing the task low of the 
ADF region. The opions available are as follows:
 

Parent Outcome: This will allow the outcome to navigate the parent acion to the 
parent view acivity. It allows the region to force navigaion in the parent task low.  
It is the immediate view owning the region.

Working with Navigaion Flows
[ 186 ]
 

Root Outcome: This will navigate the parent acion acivity to the root page of  
the applicaion. Parent outcome and root outcome are mutually exclusive.
 

Outcome: This will allow the control low to the ADF region when the parent  
or root outcome is queued.
URL View
URL View acivity is used to redirect the view port to an external applicaion. This acivity 
is used to redirect the current view port to a bounded task low or the view of another 
unbounded task low. A view port is the area that allows independent navigaion to other 
view ports. A browser or a region can be considered as a view port. The URL atribute can 
take EL expressions also. The URL View acivity also accepts parameters.
View
The View acivity is the important acivity to add page fragments to the task low. For  
the bounded task low, adding a View acivity will create a page fragment for the user  
to interact. Page fragments will have an extension .jsff for bounded task lows and  
.jspx documents are top-level complete pages without any fragments. The Facelets  
can also be added to the bounded task low with .jsf as an extension for the ile.  
Facelet is added only for a full page.
 

Redirect: Seing this atribute to true will redirect the page from the current view. 
The GET request is used for navigaion to a diferent view acivity.

Chapter 7
[ 187 ]
Time for action – adding a View activity to the task low
Now let us see how to add a view acivity to the task low:
1. Drag-and-drop the View acivity from the component palete to 
createDepartmentFlow.
2. Double–click on the view to open a Create ADF Page Fragment dialog.
3. Provide the File Name as createDepartment.jsff and locate the Directory  
to save the ile.
4. Select the Page Template opion as WebPageTemplate. This is similar to the  
creaion of an index.jspx page in the previous chapter.
What just happened?
The view acivity is added to the task low which will represent the view port that is included 
within the task low. The view acivity can be a page fragment or a facelet.
The Use Page Fragments opion in the Overview tab for the task 
low is used to allow whether the task low can support a page 
fragment or not.

Working with Navigaion Flows
[ 188 ]
Control low
To navigate between aciviies inside the task low, we use the control low. The control low 
will connect the acivity using the arrows in the diagram view. The control low will have 
three secions deined, namely, from-activity, to-activity, and from-outcome.
 

from-activity: This represents the acivity from which the control low iniiates.
 

to-activity: This represents the acivity to which the control low is mapped.
 

from-outcome: This represents the acivity from which the control low is directed. 
This is the outcome from from-activity.
Wild card
Wild card acivity can be added to bounded or to unbounded task lows. We use the wild 
card acivity if we want to navigate the control low from any outcome. The outcome and  
the low can be anything to reach an acivity targeted in the task low. For example, in the 
next screenshot, the control low will navigate to createDepartment from any outcome, 
which starts with foo and any number of characters ater that.
Task low options
The task low opions are available to support diferent coniguraions for the task low.  
The opions can be changed from the Overview tab or from the property inspector by 
selecing the task low. Let us see the opions available for the task lows in detail.
General
The opions available in this category are as follows:
 

Task Flow ID: This is a unique task low ID used to idenify the task low when  
used within another task low within an applicaion, or when the task low is  
included in a library for reuse.

Chapter 7
[ 189 ]
 

Default Acivity: This is the default acivity which will set any one of the aciviies 
available in the task low as the default one.
 

Excepion Handler: Any page view acivity can be made an excepion handler by 
right–clicking on the acivity and selecing Mark Acivity Excepion Handler. This 
property can be set for any acivity in the task low using the property inspector.  
This seing for the acivity is to handle excepions. This is the only property  
available for the unbounded task low in the general secion.
 

Iniializer: This will specify the Java method that is called when the task low  
is iniialized.
 

Finalizer: This will specify the Java method that is called when the clean up takes 
place for the task low.
 

Save Point Restore Finalizer: This speciies the Java method that iniializes the  
task low state when it is restored from the save point.
 

Use Page Fragments: This will allow the use of page fragments in the task low.

Working with Navigaion Flows
[ 190 ]
Visibility
The opions available in this category are as follows:
 

URL Invoke: This will allow the bounded task low to be called directly from a URL 
link. The three properies supported are calculated, url-invoke-allowed,  
and url-invoke-disallowed. The calculated opion will allow a URL to  
invoke the bounded task low if there is no iniial URL speciied.
 

Library Internal: Someimes we package the task low as an ADF library for 
reusability. If this value is set to true, then the bounded task low will be  
considered internal to the library.
Based on a template
The opions available in this category are as follows:
 

Document: The template will be based on a task low template to have standard  
and common aciviies and addiional aciviies. The task low template ile is 
speciied for this property.
 

Based on Template ID: The task low ID is provided to base the bounded task low 
on a task low template.
Managed beans
A managed bean is similar to a backing bean, but can have higher scopes. Backing beans 
are special uses of managed beans. Unlike a backing bean, the ields and methods of the 
managed beans are added by the user and not all the components are ied up to a property 
in the bean. A managed bean can be added to the unbounded or the bounded task low. 
pageFlowScope is just one of the scopes in ADF. To add a managed bean to the task low, 
we need to provide the three values that are mandatory:
 

Name: The name of the managed bean, which we will use in our applicaion  
to refer to the bean object.
 

Class: The actual Java class that represents the managed bean.
 

Scope: This atribute will deine the lifespan of the managed bean object at  
runime. You will see memory scopes explained later in this chapter.

Chapter 7
[ 191 ]
Managed properties
Managed properies are used to store informaion in a variable that is available to use within 
the task low. For example, we would want to store the value of a class object in a property 
for which we do not want to write the code. We can simply have the managed property 
deined to access the value.
 

Name: The name of the managed property
 

Class: The class for which the property is deined
 

Value: The value that you want to store for the managed property
Parameters
To pass informaion from one page to another, we use parameters. Only bounded task lows 
can accept parameters. For example, in our applicaion, we have two task lows created up  
ill now. One is createEmployeeFlow.xml and the other one is createDepartmentFlow.
xml. The second task low is added to the irst task low as a task low call. Therefore, if 
createDepartmentFlow.xml is expecing a parameter, then the parameter has to be  
passed from the createEmployeeFlow task low.
Time for action – passing parameters to a task low
Let us see how to pass a parameter to createDepartmentFlow from the 
createEmployeeFlow bounded task low:
1. Go inside createDepartmentFlow in the ViewController project of 
EmpDirectoryApplication.
2. Click on the Overview tab and select the Parameters secion from the let-hand side.
3. Click on the + icon to add a parameter in the Input Parameter Deiniions secion.
4. Provide the Name as deptIdParam and tab out of the Name column. The Value 
secion will be auto populated with #{pageFlowScope. deptIdParam}.

Working with Navigaion Flows
[ 192 ]
5. Provide java.lang.String in the Class column to deine that the parameter  
that we are passing will be of a String type.
6. Select the Required opion to make the parameter as the required value for the  
task low. The task low will expect the parameter to be populated or user to  
provide a value when the task low is used as a region in a page fragment.
7. Now go back to createEmployeeFlow and select the createDepartmentFlow 
task low call.
8. In the Parameter secion of the task low property inspector, the param that we 
have inserted in createDepartmentFlow will be visible.
9. Here you will have to provide Value as #{pageFlowScope.employeeBean.value}. 
This will be a reference to the value atribute in the EmployeeBean class with geter 
and seter for the value ield in the class ile. Any ield that is added to the managed 
bean can be exposed by providing the get and set methods to access the ield. You 
can also provide the string literals like #{'employee'} as parameters.

Chapter 7
[ 193 ]
What just happened?
We have now passed the parameter from createEmployeeFlow to the 
createDepartmentFlow. The parameter that we have passed is coming from  
the EmployeeBean class, which has to be populated in the bean before passing  
the value to createDepartmentFlow.
Have a go hero – explore the task low
Now it's ime for us to check the task low thoroughly and idenify which opion is used and 
for what reason:
1. In the createEmployeeFlow task low, have a creaion low for the EMP table.
2. Similarly have the DEPT creaion low in createDepartmentFlow.  
Pass the employee number as a parameter from createEmployeeFlow to 
createDepartmentFlow and display the informaion speciic to the employee.
3. The departments added in the createDepartmentFlow should automaically 
populate for the employee with the number that is passed as a parameter.
Behavior
The behavior secion is available in the property inspector of the task low. This secion will 
hold all the properies that are related to the behavior of the task low.
 

Train: Seing this opion to true will make the task low behave like a train 
component with progression of the task. The train stop is provided to complete 
individual tasks using the page fragment.
 

Task Flow Reentry: Seing this opion will let the task low determine whether  
the task low will be allowed to re-enter when the browser back buton is clicked  
by the user. The opions available are as follows:
 

Reentry-allowed: The task flow is allowed to re-enter from any of the  
task flows within the view activity.
 

Reentry-not allowed: The reentry for the task flow is not allowed by 
throwing the InvalidTaskFlowReentry exception to the user.
 

Reentry-outcome-dependent: This option is evaluated on the task flow 
where the return activity is located. It depends on how the task flow had 
been existing before.
 

Criical: If you set this opion to true to save the transacion within the task low, 
then it performs an implicit save.

Working with Navigaion Flows
[ 194 ]
Transactions
A bounded task low supports transacions, which makes it unique when compared  
to unbounded task low. The opions available for transacion management within  
the task low are as follows:
 

No controller Transacion: This is the default opion, which means that the task  
low will not take part in any transacion. There will always be a transacion if we  
use the ADF Business components.
 

Always Use Exising Transacion: The transacion which is already in use is taken  
by the task low always. This requires the calling task low to start a transacion.
 

Use Exising Transacion If Possible: This opion will look for available exising 
transacions when the task low is called. If it is available, then the transacion  
is taken, otherwise, a new transacion is created.
 

Always Begin New Transacion: This opion will always create a new transacion, 
regardless  of whether a transacion already exists or not. The created transacion 
will end when the task low starts exiing.
 

Share data control with calling task low: The data control can be shared 
between task lows using this opion. The called task low can change or  
modify the data from the data control owned by the calling task low.
 

No save point on task low entry: This opion will restrict the transacion to  
create the ADF model save point on the task low.
Task low as a region
By now, you will have understood clearly the usage of task lows as a powerful component in 
building interacive lows in the web applicaion. For example, the createDepartmentFlow 
task low can be added to the page fragments so that the enire content of the bounded 
task low can be uilized inside the fragments itself. Bounded task lows added to the page 
fragments as af:region will have the reference in the page deiniion ile as task low 
bindings. The reference to the task low is added as a value poining to the RegionModel 
framework API. You can pass a parameter to the task low using the task low bindings.
Time for action – adding a task low as a region
Now we will see how to add a task low to the page fragment ile:
1. Double–click on the employee.jspx ile from the Structure window. This will open 
up the ile for you.
2. Now select createEmployeeFlow.xml from the applicaion navigator.

Chapter 7
[ 195 ]
3. Drag the ile and place it inside the content facet, as marked in the following image:
4. A small pop up will be shown to select a Region or a Dynamic Region. A Dynamic 
Region will dynamically determine which task low will be displayed at runime based 
on a value set in the managed bean. Select the Region opion from the pop up.
5. A pop up will be displayed for you to provide a value for the parameter. Provide a 
value for the parameter. You can enter the value '10'.
What just happened?
We have added a task low to the page. You can now see that the page deiniion ile will 
have a task low binding added to it, as shown in the previous screenshot. The task low  
will have the parameter deptId and the value as 10. The department ID passed to the task 
low is 10 and the task low will be displaying the informaion related to department 10.
ADF life cycle
When the ADF page is requested from the client by the user in a web applicaion, it will 
undergo some phases to process the request and respond to the client. The phases which 
are involved in ADF to respond to the client are known as the ADF life cycle. The life cycle 
is involved in every request that happens for the page: request a page, refreshing the page, 
throwing an excepion, displaying the UI message, all involve the ADF life cycle.
As ADF is built on top of JSF, it would share some of the life cycle phases from JSF:
 

Restore View: When the URL is requested by the client, the ADF faces component 
tree is built from scratch for the page, or it will be restored from the previous request. 
During this phase, the URL requested is passed to the bindingContext object, which 
will locate the page deiniion ile for the requested page.

Working with Navigaion Flows
[ 196 ]
 

Iniialize Context: In this phase, the LifeCycleContext object is instaniated  
and iniialized with the associated request, binding container, and the life cycle.  
At runime, the page deiniion ile is created for the requested page, which is used 
to create the bindingContainer object. The initializeMethodParameters 
method is called as part of the life cycle.
 

Prepare Model: This phase prepares and iniializes the model. The page parameters 
are set and the methods in the executable secion of the page bindings are executed. 
The prepareModel method is called in this phase.
 

Apply Request Values: The values for the components are applied and the 
associated events are queued. These values are later used in the Update Model 
Values phase. If the immediate opion for the component is set to true, then the 
validaion, conversion, and updaing of model values are skipped. The life cycle 
directly goes to the Render Response phase. The buildEventList method is 
called in this phase.

Chapter 7
[ 197 ]
 

Process Validaions: The validaion for the applied values takes place in this phase. 
If there is an error while doing validaion, then the life cycle directly moves to the 
Render Response phase.
 

Validate Model Updates: This phase is to verify the model updates that occurred 
previously. The validateModelUpdates method is called.
 

Invoke Applicaion: The applicaion is invoked using the acion binding components.
 

Metadata Commit: This phase is used to commit the runime metadata for the model.
 

Render Response: The components in the tree are rendered with the updated 
values. The state of the view is saved for further request processing.
 

Update Model Values: Ater the validaion is successful, the model values are 
updated for the components. In this phase, the processUpdateModel method is 
called. This method will update the model with the submited values in the request.
Memory scopes
At runime, we have the bindings and the managed bean instaniated and these objects  
have a speciied life ime to live ater which the access to these objects is not possible.  
If you want to store an object in a speciic scope, we will use the scope to store the value, 
such as #{requestScope.param}, which means that the object param is stored in 
requestScope. The scope will determine how long the objects are to be made available  
for access. There are six scopes available for us to use.
 

Applicaion Scope: The object will be stored for the duraion of the current 
applicaion and it is across user sessions.
 

Session Scope: The object is available for the current user session and will not be 
available if the user exits out of the session. We will use the SessionScope API to 
store the object in the session. In an EL expression we used it as #{sessionScope.
param}. You should not reference or use the standard servlet scopes such as 
session, applicaion, or request to refer to the managed bean. Referring to the 
managed bean with a standard preix will fail to instaniate the bean.
 

Page Flow Scope: The object is available for the duraion of the bonded task 
low. We use #{pageFlowScope.param} to access the object stored in 
pageFlowScope.
 

Request Scope: The object is available only from the HTTP request and the  
response ime is sent back to the client.

Working with Navigaion Flows
[ 198 ]
 

Backing Bean Scope: The scope is just like Request Scope and is only used for  
a managed bean and for developing custom components. Each page can have  
more than one page fragment or a declaraive component and we would 
want to separate the scope instances from each other. The scope is used as 
#{backingBeanScope.param}.
 

View Scope: The object is available only for the ime the view ID is available  
and it is unavailable if the ID changes. If we want to store informaion that  
needs to be available only for a single page, we will use the View Scope.  
It is used as #{viewScope.param}.
Relationships between the scopes
The following diagram will explain the relaionship between the various scopes that are 
available in ADF:
The previous image explains the scopes using the .jspx page in an unbounded task low. 
The View acivity, Method call acivity, and Task Flow Call acivity are included in the low.
Applicaion Scope is available throughout the applicaion.
Session Scope ends at the last View acivity.

Chapter 7
[ 199 ]
Page Flow Scope within an unbounded task low is available ill the last View acivity. 
PageFlowScope2 is available within the Task Flow Call acivity.
Request Scope is available only between two control low requests. RequestScope1 is 
available between irst View and the second View acivity. RequestScope2 is available 
between the second View and the Task Flow Call acivity. RequestScope5 is available from 
the Task Flow Call to the last View acivity.
View Scope is available separately for each of the View ports involved in the low.
The previous image will explain the scopes within a bounded task low. All the views involved 
are page fragments in the task low. The third View contains a task low as a region. D1 and D2 
are the two components deined in Backing Bean Scope for which two backing bean scopes 
are available for each of the components. PageFlowScope2 is available within the task low 
inside the page fragment of the third View.

Working with Navigaion Flows
[ 200 ]
Pop quiz
Q1. __________ and __________ are the two types of ADF Task Flows available.
1. Unbounded, bounded
2. Call, return
3. Managed, unmanaged
Q2. Which of the following is considered as the usage of Bounded Task lows?
1. Reusability
2. Security
3. Single point of entry
4. Pass parameter
5. All of the above
Q3. Router acivity is useful to display the ADF faces components in the page condiionally.
1. True
2. False
Q4. Which of the following is not deined as the ADF memory scopes?
1. Page low scope
2. Applicaion scope
3. Backing bean scope
4. Flash scope
5. Request scope
Q5. We would use which of the following component to display bounded task low in the  
UI page?
1. 
af:inputText
2. 
af:outputText
3. 
af:commandLink
4. 
af:region
5. 
af:panelGroupLayout

Chapter 7
[ 201 ]
Summary
Let us recap what we have learned in this chapter. We have learned about the ADF task lows 
and its types. We saw how to use the task low aciviies and the opions available for the task 
lows. We have also learned how to pass parameters to the task low and how task lows are 
displayed in the UI. Finally, we have learned about the ADF life cycle and the memory scopes  
in ADF.
 

In the next chapter, we will see how to enhance the UI look and feel using the  
CSS skins and themes.


8
Layout with Look and Feel
The main advantage of having a web application is being able to provide 
business services directly to the customer without physically going and shopping 
at the vendor's location. Nowadays, e-commerce has evolved to the extent that 
everything is done online just with a couple of clicks. As online activities count 
a lot for business, the presentation of a web layer is increasingly important to 
drive traffic to the website. User traffic will increase based on the look and feel 
of the web page. A user will prefer to visit a web page that is visually appealing.
One of the reasons for Facebook's success is its simple layout, with a uniform 
look and feel throughout the website. Skins and themes are vital for any web 
application to become a success.
In this chapter, we will learn:
 

Skinning essenials
 

Using the skin editor
 

Skinning a web applicaion
Skinning essentials
ADF 11gR2 provides a skinning framework to allow the developer to change the look 
and feel of the page easily and consistently. With the introducion of the skin editor in 
JDeveloper Release 2, the skinning experience with ADF web applicaion development  
is taken to a diferent level.

Layout with Look and Feel
[ 204 ]
Skinning is an important task in any web applicaion because styling makes the applicaion 
presentable and will atract user traic. CSS customizes the appearance of the web applicaion 
and allows a consistent look and feel throughout the website.
What is a skin?
A skin is a stylesheet based on a CSS 3.0 standard deined for the enire applicaion. The skin 
will provide a visual change in the appearance of the applicaion at runime.
Some of the advantages of skinning are as follows:
 

Styling the applicaion
 

Customizing the web components
 

Changing the runime labels
In ADF 11gR2, we have a skinning editor IDE that is used to skin and style the applicaion 
visually. The skin editor is used to create a skin for the web applicaion without wriing its 
code manually. All the acions in the IDE add the necessary content in the .css ile, and 
 the skin is made ready for our use.
In the following screenshot, we can see the diferent types of skinning that is possible using 
ADF 11gR2:
You can truncate readOnly text using skinning. We’ve set styleClass=’truncate’.
This is truncated text in a read-only field. We are testing truncation. We have
set the styleClass attribute to a ‘marker’ styleclass. It can be any name, but in
this demo we use truncate. We truncate using skinning.
ReadOnly
Label:
Disabled: hello
R
hello
eadonly:
C ? Name:
Name is customized
customize the label
background changed
Added a help in the
label
background for text field
disabled text field
color can be changed
ADF 11gR2 uses the fusionFx skin for all applicaions by default. ADF allows the user to 
change the skin that has to be applied for the applicaion. The skins are conigured using 
the trinidad-config.xml ile to use the user-deined skins for the applicaion. The ADF 
Faces component provides a wide range of skins to be selected for the applicaion. They are 
simple, fusion, fusionFx, blafplus, blafplus-medium, blafplus-rich, fusion-
simple, fusionFx-simple, and so on. The simple skin will have minimal formaing and 
the blafplus skins will have a modest skinning and formaing style. The fusion skins will 
deine the default ADF Faces component styles. Each of these skins will inherit some styles 
from the parent skins.

Chapter 8
[ 205 ]
In the following hierarchy, we can see that blafplus and fusion-base are the two skins 
that inherit the features of the simple skin. blafplus again gets extended to blafplus-
medium and blafplus-rich. fusion and fusion-simple are derived from fusion-
base that gets extended to the fusionFx and fusionFx-simple skins.
Simple
blafplus
blafplus-medium
blafplus-rich
fusion
fusionFx
fusion-simple
fusionFx-simple
fusion-base
Time for action – adding a skin ile to the application
Let us see how to create a skin ile for our EmpDirectoryApplication applicaion.
1. Right-click on the WEB-INF folder from the ViewController project of your 
EmpDirectoryApplication applicaion, and select the New opion from the 
Context menu.
2. From the General secion in the New Gallery window, select the File item.
3. Provide the File Name value of the ile as trinidad-skins.xml and click  
on the Ok buton to create the ile.
4. Add the following entry in the .xml ile:
<?xml version="1.0" encoding="ISO-8859-1"?>
<skins xmlns="http://myfaces.apache.org/trinidad/skin">
    <skin>
        <id>empSkin.desktop</id>
        <family>empSkin</family>
        <extends>fusionFx-simple.desktop</extends>
        <render-kit-id>org.apache.myfaces.trinidad.desktop       
</render-kit-id>
        <style-sheet-name>skins/empSkin/empSkin.css</style-sheet-
name>
        <bundle-name>myBundle</bundle-name>
    </skin>
</skins>

Layout with Look and Feel
[ 206 ]
5. Now we will have to create the CSS ile referenced in our skin ile.
6. Follow steps 1 through 3 and provide the File Name value as empSkin.css; the 
locaion of the ile has to be ViewController/public_html/skins/empSkin/.
7. Click on the Ok buton when inished.
What just happened?
To have your own skins, you will have to create a ile named trinidad-skins.xml in the 
same folder as that of the trinidad-config.xml ile. A typical trinidad-skins.xml 
ile will have atributes, such as ID, family, render kit, and the stylesheet locaion for the 
custom skin ile. In the previous secion, we have created the trinidad-skins.xml ile 
with the following elements:
 

<skins>: This is the root that will contain one or more skin deiniions.
 

<skin>: This element is used to idenify individual skins.
 

<id>: This is the unique ID given to the skin reference that you are creaing.  
Usually, the ID is the skin family value suixed with .desktop.
 

<family>: This is to conigure your skin for a paricular family of skins. Each skin 
must belong to a family that is referenced from the trindad-config.xml ile.
 

<extends>: This element is used to extend the skin by its family name.
 

<render-kit>: This is used to deine which render kit has to be used for the skin.
 

<style-sheet-name>: This is used to refer to the locaion of the skin ile. In our 
case, we have created our skin stylesheet at the locaion speciied in the ile.
 

<bundle-name>: This element will deine the resource bundle that has to be  
used for the skin. The bundle name can refer to the fully qualiied name of the  
Java resource bundle.
 

<version>: This opion is used to version the skin that is added to the ile.  
An applicaion can have diferent versions of the same skin.
The trinidad-config.xml ile is located in your ViewController/public_html/WEB-
INF folder. The ile will have a reference to the skin that was used in the web applicaion. 
The <skin-family> tag will refer to the skin name and the <skin-version> tag will have 
a reference to the version of the skin that has to be used for the applicaion. The ile in our 
EmpDirectoryApplication applicaion should have entries such as the following:
<?xml version="1.0" encoding="windows-1252"?>
<trinidad-config xmlns="http://myfaces.apache.org/trinidad/config">
  <skin-family>empSkin</skin-family>

Chapter 8
[ 207 ]
  <skin-version>1.0</skin-version>
</trinidad-config>
Skin selectors
A cascading stylesheet includes ideniiers and properies to describe the appearance of  
the components inside the applicaions. Following are the types of selectors used in ADF  
for styling the components:
 

Global selectors: These are selectors that afect more than one component. If the 
property ends with :alias, the selector will afect more than one component.  
For example, having a property like the following will afect all the components, 
which includes the selector as well:
.AFDefaultFontFamily:alias {
 font-family: Tahoma, Verdana, Helvetica, sans-serif;
}
 

Component selectors: This selector is applied to a single ADF Faces component. 
For example, if you want to change the background color of an af:inputText 
component, you will be wriing the style selector as:
af|inputText::content {
         background-color: red;
}
 

Standard selectors: This selector is a generic selector deined to represent the 
component directly. The styles and properies of the component used in the CSS are:
af|inputText {
         font-family: Tahoma, Verdana, Helvetica, sans-serif;
}
Pseudo classes in the ADF skinning framework
Pseudo elements are supporing elements represening the component state that are styled 
in CSS. For example, the command link has two states that are :hover and :active. They 
are applied to almost every ADF Faces component. Even the :alias state that was explained 
in the previous secion is deined as a pseudo class. Some common pseudo classes used by 
ADF are:
 

Drag and drop: :drag-source, :drop-target
 

Standard: :hover, :active, and :focus
 

Right to let: :rtl

Layout with Look and Feel
[ 208 ]
 

Inline ediing: :inline-selected
 

Message: :fatal, :error, :confirmation, :warning, and :info
Using the skin editor
The skin editor is a visual IDE with all the key features helpful for creaing skins and themes 
for the web applicaion. The skin editor within the Property window is very helpful for ediing 
styles and skin properies.
You can download the skin editor for 11gR2 from the following URL:
http://www.oracle.com/technetwork/developer-tools/adf/downloads/
index.html
Extract the skineditor.zip ile to a new folder inside the middleware folder and name 
the folder as skineditor.
Time for action – creating an ADF skin using the skin editor IDE
Let us see how to create an ADF skin using the skin editor. Open skineditor.exe from the 
locaion in the skineditor folder where you have extracted the skineditor.zip ile. 
Perform the following steps to create an ADF skin using the skin editor IDE:
1. Click on New Applicaion; it will open Create ADF Skin Applicaion.
2. Provide the Applicaion Name value as SkinApplication and locate the  
directory for the applicaion.

Chapter 8
[ 209 ]
3. Click on the Next buton; it will open the next screen where you can provide the 
Project Name and Directory values for the project.
4. Provide the Project Name value as EmployeeDirectory and locate the directory 
for the project. The Target Applicaion Release value is set to 11.1.2.0.0/11.1.2
.1.0/11.1.2.2.0.
5. Click on the OK buton to create the project.
6. Now you will see the added EmployeeDirectory project in the projects secion.  
Now right-click on the EmployeeDirectory project and select New, and then select 
ADF Skin File from the opion.
7. Now the Create ADF Skin File dialog will open where you can create the skin ile. 
Provide the File Name value as empSkin.css and the Directory name for the skin 
is autopopulated with the skin name.
8. The Family name is autopopulated with empSkin; do not change it.
9. Select the fusionFx-simple-v2.desktop ile as the selecion in the Extends  
opion list.

Layout with Look and Feel
[ 210 ]
10. The Skin Id value is autopopulated as empSkin.desktop. Click on OK to create the 
skin ile for the EmployeeDirectory project as shown in the following screenshot:
What just happened?
Now we have created a skin using the skin editor, which can be used to build both the  
styling and theme for the applicaion. When the OK buton for the Create ADF Skin File 
dialog is clicked, the empSkin.css ile will be created in the empSkin directory. The 
skinBundle.properties ile is also created to provide resource informaion for the  
skins. The trinidad-skins.xml ile is created with the skin details that we created  
in the previous secions. The trinidad-config.xml ile is updated with empSkin 
informaion as shown in the following screenshot:

Chapter 8
[ 211 ]
When you open the empSkin.css ile in the Design view, all available selector informaion 
is provided to make the skin creaion experience simple for users. The skin will have the 
following secions displayed to implement the styles and properies for the components  
in the ADF Faces applicaion.
Extended skins
The empSkin.css ile extends the fusionFx-simple.desktop ile; this means that all 
the styles and properies deined for the fusion skin will be inherited by the empSkin.css 
ile, and the user can add or deine more styles to prepare a skin for the applicaion. The 
Extended Skins dropdown in the skin editor with the folder icon for the skin will list all the 
available skins for the applicaion to extend.
Style classes
The Style Classes secion will have the style class deined for most of the components used in 
ADF Faces. This secion will have the Miscellaneous folder in which most of the common 
styles for the components are categorized. The Note Window folder will contain the styles 
that can be applied only for the ADF note window component. The Popup folder will have the 
styles required for the Popup component. 

Layout with Look and Feel
[ 212 ]
You can select the style from the list, and a preview of the component style will be displayed in 
the right pane with or without themes as shown in the following screenshot:
The Text folder will be helpful in providing visual styles for the text that appears with the 
component. For example, the af:inputText component that accepts only numbers can be 
displayed visually in a style diferent from the one that accepts alphanumeric characters. The 
+ buton in the skin editor will help you to create addiional style changes to the component. 
A user can change the properies of a component using the properies inspector. Any changes 
made through the property inspector will be updated in the empSkin.css ile. The style class 
contains one more folder called Descendant Selectors that will highlight the styles of one 
or more components separated by whitespaces. These selectors will allow you to conigure the 
style of one component when they render within another component.

Chapter 8
[ 213 ]
Global selector aliases
Global selector aliases will list the styles that afect most components based on their common 
properies. These styles are as follows:
 

Color: This secion will list the selectors that afect the color scheme 
of the component, for example, .AFBrightBackground:alias, 
.AFDarkBackground:alias, and so on.
 

Component Groups: This secion will have the selectors applicable for speciic 
component groups, such as Buton, Form Controls, Menu, and Link.
 

Font: This secion will have the global font selector for controlling the fonts of  
the applicaion. .AFDefaultFont:alias is a typical example of this type.
 

Icons: This secion will have styles such as those deined for icons in the applicaion. 
.AFChangedicon:alias and .AFErrorIcon:alias are examples of this type. You 
can create a new selector wherever you want by clicking on the + buton and selecing 
New Alias Selector from the menu opion as shown in the following screenshot:
 

Message: This secion will list the selectors for the common messages displayed for 
the applicaion.
Faces component selectors
This secion will have all the selectors, such as a buton, textbox, table, menu, and so on, 
that are related to individual components. Each component will have their respecive 
selectors to represent the styles. For example, af:inputText will have af|inputText, and 
af:commandButton will have selectors such as af|commandButton. Components will have 
the Pseudo-elements folder and the Descendant Selectors folder to determine how 
they behave visually when combined with another component. Some components will have 
Component Style Classes speciic to the type of the component. 

Layout with Look and Feel
[ 214 ]
The af:inputText component will have a customized style to display the address and 
phone number.
Applying skins
Ater creaing the skins for the applicaion, we will have to test the applicaion to cross-
verify whether the skin that we have created is appropriate for the applicaion or not, and 
modify the style informaion unil the skin is saisfactory. To test the skin, we will have to 
add the following informaion into the context-param secion of the web.xml ile in your 
EmpdirectoryApplication applicaion:
<context-param>
     <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</
param-name>
    <param-value>true</param-value>
</context-param>
<context-param>
    <param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_
COMPRESSION</param-name>
    <param-value>true</param-value>
  </context-param>

Chapter 8
[ 215 ]
The CHECK_FILE_MODIFICATION parameter is used to check whether the ile is modiied 
externally or not, and will apply CSS style changes without restaring the applicaion. At 
runime, the CSS style will cause a compression and change the name of the classes for 
performance reasons. We will use the DISABLE_CONTENT_COMPRESSION parameter  
to disable the CSS style causing this compression to idenify the style classes at runime.  
This parameter is mainly used to debug the skin used for the applicaion.
Deploying skins
The empSkin.css ile will contain the stylesheet informaion and properies for styling our 
web applicaion. Deploying the skin is as easy as creaing the skin for the applicaion. As we 
are using the skin editor IDE to create our skin ile, we will have to deploy the informaion 
into the ADF library for our EmpDirectoryApplication applicaion to use the skin.
Time for action – deploying the skin ile
Now we will see how to deploy the skin ile to make it available for our 
EmpDirectoryApplication applicaion:
1. Right-click on the EmployeeDirectory project in the SkinApplication 
applicaion, and select the New Deployment Proile opion in Deploy from  
the Menu opion.
2. In the Create Deployment Proile dialog, select ADF Library JAR File for the  
Proile Type opion.
3. Provide the Deployment Proile Name value as adfEmpSkin.

Layout with Look and Feel
[ 216 ]
4. Click on the OK buton to open Edit ADF Library Jar Deployment Proile Properies.
5. Select the Jar Opion secion, and locate the Jar File locaion using the Browse buton.
6. Click on the OK buton and then right-click on the EmployeeDirectory project to 
select the adfEmpSkin ile from the Deploy opion.
What just happened?
We have created the skin ile for the EmpDirectoryApplication applicaion and 
deployed it as an ADF library. The adfEmpSkin.jar ile that is deployed to the 
deployment locaion was added as a library to the ViewController project of the 
EmpDirectoryApplication applicaion; we need the adfEmpSkin.jar ile to  
use the empSkin ile.
Pop quiz
Q1. ADF skinning is helpful for which of the following reasons?
1. Customizing the applicaion
2. Styling the components
3. Adding images for the components
4. Maintaining resource strings for the components
5. All of the above

Chapter 8
[ 217 ]
Q2. Global selectors are used to deine the style property of a paricular component.
1. True
2. False
Q3. The ___________ ile is used to deine the skin of the applicaion.
1. 
trinidad-config.xml
2. 
faces-config.xml
3. 
adf-config.xml
4. 
trinidad-skins.xml
5. None of the above
Q4. The ____________ tag is used on the trinidad-config.xml ile to refer to the  
skin that has to be used for the applicaion.
1. 
<skins>
2. 
<family>
3. 
<skin-family>
4. 
<family-skins>
5. 
<render-skins>
Q5. Which property is used to provide the styles for the ADF Faces component?
1. 
styleClass
2. 
contentStyle
3. 
inlineStyle
4. Both a and c
5. None of the above

Layout with Look and Feel
[ 218 ]
Summary
Let us recap what we have learned in this chapter. We have learned about skinning and the 
skin editor. We have learned how to create skins and their components for an applicaion. 
Finally, we have learned how to skin the web applicaion that we have developed.
In the next chapter, we will see how to implement the security for a web applicaion that  
has been developed using ADF11gR2.

9
Implementing Security
Nowadays, the increase in the use of web applications also increases the 
demand for securing these applications. Security plays a vital role in a web 
application to restrict unauthorized access to it. Hacking and phishing are 
some kinds of unauthorized access faced by web applications. They enable 
the intruder to gain complete control of the application and track sensitive 
information. To overcome security breaches, most websites have arranged  
to secure their pages efficiently.
ADF provides an in-built security feature that is handy and is simple for 
developers to implement without much coding involved. With a few clicks,  
ADF allows you to implement a basic set of security features for the application.
In this chapter, we will learn:
 

Implemening security
 

Applying security and permissions
 

Creaing a login page
 

Creaing roles and groups
Introduction to security
The ADF security framework provides authenicaion and authorizaion for web applicaions. 
This security framework is built on top of Java Authenicaion and Authorizaion Services 
(JAAS). Security can be applied to objects, task lows, page fragments, and the page, by giving 
permissions and grants. The framework also supports the enforcing of policies and grants for 
the applicaion to ighten security for the web applicaion.

Implemening Security
[ 220 ]
Basic security
Security using ADF is set up for the enire applicaion and implemening it is in fact very easy. 
The ADF security wizard will be used to provide the security for the enire applicaion. Later, 
the applicaion can be tuned, and policies and grants can be introduced to increase the level 
of security for the applicaion.
Time for action – implementing basic security
Now let us see how we will implement the basic set of security features for the 
EmpDirectoryApplicaion applicaion using the security wizard:
1. Right-click on the EmpDirectoryApplicaion applicaion and select the Secure  
opion from the menu displayed. This can also be accessed from the Applicaion 
menu or the list icon next to the applicaion name.
2. Select the Conigure ADF Security opion from the submenu.
3. Select the ADF Authenicaion and Authorizaion opion from the Security 
Model secion. You will ind another opion that is used for ADF authenicaion, 
authorizaion, and to disable security for the applicaion.
4. On the next screen, you will have an opion which will allow you to select the 
Authenicaion Type opions, namely, HTTP Basic Authenicaion, HTTP Digest 
Authenicaion, HTTPS Client Authenicaion, and Form Based Authenicaion. 
HTTP Basic Authenicaion will display a login box to enter the username and 
password for security. We will select HTTP Basic Authenicaion now.

Chapter 9
[ 221 ]
5. Click on the Next buton, which displays the grants to the user to choose from  
the Enable Automaic Grant secion. The opions are No Automaic Grants, Grant 
to Exising Objects Only, and Grant to All Objects. These opions deine whether 
exising objects are granted to work for everyone or whether they are locked  
down unil proper graning happens.
6. In the next screen, you will have to choose the welcome page. Click on the Redirect 
Upon Successful Authenicaion checkbox. Checking this opion will redirect you to 
a page when the authenicaion is successful. Checking the Generate Default opion 
will generate a default welcome.jspx script. You can create your own welcome 
page by clicking on the magnifying glass icon.
7. The Summary page will list down the summary of opions selected. Click on the 
Finish buton to secure your applicaion.
What just happened?
Ater clicking on the Finish buton, you get a message saying that the security infrastructure 
is created. Authenicaion will prompt for a login to enter into the website and authorizaion 
will make sure whether the user logging in is the right person to access the resource 
provided in the website. When you enable security for the ADF applicaion, some iles  
get updated to make the security feature work for the applicaion.

Implemening Security
[ 222 ]
web.xml
This ile can be found in the public_html/WEB-INF folder. web.xml is the deployment 
descriptor for the enire applicaion. The changes that are made as part of enabling  
security are:
 

The iniializaion parameter remove.anonymous.role is set to false for the 
JpsFilter ilter as this ilter is the irst ilter deined in the ile.
 

Filter mapping for adfBindings along with adfAuthentication is added.  
This is added for the authenicaion servlet.
 

The servlet and the servlet mapping are added for adfAuthentication.
 

The security constraint is added for the authenicaion servlet so that when  
the framework invokes it, authenicaion gets triggered.
weblogic.xml
This ile is used as the deployment descriptor for the web applicaion deployed in  
the WebLogic server. The security role is assigned in the weblogic.xml ile, which  
is located in the same folder as that of the web.xml ile, using the following code:
<security-role-assignment>
    <role-name>valid-users</role-name>
    <principal-name>users</principal-name>
</security-role-assignment>
adf-conig.xml
The runime coniguraions for the ADF web applicaion are added to this ile. The metadata 
for the UI page is conigured using adf-config.xml. The JaasSecurityContext element 
is added for the ile located in the .adf/META-INF folder. The authorizationEnforce 
and authenticationRequire opions will be set to true for the property using the 
following code:
<sec:JaasSecurityContext initialContextFactoryClass="
oracle.adf.share.security.JAASInitialContextFactory"                            
jaasProviderClass="oracle.adf.share.security.providers.jps.JpsSecurity
Context"authorizationEnforce="true" authenticationRequire="true"/>
jps-conig.xml
This ile is located in the src/META-INF folder. The security service is provided and 
the service instances are deined in this ile. Oracle Plaform Security Services (OPSS) 
are deined for diferent security stores. Credential Store Service Provider, 
Login Module Service Provider, XML-based IdStore Provider, XML-based 
PolicyStore Provider, and Anonymous Service Provider are the service providers 
added to the ile. Diferent login modules are added. The equivalent ile in the WebLogic 
server is used for security.

Chapter 9
[ 223 ]
jazn-data.xml
This ile is primarily a policy store. The default security realm is added to this ile in the same 
folder. The security realm is determined by the ile in the WebLogic server domain using the 
following code:
<jazn-realm default="jazn.com">
    <realm>
      <name>jazn.com</name>
    </realm>
</jazn-realm>
When you run the EmpDirectoryApplication applicaion, you will get a dialog box 
promping the user to enter the login informaion. Since we have not conigured any 
username and password, we will provide weblogic as the username and weblogic1  
as the password. Remember that we entered the username and password when the 
integrated server was started for the irst ime.
When you log in, you will get the Error 401--Unauthorized message, which means that you 
do not have permission to view the page you are trying to get access to. This error is seen 
because we have set the No Automaic Grants opion from the Enable Automaic Grant 
secion. The following topic will help you understand the security permissions.
Applying security permissions
The applying of security permissions is done by providing the user with the access to view 
or by modifying the content in the page. For example, employees are given view access to 
a page on the website but are restricted from having edit permission . This means they can 
view the page as read only and cannot personalize the page or modify its content.
Security permissions for an ADF web applicaion are given to business objects, task lows, 
pages, and page fragments. Pages and page fragments are protected through the respecive 
page deiniion iles.

Implemening Security
[ 224 ]
Security for business objects
Security for business components is added directly to the enity to restrict read access or 
to update or remove the enity. The Security opion is available in the General secion for 
the Enity object as shown in the following screenshot. To apply security, there are three 
operaions available for an enity. They are read, update, and removeCurrentRow. These 
operaions are enabled based on the security requirement.
In the same way, we can apply security for the Enity atribute from the Security tab of the 
atribute as shown in the previous screenshot. Click on any atribute that you want to secure, 
and then click on the Security tab. Only the update operaion is available as a security opion 
for the atribute Deptno.
Security for task lows and page-related iles
Security for task Flows, web pages, and page deiniion iles is conigured in the jazn-data.
xml ile. To secure these arifacts, we have to have the jazn-data.xml ile available for 
the ViewController project. This ile is created in the src/META-INF folder when we 
conigure the applicaion for security.

Chapter 9
[ 225 ]
Time for action – adding permissions
Now we will see how to provide permissions for the available resources:
1. Double-click on the jazn-data.xml ile from the META-INF folder in Applicaion 
Resources | Descriptors.
2. Go to the Resource Grants secion in the jazn-data.xml ile. Set the Source 
Project value to ViewController.
3. From the Resource Type list, select the Web Page opion.
4. When you select the Web Page opion, you will see that all the page resources for 
the applicaion are listed below.
5. Now we will have to give permission for our index page so that we can see the 
page instead of geing the 401 --Unauthorized error ater login.
6. Select the index page from the Resources list and then click on the + icon from 
the Granted To secion. We are going to grant permission for the index page to 
anonymous role as shown in the following screenshot:

Implemening Security
[ 226 ]
7. Ater clicking on the + icon, we select the Add Applicaion Role opion from  
the menu. This will open the Select Applicaion Roles pop up.
8. In the pop-up window, select the anonymous-role opion and click on the  
OK buton.
9. Now the Granted To secion will have the anonymous-role applicaion role added  
to it, and you can see the change in the icon of the index ile in the Resources list.
10. The Acions secion on the right-hand side will list acions such as Customize, Grant, 
Personalize, and View.
11. Select the view acion and start running the index.jspx ile.
12. Now you should be able to view the page, and the 401 --Unauthorized error  
will have gone.
13. Now go back to jazn-data.xml and the Granted To secion and uncheck  
the anonymous-role opion.

Chapter 9
[ 227 ]
14. Add authenicated-role from the Add Applicaion Role opion.
15. Go to the User secion and click on the + icon. This will allow you to create  
a new user.
16. Provide webuser as the value for Name, welcome1 as Password, conirm  
the password, and provide webuser as the Display Name value. Ignore the 
Descripion ield.
17. Now run the index.jspx page by right-clicking on and selecing the Run  
opion. You will be prompted to log in.
18. Provide webuser as the Username value and Password as welcome1 to view  
the page.
What just happened?
We created security permissions for the index.jspx page. If we open the jazn-data.xml 
ile, we will see the following entries that were added for the page:
            <permissions>
              <permission>
                <class>oracle.adf.share.security.authorization.
RegionPermission</class>
                <name>com.empdirectory.view.pageDefs.indexPageDef</
name>
                <actions>view</actions>
              </permission>
            </permissions>
The permission to view the index.jspx page has actually been added for the index  
page deiniion ile. In the same way, security permissions can be given to task lows  
and page fragments.

Implemening Security
[ 228 ]
Have a go hero – checking options for authentication in the  
Security wizard
Now check each and every option under Authenicaion Type in the  
Security wizard. The options that have to be tried are HTTP Digest  
and HTTPS Client.
 

Check the changed files and analyze the changes made to the 
security settings
 

Try out the test-all grant that is available for the Applicaion Role secion and 
observe the diference
Creating a login page
In our previous exercise, we saw how to create basic security infrastructure for 
EmpDirectoryApplicaion. Now we will see how to create a login page for our applicaion.
The simplest way of creaing a login page is to use the form-based authenicaion available 
as part of the wizard that is used to secure the applicaion.
Time for action – creating a login page
A login page can be created by following these steps:
1. Right-click on EmpDirectoryApplicaion and select Conigure ADF Security  
under Secure.
2. In the Conigure ADF Security wizard, select ADF Authenicaion and Authorizaion.
3. Under Authenicaion Type , select Form-Based Authenicaion and check Generate 
Default Pages.
4. As you can see, Login Page will be named login.html and Error Page is named 
error.html. These iles will be created at the root of the web applicaion.
5. Coninue unil you click the Finish buton as explained before.

Chapter 9
[ 229 ]
6. Now when you run your index.jspx page, you will be redirected to the login.
html page. Provide the correct password to enter into the applicaion, otherwise 
you will be redirected to the error.html page.
7. With HTTP based Authenicaion selected, the login prompt cannot be asked for 
unless you restart the server. In Form based Authenicaion, the user is redirected 
to the login page if the user's session expires.
What just happened?
Now we have the login page ready for our applicaion. Whenever the page is accessed by  
the user, he/she will be redirected to the login page before entering the web applicaion.  
The web.xml entry will change from BASIC to FORM as shown in the following code:
<login-config>
    <auth-method>FORM</auth-method>
    <form-login-config>
      <form-login-page>/login.html</form-login-page>
      <form-error-page>/error.html</form-error-page>
    </form-login-config>
</login-config>
And for the user that gets added, the changes will be in the jazn-data.xml ile as follows:
<users>
        <user>
          <name>webuser</name>
          <display-name>webuser</display-name> 
          <credentials>{903}hUdKmD5fW+iPvOj6ssYILvxD/eZNB5Tf 
          </credentials>
        </user>
</users>
The login.html ile will have the following entry to get the username and password from 
the user. The name of the text ield is important as the value is processed based on the name 
of the text ield. For example, in the following code, the username is retrieved by the text 
ield that has j_username as the username:
<input type="text" name="j_username"/>

Implemening Security
[ 230 ]
In the same way, the password ield is represented as j_password:
<input type="password" name="j_password"/>
The form will have the method POST and the acion j_security_check.
<form method="POST" action="j_security_check">
When login succeeds, j_security_check will be redirected to the login.html page.  
If login fails, the error page is shown.
Creating roles and groups
Roles are created to separate a secion of users from the rest within the applicaion. 
Applicaion roles are deined inside the applicaion, and the mapping of applicaion roles  
to enterprise roles happens at deployment. Enterprise roles for users in JDeveloper exist  
only to simulate a real-world environment. Enterprise roles represent the user groups 
deined in corporate idenity management. In the jazn-data.xml ile, enterprise roles  
are created for tesing to mimic the idenity management system.
Application
Role
Enterprise Roles
Users
Users
Enterprise Roles
Users
Enterprise Roles
Users
Enterprise Roles
Users
For example, applicaion roles can be OPERATIONS_DUTY and MARKETING_DUTY, and 
enterprise roles can be VP_JOB and CHANNEL_MANAGER_JOB. The hierarchy can have 
an applicaion role that can directly have users and some of the enterprise roles as well. 
Enterprise roles can further have enterprise roles and can directly have users.

Chapter 9
[ 231 ]
Time for action – creating roles and assignments
Now we will create the roles and assign them accordingly:
1. Open the jazn-data.xml ile. Open the Users secion and make sure that you 
have webuser added to the Users list.
2. Click on the + icon, and create the marketinguser and operationsuser users 
just like we did in the previous exercise by providing welcome1 as Password.
3. Now move to the Enterprise roles secion, and click on the + icon to create a role. 
Create three roles, namely, VP_ROLE, MANAGER_ROLE, and EMPLOYEE_ROLE.
4. In the Members secion, add operationsuser.
5. For VP_ROLE in the Assigned Roles tab, click on the + icon to go to the Assign 
Enterprise Role page and select MANAGER_ROLE and EMPLOYEE_ROLE. A VP can act 
as a manager and as an employee. 
6. Now select MANAGER_ROLE and EMPLOYEE_ROLE as Assign the Enterprise role:
7. Now select EMPLOYEE_ROLE, and in the Members secion, add webuser to it using 
the Add User opion.
8. Now go to Applicaion Role and add MARKETING_DUTY and OPERATIONS_DUTY as 
new applicaion roles.
9. Under MARKETING_DUTY, add two more roles by selecing Add to Exising Roles 
ater right-clicking on the MARKETING_DUTY role.
10. Within the ADMIN_ROLE secion, click on the + icon in the Mappings secion 
as shown in the following screenshot. Click on the Add User opion and add 
marketinguser.

Implemening Security
[ 232 ]
11. For USER_ROLE, add operationsuser and webuser.
12. For the MARKETING_DUTY role add EMPLOYEE_ROLE and MANAGER_ROLE as the 
applicaion roles. OPERATION_DUTY will have only MANAGER_ROLE assigned as 
the applicaion role. Applicaion roles are those which end with _DUTY, and the 
enterprise roles end with _ROLE.
13. Now move to the Resource Grants secion and click on the index page. In the 
Granted To secion, we have authenticated-role already added to it. Click on 
the + icon and add Applicaion Roles.
14. Now select the OPERATION_DUTY role in the Select Applicaion Roles window.
What just happened?
When we run the index.jspx ile and try to log in with marketinguser. You will get 
the 401 unauthorized error, and you will not be allowed to enter the page. However, when 
you log in using operationsuser, you will be redirected to the correct page because 
operationsuser alone its into the hierarchy as shown in the following diagram:
MANAGER_ROLE
OPERATIONS_DUTY
VP_ROLE
operationuser

Chapter 9
[ 233 ]
The OPERATION_DUTY applicaion role has a mapping to MANAGER_ROLE as enterprise role. 
MANAGER_ROLE has VP_ROLE as a member in the Enterprise Roles secion. VP_ROLE has 
operationuser as a member. So operationuser will resolve the security constraint and 
will provide access to the page.
Have a go hero –  assigning different application roles to users
Now you can have diferent users and try out diferent users assigned to diferent applicaion 
roles and enterprise roles and check whether the users have proper access to various pages:
 

Create some users then add them to applicaion roles and enterprise roles and 
observe the diference in the role assignments.
 

Know the hierarchy and research each of the opions available for you to explore  
in the jazn-data.xml ile.
Disabling ADF security
We have now secured our page properly. However, if you do not want the security in place 
later, for tesing purposes, you will have to remove it. You don't have to worry about the 
changes that get added while removing security. ADF takes care of modifying all the iles  
that are afected, and your applicaion will be unsecured in couple of clicks.
Time for action – disabling security for ADF applications
Now let's disable ADF security by using the following steps:
1. Right-click on EmpDirectoryApplicaion and select the Secure opion or select the 
Secure opion from the Applicaion menu.
2. Select Conigure ADF Security from the submenu.

Implemening Security
[ 234 ]
3. Select Remove ADF Security Coniguraions and click on the Next buton.
4. Click on the Finish buton to remove security from the applicaion.
What just happened?
We just removed security from EmpDirectoryApplication. All the entries related to 
security in the web.xml, jazn-data.xml, and jps-config.xml iles will be removed. You 
can reapply security to the applicaion by following the steps described earlier in this chapter.
Pop quiz
Q1. ADF security is conigured by _______________.
1. wriing code
2. using a coniguraion wizard
3. a declaraive way
4. All of the above
5. None of the above
Q2. A single user can have diferent roles.
1. True
2. False
Q3. The _______________ ile is important in deining the security roles for the user  
in ADF web applicaions.
1. 
cwallet.sso
2. 
jps-config.xml
3. 
jazn-data.xml
4. 
web.xml
5. None of the above
Q4. The ______________ authenicaion type is used to provide login.html and  
error.html for user login authenicaion.
1. BASIC
2. HTTPS
3. FORM
4. KERBEROS
5. CLIENT

Chapter 9
[ 235 ]
Q5. Which servlet is used for ADF authenicaion?
1. 
FacesServlet
2. 
AuthorizationServlet
3. 
AutoServlet
4. 
AutheticationServlet
5. None of the above
Summary
Let us recap what we have learned in this chapter. We have learned about ADF security. We 
have learned how to create security permissions for the pages and their related iles. Finally, 
we have learned how to create users and enterprise and applicaion roles, and how to assign 
policies and grants to the roles.
In the next chapter, we will see how to deploy a web applicaion to the server in ADF 11gR2.


10
Deploying the ADF Application
Once the web application is designed, developed, and tested, the next task is to 
make it available for the public to access and experience the user interface and 
interactions. The web application is deployed to a server that can be accessed 
by users from any location using a web browser. The application hosted on a 
web server will be accessed through a request made by the user using the HTTP 
protocol. For any application lifecycle, deploying the application to the server is 
important to make it accessible from anywhere.
In the case of the ADF web application, we will normally deploy the application 
as a J2EE application. The deployed application inside the web container of the 
server will serve the user requests.
In this chapter, we will learn:
 

ADF applicaion deployment
 

Preparing for deployment
 

Deployment to the WebLogic server

Deploying the ADF Applicaion
[ 238 ]
ADF application deployment
The ADF web applicaion iles are packaged into archives and deployed to the server for 
user access and interacion. Normally, in a development environment, JDeveloper 11gR2 
comes with an integrated WebLogic server to test the applicaion. The ADF applicaion can 
be deployed to diferent servers such as WebLogic and WebSphere which are provided 
with the ADF runime libraries, and the shared libraries related to the web applicaion are 
available for the server. Using JDeveloper, the user can deploy the current applicaion and 
test it with the use of the integrated WebLogic server.
Overview
Deploying an applicaion is as important as developing the applicaion. The WebLogic  
server 10.3.5.0 is integrated with JDeveloper 11.2.2.0. There is an opion for us to deploy 
the applicaion to a diferent applicaion server provided that the server contains all runime 
libraries to support the ADF applicaion. The ADF runime libraries, which are called Java 
Resource Files (JRF), are provided by default for the WebLogic server, WebSphere, and 
GlassFish. The ADF applicaion is deployed to the server as a packaged enterprise archive 
which contains the required web content and related resource iles. All the deployment 
library properies are conigured from the Deployment opion in the Project properies and 
Applicaion properies opions. The diferent archives that are helpful at diferent stages of 
the ADF web applicaion deployments are as follows:
 

Java Archive (JAR): Java archive is a Java speciic archive that is used to package all 
the Java class iles related to the project. For example, we can bundle all the uility 
class iles as a Java archive ile and then use it in any other project. JAR iles are used 
as libraries in the Model and Viewcontroller projects. The ile structure includes 
a class ile and a META-INF folder that contains the MANIFEST.MF ile.
 

ADF library (JAR): The ADF library is an archive that is speciic to the ADF framework. 
The ADF library is diferent from a Java archive ile because the ADF library will 
pull all related libraries referenced by the iles and add it to the manifest ile. The 
dependent libraries are pulled by JDeveloper and added as a secondary import. The 
ADF library will expose the ADF task lows and other ADF-speciic metadata iles that 
are not exposed by a normal Java archive ile. ADF libraries may contain task lows 
but are also used for declaraive components and page templates. Using the ADF 
library, we can drag-and-drop the task low onto the page as a region. The structure 
includes the META-INF folder containing the manifest ile along with the jar-
connection.xml and jar-adf-config.xml iles speciic to the ADF library.  
The ADF library can contain coniguraion iles for the ADF applicaion.

Chapter 10
[ 239 ]
 

Web Applicaion Archive (WAR): Web archive is a package of all the web-related 
iles. The Web Archive opion is available from the Viewcontroller project that 
contains the web resources. All iles such as .html, .jspx, .jsff, and .jsf are 
packaged as WAR iles. The ile structure contains a WEB-INF folder that contains 
adfc-config.xml, web.xml, weblogic.xml, faces-config.xml, trinidad-
config.xml, and so on. The classes folder contains the Java classes such as 
backing or managed bean added in the UI project. The lib folder will include  
all the dependent libraries that are required to compile the web archive ile.
 

Metadata Archive (MAR): This archive will package all the metadata iles needed  
for the customizaion of the web pages. Customizaion includes a few XML iles that 
will have the delta details for diferent users. The metadata archive will package  
the XML iles along with the coniguraion iles to support the user customizaion. 
More about this will be discussed in Chapter 11, Advanced Features of ADF.
 

Enterprise Archive (EAR): Most of the web applicaions which involve model data 
interacion will be packaged using the enterprise archive. The business logic which 
interacts with the data layer and the presentaion layer is collecively bundled into 
a single archive. The presentaion layer informaion is bundled internally using the 
web archive and then it is added to the enterprise archive. The folder structure of  
an EAR will be as follows:
adf
META-INF
adf-config.xml
connections.xml
lib
META-INF
application.xml
cwallet.sso
HRSchema-jdbc.xml
jps-config.xml
weblogic-application.xml
ViewController_Webapp.war

Deploying the ADF Applicaion
[ 240 ]
Preparing for deployment
Before deploying the ADF applicaion to the applicaion server, we have to make sure that 
the following tasks are set up correctly in order to deploy the applicaion:
 

Connecion
 

Deployment proiles
 

MDS coniguraion
 

Deployment descriptors
 

Security
 

Data source
Connection
The database connecion is essenial for deployment. The ADF Business Components secion 
in the Model project will display the database connecion informaion for accessing the data 
from the DB layer. In EmpDirectoryApplication, we have the HRSchema connecion added 
to the Model project as the database connecion. The connecion informaion is stored in 
connections.xml. The connecion name alone can be deployed by selecing the Connecion 
Name Only opion for the deployment proile of the Model project. You also have an opion to 
deploy the Connecion Details opion in the same locaion.

Chapter 10
[ 241 ]
Deployment proiles
The deployment proile is the seing that is added to the project to conigure the project for 
deployment. Deployment will package the project related iles and archive it as a library. The 
proile informaion will include the dependent libraries, archive locaion, ilter opion for the 
iles to include, and so on.
Time for action – creating the deployment proile
Now we will see how to create a deployment proile for EmpDirectoryApplication.  
First, we will create the proile for the ViewController project and later we will create  
a proile for the applicaion. Creaing an ADF library is explained in Chapter 8, Layout with 
Look & Feel.
1. Right-click on the ViewController project and select Deploy from the menu opions.
2. Select the New Deployment Proile from the New buton in the Deployment 
secion of the Project properies pane, which will create a new deployment proile.
The Create Deployment Proile dialog box is displayed to the user. Select WAR  
File from the Proile Type opions and then provide Deployment Proile Name  
as webappEmpDir as shown in the previous screenshot.
3. Click on the OK buton to open the Edit WAR Deployment Proile Properies page. 
The General secion will allow the user to specify the WAR ile's locaion and the 
web applicaion's context root.
4. The Proile Dependencies and Library Dependencies secions are used to provide 
the dependencies for the WAR ile. Check the adflibModel library from the  
Proile Dependencies secion under the Model secion.

Deploying the ADF Applicaion
[ 242 ]
5. Click the Ok buton to create the WAR ile for the ViewController project.  
This acion teaches how to create the WAR ile, because every Viewcontroller 
project will have a deployment proile by default, which will deploy to a WAR ile 
and will be deployed to the server when the applicaion starts running from the 
integrated server.
6. In a similar way, create the deployment proile for EmpDirectoryApplication  
by clicking on the Applicaion menu and then selecing the New Deployment Proile 
opion from Deploy.
7. In the Create Deployment Proile window, select EAR as Proile Type and then 
EmpDirectory as the Proile Name.
8. Click on the Ok buton to conigure the proile. In the Applicaion Assembly secion, 
select the webappEmpDir project under the respecive projects.
9.  Click on the Ok buton when inished.
What just happened?
We have created a deployment proile for the ViewController project and for 
EmpDirectoryApplication. The deployment proile is helpful in creaing the archive  
ile as part of the deployment process. The proile informaion will conigure the archive  
with related informaion such as which iles to add, where the archive is to be deployed,  
and which libraries are to be added. The deployment process will read this informaion  
to deploy the archive as desired.
Have a go hero – analyze the deployment proile conigurations
Now you are going to analyze the coniguraions in the deployment proile:
1. Analyze the File Groups secion.
2. Why do we have library dependencies?
3. What is the signiicance of proile dependencies?
MDS coniguration
Metadata Services (MDS) is used to customize the web applicaion based on the user role. 
The customizaion allows the user to change the content of the web applicaion at runime 
for visual preferences and retain them for the next session. The customizaion is stored in the 
MDS repository. The customizaion is stored in a metadata archive ile in the server directory. 
The MDS repository directory is conigured from the applicaion properies as shown in the 
following screenshot:

Chapter 10
[ 243 ]
The adf-config.xml ile will hold the coniguraion informaion for the MDS 
customizaion. The customization class is added to the ile using the following code:
<adf-mds-config xmlns="http://xmlns.oracle.com/adf/mds/config">
    <mds-config xmlns="http://xmlns.oracle.com/mds/config" 
version="11.1.1.000">
      <cust-config>
        <match path="/">
          <customization-class name="oracle.adf.share.config.UserCC"/>
        </match>
      </cust-config>
     </mds-config>
  </adf-mds-config>
Deployment descriptors
These are the iles that will have the coniguraion and deployment informaion that is 
essenial to deploy an applicaion to the server. For every JEE web applicaion, we will  
have a dedicated deployment descriptor to manage and maintain the way the web 
applicaion runs. The common deployment descriptor for the ADF web applicaion is  
web.xml, which is found under the WEB-INF folder of the applicaion.
web.xml
web.xml is the deployment descriptor that will store all the coniguraions needed to deploy 
and start the applicaion in the WebLogic server. This ile will store the session imeout, 
security features, and welcome iles for the web applicaion. Some of the coniguraions are:
 

Context iniializaion parameters: These are the values that are available at the start 
of the applicaion. Someimes we use the opion available to toggle between the 
logic in our applicaion. For example, javax.faces.PARTIAL_STATE_SAVING can 
be set to true or false based on whether the applicaion will enable or disable 
parial state saving. These parameters are deined inside the <context-param> 
element under the <param-name> and <param-value> tags.

Deploying the ADF Applicaion
[ 244 ]
 

Filters: Filters are used to bypass some operaions when the applicaion is iniialized. 
Some custom ilters are added to make the applicaion behave in a way the user 
wants. <filter-name> and <filter-class> are used to deine the ilters. The 
<filter-mapping> elements are used to map the ilter name with the servlet and 
the paterns required to ilter the URL are added. The <dispatcher> element will 
make sure that the URL is forwarded to a proper low in the applicaion.
 

Listeners: Listeners are added to an applicaion to listen and execute based on some 
acion performed in the applicaion life cycle.
 

Servlets: These are the controller elements for the web applicaion that will forward 
and request the page for the user. The <servlet-name > and <servlet-class> 
elements are enclosed in the <servlet> element to deine the servlet informaion. 
The <servlet-mapping> element will deine the URL patern that has to be 
applied to process the page using the speciic servlet class.
weblogic.xml
web.xml is more of a ile that holds coniguraion and deployment informaion related to the 
web applicaion. weblogic.xml is a descriptor ile that describes how the web applicaion 
iles have to be conigured and compiled inside the WebLogic server. The Overview tab has 
separate tabs deined for each of the secions to be conigured. A common coniguraion 
includes Context Root, Authenicaion Filter, Logging, Request Handling, Directory Mapping, 
JSP compilaion, Library deiniions, Security, Servlets, Session, and so on.
The Logging secion will allow you to conigure logging for the web applicaion. The JSP 
secion will allow you to precompile the JSP ile. Request Handling in the Container secion 
will allow you to redirect with absolute URL and ilter dispatched requests.
weblogic-application.xml
weblogic-application.xml is the ile that is responsible for the deployment details 
of an enterprise applicaion in the WebLogic server. Some of the coniguraions include 
Applicaion Parameters, Class Loading preferences, Shared Libraries, Listeners, Security, 
Session coniguraions, and so on.
In the Session secion you would ind opions such as Enable session tracking, Enable 
session sharing, and Enable cookies. It also allows coniguring the persistent store by 
selecing the store type as a memory, ile, JDBC, and so on. The adf.oracle.domain 
library will be added by default in the Library secion.

Chapter 10
[ 245 ]
Security
Security is important for the applicaion and it plays a vital role in any web applicaion. In 
ADF, the security is taken care of by a ile called jazn-data.xml that is used to conigure 
diferent users with diferent roles. The deployment of the security informaion to the 
WebLogic server would help the web applicaion to authenicate and authorize the user 
accessing the applicaion.
jazn-data.xml
This ile is responsible for storing the security informaion for the applicaion. jazn-data.
xml will hold the informaion related to the roles used in the web applicaion at design ime. 
The content will be merged into the system-jazn.data.xml ile during deployment of the 
applicaion. Every user in the web applicaion will be assigned to single or muliple roles. We 
can create a new user in the jazn-data.xml ile, but it is not recommended. 

Deploying the ADF Applicaion
[ 246 ]
We create users in the server for applicaion roles. The users deined in the jazn-data.xml 
ile are displayed in the Users secion as shown in the following screenshot:
For example, the user John from the Operations 
department is given an EMPLOYEE role that has the privilege 
to view all the employee informaion, but modify only his 
informaion. However, an employee Victor with an HR role 
can view and edit informaion related to any employee except 
deleing an employee record. An Employee named Matt 
who is given an HR_ADMIN role can view, edit, and delete 
any record from the employee database.
The permission for each of the iles in the applicaion is also conigured in jazn-data.xml. 
jazn-data.xml is merged with the server as system-jazn-data.xml, which holds the 
informaion related to the user roles, applicaion roles, and enterprise roles. If the organizaion 
is huge then LDAP or other powerful user proile directories are used.

Chapter 10
[ 247 ]
Data source
Data source for the ADF applicaion is stored in the connections.xml ile, which is an 
essenial deployment asset for smooth applicaion deployment. In the WebLogic server, the 
database connecion informaion in the connections.xml ile is added as a data source and 
is used by the applicaion at runime. Our HRSchema database connecion will be converted 
into the jdbc/HRSchemaDS data source in the WebLogic server for the integrated server. This 
is conigured in the Connecions secion from the Model project deployment proile.
Deployment to the WebLogic server
Ater archiving the applicaion as an EAR ile, we will have to deploy the applicaion to the 
server. Before the deployment, we will have to make sure that all the shared libraries are 
available in the server to support the deployment and compilaion of Java classes at runime. 
The libraries are listed at the following URL:
http://docs.oracle.com/cd/E35521_01/admin.111230/e16179/ap_jdevlibs.
htm
You will have to make sure that you have the correct web.xml and weblogic-application.
xml iles, and the data source connecion deined correctly in your connections.xml ile for 
a successful ADF applicaion deployment.
The applicaion can be deployed to an integrated server or a standalone server. Deploying to 
a standalone server can be done either through the Administraion Console page or through 
Enterprise Manager.
Integrated server
Deploying to an integrated server is automaically taken care of by JDeveloper and most of 
the ime the developer will be running or debugging the applicaion that will start the server, 
create the archive ile, and deploy it to the server. If there is any error or excepion in parsing 
any of the informaion speciied in the web.xml or weblogic-application.xml iles, the 
deployment will not be successful.

Deploying the ADF Applicaion
[ 248 ]
Time for action – creating a default domain for integrated 
server
For any WebLogic server, it is essenial to create a domain in which all the server instances 
will be running. A domain deines the coniguraion for a single server instance that may 
have managed servers on the same or other remote machines. The following are the steps 
for creaing a default domain for the integrated server:
1. Select the Start Server Instance (IntegratedWeblogicServer) opion from the  
Run menu. Now the Create Domain dialog will be displayed to the user.
2. Provide the Password value as weblogic1 and repeat the same for the Conirm 
Password textbox as shown in the following screenshot. Leave other opions as  
they are.
3. Click on the OK buton to see the following message in the Console - Log window:
[Waiing for the domain to inish building...]
[10:17:29 AM] Creaing Integrated Weblogic domain...
[10:18:40 AM] Extending Integrated Weblogic domain...
Wait unil you get the following message to conirm that the server has been started:
IntegratedWebLogicServer startup ime: 49776 ms.
IntegratedWebLogicServer started.

Chapter 10
[ 249 ]
What just happened?
We just have created a new default domain for the integrated server. A domain is considered 
as a room equipped with all the necessary coniguraions for the server to run in.
Time for action – deployment to integrated server
Make sure the deployment proile is already added for the Model and ViewController 
projects. If needed, the ViewController project is made dependent on the Model project. 
Following are the steps for deploying to the integrated server:
1. Go to the Run menu and select the Start Server Instance (IntegratedWeblogicServer) 
opion if the server is not already running. This will start the integrated server for you. 
Make sure that you see the Integrated Server started message in the console before 
proceeding to the next step.
2. With EmpDirectoryApplication open in JDeveloper, click on the Applicaion 
Menu opion.
3. Select the Deploy opion from the menu and click on the deployment proile that 
you created for the applicaion. This will open up a dialog to deploy the applicaion 
to the applicaion server or to an EAR ile.
4. Select the Deploy to Applicaion Server opion and click on the Next buton.
5. The IntegratedWeblogicServer opion will be listed in the Applicaion Servers  
list. You can add an applicaion server if you want by clicking on the + buton.  
Select the IntegratedWeblogicServer opion to proceed to the next screen.
6. In the WebLogic server's Opions secion, the Deploy to all instances opion in  
the domain will deploy the applicaion to the enire server instances running inside 
the domain. To deploy to a paricular instance we have to select the server that is 
listed by selecing Deploy to selected instances in the domain.
7. Ater the selecion, the Deploy as Standalone Applicaion opion will be checked to 
deploy the applicaion. The Deploy to shared Library opion will deploy the archive 
as a library in the WebLogic server so that it will be available at runime for some 
other applicaions to access. It is best suited for skin iles and dependent Java classes 
that are archived as a JAR ile.
8. Clicking on the Next buton will summarize all the acions. Click on the Finish buton 
to deploy the applicaion to the integrated server.

Deploying the ADF Applicaion
[ 250 ]
What just happened?
We have just deployed our EmpDirectoryApplication to the integrated server.  
The applicaion will be accessible from the following URL link:
http://127.0.0.1:7101/EmpDirectoryApplication-ViewController-context-
root/faces/index.jspx
The port number is defaulted to 7101 for the integrated server and 
EmpDirectoryApplication-ViewController-context-root is the context root for 
the JEE web applicaion.
Have a go hero
The Administraion console for the integrated server can be accessed from 
http://127.0.0.1:7101/console. Perform the following to analyze the deployment  
to the integrated server:
 

Log in to the console using the username and password that you have provided 
while creaing the integrated server.
 

Go to the Deployment secion and ind EmpDirectoryApplication deployed  
as an EAR ile.
 

Try to ind and analyze the opions available in the Deployment secion.
Standalone server
A standalone server is just like an integrated server but they are not created automaically by 
JDeveloper. We have to create the server using a wizard or script. We will use the coniguraion 
wizard that is shipped with JDeveloper to create the standalone server. Usually in Windows 
the locaion for invoking the standalone server will be Start Menu/Oracle Fusion 
Middleware 11.1.2.3.0/Weblogic Server 11gR1/Tools/Configuration Wizard.
Or simply run C:\Oracle\Middleware\wlserver_10.3\common\bin\config.exe.
This can be invoked from JDeveloper's Quick Start wizard also.

Chapter 10
[ 251 ]
Time for action – deploying to the standalone server
1. Now we will see how to deploy the applicaion to the standalone server. To create 
the standalone server we have to use Coniguraion Wizard. Ater opening the 
Coniguraion Wizard page you are given an opion as Create New Weblogic 
Domain or Extend an exising Weblogic Domain. Click on the Next buton with  
the default opions for creaing a new domain.
2. In the Select Domain Source screen, the Generate a domain conigured 
automaically to support the following products opion is defaulted. You may select 
the components to support. In the next screen provide the Domain name value as 
standaloneDomain and leave the Domain locaion value to default.
3. Provide the Name value as weblogic, User password as weblogic1, and conirm 
the user password once again. Click on Next to proceed.
4. In the Conigure Server Start Mode list, select the Producion Mode opion and 
the default JDK ile will be selected. Selecing the Producion mode will ask for the 
username and password every ime you start the server.
5. Click on the Next buton on the Select Opional Coniguraion page. The Admin 
server is defaulted to run with 7001 as the port number. If you have chosen 
Administraion Server then you have an opion to change the port number and the 
name of the server. Other opions such as Managed Servers, Clusters, and Machines 
can be selected to conigure the respecive coniguraions.
6. Proceed unil the Coniguraion Summary page and click on the Create buton.
7. At the end of the domain creaion, check the Start Admin Server opion and click on 
the Done buton.
8. The server will be started and then you will have to access the URL 
http://127.0.0.1:7001/console.

Deploying the ADF Applicaion
[ 252 ]
9. Provide the username and password and then login to the Administraion console.
10. Select the Deployment opion and click on the Install opion. Select the upload your 
ile(s) link to locate the EAR ile:
11. Click on the Next buton and select the default opion of Install this deployment  
as applicaion.
12. Set all the opions to default and click on the Finish buton. Now you will have the 
deployed applicaion.
13. You will have to click on the Acivate Changes buton to complete the deployment.
What just happened?
We have deployed the ADF applicaion onto the standalone server. You can access the 
applicaion by using the URL http://127.0.0.1:7001/EmpDirectoryApplication-
ViewController-context-root/faces/index.jspx.
The EmpDirectoryApplication-ViewController-context-root context root can  
be set from the Java EE Applicaion opion in the ViewController project's properies.

Chapter 10
[ 253 ]
Pop quiz
Q1. When you deploy the applicaion to the applicaion server, the connecion informaion is 
converted to a data source to be used at runime.
1. True
2. False
Q2. Idenify the archive ile that is not used in ADF deployment.
1. MAR (Metadata Archive)
2. EAR (Enterprise Archive)
3. WAR (Web Archive)
4. RAR (Resource Adapter Archive)
5. None of the above
Q3. _____________ element is used to deine the servlet informaion in the deployment 
descriptor ile.
1. 
<servlet>
2. 
<servlet-info>
3. 
<servlet-name>
4. 
<servlet-class>
5. 
<servlet-param>
Q4. Idenify the ile which is very commonly used to hold coniguraion and deployment 
informaion for a typical JEE web applicaion
1. 
weblogic.xml
2. 
weblogic-application.xml
3. 
adfc-config.xml
4. 
web.xml
5. None of the above

Deploying the ADF Applicaion
[ 254 ]
Summary
Let us recap what we have learned in this chapter. We have learned about applicaion 
deployment. We have learned how to prepare for deployment and have understood  
various deployment iles that would afect deployment. We have learned how to deploy  
an applicaion in an integrated and a standalone server.
In the next chapter, we will see some of the advanced topics in developing applicaions  
using ADF 11gR2.

11
Advanced Features of ADF
Now we have come to the stage where we know the basic concept of creating 
an ADF application. We started from ADF business components and then 
learned about the data control used in the model layer. We learned about the 
important concept of ADF Task Flow and ADF Faces. Finally, we learned how 
to implement security for an ADF application, and learned to deploy a web 
application.
In this chapter, we will learn more on the advanced and complex topics of ADF.
In this chapter, we will cover the following topics:
 

Advanced topics on enity objects
 

Advanced topics on view objects
 

Applicaion module state management
 

Complex data control
 

Complex task lows
 

Complex usage of a managed bean
 

Debugging an applicaion
 

The Metadata Services framework
 

The Acive Data Services framework
 

WebLogic server coniguraions
 

Creaing extensions

Advanced Features of ADF
[ 256 ]
Advanced topics on entity objects
In the earlier chapters, we saw the basic features of enity objects and learned how to use 
them for our web applicaion. In this chapter, we will see some advanced features of the 
enity object, which is more powerful in building a robust and scalable ADF web applicaion.
Tuning
The Use Update Batching checkbox in the Tuning secion of an enity object's Overview  
tab is used to update the underlying tables for the enity object, and to use a statement  
that has minimal queries for the INSERT, DELETE, and UPDATE operaions. One bulk  
CRUD statement is used for transacions involving independent statements. When this 
opion is checked, you will have to provide a value in the When Number of Eniies to 
Modify Exceeds: box. The default opion is 1, which will enable update batching when  
the number of eniies exceed one.
The Retain Associaion Accessor Rowset opion in the Tuning secion is used to retain  
the associaion accessor when the enity is involved in retrieving the rowset from the 
associaion accessor. When this property is not checked, a new rowset is created  
whenever the enity retrieves informaion using the associaion accessor.
Enabling this opion will reduce addiional query execuions because the creaion of  
rowsets will happen only for the irst ime, and the same rowset is accessed the next  
ime. Programmaically, you will use the setAssociationAccessorRetained()  
method to set the value in your EntityCollImpl class.
If we need to iterate through the rowset programmaically, we use the following code:
RowSet rs = (RowSet)getAccounts();
rs.reset(); 
while (rs.hasNext()) {
  AccountImpl r = (AccountImpl)rs.next();
//do custom logic
}

Chapter 11
[ 257 ]
For more informaion, go to the following links:
 

http://docs.oracle.com/cd/E35521_01/web.111230/e16182/
bcentities.htm#CEGCJFDA
 

http://docs.oracle.com/cd/E35521_01/web.111230/e16182/
bcentities.htm#autoId119
Custom properties
Add custom properies for the enity object to retrieve and set some property at runime. 
For example, if you would like to change the value of a toolip at runime for a paricular 
atribute, let's say DeptNo in DeptEO.xml, you will add a custom property and retrieve  
the property using the following snippet in your custom EntityImpl class ile:
AttributeDefImpl attr =  
  getEntityDef().getAttributeDefImpl("Dept");
attr.setProperty("tooltip", "Simple value");
attr.getProperty("tooltip");
The following screenshot shows the Custom Properies page:
Property sets
Property sets are a grouped collecion of properies and references used to difereniate 
from other business components. You can store properies, error messages, tool ips, control 
hints, and others in a property set, and make it translatable using the resource bundle.

Advanced Features of ADF
[ 258 ]
Property sets are added to the business object atribute by using New Gallery and navigaing 
to Business Tier | ADF Business Components | Property Sets. 
More informaion on this is available at the following link:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/bcentities.
htm#BABDAAJG
A resource bundle
A resource bundle is used in ADF business components to support translatable strings.  
String references such as atribute names, error messages, tool ips, control hints, and  
others are stored in a resource bundle to support internaionalizaion and localizaion.  
These are conigured in the Resource Bundle secion in Project Properies.

Chapter 11
[ 259 ]
There are three types of resource bundles that can be created, as follows:
 

XLIFF: The resource key and value will be represented in an XML ile
 

Properies: The properties ile will have the key and value deined
 

List: The key-value pair will be deined in a Java ile that extends the 
ListResourceBundle API
You can conigure the resource bundle to be a part of the project, or to be created for every 
ile. The informaion from the resource bundle can be accessed programmaically in any of 
the implementaion classes using the following code:
String bundle= "com.view.ViewControllerBundle";
ResourceBundle resourceBundle = BundleFactory.getBundle(bundle);
resourceBundle.getString("id");
For more information, please go to http://docs.oracle.com/cd/
E35521_01/web.111230/e16182/bcentities.htm#BABJACFB.
Business logic groups
Business logic groups are used to separate business components logically based on their 
funcionality. The group can encapsulate related objects, validaions, custom logic, and 
resource bundles. These can be enabled dynamically based on the context of a row. For 
example, HR units can have a set of validaions that difer from the validaion logic for 
operaion managers. Customers can view certain details and validaions that do not  
apply to staf. The group is created in the Business Logic Group secion by providing  
a discriminator atribute.
The Business logic unit is created to separate the validaion logic for business objects.  
For example, in an organizaion, CUSTOMER, SUPPLIER, STAFF, and SUPPORT can each  
be an individual business unit that can have diferent validaions, hints, default values,  
and business logic speciic to their respecive business. All business units are added to 
the base enity object to maintain the business group list. The value of the discriminator 
atribute will determine the corresponding business logic units to be loaded.
Domain
ADF allows you to create a validaion for the data type that is used in the atribute. A domain 
is created to wrap the primary data type in order to apply validaion based on the domain. For 
example, if you have PhoneNumber as an atribute with the data type as numbers, you can 
wrap the atribute with the PhoneNumber domain and use it as a data type for validaion. The 
validate() method for the domain is used for the validaion. The domain type is created in 
the New Gallery secion by navigaing to Business Tier | ADF Business Components | Domain.

Advanced Features of ADF
[ 260 ]
The Custom validation rule
ADF comes with default declaraive validaion rules that are used in the Business Rule secion 
of an enity object. In most business cases, we would like to have our own validaion rule to 
be applied to business objects. ADF allows users to create a custom validaion rule by going to 
Business Tier | ADF Business Components | Validaion Rule | New Gallery. The validate() 
method is used to raise an excepion based on the business condiion. The validaion will be 
displayed in the Business Rule secion of an enity object.
The following is a sample validaion code:
public boolean validateValue(Object value) {
    return true;
}
public void validate(JboValidatorContext ctx) {
    if (!validateValue(ctx.getNewValue())) {
        throw new ValidationException( 
          "com.empdirectory.model.view.BasicValidationRule  
          validation failed");
    }
}
The following screenshot shows the Create Validaion Rule Class pane:

Chapter 11
[ 261 ]
Custom error messages
At imes, you will want to display a custom message for error messages that are triggered 
from the framework. For example, if the precision of an atribute is not met, the framework 
will throw an error saying Invalid precision/scale.
In order to display a diferent message for this message, you will have to deine a custom 
error message in the project's properies. Go to Project Properies | Business Components | 
Opions to deine a new class named MessageBundle.java.
The bundle class will have the deiniion shown in the following code:
public class MessageBundle  
  extends ListResourceBundle {
    private static final Object[][]  
      sMessageStrings = new String[][] {
        {CSMessageBundle.EXC_VAL_PRECISION_VALIDATOR, 
              "Limit Exceeded"}
      };
      
      protected Object[][] getContents() {
        return sMessageStrings;
    }
}

Advanced Features of ADF
[ 262 ]
Advanced topics on view objects
In a view object, you will have the custom logic to work on SQL queries and the data that is 
displayed in the UI layer. The following are some of the advanced concepts for view objects:
 

Tuning: View object tuning plays an important role in the performance of an 
applicaion. Some of the common tuning concepts are discussed here in this secion.
 

MaxFetchSize: MaxFetchSize is the maximum number of rows fetched from a 
database for the current view object. -1 will retrieve an unlimited number of rows 
or all the rows returned from a query. The value 0 will cause no query execuion and 
no rows will be returned.
 

FetchSize: This is the number of rows that is returned on a single database round 
trip. This seing will determine how many rows will be returned for a paricular view 
object at runime on a single query.
 

FetchMode: This is the mode that controls how the rows are retrieved in a JDBC 
result set. Some of the modes allowed for this funcion are as follows:
 

FETCH_ALL: This mode will fetch all the rows at once
 

FETCH_AS_NEEDED: This mode will fetch the number of rows defined by 
FetchSize first, and the rows are again fetched upon further request
 

RowFetchLimit: This opion is provided in the adf-config.xml ile to limit the 
number of rows fetched by the view object query, and it is applied to the enire view 
object in an applicaion.
 

Forward-only mode: This seing is used to manage one row and the next row.  
The navigaion proceeds in a linearly forward manner.
 

ListRangeSize: This is the seing for the list of values that are added to the 
atribute in the view object. The value of this seing will be set to a lesser value 
to reduce a large number of rows being returned unnecessarily. The value -1 will 
retrieve all the rows.
 

RangeSize: This is the seing that is added in combinaion with the 
ListRangeSize seing in the UI binding iterator. A value of -1 will include all the 
rows to be displayed in the iterator range.

Chapter 11
[ 263 ]
 

AccessMode: This deines how the row is accessed in a view object. The modes are 
as follows:
 

SCROLLABLE: This mode is used to cache rows in a collection.
 

FORWARD_ONLY: This mode is used for sequential access to rows in  
a collection.
 

RANGE_PAGING: The paging is done based on the defined value  
of RangeSize. If the rows that are requested are not in the range,  
the rows are fetched from the database using the ROWNUM query.
 

RANGE_PAGING_AUTO_POST: The rowset will post any changes in the 
transaction for rows out of the current range.
 

Query Opimizer: These are hints added to a query to help retrieve the record 
eiciently. This will inluence the execuion plan of the query. The modes are  
as follows:
 

ALL_ROWS: This mode fetches all rows as quickly as possible
 

FIRST_ROWS: This mode fetches the first row as quickly as possible
 

SQL Mode: Use the view object SQL mode to control the area from which  
the rows have to be retrieved. You can combine the following query modes  
to retrieve records eiciently:
 

QUERY_MODE_SCAN_DATABASE_TABLES: This mode is used to scan rows 
from the database. This is the default mode.
 

QUERY_MODE_SCAN_VIEW_ROWS: This mode is used to scan rows from the 
view cache. This mode uses the existing rows and will not go back to the 
database.
 

QUERY_MODE_SCAN_ENTITY_ROWS: This mode is used to scan rows from 
the entity cache. This mode uses the entity object rows that are valid for 
entity-based view objects.
 

Associaion Consistent: When using two view objects that have the same enity 
type, one view object is noiied about the changes made to an enity through 
the other view object via the lag to view link consistency. The lag to view link 
consistency is jbo.viewlink.consistent in the AM coniguraions, which can  
be performed programmaically using setAssociationConsistent(true).

Advanced Features of ADF
[ 264 ]
Avoid getRowCount, getEstimatedRowCount
It is advised not to use getRowCount() or getEstimatedRowCount() for a view object, 
as this will fetch all the rows in memory, use getCappedRowCount(n) instead.
The getCappedRowCount(n) method executes the query and a count up to n number of 
rows. If the row count is less than n, it returns a posiive integer. It returns a negaive ID if 
the row count is greater than n.
Working with Rowsets
When working with a view object, it is possible to open many rowsets and forget to close the 
rowsets that are cleared on garbage collecion. Use the RowSet.closeRowSet() method to 
close the rowset opened previously, so that you do not need to wait unil the object is garbage 
collected. This would improve the performance by uilizing the space and the amount of work 
done on garbage collecion.
List of values
View accessors are added to display the list of values for an atribute. For example, if you 
want to show a list of values of department names instead of department IDs, you will have 
to use the view accessor secion to add a view object that will list all the department names.
Time for action – creating a list of values of a department
Carry out the following steps to create a list of values:
1. Add a view accessor mapping to the DeptVO.xml ile, in the EmpEO.xml ile.
2. Go to the EmpVO.xml ile and then select the Deptno atribute.
3. Select the List of Values: secion to add a new list of values, as shown in the 
following screenshot:

Chapter 11
[ 265 ]
4. Select EmpEO.DeptVO1 as List Data Source and Deptno as List Atribute to map  
the Deptno atribute of DeptVO to the EmpVO atribute.
5. Go to the UI Hints tab and move the Dname atribute from the Available: secion  
to the Selected: list.

Advanced Features of ADF
[ 266 ]
6. Select Combo Box with List of Values as the value for Default List Type, as shown  
in the following screenshot:
What just happened?
We created a list of values for our view object atribute, which will create a list of department 
names for the Deptno atribute. The list of department names is displayed based on the result 
of the query executed by the DeptVO1 view object.
In this way, we can display valid values in the list for the atribute. When the user selects a 
department, the corresponding deptno will get assigned to the atribute.
UI categories
You can deine the UI category for atributes that are listed in a view object. For example,  
the FirstName, MiddleName, and LastName atributes are collecively added to the  
Name category.

Chapter 11
[ 267 ]
More informaion can be found at the following link:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/bcadvvo.
htm#sm0331
Application module state management
Since an applicaion module is responsible for the transacion management of an applicaion, 
it includes some of the seings and coniguraions for high availability and to maintain the 
state of the applicaion. High availability is a concept in which the state of an applicaion is 
maintained even when the handshake between servers occurs in a clustered environment. 
In this context, a handshake means that when a server goes down, the clustered server gets 
another server up and running to maintain the state of the applicaion.
For example, a user connects to a website that is hosted on a clustered server and gets 
connected to Server1 of that cluster. The user starts creaing a new record at the same  
ime that Server1 goes down for maintenance. At such a ime, the user data should not  
be lost, and the user should be allowed to coninue with the creaion of the record. For 
this to happen, the state of the applicaion has to be maintained so that the state of the 
applicaion is transferred from Server1 to Server2, and the user will not see the change  
in the state of the applicaion. The following screenshot explains this:
Browser
Server1
is up
Application
Server2 is up
Server3 is up
User
Server1
is down
1
2
1
3
Passivaion is done in the server to store the state of the applicaion, and the passivaion 
state can be stored in a lat ile or a database. Acivaion reloads the state of the applicaion 
at the point where it was let. The two APIs that are helpful in the applicaion module for 
high availability are assivateState() and activateState().The failover feature is 
enabled by seing the value of jbo.dofailover to true in the applicaion module.  
With this seing, the passivaion state will occur at the end of every request.

Advanced Features of ADF
[ 268 ]
For more informaion, please refer to the following link:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/bcstatemgmt.
htm#sm0318
Complex data controls
In our previous chapters, we have seen the usage of basic data controls that are used to 
provide an interface between the model layer and the UI layer. There are other data controls 
that ADF supports for integraion and interoperability. All these data controls are created by 
going to New Gallery | Data Control. The following are some of these data controls:
 

URL data control: We can create a data control that is based on a URL. Basically, we 
can have an Excel spreadsheet uploaded in a URL, and based on the informaion in 
this spreadsheet it is possible to create a data control in ADF. Files other than Excel 
spreadsheets that are supported are XML and REST services.
 

Web service data control: In ADF, it is possible to create a data control based on  
the WSDL informaion of a web service running on a server. The service deiniion  
is provided to deine a data source for the data control.
 

Java and EJB data control: JavaBeans can be converted to a data control by simply 
right-clicking on the bean and selecing the Create Data Control opion. An EJB 
session bean can also be used to create a data control.
 

JMX data control: ADF also allows us to create a data control based on JMX Mbeans 
found on the server.
Complex task lows
Some of the complex and advanced features of the task low are discussed in the  
following secions:
 

Trains: One of the reasons for using a task low is that an ADF task low allows the 
user to add trains to a web applicaion, as shown in the following screenshot:

Chapter 11
[ 269 ]
Each of the page fragments is added as a train stop and is linearly linked to provide a 
wizard-like feature in the web page. Checking the train opion for the task low will 
enable the task low to support train stops. One common expression used with the 
train is as follows:
#{controllerContext.currentViewPort 
  .taskFlowContext.trainModel.getNext}"
#{controllerContext.currentViewPort 
  .taskFlowContext.trainModel.getPrevious}"
 

Template: The task low template is another useful feature that will enable the task 
low to behave like a template, to add and support other task lows. A base task low 
template is created for a repeated process and then it is reused by the consuming 
task low to build a complex task low.
 

Menu model navigaion: ADF supports a feature that will let the task low be 
displayed in a menu. The task low navigaion is represented in a TreeModel 
feature or in an XMLMenuModel feature in a root_menu.xml ile. Later, the XML 
ile is processed to display a menu structure, using the menu component in the 
page, by idenifying the corresponding node that represents the task low for 
navigaion. The menu model is added to the adfc-config.xml ile as a menu,  
and each of its task lows will be displayed in a separate tab in the UI page.  
The following code is an example of the root_menu.xml ile:
<menu xmlns="http://myfaces.apache.org/trinidad/menu">
  <itemNode id="itemNode_home"  
    label="label_home"  
    action="adfMenu_home"  
    focusViewId="/home"/>

Advanced Features of ADF
[ 270 ]
  <itemNode id="itemNode_help"  
    label="label_help"  
    action="adfMenu_help"  
    focusViewId="/help"/>
  <itemNode id="itemNode_preferences"  
    label="label_preferences" 
    action="adfMenu_preferences"  
    focusViewId="/preferences"/>
  <itemNode id="itemNode_shop"  
    label="label_shop"  
    action="adfMenu_shop"  
    focusViewId="/shop"/>
</menu>
More informaion about complex task lows is available at:  
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/taskflows_
complex.htm#BABBEECE
Contextual events
ADF supports event-driven development, where an event is raised to mark a status of the 
process, and the component will subscribe for the event to proceed with the process. For 
example, consider a page in which a component in a page fragment inside a task low is to 
be refreshed whenever the command buton in that page is clicked. In this case, we cannot 
use partialTriggers and partialSubmit because the ID of the component will not 
be available in the page fragment inside the task low that holds the component to be 
refreshed. In this case, the commandButton opion in the outside page will raise an event 
named REFRESH and publish it. The component inside the page fragments will subscribe  
for the REFRESH event, refresh the component, and display the updated value.
Time for action – publishing an event and subscribing it
Use the following steps to publish and subscribe an event:
1. Select the component that is raising the REFRESH event.
2. Go to the property inspector and create a contextual event.

Chapter 11
[ 271 ]
3. In the Publish Contextual Event dialog, select the Create New Event opion and 
provide the name REFRESH in the text ield provided.
In the Payload secion, select the Pass Custom Value from: opion and then the 
String Literal opion. You are provided with other opions such as Page Data and 
Managed Bean method return. Please note that we can refresh the page without 
any payload value. The payload example provided here is only for you to learn how 
to pass the values.
4. You can set a condiion to raise the event in the Raise Condiion secion of the dialog.
5. Click on the OK buton. Now go to the page deiniion, and you can see the REFRESH 
event added to the Contextual Event secion, as shown in the following screenshot:

Advanced Features of ADF
[ 272 ]
6. Now go to the page where you want to subscribe the REFRESH event. Add a method 
binding that handles the action event named payload because we are using the 
Command tag to raise the event. The method will look like the following code:
public void handleEvent(ActionEvent payload){
       // do the logic 
}
The following screenshot shows how the payload event is added in the  
handleEvent binding:
7. Now go to the page where you are raising the REFRESH event. Go to the page 
deiniion ile, right-click on the structure window, and select Edit Event Map.  
This will open an Event Map Editor window. Again, note that the payload provided 
here is just an example as we do not need a payload to refresh the page.
8. Click on the + icon to create an event map. Provide the corresponding details and 
run the applicaion by right-clicking on the index page.

Chapter 11
[ 273 ]
What just happened?
The component outside the task low will publish the REFRESH event, which is subscribed  
by the component in the page fragment.
Refer to the following link for more informaion:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/contextual_
events.htm#BABFCAFI
Complex usage of a managed bean
A managed bean is the place where the complex UI logic is added for an ADF web applicaion. 
Complex bean logic involves listener logic for the components, page load logic, component-
iniializaion logic, and so on. Some UI use cases involve other operaions that have to be 
performed in the managed bean. The following are some of the use cases, snippets, and 
implementaions that involve wriing logic in a managed bean:
 

Geing the iterator informaion:
BindingContainer bindings =  
  BindingContext.getCurrent() 
  .getCurrentBindingsEntry(); 
DCIteratorBinding dciterContainer =  
(DCIteratorBinding)bindings.get(iteratorName);
 

Geing the current row from the iterator:
DCBindingContainer bc =  
  (DCBindingContainer)BindingContext.getCurrent() 
  .getCurrentBindingsEntry();
DCIteratorBinding iterator =  
  bc.findIteratorBinding("VOIterator");
Row r = iterator.getCurrentRow();
String val = (String)r.getAttribute("fieldName");
 

Accessing scope variables:
AdfFacesContext context =  
  AdfFacesContext.getCurrentInstance();
Map pfScope =  
  context.getPageFlowScope();
pfScope.get("paramName");
FacesContext fctx =  
  FacesContext.getCurrentInstance();
ExternalContext ectx =  
  fctx.getExternalContext();

Advanced Features of ADF
[ 274 ]
Map sessionScope =  
  ectx.getSessionMap();
sessionScope.get("paramName");
 

Check if the transacion is "dirty":
BindingContext bctx =  
  oracle.adf.controller.binding 
  .BindingUtils.getBindingContext();
if (bctx.findDataControlFrame 
  (bctx.getCurrentDataControlFrame()) 
  .isTransactionDirty()) {
      //show the timestamp
}
else{
      //don't show
}
 

Scroll to a speciic row on the loading of a page:
this.tableBinding.setRowIndex(rowIndex);
RowKeySet ps =  
  this.tableBinding.getSelectedRowKeys();
ps.clear();
ps.add(this.tableBinding.getRowKey());
AdfFacesContext.getCurrentInstance() 
  .addPartialTarget(this.tableBinding);
 

Reset the value of InputText:
RichInputText input = (RichInputText) 
  JSFUtils.findComponentInRoot(id); 
input.setSubmittedValue(null); 
input.resetValue(); 
AdfFacesContext.getCurrentInstance() 
  .addPartialTarget(input);
 

Refresh the component:
AdfFacesContext.getCurrentInstance() 
  .addPartialTarget(component);
 

Show the pop-up window:
RichPopup.PopupHints ph =  
  new RichPopup.PopupHints();
myPop.show(ph);

Chapter 11
[ 275 ]
Debugging the application
JDeveloper 11gR2 supports the debugging feature, which will allow a developer to debug the 
applicaion code to ix an issue or isolate a problem in the producion environment. Some of 
the common debugging pracices are discussed in this secion.
Debugging practices
Some of the debugging pracices are as follows:
 

Resolving compilaion errors: This is very simple to resolve as part of the issues will 
be related to the coding issue. Compilaion issues can occur during Java compilaion, 
XML parsing, XML validaions, and so on.
 

Print values: The basic debugging technique that is known to any Java developer  
is to print the values using System.out.println statements in the console to 
verify if the program behaves as expected. This, however, is not recommended and  
a Logger API is used instead. The ADF recommendaion is to use the ADFLogger 
API, which is conigurable to print the values in the logile.
 

Breakpoints: Another way to debug is to insert a breakpoint next to the statement 
and debug the code. When the corresponding statement is about to process, the 
breakpoint is highlighted and the control is given to the developer to inspect and 
analyze the variable values, statuses of the object at that ime, and so on. We have 
to start the applicaion in debug mode and then uilize the Inspect, Smart Data,  
and Watch Windows features to debug the code eiciently.
 

Condiional debugging: Condiional debugging is the opion provided to highlight 
the breakpoint, only when a paricular condiion becomes valid. In order to set the 
condiional breakpoint, you will have to hover over the breakpoint and enter the 
condiion, as shown in the following screenshot:

Advanced Features of ADF
[ 276 ]
Exception handling
Excepion handling in Java is a very common pracice for handling the excepions and errors 
occurring in the applicaion. Some of the excepion-handling processes are as follows:
 

Try-catch: A Java developer uses the try-catch statement to gracefully handle 
an applicaion's excepion. We can use the finally statement to include closing 
operaions ater the occurrence of the excepion.
 

Task low excepion handler: We can have an excepion handler for the task low 
that will navigate to the error page, or display an error message or process the error 
low for the page. You can mark an acivity in the task low as error-handler.
 

Databindings (DCErrorHandler): In the Databindings.cpx ile, you can add an 
error handling class for handling errors in the ADF controller layer. You will have to 
use the ErrorHandlerClass property to specify the ErrorHandlerImpl class 
that extends the DCErrorHandlerImpl class. In this way, you can handle the 
excepion at the controller layer. The following code snippet explains this:
import oracle.adf.model 
  .binding.DCBindingContainer;
import oracle.adf.model 
  .binding.DCErrorHandlerImpl;
class ErrorHandlerImpl  
  extends DCErrorHandlerImpl {
    public ErrorHandlerImpl()  
      { super(true); }
    @Override
    public void reportException 
      (DCBindingContainer dCBindingContainer,  
        Exception exception) {
      super.reportException 
        (dCBindingContainer, exception);
    }
}
You can also create a text ile of the name oracle.adf.view.rich.context.
ExceptionHandler in the .adf/META-INF/services folder. In this ile, provide 
the fully qualiied class that will deine your excepion handler. The handler class 
should extend the ExceptionHandler class as shown in the following code snippet:
import oracle.adf.view 
  .rich.context.ExceptionHandler;
public class CustomExceptionHandler  
  extends ExceptionHandler {

Chapter 11
[ 277 ]
    public MyCustomExceptionHandler() {
      super();
    }
public void handleException 
  (FacesContext facesContext,  
  Throwable throwable, PhaseId phaseId)  
  throws Throwable{
    //handle exception
}
Debugging the lifecycle
ADF allows a developer to debug the lifecycle method. When the applicaion is in the debug 
mode, the JDeveloper IDE will show the ADF lifecycle method to the developer, in order to 
debug issues with the lifecycle of the page. You can set breakpoints for both before and ater 
a lifecycle.
The following screenshot shows the debugging of the lifecycle method by seing the 
breakpoint at the JSF Process Validaions lifecycle method:
For more informaion, please refer to the following link:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/web_testdebug.
htm#BABHEGBI

Advanced Features of ADF
[ 278 ]
The Metadata Services framework
The Oracle Metadata Services framework is used to provide customizaion features for 
ADF users in an ADF web applicaion. Users have the ability to customize the way a web 
applicaion is presented to them. The customer can add more custom features at runime 
using Metadata Services (MDS).
For example, in the following screenshot, the base document for the page is displayed  
with customizaion for User1 and without customizaion for User2, at the same ime:
Customization
Base
User1 view
User2 view
Customization layers
Customizaion is applied on layers at the applicaion stage. MDS stores all the customizaion 
informaion in its repository and this customizaion informaion is separated by layers  
within MDS.
For example, a single site can have many customizaion layers such as industry, healthcare, 
inancials, operaions, and so on. Within these layers, you can have another set of layers, such 
as admin, users, customers, support, and others, based on the user role and the view that has 
to be customized for each of these roles. In order to support customizaion within JDeveloper, 
we will have to start JDeveloper as a customizaion developer. This can be changed by using  
the Switch Roles opion from the Tools menu. The CustomizationLayerValues.xml ile 
will have the design-ime layer informaion retrieved by JDeveloper as shown in the following 
code snippet:
<cust-layers  xmlns= 
  "http://xmlns.oracle.com/mds/dt">

Chapter 11
[ 279 ]
  <cust-layer name="industry" id-prefix="i">
    <cust-layer-value value="financial"  
      display-name="Financial" id-prefix="f"/>
    <cust-layer-value value="healthcare"  
      display-name="Healthcare" id-prefix="h"/>
  </cust-layer>
  <cust-layer name="site" id-prefix="s">
    <cust-layer-value value="headquarters"  
      display-name="HQ" id-prefix="hq"/>
    <cust-layer-value value="remoteoffices"  
       display-name="Remote" id-prefix="rm"/>
  </cust-layer>
</cust-layers>
Customization classes
Customizaion classes are used to deine customizaion for layers. These classes will evaluate 
the current context and return a string result, which is used to locate the customizaion layer.
Customizaion classes are deined in the <cust-config> element in the adf-config.xml 
ile, as follows:
<cust-config> 
    <match path="/"> 
    <customization-class name= 
        "com.mycompany.IndustryCC"/> 
    </match> 
</cust-config>
The customizaion class will look like the following:
public class IndustryCC  
  extends CustomizationClass {
  private static final  
    String DEFAULT_LAYER_NAME = "industry";
  public IndustryCC() {
  }
  public CacheHint getCacheHint() {
    return CacheHint.ALL_USERS;
  }
  public String getName() {
    return mLayerName;
  }

Advanced Features of ADF
[ 280 ]
  public String getIDPrefix 
    (RestrictedSession sess, MetadataObject mo) {
      return new String ("I");
  }
  public String[] getValue 
    (RestrictedSession sess, MetadataObject mo) {
      return new String[] {"financial"};
  }
}
The customizaion class is added to the MDS secion of the adf-config.xml ile, as shown 
in the following screenshot:
Seeded customization
This type of customizaion is seeded in the applicaion development and is deployed along 
with the applicaion. The customizaion class should be available in the JDeveloper classpath 
to support seeded customizaion.
In order to enable customizaion, you will have to select the Enable Seeded Customizaions 
opion by going to Project Properies | ADF View.

Chapter 11
[ 281 ]
Runtime customization
Runime customizaion is done for the applicaion at runime. The component displayed in 
the applicaion needs to be customized at runime. For example, the width of a column that 
is adjusted at runime in the applicaion is to be stored for the complete session and even 
across the session. For this to happen, you will have to set the CustomizationAllowed 
atribute to true for these components and set the Enable User Customizaion opion in  
the ViewController project properies.
For more informaion, please refer to the following link:
docs.oracle.com/cd/E35521_01/web.111230/e16182/customize.htm#CFHBABEB
The Active Data Services framework
The Acive Data Service (ADS) framework is a server-side push framework that allows UI 
informaion to be refreshed, with the value as a paricular interval of ime. The ADF Faces 
components that support the Acive Data Service framework are activeCommandButton, 
activeImage, activeOutputText, table, tree, and treeTable.
Browser
ActiveDataManager
ActiveDataManager
Push Serivce
EventManager
ADF Faces
Model Layer
ActiveDataProxy
ActiveDataModel
ADF Binding
ADF BC

Advanced Features of ADF
[ 282 ]
The ADS framework
The ADS framework consists of the following interfaces:
 

ActiveDataModel: This interface is responsible for staring and stopping acive 
data. This will keep track of the acive data's event ID as well.
 

Event Manager: This interface listens and raises a push event for the acive data.  
It manages and retrieves the acive data.
 

Push Service: This interface transmits the acive data to the client for a refresh.
 

Acive Data Manager: This interface delivers the acive data to the client. It handles 
muliple client interfaces using a shared channel.
 

Acive Data Proxy: This interface listens to the data change event and delegates to 
JSF models.
Modes of data transport
There are three modes of data transport that are used in updaing the informaion in the  
UI layer. They are the Streaming, Polling, and Long Polling modes.
 

Streaming: Through this mode, only one data change request is sent to the client 
and it is always open. The data change event occurs and the client is noiied with a 
parial response and the associated component is refreshed with the data.
 

Polling: The applicaion will poll for a refresh event at speciic ime intervals.  
At each interval, the event occurs to noify the client with the changes.
 

Long Polling: A request is sent to the client and the response is returned only  
if the data change event occurs.
The ADS coniguraions are done in the adf-config.xml ile. Some of the seings included 
are <transport>, <polling-interval>, <keep-alive-interval>, and <latency 
threshold>.
A more detailed explanaion on Acive Data Services can be found at the following link:
http://docs.oracle.com/cd/E35521_01/web.111230/e16182/adv_ads.
htm#BEIDHJFD
WebLogic server conigurations
It is beter to learn some coniguraions related to the WebLogic server so that we will be in 
a posiion to ind issues related to deployment, and analyze the issues related to the server. 
We will see some of the basic seings that are very useful for debugging issues in an ADF 
web applicaion.

Chapter 11
[ 283 ]
Domain
The WebLogic domain is the logical place where all the servers, including the admin 
server, are located. The domain is like a home for all servers and clusters and will include 
coniguraions that will directly afect the seings in the servers.
For the integrated server, a domain named DefaultDomain is automaically created. The 
Domain Coniguraions secion in the Admin console is used to conigure domain-related 
seings. Some common seings of interest are Producion Mode, Log File Locaion, Log 
File rotaion directory, Security, and Control, among others. You have the power to start 
and stop the servers and clusters by using the Control secion of the DefaultDomain 
coniguraions.
The managed server informaion, such as SoaServer, or WebCenter Spaces, is also maintained 
and monitored in the same domain. The domain can have informaion about a managed 
server, as well as control over it.
Servers
The default server, which is the admin server, is a part of WebLogic's domain DefaultDomain 
in the integrated server. The server will host all the applicaions deployed to it. The server 
also has the shared libraries deployed to it to support the ADF applicaion at runime. Some 
common seings for the servers are Listen Address, Listen Port, Login Timeout, Monitoring, 
and Control.
The URL for the admin console for the integrated server would be 
http://127.0.0.1:7001/console.

Advanced Features of ADF
[ 284 ]
Deployments
This secion is used to deploy the EAR or WAR ile to the server. The enire EAR ile, WAR ile, 
and also the shared library deployed to the server are listed in this secion. You can install, 
update, and delete the archives and libraries from the deployment console, as shown in the 
following screenshot:
The Security realm
The Security realm is the place where security-related seings are conigured for the 
applicaion. The default realm called myrealm will have the providers, key store, roles, policies, 
authenicaion, authorizaion, and credenial mapping conigured for the applicaion.
Data sources
The data source secion is important in coniguring the database connecion informaion and 
maintaining the connecion pool as well. The Java Database Connecivity (JDBC) data source is 
listed in this secion, and the applicaion will look up the Java Naming and Directory Interface 
(JNDI) tree and request a database connecion from the data source. The data source should 
exactly match the data source used for the applicaion. Some common coniguraions for the 
data source are URL, driver class, and JNDI name, among others.

Chapter 11
[ 285 ]
Diagnostics
This is the place where the logiles are conigured for collecing and analyzing informaion. 
The WebLogic Diagnosic framework is responsible for maintaining the logiles, the 
diagnosic modules, images, and archives, among others.
Creating an extension
ADF allows you to create an extension or a plugin that will work with JDeveloper 11gR2.  
For example, we might create a plugin in JDeveloper that will allow the user to open the 
Model or ViewController project ile in Notepad.
The extension development is based on a standard called Open Services Gateway Iniiaive 
(OSGI). More informaion about OSGI can be found at http://www.osgi.org/Main/
HomePage.
You can download the Extension SDK from Oracle by going to Help | Check for Updates.  
The URL to download the Extension SDK is as follows:
http://www.oracle.com/ocom/groups/public/@otn/documents/
webcontent/131167.xml#oracle.jdeveloper.esdk

Advanced Features of ADF
[ 286 ]
The Extension SDK API URL is as follows:
http://docs.oracle.com/cd/E16162_01/apirefs.1112/e17493/toc.htm
The extension.xml ile
The extension.xml ile is the backbone for all extensions that are added to the JDeveloper 
IDE. All the extension informaion is deined in this ile. Now we will see how to create a 
basic extension project and run it.
Time for action – creating and running an extension
We can create an extension by using the following steps:
1. Select Extension Project from the Extension Development secion under Client  
Tier. Make sure you have the Extension SDK downloaded using the Check for 
Updates opion.
2. Provide the informaion as displayed in the following screenshot:
3. You will now have the extension.xml and MANIFEST.MF iles created for the 
project. The MANIFEST.MF ile will only provide the version informaion.

Chapter 11
[ 287 ]
4. Right-click on the extension and click on Deploy to Target Plaform. Subsequently, 
click on the Run Extension opion. A new JDeveloper will open up with your 
extension added to the IDE.
5. Verify the extension added to the JDeveloper IDE by going to Help | About | 
Extension.
6. Open the First Sample example provided in the Extension SDK samples to explore 
more on creaing extensions.
What just happened?
We created a new extension for the JDeveloper. The newly created extension will only display 
the informaion about your extension in the Extension secion. The Extension SDK samples 
contain many examples to start exploring extensions.
Pop quiz
Q1. Which of the following is an opion in an enity object for performance tuning?
1. Retain the associaion accessor
2. Cascade delete
3. Update batching
4. Both 1 and 2
5. Both 1 and 3
Q2. MDS allows the user to customize the applicaion at runime.
1. True
2. False
Q3. ____________ and ____________ are the two opions available to store the state  
of the applicaion using passivaion.
1. File and Database
2. Cloud and Database
3. MidTier and File
4. Database and Cloud
5. None of the above

Advanced Features of ADF
[ 288 ]
Q4. The ______________ element is used to deine the data transportaion mode for ADS.
1. 
<transport>
2. 
<transport-control>
3. 
<latency>
4. 
<threshold>
5. 
<transport-latency>
Summary
Let us recap what we learned in this chapter. We learned about the advanced topics in 
an enity object, view object, and applicaion module. We have learned about the state 
management in an applicaion module. We learned about some complex usages of task 
lows and managed beans. We also learned to debug an applicaion. Finally, we learned 
some performance tuning for ADF.

Pop Quiz Answers
Chapter 1, Installing and Coniguring JDeveloper IDE 
Pop quiz
Q1
3
Q2
2
Q3
2
Q4
Connections and descriptors
Q5
5
Chapter 2, Getting Started with ADF
Pop quiz
Q1
3
Q2
Top down and bottom Up
Q3
3
Q4
1
Q5
3

Chapter 3, Understanding the Model Layer
Pop quiz
Q1
3
Q2
3
Q3
1
Q4
Application module
Q5
1
Chapter 4, Validating and Using the Model Data
Pop quiz
Q1
Collection and UniqueKey
Q2
3
Q3
2
Q4
1
Q5
3
Chapter 5, Binding the Data
Pop quiz
Q1
3
Q2
4
Q3
1

Chapter 6, Displaying the Data
Pop quiz
Q1
2
Q2
3
Q3
1
Q4
4
Q5
3
Chapter 7, Working With Navigation Flows
Pop quiz
Q1
Unbounded and bounded
Q2
5
Q3
1
Q4
4
Q5
4
Chapter 8, Layout With Look and Feel
Pop quiz
Q1
5
Q2
1
Q3
4
Q4
3
Q5
4

Chapter 9, Implementing Security
Pop quiz
Q1
4
Q2
1
Q3
3
Q4
3
Q5
4
Chapter 10, Deploying the ADF Application
Pop quiz
Q1
1
Q2
4
Q3
1
Q4
4
Chapter 11, Advanced Features of ADF
Pop quiz
Q1
5
Q2
1
Q3
1
Q4
1

Index
Symbols
401 unauthorized error  232
<form> element  159
A
AccessMode opion
about  263
FORWARD_ONLY  263
RANGE_PAGING  263
RANGE_PAGING_AUTO_POST  263
SCROLLABLE  263
accessorIterator
opions  143
accessorIterator item  143
accessorIterator, opions
none  143
ppr  143
push  143
acion item
about  137
acivateState() method  267
Acive Data Manager interface  282
AciveDataModel interface  282
Acive Data Proxy interface  282
Acive Data Services framework
about  281
Acive Data Manager interface  282
AciveDataModel interface  282
Acive Data Proxy interface  282
data transport modes  282
Event Manager interface  282
Push Service interface  282
URL  282
aciviies  176
ADF
about  7, 31
applicaion, creaing  35
life cycle  195-197
Model-View-Controller (MVC),  
implemening  33
ADF 11gR2  203
ADF applicaion deployment
about  238
database connecion  240
data source  247
deployment descriptors  243-245
deployment proiles  241, 242
MDS coniguraion  242, 243
overview  238, 239
security  245
ADF applicaions
ADF security, disabling for  233, 234
login page, creaing for  228, 229
ADF architecture
about  34
Business Service layer  34
Controller layer  34
Metadata services layer  34
Model layer  34
View layer  34
ADF business components
about  61
applicaion module  80
associaion  69

[ 294 ]
core components  62
enity object  63
highlights  62
in acion  83
opions  85
uses  62
view link  77
view object  71
ADF Business Components  33
adfc-conig.xml ile  269  29, 177
ADF components
about  33
Business Components  33
Faces  33
Model  33
Task lows  33
adf-conig.xml ile  222, 243, 262, 282
ADF development pracice
about  35
botom-up approach  36
Business Service development  35
top-down approach  36
UI development  35
ADF Faces  33, 158
ADF library (JAR)  238
ADF life cycle
Apply Request Values phase  196
Iniialize Context phase  196
Invoke Applicaion phase  197
memory scopes  197
Metadata Commit phase  197
Prepare Model phase  196
Process Validaions phase  197
Render Response phase  197
Restore View phase  195
scopes, relaionships  198, 199
Update Model Values  197
Validate Model Updates phase  197
ADF lifecycle
debugging  277
ADF Model  33
ADF model layer  128
ADF security
about  219
adf-conig.xml ile  222
disabling, for ADF applicaions   233, 234
implemening  220, 221
jazn-data.xml ile  223
jps-conig.xml ile  222
weblogic.xml ile  222
web.xml ile  222
ADF skin
creaing, skin editor IDE  208-211
ADF skinning framework
pseudo classes  207
ADF Task lows  33
ADF web applicaion deployments
ADF library (JAR)  238
Enterprise Archive (EAR)  239
Java Archive (JAR)  238
Metadata Archive (MAR)  239
Web Applicaion Archive (WAR)  239
advanced features, enity objects
about  256
business logic groups  259
custom error messages  261
custom properies  257
custom validaion rule  260
domain  259
property sets  257
resource bundle  258, 259
Tuning secion  256, 257
advanced features, view objects
about  262
AccessMode  263
Associaion Consistent  263
FetchMode  262
FetchSize  262
Forward-Only mode  262
list of values  264, 266
ListRangeSize  262
MaxFetchSize  262
Query Opimizer  263
RangeSize  262
RowFetchLimit  262
Rowsets  264
SQL Mode  263
tuning  262
UI categories  266, 267
af:autoSuggestBehavior tag  169
af:commandbuton component  166
af:commandLink component  167
af:dialog component  164
af:forEach component  168

[ 295 ]
af:form component
about  159
defaultCommand property  159
targetFrame property  160
usesUpload property  160
af:inputComboboxListOfValues component  166
af:inputDate component  160
af:inputFile component  161
af:inputText component
about  160, 169
autoComplete property  160
columns property  160
contentStyle property  160
label property  160
maximumLength property  160
readOnly property  160
Required property  160
rows property  160
Secret property  160
value property  160
wrap property  160
af:iterator component  168
af:menu component  167
af:message component
about  162
message, displaying programmaically  162
af:outputFormated component  162
af:outputText component  162
af:pageTemplate tag  148
af:panelFormLayout component  163
af:panelGridLayout component  163
af:panelGroupLayout component  163
af:panelHeader component  163
af:panelStretchLayout component  163
af:popup component  164
af:query component  163
af:selectBooleanCheckbox component  161
af:selectOneChoice component  161
af:selectOneRadio component  161
af:statusIndicator component  149
af:switcher component  169
af:table component  167
aterCommit() method  118
af:treeTable component  168
ALL_ROWS mode  263
alternate key
creaing, for DeptEO  107
AM tester
playing  85
running  49
APIs  115
applicaion
creaing, in ADF  35
debugging  275
Applicaion Development Framework. See  ADF
applicaion directory
analyzing  39
Applicaion menu
about  22
exploring  22, 23
applicaion module
about  80
creaing  80, 81
running  83, 84
view link, adding to  81, 82
Applicaion module API  119
Applicaion module API, classes
applicaion module  119
applicaion module deiniion  119
applicaion module state management  267
Applicaion Navigator
about  21, 22
Applicaion menu, exploring  22, 23
projects pane, exploring  23
Applicaion Resources pane  23
applicaion roles
assigning, to users  233
applyViewCriteria() method  118
architecture, Model-View-Controller  32
assivateState() method  267
associaion
about  69
creaing, between EmpEO and  
DeptEO objects  70
Associaion Consistent  263
associaion opions, ADF business components
about  91
Relaionship  91, 92
atribute-level validaion  99
atributes
adding, to page template  153, 154
checking, of enity object  64, 65
atributes, Data Controls palete  130
atributeValues item  138

[ 296 ]
authorized  176
autoComplete property  160
autoSubmit property  159
B
Based on template opions, task low
Based on Template ID  190
Document  190
bc4j.xcfg ile
exploring  123
beforeCommit() method  118-120
beforeRollback() method  120
behavior opions, task low
Criical  193
Task Flow Reentry  193
Train  193
behavior tags  169
bindingContainer object  196
binding property  158
bindings
about  137
creaing, manually  137
executables, adding  142
bindings items
acion  137
atributeValues  138
buton  138
eventBinding  138
graph  138
list  139
listOfValues  140
methodAcion  140
navigaionList  140
table  140
tree  140
treeTable  140
botom-up approach  36
bounded task low
about  177
adding, to EmpDirectoryApplicaion  178, 179
advantages  177, 178
breakpoints  275
built-in declaraive validators
about  101
Collecion validator  101
Compare validator  104
Key Exists validator  105
Length validator  105
List validator  105
Method validator  105
Range validator  105
Regular Expression validator  106
Script validator  106
UniqueKey validator  106
business components
analyzing  48
creaing, steps  43-48
opening  48
business logic groups  259
Business logic unit  259
business objects
security  224
Business Service,  ADF architecture  34
Business Service development  35
business services
building  42
project properies, accessing  42, 43
buton control  138
C
CacheResults property  143
catalog
creaing  26, 27
checkAuthorizaion  176
CHECK_FILE_MODIFICATION parameter  215
clearCache() method  118
client interface
used, for exposing method  123-125
Code editor  28
Code editor views  28, 29
collecion validator
adding, for DeptEO ile  101-104
column mappings
checking  66
columns property  160
Commit buton
adding, to UI page  133, 134
commit() operaion  81
Compare validator  104
compilaion errors
resolving  275
complex data controls

[ 297 ]
about  268
Java and EJB data control  268
JMX data control  268
URL data control  268
Webservice data control  268
complex task lows
about  268
menu model navigaion  269
template  269
trains  268, 269
URL  270
Component palete  27
Component Palete pane  176
component selectors  207
components, task low
about  180
Control low acivity  188
method call acivity  180
Parent Acion acivity  185
Router acivity  183
Save Point Restore acivity  183
Task Flow Call acivity  183, 184
Task Flow Return acivity  184
URL View acivity  186
View acivity  186
Wild card acivity  188
condiional debugging  275
coniguraions, deployment proile  242
coniguraions, web.xml ile
context iniializaion parameters  243
ilters  244
listeners  244
servlets  244
coniguraion, transacion
about  121
creaing  122, 123
connecions.xml ile  247
contentStyle property  160
context iniializaion parameters  243
contextual events
about  138, 270
URL  273
Control low acivity
about  188
from-acivity  188
from-outcome  188
to-acivity  188
controller layer  32
Controller layer, ADF architecture  34
converter tags  169
Convert To Unbounded Task Flow opion  179
createEmployeeFlow.xml  179
CreateInsert method  130
CreateInsert operaion  134
create() method  117
Create method  130
Create, Retrieve, Update, Delete. See  CRUD 
operaions
createViewCriteria() method  118
createViewObject() method  119
Create with parameters method  130
CRUD operaions  62
custom error messages  261
CustomizaionAllowed atribute  281
customizaion classes, Metadata Services  
framework  279, 280
Customizaion Developer  17
customizaion layers, Metadata Services  
framework  278
CustomizaionLayerValues.xml ile  278
custom properies  257
custom validaion rule  260
D
data
binding, to UI components  51-55
exposing  123
exposing, to UI layer  50
database
connecing, to employee directory  
applicaion  39, 40
database connecion, ADF applicaion  
deployment  240
Database Developer  17
Database Navigator  25
Databindings.cpx ile  153, 276  156
DataBindings.cpx ile  128
Databindings (DCErrorHandler)  276
data control  127
data control, Data Controls palete  129
data control layer
working with  135, 136
Data Controls palete

[ 298 ]
about  24, 129
atributes  130
data control  129
methods  131
operaions  130, 131
parameters  132
return element  132
view criteria  132
view object collecion  129
data source, ADF applicaion deployment  247
data sources, Weblogic server  
coniguraions  284
data transport modes, Acive Data Services 
framework
Long Polling  282
Polling  282
Streaming  282
data visualizaion components  169
DCErrorHandlerImpl class  276
debugging
pracices  275
debugging, pracices
breakpoints  275
compilaion errors, resolving  275
condiional debugging  275
print values  275
declaraive validaion
about  98
built-in declaraive validators  101
enity object, lifecycle  98
validaion rules  99
decoraiveBox component  152
defaultCommand property  159
default domain
creaing, for integrated server  248-250
DefaultDomain folder  14
default salary
seing, for employees  109, 110
default value, Groovy expression
seing  109, 110
Delete method  130
department
list of values, creaing of  264-266
deployment descriptors, ADF applicaion  
deployment
about  243
weblogic-applicaion.xml  244
weblogic.xml  244
web.xml  243
deployment proile
about  241
coniguraions, analyzing  242
creaing  241, 242
deployment proiles, ADF applicaion  
deployment  241, 242
deployments, Weblogic server  
coniguraions  284
deployment, WebLogic server  247
DeptEO
alternate key, creaing for  107
Java API, generaing for  115-118
DeptEO ile
collecion validator, adding for  101-104
DeptEO.xml ile  107
dept.jspx ile
creaing  154-156
dept.jspx page  148
deptPageDef.xml ile  156
DEPT table
enity object, creaing for  66-69
diagnosics, Weblogic server coniguraions  285
discriminator atribute  259
doDML() method  118
domain  259
domain, Weblogic server coniguraions  283
drag and drop tags  170
E
EL expression
about  170
adding  171, 172
EmpDirectoryApplicaion
about  128, 148
bounded task low, adding to  178, 179
skin ile, adding to  205, 206
EmpDirectoryApplicaion ile  28
EmpDirectoryApplicaion module  62
EmpDirectoryModule.xml ile  47
EmpEO and DeptEO objects
associaions, creaing between  70
EmpEO.xml ile  46
primary key, seing for  69
employee directory applicaion

[ 299 ]
about  36
business services, building  42
connecing, to database  39, 40
database connecion, creaing  41
database tables, seing up  41
high-level development processes  36
planning  39
requisites  36
running  57, 58
workspace, creaing  37, 38
EmployeeDirectoryDiagram.adfc_diagram  48
empSkin.css ile  210, 211, 215
EmpVO and DeptVO
link view, creaing between  77-79
EmpVO.xml ile  47
Enterprise Archive (EAR)  239
Enterprise JavaBeans (EJB)  32
enity-based view object
creaing  73-76
EnityCollImpl class  256
EnityImpl class  115
EnityImpl class ile  257
enity implementaion class
generaing  115
enity-level validaion  99
enity object
about  63
atributes, checking  64, 65
creaing, for DEPT table  66-69
lifecycle  98
enity object opions, ADF business components
about  86
Atributes  87-89
Business Events  91
Business Rules  90
General  86
Java  91
View Accessor  91
enity objects
about  256
advanced features  256
Java classes  115
ErrorHandlerClass property  276
ErrorHandlerImpl class  276
error message
displaying  103
event
publishing  270-273
subscribing  270-273
eventBinding operaion
about  138
Event Manager interface  282
ExcepionHandler class  276
excepion-handling  276
excepion-handling processes
about  276
Databindings (DCErrorHandler)  276
task low excepion handler  276
try-catch  276
executables
about  142
accessorIterator  143
invokeAcion  143
iterator  144
page  144
searchRegion  144
shutleRegion  144
Execute method  130
executeQuery() method  119
execuion rule
specifying  102
extended skins  211
extension
creaing  285-287
running  286, 287
extension.xml ile  286
F
faces component selectors  213
facet  151
features, JDeveloper
closing  19
docking  19
drag-and-drop  19
ediing tools  19
loaing  19
keyboard access  19
maximize  19
minimize  19
searching  19
spliing  19
tabbed view  19
FETCH_ALL mode  262

[ 300 ]
FETCH_AS_NEEDED mode  262
FetchMode opion
about  262
FETCH_ALL  262
FETCH_AS_NEEDED  262
FetchSize opion  262
ile structure
idenifying  25
ileUpload  176
ilters  244
inally statement  276
Find method  130
indViewObject(String) method  119
First method  131
FIRST_ROWS mode  263
ixed-outcome method  181
folder structure
checking, for JDeveloper  12
Forward-Only mode  262
FORWARD_ONLY mode  263
fusionFx-simple.desktop ile  211
fusionFx skin  204
G
General opions, task low
Default Acivity  189
Excepion Handler  189
Finalizer  189
Iniializer  189
Save Point Restore Finalizer  189
Task Flow ID  188
Use Page Fragments  189
getAtribute() method  117
getCappedRowCount(n) method  264
getDef() method  118
getEmpno() method  117
getEsimatedRowCount() method  264
getHelloWorld() method  125
getRowCount() method  264
getTransacion() method  119
GlassFish  238  8
global selector aliases  213
global selectors  207
graph binding  138
Groovy  108
Groovy expression
about  108, 112
default value, seing  109, 110
features  114
script expression, adding  113, 114
validaion execuion  111
groups
creaing  230
H
High availability  267
I
IDE
about  18
preferences, seing  20
IDE components
about  20
Applicaion Navigator  21, 22
Applicaion Resources pane  23
Code editor  28
Code editor views  28, 29
Component palete  27
Database Navigator  25
Data Controls palete  24
Log window  28
Property Inspector  29
Recently Opened Files  24
Resource palete  26
Run Manager  28
sample applicaion, opening  21
Structure window  24
IDE coniguraion iles
working with  15, 16
id property  158
immediate property  159
index.jspx ile  27
index.jspx page  148
indexPageDef.xml ile  128
initDefaults() method  117
iniializeMethodParameters method  196
inlineStyle property  159
input components
about  159
af:form  159
af:inputDate  160

[ 301 ]
af:inputFile  161
af:inputText  160
af:selectBooleanCheckbox  161
af:selectOneChoice  161
af:selectOneRadio  161
installaion, JDeveloper  8
installaion, JDeveloper Studio Ediion  10-12
installer, JDeveloper
downloading  8, 9
integrated server  247
default domain, creaing for  248-250
internaionalizaion  258
invokeAcion
opions  143
invokeAcion item  143
invokeAcion, opions
always  143
deferred  143
ifNeeded  143
never  143
prepareModel  143
prepareModelIfNeeded  143
refreshAter  143
renderModel  143
renderMoldeIfNeeeded  143
iterator item  144
J
J2EE Developer  17
Java and EJB data control  268
Java API
generaing, for DeptEO  115-118
Java Archive (JAR)  238
Java Authenicaion and Authorizaion  
Services (JAAS)  219
Java classes, enity objects
enity collecion  115
enity deiniion  115
enity object  115
Java Database Connecivity (JDBC)  284
Java Developer  17
Java Naming and Directory Interface (JNDI)  284
Java Resource Files (JRF)  238
jazn-data.xml ile  223, 224, 230, 245, 246
JDeveloper
about  7
folder structure, checking for  12
installer, downloading  8, 9
installing  8
launching  12, 13
opional components, researching for  9
start-up lags/parameters  13
system requisites, for Windows  8
JDeveloper 11.2.2.0  238
JDeveloper 11gR2  238  8
JDeveloper IDE  7
JDeveloper Studio Ediion
about  9
installing  10-12
JMX data control  268
jps-conig.xml ile  222
JSF Process Validaions lifecycle method  277
K
Key Exists validator  105
L
label property  160
Last method  131
layout
creaing, for page  157, 158
performing, for page display  156
layout components
about  162
af:panelFormLayout  163
af:panelGridLayout  163
af:panelGroupLayout  163
af:panelHeader  163
af:panelStretchLayout  163
Length validator  105
LifeCycleContext object  196
list binding
about  139
listeners  244
listener tags  169
list of values
about  264
creaing, of department  264, 266
listOfValues binding  140
list of values components
about  166
af:inputComboboxListOfValues  166

[ 302 ]
ListRangeSize opion  262
ListResourceBundle API  259
List validator  105
localizaion  258
login.html ile  229
login page
creaing, for ADF applicaion  228, 229
Log window  28
Long Polling mode  282
M
managed bean
about  273
implementaions  273, 274
use cases  273, 274
managed beans opions, task low
Class  190
Name  190
Scope  190
managed properies opions, task low
Class  191
Name  191
Value  191
MaxFetchSize opion  262
maximumLength property  160
MDS coniguraion, ADF applicaion deployment  
242, 243
memory scopes, ADF life cycle
Applicaion Scope  197
Backing Bean Scope  198
Page Flow Scope  197
Request Scope  197
Session Scope  197
View Scope  198
menu components
about  167
af:menu  167
menu model navigaion  269
message
displaying, programmaically  162
Metadata Archive (MAR)  239
Metadata Services framework
about  278
customizaion classes  279, 280
customizaion layers  278
runime customizaion  281
seeded customizaion  280
Metadata services layer, ADF architecture  34
Metadata Services (MDS)  242, 278
method
exposing, client interface used  123-125
overriding  120, 121
methodAcion binding  140
method call acivity
about  180
adding, to task low  180-182
methods, Data Controls palete  131
Method validator  105
miscellaneous components
about  168
af:forEach  168
af:iterator  168
af:switcher  169
model layer  32
Model layer, ADF architecture  34
Model-View-Controller (MVC)
about  31, 32
architecture  32
controller layer  32
implemening, in ADF  33
model layer  32
view layer  32
N
navigaion components
about  166
af:commandbuton  166
af:commandLink  167
navigaionList binding  140
Next method  131
Next Set method  131
noAuthorizaion  176
nonag opion  13
noreopen opion  14
notAuthorized  176
O
Open Services Gateway Iniiaive (OSGI)  285
operaions, Data Controls palete  130
operaions, view object collecion
Create  130
CreateInsert  130

[ 303 ]
Create with parameters  130
Delete  130
Execute  130
Find  130
First  131
Last  131
Next  131
Next Set  131
Previous  131
Previous Set  131
setCurrentRowWithKey  131
setCurrentRowWithKeyValue  131
opional components
researching, for JDeveloper  9
Oracle dynamic tabs shell template  148-150
Oracle Plaform Security Services (OPSS)  222
Oracle Three Column Layout template
about  148
branding facet  149
center facet  149
copyright facet  149
end facet  149
header facet  149
start facet  149
status facet  149
OTN website  8
output components
about  161
af:message  162
af:outputFormated  162
af:outputText  162
P
page
creaing  148
creaing, with template  154-156
layout, creaing for  157, 158
PageDef ile  128
page deiniion bindings
creaing  141
page deiniion ile
accessing  136
page-deiniion ile  29
page display
layout, performing for  156
pageFlowScope variable  178
page item  144
page-related iles
security  224-227
page template
about  148
atributes, adding to  153, 154
creaing  150-153
Oracle dynamic tabs shell  149, 150
Oracle Three Column Layout  148, 149
pagetemplate-metadata.xml ile  153
panelStretchLayout component  152
parameters
passing, to task lows  191-193
parameters, Data Controls palete  132
Parent Acion acivity
about  185
Outcome opion  186
Parent Outcome opion  185
Root Outcome opion  186
parial page rendering  172
parialSubmit property  159
parialTriggers property  159
permissions
adding, for resources  225-227
Polling mode  282
popup
showing, to user  164, 165
popup components
about  164
af:dialog  164
af:popup  164
prepageEmployeeQuery () method  182
Previous method  131
Previous Set method  131
primary key
seing, for EmpEO.xml ile  69
print values  275
processUpdateModel method  197
project properies
accessing  42, 43
projects pane
exploring  23
properies, ADF Faces components
autoSubmit  159
binding  158
id  158
immediate  159

[ 304 ]
inlineStyle  159
parialSubmit  159
parialTriggers  159
rendered  158
styleClass  159
visible  159
Property Inspector pane  29
property sets  257
pseudo classes, ADF skinning framework
about  207
drag and drop  207
inline ediing  208
message  208
right to let  207
standard  207
Push Service interface  282
Q
query components
about  163
af:query  163
QUERY_MODE_SCAN_DATABASE_TABLES  
mode  263
QUERY_MODE_SCAN_ENTITY_ROWS mode  263
QUERY_MODE_SCAN_VIEW_ROWS mode  263
Query Opimizer
about  263
ALL_ROWS mode  263
FIRST_ROWS mode  263
Quickstart wizard  12
R
RANGE_PAGING_AUTO_POST mode  263
RANGE_PAGING mode  263
RangeSize opion  262
Range validator  105
readOnly property  160
Recently Opened Files pane  24
records
insering  134
RefreshCondiion item  143
Regular Expression validator  106
remove() method  118, 119
removeRowWithKey method  131
rendered property  158
Required property  160
resource bundle
about  258, 259
list  259
properies  259
XLIFF  259
Resource palete
catalog, creaing  26, 27
Resource palete window  26
resources
permissions, adding for  225-227
Retain Associaion Accessor Rowset opion  256
return element, Data Controls palete  132
roles
about  230
assigning  231-233
creaing  231-233
Customizaion Developer  17
Database Developer  17
J2EE Developer  17
Java Developer  17
Studio Developer  17
rollback() operaion  81
root_menu.xml ile  269
Router acivity
about  183
default-outcome property  183
expression property  183
RowFetchLimit opion  262
RowSet.closeRowSet() method  264
Rowsets
working with  264
rows property  160
Run Manager  28
runime customizaion, Metadata Services 
framework  281
S
Save Point Restore acivity  183
script expression
adding  113, 114
Script validator  106
SCROLLABLE mode  263
searchRegion item  144
Secret property  160
security, ADF applicaion deployment
about  245

[ 305 ]
jazn-data.xml  245, 246
security, for business objects  224
security, for page-related iles  224-227
security, for task lows  224-227
security permissions
applying  223
security realm, Weblogic server  
coniguraions  284
Security wizard
opions, checking for authenicaion  228
seeded customizaion, Metadata Services  
framework  280
SelectOneChoice component  140
Select Role screen  17
servers, Weblogic server coniguraions  283
servlets  244
setAssociaionAccessorRetained() method  256
setAtribute() method  117
setCurrentRowWithKey method  131
setCurrentRowWithKeyValue method  131
setEmpno() method  117
setMaxFetchSize() method  119
setOrderByClause() method  118
setWhereClause() method  118
shutleRegion item  144
skin  204
skinBundle.properies ile  210
skin editor
about  208
extended skins  211
faces component selectors  213
global selector aliases  213
Style Classes secion  211, 212
using  208
skin editor IDE
used, for creaing ADF skin  208-211
skineditor.zip ile  208
skin ile
adding, to EmpDirectoryApplicaion  
applicaion  205, 206
deploying  215, 216
skinning
about  204
advantages  204
types  204
skins
applying  214, 215
deploying  215
skin selectors
about  207
component selectors  207
global selectors  207
standard selectors  207
SQL Mode
about  263
QUERY_MODE_SCAN_DATABASE_TABLES  263
QUERY_MODE_SCAN_ENTITY_ROWS  263
QUERY_MODE_SCAN_VIEW_ROWS  263
standalone server  250-252
standard selectors  207
start-up lags/parameters, JDeveloper
-J-Dide.user.dir=<system_directory>  13
nonag  13
noreopen  14
seing up  14
Streaming mode  282
Structure window
about  24
ile structure, idenifying  25
Studio Developer  17
Style Classes secion  211, 212
styleClass property  159
Switch Roles menu  17
system directory  14
System.out.println statements  275
T
table binding  140
table components
about  167
af:table  167
af:treeTable  168
targetFrame property  160
Task Flow Call acivity
about  183
Display Type opion  184
Remote Applicaion URL opion  184
Run As Dialog opion  184
task low excepion handler  276
task low opions
about  188
based on a template  190
behavior  193

[ 306 ]
General  188
managed beans  190
managed properies  191
parameters  191
transacions  194
Visibility  190
Task Flow Return acivity
about  184
adding, to task lows  184, 185
End Transacion opion  185
Reentry opion  185
Restore Save point opion  185
task lows
about  176
as region  194, 195
components  180
exploring  182
method call acivity, adding to  180-182
parameters, passing to  191-193
security  224-227
Task Flow Return acivity, adding to  184, 185
types  176
View acivity, adding to  187
task lows, types
bounded  177, 178
unbounded  176, 177
template
about  269
page, creaing with  154-156
Tip of the Day popup  18
top-down approach  36
toString() method  181
trains  268, 269
transacion-level validaion  100
transacions
coniguraions, creaing  122, 123
coniguring  121
managing  121
transacions opions, task low
Always Begin New Transacion  194
Always Use Exising Transacion  194
No controller Transacion  194
No save point on task low entry  194
Share data control with calling task low  194
Use Exising Transacion If Possible  194
tree binding  140
TreeModel feature  269
treeTable binding  140
trinidad-conig.xml ile  210, 204
trinidad-skins.xml ile  210
elements  206
try-catch statement  276
tuning  262
Tuning secion  256, 257
U
UI categories  266, 267
UI components
about  158
data, binding to  51-55
data visualizaion components  169
input components  159
layout components  162
list of values components  166
menu components  167
miscellaneous components  168
navigaion components  166
output components  161
popup components  164
query components  163
table components  167
UI development  35
UI layer
data, exposing to  50
UI page
Commit buton, adding to  133, 134
UI-related arifacts
analyzing  56
unbounded task low  176, 177
UniqueKey validator  106
URL data control  268
URL View acivity  186
user
popup, showing to  164, 165
user directory
seing up  14
users
applicaion roles, assigning to  233
usesUpload property  160
Use Update Batching checkbox  256

[ 307 ]
V
validateEnity() method  117
validate() method  259, 260
validateModelUpdates method  197
validaion
about  97, 127
creaing, steps  102
validaion execuion  111
validaion rules
about  99
atribute-level validaion  99
enity-level validaion  99
transacion-level validaion  100
validator tags  170
value property  160
varStatus property  168
view accessors  264
View acivity
about  186
adding, to task low  187
view criteria, Data Controls palete  132
view layer  32
View layer, ADF architecture  34
view link
about  77
adding, to applicaion module  81, 82
creaing, between EmpVO and DeptVO  77-79
view object
about  71
types  72, 73
uses  71
view object collecion, Data Controls palete  129
ViewObjectImpl class  118
view object opions, ADF business components
about  92
General  92, 93
Query  93, 94
view objects
advanced features  262
view objects, classes
view deiniion  118
view object  118
view row  118
Visibility opions, task low
Library Internal  190
URL Invoke  190
visible property  159
W
Web Applicaion Archive (WAR)  239
weblogic-applicaion.xml ile  244
WebLogic server  238
WebLogic server 10.3.5.0  238
Weblogic server coniguraions
about  282
data sources  284
deployments  284
diagnosics  285
domain  283
Security realm  284
servers  283
WebLogic server deployment
about  247
integrated server  247
standalone server  250-252
weblogic.xml ile  222, 244
WebPageTemplate.jspx ile  152
Webservice data control  268
WebSphere  238
web.xml ile  222, 243
Wild card acivity  188
Windows
system requisites, for JDeveloper  8
workspace
creaing, for employee directory  
applicaion  37, 38
wrap property  160
X
XMLMenuModel feature  269


Thank you for buying  
Oracle ADF 11gR2 Development Beginner's Guide
About Packt Publishing
Packt, pronounced 'packed', published its irst book "Mastering phpMyAdmin for Efecive 
MySQL Management" in April 2004 and subsequently coninued to specialize in publishing 
highly focused books on speciic technologies and soluions.  
Our books and publicaions share the experiences of your fellow IT professionals in adaping 
and customizing today's systems, applicaions, and frameworks. Our soluion-based books 
give you the knowledge and power to customize the sotware and technologies you're 
using to get the job done. Packt books are more speciic and less general than the IT books 
you have seen in the past. Our unique business model allows us to bring you more focused 
informaion, giving you more of what you need to know, and less of what you don't.
Packt is a modern, yet unique publishing company, which focuses on producing quality,  
cuing-edge books for communiies of developers, administrators, and newbies alike.  
For more informaion, please visit our website: www.PacktPub.com.
About Packt Enterprise
In 2010, Packt launched two new brands, Packt Enterprise and Packt Open Source, in order  
to coninue its focus on specializaion. This book is part of the Packt Enterprise brand, home 
to books published on enterprise sotware – sotware created by major vendors, including 
(but not limited to) IBM, Microsot and Oracle, oten for use in other corporaions. Its itles 
will ofer informaion relevant to a range of users of this sotware, including administrators, 
developers, architects, and end users.
Writing for Packt
We welcome all inquiries from people who are interested in authoring. Book proposals 
should be sent to author@packtpub.com. If your book idea is sill at an early stage and  
you would like to discuss it irst before wriing a formal book proposal, contact us; one  
of our commissioning editors will get in touch with you. 
We're not just looking for published authors; if you have strong technical skills but  
no wriing experience, our experienced editors can help you develop a wriing career,  
or simply get some addiional reward for your experise.

Oracle ADF Enterprise Application Development—
Made Simple
ISBN: 978-1-849681-88-9           Paperback: 396 pages
Successfully plan, develop, test, and deploy 
enterprise applicaions with Oracle ADF
1. 
Best pracices for real-life enterprise applicaion 
development 
2. 
Proven project methodology to ensure success with 
your ADF project from an Oracle ACE Director 
3. 
Understand the efort involved in building an  
ADF applicaion from scratch, or convering an 
exising applicaion 
Oracle ADF Real World Developer’s Guide 
ISBN: 978-1-849684-82-8           Paperback: 590 pages
Mastering essenial ips and tricks for building next 
generaion enterprise applicaions with Oracle ADF
1. 
Full of illustraions, diagrams, and ips with clear 
step-by-step instrucions and real-ime examples. 
2. 
Get to know the visual and declaraive programming 
model ofered by ADF. 
3. 
In depth coverage of ADF business components and 
ADF binding layer. 
4.  Teaches you the ADF best pracices and ine-tuning 
ips.
Please check www.PacktPub.com for information on our titles

Oracle Information Integration, Migration, and 
Consolidation 
ISBN: 978-1-849682-20-6           Paperback: 332 pages
Over 60 recipes to create rich Internet applicaions 
with many exciing features
1. 
Learn about integraion pracices that many IT 
professionals are not familiar with 
2. 
Evaluate and implement numerous tools like Oracle 
SOA Suite and Oracle GoldenGate 
3. 
Get to grips with the past, present, and future of 
Oracle Integraion pracices 
Oracle APEX Best Practices
ISBN: 978-1-849684-00-2           Paperback: 298 pages
Accentuate Oracle APEX development with proven 
best pracices
1. 
"Oracle APEX Best Pracices" will get you started 
with Oracle APEX for developing real-world 
applicaions that perform and maximize the full 
potenial of Oracle APEX 
2. 
You will also learn to take advantage of advanced 
SQL and PL/SQL along the way 
3. 
Combines the knowledge of Oracle Apex Experts -- 
Alex Nuijten, Iloon Ellen-Wollf, and Learco Brizzi 
Please check www.PacktPub.com for information on our titles

