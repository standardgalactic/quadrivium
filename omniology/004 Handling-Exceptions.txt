©2019 MathByte Academy

Handling exceptions using try
the full try statement has these clauses:
try:
code that we want to protect from 
some potential exception(s)
except <ExceptionType> as ex:
code that will run if that specified 
<ExceptionType> occurs (or any subclass)
finally:
code that always executes –
whether exception occurred or not
else:
code that executes if try terminates normally
(an except clause must be present)
à keep this guarded code as short as possible
à often just a single statement!
à only guard code where you can do 
something about the exception
©2019 MathByte Academy

à may appear 0 or more times
Handling exceptions using try
the try statement clauses are quite flexible
try:
except <ExceptionType> as ex:
à allows handling different exception types in different ways
à as ex is optional
à <ExceptionType> is optional
à broad exception handler - be careful!
finally:
à appears 0 or 1 times
else:
à appears 0 or 1 times
à only allowed if an except clause is present
à this is required
à and of course they can be nested
©2019 MathByte Academy

Handling Multiple Exception Types
try:
…
except TypeError:
…
except AttributeError:
…
except IndexError:
…
always go from most specific to least specific 
(in terms of class hierarchy)
first except match will run
©2019 MathByte Academy

except order matters
l = [1, 2, 3]
try:
l[3]
except IndexError:
print('invalid index')
except LookupError:
print('lookup error')
Exception à LookupError
à IndexError
à KeyError
à 'invalid index'
l = [1, 2, 3]
try:
l[3]
except LookupError:
print(lookup error')
except IndexError:
print(index error')
à 'lookup error'
©2019 MathByte Academy

Grouping Exception Handlers
à sometimes we want to handle multiple exception types in the same way
try:
…
except ValueError as ex:
log(ex)
except TypeError as ex:
log(ex)
à in that case group the exception types in a single except clause
try:
…
except (ValueError, TypeError) as ex:
log(ex)
©2019 MathByte Academy

Bare Exception Handlers
à exception handlers that do not specify an exception type
à catch any exception
à overly broad for general use
à but good in certain circumstances
à do some cleanup work, logging, … and re-raise exception
à we'll come back to that
try:
…
except:
…
how do we know what the exception is?
sys.exc_info()
à tuple
exc_type, exc_value, exc_traceback
à returns info about current exception
©2019 MathByte Academy

Exception Objects
What properties and methods an exception object has depends on the exception
args
à arguments used to create exception object
__traceback__
standard exceptions have at least these two properties:
à the traceback object
à use the traceback module for easier visualization
à print_tb
à print_exception
à tb is same object as last item returned by sys.exc_info()
à not needed unless you are writing really advanced 
Python code (like frameworks)
à may be good for logging
à often error message
©2019 MathByte Academy

try… finally…
à finally code block is guaranteed to run, exception or no exception
à can actually do this
try:
…
finally:
…
à the exception is not handled – so it will propagate up
à but finally block runs before propagation
à useful for cleanup code
à no except clauses
©2019 MathByte Academy

What happens if an exception handler itself raise an exception?
works as normal – if the exception is not handled, it is propagated up
à exception handling can be nested inside an except handler
à not just inside the try clause
à in fact can be nested inside else, or even finally
©2019 MathByte Academy

Handling Exceptions vs Avoiding Exceptions
It's easier to ask forgiveness than it is to get permission.
Grace Hopper
Sometimes referred to as the EAFP principle in Python
(Easier to Ask For Permission)
Consider these two alternatives:
try:
with open(fname, 'r') as f:
…
except OSError:
# do something
if os.path.exists(fname) and not os.path.isdir(fname):
f = open(fname, 'r')
….
f.close()
this does not even begin to 
address possible permission 
issues!
Also things could go wrong while 
writing to the file, and we won't close 
it (hence the context manager)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

