© Fred Baptiste 2018

Recall…
Instead of using that loop, we saw we could just write:
def subgen():
for i in range(10):
yield i
We could consume the data from subgen in another 
generator this way:
def delegator():
for value in subgen():
yield value
def delegator():
yield from subgen()
With either definition we can call it this way:
d = delegator()
next(d)
etc…
© Fred Baptiste 2018

What is going on exactly?
caller
next(d)
delegator
yield from subgen
subgen
yield value
next
next
yield value
yield value
2-way communications
Can we send(), close() and throw() also?
Yes!
© Fred Baptiste 2018

How does the delegator behave when subgenerator returns?
it continues running normally
def delegator():
yield from subgen()
yield 'subgen closed'
def subgen():
yield 1
yield 2
d = delegator()
next(d)
à 1
next(d)
à 2
next(d)
à subgen closed
next(d)
à StopIteration
© Fred Baptiste 2018

Inspecting the subgenerator
from inspect import getgeneratorlocals, getgeneratorstate
def delegator():
a = 100
s = subgen()
yield from s
yield 'subgen closed'
def subgen():
yield 1
yield 2
d = delegator()
getgeneratorstate(d) à GEN_CREATED
getgeneratorlocals(d) à {}
next(d)
getgeneratorstate(d) à GEN_SUSPENDED
getgeneratorlocals(d) à {'a': 100, 's': <gen object>}
s = getgeneratorlocals(d)['s']
getgeneratorstate(s) à GEN_SUSPENDED
next(d)
à 1
à 2
d à SUSPENDED
s à SUSPENDED
next(d)
à 'subgen closed'
d à SUSPENDED
s à CLOSED
next(d)
à StopIteration
d à CLOSED
s à CLOSED
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

