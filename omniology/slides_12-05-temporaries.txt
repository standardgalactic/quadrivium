Alex Aiken 
Compilers 
Temporaries 

Alex Aiken 
Temporaries 
• Idea: Keep temporaries in the AR 
 
• The code generator must assign a location in the AR 
for each temporary 
 

Alex Aiken 
Temporaries 
  
def fib(x) = if x = 1 then 0 else  
               if x = 2 then 1 else   
                   fib(x - 1) + fib(x – 2)  
 

Alex Aiken 
Temporaries 
• Let NT(e) = # of temps needed to evaluate e 
 
• NT(e1 + e2) 
– Needs at least as many temporaries as NT(e1) 
– Needs at least as many temporaries as NT(e2) + 1 
 
• Space used for temporaries in e1 can be reused for 
temporaries in e2 
 
 

Alex Aiken 
Temporaries 
NT(e1 + e2) = max(NT(e1), 1 + NT(e2)) 
NT(e1 - e2) = max(NT(e1), 1 + NT(e2)) 
NT(if e1 = e2 then e3 else e4) = max(NT(e1),1 + NT(e2), NT(e3), NT(e4)) 
NT(id(e1,…,en) = max(NT(e1),…,NT(en)) 
NT(int) = 0 
NT(id) = 0 
 
 

Alex Aiken 
Temporaries 
  
 
 
      def fib(x) = if x = 1 then 0 else 
  
                               if x = 2 then 1 else   
 
                                     fib(x - 1) + fib(x – 2)  
 

Alex Aiken 
Temporaries 
• For a function definition f(x1,…,xn) = e the AR has 2 + 
n + NT(e) elements 
– Return address 
– Frame pointer 
– n arguments 
– NT(e) locations for intermediate results 

Alex Aiken 
Temporaries 
. . . 
x1 
Return Addr. 
Temp NT(e) 
. . . 
Temp 1 
Old FP 
xn 

Temporaries 
For the powerOfTwo() function at right, what are 
the numbers of temporaries required to evaluate 
each sub-expression, and the total number of 
temporaries required for powerOfTwo()? 
def powerOfTwo(x) = 
    if x % 2 == 0 
    then powerOfTwo(x / 2) 
    else x == 1 
    x % 2 == 0   powerOfTwo(x / 2)   x == 1   Total 
 
      1        2        2     3 
 
 
 
 
      1        1        1     1 
 
 
 
      2        1        0     2 
 
      2        1        0     3 

Alex Aiken 
Temporaries 
• Code generation must know how many temporaries 
are in use at each point 
 
• Add a new argument to code generation 
– the position of the next available temporary 
 
• The temporary area is used like a small, fixed-size 
stack 
 

Alex Aiken 
Temporaries 
cgen(e1 + e2) =  
                     cgen(e1)  
                     sw $a0 0($sp) 
                     addiu $sp $sp -4 
                     cgen(e2) 
                     lw $t1 4($sp) 
                     add $a0 $t1 $a0 
                     addiu $sp $sp 4 
 

Alex Aiken 
Temporaries 
cgen(e1 + e2, nt) =  
                     cgen(e1, nt)  
                     sw $a0 nt($fp) 
                     cgen(e2, nt + 4) 
                     lw $t1 nt($fp) 
                     add $a0 $t1 $a0 
 
 
                      

