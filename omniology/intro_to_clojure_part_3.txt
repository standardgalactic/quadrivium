LispCast
Introduction to Clojure 
Part 3
1
Sunday, June 30, 13

JAM
lambdajam.com
generously sponsored by
2
Sunday, June 30, 13

juxt.pro
generously sponsored by
3
Sunday, June 30, 13

4
Sunday, June 30, 13

X5’s third day at baking school
4
Sunday, June 30, 13

X5’s third day at baking school
Building a database of baking knowledge
4
Sunday, June 30, 13

X5’s third day at baking school
Building a database of baking knowledge
Designing a language to describe recipes
4
Sunday, June 30, 13

5
Sunday, June 30, 13

cleanup
Remove the add-<ingredient> and 
add-<ingredient>s functions. They are not 
used.
5
Sunday, June 30, 13

6
Sunday, June 30, 13

warmup
Just to remember how to do it, let’s 
add a new ingredient. Cocoa 
powder is stored in the pantry and is 
scoopable.
6
Sunday, June 30, 13

7
Sunday, June 30, 13

warmup
Add a recipe for brownies.
2 cups ﬂour
2 eggs
1 cup sugar
2 cups cocoa
1 cup milk
2 butters
mix together butter, sugar, and cocoa in a bowl
then add ﬂour, eggs, and milk to same bowl and mix
bake in a pan for 35 minutes
let cool
7
Sunday, June 30, 13

8
Sunday, June 30, 13

2 cups ﬂour
2 eggs
1 cup sugar
2 cups cocoa
1 cup milk
2 butters
mix together butter, sugar, and cocoa in a bowl
then add ﬂour, eggs, and milk to same bowl and mix
bake in a pan for 35 minutes
let cool
8
Sunday, June 30, 13

(defn bake-brownies []
  (add :sugar 1)
  (add :cocoa 2)
  (add :butter 2)
  (mix)
  (add :egg 2)
  (add :flour 2)
  (add :milk 1)
  
  (mix)
  (pour-into-pan)
  (bake-pan 35)
  (cool-pan))
2 cups ﬂour
2 eggs
1 cup sugar
2 cups cocoa
1 cup milk
2 butters
mix together butter, sugar, and cocoa in a bowl
then add ﬂour, eggs, and milk to same bowl and mix
bake in a pan for 35 minutes
let cool
8
Sunday, June 30, 13

{:ingredients {:flour 2
               :egg 2
               :sugar 1
               :cocoa 2
               :milk 1
               :butter 2}
 :steps [[:add :butter]
         [:add :sugar]
         [:add :cocoa]
         [:mix]
         [:add :flour]
         [:add :egg]
         [:add :milk]
         [:mix]
         [:pour]
         [:bake 35]
         [:cool]]}
2 cups ﬂour
2 eggs
1 cup sugar
2 cups cocoa
1 cup milk
2 butters
mix together butter, sugar, and cocoa in a bowl
then add ﬂour, eggs, and milk to same bowl and mix
bake in a pan for 35 minutes
let cool
8
Sunday, June 30, 13

9
Sunday, June 30, 13

exercise 1
Write a function perform that 
takes a vector as argument. If the 
ﬁrst element of the vector 
is :cool, run cool-pan.
9
Sunday, June 30, 13

10
Sunday, June 30, 13

exercise 2
Modify perform to also call mix if the ﬁrst 
element of the vector is :mix.
10
Sunday, June 30, 13

11
Sunday, June 30, 13

exercise 3
Modify perform to pour the bowl into the pan 
when the ﬁrst element is :pour. Also, perform 
should bake when the ﬁrst element is :bake. The 
number of minutes will be the second element.
11
Sunday, June 30, 13

12
Sunday, June 30, 13

exercise 4
Modify perform to add ingredients to the 
bowl if the ﬁrst element of the vector 
is :add. How it operates depends on the 
rest of the arguments.
12
Sunday, June 30, 13

exercise 4
Modify perform to add ingredients to the 
bowl if the ﬁrst element of the vector 
is :add. How it operates depends on the 
rest of the arguments.
If there is one argument and it is the keyword :all, then add all ingredients 
  in the recipe.
If there is one argument and it is the name of an ingredient in the recipe, 
  add the amount speciﬁed in the ingredients list.
If there are two arguments, the ﬁrst is the name of the ingredient and the 
  second is the amount to add.
12
Sunday, June 30, 13

exercise 4
Modify perform to add ingredients to the 
bowl if the ﬁrst element of the vector 
is :add. How it operates depends on the 
rest of the arguments.
If there is one argument and it is the keyword :all, then add all ingredients 
  in the recipe.
If there is one argument and it is the name of an ingredient in the recipe, 
  add the amount speciﬁed in the ingredients list.
If there are two arguments, the ﬁrst is the name of the ingredient and the 
  second is the amount to add.
Hint: you may need to modify the arguments to perform.
12
Sunday, June 30, 13

13
Sunday, June 30, 13

exercise 5
Write a function bake-recipe which takes
a recipe, performs all of the steps, and
returns the cooling rack id where the item
is placed.
13
Sunday, June 30, 13

14
Sunday, June 30, 13

exercise 6
Rewrite bake to use bake-recipe. It should 
still return  the cooling rack id.
14
Sunday, June 30, 13

15
Sunday, June 30, 13

exercise 7
Add a recipe for every baked good X5 has 
learned so far.
15
Sunday, June 30, 13

16
Sunday, June 30, 13

exercise 8
Modify order->ingredients to not 
refer to individual items in the code. 
Instead, it should use the meaning 
given to the name of the item in the 
baking database.
16
Sunday, June 30, 13

17
Sunday, June 30, 13

exercise 9
Add a section to the baking database which 
contains information about all of our 
ingredients. It should say where to ﬁnd the 
ingredients and how to add them.
17
Sunday, June 30, 13

18
Sunday, June 30, 13

exercise 10
Rewrite scooped?, squeezed?, and 
simple? to use the new database instead of 
their existing sets.
18
Sunday, June 30, 13

19
Sunday, June 30, 13

exercise 11
There is duplication between fetch-from-pantry 
and fetch-from-fridge. Rewrite
fetch-ingredient to not use these functions. 
Then get rid of fetch-from-pantry and 
fetch-from-fridge.
19
Sunday, June 30, 13

20
Sunday, June 30, 13

group-by
20
Sunday, June 30, 13

group-by
(group-by even? [1 2 3 4 5 6])
20
Sunday, June 30, 13

group-by
function
(group-by even? [1 2 3 4 5 6])
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
[1 2 3 4 5 6])
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
[1 2 3 4 5 6])
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1]
 true  [2]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1]
 true  [2]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3]
 true  [2]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3]
 true  [2]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3]
 true  [2 4]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3]
 true  [2 4]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3 5]
 true  [2 4]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3 5]
 true  [2 4]}
20
Sunday, June 30, 13

group-by
function
(group-by even? 
collection
  =>
[1 2 3 4 5 6])
{false [1 3 5]
 true  [2 4 6]}
20
Sunday, June 30, 13

21
Sunday, June 30, 13

exercise 12
Rewrite fetch-list to remove the usage 
of :pantry, :fridge, and the sets 
pantry-ingredients and fridge-ingredients.
   Hint: Use group-by.
21
Sunday, June 30, 13

exercise 12
Rewrite fetch-list to remove the usage 
of :pantry, :fridge, and the sets 
pantry-ingredients and fridge-ingredients.
   Hint: Use group-by.
21
Sunday, June 30, 13

22
Sunday, June 30, 13

fn
22
Sunday, June 30, 13

fn
(fn [x y] (* x (+ 3 y)))
22
Sunday, June 30, 13

fn
(fn [x y] (* x (+ 3 y)))
arguments
22
Sunday, June 30, 13

fn
(fn [x y] (* x (+ 3 y)))
arguments
body
22
Sunday, June 30, 13

23
Sunday, June 30, 13

exercise 13
Rewrite add to use the new 
usage map.
23
Sunday, June 30, 13

24
Sunday, June 30, 13

exercise 14
We would like to replace the cond in perform 
with a map which follows the same pattern as 
the usage map we just wrote. Create a map 
actions where the keys are action names and 
the values are functions implementing those 
actions.
24
Sunday, June 30, 13

25
Sunday, June 30, 13

exercise 15
Rewrite perform to use the new actions 
map.
25
Sunday, June 30, 13

26
Sunday, June 30, 13

26
Sunday, June 30, 13

Structure and Interpretation
of Computer Programs
26
Sunday, June 30, 13

Structure and Interpretation
of Computer Programs
Clojure Programming
26
Sunday, June 30, 13

Structure and Interpretation
of Computer Programs
Clojure Programming
4clojure.com
26
Sunday, June 30, 13

Structure and Interpretation
of Computer Programs
Clojure Programming
4clojure.com
clojurekoans.com
26
Sunday, June 30, 13

27
Sunday, June 30, 13

27
Sunday, June 30, 13

