
User-Centered Agile Method

FOCUS SERIES IN NETWORKS AND TELECOMMUNICATIONS
Series Editor Marcelo Dias de Amorim
User-Centered
Agile Method
Dominique Deuff
Mathilde Cosquer

First published 2013 in Great Britain and the United States by ISTE Ltd and John Wiley & Sons, Inc.
Apart from any fair dealing for the purposes of research or private study, or criticism or review, as
permitted under the Copyright, Designs and Patents Act 1988, this publication may only be reproduced,
stored or transmitted, in any form or by any means, with the prior permission in writing of the publishers,
or in the case of reprographic reproduction in accordance with the terms and licenses issued by the
CLA. Enquiries concerning reproduction outside these terms should be sent to the publishers at the
undermentioned address:
ISTE Ltd
John Wiley & Sons, Inc.
27-37 St George’s Road
111 River Street
London SW19 4EU
Hoboken, NJ 07030
UK
USA
www.iste.co.uk
www.wiley.com
© ISTE Ltd 2013
The rights of Dominique Deuff and Mathilde Cosquer to be identified as the author of this work have
been asserted by them in accordance with the Copyright, Designs and Patents Act 1988.
Library of Congress Control Number: 2013930462
British Library Cataloguing-in-Publication Data
A CIP record for this book is available from the British Library
ISSN: 2051-2481 (Print)
ISSN: 2051-249X (Online)
ISBN: 978-1-84821-453-8
Printed and bound in Great Britain by CPI Group (UK) Ltd., Croydon, Surrey CR0 4YY

Contents
FOREWORD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
vii
Jean-Michel PORTUGAL and Claude DALOZ
CHAPTER 1. INTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
CHAPTER 2. INTRODUCTION TO THE METHODS EMPLOYED. . . . . . . . . . .
5
2.1. The agile method −Scrum . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
2.1.1. Fundamental elements of agile methods . . . . . . . . . . . . . . . .
5
2.1.2. Scrum method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2.1.3. Scrum method as a framework for
the User-Centered Agile method. . . . . . . . . . . . . . . . . . . . . . . . .
12
2.2. User-Centered Design method. . . . . . . . . . . . . . . . . . . . . . . . .
14
2.3. User testing method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
CHAPTER 3. SOURCES FOR THIS WORK . . . . . . . . . . . . . . . . . . . . . . .
21
3.1. State of the art . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
3.1.1. Existing models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
3.1.2. Recurring elements between feedback reports . . . . . . . . . . . . .
29
3.2. Feedback on application of the first version of the UCA method . . . .
36
3.3. Elements retained for the construction of the UCA method . . . . . . .
38
CHAPTER 4. DESCRIPTION OF THE USER-CENTERED AGILE METHOD . . . .
41
4.1. Roles present . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42
4.2. Ceremonies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
4.3. Artifacts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44
4.4. Progression of the method . . . . . . . . . . . . . . . . . . . . . . . . . . .
48

vi
User-Centered Agile Method
4.4.1. Phase 1: design of a global view of the product . . . . . . . . . . . .
48
4.4.2. Phase 2: development . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
4.4.3. Phase 3: validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79
4.5. Implication of the method in terms of workload . . . . . . . . . . . . . .
80
4.5.1. Phase 1: design of a global view of the product . . . . . . . . . . . .
80
4.5.2. Phase 2: development . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
4.5.3. Phase 3: validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
CHAPTER 5. CASE STUDIES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
5.1. Application of the User-Centered Agile method
on the Cat’s Eyes project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
5.1.1. Overview of the project . . . . . . . . . . . . . . . . . . . . . . . . . .
85
5.1.2. Actors involved in the project and their roles . . . . . . . . . . . . .
87
5.1.3. Description of the progression of the project. . . . . . . . . . . . . .
88
5.1.4. Feedback relating to the method . . . . . . . . . . . . . . . . . . . . .
93
5.2. Application of the User-Centered Agile method
on the Bind project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
5.2.1. Overview of the project . . . . . . . . . . . . . . . . . . . . . . . . . .
95
5.2.2. Actors involved in the project and their roles . . . . . . . . . . . . .
97
5.2.3. Description of the progression of the project. . . . . . . . . . . . . .
98
5.2.4. Feedback relating to the method . . . . . . . . . . . . . . . . . . . . .
102
5.3. Balanced evaluation of the case studies . . . . . . . . . . . . . . . . . . .
104
CONCLUSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
BIBLIOGRAPHY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
INDEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
115

Foreword
Agile development methods began to emerge around twenty years ago
now. However, it was not until the early 2000s that they began to be widely
used in industry. This growth was often due to the advent of Internet
services, requiring faster cycles of development in order to heighten the rate
at which an ever-burgeoning number of functionalities were made available.
In parallel, User-Centered Design (UCD) methods were also becoming more
and
more
widely
used.
During
this
period,
in
the
field
of
telecommunications, the explosion in the number of connected terminals,
Web applications, new use environments (particularly in a domestic setting),
etc. meant it was crucial to gain a fuller understanding of users’ requirements
and better evaluate the relevance and acceptance of these services’ attempts
to cater for these requirements.
Hence, UCD and agile methods were bound to cross paths, at least for the
telecoms industry! Yet it is the combination of an engineer/ergonomist
specializing in agile development and an ergonomist who is an expert in
communication interfaces which has been able to demonstrate the relevance
of the complementarity of these two methods. Throughout this book,
Dominique Deuff and Mathilde Cosquer put forward a consistent strategy to
bring together the best of the two approaches, applying them to the design
and development of communication services.

viii
User-Centered Agile Method
To begin with, the UCD method is used for the phase of design
definition, with regular exchanges between designers and evaluators in order
to take account of the view of the end-users. Then there is a long “tunnel” of
development, at the end of which a new round of user testing will validate
the design that has been developed (or not!). Unfortunately, it is often very
late in the day, and above all, costly, to take account of the users’ comments
and apply them to the already-finished product… The agile methods, by
their very approach, make it possible to control, or at least segment, this
tunnel effect by performing rounds of development in successive iterations.
Thus, from a very tenuous initial definition of the design, on the basis of
which, development can begin, it is possible to progressively take account of
the expectations, changes or new functional requirements throughout the
course of the cycle. By combining these two methods, the users take their
place throughout the process of design and development, and their comments
can be taken into account as soon as possible. It is an exciting challenge to
bring together the future customers and the order-givers!
Yet while it may seem obvious that the opinion of an end-user about a
product for which he will ultimately become the customer will be relevant,
adopting this approach means breaking down many barriers internal to the
company and agreeing to change habits which are firmly entrenched.
Bringing UCD and agile methods together means the designers have to go
less far in terms of the specification phase, on the one hand, and impress on
the business owner the need to heed the opinion of the user during the
development process, on the other! So much flies in the face of the
established powers! Can people agree to relinquish a certain amount of
power, in the interests of moving towards a better and more satisfactory
product? Can they accept that knowledge is not unique but rather is diffuse
and shared between the actors involved in the design and development
processes? Finally, explaining to the “revered authorities” of the established
methods and convincing them that such methods can change may be the
most difficult task that the authors of the present book have had to face, and
which anyone wishing to implement the User-Centered Agile (UCA) method
will have to face.
Thus, it is a great adventure that is offered us in these pages, because the
challenge is one that is truly worth rising to. Beyond a methodology, it is a
philosophy and a global approach to service design which is presented. More
than a way of handling a few projects, this is an entirely new vision of

Foreword
ix
enterprise. To place the user at the heart of the design process, to give him a
voice in the very early phases of an innovative project, and in particular to
listen to his opinions whilst continuing to heed the various professionals in
the company, is a real challenge.
Jean-Michel Portugal
Claude Daloz
March 2013

1
Introduction
The constant evolution taking place in the field of Information and
Communication Technology (ICT) means that an ever-broader range of
users are employing this technology in increasingly flexible, changeable and
varied cases of use. In parallel to this trend, owing to our demand for the
provision of useful and usable solutions, the design of systems, services and
products are becoming more and more complex. In response to this
demanding context, the User-Centered Agile (UCA) method, which is
presented in this book, is conceived to include both User-Centered Design
(UCD) and agile development methods, taking full advantage of the
particularities and assets of each of these approaches.
The foundation for the UCD method is the frequent and iterative
participation of the user throughout a design project. Generally speaking,
projects which operate on the basis of this approach are divided into three
phases (see Figure 1.1): an analysis and design phase, a development phase
and a validation and evaluation phase. An ergonomist, who is a specialist in
UCD, usually makes a contribution at the earliest design stage, and is also
involved in the final phase by way of user testing, but has little input during
the intervening development period. However, the design phase, which is
sometimes rather short, does not always allow for the involvement of real-
world users. Furthermore, because the evaluation phase occurs only after the
development has already taken place, the possibilities for modifications to be
made are limited, for reasons of time and financial costs.

2
User-Centered Agile Method
Figure 1.1. Division of projects into three phases
In parallel, for a number of years, agile methods (in particular the Scrum
method) have become widely used by development teams. These are models
which involve iterative and incremental development, intended to respond as
faithfully as possible to the needs expressed by the project commissioners,
offering a high degree of reactivity to their demands. These approaches
facilitate rapidity in the development of a service, and flexibility to apply
adaptations which appear necessary to this product during the development
phase. Nevertheless, the end-user is not formally involved in the pursuance
of these methods, meaning it is of limited use from the point of view of
UCD.
UCD and agile methods have points in common: in particular the concept
of iterations and the search for feedback. We can, therefore, envisage
mutually integrating these two methods, with the aim of strengthening the
taking into account of a “user” perspective. If a partial functional product is
delivered at the end of each iteration, regular evaluation by users is possible,
and, therefore, UCD can continue during the development phase and be
present throughout the design process. Agile methods, for their part, can take
account of the needs of the end-users, rather than just those expressed by the
commissioner of the development project.
Put more clearly, the UCA method which was described briefly in the
article [DEU 12] and which we are suggesting here is intended, primarily, to
adjust the design phase to include a hybrid method wherein UCD and the
agile Scrum method are interlocked, giving an overall view of the product.
Then, in the development phase, the aim of the UCA approach is to enable
an ergonomist to continue to apply the UCD process by way of regular mini-
user testing sessions. Finally, in the validation phase, the method advocates
that “conventional” user testing be employed. Figure 1.2 illustrates the logic
of these three phases.

Introduction
3
This
method
is
presented
in
the
form
of
rules
and
formal
recommendations. It inevitably involves certain infringements on some of
the rules unique to either method, since the aim is to integrate them together,
and therefore find a balance in the interlocking of each with the other; and
this cannot be done without some compromises on both sides.
Figure 1.2. Division of projects into three phases in the context of the
UCA method
In the interests of a full appreciation of the method being proposed here,
in Chapter 2, we introduce the methods employed – namely: the Scrum
method, the UCD method and the user testing which occupies an important
place in our proposed system.
In reviewing the literature, we were able to observe that the combination
of UCD and agile methods is not a new topic, and many works highlight the
relevance of such an approach. Chapter 3 analyzes the existing body of work
published over the past decade on this subject, and also offers a summary of
feedback on experiments conducted with the UCA method. We have based
our thinking on all of these sources when devising the UCA method.
The UCA method is a working framework based on the logic introduced
by Scrum – a project management oriented working framework. The method
proposed herein is intended to be a “human-centered” extension of Scrum
given the integration of UCD and user testing. It is for this reason that the
description of the UCA method given in Chapter 4 is based entirely on the
fundamental aspects of the Scrum agile method and employs its terminology
and its elements.
The final chapter presents two case-studies which partly illustrate the
application of the UCA method. Put differently, the two proposed projects
employ the UCA method which we advocate here as closely as possible to
its description, in view of the context of each project.

2
Introduction to the Methods Employed
The User-Centered Agile method (UCA) is intended to mutually integrate the agile method
known as Scrum and the User-Centered Design (UCD) approach. It attempts to lay down a
project management framework based on the Scrum method, integrating the advantages of
UCD in order to better cater for the needs of the end users. Consequently, the aim of this
chapter is to introduce these two approaches upon which the UCA method is founded, as well
as the user testing technique – a technique used for evaluating a product, which occupies a
very important place in the UCA method.
2.1. The agile method −−Scrum
2.1.1. Fundamental elements of agile methods
In the 1980s, in the wake of the observation that the use of V-shaped
models and development methods1 were leading to the failure of numerous
software development projects (late delivery, over-budget costs, products
which did not cater for the consumers’ needs, etc.), a great many research
projects were carried out on iterative and incremental methods. They were
not widely taken into account until, in 2001, a group of seventeen experts
came together, with the intention of rallying iterative and incremental
methods under the banner of “agile methods”. This rallying took place by
1 V-shaped methods are waterfall methods wherein the phases occur successively, with one
phase unable to begin until and unless the previous one has been completed. These phases are,
in the order in which they occur: expression of needs, specifications, design, production,
testing, validation and maintenance.

6
User-Centered Agile Method
way of a manifesto, the “agile manifesto”2, comprising four values and
twelve principles shared by the many different existing methods.
Thus, the agile methods are iterative and incremental development
models which are intended to cater as fully as possible for the needs
expressed by the commissioners (the clients behind the development of the
product), providing the opportunity to regularly evaluate the product, and
offering a high degree of reactivity in relation to their requirements. They
offer the flexibility to apply to the product any adaptations which appear
necessary to be made during the course of the development phase. This is
due to the fact that they respect the four fundamental values of the agile
manifesto:
– the team: the team is far more important than the tools or operational
procedures. Communication is a crucial concept in the interests of having a
closely-knit team.
– the product: the product, even when unfinished, must always work.
– collaboration: the commissioner must be involved in the project in
order to be able to provide information to the team at all times, thereby
avoiding any differences between the demand and the realization of the
product.
– acceptance of change: the team must accept the changes asked of them.
The initial planning needs to be flexible in order for these changes to be
taken into account.
Agile methods are primarily and traditionally applied for software
development but, theoretically, they could be applied to any type of project.
The different agile methods share the same philosophy and the same
principles, but are different in the way in which they implement these
principles and philosophy. Consequently, we have focused on one method in
particular – Scrum – to enhance the UCA method.
2 The “agile manifesto” is available on the following Website: http://agilemanifesto.org/.

Introduction to the Methods Employed
7
2.1.2. Scrum method
In 1986, H. Takeuchi and I. Nonaka published an article explaining how
certain Japanese companies were able to quickly come out with world-class
products, based on self-managing teams and a highly involved style of
management [TAK 86]. This article contained all the fundamental elements
of the method which, hereafter, we shall call Scrum – the name bestowed by
P. DeGrace and L.H. Stahl in 1991 [DEG 91], in reference to the rugby term
mentioned in Takeuchi and Nonaka’s article.
In 1993, Jeff Sutherland applied this model for the first time to a
development project, and he recounted his experience of it in a 2004 article
[SUT 04].
In
1995,
Sutherland
and
Ken
Schwaber
laid
down
the
fundamental aspects of the Scrum method [SCH 95].
Thereafter, many publications on the Scrum method were to see the light
of day, including the works of K. Schwaber and M. Beedle [SCH 01],
K. Schwaber [SCH 04], C. Aubry in France [AUB 10], and recently the
Scrum Guide, co-authored by Ken Schwaber and Jeff Sutherland [SCH 11],
and the work of K.S. Rubin [RUB 12].
The entirety of this section is given over to the description of this agile
method, which is practical, simple and very widely used in the world of
industrial software engineering.
2.1.2.1. An iteration-based process
Scrum is a project management method – a working framework
championing an iterative and adaptive process of product development.
Thus, it is based on iterations, generally lasting between two and four weeks,
known as “sprints”. All sprints are of a fixed duration, and the activities
which take place during them are organized in the same way for all the
sprints. Each new sprint begins immediately after the previous one, and the
defined goal of a sprint cannot be altered during its pursuance.
Owing to this iterative process, the product is constructed incrementally:
each partial product at the end of each sprint is an operational product,
potentially deliverable, and therefore functional and available.
In a project, the version of a product delivered at the end of the
development phase is called a “release”. In an improper use of language, this

8
User-Centered Agile Method
denotation is also attributed to the period of time set aside to create a version
of the product. Thus, in Scrum, a release is composed of a series of several
sprints. Furthermore, several releases of a product may occur on the tail of
one another (see Figure 2.1).
Figure 2.1. Iterative process of the agile method, Scrum, based on sprints of fixed duration
2.1.2.2. Fundamental elements and progression of the Scrum method
The Scrum method is based on three types of elements, which frame the
development process: the roles of the participants in the project, the artifacts
used and the ceremonies. Each of these elements has a specific meaning, and
is essential to the method of bringing benefits to the project applying this
approach. The process of the method consists of rules which forge
connections between these different elements.
There are three roles in Scrum:
– the Product Owner (PO): this is the client who has commissioned the
product. He provides a vision3 of the product which is shared with the whole
of the team. The PO is responsible for defining the content of the product,
managing the priorities of the items of the product and ensuring these
priorities are understood by the development team;
– the Scrum master: the Scrum master is not a project manager. He is
responsible for helping the team to apply the Scrum method and adapt it to
their particular context. His duty is to eliminate impediments, i.e. events
which could slow down the work of the team;
– the development team: the team is in charge of the development of the
product, and organizes itself with the aim of optimizing its productivity, its
3 The vision corresponds to a clear and concise definition of the product in terms of
objectives and problems needing to be solved.

Introduction to the Methods Employed
9
flexibility, its creativity and enhancing its skills in order to achieve the
objectives.
Scrum is based on two artifacts as a pivotal point for the activities:
– the product backlog: this is a prioritized list of items, with the most
important items at the top of the list. This list represents the product’s
functional perimeter. This list is not set in stone, and evolves over time with
the addition, elimination and decomposition of functional items, and also on
the basis of the new priorities encountered (changes in the level of priority of
the users’ needs, market conditions and technological evolutions [SCH 11]).
The items on the backlog have differing levels of detail. Those items on the
list which are most important are usually detailed more explicitly than the
optional items. As the project advances, the number of detailed items
increases. Thus, as long as the product exists, the product backlog evolves
and continues to live;
– the sprint backlog: this represents that part of the product backlog
which is in the process of development in the current iteration. It is the set of
tasks needing to be performed during an iteration. This list is decided upon
at the beginning of the sprint, and usually cannot be altered during the
undertaking of a sprint.
In certain books and articles describing Scrum, other artifacts are cited:
– the increment [SCH 11; RUB 12]: this is the functional partial product
delivered by the development team at the end of each iteration;
– the “burndown charts” [AUB 10]: these are progress graphs which can
be used to make predictions of the advancement of the elaboration of the
product and what remains to be done in an iteration;
– the impediment list: this is the list of items standing in the way of the
productivity of the development team and the quality of the product.
The progression of a Scrum process is framed by five ceremonies (see
Figure 2.2):
– release planning meeting: this is the meeting which involves
completing priorization of the items from the product backlog and
distributing them into iterations of equal duration. This ceremony precedes
the start of all the developments, and therefore takes place only once during
the release;

10
User-Centered Agile Method
– sprint planning meeting: this is the meeting at the very beginning of a
sprint, intended to break down the items in the iteration just beginning, into
short developmental tasks. These tasks are generally brought together into a
task board, which organizes them into three categories: those which need to
be developed, those in the process of being developed and those which have
been completed. In the wake of this meeting, the developments of the current
sprint begin in earnest, on the basis of the tasks defined;
– the daily scrum: this is a daily 15-minute window in which each
member of the team briefly summarizes what he did the previous day, and
what he intends to do that day. This point is crucial in Scrum, because it
affords the opportunity to evaluate the progress of the project, to improve
communication between the team members, to fine-tune the understanding
of the project and to reduce the number of meetings by identifying problems
as early as possible;
– the sprint review: this is a meeting at the end of a sprint, intended to
demonstrate the functional partial product, i.e. the state of the project at the
end of the sprint, in order to facilitate the making of decisions about the
continuance of the project and the identification of potential items for the
next iteration. During this ceremony, the Product Owner (PO) compares the
product to his initial demand and, if necessary, suggests modifications to be
made to it. In taking account of these modifications, the product backlog
needs to be amended. There may, in fact, be an adaptation of the content of
the sprints on the basis of the modifications requested;
– the sprint retrospective: this is the final meeting in a sprint. It follows
the sprint review, and involves only the development team. The intention at
this meeting is to identify what works well and what needs to be altered in
order to collectively find solutions to improve the workflow.
Figure 2.2. Description of a sprint

Introduction to the Methods Employed
11
2.1.2.3. Question that arises regarding the period before the sprint planning
meeting
The description of the Scrum method, as originally defined, begins with
the release planning meeting. This means that the items in the product
backlog need to be identified before the Scrum method per se can truly
begin. Thus, the Scrum method gives us no guidance for describing these
items. Consequently, in most books, there are descriptions of the phase
located before the sprint planning meeting (the period between the beginning
of the release and the beginning of the first sprint – see Figure 2.3). This
phase is sometimes incorrectly called “sprint 0”, although it has none of the
characteristic traits of a sprint (variable duration, no increment at the end, no
ceremony specific to the sprint). In the context of this book, we have chosen
to adopt the terminology sometimes employed on discussion forums relating
to the Scrum method: pre-sprint.
Figure 2.3. Position of the pre-sprint in a release
This pre-sprint phase is intended, amongst other things, to “set up the
team, define the vision, and produce an initial backlog” [AUB 10] and to
acquire new knowledge [KEI 10]. It will be greater or lesser in length,
depending on the maturity of the product to be developed. “Obviously, more
time is needed in the case of the first release of a new project, based on a
new technology, than for its nth release” [AUB 10]. Depending on the
precision of the request made by the PO, this preliminary phase may involve
taking account of the items from the product backlog proposed by the PO, as
this may necessitate a work of identification and description of the items in
the product backlog, most often in the form of “user stories”. A “user story”
is a function which lends added value to the user of the system [COH 09]. It
is described from the point of view of the end user, without going into the
technical considerations or issues of ergonomic design.

12
User-Centered Agile Method
Taking account of the phase preceding the release planning meeting also
brings another element of reflection: the PO is not alone, and may be
surrounded by participants who may be arranged into a team. J. Sutherland
and K. Schwaber, in their latest description of Scrum, specify that “the
Product Owner is a person – not a committee” [SCH 11]. On the other hand,
the PO may surround himself with all sorts of people in a committee, to
enrich and inform his thinking process, but it is ultimately the individual
person, the PO, who will take the final decision and who will bear the
responsibility for any decision taken. Thus, for C. Keith and K.S. Rubin, the
PO is not alone in putting in place the items in the product backlog: he is
surrounded by users or their representatives and numerous professionals
involved in the project (a marketing research expert, a business-case
development analyst, a User eXperience (UX) designer, a systems architect,
etc.) [KEI 10; RUB 12]. For instance, in the world of digital games, the PO
could be surrounded by a publisher-producer, a marketing expert and a
studio leader (art, design and technique) [KEI 10].
Thus, the pre-sprint phase is often described in a more or less detailed
fashion as being the phase where one or more collaborative workshops take
place, with the aim of bringing a vision to the forefront, and on that basis, of
obtaining an initial list of items in the form of “user stories” for the product
backlog.
2.1.3. Scrum method as a framework for the User-Centered Agile method
As pointed out by K.S. Rubin [RUB 12], each implementation of Scrum
is unique, owing to the application of specific engineering techniques and
each company’s particular approach to Scrum practices. Consequently, in
order to properly understand the description of the UCA method given in
Chapter 4, we feel it important to properly specify our representation of the
Scrum method.
To begin with, we think it is important – as do many other authors – to
state categorically that there is a pre-sprint phase which takes place in
advance of the developments. The goal during this phase is to gather “user
stories” about the PO’s product. The phase can be carried out by a
multidisciplinary team attached to the PO, and involves the development
team. For the development phase, we adopt the classic description of Scrum:
an identically fixed duration for each sprint, delimited by four ceremonies.

Introduction to the Methods Employed
13
Figure 2.4. Representation of
the agile method, Scrum

14
User-Centered Agile Method
Figure 2.4 gives an overview of our representation of Scrum, showing:
– the PO, although we consider the icon given in Figure 2.5 to represent a
multidisciplinary team;
– the development team, comprising the “Scrum master” and the
developers. We have chosen to group these roles together, because the
description of the UCA method does not entail any change in the role of the
“Scrum master” attached to the development team (see Figure 2.5).
Figure 2.5. Representation of the roles of the PO and the development team
2.2. User-Centered Design method
User-Centered Design (UCD) is an approach to the design and
development of interactive systems. The process is guided by knowledge of
the end users, their contexts of use and their needs, with the aim of designing
systems offering usefulness, ease of use and well-being. It also draws upon
scientific knowledge relating to human-computer interaction (HCI). It seeks
to remedy the fact that “Constructing systems based on an inappropriate or
incomplete understanding of user needs is one of the main sources of
systems failure” [ISO 10].
This approach applies to the whole of the User eXperience – i.e. “the
experience the product creates for the people who use it in the real world”
[GAR 10]. Put more specifically, this experience results from the set of
perceptions, interactions or feelings that a user may have regarding a
product, a system or a service before, during and after use of the device. This
User eXperience (or “UX”) may relate to the experience of use in different
contexts, the emotional experience, the aesthetic experience, the experience
of customer support (purchase, installation, after-sales service, etc.), or to the
values which the user associates with the product, etc. Thus, the aim of UCD

Introduction to the Methods Employed
15
is to design products, services and systems which offer the user the most
positive experience possible.
This approach is applicable both for products and software, and both for
public audiences and professional situations.
The UCD approach is described in the norm ISO 9241-210 [ISO 10].
This norm describes UCD by way of six principles:
1. The design is based upon an explicit understanding of users, tasks and
environments.
2. Users are involved throughout design and development.
3. The design is driven and refined by user-centered evaluation.
4. The process is iterative.
5. The design addresses the whole User eXperience.
6. The design team includes multidisciplinary skills and perspectives.
According to this norm, UCD is a process which has four main stages,
and which is iterative on all or some of these stages, as illustrated by the
following diagram (see Figure 2.6).
Figure 2.6. The four main phases of UCD, based on the schema given in
ISO 9241-210 [ISO 10]

16
User-Centered Agile Method
The first stage is aimed at “understanding and specifying the context
of use” of the future system: one of the objectives is to collect information
about the pertinent characteristics of the future users (or groups of users)
in relation to the service needing to be designed: for instance, their skills,
their experience in the use of existing products, their physical characteristics,
etc. It is also a question of identifying the users’ objectives and the
characteristics of the tasks relative to the future system. Finally, the third
objective relates to the description of the environment (technical, physical,
social and cultural) or environments in which the future system will be used.
A variety of methods may be used during this stage, such as observation,
interviews, focus groups, etc.
The second stage consists of “specifying the user requirements”: these
requirements are constraints stemming from the context of use previously
described, and indeed from the knowledge or norms relating to the
ergonomics and the user interface. These requirements also relate to the
usability4 of the system in question, or they may be organizational in nature.
“User requirements provide the basis for the design and evaluation of
interactive systems to meet the user needs” [ISO 10].
The third stage consists of “producing design solutions”: on the basis of
the previous stages, the objective here is to define the user tasks in relation to
the system, the user-system interaction and the user interface. Depending on
the state of advancement, the design solutions devised can range from a
scenario to a prototype. They must be modified and supplemented as
evaluations are carried out.
The fourth stage consists of “evaluating the design”: this stage is essential
in the context of UCD. It must be instigated at the very earliest stages of the
project, and may continue in the long term even up until the actual usage of
the system by the user in their environment. According to ISO 9241-210
[ISO 10], “user-based testing” (hereafter referred to as “user testing” for the
purposes of this book) and “inspection-based evaluation” (carried out by
experts) are the two most frequently-employed approaches. The main
objectives of these evaluations are to continue to progress in the
4 Extent to which a system, product or service can be used by specified users to achieve
specified goals with effectiveness, efficiency and satisfaction in a specified context of use
[ISO 10].

Introduction to the Methods Employed
17
understanding of the users’ needs and to evaluate the extent to which the
design solutions conform to the requirements. The improvement points
identified during the evaluation serve to validate a solution which satisfies
the user requirements or serve as a basis for the design of the next version.
UCD is very widely used in ergonomics. According to the definition
given by the International Ergonomics Association5, “ergonomics (or human
factors) is the scientific discipline concerned with the understanding of the
interactions among humans and other elements of a system, and the
profession that applies theoretical principles, data and methods to design in
order to optimize human well-being and the overall system.”
The benefits of UCD are many and increase the Return On Investment
(ROI) [ISO 10]. Baccino et al. [BAC 05] offer a summarized view of these
benefits as: reduced costs in terms of development and user support,
improved productivity, satisfaction, safety, quality and learning, and finally
increased revenues.
2.3. User testing method
User testing is one of the techniques used as part of UCD (see the
previous section). This technique is essential in ergonomics, as it is useful
for evaluating the usability of the device by presenting the end user (or a
representative of the end user) with the device, on concrete terms. This
technique also enables us to continue to collect information about the use
context.
In the earliest phases of design, evaluations can be made on the basis of
simple screen sketches. These can be used to pick up on the shortcomings in
early versions and obtain feedback on the earliest design choices. Then, as
the design process advances, the prototypes will become more and more
functional. The objective then will be more to evaluate the extent to which
these prototypes satisfy the user requirements and the usability of the
solution. It should be noted that the prototypes, even if they can only be
partially functional, must be realistic (in terms of titles and content) from a
user’s point of view, and must not contain bugs, so that the user can gain a
5 Website of the International Ergonomics Association: http://www.iea.cc/.

18
User-Centered Agile Method
mental projection of what the actual, full use would be like. In no case
should user testing be taken to be a functional qualification test.6 Finally, on
commercialized versions of the product, user testing may be helpful with a
view to creating a new version.
User testing involves placing the participant in a situation of use of the
device by staging realistic scenarios – i.e. scenarios that are close to real-
world usage (see Figure 2.7). An example might be: “You have just moved
into a new apartment. You wish to install a telephone line. You are looking
on your telecommunication operator’s Website for information regarding
this service”. Each test is carried out on an individual basis, and lasts for
around
one and a half hours. The tests are generally recorded so as to
facilitate the task of data analysis. The participants in the tests must be
representative of the target audience.
Figure 2.7. Illustration of a participant undertaking a test scenario, whilst an ergonomist in
the control room observes and takes notes
With regard to the number of people who need to carry out this test,
recommendations vary within the existing body of literature, from between
five and fifteen. In practice, it tends to be 10 ± 2. For Nielsen and Landauer
[NIE 93], a cohort of five individual test users is sufficient to identify 85%
of problems with usability. In the eyes of Baccino et al. [BAC 05], 10-15
users, minimum, would be necessary for statistical calculations. Later studies
built on the results reported by Nielsen and Landauer, added certain nuances:
Faulkner [FAU 03], while he does not refute the above claim, adds that with
6 Functional qualification tests are intended to put actions in place which will verify whether
the product or system can deliver the performances required of it, and functions correctly in
the intended target environment.

Introduction to the Methods Employed
19
a group of 10 users we can be more certain of identifying 80% of problems
(95% with 20 users); for Woolrych and Cockton [WOO 01], this figure of
five users could be re-evaluated depending on the heterogeneity of the users,
the complexity of the tasks and the rigorousness of the test protocol. Yet it
must not be forgotten that the feedback from even a single user is interesting
and valuable (Nielsen and Landauer hold that a lone tester can identify on
average, nearly 30% of problems), because even this information can be
used as input for the task of improvement.
When drawing up the test protocol, the evaluator, who is trained in this
technique, should be familiar with the interface being evaluated and the
context of use for which it is intended. Thus, he is able to identify the critical
points which will serve as a basis for writing the scenarios, and is able to
design realistic scenarios for the user. He will then choose the data-
collection methods which are able to serve the objectives of the evaluation.
The norm ISO 16982 [ISO 02] gives an inventory of most of these methods.
The observation method is at the root of user testing, as it enables the
evaluator to gather objective data about behavior, performances, problems
encountered and paths taken during the test session. The measured
performance indicators might include, e.g. the time taken to complete a task,
the number of errors, the time taken to correct an error, the number of times
a user has given up on a task, etc. The technique of “thinking aloud” is
another essential method to use when conducting the tests. This involves
asking the tester to verbalize his thought process, either during the
realization of the scenario or once it has been completed. The objective of
these verbalizations is to obtain information about the mental processes at
work, and thereby to gain a fuller understanding of what is being or has been
observed. Questionnaires and interviews also are methods which are very
widely used during a test session. Thus, at the end of the test, the evaluator
can ask a set of questions in order to glean information about the general
impression (opinion, satisfaction, esthetics, etc.). Other techniques may also
be applied, such as “eye-tracking” or the collection of log files (these are
files which record the path taken by the user when interacting with the
system via the interface).
By analyzing the data collected from such user testing, we can identify
problems in usability, interpret them and go on to suggest avenues for
improvement.

3
Sources for this Work
For the purposes of our work on the construction of the User-Centered Agile (UCA) method, we
have collected data, analyzed these data carefully and made considered observations on the
basis of two different sources of data: a literature review and feedback gained from application
of the UCA method in the process of its elaboration. In the first section, this chapter offers a
state of the art on the schools of thought about the linking of User-Centered Design (UCD) and
agile methods. Then, a second section describes the pertinent points raised by the application
of the first version of the UCA method in projects. Finally, the third section presents those
elements which we deemed most important to take into account when devising the UCA
method.
3.1. State of the art
Research relating to the possibility of interlinking the UCD and agile
methods to provide a greater ergonomic value of the products developed is a
subject that has been under discussion since the time of E. Nelsen’s
interview of K. Beck and A. Cooper [NEL 02]. The topic of this interview
was the philosophical differences between the agile method eXtreme
Programming (XP) and interaction design, with the aim being to highlight
the points of consensus and the incompatible elements. This work reveals the
divergences in time and in the understanding of the professional roles, which
have an impact on the views of each of the two protagonists as regards the
organization of the process of group work.
In the wake of this discussion, many research projects have been carried
out in this domain. Of these, many highlight the relevance of bringing
together UCD and agile methods [BLO 05; CHA 06; MEM 07a; MEM 07b;

22
User-Centered Agile Method
AMB 08; HUS 08; FOX 10; SOH 10], on the basis of three common points
existing between the two methods:
– processes constructed on iterative cycles;
– the need to have regular feedback by way of tests (unitary or integration
tests versus user testing) in order to adjust the product to the requirements
identified [AMB 08; HUS 08; SCH 09];
– willingess to cater for the users’ needs. It should be noted, however,
that there is a difference here, because with UCD, the users are the end-
users, while with the agile methods, it is the product commissioner (called
the client) who indirectly represents the users [CHA 06; DUC 07; HUS 08].
This last point is important, because it enables us to highlight the value of
the UCD in agile methods. A product designed using agile methods may
satisfy a need, and be guaranteed to be correctly coded and work properly,
but this does not necessarily mean that it will be usable by the end-users,
because the usability will not have been assessed during the product’s
development [JOK 04; BLO 05; DUC 07; WOL 08; SCH 09; SOH 10]. This
point is stressed by T. Jokeda and P. Abrahamsson, who also show that, in
the context of the agile method eXtreme Programming, given that the
responsibility for usability is placed in the hands of the Product Owner – i.e.
the client – the integration of this value into the product depends on the
importance that the PO attaches to this approach [JOK 04]. The feedback of
H. Asuncion et al. [ASU 11] is an example of the confusion between the
product
client
(represented
by
the
PO)
and
the
end-users.
This
misunderstanding led the authors to create applications which were pleasing
to the client but held no interest for the end-users. We can conclude, as do
T. Memmel et al., that while agile methods are not user-centered methods,
they are a keystone for integrated approaches [MEM 07a; MEM 07b].
Although the points of overlap between these two approaches are many,
it is no easy task to bring them together in practice. For this reason, the
existing body of literature contains a great many articles putting forward
models for integrating the UCD approach with agile methods, comparative
studies leading to recommendations, and a large number of feedback reports
on experiments. The following sections describe several of these models,
and then introduces the elements which occur time and time again in the
recommendations made in the studies and feedback.

Sources for this Work
23
3.1.1. Existing models
In this section, we begin by presenting the model advanced by D. Sy
[SY 07], which is often cited in literature and which appears to be the most
widely-accepted model in industrial circles, according to [FOX 10], and the
best known according to [KOL 09]. We then go on to introduce four other
proposals for models which differ in varying degrees from D. Sy’s model.
Finally, we perform an evaluative comparison between these proposals, and
draw the balance between them.
In the interests of understanding the models on a common basis, we
propose to use the notation “UX team” (“User eXperience” team) to denote
any team comprising ergonomists, designers, graphic designers, etc., and
“UX expert” for a member of that team. Indeed, as the denominations1 in the
literature are numerous, we thought that to give a literature review that
retains the denominations used by the original authors would cloud the
readers’ comprehension.
3.1.1.1. D. Sy’s model
The model put forward by D. Sy [SY 07] proposes an iterative flow of
design and evaluation performed by a UX team, in parallel to the iterative
flow of the agile team. The process can be described as follows (see
Figure 3.1):
– cycle 0: in cycle 0, data are collected that relate to knowledge of the
background of the users, in order to create a vision of the product needing to
be designed which is shared by the two teams on the project. These data are
obtained by way of interviews, observations, inquiries, and contribute to the
construction of personas (profiles for fictitious characters used for product
design) and scenarios. The length of this cycle depends on the type of project
in question. However, the allotted time is counted in terms of weeks rather
than months.
1 UI (User Interface) designer, UI team, UCD (User-Centered Design) specialist, UCD
expert, UCD member, UCD team, usability expert, usability designer, usability practitioner,
usability engineer, HCI (Human-Computer Interaction) expert, HCI specialist, UE (User
Experience) expert, UEX (User EXperience) practitioner, UX (User eXperience) practitioner,
UX team, User eXperience team, user interface designer, interaction designers, etc.

24
User-Centered Agile Method
– cycle 1: the UX team designs prototypes which relate to the items of the
product, which will be coded in cycle 2, iteratively with the involvement of
users internal to the company. In parallel to this, the team carries out
research about the end-users in order to refine the available knowledge about
their behavior towards the product, for design elements which will be
implemented during cycle 3. Meanwhile, the development team codes the
elements which do not relate to the product’s Human-Computer Interface
(HCI), because this is still in the process of being designed.
– cycle n: the UX team designs prototypes which relate to the items of the
product, which will be coded in cycle n+1, iteratively with the involvement
of users internal to the company. In parallel to this, the team carries out
research about the end-users in order to refine the available knowledge about
their behavior towards the product, for design elements which will be
implemented during cycle n+2. In addition, they evaluate the functional
partial product created during cycle n–1, first with internal users and then
with end-users towards the end of the release, when the product is nearly
ready. Meanwhile, the development team codes the design elements
constructed during cycle n–1, for producing the functional partial product n.
The UX team can communicate with the development team to answer their
questions about the elements needing to be implemented.
Figure 3.1. D. Sy’s model [SY 07]
In order to facilitate the realization of design in iterative cycles of this
type, D. Sy points out that the design process needs to be broken down into
design items. This is done on the basis of the shared global vision devised

Sources for this Work
25
during cycle 0. Then, these design items are prioritized in such a way that
those elements which will not be greatly affected by the successive addition
of items will be dealt with first. These choices mean that the isolated
elements are designed first, so that at the start of the project, in the author’s
view, these choices make it difficult to carry out tests with internal users, and
impossible to observe end-users operating a functional partial product.
Finally, D. Sy points out that although the teams are separate, there has to
be communication between them on a daily basis in order to verify the
proper implementation of the design elements, and for the members of the
UX team to be able to stay abreast of the technical limitations of the product.
3.1.1.2. Other models
Rapid CD is a model put forward by H. Beyer et al. [BEY 04]. It stresses
the importance of a preliminary phase to lay down the basic design of a
product in advance of the developments, and for the development phase, the
authors suggest an iterative model similar to D. Sy’s own [SY 07]:
– thus, the first phase of this model describes ten activities focusing on
the user, which are to be carried out before development commences. The
first activities are aimed at gaining an understanding of the users on the basis
of interviews. On analysis of these interviews, it will be possible to
configure user roles for the product being designed, and to establish the list
of problems that need to be overcome. The objective of the subsequent
activities is to put forward solutions to these problems in the form of “user
stories”, which will be prioritized in conjunction with the whole of the
development team. Finally, during this phase, the screens relating to the
“user stories” which will be developed during the first iteration are designed
on the basis of prototypes evaluated by end-users;
– the second phase relates to the iterative cycles of development, and is
organized in the manner described by D. Sy [SY 07] – i.e. a development
team and a UX team working in parallel and in a staggered way. Similarly as
for D. Sy [SY 07], the screens are designed using mock-ups, tested by three
or four users; in this model, however, the users in question are end-users.
The functional partial products created at the end of the iterations are
evaluated, but apparently not regularly with each and every iteration.
T. Memmel
et
al.
put
forward
a
four-phase
model
[MEM 07a;
MEM 07b]. The first phase consists of determining the different users (roles)
targeted by the product, and the functional perimeter (scenarios) with the

26
User-Centered Agile Method
aim of obtaining possible visions of the product. This phase lasts no longer
than the demand analysis in the agile method eXtreme Programming, i.e. one
to three weeks; this limits the opportunity to perform in-depth research
regarding the users and their situation. The second phase is one in which the
design of the HCI and that of the technical architecture take place in parallel,
but with links still being preserved thanks to the scenarios created in the first
phase. In this second phase, the end-user can be proactive in the choice of
the design elements. In the third phase, development begins. This is the
classic approach of eXtreme Programming, whereby evaluations of the
product’s usability may be carried out on the request of the UX expert. The
end of the third phase corresponds to the end of the release, and the
development phase gives way to the deployment phase. In this last phase, the
finalized product is used by the end-users, who are likely to come back with
new demands or problems of design or usability. In this model, the UX team
is able to intervene as, and when, required, using ergonomic tools which are
simple, quick and relatively cheap to put in place.
The model devised by S.W. Ambler [AMB 08] is a model driven by an
agile model called “Agile Model Driven Development” – AMDD. In this
model, the UX expert is part of the agile team, and therefore must conform
to the pace of the method. In order for this model to work, S.W. Ambler
recommends that everyone involved make an effort to understand the
philosophy of one another’s disciplines, in the interest of being able to work
together. He also points out that the feedback relating to usability needs to be
taken into account in much the same way as a technical problem.
S.W. Ambler’s model is composed of:
– an initial phase (iteration 0) the aim of which is to construct a global
strategic vision on the basis of three elements: the representation of the
organization of the HCI, which corresponds to the structure of the user tasks,
a “map” of the organization of navigation through the system, and visual and
interactive elements intended to harmonize the entire system. In parallel to
this work, the development team determines the functional perimeter of the
release and studies the technical architectures that need to be put in place;
– a development phase in which the iterations take place. This stage
involves designing the screens and implementing them in the same iteration.
The HCIs are coded, as is every other part of the system, during the
iterations, without any prior in-depth study or pre-testing, apart from in
exceptional cases. However, S.W. Ambler stresses that it is important to

Sources for this Work
27
carry out user testing as often as the technical tests – that is, at every
iteration.
Xiong and Wang’s model [XIO 10] is interesting, because it places the
emphasis on UCD and does not separate the UX and agile teams. However,
these authors play down the agile methods in the sense that, in order to put
forward their approach, they separate the coding of the HCI from that of the
functional parts of the system. This is done with the aim of being able to
prolong the design time during the first iterations, without having to set aside
a longer preliminary period for information-gathering. This method is
broken down into four phases:
– the phase of researching the functionalities of the product, based on
studies of the end-users performed by way of interviews and questionnaires.
Once an initial list of functionalities and scenarios has been compiled,
the whole team comes together to work on a final version of the
functionalities of the product in a brainstorming workshop for new ideas.
At the end of this phase there should be consensus within the team as regards
the functionalities which need to be built into the product;
– the phase of design of the interactions of the system. This phase
produces a model for the developers and a paper prototype of the system’s
interaction for the UX experts. At the end of the phase, the prototype is
evaluated by UX experts and users in order to give feedback on problems
with usability before the commencement of the development proper;
– the phase of development of the core of the system. This phase takes
place in parallel with the finalization of the screens for the product, on the
basis of iterative evaluations performed by the team members (developers
and UX experts);
– the final phase, relating to the implementation of the HCI and its
integration with the system core. During this phase, user testing is performed
in order to detect usability problems and unearth new functionalities. These
new elements are integrated into the product backlog so they can quickly be
taken into account in the product under construction.
3.1.1.3. Evaluative comparison of the models
In a study dating from 2010, D. Fox et al. [FOX 10] present the results of
interviews with ten UX experts who have worked on projects combining
UCD and agile methods. The common points between these ten projects

28
User-Centered Agile Method
relate to the presence of a preliminary phase lasting around four weeks. This
is reminiscent of the models presented, in which there is indeed a first phase,
sometimes referred to as cycle 0 or iteration 0, which takes place in advance
of the developments and the aim of which is to glean information about the
user and their “context”. This phase is considered to provide a solid base and
a common vision which are necessary to envisage an appropriate design for
a system or service. Nonetheless, it usually only lasts as long as prescribed
by the particular agile method being used, i.e. between a few days and a
month, which we feel is insufficient in order to be able to apply UCD in an
optimal way.
Three out of the five models presented are based on an iterative phase
comprising interwoven flows, much like that proposed in [SY 07] (see
Figure 3.1). Two problems appear to emerge from this form of organization:
– according to D. Fox et al.’s study, the moment of document transfer
(i.e. exchange of design documents to be developed and partial products for
evaluation) between the two teams is not clearly defined in this type of
model [FOX 10]. Hence, this aspect may give rise to misunderstandings and
generate problems, unless communication between the two teams is clearly
established.
– this interwoven model implies that during an iteration review, when a
product n is delivered by the development team to the Product Owner, the
UX team presents them with the results of the evaluation of the partial
product n–1. However, between prototypes n–1 and n, some aspects of the
HCI may have been changed and the issues highlighted by certain results
may no longer be present. It seems to us that this may also give rise to
tension between the teams, as the UX team may find themselves in an
uncomfortable situation at every review, because they are presenting partly-
obsolete results.
In the different models, the end-users are involved at different times.
Mainly they are asked to pass comment on the paper prototypes, with the
aim of designing a first working version of the product. They are involved
less regularly for the evaluation of the functional partial products, unlike the
approaches put forward by [AMB 08] and [XIO 10]. Thus, not all the
attempts at integration, thus far put forward, properly take advantage of the
benefits offered by the agile methods, as they do not systematically evaluate
the functional partial products created at each iteration.

Sources for this Work
29
Amongst these models, the multidisciplinarity of the agile team is a
matter for some debate. Some models separate the two teams: the UX team
and the development team. Other models merge them to create only one
team.
3.1.2. Recurring elements between feedback reports
The literature has proved abundant in reports on attempts to interlink
UCD and an agile method. In the following sections, we present the points
which seem interesting to highlight.
3.1.2.1. Phase prior to development
The trickiest question regarding the marrying of UCD and agile methods
relates to the design done prior to the development phase. From the point of
view of agile developers, it is pointless to focus too much on the design of a
product, because the result of this design will inevitably be altered during the
development stage. Thus, in a great many works such as the models
presented in section 3.1.1.3, the members of the UX team have to adapt to
the pace of the agile process, which allows only very little time before the
commencement of the development stage. D. Fox et al. report from their
examination of ten projects that the UX experts had at the initial phase
before development to perform research about the user and create models in
order to deliver the functionalities and the screen layouts for the first
iteration. On the other hand, D. Fox et al. specify that the UX experts only
had between a few days and four weeks to bring this work to fruition
[FOX 10], which, as stated above, we believe unlikely to lead to an optimum
application of UCD.
However, the time given over to the phase prior to development relates to
elements of knowledge relating to the users and their context, which evolve
less quickly than do the elements of design of a system [BEY 04]. This
preliminary task is thus an investment and a solid basis for the design of a
system, which can then take place far more quickly [BEY 04]. Many authors
therefore highlight the need to have this preliminary phase under good
conditions. Thus, in the wake of their analysis of projects integrating agile
approaches with UCD, Chamberlain et al. also recommend giving the UX
experts the time needed to determine the user requirements before
development commences [CHA 06]. For D. Rosenberg [ROS 10], without

30
User-Centered Agile Method
this phase, the contribution of ergonomics and design is compromised,
because it can no longer bring any real added value to the product.
In order to have the time necessary for a study of the users and their
context, and to obtain a stable and solid vision, J. Kollmann et al. point out
that certain innovative projects need to be based on ethnographic research,
which it is appropriate to perform outside of the framework of agile methods
[KOL 09]. Similarly, D. Rosenberg in an article in the magazine “User
eXperience” makes a case for the need to have a phase of product definition
which is uncoupled from and precedes the agile phase, so as to facilitate the
study of the users and the creation of a detailed design [ROS 10].
Hence, this preliminary phase is important, because it enables us to
construct an overall view of the system or the product. Y. Xiong and
A. Wang underline that having a good design for the product from the start
also allows the developers to have a better view of the system in its entirety
[XIO 10]. J. Kollmann et al. recommend allowing time to construct a global
vision of the product to begin with before the development phase, in order to
share and understand the objectives of each of the interested parties:
technical, business and User eXperience. This shared vision should also
improve communication between the members of the project team, and serve
to prioritize the elements which need to be built in during the development
phase, and construct a solid base of what the Product Owner is looking for
[KOL 09].
In the eyes of M. Düchting et al. [DUC 07], it is risky not to have this
global view of the product. Indeed, the lack of a stable global vision leads to
an excess workload in terms of designing screen layouts, loss of direction
markers in relation to the products needing to be designed, and also increases
the time needed to finalize the product [KOL 09]. The UX experts do not
have the time to stand back in the iterations and to put forward a coherent
HCI as they do with a conventional project [BUD 09; KOL 09]. In order to
overcome this complication (loss of direction due to a lack of a global
vision), several articles suggest having an iteration that is regularly devoted
to the global coherence of the product [BUD 09; KOL 09].
It seems important to note a final point relating to the resources. It
appears that the more the UX experts have to march in step with the
developers, the less time they have in advance of the development phase to
carry out their work, and the greater are the resources which must be

Sources for this Work
31
available throughout the development period [ROS 10]. However, several
authors
[FED 09;
KOL 09;
ROS 10]
generally
note
problems
with
insufficient resources in projects. This indicates that the preliminary phase
was not long enough to compensate for the scant resources allocated during
the development phase.
We can conclude from these different points that most applications of
UCD in agile methods set aside only very little time in advance of the
developments to conduct research about the users and their context. Yet this
phase is crucial, and according to certain authors, the work could be done
outside of the agile period in order to bring a real added value to the project.
The important thing is that enough time be given to the UX experts during
this phase to construct a solid basis in terms of a global vision of the project
and of functional objectives, based on data gleaned from real-world users.
Having these elements means the UX experts have a better view of the work
needing to be done, which they can share with the rest of the team, support
the task of prioritization with knowledge of the users, and set out clear
objectives with the PO.
3.1.2.2. Involvement of end-users
As demonstrated by the results of three observations of projects in
[CHA 06], the end-users will be involved to a greater or lesser extent, if at
all, in the design and evaluation of a product. In addition, it is rare for them
to be involved repeatedly. Such is the case with the experiment conducted by
Z. Hussain et al. [HUS 08], wherein the users are involved at the beginning
of the process, to help create “personas” which will be used for the design,
and then only at the end of the project when taking part in user testing of the
finished product. Between these two extreme periods, the users are
represented by the UX expert but are not directly involved.
As we saw with the models in section 3.1.1, often, the users intervene to
evaluate the prototypes in the design stage before development. They are far
less regularly called upon to evaluate the functional partial products created
during each iteration. Indeed, when it comes to the question of regular user
feedback, this solution is not envisaged, owing to the costs that it could
generate [HUS 08; BLO 05], is rejected because it is deemed irrelevant
[DUC 07], or is considered when, at any given moment, the need is felt to
have an evaluation of the product done [BLO 05]. In any case, these user
evaluations are not clearly described in terms of number, frequency or of the

32
User-Centered Agile Method
management of the organization of this user feedback [BEY 04; BUD 09;
SCH 09; XIO 10; HUM 11], except by D. Sy [SY 07]. Nevertheless, as
stressed by H. Beyer et al. and S.W. Ambler, the agile methods guarantee a
functional product which can be used for the purposes of user testing at an
early stage in the process [BEY 04; AMB 08].
While the evaluation of the functional partial product by user testing is
not
widespread
during
the
development
stage,
the
application
of
“conventional” user testing at the end of the release is an element which is
mentioned by certain authors [DUC 07; HUS 08]. We also saw in [SY 07]
(see section 3.1.1.1) that the final round of user testing was carried out with
real users to validate the entirety of the product’s interactivity and interface,
and envisage new functions for the next release. Similarly, Z. Hussain et al.
[HUS 09] points out that during this final round of testing, the users may put
forward ideas for significant changes, which can then be implemented in the
next version of the product.
To conclude this section, throughout the existing literature, it is apparent
to us that end-users are regularly brought in to appraise prototypes in the
process of design, validating them before they are later developed. However,
the end-user is involved less systematically and less regularly when it comes
to evaluating the partial products resulting from the various iterations. Yet
having a product available – albeit a partial one, but still a functional one –
seems to us to be an invaluable contribution of agile methods, upon which
the development team can then base their work to turn the product into the
ideal final objective. We also believe that a final conventional test can not
only support the results previously obtained by way of user testing during
development, but also help to gain ground on what is lacking and the user
requirements which can be integrated into a later version of the product.
3.1.2.3. Positioning of the UX experts
The question of the position of the UX expert arises in most of the works
discussed here. In certain articles, the UX experts are brought together into a
UX team, working in parallel to the development team. In other articles, the
UX experts are integrated into the agile team. It seems, though, that in the
case of large organizations, large-scale projects require a team of various UX
experts (ergonomists, designers, graphic designers, etc.), so the UX team is
generally separate.

Sources for this Work
33
S. Chamberlain et al. [CHA 06] and D. Fox et al. [FOX 10] note that,
when the UX team is working in parallel to the agile team, there is a danger
of total separation between the two teams and consequent difficulties in
communication between them. Indeed, as the UX expert is not a part of the
agile team, he is often “out of synch” with the developers (see section
3.1.1.3). Furthermore, the fact of not being on the same team means it is not
possible for the professionals in their various fields to share their knowledge
in the interests of better collaboration. We can see an example in the article
[NAJ 08]. In this study, the lack of communication and of motivation to
include the UX experts on the part of the developers led to the production of
a piece of software which was barely usable, although it was turned around
within the allotted time. M. Najafi and L. Toyoshiba conclude that without
communication, there is a danger of misinterpretation of the specifications.
Also, communication is important and must take place through shared
activities and events, such as the sprint review or the results of the user
testing [NAJ 08]. Similarly, D. Sy [SY 07] makes the point that even if they
are separate, the teams must communicate on a daily basis and have regular
verbal exchanges in order to preserve the connection established. Besides
participation in shared events, to help the two teams come together,
J. Kollmann et al. recommend placing a satellite UX expert in the
development team, to facilitate communication between the UX team and
the development team [KOL 09].
In studies where the UX experts are present on the agile team, problems
relating to communication are not brought up. As pointed out by
J. Kollmann et al., the participation of the UX expert in the team from the
very beginning of the project facilitates an understanding of the roles and
working cultures of each individual, and thus minimizes the risk of
subsequent
misinterpretations,
thereby
enabling
better
collaboration
[KOL 09]. As also indicated by M. Najafi and L. Toyoshiba, and the fact of
carrying out activities together, the actuality that all the members of the
project team work together on the construction of the “user stories”, makes
for better integration of the UX expert [NAJ 08].
Besides enhanced collaboration, it appears that the presence of a UX
expert on the agile team brings other benefits as well. In [HUS 09], the UX
expert, although remote, is considered to be a member of the team. The
feedback is positive in terms of the team’s motivation and the inclusion of
usability evaluations at an early stage in the process. In [DUC 07], the UX
expert is also on the team. He ensures proper conformance with the

34
User-Centered Agile Method
specifications relating to the users from a global point of view. The presence
of a UX expert on the team ensures that efforts are focused on the users’
demands [NAJ 08]. Finally, the UX expert has a communication role,
passing messages orally on the basis of practical documents (prototype,
persona, etc.) instead of the specification documents [KOL 09].
With the exception of the article by L. Schwartz et al. [SCH 09], there are
few publications which discuss the implications for the UX expert of being a
part of an agile team – namely: participation in all team meetings, the UX
expert’s tasks are included in the task board, and the UX expert is in the
same place as the developers.
In summary, when the UX experts are in a separate team, it is essential
that good communication be put in place on the basis of regular shared
events, but also possibly by way of a satellite UX expert planted in the agile
team in order to form the relay between the two teams. If the UX experts are
a part of the development team, communication seems to be fluid, the values
relating to the user seem to be deep-rooted and shared by the whole of the
team, and more privileged collaboration can be set up, as work done in
common begins long before the developments, from the very beginning of
the preliminary phase. On the other hand, a UX expert forming part of the
development team must be prepared to conform to all the rules and to the
pace of the developers to deliver a product in due course to the product
commissioner. This may mean he is led to question and adapt part of some
of his practices during the developments so they fit into the working
framework of the agile method.
3.1.2.4. Viewing of the user testing by the development team
Certain works talk of the importance of having the developers on the
agile team watch the user testing. Z. Hussain et al. [HUS 09] specify that
when the team members see the tests, their opinion changes radically and
they become more sympathetic and sensitive to the problems encountered by
the users. H. Beyer et al. [BEY 04], for their part, indicate that when a
developer accompanies the UX expert during the user testing, his
understanding of the usability problems is thereby improved.
This point appears, for us, all the more important, as it affords a new
opportunity for the members of the project team to take part in shared events
in order to enhance their communication and share the same objective: to
create a product which satisfies the users’ needs.

Sources for this Work
35
3.1.2.5. Positive feedback on the marrying of the two methods
When, having taken part in an agile experiment, the members of the UX
team are asked how they feel about the experience, they tend to express
mainly positive sentiments in terms of the motivation and the engagement
experienced in order to achieve a goal shared between the whole of the agile
team [MCI 05; WOL 08]. Also, the members of UX teams who have worked
in an agile manner express a preference for this working framework over
their previous way of working [WIL 07; TZA 10; SY 07].
According to D. Sy, the UX teams who have taken part in an agile project
prefer to work in this way because the design is more in-depth than before,
and the investigation into the product’s usability can continue throughout the
duration of the project. In addition, as soon as a design has been put forward,
it is developed; no more are there weeks of waiting between design and
development. Finally, changes relating to usability can be made for the
current release rather than the next one. Similarly, the design which is
implemented corresponds to that which is put forward and which is
expected, because it can be monitored by the UX team throughout the course
of the project [SY 07].
One final positive element which is also highlighted in the experimental
feedback is the contribution made by the UX expert to the prioritization of
the items needing to be dealt with before and during the development stage
[NAJ 08; KOL 09; UNG 10; XIO 10]. This element is extremely important,
because this is the crux of the added value of UCD for agile methods: in that
it turns its attention to the end-users, making an effort to understand them
and use this understanding to guide the design of a product.
3.1.2.6. Need for a common working framework
In most of the works discussed here such as [AMB 08; WOL 08;
SCH 09; HUM 11], it is the UX expert who has to adapt to the agile
methods. In other words, as S. Blomkvist explains, the model chosen is the
integration of techniques relating to usability (simple prototyping, personas,
card sorting, heuristic evaluations, user testing, etc.) into whatever agile
method is chosen [BLO 05], i.e. the adaptation of these techniques so that
they can be used at the pace of the agile methods.
Yet we believe, as championed in certain works, that importance must be
given to the setting up of a working framework which integrates UCD and

36
User-Centered Agile Method
agile approaches in a balanced [BLO 05; MEM 07b] and coherent way
[CHA 06]. Thus, each of the two approaches retains its own benefits, and its
weaknesses are compensated by the other [BLO 05; HUS 08], and they
complement one another, forming a solid combination [BEY 04]. To this
end, S.W. Ambler proposes that each of the disciplines should have respect
for the other philosophies or techniques so that they can work together, with
both agreeing to make small changes [AMB 08]. It is with this philosophy in
mind that we decided to construct the User-Centered Agile method.
3.2. Feedback on application of the first version of the UCA method
Following the promulgation of the first version of our model [DEU 10]
on the company intranet, five projects wished to apply the principles of the
UCA method in contexts using the agile method, Scrum. We interviewed 15
people who had worked on these projects (five ergonomists, five project
managers and five members of agile teams). We found that:
– only in one project had preliminary research been able to be carried out,
while in three projects, the team was able to set up a global design before
development commenced. Thus, the findings of the interviews were fairly
unequivocal in terms of the need to have time in advance of the development
stage to come up with a global vision of the product. As we saw in the
previous section, this is a crucial element for the proper realization of a
usable product;
– the ergonomists had all been attached to the PO. Not a single one had
formed part of the agile team. The ergonomists had had little or no
involvement in the daily scrums. Thus, the feedback was that there had been
little communication between the team members and the ergonomist,
sometimes
leading
to
misunderstanding.
However,
as
noted
in
section 3.1.2.3, when the ergonomist is not a part of the agile team, it is
necessary to put extra means of communication in place in order to avoid
misinterpretations and minimize the faults of the product;
– three out of the five ergonomists had not taken part in the release
planning meetings. These ergonomists pointed out, however, that to do so
would have been a necessity in order to make the acquaintance of everyone
on the team, gain a proper understanding of everyone’s roles and avoid
misunderstandings as to the ergonomist’s contribution to the project;

Sources for this Work
37
– only one evaluating ergonomist was really able to carry out a regular
series of tests with end-users. Due to professional constraints, another
regularly sought input from end-users but on a remote basis, in a group and
with the aim of getting comments on the basis of the demonstrations of the
product. In both cases, application of regular user testing was considered as
bringing positive aspects to improve the service still in development stage?;
– for the ergonomist who had been able to carry out regular user testing,
who was not in the agile team, it proved important to have the time to
familiarize himself with the partial product delivered, before performing the
user testing;
– the developers were not always available to support the ergonomist in
preparing the user testing and ensuring its success. This meant the
ergonomist sometimes found himself in a difficult situation when faced with
real-world users;
– in spite of the feedback gained from the users, certain projects did not
properly take account of the ergonomic recommendations, which were not
seen as carrying as much weight as the technical modifications. In addition,
the choice of which recommendations to implement in the project was rarely
discussed with the ergonomist. Instead, the choice was made by the PO and
the technical project manager.
Besides these observations, we were able to detect positive feedback
regarding the participation of an ergonomist in projects employing the agile
method:
– the ergonomist has an important part to play in prioritizing the “user
stories” to be developed and in orienting the product, as seen in
section 3.1.2.5. He also provides support to the PO;
– the fact that the developers observed the user testing was constructive
and motivating, as previously noted in section 3.1.2.4. This strategy appears
to produce greater motivation in the team, better understanding of the users’
needs and thus better acceptance of the modifications which need to be made
to the product;
– the involvement of the users at a very early stage, by way of user
testing, helps to validate the principles behind the product and decrease the
risk of reworking or rejection of the product;

38
User-Centered Agile Method
– the developers pay more attention to the HCI in the product under
development.
3.3. Elements retained for the construction of the UCA method
Based on all of these elements (the state of the art and the feedback from
application of the method), we felt it relevant to try to correct a set of
shortcomings, and create a single method combining the most advantageous
elements, harvested from all of the publications presented in this chapter.
Thus, it was clear to us that this new method must:
– be a mutual integration of the two methods (UCD and an agile method),
rather than an integration of one technique into the other, which would result
in the integrated method losing its effectiveness by departing too far from its
fundamental principles;
– include a design phase, as conceived of in the UCD method, enabling
the team to set up a global vision on the basis of solid foundations, in
advance of the development stage;
– have an ergonomist to carry out user testing. This ergonomist would
need to form part of the agile team, so that he could monitor the evolution of
the product and adjust the test scenarios accordingly, so that the proper
realization of these tests would be an objective shared by all;
– involve every member of the project team having to be familiar with
everyone else’s roles and how everyone fits into the project, and everyone
having to be made aware of the methods being used (the agile method, UCD
and user testing);
– ensure that the work of the evaluating ergonomist is not one iteration
behind in relation to the development of the product; in other words the
product delivered needs to be the fruit of the work of the whole of the agile
team (the increment and the results of the user testing);
– specify that user testing be applied to the functional partial products
delivered during the process, with the aim of evaluation;
– perform regular user testing if possible at each iteration;
– strongly advocate the attendance of the developers during the user
testing sessions;

Sources for this Work
39
– be firmly rooted in the Scrum method in particular, in the interests of
being very precise in the sequence of events in the method.
On the basis of all these elements, we have developed the User-Centered
Agile method, described in the next chapter.

4
Description of the
User-Centered Agile Method
The User-Centered Agile (UCA) method is a method which mutually integrates User-Centered
Design (UCD) and the agile method – Scrum. This means that each of these two approaches
has to take a step towards the other and meet in the middle, so that each can retain its own
values whilst adjusting to the other, resulting in a balanced working framework, shared by all of
the members of a project.
The UCA method comprises three phases (see Figure 4.1). The design
phase conception, the first phase, is intended to produce a global view of the
product, though without going as far as to produce detailed specifications. It
consists of the mutual interlocking of UCD and the pre-sprint phase from the
Scrum method. During the development phase, the second phase, the aim of
the UCA method is to enable the ergonomist to continue to apply UCD by
way of mini-rounds of user testing performed regularly. Finally, in the
validation phase, the third phase, the UCA method recommends that the
“conventional” round of user testing at the end of the project be retained.
Figure 4.1. Global phases of the UCA method

42
User-Centered Agile Method
In order to provide a clear-cut framework for the UCA method, we have
decided to present it in the logical order followed by the agile method,
Scrum. Thus, our description of the UCA method begins with an
introduction of the roles, the ceremonies and the artifacts, before going on to
explain the step-by-step progression of the method.
Owing to the use of Scrum as the basis for the UCA method, we may find
in practice that certain problems appear to be caused by the UCA method,
whereas in fact, they result from an underlying incorrect application of the
Scrum method. The UCA method imposes other constraints on Scrum, and
therefore we feel it is essential to be vigilant in applying the Scrum method
as accurately as possible in the interests of the smooth running of the UCA
method.
4.1. Roles present
In section 2.1.2.2, we saw that Scrum presented three distinct roles: the
Product Owner team, the Scrum master and the scrum team. In the context of
the UCA method, we introduce three new roles (see Figure 4.2):
– the UX designer: the role of the User eXperience designer proposed
here may be held by an ergonomist, an interaction designer or a UX designer
in the normal sense of understanding.1 Similarly, this role may be filled by a
team of people composed of ergonomists, interaction designers or UX
designers depending on the importance and the nature of the project. The
task of the UX designer consists of studying the context, the environment
and the characteristics of the user beforehand, in order to design a product
which satisfies the user requirements identified. He is involved throughout
the length of the project to design the product. Depending on the projects, his
intervention can take place in either of two ways:
- primarily during the design phase (phase 1), for the global design of
the product, which in certain projects may yield an advanced mock-up. In
this case, the position of the UX designer will remain on the side of the PO,
because the majority of the work with regard to design will have been done
in phase 1. He will be less involved in the development phase (phase 2). His
1 Although all these people possess the requisite skills to act as a UX designer, they will bring
different approaches to the role, owing to their partly-differing theoretical backgrounds.

Description of the User-Centered Agile Method
43
role alongside the PO will consist of monitoring the product’s development
at the end of each sprint so as to verify that the choices of modifications
made to the product are consistent from a global viewpoint;
- during the design phase (phase 1), alongside the PO, to kickstart the
global design of the product, and then in the development phase (phase 2) to
go further with this design. During this second phase, the UX designer may
also form part of the agile team, with the aim of co-designing the product
along with all the other members of the agile team. On the other hand, the
fact of belonging to the agile team means there is no longer any clear
separation between design and evaluation, because both actions are
performed by members of the same team;
– the graphic designer: to begin with, the task of the graphic designer is to
look for graphic tendencies which could be appropriate for the product.
Then, in collaboration with the UX designer, the graphic designer works on
the design of the screen layouts for the product, throughout the length of the
project. Similar to the UX designer, he may find himself working on the side
of the PO or that of the agile team;
– the evaluating ergonomist: the evaluating ergonomist is a member of
the agile team, and his task is to continuously evaluate the product being
developed. He makes recommendations on the basis of user feedback. He
may take part in the global co-design of the product during the design phase,
but his role as an evaluator really begins when the first functional partial
product is received, during the development phase (phase 2).
Figure 4.2. The five roles involved in the UCA method
(in the case of the description of the UCA method,
the Scrum master also belongs to the development team)
4.2. Ceremonies
Scrum introduces five ceremonies which outline the progression of the
process (see section 2.1.2.2). There is a release planning meeting at the
beginning of the development phase. Then, during each sprint, we have the

44
User-Centered Agile Method
sprint planning meeting, the daily scrum, the sprint review and the sprint
retrospective.
In order to apply the UCA method, we have added three new ceremonies:
– introduction to the working method: as the name indicates, this meeting
is intended to familiarize the whole of the project team with the way in
which the project is to be undertaken. Following this presentation, it is
desirable for the presenter to ask everyone to come to the next meeting with
any questions relating to the organization of the workflow. If all those
involved have previously worked on the basis of the “User-Centered Agile
method”, this presentation may be considered as optional;
– mutual knowledge-exchange meeting: this consists of a second
exchange of questions that have arisen from the presentation of the UCA
method. The aim is to enable all the participants to gain a fuller
understanding of one another’s professional fields, to minimize concerns
which may result from the introduction of an evaluating ergonomist into the
agile team, and to get a clearer view of the way in which the team is to work
together;
– feedback meeting on the mini-user testing: this meeting of the entire
team at the end of the week of mini-user testing is important for everyone to
understand the users’ expectations and the problems which they have
encountered during the test sessions. Just as for M. Detweiler [DET 07], we
believe it important that this feedback be presented in front of the
development team and the PO team, so that all teams on the project possess
the same elements of knowledge. This will facilitate better apprehension of
the changes which will be made to the product in the wake of the ergonomic
recommendations made on the basis of the mini-user testing, and chosen for
integration into the product.
4.3. Artifacts
In section 2.1.2.2, we described the two artifacts proposed by Scrum: the
product backlog and the sprint backlog. In order to take account of the
recommendations or ergonomic adjustments thrown up by a mini round of
user testing, in the UCA method, we introduce the recommendations list as
an additional artifact. This list contains all the recommendations made by the

Description of the User-Centered Agile Method
45
evaluating ergonomist throughout the course of the various sprints, and
enables the team to keep track of these recommendations.
As the ergonomic recommendations will be more or less critical from the
point of view of usability, each recommendation may also be assigned a
criticality score (e.g. on a scale of 1 to 3: 1. essential for the understanding of
the service. 2. improves ease of use. 3. of little impact, but which does enrich
the service).
Following a mini round of user testing, these recommendations will be
evaluated (see Figure 4.3) to determine whether they are to be immediately
integrated into the product, rejected and not integrated into the current
release (for lack of budget, lack of time, questioning of the whole product,
etc), or whether they are put on hold (to be integrated into the next sprints,
not enough users having highlighted the problem, waiting for an injection of
money into the budget, or waiting for the user reactions in the next batch of
tests).
Figure 4.3. Distribution of the ergonomic recommendations
following discussion by the project team at the end of the
feedback meeting on the mini-user testing
D. Sy, in her article about her model for integrating UCD and the agile
methods [SY 07], proposes to use a board to keep track of usability issues
(see Figure 4.4), based on the model of the task board for the agile team.

46
User-Centered Agile Method
Figure 4.4. Board for keeping track of usability problems, devised by D. Sy [SY 07]
We feel it is important to use this type of board, as it helps to keep track
of the recommendations made throughout the course of the project, so as to:
– be aware of the status of all the recommendations (rejected, on hold, to
be integrated);
– follow through on the recommendations which need to be integrated;
– enable another evaluating ergonomist to quickly be brought up to speed
on the project, because on the board he can see the entire history of the
decisions taken.
In relation to the board put forward by D. Sy, we have made a few
alterations (see Figure 4.5). We have made these choices with the aim of
being able to follow the chronology of activities, i.e. categorize the
recommendations into three different statuses during the feedback meeting
on
the
mini-user
testing,
and
then
follow
the
evolution
of
those
recommendations which need to be integrated.

Description of the User-Centered Agile Method
47
Figure 4.5. Board for keeping track of the recommendations for the UCA method
Thus, this board is divided into five parts. Three of these can be used to
divide the recommendations stemming from feedback on a mini round of
user testing into “to be integrated”, “on hold” and “rejected”. The
recommendations “to be integrated” need to be applied to the product in the
current or next sprint, depending on where in the sprint the mini-user testing
occurs (this question will be discussed further in section 4.4.2.2). They will
be moved into the “integrated” box once the recommendation has been taken
into account in the product by the developers. They will be moved into the
“validated” box when the next mini round of user testing will not throw up
the problem which the recommendation was intended to resolve.
It is important to note that a recommendation is not the same thing as a
task. A recommendation may necessitate work in terms of graphic design,
ergonomics and integration to the application. For this reason, in addition to
recommendations written on “yellow” post-its, we have used different color
post-its to distinguish the tasks relating to the various professions (“blue” for
ergonomics, “pink” for graphic design and “green” for the development of
the product – see an example in Figure 4.6). Thus, a “recommendation” post-
it may be placed below several “task” post-its. For each recommendation
needing to be integrated, the “professional” tasks associated therewith are
placed on the task board, so typical of the Scrum method (when all the roles
belong to the agile team) or given to the different contributors (when roles
are in the PO team).

48
User-Centered Agile Method
Figure 4.6. Example of a recommendation divided into separate tasks
4.4. Progression of the method
With the fundamental bases of the UCA method now laid, in this section,
we describe the progression of the method, introducing in phase 1 (design)
the prerequisites which we deem important for the correct use of the method
in phase 2 (development). Then, in phase 3 (validation) we explain the
reasons behind the performance of a final “conventional” round of user
testing.
4.4.1. Phase 1: design of a global view of the product
4.4.1.1. Reason for retaining a phase of UCD
The norm characterizing the UCD method [ISO 10] clearly indicates that
having a design phase which includes the users prior to the development
phase helps detect the requirements in terms of usefulness and usability
(unidentified needs, an HCI which is not consistent and homogeneous, too
complicated a screen layout structure, etc), and thereby avoid having to
make drastic design changes during the development phase. Indeed,
detecting problems of usefulness and usability early on in the process avoids
subsequent significant changes in orientation which, were they to be applied

Description of the User-Centered Agile Method
49
during the development phase or later, would prove highly costly [MAR 02;
ISO 10].
The agile method Scrum also requires a preparatory phase before the
developments
commence
(which
we
can
call
a
“pre-sprint”
–
see
section 2.1.2.3). The development team, during the pre-sprint, works on the
elements made available to them to put in place the “user stories” in the
product backlog. However, this phase may not be sufficient for UCD to be
applied optimally (see section 3.1.2.1) because the research which is
indispensable for UCD requires more time than is usually allocated for a pre-
sprint.
Therefore, in order to facilitate the mutual integration of these two
methods, we feel it important, during this first phase, that the UCD approach
and the pre-sprint period interlock, thus enabling the UX designer at least to
come up with the architecture for a global view of the application
(information architecture, interaction system, dividing of the main screen
layouts into zones), the graphic designer to research and apply a graphic
ambiance on the elements of the HCI, and the developers to participate in the
task of design during the pre-sprint.
Consequently, what we advocate is that if possible, several iterations of
design take place during the design phase. Then, in the development phase,
the mini-user testing will focus primarily on the elements of usability which
are difficult to observe during the design phase (owing to the lack of an
actual product upon which to perform tests during this phase). In addition, as
the changes advocated on the basis of the user testing will be minimal, they
will be easier to negotiate and to take into account when adjusting the
product backlog.
4.4.1.2. Implication: interlocking of the UCD and the pre-sprint in two
stages
In order to couple the UCD and the agile method Scrum, a coming
together is needed, so that on the one hand, the development team can take
advantage of the preliminary research carried out, and on the other hand, the
UX designer can take account of the technical constraints in his design.
Therefore, we propose to divide this design phase into two stages. These
two stages are reminiscent of the arrangement put forward by A. Cooper in
[NEL 02], who explains that in the design phase there are two stages: the

50
User-Centered Agile Method
first in which the UX designer works closely with the user, and then the
second in which the UX designer collaborates with the developers and
passes on the baton for the product to them. Our two stages also have
common ground with the proposals advanced by J. Kollmann et al. and
D. Rosenberg – i.e. having a phase of research into the users and their
context before the agile process begins, followed by a collaboration of the
entire project team on the shared strategic vision of the product [KOL 09;
ROS 10].
These two stages are divided as follows (see Figure 4.7):
Figure 4.7. Mutual integration of UCD and the Scrum method in
two stages within phase 1 – design of a global view of the product
1. During the preliminary research stage, the goal of the UX designer is to
answer the following questions: Who are the users? What are their needs?
What are the environment and the context of use for this product?
Knowledge of these elements obtained on the basis of surveys and meetings
with the end users contributes to constructing the identity of the product
being designed. This research which can go as far as the construction of a
mock-up, are carried out by the UX designer on the PO team (see section
design of the
graphic elements

Description of the User-Centered Agile Method
51
4.1). It should be noted that this period is also used by the other members of
the PO team (including, amongst others: the technical architect, the graphic
designer and the marketing person) to study the issues raised by the project.
This preliminary period is therefore a period when each of the professionals
enhances their skills in terms of the topics stemming from the issues of the
project, which leads to an efficient design during the second stage of this
phase.
2. The pre-sprint is intended to enable the UX designer to implement the
UCD method by putting in place design workshops including both the PO
team and the agile team (the “evaluating” ergonomist and the developers)
assigned to the project. These workshops help to refine the functional
boundaries and the “user stories” which will serve as a basis for the product
backlog. Furthermore, they enrich the thinking of the UX designer and the
graphic designer in creating the screen layouts for the product. Finally, as
specified by Y. Xiong and A. Wang, this kind of workshop ensures that all
the participants in the project share the same understanding of the “user
stories” that are to be developed [XIO 10], and a common vision. At the end
of the pre-sprint, the description of the HCI may be more or less complete
depending on the type of project, but must be sufficient to:
– help prioritize the functions at the release planning meeting;
– offer a global view of the product, throughout the development phase,
upon which to base the detailed design of the screen layouts;
– enable the development of an initial functional partial product for
phase 2 (development).
In order to explain more clearly what we mean by having “a global view
of the product” before commencing with the development phase, we propose
to use the schema advanced by J.J. Garrett (see Figure 4.8), which presents a
model of UX design based on five levels. Each level highlights a particular
aspect of the design in order to deal with issues of usefulness and usability.
The levels occur one after another, becoming increasingly concrete,
beginning with the “strategy” level, which defines the user requirements and
the objectives of the product, up to the “surface” level, which deals with the
visual and sensory aspects of the rendering of the product. Between these
two levels, there are three levels which help to progressively construct the
interaction system and the interface of the product, on the basis of the
requirements and objectives set at the “strategy” level:

52
User-Centered Agile Method
– scope: this level corresponds to the description of the objectives and
requirements
in
the
form
of
functional
specifications
and
content
requirements;
– structure: this level is used to describe the system’s behavior depending
on the user’s actions, and of the way in which the data will be channeled to
the user. In other words, this level represents the operation of the system;
– skeleton: this level relates to the screen layouts of the product and to the
organization of HCI elements.
Figure 4.8. The Elements of User Experience [GAR 10]
In this referential framework, having a global view would mean, first and
foremost, that the design had been able to be carried out entirely, up to the
“structure” level. This corresponds to the first three levels in Garrett’s
model, which, in his own words, “are the elements that are the hardest to see
[and] play the most important role in the overall success or failure of the user
experience” [GAR 10]. On the other hand, in order to remain faithful to the
agile logic, the functional specifications produced on the “scope” level
should not be detailed. Finally, this global view would mean that the
organization of the screen layouts had been able to be sketched roughly

Description of the User-Centered Agile Method
53
(at the “skeleton” level), and finally that the desired graphic and design
ambiance elements had been able to be validated on a number of key screen
layouts (“surface” level).
It is very difficult to evaluate how much time is needed for each of the
two stages. Depending on the projects, the preliminary research stage will be
of greater or lesser length in the case of an innovative project, and may be
non-existent in the case of a second release, for instance. Similarly, the
length of the pre-sprint will depend on the level of detail of the product at the
start of the release/at the start of the pre-sprint (a pre-existing mock-up or
prototype, or a mere idea for a product), and on the level of efficiency of the
agile team. An agile team whose members already know one another well
and whose working environment is already well established will require less
preparation than a new team in the process of being set up. Thus, it will be
down to the PO, at the very start of the project, to determine whether or not
both stages are necessary, and how much time to allocate to each of them.
Beyer et al. [BEY 04] also highlight the fact that the amount of time needed
for the realization of the design phase depends on the type of project.
It should be noted that during this first phase of design, the UX designer
has various types of tools at his disposal (the following list is by no means
exhaustive):
– to identify and familiarize himself with the users, their uses, their needs
and the objectives targeted by the product: observations, interviews, surveys,
focus groups, creative sessions, personas, etc.;
– to put a common vision in place: the “elevator statement” technique;
– to identify the user stories: user story mapping, as described in
[PRU 06]);
– to design a global view of the product: creative sessions, workshops
involving the entire team, user testing, individual interviews, prototyping
tools (either paper or software based), DFSS method workshops (DFSS
stands for “Design For Six Sigma”, in the “defining” phase), the “design
studio” method, for which positive feedback is offered by [UNG 08], etc.
Whether on the side of the developers or of the evaluating ergonomist,
the pre-sprint stage is also intended to put the “working tools” in place. The
developers make choices regarding the working environment, and prepare

54
User-Centered Agile Method
the development platform. As for the evaluating ergonomist, he takes this
time to prepare all the tools and methods which will be applied in the mini
rounds of user testing during the sprints: user recruitment, evaluation
criteria, test protocol, establishment of scenarios, informing the developers
of the elements which need to be included in the first partial product for the
purposes of the mini rounds of user testing, etc.
At the end of the pre-sprint, just before development begins, the release
planning meeting takes place in order to finalize the priorization of the user
stories and divide them into sprints.
Figure 4.9. Crucial elements in phase 1 – design of a global view of the product
In the wake of this planning meeting, all the elements which are needed
to undertake the development phase should be in place (see Figure 4.9):
– the product backlog with the user stories prioritized;
– the technical architecture envisaged;
– a functional development environment;
p h a s e
1 ,
design of a
global view
pre-sprint
Scrum
p h a s e
2 ,
agile development
information architecture and
interaction design
release planning
meeting
general attendance
workshops: user stories
design of the HCI
design of the graphic
elements
preparation for the
development phase
preparation for the
user testing
product backlog
global technical architecture
outlines of the organization
of the screens
visual design (ambiance and
graphic elements) validated
screens for sprint 1 finalized
User-Centered Design

Description of the User-Centered Agile Method
55
– the information architecture and the interaction design determined for
the whole of the product;
– the general organization of the screen layouts roughly drawn up and the
graphic elements validated;
– the screen layouts involved in sprint 1 finalized (in terms of their
organization and graphic design);
– participants recruited for the mini-user testing, and an initial version of
the protocol for the mini-user testing in place.
4.4.1.3. Implication: mutual familiarity
Figure 4.10. The first two ceremonies: introduction to the method and mutual
knowledge-exchange meeting
Another implication of the mutual integration of the two methods is the
necessity for multidisciplinary work. In order to facilitate this work, it is
necessary that the actors involved be identified and get to know one another
from the start of the process, so as to be able to work together on a product
effectively, and avoid communication difficulties which place everyone on
the defensive, barricaded behind their own profession [CHA 06; KOL 09].
J. Kolmann et al. [KOL 09] also indicate that the ergonomist must
understand the philosophy of the agile methods in order to integrate himself
properly into the team and become a driving force in this participation. With
the aim of preserving equality between the professionals, it seems to us that,

56
User-Centered Agile Method
conversely, the developers ought to understand the implication of a regular
realization of user testing during the sprints.
Thus, it is at the start of the project and of the pre-sprint that the first two
ceremonies take place: namely the introduction to the method and the mutual
knowledge-exchange meeting (see Figure 4.10).
The idea here is to form a tightly-knit team from the very start of the
release, and avoid the evaluating ergonomist only being called upon at the
beginning of the development phase, or the development team not taking
part in the design process. These two meetings enable one and all to:
– become familiar with everybody’s roles and how exactly they fit into
the project;
– understand what exactly UCD is (see section 2.2) in relation to the need
for a global view and preliminary work;
– understand what the user testing is (see section 2.3). Indeed, the
development constraints for user testing are not the same as those for
developments intended for a demonstration. In the case of user testing, the
constraints are stronger, because the product presented in user testing must
exhibit a coherent whole from the point of view of the user. Also, as
indicated by M. Detweiler, we have to avoid a situation where too unstable a
code prevents the user testing from being carried out [DET 07];
– understand what the agile method is (see section 2.1): developments on
regular cycles, a sustained rhythm, delivery of a functional product at the
end of each cycle, adjustment of the product backlog at the end of the cycle,
etc.;
– share the taking into account of the constraints imposed by user testing
when prioritizing the functionalities. Indeed, with the agile method, the
distribution of the functionalities is determined in terms of the functions
which are useful from a marketing point of view. During this process of
prioritization, account also needs to be taken of the fact that the iterative
rounds of user testing are performed from the point of view of usability, and
therefore require there to be a functional partial product on which it is
possible to execute coherent scenarios;
– adhere to the method and truly heed the users’ feedback.

Description of the User-Centered Agile Method
57
4.4.1.5. Essential elements for phase 1
outlines of the organization
of the screens
research of new technical architectures
to be implemented
Figure 4.11. Diagram giving an overview of phase 1, which entails the design of the product from a “global”
perspective, with the introduction of a preliminary research stage before the pre-sprint, if need be

58
User-Centered Agile Method
In closing this section, Figure 4.11 gives an overview of the essential
elements for phase 1 – design.
4.4.2. Phase 2: development
The development phase, for the agile team, consists of creating the
product whose global design has been devised in phase 1 (functionalities of
the product backlog and global design of the HCI) and whose design now
needs to be perfected on the basis of regular feedback from the PO team and
the end users.
4.4.2.1. An agile team
In the context of the UCA method, the agile team is made up of a Scrum
master, an evaluating ergonomist and developers, whose aim will be to
create a product which conforms to the request of the PO and the feedback
obtained from the users.
By definition, the agile team is organized so as to be able to work in a
way which suits its members, whilst conforming to the basic rules of the
agile methods. In order to apply the method presented herein, it is important
that certain fundamental points of the agile methods be respected – e.g.:
– the division of the development period into regular iterations, in order
to have a fixed schedule for the mini-user testing. As users have to be
recruited for these rounds of testing well in advance, it is important for this
schedule not to change. Working on the basis of determinate iterations
means it is possible to set the schedule in stone from the very start;
– the prioritization and distribution of the user stories at the start of the
project across the set of iterations, making it possible to anticipate coherent
test scenarios on the basis of the global vision. However, it is clearly
understood that adjustments may be made at each sprint review on the basis
of the direction in which the PO chooses to go in view of the state of the
product;
– delivery, at the end of each iteration of a functional product, so that this
partial product can be tested with end users. It must be remembered that the
user testing does not constitute a functional qualification test of the product
(see section 2.3);
– adjustment, if necessary, of the product backlog and sprint backlog at
the end of each sprint, in order to take account of the modifications

Description of the User-Centered Agile Method
59
requested by the PO team, but also of the user feedback at each stage of the
product’s development.
The peculiarity of this UCA agile team is that it includes an evaluating
ergonomist. The inclusion of this evaluating ergonomist as a member of the
agile team involves his being familiar with the Scrum methodology,
participating in all the Scrum ceremonies (daily Scrum, sprint planning
meeting, sprint review and sprint retrospective), and forming part of the agile
open space.
Thus, every day, the evaluating ergonomist takes part in the daily scrum.
This ceremony is all the more important for the evaluating ergonomist, as he
is not involved in the same tasks as the developers, and therefore has
considerably less interaction with the rest of the team on a daily basis. For
the evaluating ergonomist, therefore, the daily scrum is an important
opportunity to stay abreast of the evolution of the product and anticipate
adjustments to be made to his testing scenarios.
Each sprint begins with a sprint planning meeting. This ceremony affords
the team the opportunity to break down the user stories into tasks needing to
be performed in order to achieve the objective of the particular sprint. As the
evaluating ergonomist is a part of the agile team, he contributes to the
objective of the sprint. Because of this involvement, his tasks (revision of the
testing scenarios, monitoring of the user recruitment, preparation of the
testing room, etc.) need to be integrated into the task board (see section
2.1.2.2). Thus, the developers are aware of where the work of the evaluating
ergonomist is up to, and vice versa, and thereby their collaboration and
shared work is enhanced.
In closing on this point, the evaluating ergonomist also takes part in the
sprint retrospective and contributes to the adjustment of the working
methods of the agile team. Indeed, it is important for everyone to be able to
express an opinion on the best way to efficiently work together – particularly
during the mini rounds of user testing.
4.4.2.2. A progressive final design
As we saw in the literature review (see section 3.1.1), the existing
techniques for integrating agile methods and UCD include design during the
development phase. The team of designers often works in parallel to the

60
User-Centered Agile Method
agile team, or indeed sometimes within the agile team, but always at least
one sprint ahead in terms of the part needing development. The UCA method
preserves this logic of the designers being one or more sprints ahead of the
corresponding development sprint. Conversely, with this method, the global
design of the product has been created to a fuller extent during phase 1, the
design phase, prior to the development phase. Hence, during a sprint, the UX
designer and the graphic designer finalize the HCI to produce the screen
layouts necessary for the next sprint (see Figure 4.12). This solution means
the team of UX designers will have a global view of the product at all times,
and thereby avoid being overloaded with work during the development
phase, which would hinder the whole of the Scrum process or might lead to
an inappropriate design.
In order to design the HCI of the product, the UX designer can use
prototyping tools in order to validate his solutions with the end users. He can
also implement a method such as RITE (Rapid Iterative Testing and
Evaluation) which involves designing a prototype and rapidly testing it with
around a dozen users, taking the liberty of making adjustments to the HCI
between the contributions of two participants if obvious problems of
usability arise. The work by Douglass and Hylton gives good feedback on
the use of this approach, and recommendations about its use in order to get
the best possible results [DOU 10].
As each sprint includes a mini round of user testing, recommendations
stemming from these tests may call the proposed design into question. If this
happens, the UX design team (comprising the UX designer and the graphic
designer) must integrate the recommendations which need to be taken into
account both in the screen layouts currently being finalized which are needed
for subsequent sprints, and in the existing screen layouts. Thus, it is possible
for UCD to continue whilst the screen layouts making up the HCI are fine-
tuned during the development phase.
As we saw in section 4.1, the UX designer and graphic designer may
either belong to the PO team or to the agile team. If on the agile team, as
indeed is true of the evaluating ergonomist, they would take part in all the
ceremonies and follow the same Scrum rules as the other members of the
agile team.

Description of the User-Centered Agile Method
61
Figure 4.12. Logical flow of the design process during
phase 2 of the UCA method – the development phase
4.4.2.3. Mini-user testing during each sprint
The primary role of the evaluating ergonomist on the agile team is to
evaluate the product with users in order to detect any usability problems.
In order to evaluate the product, the evaluating ergonomist will carry out
mini rounds of user testing. These mini-user tests are different from so-
called “conventional” user testing only by virtue of the number of users who
participate. Apart from this aspect, just as for any round of user testing, it is
necessary to prepare a protocol which includes – amongst other things –
scenarios, questionnaires and analytical grids.
In the UCA method, we wish to stress the importance of teamwork.
Therefore, we would have the task proposed in the sprint review performed
by the whole of the agile team (the developers and the evaluating
ergonomist). Thus, we want to avoid a gap between the results of this task,
as happens with models based on D. Sy’s method [SY 07] (see Figure 4.13).
Indeed, in these models (see section 3.1.1), the evaluation of a product n is
performed throughout the duration of a sprint. Therefore, at the sprint
review, the development team delivers and demonstrates version n+1 of the
product, whereas the UX team is presenting the results of the evaluation of
version n. These results may no longer have any meaning in relation to the
new functional partial product n+1.
p h a s e
2 ,
agile development
sprint 1
sprint 2
sprint n
Scrum
sprint-based development
design of HCI for
sprint 1
design and
alteration of HCI
design and
alteration of HCI
U
testing
U
testing
U
testing
User-Centered Design

62
User-Centered Agile Method
Figure 4.13. Model showing a lag between the evaluations offered of
the functional partial product and the partial product delivered at the sprint review
Therefore, in order to avoid this issue, one solution is to perform a short
round of user testing during the sprint so as to facilitate the running of the
tests
and
the
integration
of
recommendations
during
a
sprint
(see
Figure 4.14).
Figure 4.14. Organization of the UCA method with the aim of achieving a
task common to the whole of the agile team at the sprint review
However, in order to have short rounds of user testing so as to reduce the
time needed to analyze the results, it is crucial to reduce the number of
participants in these tests. It is this reason which led us to opt for mini
rounds of user testing, based on four to six participants. Furthermore, we
propose that half of these participants be involved at each cycle in order to
evaluate the modifications made and prevent a regression. The rest,
meanwhile, will only take part in one test in one sprint, to vindicate the tool
in terms of how simple it is to learn to use, at each iteration.

Description of the User-Centered Agile Method
63
This proposal of mini-user testing is based on the work of J. Nielsen
[NIE 00; NIE 12], who holds that five separate users will be enough to detect
85% of problems with regard to a product’s usability, for a good quality-to-
cost ratio [NIE 93]. Furthermore, he points out that three rounds of user
testing with five people have more merit than one test put to fifteen people.
Indeed, the more rounds of user testing are carried out on a product, the
more in-depth will be the evaluation of the structure of the product.
Thus, we propose that the evaluating ergonomist should have a week to
evaluate the functional partial product and produce main recommendations.
During the testing week, the evaluating ergonomist would carry out (see
Figure 4.15):
– one day of evaluation to familiarize himself with the product, and revise
the scenarios prepared during phase 1 on the basis of the functional product
actually delivered. This day will require him to work alongside one or more
of the developers in order to:
- understand where the bugs in the code may be, and become aware of
the limitations of the partial product,
- adjust the interfaces (wording, spelling, consistency, etc.) so they
correspond to the description of the scenarios,
- adjust the test scenarios, or do away with certain scenarios if the
developments needed for their realization by real-world users cannot be
made during that one day with the developers. The evaluating ergonomist
should not forget that any scenario which is not tested during the current
sprint can be tested during the next sprint;
– approximately two days of testing with four to six real-world users;
– approximately a day-and-a-half of analysis and formulation of the main
recommendations;
– half a day on a feedback meeting on the mini-user testing and
discussion about the product and sprint backlogs regarding the integration of
recommendations. This half day of presentations of the results takes place in
front of the whole of the agile team and the PO team as well.
In the wake of this presentation, each recommendation is discussed in
order to determine which of them will be integrated into the product, which
will be placed on hold to be dealt with during subsequent sprints, and which

64
User-Centered Agile Method
are rejected and will definitely not part of the release. It is important for
everyone to take part in this feedback meeting so that:
– the developers understand the modifications that need to be applied on
the basis of the user feedback;
– the evaluating ergonomist understands the choices made as regards his
recommendations, and in particular, the reasons why some of them are not
taken into account.
Figure 4.15. The stages of a week of mini-user testing, finishing with a
presentation of the results involving the whole of the project team and
culminating in the selection of which of the recommendations to integrate
It is important to ensure that the feedback meeting on the ergonomic
work is always scheduled and is considered to be of equal importance to the
sprint review. This is so that a balance of power is maintained between the
ergonomist and the developers [CHA 06], and to prevent the user feedback
from being dismissed out of hand.
We also recommend that the members of the project team (the PO and his
team, the Scrum master and the developers) regularly come to watch the
sessions of the mini-user testing. This will help them to better understand the
problems encountered by the users, and therefore look more favorably on the
requests for modifications conveyed by the recommendations.
The inclusion of these mini rounds of user testing inevitably involves
certain infractions on some of the rules of Scrum. Therefore, there are three
ways of approaching our method whereby the product can benefit from the
feedback of the end users whilst retaining an agile logic:

Description of the User-Centered Agile Method
65
1. The mini-user testing takes place at the start of a sprint. This means
that modifications (those which stem from the recommendations) can be
decided upon during the course of the sprint. The result of this is that the
sprint backlog cannot be completely fixed at the start of the sprint, but
estimated only. It will be concretized at the end of a week, following the
feedback meeting on the mini-user testing, because at that point it will be
known which modifications are to be taken into account. However, this goes
against the general rule of Scrum whereby the sprint backlog should be set in
stone in the sprint review. Yet K. Schwaber and J. Sutherland leave open the
possibility of refining and renegotiating the content of the sprint in the wake
of new knowledge [SCH 11];
2. The mini-user testing takes place at the end of a sprint. This requires
the version to be delivered to be completed a week before the end of this
sprint, and therefore the developers to finalize the functional partial product
during the course of the current iteration rather than at the end. During the
last week of the sprint, the developers continue to develop that which has
been validated in the sprint backlog. However, the user stories developed
during this period will not form part of the elements which are delivered and
demonstrated in the sprint review at the end of the sprint. Hence, this is in
contravention of the Scrum rule, which holds that everything written into the
sprint backlog should be realized and presented at the end of the sprint;
3. The mini-user testing takes place during an inter-sprint period. This
implies that the sprints be intercalated by a period of one week. This breaks
the Scrum rule which specifies that all the sprints should be identical and
should follow on directly from one another. Indeed, as this week between
sprints is not of the same duration as a sprint and the members of the agile
team cannot perform the same activities as during a sprint, it cannot be
called a “sprint”, and therefore, the task of the developers during this time
cannot be the development of the product.
Each of these three cases has its particular advantages and disadvantages,
in our view. For this reason, as no two agile teams are quite the same, the
team itself will decide on which Scrum rule to break in order to be able to
integrate the user feedback. This choice must be made at the end of the
mutual knowledge exchange meeting, i.e. at the beginning of the pre-sprint
(see section 4.4.1.3).
In the following sections, we shall describe the progression of a sprint
using the method in the three cases mentioned above.

66
User-Centered Agile Method
4.4.2.4. Mini-user testing at the start of the sprint
Figure 4.16 gives a schematic illustration of the progression of a sprint
when the mini-user testing takes place at the start of the sprint.
Figure 4.16. Progression of a sprint when the user testing takes place at the start of the sprint
We have pointed out previously that as the evaluating ergonomist is part
of the agile team, he takes part in the daily Scrum (see section 4.4.2.1).
Each sprint begins with a sprint planning meeting, attended by the
evaluating ergonomist (see section 4.4.2.1). Following the sprint planning
meeting, the developers begin developing the product on the basis of the new
user stories which need to be developed. In parallel, the evaluating
ergonomist commences the week-long period of mini-user testing (see
previous section). He has at his disposal the partial version of the product
obtained at the end of the previous sprint, which he will evaluate and
produce recommendations upon the basis of analysis of the data collected.
During the feedback meeting on the mini-user testing, some of these
recommendations will be taken into account in the current sprint (written
into the sprint backlog), others placed on hold and others rejected (see
section 4.3).
During
the
second
part
of
the
sprint,
the
developers
continue
developments on the user stories decided upon for the sprint, and integrate
the recommendations retained and written into the sprint backlog at the end

Description of the User-Centered Agile Method
67
of the feedback meeting on the mini-user testing. The evaluating ergonomist,
for his part:
– offers support to the developers by explaining his recommendations;
– makes adjustments to his scenarios for the next sprint, on the basis of
those functionalities which will realistically be able to be developed during
the sprint.
At the end of the sprint, the sprint review takes place, with the
involvement of the whole of the project team. The agile team makes a
presentation to the PO team on the current state of the product. The PO
formulates his assessments, remarks and modifications which may have
implications for the product backlog and, therefore, for the remaining sprint
backlogs.
In this proposal, at the time when the partial product is delivered during
the sprint review, the evaluating ergonomist has not yet evaluated it. The
sprint backlog which will be discussed can, therefore, not be finalized,
because the recommendations to be integrated in the current sprint will only
be decided upon at the end of the feedback meeting on the mini-user testing
(see Figure 4.16).
Yet for all this, and to minimize the impact of the user feedback on the
sprint backlog and therefore on the current sprint, it is possible to establish
as lean a sprint backlog as possible:
– during the sprint review, envisaging and scheduling for the first week of
the sprint the development of only those elements which should not be
affected by the user feedback;
– keeping aside a margin of a few days for tasks relating to ergonomic
feedback. The time allotted to these tasks can vary from one sprint to another
depending on the objectives of the sprint, decided upon by the PO. This
margin is part of agile development. C. Aubry [AUB 10] indicates that:
…it is crucial to retain flexibility in your plans. […]
Flexibility increases the uncertainty about the estimations and
provision for feedback. Feedback is divided into requests to
change existing stories and, possibly, new stories. This may
also consist of faults in the stories, which is commonly referred
to as “bugs” in software development.
In other words, C. Aubry says that any sprint must have a margin that can
accommodate the uncertainty regarding the estimations made about the

68
User-Centered Agile Method
weight of the user stories and minimize the impact of the requests for
modifications made by the PO during the sprint reviews. This anticipation
prevents the “domino effect” on the content of all the sprint backlogs when
one of these backlogs is modified. This notion is also presented in [RUB 12].
Then, during the feedback meeting on the mini-user testing, the sprint
backlog established previously and under development is finalized, with the
addition of any ergonomic recommendations which are pertinent from the
point of view of the user, but also advisable in order to prevent or minimize
changes made to the sprint backlog (see Figure 4.17).
Figure 4.17. Management of the sprint backlog when a round
of user testing is included at the start of the sprint
At the end of the sprint, the agile team comes together for the sprint
retrospective, and if necessary, to make decisions about how to improve their
working methods.
Figure 4.18 gives an overview of the essential elements for phase 2 when
the mini-user testing takes place at the start of the sprint.

Description of the User-Centered Agile Method
69
Figure 4.18. Overview of a sprint during phase 2 when
the mini-user testing takes place at the start of the sprint
If sprint 1 does not include mini-user testing (because there is not yet a
mock-up – paper or software – to test), the progression of the sprint is
simplified and can be represented by Figure 4.19.

70
User-Centered Agile Method
Figure 4.19. Overview of sprint 1 of phase 2 when the mini-user testing takes place at the
start of the sprint, and there is nothing available to be tested at the start of sprint 1
4.4.2.5. Mini-user testing at the end of the sprint
Figure 4.20 gives a schematic illustration of the progression of a sprint
when the mini-user testing takes place at the end of the sprint.
Figure 4.20. Progression of a sprint when the user testing takes place at the end of the sprint

Description of the User-Centered Agile Method
71
We have previously mentioned that because the evaluating ergonomist
belongs to the agile team, he takes part every day in the daily scrum (see
section 4.4.2.1).
Each sprint begins with a sprint planning meeting, attended by the
evaluating ergonomist (see section 4.4.2.1). Following the sprint planning
meeting, the developers begin developing the tasks established during this
meeting on the basis of the sprint backlog. The evaluating ergonomist, for
his part:
– offers support to the developers by explaining the recommendations
chosen for the sprint backlog following the mini-user testing from the
previous sprint;
– makes adjustments to his scenarios on the basis of those functionalities
which will realistically be able to be developed during the sprint.
A week before the end of the sprint, the evaluating ergonomist begins his
week-long period of mini-user testing (see section 4.4.2.3). He has at his
disposal the partial version of the product which the developers have just
finished. The evaluating ergonomist evaluates this version and produces
recommendations on the basis of analysis of the data collected. These
recommendations will be kept for the subsequent sprints or rejected during
the feedback meeting on the mini-user testing (see section 4.3).
As previously mentioned, one of the important points of the method is
that it has all the members of the agile team (the developers and the
evaluating ergonomist) work together in the sprint review. In this second
case (user testing at the end of the sprint), in order to fulfill this condition,
the functional partial product evaluated by the evaluating ergonomist must
be the same product as is delivered by the developers. This functional partial
product demonstrated during the sprint review is, therefore, that which has
been completed and delivered to the evaluating ergonomist by the
developers a week before the end of the sprint (see Figure 4.21). The result
of this is that during this last week of the sprint, the developers continue to
develop the tasks from the sprint backlog, but these developments will not
form part of the sprint review because they will not have been tested. They
will be presented in the next sprint review (see Figure 4.21).

72
User-Centered Agile Method
At the end of the sprint, a number of ceremonies will take place one after
another. To begin with, the sprint review takes place with the whole of the
project team in attendance, where the agile team presents the current state of
the product to the PO team. Afterwards, the feedback meeting on the mini-
user testing takes place, with the evaluating ergonomist presenting the results
in front of the entire project team.
Figure 4.21. Consequence of having the testing at the end of the sprint
for the management of the development of the functional partial product
Following these two ceremonies, the PO is in possession of all the
information about the product: the functional partial product and the user
feedback regarding that partial product. The PO can therefore formulate his
assessments, remarks and requests for modifications, and then adapt the
product backlog and the remaining sprint backlogs accordingly. The
advantage of this approach is that all the information – both technical and
ergonomic – will be available to the PO at the end of the sprint.
At the end of the sprint, the agile team comes together for the sprint
retrospective and, if necessary, to make decisions about how to improve their
working methods.

Description of the User-Centered Agile Method
73
Figure 4.22. Overview of a sprint in phase 2 when the mini-user testing takes place at the end of the sprint

74
User-Centered Agile Method
Figure 4.22 gives an overview of the essential elements for phase 2 when
the mini-user testing takes place at the end of the sprint.
If a “conventional” round of user testing is scheduled for phase 3, there is
no need to perform testing at the end of the final sprint. The progression of
the sprint is simplified, and is represented by Figure 4.23.
Figure 4.23. Overview of the final sprint of phase 2 when
the mini-user testing takes place at the end of the sprint, and
a “conventional” round of user testing is scheduled for phase 3
4.4.2.6. Mini-user testing during the inter-sprint period
Figure 4.24 shows a schematic illustration of the progression of a sprint
when the mini-user testing takes place during the inter-sprint period.
We have previously mentioned that because the evaluating ergonomist
belongs to the agile team, he takes part every day in the daily Scrum (see
section 4.4.2.1).

Description of the User-Centered Agile Method
75
Figure 4.24. Progression of a sprint when the user testing
takes place during the inter-sprint period
Each sprint begins with a sprint planning meeting, attended by the
evaluating ergonomist (see section 4.4.2.1). Following the sprint planning
meeting, the developers begin developing the tasks established during this
meeting on the basis of the sprint backlog. The evaluating ergonomist, for
his part:
– offers support to the developers by explaining the recommendations
chosen for the sprint backlog following the mini-user testing from the
previous inter-sprint period;
– makes adjustments to his scenarios on the basis of those functionalities
which will realistically be able to be developed during the sprint.
At the end of the sprint, the sprint review takes place, with the
involvement of the whole of the project team. The agile team makes a
presentation to the PO team on the current state of the product. The PO
formulates his assessment, offers remarks and modifications which may
have implications for the product backlog and, therefore, for the remaining
sprint backlogs.
In this proposal, at the time when the partial product is delivered during
the sprint review, the evaluating ergonomist has not yet evaluated it because
this task of evaluation is performed during the inter-sprint period. The sprint
sprint n+1
U testing
Scrum
inter-sprint period
p h a s e
2 , agile development
user testing during the inter-sprint period
sprint planning
meeting
sprint review
feedback meeting on
the mini user testing
sprint
retrospective
functional partial
product
recommendations
to be integrated
sprint n (daily Scrum)
User-Centered Design

76
User-Centered Agile Method
backlog which will be discussed can, therefore, not be finalized, because the
recommendations to be integrated in the sprint will only be decided upon at
the end of the feedback meeting on the mini-user testing (see Figure 4.24).
However, with the aim of staying as true as possible to one of the objectives
of the sprint review, we feel it important to establish as lean a sprint backlog
as possible during this review by keeping aside a margin of a few days for
tasks relating to ergonomic feedback. The time allotted to these tasks can
vary from one sprint to another depending on the objectives of the sprint,
decided upon by the PO. This margin is part of agile development. C. Aubry
[AUB 10] indicates that:
…it is crucial to retain flexibility in your plans. […]
Flexibility increases the uncertainty about the estimations and
provision for feedback. Feedback is divided into requests to
change existing stories and, possibly, new stories. This may
also consist of faults in the stories, which are commonly
referred to as “bugs” in software development.
In other words, C. Aubry says that any sprint must have a margin that can
accommodate the uncertainty regarding the estimations made about the
weight of the user stories and minimize the impact of the requests for
modifications made by the PO during the sprint reviews. This anticipation
prevents the “domino effect” on the content of all the sprint backlogs when
one of these backlogs is modified. This notion is also presented in [RUB 12].
The evaluating ergonomist begins his week of mini-user testing (see
section 4.4.2.3) during an inter-sprint period. He has at his disposal the
partial version of the product which the developers have just delivered in the
sprint review. The evaluating ergonomist evaluates this version and produces
recommendations on the basis of analysis of the data collected. Then, at the
end of the inter-sprint period, the feedback meeting on the mini-user testing
takes place, in the wake of which, the recommendations are divided between
the sprints or are rejected (see section 4.3). Then, the sprint backlog
previously established is finalized, with the addition of any ergonomic
recommendations which are pertinent from the point of view of the user, but
also advisable in order to prevent or minimize changes made to the sprint
backlog (see Figure 4.25).

Description of the User-Centered Agile Method
77
Figure 4.25. Management of the sprint backlog when the
user testing takes place during the inter-sprint period
In parallel to this, in addition to the time set aside for the mini-user
testing, during this inter-sprint period, the developers perform tasks other
than the development of new user stories. This time may be used to prepare
for the next sprint planning meeting, finalize the essential documentation or
debug the product, etc.
Finally, the agile team comes together at the end of the inter-sprint period
for a sprint retrospective, and if necessary, to make decisions about how to
improve their working methods. This retrospective could have been done at
the end of the previous sprint, after the sprint review. We deemed it
preferable, however, to move it from the sprint to the end of the inter-sprint
period, in order to be able to take account of the work carried out during this
intervening time.
Figure 4.26 gives an overview of the essential elements for phase 2 when
the mini-user testing takes place during the inter-sprint periods.

78
User-Centered Agile Method
Figure 4.26. Overview of a sprint during phase 2 when the mini-user testing takes place during an inter-sprint period

Description of the User-Centered Agile Method
79
If a “conventional” round of user testing is scheduled for phase 3, there is
no need to perform testing after the final sprint. The progression of the sprint
is simplified, and is represented by Figure 4.27.
Figure 4.27. Overview of the final sprint in phase 2 when
the mini-user testing takes place during an inter-sprint period, and
a “conventional” round of user testing is scheduled for phase 3
4.4.3. Phase 3: validation
We recommend that, at the end of the project, after the final sprint, a
“conventional” round of user testing, including a higher number of
participants (see section 2.3) be retained (see Figure 4.28) in order to:
– analyze the different ergonomic aspects of the product in greater depth;
– carry out a complete validation of the final product;
– identify new functionalities for a future version/release;
– leave a trace of the last recommendations for complete delivery of the
project.

80
User-Centered Agile Method
Figure 4.28. Following the final sprint, we recommend
a round of user testing during the validation phase
Instead of “conventional” user testing, it may be possible to go even
further and launch a field test2 that will involve a larger number of
participants over a longer period of time.
4.5. Implication of the method in terms of workload
Our suggestions in the following sections for the division of the workload
are based on real projects which have experimented with the UCA method.
These are idealistic recommendations which are by no means intended to be
followed to the letter, and can be adapted to suit each individual project and
team.
4.5.1. Phase 1: design of a global view of the product
As we have seen, the design phase can commence far in advance of the
pre-sprint. In his division of the workload, the PO must bear in mind the
work done by all those who form part of his team during this first stage. For
instance, we have seen that a UX designer and a graphic designer are
involved, full time, for the entirety of this first stage, conducting preliminary
research. It is envisageable for a software architect or a marketing expert or
any other professional useful to the project to also be involved during this
2 A field test is a technique that enables us to evaluate the use of a product or service by a
large number of users, in their actual environment.
Scrum
U testing
end of
release
final sprint
"conventional"
user testing
functional
product
User-Centered Design
p h a s e
3 ,
validation
evaluation
p h a s e
2 ,
agile
development
user testing

Description of the User-Centered Agile Method
81
stage. It is up to the PO to construct his team and determine the duties of
each of his collaborators in the first stage, on the basis of the nature of the
project, its importance, etc.
After this first stage comes the pre-sprint, for which we shall briefly
mention the level of involvement of the main participants.
The UX designer, for his part, is engaged on a full-time basis because he
is in charge of the design workshops and the drawing up of all the screen
layouts. He is supported by the graphic designer, who is also employed full
time.
The “evaluating ergonomist” takes part in the design by his participation
in the design workshops, but he also has a specific task to do: setting up his
user testing. Hence, he too may be a full-time participant during this stage
provided it is no longer than three weeks.
The development team is also involved on a full-time basis, studying the
technical architecture, participating in the design process in the workshops,
and preparing the development environment.
4.5.2. Phase 2: development
The use of the method implies the integration of an evaluating ergonomist
into the agile team. According to the feedback received on actual
implementation of this method (see examples in Chapter 5), the evaluating
ergonomists’ workloads to be taken into account can be divided as follows:
– participation in the daily scrum (15 minutes per day);
– adjustment of the scenarios, preparation of the testing suite, following
up on recruitment (three days per sprint);
– week of mini-user testing (five days per sprint);
– ceremonies for each iteration: planning, review and retrospective (one
and a half days per sprint);
– design: allow for additional days per sprint for design if the ergonomist
is a UX designer in addition to his role as an evaluator.

82
User-Centered Agile Method
The application of the mini-user testing in the sprints also has
consequences for the developers’ workload. Indeed, as the developers
provide support to the evaluating ergonomist during the week of testing, they
will have additional workloads which need to be taken into account:
– watching one user testing session per sprint for each developer
(a quarter of a day per sprint);
– evaluating the scenarios alongside the evaluating ergonomist for one
developer (one day per sprint);
– providing technical support to the mini-user testing process for one
developer (two days per sprint);
– participating in the feedback meeting on the mini-user testing for each
developer (half a day per sprint).
We also need to take account of the workload relating to the UX designer
and the graphic designer. This workload depends on the amount of work
already done in advance and on the complexity of the product in question. It
is difficult to give a generic estimation of this workload.
In practice, it may be that a “development team” is only made up of one
developer. This means that during the period of mini-user testing, the
developer is at the beck and call of the ergonomist for the purposes of the
mini-user testing, and therefore cannot invest all his efforts in the
performance of the development tasks. In this case, and possibly in the case
where the team comprises two developers, we advocate adding one week to
the sprint. Hence if the team works at an adequate pace for a sprint lasting n
weeks, the suggestion would be to have the sprints last n+1 week(s), so as to
preserve this pace when applying the UCA method.
For a long project (at least 10 sprints), it is envisageable to perform
mini-user testing every two sprints rather than every sprint in order to keep
from running over budget. The important thing, in order to conserve the
philosophy of the UCA method, is to carry out mini-user testing regularly.
4.5.3. Phase 3: validation
If in the context of the validation phase a “conventional” round of user
testing is scheduled, the PO needs to budget for an evaluating ergonomist

Description of the User-Centered Agile Method
83
working on a full-time basis for several weeks, and for the remuneration
offered to end users who volunteer to take part in the tests. He also needs to
take account of the developer’s hours to support the implementation of the
user testing, and to offer technical support during the sessions with the end
users.

5
Case Studies
In this chapter, we present two cases of the application of the User-Centered Agile (UCA)
method, carried out in the labs of Orange. As these projects lay in the domain of R&D, their
primary aim was not to create a product which could be put directly on to the market. Rather,
they related to other aspects: the relevance of the functionalities proposed, demonstration of a
service, usage studies, implementation of a new technology, etc. Also, these two projects did
not, in the strictest sense, apply the UCA method, because the organizational structure inherent
in the projects was incompatible with the application of agile methods as described in the
existing body of literature.
However, these two projects have been chosen as case studies because they shed light on
different characteristics of the UCA method and demonstrate the advantage of regular user
testing. They also show that the working framework offered by this method can be adapted to
any context, so long as the agile method, Scrum, upon which it is founded is at least correctly
applied.
5.1. Application of the User-Centered Agile method on the Cat’s Eyes
project
5.1.1. Overview of the project
Cat’s Eyes is a project relating to the domain of context-sensitive
systems, i.e. systems which evolve and adapt to different contexts. One of
the approaches in this domain is to offer the user the possibility to react to
situations caused by changes of context. Cat’s Eyes is a prototype for a
mobile application devoted to the study of this approach.
In more concrete terms, Cat’s Eyes offers a user real-time updates on the
contextual situations for his close contacts. In other words, Cat’s Eyes can be

86
User-Centered Agile Method
considered as a portal which continually provides a user with contextual
information for a number of close contacts (see Figure 5.1). In reaction to the
situations displayed by the Cat’s Eyes application, the user can communicate
in conventional ways with his Cat’s Eyes contacts. He can also communicate
his own contextual situation by way of a notification addressed to one or
more contacts. In addition, in order to retain control over the information he
makes available, the user can specify the level of detail to be visible to each
contact who may receive it.
Figure 5.1. Screenshot of the application Cat’s Eyes

Case Studies
87
As Cat’s Eyes was an innovative service based on new concepts, the
UCA method was used to create a prototype of the service whilst leaving
open the possibility of altering the design during the development stage.
Just like for the agile method, Scrum, the UCA method is a working
framework intended for projects where it is applied on the basis of their
organizational context and the culture of the company. Thus, it is the
implementation of the UCA method in the context of the Cat’s Eyes project
which we describe in the following sections.
5.1.2. Actors involved in the project and their roles
In the context of the Cat’s Eyes project, a number of different actors were
involved at different stages of the project (see Figure 5.2):
– a Product Owner: involved throughout the length of the project;
– a UX designer: mainly involved in phase 1 – the design phase (research
into adaptive interfaces and design of the product). She also made
modifications to the product when adaptations were needed, in phase 2 – the
development phase. She belonged to the PO team and as such, took part in
the Scrum ceremonies, helping to guide and maintain the product’s
development as defined by the vision of the product;
– a PO team: comprising the Product Owner and the UX designer;
– a contracted design team: the PO team called upon an external design
team to design a mockup of the product, based on the technical and
ergonomic objectives set out by the PO team;
– an evaluating ergonomist: her involvement was mainly during the
development phase (phase 2), conducting regular mini rounds of user testing,
and then during the validation phase (phase 3) setting up a field test (see
section 5.1.3.3) and analyzing the results in terms of use of the product;
– a contracted development team: this team was made up of a Scrum
master and a developer. They were not from the same company as the PO
team. The development team took part in the establishment of the product
backlog during the pre-sprint, during the design phase (phase 1). Essentially,
their involvement was in phase 2.

88
User-Centered Agile Method
Figure 5.2. The roles in the Cat’s Eyes project
5.1.3. Description of the progression of the project
The Cat’s Eyes project took place over the course of about a year and a
half. The design phase (phase 1) lasted four-and-a-half months, not counting
the research carried out before the commencement of the project. Then, the
development phase (phase 2) took place over nine-and-a-half months.
Finally, the validation phase (phase 3) lasted five-and-a-half months. The
following sections describe the application of the UCA method in each of
these three phases.
5.1.3.1. Phase 1: design
During this phase, the PO team worked on the design of the service,
particularly
in
collaboration
with
the
contracted
design
team.
This
collaboration lasted three months, and produced a Flash mockup illustrating
the ideas behind the service.
In order to verify the technical feasibility of the service, and that such a
service would be accepted by users, the PO team launched the realization of
a prototype for Android using the UCA method. Once the company who
would supply the contractors had been identified, the pre-sprint began with
an introduction to the UCA method, given to the whole of the project team.
Then, over the course of around five weeks (neither team was working full
time on the issue), five workshops between the PO team and the agile
development team took place, with the aim of selecting and prioritizing the
functionalities to include in the release, on the basis of the Flash model and a
document listing the corresponding functionalities. The last of these
workshops served as the release planning meeting.
Figure 5.3 gives an illustration of phase 1 of the Cat’s Eyes project,
showing the events, periods, actions performed and the roles of the
participants.

Case Studies
89
Figure 5.3. Progression of phase 1 of the Cat’s Eyes project
5.1.3.2. Phase 2: development
The development phase took place over nine three-week sprints, divided
into two periods: seven sprints during the first period and then two more
sprints three months later (see Figure 5.4). This was due to the fact that when
the project officially ended, the system was not yet stable enough to launch
the field test. Therefore the project team had to undertake two more sprints
in order to create a more stable application and add certain functionalities
which were relevant for the field test in phase 3.
For reasons of cost and technical constraints, not all the functionalities
included in the Flash model were able to be built in during the development
of the working product. This meant that the UX designer had to adjust the
design, which she did during the first few sprints of the development
process. As soon as the mini-user testing had begun, the UX designer took
account of the users’ feedback when finalizing her design, and in the
modifications made to the partial product under development. However,
from sprint 7 onwards, the design was finalized, and since the objective of
the last two sprints was to increase the functional stability of the product, the
role of the UX designer was no longer represented.
The
evaluating
ergonomist,
for
her
part,
only
became
involved
in the development phase, from sprint 3 onwards, because as the design
was not finished for sprint 1, this first sprint was devoted to the
creation of the technical layer of the service. Furthermore, given that the
evaluating
ergonomist
was
not
available
before
sprint 2,
the
task

90
User-Centered Agile Method
of
preparing
the
mini-user
testing
could
not
be
done
during
the
pre-sprint, or during sprint 1. The testing scenarios and recruitment were
therefore carried out during sprint 2, so the first mini round of user testing
only took place in sprint 3.
Once all the members of the project team were present, between sprint 2
and sprint 7, the sprints occurred as outlined by the description of the UCA
method in the previous chapters, with a UX designer working alongside the
PO and an evaluating ergonomist forming part of the agile development
team.
Figure 5.4. Progression of phase 2 of the Cat’s Eyes project
It was decided, in the Cat’s Eyes project, to carry out mini rounds of user
testing at the start of each sprint, because this was the solution preferred by
the evaluating ergonomist. Thus, after each sprint review, the developer
began the week-long period of mini-user testing and continued his task of
development in parallel to supporting the evaluating ergonomist.
During the sprints, the ergonomist and the developer on the agile team
participated in the daily scrums:
– in person, three times a week;
– by telephone, twice a week.
However, as the evaluating ergonomist and developer were involved on a
remote basis, each of them had their own task boards.

Case Studies
91
Figure 5.5 gives an overview of a sprint typical of the Cat’s Eyes project.
Figure 5.5. Progression of a sprint in the Cat’s Eyes project
The week of mini-user testing took place as advocated by the method,
with (see Figure 5.6):
– one day to evaluate the scenarios on the partial product delivered and
prepare the testing suite, in particular so that the product would work
correctly in that environment;
– followed by one or two days of user testing;
– a day and a half for analysis of the data;
– and half a day for presentation of the results to the whole of the project
team.
Figure 5.6. Progression of a week of mini-user testing in the Cat’s Eyes project

92
Use
Follo
to the re
retain th
the bud
during t
5.1.3.3.
The
test wit
weeks b
was the
led to
applicat
er-Centered Agil
owing the pr
ecommendat
hose which s
dget for the
the Cat’s Eye
Figure 5
“rejecte
Phase 3: va
Cat’s Eyes
th the partic
by these use
ir own, and
a report wh
tion and reco
le Method
resentation o
tion board an
seemed relev
project. Fi
es project.
5.7. Example of
ed”, “to be integ
lidation
project, dur
ipation of 3
rs on mobile
that they we
hich gave s
ommendation
of the results
nd evaluated
vant in relati
gure 5.7 sho
f a recommenda
grated”, “integ
ring the valid
5 users. Th
e devices len
ere entirely fr
suggestions
ns regarding
s, the team t
the recomm
on to the obj
ows the rec
ation board: “o
grated” and “va
dation phase
e application
nt to them, b
free to person
as to the u
the target au
turned their a
mendations in
jective, the t
ommendatio
on hold”,
alidated”
e, carried ou
n was used
but whose S
nalize. This f
use of this
udience.
attention
n order to
time and
on board
ut a field
for four
SIM card
field test
type of

Case Studies
93
5.1.4. Feedback relating to the method
The final sprint review gave birth to an assessment on the UCA method,
which was being used for the first time by all the team members. The rest of
this section relates to difficulties which were identified and the positive
aspects of the method.
5.1.4.1. A number of difficulties encountered
The evaluating ergonomist was not present during the pre-sprint and the
first two sprints, so it took a certain amount of time to establish
communication between her and the developer. This difficulty was all the
greater because the UCA method was new, the mutual knowledge-exchange
meeting had not taken place and, at the start of the process, the development
team did not consider the evaluating ergonomist to be a part of the agile
team. After two sprints and a clarifying statement about the role of the
evaluating ergonomist, communication became effective and efficient,
enabling the team to gel and to accept the ergonomist as a member of the
agile team. This demonstrates the importance of two of the elements of the
UCA method: the meetings to present the working method and clarify the
roles of each team member during the pre-sprint phase, and the place of the
evaluating ergonomist as a member of the agile team to facilitate
communication within that team.
As she was not a part of the contracted development team, no solution
was able to be found for the evaluating ergonomist to be able to take part in
the sprint planning meeting. Also, to begin with, she had difficulty in
identifying how the development of the product was advancing. Later on,
this problem was minimized by good communication during the daily
scrums, which gave the evaluating ergonomist access to the information she
needed to make the necessary adjustments to her scenarios. Thus, as
advocated in our description of the UCA method, we feel it important for the
ergonomist on the agile team to be able to take part in all the ceremonies, in
order to become integrated more quickly into the team, communicate more
easily with the developers and perform his/her work in good conditions.
During the development phase, the project ran into difficulty with the
application server. Thus, during the mini rounds of user testing, the server
used was that which served for the developments. Therefore, the developer
was there in a supporting role for all the user tests, and was unable to make

94
User-Centered Agile Method
progress on new functionalities during this time. As we have mentioned, a
peculiarity of this particular development team was that it only had one
developer, meaning that no progress at all was able to be made during this
time. During the last review, the project team expressed the view that in
order to avoid this problem, they would have needed to change the length of
the sprints to four weeks, so as to be assured of sprints including at least
three weeks of development.
5.1.4.2. Positive aspects expressed
In spite of the sticking points cited above, the report on the project is very
positive as regards the use of the UCA method. In this section, we present
the favorable points raised by the whole team.
The development team found it interesting to receive regular feedback
from users, as this helped to guide the design process, facilitated the
prioritization of the items on the product backlog and meant that there was
always a functional prototype available (this is related to the Scrum
framework, but the constraint is all the stronger because of the presence of
real-world users taking part in the mini rounds of user testing).
Also, the developer, who had had to take part in the user testing (as his
server was no longer accessible), spoke of the genuine benefit to watching
the users in a real-life situation. Having observed the testing sessions, he felt
he had a clearer understanding of the recommendations made on the basis of
the results, and was, therefore, better able to take part in the selection of
which recommendations to integrate.
In spite of the communication difficulties at the beginning, the developer
also found it advantageous to have the evaluating ergonomist attend the daily
scrums. Indeed, if the developer had questions regarding the implementation
of the screens to ask at a daily scrum, the evaluating ergonomist stayed after
the daily scrum to answer these questions. These moments spent discussing
issues together often helped in the making of decisions about the product, or
in the quick feeding back of a design problem to the UX designer if the issue
went beyond the role of the evaluating ergonomist.
This project also occasioned cooperation between the evaluating
ergonomist and the UX designer. The division of the tasks proved effective:
the UX designer retained a global view and was in charge of significant

Case Studies
95
modifications, and the evaluating ergonomist focused her attention on
evaluation and on modifications which had little impact on the screen layout.
This collaboration worked well, thanks to good communication between the
two people involved.
During one round of user testing, the functional product had serious
technical problems, meaning the feedback from the users was considerably
less favorable. It was decided during the next sprint to solve these technical
problems, so visually, from the users’ point of view, no changes had been
made to the application between the two sprints. Therefore, the evaluating
ergonomist chose not to call back the two recurrent users, but rather to use
four entirely new participants to test the service. The results were interesting,
because they vindicated the technical solution applied, in the sense that the
product worked better. In addition, this round of testing also threw up other
problems of usability which had not previously been able to be detected,
because of the existing technical problems. This proves that it is always
helpful for the project to use this opportunity for regular contact with the
users, made possible by the UCA method, even if, from a visual point of
view, nothing appears to have changed.
The mini rounds of user testing helped ensure good usability of the
product. Indeed, in the final field test (phase 3), the results in terms of
simplicity and ease of use of the product were positive. In addition, this good
level of usability enabled the team to concentrate more fully on the use of
this new service.
5.2. Application of the User-Centered Agile method on the Bind project
5.2.1. Overview of the project
Bind is an interpersonal communication project intended to enable very
close friends to come together around digital content on different devices
(mobile telephones, TVs, etc.). For this purpose, when two people make
contact using the Bind service, they create a link or an event which can be
used to access a content-sharing space which is private and specific to these
people. This space can be accessed during synchronous or asynchronous
communication. With Bind, the content is not the objective in itself; rather,
the content is intended to open the way to an exchange and is therefore the
support for that exchange.

96
User-Centered Agile Method
Figure 5.8. Screenshot from the Bind service
The Bind project originally began with a philosophical reflection about
telecommunications and social bonds. Based on this original document, the
project team invested a great deal of effort in transforming the document to
design a functional mobile service. Then, in order to illustrate part of what
Bind had to offer, it was decided to create the service in the form of a
functional mockup (see Figure 5.8). The project had two main goals: one
relating to the technique and the other to the use of the service. The main
issue regarding this topic was whether or not the creation of links between
people would be accepted. Hence, the UCA method was chosen, because
owing to the contact with the end users inherent in this method, the team was
able to take account of this issue.
In the following sections, we describe the application of the UCA method
in the Bind project, which had the unusual quality of having all the teams,
during the development phase, made up of external contractors.

Case Studies
97
5.2.2. Actors involved in the project and their roles
The Bind project was a partnership project, so it required the involvement
of several teams belonging to different companies: the telecommunications
operator Orange was the Product Owner, a partner company and two
subcontractors were also involved. Thus, in this project, the Product Owner
was a key element in guiding the development of the product and
maintaining good cohesion and communication between the different teams.
The different actors involved in Bind were (see Figure 5.9):
– a Product Owner: the PO facilitated collaboration between the various
teams, monitored the progress of the work and made the directional choices
necessary for the creation of the product originally defined on the basis of a
somewhat philosophical visionary document;
– a UX designer: the UX designer worked with the PO during the design
phase and put forward an initial version of the specifications for the product
needing to be developed. His involvement came to an end once the
development began. The PO chose to keep the roles of designer (in the early
stages) and evaluator (in the later stages) entirely separate, in the interests of
impartiality;
– a graphic designer: he took part in the task of design and the
establishment of the graphic ambiance, and then in imbuing the screens for
the service with that ambiance;
– a sociologist: he performed a sociological analysis of the original
document, in order to be able to put across the needs and the strong ideas
contained in the document;
– two service architects: they worked on constructing the architecture to
allow the service to function. One of the two belonged to the partner
company.
– a contracted evaluating ergonomist: he essentially carried out mini
rounds of user testing during the development phase. As the UX designer
was no longer involved during phase 2, the evaluating ergonomist sometimes
made contributions to the design, on the basis of the results from his user
testing. In addition, the PO had chosen to engage his services only on a part-
time basis – i.e. the time necessary to carry out the mini rounds of user
testing. Therefore, in theory, we can say that his involvement in the sprints
was minimal. Because of his status as an external contractor, it was decided
that he should not be a part of the agile team;

98
User-Centered Agile Method
– a contracted agile development team: this team was made up of three
developers and a Scrum master – also external to the PO’s company. The
team was involved during the pre-sprint phase and during phase 2 – the
development phase.
– a partner team: the aim of this team was to create a technological
component specific to the Bind service.
Figure 5.9 shows the iconic representations of those involved in the
project, with the exception of the sociologist, who was only involved in the
preliminary research in phase 1. These icons are later used in the diagrams
illustrating the progression of the method for the Bind project.
Figure 5.9. The roles involved in the Bind project
5.2.3. Description of the progression of the project
The Bind project lasted for several months, with the design phase (phase
1) around six months, then the development phase (phase 2) comprising four
three-week sprints, separated by week-long inter-sprint periods. Finally, the
technical validation phase (phase 3) took around a week. For the Bind
project, no “conventional” user testing took place in the validation phase,
because the mini-user testing had already resolved all the PO’s issues about
the acceptability of the service.
5.2.3.1. Phase 1: design
As the Bind project was based on a philosophical document, the first
stage of the design phase lasted around five months. During this time, the PO
team, comprising the PO herself, the UX designer, the graphic designer and
the two architects, studied the original document with the help of the
sociologist, analyzing the key elements therein and identifying the functions
which needed to be fulfilled by the service. On the basis of these elements,
the design of the service yielded a document outlining an initial version,
complete with functional specifications and an HCI. This is not conventional
in the context of development using the Scrum method, as it is far more
detailed than prescribed, but the particular context of this project required:

Case Studies
99
– the hierarchy of the Product Owner company to validate it before
development could begin;
– multiple stakeholders to validate the boundaries and scope of the
project, as it was undertaken in partnership.
For this reason, the PO felt it preferable to have a good level of design
and a clearly-established boundary before entering into the development
phase.
After this initial stage, the pre-sprint stage lasted for three weeks. During
the first two weeks, the new teams brought on board the project – the
partnering development team and the contracted development team and the
contracted evaluating ergonomist – familiarized themselves with the content
of the specification document. Then, the introduction to the UCA method
and the mutual knowledge-exchange meeting took place, so that all the
teams could become familiar with the working method, and get to know one
another. The last week of this pre-sprint was aimed at working together on
the choice of which functionalities to include and prioritizing them, and to
end with a release planning meeting.
Figure 5.10 illustrates phase 1 of the Bind project, indicating the events,
the periods, the actions performed and the roles of the participants.
Figure 5.10. Progression of phase 1 of the Bind project

100
User-Centered Agile Method
5.2.3.2. Phase 2: development
After exchanges between the development teams and the evaluating
ergonomist, the model chosen for the organization of the mini rounds of user
testing was that using the inter-sprint periods (see Figure 5.11). This model
appeared to be the most pertinent and the simplest to use in managing the
responsibilities between the contracted development team, who delivered a
version of the product at the end of the sprint, and the contracted evaluating
ergonomist, who received that partial version at the start of the inter-sprint
period. Thus, the responsibilities were clearly defined.
Four three-week-long sprints took place, interposed with week-long inter-
sprint periods.
Figure 5.11. Progression of phase 2 of the Bind project
The sequence of sprints followed by inter-sprint periods took place just as
proposed by the method: a sprint planning meeting at the beginning of the
sprint, integrating the recommendations from the previous round of user
testing, and then a sprint review at the end of the sprint. This was followed
by the feedback meeting on the mini-user testing. Finally, there was the
retrospective, which therefore only took place after the inter-sprint period
(see Figure 5.12). During the inter-sprint periods, the development team
drafted the technical documentation, provided support for the mini-user
testing, and prepared for the next sprint planning meeting.

Case Studies
101
Figure 5.12. Progression of a sprint and inter-sprint in the Bind project
As regards the sprint review, given that the results from the testing had
not yet been delivered, the team could not completely anticipate the
reprioritization and adjustment of the content of the sprints. Therefore,
unlike the UCA method, whereby the process of reprioritizing the backlogs
should be begun during the sprint review, it was decided to perform this task
at the end of the inter-sprint period, when the results of the mini-user testing
were fed back. The consequence of this is that the evaluating ergonomist had
half a day less to analyze the data gleaned from the testing. Indeed, the
feedback meeting on the mini-user testing began on the morning of the final
day rather than the afternoon, and lasted the entire day.
Figure 5.13. Progression of a week of mini-user testing in the Bind project

102
User-Centered Agile Method
5.2.4. Feedback relating to the method
When the Bind project came to an end, we were able to obtain feedback
regarding the application of the UCA method in this project. In this section,
we present the difficulties which were encountered and the positive points
expressed.
5.2.4.1. Difficulties encountered
As the evaluating ergonomist was not part of the development team, and
consequently was not able to take part in the daily scrums, certain difficulties
ensued when he was first given the functional partial product. This was the
first time he had ever seen the partial product, and he had to rapidly adjust
his scenarios in order to be able to carry out the first round of testing. Indeed,
there was a difference between the scenarios he had intended to run and the
real functional partial product. During the retrospective, this point was
raised, and in the subsequent sprints, the ergonomist was able to have
contact on a daily basis with the Scrum master of the development team in
order to stay abreast of the advancement of the developments. Indeed, in the
UCA method, as the evaluating ergonomist takes part in the daily scrums, he
is familiar with the product that he is going to have to test, and therefore one
day at the start of the testing week is sufficient to compare the product
against the scenarios.
In addition, the initial intention was that during the sprints, the evaluating
ergonomist should devote two days a week to the project, but no
specification was made about how these two days should be distributed.
Hence, frequently and at any time, the evaluating ergonomist found himself
called
up
by
the
development
team
to
give
detail
about
certain
recommendations which had given rise to modifications, or to deal with
constraints likely to have a bearing on the ergonomic aspect of the service.
Both the development team and the evaluating ergonomist noted that this
form of organization was not appropriate to aptly serve the needs of the
project. Therefore, they had to review the organization of the evaluating
ergonomist’s timetable so that the time set aside for these tasks was
distributed into definite blocks, spread-out throughout the week. This
demonstrates the importance of the presence of the evaluating ergonomist on
the agile team, as prescribed by the UCA method.
The graphic designer was present only in the design phase (phase 1) and
at the start of the development phase (phase 2), to guide the development

Case Studies
103
teams in making a few adjustments. However, as noted by the members of
the project and specified in section 4.3, the recommendations issuing from
the mini-user testing may entail a task of modification for the UX designer,
the graphic designer and the developer. With Bind, it was the development
team who had to adjust certain images. This point illustrates the necessity in
the UCA method of having UX and graphic designer human resources
throughout the whole of the development process.
5.2.4.2. Positive elements expressed
The positive elements raised in the feedback on the Bind project include
the fact that the product is put to real use, which enhanced the meaning given
to the developments. The mini-user testing was also able to provide answers
to the initial questions raised about the acceptability of the service – one of
the crucial issues regarding this service.
Another point related to the participation of the developers during some
of the mini-user testing sessions, which gave rise to:
– a better understanding of the user needs;
– an easier re-examination of the work already done by the team;
– and, therefore, a powerful sense of motivation in the development team.
One final important element relating to the use of mini rounds of user
testing was the considerable injection of information to help prioritize the
items on the product backlog. This is an essential element, which also
surfaces spontaneously in the feedback we have obtained from other projects
which have applied the method (see section 3.2).
Finally, the Product Owner made the observation that when problems
arose with the management of the project, the flexibility of the UCA method
meant solutions could be found, thanks to the involvement of all the actors
whilst remaining true to the philosophy of the method. The fact of having
users regularly available during the development of the product, so it could
be adapted on the basis of the feedback that came in is another point which
meant the PO on the Bind project expressed the desire to also apply the UCA
method in her future projects.

104
User-Centered Agile Method
5.3. Balanced evaluation of the case studies
Through the lens of these two cases of use of the UCA method, we note
the importance of properly planning the key elements of the method and of
allowing for the necessary UX and graphic design resources to be present
throughout the development process.
We have also been able to demonstrate the fundamental advantage to the
concept at the heart of this methodology: i.e. the gathering of regular
feedback from the end users during the development process. These
comments regarding the interface helped to continue to gain a better
understanding of the user requirements, and helped the improvements called
for to be directly integrated into the working prototypes, without having to
wait for a hypothetical new version. At the end of the development phase,
the agile team delivers to the Product Owner a more complete solution, that
is, more fluid in terms of use.
As we have seen in these two cases, these regular rounds of feedback on
the part of end users have other advantages as well. They keep the team
motivated by way of the constant link maintained with the users’ needs, and
facilitate decision-making. Finally, the regular participation of members of
the team in the user testing sessions further reinforces this link.
Yet in order for this dynamic to work, we have also been able to see that
it is of crucial importance that there be communication between the members
of this multidisciplinary team, and particularly between the development
team and the evaluating ergonomist. For this reason, it is important to adhere
as closely as possible to the framework offered by the UCA method – i.e. an
introduction to the method and mutual knowledge-exchange meeting, the
inclusion of the evaluating ergonomist as a part of the agile team and
therefore his presence at the daily scrums, and finally, the participation of all
the actors involved in the project in the different ceremonies, depending on
their roles. For instance, the development team should be present at the
feedback meeting on the mini-user testing, and the evaluating ergonomist
should be in attendance at the sprint planning meeting and the sprint
retrospective.
In closing, we can note that in these two cases of the application of the
UCA method, none of the comments obtained relate to the issues of
excessive workload that would have been caused by the direct integration of

Case Studies
105
UCD into the process of agile development. However, at the start of both of
these projects, there was a certain degree of apprehension regarding the
cost–value ratio of the method and the risk of an excessive workload. In the
end, the comments relate essentially to the positive aspects that the method
brought to the project. We believe this is due to the fact that the prescribed
structure for the UCA method was respected. This structure provides a set of
key practical points which enable each member of the team to perform their
functions in good conditions. This in turn is attributable, we believe, to the
important status afforded to phase 1 by our method. The work carried out
during this preliminary research phase meant that at the start of the
development phase the teams had a global view of their product. This
enabled all the members of the agile team to concentrate on making this
global view a reality, whilst making the necessary adjustments issuing from
the results of the mini-user testing.

Conclusion
In this book, we have put forward a method which strikes a balance
between the agile method, Scrum, and User-Centered Design (UCD). This
means that Scrum, because it is mutually integrated with UCD, provides
more of a guarantee of the finished product in terms of usability. UCD, for
its part, can continue even during the development phases, meaning the
product can evolve over more cycles than is possible in a traditional UCD
approach. Explicitly based on the agile method, Scrum, one peculiarity of
this method is the description of a precise working framework, enabling each
of the various participants involved to fulfill his/her activity in good
conditions.
The User-Centered Agile (UCA) method is the fruit of a series of works
carried out over a period of two years. It is the solution at which we arrived
after four stages. The first consisted of writing an initial version of the
method, contextualized in relation to the existing literature, and applied, in
parallel, in a project [DEU 10]. Then, the second stage was to conduct
individual interviews with ergonomists, technical heads and the leaders of
many projects who had previously applied this initial version of the approach
to a greater or lesser extent. Next, we focused on writing a second version on
the basis of the results of our analysis of the interviews. Finally, the last
stage saw certain elements clarified after the presentation of the method in
seminars and discussion groups, and the end result is the version of the UCA
method described in this book.
In relation to the literature, the UCA method is intended to be an
amalgamation of important points identified in the extant articles – namely:
the strengthening of the stage prior to the development phase relating to

108
User-Centered Agile Method
knowledge of the user, regular user testing of the functional partial product,
the presence of a UX resource within the ranks of the development team and
the importance of communication between the different members of the
project team.
As stated, the UCA method enables UCD not to stop and start but rather
to continue throughout the duration of the project. This is ensured by the
presence, at all times, of User eXperience professionals (ergonomists,
designers, UX designers) who apply the tools unique to UCD. This
continuity of the UCD is also ensured by the involvement of end users,
regularly and at every stage of the project.
In particular, having an ergonomist as part of the development team and a
UX designer as part of the PO team ensures a relay or link is created
between the PO team and the development team, regarding issues particular
to the user. This form of organization offers an overall view of the service
provided by the UX designer with the PO team on the one hand, and a
concentrated effort on issues particular to the HCI on the part of the
evaluating ergonomist, on the other hand. Furthermore, this structure avoids
the situation where the product is designed and evaluated by the same
person; thereby it limits the bias of a player who would otherwise be judge
and jury, and therefore face a conflict of interest.
While the goal of this book has been to detail the method as a “user-
centered” extension of Scrum, we believe it would be possible to transfer the
major principles highlighted by the UCA method and apply them to other
agile development methods.

Bibliography
[AMB 08] AMBLER S.W., “Tailoring Usability into Agile Software Development Projects”,
Chapter 4 in BERNHAUPT R., NAVARRE D., PALANQUE P., WINCKLER M., Maturing
Usability, Quality in Software, Interaction and Value, Springer London, 2008.
[ASU 11] ASUNCION H., SOCHA D., SUNG K., BERFIELD S. and GREGORY W., “Serious game
development as an iterative user-centered agile software project”, 1st International
Workshop on Games and Software Engineering GAS’11, Honolulu, Hawaii, USA, May
22, ACM, p. 44-47, 2011.
[AUB 10] AUBRY C., SCRUM, Le guide pratique de la méthode agile la plus populaire,
Dunod, Paris, 2010.
[BAC 05] BACCINO T., BELLINO C. and COLOMBI T., Mesure de l’utilisabilité des interfaces,
Lavoisier-Hermès, 2005.
[BEY 04] BEYER H., HOLTZBLATT K. and BAKER L., “An agile customer-centered method :
rapid contextual design”, Extreme Programming and Agile Methods – XP/Agile Universe
2004, Calgary, Canada, August 15-18, 2004, Springer Verlag, p. 50-59.
[BLO 05] BLOMKVIST S., “Towards a model for bridging agile development and user-centered
design”, in SEFFAH A., GULLIKSEN J., DESMARAIS M.C., Human-Centered Software
Engineering – Integrating Usability in the Software Development Lifecycle, Springer, p.
219-244, 2005.
[BUD 09] BUDWIG M., JEONG S. and KELKAR K., “When user experience met agile: a case
study”, Extended Abstracts on Human Factors in Computing Systems CHI EA’09, Boston,
USA, April 4-9, ACM, p. 3075-3084, 2009.
[CHA 06] CHAMBERLAIN S., SHARP H., MAIDEN N, “Towards a framework for integrating
agile development and user-centred design”, Extreme Programming and Agile Processes
in Software Engineering: 7th International Conference, XP 2006, Oulu, Finland, June 17-
22, Springer Berlin, p. 143–153, 2006.
[COH 09] COHN M., User Stories Applied for Agile Software Development, Addison Wesley,
2009.

110
User-Centered Agile Method
[DEG 91] DE GRACE P. and STHAL L.H., Wicked Problems, Righteous Solutions: a Catalogue
of Modern Software Engineering Paradigms, Yourdon Press, 1990.
[DET 07] DETWEILER M. “Managing UCD within Agile Projects”, ACM Interactions, vol. 14
no. 3, p. 40-42, 2007.
[DEU 10] DEUFF D., COSQUER M. and FOUCAULT B., “Méthode centrée utilisateurs et
développement agile: une perspective “gagnant-gagnant au service des projets de R&D”,
Conférence Internationale Francophone sur I'Interaction Homme-Machine IHM’10,
Luxembourg, September 20-23, ACM, p 189-196, 2010.
[DEU 12] DEUFF D. and COSQUER M., “Méthode agile centrée utilisateurs”, Conférence
ergoIHM 2012, Biarritz, October 17-19, 2012.
[DOU 10] DOUGLASS R. and HYLTON K., “Get it RITE – Rapid Iterative Testing and
Evaluation”, User Experience Magazine, vol. 9, no. 1, p. 12-13 and 29, 2010.
[DUC 07] DÜCHTING M., NEBE K. and ZIMMERMANN D., “Incorporating User Centered
Requirement
Engineering
into Agile
Software
Development”,
12th
International
Conference, HCI International 2007, Beijing, China, July 22-27, 2007, Springer Berlin
Heidelberg, p. 240-249, 2007.
[FAU 03] FAULKNER L., “Beyond the five-user assumption: benefits of increased sample sizes
in usability testing”, Behavior Research Methods, Instruments, & Computers, vol. 35 no.
3, p.379-383, 2003.
[FED 09] FEDEROFF M. and COURAGE C., “Successful user experience in an agile enterprise
environment”, Symposium on Human Interface 2009, San Diego, CA, July 19-24,
Springer Berlin Heidelberg, p. 233-242, 2009.
[FOX 10] FOX D., SILLITO J. and MAURER F., “Agile methods and User-Centered Design:
how these two methodologies are being successfully integrated in industry”, Agile 2008,
Toronto, Canada, August 4-8, IEEE Computer Society, p. 63-72, 2008.
[GAR 10] GARRETT J.J., The Elements of User Experience – User-Centered Design for the
Web and Beyond, 2nd edition, New Riders, Indianapolis, IN, 2010.
[HUM 11] HUMAYOUN S.R., DUBINSKY Y. and CATARCI T., “A three-fold integration
framework to incorporate User-Centered Design into agile software development”, 2nd
International Conference on Human Centered Design, HCD’11, Orlando, Florida, July 9-
14, Springer-Verlag, p. 55-64, 2011.
[HUS 08] HUSSAIN Z., LECHNER M., MILCHRAHM H., SHAHZAD S., SLANY W., UMGEHER M.,
and WOLKERSTORFER P., “Agile User-Centered Design applied to a mobile multimedia
streaming application”, 4th Symposium of the Workgroup Human-Computer Interaction
and Usability Engineering of the Austrian Computer Society USAB 2008, Graz, Austria,
November 20-21, Springer Berlin Heidelberg, p. 313-330, 2008.
[HUS 09] HUSSAIN Z., MILCHRAHM H., SHAHZAD S., SLANY W., TSCHELIGI M. and
WOLKERSTORFER P., “Integration of extreme programming and user-centered design:
Lessons learned”, Extreme Programming (XP 2009), Springer, p. 174-179, 2009.

Bibliography
111
[ISO 02] ISO/TR 16982, Ergonomics of human-system interaction – Usability methods
supporting human-centred design, International Standardization Organization, October
2002.
[ISO 10] ISO 9241-210, Ergonomics of human-system interaction – Part 210: Human-centred
design for interactive systems, International Standardization Organization, March 2010.
[JOK 04] JOKEDA T. and ABRAHAMSSON P., “Usability assessment of an extreme
programming project: close co-operation with the customer does not equal to good
usability”, 5th International Conference, PROFES 2004, Kansai Science City, Japan,
April 5-8, Springer Berlin Heidelberg, p. 393-407, 2004.
[KEI 10] KEITH C., Agile Game Development with Scrum, Addison Wesley, 2010.
[KOL 09] KOLLMANN J., SHARP H., BLANDFORD A. “The importance of identity and vision to
user experience designers on agile projects”, Agile Conference, Agile '09, Chicago, USA,
August 24-28, IEEE Computer Society, p. 11-18, 2009.
[MAR 02] MARCUS A., “Return on investment for usable user-interface design”, User
Experience, Vol. 1, No. 3, 2002, pp. 25-31.
[MCI 05] MCINERNEY P. and MAURER F., “UCD in agile projects: dream team or odd
couple?”, Interactions, vol. 12, no. 6, 2005, p. 19-23.
[MEM 07a] MEMMEL T., GUNDELSWEILER F. and REITERER H., “CRUISER: A Cross-
Discipline User Interface and Software Engineering Lifecycle”, 12th International
Conference on Human-Computer Interaction, Beijing, China, July 22-27, p. 174-183,
2007.
[MEM 07b] MEMMEL
T., GUNDELSWEILER F. and REITERER H., “Agile human-centered
software engineering”, 21st British HCI Group Annual Conference on People and
Computers: HCI... But Not As We Know It (BCS-HCI 2007), British Computer Society, p.
167-175, 2007.
[NAJ 08] NAJAFI M. and TOYOSHIBA L., “Two case studies of user experience design and
agile development”, Agile 2008, Toronto, Canada, August 4-8, 2008, IEEE Computer
Society, p. 531-536, 2008.
[NEL 02] NELSON E. “Extreme programming vs. interaction design: when two development
design visionaries meet, there’s room for consensus but not much”, fawcette.com, January
2002.
[NIE 93] NIELSEN J. and LAUDAUER T.K., “A mathematical model of the finding of usability
problems”, Conference on Human Factors in Computing Systems (CHI '93), Amsterdam,
April 1993, p. 206-213.
[NIE 00] NIELSEN J., “Why you only need to test with 5 users”, March 2000.
http://www.useit.com/alertbox/20000319.html.
[NIE 12] NIELSEN J., “How many test users in a usability study?”, June 2012.
http://www.useit.com/alertbox/number-of-test-users.html.

112
User-Centered Agile Method
[PRU 06] PRUITTI J. and ADLIN T., The Persona Lifecycle: Keeping People in Mind
Throughout Product Design, Morgan Kaufmann Publishers, 2006.
[ROS 10] ROSENBERG D., “Garbage in, garbage out – the agile way”, User Experience
Magazine, vol. 9, no. 1, p. 32, 2010.
[RUB 12] RUBIN K. S., Essential Scrum, a Practical Guide to the Most Popular Agile
Process, Addison Wesley, 2012.
[SCH 95] SCHWABER K., “SCRUM development process”, ACM Conference on Object
Oriented Programming Systems, Languages, and Applications (OOPSLA), Austin, TX,
October 1995.
[SCH 01] SCHWABER K. and BEEDLE M., Agile Software Development with Scrum, Prentice
Hall, 2001.
[SCH 04] SCHWABER K., Agile Project Management with Scrum, Microsoft Press, 2004.
[SCH
11]
SCHWABER
K.
and
SUTHERLAND
J.,
“The
Scrum
guide”,
http://www.scrum.org/Portals/0/Documents/Scrum%20Guides/Scrum_Guide.pdf, 2011.
[SCH 09] SCHWARTZ L., VERGNOL L., GRONTIER G., VAGNER A., ALTENBURGER T. and
BATTISTI S., “Comment concilier agilité et conception centrée utilisateurs dans un projet
de développement”, 21ème Conférence Francophone sur l'Interaction Homme-Machine,
IHM’09, Grenoble, France, October 13-16, ACM, p. 337-340, 2009.
[SOH 10] SOHAIB O. and KHANI, K. “Integrating usability engineering and agile software
development: a literature review”, International Conference on Computer Design and
Applications, Qinhuangdao, June 25-27 2010, IEEE Computer Society, vol. 2, p. 32-38,
2010.
[SUT 04] SUTHERLAND J., “Agile development: lessons learned from the first Scrum”,
October 2004, http://www.scrumalliance.org/resources/35.
[SY 07] SY D., “Adapting Usability Investigations for Agile User-centered Design”, Journal
of Usability Studies, vol. 2 no. 3, p. 112-132, 2007.
[TAK 86] TAKEUCHI H. and NONAKA I., “The new new product development game”, Harvard
Business Review, January, p.137-146, 1986.
[TZA 10] TZANIDOU K. and FERREIA J., “Design and Development in the “Agile Room”:
Trialing Scrum at a Digital Agency”, 11th International Conference XP 2010, Trondheim,
Norway, June 1-4, Springer Berlin Heidelberg, p. 372-378, 2010.
[UNG 08] UNGAR J. and WHITE J, “Agile user centered design: enter the design studio −a
case study”, Extended Abstracts on Human Factors in Computing Systems CHI EA’08,
Florence, Italy, April 5-10, ACM Press, p. 2167-2177, 2008.
[WIL 07] WILLIAM H. and FERGUSON A., “The UCD perspective: before and after agile”,
Agile Conference AGILE 2007, Washington, USA, August 13-17, 2007, IEEE Computer
Society Washington, p. 285-290, 2007.

Bibliography
113
[WOL 08] WOLKERSTORFER P., TSCHELIGIT M., SEFELIN R., MILCHRAHM H., HUSSAIN Z.,
LECHNER M., SHAZAD S. “Probing an agile usability process”, Extended Abstracts on
Human Factors in Computing Systems CHI EA’08, Florence, Italy, April 5-10 2008,
ACM Press, p. 2151-2158, 2008.
[WOO 01]
WOOLRYCH A. and COCKTON G., “Why and when five users aren’t enough”,
Conference of IHM-HCI 2001, Lille, France, September 10-14 2001, Cépaduès, vol. 2,
p.105-108, 2001.
[XIO 10] XIONG Y. and WANG A., “A new combined method for UCD and software
development and case study”, 2nd International Conference on Information Science and
Engineering, ICISE 2010, Hangzhou, China, December 3-5 2010, IEEE Computer
Society, p. 1-4, 2010.

Index
A
acceptability, 53, 57
agile method, 2, 6, 39
Scrum, 5, 8, 13, 29, 31-32, 39, 41
C, D
ceremony, 9-11, 48
design, 1, 3, 5, 13, 15, 17, 31, 43
development, 1-2, 5-10, 12-14,
16-34, 37-39, 41-45, 47-60, 63, 65,
68-69
E, F, H
ergonomics, 16
ergonomist, 1-2, 17, 29-34, 36,
41-45, 47-57, 59, 63-64, 68-69
evaluation, 1-2, 14-15, 17
21-22, 24-25, 31, 33, 43, 49-51, 58,
63
feedback, 29, 47, 56, 63
human−computer interaction (HCI),
13, 17, 19-23, 30, 38-39, 41-42, 47,
49, 53
I, M, P
increment, 9, 11, 31
mutual knowledge-exchange
meeting, 34, 45, 48, 54, 59
product owner (PO), 8, 10-13, 16, 24,
29-30, 32-34, 37, 40-43, 45, 47, 49,
52-56, 58-60, 63-64, 67, 69
R, S, T
recommendation board, 46-47
return on investment (ROI), 16
Scrum, 2-3, 5-12, 31-34, 37, 40-42,
47-50, 52-56, 59, 63, 68
master, 12, 32-33, 42, 47, 52-53, 56
team, 32
thinking aloud, 19
U
User-Centered Agile (UCA) method,
2-3, 5-6, 12, 15, 29-34, 37-39, 41,
43, 45, 47-51, 54, 56-59, 67, 69
User-Centered Design (UCD), 1-3, 5,
13-17, 20-24, 28, 30-31, 35, 38-41,
45, 48-49
user testing, 16

116
User-Centered Agile Method
user experience (UX), 12-13, 17-28,
32-33, 39-45, 48-50, 52-53, 57-58,
67-69
designer, 32-33, 39-45, 48-49,
52-53, 57, 67-69
expert, 17, 19-28
team, 17-19, 22, 25, 27-28, 50
V
validation, 1-2, 5, 31, 38, 41-43, 47,
53, 66-67, 69

