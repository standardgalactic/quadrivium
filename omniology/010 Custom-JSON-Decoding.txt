© 2019 MathByte Academy

Loading JSON
We have seen how to serialize Python objects to JSON
Now we need to look at deserializing JSON to Python objects
à load  loads
works out-of-the-box with the standard JSON data types
import json
j = '{"a": 1, "b": {"sub1": [2, 3]}}'
d = json.loads(j)
d à
{
"a": 1,
"b": {
"sub1": [2, 3]
}
}
numbers, booleans, strings, lists, 
dictionaries (key:value pairs)
does not work with other types
j = '{"createdAt": "2020-12-31T23:59:59"}'
interpreted as a string
© 2019 MathByte Academy

One Approach
Use some custom encoding scheme to define both the value and the type of some entry in the JSON file
For example, when encoding a timestamp, we could do it as follows:
j = '''
{ "createdAt": 
{
"objecttype": "isodatetime",
"value": "2020-12-31T23:59:59"
}
}
'''
à load the JSON string into a Python dictionary
à iterate through dictionary (recursively), to find objects with an objecttype == isodatetime
à replace createdAt with the converted timestamp
à tedious
à load JSON, iterate recursively through 
dictionary, and convert as needed
© 2019 MathByte Academy

A Slight Improvement
load and loads have an argument named object_hook
à loads(j_string, object_hook=my_func)
à my_func is called for every object in the JSON data
For example:
j = '''
{ 
"a": 1,
"b": {
"sub1": [1, 2, 3],
"sub2": {
"x": 100,
"y": 200
}
}
}
'''
à object_hook will call for every dictionary (object) in the dictionary
à loads first parses JSON into a dictionary
à root dictionary
à b dictionary
à sub2 dictionary
à dictionary is replaced by return 
value of my_func
(called last)
à handles recursive aspect for us
© 2019 MathByte Academy

Schemas
Deserializing custom JSON types and objects is difficult
à in general we need to know the structure of the JSON data in order to custom deserialize
à this is referred to as the schema
à a pre-defined agreement on how the JSON is going to be structured or serialized
à If JSON has a pre-determined schema, then we can handle custom deserialization
à schema might be for the entire JSON, or for sub-components only
{ "createdAt": 
{
"objecttype": "isodatetime",
"value": "2020-12-31T23:59:59"
}
}
if we see this, replace the dict with the 
custom object/value
© 2019 MathByte Academy

Overriding Basic Type Serializations
Notice that object_hook only allows us to customize deserialization of objects
What about numbers?
à by default floats for real numbers, and ints for whole numbers
What if we want Decimal instead of float, or binary representations for integers?
à can override the way these data types are handled by using some extra arguments in load/loads
à parse_float
à parse_int
à parse_constant
à provide a custom callable
à callable has a single argument
à No overrides for strings
à argument value will be the original string in the JSON
à return parsed value
© 2019 MathByte Academy

Example
from decimal import Decimal
def make_decimal(arg):
return Decimal(arg)
If load / loads encounters this in the JSON data:
"a": 100.5
à loads(j, parse_float=make_decimal)
à calls make_decimal("100.5")
à deserialized JSON will now have Decimal("100.5") instead of float 100.5
© 2019 MathByte Academy

Another argument – object_pairs_hook
à related to object_hook
à cannot use both at the same time
(if both are specified, then object_hook is ignored)
object_hook passes the deserialized dictionary to the callable
à there is no guarantee of the order of elements in the dictionary
What if order of elements in JSON is important?
à lists preserve order
à instead of callable receiving a dictionary it receives a list of the key/value pairs
à key/value pairs are provided as a tuple with two elements
{"a": 1, "b": 2}
object_hook
object_pairs_hook
[ ("a", 1), ("b": 2) ]
© 2019 MathByte Academy

Mixing Basic Type Overrides and Object Hooks
à can specify both parse_... and object_hook
Remember that object_hook (and object_pairs_hook) callables receive a parsed object
This means parse_... (if specified) is used first, before we receive the parsed object in the hooks
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

