© 2019 MathByte Academy

persons = [John, Eric, Michael, Graham]
What is an associative array?
0
1
2
3
We can think of the indices as a key for the items in the list
0 à John
Person objects
1 à Eric
2 à Michael
3 à Graham
So when we want to get hold of the Michael object, we just need to remember the key
persons[2]
à Michael
But remembering a number while we write our code???
© 2019 MathByte Academy

there has to be a better way…
persons = [('john', John), 
('eric', Eric), 
('michael', Michael), 
('graham', Graham)]
we have associated a string with an object
to get the Michael object:
à lookup the key 'michael' and return the associated value
(key, object)
scan the persons list until we find a tuple with first element = key
return the second element of the tuple
At least we don't have to remember a number anymore!
© 2019 MathByte Academy

But there really has to be a better way…
Consider our associative array:
persons = [('john', John), ('eric', Eric), 
('michael', Michael), ('graham', Graham)]
And let's break it up:
keys = ['john', 'eric', 'michael', 'graham']
persons = [John,    Eric,   Michael,   Graham]
Notice how the index of 'john'
matches up with the index of John, 
and so on
What if we could define a function h that would return these results - always:
h('john') à 0
h('eric') à 1
h('michael') à 2
h(graham') à 3
To get Michael, we would first call h('michael')
à 2
then persons[2]
persons[h('michael')]
à Michael
© 2019 MathByte Academy

Associative Arrays
An associative array is an abstract data structure
Can be implemented in different concrete ways
that associates keys (keys are unique)
to values
abstractly we can think of it as a collection of (key, value) pairs
Sometimes also called:
maps
dictionaries
They support:
à adding/removing elements
à modifying an associated value
à looking up a value via its key
© 2019 MathByte Academy

