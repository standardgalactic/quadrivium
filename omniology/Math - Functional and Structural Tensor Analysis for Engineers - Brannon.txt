Functional and Structured Tensor Analysis for Engineers
A casual (intuition-based) introduction to vector and tensor analysis with 
reviews of popular notations used in contemporary materials modeling
R. M. Brannon
University of New Mexico, Albuquerque
Copyright is reserved.
Individual copies may be made for personal use.
No part of this document may be reproduced for profit.
Contact author at rmbrann@sandia.gov
UNM BOOK DRAFT
September 4, 2003 5:21 pm

NOTE: When using Adobe’s “acrobat reader” to view this
document, the page numbers in acrobat will not coincide
with the page numbers shown at the bottom of each page
of this document.
Note to draft readers: 
The most useful textbooks are
the ones with fantastic indexes. The book’s index is
rather new and still under construction.
It would really help if you all could send me a note
whenever you discover that an important entry is miss-
ing from this index. I’ll be sure to add it.
This work is a community effort. Let’s try to make this
document helpful to others.

FUNCTIONAL AND STRUCTURED TENSOR 
ANALYSIS FOR ENGINEERS
A casual (intuition-based) introduction to vector 
and tensor analysis with reviews of popular 
notations used in contemporary materials 
modeling
Rebecca M. Brannon† 
†University of New Mexico Adjunct professor
rmbrann@sandia.gov
Abstract
Elementary vector and tensor analysis concepts are reviewed in a manner that
proves useful for higher-order tensor analysis of anisotropic media. In addition
to reviewing basic matrix and vector analysis, the concept of a tensor is cov-
ered by reviewing and contrasting numerous different definition one might see
in the literature for the term “tensor.” Basic vector and tensor operations are
provided, as well as some lesser-known operations that are useful in materials
modeling. Considerable space is devoted to “philosophical” discussions about
relative merits of the many (often conflicting) tensor notation systems in popu-
lar use.

ii

iii
Acknowledgments
An indeterminately large (but, of course, countable) set of people who have offered
advice, encouragement, and fantastic suggestions throughout the years that I’ve spent
writing this document. I say years because the seeds for this document were sown back in
1986, when I was a co-op student at Los Alamos National Laboratories, and I made the
mistake of asking my supervisor, Norm Johnson, “what’s a tensor?” His reply? “read the
appendix of R.B. “Bob” Bird’s book, Dynamics of Polymeric Liquids. I did — and got
hooked. Bird’s appendix (which has nothing to do with polymers) is an outstanding and
succinct summary of vector and tensor analysis. Reading it motivated me, as an under-
graduate, to take my first graduate level continuum mechanics class from Dr. H.L. “Buck”
Schreyer at the University of New Mexico. Buck Schreyer used multiple underlines
beneath symbols as a teaching aid to help his students keep track of the different kinds of
strange new objects (tensors) appearing in his lectures, and I have adopted his notation in
this document. Later taking Buck’s beginning and advanced finite element classes further
improved my command of matrix analysis and partial differential equations. Buck’s teach-
ing pace was fast, so we all struggled to keep up. Buck was careful to explain that he
would often cover esoteric subjects principally to enable us to effectively read the litera-
ture, though sometimes merely to give us a different perspective on what we had already
learned. Buck armed us with a slew of neat tricks or fascinating insights that were rarely
seen in any publications. I often found myself “secretly” using Buck’s tips in my own
work, and then struggling to figure out how to explain how I was able to come up with
these “miracle instant answers” — the effort to reproduce my results using conventional
(better known) techniques helped me learn better how to communicate difficult concepts
to a broader audience. While taking Buck’s continuum mechanics course, I simulta-
neously learned variational mechanics from Fred Ju (also at UNM), which was fortunate
timing because Dr. Ju’s refreshing and careful teaching style forced me to make enlighten-
ing connections between his class and Schreyer’s class. Taking thermodynamics from A.
Razanni (UNM) helped me improve my understanding of partial derivatives and their
applications (furthermore, my interactions with Buck Schreyer helped me figure out how
gas thermodynamics equations generalized to the solid mechanics arena). Following my
undergraduate experiences at UNM, I was fortunate to learn advanced applications of con-
tinuum mechanics from my Ph.D advisor, Prof. Walt Drugan (U. Wisconsin), who intro-
duced me to even more (often completely new) viewpoints to add to my tensor analysis
toolbelt. While at Wisconsin, I took an elasticity course from Prof. Chen, who was enam-
oured of doing all proofs entirely in curvilinear notation, so I was forced to improve my
abilities in this area (curvilinear analysis is not covered in this book, but it may be found in
a separate publication, Ref. [6]. A slightly different spin on curvilinear analysis came
when I took Arthur Lodge’s “Elastic Liquids” class. My third continuum mechanics
course, this time taught by Millard Johnson (U. Wisc), introduced me to the usefulness of
“Rossetta stone” type derivations of classic theorems, done using multiple notations to
make them clear to every reader. It was here where I conceded that no single notation is
superior, and I had better become darn good at them all. At Wisconsin, I took a class on
Greens functions and boundary value problems from the noted mathematician R. Dickey,
who really drove home the importance of projection operations in physical applications,
and instilled in me the irresistible habit of examining operators for their properties and

iv
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
classifying them as outlined in our class textbook [12]; it was Dickey who finally got me
into the habit of looking for analogies between seemingly unrelated operators and sets so
that my strong knowledge. Dickey himself got sideswiped by this habit when I solved one
of his exam questions by doing it using a technique that I had learned in Buck Schreyer’s
continuum mechanics class and which I realized would also work on the exam question by
merely re-interpreting the vector dot product as the inner product that applies for continu-
ous functions. As I walked into my Ph.D. defense, I warned Dickey (who was on my com-
mittee) that my thesis was really just a giant application of the projection theorem, and he
replied “most are, but you are distinguished by recognizing the fact!” Even though neither
this book nor very many of my other publications (aside from Ref. [6], of course) employ
curvilinear notation, my exposure to it has been invaluable to lend insight to the relation-
ship between so-called “convected coordinates” and “unconvected reference spaces” often
used in materials modeling. Having gotten my first exposure to tensor analysis from read-
ing Bird’s polymer book, I naturally felt compelled to take his macromolecular fluid
dynamics course at U. Wisc, which solidified several concepts further. Bird’s course was
immediately followed by an applied analysis course, taught by ____, where more correct
“mathematician’s” viewpoints on tensor analysis were drilled into me (the textbook for
this course [17] is outstanding, and don’t be swayed by the fact that “chemical engineer-
ing” is part of its title — the book applies to any field of physics). These and numerous
other academic mentors I’ve had throughout my career have given me a wonderfully bal-
anced set of analysis tools, and I wish I could thank them enough.
For the longest time, this “Acknowledgement” section said only “Acknowledgements
to be added. Stay tuned...” Assigning such low priority to the acknowledgements section
was a gross tactical error on my part. When my colleagues offered assistance and sugges-
tions in the earliest days of error-ridden rough drafts of this book, I thought to myself “I
should thank them in my acknowledgements section.” A few years later, I sit here trying to
recall the droves of early reviewers. I remember contributions from Glenn Randers-Pher-
son because his advice for one of my other publications proved to be incredibly helpful,
and he did the same for this more elementary document as well. A few folks (Mark Chris-
ten, Allen Robinson, Stewart Silling, Paul Taylor, Tim Trucano) in my former department
at Sandia National Labs also came forward with suggestions or helpful discussions that
were incorporated into this book. While in my new department at Sandia National Labora-
tories, I continued to gain new insight, especially from Dan Segalman and Bill Scherz-
inger.
Part of what has driven me to continue to improve this document has been the numer-
ous encouraging remarks (approximately one per week) that I have received from
researchers and students all over the world who have stumbled upon the pdf draft version
of this document that I originally wrote as a student’s guide when I taught Continuum
Mechanics at UNM. I don’t recall the names of people who sent me encouraging words in
the early days, but some recent folks are Ricardo Colorado, Vince Owens, Dave Dooli-
nand Mr. Jan Cox. Jan was especially inspiring because he was so enthusiastic about this
work that he spent an entire afternoon disscussing it with me after a business trip I made to
his home city, Oakland CA. Even some professors [such as Lynn Bennethum (U. Colo-
rado), Ron Smelser (U. Idaho), Tom Scarpas (TU Delft), Sanjay Arwad (JHU), Kaspar
William (U. Colorado), Walt Gerstle (U. New Mexico)] have told me that they have

v
directed their own students to the web version of this document as supplemental reading. 
In Sept. 2002, Bob Cain sent me an email asking about printing issues of the web
draft; his email signature had the Einstein quote that you now see heading Chapter 1 of
this document. After getting his permission to also use that quote in my own document, I
was inspired to begin every chapter with an ice-breaker quote from my personal collec-
tion. 
I still need to recognize the many folks who have sent
helpful emails over the last year. Stay tuned.

vi
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Contents
Acknowledgments ....................................................................................................
iii
Preface.......................................................................................................................
xv
Introduction..............................................................................................................
1
STRUCTURES and SUPERSTRUCTURES ......................................................
2
What is a scalar? What is a vector? .....................................................................
5
What is a tensor?..................................................................................................
6
Examples of tensors in materials mechanics .................................................
 9
The stress tensor ............................................................................................
 9
The deformation gradient tensor ...................................................................
 11
Vector and Tensor notation — philosophy..........................................................
12
Terminology from functional analysis ...................................................................
14
Matrix Analysis (and some matrix calculus).........................................................
21
Definition of a matrix ..........................................................................................
21
Component matrices associated with vectors and tensors (notation explanation)
22
The matrix product...............................................................................................
22
SPECIAL CASE: a matrix times an array .....................................................
 22
SPECIAL CASE: inner product of two arrays...............................................
 23
SPECIAL CASE: outer product of two arrays...............................................
 23
EXAMPLE: ....................................................................................................
 23
The Kronecker delta.............................................................................................
25
The identity matrix...............................................................................................
25
Derivatives of vector and matrix expressions......................................................
26
Derivative of an array with respect to itself.........................................................
27
Derivative of a matrix with respect to itself ........................................................
28
The transpose of a matrix.....................................................................................
29
Derivative of the transpose:...........................................................................
 29
The inner product of two column matrices..........................................................
29
Derivatives of the inner product:...................................................................
 30
The outer product of two column matrices..........................................................
31
The trace of a square matrix ................................................................................
31
Derivative of the trace ...................................................................................
 31
The matrix inner product .....................................................................................
32
Derivative of the matrix inner product ..........................................................
 32
Magnitudes and positivity property of the inner product ....................................
33
Derivative of the magnitude...........................................................................
 34
Norms.............................................................................................................
 34
Weighted or “energy” norms ........................................................................
 35
Derivative of the energy norm .......................................................................
 35
The 3D permutation symbol ................................................................................
36
The ε-δ (E-delta) identity.....................................................................................
36
The ε-δ (E-delta) identity with multiple summed indices ...................................
38
Determinant of a square matrix ...........................................................................
39
More about cofactors ...........................................................................................
42
Cofactor-inverse relationship........................................................................
 43

vii
Derivative of the cofactor ..............................................................................
 44
Derivative of a determinant (IMPORTANT) ......................................................
44
Rates of determinants.....................................................................................
 45
Derivatives of determinants with respect to vectors......................................
 46
Principal sub-matrices and principal minors .......................................................
46
Matrix invariants..................................................................................................
46
Alternative invariant sets...............................................................................
 47
Positive definite ...................................................................................................
47
The cofactor-determinant connection ..................................................................
48
Inverse..................................................................................................................
49
Eigenvalues and eigenvectors..............................................................................
49
Similarity transformations .............................................................................
 51
Finding eigenvectors by using the adjugate.........................................................
52
Eigenprojectors ....................................................................................................
53
Finding eigenprojectors without finding eigenvectors. .................................
 54
Vector/tensor notation.............................................................................................
55
“Ordinary” engineering vectors...........................................................................
55
Engineering “laboratory” base vectors ................................................................
55
Other choices for the base vectors .......................................................................
55
Basis expansion of a vector .................................................................................
56
Summation convention — details........................................................................
57
Don’t forget what repeated indices really mean ...........................................
 58
Further special-situation summation rules....................................................
 59
Indicial notation in derivatives......................................................................
 60
BEWARE: avoid implicit sums as independent variables .............................
 60
Reading index STRUCTURE, not index SYMBOLS.........................................
61
Aesthetic (courteous) indexing ............................................................................
62
Suspending the summation convention ...............................................................
62
Combining indicial equations ..............................................................................
63
Index-changing properties of the Kronecker delta...............................................
64
Summing the Kronecker delta itself ....................................................................
69
Our (unconventional) “under-tilde” notation.......................................................
69
Tensor invariant operations .................................................................................
69
Simple vector operations and properties...............................................................
71
Dot product between two vectors ........................................................................
71
Dot product between orthonormal base vectors ..................................................
72
A “quotient” rule (deciding if a vector is zero) ...................................................
72
Deciding if one vector equals another vector................................................
 73
Finding the i-th component of a vector................................................................
73
Even and odd vector functions.............................................................................
74
Homogeneous functions ......................................................................................
74
Vector orientation and sense................................................................................
75
Simple scalar components ...................................................................................
75
Cross product .......................................................................................................
76
Cross product between orthonormal base vectors ...............................................
76
Triple scalar product ............................................................................................
78

viii
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Triple scalar product between orthonormal RIGHT-HANDED base vectors.....
79
Projections ................................................................................................................
80
Orthogonal (perpendicular) linear projections.....................................................
80
Rank-1 orthogonal projections.............................................................................
82
Rank-2 orthogonal projections.............................................................................
83
Basis interpretation of orthogonal projections.....................................................
83
Rank-2 oblique linear projection .........................................................................
84
Rank-1 oblique linear projection .........................................................................
85
Degenerate (trivial) Rank-0 linear projection......................................................
85
Degenerate (trivial) Rank-3 projection in 3D space ............................................
86
Complementary projectors...................................................................................
86
Normalized versions of the projectors.................................................................
86
Expressing a vector as a linear combination of three arbitrary (not necessarily 
orthonormal) vectors......................................................................................
88
Generalized projections .......................................................................................
90
Linear projections ................................................................................................
90
Nonlinear projections...........................................................................................
90
The vector “signum” function .......................................................................
 90
Gravitational (distorted light ray) projections ..............................................
 91
Self-adjoint projections........................................................................................
91
Gram-Schmidt orthogonalization ........................................................................
92
Special case: orthogonalization of two vectors .............................................
 93
The projection theorem........................................................................................
93
Tensors......................................................................................................................
95
Analogy between tensors and other (more familiar) concepts.............................
96
Linear operators (transformations) ......................................................................
99
Dyads and dyadic multiplication .........................................................................
103
Simpler “no-symbol” dyadic notation .................................................................
104
The matrix associated with a dyad.......................................................................
104
The sum of dyads.................................................................................................
105
A sum of two or three dyads is  NOT  (generally) reducible...............................
106
Scalar multiplication of a dyad ............................................................................
106
The sum of four or more dyads is reducible! (not a superset) .............................
107
The dyad definition of a second-order tensor ......................................................
107
Expansion of a second-order tensor in terms of basis dyads ...............................
108
Triads and higher-order tensors ...........................................................................
110
Our Vm
n tensor “class” notation........................................................................
111
Comment..............................................................................................................
114
Tensor operations ....................................................................................................
115
Dotting a tensor from the right by a vector .........................................................
115
The transpose of a tensor .....................................................................................
115
Dotting a tensor from the left by a vector ............................................................
116
Dotting a tensor by vectors from both sides ........................................................
117
Extracting a particular tensor component ............................................................
117
Dotting a tensor into a tensor (tensor composition).............................................
117
Tensor analysis primitives.......................................................................................
119

ix
Three kinds of vector and tensor notation ...........................................................
119
REPRESENTATION THEOREM for linear forms ............................................
122
Representation theorem for vector-to-scalar linear functions ......................
 123
Advanced Representation Theorem (to be read once you learn about higher-order 
tensors and the Vm
n class notation).........................................................
 124
Finding the tensor associated with a linear function............................................
125
Method #1 ......................................................................................................
 125
Method #2 ......................................................................................................
 125
Method #3 ......................................................................................................
 126
EXAMPLE......................................................................................................
 126
The identity tensor ...............................................................................................
126
Tensor associated with composition of two linear transformations ....................
127
The power of heuristically consistent notation....................................................
128
The inverse of a tensor.........................................................................................
129
The COFACTOR tensor ......................................................................................
129
Axial tensors (tensor associated with a cross-product)........................................
131
Glide plane expressions.................................................................................
 133
Axial vectors........................................................................................................
133
Cofactor tensor associated with a vector .............................................................
134
Cramer’s rule for the inverse ...............................................................................
134
Inverse of a rank-1 modification (Sherman-Morrison formula)..........................
135
Derivative of a determinant .................................................................................
135
Exploiting operator invariance with “preferred” bases........................................
136
Projectors in tensor notation ..................................................................................
138
Nonlinear projections do not have a tensor representation..................................
138
Linear orthogonal projectors expressed in terms of dyads ..................................
139
Just one esoteric application of projectors...........................................................
141
IMPORTANT: Finding a projection to a desired target space ............................
141
Properties of complementary projection tensors .................................................
143
Self-adjoint (orthogonal) projectors.....................................................................
143
Non-self-adjoint (oblique) projectors ..................................................................
144
Generalized complementary projectors ...............................................................
145
More Tensor primitives...........................................................................................
147
Tensor properties .................................................................................................
147
Orthogonal (unitary) tensors................................................................................
148
Tensor associated with the cross product ............................................................
151
Cross-products in left-handed and general bases .........................................
 152
Physical application of axial vectors ...................................................................
154
Symmetric and skew-symmetric tensors .............................................................
155
Positive definite tensors.......................................................................................
156
Faster way to check for positive definiteness ................................................
 156
Positive semi-definite...........................................................................................
157
Negative definite and negative semi-definite tensors..........................................
157
Isotropic and deviatoric tensors ...........................................................................
158
Tensor operations ....................................................................................................
159
Second-order tensor inner product.......................................................................
159

x
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
A NON-recommended scalar-valued product .....................................................
160
Fourth-order tensor inner product........................................................................
161
Fourth-order Sherman-Morrison formula............................................................
162
Higher-order tensor inner product .......................................................................
163
Self-defining notation ..........................................................................................
163
The magnitude of a tensor or a vector .................................................................
165
Useful inner product identities.............................................................................
165
Distinction between an Nth-order tensor and an Nth-rank tensor.........................
166
Fourth-order oblique tensor projections ..............................................................
167
Leafing and palming operations ..........................................................................
167
Symmetric Leafing .........................................................................................
 169
Coordinate/basis transformations..........................................................................
170
Change of basis (and coordinate transformations) ..............................................
170
EXAMPLE......................................................................................................
 173
Definition of a vector and a tensor ................................................................
 175
Basis coupling tensor.....................................................................................
 176
Tensor (and Tensor function) invariance ..............................................................
177
What’s the difference between a matrix and a tensor? ........................................
177
Example of a “scalar rule” that satisfies tensor invariance..................................
179
Example of a “scalar rule” that violates tensor invariance ..................................
180
Example of a 3x3 matrix that does not correspond to a tensor............................
181
The inertia TENSOR ...........................................................................................
183
Scalar invariants and spectral analysis..................................................................
185
Invariants of vectors or tensors............................................................................
185
Primitive invariants..............................................................................................
185
Trace invariants....................................................................................................
187
Characteristic invariants ......................................................................................
187
Direct notation definitions of the characteristic invariants...........................
 189
The cofactor in the triple scalar product.......................................................
 189
Invariants of a sum of two tensors.......................................................................
190
CASE: invariants of the sum of a tensor plus a dyad ....................................
 190
The Cayley-Hamilton theorem: ...........................................................................
192
CASE: Expressing the inverse in terms of powers and invariants ................
 192
CASE: Expressing the cofactor in terms of powers and invariants...............
 192
Eigenvalue problems............................................................................................
192
Algebraic and geometric multiplicity of eigenvalues..........................................
193
Diagonalizable tensors (the spectral theorem).....................................................
195
Eigenprojectors ....................................................................................................
195
Geometrical entities .................................................................................................
198
Equation of a plane ..............................................................................................
198
Equation of a line.................................................................................................
199
Equation of a sphere ............................................................................................
200
Equation of an ellipsoid .......................................................................................
200
Example .........................................................................................................
 201
Equation of a cylinder with an ellipse-cross-section ...........................................
202
Equation of a right circular cylinder....................................................................
202

xi
Equation of a general quadric (including hyperboloid).......................................
202
Generalization of the quadratic formula and “completing the square”................
203
Polar decomposition ................................................................................................
205
Singular value decomposition..............................................................................
205
Special case: .................................................................................................
 205
The polar decomposition theorem: ......................................................................
206
Polar decomposition is a nonlinear projection ....................................................
209
The *FAST* way to do a polar decomposition in 2D .........................................
209
A fast and accurate numerical 3D polar decomposition......................................
210
Dilation-Distortion (volumetric-isochoric) decomposition .................................
211
Thermomechanics application.......................................................................
 212
Material symmetry ..................................................................................................
215
What is isotropy? .................................................................................................
215
Important consequence..................................................................................
 217
Isotropic second-order tensors in 3D space .........................................................
218
Isotropic second-order tensors in 2D space .........................................................
219
Isotropic fourth-order tensors ..............................................................................
222
Finding the isotropic part of a fourth-order tensor ..............................................
223
A scalar measure of “percent anisotropy” ...........................................................
224
Transverse isotropy..............................................................................................
224
Abstract vector/tensor algebra ...............................................................................
227
Structures .............................................................................................................
227
Definition of an abstract vector ...........................................................................
230
What does this mathematician’s definition of a vector have to do with the definition 
used in applied mechanics? .....................................................................
 232
Inner product spaces ............................................................................................
233
Alternative inner product structures..............................................................
 233
Some examples of inner product spaces ........................................................
 234
Continuous functions are vectors! .......................................................................
235
Tensors are vectors!.............................................................................................
236
Vector subspaces..................................................................................................
237
Example: ........................................................................................................
 238
Example: commuting space ...........................................................................
 238
Subspaces and the projection theorem.................................................................
240
Abstract contraction and swap (exchange) operators ..........................................
240
The contraction tensor...................................................................................
 244
The swap tensor .............................................................................................
 244
Vector and Tensor Visualization............................................................................
247
Mohr’s circle for 2D tensors................................................................................
248
Vector/tensor differential calculus .........................................................................
251
Stilted definitions of grad, div, and curl ..............................................................
251
Gradients in curvilinear coordinates.............................................................
 252
When do you NOT have to worry about curvilinear formulas? ....................
 254
Spatial gradients of higher-order tensors......................................................
 256
Product rule for gradient operations.............................................................
 257
Identities involving the “nabla” ....................................................................
 259

xii
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Compound differential operator notation (and unfortunate pampering) ......
 261
Right and left gradient operations (we love them both!).....................................
262
Casual (non-rigorous) tensor calculus .................................................................
265
SIDEBAR: “total” and “partial” derivative notation...................................
 266
The “nabla” or “del” gradient operator ......................................................
 269
Okay, if the above relation does not hold, does anything LIKE IT hold? .....
 271
Directed derivative...............................................................................................
273
EXAMPLE......................................................................................................
 274
Derivatives in reduced dimension spaces ............................................................
275
A more physically significant example ..........................................................
 279
Series expansion of a nonlinear vector function..................................................
280
Exact differentials of one variable.......................................................................
282
Exact differentials of two variables .....................................................................
283
The same result in a different notation ..........................................................
 284
Exact differentials in three dimensions................................................................
284
Coupled inexact differentials...............................................................................
285
Vector/tensor Integral calculus...............................................................................
286
Gauss theorems....................................................................................................
286
Stokes theorem.....................................................................................................
286
Divergence theorem.............................................................................................
286
Integration by parts ..............................................................................................
286
Leibniz theorem ...................................................................................................
288
LONG EXAMPLE: conservation of mass......................................................
 291
Generalized integral formulas for discontinuous integrands ...............................
295
Closing remarks .......................................................................................................
296
Solved problems .......................................................................................................
297
REFERENCES.........................................................................................................
299
INDEX
This index is a work in progress. Please notify the 
author of any critical omissions or errors.....................
301

xiii
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Figures
Figure 1.1.
The concept of traction. .....................................................................
9
Figure 1.2.
Stretching silly putty..........................................................................
11
Figure 5.1.
Finding components via projections..................................................
75
Figure 5.2.
Cross product .....................................................................................
76
Figure 6.1.
Vector decomposition........................................................................
81
Figure 6.2.
(a) Rank-1 orthogonal projection, and (b) Rank-2 orthogonal projection.83
Figure 6.3.
Oblique projection. ............................................................................
84
Figure 6.4.
Rank-1 oblique projection. ................................................................
85
Figure 6.5.
Projections of two vectors along a an obliquely oriented line...........
88
Figure 6.6.
Three oblique projections. .................................................................
89
Figure 6.7.
Oblique projection. ............................................................................
93
Figure 13.1.
Relative basis orientations. ................................................................
173
Figure 17.1.
Visualization of the polar decomposition. .........................................
208
Figure 20.1.
Three types of visualization for scalar fields.....................................
247
Figure 21.1.
Projecting an arbitrary position increment onto the space of allowable 
position increments............................................................................
277

xiv
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.

July 11, 2003 1:03 pm
Preface
xv
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Preface
Math and science journals often have extremely restrictive page limits, making it vir-
tually impossible to present a coherent development of complicated concepts by working
upward from basic concepts. Furthermore, scholarly journals are intended for the presen-
tation of new results, so detailed explanations of known results are generally frowned
upon (even if those results are not well-known or well-understood). Consequently, only
those readers who are already well-versed in a subject have any hope of effectively read-
ing the literature to further expand their knowledge. While this situation is good for expe-
rienced researchers and specialists in a particular field of study, it can be a frustrating
handicap for less experienced people or people whose expertise lies elsewhere. This book
serves these individuals by presenting several known theorems or mathematical tech-
niques that are useful for the analysis material behavior. Most of these theorems are scat-
tered willy-nilly throughout the literature. Several rarely appear in elementary textbooks.
Most of the results in this book can be found in advanced textbooks on functional analysis,
but these books tend to be overly generalized, so the application to specific problems is
unclear. Advanced mathematics books also tend to use notation that might be unfamiliar to
the typical research engineer. This book presents derivations of theorems only where they
help clarify concepts. The range of applicability of theorems is also omitted in certain sit-
uations. For example, describing the applicability range of a Taylor series expansion
requires the use of complex variables, which is beyond the scope of this document. Like-
wise, unless otherwise stated, I will always implicitly presume that functions are “well-
behaved” enough to permit whatever operations I perform. For example, the act of writing
 will implicitly tell you that I am assuming that  can be written as a function of 
and (furthermore) this function is differentiable. In the sense that much of the usual (but
distracting) mathematical provisos are missing, I consider this document to be a work of
engineering despite the fact that it is concerned principally with mathematics. While I
hope this book will be useful to a broader audience of readers, my personal motivation is
to establish a single bibliographic reference to which I can point from my more stilted and
terse journal publications.
Rebecca Brannon,
rmbrann@sandia.gov
Sandia National Laboratories
July 11, 2003 1:03 pm.
“It is important that students bring a certain ragamuffin, barefoot, irreverence
to their studies; they are not here to worship what is known, but to question it” 
— J. Bronowski [The Ascent of Man]
df dx
⁄
f
x

July 11, 2003 1:03 pm
Preface
xvi
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.

September 4, 2003 5:24 pm
Introduction
1
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
FUNCTIONAL AND STRUCTURED TENSOR 
ANALYSIS FOR ENGINEERS:
a casual (intuition-based) introduction to vector and 
tensor analysis with reviews of popular notations used in 
contemporary materials modeling
1. Introduction
RECOMMENDATION: To get immediately into tensor analysis “meat and
potatoes” go now to page 21. If, at any time, you become curious about what
has motivated our style of presentation, then consider coming back to this
introduction, which just outlines scope and philosophy. 
There’s no need to read this book in step-by-step progression. Each section is
nearly self-contained. If needed, you can backtrack to prerequisite material
(e.g., unfamiliar terms) by using the index. 
This book reviews tensor algebra and tensor calculus using a notation that proves use-
ful when extending these basic ideas to higher dimensions. Our intended audience com-
prises students and professionals (especially those in the material modeling community)
who have previously learned vector/tensor analysis only at the rudimentary level covered
in freshman calculus and physics courses. Here in this book, you will find a presentation
of vector and tensor analysis aimed only at “preparing” you to read properly rigorous text-
books. You are expected to refer to more classical (rigorous) textbooks to more deeply
understand each theorem that we present casually in this book. Some people can readily
master the stilted mathematical language of generalized math theory without ever caring
about what the equations mean in a physical sense — what a shame. Engineers and other
“applications-oriented” people often have trouble getting past the supreme generality in
classical textbooks (where, for example, numbers are complex and sets have arbitrary or
infinite dimensions). To service these people, we will limit attention to ordinary engineer-
“Things should be described as simply as possible, 
but no simpler.” 
— A. Einstein

September 4, 2003 5:24 pm
Introduction
2
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
ing contexts where numbers are real and the world is three-dimensional. Newcomers to
engineering tensor analysis will also eventually become exasperated by the apparent dis-
connects between jargon and definitions among practitioners in the field — some profes-
sors define the word “tensor” one way while others will define it so dramatically
differently that the two definitions don’t appear to have anything to do with one another.
In this book we will alert you about these terminology conflicts, and provide you with
means of converting between notational systems (structures), which are essential skills if
you wish to effectively read the literature or to communicate with colleagues. 
After presenting basic vector and tensor analysis in the form most useful for ordinary
three-dimensional real-valued engineering problems, we will add some layers of complex-
ity that begin to show the path to unified theories without walking too far down it. The
idea will be to explain that many theorems in higher-dimensional realms have perfect ana-
logs with the ordinary concepts from 3D. For example, you will learn in this book how to
obliquely project a vector onto a plane (i.e, find the “shadow” cast by an arrow when you
hold it up in the late afternoon sun), and we demonstrate in other (separate) work that the
act of solving viscoplasticity models by a return mapping algorithm is perfectly analogous
to vector projection.
Throughout this book, we use the term “ordinary” to refer to the three dimensional
physical space in which everyday engineering problems occur. The term “abstract” will be
used later when extending ordinary concepts to higher dimensional spaces, which is the
principal goal of generalized tensor analysis. Except where otherwise stated, the basis
 used for vectors and tensors in this book will be assumed regular (i.e.,
orthonormal and right-handed). Thus, all indicial formulas in this book use what most
people call rectangular Cartesian components. The abbreviation “RCS” is also frequently
used to denote “Rectangular Cartesian System.” Readers interested in irregular bases can
find a discussion of curvilinear coordinates at http://www.me.unm.edu/~rmbrann/
gobag.html (however, that document presumes that the reader is already familiar with the
notation and basic identities that are covered in this book).
STRUCTURES and SUPERSTRUCTURES
If you dislike philosophical discussions, then please skip this section. You may go directly to
page 21 without loss.
Tensor analysis arises naturally from the study of linear operators. Though tensor anal-
ysis is interesting in its own right, engineers learn it because the operators have some
physical significance. Junior high school children learn about zeroth order tensors when
they are taught the mathematics of straight lines, and the most important new concept at
that time is the slope of a line. In freshman calculus, students learn to find local slopes
(i.e., tangents to curves obtained through differentiation). Freshman students are also
given a discomforting introduction to first-order tensors when they are told that a vector is
“something with magnitude and direction”. For scientists, these concepts begin to “gel” in
physics classes (where “useful” vectors such as velocity or electric field are introduced,
e˜1 e˜2 e˜3
,
,
{
}

September 4, 2003 5:24 pm
Introduction
3
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and vector operations such as the cross-product begin to take on useful meanings). As stu-
dents progress, eventually their attention focuses on the vector operations themselves.
Some vector operations (such as the dot product) start with two vectors to produce a sca-
lar. Other operations (such as the cross product) produce another vector as output. Many
fundamental vector operations are linear, and the concept of a tensor emerges as naturally
as the concept of slope emerged when you took junior high algebra. Other vector opera-
tions are nonlinear, but a “tangent tensor” can be constructed in the same sense that a tan-
gent to a nonlinear curve can be found by freshman calculus students.
The functional or operational concept of a tensor deals directly with the physical
meaning of the tensor as an operation or a transformation. The “book-keeping” for charac-
terizing the transformation is accomplished through the use of structures. A structure is
simply a notation or syntax — it is an arrangement of individual constituent “parts” writ-
ten down on the page following strict “blueprints.” For example, a matrix is a structure
constructed by writing down a collection of numbers in tabular form (usually 
,
, or 
 arrays for engineering applications). The arrangement of two letters in the
form 
 is a structure that represents raising  to the power . In computer programing,
the structure “y^x” is often used to represent the same operation. The notation 
 is a
structure that symbolically represents the operation of differentiating  with respect to ,
and this operation is sometimes represented using the alternative structure “
”. All of
these examples of structures should be familiar to you. Though you probably don’t
remember it, they were undoubtedly quite strange and foreign when you first saw them.
Tensor notation (tensor structures) will probably affect you the same way. To make mat-
ters worse, unlike the examples we cited here, tensor notation varies widely among differ-
ent researchers. One person’s tensor notation often dramatically conflicts with notation
adopted by another researcher (their notations can’t coexist peacefully like 
 and “y^x”).
Neither researcher has committed an atrocity — they are both within rights to use what-
ever notation they desire. Don’t get into cat fights with others about their notation prefer-
ences. People select notation in a way that works best for their application or for the
audience they are trying to reach. Tensor analysis is such a rich field of study that variants
in tensor notation are a fact of life, and attempts to impose uniformity is short-sighted
folly. However, you are justified in criticizing another person’s notation if they are not
self-consistent within a single publication.
The assembly of symbols, 
, is a standard structure for division and 
 is a standard
structure for multiplication. Being essentially the study of structures, mathematics permits
us to construct unambiguous meanings of “superstructures” such as 
 and consistency
rules (i.e., theorems) such as 
 if 
 (1.1)
3
3
×
3
1
×
1
3
×
yx
y
x
dy
dx
------
y
x
y, x
yx
a
b--
rs
ab
rs
------
ab
rs
------
b
s--
=
a
r
=

September 4, 2003 5:24 pm
Introduction
4
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
We’ve already mentioned that the same operation might be denoted by different struc-
tures (e.g., “y^x” means the same thing as 
). Conversely, it’s not unusual for structures
to be overloaded, which means that an identical arrangement of symbols on the page can
have different meaning depending on the meanings of the constituent “parts” or depending
on context. For example, we mentioned that “
 if 
”, but everyone knows that
you shouldn’t use the same rule to cancel the “d”s in a derivative 
 to claim it equals .
The derivative is a different structure. It shares some manipulation rules with fractions, but
not all. Handled carefully, structure overloading can be a powerful tool. If, for example, 
and 
 are numbers and 
 is a vector, then structure overloading permits us to write
. Here, we overloaded the addition symbol “+”; it represents addition
of numbers on the left side but addition of vectors on the right. Structure overloading also
permits us to assert the heuristically appealing theorem 
; in this context, the hor-
izontal bar does not denote division, so you have to prove this theorem — you can’t just
“cancel” the “
”s as if these really were fractions. The power of overloading (making
derivatives look like fractions) is evident here because of the heuristic appearance that
they cancel just like regular fractions.
In this book, we use the phrase “tensor structure” for any tensor notation system that is
internally(self)-consistent, and which everywhere obeys its own rules. Just about any per-
son will claim that his or her tensor notation is a structure, but careful inspection often
reveals structure violations. In this book, we will describe one particular tensor notation
system that is, we believe, a reliable structure.* Just as other researchers adopt a notation
system to best suit their applications, we have adopted our structure because it appears to
be ideally suited to generalization to higher-order applications in materials constitutive
modeling. Even though we will carefully outline our tensor structure rules, we will also
call attention to alternative notations used by other people. Having command of multiple
notation systems will position you to most effectively communicate with others. Never
(unless you are a professor) force someone else to learn your tensor notation preferences
— you should speak to others in their language if you wish to gain their favor.
We’ve already seen that different structures are routinely used to represent the same
function or operation (e.g. 
 means the same thing as “y^x”). Ideally, a structure should
be selected to best match the application at hand. If no conventional structure seems to do
a good job, then you should feel free to invent your own structures or superstructures.
However, structures must always come equipped with unambiguous rules for definition,
assembly, manipulation, and interpretation. Furthermore, structures should obey certain
“good citizenship” provisos.
(i)
If other people use different notations from your own, then
you should clearly provide an explanation of the meaning of
your structures. For example, in tensor analysis, the structure
* Readers who find a breakdown in our structure are encouraged to notify us.
yx
ab
rs
------
b
s--
=
a
r
=
dy
dx
------
y
x--
α
β
v
α
β
+
(
)v
αv
βv
+
=
dy
dx
------dx
dz
------
dy
dz
------
=
dx
yx

September 4, 2003 5:24 pm
Introduction
5
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 often has different meanings, depending on who writes
it down; hence, if you use this structure, then you should
always define what you mean by it.
(ii)
Notation should not grossly violate commonly adopted “stan-
dards.” By “standards,” we are referring to those everyday
bread-and-butter structures that come implicitly endowed
with certain definitions and manipulation rules. For example,
“
” had darned will better stand for addition — only a
deranged person would declare that the structure “
”
means division of x by y (something that the rest of us would
denote by , 
, 
 or even 
). Similarly, the words
you use to describe your structures should not conflict with
universally recognized lexicon of mathematics. (see, for
example, our discussion of the phrase “inner product.”)
(iii)
Within a single publication, notation should be applied con-
sistently. In the continuum mechanics literature, it is not
uncommon for the structure 
 (called the gradient of a vec-
tor) to be defined in the nomenclature section in terms of a
matrix whose 
 components are 
. Unfortunately,
however, within the same publication, some inattentive
authors later denote the “velocity gradient” by 
 but with
components 
— that’s a structure self-consistency
violation!
(iv)
Exceptions to structure definitions are sometimes unavoid-
able, but the exception should always be made clear to the
reader. For example, in this book, we will define some
implicit summation rules that permit the reader to know that
certain things are being summed without a summation sign
present. There are times, however, that the summation rules
must be suspended and structure consistency demands that
these instances must be carefully called out.
What is a scalar? What is a vector?
This physical introduction may be skipped. You may go directly to page 21 without loss.
We will frequently exploit our assumption that you have some familiarity with vector
analysis. You are expected to have a vague notion that a “scalar” is something that has
magnitude, but no direction; examples include temperature, density, time, etc. At the very
least, you presumably know the sloppy definition that a vector is “something with length
and direction.” Examples include velocity, force, and electric field. You are further pre-
sumed to know that an ordinary engineering vector can be described in terms of three
components referenced to three unit base vectors. A prime goal of this book is to improve
this baseline “undergraduate’s” understanding of scalars and vectors.
A:B
x
y
+
x
y
+
x
y-- x y
⁄
x
y
÷
y  x
v
∇
ij
∂vj ∂xi
⁄
v
∇
∂vi ∂xj
⁄

September 4, 2003 5:24 pm
Introduction
6
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
In this book, scalars are typeset in plain italic (
). Vectors are typeset in bold
with a single under-tilde (for example, ), and their components are referred to by num-
bered subscripts (
). Introductory calculus courses usually denote the orthonormal
Cartesian base vectors by 
, but why give up so many letters of the alphabet? We
will use numerically subscripted symbols such as 
 or 
 to denote
the orthonormal base vectors. 
As this book progresses, we will improve and refine our terminology to ultimately pro-
vide the mathematician’s definition of the word “vector.” This rigorous (and therefore
abstract) definition is based on testing the properties of a candidate set of objects for cer-
tain behaviors under proposed definitions for addition and scalar multiplication. Many
engineering textbooks define a vector according to how the components change upon a
change of basis. This component transformation viewpoint is related to the more general
mathematician’s definition of “vector” because it is a specific instance of a discerning def-
inition of membership in what the mathematician would see as a candidate set of
“objects.” For many people, the mathematician’s definition of the word “vector” sparks an
epiphany where it is seen that a lot of things in math and in nature function just like ordi-
nary (engineering) vectors. Learning about one set of objects can provide valuable insight
into a new and unrelated set of objects if it can be shown that both sets are vector spaces in
the abstract mathematician’s sense.
What is a tensor?
This section may be skipped. You may go directly to page 21 without loss.
In this book we will assume you have virtually zero pre-existing knowledge of tensors.
Nonetheless, it will be occasionally convenient to talk about tensor concepts prior to care-
fully defining the word “tensor,” so we need to give you a vague notion about what they
are. Tensors arise when dealing with functions that take a vector as input and produce a
vector as output. For example, if a ball is thrown at the ground with a certain velocity
(which is a vector), then classical physics principals can be use to come up with a formula
for the velocity vector after hitting the ground. In other words, there is presumably a func-
tion that takes the initial velocity vector as input and produces the final velocity vector as
output: 
. When grade school kids learn about scalar functions
(
), they first learn about straight lines. Later on, as college freshman, they learn
the brilliant principle upon which calculus is based: namely, nonlinear functions can be
regarded as a collection of infinitesimal straight line segments. Consequently, the study of
straight lines forms an essential foundation upon which to study the nonlinear functions
that appear in nature. Like scalar functions, vector-to-vector functions might be linear or
non-linear. Very loosely speaking, a vector-to-vector transformation 
 is linear if
the components of the output vector  can be computed by a square 
 matrix 
 act-
ing on the input vector :*
* If you are not familiar with how to multiply a 
 matrix times a 
 array, see page 22.
a b c …
, , ,
v˜
v1 v2 v3
,
,
i j k
, ,
{
}
e˜1 e˜2 e˜3
,
,
{
}
E˜ 1 E˜ 2 E˜ 3
,
,
{
}
v˜
final
f v˜
initial
(
)
=
y
f x
( )
=
y
˜
f x˜
( )
=
y
˜
3
3
×
m
[
]
x˜
3
3
×
3
1
×

September 4, 2003 5:24 pm
Introduction
7
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (1.2)
Consider, for example, our function that relates the
pre-impact velocity to the post-impact velocity for a
ball bouncing off a surface. Suppose the surface is fric-
tionless and the ball is perfectly elastic. If the normal to
the surface points in the 2-direction, then the second
component of velocity will change sign while the other
components will remain unchanged. This relationship
can be written in the form of Eq. (1.2) as
 (1.3)
The matrix 
 in Eq. (1.2) plays a role similar to the role played by the slope 
 in the
most rudimentary equation for a scalar straight line, 
.* For any linear vector-to-
vector transformation, 
, there always exists a second-order tensor [which we will
typeset in bold with two under-tildes, 
] that completely characterizes the transforma-
tion.† We will later explain that a tensor 
 always has an associated 
 matrix of com-
ponents. Whenever we write an equation of the form
,
 (1.4)
it should be regarded as a symbolic (more compact) expression equivalent to Eq. (1.2). As
will be discussed in great detail later, a tensor is more than just a matrix. Just as the com-
ponents of a vector change when a different basis is used, the components of the 
matrix that characterizes a tensor will also change when the underlying basis changes.
Conversely, if a given 
 matrix fails to transform in the necessary way upon a change
of basis, then that matrix must not correspond to a tensor. For example, let’s consider
again the bouncing ball model, but this time, we will set up the basis differently. If we had
declared that the normal to the surface pointed in the 3-direction instead of the 2-direction,
then Eq. (1.3) would have ended up being
* Incidentally, the operation 
 is not linear. The proper term is “affine.” Note that 
. Thus, by studying linear functions, you are only a step away from affine functions (just 
add the constant term after doing the linear part of the analysis).
† Existence of the tensor is ensured by the Representation Theorem, covered later in Eq. 9.7.
y1
y2
y3
M11 M12 M13
M21 M22 M23
M31 M32 M33
x1
x2
x3
=
v˜
initial
v˜
final
e˜1
e˜2
v1
final
v2
final
v3
final
1 0 0
0
1
–
0
0 0 1
v1
initial
v2
initial
v3
initial
=
M
[
]
m
y
mx
=
y
mx
b
+
=
y
b
–
mx
=
y
˜
f x˜
( )
=
M˜˜M˜˜
3
3
×
y
˜
M˜˜
x˜
•
=
3
3
×
3
3
×

September 4, 2003 5:24 pm
Introduction
8
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (1.5)
Note that changing the basis forced a change in the 
matrix. Less trivially, if we had set up the basis by rotat-
ing it 
 clockwise, then the formula would have been
given by the far less intuitive or obvious relationship
 (1.6)
We have not yet covered the formal process for determining how the components of the
tensor 
 must vary with a change in basis, so don’t be dissuaded if you don’t know how
we came up with the components shown in Eq. (1.6). One thing you can do at this stage is
double-check the equation for some special cases where you know what the answer should
be. For example, with this rotated basis, if the ball has an incoming trajectory that happens
to be parallel to 
, then examining the picture should tell you that the outgoing trajectory
should be parallel to 
, and the above matrix equation does indeed predict this result.
Another special case you can consider is when the incoming trajectory is headed straight
down toward the surface so that 
 is parallel to 
, which corresponds to a com-
ponent array 
. Then the matrix operation of Eq. (1.6) would give
 is parallel to 
, or 
 (1.7)
This means the outgoing final velocity is parallel to 
, which (referring to the
sketch) is straight up away from the surface, as expected. The key point here is: if you
know the component matrix for a tensor with respect to one basis, then there exists a for-
mal procedure (discussed later in this book) that will tell you what the component matrix
must look like with respect to a different basis.
At this point, we have provided only an extremely vague and undoubtedly disquieting
notion of the meaning of the word “tensor.” The sophistication and correctness of this pre-
liminary definition is on a par with the definition of a vector as “something with length
and direction.” A tensor is the next step in complexity — it is a mathematical abstraction
or book-keeping tool that characterizes how something with length and direction trans-
forms into something else with length and direction. It plays a role in vector analysis simi-
lar to the concept of slope in algebra.
v1
final
v2
final
v3
final
1 0 0
0 1 0
0 0
1
–
v1
initial
v2
initial
v3
initial
=
v˜
initial
v˜
final
e˜1
e˜2
M
[
]
45°
v1
final
v2
final
v3
final
0 1 0
1 0 0
0 0 1
v1
initial
v2
initial
v3
initial
=
M˜˜
e˜1
e˜2
v˜
initial
e˜1
e˜2
–
1
1
–
0
,
,
{
}
v1
final
v2
final
v3
final
0 1 0
1 0 0
0 0 1
1
1
–
0
1
–
1
0
e˜2
e˜1
–

September 4, 2003 5:24 pm
Introduction
9
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Examples of tensors in materials mechanics. 
This section may be skipped. You may go directly to page 21 without loss.
The stress tensor. In materials modeling, the “stress tensor” plays a pivotal role. If a
blob of material is subjected to loads (point forces, body forces, distributed pressures, etc.)
then it generally reacts with some sort of internal resistance to these loads (viscous, iner-
tial, elastic, etc.). As a “thought experiment”, imagine that you could pass a plane through
the blob (see Fig. 1.1). To keep the remaining half-blob in the same shape it was in before
you sliced it, you would need to approximate the effect of the removed piece by imposing
a traction (i.e., force per unit area) applied on the cutting plane. 
Force is a vector, so traction (which is just force per unit area) must be a vector too.
Intuitively, you can probably guess that the traction vector needs to have different values
at different locations on the cutting plane, so traction naturally is a function of the position
vector . The traction at a particular location  also depends on the orientation of the cut-
ting plane. If you pass a differently oriented plane through the same point 
 in a body,
then the traction vector at that point will be different. In other words, traction depends on
both the location in the body and the orientation of the cutting plane. Stated mathemati-
cally, the traction vector  at a particular position  varies as a function of the plane’s out-
ward unit normal 
. This is a vector-to-vector transformation! In this case, we have one
vector (traction) that depends on two vectors, 
 and 
. Whenever attempting to under-
stand a function of two variables, it is always a good idea to consider variation of each
TRACTION:
force per unit 
Figure 1.1.
The concept of traction.   When a body is conceptually split in half by a planar surface, the
effect of one part of the body on the other is approximated by a “traction”, or force per unit area, applied
on the cutting plane. Traction is an excellent mathematical model for macroscale bodies (i.e., bodies con-
taining so many atom or molecules that they may be treated as continuous). Different planes will generally
have different traction vectors. 
σ11
σ21
σ12
σ22
area.
Traction depends on
orientation of the
cutting plane
x˜
x˜
x˜
t˜
x˜
n˜
x˜
n˜

September 4, 2003 5:24 pm
Introduction
10
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
variable separately, observing how the function behaves when only one variable changes
while the other is held constant. Presumably, at a given location , a functional relation-
ship exists between the plane’s orientation 
 and the traction vector . Using the contin-
uum mechanics version of the famous 
 dynamics equation, Cauchy proved that
this relationship between traction and the plane orientation must be linear. Whenever you
discover that a relationship is linear, you can call upon a central concept of tensor analy-
sis* to immediately state that it is expressible in the form of Eq. (1.2). In other words,
there must exist a tensor, which we will denote 
 and refer to as “stress,” such that
 (1.8)
Remember that this conclusion resulted from considering variation of 
 while holding 
fixed. The dependence of traction on  might still be nonlinear, but it is a truly monumen-
tal discovery that the dependence on 
 is so beautifully simple. Written out, showing the
independent variables explicitly,
 (1.9)
This means the stress tensor itself varies through space (generally in a nonlinear manner),
but the dependence on the cutting plane’s normal 
 is linear. As suggested in Fig. 1.1, the
components of the stress tensor can be found if the traction is known on the faces of the
cube whose faces are aligned with the coordinate directions. Specifically, the 
 column
of the component matrix 
 contains the traction vector acting on the 
 face of the
cube. These “stress elements” don’t really have finite spatial extent — they are infinitesi-
mal cubes and the tractions acting on each face really represent the traction vectors acting
on the three coordinate planes that pass through the same point in the body. 
* Namely, the Representation Theorem covered later in Eq. 9.7.
x˜
n˜
t˜
F
ma
=
σ
˜˜
t˜
σ
˜˜
n˜
•
=
n˜
x˜
x˜n˜
t˜ x˜ n˜
,
(
)
σ
˜˜
x˜
( )
n˜
•
=
n˜
jth
σ
˜˜
[ ]
jth

September 4, 2003 5:24 pm
Introduction
11
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The deformation gradient tensor. The stress tensor characterizes the local orienta-
tion-dependent loads (force per area) experienced by a body. A different tensor — the
“deformation gradient” — characterizes the local volume changes, local orientation
changes, and local shape changes associated with deformation. If you paint an infinitesi-
mal square onto the surface of a blob of putty, then the square will deform into a parallelo-
gram (Fig. 1.2). 
The unit* base vectors 
 forming the edges of the initial square, will stretch
and rotate to become new vectors, 
, forming the edges of the deformed parallelo-
gram. These ideas can be extended into 3D if one pretends that a cube could be “painted”
inside the putty. The three unit vectors forming the edges of the initial cube deform into
three stretched and rotated vectors forming the edges of the deformed parallelepiped.
Assembling the three 
 vectors into columns of a 
 matrix will give you the matrix
of the deformation gradient tensor. Of course, this is only a qualitative description of the
deformation gradient tensor. A more classical (and quantified) definition of the deforma-
tion gradient tensor starts with the assertion that each point 
 in the currently deformed
body must have come from some unique initial location 
 in the initial undeformed refer-
ence configuration, you can therefore claim that a mapping function 
 must exist.
This is a vector-to-vector transformation, but it is generally not linear. Recall that tensors
characterize linear functions that transform vectors to vectors. However, just as a nonlin-
ear algebraic function (e.g., a parabola or a cosine curve or any other nonlinear function)
can be viewed as approximately linear in the limit of infinitesimal portions (the local slope
of the straight tangent line is determined by differentiating the function), the deformation
mapping is linear when expressed in terms of infinitesimal material line segments 
 and
. Specifically, if 
, then the deformation gradient tensor 
 is defined so that
. Not surprisingly, the Cartesian component matrix for 
 is given by
* Making the infinitesimal square into a unit square is merely a matter of choosing a length unit 
appropriately. All that really matters here is the ratio of deformed lengths to initial lengths.
Figure 1.2.
Stretching silly putty.   The square flows with the material to become a parallel-
ogram. Below each figure, is shown how the square and parallelogram can be described by two
vectors.
E˜ 1
E˜ 2
g
˜ 1
g
˜ 2
E˜ 1 E˜ 2
,
{
}
g
˜ 1 g
˜ 2
,
{
}
g
˜ i
3
3
×
x˜
X˜
x˜
f X˜
(
)
=
dX˜
dx˜
x˜
f X˜
(
)
=
F˜˜
dx˜
F˜˜
dX˜
•
=
F˜˜

September 4, 2003 5:24 pm
Introduction
12
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
. While this might be the mathematical formula you will need to use to
actually compute the deformation gradient, it is extremely useful to truly understand the
basic physical meaning of the tensor too (i.e., how it shows how squares deform to paral-
lelepipeds). All that is needed to determine the components of this (or any) tensor is
knowledge of how that transformation changes any three linearly independent vectors. 
Vector and Tensor notation — philosophy
This section may be skipped. You may go directly to page 21 without loss.
Tensor notation unfortunately remains non-standardized, so it’s important to at least
scan any author’s tensor notation section to become familiar with his or her definitions and
overall approach to the subject. Authors generally select a vector and tensor notation that
is well suited for the physical problem of interest to them. In general, no single notation
should be considered superior to another. 
Our tensor analysis notational preferences are motivated to simplify our other (more
complicated and contemporary) applications in materials modeling. Different technical
applications frequently call for different notational conventions. The unfortunate conse-
quence is that it often takes many years to master tensor analysis simply because of the
numerous (often conflicting) notations currently used in the literature. Table 1.1, for
example, shows a sampling of how our notation might differ from other books you might
read about tensor analysis. This table employs some conventions (such as implicit indicial
notation) that we have not yet defined, so don’t worry that some entries are unclear. The
only point of this table is to emphasize that you must not presume that the notation you
learn in this book will necessarily jibe with the notation you encounter elsewhere. Note,
for example, that our notation 
 is completely different from what other people might
intend when they write 
. As a teaching tool, we indicate tensor order (also called
rank, to be defined soon) by the number of “under-tildes” placed under a symbol. You
won’t see this done in most books, where tensors and vectors are typically typeset in bold
and it is up to you to keep track of their tensor order.
Table 1.1: Some conflicting notations
Operation
Cartesian Indicial 
Notation
Our 
Notation
Other 
Notations
Linear transformation of a
vector  into a new vector 
Composition of two tensors
 and 
Inner product of two tensors
 and 
Dot product of a vector 
into a linear transformation
Fij
∂xi ∂Xj
⁄
=
A˜˜
B˜˜
•
A
B
•
x˜
v˜
vi
Fijxj
=
v˜
F˜˜
x˜
•
=
v
Fx
=
A˜˜
B˜˜
Cij
AikBkj
=
C˜˜
A˜˜
B˜˜
•
=
C
AB
=
A˜˜
B˜˜
s
AijBij
=
s
A˜˜
:B˜˜
=
s
A
B
•
=
w˜
s
wiFijxj
=
w˜
F˜˜
x˜
•
•
s
w
Fx
•
=

September 4, 2003 5:24 pm
Introduction
13
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
In this book, we will attempt to cover the most popular tensor analysis notations. One
important notation system not covered in this book is the one used with general curvilinear
coordinates. You can recognize (or suspect) that a person is using general curvilinear nota-
tion if they write formulas with indices positioned as both subscripts and superscripts (for
example, where we would write 
 in Cartesian notation, a person using curvilin-
ear notation might instead write something like 
). When an author is using gen-
eral curvilinear notation, their calculus formulas will look somewhat similar to the
Cartesian calculus formulas we present in this book, but their curvilinear formulas will
usually have additional terms involving strange symbols like 
 or 
 called “Christof-
fel” symbols. Whenever you run across indicial formulas that involve these symbols or
when the author uses a combination of subscripts and superscripts, then you are probably
reading an analysis written in general curvilinear notation, which is not covered in this
book. In this case, you should use this book as a starting point for first learning tensors in
Cartesian systems, and then move on to our separate book [6] for generalizations to curvi-
linear notation. An alternative approach is to “translate” an author’s curvilinear equations
into equivalent Cartesian equations by changing all superscripts into ordinary subscripts
and by setting every Christoffel symbol equal to zero. This translation is permissible only
if you are certain that the original analysis applies to a Euclidean space (i.e., to a space
where it is possible to define a Cartesian coordinate system). If, for example, the author’s
analysis was presented for the 2D curvilinear surface of a sphere, then it cannot be trans-
lated into Cartesian notation because the surface of a sphere is a non-Euclidean space (you
can’t draw a map of the world on a 2D piece of paper without distorting the countries). On
the other hand, if the analysis was presented for ordinary 3D space, and the author merely
chose to use a spherical coordinate system, then you are permitted to translate the results
into Cartesian notation because ordinary 3D space admits the introduction of a Cartesian
system. 
Any statement we make here in this book that is cast in direct structured notation
applies equally well to Cartesian and curvilinear systems. Direct structured equations
never used components or base vectors. They represent physical operations with meanings
quite independent of whatever coordinate or basis you happen to use. For example, when
we say that 
 equals the magnitudes of  and 
 times the cosine of the angle between
them, that interpretation is valid regardless of your coordinate system. However, when we
say 
, then that statement (because it involves indexed com-
ponents) holds only for Cartesian systems. The physical operation 
 is computed one
way in Cartesian coordinates and another way in curvilinear — the value and meaning of
the final result is the same for both systems.
vi
Fijxj
=
vi
F  j
i xj
=
k
ij
{ }
Γij
k
v˜
w˜
•
v˜
w˜
v˜
w˜
•
v1w1
v2w2
v3w3
+
+
=
v˜
w˜
•

September 4, 2003 5:24 pm
Terminology from functional analysis
14
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
2. Terminology from functional analysis
RECOMMENDATION: Do not read this section in extreme detail. Just scan 
it to get a basic idea of what terms and notation are defined here. Then go 
into more practical stuff starting on page 21. Everything discussed in this 
section is listed in the index, so you can come back here to get definitions of 
unfamiliar jargon as the need arises. 
Vector, tensor, and matrix analysis are subsets of a more general area of study called
functional analysis. One purpose of this book is to specialize several overly-general results
from functional analysis into forms that are the more convenient for “real world” engi-
neering applications where generalized abstract formulas or notations are not only not
necessary, but also damned distracting. Functional analysis deals with operators and their
properties. For our purposes, an operator may be regarded as a function 
. If the argu-
ment of the function is a vector and if the result of the function is also vector, then the
function is usually called a transformation because it transforms one vector to become a
new vector. 
In this book, any non-underlined quantity is just an ordinary number (or, using more
fancy jargon, scalar* or field member). Quantities such as  or 
 with a single squiggly
underline (tilde) are vectors. Quantities such as 
 or 
 with two under-tildes are second-
order tensors. In general, the number of under-tildes beneath a symbol indicates to you the
order of that tensor (for this reason, scalars are sometimes called zeroth-order tensors and
vectors are called first-order tensors). Occasionally, we will want to make statements that
apply equally well to tensors of any order. In that case, we might use single straight under-
lines. Quantities with single straight underlines (e.g.,  or ) might represent scalars, vec-
tors, tensors, or other abstract objects. We follow this convention throughout the text;
namely, when discussing a concept that applies equally well to a tensor of any order (sca-
lar, vector, second-order tensor), then we will use straight underlines or, possibly only
bold typesetting with no underlines at all.† When discussing “objects” of a particular
* Strictly speaking, the term “scalar” does not apply to any old number. A scalar must be a number 
(such as temperature or density) whose value does not change when you reorient the basis. For 
example, the magnitude of a vector is a scalar, but any individual component of a vector (whose 
value does depend on the basis) is not a scalar — it is just a number.
“Change isn’t painful, but resistance to 
change is.” 
— unattributed 
f x
( )
v˜
a˜
A˜˜
T˜˜
x
y

September 4, 2003 5:24 pm
Terminology from functional analysis
15
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
order, then we will use “under-tildes”, and the total number of under-tildes will equal the
order of the object. The use of under-tildes and underlines is a teaching tool. In journal
publications, you will usually see vectors and tensors typeset in bold with no underlines,
in which case it will be up to you to keep track of the tensor order of the quantities.
Some basic terminology from functional analysis is defined very loosely below. More
mathematically correct definitions will be given later, or can be readily found in the litera-
ture [e.g., Refs 33, 28, 29, 30, 31, 12]. Throughout the following list, you are presumed to
be dealing with a set of “objects” (scalars, vectors, or perhaps something more exotic) for
which scalar multiplication and “object” addition have well-understood meanings that you
(or one of your more creative colleagues) have dreamed up. The diminutive single
dot “
” multiplication symbol represents ordinary multiplication when the arguments
are just scalars. Otherwise, it represents the appropriate inner product depending on the
arguments (e.g., it’s the vector dot “
” product if the arguments are vectors; it’s the ten-
sor double dot “ ” product — defined later — when the arguments are tensors); a mathe-
matician’s definition of the “inner product” may be found on page 233.
• A “linear combination” of two objects  and  is any object  that can be 
expressed in the form 
 for some choice of scalars 
 and 
. A “linear 
combination” of three objects ( , , and ) is any object  that can be expressed 
in the form 
. Of course, this definition makes sense only if you have 
an unambiguous understanding of what the objects represent. Moreover, you must 
have a definition for scalar multiplication and addition of the objects. If, for example, 
the “objects” are 
 matrices, then scalar multiplication 
 of some matrix 
 would be defined 
 and the linear combination 
 
would be a 
 matrix given by 
. 
• A function  is “linear” if 
 for all 
, , , and . This 
means that applying the function to a linear combination of objects will give the same 
result as instead first applying the function to the objects, and then computing the 
linear combination afterward. Linearity is a profoundly useful property. Incidentally, 
the definition of linearity demands that a linear function must give zero when applied 
to zero: 
. Therefore, the classic formula for a straight line, 
, is not a linear function unless the line passes through the origin 
(i.e., unless 
). Most people (including us) will sloppily use the term “linear” 
anyway, but the correct term for the straight line function is “affine.”
• A transformation  is “affine” if it can be expressed in the form 
, 
where  is constant and  is a linear function.
• A transformation  is “self-adjoint” if 
. When applied to a linear 
† At this point, you are not expected to already know what is meant by the term “tensor,” much less 
the “order” of a tensor or the meaning of the phrase “inner product.” For now, consider this section 
to apply to scalars and vectors. Just understand that the concepts reviewed in this section will also 
apply in more general tensor settings, once learned.
  ⋅
 
 
•
:
x
y
r
r
αx
βy
+
=
α
β
x y
z
r
r
αx
βy
γz
+
+
=
1
2
×
αx
x
x1 x2
,
[
]
=
αx1 αx2
,
[
]
αx
βy
+
1
2
×
αx1
βy1
+
αx2
βy2
+
,
[
]
f
f αx
βy
+
(
)
αf x
( )
βf y
( )
+
=
α β x
y
f 0
( )
0
=
y
f x
( )
mx
b
+
=
=
b
0
=
g
g x
( )
f x
( )
b
+
=
b
f
f
y f x
( )
⋅
x f y
( )
⋅
=

September 4, 2003 5:24 pm
Terminology from functional analysis
16
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
vector-to-vector transformation, the property of self-adjointness will imply that the 
associated tensor must be symmetric (or “hermitian” if complex vectors are 
permitted. This document limits its scope to real vectors except where explicitly noted 
otherwise, so don’t expect comments like this to continue to litter the text. It’s your 
job to remember that many formulas and theorems in this book might or might not 
generalize to complex vectors.
• A transformation  is a projector if 
. The term “idempotent” is also 
frequently used. A projector is a function that will keep on returning the same result 
if it is applied more than once. Projectors that appear in classical Newtonian physics 
are usually linear, although there are many problems of engineering interest that 
involve nonlinear projectors -- if one is attuned enough to look for them.
• Any operator  must have a domain of admissible values of  for which 
 is 
well-defined. Throughout this book, the domain of a function must be inferred by you 
so that the function “makes sense.” For example, if 
, then you are 
expected to infer that the domain is the set of nonzero . We aren’t going to waste 
your time by saying it. Furthermore, throughout this book, all scalars, vectors and 
tensors are assumed to be real unless otherwise stated. Consequently, whenever you 
see 
, you may assume the result is non-negative unless you are explicitly told that 
 might be complex.
• The “codomain” of an operator is the set of all  values such that 
. For 
example, if 
, then the codomain is the set of nonnegative numbers,*  
whereas the range is the set of reals. The term range space will often be used to 
refer to the range of a linear operator. 
• A set S is said to be “closed” under a some particular operation if application of that 
operation to a member of S always gives a result that is itself a member of S. For 
example, the set of all symmetric matrices† is closed under matrix addition because 
the sum of two symmetric matrices is itself a symmetric matrix. By contrast, set of all 
orthogonal matrices is not closed under matrix addition because the sum of two 
orthogonal matrices is not generally itself an orthogonal matrix. Similarly, the set of 
all unit vectors is not closed under vector addition because the sum of two unit vectors 
does not result in a unit vector.
• The null space of an operator is the set of all  for which 
.
• For each input , a well-defined proper operator  must give a unique output 
. In other words, a single  must never correspond to two or more possible 
values of . The operator is called one-to-one if the reverse situation also holds. 
* This follows because we have already stated that  is to be presumed real.
† Matrices are defined in the next section.
f
f f x
( )
(
)
f x
( )
=
f
x
f x
( )
f x
( )
1 x
⁄
=
x
x2
x
y
y
f x
( )
=
f x
( )
x2
=
x
x
f x
( )
0
=
x
f
y
f x
( )
=
x
y

September 4, 2003 5:24 pm
Terminology from functional analysis
17
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Namely,  is one-to-one if each  in the codomain of  is obtained by a unique  such 
that 
. For example, the function 
 is not one-to-one because a single 
value of  can be obtained by two values of  (e.g., 
 can be obtained by 
 or 
). 
• Given two proper functions 
 and 
, you may presume that a 
parametric relationship exists between  and , but this relationship (sometimes 
called an implicit function) might not be a proper function at all. Because  and  
are proper functions, it is true that each value of the parameter  will correspond to 
unique values of  and . When these values are assembled together into a graph or 
table over the range of every possible value of , then the result is called a phase 
diagram or phase space. For example, if 
 and 
, then the phase 
diagram would be a circle in  versus  phase space.
• If a function is one-to-one, then it is invertible. The inverse 
 is defined such that 
.
• A set of “objects” is linearly independent if no member of the set can be written 
as a linear combination of the other members of the set. If, for example, the “objects” 
are 
 matrices, then the three-member set 
 is not linearly 
independent because the third matrix can be expressed as a linear combination of the 
first two matrices; namely, 
.
• The span of a collection of vectors is the set of all vectors that can be written as a 
linear combination of the vectors in the collection. For example, the span of the two 
vectors 
 and 
 is the set of all vectors expressible in the form 
. This set of vectors represents any vector 
 
for which 
. The starting collection of vectors does not have to be linearly 
independent in order for the span to be well-defined. Linear spaces are often 
described by using spans. For example, you might hear someone refer to “the plane 
spanned by vectors  and ,” which simply means the plane containing  and .
• The dimension of a set or a space equals the minimum quantity of “numbers” that 
you would have to specify in order to uniquely identify a member of that set. In 
practice, the dimension is often determined by counting some nominally sufficient 
quantity of numbers and then subtracting the number of independent constraints that 
those numbers must satisfy. For example, ordinary engineering vectors are specified 
by giving three numbers, so they are nominally three dimensional. However, the set 
of all unit vectors is two-dimensional because the three components of a unit vector 
 must satisfy the one constraint, 
. We later find that an 
engineering “tensor” can be specified in terms of a 
 matrix, which has nine 
components. Therefore engineering “tensor space” is nine-dimensional. On the other 
hand, the set of all symmetric tensors is six-dimensional because the nine nominal 
f
y
f
x
y=f x
( )
f x
( )
x2
=
y
x
y=4
x=2
x= 2
–
y
g t( )
=
x
h t( )
=
y
x
g
h
t
y
x
t
y
t
sin
=
x
t
cos
=
y
x
f 1
–
x=f 1
–
y
( )
1
2
×
1 2
,
[
]
3 4
,
[
]
5 6
,
[
]
,
,
{
}
5 6
,
[
]
1
–
(
) 1 2
,
[
]
2
( ) 3 4
,
[
]
+
=
1 1 0
, ,
{
}
1
1
–
0
,
,
{
}
α1 1 1 0
, ,
{
}
α2 1
1
–
0
,
,
{
}
+
x1 x2 x3
,
,
{
}
x3=0
a˜
b˜
a˜
b˜
n˜
n1
2
n2
2
n3
2
+
+
1
=
3
3
×

September 4, 2003 5:24 pm
Terminology from functional analysis
18
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
components must obey three constraints (
, 
, and 
). 
• Note that the set of all unit vectors forms a two-dimensional subset of the 3D space 
of ordinary engineering vectors. This 2D subset is curvilinear — each unit vector can 
be regarded as a point on the surface of the unit sphere. Sometimes a subset will be 
flat. For example, the set of all vectors whose first component is zero (with respect to 
some fixed basis) represents a “flat” space (it is the plane formed by the second and 
third coordinate axes). The set of all vectors with all three components being equal is 
geometrically a straight line (pointing in the 111 direction). It is always worthwhile 
spending a bit of time getting a feel for the geometric shape of subsets. If the shape is 
“flat” (e.g. a plane or a straight line), then it is called a linear manifold (defined 
better below). Otherwise it is called curvilinear. If a surface is curved but could be 
“unrolled” into a flat surface or into a line, then the surface is called Euclidean; 
qualitatively, a space is Euclidean if it is always possible to set up a coordinate grid 
covering the space in such a manner that the coordinate grid cells are all equal sized 
squares or cubes. The surface of a cylinder is both curvilinear and Euclidean. By 
contrast, the surface of a sphere is curvilinear and non-Euclidean. Mapping a non-
Euclidean space to Euclidean space will always involve distortions in shape and/or 
size. That’s why maps of the world are always distorted when printed on two-
dimensional sheets of paper.
• If a set is closed under vector addition and scalar multiplication (i.e., if every linear 
combination of set members gives a result that is also in the set), then the set is called 
a linear manifold, or a linear space. Otherwise, the set is curvilinear. The set of 
all unit vectors is a curvilinear space because a linear combination of unit vectors does 
not result in a unit vector. Linear manifolds are like planes that pass through the 
origin, though they might be “hyperplanes,” which is just a fancy word for a plane 
of more than just two dimensions. Linear spaces can also be one-dimensional. Any 
straight line that passes through the origin is a linear manifold.
• Zero must always be a member of a linear manifold, and this fact is often a great place 
to start when considering whether or not a set is a linear space. For example, you can 
assert that the set of unit vectors is not a linear space by simply noting that the zero 
vector is not a unit vector. 
• A plane that does not pass through the origin must not be a linear space. We know this 
simply because such a plane does not contain the zero vector. This kind of plane is 
called an “affine” space. An “affine” space is a set that would become a linear space 
if the origin were to be moved to any single point in the set. For example, the point 
 lies on the straight line defined by the equation, 
. If you move the 
origin from 
 to a new location 
, and introduce a change of 
variables 
 and 
, then the equation for this same line described 
with respect to this new origin would become 
, which does describe a 
T12
T21
=
T23
T32
=
T31
T13
=
0 b
,
(
)
y
mx
b
+
=
O
0 0
,
(
)
=
O*
0 b
,
(
)
=
x*
x
0
–
=
y*
y
b
–
=
y*
mx*
=

September 4, 2003 5:24 pm
Terminology from functional analysis
19
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
linear space. Stated differently, a set  is affine if every member  in that set is 
expressible in the form of a constant vector  plus a vector 
 that does belong to a 
linear space. Thus, learning about the properties of linear spaces is sufficient to learn 
most of what you need to know about affine spaces.
• Given an n-dimensional linear space, a subset of members of that space is basis if 
every member of the space can be expressed as a linear combination of members of 
the subset. A basis always contains exactly as many members as the dimension of the 
space.
• A “binary” operation is simply a function or transformation that has two arguments. 
For example, 
 is a binary operation.
• A binary operation 
 is called “bilinear” if it is linear with respect to each of 
its arguments individually; i.e., 
 and 
. Later on, after we introduce the notion 
of tensors, we will find that scalar-valued bilinear functions are always expressible in 
the form 
, where 
 is a constant second-order tensor.
• The notation for an ordinary derivative 
 will, in this book, carry with it several 
implied assumptions. The very act of writing 
 tells you that  is expressible 
solely as a function of  and that function is differentiable. 
• An “equation” of the form 
 is not an equation at all. This will be our 
shorthand notation indicating that  is expressible as a function of .
• The notation for a partial derivative 
 tells you that  is expressible as a 
function of  and something else. A partial derivative is meaningless unless you 
know what the “something else” is. Consider, for example, polar coordinates  and 
 related to Cartesian coordinates  and  by 
 and 
. Writing 
 is sloppy. You might suspect that this derivative is holding  constant, but it 
might be that it was really intended to hold  constant. All partial derivatives in this 
book will indicate what variable or variables are being held constant by showing them 
as subscripts. Thus, for example, 
 is completely different from 
. 
An exception to this convention exists for derivatives with respect to subscripted 
quantities. If for example, it is known that  is a function of three variables 
, 
then 
 should be interpreted to mean 
.
• An expression 
 is called an exact differential if there exists a 
function 
 such that 
. A necessary and sufficient condition for 
the potential function  to exist is 
. If so, then it must be true 
that 
 and 
. You would integrate these 
equations to determine 
. Keep in mind that the “constant” of integration with 
respect to  must be a function 
.
S
x
d
x*
f x y
,
(
)
x2
y
cos
=
f x y
,
(
)
f α1x1
α2x2
+
y
,
(
)
α1 f x1 y
,
(
)
α2 f x2 y
,
(
)
+
=
f x β1y1
β2y2
+
,
(
)
β1f x y1
,
(
)
β2f x y2
,
(
)
+
=
f x˜ y
˜
,
(
)
x˜
A˜˜
y
˜
•
•
=
A˜˜
dy dx
⁄
dy dx
⁄
y
x
y
y x
( )
=
y
x
∂y ∂x
⁄
y
x
r
θ
x
y
x
r
θ
cos
=
y
r
θ
sin
=
∂y ∂r
⁄
θ
x
∂y ∂r
⁄
(
)θ
∂y ∂r
⁄
(
)x
z
s1 s2 s3
,
,
∂z ∂s2
⁄
∂z ∂s2
⁄
(
)s1 s3
,
f x y
,
(
)dx
g x y
,
(
)dy
+
u x y
,
(
)
du
fdx
gdy
+
=
u
∂f ∂y
⁄
(
)x
∂g ∂x
⁄
(
)y
=
f x y
,
(
)
∂u ∂x
⁄
(
)y
=
g x y
,
(
)
∂u ∂y
⁄
(
)x
=
u x y
,
(
)
x
h y
( )

September 4, 2003 5:24 pm
Terminology from functional analysis
20
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
• IMPORTANT (notation discussion). An identical restatement of the above discussion 
of exact differentials can be given by using different notation where the symbols 
 and 
 are used instead of  and . Similarly, the symbols 
 and 
 can be used 
to denote the functions instead of  and . In ensemble, the collection 
 can 
be denoted symbolically by . With this change, the previous definition reads as 
follows: An expression 
 is called an exact differential if and only if 
the following two conditions are met: (1)
* and (2) there exists a function 
 such that 
. If so, then it must be true that 
, 
which (because  takes values from 1 to 2) represents a set of two equations that may 
be integrated to solve for . A necessary and sufficient condition for the potential 
function  to exist (i.e., for the equations to be integrable) is 
. 
When using variable symbols that are subscripted as we have done here it is 
understood that partial differentiation with respect to one subscripted quantity holds 
the other subscripted quantity constant. For example, the act of writing 
 tells 
the reader that 
 can be written as a function of 
 and
and it is understood that 
 is being held constant in this partial derivative. Recall that, if the equations are 
integrable, then it will be true that 
. Consequently, the integrability 
condition, 
 is asserting that 
 — in 
other words, the mixed partial derivatives must give the same result regardless of the 
order of differentiation. Note that the expression 
 can be written 
in symbolic (structured) notation as 
 and the expression 
 
can be written 
, where the gradient is taken with respect to . The increment 
in work associated with a force  pushing a block a distance 
 along a frictional 
surface is an example of a differential form 
 that is not an exact differential. In 
this case where no potential function exists, but the expression is still like an 
increment, it is good practice to indicate that the expression is not an exact differential 
by writing a “slash” through the “d”, as in 
; for easier typesetting, some 
people write 
. By contrast, the increment in work associated with a force 
force  pushing a block a distance 
 against a linear spring is an example of a 
differential form 
 that is an exact differential (the potential function is 
, where  is the spring constant. For the frictional block, the work 
accumulates in a path-dependent manner. For the spring, the work is path-
independent (it only depends on the current value of , not on all the values it might 
have had in the past). By the way, a spring does not have to be linear in order for a 
potential function to exist. The most fundamental requirement is that the force must 
be expressible as a proper function of position — always check this first.
* This expression is not really an equation. It is just a standard way of indicating that each 
 func-
tion depends on 
, which means they each can be expressed as functions of 
 and 
.
x1
x2
x
y
f1
f2
f
g
x1 x2
,
{
}
x
f1dx1
f2dx2
+
fk
fk x
( )
=
fk
x
x1
x2
u x
( )
du
f1dx1
f2dx2
+
=
fk
∂u ∂xk
⁄
=
k
u
u
∂f1 ∂x2
⁄
∂f2 ∂x1
⁄
=
∂f1 ∂x2
⁄
f1
x1
x2
x1
fk
∂u ∂xk
⁄
=
∂f1 ∂x2
⁄
∂f2 ∂x1
⁄
=
∂2u ∂x1∂x2
⁄
∂2u ∂x2∂x1
⁄
=
du
f1dx1
f2dx2
+
=
du
f dx
⋅
=
fk
∂u ∂xk
⁄
=
f
∇u
=
x
f
dx
f dx
⋅
du
f dx
⋅
=
δu
f dx
⋅
=
f
dx
f dx
⋅
u
1
2--k x x
⋅
(
)
=
k
x

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
21
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
3. Matrix Analysis (and some matrix calculus)
Tensor analysis is neither a subset nor a superset of matrix analysis — tensor analysis
complements matrix analysis. For the purpose of this book, only the following concepts
are required from matrix analysis:*
Definition of a matrix
A matrix is an ordered array of numbers that are arranged in the form of a “table”
having 
 rows and 
 columns. If one of the dimensions (
 or 
) happens to equal 1,
then the term “vector” is often used, although we prefer the term “array” in order to
avoid confusion with vectors in the physical sense. A matrix is called “square” if 
.
We will usually typeset matrices in plain text with brackets such as 
. Much later in this
document, we will define the term “tensor” and we will denote tensors by a bold symbol
with two under-tildes, such as 
. We will further find that each tensor can be described
through the use of an associated 
 matrix of components, and we will denote the
matrix associated with a tensor by simply surrounding the tensor in square brackets, such
as 
 or sometimes just 
 if the context is clear. 
For matrices of dimension 
, we also use braces, as in 
; namely, if 
, then
 (3.1)
For matrices of dimension 
, we use angled brackets 
; Thus, if 
, then
 (3.2)
If attention must be called to the dimensions of a matrix, then they will be shown as
subscripts, for example, 
. The number residing in the 
 row and 
 column of
 will be denoted 
.
* Among the references listed in our bibliography, we recommend the following for additional read-
ing: Refs. 26, 23, 1, 36. For quick reference, just about any Schaum’s outline or CRC handbook 
will be helpful too.
“There are a thousand hacking at the branches 
of evil to one who is striking at the root.” 
— Henry Thoreau 
N
M
N
M
M=N
A
[ ]
A˜˜
3
3
×
A˜˜
[
]
A
[ ]
N
1
×
v
{ }
N=3
v
{ }
v1
v2
v3
=
1
M
×
<v>
M=3
<v>
v1 v2 v3
,
,
[
]
=
A
[ ]M
N
×
ith
jth
A
[ ]
Aij

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
22
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Component matrices associated with vectors and tensors 
(notation explanation)
In this book, vectors will be typeset in bold with one single “under-tilde” (for
example,
) and the associated three components of the vector with respect to some
implicitly understood basis will be denoted 
 or 
, depending on whether those
components are collected into a column or row matrix, respectively. Similarly, second-
order tensors (to be defined later) will be denoted in bold with two under-tildes (for exam-
ple 
). Tensors are often described in terms of an associated 
 matrix, which we will
denote by placing square brackets around the tensor symbol (for example, 
 would
denote the matrix associated with the tensor 
). As was the case with vectors, the matrix
of components is presumed referenced to some mutually understood underlying basis —
changing the basis will not change the tensor 
, but it will change its associated matrix
. These comments will make more sense later.
The matrix product
The matrix product of 
 times 
 is a new matrix 
 written
 (3.3)
Explicitly showing the dimensions,
 (3.4)
Note that the dimension 
 must be common to both matrices on the right-hand side of this
equation, and this common dimension must reside at the “abutting” position (the trailing
dimension of 
 must equal the leading dimension of 
)
The matrix product operation is defined 
, 
where  takes values from 1 to 
,
and  takes values from 1 to 
.
 (3.5)
The summation over  ranges from 1 to the common dimension, 
. Each individual com-
ponent 
 is simply the product of the 
 row of 
 with the 
 column of 
, which
is the mindset most people use when actually computing matrix products.
SPECIAL CASE: a matrix times an array. As a special case, suppose that 
 is
a square matrix of dimension 
. Suppose that 
 is an array (i.e., column matrix) of
dimension 
. Then
 (3.6)
v˜
v˜
{ }
<v˜>
T˜˜
3
3
×
T˜˜
[ ]
T˜˜
T˜˜
T˜˜
[ ]
A
[ ]M
R
×
B
[ ]R
N
×
C
[
]M
N
×
C
[
]
A
[ ] B
[ ]
=
C
[
]
M
N
×
A
[ ]
M
R
×
B
[ ]
R
N
×
=
R
A
[ ]
B
[ ]
Cij
AikBkj
k
1
=
R
∑
=
i
M
j
N
k
R
Cij
ith
A
[ ]
jth
B
[ ]
F
[ ]
N
N
×
v
{ }
N
1
×
u
{ }
F
[ ] v
{ }
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
23
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
must be an array of dimension 
 with components given by
, where  takes values from 1 to 
 (3.7)
SPECIAL CASE: inner product of two arrays. 
As another special case, suppose the dimensions 
 and 
 in Eq. (3.5) both equal 1.
Now we are talking about the matrix product of two arrays. Then the free indices  and 
in Eq. (3.5) simply range from 1 to 1 giving the result
If 
 and 
, 
 (3.8)
When working with matrices with only one row or only one column, recall that explicit
mention of the “1” in the index formulas is usually omitted. Also, 
 matrices (like the
matrix 
 in this case) are typeset without showing any subscripts at all. Consequently
this result would be written
 (3.9)
In other words, this array “inner product” simply sums over every product of correspond-
ing components from each array. This array inner product is called the “dot” product in 3D
engineering vector analysis. When 
 and 
 are arrays, this inner product will often
be seen written using array notation as
 
or 
 (3.10)
SPECIAL CASE: outer product of two arrays. 
As a very different special case, suppose that the common dimension 
 equals 1. Then
the matrices in Eq. (3.5) again get treated and typeset as arrays instead of matrices but this
time, the summation over 
 becomes trivial (there is only one term in the sum, so there
isn’t really a sum at all). Specifically
If 
, then Eq. (3.5) becomes simply 
where  takes values from 1 to 
,
and  takes values from 1 to 
.
 (3.11)
Unlike the inner product which produces a single number, this “outer product” multiplies
to arrays together to obtain a matrix. When 
 and 
 are arrays, this outer product
will often be seen written using array notation as
 
or 
 (3.12)
EXAMPLE:  Consider two arrays:
N
1
×
ui
Fikvk
k
1
=
N
∑
=
i
N
M
N
i
j
M
1
=
N
1
=
C11
A1kBk1
k
1
=
R
∑
=
1
1
×
C
[
]
C
AkBk
k
1
=
R
∑
=
A
{ }
B
{ }
A
{ }T B
{ }
<A> B
{ }
R
R
R
1
=
Cij
AiBj
=
i
M
j
N
A
{ }
B
{ }
A
{ } B
{ }T
A
{ }<B>

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
24
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and
 (3.13)
The inner product between 
 and 
 is
 (3.14)
This also equals the inner product between 
 and 
 because the inner product is
commutative. The inner product is just a single number.
Now consider the outer product, which results in a full matrix and is not commutative.
The outer product between 
 and 
 is
 (3.15)
The outer product between 
 and 
 is
 (3.16)
Note that the resulting outer product matrices are not equal (they differ by a transpose), so
the outer product is not commutative. Outer products play a pivotal role in tensor analysis
because they are related to dyads, which are primitive kinds of tensors. The component
arrays for the base vectors in vector analysis are
 (3.17)
Note that the inner product between a base vector and itself equals 1, and the inner product
between a base vector and any of the other two different base vectors equals zero. Later
on, we will use the notation 
 to denote the outer product, 
, of the “
”
base vector with the “
” base vector. The result will be that 
 is a 
 matrix that
has zeros everywhere except for a 1 in the 
 location. For example,
<u>
1
3
–
4
=
<v>
2 5
7
–
=
u
{ }
v
{ }
<u> v
{ }
1
3
–
4
2
5
7
–
1
( ) 2
( )
3
–
(
) 5
( )
4
( )
7
–
(
)
+
+
41
–
=
=
=
v
{ }
u
{ }
u
{ }
v
{ }
u
{ }<v>
1
3
–
4
2 5
7
–
1
( ) 2
( )
1
( ) 5
( )
1
( )
7
–
(
)
3
–
(
) 2
( )
3
–
(
) 5
( )
3
–
(
)
7
–
(
)
4
( ) 2
( )
4
( ) 5
( )
4
( )
7
–
(
)
2
5
7
–
6
–
15
–
21
8
20
28
–
=
=
=
v
{ }
u
{ }
v
{ }<u>
2
5
7
–
1
3
–
4
2
( ) 1
( )
2
( )
3
–
(
)
2
( ) 4
( )
5
( ) 1
( )
5
( )
3
–
(
)
5
( ) 4
( )
7
–
(
) 1
( )
7
–
(
)
3
–
(
)
7
–
(
) 4
( )
2
6
–
8
5
15
–
20
7
–
21
28
–
=
=
=
<e˜1>
1 0 0
=
<e˜2>
0 1 0
=
<e˜3>
0 0 1
=
e˜ie˜j
[
]
e˜i
{
}<e˜j>
ith
jth
e˜ie˜j
[
]
3
3
×
ij

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
25
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.18)
The Kronecker delta
The Kronecker delta is a symbol 
 whose value depends on the subscripts  and .
Specifically,
 (3.19)
The identity matrix
The identity matrix, denoted 
, has all zero components except 1 on the diagonal.
For example, the 
 identity is
 (3.20)
The 
 component of the identity is given by Kronecker delta, 
. That is, recalling
Eq. (3.19),
 (3.21)
Note that, for any array 
 (3.22)
In component form, this equation is written
 (3.23)
This represents a set of three equations. The “free index”  takes the values 1, 2, and 3.
By the way, referring to Eq. (3.18), note that
e˜1e˜1
[
]
1 0 0
0 0 0
0 0 0
=
e˜1e˜2
[
]
0 1 0
0 0 0
0 0 0
=
e˜1e˜3
[
]
0 0 1
0 0 0
0 0 0
=
e˜2e˜1
[
]
0 0 0
1 0 0
0 0 0
=
e˜2e˜2
[
]
0 0 0
0 1 0
0 0 0
=
e˜2e˜3
[
]
0 0 0
0 0 1
0 0 0
=
e˜3e˜1
[
]
0 0 0
0 0 0
1 0 0
=
e˜3e˜2
[
]
0 0 0
0 0 0
0 1 0
=
e˜3e˜3
[
]
0 0 0
0 0 0
0 0 1
=
δij
i
j
δij
1  if  i=j
0  if  i
j
≠



=
I[ ]
3
3
×
I[ ]
1 0 0
0 1 0
0 0 1
=
ij
δij
δ11 δ12 δ13
δ21 δ22 δ23
δ31 δ32 δ33
1 0 0
0 1 0
0 0 1
=
v
{ }
I[ ] v
{ }
v
{ }
=
δikvk
k
1
=
3
∑
vi
=
i

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
26
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.24)
Equivalently, note that
 (3.25)
Derivatives of vector and matrix expressions
Junior-high-school students learn about simple functions of a single variable such as
 or
or 
. In calculus, they learn how to differentiate these func-
tions. Eventually students begin working with functions (and even families of functions)
of more than one variable such as 
, 
, and 
. Differentiating
functions of more than one variable requires the chain rule for partial differentiation. In
physical applications, two or more of the independent variables might be so intimately
related to each other (e.g., perhaps they are the three components of a velocity vector) that
it works better to denote them by the same symbol distinguishing between them only by
numbered subscripts, such as 
.
SIDEBAR (functional dependence structure rule). When working with a small number
of variables, the structure 
 is a conventional way to communicate to readers
that y is a function of x. However, serious scientific research often requires simulta-
neous processing of so many different variables that giving up a new letter of the
alphabet ( ) merely to indicate that  depends on  is not feasible. Consequently sci-
entists frequently use the structure 
 to mean “y is a variable that is express-
ible as a function of x.” Of course, if the focus of a discussion is aimed on the function
itself (rather than on simply indicating dependencies), the function should be denoted
by a symbol that differs from its output. Many times, you might see something like
, but using the hat would preclude your using it to denote something else later
on. Those of us who are running extremely short on available letters of the alphabet
don’t even want to add “hat” decorations or other diacritical marks to denote functions
— we need the hats and other marks to denote additional distinct variables.
In calculus classes, students learn that the chain rule may be used to find, say, the time
derivative of a function 
 to give 
, where the superimposed dot denotes
the time rate. In more complicated applications, one must often deal simultaneously with
families of variables that might themselves depend on some other family of independent
variables. You might, for example, be working with a set of equations of the form
 (3.26)
 (3.27)
In this case, the time derivative is obtained via the chain rule to give
 (3.28)
 (3.29)
I[ ]
e˜1e˜1
[
]
e˜2e˜2
[
]
e˜3e˜3
[
]
+
+
=
I[ ]
δij e˜ie˜j
[
]
j
1
=
3
∑
i
1
=
3
∑
=
y
x2
=
y
x
ln
=
y
x
sin
=
y
uew
=
s
u
w
+
=
r
u w
⁄
=
v1 v2 v3
,
,
y
f x
( )
=
f
y
x
y
y x
( )
=
y
yˆ x
( )
=
y
y x
( )
=
y·
dy
dx
------x·
=
y1
y1 x1 x2 x3
,
,
(
)
=
y2
y2 x1 x2 x3
,
,
(
)
=
y·1
∂y1
∂x1
--------



x·1
∂y1
∂x2
--------



x·2
∂y1
∂x3
--------



x·3
+
+
=
y·2
∂y2
∂x1
--------



x·1
∂y2
∂x2
--------



x·2
∂y2
∂x3
--------



x·3
+
+
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
27
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
SIDEBAR (structure rule for partial differentiation): Any derivative with respect to a
member of a subscripted family of variables (in this case, 
, 
, and 
), is under-
stood to be taken holding the remaining members of that family constant. If a function
depends additionally on other quantities, then the fact that they are being held con-
stant must be noted explicitly by showing them as a subscript. If, for example,
, the derivative of  with respect to 
 would be written
, where 
 is a shorthand “ensemble” representation for the three 
 vari-
ables.
The use of subscripts to demark different variables is especially convenient because the
above two equations can be written compactly as 
, where the free index  takes values 1 and 2.
 (3.30)
Whenever you encounter a new function or transformation, it is a good idea to immedi-
ately note the derivative of that function because you will undoubtedly later need it for
rate equations. Consequently, throughout this book, we will often cite derivatives for any
new function that we introduce. To illustrate, we will now discuss derivatives of sub-
scripted quantities with respect to themselves.
Derivative of an array with respect to itself
“Everyone” knows that 
. In other words, the derivative of a number with
respect to itself equals unity.* If 
 then 
. What is the generalization of
this statement for an array of numbers? Specifically, we have 
, or written out in less
cryptic (non-ensemble) form:
 (3.31a)
 (3.31b)
 (3.31b)
This relationship can be regarded as the identity transformation in which a three compo-
nent array 
 identically equals another array 
.
Then, trivially,
 (3.32a)
 (3.32b)
 (3.32c)
This result can be written compactly as 
, or, since 
,
* The word “unity” is less snobbishly known as the number “one” or more snobbishly as the multipli-
cative “identity”. Actually “unity” is a better choice than “one” despite sounding pompous because 
phrases like “the result is one” leaves readers asking “one what?”
x1
x2
x3
z
z x1 x2 x3 s r u1 u2 u3
,
,
, , ,
,
,
(
)
=
z
x2
∂z
∂x2
--------




s r u˜
, ,
u˜
uk
y·i
∂yi
∂xj
-------



x·j
j
1
=
3
∑
=
i
dx dx
⁄
1
=
y
x
=
dy dx
⁄
1
=
y
x
=
y1
x1
=
y2
x2
=
y3
x3
=
<y>
<x>
∂y1
∂x1
--------
1
=
∂y1
∂x2
--------
0
=
∂y1
∂x3
--------
0
=
∂y2
∂x1
--------
0
=
∂y2
∂x2
--------
1
=
∂y2
∂x3
--------
0
=
∂y3
∂x1
--------
0
=
∂y3
∂x2
--------
0
=
∂y3
∂x3
--------
1
=
∂yi
∂xj
-------
δij
=
yi
xi
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
28
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.33)
This is the array analog of the scalar identity, 
. Later on, when we introduce
direct structural notation, the above result will be written*
 (3.34)
Throughout this book, we will be defining various operations that take scalars, arrays,
or matrices as input to construct some new scalar, array, or matrix as output. (The above
trivial example was the identity operation. It took an array 
 and spit 
 right back
out as output.) Knowing that derivatives of operations will eventually be needed, we will
attempt to wrap up every discussion of new operations by giving you the expression for
the function’s derivative in both index and structured notation. The calculus machinery
needed to prove the derivatives will not be discussed until Chapter 21 on page 251, so you
should just consider the derivatives to be provided for future reference without proof.
Derivative of a matrix with respect to itself
Suppose we have an 
 matrix 
. Performing an analysis similar to what was
done above, we can assert that the derivative of 
 with respect to 
 (holding the other
components constant) will be zero unless the subscripts on 
 are exactly the same as
those on 
, in which case the result would equal 1. In order for 
 to equal 
, you
must have 
 and 
. Therefore, we can assert that
, 
where i and m range from 1 to N
and j and n range from 1 to M.
 (3.35)
Later on, when subscripts always range from 1 to 3 for vectors and tensors, this result will
be cast into a new (structured) notation as
,
 (3.36)
where  will be shown to equal a fourth-order identity tensor.
* To understand why we used “
” in Eq. (3.33) but “d” in (3.34), see the discussion on page 266.
∂xi
∂xj
-------
δij
=
dx dx
⁄
1
=
∂
dx˜
dx˜
------
I˜˜
=
<x>
<x>
N
M
×
A
[ ]
Aij
Amn
Aij
Amn
ij
mn
i=m
j=n
∂Aij
∂Amn
------------
δimδjn
=
∂A˜˜
∂A˜˜
-------
δ
˜˜˜˜
=
δ
˜˜˜˜

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
29
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The transpose of a matrix
The transpose of a matrix 
 is a new matrix 
 (note the reversed dimen-
sions). The components of the transpose are
where  takes values from 1 to 
,
and  takes values from 1 to 
.
 (3.37)
The transpose of 
 is written as 
, and the notation 
 means the  component of
. Thus, the above equation may be written
where  takes values from 1 to 
,
and  takes values from 1 to 
.
 (3.38)
The dimensions of 
 and 
 are reverses of each other. Thus, for example, if 
 is
an 
 matrix, then 
 is a 
 matrix. In other words,
 
and 
 (3.39)
The transpose of a product is the reverse product of the transposes. For example,
, and
 (3.40)
Derivative of the transpose: 
 (3.41)
The inner product of two column matrices
The inner product of two column matrices, 
 and 
, each having the
same dimension is defined
, or, using the angled-bracket notation, 
 (3.42)
Applying the definition of matrix multiplication, the result is a 
 matrix (which is just
a single number) given by
 (3.43)
A
[ ]
M
N
×
B
[ ]
N
M
×
Bij
Aji
=
i
N
j
M
A
[ ]
A
[ ]T
Aij
T
ij
A
[ ]T
Aij
T
Aji
=
i
N
j
M
A
[ ]
A
[ ]T
v
{ }
N
1
×
v
{ }T
1
N
×
v
{ }T
<v>
=
<v>T
v
{ }
=
A
[ ] B
[ ]
(
)T
B
[ ]T A
[ ]T
=
<v> A
[ ]
(
)T
A
[ ]T<v>T
A
[ ]T v
{ }
=
=
∂Aij
T
∂Ars
----------
δisδjr
=
v
{ }N
1
×
w
{
}N
1
×
v
{ }T w
{
}
<v> w
{
}
1
1
×
vkwk
k
1
=
N
∑

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
30
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If 
 and 
 contain components of two vectors  and 
 then the inner product gives
the same result as the vector “dot” product 
, defined later. Noting that the above rela-
tionship treats the components of 
 and 
 in precisely the same way — the result is
unchanged if these two arrays are swapped. However, the notation of Eq. (3.42) makes it
look as though 
 and 
 play different roles because one of them has a transpose and
the other does not. Thus, you might see use of alternative notations for the inner product
that are more “equitable” looking such as
 (3.44)
Here, the raised star (*) is being used as a new operator symbol — a structure. Later on,
when dealing with vectors instead of arrays, we use a raised dot for the inner product (as in
). Many people like to use a raised dot to denote any inner product regardless of the
nature of the operand, but we will use the raised dot only for inner products between vec-
tors. Different symbols will be later defined for different kinds of operands.
Derivatives of the inner product:  The inner product is a binary operation (i.e., it
has two arguments, 
 and 
. Thus, we can discuss formulas for partial derivatives
with respect to one argument, holding the other constant:
 (3.45)
similarly,
 (3.46)
In direct (structured) notation, this result will later be written as
 and 
 (3.47)
As a special case, consider the case that both arrays are the same. In this case where
, it isn’t possible to take the derivative with respect to 
 while holding
 constant. Since 
 equals 
, it must vary whenever 
 varies, so let’s work
this one out from scratch:
 (3.48)
This result is analogous to the simple scalar equation 
. In structured vector
notation,
v
{ }
w
{
}
v˜
w˜
v˜
w˜
•
v
{ }
w
{
}
v
{ }
w
{
}
v
{ }* w
{
}
w
{
}* v
{ }
vkwk
k
1
=
N
∑
=
=
v˜
w˜
•
v
{ }
w
{
}
∂
v
{ }* w
{
}
(
)
∂vi
-------------------------------
∂
∂vi
-------
vkwk
k
1
=
N
∑








δkiwk
k
1
=
N
∑
wi
=
=
=
∂
v
{ }* w
{
}
(
)
∂wi
-------------------------------
∂
∂wi
--------
vkwk
k
1
=
N
∑








vkδki
k
1
=
N
∑
vi
=
=
=
∂v˜
w˜
•
(
)
∂v˜
--------------------
w˜
=
∂v˜
w˜
•
(
)
∂w˜
--------------------
v˜
=
v
{ }
w
{
}
=
v
{ }
w
{
}
w
{
}
v}
{
}
v
{ }
∂
v
{ }* v
{ }
(
)
∂vi
------------------------------
∂
∂vi
-------
vkvk
k
1
=
N
∑








δkivk
vkδki
+
(
)
k
1
=
N
∑
2vi
=
=
=
dx2 dx
⁄
2x
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
31
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.49)
To understand why we used “d” instead of “ ” in this equation, refer to the “sidebar” on
page 266.
The outer product of two column matrices.
The outer product of two column matrices, 
 and 
, not necessarily of
the same dimension is defined
, or, using the angled-bracket notation, 
 (3.50)
For this case, the value of the “adjacent” dimension 
 in Eq. (3.5) is just 1, so the summa-
tion ranges from 1 to 1 (which means that it is just a solitary term).
The result of the outer product is an 
 matrix, whose 
 component is given by
. If 
 and 
 contain components of two vectors  and  then the outer product
gives the matrix corresponding to the “dyadic” product, 
 (also often denoted 
), to
be discussed in gory detail later.
The trace of a square matrix
A matrix 
 is called “square” because it has as many rows as it has columns.
The trace of a square matrix is simply the sum of the diagonal components:
 (3.51)
The trace operation satisfies the following properties:
 (3.52)
 
(cyclic property)
 (3.53)
Derivative of the trace. The trace of a matrix is a function of the matrix’s compo-
nents. If, for example, 
 is a 
 matrix, then
 (3.54)
Therefore
, 
, 
etc.
 (3.55)
Note that the derivative of 
 with respect to 
 equals 1 if 
 and 0 if 
. This is
precisely the definition of the Kronecker delta in Eq. (A.3.19). Thus,
 (3.56)
d v˜
v˜
•
(
)
dv˜
-------------------
2v˜
=
∂
a
{ }M
1
×
b
{ }N
1
×
a
{ } b
{ }T
a
{ }<b>
R
M
N
×
ij
aibj
a
{ }
b
{ }
a˜
b˜
a˜b˜
a˜
b˜
⊗
A
[ ]N
N
×
tr A
[ ]
p
Akk
k
1
=
N
∑
=
tr
A
[ ]T
(
)
tr A
[ ]
=
tr
A
[ ] B
[ ]
(
)
tr
B
[ ] A
[ ]
(
)
=
A
[ ]
3
3
×
tr A
[ ]
A11
A22
A33
+
+
=
∂tr A
[ ]
∂A11
---------------
1
=
∂tr A
[ ]
∂A12
---------------
0
=
A
[ ]
Aij
i=j
i
j
≠
∂tr A
[ ]
∂Aij
---------------
δij
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
32
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This result holds regardless of the size of the matrix. In structured tensor notation, this
result is written
 (3.57)
Note the distinction between Eq. (3.56) and (3.35); in one case we are differentiating the
trace of a matrix with respect to the matrix, while, in the other case, we are differentiating
the matrix itself with respect to itself. In Eq. (3.56) the result is the second-order identity
(two free indices), whereas, in Eq. (3.35), the result is the fourth-order identity (four free
indices).
The matrix inner product
Given two matrices 
 and 
 of the same class (i.e., having the same
dimensions), the matrix inner product is a scalar obtained by summing terms in which
each component of 
 multiplied by the corresponding component of 
. Stated more
explicitly, the matrix inner product (which we will denote using “*” as the operator sym-
bol) is given by
 (3.58)
Note that this is identical to 
 (3.59)
Of course, if the second dimension 
 happens to equal 1, then this matrix inner product
becomes identical to the inner product defined in Eq. (3.44) for arrays.
Later on, after we define what is meant by the term “tensor”, we will find that ordinary
engineering tensors can be described via 
 component matrices, in much the same
way that a vector  can be described by a 
 component array. If 
 and 
 contain
components of two second-order tensors 
 and 
 then the matrix inner product gives the
same result as what we will later refer to as the tensor “double dot” product 
, and the
specialization of Eq. (3.58) using tensor notation is 
 (3.60)
Just as the dot product 
 between two vectors tells you something about the angle
between those vectors, the double-dot product between two tensors also tells about the
degree of alignment between them. 
Derivative of the matrix inner product. In analog to Eqs. (3.45) through (3.47),
dtr A˜˜
[
]
dA˜˜
----------------
I˜˜
=
A
[ ]
M
N
×
B
[ ]
M
N
×
A
[ ]
B
[ ]
A
[ ]* B
[ ]
AmnBmn
m
1
=
M
∑
n
1
=
N
∑
=
A
[ ]* B
[ ]
tr
A
[ ] B
[ ]T
(
)
tr
A
[ ]T B
[ ]
(
)
=
=
N
3
3
×
u˜
3
1
×
A
[ ]
B
[ ]
A˜˜
B˜˜
A˜˜
:B˜˜
A˜˜
:B˜˜
AmnBmn
m
1
=
3
∑
n
1
=
3
∑
=
u˜
v˜
•

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
33
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 and 
 (3.61)
 and 
 (3.62)
In analog to Eq. (3.49), 
 (3.63)
Magnitudes and positivity property of the inner product
The “magnitude” of a matrix* is given by
 (3.64)
or
 (3.65)
Note that the positive square root must be taken. This equation is analogous to the ordi-
nary scalar equation, 
. Just as the operation 
 gives you the magnitude
of a vector, the operation 
 gives the magnitude of a tensor:
 (3.66)
Careful readers should be asking themselves: How can we be sure that we won’t be
trying to take the square root of a negative number? The answer is simple. Recalling our
previous statement that all vectors, matrices, and tensors in this book are presumed to have
real components unless otherwise indicated, you know that every term in the summation
in Eq. (3.66) is the square of a real number†. Hence, the final result for the summation in
Eq. (3.66) will not be negative. Taking the positive square root gives a positive real value
for the tensor’s magnitude. 
* Also called the 
 norm.
† When dealing with matrices whose components might be complex, the definition of the inner prod-
uct needs to be modified to be 
, where the overbar denotes the complex con-
jugate. When this modification is made, each term in the operation 
 becomes of the form 
 which will be a nonnegative real number. The notation, 
, which represents the trans-
pose of the conjugate (or, equivalently, the conjugate of the transpose) is commonly referred to as 
the “Hermitian” and is denoted 
. Throughout this book, whenever you see a transpose opera-
tion, it is likely that the equation will generalize to complex components by replacing the transpose 
with the Hermitian — this rule-of-thumb is not absolute, so you should always double check 
against fully developed complex linear algebra textbooks.
∂
A
[ ]* B
[ ]
(
)
∂Aij
----------------------------
Bij
=
∂
A
[ ]* B
[ ]
(
)
∂Bij
----------------------------
Aij
=
∂A˜˜
:B˜˜
(
)
∂A˜˜
------------------
B˜˜
=
∂A˜˜
B˜˜
•
(
)
∂B˜˜
---------------------
A˜˜
=
d A˜˜
:A˜˜
(
)
dA˜˜
------------------
2A˜˜
=
L2
A
[ ]
+
A
[ ]* A
[ ]
=
A
[ ]
AmnAmn
m
1
=
3
∑
n
1
=
3
∑
Amn
(
)2
m
1
=
3
∑
n
1
=
3
∑
=
=
x
+ x2
=
u˜
u˜
•
A˜˜
:A˜˜
A˜˜
A˜˜
:A˜˜
AmnAmn
m
1
=
3
∑
n
1
=
3
∑
Amn
(
)2
m
1
=
3
∑
n
1
=
3
∑
=
=
=
A
[ ]* B
[ ]
tr
A
[ ]T B
[ ]
(
)
=
A
[ ]* A
[ ]
AmnAmn
A
[ ]T
A
[ ]H

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
34
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The ability to use the inner product to compute a magnitude of a tensor (or matrix) is
pivotal in the very special and carefully crafted mathematician’s definition of “inner prod-
uct.” Among the required properties of the inner product, the most important is positiv-
ity, which says that the inner product of a matrix with itself must result in a positive
number (or zero if and only if the matrix itself is zero).
Derivative of the magnitude. By the chain rule, using Eq. (3.63),
 (3.67)
or
 (3.68)
The version of this equation that applies to vectors is
 (3.69)
Physically, this shows that the derivative of the magnitude of a vector  with respect to the
vector itself simply equals a unit vector in the direction of .
Norms. Let  be a real number. Consider the following summation in which each com-
ponent of a matrix is raised to the power , with the final result raised to the power 
.
 (3.70)
This expression is called the “Lk-norm” of the matrix, and it applies to arrays (i.e., 
matrices) as a special case. Note that Eq. (3.65) is the 
 norm. 
As  becomes larger in Eq. (3.70), the 
 components that are largest in absolute
value compared to the other components become even larger relative to the other compo-
nents when raised to large values of the  exponent. In the limit as 
, the largest
component of 
 “swamps out” all of the other components in the summation, so that
after raising the sum to the power 
, it can be shown that the “
-norm” produces is
given by the absolute value of this dominant component:
 (3.71)
Although this and the other 
 norms are interesting and useful for matrix analysis, it
turns out that they are not of much use in vector and tensor analysis. The reason revolves
around a concept called “basis invariance.” In vector analysis, the components of a vector
 are frequently assembled into a 
 array 
. The 
 norm of this array
would be simply 
. However, the components of a vector depend on
your choice of basis. The components of the same vector  will have different values with
d A˜˜
:A˜˜
dA˜˜
------------------
d A˜˜
:A˜˜
(
)1 2
/
dA˜˜
--------------------------
1
2-- A˜˜
:A˜˜
(
) 1 2
/
–
d A˜˜
:A˜˜
(
)
dA˜˜
------------------
A˜˜
:A˜˜
(
) 1 2
/
–
A˜˜
=
=
=
d A˜˜
dA˜˜
-------------
A˜˜A˜˜
---------
=
d v˜
dv˜
-----------
v˜v˜
--------
=
v˜
v˜
k
k
1 k
⁄
A
[ ] k
Amn
(
)k
m
1
=
3
∑
n
1
=
3
∑







1 k
/
=
M
1
×
L2
k
Amn
k
k
∞
→
A
[ ]
1 k
⁄
L∞
A
[ ] ∞
max
m n
,
Amn
=
Lk
v˜
3
1
×
<v1 v2 v3
,
,
>
L∞
max v1
v2
v3
,
,
(
)
v˜

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
35
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
respect some other choice of basis. The max component in one basis will not generally
equal the max component in a different basis, so we say that the 
 norm is not invariant
under basis transformations for vectors. In general the only 
 norm that does give the
same result regardless of the basis used for vectors (and tensors) is the 
-norm. Hence
for vector and tensor analysis, only the 
 norm (or its weighted generalization described
below) is of interest.
Weighted or “energy” norms. Let 
 denote a square positive-definite 
matrix.* Then the weighted or energy norm of any vector 
 is defined
 (3.72)
The reason for the moniker “energy” should be clear because of the similarity that this
equation has with the equation for kinetic energy 
 for a single particle of mass 
moving with speed . As a matter of fact, the expression 
 can be written in exactly
the form of Eq. (3.72) by taking 
. In mechanics, the total kinetic energy of a
rigid body is 
, where 
 contains the components of the angular veloc-
ity vector and 
 is the rotational moment of inertia of the body about the axis of rota-
tion, which can be proved to be positive definite.
Note that ordinary 
 norm of a vector is merely a special case of the more general
weighted or energy norm of Eq. (3.72) obtained by setting 
. Weighted norms
can also be generalized to apply to matrices, as we will see in later discussions of material
constitutive modeling.
Derivative of the energy norm. In component form, Eq. (3.72) may be written
 (3.73)
from which it follows that 
 (3.74)
The above equations apply to the square of the energy norm. The derivative of the energy
norm itself is
 (3.75)
* By “positive definite” we mean it satisfies the condition that 
 for all 
 arrays 
 and 
 except, of course, arrays containing all zeros. See page 47 for details.
L∞
Lk
L2
L2
M
[
]
N
N
×
v
{ }
a
{ }T W
[
] b
{ }
0
>
N
1
×
a
{ }
b
{ }
v energy
2
1
2-- v
{ }T M
[
] v
{ }
=
1
2--mv2
m
v
1
2--mv2
M
[
]
m I[ ]
=
1
2-- ω
{
}T Φ
[
] ω
{
}
ω
{
}
Φ
[
]
L2
M
[
]
2 I[ ]
=
v energy
2
1
2--
viMijvk
j
1
=
N
∑
i
1
=
N
∑
=
∂
v energy
2
(
)
∂vk
-----------------------------
Mksvs
s
1
=
N
∑
=
∂
v energy
(
)
∂vp
-----------------------------
∂
v energy
2
(
)
∂vk
----------------------------------
1
v energy
---------------------
Mksvs
s
1
=
N
∑
=
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
36
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The 3D permutation symbol
The 3D permutation symbol (also known as the alternating symbol or the Levi-
Civita density) is defined
 (3.76)
For example, 
, 
, and 
. Note that the indices on 
 may be per-
muted cyclically without changing the value of the result. Furthermore, inverting any two
indices will change the sign of the value. Thus, the permutation symbol has the following
properties:
 (3.77)
The term “3D” is used to indicate that there are three subscripts on 
 each of which take
on values from 1 to 3. *
The ε-δ (E-delta) identity
If the alternating symbol is multiplied by another alternating symbol with exactly one
index being summed, a very famous and extraordinarily useful result, called the ε-δ iden-
tity, applies. Namely,
.
 (3.78)
Here, we have highlighted the index “n” in red to emphasize that it is summed, while the
other indices (i, j, k, and l) are “free” indices taking on values from 1 to 3. Later on, we are
going to introduce the “summation convention” which states that expressions having one
index appearing exactly twice in a term should be understood summed over from 1 to 3
over that index. Index symbols that appear exactly once in one term are called “free indi-
ces,” taking values from 1 to 3, and they must appear exactly once in all of the other terms.
Using this convention, the above equation can be written as
.
 (3.79)
* Though not needed for our purposes, the 2D permutation symbol 
 is defined to equal zero if 
, 
+1 if 
, and 
 if 
. The 4D permutation symbol 
 is defined to equal zero if any of 
the four indices are equal; it is +1 if 
 is an even permutation of 
 and 
 if 
 is an odd 
permutation. A permutation is simply a rearrangement. The permutation 
 is even if rearranging 
it back to 
 can be accomplished by an even number of moves that exchange two elements at a 
time. A cyclic permutation of an n-D permutation symbol will change sign if  is even, but remain 
unchanged if  is odd. Thus, for our 3D permutation symbol, cyclic permutations don’t change 
sign, whereas cyclic permutations of the 4D permutation symbol will change sign.
εijk
  1 if ijk
123 231 or 312
,
,
=
1
–
if ijk
321 132 or 213
,
,
=
  0
otherwise





=
1
2
3
+1
–1
1
2
3
ε231=1
ε213= 1
–
ε212=0
εijk
εijk
εjki
εkij
εjik
–
εikj
–
εkji
–
=
=
=
=
=
εijk
εij
i=j
ij=12
1
–
ij
21
=
εijkl
ijkl
1234
1
–
ijkl
ijkl
1234
n
n
εijnεkln
n
1
=
3
∑
δikδjl
δilδjk
–
=
εijnεkln
δikδjl
δilδjk
–
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
37
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Because of the cyclic properties of the permutation symbol, the ε-δ identity applies
whenever any index on the first ε matches any index on the second ε. For example, the
above equation would apply to the expression 
 because 
. The negative
of the ε-δ identity would also apply to the expression 
 because 
. Of
course, if a negative permutation is also required to place the summation index at the end
of the second ε, then the positive of the ε-δ identity would again apply. 
To make an expression fit the index structure of Eq. (3.78), most people laboriously
apply the cyclic property to each alternating symbol until the summed index is located at
the trailing side on both of them. Keeping track of whether or not these manipulations will
require changing the final sign of the right hand side of the ε-δ identity is one of the most
common and avoidable careless mistakes made when people use this identity. Even once
the summation index has been properly positioned at the trailing end of each alternating
symbol, most people then apply a slow (and again error-prone) process of figuring out
where the free indices go. Typically people apply a “left-right/outside-inside” rule. By
this, we mean that the free indices on the left sides of 
 and 
 are the indices that go
on the first δ, then the right free indices go on the second δ, then the outer free indices go
on the third δ, and (finally) the inner free indices go on the last δ. The good news is... you
don’t have to do it this way! By thinking about the ε-δ identity in a completely differ-
ent way, you can avoid both the initial rearrangement of the indices on the alternating
symbols and the slow left-right-out-in placement of the indices. Let’s suppose you want to
apply the ε-δ identity to the expression 
. First write a “skeleton” of the identity as
follows
 (3.80)
Our goal is to find a rapid and error-minimizing way to fill in the question marks with the
correct index symbols. Once you have written the skeleton, look at the left-hand side to
identify which index is summed. In this case, it is the index . Next say out loud the four
free indices in an order defined by “cyclically moving forward from the summed index” on
each alternating symbol. Each alternating symbol has two free indices. To call out their
names by moving cyclically forward, you simply say the name of the two indices to the
right of the summed index, wrapping back around to the beginning if necessary. For
example, the two indices cyclically forward from “p” in the sequence “pqr” are “qr”; the
two indices cyclically forward from “q” are “rp”; the two indices forward from “r” are
“pq”. For the first alternating symbol in the skeleton of Eq. (3.80), the two indices cycli-
cally forward from the summed index i are “mk” whereas the two indices cyclically for-
ward from i in the second alternating symbol are “np”. You can identify these pairs
quickly without ever having to rearrange anything, and you can (in your head) group the
pairs together to obtain a sequence of four free indices “mknp”. The final step is to write
these four indices onto the skeleton. If the indices are ordered 1234, then you should write
the first two indices (first and second) on the skeleton like this
 (3.81)
εnijεkln
εnij
εijn
=
εinjεkln
εinj
εijn
–
=
εijn
εkln
εimkεpin
εimkεpin
δ??δ??
δ??δ??
–
=
i
δ1?δ2?
δ1?δ2?
–

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
38
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
You write the last pair (third and fourth) in order (34) on the first term and in reverse order
(43) on the last term:
 (3.82)
Thus, for example, to place the free indices “mknp” onto the Kronecker deltas in Eq.
(3.80), you would first take care of the “mk” by writing
 (3.83)
Then you just finish off with the last two “np” free indices by writing them first in that
order on the first term and in reverse order on the second term to obtain the final result:
.
 (3.84)
This may seem a bit strange at first (especially if you are already stuck in the left-right-
outer-inner mind set), but this method is far quicker and less error-prone. Give it a try until
you become comfortable with it, and you probably won’t dream of going back to your old
way.
The ε-δ (E-delta) identity with multiple summed indices
Recall that the 
 identity is given by
.
 (3.85)
What happens if you now consider the case of two alternating symbols multiplied side-by-
side with two indices being summed? This question is equivalent to throwing a summation
around the above equation in such a manner that you add up only those terms for which
. Then
= 
 – 
=
= 
 (3.86)
Note that we simplified the first term by noting that 
. The second
term was simplified by noting that 
 will be zero if 
 or it will equal
 if 
. Thus, it must be simply 
. 
Using similar logic, the 
 identity with all indices summed is equivalent to setting
 in the above equation, summing over each instance so that the result is six. To sum-
marize using the summation conventions,
 (3.87)
δ13δ24
δ14δ23
–
δm?δk?
δm?δk?
–
εimkεpin
δmnδkp
δmpδkn
–
=
ε-δ
εijnεkln
n
1
=
3
∑
δikδjl
δilδjk
–
=
j=l
εijnεkjn
n
1
=
3
∑
j
1
=
3
∑
δikδjj
δijδjk
–
(
)
j
1
=
3
∑
=
δik δ11
δ22
δ33
+
+
(
)
δi1δ1k
δi2δ2k
δi3δ3k
+
+
(
)
3δik
δik
–
2δik
δ11
δ22
δ33
+
+
1
1
1
+
+
3
=
=
δi1δ1k
δi2δ2k
δi3δ3k
+
+
i
k
≠
1
i=k
δik
ε-δ
i=k
εijnεkjn
2δik
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
39
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.88)
Determinant of a square matrix
The simplest way to explain what is meant by a determinant is to define it recursively.
In this section, we show how the determinant of a 
 matrix can be alternatively
defined by using the three-dimensional permutation symbol of Eq. (3.76).
A 
 matrix is just a single number. The determinant of a 
 matrix is defined to
equal its solitary component. Thus,
 (3.89)
The determinant of a 
 matrix is defined by
 (3.90)
The determinant of a 
 matrix is defined by
≡
– 
 (3.91)
Note that we have arranged this formula such that the first indices in each factor are 123.
For the positive terms, the second indices are all the positive permutations of 123.
Namely: 123, 231, and 312. For the negative terms, the second indices are all the negative
permutations of 123. Namely: 321, 132, and 213. This relationship may be written com-
pactly by using the permutation symbol 
 from Eq. (3.76). Namely, if 
 is a 
matrix, then
 (3.92)
This definition can be extended to square matrices of arbitrarily large dimension by using
the n-dimensional permutation symbol (see footnote on page 36). Alternatively, for square
matrices of arbitrarily large dimension, the determinant can be defined recursively as
εijkεijk
6
=
3
3
×
1
1
×
1
1
×
det A11
[
]
A11
≡
2
2
×
det A11 A12
A21 A22
A11A22
A12A21
–
≡
3
3
×
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
A11A22A33
A12A23A31
A13A21A32
+
+
(
)
A13A22A31
A11A23A32
A12A21A33
+
+
(
)
εijk
A
[ ]
3
3
×
det A
[ ]
εijkA1iA2jA3k
k
1
=
3
∑
j
1
=
3
∑
i
1
=
3
∑
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
40
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 
(no implied summation on index )
 (3.93)
where  is a free index taking any convenient value from 1 to 
 (any choice for  will
give the same result). The quantity 
 is called the “cofactor” of 
, and it is defined
by
 (3.94)
Here 
 is the submatrix obtained by striking out the 
 row and 
 column of 
.
The determinant of 
 is called the “minor” associated with 
. By virtue of the
, the cofactor component 
 is often called the “signed minor.” Further details
about cofactors, including examples of how to compute them for 
 and 
 matrices
are given on page 42. The formula in Eq. (3.93) is almost never used in numerical calcula-
tions because it requires too many multiplications,* but it frequently shows up in theoreti-
cal analyses.
The index  in Eq. (3.94) may be chosen for convenience (usually a row with several
zeros is chosen to minimize the number of sub-determinants that must be computed). The
above definition is recursive because 
 is defined in terms of smaller
 determinants, which may in turn be expressed in terms of
 determinants, and so on until the determinant is expressed in terms of
only 
 determinants, for which the determinant is defined in Eq. (3.89). As an exam-
ple, consider using Eq. (3.93) to compute the determinant of a 
 matrix. Choosing
, Eq. (3.93) gives
,
 (3.95)
Alternatively choosing 
, Eq. (3.93) gives
,
 (3.96)
After using Eq. (3.90) to compute the 
 submatrices, both of the above expressions
give the same final result as Eq. (3.91).
* Specifically, for large values of the dimension 
, the number of multiplications required to evalu-
ate the determinant using Crammer’s rule (as Eq. 3.93 is sometimes called) approaches 
, 
where e is the base of the natural logarithm. An ordinary personal computer would require a few 
million years to compute a 
 determinant using Cramer’s rule! Far more efficient decomposi-
tion methods [__] can be used to compute determinants of large matrices.
det A
[ ]N
N
×
AijAij
C
j
1
=
N
∑
=
i
i
N
i
Aij
C
Aij
Aij
C
1
–
(
)i
j
+ det Mij
[
] N
1
–
(
)
N
1
–
(
)
×
=
Mij
[
]
ith
jth
A
[ ]
Mij
[
]
Aij
1
–
(
)i
j
+
Aij
C
2
2
×
3
3
×
N
e
1
–
(
)N!
20
20
×
i
det A
[ ]N
N
×
N
1
–
(
)
N
1
–
(
)
×
N
2
–
(
)
N
2
–
(
)
×
1
1
×
3
3
×
i=1
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
A11 det A22 A23
A32 A33
A12 det A21 A23
A31 A33
–
A13 det A21 A22
A31 A32
+
=
i=2
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
A21 det A11 A13
A32 A33
–
A22 det A11 A13
A31 A33
A23 det A11 A12
A31 A32
–
+
=
2
2
×

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
41
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Some key properties of the determinant are listed below:
 (3.97)
 (3.98)
 (3.99)
 (3.100)
If 
 is obtained by swapping two rows (or two columns) of 
, 
then 
.
 (3.101)
If any row of 
 can be written as a linear combination of the other rows, then 
. A special case is that 
 if any two rows of 
 are 
equal.
 (3.102)
For 
 determinants, the last two properties allow us to generalize Eq. (3.92) to read
 (3.103)
or, using the summation convention in which repeated indices are understood to be
summed (and, for clarity, now shown in red),
 (3.104)
This expression is frequently cited in continuum mechanics textbooks as the indicial defi-
nition of the determinant of a 
 matrix. Multiplying the above formula by 
 and
summing over   and  (and using Eq. 3.88) reveals that 
 (3.105)
Here, there are implied summations over the indices i,j,k,p,q, and r. If it were expanded
out, the above expression would contain 729 terms, so it is obviously not used to actually
compute the determinant. However, it is not at all uncommon for expressions like this to
show up in analytical analysis, and it is therefore essential for the analyst to recognize that
the right-hand-side simplifies so compactly.
Incidentally, note that
 (3.106)
det
A
[ ]T
(
)
det A
[ ]
=
det
A
[ ] B
[ ]
(
)
det A
[ ]
(
) det B
[ ]
(
)
=
det α A
[ ]N
N
×
(
)
αNdet A
[ ]
=
det
A
[ ] 1
–
(
)
1
det A
[ ]
----------------
=
B
[ ]
A
[ ]
det B
[ ]
det A
[ ]
–
=
A
[ ]
det A
[ ]=0
det A
[ ]=0
A
[ ]
3
3
×
εpqrdet A
[ ]
εijkApiAqjArk
k
1
=
3
∑
j
1
=
3
∑
i
1
=
3
∑
=
εpqrdet A
[ ]
εijkApiAqjArk
=
3
3
×
εpqr
p q
r
det A
[ ]
1
6--εpqrApiAqjArkεijk
=
εijkεpqr
det
δip δiq δir
δjp δjq δjr
δkp δkq δkr
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
42
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If any two columns or rows are interchanged, the sign of this determinant is reversed, con-
sistent with the cyclic property of the permutation symbol. Furthermore, if any two indices
of 
 are equal, then two rows will be identical, making the determinant zero, again con-
sistent with the definition of the permutation symbol. If, on the other hand, one of the three
 indices is set equal to one of the three 
 indices, and the common index is summed
from 1 to 3, then the -  identity is recovered.
More about cofactors
Given a matrix 
, the cofactor matrix 
 is an 
 matrix whose com-
ponents are obtained by application of the very strange formula that we first introduced in
Eq. (3.94):
 (3.107)
where (recall) 
 is the submatrix obtained by striking out the 
 row and 
 column
of 
. The determinant of 
 is called the “minor” associated with 
. The cofac-
tor 
 simply equals the minor times 
.
It might seem that something with such an awkward definition would be of only lim-
ited usefulness, but it turns out that cofactors are fantastically convenient and they appear
frequently in practical physics applications (unless trained to look for cofactors, however,
many people don’t recognize them when they appear). As a rule of thumb: whenever you
are analyzing a problem in which things are fluxing across or acting upon area elements
that are stretching and rotating in time, “think cofactors.”
The remainder of this section illustrates how to compute cofactors in 2 and 3 dimen-
sions, finishing with some derivative formulas involving cofactors.
SIDEBAR: cofactors of a 
 matrix
Consider a 
 matrix, 
. To find the minor associated with 
, you strike 
out row 1 and column 1, and take the determinant of what’s left. For a 
 matrix, 
the only thing left is pretty trivial — it’s just the 
 component. The determinant of 
a single number is just that number, so the minor associated with 
 is just 
. The 
cofactor, which is the signed minor found by multiplying by 
. Thus, 
 for a 
 matrix. The minor associated with 
 is found by striking out 
row 1 and column 2 and taking the determinant of what’s left which is just 
. The 
cofactor is found by multiplying this minor by 
 to obtain 
. 
Proceeding onward for each component eventually gives
These apply to a 
 matrix only!  (3.108)
ijk
ijk
pqr
ε δ
A
[ ]N
N
×
A
[ ]C
N
N
×
Aij
C
1
–
(
)i
j
+ det Mij
[
] N
1
–
(
)
N
1
–
(
)
×
=
Mij
[
]
ith
jth
A
[ ]
Mij
[
]
Aij
Aij
C
1
–
(
)i
j
+
2
2
×
2
2
×
A11 A12
A21 A22
A11
2
2
×
A22
A11
A22
1
–
(
)1
1
+
1
=
A11
C
A22
=
2
2
×
A12
A21
1
–
(
)1
2
+
1
–
=
A12
C
A21
–
=
A11
C
A22
=
A12
C
A12
–
=
A21
C
A12
–
=
A22
C
A11
=
2
2
×

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
43
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
SIDEBAR: cofactors of a 
 matrix
Consider a 
 matrix, 
. To find the minor associated with 
, you 
strike out row 1 and column 1, and take the determinant of what’s left, namely the 
 matrix 
, which has determinant 
. The cofactor, which is 
the signed minor, is found by multiplying this result by 
. Thus, 
. For index structure pattern recognition (discussed below), we 
will write this result in an equivalent form with the factors in the last term swapped 
so that 
. The minor associated with 
 is found by striking out 
row 1 and column 2 and taking the determinant of the remaining 
 matrix 
 to obtain 
. The cofactor is found by multiplying this minor by 
 to obtain 
, which we will write equivalently as 
. Proceeding onward for each cofactor eventually gives
 (3.109)
These apply to a 
 matrix only!
The index structure of these cofactors can be expressed in the form
Applies to a 
 matrix only!
 (3.110)
Here, an overbar on an index indicates a cyclic step forward and underbar indicates a 
cyclic step backward. Specifically, 
if 
, then 
 and 
if 
, then 
 and 
if 
, then 
 and 
 (3.111)
Finally, for 
 matrices, cofactor components may be expressed in terms of the 
permutation symbol as follows
,
 (3.112)
where, for compactness, we have used implicit summation conventions.
Cofactor-inverse relationship. The cofactor matrix 
 is well-defined even 
is singular. If, however, 
 happens to be invertible, then 
3
3
×
2
2
×
A11 A12 A13
A21 A22 A23
A31 A32 A33
A11
2
2
×
A22 A23
A32 A33
A22A33
A32A23
–
1
–
(
)1
1
+
1
=
A11
C
A22A33
A32A23
–
=
A11
C
A22A33
A23A32
–
=
A12
2
2
×
A21 A23
A31 A33
A21A33
A31A23
–
1
–
(
)1
2
+
1
–
=
A12
C
A31A23
A21A33
–
=
A12
C
A23A31
A21A33
–
=
A11
C
A22A33
A23A32
–
=
A12
C
A23A31
A21A33
–
=
A13
C
A21A32
A22A31
–
=
A21
C
A32A13
A33A12
–
=
A22
C
A33A11
A31A13
–
=
A23
C
A31A12
A32A11
–
=
A31
C
A12A23
A13A22
–
=
A32
C
A13A21
A11A23
–
=
A33
C
A11A22
A12A21
–
=
3
3
×
Amn
C
AmnAmn
AmnAmn
–
=
3
3
×
m
1
=
m=2
m=3
m
2
=
m=3
m=1
m
3
=
m=1
m=2
3
3
×
Aij
C
1
2--εiprεjqsApqArs
=
A
[ ]C
A
[ ]
A
[ ]

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
44
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.113)
This identity will be later discussed in more detail in the tensor analysis chapters.
Derivative of the cofactor. For a 
 matrix [A], differentiating Eq. (3.112) gives
 (3.114)
Derivative of a determinant (IMPORTANT)
The determinant of a matrix 
 is computed from the components of 
. Hence, the
determinant may be regarded as a function of these components. Here we want to compute
the derivatives of 
 with respect to any individual component of 
, while holding
the other components constant. 
Consider, for example, a 
 determinant. Derivatives of Eq. (3.90) with respect to
individual components gives. 
 (3.115)
The formulas are different for a 
 matrix. Specifically, differentiating Eq. (3.91) with
respect to each individual component gives
,
, etc.
 (3.116)
Comparing Eq. (3.115) with (3.108) and comparing (3.116) with (3.110) show that,
regardless of the size of the matrix, the derivative of a determinant with respect to a matrix
is given by the cofactor!
 (3.117)
Frequently, the structure 
 is used as a streamlined alternative to the notation
, in which case this result would be written
, where 
 (3.118)
Though we have only proved it for the special cases of 
 and 
 matrices, this
result holds regardless of the dimension of [A]. This result is valid even if the matrix 
is singular. If, however, 
 happens to be invertible, then the above result may be written
, when 
 is invertible
 (3.119)
A
[ ]C
det A
[ ]
(
) A
[ ] T
–
=
3
3
×
∂Aij
C
∂Ars
----------
εirmAmnεnjs
n
1
=
3
∑
m
1
=
3
∑
=
A
[ ]
A
[ ]
det A
[ ]
A
[ ]
2
2
×
∂det A
[ ]2
2
×
(
)
∂A11
----------------------------------
A22
=
∂det A
[ ]2
2
×
(
)
∂A12
----------------------------------
A21
–
=
∂det A
[ ]2
2
×
(
)
∂A21
----------------------------------
A12
–
=
∂det A
[ ]2
2
×
(
)
∂A22
----------------------------------
A11
=
3
3
×
∂det A
[ ]3
3
×
(
)
∂A11
----------------------------------
A22A33
A23A32
–
=
∂det A
[ ]3
3
×
(
)
∂A12
----------------------------------
A23A31
A21A33
–
=
∂det A
[ ]
(
)
∂Aij
------------------------
AijC
=
A
det A
[ ]
∂A
∂Aij
---------
Aij
C
=
A
det A
[ ]
≡
2
2
×
3
3
×
A
[ ]
A
[ ]
∂A
∂Aij
---------
A Aij
T
–
=
A
[ ]

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
45
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Here, 
 denotes the 
 components of the inverse of the transpose (or, equivalently, the
transpose of the inverse) of 
. Inverses and transposes are discussed soon.
Rates of determinants. Whenever you need the derivative of a determinant with
respect to something other than an individual component of the matrix, you should still
nevertheless start with Eq. (3.118), and then apply the chain rule. In continuum mechan-
ics, for example, material motion is characterized through the use of a tensor called the
deformation gradient, which has a component matrix denoted 
. The “Jacobian” is
given by 
 and, physically, it represents the ratio of deformed to undeformed
volume of a material element. For dynamic problems, it is often desirable to know the
time derivative of the Jacobian because it characterizes the volumetric expansion or con-
traction rate. If  is a function of time , then it follows that the components of 
 must
be functions of time, so we can apply the chain rule of partial differentiation. 
 (3.120)
We now know that the derivative of a determinant with respect to a component is given by
the cofactor for that component. Hence, this may be written
 (3.121)
or, employing the popular alternative notational structure in which a superposed single dot
denotes time differentiation,
 (3.122)
or
 (3.123)
Recognizing that this expression is the matrix inner product, we may write
 
(or, in tensor notation, 
)
 (3.124)
If 
 is invertible (which it indeed is for deformation gradients), then this result may be
written
 (3.125)
or
 
(or, in tensor notation, 
)
 (3.126)
This result holds for any matrix 
 even though we have here described it using the
deformation gradient as an example.
Aij
T
–
ij
A
[ ]
F
[ ]
J
det F
[ ]
=
J
t
F
[ ]
dJ
dt
------
∂J
∂F11
-----------dF11
dt
-----------
∂J
∂F12
-----------dF12
dt
-----------
…
∂J
∂F33
-----------dF33
dt
-----------
+
+
+
=
dJ
dt
------
F11
C dF11
dt
-----------
F12
C dF12
dt
-----------
…
F33
C dF33
dt
-----------
+
+
+
=
J·
F11
C F·
11
F12
C F·
12
…
F33
C F·
33
+
+
+
=
J·
Fij
CF·
ij
j
1
=
3
∑
i
1
=
3
∑
=
J·
F
[ ]C* F·
[ ]
=
J·
F˜˜
C:F˜˜
·
=
F
[ ]
J·
J
FijT
– F·
ij
j
1
=
3
∑
i
1
=
3
∑
J
Fji1
– F·
ij
j
1
=
3
∑
i
1
=
3
∑
J
F·
ijFji1
–
j
1
=
3
∑
i
1
=
3
∑
=
=
=
J·
Jtr
F·
[ ] F
[ ] 1
–
(
)
=
J·
J tr F˜˜
· :F˜˜
1
–
(
)
=
F
[ ]

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
46
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Derivatives of determinants with respect to vectors. Suppose 
that
 is to be differentiated with respect to an array 
. Again, Eq. (3.118) is the
place to start in conjunction with the chain rule. 
 (3.127)
where, we are here using implicit summation over the indices  and . If 
 is invertible,
then this result may be written
 (3.128)
Principal sub-matrices and principal minors
A so-called 
 principal submatrix of a square matrix 
 is any 
 subma-
trix (where 
) whose diagonal components are also diagonal components of the
larger matrix. For example,
 (3.129)
is a principal submatrix, whereas 
 is not a principal submatrix. For a 
 matrix,
there are three 
 principal submatrices (identically equal to the diagonal components),
three 
 principal submatrices, and only one 
 principal submatrix (equal to the
matrix 
 itself). 
A sequence of 
, 
, 
 
submatrices is nested if the 
 matrix is a sub-
matrix of the 
 matrix, and the 
 matrix is a submatrix of the next larger submatrix,
and so forth.
A principal minor is the determinant of any principal submatrix. The term “nested
minors” means the determinants of a set of nested submatrices. 
Matrix invariants
The 
 “characteristic” invariant, denoted 
, of a matrix 
 is the sum of all possi-
ble 
 principal minors. For a 
 matrix, these three invariants are
 (3.130a)
 (3.130b)
J
det F
[ ]
=
v
{ }
∂J
∂vk
--------
∂J
∂Fij
---------∂Fij
∂vk
---------
Fij
C∂Fij
∂vk
---------
=
=
i
j
F
[ ]
∂J
∂vk
--------
J Fij
T
– ∂Fij
∂vk
---------
=
n
n
×
A
[ ]N
N
×
n
n
×
n
N
≤
A11 A13
A31 A33
A12 A13
A22 A23
3
3
×
1
1
×
2
2
×
3
3
×
A
[ ]
1
1
×
2
2
×
… N
N
×
1
1
×
2
2
×
2
2
×
kth
Ik
A
[ ]
k
k
×
3
3
×
I1
A11
A22
A33
+
+
=
I2
det A11 A12
A21 A22
det A11 A13
A31 A33
det A22 A23
A32 A33
+
+
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
47
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.130c)
Warning: if the matrix is non-symmetric, the characteristic invariants are not a complete
set of independent invariants. If all three characteristic invariants of a symmetric matrix
are zero, then the matrix itself is zero. However, as discussed later, it is possible for all
three characteristic invariants of a non-symmetric matrix to be zero without the matrix
itself being zero.
Derivatives: (without proof)
 (3.131)
 (3.132)
 (3.133)
Alternative invariant sets. As will be discussed throughout this book, the above
three invariants are not the only invariants. Check “invariant” in the index for details.
Positive definite
A square matrix 
 is positive definite if and only if
 for all 
 (3.134)
In indicial notation, this requirement is
 (3.135)
Written out explicitly for the special case of a 
 matrix
 (3.136)
I3
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
=
∂I1
∂Amn
------------
δmn
=
∂I2
∂Amn
------------
I1δmn
Anm
–
I1δmn
Amn
T
–
=
=
∂I3
∂Amn
------------
Amn
C
=
B
[ ]N
N
×
v
{ }T B
[ ] v
{ }
0
>
v
{ }
viBijvj
j
1
=
N
∑
i
1
=
N
∑
0
>
2
2
×
B11v1v1
B12v1v2
B21v2v1
B22v2v2
+
+
+
0
>

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
48
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note that the middle two terms can be combined and written as 
. Similarly,
you can write the first term as 
. The third term can also be so written. Thus, the
requirement for positive definiteness depends only on the symmetric part of the matrix
. The non-symmetric part has no influence on whether or not a matrix is positive defi-
nite. Consequently, you may replace Eq. (3.134) by the equivalent, but more carefully
crafted, statement:
 is positive definite if and only if 
for all 
, where 
 is the 
symmetric part of 
.
It can be shown that a matrix is positive definite if and only if the characteristic invari-
ants of the symmetric part of the matrix are all positive.* 
Fortunately, there is an even simpler test for positive definiteness: you only have to
verify that any nested set of principal minors are all positive! This calculation is easier
than finding the invariants themselves because it requires evaluation of only one principal
minor determinant of each size (you don’t have to evaluate all of them). See page __ for
further details.
The cofactor-determinant connection
Let 
 denote the matrix of cofactors 
 associated with a square matrix
. The transpose of the cofactor matrix is also sometimes called the adjugate
matrix (not to be confused with “adjoint”). Recall the definition of the cofactor given in
Eq. (3.94):
 (3.137)
By virtue of Eq. (3.97), note that the transpose of the cofactor matrix is identically
equal to the cofactor matrix associated with 
. In other words, the cofactor and trans-
pose operations commute:
 (3.138)
As a short hand, we generally eliminate the parentheses and simply write 
 to mean
the transpose of the cofactor (or, equivalently, the cofactor of the transpose). The generali-
zation of Eq. (3.93) is
* It is possible to construct a matrix that has all positive invariants, but whose symmetric part does 
not have all positive invariants.
2
B12
B21
+
2
-----------------------



v2v1
2
B11
B11
+
2
-----------------------




B
[ ]
B
[ ]
v
{ }T A
[ ] v
{ }
0
>
v
{ }
A
[ ]
B
[ ]
A
[ ]C
Aij
C
A
[ ]N
N
×
Aij
C
1
–
(
)i
j
+ det Mij
[
] N
1
–
(
)
N
1
–
(
)
×
=
A
[ ]T
A
[ ]C
(
)T
A
[ ]T
(
)C
=
A
[ ]CT

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
49
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.139)
Written more compactly,
 (3.140)
Written in matrix form,
 (3.141)
It turns out that the location of the transpose and cofactor operations is inconsequential —
the result will be the same in all cases. Namely, 
 (3.142)
Inverse
The inverse of a matrix 
 is the matrix denoted 
 for which
 (3.143)
If the inverse exists, then it is unique. If the inverse does not exist, then the matrix 
 is
said to be “non-invertible” or “singular.” A necessary and sufficient condition for the
inverse to exist is that the determinant must be nonzero:
 (3.144)
Comparing Eqs. (3.142) and (3.143), note that the inverse may be readily computed
from the cofactor by
 (3.145)
While this definition does uniquely define the inverse, it must never be used as a definition
of the cofactor matrix. The cofactor matrix is well-defined and generally nonzero even if
the matrix 
 is singular.
Eigenvalues and eigenvectors
As mentioned in Eq. (3.92), a nonzero vector (array) 
 is called an eigenvector of a
square matrix 
 if there exists a scalar 
, called the eigenvalue, such that
. In order for this equation to have a non-trivial (nonzero) solution, the
determinant of the matrix 
 must be zero. Setting this determinant to zero results
in a polynomial equation, called the characteristic equation, for 
. If 
 is a 
matrix, the equation will be quadratic. If 
 is a 
 matrix, the equation will be cubic,
and so forth. We highly recommend that you do not construct the matrix 
 and
AikAjk
C
k
1
=
N
∑
     0         if     i
j
≠
det A
[ ]    if     i=j



=
AikAjk
C
k
1
=
N
∑
det A
[ ] δij
=
A
[ ] A
[ ]CT
det A
[ ]
(
)
I[ ]
=
A
[ ] A
[ ]CT
A
[ ]C A
[ ]T
A
[ ]T A
[ ]C
A
[ ]CT A
[ ]
det A
[ ]
(
)
I[ ]
=
=
=
=
A
[ ]
A
[ ] 1
–
A
[ ] A
[ ] 1
–
A
[ ] 1
–
A
[ ]
I[ ]
=
=
A
[ ]
det A
[ ]
0
≠
A
[ ] 1
–
A
[ ]CT
det A
[ ]
----------------
=
A
[ ]
p
{ }
A
[ ]
λ
A
[ ] p
{ }
λ p
{ }
=
A
[ ]
λ I[ ]
–
λ
A
[ ]
2
2
×
A
[ ]
3
3
×
A
[ ]
λ I[ ]
–

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
50
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
then set its determinant equal to zero. While that would certainly work, it allows for too
many opportunities to make an arithmetic error. Instead, the fastest way to generate the
characteristic equation is to first find all of the characteristic invariants of 
. These
invariants are the coefficients in the characteristic equation, alternating sign, as follows
For 
, the characteristic equation is
,
where 
, and 
 (3.146)
For 
, the characteristic equation is
,
where 
, 
, and
 (3.147)
For 
, the characteristic equation is 
. Higher
dimension matrices are similar.
Because the characteristic equation is a polynomial equation, an 
 matrix will
have up to 
 possible eigenvalues. For each solution 
 there exists at least one corre-
sponding eigenvector 
, which is determined by solving
 
(no sum on ).
 (3.148)
The solution for 
 will have an undetermined magnitude and, for symmetric matrices,
it is conventional to set the magnitude to one. For non-symmetric matrices, however, the
normalization convention is different, as discussed in relation to Eq. (15.44).
If an eigenvalue 
 has algebraic multiplicity 
 (i.e., if the characteristic equation
gives a root 
 repeated 
 times), then there can be no more than a total of 
 indepen-
dent eigenvectors associated with that eigenvalue — there might be fewer (though there is
always at least one). If the matrix 
 is symmetric, then it is well known [1] that it is
always possible to find 
 independent eigenvectors. The directions of the eigenvectors
when the multiplicity 
 is greater than one are arbitrary. However, the one thing that is
unique is the span of these vectors (see page 17), and it is conventional to set the eigen-
vectors to any orthonormal set of vectors lying in the span. For non-symmetric matrices, it
might happen that an eigenvalue of multiplicity 
 corresponds to a total of 
 linearly
independent eigenvectors, where 
 is called the geometric multiplicity. For example, the
matrix
A
[ ]
A
[ ]2
2
×
λ2
I1λ
–
I2
+
0
=
I1
A11
A22
+
=
I2
det A11 A12
A21 A22
=
A
[ ]3
3
×
λ3
I1λ2
–
I2λ
I3
–
+
0
=
I1
A11
A22
A33
+
+
=
I2
det A11 A12
A21 A22
det A11 A13
A31 A33
det A22 A23
A32 A33
+
+
=
I3
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
=
A
[ ]4
4
×
λ4
I1λ3
–
I2λ2
I3λ
–
I4
+
+
0
=
N
N
×
N
λi
p
{ }i
A
[ ] p
{ }i
λi p
{ }i
=
i
p
{ }i
λi
m
λi
m
m
A
[ ]
m
m
m
µ
m
<
µ

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
51
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.149)
Has an eigenvalue 
 with algebraic multiplicity of two. To find the associate eigen-
vector(s), you must solve
 (3.150)
Multiplying this out gives
 (3.151)
 (3.152)
The second equation gives us no information, and the first equation gives the constraint
that 
. Therefore, even though the eigenvalue had algebraic multiplicity of two, you
have only one eigenvector (geometric multiplicity equals one) which is given by 
.
When the geometric multiplicity of an eigenvector is less than the algebraic multiplicity,
then there does still exist a subspace that is uniquely associated with the multiple eigen-
value. However, characterizing this subspace requires solving a “generalized eigenprob-
lem” to construct additional vectors that will combine with the one or more ordinary
eigenvectors to form a set of vectors that span the space. The process for doing this is
onerous, and we have not yet personally happened upon any engineering application for
which finding these generalized eigenvectors provides any useful information, so we will
not cover the details. Instructions for the process can be found in [23,22,26]. If the gener-
alized eigenvectors are truly sought, then they can be found via the “JordanDecomposi-
tion” command in Mathematica [27] (see discussion below to interpret the result).
Similarity transformations. Suppose that you have a set of eigenvalues
 for a matrix 
, possibly with some of these eigenvalues having alge-
braic multiplicities greater than one. Let 
 denote the matrix whose columns contain the
corresponding eigenvectors (augmented, where necessary, to include generalized eigen-
vectors for the cases where the geometric multiplicity is less than the algebraic multiplic-
ity; the ordinary eigenvectors corresponding to a given eigenvalue should always, by
convention, be entered into columns of 
 before the generalized eigenvectors). Then it
can be shown that the original matrix 
 satisfies the similarity transformation
 (3.153)
If there are no generalized eigenvectors contained in the matrix 
, then the matrix 
is diagonal, with the diagonal components being equal to the eigenvalues. In this case, the
original matrix 
 is said to be “diagonalizable.” If, on the other hand, 
 contains any
generalized eigenvectors, then 
 still contains the eigenvalues on the diagonal, but it
5 3
0 5
λ
5
=
5 3
0 5
p1
p2
5 p1
p2
=
5p1
3p2
+
5p1
=
5p2
5p2
=
p2
0
=
1 0
,
{
}
λ1 λ2 … λN
,
,
,
{
}
A
[ ]
L
[ ]
L
[ ]
A
[ ]
A
[ ]
L
[ ] Λ
[
] L
[ ] 1
–
=
L
[ ]
Λ
[
]
A
[ ]
L
[ ]
Λ
[
]

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
52
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
additionally will contain a “1” in the 
 position (i.e., a “1” just above the eigenvalue
in the 
 column) corresponding to each 
 generalized eigenvector. In this form, the
matrix 
 is said to be in Jordan canonical form. For example, the similarity trans-
formation corresponding to Eq. (3.149) is
 (3.154)
This result can be obtained in Mathematica [27] via the command JordanDecomposi-
tion[{{5,3},{0,5}}]. The presence of the “1” in the 
 position of the 
 matrix
implies that the second column of 
 must contain a generalized eigenvector.
A matrix 
 is “diagonalizable” if the 
 matrix has no “1s” on any off-diagonal.
Consequently, there are no generalized eigenvectors. In general, even though 
 is diag-
onal, that does not mean that 
 is symmetric. 
The matrix 
 will be orthogonal (i.e., 
) if and only if the original
matrix 
 is symmetric. For symmetric matrices, there will never be any generalized
eigenvectors (i.e., the algebraic and geometric eigenvalue multiplicities will always be
equal), and the 
 matrix will therefore always be fully diagonal (no “1” on any off-
diagonal).
Finding eigenvectors by using the adjugate
Recall that 
 is an eigenvector of 
 if 
, where 
 is the eigen-
value. This equation can be written
, where 
 (3.155)
Recall that we determined the eigenvalue by setting  
. You can likewise use
the 
 matrix to determine the eigenvectors. Given that the determinant of 
 is zero,
Eq. (3.142) tells us that
, 
 (3.156)
from which it follows that if there is any nonzero column of the adjugate matrix, 
,
then that column must be an eigenvector of 
 associated with the eigenvalue that was
used to construct 
 in Eq. (3.155). It turns out that, for distinct eigenvalues (i.e., ones
with multiplicity of 1), there will always be a non-zero column of 
, and therefore
the adjugate matrix is a slick and easy way to find the eigenvector. Unfortunately, the situ-
ation is not so great when the eigenvalue is a double (or higher) root. For eigenvalues of
multiplicity greater than one, it is still true that any nonzero column of 
 will be an
eigenvector, but the adjugate might turn out to be zero or it might not capture all of the
possible eigenvectors. Consider, for example,
 (3.157)
For the eigenvalue 
, the “B” matrix is 
k
1
–
k
,
kth
kth
Λ
[
]
5 3
0 5
1 0
0 1 3
⁄
5 1
0 5
1 0
0 1 3
⁄
1
–
=
12
Λ
[
]
L
[ ]
A
[ ]
Λ
[
]
Λ
[
]
A
[ ]
L
[ ]
L
[ ] 1
–
L
[ ]T
=
A
[ ]
Λ
[
]
p
{ }
A
[ ]
A
[ ] p
{ }
λ p
{ }
=
λ
B
[ ] p
{ }
0
=
B
[ ]
A
[ ]
λ I[ ]
–
=
det B
[ ]
0
=
B
[ ]
B
[ ]
B
[ ] B
[ ]CT
0
=
B
[ ]CT
B
[ ]
B
[ ]
B
[ ]CT
B
[ ]CT
A
[ ]
1 0 0
0 0 0
0 0 0
=
λ
1
=

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
53
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 for which the adjugate is 
, and therefore the 
eigenvector is the only nonzero column, 
 (3.158)
However, for the double root eigenvalue, 
, the “B” matrix is just 
 itself, and the
adjugate is the zero matrix. Lacking nonzero columns, this adjugate matrix gives us no
guidance to determine the eigenvector, and traditional methods must instead be used. Our
recommendation is: use the adjugate to compute eigenvectors associated with distinct
non-multiple eigenvalues, but don’t bother when the eigenvalue is a multiple root.
Eigenprojectors
Recall Eq. (3.153):
 (3.159)
Let’s consider only the case that 
 is diagonalizable so that 
 is diagonal. Recall that
each column of 
 contains an eigenvector. Let 
, called the left-eigenvector, denote
the 
 column of 
 (i.e., the 
 eigenvector). Let 
, called the right-eigenvector,
denote the 
 row of 
. Since 
, it follows that
 (3.160)
This equation states that the inner product of different left and right eigenvectors will be
zero and the inner product of corresponding left and right eigenvectors will equal unity.
This property is called duality.
For the moment, consider the case that all eigenvalues are distinct. The outer product
of the left eigenvector 
 with its own counterpart right eigenvector 
 will pro-
duce a square matrix, which we will denote 
 and refer to as the 
 eigenprojector:
(no sum on )  (3.161)
An easy way to compute the eigenprojector 
 is 
 (3.162)
where 
 is a matrix that has a 1 in the 
 component and zeros everywhere else. Note
that 
(no sum on )  (3.163)
Consequently,
(no sum on )  (3.164)
As will be discussed in great detail later, this property implies that the tensor 
 is a pro-
jection operator. It can be shown that the original tensor 
 can be expressed as a sum of
its eigenvalues 
 times the corresponding eigenprojectors 
:
B
[ ]
0 0
0
0
1
–
0
0 0
1
–
=
B
[ ]CT
1 0 0
0 0 0
0 0 0
=
1
0
0
λ
0
=
A
[ ]
A
[ ]
L
[ ] Λ
[
] L
[ ] 1
–
=
A
[ ]
Λ
[
]
L
[ ]
g
{ }k
kth
L
[ ]
kth
<G>k
kth
L
[ ] 1
–
L
[ ] 1
–
L
[ ]
I[ ]
=
<G>i g
{ }j
δij
=
g
{ }k
<G>k
P
[ ]k
kth
P
[ ]k
g
{ }k<G>k
≡
k
P
[ ]k
P
[ ]k
L
[ ] ζ
[ ]k L
[ ] 1
–
=
ζ
[ ]k
kk
ζ
[ ]k ζ
[ ]k
ζ
[ ]k
=
k
P
[ ]k P
[ ]k
P
[ ]k
=
k
P
[ ]k
A
[ ]
λk
P
[ ]k

September 4, 2003 5:24 pm
Matrix Analysis (and some matrix calculus)
54
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (3.165)
The summation ranges over the number of eigenvalues. The importance of this result will
be far more clear when we get into tensor analysis. The term “eigenprojector” is used
because each matrix 
 can be regarded as a special operator that will project an arbi-
trary array 
 into its part in the direction of the 
 eigenvector. The projection is
oblique if the original matrix 
 is non-symmetric. All of this will be more clear after
you read about projection tensors later on.
Recall that we temporarily discussed eigenprojectors under the assumption that the
eigenvalues were all distinct. When there are repeated eigenvalues, the same results still
apply except that the index  in Eqs. (3.162) through (3.165) now ranges over the number
of distinct eigenvalues and the tensor 
 is now zeros everywhere except a 1 in each
location occupied by the 
 eigenvalue in the 
 matrix. Thus, for example, a double
root will have two entries of 1 on the diagonal. When there are double root eigenvalues,
the associated eigenvectors are not unique, but their span is a unique plane. In this double
root case, 
 represents an operation that will project any vector onto that plane. Even
though the eigenvectors are not unique, the eigenprojector is unique.
Finding eigenprojectors without finding eigenvectors. The eigenprojectors
are truly the physically significant results of an eigenvalue analysis because they are
unique (individual eigenvectors are not unique when there are repeated eigenvalues). You
can construct the eigenprojector without ever having to obtain the eigenvectors by the fol-
lowing formula:
 (3.166)
Here, 
 is the total number of distinct eigenvalues. For matrices of small dimensions, this
formula can be quite useful because it eliminates the need to compute eigenvectors.
A
[ ]
λk P
[ ]k
k∑
=
P
[ ]k
v
{ }
kth
A
[ ]
k
ζ
[ ]k
kth
Λ
[
]
P
[ ]k
P
[ ]k
A
[ ]
λi I[ ]
–
(
)
i
1
=
i
k
≠
m
∏
λk
λi
–
(
)
i
1
=
i
k
≠
m
∏
------------------------------------------
=
m

September 4, 2003 5:24 pm
Vector/tensor notation
55
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
4. Vector/tensor notation
“Ordinary” engineering vectors
We use the term “ordinary” to indicate the notion of a vector as it is introduced in ele-
mentary calculus texts — namely, something in 3D physical space that has length and ori-
entation. Physical examples include velocity, electric field, and angular rotation. This
“definition” is horribly ambiguous, but it is adequate for reviewing basic concepts and we
promise to atone for this transgression later. In general, we use the term “engineering”
whenever a quantity is defined from a physical rather than mathematical perspective. A
more correct mathematician’s definition of the term “vector” can be found on page 227,
where we will also introduce abstract vectors in higher-dimensional spaces.
Engineering “laboratory” base vectors
Let 
 denote a set of mutually perpendicular vectors of unit magnitude,
which we will refer to as the “laboratory basis” or the “laboratory triad.” Elemen-
tary calculus books often denote these vectors by 
, but practicing researchers just
can’t spare that many letters of the alphabet. The unit base vectors are always presumed to
exist as a reference from which all directional quantities may be described. The orientation
of the laboratory triad should be regarded as mutually agreed upon by all observers (e.g.,
all observers might agree that they point in the same directions as the edges of the walls
and floor in one corner of their laboratory, or they might define the directions based on the
stars — it doesn’t really matter what the choice is, so long as everyone agrees on it). The
laboratory base vectors are presumed to be fixed in time and space. 
Other choices for the base vectors
We insist that the laboratory basis must exist and all observers must agree upon its def-
inition. However, other bases can be used as well. Different observers can, if they wish,
opt to use supplemental basis triads. All observers will be able to communicate effectively
with each other by transforming their own results into equivalent results expressed using
the commonly agreed-upon lab basis. The rules governing how to accomplish these trans-
formations from one basis to another are central to the study of vector and tensor analysis. 
“When two men in business always agree, one of 
them is unnecessary.” 
— William Wrigler, Jr.
e˜1 e˜2 e˜3
,
,
{
}
i j k
, ,
{
}

September 4, 2003 5:24 pm
Vector/tensor notation
56
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
When explaining the meanings of various vector and tensor operations, this book lim-
its its scope to definitions that apply only to mutually perpendicular vectors, each of unit
magnitude. We also require that the orthonormal triad be “right-handed” (i.e., crossing the
first lab base vector into the second one gives the third one*). Any basis that is both right-
handed and orthonormal is called regularized. All vector and tensor operations pre-
sented in this book apply only to regularized bases; generalized definitions that apply to
irregular and curvilinear bases are provided in a sequel book [6].
Basis expansion of a vector
Let  be an ordinary vector (like velocity or electric field). Its expansion in terms of an
orthonormal basis 
 is
 (4.1)
where 
 are called the components of the vector with respect to the basis. The zero
vector  is defined to be the vector whose components are all zero. 
We may arrange the components of a vector in a column matrix as
 (4.2)
and the expansion of Eq. (4.1) is analogous to writing
 (4.3)
We may alternatively arrange the components of a vector into a row matrix:
 (4.4)
The row representation is just the transpose of the column representation:
,
 (4.5)
However there is no such thing as the transpose of a vector — 
 is meaningless! If 
are the components of a vector collected into a 
 matrix, then 
 also represents
the same vector even though the matrix 
 happens to be 
. 
* By this, we mean that you can point your index and middle finger of your right hand in the direc-
tion of the first and second base vectors, respectively, and your right thumb will then point in the 
direction of the third base vector.
v˜
e˜1 e˜2 e˜3
,
,
{
}
v˜
v1e˜1
v2e˜2
v3e˜3
+
+
vie˜i
i
1
=
3
∑
=
=
vi
0
˜
v
{ }
v1
v2
v3
=
v1
v2
v3
v1
1
0
0
v2
0
1
0
v3
0
0
1
+
+
=
<v>
v1 v2 v3
=
v
{ }T
<v>
=
v˜
T
v
{ }
3
1
×
v
{ }T
v
{ }T
1
3
×

September 4, 2003 5:24 pm
Vector/tensor notation
57
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Summation convention — details
The expression in Eq. (4.1) is written more compactly by using Einstein’s summation con-
vention as 
 (4.6)
The summation convention is defined such that any index (in this case i) that is repeated
exactly twice in a term is understood to be summed from 1 to 3. The summation ranges up
to 3 because ordinary engineering vectors are always referenced to 3D physical space.
Later on, we will define quantities (like matrix components 
) that have more than
one index. Then, for example, the expression 
, for which the index  is repeated,
would mean the same thing as
 (4.7)
In this expression, note that the index  occurs exactly once and is not repeated. Therefore
the above expression is actually three expressions, corresponding to the index  taking the
values from 1 to 3. For rectangular Cartesian components, the summation convention has
two fundamental rules (extra rules that apply for irregular bases can be found in Ref. [6]
and some less-common special-situation rules are discussed later):
1. An index that occurs exactly twice in a term is called a dummy index, and it is 
understood to be summed from 1 to 3, with the implied summation symbol applied 
only to the term in which the repeated dummy index appears. 
2. An index that occurs exactly once in a term is called a free index, and it must also 
appear exactly once in every other term.
The following expressions violate the summation convention:
(violates rule 2)
(violates rule 1)
 (4.8)
The following expressions all satisfy the summation convention:
 (4.9a)
 (4.9b)
 (4.9c)
 (4.9d)
The number of free indices indicates the number of expressions contained implicitly in a
single indicial expression. The first expression above has no free indices, so it corresponds
to a 
-order tensor (i.e., a scalar). The second expression has one free index, so it corre-
sponds to a 
-order tensor (i.e., a vector). The next expression has two free indices, so it
corresponds to a 
-order tensor. The last expression also has two free indices, so it also
corresponds to a 
-order tensor. We will precisely define what is meant by the term
“tensor” later; for now, we are merely clarifying notation and terminology. Incidentally,
v˜
vie˜i
=
Aij
Aijvj
j
Aijvj
j
1
=
3
∑
i
i
ai
bj
+
aiAijbi
aibi
bkAik
ai
wjkUpkqiTjpvq
+
+
aibj
aiAijbk
0th
1st
2nd
2nd

September 4, 2003 5:24 pm
Vector/tensor notation
58
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
whenever the term “tensor” is used, it usually refers to a second-order tensor. Many
authors alternatively use the word “rank” or “valence” instead of “order.” Hence, a tensor
of rank 2 is the same thing as what we will call a tensor of order 2. We prefer the term
order to avoid confusion with the meaning of rank from matrix analysis.
Incidentally, note that Eq. (4.9b) uses  as a dummy sum index in both the first and
last terms. This is perfectly legitimate. The rule demanding that a dummy index must
appear exactly twice applies to each individual term. Written out in conventional form
using summation symbols, Eq. (4.9b) is
 (4.10)
where the free index  ranges from 1 to 3.
Of course, summation is commutative (you can sum over i and then j, or vice-versa, with-
out changing the final result). Said differently, the summation signs can be applied in any
order. For example, the above equation could be written instead as
 (4.11)
Moving the summation symbols from the jkpq order to this qkpj order has no impact on
the result.
Don’t forget what repeated indices really mean. Newcomers to tensor analy-
sis sometimes forget that the summation rules are really just a notational convenience.
Sometimes it’s wise to go back to conventional notation to simplify an indicial expression.
Recall, for example, the definition of the Kronecker delta:
 (4.12)
Now consider the indicial expression
 (4.13)
There are no free indices, so the result must be a scalar. New students almost always get
burned by using Eq. (4.12) to say that 
 must be equal to 1. However, this conclusion is
wrong. The index  is repeated, so it must be summed. In other words, Eq. (4.13) really
says
 (4.14)
Recalling the true meaning of the indicial notation is also essential for simplifying other
expressions where 
 appears. Consider, for example,
k
bkAik
(
)
k
1
=
3
∑
ai
wjkUpkqiTjpvq
(
)
q
1
=
3
∑
p
1
=
3
∑
k
1
=
3
∑
j
1
=
3
∑
+
+
i
bkAik
(
)
k
1
=
3
∑
ai
wjkUpkqiTjpvq
(
)
j
1
=
3
∑
p
1
=
3
∑
k
1
=
3
∑
q
1
=
3
∑
+
+
δij
1  if  i=j
0  if  i
j
≠



=
s
δkk
=
δkk
k
s
δkk
k
1
=
3
∑
δ11
δ22
δ33
+
+
1
1
1
+
+
3
=
=
=
=
δij

September 4, 2003 5:24 pm
Vector/tensor notation
59
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (4.15)
It is wise to mentally realize that this is really
 (4.16)
Using the definition of the Kronecker delta, note that
 
The index “m” is not intended to be summed in this particular equation*
 (4.17)
Consequently, only one of the three terms (
, 
, or 
) in Eq. (4.16) will
be nonzero (the one where 
). Therefore,
 (4.18)
This result is just one example of how a Kronecker delta may be removed from an expres-
sion whenever one of its indices is a dummy sum index. See page 64 for further examples.
Further special-situation summation rules. Here are two additional rules to go
with the two main rules given on page 57.:
3. When a repeated subscript appears in the divisor of a fraction, it is understood to be 
implicitly summed within that divisor (i.e., the summation sign applies to that divisor, 
not to the whole expression). Free indices do not normally appear in divisors. It is 
permissible for the same repeated index symbol to appear separately in the numerator 
and divisor of an expression. For example, 
 means 
 (4.19)
4. Exponent and inverse operations take higher precedence than summation rules. For 
example, 
 means the 
 component of 
, not 
. Similarly, 
 means 
, not 
. Whenever there is potential for confusion, it’s advisable to show 
parentheses or to use words to clarify the intended meaning.
* It’s important to inform your readers when you wish to temporarily suspend the summation con-
ventions as we have done here. Some writers indicate that they do not wish for an index to be 
summed by marking it with an overbar, as in 
, or by putting the index in parentheses, as in 
 or by typesetting non-summed indices with capital letters, as in 
. 
Akmδmj
Akmδmj
m
1
=
3
∑
Akmδmj
Akj  if  m=j
0  if  m
j
≠



=
Akmδmi
Ak m
(
)δ m
(
)i
AkMδMj
Ak1δ1j Ak2δ2j
Ak3δ3j
m=j
Akmδmj
Akj
=
Aimwm
wmwm
----------------
Aimwm
m
1
=
3
∑
wmwm
m
1
=
3
∑
----------------------------
Aij
1
–
ij
A˜˜
1
–
1 Aij
⁄
Akk
1
–
tr A˜˜
1
–
(
)
1 trA˜˜
⁄

September 4, 2003 5:24 pm
Vector/tensor notation
60
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Indicial notation in derivatives. The summation convention also applies to deriva-
tives. For example
 (4.20)
means the same thing as
 (4.21)
Even though derivatives are denoted using a structure that looks like division, note that the
indicial notation conventions for derivatives are different from those for ratios. In particu-
lar, repeated subscripts in derivatives require the summation sign to go outside the entire
expression, not just around the “divisor-like” part.
BEWARE: avoid implicit sums as independent variables. 
When you
employ the summation convention in derivatives, you should be extra careful to be clear
about what the independent variable is. Consider for example
 (4.22)
What would the expression 
 mean? There are two possible answers:
 (4.23)
or
 (4.24)
The two answers are not the same, so we need a precedence rule. Our experience in read-
ing the literature is that most authors intend for the expression 
 to be interpreted
as Eq. (4.24). Thus, the precedence rule is to always apply summations after taking deriv-
atives. In other words, imagine that 
 is a function of nine 
 components. After finding
all nine 
 derivatives, then 
 is obtained by summing the three derivatives
corresponding to 
. To minimize confusion, we recommend that you write
, where 
 (4.25)
If you really want a derivative to be interpreted according to Eq. (4.23), then you
should write the expression more carefully as
, where 
 (4.26)
∂yik
∂zi
---------
∂yik
∂zi
---------
i
1
=
3
∑
w
b11
b22
b33
+
+
=
∂w ∂bkk
⁄
∂w
∂bkk
----------
∂w
∂b11
b22
b33
+
+
(
)
--------------------------------------------
1
=
=
∂w
∂bkk
----------
∂w
∂b11
-----------
∂w
∂b22
-----------
∂w
∂b33
-----------
+
+
1
1
1
+
+
3
=
=
=
∂w ∂bkk
⁄
w
bij
∂w ∂bij
⁄
∂w ∂bkk
⁄
i
j
=
µkk
µij
∂w
∂bij
---------
=
∂w
∂s
-------
s
bkk
=

September 4, 2003 5:24 pm
Vector/tensor notation
61
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Reading index STRUCTURE, not index SYMBOLS
This section tries to give a little insight to new students about how to read indicial for-
mulas to maximize understanding and to avoid a queasy “alphabet soup” feeling when
viewing expressions with lots of indices.
The actual symbols selected to be free and dummy indices are entirely up to you, so
long as your choices do not violate the summation rules. Beginning students often fail to
read indicial formulas in the most instructive manner. Experienced professionals know to
instead look at the structure of where the free and dummy indices appear. For example, to
memorize some strange formula like
,
 (4.27)
you would be wise to ignore the actual symbols used for the indices. Instead, you should
work to deduce the overall structure of the index placement. For example, if you want to
write down the formula for 
, then you could always painstakingly convert Eq. (4.27)
by replacing in all occurrences of  by ,  by , and  by 
. However, doing it that way
is error prone (especially since you cannot do it step-by-step because you would violate
the sum rules by having four j’s in the expression after step 1 of replacing  by ). People
who really understand indicial notation would construct the formula for 
 by spending
a little time “smelling” the structure of the Eq. (4.27). If you look carefully at that defining
equation, you will note that the “denominators” in the three terms on the right hand side
have the same indices as those on the left hand side — and they also appear in the same
order. Thus, your first step to constructing the expression for 
 would be to write a par-
tial “skeleton” formula as
,
 (4.28)
where the “
” stands for indices not yet inserted. Again looking at the structure of Eq.
(4.27) you would note that the subscripts on each 
 are simply the “other two” indices
not already in the “denominator.” Furthermore, those subscripts are placed in an order that
is a positive permutation of the free indices moving clockwise from the index already
placed in the denominator. Specifically, the positive permutations of 
 are: 
, 
,
and 
. Because the first term in Eq. (4.28) has 
 in the “denominator,” you know that
the “other two” indices for the first term must be “
”. Similarly, the second term has 
in the denominator, so the other two indices must be 
 (not 
 because you need to
select the same ordering as the positive permutation), etc. Thus, the final expression is
 (4.29)
In continuum mechanics, another common index structure is of the following form
 (4.30)
Yijk
∂ajk
∂xi
----------
∂aki
∂xj
----------
∂aij
∂xk
---------
–
+
=
Yjim
i
j j
i
k
m
i
j
Yjim
Yjim
Yjim
∂a??
∂xj
----------
∂a??
∂xi
----------
∂a??
∂xm
----------
–
+
=
??
a??
jim
jim imj
mji
xj
im
xi
mj
jm
Yjim
∂aim
∂xj
-----------
∂amj
∂xi
-----------
∂aji
∂xm
---------
–
+
=
Uijkl
Tikjl
Wiljk
+
=

September 4, 2003 5:24 pm
Vector/tensor notation
62
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
To “smell” the structure of the index placement, you might find it useful to mentally
replace the indices with numbers representing the order in which you should write them
on the paper:
 (4.31)
Thus, for example, if you want to write the formula for 
, then you should again start
with a partially completed skeleton in which you place only the first two indices:
 (4.32)
Then you fill out the remaining two indices 
 by placing them in that order on the first
term and in the reverse order in the second term to obtain
 (4.33)
Aesthetic (courteous) indexing
Once you have derived a final result, it is often helpful to your readers if you change
your choice of index symbols so that the free indices are ordered alphabetically on the left
hand side of the equation. For example, if your final result is something weird like
,
 (4.34)
then re-writing it in the equivalent form,
,
 (4.35)
is often appreciated by (certain) readers.
Suspending the summation convention
An equation that violates the summation convention is usually a mistake, often indicating
a typographical error or perhaps an error in which a dummy index was not changed to a
different symbol prior to a substitution. Occasionally, however, one produces a legitimate
equation that violates the summation convention, in which case, a temporary suspension
of the summation convention must be indicated. We have already encountered one
instance of needing to suspend the convention in our Eq. (4.17).
The summation conventions do not allow an index to appear three or more times in a
term. Thus, for example, the expression
 
 (4.36)
would have to be written in traditional form by explicitly showing the summation sign:
 (4.37)
U1234
T1324
W1423
+
=
Upqim
Upq??
Tp?q?
Wp?q?
+
=
im
Upqim
Tpiqm
Wpmqi
+
=
uskm
AsiBmik
=
uijk
AinBknj
=
λ1p
˜ 1 p
˜ 1
a˜
•
(
)
λ2p
˜ 2 p
˜ 2
a˜
•
(
)
λ3p
˜ 3 p
˜ 3
a˜
•
(
)
+
+
λkp
˜ k p
˜ k
a˜
•
(
)
k
1
=
3
∑

September 4, 2003 5:24 pm
Vector/tensor notation
63
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The summation symbol cannot be removed because the summation index  appears three
times. Here we had a legitimate expression in which an index occurred three times and a
summation was desired. Below we consider the case when an index appears exactly twice
and a summation is not desired.
Sometimes a legitimate indicial expression cannot be written in a manner that satisfies
the summation convention. In such a situation, the summation convention must be tempo-
rarily suspended. For example, the 
 eigenvector 
 corresponding to the 
 eigen-
value 
 of a matrix 
 is defined such that
 
(no sum on ).
 (4.38)
The phrase “no sum on ” tells the reader that the author wishes the index  to be inter-
preted as a free index even though it appears exactly twice on the right-hand side.
In tensor analysis, exceptions to the summation convention are rare, so it is a very con-
venient notational tool, especially when an expression contains numerous implied summa-
tions, as was the case in Eq. (3.105).
Combining indicial equations
The following equations all satisfy the summation rules:
⇔ 
⇔ 
⇔ 
 (4.39)
The expressions on the right show the equivalent matrix expression for the operations.
Note, in the last equation, that a transpose of 
 is required in the matrix equation. There
is no need for a transpose on 
 in the indicial expression — 
 is meaningless.
In the first two equations, the dummy summation index is  and the free index is ;
hence, those equations actually represent three separate equations for each value of the
free index “ ”. In the last expression, the dummy summation index is , and there are no
free indices (indicating that the equation is just a single equation for a single scalar).
It might be tempting to directly substitute the first two expressions in Eq. (4.39) into
the third equation to obtain 
. However, this combined equation violates the
summation convention because there are now four occurrences of the index  on the right-
hand-side. To properly combine the equations in (4.39), the dummy index  must be
changed to something else in one of the equations before combining the equations. The
symbol used in place of  is arbitrary, except that it must not be  because  is already
being used as a free index. Replacing  by  in the first of Eq. (4.39) gives 
,
allowing the equations to be combined to give
⇔ 
 (4.40)
which does not violate the summation convention. Written out in traditional form, this
equation may be written
k
ith
p
{ }i
ith
λi
A
[ ]
A
[ ] p
{ }i
λi p
{ }i
=
i
i
i
ai
Aijvj
=
a
{ }
A
[ ] v
{ }
=
bi
Bijwj
=
b
{ }
B
[ ] w
{
}
=
s
aibi
=
s
a
{ }T b
{ }
=
a
{ }
ai
ai
T
j
i
i
i
s
AijvjBijwj
=
j
j
j
i
i
j
k
ai
Aikvk
=
s
AikvkBijwj
=
s
v
{ }T A
[ ]T B
[ ] w
{
}
=

September 4, 2003 5:24 pm
Vector/tensor notation
64
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (4.41)
In the above analysis, we showed the equivalent matrix expressions in the right-hand col-
umn. The above analysis could have been done entirely using matrix manipulations, but
the skill of changing index symbols becomes indispensable when working with operations
that have no straightforward matrix analogs.
Index-changing properties of the Kronecker delta
The indicial form of Eq. (3.22) may be written
 (4.42)
Note that the Kronecker delta 
 acts in a way that appears to have “changed” the dummy
summation index  on 
 to become an  on 
 with the 
 removed. This “Kronecker
removal” property holds because, in the summation over , only one term is nonzero (the
one where 
).
This index-changing property holds in general. For example, the expression 
can be simplified by noting that the subscript  on 
 is a dummy summation subscript.
Therefore, 
 may be removed if the other occurrence of  is changed to a . The simpli-
fied expression is therefore 
. Conversely, given an expression 
 for which you
would prefer that the first index on A to be “i” instead of “p”, you can use a “Kronecker
insertion rule” to replace the expression with 
. These sorts of manipulations are
routine, and this section covers in detail some “gotcha” precautions you must take to
ensure that you don’t violate the sum rules when changing indices.
We have already used the Kronecker-removal index-changing property when we sim-
plified Eq. (3.86). The Kronecker-removal rule applies in more complicated expressions
involving multiple Kronecker deltas. Consider, for example, the expression
. Here the subscript  appears exactly twice, so it is a dummy summa-
tion index, and the 
 may be removed from the expression if the other occurrence of 
is changed to a . This gives 
. Now note that the index 
 is a dummy sum
index, so 
 may be removed if the other occurrence of 
 is changed to a 
 to give
. The 
 in this final expression may not be removed because both  and  are
free indices, not summation indices.
s
AikvkBijwj
j
1
=
3
∑
k
1
=
3
∑
i
1
=
3
∑
=
δijvj
vi
=
δij
j
vj
i
vi
δij
j
i=j
Aijvkδip
i
δip
δip
i
p
Apjvk
Apjvk
Aijvkδip
Tqmsδpkvqδkmδid
k
δpk
k
p
Tqmsvqδpmδid
m
δpm
m
p
Tqpsvqδid
δid
i
d

September 4, 2003 5:24 pm
Vector/tensor notation
65
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Now consider the expression 
. Noting that 
 is a summation index, this may
be simplified by removing the Kronecker delta 
 if the other occurrence of 
 is
replaced by  to give 
, which means 
 and which is therefore equiva-
lent to the trace operation of Eq. (3.51). 
 (4.43)
Above, we described how to simplify an expression by removing a Kronecker delta in
which at least one index is summed. Specifically, Eq. (4.43) provided a way for you to
remove the Kronecker delta from the expression. Frequently, however, you will want to
use the index changing property in its converse by reinserting a Kronecker delta. This pro-
δmkAkm
m
δmk
m
k
Akk
A11
A22
A33
+
+
If one index on a Kronecker Delta is a dummy sum index (i.e., that index
appears in two places), then the Kronecker delta may be removed if the
other instance of the summed index is replaced by the second index on
the Kronecker delta. This second index may be free or summed — it
doesn’t matter.
KRONECKER REMOVAL RULE
δriUarsδpqvi
Uaisδpqvi
=
This Kronecker delta has the index
“r” repeated. You can remove the 
Kronecker delta if you change the
second “r” to an “i”
This one has no 
repeated indices,
so it must stay
δriUarsδpqvi
Uarsδpqvr
=
This Kronecker delta has the index
“i” repeated. You can remove the 
Kronecker delta if you change the
second “i” to an “r”
ANOTHER VIEWPOINT
SAME RESULT WITH
BOTH VIEWPOINTS
(either way, the index on
v is getting summed with
the middle index on U)

September 4, 2003 5:24 pm
Vector/tensor notation
66
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
cess is more tricky because you must first verify that the indices that you hope to use on
the inserted Kronecker delta aren’t already being used elsewhere in the equation or expres-
sion. If they are, you must be extra careful to ensure that your manipulations won’t result
in violation of the summation conventions. Consider, for example, an expression
. This expression is linear with respect to 
, so we know* that
there must exist coefficients 
 such that 
. How do we go about finding
these coefficients? By taking enough time to learn the index structure, you can probably
slowly figure out that the final answer must be 
, but is there a step-by-
step procedure that you can fall back on “slow-brain” days when a random walk through
index changes just isn’t producing what you seek? Such a methodical or algorithmic pro-
cess would also be useful if you ever want to write a symbolic math program to do the
index manipulations for you. 
The first step in reformulating an equation is to look at the structure of the target equa-
tion, and compare that with the starting equation. If the target equation uses a different set
or free indices, then your first order of business will be to re-cast the starting equation to
use those free indices. In our example, we want to re-cast the equation
 into the new “target” form 
. The free index in our tar-
get equation is “i”, but the free index in the starting equation is “n”. WARNING: before
simply changing “n” to “i”, you must first change all other occurrences of “i” in the
starting equation to any other unused letter of the alphabet. Changing the “i” to, say, “p”,
we get 
. Now that “i” is nowhere to be seen, we may change the
free index “n” to the desired symbol “i”, giving 
. When making
these sorts of changes, remind yourself that a free index symbol will occur exactly once in
every term, so don’t forget to make the change in every term. Now that the free indices in
our starting equation are the same as the free indices in the target equation, the new goal is
to make adjustments in each individual term:
Given (as an illustrative example) 
,
 (4.44a)
determine coefficients 
 such that 
 (4.44b)
* from the Representation Theorem, covered later in Eq. 9.7.
sn
BinsAsi
Anmvm
+
=
A
[ ]
Cijk
si
CijkAjk
=
Cijk
Bkij
vkδij
+
=
sn
BinsAsi
Anmvn
+
=
si
CijkAjk
=
sn
BpnsAsp
Anmvm
+
=
si
BpisAsp
Aimvm
+
=
si
BpisAsp
Aimvm
+
=
Cijk
si
CijkAjk
=

September 4, 2003 5:24 pm
Vector/tensor notation
67
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note from Eq. (4.44b) that the desired indices on 
 are “jk”. However, the first term in
Eq. (4.44a) has indices “sp” and the last term has indices “im”. By using the following
flow chart individually on each term in Eq. (4.44a), you will be able to make the necessary
index change adjustments.
You should apply this flow chart sequentially for each index that needs changing, mak-
ing sure to always follow the steps using the latest revisions of the expressions.
A
[ ]
Given: a multi-index expression (i.e., a term in an equation) with an
index 
 that you wish to instead be a different symbol , 
α
β
…
Is 
 already in use anywhere 
else in the expression?
β
Change all occurrences of 
 to some other unused 
letter of the alphabet.
β
Is 
 a free index?
α
Change 
 to 
 and multiply 
the expression by 
.
α
β
δαβ
Change all (both) occurrences 
of 
 to 
.
α
β
DOUBLE CHECK!!! Now that 
 has been changed to , equate the original 
expression to the newly revised version and verify satisfaction of sum rules.
α
β
STEP 1
STEP 1.1
STEP 2
STEP 2.2
STEP 2.1
STEP 3
yes
yes
no
no

September 4, 2003 5:24 pm
Vector/tensor notation
68
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Let’s apply this flow chart to the first term on the right hand side of Eq. (4.44a), which
is 
. Comparing with Eq. (4.44b), we desire the index “s” to instead be “j” (we
also want “p” to instead be “k”, but the footnote of the flow chart instructs us to deal with
only one index at a time, so let’s first worry getting that “s” changed to a “j”). Using the
flow chart, 
STEP 1: Is “j” already in use anywhere else in the expression 
? No.
STEP 2: Is “s” a free index? No, it appears twice, so it is a dummy sum index.
STEP 2.2: Change both occurrences of “s” to “j” to obtain 
STEP 3: Equate the starting expression (in step 1) to the final expression in step 2.2:
. Are there any sum rule violations? No. Both sides have the same 
free index (“i”) and all repeated indices appear exactly twice in their terms.
Now that we have completed one revision, let’s work on the second subscript on 
.
Again comparing with Eq. (4.44b) with our latest revision 
, we see that we want
that index “p” to instead be “k”. The path on the flow chart is similar to what was done
above and the result is 
. This takes care of the first term in Eq. (4.44a). Now let’s
work on the second term, 
. Comparing with Eq. (4.44b), we want the index “i” to
instead be “j”. Following the flow chart, here are the steps:
STEP 1: Is “j” already in use anywhere else in the expression 
? No.
STEP 2: Is “i” a free index? YES, because it appears exactly once.
STEP 2.1: Change “i” to “j” and multiply by 
 to obtain 
STEP 3: Equate the starting expression (in step 1) to the final expression in step 2.1:
. Are there any sum rule violations? No. Both sides have the same 
free index (“i”) and all repeated indices appear exactly twice in their terms.
Working with the latest revision, 
, again comparing with Eq. (4.44b) shows that
we want the index “m” to instead be “k”. Following the flowchart again lets us revise the
expression to read 
. Recalling our revised version of the first term, we now have
our final revision of Eq. (4.44):
 (4.45)
In this form, we can now compare with Eq. (4.44b) to assert that the coefficients we seek
must be given by
 (4.46)
Note that step 2.1 of our flow chart used the following rule:
 (4.47)
BpisAsp
BpisAsp
BpijAjp
BpisAsp
BpijAjp
=
A
[ ]
BpijAjp
BkijAjk
Aimvm
Aimvm
δij
Ajmvmδij
Aimvm
Ajmvmδij
=
Ajmvmδij
Ajkvkδij
si
BkijAjk
Ajkvkδij
+
=
Cijk
Bkij
vkδij
+
=
If an expression has a FREE index 
 that you would like to instead be a different sym-
bol 
, then first change any existing dummy sum occurrences of 
 to any other
unused letter. You may then change 
 to 
 if you multiply the expression by 
.
α
β
β
α
β
δαβ
KRONECKER INSERTION RULE (FOR FREE INDICES ONLY)

September 4, 2003 5:24 pm
Vector/tensor notation
69
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note that this rule (which is the converse of Eq. 4.43) is typically applied only to expres-
sions (i.e., individual terms in an equation), and it can be applied only if occurrences of the
desired index symbol are already present only as dummy sum indices, not as free indices.
Note that application of this rule changes the index on a variable, without changing the
free index. Specifically, after changing 
 to 
 and then multiplying by 
, the index 
will exist twice, so it is a dummy sum index and 
 is still the free index. After application
of this rule, 
 will still be a free index, but it will now be a subscript on  instead of on
the original variable. Because the symbol 
 will still be the free index symbol after appli-
cation of this rule, you will not generally apply this rule to equations. In equations, if you
really want to change the letter of the alphabet used for a free index, you will need to make
the change in every single term of the equation, making sure that the new symbol was not
already in use prior to the change (if it was, remember to first change the other occur-
rences of the desired new symbol to any other letter of the alphabet).
Summing the Kronecker delta itself
Consider the expression 
. The index  is a dummy sum index on the first 
, so
that 
 (not the other one) may be removed if the second occurrence of  is changed to a
. The second occurrence of the  happens be on the second 
. Thus 
 may be
simplified to become 
. Recalling that 
 equals 1 if 
, one might be tempted to
write 
, which would be wrong. The index  is still a summation index, and there-
fore
 (4.48)
Viewed differently, this says that the trace of the 
 identity matrix is equal to 3.
Our (unconventional) “under-tilde” notation
Conventional publishing practice typesets scalars in italic while vectors and tensors
are set in bold. As a teaching aid to add clarity to our discussion, we extend this practice
by explicitly indicating the order of vectors and tensors by the number of under-tildes.
Thus, for example,  denotes a scalar,  denotes a vector, 
 denotes a second-order ten-
sor (to be defined later),  denotes a third-order tensor, and so on.
Tensor invariant operations
Unless otherwise indicated, all vector and tensor components cited in this book are ref-
erenced to an orthonormal basis, which could be — but is not limited to — the laboratory
basis. Lab components can be transformed to any other orthonormal basis by using the
techniques covered on page __, where it is shown, for example, that components 
 of a
vector  with respect to the lab basis 
 are related to the components 
 of the
same vector with respect to a different orthonormal basis 
 according to
 where 
. The base vectors themselves are related by 
.
Importantly, it is shown on page __ that the 
 matrix is orthogonal (i.e., 
).
α
β
δαβ
β
α
α
δ
α
δikδik
i
δik
δik
i
k
k
δik
δikδik
δkk
δij
i=j
δkk=1
k
δkk
δ11
δ22
δ33
+
+
1
1
1
+
+
3
=
=
=
3
3
×
s
v˜
T˜˜
g
˜˜˜
vi
v˜
e˜1 e˜2 e˜3
,
,
{
}
vˆ
˜j
eˆ
˜1 eˆ
˜2 eˆ
˜3
,
,
{
}
vi
Qijvˆj
=
Qij
e˜i
eˆ
˜j
•
=
e˜i
Qijeˆ
˜j
=
Q
[
]
QkiQkj
δij
=

September 4, 2003 5:24 pm
Vector/tensor notation
70
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Though probably not immediately obvious, this orthogonality property ensures that the
component formulas for the vast majority of operations described in this book take pre-
cisely the same structural form in any orthonormal basis. For example, the vector dot
product is defined for the lab basis as 
, and if you apply transformation formulas to
substitute 
 and 
, then orthogonality of the 
 matrix shows that
the dot product can be computed by 
, which is precisely of the same form as the for-
mula that uses lab components. This sort of result is typical of tensor and vector opera-
tions. The linear transformation formula for 
 is computed by 
 with
respect to the lab basis and 
 with respect to a different “hat” basis (it is shown
on page __ that the lab and “hat” components of the tensor 
 are related by
). Note that the component formulas are identical in structure. The
components of the output vector are different in the two systems (i.e., 
). However,
the output vector itself is computed by multiplying the components by the base vectors:
 or 
. Even though the components are different, this product of compo-
nents times base vectors will give the same final result for . In fact, any operation whose
component formula has the same structure in any orthonormal basis is referred to a ten-
sor invariant operation. After multiplying components times base vectors, you will
obtain the same tensor (or vector) regardless of which basis you used in your component
calculations. Knowing that an operation is invariant is extremely helpful because it gives
you licence to perform the operation in any convenient orthonormal basis, and you can
rest assured that the resulting tensor (or vector) will be the same as if you had instead per-
formed your component calculations in a different basis.
akbk
ak
Qkiaˆ i
=
bk
Qkjaˆ j
=
Q
[
]
aˆ kbˆ
k
y
˜
F˜˜
x˜
•
=
yi
Fijxj
=
yˆi
Fˆ
ijxˆj
=
F˜˜
Fij
QimQjnFˆ
mn
=
yi
yˆi
≠
y
˜
yie˜i
=
y
˜
yˆie˜i
=
y
˜

September 4, 2003 5:24 pm
Simple vector operations and properties
71
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
5. Simple vector operations and properties
Dot product between two vectors
GOAL: Define, cite properties, show application to find angle between two vectors, show 
application to decide if a vector is zero.
Using the summation convention, the dot product between two vectors  and 
 is*
 (5.1)
Written out in full, 
 (5.2)
In matrix notation, this can be written
 
= 
= 
 (5.3)
The magnitude of a vector  is given by
 (5.4)
* This document presumes that all vectors are real. If however, you wish to generalize the inner prod-
uct between two vectors  and 
 that might have complex components, then the dot product 
should be revised to 
, where the overbar denotes the complex conjugate.
“Blessed are those who expect nothing, 
for they shall not be disappointed.” 
— Carl Sandburg
v˜
w˜
v˜
w˜
v˜*w˜
v˜
w˜
•
vkwk
=
=
v˜
w˜
•
vkwk
≡
v˜
w˜
•
v1w1
v2w2
v3w3
+
+
=
v˜
w˜
•
(
)
v1
v2
v3
T w1
w2
w3
v
{ }T w
{
}
=
v1 v2 v3
w1
w2
w3
<v> w
{
}
=
v˜
v
v˜
+ v12
v22
v32
+
+
+ v˜
v˜
•
=
=
=

September 4, 2003 5:24 pm
Simple vector operations and properties
72
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Geometrically, the dot product can be written
,
 (5.5)
where  and 
 are the magnitudes of  and 
, respectively, and
 is the angle between  and 
. The dot product is commuta-
tive:
 (5.6)
It also satisfies the inner product positivity rule
 if 
 if and only if 
 (5.7)
This positivity property implies that the magnitude of a vector, as defined in Eq. (5.4), will
always be real.*
Dot product between orthonormal base vectors
If 
 is an orthonormal basis, then
, 
 (5.8)
where (recall) the symbol 
 is the Kronecker delta, defined 
 (5.9)
A “quotient” rule (deciding if a vector is zero)
GOAL: Explain that you can’t define division by vectors, but there is an extended viewpoint 
that is similar.
Suppose the product of two scalars  and  is zero. Then we all know that you may
conclude that 
 and/or 
. Furthermore, if 
 for all choices of 
, then you
may conclude that  must be zero.
Now suppose that the dot product of two vectors 
 and  is zero. Then, based on the
definition of the dot product, you may conclude that one of three possibilities exist:
(1)
is zero, (2)  is zero, or 
 
 is perpendicular to . More importantly...
If 
 for all choices of 
, then 
.
 (5.10)
A vector is zero if and only if all of its components are zero.
* Keep in mind that we are considering only ordinary engineering vectors having real components. If 
complex components were allowed, the inner product would be written 
, where the 
overbar denotes the complex conjugate.
v˜
w˜
θvw
v˜
w˜
•
vw
θvw
cos
=
v
w
v˜
w˜
θvw
v˜
w˜
v˜
w˜
•
w˜
v˜
•
=
v˜
v˜
•
0
>
v˜
0
˜
≠
v˜
v˜
•
0
=
v˜
0
˜
=
v˜
w˜
•
vkwk
≡
e˜1 e˜2 e˜3
,
,
{
}
e˜i
e˜j
•
δij
=
δij
δij
1 if i
j
=
0 if i
j
≠



=
u
v
u=0
v=0
uv
0
=
u
v
u˜
v˜
u˜
v˜
3
( ) u˜
v˜
u˜
v˜
•
0
˜
=
u˜
v˜
0
˜
=

September 4, 2003 5:24 pm
Simple vector operations and properties
73
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Deciding if one vector equals another vector. Not surprisingly, two vectors 
and  are equal if and only if 
. Thus, the above tests for deciding if a vector is
zero can be applied to tell if two vectors equal each other. Specifically, Eq. (5.10) can be
written
If 
 for all choices of 
, then 
.
 (5.11)
Two vectors are equal if and only if corresponding components are equal. Without the pro-
viso that Eq. (5.11) holds for all choices of 
, the best you would be able to conclude is
that 
 is perpendicular to the span of admissible choices for 
. If, for example, you
were told that 
 for all vectors 
 in the 2-3 plane, then you could conclude
that 
 must point in the 1-direction. This would not imply that either  or  each indi-
vidually point in the 1-direction; instead, it would imply that 
 and 
.
These statements seem self-evident in this simple 3D context, but become quite impor-
tant in higher dimensions. 
Finding the i-th component of a vector
GOAL: Show that the ith component of a vector can be found by dotting that vector by the 
ith base vector.
Recall that any vector  can be expressed as
 (5.12)
Dotting both sides with 
 gives 
. Similarly, 
 and 
.
Hence, the 
 component of a vector with respect to an orthonormal basis 
can always be found by
 (5.13)
This relationship can be derived using strictly indicial notation by noting that Eq. (5.12) is
equivalent to 
 (5.14)
Dotting both sides by 
, invoking Eq. (5.8), and finally using the index-changing prop-
erty of the Kronecker delta (Eq. 4.43) gives
 (5.15)
which is equivalent to Eq. (5.13). This method for finding the component of a vector
might seem at first glance to be trivial and of no obvious use. Suppose however, that
 is a different basis. Further suppose that we do know the components of 
with respect to the original (unstarred) basis, but we wish to determine the components of
this vector with respect to this new (starred) basis. Then 
. As a specific exam-
ple, suppose that 
, 
, and 
 (5.16)
Suppose that we know that, with respect to the unstarred basis the vector  is given by
a˜
b˜
a˜
b˜
–
0˜
=
a˜
u˜
•
b˜
u˜
•
=
u˜
a˜
b˜
=
u˜
a˜
b˜
–
u˜
a˜
u˜
•
b˜
u˜
•
=
u˜
a˜
b˜
–
a˜
b˜
a2
b2
=
a3
b3
=
v˜
v˜
v1e˜1
v2e˜2
v3e˜3
+
+
=
e˜1
v˜
e˜1
•
v1
=
v˜
e˜2
•
v2
=
v˜
e˜3
•
v3
=
ith
e˜1 e˜2 e˜3
,
,
{
}
vi
v˜
e˜i
•
=
v˜
vke˜k
=
e˜i
v˜
e˜i
•
vke˜k
e˜i
•
vkδki
vi
=
=
=
e˜1* e˜2* e˜3*
,
,
{
}
v˜
vi*
v˜
e˜i*
•
=
e˜1
*
1
5-- 3e˜1
4e˜2
+
(
)
=
e˜2
*
e˜3*
–
=
e˜3
*
1
5--
4
– e˜1
3e˜2
+
(
)
=
v˜

September 4, 2003 5:24 pm
Simple vector operations and properties
74
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (5.17)
Then the components with respect to the unstarred basis are just 
, 
 and
, whereas the components of this vector with respect to the starred basis are
 (5.18)
 (5.19)
 (5.20)
The method presented in this section works only when the new (starred) basis is orthonor-
mal; see page 88 to learn how to find the components of a vector with respect to an irregu-
lar (non-normalized and/or non-orthogonal) basis.
Even and odd vector functions
GOAL: Define, show function decomposition into even plus odd parts
If a function 
 has the property that 
, then the function is said to be
even, and it is independent of the vector’s directional sense. For example, the operation
 is even. On the other hand, if 
, then the function is said to be odd. 
Any function 
 may be decomposed into its even part 
 plus its odd part 
as
 (5.21)
where
 (5.22)
Homogeneous functions
GOAL: Define, show identities
A function f is said to be homogenous of degree k if it satisfies
 for all positive scalars 
.
 (5.23)
For example, 
 is homogeneous of degree 3. The function 
 is
homogeneous of degree zero. The function 
 is not homogeneous of any
degree.
When a function is homogenous of degree k, then can be shown [__] that
 (5.24)
where 
. Furthermore, the function 
 is homogeneous of degree k–1.
That is,
 (5.25)
v˜
2e˜1
5e˜2
+
=
v1
2
=
v2
5
=
v3
0
=
v1
*
v˜
e˜1
*
•
2e˜1
5e˜2
+
(
)
1
5-- 3e˜1
4e˜2
+
(
)
•
6
5--
20
5------
+
26
5------
=
=
=
=
v2
*
v˜
e˜2
*
•
2e˜1
5e˜2
+
(
)
e˜3*
–
(
)
•
0
=
=
=
v3
*
v˜
e˜3
*
•
2e˜1
5e˜2
+
(
)
1
5--
4
– e˜1
3e˜2
+
(
)
•
8
–
5------
15
5------
+
7
5--
=
=
=
=
f v˜( )
f
v˜
–
(
)
f v˜( )
=
v˜
v˜
•
f
v˜
–
(
)
f v˜( )
–
=
f v˜( )
fe v˜( )
fo v˜( )
f v˜( )
fe v˜( )
fo v˜( )
+
=
fe v˜( )
1
2-- f v˜( )
f
v˜
–
(
)
+
[
]
≡
fo v˜( )
1
2-- f v˜( )
f
v˜
–
(
)
–
[
]
≡
f αv˜
(
)
αkf v˜( )
=
α
f x
( )
x3
=
f x
( )
x
x
⁄
=
f x
( )
1
x
+
=
f ′ v˜( )
v˜
•
kf v˜( )
=
f ′ v˜( )= ∂f ∂vi
⁄
(
)e˜i
f ′ v˜( )
f ′ αv˜
(
)
αk
1
–
f ′ v˜( )
=

September 4, 2003 5:24 pm
Simple vector operations and properties
75
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Vector orientation and sense
GOAL: Clarify terminology
The term “orientation” will be used to describe a line that is parallel to a given vec-
tor. The terms “direction” or “sense” will be used to describe the direction that a vector
points along its orientational line. Thus, for example, the direction of 
 is opposite that
of  whereas the orientations of the two vectors are identical because they lie in parallel
directions. 
Suppose that a function 
 is homogeneous of degree zero. In other words,
putting
 in Eq. (5.23), we are supposing that a function satisfies the property that, for
all scalars 
, 
. Then the function 
 depends only on the vector’s orienta-
tion, not on its magnitude or sense.
Simple scalar components
GOAL: Find the scalar component of one vector in the direction of another.
The vector inner (dot) product is extremely useful for extracting parts of vectors (or ten-
sors) in particular directions. 
The operation
, 
where 
 (5.26)
gives the (rectangular) component of  in the direction of a second vector 
. Since we are
only talking about the direction of 
, the actual magnitude of 
 is irrelevant — that’s
why the formula depends only on the unit vector 
 that points in the direction of 
. The
formula of Eq. (5.26) would not change if we were to multiply 
 by any positive scalar
. The result changes sign if 
 is replaced by 
.
Just as  can be projected onto 
, the reverse operation of projecting 
 in the direc-
tion of  gives the component of 
 in the direction of .
, 
where 
 (5.27)
This operation depends on the direction of , but not its magnitude.
v˜
–
v˜
f v˜( )
k=0
α f αv˜
(
)
f v˜( )
=
f v˜( )
v˜
w˜
v˜
wˆ
˜
•
Figure 5.1.
Finding components via projections.   (a) scalar component of  in the direction of 
,
(b) scalar component of 
 in the direction of , and (c) the scalar components of  in the directions of
the base vectors.
v˜
w˜
w˜
v˜
v˜
v˜
w˜
w˜
vˆ
˜
•
v˜
e˜1
e˜2
v1
v2
(a)
(b)
(c)
v˜
wˆ
˜
•
wˆ
˜
w˜w˜
---------
≡
v˜
w˜
w˜
w˜
wˆ
˜
w˜
w˜
α
w˜
w˜
–
v˜
w˜
w˜
v˜
w˜
v˜
w˜
vˆ
˜
•
vˆ
˜
v˜v˜
--------
≡
v˜

September 4, 2003 5:24 pm
Simple vector operations and properties
76
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Eq. (5.13) is a special case of Eq. (5.26) in which 
 is 
. Thus, 
 is the projection of
 in the 
 coordinate direction.
Cross product
GOAL: Define, show identities, show how to find the area of the parallelogram formed by 
two vectors
The cross product between two vectors, 
 and 
 is a
vector defined as:
,
 (5.28)
The unit vector  is perpendicular to both  and , with
a direction defined by the right hand rule when sweeping
from  to  through the angle 
. Some books will tell
you that the angle 
 must be less than 
, but that’s
not necessary. While it’s true that the smaller angle
between 
 and 
 is conventionally used, you can alter-
natively sweep through the larger angle, again by the
right-hand rule; doing that will change the sign of both
 and 
, making the result in Eq. (5.28)
unchanged.
The parallelogram in the illustration has an orientation perpendicular to 
. The
area of the parallelogram equals the magnitude of 
. 
If 
, then the components of 
 are
 (5.29)
Hence,
 (5.30)
Heuristically, this equation is often written as the determinant of a matrix:
 “=” 
 (5.31)
Cross product between orthonormal base vectors
GOAL: Cite important special-case of the cross product between base vectors.
Applying the definition of the cross product reveals that the nine possible ways to cross
the orthonormal base vectors with themselves give
w˜
e˜i
vi
v˜
ith
b˜
a˜
θab
nˆ˜
Figure 5.2.
Cross product 
a˜
b˜
a˜
b˜
×
ab
θab
sin
(
)nˆ˜
=
nˆ˜
a˜
b˜
a˜
b˜
θab
θab
180°
a˜
b˜
θab
sin
nˆ˜
a˜
b˜
×
a˜
b˜
×
u˜
a˜
b˜
×
=
u˜
u1
a2b3
a3b2
–
=
u2
a3b1
a1b3
–
=
u3
a1b2
a2b1
–
=
a˜
b˜
×
a2b3
a3b2
–
(
)e˜1
a3b1
a1b3
–
(
)e˜2
a1b2
a2b1
–
(
)e˜3
+
+
=
a˜
b˜
×
det
e˜1 e˜2 e˜3
a1 a2 a3
b1 b2 b3

September 4, 2003 5:24 pm
Simple vector operations and properties
77
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (5.32)
These expressions may be written compactly using the summation notation as
 (5.33)
where 
 is the permutation symbol defined in Eq. (3.76). 
You can use Eq. (5.33) to deduce the component (indicial) expression of the cross
product. Namely,
 (5.34)
The last step applied Eq. (5.33). Noting that the final result is the sum over  of an expres-
sion times 
, the 
 component of the cross product operation must therefore be
 (5.35)
This formula relies on our previously stated assumption that all component formulas
in this book are referenced to an orthonormal right-handed basis. If you use an orthonor-
mal left-handed basis, then the above formula would be 
. Some
authors take this situation as an implication that the permutation symbol for left-handed
base vectors should be defined as the negative of the right-handed definition. This is mis-
leading and wrong-headed. What’s really going on is that the cross product operation can
be most generally written in structured notation as a special third-order alternating tensor
 operating on the vectors 
 and 
. [Namely, using notation to be defined later in this
book, 
.] The components of the alternating tensor can be proved to equal
 if the basis is orthonormal and right-handed, while 
 if the basis is
orthonormal but left-handed. The 
 components have yet a different form if the basis is
non-orthogonal or non-normalized.*  Note that the permutation symbol does not change
sign for a left-handed basis — only the components of the alternating tensor 
 change
upon a change of basis. We reiterate that, although the form of the component formulas for
 depend on the nature of the basis, the final result for 
 is the same in all cases.
In other words, 
 represents a particular and unique vector that does not depend on the
underlying basis. Only the method that you must use to determine this unique vector varies
depending on the choice of basis.
* Namely, if 
 is a linearly independent set of vectors, then 
.
e˜1
e˜1
×
0˜
=
e˜1
e˜2
×
e˜3
=
e˜1
e˜3
×
e˜2
–
=
e˜2
e˜1
×
e˜3
–
=
e˜2
e˜2
×
0˜
=
e˜2
e˜3
×
e˜1
=
e˜3
e˜1
×
e˜2
=
e˜3
e˜2
×
e˜1
–
=
e˜3
e˜3
×
0˜
=
e˜i
e˜j
×
εijke˜k
=
εijk
a˜
b˜
×
aie˜i
(
)
bje˜j
(
)
×
aibj e˜i
e˜j
×
(
)
aibjεijke˜k
=
=
=
k
e˜k
kth
a˜
b˜
×
(
)k
aibjεijk
=
a˜
b˜
×
(
)k
aibjεijk
–
=
ξ
˜˜˜
a˜
b˜
a˜
b˜
×
ξ
˜˜˜
: a˜b˜
(
)
=
ξijk
εijk
=
ξijk
εijk
–
=
ξijk
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
ξijk
g
˜ i
g
˜ j
g
˜ k
×
(
)
•
=
ξ
˜˜˜
a˜
b˜
×
a˜
b˜
×
a˜
b˜
×

September 4, 2003 5:24 pm
Simple vector operations and properties
78
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Triple scalar product
GOAL: Define, cite properties, show application to deciding if three vectors are linearly 
independent.
Given three vectors, , , and , the triple scalar product is defined
 (5.36)
For rectangular Cartesian components, this operation can be computed by
 (5.37)
The fully indicial form of the triple scalar product is
 (5.38)
The triple scalar product can be used to test whether or not three vectors are linearly inde-
pendent:
 (5.39)
It can be shown that the triple scalar product has the same value if the vectors are posi-
tively permuted and it changes sign if the vectors are negatively permuted. Specifically,
 (5.40)
and
 (5.41)
Physically, the absolute value of 
 equals the volume of the parallelepiped formed
by 
, 
, and 
. The sign of 
 will be positive if the vectors form a “right-
handed” triad, meaning that when the thumb of the right hand points in the direction of
 and the index finger points in the direction of 
 then the middle finger will point
roughly in the direction of  (i.e., if the middle finger were a vector, it would have a posi-
tive dot product with ). If the sign of 
 is negative, then the triad is said to be
“left-handed.”
a˜
b˜
c˜
a˜ b˜ c˜
, ,
[
]
a˜
b˜
×
(
)
c˜
•
≡
a˜ b˜ c˜
, ,
[
]
det
a1 a2 a3
b1 b2 b3
c1 c2 c3
=
a˜ b˜ c˜
, ,
[
]
εijkaibjck
=
Three vectors, 
, 
, and , (in 3D space) are lin-
early independent if and only if 
.
a˜
b˜
c˜
a˜ b˜ c˜
, ,
[
]
0
≠
a˜ b˜ c˜
, ,
[
]
b˜ c˜ a˜
, ,
[
]
c˜ a˜ b˜
, ,
[
]
=
=
a˜ b˜ c˜
, ,
[
]
c˜ b˜ a˜
, ,
[
]
–
b˜ a˜ c˜
, ,
[
]
–
a˜ c˜ b˜
, ,
[
]
–
=
=
=
a˜ b˜ c˜
, ,
[
]
a˜
b˜
c˜
a˜ b˜ c˜
, ,
[
]
a˜
b˜
c˜
c˜
a˜ b˜ c˜
, ,
[
]

September 4, 2003 5:24 pm
Simple vector operations and properties
79
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Triple scalar product between orthonormal RIGHT-HANDED 
base vectors
GOAL: Cite the triple scalar product between right-handed base vectors and argue against 
redefining the permutation symbol for other types of basis triads (instead, advocate using 
different values for the permutation tensor components).
Dotting Eq. (5.33) by 
 gives
 (5.42)
where 
 is the permutation symbol defined in Eq. (3.76). Expressing the above result
with the free index 
 replaced by  gives
 (5.43)
The triple scalar product 
 is certainly well-defined if the basis is left-handed; in
fact, the result is 
. As mentioned earlier, this fact should not be used as
justification for redefining the permutation symbol when using a left-handed basis. We
recommend always defining the permutation symbol such that 
 even if the basis
is left-handed. 
Even though the term “tensor” has not yet been defined, it’s worth mentioning here (for future refer-
ence) that a straightforward formula exists for constructing a third-order permutation tensor in terms of any
basis— including left-handed and even non-orthonormal. The permutation tensor components with respect
to a non-orthonormal basis take yet a different form (covered in the more advanced Ref. [6]), and the process
of computing the triple scalar product becomes more complicated. Nonetheless, the basic concept is the
same: the triple scalar product of three vectors equals the triple inner product of the alternating tensor into
the “dyadic” multiplication (defined later) of the three vectors. It just happens that the components of the
alternating tensor equal the permutation symbol when the basis is orthonormal and right-handed. It is for this
reason that we denote the alternating tensor by a symbol 
 that differs from its right-handed orthonormal
components 
. A similar notational choice is also made when we denote the identity tensor, , by a sym-
bol that differs from its right-handed orthonormal components (the Kronecker delta 
). 
e˜m
e˜i
e˜j
×
(
)
e˜m
•
εijkδkm
εijm
=
=
εijk
m
k
εijk
e˜i e˜j e˜k
,
,
[
]
=
e˜i e˜j e˜k
,
,
[
]
e˜i e˜j e˜k
,
,
[
]
εijk
–
=
ε123=+1
ξijk
εijk
I˜˜
δij

September 4, 2003 5:24 pm
Projections
80
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
6. Projections
Mathematically, a projection operation is any function 
 for which
 (6.1)
In other words, once the function 
 has been applied, then applying it a second time will
not change the result. Below, we will discuss rank-1 projections that will return the part of
a vector 
 in the direction of some other vector. This is a projection because, if the first
vector is already parallel to the second vector, the projection operation will simply return
the first vector unchanged. We will also discuss rank-2 projections that return the part of a
vector contained in a specified plane. This type of projection is like a formula for finding
the shadow of a vector on the plane. If the vector is already in the plane, it’s shadow is
itself, making this operation a projection. As discussed below, projections can be linear or
nonlinear.
Orthogonal (perpendicular) linear projections
GOAL: Show how to find the part of a vector in the direction of another vector (and clarify 
distinction between this and finding the scalar component in the direction of a vector).
Equation (5.26) shows how to find the scalar component of  in the direction of 
. If
we were to multiply the result by 
, then we would obtain a vector that is in the direction
of 
 or, if 
, a vector that is in the opposite direction of 
. This operation, in
which we multiply the component of 
 in the direction of 
 by 
 itself is called the
orthogonal vector projection of  onto 
, and we will denote this vector by 
 (which
may be read as “the part of  in the direction of 
”). The mathematical definition is
 
where 
 (6.2)
For some applications, it is prudent to recognize that the projection operation involves
two vectors,  and 
, so it is sometimes advisable to instead define a binary* operator 
such that 
 denotes the part of  in the direction of 
. In terms of this alternative
notation, Eq. (6.2) would read
* The term binary is merely a fancy way of saying that the operator has two arguments.
“I am always ready to learn, although 
I do not always like to be taught” 
— Winston Churchill 
P x˜
( )
P P x˜
( )
(
)
P x˜
( )
=
P
x˜
v˜
w˜
wˆ
˜
w˜
v˜
wˆ
˜
•
0
<
w˜
v˜
wˆ
˜
wˆ
˜
v˜
w˜
v˜
Dw
v˜
w˜
v˜
Dw
v˜
wˆ
˜
•
(
)wˆ
˜
=
wˆ
˜
w˜w˜
---------
≡
v˜
w˜
D
D v˜ w˜
,
(
)
v˜
w˜

September 4, 2003 5:24 pm
Projections
81
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (6.3)
Clearly,
 (6.4)
The part of the vector  that is “left over” — i.e., 
 — is the part of the vector 
that is perpendicular to 
, which we will denote by 
 or by 
. It is defined by
 (6.5)
or
 (6.6)
Note that 
 lies in the plane perpendicular to 
. Also note that
 (6.7)
This equation shows more clearly that the operators 
 and 
 decompose the vector  into
two parts, one parallel to 
 and the remainder perpendicular to
.
To make a sketch of 
, simply draw a line parallel to 
 that passes through the tail
of . Then draw a line perpendicular to 
 (or, for 3D problems, draw a plane perpendicu-
lar to 
) that passes through the tip of the vector . These two lines (or, for 3D problems,
the line and the plane) will intersect at a single point, which we will call 
. Then 
 is
the vector extending from the tail of  to 
 and 
 is the vector extending from 
 to the
tip of . See Fig. 6.1.
As mentioned earlier, 
. Nonetheless. The vector 
 may be simi-
larly decomposed into parts that are in parallel and perpendicular to  by the formulas
D v˜ w˜
,
(
)
v˜
w˜
•
w˜
w˜
•
-------------



w˜
=
D v˜ w˜
,
(
)
D w˜ v˜
,
(
)
≠
v˜
v˜
v˜
Dw
–
v˜
w˜
v˜
Pw
P v˜ w˜
,
(
)
v˜
Pw
v˜
v˜
wˆ
˜
•
(
)wˆ
˜
–
=
P v˜ w˜
,
(
)
v˜
v˜
w˜
•
w˜
w˜
•
-------------



w˜
–
=
v˜
Pw
w˜
P v˜ w˜
,
(
)
D v˜ w˜
,
(
)
+
v˜
=
P
D
v˜
w˜
w˜
v˜
Dw
w˜
v˜
w˜
w˜
v˜
A
v˜
Dw
v˜
A
v˜
Pw
A
v˜
v˜
v˜
Dw
Figure 6.1.
Vector decomposition.   (a) decomposition of  in directions parallel and per-
pendicular to 
, (b) decomposition of 
 into parts parallel and perpendicular to , and (c) the
projection of 
 onto the unit base vectors.
v˜
w˜
w˜
v˜
w˜
w˜
w˜
e˜1
e˜2
v˜
Pw
w˜
Dv
w˜
Pv
w˜
De1
w˜
De2
(a)
(b)
(c)
A
A
A
tip
tail
tip
tip
tail
tail
v˜
lines 
parallel
to 
w˜
lines 
parallel
to 
D v˜ w˜
,
(
)
D w˜ v˜
,
(
)
≠
w˜
v˜

September 4, 2003 5:24 pm
Projections
82
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 
and 
where 
 (6.8)
Figure 6.1 clearly shows that this decomposition of 
 results in completely different vec-
tors as the decomposition of .
The last sketch in Fig. 6.1 shows the decomposition of a vector 
 into parts that are
aligned with the base vectors. In particular, note that we labeled the vertical part of the
vector as 
 because, in three dimensions 
. Suppose, for example, that the
vector is 
. Then
 (6.9)
whereas
.
 (6.10)
Rank-1 orthogonal projections
GOAL: Explain that finding the part of a vector in the direction of another vector is a 
projection operation, and explain why this projection has “rank 1”.
The notation 
 symbolizes the orthogonal (perpendicular) projection of a vector 
in the direction of a second vector . The symbol 
 may be referred to as “the part of 
in the direction of .” Since this operation involves two vectors, you might alternatively
prefer to denote it in a more standard way by 
. The result is always going to be a
vector parallel to . The adjective “orthogonal” or “perpendicular” is used to indicate that
each point on the vector  maps to the closest point on a line parallel to ; therefore, the
projection direction is a family of lines that are perpendicular to . The set of all vectors
parallel to 
 forms a one-dimensional subspace because any member of the set may be
written in the form 
, which involves only one arbitrary scalar α.
If 
 is a unit vector, then any vector  can be projected into a part that is parallel to 
and simultaneously perpendicular to the plane whose normal is 
 (6.11)
In other words, 
 is just 
. This projection has rank 1 because the target space is the
one-dimensional line parallel to . If one were to compute the average of  over all rota-
tions of  about 
, then the result would be the vector . 
w˜
Dv
D w˜ v˜
,
(
)
w˜
vˆ
˜
•
(
)vˆ
˜
=
=
w˜
Pv
P w˜ v˜
,
(
)
w˜
w˜
vˆ
˜
•
(
)vˆ
˜
–
=
=
vˆ
˜
v˜v˜
--------
≡
w˜
v˜
w˜
w˜
De2
w˜
De2
w˜
Pe1
≠
w˜
6e˜1
3e˜2
7e˜3
+
+
=
w˜
De2
3e˜2
=
w˜
Pe1
3e˜2
7e˜3
+
=
a˜
Db
a˜
b˜
a˜
Db
a˜
b˜
D a˜ b˜
,
(
)
b˜
a˜
b˜
b˜
b˜
αb˜
n˜
x˜
n˜
n˜
p
˜
n˜ n˜
x˜
•
(
)
=
p
˜
x˜
Dn
p
˜
x˜
x˜
n˜
p
˜

September 4, 2003 5:24 pm
Projections
83
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Rank-2 orthogonal projections
GOAL: Show how to find the orthogonal (nearest) projection of a vector onto the plane 
perpendicular to another vector.
As sketched in Fig. 6.2, any vector  can be projected onto a plane with unit normal 
by using the formula
.
 (6.12)
In other words, 
 is just 
. This transformation is called an orthogonal projection
because the projected vector  represents the “shadow” cast by  onto the plane perpen-
dicular to  when the light rays (formally called level lines) are coaxial with . (Note: the
term “coaxial” here means aligned, but not necessarily of the same sense.) The projection
is second-rank because the target space to which the vector is being projected is two
dimensional (a plane).
Basis interpretation of orthogonal projections
GOAL: Emphasize that the rank-1 and rank-2 projections effectively extract “pieces” of the 
starting vector that break it down into smaller parts relative to a locally aligned basis.
The vector  can have any orientation. In order to better interpret equations like (6.11)
and (6.12), it is often useful to set up a basis that has, say, its 
 direction aligned with 
.
If we align 
 with 
, then the plane in Fig. 6.2, would be the 1-2 plane. Substituting
 into Eqs. (6.11) and (6.12) and applying Eq. (5.13) gives
.
 (6.13)
.
 (6.14)
p
˜
x˜
Plane perpendicular to n˜
Figure 6.2.
(a) Rank-1 orthogonal projection, and (b) Rank-2 orthogonal projection.   
The dashed lines show the projection direction. For the Rank-1 orthogonal projection, the dashed lines
point from a location on 
 to a target line that is parallel to the unit vector 
 (the target line can be
translated so that it passes through any point in the plane without changing the result for the projection
vector . For the Rank-2 projection, the dashed lines point from a location on  toward the shortest dis-
tance to the plane if the plane is positioned at the tail of the vector . The projections are orthogonal be-
cause the path from the vector  to the target line or plane is the shortest distance.
x˜
n˜
p
˜
x˜
x˜
x˜
n˜
q
˜
x˜
Plane perpendicular to n˜
n˜
n˜
(a)
(b)
x˜
n˜
q
˜
x˜
n˜ n˜
x˜
•
(
)
–
=
q
˜
x˜
Pn
q
˜
x˜
n˜
n˜
n˜
e˜3
n˜
e˜3
n˜
n˜ =e˜3
p
˜
e˜3 e˜3
x˜
•
(
)
x3e˜3
=
=
q
˜
x˜
x3e˜3
–
x1e˜1
x2e˜2
+
=
=

September 4, 2003 5:24 pm
Projections
84
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Thus, the projected vector  is the part of  that is in the 3-direction, and  is the part of
 that is in the 1-2 plane. In many engineering applications, there exist multiple planes to
which vectors are projected, so it is not always possible to merely set up a single basis that
is lined up with all of the planes of interest — that’s why our direct notation equations
(6.11) and (6.12) are more convenient. Furthermore, the vector  and the plane’s normal
 might be changing in time. In this case, the direct notation formula of Eq. (6.12) is most
convenient because it allows direct computation of rates.
The concept of a projection will now be generalized to permit us to find the “late after-
noon shadow” of the vector  when the “light rays” are oblique to the plane.
Rank-2 oblique linear projection
GOAL: Explain oblique (not nearest point) projections onto a plane.
Figure 6.2(b) showed how to find the shadow
of a vector at “high noon,” when the sun was
directly overhead so that the light rays were per-
pendicular to the target plane. As sketched in
Fig. 6.3, a more general kind of projection allows
the “light rays” to intersect the plane at an oblique
angle. Now we seek the formula for the shadow of
 in the late afternoon, when the sun is shining
from an angle. This kind of projection can be char-
acterized via two vectors  and . The target plane
is defined to be perpendicular to 
, and the light
rays are parallel to . The magnitudes of these vec-
tors are inconsequential since they are only being
used to define orientations (see page 75). 
As before, we seek an expression for the vector  that is the projection of  onto the
plane. This time, however, we want the projection direction (the “light rays”) to be aligned
with a different vector 
. Referring to Fig. 6.3, we can see that there must exist a scalar
coefficient such that the vector 
 can be written as the sum of 
 plus some (as yet)
unknown multiple of :
,
 (6.15)
To find the value of 
, we impose the condition that the vector  must lie in the plane. In
other words, 
 must be zero if we want  to be perpendicular to . Dotting both sides
of Eq. (6.15) by  (and setting 
) gives
.
 (6.16)
Solving for 
 and substituting the result into (6.15) gives the desired formula for the
oblique projection:
p
˜
x˜
q
˜
x˜
x˜
n˜
x˜
x˜
Plane perpendicular to b˜
Figure 6.3.
Oblique projection.   
The paths of projection (dashed lines)
are all parallel to , so they obliquely in-
tersect the plane. The result for 
 is un-
affected by translation of the plane.
a˜
q
˜
q
˜
a˜
b˜
x˜
a˜
b˜ b˜
a˜
q
˜
x˜
a˜
x˜
q
˜
a˜
x˜
q
˜
ηa˜
+
=
η
q
˜
b˜
q
˜
•
q
˜
b˜
b˜
b˜
q
˜
•
0
=
b˜
x˜
•
0
η b˜
a˜
•
(
)
+
=
η

September 4, 2003 5:24 pm
Projections
85
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
, where 
.
 (6.17)
Naturally, Eq. (6.12) is a special case of the more general Eq. (6.17), obtained by choosing
. In other words, the projection is orthogonal only if  is proportional to . 
Rank-1 oblique linear projection
GOAL: Explain oblique projections onto a second vector.
The remaining part of 
 is obtained by a rank 1
projection. Namely, 
. Thus,
, where
.
 (6.18)
The result of this operation will always be a vector
that is simply a scalar multiple of 
. This target
space is one dimensional, so the projector 
 has
rank 1. 
Note that the operator 
 has the property that
. Physically, this means that pro-
jecting a vector that is already in the target space will just give you back that vector
unchanged (your shadow has no shadow other than itself). This property is, in fact, used to
define the term “projection.” The operator 
 has the similar property that
, so it is therefore a projector.
Degenerate (trivial) Rank-0 linear projection
GOAL: Explain that the zero operator is a degenerate projector.
Consider a function that does nothing but return the zero vector: 
 (6.19)
As a special case, note that
 (6.20)
Though somewhat silly-seeming, we can then state that 
 (6.21)
Applying the zero operator a second time to both sides of Eq. (6.19) gives
 (6.22)
or, using Eq. (6.21),
 (6.23)
q
˜
Q x˜
( )
=
Q x˜
( )
x˜
a˜ b˜
x˜
•
(
)
a˜
b˜
•
-------------------
–
=
a˜=b˜=n˜
a˜
b˜
x˜
Plane perpendicular to b˜
Figure 6.4.
Rank-1 oblique projec-
tion.   The path obliquely intersects the
plane.
p
˜
a˜
b˜
x˜
p
˜
x˜
q
˜
–
=
p
˜
P x˜
( )
=
P x˜
( )
a˜ b˜
x˜
•
(
)
a˜
b˜
•
-------------------
=
a˜
P
P
P P x˜
( )
(
)
P x˜
( )
=
Q
Q Q x˜
( )
(
)
Q x˜
( )
=
P x˜
( )
0
˜
=
P 0
˜
( )
0
˜
=
P x˜
( )
P 0
˜
( )
=
P P x˜
( )
(
)
P 0
˜
( )
=
P P x˜
( )
(
)
P x˜
( )
=

September 4, 2003 5:24 pm
Projections
86
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Hence, Eq. (6.12) permits us to assert that the uninteresting zero operator is a projection.
By its definition, it is also a linear operator and its range space, trivially, contains only the
zero vector. Hence the zero operator is a rank-0 projection because its range space is zero-
dimensional (a single point in space).
Degenerate (trivial) Rank-3 projection in 3D space
GOAL: Explain that the identity operator is also a projection.
Consider the identity operator: 
 (6.24)
Applying this operator a second time to both sides of this equation gives
 (6.25)
Hence, trivially, the identity operation is a projection according to the definition in
Eq. (6.12). Since we are considering vectors in three-dimensional space, the range of the
identity operation is 3D space, making this a rank-3 projection.
Complementary projectors
GOAL: define, begin introducing concepts needed for the projection theorem
The operator 
 is called the complement of 
. In general, two operators 
 and 
 are
called complementary projectors if the following properties hold
 (6.26)
 (6.27)
 (6.28)
 (6.29)
The last property states that the sum of 
 and 
 must be the identity operation (this is an
abstract way of saying that the 
 and 
 operators permit an additive decomposition of the
vector 
). The rank of 
 plus the rank of 
 must sum to equal the dimension of the
space, which is 3 for ordinary physical vectors.
Normalized versions of the projectors
GOAL: Generalize the “aligned” basis description of a projector to show that the structure 
is very similar for oblique projections except that the “aligned” basis is non-orthonormal.
The projectors 
 and 
 in Eqs. (6.17) and (6.18) are homogeneous of degree zero
with respect to  and/or . (i.e., multiplying either of these vectors by any nonzero scalar
does not affect the outcome of the operations). This property does not mean that the pro-
jection formulas depend on only the angle between  and . The scaling property simply
implies that the formulas are insensitive to the magnitudes and senses of  and  — only
their orientations matter (see page 75).
P x˜
( )
x˜
=
P P x˜
( )
(
)
P x˜
( )
=
P
Q
P
Q
P P x˜
( )
(
)
P x˜
( )
=
Q Q x˜
( )
(
)
Q x˜
( )
=
Q P x˜
( )
(
)
P Q x˜
( )
(
)
0
˜
=
=
P x˜
( )
Q x˜
( )
+
x˜
=
P
Q
P
Q
x˜
P
Q
Q
P
a˜
b˜
a˜
b˜
a˜
b˜

September 4, 2003 5:24 pm
Projections
87
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Because the magnitudes of 
 and 
 are arbitrary, it is convenient in certain applica-
tions to replace them with 
 and 
, which have the same orientations as 
 and 
, but
whose magnitudes satisfy
 (6.30)
One possible way to construct  and  is*
 
and 
 (6.31)
When the property of Eq. (6.30) holds, 
 and 
 are called “dual” vectors. Using the
dual vectors, Eq. (6.17) simplifies to
 (6.32)
The component form of Eq. (6.17) take a particularly simple form when expressed
using a nonorthogonal basis having the covariant† base vector 
 and the contravar-
iant base vector 
. Namely
,
 (6.33)
This result is strongly analogous to Eq. (6.14), with the key difference being that the 
base vectors are nonorthogonal and not generally of unit length. The projector 
 is a
rank-2 projector because its range space is two dimensional.
A vector that is pointing directly at the sun will have no shadow at all. The null
space of the projector 
 is the set of all  for which 
. Setting 
 in
Eq. (6.17) reveals that the null space of that particular projector is the set of vectors that
are proportional to . Thus, the null space of the projector is one-dimensional. The range
space (i.e., the target plane) is two dimensional. Since 
 and 
 are complementary pro-
jectors, the null space of one is the range space of the other! Later on, projectors will be
defined for higher-dimensional spaces and the null spaces will be more interesting.
* This formula applies when 
. For 
, then  should be replaced by 
 before apply-
ing this formula.
† When a basis 
 is nonorthonormal, there naturally arises a useful companion or “dual” 
basis denoted 
 which is defined such that 
, where 
 is the Kronecker delta 
of Eq. (5.9). Thus, for example, 
 is perpendicular to the plane formed by 
 and 
. A vector 
can be expressed in terms of either basis as 
. Subscripted quantities are called 
“covariant” and superscripted quantities are “contravariant.” (A cute mnemonic is “co-go-
below”). Non-orthonormal tensor analysis is reviewed in Refs. [7,6].
a˜
b˜
aˆ
˜
bˆ
˜
a˜
b˜
aˆ
˜
bˆ
˜
•
=1
aˆ
˜
bˆ
˜
a˜
b˜
•
0
>
a˜
b˜
•
0
<
b˜
b˜
–
aˆ
˜
a˜a˜
b˜
•
---------------
=
bˆ
˜
b˜a˜
b˜
•
---------------
=
aˆ
˜
bˆ
˜
q
˜
x˜
aˆ
˜ bˆ
˜
x˜
•
(
)
–
=
g
˜ 3
aˆ
˜
=
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
g
˜
1 g
˜
2 g
˜
3
,
,
{
}
g
˜
i
g
˜ j
•
δj
i
=
δj
i
g
˜
1
g
˜ 2
g
˜ 3
v˜
vig
˜ i
vig
˜
i
=
=
g
˜
3
bˆ
˜
=
q
˜
x1g
˜ 1
x2g
˜ 2
+
=
g
˜ k
Q
Q
x˜
Q x˜
( )
0
˜
=
Q x˜
( )
0
˜
=
a˜
P
Q

September 4, 2003 5:24 pm
Projections
88
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Figure (6.5) shows two vectors, 
 and , that fall
on the line defined by . More precisely, for some
scalar ,
.
 (6.34)
As seen in the sketch (or as verified by direct sub-
stitution into Eq. (6.17)),
.
 (6.35)
Conversely, if (6.35) holds, then so does (6.34).
This property of projections is the key to validating
radial or oblique return algorithms in the field of
plasticity.
Expressing a vector as a linear combination of three 
arbitrary (not necessarily orthonormal) vectors.
GOAL: outline most straightforward process, refine notation for the process to be more 
consistent with curvilinear notation.
Any vector 
 can always be expressed as a linear combination of three other vectors
, , and  as long as those three vectors are linearly independent (i.e., so long as the tri-
ple scalar product is nonzero: 
). If so, then we know there exist scalar multi-
ples 
, , and  such that
 (6.36)
The brute force simplest way to determine values of the scalar coefficients is to simply dot
both sides of this equation by  to obtain
 (6.37)
We can similarly dot both sides of Eq. (6.36) by  and then separately by  to obtain two
additional equations which, with Eq. (6.37) forms a set of three equations and three
unknowns (the 
 coefficients). The system is solvable if and only if the original
three vectors are linearly independent. We will now discuss this identical process using a
slight change of notation so that it become more clear that each component actually corre-
sponds to a rank-1 oblique projection of the vector 
 onto the three vectors. To simplify
the notation, we will now denote , , and  by three different symbols, 
.
x˜
Figure 6.5.
Projections of two vec-
tors along a an obliquely oriented
line. 
Q x˜
( )=Q y
˜
( )
a˜
y
˜
x˜
y
˜
a˜
β
x˜
y
˜
βa˜
+
=
Q x˜
( )=Q y
˜
( )
x˜
a˜
b˜
c˜
a˜ b˜ c˜
, ,
[
]
0
≠
α β
γ
x˜
αa˜
βb˜
γc˜
+
+
=
a˜
x˜
a˜
•
α a˜
a˜
•
(
)
β b˜
a˜
•
(
)
γ c˜
a˜
•
(
)
+
+
=
b˜
c˜
α β γ
, ,
{
}
x˜
a˜
b˜
c˜
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}

September 4, 2003 5:24 pm
Projections
89
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The right-hand side of Fig. 6.1 showed how an arbitrary vector  may be decomposed
into the sum of parts that are aligned with the orthonormal 
 basis. However, a
basis does not have to be orthonormal — any three linearly independent vectors
 may be alternatively used as a basis. We wish to additively decompose a vec-
tor  into parts aligned with these three non-orthonormal base vectors. Stated differently,
we wish to discover a path from the tail to the tip of  that always travels parallel (or anti-
parallel) to these three base vectors (See Fig. 6.6). 
First, in order for the three 
 vectors to be linearly independent (and there-
fore form a basis), they must have a positive triple scalar product:
 (6.38)
Corresponding to the 
 base vectors, there exists a unique “dual” basis
 such that
 
(where 
 is an alternative symbol for the Kronecker delta).
 (6.39)
In other words, 
 must be perpendicular to 
 and 
, so it must be proportional to
. The constant of proportionality must be set so that 
. Thus, as can
be verified by direct substitution, the dual basis must be given by
, 
, 
 (6.40)
Without proof, we claim that the part of 
 in the direction of 
 is given by an oblique
projection operation 
 defined by
, with no summation on .
 (6.41)
The three 
 operators are complementary projections because they satisfy the following
properties:
 (6.42)
x˜
e˜1 e˜2 e˜3
,
,
{
}
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
x˜
x˜
g
˜ 3
g
˜ 1
g
˜ 2
x˜
angles
90°
≠
P1 x˜
( )
P2 x˜
( )
P3 x˜
( )
Figure 6.6.
Three oblique projections.   The indicated plane contains 
 and 
, while 
forms an oblique angle to the plane. The dual vector 
 is proportional to 
, so it may be used
to define the normal to the plane. 
  
g
˜ 1
g
˜ 2
g
˜ 3
g
˜
3
g
˜ 1
g
˜ 2
×
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
Jo
g
˜ 1 g
˜ 2 g
˜ 3
,
,
[
]
≡
g
˜ 1
g
˜ 2
×
(
)
g
˜ 3
•
0
>
=
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
g
˜
1 g
˜
2 g
˜
3
,
,
{
}
g
˜ i
g
˜
j
•
δi
j
=
δi
j
g
˜
1
g
˜ 2
g
˜ 3
g
˜ 2
g
˜ 3
×
(
)
g
˜ 1
g
˜
1
•
1
=
g
˜
1
1
Jo
----- g
˜ 2
g
˜ 3
×
(
)
=
g
˜
2
1
Jo
----- g
˜ 3
g
˜ 1
×
(
)
=
g
˜
3
1
Jo
----- g
˜ 1
g
˜ 2
×
(
)
=
x˜
g
˜ k
Pk
Pk x˜
( )
g
˜ k g
˜
k
x˜
•
(
)
=
k
Pk
Pi Pj x˜
( )
(
)
Pi x˜
( )    if   i=j
0
˜
    if   i
j
≠



=

September 4, 2003 5:24 pm
Projections
90
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and
 (6.43)
Generalized projections
GOAL: Reiterate the mathematician’s definition of the term “projection” (idempotent)
A transformation 
 is called a projection (or “idempotent”) if and only if 
,
 (6.44)
which merely states that projecting a vector that has already been projected will give you
the same projected vector right back. Consider, for example, the function of Eq. (6.17):
 (6.45)
Physically, we know that this function is a projector. To prove it rigorously, we operate on
both sides of Eq. (6.45) by 
 to obtain
 (6.46)
Simplification shows that the right hand side reduces back to 
. Hence, Eq. (6.44)
holds and 
 is indeed a projection. 
Linear projections
GOAL: Define very special (linear) class of projectors, explain that oblique projectors are 
also linear.
A projection is linear if and only if
(i)  
, for all 
, and
(ii) 
 for all 
 and 
.
 (6.47)
The projection of Eq. (6.45) is easily seen to be linear even though it is oblique. Likewise,
Eq. (6.41) is linear. Physically, a projection is linear if one can take the projection of a lin-
ear combination of vectors and the result is the same as you would get if you instead first
projected the individual vectors and then took their linear combination.
Nonlinear projections
GOAL: To clarify linear projections, give examples of some nonlinear projections.
The vector “signum” function. An example of a nonlinear projection is
 
(or 
 if 
)
 (6.48)
P1 x˜
( )
P2 x˜
( )
P3 x˜
( )
+
+
x˜
=
P
P P x˜
( )
(
)
P x˜
( )
=
P x˜
( )
x˜
a˜ b˜
x˜
•
(
)
a˜
b˜
•
-------------------
–
=
P
P P x˜
( )
(
)
x˜
a˜ b˜
x˜
•
(
)
a˜
b˜
•
-------------------
–
a˜ b˜
x˜
a˜ b˜
x˜
•
(
)
a˜
b˜
•
-------------------
–
•




a˜
b˜
•
----------------------------------------------------
–
=
P x˜
( )
P
P αx˜
(
)
αP x˜
( )
=
α
P x˜ 1
x˜ 2
+
(
)
P x˜ 1
(
)
P x˜ 2
(
)
+
=
x˜ 1
x˜ 2
P x˜
( )
x˜x˜
x˜
•
---------------
=
P x˜
( )=0˜
x˜=0˜

September 4, 2003 5:24 pm
Projections
91
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This function is indeed a projection because Eq. (6.44) holds. The first linearity test (i) in
Eq. (6.47) fails because, for example, 
, so this projection is nonlinear.
Geometrically, the above operator transforms a vector to a unit vector in the same direc-
tion. Hence, the range set for this transformation consists of vectors pointing from the ori-
gin to a point on the unit sphere. The transformation of Eq. (6.48) is non-linear because
the range (the target surface of the sphere) is geometrically curvilinear. The level lines
(i.e., the “light rays”) are straight lines that emanate radially from the origin.
The vector signum operation always returns a unit vector in the direction of the start-
ing vector, or the zero vector if the starting vector is zero. The signum operation is some-
times more compactly denoted with a “hat” so that
 
(or 
 if 
)
 (6.49)
For lengthy operands, the “hat” signum operation is sometimes abbreviated “sgn” or is
indicated by a “hat” as a superscript on the end of an expression. For example,
 
or
 
 if 
 (6.50)
Gravitational (distorted light ray) projections. Nonlinear projectors can also
be constructed for which the range is a linear manifold (i.e., a line or a plane) but the path
to this range space is curvilinear. For example, the transformation
 (6.51)
is a projection because 
. It has a linear range space (vectors parallel to
), but the projection is nonlinear because the paths to the range space (i.e., the level
lines) are curvilinear. The light rays are bending as they approach the target space.
A very important nonlinear projection transformation from the field of continuum
mechanics is the polar decomposition (see page 206). Rather than being additive, this
decomposition is multiplicative.
Self-adjoint projections
GOAL: Show that orthogonal (nearest point) projections are self-adjoint, whereas oblique 
projections are not. Set stage for later showing that orthogonal projection tensors are 
symmetric, whereas oblique projection tensors are not.
A projection 
 is self-adjoint if and only if 
 for all 
 and .
 (6.52)
Applying this definition to Eq. (6.45) gives
 (6.53)
Simplification gives
P 2x˜
(
)
2P x˜
( )
≠
xˆ
˜
x˜x˜
x˜
•
---------------
=
xˆ
˜=0
˜
x˜=0
˜
sgn a˜
b˜
+
(
)
a˜
b˜
+
˜
a˜
b˜
+
------------------
=
sgn a˜
b˜
+
(
)=0
˜
a˜
b˜
+
(
)=0
˜
P x˜
( )
x˜
a˜
•
x˜
b˜
•
(
)2
–
[
]a˜
a˜
a˜
b˜
–
(
)
•
---------------------------------------------
=
P P x˜
( )
(
)
P x˜
( )
=
a˜
P
u˜
P v˜( )
•
v˜
P u˜
( )
•
=
u˜
v˜
u˜
v˜
a˜ b˜
v˜
•
(
)
a˜
b˜
•
-------------------
–
•
v˜
u˜
a˜ b˜
u˜
•
(
)
a˜
b˜
•
--------------------
–
•
=

September 4, 2003 5:24 pm
Projections
92
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 for all 
 and .
 (6.54)
This condition can be true only if 
 is proportional to 
,* in which case the projection
reduces to the orthogonal (nearest point, high noon) projection of Eq. (6.12). The 
 pro-
jectors defined in Eq. (6.41) are not self-adjoint unless the 
 basis is orthonormal.
Physically, self-adjoint projections correspond to projections to the nearest point in the
target space (like a shadow at high-noon), whereas non-self-adjoint projections are
oblique (like a shadow in late afternoon).
Later on, we will see that linear projectors can be represented through the use of pro-
jection tensors. Then we will find that a linear projector is self-adjoint only if its projection
tensor is symmetric.
Gram-Schmidt orthogonalization
GOAL: show how to convert a set of vectors into a minimal orthonormal basis that will span 
the same space as the original set of vectors.
Suppose that you are working on a problem involving a collection of ordinary engi-
neering vectors. For illustration, suppose that your collection contains four vectors
. Our goal is to construct an orthonormal basis for the span of any collec-
tion of vectors, regardless of whether or not they are linearly independent. One process for
doing this is called Gram-Schmidt orthogonalization, and it involves simply a sequence of
projections and normalizations as outlined in the following step-by-step sequence of cal-
culations:
 (6.55)
 (6.56)
 (6.57)
 (6.58)
Recalling the definition of the vector signum function “sgn” given in Eq. (6.50), we note
that the first of these equations normalizes the first vector 
 (or simply gives zero if 
 is
zero). Note the similarity between Eq. (6.56) and Eq. (6.12), which shows that 
 is sim-
ply the (normalized) part of 
 perpendicular to 
. The remaining equations cited are
similar; they systematically create vectors that have a zero dot product with the preceding
vectors. Since our example involved four starting vectors, we know that at least one —
possibly more — of the above 
 vectors will turn out to be zero. Even if the starting col-
lection had contained only three vectors, it’s still possible for one of the 
 vectors to
come out to be zero. The appearance of a zero 
 vector is merely an inconsequential by-
product that occurs whenever the starting collection not linearly independent. The non-
zero 
 vectors form a basis for the span of the original starting set of vectors. Therefore,
the number of nonzero 
 vectors equals the dimension of this span.
* To prove this claim, take 
 and 
 to obtain 
 or, since 
 by implied 
premise, 
. In other words, 
 for all 
. Thus,  must be proportional to . 
u˜
a˜
•
(
) b˜
v˜
•
(
)
v˜
a˜
•
(
) b˜
u˜
•
(
)
=
u˜
v˜
a˜
b˜
u˜ ⊥b˜
v˜=b˜
u˜
a˜
•
(
) b˜
b˜
•
(
)
0
=
b˜
0
˜
≠
u˜
a˜
•
0
=
u˜ ⊥a˜
u˜ ⊥b˜
a˜
b˜
Pk
g
˜ k
{
}
v˜1 v˜2 v˜3 v˜4
,
,
,
{
}
n˜ 1
sgn v˜1
[
]
=
n˜ 2
sgn v˜2
v˜2
n˜ 1
•
(
)n˜ 1
–
[
]
=
n˜ 3
sgn v˜3
v˜3
n˜ 1
•
(
)n˜ 1
–
v˜3
n˜ 2
•
(
)n˜ 2
–
[
]
=
n˜ 4
sgn v˜4
v˜4
n˜ 1
•
(
)n˜ 1
–
v˜4
n˜ 2
•
(
)n˜ 2
–
v˜4
n˜ 3
•
(
)n˜ 3
–
[
]
=
v˜1
v˜1
n˜ 2
v˜2
n˜ 1
n˜ k
n˜ k
n˜ k
n˜ k
n˜ k

September 4, 2003 5:24 pm
Projections
93
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Special case: orthogonalization of two vectors. One distasteful aspect of the
Gram-Schmidt orthogonalization process is that the resulting basis depends on the order-
ing the starting vectors. There’s nothing particularly wrong with this. To orthogonalize two
vectors, 
 and  in a less biased manner, you might consider the following alternative
approach:
Define 
 and 
 (6.59)
Then an orthonormal basis can be defined as
 
and
 
 (6.60)
There remains a small amount of bias here because exchanging 
 and  will change the
direction of 
.
The projection theorem
Some of the most profoundly useful engineer-
ing theorems merely state intuitively obvious con-
cepts in a more useful (but less obvious)
mathematical form.*
The projection theorem is another mathemati-
cal statement of a physically “obvious” concept.
Namely, you can always break a vector into a part
in a desired direction plus whatever is left over.
Now let’s state this idea mathematically.
Given a projector 
, the projection theorem
states that any vector  can always be decomposed
uniquely as
 (6.61)
such that 
 is in the range space of the projector 
 and 
 is in the null-space of the pro-
jector 
. By this we mean that 
 and 
 will satisfy 
 (6.62)
 (6.63)
The vector 
 is the projection of 
, and 
 is simply the part of 
 that is “left over”
after taking away 
. Specifically,
 (6.64)
,
 (6.65)
* For example, the principle of conservation of mass merely asserts that “what goes in must come out 
or stay there.” The mathematical representation of this statement is more useful, but less obvious.
u˜
v˜
m˜
u˜u˜
---------
=
n˜
v˜v˜
--------
=
e˜1
m˜
n˜
+
m˜
n˜
+
--------------------
≡
e˜2
m˜
n˜
–
m˜
n˜
–
-------------------
≡
u˜
v˜
e˜2
x˜
Figure 6.7.
Oblique projection.   
The path obliquely intersects the plane.
x˜
Q
x˜
P
P
x˜
x˜
x˜
P
x˜
Q
+
=
x˜
P
P
x˜
Q
P
x˜
P
x˜
Q
P x˜
P
(
)
x˜
P
=
P x˜
Q
(
)
0
˜
=
x˜
P
x˜
x˜
Q
x˜
x˜
P
x˜
P
P x˜
( )
=
x˜
Q
Q x˜
( )
=

September 4, 2003 5:24 pm
Projections
94
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
where
 (6.66)
The function 
 is itself a projector. Some key properties of these “complementary”
projectors are
 (6.67)
Note that 
 is not the same thing as 
. If the projection is oblique, then
 will be nonzero, but 
 will always be zero for complementary projectors.
The transformation 
 is an orthogonal projection if and only if 
 is self-adjoint, in
which case 
 will also be zero.
The projection theorem is just the mathematical way to describe what is fairly obvious
from looking at Fig. 6.7 (i.e., a vector can be broken into its shadow plus whatever is left
over). The projection theorem becomes quite useful (and less obvious) in higher dimen-
sional spaces. Later in this book, we will introduce the notion of an abstract vector. Under
this definition, we will find that matrices, differentiable functions and many other seem-
ingly unrelated things behave just like vectors. The fact that a scalar function 
 can be
written as the sum of its even plus odd parts is an application of the projection theorem.
The fact that a matrix can be written as the sum of its symmetric plus skew-symmetric
parts is an application of the projection theorem. The fact that a continuously differential
function can be expressed as a Taylor series is the projection theorem (the basis is the infi-
nite set 
).
Most material constitutive laws are expressible in terms of projections. For example,
the projection theorem allows us to decompose stress and strain tensors into their devia-
toric plus isotropic parts. Hooke’s law of linear elasticity states that these individual parts
are proportional to each other (i.e., pressure is proportional to volumetric strain and the
stress deviator is proportional to the strain deviator). The proportionality constant is not
necessarily equal for the two parts, so stress itself is not proportional to strain.
Q x˜
( )
x˜
P x˜
( )
–
=
Q
P P x˜
( )
(
)
P x˜
( )
=
Q Q x˜
( )
(
)
Q x˜
( )
=
P Q x˜
( )
(
)
Q P x˜
( )
(
)
0
˜
=
=
P x˜
( )
Q x˜
( )
+
x˜
=
P Q x˜
( )
(
)
x˜
P
x˜
Q
•
x˜
P
x˜
Q
•
P Q x˜
( )
(
)
P x˜
( )
P
x˜
P
x˜
Q
•
f x
( )
1 x x2 x3 …
, ,
,
,

September 4, 2003 5:24 pm
Tensors
95
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
7. Tensors
If you’re sitting at a cocktail party with a bunch of engineers, physicists, and mathe-
maticians, and you want to start a heated debate, just ask out loud: “What is a tensor?”
One person will say that, for all practical purposes, a tensor is just a fancy word for a
matrix.* Then someone else will pipe up indignantly and insist that a tensor is a linear
transformation from vectors to vectors. Yet another person will say that a tensor is an
ordered set of numbers that transform in a particular way upon a change of basis. Other
folks (like us) will start babbling about “dyads” and “dyadics.” In this chapter, we will
touch on each of these various perspectives and urge you to adopt whatever definition of
the term tensor you feel most comfortable with. As long as your definition implies the
other guy’s definition and vice versa, then either definition is acceptable.†
You can’t study tensors without eventually (sometimes secretly) becoming enamoured
of one particular definition of tensors. We will ease you into the notion of tensors by dis-
cussing how engineering tensors arise naturally when working with linear vector transfor-
mations. We will then describe our personal favorite (and less frequently adopted)
definition of a tensor as being a sum of new abstract “objects” called “dyads.” Admittedly,
the dyad definition is not very satisfying or particularly intuitive, but we like it anyway
because this definition requires no mention of a basis, per se, but it leads directly into the
supplemental concept of a tensor basis, and it generalizes seamlessly to abstract, higher-
dimensional, settings. From there, we will be poised to then cover the definition of an
engineering tensor in terms of basis transformation rules.
* This is true for some practical purposes, but not for all practical purposes.
† Often, determining if one definition implies the other is a difficult task. The person who defines a 
tensor according to basis transformation rule is actually defining a particular class of tensors, 
whereas the definition in terms of linear transformations has broader abstract applicability, but 
becomes bogged down in the more subtle question: what is a vector? Answering this question for 
engineering mechanics applications eventually also comes around to the need to introduce basis 
transformation criteria, so in this arena, both definitions are equivalent. See page 227.
“No matter how much cats fight, there always 
seem to be plenty of kittens.” 
— Abraham Lincoln

September 4, 2003 5:24 pm
Tensors
96
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Analogy between tensors and other (more familiar) concepts
GOAL: Explain how vectors share several axiomatic properties in common with smooth 
scalar-valued functions. Then demonstrate that tensors are quite similar to smooth 
functions of two variables.
The mathematician’s abstract definition of a vector, discussed on page 230, is ele-
gantly crafted to call attention to the fact that certain seemingly unrelated sets of objects
often share common properties. By studying sets with these properties in an abstract set-
ting, mathematicians are able to derive numerous general results. Once done, they know
that the results apply to any sets objects that obey those properties — no matter how unre-
lated those sets might appear to be at first glance. 
This section will step through several observations about continuous smooth functions
that you probably already know from your elementary algebra and calculus classes. Then,
the parallel or analogous observations about vectors and tensors will be made in order to
show the similarity between smooth functions and vectors. The goal here is to de-mystify
the subject of tensor analysis by showing that it is very similar to other branches of mathe-
matics where you are likely to be already comfortable.
Applying the mathematician’s definition of a vector (page 230), it can be shown that
the set of all real smooth* functions of one variable is itself a vector space, and we will
denote it by 
. The subscript “
” is used to tell you that this space is infinite dimen-
sional† and the superscript “1” is telling you that the space is a first-order (i.e., vector)
space. Any member of 
 is usually written 
, where  is permitted to take any value
in the set of real numbers, and the actual symbol used for it is inconsequential. By analogy,
we will denote the set of ordinary engineering vectors by the symbol 
, where the sub-
script “3” indicates that engineering vectors are three-dimensional, and the superscript “1”
indicates that the set 
 is a first-order space (vectors). A member of 
 is usually
denoted in indicial form by 
, where “i” is an index that is permitted to take any integer
value from 1 to 3, and the actual symbol used for it is inconsequential. Note the analogy:
the indicial notation 
 is analogous to the function notation 
. The vector index ,
which takes values from 1 to 3, is analogous to the independent variable , which takes
values from 
 to 
.
Applying the mathematician’s definition (page 233), we can define the inner product
between two smooth functions, 
 and 
 by
, 
 (7.1)
where the integration over the dummy variable  extends over the permissible range of 
(namely from 
 to 
). By analogy, the inner product between two engineering
vectors, 
 and 
 is defined
, 
 (7.2)
* infinitely differentiable
† It’s infinite dimensional because, if you tried to describe a function such as 
 using a table of 
 pairs, your table would have to have an infinite number of entries.
C∞
1
∞
y
x2
=
x y
,
(
)
C∞
1
f x
( )
x
V3
1
V3
1
V3
1
vi
vi
f x
( )
i
x
∞
–
∞
f
C∞
1
∈
g
C∞
1
∈
f g
⋅
f x
( )g x
( ) x
d
∫
≡
x
x
x= ∞
–
x=+∞
f
˜
V3
1
∈
g
˜
V3
1
∈
f
˜
g
˜
•
figi
∑
≡

September 4, 2003 5:24 pm
Tensors
97
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
where the summation over the dummy index “i” extends over the permissible range of “i”
(namely from 
 to 
). Note the similarity between Eqs. (7.1) and (7.2). One involves
a continuous summation (i.e., integration) over the independent variable and the other
involves a discrete summation over the index.
We know that there exist coefficients 
 such that any smooth function can be
expressed in the form of a power (Taylor) series:
 (7.3)
Viewed differently, this tells us that the set of smooth functions 
, for 
,
forms a basis for 
. Any smooth function can be written as a linear combination of this
basis. The number of members of the basis equals the dimension of the space (infinite).
Analogously, we know in 3D vector analysis that there exist coefficients 
 such that any
vector  can be expressed in the form
 (7.4)
where the set 
, for i = 1, 2, and 3, forms a basis for 
. Any engineering vector can
be written as a linear combination of this basis. The number of base vectors equals the
dimension of the space (three).
Any smooth function can alternatively be expressed in the form of a Fourier series, for
which the associated basis consists of trig functions. The coefficients in a Fourier expan-
sion are not equal to the coefficients that appear in Eq. (7.3), although knowledge of those
coefficients can be used to deduce the correct coefficients in the Fourier expansion. Like-
wise, any engineering vector can alternatively be expressed as an expansion in terms of
some alternative basis 
, for which the coefficients are not equal to those in Eq. (7.4),
although knowledge of those coefficients can be used to deduce the correct coefficients
with respect to the new basis. Note the analogy: changing from a power series to a trig
series expansion of a smooth function is the same (in spirit) as performing a change of
basis in 3D vector analysis.
When discussing the overall properties of a smooth function 
, people will often
refer to it as simply “f”; this removal of the independent variable helps readers stay
focused on the fact that the function itself is being discussed, not the result of applying the
function to an independent argument. Of course, actual calculations or applications of the
function f will require reintroduction of the independent argument. Similarly, when people
speak about vectors, they often refer to them in structured (AKA symbolic, direct, or
“Gibbs”) notation as ; this removal of the explicit presence of the component index “i”
helps readers focus on the true physical meaning of the vector. Actual calculations involv-
ing that vector will, of course, require reversion back to index notation.
The concept of smooth functions having only a single-argument (i.e., members of 
)
can be extended to consider binary (two argument) smooth functions. We denote this new
class of function by 
, where the superscript “2” indicates that members of this class of
“objects” have two arguments. Members of 
 will be written in the form 
, where
the arguments,  and , are permitted to take on real values from 
 to 
, and the
i=1
i=3
αi
f x
( )
α0
α1x
α2x2
α3x3
…
+
+
+
+
=
xk
{
}
k
0 1 2 …
, , ,
=
C∞
1
fi
f
˜
f
˜
f1e˜1
f2e˜2
f3e˜3
+
+
=
e˜i
{
}
V3
1
e˜i
*
{
}
f x
( )
v˜
C∞1
C∞
2
C∞
2
F x y
,
(
)
x
y
∞
–
+∞

September 4, 2003 5:24 pm
Tensors
98
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
symbols that we use for these arguments are inconsequential (i.e., 
 would denote
the same function as 
). Analogously, we will introduce in this section the concept
of an engineering tensor. We will denote this new class of “object” by 
, where the
superscript “2” indicates that we are discussing second-order tensors and the subscript 
is again denoting the dimension of the underlying physical space. Members of 
 will be
written indicially in the form 
, where the indices, i and j, are permitted to take on inte-
ger values from 1 to 3, and the symbols that we use for them are inconsequential (i.e., 
would denote the same tensor as 
). Note the analogy: second-order engineering tensors
are similar in spirit to functions of two variables.
A binary function 
 can be used to transform a single-argument function 
to become a new function 
 through the special operation
.
 (7.5)
where the integration extends over the permissible values of the second argument  (i.e.,
the integral goes from 
 to 
). The binary function 
 fully dominates and
characterizes the nature of the transformation. Analogously, we will find that the dominant
role of engineering tensors is to characterize a primitive operation that transforms a single
engineering vector  to become a new vector 
. In particular, this operation is written in
index form as
 (7.6)
where the summation extends over the permissible values of the second index “j” (i.e., the
sum goes from 
 to 
). Note the analogy between Eqs. (7.5) and (7.6); one integrates
over the second dummy integration variable while the other sums over the second dummy
summation index.
Recognizing where analogies do and don’t exist between seemingly unrelated fields of
study can be indispensable. Talented researchers are often able to use what they know
about a one subject to help them learn a new subject. Careful researchers are diligent to
spend as much time identifying where the analogies break down as where they apply.
F r s
,
(
)
F x y
,
(
)
V3
2
3
V3
2
Fij
Frs
Fij
F x y
,
(
)
v y
( )
u x
( )
u x
( )
F x y
,
(
)v y
( ) y
d
∫
=
y
y= ∞
–
y=+∞
F x y
,
(
)
v˜
u˜
ui
Fijvj
∑
=
j=1
j=3

September 4, 2003 5:24 pm
Tensors
99
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Linear operators (transformations)
GOAL: Set stage for the “linear transformation” definition of a tensor by showing how a 
 
matrix arises naturally to characterize all information needed to compute how a linear 
vector-to-vector operation transforms its independent vector argument. Emphasize that this 
“component” matrix contains numbers that are tied to the choice of basis. Set stage for both 
the dyadic definition of a tensor and the component transformation definition. Introduce the 
notion of basis dyads.
Let  denote a vector-valued function of a vector. The symbol  denotes a set of
instructions. The operator is not itself a vector — its output is a vector. Let  be the vector
supplied as an argument to the function, and let  be the result of applying the function.
Then we would write, 
. 
The function is linear if and only if
Equivalently, the function  is called “linear” if and only if
(i)
for all scalars α
and
(ii)
for all vectors 
 and 
 (7.7)
Linearity gives you freedom to apply the operator to a linear combination of vectors in
either of two equivalent ways: (1) you can take the linear combination of the vectors and
directly apply the operator  or (2) you can apply the operator separately to each of start-
ing vectors and then take the linear combination of the individual results. 
If we know how a linear function transforms the three base vectors, then linearity lets
us quickly determine how the function transforms an arbitrary vector. To see why this is
so, let’s define three 
 vectors to be the transformations of the orthonormal basis vectors:
, 
, 
and 
 (7.8)
Importantly, these three vectors can be computed once and saved for all time. Usually
these vectors are stored as columns of a 
 matrix 
 so that
 (7.9)
In other words, 
 is the 
 component of 
. More precisely,
 
⇔ 
 (7.10)
Recall that an arbitrary vector  may be written
 (7.11)
Operating on this vector by the linear function  and applying the linearity property,
shows that the action of the linear transformation on an arbitrary vector  can be rapidly
computed by
= 
 (7.12)
Using the summation convention,
3
3
×
f
f
x˜
y
˜
y
˜
f x˜
( )
=
f α1x˜ 1
α2x˜ 2
+
(
)
α1f x˜ 1
(
)
α2f x˜ 2
(
)
+
=
f
˜
f αv˜
(
)
αf v˜( )
=
f u˜
v˜
+
(
)
f u˜
( )
f v˜( )
+
=
u˜
v˜
f
f
˜i
f
˜1
f e˜1
(
)
≡
f
˜2
f e˜2
(
)
≡
f
˜3
f e˜3
(
)
≡
3
3
×
F
[ ]
F
[ ]
f
˜1
{
} f
˜2
{
} f
˜3
{
}
[
]
=
Fij
ith
f
˜j
Fij
e˜i
f
˜j
•
=
f
˜j
Fije˜i
=
x˜
x˜
x1e˜1
x2e˜2
x3e˜3
+
+
=
f
v˜
f x˜
( )
x1f e˜1
(
)
x2f e˜2
(
)
x3f e˜3
(
)
+
+
=
x1f
˜1
x2f
˜2
x3f
˜3
+
+

September 4, 2003 5:24 pm
Tensors
100
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (7.13)
Substituting Eq. (7.10) into Eq (7.13) gives
 (7.14)
If we let the vector  denote the result of 
, then we write
.
 (7.15)
Thus, the 
 component of 
 is obtained by the simple matrix multiplication,
, or
 (7.16)
The matrix 
 is called the matrix of components of the “tensor” associated with the
linear transformation . These components are relative to the basis 
 that we
used to compute the 
 vectors. Using a different basis will result in a different 
 com-
ponent matrix.
For any linear function, there exists an associated tensor, and vice versa.* Conse-
quently, many authors [e.g., 20] define a tensor to be any linear transformation of vectors
to vectors.†  We prefer to keep the two ideas separate in our presentation. After all, we fre-
quently know the linear transformation (i.e., the set of instructions) before we know the
tensor itself.‡ For example, when  is a known constant vector, the cross product opera-
tion 
 is linear with respect to 
. However, the tensor associated with this
operation is not immediately obvious. The operation is linear, so we know that a tensor
(representable by a matrix) must exist, but what is the tensor component matrix that corre-
sponds to 
? Not obvious.
It is critical to recognize that the components of the matrix 
 are, by construction,
referenced your chosen basis. Thus, implicitly, a tensor must consist of both a matrix of
components and an associated basis. If the basis changes, then the component matrix
changes in a specific way (explained later), which is why some people [e.g., 19] define a
tensor to be a set of components that transform in the necessary way upon a change of
basis.
The intimate dependence of the 
 components on the underlying basis 
is well emphasized by using the following basis notation for tensors:
* This claim is called the Representation Theorem, and it will be discussed in more detail on 
page 122. For now, take this statement as an unproved truth.
† As clarified by Simmonds, “...To say that we are given a 2nd order tensor T means that we are told 
T’s action on (i.e., where it sends) any vector v. Thus two 2nd order tensors S and T are said to be 
equal if their action on all vectors is the same...”
‡ The distinction is analogous to the unique correspondence between animals and their DNA 
sequences. Disregarding cloning and identical twins, there is exactly one animal for each DNA 
sequence and vice versa, but this does not mean that animals and DNA sequences are the same. 
Likewise, in tensor analysis, one often has a well-characterized linear transformation without hav-
ing an explicit expression for the associated tensor (even though we know it exists). 
f x˜
( )
xjf
˜j
=
f x˜
( )
xj Fije˜i
(
)
Fijxj
(
)e˜i
=
=
y
˜
f x˜
( )
y
˜
f x˜
( )
yie˜i
=
=
ith
f x˜
( )
yi
Fijxj
=
y
{ }
F
[ ] x
{ }
=
F
[ ]
f
e˜1 e˜2 e˜3
,
,
{
}
f
˜k
F
[ ]
b˜
f x˜
( )
b˜
x˜
×
=
x˜
f x˜
( )
b˜
x˜
×
=
Fij
Fij
e˜1 e˜2 e˜3
,
,
{
}

September 4, 2003 5:24 pm
Tensors
101
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 = 
+
+
 (7.17)
The dyadic multiplication “⊗” symbol is defined below. For now, the presence of 
next to 
 should be regarded as a way to indicate that the 
 matrix of components is
defined relative to the 
 basis. In this form, 
 is often called a “dyadic,” but
we will simply continue to use the term “tensor.”
The above expansion may be written compactly using the summation convention as
 (7.18)
We will usually omit the “⊗” symbol for dyadic multiplication so that two vectors written
side by side are understood to be multiplied dyadically, and the above equations would be
written more compactly as
 = 
+
+
 (7.19)
and
 (7.20)
If 
 is the tensor associated with a vector-valued linear transformation of vectors,
, then we introduce the following notation:
 (7.21)
Most authors do not use our double underline (under-tilde) convention to indicate the
order of a tensor, so you will typically see tensors typeset simply in bold, F. Furthermore,
many authors do not use the raised dot notation (hence, to them, 
 means the same thing
as what we write as 
. As will be further explained later, our notation lends itself bet-
ter to heuristic “self-explanatory” interpretations of the intended meanings of operations,
which becomes indispensable when working with higher-order tensors in modern material
modeling applications. 
Recall that many people define a tensor to be a linear operation taking vectors to vec-
tors. The basis dyad 
 is itself a tensor, and it has a component matrix that contains all
zeros except for a 1 at the 
 position. Thus, the matrix form of Eq. (7.19) is simply
F˜˜
F11 e˜1
e˜1
⊗
(
)
F12 e˜1
e˜2
⊗
(
)
F13 e˜1
e˜3
⊗
(
)
+
+
F21 e˜2
e˜1
⊗
(
)
F22 e˜2
e˜2
⊗
(
)
F23 e˜2
e˜3
⊗
(
)
+
+
F31 e˜3
e˜1
⊗
(
)
F32 e˜3
e˜2
⊗
(
)
F33 e˜3
e˜3
⊗
(
)
+
+
e˜i
e˜j
⊗
Fij
Fij
e˜1 e˜2 e˜3
,
,
{
}
F˜˜
F˜˜
Fij e˜i
e˜j
⊗
(
)
=
F˜˜
F11e˜1e˜1
F12e˜1e˜2
F13e˜1e˜3
+
+
F21e˜2e˜1
F22e˜2e˜2
F23e˜2e˜3
+
+
F31e˜3e˜1
F32e˜3e˜2
F33e˜3e˜3
+
+
F˜˜
Fije˜ie˜j
=
F˜˜
f x˜
( )
F˜˜
x˜
•
      means the same thing as     f x˜
( )
Fx
F˜˜
x˜
•
e˜ie˜j
ij

September 4, 2003 5:24 pm
Tensors
102
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 =
+
+
 (7.22)
This basis/matrix correspondence is completely analogous to the act of writing a vector in
basis form as
 (7.23)
and then interpreting this expression using matrix notation as
 (7.24)
F11 F12 F13
F21 F22 F23
F31 F32 F33
F11
1 0 0
0 0 0
0 0 0
F12
0 1 0
0 0 0
0 0 0
F13
0 0 1
0 0 0
0 0 0
+
+
F21
0 0 0
1 0 0
0 0 0
F22
0 0 0
0 1 0
0 0 0
F23
0 0 0
0 0 1
0 0 0
+
+
F31
0 0 0
0 0 0
1 0 0
F32
0 0 0
0 0 0
0 1 0
F33
0 0 0
0 0 0
0 0 1
+
+
v˜
v1e˜1
v2e˜2
v3e˜3
+
+
=
v1
v2
v3










v1
1
0
0





v2
0
1
0





v3
0
0
1





+
+
=

September 4, 2003 5:24 pm
Tensors
103
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Dyads and dyadic multiplication
GOAL: Define, cite properties
The “⊗” symbol represents “dyadic multiplication,” also frequently referred to as a
“dyadic product” [24]. A dyad [35] between two vectors  and  is an abstract mathemat-
ical construction denoted 
 that takes on meaning when it operates on an arbitrary
vector  as follows:
 for all vectors 
 (7.25)
A dyad has physical meaning only when operating on a vector. Alone, it is a mathematical
bookkeeping device that can be independently manipulated but has no inherent meaning
in its own right. 
Two dyads 
 and 
 are said to be “equal” if and only if
 for all vectors 
 (7.26)
Note that the right hand side of Eq. (7.25) equals the vector  times a scalar, 
.
Thus, 
 is proportional to . Similarly, 
 would be proportional to .
Thus, dyadic multiplication does not commute. That is, 
 in general
 (7.27)
Applying the definition of a dyad (namely, Eq. (7.25)) to both sides of Eq. (7.26), note that
two dyads 
 and 
 are equal if and only if
 for all vectors 
 (7.28)
It is straightforward (but somewhat tedious) to show that, for nonzero vectors, 
 only if 
 and 
 where 
.
 (7.29)
In other words, the vector  must be proportional to  and  must be proportional to .
The condition on the proportionality constant is equivalent to requiring that 
.
If  and/or  is zero, then 
 only if  and/or  is zero.
The above discussion reiterates that dyadic multiplication does not commute; i.e., 
 (7.30)
Referring to Eq. (7.29), we obtain the necessary and sufficient condition for 
 to
commute:
 if and only if 
 for some 
.
 (7.31)
In other words, the two vectors in the dyad would have to be multiples of each other in
order for a dyadic multiplication to commute.
a˜
b˜
a˜
b˜
⊗
v˜
a˜
b˜
⊗
(
)
v˜
•
a˜ b˜
v˜
•
(
)
=
v˜
a˜
b˜
⊗
r˜
s˜
⊗
a˜
b˜
⊗
(
)
v˜
•
r˜
s˜
⊗
(
)
v˜
•
=
v˜
a˜
b˜
v˜
•
(
)
a˜
b˜
⊗
(
)
v˜
•
a˜
b˜
a˜
⊗
(
)
v˜
•
b˜
a˜
b˜
⊗
b˜
a˜
⊗
≠
a˜
b˜
⊗
r˜
s˜
⊗
a˜ b˜
v˜
•
(
)
r˜ s˜
v˜
•
(
)
=
v˜
a˜
b˜
⊗
r˜
s˜
⊗
=
r˜
αa˜
=
s˜
βb˜
=
αβ
1
=
r˜
a˜
s˜
b˜
a˜
b˜
•
r˜
s˜
•
=
a˜
b˜
a˜
b˜
⊗
r˜
s˜
⊗
=
r˜
s˜
a˜
b˜
⊗
b˜
a˜
⊗
≠
a˜
b˜
⊗
a˜
b˜
⊗
b˜
a˜
⊗
=
b˜
αa˜
=
α

September 4, 2003 5:24 pm
Tensors
104
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Simpler “no-symbol” dyadic notation
GOAL: Advocate in favor of not using the dyadic multiplication symbol.
Whenever two vectors are written side-by-side with no “⊗” symbol between them,
they are understood to be multiplied dyadically. Thus,
 (7.32)
In addition to being a more compact notation, this convention for dyadic multiplication
also has the appealing property that the definition of Eq. (7.25) can be written
,
 (7.33)
which allows us to drop the parentheses without ambiguity. *  We advocate retaining the
explicit “⊗” symbol only when it is needed for clarity. 
Dyads are like defensive linemen in football — essential, but rarely of much interest
per se. Dyads are merely abstract mathematical objects, which (up to this point) have no
apparent practical use. After we define addition and scalar multiplication for dyads, we
will see that tensors (which are of great practical importance) are always expressible as a
linear combination of the nine possible dyads between the orthonormal base vectors.
These nine basis dyads, 
, form a basis for tensors just as the three
base vectors 
 form a basis for ordinary vectors. With the “no symbol” nota-
tion, Eq. (7.18) may be written in basis notation as
,
 (7.34)
In this expression, the indices  and  are summed from 1 to 3. Thus, the above expression
is a linear combination of dyads, the meaning of which is described in more detail below.
The matrix associated with a dyad
GOAL: Show that a dyad has an associated 
 matrix that is equivalent to the outer 
product of the vectors. Set stage for making connection between dyads and tensors — both 
have associated matrices. Dyads are special kinds of tensors.
The right-hand side of Eq. (7.33) is a vector whose 
 component is
 (7.35)
We can define a 
 matrix whose 
 components are 
. Then the expression in Eq.
(7.35) can be written
 (7.36)
* Some people strenuously object to this side-by-side notation for dyadic multiplication. They argue 
in favor of the “⊗” symbol because dyadic multiplication is “different” from scalar multiplication. 
By the same logic, however, the identity 
 should also be notationally objection-
able because addition between vectors is “different” from addition between scalars. Likewise, the 
notation 
 would be objectionable because derivatives are not really fractions. In both mathe-
matics and engineering, we routinely overload operations for good reason: heuristic notational 
advantages. The meanings of the overloaded operations are implied by the nature of the arguments.
 means the same as 
.
a˜b˜
a˜
b˜
⊗
a˜b˜
(
)
v˜
•
a˜ b˜
v˜
•
(
)
=
γ
β
+
(
)v˜
γv˜
βv˜
+
=
dy dx
⁄
e˜1e˜1 e˜1e˜2 … e˜3e˜3
,
,
,
{
}
e˜1 e˜2 e˜3
,
,
{
}
F˜˜
Fije˜ie˜j
=
i
j
3
3
×
ith
ai bjvj
(
)
3
3
×
ij
aibj
aibj
[
]vj

September 4, 2003 5:24 pm
Tensors
105
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This can be written as a matrix equation
,
 (7.37)
which is the matrix representation of the left-hand side of Eq. (7.33). Using conventional
matrix notation, note that
 (7.38)
The result is a square matrix. You should contrast this operation with the similar-looking
scalar-valued operation of Eq. (5.3) in which the transpose merely occurs in a different
place!
The operation in Eq. (7.33) is a linear transformation of the vector  resulting in a new
vector, 
. Consequently, as discussed on page 99, this operation has an associated
 matrix, which it turns out to be identical to the matrix in Eq. (7.38). For example,
Eq. (7.9) showed that the first column of the matrix associated with a linear transformation
 is given by 
. In the present context, our linear function is 
, so
the first column of the associated matrix should contain 
, and (recalling Eq.
5.13), we see that this is indeed the first column of the matrix in Eq. (7.38).
The sum of dyads
GOAL: define, cite properties
The sum of two dyads, 
 and 
, is an abstract notion defined such that 
 for any vector 
 (7.39)
The sum of three dyads, 
 is defined such that
 for all 
 (7.40)
The sum of two or more dyads takes on meaning only when operating on a vector. The
sum of dyads also has a matrix interpretation. Specifically, the matrix 
 associ-
ated with the sum of two dyads is obtained by simply adding the matrices for 
 and
. 
a1b1
a1b2
a1b3
a2b1
a2b2
a2b3
a3b1
a3b2
a3b3
v1
v2
v3










a˜b˜
[
]
a1b1
a1b2
a1b3
a2b1
a2b2
a2b3
a3b1
a3b2
a3b3
a1
a2
a3
b1
b2
b3
T
a
{ }<b>
=
=
=
v˜
a˜ b˜
v˜
•
(
)
3
3
×
f x˜
( )
f e˜1
(
)
f v˜( )
a˜ b˜
v˜
•
(
)
=
a˜ b˜
e˜1
•
(
)
a˜b˜
c˜d˜
a˜b˜
c˜d˜
+
(
)
v˜
•
a˜ b˜
v˜
•
(
)
c˜ d˜
v˜
•
(
)
+
=
v˜
a˜b˜
c˜d˜
e˜f
˜
+
+
a˜b˜
c˜d˜
e˜f
˜
+
+
(
)
v˜
•
a˜ b˜
v˜
•
(
)
c˜ d˜
v˜
•
(
)
e˜ f
˜
v˜
•
(
)
+
+
=
v˜
a˜b˜
c˜d˜
+
[
]
a˜b˜
[
]
c˜d˜
[
]

September 4, 2003 5:24 pm
Tensors
106
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
A sum of two or three dyads is  NOT  (generally) reducible
GOAL: Show that the sum of two or three dyads cannot always be rearranged to become 
just a single dyad — the sum of dyads is itself a new object. It is a superset (i.e., the set of 
all dyads is a subset of the set of all sums of two dyads, but not vice versa).
By applying the definition of Eq. (7.39) it’s straightforward to prove that
 (7.41)
This is a very special situation in which the sum of two dyads can be written as a single
dyad (between the vector  and the vector 
). 
In general, the sum of two dyads cannot be expressed as a single dyad. One cannot
generally find two vectors  and  such that 
. Thus, the sum of two dyads is
itself a distinct new abstract object. The sum of three dyads is also a distinct mathematical
abstraction that in general cannot be written as either a single dyad or the sum of two
dyads. We will later demonstrate that the sum of four or more dyads can always be
reduced to the sum of three or fewer dyads (provided that the vectors belong to ordinary
3D space). Thus, the sum of four or more dyads is not a new object.
The set of all “objects” that are expressible as a sum of two dyads is a “superset” of the
set of all dyads because any single dyad can be written in the form 
. Likewise,
objects expressible as the sum of three dyads is a superset of objects expressible as the
sum of two dyads.
Scalar multiplication of a dyad
GOAL: Define this operation, cite properties, emphasize that scalar multiplication can act 
on any of the individual vectors forming a dyad.
The multiplication of a scalar  with the dyad 
 is a new dyad denoted 
, and is
naturally defined such that 
 
for all 
 (7.42)
Using the dyad symbol for clarity, we note that the scalar multiple may be regarded as an
external multiplier or it may be absorbed into any one of the vectors in the dyad:
 (7.43)
No matter where the scalar is placed (on the right side of the dyad or between the two vec-
tors), it can always be moved to the left side. In other words, 
 and 
 mean the same thing as 
.
 (7.44)
Thus, scalar multiplication requires no parentheses.
Scalar multiplication of a sum of dyads is defined as you might expect. Namely,
 (7.45)
a˜p
˜
a˜q
˜
+
a˜ p
˜
q
˜
+
(
)
=
a˜
p
˜
q
˜
+
r˜
s˜
a˜b˜
c˜d˜
+
r˜s˜
=
a˜b˜
0
˜
0
˜
+
γ
a˜b˜
γ a˜b˜
(
)
γ a˜b˜
(
)
[
]
v˜
•
γa˜ b˜
v˜
•
(
)
=
v˜
γ a˜
b˜
⊗
(
)
γa˜
(
)
b˜
⊗
a˜γ
(
)
b˜
⊗
a˜
γb˜
(
)
⊗
a˜
b˜γ
(
)
⊗
=
=
=
=
a˜γb˜
a˜b˜γ
γ a˜b˜
(
)
γ a˜b˜
c˜d˜
+
(
)
γa˜b˜
γc˜d˜
+
(
)
=
γ a˜b˜
c˜d˜
e˜f
˜
+
+
(
)
γa˜b˜
γc˜d˜
γe˜f
˜
+
+
(
)
=

September 4, 2003 5:24 pm
Tensors
107
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The sum of four or more dyads is reducible! (not a superset)
GOAL: Show that the sum of more than three dyads (in 3D) can always be reduced to the 
sum of three or fewer dyads.
The sum of four or more dyads is defined by natural extension of the definitions of
Eqs. (7.41) and (7.40). Thus, for example, the sum of four dyads is defined so that, for all
vectors , 
 (7.46)
In typical engineering applications, vectors are ordinary vectors in 3D physical space.
Consequently, any set of four vectors must be linearly dependent. Thus, at least one of the
vectors in the set, 
, can be written as a linear combination of the other vectors.
Suppose, for illustration, that the dependent vector is 
. Then there exist 
 scalars such
that
 (7.47)
Hence, the dyad 
 can be written
 (7.48)
and therefore,
 (7.49)
The left-hand side is the sum of four dyads. The right hand side is the sum of three dyads.
This proves that any sum of four or more dyads can always be reduced to three or fewer
dyads. Consequently, the sum of four or more dyads is not a new abstract object! The sum
of any number of dyads is generally referred to as a dyadic, but we will use the term
“tensor.”
The dyad definition of a second-order tensor
GOAL: Use result of previous section to define a “tensor” to be any dyad or sum of dyads.
The function 
 is linear in . The dyad 
 is the tensor associated with
this linear transformation. Dyads are the most rudimentary tensors. As emphasized earlier,
the sum of two dyads generally cannot be reduced to a single dyad. Likewise, the sum of
three dyads cannot be reduced to the sum of fewer dyads. However, the sum of four or
more dyads can always be reduced to the sum three or fewer dyads. Consequently, a sec-
ond-order tensor may be defined as any sum of dyads. The term “dyadic” is also used to
mean the same thing. This definition is equivalent to the more traditional definition of a
tensor in terms of linear transformations from vectors to vectors in the sense that one defi-
nition implies the other. The “sum of dyads” definition is more useful in certain settings,
especially when considering a tensor as a higher-dimensional vector. 
v˜
a˜b˜
c˜d˜
e˜f
˜
g
˜
h˜
+
+
+
(
)
v˜
•
a˜ b˜
v˜
•
(
)
c˜ d˜
v˜
•
(
)
e˜ f
˜
v˜
•
(
)
g
˜
h˜
v˜
•
(
)
+
+
+
=
b˜ d˜ f
˜
h˜
, , ,
{
}
h˜
αk
h˜
α1b˜
α2d˜
α3f
˜
+
+
=
g
˜
h˜
g
˜
h˜
α1g
˜
(
)b˜
α2g
˜
(
)d˜
α3g
˜
(
)f
˜
+
+
=
a˜b˜
c˜d˜
e˜f
˜
g
˜
h˜
+
+
+
a˜
α1g
˜
+
(
)b˜
c˜
α2g
˜
+
(
)d˜
e˜
α3g
˜
+
(
)f
˜
+
+
=
f
˜
v˜[ ]
a˜ b˜
v˜
•
(
)
=
v˜
a˜b˜

September 4, 2003 5:24 pm
Tensors
108
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
For clarity, we typeset second-order tensors in bold using two under-tildes. Thus, 
,
, 
 would denote second-order tensors. Tensors are extremely useful in physical appli-
cations. For example, tensors represent stress, strain, rotational inertia, electrical permit-
tivity, and many other important physical quantities. Once a physical quantity is proved to
be representable by a tensor, a wealth of theorems from abstract tensor analysis then apply
to the tensor, furthering its physical interpretation.
Expansion of a second-order tensor in terms of basis dyads
GOAL: show that expanding an ordinary engineering tensor as a linear combination of the 
NINE possible ways to form basis dyads is similar in spirit to expanding an ordinary 
engineering vector as a linear combination of the laboratory orthonormal basis.
A dyad is the most rudimentary form of a tensor. Many people think of a tensor as simply
a 
 matrix. Most of the time, that view is adequate. However, the components of a ten-
sor’s matrix are always referenced to a particular basis. If the basis changes, then the
matrix changes. As discussed later, the matrix corresponds to a tensor if and only if the
matrix changes in a particular manner upon a change of basis. Since the preceding state-
ment contained the phrase “if and only if” the component transformation property is
sometimes taken as a definition of the term tensor. For now, however, we shall continue
with our equivalent view of a tensor as a sum of dyads.
For a three-dimensional vector space (i.e., for a space 
 where vectors have three
components), the sum of two dyads cannot generally be written as a single dyad. Like-
wise, the sum of three dyads generally cannot be reduced to the sum of fewer dyads. How-
ever, as proved earlier, any sum of more than three dyads can always be reduced to the
sum of three or fewer dyads. From this observation, we offered the very abstract definition
of a “second-order tensor” to be any sum of dyads. Knowing that such a sum can always
be written as the sum of at most three dyads, one might be tempted to wrongly conclude
that tensors form a three dimensional space; however the three dyads are not the same for
all tensors — in fact, they are not even unique for any given tensor. To determine the
dimension of the space of tensors, we need to determine how many scalars are needed to
uniquely define a tensor.
Given a tensor 
 (i.e., given a sum of dyads), we know that there exist* vectors such
that
 (7.50)
Each of the vectors may be expanded in terms of a basis (
, etc.), in which case,
the first term would become 
. Using the property of Eq. (7.44), this can be
written
 (7.51)
* Keep in mind, we only need to assert that these vectors exist. In practice, the appropriate vectors are 
almost never actually computed. Furthermore, they aren’t even unique.
A˜˜
B˜˜
U˜˜
3
3
×
V3
1
A˜˜
A˜˜
a˜b˜
c˜d˜
e˜f
˜
+
+
=
a˜
aie˜i
=
a˜b˜
aie˜ibje˜j
=
a˜b˜
aibje˜ie˜j
=

September 4, 2003 5:24 pm
Tensors
109
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Performing similar expansions for the other terms in Eq. (7.50), we see that any sum
of dyads (i.e. any tensor) can be written as a linear combination of the nine possible basis
dyads 
 for i and j ranging from 1 to 3. That is, for any tensor 
, there exist scalar coef-
ficients (called components) 
 such that
 (7.52)
where there are an implied sums of i and j ranging from 1 to 3 for a total of nine terms.
The principal advantage of the representation in Eq. (7.52) is that the 
 components are
unique for a given orthonormal basis, just as the components of an ordinary vector are
unique for a given basis.
The 
 components of tensors are often displayed in 3×3 arrays like this:
 (7.53)
Let 
 be a second-order tensor. In terms of an orthonormal basis 
, the ten-
sor 
 may be written
 (7.54)
or, using Einstein’s summation convention,
 (7.55)
It’s crucial to realize that these components are referenced to a particular basis. When
working with more than one basis, the component matrix might be subscripted with 
, as
in the expression
.
 (7.56)
The 
 subscript tells you that the 
 component of the matrix is the coefficient of 
 in
the basis expansion, 
. Another way to indicate the associated basis is to
append the name of the basis in angled brackets after the listing of the matrix. Thus, for
example,
<lab>
 (7.57)
would indicate to the reader that the components are referenced to the laboratory basis.
Finally, the notation
e˜ie˜j
A˜˜
Aij
A˜˜
Aije˜ie˜j
=
Aij
Aij
A˜˜
[
]
A11
A12
A13
A21
A22
A23
A31
A32
A33
=
A˜˜
e˜1 e˜2 e˜3
,
,
{
}
A˜˜
A˜˜
Aije˜ie˜j
j
1
=
3
∑
i
1
=
3
∑
=
A˜˜
Aije˜ie˜j
=
e˜e˜
A˜˜
[
]
A11 A12 A13
A21 A22 A23
A31 A32 A33 e˜e˜
=
e˜e˜
ij
e˜ie˜j
A˜˜
Aije˜ie˜j
=
A˜˜
[
]
A11 A12 A13
A21 A22 A23
A31 A32 A33
=

September 4, 2003 5:24 pm
Tensors
110
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
<
>
 (7.58)
would tell the reader that the component matrix 
 is being displayed with respect to a
special purpose basis in which the 3-direction has been aligned with a known unit vector
. This sort of display would be used when the component matrix is particularly simple
with respect some particular (cleverly selected) basis. See, for example, our discussion of
transverse isotropy on page 224.
Triads and higher-order tensors
GOAL: Introduce higher-order tensors
Recall that we introduced the concept of second-order tensors by discussing linear
transformations from vectors to vectors (
 to 
). From there, we introduced the primi-
tive “new object” called a dyad, and defined a tensor to be any sum of dyads. That defini-
tion was really for second-order tensors. Any second-order tensor can be expressed as a
linear combination of the nine basis dyads. This idea can be extended by introducing a
triad to be a new object formed from three vectors 
, defined such that
 for all vectors 
 (7.59)
Addition and scalar multiplication of triads is defined similarly to that of dyads. Also, as
was the case for dyads, you can show that scalar multiplication is vector-wise commuta-
tive, which means that multiplying a triad by a scalar will give the same result as multiply-
ing any of its constituent vectors by that scalar:
 (7.60)
As was done for second-order tensors, we can recognize that there are twenty-seven
(
) ways to form triads out of various combinations of the lab base vectors. A
third-order tensor is defined to be any linear combination of the basis triads, and it can
be characterized by a three-index 
 matrix. We will indicate third-order tensors by
using “under-tildes” and the basis expansion for a third-order tensor 
 can be written as
 (7.61)
A third-order tensor characterizes the action of a linear operator that takes vectors to sec-
ond-order tensors. If 
 is a second-order tensor given by a linear operation, 
,
then, recalling the “advanced” discussion surrounding Eq. (9.17), there exists a third-order
tensor 
 such that 
. Similarly, a third-order tensor characterizes a linear
operator that takes second-order tensors to vectors. The alternating tensor (whose compo-
nents with respect to a right-handed orthonormal basis equal the alternating symbol) is a
good example. In rigid body mechanics, the alternating tensor can be used to convert the
angular velocity vector into the angular velocity tensor. Conversely 
 times the alter-
nating tensor is the operator that will convert the angular velocity tensor back into the
angular velocity vector.
A˜˜
[
]
A11 A12 A13
A21 A22 A23
A31 A32 A33
=
e˜3=n˜
A˜˜
[
]
n˜
V3
1
V3
1
a˜b˜c˜
a˜b˜c˜
(
)
v˜
•
a˜b˜ c˜
v˜
•
(
)
≡
v˜
γ a˜b˜c˜
(
)
γa˜
(
)b˜c˜
a˜ γb˜
(
)c˜
a˜b˜ γc˜
(
)
a˜b˜c˜
(
)γ
=
=
=
=
3
3
3
×
×
3
3
3
×
×
H
˜˜˜
H
˜˜˜
Hijke˜ie˜je˜k
=
Y˜˜
Y˜˜
H x˜
( )
=
H
˜˜˜
Yij
Hijkxk
=
1 2
⁄

September 4, 2003 5:24 pm
Tensors
111
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
These concepts extend to even higher-dimensional tensors. In materials modeling,
fourth-order tensors play a dominant role because material models typically represent a
set of rules for which a second-order tensor, such as the strain, is transformed to give a dif-
ferent second-order tensor, such as stress. Even if the transformation is non-linear, it will
nevertheless still be linear in rate form, as will be discussed later. That’s why it is so
important to study linear operations. Virtually all nonlinear functions in real physical
applications become linear in rate form, which therefore permits tapping into the rich liter-
ature available for solving linear problems.
Because a third-order tensor has three indices, each taking values from 1 to 3, a third
order tensor has 27 components. A fourth-order tensor has 81 components.
Our Vmn tensor “class” notation
GOAL: Define the meaning of Vmn and show that any tensor of class Vmn will have mn 
components.
Recall that engineering scalars, vectors, second-order tensors, third-order tensors, and
fourth-order tensors are specified by 1, 3, 9, 27, and 81 numbers, respectively. Scalars are
often called 
-order tensors. Vectors are sometimes called 
-order tensors. In general,
an 
 order engineering tensor has 
 components, and we say that these tensors are of
class 
. 
When solving a problem for which all tensors are have isotropic symmetry about some
2D plane embedded in 3D space, it is conventional to set up the basis so that the third base
vector points perpendicular to that plane. Doing this permits the 3D problem to be reduced
to a 2D problem where vectors now have only 2 nonzero components and second-order
tensors are characterized by 
 matrices.
When working in two dimensions, an 
 order engineering tensor has 
 compo-
nents. Similarly, when working in an m-dimensional manifold (which is the higher dimen-
sional version of a plane), an 
 order engineering tensor has 
 components, and we
say that it is of class 
.
It will be explained later that a second-order tensor of class 
 is also a first order
tensor of class 
. For example, an ordinary second-order engineering tensor (class 
)
is also a first-order vector in a 9-dimensional space (class 
). Just as you can speak of
planes embedded in ordinary 3D space, you can also limit your attention to subspaces or
linear manifolds with 9D tensor space. The set of all symmetric second-order engineering
0th
1st
nth
3n
V3
n
2
2
×
nth
2n
nth
mn
Vmn
Vm
2
Vm2
1
V3
2
V9
1

September 4, 2003 5:24 pm
Tensors
112
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
tensors, for example, is closed under tensor addition and scalar multiplication. By this we
mean that any linear combination of symmetric tensors will be itself a symmetric tensor.
Symmetric tensors (which have six independent components) can be regarded as a six-
dimensional vector, and we say that they are of class 
. 
When you consider a problem in ordinary 3D space where most of the action occurs in
a plane, then (unless that plane happens to be lined up with the laboratory basis) your anal-
ysis will undoubtedly simplify if you introduce a different orthonormal basis that is
aligned with the plane. Similarly, when considering symmetric tensors embedded within
9D tensor space, your calculations will simplify if you switch away from the conventional
 basis used in 9D space in favor of a different basis that is “aligned” with symmetric
tensors. For example, instead of using 
 as one of your base-tensors, you would
instead use 
, which is symmetric. All of the other base tensors would need to
be redefined as well if you want to switch to a basis that is aligned with symmetric tensors.
To see how this change-of-basis would go, note that the component expansion for a gen-
eral (not necessarily symmetric) tensor given in Eq. (7.22) can be written equivalently as 
=
+ 
+
 (7.62)
The matrices shown on the right-hand-side of this equation can be regarded as an alterna-
tive basis for 9D tensor space that is aligned with symmetric tensors. This basis is still
capable of describing arbitrary non-symmetric tensors (just as a three-vector basis whose
first two base vectors are contained within a plane in ordinary 3D space is still capable of
describing all vectors, including those not in the plane). If 
 happens to be symmetric,
then 
, 
, and 
, and the above expansion reduces to
 (7.63)
V6
1
e˜ie˜j
e˜1e˜2
e˜1e˜2
e˜2e˜1
+
F11 F12 F13
F21 F22 F23
F31 F32 F33
F11
1 0 0
0 0 0
0 0 0
F22
0 0 0
0 1 0
0 0 0
F33
0 0 0
0 0 0
0 0 1
+
+
F23
F32
+
2
-----------------------




0 0 0
0 0 1
0 1 0
F31
F13
+
2
-----------------------




0 0 1
0 0 0
1 0 0
F12
F21
+
2
-----------------------




0 1 0
1 0 0
0 0 0
+
+
F32
F23
–
2
-----------------------




0 0 0
0 0
1
–
0 1 0
F13
F31
–
2
-----------------------




0 0 1
0 0 0
1
–
0 0
F21
F12
–
2
-----------------------




0
1
–
0
1 0 0
0 0 0
+
+
F
[ ]
F23
F32
=
F31
F13
=
F12
F21
=
F11 F12 F13
F21 F22 F23
F31 F32 F33
F11
1 0 0
0 0 0
0 0 0
F22
0 0 0
0 1 0
0 0 0
F33
0 0 0
0 0 0
0 0 1
F23
0 0 0
0 0 1
0 1 0
F31
0 0 1
0 0 0
1 0 0
F12
0 1 0
1 0 0
0 0 0
+
+
+
+
+
=

September 4, 2003 5:24 pm
Tensors
113
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Thus, if you are dealing exclusively with symmetric tensors, then you only need six base
tensors. The components with respect to these base tensors are called Voigt components.
One disadvantage with the Voigt system is that the base tensors are not unit tensors, but
that problem can be easily rectified by normalizing the Voigt basis to obtain what’s called
the Mandel basis. The key point here was that the set of all symmetric tensors really needs
only six base tensors. Consequently, this set is of class 
.
Fourth-order engineering tensors are of class 
, but they are also of class 
. In
other words, a fourth-order tensor referenced to ordinary 3D space can be regarded as a
second-order tensor referenced to an abstract 9D space. Consequently, they can be manip-
ulated in computations by using a 
 matrix, with the indices ranging from 1 to 9 corre-
spond to physical space index pairs 11, 22, 33, 23, 31, 12, 32, 13, 21. If you limit attention
to fourth-order tensors that are minor symmetric, then the last three columns and last three
rows of this 
 matrix will contain all zeros. In other words, you will be dealing only
with the upper 
 part of the matrix. Consequently, minor-symmetric fourth-order ten-
sors are of class 
 and they have at most 
, or 36, nonzero components. 
An ability to change how you regard the class of a tensor is useful in materials
mechanics. For example, in plasticity, the trial elastic stress rate is found by assuming that
a material is behaving elastically. If it is found that this assumption would move the stress
into a “forbidden” region that violates the yield condition, then plastic flow must be occur-
ring. The set of admissible elastic stresses is defined by a yield function such that
. When 
 is regarded as a vector of class 
, then 
 defines a yield sur-
face in 6D space. For example, just as the equation 
 defines a sphere of
radius 
 in ordinary 3D space, the equation 
 would define a hypersphere in
6D stress space. When the trial assumption of elastic behavior is found to move the stress
into inadmissible stress states (i.e., those for which 
), then [8] the equations gov-
erning classical nonhardening plasticity can be used to show that the actual stress rate is
obtained by projecting the trial elastic stress rate onto the yield surface. The projection
operation that is similar in structure to the projection shown in Fig. 6.3 except that the vec-
tor dot product is replaced by the tensor inner product ( ). The outward “normal” 
 that
defines the target plane is the gradient of the yield function (i.e., 
. These
sorts of statements are implicitly regarding stress (and the yield surface normal) as tensors
of class 
.
V6
1
V3
4
V9
2
9
9
×
9
9
×
6
6
×
V6
2
62
f σ
˜˜
( )
0
<
σ
˜˜
V6
1
f σ
˜˜
( )
0
=
x˜
x˜
•
R2
–
0
=
R
σ
˜˜
:σ
˜˜
R2
–
0
=
f σ
˜˜
( )
0
>
:
B˜˜
Bij
∂f ∂σij
⁄
=
V61

September 4, 2003 5:24 pm
Tensors
114
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Comment
So far, we have covered two important definitions of the term “tensor.” We will delay
discussing the definition that is cast in terms of basis transformation rules until we can
cover some basic tensor operations using the definitions we have given so far. This discus-
sion will lead us into a discussion of how a tensor’s matrix is related to the underlying
basis, at which time, the basis transformation rules should make enough sense to under-
stand why many people define tensors according to these rules.

September 4, 2003 5:24 pm
Tensor operations
115
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
8. Tensor operations
Dotting a tensor from the right by a vector
Keep in mind that a tensor is a mathematical bookkeeping device, which takes on
physical meaning only when operating on a vector. The notation 
 represents the lin-
ear transformation associated with the tensor. Specifically, applying the definition of a lin-
ear combination of dyads, the notation 
 must be interpreted as
 (8.1)
In the second-to-last step, we have used Eq. (5.13) to write 
. Comparing the far
left and far right-hand sides of Eq. (8.1) we conclude that
 is a vector whose 
 component is 
. 
 (8.2)
Thus, the components of 
 may be obtained by the matrix multiplication 
.
The transpose of a tensor
The transpose of a tensor 
 is a new tensor denoted 
 and defined in direct notation
such that 
 for all vectors 
 and 
 (8.3)
The 
 component of 
 is denoted 
. In indicial notation, the above definition
becomes
 (8.4)
We would like to change the dummy summation indices on the right hand side so that we
may compare it to the left hand side for arbitrary vectors 
 and . That means we want
the index on components of 
 and  to be the same on both sides. Replacing  by  and
replacing 
 by , the above equation becomes
 (8.5)
Rearranging gives
“Seriousness is the favorite refuge of 
the shallow.” 
— Oscar Wilde
A˜˜
v˜
•
A˜˜
v˜
•
A˜˜
v˜
•
Aije˜ie˜j
(
)
v˜
•
Aije˜i
(
) e˜j
v˜
•
(
)
Aije˜i
(
)vj
Aijvj
(
)e˜i
=
=
=
=
e˜j
v˜
•
vj
=
A˜˜
v˜
•
ith
Aijvj
A˜˜
v˜
•
A
[ ] v
{ }
A˜˜
A˜˜
T
u˜
A˜˜
T
v˜
•
(
)
•
v˜
A˜˜
u˜
•
(
)
•
=
u˜
v˜
ij
A˜˜
T
Aij
T
uiAij
Tvj
vmAmnun
=
u˜
v˜
u˜
v˜
n
i
m
j
uiAij
Tvj
vjAjiui
=

September 4, 2003 5:24 pm
Tensor operations
116
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (8.6)
The only way this can hold for all vectors 
 and  is if
 (8.7)
The above equation is often cited as the definition of the transpose, but the direct notation
definition of Eq. (8.3) is more general since it makes no assumption that the underlying
basis is Cartesian.
It is straightforward to show that 
 (8.8)
and
 (8.9)
Thus, the transpose operation is linear. The transpose of a dyad 
 is obtained by simply
swapping the order of the vectors. Namely,
 (8.10)
If a tensor is written in the form of Eq. (7.55), the transpose simply swaps the base
vectors. Specifically,
 (8.11)
In writing the final form, we have merely emphasized that any symbol may be used for the
dummy subscripts. Namely, we may swap the symbols  and  without loss. The 
 com-
ponent of 
 is the coefficient of 
; so the second-to-last expression says that
. The final expression says that the 
 component of 
 is the coefficient of
, namely 
. Both statements are equivalent — they just use different free index sym-
bols to describe the same result!
Dotting a tensor from the left by a vector
We will define the notation 
 to be a vector defined such that
 for all vectors 
 (8.12)
Following an analysis similar to Eq. (8.1) we write
 (8.13)
Thus,
 is a vector whose 
 component is 
.
 (8.14)
Equivalently, changing the symbols for the indices, 
ui Aij
T
Aji
–
(
)vj
0
=
u˜
v˜
Aij
T
Aji
=
αA˜˜
(
)T
αA˜˜
T
=
A˜˜
B˜˜
+
(
)T
A˜˜
T
B˜˜
T
+
=
a˜b˜
a˜b˜
(
)T
b˜a˜
=
A˜˜
T
Aije˜ie˜j
(
)T
Aij e˜ie˜j
(
)T
Aije˜je˜i
Ajie˜ie˜j
=
=
=
=
swap
dummy index i to j 
and j to i
in last step, change
i
j
ji
A˜˜
T
e˜je˜i
Aji
T
Aij
=
ij
A˜˜
T
e˜ie˜j
Aji
u˜
A˜˜
•
u˜
A˜˜
•
(
)
v˜
•
u˜
A˜˜
v˜
•
(
)
•
=
v˜
u˜
A˜˜
•
u˜
Aije˜ie˜j
(
)
•
Aij u˜
e˜i
•
(
)e˜j
Aij ui
(
)e˜j
uiAij
(
)e˜j
=
=
=
=
u˜
A˜˜
•
jth
uiAij

September 4, 2003 5:24 pm
Tensor operations
117
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 is a vector whose 
 component is 
 (8.15)
For both Eqs. (8.2) and (8.15), the index that is summed is on the same side of the [A]
matrix as the dot product (
 is dotting into 
 from the left, and the summed index on 
is the left index). The transpose of 
 is a new tensor 
 defined such that 
.
Thus, we note that
 (8.16)
Likewise,
 (8.17)
Dotting a tensor by vectors from both sides
The notation 
 is defined in a notationally consistent manner. Namely,
 (8.18)
There are no free indices, so this result is a scalar.
For advanced analysis, it is often useful to recognize that 
 (8.19)
Where “ ” is the tensor inner product defined later in Eq. (12.1).
Extracting a particular tensor component
Using techniques similar to those used to derive Eq. (5.13) one can prove that
 (8.20)
By virtue of Eq. (8.12), parentheses are not needed in this formula.
Dotting a tensor into a tensor (tensor composition)
Heuristically, you may infer the meaning of 
 by expanding each tensor in its
basis form as follows
 (8.21)
Applying Eq. (7.44), this may be written
 (8.22)
Applying Eq. (5.8), we note that 
 so that
 (8.23)
u˜
A˜˜
•
ith
ujAji
u˜
A˜˜
Aij
A˜˜
A˜˜
T
A˜˜
T
(
)ij
Aji
=
u˜
A˜˜
•
A˜˜
T
u˜
•
=
A˜˜
u˜
•
u˜
A˜˜
T
•
=
u˜
A˜˜
v˜
•
•
u˜
A˜˜
v˜
•
•
u˜
A˜˜
•
(
)
v
•
u˜
A˜˜
v˜
•
(
)
•
uiAijvj
=
=
=
u˜
A˜˜
v˜
•
•
A˜˜
:u˜ v˜
u˜ v˜:A˜˜
=
=
:
Aij
e˜i
A˜˜
e˜j
•
•
A˜˜
:e˜ie˜j
=
=
A˜˜
B˜˜
•
A˜˜
B˜˜
•
Aije˜ie˜j
Bkle˜ke˜l
•
=
A˜˜
B˜˜
•
AijBkle˜ie˜j
e˜ke˜l
•
=
e˜j
e˜k
•
δjk
=
A˜˜
B˜˜
•
AijBkle˜iδjke˜l
=

September 4, 2003 5:24 pm
Tensor operations
118
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Again applying Eq. (7.44), this may be written
 (8.24)
Finally, using the Kronecker-removal rule (Eq. 4.43), we may eliminate the 
 if all
occurrences of the summed index  are replaced with , giving
 (8.25)
This result is a linear combination of 
 times the dyad 
. Therefore, 
 must
represent a tensor whose 
 component is given by 
. Later on, the linear transforma-
tion operator associated with 
 will be seen to represent the composition of the linear
transformations associated individually with 
 and 
.
A˜˜
B˜˜
•
AijBklδjke˜ie˜l
=
δjk
j
k
A˜˜
B˜˜
•
AikBkle˜ie˜l
=
AikBkl
e˜ie˜l
A˜˜
B˜˜
•
il
AikBkl
A˜˜
B˜˜
•
A˜˜
B˜˜

September 4, 2003 5:24 pm
Tensor analysis primitives
119
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
9. Tensor analysis primitives
Three kinds of vector and tensor notation
Three kinds of notations dominate the literature: direct, basis, and indicial. “Direct,” or structured,
notation uses underlined symbols with no reference to a basis. Indicial notation shows strictly the compo-
nent form of an expression. Basis notation is similar to indicial notation except that the associated basis is
shown explicitly. 
Rather than giving formal definitions, we will merely show the distinctions by examples:
Example 1: Representations of a vector
direct:  (no indices, no base vectors)
basis: 
 (no free indices, one base vector → result is a vector)
indicial: 
(one free index  → result corresponds to a vector)
Example 2: A linear transformation of a vector
direct: 
 (no indices, no base vectors, abstract operation symbol)
basis: 
 (no free indices, one base vector → result is a vector)
indicial: 
(one free index  → result corresponds to a vector)
Example 3: The composition of two tensors
direct: 
 (no indices, no base vectors, abstract operation symbol)
basis: 
 (no free indices, two base vectors → result is a tensor)
indicial: 
(two free indices → result corresponds to a tensor)
Example 4: The inner product of two vectors
direct: 
 (no indices, no base vectors, abstract operation symbol)
basis: 
 (no free indices, no base vectors → result is a scalar)
indicial: 
(no free indices → result corresponds to a scalar)
“Everything comes to he who hustles while
he waits.” 
— Thomas Edison
v˜vie˜i
vi
A˜˜
v˜
•
Aijvj
(
)e˜i
Aijvj
A˜˜
B˜˜
•
AijBjk
(
)e˜ie˜k
AijBjk
a˜
b˜
•
akbk
akbk

September 4, 2003 5:24 pm
Tensor analysis primitives
120
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
When counting base vectors in an expression given using basis notation, it is important to
understand that this count must occur after the expression has been simplified into a form
that is identical to the indicial form except also multiplied by the base vectors correspond-
ing to the free indices in the indicial expression. For example, 
 is expressed
using basis notation, but the presence of two base vectors does not mean it corresponds to
a tensor; the dot product between 
 and 
 becomes simply 
 so that the expression
simplifies to 
 or simply 
, which has no base vectors and is therefore a scalar.
Direct notation is useful for conceptual discussions. As long as the abstract operations
are well-defined, it is straightforward to convert from direct notation to any of the other
notations. The principal disadvantage of direct notation is that the meanings of the
abstract operations can vary widely in the literature. For example, many authors define the
notation 
 to mean what we have opted to denote by 
. Also, it is often more diffi-
cult to infer the order of the result when using direct notation. It is a bit easier, though,
with our “under-tilde” convention. To infer the order of the result, first you count the num-
ber of under-tildes (for example, 
 has three under-tildes); then you subtract from this
number by an amount appropriate to operations in the expression. For example, the “sin-
gle” dot operation will always reduce the count by 2. Three minus two equals one; there-
fore, 
 must be a first-order tensor (i.e., a vector). The cross product operation will
reduce the count by 1. The double dot operation “:” (see Eq. 3.60) reduces the count by
four.
An extremely important use for direct notation arises in vector and tensor calculus,
where the meaning of, say, the curl for an obscure curvilinear coordinate system can be
simply “looked up” in a handbook. Likewise, the appropriate component form for, say, the
dot product for a non-rectangular basis can be looked up in a handbook. You can perform
all of your physical analyses in Cartesian indicial form and then simply express the final
result in direct notation. As long as every step in your analysis involved valid vector and
tensor operations (vector addition, dot products, cross products, dyadic products, gradient
operations, etc.), then straightforward rules exist to convert your final direct notation
result into any other notation or to any other coordinate system without error — it is not
necessary to re-do your entire analysis when you switch notations or coordinates! 
Direct notation formulas also tend to exhibit more obvious connections with similar
formulas for scalars. For example, the time rate of the inverse of a tensor is given by
,
 (9.1)
which is clearly analogous to the scalar formula
 (9.2)
aie˜i
(
)
bke˜k
(
)
•
e˜i
e˜k
δik
aibkδik
akbk
Av
A˜˜
v˜
•
A˜˜
v˜
•
A˜˜
v˜
•
d F˜˜
1
–
(
)
dt
-----------------
F˜˜
1
–
dF˜˜
dt
-------
F˜˜
1
–
•
•
–
=
d 1
x--


dt
------------
dx dt
⁄
x2
---------------
–
=

September 4, 2003 5:24 pm
Tensor analysis primitives
121
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Tensor gradients are another good example. We can define direct notation symbols for the
derivative of scalars, vectors, or tensors with respect to other scalars, vectors, or tensors as
follows:
, 
, 
, etc.
 (9.3)
By using a notation such as this, direct notation expressions for the chain rule take forms
that are very similar to what is already familiar for scalars. For example, it can be shown
that
 (9.4)
Suppose, as another example, that a scalar  is given by a function of another scalar
, a vector , and a tensor 
. If each of these arguments is expressible as a function of
position  then the gradient of  with respect to position can be computed in direct nota-
tion by using the chain rule:
 (9.5)
where the “:” symbol denotes the second-order tensor inner product, defined later. This
formula looks like an ordinary application of the chain rule except that the appropriate
inner product is used between factors. The indicial form of the above equation would be
 (9.6)
Basis notation is useful when working with more than one basis, or as an intermediate
notation when converting a direct notation expression to indicial form. Indicial notation is
often the most clear, though an alphabet soup of indices can be distracting when discuss-
ing conceptual issues. Furthermore, the constant task of looking after the summation rules
(changing ’s to ’s, etc.) can be wearisome and error-prone. There are times when even
indicial notation is vague. For example, what does the expression 
 mean? Is it
 or is it 
? The two are not the same. Likewise, does 
 mean
 or 
. Sometimes these questions can be answered by defining operator prece-
dence* or simply from context. Nonetheless, these issues are characteristic of potential
flaws with indicial notation. The bottom line is that all three notations are useful, and none
* A good rule of thumb is that the indices take lowest precedence. Thus 
 would be found by tak-
ing the inverse of 
 and then finding the 
 component.
ds
dx˜
------
∂s
∂xk
--------e˜k
≡
du˜
dw˜
-------
∂ui
∂wj
--------e˜ie˜j
≡
du˜
dA˜˜
-------
∂ui
∂Ajk
----------e˜ie˜je˜k
≡
du˜
dw˜
-------
1
–
dw˜
du˜
-------
=
s
ψ
a˜
F˜˜
x˜
s
ds
dx˜
------
∂s
∂ψ
-------dψ
dx˜
-------
∂s
∂a˜
------
da˜
dx˜
------
•
∂s
∂F˜˜
------- :
dF˜˜
dx˜
-------
+
+
=
∂s
∂xi
-------
∂s
∂ψ
-------∂ψ
∂xi
-------
∂s
∂ak
---------∂ak
∂xi
--------
∂s
∂Fmn
-------------- ∂Fmn
∂xi
------------
+
+
=
j
k
∂f ∂σii
⁄
∂f ∂trσ
˜˜
(
)
⁄
tr ∂f ∂σ
˜˜
⁄
[
]
Aij1
–
A˜˜
1
–
(
)ij
1 Aij
⁄
Aij
1
–
A˜˜
ij

September 4, 2003 5:24 pm
Tensor analysis primitives
122
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
is perfect. A competent analyst should learn all notations and pick the one that is clearest
for the application at hand. A courteous analyst will always attempt to infer and use
whichever notational system their audience (or the majority of their audience) will be
most comfortable with. 
REPRESENTATION THEOREM for linear forms
GOAL: Explain that there exists a unique tensor that characterizes each function that 
linearly transforms vectors to vectors.
If a vector-valued function 
 is known to be linear, then there exists a second-order ten-
sor 
 which is independent of 
 such that the function 
 can be written in the form
. Stated mathematically,
If 
 is a vector valued function that is linear in , then there exists a tensor 
 
such that 
, where 
 will be independent of .
 (9.7)
The converse is also true. Specifically, any expression of the form 
 can be proved to
be linear with respect to  if you can prove that 
 is independent of . This might seem
like an obvious statement, but it can be subtle in certain applications.*
If 
 is linear in 
, then the equation 
 can (and should) be written
, which is expressed in indicial notation as
 (9.8)
where the associated base vector 
 is understood to be multiplied by these components. If
the vectors 
 and 
 are written as 3×1 matrices and the tensor
 is written as a 3×3
matrix, Eq. (9.8) can be written
 (9.9)
Incidentally, we have used the phrase “if 
 is linear in ” as a sloppy way to indicate
that the function  might depend additionally on other variables that we have not shown
explicitly in the independent variable list. If, for example, you are dealing with a function
 where  is a scalar and , then this function is said to be linear in  if 
 
 (9.10)
* For example, if 
 represents an orthogonal tensor defined such that 
 will rotate a vector  by 
an angle 
 about an axis , then you can use this operation in a description of torsion of a circular 
rod to describe the movement of points on the rod. However, for torsion, the angle of rotation 
increases with distance along the rod. Hence, since 
 depends on the angle of rotation, it must also 
depend on position. Consequently, 
 would be a nonlinear transformation of  despite the fact 
that it appears on the surface to be linear because the spatial dependence of 
 is not shown explic-
itly. There’s nothing wrong with this, but you do need to monitor possibilities like this.
f x˜
( )
F˜˜
x˜
f x˜
( )
F˜˜
x˜
•
f x˜
( )
x˜
F˜˜
f x˜
( )
F˜˜
x˜
•
=
F˜˜
x˜
F˜˜
x˜
•
x˜
F˜˜
x˜
R˜˜
R˜˜
x˜
•
x˜
α
a˜
R˜˜
R˜˜
x˜
•
x˜
R˜˜
f x˜
( )
x˜
y
˜
f x˜
( )
=
y
˜
F˜˜
x˜
•
=
yi
Fijxj
=
e˜i
x˜
y
˜
F˜˜
y1
y2
y3










F11 F12 F13
F21 F22 F23
F31 F32 F33
x1
x2
x3










=
f x˜
( )
x˜
f
f x˜ φ c˜
, ,
(
)
φ
c˜
x˜
f αu˜
βv˜
+
φ c˜
, ,
(
)
αf u˜ φ c˜
, ,
(
)
βf v˜ φ c˜
, ,
(
)
+
=

September 4, 2003 5:24 pm
Tensor analysis primitives
123
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
for all scalars 
 and
and all vectors 
 and . In this case, there exists a tensor 
 that
will be independent of 
 but will generally depend on 
 and 
 such that
. If the function  depends on 
 and 
 in a nonlinear manner,
then so will the tensor 
.
Representation theorem for vector-to-scalar linear functions. 
Our statements about existence of tensors corresponding to linear functions were
given above in the context of vector-to-vector transformations. However, the same idea
applies to tensors of other orders as well. If, for example, 
 is a scalar-valued function
that depends linearly on its vector argument , then you can assert existence of a vector 
such that 
. 
If 
 is a scalar-valued function that is linear in , then there exists a vector  
such that 
, where  will be independent of .
 (9.11)
Consider, for example, the equation 
, where  and  are known con-
stant vectors. The right-hand-side of this expression is linear with respect to 
. Conse-
quently, we should be able to construct a vector  that depends on  and  but not on 
such that 
. To find , the simplest method is to write the requirement 
 (9.12)
in indicial form. Namely,
 (9.13)
Since this must hold for all 
, we conclude that
 (9.14)
or
 (9.15)
In hindsight, you might look at this result to see that you could have done the entire proof
in direct (structured) notation by noting that 
 is the triple-scalar-product,
 and, by the cyclic property of the triple-scalar-product, you could assert that it
must equal 
 or 
. It is more easy to compare this re-written expression
with 
 to immediately recognize that 
. In practice, elegant solutions like
this one might be difficult to see a priori, and doing it indicially is often easier. 
Incidentally, note that the index “k” on the right side of Eq. (9.13) is only a dummy
index. It was just fortunate happenstance that the same dummy index was on
on both
sides of that equation. You must never go from an equation like (9.13) to a conclusion like
(9.14) unless you have the dummy indices all matching on the variable you wish to “can-
cel”. If we had been inattentive and written the indicial form of 
 as 
, then
Eq. (9.13) would have read
 (9.16)
α
β
u˜
v˜
F˜˜
x˜
φ
c˜
f x˜ φ c˜
, ,
(
)
F˜˜
φ c˜
,
(
)
x˜
•
=
f
φ
c˜
F˜˜
g x˜
( )
x˜
g
˜
g x˜
( )
g
˜
x˜
•
=
f x˜
( )
x˜
g
˜
f x˜
( )
g
˜
x˜
•
=
g
˜
x˜
s
b˜
x˜
×
(
)
a˜
•
=
a˜
b˜
x˜
g
˜
a˜
b˜
x˜
s
g
˜
x˜
•
=
g
˜
b˜
x˜
×
(
)
a˜
•
g
˜
x˜
•
=
εijkbjxkai
gkxk
=
xk
gk
εijkbjai
=
g
˜
a˜
b˜
×
=
b˜
x˜
×
(
)
a˜
•
b˜ x˜ a˜
, ,
[
]
a˜ b˜ x˜
, ,
[
]
a˜
b˜
×
(
)
x˜
•
g
˜
x˜
•
g
˜
a˜
b˜
×
=
xk
g
˜
x˜
•
gixi
εijkbjxkai
gixi
=

September 4, 2003 5:24 pm
Tensor analysis primitives
124
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This is a legitimate indicial equation (no summation conventions are violated), but it
would be incorrect to simply remove the x’s to write 
; doing that would violate
the sum conventions because “i” would be a dummy sum index on the left side but a free
index on the right side. When facing a situation like this one when the indices are not all
identical on the variable you wish to “cancel” you can use the methods on page 67 to
manipulate the indices to desired symbols. Before you “cancel” a variable 
, however,
you must assert that the equation holds for all 
 (see Eq. 5.11).
Advanced Representation Theorem (to be read once you learn about 
higher-order tensors and the Vmn class notation). 
We have described the representation theorem for vector-to-vector transformations
and for vector-to-scalar transformations. The representation theorem applies to any func-
tion that linearly transforms a vector or tensor of class 
 into 
. The representation
theorem ensures existence of a tensor of class 
 that characterizes the linear function.
Specifically, the linear form can be written as this 
 tensor multiplied by the input
argument using the inner product for the input space, 
. 
If 
 is a 
-valued function that is linear with respect to a 
 tensor , then 
there exists a 
 tensor 
 such that 
, where  is the inner 
product on 
 and 
 will be independent of .
 (9.17)
Suppose, for example that 
 is linear transformation of a vector  that produces a
second-order tensor as its output. The input 
 is of class 
 and the output (a second-
order tensor) is of class 
. Because the transformation is linear, you can assert the exist-
ence of a tensor of class 
, or 
 that characterizes the transformation using the inner
product on the input space. The input space is 
, which is just ordinary vectors, so the
inner product there is just the single raised dot. Thus, if 
 is linear transformation of a
vector  that produces a second-order tensor as its output, then there exists a third-order
tensor 
 such that 
. 
The argument to a linear function doesn’t have to be a vector. Materials modeling, for
example, deals with transformations that take tensors to tensors (e.g., given strain, the
model will compute stress). In this case, we are considering linear transformations from
 to 
, so these can be characterized by a tensor of class 
, or fourth-order 
tensors, acting on the input space using the 
 inner product. Thus, if 
 is a linear
function that produces a second-order tensor as output, then you may assert existence of a
fourth-order tensor 
 such that 
. Note that we are no longer using the single
dot product. We are using the double-dot product because that is the inner-product appro-
priate to the argument of the function. If 
, then 
, which can be written
in component form as 
. You can also consider scalar-valued functions of
tensors. Consider, for example, the trace of a tensor 
. This function is linear in
, so we may assert existence of a tensor 
 such that 
. For this example, it
turns out that 
 is the identity tensor, so we may therefore write 
.
εijkbjai
gi
=
xk
xk
V3
m
V3
n
V3
m
n
+
V3
m
n
+
V3
m
f x
( )
V3
n
V3
m
x
V3
m
n
+
H
f x
( )
H*x
=
*
V3
m
H
x
h x˜
( )
x˜
x˜
V3
1
V3
2
V3
1
2
+
V3
3
V3
1
h x˜
( )
x˜H˜˜˜
h x˜
( )
H˜˜˜
x˜
•
=
V3
2
V3
2
V3
2
2
+
V3
4
V3
2
f X˜˜
(
)
E˜˜˜˜
f X˜˜
(
)
E˜˜˜˜
:X˜˜
=
Y˜˜
f X˜˜
(
)
=
Y˜˜
E˜˜˜˜
:X˜˜
=
Yij
EijklXkl
=
g X˜˜
(
)
trX˜˜
=
X˜˜
G˜˜
g X˜˜
(
)
G˜˜
:X˜˜
=
G˜˜
trX˜˜
I˜˜
:X˜˜
=

September 4, 2003 5:24 pm
Tensor analysis primitives
125
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Why all this fuss over linear functions when we know that Mother Nature plagues us
with non-linear phenomena? The answer is that linear transformation theory is a generali-
zation of what you learned in high-school about straight lines. The mathematics of straight
lines forms the essential foundation for calculus, where nonlinear functions are handled by
regarding them as an infinite collection of tiny straight line segments. Physical applica-
tions of tensors to nonlinear transformations employ similar principles, as will be dis-
cussed in Chapter 21.
Finding the tensor associated with a linear function
So far, we have only asserted that a tensor 
 exists whenever the function 
 is linear.
In practical applications, the fastest way to construct the 
 matrix is to recognize that the
 column of 
 contains the components of the vector 
. 
For analytical applications, an indicial expression for the tensor is often desired, and
this indicial expression can usually be cast in direct notation as well. 
Method #1. The conventional way of finding the tensor associated with a linear trans-
formation is to write out the “
” component of 
 in indicial form and then set the
result equal to the indicial form of 
, namely 
. In this expression, note that the
index “j” is a dummy summation index, and we could have equally well written 
.
You should take care to choose the same symbol for the dummy sum index on x every-
where so that you can then assert that the result must hold for all , permitting you to drop
the 
’s from the indicial equation. This approach is used in Eqs. (11.21) and (11.22). 
Method #2. The tensor 
 can be determined by simply differentiating the function 
with respect to .
, 
then there exists a tensor 
 such that 
 
where 
 (9.18)
An example of this statement is given in Eq. (11.23). Incidentally, the derivative
 denotes the partial derivative with respect to 
, holding the other components
of 
 constant. When applying Eq. (9.7) for finding 
, it is often important to recognize
that the derivative of a vector with respect to itself is the identity tensor , as defined
below.
 (9.19)
F˜˜
f x˜
( )
Fij
ith
F˜˜
[
]
f e˜i
(
)
ith
f x˜
( )
F˜˜
x˜
•
Fijxj
Fikxk
x˜
xk
F˜˜
f x˜
( )
x˜
if y
˜
f x˜
( )
=
and f x˜
( ) is linear in x˜






F˜˜
y
˜
F˜˜
x˜
•
=
F˜˜
dy
˜
dx˜
------
∂yi
∂xj
-------e˜ie˜j
=
=
∂   
(
) ∂xj
⁄
xj
x˜
F˜˜
I˜˜
dx˜
dx˜
------
∂xi
∂xj
-------e˜ie˜j
δije˜ie˜j
I˜˜
≡
=
=

September 4, 2003 5:24 pm
Tensor analysis primitives
126
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This formula is applied, for example, in Eq. (11.25). Unlike method #1, this method does
not require you to spend time trying to get the dummy summation index to be the same on
all 
, which can be difficult for complicated expressions.
Method #3. A related “slick” method for finding the tensor is to express the equation
 in rate form. Taking the rate of the right-hand side (permitting only  to be
regarded as time varying) gives 
. The rate of 
 can typically be easily rearranging
into a form of “something” dotted into  and that “something” must be the tensor 
.
EXAMPLE. Consider, for example, the vector-to-vector function 
,
where  is a constant vector. This function is linear with respect to which is linear with
respect to , so you can assert existence of a tensor 
 such that 
. 
METHOD #1: The 
 component of 
 is 
, and this result must be equated to
the 
 component of 
, namely 
. Note that we used the dummy index symbol
“n” on 
 to ensure that it would be the same as the index used in our first expression.
Equating the two expressions gives 
. Asserting that this must be true for
all 
 shows that 
.
METHOD #2: In indicial form, the equation 
 can be written
. This time, we didn’t bother to get the dummy sum index the same on
both x’s. Differentiating both sides with respect to 
 gives 
. Using the
index-changing property of the Kronecker delta, this simplifies to 
, which is
the same as what we got using method 1.
METHOD #3: For our example function, the equation 
 is
. Taking rates gives 
 rearranging so that the  is on the
trailing end of both expressions gives 
. Asserting this must hold for all 
shows that 
, which is the direct notation version of the result found using methods
1 and 2. This example was a bit trivial, so the power of this method is not readily apparent.
The identity tensor
Consider the following function
 (9.20)
Applying Eq. (7.7), this function is seen to be linear in 
. Therefore, applying Eq. (9.7),
there must exist a second-order tensor, which we will denote , such that 
 for all 
 (9.21)
Recalling Eq. (9.19), the 
 components of  with respect to any orthonormal basis are
simply 
. 
The 
 matrix for the second-order identity tensor  is just the identity matrix
xk
f x˜
( )
F˜˜
x˜
•
=
x˜
F˜˜
x˜
·
•
f x˜
( )
x˜
·
F˜˜
f x˜
( )
c˜
x˜
•
(
)c˜
=
c˜
x˜
F˜˜
f x˜
( )
F˜˜
x˜
•
=
ith
f x˜
( )
cnxnci
ith
F˜˜
x˜
•
Finxn
xn
cnxnci
Finxn
=
xn
Fin
cnci
=
f x˜
( )
F˜˜
x˜
•
=
cnxnci
Fikxk
=
xp
cnδnpci
Fikδkp
=
cpci
Fip
=
f x˜
( )
F˜˜
x˜
•
=
c˜
x˜
•
(
)c˜
F˜˜
x˜
•
=
c˜
x˜
·
•
(
)c˜
F˜˜
x˜
·
•
=
x˜
·
c˜ c˜
x˜
·
•
(
)
F˜˜
x˜
·
•
=
x˜
·
F˜˜
c˜c˜
=
f x˜
( )
x˜
=
x˜
I˜˜
I˜˜
x˜
•
x˜
=
x˜
ij
I˜˜
δij
3
3
×
I˜˜

September 4, 2003 5:24 pm
Tensor analysis primitives
127
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 
with respect to any orthonormal basis.
 (9.22)
Thus, in basis notation, the identity tensor may be written
 (9.23)
or, expanded out explicitly,
 (9.24)
An alternative way to derive Eq. (9.22) is to recall that the 
 column of the tensor must
contain 
. Thus, the first column of the tensor must contain the component array for
. The component array for 
 is 
,
 (9.25)
so this must be the first column of the matrix. The second and third columns are the com-
ponent arrays for 
 and 
, respectively. Thus we obtain the same matrix as in Eq.
(9.22).
Tensor associated with composition of two linear 
transformations
Recall* that for any linear vector-to-vector transformation, 
, there exists a tensor
 such that
 (9.26)
Likewise, for any linear vector-to-vector transformation, 
, there exists a tensor 
such that
 (9.27)
Therefore, the composition of the two transformations must be given by
 (9.28)
The composition of two linear functions can be readily verified to be itself a linear func-
tion. Hence, recalling Eq. (9.7), there must exist a tensor, which we will denote 
such that
 for all vectors 
 (9.29)
The components of 
 are
* from the Representation Theorem, Eq. (9.7)
I˜˜
[ ]
1 0 0
0 1 0
0 0 1
=
I˜˜
δije˜ie˜j
=
I˜˜
e˜1e˜1
e˜2e˜2
e˜3e˜3
+
+
e˜ke˜k
=
=
ith
f e˜i
(
)
f e˜1
(
)
e˜1
=
e˜1
1
0
0
e˜2
e˜3
f x˜
( )
F˜˜
f x˜
( )
F˜˜
x˜
•
=
g x˜
( )
G˜˜
g x˜
( )
G˜˜
x˜
•
=
f g x˜
( )
(
)
F˜˜
G˜˜
x˜
•
(
)
•
=
F˜˜
G˜˜
•
f
˜
g
˜
x˜
( )
(
)
F˜˜
G˜˜
•
(
)
x˜
•
=
x˜
F˜˜
G˜˜
•

September 4, 2003 5:24 pm
Tensor analysis primitives
128
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (9.30)
Hence, the matrix for 
 may be found by the simple matrix multiplication, 
.
Eqs. (9.28) and (9.29) must both hold simultaneously for all 
 vectors. Hence, the
direct notation statement, 
 for all 
 (9.31)
serves as a definition of what is meant by 
. 
The power of heuristically consistent notation
In Eq. (9.31), we have chosen a heuristically appealing notation for 
 so that we
may drop the parentheses to write
 (9.32)
without ambiguity. Many authors prefer the more-easily typeset notation 
 to denote
the composition, so they would not be able to drop the parentheses. Our notation is more
consistent because you can always heuristically decipher what it means. For example,
recalling that
 and 
,
 (9.33)
you can heuristically write
 (9.34)
Using Eq. (5.8), the user can note that 
, so that the above equation would
become
 (9.35)
Finally, noting that 
 is zero unless, 
, this becomes
 (9.36)
The remaining dyad is 
. Hence, the 
 components of 
 must be
 (9.37)
Aside from our choice of dummy and free indices, this result is identical to (9.30).
Throughout this book, we define our notation in such a manner that heuristic analyses like
these will always give the correct interpretation of the notation. Thus, for example, the
cross product between a tensor and a vector would be interpreted
= 
 (9.38)
Applying Eq. (5.33), the above equation becomes
F˜˜
G˜˜
•
(
)ij
FikGkj
=
F˜˜
G˜˜
•
F
[ ] G
[
]
x˜
F˜˜
G˜˜
•
(
)
x˜
•
F˜˜
G˜˜
x˜
•
(
)
•
=
x˜
F˜˜
G˜˜
•
F˜˜
G˜˜
•
F˜˜
G˜˜
x˜
•
•
FG
F˜˜
Fije˜ie˜j
=
G˜˜
Gkle˜ke˜l
=
F˜˜
G˜˜
•
Fije˜ie˜j
(
)
Gkle˜ke˜l
(
)
•
FijGkl e˜ie˜j
(
)
e˜ke˜l
(
)
•
=
=
e˜j
e˜k
•
δjk
=
F˜˜
G˜˜
•
FijGklδjke˜ie˜l
=
δjk
j=k
F˜˜
G˜˜
•
FikGkle˜ie˜l
=
e˜ie˜l
il
F˜˜
G˜˜
•
F˜˜
G˜˜
•
(
)il
FikGkl
=
A˜˜
v˜
×
Aije˜ie˜j
(
)
vke˜k
(
)
×
=
Aijvke˜i
(
) e˜j
e˜k
×
(
)

September 4, 2003 5:24 pm
Tensor analysis primitives
129
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (9.39)
This final form contains a dyad 
. The reader (who might never have heard of crossing
a tensor into a vector) would be able to conclude that 
 must be a second-order tensor,
with 
 components given by
 (9.40)
Similarly, a reader would be able to deduce what it means when we write two tensors writ-
ten side-by-side with no symbol between. Following our notational conventions, the result
is a fourth-order tensor,
 (9.41)
We have already introduced the notion that any linear combination of 
’s is a vector, and
any linear combination of 
 dyads is a second-order tensor. Generalizing this idea, we
will later introduce basis “triads” 
 which will be identified with third order tensors.
Likewise, any linear combination of 
 must be a fourth-order tensor. Hence, the
notation 
 in Eq. (9.41) must represent a fourth-order tensor whose 
 components
must be 
. Recall that 
 means the same thing as 
. Likewise, when publish-
ing for a journal article, it might be wise to use the notation 
 instead of 
 because
your readers might confuse 
 with tensor composition, which we here denote as 
.
The inverse of a tensor
Recall from Eq. (9.29) the two notations for the composition of two linear operators 
and 
 for all vectors 
 (9.42)
Now suppose that  is defined to “undo” the action of  so that
 for all vectors 
 (9.43)
Then  is called the inverse of 
, and is denoted 
. The tensor associated with the
inverse of  is denoted 
. Hence, putting Eq. (9.43) into (9.42) gives the tensor defini-
tion of the inverse:
 for all vectors 
 (9.44)
In other words, the tensor inverse is defined such that
,
 (9.45)
which means that the matrix for 
 is obtained by inverting the matrix for 
. 
The COFACTOR tensor
In direct notation [see Ref. 21], the cofactor tensor 
 is defined by 
 
for all vectors 
 and 
 (9.46)
A˜˜
v˜
×
Aijvkεpjke˜ie˜p
=
e˜ie˜p
A˜˜
v˜
×
ip
A˜˜
v˜
×
(
)ip
Aijvkεpjk
=
A˜˜
B˜˜
AijBkle˜ie˜je˜ke˜l
=
e˜i
e˜ie˜j
e˜ie˜je˜k
e˜ie˜je˜ke˜l
A˜˜
B˜˜
ijkl
AijBkl
u˜
v˜
⊗
u˜ v˜
A˜˜
B˜˜
⊗
A˜˜
B˜˜
A˜˜
B˜˜
A˜˜
B˜˜
•
f
g
f g x˜
( )
(
)
F˜˜
G˜˜
•
(
)
x˜
•
=
x˜
f
g
f g x˜
( )
(
)
x˜
=
x˜
f
g
g 1
–
g
G˜˜
1
–
x˜
G˜˜
1
–
G˜˜
•
(
)
x˜
•
=
x˜
G˜˜
1
–
G˜˜
•
I˜˜
=
G˜˜
1
–
G˜˜
G˜˜
C
G˜˜
C
u˜
v˜
×
(
)
•
G˜˜
u˜
•
(
)
G˜˜
v˜
•
(
)
×
=
u˜
v˜

September 4, 2003 5:24 pm
Tensor analysis primitives
130
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This definition might seem quite strange until you think about it physically. Recalling
Fig. 5.2, the cross product 
 is perpendicular to the plane spanned by 
 and
and its
magnitude equals the area of the parallelogram formed by 
 and
. Suppose that all vec-
tors are now transformed by a linear operator 
. Then the vector  becomes 
 and 
becomes 
. Thus, the vector on the right-hand-side of Eq. (9.46) is the new area vec-
tor formed by the transformed vectors. Though not at all obvious, it turns out that this new
area vector is linearly related to the old area vector 
. Since the relationship between
the old and new areas is linear, Eq. (9.7) tells us there must exist a tensor, which we denote
, that can act on the old area to give the new area.
In direct notation, Eq. (9.46) is written
 (9.47)
or, since this must hold for all 
 and 
,
.
 (9.48)
Multiplying both sides by 
 and using Eq. (3.87) shows that
 (9.49)
or, rearranging and changing the symbols used for the free indices,
 (9.50)
In direct notation, 
, 
where 
 is a sixth-order tensor* whose components are given by 
 (9.51)
Writing out Eq. (9.50) explicitly reveals that the component matrix associated with the
cofactor tensor equals the cofactor of the component matrix for 
 (see Eq. 3.94):
 (9.52)
* Clearly, the teaching benefit of putting as many under-tildes beneath a tensor as the order of the ten-
sor is reaching the point of comically diminishing returns — typesetting them is hard for the writer 
and counting them is hard for the reader.
u˜
v˜
×
u˜
v˜
u˜
v˜
G˜˜
u˜
G˜˜
u˜
•
v˜
G˜˜
v˜
•
u˜
v˜
×
G˜˜
C
Gij
C εjkmukvm
(
)
εirs Grkuk
(
) Gsmvm
(
)
=
uk
vm
Gij
C εjkm
(
)
εirsGrkGsm
=
εpkm
2Gpj
C
εirsGrkGrmεpkm
=
Gij
C
1
2-- εipqGprGqsεrsj
=
G˜˜
C
1
2--G˜˜
:H
˜˜˜˜˜˜
:G˜˜
=
H
˜˜˜˜˜˜
Hijmnpr
εimpεjnr
=
G˜˜
[
]
G˜˜
C
[
]
G˜˜
[
]C
=

September 4, 2003 5:24 pm
Tensor analysis primitives
131
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Incidentally, the transpose of the cofactor tensor is often called the “adjugate” tensor.
Unfortunately, some writers also call this the “adjoint,” but this is a dangerous misnomer
(perhaps originating from mis-hearing the word “adjugate”). When applied to tensors, the
term “adjoint” should be defined to mean the complex conjugate of the transpose — at
least that’s how it should be defined if you want your lexicon to agree with that of mathe-
maticians. Of course, if the components are real the adjoint is just the transpose, and it is
not the same as the adjugate. We use the term “cofactor” to side-step the whole ugly issue.
Examination of Eq. (9.50) reveals that the cofactor of the transpose equals the trans-
pose of the cofactor. In other words, these two operations commute, and you can write
.
The cofactor tensor 
 is well defined even if 
 is non-invertible. However, if 
happens to be invertible, then
 (9.53)
Incidentally, if we define 
 to be an “initial” area vector and if we define
 to be the “transformed” area vector, then substituting Eq. (9.53)
into Eq. (9.46) gives
 (9.54)
In continuum mechanics, this equation is known as Nanson’s formula.
For the record, the result of differentiating 
 with respect to 
 is
 (9.55)
Axial tensors (tensor associated with a cross-product)
Consider the cross-product, 
. If the vector  is regarded as fixed, then the cross
product may be regarded as a vector-to-vector transformation 
. This trans-
formation is linear because, for any scalars 
 and
and any vectors 
 and 
,
. Consequently, recalling Eq. (9.7), we can assert that there
must exist a tensor 
 such that 
. In other words, we seek a tensor 
 such
that
 (9.56)
Writing this out in component form gives
 (9.57)
We used the symbol “k” as the dummy summation symbol on the right hand side so that
the subscript on  there would be the same as on the left-hand-side. Asserting that this
equation must hold for all 
 gives the formula for the tensor:
 (9.58)
Equivalently, 
G˜˜
CT
G˜˜
C
(
)T
G˜˜
T
(
)C
G˜˜
TC
=
=
=
G˜˜
C
G˜˜
G˜˜
G˜˜
C
det G˜˜
(
) G˜˜
T
–
=
A˜ o
u˜
v˜
×
≡
A˜
G˜˜
u˜
•
(
)
G˜˜
v˜
•
(
)
×
≡
A˜
det G˜˜
(
) G˜˜
T
–
A˜ o
•
=
G˜˜
C
G˜˜
∂Gij
C
∂Grs
-----------
εirmGmnεnjs
=
a˜
x˜
×
a˜
f x˜
( )
a˜
x˜
×
=
α
β
u˜
v˜
f αu˜
βv˜
+
(
)
αf u˜
( )
βf v˜( )
+
=
A˜˜
f x˜
( )
A˜˜
x˜
•
=
A˜˜
a˜
x˜
×
A˜˜
x˜
•
=
εijkajxk
Aikxk
=
x
xk
Aik
εijkaj
=

September 4, 2003 5:24 pm
Tensor analysis primitives
132
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (9.59)
By moving the summed index to abutting locations, we can write this result in direct
(structured) notation as
 (9.60)
Note that the tensor 
 depends on 
, but is independent of . We can regard this result
itself as a definition of a vector-to-tensor operation that transforms the vector  into a ten-
sor 
. Below, we emphasize that 
 is given by an operation on 
 by using the symbol
 instead of the symbol 
.
Given any vector 
, you can always construct a skew-symmetric “axial tensor”
defined by
 (9.61)
The components of the axial tensor are given by
 (9.62)
Equivalently,
 (9.63)
Expanding out the implied summation over the index  (noting that all terms for which
 are zero), the matrix for the axial tensor is related to the components of the vector 
according to 
 (9.64)
For any vector , note that
 (9.65)
The components on the right-hand-side of this equation are components of the cross prod-
uct 
. Stated in direct notation, 
 (9.66)
Similarly,
 (9.67)
Aik
εikjaj
–
=
A˜˜
ε
˜˜˜
a˜
•
–
≡
A˜˜
a˜
x˜
a˜
A˜˜
A˜˜
a˜
Ω
˜˜
<a>
A˜˜
a˜
Ω
˜˜
<a>
ε
˜˜˜
a˜
•
–
≡
Ωij
<a>
εijkak
–
=
Ωij
<a>
εikjak
=
k
i=j
a˜
Ω
˜˜
<a>
[
]
0
a3
–
a2
a3
0
a
– 1
a
– 2 a1
0
=
x˜
0
a3
–
a2
a3
0
a
– 1
a
– 2 a1
0
x1
x2
x3
a2x3
a3x2
–
a3x1
a1x3
–
a1x2
a2x1
–
=
a˜
x˜
×
a˜
x˜
×
Ω
˜˜
<a>
x˜
•
=
x˜
a˜
×
x˜
Ω
˜˜
<a>
•
=

September 4, 2003 5:24 pm
Tensor analysis primitives
133
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
These results show that axial tensors can be used to convert a cross product into a dot
product between a tensor and a vector. The axial tensor associated with a vector can be
regarded as simply an alternative way to represent a vector, and this formulation is conve-
nient in any expression involving cross products.
Glide plane expressions. The mathematical description of any problem that deals
with material shearing on a plane frequently ends up involving dyadic expressions of the
form 
. We have not yet defined what a dyad or a dyadic means. For now, regard
this particular dyadic as a special skew symmetric tensor (the alternating tensor), and its
associated axial vector is the cross product between  and . That is,
, 
 (9.68)
where, for a right-handed orthonormal basis, 
 (the permutation symbol). We
placed this result here because of its intimate connection with cross products. Expressions
like this show up frequently in single crystal plasticity theory.
Axial vectors
Given any tensor 
, the associated axial vector can be constructed by
 (9.69)
In component form, this notation means
 (9.70)
Expanding out the summations over  and  shows that
 (9.71)
 (9.72)
 (9.73)
Note that
 (9.74)
In other words, the axial vector is determined entirely from the skew-symmetric part of a
tensor. The symmetric part has no influence.
b˜c˜
c˜b˜
–
b˜
c˜
ξ
˜˜˜
b˜
c˜
×
(
)
•
b˜c˜
c˜b˜
–
=
ξijk
εijk
=
B˜˜
ω
˜
<B>
1
2-- ε
˜˜˜
:B˜˜
–
=
ωk
<B>
1
2--εkijBij
–
=
i
j
ω1
<B>
1
2-- B32
B23
–
(
)
=
ω2
<B>
1
2-- B13
B31
–
(
)
=
ω3
<B>
1
2-- B21
B12
–
(
)
=
ω
˜
<B>
ω
˜
<skwB>
=

September 4, 2003 5:24 pm
Tensor analysis primitives
134
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Cofactor tensor associated with a vector
The cofactor operation is really meant to be applied to an even-order tensor (second-
order, fourth-order, etc.). Consider, however, the most general form for a skew-symmetric
tensor 
. To be skew-symmetric, this tensor must satisfy
,
 (9.75)
from which it follows that 
, 
, 
, and
. As will be discussed later, it is common practice to associate a vector 
with a skew-symmetric tensor, defined such that 
, 
, and
. In terms of this vector, the most general form for the 
 matrix of a skew-
symmetric tensor is
 (9.76)
Taking the cofactor of this tensor gives
 (9.77)
Referring to Eq. (7.38), we recognize that this matrix is simply the matrix associated with
the dyad 
. Therefore
If 
 is the axial vector associated with a skew-symmetric tensor 
, then 
 (9.78)
In many computational analysis codes, skew-symmetric tensors are not saved as 
matrices (doing so would be a waste of valuable memory). Instead, when a subroutine
requests a skew-symmetric tensor from the host code, it will instead be given the three
components of the axial vector 
. If that routine needs to compute the cofactor of the full
skew-symmetric tensor 
, then it must recognize that all it needs to do is construct the
dyad 
.
Cramer’s rule for the inverse
The inverse may be expressed in terms of the cofactor tensor as
 (9.79)
Cramer’s rule is very inefficient for computing the inverse of a large matrix, but it is per-
fectly adequate for the 
 matrices associated with second-order tensors in 3D space.
W˜˜
Wji
Wij
–
=
W11
W22
W33
=
=
W12
W21
–
=
W23
W32
–
=
W31
W13
–
=
w˜
w1
W23
–
=
w2
W31
–
=
w3
W12
–
=
3
3
×
W˜˜
[
]
0
w3
–
w2
w3
0
w1
–
w2
–
w1
0
=
W˜˜
C
[
]
w1
2
w1w2
w1w3
w2w1
w2
2
w2w3
w3w1
w3w2
w3
2
=
w˜ w˜
w˜
W˜˜
W˜˜
C
w˜ w˜
=
3
3
×
w˜
W˜˜
w˜ w˜
G˜˜
1
–
G˜˜
CT
det G˜˜
(
)
----------------
=
3
3
×

September 4, 2003 5:24 pm
Tensor analysis primitives
135
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Inverse of a rank-1 modification (Sherman-Morrison formula)
In general, there is no direct notation formula for the inverse of the sum of two matri-
ces. But there is a simple formula for any rank-1 modification of a tensor. Specifically, if
, 
(or, in indicial form, 
)
 (9.80)
then (as readily verified by back substitution)
 (9.81)
One disadvantage of the Sherman-Morrison formula as cited above is that it presumes
that the tensor 
 is invertible. However, 
 does not necessarily need to be invertible itself
in order for the expression 
 to be invertible. For example, it might be that
, which is not invertible. But if 
, then
 will equal 
, which is invertible. To generalize the Sherman-Mor-
rison formula to be able to handle cases like this, what we really need are separate formu-
las for the determinant and cofactor of 
. These formulas are
 (9.82)
and
 (9.83)
Here 
 is a second-order tensor with 
 components 
. Rather
than using this formula directly, it is easiest to evaluate this tensor by
, 
 (9.84)
where 
 and 
 are the axial tensors associated with the vectors  and 
 respec-
tively (see page __).
Derivative of a determinant
Let  denote the determinant of a tensor 
:
 (9.85)
Recall that the determinant of a tensor can be obtained by simply taking the determinant
of the matrix of components associated with that tensor:
 (9.86)
B˜˜
A˜˜
v˜w˜
+
=
Bij
Aij
viwj
+
=
B˜˜
1
–
A˜˜
1
–
A˜˜
1
–
v˜w˜
A˜˜
1
–
•
•
1
w˜
A˜˜
1
–
v˜
•
•
+
------------------------------------
–
=
Bij
1
–
Aij
1
–
Aim
1
– vmwnAnj
1
–
1
wpApq
1
– vq
–
-------------------------------
–
=






A˜˜
A˜˜
A˜˜
v˜w˜
+
A˜˜
[
]
DIAG 0 1 1
, ,
[
]
=
v˜
{ }
w˜
{
}
1 0 0
, ,
{
}
=
=
A˜˜
v˜w˜
+
[
]
DIAG 1 1 1
, ,
[
]
A˜˜
v˜w˜
+
det A˜˜
v˜w˜
+
[
]
det A˜˜
(
)
A˜˜
C:v˜w˜
+
=
B˜˜
C
A˜˜
C
v˜
A˜˜
w˜
×
×
–
=
v˜
A˜˜
w˜
×
×
ij
εimnεjrsvmAnrws
v˜
A˜˜
w˜
×
×
Ω
˜˜
<v>
A˜˜
Ω
˜˜
<w>
•
•
=
Ω
˜˜
<v>
Ω
˜˜
<w>
v˜
w˜
J
F˜˜
J
detF˜˜
≡
J
det
F11 F12 F13
F21 F22 F23
F31 F32 F33
≡

September 4, 2003 5:24 pm
Tensor analysis primitives
136
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
From this we see that 
. In other words, 
 is a function of the nine
components of 
. Now we seek to know the partial derivative of  with respect to any
one of the components 
 holding the other components fixed. Recall from simple matrix
analysis that the determinant in Eq. (9.86) can be computed using cofactors:
 (no implied sum on )
 (9.87)
Now recall that the cofactor 
 is the signed determinate of the submatrix obtained by
striking out the 
 row and 
 column of 
. Consequently, this striking out of rows and
columns at the 
 position implies that 
 does not depend on the value of 
, and the
derivative of Eq. (9.87) gives simply
 (9.88)
In direct notation, this result is written as, 
or, if 
 is invertible,
 (9.89)
Exploiting operator invariance with “preferred” bases
GOAL: 
An important technique in tensor analysis uses invariance of tensor operations to jus-
tify performing proofs in the context of a cleverly chosen or otherwise convenient basis.
Whenever working with a symmetric matrix, for example, a particularly convenient basis
is the principal basis for which the component matrix becomes diagonal. If 
 is symmet-
ric, then
 with respect to the principal basis for 
 (9.90)
Other tensors will not generate diagonal matrices with respect to the principal basis for 
.
If, however, the matrix for a different tensor happens to be diagonal with respect to the
principal basis for 
, then you can immediately assert that the eigenvectors for that matrix
coincide with those for 
. Knowing that composition (i.e. the dot product) between two
tensors corresponds to matrix multiplication and knowing that composition is an invariant
operation, you can perform matrix multiplications within any convenient basis, and then
recast the result back to invariant (structured/direct/Gibbs) notation when you are done,
and, as long as all of the operations that you performed in the matrix context corre-
sponded to tensor invariant operations, you will be justified that the final structure nota-
tion result will be correct when cast in terms of some different basis. 
J
J F11 … F33
,
,
(
)
=
J
F˜˜
J
Fij
J
FijFij
C
j
1
=
3
∑
=
i
Fij
C
ith
jth
F
[ ]
ij
Fij
C
Fij
∂J
∂Fij
---------
Fij
C
=
dJ
dF˜˜
-------
F˜˜
C
=
F˜˜
dJ
dF˜˜
-------
JF˜˜
T
–
=
A˜˜
A˜˜
[
]
a1 0
0
0 a2 0
0
0 a3
=
A˜˜
A˜˜
A˜˜
A˜˜

September 4, 2003 5:24 pm
Tensor analysis primitives
137
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
A sometimes useful generalization of Eq. (9.90) that applies to a non-symmetric tensor
 follows from our knowledge that any tensor can be decomposed uniquely into the sum
of a symmetric tensor 
 plus a skew-symmetric tensor 
. 
 (9.91)
Being symmetric, we know there exists a basis (the principal basis for 
) such that the
matrix for 
 is diagonal as in Eq. (9.90). We also know that any skew-symmetric basis
will have a matrix expressible in the form of Eq. (9.76) for any basis. Thus, knowing that
tensor addition, which is an invariant operation, can be cast as matrix addition, we can
assert that there will always exist an orthonormal basis (namely the principal basis for 
)
such that its components for any generally non-symmetric tensor 
 will be of the form
 with respect to the principal basis for 
 (9.92)
Here, the 
 are the eigenvalues of 
 and the 
 are the components of the axial vec-
tor for 
 with respect to this principal basis.
By using this special matrix representation, some proofs become much easier. Sup-
pose, for example, that we wish to find a formula for the invariants of 
 expressed in
terms of scalar invariants of 
 and 
. We know that scalar invariants
can be computed by taking the matrix invariants of the RCS matrix for 
. Being invariant,
we know that the result we obtain using one basis will be identical to the result obtained
using any other basis, so why not use the convenient basis in Eq. (9.92). Taking the trace
of Eq. (9.92) gives
= 
 (9.93)
Recognizing the first three terms to be the second invariant of 
 and recognizing the last
three terms to be the square magnitude of the axial vector associated with 
, and knowing
that both the second invariant and vector magnitudes are invariants, we can now cast this
result in a structured direct notation that applies to any basis (even though we derived in a
special basis):
 (9.94)
Preferred bases are not limited to principal bases. You might, for example, want to set up a
basis that is aligned with a structural component of interest. Your vectors and tensors
might not have particularly simplified components in this basis, but other reasons might
make the choice nonetheless convenient.
F˜˜
A˜˜
1
2-- F˜˜
F˜˜
T
+
(
)
=
B˜˜
1
2-- F˜˜
F˜˜
T
–
(
)
=
F˜˜
A˜˜
B˜˜
+
=
A˜˜
A˜˜
A˜˜
F˜˜
F˜˜
[
]
a1
b3
–
b2
b3
a2
b1
–
b2
–
b1
a3
=
symF˜˜
ak
symF˜˜
bk
skwF˜˜
F˜˜
A˜˜
symF˜˜
=
B˜˜
skwF˜˜
=
F˜˜
I2 F˜˜
(
)
a2a3
b1
2
a3a1
b2
2
a1a2
b3
2
+
+
+
+
+
=
a2a3
a3a1
a1a2
b12
b22
b32
+
+
+
+
+
A˜˜
B˜˜
I2 F˜˜
(
)
I2 A˜˜
(
)
b˜
b˜
•
+
=

September 4, 2003 5:24 pm
Projectors in tensor notation
138
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
10. Projectors in tensor notation
Nonlinear projections do not have a tensor representation
A projection transformation 
 (regardless of whether it is linear or nonlinear) will
have a range space and a family of level sets. Given a vector  in the range space, the
associated level set is the set of all vectors 
 for which 
. In other words, the
level set is the collection of vectors that will all project to the exact same result. Level sets
associated with two different  vectors will not intersect. 
A rank-m projection is one whose range space is m-dimensional, and, for projections
in general N-dimensional space, the level sets will then be 
 dimensional. Nonlinear
projections will have a curvilinear range space and/or at least one curvilinear level set.
Consider, for example, the following nonlinear projec-
tion:
 (10.1)
where 
 is a specified (known) unit vector. The expression
in the brackets is a scalar, so this equation says that 
 is
a scalar times the vector 
.* Thus, the range space is a
straight line in space; the line passes through the origin
because 
. Knowing that the zero vector happens
to belong to the range space, what is the level set associated
with the zero vector? The answer is the set of all 
 for
which 
, or the set of all  for which
 (10.2)
To get a better handle on the geometrical description of this
level set, let’s set up a coordinate system for which 
. Then the component form for
Eq. (10.2) becomes
* Knowing that 
 will be of the form 
 for some scalar 
, you can readily verify that P is 
indeed a projector because 
, or 
.
“Human salvation lies in the hands of 
the creatively maladjusted.”
— Martin Luther King, Jr.
P x˜
( )
y
˜
x˜
P x˜
( )
y
˜
=
y
˜
N
m
–
n˜
P x˜
( )
x˜
n˜
•
(
)
x˜
n˜
•
(
)2
x˜
x˜
•
–
+
[
]n˜
=
n˜
P x˜
( )
n˜
P x˜
( )
αn˜
α
P αn˜
(
)
αn˜
=
P P x˜
( )
(
)
P x˜
( )
=
P 0
˜
( )
0
˜
=
x˜
P x˜
( )
0
˜
=
x˜
x˜
n˜
•
x˜
x˜
•
x˜
n˜
•
(
)2
–
=
e˜3
n˜
=

September 4, 2003 5:24 pm
Projectors in tensor notation
139
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (10.3)
This is the equation for a paraboloid centered about 
. The level set associated with a dif-
ferent member of the range space, 
, will be a paraboloid of the same size and shape,
but passing through 
. The inset figure shows the level sets for the vectors 
, 
, and
 in the range space. All points on a given paraboloid will project to the same point in
the range space.
For this example, the range space is 1-dimensional (the line parallel to ) and the level
sets are each 2-dimensional (paraboloids). The sum of these dimensions equals the dimen-
sion of space (three). For this example, the range space was linear, but the level sets were
curvilinear.
The signum function is a different projection operator for which the range space is
two-dimensional (the curvilinear surface of a unit sphere) and the level sets are 1-dimen-
sional (lines emanating radially from the origin). For projections in three dimensions, the
dimensions of the range and level set spaces will always sum to three. For nonlinear pro-
jections, either the range and/or the level set space will be curvilinear. 
Recall that tensors characterize only linear operators. Consequently, a nonlinear pro-
jection 
 cannot be fully characterized by a tensor that is independent of .
Linear orthogonal projectors expressed in terms of dyads
For any linear vector-to-vector function 
, recall that linearity guarantees that
. Hence, the zero vector must be a member of the range space for any linear
function. Moreover, the range space for any linear operator must be a linear manifold. A
linear manifold is a set of vectors for which any linear combination of vectors in that man-
ifold will result in a vector that is also in the manifold. The surface of the unit sphere (i.e.,
the set of all unit vectors) is an example of a 2D space that is not a linear manifold because
a linear combination of unit vectors is not itself generally a unit vector. In ordinary (New-
tonian) 3D space, a linear manifold is typically a line or a plane that passes through the
origin. The entirety of this 3D space is also be a (degenerate) linear manifold because any
linear combination of 3D vectors is itself a 3D vector. The zero vector is a degenerate
zero-dimensional linear manifold because any linear combination of zero vectors is itself
the zero vector. For any linear function 
, recall that the Representation Theorem of
Eq. (9.7) guarantees the existence of a tensor 
 that is independent of 
 for which
. Our goal now is to apply this fact to the special case of linear projection
operators.
Linear projections will always have both linear range spaces and affine level sets. In
three dimensions, an affine space is simply line or a plane that possibly does not pass
through the origin. The range space for a rank-1 linear projection will be a 1D straight line
passing through the origin and the level sets will be families of parallel 2D planes that
intersect the line. The range space for a rank-2 linear projection will be a plane passing
through the origin and the level sets will be a family of parallel straight lines that intersect
the plane (think of these level sets as the “light rays” that cast the shadow of a vector onto
x3
x1
2
x2
2
+
=
n˜
αn˜
αn˜
0
˜
n˜
2n˜
n˜
P x˜
( )
x˜
f x˜
( )
f 0
˜
( )
0
˜
=
f x˜
( )
F˜˜
x˜
f x˜
( )
F˜˜
x˜
•
=

September 4, 2003 5:24 pm
Projectors in tensor notation
140
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
the plane). For oblique linear projections, the range space will not be perpendicular to the
level sets. The level set dimension will be complementary to that of the range space (if the
range is a line, the level set will be a plane, and vice versa). Except for degenerate projec-
tions (the zero or identity operator), the level sets will be families of parallel lines or paral-
lel planes; of these, exactly one will pass through the origin and will therefore be a linear
manifold. This special level set will be called the null space for the projection operator.
Because the null space is the level set corresponding to the zero vector, it must be the set
of all vectors  for which 
. 
A linear projection function must, according to Eq. (9.7) submit to a tensorial repre-
sentation. The tensor will be non-symmetric for oblique projections and symmetric for
orthogonal (nearest point) projections. In Fig. 6.3, the range space is the plane whose nor-
mal is  and the projection direction is in the direction of . For an orthogonal projection,
 is proportional to 
 and, referring to Eq. (6.12), the projection transformation can be
written
 (10.4)
Applying the definition of a dyad, this can be written
 (10.5)
where
 (10.6)
This is the projection tensor (or projector) associated with the linear projection operator
in Eq. (10.4). The operator 
 is a rank-2 projection because its range space is two
dimensional, and we show below that the matrix rank of 
 is also two. The complemen-
tary rank-1 orthogonal null projection of Eq. (6.65) can now be written
,
 (10.7)
where
 (10.8)
Being a rank-1 projection, the matrix rank of 
 is also 1. If we set up a basis for which
, then [recalling Eq. (9.24)],
⇔ 
 
w.r.t. 
 (10.9)
⇔
w.r.t. 
 (10.10)
x˜
P x˜
( )
0
˜
=
b˜
a˜
a˜
b˜
Q x˜
( )
x˜
n˜ n˜
x˜
•
(
)
–
=
Q x˜
( )
Q
˜˜
x˜
•
=
Q
˜˜
I˜˜
n˜ n˜
–
=
Q x˜
( )
Q
˜˜
[
]
P x˜
( )
P˜˜
x˜
•
=
P˜˜
I˜˜
Q
˜˜
–
n˜ n˜
=
=
P˜˜
[ ]
e˜3
n˜
=
Q
˜˜
e˜1e˜1
e˜2e˜2
+
=
Q
˜˜
[
]
1 0 0
0 1 0
0 0 0
=
e˜3=n˜
P˜˜
e˜3e˜3
=
P˜˜
[ ]
0 0 0
0 0 0
0 0 1
=
e˜3=n˜

September 4, 2003 5:24 pm
Projectors in tensor notation
141
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
When expressed in the preferred (aligned) basis, each projector is like “a piece of the iden-
tity tensor.” This makes a lot of sense. If a vector  is already in the range space for a pro-
jector 
, then 
, so the projector is the identity operator within the range space.
If, on the other hand, a vector  is in the null space for a projector 
, then 
.
Just one esoteric application of projectors
GOAL: Give an illustration of a physical problem whose governing equations are improved 
through the use of projectors.
Suppose, that it is known that most of the vectors and tensors of interest in a physical
problem have some intimate symmetry connection to a plane of normal 
. Then it makes
sense to set up a basis that is aligned with this plane in order to search for simplifications
in the equations governing the phenomenon. This is done, for example, when shock phys-
icists state that the jump in the “shear” components of the deformation gradient tensor
must be zero, and they phrase this requirement mathematically by stating that, with
respect to a basis having the 3-direction parallel to the shock normal 
, the jump in the
deformation gradient tensor components must satisfy
, where i ranges from 1 to 3, and α ranges from 1 to 2
 (10.11)
Where the double brackets denote the jump (value behind the shock minus value ahead;
i.e., 
). Since the index 
 is allowed to range only from 1 to
2, the above equation is stating that
, where 
 (10.12)
or, simply,
 (10.13)
This direct notation form of the same result is far more useful because (1) it does not
require setting up a basis aligned with the shock front, (2) it permits taking time rates that
allow the orientation of the shock front itself to changing with time and/or space, and (3) it
lends itself nicely to extended, more complicated, analysis of the jump across intersecting
shock fronts.
IMPORTANT: Finding a projection to a desired target space
Sometimes the projection function 
 is not known in advance. Instead, only the
desired range space is known. Referring to Eq. (10.9a), note that 
 is merely the sum of
dyads of an orthonormal basis for the range space. In general, if a range space is known,
all one has to do is obtain an orthonormal basis for the range space and sum the diagonal
basis dyads to obtain the projector. This concept is fairly trivial in ordinary 3D space, but
it becomes more subtle and extremely useful in advanced materials modeling, which deal
with nine- or six-dimensional vector spaces (spaces of class 
 or 
). Keep in mind that
x˜
P˜˜
P˜˜
x˜
•
x˜
=
x˜
P˜˜
P˜˜
x˜
•
0
˜
=
n˜
n˜
Fiα
[
]
[
]
0
=
   
(
)
[
]
[
]
  
( )behind
  
( )ahead
–
≡
α
F˜˜
[
]
[
]
Q
˜˜
•
0
˜˜
=
Q
˜˜
I˜˜
n˜ n˜
–
≡
F˜˜
[
]
[
]
F˜˜
[
]
[
]
n˜ n˜
•
=
P
P˜˜
V9
n
V6
n

September 4, 2003 5:24 pm
Projectors in tensor notation
142
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 is also a projector. Its associated range space in this example is simply the 3-axis. The
above statement also applies to constructing 
. In summary, if you have a collection of
vectors 
, and you wish to construct the orthogonal (nearest point, high noon)
projector to the space or subspace spanned by them, then you must first use Gram-Schmidt
orthogonalization to generate an orthonormal basis 
 where  ranges from 1 to the
dimension of the space. Then the associated projector is
 (10.14)
If, for example, you seek the projector to the one-dimensional space spanned by a single
vector , then the projector to the line parallel to  would be
,
 (10.15)
where we have inserted the dyadic multiplication symbol for clarity. If you have two vec-
tors,  and , that are already orthogonal, but not necessarily normalized, then the projec-
tor to the plane containing 
 and  will be
,
 (10.16)
As discussed in great length on page 237, a subset of vector space is called a subspace
if every linear combination of members of the set is itself in that set. For vectors in 3D,
subspaces are boring (either lines, planes, or the space itself). However, subspaces in
higher dimensions are rich with information. Later on, for example, we will show that
engineering second-order tensors are themselves nine-dimensional vectors. The set of all
isotropic tensors is a subspace because any linear combination of isotropic tensors is itself
isotropic. Therefore, there must exist a fourth-order projection tensor that will transform
any tensor 
 into its isotropic part. Later on, we will show that any isotropic tensor (in
3D) must be expressible in the form of a scalar multiplied by the identity tensor . There-
fore, the identity tensor itself forms a basis for the set of all isotropic tensors. In analogy to
Eq. (10.15), the associated fourth-order projection operator is given by
 (10.17)
where “:” denotes the inner product for second-order tensors, defined later. The 
 com-
ponents of this projector turn out to be 
. The complementary projector is an opera-
tor that returns the part of a tensor that is “perpendicular” to its isotropic part — in other
words, it gives the deviatoric part.
For every subspace, a corresponding projector can and should be constructed so that
the projection theorem can be invoked. The more complicated and higher dimensional the
space, the more useful this concept becomes.
Q
˜˜
Q
˜˜
v˜1 v˜2 …
,
,
{
}
n˜ k
{
}
k
P˜˜
n˜ kn˜ k
k∑
=
v˜
v˜
P˜˜
v˜
v˜
⊗
v˜
v˜
•
------------
=
u˜
v˜
u˜
v˜
P˜˜
u˜
u˜
⊗
u˜
u˜
•
--------------
v˜
v˜
⊗
v˜
v˜
•
------------
+
=
T˜˜
I˜˜
P˜˜˜˜
I˜˜
I˜˜
⊗
I˜˜
:I˜˜
------------
=
ijkl
1
3--δijδkl

September 4, 2003 5:24 pm
Projectors in tensor notation
143
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Properties of complementary projection tensors
Consider a projection transformation 
 and its complement 
 as defined in
Eq. (6.66). If the function 
 is linear, then so is 
, and they therefore have associated ten-
sors 
 and 
. For linear projectors, Eqs. (6.67) may be written
 (10.18)
For example, the projection tensor associated with Eq. (6.66) is
 (10.19)
or, using the “no-symbol” dyadic notation,
 (10.20)
The complementary projector is
 (10.21)
The general properties listed in Eq. (10.18) can be readily verified to hold for this particu-
lar example.
Self-adjoint (orthogonal) projectors
A projection operator 
 is “self-adjoint” if and only if 
 for all
vectors  and . If the projection is linear, this means that its associated tensor 
 must be
symmetric:
A projection 
 is self-adjoint (orthogonal) if and only if 
.
Therefore, 
 also holds.
 (10.22)
For example, we see that the projector in Eq. (10.21) is self adjoint if and only if
. Recalling Eq. (7.31), this is possible only if 
, in which case the projec-
tion reduces to the orthogonal projection of Eq. (6.12) in which the unit vector 
 is just
.
A linear self-adjoint projector transforms its argument to the nearest point on the range
space. This means that the null space is orthogonal to the range space. For ordinary projec-
tions in 3D-space, this means that the vector is projected orthogonally, not obliquely.
When Eq. (10.22) holds, the last property listed in Eq. (10.18) becomes
P x˜
( )
Q x˜
( )
P
Q
Π
˜˜
Θ
˜˜
Π
˜˜
Π
˜˜
•
Π
˜˜
=
Θ
˜˜
Θ
˜˜
•
Θ
˜˜
=
Π
˜˜
Θ
˜˜
•
Θ
˜˜
Π
˜˜
•
0
˜˜
=
=
Π
˜˜
Θ
˜˜
+
I˜˜
=
x˜
P
x˜
Q
•
x˜
Π
˜˜
T
Q
˜˜
x˜
•
•
•
=
Θ
˜˜
I˜˜
a˜
b˜
⊗
a˜
b˜
•
-------------
–
=
Θ
˜˜
I˜˜
a˜b˜
a˜
b˜
•
-----------
–
=
Π
˜˜
a˜b˜
a˜
b˜
•
-----------
=
P x˜
( )
y
˜
P x˜
( )
•
x˜
P y
˜
( )
•
=
x˜
y
˜
P˜˜
P
P˜˜
T
P˜˜
=
Q
˜˜
T
Q
˜˜
=
a˜b˜
b˜a˜
=
b˜
αa˜
=
n˜
a˜
a˜
⁄

September 4, 2003 5:24 pm
Projectors in tensor notation
144
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (10.23)
Suppose that two distinct vectors  and  are decomposed via the projection theorem as
 (10.24)
Then their inner product is given by
 (10.25)
If the projection is self-adjoint, then any vector in Q-space must be perpendicular to any
vector in P-space. Thus, the middle two inner products in the above equation are both
zero, and we obtain
 (10.26)
Equivalently,
 (10.27)
which could have been deduced more quickly by simply dotting the relationship
 cited in Eq. (10.18) from the left by  and from the right by .
Non-self-adjoint (oblique) projectors
GOAL: Call out some differences between orthogonal and oblique projectors
WARNING TO THE READER: I am in the middle of a
notation change so that different symbols will be used
for the projectors when they are non-self-adjoint. In this
section, the tensors 
 and 
 mean the same thing as 
and 
. This notation change has not yet propagated
everywhere in this document, so you will have to decide
from context whether or not a projector is self-adjoint.
Even for oblique projections, the relationship 
 still holds and therefore 
 (10.28)
As was the case for self-adjoint projectors, we can still define parts of a vector
 and 
 (10.29)
For oblique projections, the projectors are not symmetric. We can define dual projections
by
 and 
 (10.30)
Similar breakdown of the vector  can be performed, and it turns out that
 (10.31)
x˜
P
x˜
Q
•
0
˜
=
x˜
y
˜
x˜
x˜
P
x˜
Q
+
=
y
˜
y
˜
P
y
˜
Q
+
=
x˜
y
˜
•
x˜
P
y
˜
P
•
x˜
Q
y
˜
P
•
x˜
P
y
˜
Q
•
x˜
Q
y
˜
Q
•
+
+
+
=
x˜
y
˜
•
x˜
P
y
˜
P
•
x˜
Q
y
˜
Q
•
+
=
x˜
y
˜
•
x˜
P˜˜
y
˜
•
•
x˜
Q
˜˜
y
˜
•
•
+
=
P˜˜
Q
˜˜
+
I˜˜
=
x˜
y
˜
Π
˜˜
Θ
˜˜
P˜˜
Q
˜˜
Π
˜˜
Θ
˜˜
+
I˜˜
=
x˜
y
˜
•
x˜
Π
˜˜
y
˜
•
•
x˜
Θ
˜˜
y
˜
•
•
+
=
x˜
P
( )
Π
˜˜
x˜
•
=
x˜
Q
(
)
Θ
˜˜
x˜
•
=
x˜ P
( )
Π
˜˜
T
x˜
•
=
x˜ Q
(
)
Θ
˜˜
T
x˜
•
=
y
˜
x˜
y
˜
•
x˜ P
( )
y
˜
P
( )
•
x˜ Q
(
)
y
˜
Q
(
)
•
+
=

September 4, 2003 5:24 pm
Projectors in tensor notation
145
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note the distinction between this result and Eq. (10.26).
Generalized complementary projectors
Given a projector 
, its complement is also a projector defined by 
. Sup-
pose that the range space associated with one of these projectors has a dimension greater
than one. Then that projector may always be further decomposed into more projectors, all
of which may be made complementary to each other. For second-order tensors referenced
to ordinary 3D space, there can be up to three projectors 
, 
, and 
. For second-
order tensors referenced to 
-dimensional space, there can be a total of 
 orthogonal
projections, where 
. These generalized complementary projectors must satisfy
, where  is a free index (no summation)
 if 
 (10.32)
The dimension of the range space for each projector is given by
 (10.33)
If all of the projectors are self-adjoint (i.e., if they are all symmetric) then 
 may
alternatively be computed by
 (10.34)
where the double dot operation is defined such that, for any tensors 
 and 
,
 (see Eq. 3.60). For self-adjoint (symmetric) projectors, the generalization
of Eq. (10.27) is
 (10.35)
For example, the projector 
 Eq. (10.9) represents a projection to the 12 plane. This pro-
jection can be decomposed further into more primitive projectors; namely 
 and 
.
Hence, if desired, we could define a set of three generalized mutually orthogonal comple-
mentary projectors as
⇔ 
 (10.36)
P˜˜
Q
˜˜
I˜˜
P˜˜
–
=
P˜˜ 1
P˜˜ 2
P˜˜ 3
N
M
M
N
≤
P˜˜ i
P˜˜ i
•
P˜˜ i
=
i
P˜˜ i
P˜˜ j
•
0
˜˜
=
i
j
≠
P˜˜ k
k
1
=
M
∑
I˜˜
=
dimP˜˜ i
rank P˜˜ i
[
]
trP˜˜ i
=
=
dimP˜˜ i
dimP˜˜ i
P˜˜ i:P˜˜ i
=
A˜˜
B˜˜
A˜˜
:B˜˜
AijBij
=
x˜
y
˜
•
x˜
P˜˜ k
k
1
=
M
∑








y
˜
•
•
=
P˜˜
e˜1e˜1
e˜2e˜2
P˜˜ 1
e˜1e˜1
=
P˜˜
[ ]
1 0 0
0 0 0
0 0 0
=

September 4, 2003 5:24 pm
Projectors in tensor notation
146
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
⇔ 
 (10.37)
⇔
 (10.38)
For this example, Eq. (10.35) becomes simply
= 
= 
,
 (10.39)
which is a comfortingly familiar formula! In the next section, we will define the eigen-
problem and show how each distinct eigenvalue has a corresponding unique eigenprojec-
tor. If a complete set of eigenvectors exist, then they may be combined as sums of dyads to
generate a complementary projector set satisfying the properties of Eq. (10.32). If the
original tensor is symmetric, then its eigentensors are also symmetric.
P˜˜ 2
e˜2e˜2
=
P˜˜ 2
[
]
0 0 0
0 1 0
0 0 0
=
P˜˜ 3
e˜3e˜3
=
P˜˜ 3
[
]
0 0 0
0 0 0
0 0 1
=
x˜
y
˜
•
x˜
e˜1e˜1
y
˜
•
•
x˜
e˜2e˜2
y
˜
•
•
x˜
e˜3e˜3
y
˜
•
•
+
+
x1y1
x2y2
x3y3
+
+

September 4, 2003 5:24 pm
More Tensor primitives
147
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
11. More Tensor primitives
Tensor properties
GOAL: List the properties that a person should look for in a tensor because numerous 
useful theorems exist for tensors with certain properties.
In subsequent sections we will categorize tensors according to whether or not they
have certain properties. For example, a tensor 
 is said to be symmetric if 
. It
is skew-symmetric if 
. It is orthogonal if 
. It is a rotation if
it is orthogonal and has a positive determinant. It is invertible if it has a nonzero determi-
nate. It is a deformation if it has a positive determinant. It is a stretch if it is symmetric
and has all positive eigenvalues. It is a commuter with a second tensor 
 if
. Investigating whether or not a tensor has any of these special properties
is an essential activity because many tensors that occur in physical applications fall into
these categories and therefore lend themselves to numerous special theorems that may
help you in your analyses. These classifications of tensors are so important, in fact, that
Gurtin [24] even gave them the following names:
Lin
= the set of all tensors
Lin+
= the set of all deformation tensors
Sym
= the set of all symmetric tensors
Skw
= the set of all skew-symmetric tensors
Psym
= the set of all stretch tensors
Orth
= the set of all orthogonal tensors
Orth+ = the set of all rotation tensors
Of these, Lin, Sym, and Skw are linear manifolds of dimension 9, 6, and 3, respectively. A
linear manifold is a set for which any linear combination of members of that set will itself
be in the set. For example, a combination of symmetric tensors will itself be symmetric.
Orth is not a linear manifold because a linear combination of orthogonal tensors will not
be itself orthogonal. Incidentally, the dimensions of Lin, Sym, and Skw presume that the
underlying physical space is three-dimensional so that general tensors contain 9 indepen-
dent components, symmetric tensors have 6 independent components, and skew tensors
have 3 independent components. In fact, Sym and Skw are perpendicular subspaces of Lin
(by this we mean that any member of Sym is also a member of Lin, any member of Skw is
also a member of Lin, and any member of Sym will have a zero inner product with any
“If you live to the age of a hundred, you’ve got it
made, because very few people die past the age
of a hundred” 
— George Burns
F˜˜
Fij
Fji
=
Fij
Fji
–
=
FkiFkj
δij
=
G˜˜
F˜˜
G˜˜
•
G˜˜
F˜˜
•
=

September 4, 2003 5:24 pm
More Tensor primitives
148
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
member of Skw). Linear manifolds can be interpreted geometrically as hyperplanes that
pass through the origin. Any linear combination of vectors in a plane through the origin
will itself belong to the plane. For tensors, the term hyperplane is used to emphasize that
the plane is more than three dimensional.
Lin+, Orth, and Orth+ are not linear manifolds, but they are groups under multiplica-
tion. A set of tensors is a group under multiplication if taking the dot product between
two members of the set will result in a tensor that is itself a member of the set. For exam-
ple, the product of two orthogonal tensors will itself be orthogonal. Groups can also be
identified with hyper-geometries. However, because they are not linear manifolds, these
geometries will be curvilinear spaces (in much the same way that the set of all unit vectors
can be described geometrically as being the set of all points on the surface of a unit
sphere). In some cases, a curvilinear tensor space can be assigned a dimension, which is
determined by the nominal dimension of Lin (nine) minus the number of independent
equality constraints that must be satisfied by the components. It can be shown, for exam-
ple, that Orth+ is three dimensional because (being the set of all rotations) any member of
Orth+ can be uniquely defined by specifying an angle of rotation (1 number) and a unit
axis of rotation (two independent numbers, with the third component being constrained to
generate a unit vector). Geometrically, Orth+ can be identified with a portion of a three-
dimensional hypersphere.
Now we are going to proceed with giving more detailed discussions of tensor proper-
ties and their associated specialized theorems.
Orthogonal (unitary*) tensors
Consider a linear transformation 
 in which the transformed vector always has the
same length as the original vector. In other words,
 (11.1)
Since the transformation is linear, the Representation Theorem of Eq. (9.7) says there
must exist a second-order tensor 
 such that 
,
 (11.2)
so Eq. (15.37) becomes
 (11.3)
or
 (11.4)
* Typically, when dealing with real tensors, you will want to use the term “orthogonal.” The word 
“unitary” is normally reserved for tensors or matrices that might have complex components. A 
matrix 
 is unitary if 
, where “H” is the hermitian (transpose of the conjugate).
Q
[
]
Q
[
] 1
–
Q
[
]H
=
f x˜
( )
f x˜
( )
f x˜
( )
•
x˜
x˜
•
=
Q
˜˜
f x˜
( )
Q
˜˜
x˜
•
=
Q
˜˜
x˜
•
(
)
Q
˜˜
x˜
•
(
)
•
x˜
x˜
•
=
x˜
Q
˜˜
T
Q
˜˜
•
I˜˜
–
(
)
x˜
•
•
0
=

September 4, 2003 5:24 pm
More Tensor primitives
149
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This must hold for all  and (because the tensor in parentheses is symmetric), the above
equation therefore implies that
 (11.5)
Thus, the transpose of the tensor 
 must equal its inverse. A tensor is said to be orthog-
onal if its inverse is the same thing as its transpose:
 
⇔
 
 is orthogonal
 (11.6)
Equivalently,
 (11.7)
By taking the determinant of this equation, we see that
 (11.8)
The term “proper” is used if 
 and “improper” if 
. These terms are
unfortunate since they imply there is something unsavory about an orthogonal tensor
whose determinant is negative. 
A proper orthogonal tensor corresponds to a rigid rotation about some axis, defined by
a unit vector , and, if we set up a basis in which the 3-direction is aligned with the axis of
rotation, then [7]
 with respect to basis having 
.
 (11.9)
Here, 
 is the angle of rotation. This expression may be written
with respect to basis where 
.
 (11.10)
Now we note that
 
and
 
,
 and 
with respect to basis having 
.
 (11.11)
where the tensor 
 is defined by 
. Thus, we may write a direct notation
expression for any rotation as
x˜
Q
˜˜
T
Q
˜˜
•
I˜˜
–
0˜˜
=
Q
˜˜
Q
˜˜
1
–
Q
˜˜
T
=
Q
˜˜
Q
˜˜
T
Q
˜˜
•
Q
˜˜
Q
˜˜
T
•
I˜˜
=
=
detQ
˜˜
(
)2
1
=
detQ
˜˜
+1
=
detQ
˜˜
1
–
=
a˜
Q
˜˜
[
]
α
cos
α
sin
–
0
α
sin
α
cos
0
0
0
1
=
e˜3
a˜
=
α
Q
˜˜
[
]
α
cos
1 0 0
0 1 0
0 0 0
0 0 0
0 0 0
0 0 1
α
0
1
–
0
1 0 0
0 0 0
sin
+
+
=
e˜3
a˜
=
I˜˜
a˜a˜
–
[
]
1 0 0
0 1 0
0 0 0
=
a˜a˜
[
]
0 0 0
0 0 0
0 0 1
=
A˜˜
[
]
0
1
–
0
1 0 0
0 0 0
=
e˜3
a˜
=
A˜˜
Aij
εijkak
–
=

September 4, 2003 5:24 pm
More Tensor primitives
150
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
,
 (11.12)
which is sometimes called the Euler-Rodrigues formula for a rotation.
Many people wrongly claim that an “improper” orthogonal tensor corresponds physi-
cally to a reflection, but it generally represents a reflection in combination with a rotation.
In 3D, there are two types of simple reflections: (1) a reflection about the origin, which
merely reverses the direction of all vectors without affecting their magnitudes, or (2) a
“mirror-like” operation that will transform any vector  to become its mirror image across
some plane defined by a unit normal 
. The first type of reflection fully “inverts” space
(east becomes west, north becomes south, and up becomes down). The second type of
reflection inverts only one direction, leaving the others unchanged (left becomes right, but
up does not turn into down). It’s easy enough to guess the tensor that induces the first type
of reflection; namely, if every vector “turns around”, then the associated tensor must sim-
ply be the negative of the identity tensor, 
. For the second type of reflection, the
part of the vector  in the direction of the “mirror” unit normal 
 is given by 
; the
reflection changes the sign of this part of the vector  to become 
. However, the
projection of the vector onto the plane of the mirror, 
 remains unchanged. Thus,
the reflection is given by the sum of this unchanged part plus the reversed part to give
 (11.13)
The corresponding reflection tensor is
 (11.14)
or
 with respect to basis where 
.
 (11.15)
In 3D, that this “second-type” of reflection can always be regarded as a 
 rotation
about 
 in combination with a “type-one” reflection about the origin:
with respect to basis where 
.
 (11.16)
Note that the last matrix in this equation is identical to the matrix in Eq. (11.9) with the
rotation angle 
 set to 
. This is just one special case of a more general statement.
Namely, in 3D, if 
 is an improper orthogonal tensor, then 
, where 
 is proper
orthogonal.
Q
˜˜
α
cos
I˜˜
a˜a˜
–
(
)
a˜a˜
(
)
αA˜˜
sin
+
+
=
x˜
n˜
Q
˜˜
I˜˜
–
=
x˜
n˜
n˜ n˜
x˜
•
x˜
n˜ n˜
x˜
•
–
x˜
n˜ n˜
x˜
•
–
f x˜
( )
x˜
2 n˜ n˜
x˜
•
(
)
–
=
Q
˜˜
I˜˜
2n˜ n˜
–
=
Q
˜˜
[
]
1 0 0
0 1 0
0 0
1
–
=
e˜3
n˜
=
180°
n˜
Q
˜˜
[
]
1
–
0
0
0
1
–
0
0
0
1
–
1
–
0 0
0
1
–
0
0
0 1
=
e˜3
n˜
=
α
180°
Q
˜˜
Q
˜˜
R˜˜
–
=
R˜˜

September 4, 2003 5:24 pm
More Tensor primitives
151
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Tensor associated with the cross product
Using the permutation symbol, the component formulas for the cross product in a right-
handed orthonormal basis given in Eq. (5.29) can be written compactly as
 (11.17)
Note that the operation, 
 is linear with respect to . Hence, the Representation Theo-
rem of Eq. (9.7) says there must exist a tensor 
 that is independent of  such that
 (11.18)
The 
 component of 
 is
 (11.19)
For Eq. (11.18) to hold, the right hand sides of Eqs. (11.17) and (11.19) must be equal:
 (11.20)
This relationship must hold for all 
. Before we can eliminate 
, however, we must
change the dummy summation subscripts so that the indices on the 
’s are the same on
both sides of the above equation. We have 
 on the left hand side of the equation. Conse-
quently, on the right hand side of the equation, we must change the dummy subscript  to
. Doing that, however, would result in four instances of , which would violate the sum-
mation conventions. Hence, in order to change  to , we must change  to something
else. An easy way to do this is to change  to  and  to . Hence, Eq. (11.20) is equiva-
lent to 
 (11.21)
Now that both ’s have the same index, we may assert that this holds for all 
 and there-
fore
,
 (11.22)
Let’s quickly re-derive this result in an alternative manner by using Eq. (9.18). Specifi-
cally, we know that 
 is the derivative of the 
 component of 
 with respect to 
.
We arbitrarily selected the index symbol  because it is not already being used as an index
anywhere in Eq. (11.17). Applying Eq. (9.18) gives the 
 component of 
:
 (11.23)
In the last step, we have used the fact that neither 
 nor 
 depends on . To simplify
this result, we apply Eq. (9.18) to write 
 so that
 (11.24)
or, applying Eq. (4.43),
 (11.25)
a˜
b˜
×
(
)i
εijkajbk
=
a˜
b˜
×
b˜
A˜˜
b˜
a˜
b˜
×
A˜˜
b˜
•
=
ith
A˜˜
b˜
•
A˜˜
b˜
•
(
)i
Aijbj
=
Aijbj
εijkajbk
=
b˜
b˜ b
bj
k
j
j
k
j
j
k
j
j
k
Aijbj
εikjakbj
=
b
bj
Aij
εikjak
εijkak
–
=
=
Ain
ith
a˜
b˜
×
bn
n
in
A˜˜
Ain
∂a˜
b˜
×
(
)i
∂bn
---------------------
∂εijkajbk
(
)
∂bn
--------------------------
εijkaj
∂bk
∂bn
--------
=
=
=
εijk
aj
b˜
∂bk ∂bn
⁄
δkn
=
Ain
εijkajδkn
=
Ain
εijnaj
=

September 4, 2003 5:24 pm
More Tensor primitives
152
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The index 
 is a free index, so we could change 
 to 
, thereby demonstrating that
Eq. (11.25) equivalent to the earlier result of Eq. (11.22).
Now, we wish to write Eq. (11.22) in direct notation. Noting that 
, Eq.
(11.22) may be written
 (11.26)
In direct notation, this result is written
 (11.27)
In matrix form, the components of 
 are
 (11.28)
which (incidentally) is equivalent to the tensor 
 in Eq. (11.11). Whenever a relationship
of the form in Eq. (11.27) holds, we say that  is the axial vector associated with the skew
symmetric tensor 
.
By the way, observe that
 (11.29)
However, we see from Eq. (11.28) that the tensor 
 has the skew-symmetry property that 
 (11.30)
Therefore, Eq. (11.29) becomes
 (11.31)
Cross-products in left-handed and general bases. The formula in Eq. (11.17)
applies only when the basis is orthonormal and right-handed. We seek here to present the
generalized formula for the cross product that applies to some different (not necessarily
orthogonal or right-handed) basis 
. When using a non-orthogonal or non-
right-handed basis, standard notational conventions alter the summation rules to allow for
two kinds of indices: a superscripted “contravariant” index and a subscripted “covariant”
index and implied summations must always occur on different levels so that, for example,
the basis expansion of the vector  is written
 (11.32)
Since the three vectors, 
 form a basis, we know that the 
 coefficients exist,
and you can refer to Ref. [6] for instructions on how to compute them. That reference also
explains that there is no difference between super- and sub-scripted quantities when the
basis is orthonormal. Hence, in the following equations, the orthonormal right-handed
basis 
 is the same as 
.
n
n
k
εikj
εijk
–
=
Aij
εijkak
–
=
A˜˜
ξ
˜˜˜
a˜
•
–
=
A˜˜
A˜˜
[
]
0
a3
–
a2
a3
0
a1
–
a2
–
a1
0
=
A˜˜
a˜
A˜˜
b˜
a˜
×
a˜
b˜
×
(
)
–
A˜˜
b˜
•
–
b˜
A˜˜
T
•
–
=
=
=
A˜˜
A˜˜
T
A˜˜
–
=
b˜
a˜
×
b˜
A˜˜
•
=
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
a˜
a˜
aig
˜ i
=
g
˜ 1 g
˜ 2 g
˜ 3
,
,
{
}
ai
e˜1 e˜2 e˜3
,
,
{
}
e˜
1 e˜
2 e˜
3
,
,
{
}

September 4, 2003 5:24 pm
More Tensor primitives
153
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
A more general version of the cross-product formula is
 (11.33)
where 
 are components of a third order tensor whose basis expansion with respect to
an orthonormal right-handed basis is
 (11.34)
We have the basis expansion of  with respect to our familiar and comfortable orthonor-
mal right-handed basis, and we can obtain the components of  with respect to the irregu-
lar basis through the following formula
,
where 
 (11.35)
Though not immediately obvious, you can show that 
 can be computed by the triple
scalar product of the base vectors:
 (11.36)
Specializing this formula to an orthonormal but left-handed basis gives
 (11.37)
For an orthonormal basis, there is no difference between 
 and 
. Likewise, 
.
Hence, for an orthonormal left-handed basis, Eq. (11.33) becomes
 (11.38)
Comparing this with Eq. (11.17), it might appear that the cross product changes sign for a
left-handed basis, but it doesn’t. The vector components in Eq. (11.17) are different from
those in Eq. (11.38) by a sign change. The negative in Eq. (11.38) compensates for this
sign change so that the final resulting vector,
 (11.39)
will be the same regardless of the handedness of the basis. The direct notation formula for
the axial vector in Eq. (11.27) likewise does not change — direct notation formulas apply
for any basis (how you compute the components varies, but the sum of components times
base vectors is invariant). Note that we have denoted the tensor  using a symbol that dif-
fers from the symbol for its right-handed RCS components, 
. This notational choice is
also why we denote the RCS components of the identity tensor  by 
 instead of 
.
Unlike the permutation tensor, the identity tensor components remain equal to 
 even for
a left-handed orthonormal basis, but they are not 
 for a non-orthonormal basis.
a˜
b˜
×
(
)i
ξijkajbk
=
ξijk
ξ
˜˜˜
εijke˜
ie˜
je˜
k
=
ξ
˜˜˜
ξ
˜˜˜
ξijk
ai
  pai
  qai
  rεpqr
=
am
  n
g
˜ m
e˜
n
•
=
ξijk
ξijk
g
˜ i g
˜ j g
˜ k
,
,
[
]
=
ξijk
εijk
–
=
ai
ai
bi
bi
=
a˜
b˜
×
(
)i
εijkajbk
–
=
a˜
b˜
×
a˜
b˜
×
(
)ie˜i
=
ξ
˜˜˜
εijk
I˜˜
δij
Iij
δij
δij

September 4, 2003 5:24 pm
More Tensor primitives
154
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Physical application of axial vectors
The operation of Eq. (11.27) occurs quite frequently in
mechanics. Suppose, for example, that 
 is the vector
from the origin to a point 
 in a rigid body. If the rigid
body rotates about the origin with an angular velocity
vector 
, then the velocity of the point 
 is given by
 (11.40)
Equation (11.18) implies that this relationship may be
written alternatively in terms of an angular velocity ten-
sor 
. Namely,
,
 (11.41)
where
 (11.42)
The usefulness of 
 instead of 
 becomes apparent by considering rotation. Rotation can
be defined in terms of an axis and an angle of rotation, but multiple rotations about differ-
ent axes do not commute (i.e., if you rotate about one axis and then about the other, the
result will not be the same if you switch the order of rotation). Rotation can nevertheless
be shown to be a linear transformation. In other words, given a collection of vectors, you
can rotate them all individually and then take a linear combination of the results or you
can first take the same linear combination of starting vectors and then rotate the result —
either way, the final answer will be the same. Hence, the Representation Theorem of
Eq. (9.7) says there exists a tensor 
 such that rotating an initial vector 
 to obtain a new
vector  can be written
 (11.43)
If the rotation varies in time, we can take time rates of this equation to obtain the velocity,
. Specifically, noting that the initial vector 
 is (obviously) not a function of time,
the rate of Eq. (11.43) gives
 (11.44)
Noting from Eq. (11.43) that 
, Eq. (11.44) may be written
, where 
 (11.45)
It can be shown that a rigid rotation tensor must be orthogonal* and hence
 (11.46)
rotation
ω
˜
r˜
v˜
rigid body
axis
P
r˜
P
ω
˜
P
v˜
ω
˜
r˜
×
=
Ω
˜˜
v˜
Ω
˜˜
r˜
•
=
Ω
˜˜
[
]
0
ω3
–
ω2
ω3
0
ω1
–
ω2
–
ω1
0
=
Ω
˜˜
ω
˜
R˜˜
r˜o
r˜
r˜
R˜˜
r˜o
•
=
v˜
r˜
·
=
r˜o
v˜
R˜˜
·
r˜o
•
=
r˜o
R˜˜
1
–
r˜
•
=
v˜
Ω
˜˜
r˜
•
=
Ω
˜˜
R˜˜
·
R˜˜
1
–
•
≡
R˜˜
1
–
R˜˜
T
=

September 4, 2003 5:24 pm
More Tensor primitives
155
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
It can be shown [7] that this property in turn implies that 
 must be skew symmetric. The
associated axial vector is the angular velocity vector 
.
Symmetric and skew-symmetric tensors
Note that the components in Eq. (11.28) have the following property:
 or, in direct notation, 
 (11.47)
Any tensor with this property is said to be “skew-symmetric.” Here, the superscript “T”
denotes the “transpose”. 
A tensor 
 is “symmetric” if and only if it has the property that
 
or, in direct notation, 
 (11.48)
Let 
 be any second-order tensor, neither symmetric nor skew symmetric in general. The
symmetric part of 
 is defined
 (11.49)
the skew-symmetric (or antisymmetric) part of 
 is defined
 (11.50)
With these definitions, we see that any tensor 
 can be decomposed additively into sym-
metric and skew-symmetric parts:
 (11.51)
Instead of “sym” and “skw,” many authors use superscripts “s” and “a” so that Eq. (11.51)
would be written somewhat more compactly as
 (11.52)
Note that the act of taking the symmetric part of a tensor may be itself regarded as a tensor
function:
 (11.53)
This operation is a projection because 
. In other words, the symmetric
part of a symmetric tensor is just the tensor itself. We can also define a function for taking
the skew-symmetric part of a tensor:
 (11.54)
* For a detailed discussion of orthogonal tensors, including the definition of Euler angles, and how to 
generate a rotation from an axis and angle, see Ref. [7].
Ω
˜˜
ω
˜
Aij
Aji
–
=
A˜˜
A˜˜
T
–
=
A˜˜
Aij
Aji
=
A
AT
=
A˜˜
A˜˜
symA˜˜
1
2-- A˜˜
A˜˜
T
+
(
)
≡
A˜˜
skwA˜˜
1
2-- A˜˜
A˜˜
T
–
(
)
≡
A˜˜
A˜˜
symA˜˜
skwA˜˜
+
=
A˜˜
A˜˜
s
A˜˜
a
+
=
P A˜˜
(
)
1
2-- A˜˜
A˜˜
T
+
(
)
=
P P A˜˜
(
)
(
)
P A˜˜
(
)
=
Q A˜˜
(
)
1
2-- A˜˜
A˜˜
T
–
(
)
=

September 4, 2003 5:24 pm
More Tensor primitives
156
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The functions 
 and 
 have the properties listed in Eqs. (6.67) except that, this time, the
argument of functions is a tensor rather than a vector. Hence, the fact that any tensor can
be split into symmetric and skew-symmetric parts is merely a generalized application of
the projection theorem!
Positive definite tensors
A tensor 
 is positive definite if and only if
 for all vectors 
 (11.55)
This equation can be alternatively written as
 for all vectors ,
 (11.56)
where “:” denotes the tensor inner product, soon to be defined in Eq. (12.1). Noting that
the dyad 
 is a symmetric tensor, we can use the (yet to be presented) result of Eq.
(12.26) to note that 
. Therefore, a tensor 
 is positive definite if and
only if 
 is positive definite. The skew-symmetric part of 
 has no influence on pos-
itive definiteness. Consequently, when assessing definiteness of a tensor, you should
always immediately start working with the symmetric part of that tensor,
 (11.57)
The tensor 
 (and therefore 
) is positive definite if and only if its associated component
matrix is positive definite. This will happen if and only if all three characteristic invari-
ants* of 
 are positive. WARNING: It is possible to construct a tensor 
 that has all pos-
itive invariants, but the tensor is not positive definite. It is imperative to test the invariants
of the symmetric part of 
 to check for definiteness.
Faster way to check for positive definiteness. Recall from Eqs. (3.130) that
the 
 characteristic invariant of 
 is given by the sum of principal 
 minors. It turns
out that computing all of these principal minors is not necessary in order to test for posi-
tive definiteness. All you have to do is test one principal minor of each size, making sure
that, as you progress in size, the smaller principal minors are nested inside each larger
minor. The concept of nesting makes more sense if we explain it starting with the largest
principal minor, which is the determinant of the 
 matrix itself. For the next principal
minor, select any 
 submatrix whose diagonal components are also diagonal compo-
nents of the larger matrix, and verify that the determinant of this 
 submatrix is posi-
tive. Then test the determinant of any 
 submatrix on the diagonal of the 
 matrix
(i.e., check any diagonal component of that matrix). The following sequence of decreasing
sized submatrices are all principal submatrices, but they are not nested:
* See Eqs. (3.130) on page 46.
P
Q
B˜˜
x˜
B˜˜
x˜
•
•
0
>
x˜
B˜˜
:x˜x˜
0
>
x˜
x˜x˜
B˜˜
:x˜x˜
symB˜˜
(
):x˜x˜
=
B˜˜
symB˜˜
B˜˜
A˜˜
symB˜˜
≡
A˜˜
B˜˜
A˜˜
B˜˜
B˜˜
kth
A˜˜
k
k
×
3
3
×
2
2
×
2
2
×
1
1
×
2
2
×

September 4, 2003 5:24 pm
More Tensor primitives
157
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Not nested: 
, 
, 
 (11.58)
These are not nested because the 
 submatrix 
 is not a submatrix of the larger
 matrix. Of course, in practice, now that the meaning of “nesting” is clear, it is wiser
to check the determinants of the submatrices starting with the smallest one first. If, at any
point in this process, you find a negative determinant, then you can stop calculations with
the conclusion that the original matrix is not positive definite.
Using the simplest nested set of principal minors (those that progress in size starting
from the 11 position), the simplest test for positive definiteness of a 
 matrix involves
merely verifying the following
 (11.59)
 (11.60)
 (11.61)
Recalling that you may use any set of nested principal minors, it follows that a positive
definite tensor will always have positive diagonal components, so this is a good thing to
visually check before even looking at the larger determinants. There is nothing, that disal-
lows the off-diagonals from being negative, so long as the principal minors always evalu-
ate to a positive number.
Positive semi-definite
A tensor 
 is positive semi-definite if and only if
 for all vectors 
 (11.62)
This means that the invariants (and nested subminors) will all be positive or zero.
Negative definite and negative semi-definite tensors
A tensor 
 is negative definite if 
 is positive definite. Note that this means that the
odd invariants 
 and 
 must be negative, but the even invariant 
 must be positive. *
* The reason why odd invariants must be negative and even invariants follows from Eq. (3.99) in 
which the scalar multiple needed to check if 
 is positive definite is 
, making 
 in 
Eq. (3.99) equal to 
 if N is odd, but 
 if N is even.
A11 A12 A13
A21 A22 A23
A31 A32 A33
A11 A12
A21 A22
A33
[
]
1
1
×
A33
[
]
2
2
×
3
3
×
A11
0
>
det A11 A12
A21 A22
0
>
det
A11 A12 A13
A21 A22 A23
A31 A32 A33
0
>
B˜˜
x˜
B˜˜
x˜
•
•
0
≥
x˜
C˜˜
C˜˜
–
I1
I3
I2
C˜˜
–
α= 1
–
αN
1
–
+1

September 4, 2003 5:24 pm
More Tensor primitives
158
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
from which it follows that its invariants (or principal subminors) will all be simply non-
negative (i.e., positive or zero). A tensor 
 is negative semi-definite if 
 is positive
semi-definite.
Isotropic and deviatoric tensors
Another operation that looks similar to (but is functionally different from) the sym+skw
operation is one that decomposes a tensor into its deviatoric and isotropic parts. The devi-
atoric part of 
 is denoted variously as 
 or
or
or 
, and it is defined
 (11.63)
Here, 
 is a scalar called the “trace” of 
 defined
 (11.64)
The isotropic part of 
 is denoted 
 or 
, and is defined
 (11.65)
Thus, just as a tensor can be decomposed into symmetric and skew-symmetric parts, it can
also be decomposed into deviatoric and isotropic parts:
 (11.66)
This is also an application of the projection theorem! This equation is analogous to Eq.
(11.52).
C˜˜
C˜˜
–
A˜˜
A˜˜
dev
A˜˜
d
A˜˜
′
devA˜˜
A˜˜
dev
A˜˜
′
A˜˜
1
3--- trA˜˜
(
)I˜˜
–
≡
≡
trA˜˜
A˜˜
trA˜˜
Akk
≡
A11
A22
A33
+
+
=
A˜˜
A˜˜
iso
isoA˜˜
A˜˜
iso
1
3-- trA˜˜
(
)I˜˜
≡
A˜˜
A˜˜
dev
A˜˜
iso
+
=

September 4, 2003 5:24 pm
Tensor operations
159
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
12. Tensor operations
Second-order tensor inner product
The inner product (also called the double dot product) between two second-order
tensors, 
 and 
, is a scalar denoted 
 and defined
 (12.1)
Alternatively, this binary operation can be written
 (12.2)
Beware: the notation 
 is not universally defined the same way by all people. Some
people define the “ ” operator to mean 
 instead of 
. These are both legit-
imate scalar-valued operations, and they give identical results if either 
 or 
 happens to
be symmetric. However, for general (possibly non-symmetric) operands, only the defini-
tion 
 in Eq. (12.1) is an inner-product. The other operation, 
, is well-
defined, but it is not an inner product. As noted in Table 1.1 on page 12, some authors [24]
use the structure 
 to denote the inner product, which seriously conflicts with our
structure 
 which means the tensor composition (an entirely different operation).
Those authors tend to denote tensor composition by 
 (i.e., 
) whereas, in our
notational system the similar-looking structure 
 would denote dyadic tensor multipli-
cation resulting in a fourth-order tensor (with components 
). We shamelessly
believe that, in this case, our notational conventions are superior because they are self-
defining and generalize seamlessly to higher dimensions [see the discussion on page __].
Our definition of 
, in Eq. (12.1) is a summation of every component of 
 multi-
plied by the corresponding component of 
. Consequently, the tensor inner product is
analogous to the ordinary dot product between vectors in ordinary physical space (see Eq.
3.60). This is no coincidence. Applying a mathematician’s definition of a vector
(page 230), the set of all second-order tensors can be shown to be an abstract nine-dimen-
sional vector space. In this space, the tensor inner product serves a role exactly like the
vector dot product in 3D physical space. We can define the magnitude of a tensor and the
“angle” between two tensors in a manner that is completely analogous to the definitions
for ordinary vectors!
An important special case of Eq. (12.1) is the inner product between two dyads:
“Nothing pains some people more than having
to think.” 
— Martin Luther King, Jr.
A˜˜
B˜˜
A˜˜
:B˜˜
A˜˜
:B˜˜
AmnBmn
≡
A˜˜
:B˜˜
tr A˜˜
T
B˜˜
•
(
)
tr A˜˜
B˜˜
T
•
(
)
=
=
A˜˜
:B˜˜
:
AmnBnm
AmnBmn
A˜˜
B˜˜
AmnBmn
AmnBnm
A
B
•
A˜˜
B˜˜
•
AB
AikBkj
A˜˜
B˜˜
AijBkl
A˜˜
:B˜˜
A˜˜
B˜˜

September 4, 2003 5:24 pm
Tensor operations
160
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (12.3)
An even more specialized instance of this formula applies it to the tensor inner product of
basis dyads:
 (12.4)
The double dot product is defined such that it must operate between tensors of at least
second-order. There is no need for parentheses in Eq. (12.3) because 
 would be mean-
ingless — the double dot is understood to “reach out” until it is acting between two tensors
(in this case, 
 and 
). Thus, for example, 
 would be interpreted as the vector 
multiplied by the inner product of 
 with the second-order tensor 
. The indicial expres-
sion of this operation would be 
 (12.5)
Note, for future use, that
 (12.6)
A NON-recommended scalar-valued product
GOAL: Explain why a commonly used alternative scalar-valued product should be avoided.
Note that only one single tensor in Eq. (12.2) has a transpose operation on it. That equa-
tion therefore might appear to have an unsavory asymmetrical quality. A different double-
dot product, which we will here denote by using two horizontal raised dots, is often
defined in the literature as*
 (12.7)
With this definition, the special case of the horizontal double dot of two dyads would be
. The scalar-valued operation in Eq. (12.7) does
have an aesthetically appealing symmetry to its definition, and it is a perfectly legitimate
operation. However, this scalar valued product must never be referred to as an “inner
product.” The operation 
 in Eq. (12.2) is an inner product, but the operation 
 in
Eq. (12.7) is not an inner product. 
We first mentioned our tensor inner product 
 in the context of matrix analysis (see
Eq. 3.60), where it was subsequently shown that the operation could be used to define ten-
sor magnitudes because 
 is always real and never negative. By contrast, the horizon-
tal double-dot product 
 does not satisfy the positivity requirement, so it must never
* The actual notation (structure) used for this operation varies. What’s important here is the operation 
itself, not the notation used for it. It’s not uncommon for writers to define the “ ” and “
” opera-
tors oppositely from our definitions. 
a˜b˜:r˜s˜
ambnrmsn
a˜
r˜
•
(
) b˜
s˜
•
(
)
=
=
e˜ie˜j:e˜ke˜l
e˜i
e˜k
•
(
) e˜j
e˜l
•
(
)
δikδjl
=
=
b˜:r˜
a˜b˜
r˜s˜
a˜b˜c˜:T˜˜
a˜
b˜c˜
T˜˜
aibmcnTmn
u˜
A˜˜
v˜
•
•
A˜˜
:u˜ v˜
=
:
..
A˜˜..B˜˜
AmnBnm
≡
tr A˜˜
B˜˜
•
(
)
=
a˜b˜
(
).. r˜s˜
(
)
aibjrjsi
a˜
s˜
•
(
) b˜
r˜
•
(
)
=
=
A˜˜
:B˜˜
A˜˜..B˜˜
A˜˜
:B˜˜
A˜˜
:A˜˜
A˜˜..B˜˜

September 4, 2003 5:24 pm
Tensor operations
161
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
be referred to as an inner product. Both scalar-valued products, 
 and 
, will give
the same result if either of the operand tensors is symmetric. Hence, the distinction
between them comes when neither of the operands are symmetric. A counterexample
showing that the horizontal double-dot fails positivity is
 (12.8)
For this tensor,
 (12.9)
but
 
(fails positivity test)
 (12.10)
Incidentally, the “ ” operator is also the one that arises naturally in tensor calculus. If
 is some scalar function of the components of 
, then
 (12.11)
If each component of 
 varies with time , then the chain rule can be used to take the time
rate of :
 (12.12)
Letting 
 denote the tensor whose components are 
, this result is written
 (12.13)
The “ ” operator, not “
”, appears naturally in the chain rule; each component of one
tensor is multiplied by the corresponding component of the other tensor.
Fourth-order tensor inner product
The inner product between two fourth-order tensors, 
 and 
, is a scalar denoted
 and defined
 (12.14)
This is a summation of every component of 
 multiplied by the corresponding component
of 
. Consequently, the fourth-order tensor inner product is analogous to the inner prod-
ucts that we have defined for vectors and second-order tensors. Again, this is no coinci-
dence. By applying a mathematician’s definition of a vector, the set of all fourth-order
tensors can be shown to be an abstract 81-dimensional vector space. Although this view is
A˜˜
:B˜˜
A˜˜..B˜˜
A˜˜
[
]
0
1
–
0
1 0 0
0 0 0
=
A˜˜
:A˜˜
2
0
>
=
A˜˜..A˜˜
2
–
0
<
=
:
s
A˜˜
s
s A11 A12 … A33
,
,
,
(
)
=
A˜˜
t
s
ds
dt
-----
∂s
∂A11
-----------dA11
dt
-----------
∂s
∂A12
-----------dA12
dt
-----------
…
∂s
∂A33
-----------dA33
dt
-----------
+
+
+
=
ds
dA˜˜
-------
∂s
∂Aij
---------
ds
dt
-----
ds
dA˜˜
------- :
dA˜˜
dt
-------
=
:
..
X˜˜˜˜
Y˜˜˜˜
X˜˜˜˜
::Y˜˜˜˜
X˜˜˜˜
::Y˜˜˜˜
XijklYijkl
≡
X˜˜˜˜
Y˜˜˜˜

September 4, 2003 5:24 pm
Tensor operations
162
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
occasionally useful in applications, we will usually find that fourth-order tensors are most
conveniently regarded as operations (such as material constitutive laws) that transform
second-order tensors to second-order tensors. Hence, fourth-order tensors may be
regarded as second-order tensors referenced to nine-dimensional tensor space.
Fourth-order Sherman-Morrison formula
When regarding second-order tensors as nine-dimensional vectors, the inner product is the
tensor inner product (i.e., the double-dot product). Many formulas that were derived for
ordinary 3D vectors have generalizations to this higher-dimensional space. For example, a
rank-one modification of a fourth-order tensor is defined by a formula similar in structure
to Eq. (9.80). The fourth-order inverse is given by a formula similar to that in Eq. (9.81).
Namely, 
If
 
 (12.15)
then
 (12.16)
Structurally, this fourth-order formula is identical to the second-order formula except that
the vector inner products (single dot) are replaced with tensor inner products (double dot).
This formula is frequently used in plasticity theory.
B˜˜˜˜
A˜˜˜˜
V˜˜
W˜˜
+
=
Bijkl
Aijkl
VijWkl
+
=
(
)
B˜˜˜˜
1
–
A˜˜˜˜
1
–
A˜˜˜˜
1
– :V˜˜
W˜˜
:A˜˜˜˜
1
–
1
W˜˜
:A˜˜˜˜
1
– :V˜˜
+
---------------------------------
–
=
Bijkl
1
–
Aijkl
1
–
Aijmn
1
–
VmnWrsArskl
1
–
1
WpqApqtu
1
–
Vtu
+
--------------------------------------------
–
=







September 4, 2003 5:24 pm
Tensor operations
163
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Higher-order tensor inner product
Notationally, we have defined all of our inner products such that the number of “dots”
indicates the number of contracted indices. Clearly, this notation is not practical for
higher-order tensors. An alternative notation for an 
-order inner product may be
defined as the order  surrounded by a circle. Thus, for example, 
 means the same thing as 
 (12.17)
Some writers [e.g., Ref. 18*] prefer always using a single raised dot to denote all inner-
products, regardless of the order. These writers demand that meaning of the single-dot
operator must be inferred by the tensorial order of the arguments. The reader is further
expected to infer the tensorial order of the arguments from the context of the discussion
since most writers do not indicate tensor order by the number of under-tildes. These writ-
ers tend to define the multiplication of two tensors written side by side (with no multipli-
cation symbol between them) to be the tensor composition. For example, when they write
 between two tensors that have been identified as second-order, then they mean what
we would write as 
. When they write 
 between two tensors that have been iden-
tified as fourth-order, they mean what we would write as 
. Such notational conven-
tions are undeniably easier to typeset, and they work fine whenever one restricts attention
to the small set of conventional tensor operations normally seen in trivial applications.
However, more exotic advanced tensor operations become difficult to define under this
system. A consistent self-defining system such as the one used in this book is far more
convenient and flexible.
Self-defining notation
Throughout this book, our notation is self-defining in the sense that the meaning of an
expression can always be ascertained by expanding all arguments in basis form, as dis-
cussed on page 128. The following list shows several indicial expressions along with their
direct notation expressions under our notation
* We call attention to this reference not because it is the only example, but because it a continuum 
mechanics textbook that is in common use today and may therefore be familiar to a larger audience. 
This notation draws from older classic references [e.g., 24]. Older should not always be taken to 
mean inferior, but we believe that, in this case, the older tensor notation is needlessly flawed. Our 
notation demands that a different symbol be used for each different inner product for each differ-
ently ordered tensor space, whereas the older style overloads the same symbol to mean different 
inner products — operator overloading can be extremely useful in many situations, but we feel it 
does more harm than good in this case because it precludes self-defining notation.
nth
n
X˜˜˜˜
4 Y˜˜˜˜
X˜˜˜˜
::Y˜˜˜˜
AB
A˜˜
B˜˜
•
UV
U˜˜˜˜
:V˜˜˜˜
UmnpqVmnpq
U˜˜˜˜
::V˜˜˜˜
UijpqVpqkl
U˜˜˜˜
:V˜˜˜˜

September 4, 2003 5:24 pm
Tensor operations
164
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
*
 (12.18)
Writers who use inconsistent non-self-defining notational structures would be hard-
pressed to come up with easily remembered direct notations for all of the above opera-
tions. Their only recourse would be to meekly argue that such operations would never be
needed in real applications anyway. Before we come off sounding too pompous, we
acknowledge that there exist indicial expressions that do not translate elegantly into our
system. For example, the equation
 (12.19)
would have to be written under our notational system as
 (12.20)
where the rather non-intuitive swap operator 
 is defined in Eq. (19.44). Of course, older
notation systems have no commonly recognized direct notation for this operation either.
This particular operation occurs so frequently that we (later) introduce a new “leafing”
operator to denote it by 
 as an alternative to Eq. (12.20). Even when using the
notational scheme that we advocate, writers should always provide indicial expressions to
clarify their notations, especially when the operations are rather unusual. 
The difficulties with direct notation might seem to suggest that perhaps indicial nota-
tion would be the best choice. In some instances, this is true. However, even indicial nota-
tion has its pitfalls, principally in regard to operator precedence. For example, the notation
 (12.21)
is ambiguous. It could mean 
* In this equation, the negative appears because the cross-product is defined such that the summed 
indices on the alternating symbol must be adjacent (making them adjacent involves a negative per-
mutation of 
 to make it 
. 
UijkpVplmn
U˜˜˜˜
V˜˜˜˜
•
UijklVmnpq
U˜˜˜˜
V˜˜˜˜
ApqUpqij
A˜˜
:U˜˜˜˜
AipUpjkl
A˜˜
U˜˜˜˜
•
AijUklmn
A˜˜
U˜˜˜˜
AipεpjqUqklm
A˜˜
U˜˜˜˜
×
–
εpjq
εjpq
–
Aijkle˜ie˜je˜ke˜l
Uikjle˜ie˜je˜ke˜l
=
A˜˜˜˜
X2
3 U˜˜˜˜


=
X2
3
A˜˜˜˜
U˜˜˜˜
L
=
∂f
∂σkk
-----------

September 4, 2003 5:24 pm
Tensor operations
165
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 or 
 (12.22)
The two operations give different results. Furthermore, we have already seen that the
book-keeping needed to satisfy the summation conventions is tedious, error-prone, often
limited to Cartesian components, distracting from general physical interpretations, and (in
some cases) not well-suited to calculus manipulations. Nonetheless, there are certainly
many instances where indicial notation is the most lucid way to go.
Bottom line: in your own work, use the notation you prefer, but in published and pre-
sented work, always employ notation that seems most likely to accomplish the desired
interpretation by an educated reader. Your goal is to convince them of the truth of a scien-
tific principle, not to intimidate, condescend, or baffle them with your (or our) whacked
out notations (that we, of course, regard as brilliant and self-evident <g>).
The magnitude of a tensor or a vector
The magnitude of a second-order tensor 
 is a scalar denoted 
 defined
 (12.23)
This definition has exactly the same form as the more familiar definition of the magni-
tude of a simple vector v:
 (12.24)
Though rarely needed, the magnitude of a fourth-order tensor 
 is a scalar defined 
 (12.25)
A vector is zero if and only if its magnitude is zero. Likewise, a tensor is zero if and only
if its magnitude is zero.
Useful inner product identities
The symmetry and deviator decompositions of tensors are often used in conjunction
with the following identities:
 (12.26)
 (12.27)
Decomposition of the tensors into its symmetric plus skew symmetric parts
(
 and 
) represents an orthogonal projection
decomposition that is completely analogous to Eq. (10.24). Thus, Eq. (12.26) is a specific
application of Eq. (10.26) in which tensors are interpreted in their 
 sense. A similar
statement holds for the decomposition of tensors into deviatoric plus isotropic parts.
∂f
∂trσ
˜˜
(
)
---------------
tr ∂f
∂σ
˜˜
------






A˜˜
A˜˜
A˜˜
A˜˜
:A˜˜
≡
v˜
v˜
v˜
•
≡
X˜˜˜˜
X˜˜˜˜
X˜˜˜˜
::X˜˜˜˜
=
A˜˜
:B˜˜
symA˜˜
:symB˜˜
skwA˜˜
:skwB˜˜
+
=
A˜˜
:B˜˜
devA˜˜
:devB˜˜
isoA˜˜
:isoB˜˜
+
=
A˜˜
symA˜˜
skwA˜˜
+
=
B˜˜
symB˜˜
skwB˜˜
+
=
V9
1

September 4, 2003 5:24 pm
Tensor operations
166
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If 
 happens to be a symmetric tensor (i.e., if 
) then the inner product
between 
 any other tensor 
 will depend only on the symmetric part of 
. Conse-
quently, sometimes researchers will replace 
 by its symmetric part without any loss in
generality — which can save on storage in numerical computations, but is unwise if there
is any chance that 
 will need to be used in any other context.
Incidentally, note that the “trace” operation defined in Eq. (11.64) can be written as an
inner product inner product with the identity tensor:
 (12.28)
Also note that 
, so Eq. (12.27) may be alternatively written
 (12.29)
Distinction between an Nth-order tensor and an Nth-rank 
tensor
Many authors use the term “
-rank tensor” to mean what we would call an “
-order
tensor”. We don’t adopt this practice because the term “rank” has a specific meaning in
matrix analysis that applies equally well for tensor analysis. The “rank” of a second-order
tensor is here defined to equal the rank of the tensor’s Cartesian component matrix (i.e.,
the number of linearly independent rows or columns). That way, for example, when we
speak of rank-1 projectors, we are speaking of second-order tensors that have a matrix
rank of 1. Of course, our practice of saying 
-order tensors has its downside too
because it can cause confusion when discussing tensor polynomials.
When a second-order tensor is regarded as an operation that takes vectors to vectors,
then the “rank” of the second-order tensor is the dimension of the range space. For exam-
ple, if a second-order tensor projects a vector into its part in the direction of some fixed
unit vector, then the result of that tensor operation will always be a vector that is a multiple
of the unit vector. This range space is one-dimensional, so the rank of this second-order
tensor is 1.
Based on well-known matrix theory, we note that a second-order tensor is invertible
only if its rank is 3. We have already used the term rank in connection with projections. A
rank-2 second-order projection is a tensor that projects vectors to a 2-dimensional space.
The rank of the component matrix equals the rank of the projector.
B˜˜
skwB˜˜
0˜˜
=
B˜˜
A˜˜
A˜˜
A˜˜
A˜˜
trA˜˜
I˜˜
:A˜˜
≡
I˜˜
:I˜˜
trI˜˜
3
=
=
A˜˜
:B˜˜
A˜˜
′:B˜˜
′
1
3-- trA˜˜
(
) trB˜˜
(
)
+
=
Nth
Nth
Nth

September 4, 2003 5:24 pm
Tensor operations
167
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Fourth-order oblique tensor projections
Second-order tensors are themselves 9-dimensional abstract vectors of class 
with
“ ” denoting the inner product. Consequently, operations that are defined for ordinary 3D
vectors have analogs for tensors. Recall that Eq. (6.17) gave the formula for the oblique
projection of a vector  onto a plane perpendicular to a given vector . The “light rays”
defining the projection direction were parallel to the vector . The analog of Eq. (6.17) for
tensors is
.
 (12.30)
As for the projection in 3-space, this operation represents a linear oblique projection in
tensor space. The “surface” to which 
 is projected is orthogonal to 
 and the oblique
projection direction is aligned with 
. This projection function appears in the study of
plasticity [8] in which a trial stress state is returned to the yield surface via a projection of
this form.
The fourth-order projection transformation can be readily verified to have the follow-
ing properties:
 for all scalars 
.
 (12.31)
 for all 
 and 
.
 (12.32)
.
 (12.33)
The first two properties simply indicate that the projection operation is linear. The last
property says that projecting a tensor that has already been projected merely gives the ten-
sor back unchanged. 
Finally, the analog of Eqs. (6.34) and (6.35) is the important identity that
 
if and only if 
.
 (12.34)
This identity is used, for example, to prove the validity of radial return algorithms in plas-
ticity theory [8].
Leafing and palming operations
GOAL: Introduce a simple, but obscure, higher-order tensor operation
Consider a deck of cards. If there are an even number of cards, you can split the deck
in half and (in principle) leaf the cards back together in a perfect shuffle. We would call
this a leafing operation. If, for example, there were six cards in the deck initially ordered
sequentially, then, after the leafing operation (perfect shuffle), they would be ordered
142536. If the deck had only four cards, they would leaf into the ordering 1324. 
We will here define a similar operation that applies to any even order tensor. The struc-
ture to indicate application of this leafing operation will be a superscript “L.” Let 
V9
1
:
x˜
b˜
a˜
P X˜˜
(
)
X˜˜
A˜˜
B˜˜
:X˜˜
(
)
A˜˜
:B˜˜
-------------------
–
=
X˜˜
B˜˜
A˜˜
P αX˜˜
(
)
αP X˜˜
(
)
=
α
P X˜˜
Y˜˜
+
(
)
P X˜˜
(
)
P Y˜˜
( )
+
=
X˜˜
Y˜˜
P P X˜˜
(
)
(
)
P X˜˜
(
)
=
P X˜˜
(
)
P Y˜˜
( )
=
X˜˜
Y˜˜
βA˜˜
+
=

September 4, 2003 5:24 pm
Tensor operations
168
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (12.35)
denote a fourth-order tensor. The “leaf” of this tensor will be defined
 (12.36)
Note that the leaf was obtained by a perfect shuffle of the indices on 
. In purely indi-
cial notation, we would write
 (12.37)
Note that shuffling the indices is equivalent to shuffling the dyadic ordering of the base
vectors. In other words, the equation
 (12.38)
is equivalent to Eq. (12.36). Note that leafing a fourth-order tensor is equivalent to simply
swapping the middle two indices.
Derivative of a leafing operation:
 (12.39)
The leaf of a sixth-order tensor with components 
 would be
 (12.40)
Now consider a different (screwy) way to shuffle a deck of cards. First the deck is split
in half, but then the second half is reversed before shuffling. For example, a six-card deck,
originally ordered 123456 would split into halves 123 and 456. After reversing the order
of the second half, the halves would be 123 654, and then shuffling would give 162534.
We will call the analog of this operation on tensor indices a “palming” operation and
denote it with a superscript 
 (i.e., an upside down “L”). Then, for fourth- and sixth-order
tensors, the palming operator would give
 (12.41)
and
 (12.42)
U˜˜˜˜
Uijpqe˜ie˜je˜pe˜q
=
U˜˜˜˜
L
Uipjqe˜ie˜je˜pe˜q
=
Uijpq
Uijpq
L
Uipjq
=
U˜˜˜˜
Uijpqe˜ie˜pe˜je˜q
=
∂Uijpq
L
∂Umnrs
-----------------
∂Uipjq
∂Umnrs
-----------------
δimδpnδjrδqs
δimδjrδpnδqs
=
=
=
Uijkpqr
Uijkpqr
L
Uipjqkr
=
Γ
Uijkl
Γ
Uiljk
=
Uijkpqr
Γ
Uirjqkp
=

September 4, 2003 5:24 pm
Tensor operations
169
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The leafing and palming operations have been introduced simply because these types of
index re-orderings occur frequently in higher-order analyses, and there is no straightfor-
ward way to characterize them in existing direct structural notation. Using these new oper-
ations, note that the e-δ identity can be written
 (12.43)
Here, 
 is a dyad so that 
 and therefore 
 and
.
Symmetric Leafing. Given a fourth-order tensor 
, a common operation in mate-
rials modeling involves minor-symmetrizing the minor indices. Just as a tensor 
 can be
symmetrized by 
, a fourth-order tensor can be minor-symmetrized by
 (12.44)
Here, we have employed a common indicial notation convention that pairs of indices in
parentheses are to be expanded in a symmetric sum.
Now consider the leafed tensor 
. Even if the tensor 
 is minor-sym-
metric, its leaf will not necessarily be minor symmetric. The symmetrized leaf is denoted
with a superscript 
 and defined
 (12.45)
Symmetrized leafs are extremely common in constitutive modeling (especially for anisot-
ropy).
ε
˜˜˜
ε
˜˜˜
•
I˜˜
I˜˜
(
)L
I˜˜
I˜˜
(
)Γ
–
=
I˜˜
I˜˜
I˜˜
I˜˜
(
)ijmn
δijδmn
=
I˜˜
I˜˜
(
)ijmn
L
δimδjn
=
I˜˜
I˜˜
(
)ijmn
Γ
δinδjm
=
Uijkl
Aij
1
2-- Aij
Aji
+
(
)
Uijkl
σ
U ij
( ) kl
(
)
1
4-- Uijkl
Ujikl
Uijlk
Ujilk
+
+
+
(
)
=
=
Uijkl
L
Uikjl
=
Uijkl
Λ
Uijkl
Λ
U ij
( ) kl
(
)
L
1
4-- Uikjl
Ukijl
Uiklj
Ukilj
+
+
+
(
)
=
=

September 4, 2003 5:24 pm
Coordinate/basis transformations
170
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
13. Coordinate/basis transformations
Change of basis (and coordinate transformations)
Quite frequently, people speak of coordinate transformations as if they were the same
thing as basis transformations. They’re not. The coordinates of a point in 3D space com-
prise exactly three independent numbers. Each distinct set of coordinates uniquely identi-
fies the location of the point in space. For example, cylindrical coordinates are 
.
In the vast majority of applications, the base vectors are defined in a way that is coupled to
the choice of coordinates. For example, the base vectors that are natural for use with cylin-
drical coordinates are 
, and these orthonormal vectors are defined to point in
the direction of increasing values of the corresponding coordinate. The components of the
position vector  are the coefficients of the vector when it is expanded as a linear combi-
nation of the base vectors. For cylindrical coordinates, the position vector is given by
; note that there is no term in which the second base vector 
 appears.
Therefore, even though  depends on three coordinates 
, it has only two nonzero
components. Dependence of the position vector  on the angular coordinate is contained
implicitly in the dependence of the radial base vector 
 on 
. For rectangular cartesian
coordinates, referenced to the laboratory basis, it does so happen that the vector compo-
nents are identical to the vector coordinates 
.
As mentioned above, the choice of basis is almost always motivated by the choice of
coordinates so that each base vector points in the direction of increasing values of the
associated coordinate. However, there is no divine edict that demands that the base vectors
must be coupled in any way to the coordinates. If, for example, you were studying the
mechanics of a ferris wheel, then you might favor using cylindrical coordinates to identify
points in space (with the  axis parallel to the wheel’s axis, but the laboratory basis (with,
say, 
 perpendicular to the ground) to reference physical vectors such as the acceleration
of gravity. Using the cylindrical base vectors, the acceleration of gravity would point
along 
, but using the lab basis, it is simply proportional to 
. In this
section, we describe the effect of changing the basis. This discussion is, in principal, com-
pletely unrelated to changing coordinates.
“The chief function of your body is to carry your
brain around.” 
— Thomas Edison
r θ z
, ,
{
}
e˜r e˜θ e˜z
,
,
{
}
x˜
x˜
re˜r
ze˜z
+
=
e˜θ
x˜
r θ z
, ,
{
}
x˜
e˜r
θ
x1 x2 x3
,
,
{
}
z
e˜2
θ
sin
(
)e˜r
–
θ
cos e˜θ
–
e˜2

September 4, 2003 5:24 pm
Coordinate/basis transformations
171
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Consider two different orthonormal* triads: a reference (or laboratory) basis
 and a “tilde” basis 
. A vector  can be expressed in terms of
either basis as follows:
, where 
 are the components of  w.r.t the 
 basis
 (13.1)
, where 
 are the components of  w.r.t the 
 basis
 (13.2)
Both expressions represent the same vector . Thus, it must be true that
 (13.3)
The “hat” components 
 are not generally equal to the “tilde” components
, but they are related in a very specific way. Specifically, if the two bases are
not equal to each other, then the components with respect to each of these bases must also
be different from each other. However, the components must change in response to a basis
change in such a way that the sum of components times base vectors is invariant — either
representation characterizes the same vector.
Coordinate and basis transformations are awkward to explain, and everyone has their
own way of doing it. Our Reference [7] provides detailed derivations of the procedure for
the case of changing from one orthonormal basis 
 to another reoriented, but
still orthonormal, basis 
†. Coordinate transformation discussions always
begin with the definition of a “direction cosine” matrix 
 whose components are given
by
 (13.4)
This is called the direction cosine matrix because, applying Eq. (5.5), 
,
 (13.5)
where 
 is the angle between 
 and 
. Thankfully, you don’t have to find these angles
to construct the 
 matrix. Just find the components of each reoriented 
 base vector
with respect to the reference 
 basis. Then assemble these components into columns of
the 
 matrix so that the 
 column contains the tilde components of the 
 base vector.
An example is provided at the end of this section.
Some people define the direction cosine matrix alternatively by
 (13.6)
Note that 
 therefore the results that we present below can be readily converted to
this alternative definition by simply replacing all occurrences of 
 by 
.
* For a discussion of general non-orthonormal bases, see Ref. [6].
† In our Reference [7], the notation is different, but the meaning is the same. Specifically, Reference 
[7] uses 
 to denote what we are calling 
. It uses 
 to denote what we here call 
. It uses 
 
to denote what we are here calling 
. Tildes in Ref. [7], become “hats” in this document. The 
equations listed in this document have already been converted to the present notation.
E˜ 1 eˆ
˜1 eˆ
˜1
,
,
{
}
e˜
˜1 e˜
˜2 e˜
˜3
,
,
{
}
v˜
v˜
vˆieˆ
˜i
=
vˆi
v˜
eˆ
˜i
v˜
v˜ie˜
˜i
=
v˜i
v˜
e˜
˜i
v˜
vˆieˆ
˜i
v˜ie˜
˜i
=
vˆ1 vˆ2 vˆ3
,
,
{
}
v˜1 v˜2 v˜3
,
,
{
}
e˜
˜1 e˜
˜2 e˜
˜3
,
,
{
}
eˆ
˜1 eˆ
˜2 eˆ
˜3
,
,
{
}
E˜ k
e˜
˜k
e˜k
eˆ
˜k
vk
v˜k
Q
[
]
Qij
E˜ i
eˆ
˜j
•
=
Qij
θij
cos
=
θij
E˜ i
eˆ
˜j
Q
[
]
eˆ
˜j
e˜
˜k
Q
[
]
jth
eˆ
˜j
Lij
E˜ j
eˆ
˜i
•
eˆ
˜i
E˜ j
•
=
=
Lij
Qji
=
Q
[
]
L
[ ]T

September 4, 2003 5:24 pm
Coordinate/basis transformations
172
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Our Reference [7] provides proofs for the following key equations governing basis
reorientation:
 
(i.e., the direction cosine matrix is orthogonal)
 (13.7)
If the handedness of both bases is the same, then 
. If the handedness of
one basis is different from the other, then 
.
 (13.8)
 (13.9)
For a vector 
, the components are related by
.
 In matrix form,  
 (13.10)
.
 In matrix form,  
 (13.11)
For a second-order tensor 
, the components are related by
, or in matrix form, 
 (13.12)
, or in matrix form, 
 (13.13)
Higher order tensors transform similarly. For example, if  is a third order tensor, then
 (13.14)
 (13.15)
To remember these equations, just recognize that transforming an n-th order tensor
requires the presence of n occurrences of 
. Furthermore, the first index on Q will always
match the index on the “tilde” component while the second index on Q will always match
the index on the hat component. 
For transformations within a plane (i.e., when only two base vectors change while the
other two reorient in the plane), a graphical tool called Mohr’s circle can be used.
Although Mohr’s circle is typically taught only for symmetric matrices, it generalizes eas-
ily for non-symmetric matrices (see Ref. [9]).
For changing from one nonorthonormal basis to another, the transformation rules are
considerably more complicated (see Ref [6]). 
Q
[
] 1
–
Q
[
]T
=
det Q
[
]
+1
=
det Q
[
]
1
–
=
eˆ
˜i
Qjie˜
˜j
=
e˜
˜i
Qijeˆ
˜j
=
v˜
vˆie˜
˜i
vˆjeˆ
˜j
=
=
vˆj
Qijv˜i
=
vˆ
{ }
Q
[
]T v˜
{ }
=
v˜i
Qijvˆj
=
v˜
{ }
Q
[
] vˆ
{ }
=
T˜˜
T˜
ije˜
˜ie˜
˜j
Tˆ
kleˆ
˜keˆ
˜l
=
=
Tˆ kl
QikQjlT˜
ij
=
Tˆ
[ ]
Q
[
]T T˜
[ ] Q
[
]
=
T˜ ij
QikQjlTˆ kl
=
T˜
[ ]
Q
[
] Tˆ
[ ] Q
[
]T
=
ξ
˜˜˜
ξˆ
pqr
QipQjqQkrξ˜
ijk
=
ξ˜
ijk
QipQjqQkrξˆ
pqr
=
Q

September 4, 2003 5:24 pm
Coordinate/basis transformations
173
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
EXAMPLE. 
Most of the time, you know the components of one basis with respect to the other. In
Fig. 13.1, for example, we show two differently aligned “tilde” and “hat” bases. 
In Fig. 13.1(a), we set up a grid to be aligned with the “tilde” basis. Our goal is to
change over to the “hat” basis. In particular, we would like to compute the components of
the red vector, , with respect to the “hat” basis. We could solve this problem graphically
(and therefore approximately) by simply setting up a new grid [Fig. 13.1(b)] that is
aligned with the “hat” basis and then just reading off the components of the red vector
with respect to this new grid. To solve the problem exactly, we need to use transformation
formulas.
e˜
˜1
e˜
˜2
eˆ
˜1
eˆ
˜2
(a)
v˜
TILDE BASE VECTOR
TILDE BASE VECTOR
HAT BASE VECTOR
HAT BASE VECTOR
e˜
˜2
eˆ
˜1
eˆ
˜2
(b)
v˜
e˜
˜1
TILDE BASE VECTOR
TILDE BASE VECTOR
HAT BASE VECTOR
HAT BASE VECTOR
e˜
˜1
4
5--eˆ
˜ 1
3
5--eˆ
˜ 2
–
=
e˜
˜2
3
5--eˆ
˜ 1
4
5---eˆ
˜ 2
+
=
eˆ
˜ 1
4
5--e˜
˜1
3
5--e˜
˜2
+
=
eˆ
˜ 2
3
5--e˜
˜1
–
4
5--e˜
˜2
+
=
eˆ
˜ 3
e˜
˜3
=
e˜
˜3
eˆ
˜ 3
=
Figure 13.1.
Relative basis orientations.   In (a), a grid is set up to be aligned with the tilde basis
(with dashed grid lines at intervals 1/5 of a unit apart), and the hat basis is expressed in terms of the
grid (tilde) basis as shown. In (b), a grid is set up oppositely. Note that the vectors themselves are the
same in parts (a) and (b) — only the orientation of the observer (as indicated by the grid) is different.
The vector  is the same in both drawings, but it has different components with respect to the differ-
ent bases.
v˜
v˜
1.24eˆ
˜1
0.32eˆ
˜2
+
=
v˜
4
5--e˜
˜1
e˜
˜2
+
=
v˜

September 4, 2003 5:24 pm
Coordinate/basis transformations
174
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The hat basis is expressed in terms of the “tilde” basis as shown in Fig. 13.1(a). By
expressing the “hat” basis in terms of the “tilde” basis, we can compute the direction
cosines. For example,
 (13.16)
This would be the normal way that you would compute 
. However, it can be done dif-
ferently. In Fig. 13.1(b), we have a grid aligned with the “hat” basis, and the tilde basis is
expressed in terms of the “hat” basis as shown. In this scenario, the calculation of 
 can
be performed by
 (13.17)
Either approach produces the same result for 
. Proceeding similarly to compute the
other components of 
 gives
 (13.18)
Note that the columns of the [Q] matrix contain the tilde components of the hat base vec-
tors. The rows of [Q] contain the hat components of the tilde basis. For this reason, the [Q]
matrix is often presented in the form of a table that explicitly shows the base vectors. For
this example, the direction cosine table would be written
Now consider the red vector  shown in Fig. 13.1. Let’s suppose that we know how to
express this vector with respect to the tilde basis. Namely, 
 (13.19)
Therefore
Direction cosine table
4/5
–3/5
0
3/5
4/5
0
0
0
1
Q12
e˜
˜1
eˆ
˜2
•
e˜
˜1
3
5--e˜
˜1
–
4
5--e˜
˜2
+




•
3
5--
–
=
=
=
Q12
Q12
Q12
e˜
˜1
eˆ
˜2
•
4
5--eˆ
˜ 1
3
5--eˆ
˜ 2
–




eˆ
˜2
•
3
5--
–
=
=
=
Q12
Q
[
]
Q
[
]
4
5--
3
5--
–
0
3
5--
4
5---
0
0
0
1
=
eˆ
˜1
eˆ
˜2
eˆ
˜3
e˜
˜1
e˜
˜2
e˜
˜3
v˜
v˜
4
5--v˜
˜1
v˜
˜2
+
=

September 4, 2003 5:24 pm
Coordinate/basis transformations
175
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
, 
, 
 (13.20)
Our goal is to find the “hat” components of this vector. The direction cosine matrix for this
example was already computed in Eq. (13.18). Substituting the transpose of this matrix
into Eq. (13.10) gives us the result for the components of this vector with respect to the hat
basis:
 (13.21)
or
 (13.22)
This result is consistent with the graphical estimate shown in Fig. 13.1.
Definition of a vector and a tensor. Many authors use the vector transformation
relation in Eq. (13.10) as a definition of the term “vector” for ordinary 3D physical space.
They say that a vector is any set of three numbers that are defined with respect to a basis in
such a way that the numbers change according to Eq. (13.11) upon a change of basis. In
this document, we are more precise by saying that these three numbers are components of
a vector. The vector itself is defined to be the sum of the components times the base vec-
tors; this sum is invariant upon a change of basis. This definition of “vector” eliminates
the ambiguity associated with the sloppy definition of a vector as “something with length
and direction.”
On page 230, we explain that a mathematician will likely puff up proudly and define a
vector to be a “member of a vector space.” This pompous definition is not circular so long
as the phrase “vector space” has already been defined. Specifically, as discussed on
page 230, a vector space is a collection of objects that satisfy certain properties under
addition and multiplication. The definition of a vector according to its transformation
properties is merely a discerning criterion for identifying members of a particular candi-
date collection of objects. To be mathematically justified in using our transformation defi-
nition of a vector, we must follow through and test that vector addition and scalar
multiplication do indeed satisfy the mathematician’s required axioms (they are indeed sat-
isfied). The mathematician’s definition of a vector requires scalars (which they call mem-
bers of a field) to be defined separately. Formally, a scalar is a zero-order tensor and a
vector is a first-order tensor.
Engineering texts typically define second-order tensors to be ordered 
 arrays of
numbers referenced to a basis such that those numbers change according to Eq. (13.12)
upon a change of basis. In this document, we call the numbers themselves the components
of the tensor. We define the tensor itself to be the sum of components times basis dyads,
which is invariant under a change of basis.
v˜1
4
5--
=
v˜2
1
=
v˜3
0
=
vˆ1
vˆ2
vˆ3










4
5--
3
5--
–
0
3
5--
4
5--
0
0
0
1
T
4 5
⁄
1
0










4
5--- 3
5-- 0
3
5--
–
4
5-- 0
0 0 1
4 5
⁄
1
0










31 25
⁄
8 25
⁄
0










1.24
0.32
0










=
=
=
=
v˜
1.24eˆ
˜1
0.32eˆ
˜2
+
=
3
3
×

September 4, 2003 5:24 pm
Coordinate/basis transformations
176
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Basis coupling tensor. Recall that
 (13.23)
We can always construct a basis-coupling tensor 
 as
 (13.24)
We may write
 (13.25)
It follows that
 (13.26)
or, equivalently,
 (13.27)
We have not accidentally inserted a transpose in the last equation here. The basis coupling
tensor is a linear transformation that operates on the tilde basis to produce the hat basis.
The basis coupling tensor corresponds to a rigid rotation of space and all vectors in space.
By contrast, the component transformations we have discussed in this chapter deal with
holding space and all vectors fixed while we reorient the observer. You would use the
basis coupling tensor if you wanted to transform material vectors so that they are aligned
with the reoriented basis.
Qij
e˜
˜i
eˆ
˜j
•
=
Q
˜˜
Q
˜˜
eˆ
˜ke˜
˜k
=
Q
˜˜
δijeˆ
˜ieˆ
˜j
δije˜
˜ieˆ
˜j
Qije˜
˜ie˜
˜j
Qijeˆ
˜ieˆ
˜j
=
=
=
=
eˆ
˜k
Q
˜˜
e˜
˜k
•
=
eˆ
˜i
Qjie˜
˜j
Qij
Te˜
˜j
=
=

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
177
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
14. Tensor (and Tensor function) invariance
This section may be skipped, but it does provide some useful insight into what is meant by
a tensor. 
What’s the difference between a matrix and a tensor?
This is one of the most common questions for new students of tensor analysis. The
answer comes down to the fact that tensor matrices must correspond to components with
respect to an underlying basis, and the component matrix must change according to the
tensor transformation rules of the previous section upon a change of basis. If this does not
hold true, then the matrix is just a matrix, not a tensor component matrix.
Suppose that a tensor is defined by giving a “rule” for constructing its components
with respect to any convenient orthonormal basis. We use the term “tensor invariance”
to mean that the following:
If you apply the “rule” in the two bases separately, then the two results must be related 
to each other by the transformation rule appropriate for the order of the result.
Stated in a slightly different way, if you want to know the result of the “rule” in a second
basis, you can do one of the following:
• You can apply the rule in the first basis and then transform the result to the second 
basis.
• You can first transform the arguments of the rule to the second basis, and then apply 
the rule directly in the second basis.
Either way, you should obtain the same result. If you don’t, then the “rule” violates tensor
invariance. 
When we talk about tensor invariance or when we use the phrase “valid tensor rule,”
we are using the word tensor in its generalized sense for which scalars are regarded as 0-
order tensors, vectors are 
 order tensors, etc. Therefore, the above statements also apply
for the question “What is the difference between a vector and a set of three numbers?”
Suppose your next door neighbor told you that (for whatever reason) he was working with
a set of three numbers defined to be two times the index of the number. Then the first num-
ber would be 2, the second 4, and the third 6. He would have an array of three numbers
given by 
. To determine if your neighbor is actually working with a vector, you
“When I’m working on a problem, I never think about beauty.
I think only how to solve the problem. But, when I have
finished, if the solution is not beautiful, I know it’s wrong.”
— Buckminster Fuller
1st
2 4 6
, ,
{
}

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
178
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
would first have to ask him if the indices of his rule had anything to do with a particular
set of directions. Since this tutorial limits its scope to orthonormal bases, we will presume
that he told you that the three directions corresponded to east, north, and up (which are
orthogonal). You would then ask your neighbor if his index doubling rule would still apply
if he were to instead use three different orthogonal reference directions such as north-east,
north-west, and up. If his answer is “yes, the doubling rule applies for any set of orthonor-
mal reference directions,” then you would conclude that he is merely working with an
array of three numbers, not a vector. To prove that your neighbor’s doubling rule does not
correspond to a vector, you would only have to find one counter-example that violates the
invariance criterion. Let 
 denote the directions {east, north, up}. Now let
 denote the directions {north-east, north-west, up}. In other words, let
, 
, 
 (14.1)
Then, the doubling rule in this system would give a vector
 (14.2)
or
 (14.3)
Thus, the doubling rule applied directly in the second system does not result in the same
vector as would be obtained by applying that rule in the first system from the outset
(namely, 
), and you must therefore conclude that your neighbor’s rule
gives a well-defined array, but (alas) not a vector. 
Suppose, on the other hand, that your neighbor had told you that the doubling rule was
never intended to apply in a different system. You would then have to ask him to provide
you with a general rule that applies in any system. If the general rule has the property that
you will end up with the same vector, no matter what system you use, then his general rule
would correspond to a vector, not just an array. In general, if you have a rule that gives you
three numbers 
 with respect to 
 and the definition of the rule is such
that it gives you three different numbers 
 when applied to any other orthonor-
mal triad 
, then the rule corresponds to a vector if and only if
 (14.4)
In other words, even though the components will generally vary upon a change of basis,
the sum of components times base vectors does not change. That’s why the term invari-
ance is used. It says that a vector (the sum of components times basis) is invariant under a
change of basis. If the basis changes, then the components must change in a fully compen-
sating manner so that Eq. (14.4) remains true. For second-order tensors, a similar state-
e˜1 e˜2 e˜3
,
,
{
}
E˜ 1 E˜ 2 E˜ 3
,
,
{
}
E˜ 1
e˜1
e˜2
+
2
----------------
=
E˜ 2
e˜1
–
e˜2
+
2
---------------------
=
E˜ 3
e˜3
=
2E˜ 1
4E˜ 2
6E˜ 3
+
+
4e˜1
–
6e˜2
+
2
---------------------------
6e˜3
+
2e˜1
4e˜2
6e˜3
+
+
v1 v2 v3
,
,
e˜1 e˜2 e˜3
,
,
{
}
V1 V2 V3
,
,
E˜ 1 E˜ 2 E˜ 3
,
,
{
}
v1e˜1
v2e˜2
v3e˜3
+
+
V1E˜ 1
V2E˜ 2
V3E˜ 3
+
+
=

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
179
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
ment applies. Namely, the set of nine basis dyads (
) forms
a basis for second-order tensors. A set of nine numbers 
 corre-
sponds to a second-order tensor if and only if the rule that assigns these numbers changes
upon a change of basis in such a manner that
 (14.5)
where 
 is any other (orthonormal) basis and 
are the nine new numbers resulting from applying the rule in the new basis. If the above
equation does not hold true, then the rule, and any numbers it spits out, do not correspond
to a tensor.
Thankfully, the triplets and ordered 
 arrays that pop up in physics typically do
satisfy the vector and tensor invariance requirements of Eqs. (14.4) and (14.5). That’s no
surprise, since any physical phenomenon should be unaffected by the coordinate frame
that we adopt to describe it. The components do not mean much by themselves, but the
sum of components times bases (being invariant) does have strong physical significance. It
is the sum that means something as a single entity. Even though describing a velocity
requires supplying three numbers, you’ll never hear a person say “the velocity are 
”.
Being a vector, velocity is (and should be) regarded as a single entity. Physical phenomena
are routinely described conceptually using direct notation. For particular problems, or in
computer codes, component expressions are used.
Whenever a “rule” is proved to satisfy invariance, we always endow it with a struc-
tured direct (Gibbs) notation. Whenever a new operation is defined exclusively in terms of
invariant operations, then the new operation is immediately known to be itself invariant.
Example of a “scalar rule” that satisfies tensor invariance
Given a vector  with components 
 with respect to a basis 
,
we propose constructing a scalar by applying the following “rule”
 (14.6)
or, using summation notation,
 (14.7)
Now consider a second basis 
. If we apply the “rule” directly in this second
basis, we get
 (14.8)
To demonstrate that the “rule” satisfies tensor invariance, we must demonstrate that
Eqs. (14.7) and (14.8) give the same answer for the scalar . Recalling Eq. (13.11) we
know there exists an orthogonal matrix [Q] such that
e˜1e˜1 e˜1e˜2 e˜1e˜3 e˜2e˜1 … e˜3e˜3
,
,
,
,
,
a11 a12 a13 a21 … a33
,
,
,
,
,
(
)
aije˜ie˜j
AijE˜ iE˜ j
=
E˜ 1 E˜ 2 E˜ 3
,
,
{
}
A11 A12 A13 A21 … A33
,
,
,
,
,
(
)
3
3
×
…
Any expression that can be written in direct notation
is automatically known to be invariant itself. 
v˜
vˆ1 vˆ2 vˆ3
,
,
{
}
eˆ
˜1 eˆ
˜2 eˆ
˜3
,
,
{
}
s
vˆ12
vˆ22
vˆ32
+
+
=
s
vˆivˆi
=
e˜
˜1 e˜
˜2 e˜
˜3
,
,
{
}
s
v˜iv˜i
=
s

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
180
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (14.9)
Substituting this into Eq. (14.7), being extra careful to introduce two distinct dummy sum-
mation indices, gives
 (14.10)
Since 
 is orthogonal, we know that 
. Hence
 (14.11)
which is identical to Eq. (14.8). Thus, this “rule” for constructing the scalar  satisfies ten-
sor invariance. Now that we know that this rule is invariant, we are permitted to give it a
direct notation symbol. Of course, the symbol for this operation is already defined — it is
simply the dot product:
 (14.12)
Example of a “scalar rule” that violates tensor invariance
Scalars themselves are invariant under a coordinate transformation. Newcomers to ten-
sor analysis therefore often jump to the conclusion that any “rule” that produces a real
number must be invariant. This section shows why this is not the case. If you look back at
our definition of an invariant rule, you will see that you must be able to apply the rule in
any two coordinate systems, and the results must differ from each other by the transforma-
tion between the systems. If the rule produces a scalar, then invariance demands that both
systems must produce the same value for the scalar.
Given a vector  with components 
 with respect to a basis 
,
let’s consider the following “scalar-valued rule:” 
, 
 (14.13)
In other words, the scalar is constructed by simply adding up the vector’s components. To
show that this rule is not invariant, all we need is a counterexample. Consider a vector
 (14.14)
Consider a second basis
, 
, 
and 
 (14.15)
In terms of this second basis, the vector  is just
 (14.16)
Now, if we apply the rule of Eq. (14.13) to Eq. (14.14) we obtain 
. However, if we
apply the rule to Eq. (14.16), we get 
. The final results do not agree! Consequently,
summation of the components of a vector is not an invariant operation. This is an interest-
ing conclusion since we found in the previous section that summation of the squares of
components is invariant.
vˆj
v˜iQij
=
s
v˜mQmiv˜kQki
=
Q
[
]
QmiQki
δmk
=
s
v˜mδmkv˜k
v˜mv˜m
=
=
s
s
v˜
v˜
•
=
v˜
v1 v2 v3
,
,
{
}
e˜1 e˜2 e˜3
,
,
{
}
s
v1
v2
v3
+
+
=
v˜
3e˜
˜1
4e˜
˜2
+
=
eˆ
˜1
1
5-- 3e˜
˜1
4e˜
˜2
+
(
)
=
eˆ
˜2
1
5--
4e˜
˜1
–
3e˜
˜2
+
(
)
=
eˆ
˜3
e˜
˜3
=
v˜
v˜
5eˆ
˜1
=
s
7
=
s
5
=

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
181
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Example of a 3x3 matrix that does not correspond to a tensor
If you look up the definition of the term “tensor,” many textbooks (especially older
engineering books) will say that a tensor is a 
 matrix of components referenced to a
basis such that the components will change in a particular manner upon a change of basis.
Specifically, the components must change according to the basis transformation rule
described Eq. (13.13). To help clarify this concept, let’s present something that can be
defined as a 
 matrix, but which is not the component matrix for any tensor.
In rigid body dynamics, the moments of inertia of a body 
 describe the amount of
resistance the body has against being rotated. For example, the moment of inertia 
 is
defined by
 (14.17)
Here, 
 are the Cartesian coordinates of a point in the body. Thus, the quantity
 is the square of the distance of a point from the  axis. Intuitively, the farther
points are from the  axis, the harder it is to rotate those points body about the  axis.
Hence, 
 is a good measure of the resistance of the body to rotation about the  axis.
The moments of inertia about the other two axes are defined similarly:
 (14.18)
 (14.19)
The products of inertia are defined in many books by
,
, 
and
 (14.20)
Though less intuitive, these quantities measure how much “wobble” you would feel when
rotating the body about an axis. 
It would seem natural to arrange these inertias into a 
 matrix as
 (14.21)
Here, we have defined 
, etc. to construct a symmetric matrix. It is perfectly legit-
imate for us to arrange the inertias into a matrix form. The question arises, however:
QUESTION: Does the [Ψ] matrix correspond to a tensor?
ANSWER: 
No, it does not!
3
3
×
3
3
×
Ω
ψzz
ψzz
x2
y2
+
(
)ρ V
d
∫
Ω∫∫
=
x y z
, ,
{
}
x2
y2
+
(
)
z
z
z
ψzz
z
ψxx
y2
z2
+
(
)ρ V
d
∫
Ω∫∫
=
ψyy
z2
x2
+
(
)ρ V
d
∫
Ω∫∫
=
ψxy
xy
(
)ρ V
d
∫
Ω∫∫
=
ψyz
yz
(
)ρ V
d
∫
Ω∫∫
=
ψzx
zx
(
)ρ V
d
∫
Ω∫∫
=
3
3
×
ψ
[
]
ψxx ψxy ψxz
ψyx ψyy ψyz
ψzx ψzy ψzz
=
ψyx=ψxy

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
182
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Whenever you wish to prove that something is false, all you need is a counterexample.
Consider a body 
 that is a tiny ball of mass 
 located on the  axis at a distance  from
the origin. Treating the ball as a point mass so that 
, 
, the inertia values are
 and all other 
 (14.22)
Thus,
 w.r.t. the 
 coordinate system.
 (14.23)
Now consider a different “hat” coordinate
system as shown. In this coordinate system,
 and 
. Applying the
definitions of the inertia components in this
hat system gives
 (14.24)
 (14.25)
 (14.26)
Thus,
 w.r.t. the 
 coordinate system.
 (14.27)
Now the question becomes: would we have obtained Eq. (14.27) if we had merely per-
formed a coordinate transformation of Eq. (14.23)? Let’s show that the answer is “no.”
The direction cosine matrix for the transformation from the 
 system to the 
system is 
 (14.28)
If we assume (incorrectly) that the 
 matrix corresponds to a tensor, then the following
relationship should be true
 (14.29)
Thus, if 
 corresponds to a tensor,* then it should be true that
Ω
m
x
L
x
L
≈
y
z
0
≈
≈
ψyy
ψzz
mL2
=
=
ψij
0
≈
ψ
[
]
mL2
0 0 0
0 1 0
0 0 1
=
xyz
{
}
x
y
xˆ
yˆ
m
L
xˆ
yˆ
L
2
⁄
≈
=
z
0
≈
ψxˆxˆ
ψyˆyˆ
1
2--mL2
=
=
ψzz
mL2
=
ψxy
1
2--mL2
=
ψ
[
]
mL2
1 2
⁄
1 2
⁄
0
1 2
⁄
1 2
⁄
0
0
0
1
=
xˆyˆzˆ
{
}
xyz
{
}
xˆyˆzˆ
{
}
Q
[
]
1
2
-------
1
2
------- 0
1
2
-------
–
1
2
------- 0
0
0 1
=
ψ
[
]
ψ
[
] w.r.t.
xˆyˆzˆ
{
}
Q
[
]T ψ
[
] w.r.t.
xyz
{
}
Q
[
]
=
ψ
[
]

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
183
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 This equation is false!
 (14.30)
Multiplying this out, however, shows that equality does not hold. Consequently, this coun-
terexample proves that the matrix of inertias defined in Eq. (14.21) is not the matrix asso-
ciated with a tensor!
The inertia TENSOR
Now we are left with the question: Is there any way to organize the inertias into a
matrix form that does correspond to a tensor? The answer to this question is “yes!” Sim-
ply putting negatives on the off-diagonals turns out to define a properly invariant tensor
matrix:
 (14.31)
This new definition corresponds to a tensor if and only if, for any two Cartesian coordinate
systems,
,
Must hold true for all [Q].
 (14.32)
where 
 is the direction cosine matrix.
Let’s first check whether placing negatives on the off-diagonals fixes our previous
counterexample. With our new definition for the inertia tensor, we now ask whether nega-
tives on the off-diagonals of the inertia tensor in Eq. (14.30) will make that equation true.
In other words, is the following matrix equation true?
 
This equation is true!
 (14.33)
Multiplying this out shows that equality holds. Passing this test is necessary, but not suffi-
cient for Eq. (14.32) to hold. The fact that one example (i.e., one choice for [Q]) worked
out okay does not prove that our new definition really does correspond to a tensor. We
don’t know for sure (yet) whether or not some other counterexample might prove that our
new definition isn’t a tensor either. It is always harder to prove something true than to
prove it false!
* Keep in mind: we are trying to prove that it doesn’t.
1 2
⁄
1 2
⁄
0
1 2
⁄
1 2
⁄
0
0
0
1
1
2
-------
1
2
-------
–
0
1
2
-------
1
2
------- 0
0
0
1
0 0 0
0 1 0
0 0 1
1
2
-------
1
2
------- 0
1
2
-------
–
1
2
------- 0
0
0 1
=
Φ
[
]
ψxx
ψxy
–
ψxz
–
ψyx
–
ψyy
ψyz
–
ψzx
–
ψzy
–
ψzz
=
Φ
[
] w.r.t.
xˆyˆzˆ
{
}
Q
[
]T Φ
[
] w.r.t.
xyz
{
}
Q
[
]
=
Q
[
]
1 2
⁄
1 2
⁄
–
0
1 2
⁄
–
1 2
⁄
0
0
0
1
1
2
-------
1
2
-------
–
0
1
2
-------
1
2
------- 0
0
0
1
0 0 0
0 1 0
0 0 1
1
2
-------
1
2
------- 0
1
2
-------
–
1
2
------- 0
0
0 1
=

September 4, 2003 5:24 pm
Tensor (and Tensor function) invariance
184
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
It turns out that our new definition does indeed transform properly for all possible
coordinate changes. One of the simplest ways to prove that a matrix construction rule is in
fact a properly invariant tensor rule is to find some way to write out the definition in direct
(Gibbs) notation using only operations (such as the dot product and dyadic multiplication)
that have already been proved to be valid tensor operations. 
We recognize that the expression 
 that appears in the definition of 
 can be
written as 
, or simply 
, where the position vector is
. This observation lets us introduce at least a bit of
direct notation into the formula. Note that the off-diagonals of the dyad 
 are identical
to the off-diagonals of our new inertia matrix. The diagonal components of 
 are 
,
, and 
, which are exactly the same as the terms we used to rewrite the diagonals of
the new inertia matrix. For example, the 
 component 
 was re-written as
. With a bit of thought, we therefore recognize that the inertia tensor may be
written in the following clean direct notation:
 (14.34)
By discovering this direct notation formula, we have relieved ourselves of the burden of
proving invariance under coordinate transformations. The direct notation operations them-
selves (namely: dyadic multiplication, tensor addition, scalar multiplication, vector dot
product) have all been individually proven invariant in separate analyses. Any object con-
structed using these invariant operations must itself be invariant!
x2
y2
+
ψzz
x2
y2
z2
+
+
(
)
z2
–
x˜
x˜
•
z2
–
x˜
xe˜x
ye˜y
ze˜z
+
+
xˆe˜xˆ
yˆe˜yˆ
zˆe˜zˆ
+
+
=
=
x˜x˜
–
x˜x˜
–
x2
–
y2
–
z2
–
zz
x2
y2
+
x˜
x˜
•
z2
–
Φ
˜˜
x˜
x˜
•
(
)I˜˜
x˜x˜
–
[
]ρ V
d
∫
Ω∫∫
=

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
185
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
15. Scalar invariants and spectral analysis
Invariants of vectors or tensors
A scalar invariant of a vector or tensor is any scalar-valued function of the vector or
tensor that gives the same result even upon a change in basis.
The sum 
 is not an invariant of a vector  because the sum 
with will generally give a different result when computed with respect to a different basis.
However, the sum of the squares is an invariant, as was proved on page 179. 
The sum 
 of the squares of the diagonal components of a tensor, 
 is
not an invariant of a tensor because the result is generally different for different bases.
However, the sum of the diagonal components 
 alone does turn out to be
an invariant because, for any orthogonal 
 direction cosine matrix, 
 
= 
= 
(now use orthogonality)
= 
= 
= 
 (15.1)
Primitive invariants
As mentioned earlier, the magnitude of a vector is an invariant. Likewise, the square
of the magnitude is also an invariant. These two invariants are not independent. One can
always be computed from the other. In general, if 
 and  are invariants, then any scalar-
valued function of them will also be invariant itself.
Primitive invariants of a vector or tensor are any minimal set of invariants such that all
other invariants may be expressed as functions of the primitive invariants. 
A vector has only one primitive invariant — its magnitude. Symmetric tensors (of class
) have three primitive invariants. This follows because symmetric tensors have three
eigenvalues. Since an invariant may be computed in any basis with the same result, all
invariants of symmetric tensors must be expressible as functions of the tensor’s eigenval-
ues 
. For example, the magnitude of a symmetric tensor is an invariant that
“Engineers, like artists, often fall in love with
their models.” 
— Tom Bement
v1
v2
v3
+
+
v˜
v˜1
v˜2
v˜3
+
+
T11
2
T22
2
T33
2
+
+
T˜˜
T11
T22
T33
+
+
Qij
T11
T22
T33
+
+
Tkk
T˜ ijQikQjk
T˜ ijδij
T˜ ii
T˜ 11
T˜ 22
T˜ 33
+
+
α
β
V3
2
λ1 λ2 λ3
,
,
{
}

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
186
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
may be written as 
. Nonsymmetric tensors have more than three primitive
invariants. For nonsymmetric tensors, the magnitude is itself an independent invariant that
cannot be expressed as a function of the eigenvalues. To prove this statement, consider a
tensor whose component matrix with respect to some particular basis is given by
 (15.2)
The eigenvalues are 
, but the tensor magnitude is 
, which
depends on the “12” component 
. Different values of  will give different magnitudes.
Hence, the magnitude must not be expressible as a function of the eigenvalues. Tensor
magnitude is an independent fourth invariant for nonsymmetric tensors! Don’t let anyone
tell you that a tensor is zero if all of its eigenvalues are zero — that statement is true only
for symmetric tensors!
λ1
2
λ2
2
λ3
2
+
+
λ1 a
0
0 λ2 0
0
0 λ3
λ1 λ2 λ3
,
,
{
}
λ1
2
λ2
2
λ3
2
a2
+
+
+
W
a

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
187
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Trace invariants
Three popular invariants of a second-order tensor are
 (15.3)
For symmetric tensors, these form an acceptable set of primitive invariants. A symmetric
tensor is zero if and only if these three invariants are all zero. This statement if false for
nonsymmetric tensors, as can be readily verified by putting 
 and
 in Eq. (15.2). If the eigenvalues are known, then the trace invariants are given by
 (15.4)
Characteristic invariants
The characteristic invariants of a second-order tensor 
 are defined by
 = the sum of all possible 
 principal subminors
 (15.5)
Here, a 
 principal subminor is the determinant of a matrix formed by striking out
rows and columns of the component matrix 
 until all that is left is a 
 matrix
whose diagonal components are also diagonal components of the original tensor 
. The
 principal invariant requires you to find all of the possible ways to construct a 
principal subminor and to sum their determinants.
For a tensor referenced to 3D space, the component matrix is 
 and the character-
istic invariants are
 (15.6)
These are called the characteristic invariants (or principal invariants [24]) because they are
coefficients in the characteristic equation that gives the eigenvalues of 
. Namely, the
eigenvalues of a tensor 
 are the solutions of
I
trT˜˜
=
II
tr T˜˜
2
(
)
=
III
tr T˜˜
3
(
)
=
λ1
λ2
λ3
0
=
=
=
a
1
=
I
λ1
λ2
λ3
+
+
=
II
λ1
2
λ2
2
λ3
2
+
+
=
III
λ1
3
λ2
3
λ3
3
+
+
=
T˜˜
Ik
k
k
×
k
k
×
T˜˜
[ ]
k
k
×
T˜˜
[ ]
Ik
k
k
×
3
3
×
I1
T11
T22
T33
+
+
=
I2
det T11 T12
T21 T22
det T22 T23
T32 T33
det T11 T13
T31 T33
+
+
=
I3
det
T11 T12 T13
T21 T22 T23
T31 T32 T33
=
T˜˜
T˜˜

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
188
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (15.7)
This equation is true even if the tensor 
 is nonsymmetric. For symmetric tensors, the
characteristic invariants are an acceptable set of primitive invariants if the tensor is sym-
metric. In other words, all other invariants of a symmetric tensor may be expressed as
functions of the characteristic invariants. A symmetric tensor is zero if and only if its char-
acteristic invariants are all zero. This statement if false for nonsymmetric tensors, as can
be readily verified by putting 
 and 
 in Eq. (15.2). 
If the eigenvalues of the tensor are known, then the characteristic invariants are given
by
 (15.8)
Comparing with Eq. (15.4), note that the characteristic invariants are related to the trace
invariants by
 (15.9)
These relationships hold only for second-order tensors referenced to a 3D space (class
). However, the basic definitions of the characteristic invariants and their relationship
with the characteristic equation extend analogously to other dimensions. For second-order
tensors referenced to a 4D space (i.e., class 
 tensors, whose component matrices are
), the characteristic equation is 
. For second-order
tensors referenced to a 2D space (class 
, for which the component matrices are dimen-
sioned 
), the characteristic equation is
, 
where 
 
and 
 (15.10)
Applying this formula is the fastest and least error-prone way to quickly write down the
characteristic equation of a 
 matrix.
λ3
I1λ2
–
I2λ
I3
–
+
0
=
T˜˜
λ1
λ2
λ3
0
=
=
=
a
1
=
I1
λ1
λ2
λ3
+
+
=
I2
λ1λ2
λ2λ3
λ3λ1
+
+
=
I3
λ1λ2λ3
=
tr T˜˜
( )
I1
=
tr T˜˜
2
(
)
I1
2
2I2
–
=
tr T˜˜
3
(
)
I1
3
3I1I2
–
3I3
+
=
V3
2
V4
2
4
4
×
λ4
I1λ3
–
I2λ2
I3λ
–
I4
+
+
0
=
V2
2
2
2
×
λ2
I1λ
–
I2
+
0
=
I1
T11
T22
+
=
I2
det T11 T12
T21 T22
=
2
2
×

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
189
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Direct notation definitions of the characteristic invariants. 
The invariant definitions that we have given so far demand that the underlying basis must
be orthonormal. Some more advanced texts (e.g., [21]) cite more abstract, and therefore
more broadly applicable, definitions of the characteristic invariants. These definitions are
phrased in terms of the triple scalar product, 
, defined in Eq. (5.36).
Namely, in 3D, 
, 
, and 
 are defined such that, for any vectors, 
, , and 
, 
 (15.11)
 (15.12)
 (15.13)
Note that the left hand side in the equation for 
 sums over every possible way the tensor
 can operate on exactly one of the vectors in the triple scalar product. Similarly, 
involves sums over every possible way the tensor can act on two of the vectors and 
involves sums over every way (only one way) for the tensor to act on all three vectors in
the triple scalar product. 
Admittedly, these definitions are rather strange looking, and we have omitted the proof
that the right hand side can, in every instance simplify to a scalar (the invariant) times the
triple scalar product 
. Nonetheless, expressions like these show up occasionally
in analyses, and it is essential to recognize how beautifully they simplify. Furthermore,
these definitions are a nice place to start when attempting to deduce how to compute the
tensor invariants for irregular (non-orthonormal) bases. 
The cofactor in the triple scalar product. We close this discussion with a final
identity, involving the cofactor tensor. Recall the direct notation definition of the cofactor,
given in Eq. (9.46):
 
for all vectors 
 and 
 (15.14)
Dotting both sides of this equation by a third arbitrary vector 
 gives
 (15.15)
The right-hand side is the triple scalar product 
. Using Eq. (8.17), The left-
hand side can be written 
 or 
, which is the triple scalar
product 
. Thus
 (15.16)
This result shows that, when a tensor acts on two arguments in a triple scalar product, it
can be recast as the transpose of the cofactor acting on the previously un-transformed
(lonely) third vector. By the cyclic property of the triple scalar product, we can assert that
this statement holds true when the tensor is acting on any two vectors in a triple scalar
product.
  
( )
  
( )
  
( )
,
,
[
]
I1 I2
I3
u˜
v˜
w˜
T˜˜
u˜
•
v˜ w˜
, ,
[
]
u˜
T˜˜
v˜
•
w˜
,
,
[
]
u˜ v˜
T˜˜
v˜
•
, ,
[
]
+
+
I1
u˜ v˜ w˜
, ,
[
]
=
u˜
T˜˜
v˜
•
T˜˜
w˜
•
,
,
[
]
T˜˜
u˜
•
v˜
T˜˜
w˜
•
, ,
[
]
T˜˜
u˜
•
T˜˜
v˜
•
w˜
,
,
[
]
+
+
I2
u˜ v˜ w˜
, ,
[
]
=
T˜˜
u˜
•
T˜˜
v˜
•
T˜˜
w˜
•
,
,
[
]
I3
u˜ v˜ w˜
, ,
[
]
=
I1
T˜˜
I2
I3
u˜ v˜ w˜
, ,
[
]
G˜˜
C
u˜
v˜
×
(
)
•
G˜˜
u˜
•
(
)
G˜˜
v˜
•
(
)
×
=
u˜
v˜
w˜
G˜˜
C
u˜
v˜
×
(
)
•
[
]
w˜
•
G˜˜
u˜
•
(
)
G˜˜
v˜
•
(
)
×
[
]
w˜
•
=
G˜˜
u˜
•
G˜˜
v˜
•
w˜
,
,
[
]
u˜
v˜
×
(
)
G˜˜
CT
•
[
]
w˜
•
u˜
v˜
×
(
)
G˜˜
CT
w˜
•
[
]
•
u˜ v˜ G˜˜
CT
w˜
•
, ,
[
]
G˜˜
u˜
•
G˜˜
v˜
•
w˜
,
,
[
]
u˜ v˜
G˜˜
CT
w˜
•
, ,
[
]
=

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
190
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Applying the above identity to the left-hand-side of Eq. (15.12), and then applying the
definition of trace given in Eq. (15.11) shows that
 (15.17)
Of course, this result also follows directly from Eqs. (15.8) and (3.94).
Invariants of a sum of two tensors
Consider the sum 
 of two tensors. The first invariant is simple enough
because the trace of a sum is the sum of the traces. Thus
 (15.18)
Solving Eq. (15.9b) for 
 gives a formula for the second invariant:
 (15.19)
When applied to 
, the result is
 (15.20)
which simplifies to
 (15.21)
Without proof, the determinant of a sum can be written
 (15.22)
CASE: invariants of the sum of a tensor plus a dyad. Now suppose that the
tensor 
 is actually a dyad:
 (15.23)
Then
 (15.24)
 (15.25)
 (15.26)
 (15.27)
Thus, the invariants of 
 are
 (15.28)
 (15.29)
I2
trT˜˜
c
=
T˜˜
A˜˜
B˜˜
+
=
I1
A
B
+
trA˜˜
trB˜˜
+
I1
A
I1
B
+
=
=
I2
I2
1
2-- I1
2
tr T˜˜
2
(
)
–
(
)
=
T˜˜
A˜˜
B˜˜
+
=
I2
A
B
+
1
2--
trA˜˜
trB˜˜
+
(
)2
tr A˜˜
B˜˜
+
(
)2
–
(
)
=
I2
A
B
+
I2
A
I2
B
I1
AI1
B
tr A˜˜
B˜˜
•
(
)
–
+
+
=
I3A
B
+
det A˜˜
B˜˜
+
(
)
I3A
I3B
A˜˜
c :B˜˜
A˜˜
:B˜˜
c
+
+
+
=
=
B˜˜
B˜˜
u˜ v˜
=
B˜˜
c
0
˜˜
=
I1
B
u˜
v˜
•
=
I2B
0
=
I3B
0
=
T˜˜
A˜˜
u˜ v˜
+
=
I1
T
tr A˜˜
u˜ v˜
+
(
)
trA˜˜
u˜
v˜
•
+
=
=
I2
T
I2
A
trA˜˜
(
) u˜
v˜
•
(
)
v˜
A˜˜
u˜
•
•
–
+
=

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
191
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (15.30)
The last equation is especially useful in the analysis of the acoustic tensor for determining
plastic wave speeds and modes.
I3
T
det A˜˜
u˜ v˜
+
(
)
detA˜˜
u˜
A˜˜
c
v˜
•
•
+
=
=

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
192
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The Cayley-Hamilton theorem:
A tensor satisfies its own characteristic equation. That is,
,
 (15.31)
where  is the identity tensor, and  is the zero tensor. This theorem is trivial to prove if
the tensor is symmetric, but the proof is quite subtle if the tensor is non-symmetric [see
Ref. 26].
The above theorem provides a means of writing powers of a tensor in terms of second
or lower powers. For example, multiplying Eq. (15.31) by 
 and solving for 
 gives
= 
= 
= 
 (15.32)
where, in the second step, we used Eq. (15.31) to substitute for 
. 
CASE: Expressing the inverse in terms of powers and invariants. 
We can multiply both sides of Eq. (15.31) by 
 and then solve for 
 to obtain
 (15.33)
CASE: Expressing the cofactor in terms of powers and invariants. 
Knowing that the inverse can also be written 
, the above result show us that
 (15.34)
Eigenvalue problems
Consider a general tensor, 
. A vector  is called a “right” eigenvector of 
 if and
only if 
 is proportional to . In other words, there must exist a scalar 
, called the
“eigenvalue,” such that
 (15.35)
Eigenvectors are also called principal directions. Note that if an eigenvector can be
found, its magnitude is arbitrary because any scalar multiple of an eigenvector would also
be an eigenvector. Thus, if we say that an eigenvector is unique, we really mean that its
direction is unique.
Rewriting Eq. (15.35), we seek  and 
 such that
T˜˜
3
I1T˜˜
2
–
I2T˜˜
I3I˜˜
–
+
0
˜˜
=
I˜˜
0˜˜
T˜˜
T˜˜
4
T˜˜
4
I1T˜˜
3
I2T˜˜
2
–
I3T˜˜
+
I1 I1T˜˜
2
I2T˜˜
–
I3I˜˜
+
(
)
I2T˜˜
2
–
I3T˜˜
+
I12
I2
–
(
)T˜˜
2
I3
I1I2
–
(
)T˜˜
I1I3I˜˜
+
+
T˜˜
3
T˜˜
1
–
T˜˜
1
–
T˜˜
1
–
T˜˜
2
I1T˜˜
–
I2I˜˜
+
I3
----------------------------------
=
T˜˜
1
–
T˜˜
CT
detT˜˜
-----------
=
T˜˜
CT
T˜˜
2
I1T˜˜
–
I2I˜˜
+
=
A˜˜
p
˜
A˜˜
A˜˜
p
˜
•
p
˜
λ
A˜˜
p
˜
•
λp
˜
=
p
˜
λ

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
193
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (15.36)
The only way that this equation can hold is if the tensor in brackets is singular. Hence, 
must satisfy
 (15.37)
Since we are speaking of ordinary tensors in ordinary 3D physical space, expansion of this
determinant gives a cubic equation for the eigenvalue . Specifically, it can be shown that
this “characteristic equation” is
 (15.38)
where 
 are the invariants of Eq. (15.6). Once an eigenvalue is found, the corresponding
eigenvector is determined by enforcing the definition of Eq. (15.35). For two-dimensional
problems, a graphical tool called Mohr’s circle, is also very useful for performing eigen-
value analyses.*
Rebecca: discuss possibility of complex eigenvalues
Because the equation is cubic, there are up to three distinct eigenvalues, 
.
Hence there is the potential for having up to three associated eigenvectors, 
,
but there might be fewer (as explained below). Any linear algebra textbook contains the
proof that the eigenvectors corresponding to distinct eigenvalues will be linearly indepen-
dent. In other words, 
If 
, then 
 and 
 are linearly independent.
 (15.39)
For symmetric tensors, the following stronger statement holds
For symmetric tensors, 
if 
, then 
 and 
 are orthogonal.
 (15.40)
Since the magnitudes of eigenvectors are arbitrary, it is customary to scale them to unit
length so that distinct eigenvectors for symmetric tensors are not only orthogonal, but also
orthonormal. As discussed later, a different convention applies for non-symmetric tensors.
Algebraic and geometric multiplicity of eigenvalues
If all three eigenvalues are distinct (i.e., if there are no repeated roots), then the three
eigenvectors are linearly independent and may be used as a basis for the 3D physical
space.
When two or more eigenvalues are equal, however, the situation becomes more com-
plicated. The algebraic multiplicity of an eigenvalue is the number of times the eigenvalue
repeats as a solution to Eq. (15.38). The geometric multiplicity of an eigenvalue is the
number of linearly independent eigenvectors associated with the eigenvalue. There is
* An extremely detailed exposition on Mohr’s circle, including its definition for nonsymmetric ten-
sors is provided in Ref. [9]. More elementary discussions may be found in virtually any undergrad-
uate text on mechanics of materials.
A˜˜
λI˜˜
–
[
]
p
˜
•
0
˜
=
λ
det A˜˜
λI˜˜
–
[
]
0
=
λ
λ3
I1λ2
–
I2λ
I3
–
+
0
=
Ii
λ1 λ2 λ3
,
,
{
}
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
λi
λj
≠
p
˜ i
p
˜ j
λi
λj
≠
p
˜ i
p
˜ j

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
194
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
always at least one eigenvector associated with each eigenvalue. For repeat roots, the geo-
metric multiplicity is always less than or equal to the algebraic multiplicity. The distinc-
tion between geometric and algebraic multiplicity is important only for nonsymmetric
tensors because (as any good matrix analysis will prove),
For a real symmetric tensor, the geometric multiplicity always 
equals the algebraic multiplicity.
Consequently, a symmetric tensor will always have a complete set of linearly independent
eigenvectors that may be used as a basis for 3D space. Such a basis is sometimes called an
eigenbasis. 
For repeated eigenvalues, the associated eigenvectors do not have unique directions. If
the geometric multiplicity is two, then there are exactly two associated linearly indepen-
dent eigenvectors. These two eigenvectors may be used to define a plane in 3D space. The
eigenvectors associated with the eigenvalue of geometric multiplicity two are unique to
the degree that they must lie in that plane, but their directions (and, of course, magnitudes)
are arbitrary. If desired, they may be scaled such that they are any two orthonormal vectors
in the plane. These statements apply even to nonsymmetric tensors. For symmetric ten-
sors, in light of Eq. (15.40), we note that 
A symmetric tensor always has an orthonormal eigenbasis.
 (15.41)
A normalized eigenbasis is often denoted with different symbols, 
 to empha-
size that it has been selected such that
 (15.42)
Although not guaranteed, it may so happen that a particular non-symmetric tensor of
interest also has all of its geometric multiplicities equal to the algebraic multiplicities. In
such a case, that tensor also possesses a “spanning” set of eigenvectors 
 that
may serve as a basis for 3D space. However,
If a non-symmetric tensor happens to have an eigenbasis, 
then the eigenbasis will not be orthogonal.
 (15.43)
A non-orthogonal eigenbasis 
 always has a “dual” basis 
 that is
defined such that
,
 (15.44)
where the 
 is an alternative symbol for the Kronecker delta and 
 is the complex conju-
gate of 
. Comparing Eqs. (15.44) with (15.42) shows that the dual basis associated with
 is just 
 itself, so there is no need to worry about a dual basis for
symmetric tensors.
δ
˜ 1 δ
˜ 2 δ
˜ 3
,
,
{
}
δ
˜ i
δ
˜ j
•
δij
=
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
p
˜
1 p
˜
2 p
˜
3
,
,
{
}
p
˜
i
p
˜ j
•
δji
=
δji
p
˜
i
p
˜
i
δ
˜ 1 δ
˜ 2 δ
˜ 3
,
,
{
}
δ
˜ 1 δ
˜ 2 δ
˜ 3
,
,
{
}

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
195
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Diagonalizable tensors (the spectral theorem)
Whenever a tensor possesses a spanning set of eigenvectors, 
 (i.e., when a
tensor has an eigenbasis), then the tensor is said to be “diagonalizable.” In matrix anal-
ysis, this means that the matrix 
 containing the components of 
 is with respect to
the laboratory basis 
 is similar to a diagonal matrix 
 containing the eigen-
values on the diagonal. In other words, there exists a matrix 
 such that
 (15.45)
where
 (15.46)
Comparing Eq. (15.35) with (15.45), we note that the columns of the matrix 
 must
contain the components of the three eigenvectors 
 with respect to the
orthonormal laboratory basis. If the tensor 
 is symmetric, the eigenvectors will be
orthonormal and 
 will be orthogonal.
Using vector basis notation, Eq. (15.45) implies that the tensor 
 can be written as the
sum of three “eigen-dyads”:
,
 (15.47)
where the eigenvectors are here presumed to satisfy the normalization of Eq. (15.44) so
that, indeed, 
 (no sum on ). Incidentally, note that
 (15.48)
The dual vectors 
, are sometimes called the “left” eigenvectors by virtue of the above
relationship. It is apparent that the left eigenvalues are the same as the right eigenvalues,
and the left eigenvectors are the right eigenvectors of
.
If the tensor is symmetric, there’s no distinction between the two types of base vectors,
and Eq. (15.47) can be written as simply
If 
 is symmetric, then 
 (15.49)
Eigenprojectors
Consider a diagonalizable tensor 
 for which two eigenvalues are repeat roots. Sup-
pose, for example, 
. Then Eq. (15.47) can be written
,
 (15.50)
or
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
A
[ ]ee
A˜˜
e˜1 e˜2 e˜3
,
,
{
}
Λ
[
]
L
[ ]
A
[ ]ee
L
[ ] Λ
[
] L
[ ] 1
–
=
Λ
[
]
λ1 0
0
0 λ2 0
0
0 λ3
=
L
[ ]
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
A˜˜
L
[ ]
A˜˜
A˜˜
λ1p
˜ 1p
˜
1
λ2p
˜ 2p
˜
2
λ3p
˜ 3p
˜
3
+
+
=
A˜˜
p
˜ i
•
λip
˜ i
=
i
p
˜
i
A˜˜
•
λip
˜
i
=
p
˜
i
A˜˜
T
A˜˜
A˜˜
λ1δ
˜ 1δ
˜ 1
λ2δ
˜ 2δ
˜ 2
λ3δ
˜ 3δ
˜ 3
+
+
=
A˜˜
λ2
λ3
=
A˜˜
λ1p
˜ 1p
˜
1
λ2 p
˜ 2p
˜
2
p
˜ 3p
˜
3
+
(
)
+
=

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
196
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
,
 (15.51)
where
.
 (15.52)
By virtue of Eq. (15.44) we note that
and 
 (15.53)
Consequently, the 
 tensors are projectors, called eigenprojectors. Furthermore, 
,
 (15.54)
Finally, since the eigenvectors form a basis, it can be shown that
 (15.55)
Comparing these results with Eq. (10.32) reveals that the eigenprojectors are complemen-
tary projectors and the number 
 in Eq. (10.32) is equal to the number of distinct eigen-
values. Because 
, the directions of eigenvectors 
 and 
 are not unique —
they only need to reside in the plane defined by their span. However, even though the
directions of 
 and 
 are not unique, the sum, 
, is unique! In other words,
the eigenprojector associated with the double root 
 is unique. Furthermore, note that the
dimension of the range space for each eigenprojector equals the multiplicity of the eigen-
value.
If all of the eigenvalues of the tensor instead had been distinct, we could have per-
formed a similar analysis to obtain
,
 (15.56)
where
 (15.57)
and the properties of Eq. (10.32) would again hold, this time with 
.
 if 
 so each 
 is a projector
 (15.58)
 if 
 (15.59)
 (15.60)
Likewise, if all three eigenvalues had been equal (triple root), then the number of distinct
eigenvalues would be 
, and the same process would (trivially) give 
A˜˜
λ1P˜˜ 1
λ2P˜˜ 2
+
=
P˜˜ 1
p
˜ 1p
˜
1
≡
P˜˜ 2
p
˜ 2p
˜
2
p
˜ 3p
˜
3
+
≡
P˜˜ 1
P˜˜ 1
•
P˜˜ 1
=
P˜˜ 2
P˜˜ 2
•
P˜˜ 2
=
P˜˜ k
P˜˜ 1
P˜˜ 2
•
0
˜˜
=
P˜˜ 1
P˜˜ 2
+
I˜˜
=
M
λ2
λ3
=
p
˜ 2
p
˜ 3
p
˜ 2
p
˜ 3
p
˜ 2p
˜
2
p
˜ 3p
˜
3
+
λ2
A˜˜
λ1P˜˜ 1
λ2P˜˜ 2
λ3P˜˜ 3
+
+
=
P˜˜ 1
p
˜ 1p
˜
1
≡
P˜˜ 2
p
˜ 2p
˜
2
≡
P˜˜ 3
p
˜ 3p
˜
3
≡
M=3
P˜˜ i
P˜˜ j
•
P˜˜ i
=
i=j
P˜˜ i
P˜˜ i
P˜˜ j
•
0
˜˜
=
i
j
≠
P˜˜ 1
P˜˜ 2
P˜˜ 3
+
+
I˜˜
=
M=1

September 4, 2003 5:24 pm
Scalar invariants and spectral analysis
197
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
,
 (15.61)
where we note that the identity tensor itself is a (degenerate) projector.
These concepts can be generalized to fourth-order tensors, where (instead of eigenvec-
tors) we will find eigentensors. The idea of eigenprojectors is extremely useful in this
case, especially in the study of material anisotropy.
A˜˜
λI˜˜
=

September 4, 2003 5:24 pm
Geometrical entities
198
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
16. Geometrical entities
Equation of a plane
A plane in 3D space can be described completely by specifying the plane’s orientation
by a unit normal  and the distance “ ” of the plane from the origin. Physically, we know
that any position vector  that points from the origin to a location in the plane must have a
projection onto the plane’s normal that is identically equal to equal to the distance “ ”.
Thus, the direct notation equation for a plane is
 (16.1)
Written out in component form,
 (16.2)
Even though a plane is a two dimensional object, it takes three independent parameters to
specify it. The unit normal has two independent components (the third being restricted to
ensure that 
) and the distance 
 makes the third parameter. When the plane
passes through the origin (
), it is a linear manifold. Otherwise, it is called an affine
space.
If the plane does not pass through the origin (i.e., if 
), then the equation for the
plane may be written
, where 
 (16.3)
In this case, 
 equals the intercept of the plane on the 
 axis of the Cartesian coordi-
nate triad. If the plane does pass through the origin, then the equation of the plane is just
 (16.4)
The equation of a plane passing through a particular point  is therefore
 (16.5)
“Knowledge is a process of piling up facts.
Wisdom lies in their simplification.”
— Martin H. Fischer
n˜
d
x˜
d
x˜
n˜
•
d
=
x1n1
x2n2
x3n3
+
+
d
=
n˜
1
=
d
d=0
d
0
≠
x˜
u˜
•
1
=
u˜
n˜d---
≡
1 ui
⁄
ith
x˜
n˜
•
0
=
p
˜
x˜
p
˜
–
(
)
n˜
•
0
=

September 4, 2003 5:24 pm
Geometrical entities
199
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Equation of a line
Consider a straight line that passes through one point 
 and a second point 
. The
easiest way to define the set of position vectors 
 that extend from the origin to some
point on the line is to write the equations in parametric form by simply expressing the fact
that the vector from 
 to any point on the line must be parallel to the vector from 
 to
. Letting the proportionality factor be denoted by “t”, the parametric equation for a line
can be written
 (16.6)
Since this is a vector expression, it represents a set of three separate equations. If the
parameter  equals zero, then  is located at 
. If 
, then the point  is located at 
.
Of course, values of  outside the interval from 0 to 1 are permissible as well, and will
result in position vectors outside the line segment from 
 to 
.
An alternative parametric equation for a line is
where 
, 
,
 and 
 (16.7)
The parameter 
 varies from –L/2 to +L/2 as  varies from 
 to 
. 
More generally, one can define a line by any point  on the line and the orientation 
of the line. Then the equation of the line can be written 
, 
 (16.8)
where
,
and 
 defines the orientation of the line
 (16.9)
Dotting both sides of Eq. (16.8) by 
 shows that
 (16.10)
This expression for 
 may be substituted back into Eq. (16.8) to give a non-parametric
version of the equation of a line:
 (16.11)
Physically, this says that the projection of 
 onto 
 equals 
 itself. Even though Eq.
(16.11) is non-parametric, it is still a vector equation, so it really represents three simulta-
neous equations. These three equations are not independent. Given arbitrary choices for
 and 
, it is not generally possible to solve Eq. (16.11) for 
. Certain solvability con-
ditions must be met in order for a solution to exist; namely, the above equation may be
solved for 
 if and only if 
. This solvability condition is expressing the
requirement that 
 and 
 must fall on the “shadow” cast by the line onto the 1-2 plane.
x˜ 1
x˜ 2
x˜
x˜ 1
x˜ 1
x˜ 2
x˜
x˜ 1
–
(
)
t x˜ 2
x˜ 1
–
(
)
=
t
x˜
x˜ 1
t=1
x˜
x˜ 2
t
x˜ 1
x˜ 2
y
˜
αn˜
=
y
˜
x˜
1
2-- x˜ 1
x˜ 2
+
(
)
–
≡
n˜
x˜ 2
x˜ 1
–
L
----------------
≡
L
x˜ 2
x˜ 1
–
=
α
x˜
x˜ 1
x˜ 2
p
˜
n˜
y
˜
αn˜
=
y
˜
x˜
p
˜
–
=
n˜
n˜
α
y
˜
n˜
•
=
α
y
˜
y
˜
n˜
•
(
)n˜
=
y
˜
n˜
y
˜
y1
y2
y3
y3
y1n2
y2n1
=
y1
y2

September 4, 2003 5:24 pm
Geometrical entities
200
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Equation (16.11) is non-parametric, but it is still a set of three distinct equations. It can
be expressed as a single equation by noting that two vectors  and  are equal if and only
if 
. Therefore, an equivalent version of Eq. (16.11) is
 (16.12)
Any of the above boxed equations may be used as an equation of a line in 3D space.
All but the last equation are vector expressions, so they actually represent a set of three
equations, each of which involves a linear combination of the position vector components.
The last equation is a single (scalar-valued) expression for a line, but the price paid for
having a single equation is that the position components appear in quadratic form —
pretty odd given that it represents the equation for a linear (straight) line!
Equation of a sphere
A sphere is defined as the set of points that are equidistant from the sphere’s center.
Therefore, if a sphere of radius 
 is centered at a point , then its equation is simply
 (16.13)
Equation of an ellipsoid
Suppose you wish to define an ellipsoid in 3D space that is centered at the origin and
whose principle axes are parallel to three vectors 
 and whose principal radii
are given by the magnitudes of these vectors. With respect to a coordinate system that is
aligned with the principle directions, the equation of the ellipsoid is
, where 
 (16.14)
If, however, the principle axes are not coincident with your basis, then the equation for the
ellipsoid takes on a more general quadratic form. Namely,
,
 (16.15)
where the tensor 
 is defined by the inverse of the dyad sum
 (16.16)
Since the 
 are (by premise) mutually perpendicular, we know that they must be eigen-
vectors of the tensor 
. Consequently, the eigenvalues of the tensor are 
 and the
inverse of the tensor is 
 (16.17)
a˜
b˜
a˜
b˜
–
(
)
a˜
b˜
–
(
)
•
0
=
y
˜
y
˜
•
y
˜
n˜
•
(
)2
=
R
p
˜
x˜
p
˜
–
(
)
x˜
p
˜
–
(
)
•
R2
=
a˜ 1 a˜ 2 a˜ 3
,
,
{
}
x12
α1
2
------
x22
α2
2
------
x32
α3
2
------
+
+
1
=
αk
a˜ k
=
x˜
B˜˜
x˜
•
•
1
=
B˜˜
A˜˜
a˜ ka˜ k
=
a˜ k
A˜˜
αk
a˜ k
≡
B˜˜
a˜ ka˜ k
αk
4
----------
k
1
=
3
∑
=

September 4, 2003 5:24 pm
Geometrical entities
201
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Example. Suppose that
 (16.18)
 (16.19)
 (16.20)
The magnitudes are
 (16.21)
 (16.22)
 (16.23)
The dyads are
--> 
 (16.24)
--> 
 (16.25)
--> 
 (16.26)
Thus,
 (16.27)
or
 (16.28)
Thus, the equation for the ellipsoid is
 (16.29)
Of course, the last two terms, which come from the off-diagonals, may be combined, but
we left them separated to emphasize the structure of the solution.
a˜ 1
e˜1
e˜2
+
=
a˜ 2
4
e˜1
–
e˜2
+
(
)
=
a˜ 3
3e˜3
=
α1
2
=
α2
4 2
=
α3
3
=
a˜ 1a˜ 1
e˜1e˜1
e˜2e˜1
e˜1e˜2
e˜2e˜2
+
+
+
=
1 1 0
1 1 0
0 0 0
a˜ 2a˜ 2
16 e˜1e˜1
e˜2e˜1
–
e˜1e˜2
–
e˜2e˜2
+
(
)
=
16
16
–
0
16
–
16 0
0
0
0
a˜ 1a˜ 1
9e˜3e˜3
=
0 0 0
0 0 0
0 0 9
A˜˜
1
–
[
]
1
2
(
)4
--------------
1 1 0
1 1 0
0 0 0
1
4 2
(
)4
------------------
16
16
–
0
16
–
16 0
0
0
0
1
34
-----
0 0 0
0 0 0
0 0 9
+
+
=
A˜˜
1
–
[
]
17
64
------
15
64
------
0
15
64
------
17
64
------
0
0
0
1
9--
=
17
64
------x1
2
17
64
------x2
2
1
9--x3
2
15
64
------x1x2
15
64
------x2x1
+
+
+
+
1
=

September 4, 2003 5:24 pm
Geometrical entities
202
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Equation of a cylinder with an ellipse-cross-section
The equation for a cylinder whose cross section is an ellipse could be regarded as a
degenerate case of the above ellipsoid for which one of the specified vectors, say 
, is
infinite in magnitude. In this case, only the first two direction vectors, 
 and 
 are
needed to specify the geometry of the cylindrical ellipsoid. In this case, Eq. (16.17)
becomes
 (16.30)
Equation of a right circular cylinder
The special case of a circular cylinder of radius  follows from Eq. (16.30) by taking
 (16.31)
where
 (16.32)
Then Eq. (16.30) becomes
 (16.33)
Here, 
 is the unit vector in the direction of 
 and 
 is the unit vector in the direction of
the cylinder axis. The final step in Eq. (16.33) followed from the fact that the cylinder axis
is perpendicular to the first two directions. With that result, Eq. (16.15) becomes simply
 (16.34)
or
 (16.35)
Equation of a general quadric (including hyperboloid)
A quadric surface is governed by an equation of the form
 (16.36)
As already discussed, this form is capable of describing an ellipsoid. However, that is just
one class of surfaces described by the form. Without loss, the 
 may be presumed sym-
metric (if not, then it must be symmetrized in order for the comments in this section to
remain true).
An ellipsoid corresponds to the case that the 
 tensor is positive definite. If the 
 ten-
sor possesses negative eigenvalues, then the quadric surface is a hyperboloid.
a˜ 3
a˜ 1
a˜ 2
B˜˜
a˜ 1a˜ 1
α1
4
-----------
a˜ 2a˜ 2
α2
4
-----------
+
=
r
a˜ 1
a˜ 2
=
α1
α2
r
=
=
B˜˜
e˜1e˜1
e˜2e˜2
+
r2
---------------------------
I˜˜
n˜ n˜
–
r2
---------------
=
=
e˜i
a˜ i
n˜
x˜
x˜
•
n˜
x˜
•
(
)2
–
r2
=
x˜
n˜ n˜
x˜
•
–
r
=
x˜
B˜˜
x˜
•
•
1
=
B˜˜
B˜˜
B˜˜

September 4, 2003 5:24 pm
Geometrical entities
203
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Generalization of the quadratic formula and “completing the 
square”
Consider a spatially varying field given by an equation of the following form:
 (16.37)
As long as 
 is invertible, we claim that there exists a symmetric tensor 
 such that this
field can be written in the form
 (16.38)
Expanding this out, recognizing the 
 may be presumed symmetric without loss, gives
 (16.39)
Equating this expression with Eq. (16.37) gives
 (16.40)
 (16.41)
 (16.42)
The last two equations can be solved for  and . Thus we have the result:
If 
then 
,
where 
 and 
 (16.43)
Written out in full,
,
 (16.44)
We will be interested in describing the shape of surfaces of constant 
. Such surfaces can
be described by considering only the case that 
, because nonzero 
 values of 
 can
always “absorbed” into the parameter “c.” For the case that 
, Eq. (16.37) is like a ten-
sor version of a quadratic formula, so inquiring minds want to know what is the analog of
the quadratic formula. In particular, what is the analog of the discriminant? To answer this
question, let’s define
 (16.45)
or, solving for , 
 (16.46)
ψ
x˜
A˜˜
x˜
•
•
b˜
x˜
•
c
+
+
=
A˜˜
B˜˜
ψ
x˜
p
˜
–
(
)
B˜˜
x˜
p
˜
–
(
)
•
•
d
–
=
B˜˜
ψ
x˜
B˜˜
x˜
•
•
2p
˜
B˜˜
x˜
•
•
–
p
˜
B˜˜
p
˜
•
•
d
–
+
=
B˜˜
A˜˜
=
2p
˜
B˜˜
•
–
b˜
=
p
˜
B˜˜
p
˜
•
•
d
–
c
=
p
˜
d
ψ
x˜
A˜˜
x˜
•
•
b˜
x˜
•
c
+
+
=
ψ
x˜
p
˜
–
(
)
A˜˜
x˜
p
˜
–
(
)
•
•
d
+
=
p
˜
1
2--A˜˜
1
–
b˜
•
–
=
d
1
4--b˜
A˜˜
1
–
b˜
•
•
c
–
=
ψ
x˜
1
2--A˜˜
1
–
b˜
•
+






A˜˜
x˜
1
2--A˜˜
1
–
b˜
•
+






•
•
1
4--b˜
A˜˜
1
–
b˜
•
•
c
–




+
=
ψ
ψ=0
ψ
ψ
ψ=0
y
˜
2A˜˜
x˜
•
b˜
+
≡
x˜
x˜
1
2--A˜˜
1
–
y
˜
b˜
–
(
)
•
=

September 4, 2003 5:24 pm
Geometrical entities
204
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
With this change of variables, Eq. (16.44) becomes
 (16.47)
Suppose that 
. Then, if this result were for scalars rather than tensors, it would read
, 
or 
 
 (16.48)
Thus, we see that the vector  plays a role similar to that played by the discriminant in
scalar quadratics! As a matter of fact, note that Eq. (16.46) can be written
, 
 (16.49)
which is the analog of the scalar quadratic formula, 
. In the scalar
quadratic equation, there were only two values of  that would make 
. By contrast,
for the tensor case, setting 
 gives
 (16.50)
or, written in a somewhat different manner
, where 
 (16.51)
which describes a quadric surface (i.e., a family of  vectors exists that will make 
).
4ψ
A˜˜
1
– : y
˜
y
˜
b˜b˜
+
[
]
4c
–
=
ψ=0
0
1
a-- y2
b2
+
[
]
4c
–
=
y
b2
4ac
–
±
=
y
˜
x˜
2A˜˜
(
) 1
–
b˜
–
y
˜
+
(
)
•
=
x
b
–
b2
4ac
–
±
2a
--------------------------------------
=
y
ψ=0
ψ=0
0
A˜˜
1
– : y
˜
y
˜
b˜b˜
+
[
]
4c
–
=
y
˜
*
A˜˜
1
–
y
˜
*
•
•
1
=
y
˜
*
y
˜
b˜
A˜˜
1
–
b˜
•
•
4c
–
------------------------------------------
≡
y
˜
ψ=0

September 4, 2003 5:24 pm
Polar decomposition
205
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
17. Polar decomposition
Singular value decomposition
Let 
 denote an 
 matrix. The “singular value decomposition” theorem
from matrix analysis [26, 34] states there exist matrices 
, 
, and 
for which
(v)
 and 
 are orthogonal*.
(vi)
 is “pseudo-diagonal” (i.e., 
 whenever 
)
(vii)
 is positive semi-definite in the sense that its diagonal
 components, 
, are non-negative.
such that 
 can be written
 (17.1)
is valid. The numbers 
 make up the eigenvalues of 
 (and the 
 are the non-
negative square roots of 
, perhaps with some zeros added to fill out remaining diagonal
slots in 
); the columns of 
 hold the associated “right singular” eigenvectors. Simi-
larly, the numbers 
 make up the eigenvalues of 
 with columns of 
 holding
the associated “left singular” eigenvectors. The proof can be found in any good matrix
analysis book. The 
 are called the “singular values”. 
Special case: 
. Suppose now that all matrices have the same dimensions.
Since 
 is orthogonal, we know that 
 (17.2)
Therefore, Eq. (17.1), once specialized to square matrices, may be written without loss in
the form
,
 (17.3)
or
* As with most of the theorems cited in this book, this theorem does have a simple generalization to 
include the possibility that 
 is complex, in which case 
 and 
 would be unitary. For sim-
plicity, this book considers only real matrices so, in this context, unitary means the same thing as 
orthogonal.
“Our ability to delude ourselves may be
an important survival tool.”
— Lily Tomlin
F
[ ]M
N
×
M
N
×
q
[ ]M
M
×
r[ ]N
N
×
Λ
[
]M
N
×
q
[ ]
r[ ]
F
[ ]
q
[ ]
r[ ]
Λ
[
]
Λij
0
=
i
j
≠
Λ
[
]
i=j
(
)
Λi
F
[ ]
F
[ ]M
N
×
q
[ ]M
M
×
Λ
[
]M
N
×
r[ ]N
N
×
T
=
Λi
2
F
[ ]T F
[ ]
Λi
Λi
2
Λ
[
]
r[ ]
Λi
2
F
[ ] F
[ ]T
q
[ ]
Λi
M
N
=
q
[ ]
q
[ ]T q
[ ]
I[ ]
=
F
[ ]
q
[ ] Λ
[
] q
[ ]T q
[ ] r[ ]
=

September 4, 2003 5:24 pm
Polar decomposition
206
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
, where 
 and 
 (17.4)
Similarly, since 
 is orthogonal, we know that
 (17.5)
Therefore, Eq. (17.1) may be written without loss in the form
,
 (17.6)
or
, where 
 and 
 (17.7)
Note that 
 is itself orthogonal and that 
 and 
 are symmetric. Thus, the singular
value decomposition guarantees the existence of symmetric matrices 
 and 
 as well
as an orthogonal matrix 
 such that
 (17.8)
The polar decomposition theorem: 
In tensor analysis (especially in continuum mechanics), the singular-value decomposi-
tion theorem (specialized to invertible square matrices) is called the “polar decomposi-
tion” theorem. Specifically, for each invertible tensor 
 there exists a unique orthogonal
tensor 
, a unique symmetric positive definite “right stretch” 
, and a unique symmetric
positive definite “left stretch” 
 such that
 (17.9)
A tensor is called a stretch if it is symmetric and positive definite. Physically, a stretch
describes a deformation in which there is an orthonormal triad of material vectors that
change length but not orientation. These special vectors are the principal directions of the
stretch and the corresponding eigenvalues are the ratios of deformed length to undeformed
length. A physical interpretation of the polar decomposition is shown in Fig. 17.1. Note
that 
 represents a stretch 
 followed by a rotation 
. 
In the polar decomposition theorem, the descriptors “symmetric” and “positive defi-
nite” are requirements, not consequences. A stretch must be both symmetric and positive
definite — merely showing that a tensor 
 is symmetric is not sufficient to prove that it is
a stretch. For example, any rotation of exactly 
 will produce a symmetric 
 tensor,
but it will not be positive definite. 
The classic analytical procedure for finding 
, 
, and 
 is as follows:
• Construct a tensor 
, and perform a spectral analysis on it to find its 
eigenvalues 
 and eigenprojectors 
.* Then 
 and 
* If 
 is the eigenvector associated with 
, then the eigenprojector 
 equals the dyad 
, 
where there is no sum on k.
F
[ ]
V
[ ] R
[ ]
=
V
[ ]
q
[ ] Λ
[
] q
[ ]T
≡
R
[ ]
q
[ ] r[ ]
≡
r[ ]
r[ ] r[ ]T
I[ ]
=
F
[ ]
Q
[
] r[ ] r[ ]T Λ
[
] R
[ ]
=
F
[ ]
R
[ ] U
[
]
=
U
[
]
r[ ]T Λ
[
] r[ ]
≡
R
[ ]
q
[ ] r[ ]
≡
R
[ ]
U
[
]
V
[ ]
U
[
]
V
[ ]
R
[ ]
F
[ ]
R
[ ] U
[
]
V
[ ] R
[ ]
=
=
F˜˜
R˜˜
U˜˜
V˜˜
F˜˜
R˜˜
U˜˜
•
V˜˜
R˜˜
•
=
=
R˜˜
U˜˜
•
U˜˜
R˜˜
F˜˜
180°
F˜˜
R˜˜
U˜˜
V˜˜
C˜˜
F˜˜
T
F˜˜
•
=
Ck
P˜˜ k
C˜˜
C1P˜˜ 1
C2P˜˜ 2
C3P˜˜ 3
+
+
=
p
˜ k
Ck
P˜˜ k
p
˜ k
p
˜ k
⊗

September 4, 2003 5:24 pm
Polar decomposition
207
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
. The positive square root must be taken to 
make 
 positive definite.*
• Compute 
. 
• Compute 
. 
Alternatively, if only 
 is desired, it may be computed by 
. and then the
rotation would be given by 
. An excellent proof of the polar decomposition
theorem is in Ref. [24]. An invalid proof can be found in Ref. [18] where the authors
wrongly assert that a symmetric 
 is a stretch, which is false because a 
 rotation is a
symmetric tensor, but is not positive definite and therefore not a stretch; furthermore,
Ref. [18] fails to prove uniqueness.
* By computing 
 in the principal basis of 
, we have ensured that it will be symmetric. In general, 
an 
 positive definite symmetric matrix like 
 can have an infinite number of square roots, 
of which only 
 are symmetric and only one is symmetric and positive definite.
U˜˜
C˜˜
1 2
/
C1P˜˜ 1
C2P˜˜ 2
C3P˜˜ 3
+
+
=
=
U˜˜
U˜˜
C˜˜
N
N
×
C˜˜
2N
R˜˜
F˜˜
U˜˜
1
–
•
=
V˜˜
R˜˜
U˜˜
R˜˜
T
•
•
=
V˜˜
V˜˜
F˜˜
F˜˜
T
•
(
)1 2
/
=
R˜˜
V˜˜
1
–
F˜˜
•
=
F˜˜
180°

September 4, 2003 5:24 pm
Polar decomposition
208
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 
F˜˜
R˜˜
V˜˜
R˜˜
U˜˜
δ
˜ 1
V
δ
˜ 2
V
δ
˜ 2
U
δ
˜ 1
U
E˜ 1
E˜ 2
g
˜1
g
˜2
Figure 17.1.
Visualization of the polar decomposition.   This figure shows that the deformation 
 can
be visualized as two step process. The upper 
 path first applies the stretch 
 to compress the materi-
al by a factor of 
 in the direction of the vector labeled 
 and then the rotation tensor 
 rotates coun-
terclockwise by 
. The same deformation is achieved on the bottom path by first rotating by 
 and
then compressing by a factor of 
 in the direction of the vector labeled 
. In these figures, we have
“painted” a circle (or sphere in 3D) on the reference cube to show how it becomes an ellipse (or ellipsoid
in 3D). The vectors 
 and 
 lie on the major axes of the ellipse.
F˜˜
R˜˜
U˜˜
•
U˜˜
1 2
⁄
δ
˜1
U
R˜˜
60°
60°
1 2
⁄
δ
˜1
V
δ
˜ k
U
δ
˜ k
V
Compress the
material by half
along the ellipse
1-axis.
then rotate
the material
counterclockwise
by 60 degrees.
First rotate
the material
counterclockwise
by 60 degrees.
Then compress the
material by half
along the ellipse
1-axis.

September 4, 2003 5:24 pm
Polar decomposition
209
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Incidentally, because 
 is orthogonal, it follows that 
. Therefore, the rota-
tion can be alternatively be computed by 
 
or by
 (17.10)
which is sometimes more computationally convenient.
Polar decomposition is a nonlinear projection
Recall that the reference stretch tensor is computed by
,
 (17.11)
where the operator 
 is defined for any argument 
 by
 (17.12)
We have inserted the “+” sign in front of this equation to reiterate that the square root of a
tensor is not unique, but the positive definite square root is unique. The transformation 
is a projection in the sense defined in Eq. (6.44) because 
. In other
words, if 
 is already a symmetric positive definite tensor, then its associated polar
stretch is itself.
Similarly, the rotation tensor, can be regarded purely as a function of 
 as follows:
 (17.13)
The operator 
 is defined for any argument 
 by
 (17.14)
The operator 
 is a projector because 
. In other words, if 
 is already
a rotation, then its associated polar rotation tensor is itself.
Neither of the projectors, 
 or 
, are linear operators. The codomain is not a linear
manifold for either of these operators. The codomain for 
 is the set of all positive defi-
nite symmetric tensors. It’s true that the sum of two positive definite tensors is itself posi-
tive definite; however, an arbitrary linear combination of positive definite tensors (i.e., a
general combination that permits negative coefficients) will not be itself positive definite.
The codomain of 
 is the set of all orthogonal rotation tensors. This is not a linear space
because adding two orthogonal tensors will not result in an orthogonal tensor. 
The *FAST* way to do a polar decomposition in 2D 
For planar deformations, the deformation gradient tensor has the form
, where 
 (17.15)
R˜˜
R˜˜
R˜˜
T
–
=
R˜˜
F˜˜
T
–
U˜˜
•
=
R˜˜
V˜˜
F˜˜
T
–
•
=
U˜˜
P F˜˜
(
)
=
P
X˜˜
P X˜˜
(
)
+ X˜˜
T
X˜˜
•
(
)1 2
/
=
P
P P X˜˜
(
)
(
)
P X˜˜
(
)
=
F˜˜
F˜˜
R˜˜
F˜˜
U˜˜
1
–
•
F˜˜
+ X˜˜
T
X˜˜
•
(
)1 2
/
[
] 1
–
•
Q F˜˜
(
)
=
=
=
Q
X˜˜
Q X˜˜
(
)
X˜˜
X˜˜
T
X˜˜
•
(
) 1 2
/
–
•
=
Q
Q Q X˜˜
(
)
(
)
Q X˜˜
(
)
=
F˜˜
P
Q
P
Q
F
[ ]
F11 F12
0
F21 F22
0
0
0
F33
=
F33
0
>

September 4, 2003 5:24 pm
Polar decomposition
210
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
We claim by serendipity* that the polar decomposition can be performed rapidly by
the following formula:
, 
and 
 (17.16)
where 
 (17.17)
Beware! You must define 
 and 
 separately in order to uniquely determine the
rotation angle. It is certainly true that
,
 (17.18)
but this relation does not uniquely define the rotation angle because there are always two
angles 
 in the range from 0 to 
 that satisfy the above equation. By contrast there is
only one angle in the range from 0 to 
 that satisfies Eq. (17.17). The following code
fragment may be used to compute a polar rotation tensor in 2-D:
c = F(1,1)+F(2,2); s = F(2,1)-F(1,2);
d = Sqrt(c*c+ s*s);
c=c/d;s=s/d;
R(1,1)=c;R(2,1)=-s;R(1,2)=s;R(2,2)=c;
A fast and accurate numerical 3D polar decomposition
We have already described the classic analytical method for doing polar decomposi-
tion in 3D. This method, unfortunately, entails finding the eigenvalues of a 
 matrix.
Doing that requires solving a third-order characteristic equation. Analytical methods do
exist for finding roots of third-order equations, but those methods actually entail a fair
amount of computation, which makes them susceptible to round-off error and inefficiency.
Below, we outline an iterative method for obtaining a polar decomposition.
Insert algorithm here
* It’s easy to verify that our formulas yield an orthogonal [R] and a symmetric [U]. It is straightfor-
ward, but tedious, to also prove that our formula gives a positive definite [U] matrix. This property 
is essential in order to confirm the validity of our serendipitous formulas.
R
[ ]
θ
cos
θ
sin
–
0
θ
sin
θ
cos
0
0
0
1
=
U
[
]
R
[ ]T F
[ ]
=
θ
cos
F11
F22
+
F11
F22
+
(
)2
F21
F12
–
(
)2
+
-----------------------------------------------------------------------
=
θ
sin
F21
F12
–
F11
F22
+
(
)2
F21
F12
–
(
)2
+
-----------------------------------------------------------------------
=
θ
cos
θ
sin
θ
tan
F21
F12
–
(
)
F11
F22
+
(
)
⁄
=
θ
2π
2π
3
3
×

September 4, 2003 5:24 pm
Polar decomposition
211
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
You might feel uncomfortable about using an iterative algorithm, but you shouldn’t. In
numerical implementations, iterative algorithms can sometimes give you more accurate
results than analytical solutions when the analytical solutions involve numerous multipli-
cations, square roots, and other round-off error producing operations. You can obtain max-
imum accuracy from an iterative algorithm by testing for convergence against the machine
precision. The machine precision is the largest number P for which (P+1.0)-1.0 evaluates
to zero on your computer. For most computers running double precision, the machine pre-
cision P is in the neighborhood of 
. Even analytical solutions cannot hope to
achieve any more accuracy than machine precision.
Dilation-Distortion (volumetric-isochoric) decomposition
GOAL: Describe another (less common) multiplicative decomposition that breaks a tensor 
transformation into two parts, one part that captures size changes and the other part 
characterizing shape changes.
Like the polar decomposition, a different multiplicative decomposition to be described
in this section applies equally well to any tensor, but we will explain it in the physical con-
text that the tensor is a deformation gradient 
. The operation 
 describes a
homogenous deformation of space in which the initial position vector 
 is deformed into
a new location . A region having volume 
 in the initial configuration will deform into
a new region with deformed volume 
, and the two volumes are related by
, where 
 (17.19)
The “Jacobian”  is sometimes called the dilatation. It is improper, in general, to alterna-
tively use the term “dilation” because dilation properly means volume change without a
change in shape.* A deformation tensor generally describes both changes in volume and
changes in shape. For example, a cube will deform to a parallelepiped. The deformation
will purely dilational (shape preserving) if and only if the deformation gradient is isotro-
pic; hence, it would have to be proportional to the identity tensor, making it of the form
 for some scalar 
. Applying Eq. (3.99) for this special case of a 
 matrix, note
that the determinant of 
 is given by 
. Since this determinant must equal the Jacobian
, we can assert that 
 and therefore
A tensor 
 is a pure dilation if and only if 
, where 
.
 (17.20)
On the other extremely we can consider a pure distortion deformation (also called an
isochoric deformation), which is one that permits shape changes, but not volume
changes. 
A tensor 
 is a pure distortion if and only if 
.
 (17.21)
* Your pupils dilate when you see mouth watering food or an attractive person — your pupils grow in 
size, but still remain circular. Contrast this response with a feline’s slit-like pupils which dilatate 
(not just dilate) in response to light — a cat’s pupils change both size and shape.
1
10 20
–
×
F˜˜
x˜
F˜˜
X˜
•
=
X˜
x˜
Vo
V
V
JVo
=
J
detF˜˜
≡
J
αI˜˜
α
3
3
×
αI˜˜
α3
J
α
J1 3
/
=
F˜˜
F˜˜
J1 3
/ I˜˜
=
J
detF˜˜
≡
F˜˜
detF˜˜
1
=

September 4, 2003 5:24 pm
Polar decomposition
212
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The identity tensor is the only degenerate case that, according to these definitions would
be simultaneously a dilation and a distortion. This case is degenerate because the volume
does not change and the shape does not change. 
Now consider a tensor 
 that is potentially neither a pure dilation or a pure distortion.
We wish to decompose this general deformation into two separate (multiplicative) steps, a
dilation followed by a distortion. That is, we seek an isotropic tensor 
 and an isochoric
tensor 
 such that 
. Of course, since 
 is isotropic it will also be true that
. Knowing that 
 and 
 shows that 
 and therefore 
, where 
.
 (17.22)
from which it follows that
 (17.23)
Thermomechanics application. The dilation-distortion decomposition (DDD) is
useful to resolve one particularly vexing issue in generalizing thermodynamics for gases
to solids. In gas thermodynamics, the specific internal energy  is typically regarded as a
function of the entropy  and the specific volume (
). Consequently, by using the
chain rule, the time rate of the internal energy can be written
 (17.24)
where
 (17.25)
and
 (17.26)
As written,  and  are merely mathematical entities lacking physical meaning. However,
for gas dynamics, you can use the second law to assert that they must be the pressure and
temperature respectively. The negative sign is used in Eq. (17.25) because, by convention,
pressure is positive in compression. Another commonly used energy-like quantity, the
enthalpy is defined
 (17.27)
When generalizing to thermoelasticity of solids similar analysis techniques are used.
The internal energy of a thermoelastic solid is presumed to depend on entropy  and some
measure of strain or deformation, which we will denote 
. This tensor is not the same as
the tensor 
 from the polar decomposition, though some people might choose it to be
since the polar stretch is a measure of deformation. Other people might choose 
 to be,
F˜˜
A˜˜
G˜˜
F˜˜
A˜˜
G˜˜
•
=
A˜˜
F˜˜
G˜˜
A˜˜
•
=
detF˜˜
J
=
detG˜˜
1
=
detA˜˜
J
=
A˜˜
J1 3
/ I˜˜
=
J
detF˜˜
≡
G˜˜
J 1 3
/
–
F˜˜
=
u
s
v
1 ρ
⁄
≡
u·
Ts·
pv·
–
=
p
∂u
∂v
------




s
–
=
T
∂u
∂s
------




v
=
p
T
h
u
pv
+
=
s
V˜˜
V˜˜
V˜˜

September 4, 2003 5:24 pm
Polar decomposition
213
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
say, the Lagrange strain from continuum mechanics theory while others might choose 
to simply be the deformation gradient 
. Associated with your choice for 
, there must
exist a so-called “conjugate” specific stress tensor 
 such that the rate of internal energy
can be written
 (17.28)
This is the solid mechanics analog of Eq. (17.24). There is a difference of sign in the
mechanical p-v work term because, unlike gases, stress is typically taken to be positive in
tension in solid mechanics. It can be shown that the generalization of Eqs. (17.25) and
(17.26) are
 (17.29)
and
 (17.30)
Again, there is a sign difference in the first of these equations because of the sign conven-
tion for stress. The generalization of the enthalpy in Eq. (17.27) is
 (17.31)
Typically, the tensor 
 chosen to be something dimensionless such as a strain or the
deformation gradient tensor. Contrast this with the situation in gas dynamics where the
analogous variable  has dimensions of 1/mass. In thermoelasticity, the specific internal
energy must still be energy/mass. Hence, if 
 is dimensionless, 
 must have dimensions
of energy per mass. Stress has dimensions of energy per volume. Therefore 
 can be
regarded as a stress divided by density, which is why we called it a specific stress. Using
concepts from continuum mechanics, the expression 
, called the stress power must be
expressible in any of the following forms:
 (17.32)
 (17.33)
 (17.34)
Here, 
 is the Cauchy stress tensor (it is the stress tensor that undergraduate engineering
students learn about, defined to be force per unit deformed area), 
 is the symmetric part
of the velocity gradient, 
 is the initial density (equal to the current density 
 times the
Jacobian ),  is the Lagrange strain [defined 
],  is the Second-Piola-
Kirchhoff stress [defined 
], 
 is the deformation gradient tensor, and
 is the First-Piola-Kirchhoff stress [defined 
]. 
V˜˜
F˜˜
V˜˜
P˜˜
u·
P˜˜
:V˜˜
·
Ts·
+
=
P˜˜
∂u
∂V˜˜
-------




s
=
T
∂u
∂s
------




V˜˜
=
h
u
P˜˜
:V˜˜
+
=
V˜˜
v
V˜˜
P˜˜
P˜˜
P˜˜
:V˜˜
·
P˜˜
:V˜˜
·
1
ρ---σ
˜˜
:D˜˜
=
P˜˜
:V˜˜
·
1
ρo
-----s˜˜
:ε
˜˜
·
=
P˜˜
:V˜˜
·
1
ρo
-----t˜˜
:F˜
·
˜
=
σ
˜˜
D˜˜
ρo
ρ
J
ε
˜˜
ε
˜˜
1
2-- F˜˜
T
F˜˜
•
I˜˜
–
(
)
=
s˜˜
s˜˜
JF˜˜
1
–
σ
˜˜
F˜˜
T
–
•
•
=
F˜˜
t˜˜
t˜˜
Jσ
˜˜
F˜˜
T
–
•
σ
˜˜
F˜˜
C
•
=
=

September 4, 2003 5:24 pm
Polar decomposition
214
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Although the tensor 
 is somewhat “rate-like” it is a well-known result from contin-
uum mechanics that there exists no tensor 
 such that 
. Consequently, Eq. (17.32)
provides no guidance for assigning a mathematically well-founded meaning for 
. On the
other hand, Eq. (17.33) is of the proper structure to permit us to choose
 and 
 (17.35)
Likewise, Eq. (17.34) admits the alternative choice
 and 
 (17.36)
Is there anything that makes either of these two choices preferable? Either of these conju-
gate pairs will give the same result for the stress power. However, these two choices will
give different results for the product 
 that appears in the enthalpy Eq. (17.31). Con-
sider, for example, a purely dilational (nondistortional) deformation for which 
and (for an isotropic material) 
. In this special case, noting that
,
 (17.37)
and
 (17.38)
Neither of these versions of 
 reduce to the same value, nor do they reduce to 
from gas dynamics. Consequently, thermoelasticity theory with these conjugate pairs
won’t reduce down to classic gas and inviscid fluid thermodynamics when the material
and the deformation are both isotropic. Another strain choice, the logarithmic or Hencky
strain, also comes close to reducing to the gas equations, but using it entails serious com-
putational overhead. At the root of the problem is the fact that gas thermodynamics is cast
in terms of volumetric strains whereas solid mechanics is cast in terms of linear strains.
D˜˜
V˜˜
D˜˜
V˜˜
·
=
V˜˜
V˜˜
ε
˜˜
=
P˜˜
1
ρo
-----s˜˜
=
V˜˜
F˜˜
=
P˜˜
1
ρo
-----t˜˜
=
P˜˜
:V˜˜
F˜˜
J1 3
/ I˜˜
=
σ
˜˜
pI˜˜
–
=
ρo
ρJ
J v
⁄
=
=
1
ρo
-----s˜˜
:ε
˜˜
1
2--pv 1
J 2 3
/
–
–
(
)
–
=
1
ρo
-----t˜˜
:F˜˜
3pv
–
=
P˜˜
:V˜˜
pv
–

September 4, 2003 5:24 pm
Material symmetry
215
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
18. Material symmetry
The symmetry of a material is measured by how its properties vary with material ori-
entation. If the material properties are unaffected by material orientation, then the material
is said to be proper isotropic. If the material properties are additionally unchanged
upon a reflection, then the tensor is strictly isotropic. If the material properties are unaf-
fected by rotation about some given vector 
, as for unidirectional fiber-reinforced plas-
tics or plywood, then the material is transversely isotropic. The tensor theory of
symmetries is covered in a rigorous and elegant manner through the use of group theory.
Here will only give a simple overview of the results of greatest use in material modeling.
Similar concepts apply to tensor analysis. If the components of a tensor are unchanged
upon an orthonormal right-handed change of basis, then the tensor is said to be proper
isotropic. If the tensor components are also unchanged upon reflections, then the tensor
is strictly isotropic. In physical applications, there are many instances when reflections
are not permitted (e.g., in materials modeling, that would entail turning a material inside-
out, which is not of interest). Any tensor that is strictly isotropic will also be proper isotro-
pic. Proper-isotropy is a broader property of significant physical interest, so you should
always characterize proper-isotropy constraints before investigating strict-isotropy. If the
components of a tensor are unchanged for any rotation of the basis about some given vec-
tor , then the tensor is transversely isotropic. 
What is isotropy?
GOAL: Describe two competing definitions of isotropy and the relative merits of each.
There are two possible ways to define isotropy. 
(i)
Definition 1: a tensor is strictly-isotropic if its components
are unchanged upon any orthonormal change in basis
(ii)
Definition 2: a tensor is proper-isotropic if its components
are unchanged upon any same-handed change in basis
Consider a second-order tensor 
 of class 
. According to definition #1, this tensor is
isotropic if 
Strict isotropy: 
 for any orthogonal matrix 
 (18.1)
According to definition number 2, the tensor is proper-isotropic if 
“Advice is what we ask for when we already 
know the answer, but wish we didn’t.” 
— Erica Jong 
a˜
a˜
A˜˜
V32
QipQjqApq
Aij
=
Q
[
]

September 4, 2003 5:24 pm
Material symmetry
216
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Proper isotropy: 
 for any proper orthogonal matrix 
 (18.2)
A proper orthogonal tensor (i.e., an orthogonal tensor with determinate 
) is a rotation
operation. When a tensor is proper-isotropic, we are saying that it “looks the same” no
matter what orientation you view it from. Stated differently, if you hold yourself fixed,
then the tensor “looks the same” no matter how much you turn it. For proper-isotropy,
there is no guarantee that the tensor won’t look different if you invert it (i.e., if you switch
to a left-handed basis). Strict isotropy insists that the tensor must also look the same for
both rotations and reflections.
So which definition is more useful? Clearly, strict-isotropy is more restrictive because
satisfaction of Eq. 18.1 automatically guarantees satisfaction of 18.2, but not vice-versa.
Which definition is more useful from a practical standpoint? We contend that proper-isot-
ropy is more meaningful for engineering applications. In the vast majority of physics
applications, you want to know when something will be unchanged upon a rotation, but
you don’t care what happens upon a (non-physical) reflection. Knowledge of proper-isot-
ropy (even when strict-isotropy does not hold) is very useful information and should be
tested first in order to not discount important tensors. Unless otherwise stated, we take the
term “isotropic” to mean “proper-isotropic.”
As a general rule, to determine the most general form for an isotropic tensor, you
should consider restrictions placed on the components of a tensor for particular choices of
the rotation tensor, which will simplify your general analysis for exploring the set of all
possible rotations. Good “particular” choices for the rotations are 
 rotations about the
coordinate axes:
,
,
and 
 (18.3)
The component restrictions arising from these special choices will only give you neces-
sary conditions for isotropy. However, frequently, these necessary conditions turn out to
also be sufficient conditions. 
For example, to deduce the most general form for an isotropic vector , you would
demand that its components satisfy the equation 
 or, in matrix form,
 (18.4)
This must hold for all proper-orthogonal matrices 
. Consequently, it must hold for any
of the special cases in Eq. 18.3. Considering the first case,
RipRjqApq
Aij
=
R
[ ]
+1
90°
0
1
–
0
1 0 0
0 0 1
0 0 1
0 1 0
1
–
0 0
1 0 0
0 0
1
–
0 1 0
v˜
Ripvp
vi
=
R11 R12 R13
R21 R22 R23
R31 R32 R33
v1
v2
v3
v1
v2
v3
=
R
[ ]

September 4, 2003 5:24 pm
Material symmetry
217
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
, 
or
 
 (18.5)
With this simple test, we have already learning an important necessary condition for a
vector to be isotropic. Namely, 
 must equal 
 and 
 must also equal 
. The only
way one number can equal another number and the negative of that other number is if both
numbers are zero. Thus, an isotropic vector would have to be of the form 
. We
can use this information in a second necessary condition of isotropy where we use the sec-
ond choice in Eq. 18.3:
, 
or
 
 (18.6)
This result tells us that 
 itself must be zero. In other words, a necessary requirement for
a vector to be isotropic is that the vector’s components must all be zero (vectors are bor-
ing). Now that these two specialized tests have greatly simplified the nature of vectors that
can be isotropic, it is time to use these necessary conditions in the general equation 18.4.
Trivially, if a vector is zero, then Eq. 18.4 is satisfied. Thus, the zero vector is the only iso-
tropic vector.
Looking now at second-order tensors, note that any linear combination of isotropic
tensors is itself isotropic. By this we mean if 
 and 
 (each of class 
) are isotropic,
then
and 
 (18.7)
and it follows that any linear combination 
 will be isotropic because
 (18.8)
Important consequence. Since any linear combination of isotropic tensors (of a
given class) will itself be isotropic, it follows that the set of isotropic tensors (of that class)
is a linear subspace. Thus, the zero tensor will always be an isotropic tensor. More impor-
tantly, if there exist any non-trivial (i.e., nonzero) isotropic tensors, then there must exist a
basis for the subspace of all isotropic tensors of that type. For example, below we prove
that a second-order tensor of class 
 is isotropic if and only if it is some multiple of the
identity tensor. Consequently, the identity tensor itself is a basis for the subspace of isotro-
pic tensors of class 
. There’s only one base tensor, so this must be a one-dimensional
space. Projecting an arbitrary tensor onto this space (using the projection techniques cov-
ered in this document) gives you the isotropic part of that tensor. Interestingly, we will
find that the dimension of the space of isotropic tensors depends on both the order of the
tensor and on the dimension of physical space. Given tensors of class 
, the space of
isotropic tensors depends on both 
 and .
0
1
–
0
1 0 0
0 0 1
v1
v2
v3
v1
v2
v3
=
v2
–
v1
v3
v1
v2
v3
=
v2
v1
–
v2
v1
<0 0 v3
, ,
>
0 0 1
0 1 0
1
–
0 0
0
0
v3
0
0
v3
=
v3
0
0
0
0
v3
=
v3
A˜˜
B˜˜
V3
2
RipRjqApq
Aij
=
RipRjqBpq
Bij
=
αA˜˜
βB˜˜
+
RipRjq αApq
βBpq
+
(
)
α RipRjqApq
(
)
β RipRjqBpq
(
)
+
αAij
βBij
+
=
=
V3
2
V3
2
Vm
n
m
n

September 4, 2003 5:24 pm
Material symmetry
218
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Isotropic second-order tensors in 3D space
In earlier sections, we introduced the notion of vector and tensor invariants. Ordi-
narily, vector and tensor components will change upon a change in basis and hence com-
ponents are numbers, but not scalar invariants. Now we ask what relationships must be
satisfied if the components themselves are to remain unchanged upon a change of basis.
Such relationships define isotropic tensors. A vector or tensor is called isotropic if its
components are the same with respect to any orthonormal basis. Any linear combination
of isotropic tensors is itself an isotropic tensor. Therefore, the set of all isotropic tensors
(of a given order) forms a subspace. By this, we mean that there exists a finite number of
“primitive” isotropic tensors that serve as a basis such that any isotropic tensor may be
expressed as a linear combination of the primitive isotropic base tensors.
First we will prove that the only isotropic vector is the zero vector. Referring to Eq.
(13.11), a vector is isotropic if and only if 
 for any coordinate transformation.
Consequently, we seek conditions on the vector components such that
 for all orthogonal 
or, in matrix form, 
 for all orthogonal 
 (18.9)
Since this must hold for all orthogonal 
, it must also hold for any particular choice for
an orthogonal 
. Choosing
 
 (18.10)
shows that one restriction on the vector components must be 
. Other choices for the
orthogonal tensor eventually reveals that not only must the components of the vector all be
equal, the only way to satisfy Eq. (18.9) is for all of the components to be zero. Hence, the
only isotropic vector is the zero vector.
Referring to Eq. (13.14), a second-order tensor in 3D space is isotropic if and only if
 for all orthogonal 
 (18.11)
This condition implies that the tensor must be a scalar times the identity tensor . In
other words, the most general form for an isotropic tensor referenced to 3D space is
 (18.12)
where 
 is an arbitrary scalar. Isotropic tensors in 3D space is therefore one-dimensional
since only one scalar is needed. The identity tensor
 is a basis for this space. Any general
tensor 
 may be projected to its isotropic part by the operation
v˜k
vˆk
=
vj
viQji
=
Qji
v
{ }
Q
[
] v
{ }
=
Q
[
]
Q
[
]
Q
[
]
Q
[
]
0 1 0
1
–
0 0
0 0 1
=
v1=v2
T
[ ]
Q
[
] T
[ ] Q
[
]T
=
Q
[
]
I˜˜
α 0 0
0 α 0
0 0 α
α
I˜˜
B˜˜

September 4, 2003 5:24 pm
Material symmetry
219
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (18.13)
Note that 
 and 
. Hence, 
 (18.14)
This is a very familiar result. The idea of finding the isotropic part by projecting to the
space of isotropic tensors becomes less obvious when considering tensors in spaces of dif-
ferent dimensions.
Isotropic second-order tensors in 2D space
GOAL: Demonstrate that the proper-isotropic space is two dimensional for tensors of class 
V22, in stark contrast to the result for V23. The strict-isotropic space is one-dimensional.
To consider both proper-isotropy and strict-isotropy of tensors of class 
 (i.e., ten-
sors in two-dimensions that can be represented by 
 matrices), we first need to iden-
tify the general form for an orthogonal tensor in this space.
Let 
 (18.15)
We seek restrictions on the components 
 such that
 (18.16)
or
 (18.17)
Multiplying this out shows that the components must satisfy
 (18.18)
We can satisfy the first two constraints automatically by setting
, 
, 
 (18.19)
Then satisfying the last constraint requires that
 (18.20)
or
 (18.21)
or
isoB˜˜
I˜˜
I˜˜
:B˜˜
(
)
I˜˜
:I˜˜
----------------
=
I˜˜
:B˜˜
trB˜˜
=
I˜˜
:I˜˜
trI˜˜
3
=
=
isoB˜˜
1
3-- trB˜˜
(
)I˜˜
=
V2
2
2
2
×
Q
a b
c d
=
a b c and d
, , ,
(
)
Q
[
]T Q
[
]
I[ ]
=
a c
b d
a b
c d
1 0
0 1
=
a2
c2
+
1
=
b2
d2
+
1
=
ab
dc
+
0
=
a
α
cos
=
c
α
sin
=
b
β
cos
=
d
β
sin
=
α
cos
β
cos
α
sin
β
sin
+
0
=
β
α
–
(
)
cos
0
=

September 4, 2003 5:24 pm
Material symmetry
220
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (18.22)
Putting this result back into Eq. 18.19 using 
 gives
, 
, 
 (18.23)
Putting this result back into Eq. 18.15 yields a proper orthogonal matrix, so we will denote
it by 
. Namely,
 (18.24)
On the other hand, substituting Eq. 18.22 back into Eq. 18.19 using 
 gives
, 
, 
 (18.25)
Putting this result back into Eq. 18.15 yields an improper orthogonal matrix, 
 (18.26)
Equation 18.24 is the most general form for a proper orthogonal matrix in 2D and 18.26 is
the most general form for an improper matrix. With this result in hand, we are ready to
explore the nature of isotropic tensors in 2D. For a second order tensor to be proper isotro-
pic its components must satisfy
 (18.27)
Considering, as a special case, 
 gives
 (18.28)
or
 
and 
 (18.29)
Since this result was obtained by considering a special rotation, we only know it a neces-
sary condition for isotropy. However, substituting this condition back into Eq. 18.27
shows that it is also a sufficient condition.
Consequently, the most general form for an isotropic tensor referenced to 2D space is
of the form
 (18.30)
β
α
π
2---
±
=
β
α
π
2---
+
=
a
α
cos
=
c
α
sin
=
b
α
sin
–
=
d
α
cos
=
R
[ ]
R
[ ]
α
cos
α
sin
–
α
sin
α
cos
=
β
α
π
2---
–
=
a
α
cos
=
c
α
sin
=
b
α
sin
=
d
α
cos
–
=
Q
[
]
α
cos
α
sin
α
sin
α
cos
–
=
α
cos
α
sin
–
α
sin
α
cos
A11 A12
A21 A22
α
cos
α
sin
α
sin
–
α
cos
A11 A12
A21 A22
=
α
π
2---
=
0
1
–
1 0
A11 A12
A21 A22
0 1
1
–
0
A11 A12
A21 A22
=
A11
A22
=
A12
A21
–
=
a b
b
–
a

September 4, 2003 5:24 pm
Material symmetry
221
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
where  and  are arbitrary parameters. Any tensor in 2D space that is of this proper-iso-
tropic form may be expressed as a linear combination of the following two primitive base
tensors:
 and 
 (18.31)
Note that  is the 2D version of the permutation symbol; namely, 
 is zero if 
, it is +1
if 
, and it is –1 if 
. In two dimensions, the (proper) isotropic part of a second-
order tensor 
 would be obtained by projecting the tensor onto the space spanned by the
basis in Eq. (18.31). This basis is orthogonal, but not normalized, so the appropriate pro-
jection operation is
= 
= 
 (18.32)
In component form,
 (18.33)
Incidentally, the 2D polar rotation tensor associated with any 2D 
 tensor is proportional
to 
. Specifically,
for 2D space only!.
 (18.34)
This formula provides a particularly convenient (and barely known) method for finding
the polar decomposition for 2D problems.
Recall that proper isotropy is less constraining than strict-isotropy. To be strictly iso-
tropic, a tensor must first be proper-isotropic, which means it must be of the form
 (18.35)
This result guarantees that the components of the tensor will be unchanged under a proper
(same-handed) basis transformation. To be proper isotropic, it must also satisfy transfor-
mations using the matrix 
 from Eq. 18.26. Namely
a
b
I˜˜
[ ]
1 0
0 1
=
ε
˜˜
[ ]
0 1
1
–
0
=
ε
˜˜
εij
i=j
ij=12
ij=21
F˜˜
isoF˜˜
I˜˜
I˜˜
:F˜˜
(
)
I˜˜
:I˜˜
----------------
ε
˜˜
ε
˜˜
:F˜˜
(
)
ε
˜˜
:ε
˜˜
-----------------
+
=
1
2--I˜˜
I˜˜
:F˜˜
(
)
1
2---ε
˜˜
ε
˜˜
:F˜˜
(
)
+
I˜˜
F11
F22
+
(
)
2
------------------------------
ε
˜˜
F12
F21
–
(
)
2
------------------------------
+
isoF˜˜
1
2-- F11
F22
+
F12
F21
–
F21
F12
–
F11
F22
+
=
F˜˜
isoF˜˜
R˜˜
1
F11
F22
+
(
)2
F12
F21
–
(
)2
+
----------------------------------------------------------------------- F11
F22
+
F12
F21
–
F21
F12
–
F11
F22
+
=
a b
b
–
a
Q
[
]

September 4, 2003 5:24 pm
Material symmetry
222
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (18.36)
Considering 
 shows that  must be zero, which also is easily confirmed to be a suf-
ficient condition to satisfy Eq. 18.36. Consequently, for strict isotropy, a second-order ten-
sor in 2D must be a multiple of the identity. That is, the permutation tensor  is proper-
isotropic, but not strictly isotropic. Its components will change sign upon changing to a
differently handed basis. In dyadic form, the permutation tensor may be written
 (18.37)
Changing to a different-handed basis (i.e., exchanging 
 and 
) will automatically
change the sign of the components.
Isotropic fourth-order tensors
Turning our attention back to tensors in 3D space, the most general form for a fourth-
order isotropic tensor 
 is 
 (18.38)
For a proof, see, for example, Ref. [2]. The above expression has three arbitrary parame-
ters, so the space of isotropic fourth-order tensors is three-dimensional,* with base tensors
given by the parentheses above. The basis tensors in the parentheses of Eq. (18.38) are
only one choice for the basis. In material modelling, a more convenient basis for the space
of isotropic fourth-order tensors is
 (18.39a)
 (18.39b)
 (18.39c)
Note that these are all constructed from linear combinations of the primitive basis of
Eq. (18.38). Even though the component formulas for this alternative basis are consider-
ably more complicated, the properties of this basis are irresistible. Specifically, the basis
of Eq. (18.39) consists of complementary projectors! By this we mean
,
,
 (18.40)
,
,
 (18.41)
,
,
 (18.42)
* The space is two dimensional if one imposes a minor symmetry restriction that 
. 
That’s why isotropic elastic materials have only two independent stiffness moduli.
α
cos
α
sin
α
sin
α
cos
–
a b
b
–
a
α
cos
α
sin
α
sin
α
cos
–
a b
b
–
a
=
α
0
=
b
ε
˜˜
ε
˜˜
e˜1e˜2
e˜2e˜1
–
=
e˜1
e˜2
cijrs
cijrs
α δijδrs
(
)
β δirδjs
(
)
γ δisδjr
(
)
+
+
=
cijrs=cjirs=cijsr
Pijkl
iso
1
3--δijδkl
=
Pijkl
symdev
1
2-- δikδjl
δilδjk
+
(
)
1
3--δijδkl
–
=
Pijkl
skew
1
2-- δikδjl
δilδjk
–
(
)
=
Pijkl
iso Pklmn
iso
Pijmn
iso
=
Pijkl
iso Pklmn
symdev
0
=
Pijkl
iso Pklmn
skew
0
=
Pijkl
symdevPklmn
iso
0iso
=
Pijkl
symdevPklmn
symdev
Pijmn
symdev
=
Pijkl
symdevPklmn
skew
0
=
Pijkl
skewPklmn
iso
0
=
Pijkl
skewPklmn
symdev
0
=
Pijkl
skewPklmn
skew
Pijmn
skew
=

September 4, 2003 5:24 pm
Material symmetry
223
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Recall that second-order tensors don’t really take on any meaning until they act on a
vector. Likewise, the meaning of a fourth-order tensor should be inferred by operating on
a second-order tensor. For any tensor 
, note that
 (18.43)
 (18.44)
 (18.45)
Thus, 
 returns the isotropic part of 
, 
 returns the symmetric-deviatoric part
of 
, and 
 returns the skew-symmetric part of skew-symmetric part of 
. 
Finding the isotropic part of a fourth-order tensor
GOAL: Reiterate the concept of projections by showing an advanced, higher-order, 
application.
Fourth-order tensors are of class 
, but they are also of class 
. In other words,
they may be regarded as 81-dimensional vectors. The set of isotropic fourth-order engi-
neering tensors (IFOET) is closed under tensor addition and scalar multiplication. This
means that any linear combination of IFOET tensors will itself be IFOET. Therefore, the
set of all IFOET tensors forms a subspace of general fourth-order engineering tensor
space.
In the previous section, we showed that any IFOET tensor can be written as a linear
combination of 
, 
, and 
. These three tensors therefore form a basis for
the set of all IFOET tensors, and the IFOET subspace must be 3-dimensional. This basis is
orthogonal (e.g., 
), but it is not normalized. We can define an orthonormal
basis for IFOET tensors as
 (18.46a)
 (18.46b)
 (18.46c)
The denominators in this equation are the magnitudes of the tensors in the numerators,
obtained by taking the square root of the inner product of the tensors with themselves. The
denominators can be easily remembered because for ordinary second-order engineering
tensors (class 
) isotropic tensors have 1 independent component, symmetric deviatoric
tensors have 5 independent components, and skew-symmetric tensors have three indepen-
dent components.
B˜˜
Pijkl
iso Bkl
1
3--Bkkδij
=
Pijkl
symdev
1
2-- Bij
Bji
+
(
)
1
3--Bkkδij
–
=
Pijkl
skewBkl
1
2--- Bij
Bji
–
(
)
=
Pijkl
iso
B˜˜
Pijkl
symdev
B˜˜
Pijkl
skew
B˜˜
V3
4
V81
1
Pijkl
iso
Pijkl
symdev
Pijkl
skew
Pijkl
iso Pijkl
skew
0
=
Pˆ
ijkl
iso
Pijkl
iso
≡
Pˆ ijkl
symdev
Pijkl
symdev
5
------------------
≡
Pˆ
ijkl
skew
Pijkl
skew
3
-------------
≡
V3
2

September 4, 2003 5:24 pm
Material symmetry
224
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If three 
-dimensional orthonormal vectors 
, 
 and 
, form a basis for a 3D
subspace embedded in the m-dimensional (class 
) vector space, then any vector 
 in
the higher dimensional space can be projected to the 3D subspace by applying the opera-
tion
 (18.47)
where
 (18.48)
and the “*” denotes the inner product in the 
 space.
We are interested in finding the IFOET part of a general fourth-order engineering ten-
sor 
. This is accomplished by projecting that tensor to the IFOET subspace. Using Eq.
(18.47), this operation is found by
 (18.49)
where the components of the sixth-order (
) tensor are found by using Eq. (18.46) as the
orthonormal basis in Eq. (18.48). Namely,
 (18.50)
A scalar measure of “percent anisotropy”
GOAL: 
Add this topic
Transverse isotropy
A material property is said to be “transversely isotropic” about a given unit vector  if
the material can be rotated about this vector without changing the material property. If the
property is a scalar invariant, then by definition it cannot change when the basis is rotated.
The concept of transverse isotropy becomes increasingly complicated for vector and
higher order tensor properties. 
In what follows, we often consider a “material orthogonal basis” 
 such
that 
. This basis will not generally coincide with the “laboratory basis”
 used in general calculations. Components with respect to the material basis
are called material components. Components with respect to the laboratory basis are
called laboratory components. Our goal in what follows is to show the simplified material
components of transversely isotropic vectors and tensors and then to show how those ten-
sors may be expressed directly in the laboratory components without having to perform a
coordinate transformation.
A vector 
 is transversely isotropic if and only if its material components are of the
form
m
n1
n2
n3
Vm
1
x
xprojected
P*x
=
P
n1n1
n2n2
n3n3
+
+
=
Vm
1
Xijkl
Xijkl
IFOET
PijklpqrsXpqrs
=
V3
6
Pijklpqrs
Pijkl
iso Ppqrs
iso
1
5---Pijkl
symdevPpqrs
symdev
1
3--Pijkl
skewPpqrs
skew
+
+
=
a˜
p
˜ 1 p
˜ 2 p
˜ 3
,
,
{
}
p
˜ 3
a˜
=
e˜1 e˜2 e˜3
,
,
{
}
u˜

September 4, 2003 5:24 pm
Material symmetry
225
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 
in the material basis 
 (18.51)
In other words, the only vector that remains unchanged when rotated about the material
symmetry direction  is one that is itself proportional to . Thus, since  is a unit vector,
the most general form for a transversely isotropic vector u is 
 (18.52)
Thus, in the laboratory basis, 
in the laboratory basis 
 (18.53)
Now consider a general second-order tensor 
. To be transversely-isotropic, the
material components of must be of the form
 
in the material basis 
 (18.54)
Here, the subscripts “t” and “a” indicate transverse and axial (relative to the symmetry
axis), and the subscript “s” indicates shear. If the tensor is symmetric, then it cannot have
shear terms and its most general form is
 
in the material basis 
 (18.55)
In other words, the tensor must be diagonal in the material basis, with the 11 and 22 trans-
verse components equal. Thus, transverse isotropy means the tensor must be isotropic in
the transverse plane. In dyadic notation, the above equation may be written
 (18.56)
Recall that Eq. (9.24) is true in any orthogonal system; therefore it holds for the material
coordinate system and Eq. (18.56) can therefore be written
 (18.57)
or, since 
 (18.58)
u˜
{ }
0
0
u3










=
p
˜ i
{
}
a˜
a˜
a˜
u˜
u3a˜
=
u˜
u3
a1
a2
a3










=
e˜i
{
}
A˜˜
A˜˜
[
]
At
As
–
0
As At
0
0
0
Aa
=
p
˜ i
{
}
A˜˜
[
]
At 0
0
0 At 0
0 0 Aa
=
p
˜ i
{
}
A˜˜
At p
˜ 1p
˜ 1
p
˜ 2p
˜ 2
+
(
)
Aap
˜ 3p
˜ 3
+
=
A˜˜
At I˜˜
p
˜ 3p
˜ 3
–
(
)
Aap
˜ 3p
˜ 3
+
=
p
˜ 3
a˜
=
A˜˜
At I˜˜
a˜a˜
–
(
)
Aaa˜a˜
+
=

September 4, 2003 5:24 pm
Material symmetry
226
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Rearranging a bit gives the most general direct notation form for a transversely isotropic
second-order tensor.
 (18.59)
The tremendous advantage of Eq. (18.59) over the matrix representation of Eq. (18.54) is
that Eq. (18.59) can be computed directly in the laboratory basis without having to per-
form a coordinate transformation. Namely, in the laboratory basis,
 (18.60)
Furthermore, the Eq. (18.59) is more useful when the transverse axis is changing dynami-
cally because Eq. (18.59) can be differentiated with respect to time.
A˜˜
AtI˜˜
Aa
At
–
(
)a˜a˜
+
=
A˜˜
[
]
At
1 0 0
0 1 0
0 0 1
Aa
At
–
(
)
a1a1 a1a2 a1a3
a2a1 a2a2 a2a3
a3a1 a3a2 a3a3
+
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
227
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
19. Abstract vector/tensor algebra
Structures
GOAL: What are structures, and why use them? Motivate writing down operations in 
purposely abstract, counter-intuitive, notation to ensure that you don’t introduce your own 
bias into the analysis.
On page 2, we cited familiar examples of structures, which we defined loosely to be a
collection of symbols written down on the page in a carefully prescribed manner and sub-
ject to immutable assembly and manipulation rules. The notion of structure type also came
up. Deciding if one thing is of the same type as something else is often subtle. An orange,
for example might be considered to be of the same type as a lemon (they are both citrus
fruits). An apple doesn’t fall into the citrus category, but apples, lemons, and oranges all
fall into the broader category of “fruit.” When exploring structures, you typically want to
identify the largest category that will satisfy all of the structure rules (postulates).
For illustration purposes, let’s just “invent” a few new structures. Let’s put three
objects (each of the same type) inside a pyramid and declare that this structure represents a
a new object of the same type:
 (19.1)
With structures, you will often want to avoid endowing anything with physical meaning.
For example, when considering the natural logarithm structure, 
, you might want to
replace it with 
 so that you won’t accidentally assert anything that does not follow
from primitive postulates (e.g., you would be less likely to replace 
 by 
 unless
you had a rule about  that would permit it; working with 
, you might accidentally
impose what you know about logarithms to say this equals 
 without really proving
it). Writing an operation into a new, unfamiliar, notation is an important step towards dis-
covering if other operations might obey identical structure rules. If so, anything you prove
about the first operation will automatically be true for the other structure.
In addition to our triangle structure, let’s suppose that we also have other structures
with equally odd-looking notation (we will call them the lower and upper box structures)
 
and 
 (19.2)
“Don’t worry about people stealing an idea.
If it’s original, you will have to ram it down
their throats.” 
— Howard Aiken
a
b   c
x
ln
f x
( )
f x3
(
)
3f x
( )
f
x3
ln
3
x
ln
r    s
p   q

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
228
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Again, we will require that these structures represent objects of the same “type” as the
individual parts (e.g., if  and  are fruits, then 
 is a fruit too — perhaps the result of
cross breeding). Without ever defining what the structures mean, we could start asserting
“rules of behavior” (postulates taken to be true without question). For example, we could
demand that the upper and lower box structures must satisfy a commutivity property:
 = 
 and
 = 
 (19.3)
Incidentally, a method for deciding equality of two objects of the same type is presumed to
exist by postulate (apples and oranges are both of the same type, but they aren’t equal if
our criterion for equality is color of the skin; by this criterion, a navel orange equals a
Valencia orange equals a tangerine).
As we did with the triangle, we will demand (by postulate) that the structures in
Eq. (19.2) result in something of the same type as the individual parts. With this assertion,
we can state (theorem, not postulate) that the superstructure
 (19.4)
is well defined as long as all of the parts are of the same type. We have purposefully
avoided assigning meaning to these structures. Manipulating structures is an essential
aspect of abstract mathematics — the goal is to define syntax (structure construction and
manipulation rules), and see what sorts of conclusions (theorems) can be inferred without
biasing ourselves by inserting what we know to be true based on the meanings of the struc-
tures. Mathematicians seek to understand what truths follow strictly from the primitive
structure rules. A new primitive postulate is introduced only if the mathematicians become
convinced that a certain desired property cannot be obtained from the already existing
primitives. For example, they might be forced to assert (immutable postulate) that
 (19.5)
Casting everything into abstract structural form permits mathematicians to eventually
draw connections between seemingly unrelated operations. Suppose, for example we were
to investigate whether or not our triangle operation in Eq. (19.1) might represent partial
differentiation so that Eq. (19.1) means the same thing as the partial of a with respect to b
holding c constant:
 (19.6)
r
s
r    s
r    s
s    r
p   q
q   p
a
b   c
f
g   h
a
r   s
r
x   y
a
s   r
s
x   y
a
x   y
=
∂a
∂b
------




c

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
229
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
To decide if this particular structure could be equivalenced with the “triangle” structure,*
we would need to further assign meaning to the two operations in Eq. (19.2). If we let
these operations represent multiplication and addition, respectively, then Eq. (19.2) would
become
and 
 (19.7)
From here, we can no longer arbitrarily endow further meanings to the structures — we
must follow through and check if the other primitive postulates are satisfied. With these
interpretations of the operations, we see that Eq. (19.3) is satisfied because
 and 
 (19.8)
Furthermore, Eq. (19.5) would become
,
 (19.9)
This is the chain rule of partial differentiation, which we know to be true from direct study
of differentiation. Assuming that the structure rules specified above form the complete set
of primitive postulates, then any superstructures or conclusions that the mathematicians
obtained in the abstract setting we could immediately know to be true for our specific
interpretation of the triangle structure. We would not have to go through the effort to prove
that the triangle and box structure theorems hold for partial derivatives because the mathe-
maticians have already done the proofs for us — all we had to do was prove that partial
differentiation, multiplication, and addition are suitable specific instances of triangle and
box structures. Then we get to benefit from the (underpaid) sweat of mathematicians to
instantly obtain a new set of truths. In the next section, a less contrived instance of this
mindset is covered where we look at the mathematicians’ structural definition of a vector
and then verify that our low-brow engineering vectors are particular instances of their gen-
eral vector structures.
* The fancy phrase is “isomorphism.” Two structures are isomorphic to each other if their structure 
rules are identical. In this case, we want to determine if partial derivative notation is isomorphic to 
triangle structure notation. If so, then any theorems derived using only the structure rules for one 
system will also apply to the other structure.
rs
p
q
+
rs
sr
=
p
q
+
q
p
+
=
∂a
∂x
------




y
∂a
∂r
------




s
∂r
∂x
-----




y
∂a
∂s
------




r
∂s
∂x
-----




y
+
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
230
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Definition of an abstract vector
Mathematicians define vectors as being “members of a vector space.” A vector space
consists of certain basic components:
A1.  A field R must exist. (For this book, the field is the set of reals; for an excellent 
definition of the term “field”, see Ref. [30].) We will here refer to a member of a 
field as a scalar.*
A2.  There must be a discerning definition of membership in a set V.
A3.  There must be an operation 
 that is proved closed in 
. In other words, if 
 and 
 then axiom A2 must be used to prove that 
. Simi-
larly, there must be an operation 
 that is also closed in 
 for every 
 and 
.
A4.  There must be a second operation 
 that is proved closed in 
:
If 
 and 
 then 
A5.  There must be a well defined process for determining whether two members of 
 are equal.
A6.  The  and  functions must satisfy the following rules:
 and 
There must exist a special 
 such that 
.
The above axioms are purposefully stated using abstract notation to ensure that they are
each verified carefully without introducing accidental bias in your analyses stemming
from what you “know” about the physical meanings of the operators. After you carefully
verify that the above axioms are satisfied, only then are you allowed to refer to members
of V as vectors — don’t use this term until you know that all axioms are satisfied. Once
all axioms are confirmed, you can with good conscience declare your right to replace the
abstract operators 
 with the standard structures for scalar multiplication and
vector addition. Namely,
can be replaced with the structure 
 (19.10)
can be replaced with the structure 
 (19.11)
can be replaced with the structure 
 (19.12)
The special vector 
 can now be denoted by .
 (19.13)
* Using “scalar” as a synonym for “number” is not strictly correct. In continuum mechanics, a scalar 
is a number that is unaffected by superposition of a rigid rotation, which is subtly different from an 
orthogonal change of basis. The trace of the deformation gradient tensor is not a scalar because its 
value changes when there is superimposed rotation. By contrast, the trace of the deformation gradi-
ent tensor does not change when you change the basis (it’s an invariant).
f α v˜
,
(
)
V
α
R
∈
v˜
V
∈
f α v˜
,
(
)
V
∈
f * v˜ α
,
(
)
V
α
R
∈
v˜
V
∈
g v˜ w˜
,
(
)
V
v˜
V
∈
w˜
V
∈
g v˜ w˜
,
(
)
V
∈
V
f
g
g v˜ w˜
,
(
)
g w˜ v˜
,
(
)
=
f α v˜
,
(
)
f * v˜ α
,
(
)
=
g u˜ g v˜ w˜
,
(
)
,
(
)
g g u˜ v˜
,
(
) w˜
,
(
)
=
Z˜
V
∈
g v˜ Z˜
,
(
)
v˜
=
f f *  and  g
,
,
f α v˜
,
(
)
αv˜
f * v˜ α
,
(
)
v˜α
g v˜ w˜
,
(
)
v˜
w˜
+
Z˜
0
˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
231
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
You should avoid stating the vector space axioms using these structures from the outset
because it would be “bad citizenship” to use those structures until you finish verifying that
all the axioms are true. Of course, once the axioms are all known to be true, the conditions
of the last axiom can be recast in using familiar addition and multiplication structures as
 and 
There must exist a zero vector 
 such that 
.
If we had written the last axiom like this from the outset, it would have looked “obvi-
ously” true to you — but that would have been your bias creeping in prematurely. First
you have to prove that the g operation satisfies the rules of addition before you are permit-
ted to denote the operation with the plus sign.
v˜
w˜
+
w˜
v˜
+
=
αv˜
v˜α
=
u˜
v˜
w˜
+
(
)
+
u˜
v˜
+
(
)
w˜
+
=
0
˜
V
∈
v˜
0
˜
+
v˜
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
232
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
What does this mathematician’s definition of a vector have to do with 
the definition used in applied mechanics? Unfortunately, textbooks seem to
fixate on item A6, completely neglecting the far more subtle and difficult items A2, A3,
A4, and A5. Engineering vectors are more than something with length and direction. They
are also more than simply an array of three numbers. When people define vectors accord-
ing to the way their components change upon a change of basis, they are implicitly
addressing axiom A2.*  In general, axiom A2 is the most difficult axiom to satisfy when
discussing specific vector spaces. Verifying axiom A2 demands introducing rather awk-
ward specialized tests that apply to particular sets. To go through the axiom list for ordi-
nary engineering vectors, the process might go like this:
A1.  A field R must exist: real numbers.
A2.  Discerning definition of membership in a set V: A member of V will be defined to be an array of three num-
bers 
 defined with respect to a set of mutually perpendicular reference directions (assumed 
by postulate to exist). Furthermore, to be a member of V, the three numbers must change in a particular way 
if the reference directions are changed to some other mutually perpendicular directions. The new numbers 
must become 
 where 
 and 
 is the cosine of the angle between the 
 old 
direction and the 
 new direction.
A3.  This axiom requires definition of the operations 
 and 
. Anticipating the properties these 
functions must satisfy, we define them to be ordinary scalar multiplication of a three-component array. If 
, then our discerning definition of membership in 
 tells us that we must have an array 
 
and we will declare that, regardless of the choice of reference directions, both 
 and 
 will be 
computed by 
. So far, we have only defined the operations, but the axiom requires us to 
prove that the result will be a member of V. That’s where the component transformation rule aspect of the 
“discerning definition of membership” comes into play again. Since 
, we know that 
 and 
we can just multiply both sides of this by 
 to assert that 
 will satisfy the same transformation 
behavior. Hence, 
. 
A4.  This axiom requires definition of a second operation 
. If 
 and 
, then we know they 
have component arrays, and we will define 
 to have a components 
. Given that 
 and 
 
are, by premise members of V, then their conformance to the component transformation rule ensures con-
formance of 
, proving that it that this operation is closed in V:
A5.  There must be a well defined process for determining whether two members of V are equal. If 
 and 
, then we will say they are equal if and only their respective components are equal.
A6.  The  and 
 functions defined above are readily seen to satisfy the rules
 and 
The “special” 
 will be declared to be 
, from which it readily follows that 
.
This concludes the outline of proving that ordinary engineering vectors really are vectors
in the sense that mathematicians use the word. Now that we know that, we can immedi-
ately make use of any theorems that mathematicians have already derived for general vec-
tor spaces. For example, using the primitive axioms, you can prove that the zero vector is
unique, and you can define subtraction of vectors. The vector space definitions make no
reference to anything like a dot product, so we can’t have access to mathematicians’ theo-
rems about angles between vectors or lengths of vectors. To do that, we need to add two
more axioms as described below.
* and they are failing to also address the other axioms!
v1 v2 v3
,
,
{
}
v1* v2* v3*
,
,
{
}
vk*
Qikvi
=
Qik
ith
kth
f α v˜
,
(
)
f * v˜ α
,
(
)
v˜
V
∈
V
v1 v2 v3
,
,
{
}
f α v˜
,
(
)
f * v˜ α
,
(
)
αv1 αv2 αv3
,
,
{
}
v˜
V
∈
vk*
Qikvi
=
α
f α v˜
,
(
)
f α v˜
,
(
)
V
∈
g v˜ w˜
,
(
)
v˜
V
∈
w˜
V
∈
g v˜ w˜
,
(
)
wi
vi
+
v˜
w˜
g v˜ w˜
,
(
)
v˜
V
∈
w˜
V
∈
f
g
g v˜ w˜
,
(
)
g w˜ v˜
,
(
)
=
f α v˜
,
(
)
f * v˜ α
,
(
)
=
g u˜ g v˜ w˜
,
(
)
,
(
)
g g u˜ v˜
,
(
) w˜
,
(
)
=
Z˜
V
∈
0 0 0
, ,
{
}
g v˜ Z˜
,
(
)
v˜
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
233
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Many applied mechanics textbooks focus to distraction on proving that every new
operation satisfies transformation rules. However, by recognizing that engineering vectors
are special instances of abstract (mathematician’s) vectors, you don’t usually have to do
that. Instead, you can assert that various operations used in engineering are special cases
of operations already studied by mathematicians for general vector spaces. The mathema-
ticians have already proved that these operations produce vectors, so why should we
bother doing the same?
Inner product spaces
An inner product (here denoted 
) is a scalar-valued binary* operation between
two vectors,  and 
, that must satisfy the following rules:
A7.  
A8.  
 if 
 and 
 only if 
.
An inner product space is just a vector space that has an inner product.
Alternative inner product structures. Once you have verified that these axioms
are satisfied, then you are free to replace the notation structure 
 with some other
structure of your own invention (or one that is commonly employed by your colleagues)
and you will be justified in stating that the structure represents an inner product. In this
document, we adopted the structure 
 to denote the inner product between two vectors
of class 
 and we used the structure 
 to denote the inner product between second
order tensors of class 
. Recognizing the limitations of these structure conventions for
higher-order tensors (e.g., it would be ridiculous to stack up six dots to denote the inner
product between sixth-order tensors), we also described the alternative notation 
 for
the inner product between tensors of class 
. You might also see the structure 
 to
denote the same thing.† Some people use 
 to denote the inner product and 
 to
denote tensor contraction; we can’t use that notation because it would violate self-consis-
tency rules that we have introduced in this book (namely, we use 
 for tensor contrac-
tion and 
 for dyadic tensor multiplication). When people choose different structures to
denote the same operation, don’t be annoyed. They probably have good reasons for their
choices.
* The term “binary” is just an obnoxiously fancy way of saying that the function has two arguments.
† Some people use 
 to denote the inner product (regardless of the order of the operands) and 
 
to denote tensor contraction; we can’t use that notation because it would violate self-consistency 
rules that we have introduced in this book (namely, we use 
 for tensor contraction so we can’t 
permit this structure to be an alternative representation for the totally different inner product opera-
tion. Likewise this book’s tensor nomenclature has already said that 
 stands for dyadic tensor 
multiplication so we can’t let it also stand for tensor contraction). Issues like these make it essential 
for you to learn the local tensor structures (notation conventions) used by each individual author in 
each individual publication. Sorry, but that’s how it goes in this field.
a˜ b˜
,
(
)
a˜
b˜
a˜ b˜
,
(
)
b˜ a˜
,
(
)
=
a˜ a˜
,
(
)
0
>
a˜
0
˜
≠
a˜ a˜
,
(
)
0
˜
=
a˜
0
˜
=
a˜ b˜
,
(
)
a˜
b˜
•
V3
1
A˜˜
:B˜˜
V3
2
A    B
N
V3
N
A B
A B
⋅
AB
A B
⋅
AB
A B
⋅
AB
A B
⋅
AB

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
234
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
By the way, that we also introduced in this document the structure 
 whose value
is computed in Rectangular Cartesian Systems (RCS) by 
. We did not however refer
to this scalar valued operation as an “inner product” because the operation fails the posi-
tivity axiom A8. Good citizenship demands that the phrase “inner product” should be con-
sidered hallowed ground for the mathematicians — don’t use this term unless your
operation satisfies the required axioms.
Some examples of inner product spaces. Ordinary engineering vectors form an
inner product space. First of all, engineering vectors are proved to be vectors in the first
place by postulating the existence of some mutually agreed upon reference set of direc-
tions (usually orthonormal, such as the edges forming between the floor and walls of the
laboratory), and all directional quantities are described in terms of multiples of these pos-
tulated “lab” directions (i.e., vector components). To formally verify the axioms for vec-
tors, the vector transformation rule governing how components must change upon a
change in basis) is used as the “discerning definition” and ordinary array addition and sca-
lar multiplication are used for the  and  functions. With these awkward rules, it can be
proved that engineering vectors are indeed vectors. 
For engineering vectors, the inner product is computed by
 (19.14)
The vector transformation rule ensures that you will get the same result from this opera-
tion no matter what basis you use. Even though the individual components of vectors will
change upon a change of basis, the above combination of components will come out the
same.
For second-order engineering tensors, the inner product is
 (19.15)
The choice of inner product is not unique. For many engineering applications, it is often
convenient to define an alternative energy-based inner product that uses a symmetric pos-
itive definite weighting tensor 
:
 (19.16)
Note that it is essential that 
 be symmetric in order to satisfy A7 and positive definite to
satisfy A8. 
The word “energy” is an apt descriptor for this type of inner product. For continuum
elasticity problems, a material having a strain 
 and a stress 
 has an internal energy
given by
,
 (19.17)
where 
 is the fourth-order elastic stiffness tensor. Thus, 
 plays a weighting role much
like the tensor 
 in Eq. (19.16).
A˜˜..B˜˜
AijBji
f
g
a˜ b˜
,
(
)
a˜
b˜
•
≡
a1b1
a2b2
a3b3
+
+
akbk
=
=
A˜˜
B˜˜
,
(
)
A˜˜
:B˜˜
≡
AijBij
=
W˜˜
a˜ b˜
,
(
)
1
2--a˜
W˜˜
b˜
•
•
≡
W˜˜
ε
˜˜
σ
˜˜
u
1
2--ε
˜˜
:E˜˜˜˜
:ε
˜˜
=
E˜˜˜˜
E˜˜˜˜
W˜˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
235
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Continuous functions are vectors!
Many seemingly unrelated things can be shown to be vectors by the above abstract,
axiom-based, definition. Consider, for example, the following “discerning definition” for
a set: V is the set of real continuous functions. Applying the above axioms shows that this
is a vector space. Furthermore, if  and 
 are two continuous functions, then their inner
product may be defined as
 (19.18)
Note the similar structures: In (19.14), there is a summation over the dummy subscript, k.
In (19.18), there is an integration over the dummy argument, x. 
Once something is discovered to be an inner product vector space, a whole wealth of
already-proved theorems becomes available. For example, the angle between two ordinary
engineering vectors is defined by 
 (19.19)
We could likewise use Eq. (19.18) to define the “angle” between two continuous func-
tions. Recall that the dyad between two ordinary vectors  and 
 is defined to be a new
object such that 
 for all vectors 
. Likewise, you can define a
“dyad” between two real continuous functions  and  to be a new object such that
 (19.20)
Recall that a dyad 
 is a rudimentary tensor — i.e., a new object that needs two indi-
ces to describe it so that its indicial expression is 
. Likewise, the dyad between contin-
uous functions is interpreted as a special kind of new object: a function of two variables
(AKA binary function). Equation (19.20) tells us that 
. Recall
that dyads were just special kinds of second-order tensors. Likewise 
 is a special
kind of function of two variables — separable. Recall that the vector equation 
is written in indicial form as 
 (19.21)
Analogously, given continuous functions 
, 
, and a binary function 
 the
operation 
 would be interpreted as
 (19.22)
f
g
f
g
•
f x
( )g x
( ) x
d
∞
–
∞
∫
=
θ
cos
a˜
b˜
•
a˜
a˜
•
b˜
b˜
•
--------------------------------
=
a˜
b˜
a˜
b˜
⊗
(
)
v˜
•
a˜ b˜
v˜
•
(
)
=
v˜
f
g
f
g
⊗
(
)
h
•
f g
h
•
(
)
=
a˜
b˜
⊗
aibj
f
g
⊗
(
) x y
,
(
)
f x
( )g y
( )
=
f
g
⊗
z˜
W˜˜
v˜
•
=
zi
Wijvj
j
1
=
3
∑
=
z x
( )
v y
( )
W x y
,
(
)
z
W
v
•
=
z x
( )
W x y
,
(
)v y
( ) y
d
∞
–
∞
∫
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
236
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Once you recognize this parallel structure between continuous functions and ordinary
engineering vectors, you will find that reading advanced calculus textbooks becomes a lot
easier. You will see that you already know many of the things that those books teach. The
major distinction is that ordinary engineering vectors belong to finite-dimensional spaces
(they only need 3 base vectors) whereas the space of continuous functions is infinite
dimensional. As with ordinary vectors, you can define a basis for continuous functions,
but the basis contains an infinite number of members. For example, a Taylor series is an
expansion of a continuous function in terms of the power basis 
. A Fourier
series is an expansion in terms a different (trigonometric) basis. 
Tensors are vectors!
For applications in advanced continuum mechanics, it is extremely useful to recognize
that second-order tensors form a nine-dimensional inner-product vector space. Using the
rules for scalar multiplication and tensor addition, one can readily verify that the axioms
A1 through A6 are satisfied by tensors. The inner product between two tensors is defined
in Eq. (12.1) as
 (19.23)
which satisfies the inner product axioms, A7 and A8. This definition of the tensor inner
product sums pairwise over all components just like Eq. (19.14). By pairwise, we mean
that, for example, 
 is multiplied by 
, not by 
.
There are an infinite number of ways to generate a scalar from a binary operation between
two tensors. For example, some authors wrongly refer to 
 as
an inner product. However, this operation is not an inner product because it fails the posi-
tivity axiom A8. Specifically, consider
.
 (19.24)
Then
 (19.25)
but
,
 (19.26)
which proves 
 is not acceptable as an inner product. 
1 x x2 …
, ,
,
{
}
A˜˜
:B˜˜
AijBij
≡
A12
B12
B21
A˜˜
••B˜˜
tr A˜˜
B˜˜
•
(
)
AijBji
=
=
A˜˜
[
]
1
3
–
0
4 2 0
0 0 1
=
A˜˜
:A˜˜
A11A11
A12A12
…
A33A33
+
+
+
1
9
16
4
1
+
+
+
+
31
0
>
=
=
=
A˜˜
••A˜˜
A11A11
A12A21
…
A33A33
+
+
+
1
12
–
12
–
4
1
+
+
18
–
0
<
=
=
=
A˜˜
••B˜˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
237
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Both 
 and 
 are scalar invariants of the tensor 
. Note that
, which may be written in terms of the characteristic invariants as
. For symmetric tensors, it turns out that 
. However, for nonsym-
metric tensors, the inner product invariant 
 is not generally expressible as a function
of the characteristic invariants, and it is therefore a fourth independent invariant. To prove
this last statement, consider
,
 (19.27)
where 
 is an arbitrary scalar. The characteristic invariants of this tensor are all equal to
zero. However, the inner product invariant is 
, which can take on different val-
ues, depending on the value of 
. It therefore must not be expressible as a function
, of the characteristic invariants. It is a fourth, wholly independent, invariant.
Vector subspaces
Consider a set  that is a proper subset of a vector set 
. The set  is called a “sub-
space” if any linear combination of members of  is itself in . A subspace  is itself a
vector space because all of the vector space axioms that were proved for the larger vector
set 
 continue to hold for set . Proving that something is a subspace really only requires
proving axioms A3 and A4 with axiom A2 replaced by the more restrictive discerning def-
inition for membership in the subspace . 
Again, a subspace is itself a vector space. It is generally of lower dimension than 
. In
ordinary 3D space, a subspace is like a plane — any linear combination of vectors in a
plane is itself in the plane. By contrast, consider the set of all unit vectors is not a subspace
because a linear combination of two unit vectors is not itself a unit vector. Recalling that
second-order tensors are themselves nine-dimensional vectors, we encounter tensor sub-
spaces as well. The set of all symmetric second-order tensors is a tensor subspace because
any linear combination of symmetric tensors is itself a symmetric tensor. The set of all
orthogonal tensors is not a tensor subspace because a linear combination of orthogonal
tensors is not itself orthogonal. The set of all transversely isotropic tensors is not a sub-
space, but the set (which we will denote TIa) consisting of all tensors that are transversely
isotropic about a particular (fixed) direction  does form a subspace. Specifically, refer-
ring to Eq. (18.59) we note that the tensors,  
, and 
 form a basis for TIa. This
basis, is not however, orthogonal because 
. Referring instead to Eq. (18.58), we
could alternatively define
 (19.28)
A˜˜
:A˜˜
A˜˜
••A˜˜
A˜˜
A˜˜
••A˜˜
tr A˜˜
2
(
)
=
I1
2
2I2
–
A˜˜
••A˜˜
A˜˜
:A˜˜
=
A˜˜
:A˜˜
A˜˜
[
]
0 α 0
0 0 0
0 0 0
=
α
A˜˜
:A˜˜
α2
=
α
f I1 I2 I3
,
,
(
)
S
V
S
S
S
S
V
S
S
V
a˜I˜˜
a˜a˜
ε
˜˜˜
a˜
•
–
I˜˜
: a˜a˜
(
)
0
≠
B˜˜ 1
I˜˜
a˜a˜
–
=
B˜˜ 2
a˜a˜
=
B˜˜ 3
ε
˜˜˜
a˜
•
–
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
238
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
These tensors form an orthogonal basis for TIa. The basis is orthogonal because
 if 
. However, 
 
 (19.29)
Hence, this basis is orthogonal, but not normalized. We could naturally divide 
 by 
to normalize it, but doing so would make it no longer a projection. Normalizing the basis
would be wise if our applications frequently required the tensor inner product of trans-
versely isotropic tensors. Most engineering applications require just the single dot (com-
position) product between two transversely isotropic tensors, in which case leaving the
basis as projectors is more convenient to utilize the fact that 
. Incidentally,
 is also a projector, but 
 is not.
Example: Let 
 be a fixed vector. Let 
 denote the set of all vectors 
 for which
. Is  a linear subspace? The answer is “yes” because any linear combination of
members of  will itself belong to . To see why, let 
 and 
 belong to  then, by def-
inition of membership, we know
 
and 
 (19.30)
Now consider a linear combination of these two vectors, 
. Does this linear
combination belong to ? The answer is “yes” if and only if
 (19.31)
Expanding this out using Eq. 19.30 shows that equality does hold. Therefore 
 is a sub-
space.
Example: commuting space. Let 
 denote a fixed symmetric tensor. Let  denote
the set of all tensors 
, both symmetric and non-symmetric, that commute with 
. By
this we mean
 belongs to  if and only if 
 (19.32)
To prove that this is a linear subspace, you must prove that
for all tensors 
 and 
 belonging to 
 (19.33)
Multiplying this out, using the fact that Eq. 19.32 applies for 
 and 
 shows that this
equation is true for the linear combination as well. Hence,  is a linear subspace.
The far more interesting questions are: How do you characterize members of  more
explicitly and what is the dimension of ? To answer, let’s write out the membership crite-
rion in terms of the principal basis for 
 in which case, the matrix form of Eq. (19.32)
becomes
B˜˜ i:B˜˜ j
0
=
i
j
≠
B˜˜ 1:B˜˜ 1
2
=
B˜˜ 2:B˜˜ 2
1
=
B˜˜ 3:B˜˜ 3
2
=
B˜˜ 1
2
B˜˜ 1
B˜˜ 1
•
B˜˜ 1
=
B˜˜ 2
B˜˜ 3
c˜
S
x˜
c˜
x˜
•
0
=
S
S
S
x˜ 1
x˜ 2
S
c˜
x˜ 1
•
0
=
c˜
x˜ 2
•
0
=
α1x˜ 1
α2x˜ 2
+
S
c˜
α1x˜ 1
α2x˜ 2
+
(
)
•
0
=
S
C˜˜
S
X˜˜
C˜˜
X˜˜
S
C˜˜
X˜˜
•
X˜˜
C˜˜
•
=
C˜˜
α1X˜˜ 1
α2X˜˜
+
(
)
•
α1X˜˜ 1
α2X˜˜
+
(
)
C˜˜
•
=
X˜˜ 1
X˜˜ 2
S
X˜˜ 1
X˜˜ 2
S
S
S
C˜˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
239
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (19.34)
The diagonal components are automatically satisfied for any tensor 
. The off-diagonal
components require
 (19.35)
 (19.36)
, etc.
 (19.37)
If all of the eigenvalues of 
 are distinct, then these off-diagonal constraints require that
the off-diagonals of 
 with respect to the principal basic for 
 must all be zero — in
other words, the set  is the set of all tensors with the same principal basis as 
 and the
dimension of this space is three (you only need to specify three eigenvalues to identify any
member of ). When 
 has distinct eigenvalues, the basis for its commuting space con-
sists of simply the three eigenprojectors for 
; namely,
 when 
 (19.38)
If, on the other hand, 
 has only two distinct eigenvalues, then exactly two of the off-
diagonals of 
 become unconstrained. If, for example, 
, then Eqs. (19.35)
and (19.36) are automatically satisfied and the most general form for a member of the
commuting space will have components with respect to the principal basis of
of the
form
 (19.39)
If 
 is symmetric, note that the upper 
 matrix can be symmetrized, and the resulting
principal basis for 
 will also be a principal basis for 
 because any two vectors in the
 plane will be eigenvectors of 
. Thus, whenever a symmetric tensor 
 commutes
with 
, a commonly shared principal basis can always be found for the two tensors. This
does not mean that the commuting space 
 is again reduced to three dimensions. To the
contrary, the shared basis will be different for a different 
 in 
. When 
 has
, the basis for the commuting space is
 when 
 (19.40)
Finally, when 
 has a triple eigenvalue, then it must be proportional to the identity, and
therefore any tensor will commute with 
. In this case, the commuting space is the
entirety of tensor space itself, which is nine-dimensional.
c1X11
c1X12
c1X13
c2X21
c2X22
c2X23
c3X31
c3X32
c3X33
c1X11
c2X12
c3X13
c1X21
c2X22
c3X23
c1X31
c2X32
c3X33
=
X˜˜
c1
c2
–
(
)X12
0
=
c2
c1
–
(
)X21
0
=
c2
c3
–
(
)X23
0
=
C˜˜
X˜˜
C˜˜
S
C˜˜
S
C˜˜
C˜˜
p
˜ 1p
˜ 1
p
˜ 2p
˜ 2
p
˜ 3p
˜ 3
,
,
c1
c2
≠
c2
c3
≠
   and   c3
c1
≠
,
,
C˜˜
X˜˜
c1
c2
c3
≠
=
C˜˜
X11 X12
0
X21 X22
0
0
0
X33
X˜˜
2
2
×
X˜˜
C˜˜
1-2
C˜˜
X˜˜
C˜˜
S
X˜˜
∗
S
C˜˜
c1
c2
c3
≠
=
p
˜ 1p
˜ 1
p
˜ 2p
˜ 2
p
˜ 3p
˜ 3
p
˜ 1p
˜ 2
p
˜ 2p
˜ 1
,
,
,
,
c1
c2
c3
≠
=
C˜˜
C˜˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
240
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Commuting tensors can be considered in a more direct notation context. The charac-
teristic space associated with an eigenvalue is the span of all eigenvectors associated
with that eigenvalue. The “commutation theorem” [24] states that, if 
, then
if  belongs to a characteristic space of 
, then 
 also belongs to that same character-
istic space. This does not imply that  is necessarily an eigenvector of 
, but it can be
used to prove that there does exist at least on principal triad that is shared by 
 and 
.
Subspaces and the projection theorem
Whenever a subspace  is discovered, it is almost always wise to identify the opera-
tion that will project vectors in 
 into parts that are in  and orthogonal to . Many seem-
ingly unrelated theorems are all in fact applications of the projection theorem. Consider,
for example, the set of all even continuous functions — i.e., they have the property
. This set is subspace because any linear combination of even functions will
also be even. A famous theorem states that any function can be written as the sum of an
even plus an odd function. This theorem is an application of the projection theorem. Note
that odd functions are orthogonal to even functions because the integral in Eq. (19.18) will
be zero if  is even and  is odd. 
The set of all matrices that have a zero trace is a subspace (because any linear combi-
nation of “traceless” tensors will itself be traceless). An oft-used theorem states that any
matrix can be written as the sum of its isotropic and deviatoric (traceless) parts. This is the
projection theorem again. Likewise any matrix can be written as the sum of its symmetric
plus antisymmetric parts. This is the projection theorem. 
Abstract contraction and swap (exchange) operators*
Virtually all operations in tensor algebra can be written using a rather arcane — but
nevertheless conceptually useful — generalized notation in which the arguments are first
multiplied dyadically and then operated on by either contraction or swap operators, as
defined below. These operators are almost never mentioned explicitly in practice, but it is
often useful to visualize simpler operations in terms of contractions and swaps in order to
determine properties of the operations.
Any vector 
 is expressible as components 
 times base vectors 
. Any second-
order tensor 
 is expressible as components 
 times base dyads 
. In general, any
-order tensor may be expressed as a sum of components (having a total of 
 indices)
times 
 dyadically multiplied base vectors.
* This section is rather mathematical and it may be skipped without loss in continuity.
C˜˜
X˜˜
•
X˜˜
C˜˜
•
=
v˜
C˜˜
X˜˜
v˜
•
v˜
X˜˜
C˜˜
X˜˜
S
V
S
S
f
x
–
(
)
f x
( )
=
f
g
v˜
vi
e˜j
T˜˜
Tij
e˜ie˜j
Nth
N
N

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
241
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The contraction operator 
 is defined to dot the 
 base vector with the 
 base
vector. Here, 
 and 
 are not tensor indices — they merely indicate the positional loca-
tion of a dyadically multiplied base vectors. The contraction operation is well-defined
only when operating on second- and higher-order tensors. For example
 (19.41)
The contraction operator reduces the order of the operand by two. If, for example, the
operand is a second-order tensor, then the result is a zero-order tensor, which is a scalar.
As seen above, the contraction of a third-order tensor gives a first-order tensor, which is a
vector. The contraction of a fourth-order tensor is a second-order tensor.
The generalized operator 
 dots the 
 base vector with the 
 vector and the
 base vector with the 
 vector. This operation reduces the order by four. To be well
defined, all four of the indices, 
, must have distinct values. The operator
is well-defined for tensors of fourth-and higher order. For example,
 (19.42)
Incidentally, note that 
 is not the same thing as 
. In particular,
.
 (19.43)
Higher order contraction operators such as 
 are similarly defined. 
CI
J
Ith
Jth
I
J
C1
2 a˜b˜
(
)
C1
2 aibje˜ie˜j
(
)
aibje˜i
e˜j
•
aibjδij
aibi
a˜
b˜
•
=
=
=
=
=
dot
C1
2 T˜˜
( )
C1
2 Tije˜ie˜j
(
)
Tije˜i
e˜j
•
Tijδij
Tii
trT˜˜
=
=
=
=
=
dot
C1
2 β
˜˜˜


C1
2 βijke˜ie˜je˜k
(
)
βijke˜i
e˜j
•
e˜k
βiike˜k
=
=
=
dot
C1
3 β
˜˜˜


C1
3 βijke˜ie˜je˜k
(
)
βijk e˜i
e˜k
•
(
)e˜j
βijie˜j
=
=
=
dot
C2
4 H˜˜˜˜


C2
4 Hijkle˜ie˜je˜ke˜l
(
)
Hijkl e˜j
e˜l
•
(
)e˜ie˜k
Hijkje˜ie˜k
=
=
=
dot
CIK
JL
Ith
Jth
Kth
Lth
I
J
K
and L
,
,
,
C13
42 H˜˜˜
(
)
C13
42 Hijkle˜ie˜je˜ke˜l
(
)
Hijkl e˜i
e˜l
•
(
) e˜j
e˜k
•
(
)
Hikki
=
=
=
C13
42   
( )
C1
4 C1
2   
( )
(
)
C13
42 H˜˜˜
(
)
C1
2 C1
4 H˜˜˜
(
)
(
)
C1
2 C3
2 H˜˜˜
(
)
(
)
=
=
CIKM
JLN

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
242
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The swap (or “exchange”) operator 
 is defined to swap the 
 base vector with
the 
 vector. This operation does not affect the order of the operand. The swap operator
is well-defined only when operating on second- and higher-order tensors. For example
 (19.44)
The generalized swap operator 
 swaps the 
 base vector with the 
 vector and
the 
 base vector with the 
 vector. To be well defined, all four of the indices,
, must have distinct values. The operator is well-defined for tensors of
fourth-and higher order. For example,
 (19.45)
Higher order swap operators such as 
 are similarly defined.
The contraction operator and the swap operator are almost never mentioned explicitly
in publications but they are nonetheless very useful in generating theorems because they
are both linear operations. Namely,
 for all scalars 
and for all tensors 
 and 
 of arbitrary (but equal) order (
). 
 (19.46)
 for all scalars 
and for all tensors 
 and 
 of arbitrary (but equal) order. 
 (19.47)
The last property is particularly useful for performing integrals of quantities that differ
from each other only in the ordering of their indices. Noting that any permutation of indi-
ces may be obtained through a sequence of swap operations, we recognize that only one of
our integrals need be computed. Linearity of the swap operation allows us to immediately
write down the solution for all of the integrals once we have found the solution for the first
one.
At the beginning of this section, we mentioned that most tensor operations may be
written as a sequence of either swap or contraction operations acting on dyadically multi-
plied operands. For example
 (19.48)
XI
J
Ith
Jth
X1
2 T˜˜
( )
X1
2 Tije˜ie˜j
(
)
Tije˜je˜i
T˜˜
T
=
=
=
swap
X1
2 β
˜˜˜


X1
2 βijke˜ie˜je˜k
(
)
βijke˜je˜ie˜k
=
=
swap
X1
3 β
˜˜˜


X1
3 βijke˜ie˜je˜k
(
)
βijke˜ke˜je˜i
=
=
swap
XIK
JL
Ith
Jth
Kth
Lth
I
J
K
and L
,
,
,
X13
42 H˜˜˜˜


X13
42 Hijkle˜ie˜je˜ke˜l
(
)
Hijkle˜le˜ke˜je˜i
=
=
swap
swap
XIKM
JLN
CI
J αA
B
+
(
)
αCI
J A
( )
CI
J B
( )
+
=
α
A
B
 
2
≥
XI
J αA
B
+
(
)
αXI
J A
( )
XI
J B
( )
+
=
α
A
B
A˜˜
x˜
•
C2
3 A˜˜
x˜
⊗
(
)
C1
3 x˜
A˜˜
⊗
(
)
C1
2 x˜
X1
2 A˜˜
(
)
⊗
(
)
=
=
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
243
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and
 (19.49)
In the above equation,  is the permutation tensor given by 
, where 
 is the
permutation symbol defined in Eq. (3.76). The operand 
 is a fifth order tensor having
 components given by 
. The contraction operator 
 reduces the order
from five down to one by contracting the 2nd index with the 4th index and the 3rd index
with the 5th index to obtain 
, which is indeed the indicial expression for the 
component of 
. It may appear that we have taken a fairly simple operation (the cross
product) and written it in an insanely complicated manner.
Keep in mind: we are not advocating the use of the contraction and swap operations in
published analyses. We merely want to drive home the point that virtually all tensor oper-
ations can be expressed using contraction and swap operators. Contractions and swaps are
particularly useful when applied to tensor-integral calculus. Specifically, suppose that
 denotes some 
-order tensor valued function of a vector . If 
 and 
 denote any
contraction and swap operation applicable to 
, then
 (19.50)
 (19.51)
In other words, contraction and swap operations commute with integration. This means
that the best context in which to derive new theorems is to do it for dyadically multiplied
operands whenever possible. From this generalized context, a host of new theorems “fall
out” as corollaries. For example, a very general form of the Gauss-Ostrogradski theorem
states that the integral over a closed surface of the outward normal 
 multiplied dyadi-
cally by a tensor of arbitrary order can be transformed to the volume integral of the gradi-
ent of that tensor.
 (19.52)
Here, the notation 
 denotes the outward unit normal 
 to the integration surface
multiplied some quantity 
 of arbitrary tensor order, and 
 denotes the gradient of
that tensor.
Because the contraction operation commutes with integration, one can immediately
write down the classic “divergence” theorem by taking the 
 contraction of both sides of
Eq. (19.52) to obtain
 (19.53)
Another corollary is obtained by inserting the cross product into Eq. (19.52), which we
know we can do because we know that a cross product is expressible in terms of contrac-
tions (which in turn commute with integration). Thus,
u˜
v˜
×
C23
45 ε
˜˜˜
u˜ v˜




=
ε
˜˜˜
εijke˜ie˜je˜k
εijk
ε
˜˜˜
u˜ v˜
ijklm
εijkulvm
C23
45
εijkujvk
ith
u˜
v˜
×
f x˜
( )
nth
x˜
C
X
f x˜
( )
C
f x˜
( ) V
d
∫∫∫
C f x˜
( )
[
] V
d
∫∫∫
=
X
f x˜
( ) V
d
∫∫∫
X f x˜
( )
[
] V
d
∫∫∫
=
n˜
n˜    
(
) A
d
∫∫
∇   
(
) V
d
∫∫∫
=
n˜    
(
)
n˜
  
( )
∇   
(
)
C1
2
n˜
   
(
)
•
A
d
∫∫
∇
   
(
)
•
V
d
∫∫∫
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
244
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (19.54)
Incidentally, despite the presence of the cross product, this theorem is not equivalent to
Stokes theorem.
Consider a particular indicial form of Eq. (19.52) in which the operand is a second-
order tensor:
 (19.55)
The swap operator 
 is linear and therefore commutes with integration. Thus, in
addition to the above equation, we also have an immediate set of corollaries in which the
indices in the above equation may be arbitrarily permuted. Likewise, the contraction oper-
ator 
 is linear and may be commuted with integration. Thus, any of the indices in the
above equation may be contracted.
The contraction tensor. Since the contraction operator 
 is linear, we know
from Eq. (9.7) that there must exist a second-order tensor 
 such that 
 (19.56)
We know from Eq. (19.41) that
 (19.57)
Comparing the above two equations, we note that 
 is simply the identity tensor. Hence,
the contraction operation can be viewed as the identity tensor double dotted into two spec-
ified base vectors. This point of view is useful when considering differentiation. The iden-
tity is a constant tensor and its derivative is therefore zero. It is often useful conceptually
utilize the contraction in gradient identities. For example,
 (19.58)
The contraction is extremely useful in integration identities. For example
 (19.59)
These formulas show that knowing the complete gradient tensor 
 is really the most
useful. You can just take the trace of this total gradient tensor to immediately obtain the
divergence. Likewise, you can take the (negative) axial part of the total gradient tensor to
obtain the curl:
 (19.60)
The swap tensor. Recall from Eq. (19.44) that the effect of the swap operation on a
second-order tensor 
 is to simply produce the transpose of that tensor:
n˜
   
(
)
×
A
d
∫∫
∇
   
(
)
×
V
d
∫∫∫
=
niTjk A
d
∫∫
xi
∂
∂Tjk V
d
∫∫∫
=
XI
J
CI
J
C1
2 T˜˜
( )
C˜˜
C1
2 T˜˜
( )
C˜˜
:T˜˜
CijTij
=
=
C1
2 G˜˜
(
)
trT˜˜
Tkk
δijTij
=
=
=
C˜˜
∇
w˜
•
I˜˜
: w˜
∇
=
∇
w˜
•
V
d
Ω∫
I˜˜
:
w˜
∇
(
) V
d
Ω∫
I˜˜
:
w˜
∇
V
d
Ω∫
=
=
w˜
∇
axial w˜
∇
–
ε
˜˜˜
: w˜
∇
∇
w˜
×
=
=
T˜˜

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
245
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (19.61)
This is a linear operation transforming a tensor 
 into a new tensor 
. Therefore, this
simple operation must be expressible in terms of a fourth-order swap tensor 
 such that
 (19.62)
Writing this out in indicial notation reveals that
 (19.63)
This tensor can be regarded as the fourth-order transpose operator. Note that it is the same
as the fourth-order identity tensor except the last two base vectors are swapped (or, equiv-
alently, the last two indices in the indicial expression are swapped).
X1
2 T˜˜
( )
T˜˜
T
=
T˜˜
T˜˜
T
X˜˜˜˜
T˜˜
T
X˜˜˜˜
:T˜˜
=
X˜˜˜˜
δinδjme˜ie˜je˜me˜n
=

September 4, 2003 5:24 pm
Abstract vector/tensor algebra
246
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.

September 4, 2003 5:24 pm
Vector and Tensor Visualization
247
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
20. Vector and Tensor Visualization
Suppose you are given a 2D scalar field (i.e., scalars that vary in space in a known
manner). For example, the altitude of a mountain could be regarded as a scalar that varies
over a 2D space. Then some conventional ways to visually display this altitude is with a
contour map, a 3D elevation, and a color density map. If, for example, the altitude of the
mountain, z, is given by*
 (20.1)
then these three strategies would yield the plots shown in Fig. 20.1. Scalar fields in 3D are
typically rendered using these basic techniques on 2D slice planes of the body (more gen-
erally, these methods can be used on any 2D surface — for example, a color density plot
could be shown on the surface of a machine part)
Now suppose you are given a vector field in 2D. The
standard approach is to plot the vectors as a family of
arrows in 2D space, as shown in the inset.† You can
alternatively generate streamlines that “flow” with the
vector field. In three dimensions, you can generate vec-
tor plots across any 2D surface, as was suggested in the
case of a scalar field. However, in 3D, the vectors will
not necessarily lie in the plot plane — they might have
components pointing out of the plane. Consequently, if
these sorts of plots are generated on, say, the surface of a
* Incidentally, these three plots can be generated by the following mathematica commands: Con-
tourPlot, Density Plot, and Plot3D.
† This plot was generated using the mathematica command, <<Graphics‘Plot-
Field‘;PlotVectorField[{Sin[x],Cos[y]},{x,0,Pi},{y,0,Pi}]
z
1
xy
(
)
sin
+
=
Figure 20.1.
Three types of visualization for scalar fields.   (a) contour plot, (b) elevation plot, and (c)
Color density plot [ranges through red-yellow-green-cyan-blue-magenta-red as the elevation ranges
from minimum to maximum].

September 4, 2003 5:24 pm
Vector and Tensor Visualization
248
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
machine part, they can have the appearance of a hedgehog (in fact many people call these
plots by that name.). If desired, the arrows can be colored in proportion to the magnitude
of the vector. Another, less frequently seen, method for visualizing vectors is to assign the
colors Red, Green, and Blue to vary in proportion to the three components of the vector
, 
, and 
. Then an ordinary scalar density plot could be generated using the mixture
of colors. Then blue regions would indicate regions where 
 is large in comparison to the
other components. Yellow (which is a mixture of equal parts of red and green) would indi-
cate regions where 
 and 
).
Clearly, visualizing vector fields is considerably more complicated than visualizing
scalar fields. Vectors only have three components. How in the world can we visualize ten-
sors, which have NINE components?!? We will describe here two standard methods for
visualizing tensors.
Mohr’s circle for 2D tensors
GOAL: Describe how to generate Mohr’s circle for a 2x2 matrix that is not necessarily 
symmetric.
Consider a 2D second order tensor whose components are of the form,
 (20.2)
. A tensor takes on meaning only when it acts on a vec-
tor. For visualizing a tensor, the most crucial question is
how that tensor transforms a unit vector 
. In the inset,
we show a unit vector 
 and its transformation 
.
We define 
 to be the normal component of the trans-
formed vector and  to be the shear component (with a
sign given by the left-hand-rule, meaning that it is posi-
tive if the transformed vector tends to shear the plane in
a clockwise direction).
To construct Mohr’s circle, first define two points,
an “H-point” and a “V-point” by
H: 
 (20.3)
V: 
 (20.4)
Note that these two points are the 
 pairs associated with 
 and 
,
respectively. In general, differently oriented normals will have different values of the
 pairs. As the plane’s orientation angle  varies, then so will 
 and . Specifically,
an arbitrary normal may be expressed in the form
 (20.5)
v1 v2
v3
v3
v1
v2
=
v3
0
=
F11 F12
F21 F22
n˜
F˜˜
n˜
•
σ
τ
–
n˜
n˜
F˜˜
n˜
•
σ
τ
F11
F21
–
,
(
)
F22 F12
,
(
)
σ τ
,
(
)
n˜
E˜ 1
=
n˜
E˜ 2
=
σ τ
,
(
)
θ
σ
τ
n˜
{ }
θ
cos
θ
sin
=

September 4, 2003 5:24 pm
Vector and Tensor Visualization
249
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and the transformed vector therefore has components
 (20.6)
from which it follows that
Need to finish this section
 (20.7)
and
 (20.8)
A phase space curve of  vs. 
 can be constructed by plotting 
 pairs for various
orientation angles. This plot is called a Mohr diagram. Naturally, because  is cyclic, the
curve would have to be some sort of a closed loop. It turns out that this closed curve is in
fact a circle and that planes separated by a distance 
 in physical space will be separated
by an angle 
 in the Mohr diagram. Recalling that the H and V points correspond to
normals that differ by 
, this means that on the Mohr plane, the H and V points will be
separated from each other by 
. In other words, the H and V points will lie on diamet-
rically opposite locations of the Mohr’s circle. Consequently, the center of Mohr’s circle
must be exactly between the H and V points. This is enough information to draw the
Mohr’s circle.
Moving an angular distance 
, measured from the H-point, corresponds to 
 and 
values on Mohr’s circle which are the normal and shear components of the transformed
vector 
 for which 
 is at an angle 
 measured from the horizontal. This halving
or doubling angles when moving back and forth between the Mohr diagram and the phys-
ical plane can be confusing, and there is a really kool way to get around this problem by
introducing a third point — called the pole point — on the Mohr diagram. This point is
found by passing a horizontal line through the H point and a vertical line through the V
point. These lines will intersect at the pole point P. You can measure angles in the Mohr
plane from the pole point, and those angles will precisely equal the angle in the physical
plane.
F˜˜
n˜
•
{
}
F
[ ] n
{ }
F11
θ
cos
F12
θ
sin
+
F21
θ
cos
F22
θ
sin
+
=
=
τ =
σ =
τ
σ
σ τ
,
(
)
θ
∆θ
2∆θ
90°
180°
α
σ
τ
F˜˜
n˜
•
n˜
α 2
⁄

September 4, 2003 5:24 pm
Vector and Tensor Visualization
250
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.

September 4, 2003 5:24 pm
Vector/tensor differential calculus
251
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
21. Vector/tensor differential calculus
Stilted definitions of grad, div, and curl
Up to now, this book has focused on vector and tensor algebra, not calculus. A stan-
dard rigorous (and therefore stilted) development of tensor calculus, as found in any good
tensor analysis textbook, often begins by defining
 (21.1)
 (21.2)
 (21.3)
 (21.4)
Here, 
 is the volume of an arbitrary region 
 in space, and 
 is its boundary with an
outward unit normal 
. Furthermore, 
 is the area element, so the above integrals are
really double integrals. Other ways to define these derivative operations (discussed later)
do not require calling upon geometrical concepts such as volume or area. When these
alternative definitions are adopted, the above equations come out as results. Alternative
definitions of differentiation (discussed later) are superior if you are interested in evaluat-
ing variations with respect to something other than the spatial location .
In terms of rectangular Cartesian coordinate systems (RCS), these derivative opera-
tions can be computed by
 (21.5)
 (21.6)
“You shouldn’t put down a loser, Cindy...
you might be one yourself some day.”
— Carol Brady, The Brady Bunch
gradφ
1
V---
n˜ φ S
d
∂Ω∫
V
0
→
lim
≡
gradu˜
1
V---
n˜ u˜ S
d
∂Ω∫
V
0
→
lim
≡
divu˜
1
V---
n˜
u˜
•
S
d
∂Ω∫
V
0
→
lim
≡
curlu˜
1
V---
n˜
u˜
×
S
d
∂Ω∫
V
0
→
lim
≡
V
Ω
∂Ω
n˜
dS
x˜
gradφ
e˜k
∂φ
∂xk
--------
=
gradu˜
e˜ie˜j
∂uj
∂xi
-------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
252
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.7)
 (21.8)
Most modern books go on to acknowledge the following common alternative nota-
tions (structures):
 means the same thing as 
 (21.9)
 means the same thing as 
 (21.10)
 means the same thing as 
 (21.11)
 means the same thing as 
 (21.12)
Note that 
 is a second-order tensor (class 
) whose 
 component is given by
. Later on, we will discuss an alternative definition of the gradient for which the
 component is 
, the only difference being the ordering of the indices. 
Also note that 
 (21.13)
 (21.14)
Consequently, if the tensor 
 is available, then the divergence and curl can be readily
computed without having to compute any spatial derivatives again (an efficiency advan-
tage for computational analysis).
Another common operation seen frequently in tensor calculus is the Laplacian, which
is simply the divergence of the gradient and is commonly denoted by the operator 
:
 (21.15)
For rectangular Cartesian systems (RCS), this can be computed by
 (21.16)
Gradients in curvilinear coordinates. The component formulas for computing gradi-
ents (or divergences, or Laplacians, or any other operation that involves differentiating
with respect to the position vector) become more complicated in curvilinear (non-RCS)
systems such as cylindrical or spherical coordinates. That’s because the base vectors in
curvilinear systems are themselves functions of position and, consequently, changing the
position vector will change both the position vector’s components and its basis. Compo-
nent formulas for the gradient operations in other coordinate systems can be found in vir-
tually any mechanics textbook (the tables in Ref. [4] are particularly well done). 
divu˜
∂uk
∂xk
--------
=
curlu˜
e˜iεijk
∂uk
∂xj
--------
=
φ
∇
gradφ
u˜
∇
gradu˜
∇
u˜
•
divu˜
∇
u˜
×
curlu˜
u˜
∇
V3
2
ij
∂uj ∂xi
⁄
ij
∂ui ∂xj
⁄
∇
u˜
•
tr
u˜
∇
(
)
=
∇
u˜
×
ε
˜˜˜
:
u˜
∇
(
)
=
u˜
∇
∇2
∇2φ
div gradφ
(
)
≡
∇2φ
∂2φ
∂xk∂xk
----------------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
253
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Before pulling a formula from a table, however, you should look at the table’s entries
for RCS to ensure that the authors have defined the gradient in the same way that we have.
If not, you’ll have to do a quick translation. Many authors, for example, define 
 to
have 
 components given by 
, which is the transpose of how we have defined the
gradient in this section. If you have a table that uses this index ordering, all you have to do
is swap around the indices in the table accordingly. For self-consistency of our tensor
structures (i.e., our notation), we will always define the indicial forms in a manner analo-
gous to similar looking vector operations. For example, if 
 were a vector (it’s not), then
 would be a dyad with components 
. The 
 is not a vector — it’s an operator.
Nonetheless, the arrangement of indices in any expression involving 
 will be the same
as an expression of the same form with 
 the operator replaced by 
 the vector. In indi-
cial expressions, every place that the vector version has 
, the gradient operation will
have 
, which acts on operands to its right. Again, keep in mind that these statements
hold only for RCS coordinates, and must be generalized if curvilinear coordinates are
used. Later on, we will discuss a left operating gradient as well.
The general theory of curvilinear coordinates is covered in Ref. [6] (or in numerous
other standard textbooks on tensor analysis), where it is shown that gradient operations
will always involve extra terms resulting from spatial variation of the base vectors. In gen-
eral curvilinear theory, this effect is accounted for through the appearance of Christoffel
symbols. There are two kinds of Christoffel symbols, the first represents the change in the
base vectors with respect to changes in position coordinates and the other represents the
gradient of the position coordinates themselves. Thankfully, the necessary mathematics
for computing gradients in the most common curvilinear systems (e.g, cylindrical, spheri-
cal, elliptic, parabolic, etc.) have been worked out long ago, and practicing engineers only
need to look up the appropriate formulas in tables. The modern approach is to work out
general physical theories using RCS coordinates, making certain that every step in any
derivation is using only proper tensor operations (addition, scalar multiplication, contrac-
tions, swaps, gradients, etc.). Once a final result is obtained, it should be cast in symbolic
(structured) form so that, if desired, the formula for that same operation in a non-RCS sys-
tem can be simply looked up in a table. If, for example, your RCS analysis resulted in the
equation
 (21.17)
then you should not stop there! Your final result should be cast in structured form as
 (21.18)
With this result, you can go to a table for the divergence in, say, cylindrical coordinates
and immediately write down the version of the result that applies for that curvilinear sys-
tem:
∇u˜
ij
∂ui ∂xj
⁄
∇
˜
∇
˜
u˜
∇iuj
∇
∇
∇
∇
˜
∇i
∂
∂xi
-------
ρ·
ρ
∂vk
∂xk
--------
+
0
=
ρ·
ρ ∇
v˜
•
(
)
+
0
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
254
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.19)
This formula is not too vastly different from the RCS formula, but you will find that dif-
ferences become increasingly pronounced for multiple gradient operations or for gradients
of higher order tensors. Incidentally, note that the above formula has the divisor of “r” in
the middle term — without it, the equation would not be dimensionally correct.
This “look it up in a table” mentality should not be treated as a licence to be sloppy,
nor should it be paralyzing if you don’t happen to have a table with you at the time you
need a curvilinear formula. You can always go back to basics. Suppose, for example, that
you need the formula cited in Eq. (21.19), but you don’t have a gradient look-up table
handy to find out how to express 
 in cylindrical coordinates. To figure it out on your
own, first write the vector  in terms of cylindrical coordinates:
 (21.20)
From here, you can use linearity of the divergence operation in combination with formulas
for the divergence of a scalar (in this case each coefficient) times a vector (in this case, the
spatially-varying base vectors). This process will be described soon. The point here is that
you don’t have to just give up when you don’t have a gradient table, nor do you need to
invest time in learning general curvilinear theory unless you are routinely needing numer-
ous curvilinear gradient formulas for obscure curvilinear systems.
When do you NOT have to worry about curvilinear formulas? So far, we have
defined the meanings of various gradient operations, all of which involved derivatives
with respect to the position vector. We have explained that you need to look up special for-
mulas for gradient operations when you use a curvilinear coordinate system. These special
formulas reflect that the curvilinear basis itself changes when you change the position vec-
tor.
Many physical operations involve derivatives with respect to the position vector, but
equally many involve derivatives with respect to other vectors as well. For example, the
kinetic energy per unit mass of a material is given by
 (21.21)
You can compute the derivative of  with respect to the velocity in much the same way as
you would compute the spatial gradient. To indicate that the derivative is with respect to
velocity , many people put a subscript “ ” on their nabla so that
 (21.22)
We can derive this in a more explicit manner by writing Eq. (21.21) as
 (21.23)
ρ·
ρ ∂vr
∂r
-------
1
r---∂vθ
∂θ
--------
∂vz
∂z
-------
+
+
+
0
=
∇
v˜
•
v˜
v˜
vre˜r
vθe˜θ
vze˜z
+
+
=
κ
1
2--v˜
v˜
•
=
κ
v˜
v˜
∇v˜
κ
∂
∂vi
------- 1
2--vkvk e˜i
1
2-- δikvk
vkδik
+
(
) e˜i
vie˜i
v˜
=
=
=
=
κ
1
2-- v12
v22
v32
+
+
(
)
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
255
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The gradient with respect to  is given by
 (21.24)
or
 (21.25)
Now suppose that a curvilinear basis is used. Do we need to revise this formula? No! Here
we are differentiating with respect to velocity, not the position vector. The basis changes
when the position vector changes, but the basis is not a function of the velocity vector. In
terms of a cylindrical coordinate system, the velocity vector is
 (21.26)
and therefore
 (21.27)
The derivative of  with respect to  is given by
 (21.28)
Contrast this with the spatial gradient of , which is given by
 (21.29)
The spatial gradient has the divisor 
 in the middle term, but the gradient with respect
to velocity doesn’t (note that putting it there would foul up the physical dimensions of that
term). The derivative of 
 with respect to  looks essentially the same as the Cartesian
formula except that the indices 1,2, and 3 are replaced by , , and .
In most engineering problems, a curvilinear basis is used only for the position vector.
Hence, only formulas involving spatial derivatives will need special forms. As another
example, consider the fourth-order elastic stiffness tensor from elasticity:
 (21.30)
This tensor does not involve any spatial derivatives. Consequently, it takes an identical
form in a curvilinear system. For example,
 (21.31)
Keep in mind that an unadorned 
 is reserved for spatial gradients. In other words, 
means the same thing as 
.
v˜
∇v˜
κ
∂κ
∂v1
--------e˜1
∂κ
∂v2
--------e˜2
∂κ
∂v3
--------e˜3
+
+
=
∇v˜
κ
v1e˜1
v2e˜2
v3e˜3
+
+
=
v˜
vre˜r
vθe˜θ
vze˜z
+
+
=
κ
1
2-- vr
2
vθ
2
vz
2
+
+
(
)
=
κ
v˜
∇v˜
κ
∂κ
∂vr
-------e˜r
∂κ
∂vθ
--------e˜r
∂κ
∂vz
-------e˜z
+
+
vre˜r
vθe˜θ
vze˜z
+
+
=
=
κ
∇κ
∂κ
∂r
------e˜r
1
r--∂κ
∂θ
------e˜r
∂κ
∂z
------e˜z
+
+
=
1 r
⁄
κ
v˜
r θ
z
Eijkl
∂σij
∂εkl
---------
=
Erθrθ
∂σrθ
∂εrθ
-----------
=
∇
∇
∇x˜

September 4, 2003 5:24 pm
Vector/tensor differential calculus
256
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Spatial gradients of higher-order tensors. Let 
 be a spatially varying second-order
tensor. Its gradient is a third-order tensor defined
, 
 (21.32)
which is also denoted 
. 
In terms of a Rectangular Cartesian System (RCS), the indicial formula for the tensor
gradient is
 (21.33)
In RCS basis notation, 
 (21.34)
The ordering of the indices is important. For example,
 (21.35)
For non-RCS systems, the component formulas become far more complicated and will
involve Christoffel symbols (bleach!). Whenever possible, just go look up the result in a
table for your system of interest. Yes, you should be capable of deriving it on your own,
but the analysis is so complicated that the probability of a mistake far outweighs the likeli-
hood you will happen to pick a reference book that has the formula wrong. It is a simple
matter of risk-management.
The divergence of a second-order tensor (which plays a pivotal role in the continuum
equations of motion) is a first-order tensor (i.e., a vector), defined
, 
 (21.36)
Also denoted by 
, this divergence operation is given in RCS component and basis
notation as
 (21.37)
 (21.38)
Cylindrical and spherical coordinate formulas for this operation can be found in virtually
any book on continuum mechanics.
Note that
, 
 (21.39)
where 
 denotes contraction of the first two base vectors [See page 241].
T˜˜
gradT˜˜
1
V---
n˜ T˜˜
S
d
∂Ω∫
V
0
→
lim
≡
∇T˜˜
∇T˜˜
(
)pqr
∂Tqr
(
)
∂xp
----------------
=
∇T˜˜
∂Tij
(
)
∂xn
--------------e˜ne˜ie˜j
=
∇T˜˜
(
)pqr
∇T˜˜
(
)qpr
≠
divT˜˜
1
V---
n˜
T˜˜
•
S
d
∂Ω∫
V
0
→
lim
≡
∇
T˜˜
•
∇
T˜˜
•
(
)i
∂Tki
(
)
∂xk
---------------
=
∇
T˜˜
•
∂Tki
(
)
∂xk
---------------e˜i
=
∇
T˜˜
•
C12 ∇T˜˜
[
]
I˜˜
: ∇T˜˜
[
]
=
=
C1
2

September 4, 2003 5:24 pm
Vector/tensor differential calculus
257
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The curl of a second-order tensor (which plays a role in non-local and polar theories of
material modeling) is a second-order tensor, defined
, 
 (21.40)
Also denoted by 
, this operation is given in RCS indicial and basis notation as
 (21.41)
 (21.42)
Note that
, 
 (21.43)
Note that both the divergence and the curl can be obtained from the gradient 
 by
applying a second-order inner product (i.e., a double dot, or double contraction) between a
constant isotropic tensor (either the identity or the permutation tensor) and 
. This
observation can prove useful when (later) evaluating integrals; specifically, both the con-
stant isotropic tensor and the contraction operation (which is a linear operation) can be
pulled “outside” the integral in many instances.
Spatial gradient operations for higher order tensors are defined similarly (consistent
structure).
Product rule for gradient operations. For scalars, the product rule of differentiation
says
,
 (21.44)
where the prime denotes differentiation. Similar rules exist for gradients (or divergences
or curls) of products of higher-order tensors, but the issue of basis ordering becomes para-
mount. When seeking to derive such a formula, your best strategy is to apply the product
rule to the RCS components, and then reconstruct the direct notation (structured) formula
once you’re done.
curlT˜˜
1
V---
n˜
T˜˜
×
S
d
∂Ω∫
V
0
→
lim
≡
∇
T˜˜
×
∇
T˜˜
×
(
)pq
εpmn
∂Tnq
(
)
∂xm
----------------
=
∇
T˜˜
×
εimn
∂Tnj
(
)
∂xm
---------------e˜ie˜j
=
∇
T˜˜
×
ε
˜˜˜
: ∇T˜˜
[
]
=
∇T˜˜
∇T˜˜
d f x
( )g x
( )
(
)
dx
----------------------------
f x
( )g ′ x
( )
g x
( )f ′ x
( )
+
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
258
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The direct notation formulas for scalar and vector arguments are straightforward and
relatively intuitive. However, gradient formulas for second and higher-order tensors must
frequently use of the exchange (swap) operator 
 discussed on page 242 if they are to be
expressed in direct (structured) notation. The key concept is
 (21.45)
For example, 
 is a special case of the gradient of a second-order tensor (because
a dyad is a tensor). The result must be a third order tensor, expressed in RCS basis notation
as
 (21.46)
Imagine for a moment that the 
 is a vector. Then self-consistency of this book’s tensor
structures says that it must be multiplied dyadically with 
. The del 
 comes first, then
, then . Expanding 
 with a product rule must result in an expression that pre-
serves this exact same ordering. The base vector that goes along with 
 has to come first.
The base vector that goes with 
 comes second and the one with  comes last. Using the
product rule, the derivative may be written in RCS basis notation as
 (21.47)
Consider the first term on the right-hand side of this equation. Equation (7.60) permits us
to move over the 
 factor so that it is adjacent to the 
 base vector. Doing this allows us
to write that first term in direct (structured) notation:
,
 (21.48)
The last term right-hand side of Eq. (21.47) is not so easy. Equation (7.60) tells us that sca-
lar multiplication of dyads is a commutative operation — the scalar may “move around”
freely, attaching itself to any of the vectors that form the dyad or triad. Unfortunately,
however, dyadic multiplication itself is not commutative (it’s order dependent). While it is
permissible to move the 
 over to be adjacent to 
, it is not permissible to move the 
over to become adjacent to 
. Doing that would change the basis triad ordering from
 to 
, which is not the same triad, so the move is not permissible. There is no
way to express the last term right-hand side of Eq. (21.47) in structured notation without
using a swap operation. Intuitively, you might anticipate the second term to come out to
be 
, however this is wrong — we’ve shown that this result would entail invalid
rearrangement of the basis triad. Stated differently, it fails to preserve the required “
-
then-
-then- ” ordering. However, you can apply a swap operation, 
 to the expression
 to put the basis ordering back to what it’s supposed to be. Therefore, 
,
 (21.49)
Xi
j
Dyadic ordering must be preserved in gradient operations
∇u˜ v˜
(
)
∇u˜ v˜
(
)
∂uivj
(
)
∂xn
-----------------e˜ne˜ie˜j
=
∇
u˜ v˜
∇
u˜
v˜
∇u˜ v˜
(
)
∇
u˜
v˜
∇u˜ v˜
(
)
∂ui
∂xn
--------vj



e˜ne˜ie˜j
ui
∂vj
∂xn
--------



e˜ne˜ie˜j
+
=
vj
e˜j
∂ui
∂xn
--------vj



e˜ne˜ie˜j
∂ui
∂xn
--------



e˜ne˜i
vje˜j
{
}
∇u˜
[
]v˜
=
=
ui
e˜i
e˜i
ui
e˜ne˜ie˜j
e˜ie˜ne˜j
u˜ ∇v˜
(
)
∇
u˜
v˜
X1
2
u˜ ∇v˜
(
)
ui
∂vj
∂xn
--------



e˜ne˜ie˜j
X12 u˜ ∇v˜
(
)
[
]
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
259
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and we have our product rule identity in structured notation:
 (21.50)
The rule about preserving dyadic ordering applies only to the dyadically multiplied vec-
tors (or vector-like quantities such as the “nabla” or “del” 
) — not to the ones that are
“annihilated” by a dot product or other contraction (but you do need to make sure that the
same vectors (or vector-like quantities) are annihilating each other in each term. For
example, in our identity list below, we cite the formula
 (21.51)
At first glance, the operand ordering might appear to be “
-then- -then- ”. However, 
is a scalar, so it is not required to be part of this ordering. Furthermore, even though the
dyadic product of two vectors is order dependent (
), the dot product is not order
dependent 
. Are the same “vectors” annihilating each other in every term?
Yes. On the left hand side, the nabla 
 “annihilates” the vector 
 (so their ordering
doesn’t matter, but they must still annihilate each other in each term of the identity). On
the first term of the right hand side, the vector  is still annihilating the nabla, and it is
doing the same on the last term. Order dependence is not required on the del or the  in
Eq. (21.51) because, after the dot product, there exist no base vectors to keep ordered —
the result is a scalar. Only dyadically multiplied vectors (or vector-like quantities) must
preserve order. After a while, these subtleties will become second nature to you. Until
then, your best bet is to work out identities like this using RCS indicial notation, and then
cast the final result back to symbolic structured notation (you need to cast back to struc-
tured notation if you wish to apply the identity in curvilinear coordinates, where the RCS
formulas don’t apply; the fact that you temporarily used RCS in your derivations is incon-
sequential — once you have the structured formula, you can write it down in any system
you prefer by using appropriate tabulated formulas for each operation).
Identities involving the “nabla”. 
Identities that involve the “nabla” 
 gradient operator are listed below. For clarity, the
equivalent identity is also expressed indicially for a rectangular Cartesian system (RCS).
Though easier to interpret, the indicial expressions are valid only for RCS. Different for-
mulas must be used for curvilinear systems [see page 252]. We highly recommend that
you do not try to memorize this list or carry it around with you. Chances are that whatever
identity you need for a particular application won’t be listed here. Instead, you should use
this list as a “practice-ground” for you to learn how to prove the formulas yourself.
 (21.52)
also see Eq. (21.70)
 (21.53)
∇u˜ v˜
(
)
∇u˜
(
)v˜
X1
2 u˜ ∇v˜
(
)
[
]
+
=
∇
∇
φv˜
(
)
•
v˜
∇φ
(
)
•
φ ∇
v˜
•
(
)
+
=
∇
φ
v˜
φ
a˜b˜
b˜a˜
≠
a˜
b˜
•
b˜
a˜
•
=
∇
v˜
v˜
v˜
∇
∇φψ
(
)
φ ∇ψ
(
)
ψ ∇φ
(
)
+
=
∂φψ
(
)
∂xn
---------------
ψ ∂φ
∂xn
--------




φ ∂ψ
∂xn
--------




+
=
∇u˜
v˜
•
(
)
∇u˜
(
)
v˜
•
∇v˜
(
)
u˜
•
+
=
∂ukvk
(
)
∂xi
------------------
∂uk
∂xi
--------



vk
∂vk
∂xi
--------



uk
+
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
260
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.54)
 (21.55)
 (21.56)
 (21.57)
 
(see below)
 (21.58)
 
(see below)
 (21.59)
 (21.60)
 (21.61)
 (21.62)
 (21.63)
 
(see below)
 (21.64)
 (21.65)
 (21.66)
The identity (21.58) follows from noting that, for any sufficiently smooth function 
, 
 (21.67)
When applied to a double gradient, this calculus identity may be written
 (21.68)
In other words, there is symmetry with respect to the indices  and . Consequently, the
second partial derivative in Eq. (21.58) is symmetric with respect to the  and  indices.
When contracted with 
, which is skew-symmetric in its  and  indices, the result must
be zero. Equations (21.59) and (21.64) are zero for similar reasons.
∇φ
ψ
+
(
)
∇φ
∇ψ
+
=
∂φ
ψ
+
(
)
∂xn
---------------------
∂φ
∂xn
--------
∂ψ
∂xn
--------
+
=
∇u˜
v˜
+
(
)
∇u˜
∇v˜
+
=
∂ui
vi
+
(
)
∂xn
-----------------------
∂ui
∂xn
--------
∂vi
∂xn
--------
+
=
∇φu˜
(
)
∇φ
(
)u˜
φ ∇u˜
(
)
+
=
∂φui
(
)
∂xn
----------------
∂φ
∂xn
--------



ui
φ
∂ui
∂xn
--------




+
=
∇u˜ v˜
(
)
∇u˜
(
)v˜
X1
2 u˜ ∇v˜
(
)
[
]
+
=
∂uivj
(
)
∂xn
-----------------
∂ui
∂xn
--------vj
ui
∂vj
∂xn
--------
+
=
∇
∇
v˜
×
(
)
•
0
=
∂
∂xi
-------εijk
∂uk
∂xj
--------
εijk
∂2uk
∂xi∂xj
---------------
0
=
=
∇
∇φ
(
)
×
0
˜
=
εijk
∂∂φ ∂xk
⁄
(
)
∂xj
--------------------------
εijk
∂2φ
∂xj∂xk
----------------
0
=
=
∇
φv˜
(
)
•
v˜
∇φ
•
φ∇
v˜
•
+
=
∂φvi
(
)
∂xi
---------------
∂φ
∂xi
-------



vi
φ
∂vi
∂xi
-------




+
=
∇
φv˜
(
)
×
φ∇
v˜
×
∇φ
(
)
v˜
×
+
=
∇
u˜
v˜
×
(
)
•
v˜
∇
u˜
×
(
)
•
u˜
∇
v˜
×
(
)
•
–
=
∇
u˜
v˜
×
(
)
×
u˜ ∇
v˜
•
(
)
u˜
∇v˜
(
)
•
–
v˜
∇u˜
(
)
•
v˜ ∇
u˜
•
(
)
–
+
=
∇
∇φ
∇ψ
×
(
)
•
0
=
∇
∇
v˜
×
(
)
×
∇∇
v˜
•
(
)
∇2v˜
–
=
v˜
∇
u˜
×
(
)
×
2 skw ∇u˜
(
)
[
]
v˜
•
=
f x y
,
(
)
∂f
∂x∂y
------------
∂f
∂y∂x
------------
=
∂    
(
)
∂xi∂xj
---------------
∂    
(
)
∂xj∂xi
---------------
=
i
j
i
j
εijk
i
j

September 4, 2003 5:24 pm
Vector/tensor differential calculus
261
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Compound differential operator notation (and unfortunate pampering). You will
frequently see authors use a compound gradient operator such as “
”, the meaning
of which depends on the operand. For example, the notation 
 means the same
thing as 
 and the notation 
 means the same thing as 
. Note that
this equivalence is similar to saying that 
 means the same thing as 
.
As a general rule, if you are ever faced with “deciphering” a compound gradient oper-
ator (i.e., one that involves a gradient and other things), then the indicial form for the oper-
ation should be similar to the indicial forms of algebraic equations where the nabla/del is
replaced with an ordinary vector. Just keep in mind that the nabla will be operating on
everything to its right in a given term (or up through a closed parenthesis if the operator is
intended to act on multiple terms).
Upon occasion, you will need to work with another person who doesn’t have a back-
ground in tensor analysis. Such a person will not be able to decipher an expression like
 because this expression involves a tensor 
 which is foreign to them. To help
these people out, you can replace 
 by something more familiar to non-tensor-
savvy researchers through the use of the following identity:
 
(proof below)
 (21.69)
Using this identity, for example, you can write the identity of Eq. (21.53) as
 (21.70)
which is what you would typically find in a standard handbook such as the CRC [3]. There
is absolutely no reason to use this horrendous identity unless you are dealing with a “ten-
sor-challenged” audience. The identity of Eq. (21.53) is far more elegant and less prone to
computational error.
Recall that the compound operator 
 in an expression of the form 
 is
merely an alternative notation for 
. The compound operator is introduced to
make the presence of a tensor transparent to people who aren’t familiar with them. Note
that 
. Instead, 
. A simple — but of course cru-
cial — difference of arrangement of indices that distinguishes these expressions.
To prove Eq. (21.69), consider the expression 
. In indicial form, this is
 (21.71)
This expression has two permutation symbols, and the index “n” appears on both of them,
so you can use the e-delta identity to write
 (21.72)
Multiplying this out gives
 (21.73)
u˜
∇
•
(
)
u˜
∇
•
(
)φ
u˜
∇φ
(
)
•
u˜
∇
•
(
)v˜
u˜
∇v˜
(
)
•
a˜
b˜
•
(
)c˜
a˜
b˜c˜
(
)
•
∇u˜
(
)
v˜
•
∇u˜
∇u˜
(
)
v˜
•
∇u˜
(
)
v˜
•
v˜
∇
•
(
)u˜
v˜
∇
u˜
×
(
)
×
+
=
∇u˜
v˜
•
(
)
v˜
∇
•
(
)u˜
u˜
∇
•
(
)v˜
v˜
∇
u˜
×
(
)
×
u˜
∇
v˜
×
(
)
×
+
+
+
=
v˜
∇
•
(
)
v˜
∇
•
(
)u˜
v˜
∇u˜
(
)
•
v˜
∇u˜
(
)
•
∇u˜
(
)
v˜
•
≠
v˜
∇u˜
(
)
•
∇u˜
(
)T
v˜
•
=
v˜
∇
u˜
×
(
)
×
v˜
∇
u˜
×
(
)
×
{
}i
εimnvm εnpq
∂
∂xp
--------uq




=
v˜
∇
u˜
×
(
)
×
{
}i
δipδmq
δiqδmp
–
(
)vm
∂uq
∂xp
--------
=
v˜
∇
u˜
×
(
)
×
{
}i
vq
∂uq
∂xi
--------
vp
∂ui
∂xp
--------
–
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
262
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
In structured notation, this result may be written
 (21.74)
Solving for 
 gives the result of Eq. (21.69). This result, by the way, is also the
proof of Eq. (21.66).
Right and left gradient operations (we love them both!)
You can define the gradient, divergence, and Laplacian formulas differently from the way
they were defined in the previous section. Specifically, you can define
 (21.75)
 (21.76)
 (21.77)
 (21.78)
Note that the only difference between these formulas and the ones in the previous section
is the placement of the unit normal 
. In terms of rectangular Cartesian coordinate sys-
tems (RCS), these operations can be computed by
 (21.79)
 (21.80)
 (21.81)
 (21.82)
Writing these operations using a “del” 
 operation requires the introduction of a new del
symbol, 
. This is a backward operating gradient defined such that
 means the same thing as 
 (21.83)
 means the same thing as 
 (21.84)
 means the same thing as 
 (21.85)
v˜
∇
u˜
×
(
)
×
∇u˜
(
)
v˜
•
v˜
∇u˜
(
)
•
–
=
∇u˜
(
)
v˜
•
GRADφ
1
V---
φn˜ S
d
∂Ω∫
V
0
→
lim
≡
GRADu˜
1
V---
u˜ n˜ S
d
∂Ω∫
V
0
→
lim
≡
DIVu˜
1
V---
u˜
n˜
•
S
d
∂Ω∫
V
0
→
lim
≡
CURLu˜
1
V---
u˜
n˜
×
S
d
∂Ω∫
V
0
→
lim
≡
n˜
GRADφ
e˜k
∂φ
∂xk
--------
=
GRADu˜
∂ui
∂xj
-------e˜ie˜j
=
DIVu˜
∂uk
∂xk
--------
=
CURLu˜
εijk
∂uj
∂xk
--------e˜i
=
∇
∇
φ∇
GRADφ
u˜ ∇
GRADu˜
u˜
∇
•
DIVu˜

September 4, 2003 5:24 pm
Vector/tensor differential calculus
263
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 means the same thing as 
 (21.86)
To avoid any confusion when working with both types of gradient operators, the “del”
symbol used in the previous section can be alternatively written as a forward operating del
as 
.
Note that
 = 
 (21.87)
 = 
 (21.88)
 = 
 (21.89)
 = 
 (21.90)
The last formula is similar to the ordinary vector identity, 
. Note that 
is a second-order tensor (of class 
). Consequently, 
 = tr(
)
 (21.91)
 = 
 (21.92)
The Laplacian, which is simply the DIVergence of the GRADient and is commonly
denoted by the operator 
:
 (21.93)
Sadly, the backward operating gradient is rarely seen in publications. We won’t deny that
it is certainly difficult to typeset. Nonetheless, it is very useful to recognize that these
alternative definitions of differentiation exist. For both the forward and backward operat-
ing dels, note that the index on the 
 is the same as the index that would be used
if the del were just a vector. For example, if  is a vector, then dyad 
 would expand as
, which is similar in structure to 
 (21.94)
Conversely, the dyad 
 would expand as 
, which is similar in structure to
 (21.95)
Despite this heuristic notation, keep in mind that the del is not a vector. The issue of right
and left operating dels comes up implicitly in the mechanics literature, where it is not
uncommon to see authors (e.g., Ref. [18]) to define 
 to mean 
 in their nomencla-
ture section, but later state that the velocity gradient tensor is 
, which is actually
a backward gradient. This is an infuriatingly sloppy structure consistency violation. It
undermines the goal of having heuristically self-explanatory notation.
u˜
∇
×
CURLu˜
∇
φ∇
∇φ
u˜ ∇
∇u˜
(
)T
u˜
∇
•
∇
u˜
•
u˜
∇
×
∇
u˜
×
(
)
–
u˜
v˜
×
v˜
u˜
×
–
=
∇u˜
V3
2
u˜
∇
•
u˜ ∇
u˜
∇
×
ε
˜˜˜
: u˜ ∇
(
)
∇2
φ∇2
DIV GRADφ
(
)
≡
∇2φ
=
∂   
(
) ∂xk
⁄
d˜
d˜u˜
diuje˜ie˜j
∇u˜
∂
∂xi
-------uje˜ie˜j
=
u˜ d˜
uidje˜ie˜j
u˜ ∇
∂uj ∂xi
⁄
(
)e˜ie˜j
=
u˜
∇
∂uj
∂xi
-------e˜ie˜j
v˜
∇
∂vi
∂xj
-------e˜ie˜j
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
264
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Other authors [e.g. 24] define the gradient 
 with respect to  by being more
explicit in the presumption that 
 is expressible as a function of  so that there is a func-
tion  such that 
. Then 
 is defined to be the linear transformation (if it
exists) for which
 (21.96)
Here, the symbol “o” represents “order” and 
 represents a function 
 for which
 (21.97)
Note that Eq. (21.96) looks a lot like a first-order Taylor series expansion. When this
approach is used to define the gradient, then Eq. (21.2) comes out as a result. If you think
about it, this definition is pretty close to the definition of ordinary differentiation that you
might see in an undergraduate calculus book. If you think of  as being an infinitesimal
increment 
, then 
 can be regarded as an increment 
 and therefore
Eq. (21.96) can be written somewhat less cryptically as
 (21.98)
Using our nabla notation, this would be written
 (21.99)
The other derivative operations can be defined similarly using this approach. 
Unfortunately, many authors [e.g., 24] define the gradient as shown in Eq. (21.98) —
which is a backward or “right” gradient — but they still use a nabla on the left so that they
write Eq. (21.99) as 
. We find this horribly confusing. With our distinc-
tion between left and right gradients, the forward (left) gradient would be defined in ana-
log to Eq. (21.98) as
 (21.100)
which would be written using the nabla as
 (21.101)
Note that, regardless of whether a forward or backward nabla is used, the spatial incre-
ment 
 is always positioned so that it dots directly into the nabla. Again, we contend that
both backward and forward gradients are useful, but we feel adamant that the notation
should carefully distinguish between them. Incidentally, as you move along to gradients of
higher-order tensors, even more types of gradients can be defined according to the index
placements. For example, here are three possible definitions of the gradient of a second-
order tensor:
 (21.102)
 (21.103)
GRADu˜
x˜
u˜
x˜
g
u˜
g x˜
( )
=
GRADu˜
g x˜
s˜
+
(
)
g x˜
( )
GRADu˜
(
)
s˜
•
o s2
(
)
+
+
=
o s2
(
)
f s˜( )
f s˜( )
s˜
---------------
s˜
0
˜
→
lim
0
=
s˜
dx˜
g x˜
s˜
+
(
)
g x˜
( )
–
du˜
du˜
GRADu˜
(
)
dx˜
•
=
du˜
u˜ ∇
dx˜
•
=
du˜
∇u˜
(
)
dx˜
•
=
du˜
dx˜
gradu˜
(
)
•
=
du˜
dx˜
∇u˜
•
=
dx˜
forward_gradU˜˜
(
)ijk
∂Ujk
∂xi
-----------
=
middle_gradU˜˜
(
)ijk
∂Uik
∂xj
-----------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
265
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.104)
We would be hard-pressed to come up with a simple direct notation for the middle gradi-
ent, and the situation would only get worse for higher-order tensors. Note, however, that
the only distinction between these definitions is the index ordering. We have defined the
exchange operator as a mechanism for re-ordering indices. Hence, you can always com-
pute a gradient using any index placement you prefer, and then easily obtain the other gra-
dients by exchange operations. Specifically,
 (21.105)
 (21.106)
 (21.107)
What a mess! Our point here is that you can get to any other gradient definition if you
have computed it using another definition — all that’s needed is exchange operations. This
fact can be very convenient in product rule situations. 
Casual (non-rigorous) tensor calculus
The gradient operations that we have defined so far don’t appeal to the intuition of
people who are new to this subject. Furthermore, definitions like these immediately trap a
person into a mindset that tensor calculus always has something to do with how fields
(scalar, vector, or tensor) vary in space where the independent variable is the position vec-
tor 
. However, whenever you have a quantity (tensor or scalar) whose value can be
expressed as a function of some other quantity (tensor or scalar), then straightforward
extensions of scalar calculus exist to permit you to quantify how the first quantity changes
in response to a change in the second quantity. For example, in elastic materials modeling,
the stress tensor often depends in some measurable way on the strain tensor, and the deriv-
ative of the stress tensor with respect to the strain tensor turns out to be a fourth-order ten-
sor — called the elastic tangent stiffness — that is completely analogous to Young’s
modulus 
 in the uniaxial stress equation 
. 
To approach tensor calculus in a more casual way, we will define our calculus notation
through a series of examples with the understanding that you should force yourself to plod
through more the formal expositions on this subject available in any good tensor analysis
textbook. 
Whenever we write
, 
 (21.108)
backward_gradU˜˜
(
)ijk
∂Uij
∂xk
----------
=
U˜˜
∇
backward_gradU˜˜
∂Uij
∂xk
----------e˜ie˜je˜k
=
=
middle_gradU˜˜
(
)ijk
X2
3 U˜˜
∇
(
)
=
forward_gradU˜˜
(
)ijk
X1
2X2
3 U˜˜
∇
(
)
=
x˜
E
σ
Eε
=
dy
˜
dx˜
------

September 4, 2003 5:24 pm
Vector/tensor differential calculus
266
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
we are implicitly telling you that the vector  can be expressed as a function of a single
vector 
. Consequently each 
 component must be a function of the three 
components. By the chain rule,*
 (21.109)
Noting that 
, this may be written
 (21.110)
Even if  is a nonlinear function of 
, note that the infinitesimal increment 
 is linear
with respect to 
. Thus, recalling Eq. (9.7), we have now demonstrated that there exists a
second-order tensor, which we will denote 
, such that
 (21.111)
Comparing with Eq. (21.110) shows that
 (21.112)
If  is the position vector, note that 
 is actually a backward-operating gradient.
SIDEBAR: “total” and “partial” derivative notation. Note that we have quietly
introduced our notational preference to use a “d” when writing 
 even though we
must, by necessity, use a “ ” in the partial derivative on the right-hand-side indicial
expansion. This choice has been made quite deliberately in order to maximize the analo-
gies that tensor calculus has with ordinary scalar calculus. To get a better appreciation of
why we have made this choice, consider the scalar calculus situation in which some vari-
able  is expressible solely as a function of an independent variable . Then, of course,
you would naturally write 
, not 
. The very act of writing 
 tells you
that  really can be written solely in terms of . If it turns out that  can be alternatively
written as a function of two other variables, u and v, then we could use the chain rule to
write
* In Eq. (21.109) we have written 
 on the reasonable assumption that you will understand this 
to mean the partial derivative with respect to 
, holding all other components of  constant. 
Except in this very special case, we strongly recommend explicitly showing what variables are held 
constant in partial derivatives whenever there is even the slightest chance of misinterpretation or 
confusion by your readers. This issue pops up continually in thermodynamics. The partial deriva-
tive of pressure 
 with respect to volume 
 takes on different values depending on the conditions 
at which the measurement is made. If, for example, the variation of pressure with volume is mea-
sured at constant temperature 
, then the derivative should be written 
. However, if the 
measurement is made under reversible insulated (no heat flow) conditions, then the derivative 
should be written 
, where  is entropy. The two derivatives aren’t equal!
y
˜
x˜
yi
x1 x2 x3
,
,
{
}
∂yi ∂xj
⁄
xj
x˜
P
V
T
∂P ∂V
⁄
(
)T
∂P ∂V
⁄
(
)s
s
dy
˜
dyie˜i
∂yi
∂xj
-------dxje˜i
=
=
dxj
dx˜
e˜j
•
=
dy
˜
∂yi
∂xj
------- dx˜
e˜j
•
(
)e˜i
∂yi
∂xj
-------e˜ie˜j




dx˜
•
=
=
y
˜
x˜
dy
˜
dx˜
dy
˜
dx˜
⁄
dy
˜
dy
˜
dx˜
------




dx˜
•
=
dy
˜
dx˜
------
∂yi
∂xj
-------e˜ie˜j
=
x˜
dy
˜
dx˜
⁄
dy
˜
dx˜
⁄
∂
y
x
dy dx
⁄
∂y ∂x
⁄
dy dx
⁄
y
x
y

September 4, 2003 5:24 pm
Vector/tensor differential calculus
267
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.113)
Note that we use “d” on the left-hand-side, and “ ’ on the right hand side where partial
derivatives exist, and “d” again for the total derivatives of u and v. The situation with vec-
tor derivatives is very similar. We have a vector  that can be computed if we know the
single vector . Just as an automobile is a single entity composed of hundreds of parts, we
say  is a single vector because it really is a single entity even though it consists of multi-
ple parts (components and base vectors). A velocity vector has three components, but you
wouldn’t say “the velocity ARE fast” any more than you would say “the automobile ARE
fast.” A vector IS the sum (not “are the sum”) of components times base vectors. A vector
IS a single object. When 
, we can alternatively regard  to be a function of the
three RCS components 
, 
, and 
. Then, in analog with Eq. (21.113) we would write
 (21.114)
Note the distinctions in the use of “d” and “ ” in this equation. It’s not hard to show that,
when the 
 are RCS components
 (21.115)
Likewise, since the base vectors themselves are fixed when using RCS coordinates, 
 (21.116)
Putting Eqs. (21.115) and (21.116) into (21.114), taking care to preserve the order of
dyadic multiplication of the base vectors, gives us back our result of Eq. (21.112). 
There are other analogs with conventional scalar calculus that motivate our use of “d”
on the left hand side of Eq. (21.112). In scalar calculus, everyone knows that
 (21.117)
This identity holds if 
 (otherwise, we would be dividing by zero). The analog
for tensors is
,
 (21.118)
where the superscript “–1” is the tensor inverse. Of course, this property holds only if the
inverse exists (i.e., only if 
), just as Eq. (21.117) holds only if 
.
Eq. (21.117) was applicable because  was expressible solely as a function of
. In
general,
 (21.119)
dy
dx
------
∂y
∂u
------




v
du
dx
------
∂y
∂v
-----




u
dv
dx
------
+
=
∂
y
˜
x˜
x˜
y
˜
f x˜
( )
=
y
˜
x1 x2
x3
dy
˜
dx˜
------
∂y
˜
∂x1
--------dx1
dx˜
--------
∂y
˜
∂x2
--------dx2
dx˜
--------
∂y
˜
∂x3
--------dx3
dx˜
--------
+
+
=
∂
xj
dxj
dx˜
-------
e˜j
=
∂y
˜
∂xj
-------
∂yie˜i
(
)
∂xj
----------------
∂yi
∂xj
-------e˜i
=
=
dx
dy
------
1
dy dx
⁄
----------------
=
dy dx
⁄
0
≠
dx˜
dy
˜
------
dy
˜
dx˜
------
1
–
=
det dy
˜
dx˜
⁄
(
)
0
≠
dy dx
⁄
0
≠
y
x
∂x
∂y
-----
1
∂y ∂x
⁄
---------------
≠

September 4, 2003 5:24 pm
Vector/tensor differential calculus
268
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Equality generally holds only if both partial derivatives hold the same variable constant in
the derivative (in which case we are implicitly restricting our attention to a “world” in
which that same variable is always constant; in such a world, y would be expressible solely
as a function of ). To convince yourself that Eq. (21.119) is correct, consider polar coor-
dinates in which  and  are expressible as functions of  and . Namely
 
and 
 (21.120)
from which it follows that
 (21.121)
Equation (21.120) could, in principal, be inverted to obtain  and  in terms of  and  to
permit directly computing 
. However, to compute 
, you can alterna-
tively use implicit differentiation to obtain
 (21.122)
Note from Eq. (21.121) that
 (21.123)
and Eq. (21.122) tells us that
 (21.124)
Therefore,
 (21.125)
If (for some strange reason) you wished to know the variation in  with respect to  hold-
ing  constant, then you would be able to write 
 (21.126)
The only distinction between the above two equations is what variable is being held con-
stant. In one case equality holds; in the other it doesn’t — that’s why it is so essential to
explicitly show what’s being held constant unless you are 100% sure there is no chance of
confusion.* Don’t be so sure. In classic multivariable, scalar, calculus, the very act of writ-
ing 
 tells your reader that  can not be written solely in terms of  — it must be
x
x
y
r
θ
x
r
θ
cos
=
y
r
θ
sin
=
∂x
∂r
-----




θ
∂x
∂θ
------




r
∂y
∂r
-----




θ
∂y
∂θ
------




r
θ
cos
r
θ
sin
–
θ
sin
r
θ
cos
=
r
θ
x
y
∂r ∂x
⁄
(
)y
∂r ∂x
⁄
(
)y
∂r
∂x
-----




y
∂r
∂y
-----




x
∂θ
∂x
------




y
∂θ
∂y
------




x
∂x
∂r
-----




θ
∂x
∂θ
------




r
∂y
∂r
-----




θ
∂y
∂θ
------




r
1
–
θ
cos
r
θ
sin
–
θ
sin
r
θ
cos
1
–
θ
cos
θ
sin
θ
sin
–
r
--------------
θ
cos
r
------------
=
=
=
∂x
∂r
-----




θ
θ
cos
=
∂r
∂x
-----




y
θ
cos
=
∂r
∂x
-----




y
1
∂x ∂r
⁄
(
)θ
-----------------------
≠
r
x
θ
∂r
∂x
-----




θ
1
∂x ∂r
⁄
(
)θ
-----------------------
=
∂y ∂x
⁄
y
x

September 4, 2003 5:24 pm
Vector/tensor differential calculus
269
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
expressible in terms of  and whatever variable is being held constant in the partial deriv-
ative. That’s why we do not use “ ” when we write 
. We want you to know implic-
itly that 
 can be written purely as a function of 
 and nothing else. We would write
 only when  depends additionally on other things, and we would be diligent to
show what variable is held constant in the derivative if there is any chance for misinterpre-
tation of what this second variable is.
The “nabla” or “del” gradient operator. Researchers who use 
 typically do so
because this convention permits them to use the alternative notation 
, where the
“nabla” or “del” operator is heuristically defined such that
,
 (21.127)
With this “right-operating” del, the differentiation with respect to 
 acts on quantities to
the right. Thus, the 
 component of 
 has indices that are heuristically similar to the 
component of an ordinary dyad 
, namely 
. In other words, to ensure structural self-
consistency, 
 would have to be defined such that
, which implies that 
 (21.128)
To use a heuristic backward-operating “del” operator with our definition, we would
have to define
,
 (21.129)
which operates on arguments to its left. Then we could write
 (21.130)
Then the 
 component of 
 would be heuristically similar to the 
 components of 
.
Thus, 
 would be defined such that
, which implies that 
 (21.131)
Both the backward and forward operating del are used by Malvern and we also find
that they useful, depending on the application at hand. For the applications in this book, a
“del” operator is never needed. We will always use the “fraction-like” notation of
Eq. (21.112), which is technically a backward-operating derivative. With the fraction-like
notation, the indices are placed on the dependent variable 
 and then on the independent
variable 
 in the same order as the indices appear in the basis dyad 
. Because we will
always follow this convention, we may write 
 as
* An example where there is no chance of confusion is in expressions such as 
. This partial 
derivative is with respect to 
 holding the other 
 constant. For example, 
 is understood to 
mean 
. Aside from this component-based exception, we recommend explicitly show-
ing all other variables held constant. For example, 
 is understood to mean 
. 
∂φ ∂xi
⁄
xi
xj
∂φ ∂x2
⁄
∂φ ∂x2
⁄
(
)x1 x3
,
∂s ∂x2
⁄
(
)t
∂s ∂x2
⁄
(
)x1 x3 t
,
,
x
∂
dy
˜
dx˜
⁄
y
˜
x˜
∂y
˜
∂x˜
⁄
y
˜
∂yj ∂xi
⁄
∇y
˜
∇  
( )
∂  
( )
∂xi
-----------e˜i
=
x˜
ij
∇y
˜
ij
a˜y
˜
aiyj
∇y
˜
dy
˜
dx˜
∇y
˜
(
)
•
=
∇y
˜
(
)ij
∂yj
∂xi
-------
=
  
( )∇
∂  
( ) ∂xj
⁄
e˜j
=
dy
˜
dx˜
⁄
y
˜
∇
=
ij
y
˜
∇
ij
y
˜
b˜
y
˜
∇
dy
˜
y
˜
∇
(
)
dx˜
•
=
y
˜
∇
(
)ij
∂yi
∂xj
-------
=
yi
xj
e˜ie˜j
dy
˜
dx˜
⁄

September 4, 2003 5:24 pm
Vector/tensor differential calculus
270
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.132)
without ambiguity. 
To ensure structural integrity, our convention of placing indices first on the dependent
variable and then on the independent variable will extend to higher order derivatives as
well. For example, the notation 
 (21.133)
denotes a sixth-order tensor defined by
 (21.134)
In contrast to Eq. (21.132), when we write a derivative with the “ ” symbol instead of
the “d” symbol, we are telling you that the dependent variable depends on more than one
tensor or vector quantity. For example, by writing the notation
 (21.135)
we are implicitly telling you that  can be written as a proper function of 
 and . The
subscript also indicates that the vector  is being held constant in the derivative. Thus, the
above derivative quantifies how the vector  would change if  were to be varied without
changing . For general variations in both independent variables, the total increment in 
must include contributions from both 
 and 
. Specifically, the above partial derivative
must be defined such that
 (21.136)
As before, if  is a function of 
 and , then 
 depends on the 
 and 
 components.
Hence,
.
 (21.137)
By the way, note that
 (21.138)
This is true because the same quantity — namely,  — is being held constant on both
sides of the equation. The property is not true if different things are held constant. Thus,
 in general
 (21.139)
dy
˜
dx˜
------
dU˜˜
dY˜˜˜˜
-------
∂Uij
∂Yklmn
----------------e˜ie˜je˜ke˜le˜me˜n
∂
∂y
˜
∂x˜
------




z
˜
y
˜
x˜
z
˜
z
˜
y
˜
x˜
z
˜
y
˜
dx˜
dz
˜
dy
˜
∂y
˜
∂x˜
------




z
˜
dx˜
•
∂y
˜
∂z
˜
-----




x˜
dz
˜
•
+
=
y
˜
x˜
z
˜
yi
xj
zk
∂y
˜
∂x˜
------




z
˜
∂yi
∂xj
-------




z
˜
e˜ie˜j
=
∂x˜
∂y
˜
------




z
˜
∂y
˜
∂x˜
------




z
˜
1
–
=
z
˜
∂x˜
∂y
˜
------




z
˜
∂y
˜
∂x˜
------




w˜
1
–
≠

September 4, 2003 5:24 pm
Vector/tensor differential calculus
271
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Okay, if the above relation does not hold, does anything LIKE IT hold? 
If you really wish to relate 
 to 
, then you must be extra careful with
your logic. The basic motivation for seeking such a relationship in the first place is that
you must not have the actual function for 
 as a function of  and  available. Instead,
you have  as a function of  and some other variable 
. Recall that the very act of writ-
ing 
 tells your reader that there does exist some function for  as a function of 
and  even if you don’t happen to have that function available at hand. Now, if 
 is a
function of  and , then it might be possible to solve this relationship to obtain  as a
function of 
 and . The very act of writing the expression 
, implies that 
must be expressible as a function of  and some other variable 
. Thus, you have simul-
taneous implied functions
 and 
 (21.140)
The only way these can both be true is if
 (21.141)
Now you can apply the chain rule to write
 (21.142)
or, noting that 
 is just the identity tensor,
 (21.143)
Putting this into Eq. (21.138) gives
 (21.144)
Another set of commonly-used identities from single-variable scalar calculus is
and
 (21.145)
The analogs in tensor analysis are 
and
 (21.146)
Note that the inverted tensor is on the right side of the dot product in one case but on the
left in the other. The way to determine which one is correct is to start with the chain rule:
and
 (21.147)
Solving these expressions for 
 gives Eq. (21.145).
∂x˜ ∂y
˜
⁄
(
)z
˜
∂y
˜
∂x˜
⁄
(
)w˜
x˜
y
˜
z
˜
y
˜
x˜
w˜
∂x˜ ∂y
˜
⁄
(
)z
˜
x˜
y
˜
z
˜
x˜
y
˜
z
˜
y
˜
x˜
z
˜
∂y
˜
∂x˜
⁄
(
)w˜
y
˜
x˜
w˜
y
˜
y
˜
x˜ z
˜
,
(
)
=
y
˜
y
˜
x˜ w˜
,
(
)
=
w˜
w˜ x˜ z
˜
,
(
)
=
∂y
˜
∂x˜
------




z
˜
∂y
˜
∂x˜
------




w˜
∂x˜
∂x˜
------




z
˜
•
∂y
˜
∂w˜
-------




x˜
∂w˜
∂x˜
-------




z
˜
•
+
=
∂x˜ ∂x˜
⁄
(
)z
˜
∂y
˜
∂x˜
------




z
˜
∂y
˜
∂x˜
------




w˜
∂y
˜
∂w˜
-------




x˜
∂w˜
∂x˜
-------




z
˜
•
+
=
∂x˜
∂y
˜
------




z
˜
∂y
˜
∂x˜
------




w˜
∂y
˜
∂w˜
-------




x˜
∂w˜
∂x˜
-------




z
˜
•
+
1
–
=
dy
dx
------
dy dw
⁄
dx dw
⁄
-----------------
=
dy
dx
------
dw dx
⁄
dw dy
⁄
-----------------
=
dy
˜
dx˜
------
dy
˜
dw˜
-------
dx˜
dw˜
-------
1
–
•
=
dy
˜
dx˜
------
dw˜
dy
˜
-------
1
–
dw˜
dx˜
-------
•
=
dy
˜
dw˜
-------
dy
˜
dx˜
------
dx˜
dw˜
-------
•
=
dw˜
dx˜
-------
dw˜
dy
˜
-------
dy
˜
dx˜
------
•
=
dy
˜
dx˜
⁄

September 4, 2003 5:24 pm
Vector/tensor differential calculus
272
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
For multi-variable scalar calculus, the identities equivalent to (21.145) are
and
 (21.148)
These identities are truly equivalent to (21.145) because the same variable, s, is being held
constant in all of the partial derivatives.
Another fundamentally different but similar identity states that
 (21.149)
Note that this identity is completely different from the second one in Eq. (21.148) because
of the variables held constant in the derivative. To derive this result, start with the basics.
We are interested in converting a derivative for which  is an independent variable held
constant into an expression where  is a dependent variable. The act of writing 
tells us that 
. In principle, we could solve this function for 
 and it
is this function that is being differentiated on the right-hand-side of Eq. (21.149). Writing
out the chain rule for this function gives
 (21.150)
This expression holds for arbitrary variations of  and . However, recalling that we are
trying to obtain an expression for 
, what we really want to consider is variations
of  and  that will involve no changes in
— in other words, we are restricting attention
to motions for which 
. Note that
 (21.151)
regardless of what variable  represents (other than  itself, of course). This equation is
simply asserting that the variation of  holding  constant must be zero. We can therefore
write the total increment chain rule of Eq. (21.150) in terms of partial derivatives holding
 constant:
 (21.152)
Now let’s make a choice for the variable 
. Taking 
 to denote 
, the above equation
becomes
 (21.153)
or, since 
 no matter what is being held constant (except  itself of course)
 (21.154)
∂y
∂x
-----




s
∂y ∂w
⁄
(
)s
∂x ∂w
⁄
(
)s
------------------------
=
∂y
∂x
-----




s
∂w ∂x
⁄
(
)s
∂w ∂y
⁄
(
)s
------------------------
=
∂y
∂x
-----




s
∂s ∂x
⁄
(
)y
∂s ∂y
⁄
(
)x
----------------------
–
=
s
s
∂y ∂x
⁄
(
)s
y
y x s
,
(
)
=
s
s x y
,
(
)
=
ds
∂s
∂x
-----dx
∂s
∂y
-----dy
+
=
x
y
∂y ∂x
⁄
(
)s
x
y
s
ds
0
=
∂s
∂ξ
------




s
0
=
ξ
s
s
s
s
0
∂s
∂x
----- ∂x
∂ξ
------




s
∂s
∂y
----- ∂y
∂ξ
------




s
+
=
ξ
ξ
x
0
∂s
∂x
----- ∂x
∂x
-----




s
∂s
∂y
----- ∂y
∂x
-----




s
+
=
∂x ∂x
⁄
1
=
x
0
∂s
∂x
-----
∂s
∂y
----- ∂y
∂x
-----




s
+
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
273
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Solving for 
 completes the proof of Eq. (21.149). 
For tensor calculus, the analog of Eq. (21.154) is
 (21.155)
or
 (21.156)
Note the rule of thumb: to derived tensor generalizations of familiar calculus derivative
identities, you will always want to start with the chain rule.
Directed derivative
Consider a function  that depends only on . The value of the function may be a sca-
lar, vector, or tensor of any order. Recall that 
 (21.157)
The gradient characterizes how the quantity 
 changes in response to an incremental
but otherwise arbitrary change in 
. Let us now be more specific. Suppose that you are
interested in simplifying the problem to a special case where  is known to change from
some initial position 
 to a current position 
 such that it moves from the first to final
point along a straight line segment. The vector connecting these two points can be defined
 (21.158)
The unit vector in the direction of the line segment  is defined simply
, where 
 (21.159)
so that the position increment may be written
 (21.160)
When restricting attention to situations where 
 moves only along the line segment ,
then it makes sense to consider the scalar  to quantify the location. Using just  makes
computations easier because it’s always easier to work with scalars than with vectors. The
directed derivative is the derivative of  with respect to a change in distance  along
the line segment in the direction of 
.
 (21.161)
∂y ∂x
⁄
(
)s
0
˜˜
∂s˜
∂x˜
------
∂s˜
∂y
˜
-----
∂y
˜
∂x˜
------




s˜
•
+
=
∂y
˜
∂x˜
------




s˜
∂s˜
∂y
˜
-----
1
–
∂s˜
∂x˜
------
•
–
=
f
x˜
df
dx˜
------
∂f
∂xi
-------e˜i
=
f x˜
( )
x˜
x˜
x˜ 0
x˜
s˜
x˜
x˜ 0
–
≡
s˜
n˜
s˜s˜
s˜
•
--------------
≡
s
s˜
s˜
•
≡
s˜
sn˜
=
x˜
s˜
s
s
f
s
n˜
∂f
∂s
-----
df
dx˜
------
n˜
•
≡

September 4, 2003 5:24 pm
Vector/tensor differential calculus
274
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Our use of partial derivatives on the left hand side is a break with traditional notation, but
consistent with our self-imposed notation structure rules. We use partial derivatives here
to emphasize that we are examining the change in  with respect to , holding the allow-
able direction of the change constant.
EXAMPLE. Consider
 (21.162)
Then
 (21.163)
Suppose you wish to characterize how  changes when  moves in a direction that is par-
allel to  itself. In this case, 
 (21.164)
and therefore the directed derivative is
 (21.165)
If you let  denote the magnitude of , this means that 
.
 (21.166)
Given the way that the function is defined, you should have realized by now that a nat-
ural choice for the basis is spherical 
. As a matter of fact, the function  in Eq.
(21.162) can be alternatively written in terms of spherical coordinates as
 (21.167)
making the result of Eq. (21.166) far less mysterious, and further indicating that the quan-
tities held constant in the partial derivative are simply the other two spherical coordinates
 and 
. We’re talking about variations in f resulting from radial motion. Furthermore, in
terms of spherical coordinates, Eq. (21.164) is simply
 (21.168)
Now suppose that you wish to consider how the function  changes in response to a
change in  that is perpendicular to . In Eq. (21.165) we showed that the unit vector in
the direction of 
 happens to equal 
. Therefore, 
 is perpendicular to 
, and it turns
out that the directed derivative corresponding to changes in  that move in the direction of
 are zero:
,
 (21.169)
f
x˜
f
x˜
x˜
•
=
df
dx˜
------
∂f
∂xi
-------e˜i
∂xkxk
(
)
∂xi
------------------e˜i
δkixk
xkδki
+
(
)e˜i
2xie˜i
2x˜
=
=
=
=
=
f
x˜
x˜
n˜
x˜x˜
x˜
•
---------------
=
df
dx˜
------
n˜
•
2x˜
(
)
x˜x˜
x˜
•
---------------
•
2 x˜
x˜
•
2 x˜
=
=
=
r
x˜
∂f
∂r
-----
2r
=
e˜r e˜θ e˜ψ
,
,
{
}
f
f
r2
=
θ
ψ
df
dx˜
------
2re˜r
=
f
x˜
x˜
x˜
e˜r
e˜θ
x˜
x˜
e˜θ
∂f
∂θ
------
df
dx˜
------
e˜θ
•
2re˜r
(
)
e˜θ
•
0
=
=
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
275
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
meaning that the value of  does not change when  moves in the direction of 
, again
not a surprising result in light of Eq. (21.167).
To summarize, the directed derivative is best regarded as simply a way for you to
explore in a step-by-step manner how a function changes in response to changes in . All
you have to do is simply consider different directions for 
 to move in order to gain
insight into the field variability of . Incidentally, note that 
 is itself a directed
derivative, given by
 (21.170)
Derivatives in reduced dimension spaces
Suppose that you know that some scalar  can be expressed as a function of a vector
. Then, nominally, you may write 
. However, this is not really the
correct result if the vector  is not allowed to take any possible variation. If, for example,
the vector  is constrained such that it must always be a unit vector (i.e., if  must always
point to a location on the unit sphere), then radial variations of the vector 
 are not per-
missible. For situations like these, the definition of the derivative 
 must be rede-
fined such that
 for all permissible variations in .
 (21.171)
The way to compute this revised definition of the gradient is to first compute a nominal
gradient on the assumption that even inadmissible variations in 
 are allowed. Then this
nominal result must be modified to remove the inadmissibilities. Without this modifica-
tion, the gradient will not be unique and could even lead to strange counterintuitive
results!
As an introduction to this important topic, consider a one-dimensional curve embed-
ded in 3D space. Such a curve can be defined parametrically such that for each value of a
scalar  there exists a unique point  on the curve. As a specific example, consider
 (21.172)
The parameter  is here assumed to vary freely from 
 to 
. The non-parametric equa-
tion for this space curve is simply 
 and 
. 
The derivative of  with respect to  is 
 (21.173)
Not surprisingly, this result will always be tangent to the curve.
f
x˜
e˜θ
x˜
x˜
f
∂f ∂xi
⁄
∂f
∂xi
-------
df
dx˜
------
e˜i
•
=
s
x˜
ds dx˜
⁄
∂s ∂xi
⁄
(
)e˜i
=
x˜
x˜
x˜x˜
ds dx˜
⁄
ds
ds
dx˜
------




dx˜
•
=
x˜
x˜
s
x˜
x˜
sE˜ 1
esE˜ 2
+
=
s
∞
–
∞
x2
ex1
=
x3
0
=
x˜
s
dx˜
ds
------
E˜ 1
esE˜ 2
+
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
276
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Because the curve is one-dimensional, we know that each position  corresponds to a
unique value of the parameter . Conversely, each value of  is associated with exactly
one position vector  on the curve. Hence,  may be regarded as a proper function of .
However, what exactly is this function? Considering the coefficients of 
 in
Eq. (21.128), you can assert that
 (21.174)
but you can alternatively consider the coefficients of 
 to claim that
 (21.175)
Both of these expressions will give the correct value for  as long as  lies on the space
curve. However, directly differentiating these different expressions for  with respect to 
gives different answers. We will call these derivatives the “nominal” derivatives, and we
will denote them with a star:
Eq. (21.174) gives 
 (21.176)
Eq. (21.175) gives 
 (21.177)
These two expressions are perpendicular to each other, so they cannot possibly be equal.
The discrepancy must be resolved by using a projection of the increment 
 onto the
space of allowable increments. From Eq. (21.172), note that
 (21.178)
Therefore, the increment in position must always be parallel to the vector
 (21.179)
You can define the projector onto this vector by using Eq. (10.14):
 (21.180)
x˜
s
s
x˜
s
x˜
E˜ 1
s
x1
=
E˜ 2
s
x2
ln
=
s
x˜s
x˜
ds
dx˜
------



∗
E˜ 1
=
ds
dx˜
------



∗
E˜ 2
x2
------
=
dx˜
dx˜
E˜ 1
esE˜ 2
+
(
) ds
=
b˜
E˜ 1
esE˜ 2
+
≡
P˜˜
b˜
b˜
⊗
b˜
b˜
•
-------------
E˜ 1E˜ 1
esE˜ 2E˜ 1
esE˜ 1E˜ 2
e2sE˜ 2E˜ 2
+
+
+
1
e2s
+
------------------------------------------------------------------------------------------
=
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
277
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If 
 is an arbitrary increment in  that may or may not lie on the space curve (see Fig.
21.1), you can write the set of all allowable increments in the form
 (21.181)
To make use of the definition of a gradient, the increment in  must be expressed in terms
of truly arbitrary increments in , not just constrained increments. This is done by replac-
ing the constrained increment 
 by 
, which involves truly arbitrary incre-
ments:
 (21.182)
Applying the definition of gradients, it follows that the proper expression for the deriva-
tive of  with respect to allowable increments in position must be given by
 (21.183)
When applied to Eq. (21.176) this formula gives
 (21.184)
and when applied to Eq. (21.177), it gives
 (21.185)
x1
x2
dx˜
*
dx˜
1D “target” space
Figure 21.1.
Projecting an arbitrary position increment onto the space of
allowable position increments. 
dx˜
x˜
dx˜
(
)∗
P˜˜
dx˜
•
=
s
x˜dx˜
(
)∗
P˜˜
dx˜
•
ds
ds
dx˜
------



∗
dx˜
(
)∗
•
ds
dx˜
------



∗
P˜˜
dx˜
•
•
=
=
s
ds
dx˜
------
ds
dx˜
------



∗
P˜˜
•
=
ds
dx˜
------
E˜ 1
esE˜ 2
+
1
e2s
+
------------------------
=
ds
dx˜
------
E˜ 1
esE˜ 2
+
1
e2s
+
------------------------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
278
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
The above two results are identical — the paradox has been resolved! This unique result
should be used whenever the derivative of 
 with respect to 
 is needed. Using this
expression for the derivative also leads to intuitive results for chain rule applications. For
example, the chain rule tells us that
 (21.186)
Substituting Eqs. (21.183) and (21.184) into the right hand side leads to
 (21.187)
Thus, for this case of constrained increments 
, the derivative of 
 with respect to
itself is not the identity tensor — it is the projection operator that takes you to the space of
allowable increments in 
. For allowable increments 
, the projector has the prop-
erty
 (21.188)
Thus, the projection operator is the identity tensor along the space curve!
Another way of looking at this issue is to define a variable 
 so that the
actual curve of interest corresponds to 
. The advantage of this approach is outlined
in general below.
Suppose you are given 
 where 
 is constrained such that it satisfies
 for some constraint function f. Then you have two equations that must be satis-
fied simultaneously:
, where 
, and
 (21.189)
, where 
 (21.190)
The second equation tells us that 
, where 
. This leads to
the general formula for a constrained gradient:
, 
where 
, 
, 
, and 
 (21.191)
This formula extends similarly for dependent and independent variables of any tensor
order. It also extends to the case of multiple constraints. One serious issue with this for-
mula relates to the possibility that 
 might turn out to be zero. If the constraint is 
,
then a perfectly legitimate and equivalent alternative constraint would be 
.
When using 
 instead of , the vector 
 would turn out to be zero within the
s
x˜
dx˜
dx˜
------
dx
ds
------ ds
dx˜
------
=
dx˜
dx˜
------
P˜˜
=
dx˜
*
x˜
x˜
dx˜
(
)∗
P˜˜
dx˜
(
)∗
•
dx˜
(
)∗
=
f
x2
ex1
–
≡
f
0
=
s
s x˜
( )
=
x˜
f x˜
( )
0
=
ds
g
˜
dx˜
•
=
g
˜
ds
dx˜
------



∗
=
df
h˜
dx˜
•
0
=
=
h˜
df
dxi
-------e˜i
≡
dx˜
dx˜
hˆ
˜ hˆ
˜
dx˜
•
–
=
hˆ
˜
h˜
h˜
h˜
•
⁄
≡
ds
dx˜
------
g
˜
P˜˜
•
=
P˜˜
I˜˜
hˆ
˜ hˆ
˜
–
=
g
˜
ds
dx˜
------



∗
=
h˜
df
dxi
-------e˜i
≡
hˆ
˜
h˜
h˜
h˜
•
----------------
≡
h˜
f=0
f∗
f2
≡
0
=
f∗
f
h˜
∗
df∗
dxi
--------e˜i
≡
2fh˜
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
279
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
constrained space, and the above formula would break down because it would not be pos-
sible to compute a unit vector in the direction of 
. For this reason, it’s important to use
a careful procedural means of determining the projector 
 that converts an arbitrary incre-
ment into an admissible increment.
A more physically significant example. In materials modeling, tensors are frequently
symmetric. The projection operator that transforms any tensor into its symmetric part is
given by
 (21.192)
For nonlinear elasticity, the stress tensor 
 is taken to be a function of the strain tensor
. In rate form, nonlinear elasticity is therefore of the form
 (21.193)
where the tangent stiffness tensor is defined
 (21.194)
Even though 
, it is not automatically true that 
. You have to
force this property to hold by imposing the constrained increment projector onto this nom-
inal derivative.*
Because the strain tensor is symmetric, the tangent stiffness tensor can (and should) be
replaced by
 (21.195)
Doing this will ensure consistent results for derivatives, and you won’t end up with patho-
logical problems similar to those seen in the previous section. This is an extremely impor-
tant (and poorly attended to) concept.
* To convince yourself of this assertion, consider the very simple stress-strain relationship 
, where 
 is a constant. Direct differentiation would give the nominal result 
, which does not satisfy 
. Minor symmetry must be imposed after 
the nominal differentiation to obtain 
. 
h˜
∗
P˜˜
Pijkl
sym
1
2-- δikδjl
δilδjk
+
(
)
=
σpq
εmn
σ·
pq
Epqmnε·
mn
=
Epqmn
∂σpq
∂εmn
-----------
=
εmn
εnm
=
Epqmn
Epqnm
=
σij
αεij
=
α
Eijmn
αδimδjn
=
Epqmn
Epqnm
=
Eijmn
α
2--- δimδjn
δinδjm
+
(
)
=
Epqmn
∂σpq
∂εij
-----------



Pijmn
sym
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
280
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Series expansion of a nonlinear vector function
The concept of expanding a nonlinear vector function as a series expansion is so useful
that we will now close this book with it. In undergraduate calculus, the expansion of a
function of one variable 
 about a point 
 is given as
 (21.196)
Now consider a function of two variables, 
. The expansion of this function
about the point 
 is given by
+ 
+ 
+ 
 + 
 (21.197)
where
 evaluated at 
 evaluated at 
 evaluated at 
 evaluated at 
 evaluated at 
 evaluated at 
 
= 
 (21.198)
Note that the expansion is similar in structure to the expansion of a function of a single
variable except that there is one derivative of every order for every possible number of
ways to select the differentiation variables. Even though 
, this mixed partial
derivative still counts twice in the expansion.
Now consider a field variable 
. The vector 
 has three components, so this is a
function of three variables. In direct notation, the expansion of this field variable about a
point 
 is
 (21.199)
where
f x
( )
xo
f x
( )
f xo
(
)
f′ xo
(
) x
xo
–
(
)
1
2!
-----f′′ xo
(
) x
xo
–
(
)2
1
3!
-----f′′′ xo
(
) x
xo
–
(
)3
…
+
+
+
+
=
f x y
,
(
)
xo yo
,
(
)
f x y
,
(
)
fo
fx
o x
xo
–
(
)
1
2!
-----fxx
o x
xo
–
(
)2
+
+
=
fy
o y
yo
–
(
)
1
2!
-----fyy
o y
yo
–
(
)2
+
1
2!
-----fxy
o x
xo
–
(
) y
yo
–
(
)
1
2!
-----fyx
o y
yo
–
(
) x
xo
–
(
)
…
fo
f xo yo
,
(
)
≡
fx
o
∂f x y
,
(
)
∂x
------------------
=
x y
,
(
)
xo yo
,
(
)
=
fy
o
∂f x y
,
(
)
∂y
------------------
=
x y
,
(
)
xo yo
,
(
)
=
fxx
o
∂2f x y
,
(
)
∂x2
---------------------
=
x y
,
(
)
xo yo
,
(
)
=
fyy
o
∂2f x y
,
(
)
∂y2
---------------------
=
x y
,
(
)
xo yo
,
(
)
=
fxy
o
∂2f x y
,
(
)
∂x∂y
---------------------
=
x y
,
(
)
xo yo
,
(
)
=
fxy
o
∂2f x y
,
(
)
∂x∂y
---------------------
=
x y
,
(
)
xo yo
,
(
)
=
fyx
o
fxy
o
fyx
o
=
f x˜
( )
x˜
x˜ o
f x˜
( )
fo
f
˜
′o
x˜
x˜ o
–
(
)
•
1
2!
----- x˜
x˜ o
–
(
)
f
˜˜
′′
o
x˜
x˜ o
–
(
)
•
•
…
+
+
+
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
281
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 evaluated at 
 evaluated at 
 (21.200)
In Eq. (21.199) the first order derivative 
 is a vector and it appears in a vector inner
product with 
. The second-order derivative 
 is a second-order tensor, and it is
dotted from both sides by 
, which is the same thing as taking the second-order
tensor inner product 
 (21.201)
Following along with this pattern, the next term in Eq. (21.199) would be
,
 (21.202)
where  would denote the third-order tensor inner product* so that the component form of
the above expression would be
 (21.203)
In this case, the component form is clearer than the direct structural form, so it is a better
choice in publications, especially given that the triple dot notation is highly nonstandard
and might only confuse your readers. Alternatively, you can define a “*” operator to
denote the inner product appropriate to the tensor order of the quantity to the right of the
operator. Then the series expansion can be written
,
 (21.204)
where 
 is an 
 order tensor equal to the 
 derivative of  with respect to 
,
evaluated at 
, and 
 denotes 
 multiplied dyadically by itself n times.
This formula generalizes to  being an arbitrary order tensor if the derivatives are back-
ward derivatives.
* Clearly, indicating the order of the inner product by the number of “stacked dots” could lead to 
some very weird notation for higher order tensors. You have seen the notation 
 used for the 
fourth-order inner product. A circled number can always be used for higher order inner products.
fo
f x˜ o
(
)
≡
f
˜
′o
df x˜
( )
∂x˜
---------------
∂f
∂xi
-------e˜i
=
=
x˜
x˜ o
=
f
˜˜
′′
o
d2f x˜
( )
dx˜dx˜
---------------
∂2f
∂xi∂xj
---------------e˜ie˜j
=
=
x˜
x˜ o
=
f
˜
′o
x˜
x˜ o
–
(
)
f
˜˜
′′
o
x˜
x˜ o
–
(
)
f
˜˜
′′:
x˜
x˜ o
–
(
)
x˜
x˜ o
–
(
)
⊗
[
]
1
3!
-----f
˜˜˜
′′′
o
  
x˜
x˜ o
–
(
)
x˜
x˜ o
–
(
)
x˜
x˜ o
–
(
)
⊗
⊗
[
]
 
::
1
3!
-----∂3f
∂xi∂xj∂xk
------------------------
x˜ o
xi
xi
o
–
(
) xj
xj
o
–
(
) xk
xk
o
–
(
)
[
]
f x˜
( )
1
n!
----- fn x˜ o
(
)
[
]* x˜
x˜ o
–
(
)^n
n
0
=
∞
∑
=
fn x˜ o
(
)
nth
nth
f
x˜
x˜ o
x˜
x˜ o
–
(
)^n
x˜
x˜ o
–
f

September 4, 2003 5:24 pm
Vector/tensor differential calculus
282
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Exact differentials of one variable
Consider the expression typically given in undergraduate textbooks for the increment
in work 
 required for a force 
 to act through a distance 
. 
 (21.205)
This is very unfortunate notation. Notationally, in order for this to be true, the force must
be given by
 (21.206)
which is not always true. The very act of writing this derivative implies that 
 really can
be written as a proper single-valued function of , but that’s only true if the force is “con-
servative.” For frictional forces, simply knowing where you are (i.e., knowing x) is not
enough to determine the work — you have to know how you got there. If, for example,
you know that 
, then what is the work? Pushing a frictional block directly from 
to 
 will require a different amount of work than pushing it from 
 to 
, and then
finally to 
. For friction, the force depends on the direction of motion, not the position
of the block. 
Even if you are dealing with a physical quantity that changes whenever  changes,
that does not make it a function of . If you want to define work to equal the integral of
, then the only way you can actually evaluate the integral is if 
 is a function of . In
general, you will have to define work to be a path dependent quantity equal to the time
integral of 
. An example of a conservative force in one dimension is a simple spring.
A linear spring is governed by 
 and therefore the work is 
. When you stretch
a spring, it takes positive work on the outbound leg (you must apply a force in the same
direction as you are moving), but you gain that work back on the return trip (the force
points in the opposite direction of motion — that is, the spring helps pull you back on the
return trip).
The symbol 
 really should be used only for exact differentials. The expression
 is not generally an exact differential. Consider any given time history, or “path” 
,
for . Then the work associated with the path should be defined
 (21.207)
where 
. We’ve inserted reference to the path  to emphasize that, in general, the
values you obtain for the work will depend on the nature of the path itself, not just on the
endpoints. In particular, if the path for  begins and ends at the same position, the work
required to move the position around this closed path might not be zero:
 (21.208)
W
F
dx
dW
Fdx
=
F
dW
dx
--------
=
W
x
x=2
x=0
x=2
x=0
x=4
x=2
x
x
Fdx
F
x
Fx·dt
F
kx
=
1
2--kx2
dW
Fdx
p
x
W t2;p
(
)
W t1;p
(
)
–
Fx· td
t1
t2
∫
=
x·
dx dt
⁄
≡
p
x
Fdx
∫°
0
≠

September 4, 2003 5:24 pm
Vector/tensor differential calculus
283
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Nonzero work for a closed path will occur, for example, when you push a block a certain
distance along your desk and then back again. Because your desk has friction, you will
have to exert work both on the outbound path and on the return. In this case, rather than
typesetting the work increment as 
, you should explicitly call out this path dependence
by writing it as 
. The slash through the “d” tells your readers that information about
the entire path (not just endpoints) would have to be provided to integrate this work incre-
ment.
For 
 to be an exact differential, you must have
 for all closed paths in 
 (21.209)
If the force satisfies this constraint, then it is called a “conservative” force field, and it is
legitimate to write 
 for the associated work increment. In this case we are permitted to
write 
. To summarize
 for conservative forces
 (21.210)
Exact differentials of two variables
Consider the expression
 (21.211)
Is this an exact differential? In other words, does there exist a potential function 
such that
 (21.212)
If such a potential function exists, then the chain rule demands that we should be able to
write
 (21.213)
Comparing coefficients of 
 and 
 in Eqs. (21.211) and (21.213) shows that a neces-
sary condition for existence of the potential is
 and 
 (21.214)
The potential exists if this set of equations can be integrated. A necessary and sufficient
condition for existence of  is
 (21.215)
or
 (21.216)
dW
dW
Fdx
Fdx
∫°
0
=
x
dW
dW
Fdx
=
F
dW
dx
--------
=
f x y
,
(
)dx
g x y
,
(
)dy
+
u x y
,
(
)
du
f x y
,
(
)dx
g x y
,
(
)dy
+
=
du
∂u
∂x
------dx
∂u
∂y
------dy
+
=
dx
dy
∂u
∂x
------
f x y
,
(
)
=
∂u
∂y
------
g x y
,
(
)
=
u
∂2u
∂x∂y
------------
∂2u
∂y∂x
------------
=
∂f
∂y
-----
∂g
∂x
------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
284
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
If this is true, then the system in Eq. (21.214) has a solution. Otherwise, the expression
 is inexact.
The same result in a different notation. Instead of using the distinct symbols  and ,
let’s replace  by 
 and  by 
. Let’s also replace  and  by 
 and 
, respectively.
Then the above results can be written as follows:
 (21.217)
is an exact differential if and only if
 (21.218)
We can define a matrix 
, where the indices range from 1 to 2. Then the con-
straint of Eq. (21.218) requires that this matrix must be symmetric. If it is, then there exists
a potential such that
 (21.219)
The potential is found by integrating
 (21.220)
This system of two equations has a solution if the matrix 
 is symmetric.
Exact differentials in three dimensions
Under what conditions does there exist a potential 
 such that
 (21.221)
where the 
 are each functions of 
, 
, and 
. A necessary condition for the potential
to exist is
 (21.222)
A sufficient condition for the existence of the potential is
 (21.223)
or
 (21.224)
fdx
gdy
+
f
g
f
f1
g
f2
x
y
x1
x2
f1dx1
f2dx2
+
∂f1
∂x2
--------
∂f2
∂x1
--------
=
Hij
∂fi ∂xj
⁄
=
du
f1dx1
f2dx2
+
=
fi
∂u
∂xi
-------
=
Hij
∂fi ∂xj
⁄
=
u x1 x2 x3
,
,
(
)
du
f1dx1
f2dx2
f3dx3
+
+
=
fk
x1 x2
x3
fi
∂u
∂xi
-------
=
∂2u
∂xi∂xj
---------------
∂2u
∂xj∂xi
---------------
=
∂fi
∂xj
-------
∂fj
∂xi
-------
=

September 4, 2003 5:24 pm
Vector/tensor differential calculus
285
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
In other words, the matrix,
 (21.225)
where now the indices range from 1 to 3, must be symmetric.
Coupled inexact differentials
Consider a vector  that is a proper function of another vector . Then
 (21.226)
or
, where 
 (21.227)
Note that 
 (21.228)
and therefore
 (21.229)
Now consider the inverse question. Given a tensor 
 that varies with , under what con-
ditions will it be true that there exists a field  such that
 (21.230)
The field  will exist if and only if Eq. (21.229) is true. 
This result has an elegant application in elasticity theory. For large deformations, the
deformation gradient tensor is defined
 (21.231)
Given only a candidate spatially varying field 
, this field corresponds to a physically
realizable deformation if and only if
 (21.232)
Consider, for example,
Hij
∂fi
∂xj
-------
=
y
˜
x˜
dyi
∂yi
∂xj
-------dxj
=
dyi
Cijdxj
=
Cij
∂yi
∂xj
-------
=
∂2yi
∂xj∂xk
----------------
∂2yi
∂xk∂xj
----------------
=
∂Cij
∂xk
----------
∂Cik
∂xj
-----------
=
Cij
x˜
y
˜
Cij
∂yi
∂xj
-------
=
y
˜
Fij
∂xi
∂Xj
--------
=
Fij
∂Fij
∂Xk
---------
∂Fik
∂Xj
----------
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
286
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
 (21.233)
Then
 (21.234)
but
 (21.235)
Therefore, this is not a physically realizable deformation.
22. Vector/tensor Integral calculus
Gauss theorems
Stokes theorem
Divergence theorem
Integration by parts
In scalar calculus, the chain rule for differentiating a product is
 (22.1)
Integrating both sides with respect to  varying from  to  gives
 (22.2)
The left-hand-side is simply 
. Thus, the above result can be written
,
 (22.3)
F
[ ]
X2 0 0
0 1 0
0 0 1
=
∂F11
∂X2
-----------
k
=
∂F12
∂X1
-----------
0
=
d uv
(
)
dx
--------------
udv
dx
------
vdu
dx
------
+
=
x
a
b
d uv
(
)
dx
-------------- x
d
a
b
∫
udv
dx
------ x
d
a
b
∫
vdu
dx
------ x
d
a
b
∫
+
=
uv a
b
udv
dx
------ x
d
a
b
∫
uv a
b
vdu
dx
------ x
d
a
b
∫
–
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
287
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
which is the formula for integration by parts. Note that
 (22.4)
We can regard the one dimensional domain to be a uniaxial bar with outward normal
 at 
 and 
 at 
. Then the above expression may be written
 (22.5)
and therefore integration by parts becomes
,
 (22.6)
Now let’s generalize integration by parts for tensors. Suppose that, during your research,
you encounter an integral of the form
 (22.7)
The integrand is a lot like the expression 
 just discussed in the 1D context, but
now you have a volume integral containing a gradient operation. You might hope to apply
one of the Gauss theorems to convert it to a surface integral. Unfortunately, however,
Gauss’s theorems require that the gradient operator must act on the entire integrand, not
just part of it. You can move partially in the desired direction by using the product rule to
write the integrand differently:
 (22.8)
This equation, which is the analog of Eq. (22.1), permits the volume integral of interest to
be written
 (22.9)
The first integrand on the right-hand-side is now of the form required for application of
Gauss’s theorem, so it can be converted to a surface integral:
 (22.10)
This is the generalization of integration by parts. Note the similarity of this result with the
1D formula in Eq. (22.6). This basic process may be applied to integrands of various struc-
tures. Specifically, if your integrand involves a gradient, you can apply the product rule to
make the gradient act across the entire integrand, subtracting appropriate terms. Then a
Gauss theorem applies to the gradient term, converting it to a surface integral.
uv a
b
uv b
uv a
–
=
n
1
=
x
b
=
n
1
–
=
x
a
=
uv a
b
nuv b
nuv a
+
=
udv
dx
------ x
d
a
b
∫
nuv b
nuv a
vdu
dx
------ x
d
a
b
∫
–
+
=
u˜
∇v˜
•
V
d
∫
V∫∫
udv dx
⁄
u˜
∇v˜
•
[
]k
um
∂vk
∂xm
---------
∂umvk
∂xm
---------------
vk
∂um
∂xm
---------
–
∇
u˜ v˜
(
)
•
v˜ ∇
u˜
•
(
)
–
[
]k
=
=
=
u˜
∇v˜
•
V
d
∫
V∫∫
∇
u˜ v˜
(
)
•
V
d
∫
V∫∫
v˜ ∇
u˜
•
(
) V
d
∫
V∫∫
–
=
u˜
∇v˜
•
V
d
∫
V∫∫
n˜
u˜ v˜
(
)
•
S
d
∫
S∫
v˜ ∇
u˜
•
(
) V
d
∫
V∫∫
–
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
288
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Leibniz* theorem
The Leibniz formula,
 (22.11)
is typically given lower-class status in applied math textbooks. It appears only as a foot-
note in Ref. [36] and as part of a homework question in Ref. [1]. Though elementary, this
is a profoundly useful formula in its own right and especially in its generalization to higher
dimensions. 
Let’s first understand the Leibniz formula in the 1D form cited in Eq. (22.11). What is
this equation trying to say? Why should we care? Looking at the left-hand-side of Eq.
(22.11) shows that this is a formula for taking the time derivative of an integral where both
the integrand and the integration limits vary with time. The variable  doesn’t have to be
time — it can be any scalar, but we will discuss it using the name “time” for  and the
name “position” for . When written with the arguments of the functions being under-
stood, and letting total differentiation by time be denoted with a superimposed “dot”, Eq.
(22.11) takes a cleaner look:
 (22.12)
Here, 
 and 
 denote the function evaluated at 
 and 
, respectively. The symbols
 and  represent the velocities of the boundary. The integral on the left-hand side repre-
sents the area under the curve 
 at some particular moment in time. The right-hand-side
tells us that this area can change in two possible ways: you can change the function itself
(so 
 is really 
) or you can change the limits of integration. This equation tells us
you can’t simply bring the total time derivative inside the integral — movement of the
boundary must be accounted for. Also note that a total derivative “ ” is used on the left-
hand side, but a partial derivative is used once the derivative is “passed inside” the inte-
* Note: this word is not spelled “Leibnitz”. Even though there’s no “T”, it should be pronounced as if 
it were spelled with one. Reference [36], which is written for engineers, gets it wrong but Reference 
[1], for physicists, gets it right. It’s another embarrassing day for us engineers.
d
dt
-----
f x t,
(
) x
d
a t( )
b t( )
∫
∂f x t,
(
)
∂t----------------- x
d
a t( )
b t( )
∫
f b t( ) t,
(
)db t( )
dt
-------------
f a t( ) t,
(
)da t( )
dt
-------------
–
+
=
t
t
x
d
dt
----- f x
d
a
b
∫
∂f
∂t
---- x
d
a
b
∫
fbb·
faa·
–
+
=
fa
fb
x=a
x=b
a·
b·
f x
( )
f x
( )
f x t,
(
)
d

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
289
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
gral. That’s because the function  depends on both  and , but the area depends only on
. Now, what about those boundary terms? Why is there a negative sign in front of the
term for the left boundary, but no negative for right boundary? A picture tells it all. Sup-
pose you are looking at the profile of a mountain through the window of an airplane:
Only a portion of the mountain shows through your window, and you naturally
observe that the visible area changes with time. The mountain itself isn’t (we hope) mov-
ing, so 
. The visible area is changing simply because the boundary is moving. In this
example, the leading edge is moving at the same speed as the trailing edge. From the pic-
ture, it’s clear that you are gaining area on the leading edge (new area is “flowing” into the
window). The incremental change in area equals the height of the function there, 
, times
the width 
. You are losing area (negative area rate) on the trailing edge with an area
increment 
.*  In the limit, the rate of area is determined by the flux of the function
across the boundary. Of course, if the mountain were simultaneously sinking into the
ocean, then you would see area changes from interior contributions to the area integral
captured through the 
 term.
Another way to deal with the sign of the flux (and a key to generalizing Leibniz’s for-
mula to higher dimensions) is to introduce the outward-pointing normal to the boundary:
 = outward unit normal at 
 (22.13)
 = outward unit normal at 
 (22.14)
Then the 1D Leibniz formula would read
 (22.15)
In this form, there is no negative. Each boundary term is the value of the function at that
boundary location times the product of the boundary velocity times the outward normal.
The generalization of the Leibniz formula to 3D is
 (22.16)
* If the airplane were ascending or descending, you would have additional changes in area from the 
bottom and top edges of the window frame, but that would make this a two-dimensional problem, 
so we will assume the plane is cruising at a constant altitude. 
f
x
t
t
b·
a·
b·dt
a·dt
The window
is gaining this
area sliver.
The window
is losing this
area sliver.
∂f ∂t
⁄
fb
b·dt
faa·dt
∂f ∂t
⁄
na
1
–
=
x=a
nb
+1
=
x=b
d
dt
----- f x
d
a
b
∫
∂f
∂t
---- x
d
a
b
∫
fbnbb·
fanaa·
+
+
=
d
dt
-----
f x˜ t,
(
) V
d
Ωt( )∫
∂f x˜ t,
(
)
∂t
----------------- V
d
Ωt( )∫
f x˜ t,
(
) n˜
v˜b
•
(
) S
d
∂Ωt( )∫
+
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
290
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note the similarity between this equation and its 1D counterpart, Eq. (22.15). Here, 
 is a
volume whose shape is varying in time. The integral over 
 is a volume integral and the
integral over 
 is a surface integral over the time-varying boundary 
. The vector 
is the velocity of the boundary and the integrand of the surface integral is the net flux of
the function  into the integral resulting from motion of the boundary. Of course outflow
occurs if the boundary velocity is encroaching on the interior of 
, which would be
accounted for automatically because the boundary velocity 
 would have a negative dot
product with the outward unit normal 
. Tangential components of the boundary velocity
have no influence on the rate of the integral.
For the generalized Leibniz formula to make sense, you must do a good job of specify-
ing the velocity of the boundary everywhere. Continuum mechanics (and thermodynam-
ics) theory typically deals with two types of “control volumes.” An Eulerian control
volume is fixed in space so that 
 and
 for Eulerian control volumes
 (22.17)
Because an Eulerian control volume is fixed in space, material (and any properties it might
carry such as density and polarization) will flux through the boundary (note that we
changed 
 to simply 
). A Lagrangean* control volume, on the other hand, is
defined to always contain the same material particles, so its velocity equals the material
velocity, 
, and therefore the 3D Leibniz formula for this type of control volume is
 for Lagrangean control volumes
 (22.18)
This form of the Leibniz formula is called Reynolds† transport theorem. The only differ-
ence between Eqs. (22.17) and (22.18) is the motion of the boundary, which shows just
how crucial it is for you to be extremely diligent to be clear about which viewpoint you are
using. Many theorists prefer to apply all of their integral equations to Lagrangean control
volumes — this makes a lot of sense because the most fundamental statements of physical
principals are often the most elegant when applied to a specific set of particles. For exam-
ple, Lagrangean conservation of mass states that the total mass of a specific set of particles
must not change‡ and Newtonian mechanics tells us that the net force on a specific set of
particles must equal the rate of change of the momentum. People who tend to use
Lagrangean control volumes can spare themselves the trouble of constantly reminding
their readers that their control volumes move with the material by using the material deriv-
* The spelling of this word is yet another subject of debate among the cognoscenti. “Lagrangean” 
appears better justified from the historical record and from rules of orthography, but so many peo-
ple use “Lagrangian” that this might be a losing battle.
† Here we go again: It’s Reynolds, not Reynold’s (each undergraduate’s bane).
‡ Before the nuclear engineers out there go ballistic and remind us that 
 tells us that mass 
can be annihilated by converting it to energy, just keep in mind that conservation of mass just a 
principle, not a law.
Ω
dV
dS
∂Ω
v˜b
f
Ω
v˜b
n˜
v˜b
0
˜
=
d
dt
----- f x˜ t,
(
) V
d
Ω∫
∂f x˜ t,
(
)
∂t----------------- V
d
Ω∫
=
Ωt( )
Ω
v˜b=v˜
d
dt
-----
f x˜ t,
(
) V
d
Ωt( )∫
∂f x˜ t,
(
)
∂t----------------- V
d
Ωt( )∫
f x˜ t,
(
) n˜
v˜
•
(
) S
d
∂Ωt( )∫
+
=
E
mc2
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
291
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
ative symbol, 
, to tell their readers that this is a time derivative in which the
material particles are being followed. When using this notation, showing the explicit time
dependence in 
 is not necessary because using “D” instead of “d” implies the time
dependence. Thus, you might see Reynolds transport written as
 (22.19)
The phrase “for Lagrangean control volumes” is no longer needed because it’s implied by
the use of “D.”
LONG EXAMPLE: conservation of mass. In Eulerian form, the principle of conserva-
tion of mass says, in essence, 
What goes in must come out — or stay there.
 (22.20)
The first part (what goes in must come out) is referring to flux of mass across the fixed
Eulerian boundary. The second part is referring to the fact that mass can simply accumu-
late inside the control volume (neither coming in nor going out). In rate form, the Eulerian
statement of conservation of mass is
The rate of accumulation must equal the rate of influx
 (22.21)
or
The rate of accumulation minus the rate of influx must equal zero
 (22.22)
Letting stuff going in be regarded as a negative contribution to stuff coming out, the state-
ment could alternatively read
The rate of accumulation plus the rate of OUTflow must equal zero
 (22.23)
Since mass equals density 
 times volume, this Eulerian statement of mass conservation
may be written mathematically as 
 for Eulerian control volumes
 (22.24)
The first term measures the rate of mass accumulation and the second term measures the
rate of outflow. Since this is an Eulerian control volume, you can use Eq. (22.17) “inside”
the integral to write
 (22.25)
Now consider how the analysis of conservation of mass would go from a Lagrangean per-
spective. If we are considering a fixed set of particles, conservation of mass merely says
that the total mass of those particles must not change. In rate form, that means
 (22.26)
or, using Eq. (22.19),
 (22.27)
D(  ) Dt
⁄
Ωt( )
D
Dt
------ f x˜ t,
(
) V
d
Ω∫
∂f x˜ t,
(
)
∂t----------------- V
d
Ω∫
f x˜ t,
(
) n˜
v˜
•
(
) S
d
∂Ω∫
+
=
ρ
d
dt
----- ρ V
d
Ω∫
ρ n˜
v˜
•
(
) S
d
∂Ω∫
+
0
=
∂ρ
∂t
------ V
d
Ω∫
ρ n˜
v˜
•
(
) S
d
∂Ω∫
+
0
=
D
Dt
------ ρ V
d
Ω∫
0
=
∂ρ
∂t
------ V
d
Ω∫
ρ n˜
v˜
•
(
) S
d
∂Ω∫
+
0
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
292
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Note that this Lagrangean result is identical to Eq. (22.25) which was derived using an
Eulerian perspective. Importantly, once a derivative has been brought inside of an integral,
the nature of the boundary (Lagrangean, Eulerian, or otherwise) becomes inconsequential.
Now that the derivative is inside the spatial integral, both equations give the same result if
evaluated over the same region in space. The fact that those regions might no longer coin-
cide at some time in the future has no bearing on what’s going on now.
Incidentally, by using the divergence theorem, the surface integral may be converted to
a volume integral. To do this, keep in mind that the unit normal becomes a “nabla” gradi-
ent operator that acts on everything else in the integrand. Thus, 
 will not become
. Instead, it will become 
. Of course, don’t forget to change the 
 to an
 and the 
 to a 
 to obtain
 (22.28)
or
 (22.29)
The differential form of conservation of mass (often called the continuity equation) is
obtained by asserting that this integral equation must be true regardless of what region of
space we choose to use as a control volume. The only way that can be true is if the inte-
grand itself is zero:
 (22.30)
In this equation, the time derivative holds the spatial position  fixed and the gradient is a
derivative with respect to  holding time constant. To make this point more explicit, you
might see the partial derivative being written more carefully with a subscript that
describes precisely what is being held fixed:
 (22.31)
The fact that the time derivative holds the spatial position fixed makes this form of
conservation of mass particularly appealing to people with an Eulerian mindset. An Eule-
rian observer plants his you-know-what in a single location and watches how things
change in front of him. He will be looking at the densities of various particles at the instant
they pass by his fixed location. This perspective is unsavory to folks with a Lagrangean
mind-set. 
Lagrangean people prefer to talk about how properties of a single-particle of interest
change over time. Of course, to do that, they will have to obligingly move themselves with
the particle, keeping it always under their watchful eye. To describe the Lagrangean time
derivative, we need to introduce a variable 
 whose value will never change for any given
particle. Furthermore, distinct particles need to have distinct values of 
 so that 
 can, in
ρ n˜
v˜
•
(
)
ρ∇
v˜
•
∇
ρv˜
(
)
•
∂Ω
Ω
dS
dV
∂ρ
∂t
------ V
d
Ω∫
∇
ρv˜
(
)
•
V
d
Ω∫
+
0
=
∂ρ
∂t
------
∇
ρv˜
(
)
•
+



V
d
Ω∫
0
=
∂ρ
∂t
------
∇
ρv˜
(
)
•
+
0
=
x˜
x˜
∂ρ
∂t
------




x˜
∇
ρv˜
(
)
•
+
0
=
X˜
X˜
X˜

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
293
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
a sense, be regarded as a unique identifier or “name” for any particle in much the same
way that  uniquely defines a particular location in space. A natural choice for 
 is sim-
ply the initial location of a particle. The uniqueness requirement is satisfied because no
two particles will have occupied the same initial location in space.* The requirement that
 not vary in time is satisfied because, naturally, the initial location of a particle is time-
independent. Now we are in a position to define the substantial derivative or material
derivative of any field variable 
 as
 (22.32)
Since 
 is being held constant, and since 
 uniquely identifies a particular particle this
expression is the time derivative of 
 as seen by an observer who is moving with the par-
ticle — it is the Lagrangean time derivative!
What is the connection between what a Lagrangean and Eulerian observers see? The
answer comes from the chain rule:
 (22.33)
In the last term, 
 holds 
 constant, so it is the rate at which the Lagrangian
observer sees the spatial locations change. You might be wrongly tempted to think that, if
the observer is moving to the right, then he sees the material beneath him moving to the
left, but you have to interpret the derivative 
 literally. If for example, the
Lagrangean observer moves from 
 to 
 over some period of time, he sees that
 has increased. Thus, even though the spatial grid appears to be moving to his left, the
values on the grid are increasing. The rate of increase is exactly equal to the velocity of the
observer. Since Lagrangean observers move with the material, this means that
, the material velocity!
 (22.34)
Thus, the material derivative becomes
 (22.35)
You will frequently see this result presented more cryptically as
 (22.36)
* Actually, this is not quite true from a mathematical perspective — if a material fractures, then a par-
ticle that started out at a particular location will “break” into separate locations. There are ways 
around this issues. For the discussion at hand, though, let’s assume no fracture.
x˜
X˜
X˜
Φ
DΦ
Dt
---------
∂Φ
∂t
-------




X˜
≡
X˜
X˜
Φ
∂Φ
∂t
-------




X˜
∂Φ
∂t
-------




x˜
∂Φ
∂x˜
-------




t
∂x˜
∂t
------




X˜
•
+
=
∂x˜ ∂t
⁄
(
)X˜
X˜
∂x˜ ∂t
⁄
(
)X˜
x
0
=
x
4
=
x
∂x˜
∂t
------




X˜
v˜
=
∂Φ
∂t
-------




X˜
∂Φ
∂t
-------




x˜
∂Φ
∂x˜
-------




t
v˜
•
+
=
DΦ
Dt
---------
∂Φ
∂t
-------
∇Φ
(
)
v˜
•
+
=

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
294
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
and it will be up to you to keep in mind that every term involves partial derivatives, which
can make physical sense only if you vigilantly remind yourself what is being held constant
in those derivatives. Using this result in Eq. (22.30) permits us to now write the continuity
equation as
 (22.37)
Using the product rule on the last term leads to a cancellation of the middle term, giving
 (22.38)
Contrast this with Eq. (22.31). They are both the same result, with one presented using the
Eulerian time derivative and the other using the Lagrangean material derivative. Note also
that one equation has the density field inside the divergence operator, while the other
doesn’t. 
Yet another notational convenience is in common use: for any field variable 
,
 (22.39)
Using this convention, Eq. (22.38) can be written
 (22.40)
For continuum mechanics researchers, this is a very appealing result because numerical
material models typically have access to the velocity gradient tensor, typically
denoted by 
, and defined
, or 
 (22.41)
Note that
 (22.42)
and therefore, the continuity equation can be written in yet another form
 (22.43)
Finally, since the trace operation depends only on the diagonal components, this result is
often written
, 
 where 
 (22.44)
The tensor 
 is often called the “rate” of deformation even though it is not a true rate.
Dρ
Dt
-------
∇ρ
(
)
v˜
•
–
∇
ρv˜
(
)
•
+
0
=
Dρ
Dt
-------
ρ ∇
v˜
•
(
)
+
0
=
Φ
Φ
·
    means the same thing as    DΦ
Dt
---------
ρ·
ρ---
∇
v˜
•
=
L˜˜
L˜˜
v˜∇
≡
Lij
∂vi
∂xj
-------
=
trL˜˜
v˜
∇
•
∇
v˜
•
=
=
ρ·
ρ---
trL˜˜
=
ρ·
ρ---
trD˜˜
=
D˜˜
1
2-- L˜˜
L˜˜
T
+
(
)
≡
sym L˜˜
( )
=
D˜˜

September 4, 2003 5:24 pm
Vector/tensor Integral calculus
295
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
Generalized integral formulas for discontinuous integrands
All of the integral formulas cited so far require the integrand to be differentiable. What
can you do if the integrand is differentiable everywhere except across a singular “jump”
surface, like what you have in shock physics? The answer is to first break up the surface
integrals into two separate parts over each differentiable domain. However, doing this will
break a formerly closed surface into the union of two open surfaces. Before you can apply
the divergence theorem, you will need to close the surfaces, this time along the shared
boundary defining the discontinuity. This is the basic flavor of dealing with discontinuous
integrands. Now let’s get into the details.

September 4, 2003 5:24 pm
Closing remarks
296
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
23. Closing remarks
This book has provided an introduction to vector and tensor concepts, as well as some
very advanced forays into more obscure topics such as projections (in ordinary engineer-
ing space, as well as higher dimensional spaces), the concept that a tensor is also a vector,
the notion of right and left gradient operations, and generalizations of hallowed integral
theorems permitting application to discontinuous integrands (as in shock physics). 
A key goal of this book was to call out a distinction between the functional, engineer-
ing, and structural perspectives on tensor analysis. You can’t have one without the other.
The functional meaning of a tensor is a linear transformation from vectors to vectors. This
statement does not make sense unless the term “vector” is defined and, for engineering
applications, this necessarily requires discussing of how vector components transform
upon a change in basis. Finally, the structural perspective of tensor analysis deals exclu-
sively for the arrangement of symbols that we write down on a page to represent the func-
tional meaning of a tensor. The structures themselves are often referred to as tensors, and
there is nothing wrong with that. In this book, we outlined a structural self-consistent ten-
sor nomenclature that is well-poised for moving smoothly into higher dimensions, but we
are not intending to suggest that our structure is “the best.” There is no best tensor struc-
ture. Granted there are some bad ones out there that aren’t self-consistent, but lots of folks
use alternative notations that are adequate and often superior for their applications.
This book is by no means a comprehensive discourse. Our goal here was to emphasize
theorems and concepts that are useful in mechanics, especially in the higher dimensional
applications that come up in materials modeling. We have omitted many classic discus-
sions (such as formulas for gradient operations in curvilinear systems) that are very stan-
dardized and available in almost any textbook on vector and tensor analysis. We only
mentioned classic operations and concepts when (a) they were needed for completeness of
later, less classic, discussions that we will publish elsewhere or (b) we had non-traditional
insights to offer. 
This book should be regarded as a “zeroth” or “beta” edition. As such it is highly
likely that it still contains errors and typos. Readers are encouraged to send feedback and
corrections to rmbrann@me.unm.edu.
“The ability to quote is a serviceable substitute
for wit.” 
— W. Somerset Maugham

September 4, 2003 5:24 pm
Solved problems
297
D R A F T
R eb e c ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
24. Solved problems
This chapter is brand-new and totally disorganized. It
will take a few more seasons to get it up to speed. Sorry.

September 4, 2003 5:24 pm
Solved problems
298
D R A F T
R e b e cc a B ra n n on
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.

September 4, 2003 5:24 pm
REFERENCES
299
D R A F T
R e b ec ca  B r a nn o n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
REFERENCES
1Arfken, George B. and Weber, Hans, J., Mathematical Methods for Physicists, Academic
Press, San Diego (1995).
2Aris, R., Vectors, Tensors, and the Basic Equations of Fluid Mechanics. Englewood
Cliffs, N.J.: Prentice-Hall, 1962.
3Beyer, William H., The CRC handbook of mathematical sciences, 6th Edition., CRC
Press, Boca Raton, FL, 2000.
4Bird, R.B., Armstrong, R.C., and Hassager, O., Dynamics of Polymeric Liquids, Fluid
Mechanics, 2nd Ed, Wiley-Interscience, 1987.
5Budiansky, Bernard, (1990) Tensors, in: Handbook of Applied Mathematics 2nd Ed, Ed-
ited by Carl E. Pearson. Van Nostrand Reinhold.
6Brannon, R. M., http://me.unm.edu/~rmbrann/curvilinear.pdf
7Brannon, R. M., http://me.unm.edu/~rmbrann/Rotation.pdf
8Brannon, R. M., http://me.unm.edu/~rmbrann/RadialReturn.pdf
9Brannon, R. M., http://me.unm.edu/~rmbrann/MohrsCircle.pdf
10Brannon, Rebecca M. and Drugan, Walter J., Influence of nonclassical elastic-plastic fea-
tures on shock wave existence and spectral solutions. J. Mech. Phys. Solids, 41 (2), pp. 297-330.
11Brannon, Rebecca M. Caveats concerning conjugate stress and strain measures for aniso-
tropic elasticity. Acta Mechanica, Accepted 1997.
12Stakgold, Ivar, Green’s Functions and Boundary Value Problems, Wiley (1979).
13Malvern, Lawrence E., Introduction to the Mechanics of a Continuous Medium, Pren-
tice-Hall (1969).
This is one of the best known references on elementary continuum mechanics.
14Smart, W.M., Textbook on Spherical Astronomy. 6th Ed. revised by R. M. Green., Cam-
bridge University Press, 1977.
Contains theorems that are useful in generating the mesh of the sphere.
15Smith, G.F., Smith, M.M., and Rivlin, R.S., Integrity bases for a symmetric tensor and a
vector — The crystal classes. Arch. Rational Mech. Anal., Vol 12 (1963).
The title says it all. This paper shows the most general quadratic form that can be constructed from the iso-
tropic invariants for a crystal class.
16Spencer, A.J.M., Theory of Invariants, in Continuum Physics I, edited by A.C. Eringen
Academic, New York (1971).
Derives the integrity bases for arbitrary numbers of vectors and tensors for (i) full orthogonal group (ii)
proper orthogonal (rotation) group, (iii) transverse isotropy, and (iv) crystal classes.
17Varadan, Vasundara V.; Jeng, Jiann-Hwa; and Varadan, Vijay K., Form invariant constitu-
tive relations for transversely isotropic piezoelectric materials. J Acoust. Soc. Am. 82 (1) pp. 337-
342 (1987).
This paper shows how to derive transversely isotropic constitutive relations using integrity basis for the
transverse orthogonal group of transformations.
18Lai, W. M., Krempl, E., and Rubin, D., Introduction to Continuum Mechanics, 3rd Ed.
Butterworth-Heinemann, 1995.

September 4, 2003 5:24 pm
REFERENCES
300
D R A F T
R eb ec ca  B ra n no n
Copyright is reserved. Individual copies may be made for personal use. No part of this document may be reproduced for profit.
This book seems well received by new students to the subject. However, the reader should be cautioned that
this book is riddled with errors and it uses somewhat old-fashioned notation.
19Tai, Chen-To (1997) Generalized Vector and Dyadic Analysis. Applied Mathematics in
Field Theory, 2nd Ed. IEEE Press, NY.
20Simmonds, James G. A Brief on Tensor Analysis, Springer-Verlag, NY (1994).
21Chadwick, Peter, Continuum mechanics, Concise theory and applications, 2nd Ed.,
Dover, Reprinted 1999.
22Stewart, G.W., Introduction to Matrix Computations, in Computer Science and Applied
Mathematics series of monographs and textbooks. Academic Press (1973).
23Greenberg, Michael, Advanced Engineering Mathematics (2nd Edition), Prentice Hall,
1998.
24Gurtin, Morton E., An introduction to Continuum Mechanics, Academic Press, New
York, 1981.
25Higham, N.J., Computing the Polar Decomposition — with applications. SIAM J. Sci.
Stat. Comput. 7, p. 1160-1174 (1986).
26Horn, Roger A., and Johnson, Charles R., Matrix Analysis, Cambridge University Press,
Melbourne Australia (1985).
27Wolfram, Stephen, The Mathematica Book, 4th Ed, Cambridge Univ. Press, 1999.
28Friedman, Avner, Foundations of Modern Analysis, Dover (1970).
29Rudin, Walter, Real and Complex Analysis, McGraw-Hill (1987).
30Ramkrishna, Doraiswami, and Amundson, Neal R., Linear Operator Methods in Chem-
ical Engineering, Prentice-Hall (1985).
31Folland, Gerald B., Real Analysis, Wiley-Interscience (1984).
32Buck, R. Creighton, Advanced Calculus, McGraw-Hill (1978).
33Boccara, Nino, Functional Analysis: An introduction for Physicists, Academic Press
(1990).
34Noble, Ben, and Daniel, James W., Applied Linear Algebra, 3rd Ed., Prentice-Hall,
1988.
35Pearson, Carl (editor), Handbook of Applied Mathematics, 2nd Ed., Van Nostrand Re-
inhold, 1990.
This book uses the same “no symbol” notation for dyadic multiplication that we espouse. This book also has
good succinct chapters on matrix and vector analysis.
36Wylie, C. Ray, and Barrett, Louis C., Advanced Engineering Mathematics, McGraw-
Hill (1982).

INDEX
This index is a work in 
progress. Please notify 
the author of any critical 
omissions or errors.
Interpreting this index
Whenever a topic has an index entry labeled  “Example,” you 
will locate usage or application of that topic on the cited page. 
ExampleE, ExampleM and ExampleT indicate examples that 
range in difficulty from Easy  to Medium to Toilsome, respec-
tively. Examples marked with an exclamation point are of partic-
ular interest to the mechanics and materials modeling 
community. 
More examples and 
solved problems are to 
come in future editions.
A
adjoint 48
not the same thing as adjugate 131
adjugate 48, 52
affine 15, 18
algebraic multiplicity 50
alternating (permutation) symbol vs. alternating TENSOR 77
alternating symbol
cyclic property 36
alternating symbol (also called the permutation symbol or 
Levi-Civita density) 36
alternating TENSOR 77
alternating tensor 79
angle between two vectors 72
antisymmetric 155
area
using cross products 76
array 21
axial tensor 132
axial vectors
applied to rotation 154
B
basis 19
effect of changing 22
for a tensor 101
style of notation 119
basis transformation
ExampleE 7
basis transformations 170
binary operation 19
C
calculus 251
Cayley-Hamilton theorem 192
characteristic equation 50
characteristic invariant 46
class
of a tensor 111
Closed
ExampleE 16
closed 16
codomain 16
ExampleE 16
cofactor 40
of a 2x2 matrix 42
COFACTOR tensor 129
cofactor-determinant connection 48
complementary projectors 143
completing the square
generalized to vectors/tensors 203
component
75
of a tensor 117
components
of a vector 73
of a vector with respect to NON-orthonormal basis 74
components of a vector 56
composition (dot product) between two tensor 127
composition of two tensors 117
constraints 17
continuous functions are vectors 235
contraction operator 240
contraction tensor 244
coordinate transformations 170
Cramer’s rule for finding the inverse 134
cross product 76
associated tensor 151
between orthonormal base vectors 76
between two tensors 164
handedness issues 77
to find area 76
curl 251
curvilinear 18
ExampleE 13
cyclic property of the alternating symbol 36
cylinder
equation for 202
D
decomposition
singular value 205
definition of a matrix 21
definition of a vector 55
deformation gradient 11
del 269
del, or nabla 259
derivative
in reduced spaces 275
of a vector with respect to a vector 265
determinant 39
definition 41
derivative of 135
determinate
using cofactors 48
deviatoric tensors 158
diagonalizable 51
diagonalizable tensors 195
difference between a matrix and a tensor 181

difference between a tensor and a matrix 177
dimension 17
ExampleE 17
of a matrix 21
direct
style of notation 119
direct notation 179
directed derivative 273
divergence 251
domain 16
dot product
between a tensor and a vector 115
between a vector and a tensor 116
between orthonormal base vectors 72
between two tensors 117
between vectors 71
dotting a tensor from both sides 117
double dot product 159
double-bar (vector/tensor magnitude) 165
double-dot product 159
dummy index 57
dyad
component matrix 104
scalar multiplication rule 106
dyad "no-symbol" notation 104
dyadic 107
dyadic multiplication 103
dyadic sums
reducibility 106
DYADS 103
dyads
REDUCIBILITY 107
sum of two 105
E
e-delta identity 36
easier mnemonic 37
fast way 37
multiple summed indices 38
three summed indices 39
two summed indices 38
eigenprojectors 195
eigenvalue problems 192
eigenvalues
algebraic vs. geometric multiplicity 193
eigenvalues and eigenvectors 49
eigenvector
right and left 192
Einstein, quote 1
ellipsoid
equation of 200
equality of two tensors (footnote) 100
equation of a cylinder 202
equation of a line 199
equation of a plane 198
equation of a sphere 200
equation of an ellipsoid 200
Euler angles 155
Euler-Rodrigues formula 150
even functions 74
exact differential
in two dimensions 19, 20
F
free index 36, 57
functional analysis 14
G
generalized eigenvectors 51
geometric multiplicity 50
Glide plane 133
gradient 251, 265
left (backward) operating 262
gradients
direct notation 121
H
handedness 78
in basis transformations 172
Hermitian 33
hermitian (footnote) 148
homogeneous functions 74
hyperboloid
equation of 202
hyperplanes 18
I
idempotent 90
identity matrix 25
identity tensor 126
IFOET (isotropic fourth-order engineering tensors) 223
implicit sums as independent variables 60
improper orthogonal tensors 149
indexing
aesthetic/courteous 62
indicial
style of notation 119
Indicial notation in derivatives 60
inertia tensor 183
inner product
between tensors
identities 165
matrix 32
of two column matrices 29
inner product spaces 233
invariance 177
invariants
characteristic 187
more than three 187
of a sum of two tensors 190
primitive 185
scalar 185
traces of powers 187
Inverse 49
Sherman-Morrison formula 135
inverse
Cramer’s rule 134
of a function/transformation 17
of a tensor plus a dyad 135
irregular 74
isotropic
second-order tensors
in 2D 219
in 3D 218
isotropic "part" of a tensor 158
isotropic fourth-order tensors 222
isotropic materials 215
J
Jordan canonical form 52

JordanDecomposition 51
K
Kronecker delta 25
index-changing property 64
summing 69
L
laboratory base vectors 55
laboratory basis 55
laboratory triad 55
Laplacian 252
left-handed 78
Levi-Civita density (also called the permutation symbol or 
alternating symbol) 36
line
equation of 199
LINEAR 99
linear 15
linear combination 15
ExampleE 15
linear independence
ExampleE 17
linear manifold 18
ExampleE 18
linear operators/transformations 99
linear space 18
linear subspace
ExampleE 18
linear transformations
finding the associated tensor 125
linearly independent 17
M
magnitude of a tensor 165
magnitude of a vector 165
Material symmetry 215
Mathematica 51
matrix 3, 21
definition 21
dimensions 21
ExampleE 3
not the same as tensor 181
product 22
square 31
matrix vs. tensor 177
minor 40, 42
signed 40
Mohr’s circle (footnote) 193
N
nabla 269
nabla, or del 259
Nanson’s formula relating an area vector to its 
transformation 131
negative definite 157
nested minors 46
nested submatrices 46
norm
energy 35
L2 (footnote) 33
weighted 35
notation
three styles (direct, basis, indicial) 119
under-tilde 69
WHY FRET OVER IT? 128
null space 16
O
oblique
fourth-order projectors 167
oblique projections 84
odd functions 74
one-to-one 16
exampleE 17
operators
linear 99
order of a tensor 166
order vs. rank 166
orientation of a vector 75
orthogonal 52
improper 150
projections 82
orthogonal tensors 148
improper 149
proper 149
outer product
of two column matrices 31
P
partial derivative
notation 19
permutation (alternating) symbol
handedness issues 77
permutation symbol
cyclic property 36
permutation symbol (also called the alternating symbol or 
Levi-Civita density) 36
phase diagram
ExampleE 17
plane
equation of 198
polar decomposition 205
as a nonlinear projection 209
fast method in 2D 209
positive definite
positive definite matrices 47
positive definite tensors 156
testing characteristic invariants 48
testing nested principal minors 48
positivity of the inner product 34
precedence in implied summations 59
principal directions 192
principal minor 46
principal minors 46
principal submatrix 46
projection
and subspaces 240
of a vector onto another vector 80
to a desired target space 141
projection decomposition
finding magnitudes 165
projection of a vector onto another vector 75
projection theorem 93
PROJECTIONS 80
projections
fourth-order oblique 167
generalized 90
linear 90
nonlinear 90

orthogonal linear 80
orthogonal, basis interpretation 83
rank 166
rank-1 oblique 85
rank-1 orthogonal 82
rank-2 oblique 84
rank-2 orthogonal 83
self-adjoint 91
PROJECTORS
linear, tensor representation 138
projectors 16
complementary 86, 143
generalized 145
oblique, "normalized" 86
self-adjoint 143
proper orthogonal tensors 149
Q
quadratic formula
generalized to vectors/tensors 203
quadric 202
quadric surface 204
quadruple dot product 161
R
range 16
range space 16
rank of a tensor 166
rank vs. order 166
RCS
gradient identities 259
reduced dimension spaces 275
reflection 150
reflection about the origin 150
reflection in a mirror 150
regularized basis 56
right eigenvector 192
right hand rule 76
right-handed 78
ROTATION (footnote reference) 155
rotation of 180 degrees 150
S
scalar
ExampleE (footnote) 14
self-adjoint 15
semi-definite 157
sense of a vector 75
Sherman-Morrison formula 135
signed minor 40
signum 90
Similarity transformation 51
singular value decomposition 205
skew-symmetric tensors 155
relationship to axial vectors 132
skw 155
shorthand for "skew" 155
span 17
ExampleE 17
spectral analysis 192
diagonalizable tensors 195
sphere
equation of 200
square matrix 21, 31
stress tensor 9
Subspaces and the projection theorem 240
SUMMATION CONVENTION 57
summation convention 36
precedence 59
suspending 62
superscript operators
H, hermitian (footnote) 33
T, transpose 29
swap (exchange) operator 240
sym 155
shorthand for "symmetric" 155
symmetric tensors 155
symmetrizing
minor indices of a fourth-order tensor 169
T
TENSOR 95
cat fights over the definition 95
Tensor
ExampleE 7
tensor
"defined" as a matrix 95
basis 108
decomposing into sym + skew parts 155
defined according to basis transformation rules 95
defined as a linear transformation from vectors to 
vectors 95
defined by transformation rule 175
definition as a linear transformation 107
definition as any sum of dyads 108
definition in terms of component transformation 
properties 108
DEFINITION in terms of dyads 107
deviatoric 158
diagonalizable 195
dotting from the left by a vector 116
dotting from the right by a vector 115
dotting with another tensor 117
ExampleM 9
ExampleM! 11
extracting components 117
isotropic 158
not the same as matrix 181
orthogonal (unitary) 148
proper/improper orthogonal 149
skew-symmetric 155
skew-symmetric (axial vectors) 132
special types classification 147
symmetric 155
testing for whether a tensor is zero 187
transpose 115
tensor inner product
fourth-order 161
tensor inner product (double-dot) 159
tensor invariance 177
TENSOR OPERATIONS 115, 159
tensor primitives
the identity 126
tensor vs. matrix 177
TENSORS
three kinds of notation (direct, basis, indicial) 119
Tensors
are vectors! 111
tensors are vectors 236
tilde 22

trace of a matrix 31
traction
ExampleE 9
transformation 14
transformations
linear 99
transpose 115
transpose of a matrix 29
Transverse isotropy 224
transversely isotropic materials 215
triad
laboratory 55
triple scalar product 78
applied to test for linear independence 88
triple scalar product between orthonormal RIGHT-HANDED 
base vectors 79
U
under-tilde 22, 69
unitary (footnote) 148
V
vector
abstract definition 94
defined by transformation rule 175
defined in terms of basis transformations 175
expressing as a linear combination of three other vectors 88
generalized definition 227
vector operations 71
vector orientation and sense 75
vector subspaces 237
vectors
ordinary 55
vector-to-vector transformations
ExampleE 6
Vm^n class notation for tensors 111
volume
computed using the triple scalar product 78
Z
zero
as a first test for linear manifolds 18
identifying if a tensor is zero 187
magnitude test for deciding if a tensor is zero 165
verifying vanishing characteristic invariants is NOT 
sufficient to conclude that a matrix itself is zero 47

