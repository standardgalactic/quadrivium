Table of Contents
Appendix A. PHP XML Functions................................................................................. 1
A.1. SAX Functions.................................................................................................................................................................... 1
A.2. DOM Functions................................................................................................................................................................. 10
A.3. SimpleXML Functions....................................................................................................................................................... 30
Appendix A. PHP XML Functions
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
This PDF is exclusively for your use in accordance with the Safari Terms of Service. No part of it may be reproduced or transmitted in any form by any means without the prior
written permission for reprints and excerpts from the publisher. Redistribution or other use that violates the fair use priviledge under U.S. copyright laws (see 17 USC107) or that
otherwise violates the Safari Terms of Service is strictly prohibited.

Appendix A. PHP XML Functions
In this appendix, we'll outline the major PHP XML functions available for SAX, DOM, and
SimpleXML.
1334027
A.1. SAX Functions
661753
The  PHP SAX implementation supports James Clark's expat parser . The SAX toolkit lets you
parse XML documents only—it doesn't support XML document validation. It supports the US-
ASCII, ISO-8859-1 and UTF-8 character encodings .
1334027
A.1.1. Error Code Constants
672274
The SAX implementation uses the following integer constants as error codes :
1334027
• XML_ERROR_NONE
• XML_ERROR_NO_MEMORY
• XML_ERROR_SYNTAX
• XML_ERROR_NO_ELEMENTS
• XML_ERROR_INVALID_TOKEN
• XML_ERROR_UNCLOSED_TOKEN
• XML_ERROR_PARTIAL_CHAR
• XML_ERROR_TAG_MISMATCH
• XML_ERROR_DUPLICATE_ATTRIBUTE
• XML_ERROR_JUNK_AFTER_DOC_ELEMENT
• XML_ERROR_PARAM_ENTITY_REF
• XML_ERROR_UNDEFINED_ENTITY
• XML_ERROR_RECURSIVE_ENTITY_REF
• XML_ERROR_ASYNC_ENTITY
• XML_ERROR_BAD_CHAR_REF
• XML_ERROR_BINARY_ENTITY_REF
• XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
• XML_ERROR_MISPLACED_XML_PI
• XML_ERROR_UNKNOWN_ENCODING
• XML_ERROR_INCORRECT_ENCODING
• XML_ERROR_UNCLOSED_CDATA_SECTION
• XML_ERROR_EXTERNAL_ENTITY_HANDLING
• XML_OPTION_CASE_FOLDING
Appendix A. PHP XML Functions
Page 1
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.
Copyright Safari Books Online #672274

• XML_OPTION_TARGET_ENCODING
• XML_OPTION_SKIP_TAGSTART
• XML_OPTION_SKIP_WHITE
A.1.2. Function Listing
672274
The following SAX functions, presented in alphabetical order, are supported.
1334027
A.1.2.1. utf8_decode
661753
string utf8_decode(string data)
This  function converts a string containing UTF-8 encoded characters into a string containing single-
byte ISO-8859-1 characters.
1334027
A.1.2.2. utf8_encode
661753
string utf8_encode(string data)
This function converts the given string data into UTF-8, and returns the encoded string, leaving the
supplied string intact. UTF-8 is a standard mechanism used by Unicode to encode wide character
values into a byte stream. UTF-8 is transparent to plain ASCII characters, and can be used with
normal string manipulation functions when the string contains only these characters.
1334027
A.1.2.3. xml_error_string
661753
string xml_error_string(int code)
This function returns a textual description of a given error code, or FALSE if no description is found
for the given error code. You can retrieve an error code by calling xml_get_error_code (see below).
1334027
A.1.2.4. xml_get_current_byte_index
661753
int xml_get_current_byte_index(resource parser)
This function returns the number of bytes of the XML document the parser has processed, or
FALSE if the parser is invalid.
1334027
Appendix A. PHP XML Functions
Page 2
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.1.2.5. xml_get_current_column_number
661753
int xml_get_current_column_number(resource parser)
This function returns the column on the current line (as given by xml_get_current_line_number)
at which the parser is located, or FALSE if the parser is invalid. So, if it's at the start of a line, it
returns 0. If it's ten characters in, it returns 10.
1334027
A.1.2.6. xml_get_current_line_number
661753
int xml_get_current_line_number(resource parser)
This function returns the line number at which the parser is currently located in its data buffer, or
FALSE if the parser is invalid.
1334027
A.1.2.7. xml_get_error_code
661753
int xml_get_error_code(resource parser)
This function returns one of the error codes listed in Section A.1 of this appendix
(XML_ERROR_NONE if no error has occurred).
1334027
A.1.2.8. xml_parse
661753
bool xml_parse(resource parser, string data[, bool is_final])
Use this function to parse a string of XML. When the XML document is parsed, the handlers for
the configured events are called in accordance with the parsed document, after which the function
returns TRUE for success or FALSE to indicate an error.
1334027
The first parameter, parser, is a reference to the parser that's to be used.
1334027
The second parameter, data, contains the XML data to parse.
1334027
The last parameter, is_final, indicates whether this is the last chunk of text that will be passed to
the parser. You can use this parameter to perform progressive parsing, handing the parser a series
of small chunks of XML data. Some errors can only be detected at the end of a document, and this
argument lets you tell the parser that this has been reached.
1334027
Appendix A. PHP XML Functions
Page 3
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.1.2.9. xml_parse_into_struct
661753
int xml_parse_into_struct(resource parser, string data,
    array &values[, array &index])
This function provides a means of using the lightweight SAX parser without the bother of event
handling. You pass it one or two arrays, which it fills based on the XML document provided in the
data argument.
1334027
The first array, values , will be filled with elements corresponding to the tags in the document,
in the order they occur. Each entry in the array will be an array containing information about:
1334027
• An opening tag for an element with child elements
array (     'tag' => 'tagname',     'type' => 'open',     'level' => n )
where tagname is the name of the tag, and n is the depth of the element in the document (1 for the root element).
• A closing tag for an element with child elements
array (     'tag' => 'tagname',     'type' => 'close',     'level' => n )
• An element with no child elements (i.e., empty or containing only a text value)
array (     'tag' => 'tagname',     'type' => 'complete',     'level' => n,     'value' => 'content' )
where content is the text value contained in the element, if any.
If you supply an array for the index argument, it will be filled with one entry for each tag name
in the document. That entry will contain an array of integer indices, pointing to the entries in the
values array that correspond to that tag name. In other words, if you pass $index as the
index argument, then $values[$index['tagname'][0]] will contain the first "opening",
"closing", or "complete" entry for a tagname element in the document. Using this array, you can
quickly pick out pairs of start/end tag entries in the values array and then parse the contents of
those tags using the values entries between them.
1334027
xml_parse_into_struct returns 1 if successful or 0 if it fails.
1334027
A.1.2.10. xml_parser_create
661753
resource xml_parser_create([string encoding])
This function creates a new XML parser and returns a resource handle, which references the parser,
for use by the other XML functions.
1334027
The optional encoding specifies the character encoding  of the XML input to be parsed. Supported
encodings include ISO-8859-1 (default), UTF-8 and US-ASCII.
1334027
Appendix A. PHP XML Functions
Page 4
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.1.2.11. xml_parser_create_ns
661753
resource xml_parser_create_ns([string encoding[,
    string separator]])
This function creates a new XML parser with XML namespace support, and returns a resource
handle referencing the parser. This resource handle can then be used by other XML functions.
1334027
When a namespace-aware parser is used, tag parameters passed to the various handler functions
will consist of the namespace prefix and tag name separated either by the string specified in
separator, or :, the default (for example, ex:message).
1334027
The optional encoding specifies the character encoding of the XML input to be parsed. The
supported encodings are ISO-8859-1 (default), UTF-8 and US-ASCII.
1334027
A.1.2.12. xml_parser_free
661753
bool xml_parser_free(resource parser)
This function frees the memory used by the parser. It returns TRUE if successful, or FALSE if the
supplied parser is invalid.
1334027
A.1.2.13. xml_parser_get_option
661753
mixed xml_parser_get_option(resource parser, int option)
This function retrieves the value of an option from a parser, or returns FALSE if the parser or option
is invalid.
1334027
The following options are available:
1334027
XML_OPTION_CASE_FOLDING
This option controls whether case-folding is enabled for an XML parser, and is enabled by default.
XML_OPTION_TARGET_ENCODING
This option sets the target encoding that is to be used in an XML parser. By default, it is set to reflect the source encoding used by
xml_parser_create.
Appendix A. PHP XML Functions
Page 5
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.1.2.14. xml_parser_set_option
661753
bool xml_parser_set_option(resource parser, int option,
    mixed value)
This function sets the value of an option for a parser. The available options are as listed for
xml_parser_get_option. This function returns FALSE if the parser is invalid, or the option could
not be set. Otherwise, the option is set and TRUE is returned.
1334027
A.1.2.15. xml_set_character_data_handler
661753
bool xml_set_character_data_handler(resource parser,
    callback handler)
This function sets the character data handler function for the XML parser. The handler argument
is a string containing the name of a function that must exist when xml_parse is called to parse the
document.
1334027
The function named by handler must accept two arguments: parser and data.
1334027
• The first argument, parser, is a reference to the XML parser calling the handler.
• The second argument, data, contains the character data as a string.
If you wish to set up a method as a handler function, pass to handler a two-item array containing
a reference to the object as the first item, and the name of the method as the second item.
1334027
If the handler function is set to an empty string, or to FALSE, the handler in question is disabled.
TRUE is returned if the handler is set up; FALSE is returned if the parser is not valid.
1334027
A.1.2.16. xml_set_default_handler
661753
bool xml_set_default_handler(resource parser, callback handler)
This function sets the default handler function for the XML parser. The handler comprises a string
containing the name of a function that must exist when xml_parse is called to parse the document.
1334027
The function named by handler must accept two arguments: parser and data.
1334027
• The first argument, parser, is a reference to the XML parser that calls the handler.
• The second argument, data, contains the character data. This can be the XML declaration, document type declaration, entities or other
data for which no other handler exists.
Appendix A. PHP XML Functions
Page 6
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

If you wish to set up a method as a handler function, pass to handler a two-item array containing
a reference to the object as the first item, and the name of the method as the second item.
1334027
If the handler function is set to an empty string, or to FALSE, the handler in question is disabled.
TRUE is returned if the handler is set up; FALSE is returned if the parser is invalid.
1334027
A.1.2.17. xml_set_element_handler
661753
bool xml_set_element_handler(resource parser,
    callback start_element_handler, callback end_element_handler)
This function sets the element handler functions for the XML parser.
start_element_handler and end_element_handler are strings containing the names
of functions that must exist when xml_parse is called to parse the document.
1334027
The function named by start_element_handler must accept three arguments: parser,
name, and attributes.
1334027
• The first argument, parser, is a reference to the XML parser calling the handler.
• The second argument, name, contains the name of the element for which this handler is called . If case-folding is in effect for this
parser, the element name will appear in uppercase letters.
• The third argument, attribs, is an associative array containing the element's attributes (if any exist). The keys of this array are the
attribute names; the values are the attribute values. Attribute names are case-folded on the same criteria as element names. Attribute
values are not case-folded.
The function named by end_element_handler can accept two parameters: parser and
name.
1334027
• The first argument, parser, is a reference to the XML parser that calls the handler.
• The second argument, name, contains the name of the element for which this handler is called. If case-folding is in effect for this parser,
the element name will appear in uppercase letters.
For both handlers, if you wish to set up a method as a handler function, pass to
start_element_handler or end_element_handler a two-item array containing a
reference to the object as the first item, and the name of the method as the second item.
1334027
If a handler function is set to an empty string, or FALSE, the handler in question is disabled.
TRUE is returned if the handlers are set up; FALSE is returned if the parser is invalid.
1334027
Appendix A. PHP XML Functions
Page 7
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.1.2.18. xml_set_end_namespace_decl_handler
661753
bool xml_set_end_namespace_decl_handler(resource parser,
    callback handler)
In theory, this function should let you set up a handler function that will be called after the closing
tag of an element that contained a namespace declaration. As of this writing, however, this particular
callback is not supported by the XML library used by PHP, so this function should not be used.
1334027
A.1.2.19. xml_set_external_entity_ref_handler
661753
bool xml_set_external_entity_ref_handler(resource parser,
    callback handler)
This function sets up a handler function that is called when the XML parser encounters an external
entity reference; that is an entity reference (<entname>) whose value is declared in the DTD as
the content of an external file. The handler argument is a string containing the name of a function
that must exist when xml_parse is called to parse the document.
1334027
The function named by handler must accept five arguments: parser,
open_entity_names, base, system_id and public_id.
1334027
• The first argument, parser, is a reference to the XML parser calling the handler.
• The second argument, open_entity_names, contains a space-separated list of the external entities that have been opened to get to
the current entity reference. For example, if the current entity reference <entityC> appears inside the value of <entityB>, which
in turn appears inside <entityA>, then this argument will be the string entityA entityB entityC.
• The third argument, base, should in theory contain an absolute URL to be used as the base URL for resolving the relative URL in
system_id. Because of the way the XML parser in PHP is implemented, this will always be an empty string.
• The fourth argument, system_id, contains the system identifier of the external entity—a URL pointing to the location where the
entity's content file may be downloaded.
• The fifth argument, public_id, contains the public identifier string for a standardized external entity within your application. If no
such identifier is declared for the entity in the DTD, this argument will be an empty string.
If you wish to set up a method as a handler function, pass to handler a two-item array containing
a reference to the object as the first item, and the name of the method as the second item.
1334027
If the handler function is set to an empty string, or to FALSE, the handler in question is disabled.
TRUE is returned if the handler is set up; FALSE is returned if the parser is not valid.
1334027
A.1.2.20. xml_set_notation_decl_handler
661753
bool xml_set_notation_decl_handler(resource parser,
    callback handler)
Appendix A. PHP XML Functions
Page 8
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

This function sets up a handler function that is called when the XML parser encounters a notation
declaration   in the DTD of the document. Notation declarations let you assign names and identifiers
for types of non-XML data that may be included in the XML document by means of an external
entity reference. Such entities are called unparsed entities  .
1334027
The handler argument is a string containing the name of a function that must exist when
xml_parse is called to parse the document. The function named by handler must accept five
arguments: parser, notation_name, base, system_id and public_id.
1334027
• The first argument, parser, is a reference to the XML parser calling the handler.
• The second argument, notation_name, contains the name assigned to the notation by the notation declaration.
• The third argument, base, should in theory contain an absolute URL to be used as the base URL for resolving the relative URL in
system_id. Because of the way the XML parser in PHP is implemented, this will always be an empty string.
• The fourth argument, system_id, contains the system identifier of the notation—a URL often used to point to an application that
can process the data type identified by this notation.
• The fifth argument, public_id, contains the public identifier string for a standardized notation within your application. If no such
identifier is declared for the notation in the DTD, this argument will be an empty string.
If you wish to set up a method as a handler function, pass to handler a two-item array containing
a reference to the object as the first item, and the name of the method as the second item.
1334027
If the handler function is set to an empty string, or to FALSE, the handler in question is disabled.
TRUE is returned if the handler is set up; FALSE is returned if the parser is not valid.
1334027
A.1.2.21. xml_set_object
661753
void xml_set_object(resource parser, object object)
An alternative means of setting up methods as handler functions, this function lets you specify an
object of which all of the handler functions assigned to the parser are assumed to be methods.
This is especially convenient when using an XML parser within a PHP class, where you can assign
the current object as the provider of all handler functions:
1334027
xml_set_object($this->parser, $this);
A.1.2.22. xml_set_processing_instruction_handler
661753
bool xml_set_processing_instruction_handler(resource parser,
    callback handler)
This function sets up a handler function that is called when the XML parser encounters a processing
instruction (<target data>). The handler argument is a string containing the name of a
function that must exist when xml_parse is called to parse the document.
Appendix A. PHP XML Functions
Page 9
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
The function named by handler must accept three arguments: parser, target and data.
1334027
• The first argument, parser, is a reference to the XML parser calling the handler.
• The second argument, target, contains the target portion of the processing instruction (e.g. for <php …>, it would contain php).
• The third argument, data, contains the data that appears within the processing instruction.
If you wish to set up a method as a handler function, pass to handler a two-item array containing
a reference to the object as the first item, and the name of the method as the second item.
1334027
If the handler function is set to an empty string, or to FALSE, the handler in question is disabled.
TRUE is returned if the handler is set up; FALSE is returned if the parser is not valid.  
1334027
A.2. DOM Functions
661753
The  DOM is an extensive API, and DOM functions in PHP do a very good job of taking into
consideration most of the supported functionality. As a result, the supported DOM function list is
very large. As this is an object oriented API, it is largely made up of object classes, each with a
series of properties and methods:
1334027
A.2.1. Object Listing
672274
The DOM API is implemented in PHP by objects of the following classes:
1334027
A.2.2.1. DOMAttr
661753
Represents an attribute in an XML document. Extends DOMNode, inheriting all of that class's
properties and methods.
1334027
To create a new DOMAttr object directly, use the class's object constructor:
1334027
$attr = new DOMAttr(string name[, string value]);
where name is the attribute's name and value is the attribute's value.
1334027
Appendix A. PHP XML Functions
Page 10
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Warning: If you directly create a new DOMAttr  object, it will be read-only until you add it to the document
(e.g. with appendChild). To create a writable DOMAttr, use the DOMDocument object's createAttribute
method instead.
A.2.2. Methods
672274
bool $attr->isId()
Returns TRUE if the attribute is defined as a unique ID in the DTD for the document, or FALSE if
not. Since this requires knowledge of the DTD to check, you must validate the document (e.g. using
the DOMDocument's validate method) before this method will return TRUE.
1334027
A.2.3. Properties
672274
name
The name of the attribute. Read-only.
ownerElement
The DOMElement the attribute belongs to. Read-only.
value
The value of the attribute.
A.2.4.2. DOMCharacterData
661753
Represents a section of character data   in an XML document. Extends DOMNode, inheriting all
of that class's properties and methods.
1334027
Tip: The DOMText class is a subclass of DOMCharacterData, and represents actual text nodes in the
document. For most practical purposes, you'll be dealing with that class, not this one.
A.2.4. Methods
672274
$cdata->appendData(string data)
Appends the string data to the end of the existing data.
1334027
$cdata->deleteData(int offset, int count)
Deletes count characters of the current text data beginning at offset.
1334027
Appendix A. PHP XML Functions
Page 11
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

$cdata->insertData(int offset, string data)
Inserts the string data into the existing data at offset.
1334027
$cdata->replaceData(int offset, int count, string data)
Deletes count characters of the current text data beginning at offset, then replaces it with the
string data.
1334027
string $cdata->substringData(int offset, int count)
Returns the substring beginning at offset and running for up to count characters.
1334027
A.2.5. Properties
672274
data
The complete string of text data.
length
The length in characters of text data. Read-only.
A.2.6.3. DOMComment
661753
Represents a comment in an XML document. Extends DOMCharacterData, inheriting all of that
class's properties and methods.
1334027
To create a new DOMComment object directly, use the class's object constructor:
1334027
$comment = new DOMComment([string value]);
where value is the text content of the comment.
1334027
Warning: If you directly create a new DOMComment object, it will be read-only  until you add it to the
document (e.g. with appendChild). To create a writable DOMComment , use the DOMDocument object's
createComment method instead.
A.2.6.4. DOMDocument
661753
Represents an XML document. Extends DOMNode, inheriting all of that class's properties and
methods.
1334027
To create a new DOMDocument object directly, use the class's object constructor:
Appendix A. PHP XML Functions
Page 12
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
$dom = new DOMDocument([string version[, string encoding]]);
where version is the XML version number for the document (e.g. 1.0), and encoding is the
character encoding for the document (US-ASCII, ISO-8859-1 or UTF-8).
1334027
A.2.6. Methods
672274
DOMAttr $dom->createAttribute(string name)
Creates a new DOMAttr object associated with this document for an attribute name.
1334027
DOMAttr $dom->createAttributeNS(string namespaceURI,
    string qualifiedName)
Creates a new DOMAttr object associated with this document within the namespace specified by
the URI namespaceURI and with the prefix specified in the qualifiedName (i.e.,
prefix:name).
1334027
DOMCDATASection $dom->createCDATASection(string data)
Creates a new DOMCDATASection object associated with this document with the text content
data.
1334027
DOMComment $dom->createComment(string data)
Creates a new DOMComment object associated with this document with the text content data.
1334027
DOMDocumentFragment $dom->createDocumentFragment()
Creates a new DOMDocumentFragment object associated with this document.
1334027
DOMElement $dom->createElement(string name[, string value])
Creates a new DOMElement object associated with this document with the specified tag name and
optionally containing a text node with the text value.
1334027
DOMElement $dom->createElementNS(string namespaceURI,
    string qualifiedName[, string value])
Creates a new DOMElement object associated with this document within the namespace specified
by the URI namespaceURI and with the prefix specified in the qualifiedName (i.e.
prefix:name), and optionally containing a text node with the text value.
Appendix A. PHP XML Functions
Page 13
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
DOMEntityReference $dom->createEntityReference(string name)
Creates a new DOMEntityReference object associated with this document with the specified
name (not including & and ;).
1334027
DOMProcessingInstruction $dom->createProcessingInstruction(
    string target[, string data])
Creates a new DOMProcessingInstruction object associated with this document with the specified
target and optionally containing the specified data string.
1334027
DOMText $dom->createTextNode(string content)
Creates a new DOMText object associated with this document with the specified content string.
1334027
DOMElement $dom->getElementById(string elementId)
Fetches the DOMElement object for the document element with the ID elementId, if it exists.
Because the DOM has no way of knowing which attribute to use as the ID until the document's
DTD is parsed, you must first validate the document with the DOMDocument's validate method.
1334027
DOMNodeList $dom->getElementsByTagName(string name)
Fetches a DOMNodeList object containing all of the DOMElement objects with the specified tag
name in the document. A name of * will fetch all elements in the document.
1334027
DOMNodeList $dom->getElementsByTagNameNS(string namespaceURI,
    string localName)
Fetches a DOMNodeList object containing all of the DOMElement objects with the specified tag
localName (without the prefix) in the document, and within the namespace with the specified
URI. A localName or namespaceURI of * will fetch all elements within the specified
namespaceURI, or all elements with the specified localName, respectively.
1334027
DOMNode $dom->importNode(DOMNode importedNode[, bool deep])
Copies the supplied importedNode (potentially from another document) into a new
DOMNode object associated with this document. If deep is given and is TRUE, all child nodes are
recursively copied as well.
1334027
bool $dom->load(string filename)
Loads the specified XML filename into this DOMDocument object. Can also be called statically
to create a new DOMDocument object from a file using default options (i.e., $dom =
DOMDocument::load(filename);).
Appendix A. PHP XML Functions
Page 14
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
bool $dom->loadHTML(string source)
Parses the provided HTML source code, which may or may not be well-formed (i.e., the parser
deals with it as best it can), into this DOMDocument object. Can also be called statically to create
a new DOMDocument object from HTML code using default options (i.e., $dom =
DOMDocument::loadHTML(source);).
1334027
bool $dom->loadHTMLFile(string filename)
Loads the specified HTML filename, which may or may not be well-formed (i.e., the parser
deals with it as best it can), into this DOMDocument object. Can also be called statically to create
a new DOMDocument object from an HTML file using default options (i.e., $dom =
DOMDocument::loadHTMLFile(filename);).
1334027
bool $dom->loadXML(string source)
Parses the provided XML source code into this DOMDocument object. Can also be called
statically to create a new DOMDocument object from XML code using default options (i.e., $dom
= DOMDocument::loadXML(source);).
1334027
$dom->normalize()
Normalizes this document according to standard XML normalization rules in preparation for
comparison with potentially equivalent documents. Whitespace is collapsed, adjacent text nodes
are combined, etc.
1334027
bool $dom->relaxNGValidate(string filename)
Validates the document according to the relaxNG schema in the file specified by filename.
Returns TRUE if valid, FALSE if not.
1334027
bool $dom->relaxNGValidateSource(string source)
Validates the document according to the relaxNG schema source code provided. Returns
TRUE if valid, FALSE if not.
1334027
mixed $dom->save(string filename)
Stores this document as an XML file with the given filename. Returns the size of the file in
bytes, or FALSE if an error occurs.
1334027
string $dom->saveHTML()
Returns the HTML source code for this document.
Appendix A. PHP XML Functions
Page 15
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
mixed $dom->saveHTMLFile(string filename)
Stores this document as an HTML file with the given filename. Returns the size of the file in
bytes, or FALSE if an error occurs.
1334027
string $dom->saveXML([DOMNode node])
Returns the XML source code for this document, or for the portion of this document rooted at
node, if specified.
1334027
bool $dom->schemaValidate(string filename)
Validates the document according to the XML Schema file specified by filename. Returns
TRUE if valid, FALSE if not.
1334027
bool $dom->schemaValidateSource(string source)
Validates the document according to the XML Schema source code provided. Returns TRUE if
valid, FALSE if not.
1334027
bool $dom->validate()
Validates the document according to its DTD. Returns TRUE if valid, FALSE if not, or if no DTD
is specified by the document.
1334027
int $dom->xinclude([int options])
Processes the document for XInclude includes, substituting <xi:include> tags for the content
they point to.
1334027
A.2.7. Properties
672274
actualEncoding
The encoding actually being used by this document. Read-only.
config
The DOMConfiguration object that encapsulates the configuration of this document. Read-only.
doctype
The DOMDocumentType object that encapsulates the Document Type Declaration of this document. Read-only.
documentElement
The root DOMElement of this document. Read-only.
documentURI
The location of the document, or NULL.
encoding
The encoding assigned to this document (e.g., US-ASCII, ISO-8859-1 or UTF-8).
Appendix A. PHP XML Functions
Page 16
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

formatOutput
If TRUE, the document code will be indented on output.
implementation
The DOMImplementation that is responsible for handling this document. Read-only.
preserveWhiteSpace
Defaults to TRUE, which preserves redundant whitespace. If set to FALSE, consecutive whitespace characters in the document are
collapsed to a single space.
recover
Set this to TRUE before loading a document you suspect will be not well-formed. The parser will do its best to recover from missing
tags and other such problems.
resolveExternals
Set this to TRUE before loading a document to include the contents of external entities declared in the DTD of this document.
standalone
If TRUE, this document will identify itself as being self-contained. No external entities or DTDs will be required to fully parse it.
strictErrorChecking
Defaults to TRUE, and causes the parser to throw a DOMException whenever a parsing error occurs.
substituteEntities
If TRUE, the contents of entities declared in the DTD will be substituted into this document as it is parsed.
validateOnParse
If TRUE, causes the document to be validated automatically as it is parsed, avoiding the need to call the validate afterwards.
version
The XML version in use by this document (e.g. 1.0).
xmlEncoding
This gives the encoding specified by the XML declaration of the parsed document. Documents created in memory, or which do not
specify an encoding, will give a value of NULL for this property. Read-only.
xmlStandalone
This indicates whether the parsed document was declared as standalone in its XML declaration. If not specified, this defaults to
FALSE.
xmlVersion
This gives the encoding specified in the XML declaration of the parsed document. If not declared, this defaults to 1.0.
A.2.8.5. DOMDocumentType
661753
Represents the document type declaration of an XML document. Extends DOMNode, inheriting
all of that class's properties and methods.
1334027
A.2.8. Properties
672274
entities
A DOMNamedNodeMap object containing the internal and external entities declared in the DTD. Read only.
internalSubset
A string containing the entire internal subset of the DTD, that is, the portion of the DTD that is contained within the document itself.
name
The name of the DTD—the name of the root element of a valid document. Read only.
notations
A DOMNamedNodeMap object containing the notations declared in the DTD. Read only.
publicId
The public identifier string for a well-known or application-standard document type. Read-only.
systemId
The system identifier for this document type, that is, the URL to the DTD for this document. Read-only.
Appendix A. PHP XML Functions
Page 17
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.2.9.6. DOMElement
661753
Represents an element in an XML document. Extends DOMNode, inheriting all of that class's
properties and methods.
1334027
To create a new DOMElement object directly, use the class's object constructor:
1334027
$el = new DOMElement(string name[, string value[,
    string namespaceURI]]);
where name is the element's name (with a namespace prefix if namespaceURI is specified),
value is the element's optional text content (which will be created as a DOMText object), and
namespaceURI is the optional namespace identifier for this element.
1334027
Warning: If you directly create a new DOMElement object, it will be read-only   until you add it to the document
(e.g. with appendChild). To create a writable DOMElement, use the DOMDocument object's createElement
or createElementNS method instead.
A.2.9. Methods
672274
string $el->getAttribute(string name)
Returns the value of this element's attribute with the specified name, or an empty string if the
attribute does not exist.
1334027
DOMAttr $el->getAttributeNode(string name)
Returns the DOMAttr object for this element's attribute with the specified name, or NULL if the
attribute does not exist.
1334027
DOMAttr $el->getAttributeNodeNS(string namespaceURI,
    string localName)
Returns the DOMAttr object for this element's attribute with the specified localName and
namespaceURI, or NULL if the attribute does not exist.
1334027
string $el->getAttributeNS(string namespaceURI, string localName)
Returns the value of this element's attribute with the specified localName and
namespaceURI, or an empty string if the attribute does not exist.
1334027
DOMNodeList $el->getElementsByTagName(string name)
Appendix A. PHP XML Functions
Page 18
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Returns a DOMNodeList of all descendant elements (that is, all elements contained in this element)
with the specified name, in the order they occur in the document.
1334027
DOMNodeList $el->getElementsByTagNameNS(string namespaceURI,
    string localName)
Returns a DOMNodeList of all descendant elements (that is, all elements contained in this element)
with the specified localName and namespaceURL, in the order they occur in the document.
1334027
bool $el->hasAttribute(string name)
Returns TRUE if the attribute name has a value for this element.
1334027
bool $el->hasAttributeNS(string namespaceURI, string localName)
Returns TRUE if the attribute with namespaceURI and localName has a value for this element.
1334027
bool $el->removeAttribute(string name)
Removes the attribute with name from this element, if it exists. Returns TRUE if successful,
FALSE if the attribute did not exist.
1334027
bool $el->removeAttributeNode(DOMAttr node)
Removes the attribute represented by the DOMAttr object node from this element. Returns
TRUE if successful, FALSE on failure.
1334027
bool $el->removeAttributeNS(string namespaceURI, string localName)
Removes the attribute with the given namespaceURI and localName from this element.
Returns TRUE if successful, FALSE on failure.
1334027
bool $el->setAttribute(string name, string value)
Sets the value of the attribute with the given name on this element. If it already exists, it is
replaced. If it doesn't exist, it is added.
1334027
DOMAttr $el->setAttributeNode(DOMAttr attr)
Sets the attribute given by the DOMAttr object attr on this element. If it already exists, it is
replaced and the original DOMAttr is returned. If it doesn't exist, it is added and NULL is returned.
1334027
DOMAttr $el->setAttributeNodeNS(DOMAttr attr)
Sets the attribute given by the DOMAttr object attr on this element. If it already exists, it is
replaced and the original DOMAttr is returned. If it doesn't exist, it is added and NULL is returned.
Appendix A. PHP XML Functions
Page 19
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
$el->setAttributeNS(string namespaceURI, string qualifiedName,
    string value)
Sets the value of the attribute with the given namespaceURI and qualifiedName (i.e.,
prefix:name) on this element. If it already exists, it is replaced. If it doesn't exist, it is added.
1334027
A.2.10. Properties
672274
tagName
The element name. Read-only.
A.2.11.7. DOMEntity
661753
Represents an entity declared in an XML document's DTD. Extends DOMNode, inheriting all of
that class's properties and methods.
1334027
A.2.11. Properties
672274
actualEncoding
The encoding used to parse this external parsed entity, or NULL if this is an internal or unparsed entity, or if the encoding is not known.
encoding
The encoding specified in the declaration for this external parsed entity, or NULL if this is an internal or unparsed entity, or if the
encoding is not known. Read-only.
notationName
The name of the notation assigned to this unparsed entity, or NULL if this is a parsed entity. Read-only.
publicId
The public identifier associated with a well-known or application-standard entity, or NULL if not defined. Read-only.
systemId
The system identifier associated with this entity (that is, the URL to the resource containing the entity's content), or NULL if not defined.
Read-only.
version
The version number given in the declaration for this external parsed entity, or NULL if this is an internal or unparsed entity, or if the
version is not known. Read-only.
A.2.12.8. DOMEntityReference
661753
Represents a reference to an entity in an XML document. Extends DOMNode, inheriting all of that
class's properties and methods.
1334027
To create a new DOMEntityReference object directly, use the class's object constructor:
1334027
Appendix A. PHP XML Functions
Page 20
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

$el = new DOMEntityReference(string name);
where name is the entity name.
1334027
Note: It is standard practice to create DOMEntityReference objects using the DOMDocument object's
createEntityReference method .
A.2.12.9. DOMException
661753
Represents an error encountered when attempting to perform an illegal operation on an XML
document.
1334027
A.2.12. Properties
672274
code
The error code identifying the type of error. See Table A-1 for the possible values. Read-only.
A.2.13.10. DOMImplementation
661753
Provides methods for performing general DOM operations not related to any particular DOM
object.
1334027
To create a new DOMImplementation object directly, use the class's object constructor:
1334027
$domimpl = new DOMImplementation();
Note: Most of the time, you will already have a DOMDocument object from which you can obtain the
associated DOMImplementation object by getting the value of its implementation property. This ensures that
PHP can use the most appropriate implementation of the DOM for the DOMDocument.
A.2.13. Methods
672274
DOMDocument $domimpl->createDocument([string namespaceURI[,
    string qualifiedName[, DOMDocumentType doctype]]])
Appendix A. PHP XML Functions
Page 21
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Creates a new DOMDocument, optionally with a root element with the specified
namespaceURI and qualifiedName (i.e., prefix:name), and optionally with the specified
document type declaration (doctype).
1334027
Table A-1. DOMException Error Code Constants
Constant
1334027
Value
1334027
Description
1334027
DOM_INDEX_SIZE_ERR
1334027
1
1334027
The index given is negative, or greater than the
maximum allowed value.
1334027
DOM_STRING_SIZE_ERR
1334027
2
1334027
The given text string will not fit in a DOMString
object.
1334027
DOM_HIERARCHY_REQUEST_ERR
1334027
3
1334027
A node was inserted in an illegal place in the
document.
1334027
DOM_WRONG_DOCUMENT_ERR
1334027
4
1334027
A node associated with one document is used with
another document.
1334027
DOM_INVALID_CHARACTER_ERR
1334027
5
1334027
The given name or value contains an invalid or
illegal character.
1334027
DOM_NO_DATA_ALLOWED_ERR
1334027
6
1334027
Content was added to a node that does not allow
content.
1334027
DOM_NO_MODIFICATION_ALLOWED_ERR
1334027
7
1334027
A read-only object was modified.
1334027
DOM_NOT_FOUND_ERR
1334027
8
1334027
A node that does not exist was referenced.
1334027
DOM_NOT_SUPPORTED_ERR
1334027
9
1334027
The DOM support in PHP does not provide the
requested functionality.
1334027
DOM_INUSE_ATTRIBUTE_ERR
1334027
10
1334027
An attribute that is already in use elsewhere was
added again.
1334027
DOM_INVALID_STATE_ERR
1334027
11
1334027
An object that is no longer usable was used.
1334027
DOM_SYNTAX_ERR
1334027
12
1334027
The given string is invalid, as it does not conform
to the required format.
Appendix A. PHP XML Functions
Page 22
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Constant
1334027
Value
1334027
Description
1334027
1334027
DOM_INVALID_MODIFICATION_ERR
1334027
13
1334027
The type of an object was modified illegally.
1334027
DOM_NAMESPACE_ERR
1334027
14
1334027
The specified operation violates namespace rules.
1334027
DOM_INVALID_ACCESS_ERR
1334027
15
1334027
The requested operation is not supported.
1334027
DOM_VALIDATION_ERR
1334027
16
1334027
The requested change to the document would make
it invalid.
1334027
DOMDocumentType $domimpl->createDocumentType(
    [string qualifiedName[, string publicId[, string systemId]]])
Creates a document type declaration with the specified qualifiedName (i.e.,
prefix:name), the public identifier for a well-known or application-standard document type
publicId, and the system identifier for the DTD (that is, the URL where an external DTD may
be found).
1334027
bool $domimpl->hasFeature(string feature, string version)
Returns TRUE if PHP's DOM implementation supports the specified feature of the specified
version. Features include Core, XML, HTML, Views, Stylesheets and more. For a full list,
see the DOM specification.
1334027
A.2.14.11. DOMNode
661753
Due to inheritance, all nodes in the DOM (documents, elements, attributes, etc.) support the methods
and properties in this class.
1334027
A.2.14. Methods
672274
DOMNode $node->appendChild(DOMNode newnode)
Adds newnode as the last child of this node. Returns the added node.
1334027
DOMNode $node->cloneNode([bool deep])
Appendix A. PHP XML Functions
Page 23
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Creates and returns a copy of this node (and if deep is true, all descendant nodes).
1334027
bool $node->hasAttributes()
Returns TRUE if this node is an element that has attributes.
1334027
bool $node->hasChildNodes()
Returns TRUE if this node has children.
1334027
DOMNode $node->insertBefore(DOMNode newnode[, DOMNode refnode])
Adds newnode as a child of this node, placing it before refnode in the child order (or adding it
as the last child if refnode is not given). Returns the added node, which must be used if further
changes to the node are required.
1334027
bool $node->isSameNode(DOMNode node)
Returns TRUE if node and this node are one and the same. Two different nodes can have identical
content—this method will still return FALSE.
1334027
bool $node->isSupported(string feature, string version)
Checks if the specified feature in the specified version is supported by this node. See the
hasFeature method of DOMImplementation.
1334027
string $node->lookupNamespaceURI(string prefix)
Returns the namespace URI associated with the given prefix for this node.
1334027
string $node->lookupPrefix(string namespaceURI)
Returns the namespace prefix associated with the given namespaceURI for this node.
1334027
$node->normalize()
Normalizes this node according to standard XML normalization rules in preparation for comparison
with potentially equivalent nodes. Whitespace is collapsed, adjacent text nodes are collapsed, etc.
1334027
DOMNode $node->removeChild(DOMNode oldnode)
Removes the child node oldnode from this node. Returns the removed child, or NULL if it could
not be removed.
1334027
DOMNode $node->replaceChild(DOMNode newnode, DOMNode oldnode)
Appendix A. PHP XML Functions
Page 24
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Removes the existing child oldnode and replaces it with newnode. Returns the removed child.
1334027
A.2.15. Properties
672274
attributes
A DOMNamedNodeMap (essentially an associative array) containing the attributes of this node and their values, or NULL if this node
is not an element. Read-only.
baseURI
The absolute URI of this node, or NULL if it is unknown. Read-only.
childNodes
A DOMNodeList of the children of this node. Read-only.
firstChild
The first child of this node, or NULL if there are no children. Read-only.
lastChild
The last child of this node, or NULL if there are no children. Read-only.
localName
The local name of this node in a namespace-aware document, or the full element name if no namespace is assigned. Read-only.
namespaceURI
The namespace URI of this node in a namespace-aware document, or NULL if none is specified. Read-only.
nextSibling
The node immediately following this node, or NULL if this node is the last child of its parent. Read-only.
nodeName
The name of this node (e.g. the element or attribute name). Read-only.
nodeType
The type of the node. See Table A-2 for the list of possible values. Read-only.
nodeValue
The value of this node (e.g. the text content or attribute value).
ownerDocument
The DOMDocument object for the document to which this node belongs. Read-only.
parentNode
The parent node of this node. Read-only.
prefix
The namespace prefix of this node in a namespace-aware document, or NULL if none is specified.
previousSibling
The node immediately preceding this node, or NULL if this node is the first child of its parent. Read-only.
textContent
The text content of this node including all descendants. If written to, all children will be replaced with a text node with the specified
content.
Table A-2. DOMNode Type Constants
Constant
1334027
Value
1334027
Object Class
1334027
XML_ELEMENT_NODE
1334027
1
1334027
DOMElement
1334027
XML_ATTRIBUTE_NODE
1334027
2
1334027
DOMAttr
1334027
XML_TEXT_NODE
1334027
3
1334027
DOMText
1334027
Appendix A. PHP XML Functions
Page 25
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Constant
1334027
Value
1334027
Object Class
1334027
XML_CDATA_SECTION_NODE
1334027
4
1334027
DOMCharacterData
1334027
XML_ENTITY_REF_NODE
1334027
5
1334027
DOMEntityReference
1334027
XML_ENTITY_NODE
1334027
6
1334027
DOMEntity
1334027
XML_PI_NODE
1334027
7
1334027
DOMProcessingInstruction
1334027
XML_COMMENT_NODE
1334027
8
1334027
DOMComment
1334027
XML_DOCUMENT_NODE
1334027
9
1334027
DOMDocument
1334027
XML_DOCUMENT_TYPE_NODE
1334027
10
1334027
DOMDocumentType
1334027
XML_DOCUMENT_FRAG_NODE
1334027
11
1334027
DOMDocumentFragment
1334027
XML_NOTATION_NODE
1334027
12
1334027
DOMNotation
1334027
XML_HTML_DOCUMENT_NODE
1334027
13
1334027
DOMDocument
1334027
XML_DTD_NODE
1334027
14
1334027
DTD nodes are not represented in PHP's DOM representation.
These constants are included as defined in the DOM standard
for completeness.
1334027
XML_ELEMENT_DECL_NODE
1334027
15
1334027
XML_ATTRIBUTE_DECL_NODE
1334027
16
1334027
XML_ENTITY_DECL_NODE
1334027
17
1334027
XML_NAMESPACE_DECL_NODE
1334027
18
1334027
A.2.16.12. DOMNodeList
661753
Essentially an array of DOMNode objects, objects of this class may be iterated through with a PHP
foreach loop.
Appendix A. PHP XML Functions
Page 26
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
A.2.16. Methods
672274
DOMNode $nlist->item(int index)
Fetches the DOMNode at position index in the list (0 for the first DOMNode).
1334027
A.2.17. Properties
672274
length
The number of DOMNodes in the list. Read-only.
A.2.18.13. DOMNotation
661753
Represents a notation declared in the document's DTD. Extends DOMNode, inheriting all of that
class's properties and methods.
1334027
A.2.18. Properties
672274
publicId
The public ID of a well-known or application-standard notation. Read-only.
systemId
The system ID of a notation, often a URL that enables the processing application to read data of the type indicated by the notation.
Read-only.
A.2.19.14. DOMProcessingInstruction
661753
Represents a processing instruction (i.e., <target data>) in an XML document. Extends
DOMNode, inheriting all of that class's properties and methods.
1334027
To create a new DOMProcessingInstruction object directly, use the class's object constructor:
1334027
$pi = new DOMProcessingInstruction(string target[, string data]);
where target is the processing instruction's target and data is the data contained in the
processing instruction.
1334027
Appendix A. PHP XML Functions
Page 27
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Warning: If you directly create a new DOMProcessingInstruction object, it will be read-only   until you add it
to the document (e.g. with appendChild). To create a writable DOMProcessingInstruction, use the
DOMDocument object's createProcessingInstruction method instead.
A.2.19. Properties
672274
data
The data string contained in the processing instruction.
target
The target of the processing instruction. Read-only.
A.2.20.15. DOMText
661753
Represents a string of plain text in an XML document. Extends DOMCharacterData, inheriting all
of that class's properties and methods.
1334027
To create a new DOMText object directly, use the class's object constructor:
1334027
$text = new DOMText([string value]);
where value, if specified, is the text string in the node. If no value is specified, an empty text node
is created.
1334027
Note: It is standard practice to create a new text node using the createTextNode method of the
DOMDocument object with which it should be associated.
A.2.20. Methods
672274
bool $text->isWhitespaceInElementContent()
Returns TRUE if this text node contains only whitespace, the document has been validated, and the
DTD requires that the parent element of this text node contains only child elements (no text nodes).
In other words, returns TRUE if this text node is nonsignificant whitespace for validation purposes
(and likely application purposes).
1334027
DOMText $text->splitText(int offset)
Appendix A. PHP XML Functions
Page 28
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Splits this text node into two text nodes, where this node will contain text content up to specified
offset and the new node will contain the remaining content (if any). The new node is inserted
as a sibling following this node in the document (if it has a parent node), and is returned as a
DOMText object.
1334027
A.2.21. Properties
672274
wholeText
Returns the text of this and all adjacent text nodes in the document (including expanded entities). Read-only.
A.2.22.16. DOMXPath
661753
An object of this type enables  XPath queries to be applied to an XML document.
1334027
To create a new DOMXPath object, use the class's object constructor:
1334027
$xpath = new DOMXPath(DOMDocument doc]);
where doc is the document to which queries will be applied.
1334027
A.2.22. Methods
672274
bool $xpath->registerNamespace(string prefix, string namespaceURI)
Registers a namespace prefix for a namespaceURI with this object, so that XPath expressions
that include a namespace prefix will correctly map that prefix to the equivalent namespace in the
document.
1334027
mixed $xpath->evaluate(string expression[, DOMNode contextnode])
Evaluates an XPath expression returning either a single node object (e.g., a DOMElement) or
a DOMNodeList containing all the matching nodes. The expression is evaluated relative to the
specified contextnode, or relative to the root element if none is specified.
1334027
mixed $xpath->query(string expression[, DOMNode contextnode])
Works just like evaluate, except that the result is always returned as a DOMNodeList, even if only
a single node matches the query.
1334027
Appendix A. PHP XML Functions
Page 29
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

A.2.23. Properties
672274
document
The document that this object will query. Read-only.
A.2.24. Function Listing
672274
In addition to the objects listed above, the DOM API includes the following standalone function :
1334027
DOMElement dom_import_simplexml(SimpleXMLElement node)
Converts a SimpleXML element object into a DOMElement, which may then be imported into a
DOMDocument (using its importNode method) and used with the DOM API. 
1334027
A.3. SimpleXML Functions
661753
SimpleXML  is new to PHP 5. As its name implies, it provides a simplified way to access the content
of XML documents.
1334027
A.3.1. Function Listing
672274
The following SimpleXML functions are used to load an XML document or fragment.
1334027
SimpleXMLElement simplexml_import_dom(DOMNode node[,
    string class_name])
This function takes a node object from the DOM API and converts it into a SimpleXML
representation of the document or fragment. If an error occurs, FALSE is returned instead.
1334027
SimpleXMLElement simplexml_load_file(string filename)
This function will convert the XML code in filename into a SimpleXML representation of the
document or fragment. If an error occurs, FALSE is returned instead.
1334027
SimpleXMLElement simplexml_load_string(string data)
Appendix A. PHP XML Functions
Page 30
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

This function will convert a string of XML code (data) into a SimpleXML representation of the
document or fragment. If an error occurs, FALSE is returned instead.
1334027
A.3.2. SimpleXMLElement Methods
672274
When an XML document or fragment is loaded with SimpleXML, a SimpleXMLElement object is
the result. This object supports the following methods:
1334027
string $simplexml->asXML()
Converts this document or fragment into a string of XML code.
1334027
SimpleXMLElement $simplexml->attributes()
Returns a SimpleXMLElement object that may be treated as an associative array of attribute names
to attribute values for this element.
1334027
SimpleXMLElement $simplexml->children()
Returns a SimpleXMLElement object that may be treated as an array of the children of this element.
1334027
array $simplexml->xpath(string path)
Evaluates the XPath expression given in path relative to this SimpleXML node. Returns an array
of SimpleXMLElement objects that match the query. 
1334027
Appendix A. PHP XML Functions
Page 31
Return to Table of Contents
Appendix A. PHP XML Functions
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

