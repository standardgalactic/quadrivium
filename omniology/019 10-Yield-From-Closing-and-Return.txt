© Fred Baptiste 2018

Closing the subgenerator
def delegator():
…
yield from subgen()
…
def subgen():
…
yield
…
next
when subgen closes
delegator resumes running exactly where it was paused 
delegator code is effectively "paused" here as long as subgen is not closed
© Fred Baptiste 2018

Closing the delegator
def delegator():
…
yield from subgen()
…
def subgen():
…
yield
…
next
d = delegator()
d.close()
à closes the subgenerator
à immediately closes the delegator as well
© Fred Baptiste 2018

Returning from a generator
A generator can return
à StopIteration
The returned value is embedded in the StopIteration exception
à we can extract that value
try:
next(g)
except StopIteration as ex:
print(ex.value)
à so can Python!
© Fred Baptiste 2018

Returning from a subgenerator
yield from
is an expression
It evaluates to the returned value of the subgenerator
result = yield from subgen()
def subgen():
…
yield
…
return result
© Fred Baptiste 2018

def delegator():
…
result =  yield from subgen()
…
def subgen():
…
yield
…
return result
next
Returning from a subgenerator
delegator receives return value
and continues running normally
yield from
à establishes conduit
subgenerator returns
à conduit is closed
à yield from evaluates to the returned value
à delegator resumes running
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

