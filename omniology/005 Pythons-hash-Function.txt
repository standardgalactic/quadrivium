hash()
© 2019 MathByte Academy

Python hash()
built-in function: hash()
map(hash, (1, 2, 3, 4))
à 1, 2, 3, 4
map(hash, (1.1, 2.2, 3.3, 4.4))
à 1152921504606846977, 1152921504606846978,
1152921504606846979, 1152921504606846980
map(hash, ('hello', 'python', '!'))
à 2558804294780988881, 1235297897608439440, 
-8029463035455593707
hash((1, 'a', 10.5))
à -5053599863580733767
à always returns an int
à if a == b is True, then hash(a) == hash(b) is also True
à Python truncates hashes to some fixed size
(sys.hash_info.width)
à me = 64-bits
© 2019 MathByte Academy

Python hash()
hash([1, 2])
à TypeError: unhashable type
hash({'a', 'b'})
à TypeError: unhashable type
hash((1, 2))
hash(frozenset({'a', 'b'}))
à 3713081631934410656
à 4261914069630221614
mutable
immutable
hash((1, 2, [3, 4]))
à TypeError: unhashable type
© 2019 MathByte Academy

Why?
hash values à used for hash tables (dictionaries)
à position index
a = (1, 2, 3)
d = {a: 'this key is a tuple – immutable'}
hash(a) never changes since a is immutable
a = [1, 2, 3]
d = {a: 'this key is a list – mutable'}
d[a] à looks for a at same index
a.append(4)
à same object
à hash has changed
à looking for a at wrong index!!
à d[a] ???
© 2019 MathByte Academy

Caveat
built-in function: hash()
à always returns an int
à if a == b is True, then hash(a) == hash(b) is also True
à Python truncates hashes to some fixed size
# mod1.py
print(hash('python'))
print(hash('python'))
run 1:
run 2:
1235297897608439440
1235297897608439440
-5750637952798290655
-5750637952798290655
hash values for objects that compare equal remain equal during program run
but they can change from run to run
à never rely on a hash value being the same from one program run to another
à strings, bytes and datetime
à although may be ok sometimes, ex: integers
© 2019 MathByte Academy

