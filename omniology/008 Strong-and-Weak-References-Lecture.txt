©2019 MathByte Academy

Strong References
p1 = Person()
p2 = p1
object
p1
p2
these are called strong references
del p1
à there is still a strong reference (p2) to the object
à object is still "alive", so Python does not garbage collect it
del p2
à no more strong references to object
à object will be garbage collected by Python
à that's the problem we faced in our data descriptor
©2019 MathByte Academy

Weak References
There is another type of object reference in Python
à weak reference
think of it as a reference to an object that does not affect the reference count 
as far as the memory manager is concerned
object
p1
strong
p2
weak
del p1
à no more (strong) references to object
à object is garbage collected
à p2 is "dead"
à so for our data descriptor instead of storing the object as key
à store a weak reference to the object
©2019 MathByte Academy

Weak References
à use the weakref module
p1 = Person()
à p1 has a strong reference to the object
p2 = weakref.ref(p1)
à p2 is an (other) object that contains a weak reference to the object
à p2 is a callable
p2()
à returns the original object
Careful:
p3 = p2()
à you just created a strong reference to the object!
à or None if the object has been garbage collected
©2019 MathByte Academy

Dictionaries of Weak References
So, we'll want to create a dictionary of weak references (for our keys) for our data descriptor
à weakref has a WeakKeyDictionary to do just that!
d = WeakKeyDictionary()
d[p1] = 'some value'
à a weak reference is used for the Person instance
p1 = Person()
à p1 is a strong reference to the Person instance
del p1
à no more strong references à garbage collected
à item is automatically removed from weak key dictionary
(so be careful if you’re iterating over the dictionary views if that 
happens during the iteration! 
We won’t need to, so won't be a problem for our use-case)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

