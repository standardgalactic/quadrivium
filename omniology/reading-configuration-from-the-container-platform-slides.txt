@EltonStoneman |  blog.sixeyed.com
CONSULTANT & TRAINER
Elton Stoneman
READING CONFIG FROM THE CONTAINER PLATFORM
Preparing Docker Apps for Production


Health
Configuration
Logs
Dependencies
Traffic

Health
Configuration
Logs
Dependencies
Traffic

•
Consistent ops
•
Centralized management
•
Self-healing apps


Configuration in the Container Environment

•
IP address
•
DNS server
•
Environment variables
•
Windows Registry
•
Filesystem

•
Windows Registry
•
IP address
•
DNS server
•
Filesystem
•
Environment variables

/app/config/default.json
/app/config/override.json
Logging.Level=DEBUG
Logging.Level=WARN
Logging.Level=INFO

web
image-of-the-day
access-log
Image © Max Rive

Demo
Reading config from the environment
- Container environment variables
- Directory filesystem mounts
- Dockerized Go application

Demo
Reading config from the environment
- Dockerized Node.js application
- Node-Config NPM package
- Docker and Docker Compose

•
Filesystem
•
Environment variables

docker run -d
-v "$(pwd)/config/access-log/test/:/app/config-override/"
-e NODE_CONFIG='{\"metrics\": {\"enabled\": \"true\"}}'
psdockerprod/access-log:m2
Docker CLI
Setting environment variables and mounting config directories

services:
image-gallery:
image: psdockerprod/image-gallery:m2
environment:
IG_METRICS.ENABLED: "FALSE"
volumes:
- type: bind
source: ./config/image-gallery/prod
target: /app/config-override/
docker-compose.yml

/app/config/default.json
/app/config/override.json
Logging.Level=DEBUG

config.json
override.json
Config Loader

config.json
override.json

web
access-log
image-of-the-day
Image © Max Rive

Demo
Merging config during initialization
- Config loader utility
- Reading multiple sources
- Writing to target config file

•
Filesystem
•
Environment variables
Config Loader

# final stage
FROM openjdk:11-jre-slim
EXPOSE 80
ENV CONFIG_SOURCE_PATH="" \
CONFIG_TARGET_PATH="/app/config/application.properties"
CMD java ConfigLoader && \
java -jar /app/iotd-service-0.1.0.jar
WORKDIR /app
COPY --from=utility-builder /usr/src/utilities/ConfigLoader.class .
COPY --from=builder /usr/src/iotd/target/iotd-service-0.1.0.jar .
Dockerfile

services:
iotd:
image: psdockerprod/image-of-the-day:m2
environment:
IOTD_MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health"
CONFIG_SOURCE_PATH: "/app/config-override/app.properties"
volumes:
- type: bind
source: ./config/image-of-the-day/prod
target: /app/config-override/
docker-compose.yml

web
access-log
image-of-the-day
Image © Max Rive


ConfigMap
Secret
Pod -> 
Deployment
Service

Demo
Storing configuration in the platform
- Kubernetes ConfigMaps and Secrets
- Application modelling
- Surfacing config sources

access-log
web
image-of-the-day

apiVersion: v1
kind: ConfigMap
metadata:
name: apod-api-config
data:
application.properties: |-
environment=M2
management.endpoints.web.exposure.include=health,info
apod-api-config.yaml

apiVersion: v1
kind: Secret
metadata:
name: apod-api-secret
type: Opaque
stringData:
IOTD_APOD.KEY: "DEMO_KEY"
apod-api-secret.yaml

spec:
containers:
- image: psdockerprod/access-log:m2
env:
- name: NODE_CONFIG
value: '{"release": "20.11"}'
volumeMounts:
- name: config
mountPath: "/app/config-override"
readOnly: true
volumes:
- name: config
configMap:
name: apod-log-config
apod-log-deployment.yaml

spec:
containers:
- image: psdockerprod/image-of-the-day:m2
env:
- name: IOTD_RELEASE
value: "20.11"
- name: CONFIG_SOURCE_PATH
value: /app/config-override/application.properties
envFrom:
- secretRef:
name: apod-api-secret
volumeMounts:
- name: config
mountPath: "/app/config-override"
readOnly: true
apod-log-deployment.yaml

web
access-log
image-of-the-day
Image © Max Rive


Setting config in the container
- Environment variables
- Container filesystem
- Image layers and mounts
Reading config in the application
- Merge multiple sources
- Config library
- Config loader utility
Storing config in the platform
- Kubernetes ConfigMaps and Secrets
- Also Docker Swarm & Nomad
Summary

Up Next:
Surfacing App Logs in the Container Platform

