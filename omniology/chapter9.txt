Table of Contents
Chapter 9. XML and Web Services............................................................................... 1
9.1. What is a Web Service?...................................................................................................................................................... 1
9.2. XML-RPC............................................................................................................................................................................ 4
9.3. SOAP................................................................................................................................................................................ 10
9.4. Our CMS Project............................................................................................................................................................... 11
9.5. Summary........................................................................................................................................................................... 20
Chapter 9. XML and Web Services
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
This PDF is exclusively for your use in accordance with the Safari Terms of Service. No part of it may be reproduced or transmitted in any form by any means without the prior
written permission for reprints and excerpts from the publisher. Redistribution or other use that violates the fair use priviledge under U.S. copyright laws (see 17 USC107) or that
otherwise violates the Safari Terms of Service is strictly prohibited.

Chapter 9. XML and Web Services
257
It's time to talk about Web Services—specialized mini-programs that applications written in any
language can access over the Internet, thanks to XML. For the most part, we'll look at XML-RPC
—an older, but simpler XML standard for Web Services—but we'll also make time for a glance at
the latest protocol, SOAP. After that, we'll dive in and add a simple Web Service to our CMS, where
we'll use XML-RPC to provide information about articles in the system. This will provide yet
another means for our content to be distributed across the Web.
1334027
9.1. What is a Web Service?
661753
A Web Service is, as its name implies, any service made available over the Web. But what does
that mean?
1334027
In other words, Web Services take the human-centric Web to the next level. The Web today is
mostly about humans using browsers to search for and download information. Web Services provide
an application-centric vision of the Web, in which applications provide services and information
to each other. Web Services use XML-based messages to allow applications to interact with each
other in an automated fashion.
1334027
Most Web Services are designed in such a way that individual programming languages don't really
matter—I might build my Web Service with PHP, and someone else might build a program to
interact with it using ASP.NET, but who cares? The fact is, we're passing standard XML messages
back and forth, and so that becomes the glue that holds everything together regardless of what
programming language originated the messages.
1334027
What makes for a good Web Service? Well, for one thing, they should be self-describing , with
easy-to-understand public interfaces. Another thing that makes for a good Web Service is its
discoverability . If you publish a Web Service, it should be easy to find by those who need to use
it. There's a whole cloud of peripheral technologies surrounding Web Services that address their
Chapter 9. XML and Web Services
Page 1
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.
Copyright Safari Books Online #672274

description and discovery. We won't cover those technologies in this book; instead, we'll focus on
actually building practical Web Services.
1334027
The three most common XML data formats  used for building Web Services are:
1334027
XML Remote Procedure Call (XML-RPC)
This chapter will demonstrate this method.
Simple Object Access Protocol (SOAP)
We will be taking only a brief glance at SOAP.
Custom XML documents
We won't be covering this aspect of Web Services in this chapter.
9.1.1. What's the Big Deal?
672274
To many folks, Web Services don't seem all that different from CGI scripts or even the kind of
PHP, ASP.NET, and JSP scripts that extract information from databases. In fact, companies long
ago realized they needed software that would interact with other software— credit card processors
being one major example.
1334027
So here's the big deal. Until the age of Web Services (sounds impressive, no?) most of these efforts
were largely ad hoc. They used proprietary methods and approaches, myriad programming
languages, and nonstandard ways of requesting services and information.
1334027
A bank, let's say, might have a system in place that runs on Java but expects specially formatted
queries to service requests. It might have an arcane set of commands that must be sent through in
just the right way to work… and the result of a query might come back as fixed-length data records
that have to be parsed just so. Another bank might have a C++ system to do the very same thing,
but it might use colon-delimited data files and command sequences similar to UNIX commands,
because most of its clients interact via a UNIX shell. To work with either of these banks, you would
have to write customized software that understood the needs and quirks of each system.
1334027
Web Services strive to do away with this confusion. With a good Web Service in place, you can
standardize the way you get requests for information, standardize the way you respond to those
requests, and publish the interface so that others can easily request services. In this case, it doesn't
matter if you're using Java and the other guy wants to use Perl or PHP.
1334027
The other big deal focuses on removing the human user from a number of interactions. Let's face
it: if you could reroute some of the more mundane requests you receive every day, wouldn't you
do it?
1334027
Chapter 9. XML and Web Services
Page 2
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

9.1.2. What are Web Services Good At?
672274
Any time you want to share information that is otherwise hard to find, or is frequently accessed,
you have a candidate for a Web Service. Let me give you a couple of examples.
1334027
Let's say that you run a bookstore in a small town. In fact, you run a specialty bookstore selling
detective and crime novels only. You decide to boost your Website's offerings by listing select
detective novels available on Amazon.com.
1334027
Granted, you could enter these items manually into your own inventory listing, or you could write
a PHP script to go scrape Amazon.com pages for information. Both these approaches leave a lot to
be desired.
1334027
Instead, you could sign up to use Amazon.com's Web Service, which allows you to query an
inventory listing based on multiple criteria, and get back a list of those items. You can then write
code to format the list and post it automatically onto your Website. Stock quotes, weather reports,
travel alerts, and auctions are all good candidates for this sort of approach.
1334027
Here's another example: one involving Web Services as the great integrator. You work for a Fortune
100 company that has gigabytes of data stored away in ancient, reliable mainframes. Someone from
the Marketing department calls your boss, wanting access to this data. But you don't have time to
teach this person how to work the mainframe, and, even if you did, it's not a good idea to give the
user direct access.
1334027
So you build a Web Service that allows data queries to the mainframe, and transmits any result sets
back to the user in XML format. The business user doesn't have to understand where the data is,
what it looks like, or even how to get it. All he or she has to do is send in an XML-formatted request;
your Web Service then replies with its own XML response.
1334027
All across the corporate world, Web Services are being used to solve these kinds of "last mile"
issues with integration, not to mention their value as a quick way to keep aging systems viable .
1334027
Where to find Web Services
You canfind some of the more popular Web Services at these locations:
1334027
Chapter 9. XML and Web Services
Page 3
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Amazon.com
http://www.amazon.com/gp/aws/landing.html
Google Web APIs
http://www.google.com/apis/
XMethods Service Listing
http://www.xmethods.net/
9.2. XML-RPC
661753
XML-RPC  is a very simple protocol that uses XML messages to perform remote procedure calls.
A remote procedure call is a fancy way to describe a program on one computer calling a function
stored on another computer.
1334027
XML-RPC requests are sent via HTTP POST , and responses are embedded in the HTTP response.
XML-RPC is platform-independent and very easy to learn. You can find out more about the XML-
RPC standard at http://www.xmlrpc.com/.
1334027
Here's a very simple hypothetical example involving a weather service  . All a user has to do is
provide a standard method name and pass in a US ZIP code to get back a temperature reading:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodCall>
  <methodName>getCurrentTempByZip</methodName>
  <params>
    <param><value>78701</value></param>
  </params>
</methodCall>
Let's suppose further that this is the response that comes back:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodResponse>
  <params>
    <param>
      <value><int>98</int></value>
    </param>
  </params>
</methodResponse>
You can easily see that a basic service like this could involve just a very simple form with a ZIP
code field and a submit button. The response could easily be transformed into HTML using XSLT,
SimpleXML, or DOM.
1334027
Because XML-RPC is so simple, a lot of Web Services newbies start with it (though many stay
right there and never go on to SOAP). We'll get into more detail about the different pieces of requests
and responses in a little while.
1334027
Chapter 9. XML and Web Services
Page 4
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

First, let's break down the three most important parts of XML-RPC: data structure, request, and
response.
1334027
9.2.1. The XML-RPC Data Model
672274
XML-RPC supports eight different  data types: six simple types and two compound ones. The
simple types are shown in Table 9-1.
1334027
These basic types are always wrapped in a <value> element, as we saw in our very simple XML-
RPC response example:
1334027
      <value><int>98</int></value>
Table 9-1. Simple XML-RPC Data Types
Data Type
1334027
Example
1334027
<int> or <i4>
1334027
32-bit integers between –2,147,483,648 and 2,147,483,647
1334027
<int>98</int>
<i4>98</i4>
1334027
<double>
1334027
64-bit floating point numbers
1334027
<double>98.6</double>
1334027
<boolean>
1334027
true (1) or false (0)
1334027
<boolean>1</boolean>
1334027
<string>
1334027
ASCII text
1334027
<string>Hello there</string>
1334027
<dateTime.iso8601>
1334027
Dates in ISO8601 format (YYYYMMDDTHH:MM:SS)
1334027
<dateTime.iso8601>
  20050701T16:31:22
</dateTime.iso8601>
1334027
<base64>
1334027
Binary information encoded in Base64
<base64>
  SGVsbG8sIFdvcmxkIQ==
</base64>
Chapter 9. XML and Web Services
Page 5
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

Data Type
1334027
Example
1334027
1334027
1334027
So much for simple types; what about complex types? Well , there are two complex types—arrays
and structs—which are made up of combined simple types. For example, an array may contain
numerous double or string values.
1334027
An array is indicated by an <array> element, which is just a list of <value> s contained in a
single <data> element. The following example could be a list of temperatures taken at a clinic:
1334027
      <value>
        <array>
          <data>
            <value><double>98.7</double></value>
            <value><double>99.3</double></value>
            <value><double>99.5</double></value>
            <value><double>97.9</double></value>
          </data>
        </array>
      </value>
There's no reason why your arrays can't contain mixed content, as in the following example, which
could constitute a record of an account balance at a certain time and date:
1334027
      <value>
        <array>
          <data>
            <value><double>100.30</double></value>
            <value><string>Thomas Myer</string></value>
            <value><int>34783773993</int></value>
            <value><dateTime.iso8601>20050701T16:31:22
</dateTime.iso8601></value>
          </data>
        </array>
      </value>
An XML-RPC struct is similar to an array, except it uses name-value pairs. These name-value pairs
are contained within <member> elements. Let's revisit our previous example and make clearer the
kind of data we're describing:
1334027
      <value>
        <struct>
          <member>
            <name>AccountOwner</name>
            <value><string>Thomas Myer</string></value>
          </member>
          <member>
            <name>AccountBalance</name>
            <value><double>100.30</double></value>
          </member>
          <member>
            <name>AccountNumber</name>
            <value><int>34783773993</int></value>
          </member>
          <member>
Chapter 9. XML and Web Services
Page 6
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

            <name>TimeStamp</name>
            <dateTime.iso8601>20050701T16:31:22</dateTime.iso8601>
          </member>
        </struct>
      </value>
Notice that it's not necessary to identify each of the <name> elements as a string—XML-RPC
assumes that.
1334027
9.2.2. XML-RPC Requests
672274
An XML-RPC  request is very simple: each request is a combination of HTTP headers and XML
content. The XML content is a single XML file whose root element is <methodCall>. This root
element contains two other elements, <methodName> and <params>. The <methodName>
element identifies the function to call, while the <params> element contains a list of <param>
elements that represent arguments or data passed to the function.
1334027
Here's a sample request that calls a getAccountBalance method. We pass in two parameters: an
account ID and a password for that account:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodCall>
  <methodName>getAccountBalance</methodName>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>accountid</name>
            <value><string>19393002011</string></value>
          </member>
          <member>
            <name>password</name>
            <value><string>fakepassword</string></value>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodCall>
The HTTP header  part of the request equation would look something like this:
1334027
POST /targetscript HTTP/1.1
User-Agent: identifier
Host: script.host.name
Content-Type: text/xml
Content-Length: request length in bytes
        
The sections shown in italics above will change from request to request, and from client to client.
For instance, if the script that listens for requests is located at http://services.example.com/
bankAccountRPC, then our headers might look like this:
Chapter 9. XML and Web Services
Page 7
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
POST /bankAccountRPC HTTP/1.1
User-Agent: xmlRPC-Client-1.0
Host: services.example.com
Content-Type: text/xml
Content-Length: 482
When we assemble the header and the XML content inside a standard HTTP POST , we get an
ordinary HTTP request with a standardized payload:
1334027
POST /bankAccountRPC HTTP/1.1
User-Agent: xmlRPC-Client-1.0
Host: services.example.com
Content-Type: text/xml
Content-Length: 482
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodCall>
  <methodName>getAccountBalance</methodName>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>accountid</name>
            <value><string>19393002011</string></value>
          </member>
          <member>
            <name>password</name>
            <value><string>fakepassword</string></value>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodCall>
Later in this chapter, we'll generate a request like this on-the-fly, so it's important to be fully aware
of the format required.
1334027
9.2.3. XML-RPC Responses
672274
There are two kinds of XML-RPC responses: the successful and the unsuccessful. The unsuccessful
responses are called faults . Faults vary from one implementation to another, but usually a fault
returns a struct that tells you where and why your code went wrong. For example, there might be
a problem on line 20 of your request, because no method exists to handle the request you sent in (a
common error if you happen to spell badly).
1334027
Here's how a fault might appear:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodResponse>
  <fault>
    <value>
      <struct>
Chapter 9. XML and Web Services
Page 8
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

        <member>
          <name>faultCode</name>
          <value>
            <int>20</int>
          </value>
        </member>
        <member>
          <name>faultString</name>
          <value>
            <string>No method exists by that name.</string>
          </value>
        </member>
      </struct>
    </value>
  </fault>
</methodResponse>
Successful XML-RPC responses also contain a <methodResponse> root element, but this time
it contains a <params> element. In the current version of XML-RPC, a response can contain only
one <param> child element of <params>, but that <param> can contain an <array> or
<struct>  to pass back multiple values if need be.
1334027
Here's an example response to our example request from the previous section. Notice that we use
a <struct> to return multiple pieces of information from the original request:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<methodResponse>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>AccountOwner</name>
            <value><string>Thomas Myer</string></value>
          </member>
          <member>
            <name>AccountBalance</name>
            <value><double>100.30</double></value>
          </member>
          <member>
            <name>AccountNumber</name>
            <value><int>34783773993</int></value>
          </member>
          <member>
            <name>TimeStamp</name>
            <dateTime.iso8601>20040701T16:31:22</dateTime.iso8601>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodResponse>
9.2.4. What do we Use to Process XML-RPC?
672274
XML-RPC is platform-independent  , so you can use ASP.NET, Perl, Python, JSP, and of course,
PHP to handle requests and send back responses. We will be building an XML-RPC Web Service
in the CMS section, and that's where we'll get into the nitty gritty PHP code.
Chapter 9. XML and Web Services
Page 9
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
First, though, let's take a brief walk through SOAP.
1334027
9.3. SOAP
661753
Like XML-RPC,  Simple Object Access Protocol (SOAP) uses a request-response paradigm to get
things done. It also uses HTTP as a transport mechanism. SOAP is also platform-independent and
is therefore ideal for allowing different systems to communicate.
1334027
But I'm afraid that's where the similarities end. SOAP is a much more robust environment for
handling heavy-duty requests. It is also much more complicated to use, though it is more extensible
than XML-RPC. SOAP allows for user-defined data types , the ability to specify the message
recipient, and some other features.
1334027
Since XML-RPC does everything we'll need in this book and more, we'll only pause for a high-
level overview of SOAP. To get a feel for it, let's revisit our simple weather service  , this time
using SOAP:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<env:Envelope
    xmlns:env="http://www.w3.org/2001/09/soap-envelope/">
  <env:Body>
    <w:getTempByZip
        xmlns:w="http://www.example.com/weather">
      <w:zip>78701</w:zip>
    </e:getTempByZip>
  </env:Body>
</env:Envelope>
A couple of things need to be addressed right away:
1334027
• SOAP is structurally and syntactically more complex than XML-RPC. It uses XML namespaces  and can even use XML schemas (a
complex successor to DTDs).
• A SOAP request consists of at least two structural elements: an <Envelope> and a <Body>. The <Envelope> contains the
<Body>, and the <Body> contains your request.
• Apart from that, the request still just identifies a method and provides a list of parameters that gets passed to the Web Service.
As with XML-RPC, a SOAP request begets a response. Let's take a look at what a really simple
response to our request looks like:
1334027
<?xml version="1.0" encoding="ISO-8859-1"?>
<env:Envelope
    xmlns:env="http://www.w3.org/2001/09/soap-envelope/">
  <env:Body>
    <w:getTemperatureResponse
        xmlns:w="http://www.example.com/weather">
      <w:temp>98</w:temp>
Chapter 9. XML and Web Services
Page 10
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

    </w:getTemperatureResponse>
  </env:Body>
</env:Envelope>
In our example response, we get back a single integer to indicate the temperature at the given ZIP
code. Again, the syntax is more complicated than XML-RPC, but the structure is easy to understand:
send in a request, get back a response.
1334027
9.3.1. What we Haven't Covered
672274
There's a lot that we haven't covered here about SOAP; in fact, the examples we've just seen barely
scratch the surface. Not only is SOAP itself replete with syntactically obscure ways of identifying
data types, handling errors, tracking multi-request transactions and more, but related standards for
locating and describing SOAP Web Services also exist, each with their own complexities.
1334027
Practically speaking, SOAP and it's associated standards were designed for automated tools to
generate and process, with higher-level APIs masking the details from developers like you and me.
1334027
That said, if you want to learn more about SOAP, take a look at some of the following resources:
1334027
• SOAP specifications at W3C :
http://www.w3.org/TR/soap/
• Web Services Demystified, an article by Kevin Yank:
http://www.sitepoint.com/article/web-services-demystified
• SOAP Tutorial at W3Schools.com:
http://www.w3schools.com/soap/default.asp
9.4. Our CMS Project
661753
In   this section, we're going to create an XML-RPC server and client for use with our CMS. Our
first XML-RPC script will be very simple indeed—it will only return a count of live articles on the
system. Our other scripts will be more sophisticated, allowing us to search for and retrieve links to
articles in the system.
1334027
Before we get started, I have to warn you that the PHP XML-RPC functions aren't necessarily a
joy to use, but they provide a solid base from which to create your own XML-RPC-based Web
Services.
1334027
Chapter 9. XML and Web Services
Page 11
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

9.4.1. Building an XML-RPC Server
672274
PHP  comes with an optional extension for writing and consuming XML-RPC services. This
extension isn't enabled by default; you'll need to compile it using --with-xmlrpc on Unix-style
installations, or add the php_xmlrpc.dll file to your php.ini file on Windows.[1]
1334027
[1] If reconfiguring PHP isn't an option for you, an alternative is to use the XML-RPC package in PEAR .
PHP's XML-RPC extension has several functions that deal with servers, the most important being:
1334027
xmlrpc_server_create
Tells PHP to create a new server.
xmlrpc_server_register_method
Registers a PHP function with the XML-RPC client, making it available to requesting clients as a method.
xmlrpc_server_call_method
Passes a client request to the server and sends the server's response back to the client.
xmlrpc_server_destroy
Frees up memory used by an XML-RPC server.
Let's get started!
1334027
9.4.2.1. Your First XML-RPC Method
661753
The first thing we need to do is define and register the functions we want to expose as XML-RPC
methods. This will allow XML-RPC clients to make requests and get back meaningful responses.
1334027
For our XML-RPC server, we want to provide functionality around the articles on our Website.
The first method we want to create provides a raw count of live articles available on the site  . Let's
start by building the PHP function that will support this method.
1334027
Every function that will be registered as an XML-RPC method must take three arguments, in this
order:
1334027
1. The name of the XML-RPC method requested (not necessarily the same name as the function that handles the request).
2. An array containing the arguments passed with the request.
3. Any data sent in the appData parameter of the xmlrpc_server_call_method (more about this in a moment).
Here's our first function, called getCountArticles:
1334027
Chapter 9. XML and Web Services
Page 12
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

rpcserver.php (excerpt)
function getCountArticles($methodName, $params, $appData) {
  global $fileDir;
  $count = 0;
  $handle = opendir($fileDir);
  while (($file = readdir($handle) !== FALSE) {
    if (is_dir($fileDir . $file)) continue;
    if (!eregi('^article.*\.xml$', $file)) continue;
    
    $xmlItem = simplexml_load_file($fileDir . $file);
    if ((string)$xmlItem->status == 'live') {
      $count++;
    }
  }
  return $count;
}
Once we have this basic function created , we have to register it as a method with XML-RPC to
make it available for client requests. To register a method, you must first create an XML-RPC server
using xmlrpc_server_create , and then call the xmlrpc_server_register_method function with three
arguments:
1334027
• The handle of the server created with xmlrpc_server_create.
• The name to register the method under (i.e., what needs to be in the <methodName> of a request for this method).
• The name of the PHP function that will handle requests for this method.
The following code shows how to register our function as an XML-RPC method. Notice that, for
simplicity's sake, we've made the XML-RPC method's name the same as the PHP function's name.
1334027
rpcserver.php (excerpt)
$xmlRpcServer = xmlrpc_server_create();
xmlrpc_server_register_method($xmlRpcServer, 'getCountArticles',
    'getCountArticles');
9.4.2.2. Creating a Search Method
661753
Now  that we have our first, very rudimentary XML-RPC method, let's create a second, more
complex one that will allow us to search for articles in the system. This function will be very similar
to the search engine we implemented in Chapter 5. The only real difference is that it will get its
search term from the $params array.
1334027
Chapter 9. XML and Web Services
Page 13
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

rpcserver.php (excerpt)
function searchArticles($methodName, $params, $appData) {
  global $fileDir;
  $term = $params[0];
  $handle = opendir($fileDir);
  $items = array();
  while (($file = readdir($handle)) !== FALSE) {
    if (is_dir($fileDir . $file)) continue;  
    if (!eregi("^article.*\.xml$", $file)) continue;
    $xmlItem = simplexml_load_file($fileDir . $file);
    if ((stripos($xmlItem->keywords, $term) !== FALSE or
        stripos($xmlItem->headline, $term) !== FALSE or
        stripos($xmlItem->description, $term) !== FALSE) and
        (string)$xmlItem->status == 'live') {
      $item = array();
      $item['id'] = (string)$xmlItem['id'];
      $item['headline'] = (string)$xmlItem->headline;
      $items[] = $item;
    }
  }
  return $items;
}
As before, the script uses SimpleXML to grab the information we want and return a series of
headlines and unique document IDs to the client.
1334027
Of course, we also have to register our new function :
1334027
rpcserver.php (excerpt)
xmlrpc_server_register_method($xmlRpcServer, 'searchArticles',
    'searchArticles');
9.4.2.3. Processing a Request
661753
Now that you've created a method and registered it with an XML-RPC server, you have to process
an incoming request. To do this, you have first to capture the incoming HTTP POST  data, which
contains the request:
1334027
rpcserver.php (excerpt)
$requestXml = @$HTTP_RAW_POST_DATA;
Now hand the request to the xmlrpc_server_call_method  function, which identifies the method
that was called, extracts any arguments, then dispatches it to the function you registered:
1334027
Chapter 9. XML and Web Services
Page 14
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

rpcserver.php (excerpt)
$response =
    xmlrpc_server_call_method($xmlRpcServer, $requestXml, '');
Finally, let's send the XML response back to the client:
1334027
rpcserver.php (excerpt)
header('content-type: text/xml');
echo $response;
Once you've printed a response for the client, you can free up your resources using the
xmlrpc_server_destroy function:
1334027
rpcserver.php (excerpt)
xmlrpc_server_destroy($xmlRpcServer);
9.4.2.4. The Finished XML-RPC Server Script
661753
Here's the finished script:
1334027
rpcserver.php
<?php
include_once 'common.inc.php';
$xmlRpcServer = xmlrpc_server_create();
xmlrpc_server_register_method($xmlRpcServer, 'getCountArticles',
    'getCountArticles');
xmlrpc_server_register_method($xmlRpcServer, 'searchArticles',
    'searchArticles');
$requestXml = $HTTP_RAW_POST_DATA;
$response = xmlrpc_server_call_method($xmlRpcServer, $requestXml,
    '');
header('content-type: text/xml');
echo $response;
xmlrpc_server_destroy($xmlRpcServer);
function getCountArticles($methodName, $params, $appData) {
  global $fileDir;
  $count = 0;
  $handle = opendir($fileDir);
  while (($file = readdir($handle) !== FALSE)) {
    if (is_dir($fileDir . $file)) continue;
    if (!eregi('^article.*\.xml$', $file)) continue;
Chapter 9. XML and Web Services
Page 15
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

    
    $xmlItem = simplexml_load_file($fileDir . $file);
    if ((string)$xmlItem->status == 'live') {
      $count++;
    }
  }
  return $count;
}
function searchArticles($methodName, $params, $appData) {
  global $fileDir;
  $term = $params[0];
  $handle = opendir($fileDir);
  $items = array();
  while (($file = readdir($handle)) !== FALSE) {
    if (is_dir($fileDir . $file)) continue;  
    if (!eregi("^article.*\.xml$", $file)) continue;
    $xmlItem = simplexml_load_file($fileDir . $file);
    if ((stripos($xmlItem->keywords, $term) !== FALSE or
        stripos($xmlItem->headline, $term) !== FALSE or
        stripos($xmlItem->description, $term) !== FALSE) and
        (string)$xmlItem->status == 'live') {
      $item = array();
      $item['id'] = (string)$xmlItem['id'];
      $item['headline'] = (string)$xmlItem->headline;
      $items[] = $item;
    }
  }
  return $items;
}
?>
9.4.2. Building an XML-RPC Client that Counts Articles
672274
Now    that we have a server, it's time to create a client. However, I've got some bad news: the
XML-RPC extension for PHP doesn't make HTTP requests by itself. However, it does come with
some very handy include files  that allow you to create clients very easily.
1334027
First, you'll have to download the XML-RPC EPI PHP extension PHP source package from http://
xmlrpc-epi.sourceforge.net/. Click the Downloads link on that site and grab the latest version of
the xmlrpc-epi-php package (0.51 as of this writing). Extract the file and copy the contents of
the /sample/utils directory (including utils.php) into a directory in your PHP include_path. In
the next couple of examples, I'll assume you've placed in your include_path a directory named
xmlrpc_utils containing these files. I've included these files in the code archive for your
convenience.
1334027
Once we have the necessary library files installed, we can make short work of the client. The
function that does all the work when we call our methods is xu_rpc_http_concise . This function
is defined in the xmlrpc_utils/utils.php file that's now located in our PHP include_path.
1334027
Let's get on with the example. The first thing we have to do in our client script is include the XML-
RPC utility library:
Chapter 9. XML and Web Services
Page 16
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

1334027
rpcclient-count.php (excerpt)
<?php
error_reporting(E_ALL ^ E_NOTICE);
include_once 'xmlrpc_utils/utils.php';
Note that I've disabled reporting of notice-level errors at the top of this script, as the utils.php file
produces several of these.
1334027
Next, set three variables, $server, $port, and $uri, to point to your server, the port on which
the server is listening, and the location of the XML-RPC server script you set up, respectively.
You'll be using these variables soon.
1334027
rpcclient-count.php (excerpt)
$host = 'www.example.com'; // or 'localhost' for local machine
$port = 80;
$uri = '/rpcserver.php'; // or URI of the XML-RPC server
Now it's time to use the xu_rpc_http_concise function provided by the utils.php library to send a
request and get a response. This method takes one argument, a PHP associative array that contains
the following elements in order :
1334027
• The name of the method to call
• The host
• The URI of the XML-RPC server
• The port number
The result of the request is returned as an ordinary value that you can then manipulate or print.
1334027
rpcclient-count.php (excerpt)
$result = xu_rpc_http_concise(
    array(
        'method' => 'getCountArticles',
        'host' => $host,
        'uri' => $uri,
        'port' => $port
    )
);
header('content-type: text/plain');
echo 'The number of articles on server ' . $host . ' is ' .
    $result . '.';
?>
Chapter 9. XML and Web Services
Page 17
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

When this is run, it should print something like:
1334027
The number of articles on server www.example.com is 12.
Tip: If you have any trouble getting an XML-RPC request to work, you can ask xu_rpc_http_concise to display
debugging information. To do this, simply add a 'debug' parameter to the array you pass to the function:
9.4.3.5. The Entire XML-RPC Client
661753
rpcclient-count.php
<?php
include_once 'xmlrpc_utils/utils.php';
$host = 'www.example.com'; // 'localhost' for the local machine
$port = 80;
$uri = '/rpcserver.php'; // or URI of the XML-RPC server
$result = xu_rpc_http_concise(
    array(
        'method' => 'getCountArticles',
        'host' => $host,
        'uri' => $uri,
        'port' => $port
    )
);
header('content-type: text/plain');
echo 'The number of articles on server ' . $host . ' is ' .
    $result . '.';
?>
9.4.3. Building an XML-RPC Client that Searches Articles
672274
Okay    , we've written a script to invoke the simpler of our two XML-RPC methods, accessing the
number of live articles on the site. Now, let's build a client that will run a search. As before, we'll
need to include our XML-RPC utility library, and set variables for host, port, and URI.
1334027
We also need to add a variable that will contain our search term, which we'll likely get from a
request variable:
1334027
Chapter 9. XML and Web Services
Page 18
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

rpcclient-search.php (excerpt)
include 'xmlrpc_utils/utils.php';
$host = 'www.example.com'; // 'localhost' for the local machine
$port = 80;
$uri = '/rpcserver.php'; // or URI of the XML-RPC server
$term = $_REQUEST['searchterm'];
Next, we send over our request with xu_rpc_http_concise . Notice that our search term becomes
the value associated with the args key.
1334027
rpcclient-search.php (excerpt)
$result = xu_rpc_http_concise(
    array(
        'method' => 'searchArticles',
        'args' => $term,
        'host' => $host,
        'uri' => $uri,
        'port' => $port
    )
);
This time, the response will be an array , so we'll need to do some processing to display the result
of the search:
1334027
rpcclient-search.php (excerpt)
foreach ($result as $article) {
  echo '<p>' . $article['headline'] . '<br />';
  echo '<a href="http://' . $host . '/innerpage.php?id=' .
      htmlentities($article['id']) . '">Read content</a></p>';
}
9.4.4.6. The Entire XML-RPC Client
661753
Run this code by passing a searchterm variable in the URL (e.g. http://www.example.com/
rpcclient-search.php?searchterm=xml), and you should receive a list of results with links to the full
articles in return.
1334027
rpcclient-search.php
Chapter 9. XML and Web Services
Page 19
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

<?php
include_once 'xmlrpc_utils/utils.php';
$host = 'www.example.com'; //  'localhost' for the local machine
$port = 80;
$uri = '/rpcserver.php'; // or URI of the XML-RPC server
$term = $_REQUEST['searchterm'];
$result = xu_rpc_http_concise(
    array(
        'method' => 'searchArticles',
        'args' => $term,
        'host' => $host,
        'uri' => $uri,
        'port' => $port
    )
);
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Search Results</title>
<meta http-equiv="content-type"
    content="text/html; charset=iso-8859-1" />
</head>
<body>
<?php
foreach ($result as $article) {
  echo '<p>' . $article['headline'] . '<br />';
  echo '<a href="http://' . $host . '/innerpage.php?id=' .
      htmlentities($article['id']) . '">Read content</a></p>';
}
?>
</body>
</html>
9.5. Summary
661753
In this chapter, we took a whirlwind look at the modern phenomena that are Web Services. Given
the amount of hype this technology gets, I'll forgive you if you were underwhelmed by the reality.
From the developer's perspective, XML-RPC is truly a simple technology.
1334027
To be fair, we looked at Web Services only within the context of PHP scripting. When Web Services
get really exciting is when a program or script in one language can exploit functionality provided
by a program or script written in another language. If you want to get a feel for this, spend some
time browsing around for an XML-RPC service or two that would be useful on your site, and see
how easy it is to call this service in your own PHP code.
1334027
Chapter 9. XML and Web Services
Page 20
Return to Table of Contents
Chapter 9. XML and Web Services
No Nonsense XML Web Development With PHP By Thomas Myer ISBN: 097524020X Publisher: SitePoint
Prepared for Matias Eli Sie, Safari ID: el.matia@gmail.com
Print Publication Date: 7/1/2005
User number: 672274 Copyright 2006, Safari Books Online, LLC.
Reproduction, transmission and/or redistribution in any form by any means without the prior written permission from the publisher is prohibited.

