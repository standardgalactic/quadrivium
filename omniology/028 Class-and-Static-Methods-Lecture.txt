©2019 MathByte Academy

Class Methods
When we define a function in a class
à how we call it will alter behavior
class MyClass:
def hello():
return 'Hello'
MyClass.hello à just a plain function defined in MyClass
MyClass.hello() à Hello
m = MyClass()
m.hello
à method bound to object m
m.hello() à TypeError (missing argument)
Can we create a function in a class that will always be bound to the class, and never the instance?
à instance method
à @classmethod
MyClass.fn à method bound to MyClass
m.fn à method bound to MyClass
©2019 MathByte Academy

Class Methods
class MyClass:
def hello():
print('hello…')
def inst_hello(self):
print(f'hello from {self}')
@classmethod
def cls_hello(cls):
print(f'hello from {cls}') 
hello
inst_hello
cls_hello
MyClass
Instance
à call will fail!
regular function
regular function
method bound to class
method bound to instance
method bound to class
by default, any 
function defined in a 
class will be handled 
as a bound method 
when called from an 
instance
method bound to instance
©2019 MathByte Academy

Static Methods
So can we define a function in a class that will never be bound to any object when called?
à Yes!
à in Python, those are called static methods
à @staticmethod
class Circle:
@staticmethod
def help():
return 'help available'
Circle.help()
à help available
c = Circle()
c.help()
à help available
type(Circle.help) à function
type(c.help) à function
©2019 MathByte Academy

class MyClass:
def inst_hello(self):
print(f'hello from {self}')
@classmethod
def cls_hello(cls):
print(f'hello from {cls}') 
@staticmethod
def static_hello():
print('static hello')
Recap
function bound to instance when called from 
instance - will receive instance as first 
parameter
function bound to class when called from 
either the class or the instance - will receive the 
class (MyClass) as first parameter
static method is never bound to anything –
receives no extra argument no matter how it is 
called
©2019 MathByte Academy

Why use static methods?
à cases where it makes sense for a function to live in a class
à but does not need access to either the instance or the class state
Timer
start(self)
à instance method
end(self)
à instance method
timezone
à class attribute
current_time_utc()
à static method
current_time(cls)
à class method (needs class time zone)
à allows us to modify time zone for all instances
©2019 MathByte Academy

Coding
©2019 MathByte Academy

