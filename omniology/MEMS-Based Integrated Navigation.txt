
MEMS-Based 
Integrated Navigation

For a listing of recent titles in the Artech House 
GNSS Technology and Application Series, 
please turn to the back of this book.

MEMS-Based 
Integrated Navigation
Priyanka Aggarwal
Zainab Syed
Aboelmagd Noureldin
Naser El-Sheimy
artechhouse.com

Library of Congress Cataloging-in-Publication Data
A catalog record for this book is available from the U.S. Library of Congress.
British Library Cataloguing in Publication Data
A catalogue record for this book is available from the British Library.
ISBN-13: 978-1-60807-043-5
Cover design by Vicki Kane
© 2010 Artech House
685 Canton Street
Norwood, MA 02062
All rights reserved. Printed and bound in the United States of America. No part of this book 
may be reproduced or utilized in any form or by any means, electronic or mechanical, including 
photocopying, recording, or by any information storage and retrieval system, without permis­
sion in writing from the publisher.
    All terms mentioned in this book that are known to be trademarks or service marks have 
been appropriately capitalized. Artech House cannot attest to the accuracy of this information. 
Use of a term in this book should not be regarded as affecting the validity of any trademark 
or service mark.
10 9 8 7 6 5 4 3 2 1

v
Contents
	
Preface	
xi
Microelectromechanical Systems (MEMS) 	
1	
1
1.1	 Introduction	
1
1.2	 Different Applications of MEMS Devices	
3
1.2.1   Electric Wheelchairs	
3
1.2.2   Personnel Tracking and Navigation	
3
1.2.3   Agriculture	
4
1.2.4   Event Data Recorder	
4
1.2.5   Wildlife and Livestock Tracking	
5
1.2.6   Patient Monitoring	
5
1.2.7   Electronic Stability Control	
6
1.2.8   Supplemental/Secondary Restraint System	
6
1.2.9   Land Vehicle Navigation	
6
1.3	 Aided MEMS-Based Inertial Navigation	
7
1.3.1   Aiding Sources in Coordinate Domain	
7
1.3.2   Aiding Sources in Velocity Domain	
10
1.3.3   Aiding Sources in Attitude Domain	
11
	
References	
12
MEMS Inertial Sensors	
1
2	
5
2.1	 Introduction	
15
2.2	 Accelerometers	
16
2.2.1   Working Principle for MEMS Accelerometers	
17
2.2.2   Classifications of Accelerometers	
19

vi	
MEMS-Based Integrated Navigation
2.3	 Gyroscopes	
21
2.3.1   Principle of MEMS Gyroscopes	
21
2.3.2   Classification of MEMS Gyroscopes	
22
2.4	 MEMS Inertial Sensors for the Most Economical 
Land Navigation	
24
2.5	 Method to Compute Minimum Sensors	
26
2.6	 Results and Analysis	
29
2.6.1   Drift Errors Without NHC	
29
2.6.2   Drift Errors with NHC	
31
	
References	
32
MEMS Inertial Sensors Errors	
3
3	
5
3.1	 Introduction	
35
3.2	 Systematic Errors	
36
3.2.1   Bias	
37
3.2.2   Input Sensitivity or Scale Factor	
38
3.2.3   Nonorthogonality/Misalignment Errors	
39
3.2.4   Run-to-Run (Repeatability) Bias/Scale Factor	
41
3.2.5   In Run (Stability) Bias/Scale Factor	
42
3.2.6   Temperature-Dependent Bias/Scale Factor	
43
3.3	 Calibration of Systematic Sensor Errors	
43
3.3.1   6-Position Static Test	
44
3.3.2   Angular Rate Test	
45
3.3.3   Thermal Calibration Test	
46
3.4	 Random/Stochastic Errors	
53
3.4.1   Examples of Random Processes	
53
3.5	 Stochastic Modeling	
57
3.5.1   Autocorrelation Function	
58
3.5.2   Allan Variance Methodology	
58

	
Contents	
vii
3.6	 Sensors Measurement Models	
60
3.6.1   Accelerometer Measurement Model	
61
3.6.2   Gyroscope Measurement Model	
61
	
References	
62
Initial Alignment of MEMS Sensors	
6
4	
3
4.1	 Introduction	
63
4.2	 Considerations for MEMS Sensor Navigation	
65
4.3	 Portable Navigation System	
66
4.4	 Economical Considerations	
68
4.4.1   Economically Desirable Configuration	
68
4.4.2   Complete Six DOF IMU—Economically Less Desirable	 74
4.5	 Absolute Alignment	
77
4.5.1   Static Alignment for MEMS Sensors	
77
4.5.2   Static Alignment Example	
78
4.6	 Velocity Matching Alignment	
79
4.6.1   GPS Derived Heading Example 	
80
4.7	 Transfer Alignment	
80
	
References	
81
Navigation Equations	
8
5	
3
5.1	 Introduction—Mathematical Relations and 
Transformations Between Frames	
84
5.1.1   e-Frame to i-Frame	
84
5.1.2   ENU l-Frame to e-Frame	
85
5.1.3   NED l-Frame to e-Frame	
87
5.1.4   b-Frame to ENU l-Frame	
88
5.1.5   b-Frame to NED l-Frame	
89

viii	
MEMS-Based Integrated Navigation
5.2	 Motion Modeling in the l-Frame	
90
5.2.1   ENU Realization	
90
5.2.2   NED Realization	
95
5.3	 Solving Mechanization Equations	
96
5.3.1   Classical Method	
96
5.3.2   Half-Interval Method	
97
	
References	
97
Aiding MEMS-Based INS	
9
6	
9
6.1	 Introduction	
99
6.1.1   Loosely Coupled Mode of Integration	
101
6.1.2   Tightly Coupled Integration	
101
6.2	 Introduction to Kalman Filter	
102
6.2.1   Dynamic Model	
103
6.2.2   Measurement Model	
105
6.3	 Kalman Filter Algorithm	
105
6.3.1   The Prediction Stage	
105
6.3.2   The Update Stage	
106
6.4	 Introduction to Extended Kalman Filter	
106
6.4.1   Linearization	
107
6.4.2   EKF Limitations	
110
	
References	
112
Artificial Neural Networks	
11
7	
5
7.1	 Introduction	
115
7.2	 Types of ANNs	
117
7.2.1   Multilayer Perception Neural Network (MLPNN)	
118
7.2.2   Radial Basis Function Neural Network (RBFNN)	
120
7.2.3   Adaptive Neuro Fuzzy Inference System (ANFIS)	
124

	
Contents	
ix
7.3	 Whole Navigation States Architecture	
126
7.3.1   Example of Position Update Architecture	
127
7.3.2   Example of Position and Velocity Update Architecture	
128
7.4	 Navigation Error States Architecture	
128
7.4.1   Architecture for INS/GPS Integration	
130
7.4.2   System Implementation	
132
7.4.3   The Combined P – δP and V – δV Architecture for I
NS/GPS Integration	
133
7.4.4   ANN/KF Augmented Module for INS/GPS Integration	 135
	
References	
137
Particle Filters	
13
8	
9
8.1	 Introduction	
139
8.2	 The Monte Carlo Principle	
144
8.3	 Importance Sampling Method	
144
8.4	 Resampling Methods	
146
8.4.1   Simple Random Resampling	
148
8.4.2   Systematic Resampling (SR)	
148
8.4.3   Stratified Resampling	
149
8.4.4   Residual Resampling	
149
8.5	 Basic Particle Filters	
149
8.6	 Types of Particle Filters	
150
8.6.1   Extended Particle Filter (EPF) and 
Unscented Particle (UPF) Filters	
150
8.6.2   Rao-Blackwellized Particle Filter (RBPF)	
156
8.6.3   Likelihood Particle Filter (LPF)	
156
8.6.4   Regularized Particle Filter (RPF)	
157
8.6.5   Gaussian Particle Filter (GPE) and Gaussian Sum 
Particle Filter (GSPF)	
157
8.7	 Hybrid Extended Particle Filter	
158

x	
MEMS-Based Integrated Navigation
8.7.1   Zero Velocity Condition Detection Algorithm	
159
8.7.2   Algorithm of the Hybrid Extended Particle Filter	
160
8.7.3   HEPF Results	
162
8.7.4   Partial Sensor Configuration	
167
	
References	
169
	
Appendix: Linearization Process for the EKF  
for Low-Cost Navigation	
173
A.1	 System Model for Loosely Coupled Approach	
173
A.1.1   Attitude Errors 	
174
A.1.2   Velocity Linearization	
175
A.1.3   Position Linearization	
177
A.1.4   Sensor Errors	
177
A.2	 GPS Measurement Model	
178
A.3	 System Model for the Tightly Coupled Approach	
178
A.4	 The Update Stage	
183
A.5	 Pseudorange and Doppler Corrections	
184
	
References	
184
	
About the Authors	
187
	
Index	
189

xi
Preface
Microelectromechanical systems (MEMS) are an emerging technology that 
has the potential for a multitude of uses. The sensors are low cost, low power 
consuming, and easily available. MEMS inertial sensors have introduced a 
new concept of affordability to inertial positioning and navigation, which 
have always been dedicated for special applications due to the extremely high 
system cost and a very bulky system design. The new MEMS inertial naviga­
tion is unique and challenging in different aspects, but is readily available in 
today’s market. This low-cost navigation technology has remained a secret for 
a long time, and little is known about it in the public domain that created a 
void in the well-established literature of navigation. As a result, there is a need 
to cover the new MEMS-based inertial navigation. Throughout the book, the 
authors aim to provide a balance between the theory that is mostly unique to 
this type of navigation and the actual field results to fill the existing void in 
the current literature. The book also covers very special topics that are only 
relevant to MEMS-based inertial navigation, which are of great importance to 
the commercial sector. These topics include minimizing costs by using different 
forms of aiding or removing inertial sensors.
Dr. Priyanka Aggarwal and I discovered the absence of comprehensive 
reference for MEMS-based inertial navigation during our time as Ph.D. candi­
dates with the Mobile Multi-Sensors (MMSS) research group at the University 
of Calgary. Founded and led by Dr. Naser El-Sheimy, the MMSS research 
group is an internationally known cutting-edge research group in the field of 
navigation and photogrammetry using very low-cost MEMS-based sensors. 
Like the rest of the authors, we were also involved in publications, and at every 
publication we faced the same challenge of finding at least one textbook that 
covers some of the specialized MEMS-based navigation topics. Our problem 
went from bad to worse when we were asked by the referees to find journal 
references that were not produced by our own research group. There came a 
time that one of our joint publications was rejected because we couldn’t find 
strong references for MEMS-based inertial navigation in terms of books or 
journal papers. That became the turning point.

xii	
MEMS-Based Integrated Navigation
Under extreme frustration, we decided that we need a book on this 
topic. The next stage was to find a comprehensive list of such topics. Our first 
thought was to take Dr. El-Sheimy’s notes and convert them into a book; those 
notes used to be our source of general reference. However, as we started this 
journey, we quickly realized that we had to move our focus beyond the course 
notes and include topics that were either too difficult to find, too difficult to 
comprehend, or just simply not there. During this process, we also realized the 
importance of having examples from real field tests. To cut a long story short, 
almost 8 months after working on this book, we had all the unique materials 
for the book, but it was random in nature. Fortunately, by this time it was 
December of 2008 and I was done with my Ph.D. defense. That left me with 
almost one month for writing before the commencement of my new job with 
Trusted Positioning Inc. I spent most of December on the most important 
part of writing this book, which was arranging every chapter and working 
on the chapters’ flow as per recommendations from Dr. El-Sheimy and Dr. 
Aboelmagd Noureldin.
The book that we have today is a combined effort of all of the authors. 
Dr. Noureldin had the difficult task of going through the material, editing 
it, and ensuring that it is theoretically and logically sound. Additionally, Dr. 
Noureldin wrote Chapter 7 “Artificial Neural Networks,” to cover artificial 
intelligence techniques for MEMS-based navigation. Dr. El-Sheimy provided 
us with the valuable advice from his unsurpassed experience in MEMS-based 
inertial navigation in addition to supplying us with his course notes that we 
incorporated in different chapters. Chapters 1, 3, and 8 were written by Dr. 
Aggarwal. As for Chapter 2, it contains material from Dr. El-Sheimy’s notes 
and both of us compiled and incorporated additional sections to it. I wrote 
Chapters 4 through 6 with editing work by Dr. Noureldin. As Priyanka and 
I moved on to different paths, it became increasingly difficult to combine our 
resources, and this introduced the need for someone who could help in the 
book formatting, front matter, and so forth. It was a tedious task and I found 
the help from my loving husband, Najmy.
We have made every effort to write the book in a way that enables the 
reader to establish the knowledge and expertise of calibrating and processing 
MEMS inertial sensors, modeling their measurement errors, and integrating 
them with GPS. This book requires a reader with enough knowledge and 
understanding of integrated navigation systems to be able implement the 
algorithms and methods provided herein.
It would not be possible to complete this text without the help of many 
people, whom we thank greatly. Ms. Heather Joyce Maki went through the 
whole book to ensure that it was grammatically sound. We realize that this 

	
Preface	
xiii
was not an easy task but she did it for us with so much devotion that we are 
indebted for her tremendous favor. A special thanks also goes to Namrata 
Khemka for helping Dr. Aggarwal in reviewing the book. Among the teachers 
and mentors, Dr. Aggarwal and I acknowledge Dr. Xiaoji Niu for his guid­
ance. Last, but not least, we would like to recognize the work done by Dr. 
Eun-Hwan Shin for the MMSS research group that was the starting point of 
all our work at MMSS.
The authors will be grateful to the readers who offer ideas for improve­
ments or point out any errors or omissions in the book.
	
Zainab Syed
	
Calgary, Alberta, Canada
	
August 2010


1
1
Microelectromechanical Systems 
(MEMS)
Introduction
1.1   
Microelectromechanical systems (MEMS) are the integration of mechanical 
elements, sensors, actuators, and electronics on a common substrate. MEMS 
bring together silicon-based microelectronics and micromachining technolo­
gies on a common platform [1, 2]. MEMS sensors gather information about 
the environment by measuring mechanical, thermal, biological, chemical, 
optical, and magnetic phenomena. The electronics then process the infor­
mation derived from the sensors and through a decision-making capability 
direct the actuators to respond by moving, positioning, regulating, pumping, 
and filtering, thereby controlling the environment for some desired outcome 
or purpose [3]. MEMS are miniaturized, low-cost, low-power, silicon-based 
sensors. Since they are compact and not a classified product, these sensors are 
becoming popular in consumer-grade navigation systems. MEMS technol­
ogy represents a progressive area of the electrical, mechanical, biomedical, 
aviation, and automotive industries. These devices allow the replacement of 
conventional bulky mechanical devices at a fraction of the cost, with enhanced 
durability, mass-production capability, and lower power consumption [1, 3]. 
Market analysis reports that the MEMS market grew by 9%, bringing in an 
impressive $7 billion in sales in 2007, and the automotive industry continues 
to drive the MEMS market [4].
MEMS sensors-based inertial navigation provides the positioning infor­
mation when the most commonly used Global Positioning System (GPS) 
is lacking. Whether it is finding the attitude information to complete the 
navigation solution, or bridging short GPS outages, the MEMS sensors are 

2	
MEMS-Based Integrated Navigation
proving their ultimate worth in the newly emerging seamless navigation field. 
Furthermore, MEMS gyroscopes (or gyros) have the potential to add value 
to consumer electronics devices by providing image stabilization, pedestrian 
navigation, and improved user interfaces. Moreover, MEMS inertial sensors 
are now being used in many other applications.
In May 2006, Nintendo and Analog Devices announced the incorpora­
tion of Analog Devices’ ADXL330 iMEMS accelerometer into Nintendo’s Wii 
console [5]. The accelerometer helped Nintendo raise video gaming to a new 
level. Similarly, Apple’s iPhone uses an STMicroelectronics accelerometer to 
sense whether the iPhone is in a portrait or landscape position and the iPhone 
rotates the screen automatically.
MEMS technology
1.1
Applications
1.2
Electric
wheelchair
1.2.1
Personnel/
asset tracking
1.2.2
Agriculture
1.2.3
Event data
recorder
1.2.4
tracking
1.2.5
Patient monitoring
1.2.6
Stability
control
1.2.7
Vehicle navigation
1.2.9
Coordinate domain aiding
1.3.1
Velocity domain aiding
1.3.2
Attitude domain aiding
1.3.3
Applications
1.2
Electric
wheelchair
1.2.1
Personnel/
asset tracking
1.2.2
Agriculture
1.2.3
Event data
recorder
1.2.4
tracking
1.2.5
Patient monitoring
1.2.6
Stability
control
1.2.7
Vehicle navigation
1.2.9
Coordinate domain aiding
1.3.1
Velocity domain aiding
1.3.2
Attitude domain aiding
1.3.3
Wildlife/livestock
Secondary
restraint system
1.2.8
Aided navigation
1.3
Figure 1.1  Flowchart of Chapter 1.

	
Microelectromechanical Systems (MEMS)	
3
The applications for MEMS sensors do not stop with the examples 
provided above. With these sensors’ three desirable features (i.e., low cost, 
low power, and small size), the applications are endless. An organization chart 
for Chapter 1 is provided in Figure 1.1 to demonstrate the basic structure of 
this chapter. This chapter briefly illustrates different application areas with 
emphasis on vehicle navigation applications. Different aiding sources for the 
inertial sensors navigation are also discussed to give users an overview of the 
organization of this book.
Different Applications of MEMS Devices
1.2   
MEMS is an enabling technology with a massive global market volume. It 
is worth $12 billion in sales in 2004 and is expected to reach $25 billion in 
2009 [6]. A small portion of this MEMS market will support inertial sensor 
technology. There are many different areas where inertial MEMS-grade sensors 
have been successfully applied to improve the quality of human life. 
Electric Wheelchairs
1.2.1   
Electric wheelchairs are important tools that aid in the mobility of disabled and 
elderly individuals [7, 8]. For elderly individuals, an intelligent wheelchair must 
be user independent and should assure collision-free travel, aid the performance 
of specific tasks (i.e., passing through doorways), and autonomously transport 
the user between locations. A smart wheelchair typically consists of a standard 
power wheelchair base to which a computer and a collection of sensors like 
inertial, vision, and so forth have been added, along with a seat placed over the 
base. The inertial sensors-based assistive wheelchair navigation system employs 
different operating modes and has the capability of automatically adapting the 
system based on human behavior.
Personnel Tracking and Navigation
1.2.2   
Personnel tracking is an area where MEMS-based inertial sensors are becom­
ing more and more popular. The inertial sensors provide important position­
ing information about personnel in GPS-denied environments [9, 10]. For 
example, tracking firefighters inside a building is not possible with GPS-only 
navigation. There are systems that are targeted towards the safety of the firefight­
ers that contain accelerometers, gyroscopes, and other dead-reckoning sensors. 

4	
MEMS-Based Integrated Navigation
The use of such MEMS-based systems is also becoming an integral part in 
army personnel tracking systems. The most vital requirement for sensor-based 
navigation is the orientation of the sensors with respect to a known reference 
frame [11], which is achieved by embedding the sensors in either the shoes or 
helmets of the personnel. In inertial navigation systems for on-foot civilians, the 
orientation can be a limiting factor. This is the single most important obstacle 
towards the realization of a commercial sensor-based navigation system.
Agriculture
1.2.3   
Precision agriculture is becoming another area where MEMS-based sensors can 
be quite helpful (e.g., the GreenStar2 system developed by John Deere). GPS 
provides absolute positions and is usually available in rural settings. In agri-
cultural applications, roll and pitch estimation is important for the machinery 
platform. The integrated attitude and position information is the basis of the 
smart agricultural systems. The smart systems optimize the use of land by giving 
precise information to the user, and can be used in the application of fertilizers, 
herbicides/insecticides, harvesting, and land preparation for crops. In addition, 
integration of the navigation solution with land management systems also pro-
vides vital information for the treatment of land for maximum productivity.
MEMS-based tilt sensors, which are essentially accelerometers, can be 
used with the GPS receiver to obtain the required attitude and navigation 
information. The tilt of the machine is important, as the roll and pitch within 
farms can be quite significant. If the roll and pitch is not compensated, the 
application areas will either overlap or skip. In higher-accuracy agricultural 
products, three orthogonal accelerometers and three orthogonal gyroscopes 
are used. The system is easy to install for older farm machinery; some of the 
new machinery comes with this system. The user is notified about the exact 
application location by LEDs on the display module. In addition to the cost 
of the system, the user is also required to subscribe to the Differential Global 
Positioning System (DGPS) service for precise GPS positioning. However, all 
of the costs are offset by the reduction in the amount of work and chemicals 
used on farms.
Event Data Recorder
1.2.4   
Over the past several years, there has been considerable interest in the com-
munity regarding possible safety benefits from the use of event data recorders 
(EDRs) in motor vehicles [12]. EDR mainly collects vehicle crash informa-
tion, which includes information such as vehicle acceleration/deceleration 

	
Microelectromechanical Systems (MEMS)	
5
data, driver inputs (e.g., braking and steering), and vehicle systems status. 
The EDR monitors several of the vehicle’s systems, such as speed, brakes, and 
safety systems. The information obtained from EDRs aids investigations of 
the causes of crashes and injury mechanisms. This makes it possible to iden-
tify and address safety problems. The information collected can be used to 
improve motor vehicle safety. An EDR system includes angular rate sensors 
for monitoring rotational movement about three axes along with three linear 
accelerometers, or one triaxial linear accelerometer to track linear movement 
along the same three axes.
Wildlife and Livestock Tracking
1.2.5   
Animal tracking is becoming common to study habitats and to identify move-
ment behaviors [13, 14]. Usually animal tracking is done using GPS collars, 
but this kind of tracking is not sufficient as animals can be at places where a 
GPS signal may not be available. Most recently, animal tracking is done using 
the inertial sensors for continuous positioning and habitual information. In 
addition to the inertial dead-reckoning sensors, the tracking units also consist 
of digital cameras for visual aiding of the researchers. This particular system is 
used to track grizzly bears to understand their behavior and habitat.
Research is also ongoing in the field of livestock tracking to better 
understand grazing behavior in conjunction with various environmental con-
ditions. Special collars of GPS and inertial sensors integrated with wireless 
sensor networks are deployed to monitor the movement of livestock. GPS 
and Internal Navigation System (INS) are used in their usual manner and the 
wireless sensor network allows communication among different nodes for the 
routing of important data.
Patient Monitoring
1.2.6   
MEMS-based sensors are also used in some medical applications and patient 
monitoring [15]. These sensors are well-suited to monitor epilepsy as they 
can be used to quantify the intensity, frequency, and duration of movements. 
Research is underway to classify and correct motion disorders due to Parkinson’s 
disease using MEMS inertial sensors.
In addition, MEMS accelerometers are commonly used to detect fall-
ing by high-risk or elderly patients who lose control. This kind of patient 
monitoring allows the patient more freedom and reduces the burden of the 
primary care provider. The patients can function more independently as any 
unusual event (from accelerometers signals analysis) is communicated to the 
emergency responder wirelessly.

6	
MEMS-Based Integrated Navigation
Electronic Stability Control
1.2.7   
Most recently, vehicles are coming equipped with an electronic stability control 
system [16]. The system consists of a MEMS gyroscope and accelerometers 
that can detect the skidding or loss of control by comparing the vehicle’s actual 
motion with the steering angle. The system then applies brakes to individual 
wheels to bring the vehicle back into the control of the user. These systems can 
be intelligent enough to respond to emergency situations like a crash, skid, 
and so forth. Due to the effectiveness of the system, this technology is now 
becoming a fundamental component of all new vehicles.
Supplemental/Secondary Restraint System
1.2.8   
Since 1998, a supplemental restraint system (SRS) is mandatory in all North 
American vehicles. The SRS consists of a deceleration (acceleration) sensor, 
which causes airbags to be deployed in the case of a frontal collision. The sensor 
module consists of MEMS accelerometers with a microprocessor. In general, 
if the force of collision exceeds +/– 7g, the SRS will deploy the airbags; for 
redundancy and robustness, other MEMS accelerometer modules are placed 
in the front panel of the vehicle, which are also used in the feedback of the 
deployment.
In recent years, SRS has become a more evolved and robust system. The 
system that was initially designed for frontal collision is now capable of provid­
ing protection to the vehicle occupants in case of rollover or side impact using 
side-impact or curtain airbags. These airbags, on deployment, stay inflated to 
provide maximum protection.
Land Vehicle Navigation
1.2.9   
For several years, the integration of a high- or medium-quality INS with 
GPS has been implemented for accurate land vehicle-based surveying [17]. 
However, these grades of inertial systems are limited by their significant size 
and high cost ($25,000–150,000). With federal access regulations, the use of 
such systems is permitted only for authorized personnel. In the last decade, 
the demand for land vehicle navigation services has grown rapidly. To meet 
the navigation demand, many studies have been directed towards developing 
low-cost MEMS inertial systems. Advances in MEMS technology have made 
it possible to produce chip-based inertial sensors that are small, lightweight, 
consume very little power, and are reliable for land vehicle navigation and 
tracking systems.

	
Microelectromechanical Systems (MEMS)	
7
However, with these advantages comes the disadvantage of low naviga­
tion accuracy. MEMS-based sensors provide accurate navigation data over 
short time intervals but suffer from accuracy degradation over extended time 
periods due to the combined effects of sensor errors like noises, biases, drifts, 
and so forth [18]. Due to the integration of inertial measurements (as given 
in Section 1.1), any residual errors will accumulate, resulting in position and 
orientation errors. Therefore, to limit these MEMS sensor errors, frequent 
updates from external aiding sources like the GPS, odometer, barometer, and 
so forth are required.
Aided MEMS-Based Inertial Navigation
1.3   
Many different aiding sources are available to correct INS standalone system 
errors and are described below. The aiding sources can be classified as follows: 
aiding in coordinate domain, aiding in velocity domain, and aiding in attitude 
domain.
Aiding Sources in Coordinate Domain
1.3.1   
These aiding sources mainly provide positioning information to compensate 
or reduce standalone MEMS sensor errors. Some of these sources are repeated 
for other domains.
Global Positioning System (GPS)
1.3.1.1   
By far the most popular external aiding source for inertial data is GPS. GPS 
provides long-term accurate and absolute measurements and is well suited for 
integration with other sensors [19, 20]. However, this system does not work 
well in all environments as the GPS receiver requires a direct line of sight to 
four or more satellites. An integrated system combines the advantages of both 
systems and thus produces accurate and uninterrupted navigation results. In 
such an integrated system, GPS is typically used to provide accurate absolute 
positioning information to frequently update the INS; the INS is used to offer 
a short-term solution during GPS signal outage periods. DGPS is a technique 
used to locally improve the performance of GPS. A local base station receives 
the GPS signals and calculates offsets for each satellite with respect to the 
surveyed position. This set of offsets is then communicated to the local GPS 
receivers to correct their measurements for common ionospheric errors. The 
future deployment of the European satellite system, Galileo, will improve 
global coverage even further.

8	
MEMS-Based Integrated Navigation
Other satellite-based augmentation systems (SBAS) based on DGPS 
principles have also been developed. Three main SBAS are the WAAS program 
sponsored by the Federal Aviation Administration (FAA) in the United States, 
EGNOS sponsored by the European Space Agency, and MSAS sponsored by 
the Japanese Civil Aviation Bureau.
Cell Phone Positioning
1.3.1.2   
Cellular phone signals from two or more cell phone towers can be used to 
obtain the location of the handset. The positioning is absolute but it is not 
accurate as usually there is no direct line of sight to the cell phone towers of 
the handset. Signal triangulation is performed, which provides the approximate 
area of the user. In the absence of other more accurate updates in the position 
domain, cell phone signal positions can be used.
WiFi Positioning
1.3.1.3   
WiFi technology is developing rapidly; it operates on unlicensed industrial, 
scientific, and medical bands, which lead to the opening of other bands. WiFi 
positioning systems may not require a direct line-of-sight path to the WiFi 
access points (AP) and are least affected by multipath, unlike GPS. By means 
of integrating a WiFi positioning system with the inertial data for an indoor 
scenario and with GPS and inertial data for outdoor environments, a real-time 
uninterrupted positioning may be performed. In WiFi, measurements are taken 
from all the hotspot signals in range and from prior information [21] to obtain 
the best solution. The main drawback of WiFi technology is the essential survey 
required to map the WiFi hotspots both at the initialization of the system or 
at every major change in the local environment.
Ultrawideband Positioning
1.3.1.4   
Ultrawideband (UWB) signals provide accurate positioning capabilities because 
they use nanosecond pulses of radio energy, which are ideal for accurate tim­
ing information [22]. Consequently, they can be quite useful in providing 
updates for the inertial systems. The wide bandwidths (typically 500 MHz) 
offer the advantages of reliability, accuracy, and wall penetration capabilities. 
Furthermore, spreading the information over the wide spectrum keeps the 
power spectral density low and avoids interference with other systems. The 
downside of UWB is usage range, which is generally limited to approximately 
one kilometer with high-gain antennas, and for the fastest data rates, can be 
measured in tens of feet. UWB trades bandwidth for distance, so longer links 
are slower.

	
Microelectromechanical Systems (MEMS)	
9
Radio Detection and Ranging (RADAR)
1.3.1.5   
RADAR is a system that uses electromagnetic waves to identify the range, 
altitude, direction, or speed of both moving and fixed objects such as aircraft, 
ships, motor vehicles, weather formations, and terrain [21]. These systems use 
the reflected property of radio signals. The position of the target is estimated 
by measuring the angle of the signal reflection and the transit time of the 
transmitted signal to the target, and then back from the target to the receiver. 
RADAR can be useful in two different ways: first, the information provided 
by the system can be used to avoid any obstacles; second, the distance to a 
known location can be used to update the positioning information of an inertial 
system. The major limitation of this system is in separating unwanted signals 
in order to focus on the actual targets of interest.
Radio-Frequency Identification (RFID) System
1.3.1.6   
Radio-frequency identification (RFID) is an automatic identification method, 
relying on storing and remotely retrieving data using devices called RFID tags 
or transponders. An RFID tag is an object that can be applied to or incorporat­
ed into a product or person for the purpose of identification and tracking using 
radio waves. RFID tags generally contain at least two parts: an integrated circuit 
(for storing, processing, and modulating/demodulating a radio-frequency (RF) 
information signal) and an antenna (for receiving and transmitting the signal). 
However, a primary RFID concern is the illicit tracking of RFID tags along 
with security and privacy concerns for the personnel.
Proximity Detection Techniques
1.3.1.7   
A more simplistic and less accurate positioning technique is proximity detec­
tion that relies on the absence or presence of a signal when the receiver and 
transmitter are within a certain degree of proximity. The user is within the 
proximity range if the power level of the received signal falls within a pre­
defined threshold value. It is a very simple and cheap approach and does not 
require any extra equipment for positioning. Nevertheless, the accuracy is poor 
because the environment can have different interfering signals of comparable 
or more power levels.
Map Matching
1.3.1.8   
Map matching is an important tool for navigation. Determination of exact 
positioning information may not be very helpful for a civilian user unless it 
is communicated in terms of a reference map. Usually a map is considered as 
a known reference and the commercially available GPS navigation systems 

10	
MEMS-Based Integrated Navigation
show the positions on a digital map. Map matching is becoming increasingly 
important especially for those situations where the GPS quality is not good and 
the map-matching algorithm has to decide in which segment of the map the 
user is probably located depending on the available positioning data. Using a 
similar concept, the inertial positioning can be improved by using the informa­
tion from the digital map in the absence of other aiding sources.
Barometer
1.3.1.9   
For indoor applications, MEMS-based barometers can be very useful as they 
provide the relative change in height. These sensors can provide accuracies 
up to 2m, which makes these sensors attractive in identifying the change in 
elevation during standalone inertial navigation scenarios. In addition, the 
height sensor can be used in other forms of navigation when a GPS signal is 
not available.
Aiding Sources in Velocity Domain
1.3.2   
Similar to the aiding sources for positions, there are certain aiding sources 
that provide velocity information to compensate or reduce standalone MEMS 
sensor errors.
Zero Velocity Updates (ZUPTs)
1.3.2.1   
Zero velocity updates (ZUPTs) occur when a land vehicle stops, and they 
represent no dynamic region of the vehicle trajectory. The velocity errors at 
this time are due to short-term random disturbances, which can be reduced by 
averaging the observations. When a vehicle stops, corrections can be made to 
all navigation parameters that can significantly reduce position drift errors.
Nonholonomic Constraints
1.3.2.2   
Nonholonomic constraints (NHC) can be used to further improve naviga­
tion parameter accuracy. NHC use the fact that a land vehicle cannot move 
sideways or vertically up or down, and, hence, these two velocity components 
should be zero. The major problem arises when the terrain consists of signifi­
cant pitch angles.
Odometer
1.3.2.3   
In some cases, it may be possible to obtain information from the odometer 
of the vehicle. The odometer will generally provide the speed of the vehicle 
along a single axis, which can be used to improve the accuracy of the naviga­
tion solution. For correct updates, the wheel circumference of the vehicle is 

	
Microelectromechanical Systems (MEMS)	
11
an important parameter, and, therefore, without reasonable calibration for the 
wheel, the system will produce erroneous results.
GPS
1.3.2.4   
GPS is also capable of providing velocity information.
Aiding Sources in Attitude Domain
1.3.3   
These aiding sources mainly provide attitude information (i.e., roll, pitch, 
and azimuth) to compensate or reduce the attitude errors during standalone 
MEMS navigation.
Map Matching
1.3.3.1   
Map matching is an important tool for navigation as mentioned earlier. Simi­
lar to a position update, a map can be helpful in finding the direction of the 
user. For example, if the navigation solution is drifting due to the integration 
of sensor errors, heading information from the map can correct that drift. In 
this case, if the map is showing a straight road, and due to the drift the inertial 
system is indicating a wrong heading, the attitude can be easily updated using 
the map information.
MEMS Magnetometers
1.3.3.2   
The accuracy of the estimated attitude defines the accuracy of the overall 
navigation solution if inertial systems are used. For high-end sensors, only 
gyroscopes are used for attitude determination and their errors are compen­
sated for by the Kalman filter solution. However, the drift in the gyroscope is 
overwhelming for low-cost MEMS sensors and needs other forms of attitude 
determination for long-term reliability of the navigation solution. The MEMS 
magnetometer measures the angle of the sensor’s sensitive axis relative to a local 
magnetic field, which can then be used to compensate for the attitude errors 
in the navigation solution. In the absence of soft iron anomalies, the sensor 
will output Earth’s background magnetic field as its initial value. In the case 
of soft iron anomalies, Earth’s magnetic field lines of flux are distorted towards 
the anomaly. If the sensitive axis of the magnetic sensor points to the right 
and the soft iron anomaly is traveling left to right, then the magnetometer 
will initially see a decreasing field as more flux lines bend towards the oncom­
ing anomaly and swings in the negative direction. This is one of the limiting 
factors for magnetometers.
Now the reader is familiar with some common applications and aiding 
sources for MEMS sensors. The question is how do MEMS inertial sensors 

12	
MEMS-Based Integrated Navigation
work? As the focus of this book is on navigation, another important ques­
tion is what is the minimum number of sensors that are required to design a 
navigation system?
References
Gad-el-Hak, M., 
[1]	
The MEMS Handbook, First Edition, Boca Raton, FL: CRC Press, 
2001, p. 1368.
Lin, L., and Pisano, A. P., “Silicon Processed Microneedles,” 
[2]	
Journal of MicroElectroMe­
chanical Systems, Vol. 8, 1999, pp. 78–84.
Maluf, N., and Williams, K., 
[3]	
An Introduction to Microelectromechanical Systems Engineer­
ing, Second Edition, Norwood, MA: Artech House, 2004.
NEXUS Market Analysis for MEMS and Microsystems III, 2005–2009, http://www
[4]	
.memsinfo.jp/whitepaper/WP18_MEX.pdf, visited on August 8, 2008.
Venkatesh, P., and Sullivan, F., “MEMS in Automotive and Consumer Electronics,” 
[5]	
Sensors Weekly, 2007, http://www.sensorsmag.com/sensors/Automotive/MEMS-in-
Automotive-and-Consumer-Electronics/ArticleStandard/Article/detail/473909.
Clark, R.L., “An Overview of Developments in Precision Farming Systems,” 
[6]	
IEEE/
ASME International Conference on Advanced Intelligent Mechatronics (AIM97), Waseda 
University, Tokyo, Japan, June 16–20, 1997.
Mascaro, S., and Asada, H.H., “Docking Control of Holonomic Omnidirectional 
[7]	
Vehicles with Applications to a Hybrid Wheelchair/Bed System,” IEEE International 
Conference on Robotics and Automation, Vol. 1, 1998, pp. 399–405.
Wang, G., and Kao, I., “Intelligent Soft Contact Surface Technology with MEMS in 
[8]	
Robotic and Human Augmented Systems,” IEEE International Conference on Robotics 
and Automation, Vol. 2, 2000, pp. 1048–1053.
Alwood, R., and Faulkner, T., “ Personal Tracking in GPS-Denied Environments Using 
[9]	
Low-Cost IMUs,” presented at The WPI Precision Personal Locator Project Workshop, 
Worcester, MA, Aug 6–7, 2007.
Foxlin, E., “Pedestrian Tracking with Shoe-Mounted Inertial Sensors,” 
[10]	
IEEE Computer 
Graphics and Applications, Vol. 25, No. 6, 2005, pp. 38–46.
Yun, S.C., and Park, P.G., “MEMS Based Pedestrian Navigation System,” 
[11]	
Journal of 
Navigation, Vol. 59, Issue 1, 2006, pp. 135–153.
Kowalick, T.M., “Pros and Cons of Emerging Event Data Recorders (EDRs) in the 
[12]	
Highway Mode of Transportation,” IEEE VTC, 2001, pp. 3037–3041.
Huhtala, A., et al., “Evaluation of Instrumentation for Cow Positioning and Tracking 
[13]	
Indoors,” Biosystems Engineering, Vol. 96, No. 3, 2007, pp. 399–405.

	
Microelectromechanical Systems (MEMS)	
13
Hunter, A.J.S., Stenhouse, G., and El-Sheimy, N., “A New Technology Solution for the 
[14]	
Study of Bear Movement and Habitat Use: The Animal PathfinderTM,” 18th International 
Conference on Bear Research and Management, Monterrey, Mexico, 2007.
Wu, Y.H., et al., “The Development of M3S-Based GPS Navchair and Tele-Monitor 
[15]	
System,” Proceedings of the 2005 IEEE Engineering in Medicine and Biology 27th Annual 
Conference, Shanghai, China, September 1–4, 2005, pp. 4052–4055.
Laine, L., and Andreasson, J., “Control Allocation Based Electronic Stability Control 
[16]	
System for a Conventional Road Vehicle,” Intelligent Transportation Systems Conference 
(ITSC 2007), 2007, pp. 514–521.
Syed, Z.F., et al., “Civilian Vehicle Navigation: Required Alignment of the Inertial Sen­
[17]	
sors for Acceptable Navigation Accuracies,” IEEE Transactions on Vehicular Technology, 
Vol. 57, No. 6, 2008, pp. 3402–3412.
Aggarwal, P., et al., “A Standard Testing and Calibration Procedure for Low Cost MEMS 
[18]	
Inertial Sensors and Units,” Journal of Navigation, Vol. 61, No. 2, 2007, pp. 323–336.
Grewal, M.S., Weill, L.R., and Andrews, A.P., 
[19]	
Global Positioning Systems, Inertial Naviga­
tion, and Integration, New York: John Wiley & Sons, 2007.
Misra, P., and Enge, P., 
[20]	
Global Positioning System: Signals, Measurements, and Performance, 
Lincoln, MA: Ganga-Jamuna Press, 2006.
www.ekahau.com
[21]	
www.ubisense.net
[22]	
Mannings, R., 
[23]	
Ubiquitous Positioning, Norwood, MA: Artech House, 2008.


15
2
MEMS Inertial Sensors
Introduction
2.1   
MEMS inertial sensors have been embraced by the auto industry in their quest 
to improve performance, reduce cost, and enhance the reliability of the vehicles. 
Inertial sensors are the position, attitude, or motion sensors whose references 
are completely internal except possibly for initialization [1]. An inertial sen­
sor that measures the linear acceleration of a body about its sensitive axis is 
called an accelerometer. Similarly, a sensor that measures the rate of change of 
angular velocity or absolute angle in an inertial frame about its sensitive axis 
is called a gyroscope. Microaccelerometers alone have the second largest sales 
volume and gyroscopes will soon be mass produced at similar volumes [2]. 
Both accelerometers and gyroscopes can be used for a number of applications 
as mentioned in Chapter 1.
MEMS devices are traditionally made by either bulk or surface micro­
machining techniques. Bulk micromachining uses the full thickness of the 
wafer and forms the proof mass along with the suspension system by wet 
etching the silicon wafer. These devices were used in earlier days and are more 
expensive than their counterparts, surface micromachined devices. In bulk 
micromachined devices, mechanical components cannot be monolithically 
integrated with the supporting electronics and therefore a separate IC chip 
is needed to house the additional electronics. The separate IC chips result 
in an increase in the manufacturing cost. However these devices have larger 
mechanical components and are more accurate than the surface micromachined 
devices. One such example of the bulk micromachined device is the high-end 
navigation-grade accelerometers, developed by a commercial company like 
Northrop Grumman’s LN 101E for military applications [3].

16	
MEMS-Based Integrated Navigation
The technology capable of housing the electronics and the mechanical 
structures on the same chip is surface micromachining. Surface micromachin­
ing is based on the deposition and etching of different structural layers on top 
of the substrate. This technology preserves the wafer but deposits or etches 
additional layers above the wafer surface to achieve the desired shape. The 
layers are generally plasma etched. These low-cost accelerometers, developed 
by surface micromachining, are typically comb drive based and equipped with 
sophisticated on-chip signal conditioning electronics. The sensing elements in 
the comb drive are movable comb fingers, which are an order of magnitude 
smaller than bulk micromachined devices. However less thickness and mass 
of the comb fingers impose severe limitations on the performance of these 
accelerometers. For example, Analog Devices Inc. has manufactured a number 
of very low-cost sensors based on this surface micromachining technology.
Bulk micromachining process technology is currently undergoing a 
revolution driven by the incorporation of deep reactive ion etching (DRIE) of 
silicon as a replacement for orientation-dependent (wet) etching [4]. However, 
DRIE substrate looks like surface micromachining. DRIE uses high-density 
plasma to alternatively etch silicon and deposit etch-resistant polymer on side 
walls. This gives DRIE the capability of providing precise 90° sidewall angles 
along with randomly shaped linear geometries.
Lithographie Galvanoformung Abformung (LIGA) is a popular process 
to obtain high aspect ratio microstructures from metals and plastics. LIGA 
combines IC lithography, electroplating, and molding to obtain depth. Patterns 
are created in a substrate and then electroplated to create 3D molds.
The main focus of this chapter is to provide the user with the answers 
regarding how MEMS inertial sensors work, what the different types of sen­
sors are, and most importantly, from the commercial point of view, how many 
sensors are required to perform navigation for a land vehicle. A complete flow- 
chart of Chapter 2 is provided in Figure 2.1.
Accelerometers
2.2   
An accelerometer measures the specific force in an inertial reference frame, 
which can be used to estimate the acceleration of the moving body. Therefore, 
an accelerometer in the direction of motion of a vehicle may be the most 
important as it should contain all the information. For a 3D motion, however, 
one would like to record the accelerations in all three directions to accurately 
model such a motion. This is discussed in more detail in Chapter 3.

	
MEMS Inertial Sensors	
17
MEMS inertial sensors
Accelerometers
Gyros
Principles
Classification
Principles
Classification
Inertial measurement unit
Required number
of sensors
Method to determine minimum sensors
Without any aiding
With aiding
Results and analysis
Figure 2.1  Flowchart for Chapter 2.
Working Principle for MEMS Accelerometers
2.2.1   
An accelerometer operates by measuring the inertial force generated when a 
proof mass accelerates [5, 6] as illustrated by Figure 2.2. An accelerometer 
is made of at least three components, namely a proof mass, a suspension to 
hold the mass, and a pickoff, which relates an output signal to the induced 
acceleration.
The equilibrium position of the proof mass is calibrated for zero accelera­
tion. Acceleration along the sensitive axis causes the proof mass to be displaced 
from its equilibrium position. The amount of resultant displacement from 
the equilibrium position is sensed by a pickoff, and then scaled to provide an 
indication of acceleration along this axis.
Acceleration in the positive direction will cause the proof mass to move 
downwards with respect to the equilibrium position. Imagine that the acceler­
ometer is sitting on a bench in a gravitational field. It is displaced downward 

18	
MEMS-Based Integrated Navigation
(with respect to the equilibrium position) due to its gravitational force as shown 
in Figure 2.3. The arrow in Figure 2.3 indicates the input-sensitive axis along 
with the positive direction of acceleration. As the accelerometer is stationary 
sitting on the bench, acceleration in the opposite direction must be exerted 
by it. Therefore, it exerts minus gravitational acceleration.
Accelerometers measure specific forces rather than these gravitational 
forces. The output of an accelerometer (acceleration minus gravitation) is called 
specific force and is given by (2.1) [6].
	
f = a – g	
(2.1)
where
f = specific force;
a = acceleration with respect to the inertial frame;
g = gravitational acceleration.
The units of these acceleration and force terms can be m/s2 or some 
derivative of this unit such as mGal, which is 10–5 m/s2 or mG that equals 
0.981 mGal.
0
M
Housing
0
M
Housing
Figure 2.2  Basic accelerometer structure.

	
MEMS Inertial Sensors	
19
Sensitive
Axis
g
a
Figure 2.3  Displacement of proof mass.
For the above case, the accelerometer is sitting on a bench and is at rest 
(i.e., a is 0). The force on the accelerometer is actually the reaction force of 
the bench, which is equal to –g. Therefore, the accelerometer output for our 
example is f = –g. Another way of looking at it is to imagine the accelerometer 
dropping in a vacuum (free fall). In this case f = 0 because a = g. To navigate 
with respect to the inertial frame, it is required to determine the body accel­
eration a. Thus, in the navigation equations, we convert the output of the 
accelerometers from f to a by adding g.
Classifications of Accelerometers
2.2.2   
A common way to classify accelerometers is based on the types of transduction 
used for converting the mechanical displacement of the proof mass to electrical 
signal. Some of the common principles are piezoresistive, capacitive sensing, 
piezoelectric, optical sensing, and tunneling current sensing.
Piezoresistive Accelerometers
2.2.2.1   
These are the first micromachined and commercialized inertial sensors [2]. In 
this method, when the frame moves, suspension beams elongate or shorten, 
which changes the stress and resistivity of embedded piezoresistors. The change 
in resistance can be easily evaluated using standard bridge techniques. The main 
advantage is the simple fraction process involved for manufacturing these types 
of sensors. However, these sensors have a large undesired temperature sensitiv­
ity and small output sensitivity. Typical performance levels for these devices 
are a sensitivity of 1–3 mV/g, 5–50g dynamics range, and uncompensated 
temperature coefficient of 0.2%/°C.

20	
MEMS-Based Integrated Navigation
Capacitive Accelerometers
2.2.2.2   
Capacitive accelerometers incorporate an air-damped, opposed-plate capacitor 
as their sensing element. This mechanism creates a very stable, accurate mea­
surement device, which is inherently insensitive to base strain and transverse 
acceleration effects. The differential capacitors are formed by using the proof 
mass as the common contact of the opposite polarity electrodes. On applying 
external acceleration [2, 7], proof mass gets displaced, which, in turn, changes 
the capacitance between the proof mass and fixed electrodes. These devices 
have a high sensitivity, good DC response, low temperature sensitivity, linear 
output, and low power dissipation along with their simple structure. However, 
these devices are prone to external electromagnetic interference. Moreover the 
sensitivity and resolution of capacitive accelerometers depend on the area of 
capacitive plates. With the decrease in device size, the sensitivity and resolution 
of the unit becomes limited.
Piezoelectric Accelerometers
2.2.2.3   
Here the force or acceleration applied to the proof mass is converted to an 
electrical signal by the piezoelectric material. The obtained voltage is directly 
fed to the electronics with no conversion required. But these devices have a 
leakage issue, which deteriorates the DC response.
Tunneling Accelerometer
2.2.2.4   
A constant current is maintained between a tunneling tip attached to the 
microstructure and its counter electrode. As the tip is brought closer to its 
counter electrode, a tunneling current is established and remains constant if 
no displacement occurs. When displacement occurs, a voltage is adjusted to 
maintain the current at a constant level. The voltage is a measure of applied 
acceleration. These devices have very high sensitivity in the range of 10–7g, 
but suffer from significantly low-frequency noise.
Another criterion to classify accelerometers is based on the type of control 
loop used (i.e., whether the system is open- or closed-loop) [7]. In a closed-loop 
system, a force is fed back to the proof mass to counterbalance the inertial force. 
The measure of this feedback force gives a measure of the input acceleration. 
These sensors have more bandwidth, linearity, and dynamic range than their 
open-loop counterpart. However, the costs of these systems are very high due 
to the electronics’ complexity. Consequently, most commercial accelerometers 
are open-loop systems.

	
MEMS Inertial Sensors	
21
Gyroscopes
2.3   
To fully describe the motion of a body in 3D space, rotational motion as well as 
translational motion has to be measured. Sensors that measure angles or angular 
rates with respect to an inertial frame of reference are called gyroscopes [8].
Principle of MEMS Gyroscopes
2.3.1   
The angular rate sensors or gyroscopes provide the change in angle with 
respect to an initially known orientation. Almost all reported micromachined 
gyroscopes use vibrating mechanical elements, called proof mass, to monitor 
rotational motion. They don’t have any rotating part that requires bearings 
and hence can be miniaturized to reduce the overall cost of the sensor. These 
vibratory gyroscopes are based on the principle of energy transfer between two 
vibration modes of a structure caused by Coriolis force as shown in Figure 
2.4. In this figure, xe and ye, represent the x-axis and the y-axis of the Earth’s 
reference frame.
Coriolis force is named after a French scientist and engineer G.G. de 
Coriolis. Coriolis force is an apparent acceleration needed to hold Newton’s 
Y
e
B
A
e
Coriolis
Force
X e
Figure 2.4  Coriolis force.

22	
MEMS-Based Integrated Navigation
laws of motion in rotating reference frames. Sometimes this force is called a 
fictitious force (or pseudo force), because it does not appear when the motion 
is expressed in an inertial frame of reference. Due to the effect of the Coriolis 
force, a body moving from point A to B on the surface of the Earth will follow 
a curved line instead of a straight line as demonstrated in Figure 2.4. At a given 
rate of rotation of the observer, the magnitude of the Coriolis acceleration is 
related to the body velocity, the angle between the direction of motion of the 
body, and the axis of rotation as given by (2.2).
	
r
r
r
a
w
v
c = −
×
2
	
(2.2)
where rv is the body velocity in the rotating frame and rw is the angular velocity 
of the rotating system. Equation (2.2) implies that the Coriolis acceleration is 
perpendicular to both the direction of the velocity of the moving mass and the 
rotation axis. All vibrating gyroscopes employ the Coriolis effect for measuring 
the angular rates. In comparison to accelerometers, gyroscopes are a challenging 
technology and are in the development stages. The main difficulty is that the 
sensing element must be able to move or vibrate in two degrees of freedom, 
one for the excited or driven mode (in which the body moves with velocity 
rv), and other for the sense mode (which experiences Coriolis force). Thus, 
gyroscopes can be described as a resonator along the drive direction and as an 
accelerometer along the sensing direction. Furthermore, the Coriolis coupling 
between the drive and sense mode is very weak, thus resulting in the use of 
mechanical amplifications.
Classification of MEMS Gyroscopes
2.3.2   
For gyroscopes, there are three common designs of fabrication. Each will be 
discussed in the following subsections in detail [7, 8].
Tuning Fork Gyroscopes
2.3.2.1   
Tuning fork gyroscopes are a common example of vibratory gyroscopes. The 
tuning fork consists of two tines, which are connected together at the junction 
as shown in Figure 2.5. The tines are resonated differentially along two axes by 
a suspension system. When this system is rotated, Coriolis force is generated, 
which causes a differential sinusoidal force to develop on the individual tines 
orthogonal to the main vibrations. The actuation mechanism used for produc­
ing resonance on the tines can be electrostatic, electromagnetic, or piezoelectric. 
Also to sense the Coriolis-induced vibrations in the sense mode, capacitive, 
piezoresistive, or piezoelectric methods can be used.

	
MEMS Inertial Sensors	
23
Z
Y
X
Support
Figure 2.5  Tuning vibratory gyroscope.
Vibrating Wheel Gyroscopes
2.3.2.2   
As the name indicates, these gyroscopes have a wheel that vibrates about its 
axis of symmetry. The wheel rotation about the symmetry axis results in the 
wheel tilting, which will produce a change in the measurement. This change 
can be detected in a number of ways, such as implementing electrostatic, 
electromagnetic, piezoelectric, piezoresistive, or capacitive circuits.
Wine Glass Resonator Gyroscopes
2.3.2.3   
Wine glass gyroscopes, or hemispherical gyroscopes, are fabricated from fused 
silica rather than silicon. In the wine glass gyroscope, the resonance of a 
resonant ring is the measured variable, and the positions of the nodal points 
indicate the rotation angle.
Now that we have seen the major classifications of MEMS-based inertial 
sensors along with the working principle of these sensors, we are ready to take 
this topic to the next level. We will now discuss the number of inertial sensors 
that are required for land vehicle navigation.

24	
MEMS-Based Integrated Navigation
MEMS Inertial Sensors for the Most 
2.4   
Economical Land Navigation
An inertial sensors-based navigation system generally consists of three gyro­
scopes and three accelerometers. Gyroscopes sense angular velocity ωib
b , which 
is the rotation of the b-frame with respect to the i-frame, measured in the 
b-frame. Accelerometers measure the specific force f b in the b-frame. This 
configuration is required for air or marine navigation systems where attitude 
angles (i.e., roll, pitch, and azimuth changes) are significant. However, ground 
vehicle navigation and positioning are constrained mainly to two dimensions. 
This chapter presents and compares different sensor configurations that can 
be used for vehicle navigation, taking into consideration the robustness of the 
navigation or positioning results, and hardware cost of the inertial measure­
ment unit (IMU).
Heading rate information and a vehicle’s longitudinal acceleration are 
of great significance for land navigation and must be included in any sensor 
configuration. If a heading gyroscope and a forward/backward sensing accel­
erometer are present in a land vehicle inertial system, theoretically, the system 
should be able to provide the navigation information.
One method to reduce the cost of the inertial system is to reduce the 
number of sensors to the minimum sensors required for robust navigation. In 
this chapter, five possible sensor combinations are provided as illustrated by 
Figure 2.6. Initially, a full inertial sensor system consisting of a triaxial acceler­
ometer and three orthogonal gyroscopes (full IMU) is studied. The full IMU is 
capable of providing three-dimensional motion as it covers all three dimensions 
and consists of six sensors, which makes it the most expensive option. Today, 
dual-axis MEMS gyroscopes [9] are coming onto the market that can sense the 
motion in two orthogonal dimensions. There are times when the pitch angles 
for the vehicle can be quite significant in land navigation, such as a driving route 
passing through mountainous terrain. The addition of a gyroscope to sense 
those pitch angles can prove to be beneficial, and, hence, the second configu­
ration considered consists of a dual-axis gyroscope and triaxial accelerometer 
(DG-TA). The next sensor configuration is even more economical as it uses 
only two sensors [i.e., a single axis gyroscope to measure the heading rate and 
a triaxial accelerometer (SG-TA)]. Since dual-axis accelerometers are also avail­
able in the market, another economical sensor format can utilize such dual axis 
accelerometers. In this configuration (SG-DA), the dual axis accelerometer is 
used to sense the specific forces in the horizontal plane as the vertical direction 

	
MEMS Inertial Sensors	
25
senses mostly the gravity. The last case is the one that consists of a single-axis 
gyroscope for heading rate measurement and a single axis accelerometer in the 
forward direction (SG-SA). It is the simplest configuration that covers two 
important directions for the land vehicle navigation.
The typical inertial dataset, as shown in Figure 2.7, clearly shows that 
for navigation on a level road, the roll, pitch angles, and vertical velocities 
are negligible. Mostly, a vehicle moves forward on a road, which is evident 
from the signals of the forward accelerometer. The lateral accelerometer is also 
providing trajectory information as it measures the centripetal accelerations 
that are significant during vehicle turning. A vertical gyroscope is necessary 
to measure the heading of the vehicle as mentioned earlier. Hence, for a 
well-paved and level road, the roll and pitch gyroscopes (i.e., gyroscopes in 
forward and lateral directions) and vertical accelerometer will provide minimal 
information.
Full IMU
−Z
X
Y
−Z
−Z
DG-TA
SG-TA
X
Y
X
Y
SG-DA
SG-SA
X
Y
X
Y
−Z
−Z
Figure 2.6  The five sensor configurations.

26	
MEMS-Based Integrated Navigation
GPS time (s)
429,440
429,480
429,440
429,480
429,440
429,480
−20
0
20
m/s/s
deg/s
−20
0
20
−20
0
20
0
0.5
−0.5
0
0.5
−0.5
0
0.5
−0.5
429,440
429,480
429,440
429,480
429,440
429,480
Roll Gyro
Pitch Gyro
Heading Gyro
Forward Accelerometer
Lateral Accelerometer
Vertical Accelerometer
Figure 2.7  Inertial sensor signals for a typical land vehicle trajectory.
Despite using a minimum number of sensors, vehicle navigation can still 
implement velocity aiding and NHC to improve the navigation solution [10].
Method to Compute Minimum Sensors
2.5   
There are three possible ways to deduce the minimum number of sensors for 
land navigation. The first method is to collect data with the required number 
of sensors and then process the data with simplified navigation equations 
(Figure 2.8). In Figure 2.8, fx, fy, and fz represent the output of accelerometers 
in the x, y, and z directions, while wx, wy, and wz represent gyroscope output 
in three directions.
This method is most realistic, as it requires both hardware and software 
modifications. In addition, extensive data collection is required to obtain the 
results for different hardware modules. Generally, since hardware is more 
costly and difficult to modify than software, it would be more favorable to 
only work with the software modifications. This brings in the second method 
that requires the simplification of the navigation equations. As before, the 
hardware remains the same (i.e., consists of all six sensors). In this case, only 
data from the required sensors are provided to the simplified equations as if 
the other sensors are not part of the system. This method also needs extensive 
software development.

	
MEMS Inertial Sensors	
27
fn(
,
,
, , )
ω ω ω
f   f   f
x
y
z
x
y
z
Navigation
equations =
ωz
ω ω ω
,
,
x
y
z
fn(
, , , )
ω f   f   f
x
y
z
Simplifed
navigation
equations =
z
, ,
f   f   f
x
y
z
, ,
f   f   f
x
y
z
Accelerometer
Accelerometer
Gyroscope
Gyroscope
,
Figure 2.8  Software modification example for full IMU and SG-TA sensors.
The third method requires the least amount of work as it can be imple­
mented at the integration level. Usually a Kalman filter (KF) is used to opti­
mally integrate the inertial sensors data with the available aiding sources. This 
method modifies the signals and their stochastic properties at the integration 
level so that the KF does not use the unwanted signal for integration. Due to 
its simplicity, this method was used to deduce the minimum number of sen­
sors. To verify our methodology, two different datasets collected in Calgary, 
Alberta are used for the analysis.
The original version of the integration KF has processing capabilities for 
the full IMU data consisting of six sensors outputs (i.e., three accelerometers’ 
and three gyroscopes’ signal output). In the modified version, the noise and 
random walk [signal standard deviations, velocity random walk (VRW), and 
angle random walk (ARW)] of the omitted sensors are increased, the corre­
sponding signals are assigned to pseudosignals and their weights (inverse of 
the variance covariance matrix) are set to zero.
The concept of pseudosignals is straightforward but there are certain 
requirements for using the pseudosignal. The new signal should satisfy the 
Gaussian white noise requirements for the KF. The systematic method to 
compute the pseudosignal Gaussian noise is by taking the spectral density, q, 
of the original signal. The q values are used to design the Qk matrix, the pro­
cess noise matrix, of the KF. The spectral density is a function of the standard 
deviation (STD) of the signal and the BW of the IMU [11].

28	
MEMS-Based Integrated Navigation
	
q
STD
BW
sensor
IMU
=
	
(2.3)
The corresponding noise values for the accelerometers and gyroscopes 
that need to be removed can be computed for the Qk matrix. This matrix 
predicts measurements depending on the quality of the signals and thus it is 
important to satisfy the Gaussian white noise requirements. The accelerometers 
and gyroscopes used in this chapter are from the custom inertial unit (CIU) 
with a bandwidth of 40 Hz, which has signal standard deviations of 0.084 
m/s2 and 0.0035 deg/s (static portion of Figure 2.7). CIU is a MEMS IMU 
sensor triad that was designed by the Mobile Multi-Sensor Systems research 
group (MMSS) at the University of Calgary. Using these two values the spectral 
densities can be estimated as follows:
	
q
s
accel =
=
0 084
40
0 013
.
.
 
/ /
m s
	
(2.4)
and
	
q
e
s
gyro =
=
−
0 0035
40
5 5
4
.
.
deg /
	
(2.5)
The KF may diverge if the values computed above are used when the 
actual errors of the pseudosignals are not white noise. To avoid such a problem, 
the noise spectral density is set to a much higher value to ensure that the filter 
does not provide any weight to the omitted sensors.
For the DG-TA configuration, the roll gyroscope is removed from the 
full IMU. As the data is from a full IMU, a pseudosignal(s) of 0.0 (in Figure 
2.9) is assigned to the roll gyroscope and the corresponding weight (variance–1) 
value is also set to 0. In addition to that, the ARW value for the roll gyroscope 
is increased by a factor (F), which is greater than 25 (F > 25). This is to ensure 
that the navigation KF does not use the measurement from this sensor and 
is equivalent to physically removing the sensor from the full IMU at the data 
processing level.
SG-TA configuration only has a heading gyroscope, and, similar to the 
first case, pseudosignals of 0.0 (s = 0) magnitudes are assigned to both roll and 
pitch gyroscopes and the signal weights are set to 0.0. The corresponding ARW 
values are increased for the two sensors (F > 25). The next set of simulations is 
for SG-DA sensor configuration. In this case, the vertical accelerometer signal 
is also removed by assigning it a pseudosignal value of –9.81 m/s/s (s = –9.81 
m/s/s ), which is in addition to the removal of the roll and pitch gyroscopes 
signals as mentioned in the SG-TA case. The corresponding weights of the 

	
MEMS Inertial Sensors	
29
omitted sensors are set to 0s and the RW values are increased to ensure that 
the sensors are not used in the navigation KF.
The final configuration contains just one gyroscope, the heading gyro­
scope, and one accelerometer. In this case, pseudosignals of magnitude 0.0 
replaced the original signals for the roll gyroscope, pitch gyroscope, and lat­
eral accelerometer. The vertical accelerometer is assigned the pseudosignal of 
–9.81 m/s/s. The weights of the omitted sensors are reduced to zero and the 
corresponding RW values are increased.
Results and Analysis
2.6   
This section is divided into two subsections. Section 2.6.1 presents the position 
drift errors with respect to the reference solution without the use of any extra 
aiding sources (e.g., NHC). Section 2.6.2 presents the same results but after 
NHC is applied during the test data processing.
Drift Errors Without NHC
2.6.1   
The position drift errors without NHC for two datasets are given in Figure 
2.10. The figure clearly demonstrates that the mean of the drift errors will 
increase as the sensors are removed from the inertial unit, despite the fact that 
land vehicle motion is constrained. Regardless of the different magnitude for 
the mean drift errors, the trend for the two datasets is similar.
Original
Modifier
Data processing:
Kalman filter
RW x F
Variance  = 0
−1
Signal = s
1. Signal
2.
3. VRW
Variance
−1
Figure 2.9  Partial sensor processing flowchart.

30	
MEMS-Based Integrated Navigation
, 
Figure 2.10  Average drift errors for the different sensor configurations for dataset 1 and 
dataset 2.
Figure 2.11 shows an example of the estimated roll and pitch with their 
standard deviations for full (top panel) and SG-DA (bottom panel) sensor 
configurations. The KF estimates the errors in roll and pitch but the error is 
much more random with a higher amplitude than the full sensor case. This is 
due to the higher RW values that are used in the simulations.
2,000
2,500
3,000
3,500
4,000
4,500
5,000
5,500
–10
0
Attitude error (deg)
10
6,000
–10
0
10
–5
5
GPS time 340,000 (sec)
STDP
STDR
Pitch
Roll
STDP
STDR
Pitch
Roll
2,000
2,500
3,000
3,500
4,000
4,500
5,000
5,500
6,000
GPS time 340,000 (sec)
Attitude error (deg)
Figure 2.11  Estimated roll and pitch errors for full (top panel) and SG-DA (bottom panel) 
sensor configurations.

	
MEMS Inertial Sensors	
31
Drift Errors with NHC
2.6.2   
The NHC is applied to both datasets and the mean drift errors are given in 
Figure 2.12. It is evident that the application of the NHC reduced the overall 
drift errors, and, therefore, application of these constraints is desirable for 
an accurate navigation system. NHC makes assumptions about the vehicle’s 
velocity, and, therefore, a good alignment between the body frame of the IMU 
(b-frame) and the vehicle frame (v-frame) is required.
The dataset 1 has roll and pitch misalignments between the b-frame 
and v-frame, while dataset 2 has virtually no misalignment between the two 
frames as shown in Figure 2.13. Theoretically, the NHC for dataset 1 should 
not decrease the drift errors as effectively as for dataset 2 due to the underlying 
misalignment angles.
The NHC decreases the drift errors by only 37.62% for dataset 1 (dataset 
with small misalignments) and 81.13% for dataset 2 (with no misalignment). 
Full IMU outperformed any other partial sensor configuration, but it is inter­
esting to note that the SG-DA sensor configuration produced better overall 
results as compared to the other partial sensor configurations for well-leveled 
roads used in the analysis. For dataset 1 the mean drift error for SG-DA is close 
to the full IMU; however, the DG-TA results are exhibiting slight degrada­
tion. For dataset 2, the mean drift errors for DG-TA, SG-TA, and SG-DA are 
similar to each other [10].
Figure 2.12  Average drift errors for the different sensor configurations for dataset 1 and 
dataset 2 using NHC.

32	
MEMS-Based Integrated Navigation
2,000
2,500
3,000
3,500
4,000
4,500
5,000
Attitude error (deg)
−4
0
4
−2
2
GPS time 340,000 (sec)
Pitch
Roll
GPS time 160,000 (sec)
Attitude error (deg)
2,500
3,000
3,500
4,000
4,500
5,000
−4
0
4
−2
2
Figure 2.13  Roll and pitch misalignments for dataset 1 (top panel) and dataset 2 (bottom 
panel).
So far, we have discussed the minimum number of sensors along with a 
possible way to improve navigation using the MEMS-based inertial sensors. In 
addition, the principle and classification of the MEMS sensors was described. 
In the last section, we touched on some sensor errors of the MEMS inertial 
sensors that are required for navigation KF design. Are these the only kinds 
of errors for MEMS inertial sensors? What are the methods to actually reduce 
these errors? What are the ways to quantify all of the sensor errors for best 
navigation accuracies? Chapter 3 will answer these questions.
References
IEEE Std 1139-1988, “IEEE Standard Definitions of Physical Quantities for Funda­
[1]	
mental Frequency and Time Metrology.”
Barbour, N., et al., “Micromachined Inertial Sensors for Vehicles,” 
[2]	
IEEE Conference on 
Intelligent Transportation System, 1997, pp. 1058–1063.
Northrop Grumman, “Lufthansa Selects Northrop Grumman to Provide Next-­Generation 
[3]	
Air Data Inertial Reference Units,” http://www.irconnect.com/noc/press/pages/news_
releases.html, visited January 2009.
Gad-el-Hak, M., 
[4]	
The MEMS Handbook, First Edition, CRC Press, 2001.
IEEE Std 1293-1998, “IEEE Standard Specification Format Guide and Test Procedure 
[5]	
for Linear, Single-Axis, Non-Gyroscopic Accelerometers.”

	
MEMS Inertial Sensors	
33
El-Sheimy, N., “Inertial Techniques and INS/DGPS Integration,” ENGO 623-Course 
[6]	
Notes, Department of Geomatics Engineering, University of Calgary, Canada, 2006.
Kraft, M., “Micromachined Inertial Sensors: The State of the Art and a Look into the 
[7]	
Future,” IMC Measurement and Control, Vol. 33, No. 6, 2000, pp. 164–168.
IEEE Std 952-1997, “IEEE Standard Specification Format Guide and Test Procedure 
[8]	
for Single-Axis Interferometric Fiber Optic Gyros.”
InvenSense Inc., http://www.invensense.com/news/060516.html, visited September 
[9]	
6, 2008.
Syed, Z., et al., “Economical and Robust Inertial Sensor Configuration for a Portable 
[10]	
Navigation System,” ION GNSS 2007, Fort Worth, Texas, Sept. 24–25, 2007.
El-Sheimy, N., “The Potential of Partial IMUs for Land Vehicle Navigation,” 
[11]	
Inside 
GNSS, 2008, pp.16–25.


35
3
MEMS Inertial Sensors Errors
Introduction
3.1   
MEMS sensors are cost-effective units with small dimensions, but suffer 
from larger errors when compared with their mechanical predecessors [1, 2]. 
Low-cost MEMS inertial sensors exhibit high biases, scale factor variations, 
axis nonorthogonalities, drifts, and noise characteristics [3]. Gyroscope biases 
for MEMS IMUs lie in the range of 100°/hr and above while these biases are 
negligible for higher grade sensors (Figure 3.1). These errors build up over 
time, corrupting the precision of the measurements. Therefore, it is important 
to properly remove these errors before the start of navigation.
Gyro bias
Tactical grade (1 deg/hr)
MEMS grade (100 deg/hr)
Position errors (m)
0
100
10
20
30
40
50
60
70
80
90
100
200
300
400
500
600
700
800
Figure 3.1  Position errors for tactical grade IMU with 1°/hr gyro bias as compared to 
MEMS-grade IMU with 100°/hr.

36	
MEMS-Based Integrated Navigation
This chapter begins with a description of different sensor errors and their 
important classifications. Next, special methods to reduce the MEMS inertial 
sensor errors are provided. A complete measurement model for the inertial 
sensor is discussed that would account for all the possible error sources. A flow 
chart for Chapter 3 is provided in Figure 3.2.
Systematic Errors
3.2   
Systematic errors are due to manufacturing defects and can be calibrated out 
from the data. Some systematic errors are given below.
MEMS inertial sensors errors
Systematic or deterministic
Random or
stochastic
Bias
Scale
factor
Nonorthogonality
Repeatability
In-run
stability
Thermal
Gaussian
process
First order
Markov
Gauss-
Markov
Random
walk
Error mitigation
Error modeling
Calibration
Thermal
compensation
Correlation
Allan variance
Sensor measurement
model
Accelerometer
Gyro
Figure 3.2  Flow chart for Chapter 3.

	
MEMS Inertial Sensors Errors	
37
Bias
3.2.1   
Ideally, when no input is applied to the sensor, the output signal received from 
the sensor should read 0 [2–4]. However, this is not the case, and an offset 
called the bias exists, as shown in Figure 3.3. The average of accelerometer 
or gyroscope output over a predetermined time that has no relation to input 
acceleration or rotation is called bias. The units for accelerometer bias are g or 
m/s2 while that for gyroscope bias is °/h or °/sec. The low-cost MEMS unit 
biases for accelerometers are depicted in Figure 3.3. We can observe in Figure 
3.3 that uncompensated biases are as huge as 19 m/s2.
An uncompensated accelerometer bias introduces an error proportional 
to time (t) in the velocity and proportional to t2 in the position as illustrated 
in (3.1) [4].
	
v
b
b t
p
v
b t
b t
f
f
f
f
=
=
⇔
=
=
=
∫
∫∫
∫
dt
dt
dt
1
2
2 	
(3.1)
where bf is accelerometer bias, p is the position, and v is the velocity.
For example, consider a case where accelerometer bias is 8 m/s2. If this 
bias offset is not removed from the measurements, it can generate a 400-m error 
in position after 10 seconds and 10-km error after 50 seconds using (3.1).
0
14
14.5
15
250
500
750
1,000
1,250
1,500
1,750
2,000
0
18.8
19
19.2
250
500
750
1,000
1,250
1,500
1,750
2,000
0
−13.5
−13
-12.5
250
500
750
1,000
1,250
1,500
1,750
2,000
Time Steps (sec)
Acc Z(m/s  )
2
Acc Y (m/s  )
2
Acc X (m/s  )
2
Figure 3.3  Accelerometer biases.

38	
MEMS-Based Integrated Navigation
On the other hand, an uncompensated gyroscope bias in the x or y 
gyroscope will introduce an angle (in roll or pitch) error dq, proportional to 
time t as given in (3.2).
	
δθ =
=
∫b
b t
w
w
dt
	
(3.2)
where bw is gyroscope bias.
The small tilt angle error will cause a misalignment of the INS, and 
therefore a projection of the acceleration vector in the wrong direction. This, 
in turn, will introduce proportional acceleration to dq (a = g sin(dq) ª g dq = 
gbwt) in one of the horizontal axes. Position and velocity errors, as a result of 
this angle, are calculated by (3.2).
	
v
a
b
b gt
w
w
=
=
=
∫
∫
dt
dt
g
t
1
2
2 	
(3.3)
	
p
v
b gt
b gt
w
w
=
=
=
∫∫
∫dt
1
2
1
6
2
3
dt
	
(3.4)
Therefore, a small gyroscope bias introduces quadratic errors in veloc­
ity and cubic error in the position as given by (3.3) and (3.4). If 8°/sec of 
gyroscope bias exists, it will introduce a 228-m error in the position after 10 
sec and a 28.521-km error after 50 sec. Consequently, it is obvious that the 
outcome of gyroscope bias is more pronounced than accelerometer bias as 
time progresses.
Input Sensitivity or Scale Factor
3.2.2   
Scale factor is the ratio of a change in output to a change in the intended 
input to be measured [4]. It is evaluated as the slope of the straight trend line 
that can be fitted to input-output data. An ideal sensor has a scale factor of 1; 
hence, any scale factor above or below 1 is contaminated with sensor errors. 
The difference between the imperfect scale factor and ideal scale factor is called 
the scale factor error. Scale factor error is usually expressed in parts per mil­
lion (ppm). But for very low-cost MEMS sensors, the scale factor error can be 
expressed in percentage (%) as shown in Figure 3.4.
Gyroscopes scale factor error (Figure 3.4) is obtained by rotating the 
sensor counterclockwise and clockwise at some predefined rotation rates us­ing 
the turntable according to angular rate test methodology (Section 3.3.2). 
Scale  factor error of gyroscopes and accelerometers cause the same effect as 

	
MEMS Inertial Sensors Errors	
39
that of the respective sensor bias. The gyroscope scale factor error causes po­­
sition error proportional to t3 while accelerometer scale factor error causes 
position error  proportional to t2.
Nonorthogonality/Misalignment Errors
3.2.3   
Axes nonorthogonality is the error resulting from the imperfection in mounting 
the sensors at the time of manufacturing as illustrated in Figure 3.5 [5–7]. In 
addition, there could be a mounting misalignment error between the sensitive 
axes of the inertial sensors and the orthogonal axis of the body (Figure 3.6). In 
both cases, each axis is affected by the measurements of the other two axes.
The nonorthogonality errors are unitless, and generally expressed as 
parts per million. Consider an orthogonal triad of stationary accelerometers 
placed on a plane, which is tilted by a small angle dq with respect to the y-axis 
(generally, called a roll) as shown in Figure 3.6. Due to this tilt, each acceler­
ometer will measure a component of Earth’s gravity g. In the z-direction, it 
will measure fz = g cos dq and in the x-direction it will measure fx = g sin dq. 
Similarly, if the unit is tilted by a small angle dq with respect to the x-axis 
(generally called a pitch), the z-axis experiences fz = g cos dq and the y-direction 
measures fy = g sin dq.
0
200
400
600
800
1,000
1,200
1,400
1,600
1,800
−4
−3
−2
−1
0
1
2
3
4
Time Epochs
Gyroscope Z
Scale Factor Error (%)
Figure 3.4  Scale factor error of a typical MEMS gyroscope.

40	
MEMS-Based Integrated Navigation
Z’
X
Y
Z
θzy
θzx
Figure 3.5  Nonorthogonality error due to manufacturing imperfections.
X
g
Ideal X
Z
δθ
Figure 3.6  Mounting misalignment.
For very small angles, we can approximate fz = g cos dq ª g and fx = g sin 
dq ª g dq. Thus a small misalignment error with respect to the y- and x-axis 
causes errors in the x- or y-directions, respectively, as given by (3.5).
	
v
g
g
t
p
v
g
g
t
=
=
⇔
=
=
=
∫
∫∫
∫
δθ
δθ
δθ
δθ
dt
dt
dt
1
2
2 	
(3.5)

	
MEMS Inertial Sensors Errors	
41
Run-to-Run (Repeatability) Bias/Scale Factor
3.2.4   
Run-to-run bias or scale factor is the variation in bias or scale factor for each 
run. Basically every time the sensor is switched on, a slightly different bias or 
scale factor value is observed [1]. However, this error remains constant dur­
ing a particular run. Note that these errors are significant only for low-cost 
sensors. The gyroscope bias and scale factor run-to-run errors along with the 
residual systematic bias or scale factor of a single-axis low-cost MEMS sensor 
are shown in Figures 3.7 and 3.8.
1
2
3
4
5
0.2
0.25
Gyroscope Bias Repeatability  (°/sec)
1
Runs
Bias GyroZ
(°/sec)
Bias GyroY
(°/sec)
Bias GyroX
(°/sec)
1
2
3
4
5
1
2
3
4
5
0.2
0.3
0.4
0.85
0.8
Figure 3.7  Gyro bias repeatability.
1
2
3
4
5
0.35
0.36
0.37
0.38
0.39
0.4
0.41
Runs
Gyro X
Figure 3.8  Gyro scale factor repeatability.

42	
MEMS-Based Integrated Navigation
In these results, biases and scale factor errors are calculated according to 
the 6-position static test and angular rate test (Section 3.3) for each of the five 
runs separated by half-hour time intervals.
In Run (Stability) Bias/Scale Factor
3.2.5   
This error occurs due to change in bias or scale factor during a run. Scale fac­
tor stability is the capability of the inertial sensor to remain invariant when 
continuously exposed to a fixed operating condition [5–7]. The deterministic 
portion of the in-run bias/scale factor error is caused by changing environ­
mental conditions, such as temperature, and can be modeled. Nevertheless, 
the remaining component is hard to model and is considered a random or 
stochastic process.
Sensors are left running continuously for over two hours in the lab. Every 
hour the collected data is calibrated to obtain biases and scale factor drifts. 
The obtained biases and scale factor errors variations for low-cost MEMS 
gyroscopes are shown in Figures 3.9 and 3.10, respectively. As these errors 
cannot be easily separated from the sensor data, these are generally modeled 
as stochastic processes.
0
1,000
2,000
3,000
4,000
5,000
6,000
0.24
0.26
0.28
0.2
0.25
0.3
0.8
0.85
0.9
Time (sec)
0
1,000
2,000
3,000
4,000
5,000
6,000
0
1,000
2,000
3,000
4,000
5,000
6,000
Bias GyroZ
(°/sec)
Bias GyroY
(°/sec)
Bias GyroX
(°/sec)
Figure 3.9  Gyro bias stability.

	
MEMS Inertial Sensors Errors	
43
0
1,000
2,000
3,000
4,000
5,000
6,000
0.32
0.33
0.34
0.35
0.36
0.37
0.38
Time (sec)
GyroX
Figure 3.10  Gyro scale factor error stability.
Temperature-Dependent Bias/Scale Factor
3.2.6   
This error is the variation of bias and scale factor errors with the change in 
sensor temperature [8, 9]. The temperature-dependent variations can be quite 
pronounced in very low-cost MEMS sensors and for certain applications may 
require reliable mitigation techniques. These variations are estimated by thermal 
testing procedures, which measure the discrepancy of basic sensor parameters 
when operated under different temperatures [1, 8].
Calibration of Systematic Sensor Errors
3.3   
Calibration is the process of comparing instrument outputs with known ref­
erence information and determining the coefficients that force the output to 
agree with the reference information over a range of output values. Generally, 
calibration methods such as the 6-position static method and rate tests are 
used for this purpose. These methods used for calibrating IMUs are primarily 
designed for high-quality sensors, such as navigation or tactical grade IMUs. 
For low-cost automotive grade sensors, the above methods are modified using 
specialized instruments like turntables.

44	
MEMS-Based Integrated Navigation
6-Position Static Test
3.3.1   
The 6-position static and rate tests are among the most commonly used [8] 
calibration methods. The 6-position method involves mounting the inertial 
system on a leveled surface with sensitive x-, y-, and z-axes of the IMU point­
ing alternately up and down. For a triad of orthogonal sensors, this results 
in a total of 6 positions. The bias and scale factor errors are calculated using 
(3.6) and (3.7).
	
b
l
l
f
up
f
down
=
+
2
	
(3.6)
	
S
l
l
K
K
f
up
f
down
=
−
−
×
×
2
2
	
(3.7)
where l f
up  is the sensor measurement when the sensitive axis is pointed upward, 
l f
down  is the measurement when the sensitive axis is pointed downwards and 
K is the known reference signal. For accelerometers, K is the local gravity 
constant, and for gyroscopes K is the magnitude of the Earth’s rotation rate 
projection to the vertical at a given latitude. The current 6-position static tests 
cannot calibrate automotive-grade sensors as bias instability and noise levels 
completely mask the Earth’s rotation rate projected reference signal. Further­
more, this standard calibration method cannot estimate the axes misalignments 
(nonorthogonalities) of the IMU.
To estimate the nonorthogonalities, an improved 6-position test can be 
performed, which takes into account all three types of errors. In matrix form, 
the output of a triad of sensors (e.g., accelerometers) can be represented as:
	
l
l
l
m
m
m
m
m
m
m
m
ax
ay
az
xx
xy
xz
yx
yy
yz
zx
z










=
y
zz
x
y
z
ax
ay
az
m
a
a
a
b
b
b






















+




















=
or
l
l
l
m
m
m
ax
ay
az
xx
xy
xzz
ax
yx
yy
yz
ay
zx
zy
zz
az
M
b
m
m
m
b
m
m
m
b












1
2
2
444
3
444 {
a
a
a
x
y
z
a
1














	

(3.8)

	
MEMS Inertial Sensors Errors	
45
Here the diagonal m elements represent the scale factors, the off diagonal 
elements are the nonorthogonalities, and the b components are the biases. By 
aligning the IMU using the standard 6-position method, the ideal accelera­
tions would be measured as:
a
g
a
g
a
1
2
3
0
0
0
0
'
'
'
, 
, 
=










=
−










=
0
0
0
0
0
0
4
5
g
a
g
a
g










= −










=
, 
, 
'
'










=
−










,  'a
g
6
0
0
	
(3.9)
Consequently, the design matrix (A) for the least squares adjustment 
will have the form:
	
A = 



a
a
a
a
a
a
1
2
3
4
5
6
1
1
1
1
1
1
'
'
'
'
'
'
	
(3.10)
The raw output of the sensors (in volts) constitutes the matrix U:
	
U = 

u
u
u
u
u
u
1
2
3
4
5
6 	
(3.11)
	
where u
l
l
l
u
l
ax
ay
az
XaxisUP
a
ax
1 =










=
, 
l
l
ay
az
XaxisDOWN










and so on.
The objective is to extract the components of the matrix M in (3.8) using 
the least squares method as follows:
	
M = U ◊ AT ◊ (AAT )–1	
(3.12)
Angular rate tests are used for calibrating scale factors and nonorthogo­
nalities of the gyroscopes. If both rate tests and the improved 6-position static 
method are used together, one can determine all the inertial sensor errors for 
low-cost MEMS sensors.
Angular Rate Test
3.3.2   
Angular rate tests are used for calibrating the biases, scale factors, and nonor­
thogonalities of gyroscopes for automotive-grade navigation systems. Rate tests 
are typically done using a precise rate turntable as demonstrated in Figure 3.11. 

46	
MEMS-Based Integrated Navigation
By rotating the unit through given turning rates and comparing the outputs 
of the IMU to these references, the biases, scale factors, and nonorthogonali­
ties are estimated using the same method as explained in Section 3.3.1. This 
is typically accomplished by rotating the table through a defined angular rate 
in both clockwise and counterclockwise directions.
Thermal Calibration Test
3.3.3   
There are two main approaches for thermal testing. The first allows the IMU 
enclosed in the thermal chamber to stabilize at a particular temperature cor­
responding to the temperature of the thermal chamber and then records the 
inertial sensor data. This method of recording the data at specific tempera­
ture points is called the soak method. The second method known as the ramp 
method, the IMU temperature is linearly increased or decreased for a certain 
period of time [8, 10]. After thermal testing, the sensors are calibrated for the 
temperature-dependent variations using simple modeling techniques. The 
thermal calibration is defined in the following example.
In order to compensate for the thermal drifts of low-cost MEMS sensors, 
thermal calibration may be conducted to estimate the biases and scale factor 
variations of the sensors over a range of temperatures. For this example, the 
temperature range is from –25°C to 70°C. In the test setup [1, 2] a turntable 
and a thermal chamber are assembled together to form a thermal turntable 
unit as shown in Figure 3.12.
Figure 3.11  CIU unit on the turntable.

	
MEMS Inertial Sensors Errors	
47
Figure 3.12  Thermal test setup.
The rotating axis of the turntable is extended into the thermal cham­
ber through a narrow round opening in the chamber’s side wall. A low-cost 
MEMS IMU custom inertial unit (CIU) is placed in the chamber and is 
fixed on the extended tabletop of the turntable. This placement of the IMU 
allows the freedom of rotating it under controlled temperature. The data is 
collected in the Inertial Lab at the University of Calgary [1]. The IMU sig­
nals are sampled at 100 Hz at different temperatures and saved on a laptop 
via a 16-bit A/D card (DAQCard-6036E) from National Instrument for 
postprocessing. The calculated biases for accelerometers and gyroscopes at 
different temperatures by the soak method are shown in Figures 3.13 and 
3.14, respectively.
For accelerometers, the bias drift can be as high as 1 m/s2, while for 
gyroscopes the drift in biases can reach 5°/sec over the whole temperature 
range. Please note the constant bias estimated from the improved 6-position 
static test is first removed from each calculated bias at different temperature 
points. Furthermore, the biases for accelerometer and gyroscopes by the ramp 
method (with temperature gradient of 0.2°/sec) are shown in Figures 3.15 and 
3.16, respectively.
As observed from Figures 3.13–3.16, the biases of accelerometers and 
gyroscopes vary significantly with temperature, and hence should be modeled 
to get accurate navigation results.

48	
MEMS-Based Integrated Navigation
Figure 3.13  Thermal variation of accelerometer bias by the soak method.
Figure 3.14  Thermal variation of gyroscope bias by the soak method.

	
MEMS Inertial Sensors Errors	
49
Figure 3.15  Thermal variation of accelerometer bias by the ramp method.
Figure 3.16  Thermal variation of gyroscope bias by the ramp method.

50	
MEMS-Based Integrated Navigation
Figures 3.15 and 3.16 illustrate the biases and scale factor error drifts with 
temperature obtained from the ramp method. It is evident that these figures 
are very different from the ones obtained previously (Figures 3.13 and 3.14) 
by the soak method. This is because the temperature of the thermal chamber 
may not be the same as that of the IMU.
Similar to bias, the scale factor variation is also estimated for the soak 
and ramp methods. The scale factor error variation with temperature for 
accelerometer x and gyroscope z using the soak method is provided in Figure 
3.17. After collecting the calibration parameters by different methods, thermal 
compensation models by simple linear interpolation methodology are obtained 
for each of the calibration methods.
In addition to the temperature-dependent correction parameters obtained 
by the soak and ramp methods, the sensor manufacturer also provides the 
temperature correction parameters. The manufacturer-provided parameters are 
different from the parameters obtained by the two lab tests. The objective of 
these thermal calibration and compensation tests is to establish which method 
is better, and if there is a need for these time-consuming calibrations by the 
soak and ramp methods or if manufacturer’s specifications be used.
Figure 3.17  Thermal variation of accelerometer and gyroscope scale factor by the soak 
method.

	
MEMS Inertial Sensors Errors	
51
Real field test data is used to evaluate the advantages and disadvantages of 
thermal compensation methods. Kinematic data collected in December 2005 
by the Mobile Multi-Sensors research group (MMSS) is used for this analysis. 
The test data is collected with CIU, which is installed in the cargo area of a test 
vehicle. The test data is integrated with NovAtel Inc. OEM4 receiver single 
point positioning GPS (SPP GPS) solution. For the reference trajectory, a 
solution from a navigation-grade inertial system from Honeywell is integrated 
with differential GPS (DGPS) positions from the same OEM4 receiver.
The quality of the position estimation is often evaluated by simulating 
a set of short-term GPS signal outages where the inertial system works as a 
standalone navigation system. The IMU position errors during these short-
term GPS signal outages are obtained by comparing the position errors to 
the reference trajectory solution. For example, in Figure 3.18 GPS signal 
outages of 30-seconds each are simulated in the field test dataset. This figure 
demonstrates the values of position errors obtained for all 4 GPS outages by 
the 6-position static test and the 2 lab temperature calibration tests (i.e., the 
soak and ramp methods).
It is clear that the position drift errors are the least for the soak compen-
sation method followed by the 6-position static test method. For the ramp 
compensation method, the position drifts are significantly larger than the 
6-position method.
Similarly, a second dataset is collected and analyzed, and results are 
obtained with longer GPS signal outages of 60-seconds each. Figure 3.19 
Figure 3.18  Position drift errors for CIU data by three methods.

52	
MEMS-Based Integrated Navigation
demonstrates the results for 6-position without any thermal calibration, soak 
method, ramp method, and the 6-position manufacturer-specified thermal 
correction values. The results from the ramp compensation method are over 
500m and are not shown in the figure.
After compensating for the biases and scale factor errors by the soak, 
ramp, and manufacturer’s datasheet values methods, we establish that the soak 
method is the best way to compensate the thermal variations effects. We fur­
ther observe that the effect of thermal calibration is more evident when there 
is gradual variation in the temperatures of the collected data as compared to 
sudden gradual changes (for example, opening the door of the heated vehicle 
when the outside temperature is –30°/C).
Figure 3.20 illustrates typical deterministic and stochastic MEMS sensor 
errors. Note that if thermal errors are not calibrated and compensated, these 
errors can be classified as random errors.
Figure 3.20  MEMS inertial sensor errors.
Figure 3.19  Drift errors for CIU data by three methods.

	
MEMS Inertial Sensors Errors	
53
Random errors include the remaining in-run errors, accelerometer and 
gyroscope noises, residual systematic errors, and run-to-run variation errors. 
Since these error sources cannot be separated from the actual vehicle signal, 
these are best expressed by lumped parameters in the state vector.
Random/Stochastic Errors
3.4   
Stochastic errors are the random errors that occur due to random variations of 
bias or scale factor over time, and are known as bias or scale factor drifts [1, 4, 
12, 13]. The drift may also occur if other electronic equipment interferes with 
the output signals. The errors are random but can be modeled by stochastic 
processes. It is important to understand the differences among the stochastic 
processes to implement the most appropriate model for the dataset.
Examples of Random Processes
3.4.1   
The basic difference between deterministic and stochastic modeling is that 
a deterministic modeling relationship has to be established between one or 
more inputs and one or more outputs, whereas in stochastic modeling, there 
may not be any direct relationship between the inputs and outputs [2]. Some 
common types of random processes are given in the following subsections that 
may be used to describe the random errors for the sensors.
Gaussian Random Process
3.4.1.1   
A Gaussian random process x(t) is one characterized by the property that joint 
probability distribution functions of all orders are multidimensional normal 
distributions [13]. For a Gaussian process, the distribution of x(t) for any 
time t is the normal distribution, for which the density function is expressed 
by (3.13).
	
f
x
X
t
t
e
x
(
)
(
)
=
−
−
1
2
1
2
2
σ
π
µ
σ
	
(3.13)
where m is the mean and s2 is the variance of the Gaussian process. If x(t) is 
an n-dimensional Gaussian vector then the distribution of x(t) is the normal 
distribution expressed by (3.14).
	
f
x
X
t
t
n
T
x
x
(
)
(
) /
exp[
(
)
(
)]
=
−
−
−
1
2
2
2
1
2
π
σ
µ
σ
µ
	
(3.14)

54	
MEMS-Based Integrated Navigation
All statistical properties of a Gaussian random process are defined by the 
first- and second-order moments of the distribution and are the easiest and 
most commonly used distribution [13].
Gauss-Markov Random Process
3.4.1.2   
A stationary Gaussian process x(t) that has an exponential autocorrelation 
is called a Gauss-Markov process [12, 13]. The autocorrelation and spectral 
functions are given by (3.15) and (3.16), respectively [14].
	
R
e
x
t
( )
| |
τ
σ
β
=
−
2
	
(3.15)
	
Sx jw
w
(
) =
+
2
2
2
2
σ β
β
	
(3.16)
where b is the inverse of correlation time (1/e point) as shown in Figure 
3.21.
The spectral density function is obtained by taking the Fourier transform 
of the autocorrelation function as shown in (3.17)–(3.19).
	
Sx jw
d
e
e
jw
(
)
| |
=
−
−∫
−
σ
τ
β τ
τ
2
∞
∞
	
(3.17)
	
Sx jw
d
d
e
e
e
e
jw
jw
(
) =
+
+
−
−∫
∫
−
−
σ
τ
σ
τ
βτ
βτ
τ
τ
2
0
2
0
∞
∞
	
(3.18)
t
2
σ
Noise variance
τ
τ
Correlation time
Figure 3.21  Autocorrelation function of Gauss-Markov process.

	
MEMS Inertial Sensors Errors	
55
w t( )
Shaping filter
x t( )
S jw
(
) = 1
w
R ( ) = ( )
τ
δ τ
w
S jw
(
)
x
R ( )τ
x
Figure 3.22  Shaping filter.
	
Sx jw
d
d
e
e
e
e
jw
jw
(
) =
+
+
−
−∫
∫
−
−
σ
τ
σ
τ
βτ
βτ
τ
τ
2
0
2
0
∞
∞
	
(3.19)
This process can be modeled by passing white noise through simple 
shaping filters as shown in Figure 3.22.
The system model for the shaping filter can be written by (3.20).
	
H jw
H
jw
jw
jw
(
)
(
)
⋅
−
=
+
−
2
2
2
2
σ β
β
σ β
β
	
(3.20)
Taking the Laplace transform, we obtain (3.21).
	
H s
H
s
s
s
( )
(
)
⋅
−
=
+
−
2
2
2
2
σ β
β
σ β
β
	
(3.21)
The steady-state transfer function is then given by (3.22).
	
H s
s
( ) =
+
2
2
σ β
β
	
(3.22)
or
	
x s
w s
s
( )
( ) =
+
2
2
σ β
β
	
(3.23)
	
β
σ β
x s
sx s
w s
( )
( )
( )
+
=
2
2
	
(3.24)

56	
MEMS-Based Integrated Navigation
Now taking the inverse Laplace transform of (3.24), we obtain (3.25).
	
&x t
x t
w t
( )
( )
( )
= −
+
β
σ β
2
2
	
(3.25)
where the spectral density is 2s2b.
Generally, for most of the low-cost inertial systems (gyroscope drift 
100–1,000°/h), the first-order Gauss-Markov model is utilized to describe 
random errors associated with inertial sensors. This Gauss-Markov model 
is represented by the system and measurement model of the following 
form.
	
x(k) = Φk–1x(k – 1) + Gk–1w(k – 1)	
(3.26)
	
z(k) = x(k)	
(3.27)
where Φk–1 is the state transition matrix, Gk–1 is the shaping filter, x(k) is the 
state vector, and z(k) is the measurement vector.
The undefined matrices are obtained through the following steps:
Multiply (3.26) by 
1.	
x(k – 1) and take the expectation.
E[x(k)x(k – 1)] = Φk–1E[x(k – 1)2] + 
Gk–1E[w(k – 1)x(k – 1)]	

(3.28)
As E[w(k – 1)x(k – 1)] = 0, E[x(k – 1)2] = s2, and E[x(k)x(k – 1)] 
= s2e–b, we obtain (3.29).
 
Φk–1 = e–b	
(3.29)
Square each term and take the expectation of each term.
2.	
	
E[x(k)2] = Φk–1E[x(k – 1)2] + Gk–1E[w(k – 1)2]	
(3.30)
On substituting known values and using E[w(k – 1)2] = 0, we 
obtain
	
σ
σ
2
1
2
2
1
2
=
+
−
−
Φk
k
G
	
(3.31)
Substituting value of 
3.	
Φk–1 from (3.29), we obtain
	
Gk
e
−=
−
−
1
1
2
σ
β
(
) 	
(3.32)
The complete model becomes

	
MEMS Inertial Sensors Errors	
57
	
x k
x k
w k
e
e
( )
(
)
(
) (
)
=
−
+
−
−
−
−
β
β
σ
1
1
1
2
	
(3.33)
where the covariance matrix is s2(1 – e–2b).
This model is incorporated to define a process that exhibits a low correla­
tion between values, which are well separated in time. If the estimation period 
of a process is smaller than the time constant of the Gauss-Markov process, the 
process can be modeled by the random walk (RW) process [12].
Random Walk Process
3.4.1.3   
The RW process results when uncorrelated signals are integrated. For RW 
processes the difference between two immediate time epochs of a random 
variable is a purely random/white sequence, as given in (3.34).
	
&b t
w t
( )
( )
=
	
(3.34)
where b
.
(t) is a random variable with spectral density E[w(t)w(t)] = q(t)d​(t – t), 
q(t) is the magnitude, and w(t) is white noise. The RW process is obtained 
when the white noise process is integrated. The corresponding discrete time 
representation is given by (3.35).
	
b(k) – b(k – 1) = w(k – 1)	
(3.35)
with the noise covariance given by q(k) = q(tk – tk–1).
The RW took its name from considering an analogy with a person walk­
ing with a fixed step length (distance) in arbitrary directions. Note that RW 
is a nonstationary process as state uncertainty increases linearly with time. 
Gyroscope and accelerometer signals, which contain white noise components, 
are integrated to obtain angle and velocity. Hence angle and velocity values 
are corrupted with these integrated white noise components called angular 
random walk (ARW) and velocity random walk (VRW). ARW is the average 
deviation rate from the true value after the integration [12]. Similarly, for 
accelerometers the average deviation rate from the true value after integration 
of the acceleration is known as VRW. These effects need to be modeled as they 
are totally random in nature and cannot be removed by calibration.
Stochastic Modeling
3.5   
Inertial sensor random errors are modeled by passing a white noise through 
shaping filters to yield an output of time-correlated noises. The values of the 

58	
MEMS-Based Integrated Navigation
shaping filter parameters are estimated through minimization of the differences 
between the output of the shaping filter and the actual inertial sensor noise 
process. Two common methods of identifying and modeling the involved 
random processes are discussed in the following subsections.
Autocorrelation Function
3.5.1   
In this method, the parameters are computed by evaluating the autocorrela­
tion function of raw static data [13]. First, static data is collected for a long 
period of time. The longer the dataset, the better the process identification 
is, and more accurate parameter estimation occurs. The computation and 
plotting of the autocorrelation function will define the type of random 
process. Although seemingly straightforward, the procedure is often com­
plicated by the fact that data may not be taken over a sufficient period of 
time and therefore other methods are generally used [13]. Another method 
for stochastic modeling is evaluating the power spectral density (PSD) of 
the data. The PSD is the Fourier transform of the autocorrelation function 
of the signal if the signal can be treated as a wide-sense stationary random 
process. The most common modeling technique to determine the charac­
teristic of the underlying random inertial sensor noise for low-cost MEMS 
IMUs is the Allan variance [5] technique. It helps identify the source of a 
given noise term in the data.
Allan Variance Methodology
3.5.2   
Allan variance is a method of representing root mean square (RMS) random 
drift error as a function of averaged time. Consequently, Allan variance method 
is incorporated to determine the characteristics of the underlying random pro­
cesses that give rise to data noise [2, 5–7]. The data is normally plotted as the 
square root of the Allan variance versus T on a log-log plot. For very low-cost 
MEMS IMUs, we are mainly concerned with the high frequency noise terms 
that have a correlation time much shorter than the sample time and contribute 
towards the ARW,VRW, or low-frequency Gauss-Markov’s model parameters. 
The Allan variance for VRW is given by (3.36).
	
σ( )
T
Q
T
=
	
(3.36)
where Q is the VRW coefficient, and each cluster has time T, which is equal 
to nto as shown in Figure 3.23.

	
MEMS Inertial Sensors Errors	
59
T=nto
T=nt o
to
n
2n 1
−
N
1  2  3
Figure 3.23  Data structure used by the Allan variance.
10
−2
10 0
10 2
10 4
10−3
10−2
10−1
Allan Standard Deviation vs. Cluster Times
Cluster Times (sec)
Allan Standard Deviation (m/s  )
2
Acc Y
Acc X
Acc Z
Figure 3.24  CIU accelerometer Allan variance results.
Equation 3.36 indicates that a log-log plot of s(T) versus T has a slope 
of –1/2. Furthermore, the numerical value of Q can be obtained directly by 
reading the slope line at T = 1 sec from Figures 3.24 and 32.5. A log-log 
plot of s(T) versus T provides a direct indication of the types of random 
processes, which exist in the inertial sensor data. The calculated VRW and 
ARW values are listed in Table 3.1.

60	
MEMS-Based Integrated Navigation
Figure 3.25  CIU gyroscope Allan variance results.
Table 3.1
Error Characteristics of CIU
Velocity Random Walk for 
Accelerometers
(m s
hr
/ /
)
Angular Random Walk for 
Gyroscopes
(deg/
hr )
Acc x
Acc y
Acc z
Average
Gyro x
Gyro y
Gyro z
Average
0.189
0.181
0.179
0.183
1.985
2.203
2.580
2.256
These parameters are required for designing the process noise matrix (Q) 
to be used in the extended Kalman filter algorithm in the GPS/INS integrated 
navigation systems. Details are provided in Chapters 6. At this point, we have 
defined all the possible error sources for the low-cost MEMS sensors. We now 
provide the complete error models that incorporate the errors defined earlier 
in Sections 3.2 and 3.4.
Sensors Measurement Models
3.6   
Sensor measurement models, as the name indicates, are used to define different 
components of a measured signal. For example, every real sensor measure­

	
MEMS Inertial Sensors Errors	
61
ment consists of constant errors such as systematic and random errors. The 
following subsections discuss the details of sensor measurement models for 
accelerometers and gyroscopes.
Accelerometer Measurement Model
3.6.1   
Accelerometers measure the specific force of the body but usually consist of 
unwanted systematic and nonsystematic signal components as shown from 
(3.37) [4].
	
If = f + bcons + brandom + (Scons + Srandom)f + S2f 2 + Nf + dg + e(f )	(3.37)
where If is the actual measurement in (m/s2); f  is the true specific force (m/s2); 
bcons is the constant portion of the bias removed by calibration process (m/s2); 
brandom is the remaining random portion of the bias modeled in the integrated 
INS/GPS algorithm (m/s2); Scons and Srandom are the constant and random por­
tions of the linear scale factor (ppm or %); S2 is the nonlinear scale factor (ppm 
or %); N represents the nonorthogonalities (ppm or %); dg is the anomalous 
gravity (deviation from the theoretical gravity value) (m/s2); and e( f ) is the 
accelerometer sensor noise (m/s2).
Gyroscope Measurement Model
3.6.2   
A gyroscope is an angular rate sensor that provides either angular (rate sensing 
type) or attitude (rate integrating type) rates. The following model represents 
the single-axis gyroscope measurement of the angular rate.
	
Iw = w + bcons + brun–to–run + bin–run + Sw + Nw + e(w)	
(3.38)
where Iw is the measurement (°/sec); w is the true angular velocity (°/sec); bcons 
is the constant portion of the bias removed by the calibration process (°/sec); 
brandom is the remaining random portion of the bias modeled in the integrated 
INS/GPS algorithm (°/sec); Scons and Srandom are the constant and random 
portions of gyroscope scale factor (ppm or %); bw is the gyroscope instrument 
bias (°/sec); S is the gyroscope scale factor; N is the nonorthogonalities of the 
gyroscope (ppm or %); and e(w) is the gyroscope sensor noise (°/sec).
We have defined the signal and provided the error removal or modeling 
techniques for low-cost MEMS sensors. Is this enough to start a meaningful 
navigation?

62	
MEMS-Based Integrated Navigation
References
Aggarwal, P., et al., “A Standard Testing and Calibration Procedure for Low Cost MEMS 
[1]	
Inertial Sensors and Units,” Journal of Navigation, Vol. 61, No. 2, 2007, pp. 323–336.
Hou, H., and El-Sheimy, N., “Inertial Sensors Errors Modeling Using Allan Variance,” 
[2]	
Proceedings of ION GNSS 2003, Portland, Oregon, Sept. 9–12, 2003.
Hide, C.D., 
[3]	
Integration of GPS and Low Cost INS Measurements, Ph.D. thesis, Institute 
of Engineering, Surveying and Space Geodesy, University of Nottingham, U.K., 2003.
El-Sheimy, N., “Inertial Techniques and INS/DGPS Integration,” ENGO 623—course 
[4]	
notes, Department of Geomatics Engineering, University of Calgary, Canada, 2006.
IEEE Std 952-1997, “IEEE Standard Specification Format Guide and Test Procedure 
[5]	
for Single-Axis Interferometric Fiber Optic Gyros.”
IEEE Std 1139-1988, “IEEE Standard Definitions of Physical Quantities for Funda­
[6]	
mental Frequency and Time Metrology.”
IEEE Std 1293-1998, “IEEE Standard Specification Format Guide and Test Procedure 
[7]	
for Linear, Single-Axis, Non-gyroscopic Accelerometers.”
Titterton, D., and Weston, J.L., 
[8]	
Strapdown Inertial Navigation Technology, Second Edi­
tion, Bodmin, U.K.: American Institute of Aeronautics and Astronomy (AIAA), 2004, 
p. 558.
Walid, A.H., “Accuracy Enhancement of Integrated MEMS-IMU/GPS Systems for Land 
[9]	
Vehicular Navigation Applications,” Ph.D. Thesis, Department of Geomatics Engineer­
ing, University of Calgary, Canada, UCGE Report No. 20207, 2005.
Shcheglov, K., et al., “Temperature Dependent Characteristics of The JPL Silicon MEMS 
[10]	
Gyroscope,” IEEE Aerospace Conference Proceedings, Vol. 1, Mar 18–25, 2000.
Park, M., “Error Analysis and Stochastic Modeling of MEMS Based Inertial Sensors for 
[11]	
Land Vehicle Navigation Applications,” M.Sc. thesis, Department of Geomatics Engi­
neering, University of Calgary, Canada, UCGE Report No. 20194, 2004.
Brown, R.G., and Hwang, Y.C., 
[12]	
Introduction to Random Signals and Applied Kalman 
Filtering, Second Edition, New York: John Wiley & Sons Inc., 1992.
Gelb, A., 
[13]	
Applied Optimal Estimation, Cambridge, MA: The Massachusetts Institute of 
Technology Press, 1974.
Grewal, A.P., and Andrews, M.S., 
[14]	
Kalman Filtering Theory & Practice Using MATLAB, 
Third Edition, N.J.: Wiley-IEEE Press, 2008.

63
4
Initial Alignment of 
MEMS Sensors
Introduction
4.1   
The procedure of determining the initial values of the attitude angles (pitch, 
roll, and azimuth) is known as alignment [1–3]. It is essential to align an 
inertial system before the start of navigation since any errors in the initial atti­
tude angles may lead to relatively large position errors in the long term, thus 
deteriorating the overall performance and often leading to filter divergence. 
In general, the alignment procedure involves accelerometers and gyroscopes 
to monitor the specific forces and angular velocities along their respective 
orientation in space. Unless the inertial system is somehow aligned with the 
vehicle, the information provided by MEMS inertial sensors is not useful for 
navigating the vehicle [4]. Moreover, navigation is not possible if the IMU and 
the vehicle are perfectly aligned but the orientation of the IMU is unknown 
in some stable reference frame [5].
A complete flow chart of Chapter 4 is provided in Figure 4.1. To under­
stand alignment, the reader must familiarize himself/herself with reference 
frames. Reference [1] is a good text to understand the reference frames, espe­
cially inertial frame, local level frame, and body frame.
Generally for alignment, it is assumed that the body frame (b-frame) 
of the vehicle and the inertial system are exactly the same and, therefore, the 
b-frame can be used interchangeably for the moving body or IMU frames as 
shown in the left panel of Figure 4.2.

64	
MEMS-Based Integrated Navigation
Initial alignment of MEMS
inertial sensors
Special considerations
Portable navigation
Relative alignment
Absolute alignment
Static alignment
Velocity matching
Transfer alignment
Figure 4.1  Flowchart for Chapter 4.
zvehicle
zIMU
yIMU, yvehicle
IMU
vehicle
yIMU
xvehicle
xIMU
vehicle
zvehicle
yvehicle
zIMU
yIMU
yvehicle
yIMU
xvehicle
xIMU
IMU
IMU
IMU
IMU
zvehicle
zIMU
yIMU, yvehicle
zvehicle
zIMU
yIMU , y vehicle
IMU
vehicle
yIMU
xvehicle
xIMU
vehicle
IMU
zvehicle
yvehicle
zIMU
yIMU
yvehicle
yIMU
xvehicle
xIMU
IMU
IMU
IMU
IMU
IMU
IMU
IMU
IMU
z
y
z
y
vehicle
vehicle
IMU
IMU
vehicle
IMU
vehicle
IMU
vehicle
IMU
z
z
y
y
x
x
IMU
(a)
(b)
IMU
vehicle
IMU
vehicle
vehicle
z
y
x
x
z
y
Figure 4.2  (a) shows a perfectly aligned IMU with the vehicle. (b) shows that the IMU is 
misaligned with respect to the vehicle frame.

	
Initial Alignment of MEMS Sensors 	
65
There are times, however, when we have to distinguish between the 
b-frame of the IMU from the vehicle frame or v-frame. This is especially true 
for portable navigation systems in which a user is responsible for mounting 
the navigation system on the vehicle. In this situation, there is no guarantee 
that the IMU b-frame will coincide with the v-frame as shown in the right 
panel of Figure 4.2. MEMS sensors have opened the possibilities of such por­
table systems, and, therefore, we must look at the issues involved with their 
orientation.
When the IMU (b-frame) is aligned with the v-frame, the next step is 
to align the b-frame with the l-frame. This alignment and orientation is well 
developed and documented in literature [1, 2] and hence, the main focus of 
this chapter is to provide an overview of the different alignment methods, 
which can be used for low-cost MEMS sensors.
Considerations for MEMS Sensor Navigation
4.2   
With the introduction of compact, low-power, and cost-efficient MEMS sen­
sors, it is possible to have portable integrated INS/GPS navigation modules 
[7–9]. Recently, consumer navigation systems have become popular. GPS-based 
positions are displayed to the user on a digital map as shown in Figure 4.3. 
Despite their popularity, the recent systems suffer from reliability issues due 
to the GPS signal outages that can happen in urban areas. An easy solution to 
this problem is to integrate MEMS inertial sensors but the alignment of the 
unit becomes a critical issue.
Figure 4.3  A possible future trend in portable navigation.

66	
MEMS-Based Integrated Navigation
There are two types of alignment that are required before the navigation 
parameters can be estimated for a portable navigation module. The first align­
ment is the alignment of the IMU axes with respect to the vehicle axes (i.e., 
making b-frame coincide with v-frame), which is called relative alignment. 
Once relative alignment is achieved, the next step is to align the b-frame with 
the l-frame, which is called the absolute alignment. Refer to Figure 4.4 for a 
summary of the navigation process. There is a great deal of information available 
for b-frame with l-frame alignment and the reader is encouraged to consult 
[4–6]. To date, there is no discussion on the topic of b-frame and v-frame 
alignment (i.e., relative alignment), which is quite important for MEMS-based 
integrated INS/GPS navigation. In this chapter we are concentrating more on 
the relative alignment case.
Portable Navigation System
4.3   
A portable navigation system is a system that can be carried by the user from 
a vehicle and be used for on-foot navigation needs. Recently, smart phones 
have provided such portability to the users using assisted GPS (AGPS). AGPS 
assists the GPS receiver to only look for the satellites that are visible accord­
X
−Z
X
Y
Relative
Alignment
Absolute
Alignment
Navigation
Equations
Full IMU
−Z
Y
Full IMU
−Z
X
Y
Full IMU
Figure 4.4  Summary of the navigation process.

	
Initial Alignment of MEMS Sensors 	
67
ing to the geographic location estimated by the cell phone positioning. The 
message that contains the satellite visibility information is broadcast via cell 
phone signals. Such information is then used by the GPS receivers to try to 
find the weak satellite signals indoors to get a position fix. However, even with 
the help of cell towers, it is difficult for GPS signals to propagate in an indoor 
environment particularly in a deep indoor structure.
Therefore, a reliable navigation system cannot be totally dependent 
on GPS or AGPS. An inclusion of the MEMS inertial sensors is one of the 
ways to overcome the navigation interruptions due to the inability of signal 
propagation in certain environments. The inertial sensors require initializa­
tion, which consists of information about the absolute position, velocity, 
and orientation of the sensors with respect to a reference frame. Orienta­
tion of sensors refers to the alignment, and it is important to first orient the 
system perfectly with the moving body (i.e., the relative alignment) before 
the process of initialization can be started. There are two strategies that can 
be implemented to address the relative alignment in the design of a portable 
navigation system:
Start the navigation from a good GPS availability area and use the 
1.	
initial attitude errors from the navigation KF as the orientation 
parameters.
Restrict the orientation of the portable system to allowable limits.
2.	
There are advantages and disadvantages for both methods. Let us begin 
by analyzing the first strategy in detail. In this approach, the user does not need 
to orient the portable system and thus it is considered user friendly. However, 
to make the inertial sensors work, the system is required to stay stationary for 
a period of time to estimate roll, pitch, and initial absolute coordinates using 
GPS. Next, for heading determination, the system should be subjected to good 
dynamics under GPS lock. These restrictions are not realistic as it is quite likely 
that the system might be initialized in a vehicle parked in an underground 
parking facility. Therefore, it is sufficient to say that the condition of GPS 
availability may not be satisfactory for all common usage scenarios.
The second strategy involves limiting the orientation errors where the 
user is required to align the portable system such that the IMU b-frame and 
v-frame are in good agreement. The orientation accuracy solely depends on the 
user and it is safe to assume that even a careful user will be unable to properly 
align the system on each occasion. An easy way to solve this problem is the 
introduction of a holder inside the vehicle that is aligned with the vehicle and 
provides the user a feasible way to align the system for each use. This can be 

68	
MEMS-Based Integrated Navigation
explained using the analogy of computer installation. Consider the task of 
attaching a traditional keyboard to a computer. Completing this task with 
ease is possible as there is only one port on the CPU that fits the keyboard 
cable’s orientation. The introduction of a holder leads to an extra component 
required by the user. On the plus side, if such an aligned portable system is 
used, navigation can be started without the condition of a GPS signal lock.
Economical Considerations
4.4   
Economically, partial MEMS inertial sensors are more attractive for portable 
navigation modules. A partial system consists of less than six sensors, which are 
three orthogonally oriented accelerometers and three orthogonal gyroscopes. 
Gyroscopes are usually more expensive than accelerometers, and, therefore, 
it is realistic to assume that gyroscope demand is lower from an economic 
perspective [10]. Keeping this in mind, a partial inertial module can be used 
for part of the navigation module, consisting only of a heading gyroscope and 
a dual- or triaxial accelerometer.
Economically Desirable Configuration
4.4.1   
As mentioned before, for a MEMS-based inertial navigation module, a partial 
system is more desirable from an economic perspective. The relative align­
ment for the partial sensors, however, requires special attention as some of 
the information is missing. The following discussion involves options 1 and 2 
given in Section 4.3 for the partial inertial system case to ensure that the reader 
understands the details involved in implementing such a system.
Known Parameters Design
4.4.1.1   
Recall that the design of option 1 in Section 4.3 requires the availability of 
good GPS signals for the initiation of the inertial system. The initial roll and 
pitch values are estimated using the horizontal accelerometers output, whcih 
will be discussed in Section 4.5. After the initial orientation, this technique 
updates the attitude information using the Kalman filter; however, for a partial 
system, roll and pitch information cannot be observed on a continuous basis 
and with confidence due to the lack of sensors. Any change in the roll or pitch 
of the system during navigation (as presented in Figure 4.5) seriously degrades 
the navigation solution.
The only way to overcome this major problem is by implementing an 
algorithm that repeatedly looks for the change in orientation of the system and 
stops providing the heading information if a huge change is detected. Special 

	
Initial Alignment of MEMS Sensors 	
69
signal analysis is required in addition to the routine navigation algorithm 
to identify such problems. This is still an open research area and will not be 
discussed any further here.
Restrictive Design
4.4.1.2   
The second option for the relative alignment is to simply restrict the system 
orientation. There are several methods that can be used to find the criteria 
for the restrictive design using partial inertial sensor configurations. The first 
method is more labor intensive but realistic as it requires the designer to collect 
the data for all possible misalignment scenarios. Afterwards, the designer has 
to establish the restrictions depending on the acceptable degradation threshold 
of the results.
Another method is to perform simulations using different misalignment 
scenarios. This method requires perfectly aligned full IMU data to ensure that 
only the simulated misalignment is affecting the results as shown in Figure 4.6. 
Misalignments are introduced to the aligned full IMU datasets by multiplying 
the signals with the direction cosines of the misalignment angles. Later roll and 
pitch gyro measurements are removed in the Kalman filter (KF) for process­
ing. This method is purely simulation based yet it provides the results more 
quickly and is convenient to use for any number of trajectories. For example, 
due to the pitch angles, a trajectory that is collected on a level road is not the 
same as a trajectory collected on mountainous terrain.
X
Heading is corrupted
with roll and pitch
movements as the tilt
cannot be detected
during the navigation
SG-DA
−Z
Y
X
SG-DA
−Z
Y
T = 0
Navigation time epochs
Navigation starts
T = x
System tilted
Figure 4.5  An obvious problem associated with known parameters design.

70	
MEMS-Based Integrated Navigation
Misalignment
angles DCM
Misaligned dataset
Aligned dataset
−Z
X
Y
−Z
X
Y
Figure 4.6  Misalignment simulations scheme.
Misaligned
4.4.1.3   
Two different datasets are used in this example. After simulating a series of 
misalignments by multiplying the aligned data with the misalignment angles’ 
DCM, both datasets are processed in partial sensor configurations in the KF. 
For a threshold of 20% degradation with respect to the aligned estimated 
attitude results, the acceptable misalignment for roll is determined to be ±15°. 
The process is presented in Figure 4.7 where the simulations for misalignment 
were conducted for ±45° of roll misalignments, and then the acceptable mis­
alignment values were selected.
The threshold for degradation depends on the user’s requirement. It 
could be less than 20% depending on the required accuracies of the attitude. 
However, for this example, a 20% degradation was selected to show the 
procedure.
Similarly, pitch misalignment design criteria can be determined. In this 
case, the pitch angle is misaligned and the attitude angles are estimated inside 
a KF for partial sensors (i.e., the KF did not use the data from the roll and 
pitch gyroscopes). The results are provided in Figure 4.8. It is important to 
note that higher roll and pitch values result in higher heading error due to 
the lack of roll and pitch sensors. The KF is accumulating these roll and pitch 
errors in the heading. This point can be verified by examining the heading 
misalignment case, which is discussed next.
Roll and pitch misalignments need to be restricted to ±15° as they start 
to degrade the heading of the navigation solution, which is the most impor­
tant part. The heading misalignment is also studied by simulations and is 
provided in Figure 4.9. The results indicate that misalignments in the heading 
are captured by the KF solution more accurately due to the presence of the 
heading gyroscope.

	
Initial Alignment of MEMS Sensors 	
71
Figure 4.7  Procedure to obtain roll design restrictions.

72	
MEMS-Based Integrated Navigation
Figure 4.8  Procedure to obtain pitch design restrictions.

	
Initial Alignment of MEMS Sensors 	
73
Figure 4.9  Procedure to obtain heading design restrictions.

74	
MEMS-Based Integrated Navigation
The position drift errors for the two datasets are also provided in Figure 
4.10. Both the full range and the zoomed-in portion for the misalignment range 
of ±15° are shown in this figure. This example only provides an illustration of 
the design of a system that contains a certain number of sensors, which is less 
than six. This method can be used for any number of sensors for restrictive 
design criteria determination.
Complete Six DOF IMU—Economically Less Desirable
4.4.2   
Now we explore the relative alignment options for a full IMU or a complete 
six degrees of freedom (DOF) IMU. This system has all the sensors, and, in 
theory, it has the capability to measure the misalignments in roll, pitch, and 
heading attitudes. The known parameter design includes the initial alignment 
of the system using the horizontal accelerometers. The heading is computed as 
soon as the vehicle starts to move under good GPS availability. Also, during 
the movement of the vehicle, if the IMU is misaligned this change is detected 
by the outputs of roll and pitch gyroscopes in the KF.
If a full IMU is present, the restrictive design is not required as the 
orientation error is measured by the respective gyroscope. An example is pro­
vided below, which shows that the introduction of any errors in alignment 
whether it is in roll, pitch, or heading, does not affect the accuracy of results. 
This confirms the results when the SG-DA or SG-TA configuration is used to 
estimate the simulated heading misalignments. The resultant attitude errors 
are small and are correctly identified to be in the heading.
Relative Alignment Example
4.4.2.1   
Similar datasets are used to study the design criteria and the importance of 
relative alignment for a full IMU. Figure 4.11 shows the capability of the KF 
to estimate the misalignment in the appropriate attitude. The first graph shows 
the results of the KF when simulated misaligned roll angles are introduced 
as part of the input. The KF successfully estimated the roll misalignments by 
utilizing the roll gyroscope data and provided the same results for the pitch and 
heading misalignment cases. The last graph shows the typical increase in drift 
errors for the simulated misalignments in the attitude angles. It is important 
to note that the maximum degradation in drift errors was close to 12%. These 
results indicate that if the full six DOF IMU is available, restrictive design is 
not necessary.

	
Initial Alignment of MEMS Sensors 	
75
Figure 4.10  Position drift errors for the allowed misalignment range.

76	
MEMS-Based Integrated Navigation
Figure 4.11  Importance of relative alignment for full IMU.

	
Initial Alignment of MEMS Sensors 	
77
Absolute Alignment
4.5   
Upon completion of relative alignment, the inertial systems require absolute 
alignment whereby the orientation of the axes of an inertial system is deter­
mined with respect to a reference frame such as an l-frame.
Static Alignment for MEMS Sensors
4.5.1   
For MEMS sensors, the strong gravity signals from accelerometers can be 
measured and the accelerometer leveling is used to determine the angular 
displacements in the roll and pitch of the inertial system with respect to the 
l-frame. In summary, the accelerometer leveling is aligning the z-axis of the 
accelerometer triad (zb) to the z-axis of the local level frame or l-frame (zl) 
by driving the output of the horizontal accelerometers to 0. Equations (4.1) 
and (4.2) provide the mathematical formula to determine the roll and pitch 
of an orthogonal and stationary accelerometer triad. The details can be found 
in [1].
	
r = sign(fz)sin–1(f y/g)	
(4.1)
	
p = –sign(fz)sin–1(fx/g)	
(4.2)
where r is the roll angle;
p is the pitch angle;
fx, fy, and fz are the accelerometer signals; and
g is the gravity.
To initialize the navigation KF, all three attitude angles including roll, 
pitch, and heading (azimuth) are required. The accelerometer leveling can 
only provide the roll and pitch angles. For azimuth, usually a method known 
as gyroscope compassing is used. However, MEMS sensors have significantly 
high drift rates and noise characteristics, and, therefore, the gyroscope outputs 
cannot be used to estimate the azimuth or heading of the vehicle. The main 
reason is that gyroscope compassing uses the rotation rate of the Earth, which 
cannot be monitored with MEMS sensors. The heading is also important for 
the initialization of the navigation algorithm and, hence, requires some other 
method.

78	
MEMS-Based Integrated Navigation
Static Alignment Example
4.5.2   
Consider the example in which a vehicle started from a static period. The static 
period is approximately 300 seconds and only the last 10 points of the static 
periods are shown in Figure 4.12. The north and east accelerometer outputs 
of an actual dataset are shown. The first set corresponds to the situation when 
the inertial system is almost well aligned with the l-frame. In the second case, 
a misalignment of 5° is introduced in the east channel for comparisons. For 
leveling, the north and east sensing accelerometers outputs are averaged for the 
entire static period for a better computation of roll and pitch angles.
First the static portions of the outputs are averaged for both aligned and 
misaligned sets as shown in Table 4.1.
Next, using the formula for pitch and roll as provided in (4.1) and (4.2) 
for the NED frame, the two attitude angles are computed in radians. Since it is 
easier to visualize in decimal degrees, the radians are then converted to degrees 
by multiplying the results with 180° and dividing it with p. The computed 
values are given in Table 4.2.
Figure 4.12  Example of the necessity for alignment.

	
Initial Alignment of MEMS Sensors 	
79
Table 4.1
Aligned and Misaligned Values
Aligned
North (fx)
East (fy)
Misaligned
North (fx)
East (fy)
Average 
(m/s2)
0.011698
–0.008254
Average 
(m/s2)
0.011698
–0.865718
Table 4.2
Aligned and Misaligned Values
Aligned Values
Pitch
Roll
p = sin–1(0.012/9.81)
p = 0.068°
r = –sin–1(–0.008/9.81)
r = 0.048°
Misaligned Values
Pitch
Roll
p = sin–1(0.012/9.81)
p = 0.068°
r = –sin–1(–0.866/9.81)
r = 5.060°
This describes the procedure of accelerometer leveling. For high-grade 
inertial systems, a similar procedure can be used by utilizing the Earth’s rotation 
rate. Such a procedure is not possible for the MEMS-grade sensors.
Velocity Matching Alignment
4.6   
The GPS positions and velocity measurements can be used for the alignment of 
the IMU. Heading or the azimuth of a vehicle is determined by incorporating 
north and east velocity components from the GPS receiver. Along with the 
roll and pitch information calculated by using the accelerometer signals, the 
vehicle’s attitude is estimated by incorporating the GPS-derived velocities. At 
every GPS update, the positions, velocities, and heading are updated to improve 
the navigation solution accuracy. Figure 4.13 shows the l-frame velocity vector 
and its relationship to the heading angle (A).

80	
MEMS-Based Integrated Navigation
North
East
A = Heading
v l
Figure 4.13  Geometrical relationship between heading and l-frame velocity.
The heading is always measured from the north direction, and, therefore, 
is written in terms of (4.3). However, care must be taken if there is any lever arm 
between the GPS receiver and the IMU. The lever arm must be compensated 
for before a GPS position update or attitude determination.
	
A = tan–1(VE/VN)	
(4.3)
Usually, a KF is used to estimate the navigation parameters. The velocity 
from the GPS is fed back into the inertial navigation algorithm commonly 
known as a mechanization equation.
GPS Derived Heading Example
4.6.1   
Referring to Figure 4.12, the heading was computed using the data points 
given in the grey shaded area. From this point, the heading of the vehicle was 
86.2°.
Transfer Alignment
4.7   
One shot alignment is typically performed if the navigation parameter from 
a high-accuracy source is available. Here, the attitude parameters are copied 
as the a priori information at the start of navigation for the low-cost MEMS 
IMU. The navigation KF in the case of a priori information starts from those 
parameters and then gets updated once the measurements become available. 
The navigation KF further improves the attitude.
The alignment procedures are well documented and readers are encour­
aged to read [1] for details. The main purpose of this book is to provide the 

	
Initial Alignment of MEMS Sensors 	
81
user with an idea of what methods can be used to align a MEMS IMU. There 
are other methods as well but they are not possible for the highly noisy MEMS 
sensors. Among those methods, one of the common alignments is to perform 
analytic coarse alignment followed by a fine alignment. The details are in [1], 
but cannot be used here as it uses Earth’s rotation rate to estimate the head­
ing. Fine alignment is the introduction of a KF to refine the attitude obtained 
from the coarse alignment, and, again, it cannot be used due to the high error 
characteristics of the MEMS sensors.
Once these viable inertia sensor measurements are available to us, how 
do we estimate our position? Chapter 5 covers the navigation equations that 
link inertial sensor measurements to the object’s position.
References
Titterton, D., and Weston, J.L., 
[1]	
Strapdown Inertial Navigation Technology, Second Edi­
tion, Bodmin, U.K.: American Institute of Aeronautics and Astronomy (AIAA), 2007, 
p. 558.
Grewal, M.S., Weill, L.R., and Andrews, A.P., 
[2]	
Global Positioning Systems, Inertial Naviga­
tion, and Integration, New York: John Wiley & Sons, Inc., 2001.
Savage, P., 
[3]	
Strapdown Analytics, Parts 1 & 2, Maple Plain, MN: Strapdown Associates, 
2000.
Syed, Z.F., et al., “Civilian Vehicle Navigation: Required Alignment of the Inertial Sen­
[4]	
sors for Acceptable Navigation Accuracies,” IEEE Transactions on Vehicular Technology, 
Vol. 57, No. 6, 2008, pp. 3402–3412.
Wang, X., and Shen, G., “A Fast and Accurate Initial Alignment Method for Strapdown 
[5]	
Inertial Navigation System on Stationary Base,” J. Control Theory Appl., Vol. 3, No. 2, 
May 2005, pp.145–149.
Shin, E.-H., 
[6]	
Estimation Techniques for Low-Cost Inertial Navigation, PhD. thesis, May 
2005, Department of Geomatics Engineering, University of Calgary, Canada, UCGE 
Report 20219, 2005.
“TomTom, Portable GPS Car Navigation Systems,” http://www.tomtom.com, visited 
[7]	
on October 3, 2007.
“Sony: Personal Navigation,” http://www.sony.co.uk/view/ShowProductCategory
[8]	
.action?site=odw_en_GB&category=ICN+Personal+navigation, visited on October 3, 
2007.
“Garmin. We’ll Take You There,” http://www.garmin.com/garmin/cms/site/us, visited 
[9]	
on October 3, 2007.
“Analog Devices Inc.,” www.analog.com, visited November 19, 2009.
[10]	


83
5
Navigation Equations
In Chapters 1–4, MEMS inertial sensors were introduced in detail. General 
applications for MEMS sensors were discussed, and specific usage of these 
sensors in the navigation field were provided. It was also shown that inertial 
navigation cannot be initiated before removing the systematic errors and devel­
oping an appropriate stochastic model for these very low-cost MEMS sensors. 
Any residual systematic error will contribute towards large drift errors during 
the integration of sensor measurements. Similarly, an unsuitable stochastic 
error model adds to the errors by corrupting the states prediction in the Kal­
man filter (KF) (which is discussed in the Chapter 6). Specific methods for 
alignment were also provided in Chapter 4, which is the essential step towards 
the implementation of the navigation algorithm. Alignment is a procedure to 
initialize gyroscope measurements, usually in the l-frame.
Chapters 5 focuses on the implementation of the navigation equations 
to begin relative navigation of the body in the defined reference frame. The 
navigation equations provide a numerical tool to implement the physical phe­
nomena that relates the inertial sensor measurements to the navigation state 
(i.e., position, velocity, and attitude). The inertial sensor measures the body 
accelerations and angular rotations along three mutually orthogonal direc­
tions with respect to the body frame (b-frame). However, these measurements 
need to be converted into a well-defined reference frame for navigation. The 
reference frame is usually either a local level frame (l-frame) or an Earth fixed 
frame (e-frame).
There are two different methods to solve the navigation equations: the 
classical method and the half-interval method. The classical method is com­
putationally less expensive and is easier to implement, but its usage is limited 
to very low-dynamic applications. On the contrary, the half-interval method is 

84	
MEMS-Based Integrated Navigation
more complicated but provides a robust solution for high-dynamic navigation 
applications. In this book, we do not delve into the details of either the classical 
or the half-interval method, and we suggest the reader seek details in [1, 7–9]. 
A complete flowchart of this chapter is provided in Figure 5.1.
Introduction—Mathematical Relations 
5.1   
and Transformations Between Frames
It is important to define the relationship between different frames before the 
derivation of navigation equations as this knowledge is crucial to obtain naviga­
tion solutions. Three different frame transformations are provided here [1].
e
5.1.1    -Frame to i-Frame
The e-frame is referred to as the Earth fixed frame, which is fixed at the center 
of the Earth, while the i-frame is defined as the inertial frame [1]. The z-axis 
of the e-frame and i-frame are parallel to each other but the e-frame is rotat­
Corrected and aligned inertial signals
Mathematical relationships and
transformations between different
frames for motion modeling
e
i
-frame to  -frame
b
l
-frame to  -frame
l
e
-frame to -frame
ENU realization
NED realization
Mechanization equations solution
Motion modeling—mechanization
equations
Figure 5.1  Chapter flowchart.

	
Navigation Equations	
85
ing at an angular velocity with respect to the i-frame. This results in the Earth 
rotation ωie
e  of the e-frame being expressed as:
	
ω
ω
ie
e
e T
= ( , ,
)
0 0
	
(5.1)
Therefore, the direction cosine matrix (DCM) between these two frames 
is a single rotation around the z-axis as illustrated by (5.2). The angle of rota­
tion is determined by taking a product of the ωie
e  (in short we) with the elapsed 
time (t).
	
R
t
t
t
t
e
i
e
e
e
e
=
−








cos
sin
sin
cos
ω
ω
ω
ω
0
0
0
0
1
	
(5.2)
ENU
5.1.2   
 l-Frame to e-Frame
The DCM from ENU l-frame to e-frame can be expressed in terms of two 
rotations. The first rotation is around the x-axis (R1) to align the vertical axes of 
the two frames. Once the verticals are aligned, the horizontal axes are aligned 
by a rotation around the z-axis (R3). The R1 and R3 rotations for an arbitrary 
angle q are written as follows:
	
R1
1
1
1
1
1
0
0
0
0
( )
cos
sin
sin
cos
θ
θ
θ
θ
θ
=
−








	
(5.3)
and
	
R3
2
2
2
2
0
0
0
0
1
( )
cos
sin
sin
cos
θ
θ
θ
θ
θ
=
−








	
(5.4)
In the transformation from the l-frame to the e-frame, the e-frame is taken 
as the reference and the l-frame is rotated. The following steps transform the 
ENU l-frame to an e-frame.

86	
MEMS-Based Integrated Navigation
The first step is to rotate around the 
1.	
x-axis by an angle equal to f – 
90 (where f is the latitude) to bring the position in the horizontal 
plane. Here, q1 in (5.3) is replaced by f – 90. Performing this rota­
tion makes the l-frame’s z-axis or vertical axis parallel to the z-axis 
of the Earth.
Next, the newly formed 
2.	
z-axis is rotated back by the longitude angle 
(l) and then by 90° to make the x-axes and y-axes of the new system 
parallel to the Earth reference frame. Here, q2 in (5.4) is replaced 
by –90 – l. Combining the above two transformations gives us the 
required DCM:
R
R
R
e
l =
−
−
⋅
−
=
−
−
3
1
90
90
(
)
(
)
sin
sin cos
cos co
λ
φ
λ
φ
λ
φ
s
cos
sin sin
cos sin
cos
sin
λ
λ
φ
λ
φ
λ
φ
φ
−








0
	
(5.5)
For a typical location on the Earth’s surface, the angular velocity component 
(we) is a function of the latitude as shown in Figure 5.2. Using simple geometry, 
the angular velocity vector in the l-frame, due to Earth’s rotation, is:
	
ω
ω
ϕ
ω
ϕ
ie
e
e
T
l = (
)
0
cos
sin
	
(5.6)
UP
ϕ
UP
ϕ
Vertical
plane
ω
ϕ
sin
e
ω
ϕ
cos
e
ωe
N
Figure 5.2  Components of Earth’s rotation rate in an ENU frame.

	
Navigation Equations	
87
For a moving platform, the l-frame changes its position, and this causes 
a rotation of the l-frame with respect to the e-frame. The rates can be given in 
terms of the changes in latitude and longitude. When this rotation is given in 
the l-frame, it is commonly known as the transport rate as depicted by (5.7).
	
ω
φ
λ
φ
λ
φ
e
T
l
l
&
&
&
= −(
)
cos
sin
	
(5.7)
This equation is defined on the basis of the following example. Let’s 
consider a vehicle that is moving with east and north velocity components of 
V e and V n, respectively. Once the vehicle comes to a point P on the surface 
of the Earth, its relative components are determined using the relationship 
in Figure 5.3.
NED 
5.1.3   
l-Frame to e-Frame
To rotate the e-frame onto the NED l-frame, the first required rotation is 
around the z-axis with the longitude angle. This takes care of the horizontal 
displacement of the two axes. The second rotation is around the new y-axis to 
take care of the latitude difference. These two rotations make all the axes of 
the rotated system parallel to the e-frame as given by (5.8).
R
R
R
e
l =
−
−
(
)
( ) =
−
−
−
2
3
2
ϕ
π
λ
ϕ
λ
ϕ
λ
ϕ
/
sin
cos
sin
sin
cos
sin
cos
cos
cos
cos
sin
sin
λ
λ
ϕ
λ
ϕ
λ
ϕ
0
−
−
−









	
(5.8)
φ
UP
Z
e
h
R = R cos φ
φ
∆φ
R + h
V n
φ =
Meridian of P
Parallel Latitude of P
V n
V n
R cos φ
V e
=
R cos φ
Rφ =
V e
∆λ
V e
λ = Rφ
.
Figure 5.3  Components of the Earth’s rotation rate in an ENU frame.

88	
MEMS-Based Integrated Navigation
The l-frame to e-frame are simply the transpose of the above matrix. The 
angular velocity vectors describing the rotation of Earth in the l-frame, and 
the rotation of the l-frame with respect to the Earth fixed frame in the NED 
frame are given by (5.9) and (5.10).
	
ω
ω
ϕ
ω
ϕ
ie
e
e
T
l = (
)
cos
sin
0
	
(5.9)
	
ω
λ
φ
φ
λ
φ
e
T
l
l
&
&
&
=
−
−
(
)
cos
sin
	
(5.10)
b
5.1.4    -Frame to ENU l-Frame
If the axes of the body frame are perfectly aligned with the axes of the l-frame, 
the roll, pitch, and azimuth angles are all zeros and no transformation is 
required. Generally, this doesn’t occur and rotations are required to transform 
the b-frame to an l-frame. For azimuth, the positive rotation is from north to 
east. We start by rotating the frames with the azimuth angle around the z-axis. 
The next rotation corrects for the pitch around the x-axis and finally the roll 
angle is corrected, which is the rotation around the y-axis.
	
R
R r R p R
A
l
b =
−
2
1
3
( )
( )
(
) 	
(5.11)
R1 and R3 rotation matrices have been provided before in Section 5.1.2; 
R2 rotation for an arbitrary angle q is given as follows:
	
R2
0
0
1
0
0
( )
cos
sin
sin
cos
θ
θ
θ
θ
θ
=
−







	
(5.12)
The most expanded form of (5.11) is provided in (5.13).
R
A
r
A
p
r
A
r
A
p
l
b =
+
−
+
cos
cos
sin
sin
sin
sin
cos
cos
sin
sin
cos
sin
sin
cos
cos
cos
sin
cos
sin
r
p
r
A
p
A
p
p
A
−
−
−
r
A
p
r
A
r
A
p
p
−
−
−
sin
sin
cos
sin
sin
cos
sin
cos
cos
cosr











(5.13)
Using the properties of orthogonality, the rotation from the b-frame to 
l-frame can be done by simply taking a transpose of Rl
b. Hence, Rb
l
l
bT
R
=
 and 
is provided in (5.14).

	
Navigation Equations	
89
R
A
r
A
p
r
A
p
A
r
b
l =
+
−
−
cos
cos
sin
sin
sin
sin
cos
cos
sin
sin
sin
cos
sin
cos
cos
sin
sin
cos
cos
A
p
r
A
r
A
p
r
A
p
−
+
−
−
−
sin
sin
cos
sin
cos
cos
sin
sin
cos
cos
A
r
A
p
r
p
r
p
p
r









	
(5.14)

The angular velocity vector between the two frames is expressed as the 
rate of change of the attitude angles.
	
ωb
b
T
p
r
A
l
&
&
&
= (
) 	
(5.15)
The Euler angles are the essential part of the navigation as the accelera­
tions recorded in the b-frame needs to be converted into the reference frame 
using these angles.
b
5.1.5    -Frame to NED l-Frame
A similar procedure is used to rotate the NED l-frame onto the b-frame. The 
b-frame is rotated based on the Euler angles by first correcting for roll, then 
pitch, and finally for azimuth.
	
R
R
A R
p R
r
b
l =
−
−
−
3
2
1
(
)
(
)
(
) 	
(5.16)
R
r
A
p
A
p
r
A
p
A
b
l =
−
+
+
cos cos
cos
sin
sin
sin cos
sin
sin
ccos
sin cos
cos sin
cos
cos
sin
sin sin
p
r
A
r
A
p
A
p
r
A
+
−sin
cos
cos
sin sin
sin
sin
cos
cos
cos
p
A
p
r
A
r
p
r
p
r
+
−












(5.17)
Consequently, the angular velocity vector between the two frames is 
expressed as:
	
ωb
b
T
r
p
A
l
&
&
&
= (
) 	
(5.18)

90	
MEMS-Based Integrated Navigation
Motion Modeling in the 
5.2   
l-Frame
The l-frame formulation has the advantage that its axes are aligned to the local 
east, north, and vertical directions as compared to the e-frame. Therefore, the 
attitude angles (i.e., pitch, roll, and azimuth) are directly obtained as output 
of the navigation equations. Further, as the definition of the l-frame is based 
on the perpendicular to the reference ellipsoid, the geodetic coordinate differ­
ences Df, Dl, Dh are the outputs of the system. In addition, the computational 
errors in the navigation parameters on the horizontal plane (northeast plane) 
are bounded due to Schuler effect. This effect stipulates that the INS velocity 
and attitude errors along the horizontal plane are coupled together producing 
what is called the Schuler loop. This includes the strong coupling between the 
north velocity and the roll angle as well as between the east velocity and the 
pitch angle. As a result, these errors are bounded over time and oscillate with 
the Schuler frequency (1/5,000 Hz).
ENU Realization
5.2.1   
The position of a moving platform in the l-frame is expressed in terms of the 
curvilinear coordinates (f, l, h).
	
r
h
T
l = (
)
ϕ
λ
	
(5.19)
The velocity is expressed by three components along the east (V e), north 
(V n), and vertical up direction (V u).
	
V
V
V
V
e
n
u T
l = (
) 	
(5.20)
The position is commonly represented in the curvilinear coordinate 
system as shown above, while the velocity is given in the Cartesian coordinate 
system. A rate of change in position, called the velocity, requires geometrical 
consideration to account for the two different coordinate systems. Therefore, 
the time rate of change of the position components is related to the velocity 
components as follows [2–4].
	
&ϕ =
+
V
M
h
n
	
(5.21)

	
Navigation Equations	
91
	
&λ
ϕ
=
+
(
)
V
N
h
e
cos
	
(5.22)
	
&h
V u
=
	
(5.23)
Equations (5.21)–(5.23) are usually written in matrix notation as shown 
in (5.24).
	
&
&
&
&
lr
h
M
h
N
h
=








=
+
+

ϕ
λ
ϕ
0
1
0
1
0
0
0
0
1
(
)cos























=
−
V
V
V
D V
e
n
u
1
l
	
(5.24)
The M and N are radiuses of the curvature of the Earth in the merid­
ian and prime vertical directions. Equation (5.24) is known as the position 
mechanization equation and requires computed quantities, which include 
orthogonal velocity components and the latitude.
Velocity mechanization equations use the measured accelerometers sig­
nals. Since the measured signals are in the b-frame, the first step is to convert 
them into the l-frame.
	
f
f
f
f
R f
R
f
f
f
e
n
u T
b
b
b
x
y
z
T
l
l
l
= (
)
=
=
(
) 	
(5.25)
However, the acceleration components expressed in the l-frame, f l, can­
not directly provide the l-frame velocity components of the moving platform 
for three reasons. The first reason is the rotation rate (we = 15°/hr) of the Earth 
as given in (5.6). The change of orientation of the l-frame with respect to the 
e-frame due to the definition of the local north and up directions is the second 
reason. The north direction is tangential to the meridian all the time, while 
the up direction is normal to the Earth’s surface. This effect is expressed by the 
angular velocity vector given in (5.7).
Substituting values of &φ and &λ into (5.7) yields (5.26).

92	
MEMS-Based Integrated Navigation
	
w
Vn
M
h
V
N
h
V
e
e
l
l
&
&
&
=
−








=
−
+
+
ϕ
λ
ϕ
λ
ϕ
cos
sin
e
N
h
tanϕ
+
















	
(5.26)
The third reason is the normal gravity vector, which is a function of 
latitude and ellipsoidal height and is a dominant factor in the l-frame velocity 
mechanization [5].
	
g = a1(1 + a2sin2j + a3sin4j) + (a4 + a5sin2j)h + a6h2	
(5.27)
where 
a1 = 9.7803267715 m/sec2;
a2 = 0.0052790414;
a3 = 0.0000232718;
a4 = –0.000003087691089 1/sec2;
a5 = 0.000000004397731 1/sec2; and
a6 = 0.000000000000721 1/(m sec2).
The l-frame gravity vector is written as:
	
g l = (0  0  –g)T	
(5.28)
Considering the above factors, the l-frame velocity component is 
expressed in (5.29).
	
&l
l
l
l
l
l
l
V
R f
V
g
b
b
ie
e
=
−
+
+
(
)
2Ω
Ω
	
(5.29)
where Ωie
l  and Ωel
l  are the skew-symmetric matrices corresponding to ωie
l and 
ωel
l , respectively, and are expressed as follows [8, 9]:

	
Navigation Equations	
93
	
Ωie
e
e
e
e
l =
−
−






0
0
0
0
0
ω
ϕ
ω
ϕ
ω
ϕ
ω
ϕ
sin
cos
sin
cos


	
(5.30)
	
Ωe
e
e
e
n
e
V
N
h
V
N
h
V
N
h
V
M
h
V
N
h
l
l =
−
+
+
+
+
−
+
−
0
0
tan
tan
ϕ
ϕ
V
M
h
n
+
















0
	
(5.31)
The final part of the mechanization is the equation for attitude. The 
attitude angles of a moving rigid body are determined by solving the time 
derivative equation of the transformation matrix Rb
l. Since the mechanization 
is implemented in the l-frame, the following time-derivative transformation 
matrix equation should be considered:
	
&l
l
l
R
R
b
b
b
b
=
Ω	
(5.32)
The angular velocity (ωlb
b ) skew-symmetric matrix Ωlb
b  can be expressed 
in terms of its components as follows:
	
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
l
l
l
l
l
b
b
i
b
ib
b
i
b
ib
b
b
b
ib
b
i
b
=
+
= −
+
=
−
	
(5.33)
Hence, the rotation matrix Rb
l is obtained by solving the following dif­
ferential equation:
	
&l
l
l
R
R
b
b
ib
b
i
b
=
−
(
)
Ω
Ω
	
(5.34)
Ωib
b  is the skew-symmetric matrix of the angular velocity measurements 
ωib
b  provided by the gyroscopes of the inertial system.
	
ω
ω
ω
ω
ib
b
x
y
z
T
= (
) 	
(5.35)
where the skew symmetric representation is given as

94	
MEMS-Based Integrated Navigation
	
Ωib
b
z
y
z
x
y
x
=
−
−
−










0
0
0
ω
ω
ω
ω
ω
ω
	
(5.36)
The gyroscopes measure the Earth’s rotation rate, the change in orienta­
tion of the l-frame, and the angular velocities of the moving body. The angular 
velocities in Ωi
b
l are subtracted from Ωib
b  to remove the first two effects. Fur­
thermore, the angular velocities Ωi
b
l consist of two parts:
Ωie
b
1.	
, which accounts for the Earth’s rotation rate;
Ωel
b
2.	
, which accounts for the orientation change of the l-frame.
Therefore, Ωi
b
l can be given in terms of its components as
	
Ω
Ω
Ω
i
b
ie
b
e
b
l
l
=
+
	
(5.37)
Ωie
b  and Ωel
b  are skew symmetric angular velocity matrices corresponding 
to ωie
b and ωe
b
l. Since the b-frame is not a reference frame, it is not possible 
to measure the angular velocities directly, and, as a result, transformation is 
required to compute the two vectors.
	
ω
ω
ie
b
b
ie
R
=
l
l 	
(5.38)
	
ω
ω
e
b
b
e
R
l
l
l
l
=
	
(5.39)
Finally, ωi
b
l, which is used to construct the skew-symmetric representa­
tion Ωi
b
l is written as:
ω
ω
ω
ω
ω
ω
ω
i
b
ie
b
e
b
b
ie
e
i
b
b
e
R
R
l
l
l
l
l
l
l
l
=
+
=
+
=
(
)
cos
0
ϕ
ω
ϕ
ϕ
e
n
e
e
V
M
h
V
N
h
V
N
h
sin
tan








+
−
+
+
+


































=
−
+
R
V
M
h
V
b
n
e
l
N
h
V
N
h
e
e
e
+
+
+
+
















ω
ϕ
ϕ
ω
ϕ
cos
tan
sin
	
(5.40)

	
Navigation Equations	
95
Equations 5.24, 5.29, and 5.34 define the navigation or mechaniza­
tion equations in the l-frame and are usually written in the compact form as 
follows:
	
&
&
&
l
l
l
l
l
l
l
l
r
V
R
D V
R f
b
b
b
ie
e








=
−
+
−1
2
( Ω
Ω)
(
)
V
g
Rb
ib
b
i
b
l
l
l
l
+
−








Ω
Ω
	
(5.41)
NED Realization
5.2.2   
Mechanization equations for NED realization are slightly different as the 
definitions of the three axes (local x, y, and z-axes) have changed. The first 
change is that the x-axis of the ENU frame was east, which has now changed 
to north. Please note that the definitions of east and north have not changed. 
The position mechanization shows this change, and the second change is for 
the z-axis. The two z-axes have opposite directions. Only final mechanization 
equations for the NED frame are provided for clarity.
	
&
&
&
&
lr
h
M
h
N
h
=








=
+
+
−
ϕ
λ
ϕ
1
0
0
0
1
0
0
0
1
(
)cos
























=
−
V
V
V
D V
n
e
d
1
l
	
(5.42)
The velocity dynamics equation is the same as (5.29). However, the 
angular velocities due to the Earth’s and l-frame rotations differ as given in 
(5.43) to accommodate for the NED realization.
2
2
0
ω
ω
ω
ϕ
ω
ϕ
ie
l
el
l
e
e
e
V
N
h
V
+
=








+
+
−
cos
sin
n
e
e
e
M
h
V
N
h
V
N
h
+
−
+
















=
+
+
tan
co
ϕ
ω
2
s
tan
sin
ϕ
ϕ
ω
ϕ
−
+
−
+
+
















V
M
h
V
N
h
n
e
e
2
	
(5.43)

96	
MEMS-Based Integrated Navigation
The equation for attitude dynamics is also the same as (5.43). The rota­
tion of the l-frame represented in the b-frame is changed due to the NED 
realization and is written as
	
ω
ω
ϕ
ϕ
ω
ϕ
il
b
l
b
e
e
n
e
e
R
V
N
h
V
M
h
V
N
h
=
+
+
−
+
−
+
+
cos
tan
sin
















	
(5.44)
Solving Mechanization Equations
5.3   
There are many methods that can be used to solve mechanization equations. Two 
methods are provided to demonstrate the implementation of the mechanization 
equations. The classical method is a simple method that is implemented by 
using (5.41). This method may be sufficient for low dynamic applications but is 
insufficient for any high dynamic application. The half-interval method, on the 
contrary, is a method that is robust, efficient, and is suited for most navigational 
scenarios.
Classical Method
5.3.1   
This method is the most direct and straightforward implementation approach 
for the mechanization equations. Simplicity is guaranteed, but the accuracy of 
the navigation solution is not, even for land vehicle application. This method 
does not account for different types of motions that are related to the system 
and degrade the quality of results. In addition, this method cannot handle 
singularities. Details of the classical method are available in any standard 
navigation textbook [1], and here we will only provide Figure 5.4.

	
Navigation Equations	
97
+
−
+
−
+
−
+
−
+
−
φ λ
, , h
Normal
Gravity
∫
∫
l
b
R
l
b
R
l
b
R
(2
+
)
Ω
Ω

ie

∫
Computation
of parameters
that involve V l
V l
V l.
l
b
R
.
−
l
il
ω
l
b
R
b
il
ω
b
ib
Ω
b
f
lf
+
−
+
Figure 5.4  Flowchart for method 1.
Half-Interval Method
5.3.2   
Half-interval method utilizes quaternions to increase the robustness and accu­
racies of the solution. A quaternion is a four-dimensional vector that can be 
used to represent a rotation matrix [6, 7]. Again this method is not discussed 
in this book since it has been covered in previous books and can be applied 
regardless of the inertial sensors used. The reader should seek more informa­
tion through the references.
Chapters 3 and 4 illustrate the high error characteristics of these low-
cost MEMS devices. Is there a way of reducing these errors? Can these errors 
be mitigaged by external aiding sources such as GPS or any other vehicle 
constraints? Chapter 6 answers these questions.
References
Titterton, D., and Weston, J.L., 
[1]	
Strapdown Inertial Navigation Technology, Second Edition, 
Bodmin, U.K.: American Institute of Aeronautics and Astronomy (AIAA), 2004.
Schwarz, K.P., and Wei, M., “A Framework for Modelling the Gravity Vectory by Kine­
[2]	
matic Measurements,” Bulletin Géodésique, Vol. 64, 1990, pp. 331–346.
Farrell, J.A., and Barth, M., 
[3]	
The Global Positioning System & Inertial Navigation, New 
York, NY: McGraw-Hill, 2001.

98	
MEMS-Based Integrated Navigation
Godha, S., 
[4]	
Performance Evaluation of Low Cost MEMS-Based IMU Integrated with GPS 
for Land Vehicle Navigation Application, M.Sc. Thesis, Department of Geomatics Engi­
neering, University of Calgary, Canada, UCGE Report No. 20239, 2006.
Forsberg, R., “Gravity Field Terrain Effect Computations by FFT,” 
[5]	
Bulletin Géodésique, 
Vol. 59, 1985, pp. 342–360.
Dunn, F., and Parberry, I., 
[6]	
3D Math Primer for Graphics and Game Development, Sudbury, 
MA: Wordware Publishing, Inc., 2002.
Kuipers, J.B., 
[7]	
Quaternions and Rotation Sequences, Princeton, NJ: Princeton University 
Press, 1999.
Savage, P., 
[8]	
Strapdown Analytics, Part 1 & 2, Maple Plain, Maple Plain, MN: Strapdown 
Associates, 2000.
Shin, E.-H., 
[9]	
Estimation Techniques for Low-Cost Inertial Navigation, Ph.D. thesis, May 
2005, Department of Geomatics Engineering, University of Calgary, Canada, UCGE 
Report 20219, 2005.

99
6
Aiding MEMS-Based INS
To mitigate high-error characteristics, MEMS inertial sensors require aiding sourc­
es for meaningful navigation results. If MEMS-based INS works in a standalone 
mode, positioning accuracy will deteriorate in a few minutes. It is also evident 
that a method is required that can propagate navigation states by incorporating 
the stochastic error characteristics of MEMS sensors. The problem of estimating 
the state of a stochastic (random variables evolving with time) dynamic system 
from noisy observation made on the system, is a vital research area of statistics, sci­
ence, economy, and control engineering. In this case, an aiding source of superior 
accuracy is required to provide updates for the outputs of MEMS-based INS. This 
chapter briefly discusses the aiding sources and the modes of integration. In most 
applications, MEMS-based INS is integrated with GPS either through loosely or 
tightly coupled scheme. Both INS and GPS have complementary characteristics, 
and their integration provides reliable positioning accuracy. Extended Kalman 
filtering (EKF) is the most common INS/GPS integration technique used for 
this purpose. This chapter gives an overview of the integration between INS and 
GPS without going into too many details. Another source of updating MEMS-
based INS is also described here briefly. A flowchart of the chapter is provided in 
Figure 6.1 as a quick reference to the user.
Introduction
6.1   
Theoretically, INS and GPS can both estimate navigation parameters for 
a body in motion. However, both systems have their own problems. For 
example, the time-dependent position errors can drift quickly due to the 
integration of the acceleration and angular rate data for in-vehicle navigation. 
GPS-provided absolute and drift-free positions are only possible when the 

100	
MEMS-Based Integrated Navigation
receiver has a direct line of sight to four or more satellites. The combination 
of the two systems can offer a number of advantages. The drift errors of the 
INS can be controlled by the GPS updates and for short GPS signal outages, 
the INS standalone navigation capabilities can be exploited for seamless navi­
gation. Moreover, the combination of the two systems (i.e., INS and GPS) 
will provide redundant measurements and will result in improved reliability 
of the combined system.
MEMS INS/GPS
Integration
Kalman
Filter
model
Dynamic model
Measurement
Algorithm
Prediction
stage
Update stage
Extended
Linearizatio
n
Prediction
Update
Non holonomic
constraints
Odomete
r
ZUPT
Loosely
coupled
Tightly
coupled
MEMS-INS/GPS
integration
Kalman
filter
Mathematical
model
Dynamic model
Measurement
model
Algorithm
Prediction
stage
Update stage
Extended
Kalman filter
Linearization
Prediction
Update
Nonholonomic
constraints
Odometer
ZUPT
Loosely
coupled
Tightly
coupled
Aiding
sources
Figure 6.1  Chapter flowchart.

	
Aiding MEMS-Based INS	
101
An EKF is used to optimally combine the redundant information in 
which the inertial state vector is regularly updated by GPS measurement. 
Two integration strategies can be implemented at the software level using 
the EKF approach. The remainder of this chapter is designed to provide the 
overview of the integration strategies, KF and EKF, for the most commonly 
encountered low-cost navigation scenario (i.e., GPS and MEMS-based IMU 
integrated navigation).
Loosely Coupled Mode of Integration
6.1.1   
The most commonly implemented integration scheme is called the loosely 
coupled approach [1] in which the GPS derived positions and velocities, along 
with their accuracies from GPS KF, are used as updates for the navigation KF. 
The error states include both the navigation errors and sensor errors. To further 
improve the accuracy of the navigation solution, the error states are fed back 
to the mechanization [2] subroutine as shown in Figure 6.2.
There are certain advantages and disadvantages of using this integration 
scheme. For instance, one of the advantages is the smaller size of state vectors for 
both a GPS and INS KF as compared to the state vector in the tightly coupled 
integration. A disadvantage of using such a system is the extra process noise 
due to the presence of two KFs, which may decrease the signal-to-noise ratio. 
Consequently, the probability is that the integration filter trusts the predicted 
states more than the measurements increase, which is not desirable.
Tightly Coupled Mode of Integration
6.1.2   
Tightly coupled integration [1, 2–4] is also known as the centralized KF 
approach. The major difference between loosely coupled (defined earlier) and 
tightly coupled is the number of KFs present in the two schemes. The tightly 
IMU
Mechanization
GPS
GPS KF
PVA
PV
PVA
IMU errors
Integration filter
Figure 6.2  Loosely coupled integration. (PV refers to position and velocity, respectively.)

102	
MEMS-Based Integrated Navigation
coupled integration uses one centralized KF [5, 6] that usually integrates the 
pseudorange (r) and Doppler (fdopp) information from the GPS receiver and 
the position, velocity, and attitude (PVA) information from the mechaniza­
tion of the inertial system. A tightly coupled integration with carrier phase 
observation [12] is mostly used for high-precision application, which is not 
the focus of this book.
The error states of the integration KF are composed of navigation errors, 
inertial sensor errors, and GPS receiver clock errors. The inertial sensor errors 
and GPS receiver clock errors are then fed back to compensate for these errors 
for the next epoch PVA estimation. Figure 6.3 shows the summary of the tightly 
coupled integration. The pseudorange (r) and Doppler (fdopp) measurements 
from GPS, combined with the INS-derived pseudorange and Doppler for every 
satellite i, are used as the observations for the integration KF.
The loosely or tightly coupled integration scheme is realized by an EKF. It 
is the method of choice for blending inertial data with GPS updates for low-cost 
land vehicle navigation application due to its optimal weighting schemes.
Introduction to Kalman Filter
6.2   
A KF is a clear choice for integration of inertial and GPS data under the 
assumptions of a Gaussian probability distribution, as outputs from both sys­
tems are contaminated with noise and uncertain dynamics [1, 4, 5]. The KF 
provides an efficient computational method to estimate the state of a linear 
stochastic process by minimizing the mean of the squared errors. The random 
Pseudorange,
Doppler of INS
Integration KF
Ephemeris
GPS
Mechanization
P,V,A
+
−
−
+
IMU errors
x
P,V,A
( ρ , f
i
)
i dopp of INS
ρ , f
i
i dopp of GPS
IMU
Figure 6.3  Tightly coupled integration scheme.

	
Aiding MEMS-Based INS	
103
processes generally include noisy sensor outputs and uncertain dynamics. The 
uncertain dynamics include any form of disturbances other than the desired 
system states. For example, for the main application of this book (i.e., low-
cost navigation for land vehicles) the uncertain dynamics may be due to road 
conditions or caused by unusual sensor outputs. An unusual sensor output 
for a MEMS sensor can be a change in the outputs due to temperature varia­
tions. This could be both significant and random depending on the type of 
low-cost sensor used.
The desired states of an integrated system generally consist of the navi­
gation, clock, sensor parameters, and any other time-varying or correlated 
parameter that knowledge of may improve the overall navigation accuracy. The 
measurements may be the absolute positions, velocities, attitude, or pseudo­
range and Doppler information coming from the GPS, odometer, digital map, 
or an external attitude system.
The most desirable feature of the KF is its robustness. It comes from the 
fact that the KF estimates and propagates the uncertainty of the system states 
and measurements by using a gain equation. Kalman gain is the weighting 
matrix that combines the state and measurement uncertainties for the calcula­
tion of the updated system states as shown in (6.1).
	
ˆ
ˆ
ˆ
x
x
K
z
H x
k
k
k
k
k
k
+
−
−
=
+
−

	
(6.1)
where ˆxk
+ is the corrected system states at time epoch k, ˆxk
− is the estimated 
system states at time epoch k, Kk is the Kalman gain parameter, zk is the 
measurements vector at time epoch k, Hk is the measurement matrix at time 
epoch k, and H x
k
kˆ− is the predicted measurement at time epoch k. However, 
knowledge of both mathematical models and the assumptions is required to 
understand (6.1). The details are provided in the following subsections.
There are two different mathematical models involved in the derivation 
of a KF:
The dynamic model that contains the time propagation information 
1.	
for the states; and
The measurement model that relates the measurements to the 
2.	
states.
Dynamic Model
6.2.1   
The dynamic model [1] is the time-related information for a given state that 
shows how a state evolves with time. A first-order differential equation is used 

104	
MEMS-Based Integrated Navigation
to show this type of time relation of a variable with respect to time for the 
state of a linear dynamic system.
	
&x t
t x t
t w t
( ) = ( )
+
F
G
( )
( ) ( ) 	
(6.2)
where F(t) is the dynamic matrix; G(t) is the shaping matrix or noise distribu­
tion matrix, which represents how the sensor noise is distributed among the 
state vector parameters; and w(t) is the sensor noise, which is considered as a 
white noise sequence with a mean of 0 and a covariance of Q.
The differential equation given above is used for a continuous time 
system. The measurements are available at certain fixed and finite frequency 
requiring discrete time implementation. The mathematics to convert the 
continuous time system to a discrete time system is beyond the scope of any 
navigation application and hence will not be discussed further.
For a discrete time system, the state (6.2) is given in terms of a transi­
tion matrix Φk–1 = Φ(tk, tk–1). The transition matrix is then derived from the 
dynamic matrix F. A numerical approximation is possible if the dynamic matrix 
has constant values for a small time step Dt and therefore the impact of higher 
order terms is negligible.
 
Φ
∆
∆
∆
∆
k
t
t
e
I
t
t
t
t
t
t
−=
=
+
+ (
)
+ (
)
1
2
2
F
F
F
F
( )
( )
( )
/
!
( )
3
3
/
!
...
+
	
(6.3)
In the case of inertial measurements at data output rates of more than 
20 Hz, the first two terms [in (6.3)] are sufficient to estimate the transition 
matrix. Using the newly computed transition matrix, the continuous time 
difference equation is given in the following form.
	
x
x
w
d
k
k
k
k
t
t
k
k
=
+
−
−
−
−∫
Φ
Φ
1
1
1
1
G( ) ( )
τ
τ
τ 	
(6.4)
The second term on the right side of this equation is an unknown and 
relates to the noise propagation in the discrete time system. Instead of solving 
this unknown, the whole term is considered as a random variable wk–1 with 
a Gaussian distribution, and for simplicity uses an additive noise [13]. If this 
Gaussian distribution assumption is not valid, the system suffers accuracy 
degradation depending on how far away the real distribution is compared to 
the assumed Gaussian distribution.
	
xk = Φk–1xk–1 + wk–1	
(6.5)

	
Aiding MEMS-Based INS	
105
Measurement Model
6.2.2   
The measurement model shows the relationship between the states and the 
available measurements using a measurement matrix Hk. Most commonly, for 
vehicle navigation applications involving low-cost MEMS inertial sensors, the 
measurements zk are the GPS updates at a much lower frequency. The basic 
linear measurement equation assuming additive noise for the KF has the fol­
lowing form:
	
zk = Hkxk + vk	
(6.6)
where vk is the white noise sequence for the measurements with covariance 
Rk.
In developing a measurement model, a reader must ask the following 
questions:
What kinds of updates or measurements are available?
1.	
Is there a direct relationship between the measurements and states?
2.	
What type of reference frame are the measurements given in as com­
3.	
pared to the reference frame used for the navigation states?
The proper answers to these questions can satisfy the development of an 
appropriate model.
Kalman Filter Algorithm
6.3   
A KF can be used whether or not a measurement update is present. This is a 
desirable property for integrated navigation because the data output rate for 
the inertial system is much faster than the most common updates (i.e., from 
GPS) [1]. The KF utilizes the update as soon as it becomes available. Con­
sequently, the KF implementation is divided into two stages: the prediction 
stage and the update stage.
The Prediction Stage
6.3.1   
This stage is implemented when there is no update available and the filter 
propagates the states and the states’ accuracies from one epoch to the next using 
the dynamic matrix. If Pk–1 is the a priori accuracy estimate for the states given 

106	
MEMS-Based Integrated Navigation
by ˆxk −
+
1, the next Pk can be calculated using the transition matrix, the a priori 
accuracy matrix, and the covariance matrix for the involved system noise.
	
ˆ
ˆ
x
x
k
k
k
−
−
+
= Φ
1	
(6.7)
	
P
P
Q
k
k k
k
T
k
−
−
+
−
=
+
Φ
Φ
1
1	
(6.8)
The Update Stage
6.3.2   
For navigation, the prediction stage relies on navigation states from the mecha­
nization equations, which require integration. Any errors in the inertial sensor 
output, such as residual bias, accumulate during integration and result in a 
position drift error of hundreds of meters in short GPS outages when a low-cost 
MEMS IMU is used. Equation (6.1) is the update equation, which provides 
a robust blending of the prediction solution with the update measurements. 
This is due to the unique characteristics of Kalman gain, which weighs both 
the update and prediction.
	
K
P H
H P H
R
k
k
k
T
k k
k
T
k
=
+
(
)
−
−
−1	
(6.9)
This equation shows that a bigger uncertainty in the measurements makes 
the gain smaller while a smaller uncertainty in measurements makes the states 
to follow the measurements. Suppose that if the GPS accuracy is worse than the 
inertial-only navigation solution, the KF will prevent the navigation solution 
from following the GPS measurement update. This situation could occur if a 
high sensitivity GPS receiver is used in a downtown core, surrounded by the 
high-rises. There is a GPS position available, but the quality of the measure­
ment might be poor. Similar to the prediction stage, the KF also calculates 
the accuracy of the newly updated states (6.10) by taking into account the 
Kalman gain.
	
P
P
K H P
k
k
k
k k
+
−
−
=
−
	
(6.10)
Introduction to Extended Kalman Filter
6.4   
The KF estimates the state of a discrete time controlled process governed by a 
linear stochastic difference equation. The linearity condition cannot be satis­
fied all the time and for all applications. The integration of inertial data with 

	
Aiding MEMS-Based INS	
107
GPS data using a KF is one example of when the system is nonlinear due to 
the involved mechanization equations. It is, however, not an isolated example 
and often the KF applications are nonlinear in nature.
For nonlinear cases, the system is linearized about a nominal trajectory 
during the design phase of the KF. For a general nonlinear case when the 
nominal trajectory is unavailable, the system can be linearized about the cur­
rent state. In the case of inertial data integration, the current state is obtained 
by integrating the sensor output with respect to time using the mechanization 
process. A KF that involves linearization about the current state is referred to 
as an EKF.
Linearization
6.4.1   
A navigation solution derived from the mechanization equations is a highly 
nonlinear problem, which requires linearization. To start, a simple dynamic 
nonlinear stochastic difference equation for the process with state xk needs to 
be defined.
	
xk = f(xk–1) + wk–1	
(6.11)
The nonlinear difference equation given by the function f relates the 
previous epoch state xk–1 to the current epoch state xk. The random variable 
wk–1 is the dynamic process noise with
	
E w
E w w
Q
k
j
k
k
j
T
k

=

=
=
0 and
for
 
 
	
(6.12)
Equation (6.11) is the simplest form of nonlinear difference equation 
where it is assumed that the noise is linear and only one measurement update 
is available at any given time. However, this may not be true for all cases. For 
example, there may be cases when the noise is nonlinear or there may be some 
redundant measurement updates present for the same navigation entity. Con­
sider an example involving a single epoch with two heading measurements. 
The first heading is provided by a dual GPS system, while the second heading 
is provided by a magnetic compass. In this case, the accuracies for the two 
headings are different. One of the heading measurements is used as a driving 
function, uk–1 as shown in the nonlinear difference equation provided below, 
and the other heading is used as measurement update.
	
xk = f(xk–1, uk–1, wk–1)	
(6.13)

108	
MEMS-Based Integrated Navigation
Similarly, the measurements can also have a nonlinear relationship to 
the states. The simplest case is shown in (6.14) where noise is uncorrelated 
and Gaussian distributed.
	
zk = h(xk) + vk	
(6.14)
	
E v
E v v
R
k
j
k
k
j
T
k

=

=
=
0,
for
	
(6.15)
For a highly nonlinear model, the assumption of a linear noise component 
may not be realistic. In this case, even the noise needs to be linearized, and a 
better measurement model equation has the following form.
	
zk = h(xk, vk)	
(6.16)
For the prediction step, the noise cannot be estimated and is left out of 
the computation process on the assumption that it is a 0 mean with Gaussian 
distribution. Also, it is hardly the case that there are redundant measurements 
for the same state for very low-cost navigation systems and, therefore, it is safe 
to leave the driving function out of the dynamic equation linearization and 
from prediction. After making the above changes, the state and measurement 
vector approximates, %
%
x
z
k
k
and
 are given as
	
%x
f x
k
k
=
(
)
−
−ˆ
1 	
(6.17)
	
%
%
z
h x
k
k
= ( ) 	
(6.18)
For prediction and update equations, linearized models are needed. 
In EKF, the linearization is performed at the current state, which is the last 
available state vector. Taylor series expansion is used for linearization of the 
nonlinear difference equation as illustrated by (6.19).
	
x
f x
f
x
x
x
k
k
x
k
k
k
≈
(
) + ∂
∂
−
(
) +
−
−
−
−
−
−
−
ˆ
,
ˆ
( !
ˆ
1
1
1
0
2
1
/
) (
)
ˆ
...
ˆ
−
−
−
−
−
∂
∂
−
(
) +
+
−
−
1
2
2
1
1
2
1
1
f
x
x
x
w
x
k
k
k
k
/
	
(6.19)
The quantities xk and xk–1 are the true state vectors, which are unavailable. 
These values can only be estimated using the EKF, which introduces errors such 
as truncation errors. In short, only an estimate of the true state can be obtained 
using (6.20). The Jacobian matrix ∂
∂
−
−
f
x xk
/
ˆ
1 that propagates a previous state 

	
Aiding MEMS-Based INS	
109
vector to the current is the partial derivative of the nonlinear process function 
f with respect to the elements of the state vector x evaluated at the previous 
state estimate. For simplicity, this Jacobian matrix is referred to as Fk. In the 
event that the process noise is also part of the nonlinear difference equation as 
shown in (6.13), the component of (6.19) given in · Ò are linearized by using 
the partial derivative of the function with respect to the noise vector wk–1 and 
evaluated at the estimated state ˆxk −
−
1 (i.e., W w
k
k −1 ) where W
f
x
k
xk
= ∂
∂
−
−
/
ˆ
.
1
Therefore, the linearized form is written as
	
x
f x
f
x
x
x
k
k
x
k
k
k
≈
(
) + ∂
∂
−
(
) +
−
−
−
−
−
−
−
ˆ
,
ˆ
( !
ˆ
1
1
1
0
2
1
/
)
ˆ
...
ˆ
−
−
−
−
−
∂
∂
−
(
) +
+
−
−
1
2
2
1
1
2
1
1
f
x
x
x
W w
x
k
k
k
k
k
/
	
(6.20)
Another linearization is necessary if the measurement equation is also 
nonlinear as discussed earlier. For the simple case given in (6.10), the Taylor 
series expansion has the following form.
z
z
h
x
x
x
h
x
x
k
k
x
k
k
x
k
k
k
≈
+ ∂∂
−
(
) +
∂
∂
−
−
%
%
%
%
/
/
( !)
2
1
2
2
%x
v
k
k
(
) +
+
2
...
	
(6.21)
The measurement vector zk is the true measurement that can come from 
the GPS receiver or any other aiding sensors. Even a physical relationship can 
be used as the measurement [11]. The Jacobian matrix composed of a partial 
derivative of the measurement equation with respect to the state vector evalu­
ated at the approximated current state is called Hk, i.e., H
h
x
k
xk
= ∂∂/
% .
As discussed earlier, for a highly nonlinear observation model, noise is a 
part of the nonlinear measurement function as given in (6.16). The linearization 
process should consider noise as the second parameter for linearization:
z
z
h
x
x
x
h
x
x
k
k
x
k
k
x
k
k
k
≈
+ ∂∂
−
(
) +
∂
∂
−
−
%
%
%
%
/
/
( !)
2
1
2
2
%x
V v
k
k k
(
) +
+
2
...
	(6.22)
where V
h
v
k
xk
= ∂∂/
% .
EKF implementation only considers the first-order approximation of the 
linearized dynamic process and measurement equations.
	
x
f x
F
x
x
W w
k
k
k
k
k
k
k
≈
(
) +
⋅
−
(
) +
−
−
−
−
−
−
ˆ
ˆ
1
1
1
1 	
(6.23)
	
z
z
H
x
x
V v
k
k
k
k
k
k k
=
+
⋅
−
(
) +
%
%
	
(6.24)
where the ? represents multiplication.

110	
MEMS-Based Integrated Navigation
The linearization process for the EKF discussion is summarized by Figure 
6.4.
The information provided about KF and EKF is only a summary; for 
implementation the reader is encouraged to read [1, 7–9]. It should be noted 
that it is beyond the scope of this book to derive the dynamic error model 
of INS and the measurement model of GPS; however, they are shown in the 
Appendix.
EKF Limitations
6.4.2   
The EKF assumes that all the noise components have a 0 mean and follow the 
Gaussian probability distribution function. However, it is not a valid assump­
tion, especially when the noise is part of a nonlinear function. For example, 
GPS and INS integration using EKF consists of linearization of highly nonlin­
ear dynamic equations. Unscented Kalman filters and particle filters are some 
of the other options that are available for nonlinear dynamics systems that do 
not require linearization.
In addition, the linearization process itself can contribute to significant 
linearization errors. EKF only takes the first-order linearization terms into 
account with the assumption that the higher-order terms are so small that they 
can be safely neglected without affecting the accuracy of the navigation states. 
z
z
H x
x
V  v
=
−
+
+
(
)
k
k
k
k
k
k
k
∼
∼
Around ∼x  , z
k
k∼
Nonlinear models
Estimate ∼x  , z
k
k∼
Linearization
Around xk−1
−
∧
x
f
F
W w
(      )
(
)
+
−
+
=
x
x
k
k
k
xk−1
−
k−1
k−1
−
k−1
∧
∧
Figure 6.4  Linearization process for EKF.

	
Aiding MEMS-Based INS	
111
If this assumption fails, the navigation states are erroneous and the solution 
may become unreliable.
Tightly Coupled Verses Loosely Coupled Approach—An Example
6.4.2.1   
In this example, a tightly coupled EKF was implemented. A small dataset that 
consists of four GPS signal degradation periods of approximately 50 to 70 
seconds each is chosen for the processing. The first GPS degradation period 
consists of the time when the GPS receiver has a lock on only three satellites. 
The next degradation period has only two visible satellites, while the last two 
degradation periods have only 1 satellite signal due to trees and buildings. 
Figure 6.5 shows the results of the tightly coupled EKF.
As the tightly coupled EKF can use the raw GPS signals from any num­
ber of satellites in the integration, in theory, it should provide more accurate 
results than the loosely coupled integration technique. A loosely coupled EKF 
for this dataset generates four GPS signal outage periods instead of GPS signal 
degradation periods as there is no position information provided by the GPS 
receiver when the number of visible satellites is less than four. For comparison, 
the loosely coupled EKF results are provided in Figure 6.6.
Figure 6.5  Tightly coupled integration for different GPS satellite availability.

112	
MEMS-Based Integrated Navigation
Figure 6.6  Loosely coupled integration with four GPS outages.
This chapter illustrates Kalman filters as the best solutions for multi­
sensory integration. However, is KF an optimal filter under highly nonlinear 
conditions or with non-Gaussian noises? Chapters 7 and 8 answer this fun­
damental question.
References
Grewal, M.S., Weil, L.R., and Andrews, A.P., 
[1]	
Global Positioning Systems, Inertial Naviga­
tion and Integration, New York, NY: John Wiley & Sons Inc., 2001.
Kim, J.W., Hwang, D.H., and Lee, S.J., “A Deeply Coupled GPS/INS Integrated Kal­
[2]	
man Filter Design Using a Linearized Correlator Output,” PLANS 2006, California, 
April 25–27, 2006, pp. 300–305.
Knight, D.T., “Rapid Development of Tightly Coupled GPS/INS Systems,” 
[3]	
IEEE Aero­
space and Electronic Systems Magazine, Vol. 12, No. 2, February 1997, pp. 14–18.

	
Aiding MEMS-Based INS	
113
Wendel, J., and Trommer, G.F., “Tightly Coupled GPS/INS Integration for Missile Appli­
[4]	
cations,” Aerospace Science and Technology, Vol. 8, No. 7, October 2004, pp. 627–634.
Hide, C., Moore, T., and Smith, M., “Adaptive Kalman Filtering for Low Cost GPS/
[5]	
IMU,” Journal of Navigation, Vol. 56, No. 1, January 2003, pp. 143–152.
Godha, S., “Performance Evaluation of Low Cost MEMS-Based IMU Integrated With 
[6]	
GPS for Land Vehicle Navigation Application,” M.Sc. thesis, Department of Geomatics 
Engineering, University of Calgary, Canada, UCGE Report No. 20239, 2006.
Brown, R.G., 
[7]	
Introduction to Random Signal Analysis and Kalman Filtering, New York: 
John Wiley & Sons, Inc., 1983.
Brown, R.G., and Hwang, P.Y.C., 
[8]	
Introduction to Random Signals and Applied Kalman 
Filtering, Second Edition, New York: John Wiley & Sons, Inc., 1992.
Gelb, A., 
[9]	
Applied Optimal Estimation, Cambridge, MA: MIT Press, 1974.
Featherstone, W.E., and Dentith, M.C., “A Geodetic Approach to Gravity Reduction for 
[10]	
Geophysics,” Computers and Geosciences, Vol. 23, No. 10, 1997, pp. 1063–1070.
Dissanayake, G., et al., “The Aiding of a Low Cost, Strapdown Inertial Unit Using Model­
[11]	
ling Constraints in Land Vehicle Applications,” IEEE Trans. on Robotics and Automation, 
Vol. 17, No. 5, 2001, pp. 731–747.
Wendel, J., and Trommer, G.F., “Tightly Coupled GPS/INS Integration for Missile 
[12]	
Applications,” Aerospace Science and Technology, Vol. 8, 2004, pp. 627–634.
Maybeck, P.S., 
[13]	
Stochastic Models, Estimation and Control, Volume 3, Academic Press 
Inc., 1982.


115
7
Artificial Neural Networks
Despite the availability of several nonlinear filtering techniques, most of the 
present navigation sensor integration methods are still based on Kalman fil­
tering estimation procedures mainly due to its simplicity. Although Kalman 
filtering represents one of the best solutions for multisensor integration, it still 
has some drawbacks in terms of stability, robustness, immunity to noise effects, 
and observability, especially when used with low-cost MEMS-based inertial 
sensors. Kalman filters perform adequately only under certain predefined 
dynamic models. If the Kalman filter is exposed to input data that does not 
fit the model, it will not result in reliable estimates. For low-cost INS/GPS 
integration modules, the nonlinear error terms are ignored when the linearized 
error model for Kalman filtering is developed, which contributes significantly 
towards large position errors, especially in the long term. Another problem 
related to the Kalman filter is the observability of the different states. The system 
is considered to be nonobservable if there are one or more state variables that are 
hidden from the view of the observer (i.e., the measurements). Consequently, 
if the unobserved process is not stable, the corresponding estimation errors 
will be similarly unstable. This chapter discusses the merits and limitations of 
different approaches developed for integrating INS and GPS using artificial 
intelligence.
Introduction
7.1   
The artificial neural network (ANN) is adopted in the field of INS/GPS 
integration as either a total replacement for a Kalman filter or is combined 
with one for improving the overall positioning accuracy. ANN is a massively 
parallel distributed processor that allows modeling highly complex and non­

116	
MEMS-Based Integrated Navigation
linear problems with a high level of stochastic that cannot be solved using 
conventional algorithms [1, 2].
ANNs are networks of many simple processors (units) operating in 
parallel, each possibly having a small amount of local memory. The units are 
connected by communication channels (connections), which usually carry 
numeric data (weight). The units operate only on their local data and on the 
inputs they receive via the connections. The restriction to local operations can 
often be relaxed during the learning process. An ANN should have specific 
training rules whereby the weights of connections are adjusted on the basis of 
learning data. In other words, an ANN learns from examples (of known input/
output sequences) and exhibits some capability for generalization beyond the 
training data. An ANN normally has great potential for parallelism, since the 
computations of the components are largely independent of each other. The 
function of each element is determined by network structure, connection 
strengths, and the processing performed at computing elements or nodes.
The inspiration of ANNs came from the desire to produce artificial sys­
tems capable of performing sophisticated (or perhaps intelligent) computations 
that mimic the routine performance of the human brain. An ANN resembles 
the brain in two respects: first, that knowledge is acquired by the network 
through a learning process, and second, that the interneuron connection 
weights are used to store the knowledge. In a strict mathematical sense, ANNs 
do not provide a closed form solution for the problem but offer a complex, 
accurate solution based on a representative set of historical examples of the 
relationship [3]. An ANN is practically useful for classification and function 
approximation/mapping problems, which are tolerant of some imprecision and 
have a considerable amount of training data available. Almost any mapping 
between vector spaces can be approximated to arbitrary precision by feedfor­
ward ANNs (which are the type most often used in practical applications) if 
enough training data and computing resources are available.
Several ANN-based INS/GPS integration architectures utilizing different 
types of ANNs were suggested in the literature [11–21]. The different archi­
tectures vary on the types of inputs and outputs to the ANN module. Some 
of these architectures were examined using different types of ANNs including 
multilayer perceptron neural networks (MLPNN), radial basis function neural 
networks (RBFNN), and input delay neural networks (IDNN). Furthermore, 
the benefits of fuzzy reasoning were also explored and combined with the neu­
ral network offering adaptive neuro fuzzy inference system (ANFIS) method, 
which was also used for INS/GPS integration for different low-cost navigation 
applications. In general, there are two modes of operation for any of the above 
ANN types. The first is the update mode of operation where the empirical ANN 
model is established during a special training procedure that utilizes the INS 

	
Artificial Neural Networks	
117
and GPS data. As shown in Figure 7.1(a), the output of the ANN module is 
compared with a desired performance and the obtained error is fed to a certain 
training criterion, such that the ANN model parameters are tuned to minimize 
the error [usually the mean square error (MSE)]. After achieving the training 
goal, or once the desired response becomes unavailable (like in the case of GPS 
outage), an ANN operates in the prediction mode [shown in Figure 7.1(b)] 
where the ANN processes the input data and provides reliable estimates of 
the output. Figure 7.1 demonstrates the general concept of operation of the 
ANN for both the update and prediction modes, which are common for all 
INS/GPS integration architectures covered in this chapter. For each of these 
architectures, the type of ANN utilized and the training criterion used will be 
discussed in the following sections.
Types of ANNs
7.2   
Among the various types of ANNs, the MLPNN and the RBFNN are widely 
used in several applications and have been frequently utilized for INS/GPS 
Figure 7.1  The ANN (a) update  and (b) prediction modes of operation.

118	
MEMS-Based Integrated Navigation
integration. Furthermore, because of its efficiency in dealing with uncertainty, 
imprecision, and vagueness in input data in dynamic environments, a fuzzy 
system was also employed by utilizing the ANFIS method for INS/GPS. The 
purpose of this section is to provide a brief background on MLPNN, RBFNN, 
and ANFIS as three types of ANNs widely used for INS/GPS integration 
purposes. More information can be found in [1–4].
Multilayer Perception Neural Network (MLPNN)
7.2.1   
MLPNNs consist of several neuron layers with the different neurons of differ­
ent layers connected to each other through certain weights. The structure of 
a neuron is shown in Figure 7.2. The inputs x1, x2, … xP are each transmitted 
through a connection that multiplies its strength by the scalar weight W. The 
weighted inputs are the only argument of the transfer function j, which pro­
duces the output y. The threshold (or bias) q may be viewed as simply being 
added to the weighted inputs. This sum is the argument of the transfer function 
j, which is typically a step function or a sigmoid function. Note that W and q 
are both adjustable scalar parameters of the neuron. The central idea of neural 
networks is that such parameters can be adjusted so that the network exhibits 
some desired or interesting behavior. Thus, the network can be trained to do 
a particular job by adjusting the weight or bias parameters, or perhaps the 
network itself will adjust these parameters to achieve some desired end.
Transfer functions j for the neurons are needed to introduce nonlinear­
ity into the network. Without this nonlinearity, neurons would perform in a 
k1
W
W
kp
W
1
x
2
x
p
x
+
k
y
kθ
ku
Synaptic
weights
Activation
function
Threshold
Output
k2
ϕ(  )·
Figure 7.2  Single neuron model inside an MLPNN.

	
Artificial Neural Networks	
119
linear fashion and the MLPNN would not be able to map nonlinear input/
output relationships. For the output neuron(s), one should choose a transfer 
function suitable to the distribution of the target values. Bounded activation 
functions such as the logistic function are particularly useful when the target 
values have a bounded range. But if the target values have nonbounded ranges, 
it is preferable to use an unbounded activation function. If the target values 
are positive but have no upper bound, one can use an exponential output 
activation function. Many transfer functions have been introduced over the 
last few years by researchers specializing in ANNs. However, only three of these 
transfer functions are commonly used:
The linear transfer function:
1.	
 Neurons utilizing this transfer function 
are usually used as linear approximations in adaptive linear filters.
The log-sigmoid transfer function:
2.	
 This transfer function shown in 
Figure 7.3(a) takes the input, which may have an arbitrary value, 
and reduces the output into the range 0 to 1. This function is 
commonly used in backpropagation networks, in part because it is 
differentiable.
The tan-sigmoid transfer function:
3.	
 This transfer function is similar to 
the log-sigmoid except for the output, which can take values between 
±1 as presented in Figure 7.3(b).
Figure 7.3  The log-sigmoid (a) and tan-sigmoid (b) transfer functions.

120	
MEMS-Based Integrated Navigation
Input 1
Input 2
Output
Output layer
Hidden layers
Input layer
Figure 7.4  Example of an MLPNN.
Two or more of the neuron structures shown in Figure 7.2 may be com­
bined to construct a neuron layer, and a particular network may contain one 
or more such layers. In general, the input and output layers of any network 
have a number of neurons equal to the number of the inputs and outputs of 
the system, respectively. The neuron layers between the input and the output 
layers are known as hidden layers. Figure 7.4 demonstrates an MLPNN of 
two hidden layers for a two inputs/one output problem. Examples and more 
implementation details are provided in Sections 7.3 and 7.4.
The number of neurons and hidden layers can be arbitrarily chosen and 
adjusted. It has been reported that one or two hidden layers with an arbitrarily 
large number of neurons may be enough to approximate any function [1]. 
MLPNNs often have one or more hidden layers of sigmoid neurons followed 
by an output layer of linear neurons. Multiple layers of neurons with nonlinear 
transfer functions allow the network to learn nonlinear and linear relationships 
between input and output data. The linear output layer lets the network pro­
duce values outside the range –1 to +1. To constrain the output of a network 
(such as between 0 and 1), a sigmoid transfer function (e.g., log-sigmoid) 
should be used at the output layer.
The learning criterion is a procedure for modifying the weights and biases 
of the network. This procedure may also be referred to as a training algorithm 
[1–5]. The learning rule is applied to train the network to perform some par­
ticular task. It is provided with a known input/output set of data. The known 
output data are considered as the target output of the network. As the inputs 
are applied to the network, the network outputs are compared to the targets. 
The learning rule is then used to adjust the weights and biases of the network 
in order to move the network outputs closer to the targets.
Radial Basis Function Neural Network (RBFNN)
7.2.2   
The conventional neural network model of the MLPNN is based on units, 
which compute a nonlinear function of the scalar product of the input and 
weight vectors. An alternative architecture for ANNs is one in which the 

	
Artificial Neural Networks	
121
distance between the input vector and a certain prototype vector determines 
the activation of a hidden unit [4]. This architecture is known as a radial basis 
function neural network (RBFNN), which is composed of receptive units 
(neurons) that act as the operator providing the information about the class 
to which the input signal belongs. An RBFNN gives an approximation of any 
input/output relationship as a linear combination of the radial basis functions 
(RBF) [4, 6]. RBFs are a special class of functions with the characteristic fea­
ture that their response decreases (or increases) monotonically with distance 
from a central point. Although the architectural view of an RBFNN is very 
similar to that of an MLPNN, the hidden neurons possess basis functions to 
characterize the partitions of the input space. Each neuron in the hidden layer 
provides a degree of membership value for the input pattern with respect to the 
basis vector of the respective hidden unit itself. The output layer is comprised 
of linear neurons.
As shown in Figure 7.5, the structure of an RBFNN consists of an input 
layer, one hidden layer, and an output layer. The input layer connects the inputs 
to the network. The hidden layer applies a nonlinear transformation from the 
input space to the hidden space. The output layer applies a linear transforma­
tion from the hidden space to the output space.
2
ϕ
N
ϕ
X 1
X 2
X m
Σ
1
ϕ
Y
Output
Output
layer
Hidden
layer
Radial basis functions
Input
Input
layer
WN
W1
W2
Figure 7.5  Structure of an RBFNN.

122	
MEMS-Based Integrated Navigation
The radial basis functions j1, j2, …, jN are known as hidden functions 
while {
( )}
ϕi
i
N
x
=1 is called the hidden space. The number of basis functions 
(N ) is typically equal to or less than the number of data points available for 
the input data set. Among several radial basis functions, the most commonly 
used is the Gaussian, which in its one-dimensional representation takes the 
following form:
	
ϕ
µ
µ
x
e
x
d
,
(
) =
−
−
2
2
2
	
(7.1)
where m is the center of the Gaussian function (mean value of x) and d is the 
distance (radius) from the center of j(x, m), which gives a measure of the 
spread of the Gaussian curve. The hidden units use the radial basis function. 
If a Gaussian function is used, the output of each hidden unit depends on 
the distance of the input x from the center m. During the training procedure, 
the center m and the spread d are the parameters to be determined. It can be 
deduced from the Gaussian radial function that a hidden unit is more sensi­
tive to data points near the center. This sensitivity can be tuned (adjusted) by 
controlling the spread d. It can be observed that the larger the spread, the less 
the sensitivity of the radial basis function to the input data. RBFNNs require 
the following tasks during the training process [4]:
Allocating the centers of the radial basis functions as a part of the 
1.	
training procedure. Therefore, no constraints are imposed on these 
centers by the input vectors.
Instead of having a common spread 
2.	
d, each basis function is given 
its own spread that is determined during the training process.
The bias parameter 
3.	
W0 is included in the weighted linear sum of the 
different basis functions provided at the output layer. The output 
Y(x) is given as:
	
Y x
W
W
x
j
j
j
N
( )
( )
=
+
=∑
0
1
ϕ
	
(7.2)
where W0 is the bias parameter. This parameter compensates for the difference 
between the average value of the basis function activations and the correspond­
ing average value of the target output. Wj represents the vector of weights at 
the output layer as shown in Figure 7.5 where (1 < j < N). Linear superposi­
tion of localized function (7.2) has been reported to be capable of developing 

	
Artificial Neural Networks	
123
a universal approximation for the output if the spreads of the Gaussian basis 
functions are treated as adjustable parameters [4, 6].
The unique architecture of RBFNNs makes their training procedure 
substantially faster than the methods used to train MLPNN. The interpretation 
given to the hidden units of an RBFNN leads to a two-stage training procedure. 
In the first stage, the parameters governing the basic functions (m and d) are 
determined using fast unsupervised training methods that utilize only the input 
data. The second stage involves the determination of the output layer weight 
vector Wj. Since these weights are defined in a linear problem [see (7.2)], the 
second stage of training is also fast. It should be noted that the basic functions 
are kept fixed while the weights of the output layer are computed [4].
For INS/GPS integration, the RBFNN is trained (or updated) in real time 
during the availability of the GPS signal. Several learning algorithms have 
been proposed for training RBFNN. Among these different algorithms, the 
orthogonal least squares algorithm is the most popular. This algorithm consid­
ers that the number of radial basis functions in the hidden layer is known in 
advance. The centers of the radial basis functions {m1, m2, …, mN} are chosen 
equal to a random subset of the input vector from the training set. The spread 
is determined by normalization—dividing the maximum distance between any 
two centers by the square root of the number of centers Max µ
µ
j
k
N
−
(
)






.
The optimal values of the weights at the output layer are found using the 
pseudoinverse method [4]. However, the choice of the number of radial basis 
functions (usually equal to the number of input data sets) before starting the 
training procedure may result in more radial basis functions than those really 
needed to develop an efficient RFBNN model. Using another approach [7], 
which is suitable for real-time implementation, consider only one radial basis 
function at the hidden layer, perform the training algorithm, and continu­
ously repeat the algorithm while increasing the number of radial basis func­
tions by one at each iteration. This iterative procedure stops after achieving a 
certain objective mean square estimation error. Such an approach would be 
computationally intensive since at each step it would be necessary to obtain 
a complete pseudoinverse solution to determine the weights at the output 
layer for each possible choice of the basis functions. In addition, the above 
technique may require a large amount of training data to achieve certain mean 
square estimation error. Extra details are provided in Sections 7.3 and 7.4.
In general, RBFNN is similar to MLPNN in providing techniques for 
ap­prox­imating arbitrary nonlinear functional mappings between multi­dimensional 

124	
MEMS-Based Integrated Navigation
spaces. However, the inherent structures of the two networks are very different. 
Some of these important differences that have made RBFNN more attractive 
than MLPNN for INS/GPS integration in real time are:
An MLPNN can have many layers of weights with a relatively com­
1.	
plex pattern of connectivity. Several activation functions can be used 
within the same network. However, an RBFNN has a more simple 
architecture that consists only of two layers in which the first layer 
contains the parameters of the basis functions and the second layer 
forms linear combinations of these basis functions to generate the 
output. This unique architecture of the RBFNN has the advantage 
of a fast training procedure when compared to an MLPNN.
The parameters of the MLPNN (biases and weights) are deter­
2.	
mined simultaneously during the training procedure with supervised 
training techniques. However, an RBFNN is typically trained in 
two stages with the parameters of the basis functions being first 
determined by unsupervised learning techniques using the input 
data alone. The weights at the second layer are found by fast linear 
supervised methods.
The interference and crosscoupling between the different hidden 
3.	
units of an MLPNN may result in a highly nonlinear training pro­
cess in addition to problems of local minima. This can lead to a very 
slow convergence even with advanced optimization strategies, which 
may not be appropriate for real-time implementation. By contrast, 
an RBFNN would not face this problem due to its localized basis 
functions, which are local with respect to the input space. Thus, for 
a given input vector, only a few hidden units will have significant 
activation.
Adaptive Neuro Fuzzy Inference System (ANFIS)
7.2.3   
An ANFIS is a fuzzy logic algorithm that provides a method for mapping an 
input/output relationship based on available data tuples. The ANFIS archi­
tecture is based on the original Tagaki-Sugeno-Kang (TSK) fuzzy inference 
system [8–10]. The system acquires its adaptability by utilizing a hybrid learn­
ing method that combines backpropagation and least mean square optimiza­
tion algorithms. When an adequate number of data tuples exist, learning can 
be achieved by tuning the membership functions using the gradient descent 
method to determine the premise parameters, along with applying the least 
mean square method to modify the consequent parameters so that the model 

	
Artificial Neural Networks	
125
output matches the system output with a minimum root mean square error. 
The ANFIS model was proven as an efficient mapping technique for many 
nonlinear systems. A basic example of an ANFIS structure used to provide 
the necessary data fusion for INS/GPS integration is presented in Figure 7.6 
where a nonlinear model of INS error (for either position or velocity) can be 
established based on processing the time-varying INS position/velocity input. 
The model parameters can be obtained during the update mode of operation 
using special training algorithm while the GPS position and velocity outputs 
are available. In this example, two inputs [INS position (or velocity) and time] 
and one output [INS position (or velocity) error] are chosen. The first layer 
contains the membership functions. The number and shape of membership 
functions are predefined. However, the original spread and overlap of the 
membership functions is defined by the algorithm by using the fuzzy clustering 
algorithm. The membership function parameters are then tuned during the 
learning process. The fuzzy operator (P) is operated at the second layer of the 
ANFIS and a normalized firing strength (W i) is computed in the third layer 
for each (i) consequent [8, 9].
The system output (i.e., INS error) is computed on the basis of the TSK 
fuzzy system as follows:
	
if x is A1 and y is B1, then f1 = p1x + q1y + r1	
(7.3)
	
if x is A2 and y is B2, then f2 = p2x + q2y + r2	
(7.4)
	
INS_error = Σwifi	
(7.5)
Figure 7.6  An example of an ANFIS structure for modeling INS errors.

126	
MEMS-Based Integrated Navigation
where the linear parameters pi, qi, and ri are the consequent parameters deter­
mined by the fuzzy system to relate the input fuzzy sets to the output fuzzy 
sets. The output in the fifth layer is the sum of the weighted outputs of all the 
fuzzy rules as in (7.5).
The major benefit of an ANFIS is its hybrid training methodology. It is 
hybrid since it utilizes least mean square optimization technique during forward 
path. Meanwhile, the descent gradient optimization technique is applied dur­
ing backward computation propagation. For instance, during forward path, 
the fourth layer (rule consequents) parameters {pi, qi, ri} are determined. On 
the other hand, errors propagating during the backward propagation tune the 
membership function parameters (spread and center). This hybrid learning is 
very beneficial in terms of fast training and achievement of a low-error goal. 
This learning can be achieved by specifying a step size combined with incre­
ment and decrement rates that control the increase and decrease of the step size 
according to the root mean square error (RMSE) between ANFIS prediction 
and the system output. This allows the ANFIS to achieve a fast convergence 
towards the global minimum of the RMSE optimization function. Detailed 
descriptions about ANFIS parameters can be found in [8–10].
Whole Navigation States Architecture
7.3   
The ANN is adopted in this architecture to mimic the vehicle dynamics and 
provide an INS/GPS integration module that processes the INS velocity and 
azimuth at its input and delivers the vehicle’s position at the output [11–13]. 
The ANN is trained to perform a particular function by tuning the values of 
the weights (connections) between the neurons. An ANN has the capability 
to provide the necessary nonlinear processing of both INS and GPS despite 
the stochastic nature of their signals, which is the case when low-cost and 
MEMS-based inertial sensors are used. Another important advantage is that 
the ANN-based INS/GPS integration is a modeless technique that does not 
require any kind of prior knowledge. Thus, the proposed system is independent 
of the platform or the type of INS/GPS utilized. Two update architectures are 
described here, both integrating INS and GPS in a loosely coupled fashion 
where the ANN module is trained and the associated empirical model is estab­
lished as long as the GPS data is available. During periods of GPS satellite 
signal blockage, the ANN module operates in the prediction mode relying on 
the output of the INS mechanization and the established empirical model to 
provide accurate positioning information.

	
Artificial Neural Networks	
127
Example of Position Update Architecture
7.3.1   
The position update architecture (PUA) utilizes an MLPNN with a back­
propagation training algorithm to integrate the data from INS and GPS and 
mimic the dynamical model of the moving vehicle carrying both systems 
[13]. After training the network, it can predict the vehicle’s position during 
GPS signal blockage. As shown in Figure 7.7, the network inputs are the INS 
velocity (VINS) and azimuth (fINS), which are obtained from the INS mecha­
nization and produced at the INS data rate (typically 50 Hz). The output of 
the network is the difference in coordinates between two different consecutive 
epochs [N(t) and N(t – 1) for the north position component and E(t) and 
E(t – 1) for the east position component]. Position differences are used instead 
of the position component itself to simplify the training procedure. In fact, 
the magnitude of position components N(t) and E(t) are usually in the order 
of 105 meters, which may deteriorate the efficiency of the training algorithm 
to obtain the optimal values of the network weights. On the contrary, the 
magnitude of position differences are usually about 102 meters level and the 
relationship between the network inputs (INS velocity and azimuth) and the 
network outputs (position differences) is easier for neural networks to learn. 
Therefore, the utilization of position differences as network outputs reduces 
the complexity of the input/output function relationship, provides a more 
efficient MLPNN training, and reduces the time required for the training 
procedure. The INS velocity and azimuth information are used as inputs and 
the MLPNN outputs are compared to the GPS position differences. As long 
as the GPS signal is available, the training process continues to reduce the 
estimation error in order to obtain optimal values of the MLPNN weights. 
During GPS outages (i.e., signal blockage), the MLPNN parameters are used 
in prediction mode to provide estimates for the position components along 
the east and the north directions.
∆N t( )
∆E t( )
φ(
1)
t−
Output layer
Hidden layers
Input layer
V(
1)
t−
Figure 7.7  MLPNN module for PUA for INS/GPS integration.

128	
MEMS-Based Integrated Navigation
Example of Position and Velocity Update Architecture
7.3.2   
The position and velocity update architecture (PVUA) utilizes both the position 
and velocity information from GPS as the desired output. Thus, it contains 
two parallel processing architectures, PUA and velocity update architecture 
(VUA) [11–13]. Similar to PUA, the VUA utilizes a multilayer feedforward 
neural network (NN) with a backpropagation training algorithm. As shown in 
Figure 7.8, the VUA receives time information (t) and velocity outputs from 
INS [VINS(t)] and generates estimated velocity outputs [VVUA(t)], which are 
then compared to the GPS velocity information. As long as the GPS signal 
is available, the training process is continuously improving the estimation 
error in order to obtain the optimal values of the VUA network weights. 
During GPS outages, the MLPNN parameters are used in prediction mode 
to compensate for INS velocity errors and to provide accurate estimates for 
the velocity components.
It should be noted that the above two architectures (PUA and PVUA) 
are based on establishing an empirical model for the INS position and velocity 
while the GPS signal is available. Neither provides a prediction of the position 
and velocity errors like the case of Kalman filtering. The training procedure can 
be established using a special windowing technique like the one described in 
[4] to enable near real-time operation of the update (training) procedure.
Both PUA and PVUA approaches showed superior performance over KF 
during long periods of GPS outages with at least 70% improvement in the 
case of PUA and at least 80% improvement in the case of PVUA. However, 
they were proposed originally for high-grade inertial sensors (< 0.3°/rt hr) and 
have not been examined for very low-cost inertial sensors.
Navigation Error States Architecture
7.4   
INS/GPS integration algorithms based on MLPNNs have been suggested and 
applied to different high-grade INS. It has been shown that a PVUA utiliz­
VINS
t
V VUA
Output layer
Hidden layers
Input layer
Figure 7.8  MLPNN module for VUA for INS/GPS integration.

	
Artificial Neural Networks	
129
ing two MLPNNs can process the INS azimuth and velocity and provide the 
position components along both the east and north directions. The param­
eters of the MLPNNs are adapted using GPS position and velocity updates. 
However, the PVUA system did not provide an update scheme for the vertical 
position components (the vehicle altitude). In addition, the ANN model of 
PVUA deals with the INS position components instead of their errors. Thus, 
no information about the accuracy of this system and the statistical properties 
of the estimates can be delivered during the navigation mission. Furthermore, 
besides the fact that it is almost impossible to conduct sensitivity analysis for 
the effect of changing the internal structure (number of hidden layers and 
number of neurons in each layer) of the MLPNNs on the system performance, 
the real-time implementation and the accuracy of the system during this mode 
of operations cannot be addressed.
In an attempt to design a modeless module that operates similarly to a 
KF but with no need for dynamic or stochastic models for INS, the P – dP 
approach was proposed [14–17]. An MLP network was initially suggested to 
be used for each position component that processes the INS position (P) at 
the input and provides the corresponding INS position error (dP) at the out­
put [14]. The suggested method updated the three P – dP networks (for the 
three position components) by GPS position updates. Although information 
about the accuracy achieved during the navigation mission became available, 
the internal structure of each of the MLP networks has to change until the 
best performance is achieved, which leads to a long design time. In addition, 
the issue of the real-time implementation continues to be a challenge. The 
P – dP architecture can be improved by using RBFNNs instead of MLPNNs 
[15, 16] since RBFNNs can be utilized without identifying the number of 
neurons in their hidden layer. In addition, hidden neurons are dynamically 
generated during the training procedure to achieve the desired performance. 
The original major drawback of this RBFNN-based module was that the 
training was still performed using all INS and GPS data available prior to the 
GPS outage, which was determined to be impractical and almost impossible 
to implement in real time because of long training times. In addition, the 
real-time implementation and the factors that affect the performance of the 
system during this mode of operation have not been addressed in the online 
RBF-based P – dP module. The real-time realization issue can be addressed 
using a special windowing technique that enables near real-time operation 
of the RBFNN modules [16, 17]. The ANFIS can be also used with the P 
– dP module for INS/GPS integration [18]. However, the optimization of 
the ANFIS parameters during the operation of the system may pose more 
computation load for real-time implementation. The ANFIS-based P – dP 
architecture is improved when utilizing both GPS position and velocity updates 

130	
MEMS-Based Integrated Navigation
with real-time crossvalidation during the update mode of operation to ensure 
the generalization of the model.
Architecture for INS/GPS Integration
7.4.1   
The INS/GPS integration based on the P – dP architecture is based on the 
estimation of INS position error (dPINS) by processing the INS position (PINS). 
The proposed module can utilize either an ANFIS or RBFNN to provide an 
optimal temporal estimation of the INS errors (dPINS). An MLPNN is usu­
ally avoided. The proposed system architecture is comprised of three modes 
of operation: initialization, update [Figure 7.9(a)], and prediction [Figure 
7.9(b)]. The initialization mode and the update mode are utilized to initialize 
the first learning rule base and to limit INS error growth, respectively, during 
GPS signals availability. The prediction mode is used to correct the INS posi­
tion when the GPS signal is lost. Thus, the P – dP module is trained during 
the availability of the GPS signal to recognize patterns of the position error 
embedded in the input position components. In the case of satellite signal 
blockage, the P – dP module mimics the latest vehicle dynamics and delivers 
a prediction of the vehicle position error.
Figure 7.9  (a) Update mode of operation (GPS signal is available), and (b) prediction 
mode of operation (during GPS outages) for the P – dP architecture.

	
Artificial Neural Networks	
131
The INS position (PINS) and time (T ) are the inputs to the module 
while the error in the INS position (dPINS) is the module output. The esti­
mated INS position error provided by the P – dP module is then compared 
to the error between the INS original position and the corresponding GPS 
position (dPINS|GPS). The number and shape of the radial basis functions when 
using RBFNN, or the membership functions when using ANFIS, shall be 
predefined. (Gaussian shape membership functions are usually used; how­
ever, other shapes may also be possible.) The original mean and spread of the 
membership functions are computed as part of the training criterion. For an 
ANFIS, the membership values are evaluated at the first layer and the fuzzy 
t-norm operator (P) is implemented at the second layer. A normalized firing 
strength is computed at the third layer. Details of the training procedure can 
be further explored in [3, 5, 9].
The difference between dPINS and dPINS|GPS is the training error D(dP) 
of the RBFNN or ANFIS module. For an RBFNN, in order to minimize 
this error, the training of the RBFNN module continues and the RBFNN 
parameters are continuously updated according to the least square criterion 
until reaching a certain minimal mean squared estimation error (MSE). To 
minimize the training error, the ANFIS module updates the learning rule base 
(membership function parameters and consequent parameters) using a hybrid 
learning approach combining the least square and backpropagation techniques 
until reaching a certain minimal RMSE.
When the satellite signal is blocked (during GPS outages), the system is 
switched to the prediction mode where the P – dP module is used to predict 
the INS position error using the latest learning rule base obtained before losing 
the satellite signals. The error is then removed from the corresponding INS 
position component to obtain the corrected INS position (PINSC). To obtain a 
three-dimensional positioning solution, three P – dP modules are developed to 
provide a complete navigation solution in the three axes for a moving vehicle 
represented by the three position components.
Several other sources of errors should also be highlighted here that con­
tribute to the overall position error of the vehicle in different ways. As discussed 
in Chapter 3, these sources include the inertial sensor bias drift and scale factor 
instability, the initial misalignment error during INS initialization, and the 
error in the heading angle of the vehicle (the azimuth error). The azimuth error, 
for example, can have a significant contribution on the position error along 
both the east and north position components, especially at high speeds since 
it is modulated by the vehicle velocity. Although all these error sources are not 
explicitly represented in the architecture shown in Figure 7.9, it is evident that 
the P – dP module incorporates the effects of such errors in two ways. First, it 

132	
MEMS-Based Integrated Navigation
establishes the learning rule base to pattern vehicular navigation performance 
using exemplar navigation scenarios that have been affected by the same set 
of error sources. Second, it considers the input parameters as interval data 
with membership values rather than crisp values, which provides room for 
uncertainty in the input parameters due to these sources of errors.
System Implementation
7.4.2   
In order to utilize the P – dP module in a temporal INS/GPS integration, a 
sliding window with a certain window size (W) is considered. For each of the 
three RBFNN/ANFIS modules, the number of samples (equal to W ) of the 
INS position component PINS and the corresponding GPS position PGPS are 
acquired from both systems. The INS position is considered as the input to 
the P – dP module and the error between PINS and PGPS is considered to be 
the corresponding desired response (dPINS|GPS). The update procedure of the 
P – dP learning rule base starts after collecting the Wth sample of both INS 
and GPS position components. Before considering the next INS and GPS 
samples, the ANFIS module is trained to mimic the position errors until 
reaching a certain minimum RMSE or after completing a certain number 
of training epochs. To guarantee timely operation of the system, the update 
procedure is terminated at the end of this number of training epochs even if 
the desired RMSE is not achieved.
While the GPS signal is available, the data window continues to slide, 
collecting new samples from INS and GPS position components. The errone­
ous INS signal has to be corrected before being applied to the P – dP module. 
Therefore, assuming dPINS(i + 1) = dPINS(i), the corrected INS position com­
ponent can be obtained as
	
PINSC(i + 1) = PINS(i + 1) – dPINS(i)	
(7.6)
where dPINS(i) is the INS position error provided by the P – dP module at 
time instance i.
Since the GPS signal is available during the update mode, both PINSC 
and the position error between PINSC and PGPS are used to train the ANFIS to 
mimic the dynamics present within the last data window. This results in a new 
ANFIS rule base, which is used to provide an estimate for the INS position 
error at time i + 1 [dPINS(i + 1)]. Therefore, the INS position is continuously 
updated and the INS position errors (estimated by the ANFIS module) are 
removed, thus keeping accurate INS position components available in case of 
any GPS outages.

	
Artificial Neural Networks	
133
It should be noted that the proper choice of the window size is essential 
to guarantee the desired accuracy while ensuring system robustness in real 
time. The complexity of choosing the window size is related to its dependence 
on the level of vehicle dynamics and the length of the outage periods and its 
significance on the update procedure. Therefore, there is a trade-off in choosing 
a small or large window size. Large window sizes allow mimicking of signifi­
cant details of the latest vehicle dynamics; thus, the module becomes reliable 
during GPS outages. However, large window sizes may complicate the update 
procedure and result in a long processing time. On the other hand, a fast and 
robust update procedure can be achieved using small window sizes due to the 
reduced level of nonstationary INS and GPS data. Moreover, using relatively 
small window sizes prevents the consideration of inaccurate position informa­
tion provided by the ANFIS module during the first outage for the prediction 
of the INS position components. However, relatively small window sizes may 
cause the system to lose reliability in the case of relatively long GPS outages. 
As a trade-off to the problem, optimal window sizes can be determined using 
means of multiobjective optimization (considering reliability and updating 
time requirements) or by extracting a set of heuristic learning rules based on 
system observation.
The Combined 
7.4.3   
P – cP and V – cV Architecture for INS/GPS 
Integration
In the P – dP architecture from Section 7.4.1, the ANN module is trained 
to mimic the latest vehicle dynamics so that, in the case of GPS outages, the 
system relies on INS and the recently updated ANN module to provide the 
vehicle position. Several neural networks and neurofuzzy techniques were 
implemented in a decentralized fashion and provided acceptable accuracy for 
short GPS outages. In some cases, poor positioning accuracy during relatively 
long GPS outages may be obtained. In order to prevail over this limitation, 
P – dP architecture can be further optimized by utilizing both GPS position 
and velocity updates. The ANN module (either ANFIS or RBFNN) for INS/
GPS integration is designed to work in real time to fuse the INS and the GPS 
position and velocity data, to estimate the INS position and velocity errors, 
and to enhance the INS positioning accuracy [19]. Along each of the three axes 
of the navigation frame, two ANN modules are utilized. One of the modules 
is for the position and the other is for the velocity. For each of these modules, 
two inputs (INS position/velocity and time) and one output (INS position/
velocity error) are used.

134	
MEMS-Based Integrated Navigation
The ANN velocity module processes the INS velocity (VINS) and time 
(t) as inputs and provides the corresponding error in the INS velocity (dVINS) 
at the output. The estimated INS velocity error is then compared to the 
error between the INS original velocity and the corresponding GPS velocity 
(dVINS |GPS). The difference between dVINS and dVINS|GPS is the estimation 
error [D(dV )] of the ANN velocity module. In order to minimize this error, 
the ANN velocity module is trained to adjust the ANN parameters that are 
continuously updated according to the least square criterion until reaching a 
certain minimal RMSE error. However, when the GPS signal is blocked, the 
system is switched to the prediction mode where the ANN velocity module is 
used to predict the INS velocity errors (dVINS) using the latest ANN parameters 
obtained before losing the satellite signals. The error is then removed from the 
corresponding INS velocity component to obtain the modified INS velocity 
(Vˆ ). The position update procedure along the three directions follows the 
velocity update procedure to obtain the three position components based on 
integrating the corrected INS velocities. The modified INS position (PmINS) 
and time (t) are the inputs to the ANFIS position module while the error in 
the INS position (dPINS) is the module output. The INS position error esti­
mated by the ANN module (dPINS) is then compared to the error between the 
INS-modified position and the corresponding GPS position (dPINS|GPS). The 
difference between dPINS and dPINS|GPS is the estimation error [D(dP)] of the 
ANFIS position module. To minimize this error, the ANN module is trained 
to update the rule-base parameters that describe the fuzzy system premises and 
consequences, such that the RMSE is minimized. However, when the satellite 
signal is blocked (during GPS outages), the system is switched to the prediction 
mode where the ANFIS position module is used to predict the INS position 
error using the latest ANN parameters obtained before losing the satellite 
signals. The error is then removed from the corresponding INS-modified posi­
tion to obtain the corrected INS position (Pˆ). A block diagram of the above 
ANN-based approach for INS/GPS integration is shown in Figure 7.10.
Although the suitability of the previously mentioned techniques for 
several high grades of INSs is a proven fact, several challenges and inadequa­
cies have been observed when they are applied to low-cost INS, especially for 
relatively long GPS outages in the long-term part of the trajectory [20, 21]. 
The high noise level and large bias drifts associated with very low-cost MEMS 
inertial sensors result in a large drift in the position and velocity components 
when MEMS-based INS operates in the standalone mode. Augmentation 
with Kalman filtering usually makes the ANN-based architectures in Sections 
7.3–7.4 more suitable for such systems.

	
Artificial Neural Networks	
135
ANN
v
m
elocity
odule
ANN
position
module
INS
V
GPS
INS
INS|GPS =
−V
V
δV
Training
criterion
Training
criterion
∫Vˆ
m
INS
P
GPS
INS
INS|GPS =
−
P
P
δP
m
Pˆ
+
−
+
−
−
+
+
−
INS
δV
INS
δP
Vˆ
Prediction mode
Update mode
Figure 7.10  ANFIS-based position and velocity update for INS/GPS integration.
ANN/KF Augmented Module for INS/GPS Integration
7.4.4   
For very low-cost MEMS-based INS/GPS integration, the P – dP and V – dV 
architectures can be further enhanced if augmented with Kalman filtering. This 
provides robust nonlinear modeling of INS errors and accurate positioning 
information in cases of long GPS outages. The major limitation of the above 
ANN-based modules is that they cannot be used standalone with very low-
cost MEMS-based sensors without the aid of Kalman filtering as the output 
of the low-cost sensors degrades quickly over time and must be corrected at 
regular intervals. The growing positional error affects the performance of the 
ANN module, since after only a short period of time the mechanized IMU 
output is no longer reliable.
The INS positions/velocities along each direction are corrected with the 
errors computed at the prediction stage of the KF. Each of these corrected 

136	
MEMS-Based Integrated Navigation
positions/velocities is used as an input to an ANN module (either RBFNN 
or ANFIS). The output of each module is the corresponding residual INS 
position/velocity error. During the update procedure, the three ANN modules 
are updated (trained) using the GPS position/velocity. This position/velocity 
update scheme creates an empirical model for the stochastic, nonstationary, 
and nonlinear parts of the INS errors that cannot be removed by a KF. These 
errors cannot be efficiently estimated at the KF prediction stage because it 
relies totally on the INS error model. In urban canyons or any denied GPS 
environments, the three ANN modules operate in the prediction mode. The 
three INS position/velocity components are processed by removing the corre­
sponding errors computed by the KF prediction stage and the ANN modules. 
The output of the prediction stage of the KF is called the predicted INS error 
and it is the input to the AI module. The INS position/velocity without the 
predicted INS error is called the predicted INS position/velocity. The output of 
the AI module is called the corrected INS error and is compared to the target 
position/velocity error, which is the difference between the predicted INS posi­
tion/velocity and the GPS position/velocity. Figure 7.11 demonstrates the block 
Figure 7.11  Flowchart of the augmented ANN/KF architecture.

	
Artificial Neural Networks	
137
diagram of the augmented ANN/KF solution for both position and velocity 
updates from GPS. In this figure, the ANN module is trained to model the 
residual nonlinear parts of the INS errors. For very low-cost MEMS-based 
inertial systems, those nonlinear error terms neglected for the dynamic error 
model used by KF may significantly deteriorate the performance. When the 
MEMS-based INS operates in the standalone mode during the GPS satellite 
signal blockage, the large values of stochastic bias drifts and scale factor insta­
bilities may make these nonlinear error terms significant, thus deteriorating 
the overall system accuracy since they are not accounted for by KF. In the 
architecture shown in Figure 7.11, the augmentation of the ANN with the 
KF provides an empirical model for the nonlinear error terms and enhances 
the overall system performance. Should a GPS outage occur, the KF operates 
in the prediction mode predicting the linear part of the error, which is used 
to correct the output of the mechanization algorithm before being fed to the 
ANN module to remove the residual nonlinear error parts and provides the 
overall corrected position/velocity.
This chapter illustrates artificial neural networks as a multisensor data 
integration tool. However, is there any other kind of approximation or sampling 
filter available for integration? This question is answered in Chapter 8.
References
Haykin, S., 
[1]	
Neural Networks—A Comprehensive Foundation, Piscataway, NJ: IEEE Press, 
1994.
Ham, F.M., and Kostanic I., 
[2]	
Principles of Neurocomputing for Science and Engineering, 
New York: McGraw-Hill, 2001.
Tsoukalas, L.H., and Uhrig, R.E., 
[3]	
Fuzzy and Neural Approaches in Engineering, New 
York: Wiley, 1997.
Bishop, C.M., 
[4]	
Neural Networks for Pattern Recognition, U.K.: Oxford University Press, 
1995.
Ross, T.J., 
[5]	
Fuzzy Logic with Engineering Applications, West Sussex, U.K.: Wiley, 2004.
Hui, P., et al., “A Parameter Optimization Method for Radial Basis Function Type Mod­
[6]	
els,” IEEE Transactions on Neural Networks, Vol. 14, No. 2, 2003, pp. 432–438.
Karayiannis, N.B., and Randolph-Gips, M.M., “On the Construction and Training of 
[7]	
Reformulated Radial Basis Function Neural Networks,” IEEE Transactions on Neural 
Networks, Vol. 14, No. 4, 2003, pp. 835–846.
Jang, J.S.R., Sun, C.T., and Mizutani, E., 
[8]	
Neuro-Fuzzy and Soft Computing, a Compu­
tational Approach to Learning and Machine Intelligence, Englewood Cliffs, N.J.: Prentice 
Hall, 1997.

138	
MEMS-Based Integrated Navigation
Jang, J.S.R., “ANFIS: Adaptive Network-Based Fuzzy Inference Systems,” 
[9]	
IEEE Transac­
tions on Systems, Man and Cybernetics, Vol. 23, No. 3, 1993, pp. 665–685.
Loukas, Y.L., “Adaptive Neuro-Fuzzy Inference System: An Instant and Architecture-
[10]	
Free Predictor for Improved QSAR Studies,” J. Med. Chem., Vol. 44, No. 17, 2001, pp. 
2772–2783.
Chiang K.-W., Noureldin, A., and El-Sheimy, N., “Multi-Sensors Integration Using 
[11]	
Neuron Computing for Land Vehicle Navigation,” GPS Solutions, Vol. 6, No. 4, 2003, 
pp. 209–218.
Chiang K.-W., Noureldin, A., and El-Sheimy, N., “A New Weights Updating Method 
[12]	
for Neural Networks Based INS/GPS Integration Architectures,” Measurement Science 
and Technology, IoP, Vol. 15, No. 10, 2004, pp. 2053–2061.
Chiang, K.-W., Noureldin, A., and El-Sheimy, N., “The Utilization of Artificial Neural 
[13]	
Networks for Multi-Sensor System Integration in Navigation and Positioning Instru­
ments,” IEEE Transactions on Instrumentation and Measurement, Vol. 55, No. 5, 2006, 
pp. 1606–1615.
Noureldin, A., Osman, A., and El-Sheimy, N., “A Neuro-Wavelet Method for Multi-
[14]	
Sensor System Integration for Vehicular Navigation,” Measurement Science and Technology, 
IoP, Vol. 15, No. 2, 2004, pp. 404–412.
Sharaf, R., et al., “Online INS/GPS Integration with a Radial Basis Function Neural 
[15]	
Network,” IEEE Aerospace and Electronic Systems, Vol. 20, No. 3, 2005, pp. 8–14.
Sharaf, R., and Noureldin, A., “Sensor Integration for Satellite Based Vehicular Navi­
[16]	
gation Using Neural Networks,” IEEE Transaction on Neural Network, Vol. 18, No. 2, 
2007, pp. 589–594.
Semeniuk, L., and Noureldin, A., “Bridging GPS Outages Using Neural Network Esti­
[17]	
mates of INS Position and Velocity Errors,” Measurement Science and Technology, IoP, 
Vol. 17, No. 9, 2006, pp. 2782–2798.
Sharaf, R., et al., “Merits and Limitations of Using Adaptive Neuro-Fuzzy Inference 
[18]	
System for Real-Time INS/GPS Integration in Vehicular Navigation,” Soft Computing, 
Vol. 11, No. 6, 2007, pp. 588–598.
Noureldin, A., El-Shafie, A., and El-Sheimy, N., “Adaptive Neuro-Fuzzy Module for 
[19]	
INS/GPS Integration Utilizing Position and Velocity Updates with Real-Time Cross 
Validation,” IET Radar, Sonar and Navigation, Vol. 1, No. 5, 2007, pp. 388–396.
Perreault, J., et al., “RISS/GPS Integration Utilizing an Augmented KF/NN Module,” 
[20]	
European Journal of Navigation, Vol. 6, No. 3, 2008, pp. 15–21.
Noureldin, A., et al., “Performance Enhancement of MEMS Based INS/GPS Integration 
[21]	
for Low Cost Navigation Applications,” IEEE Transactions on Vehicular Technology, Vol. 
58, No. 3, 2009, pp. 1077–1096.

139
8
Particle Filters
Particle filters (PF) are capable of handling highly nonlinear models with any 
kind of noise distribution. These filters are based on the sequential Monte Carlo 
principle that represents the required noise or data distribution by a cluster of 
samples called particles. Before going any further, a flowchart of the chapter 
is provided in Figure 8.1.
Introduction
8.1   
The objective of filtering is to estimate the state vector xk, conditioned upon 
all the measurements up to the current time y1:k [1–3]. To best describe the 
random nature of the involved state variables, probability density functions 
(PDFs) are used. The PDFs are constantly changing shape when receiving 
indirect measurements yk. The PDFs will evolve with time and have to be 
updated recursively upon receiving new information. The estimation problem 
involves calculation of the posterior density function p(x0:k Ô yi:k) based on 
Bayes’ theorem [as given in (8.1)] and all currently available data.
	
p x
y
p y
x
p x
p y
k
k
k
k
k
k
0
1
1
0
0
1
:
:
:
:
:
:
|
|
(
)
(
) =
(
)
(
)
	
(8.1)
where p(x0:k) is the prior density function that gives information about the 
state vector (x0:k) without any knowledge of the measurements; p(y1:k Ô x0:k) 
is the likelihood functions of the measurement vector (y1:k) given the states 
x0:k; p(x0:k Ô y1:k) tell us what is known about x0:k when measurements are 
available, and hence is called the posterior density function of x0:k given y1:k. 

140	
MEMS-Based Integrated Navigation
Particle filters
Introduction
Basic particle
filter
Types of particle
filters
Monte Carlo
Importance
sampling
HEPF
Loosely coupled
Tightly coupled
Partial sensor
configurations
Resampling
methods
Figure 8.1  Flowchart for Chapter 8.
The denominator p(y1:k) is the normalization constant and for a discrete dis­
tribution is equal to Σp(y1:k Ô x0:k)p(x0:k). According to the first-order Markov 
assumption, the state vector is conditionally independent of all earlier states 
given the immediately previous state; the prior density function is factorized as
p x
p x
p x
x
k
i
i
i
k
(
)
(
)
(
|
)
:0
0
1
1
=
−
=∏
. If measurements (y1:k) are independent given 
states (x0:k) (i.e., yk does not depend on previous y1:k–1), we get the simplified 
likelihood function as p y
x
p y
x
k
k
i
k
i
k
1
0
0
1
:
:
:
|
|
(
) =
(
)
=∏
. Furthermore, since  mea-

	
Particle Filters	
141
surements are conditionally dependent only on the current state, the likelihood 
function becomes p y
x
p y
x
k
k
i
i
i
k
1
0
1
:
:
|
|
(
) =
(
)
=∏
. The simplified posterior den-
sity function, upon incorporating these changes, is represented by (8.2).
	
p x
y
p x
p y
x p x
x
p y
k
k
i
i
i
k
i
i
0
1
0
1
1
:
:
|
(
)
|
(
|
)
(
) =
(
)
=
−
∏
1:k
(
)
	
(8.2)
Equation (8.2) requires all states to be stored. To sequentially estimate 
p(x0:k Ô y1:k), propagation needs to occur without modifying the past simulated 
states [i.e., a modified (8.2) is needed as provided by (8.3)].
	
p x
y
p x
y
p y
x
p x
x
k
k
k
k
k
k
k
k
(
|
)
(
|
) (
|
) (
|
)
:
:
1
1
1
1
1
=
−
−
−
p y
y
k
k
(
|
)
:1
1
−
	
(8.3)
where p(xk–1 Ô y1:k–1) is the previous posterior density function, p(yk Ô xk) is the 
likelihood function, p(xk Ô xk–1) is the state transition prior probability density 
function, and p(yk Ô y1:k–1) is the normalization constant [1]. The marginal 
density function or the prior distribution p(xk Ô y1:k–1) is given by (8.4) and 
on substituting (8.4) in (8.3), we obtain (8.5).
	
p(xk Ô y1:k–1) = Úp(xk Ô xk–1)p(xk–1 Ô y1:k–1)dxk–1	
(8.4)
	
p x
y
p y
x
p x
y
p y
y
k
k
k
k
k
k
k
k
(
|
)
(
|
) (
|
)
(
|
)
:
:
:
1
1
1
1
1
=
−
−
	
(8.5)
where p(yk Ô y1:k–1) = Úp(yk Ô xk)p(xk Ô y1:k–1)dxk is the normalizing constant.
The variable ˆxk represents the mean of the desired posterior density func­
tion and is given by (8.6).
	
ˆ
(
|
)
:
x
x p x
y
dx
k
k
k
k
k
= ∫
1
	
(8.6)
However, all of the above equations are conceptual problems and cannot 
be evaluated analytically as they involve calculations on infinite integrals [1, 
3–5]. For a general distribution, the integrals cannot exhibit a closed-form solu­
tion and approximations are required, except when models are linear and have 
Gaussian characteristics. In EKF, all the involved distributions are Gaussian 

142	
MEMS-Based Integrated Navigation
and are therefore completely represented by their mean and covariance. The 
mean and covariance of prior distribution p(xk Ô y1:k–1) are ˆxk
− and Pk– (refer 
to Section 6.2.2), while those of previous posterior distribution p(xk–1 Ô y1:k–1) 
are ˆxk −
+
1 and P+
k-1; the posterior distribution p(xk Ô y1:k) is represented by ˆxk
+ and 
P+
k. However, if nonlinearities are severe, the EKF might diverge. To overcome 
the limitations of an EKF, other nonlinear filters are developed [5, 6].
Here suboptimal nonlinear filters are grouped into five main types 
[5, 6]:
Analytical approximations;
• 
Numerical approximations;
• 
Gaussian sum or multiple model filters;
• 
Deterministic sampling filters; and
• 
Monte Carlo sampling filters.
• 
Both the extended Kalman filter (EKF) along with its variations and 
iterated Kalman filters fall under the analytical approximation type of nonlinear 
filters. In this approach, the system and measurement models are linearized 
around a single best chosen point. But these filters suffer from divergence 
problems where the actual errors become inconsistent with the error covari­
ance matrix (Pxx) approximated by the filter. This problem mainly arises when 
considerable levels of nonlinearities exist on the system, thus large linearization 
errors appear. Furthermore, the calculation of the Jacobians of the system and 
measurement models is a time-consuming process.
Grid-based methods [5] fall under the numerical approximation approach 
where solutions are evaluated at carefully selected grid points. The posterior 
density is approximated by a set of point values on a specified grid point. 
However, the grid needs to be dense to get a good approximation of the con­
tinuous state space. Therefore, as the dimensions of the state vector increase 
with time, there is an exponential increase in computational complexity. 
Moreover, state space must be predefined and therefore cannot be partitioned 
unevenly to give a higher resolution in higher-probability regions unless prior 
knowledge is used.
Gaussian filters are the filters that approximate the predictive conditional 
and posterior distributions as Gaussian densities. In these filters only the mean 
and the covariances of the distribution are propagated. Gaussian sum filters 
approximates the required posterior density function by a carefully weighted 
sum of Gaussian density functions. These filters are more accurate, especially 
for multimodal systems, but computationally expensive. Moreover, there is no 

	
Particle Filters	
143
automatic procedure to calculate the weights, mean, and covariances of the 
different Gaussian distributions.
Unscented Kalman filters (UKF) cover the deterministic sampling filters 
approach. A UKF deterministically samples a fixed number of minimal points 
(sigma points), which estimate the true mean and covariance of the Gaussian 
distribution according to the unscented transformation principle. These sigma 
points are then individually propagated through the true nonlinear system 
to accurately capture posterior mean and covariance. Using the unscented 
transformation principle, sigma points along with their respective weights are 
obtained, which satisfy the following conditions.
	
wi
i
p
=
=
−
∑
1
0
1
	
(8.7)
	
w X
x
i
i
i
p
=
=
−
∑
0
1
	
(8.8)
	
w X
x
X
x
P
i
i
i
p
i
T
−
(
)
−
(
)
=
=
−
∑
0
1
	
(8.9)
where wi are the weights of sigma points (xi) and p is the number of sigma 
points. These sigma points have mean x with covariance P. However, when the 
nonlinearity is highly pronounced, even the best-fitting Gaussian distribution 
will be a poor approximation to the posterior distribution.
Particle filters (PFs) use the Monte Carlo sampling approach to obtain 
samples from the distributions. Particle filters are based on the principle of 
importance sampling and Monte Carlo. This algorithm was first used by Gor­
don, Salmond, and Smith in 1993 [11] (to the best of the author’s knowledge) 
for non-Gaussian state models, and was called a Bayesian bootstrap filter. The 
same algorithm was proposed as a Monte Carlo filter along with a smoother 
by Kitagawa in 1996 [27], and as a condensation algorithm by Isard and Blake 
in 1996 [28]. This algorithm was first called particle filter (PF) by Carpenter, 
Clifford, and Fearhead in 1998 [29]. These PFs give an approximate solution 
to an exact model, rather than the optimal solution to an approximate model, 
which is the basis for the Kalman filter [7]. These suboptimal Bayesian filters 
approximate the posterior density function by random samples points called 
particles. Each of these particles has an assigned weight, and the required pos­
terior density function is obtained as the summation of the product of these 
individual particles along with their respective weights [8]. The particle filter is 
based on the principle of importance sampling and Monte Carlo. Section 8.5 

144	
MEMS-Based Integrated Navigation
introduces the basic PF, which is a suboptimal filter used for cases where the 
dynamic models are nonlinear and the noises are non-Gaussian in nature [7, 
8]. Before elaborating on PF principle, we will first explain the Monte Carlo 
principle, and the Importance Sampling method and Resampling methods.
The Monte Carlo Principle
8.2   
The Monte Carlo (MC) principle is a stochastic sampling approach that ana­
lytically approximates intractable numerical integration problems [9, 10]. This 
principle uses a set of independent and identically distributed random samples 
to approximate the true integral representing the required PDF.
The MC principle states that if N independent, random, and equally 
weighted samples are drawn out from the required posterior distribution, then 
the required posterior PDF p(x0:k Ô y1:k) can be approximated by the average 
or a collection of these samples as given in (8.10):
	
p x
y
N
x
x
k
k
k
k
i
i
N
(
|
)
(
)
:
:
:
:
( )
0
1
0
0
1
1
=
−
=∑δ
	
(8.10)
where d represents the Dirac delta function, {x0:k
(i), i = 1, 2…N} is a drawn set 
of large N samples or particles with equal weights {
,
,
}
( )
w
N i
N
i =
⁄
=
1
1 2K
. Now the expectations I(f ) of any function f can be approximated in sum­
mation form as given in (8.11) and (8.12):
	
I f
E f x
f x
p x
y
dx
k
k
k
k
k
( )
[ (
)]
(
) (
|
)
:
:
:
:
:
=
= ∫
0
0
0
1
0 	
(8.11)
	
I f
N
f x k
i
i
N
( )
(
)
:
( )
≈
=∑
1
0
1
	
(8.12)
Importance Sampling Method
8.3   
For the MC method, independent particles are required from the posterior 
density function. However, it is not always possible to draw out independent 
and uniformly distributed samples from the required density function p(x0:k Ô 
y1:k) as it may be multivariate or nonstandard. In these cases, the importance 
sampling method [11] is used. The importance sampling method states that 
if it is difficult to obtain samples directly from a distribution, then samples 
can be generated from the importance density function q(x0:k Ô y1:k), which is 

	
Particle Filters	
145
similar to the desired posterior distribution. But the weights of these gener­
ated samples need to be adjusted to represent the target function as closely as 
possible [1, 4, 12]. Starting from (8.10), and incorporating the importance 
density function into it, we obtain (8.13)–(8.15).
	
I f
f x
p x
y
q x
y
q x
k
k
k
k
k
( )
(
) (
|
)
(
|
). (
:
:
:
:
:
:
= ∫
0
0
1
0
1
0 k
k
k
y
dx
|
)
:
:
1
0 	
(8.13)
	
I f
f x
p y
x
p x
p y
q x
k
k
k
k
k
( )
(
) (
|
) (
)
(
) (
:
:
:
:
:
=
0
1
0
0
1
0
1
0
1
0
:
:
:
:
:
|
). (
|
)
k
k
k
k
k
y
q x
y
dx
∫
	
(8.14)
	
I f
f x
w
p y
q x
y
dx
k
k
k
k
k
k
( )
(
) (
). (
|
).
:
:
:
:
:
= ∫
0
1
0
1
0 	
(8.15)
where unnormalized importance weights are given by w
p y
x
p x
q x
y
k
k
k
k
k
k
=
(
|
). (
)
(
|
)
:
:
:
:
:
1
0
0
0
1
. 
Further, the unknown normalizing constant can be removed by performing 
the following steps.
	
I f
f x
q x
y
w dx
p y
k
k
k
k
k
k
( )
(
). (
|
).
.
(
|
:
:
:
:
:
=
∫
0
0
1
0
1
x
p x
q x
y
q x
y
dx
k
k
k
k
k
k
0
0
0
1
0
1
0
:
:
:
:
:
:
:
). (
). (
|
)
(
|
)
k
∫
	
(8.16)
	
I f
f x
q x
y
w dx
w q x
k
k
k
k
k
k
( )
(
). (
|
).
.
. (
:
:
:
:
= ∫
0
0
1
0
0:
:
:
|
).
k
k
k
y
dx
1
0
∫
	
(8.17)
	
I f
E f x
w
E w
k
k
k
( )
[ (
).
]
[
]
:
=
0
	
(8.18)
By drawing particles from this importance density function, we can 
approximate the expectation I(f ) with the Monte Carlo method [i.e.,( 8.17) 
is approximated by (8.20)].
	
I f
E f x
N
f x
w
N
w
k
k
i
k
i
i
N
( )
[ (
)]
(
).
:
:
( )
( )
=
≈
=∑
0
0
1
1
1
k
i
i
N
( )
=∑
1
	
(8.19)

146	
MEMS-Based Integrated Navigation
	
I
w
f x
k
i
k
i
i
N
=
%( )
:
( )
. (
)
0
1
=∑
	
(8.20)
where %wk
i( ) are the normalized importance weights.
The exact form of the importance sampling distribution is a vital design 
issue since particles generated through this distribution will represent the 
required posterior distribution [14]. Furthermore, the weights of these gener­
ated particles are assigned according to the importance sampling distribution. 
The most popular and easiest option of importance density is the transition 
prior distribution as demonstrated by (8.21) [11].
	
q(xk Ô xk–1, y1:k) = p(xk Ô xk–1)	
(8.21)
	
wk a wk–1p(yk Ô xk)	
(8.22)
The use of the transition prior distribution as the importance sampling 
distribution greatly simplifies the particle weight calculations. The feasibility 
of readily obtaining particles from the transition prior density makes it an 
attractive choice. In this case, the weights depend only on the likelihood func­
tion. Consequently, after a few iterations, most of the samples have negligible 
weights as information coming from the latest measurement is completely 
ignored while drawing out particles. The most common ways to avoid this 
problem are to use a large number of particles or to implement a better proposal 
density function that is as close to the target distribution as possible or to use 
a resampling method [13].
Resampling Methods
8.4   
Resampling eliminates particles with lower weights and multiplies particles 
with higher weights as shown in Figure 8.2. Resampling draws particles from 
the current distribution using the normalized weights as probabilities of selec­
tion. Furthermore, in resampling 
the weighted approximate density 
w
x
x
k
i
k
k
i
i
N
( )
( )
(
)
δ
−
=∑
1
 is converted to the  un-
weighted density function 
(
) (
)
( )
( )
n
N
x
x
k
i
i
N
k
k
i
δ
=∑
−
1
, as given in (8.24), so that most 
of the particles will eventually lie in higher posterior probability regions [30–33].

	
Particle Filters	
147
x
,
( )i
k−1 w
( )i
k 1
−
{
{
N
i =1
x
( )i
k
w
( )i
k
{
{
N
i =1
,
Particles and weights
at
1 epoch
k−
Particles and updated
 weights at k epoch
Resampling step
x
( )i
k{
{
N
i =1
, 1
N
Figure 8.2  Resampling: removing low weight particles.
	
w
x
x
n
N
x
x
k
i
k
k
i
i
N
k
i
i
N
k
k
i
( )
( )
( )
( )
(
)
(
δ
δ
−
⇒
−
=
=
∑
∑
1
1
)
	
(8.23)
	
w
x
x
x
x
k
i
k
k
i
i
N
k
k
j
j
N
( )
( )
*( )
(
)
(
)
δ
δ
−
−
=
=
∑
∑
1
1
= 1
N
	
(8.24)
Here n(i)
k is the number of replicates of particles x(i)
k , which had a higher weight 
before the resampling step, and xk
j
j
N
*( )
{
} =1 is the new set of equally weighted 
particles. The resampling technique requires that the resampled density func­
tion should be close to the original distribution. Hence for any function f (x), 
(8.25) should hold.
	
E
f x p x dx
f x p x dx
N
( )
∫
∫
−
(
)


→

→
( )
( ) ( )
2
0
•
	
(8.25)
There are many different types of resampling methods [30], all of which 
are unbiased but differ in the variance aspect of the new unweighted density 
function being generated. The four main types of resampling techniques are 
discussed in Sections 8.4.1–8.4.4. For additional modified resampling methods 
on the combination of these fundamental four types please refer to [13].

148	
MEMS-Based Integrated Navigation
Simple Random Resampling
8.4.1   
The simple random resampling approach is the simplest approach, where a new 
particle set is generated by drawing N independent particles from the weighted 
old particles. The detailed steps of this method are as follows:
Generate a uniformly distributed random numbers such that 
1.	
ui ~ 
U(0,1).
Construct a cumulative density function of the particle weights and
2.	
	
calculate c
w
k
j
j
k
=
=∑
( )
1
.
In case 
3.	
ui lies between ck–1 and ck, only the particle with index i is 
chosen.
	
ck–1 < ui < ck	
(8.26)
Repeat this process until the total number of obtained particles is 
4.	
N.
Hence we observe that the number of offspring of the particle x(i)
k depends 
on how many times it is selected. Now, the collection of these particles with 
equal weights approximates the posterior density function. The variance of 
the simple random sampling method is equal to the variance of g(x) divided 
by total number of particles [29, 30].
Systematic Resampling (SR)
8.4.2   
The SR algorithm [29] is very similar to the simple random resampling method 
explained in Section 8.4.1. However unlike simple random resampling, where 
each random number ui is independent from the uniform distribution for i = 1, 
…, N, in this case N ordered random numbers are drawn by using (8.27).
	
u
i
u
N
i =
−
+
(
)1
1
	
(8.27)
where ui ~ U[0,1] and N is the total number of resampled particles. In sys­
tematic resampling, the generated particles are dependent on each other and 
therefore correct variance analysis cannot be conducted. However, variance of 
this method [32] is assumed to be less than stratified resampling, as particles 
generated by this method have the least discrepancy since it ensures that each 

	
Particle Filters	
149
sample is selected only once, and hence no two samples are the same in this 
method.
Stratified Resampling
8.4.3   
In stratified resampling [13], the interval (0, 1) is divided into N strata of equal 
size i
N
i
N
−




1,
 for i = 1, …, N and then a single random sample is drawn 
from each of the intervals according to (8.28).
	
u
i
u
N
i
i
=
−
+
(
)1
	
(8.28)
where ui ~ U[0,1].
Here particles are more uniformly distributed than in the simple random 
resampling method. Therefore stratified variance is less than that of the simple 
random resampling method in Section 8.4.1.
Residual Resampling
8.4.4   
Residual resampling [30, 33] is a different approach than the rest of the above 
resampling methods as it sets restrictions instead of sampling methods. This 
method is composed of two steps. In the first step, the number of replications 
of the particles (before the resampling step) is calculated. This can be achieved 
by taking the integer part of Nwi for each particle. However, since the first 
step does not guarantee that the number of resampled particles remains N, 
the residual Nr is computed in the second step. These residual particles are 
randomly selected with replacement from the original particles using any one 
of the previous resampling methods. The residual resampling method’s variance 
is also less than that of the simple random resampling method. At this point, 
we have sufficient background to start our discussion on basic PF.
Basic Particle Filters
8.5   
PFs construct a point mass representation of a state vector by a large number 
of random particles that explore the state space [5, 6]. PFs are based on the 
Sequential Monte Carlo estimation (SMC) method, which is the integration 

150	
MEMS-Based Integrated Navigation
of the Monte Carlo and importance sampling methods [7, 8, 14]. In PF, the 
posterior density function is represented by a collection of weighted particles 
that are generated by the Monte Carlo principle. Unlike an EKF, these particles 
are then individually propagated through the true nonlinear system. Particle 
filters allow for a complete representation of the posterior distribution of the 
states, so that any statistical estimates, such as mean and covariance, can be 
easily computed. These filters are capable of dealing with any nonlinearity in 
the models. Some examples of PF implementation for land vehicles are pro­
vided in [15–17]. Using this large number of particles significantly increases 
the computational load of the filter, and, hence, modified versions of PFs have 
been developed and are covered in Sections 8.6 and 8.7.
Types of Particle Filters
8.6   
One prominent type of particle filter is the extended or unscented particle 
filter.
Extended Particle Filter (EPF) and Unscented Particle Filter (UPF)
8.6.1   
This section presents the methodology and implementation of EPFs to elimi­
nate the shortcomings of the basic PFs. In addition, to validate the developed 
EPF algorithm, its performance is compared to that of the EKF for real field 
test datasets in a variety of scenarios. In basic PFs, the additional knowledge 
coming from the latest measurement is not considered in the importance den­
sity function. This choice of importance distribution simplifies the calculation 
of importance weights. However, problems occur in cases where the likelihood 
is too narrow in comparison to the transition prior density function, and, 
therefore, the particles should be moved to high likelihood regions [12].
Methodology of EPF/UPF
8.6.1.1   
One method of moving particles to a higher likelihood region is to use a better 
importance distribution. This can be accomplished by choosing an importance 
density that is conditioned on the latest measurement. Kalman-based filters, 
like an EKF or UKF, incorporate the latest measurement into the updated 
posterior state [12]. Therefore, if an EKF or UKF is used to generate the 
importance distribution, the latest measurement can be incorporated into the 
distribution. In an EPF or UPF, incorporation of the most current observation 
into the state is realized through the local linearization of the state vector by 
an EKF [1, 4, 12, 21–23]. In the local linearization technique promoted by 

	
Particle Filters	
151
Doucet [1], each particle is drawn from the local Gaussian approximation of 
the optimal importance distribution that is conditioned both on the current 
state and the latest measurement [i.e., (8.29)].
	
q(xk Ô xk–1, yk)EKF/UKF ª qN(xk Ô y1:k)	
(8.29)
where qN denotes the Gaussian approximation of the optimal importance 
density function. This choice of the importance density function can be 
expanded as shown in (8.30), which modifies the importance weights to be 
represented by (8.33).
	
q x
x
y
p y
x
p x
x
p y
k
k
k EKF UKF
k
k
k
k
k
(
|
,
)
(
|
) (
|
)
(
/
−
−
=
1
1
|
)
xk −1
	
(8.30)
	
w
p y
x
p x
x
q x
x
y
k
k
k
k
k
k
k
k EKF UKF
α
(
|
) (
|
)
(
|
,
)
/
−
−
1
1
	
(8.31)
	
w
p y
x
p x
x
p y
x
p x
x
p
k
k
k
k
k
k
k
k
k
α
(
|
) (
|
)
(
|
) (
|
)
(
−
−
1
1
y
x
k
k
|
)
−1
	
(8.32)
	
wk a p(yk Ô xk–1)	
(8.33)
A tractable way of generating the Gaussian approximated importance 
density function in the PF framework is to use a separate EKF/UKF to generate 
and propagate a Gaussian distribution for each particle [12]; that is,
	
for i = 1, …, N
	
q x
x
y
N x
P
k
i
k
i
k EKF UKF
k
i
k
i
(
|
,
)
(
,
)
( )
( )
/
( )
( )
−1
=
	
(8.34)
where x(i)
k and P(i)
k are the mean and variance of the ith particle generated by the 
EKF/UKF algorithm. Once all the particles have been updated by the EKF/
UKF, particles are redrawn from this generated importance distribution. These 
particles are now conditioned on all the states and measurements available 
until the current time epoch. In our particular application of a land vehicle 
navigation system, the UKF and EKF gave a similar performance [25]. It was 
further observed that the processing time involved in the UKF was much larger 

152	
MEMS-Based Integrated Navigation
than that of the EKF, and hence we only show the implementation of the EPF 
and not that of the UPF.
The flowchart for the EPF algorithm is shown in Figure 8.3, which shows 
three main steps (i.e., importance sampling, updating weights of the particles, 
and the resampling step). The modified state vector, which is very similar to 
the EKF state vector, is given in Figure 8.4 for both loosely and tightly coupled 
approaches. A loosely coupled state vector consists of position errors, velocity 
errors, attitude errors, and bias and scale factor errors for both accelerometers 
and gysoscopes. For a tightly coupled state vector, all these error states along 
with the clock bias and clock drift errors are included.
Importance sampling
Generate particles
Propagate thorough state
transition density function
Update particles
Sample particles
Evaluate weights
sampling
Resample
Updated posterior density
EPF
x ( )i
k−1 w( )i
k 1
−
,
∼
|
(
)
q x
y
k 1
−
1:
1
k−
i
(
)
q x x    , y
|
k
k−1
k
x
= Φ
( )i −
k
^
x
( )i
k 1
−
{
{
N
i =1
k 1
−
P
= Φ
( )i −
k
P
Q
Φ
+
( )i +
k 1
−
k 1
−
T
k 1
−
k 1
−
K
P
=
( )i −
k
H
H   P    H
R
(
)
+
( )i T
k
k
k
( )i
k
( )i −
( )i T
k
k
−1
x
=
( )i +
qk
^
x^
x
K
+
( )i −
k
^
k (
(      ))
y
H
−
k
( )i −
k
( )i +
k
P
=    −
I
K  H
P
(
)
k
( )i
k
( )i −
k
x
( )i
k
{
{
x
( )i +
qk
^
=
( )i +
k
P
+
i
kr.
w α
i
k
i
k
p y x
p x x
(
) (
)
|
|i
k
i
k−1
k
i
k−1
q x x    y
(
)
|
k
k
i
x
i
k
w
i
k
{
{
N
i =1
{
{
N
i =1,
If
1
N
=
eff
Σ
N
i=1
(
)
w
i
k
2
N
=
th
2N
3
≤
Figure 8.3  Flowchart of an extended particle filter.

	
Particle Filters	
153
Loosely 
Coupled
Tightly 
Coupled
( )
( )
( )
( )
( )
( )
( )
  
  
  
i
i
k
k
i
i
k
ak
i
i
gk
ak
i
gk
r
v
b
b
s
s
δ
δ
δε
δ
δ
δ
δ
( )
( )
  
i
i
ck
ck
b
d
δ
δ
Figure 8.4  Loosely coupled versus tightly coupled.
The basic difference in the EPF state vector as compared to the EKF 
state vector is that instead of a single value for each state variable, a cluster of 
particles is used. Like the EKF, the EPF state vector models sensor noises along 
with sensor errors to compensate for the effect of noises, biases, and scale factor 
errors on the INS measurements.
Any other land vehicle constraints can be implemented in the EPF simi­
lar to the EKF except for the fact that a cluster of states will be used instead 
of a single state. For example, an NHC can be incorporated as follows for N 
particles.
	
v
v
y
b
y
b i
= {
} ≈
( )
0 	
(8.35)
	
v
v
z
b
z
b i
= {
} ≈
( )
0 	
(8.36)
where i = 1, …, N are the individual particles of each state variable in EPF. A 
comparison of EPF results with EKF is provided in subsection 8.6.1.2.
An Example of EPF Results for a Land Vehicle
8.6.1.2   
The EPF performance is shown in this example for a field dataset. The dataset 
was collected in August 2004 using a CIU. In addition to the CIU, the test 
vehicle also carried NovAtel OEM4 GPS receivers and a tactical grade inertial 
unit for the reference trajectory.
Trajectory 1 is provided in Figure 8.5 and its velocity profile is shown 
in Figure 8.6. Figure 8.6 also shows the periods when the vehicle stopped and 
the location of simulated GPS signal outages. The performance of the EPF 
will be evaluated during the signal outages when the EPF is running only in 
the prediction mode and its output will be compared to the most commonly 
used EKF for the same conditions. For trajectory 1, six simulated GPS outages 
of 60 seconds exist both at the high and no dynamic portions of the trajectory 
(see Figure 8.6).

154	
MEMS-Based Integrated Navigation
Figure 8.5  Field test trajectory 1 of CIU.
−25
0.95
1
1.05
1.1
1.15
v (m/s)
n
× 10
4
−20
−15
−10
−5
0
5
10
15
20
GPS time–
,
420 000 (sec)
North
East
Down
GPS gaps
ZUPTs
Figure 8.6  CIU trajectory 1 velocity profile.
A high dynamic region occurs at either turns or where vehicle velocities 
are substantial. No dynamic region refers to the periods of trajectory when the 
vehicle is stationary or when ZUPTs are encountered. GPS signal outages 1, 4, 
and 6 lie at high dynamic regions, while the rest of the outages lay in partial 
high and partial no dynamic areas. After the explanation of the trajectory, 
let us move ahead and discuss the format for the analysis. The comparison is 

	
Particle Filters	
155
made when the navigation is purely MEMS inertial sensors based. For that, 
no aiding was provided by simulating the GPS signal outages as mentioned 
earlier. The maximum 3D position errors were computed based on the refer­
ence trajectory values during those periods. The 3D errors are referred to as 
square root of the sum of squares of x, y, and z position errors, and provided 
for both the EKF and EPF in Figure 8.7.
In this Figure 8.7, the x-axis shows the six outages along with the mean 
drift error. From this figure, we can clearly observe that there is a 28% improve­
ment in the EPF performance as compared to the EKF. The main reason for 
this improvement is better performance during higher dynamic regions, such 
as sharp 90° turns and the freedom to use any suitable distribution instead of 
Gaussian distribution. In all of these results, gamma distribution is being used 
for the prior density function to give more weights to the current likelihood 
function. Figure 8.8 illustrates the results obtained when posterior distribution 
is Gaussian and non-Gaussian for the EPF case. This figure also shows that a 
similar result as that of the EKF is obtained if the posterior distribution (in 
case of an EPF) is Gaussian.
In this particular example, there are five 60-sec GPS outages and the 
performance of each filter is evaluated during this time. Hence the main 
advantage of an EPF (in this implementation) lies in the freedom of the particle 
filter to use any kind of distribution; the distribution choice is not limited to 
a Gaussian distribution.
Other types of particle filters are briefly given in Sections 8.6.2–8.6.5.
0
50
Drift errors (m)
100
150
200
250
300
EKF
EPF
141
109
1
2
3
4
5
6
M
1
2
3
4
5
6
M
Figure 8.7  CIU field tests results for trajectory 1.

156	
MEMS-Based Integrated Navigation
85
79
86
0
1 2 3 4 5 M
EPF (Gaussian)
EPF (Non-Gaussian)
EKF
Drift errors (m)
20
40
60
80
100
120
140
160
1 2 3 4 5 M
1 2 3 4 5 M
Figure 8.8  EPF performance with Gaussian and non-Gaussian distributions.
Rao-Blackwellized Particle Filter (RBPF)
8.6.2   
Basic particle filters require a large number of particles to accurately approxi­
mate the posterior density function. One way of reducing this computational 
cost is to divide the state vector into two components, such that only a small 
part of the state vector is sampled by the PF. In a Rao-Blackwellized particle 
filter, the state vector xk is divided into two components, namely the linear 
part xkl and nonlinear part xknl [26].
 
p x
y
p x
x
y
p x
y
k
k
k
nl
k
l
k
k
l
(
,
)
(
,
|
)
(
|
:
:
:
:
:
:
0
1
0
0
1
0
=
=
1
0
0
1
:
:
:
:
,
) (
|
)
k
k
nl
k
nl
k
x
p x
y
	 (8.37)
	
p x
y
p x
y
x
p x
y
k
k
k
l
k
k
nl
k
nl
(
,
)
(
|
,
) (
|
:
:
:
:
:
:
0
1
0
1
0
0
=
1: )
k 	
(8.38)
On applying the Bayes theorem, the linear part is marginalized out such 
that the linear part p x
y
x
k
l
k
k
nl
(
|
,
)
:
:
:
0
1
0
 is exactly evaluated by the KF while for 
the nonlinear part p x
y
k
nl
k
(
|
)
:
:
0
1
, the PF is implemented. Hence this marginal­
ized posterior distribution will require a smaller number of particles and will 
have a smaller variance [7, 8, 18, 20]. However the marginalized system will 
no longer be Markovian.
Likelihood Particle Filter (LPF)
8.6.3   
In an SIS/R PF, the transition density is taken as the proposal density func­
tion. In cases where the likelihood is too narrow or peaked, very few particles 

	
Particle Filters	
157
will lie in a high-likelihood region. Therefore most of the particles will have 
a negligible weight, which gives an inaccurate posterior density estimate. A 
possible way to reduce this effect is to design a better proposal density func­
tion. One of the ways is to draw out particles from the likelihood function and 
then weigh the particles according to the transition density function [6]. The 
particle filter where the likelihood function is used as the importance density 
function is called the likelihood particle filter (LPF).
Regularized Particle Filter (RPF)
8.6.4   
The regularized particle filter was developed to remove the additional problem 
caused by resampling in the SIR filter (i.e., particle impoverishment or reduc­
tion in particle diversity). A regularized particle filter is identical to the SIR 
filter except in the resampling stage. An RPF resamples from a continuous 
approximation of the posterior density instead of a discrete approximation, 
so that the particles do not collapse to a single sample in cases where model 
noises are much less [8, 18–20]. In an RPF, additional noise terms are added 
in the form of the optimized kernels applied on each particle. RPF samples 
are drawn from the approximation:
	
p x
y
w K
x
x
k
k
k
i
h
i
N
k
k
i
(
|
)
(
)
:1
1
≈
−
=∑
	
(8.39)
where K
x
h K x
h
h
nx
( )
(
)
= 1
 is the rescaled kernel density K(.), h is the 
kernel bandwidth, and nx is the dimension of the state vector x with normalized 
weights wki. Kernel density is a symmetric probability density function with 
properties 
K x dx
( )
−∫
=
•
•
1 and K(–x) = K(x) for all x. The main advantage over 
an SIR filter is that RPF performance is better in cases where severe sample 
impoverishment occurs due to less process noise. However, these samples no 
longer asymptotically approximate samples of the posterior distribution.
Gaussian Particle Filter (GPF) and Gaussian Sum Particle 
8.6.5   
Filter (GSPF)
Gaussian filters (GFs) approximate the predictive conditional distribution 
and posterior distribution as Gaussian densities [33], while Gaussian sum 
filters (GSFs) approximate the posterior distribution as a Gaussian mixture. 
However, their performance degrades when significant nonlinearities exist in 

158	
MEMS-Based Integrated Navigation
the system. To overcome these problems, new filters called Gaussian particle 
filters [(GPF)—based on the GFs principle] and Gaussian sum particle filters 
[(GSPF)—based on the GSFs principle] were suggested [33, 34].
In a GPF, the posterior mean and covariance of the state vector is 
approximated using the importance sampling method. Assume the previous 
posterior density function p(xk–1 Ô y1:k–1) is approximated by a Gaussian dis­
tribution N(xk–1; xk–1; Pk–1), where xk–1 is the mean and Pk–1 is the covariance 
of the Gaussian distribution. Samples x(i)
k–1 are drawn from this distribution 
and are passed through the system model to obtain the predicted samples x(i)
k. 
Hence the prior density is also a Gaussian distribution with mean  x
w
x
k
k
i
i
N
k
i
=
−
=∑
1
1
( )
( ) 
and covariance  P
w
x
x
x
x
k
k
i
i
N
k
i
k
k
i
k
T
=
−
−
−
=∑
1
1
( )
( )
( )
(
)(
) . On receiving a new yk  mea- 
surement, the weights of these sampled particles are updated. If the select­
ed importance density function is equal to the prior density, weights are 
proportional to the likelihood function only. Now the collection of par­
ticles along with their weights approximates the posterior density function. 
No resampling step is implemented in this type of filter as the posterior 
distribution is approximated by the mean and covariance like in an EKF. 
The removal of the resampling step reduces the computational cost and 
allows the parallel processing of the algorithm. The Gaussian sum particle 
filter (GSPF) is very similar to the GPF [33, 34]. The only difference is that 
instead of approximating the predictive and filtering distribution (posterior 
distribution) by a Gaussian distribution, it is approximated by a mixture 
of Gaussian distributions. This technique is very useful in cases where the 
posterior distribution is multimodal. However, it is not always easy to accu­
rately obtain a mixture of Gaussian distributions with reasonable weights.
A hybrid extended particle filter is a novel filter proposed by us. This 
filter combines the advantage of a Kalman filter for the linear portion of the 
trajectory with that of an EPF for the nonlinear portion of the trajectory. This 
filter provides an accurate navigation solution along with a higher processing 
speed than any other form of particle filter. Unlike an RBPF, it doesn’t divide 
the state vector into two portions but alternates between a KF and EPF depend­
ing on vehicle dynamics.
Hybrid Extended Particle Filter (HEPF)
8.7   
An EPF gives a better performance in cases where GPS signal outages occur 
at high dynamic areas as exemplified in the previous section. During ZUPTs, 

	
Particle Filters	
159
the vehicle is in a stationary condition (i.e., there is no motion and therefore 
there is no nonlinearity in the position estimation). Equations (8.40)–(8.42) are 
the components of mechanization equations that are nonlinear during vehicle 
motion. However, when the vehicle is stationary all the velocity components 
should ideally be 0 and (8.40)–(8.42) reduce to (8.43)–(8.45), which are no 
longer nonlinear in nature.
	
ϕ
ϕ
(
)
( )
[
(
)
( )]
t
t
V
t
V
t
R
h
t
k
k
n
k
n
k
+
+
=
+
+
+
1
1
1
2
∆	
(8.40)
	
λ
λ
ϕ
(
)
( )
[
(
)
( )]
(
)cos
t
t
V
t
V
t
R
h
k
k
e
k
e
k
+
+
=
+
+
+
1
1
1
2
∆t 	
(8.41)
	
h t
h t
V
t
V
t
t
k
k
d
k
d
k
(
)
( )
[
(
)
( )]
+
+
=
+
+
1
1
1
2
∆	
(8.42)
	
j(tk+1) = j(tk)	
(8.43)
	
l(tk+1) = l(tk)	
(8.44)
	
h(tk+1) = h(tk)	
(8.45)
Under these constant conditions, an EKF is the preferred option in com­
parison to an EPF. Based on this principle, and to overcome the computational 
load limitation of an EPF, a hybrid extended particle filter is proposed [24].
An adaptive subroutine is developed based on the zero velocity periods to 
switch between an EPF and EKF depending on the vehicle dynamic. In cases 
where the dynamic is high, an EPF is implemented while in cases where it is 
less (i.e., a zero velocity condition exists), an EKF is incorporated. In this novel 
filter structure, an algorithm has been realized to detect ZUPTs conditions 
depending on the raw accelerometer signals. The first step for implementing 
an HEPF is to detect ZUPTs as discussed in Section 8.7.1.
Zero Velocity Condition Detection Algorithm
8.7.1   
As mentioned earlier, ZUPTs occur when the land vehicle is stationary and 
represents no dynamic region in the vehicle trajectory. The velocity errors at 
this time are due to short-term random disturbances, which can be reduced 
by averaging the measurements. When the vehicle stops, corrections are made 
to all error states modeled in the filter that compensates or reduces the errors. 

160	
MEMS-Based Integrated Navigation
One method that can be used to detect the ZUPTs using raw inertial signals 
is explained in Section 8.7.1.1.
ZUPTs Detection Code
8.7.1.1   
If all the velocities in the three directions are less than 0.5 m/s during 
1.	
the first 150 accelerometers data records, the standard deviation of 
the raw accelerometer signal values within these data records becomes 
the threshold. In case velocities are not less than 0.5 m/s, the designed 
algorithm looks for data where the condition is met. The value 0.5 
m/s has been selected on examining various field datasets and is 
accurate enough to distinguish the static portion from the dynamic 
portion. Too large a value can misjudge the dynamic portion as a 
static portion, while too small a value can misinterpret static to be a 
dynamic region. Henceforth, this value is an essential tuning com­
ponent for a reasonable ZUPTs detection technique.
Next, a sliding window of a range of 7–25 seconds is chosen, and 
2.	
the standard deviations of the raw accelerometer signals within this 
window are compared to the threshold value. This window size is 
another important tuning parameter. This algorithm has been able 
to accurately detect ZUPTs with a sliding window size as small as 7 
sec. It is not always beneficial to frequently switch filters since few 
epochs are required by the newly generated particles to converge 
to the ideal solution. Generally, a window size of 10–15 seconds is 
considered optimal.
Once the threshold value is obtained, the standard deviation of the 
3.	
raw accelerometer signals within the selected window is compared 
with this threshold. If these accelerometer values are less than the 
threshold value, then ZUPTs has been detected.
	
std(acc) <= accThres,      ZUPT detected	
(8.46)
where accThres is the threshold standard deviation obtained from step 1.
Let us now look at the complete algorithm for the implementation of a 
hybrid extended particle filter.
Algorithm of the Hybrid Extended Particle Filter
8.7.2   
An HEPF combines the advantages of both an EKF and EPF by alternating 
between them based on the vehicle dynamic identified by ZUPTs to increase 
the processing speed and accuracy of the navigation solution.

	
Particle Filters	
161
Pseudocode for HEPF
8.7.2.1   
Set initial epoch generate 
1.	
N samples {
}
xi
i
N
0
1
=  from the prior distribu­
tion p(x0).
Calculate the threshold required to detect ZUPTs. Select a timing 
2.	
window and based on Section 8.7.2, identify ZUPTs.
If ZUPTs is detected, implement EKF; otherwise, continue imple­
3.	
menting an EPF.
EPF Implementation
Importance sampling step:
1.	
 Sample particles from the previous impor­
tance density function [i.e., {
,
}
(
|
)
( )
( )
:
x
w
q x
y
k
i
k
i
i
N
k
k
−
−
=
−
−
→
1
1
1
1
1
1 . This 
is executed by the following steps.
For i = 1,…, N
Calculate the Jacobians 
• 
Φk–1(i) and Hk(i) of the process and mea­
surement models.
Propagate the particles through the state transition density func­
• 
tion and estimate the covariance of the particles.
Update the particles along with their weights.
• 
Sample 
2.	
N particles from the updated importance distribution.
For 
3.	
i = 1,…, N, evaluate the importance weights of each particle.
For each particle 
4.	
i = 1,…, N, normalize the weights.
Compute the effective weights and threshold.
5.	
If 
6.	
Neff > Nth, particles do not change, or else higher weight particles 
are repeated (i.e., the resampling step is performed).
EKF Implementation
Calculate the mean vector of dimension 21 
1.	
¥ 1 and its covariance 
matrix.
Calculate the Jacobians of the process and measurement models.
2.	
Propagate the mean value through the state transition density func­
3.	
tion and estimate its covariance.
Update the mean state vector along with its covariance.
4.	

162	
MEMS-Based Integrated Navigation
Check for ZUPTs; if detected repeat EKF implementation, other­
5.	
wise, generate particles for the EPF and implement the EPF portion 
of the algorithm.
A simplified version of the HEPF algorithm is provided in Figure 8.9.
HEPF Results
8.7.3   
An HEPF can be implemented using either loosely or tightly coupled inte­
gration strategies. Sections 8.7.3.1–8.7.3.2 are examples used to show the 
effectiveness of HEPF for both loosely coupled integration schemes.
An Example of HEPF with Loosely Coupled Integration
8.7.3.1   
This example will provide the results of two different MEMS-grade IMUs, 
which are the CIU and the Motion Pak II units with gyro drifts of 1°/sec 
and 0.5°/sec, respectively. Both datasets were collected in Calgary, Canada, 
and included a GPS receiver and a tactical-grade inertial system onboard the 
Initial N particles
with equal weights
Updated posterior density
Implement EPF
Implement EKF
ZUPTs
occur
N
Y
Figure 8.9  Algorithm of a hybrid extended particle filter.

	
Particle Filters	
163
test vehicle for reference in addition to the test MEMS IMUs. The velocity 
profile for CIU trajectory 1 is shown in Figure 8.6 while the velocity profile 
for Motion Pak II is illustrated in Figure 8.10. For all trajectories, short peri­
ods of GPS outages are carefully selected to cover different vehicle dynamics. 
Figure 8.10 illustrates that outage 1 lies in a partial no dynamic and partial 
high dynamic region while the rest of the outages are in the higher dynamic 
regions of the trajectory.
The loosely coupled integration results using an EKF and an HEPF are 
provided below in Figure 8.11 for CIU. The results are for GPS signal outage 
periods to estimate the usability of the two filters. However, both ZUPTs and 
nonholonomic constraints are applied as these two constraints are going to be 
part of most land vehicle trajectories.
We can clearly see an improvement of 34.3% in the HEPF results as 
compared to that of the EKF. The next example is provided to compare the 
advantages of an HEPF for shorter GPS signal outage periods. For this proof, 
we simulated 30-sec outages, ran the two filters, and compared the results in 
Figure 8.12.
5,000
v (m/s)
n
−20
−15
−10
−5
0
5
10
15
20
GPS time–
,
420 000 (sec)
North
East
Down
GPS gaps
ZUPTs
3,000
3,500
4,000
4,500
25
Figure 8.10  Motion Pak II trajectory 1 velocity profile.

164	
MEMS-Based Integrated Navigation
0
20
Drift errors (m)
100
180
1
2
3
4
5
6
M
1
2
3
4
5
6
M
EKF
HEPF
61
45
160
140
120
80
60
40
Figure 8.11  EKF and HEPF results for CIU 60-sec outages.
0
5
Drift errors (m)
25
1
2
3
4
5
M
1
2
3
4
5
M
EKF
HEPF
15.4
12.7
40
35
30
20
15
10
Figure 8.12  EKF and HEPF results for CIU 30-sec outages.
We can clearly see that the improvement is reduced to 23.3% from 34.3% 
when the duration of outages is reduced to 30 sec instead of 60 sec. Therefore, 
it can be deduced that the longer the outages are, the better the performance 

	
Particle Filters	
165
of an HEPF. The example provided below shows the comparison among dif­
ferent filters for MotionPak II, which is of significantly better quality than the 
CIU (Figure 8.13).
All of the above results are for a loosely coupled integration scheme that 
requires at least 4 GPS satellites to produce position and velocity information. 
However, in urban areas this is generally not feasible because of the lack of a 
direct line of sight to four or more satellites. For these cases, a tightly coupled 
integration scheme is very useful. In Section 8.7.3.2 we show the results 
obtained for a tightly coupled integration scheme.
An Example of HEPF with Tightly Coupled Integration
8.7.3.2   
To compare the performance of different filters, 60-sec periods with less than 
4 satellites were simulated. The IMU position errors during these periods are 
obtained by comparing the corresponding solution to the reference trajectory 
as described earlier. For the trajectory provided in Figure 8.14, four 60-sec GPS 
signal degradation periods were simulated. The first 2 periods mimic the situ­
ation when there is no direct line of sight to the GPS satellites (i.e., 0 satellites 
available). The third degradation period had signals from 3 satellites while the 
last degradation period shows the situation where the GPS receiver has a direct 
line of sight to only 1 satellite. Figure 8.15 provides the comparison for an EKF 
and HEPF when tightly coupled integration strategies were implemented.
0
Drift errors (m)
100
1
2
3
4
M
1
2
3
4
M
EKF
HEPF
83
95
79
160
140
120
80
60
20
1
2
3
4
M
EPF
40
Figure 8.13  EKF, EPF, and HEPF results for Motion Pak II.

166	
MEMS-Based Integrated Navigation
Figure 8.14  Tightly coupled integration CIU trajectory for different GPS satellite 
availability.
0
Drift errors (m)
80
1
2
3
4
M
1
2
3
4
M
EKF
HEPF
44
30
140
120
100
60
20
40
Figure 8.15  CIU results for tightly coupled integration.

	
Particle Filters	
167
From Figure 8.15 we can clearly see that an HEPF gives a 44.8% better 
performance than that of an EKF in the tightly coupled integration scheme. 
This is mainly due to degradation period 1, which lies in a high dynamic region. 
Moreover, we also conclude that the performance of CIU is much better when 
INS and GPS datasets are integrated by a tightly coupled scheme rather than 
a loosely coupled scheme.
Now let’s investigate the performance of particle filters for partial sensor 
configurations as discussed in Chapter 4.
Partial Sensor Configuration
8.7.4   
For a land vehicle, a reduced number of applicable sensors are rather than 
the necessary 3 gyroscopes and 3 accelerometers, as vehicle motion is mainly 
constrained to two dimensions.
An Example of Partial Sensor Configuration
8.7.4.1   
The results for loosely coupled partial sensor configurations are divided into 
three main subcategories. The first portion presents the position drift errors for 
an EPF and an HEPF with a 1G3A configuration, while the second part shows 
the results with a 1G2A sensor configuration (Figure 8.16). The last section 
demonstrates the results for full IMU configuration. 1G3A results indicate a 
12.85% improvement over an EPF.
The improvement was even better when a 1G2A sensor configuration 
was used. The HEPF performed 23% better than the EPF when the vertical 
0
Drift errors (m)
100
200
1
2
3
4
5 M
1
2
3 4
5
M
EPF
HEPF
79
70
150
50
Figure 8.16  EPF and HEPF results for 1G3A configuration.

168	
MEMS-Based Integrated Navigation
accelerometer was replaced by an ideal signal of –9.81 m/s2 as illustrated in 
Figure 8.17.
The result of using full sensors is given in Figure 8.18, which shows an 
average accuracy improvement of 18.7% over the EPF. It is also important to 
note that results for full IMU are significantly better than any partial IMU.
0
20
Drift errors (m)
100
180
1
2
3
4
5
M
1
2
3
4
5
M
EPF
HEPF
69
56
160
140
120
80
60
40
Figure 8.17  EPF and HEPF results for 1G2A configuration.
0
Drift errors (m)
15
30
1
2
3
4
5
M
1
2
3
4
5
M
EPF
HEPF
19
16
20
25
10
5
Figure 8.18  EPF and HEPF results for full IMU configuration.

	
Particle Filters	
169
In the end we establish that particle filters, namely, the EPF and HEPF 
filters, give a much better performance than an EKF, especially when the GPS 
outages are at high dynamic regions (i.e., sharp turns, and so forth). We have 
seen an improvement up to 44% for the HEPF in comparison to the EKF for 
a tightly coupled integration scheme. Furthermore, it is established that for 
a land vehicle, a partial sensor configuration of 1G2A is most economical to 
use and gives a reasonable navigation solution.
This completes our efforts for conveying sufficient knowledge to imple­
ment integrated navigation system based on low-cost MEMS sensors.
References
Doucet, A., “On Sequential Simulation-Based Methods for Bayesian Filtering,” Tech. 
[1]	
Rep. CUED/F-INFENG/TR.310, Department of Engineering, University of Cam­
bridge, 1998.
Murphy, K., “Dynamic Bayesian Networks: Representation, Inference and Learning,” 
[2]	
Ph.D. thesis, U.C. Berkeley, 2002.
Punskaya, E., “Sequential Monte Carlo Methods for Digital Communication,” Ph.D. 
[3]	
thesis, University of Cambridge, 2003.
Doucet, A., Freitas, N., and Gordon, N., 
[4]	
Sequential Monte Carlo Methods in Practice, 
New York: Springer Verlag, 2001.
Maksell, S., and Gordon, N., “A Tutorial on Particle Filters for On-Line Nonlinear/
[5]	
Non-Gaussian Bayesian Tracking,” IEE Target Tracking: Algorithms and Applications, 
Vol. 2, 2001, pp. 1–15.
Arulampalan, S., et al., “A Tutorial of Particle Filters for Online Nonlinear/Non-Gaussian 
[6]	
Bayesian Tracking,” IEEE Transactions on Signal Processing, Vol. 50, No. 2, 2002, pp. 
174–188.
Nordlund, P.J., “Sequential Monte Carlo Filters and Integrated Navigation,” thesis no. 
[7]	
945, Linköping Univ., Linköping, Sweden, 2002.
Ristic, B., Arulampalan, S., and Gordon, N., 
[8]	
Beyond the Kalman Filter: Particle Filters 
for Tracking Applications, Norwood, MA: Artech House, 2004.
Handschin, J.E., “Monte Carlo Techniques for Prediction and Filtering of Non-Linear 
[9]	
Stochastic Processes,” Automatica, Vol. 6, 1970, pp. 555–563.
Zaritskii, V.S., Svetnik, V.B., and Shimelevich, L.I., “Monte Carlo Technique in Problems 
[10]	
of Optimal Data Processing,” Autom. Remote Control, Vol. 12, 1975, pp. 95–103.
Gordon, N., Salmond, D.J., and Smith, A.F.M., “Novel Approach to Nonlinear/Non-
[11]	
Gaussian Bayesian State Estimation,” Proc. Radar and Signal Processing, Vol. 140, 1993, 
pp. 107–113.

170	
MEMS-Based Integrated Navigation
Doucet, A., Godsill, S.J., and Andrieu, C., “On Sequential Simulation-Based Methods 
[12]	
for Bayesian Filtering,” Statistics and Computing, Vol. 10, No. 3, 2000, pp. 197–208.
Hol, J.D., “Resampling in Particle Filters,” Ph.D. thesis, Linköping University, Linkop­
[13]	
ing: Sweden, 2004.
Alspach, D.L., and Sorenson, H.W., “Nonlinear Bayesian Estimation Using Gaussian 
[14]	
Sum Approximations,” IEEE Transactions on Automatic Control, Vol. AC-17, 1972, pp. 
439–448.
Giremus, A., Tourneret, J.Y., and Djuric, P.M., “An Improved Regularised Particle Filter 
[15]	
for GPS/INS Integration,” The Sixth IEEE International Workshop on Signal Processing 
Advances in Wireless Communications (SPAWC), New York, 2005, pp. 1013–1017.
Yi, Y., and Grejner-Brzezinska, D.A., “Tightly-Coupled GPS/INS Integration Using 
[16]	
Unscented Kalman Filter and Particle Filter,” Proceedings of the Institute of Navigation—
19th International Technical Meeting of the Satellite Division (ION GNSS 2006), Vol. 4, 
Fort Worth, TX, 2006, pp. 2182–2191.
Georgy, J., Iqbal, U., and Bayoumi, M., “Reduced Inertial Sensor System (RISS)/GPS 
[17]	
Integration Using Particle Filtering for Land Vehicles,” Proceedings of the 21st Interna­
tional Technical Meeting of the Satellite Division of the Institute of Navigation (ION GNSS 
2008), Savannah, GA, 2008.
Chen, Z., “Bayesian Filtering: From Kalman Filters to Particle Filters and Beyond,” 
[18]	
technical report, Adaptive Systems Lab., McMaster University, Hamilton, ON, Canada, 
2003.
Kong, A., Liu, J.S., and Wong, W.H., “Sequential Imputations and Bayesian Missing 
[19]	
Data Problems,” J. Amer. Statist. Assoc., Vol. 89, 1994, pp. 278–288.
Smith, A., et al., 
[20]	
Sequential Monte Carlo Methods in Practice, First Edition, New York: 
Springer Verlag, 2001.
Aggarwal, P., Gu, D., and El-Sheimy, N., “Extended Particle Filter (EPF) for Land Vehicle 
[21]	
Navigation Applications,” International Global Navigation Satellite Systems (IGNSS 2007), 
Sydney, Australia, 2007.
Aggarwal, P., and El-Sheimy, N., “Extended Particle Filter (EPF) for Land and Airborne 
[22]	
Applications,” submitted to Measurement Science and Technology, 2008.
Merwe, R., et al., “The Unscented Particle Filter,” 
[23]	
Neural Information Processing Systems, 
Vol. 13, 2000.
Aggarwal, P., Syed, Z.F., and El-Sheimy, N., “Hybrid Extended Particle Filter (HEPF) 
[24]	
for INS/GPS Integrated System,” accepted for publication in Measurement Science and 
Technology, 2008.
Shin, E.-H., “Estimation Techniques for Low-Cost Inertial Navigation,” Ph.D. thesis, 
[25]	
Department of Geomatics Engineering, University of Calgary, UCGE Report No. 
20219, 2005.

	
Particle Filters	
171
Doucet, A., et al., “Rao-Blackwellised Particle Filtering for Dynamic Bayesian Networks,” 
[26]	
Proc. UAI2000, 2000, pp. 176–183.
Kitagawa, G., “Monte Carlo Filter and Smoother for Non-Gaussian Nonlinear State Space 
[27]	
Models,” Journal of Computational and Graphical Statistics, Vol. 5, 1996, pp. 1–25.
Isard, M., and Blake, A., “CONDENSATION Conditional Density Propagation for 
[28]	
Visual Tracking,” International Journal of Computer Vision, Vol. 29, 1998, pp. 5–28.
Carpenter, J., Clifford, P., and Fearnhead, P., “Improved Particle Filter for Nonlinear 
[29]	
Problems,” IEE Proceedings on Radar and Sonar Navigation, Vol. 146, 1998, pp. 2–7.
Liu, J.S., and Chen, R., “Blind Deconvolution via Sequential Imputations,” 
[30]	
J. Amer. 
Statist. Assoc., Vol. 90, 1995, pp. 567–576.
Liu, J.S., Chen, R., and Wong, W.H., “Rejection Control and Sequential Importance 
[31]	
Sampling,” J. Amer. Statist. Assoc., Vol. 93, 1998, pp. 1022–1031.
Bolic, M., Djuric, P.M., and Hong, S., “New Resampling Algorithms for Particle Filters,” 
[32]	
Proc. ICASSP, Vol. 2, 2003, pp. 589–592.
Kotecha, J.H., and Djuric, P.M., “Gaussian Sum Particle Filtering,” 
[33]	
IEEE Transactions 
on Signal Processing, Vol. 51, 2003, pp. 2602–2612.
Kotecha, J.H., and Djuric, P.M., “Gaussian Sum Particle Filtering for Dynamic State Space 
[34]	
Models,” Proc. IEEE Int. Conf. Acoust. Speech, Signal Process, 2001, pp. 3465–3468.


173
Appendix
Linearization Process for the EKF for 
Low-Cost Navigation
The focus of this book is to provide examples of MEMS-based inertial sensors 
for navigation of a land vehicle. This appendix gives the specific equations for 
GPS/MEMS INS integration for EKF implementation.
System Model for Loosely Coupled Approach
A.1   
The state vector dx for an ENU frame are given below.
δ
δϕ
δλ
δ
δ
δ
δ
δ
δ
δ
δ
δ
x
h
V
V
V
A
A
r
e
n
u
V
e
n
=
1
2
44
3
44
1
2
44
3
44
A
f
f
f
u
A
x
y
z
d
x
y
z
f
δ
δω
δ
δω
δω
δω
δ
δ
δ
1
2
44
3
44
1
2
44
3
44
=
==










b
T
1
2
44
3
44
	
(A.1)
The state vector for an NED frame is
δ
δϕ
δλ
δ
δ
δ
δ
δ
δ
δ
δ
x
h
V
V
V
A
A
r
n
e
d
V
n
=
1
2
44
3
44
1
2
444
3
444
e
d
A
x
y
z
d
x
y
z
A
f
f
f
δ
δω
δω
δω
δ
δ
δ
δ
δω
1
2
44
3
44
1
2
44
3
44
=
δ f
b
T
=










1
2
44
3
44
	
(A.2)

174	
MEMS-Based Integrated Navigation
In (A.2), position errors, velocity, and attitude errors (dr, dV, dA) are the 
navigation error states, and the other symbols are related to the sensor error 
models. The scale factors for gyros and accelerometers can also be added to 
(A.1) and (A.2). This will require the user to develop the appropriate relation­
ship for the prediction and update stages.
Attitude Errors
A.1.1   
Table A.1
Angular Rate
Derivative
Assumption
ω
ω
ϕ
ω
ϕ
ie
e
e
l =








0
cos
sin
δω
δϕ
ϕω
δϕω
ϕ
ie
e
e
l = −








0
sin
cos
we is constant 
and is given 
without any 
errors.
 
ω
ϕ
e
n
e
e
V
M
h
V
N
h
V
N
h
l
l =
−
+
+
+
















tan
δω
δ
δ
δ
δ
δ
e
n
n
e
e
V
M
h
hV
M
h
V
N
h
hV
N
h
V
l
l =
−
+
+
+
+
−
+
(
)
(
)
2
2
e
e
e
N
h
V
N
h
hV
N
h
tan
sec
tan
(
)
ϕ
δϕ
ϕ
δ
ϕ
+
+
+
−
+






2
2










Assume M and 
N are error free 
because the 
terms with (M + 
h)2 and (N + h)2 
are very small.
The most extended form of the linearized attitude error in ENU frame 
is given below:
δ
δ
δ
&
&
&
p
r
A
M
h
N
h










=
+
−
+
−
0
1
0
1
0
0
/ (
)
/ (
)
tanϕ
δ
δ
δ
/ (
)
N
h
V
V
V
R
e
n
u
b
l
+




















+
0
0
δω
δω
δω
ω
ϕ
x
y
z
n
e
e
V
M
h
V










+
−
+
0
0
0
2
/ (
)
sin
/ (
)
cos
sec
/ (
)
tan
/ (
)
N
h
V
N
h
V
N
h
e
e
e
+
−
−
+
+

2
2
2
0
ω
ϕ
ϕ
ϕ



















+
+
+
δφ
δλ
δ
ϕ
ω
h
V
N
h
e
e
0
tan
/ (
)
sin
/ (
)
cos
tan
/ (
)
sin
ϕ
ω
ϕ
ϕ
ω
ϕ
−
+
−
−
+
−
−
V
N
h
V
N
h
e
e
e
e
0
V
M
h
V
N
h
V
M
h
n
e
e
n
/ (
)
/ (
)
cos
/ (
)
+
+
+
+










ω
ϕ
0
δ
δ
δ
p
r
A









	
(A.3)
In the NED frame the attitude equation is:

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
175
δ
δ
δ
ϕ
&
&
&
r
p
A
N
h
M
h
N
h










=
+
−
+
−
+
0
1
0
1
0
0
0
0
tan




























+
δ
δ
δ
δ
V
V
V
R
n
e
d
b
l
ω
δω
δω
ω
ϕ
x
y
z
e
e
n
V
N
h
V
M










+
−
−
+
sin
(
)
(
0
0
0
2
+
−
−
+
+





h
V
N
h
V
N
h
e
e
e
)
cos
sec
(
)
tan
(
)
2
2
2
0
ω
ϕ
ϕ
ϕ























+
+
+
δφ
δλ
δ
ϕ
ω
h
V
N
h
e
0
tan
e
n
e
e
e
e
V
M
h
V
N
h
V
N
h
sin
tan
sin
cos
ϕ
ϕ
ω
ϕ
ω
ϕ
−
+
−
+
−
−
+
−
0
V
M
h
V
N
h
r
p
A
n
e
e
+
+
+


















ω
ϕ
δ
δ
δ
cos
0










	
(A.4)
Velocity Linearization
A.1.2   
The linearized velocity error equation is:
δ
δ
δ
&
123
123
l
l
l
l
V
R f
R
f
b
b
term
b
b
term
ie
=
+
−
+
1
2
2
( Ω
Ωe
term
ie
e
term
V
V
l
l
l
l
l
l
l
1
2
44
3
44
1
)
(
)
δ
δ
δ
3
4
2
+
+
Ω
Ω
2
444
3
444
{
l
+ δ g
term5 
(A.5)
The error of the gravity is given using free-air gravity reduction [1].
	
δ
γ
δ
g
R
h
h
T
l =
−
+


0
0
2
/ (
)
	
(A.6)
where g is the normal gravity of the point of interest.
The most extended forms of the velocity errors are

176	
MEMS-Based Integrated Navigation
δ
δ
δ
&
&
&
v
v
v
f
f
f
f
f
f
e
n
u
u
n
u
e
n
e










=
−
−
−


0
0
0


















+





δ
δ
δ
δ
δ
δ
p
r
A
R
f
f
f
b
l
x
y
z





+
+
+
+
2
2
2
ω
ϕ
ω
ϕ
ϕ
e
u
e
n
n
e
n
V
V
V V
N
h
V
sin
cos
(
)cos
V
N
h
V
V V
N
h
e
e
e
e
e
/ [(
)cos
]
cos
(
)cos
+
−
−
+
2
2
0
0
2
ϕ
ω
ϕ
ϕ
0
0
2
0
2
−




















ω
ϕ
γ
δϕ
δλ
δ
e
e
V
R
h
sin








+
−
+
+
+
+
+
−
V
N
h
N
h
V
N
h
u
e
e
tan
sin
tan
ϕ
ω
ϕ
ϕ
2
2ω
ϕ
ω
ϕ
ϕ
e
e
e
e
u
n
V
N
h
V
N
h
V
M
h
V
M
cos
sin
tan
−
+
−
−
+
−
+
−
+
2
2
h
V
N
h
V
M
h
V
e
e
n
2
2
2
0
ω
ϕ
δ
cos
+
+
+


















e
n
u
V
V
δ
δ










	
(A.7)
δ
δ
δ
&
&
&
v
v
v
f
f
f
f
f
f
n
e
d
d
e
d
n
e
n










=
−
−
−


0
0
0


















+





δ
δ
δ
δ
δ
δ
r
p
A
R
f
f
f
b
l
x
y
z





+
−
(
)
+
−
+
(
)
2
0
2
2
V
V
N
h
V V
M
h
e
e
e
n
d
ω
ϕ
ϕ
cos
(
)cos
2
2
2
2
+ (
)
+
(
)
−
(
)
+
V
N
h
V
V
V V
N
e
e
n
d
e
n
tan
cos
sin
(
ϕ
ω
ϕ
ϕ
+
−
+
(
)
−
+
(
)
h
V V
N
h
V V
N
h
e
d
n
e
e
)cos
tan
sin
2
2
2
0
2
ϕ
ϕ
ω
ϕV
V
N
h
V
M
h
R
h
e
e
n
0
2
2
2
2
2
(
)
+
(
)
+ (
)
+
(
)
−
+




tan
(
)
ϕ
γ




































δϕ
δλ
δh



+
+
−
−
+
+
+
V
M
h
V
N
h
V
M
h
d
e
e
n
e
2
2
2
ω
ϕ
ϕ
ω
ϕ
sin
tan
sin
V
N
h
V
V
N
h
V
N
h
V
M
h
e
d
n
e
e
n
tan
tan
cos
ϕ
ϕ
ω
ϕ
+
+
+
+
+
−
+
−
2
2
2
2
0
ω
ϕ
δ
δ
δ
e
e
n
e
d
V
N
h
V
V
V
cos
−
+




























	
(A.8)

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
177
Position Linearization
A.1.3   
δ
δϕ
δλ
δ
&
&
&
&
lr
h
M
h
N
h
=








=
+
+
0
1
0
1
/ (
)
/ (
)cosϕ
δ
δ
δ
0
0
0
0
1
0
0
















+
−
V
V
V
V
e
n
u
n
M
h
V
N
h
V
N
h
e
e
+
+
−
+





tan
/ (
)cos
/ (
) cos
ϕ
ϕ
ϕ
0
0
0
0
2



















δϕ
δλ
δh

(A.9)
The position equation in the NED frame is given in (A.10).
δ
δϕ
δλ
δ
ϕ
&
&
&
&
lr
h
M
h
N
h
=








=
+
+
1
0
0
0
1
0
(
)cos
0
0
1
−
























+
δ
δ
δ
V
V
V
n
e
d
    
sin
(
)cos
(
) cos
0
0
0
2
2
−
+
(
)
+
−
+
V
M
h
V
N
h
V
N
h
n
e
e
ϕ
ϕ
ϕ
0
0
0




























δϕ
δλ
δh
	
(A.10)
Sensor Errors
A.1.4   
After the removal of the deterministic parts of the inertial sensor biases, it is a 
common practice to model the residual stochastic part as a first-order Gauss-
Markov process [2].

178	
MEMS-Based Integrated Navigation
GPS Measurement Model
A.2   
In the loosely coupled approach, position and velocity data from GPS is used 
to make the measurement matrix as follows:
	
δ
ϕ
ϕ
λ
λ
%z
h
h
k
DGPS
INS
DGPS
INS
DGPS
INS
T
=
−
−
−

	
(A.11)
The corresponding measurement matrix Hk will be
 
Hk =
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
00
0
0
0
0









	
(A.12)
The measurement noise matrix obtained from GPS has the following 
form:
	
Rk
h
=










σ
σ
σ
ϕ
λ
2
2
2
0
0
0
0
0
0
	
(A.13)
The measurement equations and measurement matrix is the same whether 
an NED or ENU l-frame implementation is chosen for the navigation Kal­
man filter.
System Model for the Tightly Coupled Approach
A.3   
The error state vector for tightly coupled integration consists of the navigation 
states, sensor error states, and clock-related error states as shown in Table A.2 
in detail.

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
179
Table A.2
δ
δϕ
δλ
δ
δ
δ
δ
δ
δ
δ
δω
δω
δω
δ
δ
δ
x
h
V
V
V
A
A
A
f
f
n
e
d
n
e
d
x
y
z
x
y
=
f
SF
SF
SF
SF
SF
SF
b
d
z
x
g
y
g
z
g
x
a
y
a
z
a










































































}
Position error states: latitude, longitude, and height errors.
}
Velocity error states in NED l-frame: north, east, and down 
velocity.
}
Attitude error states: the roll, pitch, and azimuth.
}
Gyro bias drift error states: x-gyro bias drift (roll gyro), y-gyro bias 
drift (pitch gyro), and z-gyro bias drift (heading gyro).
}
Accelerometer bias drift error states: x-accelerometer bias drift, 
y-accelerometer bias drift, and z-accelerometer bias drift.
}
Gyro scale factor drift error states.
}
Accelerometer scale factor drift error states.
}
Clock bias and drift error states.
The psi-angle error model [3] is provided. Theoretically, there is no differ­
ence between the c-frame and the l-frame; but, the two frames are misaligned 
due to the Earth’s rotation and transport rate in the absence of updates. This 
misalignment is caused solely because of the drift errors in gyros.
This misalignment is written as
dq = [dlcosj  –dj  –dlsinj]T 
= [drE/(N + h)  drN/(M + h)  –drEtanj/(N + h)]T
(A.14)
The two frames, the l-frame and the c-frame, are shown in (A.15) and 
(A.16):

180	
MEMS-Based Integrated Navigation
	
ˆv
v
v
v
v
l
l
l
c
c
=
+
=
+
δ
δ
	
(A.15)
	
ˆg
g
g
g
g
l
l
l
c
c
=
+
=
+
δ
δ
	
(A.16)
where dv1 = dvc – dq ¥ vc and dg1 = dgc – dq ¥ gc.
Using these two values, the value of dgc that is used in the mechanization 
equation in the c-frame is estimated as:
	
δ
δ
g
g r
R
h
l
D
T
=
+


0
0
2
/(
)
	
(A.17)
	
δθ
δ
δ
×
=
−
+
−
+


g
g r
M
h
g r
N
h
c
N
E
T
/ (
)
/ (
)
0
	
(A.18)
The Earth’s rotation rate error is given by (A.19).
	
δω
δθ
ω
ie
l
ie
c
= −
×
	
(A.19)
After considering the error properties and the above relationships, simpli­
fied mechanization equations are produced for the c-frame implementation.
	
δ
ω
δ
δ
δ
ω
ω
δ
&
&
r
r
v
v
f
v
c
ec
c
c
c
c
c
ie
c
ec
c
= −
×
+
=
×
−
+
(
) ×
Ψ
2
c
c
b
c
b
ie
c
ec
c
b
c
ib
b
g
R
f
R
+
+
= −
+
(
) ×
−
δ
δ
ω
ω
δω
&Ψ
Ψ
	
(A.20)
The c-frame attitude is the only different entity that differentiates between 
the c- and l-frame and to add to the error states, these attitudes are converted 
into the usual roll, pitch, and azimuth representation. The conversion is sim­
ply taking the misalignments into account for the two frames as discussed 
before.
The position error dynamics have two error components given by (A.20). 
The first error is actually the error in position due to the rotation rate Apos
pos with 
time and the second part is due to the velocity errors Apos
vel, which is estimated 
by simple time integration.
	
A
dt
dt
d
pos
pos
el
l
el
l
el
l
=
−
−
1
3 1
2 1
3 1
ω
ω
ω
( , )
( , )
( , ) t
dt
dt
dt
el
l
el
l
el
l
1
1 1
2 1
1 1
1
ω
ω
ω
( , )
( , )
( , )
−










	
(A.21)

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
181
	
A
I
dt
pos
vel
x
=
3 3
	
(A.22)
where I x
3 3
1
0
0
0
1
0
0
0
1
=










.
Let us start by looking at the different components of the velocity error 
dynamic equation (A.20). The first part is related to the position error Avel
pos, 
which occurs due to gravity errors.
A
g
M
h dt
g
N
h dt
g
R
h d
vel
pos =
−
+
−
+
+
/ (
)
/ (
)
/ (
)
0
0
0
0
0
0
2
t










	
(A.23)
Furthermore, the transition matrix term for velocity due to IMU velocity 
is related to the angular rates as shown in the velocity mechanization equation. 
Additionally, the transition matrix also models the attitude and accelerometer 
biases.
	
A
dt
dt
dt
vel
vel =
−
−
1
3 1
2 1
3 1
1
1
)
)
)
)
ω
ω
ω
ω
( , )
( , )
( , )
( , )
( , )
( , )
1
2 1
1 1
1
dt
dt
dt
)
)
ω
ω
−










	
(A.24)
where )ω
ω
ω
ω
ω
= −
−
= −
−
2
2
ie
c
ec
c
ie
l
el
l .
	
A
f
dt
f
dt
f
dt
f
vel
att
l
l
l
l
=
−
−
0
3 1
2 1
3 1
0
1
( , )
( , )
( , )
( , )
( , )
( , )
1
2 1
1 1
0
dt
f
dt
f
dt
l
l
−










	
(A.25)
	
A
R dt
vel
accel
bias
b
l
_
=
	
(A.26)
	
A
R diag f
f
f
dt
vel
accel
SF
b
l
x
b
y
b
z
b
_
(
,
,
)
=
	
(A.27)
 The attitude errors components are also given in (A.28).

182	
MEMS-Based Integrated Navigation
	
A
dt
dt
d
att
att
ic
c
ic
c
ic
c
=
−
−
1
3 1
2 1
3 1
ω
ω
ω
( , )
( , )
( , ) t
dt
dt
dt
ic
c
ic
c
ic
c
1
1 1
2 1
1 1
1
ω
ω
ω
( , )
( , )
( , )
−










	
(A.28)
where wicc = wil
l = wie
l + wel
l.
	
A
R dt
att
gyro bias
b
l
_
= −
	
(A.29)
	
A
R diag
att
gyro SF
b
l
ib
b
ib
b
i
_
(
( , ),
( , ),
= −
ω
ω
ω
1 1
2 1
b
b
dt
( , ))
3 1
	
(A.30)
Inertial sensor errors are generally modeled as first-order Gauss-Markov 
processes [2].
	
A
diag
gyro
bias
gyro
bias
x
b
y
b
z
b
_
_
(
,
,
)
=
−
−
−
β
β
β
	
(A.31)
	
A
diag
acc
bias
acc
bias
x
b
y
b
z
b
_
_
(
,
,
)
=
−
−
−
α
α
α
	
(A.32)
	
A
diag
gyro
SF
gyro
SF
x
SF
y
SF
z
SF
_
_
(
,
,
=
−
−
−
β
β
β 	
(A.33)
	
A
diag
acc
SF
acc
SF
x
SF
y
SF
z
SF
_
_
(
,
,
)
=
−
−
−
α
α
α
	
(A.34)
where a, and b are time constants of the first-order Gauss-Markov process [2].
GPS receiver clock error states are unique to tightly coupled integration 
schemes [4–12]. The clock bias can be written as a random walk process as 
follows:
	
bt = bt–1 + (dt)dt	
(A.35)
where d is the random constant error for the clock drift for each time step:
	
dt = dt–1	
(A.36)
Therefore, the transition matrix for the clock bias and drift errors is 
written as
	
A
dt
bd
bd = 





1
0
1
	
(A.37)

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
183
Combining (A.35)–(A.37) gives the transition matrix:
Φ =
×
×
×
×
×
×
A
A
A
pos
pos
pos
vel
ve
0
0
0
0
0
0
3 3
3 3
3 3
3 3
3 3
1 2
l
pos
vel
vel
vel
att
vel
acc
bias
vel
A
A
A
A
0
0
3 3
3 3
×
×
_
acc
SF
att
att
att
gyro
bias
A
A
_
_
0
0
0
0
1 2
3 3
3 3
3 3
×
×
×
×
A
A
att
gyro
SF
gyro
bias
g
_
_
0
0
0
0
0
3 3
1 2
3 3
3 3
3 3
×
×
×
×
×
yro
bias
aA
_
0
0
0
0
0
0
0
0
3 3
3 3
3 3
1 2
3 3
3 3
3 3
3 3
×
×
×
×
×
×
×
×
cc
bias
acc
bias
_
_
0
0
0
0
0
0
0
3 3
3 3
1 2
3 3
3 3
3 3
3
×
×
×
×
×
×
×3
3 3
3 3
1 2
3 3
3 3
3 3
3
0
0
0
0
0
0
0
×
×
×
×
×
×
Agyro
SF
gyro
SF
_
_
×
×
×
×
×
×
×
×
3
3 3
3 3
1 2
2 3
2 3
2 3
2
0
0
0
0
0
0
0
Aacc
SF
acc
SF
_
_
3
2 3
2 3
2 3
0
0
0
×
×
×
























Abd
bd



	

(A.38)
The Update Stage
A.4   
The update stage for tightly coupled integration is different from the loosely 
coupled integration strategy. Here, raw measurements (i.e., pseudorange and 
Doppler measurements), which are sufficient for low-cost MEMS-based inte­
grated navigation, are used. The first step is to convert the raw measurements 
into required observables for the integration filter. The pseudorange is the 
distance between the satellite and the GPS receiver with errors associated with 
the transportation medium and the clock errors.
	
%ρ
ρ
=
+
−
+
+
+
cdt
cdt
d
d
d
clk sat
clk
Iono
Tropo
multip
,
ath + ερ 	 (A.39)
where %ρ is the measured pseudorange, r is the true pseudorange, c is the speed 
of light (2.9979 ¥ 108 m/s), dtclk is the error due to receiver clock bias, dtclk,sat 
is the error due to the satellite clock, dIono is the error due to the ionosphere, 
dTropo is the error due to the troposphere, dmultipath is the error due to the mul­
tipath, and ep is the noise.
The relative motion of the satellite and user results in changes in the 
observed frequency and is commonly known as a Doppler shift or range rate. 
If the satellite velocity is known and the Doppler shift is measured, the user 
velocity can be estimated. The GPS receiver measures the Doppler shift in the 
carrier tracking loop and it is readily available as one of the observations. The 
range rate can be given as follows:

184	
MEMS-Based Integrated Navigation
	
&%
&
&
&
&
&
&
ρ
ρ
ρ
=
+
+
−
−
+
d
f
dt
dt
d
d
L
clk sat
clk
Iono
1(
)
,
Tropo + ε 	
(A.40)
where &%ρ is the measured Doppler, &ρ is the Doppler or range rate, d &ρ is the 
orbital errors drift, fL1 is the L1 carrier frequency, dtclk sat
&
,
 is the satellite clock 
drift, dtclk
&  is the receiver clock drift, &dIono is the ionospheric delay drift, &dTropo 
is the tropospheric delay drift, and e is the noise.
Pseudorange and Doppler Corrections
A.5   
The measurements for the tightly coupled integration consist of pseudorange 
(A.39) and Doppler (A.40) for each available satellite. Both equations consist 
of the required parameter along with a number of error terms. After calculating 
and removing all the error terms, the corrected measurements are then used 
in the measurement vector δ %zk of the KF. If there are n satellites available at 
the kth epoch, the measurement vector is given as:
	
δ
ρ
ρ
ρ
ρ
ρ
%
%
M
%
&
zk
INS
k
GPS
k
INS n
k
GPS n
k
INS
=
−
−
,
,
,
,
1
1
,
,
,
,
1
1
k
GPS
k
INS n
k
GPS n
k
−
−










&%
M
&
&%
ρ
ρ
ρ










	
(A.41)
where ρINS j
k
,  is the computed pseudorange using INS measurements for the 
jth satellite, &ρINS j
k
,  is the INS computed range rate for the satellite, %ρINS j
k
,  is 
the corrected pseudorange for the satellite, and &%ρINS j
k
,  is the Doppler for the 
satellite.
References
Featherstone, W.E., and Dentith, M.C., “A Geodetic Approach to Gravity Data Reduc­
[1]	
tion for Geophysics,” Vol. 23, No. 10, December 10, 1997, pp. 1063–1070.
Maybeck, P.S., 
[2]	
Stochastic Models, Estimation and Control, Volume 3, New York: Academic 
Press Inc., 1982.

	
Appendix: Linearization Process for the EKF for Low-Cost Navigation 	
185
Savage, P., 
[3]	
Strapdown Analytics, Part 1 & 2, MN: Strapdown Associates, 2000.
Godha, S. “Performance Evaluation of Low Cost MEMS-Based IMU Integrated with 
[4]	
GPS for Land Vehicle Navigation Application,” M.Sc. thesis, Department of Geomatics 
Engineering, University of Calgary, Canada, UCGE Report No. 20239, 2006, available 
online: http://www.ucalgary.ca/engo_webdocs/MEC/06.20239.SGodha.pdf.
Grewal, M.S., Weill, L., and Andrews, A.P., 
[5]	
Global Positioning Systems, Inertial Navigation, 
and Integration, Second Edition, New Jersey: John Wiley & Sons, 2007.
Hofmann-Wellenhof, B., Lichtenegger, H., and Collins, J., 
[6]	
GPS Theory and Practice, 
Fifth Edition, Austria: Springer, 2004.
ICD-GPS-200C, “GPS Interface Control Document, NAVSTAR GPS Space Segment / 
[7]	
Navigation User Interfaces,” IRN-200C-004, 2000, http://www.navcen.uscg.gov/gps.
Kaplan, E.D., 
[8]	
Understanding GPS: Principles and Applications, Norwood, MA: Artech 
House, 1996.
Knight, D.T., “Rapid Development of Tightly Coupled GPS/INS Systems,” 
[9]	
Aerospace 
and Electronic Systems Magazine, Vol. 12, No. 2, 1999, pp. 14–18.
Misra, P., and Enge, P., 
[10]	
Global Positioning System: Signals, Measurements, and Performance, 
Lincoln, MA: Ganga-Jamuna Press, 2001.
Parkinson, B.W., and Spilker Jr., J.J., “Global Positioning System: Theory and Applica­
[11]	
tions,” in Progress in Astonautics and Aeronautics, United States: AIAA, 1996.
Tsui, J.B., 
[12]	
Fundamentals of Global Positioning System Receivers: A Software Approach, 
Second Edition, Canada: John Wiley & Sons, Inc., 2005.


187
About the Authors
Priyanka Aggarwal is a research consultant at the University of Michigan. She 
obtained her Ph.D. in geomatics engineering in 2009 from the University of 
Calgary. Her master’s degree is in electrical and computer engineering (2004) 
from the University of Calgary, and her bachelor’s degree in electronics and 
communication (2000) is from the University of Kurukshetra, India.
Her research interests are integrated navigation and positioning tech­
niques for ground and airborne applications. Her expertise includes developing 
algorithms for integrated inertial navigation using Kalman, unscented, and par­
ticle filters; real-time kinematic positioning using map-matching techniques; 
and autonomous pedestrian navigation systems in GPS-denied atmospheres. 
She has written several high-quality journal papers, holds a patent on hybrid 
particle filtering, and has contributed to 25 research publications.
Zainab Syed obtained her B.Sc. in geomatics engineering in 2001, her 
M.Sc. in electrical and computers engineering in 2004, and her Ph.D. in 
geomatics engineering in 2009 from the University of Calgary. Her current 
research focuses on very low-cost and portable navigation systems. Dr. Syed 
is a cofounder and VP of technology at the Trusted Positioning Inc. Over 
the course of her career, Dr. Syed had been involved in many collaborative 
R&D with industrial partners such as SiRF Inc. and NovAtel Inc. To date, 
Dr. Syed has over 30 publications, two patents pending, and software for 
integrated navigation systems. The earlier part of her career was focused on 
the optimization of data processing techniques for highly nonlinear systems 
using parallel processes.
Aboelmagd Noureldin is a cross-appointment associate professor at the 
Departments of Electrical and Computer Engineering of both Queen’s Uni­
versity and the Royal Military College (RMC) of Canada. He is also the 
founder and leader of the Navigation and Instrumentation research group at 
RMC. His research is related to artificial intelligence, digital signal processing, 
spectral estimation and denoising, wavelet multiresolution analysis, nonlinear 
estimation, and adaptive filtering with emphasis on their applications in mobile 
multisensor system integration for navigation and positioning technologies. 

188	
About the Authors
He is the developer of several innovative methods for reliable navigation in 
urban and indoor areas as well as other denied or challenging GPS environ­
ments. Dr. Noureldin holds a B.Sc. in electrical engineering (1993) and an 
M.Sc. in engineering physics (1997) from Cairo University, Giza, Egypt. In 
addition, he holds a Ph.D. in electrical and computer engineering (2002) 
from the University of Calgary, Alberta, Canada. Dr. Noureldin is a senior 
member of the IEEE.
Naser El-Sheimy is a professor of the Department of Geomatics Engineer­
ing, Schulich School of Engineering (SSE), at the University of Calgary and 
is also the scientific director at the Integrated Resource Management (IRM) 
Centre of Excellence for Commercialization of Research (CECR). He holds 
a Canada research chair (CRC) in mobile multisensor systems. His research 
interests include multisensor systems, mobile mapping systems, estimation 
techniques, real-time kinematic positioning, and digital photogrammetric 
along with their applications in transportation, mapping, and geospatial 
information systems (GIS).
Dr. El-Sheimy has published a book and over 300 papers in academic 
journals, conferences, and workshop proceedings, in which he has received over 
20 national and international paper awards. He organized and participated 
in organizing many national and international conferences. His research on 
multisensor systems applications has been recognized internationally.

189
Index
A
Absolute alignment, 77–79
static alignment example, 78–79
static alignment for MEMS sensors, 77
Accelerometer bias, 37
Accelerometers, 3, 5, 6, 16–20
basic structure of, 18
capacitive, 20
classifications of, 19–20
measurement model, 61
noise values for, 28
piezoelectric, 20
piezoresistive, 19
thermal variation of, 48
triaxial, 24
tunneling, 20
vertical, 28
working principle for MEMS, 17–19
Access points (AP), 8
Adaptive neuro fuzzy inference system 
(ANFIS), 116, 124–26, 129, 131, 133, 
136
rule base, 132
structure of, 125
Agriculture, 4
Aided MEMS-based inertial navigation, 
7–12
in attitude domain, 11–12
in coordinate domain, 7–10
in velocity domain, 10–11
Aiding MEMS-based INS, 99–113
extended Kalman filtering and, 106–11
Kalman filter algorithm and, 105–6
Kalman filter and, 102–5
loosely coupled mode of integration, 101
tightly coupled mode of integration, 
101–2
Aiding sources in attitude domain, 11–12
map matching, 11
MEMS magnetometers, 11–12
Aiding sources in coordinate domain, 7–10
barometer, 10
cell phone positioning, 8
Global Positioning System, 7–8
map matching, 9–10
proximity detection techniques, 9
radio detection and ranging (RADAR), 9
radio-frequency identification (RFID) 
systems, 9
ultrawideband positioning, 8
WiFi positioning, 8
Aiding sources in velocity domain, 10–11
Global Positioning System (GPS), 11
nonholonomic constraints, 10
odometer, 10–11
zero velocity updates, 10
Airbags, 6
Algorithm
of hybrid extended particle filter, 160–62
Kalman filter (KF), 105–6
zero velocity condition detection, 159–60
Alignment
absolute, 77–79
initial, 63–81
necessity of, 78
relative, 76
transfer, 80–81
velocity matching, 79–80
Allan variance methodology, 58–60
data structure for, 59
Analog Devices, Inc., 2, 16
Analytical approximation, 142
ANFIS. See Adaptive neuro fuzzy inference 
system (ANFIS)

190	
MEMS-Based Integrated Navigation
Angular random walk (ARW), 27, 57, 59
Angular rate test, 45–46
Angular velocity, 92
vector, 86
ANN. See Artificial neural networks (ANN)
Artificial neural networks (ANN), 115–38
ANFIS, 124–26
MLPNN, 118–20
navigation error states architecture, 
128–37
RBFNN, 120–24
types of, 117–26
velocity module, 134
whole navigation states architecture, 
126–28
Assisted GPS (AGPS), 66
Attitude domain, aiding sources in, 11–12
Attitude errors, 174–75, 181
Autocorrelation function, 58
of Gauss-Markov random process, 54–55
Azimuth, 88
error, 131
B
Barometer, 10
Basic particle filters, 149–50
Bayes’ theorem, 139, 156
b-frame. See Body frame (b-frame)
Bias, 37–38
accelerometer, 37
gyro, 35, 38
in run (stability), 41–42
run-to-run (repeatability), 41
temperature-dependent, 43
Body frame (b-frame), 63, 65, 66, 67, 83
to ENU l-frame, 88–89
to NED l-frame, 89
Bulk micromachining techniques, 15
C
Calibration, of systematic sensor errors, 
43–53
Capacitive accelerometers, 20
Cartesian coordinate system, 90
Cell phone positioning, 8
c-frame, 180
Classical method, for mechanization 
equations, 96
Closed-loop systems, 20
Collars, GPS, 5
Configuration
economically desirable, 68–74
partial sensor, 167–69
Control loop, 20
closed, 20
open, 20
Coordinate domain, aiding sources in, 7–10
Coriolis force, 21
Corrected INS error, 136
Curvilinear coordinate system, 90
Custom inertial unit (CIU), 47, 51, 153, 
162
accelerometer Allan variance results, 59
drift errors for, 52
error characteristics of, 60
field test trajectory, 154, 155
gyroscope Allan variance results, 60
trajectory velocity profile, 154
D
Dead-reckoning sensors, 3
Deep reactive ion etching (DRIE), 16
Deterministic sampling filters, 143
Differential GPS (DGPS), 7, 51
Dirac delta function, 144
Direction cosine matrix (DCM), 85
Doppler corrections, 184
Doppler shift, 183
Drift errors
average, 30
for CIU, 52
with NHC, 31–32
without NHC, 29–30
position, 51, 75
Dual-axis MEMS gyroscopes, 24
Dynamic model, 103–4
E
Earth fixed frame (e-frame), 83
ENU l-frame to, 85–87
to i-frame, 84–85
NED l-frame to, 87–88

	
Index	
191
Economical considerations, for initial 
alignment of MEMS sensors, 68–76
complete six DOF IMU, 74–76
economically desirable configuration, 
68–74
Economically desirable configuration, 68–74
known parameter design, 68–69
misalignment, 70, 74
restrictive design, 69
e-frame. See Earth fixed frame (e-frame)
EGNOS, 8
Electric wheelchairs, 3
Electronic stability control, 6
ENU l-frame
b-frame to, 88–89
Earth’s rotation rate in, 86
to e-frame, 85–87
ENU realization, 90–94
Equations
mechanization, 95–97
navigation, 83–97
Errors
attitude, 174–75, 181
azimuth, 131
calibration of systematic sensor, 43–53
corrected INS, 136
drift, 29–32
GPS receiver clock, 182
inertial sensor random, 57
MEMS inertial sensors, 35–62
navigation, 102
nonorthogonality/misalignment, 39–40
position drift, 51
predicted INS, 136
random/stochastic, 53–57
roll and pitch, 30
root mean square error, 126
in run (stability) bias/scale factor, 41–42
run-to-run (repeatability) bias/scale factor, 
41
sensor, 177
systematic, 36–43
target position/velocity, 136
temperature-dependent bias/scale factor, 
43
Euler angles, 89
European Space Agency, 8
Event data recorder (EDR), 4–5
Extended Kalman filtering (EKF), 99, 101, 
106–11, 142, 150, 159
implementation, 161–62
limitations of, 110–11
linearization process for, 107–10, 173–85
Extended particle filters (EPF), 150–55, 159
example of results for land vehicle, 
153–55
implementation, 161
methodology of, 150–53
F
Federal Aviation Administration (FAA), 8
Fictitious force, 22
Firefighters, personnel tracking and 
navigation for, 3
Fourier transform, 54, 58
G
Galileo (satellite), 7
Gaussian filters, 142–43
Gaussian function, 122
Gaussian noise, 27
Gaussian particle filter (GPF), 157–58
Gaussian probability distribution, 102, 104, 
108, 141–42, 143, 151, 155, 156, 158
Gaussian random process, 53–54
Gaussian sum particle filter (GSPF), 157–58
Gauss-Markov random process, 54–57, 177
autocorrelation function of, 54–55
shaping filter, 55–57
Global Positioning System (GPS), 1, 7, 11
assisted, 66
collars, 5
derived heading example, 80
differential, 7, 51
Kalman filter (KF), 101
lock, 67
NovAtel OEM4 GPS, 153
signal degradation periods in, 111, 112
single point positioning, 51
velocity matching alignment and, 79
GPF. See Gaussian particle filter (GPF)
GPS. See Global Positioning System (GPS)

192	
MEMS-Based Integrated Navigation
GPS measurement model, 178
GPS receiver clock error, 182
GreenStar2 system, 4
Grid-based methods, 142
GSPF. See Gaussian sum particle filter (GSPF)
Gyroscopes (gyros), 2, 3, 21–23
bias, 35, 38
bias repeatability, 41
bias stability, 42
classification of MEMS, 22–23
dual-axis MEMS, 24
measurement model, 61
noise values for, 28
principle of MEMS, 21–22
roll and pitch, 25
scale factor error, 38
scale factor error stability, 43
scale factor repeatability, 42
thermal variation of bias, 48, 49
tuning fork, 22
tuning vibratory, 23
vertical, 25
vibrating wheel, 23
wine glass resonator, 23
H
Half-interval method, for mechanization 
equations, 96–97
Heading misalignment, 73
HEPF. See Hybrid extended particle filter 
(HEPF)
Hybrid extended particle filter (HEPF), 
158–69
algorithm of, 160–62
with loosely coupled integration, 162–65
partial sensor configuration, 167–69
results, 162–67
with tightly coupled integration, 165–67
zero velocity condition detection 
algorithm, 159–60
I
i-frame. See Inertial frame (i-frame)
Importance sampling method, 144–46
Inertial frame (i-frame)
e-frame to, 84–85
Inertial Lab (University of Calgary), 47
Inertial measurement unit (IMU), 24, 27, 
28, 43, 44, 45, 50, 58, 63, 69, 165
alignment of, 64, 65
6 degrees of freedom (DOF), 74–76
Inertial Navigation System (INS), 6, 7, 133
aiding MEMS-based, 99–113
velocity and attitude errors, 90
Inertial sensor random errors, 57
Initial alignment, of MEMS sensors, 63–81
absolute alignment, 77–79
considerations for navigation, 65–66
economical considerations, 68–76
portable navigation system, 66–68
transfer alignment, 80–81
velocity matching alignment, 79–80
Input delay neural networks (IDNN), 116
Input sensitivity, 38–39
In run (stability) bias/scale factor, 41–42
Integration
loosely coupled mode of, 101
tightly coupled mode of, 101–2
iPhone (Apple), 2
J
Jacobian matrix, 108, 109
Japanese Civil Aviation Bureau, 8
K
Kalman filter (KF), 27, 67, 68, 69, 70, 74, 
80, 81, 83, 102–5, 129, 134, 158
algorithm, 60, 105–6
analytical approximation type of, 142
augmented, 135
dynamic model, 103–4
measurement model, 105
replacement of, 115
solution, 11
unscented, 110, 143
Known parameters design, 68–69
problem with, 69
L
Land navigation, MEMS inertial sensors for 
economical, 24–26
Land vehicle navigation, 6–7
Laplace transform, 56
l-frame. See Local level frame (l-frame)

	
Index	
193
Likelihood particle filter (LPF), 156–57
Linearization, 107–10
position, 177
velocity, 175–76
Linearization, for EKF for low-cost 
navigation, 173–85
GPS measurement model, 178
pseudorange and Doppler corrections, 
184
system model for loosely coupled 
approach, 173–77
system model for tightly coupled 
approach, 178–83
update stage, 183–84
Linear transfer functions, 119
Lithographic Galvanoformung Abformung 
(LIGA), 16
Livestock tracking, 5
Local level frame (l-frame), 66, 67, 77, 78, 
83, 179
acceleration components of, 90
ENU, 85–87, 88–89
motion modeling in, 89–95
NED, 87–88, 89
orientation change in, 90
Log-sigmoid transfer functions, 119
Loosely coupled mode of integration, 101
HEPF with, 162–65
system model for, 173–77
tightly coupled mode versus, 111, 153
LPF. See Likelihood particle filter (LPF)
M
Magnetometers, MEMS, 11–12
Manufacturing imperfections, 
nonorthogonality error due to, 40
Map matching, 9–10, 11
Mathematical relations, between frames, 
84–89
b-frame to ENU l-frame, 88–89
b-frame to NED l-frame, 89
ENU l-frame to e-frame, 85–87
NED l-frame to e-frame, 87–88
Matrix
Jacobian, 108, 109
rotation, 93
skew-symmetric, 93
transition, 181
Mean square error (MSE), 117
Measurement model, 105
Mechanization equations
classical method for, 96
half-interval method for, 96–97
solving, 95–97
MEMS. See also Microelectromechanical 
systems (MEMS)
accelerometers, 17–19
gyroscopes, 21–23
magnetometers, 11–12
MEMS devices, 3–7
agriculture, 4
electric wheelchairs, 3
electronic stability control, 6
event data recorder, 4–5
land vehicle navigation, 6–7
patient monitoring, 5
personnel tracking and navigation, 3–4
supplemental/secondary restraint system, 6
wildlife and livestock tracking, 5
MEMS inertial sensors, 15–33
accelerometers, 16–20
configurations, 25
gyroscopes, 21–23
method to compute minimum sensors, 
26–29
for most economical land navigation, 
24–26
results and analysis, 29–32
MEMS inertial sensors errors, 35–62
calibration of systematic sensor errors, 
43–53
random/stochastic errors, 53–57
sensors measurement models, 60–61
stochastic modeling, 57–60
systematic errors, 36–43
MEMS sensors
initial alignment of, 63–81
navigation, 65–66
static alignment for, 77
Microelectromechanical systems (MEMS), 
xi. See also MEMS
devices, 3–7
sensors, 1
technology, 1–13

194	
MEMS-Based Integrated Navigation
Minimum sensors, computing, 26–29
Misalignment, 70, 74
heading, 73
roll and pitch, 70, 71, 72
MLPNN. See Multilayer perception neural 
networks (MLPNN)
Mobile Multi-Sensors (MMSS) research 
group, 28, 51, xi
Monitoring, patient, 5
Monte Carlo (MC) principle, 143, 144, 145
Motion modeling
ENU realization, 90–94
in l-frame, 89–95
NED realization, 94–95
Motion Pak II, 162, 163, 165
Mounting misalignment, 40
Multilayer perception neural networks 
(MLPNN), 116, 118–20, 127
module for VUA for INS/GPS 
integration, 128
single neuron model in, 118
N
Navigation
equations, 83–97
errors, 102
land, 24–26
land vehicle, 6–7
low-cost, 173–85
MEMS sensor, 65–66
portable, 65, 66–68
process, 66
Navigation error states architecture, 128–37
ANN/KF augmented module for INS/
GPS integration, 135–37
initialization mode of operation, 130
for INS/GPS integration, 133–34
prediction mode of operation, 130
system implementation, 132–33
update mode of operation, 130
NED l-frame
b-frame to, 89
to e-frame, 87–88
NED realization, 94–95
Neural network (NN), 128
Nintendo, 2
Nonholonomic constraints (NHC), 10
drift errors with, 31–32
drift errors without, 29–30
Nonorthogonality/misalignment errors, 
39–40
Normal gravity vector, 91
Normalization, 123
NovAtel OEM4 GPS, 153
O
Odometer, 10–11
Open-loop systems, 20
Orientation-dependent (wet) etching, 16
P
Partial sensor configuration, 167–69
Particle filters (PF), 139–71
basic, 149–50
extended, 150–55
Gaussian, 157–58
Gaussian sum, 157–58
hybrid extended, 158–69
importance sampling method, 144–46
likelihood, 156–57
Monte Carlo sampling approach in, 143, 
144, 145
Rao-Blackwellized, 156
regularized, 157
resampling method, 146–49
types of, 150–58
unscented, 150–55
Patient monitoring, 5
Personnel tracking and navigation, 3–4
Piezoelectric accelerometers, 20
Piezoresistive accelerometers, 19
Portable navigation system, 65, 66–68
Position and velocity update architecture 
(PVUA), 128, 129
Position drift errors, 51
for misalignment range, 75
Position linearization, 177
Position update architecture (PUA), 127
Power spectral density (PSD), 58
Predicted INS error, 136
Predicted INS position/velocity, 136
Prediction stage, of Kalman filter algorithm, 
105–6
Probability density functions (PDF), 139

	
Index	
195
Proof mass, 17
displacement of, 19
Proximity detection techniques, 9
Pseudocode, for HEPF, 161
Pseudo force, 22
Pseudorange, 184
Pseudosignals, 27
Psi-angle error model, 179
R
RADAR. See Radio detection and ranging 
(RADAR)
Radial basis function neural networks 
(RBFNN), 116, 120–24, 129, 131, 
133, 136
structure of, 121
tasks in training process, 122
Radial basis functions (RBF), 121, 131
Radio detection and ranging (RADAR), 9
Radio-frequency identification system 
(RFID), 9
Radio frequency (RF), 9
Ramp method, 46, 49
compensation for bias/scale factor with, 52
soak method and, 52
Random processes, 53–57
Gaussian, 53–54
Gauss-Markov, 54–57
random walk, 57
Random/stochastic errors, 53–57
random processes, 53–57
Random walk process, 57
Rao-Blackwellized particle filter (RBPF), 
156
RBF. See Radial basis functions (RBF)
RBFNN. See Radial basis function neural 
networks (RBFNN)
RBPF. See Rao-Blackwellized particle filter 
(RBPF)
Regularized particle filter (RPF), 157
Relative alignment, 74
importance of, 76
Resampling method, 146–49
residual, 149
simple random resampling, 148
stratified, 149
systematic, 148–49
unweighted density function, 146
weighted approximate density, 146
Residual resampling, 149
Restrictive design, 69
RFID. See Radio-frequency identification 
system (RFID)
Roll and pitch errors, 30
Roll and pitch misalignment, 70, 71, 72
Root mean square error (RMSE), 126
Root mean square (RMS), 58
Rotation matrix, 93
RPF. See Regularized particle filter (RPF)
Run-to-run (repeatability) bias/scale factor, 
41
S
Satellite-based augmentation systems 
(SBAS), 8
Scale factor, 38–39
in run (stability), 41–42
run-to-run (repeatability), 41
soak method and, 52
temperature-dependent, 43
variation, 50
Secondary restraint system. See 
Supplemental restraint system (SRS)
Sensor errors, 177
Sensor measurement models, 60–61
accelerometer measurement model, 61
gyroscope measurement model, 61
Sensors
configurations for, 25
dead-reckoning, 3
initial alignment of MEMS, 63–81
MEMS, 1
MEMS inertial, 15–33
minimum, computing, 26–29
tilt, 4
Sequential Monte Carlo estimation (SMC), 
149
Shaping filter, 55–57
Signal degradation, in GPS, 111, 112
Simple random resampling, 148
Simplified posterior density function, 141
Single point positioning GPS (SPP GPS), 51
6 degrees of freedom (DOF) IMU, 74–76
relative alignment example, 74

196	
MEMS-Based Integrated Navigation
6-position static test, 44–45
Skew-symmetric matrix, 93
Soak method, 46, 48, 50
compensation for bias/scale factor with, 
52
Software modifications, 27
Specific force, 18
Static alignment
example, 78–79
for MEMS sensors, 77
Stochastic modeling, 57–60
Allan variance methodology, 58–60
autocorrelation function, 58
Stratified resampling, 149
Supplemental restraint system (SRS), 6
Systematic errors, 36–43
bias, 37–38
input sensitivity or scale factor, 38–39
nonorthogonality/misalignment errors, 
39–40
in run (stability) bias/scale factor, 41–42
run-to-run (repeatability) bias/scale factor, 
41
temperature-dependent bias/scale factor, 
43
Systematic resampling (SR), 148–49
Systematic sensor errors, calibration of, 
43–53
angular rate test, 45–46
6-position static test, 44–45
thermal calibration test, 46–53
System implementation, 132–33
System model for loosely coupled approach, 
173–77
attitude errors, 174–75
position linearization, 177
sensor errors, 177
velocity linearization, 175–76
System model for tightly coupled approach, 
178–83
T
Tagaki-Sugeno-Kang (TSK) fuzzy inference 
system, 124
Tan-sigmoid transfer functions, 119
Target position/velocity error, 136
Taylor series expansion, 108
Temperature-dependent bias/scale factor, 43
Thermal calibration test, 46–53
setup for, 47
Tightly coupled mode of integration, 101–2
HEPF with, 165–67
loosely couple mode versus, 111, 153
system model for, 178–83
update stage for, 183–84
Tilt sensors, 4
Time-derivative transformation matrix 
equation, 92
Tracking, wildlife and livestock, 5
Transfer alignment, 80–81
Transfer functions, 119
linear, 119
log-sigmoid, 119
tan-sigmoid, 119
Transformations, between frames, 84–89
b-frame to ENU l-frame, 88–89
b-frame to NED l-frame, 89
e-frame to i-frame, 84–85
ENU l-frame to e-frame, 87–88
NED l-frame to e-frame, 87–88
Transition matrix, 181
Transport rate, 87
Triaxial accelerometer (SG-TA), 24
Tuning fork gyroscopes, 22
Tuning vibratory gyroscope, 23
Tunneling accelerometers, 20
U
Ultrawideband positioning (UWB), 8
Unscented Kalman filter (UKF), 110, 143
Unscented particle filters (UPF), 150–55
methodology of, 150–53
Update stage, for tightly coupled 
integration, 183–84
Update stage, of Kalman filter algorithm, 
106
V
Vehicles
airbags, 6
extended particle filters and, 153–55
supplemental restraint system in, 6
Velocity
angular, 92

	
Index	
197
defined, 90
linearization, 175–76
mechanization equations, 91
Velocity domain, aiding sources in, 10–11
Velocity matching alignment, 79–80
Velocity random walk (VRW), 27, 57, 58, 
59
Vertical accelerometers, 28
Vertical gyroscope, 25
Vibrating wheel gyroscopes, 23
W
Wheelchairs, electric, 3
Whole navigation states architecture, 
126–28
position and velocity update architecture, 
128
position update architecture, 127
WiFi positioning, 8
access points, 8
Wii (Nintendo), 2
Wildlife tracking, 5
Window size, 132
Wine glass resonator gyroscopes, 23
Z
Zero velocity condition detection algorithm, 
159–60
Zero velocity updates (ZUPT), 10, 154, 158
detection code, 160


