© 2019 MathByte Academy

JSON
JavaScript Object Notation
à text-based object serialization
à open standard
à human-readable
Very common format for web API's and general data interchange between systems
Unlike pickling, it is considered safe
à may vary based on the JSON deserializer you use
© 2019 MathByte Academy

strings
delimited by double quotes
"python"
integers
floats
unicode
booleans
100
3.14
100.0
true, false
arrays (lists)
[1, 3.1, "python"]
delimited by square brackets
ordered
dictionaries
{ "a": 1, "b": "python"}
key-value pairs
Limited Data Types
keys à strings
values à any supported data type
unordered
empty value
null
numbers
100
3.14
Often, non-standard, additional types are supported:
NaN
3.14e-05
Infinity
-Infinity
3.14E+5
à all floats
© 2019 MathByte Academy

Example
{
"title": "Fluent Python",
"author": {
"firstName": "Luciano",
"lastName": "Ramalho"
},
"publisher": "O'Reilly",
"isbn": "978-1-491-9-46008",
"firstReleased": 2015,
"listPrice": [
{
"currency": "USD",
"price": 49.99
},
{
"currency": "CAD",
"price": "57.99"
}
]
}
reminds you of Python??
© 2019 MathByte Academy

Serialization and Deserialization
JSON is a natural fit for serializing and deserializing Python dictionaries
Of course, Python dictionaries are objects
JSON is essentially a string
import json
dump, dumps
load, loads
dict
{ … }
file
string
dict
serialize
dump, dumps
deserialize
load, loads
© 2019 MathByte Academy

Problems…
JSON keys must be strings
à but Python dictionary keys just need to be hashable
à how to serialize?
JSON value types are limited
à Python dictionary values can be any data type
à how to serialize?
even if we can serialize a complex data type, such as a custom class
à how do we deserialize back to original data type?
à Customize serialization and deserialization
we'll come back to this later…
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

