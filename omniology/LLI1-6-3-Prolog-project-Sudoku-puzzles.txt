Logic: Language and Information 1
§6-3 prolog project: Sudoku puzzles
Jen Davoren

Review: Logical consequence answered by prolog
Let P be a logic program and let G be the goal:
?- r_1, r_2, ..., r_k.
To get prolog to answer the question whether or not P |= G,
▶load the program file containing P into prolog : can use
File→Consult. . . or File→Load. . . in some versions.
▶enter the goal atoms in G in a list after the query prompt ?-
▶end list with period . and then press “return” key;
▶then prolog answers with either true or false or . . .
prolog gets stuck in a loop and crashes!
or reports some other error.

4 × 4 Toy Sudoku puzzles
Label with capital letters the
16 cells of the 4 × 4 grid:
in 4 columns:
The cells of the 4 × 4 grid are
naturally arranged in 4 rows:
and in 4 blocks:

4 × 4 Toy Sudoku puzzles
A correctly completed 4 × 4 Sudoku must
contain a permutation of {1, 2, 3, 4} in the cells
of each row, each column, and each block.

4 × 4 Toy Sudoku puzzles
A correctly completed 4 × 4 Sudoku must
contain a permutation of {1, 2, 3, 4} in the cells
of each row, each column, and each block.
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
We assume each 4 × 4
Sudoku puzzle has an initial
assignment of values
{1, 2, 3, 4} to four
pairwise-independent
cells in the grid.

4 × 4 Toy Sudoku puzzles
A correctly completed 4 × 4 Sudoku
contains a permutation of {1, 2, 3, 4} in the cells
of each row, each column, and each block.
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
.
3
.
4
.
2
.
1
We assume each 4 × 4
Sudoku puzzle has an initial
assignment of values
{1, 2, 3, 4} to four
pairwise-independent
cells in the grid.

4 × 4 Toy Sudoku puzzles
A correctly completed 4 × 4 Sudoku
contains a permutation of {1, 2, 3, 4} in the cells
of each row, each column, and each block.
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
.
3
.
4
.
2
.
1
.
2
.
4
.
3
.
1
.
1
.
3
.
4
.
2
We assume each 4 × 4
Sudoku puzzle has an initial
assignment of values
{1, 2, 3, 4} to four
pairwise-independent
cells in the grid.

4 × 4 Toy Sudoku puzzles
We want to:
▶represent propositions like “cell B has value 1” as atomic
formulas;
▶represent as much as we can of the structure of the problem in
program clauses in a propositional prolog program;
▶solve these puzzles using prolog queries.

Sudoku: problem representation
Let Σ:={A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P} be the set of cell
labels in a 4 × 4 Sudoku.
For each of the 16 cells X in Σ, we will have the following 4 atomic
propositions, to give a total of 64 atoms:
v_X_1
:=
Cell X has value 1.
v_X_2
:=
Cell X has value 2.
v_X_3
:=
Cell X has value 3.
v_X_4
:=
Cell X has value 4.

Sudoku: problem representation
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
/* Sudoku example 001 */
v_B_1.
v_G_2.
v_L_4.
v_M_3.
The set {B, G, L, M} is
pairwise-independent.

Sudoku: problem representation
For each of the cells X in Σ, and for any cell Y in Σ with Y ̸= X, we
will say Y is Sudoku-related to X if and only if either Y is in the same
row as X, or Y is in the same column as X, or Y in the same block as X.

Sudoku: problem representation
For each of the cells X in Σ, and for any cell Y in Σ with Y ̸= X, we
will say Y is Sudoku-related to X if and only if either Y is in the same
row as X, or Y is in the same column as X, or Y in the same block as X.
Clearly, if Y is Sudoku-related to X then X is Sudoku-related to Y.

Sudoku: problem representation
For each of the cells X in Σ, and for any cell Y in Σ with Y ̸= X, we
will say Y is Sudoku-related to X if and only if either Y is in the same
row as X, or Y is in the same column as X, or Y in the same block as X.
Clearly, if Y is Sudoku-related to X then X is Sudoku-related to Y.
Each of the 16 cells has 7 other cells that are Sudoku-related to it.

Sudoku: problem representation
For each of the cells X in Σ, and for any cell Y in Σ with Y ̸= X, we
will say Y is Sudoku-related to X if and only if either Y is in the same
row as X, or Y is in the same column as X, or Y in the same block as X.
Clearly, if Y is Sudoku-related to X then X is Sudoku-related to Y.
Each of the 16 cells has 7 other cells that are Sudoku-related to it.
Two cells X, Y in Σ with X ̸= Y are independent if and only if X is not
Sudoku-related to Y.

Sudoku: problem representation
For each of the cells X in Σ, and for any cell Y in Σ with Y ̸= X, we
will say Y is Sudoku-related to X if and only if either Y is in the same
row as X, or Y is in the same column as X, or Y in the same block as X.
Clearly, if Y is Sudoku-related to X then X is Sudoku-related to Y.
Each of the 16 cells has 7 other cells that are Sudoku-related to it.
Two cells X, Y in Σ with X ̸= Y are independent if and only if X is not
Sudoku-related to Y. A set of cells is pairwise-independent if and only
if any two different cells in the set are independent of each other.

Sudoku: problem representation
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
Cell A is Sudoku-related to
cells B, C, D, E, F, I, M.
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
Cell D is Sudoku-related
to cells A, B, C, G, H, L, P.

Sudoku: problem representation
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
Cell J is Sudoku-related to
cells B, F, I, K, L, M, N.
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
Cell O is Sudoku-related
to cells C, G, K, L, M, N, P.

Sudoku: problem representation
cell X in Σ
cells Y Sudoku-related toX
A
B, C, D, E, F, I, M
B
A, C, D, E, F, J, N
C
A, B, D, G, H, K, O
D
A, B, C, G, H, L, P
E
A, B, F, G, H, I, M
F
A, B, E, G, H, J, N
G
C, D, E, F, H, K, O
H
C, D, E, F, G, L, P
I
A, E, J, K, L, M, N
J
B, F, I, K, L, M, N
K
C, G, I, J, L, O, P
L
D, H, I, J, K, O, P
M
A, E, I, J, N, O, P
N
B, F, I, J, M, O, P
O
C, G, K, L, M, N, P
P
D, H, K, L, M, N, O

Sudoku: problem representation
Sudo
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
A
0
1
1
1
1
1
0
0
1
0
0
0
1
0
0
0
B
1
0
1
1
1
1
0
0
0
1
0
0
0
1
0
0
C
1
1
0
1
0
0
1
1
0
0
1
0
0
0
1
0
D
1
1
1
0
0
0
1
1
0
0
0
1
0
0
0
1
E
1
1
0
0
0
1
1
1
1
0
0
0
1
0
0
0
F
1
1
0
0
1
0
1
1
1
0
0
0
0
1
0
0
G
0
0
1
1
1
1
0
1
0
0
1
0
0
0
1
0
H
0
0
1
1
1
1
1
0
0
0
0
1
0
0
0
1
I
1
0
0
0
1
0
0
0
0
1
1
1
1
1
0
0
J
0
1
0
0
0
1
0
0
1
0
1
1
1
1
0
0
K
0
0
1
0
0
0
1
0
1
1
0
1
0
0
1
1
L
0
0
0
1
0
0
0
1
1
1
1
0
0
0
1
1
M
1
0
0
0
1
0
0
0
1
1
0
0
0
1
1
1
N
0
1
0
0
0
1
0
0
1
1
0
0
1
0
1
1
O
0
0
1
0
0
0
1
0
0
0
1
1
1
1
0
1
P
0
0
0
1
0
0
0
1
0
0
1
1
1
1
1
0

Sudoku project refined
Design an algorithm which takes as input a 4 × 4 Sudoku puzzle,
with initial state four pairwise-independent cells assigned a
unique value in {1, 2, 3, 4},

Sudoku project refined
Design an algorithm which takes as input a 4 × 4 Sudoku puzzle,
with initial state four pairwise-independent cells assigned a
unique value in {1, 2, 3, 4},
[for example, Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3. ]

Sudoku project refined
Design an algorithm which takes as input a 4 × 4 Sudoku puzzle,
with initial state four pairwise-independent cells assigned a
unique value in {1, 2, 3, 4},
[for example, Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3. ]
and produces as output a propositional prolog program which
will solve just that puzzle, using program clauses containing only
the 64 cell value atoms of the form v_X_i.

Sudoku algorithm generating prolog program
Stage 1: Let Θ1 be the set of cells initially valued in this puzzle
[Θ1:={B, G, L, M} in example 001]

Sudoku algorithm generating prolog program
Stage 1: Let Θ1 be the set of cells initially valued in this puzzle
[Θ1:={B, G, L, M} in example 001]
and let Σ1:=Σ −Θ1 be the set of cells yet to be valued.
[Σ1 = {A, C, D, E, F, H, I, J, K, N, O, P} in example 001].

Sudoku algorithm generating prolog program
Stage 1: Let Θ1 be the set of cells initially valued in this puzzle
[Θ1:={B, G, L, M} in example 001]
and let Σ1:=Σ −Θ1 be the set of cells yet to be valued.
[Σ1 = {A, C, D, E, F, H, I, J, K, N, O, P} in example 001].
For each cell X in Σ1, we search for three cells Y1, Y2 and Y3 in Θ1
with three distinct values j1, j2, j3 (respectively), with all three of
the cells Y1, Y2 and Y3 Sudoku-related to X,

Sudoku algorithm generating prolog program
Stage 1: Let Θ1 be the set of cells initially valued in this puzzle
[Θ1:={B, G, L, M} in example 001]
and let Σ1:=Σ −Θ1 be the set of cells yet to be valued.
[Σ1 = {A, C, D, E, F, H, I, J, K, N, O, P} in example 001].
For each cell X in Σ1, we search for three cells Y1, Y2 and Y3 in Θ1
with three distinct values j1, j2, j3 (respectively), with all three of
the cells Y1, Y2 and Y3 Sudoku-related to X,
and then write the prolog program clause:
v_X_i :- v_Y1_j1, v_Y2_j2, v_Y3_j3.
where i ∈{1, 2, 3, 4} is the value not included among {j1, j2, j3}.

Sudoku example 001
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
/* Sudoku example 001 */
v_B_1.
v_G_2.
v_L_4.
v_M_3.
Θ1 = {B, G, L, M}.
Σ1 = {A, C, D, E, F, H, I, J, K, N, O, P}.

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:
v_D_3 :- v_B_1, v_G_2, v_L_4.

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:
v_D_3 :- v_B_1, v_G_2, v_L_4.
v_E_4 :- v_B_1, v_G_2, v_M_3.

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:
v_D_3 :- v_B_1, v_G_2, v_L_4.
v_E_4 :- v_B_1, v_G_2, v_M_3.
v_J_2 :- v_B_1, v_L_4, v_M_3.

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:
v_D_3 :- v_B_1, v_G_2, v_L_4.
v_E_4 :- v_B_1, v_G_2, v_M_3.
v_J_2 :- v_B_1, v_L_4, v_M_3.
v_O_1 :- v_G_2, v_L_4, v_M_3.

Sudoku example 001: stage 1
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
we generate at stage 1 the following four program clauses:
v_D_3 :- v_B_1, v_G_2, v_L_4.
v_E_4 :- v_B_1, v_G_2, v_M_3.
v_J_2 :- v_B_1, v_L_4, v_M_3.
v_O_1 :- v_G_2, v_L_4, v_M_3.
and no others, except for re-ordering: 4 ways of choosing 3 from 4.

Sudoku example 001
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
4
.
3
.
3
.
4
.
2
.
1
/* initial facts */
v_B_1.
v_G_2.
v_L_4.
v_M_3.
/* stage 1 clause heads */
v_D_3, v_E_4,
v_J_2, v_O_1.
Θ2 = {B, D, E, G, J, L, M, O}.
Σ2 = {A, C, F, H, I, K, N, P}.

Sudoku algorithm generating prolog program
Stage 2: Let Θ2 be the set of cells whose value is determinable
after stage 1
[Θ2:={B, D, E, G, J, L, M, O} in example 001]
and let Σ2:=Σ −Θ2 be the set of cells whose value is not yet
determinable.
[Σ2 = {A, C, F, H, I, K, N, P} in example 001].

Sudoku algorithm generating prolog program
Stage 2: Let Θ2 be the set of cells whose value is determinable
after stage 1
[Θ2:={B, D, E, G, J, L, M, O} in example 001]
and let Σ2:=Σ −Θ2 be the set of cells whose value is not yet
determinable.
[Σ2 = {A, C, F, H, I, K, N, P} in example 001].
For each cell X in Σ2, we search for three cells Y1, Y2 and Y3 in Θ2
with three distinct values j1, j2, j3 (respectively), with all three of
the cells Y1, Y2 and Y3 Sudoku-related to X,

Sudoku algorithm generating prolog program
Stage 2: Let Θ2 be the set of cells whose value is determinable
after stage 1
[Θ2:={B, D, E, G, J, L, M, O} in example 001]
and let Σ2:=Σ −Θ2 be the set of cells whose value is not yet
determinable.
[Σ2 = {A, C, F, H, I, K, N, P} in example 001].
For each cell X in Σ2, we search for three cells Y1, Y2 and Y3 in Θ2
with three distinct values j1, j2, j3 (respectively), with all three of
the cells Y1, Y2 and Y3 Sudoku-related to X,
and then write the prolog program clause:
v_X_i :- v_Y1_j1, v_Y2_j2, v_Y3_j3.
where i ∈{1, 2, 3, 4} is the value not included among {j1, j2, j3}.

Sudoku example 001: stage 2
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
and stage 1 program clauses with heads:
v_D_3,
v_E_4,
v_J_2,
v_O_1.

Sudoku example 001: stage 2
Sudoku example 001 with initial facts
v_B_1.
v_G_2.
v_L_4.
v_M_3.
and stage 1 program clauses with heads:
v_D_3,
v_E_4,
v_J_2,
v_O_1.
We generate at stage 2 the following eight program clauses:
v_A_2 :- v_B_1, v_D_3, v_E_4.
v_C_4 :- v_B_1, v_D_3, v_G_2.
v_F_3 :- v_B_1, v_E_4, v_G_2.
v_H_1 :- v_D_3, v_E_4, v_G_2.
v_I_1 :- v_E_4, v_J_2, v_M_3.
v_K_3 :- v_J_2, v_L_4, v_O_1.
v_N_4 :- v_J_2, v_M_3, v_O_1.
v_P_2 :- v_L_4, v_M_3, v_O_1.

Sudoku algorithm generating prolog program
Cleanup Stage: so the final prolog program can be queried for
all possible values in each cell, and we avoid the Undefined
procedure error message, we add tautologous program clauses:
v_X_j :- false.
for each of the 16 cells X in Σ and each of the three values of
j ∈{1, 2, 3, 4} that have not yet occurred either as an initial fact or
in the head of a program clause generated at stage 1 or stage 2.

sudoku-example-001.pl
/* sudoku-example-001.pl: total of 65 clauses */
v_B_1.
v_G_2.
v_L_4.
v_M_3.
v_D_3 :- v_B_1, v_G_2, v_L_4.
v_E_4 :- v_B_1, v_G_2, v_M_3.
v_J_2 :- v_B_1, v_L_4, v_M_3.
v_O_1 :- v_G_2, v_L_4, v_M_3.
v_A_2 :- v_B_1, v_D_3, v_E_4.
v_C_4 :- v_B_1, v_D_3, v_G_2.
v_F_3 :- v_B_1, v_E_4, v_G_2.
v_H_1 :- v_D_3, v_E_4, v_G_2.
v_I_1 :- v_E_4, v_J_2, v_M_3.
v_K_3 :- v_J_2, v_L_4, v_O_1.
v_N_4 :- v_J_2, v_M_3, v_O_1.
v_P_2 :- v_L_4, v_M_3, v_O_1.
v_A_1 :- false.
v_A_3 :- false.
v_A_4 :- false.
v_B_2 :- false.
v_B_3 :- false.
v_B_4 :- false.
v_C_1 :- false.
v_C_2 :- false.
v_C_3 :- false.
v_D_1 :- false.
v_D_2 :- false.
v_D_4 :- false.

sudoku-example-001.pl (continued)
v_E_1 :- false.
v_E_2 :- false.
v_E_3 :- false.
v_F_1 :- false.
v_F_2 :- false.
v_F_4 :- false.
v_G_1 :- false.
v_G_3 :- false.
v_G_4 :- false.
v_H_2 :- false.
v_H_3 :- false.
v_H_4 :- false.
v_I_2 :- false.
v_I_3 :- false.
v_I_4 :- false.
v_J_1 :- false.
v_J_3 :- false.
v_J_4 :- false.
v_K_1 :- false.
v_K_2 :- false.
v_K_4 :- false.
v_L_1 :- false.
v_L_2 :- false.
v_L_3 :- false.
v_M_1 :- false.
v_M_2 :- false.
v_M_4 :- false.
v_N_1 :- false.
v_N_2 :- false.
v_N_3 :- false.
v_O_2 :- false.
v_O_3 :- false.
v_O_4 :- false.
v_P_1 :- false.
v_P_3 :- false.
v_P_4 :- false.
/* end of file: sudoku-example-001.pl */

Sudoku solving in propositional prolog
Question: Why don’t we just write one giant prolog program
that contains all possible program clauses of the form:
v_X_i :- v_Y1_j1, v_Y2_j2, v_Y3_j3.
where X, Y1, Y2, Y3 are cells in Σ with each of Y1, Y2 and Y3
Sudoku-related to X, and i, j1, j2, j3 are all distinct and in {1, 2, 3, 4}.

Sudoku solving in propositional prolog
Question: Why don’t we just write one giant prolog program
that contains all possible program clauses of the form:
v_X_i :- v_Y1_j1, v_Y2_j2, v_Y3_j3.
where X, Y1, Y2, Y3 are cells in Σ with each of Y1, Y2 and Y3
Sudoku-related to X, and i, j1, j2, j3 are all distinct and in {1, 2, 3, 4}.
Answer: Because such a prolog program would be a giant
monster, containing almost half a million program clauses!! (a total
of 483 840 to be exact!)

Sudoku solving in propositional prolog
Question: Why don’t we just write one giant prolog program
that contains all possible program clauses of the form:
v_X_i :- v_Y1_j1, v_Y2_j2, v_Y3_j3.
where X, Y1, Y2, Y3 are cells in Σ with each of Y1, Y2 and Y3
Sudoku-related to X, and i, j1, j2, j3 are all distinct and in {1, 2, 3, 4}.
Answer: Because such a prolog program would be a giant
monster, containing almost half a million program clauses!! (a total
of 483 840 to be exact!)
Using prolog for Predicate logic [Logic: Language & Information 2]
we will have a much easier time as we can directly code up the
relationship “cell X is Sudoku-related to cell Y” and “i ̸= j”.

Sudoku example 002
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
3
.
4
/* Sudoku example 002 */
v_A_1.
v_G_2.
v_J_3.
v_P_4.
Θ1 = {A, G, J, P}.
Σ1 = {B, C, D, E, F, H, I, K, L, M, N, O}.

Sudoku example 002
% /Users/jdavoren/.plrc compiled 0.00 sec, 1 clauses Welcome to SWI-prolog
(Multi-threaded, 64 bits, Version 6.6.1-DIRTY) Copyright (c) 1990-2013
University of Amsterdam, VU Amsterdam SWI-prolog comes with ABSOLUTELY NO
WARRANTY. This is free software, and you are welcome to redistribute it under
certain conditions. Please visit http://www.swi-prolog.org for details.
For help, use ?- help(Topic). or ?- apropos(Word).
% /Users/jdavoren/prolog/prolog-code/sudoku-example-002.pl
compiled 0.00 sec, 65 clauses
1 ?-

Sudoku example 002
% /Users/jdavoren/.plrc compiled 0.00 sec, 1 clauses Welcome to SWI-prolog
(Multi-threaded, 64 bits, Version 6.6.1-DIRTY) Copyright (c) 1990-2013
University of Amsterdam, VU Amsterdam SWI-prolog comes with ABSOLUTELY NO
WARRANTY. This is free software, and you are welcome to redistribute it under
certain conditions. Please visit http://www.swi-prolog.org for details.
For help, use ?- help(Topic). or ?- apropos(Word).
% /Users/jdavoren/prolog/prolog-code/sudoku-example-002.pl
compiled 0.00 sec, 65 clauses
1 ?- v_D_3, v_B_4.
false.
2 ?-

Sudoku example 002
% /Users/jdavoren/.plrc compiled 0.00 sec, 1 clauses Welcome to SWI-prolog
(Multi-threaded, 64 bits, Version 6.6.1-DIRTY) Copyright (c) 1990-2013
University of Amsterdam, VU Amsterdam SWI-prolog comes with ABSOLUTELY NO
WARRANTY. This is free software, and you are welcome to redistribute it under
certain conditions. Please visit http://www.swi-prolog.org for details.
For help, use ?- help(Topic). or ?- apropos(Word).
% /Users/jdavoren/prolog/prolog-code/sudoku-example-002.pl
compiled 0.00 sec, 65 clauses
1 ?- v_D_3, v_B_4.
false.
2 ?- v_D_3.
true.
3 ?-

Sudoku example 002 (continued)
3 ?- v_B_2, v_C_4, v_D_3, v_E_4, v_F_3, v_H_1.
false.
4 ?-

Sudoku example 002 (continued)
3 ?- v_B_2, v_C_4, v_D_3, v_E_4, v_F_3, v_H_1.
false.
4 ?- v_B_2, v_C_4, v_D_3, v_E_3, v_F_4, v_H_1.
true.
5 ?-

Sudoku example 002 (continued)
3 ?- v_B_2, v_C_4, v_D_3, v_E_4, v_F_3, v_H_1.
false.
4 ?- v_B_2, v_C_4, v_D_3, v_E_3, v_F_4, v_H_1.
true.
5 ?- v_I_4, v_K_1, v_L_2, v_M_1, v_N_2, v_O_3.
false.
6 ?-

Sudoku example 002 (continued)
3 ?- v_B_2, v_C_4, v_D_3, v_E_4, v_F_3, v_H_1.
false.
4 ?- v_B_2, v_C_4, v_D_3, v_E_3, v_F_4, v_H_1.
true.
5 ?- v_I_4, v_K_1, v_L_2, v_M_1, v_N_2, v_O_3.
false.
6 ?- v_I_4, v_K_1, v_L_2, v_M_2, v_N_1, v_O_3.
true.
7 ?-

Sudoku example 002 completed
.
A
.
B
.
C
.
D
.
E
.
F
.
G
.
H
.
I
.
J
.
K
.
L
.
M
.
N
.
O
.
P
.
1
.
2
.
3
.
4
.
2
.
4
.
3
.
3
.
4
.
1
.
4
.
1
.
2
.
2
.
1
.
3

Exercise: prolog program clauses
For Sudoku example 002, which of the
following pairs of clauses can occur in the
prolog program generated by our
algorithm:
(a)
v_D_3 :- v_A_1, v_G_2, v_J_3.
v_H_2 :- v_D_3, v_G_2, v_P_4.
(b)
v_K_1 :- v_G_2, v_J_3, v_P_4.
v_L_2 :- v_J_3, v_K_1, v_P_4.
(c)
v_F_4 :- v_A_1, v_G_2, v_J_3.
v_N_1 :- v_F_4, v_G_2, v_J_3.

Exercise solution: prolog program clauses
For Sudoku example 002, the following
pairs of clauses can occur in the prolog
program generated by our algorithm:
(a)
v_D_3 :- v_A_1, v_G_2, v_J_3. wrong clause
v_H_2 :- v_D_3, v_G_2, v_P_4. wrong clause
(b)
CORRECT
v_K_1 :- v_G_2, v_J_3, v_P_4. stage 1
v_L_2 :- v_J_3, v_K_1, v_P_4. stage 2
(c)
v_F_4 :- v_A_1, v_G_2, v_J_3. stage 1
v_N_1 :- v_F_4, v_G_2, v_J_3. wrong clause

Next Up: How prolog Answers Queries

