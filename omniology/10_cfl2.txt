1
Parse Trees
Definitions
Relationship to Left- and 
Rightmost Derivations
Ambiguity in Grammars

2
Parse Trees
Parse trees are trees labeled by 
symbols of a particular CFG.
Leaves: labeled by a terminal or ε.
Interior nodes: labeled by a variable.
Children are labeled by the body of a 
production for the parent.
Root: must be labeled by the start 
symbol.

3
Example: Parse Tree
S -> SS | (S) | ()
S
S
S
S
)
(
(
)
(
)

4
Yield of a Parse Tree
The concatenation of the labels of the 
leaves in left-to-right order
That is, in the order of a preorder 
traversal.
is called the yield of the parse tree.
Example: yield of             is (())() 
S
S
S
S
)
(
(
)
(
)

5
Generalization of Parse Trees
We sometimes talk about trees that are 
not exactly parse trees, but only 
because the root is labeled by some 
variable A that is not the start symbol.
Call these parse trees with root A.

6
Parse Trees, Leftmost and 
Rightmost Derivations
Trees, leftmost, and rightmost derivations 
correspond.
We’ll prove:
1. If there is a parse tree with root labeled A 
and yield w, then A =>*lm w.
2. If A =>*lm w, then there is a parse tree with 
root A and yield w.

7
Proof – Part 1
Induction on the height (length of the 
longest path from the root) of the tree.
Basis: height 1.  Tree looks like
A -> a1…an must be a              
production.
Thus, A =>*lm a1…an.
A
a1
an
. . .

8
Part 1 – Induction
Assume (1) for trees of height < h, and 
let this tree have height h:
By IH, Xi =>*lm wi.
Note: if Xi is a terminal, then 
Xi = wi.
Thus, A =>lm X1…Xn =>*lm w1X2…Xn
=>*lm w1w2X3…Xn =>*lm … =>*lm
w1…wn.
A
X1
Xn
. . .
w1
wn

9
Proof: Part 2
Given a leftmost derivation of a 
terminal string, we need to prove the 
existence of a parse tree.
The proof is an induction on the length 
of the derivation.

10
Part 2 – Basis
If A =>*lm a1…an by a one-step 
derivation, then there must be a parse 
tree
A
a1
an
. . .

11
Part 2 – Induction
Assume (2) for derivations of fewer 
than k > 1 steps, and let A =>*lm w be 
a k-step derivation.
First step is A =>lm X1…Xn.
Key point: w can be divided so the first 
portion is derived from X1, the next is 
derived from X2, and so on.
If Xi is a terminal, then wi = Xi.

12
Induction – (2)
That is, Xi =>*lm wi for all i such that Xi
is a variable.
And the derivation takes fewer than k 
steps.
By the IH, if Xi is a variable, then there 
is a parse tree with root Xi and yield wi.
Thus, there is a parse tree
A
X1
Xn
. . .
w1
wn

13
Parse Trees and Rightmost 
Derivations
The ideas are essentially the mirror 
image of the proof for leftmost 
derivations.
Left to the imagination.

14
Parse Trees and Any 
Derivation
The proof that you can obtain a parse 
tree from a leftmost derivation doesn’t 
really depend on “leftmost.”
First step still has to be A => X1…Xn.
And w still can be divided so the first 
portion is derived from X1, the next is 
derived from X2, and so on.

15
Ambiguous Grammars
A CFG is ambiguous if there is a string 
in the language that is the yield of two 
or more parse trees.
Example: S -> SS | (S) | ()
Two parse trees for ()()() on next slide.

16
Example – Continued
S
S
S
S
S
(
)
S
S
S
S
S
(
)
(
)
(
)
(
)
(
)

17
Ambiguity, Left- and 
Rightmost Derivations
If there are two different parse trees, 
they must produce two different 
leftmost derivations by the construction 
given in the proof.
Conversely, two different leftmost 
derivations produce different parse 
trees by the other part of the proof.
Likewise for rightmost derivations.

18
Ambiguity, etc. – (2)
Thus, equivalent definitions of 
“ambiguous grammar’’ are:
1. There is a string in the language that has 
two different leftmost derivations.
2. There is a string in the language that has 
two different rightmost derivations.

19
Ambiguity is a Property of 
Grammars, not Languages
For the balanced-parentheses 
language, here is another CFG, which is 
unambiguous.
B -> (RB | ε
R -> ) | (RR
B, the start symbol,
derives balanced strings.
R generates certain strings
that have one more right
paren than left.

20
Example: Unambiguous Grammar
B -> (RB | ε 
R -> ) | (RR
Construct a unique leftmost derivation for 
a given balanced string of parentheses by 
scanning the string from left to right.
If we need to expand B, then use B -> (RB if 
the next symbol is “(”; use ε if at the end.
If we need to expand R, use R -> ) if the next 
symbol is “)” and (RR if it is “(”.

21
The Parsing Process
Remaining Input:
(())()
Steps of leftmost 
derivation:
B
Next
symbol
B -> (RB | ε      R -> ) | (RR

22
The Parsing Process
Remaining Input:
())()
Steps of leftmost 
derivation:
B
(RB
Next
symbol
B -> (RB | ε      R -> ) | (RR

23
The Parsing Process
Remaining Input:
))()
Steps of leftmost 
derivation:
B
(RB
((RRB
Next
symbol
B -> (RB | ε      R -> ) | (RR

24
The Parsing Process
Remaining Input:
)()
Steps of leftmost 
derivation:
B
(RB
((RRB
(()RB
Next
symbol
B -> (RB | ε      R -> ) | (RR

25
The Parsing Process
Remaining Input:
()
Steps of leftmost 
derivation:
B
(RB
((RRB
(()RB
(())B
Next
symbol
B -> (RB | ε      R -> ) | (RR

26
The Parsing Process
Remaining Input:
)
Steps of leftmost 
derivation:
B
(())(RB
(RB
((RRB
(()RB
(())B
Next
symbol
B -> (RB | ε      R -> ) | (RR

27
The Parsing Process
Remaining Input:
Steps of leftmost 
derivation:
B
(())(RB
(RB
(())()B
((RRB
(()RB
(())B
Next
symbol
B -> (RB | ε      R -> ) | (RR

28
The Parsing Process
Remaining Input:
Steps of leftmost 
derivation:
B
(())(RB
(RB
(())()B
((RRB
(())()
(()RB
(())B
Next
symbol
B -> (RB | ε      R -> ) | (RR

29
LL(1) Grammars
As an aside, a grammar such B -> (RB | ε      
R -> ) | (RR, where you can always figure 
out the production to use in a leftmost 
derivation by scanning the given string 
left-to-right and looking only at the next 
one symbol is called LL(1).
“Leftmost derivation, left-to-right scan, one 
symbol of lookahead.”

30
LL(1) Grammars – (2)
Most programming languages have 
LL(1) grammars.
LL(1) grammars are never ambiguous.

31
Inherent Ambiguity
It would be nice if for every ambiguous 
grammar, there were some way to “fix” 
the ambiguity, as we did for the 
balanced-parentheses grammar.
Unfortunately, certain CFL’s are 
inherently ambiguous, meaning that 
every grammar for the language is 
ambiguous.

32
Example: Inherent Ambiguity
The language {0i1j2k | i = j or j = k} is 
inherently ambiguous.
Intuitively, at least some of the strings 
of the form 0n1n2n must be generated 
by two different parse trees, one based 
on checking the 0’s and 1’s, the other 
based on checking the 1’s and 2’s.

33
One Possible Ambiguous 
Grammar
S -> AB | CD
A -> 0A1 | 01
B -> 2B | 2
C -> 0C | 0
D -> 1D2 | 12
A generates equal 0’s and 1’s
B generates any number of 2’s
C generates any number of 0’s
D generates equal 1’s and 2’s
And there are two derivations of every string
with equal numbers of 0’s, 1’s, and 2’s.  E.g.:
S => AB => 01B =>012
S => CD => 0D => 012

