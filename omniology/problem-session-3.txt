1 
Problem Session 3 
Half(L) 
Things More Powerful Than a 
Turing Machine 
Some Concerns About Proofs 

2 
Half(L) 
If L is any language, Half(L) is the set 
of strings w such that for some string x, 
where |x| = |w|, wx is in L. 
If L is regular, so is Half(L). 
Construction: given a DFA A for L, we 
construct an ε-NFA B for Half(L). 

3 
Construction of NFA B 
States = pairs of states [p,q] of A, plus 
additional start state s0. 
Intuition: If B reads input w, then p = 
δA(q0, w). 

q0 = start state of A. 
q is any state such that there is some 
string x, with |x| = |w| such that    
δA(q, x) is an accepting state. 

4 
Accepting States of B 
Those pairs of the form [q, q]. 
Notice: If B is in a state [q, q], then it 
has read some input w, such that  
δA(q0, w) = q and there is some input x 
with |x| = |w|, such that δA(q, x) is an 
accepting state. 
That means wx is in L(A), and w is the 
first half of wx. 

5 
Transitions of B 
δB(s0, ε) = {[q0, f] | f is an accepting 
state of A}. 
B never returns to s0. 
First move guarantees that B is in the 
correct state after having read no input. 
Notice: [q0, q0] is an accepting state of B if 
and only if ε is in L(A). 

6 
Transitions of B – (2) 
δB([p,q], a) = {[r, s] | such that: 
1. δA(p, a) = r. 
2. There is some input symbol b such that    
δA(s, b) = q}. 
(1) guarantees the first component 
continues to track the state of A. 
(2) guarantees the second component is 
any state that leads to acceptance via 
some string of length equal to input so far. 

7 
Inductive Proof That This Works 
By induction on |w|: δB([q0, f], w) = 
{[p, q] | such that: 
1. δA(q0, w) = p, and 
2. For some x, with |x| = |w|, δA(q, x) = f}. 
Complete the proof by observing the 
initial transitions out of s0 to [q0, f], 
for accepting states f, and the 
definition of the accepting states of B.  

8 
Example 
A 
q 
Start 
p 
0,1 
0 
1 
s0 
B 
Start 
[q,p] 
[q,q] 
[p,p] 
[p,q] 
ε 
0,1 
1 
0 
1 
0,1 
0 
0,1 
0 
1 

9 
Is … More Powerful Than a 
Turing Machine? 
From an early post: “Can aspect systems 
do anything a Turing machine can’t?” 
I don’t know what an “aspect system” is. 
But if it is something that runs on a 
computer, then no. 
Why? because a Turing machine can 
simulate a real computer, and hence 
anything that runs on one. 

10 
What About Quantum Computers? 
People have imagined that there will be 
quantum computers that behave 
something like nondeterministic 
computers. 
There has been some progress by 
physicists on communication via 
quantum effects. 

11 
Quantum Computers – (2) 
The physics of quantum computers is 
suspect. 
These would have to be enormous to 
isolate different bits of storage. 
But even if you had a quantum 
computer, it could still be simulated by 
a nondeterministic TM, and thus by a 
deterministic TM. 

12 
Can One PDA Stack Simulate Two? 
I claimed one could not, but I never 
proved it. 
If you try, you can’t but that’s no proof. 
Precise definition needed: A 
construction whereby one PDA P is 
constructed from two others, P1 and P2, 
so P accepts the intersection of the 
languages of P1 and P2. 

13 
Proof 
Assume such a construction exists. 
Let P1 be a PDA that accepts {0i1j2k | 
i=j>1, k>1 } and let P2 be a PDA that 
accepts {0i1j2k | j=k>1, i>1 }. 
Then P would accept L = {0i1i2i | i > 1}. 
But we know L is not a CFL, therefore 
has no PDA accepting it. 

14 
Proof – Continued 
We assumed only one thing: that we 
could construct P from P1 and P2. 
Since the conclusion, that L is a CFL, is 
known to be false, the assumption must 
be false. 
That is, no such construction exists. 

15 
Behind the Curtains of the Proof 
First, we assumed that if a statement S 
implies something false, then S is false. 
That seems to make sense, but it has to 
be an axiom of logic. 
Why? “proof” would be “by contradiction,” 
thus using itself in its proof. 
Aside: similarly, a “proof” that induction works 
requires an inductive proof. 

16 
Behind the Curtains – (2) 
We also made another assertion: the 
assumption “you can simulate two 
stacks with one” was the only unproved 
part of the proof, and therefore at fault. 
Argument used many times in the course. 
But there were many other steps, some 
glossed over or left for your 
imagination. 

17 
Proofs as a Social Process 
If there were another unproved point, 
then my proof of  “one stack can’t 
simulate two” would not be valid. 
But proofs are subject to discussion 
and argument. 
If someone has a point they doubt, 
they can bring it up and it will be 
resolved one way or the other. 

18 
Aside: Social Processes – (2) 
Many years ago, Alan Perlis, Rich 
DeMillo and Dick Lipton published a 
paper arguing: 
Proofs can only be believed because smart 
mathematicians will examine them and find 
flaws if they exist. 
Proofs of program correctness are boring, 
and no one will bother to examine them. 

