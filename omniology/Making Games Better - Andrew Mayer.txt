
 
 
With the exception of limited sections for use in promotions and reviews, no
part of this book may be reproduced, scanned, or distributed in any printed or
electronic form without permission.
 
Illustrations by Will Guy
www.goopymart.com
Editing by Mary Rudy
www.maryrudy.com
 
Thanks to all my readers for your support
 
 
Discover more at:
www.levelupdesign.com
 
Twitter: @mediashifters
https://www.facebook.com/LevelUpDsgn/


CONTENTS
CONTENTS      3
INTRODUCTION      6
YOUR INTENTION      9
YOUR PURPOSE      9
YOUR PLAN      10
YOUR VISION      11
PART 01 DESIGN IN PRODUCTION      13
MAKING YOUR GAME      14
KNOWING YOUR PLACE      17
WHAT IS A GAME?      18
DEFINING INTENTIONS      22
WEAVING YOUR WEB      24
PART 02 DESIGN IN PROCESS      27
THE PHASES OF PRODUCTION      28
DESIGN IN PRODUCTION      29
DEFINING THE STAKEHOLDERS      32
PREPRODUCTION      35
DEFINING THE FANTASY      35
REDEFINING REALITY      37
CRAFTING YOUR PREMISE      39
PAPER PROTOTYPING      43
THE CONCEPT DOCUMENT      45
THE PROOF OF CONCEPT      48
PLACES TO GO      48
PEOPLE TO MEET      48
THINGS TO DO      49
YOUR MEDIUM IS THE MESSAGE      51
THE PLAYABLE PROTOTYPE      55
PRODUCTION      62
DOCUMENTING YOUR DESIGN      62
THE GRIND      65
SUCCESS IN THE GRIND      68
THE BIG SHIFT      73

THE FIRST PLAYABLE      76
THE CRUNCH–DELIVERING THE GAME      86
HOW LONG IS THE CRUNCH?      88
YOU CAN’T “ALWAYS CRUNCH”      89
POLISH—FINISHING THE GAME      93
THE PITFALLS OF POLISH      99
POST PRODUCTION      101
LAUNCH & BEYOND      101
THE POWER OF PLATFORM      103
THE DASHBOARD      105
PART 03 KEYS TO GREAT DESIGN      107
UNLOCKING THE KEYS      108
DESIGN      109
COMMUNICATION      114
PROCESS      116
PART 04—OVER THE CUTTING EDGE      122
STEPPING BACK      123
READY FOR THE FUTURE      124
RISING TO THE COMPETITION      125
PREPARING FOR IMPACT      126
AFTERWORD      129


INTRODUCTION
After designing and producing video games for 20 years, I hit a wall. My big,
bold, new ideas were coming as fast and furious as ever, but when I thought about
what it would take to develop an innovative game idea from concept to reality, I no
longer saw a process that would allow me to get the ideas into the hands of an
audience. And even if I could, I no longer believed that there was any way to do it
successfully and profitably.
I still cared about the games (although I found myself playing fewer of them
than ever before), but after a great run making casual titles in the early 2000s, I
decided I would be better off being a creative consultant. That went great for 5
years, but I’d just finished 2 gamification projects where the clients seemed to be
so concerned with their business model that they were utterly unconcerned
whether their users were getting any genuine joy out of the experiences they were
having. It was a fight that I didn’t want to have again.
Meanwhile, it seemed like the big ideas, big dreams, and big entertainment that
had driven the industry up until that point were being entirely replaced by big
data and big money. Making corporate games no longer seemed like a way that a
designer could really make a difference.
Sure, there were indie titles, lots of them. And many of them needed help. But
being an indie meant that they had lots of passion and very little money, and
passion doesn’t pay for consultants.
As I began to look around, desperately trying to figure out what I was going to
do next, I realized that I had been spending so much time and effort figuring out
what it meant to be a game designer, that during my entire career I’d never really
sat down and spent time studying what it actually meant to be any kind of
designer at all.
That was my Pinocchio moment:  Had I ever actually been a “real” designer, or
just a game designer?
Had I spent the bulk of my adult life being a dancing puppet in a profession
that seemed to go out of its way to avoid letting designers actually design their
projects?

And even if I was a real designer, was I a good one? Did I really have the skills
and talent necessary to consider myself a peer of famous figures like Steve Jobs
and Charles and Ray Eames? Was there more to my skill set than the mantra of
“make money and have fun” that had been my main design mandate for the last
two decades?
After some extended navel gazing, I decided that if I was going to climb out of
this hole of self-doubt, I’d need to start by looking into what those other designers,
in perhaps greener pastures, were doing and compare it to my own experiences in
the gaming industry. Since the 90s, I’d spent the majority of my time working on
“mainstream” games on unstable platforms filled with big egos, broken
technology, and rabid fans.
But where to start?
When I’m unsure of something, I almost always begin by looking for a good
definition. The best way to do that is to look it up in the dictionary.
Some part of me believed that if I could just discover what that ultimate
definition of design was, then I would be able to design all the things perfectly.
And once I was designing the best things ever, everybody would love them because
they are perfect, and praise me for making the best stuff ever.
My dreams were quickly dashed when I discovered that not only is there is no
master definition of design, but just about the only thing two designers tend to
agree on is that the other one doesn’t really know what they’re talking about. At
that point I decided to come up with my own definition of design, and after
scanning through numerous online resources I found one in the Oxford Dictionary
that sounded fairly close to the way that I look at design. The Oxford Dictionary
defines design this way:
Purpose, planning, or intention that exists or is thought to exist behind an
action, fact, or material object.
I liked that particular definition for a number of reasons. First, because it uses
the word intention, which is a key part of my design process. Second, because the
phrase thought to exist strikes me as a nice note of uncertainty in a world of
people who are all too often sure that their particular idea about the way things
should be done is somehow the way it must be done.
I’ll admit that I used to be one of those people, even though after having so

many of my “must do” ideas thrown onto the scrap heap faster than a CEO
dropping his 2-year-old iPhone, I’d learned that purpose, planning, and intention
aren’t the only things necessary to make a worthwhile design.
That said, I think that instead of or, it should be and, as in purpose, planning,
and intention. My experience tells me that as a designer you must be skilled in
using all three of those elements if you’re going to make your designs work. And as
you read through this book, you’ll see all three of those elements appearing in one
way or another in every phase of development.
Now that I was armed with a practical definition of design, I decided to see
what would happen if I took my tools of creation and applied them to the process
of design itself.
But when I tried to apply that “pure definition” to actual products, it never
quite worked out the way I expected. In fact, the more I tried to create that
ultimate plan, the more I just seemed to confuse myself and make everyone else
angry.
The more energy I put into trying to design a pure process of design, the more it
seemed to just expose the reality that even with a vision so glowing and brilliant
the world was clearly going to be doomed without it, there were still fundamental
truths about designing a game that seemed to be resistant to applying that same
genius to the process itself.
Then it dawned on me: Even if you can come up with a simple definition for
design, it’s that mess of contradictions and compromises that constantly threaten
to tear your engine of inspiration apart.
That meant my lack of confidence wasn’t a symptom of a problem; it was the
problem. Because the moment you take your brilliant ideas and start trying to
determine not just what you want to create but how you’re going to make and test
it, that’s when the trouble starts.
It’s not design itself but the process of design that’s always going to be the most
difficult part. And to do it right, a designer needs all those three things listed in the
Oxford dictionary definition: purpose, planning, and intention.
As I see it, it’s intention that gets you started, purpose that keeps you moving
forward, and planning that keeps your design (mostly) heading in the right
direction. Keep that in mind, and with a lot of luck (and far too much work), you’ll

eventually get to your destination—even if where you end up isn’t even remotely
close to where you had originally intended to go.
So what are those elements, really?

Your Intention
Your intention is what most people think of when they think of design.
Intentions describe the fundamental elements of what it is you want your design
to do successfully.
Having well-defined intentions can not only help you to make decisions about
how to best express your ideas through gameplay, but also allow you to gain a
better instinct for how those choices will affect your user.
Properly defining those intentions so that you know when you’re picking the
right elements isn’t something a lot of designers focus on, but it’s fundamental to
the skills of a seasoned designer and one of the things we’ll be discussing a great
deal in the pages that follow.
I’ll mention it again, but for now, all you need to keep in mind is that your
process will always have an effect on your design, and vice versa.
Understanding how to break down gameplay into individual elements is also
important (especially when you’re starting out), and there are now so many
fantastic books that break down gameplay into these fundamental intentional
elements of gameplay that I’ve listed some of the better (and more
comprehensive) of those books in the back of this volume. But if you’re looking for
a title that’s going to help you understand why and how the particular gameplay
elements of Pac-Man still work after 25 years, this may not be the book for you.
If you’re looking for the tools that will help you get better at making those kinds
of determinations an integral part of your tool set, then I invite you to read on!

Your Purpose
The fact that you’ve read this far means you have at least a sense of the drive
that you’ll need to get you through the hard times. And as an experienced game
developer, I can promise you there will be plenty more hard times to come!
Because there are now so many great tools for making games out in the world,
the barrier to entry has dropped far below where it was when I started out. When
even figuring out the technology you needed to start making a game was a
challenge, gathering together a sense of intention was a fundamental gate to
making games at all.
Modern designers need less pure intention to get going than they used to, but
there are now so many people out there making so many good games that it can be
easy for the truly great ideas to get lost among all the mediocre ones.
Having a strong sense of purpose is a powerful way to help your game rise
above the rest.

Your Plan
The fundamental unit of design is the idea, and I’ve always had a lot of them. In
fact, whenever someone asks me “where do your ideas come from,” I always reply,
“how do you make them stop?”
My mentor, Rob Fulop (creator of Demon Attack, the original indie game), once
told me that having a new idea every day is the fundamental skill of a great
designer. It’s a lesson I’ve never forgotten.
But what Rob couldn’t prepare me for is the tragedy of discovering that most of
your great ideas are never going to go anywhere, and it’s often the ones you least
expect to succeed that will have the biggest impact.
One of the things that drive us to become a designer is the power of our ideas:
They’re so bold and bright—so unique and powerful—that they’re almost
impossible to ignore.
But being able to successfully design a game is about far more than just having
the ability to have a “big” vision.
When you’re starting out and still helpless against the power of your own
vision, it can be easy to believe your ideas are flawless and that the goal of game
development is to somehow navigate the minefield of critics that are threatening
to blow your vision apart. But as you’ll see in this book, in every step of the process
of design, those “brilliant” ideas will be under attack.
And even if you can come up with a new game every day, or even every hour, it’s
important to understand that powerful ideas are just the foundation of what it will
take for you to survive the process of design.
What’s far more difficult to build, and what no one has when they start out, is
the experience necessary to transform those ideas into a plan of action.
What makes an experienced designer so valuable is the ability to transform
feedback into action: to take the very things that seem to fundamentally threaten
your concept and transform them into action and opportunities that will let you
make your design better than ever before.

Your Vision
After spending two years reading, discussing, and writing about design, I 
realized that my struggles don’t mean that I love design any less than I did before, 
but I do think about it differently.  I’ve come to understand where my skills as a 
designer of interactive entertainment fit into the larger constellation of what a
designer is and does.
A big part of that understanding is recognizing that the skills and experience of
a designer don’t simply age, they also get deeper and more complex.
Understanding how to master and direct that complexity is one of the lessons that
every designer (of any kind) must face when they begin their career and then
master over and over again if they intend to continue to take their visions to
reality long after the initial burst of blinding inspiration has faded away.
Whether you’re an indie designer just starting out, a cog in a corporate
machine, or an old-school visionary, my intention is that this book will bring some
clarity and depth to you own process of design.
Constantly reinventing your own experience and understanding of your design
skills will give you the tools you need to make not just your first game, but your
second, your fifth, and all the experiences you’ll develop in the history of your own
career!
Game design is real design. But because what we’re designing is entertainment,
we’re forced to rely on abstract constructs and self-contained goals.  That means,
unlike many other design disciplines, we often don’t start out knowing what we’re
making (or even who we’re making it for). Instead, we have to rely on our process
to define our outcome.
That purity is both an advantage and something that exposes us to huge risks at
every step of the way.
Experience has taught me methods for dealing with those risks that I couldn’t
have guessed I would ever need when I was just starting out. It’s also a constant
reminder that there is no “perfect” way to design anything. There’s no ultimate
right way to make any single design choice. Instead, every choice you make opens
up a whole new set of questions, and every direction you head reveals new
obstacles in your way.

My hope is that this book will help make the journey through that process a
whole lot more fun and just a little bit easier.
— Andrew Mayer
Portland, OR 2016


PART 01
DESIGN IN PRODUCTION
 

 

Making Your Game
Games come and go, but play—play never changes.
Every time we play a game, there’s an itch that we’re looking to scratch. It’s a
unique desire that can only be fulfilled by diving into an alternate reality: to use
our imaginations to lose ourselves in a captivating experience. Inside those crafted
worlds, we struggle to reach new levels of achievement through manipulating an
abstracted version of ourselves inside the game world.
It’s that satisfaction of our need to escape our lives that makes a game “fun,”
and our desire to achieve that makes it addicting. Done right, a great video game
can offer a player entertainment that provides satisfaction far beyond any other
medium in history.
We are playing a game when we focus our attention on a crafted reality
designed to allow us to escape from the “real world” into one where our options
are limited and our outcomes are clear.
For most gamers, simply engaging with that fantasy of power and control is
enough, but some of us want more. After thousands of hours of play, some of us
are no longer satisfied with simply being a player. Instead, we find that our
thoughts have become haunted with visions of our own unrealized virtual worlds.
We want to play in a reality of our own design. We dream of having our vision
celebrated in the same way we’ve celebrated the vision of every game we’ve ever
loved. That desire to take back our experience and to craft our own unique
realities—to be the supreme deity of a virtual world—is at the core of what the
desire to design a game is all about.
The sheer difficulty of actually accomplishing your dream, and the amount of
ego needed to even attempt it, reveals game design to be a fundamentally insane
pursuit.
Intending to create any game is a herculean task. Creating a successful one is
practically impossible. We live in a world flooded with entertainment. The idea
that anyone should be making any more of it is hubris at best. The idea that you
should be the one doing it is a special kind of madness. And yet, thousands and
thousands of us still decide to do it every day!

As a designer and a consultant for over two decades, I’ve told hundreds of
people that their best option for happiness and satisfaction in the game industry is
to forget about creating games and just keep playing them.
When you’re playing a well-made game, your reward for success is guaranteed.
What few (if any) of the people who delude themselves into wanting to create a
game can understand before they begin the process is this simple truth: Playing a
game is nothing like making one.
Most of the instincts, insights, and intuitions that we rely on to be expert
players not only aren’t relevant to the skill set of creating a game, but will actively
interfere with the discipline it takes to design a best-selling product.
It’s easy to believe that the massive amount of time you’ve spent playing games
is teaching you game creation, but that’s not the case. A strong foundation in the
fundamentals of web design will probably get you a lot farther as a successful
game developer than the thousands of hours you spent putting Mario through his
paces. That’s because understanding design as a process will get you a lot farther
than simply being able to criticize and deconstruct a game.
Sure, there are some exceptions: Pro game players, for example, often make
surprisingly good designers. But considering how quickly technology changes, and
the fundamental discipline it takes to critique your own work, there is often only a
very small crossover between the skills of an exceptional player and the instincts
of an exceptional designer.
One of the most fundamental instincts you won’t learn simply from playing a
completed game is that the process of design isn’t simply about understanding the
way things break it’s also about improving the process that makes them work.
Criticism is a useful tool for tearing ideas apart, but your ability to add insight that
lets you put it all back together and make it work better than before.
As a developer, one of your main tasks is to elegantly camouflage the struggles
and limitations of the software from your player. Until you can learn how to not
only embrace, but celebrate, the flaws in your user experience, you’re probably not
going to be able to craft a truly transcendent game.
Software development does begin with big, beautiful ideas, but learning the
fundamentals of process means coming to terms with the need to be constantly
testing and reinventing those ideas. Finding elegance in compromise is at the core

of turning a brilliant idea into an elegantly crafted piece of interactive
entertainment.
Unfortunately, the bottom-up approach tends to support the belief that the best
path to making a game is playing one and that by continually reviewing and
discussing specific dynamics you can learn the methodology of making a
successful game. What the deconstruction method misses entirely is that it’s the
mentality of the designer that’s often the most important element in getting a
game through a full production process.
Unlike an adventure game, every problem you face in the design process
doesn’t have a clear solution (or reward you with experience points). Instead, you
need to learn and practice the skills necessary to understanding how you can
weave your ideas into a concept that will strengthen and focus your core vision
while allowing you to remain flexible enough to deal with the constant challenges
and compromises that come in every phase of development.
It’s the nature of technology to be constantly lowering the barriers to entry.
Whether it’s producing music, books, art, websites, or software, the challenge
shifts from having access to the tools you need to finding new and innovative ways
to use them.
It’s now easier than ever to start making a game, but developing the discipline
needed to complete a unique interactive experience has become more challenging
than ever before. In the modern software landscape, things are shifting so rapidly
in terms of content, platform, monetization, and user expectations that even
following a path that clearly led your previous project’s success a year or two ago
won’t necessarily get you the same results. To put it another way, there’s only half
a decade between Pac-Man Championship and Pac-Man 256, but the strategies
and goals presented in those two games couldn’t be more different. (And if you
don’t get what I’m talking about, I suggest you try playing both and discover just
where the difference lies.)
Building an engine for human attention and play takes a lot more than just
ideas. Your vision is the fuel that powers the creative production process, but the
ability to quickly modify any element of your game in a way that improves the
experience is the engine of design.
One of the most truly transformative moments in the career of any game

designer occurs when they stop focusing on making what they believe will be great
entertainment for themselves, and instead find satisfaction in crafting something
that will truly entertain their audience.
A well-designed interactive experience is always concentrated and shaped by
the process that created it. And when you’re deep in that process, it can be easy to
lose the perspective needed to make sure the core of your vision remains intact.
As a designer, you’ll need to keep improving your game’s core experience while
navigating the waterfall of ideas and critical feedback that come from both the
other people making the game and the people playing it.
To put it another way, it isn’t a great idea that’s fundamental to making a game
great; it’s the ability of the designer to navigate the process.
By deepening your understanding of how the designer’s job changes through
the process of game production, you’ll build the temperament and tools you need
to craft an amazing game.

Knowing Your Place
Depending on the game, a designer may be a vital part of a team as small as 2
or 3 developers, or one small cog in a massive machine involving hundreds of
people. The designer’s job responsibilities will change depending on the size of the
team, but much of the process remains the same no matter how many people are
working on your game.
There are many larger projects out there, but even on larger teams designers
tend to work best when they’re able to interact directly with smaller groups
(usually project and content leads).
No matter where you currently are in the software production chain, from indie
rebel to corporate stooge, it’s important to remember that the first step in the
process of making games better is building an effective platform for
communication. Whether it’s about connecting with your team or your user, if
you can make the quality of communication your north star, you’ll always be
sailing in the right direction.
That can be more difficult on a larger team. During the first decade of the 21st
century, it seemed as if team size was only going to grow and grow, with
innovation in game design being replaced primarily by higher-quality content.
My personal belief has always been that the majority of genuine innovation in
gameplay happens with teams of 15 or fewer developers, and over the past decade
I’ve seen that belief validated as casual, indie, and mobile gaming has grown and
smaller teams have moved back into the spotlight.
Wherever, however, and with whomever you’re working on your project, it’s
vital that you share a clear picture of how your vision works with your project and
your team.
With that in mind, I’ll be focused on small-team development, although many
of the techniques discussed here will still be useful if you’re a level designer on a
corporate megaproject of 100+ developers.


What is a Game?
Whether we can express it or not, everyone who is called to make games
innately understands that it’s the power of user agency that makes interactive
entertainment utterly unique when compared to linear media.
As a designer, it’s vitally important that you have a personal definition of what a
game is, and what it isn’t.
But describing what it is that makes a game a game (and when it isn’t one) has
proven tricky. Many things that are accused of not being games (choose-your-
own-adventure books, for example) actually are.
Many people try to avoid the issue of what is and what isn’t a game by making
the definition ambiguous, giving the design community dangerous phrases such as
“anything that wants to call itself a game can be a game.” Even if that were true
(and it isn’t), how would it help you to make better interactive experiences?
Worse still is any attempt to define games with a vague pronouncement that
they need to be “fun.”
When you look up fun in the dictionary, you’ll find it defined as “mirth or
amusement.” Interesting, but not useful for design purposes.
In order to succeed, a game must be fun for someone. But every game must be
fun, which makes fun a nebulous word that few people understand and even fewer
people know how to genuinely describe. In the context of games, it’s also often
abused by people trying to find a way to present a personal preference as serious
critique. Since every game should have the minimum required amount of fun,
trying to critique a game by saying that it needs to have more of it is a sucker’s
game.
Luckily, we’ve had some better attempts at defining fun over the past decade.
Raph Koster, in his classic book A Theory of Fun, defines it this way: “Fun in
games arises out of mastery. It arises out of comprehension. It is the act of solving
puzzles that makes games fun. With games, learning is the drug.”
That definition is useful for defining the general feel of an interactive
experience, but it’s also still a bit too vague to act as a tool that a designer can use
to better understand and craft an entertainment experience.
My suggestion is that designers avoid using the word at all, as it seems to only

complicate the conversation.
But once “fun” is no longer on the table for our definition of game, we need to
find some new words to use.
Many dictionaries lean on the word competition in their definition of games, so
how does that work for us here?
Before video games existed, competition usually meant that humans were
pitted against one another in some kind of arena where the rules could be
enforced—either by the participants or (in more professional environments) by a
referee. Puzzles, on the other hand, weren’t really games at all. (Crosswords are
still “done,” not “played.”) You could solve puzzles competitively in an arena, but
just because you’re competing to solve a Rubik’s Cube the fastest doesn’t mean
that the activity of spinning a Rubik’s Cube is actually a game (although you are
playing with it).
In interactive entertainment, you’re often playing against the game itself in a
world where the “ideas” or rules behind the game you’re playing are more than a
set of goals agreed on by the participants; they’re fundamental laws of the artificial
reality where you play the game.
Video games aren’t an arena—they’re an environment for play. They
simulate a place where a set of hard limits and limited interactions totally define
the rules and the player goals.
As I’ve observed players interact and looked at reams of player data, it’s become
obvious that the primary entertainment value comes when players learn how to
optimize the way they play to receive the maximum reward for the time they’ve
invested. It also comes from being presented with a series of challenges that are
keeping them from that goal and doing it in a way that allows the players to
determine how to overcome those challenges using the tools that the game gives
them.
Given those criteria, I think I’ve come up with a single catchall description that
captures the nuance of the entire bewildering tsunami of what it is we define as
games in the modern era:
A game is the experience of intentionally crafted artful frustration.
It’s those last two words, “artful frustration,” that are the most important in this

definition. In order to turn a simulation into a “game-like experience,” developers
must not only put effort into defining a clear goal or victory condition but also
define obstacles (in terms of rules and/or dynamics) that impede the player (fun!)
in their quest to reach that goal, and do it in a way that feels both reasonable and
intentional.
It doesn’t matter whether the artful frustration that the player is experiencing is
being expressed through a puzzle game where there is only a single specific answer
to the problem or as an open world where there are enough unique “emergent”
solutions that the player will feel as if “anything is possible.”
In all cases, the players must clearly understand that the game will give them a
series of challenges that they feel compelled to overcome along with the tools they
need to beat them.
It’s the game designer’s job to strip away as many of the unnecessary elements
that stand between the player and the core experience of the game.
Looking at design through the lens of artful frustration can provide insight into
many different areas of gameplay. It’s a phrase that can effectively tie together two
disparate experiences like poker and a role-playing game (RPG), revealing why
they are both considered games and exposing the experiential DNA that they both
share.
As a definition, artful frustration describes how the players should engage with
a game’s design elements, from the first second of interaction through the
minutes, hours, or days that will elapse before they’ve either completed the
experience or simply decided that they’re ready to move on to a new one.
It also can give us insight into how a single broken (un-artful) interaction can
transform hours and hours of positive experiences into genuine frustration. Any
time a player either attempts to solve a problem that was not actually intended to
be simulated in the game (trying to unlock a door that has no key, for example) or
realizes that their efforts will go unrewarded (taking tools away from the player
instead of giving them more), they may be so frustrated that they’ll never come
back to the game again. The Zelda series, with its constantly tiered revelation of
new challenges and clearly useful tools is a great example of a game series that has
lasted for years by carefully balancing artful frustration.
If you can balance your obstacles, goals, and tools in such a way that the

experience perfectly straddles the line between annoying and rewarding, you will
have turned your player into a fan for as long as you can maintain that balance.
(E-sports are an impressive new high-water mark in maintaining that peak
experience through layers and layers of internal and external goals and status
rewards.) On the other hand, the moment your game becomes too frustrating, the
player will close your game, never to play again; it will be that final, unsatisfying
experience that will define their memory of the game.
Crafting how your target audience will interact with your simulation and then
successfully maintaining the balance between frustration and reward for the
duration of that experience is the skill that truly puts the word game into game
designer.
Of course, like everything in software development, doing it successfully is a lot
tougher than it sounds, and it doesn’t sound easy.

Defining Intentions
One of the easiest ways to derail any process is to have the people involved
using the same word with different meanings. That general lack of shared
definition around important concepts is, I think, one reason why so many
technical people start to roll their eyes when more emotional or abstract words
crop up in business environments.
But having a way to discuss abstract ideas is important, and I believe that along
with premise and vision, intention is a word that becomes more useful the more
explicitly you define it. One of the reasons for that is that people often assume that
they’re all using the same unspoken definition, when actually everyone is using
whatever meaning they’ve managed to pick up over time.
To avoid that confusion, I’ll share a deeper definition of the word with you; it’s
the meaning that I’m using throughout this book:
A fully formed intention is a thought or statement that defines an intended
goal, describes who it’s for, and includes the method or medium you plan to use to
express that outcome.
A well-formed intention should be, whenever possible, something that can be
stated simply and easily understood by other people when you say it aloud.
It should be focused on the quality of your experience, not the quantity of it. It
should also be a statement of will: “I can” or “I will” do this thing. Avoid
statements of morality, such as “I should” do this or that.
Your intention doesn’t need to cover every detail in order to be an effective tool
for communication. Forming an intention is a process within the larger process of
design. As you communicate your intention to people who are invested in the
outcome, they’ll naturally respond to your ideas and help you add focus to the
message.
Here’s an example of a well-formed intention for a game: “I will design
and program a fighting game about love for single men that will challenge their
preconceived notions about romance.”
Your goal is to make a game. Your method is “designing and programming.”
Your audience is single men.
Most of us get by every day with stating hazy concepts and lazy definitions. The

problem comes from using those definitions to hide our intended meaning rather
than communicating it. In a production environment it can be that lack of clarity
that will take down what would have otherwise been a successful intention.
Whenever you see the word intention used in this book, take a second to check
in with yourself and determine what, in that moment, your complete intention is
in relation to your design and your creativity, in terms of both method and goals.
Doing so will, I believe, help your design in numerous ways, both obvious and
subtle.
For a game designer, there is probably no simpler tool than a clearly
communicated intention to improve the project you’re working on and gain clarity
into the impact of your own ideas.

Weaving Your Web
Generating and crafting ideas is a big part of game design, and one of the key
skills that the designer brings to the table is not just knowing what the game does,
but understanding the impact that every element of the game can have on every
other element in the game.
Obviously, it’s impossible to be completely omniscient, but when it comes to
tracking and defining the experience of the game, as the designer, you should
sit like a spider in the middle of a web, prepared to run out and deal
with any and all emergencies, opportunities, and crises that collide
with your vision during the production process.
To do that effectively means always having a solid vision of the game’s
fundamental structure in your head. No matter how many things go wildly wrong
(or wildly right) during the production process, it’s your job to keep that structure
stable. You’ll need to be the project’s greatest advocate no matter what challenges
it faces because you may be the only one who’s paying attention to the overall
structure of the game itself.
Whether the problems your project faces are professional, personal, creative, or
structural—it’s your job as the designer to keep communicating what it is you’re
creating to everyone involved in the process.
A failure to advocate for your game at a crucial moment can transform a small
crack in the road into a project-killing sinkhole. While “just in time” development
processes have brought many benefits to the production process, those, along with
the rise of data-driven design, have made it more difficult for designers to get their
more abstract solutions acted on. You’ll need to be able to clearly express not only
your ideas, but also the issues that have driven you to express them. Make sure the
entire team is aware of what the solution to every problem looks like from the first
implementation of the first idea to the final version of your launch build.
Whether the project is a straight up clone or a wildly inventive indie title, games
involve creativity and innovation. That process is always risky, but as long as the
designer is able to work with the producer to transform their ideas into actions
that provide structure and goals for everyone on the project, over time the team
will develop the instincts they need to support the designer in building a unified
vision. In return, the designer must constantly be delivering what the team needs

to succeed and keep the project moving forward.
Trusting the designer with creative responsibility also creates a sensible way to
know when to reexamine and revise broken game dynamics before the team’s
goodwill and enthusiasm, and the budget, have been burned out.
Too often, designers are intentionally cut off from the assistance and support
they need to apply their creative vision to the project in every phase. Instead of
helping the team confront structural problems with creative solutions, the
designer is made a convenient scapegoat after things fall apart, only furthering the
narrative of the “out-of-control creative” that was responsible for killing the
project in the first place.
 


PART 02
DESIGN IN PROCESS
 

 

The Phases of Production
One thing that can take new designers numerous projects to fully understand is
that a game gets a great deal of its shape from the process that created it. Your
production process is a mold for your game, and how your team chooses to build
your game will be reflected in the nature of the final project.
Every company and/or team uses a different structure for development. Team
members, titles, resources, pipelines, milestones, meetings, approvals, and many
other elements of the production process will often shift before, during, and after
development. That’s one reason that, often, every game from a large developer has
a similar feel, despite the games themselves being in vastly different genres.
Even if your process is rigidly defined and managed from the highest corporate
levels, it turns out that everyone does things a little bit differently every time, often
following the latest trendy “innovations” in production.
The fact that the methodologies for software development change so often
should be proof that even the most rigid production methodologies really aren’t
the “ultimate solution” they’re often sold as. Flat methodologies such as Kanban
and Agile do take that into account, but they usually fail when combined with the
goal-driven “user stories” that form the basis of those development methods.
The main reason for that is when it comes to entertainment, “design driven”
isn’t easy to pin down. Artful frustration isn’t a desire that your user will know
how to express clearly, and it’s up to the designer to set the intention. Then, once
you’ve reached the prototype stage, you can test your ideas early and often to
make sure that the result you’re hoping for is the one that the user is actually
going to get.
Although there have been big changes to the production methodologies used
over the last couple of decades, the fundamental role of the designer has remained
the same: The designer sets the vision; the producer defines the tasks; and the
team builds the application and assets. It’s only at that point where you’re putting
your project in front of the user that you can begin to truly understand the value of
what you’ve created and adjust the schedule accordingly.
With that in mind, rather than focusing on any single “best” process of design,
I’ve broken this book into sections based on the several phases of production that I

believe every project must go through.
These chunks probably won’t match up with the milestones listed on your
production schedule or your Agile sprints. And there are few companies forward
thinking and/or foolhardy enough to list “grind” and “crunch” as milestones on
their schedule, but those things happen on almost every project just the same.
Your individual experience will vary, of course, but I believe that having a
realistic roadmap is a far better way to get where you’re going than just driving
down the freeway and assuming that it’s going to get you to where you want to go.

Design in Production
If at any point my description of a project in crisis begins to sound a lot like
what your game is going through, don’t panic. Every game goes through multiple
periods of crisis before release, and that’s absolute proof that every crisis isn’t
fatal. They are, in fact, necessary to the process, and it’s the moment when a
project comes back from the brink of disaster that’s often exactly the same
moment it begins to truly succeed.
On the other hand, if your crazy train has already gone off the rails, it’s
important to accept that it wasn’t your ideas that were at fault—it was the process
that was used to realize them.
Great ideas are at the core of every great game, but they’re not (by themselves)
enough to make sure that your game will be a success. Modern software
production demands that your idea, the tools, and the process you’re using all
mesh in order for your project to succeed.
For every game that successfully survives the development process to appear on
its intended platform, there are thousands of other projects that have stalled,
crashed, or exploded before they ever got close to being launched.
And even if your project does manage to make it all the way to release, almost
500 games are released daily on the Apple App Store alone, and only a fraction
will turn a profit. There are no guarantees that your game will be one of them.
The reasons for that are as varied as the games themselves, but one of the
interesting side effects of crowdfunding platforms like Kickstarter and Indiegogo
is that it has allowed nonprofessionals the opportunity to gain insight into some of
the common trials and tribulations of the development process that were
previously known only to the developers who suffered through them. I won’t name
names, but searching “failed Kickstarter games” will reveal countless examples of
poorly planned games that have collapsed due to issues of bad team building,
improper planning, poor design, lack of preproduction, and all the other issues
that have plagued game development since the earliest days of Atari. Don’t be
afraid to peer into the void; the game that peers back at you could be yours!
As a designer who has worked on dozens of projects, it’s been interesting to
watch backers with little or no actual experience attempt to solve problems (and
cast blame) on these projects without having any genuine insight into the often

complicated stew of technology, finance, creativity, and politics that form the
standard ingredients in the recipe for failure.
As painful and unexpected as the experiences were, the issues that took down
almost every doomed project I’ve ever worked on were always blindingly obvious
in retrospect. Once the flaws had been revealed, it was obvious that the project
had been in trouble from the moment it was given a green light. In the case of
licenses, sequels, and other projects that “have to be made,” the troubles can begin
even earlier.
In the majority of cases, the biggest problem is scope, with the intentions far
outstripping the resources available. Understanding how much time it will really
take to turn your ideas into code is never easy, no matter how much experience
you have.
But even if you dial it in perfectly, there are numerous outside forces that may
change the equation. Team members may quit, for example, or a company may
poach top talent for a “high-profile project,” leaving your project to stumble
around without crucial resources until the time comes for what amounts to a
mercy killing. Or you may discover that what you thought was going to be easy is
actually the hard part.
Similarly, you may start testing your prototype only to discover that your game
concept is never going to connect with its intended audience. If you don’t have the
time or resources to either revise your game or target it toward a new audience,
sometimes pulling the plug is the best thing for it. Although it can be hard to
accept that in the moment, almost every designer can tell you a story about a
project they were, in retrospect, glad was canceled.
There are quite a few projects in my own past that, in retrospect, I’m glad never
saw the light of day. It would have been impossible for me to admit it at the time
(but the loss of the paycheck may have had something to do with that).
That said, your first instinct shouldn’t ever be to give up. Knowing how and
when to weather the storm is probably more important than avoiding the storm in
the first place. When it comes to development, where there’s a will, there’s always
a way. And where there’s still budget, there’s still hope.
On the other hand, if getting to work every day is making you feel dizzy and
nauseated instead of delirious with excitement, you should check to make sure

that the motion sickness you’re feeling isn’t coming from working on a project
that’s swirling around the drain.
Not knowing when to let go of their vision has led many would-be Captain
Ahabs down to the bottom of the sea, but I’m sympathetic to their obsession. The
amount of time and effort it takes to get to the place where you’re in the position
to design the game of your dreams can feel like a once-in-a-lifetime opportunity.
Once your hands are on the wheel, you’re going to want to do anything but
abandon ship, no matter how rough things get.
But being a real designer means you need to be in it for the long haul, and no
one succeeds every time. Far fewer succeed their first time out. If you use your
experiences (good or bad) to enhance your understanding of the discipline of
design, you’ll be building a skill set that you can bring to every game you build.
A certain amount of intensity, passion, and madness is part of the job, and it’s
okay to decide that you’re going to go all in. It’s just not okay to try to take your
coworkers and your family with you.
And when you realize you can’t save your game, you’ll need to lean into the one
tool that must sit in the toolbox of every great designer: resiliency.
As a first-time designer who just saw your “big idea” fail, you may feel like
you’re never going to be able to start the whole journey over again. But a failed
game is not (usually) fatal for your design career.
Live through failure enough times and you’ll begin to have a sixth sense about
which projects are more likely to stay afloat and which ones will get sucked down
by the development whirlpool. The first time you pull off the miracle of simply
getting your game out into the world you’ll feel like a genius. You probably aren’t
one, but you should enjoy the feeling while it lasts!


Defining the Stakeholders
It’s been said that success has a thousand fathers and failure has none. But
whether the game is a hit or a bomb, there can be only one mother of the vision,
and that’s the designer. That makes the designer the one person on the team who
can’t just disown the game when things start to go wrong. And when it comes time
to point fingers, they’ll usually end up pointing at you, whether you deserve it or
not.
When real trouble starts up, and there will always be some real trouble, you’re
going to need to know who is willing to help you. The best way to make sure that
people are committed is to make sure they’re invested. That means the more of
your vision that you’re willing to share, the more likely that you’ll end being
supported by your team.
More important, when trouble comes, you’ll need your stakeholders to support
you.
Just because someone is being paid to come in and work on your game every
day doesn’t mean they have the ability to make decisions about the design of a
project. In order for their opinions to impact what you do, the people making
those fundamental decisions should have a stake in the success of your project
and be willing to take responsibility for the outcome. Your game may be the only
thing your company is making or just one product among many, but either way,
the success or failure of what you create has to matter to someone outside of the
team, or it wouldn’t be getting made at all.
So how do you determine who those stakeholders really are? Whether it’s the
creative director, your friend who is teaching you new algorithms, the marketing
manager, or the parent who’s letting you live at home rent free, a stakeholder is
anyone who is demanding input into the direction of a project. In return, they
should also be willing to put enough skin in the game that they can not only offer
advice, but be willing to carry some of the blame when (and not if) something goes
wrong.
You’ll want to not only determine who your stakeholders are, but clearly define
their creative responsibilities—or at the very least, what you think those
responsibilities should be. To get the biggest bang for your stakeholder buck, you’ll
want to define them early, and you’ll want to do it in a way that feels positive and

collaborative.
In practice, it can be difficult to get key stakeholders to commit to the real
responsibilities of their role. People high up on the executive chain (such as CEOs
and marketing directors) may refuse to take any responsibility but still demand to
helicopter in at the worst possible moment.
Even if you can get the higher-ups to commit, once those responsibilities start
showing up, they’ll often use their powers of executive fiat to avoid putting in the
previously agreed upon time and effort, usually with loud noises about “budgets
and schedules.”
Whether or not they follow through, simply asking for a commitment early on
in the project will give you much-needed leverage when things get more intense
down the line.
Even broken promises can sometimes turn neutral observers into much-needed
allies at those critical moments that show up in every project. That makes who,
how, and when you bring people into your project as creative stakeholders often
one of the first great nongame challenges of a designer. Take some time and really
think through who is sacrificing their time and money to be a part of this project,
and offer them the chance to get on board in a more significant way. You may find
that instead of executives and investors, you’ll be asking friends and spouses to
come on board.
If you’re the type of person who doesn’t like to “play politics,” you may find this
all a little too much like campaigning, but by taking a moment to look around and
figure out who it is that you’d like to have standing by your side when trouble
comes, you can start the process of getting them to actually be there by asking
them early.
Timing can be important as well: Nothing attracts would-be advisors like the
faint whiff of success. If things are going well during preproduction, people whose
names you’ve previously only known from their appearance on spreadsheets and
paychecks may show up demanding a seat at the table.
Remember that your stakeholders aren’t just giving you input on your vision—
they’ll have the ability to impact your time, budget, and resources as well, and they
can do it in very interesting ways.
And make sure that you’re talking with your producer not only about who is

going to join your team, but about how you plan to integrate their input into the
project.

 

PREPRODUCTION

Defining the Fantasy
For almost as long as there has been serious game development, there has been
the concept of preproduction. This magical time of pure creativity is when
designers get to work on the fundamentals of their game in relative peace and with
great freedom, collaborating with their cocreative leads over a period of weeks or
months; it is when the designer can allow the vision to flourish and grow into its
full potential before it’s taken to prototype and put in front of the stakeholders for
critical review.
Early on in their careers, every designer wants to believe that it’s possible to
simply think through the tough problems and come up with a genuinely brilliant
game. And while concept, inspiration, and vision are all core skills when it comes
to being a game designer, one of the most important lessons a budding designer
can learn is that there really is no such thing as a “great” idea for a game
until it has been focused and tested through continuous iterations of
concept and play.
The preproduction phase is your first opportunity to begin that process. It’s a
way to battle test your concepts and see if they really have what it takes to survive
the production process.
From engine selection to art pipeline, your preproduction phase will be a
microcosm of the larger process to come.
Unfortunately, a genuine preproduction phase is usually more about the
heartbreak of broken promises than the joy of true creative freedom. In my
experience, almost every period of preproduction that I’ve ever been granted has
been either cut short or axed entirely. And that was in the days before the current
data-driven marketplace replaced gut feelings and creativity with hard numbers
and user targets. In an environment as busy and brutal as modern game
development, any claims by a company to offer a nurturing creative environment
for preproduction are usually fantasies at best and are often outright lies.
The truth is that the childhood of almost every game concept is (and always has
been) a Dickensian nightmare where the young concept must put it’s tiny interface
to work begging for food and lodging almost from the day that it’s born. (“Please
sir, may I have some more preproduction time?”)

So why is it that much-needed time that allows your young concept to grow,
explore, and learn is so often cut short?
As in almost every business, the real reason is money. Since no one has actually
spent any money yet, none of the stakeholders feel all that invested in the project.
Meanwhile, your resources may be needed by another project that’s already in full
production. And you’ll quickly discover that there is always a reason to poach
time and talent from the folks who are “sitting around doing nothing.” Even on
indie teams, members will often disappear to finish “paid work” before they can
commit to your game.
By the time everyone comes back to preproduction (usually with the original
deadlines still in place), intricate concepts often end up being dumbed down or
oversimplified; core elements can be cut entirely; and innovation is sacrificed,
leaving the new and risky to be replaced by the tried and true.
That’s not always a bad thing, but too much can hobble a game before it even
gets out of the gate.

Redefining Reality
Even though it’s incredibly difficult to hold on to, having a preproduction phase
is mandatory if your project is going to get a chance to develop properly.
Why is it so important? Because unlike every other phase of development, this
is the one point in your project where failure is a feature, not a bug. Preproduction
is your one chance to think your way out of problems that will throw your entire
project into chaos down the line.
Without enough preproduction time, your project will begin production with
catch-up and crisis in its bones, and what you’ll have on your hands won’t be
much more than a skeleton. If you’re a good designer and you’ve defined a solid
premise, you may be able to find the time to flesh out your ideas during
production, although it usually comes at the cost of at least some of your
enthusiasm.
You should treat any preproduction time you get as a rare and special thing,
and use every precious second for its maximum value. And since you’ll always be
getting less time than you need, you should always be fighting to get a little bit
more.
Use the time you do have wisely, and build your game concept
“holographically.” Rough out your basic concept as early as you can and then
iterate and improve on it constantly. Assume that the day you have to demo your
game to someone important will probably be tomorrow, and always be ready to
show off whatever you have.
The more rapidly you can define and prove the fundamentals of your game, the
more quickly you’ll be able to pivot to defining the technology and the methods
that you’ll use to build it.
If you’re unfamiliar with the process, it can feel like it’s not just your ideas but
you personally that’s under siege. Despite all the criticism that’s being directed at
your still-gestating concept, attacking your ideas isn’t the same as attacking you.
Maintain calm and focus, and build out the foundations of your game the best
you can.
 

 
Crafting Your Premise
When you look back at the history of any successful game project, one thing
you’ll discover they all have in common is that often nothing about the game’s
original vision survives the process of production unchanged.
What’s more surprising than the change itself is how quickly those once
“untouchable” concepts are utterly forgotten once they’ve been abandoned.
Nothing falls faster down the memory hole than an old vision once the new ideas
have been accepted and integrated. If, for example, your story-based RPG goes
from full-priced to freemium, you’ll rarely find a designer willing to admit that the
entire team had originally stated they’d rather die than go free-to-play.
Change during the production cycle is not only inevitable, it’s an integral part of
moving toward the finish line. What shouldn’t be lost in the shuffle are the
fundamental ideas that have driven your project forward. While they may not
seem important day to day, you’ll want to define the pillars of your project early
on, and make changing them worth at least a conversation.
With the amount of redefinition and revision that occurs in even the earliest
phases of production, it’s incredibly helpful to define your original inspiration. If
you can’t state the core concept of your game as a simple, memorable idea, it will
often turn into something different every day, leaving you just as confused as
everyone else.
The best way to define your core inspiration is by defining your premise: a
statement of play expressed as a single coherent statement—usually in a sentence
or two.
A clear premise boils down every element of your grand, life-changing, genre-
defying, totally unique, utterly compelling vision into a simple, easy-to-
communicate idea. When done right, it will contain the core elements that define
any good game and inspire and enlighten the people who hear it.
There are many elements of your premise that will be similar to the definition
of intention that I described before. The main difference is that the premise is an
idea that you’re exploring, not a destination that you’re heading to. There’s no
guarantee that it’s going to work out, or that it’s even going to be compelling when

you get there. It’s a definition of why you believe the journey is worth taking.
A well-defined premise will serve as a reminder of why you’re making what
you’re making, and it can be the one thing that survives from your first concept
document to the final release candidate.
A good premise should answer 3 core questions:
• What is the player’s primary goal?
⁃ What is the one core action that the player must successfully take in
order to be rewarded?
⁃ What is it about that experience that keeps them coming back to the
game day after day to complete the next level/zone/world?
• How will your player achieve that goal?
⁃ What is it that the player must do to complete tasks and access new
content?
⁃ What is the primary reward, and how does it move them forward in
terms of both achievement and desire?
• What is the environment/world that they’ll be playing their game within?
⁃ How does the world provide context for the challenges that they’re
facing?
⁃ How does the world define their play experience?
⁃ What is the scope that your play world defines?
A level? A map? A universe? A tabletop?
Once you’ve answered those questions, your next step is to take your answers
and craft them into a single sentence (2 or 3 sentences is also fine).
The basic formula of your premise is this:
By taking these ACTIONS in this ENVIRONMENT, the player will get this
REWARD.
In order to show you how crafting a premise is a useful tool for design, here are
a few samples that I’ve created from classic games.
PAC-MAN: Use your joystick to dodge monsters and collect valuable items
and power-ups in an endless maze.

GRAND THEFT AUTO: Commit a series of crimes in a city filled with
interlocking game systems to unlock access to new places, weapons, and stories.
FINAL FANTASY: Face off against a variety of monsters to grow in strength
and gain new heroes, powers, and items as you travel through a fantasy landscape
toward an epic confrontation with an all-powerful foe.
DONKEY KONG: Jump and dodge while climbing higher and higher up a
series of girders while avoiding an endless cascade of dangerous objects being
thrown at you to increase your score.
It’s worth noting that rescuing the damsel in distress from a gorilla fond of
construction sites (for example) has no actual impact on the premise/gameplay
other than as a representation of a scoring event. As a character, Pauline exists
purely as a metaphor for the real goal of the game, which is to reach the top and
then keep climbing.
Similarly, my premises don’t need to mention the pill-gobbling yellow circle in
Pac-Man, the cranky criminals in GTA, or the Chocobos in Final Fantasy because
those elements aren’t directly relevant to the core of what makes them work as
actual games.
As far as the premise is concerned, it doesn’t make a difference whether you’re
creating a high-fantasy dungeon crawler, a gritty “realistic” crime noir adventure,
or an epic space opera combat flight sim: the hard part is communicating a
message through gameplay. Far too many designers waste cycles trying to
communicate gameplay through story instead of focusing on the greater challenge
of defining an effective structure for play. Story can support your game ideas, but
it can’t define them because they are, by definition, non-interactive.
Story, character, and metaphor are important, and when they’re done well, it
can definitely be motivating. But story is a wrapper you stretch around the
fundamentals of your gameplay. Your premise shouldn’t contain any specific
details from your narrative, so if your first draft is full of people and places, strip
them out and try again.
If you’ve tried and tried and you’re still having trouble boiling down your grand
vision into a few compact sentences, here are some more questions for you to
answer:
• What is it you want your game to do that’s never been done before?

• If only a single idea could survive your development process, what would
you want that idea to be?
• What is the interaction so fundamental to your game that if everything else
about your game had to change (story, setting, characters, goals, platform,
etc.), you would have to keep this interaction or it wouldn’t be the same
game anymore?
What game dynamics do you think will most directly impact and inspire your
player?
Write down your answers, then go back to the original premise questions and
see if you’ve found the information you need.
If after all that your concept remains broken, uninspiring, or not quite fully
baked, the premise will help you discover that early enough that you can do
something about it. Dealing with your rough edges and holes early means you
won’t be paying the price for ignoring problems that can be easily fixed early on
but can sometimes sink a project in the later stages.
No matter how hard it may seem, putting in the effort to cut your game down
into a single statement of grand and glorious vision will be something that you’ll
be thanking yourself for doing in every following phase of your project.
It’s all too easy for a designer to use story to try to hide their core idea from the
inevitable harsh criticism that can come from all sides. Crafting a premise will
force you to define a concrete idea out of the ephemeral artistic nothingness of
your imagination.
It may seem hard to expose your newborn concept to so much criticism early
on, but once you’re done, your premise will act as a simple and effective pitch that
you can use to share your idea with everyone around you. If your concept has
merit, it will begin to gather interest from managers, coworkers, investors, loved
ones, friends, twitter followers, and anyone else who you’ll be looking to for input
and inspiration for your project.
And with your premise in hand, you’ll always know what you’re fighting for.
If you’ve tried and tried again, but you’re still totally stuck when trying to build
your premise, go ahead and send me an email at andrew@levelupdesign.com with
the word “Premise” as the subject along with what you’ve written down so far. I
promise that I’ll do what I can to help you work it out!


 
Paper Prototyping
“Why,” you may ask, “with all the digital tools available for prototyping, should
I develop my concept for the tabletop?” Considering all the digital options, it can
seem almost backward.
There’s no doubt that with the almost infinite number of prebuilt interfaces,
tool sets, and databases in the world you can craft almost anything you imagine in
almost any medium, but as a game designer, I’m of the opinion that grabbing a
stack of dice, tokens, cards, and maybe even a role-playing miniature or two may
still give you the best bang for your buck.
If paper prototypes are so fantastic, then why doesn’t every game use one?
Many designers assume that a rapidly built paper concept won’t be able to
communicate the richness of the full game as they see it in their head. Also, the
crudeness of paper prototyping may expose some of the weaknesses that you’re
hoping to hide from public scrutiny while you find the time to work out the details.
But the point of the prototype is that your weak points are exactly the issues
you should be focused on. If there’s a faster, cheaper, more effective way to hash
out the early issues with your game than translating it onto paper, I’d be hard
pressed to tell you what it is.
“My game is a first-person shooter!” you may cry. “There’s no way I can
simulate that on a tabletop.” Even if that were true (and it probably isn’t), is the
shooting portion of your game really the part that you need to express in your
prototype? Is there another way you can give your players some insight into the
experience you’re crafting?
Maybe instead of the innovative weapon-loading mechanic, you need to find a
way to concept your novel use of integrated RPG elements in a real-time
environment. Or maybe your weapon-reload system could benefit from some
token time.
Another strength of the tabletop prototype is that few designers are immune to
the siren call of interface bloat and feature creep, especially when there seems to
be a unique tool to solve every problem. Figuring out how to make your core
concept work in the physical world will force you to streamline your idea and

reinvent your core dynamic in a way that may allow you to better engage with your
users.
The time (usually 3–5 hours) it will take to render your game dynamics in
paper and dice will still be minor compared to the time needed to code up a
polished digital concept (in any tool). Doing things the “old-fashioned way” may
save you not only time and effort, but probably some money as well.
Even if you have a fantastic set of tools for your prototype, unless your vision is
so completely unique and innovative that there is literally no part of it that can’t
be simulated outside of a virtual environment (and in my experience that’s never
the case), I suggest grabbing cardboard, markers, tokens, and dice. There’s a lot to
discover when you spend some time crafting a tabletop simulation.

 
The Concept Document
A well-defined premise and a solid prototype will help clarify the key elements
of your core vision. For a long time, the next step was clear: Create a
comprehensive design document—essentially building a blueprint for your entire
game.
No design document has ever truly ended up representing the final product
(although there have been a few that have come close—especially for tactical
games). But since the dawn of the 21st century, the tools for concepting and rapid
prototyping have simultaneously become both simpler to use and more
comprehensive. With so many great ways to simulate your idea, the idea of
concepting a game idea by trying to describe every aspect of it in a text document
is becoming an archaic waste of time and words.
On the other hand, if you’re planning on doing more with your game ideas than
just talk about them, you’ll still need to document your vision in a way that
communicates your concept to people who don’t have as deep an understanding of
play as you do.
So while the classic “everything and the kitchen sink” design document is no
longer the best way to approach the problem in a world of game-jams and endless
rapid prototyping tools, design documents can (and do) still work when they’re
limited to defining the interactive elements of your prototypes,
I recommend a high-level, heavily visual, deconstructed concept document.
Rather than being a comprehensive record of every idea, the concept doc serves
as one part design document, one part wiki, and one part statement of intent. It
contains a broad overview of general interactions and intentions rather than
detailed descriptions of play.
Depending on your tools and collaborators, you’ll still need to define the
specifics of your play screens and controls, but a concept doc can act as more of a
catalog of art and design notes to effectively describe the intended goals of the
core user experience.
Like the production process itself, a good concept doc should reflect the play

experience and the product vision as much as possible. It is, essentially, a tool to
communicate the current understanding of the game to the team.
Modern concept docs can run the gamut from finely produced art books to an
interactive PowerPoint presentation. How you choose to present your ideas will
depend on a number of factors, including what tools you already know how to use
and what tools are supported or demanded in the environment you’re working in.
Unlike other disciplines such as art and programming, which come with fairly
strict core competencies and clear deliverables, the discipline of game design is
always fluid. Every game is going to be built on the back of your existing technical
and communication skills.
If you have an artistic background, then you may choose to go a more visual
route, building images to show how you intend the game to work.
If you’re a writer, then you’ll probably lean heavily on text. As a writer myself,
I’ll suggest that you take a “less is more” approach when it comes to prose.
Remember that the larger the wall of text your team members face, the less likely
they are to actually read it. Bullet points and white space are going to be your
friends here—use them liberally.
If you come from a programming background, you’ll probably want to blend a
bit of both. Since you won’t have interactivity to help you in your documentation,
do your best to be as reductive as possible.
No matter how you choose to present your game concept, your core goal for the
concept doc will remain the same: Create a showcase for your unique interactive
elements that clearly communicates the experience you intend to create while
giving the team everything they need to get started creating your game.
Be sure to balance the technologies you intend to create with your expectations
of user flow. Although it’s easily ignored, the definition of your core user
experience should be at the heart of your document. My documentation style has
shifted from being a comprehensive description of elements contained within the
game to being focused entirely on the way the user interacts with what’s on the
screen.
You’ll know you’re headed in the right direction when you can answer questions
by pointing people to the proper location in the document rather than needing to
answer every question yourself. And if they can act on those elements without

needing to turn to you for more information, you’re nailing it!
Not only will a well-produced, user-focused concept document communicate
your concept to the stakeholders, it should also act as an outline and a program for
the real show: your “proof of concept.”

 
The Proof of Concept
The proof of concept is where the virtual rubber meets the developmental road.
It’s the first interactive experience that you will create for this game as a designer,
and it’s one that you should try to do yourself.
Done well, it will give the player a (minimal) taste of the genuine core
experience you plan to provide. Like the concept doc, the actual form your proof of
concept takes will be as unique as the team and the tools you work with.
You can craft the POC in Game-Maker, PowerPoint, Excel, or even using paper
and dice. Just remember that your goal is to effectively communicate what’s
captivating about your fundamental experience using whatever tools you have at
hand. Do that well and you’re doing it right.
For less-experienced designers, it can be difficult to determine what content a
proof of concept should contain and what tools are worth learning. Some of your
choices will be clear once you’ve determined the genre of game you’re making and
how your tools can best express those core ideas. One clear guide will be the
fundamental elements that you’re looking to communicate to your audience. This
simple phrase will help you figure out what those things are : “Places to go,
people to meet, and things to do.”
Breaking down the proof of concept into individual parts allows you to more
clearly define the scope of the problem you’re looking to solve.

Places to Go
What is (are) the environment(s) that your game will be played in? Is it on a
map? In a fully rendered 3D environment? A game board? An abstract strategic
view?
By clearly defining (and concepting) your play space, you’ll go a long way to
communicating your gameplay. Even placing your game against a noninteractive
visual representation of a bigger idea (a map or a screen shot, for example) can be
useful at this phase.

People to Meet
Who are the characters or objects your player will interact with? Are they high-
polygon 3D real-time rendered monsters? Pixelated heroes? Spinning gems?
How does the player interact with these objects and/or characters? Is there a
hand of cards? A list of actions?
Is your only option to shoot first, or can you decide not to kill something so you
can ask it questions later?
Depending on your premise, you may think that you don’t have any actual
characters in your game. But every interactive experience must have at least one
element that the player will interact with in a direct and emotional way. If there’s
something in your game that the player will either cheer or curse, then that object
is the character.
Properly defining your character elements in the proof of concept
can unlock your game’s emotional pull. Not every gem in Bejeweled needs
to communicate with the same emotion as an Angry Bird (or even a Flappy one),
but if you can create a connection early on, you’ll be one step closer to getting your
stakeholders directly invested in your ideas.

Things to Do
In any interactive experience, the player must use some form of device
(controller, screen, guitar, motion wand, etc.) to input a set of predefined verbs to
the “characters” defined in the previous section.
Showcasing how the player interacts in your game is the most obvious and
important aspect of your proof of concept. Despite that, it’s one area that even
many seasoned designers still have a surprisingly hard time describing effectively.
The excuse they give is that their concept is too complicated to prototype. If that’s
true, if you can’t give a taste of what you have in mind, it’s possible what you’re
planning is too complicated.
Because interactive dynamics are so fundamental and compelling, it can
become easy for a designer to become so focused on the “things to do” aspect of
their game that they work on the game dynamic to the exclusion of the other
elements.
Player interaction is the most important element of your design, but it isn’t the
only element. The ability to “do things” is the core of what makes interactive
entertainment different from linear narrative. But if your dynamic is all you’re
focused on, you’re missing out on a huge opportunity to communicate with your
audience.
No modern game can be purely focused on interaction. Even highly abstract
games like Tetris have elements of character and environment that assist in
making the interaction obvious and pleasing.
On the other hand, I’ve met numerous would-be designers whose pitches don’t
feature any interaction at all. Instead of telling you anything about what the
player does, they’ll just start telling you about their story. And when you ask them
to tell you more about what the player does, they’ll tell you the story again. If
defining your story inspires you, then go for it, but fleshing out the complete
2,000-year history of your fantasy realm has nothing to do with designing your
game. Not even the developers of the richest, most narrative AAA titles ever made
are going to be able to fully focus on developing their story until they have at least
some idea of the interactive tools they’re going to use to tell it.
Games are a medium for storytelling, and your design will define that medium.
Do that first.

Once you’ve figured out your game’s core interaction, your next step will be to
figure out how you’ll balance it with visual and audio elements.
You don’t need to nail things down in this stage. You simply need to get your
design to a point that users can understand what their place in the game will be
(with a minimal bit of coaching, if necessary).

Your Medium Is the Message
The next step in creating a proof of concept is determining what medium you’ll
use to express it.
There are as many right ways to do a POC as there are ideas to express.
Whether you end up using a series of wireframes, rendered images, a paper
prototype, or an interactive walkthrough, your goal is to showcase your game’s
best elements in a way that communicates the way all the pieces you defined above
will work together to create a unique and captivating player experience. The
medium you choose should be the one that best showcases your idea and does it
in a clear, concise way.
Going back to our examples in the previous section, imagine creating a tabletop
game of Pac-Man on a board you’ve filled with nickels (that the playtester gets to
keep when they collect). Once your ball rolls over a jellybean power pill, all the
ghosts turn into gumdrops that the player gets to eat when the ball makes contact
with them. (If you’ve never tried using candy before, it’s a great tool in prototyping
almost any casual game.)
Similarly, you can easily build an exciting proof of concept for your version of
Grand Theft Auto using nothing more than Hot Wheels cars and plastic army
men.
However you get it done, the POC is your chance to craft and communicate
your core idea. Its job is to give a taste of your vision. The challenge is finding a
way to communicate what you believe the core value of that experience will be.
Whether you’re using candy or code, make sure that the flavor you’re leaving
behind on people’s tongues is a hint of something that they’ll want more of—a lot
more.
Don’t forget that your prototype doesn’t need to be fully implemented on a
systems level to prove that you have a good idea. Smoke and mirrors are just fine
for a prototype—but make sure your POC allows the player to genuinely
experience the fundamental structural elements of your game in a way that reveals
how entertaining your project can be.
The elements you choose to showcase should communicate to people that you
have a powerful core vision for your project and that you’re capable of expressing
it through gameplay.

Even if what you’re pitching is a serious or educational game, you’ll need to
show how your experience can captivate the user within the context of that
experience.
If, after you’ve thought it all through, you still find yourself struggling to come
up with a good format for your proof of concept, your first instinct may be to try to
solve the problem by jumping directly into building technology. It’s possible that
may be the answer, but usually the real problem lies with ideas that are either
overly complicated or underdeveloped.
Try digging into your vision and seeing if there may be a simpler way to express
your core idea. Every concept can be reduced. If you were trying to create a POC
for Donkey Kong, would you decide that it’s more important to focus on your
ability to jump over barrels or your ability to climb up the building? Pick one and
see if that helps your reach to match your grasp. There’s always room to make
things more complicated later.
There’s no shame in going back to the drawing board—especially when you’re
still inventing the pen.
Whether you’re designing a game, a bridge, or even a hair dryer, the
fundamental act of designing anything is first and foremost about satisfying the
user’s needs in the context of the realities of the business and technology
resources available.
For a game, the problem we’re trying to resolve is the user’s need to escape.
Games allow us to enter a streamlined experience where every problem has a
solution, and solutions are without unintended consequences. As a player, every
poor choice you make in a game, from missing the landing to accidentally
massacring a planet, can be wiped away with a simple reload.
Crafting a clean, satisfying, intuitive experience is at the core of all good game
design. And when you’re doing your job right, you’re taking the challenges you
face as a designer and simplifying them, streamlining them, then putting them
behind an interface designed to make the best choices obvious to the player.
Doing that effectively means meticulously crafting every piece of content
and/or generating systems that effortlessly manipulate the users into choosing
actions that bring them into contact with the peak experience of your game.
But before you can get to that peak, you’ll have to come up with ideas—lots of

ideas. You’ll need that ability to generate new concepts to be well tuned because,
unlike playing a game, making one means that you’ll have to be able to revise any
idea at any time. Your ideas will be under assault at every turn, from within and
without. And when your concepts fail (and they will), your best defense as a
designer will be to come up with better ones!
As your project moves forward, you’ll face numerous moments when you aren’t
sure that you’ve made the correct decisions, choices, or sacrifices. And when the
criticisms and questions come fast and thick—from your team members, from
management, and even from inside your own head—your natural inclination may
be to try to hide. But hiding, even a little bit, is the opposite of creating something.
Long before you can make something great, you simply have to make anything at
all, and it’s only the things you show to people that matter.
Your proof of concept is your first public statement of intent.
Spoiler alert: Even if your concept truly is great, not everyone is going to love it.
As hard as that can be to accept the first dozen times it happens, the eventual
lesson that every good designer must learn is that it’s not getting criticism of your
work that matters, it’s how you respond to that criticism that determines the
outcome and quality of your game.
Having a thick skin is important because it’s the tough choices you’ll make in
the earliest phases of development that will have the biggest impact.
A well-built concept should serve as the foundation for your battle plan. It’s the
first solid step you’ll take in the long journey of transforming your original vision
into a polished project.

 
The Playable Prototype
One way to think of the process of design is as a series of steps where each one
represents a magnitude more commitment, confidence, and detail than the one
before it. At each phase, the momentum behind the project grows, making it more
difficult to stop than to simply keep moving forward.
Successfully building a solid proof of concept should gain enough traction for
your game that you can get the ball rolling. Part of that is planning out all the
resources you need to build a fully featured prototype, designed and constructed
to be played on your intended delivery platform.
In corporate environments, the prototype will often be a pre–green light
milestone, referred to as either “the first playable” or “the prototype.” That makes
the primary audience your stakeholders; although if it’s successful, you’ll be
putting it in front of a far larger group of users.
The goal of the prototype is to prove that your team has what it takes to
successfully create a piece of interactive entertainment. Reaching this milestone
successfully will provide your project with the push it needs to really start rolling
forward. It’s where stakeholders will offer you the resources you really need to get
moving.
Whether it’s your parents or a board of directors, you’ll often be selling your
dream to a group of people who are far less sophisticated than your intended
audience. They may believe that all games are basically “like Candy Crush,” or they
may have heard that video games are a “great investment” but have never actually
played one. To get the approval you need, you’ll be explaining not only what your
game does, but what it is. You’ll need to be prepared to sing and dance like you’ve
never done before.
But whether your funding is coming from a loan from a relative, big-time
dollars from investors, or your own pocket, a playable prototype is the first proof
that with the right resources, you actually have something worth investing in. It
should be designed to fully and effectively show off what your team is capable of.
This is your chance to sell the dream, so don’t be afraid to bite off a little more
than you can chew in this phase. It’s still a good idea to underpromise and

overdeliver, but the prototype is more than just a promise—it’s proof you can
deliver at the end of a production cycle. It’s also your first chance to really show
the world what your ideas can do. The prototype is the one place where you can
wow your initial stakeholders on pure ambition, buying you the time and
resources that you need to fully deliver on your vision later on.
As you move forward, you’ll be showing this prototype to a lot of people, and
almost every one of them will be more than happy to give you their opinion about
“your” project.
If, for some reason, you get to the end of this phase and your prototype doesn’t
live up to your initial expectations, don’t panic! When things go wrong, your first
instinct can be to blame anyone and anything but your own concept for the
problems you face. Meanwhile, everyone else will be trying to dump their
problems into your lap.
When you’re dealing with a disappointing prototype, everyone’s first instinct
will be to try to assign the blame. Don’t fall into the trap!
Rather than asking “where did it all go wrong,” focus on fixing the problems.
Dig in and figure out what it is about your game and your process that isn’t
working well. Discover if there’s a way you can revise the core concept and get
things back on track as quickly and as elegantly as possible.
Be specific about what you choose to focus on when you’re improving a
prototype. It can become easy to invest massive amounts of time and energy on
secondary ideas, blowing them up in importance and stealing time and energy
away from the core elements of your project. Before you make any big
commitments to small ideas, reexamine your premise and reacquaint yourself
with what you’ve decided are the fundamental components of your original vision.
If you discover that you’ve turned a secondary idea into a “core element” that
really has nothing to do with what you set out to make, give yourself permission to
let go of whatever idea it is that’s holding you back.
Even though it may be difficult to accept, it’s important to recognize that up
until this point, the amount of time and effort spent on any single element of a
game does not translate into importance for the user. In fact, the most elegant,
“obvious” experiences are the ones that take the most time and effort. Even if you
find yourself having to cut away half the work you’ve done so far (or more), the

sacrifice will be worth it if you end up with a better game.
Getting the rest of your team to agree may not be so easy. Developers love to
show their work, but it’s vitally important that your ideas remain fluid through the
proof-of-concept phase. “Because we already made it,” is the worst reason to hold
on to something.
Once you have some clarity around the problem, the best way to get your team
to keep working on a flawed vision (and every vision has some flaws) is to be out
in front of the bandwagon for change. Getting out ahead of your problems will
always be far less painful than finding yourself being dragged kicking and
screaming behind them—especially early on.
Hopefully, you’ve given yourself enough time and resources that you’ll be able
to go back to the drawing board, but it’s far easier to cancel a project here than it
will be once your project is up to speed. (Remember what I said about momentum
earlier.)
If you’ve never delivered a prototype before, be prepared for a storm with more
honest and direct feedback than you ever thought was possible. Up until this
point, your concept has primarily lived in your head, shared only with people who
have made the investment of their time and money. Working in that kind of echo
chamber can make it easy to believe that your ideas are so blindingly brilliant
they’re incapable of failure. But inevitably compromise will begin to creep in,
revealing the dark cracks in your shining dream.
Experience will teach you that very few of these cracks truly qualify as fatal
flaws. In fact, the prototype phase is the best place to find your flaws. The process
of production is a long one, and releasing a game is about a lot more than fighting
for what you believe in. To win any war, you must to be willing to lose
some of the battles along the way. The technical term for that in game
production is “compromise,” and too many designers harbor the mistaken
assumption that accepting it is some kind of failure.
The only time it truly pays to go to the mat for a broken concept is if the
requests being made are in conflict with the core premise of your game. Of course,
that’s also another reason to reexamine your premise and refocus your vision.
Remember that when you open up your premise to change, you won’t be the
only one looking to tinker with your project’s fundamentals. If the project is

moving forward, you’ll have added more people over the course of the production
process than you’ll have in the decision-making process, so keep an eye on
keeping it simple and let everyone else push you to make it more complex.
Change in this phase is good, but only if it ends up replacing the original idea
with something even more motivating and exciting.
The moment your prototype is complete is a great time to start bringing in even
more people from outside your team to take a look at your project. Whether it’s
marketing, management, playtesters, friends and loved ones, or even people
you’ve found on Craigslist, the prototype is your opportunity to see what happens
when you place your fledgling project in the hands of live players.
If live playtesting is something you’ve never done before, this will be your
opportunity to discover just how surprising, humbling, and heartbreaking it is to
put the result of your blood, sweat, and tears directly in front of a living user. The
results of user testing are always eye opening, and you’re guaranteed to see users
interacting with your project in ways that you could have never imagined.
Showing off your prototype to people unfamiliar with the project can
sometimes make you feel like you’re going mad. How can your beautifully elegant
concept be so damn difficult for everyone else to understand? How can things that
appear so simple and clear in your head become so complicated when you’ve
brought them into reality? How can something so right turn out so wrong?
No matter how painful they seem at the time, the challenges you face in
communicating your ideas in the prototype phase are just a taste of what’s to
come. Learn to accept that no matter where and how you get it, criticism from
players is always good for the game.
Whenever you’re bringing new ideas together, there will always be unexpected
side effects, and dealing with them now will be much easier than trying to do it
while you’re in full production. In fact, almost no issue ignored in preproduction
will fail to rear its ugly head at the worst possible moment once you’re in the grind
(or in crunch).
Whether the big issues you’re facing in this phase are technical or critical, every
crisis is also an opportunity for you to figure out your biggest problems early on—
precisely the moment you can do the most to fix them.
If you can master the mental alchemy of transforming criticism into fuel for

your imagination, you’ll be well on your way to improving the game and your own
skills as a designer.
Although it’s not as common now as it once was, I still occasionally hear
vertical slice being considered as an alternative for the first playable. Even though
it’s much less prevalent than it was, I think it’s worth discussing why this version
of the playable prototype has always been a bad idea.
The original idea behind the vertical slice was to create (as much as technically
possible) a fully implemented “slice” of what the final game experience would be.
As games continued to grow in both size and cost, the goal of the vertical slice was
to try to create a prototype that felt (as much as possible) like a sliver of the final
game experience.
I’ve worked on numerous projects where the vertical slice was a mandatory
deliverable, and I’ve seen many others try and fail to get anything that comes close
to the goal. And I can say with certainty what I have seen delivered isn’t even close
to what appears in the final game. What you end up with may, at best, give you a
sense of the intended gameplay and the aesthetic. But a good prototype should do
that without trying to get you to build the impossible. Needless to say, I’m not a
fan of this method of prototyping as a requirement for most games.
Because games are built through the process of creating them, it’s impossible to
actually create a true “slice” of the future. It’s like comparing a pile of ingredients
to a simmering stew: You can’t craft a “slice” of gameplay any more than you can
carve out a “slice” of chicken soup from a bowl of uncooked meat and raw
vegetables.
In almost every case, when a vertical slice is demanded, what actually gets
delivered is a standard prototype that, after intense bargaining and numerous
unnecessary meetings, gets labeled as a “vertical slice” and everyone moves on.
Not only does this add a number of extra steps to an already well-defined process,
but it undermines the true value of the first playable as a representation of the
team’s capabilities to deliver something people can actually play.
That’s not to say I don’t understand the appeal. If you actually could share even
a few seconds of what the finished game was going to be like, management and
marketing would instantly understand and champion your game. So far, no one
has told me that’s the result.

That dream of simulating your vision is why, when the vertical slice is offered,
so many designers want to go for it. After all, you have the vision in your head, and
if you could deliver a perfect vertical slice, you would definitely get a green light.
But clarity is one of the most difficult things to communicate, and the practical
effect of trying to hack out a chunk of your vision is that it sets up expectations
that are impossible to meet and forces compromise to slip in far, far too early.
That’s not to say what you create won’t feel like something great. But no matter
how “real” it feels, a demo isn’t an actual prototype. The difference can be subtle
for those who haven’t worked on both, but the short version is that crafting a good
prototype helps development by trying to simulate the fundamentals of your new
experience. A good demo helps sales and marketing be exposing as few risky ideas
as possible.
For large-scale projects, you’ll end up with both a prototype and a demo on
your schedule, and that’s fine. But as the dollars are being spent and the time is
expanding, there is a powerful tendency to want to collapse the two things into
one.
That’s a shame, because even the best demos don’t really serve the same
function as a good prototype. The vertical slice essentially combines the demo and
the prototype into a single deliverable that undercuts the value of both, removing
the joyful creativity that comes with a great demo while forcing the project to live
up to the promise of the prototype, without the flexibility to respond to the lesson
learned.
Another issue is that the teams built to deliver an amazing demo will often
begin to flail when they’re tasked with building the genuine infrastructure for the
game that a prototype demands. That’s because there’s a big difference between
putting up a circus tent and building a foundation for a much larger event.
Far too often, the vertical slice be the best thing the team ever delivers, but that
initial success means that they will be given far too many chances to fail before
someone realizes the project is broken. A vampire project that’s too young to die
and too beautiful to live ends up becoming everyone’s nightmare.
I believe the best strategy for the long-term health of any game is delivering a
prototype that cleanly and accurately represents the current state of
understanding that you and the team have about your game as a system and a

process. The more of those ideas you can fully express, the greater the opportunity
you will have to go back and revise the game’s concept according to feedback from
playtesters and allow your stakeholders to have a genuine understanding of your
game.
Your prototype will express the viability of your vision. To that you’ll need to
add in enough content that people can understand what the core experience of the
game should be. As a deliverable, it means that you can focus on exploring the
promise of your premise without having to design fundamental elements of the
game before you’ve been able to fully define that experience.
Once you have a successful prototype, you can then build a solid demo off of
that foundation. It may take away some of your precious time, but it won’t
undermine your ability to move forward.
 

 

PRODUCTION

Documenting Your Design
After “what’s the difference between a producer and a designer?” probably the
most consistently asked question about game design is “what’s a design document
for?”
In the early days of development, the answer to that question was simply
“everything.” As I discussed in the concept document section, the goal of the
classic design document was to craft a complete repository of knowledge about
how the game would work, essentially creating a linear analog version of a digital
interactive experience.
The goal was to describe the product you were making in enough detail that
every member of the team could rely on it to construct every aspect of the game.
For the designer, it was a way to (as much as possible) work out as many logical
and structural issues as they could identify through the use of charts, tables, and
description to comprehensively define the different features of the project.
Against all odds, the design document sometimes worked! Many early game
projects could actually be built entirely from their design documents alone
(tactical simulations and puzzle games in particular). But even in their heyday, far
too many design documents simply weren’t comprehensive enough or were more
about intention and general feel than a complete experience (especially with
action and twitch games). As with most challenges in interactive media, the idea of
having an architectural “blueprint” only makes sense if you assume that the
software, platform, and tools you’re using will remain relatively stable through the
life of the project.
To get a better idea of what it was like to be a developer in the 80s and 90s
trying to create a game from one of these monstrous documents (usually in Word),
imagine an archeologist 200 years in the future trying to re-create a board game
from reading a rulebook, without having any of the actual pieces that came with
the original game. Sure, it was possible, but as you imagine the effort it would take
(and the questions you would need to ask), hopefully you’ll begin to appreciate not
only the challenges but also the pointless risks that come from trying to take on
the challenge of doing it in the first place.
During the production process, the designer of that era was expected to be
updating the document constantly, making sure that it “reflected the current state

of the project.” In my experience, once the designer was focused on delivering
content in the grind, those updates occurred rarely, if ever. Personally, I’d promise
that I’d update the document once the final project was delivered (guess how
many times that actually happened…). Meanwhile, I would use the time I’d clawed
back to write smaller documents focused on solving specific problems, and I’d tack
them onto the end of the big doc as an addendum.
That kind of documentation process still exists, but now it’s handled far more
effectively with issue-tracking software such as JIRA or wiki sites rather than
adding bloat to an already overstuffed word document.
Over the past two decades, as teams have become larger and game development
has become more iterative, collaborative, and interactive, the focus has
(thankfully) shifted away from a comprehensive design document that everyone
ignores to targeted information.
Every year, dozens of new tools have come along to give the designer better and
more focused ways to find particular solutions to particular problems.
I believe that it’s more important to create an interactive tool for
communication, conversation, and collaboration then it is to try to paint a
complete picture of a nonexistent product. That concept of focused documentation
is important as we take another look at the core question: What is a design
document for?
A well-crafted design document is intended to provide a blueprint of specific
design elements needed by team members to create the core features of the game.
Whether it’s a wiki or a Google Doc, the platform you use to update and share
your documentation should be a reflection of your team, including the way you
work, the current premise driving the project, and the particular phase that your
project is in.
The best document formats are the ones where your teammates can easily add
ideas, gather responses, suggest changes, and update sections according to
feedback from other team members, stakeholders, and playtesters. That may
include an online accessible word processing document, a database, a wiki, or
even a well-thought-out PowerPoint.
The structure should allow your documentation to easily be split into smaller
sections that can speak directly to the different disciplines that are intending to

use it. It should be easy to navigate with clear, distinct sections that are
meaningfully broken up in ways that will make it easy for different members of the
team to quickly get to the information they need.
Another (more creative) way to think of your design document is as an asset
creation document to communicate your design intentions.
Accessibility is vitally important as there is no quicker path to making your
documentation irrelevant than having to wade through the entire document trying
to find the relevant needle in a haystack (especially when that haystack is a single
Word document). And if you can’t even remember where you put something,
you’re probably doing it wrong.
Your design document will only get used by its intended audience when it’s
easier for team members to find specific answers in the document than it is to
simply ask someone (usually you) for the answer.
It’s also important to check to see if your design tools are essentially self-
documenting. You won’t need to transfer all your levels into a table, for example, if
you can simply get your tool to output everything to a comma-delineated Excel
document that can be linked to and accessed by anyone who’s interested in the
details of your project.
A good design document makes your ideas accessible. A great one allows you to
share them, improve them, and make them grow.
 

 
The Grind
After the intensity of the prototype phase, your next challenge as a designer will
be successfully navigating the switch to full production.
As the yellow lights begin turning green, the designer should begin to work with
the producer to determine the scope of the product. Usually the most effective tool
you can provide during this phase is a list of assets that the product needs to move
forward. That means creating a spreadsheet that contains (to the best of your
ability) a list of every piece of content that you think must be created for the game.
You’ll also want to attach an estimate of how long you think it’s going to take to
make each one. (And don’t forget to add music and sound effects as well.)
Even if you’re not completely sure what you’re making or what you’ll need,
pulling together an asset list is an eye-opening way to determine the true scope of
your design. It will make you a better designer, helping you to develop the skills
you need to understand how gameplay ideas translate into game content and user
interface (UI).
The next step is to take that list to the different team members that will actually
be responsible for building them.
This is where your programmer may shatter your dream of building
procedurally generated levels by pointing out that building a procedural level
engine will take far more than the 300 hours it will take to just handcraft 100
perfect levels.
It’s where the producer asks you to choose between your brilliant character
customization system and your genius weapon upgrade concept.
It’s the moment when your brilliant plan for multiple ending cinematics will be
dashed by the lead artist’s revelation that she barely has the resources she needs to
finish the opening animation.
Whether it’s crafted by you or your producer, the project’s asset list will be your
first great lesson in compromise and negotiation—one of the many that you’ll need
to learn to accept as a designer. That doesn’t mean you shouldn’t ask for more, but
it’s important that you remain aware of what the hard choices will be and respect
the time it takes to make them. Otherwise, people will end up running out of

patience long before your project runs out of time or money.
Your next step after negotiating your asset list will be working with your
producer to make sure that the foundations of the project are in place and that you
have a plan for getting the resources you need. If you don’t have a producer yet,
now will definitely be the time to get somebody on board to act in that role.
As more team members come on board, you’ll be defining milestones, approval
processes, release schedules, art pipelines, and much, much more. No matter what
the size of your project is, now is the time to get everything in place so that (as
much as possible) things can run as smoothly as possible.
Even the best-laid plans will go wrong, and things can, will, and should change
during the course of your project. But it’s important to remember that without a
solid plan in place to begin with, things can (and will) be much worse when (not if)
things eventually go wrong.
Once the back-end elements have been defined, your project is up and running,
and everyone is working on delivering assets, there can be a period when you’re
struggling to figure out exactly what it is you’re supposed to be doing every day.
That’s because the tools, levels, features, and other key elements that a designer
needs to deliver won’t be ready on day one of production.
Meanwhile, once you’ve finished defining the bulk of your initial design (and
you should be getting done with that as quickly as possible at this stage), you may
find yourself simply waiting for the coming tsunami of work while the rest of the
team gets busy building the foundations of your project.
Some designers use this “free” time to work on the fundamentals of the design
and come up with “better” ideas. Having tried this a few times myself, I find that if
you’re working alone while the rest of the team is working together to deliver on
your initial vision, you can find yourself dangerously out of alignment with their
goals.
Imagine being a programmer who has just spent 3 weeks to deliver a feature
only to come up for air and discover that the designer hasn’t just reinvented the
wheel you’ve been working on, but has thrown out the concept of wheels entirely.
(“Wheels? Where this design is going, we don’t even need roads!”)
The valuable work that the designer can do in this period is refining the
structure of the project. Instead of focusing on making the game better, use this

grace period as an opportunity to try to design the tools and pipelines that you’ll
want in place to make sure you can handle the workload that will be coming your
way.
And if there is already a basic structure for development in place—either
because your technology is all purchased or because you’re using tech entirely
developed for previous projects—then you can use the time to test it and make
sure it’s watertight.
After delivering so many ideas and being in charge of the vision, it can be tough
to shift into being just another member of the team instead of the guy in charge.
You’re not the producer (or you shouldn’t be), so it’s not your job to fully define
the development structure. But it’s not a bad idea to use those skills of yours to put
it to the test.
Here’s a short list of the kinds of questions you can ask yourself as you and your
team take the development process out for a shakedown cruise:
• Is your issue tracking/bug-reporting system working?
• How are other team members responding to your issues?
⁃ If your producer is taking 3 days to respond to your inquiries now,
what do you think will happen when you’re really behind schedule?
⁃ Are the questions being asked relevant and useful?
• Are the assets coming from the different disciplines really giving you what
you need to build maps/levels/worlds?
• How is your engineering team delivering new features?
⁃ Is there a way for you to respond and ask for changes, improvements,
etc.?
⁃ How are your priorities getting put into the production pipeline?
Your other opportunity during this period is to expand your design document
and build some kind of information repository where you can begin to document
your ideas in more detail. The goal here is to find somewhere you can log all the
information that you’re providing to your teammates. Usually, that means
developing some kind of wiki (I use Google sites), although many of the modern
tracking tools such as Jira usually have some kind of built-in tools for that as well.
Your team members may have other ideas of what works best. The particular

tool you choose matters far less than making sure you’re building something that
everyone can use to get the information they need.
Whatever you choose to spend your time on, remember that the early “boring”
days of development are a designer’s best opportunity to see if the foundations are
truly sound enough to support your project. It’s also an opportunity to develop a
good relationship with everyone on your team. Make sure that you use those days
wisely.

Success in the Grind
Once there’s a solid development structure underneath your project, the next
most important element for successfully realizing your vision in the grind is
making sure that your development tool set is as rich and well developed as
possible. The old adage about a craftsman only being as good as their tools is
doubly true for the designer, and it’ll be your job to remind everyone to build and
refine those tools as early on in the production cycle as possible.
If you’re using an existing tool set, you’ll want to start putting content through
it as soon as possible so that you can test out your production pipeline and make
sure that everyone is getting what they really need. If your tools are being built
from scratch, you’ll want to start getting something from your engineers that you
can use to begin to test them out as soon as possible.
Whether the software you’re using to develop your game is off the shelf or
totally handcrafted, it’s the quality and flexibility of the tools that you use that has
the most direct bearing on the quality of the game you’re making.
The issues you face getting the tools you need during the grind phase are
similar to the challenges of preproduction: Limited resources mean that the
engineers assigned to help with tools and pipeline are also the ones most often
poached to fix platform and back-end issues.
If the producer is telling you you’re going to have to wait and the engineers are
telling you that they’re too busy building the fundamentals of your game to bother
with creating the tools you need now, I suggest being as forceful as you can about
getting something now, but do it without being a jerk. Everyone will tell you that
they’ll definitely get you what you need later. But when later comes, they’ll be
buried under an avalanche of deadlines and mission-critical bugs.
Over the course of this book, I often suggest that when the storm comes, the
best thing the designer can do is batten down the hatches, get to work, and hope
for the best. Waiting for tools is not one of those times. Whether it’s roaring
like a giant or whining like a baby, do what it takes to make sure you get the tools
you need to make the best game you can!
If you have any pull on your project in the early phases of your production
process (and if it’s your design, you most certainly should), my advice to you is to
make your tools and tool set the best they can be. Do it early; do it often; and then

ask for just a little bit more.
And if you find nobody is offering what you need, start setting up your own
“interim” tools. If, for example, you’re making a digital card game, you can set up
a simple spreadsheet (in Excel or Google Docs) and begin building a structure for
entering data so that you have a bunch of defined cards and levels when the real
tools do arrive (or the team decides to just go ahead and read in your files
directly).
If your engineers have told you that it’s too early to start implementing the 3D
environment data for your first-person shooter, start building them in whatever
3D software you have and begin logging the files in.
Once you start making things, everyone will have an opinion about what it is
you’re making. If someone doesn’t like what you’re doing, they’ll (hopefully) start
working with you to move things in the right direction.
Engineers especially want to make sure that you’re working in alignment with
what they’re building. If you start heading off in your own direction, they’ll often
show up to help by showing you the right way to go.
If your producer tells you simply to stop making content while you wait for the
team to get around to giving you what you need, take that as a huge red flag. Even
if you end up throwing out every bit of data you’ve crafted before the “official”
tools arrive, being stranded with nothing to do and no influence on how it’s going
to get done is one of the worst places a designer can be.
Waiting for your tools to be “ready” will inevitably lead to you being vastly
unprepared to do your job at precisely the moment the project needs your skills
and abilities the most. Meanwhile, you’ll find your influence has been diminished
in favor of team members who are delivering assets.
I’m not recommending that you be a jerk about it, but you do need to be
insistent and persistent in production. In fact, if someone isn’t telling you to tone
it down just a little bit, you probably aren’t being loud enough.
The core of game design is still more of an art than a science, and it can be easy
for the designer to back down under the constant pressure of things that “must get
done first.” (These days, that usually involves a heaping helping of server
development and big data analysis tools.)

As a designer, you’re reliant on other members of the team to give you the
things you need to get your job done. That means that you must always be
collaborative, but it doesn’t mean you need to play the victim.
When it comes to producing game content, make sure you have what you need
when you need it, and make sure the right people know when you don’t have what
you need.
As the project’s early days slip behind you and your team swings into full
production, you’ll quickly get busy as you realize not only that you’re responsible
for cranking out the game’s content, but also that you’re dealing with the endless
issues that come from refining your original vision and dealing with the reality of
the game as it’s being developed.
When everything is going ahead full steam and you’re completely committed to
the process of development, it can sometimes be difficult to know whether that
feeling of weightlessness means you’re flying or falling. Unfortunately, it often
isn’t until you’re trying to come in for a landing that you can really know for sure.
What’s most important during the time you’re grinding on a game is finding a
way to maintain the energy and passion you need to keep moving forward while
simultaneously facing constantly overlapping waves of good and bad news in
terms of the design itself.
Unfortunately, the types of personalities that are typically drawn into software
tend to have a tough time with self-validation generally, and it can be easy to tie
your emotional state into the current state of the game. I can tell you from
experience that tying yourself to the roller coaster isn’t going to give you the
grounding you need to get through the game.
It’s great getting kudos from your team members, but good design isn’t always
about making your teammates happy, and it’s important to know that sometimes
the most important person to get positive feedback from is yourself.
Remember that on some level, the rest of the team have already placed their
bets on your genius. What they need is for you to be sure of yourself far more than
you need to be sure of them. That doesn’t mean you should be an egomaniac.
Nothing will undermine your creative authority faster than false bravado. It’s okay
to be sure that you’re right and end up being wrong. What’s unacceptable is
knowing that you’re wrong and pretending to be right.

That doesn’t mean you won’t want to have some wins along the way. Everyone
is thrilled when they successfully hit a milestone, and it’s always a good day when
your audience turns out to be as excited by your premise as you are. But when
those big wins are few and far between, the real work can be keeping your head
held high and the project moving forward while hope seems to be fading away.
No matter what you think your best skills are, or how “cutting edge” you believe
your game is, you’ll need to define a trail that you and others can use to both
measure your input and gauge success. Not only does that help you to know when
you’re doing well but it’s also an easy way to avoid allowing the other disciplines to
hang all the failure on the shoulders of your design.
In the early stages of production, it’s the quality of the features coming online
that will earn you the respect and loyalty of everyone else you’re working with. If
everything is coming together, it will be a big win not just for you, but for the
team.
As features come on line, your job will be to quickly test them, give feedback,
and make sure that they’re being filled with enough content that everyone can get
a genuine sense of how they’re supposed to work in the final project.
Rapidly developing and deploying features also means that you’ll be able to get
more meaningful features of your game in front of your playtesters faster, allowing
you to get a better read on what’s working for your audience (and what isn’t).
Getting it right doesn’t just mean being excited about success; you also have to be
honest with yourself when you discover that your most cherished ideas have failed
to ignite anyone’s excitement but your own.
Once elements of the game begin to get delivered, you can start approving
features and calling them done. You can also get to work on fixing what’s broken
before a big crisis comes along and forces you to start making cuts that are going
to hurt both you and your design.
Approved features also give you the ability to push back when the requests for
changes get too big or too outrageous because you’ll have a handy list of just how
much finished work will have to be undone to make that “small” change.
(However, don’t be afraid to turn to your engineers if you’re looking for a simpler
solution to a big problem.)
Of course, your teammates won’t be the only ones suggesting you go back and

undo your hard work in order to implement a few “simple changes.” As your game
begins to come together, your stakeholders will start throwing new ideas at you—
especially once they begin to see your game as a genuine opportunity for making
money. In the past, it was easier to get your game to the finish line without
thinking about marketing and monetization models, but in the modern game
marketplace, things can change on a dime, and if your game doesn’t match up to
the marketplace, be prepared to be forced to change things when you least expect.
Sometimes you can fight back, and sometimes the features you need to
integrate won’t be optional. Facebook, Apple, and Steam are all constantly
changing their terms of service, and what was okay one day may get your game
banned the next!
Even if you’re not getting outside pressure, you may find yourself thinking
about making some big changes. After a few hard knocks and some unexpected
surprises, you may find yourself having the urge to tear down a feature or two and
start all over again. Resist those urges! Once you’re in full production, there’s no
such thing as a truly “simple” change.
If you must you go back in and start messing with your own game, make sure
that you go back and take another look at your premise. There’s no easier way to
send your project radically off course than to start tearing apart the fundamentals
in the name of fixing a “bad” idea that could have just as easily been left alone.
Even if you’re not changing anything, I’d still suggest pinning your premise to
the wall where you can see it every day. Ignoring your premise during production
will radically increase the number of unexpected and unknown outcomes at the
time you can least afford them. As anyone who’s played a racing game knows,
when you first start driving your car around the track, your natural inclination is
to radically oversteer in response to every twist and turn, leaving you weaving all
over the track.
You need to learn to handle the straightaways before you can learn to slide
smoothly through the curves. But unlike the world inside a video game, if you
crash the game itself into enough walls, the whole thing will start to fall apart!
Any change to completed elements will create extra work for everyone involved.
Worse, it will almost always have unintended consequences that will only grow. It
will also cut into the time and attention that every project needs to be well crafted

and battle tested. And when the design begins to break, it’s the designer that gets
blamed, no matter what the actual cause was.

The Big Shift
You’ll know you’ve gotten your biggest issues out of the way when you’re getting
positive responses from your playtests (and other metrics). When the game’s
problems are no longer life or death, the designer’s job shifts from crafting content
and polishing features to the infinitely more intricate task of rebuilding and
retuning the details of the game while simultaneously building content.
The problem is that this kind of detail work can seem boring next to the highs
and lows that came before it. And boring, unfortunately for you, can be good. In
fact, the more boring your job becomes during the grind, the better off your
project probably is. It means that you know where your destination is and how
you’re going to get there.
But when the new features are coming together in a way that is making the
game better than you originally imagined and all the members of the team are
working closely together and delivering resources to each other, that’s good. The
term that best describes this is synergy (although you don’t have to use it).
As a lead designer, one way that I could always tell how well a project was going
was when the stakeholders would come to the work area and start asking random
team members “what are you working on?” If the answer from every person on the
team was a version of the game’s core premise, I knew things were going well.
If, on the other hand, you’re stuck deep in the grind and every new feature feels
as if it’s worse than the one before, don’t be afraid to sound the alarm. If your
team doesn’t have a shared vision and you’re without the tools you need to get
your assets done and implemented into the game, the only thing you’re
guaranteed to be building is a disaster.
As a designer, it’s your job to help smooth over any and all problems and
challenges that come your way—even the ones that aren’t your fault. To do that,
you’ll need to loudly, effectively, efficiently, and positively fight to make sure that
you have the support you need to survive and thrive.
Normally, the content of a synergistic design will feel rich and well integrated,
and the levels will be inventive and fun. There are hit games from GoldenEye to
Angry Birds where it’s obvious that once the game nailed its foundational
structure they had the time and the tools to craft oodles of compelling content.

On the other hand, games where the complicated concepts weren’t finished
until late in the production cycle can often feel strangely dry and clunky. That
doesn’t mean that they won’t be a hit—originality and vision well executed and
properly polished can have a stunning impact on an audience, even if there isn’t
enough content. The oddly stilted worlds of Bethesda games like Skyrim and
Fallout come to mind. Numerous freemium games also tend to have that feeling,
probably because the focus is on crafting the monetization model rather than the
content.
Any time you’re playing a game that always feels like it’s lagging a bit behind
your expectations as the player and you begin to wonder how so many of the
“obvious” good ideas ended up going unexplored, you can be confident that the
reason things are feeling threadbare is a lack of time and tools.
Over time, you’ll come to see that every game faces these challenges. After
you’ve gone through the process multiple times, you’ll begin to develop a sixth
sense about the games you’re playing. You can often tell what games had their
systems well defined early on and where the designer was able to safely and
effectively explore the depths of their own ideas.
Honing that instinct will allow you to look beyond your own work and see
where you can bring confidence and synergy to your own games.


 
The First Playable
The playable prototype exists to show the world that you’ve thought of
something worth playing. But it’s the First Playable that reveals whether you’ve
developed a process that will deliver a game worth making. This is the moment of
truth that comes for every design: when you and the team build something out of
your vision that you can roll onto the launch pad, light up  the engines, and prove
that this odd new rocket you’re trying to build can actually fly.
Whether it’s an E3 demo, an alpha for your Kickstarter, a public beta, or simply
a milestone for your stakeholder approval, the first playable is when you’ll be
revealing your game to be something that is fully capable of interaction with the
outside world.
There’s an old saying that goes “no plan survives contact with the enemy.” The
user isn’t quite your enemy, but it’s worth remembering that they’re not your
friend (yet) either. No matter how you slice it, there’s no way that your design will
survive contact with its intended audience uncriticized or unchanged.
That makes delivery of your first playable a guaranteed transformative moment
—the one that turns your game from a “bunch of ideas” into a big, serious “thing.”
Being playable means that you are (as much as possible) building something that
is fully interactive. The more of your game’s systems you can put in front of your
intended audience, the more you can really learn what’s standing between you and
the torrent of content you’ll need to release with your game.
A good playable should effectively capture and react to all possible user input.
Making a seamless experience that can be played without the user ever having to
restart because they did “the wrong thing” can be accomplished by freely using
pop-up windows, audio cues, integrated art, and other easy-to-implement
elements to create an experience that feels rich and rewarding but also owns the
places where planned elements aren’t fully fleshed out or integrated into the game.
Using a window to reveal to the user that a function hasn’t been implemented
(for example) will inspire far more confidence than simply graying something out.
Sending someone to a noninteractive mock-up screen will let everyone who plays
the game know not only that the designer is in control of the development process,

but that the team is fully aware of the work that needs to be done.
If you can prioritize the playable so that your interactive elements are focused
on communicating your core experience, it will make building every part of your
game easier.
Once your playable goes out into the world, bug reports, notes, feature requests,
and mandatory new requirements will start rolling in from all directions. As the
designer, you’ll find yourself working harder than ever as you try to keep up with
the sheer amount of work that must be done not only to deal with asset requests,
but to keep the core premise of your design together. In the postplayable world,
you’ll be putting in more effort than ever before, and very often it’ll seem like
you’re not getting anywhere at all.
Beyond all those tasks, the first playable is often the moment during production
when the designer, who has up until now been working to define and improve the
most basic features of the game, must step up and lead the project to its next level.
Once the game is officially playable, everybody has an opinion.
If there’s a whiff of success, you can bet that everyone will be jumping on board
to join in on your party—and if you think being ignored is challenging, just wait
until you’re loved! If it comes with the stink of failure, the rest of your production
will be all about “how can we fix it in the time we have?”
From this point forward, it’s no longer about defining the production process;
it’s fully about getting the game you’re making across the finish line. Hopefully, as
I suggested earlier, you successfully used the early days of your grind to batten
down your hatches design-wise, because this is where that effort will begin to
really pay off.
For many modern projects, the first playable (or soon after) will also be the
point when you open the doors and allow an early-access audience to enter into
your alternate reality. Some may have even paid for access to your half-finished
vision, jumping into your broken world simply so that they can claim the privilege
of being able to say that they were there first.
As a designer, you’ll need to do everything you can to keep those early players
on your side. In their own way, these hypermotivated users are now essentially a
part of your team!

What players are telling you is based on their actual experience of playing the
game. You can no longer claim that they “haven’t seen the real game yet” because
love it or hate it, the first playable is as real as it gets!
Since you’ll be getting so much input, you’ll need to find a way to distinguish
between mandatory and optional requests. That makes this a great time to revisit
and reexamine who your stakeholders are on the project. As the uncle of some kid
with a bad bite from a radioactive spider once said, “With great power comes great
responsibility,” and from here on out the stakeholders will need to step up to their
responsibilities. You’ll want to know more from them than simply what it is they
think. Hopefully, they’ll play your game and give you detailed feedback based on
their personal experiences.
If your stakeholders aren’t giving you what you need, now is your opportunity
to remind them just what their responsibilities are—especially if they’re used to
just standing on the sidelines throwing stones.
Don’t be afraid to jump in and question your stakeholders, working to get as
much out of them as possible. If they have veto power over your ideas, you have
every right to have an understanding of exactly what it is they’re asking for.
If your premise is strong, you’ve built a good set of tools, and your structure is
well defined, what you’ll see after the playable is an almost miraculous change as
gameplay and content begin to gel in ways that they never have before. Ideas that
somehow weren’t clicking should shift and improve naturally. Stray elements that
seemed curious or extraneous will now align themselves to the core of the project
(just as you always knew they would).
This is the moment that your game is defined not by its premise, but by the
game itself, and your expectations vanish as you face the sheer wall of reality.
Be prepared because, as your game grows from an idea into a product, you will
discover the sad truth that every parent faces the moment their child learns to
walk: The design of this game is no longer completely yours. Like the child that’s
recently learned to walk and talk, and is now running around terrorizing everyone
at the restaurant, the experience of your toddler is being shared by everyone,
whether they like it or not.
And like that parent, you’ll also discover that everybody thinks they’re better at
your job than you are. After all, what does a designer really do anyway? You’re

just making things up! How hard can that really be?
Like any creative endeavor, whether it’s writing, filmmaking, or even painting,
the instant the fruit of your labor enters into the public arena, everyone who
experiences it will have an opinion not only about it (if they’re paying attention at
all), but about the people who have created it. That’s a problem creative people
face in all media, but in interactive entertainment it’s uniquely challenging
because people aren’t just witnessing your game, they’re playing it, and that gives
their critiques an extra depth of righteousness that you’ll face in no other medium.
The more of someone’s headspace your experience demands, the more they’ll
believe that your rental of their consciousness gives them the right to criticize that
experience. And they will.
It’s fairly common for players to believe that simply learning how to think
critically about their own experiences gives them the fundamental tools they need
to be a good game designer. But criticism isn’t design—especially not the
kind of criticism that comes purely from play.
One of the major skills that separate a designer from a player is being able to
sharpen your critical facility into an actual tool that improves and hones the
experience of your game for every user.

Simply knowing enough to examine your own experience of play will give you
an easy hit of superiority, but it’s useless for real user experience design.
No amount of wishing for a better audience will stifle the endless torrent of
criticism that will come when you share the work you create with the world. (And
no matter what you may think, you really don’t want your product judged purely
by other game designers.)
To deal with criticism effectively, you’ll need to develop more than a thick skin;
you’ll need to add another tool to your designer’s toolbox: the ability to look
beyond the stated opinions of your players and see the true issues that live at the
heart of their complaints.
There’s no amount of experience that will ever make you immune to the
disappointment or anger that can come from a shot of particularly pointed
criticism. But being a designer means having the ability to move beyond the
surface aspects of an experience (even your own) and understand how that feeling
works as a system.
Criticism is feedback, and it can make your game better. But the first step is

turning what’s said into an action that you can take. Encourage and grow that
ability, and you’ll be on your way to being a great game designer.
To do that, you’ll need to rely on more than just your gut. The modern game
designer will also have to understand how to use and review the play data that’s
pouring in from users along with their words. It’s the combination of those
elements that can give you a genuine picture of what it really is that is keeping
your audience playing, or causing them to walk away just when you need them the
most.
Knowing how to properly react to and integrate feedback is critically important
during the prototype, but it’s beyond mandatory once your playable is out in the
world. Whether you’re putting it in front of friends and family or discreetly
deploying it on phones around the world, you’ll need to get a solid version of your
playable in front of as many people as possible as quickly as possible. And since
finding an audience costs money, you’ll need to do it in a way that gives you the
maximum bang for your buck.
For any decently sized game business, the structures for extensive testing will
most likely already be in place and heavily automated. Ever since the social era
(and the rapid growth of the freemium model) began, the formulation of time and
money has become more deeply integrated into the user experience. One outcome
of that has been that the tools for tracking and getting specific feedback for users
have become incredibly sophisticated. (If they aren’t on your project, then
whenever anyone on your project uses the phrase “data driven,” make sure to add
in your own scare quotes.)
Besides what’s been integrated into your game, every distribution platform
offers a bewildering amount of real-time user feedback. If you look more closely
into that, you’ll find that there is an almost infinite number of game elements that
can be improved simply by paying close attention to those numbers. The biggest
issues you’ll face as a designer are figuring out what needs to be tackled first and
how you’re going to do it.
As a modern designer, you’ll be able to craft your dynamics to take into account
user data without doing too much damage to the existing structure of the game.
That’s not the easiest part of your job, but learning how to do it well is now a
mandatory tool in the successful designer’s toolbox.

Remember that if there’s a result you think you need to have, you’ll need to
make sure that you’ve put a plan in place to make it happen.
Once your game dynamic is integrated, you’ll need to put it back in front of
users and see if you’re getting the response you want, and to the degree you’re
looking for. If not, you’ll need to go back to the drawing board. With rapid
deployment and modern tools, there’s no shame in trying again.
If you’re working on a project that’s focused less on science and more on art (or
you believe that you are), remember that even if you’re relying on “classic” creative
techniques, your goal is still about driving a particular response from users in a
way that gets them to pay for your game.
Rather than polishing the funnel or optimizing the economy, your goal will
primarily be removing as many roadblocks as you can between the core value of
your experience and your players’ ability to understand (and interact with) the
intended vision through the game. You’ll also want them to love it enough that
they’ll tell all their friends.
If, as you dig down, the message that you’re getting from your users is that what
they really don’t like is the play of your game, then you have a much bigger task
ahead of you. Revising the premise at this late phase isn’t something that can be
done with just a few interface changes or better-looking content. If the feedback
reveals that they “get” your idea and they still don’t like it, there ain’t no amount of
lipstick that’ll make that pig pretty for them. Or you may just be reaching out to
the wrong audience.
On the other hand, you shouldn’t give up too easily. If you believe your
fundamental premise is solid, often the problem can be how you’ve sent the
message and not the message itself.
It’s always worth testing alternate art, streamlining the UI, or improving the
tutorial. Far too often, the problem that the user is expressing with your gameplay
is one of perception or perspective, rather than a collapse of the core idea. The fact
that you’ve already spent months or years working on it means that you’re
unlikely to have the perspective needed to fully understand the issues that a brand
new user faces when trying to understand and enjoy the experience you’re offering
them.
What they’re really offering in terms of feedback usually falls into one of two

simple categories: “like” or “don’t like.” That can make asking them why directly
very dangerous. Very few people have trained themselves to have the self-
perspective needed to break down their own behavior beyond simply justifying
their existing biases. When people don’t like something, they rarely try to figure
out how they don’t like it. (That’s equally true for rookie game designers, by the
way.) Learning to parse the difference between players’ opinions and their true
motivation is one of the most important skills you can hone as a game designer.
It’s also a core part of understanding how you can harness the power of artful
frustration to create more nuanced gameplay.
As you can see, building up the skills needed to figure out what’s really going
on in your user’s head is a difficult process. No matter how much explanation a
user gives you, how much they think that they understand what’s “really going on”
with your game, or how many questions you ask, most players invariably lack
genuine self-awareness about the way they play the game.
Even with well-developed good instincts about how to parse user feedback,
critical interpretation can be relatively easy to abuse. In the wrong hands, any user
data (especially when compiled into large, anonymous chunks) can often become
an easy way for stakeholders to defend their existing biases and push an agenda to
demand that the designer reflect them in the game.
Playtesting isn’t supposed to be about figuring out who was “right,” although it
gets used that way far too often. Designers are human, and none of us are immune
to twisting that information to our own ends when the opportunity presents itself
—or furiously dissembling when we’re caught doing it.
But being caught is better than letting that kind of political manipulation take
hold in the analysis process. Very quickly, every result can end up being twisted
into proving that one stakeholder or another was “right” all along. Once the data
are being used to attack and diminish contrary ideas while promoting
preconceived agendas, the designer will eventually have to go along with it—fixing
imaginary problems with gritted teeth to satisfy a BS agenda.
My experience has been that this kind of thinking is especially prevalent in
gamification projects (and other projects where the gameplay is secondary to
another business model). That’s because instead of being compared to the premise
of the game, the feedback becomes tied into the premise of the business itself. If
that happens, many members of upper management, seeing their core vision

under attack, will begin spouting all kinds of wild theories as to why what they’re
seeing “in the numbers” isn’t actually revealing flaws in their business model. You
know you’ve really headed down the rabbit hole when they argue that it’s proving
the opposite!
If you’ve never watched a CEO flail as they attempt to disprove the reality that
their “billion-dollar idea” may actually not be flying with users, I’m here to tell you
that those wild gyrations to avoid the pull of gravity can make Wile E. Coyote’s
cartoon antics seem positively tame by comparison.
Game designers, once they see management opening the door to these kinds of
behaviors, can become particularly susceptible to the infamous “cover your ass”
thought virus. Avoid the temptation to fight fire with fire! If you’re hoping to
create a truly successful game that will resonate with users, the designer is the last
person who can afford to be in that kind of denial.
It’s not easy being honorable, especially when you’re being forced to do things
that you don’t want to do in order to get “results” that won’t actually work. Worse
yet, you’ll get blamed for their failure when the expected outcomes don’t appear.
On the other hand, knowing how to implement BS without damaging your core
premise is part of the designer’s job.
Personally, I’ve found the ability to get better at doing things you know will
never work comes from accepting that sometimes you’ll be wrong! When
something you’re sure would never work actually does, make sure you accept it
with enough humility to actually learn from the experience.
The other part of effective integration of feedback is to remember that as long
as you’re entertaining your audience, you’re under no obligation to be honest with
them. Hidden information, misdirection, smoke & mirrors, devious storytelling,
false randomization, and more are all essential tools in a game designer’s bag of
tricks. Your goal is to gather attention, reward interaction, and finish the game.
It’s only once you’ve started to fool yourself that you’ll find you’re lost in a maze of
your own devising. That labyrinth can be impossible to escape.
No matter what the particulars of the situation, your best option is to always
offer something that steers the game away from corrupting the core premise. If
you’ve built a good foundation off a solid premise, you should be able to find a way
to better communicate with the users and improve the experience from a business

perspective. And if you need to rework the vision to fit it into the harsh reality of a
bad situation, then do it honestly, openly, and with feedback from people you
trust.
Parsing user feedback is one of the trickiest jobs you can face in production,
and if there was a game called “thread the needle,” I guarantee you that game
designers would be the best players in the world.
No matter what the circumstance, the best use of your time and energy will
always be finding ways to give your users what they truly want, no matter what
stands in your way. And if what they want you to give them isn’t exactly what
they’re asking for, you need to begin doing a better job of tricking them into
believing that it is!

 
The Crunch–Delivering the Game
There’s probably no more controversial aspect of game development than the
inevitable moment when what began as a grind transforms into the death march
called the crunch.
This phase starts the moment your producer starts trying to compress time and
space in a way that allows you to get everything done as quickly and efficiently as
possible so that you can produce a finished game inside a rapidly closing window
of time and resources. The fact that it’s impossible doesn’t mean it isn’t going to
happen
At its core, crunch time is about getting things done. How that expresses itself
is as a switch from a period of intense crafting to one of intense compromise:
There may still be time to make things better, but now it’s time to just get them
done.
Having heard tales of the horrific toll crunch takes on developers, many people
ask if crunch is truly mandatory. Even with the state of the current development
environment, in terms of both structure and practice, the definitive answer is yes,
you’re going to have to crunch at some point in your process if you want to get
your game out in the world.
I wish it weren’t true, but after four decades of development, I can guarantee
that you’ll end up playing catch-up on every product. As I’ve mentioned many
times before, game creation is a process more than a destination, but it’s also an
innately broken process that often isn’t all that clear about where it’s headed. As a
designer, your instinct should be to strive to improve the process, but at some
point you will fail in that goal. Crunch (in properly administered doses) is the
harsh medicine that may get you over the finish line.
But even if every game must crunch, not all crunches are created equal. What’s
necessary for a small team of half a dozen plucky game developers working in
their basements, crunching hard to create a unique experience we’ve never seen
before, is a far cry from 100+ developers forced to endure 100-hour weeks in 3
cities across the world, desperately attempting to restructure the latest episode of
a sinking game franchise so that it more closely meshes with a newly mandated

business model from upper management.
To put it another way: If the motivation for your crunch is coming from goals
that have been generated by the team that’s creating it, it’s a legitimate way to
spend your time. Completing features, building new technology, adding more
content, and polishing are all great reasons to burn extra hours in pursuit of
excellence.
However, if the motivation for your crunch is mandated externally and
mandated primarily by a line item in a spreadsheet or a TLA (three-letter
acronym), there’s a good chance your time, effort, creativity (and probably your
chances for genuine success) are all being manipulated to allow someone to add a
few extra zeroes to a quarterly report.
Words like “manipulation” and “exploitation” may seem strong, but I’ve spent
enough time at enough different levels in enough company meeting rooms to have
seen both kinds of “crunch” in action. One thing that’s pretty clear to me is that
when the pure passion for your labor of love is being siphoned off into unpaid
hours in service of a problem that you neither caused nor have any genuine
interest in, then exploitation is as good a term as any (and better than most).
You’ll know that your job has been relegated to scraping the bottom of the
creative barrel when the people around you are working simply so that they can
look busier than everybody else.
As I said before, I’m not against crunch. But there’s a right way and a wrong
way to get difficult features integrated and get the game. Tearing apart team
cohesion to solve problems external to the project will almost always add more
failure to the system than it removes.
If being in crunch mode is the only way your business knows how to solve its
problems, you may discover that the cost of victory is a project where the creativity
has been completely drained from your design, replaced by cookie-cutter content
and soulless gameplay.
If, however, your time and attention have been hijacked in the name of ideas
and ideals that you (and your team) never signed up for, your best bet as a
designer is to continue to fight for what you believe to be the truly creative
elements of your game when and where you can. Meanwhile, fight to change the
priorities and pray that your project won’t get driven straight into a wall before

you can get it done.
But good, bad, or indifferent, once the crunch is on, it’s on, and there’s no
turning back. From now until your goals are met, your days will be spent burning
hours and hours in a desperate attempt to fix the weakest parts of your project.
Crunch time allows you to bathe problems with attention and attack failure
with laser-like precision. That kind of focus can be a useful tool, but it’s also one
with rapidly diminishing results.
It isn’t pointed out often enough, but burning the candle at both ends for too
long tends to light more fires than it can ever put out.

How Long Is the Crunch?
It’s impossible to state with certainty the optimal amount of development time
that should be spent in crunch. A great deal depends on the size and scope of the
project, but by any reasonable metric it should never encompass 25% of the
project lifespan. And if you’re crunching more than 3 months straight on any
project, it’s likely you’re losing far more ground than you’ve gained.
The death spiral is pretty obvious when seen from the outside: As your crunch
consumes more and more time, each deliverable tends to reveal new problems
that can “only” be fixed by—you guessed it—more crunching! Once that spin
begins, it’s likely that you’ll be circling the drain of total burnout until the project
is over.
Just remember that once the crunch begins, your primary goal is always the
same: Finish the game by whatever means necessary. You’re in a race against the
clock, your project, and yourself. Who will win?
As a designer, crunch means you’ll probably have more and more difficulty
maintaining your perspective and your premise. The constant firefighting will
destroy your sense of context along with a cohesive sense of vision for the project.
Like the addict on a bender, your life will be measured in the amount of days or
months left until the game ships, and all you’ll be able to think about between now
and then is what stands directly between you and the next fire you have to fight.
I’ve been on too many projects that simply spiral from one crunch to the next—
the mistakes of one previously unobtainable goal feeding the next as the designer
tries desperately to keep up. My advice is don’t try.
Do the best you can for as long as you can, and lean on your premise like you’ve
never leaned on it before. And don’t even think about trying to revise in the
crunch. As satisfying as it might feel to try to fit your concept to your new
circumstances, it won’t work. You can’t make a better snowball while you’re stuck
in hell, so don’t try.

You Can’t “Always Crunch”
After “we’re polishing as we go,” the phrase “we’re always crunching” is
probably one of the most ridiculous and useless things anyone can say to a
project-focused dev team, and yet not only have I heard it spoken out loud, I’ve
heard people say it seriously.
The number of problems contained in that one phrase could probably fill
another book, but simply stated, the belief that crunch should (or could) ever be a
normal condition for development is actually telling the team that they’ll never
truly “crunch” at all. It’s simply stating out loud that as far as your company is
concerned, business hours are now from whenever to whenever, and that’s the
way it’s going to stay until everyone is either rich or dead.
For crunch to have genuine impact (positive or negative) on a project, it must
rely on being an alternative to the normal production process. It works best
because it only works for a brief period—like an afterburner or a shot of nitrous, it
gives a temporary boost in power or speed.
Once crunch becomes the default, all you’re really doing is revving your engine
for no other reason than you like the color of the flames coming out the tailpipe.
Endless crunch is an obvious sign that a business is desperately fixated on
appearances over results. For many companies, it’s also the sign of a business in
serious trouble (or one that’s about to be). For others, it’s about using talent as an
easily replaceable commodity rather than nurturing it as a core value.
If you find yourself stuck working for a business where crunch is a cultural
norm rather than a precision tool, your best option is to stick with it as long as you
must, and do the best you can. And if you do hear the actual phrase “always
crunching” spoken out loud, get your LinkedIn profile up to date because by the
time the project burns out or fades away, you’ll be way too tired to get your ducks
in a row.
So if too much crunching is bad and always crunching is worse, when is it the
“right time” to crunch?
My experience is that legitimate crunch comes in one of two flavors: desperate
or passionate. Either way, the desire to do everything possible is the best solution
when it arrives as a form of obstinance born from the team’s stubborn refusal to

give up. It means that no matter what the challenge, no matter what the outcome,
no matter how far you seem to be from your goal, what matters most is seeing the
game get made.
A focused, passionate crunch is almost always time well spent. It means that
your game not only will get done, but will get done properly. You’ll also be able to
learn from failure and rise to new heights.
But crunch isn’t magic (and if it is magic, it’s the dark kind). One thing that can
easily get forgotten in all the passion and intensity is that it’s not the only tool
available for a project in trouble (even one in deep trouble), and it’s often far from
the best. It also tends to sideline creative vision in favor of driving everything from
the schedule. Great for producers and management, but terrible for the game.
If you’re headed into the crunch and you’re not sure it’s really going to make
things better, you may want to assign someone you trust outside of the team to be
a spotter. Their job should be to keep an eye on you, ask you the hard questions
about what you’re up to, and let you know if they think what you’re doing is
improving the product.
Crunch time is not a place where you can easily make rational decisions, so
make sure that whoever you choose to spot you is someone you trust and will
listen to. You’ll come to realize that offloading your need for rational perspective
will let you do the hard work you need to do and know that someone you trust has
your back.
But if crunch is eating away at your vision, is there any way you can use crunch
time to improve the design of your game? By focusing the voracious hunger of
crunch on eating away at the weakest parts of what you’ve crafted, you should be
able to determine the true core of the experience. It’s within the crucible of the
crunch that you’ll discover what’s cruft and what ideas have been tempered into
cold, hard gameplay.
As the designer, you’ve been the person with all the big ideas—the guy or gal
who dreamed of one day creating the game “you always wanted to make.” You’ll
discover that a solid crunch can be the point at which you’ll be really doing the job
you imagined you’d be doing, all day and every day. It just may not be as much fun
as you thought it would be back when you still thought that making a game would
be a lot like playing one. (And so sorry about everything else in your life.

Hopefully, some of it will still be there when you come back. )
Being stuck in the crunch is a good time to go back and look at your original
premise—the original idea that you defined and what it was that inspired you to
get into all this in the first place. Now look at your current premise and ask
yourself if it’s still worth it. If it isn’t, figure out what’s missing and add it in
because if you didn’t truly love your vision before, you’ll need to find a way to
adore it now.
If you haven’t noticed before, most game designers tend to be somewhat
“unusual” people. That’s because other than your passion, creativity, devotion,
and vision, there’s no genuinely good reason to do this job. The rewards are often
few; the hours are long; the tasks are poorly defined; and your success, when it
isn’t under attack, is often fleeting.
One of the secrets to being able to excel at this crappy job that almost no one
mentions before you start is that you need to do more than simply sell your idea to
everyone else—first you have to convince yourself that the quixotic vision in your
head is worth pursuing from the beautiful beginning all the way through to the
bitter end. If you can’t get yourself on board with your vision, then this may not be
the job for you.
At some point, you’re going to need to lean on your ideas and avoid second-
guessing yourself as much as possible. You’ll be doing that while simultaneously
dealing with issues that range from purely technical to totally political, and you’ll
be facing new challenges on a daily basis. If you can do all that and avoid the
pitfalls and traps that you’ll be setting up for yourself, you just might be able to
make it through and create something exceptional.
Crunch is the true moment of no turning back. Sure, you can quit at any time,
but once you hit crunch, there aren’t really any other options besides stop or keep
going.
You wanted to be a designer? Now you really are one. If you want to keep being
one, your only choice is to double down and move forward.

 
Polish—Finishing the Game
Between crunch and actually releasing your game to the world is what I believe
to be the most important single element of releasing a successful game: polish.
Unfortunately, it’s also the phase that’s least likely to happen.
Because it’s a key to success, polish is a term that gets thrown around a lot in
game development. Everyone gets what grinding is; most people understand the
meaning of crunch; but ask the average developer what the term polish actually
means and far too often you’ll get blank stares in place of a good answer.
Instead of going through the various half-defined explanations and long-
winded excuses that people usually use to define why what they’re doing is polish
when it actually isn’t, let me give you a simple, clear definition that will let you
know whether what you’re doing is polishing your game or simply pretending to:
Polish is the work of improving a game that happens after the project is
complete.
It’s the extra work that happens once you’ve finished all the work you’re
supposed to have done. It’s about being able to get some perspective on the
finished concept and then going back in and improving it in ways that you could
have never begun to imagine when you started out.
A good grind will shape your project, but  only polish can make your game
shine.
It’s said you can’t polish a turd, but if a turd was what you had in mind, I’ll
argue that you can still polish whatever it is you squeezed out.
The only thing you truly can’t polish is something that you never finished to
begin with.
Whether it’s art, design, or story, when you look at any successful game title,
especially those that manage to succeed in the hypercompetitive mainstream
markets like mobile, they’re invariably highly polished projects.
Polish is the heart of what allows a game to level up, and it’s the key to making
your game better. Polish can make a good game great and turn a great game into
something awesome.

True polish is also something that never happens by accident. It only occurs if
and when someone makes time for it. If you want to have time on your project to
buff your game until it gleams, then whoever it is that’s in charge of your schedule
will need to plan for it. And then they’ll need to fight for it in a way that no one did
back when you were trying to eke out some extra hours or days for preproduction.
So why is it that one of the most important phases of any project—one that is so
often the true make or break when it comes to success—is always the first thing to
get entirely pushed off the schedule?
First and foremost is the launch date. Usually these are “set in stone” with
marketing, management, and everyone else screaming loudly that shifting the
date will undo the entire house of cards. And, depending on how things have gone
with previous projects, your company may desperately need the money they hope
the game will bring in. In case you’ve never been to business school, it’s a fact that
desperation is never the right reason to make a business decision.
But no matter how “immovable” your launch date is, if your game needs polish
time it should be the producer’s job to convince management that polish time is
necessary. The producer will also need to convince the rest of the team that they
need to put in more time and effort on a project that’s already stolen their lives
and utterly exhausted them. The producer may even have to convince you.
Unfortunately, designers aren’t immune to the grueling pressures of the
development cycle. At this point, you’ll be facing the same physical and mental
burnout as the rest of the team. One of the worst symptoms is a complete loss of
perspective. After months of firefighting, you may simply be too close to the
project to see where the imperfections are and too crises focused to truly figure
out what you can do to improve things.
Hopefully, you can overcome this deadly inertia and get excited once again.
Polish is yet another point where the designer must switch hats, leave the content
developer hole, and go back to playing the team visionary, inspiring everyone to
take something that’s already good and make it better.
One reason that a team can be resistant to polishing their own game is that this
phase always comes at the worst possible time: After a bruising crunch, everyone
on the team is desperate to get the product out into the world and get back to their
real lives. Now here comes the polish phase: yet another impossible task blocking

your game from getting into your eager audience’s hands.
When you don’t even know what your own game looks like anymore, it can be
very difficult to figure out where to apply the shine. Even if you have managed to
maintain perspective, you’ll need to face up to the fact that after a bruising crunch,
it’s possible that the team members may not be nearly as into hearing your pep
talks and inspiring speeches as they were when things first got started.
Luckily, you have other allies. With the game this close to completion, you
should have gathered a ton of outside feedback from a variety of different sources.
Hopefully, the playtesters’ messages about what elements still need to be
improved are coming through loud and clear. If you’ve designed your game
properly, you’ve kept your premise current and focused, and your producer has
managed to keep your project from heading too deeply into a permanent crisis
mode, the remaining issues should be solvable through a liberal use of polish
rather than by major structural changes.
If, for example, the feedback you’re getting is revealing that it’s the interface
and user interactions that are keeping your players from the experience they want
to be having more of, then that’s where your attention should go.
If you’ve done things right, it’ll be small changes, not big ones, that will have
the biggest impact in the polish phase. Likewise, complaints about difficulty, level
structure, rewards, etc., should all be cleaned up using your existing tools rather
than having to go back and build anything new.
If you’re lucky enough to be on a project with a clear polish phase, avoid the
instinct to reopen closed features with all your remaining energy. No matter how
disappointed you may be, or how sure you are that all the game needs is one more
new thing, the polish phase is not the time to try to add anything fundamental into
your game. Coming out of the grind, your residual lack of perspective will leave
you unable to fully comprehend the unintended consequences of reopening closed
issues.
Worse, you won’t be alone in wanting to make big structural changes. Your
stakeholders, now that they can fully see what it is you’re making, may be open to
the kind of changes you dreamed of having back in the grind. But beware, once
you start down that road, you may discover that many settled, stable parts of your
game will not only wobble, but crash.

I’ve seen projects go from highly stable to critical simply because the designer
couldn’t leave well enough alone. Worse still, I’ve been the designer responsible
for making it happen—fully convinced I was doing the right thing at the time. It’s
not a recipe for a happy ending…
For better or worse, once you’ve reached the polish phase, the majority of big
decisions (and the big compromises) not only have been made, they’ve been fully
baked into the structure of the game in ways beyond imagining. No matter how
tempting it may be to try to improve things, your opportunity to make any
fundamental changes to the design of the game has passed.
The real work of polish isn’t about fixing things, it’s about determining which
are the best and most well-crafted elements of what you already have and taking
them to the next level while removing the surface-level flaws and blemishes. In the
real world, the act of polishing adds luster, and it does so by gently removing the
rough edges. You can’t make anything shine simply by hacking pieces off or gluing
more on, so don’t try!
One reason that clones, sequels, remakes, and other games that rely on well-
worn dynamics often tend to have an easier time finding an audience than new,
original ideas is that the majority of work being done on “me too” titles ends up
being polish.
If you’re making a licensed game, for example, one simple way to reduce the
epic struggle of getting your game approved is by picking a well-worn game
dynamic, tweaking it just a little bit, throwing the face of your hero/villain/robot
onto it, and then polishing the dynamics for all they’re worth before you throw
your game up on the App Store and pray for an editor’s choice award.
Polish is key because it isn’t just about improving your project; it’s about
honing your skills as a designer. All the effort you put into polishing your game
should be about making it a better experience for your audience: a group of people
that will never see and never care about all the blood, sweat, and tears that you
have poured into the game. For a player, the proof is in the playing, and no
amount of tweets or articles about how hard your game was to make is going to
make your audience any more sympathetic if they don’t enjoy playing it.
Some companies’ entire focus is on polish. Blizzard has been about taking
existing dynamics and polishing them over and over again until they seem to

almost be completely different experiences from the ones they were initially
copied from. Popcap built its reputation by taking products that would be, at
almost any other company, ready for release, and spending months or even years
polishing the experience until it was like nothing else out there. SuperCell has also
built a top tier business on providing quality.
And it’s not just game companies that use their ability to apply polish to find
success: Books and magazines are carefully checked for content and grammar
before being laid out for print. Covers are crafted to carefully catch the eye, and
layout is checked and rechecked as part of the production cycle.
Movies and television have realized the importance of the polish phase from the
earliest days and have generous postproduction phases where raw footage is
meticulously manipulated and edited before visual effects, sounds, and music are
added in, polished, and refined.
A great deal of what makes a blockbuster feel “big” is the generous helpings of
polish that are put into turning an action sequence from a concept into a big-
screen reality. It’s that effort that can turn something shot on a green-screen-
covered soundstage in a Hollywood back lot into a blockbuster in a galaxy far, far
away.
It’s true that the production cycle of linear media is much more amenable to
polish than that of interactive entertainment. That’s because the technology used
to create movies and TV is far more stable than the software we use to make
games. Most of the fundamental elements in the process of making a movie have
been the same for the last century, and when innovation does come to filmmaking,
it’s usually in the form of something that genuinely improves the process of
production (digital editing, for example) without fundamentally reinventing the
user experience.
Film studios usually won’t bet the farm on an untested technology until they’re
absolutely sure that it won’t take the whole audience with it. Even technologies
that do impact the viewer (3D, high frame rate, IMax, surround sound, etc.) are
often optional—at least at first. Viewers can choose to see their favorite film in 3D,
but it isn’t mandatory.
Innovation in games has been driven by technology since the start. We’ve
traditionally bestowed the greatest accolades on the titles providing the biggest

innovations. Game design pushes the limits and demands that users come to us.
It’s easy to understand why things have been this way for so long: When it
comes to interactive entertainment, every bold new idea can actually raise the bar
on what a game can be. Thinking about the possibilities can literally cause the hair
on your arms to stand up on end with excitement.
But there are numerous hidden risks that come from relying on hardware to
drive innovation. There are far more misses than hits when it comes to the “next
big thing,” and you may find that your game is impossible to finish properly
simply because the dates and times promised by the companies developing the
technology you’re relying on don’t match up to your schedule.
It’s also impossible to polish your software for a piece of hardware that doesn’t
exist yet or, worse still, doesn’t have a critical mass of users. That’s why so many
interfaces developed for consumer gadgets come out looking far more like a tech
demo than a crafted piece of consumer software.
The irony is that it’s that innovation that is precisely the thing that needs
polishing the most. The fundamental skill set of many of the genius innovators of
the modern era isn’t about producing new technologies, it’s about having a deep
commitment to taking existing technology and revealing it to users in a way that
allows them to have a deep and visceral understanding of what makes that
technology exciting and valuable. Knowing how to polish for innovation is one of
the main reasons that Apple has managed to become (and stay) one of the world’s
largest companies.
The rest of the bad news is that game design almost never drives technological
innovation; we simply respond to it. Building games for unreleased innovation
means you may be forced to drop major features when the reality doesn’t live up
to the hype.
There’s possibly no greater technical challenge for a designer than trying to find
a way to revise your big idea when the fancy new piece of technology you were
originally designing the game for vanishes into thin air.
Far too many fantastic, unpolished ideas end up being left behind with nothing
more than a few postmortems and a handful of ardent fans who were willing to
look past the poor design choices and uncover the hidden gem it contained.
Big studios like EA, Ubisoft, etc., understand the value of polish all too well—

they long ago learned that if you sacrifice innovation early and often you can
simply replace novelty with a heavy amount of craft and content and you’ll get the
perfected experience needed to satisfy a mainstream audience that’s hungry for
more of what it is they already love.
But for the rest of us who are struggling to find our core dynamic, crashing
through deadlines, and/or simply lacking the resources we need to execute our
vision, we must hope to make up for those shortcomings with sheer determination
to succeed. Polishing your experience is the purest expression of that passion—a
promise between you and the player that you will reward their time with the truest
expression of the value of your premise.
If you believe in your game, and you believe it really has something to offer,
polish is always worth fighting for.

The Pitfalls of Polish
Although polish time is almost a universally good thing for the project, it’s
always a tricky phase for a designer. Not only do your role and responsibilities jerk
back from content creator to visionary, there are a number of other pitfalls worth
watching out for.
First, putting polish time on the schedule is firmly in the hands of your
producer. A seasoned designer will, by this point, be relying heavily on their
producer to do the good work of getting them as much polish time as possible.
Unfortunately, there are plenty of producers who don’t really understand or value
what the polish phase brings to a project. If the person responsible for scheduling
your game hasn’t ever managed an interactive entertainment before, it’s unlikely
that they’ll recognize the genuine need for adding more creative time at the end of
the project. (Some producers don’t recognize the need for any creative time, but
that’s another story.)
It’s also been my experience that sometimes when the doors do finally swing
open to what’s being called a polish phase, what they’re actually offering isn’t
polish at all. “Fixing” a badly broken project entirely through the “magic” of design
isn’t polish, it’s desperation. And as a designer, it’s all too easy to take on that
responsibility. Unfortunately, it can lead to a vicious game of CYA, where the
blame for the debacle that is about to occur falls squarely into the designer’s lap.
Unfortunately, even if you know you’re being set up to fail, unless you are
running the company, or are a marketing genius, it’s almost impossible to avoid
taking the hit once the “kick me” sign has been attached to your back.
And once the knives are out, it may seem like a good idea to start stabbing
yours into other people’s backs, but my experience suggests that it’s always better
for the designer to take the high road, no matter what the cost. Getting people to
respond to your direction is something you have to earn, and during both the
highs and lows in my own career I’ve learned it’s not what you do but how you do
it that people will remember in the long run.
If you can survive the tempest of a poorly planned project with your dignity and
composure in tact, you’ll find that the people who plunged the blade into your
back the deepest will be the ones calling you up to talk about the next project.
Whether you think that working with them again is a good idea is entirely up to

you.


 

POST PRODUCTION

Launch & Beyond
If your vision has successfully traveled through all of the previous phases, and
navigated all the unexpected attacks from above and below, your flawed
masterpiece should now be ready to be released out into the world.
No matter what it’s taken you to get to this point, don’t forget that the release of
a game should be a time for celebration! Reaching this phase means that you have
managed to navigate one of the most difficult creative tasks in the modern world—
creating a functioning piece of polished interactive entertainment! It may seem
like everyone you’ve ever met is working on a game, but they haven’t all released
one. That makes you a member of a unique and special club.
CONGRATULATIONS!
Your game, despite all the compromises, mistakes, failures, and lessons learned
along the way, is now real. Now it’s time for your digital creation to go and face its
greatest challenge: finding an audience!
Every game launch comes with challenges. In the modern marketplace, with all
its social elements, you’ll be facing a blizzard of feedback from what will
(hopefully) be a growing audience of passionate players. In the weeks or months
following your launch (and starting as early as the beta), you’ll be responding to
the unique issues that can only appear when a game is being played at scale.
Those issues include user exploits, broken player funnels, systems failures,
violations of your chosen platform’s terms of service, and a thousand other hidden
flaws that will only appear once your game is out in the wild.
And after that initial firefighting is done, your role as a designer will change
once again! The responsibilities of a postproduction designer depend on a number
of factors: the structure of the company you’re working for, the type of software
you’ve created, the success of your title after launch, your social media and
monetization features, and most important, your personality.
More outgoing designers will lean toward being heavily involved in the
marketing and release of their game, while more introverted designers’ only
interest after completing a title will be to immediately start moving on to the next
one.
If you’re an indie developer, whether or not talking about your game is what

you like to do, your job postlaunch will be to get out there and tell the world (as
loudly as possible) about your project. If you’re a cog in a large corporate
structure, you’ll be meshing with marketing to explain the ways in which your
game is supposed to reach your audience, but unless you’re already a celebrity,
you probably won’t be directly involved with the marketing yourself.
No matter what your personality, there is no more powerful advocate for a
game once it’s out in the world than its designer. It’s your baby, and if you aren’t
going to fight for your game, who will?
The best trick I’ve found to improve my marketing skills has been to focus on
the marketing as a game, where the goal is to gather together the attention of as
many people as possible.
The struggle that most designers face when confronting marketing challenges is
the reality that there’s always going to be an incredibly high ratio between the
number of people who interact with your product and the number who actually
like it. Back when the world was a place where the majority of people who didn’t
connect with your game could simply place it back on the shelf, rejection was
much easier to ignore. Now every negative opinion leaves a trail of bad reviews
and big data behind it.
It’s worth confronting your distaste for marketing and seeing if it’s simply a
lack of toughness in the face of rejection. Remember that understanding the
audience to your game is one of your key skills as a designer. Don’t give up on
communicating your passion just when your project needs you the most!

 
The Power of Platform
People have been asking for decades whether games are “art.” Certainly some of
them can be, but the majority of games will never have the luxury of existing as
either pure art or pure commerce. The most successful designers understand that
if their games are going have any chance of making enough money to justify their
own existence they’ll need to be a blend of both.
That’s why I’m always surprised by the resistance many designers have to fully
integrating the elements that their game needs to successfully compete in the
modern marketplace into their design. Whether it’s the Apple store, Steam, the
Xbox, Playstation, or a humble bundle, your game will have to battle for attention
across hundreds of websites and platform pages to get seen and played by users.
Doing that efficiently means choosing your game’s primary platform as early as
you can. That allows you to combine a knowledge of that particular platform’s
strengths and weaknesses with the methods you’re going to use to monetize your
game.
If you’re an indie developer, choosing your launch platform is entirely up to you
and your team. In a large, corporate environment, you’ll probably have zero input
on where your game is going to go, but plenty of responsibility when it comes to
integrating your project properly.
Some designers think integration is simply finding the “best” platform for the
game they’re creating. Don’t do this! Remember that as designers we’re constantly
working to make explicit choices about how to best integrate our premise with the
user vision.
Worse still is coming up with all kinds of excuses and justifications why what
you’re already doing will solve your platform integration issues. Don’t do this
either! Ignoring your platform is an invitation to fail. Not doing the basic due
diligence needed to make sure that your project is properly integrated will not
only leave you at a disadvantage, on more conservative platforms (such as Apple)
it may keep you from ever being released to begin with.
Many designers treat platform as an afterthought and monetization as some
kind of curse. But if you don’t make the hard choices, it’s going to be your users

that make them for you. Once you pick your platform, you’ll need to start thinking
commercially as well as artistically. If you don’t want to do it for yourself, do it for
your game.
Failure to properly consider your platform makes it far too easy to become one
of the numberless forgotten titles that should, by all rights, have been highly
successful. It’s tough to see a great title that’s nailed it on almost every level fail
due to poor platform integration or tragic monetization integration.
Even if you believe that you’re making an ethical choice by avoiding those
elements, it’s doubtful your users have signed up to be part of your revolution.
And if you’re constantly frustrating your audience by avoiding the things that they
expect to see on their chosen platform, don’t be surprised if most of them move on
from your game simply from the cognitive dissonance. It’s hard for people to see
the brilliance hidden inside when they can’t even open the box.
Success comes with its own challenges, and when players begin putting money
and time into your product, their interest will switch from curiosity to expectation.
And in a world where entertainment options are infinite and time is limited, most
people aren’t shy about telling you when they think you’ve wasted theirs. Just be
careful to weigh the words your players are using against what the data are telling
you: Just because someone tells you loudly on Twitter they’d never buy your game
if it has in-app purchases doesn’t mean they’re telling you the truth. Like any user
feedback, your job as a designer is to dig beyond what’s being expressed and look
for the real motivation behind your user’s behavior.
From the moment you decide where you want your game to go, someone on
your team should be reaching out to the people on that platform who can tell you
what you’ll need to do to earn some featured attention for your launch.
You should also be looking at the other popular titles on your chosen platform
in order to figure out the best way possible to align your game with the
expectations of your players. Once your game goes out into the world, whether
that’s after release or even in a public beta, you can’t take the launch back again.
Once the game releases, you’ll need to be prepared to take all the criticism that
will inevitably come from your audience (and more). If you’re still reeling from the
burnout of the development cycle, it will be difficult to wrap your head around
postlaunch work, so be sure to take a few days (or even a few weeks) off if it is at

all possible. In the postlaunch phase, a lack of perspective when engaging with
user feedback can be a toxic combination.
Postlaunch and game marketing opportunities is a topic I’ll be covering in far
more detail in the next two books in this series. I can’t even begin to give the topic
the justice it deserves in this small chapter, but remember that preparing for, and
dealing with, the realities of your game in the virtual marketplace has impact on
your design, whether you like it or not. Don’t ignore it!

The Dashboard
Even back in the days when most games came in boxes, the walls between play
and commerce were never as thick as we liked to imagine they were. Add-ons,
expansion packs, and sequels were always on the shelves. Unlockable content and
patches have been part of game development since the dawn of the Internet.
But with the rise of online stores such as the Apple App Store and Valve’s
Steam, any true barriers between art and commerce have fallen over the past
decade.
With direct access to user data, the models for growing, maintaining, and
monetizing that audience have become more and more sophisticated as more and
more products battle it out for a sliver of the ever-diminishing amount of audience
attention.
Meanwhile, in response to the surge of content, audiences began demanding
larger and larger chunks of their game experiences for free.
The modern designer must make sure that their game fits into this world by
making sure that the game can properly connect to the methods for postdownload
profit that have been integrated into it. This includes things like the user funnel,
constant content releases, “pay to win,” and many other elements that can seem
like an attack on the core vision of an unprepared developer.
And there really is no shallow end to the pool. Once you jump in, you’ll be
drowning in data and content. To help manage the flood, most platforms (Steam,
Apple, Android, Amazon, Facebook, etc.) will provide some form of dashboard
that well let you see how your product is doing (and who it is doing it for) in (or at
least close to) real time. There is also a dizzying array of data dashboards that
allow you to plug in your data directly to turn the torrent into useful information.
And if your engineers are masochists, they may actually build you one by hand.
Many old-school designers, determined to remain focused on “pure” gameplay,
will actively avoid these tools, denying themselves a deeper understanding of the
impact that monetization and platform integration are having on a generation of
gamers.
I believe that if you plan to keep on being a designer in the 21st century, it’s
vital that you not only have at least some understanding of how these dashboards

work, but gain at least some skills in understanding the arcane insights they can
reveal if you know how to use them correctly.
Every designer has to make their own choices about how they interpret and use
the data available to them, but it isn’t hyperbole to say that the integration of user
data and data dashboards has had one of the biggest impacts on gaming since the
VGA color monitor took us from 16 to 256 colors.
I’ve personally always found data dashboards interesting as an exercise in pure
design. There are some definite similarities to game interfaces in the way they try
to lead the user to certain conclusions and break down data in a way that is
obvious and approachable.
In some ways, they’re the closest things I’ve seen to a tactical interface for the
real world. There’s no doubt in my mind that many of the features of the best
media dashboards deliberately mimic some the best game UIs (although they’re
never quite as much fun). Diving in and out of user experience data can, when
viewed from the right angle, be a game in and of itself.
I’ll be covering this in a lot more detail in the next two books in this series, but
there’s no time like the present to begin familiarizing yourself with all the data
that’re available to you as a designer and figuring out how to get your players more
excited about your game than ever before!



PART 03
KEYS TO GREAT DESIGN
 

 

Unlocking the Keys
This book is about the process of designing a game in the modern development
landscape. It’s a big topic—one that could easily fill a dozen volumes this size. My
goal has been to provide the core elements that will give you the best shot at a
successful project. Hopefully, through reading it you’ve gained some genuine
insight into how to be a designer, and gotten a better understanding of why
designers do the things they do.
In each of the following sections, I’ll recap some of the advice I’ve given you in
the preceding sections as rules you can lean on when things get tough or you just
need some inspiration. I hope it will help you to improve your own process of
design.
 

 

DESIGN
 
Whether you’re designing a game, a bridge, or
a hair dryer, the fundamental act of design is
always about solving your user’s problems.
The act of designing something is fundamentally user focused. If you’re not
thinking about how people besides yourself will be interacting with your game,
you can only guarantee that one person will play, and you’ll be getting it for free.
Criticism isn’t critique—especially not the kind
of criticism that comes purely from play.
One of the major skills that separate a designer from a player is being able to
sharpen your critical facility into an actual tool that improves and hones the
experience of your game for every user. Simply knowing enough to examine your
own experience of play will give you an easy hit of superiority, but it’s useless for
real user experience design.
Games are intentionally crafted artful
frustration.
To create a “game-like experience,” developers must not only put effort into
defining a clear goal or victory condition but also define obstacles (in terms of
rules and/or dynamics) that impede players in their quest to reach that goal.
These tasks must be challenging but also feel reasonable and intentional.
 
A great design doesn’t make a game great; a
great designer does.
A well-designed game is something molded and crafted in response to the
process of making it. One of the designer’s greatest challenges is providing a
steady stream of new ideas in the face of every challenge. They have to do this
from the first moment they come up with their concept to the last day they’re
working on the game.

One of the most transformative moments for any designer comes when they
stop trying to make a great game and focus on making a truly entertaining one.
Know the limits of what design (and the
designer) can do.
When things start going wrong, it can be comforting to believe that you’ll be
able to design your way around every challenge your project is facing. You can’t.
Because your skills allow you to shape the user experience, your instinct will be
to change the shape of the project to fit the challenges you face. But more often
than we’d like to admit, the only way that a problem can be fixed, especially if the
problem involves fundamental features and core content, is more time and money.
When someone criticizes your design, they’re not attacking you. Maintain calm
and focus in the face of even the most brutal feedback.
Every design is improved by the critical process, especially yours! You don’t
have to act on all the feedback you get, but you do have to master the skill of
listening to it all.

Your game design will always be a reflection
of the process you’ve used to create it.
During the process of production, your design will go through many changes as
you come up against the limitations of your production process. Be prepared to
change your vision as well, depending on the process.
Design describes the shape of how you will
interact with something, but it is not the thing
itself.
Since the game itself doesn’t exist until the end of the development process, it
can be easy to believe your game design is the actual game. It isn’t. It’s just a
description and an intention.
Always be prepared to change your design in the face of reality.
The role of the designer changes in every
stage of development.
The designer begins as a creative visionary, transforms into a production artist,
and then must return to the creative role at the end of the project. Be prepared to
wear all those hats, and be gracious in the transitions.
The player’s fundamental goal is always to
escape from their “real” life into a well-crafted
experience with a satisfying and rewarding
outcome.
Life is messy and unpredictable. People play games so that they can enter into a
world where there are clean and predictable outcomes. That’s a big part of what
makes a game “fun.” It’s our desire to celebrate and share our achievements that
makes games addicting.
Good design allows us to define predictability in our interactions. Done well, an
interactive experience can offer a player satisfaction far beyond any other medium
ever created.
Every designer must make their own choice
about how they interpret and use the data

available to them. Make that choice!
Integration of user data has had the biggest impact on game development since
the color monitor.
To win the war, you must be willing to lose
some battles along the way.
The technical term for this is “compromise.” Too many designers harbor the
mistaken assumption that accepting it is some kind of failure.
No matter how rich and compelling your vision is, you can’t know everything
when a project begins. Use every failure as an opportunity to learn and improve.
When the design breaks, it’s the designer that
gets blamed, no matter what the actual cause.
Every game must ultimately perform its best under the pressures of being
played in the real world. If people aren’t playing it the way you intended, it may be
that your initial concept was too complicated or the process is a bad match for
your ideas.
Even if the challenges you’re facing seem impossible, it’s still up to you to be
sure that you’re designing something that can actually be made by your team with
the resources you have.
Once there’s a solid development structure
underneath your project, make sure that your
tool set is as rich and well developed as
possible.
Despite the old adage about a craftsman only being as good as their tools, the
designer needs to define what it is that their tools must provide. The designer is
also responsible for making sure that the team is building and refining the tools as
early in the production cycle as possible.


 

COMMUNICATION
 
Making a game better is first and foremost
about building an effective platform for
communication.
If improving the quality of your communication is your north star, you’ll always
be sailing in the right direction.
When it comes to producing game content,
make sure that the right people know what you
need before you need it.
And once you have what you need, make sure that people know you have it so
they can consider it done.
Like a spider in the middle of a web, a
designer must be aware of and prepared to deal
with any and all emergencies, opportunities,
and crises as they happen.
Being an effective designer means always keeping a solid vision of the game’s
fundamental structure in your head. No matter how many things go wildly wrong
(or wildly right) during the production process, it’s your job to keep your game
stable.
That means being the project’s greatest advocate no matter what challenges it
faces during production because you’ll be the only one who’s paying attention to
the overall structure of the entire game as a working system.
 
Don’t be afraid to ask your stakeholders for as
much detailed information as possible.
Stakeholders hold veto power over your ideas. Whether it’s criticism or praise,
you should have as deep as possible an understanding of exactly what it is they’re
asking for.

It’s your job as the designer to keep
communicating with everyone about what
you’re creating.
Whether the problems your project faces are professional, personal, creative, or
structural, the failure to advocate for your game during a crucial moment can
transform a crack in the road into a project-killing sinkhole.
And even if you understand your responsibilities and are ready to fully advocate
for your project, you may still face unavoidable problems. Know when to reach out
and ask for help!


 

PROCESS
 
It isn’t a great idea that’s fundamental to
making a game great; it’s the ability of the
designer to navigate the process.
By deepening your understanding of how the designer’s job changes through
the process of game production, you’ll build the temperament and tools you need
to craft an amazing game.
The best way to express your core inspiration
is by clearly defining your premise as a
statement of play expressed in a single coherent
statement—usually in a sentence or two.
A clear premise boils down every element of your grand, life-changing, genre-
defying, totally unique, utterly compelling vision into a single, easy-to-
communicate idea. When done right, it will contain all the core elements that
define your game and will inspire, enlighten, and delight the people who hear it.
There are unavoidable problems that arise
when a process has been intentionally
structured to keep creatives from having “too
much control.”
Corporate environments always work to limit risk, even on projects that are
fundamentally creative endeavors. That’s because a creative process is always
trying to define new goals as well as define innovative solutions.
It’s fine to define limitations as long as they’re clearly stated before the project
begins. The trouble starts when a designer runs into unspoken limitations during
the process of production and finds the most obvious (and often necessary)
solutions are not available to them.
The tension between creativity and analysis works best when the designer
knows their limitations and is able to work with the producer to provide structure
and goals for everyone on the project. That way the team will know what they

need to do in order to support a designer in building a unified vision.
In return, the designer must constantly be delivering what the team needs to
succeed and keep the project moving forward.
A great concept document communicates the
fundamentals of the experience you intend to
create.
It will also act as an outline for your design document and the proof of concept
and provide the foundation for your prototype.
An effective proof of concept can be summed
up in a single phrase:
“Places to go, people to meet, and things to
do.”
Every interactive experience must have at least one element that the player will
interact with in a direct and emotional way. If there’s something in your game that
the player will either cheer or curse, then that object is a character.
By properly defining your character elements in the proof of concept, you’ll be
unlocking an emotional pull on your player.

The goal of the proof of concept is to
effectively reveal your core experience through
actual gameplay.
If the people who interact with your POC come away from the experience with a
deeper understanding of the fundamentals of your vision, you’ve done it right.
The proof of concept should allow a player to
experience how entertaining your project will
be.
A POC isn’t a complete game, but a way to clearly communicate and test what
you believe are the fundamentals of your game experience.
If your prototype is disappointing, rather than
asking “how did it all go wrong,” focus on
finding and fixing the issues that are keeping
your vision from resonating with your players.

When things don’t go right, everyone’s first instinct is to try to assign blame.
Don’t fall into that trap! Blame only helps when it’s identifying broken elements
that can be fixed.
Dig in and figure out what it is about this game and this process that aren’t
working well together. Working with your team and discovering how you can
improve things as quickly and as elegantly as possible is always the best way
forward.
Change is good, but only if you end up replacing the original idea with an even
more motivating and exciting premise.
The design document is the blueprint that
your other team members need to craft your
game.
A good design document makes your ideas accessible. A great one allows you to
share them, improve them, and make them to grow.
Changes made to delivered game features will
always create far more work than expected.
Even if it’s being done for the best of reasons, revising completed features will
always have an impact far greater than anyone can account for. Worse, those
unintended consequences will cut into the time and attention that every feature
(good or bad) needs to be tested and polished.
That doesn’t mean you should never do it, but you should always expect the
unexpected when you do.
The cost of crunch is paid from the core vision
and the premise of your game.
The more time you spend crunching, the more of your vision you have to
sacrifice just to make your game work.
Crunch is an opportunity to attack specific
problems with laser-like precision.
Because crunch has the tendency to add as many problems as it solves, it’s best
used as a tool to tackle specific issues with clearly defined outcomes. Crunch can

be a useful tool, but it provides rapidly diminishing returns that are often
impossible to see from inside the process.
Too many projects simply spiral from one
crunch to the next—the mistakes made solving
the previous crisis becoming the cause of the
next one.
If you’re crunching with no end in sight, you may just need to declare victory
and go home. Your loved ones miss you.
Endless time and money can be spent creating
content, acquiring an audience, and crafting
your funnel, but if the gameplay isn’t polished
and clean, you’re building your project on
quicksand.
To be most effective, your monetization and discovery elements will need to be
integrated directly into your design, but they will never be able to replace or
improve a poorly designed game.
It’s only polish if it’s done after the game is
complete.
You can’t polish what’s never been finished.
They say you can’t polish a turd, but if a turd
was what you had in mind then you can make it
shine.
Polish doesn’t automatically make everything better, but it will definitely bring
clarity to every project that it’s applied to.
Once the crunch begins, there’s no turning
back.
From now until your goals are met, your days will be spent burning hours and
hours in a desperate attempt to fix the weakest parts of your project.
 



PART 04—OVER THE CUTTING
EDGE
 

 

Stepping Back
Although the industry has been resistant to accepting the truth, after four
decades of being primarily driven by new technology, game innovation no longer
lives on the cutting edge, and there’s no discipline that has been more impacted by
this than design.
Up until a few years ago, entertainment was the best way to explore the
possibilities of new technologies, allowing players to test out innovative
experiences in low-risk environments. Experience-focused innovation allowed us
to imagine a better future and made sure that games were always on the cutting
edge. Faced with the new economic reality, interactive entertainment now finds
itself fighting for the same limited resource of human attention that every piece of
software is battling for.
But recent innovations in data collection have shifted the primary focus of
software from improving human–machine interaction toward bulk analysis and
processing of human experience (big data). The cutting edge of user experience
has moved away from being user-driven to being data-driven, with analysis and
financial information centered on monitoring, streamlining, and optimizing the
user’s time. What was once primarily technological innovation designed to
improve the user experience has moved to “disruptive” technologies designed to
maximize profit.
Games are a maturing medium, and we’ve gathered a lot of the low-hanging
fruit. Those designers who cling to the belief that the future of games must
continue to be about revolutionary changes in gameplay are missing where the
real action is. Instead, innovation in games has become evolutionary, with each
generation building on the games that have come before rather than reinventing
the genre every time.
That’s not necessarily a bad thing. Movies have been an evolutionary medium
for almost a century. New technologies in film appear mostly in the production
process, with the few upgrades on the user end (3D and sound, for example)
mostly minor upgrades to the core experience. Similarly, after a dizzying switch to
high definition and digital, television has now focused back on content—figuring
out how to integrate advertising and secondary revenue streams into linear

content. This has allowed TV production to enter a second “golden age” despite
the ability to easily download content illegally and the rise of a bewildering variety
of alternative platforms to on-air and cable.
Similarly to the innovations in television, I believe that the success for the next
generation of games will come from the ability of designers to begin to conceive of
(and execute) truly visionary design concepts that are focused on innovation on
content and monetization rather then simply riding the next wave of technology.
And new models of interactivity (such as e-sports, mobile, and social games)
are constantly moving forward, allowing us to find unique ways to blend
gameplay, social interaction, and mind-blowing experiences with new models for
monetization.
It’s possible that new mediums for play, such as virtual and augmented reality,
will usher in a second golden age for game innovation, but my instincts tell me
that even these emerging opportunities won’t be as technology focused as past
innovations were.
Going forward, I believe that genuine innovation in games will come from those
designers who are focused on figuring out unique better ways to entertain,
interact, and delight their users—focused on ways to make their games more truly
entertaining rather than leaning on the easy crutch of technology to support
innovation.
By increasing and improving your skills as a designer, and learning more about
communicating your vision to your users through the process of design, you will
become part of that conversation. The choices you make and the games you
produce will move the conversation forward.

Ready for the Future
Nothing has changed the designer’s job over the past decade as much as the rise
of big data and machine learning in software.
There’s no doubt that having the tools to quickly and efficiently test the
effectiveness of creative assumptions on the bottom line is incredibly useful. At
the same time, management and investors are often far too quick to believe that
data analysis can always act as a replacement for human intuition and experience.
More than a few times I’ve seen projects fail precisely because the drive to
optimize the numbers directly conflicts with the instinct for entertainment that
drives us to play games in the first place.
A good designer should always be committed to making sure their game is, at
its core, a rich, captivating, game experience before they layer on platform,
monetization, and marketing elements. In Book 2, I’ll focus on those elements of
platform and monetization—a topic that has become more and more important as
mobile, e-sports, and other player-centric platforms have transformed games from
a product into a service. Book 3 will focus on content and discovery.
Taken together, I hope these 3 books will provide a complete vision of the
current landscape of interactive entertainment design.
But if all the primary reward mechanisms are cynical attempts to manipulate
the player, they will often have the opposite of the intended effect. Even the
savviest players don’t expect everything for nothing, but if they feel that their time
and attention aren’t being valued, they’ll quickly move on.
Without an appreciation for the fundamentals of captivating game design that
an experienced designer can bring to the table, the tendency is to simply replace
genuine entertainment with marketing tactics and gambling mechanisms. They
share a lot of elements in common; both are useful; and both are necessary for
success.
There is no doubt that for long-term success and growth as a game designer
over the coming decade you’ll need to understand the impact and importance of
all these elements, but it’s important to make sure that you’ve covered the
fundamentals of process and play before we get to the fancy stuff.

Rising to the Competition
With literally hundreds of new games appearing every day on every platform
from Steam to Android, the bar to success is higher than it’s ever been before.
That makes designing a unique, compelling, and engaging game experience one of
the most challenging jobs in the tech industry, and it’s more important than ever
that every member of your team understand the value your designer brings to a
project.
This increasingly competitive marketplace—along with the rise of gamification
on the web and mobile—means that bigger companies have become so fixated on
marketing and monetization that they have begun to avoid new ideas entirely.
Instead, they are leaning harder than ever on existing play models and are
focusing most of their new ideas on monetization.
In a world that is increasingly data driven, it can be difficult to remember that
no amount of “improving conversion rates in the user funnel,” “raising ARPU,” or
any other purely metrics-driven solution can make a game genuinely more
engaging or fun to play.
During my time as a consultant, one of the most common management
mistakes I’ve seen bring down companies otherwise poised for success is the belief
that games must be as easy to make as they are to play.
That can actually be the designer’s fault, since one of the hallmarks of a great
designer is making it all look easy; repercussions come from the devastatingly
wrong assumption that games actually are as easy to make as they appear to be
from the user’s perspective.
Fixing the mistakes that come from that misconception has kept many
consultants (including myself) gainfully employed.
Endless time and money can be spent creating content, acquiring an audience,
and crafting your funnel, but if the game you’re releasing isn’t polished and clean,
you’re building your business on quicksand.
It’s not until you can appreciate the challenges of crafting a great design in the
context of game production that you can begin to make a great game. Until you
learn how to build a solid process to act as your foundation, every element of
production will become a struggle for success.

Preparing for Impact
Games succeed and fail for as many unique reasons as there are titles. You can
go online right now and read dozens (if not hundreds) of project postmortems of
different game titles and discover that they share little more in common than luck
was had (both good and bad), mistakes were made, and even when things worked
out, they never worked out quite the way anyone expected.
At its core, the process of game development is a head-on collision of cutting
edge technology and creative vision done in a team setting and intended for public
consumption. As I’ve tried to make clear, the role of the designer is a uniquely
difficult one because this creative factor means that every element can seem
bigger, badder, and more bruising that anything you’ll face in any other discipline.
The most difficult challenge the designer faces is that there are no hard answers,
and there’s no way you can be sure you’re right until you’ve gone through the
process.
On top of that, the modern game audience is more educated and aware than
ever before. Constantly on the lookout for attempts at coercion and manipulation
without consent, this new generation of hypersavvy players presents an entirely
different set of challenges to creative game development than there was in the
past. It only takes one “innocent” mistake to transform your most devoted fans
into an angry mob, determined to take you down with pitchforks and torches (also
know as Twitter and Facebook).
Once that happens—and it will happen eventually, even if you have a long
record of success behind you—it can be easy to let the initial enthusiasm that
drove you into game development curdle into bitterness and spite. But, as anyone
who has been in the industry long enough knows, going through that long dark
night of the digital soul with your audience is a right of passage that every designer
must endure.
Yet, despite all of these mounting difficulties, some of us are still driven to
create games. If it’s not for the money, fame, or success, why do we do it? Why
have so many of us sacrificed our time, money, relationships, savings, health, and
even sanity to create interactive entertainment that is often unappreciated and
unloved and that can vanish completely in a matter of years or months?
I believe we do it because we’re compelled to beat the odds and do the

impossible! I also believe there is no form of media on earth that can more fully
express our “selves” than the interactive entertainment we create. Stories allow us
to be someone else, but a well-crafted game is a way for us to know someone we’ve
never met. There can be no greater satisfaction than communicating our true
intentions through a well-designed interactive experience.
Beyond, there is a sense of mastering the technology that is all around us,
revealing the secrets of not only the machines we use but the software that
controls them, entirely through one of the greatest tools of human learning: the
act of play.
For those lucky few of us who have taken the ride and seen our games not only
rise to the top of the charts but have a genuine cultural impact on a generation of
players, it all seems worth it somehow.
The designer, as the person orchestrating the often tenuous balance between
creativity and technology, continues to face one of the most challenging jobs in
software. It is, as I pointed out in the beginning of this book, not only a tough task
to do well, but one that everyone else thinks they can do better than you, no
matter how much experience you bring to the project.
Great design demands stunning vision, long hours, an incredibly detailed
understanding of the process of development, and genuine insight into and
empathy with the other disciplines you’ll be working with.
As the barriers to entry come tumbling down, game designers from around the
world are discovering that what constitutes genuine success demands that you
come to the table not only with the instincts of a great designer, but with a basic
understanding of marketing and business as well.
Whether you’re a rookie with a glint in your eye or a grizzled veteran preparing
to head back into the breach once more, I hope this book has not only opened your
mind to the challenges that come with designing a game, but given you insight
into ways that you can make better games and make games better.
I’m looking forward to playing what you create.
 


 

AFTERWORD
This book and its focus on the process of game design is something that I’ve
been preparing to write for over twenty years. Now that you’ve had a chance to
read it, I hope you’ll do me the favor of telling me what you thought of it.
Whether there’s something that you particularly liked and hope I’ll write more
about or there’s something you were hoping to see me cover that I missed, please
feel free to contact me directly at andrew@levelupdesign.com. I’m always looking
to make this book better!
It’s my intention that “The Process of Game Design” will be a living work,
updated with new insights and information as I go forward with what I have
planned as a series of 3 volumes in the first Level-Up Design series. Please let me
know what you’d like to see!
You can also discover more material (most of it free) on game design at
www.levelupdesign.com
If there’s something you were hoping to find in these pages but didn’t, you can
ask me about it directly at andrew@andrewpmayer.com.
 

ABOUT THE AUTHOR
Andrew P. Mayer who has been designing games for over 20 years, including the
original Petz, the best-selling artificially intelligent desktop life-forms.
Since then he has worked with numerous top companies and created hit games
featuring a dazzling variety of original and licensed stories and characters.
His acclaimed steampunk superhero trilogy, The Society of Steam, was published by
Pyr books.
Andrew currently lives in Portland, OR, where he teaches design, and is hard at work
crafting his next book.
 
Discover more at:
www.levelupdesign.com
 
Twitter: @mediashifters
https://www.facebook.com/LevelUpDsgn/
 
 

