Theory and Applications
Tensor-Based 
Dynamical Systems
Synthesis Lectures on 
Mathematics & Statistics
Can Chen

Synthesis Lectures on Mathematics & 
Statistics 
Series Editor 
Steven G. Krantz, Department of Mathematics, Washington University, Saint Louis, MO, USA

This series includes titles in applied mathematics and statistics for cross-disciplinary 
STEM professionals, educators, researchers, and students. The series focuses on new and 
traditional techniques to develop mathematical knowledge and skills, an understanding of 
core mathematical reasoning, and the ability to utilize data in speciﬁc applications.

Can Chen 
Tensor-Based Dynamical 
Systems 
Theory and Applications

Can Chen 
School of Data Science and Society 
and Department of Mathematics 
University of North Carolina at Chapel Hill 
Chapel Hill, NC, USA 
ISSN 1938-1743
ISSN 1938-1751 (electronic) 
Synthesis Lectures on Mathematics & Statistics 
ISBN 978-3-031-54504-7
ISBN 978-3-031-54505-4 (eBook) 
https://doi.org/10.1007/978-3-031-54505-4 
© The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature 
Switzerland AG 2024 
This work is subject to copyright. All rights are solely and exclusively licensed by the Publisher, whether the whole 
or part of the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation, 
broadcasting, reproduction on microﬁlms or in any other physical way, and transmission or information storage 
and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or 
hereafter developed. 
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does 
not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant protective 
laws and regulations and therefore free for general use. 
The publisher, the authors, and the editors are safe to assume that the advice and information in this book are 
believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the editors give 
a warranty, expressed or implied, with respect to the material contained herein or for any errors or omissions that 
may have been made. The publisher remains neutral with regard to jurisdictional claims in published maps and 
institutional afﬁliations. 
This Springer imprint is published by the registered company Springer Nature Switzerland AG 
The registered company address is: Gewerbestrasse 11, 6330 Cham, Switzerland 
Paper in this product is recyclable.

To my family

Preface 
Tensors are multidimensional arrays that generalize vectors and matrices, enabling the 
representation of intricate higher-order interactions within multiway data. Tensor-based 
dynamical systems extend the traditional notion of linear dynamical systems to a more 
general setting where system evolutions are governed by tensor products, allowing us to 
model and analyze a wider range of real-world applications with greater precision and 
efﬁciency. 
Tensor-based dynamical systems have garnered signiﬁcant attention due to their abil-
ity to leverage tensor algebra to accelerate system-related computations and to facilitate 
deeper understandings of higher-order dynamical interactions. Furthermore, they provide a 
uniﬁed and ﬂexible approach to modeling and analyzing various types of systems, encom-
passing physical systems, chemical reactions, biological processes, social networks, and 
more. In recent years, there has been a growing interest in developing efﬁcient compu-
tational methods for analyzing and controlling different types of tensor-based dynamical 
systems. 
Overall, tensor-based dynamical systems have emerged as a groundbreaking mathe-
matical framework with the potential to revolutionize our understanding and control of 
complex systems. Consequently, research in this ﬁeld holds immense signiﬁcance across 
diverse disciplines, including mathematics, computer science, engineering, biology, social 
science, and beyond. 
Chapel Hill, NC, USA
Can Chen
vii

Acknowledgements 
I am indebted to Dr. Anthony M. Bloch and Dr. Indika Rajapakse at the University of 
Michigan for their visionary introduction to the ﬁeld of tensor-based dynamical sys-
tems and their unwavering support during my doctoral studies. My early explorations 
in the ﬁeld were also enriched by the scientiﬁc guidance of Dr. Amit Surana at Raytheon 
Technologies Research Center, to whom I extend my sincere gratitude. I am also deeply 
grateful to Dr. Yang-Yu Liu at Harvard Medical School for his encouragement and support 
throughout the writing of this book.
ix

Contents 
1 
Tensor Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1 
1.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1 
1.2 
Tensor Products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 
1.2.1 
Kronecker Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 
1.2.2 
Khatri-Rao Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 
1.2.3 
Outer/Inner Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 
1.2.4 
Tensor Matrix/Vector Product
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 
1.2.5 
Einstein Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5 
1.2.6 
t-Product
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6 
1.3 
Tensor Unfoldings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6 
1.3.1 
Tensor Matricization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7 
1.3.2 
Isomorphic Unfolding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8 
1.4 
Block Tensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8 
1.5 
Tensor Eigenvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9 
1.5.1 
H-Eigenvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10 
1.5.2 
Z-Eigenvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 
1.5.3 
U-Eigenvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 
1.6 
Tensor Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12 
1.6.1 
Higher-Order Singular Value Decomposition . . . . . . . . . . . . . . . . . .
12 
1.6.2 
Tensor Singular Value Decomposition . . . . . . . . . . . . . . . . . . . . . . . .
13 
1.6.3 
CANDECOMP/PARAFAC Decomposition . . . . . . . . . . . . . . . . . . . .
14 
1.6.4 
Tensor Orthogonal Decomposition . . . . . . . . . . . . . . . . . . . . . . . . . . .
15 
1.6.5 
Tensor Train Decomposition
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16 
1.6.6 
Hierarchical Tucker Decomposition . . . . . . . . . . . . . . . . . . . . . . . . . .
19 
1.6.7 
t-Singular Value/Eigenvalue Decomposition . . . . . . . . . . . . . . . . . . .
20 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
xi

xii
Contents
2 
Tucker Product-Based Dynamical Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25 
2.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25 
2.2 
System Identiﬁcation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27 
2.2.1 
EM Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27 
2.2.2 
Multilinear PCA/Regression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28 
2.3 
System-Theoretic Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
29 
2.3.1 
Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
29 
2.3.2 
Reachability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31 
2.3.3 
Observability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
32 
2.4 
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33 
2.4.1 
Video Dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33 
2.4.2 
Synthetic Data: Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34 
2.4.3 
Synthetic Data: Reachability and Observability . . . . . . . . . . . . . . . .
35 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
35 
3 
Einstein Product-Based Dynamical Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39 
3.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39 
3.2 
System-Theoretic Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41 
3.2.1 
Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41 
3.2.2 
Reachability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43 
3.2.3 
Observability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45 
3.3 
Model Reduction/System Identiﬁcation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
46 
3.3.1 
TTD-Based Balanced Truncation
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
46 
3.3.2 
TTD-Based Balanced Proper Orthogonal Decomposition . . . . . . . .
48 
3.3.3 
TTD-Based Eigensystem Realization Algorithm . . . . . . . . . . . . . . .
50 
3.4 
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
51 
3.4.1 
Synthetic Data: Reachability and Observability . . . . . . . . . . . . . . . .
51 
3.4.2 
Synthetic Data: Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52 
3.4.3 
Synthetic Data: TTD-Based Balanced Truncation . . . . . . . . . . . . . .
52 
3.4.4 
2D Heat Equations with Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53 
3.4.5 
Room Impulsive Response Dataset . . . . . . . . . . . . . . . . . . . . . . . . . . .
54 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56 
4 
Tensor Vector Product-Based Dynamical Systems . . . . . . . . . . . . . . . . . . . . . . .
59 
4.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
59 
4.2 
System-Theoretic Properties: Stability
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61 
4.2.1 
Explicit Solutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61 
4.2.2 
Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
62 
4.2.3 
Discrete-Time Case . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
64 
4.2.4 
Constant Control
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65 
4.2.5 
Generalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
66

Contents
xiii
4.3 
System-Theoretic Properties: Controllability . . . . . . . . . . . . . . . . . . . . . . . . .
68 
4.3.1 
Controllability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69 
4.3.2 
Controllability of Hypergraphs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
71 
4.4 
System-Theoretic Property: Observability
. . . . . . . . . . . . . . . . . . . . . . . . . . .
74 
4.4.1 
Observability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74 
4.4.2 
Observability of Hypergraphs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76 
4.5 
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76 
4.5.1 
Synthetic Data: Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76 
4.5.2 
Synthetic Data: Stability with Constant Control . . . . . . . . . . . . . . . .
77 
4.5.3 
Mouse Neuron Endomicroscopy Dataset . . . . . . . . . . . . . . . . . . . . . .
78 
4.5.4 
Chromosomal Conformation Capture Dataset . . . . . . . . . . . . . . . . . .
79 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81 
5 
Contracted Product-Based Dynamical Systems . . . . . . . . . . . . . . . . . . . . . . . . . .
85 
5.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85 
5.2 
Decomposed System Representations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
87 
5.2.1 
CPD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
87 
5.2.2 
TD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
88 
5.2.3 
TTD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
88 
5.2.4 
HTD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89 
5.3 
Linearization
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89 
5.4 
Feedback Linearization
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
90 
5.4.1 
Higher-Order Polynomials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91 
5.4.2 
CPDS Feedback Linearization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
92 
5.5 
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93 
5.5.1 
HVAC Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93 
5.5.2 
Synthetic Data: Feedback Linearization . . . . . . . . . . . . . . . . . . . . . . .
93 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95 
6 
t-Product-Based Dynamical Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97 
6.1 
Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97 
6.2 
System-Theoretic Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98 
6.2.1 
Explicit Solutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98 
6.2.2 
Stability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
99 
6.2.3 
Controllability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
101 
6.2.4 
Observability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
101 
6.3 
State Feedback Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
102 
6.4 
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
103 
6.4.1 
Synthetic Data: Stability and Controllability . . . . . . . . . . . . . . . . . . .
103 
6.4.2 
Synthetic Data: State Feedback Design . . . . . . . . . . . . . . . . . . . . . . .
104 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
105

Acronyms 
AIR
Aachen Impulse Response 
BPOD
Balanced Proper Orthogonal Decomposition 
BT
Balanced Truncation 
CPD
CANDECOMP/PARAFAC Decomposition 
CPDS
Contracted Product-based Dynamical System 
EM
Expectation Maximization 
EPDS
Einstein Product-based Dynamical System 
ERA
Eigensystem Realization Algorithm 
HOSVD
Higher-order Singular Value Decomposition 
HTD
Hierarchical Tucker Decomposition 
HVAC
Heating, Ventilation, and Air Conditioning 
LDS
Linear Dynamical System 
MIMO
Multiple Inputs Multiple Outputs 
PCA
Principal Component Analysis 
SISO
Single Input Single Output 
SVD
Singular Value Decomposition 
TD
Tucker Decomposition 
t-PDS
t-Product-based Dynamical System 
TPDS
Tucker Product-based Dynamical System 
TSVD
Tensor Singular Value Decomposition 
t-SVD
t-Singular Value Decomposition 
TTD
Tensor Train Decomposition 
TVPDS
Tensor Vector Product-based Dynamical System
xv

1
Tensor Preliminaries 
Abstract 
Tensors are multidimensional arrays generalized from vectors and matrices, which have a 
broad range of applications in various ﬁelds such as signal processing, machine learning, 
statistics, dynamical systems, numerical linear algebra, computer vision, neuroscience, 
network science, and elsewhere. Given the widespread use of tensors, understanding ten-
sor algebra is therefore essential when working with them. Tensor algebra encompasses a 
wide range of topics as linear algebra, including tensor products, tensor unfoldings, block 
tensors, tensor eigenvalues, and tensor decompositions, each of which plays a critical role 
in diverse applications. 
1.1
Overview 
The word tensor derives from the Latin tendere, meaning “to stretch.” It ﬁrst emerged with 
its modern physical sense from the work of Voigt [ 1] in 1898 to describe stress and strain on 
crystals. As a matter of fact, the concept of tensors had already been employed in the context 
of continuum mechanics [ 2– 4] and differential geometry [ 5– 7]. Following the development 
of Einstein’s theory of general relativity [ 8, 9], tensors gained considerable attention within 
the physics and mathematics communities. Tensors can be understood in various prospectives 
with different levels of abstraction. This book considers tensors as multidimensional arrays 
generalized from vectors and matrices. 
Tensors ﬁnd widespread use in a variety of ﬁelds, including signal processing [ 10– 12], 
machine learning [ 13– 15], statistics [ 16– 18], dynamical systems [ 19– 22], numerical linear 
algebra [ 23– 25], computer vision [ 26– 28], neuroscience [ 29– 31], network analysis [ 32– 34], 
and elsewhere. Of particular interest of this book is exploring the role of tensor algebra in 
tensor-based dynamical systems, where the evolutions of the systems are captured by tensor 
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_1 
1

2
1
Tensor Preliminaries
products. The dynamics of human genome is an excellent example of tensor-based dynamical 
systems, where the 3D genome structure, function, and its relationship to phenotype can 
be represented by tensors [ 35, 36]. Tensor algebra can be leveraged to accelerate system-
related computations and facilitate understandings of the dynamical processes in tensor-
based dynamical systems, making it an exciting area of research. 
The order of a tensor refers to the total number of its dimensions, with each dimen-
sion called a mode. A kkth-order tensor is typically denoted by sans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk. Hence, 
scalars s element of double struck upper Rs ∈R are zero-order tensors, vectors bold v element of double struck upper R Superscript nv ∈Rn are ﬁrst-order tensors, and matrices 
bold upper M element of double struck upper R Superscript n times mM ∈Rn×m are second-order tensors. Tensors can be divided into sub-arrays by ﬁxing a sub-
set of their indices. A ﬁber is a sub-array obtained by ﬁxing all but one index, while a slice 
is obtained by ﬁxing all but two indices. For example, a third-order tensor sans serif upper T element of double struck upper R Superscript n 1 times n 2 times n 3T ∈Rn1×n2×n3
can have ﬁbers commonly named as columns, rows, and tubes, and its slices are commonly 
named as horizontals, laterals, and frontals, see Fig. 1.1. The colon notation “:” refers to the 
MATLAB colon operation, which acts as shorthand to include all subscripts in a particular 
array dimension. 
If all modes of akkth-order tensorsans serif upper TT have the same size, i.e.,n 1 equals n 2 equals midline horizontal ellipsis equals n Subscript kn1 = n2 = · · · = nk, it is often 
called a cubical tensor. A cubical tensor is called supersymmetric if sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k SubscriptT j1 j2··· jk is invariant 
under any permutation of the indices. For example, a third-order tensor sans serif upper T element of double struck upper R Superscript n times n times nT ∈Rn×n×n is 
supersymmetric if it satisﬁes the following condition: 
sans serif upper T Subscript j 1 j 2 j 3 Baseline equals sans serif upper T Subscript j 1 j 3 j 2 Baseline equals sans serif upper T Subscript j 2 j 1 j 3 Baseline equals sans serif upper T Subscript j 2 j 3 j 1 Baseline equals sans serif upper T Subscript j 3 j 1 j 2 Baseline equals sans serif upper T Subscript j 3 j 2 j 1 Baseline periodT j1 j2 j3 = T j1 j3 j2 = T j2 j1 j3 = T j2 j3 j1 = T j3 j1 j2 = T j3 j2 j1.
Fig. 1.1 Fibers and slices of a third-order tensor

1.2
Tensor Products
3
A cubical tensor is called diagonal ifsans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline equals 0T j1 j2··· jk = 0 exceptj 1 equals j 2 equals midline horizontal ellipsis equals j Subscript k j1 = j2 = · · · = jk. Additionally, 
even-order tensors, often denoted by sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk, are tensors with even orders, 
i.e., 2 k2k, which possess various interesting properties in tensor algebra [ 19, 37, 38]. 
This chapter provides a comprehensive review of tensor algebra, which is fundamental 
for the theory of tensor-based dynamical systems. Most of the concepts and notations for 
tensor algebra were adapted from the work of [ 19, 39– 47]. 
1.2
Tensor Products 
This section presents different types of tensor products, which are crucial in constructing 
tensor-based dynamical systems and developing their systems theory. 
1.2.1
Kronecker Product 
Although the Kronecker product is deﬁned on matrices, it plays an important role in ten-
sor algebra [ 48, 49]. Given two matrices of arbitrary size bold upper A element of double struck upper R Superscript n times mA ∈Rn×m and bold upper B element of double struck upper R Superscript s times rB ∈Rs×r, the  
Kronecker product of the two matrices, denoted by bold upper A circled times bold upper B element of double struck upper R Superscript n s times m rA ⊗B ∈Rns×mr, is deﬁned as 
bold upper A circled times bold upper B equals Start 4 By 4 Matrix 1st Row 1st Column bold upper A Subscript 11 Baseline bold upper B 2nd Column bold upper A Subscript 12 Baseline bold upper B 3rd Column midline horizontal ellipsis 4th Column bold upper A Subscript 1 m Baseline bold upper B 2nd Row 1st Column bold upper A Subscript 21 Baseline bold upper B 2nd Column bold upper A Subscript 22 Baseline bold upper B 3rd Column midline horizontal ellipsis 4th Column bold upper A Subscript 2 m Baseline bold upper B 3rd Row 1st Column vertical ellipsis 2nd Column vertical ellipsis 3rd Column down right diagonal ellipsis 4th Column vertical ellipsis 4th Row 1st Column bold upper A Subscript n Baseline 1 Baseline bold upper B 2nd Column bold upper A Subscript n Baseline 2 Baseline bold upper B 3rd Column midline horizontal ellipsis 4th Column bold upper A Subscript n m Baseline bold upper B EndMatrix commaA ⊗B =
⎡
⎢⎢⎢⎣
A11B A12B · · · A1mB
A21B A22B · · · A2mB
...
...
...
...
An1B An2B · · · AnmB
⎤
⎥⎥⎥⎦,
(1.1) 
where bold upper A Subscript j iA ji denotes the left parenthesis j comma i right parenthesis( j, i)th entries of A. The Kronecker product possesses many useful 
properties, including bilinearity, associativity, and the mixed-product property [ 49, 50]. The 
Kronecker product is also generalized to tensors, see details in [ 51]. 
1.2.2
Khatri-Rao Product 
The Khatri-Rao product, like the Kronecker product, is deﬁned on matrices, but it is important 
in tensor computation [ 49, 52]. Given two matricesbold upper A element of double struck upper R Superscript n times sA ∈Rn×s andbold upper B element of double struck upper R Superscript m times sB ∈Rm×s, the Khatri-Rao 
product of the two matrices, denoted by bold upper A circled dot bold upper B element of double struck upper R Superscript n m times sA ʘ B ∈Rnm×s, is deﬁned as  
bold upper A circled dot bold upper B equals Start 1 By 4 Matrix 1st Row 1st Column bold a Subscript 1 Baseline circled times bold b Subscript 1 Baseline 2nd Column bold a Subscript 2 Baseline circled times bold b Subscript 2 Baseline 3rd Column midline horizontal ellipsis 4th Column bold a Subscript s Baseline circled times bold b Subscript s Baseline EndMatrix commaA ʘ B =
[
a1 ⊗b1 a2 ⊗b2 · · · as ⊗bs
]
,
(1.2) 
where bold a Subscript ja j and bold b Subscript jb j are the j jth columns of A and B, respectively. Readers may ﬁnd more 
information on the properties of the Khatri-Rao product in [ 49].

4
1
Tensor Preliminaries
1.2.3
Outer/Inner Product 
The outer product between two tensors is a generalization of the vector outer product [ 39]. 
Given two tensorssans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k 1 SuperscriptT ∈Rn1×n2×···×nk1 andsans serif upper S element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript k 2 SuperscriptS ∈Rm1×m2×···×mk2 , their outer product, denoted 
by sans serif upper T degrees sans serif upper S element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k 1 Superscript times m 1 times m 2 times midline horizontal ellipsis times m Super Subscript k 2 SuperscriptT ◦S ∈Rn1×n2×···×nk1×m1×m2×···×mk2 , is deﬁned as 
left parenthesis sans serif upper T degrees sans serif upper S right parenthesis Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k 1 Subscript i 1 i 2 midline horizontal ellipsis i Sub Subscript k 2 Subscript Baseline equals sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k 1 Subscript Baseline sans serif upper S Subscript i 1 i 2 midline horizontal ellipsis i Sub Subscript k 2 Subscript Baseline period(T ◦S) j1 j2··· jk1i1i2···ik2 = T j1 j2··· jk1 Si1i2···ik2 .
(1.3) 
In contrast, the inner product between two tensors of the same size T, sans serif upper S element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptS ∈Rn1×n2×···×nk, 
denoted by left angle bracket sans serif upper T comma sans serif upper S right angle bracket element of double struck upper R⟨T, S⟩∈R, is deﬁned as 
left angle bracket sans serif upper T comma sans serif upper S right angle bracket equals sigma summation Underscript j 1 equals 1 Overscript n 1 Endscripts sigma summation Underscript j 2 equals 1 Overscript n 2 Endscripts midline horizontal ellipsis sigma summation Underscript j Subscript k Baseline equals 1 Overscript n Subscript k Baseline Endscripts sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline sans serif upper S Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline period⟨T, S⟩=
n1
∑
j1=1
n2
∑
j2=1
· · ·
nk
∑
jk=1
T j1 j2··· jkS j1 j2··· jk.
(1.4) 
Two tensors T and S are said to be orthogonal if left angle bracket sans serif upper T comma sans serif upper S right angle bracket equals 0⟨T, S⟩= 0. The tensor Frobenius norm is 
therefore deﬁned as parallel to sans serif upper T parallel to squared equals left angle bracket sans serif upper T comma sans serif upper T right angle bracket||T||2 = ⟨T,T⟩. 
1.2.4
Tensor Matrix/Vector Product 
The tensor matrix/vector product is an extension of familiar matrix matrix/vector products 
[ 39]. Given akkth-order tensorsans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk and a matrixbold upper M element of double struck upper R Superscript m times n Super Subscript p SuperscriptM ∈Rm×n p, the tensor matrix 
product sans serif upper T times Subscript p Baseline bold upper M element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript p minus 1 Superscript times m times n Super Subscript p plus 1 Superscript times midline horizontal ellipsis times n Super Subscript k SuperscriptT ×p M ∈Rn1×n2×···×n p−1×m×n p+1×···×nk along mode pp is deﬁned as 
left parenthesis sans serif upper T times Subscript p Baseline bold upper M right parenthesis Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript p minus 1 Subscript i j Sub Subscript p plus 1 Subscript j Sub Subscript p plus 2 Subscript midline horizontal ellipsis j Sub Subscript k Subscript Baseline equals sigma summation Underscript j Subscript p Baseline equals 1 Overscript n Subscript p Baseline Endscripts sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript p Subscript ellipsis j Sub Subscript k Subscript Baseline bold upper M Subscript i j Sub Subscript p Subscript Baseline period(T ×p M) j1 j2··· jp−1i jp+1 jp+2··· jk =
n p
∑
jp=1
T j1 j2··· jp... jkMi jp.
(1.5) 
This product can be extended to the so-called Tucker product as follows: 
bold upper T times Subscript 1 Baseline bold upper M Subscript 1 Baseline times Subscript 2 Baseline bold upper M Subscript 2 Baseline times Subscript 3 Baseline midline horizontal ellipsis times Subscript k Baseline bold upper M Subscript k Baseline equals sans serif upper T times StartSet bold upper M Subscript 1 Baseline comma bold upper M Subscript 2 Baseline comma ellipsis comma bold upper M Subscript k Baseline EndSet element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript k SuperscriptT ×1 M1 ×2 M2 ×3 · · · ×k Mk = T × {M1, M2, . . . , Mk} ∈Rm1×m2×···×mk
for bold upper M Subscript p Baseline element of double struck upper R Superscript m Super Subscript p Superscript times n Super Subscript pMp ∈Rm p×n p. When m equals 1m = 1, the tensor matrix product (1.5) reduces to tensor vector 
products.
Given
a
vector
bold v element of double struck upper R Superscript n Super Subscript p Superscriptv ∈Rn p,
the
tensor
vector
product
sans serif upper T times Subscript p Baseline bold v element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript p minus 1 Superscript times n Super Subscript p plus 1 Superscript times midline horizontal ellipsis times n Super Subscript k SuperscriptT ×p v ∈
Rn1×n2×···×n p−1×n p+1×···×nk along mode pp is deﬁned as 
left parenthesis sans serif upper T times Subscript p Baseline bold v right parenthesis Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript p minus 1 Subscript j Sub Subscript p plus 1 Subscript j Sub Subscript p plus 2 Subscript midline horizontal ellipsis j Sub Subscript k Subscript Baseline equals sigma summation Underscript j Subscript p Baseline equals 1 Overscript n Subscript p Baseline Endscripts sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript p Subscript midline horizontal ellipsis j Sub Subscript k Subscript Baseline bold v Subscript j Sub Subscript p Subscript Baseline period(T ×p v) j1 j2··· jp−1 jp+1 jp+2··· jk =
n p
∑
jp=1
T j1 j2··· jp··· jkv jp.
(1.6) 
Similarly, it can be generalized to the Tucker product form, i.e., for bold v Subscript p Baseline element of double struck upper R Superscript n Super Subscript pvp ∈Rn p, 
sans serif upper T times Subscript 1 Baseline bold v Subscript 1 Baseline times Subscript 2 Baseline bold v Subscript 2 Baseline times Subscript 3 Baseline midline horizontal ellipsis times Subscript k Baseline bold v Subscript k Baseline equals sans serif upper T times StartSet bold v Subscript 1 Baseline comma bold v Subscript 2 Baseline comma ellipsis comma bold v Subscript k Baseline EndSet element of double struck upper R periodT ×1 v1 ×2 v2 ×3 · · · ×k vk = T × {v1, v2, . . . , vk} ∈R.

1.2
Tensor Products
5
Suppose that sans serif upper T element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nT ∈Rn×n×
k···×n is supersymmetric and bold x element of double struck upper R Superscript nx ∈Rn contains kk variables x 1x1, x 2x2, 
…, x Subscript kxk. The homogeneous polynomial of degree kk associated with T can be expressed as 
h left parenthesis x 1 comma x 2 comma ellipsis comma x Subscript k Baseline right parenthesis equals sans serif upper T times StartSet bold x comma bold x comma ellipsis Overscript k Endscripts comma bold x EndSet equals sans serif upper T bold x Superscript k Baseline periodh(x1, x2, . . . , xk) = T × {x, x, k. . ., x} = Txk.
(1.7) 
Previous research [ 21, 53, 54] has  shown that everynn-dimensional homogeneous polynomial 
of degreekk can be uniquely determined by akkth-ordernn-dimensional supersymmetric tensor. 
1.2.5
Einstein Product 
The Einstein product is a tensor contraction deﬁned over the space of even-order tensors 
(though it can be deﬁned more generally for arbitrary-sized tensors) [ 19, 35]. Given two 
even-order tensors sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk and sans serif upper S element of double struck upper R Superscript m 1 times s 1 times midline horizontal ellipsis times m Super Subscript k Superscript times s Super Subscript k SuperscriptS ∈Rm1×s1×···×mk×sk, the Einstein product 
of the two tensors, denoted by sans serif upper T asterisk sans serif upper S element of double struck upper R Superscript n 1 times s 1 times midline horizontal ellipsis times n Super Subscript k Superscript times s Super Subscript k SuperscriptT ∗S ∈Rn1×s1×···×nk×sk, is deﬁned as 
left parenthesis sans serif upper T asterisk sans serif upper S right parenthesis Subscript j 1 l 1 midline horizontal ellipsis j Sub Subscript k Subscript l Sub Subscript k Subscript Baseline equals sigma summation Underscript i 1 equals 1 Overscript m 1 Endscripts sigma summation Underscript i 2 equals 1 Overscript m 2 Endscripts midline horizontal ellipsis sigma summation Underscript i Subscript k Baseline equals 1 Overscript m Subscript k Baseline Endscripts sans serif upper T Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline sans serif upper S Subscript i 1 l 1 midline horizontal ellipsis i Sub Subscript k Subscript l Sub Subscript k Subscript Baseline period(T ∗S) j1l1··· jklk =
m1
∑
i1=1
m2
∑
i2=1
· · ·
mk
∑
ik=1
T j1i1··· jkikSi1l1···iklk.
(1.8) 
The Einstein product can be viewed as the multidimensional extension of matrix matrix 
products. Therefore, it can also be deﬁned between a2 k2kth-order tensor and akkth-order tensor, 
similar to matrix vector products. Givensans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk andsans serif upper X element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript k SuperscriptX ∈Rm1×m2×···×mk, the  
Einstein product sans serif upper T asterisk sans serif upper X element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∗X ∈Rn1×n2×···×nk is deﬁned as 
left parenthesis sans serif upper T asterisk sans serif upper X right parenthesis Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline equals sigma summation Underscript i 1 equals 1 Overscript m 1 Endscripts sigma summation Underscript i 2 equals 1 Overscript m 2 Endscripts midline horizontal ellipsis sigma summation Underscript i Subscript k Baseline equals 1 Overscript m Subscript k Baseline Endscripts sans serif upper T Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline sans serif upper X Subscript i 1 i 2 midline horizontal ellipsis i Sub Subscript k Subscript Baseline period(T ∗X) j1 j2··· jk =
m1
∑
i1=1
m2
∑
i2=1
· · ·
mk
∑
ik=1
T j1i1··· jkikXi1i2···ik.
(1.9) 
The space of even-order tensors with the Einstein product possesses many desirable 
properties for tensor computation [ 19, 41, 55]. For instance, the Tucker product can be 
efﬁciently represented in the Einstein product form for even-order tensors [ 19]. Given an 
even-order tensor sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk and matrices bold upper U Subscript p Baseline element of double struck upper R Superscript s Super Subscript p Superscript times n Super Subscript pUp ∈Rsp×n p and bold upper V Subscript p Baseline element of double struck upper R Superscript r Super Subscript p Superscript times m Super Subscript pVp ∈Rrp×m p for 
p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k, the Tucker product can be rewritten as 
sans serif upper T times StartSet bold upper U Subscript 1 Baseline comma bold upper V Subscript 1 Baseline comma ellipsis comma bold upper U Subscript k Baseline comma bold upper V Subscript k Baseline EndSet equals sans serif upper U asterisk sans serif upper T asterisk sans serif upper V Superscript down tack Baseline element of double struck upper R Superscript s 1 times r 1 times midline horizontal ellipsis times s Super Subscript k Superscript times r Super Subscript k Superscript Baseline commaT × {U1, V1, . . . , Uk, Vk} = U ∗T ∗VT ∈Rs1×r1×···×sk×rk,
(1.10) 
where
sans serif upper U equals bold upper U Subscript 1 Baseline degrees bold upper U Subscript 2 Baseline degrees midline horizontal ellipsis degrees bold upper U Subscript k Baseline element of double struck upper R Superscript s 1 times n 1 times midline horizontal ellipsis times s Super Subscript k Superscript times n Super Subscript k SuperscriptU = U1 ◦U2 ◦· · · ◦Uk ∈Rs1×n1×···×sk×nk
and
sans serif upper V equals bold upper V Subscript 1 Baseline degrees bold upper V Subscript 2 Baseline degrees midline horizontal ellipsis degrees bold upper V Subscript k Baseline element of double struck upper R Superscript r 1 times m 1 times midline horizontal ellipsis times r Super Subscript k Superscript times m Super Subscript k SuperscriptV = V1 ◦V2 ◦· · · ◦Vk ∈
Rr1×m1×···×rk×mk. Here, the notationsans serif upper V Superscript down tack Baseline element of double struck upper R Superscript m 1 times r 1 times midline horizontal ellipsis times m Super Subscript k Superscript times r Super Subscript kVT ∈Rm1×r1×···×mk×rk is referred to as the U-transpose 
of sans serif upper VV, which is deﬁned as 
sans serif upper V Subscript i 1 j 1 midline horizontal ellipsis i Sub Subscript k Subscript j Sub Subscript k Subscript Superscript down tack Baseline equals sans serif upper V Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline periodVT
i1 j1···ik jk = V j1i1··· jkik.
Note that the superscript “down tackT” is used to represent the operations of matrix transpose, U-
transpose, and t-transpose (deﬁned below), so it is important to understand the context in

6
1
Tensor Preliminaries
which it is being used. Further interesting properties regarding the Einstein product in the 
space of even-order tensors will be discussed. 
1.2.6
t-Product 
The t-product is a powerful tool for manipulating third-order tensors, allowing for multipli-
cation between them based on the concept of circular convolution [ 44, 46, 47]. Given two 
third-order tensors sans serif upper T element of double struck upper R Superscript n times m times sT ∈Rn×m×s and sans serif upper S element of double struck upper R Superscript m times r times sS ∈Rm×r×s, the t-product sans serif upper T star sans serif upper S element of double struck upper R Superscript n times r times sT★S ∈Rn×r×s is deﬁned as 
sans serif upper T star sans serif upper S equals monospace fold left parenthesis monospace bcirc left parenthesis sans serif upper T monospace right parenthesis monospace unfold left parenthesis sans serif upper S right parenthesis right parenthesis commaT★S = fold
(
bcirc(T)unfold(S)
)
,
(1.11) 
where 
monospace bcirc left parenthesis sans serif upper T right parenthesis equals Start 4 By 4 Matrix 1st Row 1st Column sans serif upper T Subscript colon colon 1 Baseline 2nd Column sans serif upper T Subscript colon colon s Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper T Subscript colon colon 2 Baseline 2nd Row 1st Column sans serif upper T Subscript colon colon 2 Baseline 2nd Column sans serif upper T Subscript colon colon 1 Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper T Subscript colon colon 3 Baseline 3rd Row 1st Column vertical ellipsis 2nd Column vertical ellipsis 3rd Column down right diagonal ellipsis 4th Column vertical ellipsis 4th Row 1st Column sans serif upper T Subscript colon colon s Baseline 2nd Column sans serif upper T Subscript colon colon left parenthesis s minus 1 right parenthesis Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper T Subscript colon colon 1 Baseline EndMatrix element of double struck upper R Superscript n s times m s Baseline comma monospace unfold left parenthesis sans serif upper S right parenthesis equals Start 4 By 1 Matrix 1st Row sans serif upper S Subscript colon colon 1 Baseline 2nd Row sans serif upper S Subscript colon colon 2 Baseline 3rd Row vertical ellipsis 4th Row sans serif upper S Subscript colon colon s Baseline EndMatrix element of double struck upper R Superscript m s times r Baseline commabcirc(T) =
⎡
⎢⎢⎢⎣
T::1
T::s
· · · T::2
T::2
T::1
· · · T::3
...
...
...
...
T::s T::(s−1) · · · T::1
⎤
⎥⎥⎥⎦∈Rns×ms, unfold(S) =
⎡
⎢⎢⎢⎣
S::1
S::2
...
S::s
⎤
⎥⎥⎥⎦∈Rms×r,
and fold is the reverse operation of unfold. The t-product of two tensors usually does 
not commute except for the case whenn equals m equals r equals 1n = m = r = 1. The t-inverse of a third-order tensor 
sans serif upper T element of double struck upper R Superscript n times n times sT ∈Rn×n×s, denoted by sans serif upper T Superscript negative 1 Baseline element of double struck upper R Superscript n times n times sT−1 ∈Rn×n×s, is deﬁned as sans serif upper T star sans serif upper T Superscript negative 1 Baseline equals sans serif upper T Superscript negative 1 Baseline star sans serif upper T equals sans serif upper IT★T−1 = T−1★T = I, where  sans serif upper II is the 
t-identity tensor whose ﬁrst frontal slice (i.e.,sans serif upper I Subscript colon colon 1I::1) is the identity matrix and all other frontal 
slices are all zeros. The t-inverse of T can be computed as 
sans serif upper T Superscript negative 1 Baseline equals monospace fold left parenthesis monospace bcirc left parenthesis sans serif upper T right parenthesis Superscript negative 1 Baseline right parenthesis periodT−1 = fold
(
bcirc(T)−1)
.
Note that the superscript “minus−1" is used to represent both matrix inverse and t-inverse opera-
tions. The t-transpose of a third-order tensorsans serif upper T element of double struck upper R Superscript n times m times sT ∈Rn×m×s, denoted bysans serif upper T Superscript down tack Baseline element of double struck upper R Superscript m times n times sTT ∈Rm×n×s, can be 
obtained by transposing each of the frontal slices and then reversing the order of transposed 
frontal slices 2 throughss. Moreover, a third-order tensorsans serif upper T element of double struck upper R Superscript n times n times sT ∈Rn×n×s is called t-orthogonal 
if sans serif upper T star sans serif upper T Superscript down tack Baseline equals sans serif upper T Superscript down tack Baseline star sans serif upper T equals sans serif upper IT★TT = TT★T = I. 
1.3
Tensor Unfoldings 
Tensor unfolding is a fundamental operation in tensor algebra that maps a tensor to a matrix 
or vector representation [ 19, 39, 40]. For convenience, denote script upper J equals StartSet j 1 comma j 2 comma ellipsis comma j Subscript k Baseline EndSetJ = { j1, j2, . . . , jk} and 
script upper N equals StartSet n 1 comma n 2 comma ellipsis comma n Subscript k Baseline EndSetN = {n1, n2, . . . , nk} as the sets of dimension indices and sizes of a kkth-order tensor 
T, respectively. Let phi left parenthesis dot comma script upper N right parenthesis colon double struck upper Z Superscript plus Baseline times double struck upper Z Superscript plus Baseline times midline horizontal ellipsis Overscript k Endscripts times double struck upper Z Superscript plus Baseline right arrow double struck upper Z Superscript plusϕ(·, N) : Z+ × Z+×
k· · · ×Z+ →Z+ be an index mapping function 
deﬁned as

1.3
Tensor Unfoldings
7
phi left parenthesis script upper J comma script upper N right parenthesis equals j 1 plus sigma summation Underscript p equals 2 Overscript k Endscripts left parenthesis j Subscript p Baseline minus 1 right parenthesis product Underscript l equals 1 Overscript p minus 1 Endscripts n Subscript l Baseline periodϕ(J , N) = j1 +
k
∑
p=2
( jp −1)
p−1
∏
l=1
nl.
(1.12) 
The vectorization of T, denoted byvec left parenthesis sans serif upper T right parenthesis element of double struck upper R Superscript product Underscript p equals 1 Overscript k Endscripts n Super Subscript p Superscriptvec(T) ∈R
∏k
p=1 n p, can be simply represented by utilizing 
the index mapping function, i.e., 
vec left parenthesis sans serif upper T right parenthesis Subscript j Baseline equals sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline for j equals phi left parenthesis script upper J comma script upper N right parenthesis periodvec(T) j = T j1 j2··· jk
for j = ϕ(J , N).
1.3.1
Tensor Matricization 
Tensor matricization can be formulated similarly by considering two index mapping func-
tions. Letz element of double struck upper Z Superscript plusz ∈Z+ such that1 less than or equals z less than k1 ≤z < k anddouble struck upper SS be a permutation of the setStartSet 1 comma 2 comma ellipsis comma k EndSet{1, 2, . . . , k}. Deﬁne  
the sets of row and column indices as 
StartLayout 1st Row 1st Column script upper I 2nd Column equals StartSet i 1 comma i 2 comma ellipsis comma i Subscript z Baseline EndSet for i Subscript p Baseline equals j Subscript double struck upper S left parenthesis p right parenthesis Baseline comma 2nd Row 1st Column script upper L 2nd Column equals StartSet l 1 comma l 2 comma ellipsis comma l Subscript k minus z Baseline EndSet for l Subscript p Baseline equals j Subscript double struck upper S left parenthesis z plus p right parenthesis Baseline comma EndLayoutI = {i1, i2, . . . , iz}
for i p = jS(p),
L = {l1,l2, . . . ,lk−z} for lp = jS(z+p),
with the corresponding size sets 
StartLayout 1st Row 1st Column script upper M 2nd Column equals StartSet m 1 comma m 2 comma ellipsis comma m Subscript z Baseline EndSet for m Subscript p Baseline equals n Subscript double struck upper S left parenthesis p right parenthesis Baseline comma 2nd Row 1st Column script upper S 2nd Column equals StartSet s 1 comma s 2 comma ellipsis comma s Subscript k minus z Baseline EndSet for s Subscript p Baseline equals n Subscript double struck upper S left parenthesis z plus p right parenthesis Baseline comma EndLayoutM = {m1, m2, . . . , mz}
for m p = nS(p),
S = {s1, s2, . . . , sk−z}
for sp = nS(z+p),
respectively. The 
zz-unfolding of T under the permutation 
double struck upper SS, denoted by 
bold upper T Subscript left parenthesis z comma double struck upper S right parenthesis Baseline element of double struck upper R Superscript product Underscript p equals 1 Overscript z Endscripts m Super Subscript p times product Underscript p equals 1 Overscript k minus z Endscripts s Super Subscript pT(z,S) ∈
R
∏z
p=1 m p×∏k−z
p=1 sp, is deﬁned as 
left parenthesis bold upper T Subscript left parenthesis z comma double struck upper S right parenthesis Baseline right parenthesis Subscript i l Baseline equals sans serif upper T Subscript i 1 i 2 midline horizontal ellipsis i Sub Subscript z Subscript l 1 l 2 midline horizontal ellipsis l Sub Subscript k minus z Subscript Superscript double struck upper S Baseline comma(T(z,S))il = TS
i1i2···izl1l2···lk−z,
(1.13) 
wherei equals phi left parenthesis script upper I comma script upper M right parenthesisi = ϕ(I, M)andl equals phi left parenthesis script upper L comma script upper S right parenthesisl = ϕ(L, S). Here, the notationsans serif upper T Superscript double struck upper S Baseline element of double struck upper R Superscript n Super Subscript double struck upper S left parenthesis 1 right parenthesis Superscript times n Super Subscript double struck upper S left parenthesis 2 right parenthesis Superscript times midline horizontal ellipsis times n Super Subscript double struck upper S left parenthesis k right parenthesisTS ∈RnS(1)×nS(2)×···×nS(k) is referred 
to as the double struck upper SS-transpose of T, which is deﬁned as 
sans serif upper T Subscript j Sub Subscript double struck upper S left parenthesis 1 right parenthesis Subscript j Sub Subscript double struck upper S left parenthesis 2 right parenthesis Subscript midline horizontal ellipsis j Sub Subscript double struck upper S left parenthesis k right parenthesis Subscript Superscript double struck upper S Baseline equals sans serif upper T Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline periodTS
jS(1) jS(2)··· jS(k) = T j1 j2··· jk.
The unfold operation deﬁned in the t-product can be represented using (1.13) with 
z equals 2z = 2 and double struck upper S equals StartSet 1 comma 3 comma 2 EndSetS = {1, 3, 2}. Additionally, when z equals 1z = 1 and double struck upper S equals left parenthesis p comma 1 comma 2 comma ellipsis comma p minus 1 comma p plus 1 comma p plus 2 comma ellipsis comma k right parenthesisS = (p, 1, 2, . . . , p −1, p + 1,
p + 2, . . . , k), the unfolding is referred to as thepp-mode matricization, and it is denoted by 
bold upper T Subscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript n Super Subscript p Superscript times product Underscript q not equals p Endscripts n Super Subscript qT(p) ∈Rn p×∏
q/=p nq.

8
1
Tensor Preliminaries
1.3.2
Isomorphic Unfolding 
The isomorphic unfolding is a power theoretical construct for even-order tensors [ 19, 35, 
41]. Given an even-order tensor sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk, deﬁne a mapping psiψ such that 
sans serif upper T Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline right arrow Overscript psi Endscripts bold upper T Subscript j i Baseline commaT j1i1··· jkik
ψ−→T ji,
(1.14) 
wherej equals phi left parenthesis script upper J comma script upper N right parenthesis j = ϕ(J , N) andi equals phi left parenthesis script upper I comma script upper M right parenthesisi = ϕ(I, M). The mapping can also be viewed as a tensor matri-
cizationbold upper T Subscript left parenthesis z comma double struck upper S right parenthesisT(z,S) withz equals kz = k anddouble struck upper S equals left parenthesis 1 comma 3 comma ellipsis comma 2 k minus 1 comma 2 comma 4 comma ellipsis comma 2 k right parenthesisS = (1, 3, . . . , 2k −1, 2, 4, . . . , 2k). Suppose thatn Subscript p Baseline equals m Subscript pn p = m p
for allp equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k (such tensors are often called even-order square tensors) and denote 
GL(product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline comma double struck upper R∏k
p=1 n p, R) as the general linear group, the set of real-valued invertible matrices of 
size product Underscript p equals 1 Overscript k Endscripts n Subscript p times product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p × ∏k
p=1 n p. Previous research [ 19, 37, 41, 55, 56] has proven that the map-
ping psiψ is a group isomorphism from the even-order tensor space psi Superscript negative 1 Baseline left parenthesis GL left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline comma double struck upper R right parenthesis right parenthesisψ−1(GL(∏k
p=1 n p, R))
equipped with the Einstein product (1.9) to the general linear group. In other words, the 
space psi Superscript negative 1 Baseline left parenthesis GL left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline comma double struck upper R right parenthesis right parenthesisψ−1(GL(∏k
p=1 n p, R)) equipped with the Einstein product forms a group. 
Using this unfolding psiψ, numerous matrix notations and operations can be extended 
to even-order tensors. For example, the U-transpose (deﬁned previously) can be deﬁned 
alternatively as psi Superscript negative 1 Baseline left parenthesis psi left parenthesis sans serif upper T right parenthesis Superscript down tack Baseline right parenthesisψ−1(ψ(T)T) for an even-order tensor sans serif upper TT. More notations and operations, 
such as U-eigenvalues and tensor singular value decomposition, are developed based on the 
unfolding psiψ. 
1.4
Block Tensors 
Block tensors can be deﬁned similarly to block matrices [ 19, 40, 41]. Given two even-order 
tensors of the same sizesans serif upper TT,sans serif upper S element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptS ∈Rn1×m1×···×nk×mk, thepp-mode row block tensor, denoted by 
Start 1 By 2 Matrix 1st Row 1st Column sans serif upper T 2nd Column sans serif upper S EndMatrix Subscript p Baseline element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript p Superscript times 2 m Super Subscript p times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k
[
T S
]
p ∈Rn1×m1×···×n p×2m p×···×nk×mk, is deﬁned as 
left parenthesis Start 1 By 2 Matrix 1st Row 1st Column sans serif upper T 2nd Column sans serif upper S EndMatrix Subscript p Baseline right parenthesis Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript p Subscript i Sub Subscript p Subscript midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline equals StartLayout Enlarged left brace 1st Row sans serif upper T Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript p Subscript i Sub Subscript p Subscript midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline for i Subscript p Baseline equals 1 comma 2 comma ellipsis comma m Subscript p Baseline 2nd Row sans serif upper S Subscript j 1 i 1 midline horizontal ellipsis j Sub Subscript p Subscript i Sub Subscript p Subscript midline horizontal ellipsis j Sub Subscript k Subscript i Sub Subscript k Subscript Baseline for i Subscript p Baseline equals m Subscript p Baseline plus 1 comma m Subscript p Baseline plus 2 comma ellipsis comma 2 m Subscript p Baseline EndLayout period(
[
T S
]
p) j1i1··· jpi p··· jkik =
{
T j1i1··· jpi p··· jkik
for i p = 1, 2, . . . , m p
S j1i1··· jpi p··· jkik
for i p = m p + 1, m p + 2, . . . , 2m p
.
(1.15) 
The pp-mode column block tensor, denoted by 
StartBinomialOrMatrix sans serif upper T Choose sans serif upper S EndBinomialOrMatrix Subscript p Baseline element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times 2 n Super Subscript p Superscript times m Super Subscript p Superscript times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k Superscript Baseline comma
[T
S
]
p
∈Rn1×m1×···×2n p×m p×···×nk×mk,
can be deﬁned similarly. The pp-mode row/column block tensors possess many interesting 
properties that are similar to block matrices, e.g.,

1.5
Tensor Eigenvalues
9
• sans serif upper P asterisk Start 1 By 2 Matrix 1st Row 1st Column sans serif upper T 2nd Column sans serif upper S EndMatrix Subscript p Baseline equals Start 1 By 2 Matrix 1st Row 1st Column sans serif upper P asterisk sans serif upper T 2nd Column sans serif upper P asterisk sans serif upper S EndMatrix Subscript p BaselineP ∗
[
T S
]
p =
[
P ∗T P ∗S
]
p for sans serif upper P element of double struck upper R Superscript s 1 times n 1 times midline horizontal ellipsis times s Super Subscript k Superscript times n Super Subscript k SuperscriptP ∈Rs1×n1×···×sk×nk; 
• StartBinomialOrMatrix sans serif upper T Choose sans serif upper S EndBinomialOrMatrix Subscript p Baseline asterisk sans serif upper Q equals StartBinomialOrMatrix sans serif upper T asterisk sans serif upper Q Choose sans serif upper S asterisk sans serif upper Q EndBinomialOrMatrix Subscript p Baseline
[T
S
]
p
∗Q =
[T ∗Q
S ∗Q
]
p
for sans serif upper Q element of double struck upper R Superscript m 1 times r 1 times midline horizontal ellipsis times m Super Subscript k Superscript times r Super Subscript k SuperscriptQ ∈Rm1×r1×···×mk×rk; 
• Start 1 By 2 Matrix 1st Row 1st Column sans serif upper T 2nd Column sans serif upper S EndMatrix Subscript p Baseline asterisk StartBinomialOrMatrix sans serif upper P Choose sans serif upper Q EndBinomialOrMatrix Subscript p Baseline equals sans serif upper T asterisk sans serif upper P plus sans serif upper S asterisk sans serif upper Q
[
T S
]
p ∗
[P
Q
]
p
= T ∗P + S ∗Q for sans serif upper PP, sans serif upper Q element of double struck upper R Superscript m 1 times r 1 times midline horizontal ellipsis times m Super Subscript k Superscript times r Super Subscript k SuperscriptQ ∈Rm1×r1×···×mk×rk. 
More importantly, the blocks of pp-mode row/column block tensors can map to contiguous 
blocks under the unfolding psiψ up to some permutations, i.e., 
StartLayout 1st Row 1st Column psi left parenthesis Start 1 By 2 Matrix 1st Row 1st Column sans serif upper T 2nd Column sans serif upper S EndMatrix Subscript p Baseline right parenthesis 2nd Column equals Start 1 By 2 Matrix 1st Row 1st Column psi left parenthesis sans serif upper T right parenthesis 2nd Column psi left parenthesis sans serif upper S right parenthesis EndMatrix bold upper P and psi left parenthesis StartBinomialOrMatrix sans serif upper T Choose sans serif upper S EndBinomialOrMatrix Subscript p Baseline right parenthesis equals bold upper Q StartBinomialOrMatrix psi left parenthesis sans serif upper T right parenthesis Choose psi left parenthesis sans serif upper S right parenthesis EndBinomialOrMatrix comma EndLayoutψ
( [
T S
]
p
)
=
[
ψ(T) ψ(S)
]
P
and
ψ
( [T
S
]
p
)
= Q
[ψ(T)
ψ(S)
]
,
(1.16) 
where bold upper PP and bold upper QQ are column and row permutation matrices [ 19, 40]. If m Subscript p Baseline equals 1m p = 1 (or n Subscript p Baseline equals 1n p = 1), 
P (or Q) is the identity matrix. 
Givenss even-order tensorssans serif upper T Subscript p Baseline element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript kTp ∈Rn1×m1×···×nk×mk, one can obtain app-mode row block 
tensor using (1.15) recursively. However, a more general concatenation approach can be 
deﬁned for multiple blocks. Suppose thats equals s 1 s 2 midline horizontal ellipsis s Subscript k Baselines = s1s2 · · · sk. The generalized row block tensor, 
denoted byStart 1 By 4 Matrix 1st Row 1st Column sans serif upper T Subscript 1 2nd Column sans serif upper T Subscript 2 3rd Column midline horizontal ellipsis 4th Column sans serif upper T Subscript s EndMatrix element of double struck upper R Superscript n 1 times s 1 m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times s Super Subscript k Superscript m Super Subscript k
[
T1 T2 · · · Ts
]
∈Rn1×s1m1×···×nk×skmk, can be constructed in the following way: 
• Compute the11-mode row block tensors oversans serif upper T Subscript 1 Baseline comma sans serif upper T Subscript 2 Baseline comma ellipsis comma sans serif upper T Subscript s BaselineT1,T2, . . . ,Ts for everys 1s1 tensors and denote 
them by sans serif upper T Subscript 1 Superscript left parenthesis 1 right parenthesis Baseline comma sans serif upper T Subscript 2 Superscript left parenthesis 1 right parenthesis Baseline comma ellipsis comma sans serif upper T Subscript s 2 s 3 midline horizontal ellipsis s Sub Subscript k Subscript Superscript left parenthesis 1 right parenthesisT(1)
1 ,T(1)
2 , . . . ,T(1)
s2s3···sk; 
• Compute the 22-mode row block tensor over sans serif upper T Subscript 1 Superscript left parenthesis 1 right parenthesis Baseline comma sans serif upper T Subscript 2 Superscript left parenthesis 1 right parenthesis Baseline comma ellipsis comma sans serif upper T Subscript s 2 s 3 midline horizontal ellipsis s Sub Subscript k Subscript Superscript left parenthesis 1 right parenthesisT(1)
1 ,T(1)
2 , . . . ,T(1)
s2s3···sk for every s 2s2 tensors 
and denote them by sans serif upper T Subscript 1 Superscript left parenthesis 2 right parenthesis Baseline comma sans serif upper T Subscript 2 Superscript left parenthesis 2 right parenthesis Baseline comma ellipsis comma sans serif upper T Subscript s 3 midline horizontal ellipsis s Sub Subscript k Subscript Superscript left parenthesis 2 right parenthesisT(2)
1 ,T(2)
2 , . . . ,T(2)
s3···sk; 
• Keep repeating the process until the last kk-mode row block tensor is obtained. 
See Fig. 1.2 for an example. Generalized column block tensors can be constructed similarly. 
Note that the notation “left bracket midline horizontal ellipsis right bracket[· · · ]” is used to represent the operations of both block matrices and 
generalized block tensors. Furthermore, the choice of factorization ofss can affect the struc-
ture of generalized block tensors, which can be signiﬁcant in tensor ranks/decompositions. 
1.5
Tensor Eigenvalues 
The study of eigenvalue problems for real supersymmetric tensors was initiated by 
Qi et al. [ 42, 57] and  Lim [  43] independently in 2005. Since then, various notions of ten-
sor eigenvalues have been developed, which can be treated as generalizations of the matrix 
eigenvalue problem from different perspectives.

10
1
Tensor Preliminaries
Fig. 1.2 An example of generalized row block tensor. This ﬁgure was redrawn from [ 19] with 
permission 
1.5.1
H-Eigenvalues 
Given a kkth-order supersymmetric tensor sans serif upper T element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nT ∈Rn×n×
k···×n, the eigenvalue lamda element of double struck upper Cλ ∈C and eigen-
vector bold v element of double struck upper C Superscript nv ∈Cn of T are deﬁned as 
sans serif upper T bold v Superscript k minus 1 Baseline equals lamda bold v Superscript left bracket k minus 1 right bracket Baseline commaTvk−1 = λv[k−1],
(1.17) 
where 
sans serif upper T bold v Superscript k minus 1 Baseline equals sans serif upper T times Subscript 1 Baseline bold v times Subscript 2 Baseline bold v times Subscript 3 Baseline midline horizontal ellipsis times Subscript k minus 1 Baseline bold v element of double struck upper R Superscript n Baseline commaTvk−1 = T ×1 v ×2 v ×3 · · · ×k−1 v ∈Rn,
and bold v Superscript left bracket k minus 1 right bracketv[k−1] denotes the elementwise left parenthesis k minus 1 right parenthesis(k −1)th power of v. If  lamdaλ is real, it is referred to as 
the H-eigenvalue of sans serif upper TT (the corresponding eigenvector is called the H-eigenvector). Many 
classical matrix eigenvalue properties hold for this type of tensor eigenvalues. For example, 
the product of all the eigenvalues is equal to the determinant ofsans serif upper TT, the resultant ofsans serif upper T bold v Superscript k minus 1 Baseline equals bold 0Tvk−1 = 0. 
Similar to matrix eigenvalues, the maximum H-eigenvalue of sans serif upper TT can be solved from the 
following optimization problem: 
max Underscript bold v element of double struck upper R Superscript n Baseline Endscripts left brace sans serif upper T bold v Superscript k Baseline vertical bar sigma summation Underscript j equals 1 Overscript n Endscripts v Subscript j Superscript k Baseline equals 1 right brace comma max
v∈Rn
{
Tvk |||
n
∑
j=1
vk
j = 1
}
,
(1.18) 
wherev Subscript jv j are thej jth entries of v. Since the objective function is continuous and the feasible 
set is compact, the solution of the optimization problem always exists [ 42]. The smallest 
H-eigenvalue of T can be found similarly.

1.5
Tensor Eigenvalues
11
1.5.2
Z-Eigenvalues 
Given a kkth-order supersymmetric tensor sans serif upper T element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nT ∈Rn×n×
k···×n, the E-eigenvalue lamda element of double struck upper Cλ ∈C and E-
eigenvector bold v element of double struck upper C Superscript nv ∈Cn of T are deﬁned as 
StartLayout Enlarged left brace 1st Row sans serif upper T bold v Superscript k minus 1 Baseline equals lamda bold v 2nd Row bold v Superscript down tack Baseline bold v equals 1 EndLayout period
{
Tvk−1 = λv
vTv = 1
.
(1.19) 
When lamdaλ is real, it is referred to as the Z-eigenvalue of sans serif upper TT (the corresponding eigenvector is 
called the Z-eigenvector). Similarly, the maximum Z-eigenvalue can be obtained by solving 
the following optimization problem: 
max Underscript bold v element of double struck upper R Superscript n Baseline Endscripts left brace sans serif upper T bold v Superscript k Baseline vertical bar sigma summation Underscript j equals 1 Overscript n Endscripts v Subscript j Superscript 2 Baseline equals 1 right brace period max
v∈Rn
{
Tvk |||
n
∑
j=1
v2
j = 1
}
.
(1.20) 
The smallest Z-eigenvalue of T can be found similarly. Additionally, computing the Z-
eigenvalues (and H-eigenvalues) of a supersymmetric tensor is known to be NP-hard [ 58]. 
However, various methods have been proposed to compute or approximate them [ 59– 61]. 
1.5.3
U-Eigenvalues 
U-eigenvalues are deﬁned based on the unfolding psiψ for even-order square tensors [ 19, 
37]. Given an even-order square tensor sans serif upper T element of double struck upper R Superscript n 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k SuperscriptT ∈Rn1×n1×···×nk×nk, the U-eigenvalue lamda element of double struck upper Cλ ∈C and 
U-eigentensor sans serif upper V element of double struck upper C Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptV ∈Cn1×n2×···×nk are deﬁned as 
sans serif upper T asterisk sans serif upper V equals lamda sans serif upper V periodT ∗V = λV.
(1.21) 
The notion of U-eigenvalues is a relaxation of Z-eigenvalues for even-order supersymmetric 
tensors. The optimization problem (1.20) can be rewritten as 
max left brace sans serif upper V Superscript down tack Baseline asterisk sans serif upper T asterisk sans serif upper V vertical bar parallel to sans serif upper V parallel to equals 1 and sans serif upper V equals bold v degrees bold v degrees midline horizontal ellipsis Overscript k Endscripts degrees bold v right brace comma max {VT ∗T ∗V | ||V|| = 1 and V = v ◦v◦
k· · · ◦v},
(1.22) 
Therefore, the maximum Z-eigenvalue is always smaller than or equal to the maximum 
U-eigenvalue for an even-order supersymmetric tensor [ 21, 22]. Furthermore, unlike H-
eigenvalues and Z-eigenvalues, U-eigenvalues can be computed efﬁciently through the 
eigenvalue decomposition of psi left parenthesis sans serif upper T right parenthesisψ(T).

12
1
Tensor Preliminaries
1.6
Tensor Decompositions 
Tensor decompositions were ﬁrst introduced in 1927 by Hitchcock [ 62, 63],  but it was  not  
until the 1960s that Tucker’s works brought attention to this concept [ 64– 66]. Since then, 
various types of tensor decompositions have been proposed, and they have become essential 
tools in many real-world applications [ 39]. 
1.6.1
Higher-Order Singular Value Decomposition 
Higher-order singular value decomposition (HOSVD) is a multilinear analogue of matrix 
singular value decomposition (SVD) [ 67, 68]. Given a kkth-order tensor sans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk, 
it can be decomposed as 
sans serif upper T equals sans serif upper S times StartSet bold upper U Subscript 1 Baseline comma bold upper U Subscript 2 Baseline comma ellipsis comma bold upper U Subscript k Baseline EndSet commaT = S × {U1, U2, . . . , Uk},
(1.23) 
wherebold upper U Subscript p Baseline element of double struck upper R Superscript n Super Subscript p Superscript times n Super Subscript pUp ∈Rn p×n p are orthogonal matrices andsans serif upper S element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptS ∈Rn1×n2×···×nk is called the core tensor, 
see Fig. 1.3. The HOSVD (1.23) has a matricization form, i.e., thepp-mode matricization of 
T can be represented as 
bold upper T Subscript left parenthesis p right parenthesis Baseline equals bold upper U Subscript p Baseline bold upper S Subscript left parenthesis p right parenthesis Baseline left parenthesis bold upper U Subscript k Baseline circled times midline horizontal ellipsis circled times bold upper U Subscript p plus 1 Baseline circled times bold upper U Subscript p minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper U Subscript 1 Baseline right parenthesis Superscript down tack Baseline commaT(p) = UpS(p)(Uk ⊗· · · ⊗Up+1 ⊗Up−1 ⊗· · · ⊗U1)T,
where bold upper T Subscript left parenthesis p right parenthesisT(p) and bold upper S Subscript left parenthesis p right parenthesisS(p) are the pp-mode unfoldings of T and S, respectively. 
More interestingly, the sub-tensorssans serif upper S Subscript j Sub Subscript p Subscript equals alphaS jp=α of S (obtained by ﬁxing theppth mode index to 
alphaα) satisfy the following properties: 
Fig. 1.3 An example of the HOSVD of a third-order tensor

1.6
Tensor Decompositions
13
• Two sub-tensors sans serif upper S Subscript j Sub Subscript p Subscript equals alphaS jp=α and sans serif upper S Subscript j Sub Subscript p Subscript equals betaS jp=β are orthogonal (i.e., left angle bracket sans serif upper S Subscript j Sub Subscript p Subscript equals alpha Baseline comma sans serif upper S Subscript j Sub Subscript p Subscript equals beta Baseline right angle bracket equals 0⟨S jp=α, S jp=β⟩= 0) for  p equals 1 comma 2 comma ellipsis comma kp =
1, 2, . . . , k with alpha not equals betaα /= β; 
• parallel to sans serif upper S Subscript j Sub Subscript p Subscript equals 1 Baseline parallel to greater than or equals parallel to sans serif upper S Subscript j Sub Subscript p Subscript equals 2 Baseline parallel to greater than or equals midline horizontal ellipsis greater than or equals parallel to sans serif upper S Subscript j Sub Subscript p Subscript equals n Sub Subscript p Subscript Baseline parallel to||S jp=1|| ≥||S jp=2|| ≥· · · ≥||S jp=n p|| for p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k. 
The normsparallel to sans serif upper S Subscript j Sub Subscript p Subscript equals alpha Baseline parallel to||S jp=α|| are referred to as thepp-mode singular values of T. The number of non-
vanishingpp-mode singular values is called thepp-rank ofsans serif upper TT. Previous research [ 67] has  shown  
that the pp-mode singular values are equal to the singular values of the pp-mode unfolding. 
Therefore, the pp-rank of sans serif upper TT is equal to the rank of the pp-mode unfolding. 
Unlike matrix SVD, truncating the pp-mode singular values only provides a suboptimal 
approximation of the original tensor [ 67]. To obtain the orthogonal matrices bold upper U Subscript pUp (and the 
resulting HOSVD), one can simply compute the left singular vectors of thepp-mode unfold-
ings. The core tensor S therefore can be recovered from the following: 
sans serif upper S equals sans serif upper T times Subscript 1 Baseline bold upper U Subscript 1 Superscript down tack Baseline times Subscript 2 Baseline bold upper U Subscript 2 Superscript down tack Baseline times Subscript 3 Baseline midline horizontal ellipsis times Subscript k Baseline bold upper U Subscript k Superscript down tack Baseline periodS = T ×1 UT
1 ×2 UT
2 ×3 · · · ×k UT
k .
1.6.2
Tensor Singular Value Decomposition 
Tensor singular value decomposition (TSVD) is deﬁned based on the unfoldingpsiψ for even-
order tensors [ 55, 69– 71]. For an even-order tensor sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk, the TSVD of T 
is deﬁned as 
sans serif upper T equals sans serif upper U asterisk sans serif upper S asterisk sans serif upper V Superscript down tack Baseline commaT = U ∗S ∗VT,
(1.24) 
where sans serif upper U element of double struck upper R Superscript n 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k SuperscriptU ∈Rn1×n1×···×nk×nk and sans serif upper V element of double struck upper R Superscript m 1 times m 1 times midline horizontal ellipsis times m Super Subscript k Superscript times m Super Subscript k SuperscriptV ∈Rm1×m1×···×mk×mk are U-orthogonal tensors (i.e., 
psi left parenthesis sans serif upper U right parenthesisψ(U) andpsi left parenthesis sans serif upper V right parenthesisψ(V) are orthogonal matrices), andsans serif upper S element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptS ∈Rn1×m1×···×nk×mk is a U-diagonal tensor 
(i.e., psi left parenthesis sans serif upper S right parenthesisψ(S) is a diagonal matrix) including the U-singular values of T along the diagonal. 
Obviously, the TSVD (1.24) has a matricization form, i.e., 
psi left parenthesis sans serif upper T right parenthesis equals psi left parenthesis sans serif upper U right parenthesis psi left parenthesis sans serif upper S right parenthesis psi left parenthesis sans serif upper V right parenthesis Superscript down tack Baseline periodψ(T) = ψ(U)ψ(S)ψ(V)T.
Therefore, the TSVD can be solved readily from the SVD of psi left parenthesis sans serif upper T right parenthesisψ(T). 
Suppose that the rank ofpsi left parenthesis sans serif upper T right parenthesisψ(T) is equal torr (also known as the unfolding rank of T). The 
TSVD of T can be written in the following economy-size form as: 
sans serif upper T equals sigma summation Underscript j equals 1 Overscript r Endscripts sigma Subscript j Baseline sans serif upper X Subscript j Baseline asterisk sans serif upper Y Subscript j Superscript down tack Baseline commaT =
r
∑
j=1
σ jX j ∗YT
j ,
(1.25) 
wheresans serif upper X Subscript j Baseline element of double struck upper R Superscript n 1 times 1 times midline horizontal ellipsis times n Super Subscript k Superscript times 1X j ∈Rn1×1×···×nk×1 andsans serif upper Y Subscript j Baseline element of double struck upper R Superscript m 1 times 1 times midline horizontal ellipsis times m Super Subscript k Superscript times 1Y j ∈Rm1×1×···×mk×1 can be viewed as thej jth columns of 
psi left parenthesis sans serif upper U right parenthesisψ(U) and psi left parenthesis sans serif upper V right parenthesisψ(V) under psi Superscript negative 1ψ−1, respectively. The U-singular values are arranged in descend-
ing order. Suppose that r equals r 1 r 2 midline horizontal ellipsis r Subscript k Baseliner = r1r2 · · ·rk. The economy-size TSVD (1.25) can be rewritten 
in the form of (1.24) by using generalized row block tensors, i.e., sans serif upper U element of double struck upper R Superscript n 1 times r 1 times midline horizontal ellipsis times n Super Subscript k Superscript times r Super Subscript k SuperscriptU ∈Rn1×r1×···×nk×rk,

14
1
Tensor Preliminaries
sans serif upper S element of double struck upper R Superscript r 1 times r 1 times midline horizontal ellipsis times r Super Subscript k Superscript times r Super Subscript k SuperscriptS ∈Rr1×r1×···×rk×rk, and  sans serif upper V element of double struck upper R Superscript m 1 times r 1 times midline horizontal ellipsis times m Super Subscript k Superscript times r Super Subscript k SuperscriptV ∈Rm1×r1×···×mk×rk. It is worth noting that TSVD is a special 
case of HOSVD according to (1.10) for even-order tensors. 
1.6.3
CANDECOMP/PARAFAC Decomposition 
CANDECOMP/PARAFAC decomposition (CPD) can be seen as a higher-order generaliza-
tion of matrix eigenvalue decomposition [ 39]. Given a kkth-order tensor sans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk, 
it can be decomposed into the sum of rank-one tensors as follows: 
sans serif upper T equals sigma summation Underscript j equals 1 Overscript r Endscripts lamda Subscript j Baseline bold upper V Subscript colon j Superscript left parenthesis 1 right parenthesis Baseline degrees bold upper V Subscript colon j Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees bold upper V Subscript colon j Superscript left parenthesis k right parenthesis Baseline commaT =
r
∑
j=1
λ jV(1)
: j ◦V(2)
: j ◦· · · ◦V(k)
: j ,
(1.26) 
where lamda Subscript j Baseline element of double struck upper R Superscript plusλ j ∈R+ are weights, bold upper V Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript n Super Subscript p Superscript times rV(p) ∈Rn p×r are factor matrices with unit length columns, 
andrr is called the CP rank if it is the minimum integer that achieves the decomposition, see 
Fig. 1.4A. The CPD (1.26) also has a matricization form, i.e., the pp-mode matricization of 
T can be represented as 
bold upper T Subscript left parenthesis p right parenthesis Baseline equals bold upper V Superscript left parenthesis p right parenthesis Baseline bold upper Lamda left parenthesis bold upper V Superscript left parenthesis k right parenthesis Baseline circled dot midline horizontal ellipsis circled dot bold upper V Superscript left parenthesis p plus 1 right parenthesis Baseline circled dot bold upper V Superscript left parenthesis p minus 1 right parenthesis Baseline circled dot midline horizontal ellipsis circled dot bold upper V Superscript left parenthesis 1 right parenthesis Baseline right parenthesis commaT(p) = V(p)⌃(V(k) ʘ · · · ʘ V(p+1) ʘ V(p−1) ʘ · · · ʘ V(1)),
where bold upper T Subscript left parenthesis p right parenthesisT(p) is the pp-mode unfolding of T and bold upper Lamda⌃is a diagonal matrix that includes lamda Subscript jλ j along 
the diagonal. 
The CPD (1.26) can be solved using alternating least squares methods, and it is unique 
up to permutation and scaling under a weak condition, i.e., 
sigma summation Underscript p equals 1 Overscript k Endscripts Krank Subscript bold upper V Sub Superscript left parenthesis p right parenthesis Subscript Baseline greater than or equals 2 r plus k minus 1 comma
k
∑
p=1
KrankV(p) ≥2r + k −1,
Fig. 1.4 Examples of the CPD (a) and the orthogonal decomposition (b) of a third-order tensor

1.6
Tensor Decompositions
15
where Krank is the maximum number of columns of a matrix that are linearly independent 
of each other [ 39]. Although the best CP rank approximation is ill-posed, truncating the 
CP rank can still yield a good approximation of the original tensor [ 19, 39]. It is worth 
noting that both CPD and HOSVD can be expressed as Tucker products, known as Tucker 
decomposition (TD). 
CPD can be extended to even-order tensors in a generalized form known as generalized 
CPD [ 19, 72]. Given an even-order tensor sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk, it can be decomposed as 
sans serif upper T equals sigma summation Underscript j equals 1 Overscript r Endscripts lamda Subscript j Baseline sans serif upper V Subscript colon colon j Superscript left parenthesis 1 right parenthesis Baseline degrees sans serif upper V Subscript colon colon j Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees sans serif upper V Subscript colon colon j Superscript left parenthesis k right parenthesis Baseline commaT =
r
∑
j=1
λ jV(1)
:: j ◦V(2)
:: j ◦· · · ◦V(k)
:: j ,
(1.27) 
wherelamda Subscript j Baseline element of double struck upper R Superscript plusλ j ∈R+ are weights,sans serif upper V Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript n Super Subscript p Superscript times m Super Subscript p Superscript times rV(p) ∈Rn p×m p×r are third-order factor tensors, andrr is called 
the generalized CP rank (also called Kronecker rank) if it is the minimum integer that 
achieves the decomposition. 
If two even-order tensors are given in the generalized CPD form, the Einstein product 
between the two can be computed efﬁciently without using (1.8). Given two even-order 
tensorssans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk andsans serif upper S element of double struck upper R Superscript m 1 times h 1 times midline horizontal ellipsis times m Super Subscript k Superscript times h Super Subscript k SuperscriptS ∈Rm1×h1×···×mk×hk, both in the generalized CPD form 
with factor tensors sans serif upper V Superscript left parenthesis p right parenthesisV(p) and sans serif upper U Superscript left parenthesis p right parenthesisU(p), and with generalized CP ranks rr and ss, respectively, the 
Einstein product can be computed in the generalized CPD form as follows: 
sans serif upper T asterisk sans serif upper S equals sigma summation Underscript l equals 1 Overscript t Endscripts sans serif upper W Subscript colon colon l Superscript left parenthesis 1 right parenthesis Baseline degrees sans serif upper W Subscript colon colon l Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees sans serif upper W Subscript colon colon l Superscript left parenthesis k right parenthesis Baseline commaT ∗S =
t∑
l=1
W(1)
::l ◦W(2)
::l ◦· · · ◦W(k)
::l ,
(1.28) 
where sans serif upper W Subscript colon colon l Superscript left parenthesis p right parenthesis Baseline equals sans serif upper V Subscript colon colon j Superscript left parenthesis p right parenthesis Baseline sans serif upper U Subscript colon colon i Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript n Super Subscript p Superscript times h Super Subscript pW(p)
::l = V(p)
:: j U(p)
::i ∈Rn p×h p for l equals phi left parenthesis StartSet j comma i EndSet comma StartSet r comma s EndSet right parenthesisl = ϕ({ j, i}, {r, s}) and t equals r st = rs. 
Remark 1.1 Assuming n Subscript p Baseline equals m Subscript p Baseline equals h Subscript p Baseline equals nn p = m p = h p = n and r equals sr = s, the time complexity of computing 
the Einstein product in the generalized CPD form is approximately script upper O left parenthesis k n cubed r right parenthesisO(kn3r). In contrast, 
using (1.8) to compute the Einstein product requires around script upper O left parenthesis n Superscript 3 k Baseline right parenthesisO(n3k) operations. 
1.6.4
Tensor Orthogonal Decomposition 
Tensor orthogonal decomposition is a special case of CPD that only applies to supersymmet-
ric tensors [ 73]. It’s worth noting that not all supersymmetric tensors have the orthogonal 
decomposition. Given a kkth-order supersymmetric tensor sans serif upper T element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nT ∈Rn×n×
k···×n, the orthogonal 
decomposition decomposes sans serif upper TT as 
sans serif upper T equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline bold v Subscript j Baseline degrees bold v Subscript j Baseline degrees midline horizontal ellipsis Overscript k Endscripts degrees bold v Subscript j Baseline commaT =
n
∑
j=1
λ jv j ◦v j◦
k· · · ◦v j,
(1.29)

16
1
Tensor Preliminaries
where bold v Subscript j Baseline element of double struck upper R Superscript nv j ∈Rn are orthonormal vectors, as shown in Fig. 1.4b. Previous research [ 73] has  
shown thatlamda Subscript jλ j are the Z-eigenvalues ofsans serif upper TT with the corresponding Z-eigenvectorsbold v Subscript jv j (though 
lamda Subscript jλ j do not include all the Z-eigenvalues ofsans serif upper TT). If a supersymmetric tensor can be decomposed 
as in (1.29), it is called orthogonally decomposable (odeco). Odeco tensors possess the 
desirable orthonormal property, which can be applied to various applications, such as esti-
mating parameters in the method of moments from statistics [ 74]. While tensor orthogonal 
decomposition is NP-hard like CPD, a tensor-based power method [ 73] has been developed 
to obtain the orthogonal decomposition of an odeco tensor. It is important to note that tensor 
orthogonal decomposition is also a speciﬁc case of HOSVD, where S is a diagonal tensor 
with lamda Subscript jλ j as its diagonal entries. 
1.6.5
Tensor Train Decomposition 
Tensor train decomposition (TTD) is similar to CPD, but can offer better numerical stability. 
The TTD decomposes a kkth-order tensor sans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk in the following way: 
sans serif upper T equals sigma summation Underscript j 0 equals 1 Overscript r 0 Endscripts sigma summation Underscript j 1 equals 1 Overscript r 1 Endscripts midline horizontal ellipsis sigma summation Underscript j Subscript k Baseline equals 1 Overscript r Subscript k Baseline Endscripts sans serif upper V Subscript j 0 colon j 1 Superscript left parenthesis 1 right parenthesis Baseline degrees sans serif upper V Subscript j 1 colon j 2 Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees sans serif upper V Subscript j Sub Subscript k minus 1 Subscript colon j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline commaT =
r0
∑
j0=1
r1
∑
j1=1
· · ·
rk
∑
jk=1
V(1)
j0: j1 ◦V(2)
j1: j2 ◦· · · ◦V(k)
jk−1: jk,
(1.30) 
where StartSet r 0 comma r 1 comma ellipsis comma r Subscript k Baseline EndSet{r0,r1, . . . ,rk} is the set of TT-ranks with r 0 equals r Subscript k Baseline equals 1r0 = rk = 1, and sans serif upper V Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript r Super Subscript p minus 1 Superscript times n Super Subscript p Superscript times r Super Subscript pV(p) ∈Rrp−1×n p×rp are 
third-order factor tensors, see Fig. 1.5. Since the TTD is numerically stable, it can return 
optimal TT-ranks, which are computed as 
r Subscript p Baseline equals rank left parenthesis bold upper T Subscript left parenthesis p comma StartSet 1 comma 2 comma ellipsis comma k EndSet right parenthesis Baseline right parenthesis commarp = rank(T(p,{1,2,...,k})),
where bold upper T Subscript left parenthesis p comma StartSet 1 comma 2 comma ellipsis comma k EndSet right parenthesisT(p,{1,2,...,k}) are the unfolded matrices of T. A factor tensor sans serif upper V Superscript left parenthesis p right parenthesisV(p) is called left-
orthonormal if it satisﬁes the following condition: 
left parenthesis bold upper V Subscript left parenthesis 2 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesis Baseline right parenthesis Superscript down tack Baseline bold upper V Subscript left parenthesis 2 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesis Baseline equals bold upper I element of double struck upper R Superscript n Super Subscript p Superscript times n Super Subscript p Superscript Baseline comma(V(p)
(2,{1,2,3}))TV(p)
(2,{1,2,3}) = I ∈Rn p×n p,
and is called right-orthonormal if it satisﬁes the following condition: 
Fig. 1.5 An example of the TTD of a third-order tensor

1.6
Tensor Decompositions
17
bold upper V Subscript left parenthesis 1 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesis Baseline left parenthesis bold upper V Subscript left parenthesis 1 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesis Baseline right parenthesis Superscript down tack Baseline equals bold upper I element of double struck upper R Superscript n Super Subscript p minus 1 Superscript times n Super Subscript p minus 1 Superscript Baseline commaV(p)
(1,{1,2,3})(V(p)
(1,{1,2,3}))T = I ∈Rn p−1×n p−1,
wherebold upper V Subscript left parenthesis 2 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesisV(p)
(2,{1,2,3}) andbold upper V Subscript left parenthesis 1 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis p right parenthesisV(p)
(1,{1,2,3}) are the left-/right-unfolded matrices ofsans serif upper V Superscript left parenthesis p right parenthesisV(p). Here,bold upper II denotes 
the identity matrices. 
TTD has several advantages over CPD. First, it can provide better approximation, i.e., 
truncating the TT-ranks is quasi-optimal. Additionally, TTD is computationally robust. One 
interesting application of TTD is solving the TSVD of an even-order tensor efﬁciently, 
without the need for the unfolding psiψ [ 69, 75], see Algorithm 1. Note that in Step 2, if  
the TTD of T is provided, the TTD of sans serif upper T overbar¯T can be computed without converting to the full 
representation. In Step 5, the reshape operation refers to the MATLAB operation used 
for reshaping tensors. 
Remark 1.2 Assuming thatn Subscript p Baseline equals m Subscript p Baseline equals nn p = m p = n and the optimal TT-ranks ofsans serif upper T overbar¯T are equal torr, the  
economy-size TSVD via TTD has a time complexity ofscript upper O left parenthesis k n r cubed right parenthesisO(knr3) and a space complexity of 
script upper O left parenthesis k n r squared right parenthesisO(knr2). In contrast, the matrix SVD-based TSVD through unfolding requires around 
script upper O left parenthesis min left brace product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 2 Baseline m Subscript p Baseline comma product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline m Subscript p Superscript 2 Baseline right brace right parenthesisO
(
min
{
k∏
p=1
n2
pm p,
k∏
p=1
n pm2
p
})
number of operations. 
Similarly, TTD can also be deﬁned in a generalized form for even-order tensors (referred 
to as generalized TTD). Given an even-order tensorsans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk, it can be decom-
posed as 
sans serif upper T equals sigma summation Underscript j 0 equals 1 Overscript r 0 Endscripts sigma summation Underscript j 1 equals 1 Overscript r 1 Endscripts midline horizontal ellipsis sigma summation Underscript j Subscript k Baseline equals 1 Overscript r Subscript k Baseline Endscripts sans serif upper V Subscript j 0 colon colon j 1 Superscript left parenthesis 1 right parenthesis Baseline degrees sans serif upper V Subscript j 1 colon colon j 2 Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees sans serif upper V Subscript j Sub Subscript k minus 1 Subscript colon colon j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline commaT =
r0
∑
j0=1
r1
∑
j1=1
· · ·
rk
∑
jk=1
V(1)
j0:: j1 ◦V(2)
j1:: j2 ◦· · · ◦V(k)
jk−1:: jk,
(1.31) 
where StartSet r 0 comma r 1 comma ellipsis comma r Subscript k Baseline EndSet{r0,r1, . . . ,rk} is the set of the generalized TT-ranks with r 0 equals r Subscript k Baseline equals 1r0 = rk = 1, and  sans serif upper V Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript r Super Subscript p minus 1 Superscript times n Super Subscript p Superscript times m Super Subscript p Superscript times r Super Subscript pV(p) ∈
Rrp−1×n p×m p×rp are fourth-order factor tensors. To further reduce the complexity of gener-
alized TTD, one can consider quantizing each dimension of the tensor by setting 
n Subscript p Baseline equals product Underscript q equals 1 Overscript b Subscript p Baseline Endscripts n Subscript p q Baseline and m Subscript p Baseline equals product Underscript q equals 1 Overscript b Subscript p Baseline Endscripts m Subscript p q Baselinen p =
bp
∏
q=1
n pq
and
m p =
bp
∏
q=1
m pq
for some positive integers b Subscript pbp [ 25, 72, 76]. This extension is referred to as quantized TTD, 
and a typical choice for n Subscript p qn pq and m Subscript p qm pq is 2. It’s worth noting that the quantized TTD of sans serif upper TT is 
equivalent to the generalized TTD of a reshaped tensor of T, denoted by 
sans serif upper T overTilde element of double struck upper R Superscript n 11 times m 11 times midline horizontal ellipsis times n Super Subscript 1 b 1 Superscript times m Super Subscript 1 b 1 Superscript times midline horizontal ellipsis times n Super Subscript k Baseline 1 Superscript times m Super Subscript k Baseline 1 Superscript times midline horizontal ellipsis times n Super Subscript k b Super Sub Subscript k Super Subscript Superscript times m Super Subscript k b Super Sub Subscript k Super Subscript Superscript Baseline period˜T ∈Rn11×m11×···×n1b1×m1b1×···×nk1×mk1×···×nkbk ×mkbk .

18
1
Tensor Preliminaries
An algorit hm . It includes  7 st eps.  An e ven o rder tenso r T is given . Fin d the S transpose of T with S. Left orthonormalize the first K core tensors of the T bar. Compute the matrix S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.69An  algo
rithm. It includes 7 steps. An even order tensor T is given. Find the S transpose of T with S. Left orthonormalize the first K core tensors of the T bar. Compute the matrix S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.
An algori thm . It includ es 7 st ep s. An even order te
nso r T i
s gi
ven. Find th
e S
 t
ransp
os e  of T w i t h  S. Left ortho n o r m alize 
the firs
t K
 co re
 tensors of the T bar. Comp ute the matr ix S  V D , s et 
V s uperscript K and V s uper scrip t K plu s 1, the  le ft and right singular tensor s ar e giv en , t hen r
eturn.", "au tho
r_a lt-text" :"0" ,"space_media _id":"1 3821 95" },{" name ":"536340_1_En _1_Fig6 _HT ML", "label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.
An algorithm. It includes 7 steps. An even order tensor T is given. Find the S transpose of T with S. Left orthonormalize the first K core tensors of the T bar. Compute the matrix S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.V(k)
(2,{1,2,3}) = U∑VT =
r
∑
j=1
σ ju jvT
j ,
An alg or ith m. I t inc lud es 7  steps. 
An even  order  tensor T is given. Find the S transp ose of T with S. 
Left orthonormalize the firs
t K  cor e ten sors  of the T bar. Compute the  m atri x S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.
An algorithm. It includes 7 steps. An even order tensor T is given. Find the S transpose of T with S. Left orthonormalize the first K core tensors of the T bar. Compute the matrix S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.
X j =
r0
∑
j0=1
r1
∑
j1=1
· · ·
rk−1
∑
jk−1=1
V(1)
j0: j1 ◦V(2)
j1: j2 ◦· · · ◦V(k)
jk−1: j,
Y j =
rk
∑
jk=1
rk+1
∑
jk+1=1
· · ·
r2k
∑
j2k=1
X(k+1)
j: jk+1 ◦X(k+2)
jk+1: jk+2 ◦· · · ◦X(2k)
j2k−1: j2k ,
An algorithm.
 It  includ es 7 step s. An even orde r tensor  T  i s gi ve n.  Find  the S tran spose o f T wit h S. Left orthonormalize the first K core tensors of the T bar. Compute the matrix S V D, set V superscript K and V superscript K plus 1, the left and right singular tensors are given, then return.","author_alt-text":"0","space_media_id":"1382195"},{"name":"536340_1_En_1_Fig6_HTML","label":"Fig. 1.6","caption":"An example of a binary tree of a fifth-order tensor","page_number":"","action":"new","type":"image","file_ref":["Images/536340_1_En_1_Fig6_HTML.jpg"],"long_description":"A hierarchy. G 1 2 3 4 5 is divided into 2 parts, G 1 2 3 and G 4 5. G 1 2 3 is divided into 2 parts, G 1 2 and U 3. G 45 is divided into 2 parts, U 4 and U 5. G 1 2 is divided into 2 parts, U 1 and U 2.
The Einstein product can be computed efﬁciently in the generalized TTD form analogous 
to (1.28). Given two even-order tensorssans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk andsans serif upper S element of double struck upper R Superscript m 1 times h 1 times midline horizontal ellipsis times m Super Subscript k Superscript times h Super Subscript k SuperscriptS ∈Rm1×h1×···×mk×hk in 
the generalized TTD form with factor tensorssans serif upper V Superscript left parenthesis p right parenthesisV(p) andsans serif upper U Superscript left parenthesis p right parenthesisU(p), and with generalized TTD ranks 
StartSet r 0 comma r 1 comma ellipsis comma r Subscript k Baseline EndSet{r0,r1, . . . ,rk} and StartSet s 0 comma s 1 comma ellipsis comma s Subscript k Baseline EndSet{s0, s1, . . . , sk}, respectively, the Einstein product is then computed as 
sans serif upper T asterisk sans serif upper S equals sigma summation Underscript l 0 equals 1 Overscript t 0 Endscripts sigma summation Underscript l 1 equals 1 Overscript t 1 Endscripts midline horizontal ellipsis sigma summation Underscript l Subscript k Baseline equals 1 Overscript t Subscript k Baseline Endscripts sans serif upper W Subscript l 0 colon colon l 1 Superscript left parenthesis 1 right parenthesis Baseline degrees sans serif upper W Subscript l 1 colon colon l 2 Superscript left parenthesis 2 right parenthesis Baseline degrees midline horizontal ellipsis degrees sans serif upper W Subscript l Sub Subscript k minus 1 Subscript colon colon l Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline commaT ∗S =
t0
∑
l0=1
t1
∑
l1=1
· · ·
tk
∑
lk=1
W(1)
l0::l1 ◦W(2)
l1::l2 ◦· · · ◦W(k)
lk−1::lk,
(1.32) 
where 
sans serif upper W Subscript l Sub Subscript p minus 1 Subscript colon colon l Sub Subscript p Superscript left parenthesis p right parenthesis Baseline equals sans serif upper V Subscript j Sub Subscript p minus 1 Subscript colon colon j Sub Subscript p Superscript left parenthesis p right parenthesis Baseline sans serif upper U Subscript i Sub Subscript p minus 1 Subscript colon colon i Sub Subscript p Superscript left parenthesis p right parenthesis Baseline element of double struck upper R Superscript n Super Subscript p Superscript times h Super Subscript pW(p)
lp−1::lp = V(p)
jp−1:: jpU(p)
i p−1::i p ∈Rn p×h p
for l Subscript p Baseline equals phi left parenthesis StartSet j Subscript p Baseline comma i Subscript p Baseline EndSet comma StartSet r Subscript p Baseline comma s Subscript p Baseline EndSet right parenthesislp = ϕ({ jp, i p}, {rp, sp}) and t Subscript p Baseline equals r Subscript p Baseline s Subscript ptp = rpsp. 
Remark 1.3 The computational complexity of the Einstein product in the generalized TTD 
form is about script upper O left parenthesis k n cubed r Superscript 4 Baseline right parenthesisO(kn3r4) (assuming n Subscript p Baseline equals m Subscript p Baseline equals h Subscript p Baseline equals nn p = m p = h p = n and r Subscript p Baseline equals s Subscript p Baseline equals rrp = sp = r).

1.6
Tensor Decompositions
19
Fig. 1.6 An example of a binary tree of a ﬁfth-order tensor 
In addition, a range of other tensor operations, including summation, outer/inner product, 
U-eigenvalue, U-transpose, and solving multilinear equations (i.e., sans serif upper T asterisk sans serif upper X equals sans serif upper BT ∗X = B), can also be 
efﬁciently performed using the generalized TTD form. For further details, interested readers 
may refer to [ 69, 72]. It’s worth noting that all these results also apply to quantized TTD. 
1.6.6
Hierarchical Tucker Decomposition 
Hierarchical Tucker decomposition (HTD) is a structured tensor representation method that 
efﬁciently approximates a high-dimensional tensor using a multi-level approach [ 77– 79]. 
In fact, TTD is a speciﬁc instance of HTD. The general idea behind HTD is to recursively 
split the modes of a tensor sans serif upper T element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript k SuperscriptT ∈Rn1×n2×···×nk, resulting in a binary tree structure for its 
dimensions (Fig. 1.6). The binary tree captures a hierarchy of matrices bold upper U Subscript pUp, which form a 
basis for the column spaces of thepp-mode matricizationbold upper T Subscript left parenthesis p right parenthesisT(p) forp subset of StartSet 1 comma 2 comma ellipsis comma k EndSetp ⊂{1, 2, . . . , k}. Not all 
matrices in the HTD of T need to be explicitly stored, as the matrixbold upper U Subscript pUp of a parent node can 
be computed from its left child bold upper U Subscript p lUpl and right child bold upper U Subscript p rUpr as 
bold upper U Subscript p Baseline equals left parenthesis bold upper U Subscript p l Baseline circled times bold upper U Subscript p r Baseline right parenthesis bold upper G Subscript p Baseline commaUp = (Upl ⊗Upr)Gp,
(1.33) 
where bold upper G Subscript p Baseline element of double struck upper R Superscript r Super Subscript p l Superscript r Super Subscript p r times r Super Subscript pGp ∈Rrplrpr×rp are called the transfer matrices with HT-ranks r Subscript p lrpl, r Subscript p rrpr, and  r Subscript prp at 
nodes p Subscript lpl, p Subscript rpr, and  pp, respectively. The construction of the HTD begins with the leaf nodes 
and proceeds recursively by applying (1.33) until the root of the binary tree is reached. It is 
important to note that the rank r Subscript prp is ﬁxed to 1 at the root node. HTD is particularly useful 
when dealing with very large tensors, as it allows for a compact representation that can be 
stored and manipulated efﬁciently.

20
1
Tensor Preliminaries
1.6.7
t-Singular Value/Eigenvalue Decomposition 
t-singular value decomposition (t-SVD) is a generalization of matrix SVD for third-order 
tensors [ 45]. The t-SVD decomposes a third-order tensor sans serif upper T element of double struck upper R Superscript n times m times sT ∈Rn×m×s as 
sans serif upper T equals sans serif upper U star sans serif upper S star sans serif upper V Superscript down tack Baseline commaT = U ★S ★VT,
(1.34) 
wheresans serif upper U element of double struck upper R Superscript n times n times sU ∈Rn×n×s andsans serif upper V element of double struck upper R Superscript m times m times sV ∈Rm×m×s are t-orthogonal, andsans serif upper S element of double struck upper R Superscript n times m times sS ∈Rn×m×s is f-diagonal (each 
frontal slice ofsans serif upper SS is a diagonal matrix). The tubes of S, i.e.,sans serif upper S Subscript j j colonS j j:, are referred to as the singular 
tuples of T. The  t-SVD (1.34) can be rewritten in the economy-size form as: 
sans serif upper T equals sigma summation Underscript j equals 1 Overscript r Endscripts sans serif upper U Subscript colon j colon Baseline star sans serif upper S Subscript j j colon Baseline star sans serif upper V Subscript colon j colon Superscript down tack Baseline commaT =
r
∑
j=1
U: j:★S j j:★VT
: j:,
(1.35) 
where rr is called the t-rank of T deﬁned as the number of nonzero singular tuples. 
Similarly, the t-eigenvalue decomposition decomposes a third-order tensor sans serif upper T element of double struck upper R Superscript n times n times sT ∈Rn×n×s
as 
sans serif upper T equals sans serif upper V star sans serif upper D star sans serif upper V Superscript negative 1 Baseline commaT = V★D★V−1,
(1.36) 
where sans serif upper V element of double struck upper C Superscript n times n times sV ∈Cn×n×s and sans serif upper D element of double struck upper C Superscript n times n times sD ∈Cn×n×s is f-diagonal. The tubes of D, i.e., sans serif upper D Subscript j j colonD j j:, are referred to 
as the eigentuples. 
The t-SVD (or t-eigenvalue decomposition) can be computed using the matrix SVD (or 
eigenvalue decomposition) in the Fourier domain, i.e., 
left parenthesis bold upper F Subscript n Baseline circled times bold upper I Subscript s Baseline right parenthesis monospace bcirc left parenthesis sans serif upper T right parenthesis left parenthesis bold upper F Subscript n Superscript down tack Baseline circled times bold upper I Subscript s Baseline right parenthesis equals monospace blockdiag left parenthesis bold upper T Subscript 1 Baseline comma bold upper T Subscript 2 Baseline comma ellipsis comma bold upper T Subscript s Baseline right parenthesis comma(Fn ⊗Is)bcirc(T)(FT
n ⊗Is) = blockdiag(T1, T2, . . . , Ts),
(1.37) 
where blockdiag denotes the MATLAB function that creates a block diagonal matrix, 
bold upper F Subscript n Baseline element of double struck upper R Superscript n times nFn ∈Rn×n is the discrete Fourier transform matrix deﬁned as 
bold upper F Subscript n Baseline equals StartFraction 1 Over StartRoot n EndRoot EndFraction Start 4 By 5 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 4th Column midline horizontal ellipsis 5th Column 1 2nd Row 1st Column 1 2nd Column omega 3rd Column omega squared 4th Column midline horizontal ellipsis 5th Column omega Superscript n minus 1 Baseline 3rd Row 1st Column vertical ellipsis 2nd Column vertical ellipsis 3rd Column vertical ellipsis 4th Column down right diagonal ellipsis 5th Column vertical ellipsis 4th Row 1st Column 1 2nd Column omega Superscript n minus 1 Baseline 3rd Column omega Superscript 2 left parenthesis n minus 1 right parenthesis Baseline 4th Column midline horizontal ellipsis 5th Column omega Superscript left parenthesis n minus 1 right parenthesis squared EndMatrixFn =
1
√n
⎡
⎢⎢⎢⎢⎣
1
1
1
· · ·
1
1
ω
ω2
· · · ωn−1
...
...
...
...
...
1 ωn−1 ω2(n−1) · · · ω(n−1)2
⎤
⎥⎥⎥⎥⎦
with omega equals exp left brace StartFraction minus 2 pi j Over n EndFraction right braceω = exp { −2π j
n
} (note that j j denotes the imaginary number here), and bold upper I Subscript s Baseline element of double struck upper R Superscript s times sIs ∈Rs×s
denotes the identity matrix of size ss. Then the t-SVD/eigenvalue decomposition of T can 
be constructed (implicitly) by applying the appropriate matrix decomposition to bold upper T Subscript jT j. More 
details can be found in [ 44, 45, 47].

References
21
References 
1. Voigt, Woldemar. 1898. Die fundamentalen physikalischen Eigenschaften der Krystalle in ele-
mentarer Darstellung. de Gruyter. 
2. Irgens, Fridtjov. 2008. Continuum mechanics. Springer Science & Business Media. 
3. Spencer, Anthony James Merrill. 2004. Continuum mechanics. Courier Corporation. 
4. Gurtin, Morton E. 1982. An introduction to continuum mechanics. Academic. 
5. Katzin, Gerald H., Jack Levine, and William R. Davis. 1969. Curvature collineations: A funda-
mental symmetry property of the space-times of general relativity deﬁned by the vanishing lie 
derivative of the riemann curvature tensor. Journal of Mathematical Physics 10 (4): 617–629. 
6. Kühnel, Wolfgang. 2015. Differential geometry, vol. 77. American Mathematical Society. 
7. Guggenheimer, Heinrich W. (2012). Differential geometry. Courier Corporation. 
8. Einstein, Albert. 1922. The general theory of relativity. In The meaning of relativity, 54–75. 
Berlin: Springer. 
9. Hawking, Stephen and W. Israel. 2010. General relativity: an einstein centenary survey. General 
relativity: An Einstein Centenary Survey. 
10. Cammoun, Leila, Carlos-Alberto Castaño-Moraga, Emma Muñoz-Moreno, Darío Sosa-Cabrera, 
Burak Acar, Miguel A Rodriguez-Florido, Anders Brun, Hans Knutsson and Jean-Philippe Thi-
ran. 2009. A review of tensors and tensor signal processing. In Tensors in image processing and 
computer vision, 1–32. 
11. Sidiropoulos, Nicholas D, Lieven De Lathauwer, Xiao Fu, Kejun Huang, Evangelos E Papalex-
akis, and Christos Faloutsos. 2017. Tensor decomposition for signal processing and machine 
learning. IEEE Transactions on Signal Processing 65 (13): 3551–3582. 
12. Favier, Gérard. 2021. Matrix and Tensor Decompositions in Signal Processing, vol. 2. New  York:  
Wiley. 
13. Ji, Yuwang, Qiang Wang, Xuan Li, and Jie Liu. 2019. A survey on tensor techniques and appli-
cations in machine learning. IEEE Access 7: 162950–162990. 
14. Signoretto, Marco, Quoc Tran Dinh, Lieven De Lathauwer, and Johan AK Suykens. Learning 
with tensors: a framework based on convex optimization and spectral regularization. Machine 
Learning, 94 (3): 303–351. 
15. Rabanser, Stephan, Oleksandr Shchur, and Stephan Günnemann. 2017. Introduction to tensor 
decompositions and their applications in machine learning. arXiv:1711.10781. 
16. Bi, Xuan, and Xiwei Tang. 2021. Tensors in statistics. Annual Review of Statistics and Its Appli-
cation, 8.  
17. Koutsoukos, Dimitrios, Supun Nakandala, Konstantinos Karanasos, Karla Saur, Gustavo Alonso, 
and Matteo Interlandi. 2021. Tensors: An abstraction for general data processing. Proceedings 
of the VLDB Endowment 14 (10): 1797–1804. 
18. Bocci, Cristiano, and Luca Chiantini. An Introduction to Algebraic Statistics with Tensors, vol. 1.  
Berlin: Springer. 
19. Chen, Can, Amit Surana, Anthony M Bloch, and Indika Rajapakse. 2021. Multilinear control 
systems theory. SIAM Journal on Control and Optimization 59 (1): 749–776. 
20. Rogers, Mark, Lei Li, and Stuart J Russell. 2013. Multilinear dynamical systems for tensor time 
series. Advances in Neural Information Processing Systems, 26. 
21. Chen, Can. 2023. Explicit solutions and stability properties of homogeneous polynomial dynam-
ical systems. IEEE Transactions on Automatic Control 68 (8): 4962–4969. 
22. Chen, Can. 2024. On the stability of discrete-time homogeneous polynomial dynamical systems. 
Computational and Applied Mathematics 43: 75. 
23. Lim, Lek-Heng. 2021. Tensors in computations. Acta Numerica 30: 555–764.

22
1
Tensor Preliminaries
24. Ballani, Jonas, and Lars Grasedyck. 2013. A projection method to solve linear systems in tensor 
format. Numerical linear algebra with applications 20 (1): 27–43. 
25. Oseledets, Ivan V. 2010. Approximation of2 Superscript d Baseline times 2 Superscript d2d × 2d matrices using tensor decomposition. SIAM 
Journal on Matrix Analysis and Applications 31 (4): 2130–2145. 
26. Aja-Fernández, Santiago, Rodrigo de Luis Garcia, Dacheng Tao, and Xuelong Li. 2009. Tensors 
in Image Processing and Computer Vision. Springer Science & Business Media. 
27. Panagakis, Yannis, Jean Kossaiﬁ, Grigorios G Chrysos, James Oldﬁeld, Mihalis A Nicolaou, 
Anima Anandkumar, and Stefanos Zafeiriou. 2021. Tensor methods in computer vision and deep 
learning. Proceedings of the IEEE 109 (5): 863–890. 
28. Shashua, Amnon, and Tamir Hazan. 2005. Non-negative tensor factorization with applications to 
statistics and computer vision. In Proceedings of the 22nd international conference on machine 
learning, 792–799. 
29. Mori, Susumu, and Jiangyang Zhang. 2006. Principles of diffusion tensor imaging and its appli-
cations to basic neuroscience research. Neuron 51 (5): 527–539. 
30. Soares, José M, Paulo Marques, Victor Alves, and Nuno Sousa. 2013. A hitchhiker’s guide to 
diffusion tensor imaging. Frontiers in Neuroscience, 7: 31. 
31. Cong, Fengyu, Qiu-Hua. Lin, Li-Dan. Kuang, Xiao-Feng. Gong, Piia Astikainen, and Tapani 
Ristaniemi. 2015. Tensor decomposition of eeg signals: a brief review. Journal of Neuroscience 
Methods 248: 59–69. 
32. Chen, Haibin, Yannan Chen, Guoyin Li, and Liqun Qi. 2018. A semideﬁnite program approach 
for computing the maximum eigenvalue of a class of structured tensors and its applications in 
hypergraphs and copositivity test. Numerical Linear Algebra with Applications 25 (1): e2125. 
33. Chen, Can, and Indika Rajapakse. 2020. Tensor entropy for uniform hypergraphs. IEEE Trans-
actions on Network Science and Engineering 7 (4): 2889–2900. 
34. Xie, Jinshan, and An. Chang. 2013. On the z-eigenvalues of the adjacency tensors for uniform 
hypergraphs. Linear Algebra and Its Applications 439 (8): 2195–2204. 
35. Chen, Can, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2019. Multilinear time invariant 
system theory. In 2019 Proceedings of the conference on control and its applications, 118–125. 
SIAM. 
36. Chen, Haiming, Jie Chen, Lindsey A Muir, Scott Ronquist, Walter Meixner, Mats Ljungman, 
Thomas Ried, Stephen Smale, and Indika Rajapakse. 2015. Functional organization of the human 
4d nucleome. Proceedings of the National Academy of Sciences 112 (26): 8002–8007. 
37. Cui, Lu-Bin, Chuan Chen, Wen Li, and Michael K Ng. 2016. An eigenvalue problem for even 
order tensors with its applications. Linear and Multilinear Algebra 64 (4): 602–621. 
38. Sang, Caili, and Zhen Chen. 2020. Z-eigenvalue localization sets for even order tensors and their 
applications. Acta Applicandae Mathematicae 169 (1): 323–339. 
39. Kolda, Tamara G, and Brett W Bader. 2009. Tensor decompositions and applications. SIAM 
Review 51 (3): 455–500. 
40. Ragnarsson, Stefan, and Charles F Van Loan. 2012. Block tensor unfoldings. SIAM Journal on 
Matrix Analysis and Applications 33 (1): 149–169. 
41. Brazell, Michael, Na. Li, Carmeliza Navasca, and Christino Tamon. 2013. Solving multilinear 
systems via tensor inversion. SIAM Journal on Matrix Analysis and Applications 34 (2): 542–570. 
42. Qi, Liqun. 2005. Eigenvalues of a real supersymmetric tensor. Journal of Symbolic Computation 
40 (6): 1302–1324. 
43. Lim, Lek-Heng. 2005. Singular values and eigenvalues of tensors: a variational approach. In 1st 
IEEE international workshop on computational advances in multi-sensor adaptive processing, 
129–132. IEEE. 
44. Kilmer, Misha E, Karen Braman, Ning Hao, and Randy C Hoover. 2013. Third-order tensors as 
operators on matrices: A theoretical and computational framework with applications in imaging. 
SIAM Journal on Matrix Analysis and Applications 34 (1): 148–172.

References
23
45. Kilmer, Misha E, Carla D Martin, and Lisa Perrone. 2008. A third-order generalization of the 
matrix svd as a product of third-order tensors. Tufts University, Department of Computer Science, 
Technical Report. TR-2008-4. 
46. Kilmer, Misha E, and Carla D Martin. 2011. Factorization strategies for third-order tensors. 
Linear Algebra and Its Applications 435 (3): 641–658. 
47. Zhang, Zemin, and Shuchin Aeron. 2016. Exact tensor completion using t-svd. IEEE Transactions 
on Signal Processing 65 (6): 1511–1526. 
48. Pollock, D. Stephen G. 2013. On kronecker products, tensor products and matrix differential 
calculus. International Journal of Computer Mathematics 90 (11): 2462–2476. 
49. Liu, Shuangzhe, Gotz Trenkler, et al. 2008. Hadamard, khatri-rao, kronecker and other matrix 
products. International Journal of Information and Systems Sciences 4 (1): 160–177. 
50. Broxson, Bobbi Jo. 2006. The kronecker product. 
51. Pickard, Joshua, Cooper Stansbury, Can Chen, Amit Surana, Anthony Bloch, and Indika 
Rajapakse. 2023. Kronecker product of tensors and hypergraphs. arXiv:2305.03875. 
52. Liu, Shuangzhe. 2002. Several inequalities involving khatri-rao products of positive semideﬁnite 
matrices. Linear Algebra and Its Applications 354 (1–3): 175–186. 
53. Qi, Liqun. 2006. Rank and eigenvalues of a supersymmetric tensor, the multivariate homogeneous 
polynomial and the algebraic hypersurface it deﬁnes. Journal of Symbolic Computation 41 (12): 
1309–1327. 
54. Brachat, Jerome, Pierre Comon, Bernard Mourrain, and Elias Tsigaridas. 2010. Symmetric tensor 
decomposition. Linear Algebra and Its Applications 433 (11–12): 1851–1872. 
55. Sun, Lizhu, Baodong Zheng, Bu. Changjiang, and Yimin Wei. 2016. Moore-penrose inverse of 
tensors via einstein product. Linear and Multilinear Algebra 64 (4): 686–698. 
56. Liang, Mao-lin, Bing Zheng, and Rui-juan Zhao. 2019. Tensor inversion and its application to 
the tensor equations with einstein product. Linear and Multilinear Algebra 67 (4): 843–870. 
57. Qi, Liqun. 2007. Eigenvalues and invariants of tensors. Journal of Mathematical Analysis and 
Applications 325 (2): 1363–1377. 
58. Hillar, Christopher J., and Lek-Heng Lim. 2013, Most tensor problems are np-hard. Journal of 
the ACM (JACM) 60 (6): 1–39. 
59. Ng, Michael, Liqun Qi, and Guanglu Zhou. 2010. Finding the largest eigenvalue of a nonnegative 
tensor. SIAM Journal on Matrix Analysis and Applications 31 (3): 1090–1099. 
60. Chen, Liping, Lixing Han, and Liangmin Zhou. 2016. Computing tensor eigenvalues via homo-
topy methods. SIAM Journal on Matrix Analysis and Applications 37 (1): 290–319. 
61. Kolda, Tamara G., and Jackson R Mayo. 2011. Shifted power method for computing tensor 
eigenpairs. SIAM Journal on Matrix Analysis and Applications 32 (4): 1095–1124. 
62. Hitchcock, Frank L. 1927. The expression of a tensor or a polyadic as a sum of products. Journal 
of Mathematics and Physics 6 (1–4): 164–189. 
63. Hitchcock, Frank L. 1928. Multiple invariants and generalized rank of a p-way matrix or tensor. 
Journal of Mathematics and Physics 7 (1–4): 39–79. 
64. Tucker, Ledyard R. 1963. Implications of factor analysis of three-way matrices for measurement 
of change. Problems in Measuring Change 15 (122–137): 3. 
65. Tucker, Ledyard R., et al. 1964. The extension of factor analysis to three-dimensional matrices. 
Contributions to Mathematical Psychology 110119. 
66. Tucker, Ledyard R. 1966. Some mathematical notes on three-mode factor analysis. Psychome-
trika 31 (3): 279–311. 
67. De Lathauwer, Lieven, Bart De Moor, and Joos Vandewalle. 2000. A multilinear singular value 
decomposition. SIAM Journal on Matrix Analysis and Applications 21 (4): 1253–1278. 
68. Bergqvist, Göran, and Erik G Larsson. 2010. The higher-order singular value decomposition: 
Theory and an application [lecture notes]. IEEE Signal Processing Magazine 27 (3): 151–154.

24
1
Tensor Preliminaries
69. Chen, Can, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2019. Data-driven model reduc-
tion for multilinear control systems via tensor trains. arXiv:1912.03569. 
70. Behera, Ratikanta, and Debasisha Mishra. 2017. Further results on generalized inverses of tensors 
via the einstein product. Linear and Multilinear Algebra 65 (8): 1662–1682. 
71. Panigrahy, Krushnachandra, and Debasisha Mishra. 2022. Extension of moore-penrose inverse 
of tensor via einstein product. Linear and Multilinear Algebra 70 (4): 750–773. 
72. Gelß, Patrick. 2017. The tensor-train format and its applications: Modeling and analysis of 
chemical reaction networks, catalytic processes, ﬂuid ﬂows, and Brownian dynamics. Ph.D. 
thesis. 
73. Robeva, Elina. 2016. Orthogonal decomposition of symmetric tensors. SIAM Journal on Matrix 
Analysis and Applications 37 (1): 86–102. 
74. Anandkumar, Animashree, Rong Ge, Daniel Hsu, Sham M Kakade, and Matus Telgarsky. 
2014. Tensor decompositions for learning latent variable models. Journal of Machine Learn-
ing Research 15: 2773–2832. 
75. Klus, Stefan, Patrick Gelß, Sebastian Peitz, and Christof Schütte. 2018. Tensor-based dynamic 
mode decomposition. Nonlinearity 31 (7): 3359. 
76. Oseledets, I. V. 2009. Approximation of matrices with logarithmic number of parameters. In 
Doklady mathematics, vol 80, 653–654. Berlin: Springer. 
77. Hou, Ming, and Brahim Chaib-Draa. 2015. Hierarchical tucker tensor regression: Application to 
brain imaging data analysis. In 2015 IEEE international conference on image processing (ICIP), 
1344–1348. IEEE. 
78. Grasedyck, Lars. 2010. Hierarchical singular value decomposition of tensors. SIAM Journal on 
Matrix Analysis and Applications 31 (4): 2029–2054. 
79. Lubich, Christian, Thorsten Rohwedder, Reinhold Schneider, and Bart Vandereycken. 2013. 
Dynamical approximation by hierarchical tucker and tensor-train tensors. SIAM Journal on 
Matrix Analysis and Applications 34 (2): 470–494.

2
Tucker Product-Based Dynamical Systems 
Abstract 
The Tucker product-based dynamical system (TPDS) representation was ﬁrst introduced 
by Rogers et al. [Adv. Neural Inf. Process. Syst.] in 2013. The representation is a gen-
eralization of the linear dynamical system (LDS) model which can preserve the state 
and output of the system as tensors. TPDSs utilize multilinear operators formed by the 
Tucker product of matrices to govern the system evolution and can be used to capture 
dynamics with tensor time-series data. Techniques for TPDS model reduction and system 
identiﬁcation have been developed. Furthermore, system-theoretic properties, including 
stability, reachability, and observability, have been extended to TPDSs through tensor 
algebra, enabling efﬁcient computation. 
2.1
Overview 
Tensor time-series data represents a unique and powerful way to capture the evolution of 
complex systems over time [ 1– 7]. Unlike traditional time-series data, which consists of 
a single sequence of measurements, tensor time-series data embodies a multidimensional 
array of measurements, enabling the representation of intricate interactions and relationships 
between multiple variables. This rich data format has emerged as a valuable tool in various 
ﬁelds, including economics [ 8– 10], climatology [ 11– 13], ecology [ 14– 16], and biology 
[ 17– 19]. For instance, the dynamics of human genome involves the interactions between 
3D genome architecture, function, and its relationship to phenotype over time, known as 4D 
Nucleome [ 19– 21], which naturally ﬁts the tensorial structure. 
One prominent application of tensor time-series data lies in forecasting future measure-
ments based on historical observations. This task, known as system identiﬁcation, aims to 
uncover the underlying patterns and relationships within the data to predict future trends. 
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_2 
25

26
2
Tucker Product-Based Dynamical Systems
Numerous system identiﬁcation techniques have been developed for linear and nonlinear 
vector-based dynamical systems, such as eigensystem realization algorithm [ 22, 23], bal-
anced proper orthogonal decomposition [ 24, 25], sparse identiﬁcation of nonlinear dynamics 
[ 26, 27], and others [ 28– 31]. However, these methods cannot be directly applicable to tensor 
time-series data due to the inherent challenges of handling multidimensional data structures. 
A common approach to circumvent this limitation involves vectorizing the tensor time-
series data, transforming it into a one-dimensional vector [ 1, 2]. While this approach enables 
the application of traditional system identiﬁcation methods, it leads to an explosion in 
dimensionality, potentially obscuring the underlying structure of the data and rendering 
computations intractable. In other words, vectorization disregards the inherent tensorial 
nature of the data, which can provide valuable information for efﬁcient representation and 
computation [ 32]. 
This chapter discusses the discrete-time Tucker product-based dynamical system (TPDS) 
proposed in [ 1]. The evolution of the system is governed by multilinear operators formed 
using the Tucker product of matrices. The TPDS representation with outputs is deﬁned as 
StartLayout Enlarged left brace 1st Row sans serif upper X Subscript t plus 1 Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper A Subscript 1 Baseline comma bold upper A Subscript 2 Baseline comma ellipsis comma bold upper A Subscript k Baseline EndSet 2nd Row sans serif upper Y Subscript t Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper C Subscript 1 Baseline comma bold upper C Subscript 2 Baseline comma ellipsis comma bold upper C Subscript k Baseline EndSet EndLayout comma
{
Xt+1 = Xt × {A1, A2, . . . , Ak}
Yt = Xt × {C1, C2, . . . , Ck}
,
(2.1) 
where sans serif upper X Subscript t Baseline element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript kXt ∈Rn1×n2×···×nk are the state variables, sans serif upper Y Subscript t Baseline element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript kYt ∈Rm1×m2×···×mk are the output vari-
ables/measurements, andbold upper A Subscript p Baseline element of double struck upper R Superscript n Super Subscript p Superscript times n Super Subscript pAp ∈Rn p×n p andbold upper C Subscript p Baseline element of double struck upper R Superscript m Super Subscript p Superscript times n Super Subscript pCp ∈Rm p×n p are real-value parameter matrices 
forp equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k. The TPDS representation provides a more comprehensive and nuanced 
understanding of system dynamics, making it particularly well-suited for modeling complex 
systems with tensor time-series data [ 1]. After applying the Kronecker product, the TPDS 
(2.1) can be expressed in a vectorized form as follows: 
StartLayout Enlarged left brace 1st Row vec left parenthesis sans serif upper X Subscript t plus 1 Baseline right parenthesis equals bold upper A vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis 2nd Row vec left parenthesis sans serif upper Y Subscript t Baseline right parenthesis equals bold upper C vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis EndLayout comma
{
vec(Xt+1) = Avec(Xt)
vec(Yt) = Cvec(Xt)
,
(2.2) 
where bold upper A equals bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 BaselineA = Ak ⊗Ak−1 ⊗· · · ⊗A1 and bold upper C equals bold upper C Subscript k Baseline circled times bold upper C Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper C Subscript 1 BaselineC = Ck ⊗Ck−1 ⊗· · · ⊗C1. Here, the notation 
“vec” denotes the vectorization operation deﬁned in Chap. 1. 
Given tensor time-series measurements sans serif upper Y Subscript 1 Baseline comma sans serif upper Y Subscript 2 Baseline comma ellipsis comma sans serif upper Y Subscript upper T BaselineY1,Y2, . . . ,YT , our objective is to estimate the 
dynamics of the measurements by ﬁtting the TPDS (2.1). The number of parameters in the 
TPDS (2.1) is only on the order of 
script upper O left parenthesis sigma summation Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 2 Baseline plus n Subscript p Baseline m Subscript p Baseline right parenthesis commaO
(
k
∑
p=1
n2
p + n pm p
)
,
while the number of parameters using tensor vectorization is on the order of

2.2
System Identification
27
script upper O left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 2 Baseline plus product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline m Subscript p Baseline right parenthesis periodO
(
k∏
p=1
n2
p +
k∏
p=1
n pm p
)
.
Therefore, the TPDS representation offers signiﬁcant advantages in terms of parameter efﬁ-
ciency compared to traditional vector-based dynamical systems. Additionally, the frame-
work enables the investigation of fundamental system-theoretic properties, such as stability, 
reachability, and observability of the TPDS (2.1), once the parameter matrices are obtained. 
The content of this chapter is mainly based on the work of [ 1, 2, 32]. 
2.2
System Identification 
This section presents two system identiﬁcation approaches for TPDSs in the presence of 
noise, i.e., 
StartLayout Enlarged left brace 1st Row sans serif upper X Subscript t plus 1 Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper A Subscript 1 Baseline comma bold upper A Subscript 2 Baseline comma ellipsis comma bold upper A Subscript k Baseline EndSet plus script upper N Subscript tensor Baseline left parenthesis sans serif 0 comma bold upper Q Subscript 1 Baseline comma bold upper Q Subscript 2 Baseline comma ellipsis comma bold upper Q Subscript k Baseline right parenthesis 2nd Row sans serif upper Y Subscript t Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper C Subscript 1 Baseline comma bold upper C Subscript 2 Baseline comma ellipsis comma bold upper C Subscript k Baseline EndSet plus script upper N Subscript tensor Baseline left parenthesis sans serif 0 comma bold upper R Subscript 1 Baseline comma bold upper R Subscript 2 Baseline comma ellipsis comma bold upper R Subscript k Baseline right parenthesis EndLayout comma
{
Xt+1 = Xt × {A1, A2, . . . , Ak} + Ntensor(0, Q1, Q2, . . . , Qk)
Yt = Xt × {C1, C2, . . . , Ck} + Ntensor(0, R1, R2, . . . , Rk)
,
(2.3) 
where the normal distribution on tensors can be deﬁned as 
sans serif upper T tilde script upper N Subscript tensor Baseline left parenthesis sans serif 0 comma bold upper Q Subscript 1 Baseline comma bold upper Q Subscript 2 Baseline comma ellipsis comma bold upper Q Subscript k Baseline right parenthesis left right double arrow vec left parenthesis sans serif upper T right parenthesis tilde script upper N left parenthesis bold 0 comma bold upper Q right parenthesisT ∼Ntensor(0, Q1, Q2, . . . , Qk) ⇔vec(T) ∼N(0, Q)
with bold upper Q equals bold upper Q Subscript k Baseline circled times bold upper Q Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper Q Subscript 1 BaselineQ = Qk ⊗Qk−1 ⊗· · · ⊗Q1. Here, 0 and 0 represent the zero tensor and the zero 
matrix, respectively. The factor matrix bold upper Q Subscript pQp can be viewed as the pp-mode covariance. The 
goal is to estimate the system parameters bold upper A Subscript pAp, bold upper Q Subscript pQp, bold upper C Subscript pCp, and  bold upper R Subscript pRp using tensor time-series 
measurements. 
2.2.1
EM Algorithm 
The expectation maximization (EM) algorithm [ 33– 35] can be applied for estimating the 
parameters of the TPDS with noises (2.3) [  1]. The essence of the approach is to locally 
maximize the expected complete log-likelihood by computing the gradient with respect to 
a vector bold c element of double struck upper R Superscript sigma summation Underscript p equals 1 Overscript k Endscripts n Super Subscript p Superscript m Super Subscript p Superscriptc ∈R
∑k
p=1 n pm p deﬁned as 
bold c equals Start 1 By 4 Matrix 1st Row 1st Column vec left parenthesis bold upper C Subscript 1 Baseline right parenthesis Superscript down tack Baseline 2nd Column vec left parenthesis bold upper C Subscript 2 Baseline right parenthesis Superscript down tack Baseline 3rd Column midline horizontal ellipsis 4th Column vec left parenthesis bold upper C Subscript k Baseline right parenthesis Superscript down tack Baseline EndMatrix Superscript down tack Baseline periodc =
[
vec(C1)T vec(C2)T · · · vec(Ck)T]T .
The expected complete log-likelihood in terms of bold cc can be computed as 
l left parenthesis bold c right parenthesis equals Trace left parenthesis bold upper R Superscript negative 1 Baseline bold upper C left parenthesis bold upper Gamma bold upper C Superscript down tack Baseline minus 2 bold upper Omega Superscript down tack Baseline right parenthesis right parenthesis commal(c) = Trace
(
R−1C(]CT −2ΩT)
)
,
(2.4) 
where bold upper R equals bold upper R Subscript k Baseline circled times bold upper R Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper R Subscript 1 BaselineR = Rk ⊗Rk−1 ⊗· · · ⊗R1, bold upper C equals bold upper C Subscript k Baseline circled times bold upper C Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper C Subscript 1 BaselineC = Ck ⊗Ck−1 ⊗· · · ⊗C1, and

28
2
Tucker Product-Based Dynamical Systems
StartLayout 1st Row bold upper Gamma equals sigma summation Underscript t equals 1 Overscript upper T Endscripts double struck upper E left parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis Superscript down tack Baseline right parenthesis bold upper Omega equals sigma summation Underscript t equals 1 Overscript upper T Endscripts vec left parenthesis sans serif upper Y Subscript t Baseline right parenthesis double struck upper E left parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis Superscript down tack Baseline right parenthesis period EndLayout] =
T
∑
t=1
E
(
vec(Xt)vec(Xt)T)
Ω =
T
∑
t=1
vec(Yt)E
(
vec(Xt)T)
.
Here, the notation double struck upper EE denotes the expectation operation. The element-wise gradient nabla l left parenthesis bold c right parenthesis∇l(c)
then can be computed as 
nabla l left parenthesis bold c right parenthesis Subscript q Baseline equals 2 Trace left parenthesis bold upper R Superscript negative 1 Baseline partial differential Subscript p Baseline bold upper C left parenthesis bold upper Gamma bold upper C Superscript down tack Baseline minus bold upper Omega Superscript down tack Baseline right parenthesis right parenthesis comma∇l(c)q = 2Trace
(
R−1∂pC(]CT −ΩT)
)
,
wherepartial differential Subscript p Baseline bold upper C equals bold upper C Subscript k Baseline circled times bold upper C Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times Delta Subscript p Baseline circled times midline horizontal ellipsis circled times bold upper C Subscript 1 Baseline∂pC = Ck ⊗Ck−1 ⊗· · · ⊗Δp ⊗· · · ⊗C1. Here,Delta Subscript pΔp is an indicator matrix that cor-
responds to the qqth entry of c. 
The M-step for estimating bold upper A Subscript pAp can be achieved in a similar manner by considering a 
concatenated vector bold a element of double struck upper R Superscript sigma summation Underscript p equals 1 Overscript k Endscripts n Super Subscript p Super Superscript 2a ∈R
∑k
p=1 n2p deﬁned as 
bold a equals Start 1 By 4 Matrix 1st Row 1st Column vec left parenthesis bold upper A Subscript 1 Baseline right parenthesis Superscript down tack Baseline 2nd Column vec left parenthesis bold upper A Subscript 2 Baseline right parenthesis Superscript down tack Baseline 3rd Column midline horizontal ellipsis 4th Column vec left parenthesis bold upper A Subscript k Baseline right parenthesis Superscript down tack Baseline EndMatrix Superscript down tacka =
[
vec(A1)T vec(A2)T · · · vec(Ak)T]T
with the expected complete log-likelihood 
l left parenthesis bold a right parenthesis equals Trace left parenthesis bold upper Q Superscript negative 1 Baseline bold upper A left parenthesis bold upper Gamma bold upper A Superscript down tack Baseline minus 2 bold upper Omega Superscript down tack Baseline right parenthesis right parenthesis commal(a) = Trace
(
Q−1A(]AT −2ΩT)
)
,
(2.5) 
where bold upper Q equals bold upper Q Subscript k Baseline circled times bold upper Q Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper Q Subscript 1 BaselineQ = Qk ⊗Qk−1 ⊗· · · ⊗Q1, bold upper A equals bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 BaselineA = Ak ⊗Ak−1 ⊗· · · ⊗A1, and  
StartLayout 1st Row bold upper Gamma equals sigma summation Underscript t equals 1 Overscript upper T minus 1 Endscripts double struck upper E left parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis Superscript down tack Baseline right parenthesis bold upper Omega equals sigma summation Underscript t equals 1 Overscript upper T minus 1 Endscripts double struck upper E left parenthesis vec left parenthesis sans serif upper X Subscript t plus 1 Baseline right parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis Superscript down tack Baseline right parenthesis period EndLayout] =
T −1
∑
t=1
E
(
vec(Xt)vec(Xt)T)
Ω =
T −1
∑
t=1
E
(
vec(Xt+1)vec(Xt)T)
.
The EM algorithm has proven to be an effective method for estimating the parameters 
of TPDSs with noise [ 1]. By alternately updating the expectations of the latent variables 
and the parameters, this approach circumvents the difﬁculty of directly maximizing the 
likelihood of the data with respect to the parameters [ 1]. However, it is worth noting that 
this approach does not consider model reduction, which is a critical factor in dealing with 
high-dimensional TPDSs. 
2.2.2
Multilinear PCA/Regression 
To tackle the issue of model reduction in system identiﬁcation for TPDSs driven by noise, 
Surana et al. [ 2] utilized multilinear principal component analysis (PCA) and multilinear 
regression. Given tensor time-series measurementsStartSet sans serif upper Y Subscript 1 Baseline comma sans serif upper Y Subscript 2 Baseline comma ellipsis comma sans serif upper Y Subscript upper T Baseline EndSet{Y1,Y2, . . . ,YT }, the goal of multilinear 
PCA is to ﬁnd transformation matrices bold upper U Subscript p Baseline element of double struck upper R Superscript m Super Subscript p Superscript times n Super Subscript pUp ∈Rm p×n p with n Subscript p Baseline less than m Subscript pn p < m p such that 
sans serif upper X Subscript t Baseline equals sans serif upper Y Subscript t Baseline times StartSet bold upper U Subscript 1 Superscript down tack Baseline comma bold upper U Subscript 2 Superscript down tack Baseline comma ellipsis comma bold upper U Subscript k Superscript down tack Baseline EndSet commaXt = Yt × {UT
1 , UT
2 , . . . , UT
k },
(2.6)

2.3
System-Theoretic Properties
29
and the scatter of the low-dimensional latent variablessigma summation Underscript t equals 1 Overscript upper T Endscripts parallel to sans serif upper X Subscript t Baseline minus sans serif upper X overbar parallel to squared∑T
t=1 ||Xt −¯X||2 is minimized (where 
sans serif upper X overbar¯X denotes the mean of sans serif upper X Subscript tXt). Multilinear PCA can be solved by iterative approaches, see 
detailed algorithms in [ 2]. 
Given a set of input and output tensors left brace left parenthesis sans serif upper X Subscript t Baseline comma sans serif upper Y Subscript t Baseline right parenthesis right brace Subscript t equals 1 Superscript upper T{(Xt,Yt)}T
t=1 with sans serif upper X Subscript t Baseline element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript kXt ∈Rn1×n2×···×nk and sans serif upper Y Subscript t Baseline element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript kYt ∈
Rm1×m2×···×mk, the objective of multilinear regression is to ﬁt the Tucker product-based 
model, i.e., 
sans serif upper Y Subscript t Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper M Subscript 1 Baseline comma bold upper M Subscript 2 Baseline comma ellipsis comma bold upper M Subscript k Baseline EndSet plus script upper N Subscript tensor Baseline left parenthesis sans serif 0 comma bold upper R Subscript 1 Baseline comma bold upper R Subscript 2 Baseline comma ellipsis comma bold upper R Subscript k Baseline right parenthesisYt = Xt × {M1, M2, . . . , Mk} + Ntensor(0, R1, R2, . . . , Rk)
(2.7) 
forbold upper M Subscript p Baseline element of double struck upper R Superscript m Super Subscript p Superscript times n Super Subscript pMp ∈Rm p×n p andbold upper R Subscript p Baseline element of double struck upper R Superscript m Super Subscript p Superscript times m Super Subscript pRp ∈Rm p×m p. Multilinear regression can also be solved by iterative 
approaches, see detailed algorithms in [ 2]. In particular, the noise covariance matrices bold upper R Subscript pRp
can be solved from the technique of maximum likelihood estimation after ﬁnding bold upper M Subscript pMp. 
The system identiﬁcation of the TPDS (2.3) with model reduction can be achieved through 
the following steps: 
• First, compute multilinear PCA of left brace sans serif upper Y Subscript t Baseline right brace Subscript t equals 1 Superscript upper T{Yt}T
t=1 to obtain the latent variables left brace sans serif upper X Subscript t Baseline right brace Subscript t equals 1 Superscript upper T{Xt}T
t=1 with the 
factor matrices StartSet bold upper C Subscript 1 Baseline comma bold upper C Subscript 2 Baseline comma ellipsis comma bold upper C Subscript k Baseline EndSet{C1, C2, . . . , Ck}; 
• Subsequently, use the maximum likelihood estimation to obtain the noise covariance 
matrices StartSet bold upper R Subscript 1 Baseline comma bold upper R Subscript 2 Baseline comma ellipsis comma bold upper R Subscript k Baseline EndSet{R1, R2, . . . , Rk} based on the residuals of sans serif upper Y Subscript tYt; 
• Finally, apply multilinear regression to left brace left parenthesis sans serif upper X Subscript t Baseline comma sans serif upper X Subscript t plus 1 Baseline right parenthesis right brace Subscript t equals 1 Superscript upper T minus 1{(Xt, Xt+1)}T −1
t=1 to obtain the factor matrices 
StartSet bold upper A Subscript 1 Baseline comma bold upper A Subscript 2 Baseline comma ellipsis comma bold upper A Subscript k Baseline EndSet{A1, A2, . . . , Ak} and the noise covariance matrices StartSet bold upper Q Subscript 1 Baseline comma bold upper Q Subscript 2 Baseline comma ellipsis comma bold upper Q Subscript k Baseline EndSet{Q1, Q2, . . . , Qk}. 
Multilinear PCA and multilinear regression offer an effective approach to identify the 
parameters of TPDSs driven by noise while preserving low-dimensional latent variables [ 2]. 
After obtaining the system parameter matrices, i.e.,bold upper A Subscript pAp andbold upper C Subscript pCp, it is signiﬁcant to study the 
system-theoretic properties of TPDSs. 
2.3
System-Theoretic Properties 
This section explores the notions of stability, reachability, and observability for TPDSs. 
While these notions can be determined using tensor vectorization, the Tucker product rep-
resentation provides a more efﬁcient approach to compute them. 
2.3.1
Stability 
The stability of the TPDS (2.1, top) can be deﬁned analogously to that of LDSs. Analyzing 
the stability properties of the equilibrium pointsans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 of the TPDS is of particular interest. 
Deﬁnition 2.1 ([ 32]) The equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 of the TPDS (2.1, top) is called:

30
2
Tucker Product-Based Dynamical Systems
• stable if parallel to sans serif upper X Subscript t Baseline parallel to less than or equals gamma parallel to sans serif upper X Subscript 0 Baseline parallel to||Xt|| ≤γ ||X0|| for some gamma greater than 0γ > 0; 
• asymptotically stable if limit Underscript t right arrow normal infinity Endscripts parallel to sans serif upper X Subscript t Baseline parallel to equals 0limt→∞||Xt|| = 0; 
• unstable if it is not stable. 
The stability of the TPDS (2.1, top) can be efﬁciently determined by examining the 
eigenvalues of the factor matrices bold upper A Subscript pAp. 
Proposition 2.1 ([ 32]) Given the TPDS (2.1, top), the equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 is: 
• stable if and only if StartAbsoluteValue lamda Subscript j 1 Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript j 2 Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline EndAbsoluteValue less than or equals 1|λ(1)
j1 λ(2)
j2 · · · λ(k)
jk | ≤1 for all j Subscript p Baseline equals 1 comma 2 comma ellipsis comma n Subscript p Baseline jp = 1, 2, . . . , n p (and if StartAbsoluteValue lamda Subscript j 1 Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript j 2 Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline EndAbsoluteValue equals 1|λ(1)
j1 λ(2)
j2 · · ·
λ(k)
jk | = 1, all the eigenvalues must have equal algebraic and geometric multiplicity); 
• asymptotically stable if and only if StartAbsoluteValue lamda Subscript j 1 Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript j 2 Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline EndAbsoluteValue less than 1|λ(1)
j1 λ(2)
j2 · · · λ(k)
jk | < 1 for all j Subscript p Baseline equals 1 comma 2 comma ellipsis comma n Subscript p Baseline jp = 1, 2, . . . , n p; 
• unstable if and only if StartAbsoluteValue lamda Subscript j 1 Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript j 2 Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript j Sub Subscript k Subscript Superscript left parenthesis k right parenthesis Baseline EndAbsoluteValue greater than 1|λ(1)
j1 λ(2)
j2 · · · λ(k)
jk | > 1 for some j Subscript p Baseline equals 1 comma 2 comma ellipsis comma n Subscript p Baseline jp = 1, 2, . . . , n p, 
where lamda Subscript j Sub Subscript p Superscript left parenthesis p right parenthesisλ(p)
jp are the eigenvalues of bold upper A Subscript pAp for j Subscript p Baseline equals 1 comma 2 comma ellipsis comma n Subscript p Baseline jp = 1, 2, . . . , n p and p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k. 
Proof As mentioned, the dynamic matrix of the vectorized representation of the TPDS 
is bold upper A equals bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 BaselineA = Ak ⊗Ak−1 ⊗· · · ⊗A1. Based on the fact that the eigenvalues of bold upper AA are equal to 
the products of the eigenvalues of its factor matrices (note that the eigenvalue of bold upper AA has 
equal algebraic and geometric multiplicity if its corresponding eigenvalues from the factor 
matrices have equal algebraic and geometric multiplicity), the stability of TPDSs can be 
efﬁciently determined using linear stability analysis.
⬜
The results can be further simpliﬁed by considering the spectral radii, which are the 
maximum absolute eigenvalues, of the factor matrices bold upper A Subscript pAp. 
Corollary 2.1 ([ 32]) Given the TPDS (2.1, top), the equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 is: 
• stable if and only iflamda Subscript s r Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript s r Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript s r Superscript left parenthesis k right parenthesis Baseline less than or equals 1λ(1)
sr λ(2)
sr · · · λ(k)
sr ≤1 (and iflamda Subscript s r Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript s r Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript s r Superscript left parenthesis k right parenthesis Baseline equals 1λ(1)
sr λ(2)
sr · · · λ(k)
sr = 1, all the eigenvalues 
must have equal algebraic and geometric multiplicity); 
• asymptotically stable if and only if lamda Subscript s r Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript s r Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript s r Superscript left parenthesis k right parenthesis Baseline less than 1λ(1)
sr λ(2)
sr · · · λ(k)
sr < 1; 
• unstable if and only if lamda Subscript s r Superscript left parenthesis 1 right parenthesis Baseline lamda Subscript s r Superscript left parenthesis 2 right parenthesis Baseline midline horizontal ellipsis lamda Subscript s r Superscript left parenthesis k right parenthesis Baseline greater than 1λ(1)
sr λ(2)
sr · · · λ(k)
sr > 1, 
where lamda Subscript s r Superscript left parenthesis p right parenthesisλ(p)
sr are the spectral radii of bold upper A Subscript pAp for p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k. 
Proof The results can be directly derived from Proposition 2.1.
⬜
Remark 2.1 The computation of eigenvalues of the factor matrices has a complexity of 
approximatelyscript upper O left parenthesis sigma summation Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 3 Baseline right parenthesisO(∑k
p=1 n3
p), while computing the eigenvalues of the dynamic matrix from

2.3
System-Theoretic Properties
31
the vectorized representation requires a complexity of approximately script upper O left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 3 Baseline right parenthesisO(∏k
p=1 n3
p) opera-
tions. 
2.3.2
Reachability 
The discrete-time TPDS (2.1) can be extended by incorporating control inputs, i.e., 
StartLayout Enlarged left brace 1st Row sans serif upper X Subscript t plus 1 Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper A Subscript 1 Baseline comma bold upper A Subscript 2 Baseline comma ellipsis comma bold upper A Subscript k Baseline EndSet plus sans serif upper U Subscript t Baseline times StartSet bold upper B Subscript 1 Baseline comma bold upper B Subscript 2 Baseline comma ellipsis comma bold upper B Subscript k Baseline EndSet 2nd Row sans serif upper Y Subscript t Baseline equals sans serif upper X Subscript t Baseline times StartSet bold upper C Subscript 1 Baseline comma bold upper C Subscript 2 Baseline comma ellipsis comma bold upper C Subscript k Baseline EndSet EndLayout comma
{
Xt+1 = Xt × {A1, A2, . . . , Ak} + Ut × {B1, B2, . . . , Bk}
Yt = Xt × {C1, C2, . . . , Ck}
,
(2.8) 
where sans serif upper U Subscript t Baseline element of double struck upper R Superscript s 1 times s 2 times midline horizontal ellipsis times s Super Subscript kUt ∈Rs1×s2×···×sk are the control inputs, and bold upper B Subscript p Baseline element of double struck upper R Superscript n Super Subscript p Superscript times s Super Subscript pBp ∈Rn p×sp are real-value control 
matrices. Similar to LDSs, the reachability of the TPDS (2.8) can be deﬁned as follows. 
Deﬁnition 2.2 ([ 32]) The TPDS (2.8, top) is said to be reachable on the interval left bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if 
for any two states sans serif upper X Subscript t 0 Baseline equals sans serif upper X Subscript 0Xt0 = X0 and sans serif upper X Subscript t Sub Subscript f Baseline equals sans serif upper X Subscript fXt f = X f there exists a sequence of control inputs sans serif upper U Subscript tUt that 
drive the system from sans serif upper X Subscript 0X0 to sans serif upper X Subscript fX f . 
Proposition 2.2 The TPDS (2.8, top) is reachable over the interval left bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if and only if 
the reachability Gramian deﬁned as 
bold upper G Subscript upper R Baseline equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts bold upper G Subscript k Baseline circled times bold upper G Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper G Subscript 1 Baseline commaGR =
t f −1
∑
t=t0
Gk ⊗Gk−1 ⊗· · · ⊗G1,
(2.9) 
where bold upper G Subscript p Baseline equals bold upper A Subscript p Superscript t Super Subscript f Superscript minus t minus 1 Baseline bold upper B Subscript p Baseline bold upper B Subscript p Superscript down tack Baseline left parenthesis bold upper A Subscript p Superscript down tack Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1Gp = A
t f −t−1
p
BpBT
p (AT
p )t f −t−1 for p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k, is positive deﬁnite. 
Proof The dynamic matrix and control matrix of the vectorized representation of the TPDS 
arebold upper A equals bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 BaselineA = Ak ⊗Ak−1 ⊗· · · ⊗A1 andbold upper B equals bold upper B Subscript k Baseline circled times bold upper B Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper B Subscript 1 BaselineB = Bk ⊗Bk−1 ⊗· · · ⊗B1, respectively. By using the 
properties of the Kronecker product, the reachability Gramian of the TPDS can be expressed 
as 
StartLayout 1st Row 1st Column bold upper G Subscript upper R 2nd Column equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts bold upper A Superscript t Super Subscript f Superscript minus t minus 1 Baseline bold upper B bold upper B Superscript down tack Baseline left parenthesis bold upper A Superscript down tack Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts left parenthesis bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1 Baseline left parenthesis bold upper B Subscript k Baseline circled times bold upper B Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper B Subscript 1 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column left parenthesis bold upper B Subscript k Baseline circled times bold upper B Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper B Subscript 1 Baseline right parenthesis Superscript down tack Baseline left parenthesis left parenthesis bold upper A Subscript k Baseline circled times bold upper A Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper A Subscript 1 Baseline right parenthesis Superscript down tack Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1 4th Row 1st Column Blank 2nd Column equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts bold upper G Subscript k Baseline circled times bold upper G Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper G Subscript 1 EndLayoutGR =
t f −1
∑
t=t0
At f −t−1BBT(AT)t f −t−1
=
t f −1
∑
t=t0
(Ak ⊗Ak−1 ⊗· · · ⊗A1)t f −t−1(Bk ⊗Bk−1 ⊗· · · ⊗B1)
(Bk ⊗Bk−1 ⊗· · · ⊗B1)T(
(Ak ⊗Ak−1 ⊗· · · ⊗A1)T)t f −t−1
=
t f −1
∑
t=t0
Gk ⊗Gk−1 ⊗· · · ⊗G1

32
2
Tucker Product-Based Dynamical Systems
for bold upper G Subscript p Baseline equals bold upper A Subscript p Superscript t Super Subscript f Superscript minus t minus 1 Baseline bold upper B Subscript p Baseline bold upper B Subscript p Superscript down tack Baseline left parenthesis bold upper A Subscript p Superscript down tack Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1Gp = A
t f −t−1
p
BpBT
p (AT
p )t f −t−1. Therefore, the results follow immediately.
⬜
Similar to LDSs, a Kalman’s rank condition can also be derived for TPDSs. 
Proposition 2.3 The TPDS (2.8, top) is reachable if and only if the reachability matrix 
deﬁned as 
bold upper R equals Start 1 By 4 Matrix 1st Row 1st Column bold upper R Subscript 0 Baseline 2nd Column bold upper R Subscript 1 Baseline 3rd Column midline horizontal ellipsis 4th Column bold upper R Subscript product Underscript p equals 1 Overscript k Endscripts n Sub Subscript p Subscript minus 1 Baseline EndMatrix commaR =
[
R0 R1 · · · R∏k
p=1 n p−1
]
,
(2.10) 
where bold upper R Subscript j Baseline equals left parenthesis bold upper A Subscript k Superscript j Baseline bold upper B Subscript k Baseline right parenthesis circled times left parenthesis bold upper A Subscript k minus 1 Superscript j Baseline bold upper B Subscript k minus 1 Baseline right parenthesis circled times midline horizontal ellipsis circled times left parenthesis bold upper A Subscript 1 Superscript j Baseline bold upper B Subscript 1 Baseline right parenthesis commaR j = (A j
kBk) ⊗(A j
k−1Bk−1) ⊗· · · ⊗(A j
1B1), has full rank. 
Proof The proof is similar to Proposition 2.2.
⬜
Remark 2.2 The time complexity of computing the reachability matrix (2.10) is approxi-
mately given by 
script upper O left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 2 Baseline s Subscript p Baseline plus sigma summation Underscript j equals 1 Overscript product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline minus 1 Endscripts sigma summation Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript j Baseline s Subscript p Baseline right parenthesis commaO
(
k∏
p=1
n2
psp +
∏k
p=1 n p−1
∑
j=1
k
∑
p=1
n j
psp
)
,
which is much lower than the time complexity of computing the reachability matrix from 
the vectorized representation, i.e., 
script upper O left parenthesis sigma summation Underscript j equals 1 Overscript product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline minus 1 Endscripts product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript j Baseline s Subscript p Baseline right parenthesis periodO
(
∏k
p=1 n p−1
∑
j=1
k∏
p=1
n j
psp
)
.
2.3.3
Observability 
The deﬁnitions of observability, observability Gramians, and observability matrices can be 
deﬁned similarly using the duality principle. 
Deﬁnition 2.3 ([ 32]) The TPDS (2.8) is said to be observable on an interval left bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if any 
initial state sans serif upper X Subscript t 0 Baseline equals sans serif upper X Subscript 0Xt0 = X0 can be uniquely determined from the outputs sans serif upper Y Subscript tYt. 
Proposition 2.4 The TPDS (2.8) is observable over the interval left bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if and only if the 
observability Gramian deﬁned as 
bold upper G Subscript upper O Baseline equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts bold upper G Subscript k Baseline circled times bold upper G Subscript k minus 1 Baseline circled times midline horizontal ellipsis circled times bold upper G Subscript 1 Baseline commaGO =
t f −1
∑
t=t0
Gk ⊗Gk−1 ⊗· · · ⊗G1,
(2.11) 
where bold upper G Subscript p Baseline equals left parenthesis bold upper A Subscript p Superscript down tack Baseline right parenthesis Superscript t minus t 0 Baseline bold upper C Subscript p Superscript down tack Baseline bold upper C Subscript p Baseline bold upper A Subscript p Superscript t minus t 0Gp = (AT
p )t−t0CT
p CpAt−t0
p
for p equals 1 comma 2 comma ellipsis comma kp = 1, 2, . . . , k, is positive deﬁnite.

2.4
Applications
33
Proposition 2.5 The TPDS (2.8) is observable if and only if the observability matrix deﬁned 
as 
bold upper O equals Start 1 By 4 Matrix 1st Row 1st Column bold upper O Subscript 0 Baseline 2nd Column bold upper O Subscript 1 Baseline 3rd Column midline horizontal ellipsis 4th Column bold upper O Subscript product Underscript p equals 1 Overscript k Endscripts n Sub Subscript p Subscript minus 1 Baseline EndMatrix Superscript down tack Baseline commaO =
[
O0 O1 · · · O∏k
p=1 n p−1
]T
,
(2.12) 
where bold upper O Subscript j Baseline equals left parenthesis bold upper C Subscript k Baseline bold upper A Subscript k Superscript j Baseline right parenthesis circled times left parenthesis bold upper C Subscript k minus 1 Baseline bold upper A Subscript k minus 1 Superscript j Baseline right parenthesis circled times midline horizontal ellipsis circled times left parenthesis bold upper C Subscript 1 Baseline bold upper A Subscript 1 Superscript j Baseline right parenthesis commaO j = (CkA j
k) ⊗(Ck−1A j
k−1) ⊗· · · ⊗(C1A j
1), has full rank. 
2.4
Applications 
2.4.1
Video Dataset 
This example, adapted from [ 2], aims to demonstrate system identiﬁcation of TPDSs driven 
by noise using multilinear PCA/regression. Three dynamic texture videos, trafﬁc, waterfall, 
and ﬂame, with a total of 52, 150, and 200 time points, respectively, are provided, as shown 
in Fig. 2.1A, B, and C. The time-series measurements of the videos are third-order tensors, 
since there are three channels. 80% of the time-series measurements are used for model 
ﬁtting, while the rest serve for prediction purposes. Simultaneously, the three videos are 
also ﬁtted by the LDS model with PCA, with 80% training and 20% testing. The results of 
the relative error deﬁned as 
Fig. 2.1 A, B, and  C represent snapshots of the three dynamic texture videos—trafﬁc, waterfall, and 
frame, respectively. D, E, and  F show the relative error comparisons between TPDS and LDS for the 
three videos. This ﬁgure was redrawn from [ 2] with permission

34
2
Tucker Product-Based Dynamical Systems
Relative Error equals StartFraction parallel to sans serif upper Y Subscript t Baseline minus ModifyingAbove sans serif upper Y With caret Subscript t Baseline parallel to Over parallel to sans serif upper Y Subscript t Baseline parallel to EndFraction commaRelative Error = ||Yt −ˆYt||
||Yt||
,
where sans serif upper Y Subscript tYt and ModifyingAbove sans serif upper Y With caret Subscript tˆYt are the true and predicted measurements at time tt, for the two models are 
shown in Fig.  2.1D, E, and F. It is clear that using TPDSs to ﬁt the measurements achieves 
lower relative errors compared to using the vectorized LDS with low memory consumption. 
2.4.2
Synthetic Data: Stability 
This example considers a TPDS deﬁned by (2.1, top), with factor matrices given as 
bold upper A Subscript 1 Baseline equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0.8 3rd Column 0 2nd Row 1st Column 0.2 2nd Column 0 3rd Column 0 3rd Row 1st Column 0.5 2nd Column 0 3rd Column 1 EndMatrix comma bold upper A Subscript 2 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 0.8 2nd Row 1st Column 0 2nd Column 0.5 EndMatrix comma bold upper A Subscript 3 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0.9 2nd Column 1 2nd Row 1st Column 0 2nd Column 0.5 EndMatrix periodA1 =
⎡
⎣
0
0.8
0
0.2
0
0
0.5
0
1
⎤
⎦,
A2 =
[1
0.8
0
0.5
]
,
A3 =
[0.9
1
0
0.5
]
.
The spectral radii of the three factor matrices are 1, 1, and 0.9, respectively. Based on 
Corollary 2.1, it can be implied that the TPDS is asymptotically stable. Refer to Fig. 2.2 for 
numerical simulations. 
Fig. 2.2 Trajectories of the TPDS with ﬁve random initial conditions

References
35
2.4.3
Synthetic Data: Reachability and Observability 
This example, adapted from [ 32], examines a TPDS of the form (2.8) with factor matrices 
StartLayout 1st Row 1st Column bold upper A Subscript 1 2nd Column equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 1 3rd Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 1 3rd Row 1st Column 0.2 2nd Column 0.5 3rd Column 0.8 EndMatrix comma bold upper A Subscript 2 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 1 2nd Row 1st Column 0.5 2nd Column 0 comma EndMatrix comma 2nd Row 1st Column bold upper B Subscript 1 2nd Column equals Start 3 By 1 Matrix 1st Row 0 2nd Row 0 3rd Row 1 EndMatrix comma bold upper B Subscript 2 Baseline equals StartBinomialOrMatrix 0 Choose 1 EndBinomialOrMatrix comma 3rd Row 1st Column bold upper C Subscript 1 2nd Column equals Start 1 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 EndMatrix comma bold upper C Subscript 2 Baseline equals Start 1 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 EndMatrix period EndLayoutA1 =
⎡
⎣
0
1
0
0
0
1
0.2
0.5
0.8
⎤
⎦,
A2 =
[ 0
1
0.5
0,
]
,
B1 =
⎡
⎣
0
0
1
⎤
⎦,
B2 =
[0
1
]
,
C1 =
[
1
0
0
]
,
C2 =
[
1
0
]
.
The state variable sans serif upper X Subscript t Baseline element of double struck upper R Superscript 3 times 2Xt ∈R3×2 are second-order tensors, i.e., matrices. According to 
Propositions 2.3 and 2.5, the reachability and observability matrices can be computed as 
bold upper R equals Start 6 By 6 Matrix 1st Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 0.4 5th Column 0 6th Column 0.378 2nd Row 1st Column 0 2nd Column 1 3rd Column 0 4th Column 0.57 5th Column 0 6th Column 0.4849 3rd Row 1st Column 0 2nd Column 0.8 3rd Column 0 4th Column 0.756 5th Column 0 6th Column 0.6339 4th Row 1st Column 0 2nd Column 0 3rd Column 0.5 4th Column 0 5th Column 0.285 6th Column 0 5th Row 1st Column 0 2nd Column 0 3rd Column 0.4 4th Column 0 5th Column 0.378 6th Column 0 6th Row 1st Column 1 2nd Column 0 3rd Column 0.57 4th Column 0 5th Column 0.4849 6th Column 0 EndMatrixR =
⎡
⎢⎢⎢⎢⎢⎢⎢⎣
0
0
0
0.4
0
0.378
0
1
0
0.57
0
0.4849
0
0.8
0
0.756
0
0.6339
0
0
0.5
0
0.285
0
0
0
0.4
0
0.378
0
1
0
0.57
0
0.4849
0
⎤
⎥⎥⎥⎥⎥⎥⎥⎦
and 
bold upper O equals Start 6 By 6 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 4th Column 0 5th Column 0 6th Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 0 5th Column 1 6th Column 0 3rd Row 1st Column 0 2nd Column 0 3rd Column 0.5 4th Column 0 5th Column 0 6th Column 0 4th Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 0.1 5th Column 0.25 6th Column 0.4 5th Row 1st Column 0.04 2nd Column 0.15 3rd Column 0.285 4th Column 0 5th Column 0 6th Column 0 6th Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 0.057 5th Column 0.1825 6th Column 0.378 EndMatrix commaO =
⎡
⎢⎢⎢⎢⎢⎢⎢⎣
1
0
0
0
0
0
0
0
0
0
1
0
0
0
0.5
0
0
0
0
0
0
0.1
0.25
0.4
0.04
0.15
0.285
0
0
0
0
0
0
0.057
0.1825
0.378
⎤
⎥⎥⎥⎥⎥⎥⎥⎦
,
respectively. The two matrices have full rank, so the TPDS is both reachable and observable. 
References 
1. Rogers, Mark, Lei Li, and Stuart J Russell. 2013. Multilinear dynamical systems for tensor time 
series. Advances in Neural Information Processing Systems 26. 
2. Surana, Amit, Geoff Patterson, and Indika Rajapakse. 2016. Dynamic tensor time series modeling 
and analysis. In 2016 IEEE 55th conference on decision and control (CDC), 1637–1642. IEEE. 
3. Liang, Paul Pu, Zhun Liu, Yao-Hung Hubert Tsai, Qibin Zhao, Ruslan Salakhutdinov, and Louis-
Philippe Morency. 2019. Learning representations from imperfect time series data via tensor rank 
regularization. arXiv:1907.01011. 
4. Foster, Grant. 1996. Time series analysis by projection. ii. tensor methods for time series analysis. 
The Astronomical Journal 111: 555.

36
2
Tucker Product-Based Dynamical Systems
5. Jing, Baoyu, Hanghang Tong, and Yada Zhu. 2021. Network of tensor time series. In Proceedings 
of the Web Conference 2021: 2425–2437. 
6. Chen, Rong, Dan Yang, and Cun-Hui. Zhang. 2022. Factor models for high-dimensional tensor 
time series. Journal of the American Statistical Association 117 (537): 94–116. 
7. Chen, Xinyu, and Lijun Sun. 2021. Bayesian temporal factorization for multidimensional time 
series prediction. IEEE Transactions on Pattern Analysis and Machine Intelligence. 
8. Chen, Weilin, and Clifford Lam. 2022. Rank and factor loadings estimation in time series tensor 
factor model by pre-averaging. arXiv:2208.04012. 
9. Han, Yuefeng, Rong Chen, and Cun-Hui. Zhang. 2022. Rank determination in tensor factor 
model. Electronic Journal of Statistics 16 (1): 1726–1803. 
10. Beck, Nathaniel, and Jonathan N Katz. 2011. Modeling dynamics in time-series–cross-section 
political economy data. Annual Review of Political Science 14: 331–352. 
11. Bahadori, Mohammad Taha, Qi Rose Yu, and Yan Liu. 2014. Fast multivariate spatio-temporal 
analysis via low rank tensor learning. In Advances in Neural information processing systems, 27. 
12. Jing, Peiguang, Su. Yuting, Xiao Jin, and Chengqian Zhang. 2018. High-order temporal cor-
relation model learning for time-series prediction. IEEE Transactions on Cybernetics 49 (6): 
2385–2397. 
13. Yu, Hsiang-Fu, Nikhil Rao, and Inderjit S Dhillon. 2016. Temporal regularized matrix factoriza-
tion for high-dimensional time series prediction. In Advances in neural information processing 
systems, 29. 
14. Frelat, Romain, Martin Lindegren, Tim Spaanheden Denker, Jens Floeter, Heino O Fock, Camilla 
Sguotti, Moritz Stäbler, Saskia A Otto, and Christian Möllmann. 2017. Community ecology in 
3d: Tensor decomposition reveals spatio-temporal dynamics of large ecological communities. 
PloS One 12 (11): e0188205. 
15. Korevaar, Hannah, C. Jessica Metcalf, and Bryan T. Grenfell. 2020. Tensor decomposition for 
infectious disease incidence data. Methods in Ecology and Evolution 11 (12): 1690–1700. 
16. Zhang, Xueqi, Meng Zhao, and Rencai Dong. 2020. Time-series prediction of environmental 
noise for urban iot based on long short-term memory recurrent neural network. Applied Sciences 
10 (3): 1144. 
17. Yahyanejad, Farzane, Réka. Albert, and Bhaskar DasGupta. 2019. A survey of some tensor 
analysis techniques for biological systems. Quantitative Biology 7 (4): 266–277. 
18. Skantze, Viktor, Mikael Wallman, Ann-Soﬁe. Sandberg, Rikard Landberg, Mats Jirstrand, and 
Carl Brunius. 2023. Identiﬁcation of metabotypes in complex biological data using tensor decom-
position. Chemometrics and Intelligent Laboratory Systems 233: 104733. 
19. Dekker, Job, Andrew S Belmont, Mitchell Guttman, Victor O Leshyk, John T Lis, Stavros 
Lomvardas, Leonid A Mirny, Clodagh C O’shea, Peter J Park, Bing Ren, et al. 2017. The 4d 
nucleome project. Nature 549 (7671): 219–226. 
20. Chen, Can, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2019. Multilinear time invariant 
system theory. In 2019 proceedings of the conference on control and its applications, 118–125. 
SIAM. 
21. Chen, Haiming, Jie Chen, Lindsey A Muir, Scott Ronquist, Walter Meixner, Mats Ljungman, 
Thomas Ried, Stephen Smale, and Indika Rajapakse. 2015. Functional organization of the human 
4d nucleome. Proceedings of the National Academy of Sciences 112 (26): 8002–8007. 
22. Juang, Jer-Nan, and Richard S Pappa. 1985. An eigensystem realization algorithm for modal 
parameter identiﬁcation and model reduction. Journal of Guidance, Control, and Dynamics 8 
(5): 620–627. 
23. Pappa, Richard S, Kenny B Elliott, and Axel Schenk. 1993. Consistent-mode indicator for the 
eigensystem realization algorithm. Journal of Guidance, Control, and Dynamics 16 (5): 852–858. 
24. Rowley, Clarence W. 2005. Model reduction for ﬂuids, using balanced proper orthogonal decom-
position. International Journal of Bifurcation and Chaos 15 (03): 997–1013.

References
37
25. Ilak, Miloš, and Clarence W Rowley. 2008. Modeling of transitional channel ﬂow using balanced 
proper orthogonal decomposition. Physics of Fluids 20 (3): 034103. 
26. Brunton, Steven L, Joshua L Proctor, and J Nathan Kutz. 2016. Discovering governing equations 
from data by sparse identiﬁcation of nonlinear dynamical systems. Proceedings of the National 
Academy of Sciences 113 (15): 3932–3937. 
27. Kaiser, Eurika, J Nathan Kutz, and Steven L Brunton. 2018. Sparse identiﬁcation of nonlinear 
dynamics for model predictive control in the low-data limit. Proceedings of the Royal Society A 
474 (2219): 20180335. 
28. Voss, Henning U, Jens Timmer, and Jürgen Kurths. 2004. Nonlinear dynamical system iden-
tiﬁcation from uncertain and indirect measurements. International Journal of Bifurcation and 
Chaos 14 (06): 1905–1933. 
29. Kuschewski, John G, Stefen Hui, and Stanislaw H Zak. 1993. Application of feedforward neural 
networks to dynamical system identiﬁcation and control. IEEE Transactions on Control Systems 
Technology 1 (1): 37–49. 
30. Green, Peter L. 2015. Bayesian system identiﬁcation of a nonlinear dynamical system using a 
novel variant of simulated annealing. Mechanical Systems and Signal Processing 52: 133–146. 
31. Li, Shou-Ju., and Ying-Xi. Liu. 2006. An improved approach to nonlinear dynamical system iden-
tiﬁcation using pid neural networks. International Journal of Nonlinear Sciences and Numerical 
Simulation 7 (2): 177–182. 
32. Chen, Can, Amit Surana, Anthony M Bloch, and Indika Rajapakse. 2021. Multilinear control 
systems theory. SIAM Journal on Control and Optimization 59 (1): 749–776. 
33. Moon, Todd K. 1996. The expectation-maximization algorithm. IEEE Signal Processing Mag-
azine 13 (6): 47–60. 
34. Dellaert, Frank. 2002. The expectation maximization algorithm. Georgia Institute of Technology: 
Technical report. 
35. Do, Chuong B., and Seraﬁm Batzoglou. 2008. What is the expectation maximization algorithm? 
Nature Biotechnology 26 (8): 897–899.

3
Einstein Product-Based Dynamical Systems 
Abstract 
The Einstein product-based dynamical system (EPDS) representation was initially pro-
posed by Chen et al. [Proc. Conf. Control Appl.] in 2019, which utilizes an even-order 
tensor equipped with the Einstein product to drive the system evolution. This represen-
tation is an extension of the TPDS representation and has a form similar to the standard 
LDS model. EPDSs are well-suited for exploring system-theoretic properties, including 
stability, reachability, and observability, as well as for developing methods for model 
reduction and system identiﬁcation. More importantly, tensor decomposition techniques, 
such as HOSVD, CPD, and TTD, can be exploited on the even-order dynamic tensors in 
order to facilitate computation and memory efﬁciency for EPDSs. 
3.1
Overview 
The Tucker product-based dynamical system (TPDS) representation (2.1) or (2.8) has proven 
to be an effective tool for modeling and analyzing tensor time-series data, offering a novel 
framework to capture the complex dynamics of multidimensional systems [ 1, 2]. However, 
it is limited by its assumption that the multilinear operators are constructed solely using 
the Tucker product of matrices [ 3]. This limitation restricts the expressiveness of the TPDS 
representation and may not adequately represent intricate relationships between variables 
within the data. To overcome this limitation and capture more general relationships between 
variables, a new representation is introduced using even-order tensors and the Einstein 
product [ 4]. The extension, referred to as the Einstein product-based dynamical system 
(EPDS) representation, bears similarities to the LDS model [ 3, 4]. 
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_3 
39

40
3
Einstein Product-Based Dynamical Systems
The discrete-time EPDS with control inputs and outputs is deﬁned as 
StartLayout Enlarged left brace 1st Row sans serif upper X Subscript t plus 1 Baseline equals sans serif upper A asterisk sans serif upper X Subscript t Baseline plus sans serif upper B asterisk sans serif upper U Subscript t Baseline 2nd Row sans serif upper Y Subscript t Baseline equals sans serif upper C asterisk sans serif upper X Subscript t Baseline EndLayout comma
{
Xt+1 = A ∗Xt + B ∗Ut
Yt = C ∗Xt
,
(3.1) 
where sans serif upper X Subscript t Baseline element of double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript kXt ∈Rn1×n2×···×nk is the state variable, sans serif upper Y Subscript t Baseline element of double struck upper R Superscript m 1 times m 2 times midline horizontal ellipsis times m Super Subscript kYt ∈Rm1×m2×···×mk is the output variable, 
sans serif upper U Subscript t Baseline element of double struck upper R Superscript s 1 times s 2 times midline horizontal ellipsis times s Super Subscript kUt ∈Rs1×s2×···×sk is the control input, andsans serif upper A element of double struck upper R Superscript n 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k SuperscriptA ∈Rn1×n1×···×nk×nk,sans serif upper B element of double struck upper R Superscript n 1 times s 1 times midline horizontal ellipsis times n Super Subscript k Superscript times s Super Subscript k SuperscriptB ∈Rn1×s1×···×nk×sk, and  
sans serif upper C element of double struck upper R Superscript m 1 times n 1 times midline horizontal ellipsis times m Super Subscript k Superscript times n Super Subscript k SuperscriptC ∈Rm1×n1×···×mk×nk are even-order parameter tensors. Compared to the tensor-based LDS 
model discussed in [  5], the EPDS representation (3.1) is more concise and systematic. Cru-
cially, the EPDS representation provides distinct advantages over the TPDS representation 
in analyzing system-theoretic properties and tensor time-series data. 
First of all, the EPDS (3.1) is indeed a generalization of TPDS (2.8). By taking 
the outer products of the component matrices StartSet bold upper A Subscript 1 Baseline comma bold upper A Subscript 2 Baseline comma ellipsis comma bold upper A Subscript k Baseline EndSet{A1, A2, . . . , Ak}, StartSet bold upper B Subscript 1 Baseline comma bold upper B Subscript 2 Baseline comma ellipsis comma bold upper B Subscript k Baseline EndSet{B1, B2, . . . , Bk}, and  
StartSet bold upper C Subscript 1 Baseline comma bold upper C Subscript 2 Baseline comma ellipsis comma bold upper C Subscript k Baseline EndSet{C1, C2, . . . , Ck} from the TPDS (2.8), it can be rewritten in the form of (3.1). However, 
the converse of the transformation is not always true. It holds only when the generalized CP 
ranks of A, B, and  C all are equal to one. Additionally, the EPDS (3.1) has a vectorization 
form, i.e., 
StartLayout Enlarged left brace 1st Row vec left parenthesis sans serif upper X Subscript t plus 1 Baseline right parenthesis equals psi left parenthesis sans serif upper A right parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis plus psi left parenthesis sans serif upper B right parenthesis vec left parenthesis sans serif upper U Subscript t Baseline right parenthesis 2nd Row vec left parenthesis sans serif upper Y Subscript t Baseline right parenthesis equals psi left parenthesis sans serif upper C right parenthesis vec left parenthesis sans serif upper X Subscript t Baseline right parenthesis EndLayout comma
{
vec(Xt+1) = ψ(A)vec(Xt) + ψ(B)vec(Ut)
vec(Yt) = ψ(C)vec(Xt)
,
(3.2) 
where psiψ is the tensor unfolding deﬁned in (1.14). The unfolding-based formulation (3.2) 
serves as a powerful tool for analyzing EPDSs, enabling the straightforward derivation of 
system-theoretic properties and the development of model reduction and system identiﬁca-
tion techniques. 
Ultimately, to fully harness the computational advantages of EPDSs, it is essential to work 
with the tensor form, which facilitates efﬁcient representation and computation of hidden 
patterns. This entails applying tensor decompositions, such as HOSVD, CPD, and TTD, to 
the even-order dynamic tensor A, control tensor B, and output tensor C of the EPDS (3.1). 
These decompositions can substantially reduce the computational and memory burden asso-
ciated with determining stability, reachability, and observability, as well as model reduction 
and system identiﬁcation by leveraging the inherent low-rank structures within the tensors. 
In particular, numerous tensor algebra operations, such as the Einstein product, TSVD, or 
solving multilinear systems, can be performed efﬁciently in the tensor decomposition format 
compared to matrix methods based on tensor unfoldings [ 3, 6– 8]. 
This chapter delves into an exploration of the system-theoretic properties, encompassing 
stability, reachability, and observability, of the EPDS (3.1) through the lens of various tensor 
decompositions. Furthermore, the chapter discusses how TTD can be employed for model 
reduction and system identiﬁcation of EPDSs. The content of this chapter is primarily based 
on the work of [ 3, 4, 8].

3.2
System-Theoretic Properties
41
3.2
System-Theoretic Properties 
The deﬁnitions of stability, reachability, and observability of the EPDS (3.1) are identical to 
those deﬁned for TPDSs in Chap. 2. 
3.2.1
Stability 
The stability of the unforced ETDS (3.1), i.e., 
sans serif upper X Subscript t plus 1 Baseline equals sans serif upper A asterisk sans serif upper X Subscript t BaselineXt+1 = A ∗Xt
(3.3) 
can be obtained by exploiting the U-eigenvalues of A. 
Proposition 3.1 ([ 3, 4]) Given the EPDS (3.3), the equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 is 
• stable if and only if StartAbsoluteValue lamda Subscript j Baseline EndAbsoluteValue less than or equals 1|λ j| ≤1 for all j equals 1 comma 2 comma ellipsis comma product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline j = 1, 2, . . . , ∏k
p=1 n p (and if StartAbsoluteValue lamda Subscript j Baseline EndAbsoluteValue equals 1|λ j| = 1, these  
U-eigenvalues must have equal algebraic and geometry multiplicities); 
• asymptotically stable if and only if StartAbsoluteValue lamda Subscript j Baseline EndAbsoluteValue less than 1|λ j| < 1 for all j equals 1 comma 2 comma ellipsis comma product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline j = 1, 2, . . . , ∏k
p=1 n p; 
• unstable if and only if StartAbsoluteValue lamda Subscript j Baseline EndAbsoluteValue greater than 1|λ j| > 1 for some j equals 1 comma 2 comma ellipsis comma product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline j = 1, 2, . . . , ∏k
p=1 n p. 
Proof The proof is straightforward and relies on the vectorization form of (3.3), which is 
vec left parenthesis sans serif upper X Subscript k plus 1 Baseline right parenthesis equals psi left parenthesis sans serif upper A right parenthesis vec left parenthesis sans serif upper X Subscript k Baseline right parenthesisvec(Xk+1) = ψ(A)vec(Xk). By using the deﬁnition of U-eigenvalues and the linear stabil-
ity conditions, the result follows immediately. It should be noted that the multiplicity of 
U-eigenvalues can also be deﬁned similarly via the tensor unfolding psiψ.
⬜
Computing the U-eigenvalues of A involves tensor unfolding and matrix eigenvalue 
decomposition and requires a computational cost of script upper O left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 3 Baseline right parenthesisO(∏k
p=1 n3
p) operations, making it 
computationally expensive for large EPDSs. To address this issue, the following results 
establish connections between U-eigenvalues and HOSVD, CPD, and TTD, which can 
provide computational advantages in computing or approximating the U-eigenvalues of 
even-order tensors. 
Corollary 3.1 ([ 3]) Suppose that A is given in the HOSVD form. The equilibrium point 
sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 of the EPDS (3.3) is asymptotically stable if the sum of the pp-mode singular values 
squared is less than one for any pp, i.e., 
sigma summation Underscript j Subscript p Baseline equals 1 Overscript n Subscript p Baseline Endscripts left parenthesis gamma Subscript j Sub Subscript p Subscript Superscript left parenthesis p right parenthesis Baseline right parenthesis squared less than 1 period
n p
∑
jp=1
(γ (p)
jp )2 < 1.

42
3
Einstein Product-Based Dynamical Systems
Proof The sum of the pp-mode singular values squared is equal to the Frobenius norm of sans serif upper AA
squared, as shown by De Lathauwer et al. [ 9]. Therefore, it follows that 
sigma summation Underscript j Subscript p Baseline equals 1 Overscript n Subscript p Baseline Endscripts left parenthesis gamma Subscript j Sub Subscript p Subscript Superscript left parenthesis p right parenthesis Baseline right parenthesis squared equals parallel to sans serif upper A parallel to squared equals parallel to psi left parenthesis sans serif upper A right parenthesis parallel to squared
n p
∑
jp=1
(γ (p)
jp )2 = ||A||2 = ||ψ(A)||2
for any pp. According to linear algebra, the spectral radius of a matrix is always less than 
or equal to its Frobenius norm. Hence, the magnitude of the maximal U-eigenvalue (or 
U-spectral radius) satisﬁes 
lamda Subscript s r Baseline less than or equals sigma summation Underscript j Subscript p Baseline equals 1 Overscript n Subscript p Baseline Endscripts left parenthesis gamma Subscript j Sub Subscript p Subscript Superscript left parenthesis p right parenthesis Baseline right parenthesis squaredλsr ≤
n p
∑
jp=1
(γ (p)
jp )2
for any pp, and the result follows from Proposition 3.1.
⬜
Lemma 3.1 ([ 3]) Suppose that sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk is given in the CPD form, where at 
least two of its factor matrices bold upper V Superscript left parenthesis p right parenthesisV(p) and bold upper V Superscript left parenthesis q right parenthesisV(q) have all column vectors orthonormal for odd 
pp and even qq. The matrix SVD of psi left parenthesis sans serif upper T right parenthesisψ(T) can be obtained from the CPD of T as follows: 
psi left parenthesis sans serif upper T right parenthesis equals bold upper U bold upper S bold upper V Superscript down tack Baseline commaψ(T) = USVT,
where 
StartLayout 1st Row bold upper U equals bold upper V Superscript left parenthesis 2 k minus 1 right parenthesis Baseline circled dot bold upper V Superscript left parenthesis 2 k minus 3 right parenthesis Baseline circled dot midline horizontal ellipsis circled dot bold upper V Superscript left parenthesis 1 right parenthesis Baseline comma bold upper V equals bold upper V Superscript left parenthesis 2 k right parenthesis Baseline circled dot bold upper V Superscript left parenthesis 2 k minus 2 right parenthesis Baseline circled dot midline horizontal ellipsis circled dot bold upper V Superscript left parenthesis 2 right parenthesis Baseline comma EndLayoutU = V(2k−1) ʘ V(2k−3) ʘ · · · ʘ V(1),
V = V(2k) ʘ V(2k−2) ʘ · · · ʘ V(2),
and bold upper S element of double struck upper R Superscript r times rS ∈Rr×r is a diagonal matrix containing the weights of the CPD on its diagonal (rr is 
the CP rank of T). 
The proof of the lemma can be found in [ 3]. 
Corollary 3.2 ([ 3]) Suppose that A satisﬁes the condition stated in Lemma 3.1. The equi-
librium pointsans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 of the EPDS (3.3) is asymptotically stable if the ﬁrst weight element of 
the CPD is less than one. 
Proof From linear algebra, it is known that the spectral radius of a matrix is always less 
than or equal to its largest singular value. Therefore, by Lemma 3.1 and Proposition 3.1, the  
result follows immediately.
⬜
Corollary 3.3 ([ 3]) Suppose that sans serif upper A overbar¯A is given in the TTD form with ﬁrst k minus 1k −1 core tensors 
left-orthonormal and the last kk core tensors right-orthonormal, where sans serif upper A overbar¯A is the double struck upper SS-transpose 
of A with double struck upper S equals StartSet 1 comma 3 comma ellipsis comma 2 k minus 1 comma 2 comma 4 comma ellipsis comma 2 k EndSetS = {1, 3, . . . , 2k −1, 2, 4, . . . , 2k}. The equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 of the EPDS 
(3.3) is asymptotically stable if the largest singular value of bold upper V Subscript left parenthesis 2 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Superscript left parenthesis k right parenthesisV(k)
(2,{1,2,3}), the left-unfolded 
matrix of the factor tensor sans serif upper V Superscript left parenthesis k right parenthesisV(k) of sans serif upper A overbar¯A, is less than one.

3.2
System-Theoretic Properties
43
Proof The U-singular values of A are the singular values ofbold upper V Subscript left parenthesis 2 comma 1 comma 2 comma 3 right parenthesis Superscript left parenthesis k right parenthesisV(k)
(2,1,2,3) according to Algorithm 
1. Therefore, the result follows immediately from Proposition 3.1.
⬜
Remark 3.1 Although Proposition 3.1 provides strong stability results, the three corollaries 
can efﬁciently determine the asymptotic stability if A is given in the HOSVD, CPD, or TTD 
form. For instance, ﬁnding the TTD ofsans serif upper A overbar¯A, left-/right-orthonormalization, and computing the 
largest singular value ofbold upper V Subscript left parenthesis 2 comma 1 comma 2 comma 3 right parenthesis Superscript left parenthesis k right parenthesisV(k)
(2,1,2,3) can be done in a total time complexity of aboutscript upper O left parenthesis k n r cubed right parenthesisO(knr3), 
assuming n Subscript p Baseline equals nn p = n and the TT-ranks r Subscript p Baseline equals rrp = r [ 3, 8]. 
3.2.2
Reachability 
The framework for analyzing the reachability of the EPDS (3.1, top) can be formulated 
similarly to that of linear systems theory. 
Proposition 3.2 ([ 3, 4]) The EPDS (3.1, top) is reachable if and only if the reachability 
Gramian deﬁned as 
sans serif upper W Subscript upper R Baseline equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts sans serif upper A Superscript t Super Subscript f Superscript minus t minus 1 Baseline asterisk sans serif upper B asterisk sans serif upper B Superscript down tack Baseline asterisk left parenthesis sans serif upper A Superscript down tack Baseline right parenthesis Superscript t Super Subscript f Superscript minus t minus 1 Baseline element of double struck upper R Superscript n 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k SuperscriptWR =
t f −1
∑
t=t0
At f −t−1 ∗B ∗BT ∗(AT)t f −t−1 ∈Rn1×n1×···×nk×nk
(3.4) 
is U-positive deﬁnite (i.e., psi left parenthesis sans serif upper W Subscript upper R Baseline right parenthesisψ(WR) is positive deﬁnite). 
Proof The result can be obtained by utilizing the properties of tensor unfolding psiψ and 
applying concepts from linear systems theory.
⬜
Note that sans serif upper A Superscript t Super Subscript f Superscript minus t minus 1At f −t−1 denotes the left parenthesis t Subscript f Baseline minus t minus 1 right parenthesis(t f −t −1)th Einstein power of A. Analogous to LDSs, 
the reachability Gramian of an EPDS can be computed through a tensor-based Lyapunov 
equation, which is deﬁned as 
sans serif upper W Subscript upper R Baseline minus sans serif upper A asterisk sans serif upper W Subscript upper R Baseline asterisk sans serif upper A Superscript down tack Baseline equals sans serif upper B asterisk sans serif upper B Superscript down tack Baseline periodWR −A ∗WR ∗AT = B ∗BT.
(3.5) 
Moreover, a tensor-based Kalman’s rank condition can be derived for EPDSs. 
Proposition 3.3 ([ 3, 4]) The EPDS (3.1, top) is reachable if and only if the reachability 
tensor (a generalized row block tensor) deﬁned as 
sans serif upper R equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper B 2nd Column sans serif upper A asterisk sans serif upper B 3rd Column midline horizontal ellipsis 4th Column sans serif upper A Superscript product Underscript p equals 1 Overscript k Endscripts n Super Subscript p Superscript minus 1 Baseline asterisk sans serif upper B EndMatrix element of double struck upper R Superscript n 1 times n 1 s 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k Superscript s Super Subscript k SuperscriptR =
[
B A ∗B · · · A
∏k
p=1 n p−1 ∗B
]
∈Rn1×n1s1×···×nk×nksk
(3.6) 
spans double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript kRn1×n2×···×nk. In other words, rank left parenthesis psi left parenthesis sans serif upper R right parenthesis right parenthesis equals product Underscript p equals 1 Overscript k Endscripts n Subscript p Baselinerank(ψ(R)) = ∏k
p=1 n p.

44
3
Einstein Product-Based Dynamical Systems
The proof can be readily formulated using the tensor unfoldingpsiψ. Whenk equals 1k = 1, Proposi-
tion 3.3 reduces to the famous Kalman’s rank condition for LDSs. The following discussion 
utilizes tensor decompositions, including HOSVD, CPD, and TTD, to establish necessary 
or sufﬁcient conditions for determining the reachability of EPDSs. 
Lemma 3.2 ([ 3]) Suppose that sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk. If the rank of psi left parenthesis sans serif upper T right parenthesisψ(T) is equal to 
product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p, then the  left parenthesis 2 p minus 1 right parenthesis(2p −1)-rank of A is equal to n Subscript pn p for all pp. If the rank of psi left parenthesis sans serif upper T right parenthesisψ(T) is 
equal to product Underscript p equals 1 Overscript k Endscripts m Subscript p∏k
p=1 m p, then the 2 p2p-rank of T is equal to m Subscript pm p for all pp. 
The proof of the lemma can be found in [ 3]. 
Corollary 3.4 ([ 3]) Suppose that R is given in the HOSVD form. If theleft parenthesis 2 p minus 1 right parenthesis(2p −1)-rank of R 
is not equal ton Subscript pn p for onepp, then the EPDS (3.1) is not reachable. In other words, if the set 
of left parenthesis 2 p minus 1 right parenthesis(2p −1)-mode singular values of R includes zero for one pp, then the EPDS (3.1) is not 
reachable. 
Proof The ﬁrst part of the result follows immediately from Proposition 3.3 and Lemma 3.2. 
The second part of the result is based on the fact that the pp-rank of a tensor is equal to the 
number of nonzero pp-mode singular values [ 9].
⬜
Lemma 3.3 ([ 3]) Suppose that sans serif upper T element of double struck upper R Superscript n 1 times m 1 times midline horizontal ellipsis times n Super Subscript k Superscript times m Super Subscript k SuperscriptT ∈Rn1×m1×···×nk×mk is given in the CPD form with CP 
rank rr. If its factor matrices bold upper V Superscript left parenthesis p right parenthesisV(p) and bold upper V Superscript left parenthesis q right parenthesisV(q) satisfy 
sigma summation Underscript odd p Endscripts Krank left parenthesis bold upper V Superscript left parenthesis p right parenthesis Baseline right parenthesis greater than or equals r plus k minus 1 comma sigma summation Underscript even p Endscripts Krank left parenthesis bold upper V Superscript left parenthesis q right parenthesis Baseline right parenthesis greater than or equals r plus k minus 1 comma
∑
odd p
Krank(V(p)) ≥r + k −1,
∑
even p
Krank(V(q)) ≥r + k −1,
(3.7) 
and the Krank of all the factor matrices must be greater than or equal to one, then 
rank left parenthesis psi left parenthesis sans serif upper T right parenthesis right parenthesis equals rrank
(
ψ(T)
)
= r. 
The proof of the lemma can be found in [ 3]. 
Corollary 3.5 ([ 3]) If sans serif upper RR is given in the CPD form with CP rank product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p and the factor 
matrices satisfying (3.7), then the EPDS (3.1) is reachable. Conversely, if the EPDS (3.1) is  
reachable, then the CP rank of R is greater than or equal to product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p. 
Proof The ﬁrst part of the result can be obtained directly from Proposition 3.3 and Lemma 
3.3. The second part of the result relies on the fact that the CP rank of a tensor is greater 
than or equal to the rank of any unfolded matrix of the tensor [ 10].
⬜

3.2
System-Theoretic Properties
45
Corollary 3.6 ([ 3]) Suppose that sans serif upper R overbar¯R is given in the TTD form where sans serif upper R overbar¯R is the double struck upper SS-transpose of 
R with double struck upper S equals StartSet 1 comma 3 comma ellipsis comma 2 k minus 1 comma 2 comma 4 comma ellipsis comma 2 k EndSetS = {1, 3, . . . , 2k −1, 2, 4, . . . , 2k}. The EPDS (3.1) is reachable if and only if the 
kkth optimal TT-rank of sans serif upper R overbar¯R is equal to product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p. 
Proof The result can be derived using Proposition 3.3 and the deﬁnition of optimal 
TT-ranks.
⬜
Remark 3.2 Computing the rank ofpsi left parenthesis sans serif upper R right parenthesisψ(R) using QR decomposition can be computationally 
expensive, with a time complexity ofscript upper O left parenthesis product Underscript p equals 1 Overscript k Endscripts n Subscript p Superscript 3 Baseline s Subscript p Baseline right parenthesisO(∏k
p=1 n3
psp). However, if  R is given in the HOSVD, 
CPD, or TTD form, determining the reachability of EPDSs can be achieved efﬁciently using 
different notions of tensor rank. Notably, determining the rank ofpsi left parenthesis sans serif upper R right parenthesisψ(R) only requires ﬁnding 
the TTD of sans serif upper R overbar¯R [ 3]. 
3.2.3
Observability 
The observability framework for the EPDS (3.1) can be obtained from the duality principle, 
which arises from the properties of the unfolding psiψ. 
Proposition 3.4 ([ 3, 4]) The EPDS (3.1) is observable if and only if the observability 
Gramian deﬁned as 
sans serif upper W Subscript upper O Baseline equals sigma summation Underscript t equals t 0 Overscript t Subscript f Baseline minus 1 Endscripts left parenthesis sans serif upper A Superscript down tack Baseline right parenthesis Superscript t minus t 0 Baseline asterisk sans serif upper C Superscript down tack Baseline asterisk sans serif upper C asterisk sans serif upper A Superscript t minus t 0 Baseline element of double struck upper R Superscript n 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript times n Super Subscript k SuperscriptWO =
t f −1
∑
t=t0
(AT)t−t0 ∗CT ∗C ∗At−t0 ∈Rn1×n1×···×nk×nk
(3.8) 
is U-positive deﬁnite (i.e., psi left parenthesis sans serif upper W Subscript upper O Baseline right parenthesisψ(WO) is positive deﬁnite). 
Similarly, the observability Gramian can be computed from a tensor-based Lyapunov 
equation, i.e., 
sans serif upper A Superscript down tack Baseline asterisk sans serif upper W Subscript upper O Baseline asterisk sans serif upper A minus sans serif upper W Subscript upper O Baseline equals minus sans serif upper C Superscript down tack Baseline asterisk sans serif upper C periodAT ∗WO ∗A −WO = −CT ∗C.
(3.9) 
Proposition 3.5 ([ 3, 4]) The EPDS (3.1) is observable if and only if the observability tensor 
(a generalized column block tensor) deﬁned as 
sans serif upper O equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper C 2nd Column sans serif upper C asterisk sans serif upper A 3rd Column midline horizontal ellipsis 4th Column sans serif upper B asterisk sans serif upper A Superscript product Underscript p equals 1 Overscript k Endscripts n Super Subscript p Superscript minus 1 Baseline EndMatrix Superscript down tack Baseline element of double struck upper R Superscript n 1 m 1 times n 1 times midline horizontal ellipsis times n Super Subscript k Superscript m Super Subscript k Superscript times n Super Subscript k SuperscriptO =
[
C C ∗A · · · B ∗A
∏k
p=1 n p−1]T
∈Rn1m1×n1×···×nkmk×nk
(3.10) 
spans double struck upper R Superscript n 1 times n 2 times midline horizontal ellipsis times n Super Subscript kRn1×n2×···×nk. In other words, rank left parenthesis psi left parenthesis sans serif upper O right parenthesis right parenthesis equals product Underscript p equals 1 Overscript k Endscripts n Subscript p Baselinerank
(
ψ(O)
)
= ∏k
p=1 n p. 
Corollary 3.7 ([ 3]) Suppose that O is given in the HOSVD form. If the 2 p2p-rank of O is 
not equal to n Subscript pn p for one pp, then the EPDS (3.1) is not observable. In other words, if the

46
3
Einstein Product-Based Dynamical Systems
set of 2 p2p-mode singular values of O contains zero for one pp, then the EPDS (3.1) is not 
observable. 
Corollary 3.8 ([ 3]) If O is given in the CPD form with CP rank product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p and factor 
matrices satisfying (3.7), then the EPDS (3.1) is observable. Conversely, if the EPDS (3.1) 
is observable, then the CP rank of O is greater than or equal to product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p. 
Corollary 3.9 ([ 3]) Suppose thatsans serif upper O overbar ¯O is given in the TTD form wheresans serif upper O overbar ¯O is thedouble struck upper SS-transpose of 
O withdouble struck upper S equals StartSet 1 comma 3 comma ellipsis comma 2 k minus 1 comma 2 comma 4 comma ellipsis comma 2 k EndSetS = {1, 3, . . . , 2k −1, 2, 4, . . . , 2k}. The EPDS (3.1) is observable if and only if the 
kkth optimal TT-rank of sans serif upper O overbar ¯O is equal to product Underscript p equals 1 Overscript k Endscripts n Subscript p∏k
p=1 n p . 
3.3
Model Reduction/System Identification 
In order to apply standard model reduction/identiﬁcation frameworks, such as balanced 
truncation [ 11, 12], balanced proper orthogonal decomposition [ 13, 14], and eigensystem 
realization algorithm [ 15, 16], to EPDSs, one must use their unfolded representation (3.2), 
which can pose signiﬁcant computational challenges. This section presents a tensor-based 
computational framework for model reduction and system identiﬁcation of EPDSs [ 8]. In 
particular, TTD is utilized as the underlying computational framework. For convenience, 
the ﬁnal reduced model is expressed in the unfolded representation, i.e., the LDS model. 
3.3.1
TTD-Based Balanced Truncation 
Balanced truncation (BT) is a widely used model reduction method for stable linear input-
output systems, ﬁrst proposed by Moore [ 11] in the 1980s. It has the ability to preserve 
important system-theoretic properties such as stability and passivity [ 17]. However, the 
computational and memory complexity of the standard BT can be prohibitive, with time 
complexity ofscript upper O left parenthesis n cubed right parenthesisO(n3) and memory complexity ofscript upper O left parenthesis n squared right parenthesisO(n2), wherenn is the dimension of the state 
variable [ 12]. To mitigate these challenges, TTD can be utilized for efﬁcient computation 
and low storage consumption in BT. This approach is referred to as TTD-based BT. 
The TTD-based BT approach also involves solving the tensor-based Lyapunov equations 
(3.5) and (3.9) as the ﬁrst step. For solving these equations in BT, several iterative methods 
have been proposed, such as the Smith method [ 18– 20] and alternating direction implicit 
methods [ 21– 23], which are suitable for large-scale problems. The tensor-based algebraic 
Lyapunov equation can be expressed in a normal form as: 
sans serif upper X minus sans serif upper A asterisk sans serif upper X asterisk sans serif upper A Superscript down tack Baseline equals sans serif upper D periodX −A ∗X ∗AT = D.
(3.11) 
The normal form can be reformulated as the following multilinear system:

3.3
Model Reduction/System Identification
47
left parenthesis sans serif upper I minus sans serif upper A degrees sans serif upper A right parenthesis asterisk sans serif upper X overbar equals sans serif upper D overbar comma(I −A ◦A) ∗¯X = ¯D,
(3.12) 
where sans serif upper II is the U-identity tensor (i.e., psi left parenthesis sans serif upper I right parenthesisψ(I) is the identity matrix), and sans serif upper X overbar¯X and sans serif upper D overbar ¯D are the double struck upper SS-
transpose of X and D, respectively, with double struck upper S equals StartSet 1 comma 3 comma ellipsis comma 2 k minus 1 comma 2 comma 4 comma ellipsis comma 2 k EndSetS = {1, 3, . . . , 2k −1, 2, 4, . . . , 2k}. If  A and D 
are provided in the TTD form with low TT-ranks, the multilinear system (3.12) can be 
solved efﬁciently by exploiting Density Matrix Renormalization Group (DMRG)-based 
algorithms [ 24– 26]. A similar approach for solving the standard Lyapunov equations was 
used in [ 27]. Unfortunately, there is no rigorous theoretical convergence analysis for DMRG-
based algorithms [ 26]. 
After obtaining the reachability and observability Gramians sans serif upper W overbar Subscript upper R ¯WR and sans serif upper W overbar Subscript upper O ¯WO in the TTD 
form, the economy-size TSVD (using Algorithm 1) can be applied to ﬁnd the Cholesky-like 
factors of the two Gramians, i.e., 
sans serif upper W Subscript upper R Baseline equals sans serif upper Z Subscript upper R Baseline asterisk sans serif upper Z Subscript upper R Superscript down tack Baseline and sans serif upper W Subscript upper O Baseline equals sans serif upper Z Subscript upper O Baseline asterisk sans serif upper Z Subscript upper O Superscript down tack Baseline commaWR = ZR ∗ZT
R and WO = ZO ∗ZT
O,
wheresans serif upper Z Subscript upper R Baseline element of double struck upper R Superscript n 1 times r 1 times midline horizontal ellipsis times n Super Subscript k Superscript times r Super Subscript kZR ∈Rn1×r1×···×nk×rk andsans serif upper Z Subscript upper O Baseline element of double struck upper R Superscript n 1 times o 1 times midline horizontal ellipsis times n Super Subscript k Superscript times o Super Subscript kZO ∈Rn1×o1×···×nk×ok are the generalized row block ten-
sors that contain U-singular tensors multiplied by the square root of the corresponding 
U-singular values. Since the numbers of non-vanishing U-singular values product Underscript p equals 1 Overscript k Endscripts r Subscript p∏k
p=1 rp and 
product Underscript p equals 1 Overscript k Endscripts o Subscript p∏k
p=1 op are typically small after the economy-size TSVD, it is more convenient to conduct 
the rest of the computation in the matrix space. Therefore, the Hankel matrix is computed 
as 
bold upper H equals psi left parenthesis sans serif upper Z Subscript upper O Baseline right parenthesis Superscript down tack Baseline psi left parenthesis sans serif upper Z Subscript upper R Baseline right parenthesis element of double struck upper R Superscript product Underscript p equals 1 Overscript k Endscripts o Super Subscript p Superscript times product Underscript p equals 1 Overscript k Endscripts r Super Subscript p Superscript Baseline periodH = ψ(ZO)Tψ(ZR) ∈R
∏k
p=1 op×∏k
p=1 rp.
(3.13) 
The remaining steps of the TTD-based BT proceed similarly to the standard BT. The detailed 
procedure of the TTD-based BT is summarized in Algorithm 2. It should be noted that 
quantized TTD can also be used in Step 2 to further accelerate the computation of the 
TTD-based BT. 
The standard BT provides an a priori error bound for the reduced system based on 
the Hankel singular values [ 11]. However, this error bound does not hold exactly for the 
TTD-based BT, as several truncation errors occur in the computations of generalized TTD, 
multilinear system, and economy-size TSVD. Letsans serif upper GG andbold upper G Subscript redGred denote the transfer functions of 
the original EPDS and the reduced unfolding system, respectively (where sans serif upper GG can be deﬁned 
via the unfolding psiψ). The error bound for the TTD-based BT can be written as 
parallel to psi left parenthesis sans serif upper G right parenthesis minus bold upper G Subscript red Baseline parallel to Subscript normal infinity Baseline less than or equals sigma summation Underscript j equals h plus 1 Overscript product Underscript p equals 1 Overscript k Endscripts n Subscript p Baseline Endscripts sigma Subscript j Baseline plus epsilon comma||ψ(G) −Gred||∞≤
∏k
p=1 n p
∑
j=h+1
σ j + ∈,
(3.14) 
where sigma Subscript jσ j are the Hankel singular values, hh is the matrix SVD truncation point in Step 6, 
andepsilon∈is an error term resulting from the TTD-related computations. Hereparallel to dot parallel to Subscript normal infinity|| · ||∞denotes the 
script upper HH-normal infinity∞norm. As long as A, B, and  C have low TT-ranks, the error term epsilon∈can be considered 
negligible, and Algorithm 2 is more computationally efﬁcient than the standard BT.

48
3
Einstein Product-Based Dynamical Systems
A computer  p rogram for  algorith m 1. It is a  T T D based ba lanc ed trunc ation . It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.8A compu
ter program for algorithm 1. It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.
A c ompute
r pr
ogram
 for algorithm 1. It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.3.1A 
compu
te r program for algor it
hm  1. It is a T T D b a
sed
 ba la
nced truncation. 
It includes  9 s teps. The E P D S  is  gi ve n. Com
put e the ge nera lized T T D, comp ute the reacha bility, a pply  algorithms, recover Z R and Z O,
 com pute the economy size matrix S V  D, calc ulate , comp ute the reduced model, and return.3.12A comp uter progra m for algori
thm  1. It  is a  T T  D ba sed balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return. 1 A c omputer  pr ogra m f or algo rith m 1. 
It is a T T  D base d b alanc ed t runca tion. It include s 9 steps. T he E  P D S is give n.  Compu te the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.3.13A 
com puter pr ogra m for algorit hm 1. I t is  a T T  D bas ed  balan ced tr un cat
ion
. It  includ es  9
 step s. The  E 
P D
 S i s giv en.  Co mput e the g ene rali zed T T D, com pute th e reachab ility, a
ppl y algorith ms, recover Z R and  Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.
A computer program for algorithm 1. It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.P = ZRVS−1
2 ∈R
∏k
p=1 n p×h
and
Q = ZOUS−1
2 ∈R
∏k
p=1 n p×h
A c ompu ter prog ram for a lgorit hm 1. It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.
A computer program for algorithm 1. It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.A = QTψ(A)P ∈Rh×h
B = QTψ(B) ∈Rh×∏k
p=1 sp
C = ψ(C)P ∈R
∏k
p=1 m p×h
A c omputer  pro gram for  algor ith m 1.  It is a T T D based balanced truncation. It includes 9 steps. The E P D S is given. Compute the generalized T T D, compute the reachability, apply algorithms, recover Z R and Z O, compute the economy size matrix S V D, calculate, compute the reduced model, and return.
3.3.2
TTD-Based Balanced Proper Orthogonal Decomposition 
The reachability and observability Gramians can be directly obtained from data or numerical 
simulations, bypassing the need to solve the tensor Lyapunov equations, as shown in [ 13]. 
Lall et al.  [  28, 29] originally used this approach to generalize BT to nonlinear systems. 
Given the EPDS (3.1, top), the even-order control tensor B can be decomposed as 
sans serif upper B equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper B Subscript 1 Baseline 2nd Column sans serif upper B Subscript 2 Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper B Subscript product Underscript p equals 1 Overscript k Endscripts s Sub Subscript p Subscript Baseline EndMatrixB =
[
B1 B2 · · · B∏k
p=1 sp
]
using the inverse operation of the generalized row block tensor construction. Then the state 
responses can be constructed for t equals 1 comma 2 comma ellipsis comma rt = 1, 2, . . . ,r as follows: 
sans serif upper X Superscript left parenthesis j right parenthesis Baseline equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper B Subscript j Baseline 2nd Column sans serif upper A asterisk sans serif upper B Subscript j Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper A Superscript r Baseline asterisk sans serif upper B Subscript j Baseline EndMatrix periodX( j) =
[
B j A ∗B j · · · Ar ∗B j
]
.
If sans serif upper AA and sans serif upper BB are already given in the generalized TTD form with low TT-ranks, then the 
state responses sans serif upper X Superscript left parenthesis j right parenthesisX( j) can be efﬁciently constructed in the generalized TTD form. Consider 
r plus 1 equals product Underscript p equals 1 Overscript k Endscripts r Subscript pr + 1 = ∏k
p=1 rp snapshots of states for j equals 1 comma 2 comma ellipsis comma product Underscript p equals 1 Overscript k Endscripts s Subscript p Baseline j = 1, 2, . . . , ∏k
p=1 sp and arrange the snapshots 
in the following form:

3.3
Model Reduction/System Identification
49
sans serif upper X equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper X Superscript left parenthesis 1 right parenthesis Baseline 2nd Column sans serif upper X Superscript left parenthesis 2 right parenthesis Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper X Superscript left parenthesis product Underscript p equals 1 Overscript k Endscripts s Super Subscript p Superscript right parenthesis Baseline EndMatrix element of double struck upper R Superscript n 1 times s 1 r 1 times midline horizontal ellipsis times n Super Subscript k Superscript times s Super Subscript k Superscript r Super Subscript k Superscript Baseline periodX =
[
X(1) X(2) · · · X(∏k
p=1 sp)]
∈Rn1×s1r1×···×nk×skrk.
(3.15) 
The empirical reachability Gramian of the EPDS (3.1) can be computed as 
sans serif upper W Subscript upper R Baseline equals sans serif upper X asterisk sans serif upper X Superscript down tack Baseline periodWR = X ∗XT.
(3.16) 
To construct the empirical observability Gramian sans serif upper W Subscript upper O Baseline equals sans serif upper Y Superscript down tack Baseline asterisk sans serif upper YWO = YT ∗Y, the adjoint system of 
the EPDS (3.1) is solved, following a procedure similar to that for the reachability Gramian, 
i.e., 
sans serif upper X overTilde Subscript t plus 1 Baseline equals sans serif upper A Superscript down tack Baseline asterisk sans serif upper X overTilde Subscript t Baseline plus sans serif upper C Superscript down tack Baseline asterisk sans serif upper V Subscript t˜Xt+1 = AT ∗˜Xt + CT ∗Vt
overt equals 1 comma 2 comma ellipsis comma ot = 1, 2, . . . , o to obtain the empirical observability snapshot tensor sans serif upper YY (in the general-
ized TTD form). After obtaining both the empirical reachability and observability snapshot 
tensors X and Y, the generalized Hankel tensor can be constructed as 
sans serif upper H equals sans serif upper Y Superscript down tack Baseline asterisk sans serif upper X element of double struck upper R Superscript m 1 o 1 times s 1 r 1 times midline horizontal ellipsis times m Super Subscript k Superscript o Super Subscript k Superscript times s Super Subscript k Superscript r Super Subscript k SuperscriptH = YT ∗X ∈Rm1o1×s1r1×···×mkok×skrk
(3.17) 
in the generalized TTD form, where o plus 1 equals product Underscript p equals 1 Overscript k Endscripts o Subscript po + 1 = ∏k
p=1 op. Finally, Algorithm 1 is applied to 
obtain the generalized Hankel singular values, and proceed with the remaining steps of 
the TTD-based balanced proper orthogonal decomposition (BPOD) as for the TTD-based 
BT. The detailed steps of the TTD-based BPOD are summarized in Algorithm 3. Note 
that quantized TTD can also be used in Step 2 to further accelerate the computation of the 
TTD-based BPOD. 
A computer  p rogram of algorithm  2. It is a T T D based balanced prope r orthogon al d
ecomposi tion.  It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return.8A compu ter program of algorithm 2. It is a T T D based balanced proper orthogonal decomposition. It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return.
A c ompute
r pr
ogram
 of algorithm 2. It is a T T D based balanced proper orthogonal decomposition. It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return.3.1A 
compu
te r program of algori th
m 2. It is a T T D ba s
ed 
bal an
ced proper orthog on al d ecom position . It i nc
lud es 7 step s. E P D S i s giv en.  Fi nd  th e g
ene ralized T T D s of A, B, an d C.  Construct the  reachabi lity, co mp ute th e gene ralized Hankel tensor, compute the economy size T S V D, and return.3.15A com pute r progra
m of algo rithm
 2.  It is a  T T  D based bal anced p roper o rt hogona l decomposition. It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return.3.17A com pute r pr ogram
 of  algorit hm 2 . It is a T T  D ba sed  b alance d proper orthogonal decomposition. It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return. 1A comput er  pro gram  of algo rithm 2 . It
 is a  T T D based b alanc ed pro per  ortho go nal de compos it ion
. I
t in cl udes 7 s te ps. E P  D S
 i s g
ive
n. F ind the
 ge neraliz ed T T D s  of  A, B,  a nd C . Con struct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return. 2 
A c omputer  pro gram of algori thm  2. It is a T T D based balanced proper orthogonal decomposition. It includes 7 steps. E P D S is given. Find the generalized T T D s of A, B, and C. Construct the reachability, compute the generalized Hankel tensor, compute the economy size T S V D, and return.
The TTD-based BPOD is not suitable for experimental settings since it requires access to 
the EPDS and its adjoint. Additionally, constructing the generalized Hankel tensor through 
the TTD-based Einstein product between the reachability and observability snapshots X and 
Y can be computationally expensive if the TT-ranks are not adequately small.

50
3
Einstein Product-Based Dynamical Systems
3.3.3
TTD-Based Eigensystem Realization Algorithm 
Eigensystem realization algorithm (ERA) was initially introduced as a model identiﬁcation 
and reduction technique for LDSs in [ 15]. It has been subsequently proven that ERA is 
equivalent to BPOD for discrete-time systems, but with much lower computational overhead 
[ 30]. Like TTD-based BPOD, TTD-based ERA also seeks to create the generalized Hankel 
tensor from response simulations. 
First, snapshots of the impulse responses, also known as Markov parameters, need to be 
collected, i.e., 
sans serif upper Z Subscript t Baseline equals sans serif upper C asterisk sans serif upper A Superscript t Baseline asterisk sans serif upper B element of double struck upper R Superscript m 1 times s 1 times midline horizontal ellipsis times m Super Subscript k Superscript times s Super Subscript k Superscript Baseline periodZt = C ∗At ∗B ∈Rm1×s1×···×mk×sk.
(3.18) 
Next, the generalized Hankel tensor can be constructed using a generalized row/column 
block tensor approach, i.e., 
Algorithm 4 TTD-based Eigensystem Realization Algorithm. This algorithm was adapted 
from [ 8] with permission. 
1: Given 
the 
EPDS 
(3.1) 
with 
A ∈ Rn1×n1×···×nk×nk , 
B ∈ Rn1×s1×···×nk×sk ,
and
 C ∈ 
Rm1×n1×···×mk×nk , and two integer r and o 
2: Find the generalized TTDs of A, B, and  C 
3: Construct the snapshots of the impulse responses Zt ∈ Rm1×s1×···×mk×sk in the generalized TTD 
form 
4: Compute the generalized Hankel tensor H using (3.19) in the TTD form 
5: Compute the economy-size TSVD of H using Algorithm 1, i.e., H = U ∗ S ∗ VT and unfold the 
TSVD to the matrix form using ψ, i.e., H ≈ USVT where U ∈ R
∏k 
p=1 m pop×h , S ∈ Rh×h, and  
V ∈ R
∏k 
p=1 sprp×h 
6: The reduced model is given by 
. A = S−1
2 UTH1VS−1
2 ∈Rh×h,
B = S−1
2 UTHcol ∈Rh×∏k
p=1 sp,
C = HrowVS−1
2 ∈R
∏k
p=1 m p×h,
where 
. Hcol = ψ
( [Z0 Z1 · · · ZS
]T )
, Hrow = ψ
( [Z0 Z1 · · · ZT
] )
,
H1 = ψ
(
⎡
⎢⎢⎢⎣
Z1
Z2
· · ·
ZT +1
Z2
Z3
· · ·
ZT +2
...
...
· · ·
...
ZS+1 ZS+2 . . . ZT +S+1
⎤
⎥⎥⎥⎦
)
7: return The reduced model of the EPDS.

3.4
Applications
51
sans serif upper H equals Start 4 By 4 Matrix 1st Row 1st Column sans serif upper Z Subscript 0 Baseline 2nd Column sans serif upper Z Subscript 1 Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper Z Subscript r Baseline 2nd Row 1st Column sans serif upper Z Subscript 1 Baseline 2nd Column sans serif upper Z Subscript 2 Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper Z Subscript r plus 1 Baseline 3rd Row 1st Column vertical ellipsis 2nd Column vertical ellipsis 3rd Column down right diagonal ellipsis 4th Column vertical ellipsis 4th Row 1st Column sans serif upper Z Subscript o Baseline 2nd Column sans serif upper Z Subscript o plus 1 Baseline 3rd Column midline horizontal ellipsis 4th Column sans serif upper Z Subscript r plus o Baseline EndMatrix element of double struck upper R Superscript m 1 o 1 times s 1 r 1 times midline horizontal ellipsis times m Super Subscript k Superscript o Super Subscript k Superscript times s Super Subscript k Superscript r Super Subscript k Superscript Baseline commaH =
⎡
⎢⎢⎢⎣
Z0
Z1
· · · Zr
Z1
Z2
· · · Zr+1
...
...
...
...
Zo Zo+1 · · · Zr+o
⎤
⎥⎥⎥⎦∈Rm1o1×s1r1×···×mkok×skrk,
(3.19) 
wherer plus 1 equals product p equals 1 Superscript k Baseline r Subscript pr + 1 = ∏p = 1krp ando plus 1 equals product p equals 1 Superscript k Baseline o Subscript po + 1 = ∏p = 1kop. The detailed procedure of the TTD-
based ERA can be found in Algorithm 4. Again, quantized TTD can also be used in Step 2 to 
further accelerate the computation of the TTD-based ERA. More signiﬁcantly, the Markov 
parameterssans serif upper Z Subscript tZt can be obtained from impulse responses without having access to the EPDS. 
Therefore, if the Markov parameterssans serif upper Z Subscript tZt are obtained from experiments, the TTD-based ERA 
can begin at Step 4. 
3.4
Applications 
3.4.1
Synthetic Data: Reachability and Observability 
This example was adapted from [ 3]. Consider the same example as presented in Chap. 2. The  
TPDS can be equivalently represented in the form (3.1) withsans serif upper A equals bold upper A Subscript 1 Baseline degrees bold upper A Subscript 2 BaselineA = A1 ◦A2,sans serif upper B equals bold upper B Subscript 1 Baseline degrees bold upper B Subscript 2 BaselineB = B1 ◦B2, and  
sans serif upper C equals bold upper C Subscript 1 Baseline degrees bold upper C Subscript 2 BaselineC = C1 ◦C2. Based on Propositions 3.3 and 3.5, the reachability and observability tensors 
are computed as 
StartLayout 1st Row 1st Column sans serif upper R Subscript colon colon 11 2nd Column equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0 3rd Column 0 2nd Row 1st Column 0 2nd Column 1 3rd Column 0 3rd Row 1st Column 0 2nd Column 0.8 3rd Column 0 EndMatrix comma sans serif upper R Subscript colon colon 12 Baseline equals Start 3 By 3 Matrix 1st Row 1st Column 0.4 2nd Column 0 3rd Column 0.378 2nd Row 1st Column 0.57 2nd Column 0 3rd Column 0.4849 3rd Row 1st Column 0.756 2nd Column 0 3rd Column 0.6339 EndMatrix comma 2nd Row 1st Column sans serif upper R Subscript colon colon 21 2nd Column equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0 3rd Column 0.5 2nd Row 1st Column 0 2nd Column 0 3rd Column 0.4 3rd Row 1st Column 1 2nd Column 0 3rd Column 0.57 EndMatrix comma sans serif upper R Subscript colon colon 22 Baseline equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0.285 3rd Column 0 2nd Row 1st Column 0 2nd Column 0.378 3rd Column 0 3rd Row 1st Column 0 2nd Column 0.4849 3rd Column 0 EndMatrix comma 3rd Row 1st Column sans serif upper O Subscript colon colon 11 2nd Column equals Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 0 3rd Row 1st Column 0 2nd Column 0 3rd Column 0.5 EndMatrix comma sans serif upper O Subscript colon colon 12 Baseline equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0 3rd Column 0 2nd Row 1st Column 0 2nd Column 1 3rd Column 0 3rd Row 1st Column 0 2nd Column 0 3rd Column 0 EndMatrix comma 4th Row 1st Column sans serif upper O Subscript colon colon 21 2nd Column equals Start 3 By 3 Matrix 1st Row 1st Column 0 2nd Column 0 3rd Column 0 2nd Row 1st Column 0.04 2nd Column 0.15 3rd Column 0.285 3rd Row 1st Column 0 2nd Column 0 3rd Column 0 EndMatrix comma sans serif upper O Subscript colon colon 22 Baseline equals Start 3 By 3 Matrix 1st Row 1st Column 0.1 2nd Column 0.25 3rd Column 0.4 2nd Row 1st Column 0 2nd Column 0 3rd Column 0 3rd Row 1st Column 0.057 2nd Column 0.1825 3rd Column 0.378 EndMatrix comma EndLayoutR::11 =
⎡
⎣
0
0
0
0
1
0
0
0.8
0
⎤
⎦,
R::12 =
⎡
⎣
0.4
0
0.378
0.57
0
0.4849
0.756
0
0.6339
⎤
⎦,
R::21 =
⎡
⎣
0
0
0.5
0
0
0.4
1
0
0.57
⎤
⎦,
R::22 =
⎡
⎣
0
0.285
0
0
0.378
0
0
0.4849
0
⎤
⎦,
O::11 =
⎡
⎣
1
0
0
0
0
0
0
0
0.5
⎤
⎦,
O::12 =
⎡
⎣
0
0
0
0
1
0
0
0
0
⎤
⎦,
O::21 =
⎡
⎣
0
0
0
0.04
0.15
0.285
0
0
0
⎤
⎦, O::22 =
⎡
⎣
0.1
0.25
0.4
0
0
0
0.057
0.1825
0.378
⎤
⎦,
respectively. It is clear that psi left parenthesis sans serif upper R right parenthesis equals bold upper Rψ(R) = R and psi left parenthesis sans serif upper O right parenthesis equals bold upper Oψ(O) = O, where  R and O are the reachability 
and observability matrices deﬁned in the previous example. The second optimal TT-ranks 
of sans serif upper R overbar¯R and sans serif upper O overbar ¯O are equal to 6, as deﬁned in Corollary 3.3. Hence, the system is both reachable 
and observable.

52
3
Einstein Product-Based Dynamical Systems
3.4.2
Synthetic Data: Stability 
This example, adapted from [ 3], aims to investigate the computational efﬁciency of the TTD-
based TSVD (Corollary 3.3) with the unfolding-based TSVD (with the tensor unfoldingpsiψ) 
when determining the stability of EPDSs. Consider unforced EPDSs with random sparse 
even-order (2 k2kth-order) dynamic tensors sans serif upper A element of double struck upper R Superscript left parenthesis 2 times 2 right parenthesis times midline horizontal ellipsis Overscript k Endscripts times left parenthesis 2 times 2 right parenthesisA ∈R(2×2)×
k···×(2×2) with different orders such 
that the TTD of sans serif upper AA is provided. The results are shown in Table 3.1, indicating that the TTD-
based TSVD is signiﬁcantly faster than the matrix SVD-based TSVD in ﬁnding the largest 
U-singular value ofsans serif upper AA fork greater than or equals 10k ≥10. The computational time for the matrix SVD-based method 
increases exponentially as kk increases. 
3.4.3
Synthetic Data: TTD-Based Balanced Truncation 
This example, adapted from [ 8], aims to compare the computational time of the TTD-based 
BT (Algorithm 2) with the standard BT. Consider multiple-input and multiple-output EPDSs 
with random sparse even-order (2 k2kth-order) parameter tensors sans serif upper A element of double struck upper R Superscript left parenthesis 2 times 2 right parenthesis times midline horizontal ellipsis Overscript k Endscripts times left parenthesis 2 times 2 right parenthesisA ∈R(2×2)×
k···×(2×2), sans serif upper B element of double struck upper R Superscript left parenthesis 2 times 2 right parenthesis times midline horizontal ellipsis Overscript k Endscripts times left parenthesis 2 times 2 right parenthesisB ∈
R(2×2)×
k···×(2×2), and  sans serif upper C element of double struck upper R Superscript left parenthesis 2 times 2 right parenthesis times midline horizontal ellipsis Overscript k Endscripts times left parenthesis 2 times 2 right parenthesisC ∈R(2×2)×
k···×(2×2) with different orders such that the generalized 
TTDs of sans serif upper AA, sans serif upper BB, and  sans serif upper CC are provided. The computational time for the standard BT grows 
rapidly with the number of states, i.e., 2 Superscript k2k, as shown  in  Fig.  3.1. In contrast, the TTD-based 
BT has a bounded computational time. Furthermore, the error bounds in model reduction 
using both methods are very close to each other. Note that for the TTD-based BT, the error 
bounds are computed based on the sum of the residual Hankel singular values and thescript upper HH-normal infinity∞
norm between the two transfer functions from the standard and the TTD-based reduced 
models. This norm estimates the error term epsilon∈in (3.14) based on the triangle inequality. 
Table 3.1 Computational time (in second) comparison between the TTD-based and matrix SVD-
based TSVD in ﬁnding the largest U-singular value of sans serif upper AA. This table was adapted from [ 3] with 
permission 
Orderkk
TTD-based
Unfolding-based sigma Subscript maxσmax
Relative error
Stability 
6
0.0399
6.8551 times 10 Superscript negative 46.8551 × 10−4
0.8082
1.3738 times 10 Superscript negative 161.3738 × 10−16
Asymptotically 
stable 
8
0.0491
0.0439
0.9626
4.1523 times 10 Superscript negative 154.1523 × 10−15
Asymptotically 
stable 
10
0.0591
0.4979
0.8645
3.8527 times 10 Superscript negative 153.8527 × 10−15
Asymptotically 
stable 
12
0.0909
30.7663
0.8485
5.7573 times 10 Superscript negative 155.7573 × 10−15
Asymptotically 
stable 
14
0.2623
2115.1
0.9984
1.3566 times 10 Superscript negative 141.3566 × 10−14
Asymptotically 
stable

3.4
Applications
53
A
B
 
Fig. 3.1 Computational time in second (A) and error bound (B) comparisons between the standard 
and the TTD-based BT. The error bounds for the ﬁrst three states of the standard BT are zeros. This 
ﬁgure was redrawn from [ 8] with permission 
3.4.4
2D Heat Equations with Control 
This example was adapted from [ 8]. The heat equation is a partial differential equation 
that models the diffusion of heat in a solid medium over time. [ 31, 32]. For a domain 
upper D equals left bracket negative pi comma pi right bracket times left bracket negative pi comma pi right bracketD = [−π, π] × [−π, π] with localized point control and Dirichlet boundary conditions, 
the two-dimensional heat equation is deﬁned as 
StartLayout Enlarged left brace 1st Row StartFraction partial differential Over partial differential t EndFraction phi left parenthesis t comma bold x right parenthesis equals c squared StartFraction partial differential squared Over partial differential bold x squared EndFraction phi left parenthesis t comma bold x right parenthesis plus delta left parenthesis bold x right parenthesis u Subscript t Baseline comma bold x element of upper D 2nd Row phi left parenthesis bold x comma t right parenthesis equals 0 comma bold x element of partial differential upper D EndLayout comma
{ ∂
∂t φ(t, x) = c2 ∂2
∂x2 φ(t, x) + δ(x)ut, x ∈D
φ(x, t) = 0, x ∈∂D
,
where c greater than 0c > 0, u Subscript t Baseline element of double struck upper Rut ∈R is the control input, and delta left parenthesis bold x right parenthesisδ(x) is the Dirac delta function centered at 
zero. 
This 
example 
compares 
the 
computational 
time 
of 
the 
TTD-based 
BPOD 
(Algorithm 3) and the TTD-based ERA (Algorithm 4) with their corresponding standard 
methods on the EPDSs obtained from the discretized heat equation. To discretize the heat 
equation, a second-order central difference scheme is used to estimate the Laplacian and 
approximated the Dirac delta as a Kronecker delta function at the nearest grid point with 
unit mass. This results in EPDSs with sans serif upper A element of double struck upper R Superscript n times n times n times nA ∈Rn×n×n×n, bold upper B element of double struck upper R Superscript n times nB ∈Rn×n, and  bold upper C element of double struck upper R Superscript n times nC ∈Rn×n, where  
n equals StartFraction 2 pi Over h EndFractionn = 2π
h (assuming measurements are taken at a single discrete location and the spatial res-
olutions of grid sizes are equal tohh for both dimensions). To ensure numerical stability, the 
Courant-Friedrichs-Lewy condition StartFraction c squared Delta t Over h squared EndFraction less than 1 c2Δt
h2
< 1 (Delta tΔt is the discretization in time) is met [ 33]. 
Both generalized TTD and quantized TTD (including TTD conversion time) are compared 
for the TTD-based BPOD/ERA. The results are shown in Fig. 3.2A and C, where both TTD-
based methods are found to be more efﬁcient than their corresponding standard methods 
as the number of states, i.e., n squaredn2, becomes large. In particular, using the quantized TTD is 
even faster than using the generalized TTD when the conversion time is included. However,

54
3
Einstein Product-Based Dynamical Systems
A
B
 
C
D
 
Fig. 3.2 Computational time in second (A) and  (C) and relative error (B) and  (D) comparisons 
between the TTD-based BPOD/ERA with their corresponding standard methods. “q” stands for the 
case using quantized TTD, and “w/o” stands for the case where the conversion time to general-
ized/quantized TTD is omitted. This ﬁgure was drawn from [ 8] with permission 
for special tensors like the Laplacian that can be directly and efﬁciently constructed in the 
generalized/quantized TTD form, the generalized TTD outperforms the quantized TTD, as 
shown in the curves where the conversion time is not included. Figure 3.2B and D show 
the relative error based on the script upper HH-normal infinity∞norm between the transfer functions obtained from 
the two TTD-based methods and their corresponding standard methods. Clearly, the TTD-
based methods can obtain reduced models with similar accuracy (compared to the standard 
methods) and lower computational costs. 
3.4.5
Room Impulsive Response Dataset 
This example was adapted from [ 8]. Reducing room reverberation is of great importance 
in improving the quality of human life. This example demonstrates the application of the 
TTD-based ERA to a real-world database of binaural room impulse responses, known as 
the Aachen Impulse Response (AIR) database [ 34, 35]. The impulse response in this case 
is one-dimensional, so the standard ERA can be applied directly. However, the generalized 
Hankel matrices built from the impulse responses are very large and contain very small

3.4
Applications
55
Table 3.2 Computational time comparison (in second) between the standard and the TTD-based 
ERA for different values of kk with sampling frequency 5600. This table was adapted from [ 8] with 
permission 
Orderkk
k equals 9k = 9
k equals 10k = 10
k equals 11k = 11
k equals 12k = 12
Thresholdepsilon∈
0.9
1.2
1.5
2.4 
ERA
0.1961
0.9432
7.1086
50.6742 
TTD-based ERA
0.5075
2.2262
8.2137
10.5300 
ERA relative error 0.0890
0.0715
0.0667
0.0666 
TTD-based ERA 
relative error 
0.0929
0.0972
0.0932
0.0849 
values, making the TTD-based ERA more promising in estimating the acoustic dynamics, 
especially with the use of quantized TTD. 
The AIR database has many scenarios. The focus is on the case where the room impulse 
responses are collected by a bottom microphone with a bottom-top mock-up phone in an 
ofﬁce. A comparison is made between the computational time of the TTD-based ERA 
(Algorithm 4 from Step 4 with quantized TTD) and the standard ERA for identifying acoustic 
dynamics. The conversion time to the quantized TTD is included for the TTD-based ERA. 
To tune the threshold epsilon∈in the TTD conversion from H to sans serif upper H overbar ¯H, the number of snapshots 
r equals o equals 2 Superscript k Baseline minus 1r = o = 2k −1 is set to a positive integer kk. The results are presented in Tables 3.2 and 
3.3. In the ﬁrst case, kk is increased to allow for larger truncation thresholds epsilon∈, facilitating 
the computation of the economy-size TSVD. The TTD-based ERA shows a computational 
advantage in approximating the acoustic dynamics with low relative errors for k greater than or equals 12k ≥12, as  
shown in Table  3.2. Of course, the standard ERA can achieve lower relative errors with the 
Table 3.3 Computational time comparison (in second) between the standard and the TTD-based 
ERA for different truncation thresholds with k equals 13k = 13 and sampling frequency 12000. “# of Singular 
Values” represents the minimum number of singular values required to maintain the systems with 
relative good accuracy for the TTD-based ERA. This table was adapted from [ 8] with permission 
Threshold
epsilon equals 1∈= 1
epsilon equals 2∈= 2
epsilon equals 5∈= 5
epsilon equals 10∈= 10
# of Singular 
values 
511
297
72
41 
ERA
336.5543
336.5543
336.5543
336.5543 
TTD-based ERA
198.5078
105.8521
40.5420
17.3069 
ERA Relative 
lrror 
0.0492
0.0835
0.1252
0.1282 
TTD-based ERA 
relative error 
0.0721
0.0887
0.1086
0.1215

56
3
Einstein Product-Based Dynamical Systems
same number of singular values retained as in the TTD-based ERA. In the second case, 
when k equals 13k = 13, larger truncation thresholds epsilon∈enable faster computation and result in similar 
relative errors, see Table 3.3. 
References 
1. Mark, Rogers, Lei Li, and Stuart J Russell. 2013. Multilinear dynamical systems for tensor time 
series. Advances in Neural Information Processing Systems 26. 
2. Amit, Surana, Geoff Patterson, and Indika Rajapakse. 2016. Dynamic tensor time series modeling 
and analysis. In 2016 IEEE 55th conference on decision and control (CDC), 1637–1642. IEEE. 
3. Can, Chen, Amit Surana, Anthony M Bloch, and Indika Rajapakse. 2021. Multilinear control 
systems theory. SIAM Journal on Control and Optimization 59(1):749–776. 
4. Can, Chen, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2019. Multilinear time invariant 
system theory. In 2019 proceedings of the conference on control and its applications, 118–125. 
SIAM. 
5. Ding, Wenwen, Kai Liu, Evgeny Belyaev, and Fei Cheng. 2018. Tensor-based linear dynamical 
systems for action recognition from 3d skeletons. Pattern Recognition 77: 75–86. 
6. Patrick Gelß. 2017. The tensor-train format and its applications: Modeling and analysis of 
chemical reaction networks, catalytic processes, ﬂuid ﬂows, and Brownian dynamics. PhD thesis. 
7. Ivan, V. Oseledets. 2010. Approximation of2 Superscript d Baseline times 2 Superscript d2d × 2d matrices using tensor decomposition. SIAM 
Journal on Matrix Analysis and Applications 31(4):2130–2145. 
8. Can, Chen, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2019. Data-driven model reduc-
tion for multilinear control systems via tensor trains. arXiv:1912.03569. 
9. De Lathauwer, Lieven, Bart De Moor, and Joos Vandewalle. 2000. A multilinear singular value 
decomposition. SIAM Journal on Matrix Analysis and Applications 21 (4): 1253–1278. 
10. De Silva, Vin, and Lek-Heng. Lim. 2008. Tensor rank and the ill-posedness of the best low-rank 
approximation problem. SIAM Journal on Matrix Analysis and Applications 30 (3): 1084–1127. 
11. Moore, Bruce. 1981. Principal component analysis in linear systems: Controllability, observabil-
ity, and model reduction. IEEE Transactions on Automatic Control 26 (1): 17–32. 
12. Serkan, Gugercin and Athanasios C Antoulas. 2004. A survey of model reduction by balanced 
truncation and some new results. International Journal of Control 77(8):748–766. 
13. Clarence, W. Rowley. 2005. Model reduction for ﬂuids, using balanced proper orthogonal decom-
position. International Journal of Bifurcation and Chaos 15(03):997–1013. 
14. Miloš, Ilak and Clarence W. Rowley. 2008. Modeling of transitional channel ﬂow using balanced 
proper orthogonal decomposition. Physics of Fluids 20(3):034103. 
15. Jer-Nan, Juang, Richard S. Pappa. 1985. An eigensystem realization algorithm for modal param-
eter identiﬁcation and model reduction. Journal of Guidance, Control, and Dynamics 8(5):620– 
627. 
16. Richard, S. Pappa, Kenny B. Elliott, and Axel Schenk. 1993. Consistent-mode indicator for the 
eigensystem realization algorithm. Journal of Guidance, Control, and Dynamics 16(5):852–858. 
17. Pernebo, Lars, and Leonard Silverman. 1982. Model reduction via balanced state space repre-
sentations. IEEE Transactions on Automatic Control 27 (2): 382–387. 
18. Smith, R.A. 1968. Matrix equation xa+bx=c. SIAM Journal on Applied Mathematics 16 (1): 
198–201. 
19. Penzl, Thilo. 1999. A cyclic low-rank smith method for large sparse lyapunov equations. SIAM 
Journal on Scientiﬁc Computing 21 (4): 1401–1418.

References
57
20. Serkan, Gugercin, Danny C. Sorensen, and Athanasios C. Antoulas. 2003. A modiﬁed low-rank 
smith method for large-scale lyapunov equations. Numerical Algorithms, 32(1):27–55. 
21. Garrett, Birkhoff, Richard S. Varga, and David Young. 1962. Alternating direction implicit meth-
ods. In Advances in computers, vol. 3, 189–273. Elsevier. 
22. Eugene, L. Wachspress. 1988. Iterative solution of the lyapunov matrix equation. Applied Math-
ematics Letters 1(1):87–90. 
23. Namiki, Takefumi. 1999. A new FDTD algorithm based on alternating-direction implicit method. 
IEEE Transactions on Microwave Theory and Techniques 47 (10): 2003–2007. 
24. Schollwöck, Ulrich. 2005. The density-matrix renormalization group. Reviews of Modern Physics 
77 (1): 259. 
25. Chan, Garnet Kin-Lic, and Sandeep Sharma. 2011. The density matrix renormalization group in 
quantum chemistry. Annual Review of Physical Chemistry 62 (1): 465–481. 
26. Ivan, V. Oseledets and Sergey V. Dolgov. 2012. Solution of linear systems and matrix inversion 
in the tt-format. SIAM Journal on Scientiﬁc Computing 34(5):A2718–A2739. 
27. Michael, Nip, Joao P. Hespanha, and Mustafa Khammash. 2013. Direct numerical solution of 
algebraic lyapunov equations for large-scale systems using quantized tensor trains. In 52nd IEEE 
conference on decision and control, 1950–1957. IEEE. 
28. Sanjay, Lall, Jerrold E. Marsden, and Sonja Glavaški. 1999. Empirical model reduction of con-
trolled nonlinear systems. IFAC Proceedings Volumes 32(2):2598–2603. 
29. Sanjay, Lall, Jerrold E. Marsden, and Sonja Glavaški. 2002. A subspace approach to balanced 
truncation for model reduction of nonlinear control systems. International Journal of Robust and 
Nonlinear Control: IFAC-Afﬁliated Journal 12(6):519–535. 
30. Zhanhua, Ma, Sunil Ahuja, and Clarence W. Rowley. 2011. Reduced-order models for control 
of ﬂuids using the eigensystem realization algorithm. Theoretical and Computational Fluid 
Dynamics 25(1):233–247. 
31. El-Maati, Ouhabaz. 2009. Analysis of heat equations on domains (lms-31). In Analysis of Heat 
Equations on Domains (LMS-31). Princeton University Press. 
32. Zuazua, Enrique. 2006. Control and numerical approximation of the wave and heat equations. 
In International Congress of Mathematicians, Madrid, Spain 3: 1389–1417. 
33. Carlos. A. De Moura and Carlos S. Kubrusly. 2013. The courant–friedrichs–lewy (cﬂ) condition. 
AMC 10(12). 
34. Marco, Jeub, Magnus Schafer, and Peter Vary. 2009. A binaural room impulse response database 
for the evaluation of dereverberation algorithms. In 2009 16th international conference on digital 
signal processing, 1–5. IEEE. 
35. Jeub, Marco, Magnus Schäfer, Hauke Krüger, Christoph Nelke, Christophe Beaugeant, and 
Peter Vary. 2010. Do we need dereverberation for hand-held telephony? In Proceedings of the 
international congress on acoustics (ICA), Sydney, Australia.

4
Tensor Vector Product-Based Dynamical Systems 
Abstract 
The tensor vector product-based dynamical system (TVPDS) representation was pio-
neered in 2021 by Chen et al. [IEEE Trans. Netw. Sci. Eng.] as a novel framework for 
characterizing the multidimensional state dynamics of hypergraphs. Hypergraphs are 
generalizations of graphs where hyperedges can connect more than two nodes. The evo-
lution of a TVPDS is characterized by the tensor vector product between a dynamic 
tensor and a state vector, which in fact can be equivalently reformulated in the form 
of homogeneous polynomial dynamical systems. By utilizing polynomial systems the-
ory and tensor algebra, the system-theoretic properties of TVPDSs, such as stability, 
controllability, and observability, are investigated. In particular, the controllability and 
observability of hypergraphs are explored through the lens of the TVPDS representation. 
4.1
Overview 
Both the TPDS representation (2.1) and the EPDS representation (3.1) are tensor-based 
dynamical systems that can be transformed into LDSs through tensor unfolding. This trans-
formation allows for the application of well-established linear system analysis techniques to 
tensor-based dynamical systems. On the other hand, tensor algebra has emerged as a power-
ful tool for modeling and simulating nonlinear dynamics [ 1– 4]. As mentioned earlier, every 
homogeneous polynomial can be uniquely represented by a supersymmetric tensor through 
tensor vector products [ 5– 7]. Therefore, given a kkth-order nn-dimensional supersymmetric 
tensor sans serif upper T element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nT ∈Rn×n×
k···×n, the following product: 
sans serif upper T times Subscript 1 Baseline bold v times Subscript 2 Baseline bold v times Subscript 3 Baseline midline horizontal ellipsis times Subscript k minus 1 Baseline bold v equals sans serif upper T bold v Superscript k minus 1 Baseline element of double struck upper R Superscript nT ×1 v ×2 v ×3 · · · ×k−1 v = Tvk−1 ∈Rn
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_4 
59

60
4
Tensor Vector Product-Based Dynamical Systems
belongs to the family of homogeneous polynomial systems. Moreover, ifsans serif upper TT is only symmetric 
with respect to the ﬁrst k minus 1k −1 modes, referred to as almost symmetric, the above product 
spans the entire space of homogeneous polynomial systems [ 2]. 
Consequently, the continuous-time tensor vector product-based dynamical system 
(TVPDS) can be deﬁned as 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals sans serif upper A bold x left parenthesis t right parenthesis Superscript k minus 1 Baseline comma˙x(t) = Ax(t)k−1,
(4.1) 
which is equivalent to an nn-dimensional homogeneous polynomial dynamical system of 
degree k minus 1k −1 for almost symmetric dynamic tensor sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n. The TVPDS represen-
tation serves as a generalization of the LDS model and reduces it as a special case when 
k equals 2k = 2. Signiﬁcantly, this representation offers a novel framework to study homogeneous 
polynomial dynamical systems by leveraging tensor algebra, such as tensor eigenvalues or 
tensor decompositions. In addition, the TVPDS (4.1) possesses an unfolded form, i.e., 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals bold upper A Subscript left parenthesis k right parenthesis Baseline left parenthesis bold x left parenthesis t right parenthesis circled times bold x left parenthesis t right parenthesis circled times midline horizontal ellipsis Overscript k minus 1 Endscripts circled times bold x left parenthesis t right parenthesis right parenthesis comma˙x(t) = A(k)
(
x(t) ⊗x(t)⊗
k−1
· · · ⊗x(t)
)
,
(4.2) 
where bold upper A Subscript left parenthesis k right parenthesis Baseline element of double struck upper R Superscript n times n Super Superscript k minus 1A(k) ∈Rn×nk−1 is the kk-mode matricization of A. The discrete-time version of 
TVPDSs can also be formulated similarly. 
TVPDSs can be naturally applied to describe the dynamics of hypergraphs, a general-
ization of graphs where hyperedges can connect more than two nodes [ 8], by deﬁning the 
dynamic tensor A as the adjacency tensor of the hypergraph [ 1]. This capability stems from 
the inherent ability of TVPDSs, namely homogeneous polynomial dynamical systems, to 
effectively capture higher-order interactions or correlations, making them well-suited for 
modeling a diverse range of real-world systems [ 1, 9– 13]. For instance, Chen et al. [ 1] 
employed TVPDSs to model higher-order interactions in mouse neuronal networks, which 
offers a unique insight in understanding the functionality of mouse brains. Additionally, 
Grilli et al. [ 10] utilized TVPDSs to capture higher-order interactions among communities 
in complex ecological systems and demonstrated that higher-order interactions have strong 
effects on the stability of ecological communities. As a matter of fact, every polynomial 
dynamical system can be homogenized by introducing additional variables, which broadens 
the applicability of TVPDSs. 
However, the nonlinearity inherent in TVPDSs poses challenges in analyzing system-
theoretic properties and developing optimal control strategies [ 2, 14– 16]. Local analysis 
via lineraization remains the most common approach for analyzing TVPDSs [ 17, 18]. This 
chapter delves into the recent advancements in system-theoretic properties of TVPDSs, 
encompassing stability, controllability, and observability, by employing polynomial systems 
theory and tensor algebra. Furthermore, the concepts of controllability and observability are 
applied in the context of hypergraph dynamics to identify the minimum number of driver and 
observable nodes for achieving hypergraph controllability and observability, respectively. 
The content of this chapter is mainly based on the work of [ 1, 2, 19, 20].

4.2
System-Theoretic Properties:Stability
61
4.2
System-Theoretic Properties: Stability 
The study of stability of TVPDSs, namely homogeneous polynomial dynamical systems, 
has been an active research area for many decades [ 2, 14– 16]. Recently, Ali and Khadir [ 16] 
proved that a homogeneous polynomial dynamical system is asymptotically stable if and 
only if it admits a rational Lyapunov function. This section discusses the internal stability of 
a subclass of TVPDSs with odeco dynamic tensors (see Chap. 1 for the deﬁnition of odeco 
tensors). These systems are referred to as odeco TVPDSs. 
4.2.1
Explicit Solutions 
The explicit solution of an odeco TVPDS is achievable by leveraging the orthogonal decom-
position of its dynamic tensor A. 
Proposition 4.1 ([ 2]) Suppose that the dynamic tensor sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n is odeco with the 
following orthogonal decomposition: 
sans serif upper A equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline bold v Subscript j Baseline degrees bold v Subscript j Baseline degrees midline horizontal ellipsis Overscript k Endscripts degrees bold v Subscript j Baseline periodA =
n
∑
j=1
λ jv j ◦v j◦
k· · · ◦v j.
Let the initial conditionbold x Subscript 0 Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript jx0 = ∑n
j=1 c jv j (sincebold v Subscript jv j are orthonormal). Given the initial con-
dition bold x Subscript 0x0, the explicit solution of the odeco TVDPS (4.1) can be computed as 
bold x left parenthesis t right parenthesis equals sigma summation Underscript j equals 1 Overscript n Endscripts left parenthesis 1 minus left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline t right parenthesis Superscript minus StartFraction 1 Over k minus 2 EndFraction Baseline c Subscript j Baseline bold v Subscript j Baseline commax(t) =
n
∑
j=1
(
1 −(k −2)λ jck−2
j
t
)−
1
k−2 c jv j,
(4.3) 
where lamda Subscript jλ j are the Z-eigenvalues of A with the corresponding Z-eigenvector bold v Subscript jv j. 
Proof First, let bold x left parenthesis t right parenthesis equals sigma summation Underscript j equals 1 Overscript n Endscripts alpha Subscript j Baseline left parenthesis t right parenthesis bold v Subscript j Baselinex(t) = ∑n
j=1 α j(t)v j with alpha Subscript j Baseline left parenthesis 0 right parenthesis equals c Subscript jα j(0) = c j. Based on the property of tensor 
vector products, it can be shown that 
StartLayout 1st Row 1st Column sigma summation Underscript j equals 1 Overscript n Endscripts ModifyingAbove alpha With dot Subscript j Baseline left parenthesis t right parenthesis bold v Subscript j 2nd Column equals left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline bold v Subscript j Baseline degrees bold v Subscript j Baseline degrees midline horizontal ellipsis Overscript k Endscripts degrees bold v Subscript j Baseline right parenthesis times Subscript 1 Baseline left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts alpha Subscript j Baseline left parenthesis t right parenthesis bold v Subscript j Baseline right parenthesis times Subscript 2 Baseline midline horizontal ellipsis times Subscript k minus 1 Baseline left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts alpha Subscript j Baseline left parenthesis t right parenthesis bold v Subscript j Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline left angle bracket bold v Subscript j Baseline comma sigma summation Underscript i equals 1 Overscript n Endscripts alpha Subscript i Baseline left parenthesis t right parenthesis bold v Subscript i Baseline right angle bracket Superscript k minus 1 Baseline bold v Subscript j Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline alpha Subscript j Baseline left parenthesis t right parenthesis Superscript k minus 1 Baseline bold v Subscript j EndLayout
n
∑
j=1
˙α j(t)v j =
(
n
∑
j=1
λ jv j ◦v j◦
k· · · ◦v j
)
×1
(
n
∑
j=1
α j(t)v j
)
×2 · · · ×k−1
(
n
∑
j=1
α j(t)v j
)
=
n
∑
j=1
λ j
/
v j,
n
∑
i=1
αi(t)vi
\k−1
v j =
n
∑
j=1
λ jα j(t)k−1v j
Therefore, the TVPDS can be simpliﬁed into nn one-dimensional nonlinear dynamical sys-
tems, i.e., 
ModifyingAbove alpha With dot Subscript j Baseline left parenthesis t right parenthesis equals lamda Subscript j Baseline alpha Subscript j Baseline left parenthesis t right parenthesis Superscript k minus 1˙α j(t) = λ jα j(t)k−1

62
4
Tensor Vector Product-Based Dynamical Systems
for j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n. By the method of separation of variables, the solutions of alpha Subscript j Baseline left parenthesis t right parenthesisα j(t) with 
the initial conditions alpha Subscript j Baseline left parenthesis 0 right parenthesis equals c Subscript jα j(0) = c j can be written as 
alpha Subscript j Baseline left parenthesis t right parenthesis equals left parenthesis 1 minus left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline t right parenthesis Superscript minus StartFraction 1 Over k minus 2 EndFraction Baseline periodα j(t) =
(
1 −(k −2)λ jck−2
j
t
)−
1
k−2 .
Hence, the result follows immediately.
⬜
Clearly, if lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline greater than 0λ jck−2
j
> 0 for some j j, alpha Subscript j Baseline left parenthesis t right parenthesisα j(t) will have singularity points at t equals StartFraction 1 Over left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline EndFractiont =
1
(k−2)λ jck−2
j
. 
Thus, the domain of the solution (4.3) is given  by  
upper D equals left bracket 0 comma min Underscript upper S Endscripts StartFraction 1 Over left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline EndFraction right parenthesis commaD =
[
0, min
S
1
(k −2)λ jck−2
j
)
,
and the system blows up within a ﬁnite time. If lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline less than or equals 0λ jck−2
j
≤0 for all j j, the  domain of the  
solution (4.3) isleft bracket 0 comma normal infinity right parenthesis[0, ∞). Furthermore, whenk equals 2k = 2, the explicit solution (4.3) reduces to the 
classical solutions of LDSs, i.e., 
StartLayout 1st Row 1st Column limit Underscript k right arrow 2 Endscripts bold x left parenthesis t right parenthesis 2nd Column equals limit Underscript k right arrow 2 Endscripts sigma summation Underscript j equals 1 Overscript n Endscripts left parenthesis 1 minus left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline t right parenthesis Superscript minus StartFraction 1 Over k minus 2 EndFraction Baseline c Subscript j Baseline bold v Subscript j Baseline 2nd Row 1st Column Blank 2nd Column equals limit Underscript k overTilde right arrow normal infinity Endscripts sigma summation Underscript j equals 1 Overscript n Endscripts left parenthesis 1 plus StartFraction lamda Subscript j Baseline t Over k overTilde EndFraction right parenthesis Superscript k overTilde Baseline c Subscript j Baseline bold v Subscript j Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts exp left brace lamda Subscript j Baseline t right brace c Subscript j Baseline bold v Subscript j Baseline comma EndLayout lim
k→2 x(t) = lim
k→2
n
∑
j=1
(
1 −(k −2)λ jck−2
j
t
)−
1
k−2 c jv j
= lim
˜k→∞
n
∑
j=1
(
1 + λ jt
˜k
)˜k
c jv j =
n
∑
j=1
exp {λ jt}c jv j,
wherelamda Subscript jλ j become the eigenvalues of the dynamic matrix with the corresponding eigenvectors 
bold v Subscript jv j. 
4.2.2
Stability 
The stability properties of odeco TVPDSs can be obtained directly from the explicit solution 
formula (4.3). First, it is essential to understand the number of equilibrium points of an odeco 
TVPDS. 
Proposition 4.2 ([ 2]) The odeco TVDPS (4.1) has a unique equilibrium point at the origin 
if lamda Subscript j Baseline not equals 0λ j /= 0 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n and has inﬁnitely many equilibrium points if lamda Subscript j Baseline equals 0λ j = 0 for 
some j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n, where lamda Subscript jλ j are the Z-eigenvalues from the orthogonal decomposition 
of A. 
Proof Suppose that bold x Subscript e Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript jxe = ∑n
j=1 c jv j is an equilibrium point (bold v Subscript jv j are the corresponding 
Z-eignvectors). Based on the property of tensor vector products, it can be shown that

4.2
System-Theoretic Properties:Stability
63
sans serif upper A bold x Subscript e Superscript k minus 1 Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Baseline c Subscript j Superscript k minus 1 Baseline bold v Subscript j Baseline equals bold 0 periodAxk−1
e
=
n
∑
j=1
λ jck−1
j
v j = 0.
Therefore, the result follows immediately.
⬜
The number of equilibrium points of an odeco TVPDS is similar to that of LDSs. Thus, it is 
necessary to exclusively focus on the equilibrium point at the origin because the behaviors of 
other equilibrium points will be the same iflamda Subscript j Baseline equals 0λ j = 0 for somej j. Analogous to linear stability, 
the equilibrium point bold x Subscript e Baseline equals bold 0xe = 0 of an odeco TVPDS is called stable if parallel to bold x left parenthesis t right parenthesis parallel to less than or equals beta parallel to bold x Subscript 0 Baseline parallel to||x(t)|| ≤β||x0|| given 
the initial condition bold x Subscript 0x0 and some beta greater than 0β > 0, asymptotically stable if limit Underscript t right arrow normal infinity Endscripts parallel to bold x left parenthesis t right parenthesis parallel to equals 0limt→∞||x(t)|| = 0, and  
unstable iflimit Underscript t right arrow s Endscripts parallel to bold x left parenthesis t right parenthesis parallel to equals normal infinitylimt→s ||x(t)|| = ∞fors greater than 0s > 0. This instability deﬁnition is also known as ﬁnite-
time blow-up in the nonlinear system literature [ 21]. 
Proposition 4.3 ([ 2]) Suppose that the initial conditionbold x Subscript 0 Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript jx0 = ∑n
j=1 c jv j. The equilibrium 
point bold x Subscript e Baseline equals bold 0xe = 0 of the odeco TVPDS (4.1) is:  
• stable if and only if lamda Subscript j Baseline c Subscript j Superscript k minus 1 Baseline less than or equals 0λ jck−1
j
≤0 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• asymptotically stable if and only if lamda Subscript j Baseline c Subscript j Superscript k minus 1 Baseline less than 0λ jck−1
j
< 0 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• unstable if and only if lamda Subscript j Baseline c Subscript j Superscript k minus 1 Baseline greater than 0λ jck−1
j
> 0 for some j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n, 
where lamda Subscript jλ j are the Z-eigenvalues from the orthogonal decomposition of A with the corre-
sponding Z-eigenvector bold v Subscript jv j. 
Proof The results follow immediately based on the explicit solution formula (4.3) of odeco 
TVPDSs.
⬜
When kk is even, the results can be further simpliﬁed. 
Corollary 4.1 ([ 2]) Suppose that kk is even. The equilibrium point bold x Subscript e Baseline equals bold 0xe = 0 of the odeco 
TVPDS (4.1) is:  
• stable if and only if lamda Subscript j Baseline less than or equals 0λ j ≤0 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• asymptotically stable if and only if lamda Subscript j Baseline less than 0λ j < 0 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• unstable if and only if lamda Subscript j Baseline greater than 0λ j > 0 for some j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n, 
where lamda Subscript jλ j are the Z-eigenvalues from the orthogonal decomposition of A. 
Proof The results follow immediately from Proposition 4.3.
⬜

64
4
Tensor Vector Product-Based Dynamical Systems
If k equals 2k = 2, the above conditions reduce to the classical linear stability conditions. In 
addition, the region of attraction of the odeco TVPDS (4.1) can be obtained based on 
Proposition 4.3, which is computed as 
upper R equals StartSet bold x colon lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline less than 0 where bold x equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript j Baseline EndSet periodR =
{
x : λ jck−2
j
< 0 where x =
n
∑
j=1
c jv j
}
.
(4.4) 
Additionally, as previously mentioned, U-eigenvalues are the generalization of Z-eigenvalues 
for even-order supersymmetric tensors. Therefore, U-eigenvalues are utilized to approximate 
the maximum Z-eigenvalue of an even-order tensor. 
Lemma 4.1 ([ 19]) Suppose that sans serif upper A element of double struck upper R Superscript left parenthesis n times n right parenthesis times midline horizontal ellipsis Overscript k Endscripts times left parenthesis n times n right parenthesisA ∈R(n×n)×
k···×(n×n) is an even-order (i.e., 2 k2kth-order) 
supersymmetric tensor. The largest Z-eigenvaluelamda Subscript maxλmax of A is upper bounded by the largest 
U-eigenvalue mu Subscript maxμmax of A. 
Proof The result can be obtained directly from the two optimization problems (1.20) and  
(1.22).
⬜
Corollary 4.2 ([ 2]) Suppose that kk is even. The equilibrium point bold x Subscript e Baseline equals bold 0xe = 0 of the odeco 
TVPDS (4.1) is:  
• stable if mu Subscript max Baseline less than or equals 0μmax ≤0; 
• asymptotically stable if mu Subscript max Baseline less than 0μmax < 0, 
where mu Subscript maxμmax is the largest U-eigenvalue of A. 
Proof The Z-eigenvalues from the orthogonal decomposition of A do not include all the Z-
eigenvalues of A. Therefore,lamda 1 less than or equals lamda Subscript max Baseline less than or equals mu Subscript maxλ1 ≤λmax ≤μmax. Then the results follow immediately from 
Corollary 4.1.
⬜
4.2.3
Discrete-Time Case 
Similarly to continuous-time odeco TVPDSs, explicit solutions and stability properties can 
also be derived for discrete-time odeco TVPDSs, i.e., 
bold x Subscript t plus 1 Baseline equals sans serif upper A bold x Subscript t Superscript k minus 1 Baseline commaxt+1 = Axk−1
t
,
(4.5) 
where sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n is odeco.

4.2
System-Theoretic Properties:Stability
65
Proposition 4.4 ([ 19]) Suppose sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n is odeco as in Proposition 4.1. Let  the  
initial conditionbold x Subscript 0 Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript jx0 = ∑n
j=1 c jv j. Given the initial conditionbold x Subscript 0x0, the explicit solution of the 
discrete-time odeco TVPDS (4.5) at time qq, can be computed as 
bold x Subscript q Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts lamda Subscript j Superscript alpha Baseline c Subscript j Superscript beta Baseline bold v Subscript j Baseline commaxq =
n
∑
j=1
λα
j cβ
j v j,
(4.6) 
where alpha equals sigma summation Underscript j equals 0 Overscript q minus 1 Endscripts left parenthesis k minus 1 right parenthesis Superscript j Baseline equals StartFraction left parenthesis k minus 1 right parenthesis Superscript q Baseline minus 1 Over k minus 2 EndFractionα = ∑q−1
j=0(k −1) j = (k−1)q−1
k−2
and beta equals left parenthesis k minus 1 right parenthesis Superscript qβ = (k −1)q. 
Proposition 4.5 ([ 19]) Suppose that the initial conditionbold x Subscript 0 Baseline equals sigma summation Underscript j equals 1 Overscript n Endscripts c Subscript j Baseline bold v Subscript jx0 = ∑n
j=1 c jv j. The equilibrium 
point bold x Subscript e Baseline equals bold 0xe = 0 of the discrete-time odeco TVPDS (4.5) is:  
• stable if and only if StartAbsoluteValue c Subscript j Baseline lamda Subscript j Superscript StartFraction 1 Over k minus 2 EndFraction Baseline EndAbsoluteValue less than or equals 1|c jλ
1
k−2
j
| ≤1 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• asymptotically stable if and only if StartAbsoluteValue c Subscript j Baseline lamda Subscript j Superscript StartFraction 1 Over k minus 2 EndFraction Baseline EndAbsoluteValue less than 1|c jλ
1
k−2
j
| < 1 for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• unstable if and only if StartAbsoluteValue c Subscript j Baseline lamda Subscript j Superscript StartFraction 1 Over k minus 2 EndFraction Baseline EndAbsoluteValue greater than 1|c jλ
1
k−2
j
| > 1 for some j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n, 
where lamda Subscript jλ j are the Z-eigenvalues from the orthogonal decomposition of A with the corre-
sponding Z-eigenvectors bold v Subscript jv j. 
Propositions 4.4 and 4.5 can be proven in a similar manner to Propositions 4.1 and 4.3, 
respectively, by exploiting the orthogonal structure of the dynamic tensor. 
4.2.4
Constant Control 
Consider the odeco TVPDS (4.1) with constant control inputs, i.e., 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals sans serif upper A bold x left parenthesis t right parenthesis Superscript k minus 1 Baseline plus bold b comma˙x(t) = Ax(t)k−1 + b,
(4.7) 
where bold b element of double struck upper R Superscript nb ∈Rn is a constant input vector. The constant control problem arises in numerous 
dynamical systems and control applications. For instance, in population dynamics, constant 
inputs can represent migration or supply rates for different population species [ 22, 23]. 
Additionally, constant inputs have been effectively used in model predictive control for 
stable plants based on linear models [ 24, 25]. The complete solution of the odeco TVPDS 
with constant control inputs (4.7) can be obtained implicitly using the Gauss hypergeometric 
functions. 
Proposition 4.6 ([ 2]) Suppose thatbold x left parenthesis t right parenthesis equals sigma summation Underscript j equals 1 Overscript n Endscripts alpha Subscript j Baseline left parenthesis t right parenthesis bold v Subscript j Baselinex(t) = ∑n
j=1 α j(t)v j with initial conditionalpha Subscript j Baseline left parenthesis 0 right parenthesis equals c Subscript jα j(0) = c j. 
For the odeco TVPDS with constant control inputs (4.7), the coefﬁcient functionsalpha Subscript j Baseline left parenthesis t right parenthesisα j(t) can 
be solved implicitly by

66
4
Tensor Vector Product-Based Dynamical Systems
t equals minus StartStartFraction g left parenthesis StartFraction k minus 2 Over k minus 1 EndFraction comma minus StartFraction b overTilde Subscript j Baseline Over lamda Subscript r Baseline j alpha Subscript j Baseline left parenthesis t right parenthesis Superscript k minus 1 Baseline EndFraction right parenthesis OverOver left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline alpha Subscript j Baseline left parenthesis t right parenthesis Superscript k minus 2 Baseline EndEndFraction plus StartStartFraction g left parenthesis StartFraction k minus 2 Over k minus 1 EndFraction comma minus StartFraction b overTilde Subscript j Baseline Over lamda Subscript j Baseline c Subscript j Superscript k minus 1 Baseline EndFraction right parenthesis OverOver left parenthesis k minus 2 right parenthesis lamda Subscript j Baseline c Subscript j Superscript k minus 2 Baseline EndEndFraction commat = −
g
(
k−2
k−1, −
˜b j
λr jα j(t)k−1
)
(k −2)λ jα j(t)k−2
+
g
(
k−2
k−1, −
˜b j
λ jck−1
j
)
(k −2)λ jck−2
j
,
(4.8) 
where g left parenthesis dot comma dot right parenthesisg(·, ·) is a speciﬁed Gauss hypergeometric function [26, 27] deﬁned as 
g left parenthesis a comma z right parenthesis equals Subscript 2 Baseline upper F 1 left parenthesis 1 comma a semicolon a plus 1 semicolon z right parenthesis equals a sigma summation Underscript m equals 0 Overscript normal infinity Endscripts StartFraction z Superscript m Baseline Over a plus m EndFraction commag(a, z) = 2F1(1, a; a + 1; z) = a
∞
∑
m=0
zm
a + m ,
lamda Subscript jλ j are the Z-eigenvalues from the orthogonal decomposition of A with the corresponding 
Z-eigenvectorsbold v Subscript jv j, andb overTilde Subscript j˜b j are thej jth entries of the vectorbold upper V Superscript down tack Baseline bold bVTb (V contains all the vector of 
bold v Subscript jv j). 
Proof Similar to Proposition 4.1, the TVPDS with constant control input (4.7) can be 
rewritten into nn one-dimensional systems, i.e., 
ModifyingAbove alpha With dot Subscript j Baseline left parenthesis t right parenthesis equals lamda Subscript j Baseline alpha Subscript j Baseline left parenthesis t right parenthesis Superscript k minus 1 Baseline plus b overTilde Subscript j Baseline period˙α j(t) = λ jα j(t)k−1 + ˜b j.
The one-dimensional differential equations can be solved implicitly by using the Gauss 
hypergeometric functions. By the method of separation of variables, the solutions of alpha Subscript j Baseline left parenthesis t right parenthesisα j(t)
with initial condition alpha Subscript j Baseline left parenthesis 0 right parenthesis equals c Subscript jα j(0) = c j can be solved as (4.8).
⬜
The one-dimensional differential equations in the proof above fall under a speciﬁc form 
of Chini’s equations [ 28]. When k equals 3k = 3, they are known as Riccati equations [ 29]. Upon 
obtaining the implicit equations (4.8), one can employ any nonlinear solver to determine 
the values of alpha Subscript j Baseline left parenthesis t right parenthesisα j(t) for a speciﬁc time tt, allowing us to recover the complete solution of the 
odeco TVPDS with constant control inputs (4.7). The stability properties follow as well. 
Whileg left parenthesis a comma z right parenthesisg(a, z) is only deﬁned for StartAbsoluteValue z EndAbsoluteValue less than 1|z| < 1, it can be analytically continued along any path in 
the complex plane that avoids the branch points of one and inﬁnity [ 30]. 
4.2.5
Generalization 
This subsection aims to explore the stability properties of more general TVPDSs with almost 
symmetric dynamic tensors (i.e., arbitrary homogeneous polynomial dynamical systems) 
using linear transformations. Since A is almost symmetric, a CPD of A can be computed as 
sans serif upper A equals sigma summation Underscript j equals 1 Overscript r Endscripts ModifyingAbove bold v Subscript j Baseline degrees bold v Subscript j Baseline degrees ellipsis degrees bold v Subscript j Baseline With top brace Overscript k minus 1 Endscripts degrees bold u Subscript j Baseline periodA =
r
∑
j=1
k−1
~
~~
~
v j ◦v j ◦· · · ◦v j ◦u j.
(4.9)

4.2
System-Theoretic Properties:Stability
67
The weightslamda Subscript jλ j are omitted here. The objective is to create a linear transformationbold upper P element of double struck upper R Superscript n times nP ∈Rn×n
that can convert the TVPDS (4.1) with an almost symmetric dynamic tensor A into an odeco 
TVPDS. 
Proposition 4.7 ([ 2]) Suppose thatsans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n has a CPD of the form (4.9) withr equals nr = n. 
If there exist an invertible matrix bold upper P element of double struck upper R Superscript n times nP ∈Rn×n and a diagonal matrix bold upper Lamda element of double struck upper R Superscript n times nɅ ∈Rn×n such that 
bold upper P Superscript down tack Baseline bold upper V equals bold upper P Superscript negative 1 Baseline bold upper U bold upper Lamda Superscript negative 1PTV = P−1UɅ−1 andbold upper P Superscript down tack Baseline bold upper VPTVis an orthogonal matrix wherebold upper V element of double struck upper R Superscript n times nV ∈Rn×n andbold upper U element of double struck upper R Superscript n times nU ∈Rn×n contain 
all the vectors of bold v Subscript rvr and bold u Subscript rur, respectively, the TVPDS (4.1) can be transformed to an odeco 
TVPDS with the transformation matrix P. 
Proof Suppose thatbold y left parenthesis t right parenthesis equals bold upper P Superscript negative 1 Baseline bold x left parenthesis t right parenthesisy(t) = P−1x(t). Based on the property of tensor vector products, it can 
be shown that 
StartLayout 1st Row 1st Column ModifyingAbove bold y With dot left parenthesis t right parenthesis 2nd Column equals bold upper P Superscript negative 1 Baseline left parenthesis sans serif upper A bold x left parenthesis t right parenthesis Superscript k minus 1 Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals bold upper P Superscript negative 1 Baseline left parenthesis left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts ModifyingAbove bold v Subscript j Baseline degrees bold v Subscript j Baseline degrees midline horizontal ellipsis degrees bold v Subscript j Baseline With top brace Overscript k minus 1 Endscripts degrees bold u Subscript j Baseline right parenthesis left parenthesis bold upper P bold y left parenthesis t right parenthesis right parenthesis Superscript k minus 1 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts bold upper P Superscript down tack Baseline ModifyingAbove bold v Subscript j Baseline degrees bold upper P Superscript down tack Baseline bold v Subscript j Baseline degrees midline horizontal ellipsis degrees bold upper P Superscript down tack Baseline bold v Subscript j Baseline With top brace Overscript k minus 1 Endscripts degrees bold upper P Superscript negative 1 Baseline bold u Subscript j Baseline right parenthesis bold y left parenthesis t right parenthesis Superscript k minus 1 Baseline period EndLayout˙y(t) = P−1(
Ax(t)k−1)
= P−1
((
n
∑
j=1
k−1
~
~~
~
v j ◦v j ◦· · · ◦v j ◦u j
)(
Py(t)
)k−1)
=
(
n
∑
j=1
PT
k−1
~
~~
~
v j ◦PTv j ◦· · · ◦PTv j ◦P−1u j
)
y(t)k−1.
Hence, if bold upper P Superscript down tack Baseline bold upper V equals bold upper P Superscript negative 1 Baseline bold upper U bold upper Lamda Superscript negative 1PTV = P−1UɅ−1, the above differential equation can be rewritten as 
StartLayout 1st Row ModifyingAbove bold y With dot left parenthesis t right parenthesis equals left parenthesis sigma summation Underscript j equals 1 Overscript n Endscripts ModifyingAbove bold upper P Superscript down tack Baseline bold v Subscript j Baseline degrees bold upper P Superscript down tack Baseline bold v Subscript j Baseline degrees midline horizontal ellipsis degrees bold upper P Superscript down tack Baseline bold v Subscript j Baseline With top brace Overscript k minus 1 Endscripts degrees lamda Subscript r Baseline bold upper P Superscript down tack Baseline bold v Subscript j Baseline right parenthesis bold y left parenthesis t right parenthesis Superscript k minus 1 Baseline comma EndLayout˙y(t) =
(
n
∑
j=1
k−1
~
~~
~
PTv j ◦PTv j ◦· · · ◦PTv j ◦λrPTv j
)
y(t)k−1,
wherelamda Subscript jλ j are thej jthe diagonal entries ofbold upper LamdaɅ. Ifbold upper P Superscript down tack Baseline bold upper VPTV is an orthogonal matrix, the transformed 
system is an odeco TVPDS.
⬜
Corollary 4.3 ([ 2]) Suppose that sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n has a CPD of the form (4.9) with r equals nr = n. 
If there exist lamda Subscript jλ j such that bold w Subscript j Baseline equals lamda Superscript negative 1 Baseline bold u Subscript jw j = λ−1u j where bold w Subscript jw j are the j jth column of the matrix left parenthesis bold upper V Superscript negative 1 Baseline right parenthesis Superscript down tack(V−1)T, 
the TVPDS (4.1) can be transformed to an odeco TVPDS. 
Proof The result can be obtained immediately by combining the two conditions stated in 
Proposition 4.7.
⬜
One can leverage the MATLAB toolbox TensorLab [ 31] to determine whether a general 
TVPDS can be transformed to an odeco TVPDS, as outlined in Algorithm 5. In fact, this  
algorithm is applicable to any TVPDS, regardless of the CP rank of the dynamic tensor, and 
can identify an approximation (controlled by the error parameterepsilon∈) that can be transformed to

68
4
Tensor Vector Product-Based Dynamical Systems
A computer  p rogram of al gor it hm 5 is used t o dete rmine i f a genera l T P V D Scan 
can  be tra nsformed to an ode co T V  P D S.  It i ncludes a give n genera l T P  V D S and a threshold epsilon. Create a C P D model, randomly initialize a variable R, impose the condition, compute a C P D, use the factor, end.2A compu
ter program of algorithm 5 is used to determine if a general T P V D Scan can be transformed to an odeco T V P D S. It includes a given general T P V D S and a threshold epsilon. Create a C P D model, randomly initialize a variable R, impose the condition, compute a C P D, use the factor, end.
A c ompute r program of alg ori thm 5 is used to determine if a general T P V D Scan can be transformed to an odeco T V P D S. It includes a given general T P V D S and a threshold epsilon. Create a C P D model, randomly initialize a variable R, impose the condition, compute a C P D, use the factor, end.4.1A comp ut er progra m  of algor i thm 5 is 
use d to de te rmin e if a
 general T P V 
D S can can b e transform ed  to an od ec o T V P  D S . It incl udes a given g
eneral T P V D S and a threshol
d epsilon. Create a C P D model, ran
dom ly init iali ze a varia ble  R, impose the  co ndit ion, co mpute a C  P D,  use th e fa ctor , end .
an odeco TVPDS. Once establishing that a TVPDS (or its approximation) can be transformed 
to an odeco TVPDS, the linear transformation P can be readily computed using the formula 
bold upper P equals left parenthesis bold upper V Superscript negative 1 Baseline bold upper W right parenthesis Superscript down tackP = (V−1W)T, where bold upper W element of double struck upper R Superscript n times nW ∈Rn×n is an arbitrary orthogonal matrix. The stability results 
can also be obtained immediately. 
4.3
System-Theoretic Properties: Controllability 
The controllability of polynomial dynamical systems has been an active area of research 
since the 1970s and 1980s [ 32– 34]. Notably et al. [ 32] achieved a signiﬁcant breakthrough 
by demonstrating the strong controllability of homogeneous polynomial dynamical systems 
(i.e., TVPDSs) with linear control inputs. This section focuses on harnessing the power of 
tensor algebra to establish a controllability/accessibility result for TVPDSs and explore its 
applications in the context of hypergraphs.

4.3
System-Theoretic Properties:Controllability
69
4.3.1
Controllability 
Consider the following TVPDS with linear control inputs: 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals sans serif upper A bold x left parenthesis t right parenthesis Superscript k minus 1 Baseline plus bold upper B bold u left parenthesis t right parenthesis comma˙x(t) = Ax(t)k−1 + Bu(t),
(4.10) 
where bold upper B element of double struck upper R Superscript n times sB ∈Rn×s is the control matrix and bold u left parenthesis t right parenthesis element of double struck upper R Superscript su(t) ∈Rs is the control inputs. For simplicity, 
assume that the dynamic tensor A is supersymmetric. Generalization to almost symmetric 
dynamic tensors is straightforward. First, the controllability result for homogeneous poly-
nomial dynamical systems is state below according to [ 32]. 
Deﬁnition 4.1 ([ 32]) A dynamical system is said to be strongly controllable if there exists 
a choice of control inputs that can drive it from any initial state to any target state at any 
time. 
Theorem 4.1 ([ 32]) Suppose that bold ff is an nn-dimensional homogeneous polynomial dynam-
ical system of odd degree and bold b Subscript j Baseline element of double struck upper R Superscript nb j ∈Rn. The following control system: 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals bold f left parenthesis bold x left parenthesis t right parenthesis right parenthesis plus sigma summation Underscript j equals 1 Overscript s Endscripts bold b Subscript j Baseline u Subscript j Baseline left parenthesis t right parenthesis comma˙x(t) = f
(
x(t)
)
+
s
∑
j=1
b ju j(t),
(4.11) 
is strongly controllable if and only if the rank of the Lie algebra spanned by the set of vector 
ﬁelds StartSet bold f comma bold b Subscript 1 Baseline comma bold b Subscript 2 Baseline comma ellipsis comma bold b Subscript s Baseline EndSet{f, b1, b2, . . . , bs} is nn at all points in double struck upper R Superscript nRn. 
It is known that the Lie algebra is of full rank at all points in double struck upper R Superscript nRn if  and only if it is of  
full rank at the origin. Therefore, one can evaluate the Lie algebra ofbold f comma bold b Subscript 1 Baseline comma bold b Subscript 2 Baseline comma ellipsis comma bold b Subscript s Baselinef, b1, b2, . . . , bs at the 
origin by computing their recursive Lie brackets. The Lie bracket of two vector ﬁeldsbold ff and 
bold gg at a point bold xx can be easily computed as 
left bracket bold f comma bold g right bracket Subscript bold x Baseline equals nabla bold g left parenthesis bold x right parenthesis bold f left parenthesis bold x right parenthesis minus nabla bold f left parenthesis bold x right parenthesis bold g left parenthesis bold x right parenthesis comma[f, g]x = ∇g(x)f(x) −∇f(x)g(x),
(4.12) 
wherenabla∇is the gradient operator. Theorem 4.1 can be summarized as a generalized Kalman’s 
rank condition for TVPDSs in the tensor form. 
Deﬁnition 4.2 ([ 1]) Given the TVPDS with linear control inputs (4.10), deﬁnescript upper C 0C0 as the lin-
ear span ofStartSet bold b Subscript 1 Baseline comma bold b Subscript 2 Baseline comma ellipsis comma bold b Subscript m Baseline EndSet{b1, b2, . . . , bm} wherebold upper B equals Start 1 By 4 Matrix 1st Row 1st Column bold b Subscript 1 Baseline 2nd Column bold b Subscript 2 Baseline 3rd Column ellipsis 4th Column bold b Subscript s Baseline EndMatrix element of double struck upper R Superscript n times sB =
[
b1 b2 . . . bs
]
∈Rn×s and computescript upper C Subscript qCq inductively 
as the linear span of 
script upper C Subscript q minus 1 Baseline union left brace sans serif upper A bold v Subscript 1 Baseline bold v Subscript 2 Baseline midline horizontal ellipsis bold v Subscript k minus 1 Baseline vertical bar bold v Subscript l Baseline element of script upper C Subscript q minus 1 Baseline right brace periodCq−1 ∪{Av1v2 · · · vk−1|vl ∈Cq−1}.
(4.13) 
for each integer q greater than or equals 1q ≥1. Denote the subspace script upper C left parenthesis sans serif upper A comma bold upper B right parenthesis equals union Subscript q greater than or equals 0 Baseline script upper C Subscript qC (A, B) = ∪q≥0Cq.

70
4
Tensor Vector Product-Based Dynamical Systems
Proposition 4.8 ([ 1]) Suppose thatkk is even. The TVPDS with linear control inputs (4.10) 
is strongly controllable if and only if the subspace script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B) spans double struck upper R Superscript nRn. 
Proof Without loss of generality, assume that s equals 1s = 1. The recursive Lie brackets of StartSet sans serif upper A comma bold b Subscript 1 Baseline EndSet{A, b1}
at the origin can be computed as 
StartLayout 1st Row 1st Column left bracket bold b Subscript 1 Baseline comma sans serif upper A bold x Superscript k minus 1 Baseline right bracket Subscript bold 0 2nd Column equals left parenthesis StartFraction d Over d bold x EndFraction vertical bar Subscript StartLayout 1st Row bold x equals bold 0 EndLayout Baseline sans serif upper A bold x Superscript k minus 1 Baseline right parenthesis bold b Subscript 1 Baseline equals bold 0 comma 2nd Row 1st Column left bracket bold b Subscript 1 Baseline comma left bracket bold b Subscript 1 Baseline comma sans serif upper A bold x Superscript k minus 1 Baseline right bracket right bracket Subscript bold 0 2nd Column equals left parenthesis StartFraction d Over d bold x EndFraction vertical bar Subscript StartLayout 1st Row bold x equals bold 0 EndLayout Baseline sans serif upper A bold x Superscript k minus 2 Baseline bold b Subscript 1 Baseline right parenthesis bold b Subscript 1 Baseline equals bold 0 comma 3rd Row 1st Column Blank 2nd Column vertical ellipsis 4th Row 1st Column left bracket bold b Subscript 1 Baseline comma left bracket midline horizontal ellipsis comma left bracket left bracket bold b Subscript 1 Baseline comma sans serif upper A bold x Superscript k minus 1 Baseline right bracket right bracket right bracket right bracket Subscript bold 0 2nd Column equals left parenthesis StartFraction d Over d bold x EndFraction vertical bar Subscript StartLayout 1st Row bold x equals bold 0 EndLayout Baseline sans serif upper A bold x bold b Subscript 1 Superscript k minus 2 Baseline right parenthesis bold b Subscript 1 Baseline equals sans serif upper A bold b Subscript 1 Superscript k minus 1 Baseline period EndLayout[b1, Axk−1]0 = ( d
dx
||||
x=0
Axk−1)b1 = 0,
[b1, [b1, Axk−1]]0 = ( d
dx
||||
x=0
Axk−2b1)b1 = 0,
...
[b1, [· · · , [[b1, Axk−1]]]]0 = ( d
dx
||||
x=0
Axbk−2
1
)b1 = Abk−1
1
.
Here, the scalar terms are ignored during the gradient computation. One can repeat 
the process for the brackets left bracket sans serif upper A bold b Subscript 1 Superscript k minus 1 Baseline comma sans serif upper A bold x Superscript k minus 1 Baseline right bracket[Abk−1
1
, Axk−1], left bracket sans serif upper A bold b Subscript 1 Superscript k minus 1 Baseline comma sans serif upper A bold x Superscript k minus 2 Baseline bold b Subscript 1 Baseline right bracket[Abk−1
1
, Axk−2b1], ellipsis. . ., left bracket sans serif upper A bold b Subscript 1 Superscript k minus 1 Baseline comma sans serif upper A bold x bold b Subscript 1 Superscript k minus 2 Baseline right bracket[Abk−1
1
, Axbk−2
1
]. 
After the qqth iteration, the subspace script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B) contains all the Lie brackets of the vec-
tor ﬁelds sans serif upper A bold x Superscript k minus 1 Baseline comma bold b Subscript 1 BaselineAxk−1, b1 at the origin. Hence, the desired result follows immediately from 
Theorem 4.1.
⬜
An integer q less than or equals nq ≤n can be determined such that script upper C left parenthesis sans serif upper A comma bold upper B right parenthesis equals script upper C Subscript qC (A, B) = Cq, as  script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B) is a ﬁnite-
dimensional vector space. Additionally, the matrix whose columns consist of the vectors from 
script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B) can be considered as the controllability matrix of the TVPDS with linear control 
inputs (4.10). Whenk equals 2k = 2 andq equals n minus 1q = n −1, Proposition 4.8 reduces to the famous Kalman’s 
rank condition for linear control systems. In lieu of using the tensor vector product, the 
controllability matrix (in a reduced form) can be efﬁciently computed using the Kronecker 
product and matrix SVD, as shown in Algorithm 6. It can be demonstrated that the column 
space of the controllability matrix obtained from Algorithm 6 is equivalent to script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B). 
The controllability of the TVPDS with linear control inputs (4.10) remains an open 
problem for odd kk [ 35, 36]. However, a weaker form of controllability, known as local 
accessibility, can be established based on the generalized Kalman’s rank condition. Local 
accessibility only requires that reachable sets be nonempty open sets rather than the entire 
space double struck upper R Superscript nRn [ 37]. 
Deﬁnition 4.3 ([ 37]) A dynamical system is called locally accessible if for any initial state 
bold x Subscript 0 Baseline element of double struck upper R Superscript nx0 ∈Rn andupper T greater than 0T > 0, the reachable setscript upper R Subscript upper T Baseline left parenthesis bold x Subscript 0 Baseline right parenthesis equals union Subscript 0 less than or equals t less than or equals upper T Baseline script upper R left parenthesis bold x Subscript 0 Baseline comma t right parenthesisRT (x0) = ∪0≤t≤T R(x0, t) contains a nonempty open 
set, where script upper R left parenthesis bold x Subscript 0 Baseline comma t right parenthesisR(x0, t) is the set including all bold x element of double struck upper R Superscript nx ∈Rn for which the system can be driven from 
bold x Subscript 0x0 to x at time tt.

4.3
System-Theoretic Properties:Controllability
71
A computer  p rogram of algo rithm 6 is used to compu te th e controll abil ity matr ix. I t includes 10 steps. A T V P D S is given, then compute, set C equals B and j equals 0, compute, set C dash equals C T, compute the economy size S V D of C, set C equals U and j = j + 1, end and return.1A 
compu ter program of algorithm 6 is used to compute the controllability matrix. It includes 10 steps. A T V P D S is given, then compute, set C equals B and j equals 0, compute, set C dash equals C T, compute the economy size S V D of C, set C equals U and j = j + 1, end and return.
A c ompute r progra m of algorithm 6 is used to compute the controllability matrix. It includes 10 steps. A T V P D S is given, then compute, set C equals B and j equals 0, compute, set C dash equals C T, compute the economy size S V D of C, set C equals U and j = j + 1, end and return.4.10A compu ter program of algorith m 6 is us ed t o comput e the c on
tro llabilit y ma trix. I t includes 10 ste ps . A T V P D  S is given, then com
put e, s et  C e qual s B an
d j  equal s 0, c omp
ut
e, set C  d ash equal s C T, c
o m p ute t
he
 eco no m
y si
ze
 S V D o f C,  set C equals  U a nd j =  j + 1 , end an
d 
retu rn .
Proposition 4.9 ([ 1]) The TVPDS with linear control inputs (4.10) is locally accessible if 
and only if the subspace script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B) spans double struck upper R Superscript nRn. 
Proof According to nonlinear control theory, accessibility can be achieved when the span 
of the smallest Lie algebra of vector ﬁelds containing the drift and input vector ﬁelds isdouble struck upper R Superscript nRn. 
For the TVPDS with linear control inputs (4.10), the smallest Lie algebra containingsans serif upper A bold x Superscript k minus 1Axk−1
and bold b Subscript 1 Baseline comma bold b Subscript 2 Baseline comma ellipsis comma bold b Subscript m Baselineb1, b2, . . . , bm at the origin is script upper C left parenthesis sans serif upper A comma bold upper B right parenthesisC (A, B). Therefore, the result follows immediately.
⬜
4.3.2
Controllability of Hypergraphs 
The controllability of graphs has been extensively studied since the 1970s [ 38– 44]. Liu 
et al. [ 40, 44] modeled the dynamics of a graph using the LDS model, where the dynamic 
matrix is the adjacency matrix of the graph. They utilized the Kalman’s rank condition 
to determine the minimum number of driver nodes required to control the entire graph. 
A hypergraph is a generalization of a graph in which its hyperedges can connect more 
than two nodes [ 8]. Hypergraphs are commonly used to model various systems such as 
metabolic reaction networks [ 45,46], co-authorship networks [ 47,48], email communication 
networks [ 49, 50], and protein-protein interaction networks [ 51, 52]. If every hyperedge of 
a hypergraph contains kk nodes, the hypergraph is called a kk-uniform hypergraph, as shown 
in Fig. 4.1B (Fig.  4.1A shows a non-uniform hypergraph). Uniform hypergraphs can be 
efﬁciently represented by tensors.

72
4
Tensor Vector Product-Based Dynamical Systems
Fig. 4.1 Non-uniform hypergraphs versus uniform hypergraphs. A Non-uniform hypergraph with 
hyperedges e 1 equals StartSet v 1 comma v 3 EndSete1 = {v1, v3}, e 2 equals StartSet v 2 comma v 3 comma v 4 comma v 5 EndSete2 = {v2, v3, v4, v5}, e 3 equals StartSet v 3 comma v 5 comma v 6 EndSete3 = {v3, v5, v6}. B Uniform hypergraph with 
hyperedgese 1 equals StartSet v 1 comma v 2 comma v 3 EndSete1 = {v1, v2, v3},e 2 equals StartSet v 2 comma v 3 comma v 4 EndSete2 = {v2, v3, v4},e 3 equals StartSet v 3 comma v 5 comma v 6 EndSete3 = {v3, v5, v6}
Deﬁnition 4.4 ([ 53]) Let script upper H equals StartSet script upper V comma script upper E EndSetH = {V, E} be a kk-uniform hypergraph with nn nodes. The adja-
cency tensor sans serif upper A element of double struck upper R Superscript n times n times midline horizontal ellipsis Overscript k Endscripts times nA ∈Rn×n×
k···×n of script upper HH, a  kkth order nn-dimensional supersymmetric tensor, is 
deﬁned as 
sans serif upper A Subscript j 1 j 2 midline horizontal ellipsis j Sub Subscript k Subscript Baseline equals StartLayout Enlarged left brace 1st Row StartFraction 1 Over left parenthesis k minus 1 right parenthesis factorial EndFraction if left parenthesis j 1 comma j 2 comma ellipsis comma j Subscript k Baseline right parenthesis element of script upper E 2nd Row Blank 3rd Row 0 comma otherwise EndLayout periodA j1 j2··· jk =
⎧
⎪⎪⎨
⎪⎪⎩
1
(k−1)! if ( j1, j2, . . . , jk) ∈E
0, otherwise
.
(4.14) 
The degree of node j j of a uniform hypergraph can be computed as 
d Subscript j Baseline equals sigma summation Underscript j 2 equals 1 Overscript n Endscripts sigma summation Underscript j 3 equals 1 Overscript n Endscripts midline horizontal ellipsis sigma summation Underscript j Subscript k Baseline equals 1 Overscript n Endscripts sans serif upper A Subscript j j 2 j 3 midline horizontal ellipsis j Sub Subscript k Subscript Baseline periodd j =
n
∑
j2=1
n
∑
j3=1
· · ·
n
∑
jk=1
A j j2 j3··· jk.
(4.15) 
If all nodes have the same degreedd,script upper HH is calleddd-regular. If everykk nodes are contained in 
one hyperedge, script upper HH is called complete. 
The dynamics of a kk-uniform hypergraph script upper HH with linear control can be described by 
the TVPDS (4.10), where the dynamic tensor is deﬁned as the adjacency tensor of script upper HH (see 
Fig. 4.2B). This allows us to analyze the controllability of uniform hypergraphs using the 
generalized Kalman’s rank condition, which aims to determine the minimum number of 
driver nodes necessary for achieving the controllability of the hypergraph, with each input 
being imposed at only one node. However, Proposition 4.8 shows that controllability can 
only be achieved for even uniform hypergraphs (Fig. 4.2C provides a simple example). Chen 
et al. [ 1] proved that the minimum number of driver nodes of even uniform hyperchains, 
hyperstars, and complete even uniform hypergraphs behaves similarly to those of chains,

4.3
System-Theoretic Properties:Controllability
73
Fig. 4.2 Hypergraph dynamics and controllability matrix. A Standard graph with three nodes and 
three edges and its associated linear dynamics. B 3-uniform hypergraph with three nodes and one 
hyperedge and its associated nonlinear dynamics. C 4-uniform hypergraph with four nodes and one 
hyperedge and its corresponding controllability matrix with three inputs. This ﬁgure was redrawn 
from [ 1] with permission 
stars, and complete graphs and reduce them as special cases for k equals 2k = 2. Reader can refer 
to the work [ 1] for detailed deﬁnitions of hyperchains and hyperstars. Here, the result for 
complete even uniform hypergraphs is provided as follows. 
Proposition 4.10 ([ 1]) Ifscript upper HH is a complete even uniform hypergraph withnn nodes, then the 
minimum number of driver nodes of script upper HH is n minus 1n −1. 
The results for the minimum number of driver nodes in odd uniform hypergraphs are 
exactly the same as those for even uniform hypergraphs when considering hypergraph 
accessibility. Determining the minimum number of driver nodes (whether it is controlla-
bility or accessibility) for a uniform hypergraph is an NP-hard problem. Nevertheless, a 
heuristic algorithm (Algorithm 7) is proposed to estimate this number for uniform hyper-
graphs in [ 1]. The algorithm selects nodes that cause the maximum change in the rank of 
the reduced controllability matrix computed from Algorithm 6. Here, bold upper C Subscript script upper DCD represents the 
controllability matrix computed from the inputs formed by the set script upper DD of driver nodes. For 
non-connected uniform hypergraphs, it is necessary to identify the connected components 
ﬁrst. If the algorithm returns multiple optimal solutions, one can randomly choose one or 
use additional criteria, such as selecting the node with the highest degree, to break the tie. 
Numerical experiments have shown that Algorithm 7 can estimate the minimum number 
of driver nodes for medium-sized uniform hypergraphs with high accuracy and at a much 
lower computational cost compared to brute-force search.

74
4
Tensor Vector Product-Based Dynamical Systems
A computer  p rogram of algo rithm  7 is used for g reedy driv er n ode sele ction . It includes 10 steps. The adjacency tensor A is given. Let S be a set and D is added. While rank C D less than n do, compute del of S, end for, set s star, set D, end while, and return.1A compu ter 
program of algorithm 7 is used for greedy driver node selection. It includes 10 steps. The adjacency tensor A is given. Let S be a set and D is added. While rank C D less than n do, compute del of S, end for, set s star, set D, end while, and return.
A c ompute r pr ogram of al gorithm  7  is used f
or greedy driv er node selectio n. It inclu de
s 1 0 st ep s . The a d j a cency te ns o r  
A i s give n. Let S  be a s
et
 and  D  is adde d. 
Wh
ile ran k C D less than n do, compute del of S, end for , 
se
t s star
, 
set D, end while, and ret
ur
n.
4.4
System-Theoretic Property: Observability 
The nonlinearity of TVPDSs poses challenges in extending the framework of controllability 
to observability. In fact, there are no strong results for the observability of polynomial 
dynamical systems. Therefore, one has to rely on the results of weak observability based on 
nonlinear systems theory [ 54, 55]. 
4.4.1
Observability 
Consider the following TVPDS with linear output: 
StartLayout Enlarged left brace 1st Row ModifyingAbove bold x With dot left parenthesis t right parenthesis equals sans serif upper A bold x left parenthesis t right parenthesis Superscript k minus 1 Baseline 2nd Row bold y left parenthesis t right parenthesis equals bold upper C bold x left parenthesis t right parenthesis EndLayout comma
{
˙x(t) = Ax(t)k−1
y(t) = Cx(t)
,
(4.16) 
where bold upper C element of double struck upper R Superscript m times nC ∈Rm×n is the output matrix and bold y left parenthesis t right parenthesis element of double struck upper R Superscript my(t) ∈Rm is the output. For simplicity, assume 
that the dynamic tensor A is supersymmetric. First, the observability result for nonlinear 
systems is state below according to [ 54]. Consider the following nn-dimensional nonlinear 
system with inputs and outputs: 
StartLayout Enlarged left brace 1st Row ModifyingAbove bold x With dot left parenthesis t right parenthesis equals bold f left parenthesis bold x left parenthesis t right parenthesis comma bold u left parenthesis t right parenthesis right parenthesis 2nd Row bold y left parenthesis t right parenthesis equals bold g left parenthesis bold x left parenthesis t right parenthesis right parenthesis EndLayout comma
{
˙x(t) = f
(
x(t), u(t)
)
y(t) = g
(
x(t)
)
,
(4.17)

4.4
System-Theoretic Property:Observability
75
where bold ff and bold g equals Start 1 By 4 Matrix 1st Row 1st Column g 1 2nd Column g 2 3rd Column midline horizontal ellipsis 4th Column g Subscript m Baseline EndMatrix Superscript down tackg =
[
g1 g2 · · · gm
]T are analytic vector ﬁelds. 
Deﬁnition 4.5 ([ 54]) Let upper UU be a subset of double struck upper R Superscript nRn. Two points bold x Subscript 0x0 and bold x Subscript 1x1 in upper UU are called upper UU-
indistinguishable if for every control inputbold u left parenthesis t right parenthesisu(t) overleft bracket 0 comma upper T right bracket[0, T ], whose solutionsbold x Subscript 0 Baseline left parenthesis t right parenthesisx0(t) andbold x Subscript 1 Baseline left parenthesis t right parenthesisx1(t)
from bold x Subscript 0x0 and bold x Subscript 1x1 lie in upper UU, fails to distinguish between bold x Subscript 0x0 and bold x Subscript 1x1. 
Deﬁnition 4.6 ([ 54]) The nonlinear system (4.17) is called locally weakly observable at 
bold x element of double struck upper R Superscript nx ∈Rn if and only ifbold xx has an open neighborhoodupper UU such that for every open neighborhood 
upper VV of x contained in upper UU, all points in upper VV are upper UU–indistinguishable from x. 
Theorem 4.2 ([ 54]) The system is locally weakly observable at bold x element of double struck upper R Superscript nx ∈Rn if and only if the 
observability matrix deﬁned as 
bold upper O left parenthesis bold x right parenthesis equals nabla Start 1 By 4 Matrix 1st Row 1st Column upper L Subscript bold f Superscript 0 Baseline bold g left parenthesis bold x right parenthesis 2nd Column upper L Subscript bold f Superscript 1 Baseline bold g left parenthesis bold x right parenthesis 3rd Column midline horizontal ellipsis 4th Column upper L Subscript bold f Superscript q Baseline bold g left parenthesis bold x right parenthesis EndMatrix Superscript down tackO(x) = ∇
[
L0
f g(x) L1
f g(x) · · · Lq
f g(x)
]T
(4.18) 
has rank nn for some integer q greater than 0q > 0. 
The notation upper L Subscript bold f Baseline bold g left parenthesis bold x right parenthesisLfg(x) represents the Lie derivative of bold gg along bold ff deﬁned as 
upper L Subscript bold f Baseline bold g left parenthesis bold x right parenthesis equals Start 1 By 4 Matrix 1st Row 1st Column left angle bracket bold f comma nabla g 1 left parenthesis bold x right parenthesis right angle bracket 2nd Column left angle bracket bold f comma nabla g 2 left parenthesis bold x right parenthesis right angle bracket 3rd Column midline horizontal ellipsis 4th Column left angle bracket bold f comma nabla g Subscript m Baseline left parenthesis bold x right parenthesis right angle bracket EndMatrix Superscript down tack Baseline commaLfg(x) =
[
⟨f, ∇g1(x)⟩⟨f, ∇g2(x)⟩· · · ⟨f, ∇gm(x)⟩
]T ,
and upper L Subscript bold f Superscript j Baseline g left parenthesis bold x right parenthesisL j
f g(x) denotes the j jth Lie derivative. In general, the value of qq is set to nn for analytic 
systems, and the generic rank condition of the observability matrix (4.18) can be checked 
using symbolic computation [ 56]. Furthermore, Theorem 4.2 can be simpliﬁed for TVPDSs 
using tensor algebra, similar to the framework of controllability. For convenience, deﬁne 
the following: 
bold upper B Subscript p Baseline equals sigma summation Underscript j equals 1 Overscript p k minus k minus 2 p plus 3 Endscripts ModifyingAbove bold upper I circled times bold upper I circled times midline horizontal ellipsis circled times bold upper I With top brace Overscript j minus 1 Endscripts circled times bold upper A Subscript left parenthesis 1 right parenthesis Baseline circled times ModifyingAbove bold upper I circled times bold upper I circled times midline horizontal ellipsis circled times bold upper I With top brace Overscript p k minus k minus 2 p plus 3 minus j Endscripts commaBp =
pk−k−2p+3
∑
j=1
j−1
~
~~
~
I ⊗I ⊗· · · ⊗I ⊗A(1) ⊗
pk−k−2p+3−j
~
~~
~
I ⊗I ⊗· · · ⊗I,
where bold upper A Subscript left parenthesis 1 right parenthesisA(1) is the 1-mode matricization of A. 
Proposition 4.11 ([20]) The TVPDS with linear outputs (4.16) is locally weakly observable 
at bold x element of double struck upper R Superscript nx ∈Rn if and only if the observability matrix deﬁned as 
bold upper O left parenthesis bold x right parenthesis equals nabla Start 1 By 4 Matrix 1st Row 1st Column bold upper C bold upper J Subscript 0 Baseline left parenthesis bold x right parenthesis 2nd Column bold upper C bold upper J Subscript 1 Baseline left parenthesis bold x right parenthesis 3rd Column midline horizontal ellipsis 4th Column bold upper C bold upper J Subscript n Baseline left parenthesis bold x right parenthesis EndMatrix Superscript down tack Baseline commaO(x) = ∇
[
CJ0(x) CJ1(x) · · · CJn(x)
]T ,
(4.19) 
where

76
4
Tensor Vector Product-Based Dynamical Systems
StartLayout 1st Row 1st Column bold upper J Subscript 0 Baseline left parenthesis bold x right parenthesis 2nd Column equals bold x comma 2nd Row 1st Column bold upper J Subscript 1 Baseline left parenthesis bold x right parenthesis 2nd Column equals bold upper A Subscript left parenthesis 1 right parenthesis Baseline left parenthesis bold x circled times bold x circled times midline horizontal ellipsis Overscript k minus 1 Endscripts circled times bold x right parenthesis comma 3rd Row 1st Column bold upper J Subscript p Baseline left parenthesis bold x right parenthesis 2nd Column equals bold upper A Subscript left parenthesis 1 right parenthesis Baseline bold upper B Subscript 2 Baseline bold upper B Subscript 3 Baseline midline horizontal ellipsis bold upper B Subscript p Baseline left parenthesis bold x circled times bold x circled times midline horizontal ellipsis midline horizontal ellipsis Overscript p k minus 2 p plus 1 Endscripts circled times bold x right parenthesis comma EndLayoutJ0(x) = x,
J1(x) = A(1)(x ⊗x⊗
k−1
· · · ⊗x),
Jp(x) = A(1)B2B3 · · · Bp(x ⊗x⊗
pk−2p+1
· · · · · · ⊗x),
has rank nn. 
A detailed algorithm for computing the observability matrix can be found in [ 20]. When 
k equals 2k = 2, Proposition 4.11 reduces to the Kalman’s rank condition for the observability of 
LDSs. 
4.4.2
Observability of Hypergraphs 
The framework for hypergraph observability can be formulated similarly to that of hyper-
graph controllability. For a given uniform hypergraph, the dynamic tensor A in the TVPDS 
with linear outputs (4.16) is set to the adjacency tensor of the hypergraph. Each row in 
the output matrix C only contains one non-zero entry, similarly to the control matrix B. In  
other words, each output is imposed at only one node. The objective is to determine the 
minimum number of observable nodes necessary for achieving hypergraph observability. 
Algorithm 7 can be adapted to estimate the minimum number of observable nodes of a 
uniform hypergraph by simply replacing the controllability matrix with the observability 
matrix [ 20]. 
4.5
Applications 
4.5.1
Synthetic Data: Stability 
This example was adapted from [ 2]. Given a two-dimensional odeco TVPDS of the form 
(4.1) with 
StartLayout 1st Row 1st Column sans serif upper A Subscript colon colon 11 2nd Column equals Start 2 By 2 Matrix 1st Row 1st Column negative 1.2593 2nd Column 0.5543 2nd Row 1st Column 0.5543 2nd Column negative 0.5185 EndMatrix sans serif upper A Subscript colon colon 12 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0.5543 2nd Column negative 0.5185 2nd Row 1st Column negative 0.5185 2nd Column negative 0.1386 EndMatrix 2nd Row 1st Column sans serif upper A Subscript colon colon 21 2nd Column equals Start 2 By 2 Matrix 1st Row 1st Column 0.5543 2nd Column negative 0.5185 2nd Row 1st Column negative 0.5185 2nd Column negative 0.1386 EndMatrix sans serif upper A Subscript colon colon 22 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column negative 0.5185 2nd Column negative 0.1386 2nd Row 1st Column negative 0.1386 2nd Column negative 0.7037 EndMatrix comma EndLayoutA::11 =
[−1.2593 0.5543
0.5543 −0.5185
]
A::12 =
[ 0.5543 −0.5185
−0.5185 −0.1386
]
A::21 =
[ 0.5543 −0.5185
−0.5185 −0.1386
]
A::22 =
[−0.5185 −0.1386
−0.1386 −0.7037
]
,

4.5
Applications
77
Fig. 4.3 Vector ﬁeld plot of the odeco TVPDS. This ﬁgure was redrawn from [ 2] with permission 
the orthogonal decomposition of A has two Z-eigenvalues, which arenegative 1−1 andnegative 2−2. Hence, 
according to Corollary 4.1, the TVPDS is globally asymptotically stable. Figure 4.3 shows 
the vector ﬁeld of the system, where the origin is a sink. 
4.5.2
Synthetic Data: Stability with Constant Control 
This example was adapted from [ 2]. Given a three-dimensional homogeneous polynomial 
dynamical system of degree three with constant control inputs 
StartLayout Enlarged left brace 1st Row ModifyingAbove x With dot Subscript 1 Baseline equals minus x 1 cubed minus 3 x 1 squared x 2 minus 3 x 1 x 2 squared plus 2 2nd Row ModifyingAbove x With dot Subscript 2 Baseline equals minus x 2 cubed plus 2 3rd Row ModifyingAbove x With dot Subscript 3 Baseline equals minus x 3 cubed minus 3 x 1 squared x 3 minus 3 x 1 x 3 squared minus 3 x 2 squared x 3 minus 3 x 2 x 3 squared minus 6 x 1 x 2 x 3 plus 2 EndLayout comma
⎧
⎪⎪⎨
⎪⎪⎩
˙x1 = −x3
1 −3x2
1x2 −3x1x2
2 + 2
˙x2 = −x3
2 + 2
˙x3 = −x3
3 −3x2
1x3 −3x1x2
3 −3x2
2x3 −3x2x2
3 −6x1x2x3 + 2
,
it can be rewritten as a TVPDS of the form (4.7) with an almost symmetric sans serif upper AA and 
bold b equals Start 1 By 3 Matrix 1st Row 1st Column 2 2nd Column 2 3rd Column 2 EndMatrix Superscript down tackb =
[
2 2 2
]T. Algorithm 5 can be employed to transform the system into an odeco TVPDS 
with constant control. Assuming the standard basis is used to construct the odeco tensor

78
4
Tensor Vector Product-Based Dynamical Systems
(with Z-eigenvalues equal tonegative 1−1 in the orthogonal decomposition), the coefﬁcient functions 
alpha Subscript j Baseline left parenthesis t right parenthesisα j(t) can be solved by applying Proposition 4.6, i.e., 
StartLayout Enlarged left brace 1st Row t equals StartFraction g left parenthesis 2 divided by 3 comma 4 divided by alpha 1 cubed right parenthesis Over 2 alpha 1 squared EndFraction minus StartFraction g left parenthesis 2 divided by 3 comma 4 divided by c 1 cubed right parenthesis Over 2 c 1 squared EndFraction 2nd Row t equals StartFraction g left parenthesis 2 divided by 3 comma 2 divided by alpha 2 cubed right parenthesis Over 2 alpha 2 squared EndFraction minus StartFraction g left parenthesis 2 divided by 3 comma 2 divided by c 2 right parenthesis Over 2 c 2 squared EndFraction 3rd Row t equals StartFraction g left parenthesis 2 divided by 3 comma 6 divided by alpha 3 cubed right parenthesis Over 2 alpha 3 squared EndFraction minus StartFraction g left parenthesis 2 divided by 3 comma 6 divided by c 3 cubed right parenthesis Over 2 c 3 squared EndFraction EndLayout comma
⎧
⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
t = g(2/3,4/α3
1)
2α2
1
−g(2/3,4/c3
1)
2c2
1
t = g(2/3,2/α3
2)
2α2
2
−g(2/3,2/c2)
2c2
2
t = g(2/3,6/α3
3)
2α2
3
−g(2/3,6/c3
3)
2c2
3
,
with alpha Subscript r Baseline left parenthesis 0 right parenthesis equals c Subscript jαr(0) = c j for all j equals 1 comma 2 comma 3 j = 1, 2, 3. It can be proven that the three Gauss hypergeometric 
functions have vertical asymptotes at c 1 equals RootIndex 3 StartRoot 4 EndRootc1 =
3√
4, c 2 equals RootIndex 3 StartRoot 2 EndRootc2 =
3√
2, and  c 3 equals RootIndex 3 StartRoot 6 EndRootc3 =
3√
6, respectively. This 
implies that the odeco TVPDS with constant control is globally asymptotically stable at the 
equilibrium point. Consequently, the original polynomial dynamical system is also globally 
asymptotically stable at the equilibrium point. 
4.5.3
Mouse Neuron Endomicroscopy Dataset 
This example was adapted from [ 1]. The mouse endomicroscopy dataset comprises imaging 
videos capturing neuronal activities in a mouse hypothalamus during 10-minute periods 
of feeding, fasting, and re-feeding [ 57]. The objective is to differentiate the three phases 
quantitatively using the minimum number of driver nodes. Intuitively, a high minimum 
number of driver nodes of a hypergraph indicates that it will take more effort to control the 
hypergraph. First, a 3-uniform hypergraph is constructed based on the multi-correlation of 
the neuronal activities for each phase. The multi-correlation among three neurons is deﬁned 
as 
rho equals StartRoot 1 minus det left parenthesis bold upper R right parenthesis EndRoot commaρ =
√
1 −det(R),
(4.20) 
where bold upper R element of double struck upper R Superscript 3 times 3R ∈R3×3 is the correlation matrix of three neuronal activity levels [ 58]. A hyper-
edge is built when the multi-correlation of three neurons exceeds a prescribed thresh-
old. Figure 4.4A–C. show the three 3-uniform hypergraphs constructed using the multi-
correlation of the neuronal activities of a mouse under the feeding, fasting, and re-feeding 
phases. It is evident that the minimum number of driver nodes varies between the three 
phases. The fasting phase requires more neurons to be controlled due to fewer interactions, 
while the minimum number of driver nodes is greatly reduced due to an outburst of neuronal 
activities during the re-feeding phase, see Fig. 4.4D. On the other hand, the minimum num-
ber of driver nodes computed from the graph model fails to capture the changes in neuronal 
activity, see Fig. 4.4D.

4.5
Applications
79
Fig. 4.4 Mouse neuron endomicroscopy dataset. A, B and C 3-uniform hypergraphs constructed 
from the neuronal activity of a mouse under the fed, fast, and re-fed phases. Each 2-simplex (i.e., 
a triangle) represents a hyperedge, and red arrows indicate the driver nodes. D Minimum number 
of driver nodes for 3-uniform hypergraphs under the three phases. The multi-correlation/correlation 
cutoff threshold is 0.95 in constructing the 3-uniform hypergraphs and the graphs. This ﬁgure was 
redrawn from [ 1] with permission 
4.5.4
Chromosomal Conformation Capture Dataset 
This example was adapted from [ 1]. The human genome can be represented by a hypergraph 
[ 59], but the technology of Hi-C can only provide pairwise genomic interactions throughout 
the cell cycle [ 60]. Given Hi-C data for a small region of chromosome 15 (100 kb bin res-
olution) containing two imprinted genes (SNRPN and SNURF), which are known to only 
express from one allele, the goal is to differentiate the differences between maternal and 
paternal genome architecture quantitatively throughout cell cycles. However, such differ-
ences cannot be directly observed from the Hi-C maps, as shown in Fig. 4.5A, B. Similar 
to the previous example, 4-uniform hypergraphs are constructed to recover the higher-order

80
4
Tensor Vector Product-Based Dynamical Systems
Fig. 4.5 Allele-speciﬁc Hi-C dataset. A and B Hi-C maps of a local region from the maternal and 
paternal Chromosome 15 during the cell cycle phases G1, S, and G2. The darker the color, the 
more interactions between two genomic loci. C Minimum numbers of driver nodes of 4-uniform 
hypergraphs constructed from the maternal and paternal Hi-C measurements at the G1, S, and G2 
phases. The multi-correlation cutoff threshold is 0.99 in constructing the 4-uniform hypergraphs. 
This ﬁgure was redrawn from [ 1] with permission

References
81
interactions in the genome using the multi-correlation (4.20). Calculating the minimum 
number of driver nodes can effectively quantify the structural discrepancy between mater-
nal and paternal genomes, as shown in Fig. 4.5C. Interestingly, the minimum number of 
driver nodes is equal between the maternal and paternal hypergraphs in the cell cycle phase 
G2, indicating some similarities in the maternal and paternal genome structures in this phase. 
Biologically, both genomes prepare for mitosis in the G2 phase, which may result in a small 
structural discrepancy. 
References 
1. Can, Chen, Amit Surana, Anthony M. Bloch, and Indika Rajapakse. 2021. Controllability of 
hypergraphs. IEEE Transactions on Network Science and Engineering 8 (2):1646–1657. 
2. Chen, Can. 2023. Explicit solutions and stability properties of homogeneous polynomial dynam-
ical systems. IEEE Transactions on Automatic Control 68 (8): 4962–4969. 
3. Kruppa, Kai. 2017. Comparison of tensor decomposition methods for simulation of multilinear 
time-invariant systems with the mti toolbox. IFAC-PapersOnLine 50 (1): 5610–5615. 
4. Kai, Kruppa and Gerwald Lichtenberg. 2018. Feedback linearization of multilinear time-invariant 
systems using tensor decomposition methods. In SIMULTECH, 232–243. 
5. Qi, Liqun. 2005. Eigenvalues of a real supersymmetric tensor. Journal of Symbolic Computation 
40 (6): 1302–1324. 
6. Tamara, G. Kolda and Brett W. Bader. 2009. Tensor decompositions and applications. SIAM 
Review 51 (3):455–500. 
7. Robeva, Elina. 2016. Orthogonal decomposition of symmetric tensors. SIAM Journal on Matrix 
Analysis and Applications 37 (1): 86–102. 
8. Berge, C. 1989. Hypergraphs, Combinatorics of Finite Sets, 3rd ed. Amsterdam: North-Holland. 
9. Eyal, Bairey, Eric D. Kelsic, and Roy Kishony. 2016. High-order species interactions shape 
ecosystem diversity. Nature Communications 7 (1):1–7. 
10. Jacopo, Grilli, György Barabás, Matthew J. Michalska-Smith, and Stefano Allesina. 2017. 
Higher-order interactions stabilize dynamics in competitive network models. Nature 548 
(7666):210–213. 
11. Vijaysekhar, Chellaboina, Sanjay P. Bhat, Wassim M. Haddad, and Dennis S. 2009. Bernstein. 
Modeling and analysis of mass-action kinetics. IEEE Control Systems Magazine 29 (4):60–78. 
12. Craciun, Gheorghe, Yangzhong Tang, and Martin Feinberg. 2006. Understanding bistability in 
complex enzyme-driven reaction networks. Proceedings of the National Academy of Sciences 
103 (23): 8697–8702. 
13. Donnell, Pete, and Murad Banaji. 2013. Local and global stability of equilibria for a class of 
chemical reaction networks. SIAM Journal on Applied Dynamical Systems 12 (2): 899–920. 
14. Zhao, Pengcheng, Shankar Mohan, and Ram Vasudevan. 2019. Optimal control of polynomial 
hybrid systems via convex relaxations. IEEE Transactions on Automatic Control 65 (5): 2062– 
2077. 
15. Samardzija, Nikola. 1983. Stability properties of autonomous homogeneous polynomial differ-
ential systems. Journal of Differential Equations 48 (1): 60–70. 
16. Amir Ali Ahmadi and Bachir El Khadir. 2019. On algebraic proofs of stability for homogeneous 
vector ﬁelds. IEEE Transactions on Automatic Control 65 (1): 325–332. 
17. Cunis, Torbjørn, Jean-Philippe. Condomines, and Laurent Burlion. 2020. Local stability analysis 
for large polynomial spline systems. Automatica 113: 108773.

82
4
Tensor Vector Product-Based Dynamical Systems
18. Hongmei, Xie, Jun Lin, Zhiyuan Yan, and Bruce W Suter. 2012. Linearized polynomial interpo-
lation and its applications. IEEE Transactions on Signal Processing 61 (1):206–217. 
19. Can, Chen. 2024. On the stability of discrete-time homogeneous polynomial dynamical systems. 
Computational and Applied Mathematics 43: 75. 
20. Joshua, Pickard, Amit Surana, Anthony Bloch, and Indika Rajapakse. 2023. Observability of 
hypergraphs. IEEE Conference on Decision and Control. 
21. Goriely, Alain, and Craig Hyde. 1998. Finite-time blow-up in dynamical systems. Physics Letters 
A 250 (4–6): 311–318. 
22. Peter, B. Stacey, Mark, L. Taper, and Veronica A. Johnson. 1997. Migration within metapopula-
tions: the impact upon local population dynamics. In Metapopulation biology, 267–291. Elsevier. 
23. Engen, Steinar, Russell Lande, and Bernt-Erik. Sæther. 2002. Migration and spatiotemporal 
variation in population dynamics in a heterogeneous environment. Ecology 83 (2): 570–579. 
24. Qin, S. Joe, and Thomas A. Badgwell. 1997. An overview of industrial model predictive control 
technology. In AIche symposium series, vol. 93, 232–256. New York, NY: American Institute of 
Chemical Engineers, 1971–c2002. 
25. Frank, Allgower, Rolf Findeisen, Zoltan K Nagy, et al. 2004. Nonlinear model predictive control: 
From theory to application. Journal-Chinese Institute of Chemical Engineers 35 (3):299–316. 
26. Chelo, Ferreira, José L. López, and Ester P.érez Sinusía. 2006. The gauss hypergeometric function 
f (a, b; c; z) for large c. Journal of Computational and Applied Mathematics 197 (2):568–577. 
27. Jan, Chyan-Deng., and Cheng-lung Chen. 2012. Use of the gaussian hypergeometric function to 
solve the equation of gradually-varied ﬂow. Journal of Hydrology 456: 139–145. 
28. Erich, Kamke. 2013. Differentialgleichungen lösungsmethoden und lösungen. Springer. 
29. Aleksandr, Ivanovich Egorov. 2007. Riccati equations. Number 5. Pensoft Publishers. 
30. George, Gasper and Mizan Rahman. 2004. Basic hypergeometric series, vol. 96. Cambridge 
University Press. 
31. Nico, Vervliet, Otto Debals, and Lieven De Lathauwer. 2016. Tensorlab 3.0—numerical opti-
mization strategies for large-scale constrained and coupled matrix/tensor factorization. In 2016 
50th Asilomar Conference on Signals, Systems and Computers, 1733–1738. IEEE. 
32. Jurdjevic, V., and I. Kupka. 1985. Polynomial control systems. Math. Ann. 272: 361–368. 
33. Pavol, Brunovsky. 1976. Local controllability of odd systems. Banach Center Publications 1 
:39–458. 
34. Baillieul, John. 1981. Controllability and observability of polynomial dynamical systems. Non-
linear Analysis: Theory, Methods & Applications 5 (5): 543–552. 
35. Aeyels, Dirk. 1984. Local and global controllability for nonlinear systems. Systems & Control 
Letters 5 (1): 19–26. 
36. Melody, James, Tamer Basar, and Francesco Bullo. 2003. On nonlinear controllability of homo-
geneous systems linear in control. IEEE Transactions on Automatic Control 48 (1): 139–143. 
37. Anthony, M. Bloch. 2003. An introduction to aspects of geometric control theory. In Nonholo-
nomic mechanics and control, 199–224. Springer. 
38. Lin, Ching-Tai. 1974. Structural controllability. IEEE Transactions on Automatic Control 19 (3): 
201–208. 
39. Herbert, G. Tanner. 2004. On the controllability of nearest neighbor interconnections. In 2004 
43rd IEEE conference on decision and control (CDC) (IEEE Cat. No. 04CH37601), vol. 3,  
2467–2472. IEEE. 
40. Liu, Yang-Yu., Jean-Jacques. Slotine, and Albert-László. Barabási. 2011. Controllability of com-
plex networks. Nature 473 (7346): 167–173. 
41. Yuan, Zhengzhong, Chen Zhao, Zengru Di, Wen-Xu. Wang, and Ying-Cheng. Lai. 2013. Exact 
controllability of complex networks. Nature Communications 4 (1): 1–9. 
42. Commault, Christian. 2019. Structural controllability of networks with dynamical structured 
nodes. IEEE Transactions on Automatic Control 65 (6): 2736–2742.

References
83
43. Rahmani, Amirreza, Meng Ji, Mehran Mesbahi, and Magnus Egerstedt. 2009. Controllability 
of multi-agent systems from a graph-theoretic perspective. SIAM Journal on Control and Opti-
mization 48 (1): 162–186. 
44. Liu, Yang-Yu., and Albert-László. Barabási. 2016. Control principles of complex systems. 
Reviews of Modern Physics 88 (3): 035006. 
45. Chen, Can, Chen Liao, and Yang-Yu. Liu. 2023. Teasing out missing reactions in genome-scale 
metabolic networks through deep learning. Nature Communications 14 (2375): 1–11. 
46. Naganand, Yadati, Vikram Nitin, Madhav Nimishakavi, Prateek Yadav, Anand Louis, and Partha 
Talukdar. 2020. Nhp: Neural hypergraph link prediction. In Proceedings of the 29th ACM inter-
national conference on information & knowledge management, 1705–1714. 
47. Yi, Han, Bin Zhou, Jian Pei, and Yan Jia. 2009. Understanding importance of collaborations in 
co-authorship networks: a supportiveness analysis approach. In Proceedings of the 2009 SIAM 
international conference on data mining, 1112–1123. SIAM. 
48. Naganand, Yadati, Madhav Nimishakavi, Prateek Yadav, Vikram Nitin, Anand Louis, and Partha 
Talukdar. 2019. Hypergcn: a new method for training graph convolutional networks on hyper-
graphs. Advances in Neural Information Processing Systems, 32. 
49. Geon, Lee and Kijung Shin. 2021. Thyme+: temporal hypergraph motifs and fast algorithms for 
exact counting. In 2021 IEEE international conference on data mining (ICDM), 310–319. IEEE. 
50. Can, Chen and Yang-Yu Liu. 2023. A survey on hyperlink prediction. IEEE Transactions on 
Neural Networks and Learning Systems. 
51. Hwang, TaeHyun, Ze Tian, Rui Kuangy, and Jean-Pierre Kocher. 2008. Learning on weighted 
hypergraphs to integrate protein interactions and gene expressions for cancer outcome prediction. 
In 2008 Eighth IEEE international conference on data mining, 293–302. IEEE. 
52. Kevin, A Murgas, Emil Saucan, and Romeil Sandhu. 2022. Hypergraph geometry reﬂects higher-
order dynamics in protein interaction networks. Scientiﬁc Reports 12 (1):1–12. 
53. Cooper, Joshua, and Aaron Dutle. 2012. Spectra of uniform hypergraphs. Linear Algebra and 
its Applications 436 (9): 3268–3292. 
54. Hermann, Robert, and Arthur Krener. 1977. Nonlinear controllability and observability. IEEE 
Transactions on Automatic Control 22 (5): 728–740. 
55. Eduardo, D. 1984. Sontag. A concept of local observability. Systems & Control Letters 5(1):41– 
47. 
56. Alexandre, Sedoglavic. 2001. A probabilistic algorithm to test local algebraic observability in 
polynomial time. In Proceedings of the 2001 international symposium on symbolic and algebraic 
computation, 309–317. 
57. Patrick, Sweeney, Can Chen, Indika Rajapakse, and Roger D Cone. 2021. Network dynam-
ics of hypothalamic feeding neurons. Proceedings of the National Academy of Sciences 118 
(14):e2011140118. 
58. Jianji, Wang and Nanning Zheng. 2014. Measures of correlation for multiple variables. arXiv 
preprint. 
59. Gabrielle, A Dotson, Can Chen, Stephen Lindsly, Anthony Cicalo, Sam Dilworth, Charles Ryan, 
Sivakumar Jeyarajan, Walter Meixner, Cooper Stansbury, Joshua Pickard, et al. (2022). Deci-
phering multi-way interactions in the human genome. Nature Communications 13 (1):5498. 
60. Stephen, Lindsly, Wenlong Jia, Haiming Chen, Sijia Liu, Scott Ronquist, Can Chen, Xingzhao 
Wen, Cooper Stansbury, Gabrielle A Dotson, Charles Ryan, et al. 2021. Functional organization 
of the maternal and paternal human 4d nucleome. IScience 24 (12):103452.

5
Contracted Product-Based Dynamical Systems 
Abstract 
In 2017, Kruppa [IFAC-PapersOnLine] introduced the contracted product-based dynami-
cal system (CPDS) representation, which expresses the system evolution as the contracted 
product between a dynamic tensor and a monomial state tensor. Unlike TVPDSs, this 
representation belongs to the class of polynomial dynamical systems. The key strength of 
the CPDS representation lies in the ability to perform efﬁcient computations using tensor 
decompositions, including CPD, TD, TTD, and HTD. Notably, it enables the computa-
tion of analytically exact arithmetic operations such as derivatives and multiplications, 
which holds particular signiﬁcance in developing controller algorithms like feedback lin-
earization or model predictive control. Furthermore, CPDSs can be efﬁciently linearized 
without the need to recompute the full tensor representation. 
5.1
Overview 
While the TVPDS (4.1) encompasses the entire class of homogeneous polynomial dynam-
ical systems, another tensor-based dynamical system, known as the contracted product-
based dynamical system (CPDS), was introduced in [ 1– 4] to explicitly represent poly-
nomial dynamical systems. Unlike TVPDSs, a CPDS models system evolution using the 
contracted product between a two-dimensional dynamic tensor and a monomial state tensor. 
This monomial tensor can be visualized as a two-dimensional hypercube, where each vertex 
corresponds to a monomial term, see Fig. 5.1. Signiﬁcantly, the CPDS representation offers 
improved memory efﬁciency compared to TVPDSs for representing polynomial dynamical 
systems, where the latter representation requires introducing additional dummy variables. 
The continuous-time CPDS with control is deﬁned as 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals left angle bracket sans serif upper A vertical bar sans serif upper X left parenthesis t right parenthesis degrees sans serif upper U left parenthesis t right parenthesis right angle bracket comma˙x(t) =
⟨
A | X(t) ◦U(t)
⟩
,
(5.1) 
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_5 
85

86
5
Contracted Product-Based Dynamical Systems
Fig. 5.1 An example of a monomial tensorsans serif upper X left parenthesis t right parenthesis degrees sans serif upper U left parenthesis t right parenthesisX(t) ◦U(t) withn equals 2n = 2 ands equals 1s = 1
where sans serif upper A element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n plus s Endscripts times 2 right parenthesis times nA ∈R(2×2×
n+s
··· ×2)×n is a left parenthesis n plus s plus 1 right parenthesis(n + s + 1)th-order tensor, and 
StartLayout 1st Row sans serif upper X left parenthesis t right parenthesis equals StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix degrees StartBinomialOrMatrix 1 Choose x Subscript n minus 1 Baseline left parenthesis t right parenthesis EndBinomialOrMatrix degrees midline horizontal ellipsis degrees StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 Baseline comma 2nd Row sans serif upper U left parenthesis t right parenthesis equals StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix degrees StartBinomialOrMatrix 1 Choose u Subscript s minus 1 Baseline left parenthesis t right parenthesis EndBinomialOrMatrix degrees midline horizontal ellipsis degrees StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript s Endscripts times 2 Baseline period EndLayoutX(t) =
[ 1
xn(t)
]
◦
[
1
xn−1(t)
]
◦· · · ◦
[ 1
x1(t)
]
∈R2×2×
n···×2,
U(t) =
[ 1
us(t)
]
◦
[
1
us−1(t)
]
◦· · · ◦
[ 1
u1(t)
]
∈R2×2×
s···×2.
The contracted productleft angle bracket dot vertical bar dot right angle bracket⟨· | ·⟩can be understood as the inner product between the ﬁrstn plus sn + s
modes of the dynamic tensor A and sans serif upper X left parenthesis t right parenthesis degrees sans serif upper U left parenthesis t right parenthesisX(t) ◦U(t) for nn times to produce an nn-dimensional 
system. Similar to TVPDSs, the CPDS representation also has an unfolded form, i.e., 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals bold upper A Subscript left parenthesis n plus s plus 1 right parenthesis Baseline left parenthesis ModifyingAbove bold u With tilde left parenthesis t right parenthesis circled times ModifyingAbove bold x With tilde left parenthesis t right parenthesis right parenthesis comma˙x(t) = A(n+s+1)
(
˜u(t) ⊗˜x(t)
)
,
(5.2) 
where bold upper A Subscript left parenthesis n plus s plus 1 right parenthesis Baseline element of double struck upper R Superscript n times 2 Super Superscript n plus sA(n+s+1) ∈Rn×2n+s is the left parenthesis n plus s plus 1 right parenthesis(n + s + 1)-mode matricization, and 
StartLayout 1st Row ModifyingAbove bold x With tilde left parenthesis t right parenthesis equals StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix circled times StartBinomialOrMatrix 1 Choose x 2 left parenthesis t right parenthesis EndBinomialOrMatrix circled times midline horizontal ellipsis circled times StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix element of double struck upper R Superscript 2 Super Superscript n Superscript Baseline comma 2nd Row ModifyingAbove bold u With tilde left parenthesis t right parenthesis equals StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix circled times StartBinomialOrMatrix 1 Choose u 2 left parenthesis t right parenthesis EndBinomialOrMatrix circled times midline horizontal ellipsis circled times StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix element of double struck upper R Superscript 2 Super Superscript s Superscript Baseline period EndLayout˜x(t) =
[ 1
x1(t)
]
⊗
[ 1
x2(t)
]
⊗· · · ⊗
[ 1
xn(t)
]
∈R2n,
˜u(t) =
[ 1
u1(t)
]
⊗
[
1
u2(t)
]
⊗· · · ⊗
[ 1
us(t)
]
∈R2s.
Polynomial dynamical systems offer a broader range of applications, spanning from 
robotics [ 5, 6], power systems [ 7, 8], aerospace [ 9, 10], ecological systems [ 11, 12], and 
biomedical engineering [ 13, 14]. Notably, many of these systems involve an exceptionally 
high number of states. Employing the full tensor representation of the CPDS (5.1) there-
fore would result in a signiﬁcant memory demand due to the exponential increase in the 
number of parameters in the dynamic tensor A, i.e.,2 Superscript n plus s Baseline n2n+sn. To address this challenge, tensor 
decomposition techniques such as CPD, TD, TTD, and HTD can be effectively leveraged 
to signiﬁcantly reduce the complexity and memory requirements. Note that homogenizing 
polynomial dynamical systems to TVPDSs incurs even higher memory demands. 
This chapter explores the applications of four tensor decomposition techniques, namely 
CPD, TD, TTD, and HTD, for CPDSs. By decomposing the dynamic tensor, these techniques 
facilitate more efﬁcient computations with reduced memory requirements. Additionally, a

5.2
Decomposed System Representations
87
linearization method for CPDSs based on decomposition factors is presented. Furthermore, 
feedback linearization for CPDSs using tensor decompositions is discussed. The content of 
this chapter is primarily based on the work of [ 1, 2]. 
5.2
Decomposed System Representations 
This section discusses four different tensor decomposition forms of the CPDS (5.1). These 
forms have the potential to greatly decrease the computational and memory complexity. 
5.2.1
CPD 
The CPD form of the CPDS (5.1) can be illustrated using the following simple example: 
StartLayout Enlarged left brace 1st Row ModifyingAbove x With dot Subscript 1 Baseline left parenthesis t right parenthesis equals a 1 plus a 2 x 1 left parenthesis t right parenthesis plus a 3 x 1 left parenthesis t right parenthesis u 1 left parenthesis t right parenthesis 2nd Row ModifyingAbove x With dot Subscript 2 Baseline left parenthesis t right parenthesis equals b 1 x 2 left parenthesis t right parenthesis plus b 2 x 1 left parenthesis t right parenthesis x 2 left parenthesis t right parenthesis plus b 3 x 1 left parenthesis t right parenthesis x 2 left parenthesis t right parenthesis u 1 left parenthesis t right parenthesis EndLayout comma
{
˙x1(t) = a1 + a2x1(t) + a3x1(t)u1(t)
˙x2(t) = b1x2(t) + b2x1(t)x2(t) + b3x1(t)x2(t)u1(t)
,
where the CPD of the dynamic tensor A can be represented as 
StartLayout 1st Row 1st Column Blank 2nd Column bold upper A Subscript x 1 Baseline equals Start 2 By 6 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 4th Column 1 5th Column 0 6th Column 0 2nd Row 1st Column 0 2nd Column 1 3rd Column 1 4th Column 0 5th Column 1 6th Column 1 EndMatrix comma bold upper A Subscript x 2 Baseline equals Start 2 By 6 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 4th Column 0 5th Column 0 6th Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 1 5th Column 1 6th Column 1 EndMatrix comma 2nd Row 1st Column Blank 2nd Column bold upper A Subscript u 1 Baseline equals Start 2 By 6 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 0 4th Column 1 5th Column 1 6th Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 1 4th Column 0 5th Column 0 6th Column 1 EndMatrix comma bold upper A Subscript f Baseline equals Start 2 By 6 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 4th Column 0 5th Column 0 6th Column 0 2nd Row 1st Column 0 2nd Column 0 3rd Column 0 4th Column 1 5th Column 1 6th Column 1 EndMatrix comma 3rd Row 1st Column Blank 2nd Column bold italic lamda equals Start 1 By 6 Matrix 1st Row 1st Column a 1 2nd Column a 2 3rd Column a 3 4th Column b 1 5th Column b 2 6th Column b 3 EndMatrix period EndLayoutAx1 =
[1 0 0 1 0 0
0 1 1 0 1 1
]
, Ax2 =
[1 1 1 0 0 0
0 0 0 1 1 1
]
,
Au1 =
[1 1 0 1 1 0
0 0 1 0 0 1
]
, A f =
[1 1 1 0 0 0
0 0 0 1 1 1
]
,
λ =
[
a1 a2 a3 b1 b2 b3
]
.
The factor matrices can be constructed column-wise using coefﬁcients a Subscript ja j or b Subscript jb j that corre-
spond to each column. If the state or control inputs in the polynomial dynamical system is 
multiplied by the coefﬁcient, the column of the factor matrices bold upper A Subscript x Sub Subscript jAx j or bold upper A Subscript u Sub Subscript jAu j is set to Start 1 By 2 Matrix 1st Row 1st Column 0 2nd Column 1 EndMatrix Superscript down tack
[
0 1
]T. 
Otherwise, it is set to Start 1 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 EndMatrix Superscript down tack
[
1 0
]T. The last factor matrix bold upper A Subscript fA f shows to which state equations the 
coefﬁcient belongs. Therefore, every CPDS can be represented in the CPD form. 
Proposition 5.1 ([ 1]) The CPDS (5.1) can be represented in the CPD form as 
StartLayout 1st Row 1st Column ModifyingAbove bold x With dot left parenthesis t right parenthesis equals 2nd Column bold upper A Subscript f Baseline left parenthesis bold italic lamda circled dot left parenthesis bold upper A Subscript u Sub Subscript s Subscript Superscript down tack Baseline StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis circled dot midline horizontal ellipsis circled dot left parenthesis bold upper A Subscript u 1 Superscript down tack Baseline StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis 2nd Row 1st Column Blank 2nd Column circled dot left parenthesis bold upper A Subscript x Sub Subscript n Subscript Superscript down tack Baseline StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis circled dot midline horizontal ellipsis circled dot left parenthesis bold upper A Subscript x 1 Superscript down tack Baseline StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis right parenthesis period EndLayout
˙x(t) =A f
(
λ ʘ
)
AT
us
[ 1
us(t)
] )
ʘ · · · ʘ
)
AT
u1
[ 1
u1(t)
] )
ʘ
)
AT
xn
[ 1
xn(t)
] )
ʘ · · · ʘ
)
AT
x1
[ 1
x1(t)
] ))
.
(5.3) 
More importantly, the CPD form of CPDSs can help to construct systems representations 
with TD, TTD, and HTD.

88
5
Contracted Product-Based Dynamical Systems
5.2.2
TD 
As mentioned previously, every CPD can be rewritten into the TD representation. Therefore, 
it is only required to translate the weight vector bold italic lamdaλ from the CPD form to a diagonal tensor 
for obtaining the TD form of the CPDS (5.1). 
Proposition 5.2 ([ 1]) The CPDS (5.1) can be represented in the TD form as 
StartLayout 1st Row 1st Column ModifyingAbove bold x With dot left parenthesis t right parenthesis equals 2nd Column bold upper A Subscript f Baseline left parenthesis sans serif upper S times Subscript 1 Baseline left parenthesis bold upper A Subscript u Sub Subscript s Subscript Superscript down tack Baseline StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis times Subscript 2 Baseline midline horizontal ellipsis times Subscript s Baseline left parenthesis bold upper A Subscript u 1 Superscript down tack Baseline StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis 2nd Row 1st Column Blank 2nd Column times Subscript s plus 1 Baseline left parenthesis bold upper A Subscript x Sub Subscript n Subscript Superscript down tack Baseline StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis times Subscript s plus 2 Baseline midline horizontal ellipsis times Subscript s plus n Baseline left parenthesis bold upper A Subscript x 1 Superscript down tack Baseline StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis right parenthesis comma EndLayout
˙x(t) =A f
(
S ×1
)
AT
us
[ 1
us(t)
] )
×2 · · · ×s
)
AT
u1
[ 1
u1(t)
] )
×s+1
)
AT
xn
[ 1
xn(t)
] )
×s+2 · · · ×s+n
)
AT
x1
[ 1
x1(t)
] ))
,
(5.4) 
wheresans serif upper SS is a diagonal tensor containing the weightsbold italic lamdaλ from the CPD form along its diagonal. 
The full TD form can be demanding on memory resources. As a result, truncation tech-
niques may be employed to decrease the size of the core tensor S. 
5.2.3
TTD 
The TTD form of the CPDS (5.1) can also be translated from its CPD form by setting the 
core tensors as follows: 
StartLayout 1st Row 1st Column Blank 2nd Column left parenthesis sans serif upper A Subscript u Sub Subscript s Subscript Baseline right parenthesis Subscript j 1 colon Baseline equals left parenthesis bold upper A Subscript u Sub Subscript s Subscript Baseline right parenthesis Subscript j 1 colon Baseline comma 2nd Row 1st Column Blank 2nd Column left parenthesis sans serif upper A Subscript u Sub Subscript i Subscript Baseline right parenthesis Subscript colon j Sub Subscript s minus i plus 1 Subscript colon Baseline equals diag left parenthesis left parenthesis bold upper A Subscript u Sub Subscript i Subscript Baseline right parenthesis Subscript j Sub Subscript s minus i plus 1 Subscript colon Baseline right parenthesis for i equals 1 comma 2 comma ellipsis comma s minus 1 comma 3rd Row 1st Column Blank 2nd Column left parenthesis sans serif upper A Subscript x Sub Subscript i Subscript Baseline right parenthesis Subscript colon j Sub Subscript n plus s minus i plus 1 Subscript colon Baseline equals diag left parenthesis left parenthesis bold upper A Subscript s Sub Subscript i Subscript Baseline right parenthesis Subscript j Sub Subscript n plus s minus i plus 1 Subscript colon Baseline right parenthesis for i equals 1 comma 2 comma ellipsis comma n comma 4th Row 1st Column Blank 2nd Column left parenthesis sans serif upper A Subscript f Baseline right parenthesis Subscript colon j Sub Subscript n plus s plus 1 Subscript Baseline equals bold italic lamda circled dot left parenthesis bold upper A Subscript f Baseline right parenthesis Subscript j Sub Subscript n plus s plus 1 Subscript colon Superscript down tack Baseline period EndLayout(Aus) j1: = (Aus) j1:,
(Aui ): js−i+1: = diag
(
(Aui ) js−i+1:
)
for i = 1, 2, . . . , s −1,
(Axi ): jn+s−i+1: = diag
(
(Asi ) jn+s−i+1:
)
for i = 1, 2, . . . , n,
(A f ): jn+s+1 = λ ʘ (A f )T
jn+s+1:.
Proposition 5.3 ([ 1]) The CPDS (5.1) can be represented in the TTD form as 
StartLayout 1st Row 1st Column ModifyingAbove bold x With dot left parenthesis t right parenthesis equals 2nd Column left parenthesis sans serif upper A Subscript u Sub Subscript s Subscript Baseline times Subscript 2 Baseline StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis midline horizontal ellipsis left parenthesis sans serif upper A Subscript u 1 Baseline times Subscript 2 Baseline StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis 2nd Row 1st Column Blank 2nd Column left parenthesis sans serif upper A Subscript x Sub Subscript n Subscript Baseline times Subscript 2 Baseline StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis midline horizontal ellipsis left parenthesis sans serif upper A Subscript x 1 Baseline times Subscript 2 Baseline StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix right parenthesis sans serif upper A Subscript f Baseline period EndLayout
˙x(t) =
)
Aus ×2
[ 1
us(t)
] )
· · ·
)
Au1 ×2
[ 1
u1(t)
] )
)
Axn ×2
[ 1
xn(t)
] )
· · ·
)
Ax1 ×2
[ 1
x1(t)
] )
A f .
(5.5) 
Much like in the case of TD, the direct transformation from CPD to TTD can be memory-
intensive. Therefore, truncation techniques that employ singular value decomposition can 
be utilized to attain lower TT-ranks.

5.3
Linearization
89
5.2.4
HTD 
The direct conversion from the CPD form of the CPDS (5.1) to its HTD form can be achieved 
by constructing a tree for the dynamic tensor A. The leaf node matrices are equal to the factor 
matricesbold upper A Subscript u Sub Subscript iAui , bold upper A Subscript x Sub Subscript iAxi , andbold upper A Subscript fA f in the CPD form. The transfer function bold upper G Subscript u Sub Subscript s Subscript midline horizontal ellipsis u 1 x Sub Subscript n Subscript midline horizontal ellipsis x 1 fGus···u1xn···x1 f of the top 
node is a diagonal matrix containing the CPD weightsbold italic lamdaλ along its diagonal, and other transfer 
functions are set to 
bold upper G equals sans serif 1 Subscript left parenthesis 2 comma StartSet 1 comma 2 comma 3 EndSet right parenthesis Baseline commaG = 1(2,{1,2,3}),
where sans serif 1 element of double struck upper R Superscript r times r times r1 ∈Rr×r×r is a diagonal tensor that contains ones along its diagonal. Here rr is the 
length of the weight vector bold italic lamdaλ. 
Proposition 5.4 ([ 1]) The CPDS (5.1) can be represented in the THD form as 
ModifyingAbove bold x With dot left parenthesis t right parenthesis equals sans serif upper A times Subscript 1 Baseline StartBinomialOrMatrix 1 Choose u Subscript s Baseline left parenthesis t right parenthesis EndBinomialOrMatrix times Subscript 2 Baseline midline horizontal ellipsis times Subscript s Baseline StartBinomialOrMatrix 1 Choose u 1 left parenthesis t right parenthesis EndBinomialOrMatrix times Subscript s plus 1 Baseline StartBinomialOrMatrix 1 Choose x Subscript n Baseline left parenthesis t right parenthesis EndBinomialOrMatrix times Subscript s plus 2 Baseline midline horizontal ellipsis times Subscript s plus n Baseline StartBinomialOrMatrix 1 Choose x 1 left parenthesis t right parenthesis EndBinomialOrMatrix comma˙x(t) = A ×1
[ 1
us(t)
]
×2 · · · ×s
[ 1
u1(t)
]
×s+1
[ 1
xn(t)
]
×s+2 · · · ×s+n
[ 1
x1(t)
]
,
(5.6) 
where thepp-mode products can be computed by replacing the leaf nodesbold upper A Subscript u Sub Subscript iAui andbold upper A Subscript x Sub Subscript iAxi in the 
tree of A with Start 1 By 2 Matrix 1st Row 1st Column 1 2nd Column u Subscript i Baseline left parenthesis t right parenthesis EndMatrix bold upper A Subscript u Sub Subscript i
[
1 ui(t)
]
Aui and Start 1 By 2 Matrix 1st Row 1st Column 1 2nd Column x Subscript i Baseline left parenthesis t right parenthesis EndMatrix bold upper A Subscript x Sub Subscript i
[
1 xi(t)
]
Axi . 
Again, the conversion from the CPD form to the HTD form of the CPDS (5.1) can also 
be inefﬁcient in terms of memory usage. However, truncation techniques can be utilized by 
leveraging the SVD of the matricizations of the original tensor, which can help to optimize 
the process. 
5.3
Linearization 
Linearization is a well-established technique for analyzing nonlinear dynamical systems 
[ 15– 17]. Tensor-based differentiation provides an efﬁcient approach for linearizing CPDSs. 
Lemma 5.1 ([ 1]) Given an nn-dimensional polynomial equation represented as 
h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper A comma sans serif upper X right angle bracket commah(x) = ⟨A, X⟩,
where sans serif upper A element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2A ∈R2×2×
n···×2, and 
sans serif upper X equals StartBinomialOrMatrix 1 Choose x Subscript n Baseline EndBinomialOrMatrix degrees StartBinomialOrMatrix 1 Choose x Subscript n minus 1 Baseline EndBinomialOrMatrix degrees midline horizontal ellipsis degrees StartBinomialOrMatrix 1 Choose x 1 EndBinomialOrMatrix element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 Baseline commaX =
[ 1
xn
]
◦
[ 1
xn−1
]
◦· · · ◦
[ 1
x1
]
∈R2×2×
n···×2,
the partial derivative of h left parenthesis bold x right parenthesish(x) with respect to x Subscript jx j can be computed as

90
5
Contracted Product-Based Dynamical Systems
StartFraction partial differential Over partial differential x Subscript j Baseline EndFraction h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper A Subscript x Sub Subscript j Subscript Baseline comma sans serif upper X right angle bracket comma ∂
∂x j
h(x) = ⟨Ax j , X⟩,
(5.7) 
where sans serif upper A Subscript x Sub Subscript j Subscript Baseline equals sans serif upper A times Subscript n minus j plus 1 Baseline Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrixAx j = A ×n−j+1
[0 1
0 0
]
. 
Therefore, the linearization of the CPDS (5.1) can be readily obtained using the above 
lemma. 
Proposition 5.5 ([ 1]) The linearized system matrices for the CPDS (5.1) can be analytically 
derived as 
StartLayout 1st Row 1st Column bold upper A 2nd Column equals left angle bracket sans serif upper A Subscript l i n Baseline vertical bar sans serif upper X Subscript e Baseline degrees sans serif upper U Subscript e Baseline right angle bracket element of double struck upper R Superscript n times n Baseline comma 2nd Row 1st Column bold upper B 2nd Column equals left angle bracket sans serif upper B Subscript l i n Baseline vertical bar sans serif upper X Subscript e Baseline degrees sans serif upper U Subscript e Baseline right angle bracket element of double struck upper R Superscript n times s Baseline comma EndLayout A = ⟨Alin | Xe ◦Ue⟩∈Rn×n,
B = ⟨Blin | Xe ◦Ue⟩∈Rn×s,
where sans serif upper A Subscript l i n Baseline element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 right parenthesis times n times nAlin ∈R(2×2×
n···×2)×n×n and sans serif upper B Subscript l i n Baseline element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 right parenthesis times n times sBlin ∈R(2×2×
n···×2)×n×s are left parenthesis n plus 2 right parenthesis(n + 2)th-order tensors 
such that 
StartLayout 1st Row 1st Column left parenthesis sans serif upper A Subscript l i n Baseline right parenthesis Subscript colon colon midline horizontal ellipsis colon j 2nd Column equals sans serif upper A Subscript x Sub Subscript j Subscript Baseline for j equals 1 comma 2 comma ellipsis comma n comma 2nd Row 1st Column left parenthesis sans serif upper B Subscript l i n Baseline right parenthesis Subscript colon colon midline horizontal ellipsis colon j 2nd Column equals sans serif upper A Subscript u Sub Subscript j Subscript Baseline for j equals 1 comma 2 comma ellipsis comma s period EndLayout(Alin)::···: j = Ax j for j = 1, 2, . . . , n,
(Blin)::···: j = Au j for j = 1, 2, . . . , s.
The linearized system matrices A and B can be directly computed from the dynamic tensor 
A using the contracted andpp-mode tensor matrix products. This computation is particularly 
efﬁcient if the CPDS is provided in the CPD, TD, TTD, or HTD form without converting 
to the full tensors [ 1]. 
5.4
Feedback Linearization 
Feedback linearization is a control design technique that can convert an input afﬁne nonlinear 
system into a linear system with a change of variables and a feedback control law [ 18– 21]. 
This technique involves applying a nonlinear transformation that maps the original nonlinear 
system dynamics to a linear system dynamics and then designing a feedback control based on 
the transformed system. Consider a nonlinear input afﬁne single-input single-output (SISO) 
system 
StartLayout Enlarged left brace 1st Row ModifyingAbove bold x With dot left parenthesis t right parenthesis equals bold f left parenthesis bold x left parenthesis t right parenthesis right parenthesis plus bold g left parenthesis bold x left parenthesis t right parenthesis right parenthesis u left parenthesis t right parenthesis 2nd Row y equals c left parenthesis bold x left parenthesis t right parenthesis right parenthesis EndLayout comma
{
˙x(t) = f
(
x(t)
)
+ g
(
x(t)
)
u(t)
y = c
(
x(t)
)
,
(5.8) 
wherebold ff and bold gg are nonlinear vector ﬁelds, andcc is an output scalar function. Suppose that bold ff, 
bold gg, andcc are sufﬁciently smooth. The control law with a reference inputrr based on feedback 
linearization is given by 
u equals StartFraction minus sigma summation Underscript j equals 0 Overscript q Endscripts alpha Subscript j Baseline upper L Subscript bold f Superscript j Baseline c left parenthesis bold x right parenthesis plus alpha 0 r Over upper L Subscript bold g Baseline upper L Subscript bold f Superscript q minus 1 Baseline c left parenthesis bold x right parenthesis EndFraction periodu =
−∑q
j=0 α j L j
f c(x) + α0r
LgLq−1
f
c(x)
.
(5.9)

5.4
Feedback Linearization
91
The closed-loop system exhibits a linear response from the reference input rr to the system 
output yy governed by the following linear differential equation: 
alpha Subscript q Baseline StartFraction partial differential Superscript q Baseline Over partial differential t Superscript q Baseline EndFraction y plus alpha Subscript q minus 1 Baseline StartFraction partial differential Superscript q minus 1 Baseline Over partial differential t Superscript q minus 1 Baseline EndFraction y plus midline horizontal ellipsis plus alpha 1 StartFraction partial differential Over partial differential t EndFraction y plus alpha 0 y equals alpha 0 r periodαq
∂q
∂tq y + αq−1
∂q−1
∂tq−1 y + · · · + α1
∂
∂t y + α0y = α0r.
The Lie derivative of the scalar function cc along a vector ﬁeld bold ff is deﬁned as 
upper L Subscript bold f Baseline c left parenthesis bold x right parenthesis equals sigma summation Underscript i equals 1 Overscript n Endscripts f Subscript i Baseline left parenthesis bold x right parenthesis StartFraction partial differential c left parenthesis bold x right parenthesis Over partial differential x Subscript i Baseline EndFraction equals left angle bracket bold f left parenthesis bold x right parenthesis comma nabla c left parenthesis bold x right parenthesis right angle bracket commaLfc(x) =
n
∑
i=1
fi(x)∂c(x)
∂xi
=
⟨
f(x), ∇c(x)
⟩
,
and upper L Subscript bold f Superscript j Baseline c left parenthesis bold x right parenthesisL j
f c(x) denotes the j jth Lie derivative. 
5.4.1
Higher-Order Polynomials 
Computing the Lie derivative involves higher-order terms, making it necessary to introduce 
higher-order polynomials. Deﬁne higher-order polynomials in the following form: 
h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H comma sans serif upper X Superscript l Baseline right angle bracket commah(x) = ⟨H, Xl⟩,
(5.10) 
where sans serif upper H element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n l Endscripts times 2 right parenthesis times nH ∈R(2×2×
nl···×2)×n is a left parenthesis n l plus 1 right parenthesis(nl + 1)th-order tensor, and 
StartLayout 1st Row sans serif upper X Superscript l Baseline equals left parenthesis StartBinomialOrMatrix 1 Choose x Subscript n Baseline EndBinomialOrMatrix degrees StartBinomialOrMatrix 1 Choose x Subscript n minus 1 Baseline EndBinomialOrMatrix degrees midline horizontal ellipsis degrees StartBinomialOrMatrix 1 Choose x 1 EndBinomialOrMatrix right parenthesis degrees midline horizontal ellipsis Overscript l Endscripts normal degree left parenthesis StartBinomialOrMatrix 1 Choose x Subscript n Baseline EndBinomialOrMatrix degrees StartBinomialOrMatrix 1 Choose x Subscript n minus 1 Baseline EndBinomialOrMatrix degrees midline horizontal ellipsis degrees StartBinomialOrMatrix 1 Choose x 1 EndBinomialOrMatrix right parenthesis element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript n l Endscripts times 2 Baseline period EndLayoutXl =
) [ 1
xn
]
◦
[ 1
xn−1
]
◦· · · ◦
[ 1
x1
] )
◦
l· · · ◦
) [ 1
xn
]
◦
[ 1
xn−1
]
◦· · · ◦
[ 1
x1
] )
∈R2×2×
nl···×2.
In the higher-order form (5.10), the maximal order of eachx Subscript jx j in the monomials with expo-
nents up to ll. Many arithmetic operations including multiplication, differentiation, and Lie 
derivative can be computed in the tensor form [ 2]. 
Proposition 5.6 ([ 2]) Given two nn-dimensional polynomials of the forms 
h 1 left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H Subscript 1 Baseline comma sans serif upper X Superscript l 1 Baseline right angle bracket and h 2 left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H Subscript 2 Baseline comma sans serif upper X Superscript l 2 Baseline right angle bracket commah1(x) = ⟨H1, Xl1⟩and h2(x) = ⟨H2, Xl2⟩,
the product of the two polynomial can be computed as 
h 1 left parenthesis bold x right parenthesis h 2 left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H Subscript 1 Baseline degrees sans serif upper H Subscript 2 Baseline comma sans serif upper X Superscript left parenthesis l 1 plus l 2 right parenthesis Baseline right angle bracket periodh1(x)h2(x) = ⟨H1 ◦H2, X(l1+l2)⟩.
(5.11) 
The following result generalizes Lemma 5.1. Let bold upper P equals Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrixP =
[0 1
0 0
]
. 
Proposition 5.7 ([ 2]) Given an nn-dimensional polynomial of the form 
h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H comma sans serif upper X Superscript l Baseline right angle bracket commah(x) = ⟨H, Xl⟩,

92
5
Contracted Product-Based Dynamical Systems
the partial derivative of hh with respect to x Subscript jx j can be computed as 
StartFraction partial differential Over partial differential x Subscript j Baseline EndFraction h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H Subscript j Baseline comma sans serif upper X Superscript l Baseline right angle bracket comma ∂
∂x j
h(x) = ⟨H j, Xl⟩,
(5.12) 
where sans serif upper H Subscript j Baseline equals sigma summation Underscript i equals 1 Overscript l Endscripts sans serif upper H times Subscript i n minus j plus 1 Baseline bold upper PH j = ∑l
i=1 H ×in−j+1 P. 
Proposition 5.8 ([ 2]) Given an nn-dimensional polynomial system and a polynomial of the 
forms 
bold h left parenthesis bold x right parenthesis equals left angle bracket sans serif upper H vertical bar sans serif upper X Superscript l Baseline right angle bracket and c left parenthesis bold x right parenthesis equals left angle bracket sans serif upper G comma sans serif upper X Superscript l Baseline right angle bracket commah(x) = ⟨H | Xl⟩and c(x) = ⟨G, Xl⟩,
respectively, the Lie derivative of cc along h can be computed as 
upper L Subscript bold h Superscript j Baseline equals left angle bracket sans serif upper L Subscript j Baseline vertical bar sans serif upper X Superscript l left parenthesis j plus 1 right parenthesis Baseline right angle bracket commaL j
h = ⟨L j | Xl( j+1)⟩,
(5.13) 
where 
sans serif upper L Subscript j Baseline equals StartLayout Enlarged left brace 1st Row 1st Column sans serif upper G 2nd Column for j equals 0 2nd Row 1st Column sigma summation Underscript i equals 1 Overscript n Endscripts sans serif upper H Subscript colon colon midline horizontal ellipsis colon i Baseline normal degree left parenthesis sigma summation Underscript k equals 1 Overscript l Endscripts sans serif upper G times Subscript k n minus i plus 1 Baseline bold upper P right parenthesis 2nd Column for j equals 1 3rd Row 1st Column sigma summation Underscript i equals 1 Overscript n Endscripts sans serif upper H Subscript colon colon midline horizontal ellipsis colon i Baseline normal degree left parenthesis sigma summation Underscript k equals 1 Overscript j l Endscripts sans serif upper L Subscript j minus 1 Baseline times Subscript k n minus i plus 1 Baseline bold upper P right parenthesis 2nd Column otherwise EndLayout periodL j =
⎧
⎪⎨
⎪⎩
G
for j = 0
∑n
i=1 H::···:i ◦
( ∑l
k=1 G ×kn−i+1 P
)
for j = 1
∑n
i=1 H::···:i ◦
( ∑jl
k=1 L j−1 ×kn−i+1 P
)
otherwise
.
The proofs of the above propositions can be found in [ 2]. 
5.4.2
CPDS Feedback Linearization 
Consider the following input afﬁne SISO CPDS: 
StartLayout Enlarged left brace 1st Row ModifyingAbove bold x With dot left parenthesis t right parenthesis equals left angle bracket sans serif upper A vertical bar sans serif upper X left parenthesis t right parenthesis right angle bracket plus left angle bracket sans serif upper B vertical bar sans serif upper X left parenthesis t right parenthesis right angle bracket u left parenthesis t right parenthesis 2nd Row y left parenthesis t right parenthesis equals left angle bracket sans serif upper C comma sans serif upper X left parenthesis t right parenthesis right angle bracket EndLayout comma
{
˙x(t) =
⟨
A | X(t)
⟩
+
⟨
B | X(t)
⟩
u(t)
y(t) =
⟨
C, X(t)
⟩
,
(5.14) 
wheresans serif upper A element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 right parenthesis times nA ∈R(2×2×
n···×2)×n,sans serif upper B element of double struck upper R Superscript left parenthesis 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2 right parenthesis times nB ∈R(2×2×
n···×2)×n, andsans serif upper C element of double struck upper R Superscript 2 times 2 times midline horizontal ellipsis Overscript n Endscripts times 2C ∈R2×2×
n···×2. Assume that the CPDS 
(5.14) is controllable, observable, and feedback linearizable with well-deﬁned relative 
degree qq. 
Proposition 5.9 ([ 2]) The feedback linearizing controller for the input afﬁne SISO CPDS 
(5.14) can be computed as 
u left parenthesis t right parenthesis equals StartFraction minus left angle bracket sigma summation Underscript j equals 0 Overscript q Endscripts alpha Subscript j Baseline upper L Subscript j Baseline comma sans serif upper X Superscript q plus 1 Baseline left parenthesis t right parenthesis right angle bracket plus alpha 0 r Over left angle bracket sans serif upper K Subscript q minus 1 Baseline comma sans serif upper X Superscript q plus 1 Baseline left parenthesis t right parenthesis right angle bracket EndFraction commau(t) =
−
⟨∑q
j=0 α j L j, Xq+1(t)
⟩
+ α0r
⟨
Kq−1, Xq+1(t)
⟩
,
(5.15)

5.5
Applications
93
where 
sans serif upper L Subscript j Baseline equals StartLayout Enlarged left brace 1st Row 1st Column sans serif upper C 2nd Column for j equals 0 2nd Row 1st Column sigma summation Underscript i equals 1 Overscript n Endscripts sans serif upper A Subscript colon colon midline horizontal ellipsis colon i Baseline normal degree left parenthesis sigma summation Underscript k equals 1 Overscript l Endscripts sans serif upper C times Subscript k n minus i plus 1 Baseline bold upper P right parenthesis 2nd Column for j equals 1 3rd Row 1st Column sigma summation Underscript i equals 1 Overscript n Endscripts sans serif upper A Subscript colon colon midline horizontal ellipsis colon i Baseline normal degree left parenthesis sigma summation Underscript k equals 1 Overscript j l Endscripts sans serif upper L Subscript j minus 1 Baseline times Subscript k n minus i plus 1 Baseline bold upper P right parenthesis 2nd Column otherwise EndLayout commaL j =
⎧
⎪⎨
⎪⎩
C
for j = 0
∑n
i=1 A::···:i ◦(∑l
k=1 C ×kn−i+1 P)
for j = 1
∑n
i=1 A::···:i ◦(∑jl
k=1 L j−1 ×kn−i+1 P) otherwise
,
and 
sans serif upper K Subscript j Baseline equals sigma summation Underscript i equals 1 Overscript n Endscripts sans serif upper B Subscript colon colon midline horizontal ellipsis colon i Baseline normal degree left parenthesis sigma summation Underscript k equals 1 Overscript j plus 1 Endscripts sans serif upper L Subscript j Baseline times Subscript k n minus i plus 1 Baseline bold upper P right parenthesis periodK j =
n
∑
i=1
B::···:i ◦
( j+1
∑
k=1
L j ×kn−i+1 P
)
.
Proof The result follows immediately from (5.9) and Proposition 5.8.
⬜
Many operations, such as summation, multiplication, outer product, andpp-mode product, 
can be efﬁciently achieved using CPD, TD, TTD, and HTD, as mentioned earlier. Therefore, 
if CPDSs are provided in the CPD, TD, TTD, or HTD form, as described in the last section, 
it can signiﬁcantly increase the efﬁciency of designing feedback linearizing controllers for 
large-scale systems [ 2]. It’s worth noting that this approach can be generalized to multiple-
input multiple-output (MIMO) polynomial dynamical systems as well. 
5.5
Applications 
5.5.1
HVAC Systems 
This example, adapted from [ 1], considers a complex model of a heating, ventilation, and 
air conditioning (HVAC) system introduced in [ 22]. The model is created based on heat and 
mass balances and can be represented by a CPDS of the form (5.1) with 17 states and 10 
inputs. Hence, the full tensor representation consists of 17 times 2 Superscript 27 Baseline equals 2.3 times 10 Superscript 917 × 227 = 2.3 × 109 parameters. 
The four tensor decomposition forms (CPD, TD, TTD, and HTD) are applied to represent 
this CPDS. The memory requirements for the four forms of the CPDS are presented in Table 
5.1. First, all four forms signiﬁcantly reduce the total number of parameters in the dynamic 
tensor. In particular, the CPD form achieves the lowest memory demand, even though it 
cannot be reduced further through truncation. On the other hand, the TTD and HTD forms 
can be truncated by setting a desired approximation threshold without signiﬁcant loss in 
the dynamical system behavior. Therefore, the tensor decomposition forms of the CPDS 
can allow for a highly efﬁcient simulation of the system and control design (e.g., feedback 
linearization). 
5.5.2
Synthetic Data: Feedback Linearization 
This example, adapted from [ 2], examines an SISO input afﬁne polynomial dynamical 
system (i.e., a CPDS) given by

94
5
Contracted Product-Based Dynamical Systems
Table 5.1 Memory requirement comparisons for the four tensor decomposition forms of the HVAC 
CPDS. This table was adapted from [ 1] with permission 
Full
CPD
TD
TTD
HTD 
Exact
2.3 times 10 Superscript 92.3 × 109
3834
85482
152658
4100814 
Truncated
2.3 times 10 Superscript 92.3 × 109
3834
85482
9779
7634 
StartLayout Enlarged left brace 1st Row StartBinomialOrMatrix ModifyingAbove x With dot Subscript 1 Baseline left parenthesis t right parenthesis Choose ModifyingAbove x With dot Subscript 2 Baseline left parenthesis t right parenthesis EndBinomialOrMatrix equals StartBinomialOrMatrix 2 x 2 left parenthesis t right parenthesis Choose minus x 1 left parenthesis t right parenthesis plus 0.2 x 1 left parenthesis t right parenthesis x 2 left parenthesis t right parenthesis EndBinomialOrMatrix plus StartBinomialOrMatrix 0 Choose u left parenthesis t right parenthesis EndBinomialOrMatrix 2nd Row y equals 1 plus 2 x 1 left parenthesis t right parenthesis EndLayout period
⎧
⎪⎪⎨
⎪⎪⎩
[
˙x1(t)
˙x2(t)
]
=
[
2x2(t)
−x1(t) + 0.2x1(t)x2(t)
]
+
[
0
u(t)
]
y = 1 + 2x1(t)
.
The system can be represented in the CPD form with factor matrices 
StartLayout 1st Row 1st Column sans serif upper A 2nd Column equals StartSet Start 2 By 3 Matrix 1st Row 1st Column 0 2nd Column 1 3rd Column 0 2nd Row 1st Column 1 2nd Column 0 3rd Column 1 EndMatrix comma Start 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 0 2nd Column 1 3rd Column 1 EndMatrix comma Start 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 0 2nd Column 1 3rd Column 1 EndMatrix comma Start 3 By 1 Matrix 1st Row 2 2nd Row negative 1 3rd Row 0.2 EndMatrix EndSet comma 2nd Row 1st Column sans serif upper B 2nd Column equals StartSet StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 0 Choose 1 EndBinomialOrMatrix comma 1 EndSet comma 3rd Row 1st Column sans serif upper C 2nd Column equals StartSet Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 1 2nd Row 1st Column 1 2nd Column 0 EndMatrix comma StartBinomialOrMatrix 2 Choose 1 EndBinomialOrMatrix EndSet period EndLayoutA =
{ [0 1 0
1 0 1
]
,
[1 0 0
0 1 1
]
,
[1 0 0
0 1 1
]
,
⎡
⎣
2
−1
0.2
⎤
⎦
}
,
B =
{ [1
0
]
,
[1
0
]
,
[0
1
]
, 1
}
,
C =
{ [1 1
0 0
]
,
[0 1
1 0
]
,
[2
1
] }
.
The Lie derivative can be computed in the CPD form using tensor algebra, i.e., 
StartLayout 1st Row 1st Column sans serif upper L Subscript 1 2nd Column equals StartSet StartBinomialOrMatrix 0 Choose 1 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma 4 EndSet comma 2nd Row 1st Column sans serif upper L Subscript 2 2nd Column equals StartSet Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 0 2nd Column 1 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 0 2nd Row 1st Column 1 2nd Column 1 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrix comma Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 0 2nd Column 0 EndMatrix comma StartBinomialOrMatrix negative 4 Choose 0.8 EndBinomialOrMatrix EndSet comma 3rd Row 1st Column sans serif upper K Subscript 0 2nd Column equals StartSet StartBinomialOrMatrix 0 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 0 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 0 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 0 Choose 0 EndBinomialOrMatrix comma 0 EndSet comma 4th Row 1st Column sans serif upper K Subscript 1 2nd Column equals StartSet StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma StartBinomialOrMatrix 1 Choose 0 EndBinomialOrMatrix comma 4 EndSet period EndLayoutL1 =
{ [0
1
]
,
[1
0
]
,
[1
0
]
,
[1
0
]
, 4
}
,
L2 =
{ [1 0
0 1
]
,
[0 0
1 1
]
,
[1 1
0 0
]
,
[1 1
0 0
]
,
[1 1
0 0
]
,
[1 1
0 0
]
,
[−4
0.8
] }
,
K0 =
{ [0
0
]
,
[0
0
]
,
[0
0
]
,
[0
0
]
, 0
}
,
K1 =
{ [1
0
]
,
[1
0
]
,
[1
0
]
,
[1
0
]
,
[1
0
]
,
[1
0
]
, 4
}
.
The system has a relative degree ofq equals 2q = 2 and is both controllable and observable. The linear 
behavior in the closed loop therefore is given by 
alpha 2 y With two dots plus alpha 1 ModifyingAbove y With dot plus alpha 0 y equals alpha 0 r commaα2 ¨y + α1 ˙y + α0y = α0r,
where the parameters alpha 0 equals alpha 1 equals 10α0 = α1 = 10 and alpha 2 equals 1α2 = 1 are chosen. Finally, by evaluating (5.15), 
the feedback linearizing controller is given by

References
95
u equals StartFraction 10 plus 16 x 1 plus 40 x 2 plus 0.8 x 1 x 2 plus 10 r Over 4 EndFraction periodu = 10 + 16x1 + 40x2 + 0.8x1x2 + 10r
4
.
The effectiveness of this feedback linearizing controller can be veriﬁed with numerical 
simulations, where the system behaves as the speciﬁed second-order linear system. 
References 
1. Kruppa, Kai. 2017. Comparison of tensor decomposition methods for simulation of multilinear 
time-invariant systems with the mti toolbox. IFAC-PapersOnLine 50 (1): 5610–5615. 
2. Kruppa, Kai and Gerwald Lichtenberg. 2018. Feedback linearization of multilinear time-invariant 
systems using tensor decomposition methods. In SIMULTECH, 232–243. 
3. Pangalos, Georg, Annika Eichler, and Gerwald Lichtenberg. 2015. Hybrid multilinear modeling 
and applications. In Simulation and modeling methodologies, technologies and applications: 
international conference, SIMULTECH 2013 Reykjavík, Iceland, 2013 Revised Selected Papers, 
71–85. Berlin: Springer. 
4. Lichtenberg, Gerwald. 2011. Hybrid tensor systems. Ph.D. thesis 
5. Richards, Spencer M., Felix Berkenkamp, and Andreas Krause. 2018. The lyapunov neural 
network: Adaptive stability certiﬁcation for safe learning of dynamical systems. In Conference 
on robot learning, 466–476. PMLR. 
6. Capco, Jose, Mohab Safey El. Din, and Josef Schicho. 2023. Positive dimensional paramet-
ric polynomial systems, connectivity queries and applications in robotics. Journal of Symbolic 
Computation 115: 320–345. 
7. Zhou, Yongzhi, Wu. Hao, Gu. Chenghong, and Yonghua Song. 2016. A novel method of poly-
nomial approximation for parametric problems in power systems. IEEE Transactions on Power 
Systems 32 (4): 3298–3307. 
8. Xiao, Weidong, Magnus GJ Lind, William G Dunford, and Antoine Capel. 2006. Real-time 
identiﬁcation of optimal operating points in photovoltaic power systems. IEEE Transactions on 
industrial Electronics 53 (4): 1017–1026. 
9. Zheng, Xiaohu, Wen Yao, Yunyang Zhang, and Xiaoya Zhang. 2022. Parameterized consistency 
learning-based deep polynomial chaos neural network method for reliability analysis in aerospace 
engineering. arXiv:2203.15655. 
10. Iyer, Ganesh Neelakanta, Bharadwaj Veeravalli, and Sakthi Ganesh Krishnamoorthy. 2012. On 
handling large-scale polynomial multiplications in compute cloud environments using divisible 
load paradigm. IEEE Transactions on Aerospace and Electronic Systems 48 (1): 820–831. 
11. Sabbar, Yassine, and Driss Kiouach. 2023. New method to obtain the acute sill of an ecological 
model with complex polynomial perturbation. Mathematical Methods in the Applied Sciences 
46 (2): 2455–2474. 
12. Wörz-Busekros, Angelika. 1978. Global stability in ecological systems with continuous time 
delay. SIAM Journal on Applied Mathematics 35 (1): 123–134. 
13. Dam, Jan S., Torben Dalgaard, Paul Erik Fabricius, and Stefan Andersson-Engels. 2000. Mul-
tiple polynomial regression method for determination of biomedical optical properties from 
integrating sphere measurements. Applied Optics 39 (7): 1202–1209. 
14. Bhateja, Vikrant, Mukul Misra, Shabana Urooj, and Aimé Lay-Ekuakille. 2013. A robust poly-
nomial ﬁltering framework for mammographic image enhancement from biomedical sensors. 
IEEE Sensors Journal 13 (11): 4147–4156. 
15. Caughey, Thomas K. 1963. Equivalent linearization techniques. The Journal of the Acoustical 
Society of America 35 (11): 1706–1711.

96
5
Contracted Product-Based Dynamical Systems
16. Krener, Arthur J. 1973. On the equivalence of control systems and the linearization of nonlinear 
systems. SIAM Journal on Control 11 (4): 670–676. 
17. Cheng, Daizhan, Xiaoming Hu, Tielong Shen, Daizhan Cheng, Xiaoming Hu, and Tielong Shen. 
2010. Linearization of nonlinear systems. In Analysis and design of nonlinear control systems, 
279–313. 
18. Krener, A. J. 1999. Feedback linearization. Mathematical control theory, 66–98. 
19. Charlet, Bernard, Jean Lévine, and Riccardo Marino. 1989. On dynamic feedback linearization. 
Systems and Control Letters 13 (2): 143–151. 
20. Khalil, Hassan K. 2015. Nonlinear control, vol. 406. Pearson, New York. 
21. Isidori, Alberto. 1985. Nonlinear control systems: an introduction. Berlin: Springer. 
22. Tashtoush, Bourhan, Mohammed Molhim, and Mohammed Al-Rousan. 2005. Dynamic model 
of an hvac system for control analysis. Energy 30 (10): 1729–1745.

6
t-Product-Based Dynamical Systems 
Abstract 
The concept of t-product-based dynamical systems (t-PDS) representation was ﬁrst 
introduced by Hoover et al. [posted on arXiv] in 2021. The system evolution is governed 
by the t-product between a third-order dynamic tensor and a third-order state tensor. 
Recent advancements in tensor decomposition and the algebra of circulants facilitate a 
natural extension of linear systems theory to t-PDSs, encompassing concepts such as 
explicit solutions, stability, controllability, and observability. Furthermore, the theory of 
state feedback control can be extended to t-PDSs in a manner analogous to that of LDSs. 
6.1
Overview 
Different from the previously introduced tensor-based dynamical systems, t-product-based 
dynamical systems (t-PDSs) are exclusively deﬁned over third-order tensors, with system 
evolution being captured by the t-product operation [ 1]. The continuous-time t-PDS with 
control inputs is deﬁned as 
ModifyingAbove sans serif upper X With dot left parenthesis t right parenthesis equals sans serif upper A star sans serif upper X left parenthesis t right parenthesis plus sans serif upper B star sans serif upper U left parenthesis t right parenthesis comma˙X(t) = A ★X(t) + B ★U(t),
(6.1) 
wheresans serif upper A element of double struck upper R Superscript n times n times rA ∈Rn×n×r is the dynamic tensor,sans serif upper B element of double struck upper R Superscript n times s times rB ∈Rn×s×r is the control tensor,sans serif upper X left parenthesis t right parenthesis element of double struck upper R Superscript n times h times rX(t) ∈Rn×h×r
is the state variable, and sans serif upper U left parenthesis t right parenthesis element of double struck upper R Superscript s times h times rU(t) ∈Rs×h×r is the control inputs. Similar to other tensor-based 
dynamical systems, the t-PDS (6.1) can be equivalently represented in an unfolded form, 
i.e., 
ModifyingAbove bold upper X With dot left parenthesis t right parenthesis equals monospace bcirc left parenthesis sans serif upper A right parenthesis bold upper X left parenthesis t right parenthesis plus monospace bcirc left parenthesis sans serif upper B right parenthesis bold upper U left parenthesis t right parenthesis comma ˙X(t) = bcirc(A)X(t) + bcirc(B)U(t),
(6.2) 
wherebold upper X left parenthesis t right parenthesis equals monospace unfold left parenthesis sans serif upper X left parenthesis t right parenthesis right parenthesisX(t) = unfold(X(t)) andbold upper U left parenthesis t right parenthesis equals monospace unfold left parenthesis sans serif upper U left parenthesis t right parenthesis right parenthesisU(t) = unfold(U(t)). Readers may refer to this chapter 
for the detailed deﬁnition of bcirc. Consequently, linear system-theoretic properties, such 
© The Author(s), under exclusive license to Springer Nature Switzerland AG 2024 
C. Chen, Tensor-Based Dynamical Systems, 
Synthesis Lectures on Mathematics & Statistics, 
https://doi.org/10.1007/978-3-031-54505-4_6 
97

98
6
t-Product-Based Dynamical Systems
as explicit solutions, stability, controllability, and observability, can be extended to t-PDSs 
based on the unfolded form. 
The t-PDS framework provides a versatile approach to analyzing and controlling complex 
dynamical systems in a variety of ﬁelds, including physics [ 2, 3], engineering [ 4, 5], and 
biology [ 6– 8]. This framework allows for the representation of system states as third-order 
tensors, enabling a more comprehensive and nuanced understanding of complex system 
behavior compared to traditional vector-based approaches. Notably, t-PDSs leverage the 
rich mathematical framework of tensor algebra, empowering researchers to perform sophis-
ticated operations on multidimensional data, e.g., images. For instance, t-PDSs have potential 
applications in tasks such as image denoising, image compression, and image segmentation, 
as demonstrated by recent research [ 9– 12]. 
This chapter delves into the system-theoretic properties of t-PDSs, encompassing explicit 
solutions, stability, controllability, and observability according to tensor decompositions and 
the algebra of circulants. Additionally, the chapter introduces the technique of state feedback 
control for t-PDSs. The content of this chapter is mainly based on the work of [ 1]. 
6.2
System-Theoretic Properties 
This section explores the system-theoretic properties of t-PDSs, including explicit solutions, 
stability, controllability, and observability. Interestingly, the results are similar to those in 
LDSs. 
6.2.1
Explicit Solutions 
The explicit solution of the unforced t-PDS, i.e., 
ModifyingAbove sans serif upper X With dot left parenthesis t right parenthesis equals sans serif upper A star sans serif upper X left parenthesis t right parenthesis comma˙X(t) = A ★X(t),
(6.3) 
can be readily obtained from its unfolded form. 
Proposition 6.1 ([ 1]) The explicit solution of the unforced t-PDS (6.3) can be computed as 
sans serif upper X left parenthesis t right parenthesis equals monospace fold left parenthesis exp left brace monospace bcirc left parenthesis sans serif upper A right parenthesis t right brace bold upper X left parenthesis 0 right parenthesis right parenthesis periodX(t) = fold
(
exp {bcirc(A)t}X(0)
)
.
(6.4) 
Proof The result follows immediately from the unfolded form of (6.3), which is given by 
ModifyingAbove bold upper X With dot left parenthesis t right parenthesis equals monospace bcirc left parenthesis sans serif upper A right parenthesis bold upper X left parenthesis t right parenthesis ˙X(t) = bcirc(A)X(t).
⬜
For simplicity, the explicit solution can be denoted assans serif upper X left parenthesis t right parenthesis equals exp left brace sans serif upper A t right brace star sans serif upper X left parenthesis 0 right parenthesisX(t) = exp {At}★X(0), which takes 
a similar format to that in LDSs. Therefore, the complete solution to the t-PDS (6.1) can be 
derived.

6.2
System-Theoretic Properties
99
Proposition 6.2 ([ 1]) The complete solution of the t-PDS (6.1) can be computed as 
sans serif upper X left parenthesis t right parenthesis equals exp left brace sans serif upper A t right brace star sans serif upper X left parenthesis 0 right parenthesis plus integral Subscript 0 Superscript t Baseline exp left brace sans serif upper A left parenthesis t minus tau right parenthesis right brace star sans serif upper B star sans serif upper U left parenthesis tau right parenthesis d tau periodX(t) = exp {At} ★X(0) +
t{
0
exp {A(t −τ)} ★B ★U(τ)dτ.
(6.5) 
Similarly, the complete solution can be computed in the unfolded form, i.e., 
StartLayout 1st Row 1st Column bold upper X left parenthesis t right parenthesis 2nd Column equals exp left brace monospace bcirc left parenthesis sans serif upper A right parenthesis t right brace bold upper X left parenthesis 0 right parenthesis plus integral Subscript 0 Superscript t Baseline left parenthesis exp left brace monospace bcirc left parenthesis sans serif upper A right parenthesis left parenthesis t minus tau right parenthesis right brace monospace unfold left parenthesis sans serif upper B right parenthesis right parenthesis bold upper U left parenthesis t right parenthesis d tau period EndLayoutX(t) = exp {bcirc(A)t}X(0) +
t{
0
(
exp {bcirc(A)(t −τ)}unfold(B)
)
U(t)dτ.
6.2.2
Stability 
The stability for t-PDSs can be deﬁned similarly as for LDSs. Analogous to the linear 
stability, the stability properties of the unforced t-PDS (6.3) can be determined by the t-
eigenvalue decomposition of the dynamic tensor A. 
Deﬁnition 6.1 The equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0 element of double struck upper R Superscript n times h times rXe = 0 ∈Rn×h×r of the t-PDS (6.3) is called: 
• stable if parallel to sans serif upper X left parenthesis t right parenthesis parallel to less than or equals gamma parallel to sans serif upper X left parenthesis 0 right parenthesis parallel to||X(t)|| ≤γ ||X(0)|| for some gamma greater than 0γ > 0; 
• asymptotically stable if limit Underscript t right arrow normal infinity Endscripts parallel to sans serif upper X left parenthesis t right parenthesis parallel to equals 0limt→∞||X(t)|| = 0; 
• unstable if it is not stable. 
Proposition 6.3 Given the t-PDS (6.3), the equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 is: 
• stable if and only if lamda Subscript j Baseline less than or equals 0λ j ≤0 for all j equals 1 comma 2 comma ellipsis comma n r j = 1, 2, . . . , nr; 
• stable if and only if lamda Subscript j Baseline less than 0λ j < 0 for all j equals 1 comma 2 comma ellipsis comma n r j = 1, 2, . . . , nr; 
• unstable if and only if lamda Subscript j Baseline greater than 0λ j > 0 for some j equals 1 comma 2 comma ellipsis comma n r j = 1, 2, . . . , nr, 
where lamda Subscript jλ j are the eigenvalues of monospace bcirc left parenthesis sans serif upper A monospace right parenthesisbcirc(A). 
Proof The results follow immediately from the unfolded form of the t-PDS (6.3) and linear 
stability.
⬜
The computation of eigenvalues formonospace bcirc left parenthesis sans serif upper A monospace right parenthesisbcirc(A) can be a computationally expensive task. 
One can expedite the process by leveraging the Fourier transform.

100
6
t-Product-Based Dynamical Systems
Proposition 6.4 ([ 1]) Given the t-PDS (6.3), the equilibrium point sans serif upper X Subscript e Baseline equals sans serif 0Xe = 0 is: 
• stable if and only if the eigenvalues of bold upper A Subscript jA j have non-positive real parts for all j equals 1 comma 2 comma ellipsis comma r j =
1, 2, . . . ,r; 
• asymptotically stable if and only if the eigenvalues of bold upper A Subscript jA j have negative real parts for 
all j equals 1 comma 2 comma ellipsis comma r j = 1, 2, . . . ,r; 
• unstable if and only if the eigenvalues of bold upper A Subscript jA j have positive real parts for some j equals 1 comma 2 comma ellipsis comma r j =
1, 2, . . . ,r, 
wherebold upper A Subscript jA j are the block diagonal matrices from the Fourier transform of A deﬁned in (1.37). 
Proof The exponential term exp left brace monospace bcirc left parenthesis sans serif upper A right parenthesis t right braceexp {bcirc(A)t} in the solution of the unforced t-PDS (6.3) 
can be written in the Fourier domain, i.e., 
StartLayout 1st Row 1st Column Blank 2nd Column left parenthesis bold upper F Subscript n Baseline circled times bold upper I Subscript r Baseline right parenthesis exp left brace monospace bcirc left parenthesis sans serif upper A right parenthesis t right brace left parenthesis bold upper F Subscript n Superscript down tack Baseline circled times bold upper I Subscript r Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals monospace blockdiag left parenthesis exp left brace bold upper A Subscript 1 Baseline t right brace comma exp left brace bold upper A Subscript 2 Baseline t right brace comma ellipsis comma exp left brace bold upper A Subscript r Baseline t right brace right parenthesis comma EndLayout(Fn ⊗Ir) exp {bcirc(A)t}(FT
n ⊗Ir)
= blockdiag
(
exp {A1t}, exp {A2t}, . . . , exp {Art}
)
,
where 
bold upper F Subscript n Baseline element of double struck upper R Superscript n times nFn ∈Rn×n is the Fourier transform matrix. Therefore, the result follows 
immediately.
⬜
Remark 6.1 The computational complexity of computing the eigenvalues forbold upper A Subscript jA j is approx-
imatelyscript upper O left parenthesis n cubed r right parenthesisO(n3r), whereas computing the eigenvalues formonospace bcirc left parenthesis sans serif upper A monospace right parenthesisbcirc(A) requires approximately 
script upper O left parenthesis n cubed r cubed right parenthesisO(n3r3) operations. Interestingly, the eigenvalues of bold upper A Subscript jA j are intricately linked to the eigen-
tuples of A. 
Corollary 6.1 ([ 1]) Given the t-PDS (6.3), the equilibrium point sans serif upper X equals sans serif 0X = 0 is: 
• stable if and only if the Fourier transforms of bold italic lamda Subscript jλ j have non-positive real parts for all 
j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• asymptotically stable if and only if the Fourier transforms ofbold italic lamda Subscript jλ j have negative real parts 
for all j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n; 
• unstable if and only if the Fourier transforms of bold italic lamda Subscript jλ j have positive real parts for some 
j equals 1 comma 2 comma ellipsis comma n j = 1, 2, . . . , n, 
where bold italic lamda Subscript jλ j are the eigentuples of A. 
Proof The result follows immediately from Proposition 6.4 and the fact that the collec-
tion of the Fourier transforms of bold italic lamda Subscript jλ j, i.e., left parenthesis bold upper F Subscript n Baseline circled times bold upper I Subscript r Baseline right parenthesis bold italic lamda Subscript j Baseline left parenthesis bold upper F Subscript n Superscript down tack Baseline circled times bold upper I Subscript r Baseline right parenthesis(Fn ⊗Ir)λ j(FT
n ⊗Ir), are the eigenvalues of 
bcric(A).
⬜

6.2
System-Theoretic Properties
101
6.2.3
Controllability 
The controllability of t-PDSs can be formulated similarly as that of LDSs. 
Deﬁnition 6.2 The t-PDS (6.1) is said to be controllable on the intervalleft bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if for any two 
states sans serif upper X left parenthesis t 0 right parenthesis equals sans serif upper X Subscript 0 Baseline element of double struck upper R Superscript n times h times rX(t0) = X0 ∈Rn×h×r and sans serif upper X left parenthesis t Subscript f Baseline right parenthesis equals sans serif upper X Subscript f Baseline element of double struck upper R Superscript n times h times rX(t f ) = X f ∈Rn×h×r there exists a sequence of control 
inputs sans serif upper U left parenthesis t right parenthesis element of double struck upper R Superscript s times h times rU(t) ∈Rs×h×r that drive the system from sans serif upper X Subscript 0X0 to sans serif upper X Subscript fX f . 
Proposition 6.5 The t-PDS (6.1) is controllable if and only if the controllability matrix 
deﬁned as 
bold upper R equals Start 1 By 4 Matrix 1st Row 1st Column bold upper B 2nd Column bold upper A bold upper B 3rd Column midline horizontal ellipsis 4th Column bold upper A Superscript n r minus 1 Baseline bold upper B EndMatrix element of double struck upper R Superscript n r times n s r squared Baseline commaR =
[
B AB · · · Anr−1B
]
∈Rnr×nsr2,
(6.6) 
where bold upper A equals monospace bcirc left parenthesis sans serif upper A right parenthesisA = bcirc(A) and bold upper B equals monospace bcirc left parenthesis sans serif upper B right parenthesisB = bcirc(B), has full rank. 
Proof The result follows directly from the matrix form (6.2) of the t-PDS and the Kalman’s 
rank condition.
⬜
Instead of evaluating the rank of the controllability matrix R, one can exploit the singular 
tuples of the controllability tensor (deﬁned in the following) to determine the controllability. 
Corollary 6.2 ([ 1]) The t-PDS (6.1) is controllable if and only if all the singular tuples of 
the controllability tensor deﬁned as 
sans serif upper R equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper B 2nd Column sans serif upper A star sans serif upper B 3rd Column midline horizontal ellipsis 4th Column sans serif upper A Superscript n r minus 1 Baseline star sans serif upper B EndMatrix Subscript 2 Baseline element of double struck upper R Superscript n times n s r times rR =
[
B A ★B · · · Anr−1 ★B
]
2 ∈Rn×nsr×r
(6.7) 
contains nonzero entries in the Fourier domain. 
Proof The conclusion can be readily derived from Proposition 6.5 and the fact that the rank 
of the controllability matrix R is equal to the sum of the nonzero entries in the singular 
tuples of the controllability tensor R. 
Here, the notation left bracket midline horizontal ellipsis right bracket Subscript 2[· · · ]2 denotes the block tensor concatenation at the second mode 
(similar to the deﬁnition of pp-mode block tensors). 
6.2.4
Observability 
The observability of t-PDSs can be determined by the dual principal. Suppose that we have 
an additional output function to the t-PDS (6.1), i.e., 
sans serif upper Y left parenthesis t right parenthesis equals sans serif upper C star sans serif upper X left parenthesis t right parenthesis commaY(t) = C ★X(t),
(6.8)

102
6
t-Product-Based Dynamical Systems
where sans serif upper C element of double struck upper R Superscript m times n times rC ∈Rm×n×r is the output matrix and sans serif upper Y left parenthesis t right parenthesis element of double struck upper R Superscript m times h times rY(t) ∈Rm×h×r. The output function can be 
expressed in the matrix form as 
bold upper Y left parenthesis t right parenthesis equals monospace bcirc left parenthesis sans serif upper C right parenthesis bold upper X left parenthesis t right parenthesis commaY(t) = bcirc(C)X(t),
(6.9) 
where bold upper Y left parenthesis t right parenthesis equals monospace unfold left parenthesis sans serif upper Y left parenthesis t right parenthesis right parenthesisY(t) = unfold(Y(t)). 
Deﬁnition 6.3 The t-PDS (6.1), (6.8) is said to be observable on an interval left bracket t 0 comma t Subscript f Baseline right bracket[t0, t f ] if 
any initial state sans serif upper X left parenthesis t 0 right parenthesis equals sans serif upper X Subscript 0 Baseline element of double struck upper R Superscript n times h times rX(t0) = X0 ∈Rn×h×r can be uniquely determined from the outputs sans serif upper Y left parenthesis t right parenthesis element of double struck upper R Superscript m times h times rY(t) ∈
Rm×h×r. 
Proposition 6.6 The t-PDS (6.1), (6.8) is observable if and only if the observability matrix 
deﬁned as 
bold upper O equals Start 1 By 4 Matrix 1st Row 1st Column bold upper C 2nd Column bold upper C bold upper A 3rd Column midline horizontal ellipsis 4th Column bold upper C bold upper A Superscript n r minus 1 Baseline EndMatrix Superscript down tack Baseline element of double struck upper R Superscript n m r squared times n r Baseline commaO =
[
C CA · · · CAnr−1]T ∈Rnmr2×nr,
(6.10) 
where bold upper A equals monospace bcirc left parenthesis sans serif upper A right parenthesisA = bcirc(A) and bold upper C equals monospace bcirc left parenthesis sans serif upper C right parenthesisC = bcirc(C), has full rank. 
Corollary 6.3 The t-PDS (6.1), (6.8) is observable if and only if all the singular tuples of 
the observability tensor deﬁned as 
sans serif upper O equals Start 1 By 4 Matrix 1st Row 1st Column sans serif upper C 2nd Column sans serif upper C star sans serif upper A 3rd Column midline horizontal ellipsis 4th Column sans serif upper C star sans serif upper A Superscript n r minus 1 Baseline EndMatrix Subscript 1 Baseline element of double struck upper R Superscript n m r times n times rO =
[
C C ★A · · · C ★Anr−1]
1 ∈Rnmr×n×r
(6.11) 
contains nonzero entries in the Fourier domain. 
Here, the notationleft bracket midline horizontal ellipsis right bracket Subscript 1[· · · ]1 denotes the block tensor concatenation at the ﬁrst mode (similar 
to the deﬁnition of pp-mode column tensors). 
6.3
State Feedback Design 
State feedback control is a powerful technique in designing feedback controllers for dynam-
ical systems [ 13, 14]. It leverages the complete state information of a system to compute the 
control input. The design of the state feedback gain plays a critical role in ensuring the sta-
bility and performance of the closed-loop system. In the context of t-PDSs, it is required to 
ﬁnd a state feedback of the formsans serif upper U left parenthesis t right parenthesis equals minus sans serif upper K star sans serif upper X left parenthesis t right parenthesisU(t) = −K★X(t) withsans serif upper K element of double struck upper R Superscript s times n times rK ∈Rs×n×r such that the closed-loop 
system 
ModifyingAbove sans serif upper X With dot left parenthesis t right parenthesis equals left parenthesis sans serif upper A minus sans serif upper B star sans serif upper K right parenthesis star sans serif upper X left parenthesis t right parenthesis˙X(t) = (A −B ★K) ★X(t)
(6.12) 
is (asymptotically) stable. 
The design of state feedback for t-PDSs can be efﬁciently achieved in the Fourier 
domain, following a similar approach to the computation of t-SVD/eigenvalue decompo-
sition. Assume that the t-PDS system (6.1) is stabilizable, which can be deﬁned similarly 
using the unfolded form (6.2). The ﬁrst step involves obtaining the block diagonal matrices

6.4
Applications
103
bold upper A Subscript jA j andbold upper B Subscript jB j by taking the Fourier transforms ofsans serif upper AA andsans serif upper BB. The next step is to utilize the theory 
of linear state feedback design to determine bold upper K Subscript jK j such that the eigenvalues of the matrices 
sans serif upper A Subscript j Baseline minus bold upper B Subscript j Baseline bold upper K Subscript jA j −B jK j forj equals 1 comma 2 comma ellipsis comma r j = 1, 2, . . . ,r are located in the left-half plane. Finally, the state feedback 
gain tensor K can be computed by taking the inverse Fourier transform of bold upper K Subscript jK j. 
6.4
Applications 
6.4.1
Synthetic Data: Stability and Controllability 
This example was adapted from [ 1]. Consider a t-PDS of the form (6.1) with sans serif upper A element of double struck upper R Superscript 2 times 2 times 2A ∈R2×2×2
whose frontal slices are given by 
sans serif upper A Subscript colon colon 1 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column negative 6 2nd Column 6 2nd Row 1st Column negative 10 2nd Column 0 EndMatrix and sans serif upper A Subscript colon colon 2 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0 2nd Column 2 2nd Row 1st Column 8 2nd Column 2 EndMatrix commaA::1 =
[ −6 6
−10 0
]
and A::2 =
[0 2
8 2
]
,
and sans serif upper B element of double struck upper R Superscript 2 times 1 times 2B ∈R2×1×2 whose front slices are given by 
sans serif upper B Subscript colon colon 1 Baseline equals sans serif upper B Subscript colon colon 2 Baseline equals StartBinomialOrMatrix 1 Choose 1 EndBinomialOrMatrix periodB::1 = B::2 =
[1
1
]
.
The state sans serif upper X left parenthesis t right parenthesis element of double struck upper R Superscript 2 times 1 times 2X(t) ∈R2×1×2 with 
sans serif upper X left parenthesis t right parenthesis Subscript colon colon 1 Baseline equals StartBinomialOrMatrix x 1 left parenthesis t right parenthesis Choose x 2 left parenthesis t right parenthesis EndBinomialOrMatrix and sans serif upper X left parenthesis t right parenthesis Subscript colon colon 2 Baseline equals StartBinomialOrMatrix x 3 left parenthesis t right parenthesis Choose x 4 left parenthesis t right parenthesis EndBinomialOrMatrix periodX(t)::1 =
[x1(t)
x2(t)
]
and X(t)::2 =
[x3(t)
x4(t)
]
.
First, the eigentuples of A in the Fourier domain are computed as 
bold italic lamda 1 equals StartBinomialOrMatrix negative 3.414 Choose negative 0.586 EndBinomialOrMatrix and bold italic lamda 2 equals StartBinomialOrMatrix negative 4 plus 7.07 j Choose negative 4 minus 7.07 j EndBinomialOrMatrix commaλ1 =
[−3.414
−0.586
]
and λ2 =
[−4 + 7.07 j
−4 −7.07 j
]
,
where j j here represents the imaginary number. Therefore, the open-loop system ModifyingAbove sans serif upper X With dot left parenthesis t right parenthesis equals sans serif upper A star sans serif upper X left parenthesis t right parenthesis˙X(t) =
A★X(t) is asymptotically stable, see Fig. 6.1. Second, the controllability tensorsans serif upper R element of double struck upper R Superscript 2 times 4 times 2R ∈R2×4×2
is computed as 
sans serif upper R Subscript colon colon 1 Baseline equals Start 2 By 4 Matrix 1st Row 1st Column 1 2nd Column 2 3rd Column negative 12 4th Column 40 2nd Row 1st Column 1 2nd Column 0 3rd Column negative 4 4th Column 16 EndMatrix and sans serif upper R Subscript colon colon 2 Baseline equals Start 2 By 4 Matrix 1st Row 1st Column 1 2nd Column 2 3rd Column negative 12 4th Column 40 2nd Row 1st Column 1 2nd Column 0 3rd Column negative 4 4th Column 16 EndMatrix periodR::1 =
[1 2 −12 40
1 0 −4 16
]
and R::2 =
[1 2 −12 40
1 0 −4 16
]
.
The singular tuples of R in the Fourier domain are given by 
bold italic sigma 1 equals StartBinomialOrMatrix 89.9030 Choose 2.3357 EndBinomialOrMatrix and bold italic sigma 2 equals StartBinomialOrMatrix 0 Choose 0 EndBinomialOrMatrix periodσ 1 =
[89.9030
2.3357
]
and σ 2 =
[0
0
]
.
Since one of the singular tuples contains zero entries, the t-PDS is not controllable.

104
6
t-Product-Based Dynamical Systems
Fig.6.1 Trajectories of the open-loop t-PDS (i.e.,sans serif upper U left parenthesis t right parenthesis equals 0U(t) = 0) with initial conditionx 1 left parenthesis 0 right parenthesis equals x 2 left parenthesis 0 right parenthesis equals 1x1(0) = x2(0) = 1
and x 3 left parenthesis 0 right parenthesis equals x 4 left parenthesis 0 right parenthesis equals negative 2x3(0) = x4(0) = −2. This ﬁgure was redrawn from [ 1] under the Attribution 4.0 International 
(CC BY 4.0) license 
6.4.2
Synthetic Data: State Feedback Design 
While the open-loop system of the t-PDS above is already stable, this example, adapted 
from [ 1], aims to enhance the closed-loop characteristics by implementing eigenvalues re-
assignment in the Fourier domain. First, the block diagonal matrices of A in the Fourier 
domain are computed as 
bold upper A Subscript 1 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column negative 6 2nd Column 7 2nd Row 1st Column negative 2 2nd Column 2 EndMatrix and bold upper A Subscript 2 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column negative 6 2nd Column 3 2nd Row 1st Column negative 18 2nd Column negative 2 EndMatrix periodA1 =
[−6 7
−2 2
]
and A2 =
[ −6
3
−18 −2
]
.
By utilizing the principles of linear state feedback, one can obtain two state feedback gain 
matrices 
bold upper K Subscript 1 Baseline equals Start 1 By 2 Matrix 1st Row 1st Column 27 2nd Column negative 27 EndMatrix and bold upper K Subscript 2 Baseline equals Start 1 By 2 Matrix 1st Row 1st Column 16.35 2nd Column negative 4.35 EndMatrix commaK1 =
[
27 −27
]
and K2 =
[
16.35 −4.35
]
,
which enable the relocation of the eigenvalues of bold upper A Subscript 1A1 and bold upper A Subscript 2A2 to negative 2 plus or minus 5 j−2 ± 5 j and negative 10 plus or minus 10 j−10 ± 10 j, 
respectively. After performing an inverse Fourier transform, the state feedback gain tensor 
sans serif upper K element of double struck upper R Superscript 1 times 2 times 2K ∈R1×2×2 can be computed as 
sans serif upper K Subscript colon colon 1 Baseline equals Start 1 By 2 Matrix 1st Row 1st Column 43.35 2nd Column negative 31.35 EndMatrix and sans serif upper K Subscript colon colon 2 Baseline equals Start 1 By 2 Matrix 1st Row 1st Column 10.64 2nd Column negative 22.64 EndMatrix periodK::1 =
[
43.35 −31.35
]
and K::2 =
[
10.64 −22.64
]
.
By applying the control input sans serif upper U left parenthesis t right parenthesis equals minus sans serif upper K star sans serif upper X left parenthesis t right parenthesisU(t) = −K★X(t), one can achieve the desired closed-loop 
response, see Fig. 6.2.

References
105
Fig. 6.2 Trajectories of the closed-loop t-PDS (i.e.,sans serif upper U left parenthesis t right parenthesis equals minus sans serif upper K star sans serif upper X left parenthesis t right parenthesisU(t) = −K★X(t)) with initial conditionx 1 left parenthesis 0 right parenthesis equals x 2 left parenthesis 0 right parenthesis equals 1x1(0) =
x2(0) = 1 and x 3 left parenthesis 0 right parenthesis equals x 4 left parenthesis 0 right parenthesis equals negative 2x3(0) = x4(0) = −2. This ﬁgure was redrawn from [ 1] under the Attribution 4.0 
International (CC BY 4.0) license 
References 
1. Hoover, Randy C., Kyle Caudle, and Karen Braman. 2021. A new approach to multilinear 
dynamical systems and control. arXiv:2108.13583. 
2. Chang, Shih Yu and Yimin Wei. 2022. T-product tensors–part ii: Tail bounds for sums of random 
t-product tensors. Computational and Applied Mathematics 41 (3): 99. 
3. Lund, Kathryn. 2020. The tensor t-function: A deﬁnition for functions of third-order tensors. 
Numerical Linear Algebra with Applications 27 (3): e2288. 
4. Chang, Shih Yu and Yimin Wei. 2021. Generalized t-product tensor bernstein bounds. 
arXiv:2109.10880. 
5. arzanagh, Davoud Ataee, and George Michailidis. 2018. Fast randomized algorithms for t-product 
based tensor operations and decompositions with applications to imaging data. SIAM Journal on 
Imaging Sciences 11 (4): 2629–2664. 
6. Yang, Hang-Jin, Yu-Ying Zhao, Jin-Xing Liu, Yu-Xia Lei, Jun-Liang Shang, and Xiang-Zhen 
Kong. 2020. Sparse regularization tensor robust pca based on t-product and its application in 
cancer genomic data. In 2020 IEEE International Conference on Bioinformatics and Biomedicine 
(BIBM), 2131–2138. IEEE. 
7. Yu, Na, Zhi-Ping Liu, and Rui Gao. 2022. Predicting multiple types of microrna-disease associ-
ations based on tensor factorization and label propagation. Computers in Biology and Medicine 
146: 105558.

106
6
t-Product-Based Dynamical Systems
8. Qiao, Qian, Ying-Lian Gao, Sha-Sha Yuan, and Jin-Xing Liu. 2021. Robust tensor method based 
on correntropy and tensor singular value decomposition for cancer genomics data. In 2021 IEEE 
International Conference on Bioinformatics and Biomedicine (BIBM), 509–514. IEEE. 
9. Kilmer, Misha E., Karen Braman, Ning Hao, and Randy C. Hoover. 2013. Third-order tensors as 
operators on matrices: A theoretical and computational framework with applications in imaging. 
SIAM Journal on Matrix Analysis and Applications 34 (1): 148–172. 
10. Kilmer, Misha E., Carla D. Martin, and Lisa Perrone. 2008. A third-order generalization of the 
matrix svd as a product of third-order tensors. Tufts University, Department of Computer Science, 
Tech. Rep. TR-2008-4. 
11. Kilmer, Misha E., Carla D. Martin. 2011. Factorization strategies for third-order tensors. Linear 
Algebra and its Applications 435 (3): 641–658. 
12. Zhang, Zemin, and Shuchin Aeron. 2016. Exact tensor completion using t-svd. IEEE Transactions 
on Signal Processing 65 (6): 1511–1526. 
13. Kautsky, Jaroslav, Nancy K. Nichols, and Paul Van Dooren. 1985. Robust pole assignment in 
linear state feedback. International Journal of control 41 (5): 1129–1155. 
14. Thompson, A.G. 1976. An active suspension with optimal linear state feedback. Vehicle System 
Dynamics 5 (4): 187–203.

