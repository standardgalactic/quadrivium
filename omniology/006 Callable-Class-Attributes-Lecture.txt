©2019 MathByte Academy

Setting an Attribute Value to a Callable
Attribute values can be any object
à other classes
à any callable
à anything…
So we can do this:
class MyClass:
language = 'Python'
def say_hello():
print('Hello World!')
say_hello is also an attribute of the class
à its value happens to be a callable
mappingproxy({'language': 'Python',
'say_hello': <function __main__.MyClass.say_hello()>, ...})
MyClass.__dict__ à
©2019 MathByte Academy

How do we call it?
We could get it straight from the namespace dictionary:
my_func = MyClass.__dict__['say_hello']
my_func()
à 'Hello World!'
or we could use getattr:
MyClass.__dict__['say_hello']()
à 'Hello World!'
getattr(MyClass, 'say_hello')()
à 'Hello World!'
or we can use dot notation:
MyClass.say_hello()
à 'Hello World!'
©2019 MathByte Academy

Coding
©2019 MathByte Academy

