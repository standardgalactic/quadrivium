
Set Operations
à union
à intersection
à difference
à symmetric difference
à related: testing if two sets are disjoint
à containment
in general, we have two ways of doing these operations
à methods
à s1.intersection(s2)
à operators
à s1 & s2
s2 could be an iterable (of hashable elements)
s1 and s2 must both be sets
à strict and non-strict

Intersections
{1, 2, 3}.intersection({2, 4})
à {2}
{1, 2, 3}.intersection([2, 4])
à {2}
{1, 2, 3} & {2, 4}
à {2}
s1 & s2 & s3 & s4
s1.intersection(s2, s3, s4)
à returns a new set

Unions
Similar to how intersections work
{1, 2, 3}.union({2, 4})
à {1, 2, 3, 4}
{1, 2, 3}.union([2, 4])
à {1, 2, 3, 4}
{1, 2, 3} | {2, 4}
à {1, 2, 3, 4}
s1 | s2 | s3 | s4
s1.union(s2, s3, s4)
à returns a new set

Disjointedness
two sets are disjoint if their intersection is empty
len(s1 & s2) à 0
à empty sets are falsy
if s1 & s2:
print('sets are not disjoint)
if not(s1 & s2):
print('sets are disjoint)
if not s1 & s2:
print('sets are disjoint)
à s1.isdisjoint(s2)

Differences
{1, 2, 3, 4} – {2, 3}
à {1, 4}
{1, 2, 3, 4}.difference({2, 3})
à {1, 4}
s1 – s2 – s3
s1.difference(s2, s3)
{1, 2, 3, 4}.difference([2, 3])
à {1, 4}
à returns a new set
Beware!!
s1 – (s2 – s3)
not same as
(s1 – s2) – s3
{1, 2, 3} – ({2, 4} – {2, 4})
à {1, 2, 3} – {}
à {1, 2, 3}
({1, 2, 3} – {2, 4}) – {2, 4}
à {1, 3} – {2, 4} à {1, 3}
à left-associative
s1 – s2 – s3
à (s1 – s2) – s3
à s1.difference(s2, s3) à (s1 – s2) – s3

Symmetric Differences
s1 = {1, 2, 3, 4}
s2 = {3, 4, 5, 6}
s1 ^ s2
à {1, 2, 5, 6}
union - intersection
à (s1 | s2) – (s1 & s2)
s1.symmetric_difference(s2)
s1.symmetric_difference([3, 4, 5, 6])
à returns a new set

Containment
Remember
strict à not equal
s1 < s2
à is s1 strictly contained in s2
s1 <= s2
à is s1 contained in (possibly equal to) s2
s1 > s2
à is s2 strictly contained in s1
s1 >= s2
à is s2 contained in (possibly equal to) s1
à does s1 strictly contain s2
à does s1 contain (possibly equal) s2
à s1.issubset(s2)
à s1.issuperset(s2)

Code

