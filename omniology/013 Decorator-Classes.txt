© 2019 MathByte Academy

Classes can be used as decorators too
à don't confuse with class decorators
à Class instances can be callable
à implement __call__ method
à parallel to decorator functions
def decorator(fn):
def wrapper(*args, **kwargs):
return fn(*args, **kwargs)
return wrapper
class Decorator:
def __init__(self, fn):
self.fn = fn
def __call__(self, *args, **kwargs):
return self.fn(*args, **kwargs)
fn is captured by closure
fn is captured by __init__
fn is called by calling wrapper
fn is called by calling __call__
à here we want to use a class to decorate functions
© 2019 MathByte Academy

Function vs Class approach
my_func = decorator(my_func)
à calling my_func actually calls the wrapped function returned from calling decorator
my_func = Decorator(my_func)
def decorator(fn):
def wrapper(*args, **kwargs):
return fn(*args, **kwargs)
return wrapper
class Decorator:
def __init__(self, fn):
self.fn = fn
def __call__(self, *args, **kwargs):
return self.fn(*args, **kwargs)
à my_func is an instance of Decorator
à calling my_func calls the __call__ method of the instance© 2019 MathByte Academy

Major Difference
à both approaches work fine to decorate functions
à one major difference
à function decorator, decorated function is still a function
à class decorator, decorated function is now an instance of a class
à it is not a function
© 2019 MathByte Academy

à this affects our ability to decorate class methods using the decorator class
How do functions defined in a class become methods when called from instance?
à functions are non-data descriptors
Major Difference
à Python calls the __get__ method of the function
à if called from instance it returns a bound method
à if not, it just returns itself
à we can implement similar functionality in our decorator
à decorator class will now work with instance, class and static methods
© 2019 MathByte Academy

Coding
© 2019 MathByte Academy

