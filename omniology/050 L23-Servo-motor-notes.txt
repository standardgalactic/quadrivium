Peter Dalmaris
Lecture 23
Arduino Step by Step
Lecture 23 
Servo motors 
In Lecture 20, you learned about the DC motor: a versatile yet low-priced solution for 
providing motion to your projects. A “weakness” (or characteristic) of the plain vanilla DC 
motor is that it spins like crazy, and while it does we don’t know where the shaft is or how 
far it has traveled because there is no feedback provided! Once you apply power, it wants 
to go as fast as it can for at long as it can!  
This is great for applications were continuous movement is needed, like for propelling a 
vehicle, but not when we need to be able 
to generate precise movement. 
But imagine building a robot that 
performs surgery on humans. Some of 
you may hopefully work on something 
like this in the not so distant future. In 
such application, precision and control 
feedback is paramount. You don’t just 
want to tell the motor to rotate its shaft 
by 90 degrees, you also want 
conﬁrmation that it did. 
In Lecture 20 there was a passing mention of the servo 
motor. The servo motor is a spruced up DC motor 
that includes circuitry for ﬁne movement control and 
feedback. In this Lecture, we will learn about how to 
use this kind of motor. We will use both the build-in 
servo motor library that comes standard with the Arduino IDE, 
and a third party library that adds a bunch of very useful 
features. 
Let’s go straight to the assembly and sketches. 
"1

Peter Dalmaris
Lecture 23
Arduino Step by Step
Demo 1a: quick start 
guide 
We are going to use the servo motor library 
that is build-in to the Arduino IDE to start 
playing with our servo motor. First, let’s put the 
circuit together, then we’ll have a look at the 
sketch. 
This is what we are going to assemble (right). 
There are a couple of things to notice here.  
First, there is no motor break-out board like 
the one we used in the DC motor lecture. Back 
then, I said that because the Arduino cannot 
provide much current, it is best to always use 
an external power source to power our 
motors, and that is what the break-out board 
was meant to do. I did not lie back then, but 
sometimes we can make an exception. In this 
circuit, my servo motor is small enough to not 
stress the Arduino too much. So, I decided to 
plug it straight into the Arduino in order to keep things simple. 
But that’s not where this decision ends. Notice the big round tube at the lower part of the 
breadboard? That is a capacitor. Even though my servo motor is small, occasionally in may 
draw more power than what the Arduino can provide, but only momentarily, like when it 
starts a new move. To counteract that, I have plugged in a capacitor between the Ground 
and +5V columns. A capacitor is a reservoir of electricity, a bit like a battery that can charge 
and discharge very quickly. Plugged into the circuit like this, when the servo motors starts 
and draws more power than what the Arduino can provide, the capacitor will start 
discharging and providing the motor the additional power it needs. Just plug in a capacitor 
that is 300μF or more and you’ll be ok. 
The motor itself has three wires coming out of it. Two are for power (+5V and Gnd), and one 
for signal. Plug the signal wire to digital pin 9, and the other two to the +5V and Ground 
columns on the breadboard. 
We could try to control the servo motor through the Arduino digitalWrite functions but that 
would require us ﬁguring out the right values to write, and the timing for writing those 
values. That’s too much work. We are lucky, though, because with the Arduino IDE we get 
the Servo library, which contains functions that allow us to easily work with servo motors. 
We’ll using this library ﬁrst, and then I’ll show you an alternative third-party library that 
provides additional functionality. 
"2

Peter Dalmaris
Lecture 23
Arduino Step by Step
Demo 1a sketch 
Here’s the sketch: 
This is one of the demo sketches that also come with the Arduino IDE. You can ﬁnd it by 
clicking on File —> Examples —> Servo —> Sweep. 
We ﬁrst declare our intention to use a servo motor by including the Servo library (“#include 
<Servo.h>”), and creating the variable myservo that we use as a handle to the Servo 
object (“Servo myservo;”). 
In the setup function, we tell the Arduino that the control wire from our servo motor is 
attached to digital pin 9 (“myservo.attach(9);”). 
The work is done in the loop() function, where we use the for loop to count from 0 to 180, 
and another one to count backwards, from 180 to 0. This has the eﬀect of the shaft of the 
servo motor travelling 180 degrees to one side, and 180 degrees to the other side, 1 degree 
at a time, constantly. 
Inside each for block, we ﬁrst write a value to the motor using myservo.write(d), where “d” 
is a number representing the degree to which the shaft should turn. If we want to turn it by 
15 degrees, we write myservo.write(15). Simple, right? 
"3
#include <Servo.h>  
  
Servo myservo;  // create servo object to control a servo  
                // a maximum of eight servo objects can be created  
  
int pos = 0;    // variable to store the servo position  
  
void setup()  
{  
  myservo.attach(9);  // attaches the servo on pin 9 to the servo object  
}  
  
  
void loop()  
{  
  for(pos = 0; pos < 180; pos += 1)  // goes from 0 degrees to 180 degrees  
  {                                  // in steps of 1 degree  
    myservo.write(pos);              // tell servo to go to position in variable 'pos'  
    delay(15);                       // waits 15ms for the servo to reach the position  
  }  
  for(pos = 180; pos>=1; pos-=1)     // goes from 180 degrees to 0 degrees  
  {                                 
    myservo.write(pos);              // tell servo to go to position in variable 'pos'  
    delay(15);                       // waits 15ms for the servo to reach the position  
  }  
} 
Block 1
Block 2

Peter Dalmaris
Lecture 23
Arduino Step by Step
In Block 1, we get the shaft to turn from 0 to 180 degrees, and in Block 2 to travel all the 
way back to 0 degrees. 
Finally, notice how we set a delay of 15 milliseconds inside each block, after a movement 
has been written? We need this because it takes a bit of time for the motor to move, and we 
want to make sure that any previous instruction has been completed before sending 
through the next move instruction. 
That was easy but not satisfying enough. I want to be able to control the servo motor my 
self, instead of the Arduino being in charge. How about we try to connect a potentiometer 
and use it as a controller for the motor? 
Demo 1b: Control the servo 
with a potentiometer 
Let’s attach a rotary potentiometer, and adjust 
our sketch to enable us control of the motor by 
turning the knob. 
Here’s the new circuit (right). 
The potentiometer is attached to power, and 
middle pin goes to analog pin 0 (A0) on the 
Arduino. 
 
The new sketch looks is this: 
"4
#include <Servo.h>  
  
Servo myservo;  // create servo object to control a servo  
  
int potpin = 0;  // analog pin used to connect the potentiometer 
int val;    // variable to read the value from the analog pin  
  
void setup()  
{  
  myservo.attach(9);  // attaches the servo on pin 9 to the servo object  
}  
  
void loop()  
{  
  val = analogRead(potpin);        // reads the value of the potentiometer (0 to 1023) 
  val = map(val, 0, 1023, 0, 179); // scale it to use it with the servo (0 to 180)  
  myservo.write(val);              // sets servo position according to the scaled value  
  delay(15);                       // waits for the servo to get there  
} 

Peter Dalmaris
Lecture 23
Arduino Step by Step
Just like in Demo 1a, we include the Servo library and set pin 9 as the servo pin. In the 
loop() function, we constantly take readings from analog pin 0 (A0) where the potentiometer 
is attached. Because the range of values read in A0 is not the same as the values we can 
send to the servo, we use the map function to scale appropriately.  
Finally, we use the myservo.write(val); function to send the scaled value to the 
potentiometer. 
Try it out! 
Demo 2: Setup and play with VarSpeedServo 
The build in Servo library is good 
and very simple to use. However, 
there’s more we can do with the 
hardware than it allows us.  
For example, how fast should the 
motor move from one position to 
the next? What about the ability 
to deﬁne a set of movements for 
the motor to perform, and then 
send them with a single 
instruction?  
To achieve functionality like that, 
we need to use an external 
library. I am going to show you 
how to use the VarSpeedServo library, written by Korman and updated by Philip van Allen. 
Thank you to both for their work and contribution! 
First, you will need to get this library. Go to https://github.com/netlabtoolkit/VarSpeedServo 
and look for the “Download ZIP” button.  
Download it somewhere on your computer, 
and double-click on it to extract the ﬁles 
from the archive. You will end up with a new 
folder named “VarSpeedServo-master”. 
"5

Peter Dalmaris
Lecture 23
Arduino Step by Step
You need to rename this folder, so that its 
now called “VarSpeedServo” (i.e. remove 
the “-master” part. 
You now need to copy this folder to the 
folder where Arduino keeps its third-party 
libraries. Don’t know where that is? No 
problem, the Arduino IDE luckily 
knows.  
From the Arduino menu item, click 
on Preferences. This dialog box 
appears, and at the very top you 
can see the Arduino folder. Go to 
this folder using your Finder (Mac) 
or Windows Explorer (Windows), 
and look for a subfolder named 
“libraries”. 
Copy the VarSpeedServo folder into 
the libraries folder. You are done. 
Restart the Arduino IDE by closing 
it and opening it up again. To verify 
that the VarSpeedServo library was 
imported successfully, click on 
Sketch —> Import library, and look 
for the new library. It usually goes 
to the bottom of the list. 
Now that we have the new library 
imported, lets use it.  
I’ll show you two sketches that come 
as examples with this library that 
compare exactly the two examples from 
Demo 1. 
The ﬁrst one is the Sweep example. 
Assemble the circuit you used in Demo 
1a, and load the sketch on the Arduino 
IDE by clicking on File —> Examples —> 
VarSpeedServo —> Sweep.  
Here’s the sketch: 
"6

Peter Dalmaris
Lecture 23
Arduino Step by Step
You can probably see the similarities and diﬀerences between the original Sweep sketch 
and this one. We include the library and create the myservo object reference. We set the 
servo signal pin to 9.  
In the loop() function, we attached the servo at pin 9 to the myservo object.  
We then send the ﬁrst instruction to the servo by using the myservo.write function. This 
looks the same as in the original Sweep sketch, except that is takes three arguments, not 
just one. 
It works like this: myservo.write(position, speed, wait); 
The position argument accepts an integer, denoting the degree we’d like the servo to turn 
to. For example, 15 degrees. 
The speed argument controls how fast the movement should be. Top speed is 255, stopped 
is 0, and anything is between is allowed. 
Finally, the wait argument allows us to stop the program at that line and wait for the motor 
to ﬁnish its movement. To wait, we make this argument “true”. If we want to just continue 
running the sketch and let the servo ﬁnish its movement on its own, we make this argument 
“false”. 
Nice, isn’t it?  
"7
#include <VarSpeedServo.h>  
  
VarSpeedServo myservo;  // create servo object to control a servo  
                        // a maximum of eight servo objects can be created  
  
const int servoPin = 9; // the digital pin used for the servo 
  
void setup() {  
  myservo.attach(servoPin);  // attaches the servo on pin 9 to the servo object 
  myservo.write(0,255,true); // set the initial position of the servo, as fast as  
 
 
 
 
// possible, wait until done 
}  
void loop() { 
  myservo.write(180,255,true);        // move the servo to 180, max speed, wait until done 
                                      // write(degrees 0-180, speed 1-255, wait to  
 
 
 
 
 
  // complete true-false) 
  myservo.write(0,30,true);           // move the servo to 180, slow speed, wait until 
 
 
 
 
 
  // done 
}  

Peter Dalmaris
Lecture 23
Arduino Step by Step
What do you think happens in the loop() function? 
Let’s now connect the potentiometer, like we did in Demo 1b, and load the VarSpeedServo 
example sketch titled Knob into the Arduino IDE. 
Here it is: 
Compare this against the sketch from Demo 1b. Isn’t it practically identical? Notice how the 
sketch above also makes use of the myservo.write(val); function, with just a single 
argument? The VarSpeedServo library allows you to use the familiar functions from the 
build-in Servo library, so that any existing sketches you may have lying around will still 
work. You get the additional functionality, as we saw in the Sweep sketch, for free! 
An exercise 
Can you build a circuit that contains a servo motor and three buttons? When you press button 1, the 
motor moves to 60 degrees. When you press button 2, it moves to 90 degrees. When you press 
button 3, it moves to 180 degrees.  
"8
#include <VarSpeedServo.h>  
  
VarSpeedServo myservo;    // create servo object to control a servo  
  
const int potPin = 0;    // analog pin used to connect the potentiometer 
const int servoPin = 9;  // the digital pin used for the servo 
int val;                 // variable to read the value from the analog pin 
  
  
void setup() { 
  myservo.attach(servoPin);  // attaches the servo on pin 9 to the servo object  
}  
  
void loop() { 
  val = analogRead(potPin);   // reads the value of the potentiometer (0 to 1023)  
  val = map(val, 0, 1023, 0, 180);  // scale it to use it with the servo (0 to 180)  
  myservo.write(val);         // sets the servo position according to the scaled value  
  delay(15);                  // waits a bit before the next value is read and written  
} 

