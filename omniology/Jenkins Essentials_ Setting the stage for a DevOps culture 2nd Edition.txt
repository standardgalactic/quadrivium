
Jenkins Essentials
Second Edition
4FUUJOHUIFTUBHFGPSB%FW0QTDVMUVSF
Mitesh Soni
BIRMINGHAM - MUMBAI

Jenkins Essentials
Second Edition
Copyright Â© 2017 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or
transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the author, nor Packt Publishing, and its
dealers and distributors will be held liable for any damages caused or alleged to be caused
directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the
companies and products mentioned in this book by the appropriate use of capitals.
However, Packt Publishing cannot guarantee the accuracy of this information.
First published: July 2015
Second edition: June 2017
Production reference: 1280617
1VCMJTIFECZ1BDLU1VCMJTIJOH-UE
-JWFSZ1MBDF
-JWFSZ4USFFU
#JSNJOHIBN
#1#6,
ISBN 978-1-78847-106-0
XXXQBDLUQVCDPN

Credits
Author
Mitesh Soni
Copy Editor
Saafis Editing
Reviewers
Stefan Lapers
Devin Young
Javier Delgado
Project Coordinator
Shweta H Birwatkar
Commissioning Editor
Vijin Boricha
Proofreader
Safis Editing
Acquisition Editor
Divya Poojari
Indexer
Mariammal Chettiyar
Content Development Editor
Deepti Thore
Graphics
Tania Dutta
Technical Editor
Sneha Hanchate
Production Coordinator
Nilesh Mohite

About the Author
Mitesh Soni is an avid learner with 10 years' experience in the IT industry. He is an SCJP,
SCWCD, VCP, IBM Urbancode, and IBM Bluemix certified professional. He loves DevOps
and cloud computing and he also has an interest in programming in Java. He finds design
patterns fascinating. He believes "a picture is worth a thousand words."
He occasionally contributes to FUVUPSJBMTXPSMEDPN. He loves to play with kids, fiddle
with his camera, and take photographs at Indroda Park. He is addicted to taking pictures
without knowing many technical details. He lives in the capital of Mahatma Gandhi's home
state.
Mitesh has authored the following books with Packt:
DevOps Bootcamp
Implementing DevOps with Microsoft Azure
DevOps for Web Development
Jenkins Essentials
Learning Chef
"I've missed more than 9,000 shots in my career. I've lost almost 300 games. 26 times, I've
been trusted to take the game-winning shot and missed. I've failed over and over and over
again in my life. And that is why I succeed."â€”Michael Jordan.
I've always thanked a lot of people who have been instrumental in contributing to my life's journey
up to now, but I guess it's time to really acknowledge that One person who has been with me as long
as I can remember.
With this book, I would like to thank the one and only invisible yet omnipresent Almighty. We share
a mutual love and hate relationship and I really value it. You were always there equally during my
good and bad times and without you, I wouldnâ€™t have made it this far!
Last but not the least, I want to thank all who taught me how to love myself, first!

About the Reviewers
Stefan Lapers started his career almost 20 years ago as an IT support engineer and quickly
grew into Linux/Unix system engineering and software development.
Over the years he accumulated experience deploying and maintaining hosted application
solutions while working for great customers such as MTV, TMF, and many more. In more
recent years, he was involved in multiple development projects and their delivery as a
service on the internet.
In his spare time, he enjoys his family and building/flying RC helicopters.
Devin Young graduated with a BS in sports management from Ohio State University and
somehow wound up working as a software engineer shortly afterwards. He specializes in
DevOps and site reliability and is particularly fond of automation and real-time
applications.
He grew up as a competitive jump roper, leading him to create the mobile app RopeRacer,
which was launched on iOS in March 2015. The app has become a success in the world of
jump rope and is now used in tournaments around the United States.
Devin is currently an MBA candidate at the TCU Neeley School of Business.
Javier Delgado is an automation fanatic, continuous tasks (inspection, testing, delivery),
evangelist, and perpetual new-knowledge addict.
He works as DevOps and Jenkins internal information well at Stratio Big Data Inc.

www.PacktPub.com
For support files and downloads related to your book, please visit XXX1BDLU1VCDPN.
Did you know that Packt offers eBook versions of every book published, with PDF and
ePub files available? You can upgrade to the eBook version at XXX1BDLU1VCDPN and as a
print book customer, you are entitled to a discount on the eBook copy. Get in touch with us
at TFSWJDF!QBDLUQVCDPN for more details.
At XXX1BDLU1VCDPN, you can also read a collection of free technical articles, sign up for a
range of free newsletters and receive exclusive discounts and offers on Packt books and
eBooks.
IUUQTXXXQBDLUQVCDPNNBQU
Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt
books and video courses, as well as industry-leading tools to help you plan your personal
development and advance your career.
Why subscribe?
Fully searchable across every book published by Packt
Copy and paste, print, and bookmark content
On demand and accessible via a web browser

Customer Feedback
Thanks for purchasing this Packt book. At Packt, quality is at the heart of our editorial
process. To help us improve, please leave us an honest review on this book's Amazon page
at IUUQTXXXBNB[PODPNEQ.
If you'd like to join our team of regular reviewers, you can e-mail us at
DVTUPNFSSFWJFXT!QBDLUQVCDPN. We award our regular reviewers with free eBooks and
videos in exchange for their valuable feedback. Help us be relentless in improving our
products!

I would like to dedicate this book to lot of people who gave me a ray of hope amidst darkness. I would like to
dedicate this book to Shreyansh (Shreyu â€“ my sister Jigisha's baby boy) who showed me the power of
innocence and smiles, Vinay Kher for his blessing, my parents who are always there silently praying for me,
Simba (Priyanka Agashe) for supporting and encouraging me all the time and forcing me to believe in myself
Indian Army and all brave soldiers in uniform for protecting us.

Table of Contents
Preface
1
Chapter 1: Exploring Jenkins
7
Introduction of Jenkins 2
8
Features
10
Installation of Jenkins 2
11
Jumpstart tour of the Jenkins dashboard
22
Configuration settings in Jenkins
24
Overview of the CI/CD pipeline
27
Summary
29
Chapter 2: Installation and Configuration of Code Repository and Build
Tools
30
Overview of Jenkins
31
Installing Java and configuring the environment variables
32
Installing Java on Windows 10
32
Installing Java on CentOS
32
Configuring environment variables
34
Installing and configuring Ant
35
Configuring Ant in Windows
35
Configuring Ant in CentOS
35
Installing Maven
36
Configuring Ant, Maven, and JDK in Jenkins
36
First job in Jenkins
40
Installing and configuring the Git repository on CentOS
51
Creating a new build job in Jenkins with Git and GitHub
55
Eclipse and Jenkins integration
59
Summary
65
Chapter 3: Managing Code Quality and Notifications
66
Jenkins 2.x integration with Sonar 6.3
68
Quality Gate plugin
91
Email notifications on build status
97
Summary
102
Chapter 4: Continuous Integration with Jenkins
103
Dashboard View plugin
104

[ ii ]
Creating and configuring a build job for a Java application with Ant
106
Creating and configuring a build job for a Java application with Maven
111
Summary
117
Chapter 5: Continuous Delivery - Implementing Automated Deployment 118
An overview of Continuous Delivery and Continuous Deployment
119
Installing Tomcat
120
Deploying a war file from Jenkins to Tomcat
120
Deploying a WAR file from Jenkins to AWS Elastic Beanstalk
126
Deploying a war file from Jenkins to Microsoft Azure App Services
136
Summary
144
Chapter 6: Continuous Testing - Functional and Load Testing with
Jenkins
145
Functional testing with Selenium
146
Load testing with Apache JMeter
167
Summary
174
Chapter 7: Build Pipeline and Pipeline as a Code
175
Build Pipeline
176
Upstream and downstream jobs
178
Overview of pipeline as a code
189
Pipeline as a code - implementation
190
Promoted builds
209
Summary
211
Chapter 8: Managing and Monitoring Jenkins
212
Managing Jenkins master and slave nodes
213
Monitoring Jenkins with JavaMelody
220
Managing job-specific configurations - backup and restore
224
Managing disk usage
229
Build job-specific monitoring with the Build Monitor plugin
231
Audit Trail plugin-overview and usage
234
Workspace Cleanup plugin
235
Conditional Build Step plugin
236
EnvInject plugin
238
Summary
240
Chapter 9: Security in Jenkins
241
User management
242
Role-based security
248
Project-based security
252

[ iii ]
Summary
256
Index
257

Preface
Jenkins has been used specifically for Continuous Integration over the years. Continuous
Integration systems are a vital part of Agile teams because they help enforce the principles
of Agile development.
Jenkins, a continuous build tool, enables Agile teams to focus on work and innovations by
automating the build, artifact management, and deployment processes, rather than
worrying about manual processes. However, the release of Jenkins 2.0 and later versions are
focused on Continuous Delivery.
Jenkins is an open source automation server. Continuous Integration is a significant part of
DevOps culture and hence many open source and commercial tools for Continuous
Delivery utilizes Jenkins for a complete product.
DevOps is a buzzword in 2015 and for coming years as per Market trends by various
research firms. Continuous Integration is a significant part of DevOps culture and hence the
trend to use Jenkins will increase in future. If Continuous Integration is the base, then
Continuous Delivery is the topping. Jenkins supports and focus more on end-to-end
automation of application life cycle management system.
What this book covers
$IBQUFS, Exploring Jenkins, describes in detail the basics of Continuous Integration and an
overview of Jenkins. It describes the recent growth of importance of Continuous Integration
as a practice to cultivate DevOps culture. This chapter also describes the installation and
configuration of Jenkins. We are going to take a whistle-stop tour through some of the key
features of Jenkins, and plugin installation as well.
$IBQUFS, Installation and Configuration of Code Repositories and Build Tools, describes in
detail how to prepare the runtime environment for application life cycle management and
configure it with Jenkins â€“ the open source continuous integration tool. It will cover how to
integrate Eclipse and Jenkins, so builds can be run from Eclipse as well.
$IBQUFS, Managing Code Quality and Notifications, will cover how to integrate static code
analysis behavior into Jenkins. Code quality is an extremely vital feature that impacts on
applications' effectiveness and by integrating it with Sonar, users get insights into
problematic portions of code. This chapter also covers email notifications on build status.

Preface
[ 2 ]
$IBQUFS, Continuous Integration with Jenkins, describes in detail how to create and
configure build jobs in Java, how to run build jobs, unit test cases using Ant, and Maven
build tools. It covers all aspects of running a build to create a distribution file or war file for
deployment.
$IBQUFS, Continuous Delivery - Implementing Automated Deployment, provides insights into
how functional testing and load testing can be performed and how they can be integrated
with Jenkins to adopt the Continuous Testing practices of DevOps culture.
$IBQUFS, Continuous Testing - Functional and Load Testing with Jenkins, takes one step
forward in the DevOps pipeline by deploying artifacts to local or remote application
servers. It gives insights into automated deployment and Continuous Delivery processes,
and also covers how to deploy applications to a public cloud platform using Jenkins.
$IBQUFS, Build Pipeline and Pipeline as a Code, will cover how to orchestrate build job to
execute them in a specific sequence. We will cover the Build Pipeline plugin and the
Pipeline as a Code feature that is available in Jenkins 2 and later.
$IBQUFS, Managing and Monitoring Jenkins, gives insight into the management of Jenkins
nodes and monitoring them with Java Melody, in order to provide details on the utilization
of resources. It also covers how to monitor build jobs configured for Java-or .NET-related
applications, and managing those configurations by keeping backups of them.
$IBQUFS, Security in Jenkins, will cover security management options available in Jenkins.
This will help to perform user management, authentication, and authorization, including
matrix-based security and role-based access.
What you need for this book
This book is for beginners. This book assumes that you are familiar with at least the Java
programming language. Knowledge of core Java and JEE is essential if you are to use this
book to gain better insights. Having a strong understanding of programming logic will
provide you with the background to be productive with Jenkins, while using plugins or
writing commands for the shell.
As the application development life cycle will cover a lot of tools, it is essential to have
some knowledge of repositories such as svn, git, and so on, IDE tools such as Eclipse, and
build tools such as Ant and Maven.
Knowledge of code analysis tools will make jobs easier to configur and integrate, however,
it is not required in order to complete the exercises presented in this book. Most of the
configuration steps are mentioned clearly. SonarQuve version 6.3 is used for code analysis.

Preface
[ 3 ]
You will be walked through the steps required to install Jenkins on a Windows and Linux-
based host. In order to be immediately successful, you will need administrative access to a
host that runs a modern version of Windows and Linux; Windows 10 will be used for
demonstration purposes. If you are a more experienced reader, then a recent release of
almost any distribution will work just as well (but you may be required to do a little bit of
extra work that is not outlined in the book).
Additionally, you will need access to the internet to download plugins that you do not
already have, as well as an installation of Jenkins. Any normal hardware configuration is
good enough, such as 4 GB RAM and 500 GB hard drive.
Who this book is for
This book assumes that you are familiar with at least java programming language.
Knowledge of core java and JEE is essential considering this book to gain better insight.
Having a strong understanding of program logic will provide you with the background to
be productive with Jenkins while using plugins of writing commands for shell.
As application development life cycle will cover lot of tools in general; it is essential to have
some knowledge of repositories such as svn, git etc; IDE tools such as Eclipse; build tools
such as ant and maven.
Knowledge of code analysis tools will make job easier in configuration and integration,
however it is not extremely vital to perform exercises given in the book. Most of the
configuration steps are mentioned clearly.
Additionally, you will need access to the Internet to download plugins that you do not
already have, as well as an installation of the Jenkins.
Conventions
In this book, you will find a number of styles of text that distinguish between different
kinds of information. Here are some examples of these styles, and an explanation of their
meaning.
Code words in text, database table names, folder names, filenames, file extensions,
pathnames, dummy URLs, user input, and Twitter handles are shown as follows:

Preface
[ 4 ]
A block of code is set as follows:
SVOUIFNPEFM
NPEFM0OF3
USBJO@EBUBGSJTLFE_WFSCPTF536&
TVNNBSJ[FUIFNPEFM
TVNNBSZ
NPEFM
SVOUIFTRMGVODUJPOGSPNUIF4QBSL3QBDLBHF
4QBSL3TRM
4&-&$5TBNQMF@CJODPVOU

='30.PVU@UCMHSPVQCZTBNQMF@CJO
When we wish to draw your attention to a particular part of a code block, the relevant lines
or items are set in bold:
OPUFXFBSFTQFDJGJOHUIF4QBSL3GJMUFSOPUUIFEQMZSGJMFS
IFBE
SparkR::filter
PVU@TEPVU@TETBNQMF@CJO
Any command-line, (including commands at the R console) input or output is written as
follows:
> summary(xchurn)
New terms and important words are shown in bold. Words that you see on the screen, in
menus or dialog boxes for example, appear in the text like this: "clicking the Next button
moves you to the next screen."
Warnings or important notes appear in a box like this.
Tips and tricks appear like this.
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book-what you liked or disliked. Reader feedback is important for us as it helps us develop
titles that you will really get the most out of. To send us general feedback, simply e-mail
GFFECBDL!QBDLUQVCDPN, and mention the book's title in the subject of your message. If
there is a topic that you have expertise in and you are interested in either writing or
contributing to a book, see our author guide at XXXQBDLUQVCDPNBVUIPST.

Preface
[ 5 ]
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.
Downloading the example code
You can download the example code files for this book from your account at IUUQXXXQ
BDLUQVCDPN. If you purchased this book elsewhere, you can visit IUUQXXXQBDLUQVCD
PNTVQQPSUand register to have the files e-mailed directly to you.
You can download the code files by following these steps:
Log in or register to our website using your e-mail address and password.
1.
Hover the mouse pointer on the SUPPORT tab at the top.
2.
Click on Code Downloads & Errata.
3.
Enter the name of the book in the Search box.
4.
Select the book for which you're looking to download the code files.
5.
Choose from the drop-down menu where you purchased this book from.
6.
Click on Code Download.
7.
Once the file is downloaded, please make sure that you unzip or extract the folder using the
latest version of:
WinRAR / 7-Zip for Windows
Zipeg / iZip / UnRarX for Mac
7-Zip / PeaZip for Linux
The code bundle for the book is also hosted on GitHub at IUUQTHJUIVCDPN1BDLU1VCM
JTIJOH+FOLJOT&TTFOUJBMT4FDPOE&EJUJPO. We also have other code bundles from our
rich catalog of books and videos available at IUUQTHJUIVCDPN1BDLU1VCMJTIJOH.
Check them out!

Preface
[ 6 ]
Downloading the color images of this book
We also provide you with a PDF file that has color images of the screenshots/diagrams used
in this book. The color images will help you better understand the changes in the output.
You can download this file from
IUUQTXXXQBDLUQVCDPNTJUFTEFGBVMUGJMFTEPXOMPBET+FOLJOT&TTFOUJBMT4FDPOE&
EJUJPO@$PMPS*NBHFTQEG.
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do
happen. If you find a mistake in one of our books-maybe a mistake in the text or the code-
we would be grateful if you could report this to us. By doing so, you can save other readers
from frustration and help us improve subsequent versions of this book. If you find any
errata, please report them by visiting IUUQXXXQBDLUQVCDPNTVCNJUFSSBUB, selecting
your book, clicking on the Errata Submission Form link, and entering the details of your
errata. Once your errata are verified, your submission will be accepted and the errata will
be uploaded to our website or added to any list of existing errata under the Errata section of
that title.
To view the previously submitted errata, go to IUUQTXXXQBDLUQVCDPNCPPLTDPOUFO
UTVQQPSUand enter the name of the book in the search field. The required information will
appear under the Errata section.
Piracy
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At
Packt, we take the protection of our copyright and licenses very seriously. If you come
across any illegal copies of our works in any form on the Internet, please provide us with
the location address or website name immediately so that we can pursue a remedy.
Please contact us at DPQZSJHIU!QBDLUQVCDPN with a link to the suspected pirated
material.
We appreciate your help in protecting our authors and our ability to bring you valuable
content.
Questions
If you have a problem with any aspect of this book, you can contact us at
RVFTUJPOT!QBDLUQVCDPN, and we will do our best to address the problem.

1
Exploring Jenkins
Jenkins is an open source automation server (after Jenkins 2.0 was released) written in Java.
It was one of the most popular Continuous Integration (CI) tools used to build and test 
different kinds of projects. Now, it is also used for Continuous Delivery (CD) after Jenkins
2.0. This chapter describes in detail the basics of CI and overview of Jenkins 2. It describes
the importance of CI and CD as a practice to cultivate DevOps culture in recent times.
This chapter also describes installation and configuration of Jenkins 2. We are going to take
a jumpstart tour through some of the key features of Jenkins and plugin installations as
well.
To be precise, we will discuss the following topics in this chapter:
Introduction of Jenkins 2 and its features
Installation of Jenkins 2
Jumpstart tour of Jenkins dashboard
Configuration settings in Jenkins
Overview of CICD pipeline
Lets get started! On your marks, get set, go!

Exploring Jenkins
[ 8 ]
In this chapter, we will see what Jenkins 2 is and the new features introduced regarding CI
as a part of our DevOps journey. We will cover the following steps to complete our DevOps
journey. Each chapter is a stepping stone to reach the next one. It is always good to have an
incremental approach so we can measure our success and feel the pain points as well to
realize the value of this journey:
At the end of this chapter, we will know essential things about Jenkins 2 and how it is a
game changer in terms of CD. It is no longer a CI server. It is on its way to becoming a
mature product in the category of automation servers by focusing on Continuous Delivery
after Jenkins 2.0 is released.
Introduction of Jenkins 2
Let's first understand what CI is. CI is one of the most popular application development
practices in recent times. Developers integrate bug fixes, new feature development, or
innovative functionality in a code repository. The CI tool verifies the integration process
with an automated build and test to detect issues with current sources of an application and
provide quick feedback:

Exploring Jenkins
[ 9 ]
Jenkins is a simple, extensible, and user friendly open source tool that provides continuous
integration services for application development. Jenkins supports SCM tools such as Git,
Subversion, Star Team, and CVS, AccuRev. Jenkins can build Apache Ant and Apache
Maven-based projects.
The concept of plugins makes Jenkins more attractive, easy to learn, and easy to use. There
are various categories of plugins available, such as the following:
Source code management
Slave launchers and controllers
Build triggers
Build tools
Build notifiers
Build reports
Other post-build actions
External site/tool integrations
UI plugins
Authentication and user management
Android development
iOS development
.NET development
Ruby development
Library plugins

Exploring Jenkins
[ 10 ]
Jenkins defines interfaces or abstract classes that model a facet of a build system. Interfaces
or abstract classes agree on what needs to be implemented, and Jenkins uses plugins to
extend those implementations.
With Jenkins 2, the focus is also on CD where the application is deployed in the specific
environment using an automated approach. Jenkins 2 is a clear signal regarding the focus
on both CI and CD best practices of DevOps culture and not on CI only.
Features
Jenkins is one of the most popular automation servers in the market, and the reasons for its
popularity are some of the following features:
Easy installation on different operating systems, Arch Linux, FreeBSD, Gentoo,
MacOS X, openBSD, openSUSE, RedHAT/Fedora/CentOS, Ubuntu/Debian,
Windows, and it is also available for Docker and as generic Java packages too.
Easy upgrades: Jenkins has very speedy release cycles (long-term support and
weekly releases).
Simple and easy to use user interface in Jenkins 2.x -.
Set of suggested plugins at the time of installation.
Improved new item page.
Improved job configuration page with easy navigation.
Jenkins 2 supports pipelines as code that uses domain-specific language (DSL)
to model application delivery pipelines as code; we can utilize the pipelines as
code and keep them in a repository and maintain versions in a similar way to
source code.
Easily extensible with the use of third-party plugins: there are over 400 plugins.
Easy to configure the setup environment in the user interface. It is also possible to
customize user interface as you wish.
Master slave architecture supports distributed builds to reduce the load on CI
servers.
Build scheduling based on cron expressions.
Shell and Windows command execution that makes any command-line tool
integration in the pipeline very easy.
Notification support related to build status.

Exploring Jenkins
[ 11 ]
Installation of Jenkins 2
Let's start with Jenkins 2.x installation. Go to IUUQTKFOLJOTJP and click on the
Download button to download packages for installation of Jenkins:
At IUUQTKFOLJOTJPEPXOMPBE, we get two sections. One is for Long-term Support
(LTS) that is selected after every 12 weeks from regular releases as the stable release from
that duration.
Another section is Weekly release, which has bug fixes and is made available to users and
developers.
We will use the Generic Java Package (.war) file in our installation of Jenkins as shown in
the following screenshot.
The reason for selecting the XBS file for the Jenkins installation is its ease of use across
operating systems. Jenkins is written in Java, and in any case, to execute Jenkins we need
the latest Java version installed on our system. For Jenkins Installation, Java 8 is
recommended. It is recommended to have 1-GB of memory.

Exploring Jenkins
[ 12 ]
Verify the Java installation by using the KBWBWFSTJPO command in the command
prompt or terminal based on the operating system.
Download Generic Java Package (.war) from IUUQTKFOLJOTJPEPXOMPBE on the local
system as follows:

Exploring Jenkins
[ 13 ]
Before we start Jenkins, we will set the +&/,*/4@)0.& environment variable. When we
install and configure Jenkins, all the files reside in the KFOLJOT directory by default. We
often need to change the default location for our convenience. We can do that by setting the
+&/,*/4@)0.& environment variable. Follow the following steps:
To set the +&/,*/4@)0.& environment variable in Windows 10, go to Control
1.
Panel | All Control Panel Items | System and click on Advanced system
settings | Advanced | Environment Variables... Please see the manual for other
operating systems to set Environment Variables...:

Exploring Jenkins
[ 14 ]
Click on New. Enter the variable name and location and click OK:
2.
Now our JENKINS_HOME is set so Jenkins will use that directory to store all
3.
configuration files.
Open the command prompt or terminal (depending on your operating system)
4.
and execute the following command:
Java -jar Jenkins.war

Exploring Jenkins
[ 15 ]
This is a fresh installation of Jenkins, so initial setup is required. Note the
5.
password:

Exploring Jenkins
[ 16 ]
Once Jenkins is fully up and running, visit IUUQMPDBMIPTU and it will
6.
open the Getting Started page to Unlock Jenkins. Give the password we copied
from the terminal or go to the location given in the dialog box. Copy the
password from there and click on Continue:

Exploring Jenkins
[ 17 ]
Click on Install to see the suggested plugins. If we are behind the proxy, then
7.
another dialog box will pop up before this page to provide proxy details:

Exploring Jenkins
[ 18 ]
Wait while all the plugins are installed properly:
8.

Exploring Jenkins
[ 19 ]
Verify the green tick boxes for all the plugins that have been installed
9.
successfully:

Exploring Jenkins
[ 20 ]
Once all plugins are installed successfully, create the first admin user and click on
10.
Save and Finish:

Exploring Jenkins
[ 21 ]
Click on Start using Jenkins:
11.
In the next section, we will see details of the Jenkins dashboard.

Exploring Jenkins
[ 22 ]
Jumpstart tour of the Jenkins dashboard
The Jenkins dashboard is the place where all the operations related to CI and CD can be
managed:
Click on the Manage Jenkins link on the Jenkins dashboard. Here, we can configure
Jenkins, Security, Global Tools, Plugins, Users, and more:

Exploring Jenkins
[ 23 ]
Click on Manage Plugins. You will see the following tabs:
The Updates tab provides details on updates available on the installed plugins.
The Available tab provides a list of plugins that are not installed yet.
The Installed tab provides a list of plugins that are already installed.
The Advanced tab contains sections to configure proxies so we can download
plugins even after we are behind the proxy. It also provides sections to upload
HPI files for plugins in case we have already downloaded the plugin from the
internet:
In the Manage Jenkins section, click on Manage Nodes.

Exploring Jenkins
[ 24 ]
By default, the system on which Jenkins is installed is a master node. This is the section that
can be utilized to create the master agent architecture that we will cover later in the book:
In the next section, we will cover different kinds of configuration available in the Manage
Jenkins section.
Configuration settings in Jenkins
In Manage Jenkins, click on the Configure System link.
Here, we can get information about the +&/,*/4@)0.& directory, the workspace root
directory, and so on. We can set the Jenkins URL as well in this section:

Exploring Jenkins
[ 25 ]
In Manage Jenkins, click on Configure Global Security to see the security settings
available in Jenkins. We will cover role-based access, matrix-based project security, and
other features in later parts of this book:

Exploring Jenkins
[ 26 ]
In Manage Jenkins, click on the Global Tool Configuration link to provide details related
to all tools available on the system that can be utilized to perform certain tasks. Depending
on plugins related to specific tools, that section will appear on this page.
Another important thing to mention is that we can configure multiple versions of the same
tool. For example, we can configure Java 6, Java 7, and Java 8. It is highly likely that
different projects require different versions of Java for their execution. In such cases, we can
configure multiple JDKs here and utilize specific JDKs in specific build jobs:

Exploring Jenkins
[ 27 ]
As discussed earlier in this chapter, the Manage Plugins section has an Advanced tab that
allows us to configure proxy details.
This was all about the basic installation and configuration of Jenkins 2.x, and now we will
cover what we are going to achieve in this book.
Overview of the CI/CD pipeline
The application development life cycle is traditionally a lengthy manual process. In
addition, it requires effective collaboration between development and operations teams.
The CI/CD pipeline is a demonstration of automation involved in the application
development lifecycle that contains automated build execution, automated test execution,
notifications to stakeholders, and deployment in different runtime environments.
Effectively, a deployment pipeline is a combination of continuous integration and
continuous delivery, and hence a part of DevOps practices. The following figure depicts the
pipeline process. Depending on the culture of organization and the available tools, the flow
and tools may differ:

Exploring Jenkins
[ 28 ]
Members of the development team check code into a source code repository. Continuous
integration products such as Jenkins are configured to poll changes from the code
repository. Changes in the repository are downloaded to the local workspace and Jenkins
triggers a build process that is assisted by Ant or Maven or Gradle or any build script.
Automated test execution, unit testing, static code analysis, reporting, and notification of
successful or failed build processes are also parts of the Continuous Integration process.
Once the build is successful, it can be deployed to different runtime environments such as
testing, pre-production, production, and so on. Deploying a WAR file in terms of a JEE
application is normally the final stage in the deployment pipeline. However, after the
deployment of this package into a pre-production environment, functional and security
testing can be performed.
One of the biggest benefits of the pipeline is a faster feedback cycle. Identification of issues
in the application in early stages and no dependency on manual effort make this entire end-
to-end process more effective.
In the following chapters, we will see how Jenkins can be used to implement CI and CD
practices in modernizing the culture of an organization.

Exploring Jenkins
[ 29 ]
Summary
Congratulations! We have reached the end of this chapter. So far, we have covered the
basics of CI and have introduced Jenkins and its features. We have also completed the
installation of Jenkins using generic package files. We also completed a quick tour of
features available in the Jenkins dashboard. In addition to this, we have discussed the
CI/CD pipeline and its importance in cultivating DevOps culture.
Now that we are able to use our automation server, Jenkins, we can begin creating a job and
verify how Jenkins works. Before that, we will see how different configurations can be done
in Jenkins in the next chapter.

2
Installation and Configuration of
Code Repository and Build
Tools
We have seen the CI/CD pipeline in the previous chapter, where source code repositories
and automated build were discussed in detail. SVN, Git, CVS, and StarTeam are some of the
popular code repositories that manage changes to code, artifacts, or documents while Ant
and Maven are popular build automation tools for Java applications.
This chapter describes in detail how to prepare an environment for application life cycle
management and configure it with Jenkinsâ€”an open source Continuous Integration (CI)
tool. It will cover how to integrate Eclipse and Jenkins so builds can be run from Eclipse as
well. These are the major points that we will cover in this chapter:
Overview of Jenkins
Installing Java and configuring environment variables
Installing and configuring Ant
Installing Maven
Configuring Ant, Maven, and JDK in Jenkins
Overview of GitHub
Creating a new build job in Jenkins with GitHub
Eclipse and Jenkins integration

Installation and Configuration of Code Repository and Build Tools
[ 31 ]
In this chapter, we will cover the configuration in Jenkins as part of CI best practice and as a
part of our DevOps journey:
At the end of this chapter, we will know how to configure Jenkins and how to integrate
different tools in Jenkins.
Overview of Jenkins
We have seen in $IBQUFS, Exploring Jenkins, that the Manage Jenkins link on the
dashboard is used to configure systems. Click on the Global Tool Configuration link to
configure Java, Ant, Maven, and other third-party products' related information.

Installation and Configuration of Code Repository and Build Tools
[ 32 ]
In this book, we will try to make things general and not operating system-specific. We have
used Windows 10 for most of the sections in this book for CICD implementation, but it can
be implemented on any operating system. We will specify some operating system-specific
requirements if needed. Normally, path style changes and installation procedure changes,
but the rest are the same irrespective of OS.
Installing Java and configuring the
environment variables
In this section, we will cover installing Jenkins on both Windows and CentOS operating
systems.
Installing Java on Windows 10
Go to
IUUQXXXPSBDMFDPNUFDIOFUXPSLKBWBKBWBTFEPXOMPBETJOEFYKTQIUNM
and download the Java installer for either the 32-bit or 64-bit operating system and follow
the wizard to install it.
Execute the KBWB and KBWBD commands from the command window to verify the
installation.
Installing Java on CentOS
If Java is not already installed on the system, then you can install it as follows:
Find Java-related packages in the CentOS repository and locate the appropriate
1.
package to install by using the following code:
<SPPU!MPDBMIPTU_>ZVNTFBSDIKBWB
-PBEFEQMVHJOTGBTUFTUNJSSPSSFGSFTIQBDLBHFLJUTFDVSJUZ


BOUKBWBNBJMY@0QUJPOBMKBWBNBJMUBTLTGPSBOU
FDMJQTFNZMZOKBWBY@.ZMZO#SJEHF+BWB%FWFMPQNFOU


KBWBHDKY@+1BDLBHFSVOUJNFDPNQBUJCJMJUZMBZFSGPS
($+

Installation and Configuration of Code Repository and Build Tools
[ 33 ]
KBWBHDKEFWFMY@+1BDLBHFEFWFMPQNFOUDPNQBUJCJMJUZ
MBZFSGPS($+
KBWBHDKKBWBEPDY@"1*EPDVNFOUBUJPOGPSMJCHDK
KBWBPQFOKELY@0QFO+%,3VOUJNF&OWJSPONFOU
KBWBPQFOKELEFWFMY@0QFO+%,%FWFMPQNFOU&OWJSPONFOU
KBWBPQFOKELKBWBEPDY@0QFO+%,"1*%PDVNFOUBUJPO
KBWBPQFOKELY@0QFO+%,3VOUJNF&OWJSPONFOU
KDPNNPOTFSJBMJ[FSY@+'SFF+BWB(FOFSBM4FSJBMJ[BUJPO
'SBNFXPSL


Now install the Java package in the local repositories by executing the ZVN
2.
JOTUBMM command as follows:
<SPPU!MPDBMIPTU_>ZVNJOTUBMMKBWBPQFOKELY@
-PBEFEQMVHJOTGBTUFTUNJSSPSSFGSFTIQBDLBHFLJUTFDVSJUZ
-PBEJOHNJSSPSTQFFETGSPNDBDIFEIPTUGJMF
4FUUJOHVQ*OTUBMM1SPDFTT
3FTPMWJOH%FQFOEFODJFT
 3VOOJOHUSBOTBDUJPODIFDL
 1BDLBHFKBWBPQFOKELY@FMXJMMCF
JOTUBMMFE
 'JOJTIFE%FQFOEFODZ3FTPMVUJPO
%FQFOEFODJFT3FTPMWFE


*OTUBMM1BDLBHF
T
5PUBMEPXOMPBETJ[F.
*OTUBMMFETJ[F.
*TUIJTPL<Z/>Z
%PXOMPBEJOH1BDLBHFT
KBWBPQFOKELFMY@SQN
].#
3VOOJOHSQN@DIFDL@EFCVH
3VOOJOH5SBOTBDUJPO5FTU
5SBOTBDUJPO5FTU4VDDFFEFE
3VOOJOH5SBOTBDUJPO
*OTUBMMJOHKBWBPQFOKELFMY@

7FSJGZJOHKBWBPQFOKELFMY@

*OTUBMMFE
KBWBPQFOKELY@FM
$PNQMFUF

Installation and Configuration of Code Repository and Build Tools
[ 34 ]
Java is now installed successfully from the local repository.
Configuring environment variables
The following are the steps to configure environment variables:
Set the +"7"@)0.& and +3&@)0.& variables.
1.
Go to SPPU.
2.
Press Ctrl + H to list hidden files.
3.
Find CBTI@QSPGJMF and edit it by appending the Java path, as shown in the
4.
following screenshot:

Installation and Configuration of Code Repository and Build Tools
[ 35 ]
Installing and configuring Ant
Ant is a build tool. Download Ant from IUUQTBOUBQBDIFPSHCJOEPXOMPBEDHJ and
unzip it.
Configuring Ant in Windows
The following are the steps to configure Ant in CentOS:
Go to Control Panel | All Control Panel Items | System and click on Advanced
1.
system settings | Advanced | Environment Variables....
Click on New.
2.
Set the variable name as "/5@)0.& and location and click OK.
3.
Configuring Ant in CentOS
Set the "/5@)0.& and +"7"@)0.& environment variables:
There is an option available in Jenkins to install Ant or Maven automatically. We will see
this in the Jenkins configuration section.

Installation and Configuration of Code Repository and Build Tools
[ 36 ]
Installing Maven
Maven is a build tool. Download the Maven binary zip from
IUUQTNBWFOBQBDIFPSHEPXOMPBEDHJ and extract it to the local system where Jenkins
is installed:
Once we have downloaded Java, Ant, and Maven, our next task is to configure them.
Configuring Ant, Maven, and JDK in Jenkins
The following are the steps to configure Ant, Maven, and JDK in Jenkins:
Open the Jenkins dashboard in a browser with the URL
1.
IUUQJQ@BEESFTT . Go to the Manage Jenkins section and click on
Global Tool Configuration.

Installation and Configuration of Code Repository and Build Tools
[ 37 ]
Configure Java based on the installation, as shown in the following screenshot.
2.
We can install it automatically:
If Java is already installed, then uncheck the checkbox of Install automatically
3.
and give the +"7"@)0.& path. If Jenkins, Ant, Maven, and Java are installed on
CentOS, the path style will be different than this:

Installation and Configuration of Code Repository and Build Tools
[ 38 ]
Download Git installer for Windows and install it on the system. Keep the
4.
settings as they are in Jenkins after you click on Add Git. If Jenkins, Ant, Maven,
and Java are installed on CentOS, the path style will be different than this:

Installation and Configuration of Code Repository and Build Tools
[ 39 ]
Click on Add Ant and provide a Name and "/5@)0.& location. The value that
5.
we give in the Name box will be used in build job to identify the Ant version we
want to use. This is similar practice for any tool that we will use. If Jenkins, Ant,
Maven, and Java are installed on CentOS, the path style will be different than
this:
Click on Add Ant and provide a Name and ."7&/@)0.& location. If Jenkins, Ant,
6.
Maven, and Java are installed on CentOS, the path style will be different than
this:

Installation and Configuration of Code Repository and Build Tools
[ 40 ]
First job in Jenkins
Let's create a job in Jenkins that provides details about IP addresses and other configuration
details. Basically, we will execute the JQDPOGJH command. If you are using Linux OS, you
can execute JGDPOGJH. The following are the steps to create your first job in Jenkins:
On the Jenkins dashboard, click on New Item.
1.
Enter the item's name.
2.
Select Freestyle project.
3.
Click Ok:
4.

Installation and Configuration of Code Repository and Build Tools
[ 41 ]
Give a Project name:
5.
Select None in Source Code Management.
6.

Installation and Configuration of Code Repository and Build Tools
[ 42 ]
In the Build Triggers section, select Build periodically and give cron syntax in
7.
Schedule. It will always run at 8:52 AM in the morning:

Installation and Configuration of Code Repository and Build Tools
[ 43 ]
In Build, click on Execute Windows batch command. To execute on CentOS or
8.
other flavours of Linux, select Execute Shell, and the command will be
JGDPOGJH:

Installation and Configuration of Code Repository and Build Tools
[ 44 ]
In the textbox, write the JQDPOGJH command to get the IP address of the system.
9.
Click on Save:
10.

Installation and Configuration of Code Repository and Build Tools
[ 45 ]
Click on Build now:
11.

Installation and Configuration of Code Repository and Build Tools
[ 46 ]
Observe the Build History and click on the blue ball to go to Console Output.
12.
Bingo! We have created our first job in Jenkins:
To add a parameter in the Jenkins build, click on This project is parameterized.
13.
Click on Add Parameter. Select String Parameter:

Installation and Configuration of Code Repository and Build Tools
[ 47 ]
Provide a name and description. Click on Save:
14.
In the Build step, write the following commands in the Execute Windows Batch
15.
Command box:
        echo %JOB_NAME%
        echo %Text%

Installation and Configuration of Code Repository and Build Tools
[ 48 ]
Click on Build with Parameters:
16.

Installation and Configuration of Code Repository and Build Tools
[ 49 ]
It will ask for the parameter. Provide some text and click on Build:
17.
Verify the Console Output:
18.
Go to +&/,*/4@)0.& and try to find out what each directory contains:
19.

Installation and Configuration of Code Repository and Build Tools
[ 50 ]
#NNVJG&KTGEVQTKGUCXCKNCDNGKP,'0-+05A*1/'HQNFGT
In the plugins directory, all installed plugins are available:
20.
#NNVJG2NWIKPUCXCKNCDNGKP,'0-+05A*1/'FKTGEVQT[

Installation and Configuration of Code Repository and Build Tools
[ 51 ]
The XBS directory contains the actual files that are used in the Jenkins
21.
application:
Installing and configuring the Git repository
on CentOS
Git is a free and open source distributed version control system. In this section, we will try
to install and configure Git:
Open a terminal in the CentOS-based system and execute the ZVNJOTUBMMHJU
1.
command in the terminal.
Once it is successfully installed, verify the version with the HJUWFSTJPO
2.
command.

Installation and Configuration of Code Repository and Build Tools
[ 52 ]
Submit information about the user with the use of the HJUDPOGJH command so
3.
that commit messages will be generated with the correct information attached.
Provide the name and email address to embed into commits.
4.
To create a workspace environment, create a directory called HJU in the home
5.
directory and then create a subdirectory inside of that called EFWFMPQNFOU.
Use NLEJSQ_HJUEFWFMPQNFOUDE_HJUEFWFMPQNFOU in the
6.
terminal.
Copy the "OU&YBNQMF directory into the development folder.
7.
Convert an existing project into a workspace environment by using the HJUJOJU
8.
command.
Once the repository is initialized, add files and folders:
9.

Installation and Configuration of Code Repository and Build Tools
[ 53 ]
Commit by executing HJUDPNNJUN*OJUJBM$PNNJUB:
10.
Verify the Git repository:
11.

Installation and Configuration of Code Repository and Build Tools
[ 54 ]
Verify the project in the Git repository:
12.

Installation and Configuration of Code Repository and Build Tools
[ 55 ]
In the next section, we will cover how to use Git and GitHub to check out the source code
and execute the build.
Creating a new build job in Jenkins with Git and
GitHub
The following are the steps required to create a new build job in Jenkins with Git and
GitHub:
On the Jenkins dashboard, click on Manage Jenkins and select Manage Plugins.
1.
Click on the Available tab and write (JUIVC1MVHJO in the search box.
Click the checkbox and click on the Download now and install after restart
2.
button.
Restart Jenkins:
3.
Create a new Freestyle project. Provide an item name and click on OK:
4.

Installation and Configuration of Code Repository and Build Tools
[ 56 ]
Configure Git in the Source Code Management section:
5.

Installation and Configuration of Code Repository and Build Tools
[ 57 ]
In Repository URL, we can provide a GitHub URL, which will work fine for
6.
publicly accessible projects. We can specify branch too:
Add an Invoke Ant build step by clicking on Add build step:
7.

Installation and Configuration of Code Repository and Build Tools
[ 58 ]
Execute the build:
8.
Click on the Console Output to see the progress of the build:
9.
Once the build is successful, verify the workspace in the build job.
10.
Done!

Installation and Configuration of Code Repository and Build Tools
[ 59 ]
Eclipse and Jenkins integration
Can we execute a Jenkins job from Eclipse?
Yes, by following these steps:
Go to Help | Install New Software...:
1.
Add a site for .ZMZO and click on Next:
2.

Installation and Configuration of Code Repository and Build Tools
[ 60 ]
Review the items to be installed and click on Next.
3.
Accept the terms of the license agreement.
4.
Click on Finish.
5.
It will start installing the Mylyn package. Once it is finished, restart Eclipse.
6.

Installation and Configuration of Code Repository and Build Tools
[ 61 ]
In the Windows menu, click on Views.
7.
Select Mylyn and click on Builds.
8.
Click OK:
9.

Installation and Configuration of Code Repository and Build Tools
[ 62 ]
In the Builds section, click on the build server link:
10.
$WKNF5GEVKQPKU'ENKRUG+&'YKVJ0QDWKNFUGTXGTEQPaIWTGF

Installation and Configuration of Code Repository and Build Tools
[ 63 ]
Select Hudson (supports Jenkins) and click on Next:
11.
Provide Jenkins Server, User, and Password details. Click Finish:
12.

Installation and Configuration of Code Repository and Build Tools
[ 64 ]
Find the list of jobs in the Builds section.
13.

Installation and Configuration of Code Repository and Build Tools
[ 65 ]
Select any job and click on Run Build to execute it from Eclipse:
14.
Try other options as an exercise.
Summary
Hooray! We have reached the end of this chapter. We have covered how to prepare an
environment for CI by configuring Java, Ant, and Maven. We have also seen how to
configure repositories and build tools in Jenkins. Finally, we have also covered how to
integrate Integrated Development Environments with Jenkins so we can execute build jobs
from Eclipse itself.
We have also created our first job, installed Git on a local machine, and created a job to
access that Git repository in order to access the source code.
In the next chapter, we will configure sample applications for CI.

3
Managing Code Quality and
Notifications
So far we have seen how to set up an environment to use Jenkins for Continuous
Integration and we have also configured build tools in Jenkins. Integration of Eclipse with
Jenkins was also covered and that will help developers to easily execute Jenkins jobs from
the IDE.
We will start our journey with Continuous Code Qualityâ€”static code analysis-- and it will
be followed by Continuous Integration, Continuous Delivery, Continuous Testing,
Continuous Deployment, Continuous Monitoring, and Continuous Security. For static code
analysis, we will use SonarQube to analyze a spring-based Java project.
SonarQube is an open source quality management platform for maintaining Continuous
Code Quality.
In this chapter, we will cover the following topics:
Jenkins 2.x integration with Sonar 6.3
Quality Gate plugin
Email notifications on build status

Managing Code Quality and Notifications
[ 67 ]
In this chapter, we will cover static code analysis as part of Continuous Integration practice
as a part of our DevOps journey:
At the end of this chapter, we will know how to configure a SonarQube server with Jenkins
and perform static code analysis.

Managing Code Quality and Notifications
[ 68 ]
Jenkins 2.x integration with Sonar 6.3
In this chapter, we will use SonarQube 6.3 for static code analysis. Go to
IUUQTXXXTPOBSRVCFPSHEPXOMPBET and download the latest version available:
Extract files:
1.

Managing Code Quality and Notifications
[ 69 ]
Go to the CJO directory and, based on the operating system and platform of the
2.
operating system, go to a specific directory:
Execute 4UBSU4POBSCBU in the command window. On Linux or MacOS execute
3.
the TI file in the respective folder.

Managing Code Quality and Notifications
[ 70 ]
Once SonarQube is up and running, open IUUQMPDBMIPTU in a 
4.
browser to visit the SonarQube dashboard:

Managing Code Quality and Notifications
[ 71 ]
Click on Login and give a default username and password --admin and default
5.
to-- log in as an administrator:

Managing Code Quality and Notifications
[ 72 ]
As of now, there is no project available in the SonarQube dashboard:
6.
Click on the Quality Profiles tab to get details on the default quality profiles
7.
available in SonarQube.

Managing Code Quality and Notifications
[ 73 ]
Quality Profiles are the heart of SonarQube; they are nothing but sets of rules
8.
specific to a language. If not mentioned explicitly, all the projects are analyzed
with default profiles. However, it is ideal to have a profile for each project so
specific rules can be set or deactivated. Each language has a default profile
named Sonar way:
A Quality Gate is used to enforce policy in organization for static code analysis.
9.
The SonarQube way is the default Quality Gate:

Managing Code Quality and Notifications
[ 74 ]
Click on the Rules tab to get more details about the existing rules available in
10.
profiles:

Managing Code Quality and Notifications
[ 75 ]
Go to Quality Profiles and select the Sonar way default profile. Observe total
11.
Active and Inactive rules:
Go to the Jenkins dashboard and click on Manage Jenkins. Go to Manage
12.
Plugins and in the Available tab find the SonarQube plugin.

Managing Code Quality and Notifications
[ 76 ]
Click on Install without restart:
13.

Managing Code Quality and Notifications
[ 77 ]
Verify when installation is successful:
14.
Go to the Jenkins dashboard and click on Manage Jenkins.
15.
Click on Configure system and find the SonarQube section.
16.
Click on Add SonarQube.
17.

Managing Code Quality and Notifications
[ 78 ]
Provide name, URL, and version. It also asks for a Server Authentication token.
18.
We can get it from the SonarQube server dashboard:

Managing Code Quality and Notifications
[ 79 ]
Click on the Administration tab. In the Security menu, click on Users:
19.
Observe that there is a 0 token for Administrator:
20.

Managing Code Quality and Notifications
[ 80 ]
Click on Tokens:
21.
Give a name in the Generate Tokens section and click on Generate:
22.

Managing Code Quality and Notifications
[ 81 ]
Copy the newly created Token. Click on Done:
23.
Verify the number of Tokens for the Administrator user:
24.

Managing Code Quality and Notifications
[ 82 ]
Paste the token value in Jenkins and Save:
25.

Managing Code Quality and Notifications
[ 83 ]
Go to Global Tool Configuration and configure SonarQube Scanner:
26.
Go to the Jenkins dashboard and click on New Item.
27.
Give a name, 1FU$MJOJD$PEF, and select Freestyle project. We are going to
28.
perform static code analysis on the sample application using SonarQube here:

Managing Code Quality and Notifications
[ 84 ]
Provide a repository URL in the Source Code Management section.
29.
In the Build, section select Execute SonarQube Scanner:
30.

Managing Code Quality and Notifications
[ 85 ]
Select JDK and provide a Path to project properties:
31.
TPOBSQSPKFDUQSPQFSUJFT contains the following details. TPOBSTPVSDF is
32.
the main property for static code analysis. We inform SonarQube which directory
needs to be analyzed. We can add same content in the analysis properties to
achieve same results and not require TPOBSQSPKFDUQSPQFSUJFT:

Managing Code Quality and Notifications
[ 86 ]
If language property is not mentioned, then SonarQube is intelligent enough to
33.
detect the language available in the source files. The same properties can be given
in the Analysis Properties textbox.
Click on Save and then click on Build Now.
34.
Once the Jenkins job is executed successfully, go to SonarQube and verify.
35.
Click on the Project:
36.

Managing Code Quality and Notifications
[ 87 ]
It gives details on Bugs, Vulnerability, and Code Smells. Verify each tab and
37.
content available in it as a self-exercise:
So we have successfully done static code analysis of a sample application using Jenkins.
Now let's create a new Quality Profile and assign the project so every time static code
analysis is performed, a default profile is not used, but a custom profile is utilized:
Go to Quality Profiles; in the Java section, copy the default profile:
1.

Managing Code Quality and Notifications
[ 88 ]
Give a specific name to it and click on Copy:
2.

Managing Code Quality and Notifications
[ 89 ]
We can specify projects for a specific quality profile by clicking on Change
3.
Projects as well:
We can also specify Quality Profile by clicking a specific project. Go to
4.
Administration, select Quality Profiles, and select the custom profile created for
Java:
Just for troubleshooting, if we come across a Jenkins job failure due to SCM
5.
blame, then we need to fix that by configuring it in SonarQube.

Managing Code Quality and Notifications
[ 90 ]
Go to SonaQube and disable the SCM sensor:
6.
In the next section, we will cover the Quality Gate plugin.

Managing Code Quality and Notifications
[ 91 ]
Quality Gate plugin
The 2VBMJUZ(BUF plugin is useful if we want to fail the Jenkins job based on the result of
Quality Gate:
Install the Sonar Quality Gates Plugin in Jenkins:
1.
As of now, Quality Gate is passed for our sample application:
2.

Managing Code Quality and Notifications
[ 92 ]
Go to the Quality Gates tab and add a condition where if issues are greater than
3.
10, then it should give an error.

Managing Code Quality and Notifications
[ 93 ]
In the same PetClinic-Code build job, as a Quality Gates SonarQube plugin
4.
action from Add post-build action. It asks for the Quality Gates configuration in
the Jenkins configuration:
Go to Manage Jenkins, click on Configure system, and configure Sonar instance
5.
for Quality Gates:

Managing Code Quality and Notifications
[ 94 ]
We already have TPOBSQSPKFDUQSPQFSUJFT in the application. Note the
6.
project key:

Managing Code Quality and Notifications
[ 95 ]
In the Jenkins job, enter the same Project Key and click Save:
7.
Click on Build now to execute a Jenkins build job.
8.

Managing Code Quality and Notifications
[ 96 ]
The Jenkins job has failed. Go through the console output and the reason will be
9.
Quality Gate failure:

Managing Code Quality and Notifications
[ 97 ]
Go to the SonarQube dashboard and verify the reason for Failure and Quality
10.
Profile too:
This is how static code analysis can be configured using Jenkins and SonarQube integration.
Email notifications on build status
What if we want to send a notification of the build status from Jenkins? We can configure
mail notifications in such scenarios.
If a Gmail account is configured with two-factor authentication, then the following process
can help to setup notification systems:
Go to Less secure apps in the Google account.
1.
Click on Learn More in the second paragraph where two-factor authentication is
2.
mentioned:

Managing Code Quality and Notifications
[ 98 ]
Click on the App Password page:
3.

Managing Code Quality and Notifications
[ 99 ]
Provide a name and click on Generate:
4.
Copy the password:
5.
Go to Manage Jenkins and click on Configure system.
6.
Go to the Email notification section.
7.

Managing Code Quality and Notifications
[ 100 ]
Provide all required details and in the password field, copy the recently
8.
generated password for the Jenkins app.
Click on Test configuration:
9.

Managing Code Quality and Notifications
[ 101 ]
Go to the PetClinic-Code job and select E-mail notification from the Post build
10.
action:
Execute the Jenkins job and if it fails, go to the console output and verify the
11.
output:
Go to your inbox and verify the mail sent by Jenkins:
12.

Managing Code Quality and Notifications
[ 102 ]
Done!
Summary
Here we are again at the section of a chapter that gives us a sense of achievement about
knowing something more. In this chapter, we have covered how to configure SonarQube
for static code analysis using Jenkins. We have also created a custom profile in SonarQube.
We used the Quality Gate plugin to reflect the state of quality gate of SonarQube in Jenkins.
In the last section, we configured email notifications for an unstable build where Gmail
accounts use two-factor authentication.
In the next chapter, we will cover how to perform Continuous Integration using Jenkins.

4
Continuous Integration with
Jenkins
Continuous Integration is one of the most important DevOps practices and serves as a base
to implement DevOps culture in any organization. It is all about committing code into
shared repositories such as Git or SVN multiple times, based on feature completion or bug
fixes, and then verifying it with static code analysis using SonarQube, automated builds
(using Ant, Maven, or Gradle), executing unit test cases, and creating a package.
There are many tools that can be utilized for Continuous Integration. Jenkins is one of the
most popular open source tools that can be utilized for multiple programming languages in
which applications can be built. VSTS and Atlassian Bamboo are some other tools or
services that can be utilized for Continuous Integration.
This chapter describes in detail how to create and configure build jobs for Java, and how to
run build jobs and unit test cases using Ant and Maven build tools. It covers all aspects of
running a build to create a distribution file or war file for deployment. We will focus on the
following topics in this chapter :
The Dashboard View plugin
Creating and configuring a build job for a Java application with Ant
Creating and configuring a build job for a Java application with Maven
Build execution with test cases

Continuous Integration with Jenkins
[ 104 ]
In this chapter, we will cover the main parts of Continuous Integration practices as a part of
our DevOps journey.
At the end of this chapter, we will know how to configure Ant, and Java-based projects in
Jenkins so we can compile source files, execute unit test cases, and create a package file.
Dashboard View plugin
Before creating and configuring build jobs for Java applications, we will install the
Dashboard View plugin for better management of builds and to display results of builds
and tests.
This plugin provides a portal-like view for Jenkins build jobs. Download it from IUUQTX
JLJKFOLJOTDJPSHEJTQMBZ+&/,*/4%BTICPBSE7JFX. It will be beneficial in showing
results and trends. In addition, it also allows users to arrange display items in an effective
manner. On the Jenkins dashboard, go to the Manage Jenkins link, click on Manage
Plugins, and install the Dashboard View plugin. Verify the successful installation by
clicking on the Installed tab.

Continuous Integration with Jenkins
[ 105 ]
Now go to the Jenkins dashboard and click on the plus sign available on the tab.
Provide a View name, select Dashboard, and click on OK:
Once the Dashboard view is created, we can configure it by selecting Jobs and customizing
it as shown in the following screenshot:

Continuous Integration with Jenkins
[ 106 ]
This is what our dashboard looks like. We can configure multiple projects and multiple
portlets can be set in different sections available on dashboard:
Often the Dashboard View plugin is used to organize and arrange jobs with specific details,
which is essential to know for an administrator or users in the context of automation results.
Configuring different portlets related to test results in the Dashboard View.
In $IBQUFS, Installation and Configuration of Code Repository and Build Tools, we installed
and configured Java and Ant. We will now integrate a sample Ant project with Jenkins and
understand how things work.
Creating and configuring a build job for a
Java application with Ant
We always say that tools are not important, but it is always a good idea to have some
understanding of tools so we can perform operations and troubleshoot in an easy manner.
Ant uses the CVJMEYNM file to execute different tasks that lead to the creation of a QBDLBHF
file.

Continuous Integration with Jenkins
[ 107 ]
We will use a sample project for Ant that is available at IUUQTHJUIVCDPNNJUFTI"O
U&YBNQMF.
Its CVJMEYNM file contains the following details:
YNMWFSTJPO 
QSPKFDUOBNF"OU&YBNQMFEFGBVMUXBS 
QBUIJEDPNQJMFDMBTTQBUI 
GJMFTFUEJS8FC$POUFOU8&#*/'MJC 
JODMVEFOBNFKBS 
GJMFTFU 
QBUI 
UBSHFUOBNFJOJU 
NLEJSEJSCVJMEDMBTTFT 
NLEJSEJSEJTU 
UBSHFU 
UBSHFUOBNFDPNQJMFEFQFOETJOJU 
KBWBDEFTUEJSCVJMEDMBTTFTEFCVHUSVFTSDEJSTSD 
DMBTTQBUISFGJEDPNQJMFDMBTTQBUI 
KBWBD 
UBSHFU 
UBSHFUOBNFXBSEFQFOETDPNQJMF 
XBSEFTUGJMFEJTU"OU&YBNQMFXBS
XFCYNM8FC$POUFOU8&#*/'XFCYNM 
GJMFTFUEJS8FC$POUFOU 
MJCEJS8FC$POUFOU8&#*/'MJC 
DMBTTFTEJSCVJMEDMBTTFT 
XBS 
UBSHFU 
UBSHFUOBNFDMFBO 
EFMFUFEJSEJTU 
EFMFUFEJSCVJME 
UBSHFU 
QSPKFDU 
We will use a war target from this build file to create a package that we can deploy in a
Local or Remote Tomcat server.

Continuous Integration with Jenkins
[ 108 ]
We will now create a Freestyle project in Jenkins for our first Ant project integration in
Jenkins:
Go to the Jenkins dashboard and click on New item.
1.
Enter an item name and select Freestyle project.
2.
Click OK.
3.
Once a project is created in Jenkins, it will open it in edit mode. Here we can
4.
configure all things related to automation that we want to perform in different
sections.
Go to the Source Code Management section and select Git.
5.
Provide a Repository URL. In our case, it is available on GitHub.
6.

Continuous Integration with Jenkins
[ 109 ]
Click on the Build Environment section.
7.
Click on Add build step and select Invoke Ant.
8.
We have configured Apache Ant in Global Tool Configuration.
9.
Select Ant configured in Jenkins from the list box.
10.

Continuous Integration with Jenkins
[ 110 ]
Select the target we want to execute from the CVJMEYNM file and click on Save.
11.
Click on Build now.
12.
Go to the Console output of a currently executed build.
13.

Continuous Integration with Jenkins
[ 111 ]
Observe the log. All targets available in CVJMEYNM will be executed based on
14.
dependencies mentioned in it.
Verify that the XBS file has been created.
15.
Go to Workspace and find the XBS file in the EJTU directory:
16.
So we have now seen how to configure an Ant-based Java project in Jenkins and create a
QBDLBHF file.
Creating and configuring a build job for a
Java application with Maven
Apache Maven is a build automation tool specifically used for Java-based projects to
automate the creation of an application build by compiling source code, running automated
unit tests, and packaging binary code.
It is based on the Project Object Model (POM). We will use a PetClinic Maven-based
project available at IUUQTHJUIVCDPNNJUFTITQSJOHQFUDMJOJD.

Continuous Integration with Jenkins
[ 112 ]
It has a QPNYNM that is as follows:
YNMWFSTJPOFODPEJOH65' 
QSPKFDUYNMOTYTJIUUQXXXXPSH9.-4DIFNBJOTUBODF
YNMOTIUUQNBWFOBQBDIFPSH10.
YTJTDIFNB-PDBUJPOIUUQNBWFOBQBDIFPSH10.
IUUQNBWFOBQBDIFPSHNBWFOW@@YTE 
NPEFM7FSTJPO NPEFM7FSTJPO 
HSPVQ*E PSHTQSJOHGSBNFXPSLTBNQMFTHSPVQ*E 
BSUJGBDU*E TQSJOHQFUDMJOJDBSUJGBDU*E 
WFSTJPO 4/"14)05WFSTJPO 
OBNF QFUDMJOJDOBNF 
QBDLBHJOH XBSQBDLBHJOH 
QSPQFSUJFT 
(FOFSJDQSPQFSUJFT 
KBWBWFSTJPO KBWBWFSTJPO 
QSPKFDUCVJMETPVSDF&ODPEJOH 65'
QSPKFDUCVJMETPVSDF&ODPEJOH QSPKFDUSFQPSUJOHPVUQVU&ODPEJOH 65'
QSPKFDUSFQPSUJOHPVUQVU&ODPEJOH 
4QSJOH 
TQSJOHJPQMBUGPSNWFSTJPO 3&-&"4&TQSJOHJP
QMBUGPSNWFSTJPO TQSJOHEBUBKECDWFSTJPO 3&-&"4&TQSJOHEBUB
KECDWFSTJPO 
+BWB&&+BWB4&EFQFOEFODJFT 
UPNDBUWFSTJPO UPNDBUWFSTJPO 
5FTU 
BTTFSUKWFSTJPO BTTFSUKWFSTJPO 
%BUFT 
KPEBUJNFIJCFSOBUFWFSTJPO KPEBUJNF
IJCFSOBUFWFSTJPO 
KPEBUJNFKTQUBHTWFSTJPO KPEBUJNFKTQUBHTWFSTJPO 
KBEJSBVTFSUZQFDPSFWFSTJPO ("KBEJSBVTFSUZQF
DPSFWFSTJPO 
0UIFST 
NZTRMESJWFSWFSTJPO NZTRMESJWFSWFSTJPO 
8FCEFQFOEFODJFT 
EBOEFMJPOWFSTJPO EBOEFMJPOWFSTJPO 
EBOEFMJPOEBUBUBCMFTWFSTJPO 
EBOEFMJPOEBUBUBCMFTWFSTJPO 
DPCFSUVSBWFSTJPO DPCFSUVSBWFSTJPO 
QSPQFSUJFT 
EFQFOEFODZ.BOBHFNFOU 
*NQPSUUIFNBWFO4QSJOH*01MBUGPSN#JMM0G.BUFSJBMT

#0. 
EFQFOEFODJFT 
EFQFOEFODZ 
HSPVQ*E JPTQSJOHQMBUGPSNHSPVQ*E 
BSUJGBDU*E QMBUGPSNCPNBSUJGBDU*E 

Continuous Integration with Jenkins
[ 113 ]
WFSTJPO \TQSJOHJPQMBUGPSNWFSTJPO^WFSTJPO 
UZQF QPNUZQF 
TDPQF JNQPSUTDPQF 
EFQFOEFODZ 
EFQFOEFODJFT 
EFQFOEFODZ.BOBHFNFOU 
VSM EFNPQFUDMJOJDVSM 
QSPKFDU 
In $IBQUFS, Installation and Configuration of Code Repository and Build Tools, we have
already configured Java and Maven. We need to utilize both in our Maven project in
Jenkins:
Go to the Jenkins dashboard and click on New item. Enter an item name and
1.
select Maven project. Click OK:

Continuous Integration with Jenkins
[ 114 ]
In the Build section, give the location of Root POM. There are defined goals for
2.
Maven-based projects. Give QBDLBHF as a Goal:
Click on Save.
3.
If we are behind the proxy then we need to provide proxy details in Maven so it
4.
can use that to download dependencies.
Go to the ."7&/@)0.& directory.
5.
Go to the DPOG directory and open TFUUJOHTYNM.
6.
Uncomment the following block:
QSPYJFT 
QSPYZ 
JE PQUJPOBMJE 
BDUJWF USVFBDUJWF 
QSPUPDPM IUUQQSPUPDPM 
VTFSOBNF UFTUVTFSVTFSOBNF 
QBTTXPSE TECKTEICIKXQBTTXPSE 
IPTU QSPYZDPNIPTU 
QPSU QPSU 
OPO1SPYZ)PTUT MPDBMIPTUOPO1SPYZ)PTUT 
QSPYZ 
QSPYJFT 

Continuous Integration with Jenkins
[ 115 ]
Click on Build Now.
7.
Go to Console Output to verify the log. As it is a Maven project, it will download
8.
dependencies mentioned in the QPNYNM file from the internet.
Verify the test results in the log and also verify that the XBS file has been
9.
created.

Continuous Integration with Jenkins
[ 116 ]
Go to the customized dashboard that we have created and verify whether any
10.
results have come in or not:
To verify the JAR files that are downloaded from the Maven repository, go to the
11.
6TFST directory and select the specific user that we have logged in as. Find the
N directory and all the JAR files will be available there in the case of Windows
operating systems:

Continuous Integration with Jenkins
[ 117 ]
To check the QBDLBHF file created with Jenkins and Maven integration, go to the
12.
+&/,*/4@)0.&XPSLTQBDFKPCOBNFUBSHFU directory.
We have successfully created a XBS file that can be deployed on the server. It can
13.
be a web server or an application server. We will use the Tomcat server for
application deployment.
Summary
As we promised in the beginning of the chapter, we have covered how to integrate Ant and
Maven based applications in Jenkins in detail. We have also provided details on the
Dashboard View plugin.
In the next chapter, we will cover deployment of the XBS file that we have created using
Continuous Integration. We will deploy application packages in different public clouds
such as AWS and Microsoft Azure in Infrastructure as a Service and Platform as a Service.

5
Continuous Delivery -
Implementing Automated
Deployment
Once we have a package ready for deployment after Continuous Integration, our next step
should be deployment of that package in to a web or application server.
We can deploy WAR files manually, or with commands (batch file or shell script), or with
Jenkins plugins, or any third-party tool that can be integrated with Jenkins. In our case, we
will use Jenkins plugins for application deployment into runtime environments, which can
be local or remote.
This chapter will take one step forward in the DevOps pipeline by deploying artifacts in
local or remote application servers. It will give insight into automated deployment and
continuous delivery processes and it will also cover how to deploy applications on public
cloud platforms using Jenkins. In this chapter, we will cover following topics:
An overview of Continuous Delivery and Continuous Deployment
Installing Tomcat
Deploying a war file from Jenkins to Tomcat
Deploying a war file from Jenkins to AWS Elastic Beanstalk
Deploying a war file from Jenkins to Microsoft Azure App Services

Continuous Delivery - Implementing Automated Deployment
[ 119 ]
In this chapter, we will cover the main parts of Continuous Delivery practice as a part of
our DevOps journey:
At the end of this chapter, we will know how to deploy an application to web or application
servers in AWS and Microsoft Azure.
An overview of Continuous Delivery and
Continuous Deployment
Continuous Delivery (CD) is a DevOps practice that is used to deploy an application
quickly to a high quality, with an automated approach, in non-production environments. In
Continuous Delivery, an application package is always production ready.
Continuous Deployment is a DevOps practice that is used to deploy an application quickly
to a high quality, with an automated approach, in a production environment.
Automated approaches to deploying application packages in production and non-
production won't change. The approval process may be set up in cases of the deployment of
application packages in the production environment though.

Continuous Delivery - Implementing Automated Deployment
[ 120 ]
In the following sections, we will deploy war files into different environments using
different approaches.
Installing Tomcat
Apache Tomcat is an open source server that can be utilized to deploy Java-based web
applications. Apache Tomcat implements several Java EE specifications including Java
Servlet, JavaServer Pages, Java EL, and WebSocket.
Tomcat installation is very simple. Download it from IUUQUPNDBUBQBDIFPSH, based
on the requirement.
Download the installable files and extract them. Go to the folder and find the bin directory.
Based on the operating system, run TUBSUVQCBU or TUBSUVQTI in the command window
or Terminal.
Deploying a war file from Jenkins to Tomcat
For application deployment, we can utilize multiple ways to deploy an application in a web
server or application server. We can use batch script or shell script to copy the package file
created after a Continuous Integration process, or we can use a Jenkins plugin to deploy an
application:
Go to Manage Jenkins | Manage Plugins and install Deploy to container
1.
Plugin:

Continuous Delivery - Implementing Automated Deployment
[ 121 ]
Wait until the plugin is installed successfully:
2.
To allow deployment using the Jenkins plugin, go to the Tomcat installation
3.
directory and PQFODPOG=UPNDBUVTFSTYNM.
Create a new role and new user as follows:
4.
Restart Tomcat.
5.
Create a new Freestyle build in Jenkins named 1FU$MJOJD%FQMPZ.
6.

Continuous Delivery - Implementing Automated Deployment
[ 122 ]
What we will do here is copy the artifact created from the 1FU$MJOJD1BDLBHF
7.
job and deploy it in Tomcat. Install the Copy Artifact plugin to perform this
action. Give the project a name and path from which we need to copy the WAR
file:

Continuous Delivery - Implementing Automated Deployment
[ 123 ]
Give a path to the WAR file for deployment using the Jenkins plugin. Select
8.
Deploy war/ear to a container from Post build actions. Click on Add Container
and select the latest version of Tomcat. Give a Tomcat URL. Give the username
and password we defined in UPNDBUVTFSTYNM:

Continuous Delivery - Implementing Automated Deployment
[ 124 ]
Execute the build by clicking on Build now. Verify the logs for application
9.
deployment:

Continuous Delivery - Implementing Automated Deployment
[ 125 ]
Go to a browser and visit the application with the Tomcat URL and the context of
10.
an application:
In the next section, we will deploy the PetClinic application in Tomcat that resides in the
AWS EC2 instance.

Continuous Delivery - Implementing Automated Deployment
[ 126 ]
Deploying a WAR file from Jenkins to AWS
Elastic Beanstalk
AWS Elastic Beanstalk is a Platform as a Service (PaaS). We will use it to deploy the
PetClinic application. These are the steps to deploy an application on AWS Elastic
Beanstalk:

Continuous Delivery - Implementing Automated Deployment
[ 127 ]
Let's create a sample application in Elastic Beanstalk to understand how Elastic Beanstalk
works and then we will use the Jenkins plugin to deploy an application into it:
Click on Services in the AWS management console and select AWS Elastic
1.
Beanstalk. Create a new application named QFUDMJOJD. Select Tomcat as the
Platform and select the Sample application radio button:

Continuous Delivery - Implementing Automated Deployment
[ 128 ]
Verify the sequence of events for the creation of a sample application:
2.

Continuous Delivery - Implementing Automated Deployment
[ 129 ]
It will take some time, and once the environment has been created, it will be
3.
highlighted in green:
Click on the petclinic environment and verify that you can see Health and
4.
Running Version in the dashboard:

Continuous Delivery - Implementing Automated Deployment
[ 130 ]
Verify that you can see the environment ID and URL. Click on the URL and
5.
verify that you can see the default page:

Continuous Delivery - Implementing Automated Deployment
[ 131 ]
Install the AWS Elastic Beanstalk Publisher plugin. For more details, visit
6.
IUUQTXJLJKFOLJOTDJPSHEJTQMBZ+&/,*/4"84#FBOTUBML1VCMJTIFS1M
VHJO:
A new section will come up in Post-build Actions for Elastic Beanstalk.
7.
Click on the Jenkins dashboard and select Credentials; add your AWS
8.
credentials.
Go to your Jenkins build and select AWS Credential, which is set in the global
9.
configuration.
Select AWS Region from the list and click on Get Available Applications. As we
10.
have created a sample application, it will show up like this.

Continuous Delivery - Implementing Automated Deployment
[ 132 ]
In Environment Lookup, provide an environment ID in the Get Environments
11.
By Name box and click on Get Available Environments:
Save the configuration and click on Build now.
12.

Continuous Delivery - Implementing Automated Deployment
[ 133 ]
Now let's verify the AWS management console to check whether the WAR file is being
copied in Amazon S3 or not:
Go to S3 Services and check the available buckets:
1.
Since the WAR file is large, it will take a while to upload to Amazon S3. Once it is
2.
uploaded, it will be available in the Amazon S3 bucket.
Verify the build job's execution status in Jenkins. Some sections of the expected
3.
output are that:
The test case execution and WAR file creation are successful
The build is successful
Now check the AWS management console:
4.

Continuous Delivery - Implementing Automated Deployment
[ 134 ]
Go to Services, click on AWS Elastic Beanstalk, and verify the environment. The
5.
previous version was Sample Application. Now, the version is updated as given
in Version Label Format in the Jenkins build job configuration:
Go to the dashboard and verify Health and Running Version again.
6.

Continuous Delivery - Implementing Automated Deployment
[ 135 ]
Once everything has been verified, click on the URL for the environment, and our
7.
PetClinic application should now be live:
Once the application deployment is successful, terminate the environment. We have thus
successfully deployed our application on Elastic Beanstalk.

Continuous Delivery - Implementing Automated Deployment
[ 136 ]
Deploying a war file from Jenkins to
Microsoft Azure App Services
Microsoft Azure App Services is a PaaS. In this section, we will look at the Azure Web App
and how we can deploy our PetClinic application:
We need to have a Microsoft Azure subscription. Go to App Services and click on
1.
Add:

Continuous Delivery - Implementing Automated Deployment
[ 137 ]
Click on Create:
2.

Continuous Delivery - Implementing Automated Deployment
[ 138 ]
Go to the Microsoft Azure portal at IUUQTQPSUBMB[VSFDPN. Click on App
3.
Services and then on Add. Provide values for App name, Subscription,
Resource Group, and App Service Plan/Location. Click on Create:

Continuous Delivery - Implementing Automated Deployment
[ 139 ]
Once the Azure Web App is created, see whether it shows up in the Azure portal.
4.
Click on DevOpsPetClinic for details related to the URL, Status, Location, and
so on:
Verify you can see this in the App Services section too:
5.

Continuous Delivery - Implementing Automated Deployment
[ 140 ]
Click on All Settings, go to the GENERAL section, and click on Application
6.
settings to configure the Azure Web App for Java web application hosting. Select
the Java version, Java Minor version, Web container, and Platform, and then
click on Always On:
Visit the URL of an Azure Web App from your browser and verify that it is ready
7.
to host our sample Spring application, PetClinic:

Continuous Delivery - Implementing Automated Deployment
[ 141 ]
Click on All Settings and go to Deployment credentials in the PUBLISHING
8.
section. Provide a username and password, and save your changes:

Continuous Delivery - Implementing Automated Deployment
[ 142 ]
Let's install the Publish Over FTP plugin in Jenkins. We will use the Azure Web App's FTP
details to publish the PetClinic WAR file. Let's go to the Jenkins dashboard:
Click on New Item and select Freestyle project.
1.
In Jenkins, go to Manage Jenkins and click on Configure | Configure FTP
2.
settings. Provide a Hostname, Username, and Password, which are available in
the Azure portal.
Go to XXXEFWPQTQFUDMJOJDTDNB[VSFXFCTJUFTOFU and download the Kudu
3.
console. Navigate to the different options and find the site directory and XFCBQQT
directory.
Click on Test Configuration and, once you get a Success message, you are ready
4.
to deploy the PetClinic application:
In the build job we created, go to the Build section and configure Copy artifacts
5.
from another project. We will copy the WAR file to a specific location on a
virtual machine.
In Post-build Actions, click on Send build artifacts over FTP. Select the FTP
6.
Server Name configured in Jenkins. Configure Source files and the Remove
prefix accordingly for deployment of an Azure Web App.

Continuous Delivery - Implementing Automated Deployment
[ 143 ]
Select Verbose output in the console:
7.
Click on Build now and see what happens behind the scenes.
8.
Go to the Kudu console, click on DebugConsole, and go to Powershell. Go to
9.
site | wwwroot | webapps. Check whether the WAR file has been copied:

Continuous Delivery - Implementing Automated Deployment
[ 144 ]
Now we have an application deployed on Azure Web Apps.
Summary
In this chapter, we have covered definitions of Continuous Delivery and Continuous
Deployment. We have seen different approaches to application package deployment, such
as application deployment in a local Tomcat server, and a Tomcat server available in
Infrastructure as a Service (Amazon EC2), and Platform as a Service (AWS Elastic Beanstalk,
Microsoft Azure App Services).
In the next chapter, we will discuss in detail how to perform different types of testing, such
as functional testing using Selenium and load testing with Apache JMeter, to implement
continuous testing.

6
Continuous Testing - Functional
and Load Testing with Jenkins
Continuous Testing is one of the most important DevOps practices available for the End to
End Automation of application lifecycle management.
It not only considers automation, but it also includes aspects such as culture change and
tools. It is essential to integrate automated tests into application lifecycle management early,
to test quickly and in a timely manner, and to repeat the test execution process efficiently.
This chapter will give insights into how functional testing and load testing can be
performed and how they can be integrated with Jenkins to adopt Continuous Testing
practices as part of a DevOps culture.
This is not the whole picture of Continuous Testing, but it will certainly give a glimpse of
how to use Continuous Testing DevOps practices to change the existing culture using
automated tests. In this chapter, we will cover following topics:
Functional testing with Selenium
Jenkins and Selenium integration
Load testing with Apache JMeter
Jenkins and Apache JMeter integration

Continuous Testing - Functional and Load Testing with Jenkins
[ 146 ]
In this chapter, we will cover Continuous Testing practices as a part of our DevOps journey:
At the end of this chapter, we will know how to perform functional testing and load testing
on the deployed application.
Functional testing with Selenium
In this chapter, we will use Selenium and Eclipse for a functional test case execution. We
have already deployed the application in the Tomcat, so we can perform functional tests
and load tests on that deployment.
Let's go step by step through creating a sample functional test case and then executing it
using Jenkins.
The PetClinic project is a Maven-based Spring application, and we will create a test case
using Eclipse and Maven. We will utilize the NFDMJQTF plugin in Eclipse.

Continuous Testing - Functional and Load Testing with Jenkins
[ 147 ]
We have installed Eclipse Java EE IDE for Web Developers, Version: Mars.2 Release (4.5.2),
Build ID: 20160218-0600, so lets start!
Go to the Eclipse marketplace and install the Maven Integration for Eclipse
1.
plugin.
Create a Maven project using a wizard in the Eclipse IDE:
2.

Continuous Testing - Functional and Load Testing with Jenkins
[ 148 ]
Select Create a simple project (skip archetype selection) and click on Next:
3.
Go through the wizard and create a project. It will take some time to create a
4.
project in Eclipse. Provide Artifact, Version, Packaging, Name, and Description.
Click on Finish.
Wait until the Maven project is created and configured. Make sure that Maven is
5.
installed and configured properly. If Maven is behind a proxy, configure the
proxy details in DPOGYNM, available in the Maven directory.
In 1PNYNM, we need to add Maven, Selenium, TestNG, and JUnit dependencies
6.
in the QSPKFDU  node. The following is a modified 1PNYNM:
QSPKFDU
YNMOTIUUQNBWFOBQBDIFPSH10.
YNMOTYTJIUUQXXXXPSH9.-4DIFNBJOTUBODF
YTJTDIFNB-PDBUJPOIUUQNBWFOBQBDIFPSH10.
IUUQNBWFOBQBDIFPSHYTENBWFOYTE 
NPEFM7FSTJPO NPEFM7FSTJPO 
HSPVQ*E DPNUJOZHSPVQ*E 
BSUJGBDU*E UFTUBSUJGBDU*E 
WFSTJPO 4/"14)05WFSTJPO 
OBNF UFTUOBNF 
CVJME 
QMVHJOT 

Continuous Testing - Functional and Load Testing with Jenkins
[ 149 ]
QMVHJO 
HSPVQ*E PSHBQBDIFNBWFOQMVHJOTHSPVQ*E 
BSUJGBDU*E NBWFODPNQJMFSQMVHJOBSUJGBDU*E 
WFSTJPO WFSTJPO 
DPOGJHVSBUJPO 
TPVSDF TPVSDF 
UBSHFU UBSHFU 
DPOGJHVSBUJPO 
QMVHJO 
QMVHJO 
HSPVQ*E PSHBQBDIFNBWFOQMVHJOTHSPVQ*E 
BSUJGBDU*E NBWFOTVSFGJSFQMVHJOBSUJGBDU*E 
WFSTJPO WFSTJPO 
DPOGJHVSBUJPO 
TVJUF9NM'JMFT 
TVJUF9NM'JMF UFTUOHYNMTVJUF9NM'JMF 
TVJUF9NM'JMFT 
DPOGJHVSBUJPO 
QMVHJO 
QMVHJOT 
CVJME 
EFQFOEFODJFT 
EFQFOEFODZ 
HSPVQ*E KVOJUHSPVQ*E 
BSUJGBDU*E KVOJUBSUJGBDU*E 
WFSTJPO WFSTJPO 
TDPQF UFTUTDPQF 
EFQFOEFODZ 
EFQFOEFODZ 
HSPVQ*E PSHTFMFOJVNIRTFMFOJVNHSPVQ*E 
BSUJGBDU*E TFMFOJVNKBWBBSUJGBDU*E 
WFSTJPO WFSTJPO 
EFQFOEFODZ 
EFQFOEFODZ 
HSPVQ*E PSHUFTUOHHSPVQ*E 
BSUJGBDU*E UFTUOHBSUJGBDU*E 
WFSTJPO WFSTJPO 
TDPQF UFTUTDPQF 
EFQFOEFODZ 
EFQFOEFODJFT 
QSPKFDU 

Continuous Testing - Functional and Load Testing with Jenkins
[ 150 ]
Save QPNYNM after adding these changes and build the project again from the
7.
Project menu. It will download new dependencies:
%TGCVGC/CXGP2TQLGEVKP'ENKRUG+&'
Click on the Details button of the dialog box to verify the operation in progress.
8.
The next task is to write the 5FTU/( class. Install the 5FTU/( plugin. Go to Help
9.
and click on Install New Software and Add Repository:

Continuous Testing - Functional and Load Testing with Jenkins
[ 151 ]
Select the items we need to install:
10.

Continuous Testing - Functional and Load Testing with Jenkins
[ 152 ]
Review all the items that need to be installed and click on Next.
11.
Accept the license and click on Finish.
12.
Verify the installation progress in Eclipse.
13.
Now let's create a TestNG class:
14.
Provide a class name:
15.

Continuous Testing - Functional and Load Testing with Jenkins
[ 153 ]
Give a package name and click on Finish.
16.

Continuous Testing - Functional and Load Testing with Jenkins
[ 154 ]
The newly created class will look like the following screenshot:
17.
Right-click on the test file and click on TestNG, convert to TestNG.
18.
This will create a UFTUJOHYNM file that has details about the test suite.
19.
Right-click on project and click on Run Configurations.
20.
Right-click on TestNG and click on New:
21.

Continuous Testing - Functional and Load Testing with Jenkins
[ 155 ]
Provide the project name and select UFTUJOHYNM in the suite.
22.
Click OK and Apply.
23.

Continuous Testing - Functional and Load Testing with Jenkins
[ 156 ]
Click on Run:
24.
If Windows Firewall blocks it, then click on Allow Access.
25.
There is no configuration available in UFTUJOHYNM for execution, so even if
26.
Maven execution runs successfully, no suite will be executed.

Continuous Testing - Functional and Load Testing with Jenkins
[ 157 ]
Generate the 5FTU/( class under the UFTU folder. Select location, TVJUFOBNF,
27.
and DMBTTOBNF:
YNMWFSTJPOFODPEJOH65' 
%0$5:1&TVJUF4:45&.IUUQUFTUOHPSHUFTUOHEUE 
TVJUFOBNF4VJUF 
UFTUOBNF5FTU 
DMBTTFT 
DMBTTOBNFFYBNQMF1FU$MJOJD5FTU 
DMBTTFT 
UFTU 5FTU 
TVJUF 4VJUF 
Go to IUUQTHJUIVCDPNNP[JMMBHFDLPESJWFSSFMFBTFTand download a
28.
version.
Extract the file available in the downloaded ZIP file, based on the system
29.
configuration you have. In our case, we have downloaded HFDLPESJWFS
WXJO.
Click on it and verify the driver details.
30.

Continuous Testing - Functional and Load Testing with Jenkins
[ 158 ]
Let's write some code as well. It will check whether the title of the web page
31.
contains a specific string or not. The result or the outcome of the following code is
based on the title of the page. If it contains a given string, then the test case will
pass; otherwise, it will fail. Here is an example package:
JNQPSUKBWBJP'JMF
JNQPSUPSHPQFORBTFMFOJVN8FC%SJWFS
JNQPSUPSHPQFORBTFMFOJVNGJSFGPY'JSFGPY%SJWFS
JNQPSUPSHUFTUOH"TTFSU
JNQPSUPSHUFTUOHBOOPUBUJPOT5FTU
JNQPSUPSHUFTUOHBOOPUBUJPOT#FGPSF5FTU
JNQPSUPSHUFTUOHBOOPUBUJPOT"GUFS5FTU
QVCMJDDMBTT1FU$MJOJD5FTU\
QSJWBUF8FC%SJWFSESJWFS
!5FTU
QVCMJDWPJEUFTU1FU$MJOJD
\
$IBOHFUIF63-CBTFEPOUIFMPDBUJPOXIFSF5PNDBUJTJOTUBMMFE
BOEBQQMJDBUJPOJTEFQMPZFE
ESJWFSHFU
IUUQMPDBMIPTUQFUDMJOJD
4USJOHUJUMFESJWFSHFU5JUMF

"TTFSUBTTFSU5SVF
UJUMFDPOUBJOT
B4QSJOH
'SBNFXPSLL
^
!#FGPSF5FTU
QVCMJDWPJECFGPSF5FTU
\
'JMFGJMFOFX
8FIBWFVTFE'JSFGPYGPSUFTUJOHDIBOHFUIJTESJWFSCBTFEPO
SFRVJSFNFOUTBOEMPDBUJPOUPP
'JMF
'==+FOLJOT&TTFOUJBMT==HFDLPESJWFSW
XJO==HFDLPESJWFSFYF
4ZTUFNTFU1SPQFSUZ
XFCESJWFSHFDLPESJWFS
GJMFHFU"CTPMVUF1BUI

ESJWFSOFX'JSFGPY%SJWFS

^
!"GUFS5FTU
QVCMJDWPJEBGUFS5FTU
\
ESJWFSRVJU

^
^
Let's run the Maven test again from Eclipse.
32.
The following is the output when the test case is executed successfully:
33.

Continuous Testing - Functional and Load Testing with Jenkins
[ 159 ]
Check the All Tests tab in the Results of the running suite section in Eclipse. We
34.
can see successful execution here:

Continuous Testing - Functional and Load Testing with Jenkins
[ 160 ]
Check the Failed Tests tab in the Results of the running suite section in Eclipse.
35.
Check the Summary tab in the Results of the running suite section in Eclipse in
36.
the successful scenario.
In the code, change the text available for title comparison so the test case fails.
37.
Verify the output in Console:
38.
Check the All Tests tab in the Results of running suite section in Eclipse and
39.
notice the failure icon.

Continuous Testing - Functional and Load Testing with Jenkins
[ 161 ]
Observe the Failed Tests tab in the Results of the running suite section in Eclipse.
40.
Click on UFTU1FU$MJOJD and verify the Failure Exception.
41.
Check the Summary tab in the Results of the running suite section in Eclipse.
42.

Continuous Testing - Functional and Load Testing with Jenkins
[ 162 ]
So, we have created a sample test case based on Selenium to verify the title of the PetClinic
home page.
Now let's try to execute the same thing from Jenkins:
Check in the Test Project in Repository. Create a 1FU$MJOJD'VOD5FTU
1.
GSFFTUZMF job in Jenkins.
In the Build section, provide the Root POM location and Goals and options to
2.
execute:

Continuous Testing - Functional and Load Testing with Jenkins
[ 163 ]
Save the build job and click on Build now.
3.
Verify the execution of the build job in the Console output.
4.

Continuous Testing - Functional and Load Testing with Jenkins
[ 164 ]
This will open a Mozilla Firefox window and open the URL that is given in the
5.
code. This requires our PetClinic application to be deployed on a web server and
be running without any issues:
Install TestNG Results Plugin:
6.
Go to Post build Actions and select Publish TestNG Results:
7.

Continuous Testing - Functional and Load Testing with Jenkins
[ 165 ]
Provide TestNG XML report pattern:
8.

Continuous Testing - Functional and Load Testing with Jenkins
[ 166 ]
Click on Build now:
9.
Go to the Project dashboard and verify the graphs for TestNG results:
10.

Continuous Testing - Functional and Load Testing with Jenkins
[ 167 ]
We have seen how to execute Selenium-based test cases in Jenkins. In the next section, we
will see how to execute a load test using Jenkins.
Load testing with Apache JMeter
Apache JMeter is an open source Apache project. It is a pure Java application. Apache
JMeter is used to load test, in order to analyze and measure the performance of services.
Download Apache JMeter from IUUQKNFUFSBQBDIFPSHEPXOMPBE@KNFUFSDHJ. Extract
the files and go to the bin directory. Execute KNFUFSCBU or KNFUFSTI.
Open the Apache JMeter console. Create a Test Plan.
1.
Right-click on the Test Plan and click on Add; select Threads (Users).
2.
Select Thread Group.
3.
Provide Thread Group name.
4.
In Thread Group properties, provide Number of Threads, Ramp-up Period, and
5.
Loop Count.
Right-click on Thread Group. Click on Add. Click on Sampler. Click on HTTP
6.
Request.
In HTTP Request, provide Server Name or IP. In our case, it will be localhost or
7.
an IP address.
Give the Port Number where your web server is running.
8.

Continuous Testing - Functional and Load Testing with Jenkins
[ 168 ]
Select the Get method and provide a path to the load test:
9.
%TGCVGCP*6624GSWGUVKP#2CEJG,/GVGTVQEQPaIWTG5GTXGT0COG2QTVPWODGTCPFOGVJQFFGVCKNU
Save the KNY file.
10.

Continuous Testing - Functional and Load Testing with Jenkins
[ 169 ]
Now let's create a Jenkins job:
Create a freestyle job in Jenkins:
1.

Continuous Testing - Functional and Load Testing with Jenkins
[ 170 ]
Add the Build step Execute Windows batch command. Add the following
2.
command. Replace the location of KNFUFSCBU based on the installation
directory, and the location of the KNY file too:
        C:\apache-jmeter-3.0\bin\jmeter.bat -
        Jjmeter.save.saveservice.output_format=xml -n -t
        C:\Users\Mitesh\Desktop\PetClinic.jmx -l Test.jtl
Add Post-build Actions:
3.

Continuous Testing - Functional and Load Testing with Jenkins
[ 171 ]
Publish Performance test result report add KUM file.
4.

Continuous Testing - Functional and Load Testing with Jenkins
[ 172 ]
Click on Build now:
5.
Verify Performance Trend on the Project dashboard by clicking on the Test
6.
results graph.
Click on Performance Trend:
7.

Continuous Testing - Functional and Load Testing with Jenkins
[ 173 ]
Verify performance breakdown for Response Time and Percentage of errors:
8.

Continuous Testing - Functional and Load Testing with Jenkins
[ 174 ]
Click on Last Report and get more details on the load test results:
9.
Done!
Summary
Finally, we are at the end of the chapter. We have performed functional testing using
Selenium and then integrated it with Jenkins. We have also performed load testing using
Apache JMeter and then integrated it with Jenkins.
This is useful when we want to achieve automated testing in the pipeline for functional
testing and load testing. We can set notifications and other configurations based on the
culture of an organization too.
In the next chapter, we will cover how to orchestrate all the build jobs we have created up
to now, to create a pipeline. We will create a pipeline using the Build Pipeline plugin and
the Jenkins 2 Pipeline feature.

7
Build Pipeline and Pipeline as a
Code
Up to now, we have covered all specific tasks that are individual and can work as a
stepping stone to performing other steps, such as static code analysis, Continuous
Integration, Continuous Delivery, and Continuous Testing.
What if we need to fix the sequence of execution of all such tasks with or without manual
intervention?
What if we want to create a pipeline where one successful execution of Job can lead to
another execution of Job?
This is where we will utilize the Build Pipeline plugin and the Pipeline as a Code feature
available in Jenkins 2 for the orchestration of the end-to-end automation of Application Life
Cycle Management. We have executed a pipeline and all build jobs on a Windows system.
Based on your operating system, there might be some changes that you may need to do and
we have mentioned these as comments at specific places in the script or code.
This chapter will cover how to orchestrate a build job to execute it in a specific sequence
along with other build jobs. We will cover the Build Pipeline plugin and the Pipeline as a
Code feature that is available in Jenkins 2 and later. The following are the major topics that
we will cover in this chapter:
Build Pipeline
Upstream and downstream jobs
Overview of Pipeline as a Code
Pipeline as a Code: implementation
Promoted builds

Build Pipeline and Pipeline as a Code
[ 176 ]
In this chapter, we will cover end-to-end automation with the Build Pipeline plugin and the
Pipeline as a Code feature as a part of our DevOps journey:
At the end of this chapter, we will know how to create and configure a pipeline using the
plugin, and also using Groovy syntax.
Build Pipeline
Continuous Integration and Continuous Delivery have become popular practices for
application development. The Build Pipeline plugin provides a pipeline view of upstream
and downstream connected jobs that typically form a build pipeline, with the ability to
define manual triggers or an approval process. We can create a chain of jobs by
orchestrating version promotion through different quality gates, before we deploy it in
production.

Build Pipeline and Pipeline as a Code
[ 177 ]
Before starting with the Build Pipeline plugin, let's create a job to deploy into a production
environment. We will use the Deploy to Container plugin for application deployment in
remote Tomcat.
Click on New Item in the Jenkins Dashboard and give it a name. Click on OK:
1.

Build Pipeline and Pipeline as a Code
[ 178 ]
Configure a post-build action similar to what we configured in the PetClinic-
2.
Deploy job:
Click on Save and Apply.
3.
In the next section, we will configure upstream and downstream relationships between all
the jobs we have created so far.
Upstream and downstream jobs
An upstream job is a configured project that triggers a project as part of its execution. A
downstream job is a configured project that is triggered as part of the execution of the
pipeline.

Build Pipeline and Pipeline as a Code
[ 179 ]
Let's start with the first job we created for static code analysis. Go to the Post-build Action
section in the configuration of the PetClinic-Code build job.
Select Build other projects from the available options:
1.
We would like to create a package after static code analysis is done, so we will
2.
select PetClinic-Package where CI is configured for the compilation of source
code, unit test execution, and package file creation.
Click Save.
3.

Build Pipeline and Pipeline as a Code
[ 180 ]
For PetClinic-Code, PetClinic-Package is a downstream job, while for PetClinic-
4.
Package, PetClinic-Code is an upstream job:

Build Pipeline and Pipeline as a Code
[ 181 ]
Once our package is ready, we would like to deploy it, so from the PetClinic-
5.
Package job, we will configure PetClinic-Deploy as a downstream job in Post-
build Actions:

Build Pipeline and Pipeline as a Code
[ 182 ]
Once our application is deployed to the server, we would like to perform
6.
functional test cases, so from the PetClinic-Deploy job, we will configure
PetClinic-FuncTest as a downstream job in Post-build Actions:

Build Pipeline and Pipeline as a Code
[ 183 ]
Once the functional test cases are executed successfully, we would like to
7.
perform load testing so from the PetClinic-FuncTest job, we will configure
PetClinic-LoadTest as a downstream job in Post-build Actions:

Build Pipeline and Pipeline as a Code
[ 184 ]
Once load testing is completed, we would like to deploy the application in the
8.
prod environment, so from the PetClinic-LoadTest job, we will configure
PetClinic-Prod as a downstream job in Post-build Actions:
Install the plugin from Manage Jenkins | Manage Plugins:
9.

Build Pipeline and Pipeline as a Code
[ 185 ]
Verify the successful installation of the #VJME1JQFMJOF plugin:
10.
Go to the Jenkins dashboard and click on the plus sign on the tabs available.
11.
Provide View name and select Build Pipeline View.
12.

Build Pipeline and Pipeline as a Code
[ 186 ]
Click on Save:
13.
Verify the layout is configured as Based on upstream/downstream relationship.
14.
We want to execute PetClinic-Code as a first job, so select it in Select Initial Job:
15.

Build Pipeline and Pipeline as a Code
[ 187 ]
Select the rest of the configuration as per the requirement.
16.
Change the number of displayed builds from 1 to 3 so it will display the last three
17.
build pipelines executed.
Click on OK:
18.

Build Pipeline and Pipeline as a Code
[ 188 ]
Check the Build Pipeline view in the Jenkins dashboard:
19.
$WKNF2KRGNKPGYKVJEQPaIWTGFWRUVTGCOCPFFQYPUVTGCOLQD
What if we want to continue execution of the pipeline even if a build is unstable?
20.
In such a case, we need to select the option Trigger even if the build is unstable
in Post-build Actions, as shown in the following screenshot:

Build Pipeline and Pipeline as a Code
[ 189 ]
Click on Run in the Build Pipeline view. Wait until the complete pipeline has
21.
been executed:
5WEEGUUHWN'ZGEWVKQPQH$WKNF2KRGNKPGYKVJEQPaIWTGFWRUVTGCOCPFFQYPUVTGCOLQD
Done. This is how we can create a sequence of execution for different build jobs and achieve
end-to-end automation for application lifecycle management. In the next section, we will
achieve similar things using the Pipeline as a Code feature.
Overview of pipeline as a code
The Jenkins Pipeline feature supports Continuous Delivery pipelines and Continuous
Deployment into Jenkins using Pipeline DSL. In Pipeline, we model all related tasks to
decide the sequence of execution. We will perform the same tasks we performed with the
Build Pipeline plugin.

Build Pipeline and Pipeline as a Code
[ 190 ]
Pipeline as a code - implementation
Blue Ocean is a new user interface for Jenkins. The idea behind introducing Blue Ocean is to
make Jenkins and Continuous Delivery approachable to all team members. We will use
Blue Ocean later in the chapter, but we will install it now:

Build Pipeline and Pipeline as a Code
[ 191 ]
Verify the successful installation of the plugin in the Jenkins plugin section:
1.

Build Pipeline and Pipeline as a Code
[ 192 ]
Now we will create our first pipeline in Jenkins.
2.
Click on New Item. Enter an item name and select Pipeline.
3.
Click OK:
4.
This will open the configuration of a newly created pipeline job:
5.

Build Pipeline and Pipeline as a Code
[ 193 ]
Go to the Pipeline section:
6.

Build Pipeline and Pipeline as a Code
[ 194 ]
In the try sample Pipeline dropdown, select GitHub + Maven. It will
7.
automatically generate the syntax for the sample code. Make sure that NWO)PNF
has a proper value, as per the path given for Maven in your system:
Click on Save and Execute the build to verify it.
8.
However, we will create our own pipeline with the same sequence we tried with
9.
Build Pipeline.
Click on Pipeline syntax to generate the syntax for specific tasks we want to
10.
execute.
We can select the steps and configure the required things, and then click on
11.
Generate Pipeline Script to get the syntax that we can directly utilize in our
pipeline:

Build Pipeline and Pipeline as a Code
[ 195 ]
Before creating our first script for a pipeline, let's understand some important
12.
terms:
/PEF defines the node created in the context of Jenkins' master/agent architecture.
It executes the step the moment the executor is available on the node. It creates a
workspace or a directory for the pipeline to keep files. The following is the
sample syntax:
OPEF\FYFDVUFUIFQJQFMJOFPO.BTUFSOPEF^OPEF
	XJOEPXT	\
FYFDVUFUIFQJQFMJOFPOOPEFMBCFMMFEBT8JOEPXT^
Stage is a step that can be considered as a logically separate step such as init,
build, test, deploy, and so on.
Step or a Build Step is a task that can be executed to perform some activity such
as copy BSUJGBDU, BSDIJFWFBSUJGBDU, check out code from GitHub, and define
environment variable.

Build Pipeline and Pipeline as a Code
[ 196 ]
Here is the script for Pipeline:
13.
OPEF\
EFGNWO)PNF
TUBHF
	1SFQBSBUJPO	\GPSEJTQMBZQVSQPTFT
(FU1FU$MJOJDDPEFGSPNB(JU)VCSFQPTJUPSZ
HJU	IUUQTHJUIVCDPNNJUFTITQSJOH
QFUDMJOJDHJU	
(FUUIF.BWFOUPPM
/05&5IJT	BQBDIFNBWFO	.BWFOUPPMNVTUCF
DPOGJHVSFEJOUIFHMPCBMDPOGJHVSBUJPO
NWO)PNFUPPM	BQBDIFNBWFO	
^
TUBHF
	4POBS2VCFBOBMZTJT	\
SFRVJSFT4POBS2VCF4DBOOFS
EFGTDBOOFS)PNFUPPM	4POBS2VCF4DBOOFS	
4POBSRVCFNVTUCFDPOGJHVSFEJOUIF+FOLJOT
$POGJHVSBUJPO "EE4POBS8VCFTFSWFS
XJUI4POBS2VCF&OW
	4POBSRVCF	\
QSPWJEFBMMSFRVJSFEQSPQFSUJFTGPS4POBSFYFDVUJPO
CBU\TDBOOFS)PNF^CJOTPOBSTDBOOFS
%TPOBSIPTUVSMIUUQMPDBMIPTU
%TPOBSMPHJODDCGDFBC
BBCDDGE
%TPOBSQSPKFDU7FSTJPO
%TPOBSQSPKFDU,FZQFUDMJOJD,FZ
%TPOBSTPVSDFTTSD
^
^TUBHF
	#VJME	\
3VOUIFNBWFOCVJMECBTFEPOUIF0QFSBUJOHTZTUFN
JG
JT6OJY
\
TI	\NWO)PNF^CJONWO	
%NBWFOUFTUGBJMVSFJHOPSFDMFBOQBDLBHF
1VCMJTI+6OJU3FQPSU
KVOJU	UBSHFUTVSFGJSFSFQPSUT5&45YNM	
^FMTF\
CBU
\NWO)PNF^=CJO=NWODMFBOQBDLBHF
1VCMJTI+6OJU3FQPSU
KVOJU	UBSHFUTVSFGJSFSFQPSUT5&45YNM	
^
^
TUBHF
	%FQMPZ	\
"SDIJWFUIFBSUJGBDU
BSDIJWF	UBSHFUXBS	
&YFDVUFUIF1FU$MJOJD%FQMPZCVJMEUPEFQMPZXBSGJMFJOUP
UPNDBU
$PQZ"SUJGBDUGSPNUIJT1JQFMJOF1SPKFDUJOUP1FU$MJOJD

Build Pipeline and Pipeline as a Code
[ 197 ]
%FQMPZVTJOH$PQZ"SUJGBDUQMVHJO
CVJME	1FU$MJOJD%FQMPZ	
^
TUBHF
	'VODUJPOBM5FTU	\
$IFDLPVUUIFDPEFGSPN(JUIVCUPFYFDVUF'VODUJPOBMUFTU
HJU	IUUQTHJUIVCDPNNJUFTIQFUDMJOJDGVODHJU	
(PUP(JU)VC%JSFDUPSZBOE'PSLJU$IBOHFUIF63-JO
QFUDMJOJDGVODTSDUFTUKBWBFYBNQMF/FX5FTUKBWB
ESJWFSHFU
IUUQMPDBMIPTUQFUDMJOJD
*OUIFTBNFGJMF$IBOHFMPDBUJPOPG(FDLPESJWFSXFIBWFVTFE
'JSFGPYIFSFPO8JOEPXT'JMFGJMFOFX
'JMF
$==6TFST==.JUFTI==%PXOMPBET==HFDLPESJWFSW
XJO==HFDLPESJWFSFYF
3VOUIFNBWFOCVJMEXJUIUFTUHPBMUPFYFDVUFGVODUJPOBMUFTU
CBU
\NWO)PNF^=CJO=NWOUFTU^
5IJTTUBHFDBOCFPQUJPOBMCBTFEPOUIFSFRVJSFNFOUTTUBHF
	-PBE
5FTU	\
&YFDVUFDPNNBOEUPQFSGPSNMPBEUFTUJOHXJUIUIFVTFPG"QBDIF
+.FUFS*OPVSDBTFXFBSFVTJOH+.FUFSUIBUJTBMSFBEZJOTUBMMFEPO
8JOEPXTIFODFUIFCBUGJMFJTVTFE.BLFTVSFUPDIBOHFUIJT
MPDBUJPOCBTFE
POUIF"QBDIF+.FUFSJOTUBMMBUJPOEJSFDUPSZBWBJMBCMFJOZPVS
TZTUFN
CBU$BQBDIFKNFUFSCJOKNFUFSCBU
+KNFUFSTBWFTBWFTFSWJDFPVUQVU@GPSNBUYNMOU
$6TFST.JUFTI%FTLUPQ1FU$MJOJDKNYM5FTUKUM
1VCMJTI"QBDIF+.FUFSSFTVMUT
QFSG3FQPSUFSSPS'BJMFE5ISFTIPME
FSSPS6OTUBCMF5ISFTIPMEJHOPSF'BJMFE#VJMET
USVFJHOPSF6OTUBCMF#VJMETUSVF
QFSTJTU$POTUSBJOU-PHUSVFTPVSDF%BUB'JMFT
	5FTUKUM	
^
%POF
^

Build Pipeline and Pipeline as a Code
[ 198 ]
Click on Build Now for pipeline execution:
14.
Verify the stage view of the pipeline we have created by clicking on Full Stage
15.
View on the Jenkins dashboard:

Build Pipeline and Pipeline as a Code
[ 199 ]
Mouse over the specific stage and click on Logs:
16.
We can see and verify the stage logs directly from the stage view:
17.

Build Pipeline and Pipeline as a Code
[ 200 ]
Click on the dropdown to get more details on the log:
18.

Build Pipeline and Pipeline as a Code
[ 201 ]
Let's go to individual stage logs in the Console output:
19.
1. Look at the log for Preparation Stage:

Build Pipeline and Pipeline as a Code
[ 202 ]
2. Look at the log for Sonarqube analysis stage:

Build Pipeline and Pipeline as a Code
[ 203 ]
3. Look at the log for Build Stage:

Build Pipeline and Pipeline as a Code
[ 204 ]
4. Look at the log for Deploy and Functional Test Stage:

Build Pipeline and Pipeline as a Code
[ 205 ]
5. Look at the log for Load Test Stage:

Build Pipeline and Pipeline as a Code
[ 206 ]
On the project dashboard, look at the stage view at the bottom:
20.
Now let's see how our pipeline looks in the Blue Ocean User Interface. Go to the
21.
FirstPipeline pipeline job that we have created. Click on the Blue Ocean link in
the top bar on the Jenkins dashboard.

Build Pipeline and Pipeline as a Code
[ 207 ]
Click on successful pipeline 20:
22.
It will give details on the execution status of each stage in the Blue Ocean
23.
dashboard. Logs are available on the same page:

Build Pipeline and Pipeline as a Code
[ 208 ]
Select any stage and check the logs for the stage on the same page:
24.
Click on the Tests link on the top bar to verify the status of the Junit test cases
25.
executed in the pipeline:
Click on the Artifacts link on the top bar to verify all the artifacts available in this
26.
pipeline:

Build Pipeline and Pipeline as a Code
[ 209 ]
In the next section, we will cover one important plugin, the Promoted builds plugin.
Promoted builds
The Promoted builds plugin allows us to tag the builds based on specific stages. This
promotion can be manual or automated. We can identify promoted builds based on the star
available on the project dashboard or the star available in Build History.
Go to Manage Jenkins and click on Manage Plugins.
1.
Select promoted builds plugin and click on Install without restart:
2.
Go to the PetClinic-FuncTest build and open its configuration.
3.
In the General section, click on Promote builds when...
4.

Build Pipeline and Pipeline as a Code
[ 210 ]
Provide a name and select a star you want to associate build if the criteria is
5.
passed in the icon list box in the promotion process section.
Select Promote immediately when build is complete, as shown in following
6.
screenshot:
We can also select Only when manually approved and then we can give the
7.
Email ID of the approver.
Click on Build Now and observe the Jenkins dashboard. Look out for the green
8.
star in Build History when the build is executed successfully:

Build Pipeline and Pipeline as a Code
[ 211 ]
The promoted builds feature can be utilized efficiently to assign a quality rating to the
outcome of the build, so it can be utilized with confidence.
Summary
We have covered one of the most important concepts in this book; the orchestration of build
jobs that performs various important tasks. We have configured end-to-end automation
using the Build Pipeline plugin and also using the Pipeline as a Code feature available in
Jenkins 2 and later.
We have utilized the Promoted builds plugin to assign quality tags to build jobs as well.
In the next chapter, we will see how to manage and monitor Jenkins and resources
efficiently, using features available in Jenkins and also with the use of existing plugins.

8
Managing and Monitoring
Jenkins
The management and monitoring of Jenkins is essential, as it is at the core of our
automation vision. We can utilize existing Jenkins features or plugins to manage and
monitor Jenkins and its jobs effectively.
This chapter gives insight into the management of Jenkins nodes and monitoring them with
Java melody to provide details on the utilization of resources. It also covers how to monitor
build jobs configured for Java or .NET-related applications, and managing those
configurations by keeping backups of them. This chapter describes the basic security
configuration available in Jenkins in detail, for better access control and authorization. We
will cover the following topics in this chapter:
Managing Jenkins Master and Agent nodes
Jenkins Monitoring with Java Melody
Managing job-specific configurations - backup and restore
Managing disk usage
Build job-specific monitoring with the Build Monitor plugin
The Audit Trail plugin- overview and usage
The Workspace Cleanup plugin
The pre-scm-build step plugin
The conditional build step plugin
The EnvInject plugin

Managing and Monitoring Jenkins
[ 213 ]
In this chapter, we will cover the management and monitoring of Jenkins as a part of our
DevOps journey:
At the end of this chapter, we will know how to configure Agent nodes for distributed
architecture and be able to use various other plugins and functionalities to manage and
monitor Jenkins effectively.
Managing Jenkins master and slave nodes
Jenkins supports a Master/Agent architecture. In a Master/Agent architecture, we can install
Jenkins on the master and then utilize other agents for distributing the load.
We can delegate Jenkins jobs to agents for execution. This way we can support multiple
executions using different resources.

Managing and Monitoring Jenkins
[ 214 ]
There are specific scenarios where a Master/Agent architecture is extremely useful, such as
the following:
A Jenkins machine has limited capacity. Even with higher capacity, there will be a
time when it can't fulfil all requests. By distributing the load between Agent
nodes, we can free system resources where Jenkins is installed.
Different jobs require different kinds of resources, and they are restricted to
specific machines only. In such cases, we can only utilize that machine -- it is not
possible to configure it on the Jenkins system -- so it is better to utilize that
machine as an agent.
If different operating systems are required or some tools work only in specific
OSes, then we can utilize those tools by making a system agent on which they are
installed.
To avoid a single point of failure caused by installing each and every tool on the
Jenkins machine.
The important thing here is we don't install Jenkins on Agent nodes at all. We only install
Jenkins on the Master and utilize that Jenkins for orchestrating the Master/Agent
architecture.
Just to note, whichever system we install Jenkins on becomes master.
Verify that by navigating to Manage Jenkins|Manage Nodes.

Managing and Monitoring Jenkins
[ 215 ]
Navigate to Manage Jenkins|Manage Nodes and click on New Node.
Give the node a name and select Permanent Agent; click OK:
Provide details as required and click on Save:

Managing and Monitoring Jenkins
[ 216 ]
The following table describes all fields available for Agent configuration in detail:
# of executors
Here we can specify the maximum number of concurrent builds that
Jenkins may execute on this agent node.
Agents must have at least one executor for Job execution, and in case
we don't want any execution, then we can configure this setting to 0.
Remote root
directory
An agent node requires a directory dedicated to Jenkins. Specify the
path to this directory on the agent. Use an absolute path only. All job
configurations, build logs, and artifacts are stored on the master.
Workspace is available on the Agent Node.
Labels
Labels or tags can be utilized to group multiple Agent Nodes into a
logical collection. The best thing is that we can use this mechanism as a
pool of resources to execute build jobs in Jenkins. For instance, we
have multiple Agents where the test infrastructure is set up. We have
two to three projects whose automated testing is done by the QA team.
In such a scenario, we can provide the same "Test" label, or tag to all
Agent nodes where the test infrastructure is available and then assign
the same "Test" label to those projects. It will execute the build jobs on
any one of the Test agents with the Test label, but not one without it.
Usage
This setting controls how Jenkins schedules builds on a specific Agent
node.
Use this node as much as possible: This is the default setting where
most of the time this agent node will be utilized for Job execution.
Only build jobs with label expressions matching this node: With this
setting, Jenkins will execute builds on this agent node when that
project (or Jenkins build job) is configured to execute on this node with
label expression.
Launch method
This setting controls how Jenkins starts the specific agent node.
Launch agent via Java Web Start: This allows an agent to be launched
using Java Web Start.
Launch the agent via the execution of a command on the master by
remotely executing a process on another machine, such as via SSH or
RSH.
Launch slave agents via SSH by sending commands over a secure SSH
connection.
Let Jenkins control this Windows slave as a Windows service as it
starts a Windows slave by a remote management facility built into
Windows.

Managing and Monitoring Jenkins
[ 217 ]
Availability
This setting controls when Jenkins starts and stops this agent.
Keep this agent online as much as possible.
Take this agent online and offline at specific times.
Take this agent online when in demand, and offline when idle.
Environment
variables
We can define Agent node-specific environment variables here.
Tool Locations
We can define Agent node-specific tools locations here.
We can see the newly created agent in the node list as disconnected. Click on it:
See the details available on the Agent page. We are not able to start it:
Go to Manage Jenkins | Configure Global Security | Enable security. In TCP port for
JNLP agents setting, select Random and click on Save:

Managing and Monitoring Jenkins
[ 218 ]
Go to the Agent node again and execute the given command from the Agent node's
terminal or command line; then it should be connected:

Managing and Monitoring Jenkins
[ 219 ]
To configure a job for a specific node, go to Build job and click on Configure.
In the General section, select Restrict where this project can be run and provide the label
of the Agent node that we have created:
Go to Manage Nodes and select the Agent Node to verify the Build job associated with it:

Managing and Monitoring Jenkins
[ 220 ]
This is how we can create a Master/Agent architecture and distribute the load across agents
with only one master available.
Monitoring Jenkins with JavaMelody
The .POJUPSJOH plugin provides monitoring for Jenkins with JavaMelody. It provides
charts for CPU, memory, system load average, HTTP response time, and so on. It also
provides details of HTTP sessions, errors and logs, actions for GC, heap dump, invalidate
session(s), and so on. Install the Monitoring plugin from the Jenkins dashboard:

Managing and Monitoring Jenkins
[ 221 ]
On the Jenkins dashboard, click on Manage Jenkins. Click on Monitoring of
1.
Jenkins master, as shown in the following screenshot:
It will open the statistics for Jenkins instance monitoring, as shown in the
2.
following screenshot. Look at all the statistics:

Managing and Monitoring Jenkins
[ 222 ]
Click on Other charts and see other details related to Garbage Collector time,
3.
Threadcount, and so on:

Managing and Monitoring Jenkins
[ 223 ]
Scroll down the page and find the statistics for the system errors logs. To get
4.
more information, click on the Details link of any section. HTTP statistics are as
shown in the following screenshot:
Check the details available on Threads as well:
5.

Managing and Monitoring Jenkins
[ 224 ]
In the next section, we will cover details on backing up and restoring +&/,*/4@)0.&.
Managing job-specific configurations -
backup and restore
Let's install all the important plugins required for the following sections at once:

Managing and Monitoring Jenkins
[ 225 ]
The #BDLVQ plugin allows us to take a backup of +&/,*/4@)0.& and restore it.
Go to Manage Jenkins and click on Backup Manager:
1.
Click on Setup:
2.

Managing and Monitoring Jenkins
[ 226 ]
Configure Backup directory, Format, File name template, and so on:
3.

Managing and Monitoring Jenkins
[ 227 ]
Click on Backup Hudson configuration:
4.
Once the backup has been completed successfully, verify the logs:
5.

Managing and Monitoring Jenkins
[ 228 ]
Go to Backup Manager and click on Restore Hudson configuration:
6.
In the next section, we will see the disk usage plugin.

Managing and Monitoring Jenkins
[ 229 ]
Managing disk usage
This plugin gives details on disk usage for the system where Jenkins is installed.
Go to Dashboard | Manage Jenkins | Disk Usage:
1.

Managing and Monitoring Jenkins
[ 230 ]
Go to Manage Jenkins and click on Configure System. Go to the disk usage
2.
section and click on Show disk usage trend graph on the project page:

Managing and Monitoring Jenkins
[ 231 ]
Go to the specific project and see whether the disk usage trend chart is available
3.
or not:
In the next section, we will use the Build Monitor View plugin to keep track of the status
and progress of different builds.
Build job-specific monitoring with the Build
Monitor plugin
The #VJME.POJUPS plugin provides a visualization of the status and progress of selected
Jenkins jobs. It displays an updated view automatically every couple of seconds, using
AJAX. It can easily accommodate different computer screen sizes as well:
Go to the Manage Jenkins | Manage Plugins | Available tab. Install the Build
1.
Monitor View plugin:

Managing and Monitoring Jenkins
[ 232 ]
Go to the Jenkins dashboard. Click on New View:
2.

Managing and Monitoring Jenkins
[ 233 ]
Provide a View name and select Build Monitor View. Click OK:
3.
Select the jobs to be displayed in the newly created Build Monitor View.
4.
Click Save:
5.

Managing and Monitoring Jenkins
[ 234 ]
Verify the status of the Build Monitor View in the Jenkins dashboard:
6.
In the next section, we will discuss the Audit trail plugin in brief.
Audit Trail plugin-overview and usage
Keep a log of who executed specific Jenkins operations, such as configuring jobs and so on.
On the Jenkins configuration page, we need to configure the log file location and settings,
such as file size and number of rotating log files:
In the next section, we will discuss the workspace cleanup plugin in brief.

Managing and Monitoring Jenkins
[ 235 ]
Workspace Cleanup plugin
The Workspace Cleanup plugin is used to delete the workspace from Jenkins before the
build, or when a build is finished and artifacts saved. If we want to start a Jenkins build
with a clean workspace, or we want to clean a particular directory before each build, then
we can effectively use this plugin. Different options are available for deleting workspaces.
Install the plugin from the Jenkins dashboard:
We can apply patterns for files to be deleted based on the status of the build job. We can
add post-build actions for workspace deletion:
For more details on the Workspace Cleanup plugin, visit IUUQTQMVHJO
TKFOLJOTJPXTDMFBOVQ.

Managing and Monitoring Jenkins
[ 236 ]
Conditional Build Step plugin
The Conditional Build Step plugin allows us to wrap any number of other build steps,
controlling their execution based on a defined condition.
Install the plugin from the Jenkins dashboard:
This plugin defines a few core run conditions, such as:
Always/Never: To disable a build step from the job configuration
Boolean condition: To execute the step if a token expands to a representation of
true
Current status: To execute the build step if the current build status is within the
configured/specific range
File exists/Files match: To execute the step if a file exists or matches a pattern
Strings match: To execute if the two strings are the same
Numerical comparison: To execute the build step depending on the result of
comparing two numbers
Regular expression match: To execute the build step depending on the matching
of regular expression
Provide a regular expression and a label: To execute the build step if the
expression matches the label

Managing and Monitoring Jenkins
[ 237 ]
Time/Day of week:To execute the build job during a specified period of the day,
or day of the week
And/Or/Not: Logical operations to enable the combining and sense
inversion of run conditions
Build Cause: To execute the build step depending on the cause of
the build, such as triggered by timer, user, scm-change, and so on
Script Condition: Utilize a shell script to decide whether a step
should be skipped
Windows Batch Condition: Utilize Windows Batch to decide
whether a step should be skipped
Select Conditional step (single) from Add build step:

Managing and Monitoring Jenkins
[ 238 ]
Select Conditional steps (multiple) from Add build step. We can add multiple steps to a 
condition in this conditional step:
For more details on Conditional Build Step plugin, visit
IUUQTXJLJKFOLJOTDJPSHEJTQMBZ+&/,*/4$POEJUJPOBM#VJME4UF
Q1MVHJO.
EnvInject plugin
We know that different environments such as dev, test, production, and so on require
different configurations.

Managing and Monitoring Jenkins
[ 239 ]
Install the plugin from the Jenkins dashboard:
The &OW*OKFDU plugin provides a facility to have an isolated environment for different
build jobs. The &OW*OKFDU plugin injects environment variables at node startup, before
and/or after a SCM checkout for a run, as a build step for a run, and so on. Select Inject
environment variables to the build process specific to the build job:

Managing and Monitoring Jenkins
[ 240 ]
For more details on EnvInject plugin, visit
IUUQTXJLJKFOLJOTDJPSHEJTQMBZ+&/,*/4&OW*OKFDU1MVHJO.
Summary
In this chapter, we have seen how to configure a Master/Agent architecture to distribute the
workload and to avoid a single point of failure; however, Jenkins does not have a high
availability story yet and if the master goes down then it will still be a single point failure.
We have also seen different plugins that can enhance the monitoring and management of
Jenkins, as well as plugins that can be utilized to extend the functionality of Jenkins. All
these plugins and the Master/Agent architecture help to make automation more effective
and broaden the scope of different minor innovations that can be done in automating
different activities.
In the next chapter, we will see how to configure security in Jenkins. We will focus on user
management, role-based access, and project-based access using Jenkins.

9
Security in Jenkins
Up to now we have seen static code analysis, Continuous Integration, Continuous
Delivery/Deployment, Continuous Testing, the orchestration of build jobs using the build
pipeline plugin and pipeline as a code, and the management and monitoring of Jenkins
resources.
This chapter will cover the security management options available in Jenkins.
It will help to perform user management, authentication, and authorization, including
matrix-based security and role-based access. We will cover the following major topics in
this chapter:
User management
Role-based security
Project-based security

Security in Jenkins
[ 242 ]
In this chapter, we will cover continuous security practices as a part of our DevOps journey:
6JTGCFFGVCKNUCXCKNCDNGQP,GPMKPU/CUVGTWUKPI,GPMKPU/QPKVQTKPI2NWIKP
At the end of this chapter, we will know how to configure role-based and project-based
security in Jenkins, as well as user management.
User management
In this section, we will cover how to manage multiple users. With user management, we can
provide access to Jenkins for multiple users and provide them role-based or project-based
access when it is required.

Security in Jenkins
[ 243 ]
Go to Manage Jenkins and click on Manage Users:
1.

Security in Jenkins
[ 244 ]
Check the existing admin user available in Jenkins:
2.

Security in Jenkins
[ 245 ]
Click on the Create User link and provide details:
3.

Security in Jenkins
[ 246 ]
Check the list of users in Manage Jenkins| Manage Users:
4.
To allow sign up and access to only logged in users, go to Manage Jenkins |
5.
Configure Global Security.

Security in Jenkins
[ 247 ]
In the Access Control section, click on Jenkins' own user database and select
6.
Allow users to sign up:
So, this is how we can create users and allow users to sign up to access Jenkins.

Security in Jenkins
[ 248 ]
Role-based security
In the Authorization section, we can configure matrix-based security so we can configure
who can do what. We can configure the predefined roles available in Jenkins.
Select Matrix-based security and type a name in the User/group to add box.
1.
Make sure that you give access to Admin before saving it, or the Jenkins account
will be locked out:
Type the name of our newly created user in the User/group to add text box, click
2.
on Add, and provide all the required rights. We can do the same things for
different users.
Click on Save:
3.

Security in Jenkins
[ 249 ]
To verify access has been granted, open a new incognito window in your browser
4.
and log in with the username and password of the newly created user:

Security in Jenkins
[ 250 ]
Verify that limited access is available to the new user, and that the New Item and
5.
Manage Jenkins links are not available:
Now go to Manage Jenkins | Global Security Configuration. Allow Read rights
6.
in the Job category for the user Shreyansh.
Click on Save:
7.

Security in Jenkins
[ 251 ]
Go to the incognito window that we opened before and refresh the page. Now we
8.
have read access to the Jobs available in Jenkins:

Security in Jenkins
[ 252 ]
We can see the jobs, but we can't execute them as rights are not available:
9.
This is how we can manage users and authorization in Jenkins. In the next section, we will
see how to give project-based access.
Project-based security
Project-based Matrix Authorization Strategy is an extension to Matrix-based security. It
allows an access control list matrix to be defined for each project. This feature is very useful
where we want to give access to specific jobs to specific users, so the security of Jenkins is
not compromised.
Go to Manage Jenkins | Global Security Configuration. In the Authorization
1.
section, select Project-based Matrix Authorization Strategy.
Give admin all rights and Save:
2.

Security in Jenkins
[ 253 ]
Go to the incognito window where we logged in using the credentials for
3.
Shreyansh.
Refresh the page and you will get Access Denied. The reason is we haven't given
4.
any rights to Shreyansh in Project-based Matrix Authorization Strategy:

Security in Jenkins
[ 254 ]
We need to provide overall read rights so Shreyansh can access the Jenkins
5.
dashboard:
Now, go to the individual build job as an admin and select Enable project-based
6.
security in the job configuration page.
Add Sreyansh as a User and click on Save:
7.

Security in Jenkins
[ 255 ]
Now, go to the incognito window where Shreyansh is logged in and refresh the
8.
page. We can see one job that we have configured to give access to Shreyansh:

Security in Jenkins
[ 256 ]
Click on Build and verify all the rights are available to the user Shreyansh:
9.
We have finished user management, role-based access, and project-based access in Jenkins
as a part of securing Jenkins.
Summary
Up to now, we have covered static code analysis, Continuous Integration, Continuous
Delivery/Deployment, Continuous Testing, the orchestration of build jobs using the build
pipeline plugin and pipeline as a Code, the management and monitoring of Jenkins
resources, security in Jenkins in the form of user management, role-based access, and
project-based access forusers.
By covering all these topics, we have ensured that we cover almost all major aspects of
application lifecycle management. It is not that only Jenkins can deliver what we have
achieved up to now. It is not about tools only. It is about people, processes, and tools in
DevOps implementations. Another basic but very important thing is to remember that
DevOps is not a tool, technology, model or framework; DevOps is a CULTURE.

Index
A
Ant
   build job, configuring for Java application  ,
, , 
   build job, creating for Java application  , ,
, 
   configuring, in CentOS  
   configuring, in Jenkins  , , 
   configuring, in Windows  
   URL  
   URL, for example  
Apache JMeter
   URL  
   used, for load testing  , , , , 
Audit Trail plugin
   overview  
   usage  
AWS Elastic Beanstalk Publisher plugin
   URL  
AWS Elastic Beanstalk
   war file, deploying from Jenkins  , , ,
, , , , 
B
backup
   job-specific configurations, managing  , ,

Blue Ocean  
build job
   configuring, for Java application with Ant  ,
, , 
   configuring, for Java application with Maven  ,
, 
   creating, for Java application with Ant  , ,
, 
   creating, for Java application with Maven  ,
, 
   creating, with Git  , , 
   creating, with GitHub  , , 
Build Monitor plugin
   used, for monitoring build job  , , 
Build Pipeline
   about  
   downstream job, configuring  , , ,
, , , , 
   job, creating  , 
   upstream job, configuring  , , , ,
, , , 
C
CentOS
   Ant, configuring  
   Git repository, configuring  , 
   Git repository, installing  , 
   Java, installing  
CI/CD pipeline
   overview  
Conditional Build Step plugin
   about  
   installing  , 
   run conditions, defining  
   URL  
Continuous Delivery (CD)
   about  
   overview  
Continuous Deployment
   overview  
Continuous Integration (CI)  , 
Continuous Testing  
D
dashboard  , , 
Dashboard View plugin

[ 258 ]
   installing  , , 
   URL  
disk usage
   managing  , 
domain-specific language (DSL)  
downstream job
   configuring  , , , , , , ,

E
Eclipse
   integrating, with Jenkins  , , , 
email notifications
   sending, of build status  , , 
EnvInject plugin
   about  
   installing  
   URL  
environment variables
   configuring  
F
functional testing
   with Selenium  , , , , , ,
, , , , , , 
G
Generic Java Package (.war)
   URL  
Git repository
   build job, creating with Git  , , 
   build job, creating with GitHub  , 
   configuring, on CentOS  , 
   installing, on CentOS  , 
J
Java application
   build job, configuring with Ant  , , ,

   build job, configuring with Maven  , , 
   build job, creating with Ant  , , , 
   build job, creating with Maven  , , 
Java installer
   URL, for downloading  
Java
   installing  
   installing, on CentOS  
JavaMelody
   used, for monitoring Jenkins  , , ,
, 
JDK
   configuring, in Jenkins  , , 
Jenkins 2.x
   integration, with SonarQube 6.3  , , , ,
, , , , , , , , , , , ,

Jenkins 2
   about  , 
   features  
   installation  , , , , , , 
   plugins, categories  
   URL  
Jenkins
   build, overview  
   Eclipse, integrating  , , , 
   requisites  
   settings, configuring  , 
   war file, deploying to Tomcat  , , , 
job-specific configurations
   managing, for backup and restore  , , 
job
   creating  , , , , , , 
K
Kudu console
   URL  
L
load testing
   with Apache JMeter  , , , , 
M
master and slave nodes
   managing  , , , , , 
Master/Agent architecture  
Matrix-based security  
Maven
   build job, configuring for Java application  ,
, 
   build job, creating for Java application  , ,


   configuring, in Jenkins  , , 
   installing  
   URL  
Microsoft Azure App Services
   war file, deploying from Jenkins  , , ,

Microsoft Azure
   URL  
P
pipeline as code
   implementation  , , , , , ,
, , , , 
   overview  
Platform as a Service (PaaS)  
Project Object Model (POM)  
Project-based Matrix Authorization Strategy  
project-based security
   configuring  , , , , 
promoted builds plugin
   identifying  , 
Q
Quality Gate plugin
   about  
   using  , , , 
R
restore
   job-specific configurations, managing  , ,

role-based security
   configuring  , , , , 
S
Selenium
   used, for functional testing  , , , ,
, , , , , , , , ,

SonarQube  
SonarQube 6.3
   Jenkins 2.x, integration  , , , , , ,
, , , , , , , , , , 
   URL  
T
Tomcat
   installing  
   URL  
   war file, deploying from Jenkins  , , ,

U
upstream job
   configuring  , , , , , , ,

user management  , , , 
W
war file
   deploying, from Jenkins to AWS Elastic
Beanstalk  , , , , , , ,
, , 
   deploying, from Jenkins to Microsoft Azure App
Services  , , 
   deploying, from Jenkins to Tomcat  , ,
, 
Windows 10
   Java, installing  
Windows
   Ant, configuring  
Workspace Cleanup plugin
   about  
   installing  
   URL  

