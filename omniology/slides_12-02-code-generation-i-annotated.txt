Alex Aiken 
Compilers 
Code Generation I 

Alex Aiken 
Code Generation I 
A language with integers and integer operations 
 
            P  D; P | D 
 
            D  def id(ARGS) = E; 
     ARGS  id, ARGS | id 
 
           E  int | id | if E1 = E2 then E3 else E4 
                  | E1 + E2 | E1 – E2 | id(E1,…,En) 

Alex Aiken 
Code Generation I 
• The first function definition f is the entry point 
– The “main” routine 
 
• Program for computing the Fibonacci numbers: 
           def fib(x) = if x = 1 then 0 else  
                               if x = 2 then 1 else   
                                   fib(x - 1) + fib(x – 2)  

Alex Aiken 
Code Generation I 
• For each expression e we generate MIPS code that: 
– Computes the value of e in $a0 
– Preserves $sp and the contents of the stack 
 
• We define a code generation function cgen(e) whose 
result is the code generated for e 

Alex Aiken 
Code Generation I 
• The code to evaluate a constant simply copies it into the 
accumulator: 
                     cgen(i) = li $a0 i 
 
• This  preserves the stack, as required 
 
• Color key: 
– RED: compile time 
– BLUE: run time 
 
 

Alex Aiken 
Code Generation I 
          cgen(e1 + e2) =  
                     cgen(e1)  
                     sw $a0 0($sp) 
                     addiu $sp $sp -4 
                     cgen(e2) 
                     lw $t1 4($sp) 
                     add $a0 $t1 $a0 
                     addiu $sp $sp 4 
cgen(e1 + e2) =  
           cgen(e1)  
           print “sw $a0 0($sp)” 
           print “addiu $sp $sp -4” 
           cgen(e2) 
           print “lw $t1 4($sp)” 
           print “add $a0 $t1 $a0” 
           print “addiu $sp $sp 4” 
 

Alex Aiken 
Code Generation I 
• Optimization: Put the result of e1 directly in  $t1? 
 
         cgen(e1 + e2) =  
                     cgen(e1) 
                     move $t1 $a0  
                     cgen(e2) 
                     add $a0 $t1 $a0 
                      

Alex Aiken 
Code Generation I 
• The code for  + is a template with “holes” for code for 
evaluating e1 and e2 
 
• Stack machine code generation is recursive 
– Code for e1 + e2 is code for e1 and e2 glued together 
 
• Code generation can be written as a recursive-descent of 
the AST 
– At least for expressions 

Alex Aiken 
Code Generation I 
• New instruction: sub reg1 reg2 reg3 
– Implements reg1   reg2 - reg3  
                cgen(e1 - e2) =  
                          cgen(e1)  
                          sw $a0 0($sp) 
                          addiu $sp $sp -4 
                          cgen(e2) 
                          lw $t1 4($sp) 
                          sub $a0 $t1 $a0 
                          addiu $sp $sp 4 
 

Code Generation I 
Choose the expression that the assembly 
code at right was generated from. 
li $a0 5 
sw $a0 0($sp) 
addiu $sp $sp -4 
li $a0 4 
sw $a0 0($sp) 
addiu $sp $sp -4 
li $a0 3 
lw $t1 4($sp) 
sub $a0 $t1 $a0 
addiu $sp $sp 4 
lw $t1 4($sp) 
add $a0 $t1 $a0 
addiu $sp $sp 4 
5 + (4 - 3) 
5 - (4 + 3) 
(5 + 4) - 3 
(5 - 4) + 3 

Alex Aiken 
Code Generation I 
 
• New instruction: beq reg1 reg2 label 
– Branch to label if reg1 = reg2 
 
• New instruction: b label 
– Unconditional jump to label 
 

Alex Aiken 
Code Generation I 
cgen(if e1 = e2 then e3 else e4) =  
  cgen(e1)  
  sw $a0 0($sp) 
  addiu $sp $sp -4 
  cgen(e2) 
  lw $t1 4($sp) 
  addiu $sp $sp 4 
  beq $a0 $t1 true_branch 
 
false_branch: 
  cgen(e4) 
  b end_if 
true_branch: 
  cgen(e3) 
end_if: 
 

