QuickSort	  
Proof	  of	  
Correctness	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Induc=on	  Review	  
Let	  P(n)	  =	  asser=on	  parameterized	  by	  posi=ve	  integers	  n.	  
For	  us	  :	  P(n)	  is	  “Quick	  Sort	  correctly	  sorts	  every	  input	  array	  of	  length	  
n”	  
How	  to	  prove	  P(n)	  for	  all	  n	  >=	  1	  by	  induc=on	  :	  
1.  [base	  case]	  directly	  prove	  that	  P(1)	  holds.	  
2.  [induc=ve	  step]	  for	  every	  n>=2,	  prove	  that:	  
If	  P(k)	  holds	  for	  all	  k<n,	  then	  P(n)	  holds	  as	  well.	  
INDUCTIVE	  
HYPOTHESIS	  

Tim	  Roughgarden	  
Correctness	  of	  QuickSort	  
P(n)	  =	  “	  QuickSort	  correctly	  sorts	  every	  input	  array	  of	  length	  n	  “	  
Claim	  :	  P(n)	  holds	  for	  every	  n	  >=	  1
	  	  	  [no	  maZer	  how	  pivot	  is	  chosen]	  
Proof	  by	  induc=on	  :	  
1.  [base	  case]	  every	  input	  array	  of	  length	  1	  is	  already	  sorted.	  
Quick	  Sort	  returns	  the	  input	  array	  which	  is	  correct	  (so	  P(1)	  holds)	  
2.  [induc=ve	  step]	  Fix	  n>=2.	  Fix	  some	  input	  array	  of	  length	  n.	  
Need	  to	  show	  :	  if	  P(k)	  holds	  for	  all	  k	  <	  n,	  then	  P(n)	  holds	  as	  well.	  

Tim	  Roughgarden	  
Correctness	  of	  QuickSort	  (con’d)	  
Recall	  :	  QuickSort	  ﬁrst	  par==ons	  A	  around	  some	  pivot	  p.	  
Note	  :	  pivot	  winds	  up	  in	  the	  correct	  posi=on.	  
Let	  k1,k2	  =	  lengths	  of	  1st,	  2nd	  parts	  of	  par==oned	  array.	  
By	  induc=ve	  hypothesis	  :	  1st,	  2nd	  parts	  get	  sorted	  correctly	  by	  
recursive	  calls.	  So	  a_er	  recursive	  calls,	  en=re	  array	  correctly	  sorted.	  
Note	  :	  k1,k2	  <	  n	  
Using	  
P(k1),	  
P(k2)	  
1st	  part	  
2nd	  part	  

