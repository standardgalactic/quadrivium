Graph	  Primi*ves	  
Introduc*on	  to	  
Graph	  Search	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
1.  Check	  if	  a	  network	  is	  connected	  (can	  get	  to	  anywhere	  from	  
	  
	  
	  
	  
	  
	  
	  anywhere	  else	  )	  
2.  Driving	  direc*ons	  
3.  Formulate	  a	  plan	  [e.g.,	  how	  to	  ﬁll	  in	  a	  Sudoku	  puzzle]	  
-­‐-­‐	  nodes	  =	  a	  par*ally	  completed	  puzzle 	  -­‐-­‐	  arcs	  =	  ﬁlling	  in	  one	  
	  
	  
	  
	  
	  
	  
	  new	  sequence	  
4.  Compute	  the	  “pieces”	  (or	  “components”)	  of	  a	  graph	  
-­‐-­‐	  clustering,	  structure	  of	  the	  Web	  graph,	  etc.	  
A	  Few	  Mo*va*ons	  
Bacon	  
number	  =	  2	  

Tim	  Roughgarden	  
Generic	  Graph	  Search	  
Goals	  :	  1)	  ﬁnd	  everything	  ﬁndable	  from	  a	  given	  
start	  vertex	  
2)	  don’t	  explore	  anything	  twice	  
	  
Generic	  Algorithm	  (given	  graph	  G,	  vertex	  s)	  
-­‐-­‐	  ini*ally	  s	  explored,	  all	  other	  ver*ces	  	  	  	  
unexplored	  	  
-­‐-­‐	  while	  possible	  :	  
	  -­‐-­‐	  choose	  an	  edge	  (u,v)	  with	  u	  explored	  
	  and	  v	  unexplored	  
	  -­‐-­‐	  mark	  v	  explored	  
Goal:	  
O(m+n)	  *me	  
(	  if	  none,	  halt)	  

Tim	  Roughgarden	  
Claim	  :	  at	  end	  of	  the	  algorithm,	  v	  explored	  <==>	  G	  has	  a	  path	  from	  
(	  G	  undirected	  or	  directed	  ) 	  
	  
	  
	  
	  s	  to	  v	  
Proof	  :	  (=>)	  easy	  induc*on	  on	  number	  of	  itera*ons	  (	  you	  check	  )	  
(<=)	  By	  contradic*on.	  Suppose	  G	  has	  a	  path	  P	  from	  s	  to	  v:	  
	  
	  
	  
But	  v	  unexplored	  at	  end	  of	  the	  algorithm.	  Then	  there	  exists	  an	  
edge	  (u,x)	  in	  P	  with	  u	  explored	  and	  x	  unexplored.	  
But	  then	  algorithm	  would	  not	  have	  terminated,	  contradic*on.	  
Generic	  Graph	  Search	  (con’d)	  
unexplored	  
explored	  

Tim	  Roughgarden	  
Note	  :	  how	  to	  choose	  among	  the	  
possibly	  many	  “fron*er”	  edges	  ?	  
	  
Breadth-­‐First	  Search	  (BFS)	  
-­‐-­‐	  explored	  nodes	  in	  “layers”	  
-­‐-­‐	  can	  compute	  shortest	  paths	  
-­‐-­‐	  can	  compute	  connected	  components	  of	  an	  undirected	  graph	  
	  
Depth-­‐First	  Search	  (DFS)	  
-­‐-­‐	  explore	  aggressively	  like	  a	  maze,	  backtrack	  only	  when	  necessary	  
-­‐-­‐	  compute	  topological	  ordering	  of	  a	  directed	  acyclic	  graph	  
-­‐-­‐	  compute	  connected	  components	  in	  directed	  graphs	  
BFS	  vs.	  DFS	  
O(m+n)	  *me	  
using	  a	  queue	  
(FIFO)	  
O(m+n)	  *me	  using	  a	  stack	  (LIFO)	  
(or	  via	  recursion)	  
explored	  
unexplored	  
Crossing	  
edges	  

