©2019 MathByte Academy

Slots
Remember that instance attributes are normally stored in a local dictionary of class instances
class Point:
def __init__(self, x, y):
self.x = x
self.y = y
p = Point(0,0)
p.__dict__ à {'x': 0, 'y': 0}
As we know there is a certain memory overhead with dictionaries
What happens if we have thousands of instances of Point?
à a lot of overhead!
Python 3.3 introduced key sharing dictionaries to help alleviate this problem
à but we can do even better
à slots
©2019 MathByte Academy

Slots
We can tell Python that a class will contain only certain pre-determined attributes
à Python will then use a more compact data structure to store attribute values
class Point:
__slots__ = ('x', 'y')
def __init__(self, x, y):
self.x = x
self.y = y
an iterable containing the attribute names we will 
use in our class
p = Point(0,0)
p.__dict__
vars(p)
à Attribute Error: Point object has not attribute __dict__
à TypeError: vars() argument must have __dict__ attribute 
dir(p)
à […, 'x', 'y']
p.x à 0
p.x = 100
p.x à 100
©2019 MathByte Academy

Slots
memory savings, even compared to key sharing dictionaries, can be substantial
class Point:
def __init__(self, x, y):
self.x = x
self.y = y
class Point:
__slots__ = ('x', 'y')
def __init__(self, x, y):
self.x = x
self.y = y
10,000 instances
1,729 KB
635 KB
Isn’t creating that many instances of an object rare?
à depends on your program
à example: returning multiple rows from a database and putting each row into an object
à use slots in cases where you know you will benefit substantially
©2019 MathByte Academy

Slots
using slots results in generally faster operations (on average)
def manipulate_dict():
p = PersonDict()
p.name = 'John'
p.name
del p.name
def manipulate_slots():
p = PersonSlots()
p.name = 'John'
p.name
del p.name
class PersonDict:
pass
class PersonSlots:
__slots__ = ('name', )
à about 30% faster
timeit(manipulate_dict)
timeit(manipulate_slots)
©2019 MathByte Academy

Slots
So why not use slots all the time then?
à if we use slots, then we cannot add attributes to our objects that are not defined in slots
class Point:
__slots__ = ('x', 'y')
def __init__(self, x, y):
self.x = x
self.y = y
p = Point(0,0)
p.z = 100
à AttributeError: 'Point' object 
has no attribute 'z'
setattr(p, 'z', 100)
à can cause difficulties in multiple inheritance
©2019 MathByte Academy

Coding
©2019 MathByte Academy

